
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800200  00013226  000132ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00013226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  0080033e  0080033e  000133f8  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  000133f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009e7  00000000  00000000  00015d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001d0  00000000  00000000  00016700  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007504  00000000  00000000  000168d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  0001ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000315e  00000000  00000000  0001e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001338  00000000  00000000  00021928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d17  00000000  00000000  00022c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035e3  00000000  00000000  00023977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00026f5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_5>
      18:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_6>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__vector_35>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_45>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 ef 8b 	jmp	0x117de	; 0x117de <__vector_51>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	e6 e2       	ldi	r30, 0x26	; 38
     108:	f2 e3       	ldi	r31, 0x32	; 50
     10a:	01 e0       	ldi	r16, 0x01	; 1
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	ae 33       	cpi	r26, 0x3E	; 62
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	15 e0       	ldi	r17, 0x05	; 5
     11c:	ae e3       	ldi	r26, 0x3E	; 62
     11e:	b3 e0       	ldi	r27, 0x03	; 3
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ad 30       	cpi	r26, 0x0D	; 13
     126:	b1 07       	cpc	r27, r17
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 f3 8d 	call	0x11be6	; 0x11be6 <main>
     12e:	0c 94 11 99 	jmp	0x13222	; 0x13222 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <lcd_set_4bit>:

/*****Function to Reset LCD*****/

void lcd_set_4bit()

{
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	c0 57       	subi	r28, 0x70	; 112
     144:	d0 40       	sbci	r29, 0x00	; 0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e8       	ldi	r26, 0x80	; 128
     156:	bf e3       	ldi	r27, 0x3F	; 63
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	ab 83       	std	Y+3, r26	; 0x03
     15e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	26 e6       	ldi	r18, 0x66	; 102
     16a:	36 e6       	ldi	r19, 0x66	; 102
     16c:	46 e6       	ldi	r20, 0x66	; 102
     16e:	55 e4       	ldi	r21, 0x45	; 69
     170:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	8d 83       	std	Y+5, r24	; 0x05
     17a:	9e 83       	std	Y+6, r25	; 0x06
     17c:	af 83       	std	Y+7, r26	; 0x07
     17e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e8       	ldi	r20, 0x80	; 128
     190:	5f e3       	ldi	r21, 0x3F	; 63
     192:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <lcd_set_4bit+0x66>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	29 f0       	breq	.+10     	; 0x1aa <lcd_set_4bit+0x74>
		__ticks = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	3f ef       	ldi	r19, 0xFF	; 255
     1b8:	4f e7       	ldi	r20, 0x7F	; 127
     1ba:	57 e4       	ldi	r21, 0x47	; 71
     1bc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     1c0:	18 16       	cp	r1, r24
     1c2:	0c f0       	brlt	.+2      	; 0x1c6 <lcd_set_4bit+0x90>
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	11 23       	and	r17, r17
     1c8:	61 f1       	breq	.+88     	; 0x222 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ca:	69 81       	ldd	r22, Y+1	; 0x01
     1cc:	7a 81       	ldd	r23, Y+2	; 0x02
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	89 87       	std	Y+9, r24	; 0x09
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <lcd_set_4bit+0xe2>
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	8c 01       	movw	r16, r24
     202:	c8 01       	movw	r24, r16
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0xce>
     208:	8c 01       	movw	r16, r24
     20a:	1c 87       	std	Y+12, r17	; 0x0c
     20c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	9a 85       	ldd	r25, Y+10	; 0x0a
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	51 f7       	brne	.-44     	; 0x1f4 <lcd_set_4bit+0xbe>
     220:	17 c0       	rjmp	.+46     	; 0x250 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	6d 81       	ldd	r22, Y+5	; 0x05
     224:	7e 81       	ldd	r23, Y+6	; 0x06
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	9e 87       	std	Y+14, r25	; 0x0e
     23c:	8d 87       	std	Y+13, r24	; 0x0d
     23e:	8d 85       	ldd	r24, Y+13	; 0x0d
     240:	9e 85       	ldd	r25, Y+14	; 0x0e
     242:	8c 01       	movw	r16, r24
     244:	f8 01       	movw	r30, r16
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_set_4bit+0x110>
     24a:	8f 01       	movw	r16, r30
     24c:	1e 87       	std	Y+14, r17	; 0x0e
     24e:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	28 e2       	ldi	r18, 0x28	; 40
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2e 7f       	andi	r18, 0xFE	; 254
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     262:	88 e2       	ldi	r24, 0x28	; 40
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	28 e2       	ldi	r18, 0x28	; 40
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	20 e3       	ldi	r18, 0x30	; 48
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 e2       	ldi	r18, 0x28	; 40
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	24 60       	ori	r18, 0x04	; 4
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 ea       	ldi	r26, 0xA0	; 160
     296:	b0 e4       	ldi	r27, 0x40	; 64
     298:	8f 87       	std	Y+15, r24	; 0x0f
     29a:	98 8b       	std	Y+16, r25	; 0x10
     29c:	a9 8b       	std	Y+17, r26	; 0x11
     29e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a2:	78 89       	ldd	r23, Y+16	; 0x10
     2a4:	89 89       	ldd	r24, Y+17	; 0x11
     2a6:	9a 89       	ldd	r25, Y+18	; 0x12
     2a8:	26 e6       	ldi	r18, 0x66	; 102
     2aa:	36 e6       	ldi	r19, 0x66	; 102
     2ac:	46 e6       	ldi	r20, 0x66	; 102
     2ae:	55 e4       	ldi	r21, 0x45	; 69
     2b0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	8b 8b       	std	Y+19, r24	; 0x13
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	ad 8b       	std	Y+21, r26	; 0x15
     2be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	6b 89       	ldd	r22, Y+19	; 0x13
     2c4:	7c 89       	ldd	r23, Y+20	; 0x14
     2c6:	8d 89       	ldd	r24, Y+21	; 0x15
     2c8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <lcd_set_4bit+0x1a6>
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	11 23       	and	r17, r17
     2de:	29 f0       	breq	.+10     	; 0x2ea <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 8f       	std	Y+24, r25	; 0x18
     2e6:	8f 8b       	std	Y+23, r24	; 0x17
     2e8:	46 c0       	rjmp	.+140    	; 0x376 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	6b 89       	ldd	r22, Y+19	; 0x13
     2ee:	7c 89       	ldd	r23, Y+20	; 0x14
     2f0:	8d 89       	ldd	r24, Y+21	; 0x15
     2f2:	9e 89       	ldd	r25, Y+22	; 0x16
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	3f ef       	ldi	r19, 0xFF	; 255
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	57 e4       	ldi	r21, 0x47	; 71
     2fc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     300:	18 16       	cp	r1, r24
     302:	0c f0       	brlt	.+2      	; 0x306 <lcd_set_4bit+0x1d0>
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	11 23       	and	r17, r17
     308:	61 f1       	breq	.+88     	; 0x362 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     30a:	6f 85       	ldd	r22, Y+15	; 0x0f
     30c:	78 89       	ldd	r23, Y+16	; 0x10
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	9a 89       	ldd	r25, Y+18	; 0x12
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	98 8f       	std	Y+24, r25	; 0x18
     330:	8f 8b       	std	Y+23, r24	; 0x17
     332:	12 c0       	rjmp	.+36     	; 0x358 <lcd_set_4bit+0x222>
     334:	80 e7       	ldi	r24, 0x70	; 112
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	9a 8f       	std	Y+26, r25	; 0x1a
     33a:	89 8f       	std	Y+25, r24	; 0x19
     33c:	89 8d       	ldd	r24, Y+25	; 0x19
     33e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     340:	8c 01       	movw	r16, r24
     342:	c8 01       	movw	r24, r16
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_set_4bit+0x20e>
     348:	8c 01       	movw	r16, r24
     34a:	1a 8f       	std	Y+26, r17	; 0x1a
     34c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34e:	8f 89       	ldd	r24, Y+23	; 0x17
     350:	98 8d       	ldd	r25, Y+24	; 0x18
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	98 8f       	std	Y+24, r25	; 0x18
     356:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     358:	8f 89       	ldd	r24, Y+23	; 0x17
     35a:	98 8d       	ldd	r25, Y+24	; 0x18
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	51 f7       	brne	.-44     	; 0x334 <lcd_set_4bit+0x1fe>
     360:	17 c0       	rjmp	.+46     	; 0x390 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	6b 89       	ldd	r22, Y+19	; 0x13
     364:	7c 89       	ldd	r23, Y+20	; 0x14
     366:	8d 89       	ldd	r24, Y+21	; 0x15
     368:	9e 89       	ldd	r25, Y+22	; 0x16
     36a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	98 8f       	std	Y+24, r25	; 0x18
     374:	8f 8b       	std	Y+23, r24	; 0x17
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	9c 8f       	std	Y+28, r25	; 0x1c
     37c:	8b 8f       	std	Y+27, r24	; 0x1b
     37e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     380:	9c 8d       	ldd	r25, Y+28	; 0x1c
     382:	8c 01       	movw	r16, r24
     384:	f8 01       	movw	r30, r16
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_set_4bit+0x250>
     38a:	8f 01       	movw	r16, r30
     38c:	1c 8f       	std	Y+28, r17	; 0x1c
     38e:	0b 8f       	std	Y+27, r16	; 0x1b

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     390:	88 e2       	ldi	r24, 0x28	; 40
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	28 e2       	ldi	r18, 0x28	; 40
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2b 7f       	andi	r18, 0xFB	; 251
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e8       	ldi	r26, 0x80	; 128
     3a8:	bf e3       	ldi	r27, 0x3F	; 63
     3aa:	8d 8f       	std	Y+29, r24	; 0x1d
     3ac:	9e 8f       	std	Y+30, r25	; 0x1e
     3ae:	af 8f       	std	Y+31, r26	; 0x1f
     3b0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3b4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b8:	98 a1       	lds	r25, 0x48
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	46 e6       	ldi	r20, 0x66	; 102
     3c0:	55 e4       	ldi	r21, 0x45	; 69
     3c2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	89 a3       	lds	r24, 0x59
     3cc:	9a a3       	lds	r25, 0x5a
     3ce:	ab a3       	lds	r26, 0x5b
     3d0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 a1       	lds	r22, 0x49
     3d6:	7a a1       	lds	r23, 0x4a
     3d8:	8b a1       	lds	r24, 0x4b
     3da:	9c a1       	lds	r25, 0x4c
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5f e3       	ldi	r21, 0x3F	; 63
     3e4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <lcd_set_4bit+0x2b8>
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	11 23       	and	r17, r17
     3f0:	29 f0       	breq	.+10     	; 0x3fc <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9e a3       	lds	r25, 0x5e
     3f8:	8d a3       	lds	r24, 0x5d
     3fa:	46 c0       	rjmp	.+140    	; 0x488 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3fc:	11 e0       	ldi	r17, 0x01	; 1
     3fe:	69 a1       	lds	r22, 0x49
     400:	7a a1       	lds	r23, 0x4a
     402:	8b a1       	lds	r24, 0x4b
     404:	9c a1       	lds	r25, 0x4c
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	0c f0       	brlt	.+2      	; 0x418 <lcd_set_4bit+0x2e2>
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	11 23       	and	r17, r17
     41a:	61 f1       	breq	.+88     	; 0x474 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     41e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     420:	8f 8d       	ldd	r24, Y+31	; 0x1f
     422:	98 a1       	lds	r25, 0x48
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e2       	ldi	r20, 0x20	; 32
     42a:	51 e4       	ldi	r21, 0x41	; 65
     42c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	9e a3       	lds	r25, 0x5e
     442:	8d a3       	lds	r24, 0x5d
     444:	12 c0       	rjmp	.+36     	; 0x46a <lcd_set_4bit+0x334>
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 a7       	lds	r25, 0x78
     44c:	8f a3       	lds	r24, 0x5f
     44e:	8f a1       	lds	r24, 0x4f
     450:	98 a5       	lds	r25, 0x68
     452:	8c 01       	movw	r16, r24
     454:	c8 01       	movw	r24, r16
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_set_4bit+0x320>
     45a:	8c 01       	movw	r16, r24
     45c:	18 a7       	lds	r17, 0x78
     45e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	8d a1       	lds	r24, 0x4d
     462:	9e a1       	lds	r25, 0x4e
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	9e a3       	lds	r25, 0x5e
     468:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	8d a1       	lds	r24, 0x4d
     46c:	9e a1       	lds	r25, 0x4e
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	51 f7       	brne	.-44     	; 0x446 <lcd_set_4bit+0x310>
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     474:	69 a1       	lds	r22, 0x49
     476:	7a a1       	lds	r23, 0x4a
     478:	8b a1       	lds	r24, 0x4b
     47a:	9c a1       	lds	r25, 0x4c
     47c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9e a3       	lds	r25, 0x5e
     486:	8d a3       	lds	r24, 0x5d
     488:	8d a1       	lds	r24, 0x4d
     48a:	9e a1       	lds	r25, 0x4e
     48c:	9a a7       	lds	r25, 0x7a
     48e:	89 a7       	lds	r24, 0x79
     490:	89 a5       	lds	r24, 0x69
     492:	9a a5       	lds	r25, 0x6a
     494:	8c 01       	movw	r16, r24
     496:	f8 01       	movw	r30, r16
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_set_4bit+0x362>
     49c:	8f 01       	movw	r16, r30
     49e:	1a a7       	lds	r17, 0x7a
     4a0:	09 a7       	lds	r16, 0x79

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	28 e2       	ldi	r18, 0x28	; 40
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2e 7f       	andi	r18, 0xFE	; 254
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4b4:	88 e2       	ldi	r24, 0x28	; 40
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 e2       	ldi	r18, 0x28	; 40
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2d 7f       	andi	r18, 0xFD	; 253
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	20 e3       	ldi	r18, 0x30	; 48
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     4d0:	88 e2       	ldi	r24, 0x28	; 40
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 e2       	ldi	r18, 0x28	; 40
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	24 60       	ori	r18, 0x04	; 4
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 ea       	ldi	r26, 0xA0	; 160
     4e8:	b0 e4       	ldi	r27, 0x40	; 64
     4ea:	8b a7       	lds	r24, 0x7b
     4ec:	9c a7       	lds	r25, 0x7c
     4ee:	ad a7       	lds	r26, 0x7d
     4f0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f2:	6b a5       	lds	r22, 0x6b
     4f4:	7c a5       	lds	r23, 0x6c
     4f6:	8d a5       	lds	r24, 0x6d
     4f8:	9e a5       	lds	r25, 0x6e
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 e6       	ldi	r20, 0x66	; 102
     500:	55 e4       	ldi	r21, 0x45	; 69
     502:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	8f a7       	lds	r24, 0x7f
     50c:	98 ab       	sts	0x58, r25
     50e:	a9 ab       	sts	0x59, r26
     510:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     512:	11 e0       	ldi	r17, 0x01	; 1
     514:	6f a5       	lds	r22, 0x6f
     516:	78 a9       	sts	0x48, r23
     518:	89 a9       	sts	0x49, r24
     51a:	9a a9       	sts	0x4a, r25
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	0c f0       	brlt	.+2      	; 0x52e <lcd_set_4bit+0x3f8>
     52c:	10 e0       	ldi	r17, 0x00	; 0
     52e:	11 23       	and	r17, r17
     530:	29 f0       	breq	.+10     	; 0x53c <lcd_set_4bit+0x406>
		__ticks = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9c ab       	sts	0x5c, r25
     538:	8b ab       	sts	0x5b, r24
     53a:	46 c0       	rjmp	.+140    	; 0x5c8 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	6f a5       	lds	r22, 0x6f
     540:	78 a9       	sts	0x48, r23
     542:	89 a9       	sts	0x49, r24
     544:	9a a9       	sts	0x4a, r25
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	3f ef       	ldi	r19, 0xFF	; 255
     54a:	4f e7       	ldi	r20, 0x7F	; 127
     54c:	57 e4       	ldi	r21, 0x47	; 71
     54e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <lcd_set_4bit+0x422>
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	11 23       	and	r17, r17
     55a:	61 f1       	breq	.+88     	; 0x5b4 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	6b a5       	lds	r22, 0x6b
     55e:	7c a5       	lds	r23, 0x6c
     560:	8d a5       	lds	r24, 0x6d
     562:	9e a5       	lds	r25, 0x6e
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c ab       	sts	0x5c, r25
     582:	8b ab       	sts	0x5b, r24
     584:	12 c0       	rjmp	.+36     	; 0x5aa <lcd_set_4bit+0x474>
     586:	80 e7       	ldi	r24, 0x70	; 112
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9e ab       	sts	0x5e, r25
     58c:	8d ab       	sts	0x5d, r24
     58e:	8d a9       	sts	0x4d, r24
     590:	9e a9       	sts	0x4e, r25
     592:	8c 01       	movw	r16, r24
     594:	c8 01       	movw	r24, r16
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_set_4bit+0x460>
     59a:	8c 01       	movw	r16, r24
     59c:	1e ab       	sts	0x5e, r17
     59e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	8b a9       	sts	0x4b, r24
     5a2:	9c a9       	sts	0x4c, r25
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9c ab       	sts	0x5c, r25
     5a8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	8b a9       	sts	0x4b, r24
     5ac:	9c a9       	sts	0x4c, r25
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	51 f7       	brne	.-44     	; 0x586 <lcd_set_4bit+0x450>
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6f a5       	lds	r22, 0x6f
     5b6:	78 a9       	sts	0x48, r23
     5b8:	89 a9       	sts	0x49, r24
     5ba:	9a a9       	sts	0x4a, r25
     5bc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9c ab       	sts	0x5c, r25
     5c6:	8b ab       	sts	0x5b, r24
     5c8:	8b a9       	sts	0x4b, r24
     5ca:	9c a9       	sts	0x4c, r25
     5cc:	98 af       	sts	0x78, r25
     5ce:	8f ab       	sts	0x5f, r24
     5d0:	8f a9       	sts	0x4f, r24
     5d2:	98 ad       	sts	0x68, r25
     5d4:	8c 01       	movw	r16, r24
     5d6:	f8 01       	movw	r30, r16
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_set_4bit+0x4a2>
     5dc:	8f 01       	movw	r16, r30
     5de:	18 af       	sts	0x78, r17
     5e0:	0f ab       	sts	0x5f, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	28 e2       	ldi	r18, 0x28	; 40
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	2b 7f       	andi	r18, 0xFB	; 251
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e8       	ldi	r26, 0x80	; 128
     5fa:	bf e3       	ldi	r27, 0x3F	; 63
     5fc:	89 af       	sts	0x79, r24
     5fe:	9a af       	sts	0x7a, r25
     600:	ab af       	sts	0x7b, r26
     602:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     604:	69 ad       	sts	0x69, r22
     606:	7a ad       	sts	0x6a, r23
     608:	8b ad       	sts	0x6b, r24
     60a:	9c ad       	sts	0x6c, r25
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e6       	ldi	r20, 0x66	; 102
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	9e 01       	movw	r18, r28
     61e:	23 5c       	subi	r18, 0xC3	; 195
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	cd 96       	adiw	r24, 0x3d	; 61
     632:	fc 01       	movw	r30, r24
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <lcd_set_4bit+0x518>
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 23       	and	r17, r17
     650:	49 f0       	breq	.+18     	; 0x664 <lcd_set_4bit+0x52e>
		__ticks = 1;
     652:	ce 01       	movw	r24, r28
     654:	8f 5b       	subi	r24, 0xBF	; 191
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	31 83       	std	Z+1, r19	; 0x01
     660:	20 83       	st	Z, r18
     662:	6e c0       	rjmp	.+220    	; 0x740 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     664:	11 e0       	ldi	r17, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	cd 96       	adiw	r24, 0x3d	; 61
     66a:	fc 01       	movw	r30, r24
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <lcd_set_4bit+0x550>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	11 23       	and	r17, r17
     688:	09 f4       	brne	.+2      	; 0x68c <lcd_set_4bit+0x556>
     68a:	49 c0       	rjmp	.+146    	; 0x71e <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	69 ad       	sts	0x69, r22
     68e:	7a ad       	sts	0x6a, r23
     690:	8b ad       	sts	0x6b, r24
     692:	9c ad       	sts	0x6c, r25
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e2       	ldi	r20, 0x20	; 32
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	8e 01       	movw	r16, r28
     6a6:	0f 5b       	subi	r16, 0xBF	; 191
     6a8:	1f 4f       	sbci	r17, 0xFF	; 255
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	f8 01       	movw	r30, r16
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	27 c0       	rjmp	.+78     	; 0x70c <lcd_set_4bit+0x5d6>
     6be:	ce 01       	movw	r24, r28
     6c0:	8d 5b       	subi	r24, 0xBD	; 189
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	20 e7       	ldi	r18, 0x70	; 112
     6c6:	31 e0       	ldi	r19, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
     6ce:	ce 01       	movw	r24, r28
     6d0:	8d 5b       	subi	r24, 0xBD	; 189
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	8c 01       	movw	r16, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_set_4bit+0x5a8>
     6e2:	8c 01       	movw	r16, r24
     6e4:	ce 01       	movw	r24, r28
     6e6:	8d 5b       	subi	r24, 0xBD	; 189
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	fc 01       	movw	r30, r24
     6ec:	11 83       	std	Z+1, r17	; 0x01
     6ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	ce 01       	movw	r24, r28
     6f2:	8f 5b       	subi	r24, 0xBF	; 191
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	9e 01       	movw	r18, r28
     6f8:	2f 5b       	subi	r18, 0xBF	; 191
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	31 81       	ldd	r19, Z+1	; 0x01
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	ce 01       	movw	r24, r28
     70e:	8f 5b       	subi	r24, 0xBF	; 191
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	89 f6       	brne	.-94     	; 0x6be <lcd_set_4bit+0x588>
     71c:	2e c0       	rjmp	.+92     	; 0x77a <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71e:	8e 01       	movw	r16, r28
     720:	0f 5b       	subi	r16, 0xBF	; 191
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	ce 01       	movw	r24, r28
     726:	cd 96       	adiw	r24, 0x3d	; 61
     728:	fc 01       	movw	r30, r24
     72a:	60 81       	ld	r22, Z
     72c:	71 81       	ldd	r23, Z+1	; 0x01
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	f8 01       	movw	r30, r16
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	ce 01       	movw	r24, r28
     742:	8b 5b       	subi	r24, 0xBB	; 187
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	9e 01       	movw	r18, r28
     748:	2f 5b       	subi	r18, 0xBF	; 191
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	fc 01       	movw	r30, r24
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	20 83       	st	Z, r18
     758:	ce 01       	movw	r24, r28
     75a:	8b 5b       	subi	r24, 0xBB	; 187
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	8c 01       	movw	r16, r24
     766:	c8 01       	movw	r24, r16
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <lcd_set_4bit+0x632>
     76c:	8c 01       	movw	r16, r24
     76e:	ce 01       	movw	r24, r28
     770:	8b 5b       	subi	r24, 0xBB	; 187
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	fc 01       	movw	r30, r24
     776:	11 83       	std	Z+1, r17	; 0x01
     778:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	28 e2       	ldi	r18, 0x28	; 40
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2e 7f       	andi	r18, 0xFE	; 254
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     78c:	88 e2       	ldi	r24, 0x28	; 40
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	28 e2       	ldi	r18, 0x28	; 40
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2d 7f       	andi	r18, 0xFD	; 253
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	20 e3       	ldi	r18, 0x30	; 48
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 e2       	ldi	r18, 0x28	; 40
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	24 60       	ori	r18, 0x04	; 4
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	9e 01       	movw	r18, r28
     7bc:	29 5b       	subi	r18, 0xB9	; 185
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 ea       	ldi	r26, 0xA0	; 160
     7c6:	b0 e4       	ldi	r27, 0x40	; 64
     7c8:	f9 01       	movw	r30, r18
     7ca:	80 83       	st	Z, r24
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	a2 83       	std	Z+2, r26	; 0x02
     7d0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	8e 01       	movw	r16, r28
     7d4:	05 5b       	subi	r16, 0xB5	; 181
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	60 81       	ld	r22, Z
     7e2:	71 81       	ldd	r23, Z+1	; 0x01
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	93 81       	ldd	r25, Z+3	; 0x03
     7e8:	26 e6       	ldi	r18, 0x66	; 102
     7ea:	36 e6       	ldi	r19, 0x66	; 102
     7ec:	46 e6       	ldi	r20, 0x66	; 102
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     802:	ce 01       	movw	r24, r28
     804:	85 5b       	subi	r24, 0xB5	; 181
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <lcd_set_4bit+0x6f0>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	11 23       	and	r17, r17
     828:	49 f0       	breq	.+18     	; 0x83c <lcd_set_4bit+0x706>
		__ticks = 1;
     82a:	ce 01       	movw	r24, r28
     82c:	81 5b       	subi	r24, 0xB1	; 177
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	74 c0       	rjmp	.+232    	; 0x924 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     83c:	ce 01       	movw	r24, r28
     83e:	85 5b       	subi	r24, 0xB5	; 181
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <lcd_set_4bit+0x72a>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	11 23       	and	r17, r17
     862:	09 f4       	brne	.+2      	; 0x866 <lcd_set_4bit+0x730>
     864:	4d c0       	rjmp	.+154    	; 0x900 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	ce 01       	movw	r24, r28
     868:	89 5b       	subi	r24, 0xB9	; 185
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	fc 01       	movw	r30, r24
     86e:	60 81       	ld	r22, Z
     870:	71 81       	ldd	r23, Z+1	; 0x01
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	93 81       	ldd	r25, Z+3	; 0x03
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8e 01       	movw	r16, r28
     888:	01 5b       	subi	r16, 0xB1	; 177
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	f8 01       	movw	r30, r16
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
     89e:	27 c0       	rjmp	.+78     	; 0x8ee <lcd_set_4bit+0x7b8>
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 5a       	subi	r24, 0xAF	; 175
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	20 e7       	ldi	r18, 0x70	; 112
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	ce 01       	movw	r24, r28
     8b2:	8f 5a       	subi	r24, 0xAF	; 175
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	8c 01       	movw	r16, r24
     8be:	c8 01       	movw	r24, r16
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_set_4bit+0x78a>
     8c4:	8c 01       	movw	r16, r24
     8c6:	ce 01       	movw	r24, r28
     8c8:	8f 5a       	subi	r24, 0xAF	; 175
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 83       	std	Z+1, r17	; 0x01
     8d0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	ce 01       	movw	r24, r28
     8d4:	81 5b       	subi	r24, 0xB1	; 177
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	9e 01       	movw	r18, r28
     8da:	21 5b       	subi	r18, 0xB1	; 177
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	30 40       	sbci	r19, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	ce 01       	movw	r24, r28
     8f0:	81 5b       	subi	r24, 0xB1	; 177
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	89 f6       	brne	.-94     	; 0x8a0 <lcd_set_4bit+0x76a>
     8fe:	2f c0       	rjmp	.+94     	; 0x95e <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     900:	8e 01       	movw	r16, r28
     902:	01 5b       	subi	r16, 0xB1	; 177
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	ce 01       	movw	r24, r28
     908:	85 5b       	subi	r24, 0xB5	; 181
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	ce 01       	movw	r24, r28
     926:	8d 5a       	subi	r24, 0xAD	; 173
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	9e 01       	movw	r18, r28
     92c:	21 5b       	subi	r18, 0xB1	; 177
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	20 83       	st	Z, r18
     93c:	ce 01       	movw	r24, r28
     93e:	8d 5a       	subi	r24, 0xAD	; 173
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	8c 01       	movw	r16, r24
     94a:	c8 01       	movw	r24, r16
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <lcd_set_4bit+0x816>
     950:	8c 01       	movw	r16, r24
     952:	ce 01       	movw	r24, r28
     954:	8d 5a       	subi	r24, 0xAD	; 173
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	fc 01       	movw	r30, r24
     95a:	11 83       	std	Z+1, r17	; 0x01
     95c:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 e2       	ldi	r18, 0x28	; 40
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2b 7f       	andi	r18, 0xFB	; 251
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	9e 01       	movw	r18, r28
     972:	2b 5a       	subi	r18, 0xAB	; 171
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e8       	ldi	r26, 0x80	; 128
     97c:	bf e3       	ldi	r27, 0x3F	; 63
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     988:	8e 01       	movw	r16, r28
     98a:	07 5a       	subi	r16, 0xA7	; 167
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	ce 01       	movw	r24, r28
     990:	8b 5a       	subi	r24, 0xAB	; 171
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 e6       	ldi	r20, 0x66	; 102
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	87 5a       	subi	r24, 0xA7	; 167
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	fc 01       	movw	r30, r24
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <lcd_set_4bit+0x8a6>
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	11 23       	and	r17, r17
     9de:	49 f0       	breq	.+18     	; 0x9f2 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9e0:	ce 01       	movw	r24, r28
     9e2:	83 5a       	subi	r24, 0xA3	; 163
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	74 c0       	rjmp	.+232    	; 0xada <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9f2:	ce 01       	movw	r24, r28
     9f4:	87 5a       	subi	r24, 0xA7	; 167
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	11 e0       	ldi	r17, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     a10:	18 16       	cp	r1, r24
     a12:	0c f0       	brlt	.+2      	; 0xa16 <lcd_set_4bit+0x8e0>
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	11 23       	and	r17, r17
     a18:	09 f4       	brne	.+2      	; 0xa1c <lcd_set_4bit+0x8e6>
     a1a:	4d c0       	rjmp	.+154    	; 0xab6 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1c:	ce 01       	movw	r24, r28
     a1e:	8b 5a       	subi	r24, 0xAB	; 171
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	8e 01       	movw	r16, r28
     a3e:	03 5a       	subi	r16, 0xA3	; 163
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	f8 01       	movw	r30, r16
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <lcd_set_4bit+0x96e>
     a56:	ce 01       	movw	r24, r28
     a58:	81 5a       	subi	r24, 0xA1	; 161
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	20 e7       	ldi	r18, 0x70	; 112
     a5e:	31 e0       	ldi	r19, 0x01	; 1
     a60:	fc 01       	movw	r30, r24
     a62:	31 83       	std	Z+1, r19	; 0x01
     a64:	20 83       	st	Z, r18
     a66:	ce 01       	movw	r24, r28
     a68:	81 5a       	subi	r24, 0xA1	; 161
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	8c 01       	movw	r16, r24
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <lcd_set_4bit+0x940>
     a7a:	8c 01       	movw	r16, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	81 5a       	subi	r24, 0xA1	; 161
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	11 83       	std	Z+1, r17	; 0x01
     a86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	ce 01       	movw	r24, r28
     a8a:	83 5a       	subi	r24, 0xA3	; 163
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9e 01       	movw	r18, r28
     a90:	23 5a       	subi	r18, 0xA3	; 163
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa4:	ce 01       	movw	r24, r28
     aa6:	83 5a       	subi	r24, 0xA3	; 163
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	89 f6       	brne	.-94     	; 0xa56 <lcd_set_4bit+0x920>
     ab4:	2f c0       	rjmp	.+94     	; 0xb14 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	8e 01       	movw	r16, r28
     ab8:	03 5a       	subi	r16, 0xA3	; 163
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	87 5a       	subi	r24, 0xA7	; 167
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	f8 01       	movw	r30, r16
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
     ada:	ce 01       	movw	r24, r28
     adc:	8f 59       	subi	r24, 0x9F	; 159
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	9e 01       	movw	r18, r28
     ae2:	23 5a       	subi	r18, 0xA3	; 163
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	31 83       	std	Z+1, r19	; 0x01
     af0:	20 83       	st	Z, r18
     af2:	ce 01       	movw	r24, r28
     af4:	8f 59       	subi	r24, 0x9F	; 159
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	8c 01       	movw	r16, r24
     b00:	c8 01       	movw	r24, r16
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <lcd_set_4bit+0x9cc>
     b06:	8c 01       	movw	r16, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	8f 59       	subi	r24, 0x9F	; 159
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	fc 01       	movw	r30, r24
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b14:	88 e2       	ldi	r24, 0x28	; 40
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	28 e2       	ldi	r18, 0x28	; 40
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	2e 7f       	andi	r18, 0xFE	; 254
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	28 e2       	ldi	r18, 0x28	; 40
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	2d 7f       	andi	r18, 0xFD	; 253
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18

	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b38:	88 e2       	ldi	r24, 0x28	; 40
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	20 e2       	ldi	r18, 0x20	; 32
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     b42:	88 e2       	ldi	r24, 0x28	; 40
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	28 e2       	ldi	r18, 0x28	; 40
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	24 60       	ori	r18, 0x04	; 4
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	9e 01       	movw	r18, r28
     b56:	2d 59       	subi	r18, 0x9D	; 157
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 ea       	ldi	r26, 0xA0	; 160
     b60:	b0 e4       	ldi	r27, 0x40	; 64
     b62:	f9 01       	movw	r30, r18
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	8e 01       	movw	r16, r28
     b6e:	09 59       	subi	r16, 0x99	; 153
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	ce 01       	movw	r24, r28
     b74:	8d 59       	subi	r24, 0x9D	; 157
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	fc 01       	movw	r30, r24
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	26 e6       	ldi	r18, 0x66	; 102
     b84:	36 e6       	ldi	r19, 0x66	; 102
     b86:	46 e6       	ldi	r20, 0x66	; 102
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	a2 83       	std	Z+2, r26	; 0x02
     b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	89 59       	subi	r24, 0x99	; 153
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     bba:	88 23       	and	r24, r24
     bbc:	0c f0       	brlt	.+2      	; 0xbc0 <lcd_set_4bit+0xa8a>
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	11 23       	and	r17, r17
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 59       	subi	r24, 0x95	; 149
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	74 c0       	rjmp	.+232    	; 0xcbe <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bd6:	ce 01       	movw	r24, r28
     bd8:	89 59       	subi	r24, 0x99	; 153
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	fc 01       	movw	r30, r24
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <lcd_set_4bit+0xac4>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	11 23       	and	r17, r17
     bfc:	09 f4       	brne	.+2      	; 0xc00 <lcd_set_4bit+0xaca>
     bfe:	4d c0       	rjmp	.+154    	; 0xc9a <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	ce 01       	movw	r24, r28
     c02:	8d 59       	subi	r24, 0x9D	; 157
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8e 01       	movw	r16, r28
     c22:	05 59       	subi	r16, 0x95	; 149
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	27 c0       	rjmp	.+78     	; 0xc88 <lcd_set_4bit+0xb52>
     c3a:	ce 01       	movw	r24, r28
     c3c:	83 59       	subi	r24, 0x93	; 147
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	31 83       	std	Z+1, r19	; 0x01
     c48:	20 83       	st	Z, r18
     c4a:	ce 01       	movw	r24, r28
     c4c:	83 59       	subi	r24, 0x93	; 147
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	8c 01       	movw	r16, r24
     c58:	c8 01       	movw	r24, r16
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_set_4bit+0xb24>
     c5e:	8c 01       	movw	r16, r24
     c60:	ce 01       	movw	r24, r28
     c62:	83 59       	subi	r24, 0x93	; 147
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	fc 01       	movw	r30, r24
     c68:	11 83       	std	Z+1, r17	; 0x01
     c6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	ce 01       	movw	r24, r28
     c6e:	85 59       	subi	r24, 0x95	; 149
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	9e 01       	movw	r18, r28
     c74:	25 59       	subi	r18, 0x95	; 149
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	ce 01       	movw	r24, r28
     c8a:	85 59       	subi	r24, 0x95	; 149
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	89 f6       	brne	.-94     	; 0xc3a <lcd_set_4bit+0xb04>
     c98:	2f c0       	rjmp	.+94     	; 0xcf8 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	8e 01       	movw	r16, r28
     c9c:	05 59       	subi	r16, 0x95	; 149
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	89 59       	subi	r24, 0x99	; 153
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	ce 01       	movw	r24, r28
     cc0:	81 59       	subi	r24, 0x91	; 145
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	9e 01       	movw	r18, r28
     cc6:	25 59       	subi	r18, 0x95	; 149
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 83       	std	Z+1, r19	; 0x01
     cd4:	20 83       	st	Z, r18
     cd6:	ce 01       	movw	r24, r28
     cd8:	81 59       	subi	r24, 0x91	; 145
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	8c 01       	movw	r16, r24
     ce4:	c8 01       	movw	r24, r16
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <lcd_set_4bit+0xbb0>
     cea:	8c 01       	movw	r16, r24
     cec:	ce 01       	movw	r24, r28
     cee:	81 59       	subi	r24, 0x91	; 145
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	fc 01       	movw	r30, r24
     cf4:	11 83       	std	Z+1, r17	; 0x01
     cf6:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	28 e2       	ldi	r18, 0x28	; 40
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	2b 7f       	andi	r18, 0xFB	; 251
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18



	

}
     d0a:	c0 59       	subi	r28, 0x90	; 144
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <lcd_init>:

/*****Function to Initialize LCD*****/

void lcd_init()

{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	2e 97       	sbiw	r28, 0x0e	; 14
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e8       	ldi	r26, 0x80	; 128
     d40:	bf e3       	ldi	r27, 0x3F	; 63
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	26 e6       	ldi	r18, 0x66	; 102
     d54:	36 e6       	ldi	r19, 0x66	; 102
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	af 83       	std	Y+7, r26	; 0x07
     d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d6a:	11 e0       	ldi	r17, 0x01	; 1
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	0c f0       	brlt	.+2      	; 0xd86 <lcd_init+0x64>
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	11 23       	and	r17, r17
     d88:	29 f0       	breq	.+10     	; 0xd94 <lcd_init+0x72>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	89 87       	std	Y+9, r24	; 0x09
     d92:	46 c0       	rjmp	.+140    	; 0xe20 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d94:	11 e0       	ldi	r17, 0x01	; 1
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     daa:	18 16       	cp	r1, r24
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <lcd_init+0x8e>
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	11 23       	and	r17, r17
     db2:	61 f1       	breq	.+88     	; 0xe0c <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	7a 81       	ldd	r23, Y+2	; 0x02
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9a 87       	std	Y+10, r25	; 0x0a
     dda:	89 87       	std	Y+9, r24	; 0x09
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <lcd_init+0xe0>
     dde:	80 e7       	ldi	r24, 0x70	; 112
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	8b 85       	ldd	r24, Y+11	; 0x0b
     de8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dea:	8c 01       	movw	r16, r24
     dec:	c8 01       	movw	r24, r16
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <lcd_init+0xcc>
     df2:	8c 01       	movw	r16, r24
     df4:	1c 87       	std	Y+12, r17	; 0x0c
     df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9a 87       	std	Y+10, r25	; 0x0a
     e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	51 f7       	brne	.-44     	; 0xdde <lcd_init+0xbc>
     e0a:	17 c0       	rjmp	.+46     	; 0xe3a <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a 87       	std	Y+10, r25	; 0x0a
     e1e:	89 87       	std	Y+9, r24	; 0x09
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	9e 87       	std	Y+14, r25	; 0x0e
     e26:	8d 87       	std	Y+13, r24	; 0x0d
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	8c 01       	movw	r16, r24
     e2e:	c8 01       	movw	r24, r16
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <lcd_init+0x10e>
     e34:	8c 01       	movw	r16, r24
     e36:	1e 87       	std	Y+14, r17	; 0x0e
     e38:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x01);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x06);
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x0E);
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x80);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	

}
     e58:	2e 96       	adiw	r28, 0x0e	; 14
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <lcd_wr_command>:

/*****Function to Write Command on LCD*****/

void lcd_wr_command(unsigned char cmd)

{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	6e 97       	sbiw	r28, 0x1e	; 30
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8e 8f       	std	Y+30, r24	; 0x1e

	unsigned char temp;

	temp = cmd;
     e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8a:	89 83       	std	Y+1, r24	; 0x01

	temp = temp & 0xF0;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 7f       	andi	r24, 0xF0	; 240
     e90:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
     e92:	88 e2       	ldi	r24, 0x28	; 40
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 e2       	ldi	r18, 0x28	; 40
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 70       	andi	r18, 0x0F	; 15
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18

	lcd_port |= temp;
     ea4:	88 e2       	ldi	r24, 0x28	; 40
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 e2       	ldi	r18, 0x28	; 40
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	f9 01       	movw	r30, r18
     eae:	30 81       	ld	r19, Z
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	23 2b       	or	r18, r19
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
     eb8:	88 e2       	ldi	r24, 0x28	; 40
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	28 e2       	ldi	r18, 0x28	; 40
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	2e 7f       	andi	r18, 0xFE	; 254
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 e2       	ldi	r18, 0x28	; 40
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	2d 7f       	andi	r18, 0xFD	; 253
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	28 e2       	ldi	r18, 0x28	; 40
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	24 60       	ori	r18, 0x04	; 4
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 ea       	ldi	r26, 0xA0	; 160
     ef4:	b0 e4       	ldi	r27, 0x40	; 64
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	ac 83       	std	Y+4, r26	; 0x04
     efc:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6a 81       	ldd	r22, Y+2	; 0x02
     f00:	7b 81       	ldd	r23, Y+3	; 0x03
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	26 e6       	ldi	r18, 0x66	; 102
     f08:	36 e6       	ldi	r19, 0x66	; 102
     f0a:	46 e6       	ldi	r20, 0x66	; 102
     f0c:	55 e4       	ldi	r21, 0x45	; 69
     f0e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	a8 87       	std	Y+8, r26	; 0x08
     f1c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	6e 81       	ldd	r22, Y+6	; 0x06
     f22:	7f 81       	ldd	r23, Y+7	; 0x07
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
     f34:	88 23       	and	r24, r24
     f36:	0c f0       	brlt	.+2      	; 0xf3a <lcd_wr_command+0xcc>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	11 23       	and	r17, r17
     f3c:	29 f0       	breq	.+10     	; 0xf48 <lcd_wr_command+0xda>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9b 87       	std	Y+11, r25	; 0x0b
     f44:	8a 87       	std	Y+10, r24	; 0x0a
     f46:	46 c0       	rjmp	.+140    	; 0xfd4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	6e 81       	ldd	r22, Y+6	; 0x06
     f4c:	7f 81       	ldd	r23, Y+7	; 0x07
     f4e:	88 85       	ldd	r24, Y+8	; 0x08
     f50:	99 85       	ldd	r25, Y+9	; 0x09
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	0c f0       	brlt	.+2      	; 0xf64 <lcd_wr_command+0xf6>
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	11 23       	and	r17, r17
     f66:	61 f1       	breq	.+88     	; 0xfc0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6a 81       	ldd	r22, Y+2	; 0x02
     f6a:	7b 81       	ldd	r23, Y+3	; 0x03
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9b 87       	std	Y+11, r25	; 0x0b
     f8e:	8a 87       	std	Y+10, r24	; 0x0a
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <lcd_wr_command+0x148>
     f92:	80 e7       	ldi	r24, 0x70	; 112
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	9d 87       	std	Y+13, r25	; 0x0d
     f98:	8c 87       	std	Y+12, r24	; 0x0c
     f9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9e:	8c 01       	movw	r16, r24
     fa0:	c8 01       	movw	r24, r16
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <lcd_wr_command+0x134>
     fa6:	8c 01       	movw	r16, r24
     fa8:	1d 87       	std	Y+13, r17	; 0x0d
     faa:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
     fb4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	51 f7       	brne	.-44     	; 0xf92 <lcd_wr_command+0x124>
     fbe:	17 c0       	rjmp	.+46     	; 0xfee <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6e 81       	ldd	r22, Y+6	; 0x06
     fc2:	7f 81       	ldd	r23, Y+7	; 0x07
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9b 87       	std	Y+11, r25	; 0x0b
     fd2:	8a 87       	std	Y+10, r24	; 0x0a
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd8:	9f 87       	std	Y+15, r25	; 0x0f
     fda:	8e 87       	std	Y+14, r24	; 0x0e
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	8c 01       	movw	r16, r24
     fe2:	f8 01       	movw	r30, r16
     fe4:	31 97       	sbiw	r30, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_wr_command+0x176>
     fe8:	8f 01       	movw	r16, r30
     fea:	1f 87       	std	Y+15, r17	; 0x0f
     fec:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
     fee:	88 e2       	ldi	r24, 0x28	; 40
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e2       	ldi	r18, 0x28	; 40
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	2b 7f       	andi	r18, 0xFB	; 251
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18

	

	cmd = cmd & 0x0F;
    1000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	8e 8f       	std	Y+30, r24	; 0x1e

	cmd = cmd<<4;
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	82 95       	swap	r24
    100a:	80 7f       	andi	r24, 0xF0	; 240
    100c:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	28 e2       	ldi	r18, 0x28	; 40
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	2f 70       	andi	r18, 0x0F	; 15
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18

	lcd_port |= cmd;
    1020:	88 e2       	ldi	r24, 0x28	; 40
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 e2       	ldi	r18, 0x28	; 40
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f9 01       	movw	r30, r18
    102a:	30 81       	ld	r19, Z
    102c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    102e:	23 2b       	or	r18, r19
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
    1034:	88 e2       	ldi	r24, 0x28	; 40
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	28 e2       	ldi	r18, 0x28	; 40
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2e 7f       	andi	r18, 0xFE	; 254
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	28 e2       	ldi	r18, 0x28	; 40
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	2d 7f       	andi	r18, 0xFD	; 253
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1058:	88 e2       	ldi	r24, 0x28	; 40
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 e2       	ldi	r18, 0x28	; 40
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 ea       	ldi	r26, 0xA0	; 160
    1070:	b0 e4       	ldi	r27, 0x40	; 64
    1072:	88 8b       	std	Y+16, r24	; 0x10
    1074:	99 8b       	std	Y+17, r25	; 0x11
    1076:	aa 8b       	std	Y+18, r26	; 0x12
    1078:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    107a:	68 89       	ldd	r22, Y+16	; 0x10
    107c:	79 89       	ldd	r23, Y+17	; 0x11
    107e:	8a 89       	ldd	r24, Y+18	; 0x12
    1080:	9b 89       	ldd	r25, Y+19	; 0x13
    1082:	26 e6       	ldi	r18, 0x66	; 102
    1084:	36 e6       	ldi	r19, 0x66	; 102
    1086:	46 e6       	ldi	r20, 0x66	; 102
    1088:	55 e4       	ldi	r21, 0x45	; 69
    108a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8c 8b       	std	Y+20, r24	; 0x14
    1094:	9d 8b       	std	Y+21, r25	; 0x15
    1096:	ae 8b       	std	Y+22, r26	; 0x16
    1098:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    109a:	11 e0       	ldi	r17, 0x01	; 1
    109c:	6c 89       	ldd	r22, Y+20	; 0x14
    109e:	7d 89       	ldd	r23, Y+21	; 0x15
    10a0:	8e 89       	ldd	r24, Y+22	; 0x16
    10a2:	9f 89       	ldd	r25, Y+23	; 0x17
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <lcd_wr_command+0x248>
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	11 23       	and	r17, r17
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <lcd_wr_command+0x256>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	99 8f       	std	Y+25, r25	; 0x19
    10c0:	88 8f       	std	Y+24, r24	; 0x18
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	6c 89       	ldd	r22, Y+20	; 0x14
    10c8:	7d 89       	ldd	r23, Y+21	; 0x15
    10ca:	8e 89       	ldd	r24, Y+22	; 0x16
    10cc:	9f 89       	ldd	r25, Y+23	; 0x17
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	0c f0       	brlt	.+2      	; 0x10e0 <lcd_wr_command+0x272>
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	11 23       	and	r17, r17
    10e2:	61 f1       	breq	.+88     	; 0x113c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	68 89       	ldd	r22, Y+16	; 0x10
    10e6:	79 89       	ldd	r23, Y+17	; 0x11
    10e8:	8a 89       	ldd	r24, Y+18	; 0x12
    10ea:	9b 89       	ldd	r25, Y+19	; 0x13
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	99 8f       	std	Y+25, r25	; 0x19
    110a:	88 8f       	std	Y+24, r24	; 0x18
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <lcd_wr_command+0x2c4>
    110e:	80 e7       	ldi	r24, 0x70	; 112
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9b 8f       	std	Y+27, r25	; 0x1b
    1114:	8a 8f       	std	Y+26, r24	; 0x1a
    1116:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    111a:	8c 01       	movw	r16, r24
    111c:	c8 01       	movw	r24, r16
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <lcd_wr_command+0x2b0>
    1122:	8c 01       	movw	r16, r24
    1124:	1b 8f       	std	Y+27, r17	; 0x1b
    1126:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	88 8d       	ldd	r24, Y+24	; 0x18
    112a:	99 8d       	ldd	r25, Y+25	; 0x19
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	99 8f       	std	Y+25, r25	; 0x19
    1130:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	88 8d       	ldd	r24, Y+24	; 0x18
    1134:	99 8d       	ldd	r25, Y+25	; 0x19
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	51 f7       	brne	.-44     	; 0x110e <lcd_wr_command+0x2a0>
    113a:	17 c0       	rjmp	.+46     	; 0x116a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6c 89       	ldd	r22, Y+20	; 0x14
    113e:	7d 89       	ldd	r23, Y+21	; 0x15
    1140:	8e 89       	ldd	r24, Y+22	; 0x16
    1142:	9f 89       	ldd	r25, Y+23	; 0x17
    1144:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	99 8f       	std	Y+25, r25	; 0x19
    114e:	88 8f       	std	Y+24, r24	; 0x18
    1150:	88 8d       	ldd	r24, Y+24	; 0x18
    1152:	99 8d       	ldd	r25, Y+25	; 0x19
    1154:	9d 8f       	std	Y+29, r25	; 0x1d
    1156:	8c 8f       	std	Y+28, r24	; 0x1c
    1158:	8c 8d       	ldd	r24, Y+28	; 0x1c
    115a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    115c:	8c 01       	movw	r16, r24
    115e:	f8 01       	movw	r30, r16
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <lcd_wr_command+0x2f2>
    1164:	8f 01       	movw	r16, r30
    1166:	1d 8f       	std	Y+29, r17	; 0x1d
    1168:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    116a:	88 e2       	ldi	r24, 0x28	; 40
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	28 e2       	ldi	r18, 0x28	; 40
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	2b 7f       	andi	r18, 0xFB	; 251
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18

}
    117c:	6e 96       	adiw	r28, 0x1e	; 30
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/

void lcd_wr_char(char letter)

{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	6e 97       	sbiw	r28, 0x1e	; 30
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8e 8f       	std	Y+30, r24	; 0x1e

	char temp;

	temp = letter;
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	89 83       	std	Y+1, r24	; 0x01

	temp = (temp & 0xF0);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
    11b6:	88 e2       	ldi	r24, 0x28	; 40
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	28 e2       	ldi	r18, 0x28	; 40
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	2f 70       	andi	r18, 0x0F	; 15
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18

	lcd_port |= temp;
    11c8:	88 e2       	ldi	r24, 0x28	; 40
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	28 e2       	ldi	r18, 0x28	; 40
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	30 81       	ld	r19, Z
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	23 2b       	or	r18, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    11dc:	88 e2       	ldi	r24, 0x28	; 40
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	28 e2       	ldi	r18, 0x28	; 40
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	21 60       	ori	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	28 e2       	ldi	r18, 0x28	; 40
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	2d 7f       	andi	r18, 0xFD	; 253
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1200:	88 e2       	ldi	r24, 0x28	; 40
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e2       	ldi	r18, 0x28	; 40
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	24 60       	ori	r18, 0x04	; 4
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 ea       	ldi	r26, 0xA0	; 160
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	ac 83       	std	Y+4, r26	; 0x04
    1220:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	7b 81       	ldd	r23, Y+3	; 0x03
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	26 e6       	ldi	r18, 0x66	; 102
    122c:	36 e6       	ldi	r19, 0x66	; 102
    122e:	46 e6       	ldi	r20, 0x66	; 102
    1230:	55 e4       	ldi	r21, 0x45	; 69
    1232:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	a8 87       	std	Y+8, r26	; 0x08
    1240:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1242:	11 e0       	ldi	r17, 0x01	; 1
    1244:	6e 81       	ldd	r22, Y+6	; 0x06
    1246:	7f 81       	ldd	r23, Y+7	; 0x07
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	0c f0       	brlt	.+2      	; 0x125e <lcd_wr_char+0xcc>
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	11 23       	and	r17, r17
    1260:	29 f0       	breq	.+10     	; 0x126c <lcd_wr_char+0xda>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9b 87       	std	Y+11, r25	; 0x0b
    1268:	8a 87       	std	Y+10, r24	; 0x0a
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    126c:	11 e0       	ldi	r17, 0x01	; 1
    126e:	6e 81       	ldd	r22, Y+6	; 0x06
    1270:	7f 81       	ldd	r23, Y+7	; 0x07
    1272:	88 85       	ldd	r24, Y+8	; 0x08
    1274:	99 85       	ldd	r25, Y+9	; 0x09
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	0c f0       	brlt	.+2      	; 0x1288 <lcd_wr_char+0xf6>
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	11 23       	and	r17, r17
    128a:	61 f1       	breq	.+88     	; 0x12e4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6a 81       	ldd	r22, Y+2	; 0x02
    128e:	7b 81       	ldd	r23, Y+3	; 0x03
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9b 87       	std	Y+11, r25	; 0x0b
    12b2:	8a 87       	std	Y+10, r24	; 0x0a
    12b4:	12 c0       	rjmp	.+36     	; 0x12da <lcd_wr_char+0x148>
    12b6:	80 e7       	ldi	r24, 0x70	; 112
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9d 87       	std	Y+13, r25	; 0x0d
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c2:	8c 01       	movw	r16, r24
    12c4:	c8 01       	movw	r24, r16
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <lcd_wr_char+0x134>
    12ca:	8c 01       	movw	r16, r24
    12cc:	1d 87       	std	Y+13, r17	; 0x0d
    12ce:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9b 87       	std	Y+11, r25	; 0x0b
    12d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	51 f7       	brne	.-44     	; 0x12b6 <lcd_wr_char+0x124>
    12e2:	17 c0       	rjmp	.+46     	; 0x1312 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6e 81       	ldd	r22, Y+6	; 0x06
    12e6:	7f 81       	ldd	r23, Y+7	; 0x07
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9b 87       	std	Y+11, r25	; 0x0b
    12f6:	8a 87       	std	Y+10, r24	; 0x0a
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	9f 87       	std	Y+15, r25	; 0x0f
    12fe:	8e 87       	std	Y+14, r24	; 0x0e
    1300:	8e 85       	ldd	r24, Y+14	; 0x0e
    1302:	9f 85       	ldd	r25, Y+15	; 0x0f
    1304:	8c 01       	movw	r16, r24
    1306:	f8 01       	movw	r30, r16
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <lcd_wr_char+0x176>
    130c:	8f 01       	movw	r16, r30
    130e:	1f 87       	std	Y+15, r17	; 0x0f
    1310:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
    1312:	88 e2       	ldi	r24, 0x28	; 40
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	28 e2       	ldi	r18, 0x28	; 40
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	2b 7f       	andi	r18, 0xFB	; 251
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18



	letter = letter & 0x0F;
    1324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	8e 8f       	std	Y+30, r24	; 0x1e

	letter = letter<<4;
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	82 95       	swap	r24
    132e:	80 7f       	andi	r24, 0xF0	; 240
    1330:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    1332:	88 e2       	ldi	r24, 0x28	; 40
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	28 e2       	ldi	r18, 0x28	; 40
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	20 81       	ld	r18, Z
    133e:	2f 70       	andi	r18, 0x0F	; 15
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18

	lcd_port |= letter;
    1344:	88 e2       	ldi	r24, 0x28	; 40
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	28 e2       	ldi	r18, 0x28	; 40
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	f9 01       	movw	r30, r18
    134e:	30 81       	ld	r19, Z
    1350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1352:	23 2b       	or	r18, r19
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    1358:	88 e2       	ldi	r24, 0x28	; 40
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	28 e2       	ldi	r18, 0x28	; 40
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	20 81       	ld	r18, Z
    1364:	21 60       	ori	r18, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	28 e2       	ldi	r18, 0x28	; 40
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	2d 7f       	andi	r18, 0xFD	; 253
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	28 e2       	ldi	r18, 0x28	; 40
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	24 60       	ori	r18, 0x04	; 4
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 ea       	ldi	r26, 0xA0	; 160
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	88 8b       	std	Y+16, r24	; 0x10
    1398:	99 8b       	std	Y+17, r25	; 0x11
    139a:	aa 8b       	std	Y+18, r26	; 0x12
    139c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    139e:	68 89       	ldd	r22, Y+16	; 0x10
    13a0:	79 89       	ldd	r23, Y+17	; 0x11
    13a2:	8a 89       	ldd	r24, Y+18	; 0x12
    13a4:	9b 89       	ldd	r25, Y+19	; 0x13
    13a6:	26 e6       	ldi	r18, 0x66	; 102
    13a8:	36 e6       	ldi	r19, 0x66	; 102
    13aa:	46 e6       	ldi	r20, 0x66	; 102
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8c 8b       	std	Y+20, r24	; 0x14
    13b8:	9d 8b       	std	Y+21, r25	; 0x15
    13ba:	ae 8b       	std	Y+22, r26	; 0x16
    13bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13be:	11 e0       	ldi	r17, 0x01	; 1
    13c0:	6c 89       	ldd	r22, Y+20	; 0x14
    13c2:	7d 89       	ldd	r23, Y+21	; 0x15
    13c4:	8e 89       	ldd	r24, Y+22	; 0x16
    13c6:	9f 89       	ldd	r25, Y+23	; 0x17
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	0c f0       	brlt	.+2      	; 0x13da <lcd_wr_char+0x248>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	11 23       	and	r17, r17
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <lcd_wr_char+0x256>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	99 8f       	std	Y+25, r25	; 0x19
    13e4:	88 8f       	std	Y+24, r24	; 0x18
    13e6:	46 c0       	rjmp	.+140    	; 0x1474 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	6c 89       	ldd	r22, Y+20	; 0x14
    13ec:	7d 89       	ldd	r23, Y+21	; 0x15
    13ee:	8e 89       	ldd	r24, Y+22	; 0x16
    13f0:	9f 89       	ldd	r25, Y+23	; 0x17
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <lcd_wr_char+0x272>
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	11 23       	and	r17, r17
    1406:	61 f1       	breq	.+88     	; 0x1460 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	68 89       	ldd	r22, Y+16	; 0x10
    140a:	79 89       	ldd	r23, Y+17	; 0x11
    140c:	8a 89       	ldd	r24, Y+18	; 0x12
    140e:	9b 89       	ldd	r25, Y+19	; 0x13
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	99 8f       	std	Y+25, r25	; 0x19
    142e:	88 8f       	std	Y+24, r24	; 0x18
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <lcd_wr_char+0x2c4>
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	9b 8f       	std	Y+27, r25	; 0x1b
    1438:	8a 8f       	std	Y+26, r24	; 0x1a
    143a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    143c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    143e:	8c 01       	movw	r16, r24
    1440:	c8 01       	movw	r24, r16
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <lcd_wr_char+0x2b0>
    1446:	8c 01       	movw	r16, r24
    1448:	1b 8f       	std	Y+27, r17	; 0x1b
    144a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	88 8d       	ldd	r24, Y+24	; 0x18
    144e:	99 8d       	ldd	r25, Y+25	; 0x19
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	99 8f       	std	Y+25, r25	; 0x19
    1454:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	88 8d       	ldd	r24, Y+24	; 0x18
    1458:	99 8d       	ldd	r25, Y+25	; 0x19
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	51 f7       	brne	.-44     	; 0x1432 <lcd_wr_char+0x2a0>
    145e:	17 c0       	rjmp	.+46     	; 0x148e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	6c 89       	ldd	r22, Y+20	; 0x14
    1462:	7d 89       	ldd	r23, Y+21	; 0x15
    1464:	8e 89       	ldd	r24, Y+22	; 0x16
    1466:	9f 89       	ldd	r25, Y+23	; 0x17
    1468:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	99 8f       	std	Y+25, r25	; 0x19
    1472:	88 8f       	std	Y+24, r24	; 0x18
    1474:	88 8d       	ldd	r24, Y+24	; 0x18
    1476:	99 8d       	ldd	r25, Y+25	; 0x19
    1478:	9d 8f       	std	Y+29, r25	; 0x1d
    147a:	8c 8f       	std	Y+28, r24	; 0x1c
    147c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    147e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1480:	8c 01       	movw	r16, r24
    1482:	f8 01       	movw	r30, r16
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <lcd_wr_char+0x2f2>
    1488:	8f 01       	movw	r16, r30
    148a:	1d 8f       	std	Y+29, r17	; 0x1d
    148c:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e2       	ldi	r18, 0x28	; 40
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	2b 7f       	andi	r18, 0xFB	; 251
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18

}
    14a0:	6e 96       	adiw	r28, 0x1e	; 30
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <lcd_home>:



void lcd_home()

{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62

	lcd_wr_command(0x80);
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <lcd_string>:

/*****Function to Print String on LCD*****/

void lcd_string(char *str)

{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	0f 92       	push	r0
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01

	while(*str != '\0')
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <lcd_string+0x28>

	{

		lcd_wr_char(*str);
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		str++;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01

void lcd_string(char *str)

{

	while(*str != '\0')
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	79 f7       	brne	.-34     	; 0x14dc <lcd_string+0x12>

		str++;

	}

}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <lcd_cursor>:



void lcd_cursor (char row, char column)

{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	0f 92       	push	r0
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02

	switch (row) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	99 f0       	breq	.+38     	; 0x154a <lcd_cursor+0x42>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	24 f4       	brge	.+8      	; 0x1532 <lcd_cursor+0x2a>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	41 f0       	breq	.+16     	; 0x1540 <lcd_cursor+0x38>
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <lcd_cursor+0x60>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	71 f0       	breq	.+28     	; 0x1554 <lcd_cursor+0x4c>
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <lcd_cursor+0x56>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <lcd_cursor+0x60>

		case 1: lcd_wr_command (0x80 + column - 1); break;
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 58       	subi	r24, 0x81	; 129
    1544:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1548:	10 c0       	rjmp	.+32     	; 0x156a <lcd_cursor+0x62>

		case 2: lcd_wr_command (0xc0 + column - 1); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	81 54       	subi	r24, 0x41	; 65
    154e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1552:	0b c0       	rjmp	.+22     	; 0x156a <lcd_cursor+0x62>

		case 3: lcd_wr_command (0x94 + column - 1); break;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	8d 56       	subi	r24, 0x6D	; 109
    1558:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    155c:	06 c0       	rjmp	.+12     	; 0x156a <lcd_cursor+0x62>

		case 4: lcd_wr_command (0xd4 + column - 1); break;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8d 52       	subi	r24, 0x2D	; 45
    1562:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1566:	01 c0       	rjmp	.+2      	; 0x156a <lcd_cursor+0x62>

		default: break;
    1568:	00 00       	nop

	}

}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/

void lcd_print (char row, char coloumn, unsigned int value, int digits)

{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
    158c:	5d 83       	std	Y+5, r21	; 0x05
    158e:	4c 83       	std	Y+4, r20	; 0x04
    1590:	3f 83       	std	Y+7, r19	; 0x07
    1592:	2e 83       	std	Y+6, r18	; 0x06

	unsigned char flag=0;
    1594:	19 82       	std	Y+1, r1	; 0x01

	if(row==0||coloumn==0)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <lcd_print+0x2e>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 23       	and	r24, r24
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <lcd_print+0x34>

	{

		lcd_home();
    15a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <lcd_home>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <lcd_print+0x3c>

	else

	{

		lcd_cursor(row,coloumn);
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	6b 81       	ldd	r22, Y+3	; 0x03
    15ac:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>

	}

	if(digits==5 || flag==1)
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <lcd_print+0x4c>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	b1 f4       	brne	.+44     	; 0x15ec <lcd_print+0x78>

	{

		million=value/10000+48;
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	20 e1       	ldi	r18, 0x10	; 16
    15c6:	37 e2       	ldi	r19, 0x27	; 39
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    15ce:	9b 01       	movw	r18, r22
    15d0:	c9 01       	movw	r24, r18
    15d2:	c0 96       	adiw	r24, 0x30	; 48
    15d4:	90 93 82 04 	sts	0x0482, r25
    15d8:	80 93 81 04 	sts	0x0481, r24

		lcd_wr_char(million);
    15dc:	80 91 81 04 	lds	r24, 0x0481
    15e0:	90 91 82 04 	lds	r25, 0x0482
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==4 || flag==1)
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	9f 81       	ldd	r25, Y+7	; 0x07
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <lcd_print+0x88>
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f5       	brne	.+70     	; 0x1642 <lcd_print+0xce>

	{

		temp = value/1000;
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	28 ee       	ldi	r18, 0xE8	; 232
    1602:	33 e0       	ldi	r19, 0x03	; 3
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    160a:	9b 01       	movw	r18, r22
    160c:	c9 01       	movw	r24, r18
    160e:	90 93 9f 04 	sts	0x049F, r25
    1612:	80 93 9e 04 	sts	0x049E, r24

		thousand = temp%10 + 48;
    1616:	80 91 9e 04 	lds	r24, 0x049E
    161a:	90 91 9f 04 	lds	r25, 0x049F
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	b9 01       	movw	r22, r18
    1624:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    1628:	c0 96       	adiw	r24, 0x30	; 48
    162a:	90 93 ef 04 	sts	0x04EF, r25
    162e:	80 93 ee 04 	sts	0x04EE, r24

		lcd_wr_char(thousand);
    1632:	80 91 ee 04 	lds	r24, 0x04EE
    1636:	90 91 ef 04 	lds	r25, 0x04EF
    163a:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==3 || flag==1)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	19 f0       	breq	.+6      	; 0x1652 <lcd_print+0xde>
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	19 f5       	brne	.+70     	; 0x1698 <lcd_print+0x124>

	{

		temp = value/100;
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	24 e6       	ldi	r18, 0x64	; 100
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    1660:	9b 01       	movw	r18, r22
    1662:	c9 01       	movw	r24, r18
    1664:	90 93 9f 04 	sts	0x049F, r25
    1668:	80 93 9e 04 	sts	0x049E, r24

		hundred = temp%10 + 48;
    166c:	80 91 9e 04 	lds	r24, 0x049E
    1670:	90 91 9f 04 	lds	r25, 0x049F
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 c3 04 	sts	0x04C3, r25
    1684:	80 93 c2 04 	sts	0x04C2, r24

		lcd_wr_char(hundred);
    1688:	80 91 c2 04 	lds	r24, 0x04C2
    168c:	90 91 c3 04 	lds	r25, 0x04C3
    1690:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==2 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x134>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	19 f5       	brne	.+70     	; 0x16ee <lcd_print+0x17a>

	{

		temp = value/10;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    16b6:	9b 01       	movw	r18, r22
    16b8:	c9 01       	movw	r24, r18
    16ba:	90 93 9f 04 	sts	0x049F, r25
    16be:	80 93 9e 04 	sts	0x049E, r24

		tens = temp%10 + 48;
    16c2:	80 91 9e 04 	lds	r24, 0x049E
    16c6:	90 91 9f 04 	lds	r25, 0x049F
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	b9 01       	movw	r22, r18
    16d0:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    16d4:	c0 96       	adiw	r24, 0x30	; 48
    16d6:	90 93 bd 04 	sts	0x04BD, r25
    16da:	80 93 bc 04 	sts	0x04BC, r24

		lcd_wr_char(tens);
    16de:	80 91 bc 04 	lds	r24, 0x04BC
    16e2:	90 91 bd 04 	lds	r25, 0x04BD
    16e6:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==1 || flag==1)
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	19 f0       	breq	.+6      	; 0x16fe <lcd_print+0x18a>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 f4       	brne	.+36     	; 0x1722 <lcd_print+0x1ae>

	{

		unit = value%10 + 48;
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	0e 94 2e 93 	call	0x1265c	; 0x1265c <__udivmodhi4>
    170c:	c0 96       	adiw	r24, 0x30	; 48
    170e:	90 93 ed 04 	sts	0x04ED, r25
    1712:	80 93 ec 04 	sts	0x04EC, r24

		lcd_wr_char(unit);
    1716:	80 91 ec 04 	lds	r24, 0x04EC
    171a:	90 91 ed 04 	lds	r25, 0x04ED
    171e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	if(digits>5)
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	86 30       	cpi	r24, 0x06	; 6
    1728:	91 05       	cpc	r25, r1
    172a:	1c f0       	brlt	.+6      	; 0x1732 <lcd_print+0x1be>

	{

		lcd_wr_char('E');
    172c:	85 e4       	ldi	r24, 0x45	; 69
    172e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	

    1732:	27 96       	adiw	r28, 0x07	; 7
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <motion_pin_config>:

*/

void motion_pin_config(void)

 {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62

    DDRA = DDRA | 0x0F;
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	21 e2       	ldi	r18, 0x21	; 33
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 60       	ori	r18, 0x0F	; 15
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18

    PORTA = PORTA & 0xF0;
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	22 e2       	ldi	r18, 0x22	; 34
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	20 7f       	andi	r18, 0xF0	; 240
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18

    DDRL = DDRL | 0x18; //Setting PL3 and PL4 pins as output for PWM generation
    1770:	8a e0       	ldi	r24, 0x0A	; 10
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 61       	ori	r18, 0x18	; 24
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18

    PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1782:	8b e0       	ldi	r24, 0x0B	; 11
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	2b e0       	ldi	r18, 0x0B	; 11
    1788:	31 e0       	ldi	r19, 0x01	; 1
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	28 61       	ori	r18, 0x18	; 24
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <left_encoder_pin_config>:

*/

void left_encoder_pin_config (void)

{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2d e2       	ldi	r18, 0x2D	; 45
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	2f 7e       	andi	r18, 0xEF	; 239
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18

	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17b4:	8e e2       	ldi	r24, 0x2E	; 46
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2e e2       	ldi	r18, 0x2E	; 46
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	20 61       	ori	r18, 0x10	; 16
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18

}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <right_encoder_pin_config>:

*/

void right_encoder_pin_config (void)

{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    17d4:	8d e2       	ldi	r24, 0x2D	; 45
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2d e2       	ldi	r18, 0x2D	; 45
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	2f 7d       	andi	r18, 0xDF	; 223
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18

	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    17e6:	8e e2       	ldi	r24, 0x2E	; 46
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	2e e2       	ldi	r18, 0x2E	; 46
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	20 62       	ori	r18, 0x20	; 32
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18

}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <velocity>:

*/

void velocity(unsigned char left_motor, unsigned char right_motor) 

{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f 92       	push	r0
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02

    OCR5AL = (unsigned char) left_motor;
    180e:	88 e2       	ldi	r24, 0x28	; 40
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18

    OCR5BL = (unsigned char) right_motor;
    1818:	8a e2       	ldi	r24, 0x2A	; 42
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	2a 81       	ldd	r18, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18

}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <left_position_encoder_interrupt_init>:

*/

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable

{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    1834:	f8 94       	cli

	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1836:	8a e6       	ldi	r24, 0x6A	; 106
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a e6       	ldi	r18, 0x6A	; 106
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	22 60       	ori	r18, 0x02	; 2
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1848:	8d e3       	ldi	r24, 0x3D	; 61
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2d e3       	ldi	r18, 0x3D	; 61
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	20 61       	ori	r18, 0x10	; 16
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    185a:	78 94       	sei

}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <right_position_encoder_interrupt_init>:

*/

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable

{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    186a:	f8 94       	cli

	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    186c:	8a e6       	ldi	r24, 0x6A	; 106
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2a e6       	ldi	r18, 0x6A	; 106
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	f9 01       	movw	r30, r18
    1876:	20 81       	ld	r18, Z
    1878:	28 60       	ori	r18, 0x08	; 8
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2d e3       	ldi	r18, 0x3D	; 61
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	20 62       	ori	r18, 0x20	; 32
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    1890:	78 94       	sei

}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <__vector_6>:

*/

ISR(INT5_vect)

{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	ShaftCountRight++;  //increment right shaft position count
    18b2:	80 91 42 03 	lds	r24, 0x0342
    18b6:	90 91 43 03 	lds	r25, 0x0343
    18ba:	a0 91 44 03 	lds	r26, 0x0344
    18be:	b0 91 45 03 	lds	r27, 0x0345
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	80 93 42 03 	sts	0x0342, r24
    18cc:	90 93 43 03 	sts	0x0343, r25
    18d0:	a0 93 44 03 	sts	0x0344, r26
    18d4:	b0 93 45 03 	sts	0x0345, r27

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_5>:

*/

ISR(INT4_vect)

{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62

	ShaftCountLeft++;  //increment left shaft position count
    1908:	80 91 3e 03 	lds	r24, 0x033E
    190c:	90 91 3f 03 	lds	r25, 0x033F
    1910:	a0 91 40 03 	lds	r26, 0x0340
    1914:	b0 91 41 03 	lds	r27, 0x0341
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	80 93 3e 03 	sts	0x033E, r24
    1922:	90 93 3f 03 	sts	0x033F, r25
    1926:	a0 93 40 03 	sts	0x0340, r26
    192a:	b0 93 41 03 	sts	0x0341, r27

}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <motion_set>:

*/

void motion_set(unsigned char Direction)

 {
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	0f 92       	push	r0
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char PortARestore = 0;
    1952:	19 82       	std	Y+1, r1	; 0x01



    Direction &= 0x0F; // removing upper nibble for protection
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 70       	andi	r24, 0x0F	; 15
    1958:	8a 83       	std	Y+2, r24	; 0x02

    PortARestore = PORTA; // reading PORTA's original status
    195a:	82 e2       	ldi	r24, 0x22	; 34
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	80 81       	ld	r24, Z
    1962:	89 83       	std	Y+1, r24	; 0x01

    PortARestore &= 0xF0; // making lower direction nibble to 0
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	80 7f       	andi	r24, 0xF0	; 240
    1968:	89 83       	std	Y+1, r24	; 0x01

    PortARestore |= Direction; // adding lower nibble for forward command and restoring PORTA's status
    196a:	99 81       	ldd	r25, Y+1	; 0x01
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	89 2b       	or	r24, r25
    1970:	89 83       	std	Y+1, r24	; 0x01

    PORTA = PortARestore; // executing the command
    1972:	82 e2       	ldi	r24, 0x22	; 34
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	29 81       	ldd	r18, Y+1	; 0x01
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18

}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <forward>:

*/

void forward(void)

 {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

    motion_set(0x06);
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <back>:

*/

void back (void)

{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x09);
    19a2:	89 e0       	ldi	r24, 0x09	; 9
    19a4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <left>:

*/

void left (void)

{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x05);
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <right>:

*/

void right (void)

{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x0A);
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <soft_left>:

*/

void soft_left (void)

{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x04);
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <soft_right>:

*/

void soft_right (void) 

{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x02);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <soft_left_2>:

*/

void soft_left_2 (void) 

{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x01);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <soft_right_2>:

*/

void soft_right_2 (void)

{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x08);
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <stop>:

*/

void stop(void)

{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x00);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <angle_rotate>:

*/

void angle_rotate(unsigned int Degrees)

{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2a 97       	sbiw	r28, 0x0a	; 10
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	9a 87       	std	Y+10, r25	; 0x0a
    1a50:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	ab 83       	std	Y+3, r26	; 0x03
    1a5e:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1a60:	1d 82       	std	Y+5, r1	; 0x05
    1a62:	1e 82       	std	Y+6, r1	; 0x06
    1a64:	1f 82       	std	Y+7, r1	; 0x07
    1a66:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	cc 01       	movw	r24, r24
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 15 92 	call	0x1242a	; 0x1242a <__floatunsisf>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	28 e4       	ldi	r18, 0x48	; 72
    1a84:	31 ee       	ldi	r19, 0xE1	; 225
    1a86:	42 e8       	ldi	r20, 0x82	; 130
    1a88:	50 e4       	ldi	r21, 0x40	; 64
    1a8a:	0e 94 81 91 	call	0x12302	; 0x12302 <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	ab 83       	std	Y+3, r26	; 0x03
    1a98:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	cc 01       	movw	r24, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	af 83       	std	Y+7, r26	; 0x07
    1ab6:	b8 87       	std	Y+8, r27	; 0x08

	ShaftCountRight = 0;
    1ab8:	10 92 42 03 	sts	0x0342, r1
    1abc:	10 92 43 03 	sts	0x0343, r1
    1ac0:	10 92 44 03 	sts	0x0344, r1
    1ac4:	10 92 45 03 	sts	0x0345, r1

	ShaftCountLeft = 0;
    1ac8:	10 92 3e 03 	sts	0x033E, r1
    1acc:	10 92 3f 03 	sts	0x033F, r1
    1ad0:	10 92 40 03 	sts	0x0340, r1
    1ad4:	10 92 41 03 	sts	0x0341, r1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <angle_rotate+0xa2>

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))

		break;

	}
    1ada:	00 00       	nop

	while (1)

	{

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1adc:	20 91 42 03 	lds	r18, 0x0342
    1ae0:	30 91 43 03 	lds	r19, 0x0343
    1ae4:	40 91 44 03 	lds	r20, 0x0344
    1ae8:	50 91 45 03 	lds	r21, 0x0345
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	af 81       	ldd	r26, Y+7	; 0x07
    1af4:	b8 85       	ldd	r27, Y+8	; 0x08
    1af6:	28 17       	cp	r18, r24
    1af8:	39 07       	cpc	r19, r25
    1afa:	4a 07       	cpc	r20, r26
    1afc:	5b 07       	cpc	r21, r27
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <angle_rotate+0xc8>
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	20 91 3e 03 	lds	r18, 0x033E
    1b06:	30 91 3f 03 	lds	r19, 0x033F
    1b0a:	40 91 40 03 	lds	r20, 0x0340
    1b0e:	50 91 41 03 	lds	r21, 0x0341
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	af 81       	ldd	r26, Y+7	; 0x07
    1b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <angle_rotate+0xee>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	87 2f       	mov	r24, r23
    1b2a:	86 2b       	or	r24, r22
    1b2c:	88 23       	and	r24, r24
    1b2e:	a9 f2       	breq	.-86     	; 0x1ada <angle_rotate+0xa0>

		break;
    1b30:	00 00       	nop

	}

	stop(); //Stop robot
    1b32:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1b36:	2a 96       	adiw	r28, 0x0a	; 10
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <linear_distance_mm>:

*/

void linear_distance_mm(unsigned int DistanceInMM)

{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	dc 01       	movw	r26, r24
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	ab 83       	std	Y+3, r26	; 0x03
    1b6c:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1b6e:	1d 82       	std	Y+5, r1	; 0x05
    1b70:	1e 82       	std	Y+6, r1	; 0x06
    1b72:	1f 82       	std	Y+7, r1	; 0x07
    1b74:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	cc 01       	movw	r24, r24
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 15 92 	call	0x1242a	; 0x1242a <__floatunsisf>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	25 ee       	ldi	r18, 0xE5	; 229
    1b92:	30 ed       	ldi	r19, 0xD0	; 208
    1b94:	4a ea       	ldi	r20, 0xAA	; 170
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 81 91 	call	0x12302	; 0x12302 <__divsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	ab 83       	std	Y+3, r26	; 0x03
    1ba6:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08

	

	ShaftCountRight = 0;
    1bc0:	10 92 42 03 	sts	0x0342, r1
    1bc4:	10 92 43 03 	sts	0x0343, r1
    1bc8:	10 92 44 03 	sts	0x0344, r1
    1bcc:	10 92 45 03 	sts	0x0345, r1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <linear_distance_mm+0x8c>

			break;

		}

	}
    1bd2:	00 00       	nop

	while(1)

	{

		if(ShaftCountRight > ReqdShaftCountInt)
    1bd4:	20 91 42 03 	lds	r18, 0x0342
    1bd8:	30 91 43 03 	lds	r19, 0x0343
    1bdc:	40 91 44 03 	lds	r20, 0x0344
    1be0:	50 91 45 03 	lds	r21, 0x0345
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	af 81       	ldd	r26, Y+7	; 0x07
    1bea:	b8 85       	ldd	r27, Y+8	; 0x08
    1bec:	82 17       	cp	r24, r18
    1bee:	93 07       	cpc	r25, r19
    1bf0:	a4 07       	cpc	r26, r20
    1bf2:	b5 07       	cpc	r27, r21
    1bf4:	70 f7       	brcc	.-36     	; 0x1bd2 <linear_distance_mm+0x8a>

		{

			break;
    1bf6:	00 00       	nop

		}

	}

	stop(); //Stop robot
    1bf8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1bfc:	2a 96       	adiw	r28, 0x0a	; 10
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <forward_mm>:

*/

void forward_mm(unsigned int DistanceInMM)

{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	0f 92       	push	r0
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01

	forward();
    1c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

	linear_distance_mm(DistanceInMM);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <back_mm>:

*/

void back_mm(unsigned int DistanceInMM)

{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	0f 92       	push	r0
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01

	back();
    1c44:	0e 94 cd 0c 	call	0x199a	; 0x199a <back>

	linear_distance_mm(DistanceInMM);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <left_degrees>:

*/

void left_degrees(unsigned int Degrees)

{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	0f 92       	push	r0
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	left(); //Turn left
    1c6a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>

	angle_rotate(Degrees);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <right_degrees>:

*/

void right_degrees(unsigned int Degrees)

{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	0f 92       	push	r0
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	right(); //Turn right
    1c90:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>

	angle_rotate(Degrees);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <soft_left_degrees>:

*/

void soft_left_degrees(unsigned int Degrees)

{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	0f 92       	push	r0
    1cac:	0f 92       	push	r0
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left(); //Turn soft left
    1cb6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>

	Degrees=Degrees*2;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <soft_right_degrees>:

*/

void soft_right_degrees(unsigned int Degrees)

{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	0f 92       	push	r0
    1cde:	0f 92       	push	r0
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right();  //Turn soft right
    1ce8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>

	Degrees=Degrees*2;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <soft_left_2_degrees>:

*/

void soft_left_2_degrees(unsigned int Degrees)

{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	0f 92       	push	r0
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left_2(); //Turn reverse soft left
    1d1a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>

	Degrees=Degrees*2;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <soft_right_2_degrees>:

*/

void soft_right_2_degrees(unsigned int Degrees)

{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	0f 92       	push	r0
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right_2();  //Turn reverse soft right
    1d4c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>

	Degrees=Degrees*2;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <correct_right>:

*/

void correct_right()

{   stop();
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6c 97       	sbiw	r28, 0x1c	; 28
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d90:	b1 e4       	ldi	r27, 0x41	; 65
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	26 e6       	ldi	r18, 0x66	; 102
    1da4:	36 e6       	ldi	r19, 0x66	; 102
    1da6:	46 e6       	ldi	r20, 0x66	; 102
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	af 83       	std	Y+7, r26	; 0x07
    1db8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1dba:	11 e0       	ldi	r17, 0x01	; 1
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <correct_right+0x68>
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	11 23       	and	r17, r17
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <correct_right+0x76>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a 87       	std	Y+10, r25	; 0x0a
    1de0:	89 87       	std	Y+9, r24	; 0x09
    1de2:	46 c0       	rjmp	.+140    	; 0x1e70 <correct_right+0x102>
	else if (__tmp > 65535)
    1de4:	11 e0       	ldi	r17, 0x01	; 1
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <correct_right+0x92>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	11 23       	and	r17, r17
    1e02:	61 f1       	breq	.+88     	; 0x1e5c <correct_right+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	69 81       	ldd	r22, Y+1	; 0x01
    1e06:	7a 81       	ldd	r23, Y+2	; 0x02
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a 87       	std	Y+10, r25	; 0x0a
    1e2a:	89 87       	std	Y+9, r24	; 0x09
    1e2c:	12 c0       	rjmp	.+36     	; 0x1e52 <correct_right+0xe4>
    1e2e:	80 e7       	ldi	r24, 0x70	; 112
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <correct_right+0xd0>
    1e42:	8c 01       	movw	r16, r24
    1e44:	1c 87       	std	Y+12, r17	; 0x0c
    1e46:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a 87       	std	Y+10, r25	; 0x0a
    1e50:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	51 f7       	brne	.-44     	; 0x1e2e <correct_right+0xc0>
    1e5a:	17 c0       	rjmp	.+46     	; 0x1e8a <correct_right+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a 87       	std	Y+10, r25	; 0x0a
    1e6e:	89 87       	std	Y+9, r24	; 0x09
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	9e 87       	std	Y+14, r25	; 0x0e
    1e76:	8d 87       	std	Y+13, r24	; 0x0d
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	c8 01       	movw	r24, r16
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <correct_right+0x112>
    1e84:	8c 01       	movw	r16, r24
    1e86:	1e 87       	std	Y+14, r17	; 0x0e
    1e88:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_degrees(35);
    1e8a:	83 e2       	ldi	r24, 0x23	; 35
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <soft_right_degrees>
	soft_right();
    1e92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <correct_right+0x12c>
		{   
			stop();
			_delay_ms(50);
			break;
		}
	}
    1e98:	00 00       	nop
	_delay_ms(20);
	soft_right_degrees(35);
	soft_right();
	while(1)
	{
		read_line();    
    1e9a:	81 ea       	ldi	r24, 0xA1	; 161
    1e9c:	93 e3       	ldi	r25, 0x33	; 51
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	19 95       	eicall
		if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>70))
    1ea2:	80 91 47 03 	lds	r24, 0x0347
    1ea6:	8f 30       	cpi	r24, 0x0F	; 15
    1ea8:	20 f0       	brcs	.+8      	; 0x1eb2 <correct_right+0x144>
    1eaa:	80 91 46 03 	lds	r24, 0x0346
    1eae:	8f 30       	cpi	r24, 0x0F	; 15
    1eb0:	20 f4       	brcc	.+8      	; 0x1eba <correct_right+0x14c>
    1eb2:	80 91 47 03 	lds	r24, 0x0347
    1eb6:	87 34       	cpi	r24, 0x47	; 71
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <correct_right+0x12a>
		{   
			stop();
    1eba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	a9 8b       	std	Y+17, r26	; 0x11
    1ecc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ed0:	78 89       	ldd	r23, Y+16	; 0x10
    1ed2:	89 89       	ldd	r24, Y+17	; 0x11
    1ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed6:	26 e6       	ldi	r18, 0x66	; 102
    1ed8:	36 e6       	ldi	r19, 0x66	; 102
    1eda:	46 e6       	ldi	r20, 0x66	; 102
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	ad 8b       	std	Y+21, r26	; 0x15
    1eec:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1eee:	11 e0       	ldi	r17, 0x01	; 1
    1ef0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ef2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ef4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <correct_right+0x19c>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	11 23       	and	r17, r17
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <correct_right+0x1aa>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 8f       	std	Y+24, r25	; 0x18
    1f14:	8f 8b       	std	Y+23, r24	; 0x17
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <correct_right+0x236>
	else if (__tmp > 65535)
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    1f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    1f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <correct_right+0x1c6>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	11 23       	and	r17, r17
    1f36:	61 f1       	breq	.+88     	; 0x1f90 <correct_right+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f3a:	78 89       	ldd	r23, Y+16	; 0x10
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 8f       	std	Y+24, r25	; 0x18
    1f5e:	8f 8b       	std	Y+23, r24	; 0x17
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <correct_right+0x218>
    1f62:	80 e7       	ldi	r24, 0x70	; 112
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9a 8f       	std	Y+26, r25	; 0x1a
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f6e:	8c 01       	movw	r16, r24
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <correct_right+0x204>
    1f76:	8c 01       	movw	r16, r24
    1f78:	1a 8f       	std	Y+26, r17	; 0x1a
    1f7a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	98 8f       	std	Y+24, r25	; 0x18
    1f84:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	51 f7       	brne	.-44     	; 0x1f62 <correct_right+0x1f4>
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <correct_right+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6b 89       	ldd	r22, Y+19	; 0x13
    1f92:	7c 89       	ldd	r23, Y+20	; 0x14
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	9e 89       	ldd	r25, Y+22	; 0x16
    1f98:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	98 8f       	std	Y+24, r25	; 0x18
    1fa2:	8f 8b       	std	Y+23, r24	; 0x17
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <correct_right+0x246>
    1fb8:	8c 01       	movw	r16, r24
    1fba:	1c 8f       	std	Y+28, r17	; 0x1c
    1fbc:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <correct_right+0x254>
    1fc0:	00 00       	nop
		}
	}

}
    1fc2:	6c 96       	adiw	r28, 0x1c	; 28
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <correct_right2>:

*/

void correct_right2()

{   stop();
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6c 97       	sbiw	r28, 0x1c	; 28
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2004:	69 81       	ldd	r22, Y+1	; 0x01
    2006:	7a 81       	ldd	r23, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	26 e6       	ldi	r18, 0x66	; 102
    200e:	36 e6       	ldi	r19, 0x66	; 102
    2010:	46 e6       	ldi	r20, 0x66	; 102
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	af 83       	std	Y+7, r26	; 0x07
    2022:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2024:	11 e0       	ldi	r17, 0x01	; 1
    2026:	6d 81       	ldd	r22, Y+5	; 0x05
    2028:	7e 81       	ldd	r23, Y+6	; 0x06
    202a:	8f 81       	ldd	r24, Y+7	; 0x07
    202c:	98 85       	ldd	r25, Y+8	; 0x08
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    203a:	88 23       	and	r24, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <correct_right2+0x68>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	11 23       	and	r17, r17
    2042:	29 f0       	breq	.+10     	; 0x204e <correct_right2+0x76>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 87       	std	Y+10, r25	; 0x0a
    204a:	89 87       	std	Y+9, r24	; 0x09
    204c:	46 c0       	rjmp	.+140    	; 0x20da <correct_right2+0x102>
	else if (__tmp > 65535)
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	6d 81       	ldd	r22, Y+5	; 0x05
    2052:	7e 81       	ldd	r23, Y+6	; 0x06
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <correct_right2+0x92>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	11 23       	and	r17, r17
    206c:	61 f1       	breq	.+88     	; 0x20c6 <correct_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	69 81       	ldd	r22, Y+1	; 0x01
    2070:	7a 81       	ldd	r23, Y+2	; 0x02
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a 87       	std	Y+10, r25	; 0x0a
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <correct_right2+0xe4>
    2098:	80 e7       	ldi	r24, 0x70	; 112
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a4:	8c 01       	movw	r16, r24
    20a6:	c8 01       	movw	r24, r16
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <correct_right2+0xd0>
    20ac:	8c 01       	movw	r16, r24
    20ae:	1c 87       	std	Y+12, r17	; 0x0c
    20b0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9a 87       	std	Y+10, r25	; 0x0a
    20ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	51 f7       	brne	.-44     	; 0x2098 <correct_right2+0xc0>
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <correct_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6d 81       	ldd	r22, Y+5	; 0x05
    20c8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9a 87       	std	Y+10, r25	; 0x0a
    20d8:	89 87       	std	Y+9, r24	; 0x09
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	9e 87       	std	Y+14, r25	; 0x0e
    20e0:	8d 87       	std	Y+13, r24	; 0x0d
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	8c 01       	movw	r16, r24
    20e8:	c8 01       	movw	r24, r16
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <correct_right2+0x112>
    20ee:	8c 01       	movw	r16, r24
    20f0:	1e 87       	std	Y+14, r17	; 0x0e
    20f2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	right_degrees(35);
    20f4:	83 e2       	ldi	r24, 0x23	; 35
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    20fc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <correct_right2+0x12c>

			break;

		}

	}
    2102:	00 00       	nop
	right();
	while(1)

	{

		read_line();
    2104:	81 ea       	ldi	r24, 0xA1	; 161
    2106:	93 e3       	ldi	r25, 0x33	; 51
    2108:	fc 01       	movw	r30, r24
    210a:	19 95       	eicall

		//if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>71))
		if(Center_white_line > 25)
    210c:	80 91 47 03 	lds	r24, 0x0347
    2110:	8a 31       	cpi	r24, 0x1A	; 26
    2112:	b8 f3       	brcs	.-18     	; 0x2102 <correct_right2+0x12a>

		{

			stop();
    2114:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a8 e4       	ldi	r26, 0x48	; 72
    211e:	b2 e4       	ldi	r27, 0x42	; 66
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	a9 8b       	std	Y+17, r26	; 0x11
    2126:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6f 85       	ldd	r22, Y+15	; 0x0f
    212a:	78 89       	ldd	r23, Y+16	; 0x10
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	26 e6       	ldi	r18, 0x66	; 102
    2132:	36 e6       	ldi	r19, 0x66	; 102
    2134:	46 e6       	ldi	r20, 0x66	; 102
    2136:	55 e4       	ldi	r21, 0x45	; 69
    2138:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	ad 8b       	std	Y+21, r26	; 0x15
    2146:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2148:	11 e0       	ldi	r17, 0x01	; 1
    214a:	6b 89       	ldd	r22, Y+19	; 0x13
    214c:	7c 89       	ldd	r23, Y+20	; 0x14
    214e:	8d 89       	ldd	r24, Y+21	; 0x15
    2150:	9e 89       	ldd	r25, Y+22	; 0x16
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <correct_right2+0x18c>
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	11 23       	and	r17, r17
    2166:	29 f0       	breq	.+10     	; 0x2172 <correct_right2+0x19a>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 8f       	std	Y+24, r25	; 0x18
    216e:	8f 8b       	std	Y+23, r24	; 0x17
    2170:	46 c0       	rjmp	.+140    	; 0x21fe <correct_right2+0x226>
	else if (__tmp > 65535)
    2172:	11 e0       	ldi	r17, 0x01	; 1
    2174:	6b 89       	ldd	r22, Y+19	; 0x13
    2176:	7c 89       	ldd	r23, Y+20	; 0x14
    2178:	8d 89       	ldd	r24, Y+21	; 0x15
    217a:	9e 89       	ldd	r25, Y+22	; 0x16
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <correct_right2+0x1b6>
    218c:	10 e0       	ldi	r17, 0x00	; 0
    218e:	11 23       	and	r17, r17
    2190:	61 f1       	breq	.+88     	; 0x21ea <correct_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6f 85       	ldd	r22, Y+15	; 0x0f
    2194:	78 89       	ldd	r23, Y+16	; 0x10
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	98 8f       	std	Y+24, r25	; 0x18
    21b8:	8f 8b       	std	Y+23, r24	; 0x17
    21ba:	12 c0       	rjmp	.+36     	; 0x21e0 <correct_right2+0x208>
    21bc:	80 e7       	ldi	r24, 0x70	; 112
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	89 8f       	std	Y+25, r24	; 0x19
    21c4:	89 8d       	ldd	r24, Y+25	; 0x19
    21c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21c8:	8c 01       	movw	r16, r24
    21ca:	c8 01       	movw	r24, r16
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <correct_right2+0x1f4>
    21d0:	8c 01       	movw	r16, r24
    21d2:	1a 8f       	std	Y+26, r17	; 0x1a
    21d4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 8f       	std	Y+24, r25	; 0x18
    21de:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	51 f7       	brne	.-44     	; 0x21bc <correct_right2+0x1e4>
    21e8:	18 c0       	rjmp	.+48     	; 0x221a <__stack+0x1b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6b 89       	ldd	r22, Y+19	; 0x13
    21ec:	7c 89       	ldd	r23, Y+20	; 0x14
    21ee:	8d 89       	ldd	r24, Y+21	; 0x15
    21f0:	9e 89       	ldd	r25, Y+22	; 0x16
    21f2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 8f       	std	Y+24, r25	; 0x18
    21fc:	8f 8b       	std	Y+23, r24	; 0x17
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	9c 8f       	std	Y+28, r25	; 0x1c
    2204:	8b 8f       	std	Y+27, r24	; 0x1b
    2206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220a:	8c 01       	movw	r16, r24
    220c:	c8 01       	movw	r24, r16
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <__stack+0xf>
    2212:	8c 01       	movw	r16, r24
    2214:	1c 8f       	std	Y+28, r17	; 0x1c
    2216:	0b 8f       	std	Y+27, r16	; 0x1b

			_delay_ms(50);

			break;
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	00 00       	nop

		}

	}
}
    221c:	6c 96       	adiw	r28, 0x1c	; 28
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <correct_left>:

*/

void correct_left()

{   
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	6c 97       	sbiw	r28, 0x1c	; 28
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
	     stop();
    224a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ea       	ldi	r26, 0xA0	; 160
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	ab 83       	std	Y+3, r26	; 0x03
    225c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    225e:	69 81       	ldd	r22, Y+1	; 0x01
    2260:	7a 81       	ldd	r23, Y+2	; 0x02
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	26 e6       	ldi	r18, 0x66	; 102
    2268:	36 e6       	ldi	r19, 0x66	; 102
    226a:	46 e6       	ldi	r20, 0x66	; 102
    226c:	55 e4       	ldi	r21, 0x45	; 69
    226e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	af 83       	std	Y+7, r26	; 0x07
    227c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    227e:	11 e0       	ldi	r17, 0x01	; 1
    2280:	6d 81       	ldd	r22, Y+5	; 0x05
    2282:	7e 81       	ldd	r23, Y+6	; 0x06
    2284:	8f 81       	ldd	r24, Y+7	; 0x07
    2286:	98 85       	ldd	r25, Y+8	; 0x08
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2294:	88 23       	and	r24, r24
    2296:	0c f0       	brlt	.+2      	; 0x229a <correct_left+0x68>
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	11 23       	and	r17, r17
    229c:	29 f0       	breq	.+10     	; 0x22a8 <correct_left+0x76>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a 87       	std	Y+10, r25	; 0x0a
    22a4:	89 87       	std	Y+9, r24	; 0x09
    22a6:	46 c0       	rjmp	.+140    	; 0x2334 <correct_left+0x102>
	else if (__tmp > 65535)
    22a8:	11 e0       	ldi	r17, 0x01	; 1
    22aa:	6d 81       	ldd	r22, Y+5	; 0x05
    22ac:	7e 81       	ldd	r23, Y+6	; 0x06
    22ae:	8f 81       	ldd	r24, Y+7	; 0x07
    22b0:	98 85       	ldd	r25, Y+8	; 0x08
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    22be:	18 16       	cp	r1, r24
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <correct_left+0x92>
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	11 23       	and	r17, r17
    22c6:	61 f1       	breq	.+88     	; 0x2320 <correct_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9a 87       	std	Y+10, r25	; 0x0a
    22ee:	89 87       	std	Y+9, r24	; 0x09
    22f0:	12 c0       	rjmp	.+36     	; 0x2316 <correct_left+0xe4>
    22f2:	80 e7       	ldi	r24, 0x70	; 112
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fe:	8c 01       	movw	r16, r24
    2300:	c8 01       	movw	r24, r16
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <correct_left+0xd0>
    2306:	8c 01       	movw	r16, r24
    2308:	1c 87       	std	Y+12, r17	; 0x0c
    230a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9a 87       	std	Y+10, r25	; 0x0a
    2314:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	51 f7       	brne	.-44     	; 0x22f2 <correct_left+0xc0>
    231e:	17 c0       	rjmp	.+46     	; 0x234e <correct_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 81       	ldd	r22, Y+5	; 0x05
    2322:	7e 81       	ldd	r23, Y+6	; 0x06
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
    2326:	98 85       	ldd	r25, Y+8	; 0x08
    2328:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9a 87       	std	Y+10, r25	; 0x0a
    2332:	89 87       	std	Y+9, r24	; 0x09
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	8d 87       	std	Y+13, r24	; 0x0d
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	8c 01       	movw	r16, r24
    2342:	c8 01       	movw	r24, r16
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <correct_left+0x112>
    2348:	8c 01       	movw	r16, r24
    234a:	1e 87       	std	Y+14, r17	; 0x0e
    234c:	0d 87       	std	Y+13, r16	; 0x0d
		 _delay_ms(20);
	     soft_left_degrees(35);
    234e:	83 e2       	ldi	r24, 0x23	; 35
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <soft_left_degrees>
		 soft_left();
    2356:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>
    235a:	01 c0       	rjmp	.+2      	; 0x235e <correct_left+0x12c>
		     {
			     stop();
			     _delay_ms(50);
			     break;
		     }
	     }
    235c:	00 00       	nop
		 _delay_ms(20);
	     soft_left_degrees(35);
		 soft_left();
	     while(1)
	     {
		     read_line();
    235e:	81 ea       	ldi	r24, 0xA1	; 161
    2360:	93 e3       	ldi	r25, 0x33	; 51
    2362:	fc 01       	movw	r30, r24
    2364:	19 95       	eicall
			 if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 80))
    2366:	80 91 47 03 	lds	r24, 0x0347
    236a:	8f 30       	cpi	r24, 0x0F	; 15
    236c:	20 f0       	brcs	.+8      	; 0x2376 <correct_left+0x144>
    236e:	80 91 48 03 	lds	r24, 0x0348
    2372:	8f 30       	cpi	r24, 0x0F	; 15
    2374:	20 f4       	brcc	.+8      	; 0x237e <correct_left+0x14c>
    2376:	80 91 47 03 	lds	r24, 0x0347
    237a:	81 35       	cpi	r24, 0x51	; 81
    237c:	78 f3       	brcs	.-34     	; 0x235c <correct_left+0x12a>
		     {
			     stop();
    237e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 e4       	ldi	r26, 0x48	; 72
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	a9 8b       	std	Y+17, r26	; 0x11
    2390:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6f 85       	ldd	r22, Y+15	; 0x0f
    2394:	78 89       	ldd	r23, Y+16	; 0x10
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	26 e6       	ldi	r18, 0x66	; 102
    239c:	36 e6       	ldi	r19, 0x66	; 102
    239e:	46 e6       	ldi	r20, 0x66	; 102
    23a0:	55 e4       	ldi	r21, 0x45	; 69
    23a2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	ad 8b       	std	Y+21, r26	; 0x15
    23b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23b2:	11 e0       	ldi	r17, 0x01	; 1
    23b4:	6b 89       	ldd	r22, Y+19	; 0x13
    23b6:	7c 89       	ldd	r23, Y+20	; 0x14
    23b8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ba:	9e 89       	ldd	r25, Y+22	; 0x16
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	0c f0       	brlt	.+2      	; 0x23ce <correct_left+0x19c>
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	11 23       	and	r17, r17
    23d0:	29 f0       	breq	.+10     	; 0x23dc <correct_left+0x1aa>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	98 8f       	std	Y+24, r25	; 0x18
    23d8:	8f 8b       	std	Y+23, r24	; 0x17
    23da:	46 c0       	rjmp	.+140    	; 0x2468 <correct_left+0x236>
	else if (__tmp > 65535)
    23dc:	11 e0       	ldi	r17, 0x01	; 1
    23de:	6b 89       	ldd	r22, Y+19	; 0x13
    23e0:	7c 89       	ldd	r23, Y+20	; 0x14
    23e2:	8d 89       	ldd	r24, Y+21	; 0x15
    23e4:	9e 89       	ldd	r25, Y+22	; 0x16
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <correct_left+0x1c6>
    23f6:	10 e0       	ldi	r17, 0x00	; 0
    23f8:	11 23       	and	r17, r17
    23fa:	61 f1       	breq	.+88     	; 0x2454 <correct_left+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fe:	78 89       	ldd	r23, Y+16	; 0x10
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 8f       	std	Y+24, r25	; 0x18
    2422:	8f 8b       	std	Y+23, r24	; 0x17
    2424:	12 c0       	rjmp	.+36     	; 0x244a <correct_left+0x218>
    2426:	80 e7       	ldi	r24, 0x70	; 112
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	9a 8f       	std	Y+26, r25	; 0x1a
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	89 8d       	ldd	r24, Y+25	; 0x19
    2430:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2432:	8c 01       	movw	r16, r24
    2434:	c8 01       	movw	r24, r16
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <correct_left+0x204>
    243a:	8c 01       	movw	r16, r24
    243c:	1a 8f       	std	Y+26, r17	; 0x1a
    243e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	98 8f       	std	Y+24, r25	; 0x18
    2448:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	51 f7       	brne	.-44     	; 0x2426 <correct_left+0x1f4>
    2452:	18 c0       	rjmp	.+48     	; 0x2484 <correct_left+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	6b 89       	ldd	r22, Y+19	; 0x13
    2456:	7c 89       	ldd	r23, Y+20	; 0x14
    2458:	8d 89       	ldd	r24, Y+21	; 0x15
    245a:	9e 89       	ldd	r25, Y+22	; 0x16
    245c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	98 8f       	std	Y+24, r25	; 0x18
    2466:	8f 8b       	std	Y+23, r24	; 0x17
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	9c 8f       	std	Y+28, r25	; 0x1c
    246e:	8b 8f       	std	Y+27, r24	; 0x1b
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	8c 01       	movw	r16, r24
    2476:	c8 01       	movw	r24, r16
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <correct_left+0x246>
    247c:	8c 01       	movw	r16, r24
    247e:	1c 8f       	std	Y+28, r17	; 0x1c
    2480:	0b 8f       	std	Y+27, r16	; 0x1b
			     _delay_ms(50);
			     break;
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <correct_left+0x254>
    2484:	00 00       	nop
		     }
	     }
}
    2486:	6c 96       	adiw	r28, 0x1c	; 28
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <spl_left>:

void spl_left(){
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	aa 97       	sbiw	r28, 0x2a	; 42
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
	stop();
    24b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 ea       	ldi	r26, 0xA0	; 160
    24be:	b1 e4       	ldi	r27, 0x41	; 65
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	69 81       	ldd	r22, Y+1	; 0x01
    24ca:	7a 81       	ldd	r23, Y+2	; 0x02
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	26 e6       	ldi	r18, 0x66	; 102
    24d2:	36 e6       	ldi	r19, 0x66	; 102
    24d4:	46 e6       	ldi	r20, 0x66	; 102
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	af 83       	std	Y+7, r26	; 0x07
    24e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24e8:	11 e0       	ldi	r17, 0x01	; 1
    24ea:	6d 81       	ldd	r22, Y+5	; 0x05
    24ec:	7e 81       	ldd	r23, Y+6	; 0x06
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	98 85       	ldd	r25, Y+8	; 0x08
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    24fe:	88 23       	and	r24, r24
    2500:	0c f0       	brlt	.+2      	; 0x2504 <spl_left+0x68>
    2502:	10 e0       	ldi	r17, 0x00	; 0
    2504:	11 23       	and	r17, r17
    2506:	29 f0       	breq	.+10     	; 0x2512 <spl_left+0x76>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9a 87       	std	Y+10, r25	; 0x0a
    250e:	89 87       	std	Y+9, r24	; 0x09
    2510:	46 c0       	rjmp	.+140    	; 0x259e <spl_left+0x102>
	else if (__tmp > 65535)
    2512:	11 e0       	ldi	r17, 0x01	; 1
    2514:	6d 81       	ldd	r22, Y+5	; 0x05
    2516:	7e 81       	ldd	r23, Y+6	; 0x06
    2518:	8f 81       	ldd	r24, Y+7	; 0x07
    251a:	98 85       	ldd	r25, Y+8	; 0x08
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2528:	18 16       	cp	r1, r24
    252a:	0c f0       	brlt	.+2      	; 0x252e <spl_left+0x92>
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	11 23       	and	r17, r17
    2530:	61 f1       	breq	.+88     	; 0x258a <spl_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	69 81       	ldd	r22, Y+1	; 0x01
    2534:	7a 81       	ldd	r23, Y+2	; 0x02
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9a 87       	std	Y+10, r25	; 0x0a
    2558:	89 87       	std	Y+9, r24	; 0x09
    255a:	12 c0       	rjmp	.+36     	; 0x2580 <spl_left+0xe4>
    255c:	80 e7       	ldi	r24, 0x70	; 112
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c 87       	std	Y+12, r25	; 0x0c
    2562:	8b 87       	std	Y+11, r24	; 0x0b
    2564:	8b 85       	ldd	r24, Y+11	; 0x0b
    2566:	9c 85       	ldd	r25, Y+12	; 0x0c
    2568:	8c 01       	movw	r16, r24
    256a:	c8 01       	movw	r24, r16
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <spl_left+0xd0>
    2570:	8c 01       	movw	r16, r24
    2572:	1c 87       	std	Y+12, r17	; 0x0c
    2574:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9a 87       	std	Y+10, r25	; 0x0a
    257e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	51 f7       	brne	.-44     	; 0x255c <spl_left+0xc0>
    2588:	17 c0       	rjmp	.+46     	; 0x25b8 <spl_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6d 81       	ldd	r22, Y+5	; 0x05
    258c:	7e 81       	ldd	r23, Y+6	; 0x06
    258e:	8f 81       	ldd	r24, Y+7	; 0x07
    2590:	98 85       	ldd	r25, Y+8	; 0x08
    2592:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a 87       	std	Y+10, r25	; 0x0a
    259c:	89 87       	std	Y+9, r24	; 0x09
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	9e 87       	std	Y+14, r25	; 0x0e
    25a4:	8d 87       	std	Y+13, r24	; 0x0d
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	8c 01       	movw	r16, r24
    25ac:	c8 01       	movw	r24, r16
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <spl_left+0x112>
    25b2:	8c 01       	movw	r16, r24
    25b4:	1e 87       	std	Y+14, r17	; 0x0e
    25b6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(35);
    25b8:	83 e2       	ldi	r24, 0x23	; 35
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    25c0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <spl_left+0x12c>
		{
		stop();
		_delay_ms(20);
		break;	
		}
	}
    25c6:	00 00       	nop
	stop();
	_delay_ms(20);
	left_degrees(35);
	left();
	while(1){
		read_line();
    25c8:	81 ea       	ldi	r24, 0xA1	; 161
    25ca:	93 e3       	ldi	r25, 0x33	; 51
    25cc:	fc 01       	movw	r30, r24
    25ce:	19 95       	eicall
		if(Center_white_line>=25)
    25d0:	80 91 47 03 	lds	r24, 0x0347
    25d4:	89 31       	cpi	r24, 0x19	; 25
    25d6:	b8 f3       	brcs	.-18     	; 0x25c6 <spl_left+0x12a>
		{
		stop();
    25d8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 ea       	ldi	r26, 0xA0	; 160
    25e2:	b1 e4       	ldi	r27, 0x41	; 65
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
    25e6:	98 8b       	std	Y+16, r25	; 0x10
    25e8:	a9 8b       	std	Y+17, r26	; 0x11
    25ea:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    25ee:	78 89       	ldd	r23, Y+16	; 0x10
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	26 e6       	ldi	r18, 0x66	; 102
    25f6:	36 e6       	ldi	r19, 0x66	; 102
    25f8:	46 e6       	ldi	r20, 0x66	; 102
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	ad 8b       	std	Y+21, r26	; 0x15
    260a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    260c:	11 e0       	ldi	r17, 0x01	; 1
    260e:	6b 89       	ldd	r22, Y+19	; 0x13
    2610:	7c 89       	ldd	r23, Y+20	; 0x14
    2612:	8d 89       	ldd	r24, Y+21	; 0x15
    2614:	9e 89       	ldd	r25, Y+22	; 0x16
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2622:	88 23       	and	r24, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <spl_left+0x18c>
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	11 23       	and	r17, r17
    262a:	29 f0       	breq	.+10     	; 0x2636 <spl_left+0x19a>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 8f       	std	Y+24, r25	; 0x18
    2632:	8f 8b       	std	Y+23, r24	; 0x17
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <spl_left+0x226>
	else if (__tmp > 65535)
    2636:	11 e0       	ldi	r17, 0x01	; 1
    2638:	6b 89       	ldd	r22, Y+19	; 0x13
    263a:	7c 89       	ldd	r23, Y+20	; 0x14
    263c:	8d 89       	ldd	r24, Y+21	; 0x15
    263e:	9e 89       	ldd	r25, Y+22	; 0x16
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    264c:	18 16       	cp	r1, r24
    264e:	0c f0       	brlt	.+2      	; 0x2652 <spl_left+0x1b6>
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	11 23       	and	r17, r17
    2654:	61 f1       	breq	.+88     	; 0x26ae <spl_left+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6f 85       	ldd	r22, Y+15	; 0x0f
    2658:	78 89       	ldd	r23, Y+16	; 0x10
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	98 8f       	std	Y+24, r25	; 0x18
    267c:	8f 8b       	std	Y+23, r24	; 0x17
    267e:	12 c0       	rjmp	.+36     	; 0x26a4 <spl_left+0x208>
    2680:	80 e7       	ldi	r24, 0x70	; 112
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	8c 01       	movw	r16, r24
    268e:	c8 01       	movw	r24, r16
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <spl_left+0x1f4>
    2694:	8c 01       	movw	r16, r24
    2696:	1a 8f       	std	Y+26, r17	; 0x1a
    2698:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	98 8f       	std	Y+24, r25	; 0x18
    26a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8f 89       	ldd	r24, Y+23	; 0x17
    26a6:	98 8d       	ldd	r25, Y+24	; 0x18
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	51 f7       	brne	.-44     	; 0x2680 <spl_left+0x1e4>
    26ac:	18 c0       	rjmp	.+48     	; 0x26de <spl_left+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6b 89       	ldd	r22, Y+19	; 0x13
    26b0:	7c 89       	ldd	r23, Y+20	; 0x14
    26b2:	8d 89       	ldd	r24, Y+21	; 0x15
    26b4:	9e 89       	ldd	r25, Y+22	; 0x16
    26b6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 8f       	std	Y+24, r25	; 0x18
    26c0:	8f 8b       	std	Y+23, r24	; 0x17
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	9c 8f       	std	Y+28, r25	; 0x1c
    26c8:	8b 8f       	std	Y+27, r24	; 0x1b
    26ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ce:	8c 01       	movw	r16, r24
    26d0:	c8 01       	movw	r24, r16
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <spl_left+0x236>
    26d6:	8c 01       	movw	r16, r24
    26d8:	1c 8f       	std	Y+28, r17	; 0x1c
    26da:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(20);
		break;	
    26dc:	00 c0       	rjmp	.+0      	; 0x26de <spl_left+0x242>
    26de:	00 00       	nop
		}
	}
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 ea       	ldi	r26, 0xA0	; 160
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ea:	9e 8f       	std	Y+30, r25	; 0x1e
    26ec:	af 8f       	std	Y+31, r26	; 0x1f
    26ee:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	lds	r25, 0x48
    26f8:	26 e6       	ldi	r18, 0x66	; 102
    26fa:	36 e6       	ldi	r19, 0x66	; 102
    26fc:	46 e6       	ldi	r20, 0x66	; 102
    26fe:	55 e4       	ldi	r21, 0x45	; 69
    2700:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	89 a3       	lds	r24, 0x59
    270a:	9a a3       	lds	r25, 0x5a
    270c:	ab a3       	lds	r26, 0x5b
    270e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2710:	11 e0       	ldi	r17, 0x01	; 1
    2712:	69 a1       	lds	r22, 0x49
    2714:	7a a1       	lds	r23, 0x4a
    2716:	8b a1       	lds	r24, 0x4b
    2718:	9c a1       	lds	r25, 0x4c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2726:	88 23       	and	r24, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <spl_left+0x290>
    272a:	10 e0       	ldi	r17, 0x00	; 0
    272c:	11 23       	and	r17, r17
    272e:	29 f0       	breq	.+10     	; 0x273a <spl_left+0x29e>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9e a3       	lds	r25, 0x5e
    2736:	8d a3       	lds	r24, 0x5d
    2738:	46 c0       	rjmp	.+140    	; 0x27c6 <spl_left+0x32a>
	else if (__tmp > 65535)
    273a:	11 e0       	ldi	r17, 0x01	; 1
    273c:	69 a1       	lds	r22, 0x49
    273e:	7a a1       	lds	r23, 0x4a
    2740:	8b a1       	lds	r24, 0x4b
    2742:	9c a1       	lds	r25, 0x4c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2750:	18 16       	cp	r1, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <spl_left+0x2ba>
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	11 23       	and	r17, r17
    2758:	61 f1       	breq	.+88     	; 0x27b2 <spl_left+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    275c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    275e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2760:	98 a1       	lds	r25, 0x48
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e a3       	lds	r25, 0x5e
    2780:	8d a3       	lds	r24, 0x5d
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <spl_left+0x30c>
    2784:	80 e7       	ldi	r24, 0x70	; 112
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	98 a7       	lds	r25, 0x78
    278a:	8f a3       	lds	r24, 0x5f
    278c:	8f a1       	lds	r24, 0x4f
    278e:	98 a5       	lds	r25, 0x68
    2790:	8c 01       	movw	r16, r24
    2792:	c8 01       	movw	r24, r16
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <spl_left+0x2f8>
    2798:	8c 01       	movw	r16, r24
    279a:	18 a7       	lds	r17, 0x78
    279c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d a1       	lds	r24, 0x4d
    27a0:	9e a1       	lds	r25, 0x4e
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e a3       	lds	r25, 0x5e
    27a6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d a1       	lds	r24, 0x4d
    27aa:	9e a1       	lds	r25, 0x4e
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	51 f7       	brne	.-44     	; 0x2784 <spl_left+0x2e8>
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <spl_left+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a1       	lds	r22, 0x49
    27b4:	7a a1       	lds	r23, 0x4a
    27b6:	8b a1       	lds	r24, 0x4b
    27b8:	9c a1       	lds	r25, 0x4c
    27ba:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e a3       	lds	r25, 0x5e
    27c4:	8d a3       	lds	r24, 0x5d
    27c6:	8d a1       	lds	r24, 0x4d
    27c8:	9e a1       	lds	r25, 0x4e
    27ca:	9a a7       	lds	r25, 0x7a
    27cc:	89 a7       	lds	r24, 0x79
    27ce:	89 a5       	lds	r24, 0x69
    27d0:	9a a5       	lds	r25, 0x6a
    27d2:	8c 01       	movw	r16, r24
    27d4:	c8 01       	movw	r24, r16
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <spl_left+0x33a>
    27da:	8c 01       	movw	r16, r24
    27dc:	1a a7       	lds	r17, 0x7a
    27de:	09 a7       	lds	r16, 0x79
	_delay_ms(20);
}
    27e0:	aa 96       	adiw	r28, 0x2a	; 42
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <spl_right>:
void spl_right(){
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	6c 97       	sbiw	r28, 0x1c	; 28
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
	right_degrees(25);
    280e:	89 e1       	ldi	r24, 0x19	; 25
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    2816:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    281a:	01 c0       	rjmp	.+2      	; 0x281e <spl_right+0x28>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    281c:	00 00       	nop
}
void spl_right(){
	right_degrees(25);
	right();
	while(1){
		read_line();
    281e:	81 ea       	ldi	r24, 0xA1	; 161
    2820:	93 e3       	ldi	r25, 0x33	; 51
    2822:	fc 01       	movw	r30, r24
    2824:	19 95       	eicall
		if(Center_white_line>=25)
    2826:	80 91 47 03 	lds	r24, 0x0347
    282a:	89 31       	cpi	r24, 0x19	; 25
    282c:	b8 f3       	brcs	.-18     	; 0x281c <spl_right+0x26>
		{
			stop();
    282e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 ea       	ldi	r26, 0xA0	; 160
    2838:	b1 e4       	ldi	r27, 0x41	; 65
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	ab 83       	std	Y+3, r26	; 0x03
    2840:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2842:	69 81       	ldd	r22, Y+1	; 0x01
    2844:	7a 81       	ldd	r23, Y+2	; 0x02
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	26 e6       	ldi	r18, 0x66	; 102
    284c:	36 e6       	ldi	r19, 0x66	; 102
    284e:	46 e6       	ldi	r20, 0x66	; 102
    2850:	55 e4       	ldi	r21, 0x45	; 69
    2852:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	af 83       	std	Y+7, r26	; 0x07
    2860:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2862:	11 e0       	ldi	r17, 0x01	; 1
    2864:	6d 81       	ldd	r22, Y+5	; 0x05
    2866:	7e 81       	ldd	r23, Y+6	; 0x06
    2868:	8f 81       	ldd	r24, Y+7	; 0x07
    286a:	98 85       	ldd	r25, Y+8	; 0x08
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2878:	88 23       	and	r24, r24
    287a:	0c f0       	brlt	.+2      	; 0x287e <spl_right+0x88>
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	11 23       	and	r17, r17
    2880:	29 f0       	breq	.+10     	; 0x288c <spl_right+0x96>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 87       	std	Y+10, r25	; 0x0a
    2888:	89 87       	std	Y+9, r24	; 0x09
    288a:	46 c0       	rjmp	.+140    	; 0x2918 <spl_right+0x122>
	else if (__tmp > 65535)
    288c:	11 e0       	ldi	r17, 0x01	; 1
    288e:	6d 81       	ldd	r22, Y+5	; 0x05
    2890:	7e 81       	ldd	r23, Y+6	; 0x06
    2892:	8f 81       	ldd	r24, Y+7	; 0x07
    2894:	98 85       	ldd	r25, Y+8	; 0x08
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <spl_right+0xb2>
    28a6:	10 e0       	ldi	r17, 0x00	; 0
    28a8:	11 23       	and	r17, r17
    28aa:	61 f1       	breq	.+88     	; 0x2904 <spl_right+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	69 81       	ldd	r22, Y+1	; 0x01
    28ae:	7a 81       	ldd	r23, Y+2	; 0x02
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a 87       	std	Y+10, r25	; 0x0a
    28d2:	89 87       	std	Y+9, r24	; 0x09
    28d4:	12 c0       	rjmp	.+36     	; 0x28fa <spl_right+0x104>
    28d6:	80 e7       	ldi	r24, 0x70	; 112
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	9c 87       	std	Y+12, r25	; 0x0c
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e2:	8c 01       	movw	r16, r24
    28e4:	c8 01       	movw	r24, r16
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <spl_right+0xf0>
    28ea:	8c 01       	movw	r16, r24
    28ec:	1c 87       	std	Y+12, r17	; 0x0c
    28ee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9a 87       	std	Y+10, r25	; 0x0a
    28f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	51 f7       	brne	.-44     	; 0x28d6 <spl_right+0xe0>
    2902:	18 c0       	rjmp	.+48     	; 0x2934 <spl_right+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6d 81       	ldd	r22, Y+5	; 0x05
    2906:	7e 81       	ldd	r23, Y+6	; 0x06
    2908:	8f 81       	ldd	r24, Y+7	; 0x07
    290a:	98 85       	ldd	r25, Y+8	; 0x08
    290c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9a 87       	std	Y+10, r25	; 0x0a
    2916:	89 87       	std	Y+9, r24	; 0x09
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	9e 87       	std	Y+14, r25	; 0x0e
    291e:	8d 87       	std	Y+13, r24	; 0x0d
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	8c 01       	movw	r16, r24
    2926:	c8 01       	movw	r24, r16
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <spl_right+0x132>
    292c:	8c 01       	movw	r16, r24
    292e:	1e 87       	std	Y+14, r17	; 0x0e
    2930:	0d 87       	std	Y+13, r16	; 0x0d
			_delay_ms(20);
			break;
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <spl_right+0x13e>
    2934:	00 00       	nop
		}
	}
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 ea       	ldi	r26, 0xA0	; 160
    293c:	b1 e4       	ldi	r27, 0x41	; 65
    293e:	8f 87       	std	Y+15, r24	; 0x0f
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	a9 8b       	std	Y+17, r26	; 0x11
    2944:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6f 85       	ldd	r22, Y+15	; 0x0f
    2948:	78 89       	ldd	r23, Y+16	; 0x10
    294a:	89 89       	ldd	r24, Y+17	; 0x11
    294c:	9a 89       	ldd	r25, Y+18	; 0x12
    294e:	26 e6       	ldi	r18, 0x66	; 102
    2950:	36 e6       	ldi	r19, 0x66	; 102
    2952:	46 e6       	ldi	r20, 0x66	; 102
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	ad 8b       	std	Y+21, r26	; 0x15
    2964:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2966:	11 e0       	ldi	r17, 0x01	; 1
    2968:	6b 89       	ldd	r22, Y+19	; 0x13
    296a:	7c 89       	ldd	r23, Y+20	; 0x14
    296c:	8d 89       	ldd	r24, Y+21	; 0x15
    296e:	9e 89       	ldd	r25, Y+22	; 0x16
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    297c:	88 23       	and	r24, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <spl_right+0x18c>
    2980:	10 e0       	ldi	r17, 0x00	; 0
    2982:	11 23       	and	r17, r17
    2984:	29 f0       	breq	.+10     	; 0x2990 <spl_right+0x19a>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	98 8f       	std	Y+24, r25	; 0x18
    298c:	8f 8b       	std	Y+23, r24	; 0x17
    298e:	46 c0       	rjmp	.+140    	; 0x2a1c <spl_right+0x226>
	else if (__tmp > 65535)
    2990:	11 e0       	ldi	r17, 0x01	; 1
    2992:	6b 89       	ldd	r22, Y+19	; 0x13
    2994:	7c 89       	ldd	r23, Y+20	; 0x14
    2996:	8d 89       	ldd	r24, Y+21	; 0x15
    2998:	9e 89       	ldd	r25, Y+22	; 0x16
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	0c f0       	brlt	.+2      	; 0x29ac <spl_right+0x1b6>
    29aa:	10 e0       	ldi	r17, 0x00	; 0
    29ac:	11 23       	and	r17, r17
    29ae:	61 f1       	breq	.+88     	; 0x2a08 <spl_right+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    29b2:	78 89       	ldd	r23, Y+16	; 0x10
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	9a 89       	ldd	r25, Y+18	; 0x12
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	98 8f       	std	Y+24, r25	; 0x18
    29d6:	8f 8b       	std	Y+23, r24	; 0x17
    29d8:	12 c0       	rjmp	.+36     	; 0x29fe <spl_right+0x208>
    29da:	80 e7       	ldi	r24, 0x70	; 112
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	9a 8f       	std	Y+26, r25	; 0x1a
    29e0:	89 8f       	std	Y+25, r24	; 0x19
    29e2:	89 8d       	ldd	r24, Y+25	; 0x19
    29e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29e6:	8c 01       	movw	r16, r24
    29e8:	c8 01       	movw	r24, r16
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <spl_right+0x1f4>
    29ee:	8c 01       	movw	r16, r24
    29f0:	1a 8f       	std	Y+26, r17	; 0x1a
    29f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	98 8f       	std	Y+24, r25	; 0x18
    29fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	51 f7       	brne	.-44     	; 0x29da <spl_right+0x1e4>
    2a06:	17 c0       	rjmp	.+46     	; 0x2a36 <spl_right+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6b 89       	ldd	r22, Y+19	; 0x13
    2a0a:	7c 89       	ldd	r23, Y+20	; 0x14
    2a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a0e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a10:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	98 8f       	std	Y+24, r25	; 0x18
    2a1a:	8f 8b       	std	Y+23, r24	; 0x17
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	9c 8f       	std	Y+28, r25	; 0x1c
    2a22:	8b 8f       	std	Y+27, r24	; 0x1b
    2a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a28:	8c 01       	movw	r16, r24
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <spl_right+0x236>
    2a30:	8c 01       	movw	r16, r24
    2a32:	1c 8f       	std	Y+28, r17	; 0x1c
    2a34:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(20);
}
    2a36:	6c 96       	adiw	r28, 0x1c	; 28
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <spl_left2>:
* Example Call:		correct_left2();



*/
void spl_left2(){// FOR FRONT PICK FROM LEFT DIRECTION
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	6c 97       	sbiw	r28, 0x1c	; 28
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
	stop();
    2a64:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a6e:	b1 e4       	ldi	r27, 0x41	; 65
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	ab 83       	std	Y+3, r26	; 0x03
    2a76:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	69 81       	ldd	r22, Y+1	; 0x01
    2a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	26 e6       	ldi	r18, 0x66	; 102
    2a82:	36 e6       	ldi	r19, 0x66	; 102
    2a84:	46 e6       	ldi	r20, 0x66	; 102
    2a86:	55 e4       	ldi	r21, 0x45	; 69
    2a88:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	af 83       	std	Y+7, r26	; 0x07
    2a96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a98:	11 e0       	ldi	r17, 0x01	; 1
    2a9a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a9c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	98 85       	ldd	r25, Y+8	; 0x08
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	0c f0       	brlt	.+2      	; 0x2ab4 <spl_left2+0x68>
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	11 23       	and	r17, r17
    2ab6:	29 f0       	breq	.+10     	; 0x2ac2 <spl_left2+0x76>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a 87       	std	Y+10, r25	; 0x0a
    2abe:	89 87       	std	Y+9, r24	; 0x09
    2ac0:	46 c0       	rjmp	.+140    	; 0x2b4e <spl_left2+0x102>
	else if (__tmp > 65535)
    2ac2:	11 e0       	ldi	r17, 0x01	; 1
    2ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    2aca:	98 85       	ldd	r25, Y+8	; 0x08
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <spl_left2+0x92>
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	11 23       	and	r17, r17
    2ae0:	61 f1       	breq	.+88     	; 0x2b3a <spl_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	69 81       	ldd	r22, Y+1	; 0x01
    2ae4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a 87       	std	Y+10, r25	; 0x0a
    2b08:	89 87       	std	Y+9, r24	; 0x09
    2b0a:	12 c0       	rjmp	.+36     	; 0x2b30 <spl_left2+0xe4>
    2b0c:	80 e7       	ldi	r24, 0x70	; 112
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
    2b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b18:	8c 01       	movw	r16, r24
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <spl_left2+0xd0>
    2b20:	8c 01       	movw	r16, r24
    2b22:	1c 87       	std	Y+12, r17	; 0x0c
    2b24:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9a 87       	std	Y+10, r25	; 0x0a
    2b2e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	51 f7       	brne	.-44     	; 0x2b0c <spl_left2+0xc0>
    2b38:	17 c0       	rjmp	.+46     	; 0x2b68 <spl_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b3c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9a 87       	std	Y+10, r25	; 0x0a
    2b4c:	89 87       	std	Y+9, r24	; 0x09
    2b4e:	89 85       	ldd	r24, Y+9	; 0x09
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	9e 87       	std	Y+14, r25	; 0x0e
    2b54:	8d 87       	std	Y+13, r24	; 0x0d
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	8c 01       	movw	r16, r24
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <spl_left2+0x112>
    2b62:	8c 01       	movw	r16, r24
    2b64:	1e 87       	std	Y+14, r17	; 0x0e
    2b66:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_2_degrees(30);
    2b68:	8e e1       	ldi	r24, 0x1E	; 30
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <soft_left_2_degrees>
	soft_left_2();
    2b70:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <spl_left2+0x12c>
		if(Center_white_line>25){
			stop();
			_delay_ms(20);
			break;
		}
	}
    2b76:	00 00       	nop
	stop();
	_delay_ms(20);
	soft_left_2_degrees(30);
	soft_left_2();
	while(1){
		read_line();
    2b78:	81 ea       	ldi	r24, 0xA1	; 161
    2b7a:	93 e3       	ldi	r25, 0x33	; 51
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	19 95       	eicall
		if(Center_white_line>25){
    2b80:	80 91 47 03 	lds	r24, 0x0347
    2b84:	8a 31       	cpi	r24, 0x1A	; 26
    2b86:	b8 f3       	brcs	.-18     	; 0x2b76 <spl_left2+0x12a>
			stop();
    2b88:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 ea       	ldi	r26, 0xA0	; 160
    2b92:	b1 e4       	ldi	r27, 0x41	; 65
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
    2b96:	98 8b       	std	Y+16, r25	; 0x10
    2b98:	a9 8b       	std	Y+17, r26	; 0x11
    2b9a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b9e:	78 89       	ldd	r23, Y+16	; 0x10
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	26 e6       	ldi	r18, 0x66	; 102
    2ba6:	36 e6       	ldi	r19, 0x66	; 102
    2ba8:	46 e6       	ldi	r20, 0x66	; 102
    2baa:	55 e4       	ldi	r21, 0x45	; 69
    2bac:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	ad 8b       	std	Y+21, r26	; 0x15
    2bba:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2bbc:	11 e0       	ldi	r17, 0x01	; 1
    2bbe:	6b 89       	ldd	r22, Y+19	; 0x13
    2bc0:	7c 89       	ldd	r23, Y+20	; 0x14
    2bc2:	8d 89       	ldd	r24, Y+21	; 0x15
    2bc4:	9e 89       	ldd	r25, Y+22	; 0x16
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <spl_left2+0x18c>
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	11 23       	and	r17, r17
    2bda:	29 f0       	breq	.+10     	; 0x2be6 <spl_left2+0x19a>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 8f       	std	Y+24, r25	; 0x18
    2be2:	8f 8b       	std	Y+23, r24	; 0x17
    2be4:	46 c0       	rjmp	.+140    	; 0x2c72 <spl_left2+0x226>
	else if (__tmp > 65535)
    2be6:	11 e0       	ldi	r17, 0x01	; 1
    2be8:	6b 89       	ldd	r22, Y+19	; 0x13
    2bea:	7c 89       	ldd	r23, Y+20	; 0x14
    2bec:	8d 89       	ldd	r24, Y+21	; 0x15
    2bee:	9e 89       	ldd	r25, Y+22	; 0x16
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	3f ef       	ldi	r19, 0xFF	; 255
    2bf4:	4f e7       	ldi	r20, 0x7F	; 127
    2bf6:	57 e4       	ldi	r21, 0x47	; 71
    2bf8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2bfc:	18 16       	cp	r1, r24
    2bfe:	0c f0       	brlt	.+2      	; 0x2c02 <spl_left2+0x1b6>
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	11 23       	and	r17, r17
    2c04:	61 f1       	breq	.+88     	; 0x2c5e <spl_left2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c08:	78 89       	ldd	r23, Y+16	; 0x10
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e2       	ldi	r20, 0x20	; 32
    2c14:	51 e4       	ldi	r21, 0x41	; 65
    2c16:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	98 8f       	std	Y+24, r25	; 0x18
    2c2c:	8f 8b       	std	Y+23, r24	; 0x17
    2c2e:	12 c0       	rjmp	.+36     	; 0x2c54 <spl_left2+0x208>
    2c30:	80 e7       	ldi	r24, 0x70	; 112
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	9a 8f       	std	Y+26, r25	; 0x1a
    2c36:	89 8f       	std	Y+25, r24	; 0x19
    2c38:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3c:	8c 01       	movw	r16, r24
    2c3e:	c8 01       	movw	r24, r16
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <spl_left2+0x1f4>
    2c44:	8c 01       	movw	r16, r24
    2c46:	1a 8f       	std	Y+26, r17	; 0x1a
    2c48:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	98 8f       	std	Y+24, r25	; 0x18
    2c52:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	51 f7       	brne	.-44     	; 0x2c30 <spl_left2+0x1e4>
    2c5c:	18 c0       	rjmp	.+48     	; 0x2c8e <spl_left2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6b 89       	ldd	r22, Y+19	; 0x13
    2c60:	7c 89       	ldd	r23, Y+20	; 0x14
    2c62:	8d 89       	ldd	r24, Y+21	; 0x15
    2c64:	9e 89       	ldd	r25, Y+22	; 0x16
    2c66:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	98 8f       	std	Y+24, r25	; 0x18
    2c70:	8f 8b       	std	Y+23, r24	; 0x17
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	9c 8f       	std	Y+28, r25	; 0x1c
    2c78:	8b 8f       	std	Y+27, r24	; 0x1b
    2c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7e:	8c 01       	movw	r16, r24
    2c80:	c8 01       	movw	r24, r16
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <spl_left2+0x236>
    2c86:	8c 01       	movw	r16, r24
    2c88:	1c 8f       	std	Y+28, r17	; 0x1c
    2c8a:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <spl_left2+0x244>
    2c8e:	00 00       	nop
		}
	}
}
    2c90:	6c 96       	adiw	r28, 0x1c	; 28
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <spl_right2>:
void spl_right2(){//FOR FRONT WHEN BOT IS COMING FROM RIGHT
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	6c 97       	sbiw	r28, 0x1c	; 28
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
	stop();
    2cbe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cc8:	b1 e4       	ldi	r27, 0x41	; 65
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	ab 83       	std	Y+3, r26	; 0x03
    2cd0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	69 81       	ldd	r22, Y+1	; 0x01
    2cd4:	7a 81       	ldd	r23, Y+2	; 0x02
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	26 e6       	ldi	r18, 0x66	; 102
    2cdc:	36 e6       	ldi	r19, 0x66	; 102
    2cde:	46 e6       	ldi	r20, 0x66	; 102
    2ce0:	55 e4       	ldi	r21, 0x45	; 69
    2ce2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	af 83       	std	Y+7, r26	; 0x07
    2cf0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2cf2:	11 e0       	ldi	r17, 0x01	; 1
    2cf4:	6d 81       	ldd	r22, Y+5	; 0x05
    2cf6:	7e 81       	ldd	r23, Y+6	; 0x06
    2cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfa:	98 85       	ldd	r25, Y+8	; 0x08
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <spl_right2+0x68>
    2d0c:	10 e0       	ldi	r17, 0x00	; 0
    2d0e:	11 23       	and	r17, r17
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <spl_right2+0x76>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9a 87       	std	Y+10, r25	; 0x0a
    2d18:	89 87       	std	Y+9, r24	; 0x09
    2d1a:	46 c0       	rjmp	.+140    	; 0x2da8 <spl_right2+0x102>
	else if (__tmp > 65535)
    2d1c:	11 e0       	ldi	r17, 0x01	; 1
    2d1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d20:	7e 81       	ldd	r23, Y+6	; 0x06
    2d22:	8f 81       	ldd	r24, Y+7	; 0x07
    2d24:	98 85       	ldd	r25, Y+8	; 0x08
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <spl_right2+0x92>
    2d36:	10 e0       	ldi	r17, 0x00	; 0
    2d38:	11 23       	and	r17, r17
    2d3a:	61 f1       	breq	.+88     	; 0x2d94 <spl_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	69 81       	ldd	r22, Y+1	; 0x01
    2d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a 87       	std	Y+10, r25	; 0x0a
    2d62:	89 87       	std	Y+9, r24	; 0x09
    2d64:	12 c0       	rjmp	.+36     	; 0x2d8a <spl_right2+0xe4>
    2d66:	80 e7       	ldi	r24, 0x70	; 112
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	9c 87       	std	Y+12, r25	; 0x0c
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d72:	8c 01       	movw	r16, r24
    2d74:	c8 01       	movw	r24, r16
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <spl_right2+0xd0>
    2d7a:	8c 01       	movw	r16, r24
    2d7c:	1c 87       	std	Y+12, r17	; 0x0c
    2d7e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9a 87       	std	Y+10, r25	; 0x0a
    2d88:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	51 f7       	brne	.-44     	; 0x2d66 <spl_right2+0xc0>
    2d92:	17 c0       	rjmp	.+46     	; 0x2dc2 <spl_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6d 81       	ldd	r22, Y+5	; 0x05
    2d96:	7e 81       	ldd	r23, Y+6	; 0x06
    2d98:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9a:	98 85       	ldd	r25, Y+8	; 0x08
    2d9c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9a 87       	std	Y+10, r25	; 0x0a
    2da6:	89 87       	std	Y+9, r24	; 0x09
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	9e 87       	std	Y+14, r25	; 0x0e
    2dae:	8d 87       	std	Y+13, r24	; 0x0d
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	8c 01       	movw	r16, r24
    2db6:	c8 01       	movw	r24, r16
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <spl_right2+0x112>
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	1e 87       	std	Y+14, r17	; 0x0e
    2dc0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_2_degrees(30);
    2dc2:	8e e1       	ldi	r24, 0x1E	; 30
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <soft_right_2_degrees>
	soft_right_2();
    2dca:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <spl_right2+0x12c>
		if(Center_white_line>25){
			stop();
			_delay_ms(20);
			break;
		}
	}
    2dd0:	00 00       	nop
	stop();
	_delay_ms(20);
	soft_right_2_degrees(30);
	soft_right_2();
	while(1){
		read_line();
    2dd2:	81 ea       	ldi	r24, 0xA1	; 161
    2dd4:	93 e3       	ldi	r25, 0x33	; 51
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	19 95       	eicall
		if(Center_white_line>25){
    2dda:	80 91 47 03 	lds	r24, 0x0347
    2dde:	8a 31       	cpi	r24, 0x1A	; 26
    2de0:	b8 f3       	brcs	.-18     	; 0x2dd0 <spl_right2+0x12a>
			stop();
    2de2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 ea       	ldi	r26, 0xA0	; 160
    2dec:	b1 e4       	ldi	r27, 0x41	; 65
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    2df0:	98 8b       	std	Y+16, r25	; 0x10
    2df2:	a9 8b       	std	Y+17, r26	; 0x11
    2df4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2df8:	78 89       	ldd	r23, Y+16	; 0x10
    2dfa:	89 89       	ldd	r24, Y+17	; 0x11
    2dfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dfe:	26 e6       	ldi	r18, 0x66	; 102
    2e00:	36 e6       	ldi	r19, 0x66	; 102
    2e02:	46 e6       	ldi	r20, 0x66	; 102
    2e04:	55 e4       	ldi	r21, 0x45	; 69
    2e06:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8b 8b       	std	Y+19, r24	; 0x13
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	ad 8b       	std	Y+21, r26	; 0x15
    2e14:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2e16:	11 e0       	ldi	r17, 0x01	; 1
    2e18:	6b 89       	ldd	r22, Y+19	; 0x13
    2e1a:	7c 89       	ldd	r23, Y+20	; 0x14
    2e1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2e1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	0c f0       	brlt	.+2      	; 0x2e32 <spl_right2+0x18c>
    2e30:	10 e0       	ldi	r17, 0x00	; 0
    2e32:	11 23       	and	r17, r17
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <spl_right2+0x19a>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	98 8f       	std	Y+24, r25	; 0x18
    2e3c:	8f 8b       	std	Y+23, r24	; 0x17
    2e3e:	46 c0       	rjmp	.+140    	; 0x2ecc <spl_right2+0x226>
	else if (__tmp > 65535)
    2e40:	11 e0       	ldi	r17, 0x01	; 1
    2e42:	6b 89       	ldd	r22, Y+19	; 0x13
    2e44:	7c 89       	ldd	r23, Y+20	; 0x14
    2e46:	8d 89       	ldd	r24, Y+21	; 0x15
    2e48:	9e 89       	ldd	r25, Y+22	; 0x16
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <spl_right2+0x1b6>
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    2e5c:	11 23       	and	r17, r17
    2e5e:	61 f1       	breq	.+88     	; 0x2eb8 <spl_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e62:	78 89       	ldd	r23, Y+16	; 0x10
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	98 8f       	std	Y+24, r25	; 0x18
    2e86:	8f 8b       	std	Y+23, r24	; 0x17
    2e88:	12 c0       	rjmp	.+36     	; 0x2eae <spl_right2+0x208>
    2e8a:	80 e7       	ldi	r24, 0x70	; 112
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e90:	89 8f       	std	Y+25, r24	; 0x19
    2e92:	89 8d       	ldd	r24, Y+25	; 0x19
    2e94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e96:	8c 01       	movw	r16, r24
    2e98:	c8 01       	movw	r24, r16
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <spl_right2+0x1f4>
    2e9e:	8c 01       	movw	r16, r24
    2ea0:	1a 8f       	std	Y+26, r17	; 0x1a
    2ea2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	98 8f       	std	Y+24, r25	; 0x18
    2eac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	51 f7       	brne	.-44     	; 0x2e8a <spl_right2+0x1e4>
    2eb6:	18 c0       	rjmp	.+48     	; 0x2ee8 <spl_right2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6b 89       	ldd	r22, Y+19	; 0x13
    2eba:	7c 89       	ldd	r23, Y+20	; 0x14
    2ebc:	8d 89       	ldd	r24, Y+21	; 0x15
    2ebe:	9e 89       	ldd	r25, Y+22	; 0x16
    2ec0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	98 8f       	std	Y+24, r25	; 0x18
    2eca:	8f 8b       	std	Y+23, r24	; 0x17
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	9c 8f       	std	Y+28, r25	; 0x1c
    2ed2:	8b 8f       	std	Y+27, r24	; 0x1b
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	8c 01       	movw	r16, r24
    2eda:	c8 01       	movw	r24, r16
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <spl_right2+0x236>
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ee4:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <spl_right2+0x244>
    2ee8:	00 00       	nop
		}
	}
}
    2eea:	6c 96       	adiw	r28, 0x1c	; 28
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <correct_left2>:
void correct_left2()

{   
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	6c 97       	sbiw	r28, 0x1c	; 28
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61

    stop();
    2f18:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a8 e4       	ldi	r26, 0x48	; 72
    2f22:	b2 e4       	ldi	r27, 0x42	; 66
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	ab 83       	std	Y+3, r26	; 0x03
    2f2a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	69 81       	ldd	r22, Y+1	; 0x01
    2f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	26 e6       	ldi	r18, 0x66	; 102
    2f36:	36 e6       	ldi	r19, 0x66	; 102
    2f38:	46 e6       	ldi	r20, 0x66	; 102
    2f3a:	55 e4       	ldi	r21, 0x45	; 69
    2f3c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	af 83       	std	Y+7, r26	; 0x07
    2f4a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f4c:	11 e0       	ldi	r17, 0x01	; 1
    2f4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f50:	7e 81       	ldd	r23, Y+6	; 0x06
    2f52:	8f 81       	ldd	r24, Y+7	; 0x07
    2f54:	98 85       	ldd	r25, Y+8	; 0x08
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <correct_left2+0x68>
    2f66:	10 e0       	ldi	r17, 0x00	; 0
    2f68:	11 23       	and	r17, r17
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <correct_left2+0x76>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9a 87       	std	Y+10, r25	; 0x0a
    2f72:	89 87       	std	Y+9, r24	; 0x09
    2f74:	46 c0       	rjmp	.+140    	; 0x3002 <correct_left2+0x102>
	else if (__tmp > 65535)
    2f76:	11 e0       	ldi	r17, 0x01	; 1
    2f78:	6d 81       	ldd	r22, Y+5	; 0x05
    2f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7e:	98 85       	ldd	r25, Y+8	; 0x08
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <correct_left2+0x92>
    2f90:	10 e0       	ldi	r17, 0x00	; 0
    2f92:	11 23       	and	r17, r17
    2f94:	61 f1       	breq	.+88     	; 0x2fee <correct_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	69 81       	ldd	r22, Y+1	; 0x01
    2f98:	7a 81       	ldd	r23, Y+2	; 0x02
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9a 87       	std	Y+10, r25	; 0x0a
    2fbc:	89 87       	std	Y+9, r24	; 0x09
    2fbe:	12 c0       	rjmp	.+36     	; 0x2fe4 <correct_left2+0xe4>
    2fc0:	80 e7       	ldi	r24, 0x70	; 112
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fcc:	8c 01       	movw	r16, r24
    2fce:	c8 01       	movw	r24, r16
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <correct_left2+0xd0>
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	1c 87       	std	Y+12, r17	; 0x0c
    2fd8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9a 87       	std	Y+10, r25	; 0x0a
    2fe2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	51 f7       	brne	.-44     	; 0x2fc0 <correct_left2+0xc0>
    2fec:	17 c0       	rjmp	.+46     	; 0x301c <correct_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6d 81       	ldd	r22, Y+5	; 0x05
    2ff0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	98 85       	ldd	r25, Y+8	; 0x08
    2ff6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9a 87       	std	Y+10, r25	; 0x0a
    3000:	89 87       	std	Y+9, r24	; 0x09
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	9e 87       	std	Y+14, r25	; 0x0e
    3008:	8d 87       	std	Y+13, r24	; 0x0d
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	8c 01       	movw	r16, r24
    3010:	c8 01       	movw	r24, r16
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <correct_left2+0x112>
    3016:	8c 01       	movw	r16, r24
    3018:	1e 87       	std	Y+14, r17	; 0x0e
    301a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	left_degrees(35);
    301c:	83 e2       	ldi	r24, 0x23	; 35
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    3024:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    3028:	01 c0       	rjmp	.+2      	; 0x302c <correct_left2+0x12c>

			break;

		}

	}
    302a:	00 00       	nop
	left_degrees(35);
	left();
	while(1)

	{   
		read_line();
    302c:	81 ea       	ldi	r24, 0xA1	; 161
    302e:	93 e3       	ldi	r25, 0x33	; 51
    3030:	fc 01       	movw	r30, r24
    3032:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 70))
    3034:	80 91 47 03 	lds	r24, 0x0347
    3038:	8f 30       	cpi	r24, 0x0F	; 15
    303a:	20 f0       	brcs	.+8      	; 0x3044 <correct_left2+0x144>
    303c:	80 91 48 03 	lds	r24, 0x0348
    3040:	8f 30       	cpi	r24, 0x0F	; 15
    3042:	20 f4       	brcc	.+8      	; 0x304c <correct_left2+0x14c>
    3044:	80 91 47 03 	lds	r24, 0x0347
    3048:	87 34       	cpi	r24, 0x47	; 71
    304a:	78 f3       	brcs	.-34     	; 0x302a <correct_left2+0x12a>

		{

			stop();
    304c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a8 e4       	ldi	r26, 0x48	; 72
    3056:	b2 e4       	ldi	r27, 0x42	; 66
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	98 8b       	std	Y+16, r25	; 0x10
    305c:	a9 8b       	std	Y+17, r26	; 0x11
    305e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3060:	6f 85       	ldd	r22, Y+15	; 0x0f
    3062:	78 89       	ldd	r23, Y+16	; 0x10
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	26 e6       	ldi	r18, 0x66	; 102
    306a:	36 e6       	ldi	r19, 0x66	; 102
    306c:	46 e6       	ldi	r20, 0x66	; 102
    306e:	55 e4       	ldi	r21, 0x45	; 69
    3070:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8b 8b       	std	Y+19, r24	; 0x13
    307a:	9c 8b       	std	Y+20, r25	; 0x14
    307c:	ad 8b       	std	Y+21, r26	; 0x15
    307e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3080:	11 e0       	ldi	r17, 0x01	; 1
    3082:	6b 89       	ldd	r22, Y+19	; 0x13
    3084:	7c 89       	ldd	r23, Y+20	; 0x14
    3086:	8d 89       	ldd	r24, Y+21	; 0x15
    3088:	9e 89       	ldd	r25, Y+22	; 0x16
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    3096:	88 23       	and	r24, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <correct_left2+0x19c>
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	11 23       	and	r17, r17
    309e:	29 f0       	breq	.+10     	; 0x30aa <correct_left2+0x1aa>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	98 8f       	std	Y+24, r25	; 0x18
    30a6:	8f 8b       	std	Y+23, r24	; 0x17
    30a8:	46 c0       	rjmp	.+140    	; 0x3136 <correct_left2+0x236>
	else if (__tmp > 65535)
    30aa:	11 e0       	ldi	r17, 0x01	; 1
    30ac:	6b 89       	ldd	r22, Y+19	; 0x13
    30ae:	7c 89       	ldd	r23, Y+20	; 0x14
    30b0:	8d 89       	ldd	r24, Y+21	; 0x15
    30b2:	9e 89       	ldd	r25, Y+22	; 0x16
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <correct_left2+0x1c6>
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	11 23       	and	r17, r17
    30c8:	61 f1       	breq	.+88     	; 0x3122 <correct_left2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    30cc:	78 89       	ldd	r23, Y+16	; 0x10
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	9a 89       	ldd	r25, Y+18	; 0x12
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	98 8f       	std	Y+24, r25	; 0x18
    30f0:	8f 8b       	std	Y+23, r24	; 0x17
    30f2:	12 c0       	rjmp	.+36     	; 0x3118 <correct_left2+0x218>
    30f4:	80 e7       	ldi	r24, 0x70	; 112
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	9a 8f       	std	Y+26, r25	; 0x1a
    30fa:	89 8f       	std	Y+25, r24	; 0x19
    30fc:	89 8d       	ldd	r24, Y+25	; 0x19
    30fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3100:	8c 01       	movw	r16, r24
    3102:	c8 01       	movw	r24, r16
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <correct_left2+0x204>
    3108:	8c 01       	movw	r16, r24
    310a:	1a 8f       	std	Y+26, r17	; 0x1a
    310c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	98 8f       	std	Y+24, r25	; 0x18
    3116:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3118:	8f 89       	ldd	r24, Y+23	; 0x17
    311a:	98 8d       	ldd	r25, Y+24	; 0x18
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	51 f7       	brne	.-44     	; 0x30f4 <correct_left2+0x1f4>
    3120:	18 c0       	rjmp	.+48     	; 0x3152 <correct_left2+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3122:	6b 89       	ldd	r22, Y+19	; 0x13
    3124:	7c 89       	ldd	r23, Y+20	; 0x14
    3126:	8d 89       	ldd	r24, Y+21	; 0x15
    3128:	9e 89       	ldd	r25, Y+22	; 0x16
    312a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	98 8f       	std	Y+24, r25	; 0x18
    3134:	8f 8b       	std	Y+23, r24	; 0x17
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	9c 8f       	std	Y+28, r25	; 0x1c
    313c:	8b 8f       	std	Y+27, r24	; 0x1b
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	8c 01       	movw	r16, r24
    3144:	c8 01       	movw	r24, r16
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <correct_left2+0x246>
    314a:	8c 01       	movw	r16, r24
    314c:	1c 8f       	std	Y+28, r17	; 0x1c
    314e:	0b 8f       	std	Y+27, r16	; 0x1b

			_delay_ms(50);

			break;
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <correct_left2+0x254>
    3152:	00 00       	nop
		}

	}


}
    3154:	6c 96       	adiw	r28, 0x1c	; 28
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	08 95       	ret

0000316a <correct_right3>:

void correct_right3()

{   stop();
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	6c 97       	sbiw	r28, 0x1c	; 28
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 ea       	ldi	r26, 0xA0	; 160
    318c:	b1 e4       	ldi	r27, 0x41	; 65
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	ab 83       	std	Y+3, r26	; 0x03
    3194:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3196:	69 81       	ldd	r22, Y+1	; 0x01
    3198:	7a 81       	ldd	r23, Y+2	; 0x02
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	26 e6       	ldi	r18, 0x66	; 102
    31a0:	36 e6       	ldi	r19, 0x66	; 102
    31a2:	46 e6       	ldi	r20, 0x66	; 102
    31a4:	55 e4       	ldi	r21, 0x45	; 69
    31a6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	af 83       	std	Y+7, r26	; 0x07
    31b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    31b6:	11 e0       	ldi	r17, 0x01	; 1
    31b8:	6d 81       	ldd	r22, Y+5	; 0x05
    31ba:	7e 81       	ldd	r23, Y+6	; 0x06
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <correct_right3+0x68>
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	11 23       	and	r17, r17
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <correct_right3+0x76>
		__ticks = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9a 87       	std	Y+10, r25	; 0x0a
    31dc:	89 87       	std	Y+9, r24	; 0x09
    31de:	46 c0       	rjmp	.+140    	; 0x326c <correct_right3+0x102>
	else if (__tmp > 65535)
    31e0:	11 e0       	ldi	r17, 0x01	; 1
    31e2:	6d 81       	ldd	r22, Y+5	; 0x05
    31e4:	7e 81       	ldd	r23, Y+6	; 0x06
    31e6:	8f 81       	ldd	r24, Y+7	; 0x07
    31e8:	98 85       	ldd	r25, Y+8	; 0x08
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <correct_right3+0x92>
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	11 23       	and	r17, r17
    31fe:	61 f1       	breq	.+88     	; 0x3258 <correct_right3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3200:	69 81       	ldd	r22, Y+1	; 0x01
    3202:	7a 81       	ldd	r23, Y+2	; 0x02
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e2       	ldi	r20, 0x20	; 32
    320e:	51 e4       	ldi	r21, 0x41	; 65
    3210:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a 87       	std	Y+10, r25	; 0x0a
    3226:	89 87       	std	Y+9, r24	; 0x09
    3228:	12 c0       	rjmp	.+36     	; 0x324e <correct_right3+0xe4>
    322a:	80 e7       	ldi	r24, 0x70	; 112
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	9c 87       	std	Y+12, r25	; 0x0c
    3230:	8b 87       	std	Y+11, r24	; 0x0b
    3232:	8b 85       	ldd	r24, Y+11	; 0x0b
    3234:	9c 85       	ldd	r25, Y+12	; 0x0c
    3236:	8c 01       	movw	r16, r24
    3238:	c8 01       	movw	r24, r16
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <correct_right3+0xd0>
    323e:	8c 01       	movw	r16, r24
    3240:	1c 87       	std	Y+12, r17	; 0x0c
    3242:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9a 87       	std	Y+10, r25	; 0x0a
    324c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	51 f7       	brne	.-44     	; 0x322a <correct_right3+0xc0>
    3256:	17 c0       	rjmp	.+46     	; 0x3286 <correct_right3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 81       	ldd	r22, Y+5	; 0x05
    325a:	7e 81       	ldd	r23, Y+6	; 0x06
    325c:	8f 81       	ldd	r24, Y+7	; 0x07
    325e:	98 85       	ldd	r25, Y+8	; 0x08
    3260:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9a 87       	std	Y+10, r25	; 0x0a
    326a:	89 87       	std	Y+9, r24	; 0x09
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	9e 87       	std	Y+14, r25	; 0x0e
    3272:	8d 87       	std	Y+13, r24	; 0x0d
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	8c 01       	movw	r16, r24
    327a:	c8 01       	movw	r24, r16
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <correct_right3+0x112>
    3280:	8c 01       	movw	r16, r24
    3282:	1e 87       	std	Y+14, r17	; 0x0e
    3284:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	right_degrees(160);
    3286:	80 ea       	ldi	r24, 0xA0	; 160
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    328e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <correct_right3+0x12c>
	while(1){
		read_line();
		if(Center_white_line>25){
			stop();
		break;}
	}
    3294:	00 00       	nop
{   stop();
	_delay_ms(20);
	right_degrees(160);
	right();
	while(1){
		read_line();
    3296:	81 ea       	ldi	r24, 0xA1	; 161
    3298:	93 e3       	ldi	r25, 0x33	; 51
    329a:	fc 01       	movw	r30, r24
    329c:	19 95       	eicall
		if(Center_white_line>25){
    329e:	80 91 47 03 	lds	r24, 0x0347
    32a2:	8a 31       	cpi	r24, 0x1A	; 26
    32a4:	b8 f3       	brcs	.-18     	; 0x3294 <correct_right3+0x12a>
			stop();
    32a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		break;}
    32aa:	00 00       	nop
	}
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 e2       	ldi	r26, 0x20	; 32
    32b2:	b2 e4       	ldi	r27, 0x42	; 66
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
    32b6:	98 8b       	std	Y+16, r25	; 0x10
    32b8:	a9 8b       	std	Y+17, r26	; 0x11
    32ba:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    32be:	78 89       	ldd	r23, Y+16	; 0x10
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	9a 89       	ldd	r25, Y+18	; 0x12
    32c4:	26 e6       	ldi	r18, 0x66	; 102
    32c6:	36 e6       	ldi	r19, 0x66	; 102
    32c8:	46 e6       	ldi	r20, 0x66	; 102
    32ca:	55 e4       	ldi	r21, 0x45	; 69
    32cc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	9c 8b       	std	Y+20, r25	; 0x14
    32d8:	ad 8b       	std	Y+21, r26	; 0x15
    32da:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    32dc:	11 e0       	ldi	r17, 0x01	; 1
    32de:	6b 89       	ldd	r22, Y+19	; 0x13
    32e0:	7c 89       	ldd	r23, Y+20	; 0x14
    32e2:	8d 89       	ldd	r24, Y+21	; 0x15
    32e4:	9e 89       	ldd	r25, Y+22	; 0x16
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    32f2:	88 23       	and	r24, r24
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <correct_right3+0x18e>
    32f6:	10 e0       	ldi	r17, 0x00	; 0
    32f8:	11 23       	and	r17, r17
    32fa:	29 f0       	breq	.+10     	; 0x3306 <correct_right3+0x19c>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	98 8f       	std	Y+24, r25	; 0x18
    3302:	8f 8b       	std	Y+23, r24	; 0x17
    3304:	46 c0       	rjmp	.+140    	; 0x3392 <correct_right3+0x228>
	else if (__tmp > 65535)
    3306:	11 e0       	ldi	r17, 0x01	; 1
    3308:	6b 89       	ldd	r22, Y+19	; 0x13
    330a:	7c 89       	ldd	r23, Y+20	; 0x14
    330c:	8d 89       	ldd	r24, Y+21	; 0x15
    330e:	9e 89       	ldd	r25, Y+22	; 0x16
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    331c:	18 16       	cp	r1, r24
    331e:	0c f0       	brlt	.+2      	; 0x3322 <correct_right3+0x1b8>
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	11 23       	and	r17, r17
    3324:	61 f1       	breq	.+88     	; 0x337e <correct_right3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	6f 85       	ldd	r22, Y+15	; 0x0f
    3328:	78 89       	ldd	r23, Y+16	; 0x10
    332a:	89 89       	ldd	r24, Y+17	; 0x11
    332c:	9a 89       	ldd	r25, Y+18	; 0x12
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	98 8f       	std	Y+24, r25	; 0x18
    334c:	8f 8b       	std	Y+23, r24	; 0x17
    334e:	12 c0       	rjmp	.+36     	; 0x3374 <correct_right3+0x20a>
    3350:	80 e7       	ldi	r24, 0x70	; 112
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	9a 8f       	std	Y+26, r25	; 0x1a
    3356:	89 8f       	std	Y+25, r24	; 0x19
    3358:	89 8d       	ldd	r24, Y+25	; 0x19
    335a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    335c:	8c 01       	movw	r16, r24
    335e:	c8 01       	movw	r24, r16
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <correct_right3+0x1f6>
    3364:	8c 01       	movw	r16, r24
    3366:	1a 8f       	std	Y+26, r17	; 0x1a
    3368:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	98 8f       	std	Y+24, r25	; 0x18
    3372:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	51 f7       	brne	.-44     	; 0x3350 <correct_right3+0x1e6>
    337c:	17 c0       	rjmp	.+46     	; 0x33ac <correct_right3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	6b 89       	ldd	r22, Y+19	; 0x13
    3380:	7c 89       	ldd	r23, Y+20	; 0x14
    3382:	8d 89       	ldd	r24, Y+21	; 0x15
    3384:	9e 89       	ldd	r25, Y+22	; 0x16
    3386:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	98 8f       	std	Y+24, r25	; 0x18
    3390:	8f 8b       	std	Y+23, r24	; 0x17
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	9c 8f       	std	Y+28, r25	; 0x1c
    3398:	8b 8f       	std	Y+27, r24	; 0x1b
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	8c 01       	movw	r16, r24
    33a0:	c8 01       	movw	r24, r16
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <correct_right3+0x238>
    33a6:	8c 01       	movw	r16, r24
    33a8:	1c 8f       	std	Y+28, r17	; 0x1c
    33aa:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    33ac:	88 e2       	ldi	r24, 0x28	; 40
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    33b4:	6c 96       	adiw	r28, 0x1c	; 28
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <correct_left3>:
void correct_left3()

{   stop();
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	6c 97       	sbiw	r28, 0x1c	; 28
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 ea       	ldi	r26, 0xA0	; 160
    33ec:	b1 e4       	ldi	r27, 0x41	; 65
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	ab 83       	std	Y+3, r26	; 0x03
    33f4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	69 81       	ldd	r22, Y+1	; 0x01
    33f8:	7a 81       	ldd	r23, Y+2	; 0x02
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	26 e6       	ldi	r18, 0x66	; 102
    3400:	36 e6       	ldi	r19, 0x66	; 102
    3402:	46 e6       	ldi	r20, 0x66	; 102
    3404:	55 e4       	ldi	r21, 0x45	; 69
    3406:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	af 83       	std	Y+7, r26	; 0x07
    3414:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3416:	11 e0       	ldi	r17, 0x01	; 1
    3418:	6d 81       	ldd	r22, Y+5	; 0x05
    341a:	7e 81       	ldd	r23, Y+6	; 0x06
    341c:	8f 81       	ldd	r24, Y+7	; 0x07
    341e:	98 85       	ldd	r25, Y+8	; 0x08
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e8       	ldi	r20, 0x80	; 128
    3426:	5f e3       	ldi	r21, 0x3F	; 63
    3428:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    342c:	88 23       	and	r24, r24
    342e:	0c f0       	brlt	.+2      	; 0x3432 <correct_left3+0x68>
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	11 23       	and	r17, r17
    3434:	29 f0       	breq	.+10     	; 0x3440 <correct_left3+0x76>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9a 87       	std	Y+10, r25	; 0x0a
    343c:	89 87       	std	Y+9, r24	; 0x09
    343e:	46 c0       	rjmp	.+140    	; 0x34cc <correct_left3+0x102>
	else if (__tmp > 65535)
    3440:	11 e0       	ldi	r17, 0x01	; 1
    3442:	6d 81       	ldd	r22, Y+5	; 0x05
    3444:	7e 81       	ldd	r23, Y+6	; 0x06
    3446:	8f 81       	ldd	r24, Y+7	; 0x07
    3448:	98 85       	ldd	r25, Y+8	; 0x08
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    3456:	18 16       	cp	r1, r24
    3458:	0c f0       	brlt	.+2      	; 0x345c <correct_left3+0x92>
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	11 23       	and	r17, r17
    345e:	61 f1       	breq	.+88     	; 0x34b8 <correct_left3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	69 81       	ldd	r22, Y+1	; 0x01
    3462:	7a 81       	ldd	r23, Y+2	; 0x02
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9a 87       	std	Y+10, r25	; 0x0a
    3486:	89 87       	std	Y+9, r24	; 0x09
    3488:	12 c0       	rjmp	.+36     	; 0x34ae <correct_left3+0xe4>
    348a:	80 e7       	ldi	r24, 0x70	; 112
    348c:	91 e0       	ldi	r25, 0x01	; 1
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	8b 87       	std	Y+11, r24	; 0x0b
    3492:	8b 85       	ldd	r24, Y+11	; 0x0b
    3494:	9c 85       	ldd	r25, Y+12	; 0x0c
    3496:	8c 01       	movw	r16, r24
    3498:	c8 01       	movw	r24, r16
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <correct_left3+0xd0>
    349e:	8c 01       	movw	r16, r24
    34a0:	1c 87       	std	Y+12, r17	; 0x0c
    34a2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9a 87       	std	Y+10, r25	; 0x0a
    34ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	51 f7       	brne	.-44     	; 0x348a <correct_left3+0xc0>
    34b6:	17 c0       	rjmp	.+46     	; 0x34e6 <correct_left3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6d 81       	ldd	r22, Y+5	; 0x05
    34ba:	7e 81       	ldd	r23, Y+6	; 0x06
    34bc:	8f 81       	ldd	r24, Y+7	; 0x07
    34be:	98 85       	ldd	r25, Y+8	; 0x08
    34c0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a 87       	std	Y+10, r25	; 0x0a
    34ca:	89 87       	std	Y+9, r24	; 0x09
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	9e 87       	std	Y+14, r25	; 0x0e
    34d2:	8d 87       	std	Y+13, r24	; 0x0d
    34d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d8:	8c 01       	movw	r16, r24
    34da:	c8 01       	movw	r24, r16
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <correct_left3+0x112>
    34e0:	8c 01       	movw	r16, r24
    34e2:	1e 87       	std	Y+14, r17	; 0x0e
    34e4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(160);
    34e6:	80 ea       	ldi	r24, 0xA0	; 160
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    34ee:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <correct_left3+0x12c>
	while(1){
		read_line();
		if(Center_white_line>25){
			stop();
		break;}
	}
    34f4:	00 00       	nop
{   stop();
	_delay_ms(20);
	left_degrees(160);
	left();
	while(1){
		read_line();
    34f6:	81 ea       	ldi	r24, 0xA1	; 161
    34f8:	93 e3       	ldi	r25, 0x33	; 51
    34fa:	fc 01       	movw	r30, r24
    34fc:	19 95       	eicall
		if(Center_white_line>25){
    34fe:	80 91 47 03 	lds	r24, 0x0347
    3502:	8a 31       	cpi	r24, 0x1A	; 26
    3504:	b8 f3       	brcs	.-18     	; 0x34f4 <correct_left3+0x12a>
			stop();
    3506:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		break;}
    350a:	00 00       	nop
	}
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	a0 e2       	ldi	r26, 0x20	; 32
    3512:	b2 e4       	ldi	r27, 0x42	; 66
    3514:	8f 87       	std	Y+15, r24	; 0x0f
    3516:	98 8b       	std	Y+16, r25	; 0x10
    3518:	a9 8b       	std	Y+17, r26	; 0x11
    351a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    351c:	6f 85       	ldd	r22, Y+15	; 0x0f
    351e:	78 89       	ldd	r23, Y+16	; 0x10
    3520:	89 89       	ldd	r24, Y+17	; 0x11
    3522:	9a 89       	ldd	r25, Y+18	; 0x12
    3524:	26 e6       	ldi	r18, 0x66	; 102
    3526:	36 e6       	ldi	r19, 0x66	; 102
    3528:	46 e6       	ldi	r20, 0x66	; 102
    352a:	55 e4       	ldi	r21, 0x45	; 69
    352c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	8b 8b       	std	Y+19, r24	; 0x13
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	ad 8b       	std	Y+21, r26	; 0x15
    353a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    353c:	11 e0       	ldi	r17, 0x01	; 1
    353e:	6b 89       	ldd	r22, Y+19	; 0x13
    3540:	7c 89       	ldd	r23, Y+20	; 0x14
    3542:	8d 89       	ldd	r24, Y+21	; 0x15
    3544:	9e 89       	ldd	r25, Y+22	; 0x16
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    3552:	88 23       	and	r24, r24
    3554:	0c f0       	brlt	.+2      	; 0x3558 <correct_left3+0x18e>
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	11 23       	and	r17, r17
    355a:	29 f0       	breq	.+10     	; 0x3566 <correct_left3+0x19c>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	98 8f       	std	Y+24, r25	; 0x18
    3562:	8f 8b       	std	Y+23, r24	; 0x17
    3564:	46 c0       	rjmp	.+140    	; 0x35f2 <correct_left3+0x228>
	else if (__tmp > 65535)
    3566:	11 e0       	ldi	r17, 0x01	; 1
    3568:	6b 89       	ldd	r22, Y+19	; 0x13
    356a:	7c 89       	ldd	r23, Y+20	; 0x14
    356c:	8d 89       	ldd	r24, Y+21	; 0x15
    356e:	9e 89       	ldd	r25, Y+22	; 0x16
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    357c:	18 16       	cp	r1, r24
    357e:	0c f0       	brlt	.+2      	; 0x3582 <correct_left3+0x1b8>
    3580:	10 e0       	ldi	r17, 0x00	; 0
    3582:	11 23       	and	r17, r17
    3584:	61 f1       	breq	.+88     	; 0x35de <correct_left3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3586:	6f 85       	ldd	r22, Y+15	; 0x0f
    3588:	78 89       	ldd	r23, Y+16	; 0x10
    358a:	89 89       	ldd	r24, Y+17	; 0x11
    358c:	9a 89       	ldd	r25, Y+18	; 0x12
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	98 8f       	std	Y+24, r25	; 0x18
    35ac:	8f 8b       	std	Y+23, r24	; 0x17
    35ae:	12 c0       	rjmp	.+36     	; 0x35d4 <correct_left3+0x20a>
    35b0:	80 e7       	ldi	r24, 0x70	; 112
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	9a 8f       	std	Y+26, r25	; 0x1a
    35b6:	89 8f       	std	Y+25, r24	; 0x19
    35b8:	89 8d       	ldd	r24, Y+25	; 0x19
    35ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35bc:	8c 01       	movw	r16, r24
    35be:	c8 01       	movw	r24, r16
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <correct_left3+0x1f6>
    35c4:	8c 01       	movw	r16, r24
    35c6:	1a 8f       	std	Y+26, r17	; 0x1a
    35c8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ca:	8f 89       	ldd	r24, Y+23	; 0x17
    35cc:	98 8d       	ldd	r25, Y+24	; 0x18
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	98 8f       	std	Y+24, r25	; 0x18
    35d2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d4:	8f 89       	ldd	r24, Y+23	; 0x17
    35d6:	98 8d       	ldd	r25, Y+24	; 0x18
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	51 f7       	brne	.-44     	; 0x35b0 <correct_left3+0x1e6>
    35dc:	17 c0       	rjmp	.+46     	; 0x360c <correct_left3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35de:	6b 89       	ldd	r22, Y+19	; 0x13
    35e0:	7c 89       	ldd	r23, Y+20	; 0x14
    35e2:	8d 89       	ldd	r24, Y+21	; 0x15
    35e4:	9e 89       	ldd	r25, Y+22	; 0x16
    35e6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	98 8f       	std	Y+24, r25	; 0x18
    35f0:	8f 8b       	std	Y+23, r24	; 0x17
    35f2:	8f 89       	ldd	r24, Y+23	; 0x17
    35f4:	98 8d       	ldd	r25, Y+24	; 0x18
    35f6:	9c 8f       	std	Y+28, r25	; 0x1c
    35f8:	8b 8f       	std	Y+27, r24	; 0x1b
    35fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fe:	8c 01       	movw	r16, r24
    3600:	c8 01       	movw	r24, r16
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <correct_left3+0x238>
    3606:	8c 01       	movw	r16, r24
    3608:	1c 8f       	std	Y+28, r17	; 0x1c
    360a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    360c:	88 e2       	ldi	r24, 0x28	; 40
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    3614:	6c 96       	adiw	r28, 0x1c	; 28
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	08 95       	ret

0000362a <adc_pin_config>:

*/

void adc_pin_config(void)

{
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62

    DDRF = 0x00;
    3632:	80 e3       	ldi	r24, 0x30	; 48
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	fc 01       	movw	r30, r24
    3638:	10 82       	st	Z, r1

    PORTF = 0x00;
    363a:	81 e3       	ldi	r24, 0x31	; 49
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	fc 01       	movw	r30, r24
    3640:	10 82       	st	Z, r1

    DDRK = 0x00;
    3642:	87 e0       	ldi	r24, 0x07	; 7
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	fc 01       	movw	r30, r24
    3648:	10 82       	st	Z, r1

    PORTK = 0x00;
    364a:	88 e0       	ldi	r24, 0x08	; 8
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	fc 01       	movw	r30, r24
    3650:	10 82       	st	Z, r1

}
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	08 95       	ret

00003658 <adc_init>:

*/

void adc_init() 

{
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0x00;
    3660:	8a e7       	ldi	r24, 0x7A	; 122
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	fc 01       	movw	r30, r24
    3666:	10 82       	st	Z, r1

	ADCSRB = 0x00; //MUX5 = 0
    3668:	8b e7       	ldi	r24, 0x7B	; 123
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	fc 01       	movw	r30, r24
    366e:	10 82       	st	Z, r1

	ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    3670:	8c e7       	ldi	r24, 0x7C	; 124
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	20 e2       	ldi	r18, 0x20	; 32
    3676:	fc 01       	movw	r30, r24
    3678:	20 83       	st	Z, r18

	ACSR = 0x80;
    367a:	80 e5       	ldi	r24, 0x50	; 80
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	20 e8       	ldi	r18, 0x80	; 128
    3680:	fc 01       	movw	r30, r24
    3682:	20 83       	st	Z, r18

	ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    3684:	8a e7       	ldi	r24, 0x7A	; 122
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	26 e8       	ldi	r18, 0x86	; 134
    368a:	fc 01       	movw	r30, r24
    368c:	20 83       	st	Z, r18

}
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	08 95       	ret

00003694 <ADC_Conversion>:

*/

unsigned char ADC_Conversion(unsigned char Ch) 

{
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	0f 92       	push	r0
    369a:	0f 92       	push	r0
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	8a 83       	std	Y+2, r24	; 0x02

	unsigned char a;

	if (Ch > 7)
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	88 30       	cpi	r24, 0x08	; 8
    36a6:	28 f0       	brcs	.+10     	; 0x36b2 <ADC_Conversion+0x1e>

	{

		ADCSRB = 0x08;
    36a8:	8b e7       	ldi	r24, 0x7B	; 123
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	28 e0       	ldi	r18, 0x08	; 8
    36ae:	fc 01       	movw	r30, r24
    36b0:	20 83       	st	Z, r18

	}

	Ch = Ch & 0x07;
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	87 70       	andi	r24, 0x07	; 7
    36b6:	8a 83       	std	Y+2, r24	; 0x02

	ADMUX = 0x20 | Ch;
    36b8:	8c e7       	ldi	r24, 0x7C	; 124
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	2a 81       	ldd	r18, Y+2	; 0x02
    36be:	20 62       	ori	r18, 0x20	; 32
    36c0:	fc 01       	movw	r30, r24
    36c2:	20 83       	st	Z, r18

	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
    36c4:	8a e7       	ldi	r24, 0x7A	; 122
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	2a e7       	ldi	r18, 0x7A	; 122
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	f9 01       	movw	r30, r18
    36ce:	20 81       	ld	r18, Z
    36d0:	20 64       	ori	r18, 0x40	; 64
    36d2:	fc 01       	movw	r30, r24
    36d4:	20 83       	st	Z, r18

	while ((ADCSRA & 0x10) == 0); //Wait for conversion to complete
    36d6:	00 00       	nop
    36d8:	8a e7       	ldi	r24, 0x7A	; 122
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	80 81       	ld	r24, Z
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	80 71       	andi	r24, 0x10	; 16
    36e6:	90 70       	andi	r25, 0x00	; 0
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	b1 f3       	breq	.-20     	; 0x36d8 <ADC_Conversion+0x44>

	a = ADCH;
    36ec:	89 e7       	ldi	r24, 0x79	; 121
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	fc 01       	movw	r30, r24
    36f2:	80 81       	ld	r24, Z
    36f4:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA = ADCSRA | 0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    36f6:	8a e7       	ldi	r24, 0x7A	; 122
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	2a e7       	ldi	r18, 0x7A	; 122
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	f9 01       	movw	r30, r18
    3700:	20 81       	ld	r18, Z
    3702:	20 61       	ori	r18, 0x10	; 16
    3704:	fc 01       	movw	r30, r24
    3706:	20 83       	st	Z, r18

	ADCSRB = 0x00;
    3708:	8b e7       	ldi	r24, 0x7B	; 123
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	fc 01       	movw	r30, r24
    370e:	10 82       	st	Z, r1

	return a;
    3710:	89 81       	ldd	r24, Y+1	; 0x01

}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <print_sensor>:

*/

void print_sensor(char row, char coloumn, unsigned char channel)

 {
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	00 d0       	rcall	.+0      	; 0x3722 <print_sensor+0x6>
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	6a 83       	std	Y+2, r22	; 0x02
    372a:	4b 83       	std	Y+3, r20	; 0x03



	ADC_Value = ADC_Conversion(channel);
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    3732:	80 93 b9 04 	sts	0x04B9, r24

	lcd_print(row, coloumn, ADC_Value, 3);
    3736:	80 91 b9 04 	lds	r24, 0x04B9
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	6a 81       	ldd	r22, Y+2	; 0x02
    3742:	a9 01       	movw	r20, r18
    3744:	23 e0       	ldi	r18, 0x03	; 3
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <__vector_35>:

*/

ISR(TIMER3_OVF_vect)

{
    3758:	1f 92       	push	r1
    375a:	0f 92       	push	r0
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	0f 92       	push	r0
    3760:	00 90 5b 00 	lds	r0, 0x005B
    3764:	0f 92       	push	r0
    3766:	11 24       	eor	r1, r1
    3768:	2f 93       	push	r18
    376a:	3f 93       	push	r19
    376c:	4f 93       	push	r20
    376e:	5f 93       	push	r21
    3770:	6f 93       	push	r22
    3772:	7f 93       	push	r23
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	af 93       	push	r26
    377a:	bf 93       	push	r27
    377c:	ef 93       	push	r30
    377e:	ff 93       	push	r31
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62

    read_line();
    3788:	81 ea       	ldi	r24, 0xA1	; 161
    378a:	93 e3       	ldi	r25, 0x33	; 51
    378c:	fc 01       	movw	r30, r24
    378e:	19 95       	eicall

    line_conditions();
    3790:	89 e2       	ldi	r24, 0x29	; 41
    3792:	94 e3       	ldi	r25, 0x34	; 52
    3794:	fc 01       	movw	r30, r24
    3796:	19 95       	eicall

    TCNT3 = 0xFDC0;
    3798:	84 e9       	ldi	r24, 0x94	; 148
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	20 ec       	ldi	r18, 0xC0	; 192
    379e:	3d ef       	ldi	r19, 0xFD	; 253
    37a0:	fc 01       	movw	r30, r24
    37a2:	31 83       	std	Z+1, r19	; 0x01
    37a4:	20 83       	st	Z, r18

}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	ff 91       	pop	r31
    37ac:	ef 91       	pop	r30
    37ae:	bf 91       	pop	r27
    37b0:	af 91       	pop	r26
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	7f 91       	pop	r23
    37b8:	6f 91       	pop	r22
    37ba:	5f 91       	pop	r21
    37bc:	4f 91       	pop	r20
    37be:	3f 91       	pop	r19
    37c0:	2f 91       	pop	r18
    37c2:	0f 90       	pop	r0
    37c4:	00 92 5b 00 	sts	0x005B, r0
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_45>:

*/

ISR(TIMER4_OVF_vect)

{
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	00 90 5b 00 	lds	r0, 0x005B
    37de:	0f 92       	push	r0
    37e0:	11 24       	eor	r1, r1
    37e2:	2f 93       	push	r18
    37e4:	3f 93       	push	r19
    37e6:	4f 93       	push	r20
    37e8:	5f 93       	push	r21
    37ea:	6f 93       	push	r22
    37ec:	7f 93       	push	r23
    37ee:	8f 93       	push	r24
    37f0:	9f 93       	push	r25
    37f2:	af 93       	push	r26
    37f4:	bf 93       	push	r27
    37f6:	ef 93       	push	r30
    37f8:	ff 93       	push	r31
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62

    TCNT4 = 0xE980;
    3802:	84 ea       	ldi	r24, 0xA4	; 164
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	20 e8       	ldi	r18, 0x80	; 128
    3808:	39 ee       	ldi	r19, 0xE9	; 233
    380a:	fc 01       	movw	r30, r24
    380c:	31 83       	std	Z+1, r19	; 0x01
    380e:	20 83       	st	Z, r18

    t4_sec++; //Increment every 0.1 sec
    3810:	80 91 49 03 	lds	r24, 0x0349
    3814:	90 91 4a 03 	lds	r25, 0x034A
    3818:	01 96       	adiw	r24, 0x01	; 1
    381a:	90 93 4a 03 	sts	0x034A, r25
    381e:	80 93 49 03 	sts	0x0349, r24



    if (t4_sec == t4_count && t4_flag == 1)
    3822:	20 91 49 03 	lds	r18, 0x0349
    3826:	30 91 4a 03 	lds	r19, 0x034A
    382a:	80 91 be 04 	lds	r24, 0x04BE
    382e:	90 91 bf 04 	lds	r25, 0x04BF
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	59 f4       	brne	.+22     	; 0x384e <__vector_45+0x7c>
    3838:	80 91 4b 03 	lds	r24, 0x034B
    383c:	90 91 4c 03 	lds	r25, 0x034C
    3840:	81 30       	cpi	r24, 0x01	; 1
    3842:	91 05       	cpc	r25, r1
    3844:	21 f4       	brne	.+8      	; 0x384e <__vector_45+0x7c>

        stop_timer4();
    3846:	80 e6       	ldi	r24, 0x60	; 96
    3848:	9c e1       	ldi	r25, 0x1C	; 28
    384a:	fc 01       	movw	r30, r24
    384c:	19 95       	eicall

}
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	ff 91       	pop	r31
    3854:	ef 91       	pop	r30
    3856:	bf 91       	pop	r27
    3858:	af 91       	pop	r26
    385a:	9f 91       	pop	r25
    385c:	8f 91       	pop	r24
    385e:	7f 91       	pop	r23
    3860:	6f 91       	pop	r22
    3862:	5f 91       	pop	r21
    3864:	4f 91       	pop	r20
    3866:	3f 91       	pop	r19
    3868:	2f 91       	pop	r18
    386a:	0f 90       	pop	r0
    386c:	00 92 5b 00 	sts	0x005B, r0
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <start_timer4>:

*/

void start_timer4(int count)

{
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	0f 92       	push	r0
    3880:	0f 92       	push	r0
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01

    t4_flag = 1; //Indicate timer 4 is enabled
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	90 93 4c 03 	sts	0x034C, r25
    3892:	80 93 4b 03 	sts	0x034B, r24

    t4_sec = 0;
    3896:	10 92 4a 03 	sts	0x034A, r1
    389a:	10 92 49 03 	sts	0x0349, r1

    t4_count = count + 1;
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	90 93 bf 04 	sts	0x04BF, r25
    38a8:	80 93 be 04 	sts	0x04BE, r24

    TIMSK4 = 0x01; //Timer 4 overflow interrupt enable
    38ac:	82 e7       	ldi	r24, 0x72	; 114
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	21 e0       	ldi	r18, 0x01	; 1
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 83       	st	Z, r18

}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <stop_timer4>:

*/

void stop_timer4()

{
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62

	t4_flag = 0;
    38c8:	10 92 4c 03 	sts	0x034C, r1
    38cc:	10 92 4b 03 	sts	0x034B, r1

	t4_sec = 0;
    38d0:	10 92 4a 03 	sts	0x034A, r1
    38d4:	10 92 49 03 	sts	0x0349, r1

	TIMSK4 = 0x00; //Timer4 overflow interrupt disable
    38d8:	82 e7       	ldi	r24, 0x72	; 114
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	fc 01       	movw	r30, r24
    38de:	10 82       	st	Z, r1

}
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <servo1_pin_config>:
unsigned char ii = 0;
signed char jj = 0;

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    38ee:	84 e2       	ldi	r24, 0x24	; 36
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	24 e2       	ldi	r18, 0x24	; 36
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	f9 01       	movw	r30, r18
    38f8:	20 81       	ld	r18, Z
    38fa:	20 62       	ori	r18, 0x20	; 32
    38fc:	fc 01       	movw	r30, r24
    38fe:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    3900:	85 e2       	ldi	r24, 0x25	; 37
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	25 e2       	ldi	r18, 0x25	; 37
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	f9 01       	movw	r30, r18
    390a:	20 81       	ld	r18, Z
    390c:	20 62       	ori	r18, 0x20	; 32
    390e:	fc 01       	movw	r30, r24
    3910:	20 83       	st	Z, r18
}
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	08 95       	ret

00003918 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    3920:	84 e2       	ldi	r24, 0x24	; 36
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	24 e2       	ldi	r18, 0x24	; 36
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	f9 01       	movw	r30, r18
    392a:	20 81       	ld	r18, Z
    392c:	20 64       	ori	r18, 0x40	; 64
    392e:	fc 01       	movw	r30, r24
    3930:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    3932:	85 e2       	ldi	r24, 0x25	; 37
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	25 e2       	ldi	r18, 0x25	; 37
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	f9 01       	movw	r30, r18
    393c:	20 81       	ld	r18, Z
    393e:	20 64       	ori	r18, 0x40	; 64
    3940:	fc 01       	movw	r30, r24
    3942:	20 83       	st	Z, r18
}
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	08 95       	ret

0000394a <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    3952:	84 e2       	ldi	r24, 0x24	; 36
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	24 e2       	ldi	r18, 0x24	; 36
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	f9 01       	movw	r30, r18
    395c:	20 81       	ld	r18, Z
    395e:	20 68       	ori	r18, 0x80	; 128
    3960:	fc 01       	movw	r30, r24
    3962:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    3964:	85 e2       	ldi	r24, 0x25	; 37
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	25 e2       	ldi	r18, 0x25	; 37
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	f9 01       	movw	r30, r18
    396e:	20 81       	ld	r18, Z
    3970:	20 68       	ori	r18, 0x80	; 128
    3972:	fc 01       	movw	r30, r24
    3974:	20 83       	st	Z, r18
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	08 95       	ret

0000397c <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	00 d0       	rcall	.+0      	; 0x3986 <servo_1+0xa>
    3986:	0f 92       	push	r0
    3988:	0f 92       	push	r0
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	dc 01       	movw	r26, r24
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	9a 83       	std	Y+2, r25	; 0x02
    399a:	ab 83       	std	Y+3, r26	; 0x03
    399c:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees * 0.512) + 34.56;
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	a0 e0       	ldi	r26, 0x00	; 0
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 15 92 	call	0x1242a	; 0x1242a <__floatunsisf>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	2f e6       	ldi	r18, 0x6F	; 111
    39ba:	32 e1       	ldi	r19, 0x12	; 18
    39bc:	43 e0       	ldi	r20, 0x03	; 3
    39be:	5f e3       	ldi	r21, 0x3F	; 63
    39c0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	21 e7       	ldi	r18, 0x71	; 113
    39ce:	3d e3       	ldi	r19, 0x3D	; 61
    39d0:	4a e0       	ldi	r20, 0x0A	; 10
    39d2:	52 e4       	ldi	r21, 0x42	; 66
    39d4:	0e 94 19 91 	call	0x12232	; 0x12232 <__addsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	ab 83       	std	Y+3, r26	; 0x03
    39e2:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    39e4:	89 e8       	ldi	r24, 0x89	; 137
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	fc 01       	movw	r30, r24
    39ea:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    39ec:	08 e8       	ldi	r16, 0x88	; 136
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	69 81       	ldd	r22, Y+1	; 0x01
    39f2:	7a 81       	ldd	r23, Y+2	; 0x02
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	9c 81       	ldd	r25, Y+4	; 0x04
    39f8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	f8 01       	movw	r30, r16
    3a02:	80 83       	st	Z, r24
}
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <servo_2+0xa>
    3a22:	0f 92       	push	r0
    3a24:	0f 92       	push	r0
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	dc 01       	movw	r26, r24
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	ab 83       	std	Y+3, r26	; 0x03
    3a38:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees * 0.512) + 34.56;
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 15 92 	call	0x1242a	; 0x1242a <__floatunsisf>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	2f e6       	ldi	r18, 0x6F	; 111
    3a56:	32 e1       	ldi	r19, 0x12	; 18
    3a58:	43 e0       	ldi	r20, 0x03	; 3
    3a5a:	5f e3       	ldi	r21, 0x3F	; 63
    3a5c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	21 e7       	ldi	r18, 0x71	; 113
    3a6a:	3d e3       	ldi	r19, 0x3D	; 61
    3a6c:	4a e0       	ldi	r20, 0x0A	; 10
    3a6e:	52 e4       	ldi	r21, 0x42	; 66
    3a70:	0e 94 19 91 	call	0x12232	; 0x12232 <__addsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	ab 83       	std	Y+3, r26	; 0x03
    3a7e:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    3a80:	8b e8       	ldi	r24, 0x8B	; 139
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	fc 01       	movw	r30, r24
    3a86:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    3a88:	0a e8       	ldi	r16, 0x8A	; 138
    3a8a:	10 e0       	ldi	r17, 0x00	; 0
    3a8c:	69 81       	ldd	r22, Y+1	; 0x01
    3a8e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	80 83       	st	Z, r24
}
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	08 95       	ret

00003ab4 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <servo_3+0xa>
    3abe:	0f 92       	push	r0
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	dc 01       	movw	r26, r24
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	ab 83       	std	Y+3, r26	; 0x03
    3ad4:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees * 0.512) + 34.56;
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	a0 e0       	ldi	r26, 0x00	; 0
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 15 92 	call	0x1242a	; 0x1242a <__floatunsisf>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	2f e6       	ldi	r18, 0x6F	; 111
    3af2:	32 e1       	ldi	r19, 0x12	; 18
    3af4:	43 e0       	ldi	r20, 0x03	; 3
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	bc 01       	movw	r22, r24
    3b02:	cd 01       	movw	r24, r26
    3b04:	21 e7       	ldi	r18, 0x71	; 113
    3b06:	3d e3       	ldi	r19, 0x3D	; 61
    3b08:	4a e0       	ldi	r20, 0x0A	; 10
    3b0a:	52 e4       	ldi	r21, 0x42	; 66
    3b0c:	0e 94 19 91 	call	0x12232	; 0x12232 <__addsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	ab 83       	std	Y+3, r26	; 0x03
    3b1a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    3b1c:	8d e8       	ldi	r24, 0x8D	; 141
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	fc 01       	movw	r30, r24
    3b22:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    3b24:	0c e8       	ldi	r16, 0x8C	; 140
    3b26:	10 e0       	ldi	r17, 0x00	; 0
    3b28:	69 81       	ldd	r22, Y+1	; 0x01
    3b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
}
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    3b58:	89 e8       	ldi	r24, 0x89	; 137
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	23 e0       	ldi	r18, 0x03	; 3
    3b5e:	fc 01       	movw	r30, r24
    3b60:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    3b62:	88 e8       	ldi	r24, 0x88	; 136
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	2f ef       	ldi	r18, 0xFF	; 255
    3b68:	fc 01       	movw	r30, r24
    3b6a:	20 83       	st	Z, r18
}
    3b6c:	df 91       	pop	r29
    3b6e:	cf 91       	pop	r28
    3b70:	08 95       	ret

00003b72 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    3b7a:	8b e8       	ldi	r24, 0x8B	; 139
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	23 e0       	ldi	r18, 0x03	; 3
    3b80:	fc 01       	movw	r30, r24
    3b82:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    3b84:	8a e8       	ldi	r24, 0x8A	; 138
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	2f ef       	ldi	r18, 0xFF	; 255
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	20 83       	st	Z, r18
}
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    3b9c:	8d e8       	ldi	r24, 0x8D	; 141
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	23 e0       	ldi	r18, 0x03	; 3
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    3ba6:	8c e8       	ldi	r24, 0x8C	; 140
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	2f ef       	ldi	r18, 0xFF	; 255
    3bac:	fc 01       	movw	r30, r24
    3bae:	20 83       	st	Z, r18
} 
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <gripper_open>:
void gripper_open()
{
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	6c 97       	sbiw	r28, 0x1c	; 28
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
	for(jj=0;jj<55;jj++)
    3bce:	10 92 4e 03 	sts	0x034E, r1
    3bd2:	89 c0       	rjmp	.+274    	; 0x3ce6 <gripper_open+0x130>
	{
		servo_3(jj);
    3bd4:	80 91 4e 03 	lds	r24, 0x034E
    3bd8:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	a0 e2       	ldi	r26, 0x20	; 32
    3be2:	b1 e4       	ldi	r27, 0x41	; 65
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	ab 83       	std	Y+3, r26	; 0x03
    3bea:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bec:	69 81       	ldd	r22, Y+1	; 0x01
    3bee:	7a 81       	ldd	r23, Y+2	; 0x02
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf4:	26 e6       	ldi	r18, 0x66	; 102
    3bf6:	36 e6       	ldi	r19, 0x66	; 102
    3bf8:	46 e6       	ldi	r20, 0x66	; 102
    3bfa:	55 e4       	ldi	r21, 0x45	; 69
    3bfc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	8d 83       	std	Y+5, r24	; 0x05
    3c06:	9e 83       	std	Y+6, r25	; 0x06
    3c08:	af 83       	std	Y+7, r26	; 0x07
    3c0a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3c0c:	11 e0       	ldi	r17, 0x01	; 1
    3c0e:	6d 81       	ldd	r22, Y+5	; 0x05
    3c10:	7e 81       	ldd	r23, Y+6	; 0x06
    3c12:	8f 81       	ldd	r24, Y+7	; 0x07
    3c14:	98 85       	ldd	r25, Y+8	; 0x08
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e8       	ldi	r20, 0x80	; 128
    3c1c:	5f e3       	ldi	r21, 0x3F	; 63
    3c1e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    3c22:	88 23       	and	r24, r24
    3c24:	0c f0       	brlt	.+2      	; 0x3c28 <gripper_open+0x72>
    3c26:	10 e0       	ldi	r17, 0x00	; 0
    3c28:	11 23       	and	r17, r17
    3c2a:	29 f0       	breq	.+10     	; 0x3c36 <gripper_open+0x80>
		__ticks = 1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	9a 87       	std	Y+10, r25	; 0x0a
    3c32:	89 87       	std	Y+9, r24	; 0x09
    3c34:	46 c0       	rjmp	.+140    	; 0x3cc2 <gripper_open+0x10c>
	else if (__tmp > 65535)
    3c36:	11 e0       	ldi	r17, 0x01	; 1
    3c38:	6d 81       	ldd	r22, Y+5	; 0x05
    3c3a:	7e 81       	ldd	r23, Y+6	; 0x06
    3c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c3e:	98 85       	ldd	r25, Y+8	; 0x08
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	0c f0       	brlt	.+2      	; 0x3c52 <gripper_open+0x9c>
    3c50:	10 e0       	ldi	r17, 0x00	; 0
    3c52:	11 23       	and	r17, r17
    3c54:	61 f1       	breq	.+88     	; 0x3cae <gripper_open+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c56:	69 81       	ldd	r22, Y+1	; 0x01
    3c58:	7a 81       	ldd	r23, Y+2	; 0x02
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	51 e4       	ldi	r21, 0x41	; 65
    3c66:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9a 87       	std	Y+10, r25	; 0x0a
    3c7c:	89 87       	std	Y+9, r24	; 0x09
    3c7e:	12 c0       	rjmp	.+36     	; 0x3ca4 <gripper_open+0xee>
    3c80:	80 e7       	ldi	r24, 0x70	; 112
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	9c 87       	std	Y+12, r25	; 0x0c
    3c86:	8b 87       	std	Y+11, r24	; 0x0b
    3c88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8c:	8c 01       	movw	r16, r24
    3c8e:	c8 01       	movw	r24, r16
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <gripper_open+0xda>
    3c94:	8c 01       	movw	r16, r24
    3c96:	1c 87       	std	Y+12, r17	; 0x0c
    3c98:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	9a 87       	std	Y+10, r25	; 0x0a
    3ca2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	51 f7       	brne	.-44     	; 0x3c80 <gripper_open+0xca>
    3cac:	17 c0       	rjmp	.+46     	; 0x3cdc <gripper_open+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cae:	6d 81       	ldd	r22, Y+5	; 0x05
    3cb0:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb4:	98 85       	ldd	r25, Y+8	; 0x08
    3cb6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	9a 87       	std	Y+10, r25	; 0x0a
    3cc0:	89 87       	std	Y+9, r24	; 0x09
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	9e 87       	std	Y+14, r25	; 0x0e
    3cc8:	8d 87       	std	Y+13, r24	; 0x0d
    3cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cce:	8c 01       	movw	r16, r24
    3cd0:	c8 01       	movw	r24, r16
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	f1 f7       	brne	.-4      	; 0x3cd2 <gripper_open+0x11c>
    3cd6:	8c 01       	movw	r16, r24
    3cd8:	1e 87       	std	Y+14, r17	; 0x0e
    3cda:	0d 87       	std	Y+13, r16	; 0x0d
 OCR1CH = 0x03;
 OCR1CL = 0xFF; //Servo 3 off
} 
void gripper_open()
{
	for(jj=0;jj<55;jj++)
    3cdc:	80 91 4e 03 	lds	r24, 0x034E
    3ce0:	8f 5f       	subi	r24, 0xFF	; 255
    3ce2:	80 93 4e 03 	sts	0x034E, r24
    3ce6:	80 91 4e 03 	lds	r24, 0x034E
    3cea:	87 33       	cpi	r24, 0x37	; 55
    3cec:	0c f4       	brge	.+2      	; 0x3cf0 <gripper_open+0x13a>
    3cee:	72 cf       	rjmp	.-284    	; 0x3bd4 <gripper_open+0x1e>
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	a8 e4       	ldi	r26, 0x48	; 72
    3cf6:	b3 e4       	ldi	r27, 0x43	; 67
    3cf8:	8f 87       	std	Y+15, r24	; 0x0f
    3cfa:	98 8b       	std	Y+16, r25	; 0x10
    3cfc:	a9 8b       	std	Y+17, r26	; 0x11
    3cfe:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d00:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d02:	78 89       	ldd	r23, Y+16	; 0x10
    3d04:	89 89       	ldd	r24, Y+17	; 0x11
    3d06:	9a 89       	ldd	r25, Y+18	; 0x12
    3d08:	26 e6       	ldi	r18, 0x66	; 102
    3d0a:	36 e6       	ldi	r19, 0x66	; 102
    3d0c:	46 e6       	ldi	r20, 0x66	; 102
    3d0e:	55 e4       	ldi	r21, 0x45	; 69
    3d10:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	8b 8b       	std	Y+19, r24	; 0x13
    3d1a:	9c 8b       	std	Y+20, r25	; 0x14
    3d1c:	ad 8b       	std	Y+21, r26	; 0x15
    3d1e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3d20:	11 e0       	ldi	r17, 0x01	; 1
    3d22:	6b 89       	ldd	r22, Y+19	; 0x13
    3d24:	7c 89       	ldd	r23, Y+20	; 0x14
    3d26:	8d 89       	ldd	r24, Y+21	; 0x15
    3d28:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	0c f0       	brlt	.+2      	; 0x3d3c <gripper_open+0x186>
    3d3a:	10 e0       	ldi	r17, 0x00	; 0
    3d3c:	11 23       	and	r17, r17
    3d3e:	29 f0       	breq	.+10     	; 0x3d4a <gripper_open+0x194>
		__ticks = 1;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	98 8f       	std	Y+24, r25	; 0x18
    3d46:	8f 8b       	std	Y+23, r24	; 0x17
    3d48:	46 c0       	rjmp	.+140    	; 0x3dd6 <gripper_open+0x220>
	else if (__tmp > 65535)
    3d4a:	11 e0       	ldi	r17, 0x01	; 1
    3d4c:	6b 89       	ldd	r22, Y+19	; 0x13
    3d4e:	7c 89       	ldd	r23, Y+20	; 0x14
    3d50:	8d 89       	ldd	r24, Y+21	; 0x15
    3d52:	9e 89       	ldd	r25, Y+22	; 0x16
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	3f ef       	ldi	r19, 0xFF	; 255
    3d58:	4f e7       	ldi	r20, 0x7F	; 127
    3d5a:	57 e4       	ldi	r21, 0x47	; 71
    3d5c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    3d60:	18 16       	cp	r1, r24
    3d62:	0c f0       	brlt	.+2      	; 0x3d66 <gripper_open+0x1b0>
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	11 23       	and	r17, r17
    3d68:	61 f1       	breq	.+88     	; 0x3dc2 <gripper_open+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d6c:	78 89       	ldd	r23, Y+16	; 0x10
    3d6e:	89 89       	ldd	r24, Y+17	; 0x11
    3d70:	9a 89       	ldd	r25, Y+18	; 0x12
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e2       	ldi	r20, 0x20	; 32
    3d78:	51 e4       	ldi	r21, 0x41	; 65
    3d7a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	bc 01       	movw	r22, r24
    3d84:	cd 01       	movw	r24, r26
    3d86:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	98 8f       	std	Y+24, r25	; 0x18
    3d90:	8f 8b       	std	Y+23, r24	; 0x17
    3d92:	12 c0       	rjmp	.+36     	; 0x3db8 <gripper_open+0x202>
    3d94:	80 e7       	ldi	r24, 0x70	; 112
    3d96:	91 e0       	ldi	r25, 0x01	; 1
    3d98:	9a 8f       	std	Y+26, r25	; 0x1a
    3d9a:	89 8f       	std	Y+25, r24	; 0x19
    3d9c:	89 8d       	ldd	r24, Y+25	; 0x19
    3d9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3da0:	8c 01       	movw	r16, r24
    3da2:	c8 01       	movw	r24, r16
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <gripper_open+0x1ee>
    3da8:	8c 01       	movw	r16, r24
    3daa:	1a 8f       	std	Y+26, r17	; 0x1a
    3dac:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	8f 89       	ldd	r24, Y+23	; 0x17
    3db0:	98 8d       	ldd	r25, Y+24	; 0x18
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	98 8f       	std	Y+24, r25	; 0x18
    3db6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dba:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	51 f7       	brne	.-44     	; 0x3d94 <gripper_open+0x1de>
    3dc0:	17 c0       	rjmp	.+46     	; 0x3df0 <gripper_open+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc2:	6b 89       	ldd	r22, Y+19	; 0x13
    3dc4:	7c 89       	ldd	r23, Y+20	; 0x14
    3dc6:	8d 89       	ldd	r24, Y+21	; 0x15
    3dc8:	9e 89       	ldd	r25, Y+22	; 0x16
    3dca:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	98 8f       	std	Y+24, r25	; 0x18
    3dd4:	8f 8b       	std	Y+23, r24	; 0x17
    3dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dda:	9c 8f       	std	Y+28, r25	; 0x1c
    3ddc:	8b 8f       	std	Y+27, r24	; 0x1b
    3dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3de2:	8c 01       	movw	r16, r24
    3de4:	c8 01       	movw	r24, r16
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <gripper_open+0x230>
    3dea:	8c 01       	movw	r16, r24
    3dec:	1c 8f       	std	Y+28, r17	; 0x1c
    3dee:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_3(jj);
		_delay_ms(10);
	}
	_delay_ms(200);
}
    3df0:	6c 96       	adiw	r28, 0x1c	; 28
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <gripper_close>:

void gripper_close()
{
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	6c 97       	sbiw	r28, 0x1c	; 28
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	de bf       	out	0x3e, r29	; 62
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	cd bf       	out	0x3d, r28	; 61
	for(ii=55;ii>0;ii--)
    3e1e:	87 e3       	ldi	r24, 0x37	; 55
    3e20:	80 93 4d 03 	sts	0x034D, r24
    3e24:	89 c0       	rjmp	.+274    	; 0x3f38 <gripper_close+0x132>
	{
		servo_3(ii);
    3e26:	80 91 4d 03 	lds	r24, 0x034D
    3e2a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	a0 e2       	ldi	r26, 0x20	; 32
    3e34:	b1 e4       	ldi	r27, 0x41	; 65
    3e36:	89 83       	std	Y+1, r24	; 0x01
    3e38:	9a 83       	std	Y+2, r25	; 0x02
    3e3a:	ab 83       	std	Y+3, r26	; 0x03
    3e3c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e3e:	69 81       	ldd	r22, Y+1	; 0x01
    3e40:	7a 81       	ldd	r23, Y+2	; 0x02
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	9c 81       	ldd	r25, Y+4	; 0x04
    3e46:	26 e6       	ldi	r18, 0x66	; 102
    3e48:	36 e6       	ldi	r19, 0x66	; 102
    3e4a:	46 e6       	ldi	r20, 0x66	; 102
    3e4c:	55 e4       	ldi	r21, 0x45	; 69
    3e4e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	8d 83       	std	Y+5, r24	; 0x05
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	af 83       	std	Y+7, r26	; 0x07
    3e5c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3e5e:	11 e0       	ldi	r17, 0x01	; 1
    3e60:	6d 81       	ldd	r22, Y+5	; 0x05
    3e62:	7e 81       	ldd	r23, Y+6	; 0x06
    3e64:	8f 81       	ldd	r24, Y+7	; 0x07
    3e66:	98 85       	ldd	r25, Y+8	; 0x08
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e8       	ldi	r20, 0x80	; 128
    3e6e:	5f e3       	ldi	r21, 0x3F	; 63
    3e70:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    3e74:	88 23       	and	r24, r24
    3e76:	0c f0       	brlt	.+2      	; 0x3e7a <gripper_close+0x74>
    3e78:	10 e0       	ldi	r17, 0x00	; 0
    3e7a:	11 23       	and	r17, r17
    3e7c:	29 f0       	breq	.+10     	; 0x3e88 <gripper_close+0x82>
		__ticks = 1;
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	9a 87       	std	Y+10, r25	; 0x0a
    3e84:	89 87       	std	Y+9, r24	; 0x09
    3e86:	46 c0       	rjmp	.+140    	; 0x3f14 <gripper_close+0x10e>
	else if (__tmp > 65535)
    3e88:	11 e0       	ldi	r17, 0x01	; 1
    3e8a:	6d 81       	ldd	r22, Y+5	; 0x05
    3e8c:	7e 81       	ldd	r23, Y+6	; 0x06
    3e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e90:	98 85       	ldd	r25, Y+8	; 0x08
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	3f ef       	ldi	r19, 0xFF	; 255
    3e96:	4f e7       	ldi	r20, 0x7F	; 127
    3e98:	57 e4       	ldi	r21, 0x47	; 71
    3e9a:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    3e9e:	18 16       	cp	r1, r24
    3ea0:	0c f0       	brlt	.+2      	; 0x3ea4 <gripper_close+0x9e>
    3ea2:	10 e0       	ldi	r17, 0x00	; 0
    3ea4:	11 23       	and	r17, r17
    3ea6:	61 f1       	breq	.+88     	; 0x3f00 <gripper_close+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea8:	69 81       	ldd	r22, Y+1	; 0x01
    3eaa:	7a 81       	ldd	r23, Y+2	; 0x02
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	40 e2       	ldi	r20, 0x20	; 32
    3eb6:	51 e4       	ldi	r21, 0x41	; 65
    3eb8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	9a 87       	std	Y+10, r25	; 0x0a
    3ece:	89 87       	std	Y+9, r24	; 0x09
    3ed0:	12 c0       	rjmp	.+36     	; 0x3ef6 <gripper_close+0xf0>
    3ed2:	80 e7       	ldi	r24, 0x70	; 112
    3ed4:	91 e0       	ldi	r25, 0x01	; 1
    3ed6:	9c 87       	std	Y+12, r25	; 0x0c
    3ed8:	8b 87       	std	Y+11, r24	; 0x0b
    3eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    3edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ede:	8c 01       	movw	r16, r24
    3ee0:	c8 01       	movw	r24, r16
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	f1 f7       	brne	.-4      	; 0x3ee2 <gripper_close+0xdc>
    3ee6:	8c 01       	movw	r16, r24
    3ee8:	1c 87       	std	Y+12, r17	; 0x0c
    3eea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eec:	89 85       	ldd	r24, Y+9	; 0x09
    3eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	9a 87       	std	Y+10, r25	; 0x0a
    3ef4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef6:	89 85       	ldd	r24, Y+9	; 0x09
    3ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	51 f7       	brne	.-44     	; 0x3ed2 <gripper_close+0xcc>
    3efe:	17 c0       	rjmp	.+46     	; 0x3f2e <gripper_close+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f00:	6d 81       	ldd	r22, Y+5	; 0x05
    3f02:	7e 81       	ldd	r23, Y+6	; 0x06
    3f04:	8f 81       	ldd	r24, Y+7	; 0x07
    3f06:	98 85       	ldd	r25, Y+8	; 0x08
    3f08:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	9a 87       	std	Y+10, r25	; 0x0a
    3f12:	89 87       	std	Y+9, r24	; 0x09
    3f14:	89 85       	ldd	r24, Y+9	; 0x09
    3f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f18:	9e 87       	std	Y+14, r25	; 0x0e
    3f1a:	8d 87       	std	Y+13, r24	; 0x0d
    3f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f20:	8c 01       	movw	r16, r24
    3f22:	c8 01       	movw	r24, r16
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <gripper_close+0x11e>
    3f28:	8c 01       	movw	r16, r24
    3f2a:	1e 87       	std	Y+14, r17	; 0x0e
    3f2c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void gripper_close()
{
	for(ii=55;ii>0;ii--)
    3f2e:	80 91 4d 03 	lds	r24, 0x034D
    3f32:	81 50       	subi	r24, 0x01	; 1
    3f34:	80 93 4d 03 	sts	0x034D, r24
    3f38:	80 91 4d 03 	lds	r24, 0x034D
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <gripper_close+0x13c>
    3f40:	72 cf       	rjmp	.-284    	; 0x3e26 <gripper_close+0x20>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	a8 e4       	ldi	r26, 0x48	; 72
    3f48:	b3 e4       	ldi	r27, 0x43	; 67
    3f4a:	8f 87       	std	Y+15, r24	; 0x0f
    3f4c:	98 8b       	std	Y+16, r25	; 0x10
    3f4e:	a9 8b       	std	Y+17, r26	; 0x11
    3f50:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f52:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f54:	78 89       	ldd	r23, Y+16	; 0x10
    3f56:	89 89       	ldd	r24, Y+17	; 0x11
    3f58:	9a 89       	ldd	r25, Y+18	; 0x12
    3f5a:	26 e6       	ldi	r18, 0x66	; 102
    3f5c:	36 e6       	ldi	r19, 0x66	; 102
    3f5e:	46 e6       	ldi	r20, 0x66	; 102
    3f60:	55 e4       	ldi	r21, 0x45	; 69
    3f62:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	8b 8b       	std	Y+19, r24	; 0x13
    3f6c:	9c 8b       	std	Y+20, r25	; 0x14
    3f6e:	ad 8b       	std	Y+21, r26	; 0x15
    3f70:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3f72:	11 e0       	ldi	r17, 0x01	; 1
    3f74:	6b 89       	ldd	r22, Y+19	; 0x13
    3f76:	7c 89       	ldd	r23, Y+20	; 0x14
    3f78:	8d 89       	ldd	r24, Y+21	; 0x15
    3f7a:	9e 89       	ldd	r25, Y+22	; 0x16
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e8       	ldi	r20, 0x80	; 128
    3f82:	5f e3       	ldi	r21, 0x3F	; 63
    3f84:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    3f88:	88 23       	and	r24, r24
    3f8a:	0c f0       	brlt	.+2      	; 0x3f8e <gripper_close+0x188>
    3f8c:	10 e0       	ldi	r17, 0x00	; 0
    3f8e:	11 23       	and	r17, r17
    3f90:	29 f0       	breq	.+10     	; 0x3f9c <gripper_close+0x196>
		__ticks = 1;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	98 8f       	std	Y+24, r25	; 0x18
    3f98:	8f 8b       	std	Y+23, r24	; 0x17
    3f9a:	46 c0       	rjmp	.+140    	; 0x4028 <gripper_close+0x222>
	else if (__tmp > 65535)
    3f9c:	11 e0       	ldi	r17, 0x01	; 1
    3f9e:	6b 89       	ldd	r22, Y+19	; 0x13
    3fa0:	7c 89       	ldd	r23, Y+20	; 0x14
    3fa2:	8d 89       	ldd	r24, Y+21	; 0x15
    3fa4:	9e 89       	ldd	r25, Y+22	; 0x16
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	3f ef       	ldi	r19, 0xFF	; 255
    3faa:	4f e7       	ldi	r20, 0x7F	; 127
    3fac:	57 e4       	ldi	r21, 0x47	; 71
    3fae:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    3fb2:	18 16       	cp	r1, r24
    3fb4:	0c f0       	brlt	.+2      	; 0x3fb8 <gripper_close+0x1b2>
    3fb6:	10 e0       	ldi	r17, 0x00	; 0
    3fb8:	11 23       	and	r17, r17
    3fba:	61 f1       	breq	.+88     	; 0x4014 <gripper_close+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbc:	6f 85       	ldd	r22, Y+15	; 0x0f
    3fbe:	78 89       	ldd	r23, Y+16	; 0x10
    3fc0:	89 89       	ldd	r24, Y+17	; 0x11
    3fc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e2       	ldi	r20, 0x20	; 32
    3fca:	51 e4       	ldi	r21, 0x41	; 65
    3fcc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	98 8f       	std	Y+24, r25	; 0x18
    3fe2:	8f 8b       	std	Y+23, r24	; 0x17
    3fe4:	12 c0       	rjmp	.+36     	; 0x400a <gripper_close+0x204>
    3fe6:	80 e7       	ldi	r24, 0x70	; 112
    3fe8:	91 e0       	ldi	r25, 0x01	; 1
    3fea:	9a 8f       	std	Y+26, r25	; 0x1a
    3fec:	89 8f       	std	Y+25, r24	; 0x19
    3fee:	89 8d       	ldd	r24, Y+25	; 0x19
    3ff0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ff2:	8c 01       	movw	r16, r24
    3ff4:	c8 01       	movw	r24, r16
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <gripper_close+0x1f0>
    3ffa:	8c 01       	movw	r16, r24
    3ffc:	1a 8f       	std	Y+26, r17	; 0x1a
    3ffe:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4000:	8f 89       	ldd	r24, Y+23	; 0x17
    4002:	98 8d       	ldd	r25, Y+24	; 0x18
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	98 8f       	std	Y+24, r25	; 0x18
    4008:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400a:	8f 89       	ldd	r24, Y+23	; 0x17
    400c:	98 8d       	ldd	r25, Y+24	; 0x18
    400e:	00 97       	sbiw	r24, 0x00	; 0
    4010:	51 f7       	brne	.-44     	; 0x3fe6 <gripper_close+0x1e0>
    4012:	17 c0       	rjmp	.+46     	; 0x4042 <gripper_close+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4014:	6b 89       	ldd	r22, Y+19	; 0x13
    4016:	7c 89       	ldd	r23, Y+20	; 0x14
    4018:	8d 89       	ldd	r24, Y+21	; 0x15
    401a:	9e 89       	ldd	r25, Y+22	; 0x16
    401c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	98 8f       	std	Y+24, r25	; 0x18
    4026:	8f 8b       	std	Y+23, r24	; 0x17
    4028:	8f 89       	ldd	r24, Y+23	; 0x17
    402a:	98 8d       	ldd	r25, Y+24	; 0x18
    402c:	9c 8f       	std	Y+28, r25	; 0x1c
    402e:	8b 8f       	std	Y+27, r24	; 0x1b
    4030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4034:	8c 01       	movw	r16, r24
    4036:	c8 01       	movw	r24, r16
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <gripper_close+0x232>
    403c:	8c 01       	movw	r16, r24
    403e:	1c 8f       	std	Y+28, r17	; 0x1c
    4040:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_3(ii);
		_delay_ms(10);
	}
	
	_delay_ms(200);
}
    4042:	6c 96       	adiw	r28, 0x1c	; 28
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	08 95       	ret

00004058 <arm_rotate_left>:

void arm_rotate_left()
{
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
    4064:	6c 97       	sbiw	r28, 0x1c	; 28
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    4070:	8a e5       	ldi	r24, 0x5A	; 90
    4072:	80 93 4d 03 	sts	0x034D, r24
    4076:	89 c0       	rjmp	.+274    	; 0x418a <arm_rotate_left+0x132>
	{
		servo_1(ii);
    4078:	80 91 4d 03 	lds	r24, 0x034D
    407c:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e2       	ldi	r26, 0x20	; 32
    4086:	b1 e4       	ldi	r27, 0x41	; 65
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	ab 83       	std	Y+3, r26	; 0x03
    408e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4090:	69 81       	ldd	r22, Y+1	; 0x01
    4092:	7a 81       	ldd	r23, Y+2	; 0x02
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	26 e6       	ldi	r18, 0x66	; 102
    409a:	36 e6       	ldi	r19, 0x66	; 102
    409c:	46 e6       	ldi	r20, 0x66	; 102
    409e:	55 e4       	ldi	r21, 0x45	; 69
    40a0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	8d 83       	std	Y+5, r24	; 0x05
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    40ac:	af 83       	std	Y+7, r26	; 0x07
    40ae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    40b0:	11 e0       	ldi	r17, 0x01	; 1
    40b2:	6d 81       	ldd	r22, Y+5	; 0x05
    40b4:	7e 81       	ldd	r23, Y+6	; 0x06
    40b6:	8f 81       	ldd	r24, Y+7	; 0x07
    40b8:	98 85       	ldd	r25, Y+8	; 0x08
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    40c6:	88 23       	and	r24, r24
    40c8:	0c f0       	brlt	.+2      	; 0x40cc <arm_rotate_left+0x74>
    40ca:	10 e0       	ldi	r17, 0x00	; 0
    40cc:	11 23       	and	r17, r17
    40ce:	29 f0       	breq	.+10     	; 0x40da <arm_rotate_left+0x82>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9a 87       	std	Y+10, r25	; 0x0a
    40d6:	89 87       	std	Y+9, r24	; 0x09
    40d8:	46 c0       	rjmp	.+140    	; 0x4166 <arm_rotate_left+0x10e>
	else if (__tmp > 65535)
    40da:	11 e0       	ldi	r17, 0x01	; 1
    40dc:	6d 81       	ldd	r22, Y+5	; 0x05
    40de:	7e 81       	ldd	r23, Y+6	; 0x06
    40e0:	8f 81       	ldd	r24, Y+7	; 0x07
    40e2:	98 85       	ldd	r25, Y+8	; 0x08
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	3f ef       	ldi	r19, 0xFF	; 255
    40e8:	4f e7       	ldi	r20, 0x7F	; 127
    40ea:	57 e4       	ldi	r21, 0x47	; 71
    40ec:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    40f0:	18 16       	cp	r1, r24
    40f2:	0c f0       	brlt	.+2      	; 0x40f6 <arm_rotate_left+0x9e>
    40f4:	10 e0       	ldi	r17, 0x00	; 0
    40f6:	11 23       	and	r17, r17
    40f8:	61 f1       	breq	.+88     	; 0x4152 <arm_rotate_left+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40fa:	69 81       	ldd	r22, Y+1	; 0x01
    40fc:	7a 81       	ldd	r23, Y+2	; 0x02
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	9c 81       	ldd	r25, Y+4	; 0x04
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e2       	ldi	r20, 0x20	; 32
    4108:	51 e4       	ldi	r21, 0x41	; 65
    410a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	9a 87       	std	Y+10, r25	; 0x0a
    4120:	89 87       	std	Y+9, r24	; 0x09
    4122:	12 c0       	rjmp	.+36     	; 0x4148 <arm_rotate_left+0xf0>
    4124:	80 e7       	ldi	r24, 0x70	; 112
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	9c 87       	std	Y+12, r25	; 0x0c
    412a:	8b 87       	std	Y+11, r24	; 0x0b
    412c:	8b 85       	ldd	r24, Y+11	; 0x0b
    412e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4130:	8c 01       	movw	r16, r24
    4132:	c8 01       	movw	r24, r16
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	f1 f7       	brne	.-4      	; 0x4134 <arm_rotate_left+0xdc>
    4138:	8c 01       	movw	r16, r24
    413a:	1c 87       	std	Y+12, r17	; 0x0c
    413c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    413e:	89 85       	ldd	r24, Y+9	; 0x09
    4140:	9a 85       	ldd	r25, Y+10	; 0x0a
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	9a 87       	std	Y+10, r25	; 0x0a
    4146:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4148:	89 85       	ldd	r24, Y+9	; 0x09
    414a:	9a 85       	ldd	r25, Y+10	; 0x0a
    414c:	00 97       	sbiw	r24, 0x00	; 0
    414e:	51 f7       	brne	.-44     	; 0x4124 <arm_rotate_left+0xcc>
    4150:	17 c0       	rjmp	.+46     	; 0x4180 <arm_rotate_left+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4152:	6d 81       	ldd	r22, Y+5	; 0x05
    4154:	7e 81       	ldd	r23, Y+6	; 0x06
    4156:	8f 81       	ldd	r24, Y+7	; 0x07
    4158:	98 85       	ldd	r25, Y+8	; 0x08
    415a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	9a 87       	std	Y+10, r25	; 0x0a
    4164:	89 87       	std	Y+9, r24	; 0x09
    4166:	89 85       	ldd	r24, Y+9	; 0x09
    4168:	9a 85       	ldd	r25, Y+10	; 0x0a
    416a:	9e 87       	std	Y+14, r25	; 0x0e
    416c:	8d 87       	std	Y+13, r24	; 0x0d
    416e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4170:	9e 85       	ldd	r25, Y+14	; 0x0e
    4172:	8c 01       	movw	r16, r24
    4174:	c8 01       	movw	r24, r16
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <arm_rotate_left+0x11e>
    417a:	8c 01       	movw	r16, r24
    417c:	1e 87       	std	Y+14, r17	; 0x0e
    417e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void arm_rotate_left()
{
	for(ii=90;ii>0;ii--)
    4180:	80 91 4d 03 	lds	r24, 0x034D
    4184:	81 50       	subi	r24, 0x01	; 1
    4186:	80 93 4d 03 	sts	0x034D, r24
    418a:	80 91 4d 03 	lds	r24, 0x034D
    418e:	88 23       	and	r24, r24
    4190:	09 f0       	breq	.+2      	; 0x4194 <arm_rotate_left+0x13c>
    4192:	72 cf       	rjmp	.-284    	; 0x4078 <arm_rotate_left+0x20>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	a6 e9       	ldi	r26, 0x96	; 150
    419a:	b3 e4       	ldi	r27, 0x43	; 67
    419c:	8f 87       	std	Y+15, r24	; 0x0f
    419e:	98 8b       	std	Y+16, r25	; 0x10
    41a0:	a9 8b       	std	Y+17, r26	; 0x11
    41a2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    41a6:	78 89       	ldd	r23, Y+16	; 0x10
    41a8:	89 89       	ldd	r24, Y+17	; 0x11
    41aa:	9a 89       	ldd	r25, Y+18	; 0x12
    41ac:	26 e6       	ldi	r18, 0x66	; 102
    41ae:	36 e6       	ldi	r19, 0x66	; 102
    41b0:	46 e6       	ldi	r20, 0x66	; 102
    41b2:	55 e4       	ldi	r21, 0x45	; 69
    41b4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	8b 8b       	std	Y+19, r24	; 0x13
    41be:	9c 8b       	std	Y+20, r25	; 0x14
    41c0:	ad 8b       	std	Y+21, r26	; 0x15
    41c2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    41c4:	11 e0       	ldi	r17, 0x01	; 1
    41c6:	6b 89       	ldd	r22, Y+19	; 0x13
    41c8:	7c 89       	ldd	r23, Y+20	; 0x14
    41ca:	8d 89       	ldd	r24, Y+21	; 0x15
    41cc:	9e 89       	ldd	r25, Y+22	; 0x16
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	40 e8       	ldi	r20, 0x80	; 128
    41d4:	5f e3       	ldi	r21, 0x3F	; 63
    41d6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    41da:	88 23       	and	r24, r24
    41dc:	0c f0       	brlt	.+2      	; 0x41e0 <arm_rotate_left+0x188>
    41de:	10 e0       	ldi	r17, 0x00	; 0
    41e0:	11 23       	and	r17, r17
    41e2:	29 f0       	breq	.+10     	; 0x41ee <arm_rotate_left+0x196>
		__ticks = 1;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	98 8f       	std	Y+24, r25	; 0x18
    41ea:	8f 8b       	std	Y+23, r24	; 0x17
    41ec:	46 c0       	rjmp	.+140    	; 0x427a <arm_rotate_left+0x222>
	else if (__tmp > 65535)
    41ee:	11 e0       	ldi	r17, 0x01	; 1
    41f0:	6b 89       	ldd	r22, Y+19	; 0x13
    41f2:	7c 89       	ldd	r23, Y+20	; 0x14
    41f4:	8d 89       	ldd	r24, Y+21	; 0x15
    41f6:	9e 89       	ldd	r25, Y+22	; 0x16
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	3f ef       	ldi	r19, 0xFF	; 255
    41fc:	4f e7       	ldi	r20, 0x7F	; 127
    41fe:	57 e4       	ldi	r21, 0x47	; 71
    4200:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4204:	18 16       	cp	r1, r24
    4206:	0c f0       	brlt	.+2      	; 0x420a <arm_rotate_left+0x1b2>
    4208:	10 e0       	ldi	r17, 0x00	; 0
    420a:	11 23       	and	r17, r17
    420c:	61 f1       	breq	.+88     	; 0x4266 <arm_rotate_left+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4210:	78 89       	ldd	r23, Y+16	; 0x10
    4212:	89 89       	ldd	r24, Y+17	; 0x11
    4214:	9a 89       	ldd	r25, Y+18	; 0x12
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e2       	ldi	r20, 0x20	; 32
    421c:	51 e4       	ldi	r21, 0x41	; 65
    421e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	bc 01       	movw	r22, r24
    4228:	cd 01       	movw	r24, r26
    422a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	98 8f       	std	Y+24, r25	; 0x18
    4234:	8f 8b       	std	Y+23, r24	; 0x17
    4236:	12 c0       	rjmp	.+36     	; 0x425c <arm_rotate_left+0x204>
    4238:	80 e7       	ldi	r24, 0x70	; 112
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	9a 8f       	std	Y+26, r25	; 0x1a
    423e:	89 8f       	std	Y+25, r24	; 0x19
    4240:	89 8d       	ldd	r24, Y+25	; 0x19
    4242:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4244:	8c 01       	movw	r16, r24
    4246:	c8 01       	movw	r24, r16
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	f1 f7       	brne	.-4      	; 0x4248 <arm_rotate_left+0x1f0>
    424c:	8c 01       	movw	r16, r24
    424e:	1a 8f       	std	Y+26, r17	; 0x1a
    4250:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4252:	8f 89       	ldd	r24, Y+23	; 0x17
    4254:	98 8d       	ldd	r25, Y+24	; 0x18
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	98 8f       	std	Y+24, r25	; 0x18
    425a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425c:	8f 89       	ldd	r24, Y+23	; 0x17
    425e:	98 8d       	ldd	r25, Y+24	; 0x18
    4260:	00 97       	sbiw	r24, 0x00	; 0
    4262:	51 f7       	brne	.-44     	; 0x4238 <arm_rotate_left+0x1e0>
    4264:	17 c0       	rjmp	.+46     	; 0x4294 <arm_rotate_left+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4266:	6b 89       	ldd	r22, Y+19	; 0x13
    4268:	7c 89       	ldd	r23, Y+20	; 0x14
    426a:	8d 89       	ldd	r24, Y+21	; 0x15
    426c:	9e 89       	ldd	r25, Y+22	; 0x16
    426e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	98 8f       	std	Y+24, r25	; 0x18
    4278:	8f 8b       	std	Y+23, r24	; 0x17
    427a:	8f 89       	ldd	r24, Y+23	; 0x17
    427c:	98 8d       	ldd	r25, Y+24	; 0x18
    427e:	9c 8f       	std	Y+28, r25	; 0x1c
    4280:	8b 8f       	std	Y+27, r24	; 0x1b
    4282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4286:	8c 01       	movw	r16, r24
    4288:	c8 01       	movw	r24, r16
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	f1 f7       	brne	.-4      	; 0x428a <arm_rotate_left+0x232>
    428e:	8c 01       	movw	r16, r24
    4290:	1c 8f       	std	Y+28, r17	; 0x1c
    4292:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4294:	6c 96       	adiw	r28, 0x1c	; 28
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	08 95       	ret

000042aa <arm_rotate_right>:

void arm_rotate_right()
{
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	6c 97       	sbiw	r28, 0x1c	; 28
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii<180;ii++)
    42c2:	8a e5       	ldi	r24, 0x5A	; 90
    42c4:	80 93 4d 03 	sts	0x034D, r24
    42c8:	89 c0       	rjmp	.+274    	; 0x43dc <arm_rotate_right+0x132>
	{
		servo_1(ii);
    42ca:	80 91 4d 03 	lds	r24, 0x034D
    42ce:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a0 e2       	ldi	r26, 0x20	; 32
    42d8:	b1 e4       	ldi	r27, 0x41	; 65
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	9a 83       	std	Y+2, r25	; 0x02
    42de:	ab 83       	std	Y+3, r26	; 0x03
    42e0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42e2:	69 81       	ldd	r22, Y+1	; 0x01
    42e4:	7a 81       	ldd	r23, Y+2	; 0x02
    42e6:	8b 81       	ldd	r24, Y+3	; 0x03
    42e8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ea:	26 e6       	ldi	r18, 0x66	; 102
    42ec:	36 e6       	ldi	r19, 0x66	; 102
    42ee:	46 e6       	ldi	r20, 0x66	; 102
    42f0:	55 e4       	ldi	r21, 0x45	; 69
    42f2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	8d 83       	std	Y+5, r24	; 0x05
    42fc:	9e 83       	std	Y+6, r25	; 0x06
    42fe:	af 83       	std	Y+7, r26	; 0x07
    4300:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4302:	11 e0       	ldi	r17, 0x01	; 1
    4304:	6d 81       	ldd	r22, Y+5	; 0x05
    4306:	7e 81       	ldd	r23, Y+6	; 0x06
    4308:	8f 81       	ldd	r24, Y+7	; 0x07
    430a:	98 85       	ldd	r25, Y+8	; 0x08
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e8       	ldi	r20, 0x80	; 128
    4312:	5f e3       	ldi	r21, 0x3F	; 63
    4314:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4318:	88 23       	and	r24, r24
    431a:	0c f0       	brlt	.+2      	; 0x431e <arm_rotate_right+0x74>
    431c:	10 e0       	ldi	r17, 0x00	; 0
    431e:	11 23       	and	r17, r17
    4320:	29 f0       	breq	.+10     	; 0x432c <arm_rotate_right+0x82>
		__ticks = 1;
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	9a 87       	std	Y+10, r25	; 0x0a
    4328:	89 87       	std	Y+9, r24	; 0x09
    432a:	46 c0       	rjmp	.+140    	; 0x43b8 <arm_rotate_right+0x10e>
	else if (__tmp > 65535)
    432c:	11 e0       	ldi	r17, 0x01	; 1
    432e:	6d 81       	ldd	r22, Y+5	; 0x05
    4330:	7e 81       	ldd	r23, Y+6	; 0x06
    4332:	8f 81       	ldd	r24, Y+7	; 0x07
    4334:	98 85       	ldd	r25, Y+8	; 0x08
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	3f ef       	ldi	r19, 0xFF	; 255
    433a:	4f e7       	ldi	r20, 0x7F	; 127
    433c:	57 e4       	ldi	r21, 0x47	; 71
    433e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4342:	18 16       	cp	r1, r24
    4344:	0c f0       	brlt	.+2      	; 0x4348 <arm_rotate_right+0x9e>
    4346:	10 e0       	ldi	r17, 0x00	; 0
    4348:	11 23       	and	r17, r17
    434a:	61 f1       	breq	.+88     	; 0x43a4 <arm_rotate_right+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434c:	69 81       	ldd	r22, Y+1	; 0x01
    434e:	7a 81       	ldd	r23, Y+2	; 0x02
    4350:	8b 81       	ldd	r24, Y+3	; 0x03
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e2       	ldi	r20, 0x20	; 32
    435a:	51 e4       	ldi	r21, 0x41	; 65
    435c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	bc 01       	movw	r22, r24
    4366:	cd 01       	movw	r24, r26
    4368:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	9a 87       	std	Y+10, r25	; 0x0a
    4372:	89 87       	std	Y+9, r24	; 0x09
    4374:	12 c0       	rjmp	.+36     	; 0x439a <arm_rotate_right+0xf0>
    4376:	80 e7       	ldi	r24, 0x70	; 112
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	9c 87       	std	Y+12, r25	; 0x0c
    437c:	8b 87       	std	Y+11, r24	; 0x0b
    437e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4380:	9c 85       	ldd	r25, Y+12	; 0x0c
    4382:	8c 01       	movw	r16, r24
    4384:	c8 01       	movw	r24, r16
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <arm_rotate_right+0xdc>
    438a:	8c 01       	movw	r16, r24
    438c:	1c 87       	std	Y+12, r17	; 0x0c
    438e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	9a 87       	std	Y+10, r25	; 0x0a
    4398:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439a:	89 85       	ldd	r24, Y+9	; 0x09
    439c:	9a 85       	ldd	r25, Y+10	; 0x0a
    439e:	00 97       	sbiw	r24, 0x00	; 0
    43a0:	51 f7       	brne	.-44     	; 0x4376 <arm_rotate_right+0xcc>
    43a2:	17 c0       	rjmp	.+46     	; 0x43d2 <arm_rotate_right+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a4:	6d 81       	ldd	r22, Y+5	; 0x05
    43a6:	7e 81       	ldd	r23, Y+6	; 0x06
    43a8:	8f 81       	ldd	r24, Y+7	; 0x07
    43aa:	98 85       	ldd	r25, Y+8	; 0x08
    43ac:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	9a 87       	std	Y+10, r25	; 0x0a
    43b6:	89 87       	std	Y+9, r24	; 0x09
    43b8:	89 85       	ldd	r24, Y+9	; 0x09
    43ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    43bc:	9e 87       	std	Y+14, r25	; 0x0e
    43be:	8d 87       	std	Y+13, r24	; 0x0d
    43c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c4:	8c 01       	movw	r16, r24
    43c6:	c8 01       	movw	r24, r16
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <arm_rotate_right+0x11e>
    43cc:	8c 01       	movw	r16, r24
    43ce:	1e 87       	std	Y+14, r17	; 0x0e
    43d0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_rotate_right()
{
	for(ii=90;ii<180;ii++)
    43d2:	80 91 4d 03 	lds	r24, 0x034D
    43d6:	8f 5f       	subi	r24, 0xFF	; 255
    43d8:	80 93 4d 03 	sts	0x034D, r24
    43dc:	80 91 4d 03 	lds	r24, 0x034D
    43e0:	84 3b       	cpi	r24, 0xB4	; 180
    43e2:	08 f4       	brcc	.+2      	; 0x43e6 <arm_rotate_right+0x13c>
    43e4:	72 cf       	rjmp	.-284    	; 0x42ca <arm_rotate_right+0x20>
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	a6 e9       	ldi	r26, 0x96	; 150
    43ec:	b3 e4       	ldi	r27, 0x43	; 67
    43ee:	8f 87       	std	Y+15, r24	; 0x0f
    43f0:	98 8b       	std	Y+16, r25	; 0x10
    43f2:	a9 8b       	std	Y+17, r26	; 0x11
    43f4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    43f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    43f8:	78 89       	ldd	r23, Y+16	; 0x10
    43fa:	89 89       	ldd	r24, Y+17	; 0x11
    43fc:	9a 89       	ldd	r25, Y+18	; 0x12
    43fe:	26 e6       	ldi	r18, 0x66	; 102
    4400:	36 e6       	ldi	r19, 0x66	; 102
    4402:	46 e6       	ldi	r20, 0x66	; 102
    4404:	55 e4       	ldi	r21, 0x45	; 69
    4406:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	8b 8b       	std	Y+19, r24	; 0x13
    4410:	9c 8b       	std	Y+20, r25	; 0x14
    4412:	ad 8b       	std	Y+21, r26	; 0x15
    4414:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4416:	11 e0       	ldi	r17, 0x01	; 1
    4418:	6b 89       	ldd	r22, Y+19	; 0x13
    441a:	7c 89       	ldd	r23, Y+20	; 0x14
    441c:	8d 89       	ldd	r24, Y+21	; 0x15
    441e:	9e 89       	ldd	r25, Y+22	; 0x16
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e8       	ldi	r20, 0x80	; 128
    4426:	5f e3       	ldi	r21, 0x3F	; 63
    4428:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    442c:	88 23       	and	r24, r24
    442e:	0c f0       	brlt	.+2      	; 0x4432 <arm_rotate_right+0x188>
    4430:	10 e0       	ldi	r17, 0x00	; 0
    4432:	11 23       	and	r17, r17
    4434:	29 f0       	breq	.+10     	; 0x4440 <arm_rotate_right+0x196>
		__ticks = 1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	98 8f       	std	Y+24, r25	; 0x18
    443c:	8f 8b       	std	Y+23, r24	; 0x17
    443e:	46 c0       	rjmp	.+140    	; 0x44cc <arm_rotate_right+0x222>
	else if (__tmp > 65535)
    4440:	11 e0       	ldi	r17, 0x01	; 1
    4442:	6b 89       	ldd	r22, Y+19	; 0x13
    4444:	7c 89       	ldd	r23, Y+20	; 0x14
    4446:	8d 89       	ldd	r24, Y+21	; 0x15
    4448:	9e 89       	ldd	r25, Y+22	; 0x16
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	3f ef       	ldi	r19, 0xFF	; 255
    444e:	4f e7       	ldi	r20, 0x7F	; 127
    4450:	57 e4       	ldi	r21, 0x47	; 71
    4452:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4456:	18 16       	cp	r1, r24
    4458:	0c f0       	brlt	.+2      	; 0x445c <arm_rotate_right+0x1b2>
    445a:	10 e0       	ldi	r17, 0x00	; 0
    445c:	11 23       	and	r17, r17
    445e:	61 f1       	breq	.+88     	; 0x44b8 <arm_rotate_right+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4460:	6f 85       	ldd	r22, Y+15	; 0x0f
    4462:	78 89       	ldd	r23, Y+16	; 0x10
    4464:	89 89       	ldd	r24, Y+17	; 0x11
    4466:	9a 89       	ldd	r25, Y+18	; 0x12
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	bc 01       	movw	r22, r24
    447a:	cd 01       	movw	r24, r26
    447c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	98 8f       	std	Y+24, r25	; 0x18
    4486:	8f 8b       	std	Y+23, r24	; 0x17
    4488:	12 c0       	rjmp	.+36     	; 0x44ae <arm_rotate_right+0x204>
    448a:	80 e7       	ldi	r24, 0x70	; 112
    448c:	91 e0       	ldi	r25, 0x01	; 1
    448e:	9a 8f       	std	Y+26, r25	; 0x1a
    4490:	89 8f       	std	Y+25, r24	; 0x19
    4492:	89 8d       	ldd	r24, Y+25	; 0x19
    4494:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4496:	8c 01       	movw	r16, r24
    4498:	c8 01       	movw	r24, r16
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <arm_rotate_right+0x1f0>
    449e:	8c 01       	movw	r16, r24
    44a0:	1a 8f       	std	Y+26, r17	; 0x1a
    44a2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a4:	8f 89       	ldd	r24, Y+23	; 0x17
    44a6:	98 8d       	ldd	r25, Y+24	; 0x18
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	98 8f       	std	Y+24, r25	; 0x18
    44ac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ae:	8f 89       	ldd	r24, Y+23	; 0x17
    44b0:	98 8d       	ldd	r25, Y+24	; 0x18
    44b2:	00 97       	sbiw	r24, 0x00	; 0
    44b4:	51 f7       	brne	.-44     	; 0x448a <arm_rotate_right+0x1e0>
    44b6:	17 c0       	rjmp	.+46     	; 0x44e6 <arm_rotate_right+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b8:	6b 89       	ldd	r22, Y+19	; 0x13
    44ba:	7c 89       	ldd	r23, Y+20	; 0x14
    44bc:	8d 89       	ldd	r24, Y+21	; 0x15
    44be:	9e 89       	ldd	r25, Y+22	; 0x16
    44c0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    44c4:	dc 01       	movw	r26, r24
    44c6:	cb 01       	movw	r24, r22
    44c8:	98 8f       	std	Y+24, r25	; 0x18
    44ca:	8f 8b       	std	Y+23, r24	; 0x17
    44cc:	8f 89       	ldd	r24, Y+23	; 0x17
    44ce:	98 8d       	ldd	r25, Y+24	; 0x18
    44d0:	9c 8f       	std	Y+28, r25	; 0x1c
    44d2:	8b 8f       	std	Y+27, r24	; 0x1b
    44d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d8:	8c 01       	movw	r16, r24
    44da:	c8 01       	movw	r24, r16
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	f1 f7       	brne	.-4      	; 0x44dc <arm_rotate_right+0x232>
    44e0:	8c 01       	movw	r16, r24
    44e2:	1c 8f       	std	Y+28, r17	; 0x1c
    44e4:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    44e6:	6c 96       	adiw	r28, 0x1c	; 28
    44e8:	0f b6       	in	r0, 0x3f	; 63
    44ea:	f8 94       	cli
    44ec:	de bf       	out	0x3e, r29	; 62
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	cd bf       	out	0x3d, r28	; 61
    44f2:	df 91       	pop	r29
    44f4:	cf 91       	pop	r28
    44f6:	1f 91       	pop	r17
    44f8:	0f 91       	pop	r16
    44fa:	08 95       	ret

000044fc <arm_straight>:
void arm_straight()
{
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
    4508:	6c 97       	sbiw	r28, 0x1c	; 28
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	f8 94       	cli
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    4514:	10 92 4d 03 	sts	0x034D, r1
    4518:	89 c0       	rjmp	.+274    	; 0x462c <arm_straight+0x130>
	{
		servo_1(ii);
    451a:	80 91 4d 03 	lds	r24, 0x034D
    451e:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	a0 e2       	ldi	r26, 0x20	; 32
    4528:	b1 e4       	ldi	r27, 0x41	; 65
    452a:	89 83       	std	Y+1, r24	; 0x01
    452c:	9a 83       	std	Y+2, r25	; 0x02
    452e:	ab 83       	std	Y+3, r26	; 0x03
    4530:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4532:	69 81       	ldd	r22, Y+1	; 0x01
    4534:	7a 81       	ldd	r23, Y+2	; 0x02
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	26 e6       	ldi	r18, 0x66	; 102
    453c:	36 e6       	ldi	r19, 0x66	; 102
    453e:	46 e6       	ldi	r20, 0x66	; 102
    4540:	55 e4       	ldi	r21, 0x45	; 69
    4542:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	9e 83       	std	Y+6, r25	; 0x06
    454e:	af 83       	std	Y+7, r26	; 0x07
    4550:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4552:	11 e0       	ldi	r17, 0x01	; 1
    4554:	6d 81       	ldd	r22, Y+5	; 0x05
    4556:	7e 81       	ldd	r23, Y+6	; 0x06
    4558:	8f 81       	ldd	r24, Y+7	; 0x07
    455a:	98 85       	ldd	r25, Y+8	; 0x08
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e8       	ldi	r20, 0x80	; 128
    4562:	5f e3       	ldi	r21, 0x3F	; 63
    4564:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4568:	88 23       	and	r24, r24
    456a:	0c f0       	brlt	.+2      	; 0x456e <arm_straight+0x72>
    456c:	10 e0       	ldi	r17, 0x00	; 0
    456e:	11 23       	and	r17, r17
    4570:	29 f0       	breq	.+10     	; 0x457c <arm_straight+0x80>
		__ticks = 1;
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	9a 87       	std	Y+10, r25	; 0x0a
    4578:	89 87       	std	Y+9, r24	; 0x09
    457a:	46 c0       	rjmp	.+140    	; 0x4608 <arm_straight+0x10c>
	else if (__tmp > 65535)
    457c:	11 e0       	ldi	r17, 0x01	; 1
    457e:	6d 81       	ldd	r22, Y+5	; 0x05
    4580:	7e 81       	ldd	r23, Y+6	; 0x06
    4582:	8f 81       	ldd	r24, Y+7	; 0x07
    4584:	98 85       	ldd	r25, Y+8	; 0x08
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	3f ef       	ldi	r19, 0xFF	; 255
    458a:	4f e7       	ldi	r20, 0x7F	; 127
    458c:	57 e4       	ldi	r21, 0x47	; 71
    458e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4592:	18 16       	cp	r1, r24
    4594:	0c f0       	brlt	.+2      	; 0x4598 <arm_straight+0x9c>
    4596:	10 e0       	ldi	r17, 0x00	; 0
    4598:	11 23       	and	r17, r17
    459a:	61 f1       	breq	.+88     	; 0x45f4 <arm_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459c:	69 81       	ldd	r22, Y+1	; 0x01
    459e:	7a 81       	ldd	r23, Y+2	; 0x02
    45a0:	8b 81       	ldd	r24, Y+3	; 0x03
    45a2:	9c 81       	ldd	r25, Y+4	; 0x04
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	9a 87       	std	Y+10, r25	; 0x0a
    45c2:	89 87       	std	Y+9, r24	; 0x09
    45c4:	12 c0       	rjmp	.+36     	; 0x45ea <arm_straight+0xee>
    45c6:	80 e7       	ldi	r24, 0x70	; 112
    45c8:	91 e0       	ldi	r25, 0x01	; 1
    45ca:	9c 87       	std	Y+12, r25	; 0x0c
    45cc:	8b 87       	std	Y+11, r24	; 0x0b
    45ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    45d2:	8c 01       	movw	r16, r24
    45d4:	c8 01       	movw	r24, r16
    45d6:	01 97       	sbiw	r24, 0x01	; 1
    45d8:	f1 f7       	brne	.-4      	; 0x45d6 <arm_straight+0xda>
    45da:	8c 01       	movw	r16, r24
    45dc:	1c 87       	std	Y+12, r17	; 0x0c
    45de:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e0:	89 85       	ldd	r24, Y+9	; 0x09
    45e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9a 87       	std	Y+10, r25	; 0x0a
    45e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	51 f7       	brne	.-44     	; 0x45c6 <arm_straight+0xca>
    45f2:	17 c0       	rjmp	.+46     	; 0x4622 <arm_straight+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	6d 81       	ldd	r22, Y+5	; 0x05
    45f6:	7e 81       	ldd	r23, Y+6	; 0x06
    45f8:	8f 81       	ldd	r24, Y+7	; 0x07
    45fa:	98 85       	ldd	r25, Y+8	; 0x08
    45fc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9a 87       	std	Y+10, r25	; 0x0a
    4606:	89 87       	std	Y+9, r24	; 0x09
    4608:	89 85       	ldd	r24, Y+9	; 0x09
    460a:	9a 85       	ldd	r25, Y+10	; 0x0a
    460c:	9e 87       	std	Y+14, r25	; 0x0e
    460e:	8d 87       	std	Y+13, r24	; 0x0d
    4610:	8d 85       	ldd	r24, Y+13	; 0x0d
    4612:	9e 85       	ldd	r25, Y+14	; 0x0e
    4614:	8c 01       	movw	r16, r24
    4616:	c8 01       	movw	r24, r16
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	f1 f7       	brne	.-4      	; 0x4618 <arm_straight+0x11c>
    461c:	8c 01       	movw	r16, r24
    461e:	1e 87       	std	Y+14, r17	; 0x0e
    4620:	0d 87       	std	Y+13, r16	; 0x0d
	}
	_delay_ms(300);
}
void arm_straight()
{
	for(ii=0;ii<90;ii++)
    4622:	80 91 4d 03 	lds	r24, 0x034D
    4626:	8f 5f       	subi	r24, 0xFF	; 255
    4628:	80 93 4d 03 	sts	0x034D, r24
    462c:	80 91 4d 03 	lds	r24, 0x034D
    4630:	8a 35       	cpi	r24, 0x5A	; 90
    4632:	08 f4       	brcc	.+2      	; 0x4636 <arm_straight+0x13a>
    4634:	72 cf       	rjmp	.-284    	; 0x451a <arm_straight+0x1e>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	a6 e9       	ldi	r26, 0x96	; 150
    463c:	b3 e4       	ldi	r27, 0x43	; 67
    463e:	8f 87       	std	Y+15, r24	; 0x0f
    4640:	98 8b       	std	Y+16, r25	; 0x10
    4642:	a9 8b       	std	Y+17, r26	; 0x11
    4644:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4646:	6f 85       	ldd	r22, Y+15	; 0x0f
    4648:	78 89       	ldd	r23, Y+16	; 0x10
    464a:	89 89       	ldd	r24, Y+17	; 0x11
    464c:	9a 89       	ldd	r25, Y+18	; 0x12
    464e:	26 e6       	ldi	r18, 0x66	; 102
    4650:	36 e6       	ldi	r19, 0x66	; 102
    4652:	46 e6       	ldi	r20, 0x66	; 102
    4654:	55 e4       	ldi	r21, 0x45	; 69
    4656:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	8b 8b       	std	Y+19, r24	; 0x13
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	ad 8b       	std	Y+21, r26	; 0x15
    4664:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4666:	11 e0       	ldi	r17, 0x01	; 1
    4668:	6b 89       	ldd	r22, Y+19	; 0x13
    466a:	7c 89       	ldd	r23, Y+20	; 0x14
    466c:	8d 89       	ldd	r24, Y+21	; 0x15
    466e:	9e 89       	ldd	r25, Y+22	; 0x16
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e8       	ldi	r20, 0x80	; 128
    4676:	5f e3       	ldi	r21, 0x3F	; 63
    4678:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    467c:	88 23       	and	r24, r24
    467e:	0c f0       	brlt	.+2      	; 0x4682 <arm_straight+0x186>
    4680:	10 e0       	ldi	r17, 0x00	; 0
    4682:	11 23       	and	r17, r17
    4684:	29 f0       	breq	.+10     	; 0x4690 <arm_straight+0x194>
		__ticks = 1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	98 8f       	std	Y+24, r25	; 0x18
    468c:	8f 8b       	std	Y+23, r24	; 0x17
    468e:	46 c0       	rjmp	.+140    	; 0x471c <arm_straight+0x220>
	else if (__tmp > 65535)
    4690:	11 e0       	ldi	r17, 0x01	; 1
    4692:	6b 89       	ldd	r22, Y+19	; 0x13
    4694:	7c 89       	ldd	r23, Y+20	; 0x14
    4696:	8d 89       	ldd	r24, Y+21	; 0x15
    4698:	9e 89       	ldd	r25, Y+22	; 0x16
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	3f ef       	ldi	r19, 0xFF	; 255
    469e:	4f e7       	ldi	r20, 0x7F	; 127
    46a0:	57 e4       	ldi	r21, 0x47	; 71
    46a2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    46a6:	18 16       	cp	r1, r24
    46a8:	0c f0       	brlt	.+2      	; 0x46ac <arm_straight+0x1b0>
    46aa:	10 e0       	ldi	r17, 0x00	; 0
    46ac:	11 23       	and	r17, r17
    46ae:	61 f1       	breq	.+88     	; 0x4708 <arm_straight+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    46b2:	78 89       	ldd	r23, Y+16	; 0x10
    46b4:	89 89       	ldd	r24, Y+17	; 0x11
    46b6:	9a 89       	ldd	r25, Y+18	; 0x12
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e2       	ldi	r20, 0x20	; 32
    46be:	51 e4       	ldi	r21, 0x41	; 65
    46c0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	bc 01       	movw	r22, r24
    46ca:	cd 01       	movw	r24, r26
    46cc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	98 8f       	std	Y+24, r25	; 0x18
    46d6:	8f 8b       	std	Y+23, r24	; 0x17
    46d8:	12 c0       	rjmp	.+36     	; 0x46fe <arm_straight+0x202>
    46da:	80 e7       	ldi	r24, 0x70	; 112
    46dc:	91 e0       	ldi	r25, 0x01	; 1
    46de:	9a 8f       	std	Y+26, r25	; 0x1a
    46e0:	89 8f       	std	Y+25, r24	; 0x19
    46e2:	89 8d       	ldd	r24, Y+25	; 0x19
    46e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46e6:	8c 01       	movw	r16, r24
    46e8:	c8 01       	movw	r24, r16
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <arm_straight+0x1ee>
    46ee:	8c 01       	movw	r16, r24
    46f0:	1a 8f       	std	Y+26, r17	; 0x1a
    46f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f4:	8f 89       	ldd	r24, Y+23	; 0x17
    46f6:	98 8d       	ldd	r25, Y+24	; 0x18
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	98 8f       	std	Y+24, r25	; 0x18
    46fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4700:	98 8d       	ldd	r25, Y+24	; 0x18
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	51 f7       	brne	.-44     	; 0x46da <arm_straight+0x1de>
    4706:	17 c0       	rjmp	.+46     	; 0x4736 <arm_straight+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	6b 89       	ldd	r22, Y+19	; 0x13
    470a:	7c 89       	ldd	r23, Y+20	; 0x14
    470c:	8d 89       	ldd	r24, Y+21	; 0x15
    470e:	9e 89       	ldd	r25, Y+22	; 0x16
    4710:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	98 8f       	std	Y+24, r25	; 0x18
    471a:	8f 8b       	std	Y+23, r24	; 0x17
    471c:	8f 89       	ldd	r24, Y+23	; 0x17
    471e:	98 8d       	ldd	r25, Y+24	; 0x18
    4720:	9c 8f       	std	Y+28, r25	; 0x1c
    4722:	8b 8f       	std	Y+27, r24	; 0x1b
    4724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4728:	8c 01       	movw	r16, r24
    472a:	c8 01       	movw	r24, r16
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <arm_straight+0x230>
    4730:	8c 01       	movw	r16, r24
    4732:	1c 8f       	std	Y+28, r17	; 0x1c
    4734:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4736:	6c 96       	adiw	r28, 0x1c	; 28
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	08 95       	ret

0000474c <arm_forward>:

void arm_forward()
{
    474c:	0f 93       	push	r16
    474e:	1f 93       	push	r17
    4750:	cf 93       	push	r28
    4752:	df 93       	push	r29
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	6c 97       	sbiw	r28, 0x1c	; 28
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    4764:	10 92 4d 03 	sts	0x034D, r1
    4768:	89 c0       	rjmp	.+274    	; 0x487c <arm_forward+0x130>
	{
		servo_2(ii);
    476a:	80 91 4d 03 	lds	r24, 0x034D
    476e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	a0 e2       	ldi	r26, 0x20	; 32
    4778:	b1 e4       	ldi	r27, 0x41	; 65
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	9a 83       	std	Y+2, r25	; 0x02
    477e:	ab 83       	std	Y+3, r26	; 0x03
    4780:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4782:	69 81       	ldd	r22, Y+1	; 0x01
    4784:	7a 81       	ldd	r23, Y+2	; 0x02
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	9c 81       	ldd	r25, Y+4	; 0x04
    478a:	26 e6       	ldi	r18, 0x66	; 102
    478c:	36 e6       	ldi	r19, 0x66	; 102
    478e:	46 e6       	ldi	r20, 0x66	; 102
    4790:	55 e4       	ldi	r21, 0x45	; 69
    4792:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	8d 83       	std	Y+5, r24	; 0x05
    479c:	9e 83       	std	Y+6, r25	; 0x06
    479e:	af 83       	std	Y+7, r26	; 0x07
    47a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    47a2:	11 e0       	ldi	r17, 0x01	; 1
    47a4:	6d 81       	ldd	r22, Y+5	; 0x05
    47a6:	7e 81       	ldd	r23, Y+6	; 0x06
    47a8:	8f 81       	ldd	r24, Y+7	; 0x07
    47aa:	98 85       	ldd	r25, Y+8	; 0x08
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e8       	ldi	r20, 0x80	; 128
    47b2:	5f e3       	ldi	r21, 0x3F	; 63
    47b4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    47b8:	88 23       	and	r24, r24
    47ba:	0c f0       	brlt	.+2      	; 0x47be <arm_forward+0x72>
    47bc:	10 e0       	ldi	r17, 0x00	; 0
    47be:	11 23       	and	r17, r17
    47c0:	29 f0       	breq	.+10     	; 0x47cc <arm_forward+0x80>
		__ticks = 1;
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	9a 87       	std	Y+10, r25	; 0x0a
    47c8:	89 87       	std	Y+9, r24	; 0x09
    47ca:	46 c0       	rjmp	.+140    	; 0x4858 <arm_forward+0x10c>
	else if (__tmp > 65535)
    47cc:	11 e0       	ldi	r17, 0x01	; 1
    47ce:	6d 81       	ldd	r22, Y+5	; 0x05
    47d0:	7e 81       	ldd	r23, Y+6	; 0x06
    47d2:	8f 81       	ldd	r24, Y+7	; 0x07
    47d4:	98 85       	ldd	r25, Y+8	; 0x08
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	3f ef       	ldi	r19, 0xFF	; 255
    47da:	4f e7       	ldi	r20, 0x7F	; 127
    47dc:	57 e4       	ldi	r21, 0x47	; 71
    47de:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    47e2:	18 16       	cp	r1, r24
    47e4:	0c f0       	brlt	.+2      	; 0x47e8 <arm_forward+0x9c>
    47e6:	10 e0       	ldi	r17, 0x00	; 0
    47e8:	11 23       	and	r17, r17
    47ea:	61 f1       	breq	.+88     	; 0x4844 <arm_forward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ec:	69 81       	ldd	r22, Y+1	; 0x01
    47ee:	7a 81       	ldd	r23, Y+2	; 0x02
    47f0:	8b 81       	ldd	r24, Y+3	; 0x03
    47f2:	9c 81       	ldd	r25, Y+4	; 0x04
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e2       	ldi	r20, 0x20	; 32
    47fa:	51 e4       	ldi	r21, 0x41	; 65
    47fc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	bc 01       	movw	r22, r24
    4806:	cd 01       	movw	r24, r26
    4808:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	9a 87       	std	Y+10, r25	; 0x0a
    4812:	89 87       	std	Y+9, r24	; 0x09
    4814:	12 c0       	rjmp	.+36     	; 0x483a <arm_forward+0xee>
    4816:	80 e7       	ldi	r24, 0x70	; 112
    4818:	91 e0       	ldi	r25, 0x01	; 1
    481a:	9c 87       	std	Y+12, r25	; 0x0c
    481c:	8b 87       	std	Y+11, r24	; 0x0b
    481e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4820:	9c 85       	ldd	r25, Y+12	; 0x0c
    4822:	8c 01       	movw	r16, r24
    4824:	c8 01       	movw	r24, r16
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	f1 f7       	brne	.-4      	; 0x4826 <arm_forward+0xda>
    482a:	8c 01       	movw	r16, r24
    482c:	1c 87       	std	Y+12, r17	; 0x0c
    482e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4830:	89 85       	ldd	r24, Y+9	; 0x09
    4832:	9a 85       	ldd	r25, Y+10	; 0x0a
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	9a 87       	std	Y+10, r25	; 0x0a
    4838:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	89 85       	ldd	r24, Y+9	; 0x09
    483c:	9a 85       	ldd	r25, Y+10	; 0x0a
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	51 f7       	brne	.-44     	; 0x4816 <arm_forward+0xca>
    4842:	17 c0       	rjmp	.+46     	; 0x4872 <arm_forward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	6d 81       	ldd	r22, Y+5	; 0x05
    4846:	7e 81       	ldd	r23, Y+6	; 0x06
    4848:	8f 81       	ldd	r24, Y+7	; 0x07
    484a:	98 85       	ldd	r25, Y+8	; 0x08
    484c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9a 87       	std	Y+10, r25	; 0x0a
    4856:	89 87       	std	Y+9, r24	; 0x09
    4858:	89 85       	ldd	r24, Y+9	; 0x09
    485a:	9a 85       	ldd	r25, Y+10	; 0x0a
    485c:	9e 87       	std	Y+14, r25	; 0x0e
    485e:	8d 87       	std	Y+13, r24	; 0x0d
    4860:	8d 85       	ldd	r24, Y+13	; 0x0d
    4862:	9e 85       	ldd	r25, Y+14	; 0x0e
    4864:	8c 01       	movw	r16, r24
    4866:	c8 01       	movw	r24, r16
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <arm_forward+0x11c>
    486c:	8c 01       	movw	r16, r24
    486e:	1e 87       	std	Y+14, r17	; 0x0e
    4870:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_forward()
{
	for(ii=0;ii<90;ii++)
    4872:	80 91 4d 03 	lds	r24, 0x034D
    4876:	8f 5f       	subi	r24, 0xFF	; 255
    4878:	80 93 4d 03 	sts	0x034D, r24
    487c:	80 91 4d 03 	lds	r24, 0x034D
    4880:	8a 35       	cpi	r24, 0x5A	; 90
    4882:	08 f4       	brcc	.+2      	; 0x4886 <arm_forward+0x13a>
    4884:	72 cf       	rjmp	.-284    	; 0x476a <arm_forward+0x1e>
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	a6 e9       	ldi	r26, 0x96	; 150
    488c:	b3 e4       	ldi	r27, 0x43	; 67
    488e:	8f 87       	std	Y+15, r24	; 0x0f
    4890:	98 8b       	std	Y+16, r25	; 0x10
    4892:	a9 8b       	std	Y+17, r26	; 0x11
    4894:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4896:	6f 85       	ldd	r22, Y+15	; 0x0f
    4898:	78 89       	ldd	r23, Y+16	; 0x10
    489a:	89 89       	ldd	r24, Y+17	; 0x11
    489c:	9a 89       	ldd	r25, Y+18	; 0x12
    489e:	26 e6       	ldi	r18, 0x66	; 102
    48a0:	36 e6       	ldi	r19, 0x66	; 102
    48a2:	46 e6       	ldi	r20, 0x66	; 102
    48a4:	55 e4       	ldi	r21, 0x45	; 69
    48a6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	8b 8b       	std	Y+19, r24	; 0x13
    48b0:	9c 8b       	std	Y+20, r25	; 0x14
    48b2:	ad 8b       	std	Y+21, r26	; 0x15
    48b4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    48b6:	11 e0       	ldi	r17, 0x01	; 1
    48b8:	6b 89       	ldd	r22, Y+19	; 0x13
    48ba:	7c 89       	ldd	r23, Y+20	; 0x14
    48bc:	8d 89       	ldd	r24, Y+21	; 0x15
    48be:	9e 89       	ldd	r25, Y+22	; 0x16
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e8       	ldi	r20, 0x80	; 128
    48c6:	5f e3       	ldi	r21, 0x3F	; 63
    48c8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    48cc:	88 23       	and	r24, r24
    48ce:	0c f0       	brlt	.+2      	; 0x48d2 <arm_forward+0x186>
    48d0:	10 e0       	ldi	r17, 0x00	; 0
    48d2:	11 23       	and	r17, r17
    48d4:	29 f0       	breq	.+10     	; 0x48e0 <arm_forward+0x194>
		__ticks = 1;
    48d6:	81 e0       	ldi	r24, 0x01	; 1
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	98 8f       	std	Y+24, r25	; 0x18
    48dc:	8f 8b       	std	Y+23, r24	; 0x17
    48de:	46 c0       	rjmp	.+140    	; 0x496c <arm_forward+0x220>
	else if (__tmp > 65535)
    48e0:	11 e0       	ldi	r17, 0x01	; 1
    48e2:	6b 89       	ldd	r22, Y+19	; 0x13
    48e4:	7c 89       	ldd	r23, Y+20	; 0x14
    48e6:	8d 89       	ldd	r24, Y+21	; 0x15
    48e8:	9e 89       	ldd	r25, Y+22	; 0x16
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	0c f0       	brlt	.+2      	; 0x48fc <arm_forward+0x1b0>
    48fa:	10 e0       	ldi	r17, 0x00	; 0
    48fc:	11 23       	and	r17, r17
    48fe:	61 f1       	breq	.+88     	; 0x4958 <arm_forward+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4900:	6f 85       	ldd	r22, Y+15	; 0x0f
    4902:	78 89       	ldd	r23, Y+16	; 0x10
    4904:	89 89       	ldd	r24, Y+17	; 0x11
    4906:	9a 89       	ldd	r25, Y+18	; 0x12
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	40 e2       	ldi	r20, 0x20	; 32
    490e:	51 e4       	ldi	r21, 0x41	; 65
    4910:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	bc 01       	movw	r22, r24
    491a:	cd 01       	movw	r24, r26
    491c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	98 8f       	std	Y+24, r25	; 0x18
    4926:	8f 8b       	std	Y+23, r24	; 0x17
    4928:	12 c0       	rjmp	.+36     	; 0x494e <arm_forward+0x202>
    492a:	80 e7       	ldi	r24, 0x70	; 112
    492c:	91 e0       	ldi	r25, 0x01	; 1
    492e:	9a 8f       	std	Y+26, r25	; 0x1a
    4930:	89 8f       	std	Y+25, r24	; 0x19
    4932:	89 8d       	ldd	r24, Y+25	; 0x19
    4934:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4936:	8c 01       	movw	r16, r24
    4938:	c8 01       	movw	r24, r16
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	f1 f7       	brne	.-4      	; 0x493a <arm_forward+0x1ee>
    493e:	8c 01       	movw	r16, r24
    4940:	1a 8f       	std	Y+26, r17	; 0x1a
    4942:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4944:	8f 89       	ldd	r24, Y+23	; 0x17
    4946:	98 8d       	ldd	r25, Y+24	; 0x18
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	98 8f       	std	Y+24, r25	; 0x18
    494c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    494e:	8f 89       	ldd	r24, Y+23	; 0x17
    4950:	98 8d       	ldd	r25, Y+24	; 0x18
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	51 f7       	brne	.-44     	; 0x492a <arm_forward+0x1de>
    4956:	17 c0       	rjmp	.+46     	; 0x4986 <arm_forward+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4958:	6b 89       	ldd	r22, Y+19	; 0x13
    495a:	7c 89       	ldd	r23, Y+20	; 0x14
    495c:	8d 89       	ldd	r24, Y+21	; 0x15
    495e:	9e 89       	ldd	r25, Y+22	; 0x16
    4960:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	98 8f       	std	Y+24, r25	; 0x18
    496a:	8f 8b       	std	Y+23, r24	; 0x17
    496c:	8f 89       	ldd	r24, Y+23	; 0x17
    496e:	98 8d       	ldd	r25, Y+24	; 0x18
    4970:	9c 8f       	std	Y+28, r25	; 0x1c
    4972:	8b 8f       	std	Y+27, r24	; 0x1b
    4974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4978:	8c 01       	movw	r16, r24
    497a:	c8 01       	movw	r24, r16
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	f1 f7       	brne	.-4      	; 0x497c <arm_forward+0x230>
    4980:	8c 01       	movw	r16, r24
    4982:	1c 8f       	std	Y+28, r17	; 0x1c
    4984:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_2(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
	
}
    4986:	6c 96       	adiw	r28, 0x1c	; 28
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	08 95       	ret

0000499c <arm_backward>:

void arm_backward()
{
    499c:	0f 93       	push	r16
    499e:	1f 93       	push	r17
    49a0:	cf 93       	push	r28
    49a2:	df 93       	push	r29
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
    49a8:	2e 97       	sbiw	r28, 0x0e	; 14
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	f8 94       	cli
    49ae:	de bf       	out	0x3e, r29	; 62
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    49b4:	8a e5       	ldi	r24, 0x5A	; 90
    49b6:	80 93 4d 03 	sts	0x034D, r24
    49ba:	89 c0       	rjmp	.+274    	; 0x4ace <arm_backward+0x132>
	{
		servo_2(ii);
    49bc:	80 91 4d 03 	lds	r24, 0x034D
    49c0:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	a0 e2       	ldi	r26, 0x20	; 32
    49ca:	b1 e4       	ldi	r27, 0x41	; 65
    49cc:	89 83       	std	Y+1, r24	; 0x01
    49ce:	9a 83       	std	Y+2, r25	; 0x02
    49d0:	ab 83       	std	Y+3, r26	; 0x03
    49d2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49d4:	69 81       	ldd	r22, Y+1	; 0x01
    49d6:	7a 81       	ldd	r23, Y+2	; 0x02
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	9c 81       	ldd	r25, Y+4	; 0x04
    49dc:	26 e6       	ldi	r18, 0x66	; 102
    49de:	36 e6       	ldi	r19, 0x66	; 102
    49e0:	46 e6       	ldi	r20, 0x66	; 102
    49e2:	55 e4       	ldi	r21, 0x45	; 69
    49e4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	8d 83       	std	Y+5, r24	; 0x05
    49ee:	9e 83       	std	Y+6, r25	; 0x06
    49f0:	af 83       	std	Y+7, r26	; 0x07
    49f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    49f4:	11 e0       	ldi	r17, 0x01	; 1
    49f6:	6d 81       	ldd	r22, Y+5	; 0x05
    49f8:	7e 81       	ldd	r23, Y+6	; 0x06
    49fa:	8f 81       	ldd	r24, Y+7	; 0x07
    49fc:	98 85       	ldd	r25, Y+8	; 0x08
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	40 e8       	ldi	r20, 0x80	; 128
    4a04:	5f e3       	ldi	r21, 0x3F	; 63
    4a06:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4a0a:	88 23       	and	r24, r24
    4a0c:	0c f0       	brlt	.+2      	; 0x4a10 <arm_backward+0x74>
    4a0e:	10 e0       	ldi	r17, 0x00	; 0
    4a10:	11 23       	and	r17, r17
    4a12:	29 f0       	breq	.+10     	; 0x4a1e <arm_backward+0x82>
		__ticks = 1;
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	9a 87       	std	Y+10, r25	; 0x0a
    4a1a:	89 87       	std	Y+9, r24	; 0x09
    4a1c:	46 c0       	rjmp	.+140    	; 0x4aaa <arm_backward+0x10e>
	else if (__tmp > 65535)
    4a1e:	11 e0       	ldi	r17, 0x01	; 1
    4a20:	6d 81       	ldd	r22, Y+5	; 0x05
    4a22:	7e 81       	ldd	r23, Y+6	; 0x06
    4a24:	8f 81       	ldd	r24, Y+7	; 0x07
    4a26:	98 85       	ldd	r25, Y+8	; 0x08
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	3f ef       	ldi	r19, 0xFF	; 255
    4a2c:	4f e7       	ldi	r20, 0x7F	; 127
    4a2e:	57 e4       	ldi	r21, 0x47	; 71
    4a30:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4a34:	18 16       	cp	r1, r24
    4a36:	0c f0       	brlt	.+2      	; 0x4a3a <arm_backward+0x9e>
    4a38:	10 e0       	ldi	r17, 0x00	; 0
    4a3a:	11 23       	and	r17, r17
    4a3c:	61 f1       	breq	.+88     	; 0x4a96 <arm_backward+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3e:	69 81       	ldd	r22, Y+1	; 0x01
    4a40:	7a 81       	ldd	r23, Y+2	; 0x02
    4a42:	8b 81       	ldd	r24, Y+3	; 0x03
    4a44:	9c 81       	ldd	r25, Y+4	; 0x04
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	40 e2       	ldi	r20, 0x20	; 32
    4a4c:	51 e4       	ldi	r21, 0x41	; 65
    4a4e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	bc 01       	movw	r22, r24
    4a58:	cd 01       	movw	r24, r26
    4a5a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	9a 87       	std	Y+10, r25	; 0x0a
    4a64:	89 87       	std	Y+9, r24	; 0x09
    4a66:	12 c0       	rjmp	.+36     	; 0x4a8c <arm_backward+0xf0>
    4a68:	80 e7       	ldi	r24, 0x70	; 112
    4a6a:	91 e0       	ldi	r25, 0x01	; 1
    4a6c:	9c 87       	std	Y+12, r25	; 0x0c
    4a6e:	8b 87       	std	Y+11, r24	; 0x0b
    4a70:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a72:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a74:	8c 01       	movw	r16, r24
    4a76:	c8 01       	movw	r24, r16
    4a78:	01 97       	sbiw	r24, 0x01	; 1
    4a7a:	f1 f7       	brne	.-4      	; 0x4a78 <arm_backward+0xdc>
    4a7c:	8c 01       	movw	r16, r24
    4a7e:	1c 87       	std	Y+12, r17	; 0x0c
    4a80:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a86:	01 97       	sbiw	r24, 0x01	; 1
    4a88:	9a 87       	std	Y+10, r25	; 0x0a
    4a8a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8c:	89 85       	ldd	r24, Y+9	; 0x09
    4a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a90:	00 97       	sbiw	r24, 0x00	; 0
    4a92:	51 f7       	brne	.-44     	; 0x4a68 <arm_backward+0xcc>
    4a94:	17 c0       	rjmp	.+46     	; 0x4ac4 <arm_backward+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a96:	6d 81       	ldd	r22, Y+5	; 0x05
    4a98:	7e 81       	ldd	r23, Y+6	; 0x06
    4a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a9c:	98 85       	ldd	r25, Y+8	; 0x08
    4a9e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9a 87       	std	Y+10, r25	; 0x0a
    4aa8:	89 87       	std	Y+9, r24	; 0x09
    4aaa:	89 85       	ldd	r24, Y+9	; 0x09
    4aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aae:	9e 87       	std	Y+14, r25	; 0x0e
    4ab0:	8d 87       	std	Y+13, r24	; 0x0d
    4ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab6:	8c 01       	movw	r16, r24
    4ab8:	c8 01       	movw	r24, r16
    4aba:	01 97       	sbiw	r24, 0x01	; 1
    4abc:	f1 f7       	brne	.-4      	; 0x4aba <arm_backward+0x11e>
    4abe:	8c 01       	movw	r16, r24
    4ac0:	1e 87       	std	Y+14, r17	; 0x0e
    4ac2:	0d 87       	std	Y+13, r16	; 0x0d
	
}

void arm_backward()
{
	for(ii=90;ii>0;ii--)
    4ac4:	80 91 4d 03 	lds	r24, 0x034D
    4ac8:	81 50       	subi	r24, 0x01	; 1
    4aca:	80 93 4d 03 	sts	0x034D, r24
    4ace:	80 91 4d 03 	lds	r24, 0x034D
    4ad2:	88 23       	and	r24, r24
    4ad4:	09 f0       	breq	.+2      	; 0x4ad8 <arm_backward+0x13c>
    4ad6:	72 cf       	rjmp	.-284    	; 0x49bc <arm_backward+0x20>
	{
		servo_2(ii);
		_delay_ms(10);
	}
	
}
    4ad8:	2e 96       	adiw	r28, 0x0e	; 14
    4ada:	0f b6       	in	r0, 0x3f	; 63
    4adc:	f8 94       	cli
    4ade:	de bf       	out	0x3e, r29	; 62
    4ae0:	0f be       	out	0x3f, r0	; 63
    4ae2:	cd bf       	out	0x3d, r28	; 61
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	1f 91       	pop	r17
    4aea:	0f 91       	pop	r16
    4aec:	08 95       	ret

00004aee <reset>:

void reset()
{
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62
    4afa:	e8 97       	sbiw	r28, 0x38	; 56
    4afc:	0f b6       	in	r0, 0x3f	; 63
    4afe:	f8 94       	cli
    4b00:	de bf       	out	0x3e, r29	; 62
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	cd bf       	out	0x3d, r28	; 61
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	aa ef       	ldi	r26, 0xFA	; 250
    4b0c:	b3 e4       	ldi	r27, 0x43	; 67
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	9a 83       	std	Y+2, r25	; 0x02
    4b12:	ab 83       	std	Y+3, r26	; 0x03
    4b14:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4b16:	69 81       	ldd	r22, Y+1	; 0x01
    4b18:	7a 81       	ldd	r23, Y+2	; 0x02
    4b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1e:	26 e6       	ldi	r18, 0x66	; 102
    4b20:	36 e6       	ldi	r19, 0x66	; 102
    4b22:	46 e6       	ldi	r20, 0x66	; 102
    4b24:	55 e4       	ldi	r21, 0x45	; 69
    4b26:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	8d 83       	std	Y+5, r24	; 0x05
    4b30:	9e 83       	std	Y+6, r25	; 0x06
    4b32:	af 83       	std	Y+7, r26	; 0x07
    4b34:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4b36:	11 e0       	ldi	r17, 0x01	; 1
    4b38:	6d 81       	ldd	r22, Y+5	; 0x05
    4b3a:	7e 81       	ldd	r23, Y+6	; 0x06
    4b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b3e:	98 85       	ldd	r25, Y+8	; 0x08
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 e8       	ldi	r20, 0x80	; 128
    4b46:	5f e3       	ldi	r21, 0x3F	; 63
    4b48:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4b4c:	88 23       	and	r24, r24
    4b4e:	0c f0       	brlt	.+2      	; 0x4b52 <reset+0x64>
    4b50:	10 e0       	ldi	r17, 0x00	; 0
    4b52:	11 23       	and	r17, r17
    4b54:	29 f0       	breq	.+10     	; 0x4b60 <reset+0x72>
		__ticks = 1;
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	9a 87       	std	Y+10, r25	; 0x0a
    4b5c:	89 87       	std	Y+9, r24	; 0x09
    4b5e:	46 c0       	rjmp	.+140    	; 0x4bec <reset+0xfe>
	else if (__tmp > 65535)
    4b60:	11 e0       	ldi	r17, 0x01	; 1
    4b62:	6d 81       	ldd	r22, Y+5	; 0x05
    4b64:	7e 81       	ldd	r23, Y+6	; 0x06
    4b66:	8f 81       	ldd	r24, Y+7	; 0x07
    4b68:	98 85       	ldd	r25, Y+8	; 0x08
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	3f ef       	ldi	r19, 0xFF	; 255
    4b6e:	4f e7       	ldi	r20, 0x7F	; 127
    4b70:	57 e4       	ldi	r21, 0x47	; 71
    4b72:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4b76:	18 16       	cp	r1, r24
    4b78:	0c f0       	brlt	.+2      	; 0x4b7c <reset+0x8e>
    4b7a:	10 e0       	ldi	r17, 0x00	; 0
    4b7c:	11 23       	and	r17, r17
    4b7e:	61 f1       	breq	.+88     	; 0x4bd8 <reset+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b80:	69 81       	ldd	r22, Y+1	; 0x01
    4b82:	7a 81       	ldd	r23, Y+2	; 0x02
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	9c 81       	ldd	r25, Y+4	; 0x04
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	40 e2       	ldi	r20, 0x20	; 32
    4b8e:	51 e4       	ldi	r21, 0x41	; 65
    4b90:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	bc 01       	movw	r22, r24
    4b9a:	cd 01       	movw	r24, r26
    4b9c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	9a 87       	std	Y+10, r25	; 0x0a
    4ba6:	89 87       	std	Y+9, r24	; 0x09
    4ba8:	12 c0       	rjmp	.+36     	; 0x4bce <reset+0xe0>
    4baa:	80 e7       	ldi	r24, 0x70	; 112
    4bac:	91 e0       	ldi	r25, 0x01	; 1
    4bae:	9c 87       	std	Y+12, r25	; 0x0c
    4bb0:	8b 87       	std	Y+11, r24	; 0x0b
    4bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bb6:	8c 01       	movw	r16, r24
    4bb8:	c8 01       	movw	r24, r16
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	f1 f7       	brne	.-4      	; 0x4bba <reset+0xcc>
    4bbe:	8c 01       	movw	r16, r24
    4bc0:	1c 87       	std	Y+12, r17	; 0x0c
    4bc2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc4:	89 85       	ldd	r24, Y+9	; 0x09
    4bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	9a 87       	std	Y+10, r25	; 0x0a
    4bcc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bce:	89 85       	ldd	r24, Y+9	; 0x09
    4bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd2:	00 97       	sbiw	r24, 0x00	; 0
    4bd4:	51 f7       	brne	.-44     	; 0x4baa <reset+0xbc>
    4bd6:	17 c0       	rjmp	.+46     	; 0x4c06 <reset+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd8:	6d 81       	ldd	r22, Y+5	; 0x05
    4bda:	7e 81       	ldd	r23, Y+6	; 0x06
    4bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    4bde:	98 85       	ldd	r25, Y+8	; 0x08
    4be0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	9a 87       	std	Y+10, r25	; 0x0a
    4bea:	89 87       	std	Y+9, r24	; 0x09
    4bec:	89 85       	ldd	r24, Y+9	; 0x09
    4bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf0:	9e 87       	std	Y+14, r25	; 0x0e
    4bf2:	8d 87       	std	Y+13, r24	; 0x0d
    4bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf8:	8c 01       	movw	r16, r24
    4bfa:	c8 01       	movw	r24, r16
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	f1 f7       	brne	.-4      	; 0x4bfc <reset+0x10e>
    4c00:	8c 01       	movw	r16, r24
    4c02:	1e 87       	std	Y+14, r17	; 0x0e
    4c04:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	servo_1(0);
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	aa ef       	ldi	r26, 0xFA	; 250
    4c12:	b3 e4       	ldi	r27, 0x43	; 67
    4c14:	8f 87       	std	Y+15, r24	; 0x0f
    4c16:	98 8b       	std	Y+16, r25	; 0x10
    4c18:	a9 8b       	std	Y+17, r26	; 0x11
    4c1a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c1e:	78 89       	ldd	r23, Y+16	; 0x10
    4c20:	89 89       	ldd	r24, Y+17	; 0x11
    4c22:	9a 89       	ldd	r25, Y+18	; 0x12
    4c24:	26 e6       	ldi	r18, 0x66	; 102
    4c26:	36 e6       	ldi	r19, 0x66	; 102
    4c28:	46 e6       	ldi	r20, 0x66	; 102
    4c2a:	55 e4       	ldi	r21, 0x45	; 69
    4c2c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	8b 8b       	std	Y+19, r24	; 0x13
    4c36:	9c 8b       	std	Y+20, r25	; 0x14
    4c38:	ad 8b       	std	Y+21, r26	; 0x15
    4c3a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4c3c:	11 e0       	ldi	r17, 0x01	; 1
    4c3e:	6b 89       	ldd	r22, Y+19	; 0x13
    4c40:	7c 89       	ldd	r23, Y+20	; 0x14
    4c42:	8d 89       	ldd	r24, Y+21	; 0x15
    4c44:	9e 89       	ldd	r25, Y+22	; 0x16
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	40 e8       	ldi	r20, 0x80	; 128
    4c4c:	5f e3       	ldi	r21, 0x3F	; 63
    4c4e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4c52:	88 23       	and	r24, r24
    4c54:	0c f0       	brlt	.+2      	; 0x4c58 <reset+0x16a>
    4c56:	10 e0       	ldi	r17, 0x00	; 0
    4c58:	11 23       	and	r17, r17
    4c5a:	29 f0       	breq	.+10     	; 0x4c66 <reset+0x178>
		__ticks = 1;
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	98 8f       	std	Y+24, r25	; 0x18
    4c62:	8f 8b       	std	Y+23, r24	; 0x17
    4c64:	46 c0       	rjmp	.+140    	; 0x4cf2 <reset+0x204>
	else if (__tmp > 65535)
    4c66:	11 e0       	ldi	r17, 0x01	; 1
    4c68:	6b 89       	ldd	r22, Y+19	; 0x13
    4c6a:	7c 89       	ldd	r23, Y+20	; 0x14
    4c6c:	8d 89       	ldd	r24, Y+21	; 0x15
    4c6e:	9e 89       	ldd	r25, Y+22	; 0x16
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	3f ef       	ldi	r19, 0xFF	; 255
    4c74:	4f e7       	ldi	r20, 0x7F	; 127
    4c76:	57 e4       	ldi	r21, 0x47	; 71
    4c78:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4c7c:	18 16       	cp	r1, r24
    4c7e:	0c f0       	brlt	.+2      	; 0x4c82 <reset+0x194>
    4c80:	10 e0       	ldi	r17, 0x00	; 0
    4c82:	11 23       	and	r17, r17
    4c84:	61 f1       	breq	.+88     	; 0x4cde <reset+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c86:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c88:	78 89       	ldd	r23, Y+16	; 0x10
    4c8a:	89 89       	ldd	r24, Y+17	; 0x11
    4c8c:	9a 89       	ldd	r25, Y+18	; 0x12
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e2       	ldi	r20, 0x20	; 32
    4c94:	51 e4       	ldi	r21, 0x41	; 65
    4c96:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	cd 01       	movw	r24, r26
    4ca2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	98 8f       	std	Y+24, r25	; 0x18
    4cac:	8f 8b       	std	Y+23, r24	; 0x17
    4cae:	12 c0       	rjmp	.+36     	; 0x4cd4 <reset+0x1e6>
    4cb0:	80 e7       	ldi	r24, 0x70	; 112
    4cb2:	91 e0       	ldi	r25, 0x01	; 1
    4cb4:	9a 8f       	std	Y+26, r25	; 0x1a
    4cb6:	89 8f       	std	Y+25, r24	; 0x19
    4cb8:	89 8d       	ldd	r24, Y+25	; 0x19
    4cba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4cbc:	8c 01       	movw	r16, r24
    4cbe:	c8 01       	movw	r24, r16
    4cc0:	01 97       	sbiw	r24, 0x01	; 1
    4cc2:	f1 f7       	brne	.-4      	; 0x4cc0 <reset+0x1d2>
    4cc4:	8c 01       	movw	r16, r24
    4cc6:	1a 8f       	std	Y+26, r17	; 0x1a
    4cc8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cca:	8f 89       	ldd	r24, Y+23	; 0x17
    4ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	98 8f       	std	Y+24, r25	; 0x18
    4cd2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	51 f7       	brne	.-44     	; 0x4cb0 <reset+0x1c2>
    4cdc:	17 c0       	rjmp	.+46     	; 0x4d0c <reset+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cde:	6b 89       	ldd	r22, Y+19	; 0x13
    4ce0:	7c 89       	ldd	r23, Y+20	; 0x14
    4ce2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ce4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ce6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	98 8f       	std	Y+24, r25	; 0x18
    4cf0:	8f 8b       	std	Y+23, r24	; 0x17
    4cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    4cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    4cf6:	9c 8f       	std	Y+28, r25	; 0x1c
    4cf8:	8b 8f       	std	Y+27, r24	; 0x1b
    4cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cfe:	8c 01       	movw	r16, r24
    4d00:	c8 01       	movw	r24, r16
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <reset+0x214>
    4d06:	8c 01       	movw	r16, r24
    4d08:	1c 8f       	std	Y+28, r17	; 0x1c
    4d0a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(500);
	servo_2(0);
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	aa ef       	ldi	r26, 0xFA	; 250
    4d18:	b3 e4       	ldi	r27, 0x43	; 67
    4d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    4d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    4d1e:	af 8f       	std	Y+31, r26	; 0x1f
    4d20:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d22:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4d24:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4d26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d28:	98 a1       	lds	r25, 0x48
    4d2a:	26 e6       	ldi	r18, 0x66	; 102
    4d2c:	36 e6       	ldi	r19, 0x66	; 102
    4d2e:	46 e6       	ldi	r20, 0x66	; 102
    4d30:	55 e4       	ldi	r21, 0x45	; 69
    4d32:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	89 a3       	lds	r24, 0x59
    4d3c:	9a a3       	lds	r25, 0x5a
    4d3e:	ab a3       	lds	r26, 0x5b
    4d40:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    4d42:	11 e0       	ldi	r17, 0x01	; 1
    4d44:	69 a1       	lds	r22, 0x49
    4d46:	7a a1       	lds	r23, 0x4a
    4d48:	8b a1       	lds	r24, 0x4b
    4d4a:	9c a1       	lds	r25, 0x4c
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e8       	ldi	r20, 0x80	; 128
    4d52:	5f e3       	ldi	r21, 0x3F	; 63
    4d54:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4d58:	88 23       	and	r24, r24
    4d5a:	0c f0       	brlt	.+2      	; 0x4d5e <reset+0x270>
    4d5c:	10 e0       	ldi	r17, 0x00	; 0
    4d5e:	11 23       	and	r17, r17
    4d60:	29 f0       	breq	.+10     	; 0x4d6c <reset+0x27e>
		__ticks = 1;
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	9e a3       	lds	r25, 0x5e
    4d68:	8d a3       	lds	r24, 0x5d
    4d6a:	46 c0       	rjmp	.+140    	; 0x4df8 <reset+0x30a>
	else if (__tmp > 65535)
    4d6c:	11 e0       	ldi	r17, 0x01	; 1
    4d6e:	69 a1       	lds	r22, 0x49
    4d70:	7a a1       	lds	r23, 0x4a
    4d72:	8b a1       	lds	r24, 0x4b
    4d74:	9c a1       	lds	r25, 0x4c
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	3f ef       	ldi	r19, 0xFF	; 255
    4d7a:	4f e7       	ldi	r20, 0x7F	; 127
    4d7c:	57 e4       	ldi	r21, 0x47	; 71
    4d7e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4d82:	18 16       	cp	r1, r24
    4d84:	0c f0       	brlt	.+2      	; 0x4d88 <reset+0x29a>
    4d86:	10 e0       	ldi	r17, 0x00	; 0
    4d88:	11 23       	and	r17, r17
    4d8a:	61 f1       	breq	.+88     	; 0x4de4 <reset+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4d8e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d92:	98 a1       	lds	r25, 0x48
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e2       	ldi	r20, 0x20	; 32
    4d9a:	51 e4       	ldi	r21, 0x41	; 65
    4d9c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	bc 01       	movw	r22, r24
    4da6:	cd 01       	movw	r24, r26
    4da8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	9e a3       	lds	r25, 0x5e
    4db2:	8d a3       	lds	r24, 0x5d
    4db4:	12 c0       	rjmp	.+36     	; 0x4dda <reset+0x2ec>
    4db6:	80 e7       	ldi	r24, 0x70	; 112
    4db8:	91 e0       	ldi	r25, 0x01	; 1
    4dba:	98 a7       	lds	r25, 0x78
    4dbc:	8f a3       	lds	r24, 0x5f
    4dbe:	8f a1       	lds	r24, 0x4f
    4dc0:	98 a5       	lds	r25, 0x68
    4dc2:	8c 01       	movw	r16, r24
    4dc4:	c8 01       	movw	r24, r16
    4dc6:	01 97       	sbiw	r24, 0x01	; 1
    4dc8:	f1 f7       	brne	.-4      	; 0x4dc6 <reset+0x2d8>
    4dca:	8c 01       	movw	r16, r24
    4dcc:	18 a7       	lds	r17, 0x78
    4dce:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd0:	8d a1       	lds	r24, 0x4d
    4dd2:	9e a1       	lds	r25, 0x4e
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	9e a3       	lds	r25, 0x5e
    4dd8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dda:	8d a1       	lds	r24, 0x4d
    4ddc:	9e a1       	lds	r25, 0x4e
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	51 f7       	brne	.-44     	; 0x4db6 <reset+0x2c8>
    4de2:	17 c0       	rjmp	.+46     	; 0x4e12 <reset+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de4:	69 a1       	lds	r22, 0x49
    4de6:	7a a1       	lds	r23, 0x4a
    4de8:	8b a1       	lds	r24, 0x4b
    4dea:	9c a1       	lds	r25, 0x4c
    4dec:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	9e a3       	lds	r25, 0x5e
    4df6:	8d a3       	lds	r24, 0x5d
    4df8:	8d a1       	lds	r24, 0x4d
    4dfa:	9e a1       	lds	r25, 0x4e
    4dfc:	9a a7       	lds	r25, 0x7a
    4dfe:	89 a7       	lds	r24, 0x79
    4e00:	89 a5       	lds	r24, 0x69
    4e02:	9a a5       	lds	r25, 0x6a
    4e04:	8c 01       	movw	r16, r24
    4e06:	c8 01       	movw	r24, r16
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	f1 f7       	brne	.-4      	; 0x4e08 <reset+0x31a>
    4e0c:	8c 01       	movw	r16, r24
    4e0e:	1a a7       	lds	r17, 0x7a
    4e10:	09 a7       	lds	r16, 0x79
	_delay_ms(500);
	servo_3(0);
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	aa ef       	ldi	r26, 0xFA	; 250
    4e1e:	b3 e4       	ldi	r27, 0x43	; 67
    4e20:	8b a7       	lds	r24, 0x7b
    4e22:	9c a7       	lds	r25, 0x7c
    4e24:	ad a7       	lds	r26, 0x7d
    4e26:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4e28:	6b a5       	lds	r22, 0x6b
    4e2a:	7c a5       	lds	r23, 0x6c
    4e2c:	8d a5       	lds	r24, 0x6d
    4e2e:	9e a5       	lds	r25, 0x6e
    4e30:	26 e6       	ldi	r18, 0x66	; 102
    4e32:	36 e6       	ldi	r19, 0x66	; 102
    4e34:	46 e6       	ldi	r20, 0x66	; 102
    4e36:	55 e4       	ldi	r21, 0x45	; 69
    4e38:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	8f a7       	lds	r24, 0x7f
    4e42:	98 ab       	sts	0x58, r25
    4e44:	a9 ab       	sts	0x59, r26
    4e46:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    4e48:	11 e0       	ldi	r17, 0x01	; 1
    4e4a:	6f a5       	lds	r22, 0x6f
    4e4c:	78 a9       	sts	0x48, r23
    4e4e:	89 a9       	sts	0x49, r24
    4e50:	9a a9       	sts	0x4a, r25
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e8       	ldi	r20, 0x80	; 128
    4e58:	5f e3       	ldi	r21, 0x3F	; 63
    4e5a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4e5e:	88 23       	and	r24, r24
    4e60:	0c f0       	brlt	.+2      	; 0x4e64 <reset+0x376>
    4e62:	10 e0       	ldi	r17, 0x00	; 0
    4e64:	11 23       	and	r17, r17
    4e66:	29 f0       	breq	.+10     	; 0x4e72 <reset+0x384>
		__ticks = 1;
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	9c ab       	sts	0x5c, r25
    4e6e:	8b ab       	sts	0x5b, r24
    4e70:	46 c0       	rjmp	.+140    	; 0x4efe <reset+0x410>
	else if (__tmp > 65535)
    4e72:	11 e0       	ldi	r17, 0x01	; 1
    4e74:	6f a5       	lds	r22, 0x6f
    4e76:	78 a9       	sts	0x48, r23
    4e78:	89 a9       	sts	0x49, r24
    4e7a:	9a a9       	sts	0x4a, r25
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	3f ef       	ldi	r19, 0xFF	; 255
    4e80:	4f e7       	ldi	r20, 0x7F	; 127
    4e82:	57 e4       	ldi	r21, 0x47	; 71
    4e84:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4e88:	18 16       	cp	r1, r24
    4e8a:	0c f0       	brlt	.+2      	; 0x4e8e <reset+0x3a0>
    4e8c:	10 e0       	ldi	r17, 0x00	; 0
    4e8e:	11 23       	and	r17, r17
    4e90:	61 f1       	breq	.+88     	; 0x4eea <reset+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e92:	6b a5       	lds	r22, 0x6b
    4e94:	7c a5       	lds	r23, 0x6c
    4e96:	8d a5       	lds	r24, 0x6d
    4e98:	9e a5       	lds	r25, 0x6e
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	40 e2       	ldi	r20, 0x20	; 32
    4ea0:	51 e4       	ldi	r21, 0x41	; 65
    4ea2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	bc 01       	movw	r22, r24
    4eac:	cd 01       	movw	r24, r26
    4eae:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	9c ab       	sts	0x5c, r25
    4eb8:	8b ab       	sts	0x5b, r24
    4eba:	12 c0       	rjmp	.+36     	; 0x4ee0 <reset+0x3f2>
    4ebc:	80 e7       	ldi	r24, 0x70	; 112
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	9e ab       	sts	0x5e, r25
    4ec2:	8d ab       	sts	0x5d, r24
    4ec4:	8d a9       	sts	0x4d, r24
    4ec6:	9e a9       	sts	0x4e, r25
    4ec8:	8c 01       	movw	r16, r24
    4eca:	c8 01       	movw	r24, r16
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <reset+0x3de>
    4ed0:	8c 01       	movw	r16, r24
    4ed2:	1e ab       	sts	0x5e, r17
    4ed4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed6:	8b a9       	sts	0x4b, r24
    4ed8:	9c a9       	sts	0x4c, r25
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	9c ab       	sts	0x5c, r25
    4ede:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee0:	8b a9       	sts	0x4b, r24
    4ee2:	9c a9       	sts	0x4c, r25
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	51 f7       	brne	.-44     	; 0x4ebc <reset+0x3ce>
    4ee8:	17 c0       	rjmp	.+46     	; 0x4f18 <reset+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eea:	6f a5       	lds	r22, 0x6f
    4eec:	78 a9       	sts	0x48, r23
    4eee:	89 a9       	sts	0x49, r24
    4ef0:	9a a9       	sts	0x4a, r25
    4ef2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	9c ab       	sts	0x5c, r25
    4efc:	8b ab       	sts	0x5b, r24
    4efe:	8b a9       	sts	0x4b, r24
    4f00:	9c a9       	sts	0x4c, r25
    4f02:	98 af       	sts	0x78, r25
    4f04:	8f ab       	sts	0x5f, r24
    4f06:	8f a9       	sts	0x4f, r24
    4f08:	98 ad       	sts	0x68, r25
    4f0a:	8c 01       	movw	r16, r24
    4f0c:	c8 01       	movw	r24, r16
    4f0e:	01 97       	sbiw	r24, 0x01	; 1
    4f10:	f1 f7       	brne	.-4      	; 0x4f0e <reset+0x420>
    4f12:	8c 01       	movw	r16, r24
    4f14:	18 af       	sts	0x78, r17
    4f16:	0f ab       	sts	0x5f, r16
	_delay_ms(500);
}
    4f18:	e8 96       	adiw	r28, 0x38	; 56
    4f1a:	0f b6       	in	r0, 0x3f	; 63
    4f1c:	f8 94       	cli
    4f1e:	de bf       	out	0x3e, r29	; 62
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	cd bf       	out	0x3d, r28	; 61
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	08 95       	ret

00004f2e <reset1>:
void reset1()
{
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
	servo_1_free();
    4f36:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <servo_1_free>
	servo_2_free();
    4f3a:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <servo_2_free>
	servo_3_free();
    4f3e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <servo_3_free>
}
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	08 95       	ret

00004f48 <defaulty>:


void defaulty()
{
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	6c 97       	sbiw	r28, 0x1c	; 28
    4f56:	0f b6       	in	r0, 0x3f	; 63
    4f58:	f8 94       	cli
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	cd bf       	out	0x3d, r28	; 61
	servo_1(90);
    4f60:	8a e5       	ldi	r24, 0x5A	; 90
    4f62:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	a6 e9       	ldi	r26, 0x96	; 150
    4f6c:	b3 e4       	ldi	r27, 0x43	; 67
    4f6e:	89 83       	std	Y+1, r24	; 0x01
    4f70:	9a 83       	std	Y+2, r25	; 0x02
    4f72:	ab 83       	std	Y+3, r26	; 0x03
    4f74:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4f76:	69 81       	ldd	r22, Y+1	; 0x01
    4f78:	7a 81       	ldd	r23, Y+2	; 0x02
    4f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7e:	26 e6       	ldi	r18, 0x66	; 102
    4f80:	36 e6       	ldi	r19, 0x66	; 102
    4f82:	46 e6       	ldi	r20, 0x66	; 102
    4f84:	55 e4       	ldi	r21, 0x45	; 69
    4f86:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	8d 83       	std	Y+5, r24	; 0x05
    4f90:	9e 83       	std	Y+6, r25	; 0x06
    4f92:	af 83       	std	Y+7, r26	; 0x07
    4f94:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4f96:	11 e0       	ldi	r17, 0x01	; 1
    4f98:	6d 81       	ldd	r22, Y+5	; 0x05
    4f9a:	7e 81       	ldd	r23, Y+6	; 0x06
    4f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f9e:	98 85       	ldd	r25, Y+8	; 0x08
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e8       	ldi	r20, 0x80	; 128
    4fa6:	5f e3       	ldi	r21, 0x3F	; 63
    4fa8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    4fac:	88 23       	and	r24, r24
    4fae:	0c f0       	brlt	.+2      	; 0x4fb2 <defaulty+0x6a>
    4fb0:	10 e0       	ldi	r17, 0x00	; 0
    4fb2:	11 23       	and	r17, r17
    4fb4:	29 f0       	breq	.+10     	; 0x4fc0 <defaulty+0x78>
		__ticks = 1;
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	9a 87       	std	Y+10, r25	; 0x0a
    4fbc:	89 87       	std	Y+9, r24	; 0x09
    4fbe:	46 c0       	rjmp	.+140    	; 0x504c <defaulty+0x104>
	else if (__tmp > 65535)
    4fc0:	11 e0       	ldi	r17, 0x01	; 1
    4fc2:	6d 81       	ldd	r22, Y+5	; 0x05
    4fc4:	7e 81       	ldd	r23, Y+6	; 0x06
    4fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    4fc8:	98 85       	ldd	r25, Y+8	; 0x08
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	3f ef       	ldi	r19, 0xFF	; 255
    4fce:	4f e7       	ldi	r20, 0x7F	; 127
    4fd0:	57 e4       	ldi	r21, 0x47	; 71
    4fd2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    4fd6:	18 16       	cp	r1, r24
    4fd8:	0c f0       	brlt	.+2      	; 0x4fdc <defaulty+0x94>
    4fda:	10 e0       	ldi	r17, 0x00	; 0
    4fdc:	11 23       	and	r17, r17
    4fde:	61 f1       	breq	.+88     	; 0x5038 <defaulty+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe0:	69 81       	ldd	r22, Y+1	; 0x01
    4fe2:	7a 81       	ldd	r23, Y+2	; 0x02
    4fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	40 e2       	ldi	r20, 0x20	; 32
    4fee:	51 e4       	ldi	r21, 0x41	; 65
    4ff0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    4ff4:	dc 01       	movw	r26, r24
    4ff6:	cb 01       	movw	r24, r22
    4ff8:	bc 01       	movw	r22, r24
    4ffa:	cd 01       	movw	r24, r26
    4ffc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5000:	dc 01       	movw	r26, r24
    5002:	cb 01       	movw	r24, r22
    5004:	9a 87       	std	Y+10, r25	; 0x0a
    5006:	89 87       	std	Y+9, r24	; 0x09
    5008:	12 c0       	rjmp	.+36     	; 0x502e <defaulty+0xe6>
    500a:	80 e7       	ldi	r24, 0x70	; 112
    500c:	91 e0       	ldi	r25, 0x01	; 1
    500e:	9c 87       	std	Y+12, r25	; 0x0c
    5010:	8b 87       	std	Y+11, r24	; 0x0b
    5012:	8b 85       	ldd	r24, Y+11	; 0x0b
    5014:	9c 85       	ldd	r25, Y+12	; 0x0c
    5016:	8c 01       	movw	r16, r24
    5018:	c8 01       	movw	r24, r16
    501a:	01 97       	sbiw	r24, 0x01	; 1
    501c:	f1 f7       	brne	.-4      	; 0x501a <defaulty+0xd2>
    501e:	8c 01       	movw	r16, r24
    5020:	1c 87       	std	Y+12, r17	; 0x0c
    5022:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5024:	89 85       	ldd	r24, Y+9	; 0x09
    5026:	9a 85       	ldd	r25, Y+10	; 0x0a
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	9a 87       	std	Y+10, r25	; 0x0a
    502c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502e:	89 85       	ldd	r24, Y+9	; 0x09
    5030:	9a 85       	ldd	r25, Y+10	; 0x0a
    5032:	00 97       	sbiw	r24, 0x00	; 0
    5034:	51 f7       	brne	.-44     	; 0x500a <defaulty+0xc2>
    5036:	17 c0       	rjmp	.+46     	; 0x5066 <defaulty+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5038:	6d 81       	ldd	r22, Y+5	; 0x05
    503a:	7e 81       	ldd	r23, Y+6	; 0x06
    503c:	8f 81       	ldd	r24, Y+7	; 0x07
    503e:	98 85       	ldd	r25, Y+8	; 0x08
    5040:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	9a 87       	std	Y+10, r25	; 0x0a
    504a:	89 87       	std	Y+9, r24	; 0x09
    504c:	89 85       	ldd	r24, Y+9	; 0x09
    504e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5050:	9e 87       	std	Y+14, r25	; 0x0e
    5052:	8d 87       	std	Y+13, r24	; 0x0d
    5054:	8d 85       	ldd	r24, Y+13	; 0x0d
    5056:	9e 85       	ldd	r25, Y+14	; 0x0e
    5058:	8c 01       	movw	r16, r24
    505a:	c8 01       	movw	r24, r16
    505c:	01 97       	sbiw	r24, 0x01	; 1
    505e:	f1 f7       	brne	.-4      	; 0x505c <defaulty+0x114>
    5060:	8c 01       	movw	r16, r24
    5062:	1e 87       	std	Y+14, r17	; 0x0e
    5064:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	servo_2(0);
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	a6 e9       	ldi	r26, 0x96	; 150
    5072:	b3 e4       	ldi	r27, 0x43	; 67
    5074:	8f 87       	std	Y+15, r24	; 0x0f
    5076:	98 8b       	std	Y+16, r25	; 0x10
    5078:	a9 8b       	std	Y+17, r26	; 0x11
    507a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    507c:	6f 85       	ldd	r22, Y+15	; 0x0f
    507e:	78 89       	ldd	r23, Y+16	; 0x10
    5080:	89 89       	ldd	r24, Y+17	; 0x11
    5082:	9a 89       	ldd	r25, Y+18	; 0x12
    5084:	26 e6       	ldi	r18, 0x66	; 102
    5086:	36 e6       	ldi	r19, 0x66	; 102
    5088:	46 e6       	ldi	r20, 0x66	; 102
    508a:	55 e4       	ldi	r21, 0x45	; 69
    508c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	8b 8b       	std	Y+19, r24	; 0x13
    5096:	9c 8b       	std	Y+20, r25	; 0x14
    5098:	ad 8b       	std	Y+21, r26	; 0x15
    509a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    509c:	11 e0       	ldi	r17, 0x01	; 1
    509e:	6b 89       	ldd	r22, Y+19	; 0x13
    50a0:	7c 89       	ldd	r23, Y+20	; 0x14
    50a2:	8d 89       	ldd	r24, Y+21	; 0x15
    50a4:	9e 89       	ldd	r25, Y+22	; 0x16
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	40 e8       	ldi	r20, 0x80	; 128
    50ac:	5f e3       	ldi	r21, 0x3F	; 63
    50ae:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    50b2:	88 23       	and	r24, r24
    50b4:	0c f0       	brlt	.+2      	; 0x50b8 <defaulty+0x170>
    50b6:	10 e0       	ldi	r17, 0x00	; 0
    50b8:	11 23       	and	r17, r17
    50ba:	29 f0       	breq	.+10     	; 0x50c6 <defaulty+0x17e>
		__ticks = 1;
    50bc:	81 e0       	ldi	r24, 0x01	; 1
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	98 8f       	std	Y+24, r25	; 0x18
    50c2:	8f 8b       	std	Y+23, r24	; 0x17
    50c4:	46 c0       	rjmp	.+140    	; 0x5152 <defaulty+0x20a>
	else if (__tmp > 65535)
    50c6:	11 e0       	ldi	r17, 0x01	; 1
    50c8:	6b 89       	ldd	r22, Y+19	; 0x13
    50ca:	7c 89       	ldd	r23, Y+20	; 0x14
    50cc:	8d 89       	ldd	r24, Y+21	; 0x15
    50ce:	9e 89       	ldd	r25, Y+22	; 0x16
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	3f ef       	ldi	r19, 0xFF	; 255
    50d4:	4f e7       	ldi	r20, 0x7F	; 127
    50d6:	57 e4       	ldi	r21, 0x47	; 71
    50d8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    50dc:	18 16       	cp	r1, r24
    50de:	0c f0       	brlt	.+2      	; 0x50e2 <defaulty+0x19a>
    50e0:	10 e0       	ldi	r17, 0x00	; 0
    50e2:	11 23       	and	r17, r17
    50e4:	61 f1       	breq	.+88     	; 0x513e <defaulty+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    50e8:	78 89       	ldd	r23, Y+16	; 0x10
    50ea:	89 89       	ldd	r24, Y+17	; 0x11
    50ec:	9a 89       	ldd	r25, Y+18	; 0x12
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e2       	ldi	r20, 0x20	; 32
    50f4:	51 e4       	ldi	r21, 0x41	; 65
    50f6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    50fa:	dc 01       	movw	r26, r24
    50fc:	cb 01       	movw	r24, r22
    50fe:	bc 01       	movw	r22, r24
    5100:	cd 01       	movw	r24, r26
    5102:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	98 8f       	std	Y+24, r25	; 0x18
    510c:	8f 8b       	std	Y+23, r24	; 0x17
    510e:	12 c0       	rjmp	.+36     	; 0x5134 <defaulty+0x1ec>
    5110:	80 e7       	ldi	r24, 0x70	; 112
    5112:	91 e0       	ldi	r25, 0x01	; 1
    5114:	9a 8f       	std	Y+26, r25	; 0x1a
    5116:	89 8f       	std	Y+25, r24	; 0x19
    5118:	89 8d       	ldd	r24, Y+25	; 0x19
    511a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    511c:	8c 01       	movw	r16, r24
    511e:	c8 01       	movw	r24, r16
    5120:	01 97       	sbiw	r24, 0x01	; 1
    5122:	f1 f7       	brne	.-4      	; 0x5120 <defaulty+0x1d8>
    5124:	8c 01       	movw	r16, r24
    5126:	1a 8f       	std	Y+26, r17	; 0x1a
    5128:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    512a:	8f 89       	ldd	r24, Y+23	; 0x17
    512c:	98 8d       	ldd	r25, Y+24	; 0x18
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	98 8f       	std	Y+24, r25	; 0x18
    5132:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5134:	8f 89       	ldd	r24, Y+23	; 0x17
    5136:	98 8d       	ldd	r25, Y+24	; 0x18
    5138:	00 97       	sbiw	r24, 0x00	; 0
    513a:	51 f7       	brne	.-44     	; 0x5110 <defaulty+0x1c8>
    513c:	17 c0       	rjmp	.+46     	; 0x516c <defaulty+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    513e:	6b 89       	ldd	r22, Y+19	; 0x13
    5140:	7c 89       	ldd	r23, Y+20	; 0x14
    5142:	8d 89       	ldd	r24, Y+21	; 0x15
    5144:	9e 89       	ldd	r25, Y+22	; 0x16
    5146:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	98 8f       	std	Y+24, r25	; 0x18
    5150:	8f 8b       	std	Y+23, r24	; 0x17
    5152:	8f 89       	ldd	r24, Y+23	; 0x17
    5154:	98 8d       	ldd	r25, Y+24	; 0x18
    5156:	9c 8f       	std	Y+28, r25	; 0x1c
    5158:	8b 8f       	std	Y+27, r24	; 0x1b
    515a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    515c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    515e:	8c 01       	movw	r16, r24
    5160:	c8 01       	movw	r24, r16
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	f1 f7       	brne	.-4      	; 0x5162 <defaulty+0x21a>
    5166:	8c 01       	movw	r16, r24
    5168:	1c 8f       	std	Y+28, r17	; 0x1c
    516a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
}
    516c:	6c 96       	adiw	r28, 0x1c	; 28
    516e:	0f b6       	in	r0, 0x3f	; 63
    5170:	f8 94       	cli
    5172:	de bf       	out	0x3e, r29	; 62
    5174:	0f be       	out	0x3f, r0	; 63
    5176:	cd bf       	out	0x3d, r28	; 61
    5178:	df 91       	pop	r29
    517a:	cf 91       	pop	r28
    517c:	1f 91       	pop	r17
    517e:	0f 91       	pop	r16
    5180:	08 95       	ret

00005182 <left_cycle>:
void left_cycle()
{
    5182:	0f 93       	push	r16
    5184:	1f 93       	push	r17
    5186:	cf 93       	push	r28
    5188:	df 93       	push	r29
    518a:	cd b7       	in	r28, 0x3d	; 61
    518c:	de b7       	in	r29, 0x3e	; 62
    518e:	c6 54       	subi	r28, 0x46	; 70
    5190:	d0 40       	sbci	r29, 0x00	; 0
    5192:	0f b6       	in	r0, 0x3f	; 63
    5194:	f8 94       	cli
    5196:	de bf       	out	0x3e, r29	; 62
    5198:	0f be       	out	0x3f, r0	; 63
    519a:	cd bf       	out	0x3d, r28	; 61
	
	gripper_open();
    519c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	a6 e9       	ldi	r26, 0x96	; 150
    51a6:	b3 e4       	ldi	r27, 0x43	; 67
    51a8:	89 83       	std	Y+1, r24	; 0x01
    51aa:	9a 83       	std	Y+2, r25	; 0x02
    51ac:	ab 83       	std	Y+3, r26	; 0x03
    51ae:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    51b0:	69 81       	ldd	r22, Y+1	; 0x01
    51b2:	7a 81       	ldd	r23, Y+2	; 0x02
    51b4:	8b 81       	ldd	r24, Y+3	; 0x03
    51b6:	9c 81       	ldd	r25, Y+4	; 0x04
    51b8:	26 e6       	ldi	r18, 0x66	; 102
    51ba:	36 e6       	ldi	r19, 0x66	; 102
    51bc:	46 e6       	ldi	r20, 0x66	; 102
    51be:	55 e4       	ldi	r21, 0x45	; 69
    51c0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	8d 83       	std	Y+5, r24	; 0x05
    51ca:	9e 83       	std	Y+6, r25	; 0x06
    51cc:	af 83       	std	Y+7, r26	; 0x07
    51ce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    51d0:	11 e0       	ldi	r17, 0x01	; 1
    51d2:	6d 81       	ldd	r22, Y+5	; 0x05
    51d4:	7e 81       	ldd	r23, Y+6	; 0x06
    51d6:	8f 81       	ldd	r24, Y+7	; 0x07
    51d8:	98 85       	ldd	r25, Y+8	; 0x08
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	40 e8       	ldi	r20, 0x80	; 128
    51e0:	5f e3       	ldi	r21, 0x3F	; 63
    51e2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    51e6:	88 23       	and	r24, r24
    51e8:	0c f0       	brlt	.+2      	; 0x51ec <left_cycle+0x6a>
    51ea:	10 e0       	ldi	r17, 0x00	; 0
    51ec:	11 23       	and	r17, r17
    51ee:	29 f0       	breq	.+10     	; 0x51fa <left_cycle+0x78>
		__ticks = 1;
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	9a 87       	std	Y+10, r25	; 0x0a
    51f6:	89 87       	std	Y+9, r24	; 0x09
    51f8:	46 c0       	rjmp	.+140    	; 0x5286 <left_cycle+0x104>
	else if (__tmp > 65535)
    51fa:	11 e0       	ldi	r17, 0x01	; 1
    51fc:	6d 81       	ldd	r22, Y+5	; 0x05
    51fe:	7e 81       	ldd	r23, Y+6	; 0x06
    5200:	8f 81       	ldd	r24, Y+7	; 0x07
    5202:	98 85       	ldd	r25, Y+8	; 0x08
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	3f ef       	ldi	r19, 0xFF	; 255
    5208:	4f e7       	ldi	r20, 0x7F	; 127
    520a:	57 e4       	ldi	r21, 0x47	; 71
    520c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5210:	18 16       	cp	r1, r24
    5212:	0c f0       	brlt	.+2      	; 0x5216 <left_cycle+0x94>
    5214:	10 e0       	ldi	r17, 0x00	; 0
    5216:	11 23       	and	r17, r17
    5218:	61 f1       	breq	.+88     	; 0x5272 <left_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    521a:	69 81       	ldd	r22, Y+1	; 0x01
    521c:	7a 81       	ldd	r23, Y+2	; 0x02
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	9c 81       	ldd	r25, Y+4	; 0x04
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	40 e2       	ldi	r20, 0x20	; 32
    5228:	51 e4       	ldi	r21, 0x41	; 65
    522a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	bc 01       	movw	r22, r24
    5234:	cd 01       	movw	r24, r26
    5236:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    523a:	dc 01       	movw	r26, r24
    523c:	cb 01       	movw	r24, r22
    523e:	9a 87       	std	Y+10, r25	; 0x0a
    5240:	89 87       	std	Y+9, r24	; 0x09
    5242:	12 c0       	rjmp	.+36     	; 0x5268 <left_cycle+0xe6>
    5244:	80 e7       	ldi	r24, 0x70	; 112
    5246:	91 e0       	ldi	r25, 0x01	; 1
    5248:	9c 87       	std	Y+12, r25	; 0x0c
    524a:	8b 87       	std	Y+11, r24	; 0x0b
    524c:	8b 85       	ldd	r24, Y+11	; 0x0b
    524e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5250:	8c 01       	movw	r16, r24
    5252:	c8 01       	movw	r24, r16
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	f1 f7       	brne	.-4      	; 0x5254 <left_cycle+0xd2>
    5258:	8c 01       	movw	r16, r24
    525a:	1c 87       	std	Y+12, r17	; 0x0c
    525c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    525e:	89 85       	ldd	r24, Y+9	; 0x09
    5260:	9a 85       	ldd	r25, Y+10	; 0x0a
    5262:	01 97       	sbiw	r24, 0x01	; 1
    5264:	9a 87       	std	Y+10, r25	; 0x0a
    5266:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	00 97       	sbiw	r24, 0x00	; 0
    526e:	51 f7       	brne	.-44     	; 0x5244 <left_cycle+0xc2>
    5270:	17 c0       	rjmp	.+46     	; 0x52a0 <left_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5272:	6d 81       	ldd	r22, Y+5	; 0x05
    5274:	7e 81       	ldd	r23, Y+6	; 0x06
    5276:	8f 81       	ldd	r24, Y+7	; 0x07
    5278:	98 85       	ldd	r25, Y+8	; 0x08
    527a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	9a 87       	std	Y+10, r25	; 0x0a
    5284:	89 87       	std	Y+9, r24	; 0x09
    5286:	89 85       	ldd	r24, Y+9	; 0x09
    5288:	9a 85       	ldd	r25, Y+10	; 0x0a
    528a:	9e 87       	std	Y+14, r25	; 0x0e
    528c:	8d 87       	std	Y+13, r24	; 0x0d
    528e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5290:	9e 85       	ldd	r25, Y+14	; 0x0e
    5292:	8c 01       	movw	r16, r24
    5294:	f8 01       	movw	r30, r16
    5296:	31 97       	sbiw	r30, 0x01	; 1
    5298:	f1 f7       	brne	.-4      	; 0x5296 <left_cycle+0x114>
    529a:	8f 01       	movw	r16, r30
    529c:	1e 87       	std	Y+14, r17	; 0x0e
    529e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_left();
    52a0:	0e 94 2c 20 	call	0x4058	; 0x4058 <arm_rotate_left>
    52a4:	80 e0       	ldi	r24, 0x00	; 0
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	a6 e9       	ldi	r26, 0x96	; 150
    52aa:	b3 e4       	ldi	r27, 0x43	; 67
    52ac:	8f 87       	std	Y+15, r24	; 0x0f
    52ae:	98 8b       	std	Y+16, r25	; 0x10
    52b0:	a9 8b       	std	Y+17, r26	; 0x11
    52b2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    52b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    52b6:	78 89       	ldd	r23, Y+16	; 0x10
    52b8:	89 89       	ldd	r24, Y+17	; 0x11
    52ba:	9a 89       	ldd	r25, Y+18	; 0x12
    52bc:	26 e6       	ldi	r18, 0x66	; 102
    52be:	36 e6       	ldi	r19, 0x66	; 102
    52c0:	46 e6       	ldi	r20, 0x66	; 102
    52c2:	55 e4       	ldi	r21, 0x45	; 69
    52c4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    52c8:	dc 01       	movw	r26, r24
    52ca:	cb 01       	movw	r24, r22
    52cc:	8b 8b       	std	Y+19, r24	; 0x13
    52ce:	9c 8b       	std	Y+20, r25	; 0x14
    52d0:	ad 8b       	std	Y+21, r26	; 0x15
    52d2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    52d4:	11 e0       	ldi	r17, 0x01	; 1
    52d6:	6b 89       	ldd	r22, Y+19	; 0x13
    52d8:	7c 89       	ldd	r23, Y+20	; 0x14
    52da:	8d 89       	ldd	r24, Y+21	; 0x15
    52dc:	9e 89       	ldd	r25, Y+22	; 0x16
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	40 e8       	ldi	r20, 0x80	; 128
    52e4:	5f e3       	ldi	r21, 0x3F	; 63
    52e6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    52ea:	88 23       	and	r24, r24
    52ec:	0c f0       	brlt	.+2      	; 0x52f0 <left_cycle+0x16e>
    52ee:	10 e0       	ldi	r17, 0x00	; 0
    52f0:	11 23       	and	r17, r17
    52f2:	29 f0       	breq	.+10     	; 0x52fe <left_cycle+0x17c>
		__ticks = 1;
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	98 8f       	std	Y+24, r25	; 0x18
    52fa:	8f 8b       	std	Y+23, r24	; 0x17
    52fc:	46 c0       	rjmp	.+140    	; 0x538a <left_cycle+0x208>
	else if (__tmp > 65535)
    52fe:	11 e0       	ldi	r17, 0x01	; 1
    5300:	6b 89       	ldd	r22, Y+19	; 0x13
    5302:	7c 89       	ldd	r23, Y+20	; 0x14
    5304:	8d 89       	ldd	r24, Y+21	; 0x15
    5306:	9e 89       	ldd	r25, Y+22	; 0x16
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	3f ef       	ldi	r19, 0xFF	; 255
    530c:	4f e7       	ldi	r20, 0x7F	; 127
    530e:	57 e4       	ldi	r21, 0x47	; 71
    5310:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5314:	18 16       	cp	r1, r24
    5316:	0c f0       	brlt	.+2      	; 0x531a <left_cycle+0x198>
    5318:	10 e0       	ldi	r17, 0x00	; 0
    531a:	11 23       	and	r17, r17
    531c:	61 f1       	breq	.+88     	; 0x5376 <left_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    531e:	6f 85       	ldd	r22, Y+15	; 0x0f
    5320:	78 89       	ldd	r23, Y+16	; 0x10
    5322:	89 89       	ldd	r24, Y+17	; 0x11
    5324:	9a 89       	ldd	r25, Y+18	; 0x12
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	40 e2       	ldi	r20, 0x20	; 32
    532c:	51 e4       	ldi	r21, 0x41	; 65
    532e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5332:	dc 01       	movw	r26, r24
    5334:	cb 01       	movw	r24, r22
    5336:	bc 01       	movw	r22, r24
    5338:	cd 01       	movw	r24, r26
    533a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    533e:	dc 01       	movw	r26, r24
    5340:	cb 01       	movw	r24, r22
    5342:	98 8f       	std	Y+24, r25	; 0x18
    5344:	8f 8b       	std	Y+23, r24	; 0x17
    5346:	12 c0       	rjmp	.+36     	; 0x536c <left_cycle+0x1ea>
    5348:	80 e7       	ldi	r24, 0x70	; 112
    534a:	91 e0       	ldi	r25, 0x01	; 1
    534c:	9a 8f       	std	Y+26, r25	; 0x1a
    534e:	89 8f       	std	Y+25, r24	; 0x19
    5350:	89 8d       	ldd	r24, Y+25	; 0x19
    5352:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5354:	8c 01       	movw	r16, r24
    5356:	c8 01       	movw	r24, r16
    5358:	01 97       	sbiw	r24, 0x01	; 1
    535a:	f1 f7       	brne	.-4      	; 0x5358 <left_cycle+0x1d6>
    535c:	8c 01       	movw	r16, r24
    535e:	1a 8f       	std	Y+26, r17	; 0x1a
    5360:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5362:	8f 89       	ldd	r24, Y+23	; 0x17
    5364:	98 8d       	ldd	r25, Y+24	; 0x18
    5366:	01 97       	sbiw	r24, 0x01	; 1
    5368:	98 8f       	std	Y+24, r25	; 0x18
    536a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    536c:	8f 89       	ldd	r24, Y+23	; 0x17
    536e:	98 8d       	ldd	r25, Y+24	; 0x18
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	51 f7       	brne	.-44     	; 0x5348 <left_cycle+0x1c6>
    5374:	17 c0       	rjmp	.+46     	; 0x53a4 <left_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5376:	6b 89       	ldd	r22, Y+19	; 0x13
    5378:	7c 89       	ldd	r23, Y+20	; 0x14
    537a:	8d 89       	ldd	r24, Y+21	; 0x15
    537c:	9e 89       	ldd	r25, Y+22	; 0x16
    537e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5382:	dc 01       	movw	r26, r24
    5384:	cb 01       	movw	r24, r22
    5386:	98 8f       	std	Y+24, r25	; 0x18
    5388:	8f 8b       	std	Y+23, r24	; 0x17
    538a:	8f 89       	ldd	r24, Y+23	; 0x17
    538c:	98 8d       	ldd	r25, Y+24	; 0x18
    538e:	9c 8f       	std	Y+28, r25	; 0x1c
    5390:	8b 8f       	std	Y+27, r24	; 0x1b
    5392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5396:	8c 01       	movw	r16, r24
    5398:	f8 01       	movw	r30, r16
    539a:	31 97       	sbiw	r30, 0x01	; 1
    539c:	f1 f7       	brne	.-4      	; 0x539a <left_cycle+0x218>
    539e:	8f 01       	movw	r16, r30
    53a0:	1c 8f       	std	Y+28, r17	; 0x1c
    53a2:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    53a4:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_forward>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a6 e9       	ldi	r26, 0x96	; 150
    53ae:	b3 e4       	ldi	r27, 0x43	; 67
    53b0:	8d 8f       	std	Y+29, r24	; 0x1d
    53b2:	9e 8f       	std	Y+30, r25	; 0x1e
    53b4:	af 8f       	std	Y+31, r26	; 0x1f
    53b6:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    53ba:	7e 8d       	ldd	r23, Y+30	; 0x1e
    53bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53be:	98 a1       	lds	r25, 0x48
    53c0:	26 e6       	ldi	r18, 0x66	; 102
    53c2:	36 e6       	ldi	r19, 0x66	; 102
    53c4:	46 e6       	ldi	r20, 0x66	; 102
    53c6:	55 e4       	ldi	r21, 0x45	; 69
    53c8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	89 a3       	lds	r24, 0x59
    53d2:	9a a3       	lds	r25, 0x5a
    53d4:	ab a3       	lds	r26, 0x5b
    53d6:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    53d8:	11 e0       	ldi	r17, 0x01	; 1
    53da:	69 a1       	lds	r22, 0x49
    53dc:	7a a1       	lds	r23, 0x4a
    53de:	8b a1       	lds	r24, 0x4b
    53e0:	9c a1       	lds	r25, 0x4c
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	40 e8       	ldi	r20, 0x80	; 128
    53e8:	5f e3       	ldi	r21, 0x3F	; 63
    53ea:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    53ee:	88 23       	and	r24, r24
    53f0:	0c f0       	brlt	.+2      	; 0x53f4 <left_cycle+0x272>
    53f2:	10 e0       	ldi	r17, 0x00	; 0
    53f4:	11 23       	and	r17, r17
    53f6:	29 f0       	breq	.+10     	; 0x5402 <left_cycle+0x280>
		__ticks = 1;
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	9e a3       	lds	r25, 0x5e
    53fe:	8d a3       	lds	r24, 0x5d
    5400:	46 c0       	rjmp	.+140    	; 0x548e <left_cycle+0x30c>
	else if (__tmp > 65535)
    5402:	11 e0       	ldi	r17, 0x01	; 1
    5404:	69 a1       	lds	r22, 0x49
    5406:	7a a1       	lds	r23, 0x4a
    5408:	8b a1       	lds	r24, 0x4b
    540a:	9c a1       	lds	r25, 0x4c
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	3f ef       	ldi	r19, 0xFF	; 255
    5410:	4f e7       	ldi	r20, 0x7F	; 127
    5412:	57 e4       	ldi	r21, 0x47	; 71
    5414:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5418:	18 16       	cp	r1, r24
    541a:	0c f0       	brlt	.+2      	; 0x541e <left_cycle+0x29c>
    541c:	10 e0       	ldi	r17, 0x00	; 0
    541e:	11 23       	and	r17, r17
    5420:	61 f1       	breq	.+88     	; 0x547a <left_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5422:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5424:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5428:	98 a1       	lds	r25, 0x48
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	40 e2       	ldi	r20, 0x20	; 32
    5430:	51 e4       	ldi	r21, 0x41	; 65
    5432:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	bc 01       	movw	r22, r24
    543c:	cd 01       	movw	r24, r26
    543e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	9e a3       	lds	r25, 0x5e
    5448:	8d a3       	lds	r24, 0x5d
    544a:	12 c0       	rjmp	.+36     	; 0x5470 <left_cycle+0x2ee>
    544c:	80 e7       	ldi	r24, 0x70	; 112
    544e:	91 e0       	ldi	r25, 0x01	; 1
    5450:	98 a7       	lds	r25, 0x78
    5452:	8f a3       	lds	r24, 0x5f
    5454:	8f a1       	lds	r24, 0x4f
    5456:	98 a5       	lds	r25, 0x68
    5458:	8c 01       	movw	r16, r24
    545a:	c8 01       	movw	r24, r16
    545c:	01 97       	sbiw	r24, 0x01	; 1
    545e:	f1 f7       	brne	.-4      	; 0x545c <left_cycle+0x2da>
    5460:	8c 01       	movw	r16, r24
    5462:	18 a7       	lds	r17, 0x78
    5464:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5466:	8d a1       	lds	r24, 0x4d
    5468:	9e a1       	lds	r25, 0x4e
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	9e a3       	lds	r25, 0x5e
    546e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5470:	8d a1       	lds	r24, 0x4d
    5472:	9e a1       	lds	r25, 0x4e
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	51 f7       	brne	.-44     	; 0x544c <left_cycle+0x2ca>
    5478:	17 c0       	rjmp	.+46     	; 0x54a8 <left_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547a:	69 a1       	lds	r22, 0x49
    547c:	7a a1       	lds	r23, 0x4a
    547e:	8b a1       	lds	r24, 0x4b
    5480:	9c a1       	lds	r25, 0x4c
    5482:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5486:	dc 01       	movw	r26, r24
    5488:	cb 01       	movw	r24, r22
    548a:	9e a3       	lds	r25, 0x5e
    548c:	8d a3       	lds	r24, 0x5d
    548e:	8d a1       	lds	r24, 0x4d
    5490:	9e a1       	lds	r25, 0x4e
    5492:	9a a7       	lds	r25, 0x7a
    5494:	89 a7       	lds	r24, 0x79
    5496:	89 a5       	lds	r24, 0x69
    5498:	9a a5       	lds	r25, 0x6a
    549a:	8c 01       	movw	r16, r24
    549c:	f8 01       	movw	r30, r16
    549e:	31 97       	sbiw	r30, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <left_cycle+0x31c>
    54a2:	8f 01       	movw	r16, r30
    54a4:	1a a7       	lds	r17, 0x7a
    54a6:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    54a8:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <gripper_close>
    54ac:	80 e0       	ldi	r24, 0x00	; 0
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	a6 e9       	ldi	r26, 0x96	; 150
    54b2:	b3 e4       	ldi	r27, 0x43	; 67
    54b4:	8b a7       	lds	r24, 0x7b
    54b6:	9c a7       	lds	r25, 0x7c
    54b8:	ad a7       	lds	r26, 0x7d
    54ba:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    54bc:	6b a5       	lds	r22, 0x6b
    54be:	7c a5       	lds	r23, 0x6c
    54c0:	8d a5       	lds	r24, 0x6d
    54c2:	9e a5       	lds	r25, 0x6e
    54c4:	26 e6       	ldi	r18, 0x66	; 102
    54c6:	36 e6       	ldi	r19, 0x66	; 102
    54c8:	46 e6       	ldi	r20, 0x66	; 102
    54ca:	55 e4       	ldi	r21, 0x45	; 69
    54cc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	8f a7       	lds	r24, 0x7f
    54d6:	98 ab       	sts	0x58, r25
    54d8:	a9 ab       	sts	0x59, r26
    54da:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    54dc:	11 e0       	ldi	r17, 0x01	; 1
    54de:	6f a5       	lds	r22, 0x6f
    54e0:	78 a9       	sts	0x48, r23
    54e2:	89 a9       	sts	0x49, r24
    54e4:	9a a9       	sts	0x4a, r25
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e8       	ldi	r20, 0x80	; 128
    54ec:	5f e3       	ldi	r21, 0x3F	; 63
    54ee:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    54f2:	88 23       	and	r24, r24
    54f4:	0c f0       	brlt	.+2      	; 0x54f8 <left_cycle+0x376>
    54f6:	10 e0       	ldi	r17, 0x00	; 0
    54f8:	11 23       	and	r17, r17
    54fa:	29 f0       	breq	.+10     	; 0x5506 <left_cycle+0x384>
		__ticks = 1;
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9c ab       	sts	0x5c, r25
    5502:	8b ab       	sts	0x5b, r24
    5504:	46 c0       	rjmp	.+140    	; 0x5592 <left_cycle+0x410>
	else if (__tmp > 65535)
    5506:	11 e0       	ldi	r17, 0x01	; 1
    5508:	6f a5       	lds	r22, 0x6f
    550a:	78 a9       	sts	0x48, r23
    550c:	89 a9       	sts	0x49, r24
    550e:	9a a9       	sts	0x4a, r25
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	3f ef       	ldi	r19, 0xFF	; 255
    5514:	4f e7       	ldi	r20, 0x7F	; 127
    5516:	57 e4       	ldi	r21, 0x47	; 71
    5518:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    551c:	18 16       	cp	r1, r24
    551e:	0c f0       	brlt	.+2      	; 0x5522 <left_cycle+0x3a0>
    5520:	10 e0       	ldi	r17, 0x00	; 0
    5522:	11 23       	and	r17, r17
    5524:	61 f1       	breq	.+88     	; 0x557e <left_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5526:	6b a5       	lds	r22, 0x6b
    5528:	7c a5       	lds	r23, 0x6c
    552a:	8d a5       	lds	r24, 0x6d
    552c:	9e a5       	lds	r25, 0x6e
    552e:	20 e0       	ldi	r18, 0x00	; 0
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	40 e2       	ldi	r20, 0x20	; 32
    5534:	51 e4       	ldi	r21, 0x41	; 65
    5536:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    553a:	dc 01       	movw	r26, r24
    553c:	cb 01       	movw	r24, r22
    553e:	bc 01       	movw	r22, r24
    5540:	cd 01       	movw	r24, r26
    5542:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5546:	dc 01       	movw	r26, r24
    5548:	cb 01       	movw	r24, r22
    554a:	9c ab       	sts	0x5c, r25
    554c:	8b ab       	sts	0x5b, r24
    554e:	12 c0       	rjmp	.+36     	; 0x5574 <left_cycle+0x3f2>
    5550:	80 e7       	ldi	r24, 0x70	; 112
    5552:	91 e0       	ldi	r25, 0x01	; 1
    5554:	9e ab       	sts	0x5e, r25
    5556:	8d ab       	sts	0x5d, r24
    5558:	8d a9       	sts	0x4d, r24
    555a:	9e a9       	sts	0x4e, r25
    555c:	8c 01       	movw	r16, r24
    555e:	c8 01       	movw	r24, r16
    5560:	01 97       	sbiw	r24, 0x01	; 1
    5562:	f1 f7       	brne	.-4      	; 0x5560 <left_cycle+0x3de>
    5564:	8c 01       	movw	r16, r24
    5566:	1e ab       	sts	0x5e, r17
    5568:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    556a:	8b a9       	sts	0x4b, r24
    556c:	9c a9       	sts	0x4c, r25
    556e:	01 97       	sbiw	r24, 0x01	; 1
    5570:	9c ab       	sts	0x5c, r25
    5572:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5574:	8b a9       	sts	0x4b, r24
    5576:	9c a9       	sts	0x4c, r25
    5578:	00 97       	sbiw	r24, 0x00	; 0
    557a:	51 f7       	brne	.-44     	; 0x5550 <left_cycle+0x3ce>
    557c:	17 c0       	rjmp	.+46     	; 0x55ac <left_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    557e:	6f a5       	lds	r22, 0x6f
    5580:	78 a9       	sts	0x48, r23
    5582:	89 a9       	sts	0x49, r24
    5584:	9a a9       	sts	0x4a, r25
    5586:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	9c ab       	sts	0x5c, r25
    5590:	8b ab       	sts	0x5b, r24
    5592:	8b a9       	sts	0x4b, r24
    5594:	9c a9       	sts	0x4c, r25
    5596:	98 af       	sts	0x78, r25
    5598:	8f ab       	sts	0x5f, r24
    559a:	8f a9       	sts	0x4f, r24
    559c:	98 ad       	sts	0x68, r25
    559e:	8c 01       	movw	r16, r24
    55a0:	f8 01       	movw	r30, r16
    55a2:	31 97       	sbiw	r30, 0x01	; 1
    55a4:	f1 f7       	brne	.-4      	; 0x55a2 <left_cycle+0x420>
    55a6:	8f 01       	movw	r16, r30
    55a8:	18 af       	sts	0x78, r17
    55aa:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    55ac:	0e 94 ce 24 	call	0x499c	; 0x499c <arm_backward>
    55b0:	80 e0       	ldi	r24, 0x00	; 0
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	a6 e9       	ldi	r26, 0x96	; 150
    55b6:	b3 e4       	ldi	r27, 0x43	; 67
    55b8:	89 af       	sts	0x79, r24
    55ba:	9a af       	sts	0x7a, r25
    55bc:	ab af       	sts	0x7b, r26
    55be:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    55c0:	69 ad       	sts	0x69, r22
    55c2:	7a ad       	sts	0x6a, r23
    55c4:	8b ad       	sts	0x6b, r24
    55c6:	9c ad       	sts	0x6c, r25
    55c8:	26 e6       	ldi	r18, 0x66	; 102
    55ca:	36 e6       	ldi	r19, 0x66	; 102
    55cc:	46 e6       	ldi	r20, 0x66	; 102
    55ce:	55 e4       	ldi	r21, 0x45	; 69
    55d0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	9e 01       	movw	r18, r28
    55da:	23 5c       	subi	r18, 0xC3	; 195
    55dc:	3f 4f       	sbci	r19, 0xFF	; 255
    55de:	f9 01       	movw	r30, r18
    55e0:	80 83       	st	Z, r24
    55e2:	91 83       	std	Z+1, r25	; 0x01
    55e4:	a2 83       	std	Z+2, r26	; 0x02
    55e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55e8:	11 e0       	ldi	r17, 0x01	; 1
    55ea:	ce 01       	movw	r24, r28
    55ec:	cd 96       	adiw	r24, 0x3d	; 61
    55ee:	fc 01       	movw	r30, r24
    55f0:	60 81       	ld	r22, Z
    55f2:	71 81       	ldd	r23, Z+1	; 0x01
    55f4:	82 81       	ldd	r24, Z+2	; 0x02
    55f6:	93 81       	ldd	r25, Z+3	; 0x03
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e8       	ldi	r20, 0x80	; 128
    55fe:	5f e3       	ldi	r21, 0x3F	; 63
    5600:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    5604:	88 23       	and	r24, r24
    5606:	0c f0       	brlt	.+2      	; 0x560a <left_cycle+0x488>
    5608:	10 e0       	ldi	r17, 0x00	; 0
    560a:	11 23       	and	r17, r17
    560c:	49 f0       	breq	.+18     	; 0x5620 <left_cycle+0x49e>
		__ticks = 1;
    560e:	ce 01       	movw	r24, r28
    5610:	8f 5b       	subi	r24, 0xBF	; 191
    5612:	9f 4f       	sbci	r25, 0xFF	; 255
    5614:	21 e0       	ldi	r18, 0x01	; 1
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	fc 01       	movw	r30, r24
    561a:	31 83       	std	Z+1, r19	; 0x01
    561c:	20 83       	st	Z, r18
    561e:	6e c0       	rjmp	.+220    	; 0x56fc <left_cycle+0x57a>
	else if (__tmp > 65535)
    5620:	11 e0       	ldi	r17, 0x01	; 1
    5622:	ce 01       	movw	r24, r28
    5624:	cd 96       	adiw	r24, 0x3d	; 61
    5626:	fc 01       	movw	r30, r24
    5628:	60 81       	ld	r22, Z
    562a:	71 81       	ldd	r23, Z+1	; 0x01
    562c:	82 81       	ldd	r24, Z+2	; 0x02
    562e:	93 81       	ldd	r25, Z+3	; 0x03
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	3f ef       	ldi	r19, 0xFF	; 255
    5634:	4f e7       	ldi	r20, 0x7F	; 127
    5636:	57 e4       	ldi	r21, 0x47	; 71
    5638:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    563c:	18 16       	cp	r1, r24
    563e:	0c f0       	brlt	.+2      	; 0x5642 <left_cycle+0x4c0>
    5640:	10 e0       	ldi	r17, 0x00	; 0
    5642:	11 23       	and	r17, r17
    5644:	09 f4       	brne	.+2      	; 0x5648 <left_cycle+0x4c6>
    5646:	49 c0       	rjmp	.+146    	; 0x56da <left_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5648:	69 ad       	sts	0x69, r22
    564a:	7a ad       	sts	0x6a, r23
    564c:	8b ad       	sts	0x6b, r24
    564e:	9c ad       	sts	0x6c, r25
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	40 e2       	ldi	r20, 0x20	; 32
    5656:	51 e4       	ldi	r21, 0x41	; 65
    5658:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	8e 01       	movw	r16, r28
    5662:	0f 5b       	subi	r16, 0xBF	; 191
    5664:	1f 4f       	sbci	r17, 0xFF	; 255
    5666:	bc 01       	movw	r22, r24
    5668:	cd 01       	movw	r24, r26
    566a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    566e:	dc 01       	movw	r26, r24
    5670:	cb 01       	movw	r24, r22
    5672:	f8 01       	movw	r30, r16
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	80 83       	st	Z, r24
    5678:	27 c0       	rjmp	.+78     	; 0x56c8 <left_cycle+0x546>
    567a:	ce 01       	movw	r24, r28
    567c:	8d 5b       	subi	r24, 0xBD	; 189
    567e:	9f 4f       	sbci	r25, 0xFF	; 255
    5680:	20 e7       	ldi	r18, 0x70	; 112
    5682:	31 e0       	ldi	r19, 0x01	; 1
    5684:	fc 01       	movw	r30, r24
    5686:	31 83       	std	Z+1, r19	; 0x01
    5688:	20 83       	st	Z, r18
    568a:	ce 01       	movw	r24, r28
    568c:	8d 5b       	subi	r24, 0xBD	; 189
    568e:	9f 4f       	sbci	r25, 0xFF	; 255
    5690:	fc 01       	movw	r30, r24
    5692:	80 81       	ld	r24, Z
    5694:	91 81       	ldd	r25, Z+1	; 0x01
    5696:	8c 01       	movw	r16, r24
    5698:	c8 01       	movw	r24, r16
    569a:	01 97       	sbiw	r24, 0x01	; 1
    569c:	f1 f7       	brne	.-4      	; 0x569a <left_cycle+0x518>
    569e:	8c 01       	movw	r16, r24
    56a0:	ce 01       	movw	r24, r28
    56a2:	8d 5b       	subi	r24, 0xBD	; 189
    56a4:	9f 4f       	sbci	r25, 0xFF	; 255
    56a6:	fc 01       	movw	r30, r24
    56a8:	11 83       	std	Z+1, r17	; 0x01
    56aa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ac:	ce 01       	movw	r24, r28
    56ae:	8f 5b       	subi	r24, 0xBF	; 191
    56b0:	9f 4f       	sbci	r25, 0xFF	; 255
    56b2:	9e 01       	movw	r18, r28
    56b4:	2f 5b       	subi	r18, 0xBF	; 191
    56b6:	3f 4f       	sbci	r19, 0xFF	; 255
    56b8:	f9 01       	movw	r30, r18
    56ba:	20 81       	ld	r18, Z
    56bc:	31 81       	ldd	r19, Z+1	; 0x01
    56be:	21 50       	subi	r18, 0x01	; 1
    56c0:	30 40       	sbci	r19, 0x00	; 0
    56c2:	fc 01       	movw	r30, r24
    56c4:	31 83       	std	Z+1, r19	; 0x01
    56c6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c8:	ce 01       	movw	r24, r28
    56ca:	8f 5b       	subi	r24, 0xBF	; 191
    56cc:	9f 4f       	sbci	r25, 0xFF	; 255
    56ce:	fc 01       	movw	r30, r24
    56d0:	80 81       	ld	r24, Z
    56d2:	91 81       	ldd	r25, Z+1	; 0x01
    56d4:	00 97       	sbiw	r24, 0x00	; 0
    56d6:	89 f6       	brne	.-94     	; 0x567a <left_cycle+0x4f8>
    56d8:	2e c0       	rjmp	.+92     	; 0x5736 <left_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56da:	8e 01       	movw	r16, r28
    56dc:	0f 5b       	subi	r16, 0xBF	; 191
    56de:	1f 4f       	sbci	r17, 0xFF	; 255
    56e0:	ce 01       	movw	r24, r28
    56e2:	cd 96       	adiw	r24, 0x3d	; 61
    56e4:	fc 01       	movw	r30, r24
    56e6:	60 81       	ld	r22, Z
    56e8:	71 81       	ldd	r23, Z+1	; 0x01
    56ea:	82 81       	ldd	r24, Z+2	; 0x02
    56ec:	93 81       	ldd	r25, Z+3	; 0x03
    56ee:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    56f2:	dc 01       	movw	r26, r24
    56f4:	cb 01       	movw	r24, r22
    56f6:	f8 01       	movw	r30, r16
    56f8:	91 83       	std	Z+1, r25	; 0x01
    56fa:	80 83       	st	Z, r24
    56fc:	ce 01       	movw	r24, r28
    56fe:	8b 5b       	subi	r24, 0xBB	; 187
    5700:	9f 4f       	sbci	r25, 0xFF	; 255
    5702:	9e 01       	movw	r18, r28
    5704:	2f 5b       	subi	r18, 0xBF	; 191
    5706:	3f 4f       	sbci	r19, 0xFF	; 255
    5708:	f9 01       	movw	r30, r18
    570a:	20 81       	ld	r18, Z
    570c:	31 81       	ldd	r19, Z+1	; 0x01
    570e:	fc 01       	movw	r30, r24
    5710:	31 83       	std	Z+1, r19	; 0x01
    5712:	20 83       	st	Z, r18
    5714:	ce 01       	movw	r24, r28
    5716:	8b 5b       	subi	r24, 0xBB	; 187
    5718:	9f 4f       	sbci	r25, 0xFF	; 255
    571a:	fc 01       	movw	r30, r24
    571c:	80 81       	ld	r24, Z
    571e:	91 81       	ldd	r25, Z+1	; 0x01
    5720:	8c 01       	movw	r16, r24
    5722:	c8 01       	movw	r24, r16
    5724:	01 97       	sbiw	r24, 0x01	; 1
    5726:	f1 f7       	brne	.-4      	; 0x5724 <left_cycle+0x5a2>
    5728:	8c 01       	movw	r16, r24
    572a:	ce 01       	movw	r24, r28
    572c:	8b 5b       	subi	r24, 0xBB	; 187
    572e:	9f 4f       	sbci	r25, 0xFF	; 255
    5730:	fc 01       	movw	r30, r24
    5732:	11 83       	std	Z+1, r17	; 0x01
    5734:	00 83       	st	Z, r16
	_delay_ms(300);

}
    5736:	ca 5b       	subi	r28, 0xBA	; 186
    5738:	df 4f       	sbci	r29, 0xFF	; 255
    573a:	0f b6       	in	r0, 0x3f	; 63
    573c:	f8 94       	cli
    573e:	de bf       	out	0x3e, r29	; 62
    5740:	0f be       	out	0x3f, r0	; 63
    5742:	cd bf       	out	0x3d, r28	; 61
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	08 95       	ret

0000574e <right_cycle>:

void right_cycle()
{
    574e:	0f 93       	push	r16
    5750:	1f 93       	push	r17
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	c6 54       	subi	r28, 0x46	; 70
    575c:	d0 40       	sbci	r29, 0x00	; 0
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	cd bf       	out	0x3d, r28	; 61

	gripper_open();
    5768:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	a6 e9       	ldi	r26, 0x96	; 150
    5772:	b3 e4       	ldi	r27, 0x43	; 67
    5774:	89 83       	std	Y+1, r24	; 0x01
    5776:	9a 83       	std	Y+2, r25	; 0x02
    5778:	ab 83       	std	Y+3, r26	; 0x03
    577a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    577c:	69 81       	ldd	r22, Y+1	; 0x01
    577e:	7a 81       	ldd	r23, Y+2	; 0x02
    5780:	8b 81       	ldd	r24, Y+3	; 0x03
    5782:	9c 81       	ldd	r25, Y+4	; 0x04
    5784:	26 e6       	ldi	r18, 0x66	; 102
    5786:	36 e6       	ldi	r19, 0x66	; 102
    5788:	46 e6       	ldi	r20, 0x66	; 102
    578a:	55 e4       	ldi	r21, 0x45	; 69
    578c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	8d 83       	std	Y+5, r24	; 0x05
    5796:	9e 83       	std	Y+6, r25	; 0x06
    5798:	af 83       	std	Y+7, r26	; 0x07
    579a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    579c:	11 e0       	ldi	r17, 0x01	; 1
    579e:	6d 81       	ldd	r22, Y+5	; 0x05
    57a0:	7e 81       	ldd	r23, Y+6	; 0x06
    57a2:	8f 81       	ldd	r24, Y+7	; 0x07
    57a4:	98 85       	ldd	r25, Y+8	; 0x08
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e8       	ldi	r20, 0x80	; 128
    57ac:	5f e3       	ldi	r21, 0x3F	; 63
    57ae:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    57b2:	88 23       	and	r24, r24
    57b4:	0c f0       	brlt	.+2      	; 0x57b8 <right_cycle+0x6a>
    57b6:	10 e0       	ldi	r17, 0x00	; 0
    57b8:	11 23       	and	r17, r17
    57ba:	29 f0       	breq	.+10     	; 0x57c6 <right_cycle+0x78>
		__ticks = 1;
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	9a 87       	std	Y+10, r25	; 0x0a
    57c2:	89 87       	std	Y+9, r24	; 0x09
    57c4:	46 c0       	rjmp	.+140    	; 0x5852 <right_cycle+0x104>
	else if (__tmp > 65535)
    57c6:	11 e0       	ldi	r17, 0x01	; 1
    57c8:	6d 81       	ldd	r22, Y+5	; 0x05
    57ca:	7e 81       	ldd	r23, Y+6	; 0x06
    57cc:	8f 81       	ldd	r24, Y+7	; 0x07
    57ce:	98 85       	ldd	r25, Y+8	; 0x08
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	3f ef       	ldi	r19, 0xFF	; 255
    57d4:	4f e7       	ldi	r20, 0x7F	; 127
    57d6:	57 e4       	ldi	r21, 0x47	; 71
    57d8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    57dc:	18 16       	cp	r1, r24
    57de:	0c f0       	brlt	.+2      	; 0x57e2 <right_cycle+0x94>
    57e0:	10 e0       	ldi	r17, 0x00	; 0
    57e2:	11 23       	and	r17, r17
    57e4:	61 f1       	breq	.+88     	; 0x583e <right_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e6:	69 81       	ldd	r22, Y+1	; 0x01
    57e8:	7a 81       	ldd	r23, Y+2	; 0x02
    57ea:	8b 81       	ldd	r24, Y+3	; 0x03
    57ec:	9c 81       	ldd	r25, Y+4	; 0x04
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	40 e2       	ldi	r20, 0x20	; 32
    57f4:	51 e4       	ldi	r21, 0x41	; 65
    57f6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	bc 01       	movw	r22, r24
    5800:	cd 01       	movw	r24, r26
    5802:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	9a 87       	std	Y+10, r25	; 0x0a
    580c:	89 87       	std	Y+9, r24	; 0x09
    580e:	12 c0       	rjmp	.+36     	; 0x5834 <right_cycle+0xe6>
    5810:	80 e7       	ldi	r24, 0x70	; 112
    5812:	91 e0       	ldi	r25, 0x01	; 1
    5814:	9c 87       	std	Y+12, r25	; 0x0c
    5816:	8b 87       	std	Y+11, r24	; 0x0b
    5818:	8b 85       	ldd	r24, Y+11	; 0x0b
    581a:	9c 85       	ldd	r25, Y+12	; 0x0c
    581c:	8c 01       	movw	r16, r24
    581e:	c8 01       	movw	r24, r16
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <right_cycle+0xd2>
    5824:	8c 01       	movw	r16, r24
    5826:	1c 87       	std	Y+12, r17	; 0x0c
    5828:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582a:	89 85       	ldd	r24, Y+9	; 0x09
    582c:	9a 85       	ldd	r25, Y+10	; 0x0a
    582e:	01 97       	sbiw	r24, 0x01	; 1
    5830:	9a 87       	std	Y+10, r25	; 0x0a
    5832:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5834:	89 85       	ldd	r24, Y+9	; 0x09
    5836:	9a 85       	ldd	r25, Y+10	; 0x0a
    5838:	00 97       	sbiw	r24, 0x00	; 0
    583a:	51 f7       	brne	.-44     	; 0x5810 <right_cycle+0xc2>
    583c:	17 c0       	rjmp	.+46     	; 0x586c <right_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583e:	6d 81       	ldd	r22, Y+5	; 0x05
    5840:	7e 81       	ldd	r23, Y+6	; 0x06
    5842:	8f 81       	ldd	r24, Y+7	; 0x07
    5844:	98 85       	ldd	r25, Y+8	; 0x08
    5846:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    584a:	dc 01       	movw	r26, r24
    584c:	cb 01       	movw	r24, r22
    584e:	9a 87       	std	Y+10, r25	; 0x0a
    5850:	89 87       	std	Y+9, r24	; 0x09
    5852:	89 85       	ldd	r24, Y+9	; 0x09
    5854:	9a 85       	ldd	r25, Y+10	; 0x0a
    5856:	9e 87       	std	Y+14, r25	; 0x0e
    5858:	8d 87       	std	Y+13, r24	; 0x0d
    585a:	8d 85       	ldd	r24, Y+13	; 0x0d
    585c:	9e 85       	ldd	r25, Y+14	; 0x0e
    585e:	8c 01       	movw	r16, r24
    5860:	f8 01       	movw	r30, r16
    5862:	31 97       	sbiw	r30, 0x01	; 1
    5864:	f1 f7       	brne	.-4      	; 0x5862 <right_cycle+0x114>
    5866:	8f 01       	movw	r16, r30
    5868:	1e 87       	std	Y+14, r17	; 0x0e
    586a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_right();
    586c:	0e 94 55 21 	call	0x42aa	; 0x42aa <arm_rotate_right>
    5870:	80 e0       	ldi	r24, 0x00	; 0
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	a6 e9       	ldi	r26, 0x96	; 150
    5876:	b3 e4       	ldi	r27, 0x43	; 67
    5878:	8f 87       	std	Y+15, r24	; 0x0f
    587a:	98 8b       	std	Y+16, r25	; 0x10
    587c:	a9 8b       	std	Y+17, r26	; 0x11
    587e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5880:	6f 85       	ldd	r22, Y+15	; 0x0f
    5882:	78 89       	ldd	r23, Y+16	; 0x10
    5884:	89 89       	ldd	r24, Y+17	; 0x11
    5886:	9a 89       	ldd	r25, Y+18	; 0x12
    5888:	26 e6       	ldi	r18, 0x66	; 102
    588a:	36 e6       	ldi	r19, 0x66	; 102
    588c:	46 e6       	ldi	r20, 0x66	; 102
    588e:	55 e4       	ldi	r21, 0x45	; 69
    5890:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5894:	dc 01       	movw	r26, r24
    5896:	cb 01       	movw	r24, r22
    5898:	8b 8b       	std	Y+19, r24	; 0x13
    589a:	9c 8b       	std	Y+20, r25	; 0x14
    589c:	ad 8b       	std	Y+21, r26	; 0x15
    589e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    58a0:	11 e0       	ldi	r17, 0x01	; 1
    58a2:	6b 89       	ldd	r22, Y+19	; 0x13
    58a4:	7c 89       	ldd	r23, Y+20	; 0x14
    58a6:	8d 89       	ldd	r24, Y+21	; 0x15
    58a8:	9e 89       	ldd	r25, Y+22	; 0x16
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	40 e8       	ldi	r20, 0x80	; 128
    58b0:	5f e3       	ldi	r21, 0x3F	; 63
    58b2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    58b6:	88 23       	and	r24, r24
    58b8:	0c f0       	brlt	.+2      	; 0x58bc <right_cycle+0x16e>
    58ba:	10 e0       	ldi	r17, 0x00	; 0
    58bc:	11 23       	and	r17, r17
    58be:	29 f0       	breq	.+10     	; 0x58ca <right_cycle+0x17c>
		__ticks = 1;
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	98 8f       	std	Y+24, r25	; 0x18
    58c6:	8f 8b       	std	Y+23, r24	; 0x17
    58c8:	46 c0       	rjmp	.+140    	; 0x5956 <right_cycle+0x208>
	else if (__tmp > 65535)
    58ca:	11 e0       	ldi	r17, 0x01	; 1
    58cc:	6b 89       	ldd	r22, Y+19	; 0x13
    58ce:	7c 89       	ldd	r23, Y+20	; 0x14
    58d0:	8d 89       	ldd	r24, Y+21	; 0x15
    58d2:	9e 89       	ldd	r25, Y+22	; 0x16
    58d4:	20 e0       	ldi	r18, 0x00	; 0
    58d6:	3f ef       	ldi	r19, 0xFF	; 255
    58d8:	4f e7       	ldi	r20, 0x7F	; 127
    58da:	57 e4       	ldi	r21, 0x47	; 71
    58dc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    58e0:	18 16       	cp	r1, r24
    58e2:	0c f0       	brlt	.+2      	; 0x58e6 <right_cycle+0x198>
    58e4:	10 e0       	ldi	r17, 0x00	; 0
    58e6:	11 23       	and	r17, r17
    58e8:	61 f1       	breq	.+88     	; 0x5942 <right_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    58ec:	78 89       	ldd	r23, Y+16	; 0x10
    58ee:	89 89       	ldd	r24, Y+17	; 0x11
    58f0:	9a 89       	ldd	r25, Y+18	; 0x12
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	40 e2       	ldi	r20, 0x20	; 32
    58f8:	51 e4       	ldi	r21, 0x41	; 65
    58fa:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    58fe:	dc 01       	movw	r26, r24
    5900:	cb 01       	movw	r24, r22
    5902:	bc 01       	movw	r22, r24
    5904:	cd 01       	movw	r24, r26
    5906:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	98 8f       	std	Y+24, r25	; 0x18
    5910:	8f 8b       	std	Y+23, r24	; 0x17
    5912:	12 c0       	rjmp	.+36     	; 0x5938 <right_cycle+0x1ea>
    5914:	80 e7       	ldi	r24, 0x70	; 112
    5916:	91 e0       	ldi	r25, 0x01	; 1
    5918:	9a 8f       	std	Y+26, r25	; 0x1a
    591a:	89 8f       	std	Y+25, r24	; 0x19
    591c:	89 8d       	ldd	r24, Y+25	; 0x19
    591e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5920:	8c 01       	movw	r16, r24
    5922:	c8 01       	movw	r24, r16
    5924:	01 97       	sbiw	r24, 0x01	; 1
    5926:	f1 f7       	brne	.-4      	; 0x5924 <right_cycle+0x1d6>
    5928:	8c 01       	movw	r16, r24
    592a:	1a 8f       	std	Y+26, r17	; 0x1a
    592c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    592e:	8f 89       	ldd	r24, Y+23	; 0x17
    5930:	98 8d       	ldd	r25, Y+24	; 0x18
    5932:	01 97       	sbiw	r24, 0x01	; 1
    5934:	98 8f       	std	Y+24, r25	; 0x18
    5936:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5938:	8f 89       	ldd	r24, Y+23	; 0x17
    593a:	98 8d       	ldd	r25, Y+24	; 0x18
    593c:	00 97       	sbiw	r24, 0x00	; 0
    593e:	51 f7       	brne	.-44     	; 0x5914 <right_cycle+0x1c6>
    5940:	17 c0       	rjmp	.+46     	; 0x5970 <right_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5942:	6b 89       	ldd	r22, Y+19	; 0x13
    5944:	7c 89       	ldd	r23, Y+20	; 0x14
    5946:	8d 89       	ldd	r24, Y+21	; 0x15
    5948:	9e 89       	ldd	r25, Y+22	; 0x16
    594a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    594e:	dc 01       	movw	r26, r24
    5950:	cb 01       	movw	r24, r22
    5952:	98 8f       	std	Y+24, r25	; 0x18
    5954:	8f 8b       	std	Y+23, r24	; 0x17
    5956:	8f 89       	ldd	r24, Y+23	; 0x17
    5958:	98 8d       	ldd	r25, Y+24	; 0x18
    595a:	9c 8f       	std	Y+28, r25	; 0x1c
    595c:	8b 8f       	std	Y+27, r24	; 0x1b
    595e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5962:	8c 01       	movw	r16, r24
    5964:	f8 01       	movw	r30, r16
    5966:	31 97       	sbiw	r30, 0x01	; 1
    5968:	f1 f7       	brne	.-4      	; 0x5966 <right_cycle+0x218>
    596a:	8f 01       	movw	r16, r30
    596c:	1c 8f       	std	Y+28, r17	; 0x1c
    596e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    5970:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_forward>
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	a6 e9       	ldi	r26, 0x96	; 150
    597a:	b3 e4       	ldi	r27, 0x43	; 67
    597c:	8d 8f       	std	Y+29, r24	; 0x1d
    597e:	9e 8f       	std	Y+30, r25	; 0x1e
    5980:	af 8f       	std	Y+31, r26	; 0x1f
    5982:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5984:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5986:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5988:	8f 8d       	ldd	r24, Y+31	; 0x1f
    598a:	98 a1       	lds	r25, 0x48
    598c:	26 e6       	ldi	r18, 0x66	; 102
    598e:	36 e6       	ldi	r19, 0x66	; 102
    5990:	46 e6       	ldi	r20, 0x66	; 102
    5992:	55 e4       	ldi	r21, 0x45	; 69
    5994:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	89 a3       	lds	r24, 0x59
    599e:	9a a3       	lds	r25, 0x5a
    59a0:	ab a3       	lds	r26, 0x5b
    59a2:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    59a4:	11 e0       	ldi	r17, 0x01	; 1
    59a6:	69 a1       	lds	r22, 0x49
    59a8:	7a a1       	lds	r23, 0x4a
    59aa:	8b a1       	lds	r24, 0x4b
    59ac:	9c a1       	lds	r25, 0x4c
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	40 e8       	ldi	r20, 0x80	; 128
    59b4:	5f e3       	ldi	r21, 0x3F	; 63
    59b6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    59ba:	88 23       	and	r24, r24
    59bc:	0c f0       	brlt	.+2      	; 0x59c0 <right_cycle+0x272>
    59be:	10 e0       	ldi	r17, 0x00	; 0
    59c0:	11 23       	and	r17, r17
    59c2:	29 f0       	breq	.+10     	; 0x59ce <right_cycle+0x280>
		__ticks = 1;
    59c4:	81 e0       	ldi	r24, 0x01	; 1
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	9e a3       	lds	r25, 0x5e
    59ca:	8d a3       	lds	r24, 0x5d
    59cc:	46 c0       	rjmp	.+140    	; 0x5a5a <right_cycle+0x30c>
	else if (__tmp > 65535)
    59ce:	11 e0       	ldi	r17, 0x01	; 1
    59d0:	69 a1       	lds	r22, 0x49
    59d2:	7a a1       	lds	r23, 0x4a
    59d4:	8b a1       	lds	r24, 0x4b
    59d6:	9c a1       	lds	r25, 0x4c
    59d8:	20 e0       	ldi	r18, 0x00	; 0
    59da:	3f ef       	ldi	r19, 0xFF	; 255
    59dc:	4f e7       	ldi	r20, 0x7F	; 127
    59de:	57 e4       	ldi	r21, 0x47	; 71
    59e0:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    59e4:	18 16       	cp	r1, r24
    59e6:	0c f0       	brlt	.+2      	; 0x59ea <right_cycle+0x29c>
    59e8:	10 e0       	ldi	r17, 0x00	; 0
    59ea:	11 23       	and	r17, r17
    59ec:	61 f1       	breq	.+88     	; 0x5a46 <right_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    59f0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    59f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59f4:	98 a1       	lds	r25, 0x48
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e2       	ldi	r20, 0x20	; 32
    59fc:	51 e4       	ldi	r21, 0x41	; 65
    59fe:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5a02:	dc 01       	movw	r26, r24
    5a04:	cb 01       	movw	r24, r22
    5a06:	bc 01       	movw	r22, r24
    5a08:	cd 01       	movw	r24, r26
    5a0a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5a0e:	dc 01       	movw	r26, r24
    5a10:	cb 01       	movw	r24, r22
    5a12:	9e a3       	lds	r25, 0x5e
    5a14:	8d a3       	lds	r24, 0x5d
    5a16:	12 c0       	rjmp	.+36     	; 0x5a3c <right_cycle+0x2ee>
    5a18:	80 e7       	ldi	r24, 0x70	; 112
    5a1a:	91 e0       	ldi	r25, 0x01	; 1
    5a1c:	98 a7       	lds	r25, 0x78
    5a1e:	8f a3       	lds	r24, 0x5f
    5a20:	8f a1       	lds	r24, 0x4f
    5a22:	98 a5       	lds	r25, 0x68
    5a24:	8c 01       	movw	r16, r24
    5a26:	c8 01       	movw	r24, r16
    5a28:	01 97       	sbiw	r24, 0x01	; 1
    5a2a:	f1 f7       	brne	.-4      	; 0x5a28 <right_cycle+0x2da>
    5a2c:	8c 01       	movw	r16, r24
    5a2e:	18 a7       	lds	r17, 0x78
    5a30:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a32:	8d a1       	lds	r24, 0x4d
    5a34:	9e a1       	lds	r25, 0x4e
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	9e a3       	lds	r25, 0x5e
    5a3a:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a3c:	8d a1       	lds	r24, 0x4d
    5a3e:	9e a1       	lds	r25, 0x4e
    5a40:	00 97       	sbiw	r24, 0x00	; 0
    5a42:	51 f7       	brne	.-44     	; 0x5a18 <right_cycle+0x2ca>
    5a44:	17 c0       	rjmp	.+46     	; 0x5a74 <right_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a46:	69 a1       	lds	r22, 0x49
    5a48:	7a a1       	lds	r23, 0x4a
    5a4a:	8b a1       	lds	r24, 0x4b
    5a4c:	9c a1       	lds	r25, 0x4c
    5a4e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	9e a3       	lds	r25, 0x5e
    5a58:	8d a3       	lds	r24, 0x5d
    5a5a:	8d a1       	lds	r24, 0x4d
    5a5c:	9e a1       	lds	r25, 0x4e
    5a5e:	9a a7       	lds	r25, 0x7a
    5a60:	89 a7       	lds	r24, 0x79
    5a62:	89 a5       	lds	r24, 0x69
    5a64:	9a a5       	lds	r25, 0x6a
    5a66:	8c 01       	movw	r16, r24
    5a68:	f8 01       	movw	r30, r16
    5a6a:	31 97       	sbiw	r30, 0x01	; 1
    5a6c:	f1 f7       	brne	.-4      	; 0x5a6a <right_cycle+0x31c>
    5a6e:	8f 01       	movw	r16, r30
    5a70:	1a a7       	lds	r17, 0x7a
    5a72:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    5a74:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <gripper_close>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	a6 e9       	ldi	r26, 0x96	; 150
    5a7e:	b3 e4       	ldi	r27, 0x43	; 67
    5a80:	8b a7       	lds	r24, 0x7b
    5a82:	9c a7       	lds	r25, 0x7c
    5a84:	ad a7       	lds	r26, 0x7d
    5a86:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5a88:	6b a5       	lds	r22, 0x6b
    5a8a:	7c a5       	lds	r23, 0x6c
    5a8c:	8d a5       	lds	r24, 0x6d
    5a8e:	9e a5       	lds	r25, 0x6e
    5a90:	26 e6       	ldi	r18, 0x66	; 102
    5a92:	36 e6       	ldi	r19, 0x66	; 102
    5a94:	46 e6       	ldi	r20, 0x66	; 102
    5a96:	55 e4       	ldi	r21, 0x45	; 69
    5a98:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	8f a7       	lds	r24, 0x7f
    5aa2:	98 ab       	sts	0x58, r25
    5aa4:	a9 ab       	sts	0x59, r26
    5aa6:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5aa8:	11 e0       	ldi	r17, 0x01	; 1
    5aaa:	6f a5       	lds	r22, 0x6f
    5aac:	78 a9       	sts	0x48, r23
    5aae:	89 a9       	sts	0x49, r24
    5ab0:	9a a9       	sts	0x4a, r25
    5ab2:	20 e0       	ldi	r18, 0x00	; 0
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	40 e8       	ldi	r20, 0x80	; 128
    5ab8:	5f e3       	ldi	r21, 0x3F	; 63
    5aba:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    5abe:	88 23       	and	r24, r24
    5ac0:	0c f0       	brlt	.+2      	; 0x5ac4 <right_cycle+0x376>
    5ac2:	10 e0       	ldi	r17, 0x00	; 0
    5ac4:	11 23       	and	r17, r17
    5ac6:	29 f0       	breq	.+10     	; 0x5ad2 <right_cycle+0x384>
		__ticks = 1;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	9c ab       	sts	0x5c, r25
    5ace:	8b ab       	sts	0x5b, r24
    5ad0:	46 c0       	rjmp	.+140    	; 0x5b5e <right_cycle+0x410>
	else if (__tmp > 65535)
    5ad2:	11 e0       	ldi	r17, 0x01	; 1
    5ad4:	6f a5       	lds	r22, 0x6f
    5ad6:	78 a9       	sts	0x48, r23
    5ad8:	89 a9       	sts	0x49, r24
    5ada:	9a a9       	sts	0x4a, r25
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	3f ef       	ldi	r19, 0xFF	; 255
    5ae0:	4f e7       	ldi	r20, 0x7F	; 127
    5ae2:	57 e4       	ldi	r21, 0x47	; 71
    5ae4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5ae8:	18 16       	cp	r1, r24
    5aea:	0c f0       	brlt	.+2      	; 0x5aee <right_cycle+0x3a0>
    5aec:	10 e0       	ldi	r17, 0x00	; 0
    5aee:	11 23       	and	r17, r17
    5af0:	61 f1       	breq	.+88     	; 0x5b4a <right_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af2:	6b a5       	lds	r22, 0x6b
    5af4:	7c a5       	lds	r23, 0x6c
    5af6:	8d a5       	lds	r24, 0x6d
    5af8:	9e a5       	lds	r25, 0x6e
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	40 e2       	ldi	r20, 0x20	; 32
    5b00:	51 e4       	ldi	r21, 0x41	; 65
    5b02:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5b06:	dc 01       	movw	r26, r24
    5b08:	cb 01       	movw	r24, r22
    5b0a:	bc 01       	movw	r22, r24
    5b0c:	cd 01       	movw	r24, r26
    5b0e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5b12:	dc 01       	movw	r26, r24
    5b14:	cb 01       	movw	r24, r22
    5b16:	9c ab       	sts	0x5c, r25
    5b18:	8b ab       	sts	0x5b, r24
    5b1a:	12 c0       	rjmp	.+36     	; 0x5b40 <right_cycle+0x3f2>
    5b1c:	80 e7       	ldi	r24, 0x70	; 112
    5b1e:	91 e0       	ldi	r25, 0x01	; 1
    5b20:	9e ab       	sts	0x5e, r25
    5b22:	8d ab       	sts	0x5d, r24
    5b24:	8d a9       	sts	0x4d, r24
    5b26:	9e a9       	sts	0x4e, r25
    5b28:	8c 01       	movw	r16, r24
    5b2a:	c8 01       	movw	r24, r16
    5b2c:	01 97       	sbiw	r24, 0x01	; 1
    5b2e:	f1 f7       	brne	.-4      	; 0x5b2c <right_cycle+0x3de>
    5b30:	8c 01       	movw	r16, r24
    5b32:	1e ab       	sts	0x5e, r17
    5b34:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b36:	8b a9       	sts	0x4b, r24
    5b38:	9c a9       	sts	0x4c, r25
    5b3a:	01 97       	sbiw	r24, 0x01	; 1
    5b3c:	9c ab       	sts	0x5c, r25
    5b3e:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b40:	8b a9       	sts	0x4b, r24
    5b42:	9c a9       	sts	0x4c, r25
    5b44:	00 97       	sbiw	r24, 0x00	; 0
    5b46:	51 f7       	brne	.-44     	; 0x5b1c <right_cycle+0x3ce>
    5b48:	17 c0       	rjmp	.+46     	; 0x5b78 <right_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b4a:	6f a5       	lds	r22, 0x6f
    5b4c:	78 a9       	sts	0x48, r23
    5b4e:	89 a9       	sts	0x49, r24
    5b50:	9a a9       	sts	0x4a, r25
    5b52:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	9c ab       	sts	0x5c, r25
    5b5c:	8b ab       	sts	0x5b, r24
    5b5e:	8b a9       	sts	0x4b, r24
    5b60:	9c a9       	sts	0x4c, r25
    5b62:	98 af       	sts	0x78, r25
    5b64:	8f ab       	sts	0x5f, r24
    5b66:	8f a9       	sts	0x4f, r24
    5b68:	98 ad       	sts	0x68, r25
    5b6a:	8c 01       	movw	r16, r24
    5b6c:	f8 01       	movw	r30, r16
    5b6e:	31 97       	sbiw	r30, 0x01	; 1
    5b70:	f1 f7       	brne	.-4      	; 0x5b6e <right_cycle+0x420>
    5b72:	8f 01       	movw	r16, r30
    5b74:	18 af       	sts	0x78, r17
    5b76:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    5b78:	0e 94 ce 24 	call	0x499c	; 0x499c <arm_backward>
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	a6 e9       	ldi	r26, 0x96	; 150
    5b82:	b3 e4       	ldi	r27, 0x43	; 67
    5b84:	89 af       	sts	0x79, r24
    5b86:	9a af       	sts	0x7a, r25
    5b88:	ab af       	sts	0x7b, r26
    5b8a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5b8c:	69 ad       	sts	0x69, r22
    5b8e:	7a ad       	sts	0x6a, r23
    5b90:	8b ad       	sts	0x6b, r24
    5b92:	9c ad       	sts	0x6c, r25
    5b94:	26 e6       	ldi	r18, 0x66	; 102
    5b96:	36 e6       	ldi	r19, 0x66	; 102
    5b98:	46 e6       	ldi	r20, 0x66	; 102
    5b9a:	55 e4       	ldi	r21, 0x45	; 69
    5b9c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	cb 01       	movw	r24, r22
    5ba4:	9e 01       	movw	r18, r28
    5ba6:	23 5c       	subi	r18, 0xC3	; 195
    5ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    5baa:	f9 01       	movw	r30, r18
    5bac:	80 83       	st	Z, r24
    5bae:	91 83       	std	Z+1, r25	; 0x01
    5bb0:	a2 83       	std	Z+2, r26	; 0x02
    5bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bb4:	11 e0       	ldi	r17, 0x01	; 1
    5bb6:	ce 01       	movw	r24, r28
    5bb8:	cd 96       	adiw	r24, 0x3d	; 61
    5bba:	fc 01       	movw	r30, r24
    5bbc:	60 81       	ld	r22, Z
    5bbe:	71 81       	ldd	r23, Z+1	; 0x01
    5bc0:	82 81       	ldd	r24, Z+2	; 0x02
    5bc2:	93 81       	ldd	r25, Z+3	; 0x03
    5bc4:	20 e0       	ldi	r18, 0x00	; 0
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	40 e8       	ldi	r20, 0x80	; 128
    5bca:	5f e3       	ldi	r21, 0x3F	; 63
    5bcc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    5bd0:	88 23       	and	r24, r24
    5bd2:	0c f0       	brlt	.+2      	; 0x5bd6 <right_cycle+0x488>
    5bd4:	10 e0       	ldi	r17, 0x00	; 0
    5bd6:	11 23       	and	r17, r17
    5bd8:	49 f0       	breq	.+18     	; 0x5bec <right_cycle+0x49e>
		__ticks = 1;
    5bda:	ce 01       	movw	r24, r28
    5bdc:	8f 5b       	subi	r24, 0xBF	; 191
    5bde:	9f 4f       	sbci	r25, 0xFF	; 255
    5be0:	21 e0       	ldi	r18, 0x01	; 1
    5be2:	30 e0       	ldi	r19, 0x00	; 0
    5be4:	fc 01       	movw	r30, r24
    5be6:	31 83       	std	Z+1, r19	; 0x01
    5be8:	20 83       	st	Z, r18
    5bea:	6e c0       	rjmp	.+220    	; 0x5cc8 <right_cycle+0x57a>
	else if (__tmp > 65535)
    5bec:	11 e0       	ldi	r17, 0x01	; 1
    5bee:	ce 01       	movw	r24, r28
    5bf0:	cd 96       	adiw	r24, 0x3d	; 61
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	60 81       	ld	r22, Z
    5bf6:	71 81       	ldd	r23, Z+1	; 0x01
    5bf8:	82 81       	ldd	r24, Z+2	; 0x02
    5bfa:	93 81       	ldd	r25, Z+3	; 0x03
    5bfc:	20 e0       	ldi	r18, 0x00	; 0
    5bfe:	3f ef       	ldi	r19, 0xFF	; 255
    5c00:	4f e7       	ldi	r20, 0x7F	; 127
    5c02:	57 e4       	ldi	r21, 0x47	; 71
    5c04:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5c08:	18 16       	cp	r1, r24
    5c0a:	0c f0       	brlt	.+2      	; 0x5c0e <right_cycle+0x4c0>
    5c0c:	10 e0       	ldi	r17, 0x00	; 0
    5c0e:	11 23       	and	r17, r17
    5c10:	09 f4       	brne	.+2      	; 0x5c14 <right_cycle+0x4c6>
    5c12:	49 c0       	rjmp	.+146    	; 0x5ca6 <right_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c14:	69 ad       	sts	0x69, r22
    5c16:	7a ad       	sts	0x6a, r23
    5c18:	8b ad       	sts	0x6b, r24
    5c1a:	9c ad       	sts	0x6c, r25
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	40 e2       	ldi	r20, 0x20	; 32
    5c22:	51 e4       	ldi	r21, 0x41	; 65
    5c24:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5c28:	dc 01       	movw	r26, r24
    5c2a:	cb 01       	movw	r24, r22
    5c2c:	8e 01       	movw	r16, r28
    5c2e:	0f 5b       	subi	r16, 0xBF	; 191
    5c30:	1f 4f       	sbci	r17, 0xFF	; 255
    5c32:	bc 01       	movw	r22, r24
    5c34:	cd 01       	movw	r24, r26
    5c36:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	f8 01       	movw	r30, r16
    5c40:	91 83       	std	Z+1, r25	; 0x01
    5c42:	80 83       	st	Z, r24
    5c44:	27 c0       	rjmp	.+78     	; 0x5c94 <right_cycle+0x546>
    5c46:	ce 01       	movw	r24, r28
    5c48:	8d 5b       	subi	r24, 0xBD	; 189
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	20 e7       	ldi	r18, 0x70	; 112
    5c4e:	31 e0       	ldi	r19, 0x01	; 1
    5c50:	fc 01       	movw	r30, r24
    5c52:	31 83       	std	Z+1, r19	; 0x01
    5c54:	20 83       	st	Z, r18
    5c56:	ce 01       	movw	r24, r28
    5c58:	8d 5b       	subi	r24, 0xBD	; 189
    5c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	80 81       	ld	r24, Z
    5c60:	91 81       	ldd	r25, Z+1	; 0x01
    5c62:	8c 01       	movw	r16, r24
    5c64:	c8 01       	movw	r24, r16
    5c66:	01 97       	sbiw	r24, 0x01	; 1
    5c68:	f1 f7       	brne	.-4      	; 0x5c66 <right_cycle+0x518>
    5c6a:	8c 01       	movw	r16, r24
    5c6c:	ce 01       	movw	r24, r28
    5c6e:	8d 5b       	subi	r24, 0xBD	; 189
    5c70:	9f 4f       	sbci	r25, 0xFF	; 255
    5c72:	fc 01       	movw	r30, r24
    5c74:	11 83       	std	Z+1, r17	; 0x01
    5c76:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c78:	ce 01       	movw	r24, r28
    5c7a:	8f 5b       	subi	r24, 0xBF	; 191
    5c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7e:	9e 01       	movw	r18, r28
    5c80:	2f 5b       	subi	r18, 0xBF	; 191
    5c82:	3f 4f       	sbci	r19, 0xFF	; 255
    5c84:	f9 01       	movw	r30, r18
    5c86:	20 81       	ld	r18, Z
    5c88:	31 81       	ldd	r19, Z+1	; 0x01
    5c8a:	21 50       	subi	r18, 0x01	; 1
    5c8c:	30 40       	sbci	r19, 0x00	; 0
    5c8e:	fc 01       	movw	r30, r24
    5c90:	31 83       	std	Z+1, r19	; 0x01
    5c92:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c94:	ce 01       	movw	r24, r28
    5c96:	8f 5b       	subi	r24, 0xBF	; 191
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	80 81       	ld	r24, Z
    5c9e:	91 81       	ldd	r25, Z+1	; 0x01
    5ca0:	00 97       	sbiw	r24, 0x00	; 0
    5ca2:	89 f6       	brne	.-94     	; 0x5c46 <right_cycle+0x4f8>
    5ca4:	2e c0       	rjmp	.+92     	; 0x5d02 <right_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ca6:	8e 01       	movw	r16, r28
    5ca8:	0f 5b       	subi	r16, 0xBF	; 191
    5caa:	1f 4f       	sbci	r17, 0xFF	; 255
    5cac:	ce 01       	movw	r24, r28
    5cae:	cd 96       	adiw	r24, 0x3d	; 61
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	60 81       	ld	r22, Z
    5cb4:	71 81       	ldd	r23, Z+1	; 0x01
    5cb6:	82 81       	ldd	r24, Z+2	; 0x02
    5cb8:	93 81       	ldd	r25, Z+3	; 0x03
    5cba:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	f8 01       	movw	r30, r16
    5cc4:	91 83       	std	Z+1, r25	; 0x01
    5cc6:	80 83       	st	Z, r24
    5cc8:	ce 01       	movw	r24, r28
    5cca:	8b 5b       	subi	r24, 0xBB	; 187
    5ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cce:	9e 01       	movw	r18, r28
    5cd0:	2f 5b       	subi	r18, 0xBF	; 191
    5cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd4:	f9 01       	movw	r30, r18
    5cd6:	20 81       	ld	r18, Z
    5cd8:	31 81       	ldd	r19, Z+1	; 0x01
    5cda:	fc 01       	movw	r30, r24
    5cdc:	31 83       	std	Z+1, r19	; 0x01
    5cde:	20 83       	st	Z, r18
    5ce0:	ce 01       	movw	r24, r28
    5ce2:	8b 5b       	subi	r24, 0xBB	; 187
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	80 81       	ld	r24, Z
    5cea:	91 81       	ldd	r25, Z+1	; 0x01
    5cec:	8c 01       	movw	r16, r24
    5cee:	c8 01       	movw	r24, r16
    5cf0:	01 97       	sbiw	r24, 0x01	; 1
    5cf2:	f1 f7       	brne	.-4      	; 0x5cf0 <right_cycle+0x5a2>
    5cf4:	8c 01       	movw	r16, r24
    5cf6:	ce 01       	movw	r24, r28
    5cf8:	8b 5b       	subi	r24, 0xBB	; 187
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	11 83       	std	Z+1, r17	; 0x01
    5d00:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    5d02:	ca 5b       	subi	r28, 0xBA	; 186
    5d04:	df 4f       	sbci	r29, 0xFF	; 255
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	f8 94       	cli
    5d0a:	de bf       	out	0x3e, r29	; 62
    5d0c:	0f be       	out	0x3f, r0	; 63
    5d0e:	cd bf       	out	0x3d, r28	; 61
    5d10:	df 91       	pop	r29
    5d12:	cf 91       	pop	r28
    5d14:	1f 91       	pop	r17
    5d16:	0f 91       	pop	r16
    5d18:	08 95       	ret

00005d1a <drop>:
void drop()
{
    5d1a:	0f 93       	push	r16
    5d1c:	1f 93       	push	r17
    5d1e:	cf 93       	push	r28
    5d20:	df 93       	push	r29
    5d22:	cd b7       	in	r28, 0x3d	; 61
    5d24:	de b7       	in	r29, 0x3e	; 62
    5d26:	c6 54       	subi	r28, 0x46	; 70
    5d28:	d0 40       	sbci	r29, 0x00	; 0
    5d2a:	0f b6       	in	r0, 0x3f	; 63
    5d2c:	f8 94       	cli
    5d2e:	de bf       	out	0x3e, r29	; 62
    5d30:	0f be       	out	0x3f, r0	; 63
    5d32:	cd bf       	out	0x3d, r28	; 61
	servo_1(150);
    5d34:	86 e9       	ldi	r24, 0x96	; 150
    5d36:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	a6 e9       	ldi	r26, 0x96	; 150
    5d40:	b3 e4       	ldi	r27, 0x43	; 67
    5d42:	89 83       	std	Y+1, r24	; 0x01
    5d44:	9a 83       	std	Y+2, r25	; 0x02
    5d46:	ab 83       	std	Y+3, r26	; 0x03
    5d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d4a:	69 81       	ldd	r22, Y+1	; 0x01
    5d4c:	7a 81       	ldd	r23, Y+2	; 0x02
    5d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d50:	9c 81       	ldd	r25, Y+4	; 0x04
    5d52:	26 e6       	ldi	r18, 0x66	; 102
    5d54:	36 e6       	ldi	r19, 0x66	; 102
    5d56:	46 e6       	ldi	r20, 0x66	; 102
    5d58:	55 e4       	ldi	r21, 0x45	; 69
    5d5a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5d5e:	dc 01       	movw	r26, r24
    5d60:	cb 01       	movw	r24, r22
    5d62:	8d 83       	std	Y+5, r24	; 0x05
    5d64:	9e 83       	std	Y+6, r25	; 0x06
    5d66:	af 83       	std	Y+7, r26	; 0x07
    5d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5d6a:	11 e0       	ldi	r17, 0x01	; 1
    5d6c:	6d 81       	ldd	r22, Y+5	; 0x05
    5d6e:	7e 81       	ldd	r23, Y+6	; 0x06
    5d70:	8f 81       	ldd	r24, Y+7	; 0x07
    5d72:	98 85       	ldd	r25, Y+8	; 0x08
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	40 e8       	ldi	r20, 0x80	; 128
    5d7a:	5f e3       	ldi	r21, 0x3F	; 63
    5d7c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    5d80:	88 23       	and	r24, r24
    5d82:	0c f0       	brlt	.+2      	; 0x5d86 <drop+0x6c>
    5d84:	10 e0       	ldi	r17, 0x00	; 0
    5d86:	11 23       	and	r17, r17
    5d88:	29 f0       	breq	.+10     	; 0x5d94 <drop+0x7a>
		__ticks = 1;
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	90 e0       	ldi	r25, 0x00	; 0
    5d8e:	9a 87       	std	Y+10, r25	; 0x0a
    5d90:	89 87       	std	Y+9, r24	; 0x09
    5d92:	46 c0       	rjmp	.+140    	; 0x5e20 <drop+0x106>
	else if (__tmp > 65535)
    5d94:	11 e0       	ldi	r17, 0x01	; 1
    5d96:	6d 81       	ldd	r22, Y+5	; 0x05
    5d98:	7e 81       	ldd	r23, Y+6	; 0x06
    5d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d9c:	98 85       	ldd	r25, Y+8	; 0x08
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	3f ef       	ldi	r19, 0xFF	; 255
    5da2:	4f e7       	ldi	r20, 0x7F	; 127
    5da4:	57 e4       	ldi	r21, 0x47	; 71
    5da6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5daa:	18 16       	cp	r1, r24
    5dac:	0c f0       	brlt	.+2      	; 0x5db0 <drop+0x96>
    5dae:	10 e0       	ldi	r17, 0x00	; 0
    5db0:	11 23       	and	r17, r17
    5db2:	61 f1       	breq	.+88     	; 0x5e0c <drop+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5db4:	69 81       	ldd	r22, Y+1	; 0x01
    5db6:	7a 81       	ldd	r23, Y+2	; 0x02
    5db8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dba:	9c 81       	ldd	r25, Y+4	; 0x04
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	40 e2       	ldi	r20, 0x20	; 32
    5dc2:	51 e4       	ldi	r21, 0x41	; 65
    5dc4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5dc8:	dc 01       	movw	r26, r24
    5dca:	cb 01       	movw	r24, r22
    5dcc:	bc 01       	movw	r22, r24
    5dce:	cd 01       	movw	r24, r26
    5dd0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5dd4:	dc 01       	movw	r26, r24
    5dd6:	cb 01       	movw	r24, r22
    5dd8:	9a 87       	std	Y+10, r25	; 0x0a
    5dda:	89 87       	std	Y+9, r24	; 0x09
    5ddc:	12 c0       	rjmp	.+36     	; 0x5e02 <drop+0xe8>
    5dde:	80 e7       	ldi	r24, 0x70	; 112
    5de0:	91 e0       	ldi	r25, 0x01	; 1
    5de2:	9c 87       	std	Y+12, r25	; 0x0c
    5de4:	8b 87       	std	Y+11, r24	; 0x0b
    5de6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5de8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dea:	8c 01       	movw	r16, r24
    5dec:	c8 01       	movw	r24, r16
    5dee:	01 97       	sbiw	r24, 0x01	; 1
    5df0:	f1 f7       	brne	.-4      	; 0x5dee <drop+0xd4>
    5df2:	8c 01       	movw	r16, r24
    5df4:	1c 87       	std	Y+12, r17	; 0x0c
    5df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df8:	89 85       	ldd	r24, Y+9	; 0x09
    5dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dfc:	01 97       	sbiw	r24, 0x01	; 1
    5dfe:	9a 87       	std	Y+10, r25	; 0x0a
    5e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e02:	89 85       	ldd	r24, Y+9	; 0x09
    5e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e06:	00 97       	sbiw	r24, 0x00	; 0
    5e08:	51 f7       	brne	.-44     	; 0x5dde <drop+0xc4>
    5e0a:	17 c0       	rjmp	.+46     	; 0x5e3a <drop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e0c:	6d 81       	ldd	r22, Y+5	; 0x05
    5e0e:	7e 81       	ldd	r23, Y+6	; 0x06
    5e10:	8f 81       	ldd	r24, Y+7	; 0x07
    5e12:	98 85       	ldd	r25, Y+8	; 0x08
    5e14:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22
    5e1c:	9a 87       	std	Y+10, r25	; 0x0a
    5e1e:	89 87       	std	Y+9, r24	; 0x09
    5e20:	89 85       	ldd	r24, Y+9	; 0x09
    5e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e24:	9e 87       	std	Y+14, r25	; 0x0e
    5e26:	8d 87       	std	Y+13, r24	; 0x0d
    5e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e2c:	8c 01       	movw	r16, r24
    5e2e:	f8 01       	movw	r30, r16
    5e30:	31 97       	sbiw	r30, 0x01	; 1
    5e32:	f1 f7       	brne	.-4      	; 0x5e30 <drop+0x116>
    5e34:	8f 01       	movw	r16, r30
    5e36:	1e 87       	std	Y+14, r17	; 0x0e
    5e38:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	
	for(ii=0;ii<75;ii++)
    5e3a:	10 92 4d 03 	sts	0x034D, r1
    5e3e:	89 c0       	rjmp	.+274    	; 0x5f52 <drop+0x238>
	{
		servo_2(ii);
    5e40:	80 91 4d 03 	lds	r24, 0x034D
    5e44:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    5e48:	80 e0       	ldi	r24, 0x00	; 0
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	a0 e2       	ldi	r26, 0x20	; 32
    5e4e:	b1 e4       	ldi	r27, 0x41	; 65
    5e50:	8f 87       	std	Y+15, r24	; 0x0f
    5e52:	98 8b       	std	Y+16, r25	; 0x10
    5e54:	a9 8b       	std	Y+17, r26	; 0x11
    5e56:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5e58:	6f 85       	ldd	r22, Y+15	; 0x0f
    5e5a:	78 89       	ldd	r23, Y+16	; 0x10
    5e5c:	89 89       	ldd	r24, Y+17	; 0x11
    5e5e:	9a 89       	ldd	r25, Y+18	; 0x12
    5e60:	26 e6       	ldi	r18, 0x66	; 102
    5e62:	36 e6       	ldi	r19, 0x66	; 102
    5e64:	46 e6       	ldi	r20, 0x66	; 102
    5e66:	55 e4       	ldi	r21, 0x45	; 69
    5e68:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5e6c:	dc 01       	movw	r26, r24
    5e6e:	cb 01       	movw	r24, r22
    5e70:	8b 8b       	std	Y+19, r24	; 0x13
    5e72:	9c 8b       	std	Y+20, r25	; 0x14
    5e74:	ad 8b       	std	Y+21, r26	; 0x15
    5e76:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5e78:	11 e0       	ldi	r17, 0x01	; 1
    5e7a:	6b 89       	ldd	r22, Y+19	; 0x13
    5e7c:	7c 89       	ldd	r23, Y+20	; 0x14
    5e7e:	8d 89       	ldd	r24, Y+21	; 0x15
    5e80:	9e 89       	ldd	r25, Y+22	; 0x16
    5e82:	20 e0       	ldi	r18, 0x00	; 0
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	40 e8       	ldi	r20, 0x80	; 128
    5e88:	5f e3       	ldi	r21, 0x3F	; 63
    5e8a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    5e8e:	88 23       	and	r24, r24
    5e90:	0c f0       	brlt	.+2      	; 0x5e94 <drop+0x17a>
    5e92:	10 e0       	ldi	r17, 0x00	; 0
    5e94:	11 23       	and	r17, r17
    5e96:	29 f0       	breq	.+10     	; 0x5ea2 <drop+0x188>
		__ticks = 1;
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	98 8f       	std	Y+24, r25	; 0x18
    5e9e:	8f 8b       	std	Y+23, r24	; 0x17
    5ea0:	46 c0       	rjmp	.+140    	; 0x5f2e <drop+0x214>
	else if (__tmp > 65535)
    5ea2:	11 e0       	ldi	r17, 0x01	; 1
    5ea4:	6b 89       	ldd	r22, Y+19	; 0x13
    5ea6:	7c 89       	ldd	r23, Y+20	; 0x14
    5ea8:	8d 89       	ldd	r24, Y+21	; 0x15
    5eaa:	9e 89       	ldd	r25, Y+22	; 0x16
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	3f ef       	ldi	r19, 0xFF	; 255
    5eb0:	4f e7       	ldi	r20, 0x7F	; 127
    5eb2:	57 e4       	ldi	r21, 0x47	; 71
    5eb4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5eb8:	18 16       	cp	r1, r24
    5eba:	0c f0       	brlt	.+2      	; 0x5ebe <drop+0x1a4>
    5ebc:	10 e0       	ldi	r17, 0x00	; 0
    5ebe:	11 23       	and	r17, r17
    5ec0:	61 f1       	breq	.+88     	; 0x5f1a <drop+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ec2:	6f 85       	ldd	r22, Y+15	; 0x0f
    5ec4:	78 89       	ldd	r23, Y+16	; 0x10
    5ec6:	89 89       	ldd	r24, Y+17	; 0x11
    5ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    5eca:	20 e0       	ldi	r18, 0x00	; 0
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e2       	ldi	r20, 0x20	; 32
    5ed0:	51 e4       	ldi	r21, 0x41	; 65
    5ed2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5ed6:	dc 01       	movw	r26, r24
    5ed8:	cb 01       	movw	r24, r22
    5eda:	bc 01       	movw	r22, r24
    5edc:	cd 01       	movw	r24, r26
    5ede:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	98 8f       	std	Y+24, r25	; 0x18
    5ee8:	8f 8b       	std	Y+23, r24	; 0x17
    5eea:	12 c0       	rjmp	.+36     	; 0x5f10 <drop+0x1f6>
    5eec:	80 e7       	ldi	r24, 0x70	; 112
    5eee:	91 e0       	ldi	r25, 0x01	; 1
    5ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    5ef2:	89 8f       	std	Y+25, r24	; 0x19
    5ef4:	89 8d       	ldd	r24, Y+25	; 0x19
    5ef6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5ef8:	8c 01       	movw	r16, r24
    5efa:	c8 01       	movw	r24, r16
    5efc:	01 97       	sbiw	r24, 0x01	; 1
    5efe:	f1 f7       	brne	.-4      	; 0x5efc <drop+0x1e2>
    5f00:	8c 01       	movw	r16, r24
    5f02:	1a 8f       	std	Y+26, r17	; 0x1a
    5f04:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f06:	8f 89       	ldd	r24, Y+23	; 0x17
    5f08:	98 8d       	ldd	r25, Y+24	; 0x18
    5f0a:	01 97       	sbiw	r24, 0x01	; 1
    5f0c:	98 8f       	std	Y+24, r25	; 0x18
    5f0e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f10:	8f 89       	ldd	r24, Y+23	; 0x17
    5f12:	98 8d       	ldd	r25, Y+24	; 0x18
    5f14:	00 97       	sbiw	r24, 0x00	; 0
    5f16:	51 f7       	brne	.-44     	; 0x5eec <drop+0x1d2>
    5f18:	17 c0       	rjmp	.+46     	; 0x5f48 <drop+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    5f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    5f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    5f20:	9e 89       	ldd	r25, Y+22	; 0x16
    5f22:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	98 8f       	std	Y+24, r25	; 0x18
    5f2c:	8f 8b       	std	Y+23, r24	; 0x17
    5f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    5f30:	98 8d       	ldd	r25, Y+24	; 0x18
    5f32:	9c 8f       	std	Y+28, r25	; 0x1c
    5f34:	8b 8f       	std	Y+27, r24	; 0x1b
    5f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f3a:	8c 01       	movw	r16, r24
    5f3c:	f8 01       	movw	r30, r16
    5f3e:	31 97       	sbiw	r30, 0x01	; 1
    5f40:	f1 f7       	brne	.-4      	; 0x5f3e <drop+0x224>
    5f42:	8f 01       	movw	r16, r30
    5f44:	1c 8f       	std	Y+28, r17	; 0x1c
    5f46:	0b 8f       	std	Y+27, r16	; 0x1b
void drop()
{
	servo_1(150);
	_delay_ms(300);
	
	for(ii=0;ii<75;ii++)
    5f48:	80 91 4d 03 	lds	r24, 0x034D
    5f4c:	8f 5f       	subi	r24, 0xFF	; 255
    5f4e:	80 93 4d 03 	sts	0x034D, r24
    5f52:	80 91 4d 03 	lds	r24, 0x034D
    5f56:	8b 34       	cpi	r24, 0x4B	; 75
    5f58:	08 f4       	brcc	.+2      	; 0x5f5c <drop+0x242>
    5f5a:	72 cf       	rjmp	.-284    	; 0x5e40 <drop+0x126>
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	a6 e9       	ldi	r26, 0x96	; 150
    5f62:	b3 e4       	ldi	r27, 0x43	; 67
    5f64:	8d 8f       	std	Y+29, r24	; 0x1d
    5f66:	9e 8f       	std	Y+30, r25	; 0x1e
    5f68:	af 8f       	std	Y+31, r26	; 0x1f
    5f6a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5f6c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f6e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f72:	98 a1       	lds	r25, 0x48
    5f74:	26 e6       	ldi	r18, 0x66	; 102
    5f76:	36 e6       	ldi	r19, 0x66	; 102
    5f78:	46 e6       	ldi	r20, 0x66	; 102
    5f7a:	55 e4       	ldi	r21, 0x45	; 69
    5f7c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	89 a3       	lds	r24, 0x59
    5f86:	9a a3       	lds	r25, 0x5a
    5f88:	ab a3       	lds	r26, 0x5b
    5f8a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5f8c:	11 e0       	ldi	r17, 0x01	; 1
    5f8e:	69 a1       	lds	r22, 0x49
    5f90:	7a a1       	lds	r23, 0x4a
    5f92:	8b a1       	lds	r24, 0x4b
    5f94:	9c a1       	lds	r25, 0x4c
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	40 e8       	ldi	r20, 0x80	; 128
    5f9c:	5f e3       	ldi	r21, 0x3F	; 63
    5f9e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    5fa2:	88 23       	and	r24, r24
    5fa4:	0c f0       	brlt	.+2      	; 0x5fa8 <drop+0x28e>
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	11 23       	and	r17, r17
    5faa:	29 f0       	breq	.+10     	; 0x5fb6 <drop+0x29c>
		__ticks = 1;
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	9e a3       	lds	r25, 0x5e
    5fb2:	8d a3       	lds	r24, 0x5d
    5fb4:	46 c0       	rjmp	.+140    	; 0x6042 <drop+0x328>
	else if (__tmp > 65535)
    5fb6:	11 e0       	ldi	r17, 0x01	; 1
    5fb8:	69 a1       	lds	r22, 0x49
    5fba:	7a a1       	lds	r23, 0x4a
    5fbc:	8b a1       	lds	r24, 0x4b
    5fbe:	9c a1       	lds	r25, 0x4c
    5fc0:	20 e0       	ldi	r18, 0x00	; 0
    5fc2:	3f ef       	ldi	r19, 0xFF	; 255
    5fc4:	4f e7       	ldi	r20, 0x7F	; 127
    5fc6:	57 e4       	ldi	r21, 0x47	; 71
    5fc8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    5fcc:	18 16       	cp	r1, r24
    5fce:	0c f0       	brlt	.+2      	; 0x5fd2 <drop+0x2b8>
    5fd0:	10 e0       	ldi	r17, 0x00	; 0
    5fd2:	11 23       	and	r17, r17
    5fd4:	61 f1       	breq	.+88     	; 0x602e <drop+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fd6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5fd8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5fda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5fdc:	98 a1       	lds	r25, 0x48
    5fde:	20 e0       	ldi	r18, 0x00	; 0
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	40 e2       	ldi	r20, 0x20	; 32
    5fe4:	51 e4       	ldi	r21, 0x41	; 65
    5fe6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    5fea:	dc 01       	movw	r26, r24
    5fec:	cb 01       	movw	r24, r22
    5fee:	bc 01       	movw	r22, r24
    5ff0:	cd 01       	movw	r24, r26
    5ff2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	9e a3       	lds	r25, 0x5e
    5ffc:	8d a3       	lds	r24, 0x5d
    5ffe:	12 c0       	rjmp	.+36     	; 0x6024 <drop+0x30a>
    6000:	80 e7       	ldi	r24, 0x70	; 112
    6002:	91 e0       	ldi	r25, 0x01	; 1
    6004:	98 a7       	lds	r25, 0x78
    6006:	8f a3       	lds	r24, 0x5f
    6008:	8f a1       	lds	r24, 0x4f
    600a:	98 a5       	lds	r25, 0x68
    600c:	8c 01       	movw	r16, r24
    600e:	c8 01       	movw	r24, r16
    6010:	01 97       	sbiw	r24, 0x01	; 1
    6012:	f1 f7       	brne	.-4      	; 0x6010 <drop+0x2f6>
    6014:	8c 01       	movw	r16, r24
    6016:	18 a7       	lds	r17, 0x78
    6018:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    601a:	8d a1       	lds	r24, 0x4d
    601c:	9e a1       	lds	r25, 0x4e
    601e:	01 97       	sbiw	r24, 0x01	; 1
    6020:	9e a3       	lds	r25, 0x5e
    6022:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6024:	8d a1       	lds	r24, 0x4d
    6026:	9e a1       	lds	r25, 0x4e
    6028:	00 97       	sbiw	r24, 0x00	; 0
    602a:	51 f7       	brne	.-44     	; 0x6000 <drop+0x2e6>
    602c:	17 c0       	rjmp	.+46     	; 0x605c <drop+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    602e:	69 a1       	lds	r22, 0x49
    6030:	7a a1       	lds	r23, 0x4a
    6032:	8b a1       	lds	r24, 0x4b
    6034:	9c a1       	lds	r25, 0x4c
    6036:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    603a:	dc 01       	movw	r26, r24
    603c:	cb 01       	movw	r24, r22
    603e:	9e a3       	lds	r25, 0x5e
    6040:	8d a3       	lds	r24, 0x5d
    6042:	8d a1       	lds	r24, 0x4d
    6044:	9e a1       	lds	r25, 0x4e
    6046:	9a a7       	lds	r25, 0x7a
    6048:	89 a7       	lds	r24, 0x79
    604a:	89 a5       	lds	r24, 0x69
    604c:	9a a5       	lds	r25, 0x6a
    604e:	8c 01       	movw	r16, r24
    6050:	f8 01       	movw	r30, r16
    6052:	31 97       	sbiw	r30, 0x01	; 1
    6054:	f1 f7       	brne	.-4      	; 0x6052 <drop+0x338>
    6056:	8f 01       	movw	r16, r30
    6058:	1a a7       	lds	r17, 0x7a
    605a:	09 a7       	lds	r16, 0x79
		servo_2(ii);
		_delay_ms(10);

	}
	_delay_ms(300);
	gripper_open();
    605c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    6060:	80 e0       	ldi	r24, 0x00	; 0
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	a6 e9       	ldi	r26, 0x96	; 150
    6066:	b3 e4       	ldi	r27, 0x43	; 67
    6068:	8b a7       	lds	r24, 0x7b
    606a:	9c a7       	lds	r25, 0x7c
    606c:	ad a7       	lds	r26, 0x7d
    606e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6070:	6b a5       	lds	r22, 0x6b
    6072:	7c a5       	lds	r23, 0x6c
    6074:	8d a5       	lds	r24, 0x6d
    6076:	9e a5       	lds	r25, 0x6e
    6078:	26 e6       	ldi	r18, 0x66	; 102
    607a:	36 e6       	ldi	r19, 0x66	; 102
    607c:	46 e6       	ldi	r20, 0x66	; 102
    607e:	55 e4       	ldi	r21, 0x45	; 69
    6080:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6084:	dc 01       	movw	r26, r24
    6086:	cb 01       	movw	r24, r22
    6088:	8f a7       	lds	r24, 0x7f
    608a:	98 ab       	sts	0x58, r25
    608c:	a9 ab       	sts	0x59, r26
    608e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    6090:	11 e0       	ldi	r17, 0x01	; 1
    6092:	6f a5       	lds	r22, 0x6f
    6094:	78 a9       	sts	0x48, r23
    6096:	89 a9       	sts	0x49, r24
    6098:	9a a9       	sts	0x4a, r25
    609a:	20 e0       	ldi	r18, 0x00	; 0
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	40 e8       	ldi	r20, 0x80	; 128
    60a0:	5f e3       	ldi	r21, 0x3F	; 63
    60a2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    60a6:	88 23       	and	r24, r24
    60a8:	0c f0       	brlt	.+2      	; 0x60ac <drop+0x392>
    60aa:	10 e0       	ldi	r17, 0x00	; 0
    60ac:	11 23       	and	r17, r17
    60ae:	29 f0       	breq	.+10     	; 0x60ba <drop+0x3a0>
		__ticks = 1;
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	9c ab       	sts	0x5c, r25
    60b6:	8b ab       	sts	0x5b, r24
    60b8:	46 c0       	rjmp	.+140    	; 0x6146 <drop+0x42c>
	else if (__tmp > 65535)
    60ba:	11 e0       	ldi	r17, 0x01	; 1
    60bc:	6f a5       	lds	r22, 0x6f
    60be:	78 a9       	sts	0x48, r23
    60c0:	89 a9       	sts	0x49, r24
    60c2:	9a a9       	sts	0x4a, r25
    60c4:	20 e0       	ldi	r18, 0x00	; 0
    60c6:	3f ef       	ldi	r19, 0xFF	; 255
    60c8:	4f e7       	ldi	r20, 0x7F	; 127
    60ca:	57 e4       	ldi	r21, 0x47	; 71
    60cc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    60d0:	18 16       	cp	r1, r24
    60d2:	0c f0       	brlt	.+2      	; 0x60d6 <drop+0x3bc>
    60d4:	10 e0       	ldi	r17, 0x00	; 0
    60d6:	11 23       	and	r17, r17
    60d8:	61 f1       	breq	.+88     	; 0x6132 <drop+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60da:	6b a5       	lds	r22, 0x6b
    60dc:	7c a5       	lds	r23, 0x6c
    60de:	8d a5       	lds	r24, 0x6d
    60e0:	9e a5       	lds	r25, 0x6e
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	40 e2       	ldi	r20, 0x20	; 32
    60e8:	51 e4       	ldi	r21, 0x41	; 65
    60ea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	bc 01       	movw	r22, r24
    60f4:	cd 01       	movw	r24, r26
    60f6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    60fa:	dc 01       	movw	r26, r24
    60fc:	cb 01       	movw	r24, r22
    60fe:	9c ab       	sts	0x5c, r25
    6100:	8b ab       	sts	0x5b, r24
    6102:	12 c0       	rjmp	.+36     	; 0x6128 <drop+0x40e>
    6104:	80 e7       	ldi	r24, 0x70	; 112
    6106:	91 e0       	ldi	r25, 0x01	; 1
    6108:	9e ab       	sts	0x5e, r25
    610a:	8d ab       	sts	0x5d, r24
    610c:	8d a9       	sts	0x4d, r24
    610e:	9e a9       	sts	0x4e, r25
    6110:	8c 01       	movw	r16, r24
    6112:	c8 01       	movw	r24, r16
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	f1 f7       	brne	.-4      	; 0x6114 <drop+0x3fa>
    6118:	8c 01       	movw	r16, r24
    611a:	1e ab       	sts	0x5e, r17
    611c:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    611e:	8b a9       	sts	0x4b, r24
    6120:	9c a9       	sts	0x4c, r25
    6122:	01 97       	sbiw	r24, 0x01	; 1
    6124:	9c ab       	sts	0x5c, r25
    6126:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6128:	8b a9       	sts	0x4b, r24
    612a:	9c a9       	sts	0x4c, r25
    612c:	00 97       	sbiw	r24, 0x00	; 0
    612e:	51 f7       	brne	.-44     	; 0x6104 <drop+0x3ea>
    6130:	17 c0       	rjmp	.+46     	; 0x6160 <drop+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6132:	6f a5       	lds	r22, 0x6f
    6134:	78 a9       	sts	0x48, r23
    6136:	89 a9       	sts	0x49, r24
    6138:	9a a9       	sts	0x4a, r25
    613a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    613e:	dc 01       	movw	r26, r24
    6140:	cb 01       	movw	r24, r22
    6142:	9c ab       	sts	0x5c, r25
    6144:	8b ab       	sts	0x5b, r24
    6146:	8b a9       	sts	0x4b, r24
    6148:	9c a9       	sts	0x4c, r25
    614a:	98 af       	sts	0x78, r25
    614c:	8f ab       	sts	0x5f, r24
    614e:	8f a9       	sts	0x4f, r24
    6150:	98 ad       	sts	0x68, r25
    6152:	8c 01       	movw	r16, r24
    6154:	f8 01       	movw	r30, r16
    6156:	31 97       	sbiw	r30, 0x01	; 1
    6158:	f1 f7       	brne	.-4      	; 0x6156 <drop+0x43c>
    615a:	8f 01       	movw	r16, r30
    615c:	18 af       	sts	0x78, r17
    615e:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	servo_2(0);
    6160:	80 e0       	ldi	r24, 0x00	; 0
    6162:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    6166:	80 e0       	ldi	r24, 0x00	; 0
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	a6 e9       	ldi	r26, 0x96	; 150
    616c:	b3 e4       	ldi	r27, 0x43	; 67
    616e:	89 af       	sts	0x79, r24
    6170:	9a af       	sts	0x7a, r25
    6172:	ab af       	sts	0x7b, r26
    6174:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6176:	69 ad       	sts	0x69, r22
    6178:	7a ad       	sts	0x6a, r23
    617a:	8b ad       	sts	0x6b, r24
    617c:	9c ad       	sts	0x6c, r25
    617e:	26 e6       	ldi	r18, 0x66	; 102
    6180:	36 e6       	ldi	r19, 0x66	; 102
    6182:	46 e6       	ldi	r20, 0x66	; 102
    6184:	55 e4       	ldi	r21, 0x45	; 69
    6186:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    618a:	dc 01       	movw	r26, r24
    618c:	cb 01       	movw	r24, r22
    618e:	9e 01       	movw	r18, r28
    6190:	23 5c       	subi	r18, 0xC3	; 195
    6192:	3f 4f       	sbci	r19, 0xFF	; 255
    6194:	f9 01       	movw	r30, r18
    6196:	80 83       	st	Z, r24
    6198:	91 83       	std	Z+1, r25	; 0x01
    619a:	a2 83       	std	Z+2, r26	; 0x02
    619c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    619e:	11 e0       	ldi	r17, 0x01	; 1
    61a0:	ce 01       	movw	r24, r28
    61a2:	cd 96       	adiw	r24, 0x3d	; 61
    61a4:	fc 01       	movw	r30, r24
    61a6:	60 81       	ld	r22, Z
    61a8:	71 81       	ldd	r23, Z+1	; 0x01
    61aa:	82 81       	ldd	r24, Z+2	; 0x02
    61ac:	93 81       	ldd	r25, Z+3	; 0x03
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	30 e0       	ldi	r19, 0x00	; 0
    61b2:	40 e8       	ldi	r20, 0x80	; 128
    61b4:	5f e3       	ldi	r21, 0x3F	; 63
    61b6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    61ba:	88 23       	and	r24, r24
    61bc:	0c f0       	brlt	.+2      	; 0x61c0 <drop+0x4a6>
    61be:	10 e0       	ldi	r17, 0x00	; 0
    61c0:	11 23       	and	r17, r17
    61c2:	49 f0       	breq	.+18     	; 0x61d6 <drop+0x4bc>
		__ticks = 1;
    61c4:	ce 01       	movw	r24, r28
    61c6:	8f 5b       	subi	r24, 0xBF	; 191
    61c8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	fc 01       	movw	r30, r24
    61d0:	31 83       	std	Z+1, r19	; 0x01
    61d2:	20 83       	st	Z, r18
    61d4:	6e c0       	rjmp	.+220    	; 0x62b2 <drop+0x598>
	else if (__tmp > 65535)
    61d6:	11 e0       	ldi	r17, 0x01	; 1
    61d8:	ce 01       	movw	r24, r28
    61da:	cd 96       	adiw	r24, 0x3d	; 61
    61dc:	fc 01       	movw	r30, r24
    61de:	60 81       	ld	r22, Z
    61e0:	71 81       	ldd	r23, Z+1	; 0x01
    61e2:	82 81       	ldd	r24, Z+2	; 0x02
    61e4:	93 81       	ldd	r25, Z+3	; 0x03
    61e6:	20 e0       	ldi	r18, 0x00	; 0
    61e8:	3f ef       	ldi	r19, 0xFF	; 255
    61ea:	4f e7       	ldi	r20, 0x7F	; 127
    61ec:	57 e4       	ldi	r21, 0x47	; 71
    61ee:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    61f2:	18 16       	cp	r1, r24
    61f4:	0c f0       	brlt	.+2      	; 0x61f8 <drop+0x4de>
    61f6:	10 e0       	ldi	r17, 0x00	; 0
    61f8:	11 23       	and	r17, r17
    61fa:	09 f4       	brne	.+2      	; 0x61fe <drop+0x4e4>
    61fc:	49 c0       	rjmp	.+146    	; 0x6290 <drop+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61fe:	69 ad       	sts	0x69, r22
    6200:	7a ad       	sts	0x6a, r23
    6202:	8b ad       	sts	0x6b, r24
    6204:	9c ad       	sts	0x6c, r25
    6206:	20 e0       	ldi	r18, 0x00	; 0
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	40 e2       	ldi	r20, 0x20	; 32
    620c:	51 e4       	ldi	r21, 0x41	; 65
    620e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6212:	dc 01       	movw	r26, r24
    6214:	cb 01       	movw	r24, r22
    6216:	8e 01       	movw	r16, r28
    6218:	0f 5b       	subi	r16, 0xBF	; 191
    621a:	1f 4f       	sbci	r17, 0xFF	; 255
    621c:	bc 01       	movw	r22, r24
    621e:	cd 01       	movw	r24, r26
    6220:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6224:	dc 01       	movw	r26, r24
    6226:	cb 01       	movw	r24, r22
    6228:	f8 01       	movw	r30, r16
    622a:	91 83       	std	Z+1, r25	; 0x01
    622c:	80 83       	st	Z, r24
    622e:	27 c0       	rjmp	.+78     	; 0x627e <drop+0x564>
    6230:	ce 01       	movw	r24, r28
    6232:	8d 5b       	subi	r24, 0xBD	; 189
    6234:	9f 4f       	sbci	r25, 0xFF	; 255
    6236:	20 e7       	ldi	r18, 0x70	; 112
    6238:	31 e0       	ldi	r19, 0x01	; 1
    623a:	fc 01       	movw	r30, r24
    623c:	31 83       	std	Z+1, r19	; 0x01
    623e:	20 83       	st	Z, r18
    6240:	ce 01       	movw	r24, r28
    6242:	8d 5b       	subi	r24, 0xBD	; 189
    6244:	9f 4f       	sbci	r25, 0xFF	; 255
    6246:	fc 01       	movw	r30, r24
    6248:	80 81       	ld	r24, Z
    624a:	91 81       	ldd	r25, Z+1	; 0x01
    624c:	8c 01       	movw	r16, r24
    624e:	c8 01       	movw	r24, r16
    6250:	01 97       	sbiw	r24, 0x01	; 1
    6252:	f1 f7       	brne	.-4      	; 0x6250 <drop+0x536>
    6254:	8c 01       	movw	r16, r24
    6256:	ce 01       	movw	r24, r28
    6258:	8d 5b       	subi	r24, 0xBD	; 189
    625a:	9f 4f       	sbci	r25, 0xFF	; 255
    625c:	fc 01       	movw	r30, r24
    625e:	11 83       	std	Z+1, r17	; 0x01
    6260:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6262:	ce 01       	movw	r24, r28
    6264:	8f 5b       	subi	r24, 0xBF	; 191
    6266:	9f 4f       	sbci	r25, 0xFF	; 255
    6268:	9e 01       	movw	r18, r28
    626a:	2f 5b       	subi	r18, 0xBF	; 191
    626c:	3f 4f       	sbci	r19, 0xFF	; 255
    626e:	f9 01       	movw	r30, r18
    6270:	20 81       	ld	r18, Z
    6272:	31 81       	ldd	r19, Z+1	; 0x01
    6274:	21 50       	subi	r18, 0x01	; 1
    6276:	30 40       	sbci	r19, 0x00	; 0
    6278:	fc 01       	movw	r30, r24
    627a:	31 83       	std	Z+1, r19	; 0x01
    627c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    627e:	ce 01       	movw	r24, r28
    6280:	8f 5b       	subi	r24, 0xBF	; 191
    6282:	9f 4f       	sbci	r25, 0xFF	; 255
    6284:	fc 01       	movw	r30, r24
    6286:	80 81       	ld	r24, Z
    6288:	91 81       	ldd	r25, Z+1	; 0x01
    628a:	00 97       	sbiw	r24, 0x00	; 0
    628c:	89 f6       	brne	.-94     	; 0x6230 <drop+0x516>
    628e:	2e c0       	rjmp	.+92     	; 0x62ec <drop+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6290:	8e 01       	movw	r16, r28
    6292:	0f 5b       	subi	r16, 0xBF	; 191
    6294:	1f 4f       	sbci	r17, 0xFF	; 255
    6296:	ce 01       	movw	r24, r28
    6298:	cd 96       	adiw	r24, 0x3d	; 61
    629a:	fc 01       	movw	r30, r24
    629c:	60 81       	ld	r22, Z
    629e:	71 81       	ldd	r23, Z+1	; 0x01
    62a0:	82 81       	ldd	r24, Z+2	; 0x02
    62a2:	93 81       	ldd	r25, Z+3	; 0x03
    62a4:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    62a8:	dc 01       	movw	r26, r24
    62aa:	cb 01       	movw	r24, r22
    62ac:	f8 01       	movw	r30, r16
    62ae:	91 83       	std	Z+1, r25	; 0x01
    62b0:	80 83       	st	Z, r24
    62b2:	ce 01       	movw	r24, r28
    62b4:	8b 5b       	subi	r24, 0xBB	; 187
    62b6:	9f 4f       	sbci	r25, 0xFF	; 255
    62b8:	9e 01       	movw	r18, r28
    62ba:	2f 5b       	subi	r18, 0xBF	; 191
    62bc:	3f 4f       	sbci	r19, 0xFF	; 255
    62be:	f9 01       	movw	r30, r18
    62c0:	20 81       	ld	r18, Z
    62c2:	31 81       	ldd	r19, Z+1	; 0x01
    62c4:	fc 01       	movw	r30, r24
    62c6:	31 83       	std	Z+1, r19	; 0x01
    62c8:	20 83       	st	Z, r18
    62ca:	ce 01       	movw	r24, r28
    62cc:	8b 5b       	subi	r24, 0xBB	; 187
    62ce:	9f 4f       	sbci	r25, 0xFF	; 255
    62d0:	fc 01       	movw	r30, r24
    62d2:	80 81       	ld	r24, Z
    62d4:	91 81       	ldd	r25, Z+1	; 0x01
    62d6:	8c 01       	movw	r16, r24
    62d8:	c8 01       	movw	r24, r16
    62da:	01 97       	sbiw	r24, 0x01	; 1
    62dc:	f1 f7       	brne	.-4      	; 0x62da <drop+0x5c0>
    62de:	8c 01       	movw	r16, r24
    62e0:	ce 01       	movw	r24, r28
    62e2:	8b 5b       	subi	r24, 0xBB	; 187
    62e4:	9f 4f       	sbci	r25, 0xFF	; 255
    62e6:	fc 01       	movw	r30, r24
    62e8:	11 83       	std	Z+1, r17	; 0x01
    62ea:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    62ec:	ca 5b       	subi	r28, 0xBA	; 186
    62ee:	df 4f       	sbci	r29, 0xFF	; 255
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	f8 94       	cli
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	cd bf       	out	0x3d, r28	; 61
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	1f 91       	pop	r17
    6300:	0f 91       	pop	r16
    6302:	08 95       	ret

00006304 <front>:

void front()
{
    6304:	0f 93       	push	r16
    6306:	1f 93       	push	r17
    6308:	cf 93       	push	r28
    630a:	df 93       	push	r29
    630c:	cd b7       	in	r28, 0x3d	; 61
    630e:	de b7       	in	r29, 0x3e	; 62
    6310:	e8 97       	sbiw	r28, 0x38	; 56
    6312:	0f b6       	in	r0, 0x3f	; 63
    6314:	f8 94       	cli
    6316:	de bf       	out	0x3e, r29	; 62
    6318:	0f be       	out	0x3f, r0	; 63
    631a:	cd bf       	out	0x3d, r28	; 61
	gripper_open();
    631c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    6320:	80 e0       	ldi	r24, 0x00	; 0
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	a6 e9       	ldi	r26, 0x96	; 150
    6326:	b3 e4       	ldi	r27, 0x43	; 67
    6328:	89 83       	std	Y+1, r24	; 0x01
    632a:	9a 83       	std	Y+2, r25	; 0x02
    632c:	ab 83       	std	Y+3, r26	; 0x03
    632e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6330:	69 81       	ldd	r22, Y+1	; 0x01
    6332:	7a 81       	ldd	r23, Y+2	; 0x02
    6334:	8b 81       	ldd	r24, Y+3	; 0x03
    6336:	9c 81       	ldd	r25, Y+4	; 0x04
    6338:	26 e6       	ldi	r18, 0x66	; 102
    633a:	36 e6       	ldi	r19, 0x66	; 102
    633c:	46 e6       	ldi	r20, 0x66	; 102
    633e:	55 e4       	ldi	r21, 0x45	; 69
    6340:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	8d 83       	std	Y+5, r24	; 0x05
    634a:	9e 83       	std	Y+6, r25	; 0x06
    634c:	af 83       	std	Y+7, r26	; 0x07
    634e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6350:	11 e0       	ldi	r17, 0x01	; 1
    6352:	6d 81       	ldd	r22, Y+5	; 0x05
    6354:	7e 81       	ldd	r23, Y+6	; 0x06
    6356:	8f 81       	ldd	r24, Y+7	; 0x07
    6358:	98 85       	ldd	r25, Y+8	; 0x08
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	40 e8       	ldi	r20, 0x80	; 128
    6360:	5f e3       	ldi	r21, 0x3F	; 63
    6362:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6366:	88 23       	and	r24, r24
    6368:	0c f0       	brlt	.+2      	; 0x636c <front+0x68>
    636a:	10 e0       	ldi	r17, 0x00	; 0
    636c:	11 23       	and	r17, r17
    636e:	29 f0       	breq	.+10     	; 0x637a <front+0x76>
		__ticks = 1;
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	9a 87       	std	Y+10, r25	; 0x0a
    6376:	89 87       	std	Y+9, r24	; 0x09
    6378:	46 c0       	rjmp	.+140    	; 0x6406 <front+0x102>
	else if (__tmp > 65535)
    637a:	11 e0       	ldi	r17, 0x01	; 1
    637c:	6d 81       	ldd	r22, Y+5	; 0x05
    637e:	7e 81       	ldd	r23, Y+6	; 0x06
    6380:	8f 81       	ldd	r24, Y+7	; 0x07
    6382:	98 85       	ldd	r25, Y+8	; 0x08
    6384:	20 e0       	ldi	r18, 0x00	; 0
    6386:	3f ef       	ldi	r19, 0xFF	; 255
    6388:	4f e7       	ldi	r20, 0x7F	; 127
    638a:	57 e4       	ldi	r21, 0x47	; 71
    638c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6390:	18 16       	cp	r1, r24
    6392:	0c f0       	brlt	.+2      	; 0x6396 <front+0x92>
    6394:	10 e0       	ldi	r17, 0x00	; 0
    6396:	11 23       	and	r17, r17
    6398:	61 f1       	breq	.+88     	; 0x63f2 <front+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    639a:	69 81       	ldd	r22, Y+1	; 0x01
    639c:	7a 81       	ldd	r23, Y+2	; 0x02
    639e:	8b 81       	ldd	r24, Y+3	; 0x03
    63a0:	9c 81       	ldd	r25, Y+4	; 0x04
    63a2:	20 e0       	ldi	r18, 0x00	; 0
    63a4:	30 e0       	ldi	r19, 0x00	; 0
    63a6:	40 e2       	ldi	r20, 0x20	; 32
    63a8:	51 e4       	ldi	r21, 0x41	; 65
    63aa:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    63ae:	dc 01       	movw	r26, r24
    63b0:	cb 01       	movw	r24, r22
    63b2:	bc 01       	movw	r22, r24
    63b4:	cd 01       	movw	r24, r26
    63b6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    63ba:	dc 01       	movw	r26, r24
    63bc:	cb 01       	movw	r24, r22
    63be:	9a 87       	std	Y+10, r25	; 0x0a
    63c0:	89 87       	std	Y+9, r24	; 0x09
    63c2:	12 c0       	rjmp	.+36     	; 0x63e8 <front+0xe4>
    63c4:	80 e7       	ldi	r24, 0x70	; 112
    63c6:	91 e0       	ldi	r25, 0x01	; 1
    63c8:	9c 87       	std	Y+12, r25	; 0x0c
    63ca:	8b 87       	std	Y+11, r24	; 0x0b
    63cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    63ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    63d0:	8c 01       	movw	r16, r24
    63d2:	c8 01       	movw	r24, r16
    63d4:	01 97       	sbiw	r24, 0x01	; 1
    63d6:	f1 f7       	brne	.-4      	; 0x63d4 <front+0xd0>
    63d8:	8c 01       	movw	r16, r24
    63da:	1c 87       	std	Y+12, r17	; 0x0c
    63dc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63de:	89 85       	ldd	r24, Y+9	; 0x09
    63e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    63e2:	01 97       	sbiw	r24, 0x01	; 1
    63e4:	9a 87       	std	Y+10, r25	; 0x0a
    63e6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63e8:	89 85       	ldd	r24, Y+9	; 0x09
    63ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ec:	00 97       	sbiw	r24, 0x00	; 0
    63ee:	51 f7       	brne	.-44     	; 0x63c4 <front+0xc0>
    63f0:	17 c0       	rjmp	.+46     	; 0x6420 <front+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63f2:	6d 81       	ldd	r22, Y+5	; 0x05
    63f4:	7e 81       	ldd	r23, Y+6	; 0x06
    63f6:	8f 81       	ldd	r24, Y+7	; 0x07
    63f8:	98 85       	ldd	r25, Y+8	; 0x08
    63fa:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    63fe:	dc 01       	movw	r26, r24
    6400:	cb 01       	movw	r24, r22
    6402:	9a 87       	std	Y+10, r25	; 0x0a
    6404:	89 87       	std	Y+9, r24	; 0x09
    6406:	89 85       	ldd	r24, Y+9	; 0x09
    6408:	9a 85       	ldd	r25, Y+10	; 0x0a
    640a:	9e 87       	std	Y+14, r25	; 0x0e
    640c:	8d 87       	std	Y+13, r24	; 0x0d
    640e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6410:	9e 85       	ldd	r25, Y+14	; 0x0e
    6412:	8c 01       	movw	r16, r24
    6414:	c8 01       	movw	r24, r16
    6416:	01 97       	sbiw	r24, 0x01	; 1
    6418:	f1 f7       	brne	.-4      	; 0x6416 <front+0x112>
    641a:	8c 01       	movw	r16, r24
    641c:	1e 87       	std	Y+14, r17	; 0x0e
    641e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_forward();
    6420:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_forward>
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	a6 e9       	ldi	r26, 0x96	; 150
    642a:	b3 e4       	ldi	r27, 0x43	; 67
    642c:	8f 87       	std	Y+15, r24	; 0x0f
    642e:	98 8b       	std	Y+16, r25	; 0x10
    6430:	a9 8b       	std	Y+17, r26	; 0x11
    6432:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6434:	6f 85       	ldd	r22, Y+15	; 0x0f
    6436:	78 89       	ldd	r23, Y+16	; 0x10
    6438:	89 89       	ldd	r24, Y+17	; 0x11
    643a:	9a 89       	ldd	r25, Y+18	; 0x12
    643c:	26 e6       	ldi	r18, 0x66	; 102
    643e:	36 e6       	ldi	r19, 0x66	; 102
    6440:	46 e6       	ldi	r20, 0x66	; 102
    6442:	55 e4       	ldi	r21, 0x45	; 69
    6444:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6448:	dc 01       	movw	r26, r24
    644a:	cb 01       	movw	r24, r22
    644c:	8b 8b       	std	Y+19, r24	; 0x13
    644e:	9c 8b       	std	Y+20, r25	; 0x14
    6450:	ad 8b       	std	Y+21, r26	; 0x15
    6452:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6454:	11 e0       	ldi	r17, 0x01	; 1
    6456:	6b 89       	ldd	r22, Y+19	; 0x13
    6458:	7c 89       	ldd	r23, Y+20	; 0x14
    645a:	8d 89       	ldd	r24, Y+21	; 0x15
    645c:	9e 89       	ldd	r25, Y+22	; 0x16
    645e:	20 e0       	ldi	r18, 0x00	; 0
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	40 e8       	ldi	r20, 0x80	; 128
    6464:	5f e3       	ldi	r21, 0x3F	; 63
    6466:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    646a:	88 23       	and	r24, r24
    646c:	0c f0       	brlt	.+2      	; 0x6470 <front+0x16c>
    646e:	10 e0       	ldi	r17, 0x00	; 0
    6470:	11 23       	and	r17, r17
    6472:	29 f0       	breq	.+10     	; 0x647e <front+0x17a>
		__ticks = 1;
    6474:	81 e0       	ldi	r24, 0x01	; 1
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	98 8f       	std	Y+24, r25	; 0x18
    647a:	8f 8b       	std	Y+23, r24	; 0x17
    647c:	46 c0       	rjmp	.+140    	; 0x650a <front+0x206>
	else if (__tmp > 65535)
    647e:	11 e0       	ldi	r17, 0x01	; 1
    6480:	6b 89       	ldd	r22, Y+19	; 0x13
    6482:	7c 89       	ldd	r23, Y+20	; 0x14
    6484:	8d 89       	ldd	r24, Y+21	; 0x15
    6486:	9e 89       	ldd	r25, Y+22	; 0x16
    6488:	20 e0       	ldi	r18, 0x00	; 0
    648a:	3f ef       	ldi	r19, 0xFF	; 255
    648c:	4f e7       	ldi	r20, 0x7F	; 127
    648e:	57 e4       	ldi	r21, 0x47	; 71
    6490:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6494:	18 16       	cp	r1, r24
    6496:	0c f0       	brlt	.+2      	; 0x649a <front+0x196>
    6498:	10 e0       	ldi	r17, 0x00	; 0
    649a:	11 23       	and	r17, r17
    649c:	61 f1       	breq	.+88     	; 0x64f6 <front+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    649e:	6f 85       	ldd	r22, Y+15	; 0x0f
    64a0:	78 89       	ldd	r23, Y+16	; 0x10
    64a2:	89 89       	ldd	r24, Y+17	; 0x11
    64a4:	9a 89       	ldd	r25, Y+18	; 0x12
    64a6:	20 e0       	ldi	r18, 0x00	; 0
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	40 e2       	ldi	r20, 0x20	; 32
    64ac:	51 e4       	ldi	r21, 0x41	; 65
    64ae:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	bc 01       	movw	r22, r24
    64b8:	cd 01       	movw	r24, r26
    64ba:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    64be:	dc 01       	movw	r26, r24
    64c0:	cb 01       	movw	r24, r22
    64c2:	98 8f       	std	Y+24, r25	; 0x18
    64c4:	8f 8b       	std	Y+23, r24	; 0x17
    64c6:	12 c0       	rjmp	.+36     	; 0x64ec <front+0x1e8>
    64c8:	80 e7       	ldi	r24, 0x70	; 112
    64ca:	91 e0       	ldi	r25, 0x01	; 1
    64cc:	9a 8f       	std	Y+26, r25	; 0x1a
    64ce:	89 8f       	std	Y+25, r24	; 0x19
    64d0:	89 8d       	ldd	r24, Y+25	; 0x19
    64d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    64d4:	8c 01       	movw	r16, r24
    64d6:	c8 01       	movw	r24, r16
    64d8:	01 97       	sbiw	r24, 0x01	; 1
    64da:	f1 f7       	brne	.-4      	; 0x64d8 <front+0x1d4>
    64dc:	8c 01       	movw	r16, r24
    64de:	1a 8f       	std	Y+26, r17	; 0x1a
    64e0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64e2:	8f 89       	ldd	r24, Y+23	; 0x17
    64e4:	98 8d       	ldd	r25, Y+24	; 0x18
    64e6:	01 97       	sbiw	r24, 0x01	; 1
    64e8:	98 8f       	std	Y+24, r25	; 0x18
    64ea:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64ec:	8f 89       	ldd	r24, Y+23	; 0x17
    64ee:	98 8d       	ldd	r25, Y+24	; 0x18
    64f0:	00 97       	sbiw	r24, 0x00	; 0
    64f2:	51 f7       	brne	.-44     	; 0x64c8 <front+0x1c4>
    64f4:	17 c0       	rjmp	.+46     	; 0x6524 <front+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64f6:	6b 89       	ldd	r22, Y+19	; 0x13
    64f8:	7c 89       	ldd	r23, Y+20	; 0x14
    64fa:	8d 89       	ldd	r24, Y+21	; 0x15
    64fc:	9e 89       	ldd	r25, Y+22	; 0x16
    64fe:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6502:	dc 01       	movw	r26, r24
    6504:	cb 01       	movw	r24, r22
    6506:	98 8f       	std	Y+24, r25	; 0x18
    6508:	8f 8b       	std	Y+23, r24	; 0x17
    650a:	8f 89       	ldd	r24, Y+23	; 0x17
    650c:	98 8d       	ldd	r25, Y+24	; 0x18
    650e:	9c 8f       	std	Y+28, r25	; 0x1c
    6510:	8b 8f       	std	Y+27, r24	; 0x1b
    6512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6516:	8c 01       	movw	r16, r24
    6518:	c8 01       	movw	r24, r16
    651a:	01 97       	sbiw	r24, 0x01	; 1
    651c:	f1 f7       	brne	.-4      	; 0x651a <front+0x216>
    651e:	8c 01       	movw	r16, r24
    6520:	1c 8f       	std	Y+28, r17	; 0x1c
    6522:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	gripper_close();
    6524:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <gripper_close>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	a6 e9       	ldi	r26, 0x96	; 150
    652e:	b3 e4       	ldi	r27, 0x43	; 67
    6530:	8d 8f       	std	Y+29, r24	; 0x1d
    6532:	9e 8f       	std	Y+30, r25	; 0x1e
    6534:	af 8f       	std	Y+31, r26	; 0x1f
    6536:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6538:	6d 8d       	ldd	r22, Y+29	; 0x1d
    653a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    653c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    653e:	98 a1       	lds	r25, 0x48
    6540:	26 e6       	ldi	r18, 0x66	; 102
    6542:	36 e6       	ldi	r19, 0x66	; 102
    6544:	46 e6       	ldi	r20, 0x66	; 102
    6546:	55 e4       	ldi	r21, 0x45	; 69
    6548:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    654c:	dc 01       	movw	r26, r24
    654e:	cb 01       	movw	r24, r22
    6550:	89 a3       	lds	r24, 0x59
    6552:	9a a3       	lds	r25, 0x5a
    6554:	ab a3       	lds	r26, 0x5b
    6556:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6558:	11 e0       	ldi	r17, 0x01	; 1
    655a:	69 a1       	lds	r22, 0x49
    655c:	7a a1       	lds	r23, 0x4a
    655e:	8b a1       	lds	r24, 0x4b
    6560:	9c a1       	lds	r25, 0x4c
    6562:	20 e0       	ldi	r18, 0x00	; 0
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	40 e8       	ldi	r20, 0x80	; 128
    6568:	5f e3       	ldi	r21, 0x3F	; 63
    656a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    656e:	88 23       	and	r24, r24
    6570:	0c f0       	brlt	.+2      	; 0x6574 <front+0x270>
    6572:	10 e0       	ldi	r17, 0x00	; 0
    6574:	11 23       	and	r17, r17
    6576:	29 f0       	breq	.+10     	; 0x6582 <front+0x27e>
		__ticks = 1;
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	9e a3       	lds	r25, 0x5e
    657e:	8d a3       	lds	r24, 0x5d
    6580:	46 c0       	rjmp	.+140    	; 0x660e <front+0x30a>
	else if (__tmp > 65535)
    6582:	11 e0       	ldi	r17, 0x01	; 1
    6584:	69 a1       	lds	r22, 0x49
    6586:	7a a1       	lds	r23, 0x4a
    6588:	8b a1       	lds	r24, 0x4b
    658a:	9c a1       	lds	r25, 0x4c
    658c:	20 e0       	ldi	r18, 0x00	; 0
    658e:	3f ef       	ldi	r19, 0xFF	; 255
    6590:	4f e7       	ldi	r20, 0x7F	; 127
    6592:	57 e4       	ldi	r21, 0x47	; 71
    6594:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6598:	18 16       	cp	r1, r24
    659a:	0c f0       	brlt	.+2      	; 0x659e <front+0x29a>
    659c:	10 e0       	ldi	r17, 0x00	; 0
    659e:	11 23       	and	r17, r17
    65a0:	61 f1       	breq	.+88     	; 0x65fa <front+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    65a4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    65a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    65a8:	98 a1       	lds	r25, 0x48
    65aa:	20 e0       	ldi	r18, 0x00	; 0
    65ac:	30 e0       	ldi	r19, 0x00	; 0
    65ae:	40 e2       	ldi	r20, 0x20	; 32
    65b0:	51 e4       	ldi	r21, 0x41	; 65
    65b2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    65b6:	dc 01       	movw	r26, r24
    65b8:	cb 01       	movw	r24, r22
    65ba:	bc 01       	movw	r22, r24
    65bc:	cd 01       	movw	r24, r26
    65be:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    65c2:	dc 01       	movw	r26, r24
    65c4:	cb 01       	movw	r24, r22
    65c6:	9e a3       	lds	r25, 0x5e
    65c8:	8d a3       	lds	r24, 0x5d
    65ca:	12 c0       	rjmp	.+36     	; 0x65f0 <front+0x2ec>
    65cc:	80 e7       	ldi	r24, 0x70	; 112
    65ce:	91 e0       	ldi	r25, 0x01	; 1
    65d0:	98 a7       	lds	r25, 0x78
    65d2:	8f a3       	lds	r24, 0x5f
    65d4:	8f a1       	lds	r24, 0x4f
    65d6:	98 a5       	lds	r25, 0x68
    65d8:	8c 01       	movw	r16, r24
    65da:	c8 01       	movw	r24, r16
    65dc:	01 97       	sbiw	r24, 0x01	; 1
    65de:	f1 f7       	brne	.-4      	; 0x65dc <front+0x2d8>
    65e0:	8c 01       	movw	r16, r24
    65e2:	18 a7       	lds	r17, 0x78
    65e4:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65e6:	8d a1       	lds	r24, 0x4d
    65e8:	9e a1       	lds	r25, 0x4e
    65ea:	01 97       	sbiw	r24, 0x01	; 1
    65ec:	9e a3       	lds	r25, 0x5e
    65ee:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65f0:	8d a1       	lds	r24, 0x4d
    65f2:	9e a1       	lds	r25, 0x4e
    65f4:	00 97       	sbiw	r24, 0x00	; 0
    65f6:	51 f7       	brne	.-44     	; 0x65cc <front+0x2c8>
    65f8:	17 c0       	rjmp	.+46     	; 0x6628 <front+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65fa:	69 a1       	lds	r22, 0x49
    65fc:	7a a1       	lds	r23, 0x4a
    65fe:	8b a1       	lds	r24, 0x4b
    6600:	9c a1       	lds	r25, 0x4c
    6602:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6606:	dc 01       	movw	r26, r24
    6608:	cb 01       	movw	r24, r22
    660a:	9e a3       	lds	r25, 0x5e
    660c:	8d a3       	lds	r24, 0x5d
    660e:	8d a1       	lds	r24, 0x4d
    6610:	9e a1       	lds	r25, 0x4e
    6612:	9a a7       	lds	r25, 0x7a
    6614:	89 a7       	lds	r24, 0x79
    6616:	89 a5       	lds	r24, 0x69
    6618:	9a a5       	lds	r25, 0x6a
    661a:	8c 01       	movw	r16, r24
    661c:	c8 01       	movw	r24, r16
    661e:	01 97       	sbiw	r24, 0x01	; 1
    6620:	f1 f7       	brne	.-4      	; 0x661e <front+0x31a>
    6622:	8c 01       	movw	r16, r24
    6624:	1a a7       	lds	r17, 0x7a
    6626:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	arm_backward();
    6628:	0e 94 ce 24 	call	0x499c	; 0x499c <arm_backward>
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	a6 e9       	ldi	r26, 0x96	; 150
    6632:	b3 e4       	ldi	r27, 0x43	; 67
    6634:	8b a7       	lds	r24, 0x7b
    6636:	9c a7       	lds	r25, 0x7c
    6638:	ad a7       	lds	r26, 0x7d
    663a:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    663c:	6b a5       	lds	r22, 0x6b
    663e:	7c a5       	lds	r23, 0x6c
    6640:	8d a5       	lds	r24, 0x6d
    6642:	9e a5       	lds	r25, 0x6e
    6644:	26 e6       	ldi	r18, 0x66	; 102
    6646:	36 e6       	ldi	r19, 0x66	; 102
    6648:	46 e6       	ldi	r20, 0x66	; 102
    664a:	55 e4       	ldi	r21, 0x45	; 69
    664c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6650:	dc 01       	movw	r26, r24
    6652:	cb 01       	movw	r24, r22
    6654:	8f a7       	lds	r24, 0x7f
    6656:	98 ab       	sts	0x58, r25
    6658:	a9 ab       	sts	0x59, r26
    665a:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    665c:	11 e0       	ldi	r17, 0x01	; 1
    665e:	6f a5       	lds	r22, 0x6f
    6660:	78 a9       	sts	0x48, r23
    6662:	89 a9       	sts	0x49, r24
    6664:	9a a9       	sts	0x4a, r25
    6666:	20 e0       	ldi	r18, 0x00	; 0
    6668:	30 e0       	ldi	r19, 0x00	; 0
    666a:	40 e8       	ldi	r20, 0x80	; 128
    666c:	5f e3       	ldi	r21, 0x3F	; 63
    666e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6672:	88 23       	and	r24, r24
    6674:	0c f0       	brlt	.+2      	; 0x6678 <front+0x374>
    6676:	10 e0       	ldi	r17, 0x00	; 0
    6678:	11 23       	and	r17, r17
    667a:	29 f0       	breq	.+10     	; 0x6686 <front+0x382>
		__ticks = 1;
    667c:	81 e0       	ldi	r24, 0x01	; 1
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	9c ab       	sts	0x5c, r25
    6682:	8b ab       	sts	0x5b, r24
    6684:	46 c0       	rjmp	.+140    	; 0x6712 <front+0x40e>
	else if (__tmp > 65535)
    6686:	11 e0       	ldi	r17, 0x01	; 1
    6688:	6f a5       	lds	r22, 0x6f
    668a:	78 a9       	sts	0x48, r23
    668c:	89 a9       	sts	0x49, r24
    668e:	9a a9       	sts	0x4a, r25
    6690:	20 e0       	ldi	r18, 0x00	; 0
    6692:	3f ef       	ldi	r19, 0xFF	; 255
    6694:	4f e7       	ldi	r20, 0x7F	; 127
    6696:	57 e4       	ldi	r21, 0x47	; 71
    6698:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    669c:	18 16       	cp	r1, r24
    669e:	0c f0       	brlt	.+2      	; 0x66a2 <front+0x39e>
    66a0:	10 e0       	ldi	r17, 0x00	; 0
    66a2:	11 23       	and	r17, r17
    66a4:	61 f1       	breq	.+88     	; 0x66fe <front+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a6:	6b a5       	lds	r22, 0x6b
    66a8:	7c a5       	lds	r23, 0x6c
    66aa:	8d a5       	lds	r24, 0x6d
    66ac:	9e a5       	lds	r25, 0x6e
    66ae:	20 e0       	ldi	r18, 0x00	; 0
    66b0:	30 e0       	ldi	r19, 0x00	; 0
    66b2:	40 e2       	ldi	r20, 0x20	; 32
    66b4:	51 e4       	ldi	r21, 0x41	; 65
    66b6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    66ba:	dc 01       	movw	r26, r24
    66bc:	cb 01       	movw	r24, r22
    66be:	bc 01       	movw	r22, r24
    66c0:	cd 01       	movw	r24, r26
    66c2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    66c6:	dc 01       	movw	r26, r24
    66c8:	cb 01       	movw	r24, r22
    66ca:	9c ab       	sts	0x5c, r25
    66cc:	8b ab       	sts	0x5b, r24
    66ce:	12 c0       	rjmp	.+36     	; 0x66f4 <front+0x3f0>
    66d0:	80 e7       	ldi	r24, 0x70	; 112
    66d2:	91 e0       	ldi	r25, 0x01	; 1
    66d4:	9e ab       	sts	0x5e, r25
    66d6:	8d ab       	sts	0x5d, r24
    66d8:	8d a9       	sts	0x4d, r24
    66da:	9e a9       	sts	0x4e, r25
    66dc:	8c 01       	movw	r16, r24
    66de:	c8 01       	movw	r24, r16
    66e0:	01 97       	sbiw	r24, 0x01	; 1
    66e2:	f1 f7       	brne	.-4      	; 0x66e0 <front+0x3dc>
    66e4:	8c 01       	movw	r16, r24
    66e6:	1e ab       	sts	0x5e, r17
    66e8:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ea:	8b a9       	sts	0x4b, r24
    66ec:	9c a9       	sts	0x4c, r25
    66ee:	01 97       	sbiw	r24, 0x01	; 1
    66f0:	9c ab       	sts	0x5c, r25
    66f2:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66f4:	8b a9       	sts	0x4b, r24
    66f6:	9c a9       	sts	0x4c, r25
    66f8:	00 97       	sbiw	r24, 0x00	; 0
    66fa:	51 f7       	brne	.-44     	; 0x66d0 <front+0x3cc>
    66fc:	17 c0       	rjmp	.+46     	; 0x672c <front+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66fe:	6f a5       	lds	r22, 0x6f
    6700:	78 a9       	sts	0x48, r23
    6702:	89 a9       	sts	0x49, r24
    6704:	9a a9       	sts	0x4a, r25
    6706:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    670a:	dc 01       	movw	r26, r24
    670c:	cb 01       	movw	r24, r22
    670e:	9c ab       	sts	0x5c, r25
    6710:	8b ab       	sts	0x5b, r24
    6712:	8b a9       	sts	0x4b, r24
    6714:	9c a9       	sts	0x4c, r25
    6716:	98 af       	sts	0x78, r25
    6718:	8f ab       	sts	0x5f, r24
    671a:	8f a9       	sts	0x4f, r24
    671c:	98 ad       	sts	0x68, r25
    671e:	8c 01       	movw	r16, r24
    6720:	c8 01       	movw	r24, r16
    6722:	01 97       	sbiw	r24, 0x01	; 1
    6724:	f1 f7       	brne	.-4      	; 0x6722 <front+0x41e>
    6726:	8c 01       	movw	r16, r24
    6728:	18 af       	sts	0x78, r17
    672a:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
    672c:	e8 96       	adiw	r28, 0x38	; 56
    672e:	0f b6       	in	r0, 0x3f	; 63
    6730:	f8 94       	cli
    6732:	de bf       	out	0x3e, r29	; 62
    6734:	0f be       	out	0x3f, r0	; 63
    6736:	cd bf       	out	0x3d, r28	; 61
    6738:	df 91       	pop	r29
    673a:	cf 91       	pop	r28
    673c:	1f 91       	pop	r17
    673e:	0f 91       	pop	r16
    6740:	08 95       	ret

00006742 <read_line>:

*/

void read_line()

{
    6742:	cf 93       	push	r28
    6744:	df 93       	push	r29
    6746:	cd b7       	in	r28, 0x3d	; 61
    6748:	de b7       	in	r29, 0x3e	; 62

    Left_white_line = (int) ADC_Conversion(3); //Getting data of Left WL Sensor
    674a:	83 e0       	ldi	r24, 0x03	; 3
    674c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    6750:	80 93 46 03 	sts	0x0346, r24

    Center_white_line = (int) ADC_Conversion(2); //Getting data of Center WL Sensor
    6754:	82 e0       	ldi	r24, 0x02	; 2
    6756:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    675a:	80 93 47 03 	sts	0x0347, r24

    Right_white_line = (int) ADC_Conversion(1); //Getting data of Right WL Sensor
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    6764:	80 93 48 03 	sts	0x0348, r24

}
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	08 95       	ret

0000676e <display_line>:

*/

void display_line()

 {
    676e:	cf 93       	push	r28
    6770:	df 93       	push	r29
    6772:	cd b7       	in	r28, 0x3d	; 61
    6774:	de b7       	in	r29, 0x3e	; 62

    lcd_print(1,1,Left_white_line,3);
    6776:	80 91 46 03 	lds	r24, 0x0346
    677a:	28 2f       	mov	r18, r24
    677c:	30 e0       	ldi	r19, 0x00	; 0
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	61 e0       	ldi	r22, 0x01	; 1
    6782:	a9 01       	movw	r20, r18
    6784:	23 e0       	ldi	r18, 0x03	; 3
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,5,Center_white_line,3);
    678c:	80 91 47 03 	lds	r24, 0x0347
    6790:	28 2f       	mov	r18, r24
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	65 e0       	ldi	r22, 0x05	; 5
    6798:	a9 01       	movw	r20, r18
    679a:	23 e0       	ldi	r18, 0x03	; 3
    679c:	30 e0       	ldi	r19, 0x00	; 0
    679e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,9,Right_white_line,3);
    67a2:	80 91 48 03 	lds	r24, 0x0348
    67a6:	28 2f       	mov	r18, r24
    67a8:	30 e0       	ldi	r19, 0x00	; 0
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	69 e0       	ldi	r22, 0x09	; 9
    67ae:	a9 01       	movw	r20, r18
    67b0:	23 e0       	ldi	r18, 0x03	; 3
    67b2:	30 e0       	ldi	r19, 0x00	; 0
    67b4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,1,line_cond,1);
    67b8:	80 91 4f 03 	lds	r24, 0x034F
    67bc:	90 91 50 03 	lds	r25, 0x0350
    67c0:	9c 01       	movw	r18, r24
    67c2:	81 e0       	ldi	r24, 0x01	; 1
    67c4:	61 e0       	ldi	r22, 0x01	; 1
    67c6:	a9 01       	movw	r20, r18
    67c8:	21 e0       	ldi	r18, 0x01	; 1
    67ca:	30 e0       	ldi	r19, 0x00	; 0
    67cc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    67d0:	df 91       	pop	r29
    67d2:	cf 91       	pop	r28
    67d4:	08 95       	ret

000067d6 <clear_count>:

*/

void clear_count()

{
    67d6:	cf 93       	push	r28
    67d8:	df 93       	push	r29
    67da:	cd b7       	in	r28, 0x3d	; 61
    67dc:	de b7       	in	r29, 0x3e	; 62

    node = 0;
    67de:	10 92 64 03 	sts	0x0364, r1
    67e2:	10 92 63 03 	sts	0x0363, r1

    node_flag = 0;
    67e6:	10 92 84 04 	sts	0x0484, r1
    67ea:	10 92 83 04 	sts	0x0483, r1

    left_flag = 0;
    67ee:	10 92 56 03 	sts	0x0356, r1
    67f2:	10 92 55 03 	sts	0x0355, r1

    right_flag = 0;
    67f6:	10 92 58 03 	sts	0x0358, r1
    67fa:	10 92 57 03 	sts	0x0357, r1

}
    67fe:	df 91       	pop	r29
    6800:	cf 91       	pop	r28
    6802:	08 95       	ret

00006804 <enable_flags>:

*/

void enable_flags(int l_flag, int n_flag, int r_flag)

{
    6804:	cf 93       	push	r28
    6806:	df 93       	push	r29
    6808:	00 d0       	rcall	.+0      	; 0x680a <enable_flags+0x6>
    680a:	00 d0       	rcall	.+0      	; 0x680c <enable_flags+0x8>
    680c:	cd b7       	in	r28, 0x3d	; 61
    680e:	de b7       	in	r29, 0x3e	; 62
    6810:	9a 83       	std	Y+2, r25	; 0x02
    6812:	89 83       	std	Y+1, r24	; 0x01
    6814:	7c 83       	std	Y+4, r23	; 0x04
    6816:	6b 83       	std	Y+3, r22	; 0x03
    6818:	5e 83       	std	Y+6, r21	; 0x06
    681a:	4d 83       	std	Y+5, r20	; 0x05

    en_left = l_flag;
    681c:	89 81       	ldd	r24, Y+1	; 0x01
    681e:	9a 81       	ldd	r25, Y+2	; 0x02
    6820:	90 93 52 03 	sts	0x0352, r25
    6824:	80 93 51 03 	sts	0x0351, r24

    en_right = r_flag;
    6828:	8d 81       	ldd	r24, Y+5	; 0x05
    682a:	9e 81       	ldd	r25, Y+6	; 0x06
    682c:	90 93 54 03 	sts	0x0354, r25
    6830:	80 93 53 03 	sts	0x0353, r24

    en_node = n_flag;
    6834:	8b 81       	ldd	r24, Y+3	; 0x03
    6836:	9c 81       	ldd	r25, Y+4	; 0x04
    6838:	90 93 01 02 	sts	0x0201, r25
    683c:	80 93 00 02 	sts	0x0200, r24

}
    6840:	26 96       	adiw	r28, 0x06	; 6
    6842:	0f b6       	in	r0, 0x3f	; 63
    6844:	f8 94       	cli
    6846:	de bf       	out	0x3e, r29	; 62
    6848:	0f be       	out	0x3f, r0	; 63
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	df 91       	pop	r29
    684e:	cf 91       	pop	r28
    6850:	08 95       	ret

00006852 <line_conditions>:


*/

void line_conditions()
{
    6852:	cf 93       	push	r28
    6854:	df 93       	push	r29
    6856:	cd b7       	in	r28, 0x3d	; 61
    6858:	de b7       	in	r29, 0x3e	; 62
	// Nodes Condition
	if (Center_white_line >= 115 || Left_white_line >= 120 || Right_white_line >= 115 || (Center_white_line >=120 && (Left_white_line >= 110 || Right_white_line >= 110))) // 1 1 1
    685a:	80 91 47 03 	lds	r24, 0x0347
    685e:	83 37       	cpi	r24, 0x73	; 115
    6860:	a0 f4       	brcc	.+40     	; 0x688a <line_conditions+0x38>
    6862:	80 91 46 03 	lds	r24, 0x0346
    6866:	88 37       	cpi	r24, 0x78	; 120
    6868:	80 f4       	brcc	.+32     	; 0x688a <line_conditions+0x38>
    686a:	80 91 48 03 	lds	r24, 0x0348
    686e:	83 37       	cpi	r24, 0x73	; 115
    6870:	60 f4       	brcc	.+24     	; 0x688a <line_conditions+0x38>
    6872:	80 91 47 03 	lds	r24, 0x0347
    6876:	88 37       	cpi	r24, 0x78	; 120
    6878:	a8 f0       	brcs	.+42     	; 0x68a4 <line_conditions+0x52>
    687a:	80 91 46 03 	lds	r24, 0x0346
    687e:	8e 36       	cpi	r24, 0x6E	; 110
    6880:	20 f4       	brcc	.+8      	; 0x688a <line_conditions+0x38>
    6882:	80 91 48 03 	lds	r24, 0x0348
    6886:	8e 36       	cpi	r24, 0x6E	; 110
    6888:	68 f0       	brcs	.+26     	; 0x68a4 <line_conditions+0x52>
	{
		line_cond = 1;
    688a:	81 e0       	ldi	r24, 0x01	; 1
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	90 93 50 03 	sts	0x0350, r25
    6892:	80 93 4f 03 	sts	0x034F, r24
		node_flag = 1;
    6896:	81 e0       	ldi	r24, 0x01	; 1
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	90 93 84 04 	sts	0x0484, r25
    689e:	80 93 83 04 	sts	0x0483, r24
    68a2:	71 c0       	rjmp	.+226    	; 0x6986 <line_conditions+0x134>
	}
	
	//Straight Line Condition
	else if (Left_white_line < 11  && Center_white_line >= 14 && Right_white_line < 11) // 0 1 0
    68a4:	80 91 46 03 	lds	r24, 0x0346
    68a8:	8b 30       	cpi	r24, 0x0B	; 11
    68aa:	78 f4       	brcc	.+30     	; 0x68ca <line_conditions+0x78>
    68ac:	80 91 47 03 	lds	r24, 0x0347
    68b0:	8e 30       	cpi	r24, 0x0E	; 14
    68b2:	58 f0       	brcs	.+22     	; 0x68ca <line_conditions+0x78>
    68b4:	80 91 48 03 	lds	r24, 0x0348
    68b8:	8b 30       	cpi	r24, 0x0B	; 11
    68ba:	38 f4       	brcc	.+14     	; 0x68ca <line_conditions+0x78>
	{
		line_cond = 2;
    68bc:	82 e0       	ldi	r24, 0x02	; 2
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	90 93 50 03 	sts	0x0350, r25
    68c4:	80 93 4f 03 	sts	0x034F, r24
    68c8:	5e c0       	rjmp	.+188    	; 0x6986 <line_conditions+0x134>
	}
	
	//Straight Line Condition (Robot moved slightly towards right)
	else if (Left_white_line > 20 && Center_white_line < 11 && Right_white_line < 11) // 1 0 0
    68ca:	80 91 46 03 	lds	r24, 0x0346
    68ce:	85 31       	cpi	r24, 0x15	; 21
    68d0:	78 f0       	brcs	.+30     	; 0x68f0 <line_conditions+0x9e>
    68d2:	80 91 47 03 	lds	r24, 0x0347
    68d6:	8b 30       	cpi	r24, 0x0B	; 11
    68d8:	58 f4       	brcc	.+22     	; 0x68f0 <line_conditions+0x9e>
    68da:	80 91 48 03 	lds	r24, 0x0348
    68de:	8b 30       	cpi	r24, 0x0B	; 11
    68e0:	38 f4       	brcc	.+14     	; 0x68f0 <line_conditions+0x9e>
	{
		line_cond = 3;
    68e2:	83 e0       	ldi	r24, 0x03	; 3
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	90 93 50 03 	sts	0x0350, r25
    68ea:	80 93 4f 03 	sts	0x034F, r24
    68ee:	4b c0       	rjmp	.+150    	; 0x6986 <line_conditions+0x134>
	}

        else if (Left_white_line > 10 && Center_white_line > 10 && Right_white_line < 11) // 1 1 0
    68f0:	80 91 46 03 	lds	r24, 0x0346
    68f4:	8b 30       	cpi	r24, 0x0B	; 11
    68f6:	78 f0       	brcs	.+30     	; 0x6916 <line_conditions+0xc4>
    68f8:	80 91 47 03 	lds	r24, 0x0347
    68fc:	8b 30       	cpi	r24, 0x0B	; 11
    68fe:	58 f0       	brcs	.+22     	; 0x6916 <line_conditions+0xc4>
    6900:	80 91 48 03 	lds	r24, 0x0348
    6904:	8b 30       	cpi	r24, 0x0B	; 11
    6906:	38 f4       	brcc	.+14     	; 0x6916 <line_conditions+0xc4>
	{
		line_cond = 6;//slighty_L
    6908:	86 e0       	ldi	r24, 0x06	; 6
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	90 93 50 03 	sts	0x0350, r25
    6910:	80 93 4f 03 	sts	0x034F, r24
    6914:	38 c0       	rjmp	.+112    	; 0x6986 <line_conditions+0x134>
	}

        
	//Straight Line Condition (Robot moved slightly towards left)
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line > 20) // 0 0 1
    6916:	80 91 46 03 	lds	r24, 0x0346
    691a:	8b 30       	cpi	r24, 0x0B	; 11
    691c:	78 f4       	brcc	.+30     	; 0x693c <line_conditions+0xea>
    691e:	80 91 47 03 	lds	r24, 0x0347
    6922:	8b 30       	cpi	r24, 0x0B	; 11
    6924:	58 f4       	brcc	.+22     	; 0x693c <line_conditions+0xea>
    6926:	80 91 48 03 	lds	r24, 0x0348
    692a:	85 31       	cpi	r24, 0x15	; 21
    692c:	38 f0       	brcs	.+14     	; 0x693c <line_conditions+0xea>
	{
		line_cond = 4;
    692e:	84 e0       	ldi	r24, 0x04	; 4
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	90 93 50 03 	sts	0x0350, r25
    6936:	80 93 4f 03 	sts	0x034F, r24
    693a:	25 c0       	rjmp	.+74     	; 0x6986 <line_conditions+0x134>
	}

        else if (Left_white_line < 11 && Center_white_line > 11 && Right_white_line > 11) // 0 1 1
    693c:	80 91 46 03 	lds	r24, 0x0346
    6940:	8b 30       	cpi	r24, 0x0B	; 11
    6942:	78 f4       	brcc	.+30     	; 0x6962 <line_conditions+0x110>
    6944:	80 91 47 03 	lds	r24, 0x0347
    6948:	8c 30       	cpi	r24, 0x0C	; 12
    694a:	58 f0       	brcs	.+22     	; 0x6962 <line_conditions+0x110>
    694c:	80 91 48 03 	lds	r24, 0x0348
    6950:	8c 30       	cpi	r24, 0x0C	; 12
    6952:	38 f0       	brcs	.+14     	; 0x6962 <line_conditions+0x110>
	{
		line_cond = 7;//slighty_R
    6954:	87 e0       	ldi	r24, 0x07	; 7
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	90 93 50 03 	sts	0x0350, r25
    695c:	80 93 4f 03 	sts	0x034F, r24
    6960:	12 c0       	rjmp	.+36     	; 0x6986 <line_conditions+0x134>
	}

	//No Line Condition
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line < 11) // 0 0 0
    6962:	80 91 46 03 	lds	r24, 0x0346
    6966:	8b 30       	cpi	r24, 0x0B	; 11
    6968:	70 f4       	brcc	.+28     	; 0x6986 <line_conditions+0x134>
    696a:	80 91 47 03 	lds	r24, 0x0347
    696e:	8b 30       	cpi	r24, 0x0B	; 11
    6970:	50 f4       	brcc	.+20     	; 0x6986 <line_conditions+0x134>
    6972:	80 91 48 03 	lds	r24, 0x0348
    6976:	8b 30       	cpi	r24, 0x0B	; 11
    6978:	30 f4       	brcc	.+12     	; 0x6986 <line_conditions+0x134>
	{
		line_cond = 5;
    697a:	85 e0       	ldi	r24, 0x05	; 5
    697c:	90 e0       	ldi	r25, 0x00	; 0
    697e:	90 93 50 03 	sts	0x0350, r25
    6982:	80 93 4f 03 	sts	0x034F, r24
	}

}
    6986:	df 91       	pop	r29
    6988:	cf 91       	pop	r28
    698a:	08 95       	ret

0000698c <line_follow>:

*/

void line_follow() 

{
    698c:	0f 93       	push	r16
    698e:	1f 93       	push	r17
    6990:	cf 93       	push	r28
    6992:	df 93       	push	r29
    6994:	cd b7       	in	r28, 0x3d	; 61
    6996:	de b7       	in	r29, 0x3e	; 62
    6998:	e8 97       	sbiw	r28, 0x38	; 56
    699a:	0f b6       	in	r0, 0x3f	; 63
    699c:	f8 94       	cli
    699e:	de bf       	out	0x3e, r29	; 62
    69a0:	0f be       	out	0x3f, r0	; 63
    69a2:	cd bf       	out	0x3d, r28	; 61

    if (t4_flag == 1) 
    69a4:	80 91 4b 03 	lds	r24, 0x034B
    69a8:	90 91 4c 03 	lds	r25, 0x034C
    69ac:	81 30       	cpi	r24, 0x01	; 1
    69ae:	91 05       	cpc	r25, r1
    69b0:	61 f4       	brne	.+24     	; 0x69ca <line_follow+0x3e>

	{

        node_flag = 0;
    69b2:	10 92 84 04 	sts	0x0484, r1
    69b6:	10 92 83 04 	sts	0x0483, r1

        left_flag = 0;
    69ba:	10 92 56 03 	sts	0x0356, r1
    69be:	10 92 55 03 	sts	0x0355, r1

        right_flag = 0;
    69c2:	10 92 58 03 	sts	0x0358, r1
    69c6:	10 92 57 03 	sts	0x0357, r1

    }



    if (node_flag == 1)
    69ca:	80 91 83 04 	lds	r24, 0x0483
    69ce:	90 91 84 04 	lds	r25, 0x0484
    69d2:	81 30       	cpi	r24, 0x01	; 1
    69d4:	91 05       	cpc	r25, r1
    69d6:	61 f5       	brne	.+88     	; 0x6a30 <line_follow+0xa4>

	 {

        start_timer4(10);
    69d8:	8a e0       	ldi	r24, 0x0A	; 10
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	0e 94 3d 1c 	call	0x387a	; 0x387a <start_timer4>

		buzz(50);
    69e0:	2a e0       	ldi	r18, 0x0A	; 10
    69e2:	32 e8       	ldi	r19, 0x82	; 130
    69e4:	82 e3       	ldi	r24, 0x32	; 50
    69e6:	90 e0       	ldi	r25, 0x00	; 0
    69e8:	f9 01       	movw	r30, r18
    69ea:	19 95       	eicall

		node++;		
    69ec:	80 91 63 03 	lds	r24, 0x0363
    69f0:	90 91 64 03 	lds	r25, 0x0364
    69f4:	01 96       	adiw	r24, 0x01	; 1
    69f6:	90 93 64 03 	sts	0x0364, r25
    69fa:	80 93 63 03 	sts	0x0363, r24

		forward();
    69fe:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

		velocity(255,255);
    6a02:	8f ef       	ldi	r24, 0xFF	; 255
    6a04:	6f ef       	ldi	r22, 0xFF	; 255
    6a06:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>

        node_flag = 0;
    6a0a:	10 92 84 04 	sts	0x0484, r1
    6a0e:	10 92 83 04 	sts	0x0483, r1

		travel_path(master_path[node]);
    6a12:	2a e3       	ldi	r18, 0x3A	; 58
    6a14:	36 e6       	ldi	r19, 0x66	; 102
    6a16:	80 91 63 03 	lds	r24, 0x0363
    6a1a:	90 91 64 03 	lds	r25, 0x0364
    6a1e:	89 59       	subi	r24, 0x99	; 153
    6a20:	9c 4f       	sbci	r25, 0xFC	; 252
    6a22:	fc 01       	movw	r30, r24
    6a24:	80 81       	ld	r24, Z
    6a26:	88 2f       	mov	r24, r24
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	f9 01       	movw	r30, r18
    6a2c:	19 95       	eicall
    6a2e:	66 c2       	rjmp	.+1228   	; 0x6efc <line_follow+0x570>

	 }



    else if (line_cond == 2)
    6a30:	80 91 4f 03 	lds	r24, 0x034F
    6a34:	90 91 50 03 	lds	r25, 0x0350
    6a38:	82 30       	cpi	r24, 0x02	; 2
    6a3a:	91 05       	cpc	r25, r1
    6a3c:	39 f4       	brne	.+14     	; 0x6a4c <line_follow+0xc0>

	{

        forward();
    6a3e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    6a42:	8f ef       	ldi	r24, 0xFF	; 255
    6a44:	6f ef       	ldi	r22, 0xFF	; 255
    6a46:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6a4a:	58 c2       	rjmp	.+1200   	; 0x6efc <line_follow+0x570>

    } 

	else if (line_cond == 3)
    6a4c:	80 91 4f 03 	lds	r24, 0x034F
    6a50:	90 91 50 03 	lds	r25, 0x0350
    6a54:	83 30       	cpi	r24, 0x03	; 3
    6a56:	91 05       	cpc	r25, r1
    6a58:	09 f0       	breq	.+2      	; 0x6a5c <line_follow+0xd0>
    6a5a:	89 c0       	rjmp	.+274    	; 0x6b6e <line_follow+0x1e2>

	{

        stop();
    6a5c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6a60:	80 e0       	ldi	r24, 0x00	; 0
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	a0 e2       	ldi	r26, 0x20	; 32
    6a66:	b1 e4       	ldi	r27, 0x41	; 65
    6a68:	89 83       	std	Y+1, r24	; 0x01
    6a6a:	9a 83       	std	Y+2, r25	; 0x02
    6a6c:	ab 83       	std	Y+3, r26	; 0x03
    6a6e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6a70:	69 81       	ldd	r22, Y+1	; 0x01
    6a72:	7a 81       	ldd	r23, Y+2	; 0x02
    6a74:	8b 81       	ldd	r24, Y+3	; 0x03
    6a76:	9c 81       	ldd	r25, Y+4	; 0x04
    6a78:	26 e6       	ldi	r18, 0x66	; 102
    6a7a:	36 e6       	ldi	r19, 0x66	; 102
    6a7c:	46 e6       	ldi	r20, 0x66	; 102
    6a7e:	55 e4       	ldi	r21, 0x45	; 69
    6a80:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6a84:	dc 01       	movw	r26, r24
    6a86:	cb 01       	movw	r24, r22
    6a88:	8d 83       	std	Y+5, r24	; 0x05
    6a8a:	9e 83       	std	Y+6, r25	; 0x06
    6a8c:	af 83       	std	Y+7, r26	; 0x07
    6a8e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6a90:	11 e0       	ldi	r17, 0x01	; 1
    6a92:	6d 81       	ldd	r22, Y+5	; 0x05
    6a94:	7e 81       	ldd	r23, Y+6	; 0x06
    6a96:	8f 81       	ldd	r24, Y+7	; 0x07
    6a98:	98 85       	ldd	r25, Y+8	; 0x08
    6a9a:	20 e0       	ldi	r18, 0x00	; 0
    6a9c:	30 e0       	ldi	r19, 0x00	; 0
    6a9e:	40 e8       	ldi	r20, 0x80	; 128
    6aa0:	5f e3       	ldi	r21, 0x3F	; 63
    6aa2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6aa6:	88 23       	and	r24, r24
    6aa8:	0c f0       	brlt	.+2      	; 0x6aac <line_follow+0x120>
    6aaa:	10 e0       	ldi	r17, 0x00	; 0
    6aac:	11 23       	and	r17, r17
    6aae:	29 f0       	breq	.+10     	; 0x6aba <line_follow+0x12e>
		__ticks = 1;
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	9a 87       	std	Y+10, r25	; 0x0a
    6ab6:	89 87       	std	Y+9, r24	; 0x09
    6ab8:	46 c0       	rjmp	.+140    	; 0x6b46 <line_follow+0x1ba>
	else if (__tmp > 65535)
    6aba:	11 e0       	ldi	r17, 0x01	; 1
    6abc:	6d 81       	ldd	r22, Y+5	; 0x05
    6abe:	7e 81       	ldd	r23, Y+6	; 0x06
    6ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ac2:	98 85       	ldd	r25, Y+8	; 0x08
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	3f ef       	ldi	r19, 0xFF	; 255
    6ac8:	4f e7       	ldi	r20, 0x7F	; 127
    6aca:	57 e4       	ldi	r21, 0x47	; 71
    6acc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6ad0:	18 16       	cp	r1, r24
    6ad2:	0c f0       	brlt	.+2      	; 0x6ad6 <line_follow+0x14a>
    6ad4:	10 e0       	ldi	r17, 0x00	; 0
    6ad6:	11 23       	and	r17, r17
    6ad8:	61 f1       	breq	.+88     	; 0x6b32 <line_follow+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ada:	69 81       	ldd	r22, Y+1	; 0x01
    6adc:	7a 81       	ldd	r23, Y+2	; 0x02
    6ade:	8b 81       	ldd	r24, Y+3	; 0x03
    6ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ae2:	20 e0       	ldi	r18, 0x00	; 0
    6ae4:	30 e0       	ldi	r19, 0x00	; 0
    6ae6:	40 e2       	ldi	r20, 0x20	; 32
    6ae8:	51 e4       	ldi	r21, 0x41	; 65
    6aea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6aee:	dc 01       	movw	r26, r24
    6af0:	cb 01       	movw	r24, r22
    6af2:	bc 01       	movw	r22, r24
    6af4:	cd 01       	movw	r24, r26
    6af6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6afa:	dc 01       	movw	r26, r24
    6afc:	cb 01       	movw	r24, r22
    6afe:	9a 87       	std	Y+10, r25	; 0x0a
    6b00:	89 87       	std	Y+9, r24	; 0x09
    6b02:	12 c0       	rjmp	.+36     	; 0x6b28 <line_follow+0x19c>
    6b04:	80 e7       	ldi	r24, 0x70	; 112
    6b06:	91 e0       	ldi	r25, 0x01	; 1
    6b08:	9c 87       	std	Y+12, r25	; 0x0c
    6b0a:	8b 87       	std	Y+11, r24	; 0x0b
    6b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6b10:	8c 01       	movw	r16, r24
    6b12:	c8 01       	movw	r24, r16
    6b14:	01 97       	sbiw	r24, 0x01	; 1
    6b16:	f1 f7       	brne	.-4      	; 0x6b14 <line_follow+0x188>
    6b18:	8c 01       	movw	r16, r24
    6b1a:	1c 87       	std	Y+12, r17	; 0x0c
    6b1c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b1e:	89 85       	ldd	r24, Y+9	; 0x09
    6b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b22:	01 97       	sbiw	r24, 0x01	; 1
    6b24:	9a 87       	std	Y+10, r25	; 0x0a
    6b26:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b28:	89 85       	ldd	r24, Y+9	; 0x09
    6b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b2c:	00 97       	sbiw	r24, 0x00	; 0
    6b2e:	51 f7       	brne	.-44     	; 0x6b04 <line_follow+0x178>
    6b30:	17 c0       	rjmp	.+46     	; 0x6b60 <line_follow+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b32:	6d 81       	ldd	r22, Y+5	; 0x05
    6b34:	7e 81       	ldd	r23, Y+6	; 0x06
    6b36:	8f 81       	ldd	r24, Y+7	; 0x07
    6b38:	98 85       	ldd	r25, Y+8	; 0x08
    6b3a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6b3e:	dc 01       	movw	r26, r24
    6b40:	cb 01       	movw	r24, r22
    6b42:	9a 87       	std	Y+10, r25	; 0x0a
    6b44:	89 87       	std	Y+9, r24	; 0x09
    6b46:	89 85       	ldd	r24, Y+9	; 0x09
    6b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b4a:	9e 87       	std	Y+14, r25	; 0x0e
    6b4c:	8d 87       	std	Y+13, r24	; 0x0d
    6b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b52:	8c 01       	movw	r16, r24
    6b54:	f8 01       	movw	r30, r16
    6b56:	31 97       	sbiw	r30, 0x01	; 1
    6b58:	f1 f7       	brne	.-4      	; 0x6b56 <line_follow+0x1ca>
    6b5a:	8f 01       	movw	r16, r30
    6b5c:	1e 87       	std	Y+14, r17	; 0x0e
    6b5e:	0d 87       	std	Y+13, r16	; 0x0d

        _delay_ms(10);

        forward();
    6b60:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(180, 255);
    6b64:	84 eb       	ldi	r24, 0xB4	; 180
    6b66:	6f ef       	ldi	r22, 0xFF	; 255
    6b68:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6b6c:	c7 c1       	rjmp	.+910    	; 0x6efc <line_follow+0x570>

    } 

	else if (line_cond == 4)
    6b6e:	80 91 4f 03 	lds	r24, 0x034F
    6b72:	90 91 50 03 	lds	r25, 0x0350
    6b76:	84 30       	cpi	r24, 0x04	; 4
    6b78:	91 05       	cpc	r25, r1
    6b7a:	09 f0       	breq	.+2      	; 0x6b7e <line_follow+0x1f2>
    6b7c:	89 c0       	rjmp	.+274    	; 0x6c90 <line_follow+0x304>

	{

        stop();
    6b7e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6b82:	80 e0       	ldi	r24, 0x00	; 0
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	a0 e2       	ldi	r26, 0x20	; 32
    6b88:	b1 e4       	ldi	r27, 0x41	; 65
    6b8a:	8f 87       	std	Y+15, r24	; 0x0f
    6b8c:	98 8b       	std	Y+16, r25	; 0x10
    6b8e:	a9 8b       	std	Y+17, r26	; 0x11
    6b90:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b92:	6f 85       	ldd	r22, Y+15	; 0x0f
    6b94:	78 89       	ldd	r23, Y+16	; 0x10
    6b96:	89 89       	ldd	r24, Y+17	; 0x11
    6b98:	9a 89       	ldd	r25, Y+18	; 0x12
    6b9a:	26 e6       	ldi	r18, 0x66	; 102
    6b9c:	36 e6       	ldi	r19, 0x66	; 102
    6b9e:	46 e6       	ldi	r20, 0x66	; 102
    6ba0:	55 e4       	ldi	r21, 0x45	; 69
    6ba2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	8b 8b       	std	Y+19, r24	; 0x13
    6bac:	9c 8b       	std	Y+20, r25	; 0x14
    6bae:	ad 8b       	std	Y+21, r26	; 0x15
    6bb0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6bb2:	11 e0       	ldi	r17, 0x01	; 1
    6bb4:	6b 89       	ldd	r22, Y+19	; 0x13
    6bb6:	7c 89       	ldd	r23, Y+20	; 0x14
    6bb8:	8d 89       	ldd	r24, Y+21	; 0x15
    6bba:	9e 89       	ldd	r25, Y+22	; 0x16
    6bbc:	20 e0       	ldi	r18, 0x00	; 0
    6bbe:	30 e0       	ldi	r19, 0x00	; 0
    6bc0:	40 e8       	ldi	r20, 0x80	; 128
    6bc2:	5f e3       	ldi	r21, 0x3F	; 63
    6bc4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6bc8:	88 23       	and	r24, r24
    6bca:	0c f0       	brlt	.+2      	; 0x6bce <line_follow+0x242>
    6bcc:	10 e0       	ldi	r17, 0x00	; 0
    6bce:	11 23       	and	r17, r17
    6bd0:	29 f0       	breq	.+10     	; 0x6bdc <line_follow+0x250>
		__ticks = 1;
    6bd2:	81 e0       	ldi	r24, 0x01	; 1
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	98 8f       	std	Y+24, r25	; 0x18
    6bd8:	8f 8b       	std	Y+23, r24	; 0x17
    6bda:	46 c0       	rjmp	.+140    	; 0x6c68 <line_follow+0x2dc>
	else if (__tmp > 65535)
    6bdc:	11 e0       	ldi	r17, 0x01	; 1
    6bde:	6b 89       	ldd	r22, Y+19	; 0x13
    6be0:	7c 89       	ldd	r23, Y+20	; 0x14
    6be2:	8d 89       	ldd	r24, Y+21	; 0x15
    6be4:	9e 89       	ldd	r25, Y+22	; 0x16
    6be6:	20 e0       	ldi	r18, 0x00	; 0
    6be8:	3f ef       	ldi	r19, 0xFF	; 255
    6bea:	4f e7       	ldi	r20, 0x7F	; 127
    6bec:	57 e4       	ldi	r21, 0x47	; 71
    6bee:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6bf2:	18 16       	cp	r1, r24
    6bf4:	0c f0       	brlt	.+2      	; 0x6bf8 <line_follow+0x26c>
    6bf6:	10 e0       	ldi	r17, 0x00	; 0
    6bf8:	11 23       	and	r17, r17
    6bfa:	61 f1       	breq	.+88     	; 0x6c54 <line_follow+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bfc:	6f 85       	ldd	r22, Y+15	; 0x0f
    6bfe:	78 89       	ldd	r23, Y+16	; 0x10
    6c00:	89 89       	ldd	r24, Y+17	; 0x11
    6c02:	9a 89       	ldd	r25, Y+18	; 0x12
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	40 e2       	ldi	r20, 0x20	; 32
    6c0a:	51 e4       	ldi	r21, 0x41	; 65
    6c0c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6c10:	dc 01       	movw	r26, r24
    6c12:	cb 01       	movw	r24, r22
    6c14:	bc 01       	movw	r22, r24
    6c16:	cd 01       	movw	r24, r26
    6c18:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6c1c:	dc 01       	movw	r26, r24
    6c1e:	cb 01       	movw	r24, r22
    6c20:	98 8f       	std	Y+24, r25	; 0x18
    6c22:	8f 8b       	std	Y+23, r24	; 0x17
    6c24:	12 c0       	rjmp	.+36     	; 0x6c4a <line_follow+0x2be>
    6c26:	80 e7       	ldi	r24, 0x70	; 112
    6c28:	91 e0       	ldi	r25, 0x01	; 1
    6c2a:	9a 8f       	std	Y+26, r25	; 0x1a
    6c2c:	89 8f       	std	Y+25, r24	; 0x19
    6c2e:	89 8d       	ldd	r24, Y+25	; 0x19
    6c30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c32:	8c 01       	movw	r16, r24
    6c34:	c8 01       	movw	r24, r16
    6c36:	01 97       	sbiw	r24, 0x01	; 1
    6c38:	f1 f7       	brne	.-4      	; 0x6c36 <line_follow+0x2aa>
    6c3a:	8c 01       	movw	r16, r24
    6c3c:	1a 8f       	std	Y+26, r17	; 0x1a
    6c3e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c40:	8f 89       	ldd	r24, Y+23	; 0x17
    6c42:	98 8d       	ldd	r25, Y+24	; 0x18
    6c44:	01 97       	sbiw	r24, 0x01	; 1
    6c46:	98 8f       	std	Y+24, r25	; 0x18
    6c48:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    6c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    6c4e:	00 97       	sbiw	r24, 0x00	; 0
    6c50:	51 f7       	brne	.-44     	; 0x6c26 <line_follow+0x29a>
    6c52:	17 c0       	rjmp	.+46     	; 0x6c82 <line_follow+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c54:	6b 89       	ldd	r22, Y+19	; 0x13
    6c56:	7c 89       	ldd	r23, Y+20	; 0x14
    6c58:	8d 89       	ldd	r24, Y+21	; 0x15
    6c5a:	9e 89       	ldd	r25, Y+22	; 0x16
    6c5c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6c60:	dc 01       	movw	r26, r24
    6c62:	cb 01       	movw	r24, r22
    6c64:	98 8f       	std	Y+24, r25	; 0x18
    6c66:	8f 8b       	std	Y+23, r24	; 0x17
    6c68:	8f 89       	ldd	r24, Y+23	; 0x17
    6c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    6c6c:	9c 8f       	std	Y+28, r25	; 0x1c
    6c6e:	8b 8f       	std	Y+27, r24	; 0x1b
    6c70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c74:	8c 01       	movw	r16, r24
    6c76:	f8 01       	movw	r30, r16
    6c78:	31 97       	sbiw	r30, 0x01	; 1
    6c7a:	f1 f7       	brne	.-4      	; 0x6c78 <line_follow+0x2ec>
    6c7c:	8f 01       	movw	r16, r30
    6c7e:	1c 8f       	std	Y+28, r17	; 0x1c
    6c80:	0b 8f       	std	Y+27, r16	; 0x1b

        _delay_ms(10);

        forward();
    6c82:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 180);
    6c86:	8f ef       	ldi	r24, 0xFF	; 255
    6c88:	64 eb       	ldi	r22, 0xB4	; 180
    6c8a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6c8e:	36 c1       	rjmp	.+620    	; 0x6efc <line_follow+0x570>

    } 

	else if (line_cond == 5)
    6c90:	80 91 4f 03 	lds	r24, 0x034F
    6c94:	90 91 50 03 	lds	r25, 0x0350
    6c98:	85 30       	cpi	r24, 0x05	; 5
    6c9a:	91 05       	cpc	r25, r1
    6c9c:	39 f4       	brne	.+14     	; 0x6cac <line_follow+0x320>

	{

        forward();
    6c9e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    6ca2:	8f ef       	ldi	r24, 0xFF	; 255
    6ca4:	6f ef       	ldi	r22, 0xFF	; 255
    6ca6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6caa:	28 c1       	rjmp	.+592    	; 0x6efc <line_follow+0x570>

        }

       else if (line_cond == 6)
    6cac:	80 91 4f 03 	lds	r24, 0x034F
    6cb0:	90 91 50 03 	lds	r25, 0x0350
    6cb4:	86 30       	cpi	r24, 0x06	; 6
    6cb6:	91 05       	cpc	r25, r1
    6cb8:	09 f0       	breq	.+2      	; 0x6cbc <line_follow+0x330>
    6cba:	89 c0       	rjmp	.+274    	; 0x6dce <line_follow+0x442>

	{
        stop();_delay_ms(10);
    6cbc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6cc0:	80 e0       	ldi	r24, 0x00	; 0
    6cc2:	90 e0       	ldi	r25, 0x00	; 0
    6cc4:	a0 e2       	ldi	r26, 0x20	; 32
    6cc6:	b1 e4       	ldi	r27, 0x41	; 65
    6cc8:	8d 8f       	std	Y+29, r24	; 0x1d
    6cca:	9e 8f       	std	Y+30, r25	; 0x1e
    6ccc:	af 8f       	std	Y+31, r26	; 0x1f
    6cce:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6cd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6cd2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6cd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6cd6:	98 a1       	lds	r25, 0x48
    6cd8:	26 e6       	ldi	r18, 0x66	; 102
    6cda:	36 e6       	ldi	r19, 0x66	; 102
    6cdc:	46 e6       	ldi	r20, 0x66	; 102
    6cde:	55 e4       	ldi	r21, 0x45	; 69
    6ce0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6ce4:	dc 01       	movw	r26, r24
    6ce6:	cb 01       	movw	r24, r22
    6ce8:	89 a3       	lds	r24, 0x59
    6cea:	9a a3       	lds	r25, 0x5a
    6cec:	ab a3       	lds	r26, 0x5b
    6cee:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6cf0:	11 e0       	ldi	r17, 0x01	; 1
    6cf2:	69 a1       	lds	r22, 0x49
    6cf4:	7a a1       	lds	r23, 0x4a
    6cf6:	8b a1       	lds	r24, 0x4b
    6cf8:	9c a1       	lds	r25, 0x4c
    6cfa:	20 e0       	ldi	r18, 0x00	; 0
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	40 e8       	ldi	r20, 0x80	; 128
    6d00:	5f e3       	ldi	r21, 0x3F	; 63
    6d02:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6d06:	88 23       	and	r24, r24
    6d08:	0c f0       	brlt	.+2      	; 0x6d0c <line_follow+0x380>
    6d0a:	10 e0       	ldi	r17, 0x00	; 0
    6d0c:	11 23       	and	r17, r17
    6d0e:	29 f0       	breq	.+10     	; 0x6d1a <line_follow+0x38e>
		__ticks = 1;
    6d10:	81 e0       	ldi	r24, 0x01	; 1
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	9e a3       	lds	r25, 0x5e
    6d16:	8d a3       	lds	r24, 0x5d
    6d18:	46 c0       	rjmp	.+140    	; 0x6da6 <line_follow+0x41a>
	else if (__tmp > 65535)
    6d1a:	11 e0       	ldi	r17, 0x01	; 1
    6d1c:	69 a1       	lds	r22, 0x49
    6d1e:	7a a1       	lds	r23, 0x4a
    6d20:	8b a1       	lds	r24, 0x4b
    6d22:	9c a1       	lds	r25, 0x4c
    6d24:	20 e0       	ldi	r18, 0x00	; 0
    6d26:	3f ef       	ldi	r19, 0xFF	; 255
    6d28:	4f e7       	ldi	r20, 0x7F	; 127
    6d2a:	57 e4       	ldi	r21, 0x47	; 71
    6d2c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6d30:	18 16       	cp	r1, r24
    6d32:	0c f0       	brlt	.+2      	; 0x6d36 <line_follow+0x3aa>
    6d34:	10 e0       	ldi	r17, 0x00	; 0
    6d36:	11 23       	and	r17, r17
    6d38:	61 f1       	breq	.+88     	; 0x6d92 <line_follow+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d3a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6d3c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6d3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6d40:	98 a1       	lds	r25, 0x48
    6d42:	20 e0       	ldi	r18, 0x00	; 0
    6d44:	30 e0       	ldi	r19, 0x00	; 0
    6d46:	40 e2       	ldi	r20, 0x20	; 32
    6d48:	51 e4       	ldi	r21, 0x41	; 65
    6d4a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6d4e:	dc 01       	movw	r26, r24
    6d50:	cb 01       	movw	r24, r22
    6d52:	bc 01       	movw	r22, r24
    6d54:	cd 01       	movw	r24, r26
    6d56:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6d5a:	dc 01       	movw	r26, r24
    6d5c:	cb 01       	movw	r24, r22
    6d5e:	9e a3       	lds	r25, 0x5e
    6d60:	8d a3       	lds	r24, 0x5d
    6d62:	12 c0       	rjmp	.+36     	; 0x6d88 <line_follow+0x3fc>
    6d64:	80 e7       	ldi	r24, 0x70	; 112
    6d66:	91 e0       	ldi	r25, 0x01	; 1
    6d68:	98 a7       	lds	r25, 0x78
    6d6a:	8f a3       	lds	r24, 0x5f
    6d6c:	8f a1       	lds	r24, 0x4f
    6d6e:	98 a5       	lds	r25, 0x68
    6d70:	8c 01       	movw	r16, r24
    6d72:	c8 01       	movw	r24, r16
    6d74:	01 97       	sbiw	r24, 0x01	; 1
    6d76:	f1 f7       	brne	.-4      	; 0x6d74 <line_follow+0x3e8>
    6d78:	8c 01       	movw	r16, r24
    6d7a:	18 a7       	lds	r17, 0x78
    6d7c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d7e:	8d a1       	lds	r24, 0x4d
    6d80:	9e a1       	lds	r25, 0x4e
    6d82:	01 97       	sbiw	r24, 0x01	; 1
    6d84:	9e a3       	lds	r25, 0x5e
    6d86:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d88:	8d a1       	lds	r24, 0x4d
    6d8a:	9e a1       	lds	r25, 0x4e
    6d8c:	00 97       	sbiw	r24, 0x00	; 0
    6d8e:	51 f7       	brne	.-44     	; 0x6d64 <line_follow+0x3d8>
    6d90:	17 c0       	rjmp	.+46     	; 0x6dc0 <line_follow+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d92:	69 a1       	lds	r22, 0x49
    6d94:	7a a1       	lds	r23, 0x4a
    6d96:	8b a1       	lds	r24, 0x4b
    6d98:	9c a1       	lds	r25, 0x4c
    6d9a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6d9e:	dc 01       	movw	r26, r24
    6da0:	cb 01       	movw	r24, r22
    6da2:	9e a3       	lds	r25, 0x5e
    6da4:	8d a3       	lds	r24, 0x5d
    6da6:	8d a1       	lds	r24, 0x4d
    6da8:	9e a1       	lds	r25, 0x4e
    6daa:	9a a7       	lds	r25, 0x7a
    6dac:	89 a7       	lds	r24, 0x79
    6dae:	89 a5       	lds	r24, 0x69
    6db0:	9a a5       	lds	r25, 0x6a
    6db2:	8c 01       	movw	r16, r24
    6db4:	f8 01       	movw	r30, r16
    6db6:	31 97       	sbiw	r30, 0x01	; 1
    6db8:	f1 f7       	brne	.-4      	; 0x6db6 <line_follow+0x42a>
    6dba:	8f 01       	movw	r16, r30
    6dbc:	1a a7       	lds	r17, 0x7a
    6dbe:	09 a7       	lds	r16, 0x79

        forward();
    6dc0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(250, 255);
    6dc4:	8a ef       	ldi	r24, 0xFA	; 250
    6dc6:	6f ef       	ldi	r22, 0xFF	; 255
    6dc8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6dcc:	97 c0       	rjmp	.+302    	; 0x6efc <line_follow+0x570>

        }

        else if (line_cond == 7)
    6dce:	80 91 4f 03 	lds	r24, 0x034F
    6dd2:	90 91 50 03 	lds	r25, 0x0350
    6dd6:	87 30       	cpi	r24, 0x07	; 7
    6dd8:	91 05       	cpc	r25, r1
    6dda:	09 f0       	breq	.+2      	; 0x6dde <line_follow+0x452>
    6ddc:	89 c0       	rjmp	.+274    	; 0x6ef0 <line_follow+0x564>

	{
        stop();
    6dde:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6de2:	80 e0       	ldi	r24, 0x00	; 0
    6de4:	90 e0       	ldi	r25, 0x00	; 0
    6de6:	a0 e2       	ldi	r26, 0x20	; 32
    6de8:	b1 e4       	ldi	r27, 0x41	; 65
    6dea:	8b a7       	lds	r24, 0x7b
    6dec:	9c a7       	lds	r25, 0x7c
    6dee:	ad a7       	lds	r26, 0x7d
    6df0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6df2:	6b a5       	lds	r22, 0x6b
    6df4:	7c a5       	lds	r23, 0x6c
    6df6:	8d a5       	lds	r24, 0x6d
    6df8:	9e a5       	lds	r25, 0x6e
    6dfa:	26 e6       	ldi	r18, 0x66	; 102
    6dfc:	36 e6       	ldi	r19, 0x66	; 102
    6dfe:	46 e6       	ldi	r20, 0x66	; 102
    6e00:	55 e4       	ldi	r21, 0x45	; 69
    6e02:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6e06:	dc 01       	movw	r26, r24
    6e08:	cb 01       	movw	r24, r22
    6e0a:	8f a7       	lds	r24, 0x7f
    6e0c:	98 ab       	sts	0x58, r25
    6e0e:	a9 ab       	sts	0x59, r26
    6e10:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    6e12:	11 e0       	ldi	r17, 0x01	; 1
    6e14:	6f a5       	lds	r22, 0x6f
    6e16:	78 a9       	sts	0x48, r23
    6e18:	89 a9       	sts	0x49, r24
    6e1a:	9a a9       	sts	0x4a, r25
    6e1c:	20 e0       	ldi	r18, 0x00	; 0
    6e1e:	30 e0       	ldi	r19, 0x00	; 0
    6e20:	40 e8       	ldi	r20, 0x80	; 128
    6e22:	5f e3       	ldi	r21, 0x3F	; 63
    6e24:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6e28:	88 23       	and	r24, r24
    6e2a:	0c f0       	brlt	.+2      	; 0x6e2e <line_follow+0x4a2>
    6e2c:	10 e0       	ldi	r17, 0x00	; 0
    6e2e:	11 23       	and	r17, r17
    6e30:	29 f0       	breq	.+10     	; 0x6e3c <line_follow+0x4b0>
		__ticks = 1;
    6e32:	81 e0       	ldi	r24, 0x01	; 1
    6e34:	90 e0       	ldi	r25, 0x00	; 0
    6e36:	9c ab       	sts	0x5c, r25
    6e38:	8b ab       	sts	0x5b, r24
    6e3a:	46 c0       	rjmp	.+140    	; 0x6ec8 <line_follow+0x53c>
	else if (__tmp > 65535)
    6e3c:	11 e0       	ldi	r17, 0x01	; 1
    6e3e:	6f a5       	lds	r22, 0x6f
    6e40:	78 a9       	sts	0x48, r23
    6e42:	89 a9       	sts	0x49, r24
    6e44:	9a a9       	sts	0x4a, r25
    6e46:	20 e0       	ldi	r18, 0x00	; 0
    6e48:	3f ef       	ldi	r19, 0xFF	; 255
    6e4a:	4f e7       	ldi	r20, 0x7F	; 127
    6e4c:	57 e4       	ldi	r21, 0x47	; 71
    6e4e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6e52:	18 16       	cp	r1, r24
    6e54:	0c f0       	brlt	.+2      	; 0x6e58 <line_follow+0x4cc>
    6e56:	10 e0       	ldi	r17, 0x00	; 0
    6e58:	11 23       	and	r17, r17
    6e5a:	61 f1       	breq	.+88     	; 0x6eb4 <line_follow+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e5c:	6b a5       	lds	r22, 0x6b
    6e5e:	7c a5       	lds	r23, 0x6c
    6e60:	8d a5       	lds	r24, 0x6d
    6e62:	9e a5       	lds	r25, 0x6e
    6e64:	20 e0       	ldi	r18, 0x00	; 0
    6e66:	30 e0       	ldi	r19, 0x00	; 0
    6e68:	40 e2       	ldi	r20, 0x20	; 32
    6e6a:	51 e4       	ldi	r21, 0x41	; 65
    6e6c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6e70:	dc 01       	movw	r26, r24
    6e72:	cb 01       	movw	r24, r22
    6e74:	bc 01       	movw	r22, r24
    6e76:	cd 01       	movw	r24, r26
    6e78:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6e7c:	dc 01       	movw	r26, r24
    6e7e:	cb 01       	movw	r24, r22
    6e80:	9c ab       	sts	0x5c, r25
    6e82:	8b ab       	sts	0x5b, r24
    6e84:	12 c0       	rjmp	.+36     	; 0x6eaa <line_follow+0x51e>
    6e86:	80 e7       	ldi	r24, 0x70	; 112
    6e88:	91 e0       	ldi	r25, 0x01	; 1
    6e8a:	9e ab       	sts	0x5e, r25
    6e8c:	8d ab       	sts	0x5d, r24
    6e8e:	8d a9       	sts	0x4d, r24
    6e90:	9e a9       	sts	0x4e, r25
    6e92:	8c 01       	movw	r16, r24
    6e94:	c8 01       	movw	r24, r16
    6e96:	01 97       	sbiw	r24, 0x01	; 1
    6e98:	f1 f7       	brne	.-4      	; 0x6e96 <line_follow+0x50a>
    6e9a:	8c 01       	movw	r16, r24
    6e9c:	1e ab       	sts	0x5e, r17
    6e9e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ea0:	8b a9       	sts	0x4b, r24
    6ea2:	9c a9       	sts	0x4c, r25
    6ea4:	01 97       	sbiw	r24, 0x01	; 1
    6ea6:	9c ab       	sts	0x5c, r25
    6ea8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6eaa:	8b a9       	sts	0x4b, r24
    6eac:	9c a9       	sts	0x4c, r25
    6eae:	00 97       	sbiw	r24, 0x00	; 0
    6eb0:	51 f7       	brne	.-44     	; 0x6e86 <line_follow+0x4fa>
    6eb2:	17 c0       	rjmp	.+46     	; 0x6ee2 <line_follow+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6eb4:	6f a5       	lds	r22, 0x6f
    6eb6:	78 a9       	sts	0x48, r23
    6eb8:	89 a9       	sts	0x49, r24
    6eba:	9a a9       	sts	0x4a, r25
    6ebc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6ec0:	dc 01       	movw	r26, r24
    6ec2:	cb 01       	movw	r24, r22
    6ec4:	9c ab       	sts	0x5c, r25
    6ec6:	8b ab       	sts	0x5b, r24
    6ec8:	8b a9       	sts	0x4b, r24
    6eca:	9c a9       	sts	0x4c, r25
    6ecc:	98 af       	sts	0x78, r25
    6ece:	8f ab       	sts	0x5f, r24
    6ed0:	8f a9       	sts	0x4f, r24
    6ed2:	98 ad       	sts	0x68, r25
    6ed4:	8c 01       	movw	r16, r24
    6ed6:	f8 01       	movw	r30, r16
    6ed8:	31 97       	sbiw	r30, 0x01	; 1
    6eda:	f1 f7       	brne	.-4      	; 0x6ed8 <line_follow+0x54c>
    6edc:	8f 01       	movw	r16, r30
    6ede:	18 af       	sts	0x78, r17
    6ee0:	0f ab       	sts	0x5f, r16
		_delay_ms(10);

        forward();
    6ee2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 250);
    6ee6:	8f ef       	ldi	r24, 0xFF	; 255
    6ee8:	6a ef       	ldi	r22, 0xFA	; 250
    6eea:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6eee:	06 c0       	rjmp	.+12     	; 0x6efc <line_follow+0x570>

        }
	else
	{
forward();
    6ef0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
velocity(254,255); }
    6ef4:	8e ef       	ldi	r24, 0xFE	; 254
    6ef6:	6f ef       	ldi	r22, 0xFF	; 255
    6ef8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>


}
    6efc:	e8 96       	adiw	r28, 0x38	; 56
    6efe:	0f b6       	in	r0, 0x3f	; 63
    6f00:	f8 94       	cli
    6f02:	de bf       	out	0x3e, r29	; 62
    6f04:	0f be       	out	0x3f, r0	; 63
    6f06:	cd bf       	out	0x3d, r28	; 61
    6f08:	df 91       	pop	r29
    6f0a:	cf 91       	pop	r28
    6f0c:	1f 91       	pop	r17
    6f0e:	0f 91       	pop	r16
    6f10:	08 95       	ret

00006f12 <pick_drop>:


void pick_drop(char pd){
    6f12:	0f 93       	push	r16
    6f14:	1f 93       	push	r17
    6f16:	cf 93       	push	r28
    6f18:	df 93       	push	r29
    6f1a:	cd b7       	in	r28, 0x3d	; 61
    6f1c:	de b7       	in	r29, 0x3e	; 62
    6f1e:	c3 51       	subi	r28, 0x13	; 19
    6f20:	d3 40       	sbci	r29, 0x03	; 3
    6f22:	0f b6       	in	r0, 0x3f	; 63
    6f24:	f8 94       	cli
    6f26:	de bf       	out	0x3e, r29	; 62
    6f28:	0f be       	out	0x3f, r0	; 63
    6f2a:	cd bf       	out	0x3d, r28	; 61
    6f2c:	9e 01       	movw	r18, r28
    6f2e:	2d 5e       	subi	r18, 0xED	; 237
    6f30:	3c 4f       	sbci	r19, 0xFC	; 252
    6f32:	f9 01       	movw	r30, r18
    6f34:	80 83       	st	Z, r24
	int pdback=120;
    6f36:	88 e7       	ldi	r24, 0x78	; 120
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	9a 83       	std	Y+2, r25	; 0x02
    6f3c:	89 83       	std	Y+1, r24	; 0x01
	defaulty();
    6f3e:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <defaulty>
	stop();
    6f42:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6f46:	80 e0       	ldi	r24, 0x00	; 0
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	a0 ea       	ldi	r26, 0xA0	; 160
    6f4c:	b1 e4       	ldi	r27, 0x41	; 65
    6f4e:	8b 83       	std	Y+3, r24	; 0x03
    6f50:	9c 83       	std	Y+4, r25	; 0x04
    6f52:	ad 83       	std	Y+5, r26	; 0x05
    6f54:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6f56:	6b 81       	ldd	r22, Y+3	; 0x03
    6f58:	7c 81       	ldd	r23, Y+4	; 0x04
    6f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    6f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    6f5e:	26 e6       	ldi	r18, 0x66	; 102
    6f60:	36 e6       	ldi	r19, 0x66	; 102
    6f62:	46 e6       	ldi	r20, 0x66	; 102
    6f64:	55 e4       	ldi	r21, 0x45	; 69
    6f66:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6f6a:	dc 01       	movw	r26, r24
    6f6c:	cb 01       	movw	r24, r22
    6f6e:	8f 83       	std	Y+7, r24	; 0x07
    6f70:	98 87       	std	Y+8, r25	; 0x08
    6f72:	a9 87       	std	Y+9, r26	; 0x09
    6f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f76:	11 e0       	ldi	r17, 0x01	; 1
    6f78:	6f 81       	ldd	r22, Y+7	; 0x07
    6f7a:	78 85       	ldd	r23, Y+8	; 0x08
    6f7c:	89 85       	ldd	r24, Y+9	; 0x09
    6f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f80:	20 e0       	ldi	r18, 0x00	; 0
    6f82:	30 e0       	ldi	r19, 0x00	; 0
    6f84:	40 e8       	ldi	r20, 0x80	; 128
    6f86:	5f e3       	ldi	r21, 0x3F	; 63
    6f88:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    6f8c:	88 23       	and	r24, r24
    6f8e:	0c f0       	brlt	.+2      	; 0x6f92 <pick_drop+0x80>
    6f90:	10 e0       	ldi	r17, 0x00	; 0
    6f92:	11 23       	and	r17, r17
    6f94:	29 f0       	breq	.+10     	; 0x6fa0 <pick_drop+0x8e>
		__ticks = 1;
    6f96:	81 e0       	ldi	r24, 0x01	; 1
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	9c 87       	std	Y+12, r25	; 0x0c
    6f9c:	8b 87       	std	Y+11, r24	; 0x0b
    6f9e:	46 c0       	rjmp	.+140    	; 0x702c <pick_drop+0x11a>
	else if (__tmp > 65535)
    6fa0:	11 e0       	ldi	r17, 0x01	; 1
    6fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    6fa4:	78 85       	ldd	r23, Y+8	; 0x08
    6fa6:	89 85       	ldd	r24, Y+9	; 0x09
    6fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6faa:	20 e0       	ldi	r18, 0x00	; 0
    6fac:	3f ef       	ldi	r19, 0xFF	; 255
    6fae:	4f e7       	ldi	r20, 0x7F	; 127
    6fb0:	57 e4       	ldi	r21, 0x47	; 71
    6fb2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    6fb6:	18 16       	cp	r1, r24
    6fb8:	0c f0       	brlt	.+2      	; 0x6fbc <pick_drop+0xaa>
    6fba:	10 e0       	ldi	r17, 0x00	; 0
    6fbc:	11 23       	and	r17, r17
    6fbe:	61 f1       	breq	.+88     	; 0x7018 <pick_drop+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fc0:	6b 81       	ldd	r22, Y+3	; 0x03
    6fc2:	7c 81       	ldd	r23, Y+4	; 0x04
    6fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    6fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    6fc8:	20 e0       	ldi	r18, 0x00	; 0
    6fca:	30 e0       	ldi	r19, 0x00	; 0
    6fcc:	40 e2       	ldi	r20, 0x20	; 32
    6fce:	51 e4       	ldi	r21, 0x41	; 65
    6fd0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    6fd4:	dc 01       	movw	r26, r24
    6fd6:	cb 01       	movw	r24, r22
    6fd8:	bc 01       	movw	r22, r24
    6fda:	cd 01       	movw	r24, r26
    6fdc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    6fe0:	dc 01       	movw	r26, r24
    6fe2:	cb 01       	movw	r24, r22
    6fe4:	9c 87       	std	Y+12, r25	; 0x0c
    6fe6:	8b 87       	std	Y+11, r24	; 0x0b
    6fe8:	12 c0       	rjmp	.+36     	; 0x700e <pick_drop+0xfc>
    6fea:	80 e7       	ldi	r24, 0x70	; 112
    6fec:	91 e0       	ldi	r25, 0x01	; 1
    6fee:	9e 87       	std	Y+14, r25	; 0x0e
    6ff0:	8d 87       	std	Y+13, r24	; 0x0d
    6ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ff6:	8c 01       	movw	r16, r24
    6ff8:	c8 01       	movw	r24, r16
    6ffa:	01 97       	sbiw	r24, 0x01	; 1
    6ffc:	f1 f7       	brne	.-4      	; 0x6ffa <pick_drop+0xe8>
    6ffe:	8c 01       	movw	r16, r24
    7000:	1e 87       	std	Y+14, r17	; 0x0e
    7002:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7004:	8b 85       	ldd	r24, Y+11	; 0x0b
    7006:	9c 85       	ldd	r25, Y+12	; 0x0c
    7008:	01 97       	sbiw	r24, 0x01	; 1
    700a:	9c 87       	std	Y+12, r25	; 0x0c
    700c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    700e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7010:	9c 85       	ldd	r25, Y+12	; 0x0c
    7012:	00 97       	sbiw	r24, 0x00	; 0
    7014:	51 f7       	brne	.-44     	; 0x6fea <pick_drop+0xd8>
    7016:	17 c0       	rjmp	.+46     	; 0x7046 <pick_drop+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7018:	6f 81       	ldd	r22, Y+7	; 0x07
    701a:	78 85       	ldd	r23, Y+8	; 0x08
    701c:	89 85       	ldd	r24, Y+9	; 0x09
    701e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7020:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7024:	dc 01       	movw	r26, r24
    7026:	cb 01       	movw	r24, r22
    7028:	9c 87       	std	Y+12, r25	; 0x0c
    702a:	8b 87       	std	Y+11, r24	; 0x0b
    702c:	8b 85       	ldd	r24, Y+11	; 0x0b
    702e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7030:	98 8b       	std	Y+16, r25	; 0x10
    7032:	8f 87       	std	Y+15, r24	; 0x0f
    7034:	8f 85       	ldd	r24, Y+15	; 0x0f
    7036:	98 89       	ldd	r25, Y+16	; 0x10
    7038:	8c 01       	movw	r16, r24
    703a:	f8 01       	movw	r30, r16
    703c:	31 97       	sbiw	r30, 0x01	; 1
    703e:	f1 f7       	brne	.-4      	; 0x703c <pick_drop+0x12a>
    7040:	8f 01       	movw	r16, r30
    7042:	18 8b       	std	Y+16, r17	; 0x10
    7044:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(20);
	if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    7046:	80 91 63 03 	lds	r24, 0x0363
    704a:	90 91 64 03 	lds	r25, 0x0364
    704e:	01 97       	sbiw	r24, 0x01	; 1
    7050:	89 59       	subi	r24, 0x99	; 153
    7052:	9c 4f       	sbci	r25, 0xFC	; 252
    7054:	fc 01       	movw	r30, r24
    7056:	80 81       	ld	r24, Z
    7058:	8c 34       	cpi	r24, 0x4C	; 76
    705a:	b9 f0       	breq	.+46     	; 0x708a <pick_drop+0x178>
    705c:	80 91 63 03 	lds	r24, 0x0363
    7060:	90 91 64 03 	lds	r25, 0x0364
    7064:	01 97       	sbiw	r24, 0x01	; 1
    7066:	89 59       	subi	r24, 0x99	; 153
    7068:	9c 4f       	sbci	r25, 0xFC	; 252
    706a:	fc 01       	movw	r30, r24
    706c:	80 81       	ld	r24, Z
    706e:	82 35       	cpi	r24, 0x52	; 82
    7070:	61 f0       	breq	.+24     	; 0x708a <pick_drop+0x178>
    7072:	80 91 63 03 	lds	r24, 0x0363
    7076:	90 91 64 03 	lds	r25, 0x0364
    707a:	01 97       	sbiw	r24, 0x01	; 1
    707c:	89 59       	subi	r24, 0x99	; 153
    707e:	9c 4f       	sbci	r25, 0xFC	; 252
    7080:	fc 01       	movw	r30, r24
    7082:	80 81       	ld	r24, Z
    7084:	85 35       	cpi	r24, 0x55	; 85
    7086:	09 f0       	breq	.+2      	; 0x708a <pick_drop+0x178>
    7088:	1f c1       	rjmp	.+574    	; 0x72c8 <pick_drop+0x3b6>
	{
	if(pd=='7'||pd=='6')
    708a:	ce 01       	movw	r24, r28
    708c:	8d 5e       	subi	r24, 0xED	; 237
    708e:	9c 4f       	sbci	r25, 0xFC	; 252
    7090:	fc 01       	movw	r30, r24
    7092:	80 81       	ld	r24, Z
    7094:	87 33       	cpi	r24, 0x37	; 55
    7096:	41 f0       	breq	.+16     	; 0x70a8 <pick_drop+0x196>
    7098:	ce 01       	movw	r24, r28
    709a:	8d 5e       	subi	r24, 0xED	; 237
    709c:	9c 4f       	sbci	r25, 0xFC	; 252
    709e:	fc 01       	movw	r30, r24
    70a0:	80 81       	ld	r24, Z
    70a2:	86 33       	cpi	r24, 0x36	; 54
    70a4:	09 f0       	breq	.+2      	; 0x70a8 <pick_drop+0x196>
    70a6:	86 c0       	rjmp	.+268    	; 0x71b4 <pick_drop+0x2a2>
	{
		back_mm(30);//mod
    70a8:	8e e1       	ldi	r24, 0x1E	; 30
    70aa:	90 e0       	ldi	r25, 0x00	; 0
    70ac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    70b0:	80 e0       	ldi	r24, 0x00	; 0
    70b2:	90 e0       	ldi	r25, 0x00	; 0
    70b4:	a0 ea       	ldi	r26, 0xA0	; 160
    70b6:	b1 e4       	ldi	r27, 0x41	; 65
    70b8:	89 8b       	std	Y+17, r24	; 0x11
    70ba:	9a 8b       	std	Y+18, r25	; 0x12
    70bc:	ab 8b       	std	Y+19, r26	; 0x13
    70be:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    70c0:	69 89       	ldd	r22, Y+17	; 0x11
    70c2:	7a 89       	ldd	r23, Y+18	; 0x12
    70c4:	8b 89       	ldd	r24, Y+19	; 0x13
    70c6:	9c 89       	ldd	r25, Y+20	; 0x14
    70c8:	26 e6       	ldi	r18, 0x66	; 102
    70ca:	36 e6       	ldi	r19, 0x66	; 102
    70cc:	46 e6       	ldi	r20, 0x66	; 102
    70ce:	55 e4       	ldi	r21, 0x45	; 69
    70d0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    70d4:	dc 01       	movw	r26, r24
    70d6:	cb 01       	movw	r24, r22
    70d8:	8d 8b       	std	Y+21, r24	; 0x15
    70da:	9e 8b       	std	Y+22, r25	; 0x16
    70dc:	af 8b       	std	Y+23, r26	; 0x17
    70de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    70e0:	11 e0       	ldi	r17, 0x01	; 1
    70e2:	6d 89       	ldd	r22, Y+21	; 0x15
    70e4:	7e 89       	ldd	r23, Y+22	; 0x16
    70e6:	8f 89       	ldd	r24, Y+23	; 0x17
    70e8:	98 8d       	ldd	r25, Y+24	; 0x18
    70ea:	20 e0       	ldi	r18, 0x00	; 0
    70ec:	30 e0       	ldi	r19, 0x00	; 0
    70ee:	40 e8       	ldi	r20, 0x80	; 128
    70f0:	5f e3       	ldi	r21, 0x3F	; 63
    70f2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    70f6:	88 23       	and	r24, r24
    70f8:	0c f0       	brlt	.+2      	; 0x70fc <pick_drop+0x1ea>
    70fa:	10 e0       	ldi	r17, 0x00	; 0
    70fc:	11 23       	and	r17, r17
    70fe:	29 f0       	breq	.+10     	; 0x710a <pick_drop+0x1f8>
		__ticks = 1;
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	9a 8f       	std	Y+26, r25	; 0x1a
    7106:	89 8f       	std	Y+25, r24	; 0x19
    7108:	46 c0       	rjmp	.+140    	; 0x7196 <pick_drop+0x284>
	else if (__tmp > 65535)
    710a:	11 e0       	ldi	r17, 0x01	; 1
    710c:	6d 89       	ldd	r22, Y+21	; 0x15
    710e:	7e 89       	ldd	r23, Y+22	; 0x16
    7110:	8f 89       	ldd	r24, Y+23	; 0x17
    7112:	98 8d       	ldd	r25, Y+24	; 0x18
    7114:	20 e0       	ldi	r18, 0x00	; 0
    7116:	3f ef       	ldi	r19, 0xFF	; 255
    7118:	4f e7       	ldi	r20, 0x7F	; 127
    711a:	57 e4       	ldi	r21, 0x47	; 71
    711c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7120:	18 16       	cp	r1, r24
    7122:	0c f0       	brlt	.+2      	; 0x7126 <pick_drop+0x214>
    7124:	10 e0       	ldi	r17, 0x00	; 0
    7126:	11 23       	and	r17, r17
    7128:	61 f1       	breq	.+88     	; 0x7182 <pick_drop+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    712a:	69 89       	ldd	r22, Y+17	; 0x11
    712c:	7a 89       	ldd	r23, Y+18	; 0x12
    712e:	8b 89       	ldd	r24, Y+19	; 0x13
    7130:	9c 89       	ldd	r25, Y+20	; 0x14
    7132:	20 e0       	ldi	r18, 0x00	; 0
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	40 e2       	ldi	r20, 0x20	; 32
    7138:	51 e4       	ldi	r21, 0x41	; 65
    713a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    713e:	dc 01       	movw	r26, r24
    7140:	cb 01       	movw	r24, r22
    7142:	bc 01       	movw	r22, r24
    7144:	cd 01       	movw	r24, r26
    7146:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    714a:	dc 01       	movw	r26, r24
    714c:	cb 01       	movw	r24, r22
    714e:	9a 8f       	std	Y+26, r25	; 0x1a
    7150:	89 8f       	std	Y+25, r24	; 0x19
    7152:	12 c0       	rjmp	.+36     	; 0x7178 <pick_drop+0x266>
    7154:	80 e7       	ldi	r24, 0x70	; 112
    7156:	91 e0       	ldi	r25, 0x01	; 1
    7158:	9c 8f       	std	Y+28, r25	; 0x1c
    715a:	8b 8f       	std	Y+27, r24	; 0x1b
    715c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    715e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7160:	8c 01       	movw	r16, r24
    7162:	c8 01       	movw	r24, r16
    7164:	01 97       	sbiw	r24, 0x01	; 1
    7166:	f1 f7       	brne	.-4      	; 0x7164 <pick_drop+0x252>
    7168:	8c 01       	movw	r16, r24
    716a:	1c 8f       	std	Y+28, r17	; 0x1c
    716c:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    716e:	89 8d       	ldd	r24, Y+25	; 0x19
    7170:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7172:	01 97       	sbiw	r24, 0x01	; 1
    7174:	9a 8f       	std	Y+26, r25	; 0x1a
    7176:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7178:	89 8d       	ldd	r24, Y+25	; 0x19
    717a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    717c:	00 97       	sbiw	r24, 0x00	; 0
    717e:	51 f7       	brne	.-44     	; 0x7154 <pick_drop+0x242>
    7180:	18 c0       	rjmp	.+48     	; 0x71b2 <pick_drop+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7182:	6d 89       	ldd	r22, Y+21	; 0x15
    7184:	7e 89       	ldd	r23, Y+22	; 0x16
    7186:	8f 89       	ldd	r24, Y+23	; 0x17
    7188:	98 8d       	ldd	r25, Y+24	; 0x18
    718a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    718e:	dc 01       	movw	r26, r24
    7190:	cb 01       	movw	r24, r22
    7192:	9a 8f       	std	Y+26, r25	; 0x1a
    7194:	89 8f       	std	Y+25, r24	; 0x19
    7196:	89 8d       	ldd	r24, Y+25	; 0x19
    7198:	9a 8d       	ldd	r25, Y+26	; 0x1a
    719a:	9e 8f       	std	Y+30, r25	; 0x1e
    719c:	8d 8f       	std	Y+29, r24	; 0x1d
    719e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    71a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    71a2:	8c 01       	movw	r16, r24
    71a4:	f8 01       	movw	r30, r16
    71a6:	31 97       	sbiw	r30, 0x01	; 1
    71a8:	f1 f7       	brne	.-4      	; 0x71a6 <pick_drop+0x294>
    71aa:	8f 01       	movw	r16, r30
    71ac:	1e 8f       	std	Y+30, r17	; 0x1e
    71ae:	0d 8f       	std	Y+29, r16	; 0x1d
		_delay_ms(20);//mod
    71b0:	8b c0       	rjmp	.+278    	; 0x72c8 <pick_drop+0x3b6>
    71b2:	8a c0       	rjmp	.+276    	; 0x72c8 <pick_drop+0x3b6>
	}
	else if(pd == '5') //F1
    71b4:	ce 01       	movw	r24, r28
    71b6:	8d 5e       	subi	r24, 0xED	; 237
    71b8:	9c 4f       	sbci	r25, 0xFC	; 252
    71ba:	fc 01       	movw	r30, r24
    71bc:	80 81       	ld	r24, Z
    71be:	85 33       	cpi	r24, 0x35	; 53
    71c0:	09 f0       	breq	.+2      	; 0x71c4 <pick_drop+0x2b2>
    71c2:	82 c0       	rjmp	.+260    	; 0x72c8 <pick_drop+0x3b6>
	{
		stop();
    71c4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    71c8:	80 e0       	ldi	r24, 0x00	; 0
    71ca:	90 e0       	ldi	r25, 0x00	; 0
    71cc:	aa e7       	ldi	r26, 0x7A	; 122
    71ce:	b4 e4       	ldi	r27, 0x44	; 68
    71d0:	8f 8f       	std	Y+31, r24	; 0x1f
    71d2:	98 a3       	lds	r25, 0x58
    71d4:	a9 a3       	lds	r26, 0x59
    71d6:	ba a3       	lds	r27, 0x5a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    71d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    71da:	78 a1       	lds	r23, 0x48
    71dc:	89 a1       	lds	r24, 0x49
    71de:	9a a1       	lds	r25, 0x4a
    71e0:	26 e6       	ldi	r18, 0x66	; 102
    71e2:	36 e6       	ldi	r19, 0x66	; 102
    71e4:	46 e6       	ldi	r20, 0x66	; 102
    71e6:	55 e4       	ldi	r21, 0x45	; 69
    71e8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    71ec:	dc 01       	movw	r26, r24
    71ee:	cb 01       	movw	r24, r22
    71f0:	8b a3       	lds	r24, 0x5b
    71f2:	9c a3       	lds	r25, 0x5c
    71f4:	ad a3       	lds	r26, 0x5d
    71f6:	be a3       	lds	r27, 0x5e
	if (__tmp < 1.0)
    71f8:	11 e0       	ldi	r17, 0x01	; 1
    71fa:	6b a1       	lds	r22, 0x4b
    71fc:	7c a1       	lds	r23, 0x4c
    71fe:	8d a1       	lds	r24, 0x4d
    7200:	9e a1       	lds	r25, 0x4e
    7202:	20 e0       	ldi	r18, 0x00	; 0
    7204:	30 e0       	ldi	r19, 0x00	; 0
    7206:	40 e8       	ldi	r20, 0x80	; 128
    7208:	5f e3       	ldi	r21, 0x3F	; 63
    720a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    720e:	88 23       	and	r24, r24
    7210:	0c f0       	brlt	.+2      	; 0x7214 <pick_drop+0x302>
    7212:	10 e0       	ldi	r17, 0x00	; 0
    7214:	11 23       	and	r17, r17
    7216:	29 f0       	breq	.+10     	; 0x7222 <pick_drop+0x310>
		__ticks = 1;
    7218:	81 e0       	ldi	r24, 0x01	; 1
    721a:	90 e0       	ldi	r25, 0x00	; 0
    721c:	98 a7       	lds	r25, 0x78
    721e:	8f a3       	lds	r24, 0x5f
    7220:	46 c0       	rjmp	.+140    	; 0x72ae <pick_drop+0x39c>
	else if (__tmp > 65535)
    7222:	11 e0       	ldi	r17, 0x01	; 1
    7224:	6b a1       	lds	r22, 0x4b
    7226:	7c a1       	lds	r23, 0x4c
    7228:	8d a1       	lds	r24, 0x4d
    722a:	9e a1       	lds	r25, 0x4e
    722c:	20 e0       	ldi	r18, 0x00	; 0
    722e:	3f ef       	ldi	r19, 0xFF	; 255
    7230:	4f e7       	ldi	r20, 0x7F	; 127
    7232:	57 e4       	ldi	r21, 0x47	; 71
    7234:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7238:	18 16       	cp	r1, r24
    723a:	0c f0       	brlt	.+2      	; 0x723e <pick_drop+0x32c>
    723c:	10 e0       	ldi	r17, 0x00	; 0
    723e:	11 23       	and	r17, r17
    7240:	61 f1       	breq	.+88     	; 0x729a <pick_drop+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7242:	6f 8d       	ldd	r22, Y+31	; 0x1f
    7244:	78 a1       	lds	r23, 0x48
    7246:	89 a1       	lds	r24, 0x49
    7248:	9a a1       	lds	r25, 0x4a
    724a:	20 e0       	ldi	r18, 0x00	; 0
    724c:	30 e0       	ldi	r19, 0x00	; 0
    724e:	40 e2       	ldi	r20, 0x20	; 32
    7250:	51 e4       	ldi	r21, 0x41	; 65
    7252:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7256:	dc 01       	movw	r26, r24
    7258:	cb 01       	movw	r24, r22
    725a:	bc 01       	movw	r22, r24
    725c:	cd 01       	movw	r24, r26
    725e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7262:	dc 01       	movw	r26, r24
    7264:	cb 01       	movw	r24, r22
    7266:	98 a7       	lds	r25, 0x78
    7268:	8f a3       	lds	r24, 0x5f
    726a:	12 c0       	rjmp	.+36     	; 0x7290 <pick_drop+0x37e>
    726c:	80 e7       	ldi	r24, 0x70	; 112
    726e:	91 e0       	ldi	r25, 0x01	; 1
    7270:	9a a7       	lds	r25, 0x7a
    7272:	89 a7       	lds	r24, 0x79
    7274:	89 a5       	lds	r24, 0x69
    7276:	9a a5       	lds	r25, 0x6a
    7278:	8c 01       	movw	r16, r24
    727a:	c8 01       	movw	r24, r16
    727c:	01 97       	sbiw	r24, 0x01	; 1
    727e:	f1 f7       	brne	.-4      	; 0x727c <pick_drop+0x36a>
    7280:	8c 01       	movw	r16, r24
    7282:	1a a7       	lds	r17, 0x7a
    7284:	09 a7       	lds	r16, 0x79
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7286:	8f a1       	lds	r24, 0x4f
    7288:	98 a5       	lds	r25, 0x68
    728a:	01 97       	sbiw	r24, 0x01	; 1
    728c:	98 a7       	lds	r25, 0x78
    728e:	8f a3       	lds	r24, 0x5f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7290:	8f a1       	lds	r24, 0x4f
    7292:	98 a5       	lds	r25, 0x68
    7294:	00 97       	sbiw	r24, 0x00	; 0
    7296:	51 f7       	brne	.-44     	; 0x726c <pick_drop+0x35a>
    7298:	17 c0       	rjmp	.+46     	; 0x72c8 <pick_drop+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    729a:	6b a1       	lds	r22, 0x4b
    729c:	7c a1       	lds	r23, 0x4c
    729e:	8d a1       	lds	r24, 0x4d
    72a0:	9e a1       	lds	r25, 0x4e
    72a2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    72a6:	dc 01       	movw	r26, r24
    72a8:	cb 01       	movw	r24, r22
    72aa:	98 a7       	lds	r25, 0x78
    72ac:	8f a3       	lds	r24, 0x5f
    72ae:	8f a1       	lds	r24, 0x4f
    72b0:	98 a5       	lds	r25, 0x68
    72b2:	9c a7       	lds	r25, 0x7c
    72b4:	8b a7       	lds	r24, 0x7b
    72b6:	8b a5       	lds	r24, 0x6b
    72b8:	9c a5       	lds	r25, 0x6c
    72ba:	8c 01       	movw	r16, r24
    72bc:	f8 01       	movw	r30, r16
    72be:	31 97       	sbiw	r30, 0x01	; 1
    72c0:	f1 f7       	brne	.-4      	; 0x72be <pick_drop+0x3ac>
    72c2:	8f 01       	movw	r16, r30
    72c4:	1c a7       	lds	r17, 0x7c
    72c6:	0b a7       	lds	r16, 0x7b
		_delay_ms(1000);
	}
	
	}
	
	if(pd=='D'){
    72c8:	ce 01       	movw	r24, r28
    72ca:	8d 5e       	subi	r24, 0xED	; 237
    72cc:	9c 4f       	sbci	r25, 0xFC	; 252
    72ce:	fc 01       	movw	r30, r24
    72d0:	80 81       	ld	r24, Z
    72d2:	84 34       	cpi	r24, 0x44	; 68
    72d4:	09 f0       	breq	.+2      	; 0x72d8 <pick_drop+0x3c6>
    72d6:	55 c1       	rjmp	.+682    	; 0x7582 <pick_drop+0x670>
		if(master_path[node-1]!='N'){
    72d8:	80 91 63 03 	lds	r24, 0x0363
    72dc:	90 91 64 03 	lds	r25, 0x0364
    72e0:	01 97       	sbiw	r24, 0x01	; 1
    72e2:	89 59       	subi	r24, 0x99	; 153
    72e4:	9c 4f       	sbci	r25, 0xFC	; 252
    72e6:	fc 01       	movw	r30, r24
    72e8:	80 81       	ld	r24, Z
    72ea:	8e 34       	cpi	r24, 0x4E	; 78
    72ec:	09 f4       	brne	.+2      	; 0x72f0 <pick_drop+0x3de>
    72ee:	84 c0       	rjmp	.+264    	; 0x73f8 <pick_drop+0x4e6>
		back_mm(70);
    72f0:	86 e4       	ldi	r24, 0x46	; 70
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    72f8:	80 e0       	ldi	r24, 0x00	; 0
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	a0 ea       	ldi	r26, 0xA0	; 160
    72fe:	b1 e4       	ldi	r27, 0x41	; 65
    7300:	8d a7       	lds	r24, 0x7d
    7302:	9e a7       	lds	r25, 0x7e
    7304:	af a7       	lds	r26, 0x7f
    7306:	b8 ab       	sts	0x58, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7308:	6d a5       	lds	r22, 0x6d
    730a:	7e a5       	lds	r23, 0x6e
    730c:	8f a5       	lds	r24, 0x6f
    730e:	98 a9       	sts	0x48, r25
    7310:	26 e6       	ldi	r18, 0x66	; 102
    7312:	36 e6       	ldi	r19, 0x66	; 102
    7314:	46 e6       	ldi	r20, 0x66	; 102
    7316:	55 e4       	ldi	r21, 0x45	; 69
    7318:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    731c:	dc 01       	movw	r26, r24
    731e:	cb 01       	movw	r24, r22
    7320:	89 ab       	sts	0x59, r24
    7322:	9a ab       	sts	0x5a, r25
    7324:	ab ab       	sts	0x5b, r26
    7326:	bc ab       	sts	0x5c, r27
	if (__tmp < 1.0)
    7328:	11 e0       	ldi	r17, 0x01	; 1
    732a:	69 a9       	sts	0x49, r22
    732c:	7a a9       	sts	0x4a, r23
    732e:	8b a9       	sts	0x4b, r24
    7330:	9c a9       	sts	0x4c, r25
    7332:	20 e0       	ldi	r18, 0x00	; 0
    7334:	30 e0       	ldi	r19, 0x00	; 0
    7336:	40 e8       	ldi	r20, 0x80	; 128
    7338:	5f e3       	ldi	r21, 0x3F	; 63
    733a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    733e:	88 23       	and	r24, r24
    7340:	0c f0       	brlt	.+2      	; 0x7344 <pick_drop+0x432>
    7342:	10 e0       	ldi	r17, 0x00	; 0
    7344:	11 23       	and	r17, r17
    7346:	29 f0       	breq	.+10     	; 0x7352 <pick_drop+0x440>
		__ticks = 1;
    7348:	81 e0       	ldi	r24, 0x01	; 1
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	9e ab       	sts	0x5e, r25
    734e:	8d ab       	sts	0x5d, r24
    7350:	46 c0       	rjmp	.+140    	; 0x73de <pick_drop+0x4cc>
	else if (__tmp > 65535)
    7352:	11 e0       	ldi	r17, 0x01	; 1
    7354:	69 a9       	sts	0x49, r22
    7356:	7a a9       	sts	0x4a, r23
    7358:	8b a9       	sts	0x4b, r24
    735a:	9c a9       	sts	0x4c, r25
    735c:	20 e0       	ldi	r18, 0x00	; 0
    735e:	3f ef       	ldi	r19, 0xFF	; 255
    7360:	4f e7       	ldi	r20, 0x7F	; 127
    7362:	57 e4       	ldi	r21, 0x47	; 71
    7364:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7368:	18 16       	cp	r1, r24
    736a:	0c f0       	brlt	.+2      	; 0x736e <pick_drop+0x45c>
    736c:	10 e0       	ldi	r17, 0x00	; 0
    736e:	11 23       	and	r17, r17
    7370:	61 f1       	breq	.+88     	; 0x73ca <pick_drop+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7372:	6d a5       	lds	r22, 0x6d
    7374:	7e a5       	lds	r23, 0x6e
    7376:	8f a5       	lds	r24, 0x6f
    7378:	98 a9       	sts	0x48, r25
    737a:	20 e0       	ldi	r18, 0x00	; 0
    737c:	30 e0       	ldi	r19, 0x00	; 0
    737e:	40 e2       	ldi	r20, 0x20	; 32
    7380:	51 e4       	ldi	r21, 0x41	; 65
    7382:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7386:	dc 01       	movw	r26, r24
    7388:	cb 01       	movw	r24, r22
    738a:	bc 01       	movw	r22, r24
    738c:	cd 01       	movw	r24, r26
    738e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	9e ab       	sts	0x5e, r25
    7398:	8d ab       	sts	0x5d, r24
    739a:	12 c0       	rjmp	.+36     	; 0x73c0 <pick_drop+0x4ae>
    739c:	80 e7       	ldi	r24, 0x70	; 112
    739e:	91 e0       	ldi	r25, 0x01	; 1
    73a0:	98 af       	sts	0x78, r25
    73a2:	8f ab       	sts	0x5f, r24
    73a4:	8f a9       	sts	0x4f, r24
    73a6:	98 ad       	sts	0x68, r25
    73a8:	8c 01       	movw	r16, r24
    73aa:	c8 01       	movw	r24, r16
    73ac:	01 97       	sbiw	r24, 0x01	; 1
    73ae:	f1 f7       	brne	.-4      	; 0x73ac <pick_drop+0x49a>
    73b0:	8c 01       	movw	r16, r24
    73b2:	18 af       	sts	0x78, r17
    73b4:	0f ab       	sts	0x5f, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73b6:	8d a9       	sts	0x4d, r24
    73b8:	9e a9       	sts	0x4e, r25
    73ba:	01 97       	sbiw	r24, 0x01	; 1
    73bc:	9e ab       	sts	0x5e, r25
    73be:	8d ab       	sts	0x5d, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73c0:	8d a9       	sts	0x4d, r24
    73c2:	9e a9       	sts	0x4e, r25
    73c4:	00 97       	sbiw	r24, 0x00	; 0
    73c6:	51 f7       	brne	.-44     	; 0x739c <pick_drop+0x48a>
    73c8:	17 c0       	rjmp	.+46     	; 0x73f8 <pick_drop+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73ca:	69 a9       	sts	0x49, r22
    73cc:	7a a9       	sts	0x4a, r23
    73ce:	8b a9       	sts	0x4b, r24
    73d0:	9c a9       	sts	0x4c, r25
    73d2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    73d6:	dc 01       	movw	r26, r24
    73d8:	cb 01       	movw	r24, r22
    73da:	9e ab       	sts	0x5e, r25
    73dc:	8d ab       	sts	0x5d, r24
    73de:	8d a9       	sts	0x4d, r24
    73e0:	9e a9       	sts	0x4e, r25
    73e2:	9a af       	sts	0x7a, r25
    73e4:	89 af       	sts	0x79, r24
    73e6:	89 ad       	sts	0x69, r24
    73e8:	9a ad       	sts	0x6a, r25
    73ea:	8c 01       	movw	r16, r24
    73ec:	f8 01       	movw	r30, r16
    73ee:	31 97       	sbiw	r30, 0x01	; 1
    73f0:	f1 f7       	brne	.-4      	; 0x73ee <pick_drop+0x4dc>
    73f2:	8f 01       	movw	r16, r30
    73f4:	1a af       	sts	0x7a, r17
    73f6:	09 af       	sts	0x79, r16
		_delay_ms(20);}
		drop();
    73f8:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <drop>
    73fc:	80 e0       	ldi	r24, 0x00	; 0
    73fe:	90 e0       	ldi	r25, 0x00	; 0
    7400:	a8 ec       	ldi	r26, 0xC8	; 200
    7402:	b2 e4       	ldi	r27, 0x42	; 66
    7404:	8b af       	sts	0x7b, r24
    7406:	9c af       	sts	0x7c, r25
    7408:	ad af       	sts	0x7d, r26
    740a:	be af       	sts	0x7e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    740c:	8e 01       	movw	r16, r28
    740e:	01 5c       	subi	r16, 0xC1	; 193
    7410:	1f 4f       	sbci	r17, 0xFF	; 255
    7412:	6b ad       	sts	0x6b, r22
    7414:	7c ad       	sts	0x6c, r23
    7416:	8d ad       	sts	0x6d, r24
    7418:	9e ad       	sts	0x6e, r25
    741a:	26 e6       	ldi	r18, 0x66	; 102
    741c:	36 e6       	ldi	r19, 0x66	; 102
    741e:	46 e6       	ldi	r20, 0x66	; 102
    7420:	55 e4       	ldi	r21, 0x45	; 69
    7422:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7426:	dc 01       	movw	r26, r24
    7428:	cb 01       	movw	r24, r22
    742a:	f8 01       	movw	r30, r16
    742c:	80 83       	st	Z, r24
    742e:	91 83       	std	Z+1, r25	; 0x01
    7430:	a2 83       	std	Z+2, r26	; 0x02
    7432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7434:	ce 01       	movw	r24, r28
    7436:	cf 96       	adiw	r24, 0x3f	; 63
    7438:	11 e0       	ldi	r17, 0x01	; 1
    743a:	fc 01       	movw	r30, r24
    743c:	60 81       	ld	r22, Z
    743e:	71 81       	ldd	r23, Z+1	; 0x01
    7440:	82 81       	ldd	r24, Z+2	; 0x02
    7442:	93 81       	ldd	r25, Z+3	; 0x03
    7444:	20 e0       	ldi	r18, 0x00	; 0
    7446:	30 e0       	ldi	r19, 0x00	; 0
    7448:	40 e8       	ldi	r20, 0x80	; 128
    744a:	5f e3       	ldi	r21, 0x3F	; 63
    744c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    7450:	88 23       	and	r24, r24
    7452:	0c f0       	brlt	.+2      	; 0x7456 <pick_drop+0x544>
    7454:	10 e0       	ldi	r17, 0x00	; 0
    7456:	11 23       	and	r17, r17
    7458:	49 f0       	breq	.+18     	; 0x746c <pick_drop+0x55a>
		__ticks = 1;
    745a:	ce 01       	movw	r24, r28
    745c:	8d 5b       	subi	r24, 0xBD	; 189
    745e:	9f 4f       	sbci	r25, 0xFF	; 255
    7460:	21 e0       	ldi	r18, 0x01	; 1
    7462:	30 e0       	ldi	r19, 0x00	; 0
    7464:	fc 01       	movw	r30, r24
    7466:	31 83       	std	Z+1, r19	; 0x01
    7468:	20 83       	st	Z, r18
    746a:	6e c0       	rjmp	.+220    	; 0x7548 <pick_drop+0x636>
	else if (__tmp > 65535)
    746c:	ce 01       	movw	r24, r28
    746e:	cf 96       	adiw	r24, 0x3f	; 63
    7470:	11 e0       	ldi	r17, 0x01	; 1
    7472:	fc 01       	movw	r30, r24
    7474:	60 81       	ld	r22, Z
    7476:	71 81       	ldd	r23, Z+1	; 0x01
    7478:	82 81       	ldd	r24, Z+2	; 0x02
    747a:	93 81       	ldd	r25, Z+3	; 0x03
    747c:	20 e0       	ldi	r18, 0x00	; 0
    747e:	3f ef       	ldi	r19, 0xFF	; 255
    7480:	4f e7       	ldi	r20, 0x7F	; 127
    7482:	57 e4       	ldi	r21, 0x47	; 71
    7484:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7488:	18 16       	cp	r1, r24
    748a:	0c f0       	brlt	.+2      	; 0x748e <pick_drop+0x57c>
    748c:	10 e0       	ldi	r17, 0x00	; 0
    748e:	11 23       	and	r17, r17
    7490:	09 f4       	brne	.+2      	; 0x7494 <pick_drop+0x582>
    7492:	49 c0       	rjmp	.+146    	; 0x7526 <pick_drop+0x614>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7494:	6b ad       	sts	0x6b, r22
    7496:	7c ad       	sts	0x6c, r23
    7498:	8d ad       	sts	0x6d, r24
    749a:	9e ad       	sts	0x6e, r25
    749c:	20 e0       	ldi	r18, 0x00	; 0
    749e:	30 e0       	ldi	r19, 0x00	; 0
    74a0:	40 e2       	ldi	r20, 0x20	; 32
    74a2:	51 e4       	ldi	r21, 0x41	; 65
    74a4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    74a8:	dc 01       	movw	r26, r24
    74aa:	cb 01       	movw	r24, r22
    74ac:	8e 01       	movw	r16, r28
    74ae:	0d 5b       	subi	r16, 0xBD	; 189
    74b0:	1f 4f       	sbci	r17, 0xFF	; 255
    74b2:	bc 01       	movw	r22, r24
    74b4:	cd 01       	movw	r24, r26
    74b6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    74ba:	dc 01       	movw	r26, r24
    74bc:	cb 01       	movw	r24, r22
    74be:	f8 01       	movw	r30, r16
    74c0:	91 83       	std	Z+1, r25	; 0x01
    74c2:	80 83       	st	Z, r24
    74c4:	27 c0       	rjmp	.+78     	; 0x7514 <pick_drop+0x602>
    74c6:	ce 01       	movw	r24, r28
    74c8:	8b 5b       	subi	r24, 0xBB	; 187
    74ca:	9f 4f       	sbci	r25, 0xFF	; 255
    74cc:	20 e7       	ldi	r18, 0x70	; 112
    74ce:	31 e0       	ldi	r19, 0x01	; 1
    74d0:	fc 01       	movw	r30, r24
    74d2:	31 83       	std	Z+1, r19	; 0x01
    74d4:	20 83       	st	Z, r18
    74d6:	ce 01       	movw	r24, r28
    74d8:	8b 5b       	subi	r24, 0xBB	; 187
    74da:	9f 4f       	sbci	r25, 0xFF	; 255
    74dc:	fc 01       	movw	r30, r24
    74de:	80 81       	ld	r24, Z
    74e0:	91 81       	ldd	r25, Z+1	; 0x01
    74e2:	8c 01       	movw	r16, r24
    74e4:	c8 01       	movw	r24, r16
    74e6:	01 97       	sbiw	r24, 0x01	; 1
    74e8:	f1 f7       	brne	.-4      	; 0x74e6 <pick_drop+0x5d4>
    74ea:	8c 01       	movw	r16, r24
    74ec:	ce 01       	movw	r24, r28
    74ee:	8b 5b       	subi	r24, 0xBB	; 187
    74f0:	9f 4f       	sbci	r25, 0xFF	; 255
    74f2:	fc 01       	movw	r30, r24
    74f4:	11 83       	std	Z+1, r17	; 0x01
    74f6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74f8:	ce 01       	movw	r24, r28
    74fa:	8d 5b       	subi	r24, 0xBD	; 189
    74fc:	9f 4f       	sbci	r25, 0xFF	; 255
    74fe:	9e 01       	movw	r18, r28
    7500:	2d 5b       	subi	r18, 0xBD	; 189
    7502:	3f 4f       	sbci	r19, 0xFF	; 255
    7504:	f9 01       	movw	r30, r18
    7506:	20 81       	ld	r18, Z
    7508:	31 81       	ldd	r19, Z+1	; 0x01
    750a:	21 50       	subi	r18, 0x01	; 1
    750c:	30 40       	sbci	r19, 0x00	; 0
    750e:	fc 01       	movw	r30, r24
    7510:	31 83       	std	Z+1, r19	; 0x01
    7512:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7514:	ce 01       	movw	r24, r28
    7516:	8d 5b       	subi	r24, 0xBD	; 189
    7518:	9f 4f       	sbci	r25, 0xFF	; 255
    751a:	fc 01       	movw	r30, r24
    751c:	80 81       	ld	r24, Z
    751e:	91 81       	ldd	r25, Z+1	; 0x01
    7520:	00 97       	sbiw	r24, 0x00	; 0
    7522:	89 f6       	brne	.-94     	; 0x74c6 <pick_drop+0x5b4>
    7524:	2e c0       	rjmp	.+92     	; 0x7582 <pick_drop+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7526:	8e 01       	movw	r16, r28
    7528:	0d 5b       	subi	r16, 0xBD	; 189
    752a:	1f 4f       	sbci	r17, 0xFF	; 255
    752c:	ce 01       	movw	r24, r28
    752e:	cf 96       	adiw	r24, 0x3f	; 63
    7530:	fc 01       	movw	r30, r24
    7532:	60 81       	ld	r22, Z
    7534:	71 81       	ldd	r23, Z+1	; 0x01
    7536:	82 81       	ldd	r24, Z+2	; 0x02
    7538:	93 81       	ldd	r25, Z+3	; 0x03
    753a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    753e:	dc 01       	movw	r26, r24
    7540:	cb 01       	movw	r24, r22
    7542:	f8 01       	movw	r30, r16
    7544:	91 83       	std	Z+1, r25	; 0x01
    7546:	80 83       	st	Z, r24
    7548:	ce 01       	movw	r24, r28
    754a:	89 5b       	subi	r24, 0xB9	; 185
    754c:	9f 4f       	sbci	r25, 0xFF	; 255
    754e:	9e 01       	movw	r18, r28
    7550:	2d 5b       	subi	r18, 0xBD	; 189
    7552:	3f 4f       	sbci	r19, 0xFF	; 255
    7554:	f9 01       	movw	r30, r18
    7556:	20 81       	ld	r18, Z
    7558:	31 81       	ldd	r19, Z+1	; 0x01
    755a:	fc 01       	movw	r30, r24
    755c:	31 83       	std	Z+1, r19	; 0x01
    755e:	20 83       	st	Z, r18
    7560:	ce 01       	movw	r24, r28
    7562:	89 5b       	subi	r24, 0xB9	; 185
    7564:	9f 4f       	sbci	r25, 0xFF	; 255
    7566:	fc 01       	movw	r30, r24
    7568:	80 81       	ld	r24, Z
    756a:	91 81       	ldd	r25, Z+1	; 0x01
    756c:	8c 01       	movw	r16, r24
    756e:	c8 01       	movw	r24, r16
    7570:	01 97       	sbiw	r24, 0x01	; 1
    7572:	f1 f7       	brne	.-4      	; 0x7570 <pick_drop+0x65e>
    7574:	8c 01       	movw	r16, r24
    7576:	ce 01       	movw	r24, r28
    7578:	89 5b       	subi	r24, 0xB9	; 185
    757a:	9f 4f       	sbci	r25, 0xFF	; 255
    757c:	fc 01       	movw	r30, r24
    757e:	11 83       	std	Z+1, r17	; 0x01
    7580:	00 83       	st	Z, r16
		_delay_ms(100);
	}
		if(pd == '1' )//left animals
    7582:	ce 01       	movw	r24, r28
    7584:	8d 5e       	subi	r24, 0xED	; 237
    7586:	9c 4f       	sbci	r25, 0xFC	; 252
    7588:	fc 01       	movw	r30, r24
    758a:	80 81       	ld	r24, Z
    758c:	81 33       	cpi	r24, 0x31	; 49
    758e:	11 f0       	breq	.+4      	; 0x7594 <pick_drop+0x682>
    7590:	0c 94 1a 44 	jmp	0x8834	; 0x8834 <pick_drop+0x1922>
		{
			if(master_path[node-1]=='U'){
    7594:	80 91 63 03 	lds	r24, 0x0363
    7598:	90 91 64 03 	lds	r25, 0x0364
    759c:	01 97       	sbiw	r24, 0x01	; 1
    759e:	89 59       	subi	r24, 0x99	; 153
    75a0:	9c 4f       	sbci	r25, 0xFC	; 252
    75a2:	fc 01       	movw	r30, r24
    75a4:	80 81       	ld	r24, Z
    75a6:	85 35       	cpi	r24, 0x55	; 85
    75a8:	09 f0       	breq	.+2      	; 0x75ac <pick_drop+0x69a>
    75aa:	57 c3       	rjmp	.+1710   	; 0x7c5a <pick_drop+0xd48>
			forward_mm(40);
    75ac:	88 e2       	ldi	r24, 0x28	; 40
    75ae:	90 e0       	ldi	r25, 0x00	; 0
    75b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    75b4:	9e 01       	movw	r18, r28
    75b6:	27 5b       	subi	r18, 0xB7	; 183
    75b8:	3f 4f       	sbci	r19, 0xFF	; 255
    75ba:	80 e0       	ldi	r24, 0x00	; 0
    75bc:	90 e0       	ldi	r25, 0x00	; 0
    75be:	a0 ea       	ldi	r26, 0xA0	; 160
    75c0:	b1 e4       	ldi	r27, 0x41	; 65
    75c2:	f9 01       	movw	r30, r18
    75c4:	80 83       	st	Z, r24
    75c6:	91 83       	std	Z+1, r25	; 0x01
    75c8:	a2 83       	std	Z+2, r26	; 0x02
    75ca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    75cc:	8e 01       	movw	r16, r28
    75ce:	03 5b       	subi	r16, 0xB3	; 179
    75d0:	1f 4f       	sbci	r17, 0xFF	; 255
    75d2:	ce 01       	movw	r24, r28
    75d4:	87 5b       	subi	r24, 0xB7	; 183
    75d6:	9f 4f       	sbci	r25, 0xFF	; 255
    75d8:	fc 01       	movw	r30, r24
    75da:	60 81       	ld	r22, Z
    75dc:	71 81       	ldd	r23, Z+1	; 0x01
    75de:	82 81       	ldd	r24, Z+2	; 0x02
    75e0:	93 81       	ldd	r25, Z+3	; 0x03
    75e2:	26 e6       	ldi	r18, 0x66	; 102
    75e4:	36 e6       	ldi	r19, 0x66	; 102
    75e6:	46 e6       	ldi	r20, 0x66	; 102
    75e8:	55 e4       	ldi	r21, 0x45	; 69
    75ea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    75ee:	dc 01       	movw	r26, r24
    75f0:	cb 01       	movw	r24, r22
    75f2:	f8 01       	movw	r30, r16
    75f4:	80 83       	st	Z, r24
    75f6:	91 83       	std	Z+1, r25	; 0x01
    75f8:	a2 83       	std	Z+2, r26	; 0x02
    75fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    75fc:	ce 01       	movw	r24, r28
    75fe:	83 5b       	subi	r24, 0xB3	; 179
    7600:	9f 4f       	sbci	r25, 0xFF	; 255
    7602:	11 e0       	ldi	r17, 0x01	; 1
    7604:	fc 01       	movw	r30, r24
    7606:	60 81       	ld	r22, Z
    7608:	71 81       	ldd	r23, Z+1	; 0x01
    760a:	82 81       	ldd	r24, Z+2	; 0x02
    760c:	93 81       	ldd	r25, Z+3	; 0x03
    760e:	20 e0       	ldi	r18, 0x00	; 0
    7610:	30 e0       	ldi	r19, 0x00	; 0
    7612:	40 e8       	ldi	r20, 0x80	; 128
    7614:	5f e3       	ldi	r21, 0x3F	; 63
    7616:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    761a:	88 23       	and	r24, r24
    761c:	0c f0       	brlt	.+2      	; 0x7620 <pick_drop+0x70e>
    761e:	10 e0       	ldi	r17, 0x00	; 0
    7620:	11 23       	and	r17, r17
    7622:	49 f0       	breq	.+18     	; 0x7636 <pick_drop+0x724>
		__ticks = 1;
    7624:	ce 01       	movw	r24, r28
    7626:	8f 5a       	subi	r24, 0xAF	; 175
    7628:	9f 4f       	sbci	r25, 0xFF	; 255
    762a:	21 e0       	ldi	r18, 0x01	; 1
    762c:	30 e0       	ldi	r19, 0x00	; 0
    762e:	fc 01       	movw	r30, r24
    7630:	31 83       	std	Z+1, r19	; 0x01
    7632:	20 83       	st	Z, r18
    7634:	74 c0       	rjmp	.+232    	; 0x771e <pick_drop+0x80c>
	else if (__tmp > 65535)
    7636:	ce 01       	movw	r24, r28
    7638:	83 5b       	subi	r24, 0xB3	; 179
    763a:	9f 4f       	sbci	r25, 0xFF	; 255
    763c:	11 e0       	ldi	r17, 0x01	; 1
    763e:	fc 01       	movw	r30, r24
    7640:	60 81       	ld	r22, Z
    7642:	71 81       	ldd	r23, Z+1	; 0x01
    7644:	82 81       	ldd	r24, Z+2	; 0x02
    7646:	93 81       	ldd	r25, Z+3	; 0x03
    7648:	20 e0       	ldi	r18, 0x00	; 0
    764a:	3f ef       	ldi	r19, 0xFF	; 255
    764c:	4f e7       	ldi	r20, 0x7F	; 127
    764e:	57 e4       	ldi	r21, 0x47	; 71
    7650:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7654:	18 16       	cp	r1, r24
    7656:	0c f0       	brlt	.+2      	; 0x765a <pick_drop+0x748>
    7658:	10 e0       	ldi	r17, 0x00	; 0
    765a:	11 23       	and	r17, r17
    765c:	09 f4       	brne	.+2      	; 0x7660 <pick_drop+0x74e>
    765e:	4d c0       	rjmp	.+154    	; 0x76fa <pick_drop+0x7e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7660:	ce 01       	movw	r24, r28
    7662:	87 5b       	subi	r24, 0xB7	; 183
    7664:	9f 4f       	sbci	r25, 0xFF	; 255
    7666:	fc 01       	movw	r30, r24
    7668:	60 81       	ld	r22, Z
    766a:	71 81       	ldd	r23, Z+1	; 0x01
    766c:	82 81       	ldd	r24, Z+2	; 0x02
    766e:	93 81       	ldd	r25, Z+3	; 0x03
    7670:	20 e0       	ldi	r18, 0x00	; 0
    7672:	30 e0       	ldi	r19, 0x00	; 0
    7674:	40 e2       	ldi	r20, 0x20	; 32
    7676:	51 e4       	ldi	r21, 0x41	; 65
    7678:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    767c:	dc 01       	movw	r26, r24
    767e:	cb 01       	movw	r24, r22
    7680:	8e 01       	movw	r16, r28
    7682:	0f 5a       	subi	r16, 0xAF	; 175
    7684:	1f 4f       	sbci	r17, 0xFF	; 255
    7686:	bc 01       	movw	r22, r24
    7688:	cd 01       	movw	r24, r26
    768a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    768e:	dc 01       	movw	r26, r24
    7690:	cb 01       	movw	r24, r22
    7692:	f8 01       	movw	r30, r16
    7694:	91 83       	std	Z+1, r25	; 0x01
    7696:	80 83       	st	Z, r24
    7698:	27 c0       	rjmp	.+78     	; 0x76e8 <pick_drop+0x7d6>
    769a:	ce 01       	movw	r24, r28
    769c:	8d 5a       	subi	r24, 0xAD	; 173
    769e:	9f 4f       	sbci	r25, 0xFF	; 255
    76a0:	20 e7       	ldi	r18, 0x70	; 112
    76a2:	31 e0       	ldi	r19, 0x01	; 1
    76a4:	fc 01       	movw	r30, r24
    76a6:	31 83       	std	Z+1, r19	; 0x01
    76a8:	20 83       	st	Z, r18
    76aa:	ce 01       	movw	r24, r28
    76ac:	8d 5a       	subi	r24, 0xAD	; 173
    76ae:	9f 4f       	sbci	r25, 0xFF	; 255
    76b0:	fc 01       	movw	r30, r24
    76b2:	80 81       	ld	r24, Z
    76b4:	91 81       	ldd	r25, Z+1	; 0x01
    76b6:	8c 01       	movw	r16, r24
    76b8:	c8 01       	movw	r24, r16
    76ba:	01 97       	sbiw	r24, 0x01	; 1
    76bc:	f1 f7       	brne	.-4      	; 0x76ba <pick_drop+0x7a8>
    76be:	8c 01       	movw	r16, r24
    76c0:	ce 01       	movw	r24, r28
    76c2:	8d 5a       	subi	r24, 0xAD	; 173
    76c4:	9f 4f       	sbci	r25, 0xFF	; 255
    76c6:	fc 01       	movw	r30, r24
    76c8:	11 83       	std	Z+1, r17	; 0x01
    76ca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76cc:	ce 01       	movw	r24, r28
    76ce:	8f 5a       	subi	r24, 0xAF	; 175
    76d0:	9f 4f       	sbci	r25, 0xFF	; 255
    76d2:	9e 01       	movw	r18, r28
    76d4:	2f 5a       	subi	r18, 0xAF	; 175
    76d6:	3f 4f       	sbci	r19, 0xFF	; 255
    76d8:	f9 01       	movw	r30, r18
    76da:	20 81       	ld	r18, Z
    76dc:	31 81       	ldd	r19, Z+1	; 0x01
    76de:	21 50       	subi	r18, 0x01	; 1
    76e0:	30 40       	sbci	r19, 0x00	; 0
    76e2:	fc 01       	movw	r30, r24
    76e4:	31 83       	std	Z+1, r19	; 0x01
    76e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76e8:	ce 01       	movw	r24, r28
    76ea:	8f 5a       	subi	r24, 0xAF	; 175
    76ec:	9f 4f       	sbci	r25, 0xFF	; 255
    76ee:	fc 01       	movw	r30, r24
    76f0:	80 81       	ld	r24, Z
    76f2:	91 81       	ldd	r25, Z+1	; 0x01
    76f4:	00 97       	sbiw	r24, 0x00	; 0
    76f6:	89 f6       	brne	.-94     	; 0x769a <pick_drop+0x788>
    76f8:	2f c0       	rjmp	.+94     	; 0x7758 <pick_drop+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76fa:	8e 01       	movw	r16, r28
    76fc:	0f 5a       	subi	r16, 0xAF	; 175
    76fe:	1f 4f       	sbci	r17, 0xFF	; 255
    7700:	ce 01       	movw	r24, r28
    7702:	83 5b       	subi	r24, 0xB3	; 179
    7704:	9f 4f       	sbci	r25, 0xFF	; 255
    7706:	fc 01       	movw	r30, r24
    7708:	60 81       	ld	r22, Z
    770a:	71 81       	ldd	r23, Z+1	; 0x01
    770c:	82 81       	ldd	r24, Z+2	; 0x02
    770e:	93 81       	ldd	r25, Z+3	; 0x03
    7710:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7714:	dc 01       	movw	r26, r24
    7716:	cb 01       	movw	r24, r22
    7718:	f8 01       	movw	r30, r16
    771a:	91 83       	std	Z+1, r25	; 0x01
    771c:	80 83       	st	Z, r24
    771e:	ce 01       	movw	r24, r28
    7720:	8b 5a       	subi	r24, 0xAB	; 171
    7722:	9f 4f       	sbci	r25, 0xFF	; 255
    7724:	9e 01       	movw	r18, r28
    7726:	2f 5a       	subi	r18, 0xAF	; 175
    7728:	3f 4f       	sbci	r19, 0xFF	; 255
    772a:	f9 01       	movw	r30, r18
    772c:	20 81       	ld	r18, Z
    772e:	31 81       	ldd	r19, Z+1	; 0x01
    7730:	fc 01       	movw	r30, r24
    7732:	31 83       	std	Z+1, r19	; 0x01
    7734:	20 83       	st	Z, r18
    7736:	ce 01       	movw	r24, r28
    7738:	8b 5a       	subi	r24, 0xAB	; 171
    773a:	9f 4f       	sbci	r25, 0xFF	; 255
    773c:	fc 01       	movw	r30, r24
    773e:	80 81       	ld	r24, Z
    7740:	91 81       	ldd	r25, Z+1	; 0x01
    7742:	8c 01       	movw	r16, r24
    7744:	c8 01       	movw	r24, r16
    7746:	01 97       	sbiw	r24, 0x01	; 1
    7748:	f1 f7       	brne	.-4      	; 0x7746 <pick_drop+0x834>
    774a:	8c 01       	movw	r16, r24
    774c:	ce 01       	movw	r24, r28
    774e:	8b 5a       	subi	r24, 0xAB	; 171
    7750:	9f 4f       	sbci	r25, 0xFF	; 255
    7752:	fc 01       	movw	r30, r24
    7754:	11 83       	std	Z+1, r17	; 0x01
    7756:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left2();
    7758:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    775c:	9e 01       	movw	r18, r28
    775e:	29 5a       	subi	r18, 0xA9	; 169
    7760:	3f 4f       	sbci	r19, 0xFF	; 255
    7762:	80 e0       	ldi	r24, 0x00	; 0
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	a8 e4       	ldi	r26, 0x48	; 72
    7768:	b2 e4       	ldi	r27, 0x42	; 66
    776a:	f9 01       	movw	r30, r18
    776c:	80 83       	st	Z, r24
    776e:	91 83       	std	Z+1, r25	; 0x01
    7770:	a2 83       	std	Z+2, r26	; 0x02
    7772:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7774:	8e 01       	movw	r16, r28
    7776:	05 5a       	subi	r16, 0xA5	; 165
    7778:	1f 4f       	sbci	r17, 0xFF	; 255
    777a:	ce 01       	movw	r24, r28
    777c:	89 5a       	subi	r24, 0xA9	; 169
    777e:	9f 4f       	sbci	r25, 0xFF	; 255
    7780:	fc 01       	movw	r30, r24
    7782:	60 81       	ld	r22, Z
    7784:	71 81       	ldd	r23, Z+1	; 0x01
    7786:	82 81       	ldd	r24, Z+2	; 0x02
    7788:	93 81       	ldd	r25, Z+3	; 0x03
    778a:	26 e6       	ldi	r18, 0x66	; 102
    778c:	36 e6       	ldi	r19, 0x66	; 102
    778e:	46 e6       	ldi	r20, 0x66	; 102
    7790:	55 e4       	ldi	r21, 0x45	; 69
    7792:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7796:	dc 01       	movw	r26, r24
    7798:	cb 01       	movw	r24, r22
    779a:	f8 01       	movw	r30, r16
    779c:	80 83       	st	Z, r24
    779e:	91 83       	std	Z+1, r25	; 0x01
    77a0:	a2 83       	std	Z+2, r26	; 0x02
    77a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    77a4:	ce 01       	movw	r24, r28
    77a6:	85 5a       	subi	r24, 0xA5	; 165
    77a8:	9f 4f       	sbci	r25, 0xFF	; 255
    77aa:	11 e0       	ldi	r17, 0x01	; 1
    77ac:	fc 01       	movw	r30, r24
    77ae:	60 81       	ld	r22, Z
    77b0:	71 81       	ldd	r23, Z+1	; 0x01
    77b2:	82 81       	ldd	r24, Z+2	; 0x02
    77b4:	93 81       	ldd	r25, Z+3	; 0x03
    77b6:	20 e0       	ldi	r18, 0x00	; 0
    77b8:	30 e0       	ldi	r19, 0x00	; 0
    77ba:	40 e8       	ldi	r20, 0x80	; 128
    77bc:	5f e3       	ldi	r21, 0x3F	; 63
    77be:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    77c2:	88 23       	and	r24, r24
    77c4:	0c f0       	brlt	.+2      	; 0x77c8 <pick_drop+0x8b6>
    77c6:	10 e0       	ldi	r17, 0x00	; 0
    77c8:	11 23       	and	r17, r17
    77ca:	49 f0       	breq	.+18     	; 0x77de <pick_drop+0x8cc>
		__ticks = 1;
    77cc:	ce 01       	movw	r24, r28
    77ce:	81 5a       	subi	r24, 0xA1	; 161
    77d0:	9f 4f       	sbci	r25, 0xFF	; 255
    77d2:	21 e0       	ldi	r18, 0x01	; 1
    77d4:	30 e0       	ldi	r19, 0x00	; 0
    77d6:	fc 01       	movw	r30, r24
    77d8:	31 83       	std	Z+1, r19	; 0x01
    77da:	20 83       	st	Z, r18
    77dc:	74 c0       	rjmp	.+232    	; 0x78c6 <pick_drop+0x9b4>
	else if (__tmp > 65535)
    77de:	ce 01       	movw	r24, r28
    77e0:	85 5a       	subi	r24, 0xA5	; 165
    77e2:	9f 4f       	sbci	r25, 0xFF	; 255
    77e4:	11 e0       	ldi	r17, 0x01	; 1
    77e6:	fc 01       	movw	r30, r24
    77e8:	60 81       	ld	r22, Z
    77ea:	71 81       	ldd	r23, Z+1	; 0x01
    77ec:	82 81       	ldd	r24, Z+2	; 0x02
    77ee:	93 81       	ldd	r25, Z+3	; 0x03
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	3f ef       	ldi	r19, 0xFF	; 255
    77f4:	4f e7       	ldi	r20, 0x7F	; 127
    77f6:	57 e4       	ldi	r21, 0x47	; 71
    77f8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    77fc:	18 16       	cp	r1, r24
    77fe:	0c f0       	brlt	.+2      	; 0x7802 <pick_drop+0x8f0>
    7800:	10 e0       	ldi	r17, 0x00	; 0
    7802:	11 23       	and	r17, r17
    7804:	09 f4       	brne	.+2      	; 0x7808 <pick_drop+0x8f6>
    7806:	4d c0       	rjmp	.+154    	; 0x78a2 <pick_drop+0x990>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7808:	ce 01       	movw	r24, r28
    780a:	89 5a       	subi	r24, 0xA9	; 169
    780c:	9f 4f       	sbci	r25, 0xFF	; 255
    780e:	fc 01       	movw	r30, r24
    7810:	60 81       	ld	r22, Z
    7812:	71 81       	ldd	r23, Z+1	; 0x01
    7814:	82 81       	ldd	r24, Z+2	; 0x02
    7816:	93 81       	ldd	r25, Z+3	; 0x03
    7818:	20 e0       	ldi	r18, 0x00	; 0
    781a:	30 e0       	ldi	r19, 0x00	; 0
    781c:	40 e2       	ldi	r20, 0x20	; 32
    781e:	51 e4       	ldi	r21, 0x41	; 65
    7820:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7824:	dc 01       	movw	r26, r24
    7826:	cb 01       	movw	r24, r22
    7828:	8e 01       	movw	r16, r28
    782a:	01 5a       	subi	r16, 0xA1	; 161
    782c:	1f 4f       	sbci	r17, 0xFF	; 255
    782e:	bc 01       	movw	r22, r24
    7830:	cd 01       	movw	r24, r26
    7832:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7836:	dc 01       	movw	r26, r24
    7838:	cb 01       	movw	r24, r22
    783a:	f8 01       	movw	r30, r16
    783c:	91 83       	std	Z+1, r25	; 0x01
    783e:	80 83       	st	Z, r24
    7840:	27 c0       	rjmp	.+78     	; 0x7890 <pick_drop+0x97e>
    7842:	ce 01       	movw	r24, r28
    7844:	8f 59       	subi	r24, 0x9F	; 159
    7846:	9f 4f       	sbci	r25, 0xFF	; 255
    7848:	20 e7       	ldi	r18, 0x70	; 112
    784a:	31 e0       	ldi	r19, 0x01	; 1
    784c:	fc 01       	movw	r30, r24
    784e:	31 83       	std	Z+1, r19	; 0x01
    7850:	20 83       	st	Z, r18
    7852:	ce 01       	movw	r24, r28
    7854:	8f 59       	subi	r24, 0x9F	; 159
    7856:	9f 4f       	sbci	r25, 0xFF	; 255
    7858:	fc 01       	movw	r30, r24
    785a:	80 81       	ld	r24, Z
    785c:	91 81       	ldd	r25, Z+1	; 0x01
    785e:	8c 01       	movw	r16, r24
    7860:	c8 01       	movw	r24, r16
    7862:	01 97       	sbiw	r24, 0x01	; 1
    7864:	f1 f7       	brne	.-4      	; 0x7862 <pick_drop+0x950>
    7866:	8c 01       	movw	r16, r24
    7868:	ce 01       	movw	r24, r28
    786a:	8f 59       	subi	r24, 0x9F	; 159
    786c:	9f 4f       	sbci	r25, 0xFF	; 255
    786e:	fc 01       	movw	r30, r24
    7870:	11 83       	std	Z+1, r17	; 0x01
    7872:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7874:	ce 01       	movw	r24, r28
    7876:	81 5a       	subi	r24, 0xA1	; 161
    7878:	9f 4f       	sbci	r25, 0xFF	; 255
    787a:	9e 01       	movw	r18, r28
    787c:	21 5a       	subi	r18, 0xA1	; 161
    787e:	3f 4f       	sbci	r19, 0xFF	; 255
    7880:	f9 01       	movw	r30, r18
    7882:	20 81       	ld	r18, Z
    7884:	31 81       	ldd	r19, Z+1	; 0x01
    7886:	21 50       	subi	r18, 0x01	; 1
    7888:	30 40       	sbci	r19, 0x00	; 0
    788a:	fc 01       	movw	r30, r24
    788c:	31 83       	std	Z+1, r19	; 0x01
    788e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7890:	ce 01       	movw	r24, r28
    7892:	81 5a       	subi	r24, 0xA1	; 161
    7894:	9f 4f       	sbci	r25, 0xFF	; 255
    7896:	fc 01       	movw	r30, r24
    7898:	80 81       	ld	r24, Z
    789a:	91 81       	ldd	r25, Z+1	; 0x01
    789c:	00 97       	sbiw	r24, 0x00	; 0
    789e:	89 f6       	brne	.-94     	; 0x7842 <pick_drop+0x930>
    78a0:	2f c0       	rjmp	.+94     	; 0x7900 <pick_drop+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78a2:	8e 01       	movw	r16, r28
    78a4:	01 5a       	subi	r16, 0xA1	; 161
    78a6:	1f 4f       	sbci	r17, 0xFF	; 255
    78a8:	ce 01       	movw	r24, r28
    78aa:	85 5a       	subi	r24, 0xA5	; 165
    78ac:	9f 4f       	sbci	r25, 0xFF	; 255
    78ae:	fc 01       	movw	r30, r24
    78b0:	60 81       	ld	r22, Z
    78b2:	71 81       	ldd	r23, Z+1	; 0x01
    78b4:	82 81       	ldd	r24, Z+2	; 0x02
    78b6:	93 81       	ldd	r25, Z+3	; 0x03
    78b8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    78bc:	dc 01       	movw	r26, r24
    78be:	cb 01       	movw	r24, r22
    78c0:	f8 01       	movw	r30, r16
    78c2:	91 83       	std	Z+1, r25	; 0x01
    78c4:	80 83       	st	Z, r24
    78c6:	ce 01       	movw	r24, r28
    78c8:	8d 59       	subi	r24, 0x9D	; 157
    78ca:	9f 4f       	sbci	r25, 0xFF	; 255
    78cc:	9e 01       	movw	r18, r28
    78ce:	21 5a       	subi	r18, 0xA1	; 161
    78d0:	3f 4f       	sbci	r19, 0xFF	; 255
    78d2:	f9 01       	movw	r30, r18
    78d4:	20 81       	ld	r18, Z
    78d6:	31 81       	ldd	r19, Z+1	; 0x01
    78d8:	fc 01       	movw	r30, r24
    78da:	31 83       	std	Z+1, r19	; 0x01
    78dc:	20 83       	st	Z, r18
    78de:	ce 01       	movw	r24, r28
    78e0:	8d 59       	subi	r24, 0x9D	; 157
    78e2:	9f 4f       	sbci	r25, 0xFF	; 255
    78e4:	fc 01       	movw	r30, r24
    78e6:	80 81       	ld	r24, Z
    78e8:	91 81       	ldd	r25, Z+1	; 0x01
    78ea:	8c 01       	movw	r16, r24
    78ec:	c8 01       	movw	r24, r16
    78ee:	01 97       	sbiw	r24, 0x01	; 1
    78f0:	f1 f7       	brne	.-4      	; 0x78ee <pick_drop+0x9dc>
    78f2:	8c 01       	movw	r16, r24
    78f4:	ce 01       	movw	r24, r28
    78f6:	8d 59       	subi	r24, 0x9D	; 157
    78f8:	9f 4f       	sbci	r25, 0xFF	; 255
    78fa:	fc 01       	movw	r30, r24
    78fc:	11 83       	std	Z+1, r17	; 0x01
    78fe:	00 83       	st	Z, r16
			_delay_ms(50);
			front();
    7900:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    7904:	9e 01       	movw	r18, r28
    7906:	2b 59       	subi	r18, 0x9B	; 155
    7908:	3f 4f       	sbci	r19, 0xFF	; 255
    790a:	80 e0       	ldi	r24, 0x00	; 0
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	a8 ec       	ldi	r26, 0xC8	; 200
    7910:	b2 e4       	ldi	r27, 0x42	; 66
    7912:	f9 01       	movw	r30, r18
    7914:	80 83       	st	Z, r24
    7916:	91 83       	std	Z+1, r25	; 0x01
    7918:	a2 83       	std	Z+2, r26	; 0x02
    791a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    791c:	8e 01       	movw	r16, r28
    791e:	07 59       	subi	r16, 0x97	; 151
    7920:	1f 4f       	sbci	r17, 0xFF	; 255
    7922:	ce 01       	movw	r24, r28
    7924:	8b 59       	subi	r24, 0x9B	; 155
    7926:	9f 4f       	sbci	r25, 0xFF	; 255
    7928:	fc 01       	movw	r30, r24
    792a:	60 81       	ld	r22, Z
    792c:	71 81       	ldd	r23, Z+1	; 0x01
    792e:	82 81       	ldd	r24, Z+2	; 0x02
    7930:	93 81       	ldd	r25, Z+3	; 0x03
    7932:	26 e6       	ldi	r18, 0x66	; 102
    7934:	36 e6       	ldi	r19, 0x66	; 102
    7936:	46 e6       	ldi	r20, 0x66	; 102
    7938:	55 e4       	ldi	r21, 0x45	; 69
    793a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    793e:	dc 01       	movw	r26, r24
    7940:	cb 01       	movw	r24, r22
    7942:	f8 01       	movw	r30, r16
    7944:	80 83       	st	Z, r24
    7946:	91 83       	std	Z+1, r25	; 0x01
    7948:	a2 83       	std	Z+2, r26	; 0x02
    794a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    794c:	ce 01       	movw	r24, r28
    794e:	87 59       	subi	r24, 0x97	; 151
    7950:	9f 4f       	sbci	r25, 0xFF	; 255
    7952:	11 e0       	ldi	r17, 0x01	; 1
    7954:	fc 01       	movw	r30, r24
    7956:	60 81       	ld	r22, Z
    7958:	71 81       	ldd	r23, Z+1	; 0x01
    795a:	82 81       	ldd	r24, Z+2	; 0x02
    795c:	93 81       	ldd	r25, Z+3	; 0x03
    795e:	20 e0       	ldi	r18, 0x00	; 0
    7960:	30 e0       	ldi	r19, 0x00	; 0
    7962:	40 e8       	ldi	r20, 0x80	; 128
    7964:	5f e3       	ldi	r21, 0x3F	; 63
    7966:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    796a:	88 23       	and	r24, r24
    796c:	0c f0       	brlt	.+2      	; 0x7970 <pick_drop+0xa5e>
    796e:	10 e0       	ldi	r17, 0x00	; 0
    7970:	11 23       	and	r17, r17
    7972:	49 f0       	breq	.+18     	; 0x7986 <pick_drop+0xa74>
		__ticks = 1;
    7974:	ce 01       	movw	r24, r28
    7976:	83 59       	subi	r24, 0x93	; 147
    7978:	9f 4f       	sbci	r25, 0xFF	; 255
    797a:	21 e0       	ldi	r18, 0x01	; 1
    797c:	30 e0       	ldi	r19, 0x00	; 0
    797e:	fc 01       	movw	r30, r24
    7980:	31 83       	std	Z+1, r19	; 0x01
    7982:	20 83       	st	Z, r18
    7984:	74 c0       	rjmp	.+232    	; 0x7a6e <pick_drop+0xb5c>
	else if (__tmp > 65535)
    7986:	ce 01       	movw	r24, r28
    7988:	87 59       	subi	r24, 0x97	; 151
    798a:	9f 4f       	sbci	r25, 0xFF	; 255
    798c:	11 e0       	ldi	r17, 0x01	; 1
    798e:	fc 01       	movw	r30, r24
    7990:	60 81       	ld	r22, Z
    7992:	71 81       	ldd	r23, Z+1	; 0x01
    7994:	82 81       	ldd	r24, Z+2	; 0x02
    7996:	93 81       	ldd	r25, Z+3	; 0x03
    7998:	20 e0       	ldi	r18, 0x00	; 0
    799a:	3f ef       	ldi	r19, 0xFF	; 255
    799c:	4f e7       	ldi	r20, 0x7F	; 127
    799e:	57 e4       	ldi	r21, 0x47	; 71
    79a0:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    79a4:	18 16       	cp	r1, r24
    79a6:	0c f0       	brlt	.+2      	; 0x79aa <pick_drop+0xa98>
    79a8:	10 e0       	ldi	r17, 0x00	; 0
    79aa:	11 23       	and	r17, r17
    79ac:	09 f4       	brne	.+2      	; 0x79b0 <pick_drop+0xa9e>
    79ae:	4d c0       	rjmp	.+154    	; 0x7a4a <pick_drop+0xb38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    79b0:	ce 01       	movw	r24, r28
    79b2:	8b 59       	subi	r24, 0x9B	; 155
    79b4:	9f 4f       	sbci	r25, 0xFF	; 255
    79b6:	fc 01       	movw	r30, r24
    79b8:	60 81       	ld	r22, Z
    79ba:	71 81       	ldd	r23, Z+1	; 0x01
    79bc:	82 81       	ldd	r24, Z+2	; 0x02
    79be:	93 81       	ldd	r25, Z+3	; 0x03
    79c0:	20 e0       	ldi	r18, 0x00	; 0
    79c2:	30 e0       	ldi	r19, 0x00	; 0
    79c4:	40 e2       	ldi	r20, 0x20	; 32
    79c6:	51 e4       	ldi	r21, 0x41	; 65
    79c8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    79cc:	dc 01       	movw	r26, r24
    79ce:	cb 01       	movw	r24, r22
    79d0:	8e 01       	movw	r16, r28
    79d2:	03 59       	subi	r16, 0x93	; 147
    79d4:	1f 4f       	sbci	r17, 0xFF	; 255
    79d6:	bc 01       	movw	r22, r24
    79d8:	cd 01       	movw	r24, r26
    79da:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    79de:	dc 01       	movw	r26, r24
    79e0:	cb 01       	movw	r24, r22
    79e2:	f8 01       	movw	r30, r16
    79e4:	91 83       	std	Z+1, r25	; 0x01
    79e6:	80 83       	st	Z, r24
    79e8:	27 c0       	rjmp	.+78     	; 0x7a38 <pick_drop+0xb26>
    79ea:	ce 01       	movw	r24, r28
    79ec:	81 59       	subi	r24, 0x91	; 145
    79ee:	9f 4f       	sbci	r25, 0xFF	; 255
    79f0:	20 e7       	ldi	r18, 0x70	; 112
    79f2:	31 e0       	ldi	r19, 0x01	; 1
    79f4:	fc 01       	movw	r30, r24
    79f6:	31 83       	std	Z+1, r19	; 0x01
    79f8:	20 83       	st	Z, r18
    79fa:	ce 01       	movw	r24, r28
    79fc:	81 59       	subi	r24, 0x91	; 145
    79fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7a00:	fc 01       	movw	r30, r24
    7a02:	80 81       	ld	r24, Z
    7a04:	91 81       	ldd	r25, Z+1	; 0x01
    7a06:	8c 01       	movw	r16, r24
    7a08:	c8 01       	movw	r24, r16
    7a0a:	01 97       	sbiw	r24, 0x01	; 1
    7a0c:	f1 f7       	brne	.-4      	; 0x7a0a <pick_drop+0xaf8>
    7a0e:	8c 01       	movw	r16, r24
    7a10:	ce 01       	movw	r24, r28
    7a12:	81 59       	subi	r24, 0x91	; 145
    7a14:	9f 4f       	sbci	r25, 0xFF	; 255
    7a16:	fc 01       	movw	r30, r24
    7a18:	11 83       	std	Z+1, r17	; 0x01
    7a1a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7a1c:	ce 01       	movw	r24, r28
    7a1e:	83 59       	subi	r24, 0x93	; 147
    7a20:	9f 4f       	sbci	r25, 0xFF	; 255
    7a22:	9e 01       	movw	r18, r28
    7a24:	23 59       	subi	r18, 0x93	; 147
    7a26:	3f 4f       	sbci	r19, 0xFF	; 255
    7a28:	f9 01       	movw	r30, r18
    7a2a:	20 81       	ld	r18, Z
    7a2c:	31 81       	ldd	r19, Z+1	; 0x01
    7a2e:	21 50       	subi	r18, 0x01	; 1
    7a30:	30 40       	sbci	r19, 0x00	; 0
    7a32:	fc 01       	movw	r30, r24
    7a34:	31 83       	std	Z+1, r19	; 0x01
    7a36:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a38:	ce 01       	movw	r24, r28
    7a3a:	83 59       	subi	r24, 0x93	; 147
    7a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a3e:	fc 01       	movw	r30, r24
    7a40:	80 81       	ld	r24, Z
    7a42:	91 81       	ldd	r25, Z+1	; 0x01
    7a44:	00 97       	sbiw	r24, 0x00	; 0
    7a46:	89 f6       	brne	.-94     	; 0x79ea <pick_drop+0xad8>
    7a48:	2f c0       	rjmp	.+94     	; 0x7aa8 <pick_drop+0xb96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a4a:	8e 01       	movw	r16, r28
    7a4c:	03 59       	subi	r16, 0x93	; 147
    7a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a50:	ce 01       	movw	r24, r28
    7a52:	87 59       	subi	r24, 0x97	; 151
    7a54:	9f 4f       	sbci	r25, 0xFF	; 255
    7a56:	fc 01       	movw	r30, r24
    7a58:	60 81       	ld	r22, Z
    7a5a:	71 81       	ldd	r23, Z+1	; 0x01
    7a5c:	82 81       	ldd	r24, Z+2	; 0x02
    7a5e:	93 81       	ldd	r25, Z+3	; 0x03
    7a60:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7a64:	dc 01       	movw	r26, r24
    7a66:	cb 01       	movw	r24, r22
    7a68:	f8 01       	movw	r30, r16
    7a6a:	91 83       	std	Z+1, r25	; 0x01
    7a6c:	80 83       	st	Z, r24
    7a6e:	ce 01       	movw	r24, r28
    7a70:	8f 58       	subi	r24, 0x8F	; 143
    7a72:	9f 4f       	sbci	r25, 0xFF	; 255
    7a74:	9e 01       	movw	r18, r28
    7a76:	23 59       	subi	r18, 0x93	; 147
    7a78:	3f 4f       	sbci	r19, 0xFF	; 255
    7a7a:	f9 01       	movw	r30, r18
    7a7c:	20 81       	ld	r18, Z
    7a7e:	31 81       	ldd	r19, Z+1	; 0x01
    7a80:	fc 01       	movw	r30, r24
    7a82:	31 83       	std	Z+1, r19	; 0x01
    7a84:	20 83       	st	Z, r18
    7a86:	ce 01       	movw	r24, r28
    7a88:	8f 58       	subi	r24, 0x8F	; 143
    7a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a8c:	fc 01       	movw	r30, r24
    7a8e:	80 81       	ld	r24, Z
    7a90:	91 81       	ldd	r25, Z+1	; 0x01
    7a92:	8c 01       	movw	r16, r24
    7a94:	c8 01       	movw	r24, r16
    7a96:	01 97       	sbiw	r24, 0x01	; 1
    7a98:	f1 f7       	brne	.-4      	; 0x7a96 <pick_drop+0xb84>
    7a9a:	8c 01       	movw	r16, r24
    7a9c:	ce 01       	movw	r24, r28
    7a9e:	8f 58       	subi	r24, 0x8F	; 143
    7aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    7aa2:	fc 01       	movw	r30, r24
    7aa4:	11 83       	std	Z+1, r17	; 0x01
    7aa6:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_right();
    7aa8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			back_mm(pdback);
    7aac:	89 81       	ldd	r24, Y+1	; 0x01
    7aae:	9a 81       	ldd	r25, Y+2	; 0x02
    7ab0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    7ab4:	9e 01       	movw	r18, r28
    7ab6:	2d 58       	subi	r18, 0x8D	; 141
    7ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    7aba:	80 e0       	ldi	r24, 0x00	; 0
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	a0 ea       	ldi	r26, 0xA0	; 160
    7ac0:	b1 e4       	ldi	r27, 0x41	; 65
    7ac2:	f9 01       	movw	r30, r18
    7ac4:	80 83       	st	Z, r24
    7ac6:	91 83       	std	Z+1, r25	; 0x01
    7ac8:	a2 83       	std	Z+2, r26	; 0x02
    7aca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7acc:	8e 01       	movw	r16, r28
    7ace:	09 58       	subi	r16, 0x89	; 137
    7ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ad2:	ce 01       	movw	r24, r28
    7ad4:	8d 58       	subi	r24, 0x8D	; 141
    7ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad8:	fc 01       	movw	r30, r24
    7ada:	60 81       	ld	r22, Z
    7adc:	71 81       	ldd	r23, Z+1	; 0x01
    7ade:	82 81       	ldd	r24, Z+2	; 0x02
    7ae0:	93 81       	ldd	r25, Z+3	; 0x03
    7ae2:	26 e6       	ldi	r18, 0x66	; 102
    7ae4:	36 e6       	ldi	r19, 0x66	; 102
    7ae6:	46 e6       	ldi	r20, 0x66	; 102
    7ae8:	55 e4       	ldi	r21, 0x45	; 69
    7aea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7aee:	dc 01       	movw	r26, r24
    7af0:	cb 01       	movw	r24, r22
    7af2:	f8 01       	movw	r30, r16
    7af4:	80 83       	st	Z, r24
    7af6:	91 83       	std	Z+1, r25	; 0x01
    7af8:	a2 83       	std	Z+2, r26	; 0x02
    7afa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7afc:	ce 01       	movw	r24, r28
    7afe:	89 58       	subi	r24, 0x89	; 137
    7b00:	9f 4f       	sbci	r25, 0xFF	; 255
    7b02:	11 e0       	ldi	r17, 0x01	; 1
    7b04:	fc 01       	movw	r30, r24
    7b06:	60 81       	ld	r22, Z
    7b08:	71 81       	ldd	r23, Z+1	; 0x01
    7b0a:	82 81       	ldd	r24, Z+2	; 0x02
    7b0c:	93 81       	ldd	r25, Z+3	; 0x03
    7b0e:	20 e0       	ldi	r18, 0x00	; 0
    7b10:	30 e0       	ldi	r19, 0x00	; 0
    7b12:	40 e8       	ldi	r20, 0x80	; 128
    7b14:	5f e3       	ldi	r21, 0x3F	; 63
    7b16:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    7b1a:	88 23       	and	r24, r24
    7b1c:	0c f0       	brlt	.+2      	; 0x7b20 <pick_drop+0xc0e>
    7b1e:	10 e0       	ldi	r17, 0x00	; 0
    7b20:	11 23       	and	r17, r17
    7b22:	49 f0       	breq	.+18     	; 0x7b36 <pick_drop+0xc24>
		__ticks = 1;
    7b24:	ce 01       	movw	r24, r28
    7b26:	85 58       	subi	r24, 0x85	; 133
    7b28:	9f 4f       	sbci	r25, 0xFF	; 255
    7b2a:	21 e0       	ldi	r18, 0x01	; 1
    7b2c:	30 e0       	ldi	r19, 0x00	; 0
    7b2e:	fc 01       	movw	r30, r24
    7b30:	31 83       	std	Z+1, r19	; 0x01
    7b32:	20 83       	st	Z, r18
    7b34:	74 c0       	rjmp	.+232    	; 0x7c1e <pick_drop+0xd0c>
	else if (__tmp > 65535)
    7b36:	ce 01       	movw	r24, r28
    7b38:	89 58       	subi	r24, 0x89	; 137
    7b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b3c:	11 e0       	ldi	r17, 0x01	; 1
    7b3e:	fc 01       	movw	r30, r24
    7b40:	60 81       	ld	r22, Z
    7b42:	71 81       	ldd	r23, Z+1	; 0x01
    7b44:	82 81       	ldd	r24, Z+2	; 0x02
    7b46:	93 81       	ldd	r25, Z+3	; 0x03
    7b48:	20 e0       	ldi	r18, 0x00	; 0
    7b4a:	3f ef       	ldi	r19, 0xFF	; 255
    7b4c:	4f e7       	ldi	r20, 0x7F	; 127
    7b4e:	57 e4       	ldi	r21, 0x47	; 71
    7b50:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7b54:	18 16       	cp	r1, r24
    7b56:	0c f0       	brlt	.+2      	; 0x7b5a <pick_drop+0xc48>
    7b58:	10 e0       	ldi	r17, 0x00	; 0
    7b5a:	11 23       	and	r17, r17
    7b5c:	09 f4       	brne	.+2      	; 0x7b60 <pick_drop+0xc4e>
    7b5e:	4d c0       	rjmp	.+154    	; 0x7bfa <pick_drop+0xce8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b60:	ce 01       	movw	r24, r28
    7b62:	8d 58       	subi	r24, 0x8D	; 141
    7b64:	9f 4f       	sbci	r25, 0xFF	; 255
    7b66:	fc 01       	movw	r30, r24
    7b68:	60 81       	ld	r22, Z
    7b6a:	71 81       	ldd	r23, Z+1	; 0x01
    7b6c:	82 81       	ldd	r24, Z+2	; 0x02
    7b6e:	93 81       	ldd	r25, Z+3	; 0x03
    7b70:	20 e0       	ldi	r18, 0x00	; 0
    7b72:	30 e0       	ldi	r19, 0x00	; 0
    7b74:	40 e2       	ldi	r20, 0x20	; 32
    7b76:	51 e4       	ldi	r21, 0x41	; 65
    7b78:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7b7c:	dc 01       	movw	r26, r24
    7b7e:	cb 01       	movw	r24, r22
    7b80:	8e 01       	movw	r16, r28
    7b82:	05 58       	subi	r16, 0x85	; 133
    7b84:	1f 4f       	sbci	r17, 0xFF	; 255
    7b86:	bc 01       	movw	r22, r24
    7b88:	cd 01       	movw	r24, r26
    7b8a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7b8e:	dc 01       	movw	r26, r24
    7b90:	cb 01       	movw	r24, r22
    7b92:	f8 01       	movw	r30, r16
    7b94:	91 83       	std	Z+1, r25	; 0x01
    7b96:	80 83       	st	Z, r24
    7b98:	27 c0       	rjmp	.+78     	; 0x7be8 <pick_drop+0xcd6>
    7b9a:	ce 01       	movw	r24, r28
    7b9c:	83 58       	subi	r24, 0x83	; 131
    7b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba0:	20 e7       	ldi	r18, 0x70	; 112
    7ba2:	31 e0       	ldi	r19, 0x01	; 1
    7ba4:	fc 01       	movw	r30, r24
    7ba6:	31 83       	std	Z+1, r19	; 0x01
    7ba8:	20 83       	st	Z, r18
    7baa:	ce 01       	movw	r24, r28
    7bac:	83 58       	subi	r24, 0x83	; 131
    7bae:	9f 4f       	sbci	r25, 0xFF	; 255
    7bb0:	fc 01       	movw	r30, r24
    7bb2:	80 81       	ld	r24, Z
    7bb4:	91 81       	ldd	r25, Z+1	; 0x01
    7bb6:	8c 01       	movw	r16, r24
    7bb8:	c8 01       	movw	r24, r16
    7bba:	01 97       	sbiw	r24, 0x01	; 1
    7bbc:	f1 f7       	brne	.-4      	; 0x7bba <pick_drop+0xca8>
    7bbe:	8c 01       	movw	r16, r24
    7bc0:	ce 01       	movw	r24, r28
    7bc2:	83 58       	subi	r24, 0x83	; 131
    7bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    7bc6:	fc 01       	movw	r30, r24
    7bc8:	11 83       	std	Z+1, r17	; 0x01
    7bca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bcc:	ce 01       	movw	r24, r28
    7bce:	85 58       	subi	r24, 0x85	; 133
    7bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    7bd2:	9e 01       	movw	r18, r28
    7bd4:	25 58       	subi	r18, 0x85	; 133
    7bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    7bd8:	f9 01       	movw	r30, r18
    7bda:	20 81       	ld	r18, Z
    7bdc:	31 81       	ldd	r19, Z+1	; 0x01
    7bde:	21 50       	subi	r18, 0x01	; 1
    7be0:	30 40       	sbci	r19, 0x00	; 0
    7be2:	fc 01       	movw	r30, r24
    7be4:	31 83       	std	Z+1, r19	; 0x01
    7be6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7be8:	ce 01       	movw	r24, r28
    7bea:	85 58       	subi	r24, 0x85	; 133
    7bec:	9f 4f       	sbci	r25, 0xFF	; 255
    7bee:	fc 01       	movw	r30, r24
    7bf0:	80 81       	ld	r24, Z
    7bf2:	91 81       	ldd	r25, Z+1	; 0x01
    7bf4:	00 97       	sbiw	r24, 0x00	; 0
    7bf6:	89 f6       	brne	.-94     	; 0x7b9a <pick_drop+0xc88>
    7bf8:	1d c6       	rjmp	.+3130   	; 0x8834 <pick_drop+0x1922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7bfa:	8e 01       	movw	r16, r28
    7bfc:	05 58       	subi	r16, 0x85	; 133
    7bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    7c00:	ce 01       	movw	r24, r28
    7c02:	89 58       	subi	r24, 0x89	; 137
    7c04:	9f 4f       	sbci	r25, 0xFF	; 255
    7c06:	fc 01       	movw	r30, r24
    7c08:	60 81       	ld	r22, Z
    7c0a:	71 81       	ldd	r23, Z+1	; 0x01
    7c0c:	82 81       	ldd	r24, Z+2	; 0x02
    7c0e:	93 81       	ldd	r25, Z+3	; 0x03
    7c10:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7c14:	dc 01       	movw	r26, r24
    7c16:	cb 01       	movw	r24, r22
    7c18:	f8 01       	movw	r30, r16
    7c1a:	91 83       	std	Z+1, r25	; 0x01
    7c1c:	80 83       	st	Z, r24
    7c1e:	ce 01       	movw	r24, r28
    7c20:	81 58       	subi	r24, 0x81	; 129
    7c22:	9f 4f       	sbci	r25, 0xFF	; 255
    7c24:	9e 01       	movw	r18, r28
    7c26:	25 58       	subi	r18, 0x85	; 133
    7c28:	3f 4f       	sbci	r19, 0xFF	; 255
    7c2a:	f9 01       	movw	r30, r18
    7c2c:	20 81       	ld	r18, Z
    7c2e:	31 81       	ldd	r19, Z+1	; 0x01
    7c30:	fc 01       	movw	r30, r24
    7c32:	31 83       	std	Z+1, r19	; 0x01
    7c34:	20 83       	st	Z, r18
    7c36:	ce 01       	movw	r24, r28
    7c38:	81 58       	subi	r24, 0x81	; 129
    7c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c3c:	fc 01       	movw	r30, r24
    7c3e:	80 81       	ld	r24, Z
    7c40:	91 81       	ldd	r25, Z+1	; 0x01
    7c42:	8c 01       	movw	r16, r24
    7c44:	c8 01       	movw	r24, r16
    7c46:	01 97       	sbiw	r24, 0x01	; 1
    7c48:	f1 f7       	brne	.-4      	; 0x7c46 <pick_drop+0xd34>
    7c4a:	8c 01       	movw	r16, r24
    7c4c:	ce 01       	movw	r24, r28
    7c4e:	81 58       	subi	r24, 0x81	; 129
    7c50:	9f 4f       	sbci	r25, 0xFF	; 255
    7c52:	fc 01       	movw	r30, r24
    7c54:	11 83       	std	Z+1, r17	; 0x01
    7c56:	00 83       	st	Z, r16
    7c58:	ed c5       	rjmp	.+3034   	; 0x8834 <pick_drop+0x1922>
			_delay_ms(20);
			}
			else if(master_path[node-1] == 'N')
    7c5a:	80 91 63 03 	lds	r24, 0x0363
    7c5e:	90 91 64 03 	lds	r25, 0x0364
    7c62:	01 97       	sbiw	r24, 0x01	; 1
    7c64:	89 59       	subi	r24, 0x99	; 153
    7c66:	9c 4f       	sbci	r25, 0xFC	; 252
    7c68:	fc 01       	movw	r30, r24
    7c6a:	80 81       	ld	r24, Z
    7c6c:	8e 34       	cpi	r24, 0x4E	; 78
    7c6e:	09 f0       	breq	.+2      	; 0x7c72 <pick_drop+0xd60>
    7c70:	57 c3       	rjmp	.+1710   	; 0x8320 <pick_drop+0x140e>
			{
					//left_cycle();
					forward_mm(120);
    7c72:	88 e7       	ldi	r24, 0x78	; 120
    7c74:	90 e0       	ldi	r25, 0x00	; 0
    7c76:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7c7a:	9e 01       	movw	r18, r28
    7c7c:	2f 57       	subi	r18, 0x7F	; 127
    7c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    7c80:	80 e0       	ldi	r24, 0x00	; 0
    7c82:	90 e0       	ldi	r25, 0x00	; 0
    7c84:	a0 ea       	ldi	r26, 0xA0	; 160
    7c86:	b1 e4       	ldi	r27, 0x41	; 65
    7c88:	f9 01       	movw	r30, r18
    7c8a:	80 83       	st	Z, r24
    7c8c:	91 83       	std	Z+1, r25	; 0x01
    7c8e:	a2 83       	std	Z+2, r26	; 0x02
    7c90:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7c92:	8e 01       	movw	r16, r28
    7c94:	0b 57       	subi	r16, 0x7B	; 123
    7c96:	1f 4f       	sbci	r17, 0xFF	; 255
    7c98:	ce 01       	movw	r24, r28
    7c9a:	8f 57       	subi	r24, 0x7F	; 127
    7c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c9e:	fc 01       	movw	r30, r24
    7ca0:	60 81       	ld	r22, Z
    7ca2:	71 81       	ldd	r23, Z+1	; 0x01
    7ca4:	82 81       	ldd	r24, Z+2	; 0x02
    7ca6:	93 81       	ldd	r25, Z+3	; 0x03
    7ca8:	26 e6       	ldi	r18, 0x66	; 102
    7caa:	36 e6       	ldi	r19, 0x66	; 102
    7cac:	46 e6       	ldi	r20, 0x66	; 102
    7cae:	55 e4       	ldi	r21, 0x45	; 69
    7cb0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7cb4:	dc 01       	movw	r26, r24
    7cb6:	cb 01       	movw	r24, r22
    7cb8:	f8 01       	movw	r30, r16
    7cba:	80 83       	st	Z, r24
    7cbc:	91 83       	std	Z+1, r25	; 0x01
    7cbe:	a2 83       	std	Z+2, r26	; 0x02
    7cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7cc2:	ce 01       	movw	r24, r28
    7cc4:	8b 57       	subi	r24, 0x7B	; 123
    7cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    7cc8:	11 e0       	ldi	r17, 0x01	; 1
    7cca:	fc 01       	movw	r30, r24
    7ccc:	60 81       	ld	r22, Z
    7cce:	71 81       	ldd	r23, Z+1	; 0x01
    7cd0:	82 81       	ldd	r24, Z+2	; 0x02
    7cd2:	93 81       	ldd	r25, Z+3	; 0x03
    7cd4:	20 e0       	ldi	r18, 0x00	; 0
    7cd6:	30 e0       	ldi	r19, 0x00	; 0
    7cd8:	40 e8       	ldi	r20, 0x80	; 128
    7cda:	5f e3       	ldi	r21, 0x3F	; 63
    7cdc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    7ce0:	88 23       	and	r24, r24
    7ce2:	0c f0       	brlt	.+2      	; 0x7ce6 <pick_drop+0xdd4>
    7ce4:	10 e0       	ldi	r17, 0x00	; 0
    7ce6:	11 23       	and	r17, r17
    7ce8:	49 f0       	breq	.+18     	; 0x7cfc <pick_drop+0xdea>
		__ticks = 1;
    7cea:	ce 01       	movw	r24, r28
    7cec:	87 57       	subi	r24, 0x77	; 119
    7cee:	9f 4f       	sbci	r25, 0xFF	; 255
    7cf0:	21 e0       	ldi	r18, 0x01	; 1
    7cf2:	30 e0       	ldi	r19, 0x00	; 0
    7cf4:	fc 01       	movw	r30, r24
    7cf6:	31 83       	std	Z+1, r19	; 0x01
    7cf8:	20 83       	st	Z, r18
    7cfa:	74 c0       	rjmp	.+232    	; 0x7de4 <pick_drop+0xed2>
	else if (__tmp > 65535)
    7cfc:	ce 01       	movw	r24, r28
    7cfe:	8b 57       	subi	r24, 0x7B	; 123
    7d00:	9f 4f       	sbci	r25, 0xFF	; 255
    7d02:	11 e0       	ldi	r17, 0x01	; 1
    7d04:	fc 01       	movw	r30, r24
    7d06:	60 81       	ld	r22, Z
    7d08:	71 81       	ldd	r23, Z+1	; 0x01
    7d0a:	82 81       	ldd	r24, Z+2	; 0x02
    7d0c:	93 81       	ldd	r25, Z+3	; 0x03
    7d0e:	20 e0       	ldi	r18, 0x00	; 0
    7d10:	3f ef       	ldi	r19, 0xFF	; 255
    7d12:	4f e7       	ldi	r20, 0x7F	; 127
    7d14:	57 e4       	ldi	r21, 0x47	; 71
    7d16:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7d1a:	18 16       	cp	r1, r24
    7d1c:	0c f0       	brlt	.+2      	; 0x7d20 <pick_drop+0xe0e>
    7d1e:	10 e0       	ldi	r17, 0x00	; 0
    7d20:	11 23       	and	r17, r17
    7d22:	09 f4       	brne	.+2      	; 0x7d26 <pick_drop+0xe14>
    7d24:	4d c0       	rjmp	.+154    	; 0x7dc0 <pick_drop+0xeae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d26:	ce 01       	movw	r24, r28
    7d28:	8f 57       	subi	r24, 0x7F	; 127
    7d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d2c:	fc 01       	movw	r30, r24
    7d2e:	60 81       	ld	r22, Z
    7d30:	71 81       	ldd	r23, Z+1	; 0x01
    7d32:	82 81       	ldd	r24, Z+2	; 0x02
    7d34:	93 81       	ldd	r25, Z+3	; 0x03
    7d36:	20 e0       	ldi	r18, 0x00	; 0
    7d38:	30 e0       	ldi	r19, 0x00	; 0
    7d3a:	40 e2       	ldi	r20, 0x20	; 32
    7d3c:	51 e4       	ldi	r21, 0x41	; 65
    7d3e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7d42:	dc 01       	movw	r26, r24
    7d44:	cb 01       	movw	r24, r22
    7d46:	8e 01       	movw	r16, r28
    7d48:	07 57       	subi	r16, 0x77	; 119
    7d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    7d4c:	bc 01       	movw	r22, r24
    7d4e:	cd 01       	movw	r24, r26
    7d50:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7d54:	dc 01       	movw	r26, r24
    7d56:	cb 01       	movw	r24, r22
    7d58:	f8 01       	movw	r30, r16
    7d5a:	91 83       	std	Z+1, r25	; 0x01
    7d5c:	80 83       	st	Z, r24
    7d5e:	27 c0       	rjmp	.+78     	; 0x7dae <pick_drop+0xe9c>
    7d60:	ce 01       	movw	r24, r28
    7d62:	85 57       	subi	r24, 0x75	; 117
    7d64:	9f 4f       	sbci	r25, 0xFF	; 255
    7d66:	20 e7       	ldi	r18, 0x70	; 112
    7d68:	31 e0       	ldi	r19, 0x01	; 1
    7d6a:	fc 01       	movw	r30, r24
    7d6c:	31 83       	std	Z+1, r19	; 0x01
    7d6e:	20 83       	st	Z, r18
    7d70:	ce 01       	movw	r24, r28
    7d72:	85 57       	subi	r24, 0x75	; 117
    7d74:	9f 4f       	sbci	r25, 0xFF	; 255
    7d76:	fc 01       	movw	r30, r24
    7d78:	80 81       	ld	r24, Z
    7d7a:	91 81       	ldd	r25, Z+1	; 0x01
    7d7c:	8c 01       	movw	r16, r24
    7d7e:	c8 01       	movw	r24, r16
    7d80:	01 97       	sbiw	r24, 0x01	; 1
    7d82:	f1 f7       	brne	.-4      	; 0x7d80 <pick_drop+0xe6e>
    7d84:	8c 01       	movw	r16, r24
    7d86:	ce 01       	movw	r24, r28
    7d88:	85 57       	subi	r24, 0x75	; 117
    7d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d8c:	fc 01       	movw	r30, r24
    7d8e:	11 83       	std	Z+1, r17	; 0x01
    7d90:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d92:	ce 01       	movw	r24, r28
    7d94:	87 57       	subi	r24, 0x77	; 119
    7d96:	9f 4f       	sbci	r25, 0xFF	; 255
    7d98:	9e 01       	movw	r18, r28
    7d9a:	27 57       	subi	r18, 0x77	; 119
    7d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    7d9e:	f9 01       	movw	r30, r18
    7da0:	20 81       	ld	r18, Z
    7da2:	31 81       	ldd	r19, Z+1	; 0x01
    7da4:	21 50       	subi	r18, 0x01	; 1
    7da6:	30 40       	sbci	r19, 0x00	; 0
    7da8:	fc 01       	movw	r30, r24
    7daa:	31 83       	std	Z+1, r19	; 0x01
    7dac:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7dae:	ce 01       	movw	r24, r28
    7db0:	87 57       	subi	r24, 0x77	; 119
    7db2:	9f 4f       	sbci	r25, 0xFF	; 255
    7db4:	fc 01       	movw	r30, r24
    7db6:	80 81       	ld	r24, Z
    7db8:	91 81       	ldd	r25, Z+1	; 0x01
    7dba:	00 97       	sbiw	r24, 0x00	; 0
    7dbc:	89 f6       	brne	.-94     	; 0x7d60 <pick_drop+0xe4e>
    7dbe:	2f c0       	rjmp	.+94     	; 0x7e1e <pick_drop+0xf0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7dc0:	8e 01       	movw	r16, r28
    7dc2:	07 57       	subi	r16, 0x77	; 119
    7dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    7dc6:	ce 01       	movw	r24, r28
    7dc8:	8b 57       	subi	r24, 0x7B	; 123
    7dca:	9f 4f       	sbci	r25, 0xFF	; 255
    7dcc:	fc 01       	movw	r30, r24
    7dce:	60 81       	ld	r22, Z
    7dd0:	71 81       	ldd	r23, Z+1	; 0x01
    7dd2:	82 81       	ldd	r24, Z+2	; 0x02
    7dd4:	93 81       	ldd	r25, Z+3	; 0x03
    7dd6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7dda:	dc 01       	movw	r26, r24
    7ddc:	cb 01       	movw	r24, r22
    7dde:	f8 01       	movw	r30, r16
    7de0:	91 83       	std	Z+1, r25	; 0x01
    7de2:	80 83       	st	Z, r24
    7de4:	ce 01       	movw	r24, r28
    7de6:	83 57       	subi	r24, 0x73	; 115
    7de8:	9f 4f       	sbci	r25, 0xFF	; 255
    7dea:	9e 01       	movw	r18, r28
    7dec:	27 57       	subi	r18, 0x77	; 119
    7dee:	3f 4f       	sbci	r19, 0xFF	; 255
    7df0:	f9 01       	movw	r30, r18
    7df2:	20 81       	ld	r18, Z
    7df4:	31 81       	ldd	r19, Z+1	; 0x01
    7df6:	fc 01       	movw	r30, r24
    7df8:	31 83       	std	Z+1, r19	; 0x01
    7dfa:	20 83       	st	Z, r18
    7dfc:	ce 01       	movw	r24, r28
    7dfe:	83 57       	subi	r24, 0x73	; 115
    7e00:	9f 4f       	sbci	r25, 0xFF	; 255
    7e02:	fc 01       	movw	r30, r24
    7e04:	80 81       	ld	r24, Z
    7e06:	91 81       	ldd	r25, Z+1	; 0x01
    7e08:	8c 01       	movw	r16, r24
    7e0a:	c8 01       	movw	r24, r16
    7e0c:	01 97       	sbiw	r24, 0x01	; 1
    7e0e:	f1 f7       	brne	.-4      	; 0x7e0c <pick_drop+0xefa>
    7e10:	8c 01       	movw	r16, r24
    7e12:	ce 01       	movw	r24, r28
    7e14:	83 57       	subi	r24, 0x73	; 115
    7e16:	9f 4f       	sbci	r25, 0xFF	; 255
    7e18:	fc 01       	movw	r30, r24
    7e1a:	11 83       	std	Z+1, r17	; 0x01
    7e1c:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_left2();
    7e1e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    7e22:	9e 01       	movw	r18, r28
    7e24:	21 57       	subi	r18, 0x71	; 113
    7e26:	3f 4f       	sbci	r19, 0xFF	; 255
    7e28:	80 e0       	ldi	r24, 0x00	; 0
    7e2a:	90 e0       	ldi	r25, 0x00	; 0
    7e2c:	a8 e4       	ldi	r26, 0x48	; 72
    7e2e:	b2 e4       	ldi	r27, 0x42	; 66
    7e30:	f9 01       	movw	r30, r18
    7e32:	80 83       	st	Z, r24
    7e34:	91 83       	std	Z+1, r25	; 0x01
    7e36:	a2 83       	std	Z+2, r26	; 0x02
    7e38:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7e3a:	8e 01       	movw	r16, r28
    7e3c:	0d 56       	subi	r16, 0x6D	; 109
    7e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    7e40:	ce 01       	movw	r24, r28
    7e42:	81 57       	subi	r24, 0x71	; 113
    7e44:	9f 4f       	sbci	r25, 0xFF	; 255
    7e46:	fc 01       	movw	r30, r24
    7e48:	60 81       	ld	r22, Z
    7e4a:	71 81       	ldd	r23, Z+1	; 0x01
    7e4c:	82 81       	ldd	r24, Z+2	; 0x02
    7e4e:	93 81       	ldd	r25, Z+3	; 0x03
    7e50:	26 e6       	ldi	r18, 0x66	; 102
    7e52:	36 e6       	ldi	r19, 0x66	; 102
    7e54:	46 e6       	ldi	r20, 0x66	; 102
    7e56:	55 e4       	ldi	r21, 0x45	; 69
    7e58:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7e5c:	dc 01       	movw	r26, r24
    7e5e:	cb 01       	movw	r24, r22
    7e60:	f8 01       	movw	r30, r16
    7e62:	80 83       	st	Z, r24
    7e64:	91 83       	std	Z+1, r25	; 0x01
    7e66:	a2 83       	std	Z+2, r26	; 0x02
    7e68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7e6a:	ce 01       	movw	r24, r28
    7e6c:	8d 56       	subi	r24, 0x6D	; 109
    7e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e70:	11 e0       	ldi	r17, 0x01	; 1
    7e72:	fc 01       	movw	r30, r24
    7e74:	60 81       	ld	r22, Z
    7e76:	71 81       	ldd	r23, Z+1	; 0x01
    7e78:	82 81       	ldd	r24, Z+2	; 0x02
    7e7a:	93 81       	ldd	r25, Z+3	; 0x03
    7e7c:	20 e0       	ldi	r18, 0x00	; 0
    7e7e:	30 e0       	ldi	r19, 0x00	; 0
    7e80:	40 e8       	ldi	r20, 0x80	; 128
    7e82:	5f e3       	ldi	r21, 0x3F	; 63
    7e84:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    7e88:	88 23       	and	r24, r24
    7e8a:	0c f0       	brlt	.+2      	; 0x7e8e <pick_drop+0xf7c>
    7e8c:	10 e0       	ldi	r17, 0x00	; 0
    7e8e:	11 23       	and	r17, r17
    7e90:	49 f0       	breq	.+18     	; 0x7ea4 <pick_drop+0xf92>
		__ticks = 1;
    7e92:	ce 01       	movw	r24, r28
    7e94:	89 56       	subi	r24, 0x69	; 105
    7e96:	9f 4f       	sbci	r25, 0xFF	; 255
    7e98:	21 e0       	ldi	r18, 0x01	; 1
    7e9a:	30 e0       	ldi	r19, 0x00	; 0
    7e9c:	fc 01       	movw	r30, r24
    7e9e:	31 83       	std	Z+1, r19	; 0x01
    7ea0:	20 83       	st	Z, r18
    7ea2:	74 c0       	rjmp	.+232    	; 0x7f8c <pick_drop+0x107a>
	else if (__tmp > 65535)
    7ea4:	ce 01       	movw	r24, r28
    7ea6:	8d 56       	subi	r24, 0x6D	; 109
    7ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    7eaa:	11 e0       	ldi	r17, 0x01	; 1
    7eac:	fc 01       	movw	r30, r24
    7eae:	60 81       	ld	r22, Z
    7eb0:	71 81       	ldd	r23, Z+1	; 0x01
    7eb2:	82 81       	ldd	r24, Z+2	; 0x02
    7eb4:	93 81       	ldd	r25, Z+3	; 0x03
    7eb6:	20 e0       	ldi	r18, 0x00	; 0
    7eb8:	3f ef       	ldi	r19, 0xFF	; 255
    7eba:	4f e7       	ldi	r20, 0x7F	; 127
    7ebc:	57 e4       	ldi	r21, 0x47	; 71
    7ebe:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    7ec2:	18 16       	cp	r1, r24
    7ec4:	0c f0       	brlt	.+2      	; 0x7ec8 <pick_drop+0xfb6>
    7ec6:	10 e0       	ldi	r17, 0x00	; 0
    7ec8:	11 23       	and	r17, r17
    7eca:	09 f4       	brne	.+2      	; 0x7ece <pick_drop+0xfbc>
    7ecc:	4d c0       	rjmp	.+154    	; 0x7f68 <pick_drop+0x1056>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7ece:	ce 01       	movw	r24, r28
    7ed0:	81 57       	subi	r24, 0x71	; 113
    7ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ed4:	fc 01       	movw	r30, r24
    7ed6:	60 81       	ld	r22, Z
    7ed8:	71 81       	ldd	r23, Z+1	; 0x01
    7eda:	82 81       	ldd	r24, Z+2	; 0x02
    7edc:	93 81       	ldd	r25, Z+3	; 0x03
    7ede:	20 e0       	ldi	r18, 0x00	; 0
    7ee0:	30 e0       	ldi	r19, 0x00	; 0
    7ee2:	40 e2       	ldi	r20, 0x20	; 32
    7ee4:	51 e4       	ldi	r21, 0x41	; 65
    7ee6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    7eea:	dc 01       	movw	r26, r24
    7eec:	cb 01       	movw	r24, r22
    7eee:	8e 01       	movw	r16, r28
    7ef0:	09 56       	subi	r16, 0x69	; 105
    7ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    7ef4:	bc 01       	movw	r22, r24
    7ef6:	cd 01       	movw	r24, r26
    7ef8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7efc:	dc 01       	movw	r26, r24
    7efe:	cb 01       	movw	r24, r22
    7f00:	f8 01       	movw	r30, r16
    7f02:	91 83       	std	Z+1, r25	; 0x01
    7f04:	80 83       	st	Z, r24
    7f06:	27 c0       	rjmp	.+78     	; 0x7f56 <pick_drop+0x1044>
    7f08:	ce 01       	movw	r24, r28
    7f0a:	87 56       	subi	r24, 0x67	; 103
    7f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f0e:	20 e7       	ldi	r18, 0x70	; 112
    7f10:	31 e0       	ldi	r19, 0x01	; 1
    7f12:	fc 01       	movw	r30, r24
    7f14:	31 83       	std	Z+1, r19	; 0x01
    7f16:	20 83       	st	Z, r18
    7f18:	ce 01       	movw	r24, r28
    7f1a:	87 56       	subi	r24, 0x67	; 103
    7f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f1e:	fc 01       	movw	r30, r24
    7f20:	80 81       	ld	r24, Z
    7f22:	91 81       	ldd	r25, Z+1	; 0x01
    7f24:	8c 01       	movw	r16, r24
    7f26:	c8 01       	movw	r24, r16
    7f28:	01 97       	sbiw	r24, 0x01	; 1
    7f2a:	f1 f7       	brne	.-4      	; 0x7f28 <pick_drop+0x1016>
    7f2c:	8c 01       	movw	r16, r24
    7f2e:	ce 01       	movw	r24, r28
    7f30:	87 56       	subi	r24, 0x67	; 103
    7f32:	9f 4f       	sbci	r25, 0xFF	; 255
    7f34:	fc 01       	movw	r30, r24
    7f36:	11 83       	std	Z+1, r17	; 0x01
    7f38:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f3a:	ce 01       	movw	r24, r28
    7f3c:	89 56       	subi	r24, 0x69	; 105
    7f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f40:	9e 01       	movw	r18, r28
    7f42:	29 56       	subi	r18, 0x69	; 105
    7f44:	3f 4f       	sbci	r19, 0xFF	; 255
    7f46:	f9 01       	movw	r30, r18
    7f48:	20 81       	ld	r18, Z
    7f4a:	31 81       	ldd	r19, Z+1	; 0x01
    7f4c:	21 50       	subi	r18, 0x01	; 1
    7f4e:	30 40       	sbci	r19, 0x00	; 0
    7f50:	fc 01       	movw	r30, r24
    7f52:	31 83       	std	Z+1, r19	; 0x01
    7f54:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f56:	ce 01       	movw	r24, r28
    7f58:	89 56       	subi	r24, 0x69	; 105
    7f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    7f5c:	fc 01       	movw	r30, r24
    7f5e:	80 81       	ld	r24, Z
    7f60:	91 81       	ldd	r25, Z+1	; 0x01
    7f62:	00 97       	sbiw	r24, 0x00	; 0
    7f64:	89 f6       	brne	.-94     	; 0x7f08 <pick_drop+0xff6>
    7f66:	2f c0       	rjmp	.+94     	; 0x7fc6 <pick_drop+0x10b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f68:	8e 01       	movw	r16, r28
    7f6a:	09 56       	subi	r16, 0x69	; 105
    7f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f6e:	ce 01       	movw	r24, r28
    7f70:	8d 56       	subi	r24, 0x6D	; 109
    7f72:	9f 4f       	sbci	r25, 0xFF	; 255
    7f74:	fc 01       	movw	r30, r24
    7f76:	60 81       	ld	r22, Z
    7f78:	71 81       	ldd	r23, Z+1	; 0x01
    7f7a:	82 81       	ldd	r24, Z+2	; 0x02
    7f7c:	93 81       	ldd	r25, Z+3	; 0x03
    7f7e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    7f82:	dc 01       	movw	r26, r24
    7f84:	cb 01       	movw	r24, r22
    7f86:	f8 01       	movw	r30, r16
    7f88:	91 83       	std	Z+1, r25	; 0x01
    7f8a:	80 83       	st	Z, r24
    7f8c:	ce 01       	movw	r24, r28
    7f8e:	85 56       	subi	r24, 0x65	; 101
    7f90:	9f 4f       	sbci	r25, 0xFF	; 255
    7f92:	9e 01       	movw	r18, r28
    7f94:	29 56       	subi	r18, 0x69	; 105
    7f96:	3f 4f       	sbci	r19, 0xFF	; 255
    7f98:	f9 01       	movw	r30, r18
    7f9a:	20 81       	ld	r18, Z
    7f9c:	31 81       	ldd	r19, Z+1	; 0x01
    7f9e:	fc 01       	movw	r30, r24
    7fa0:	31 83       	std	Z+1, r19	; 0x01
    7fa2:	20 83       	st	Z, r18
    7fa4:	ce 01       	movw	r24, r28
    7fa6:	85 56       	subi	r24, 0x65	; 101
    7fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    7faa:	fc 01       	movw	r30, r24
    7fac:	80 81       	ld	r24, Z
    7fae:	91 81       	ldd	r25, Z+1	; 0x01
    7fb0:	8c 01       	movw	r16, r24
    7fb2:	c8 01       	movw	r24, r16
    7fb4:	01 97       	sbiw	r24, 0x01	; 1
    7fb6:	f1 f7       	brne	.-4      	; 0x7fb4 <pick_drop+0x10a2>
    7fb8:	8c 01       	movw	r16, r24
    7fba:	ce 01       	movw	r24, r28
    7fbc:	85 56       	subi	r24, 0x65	; 101
    7fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    7fc0:	fc 01       	movw	r30, r24
    7fc2:	11 83       	std	Z+1, r17	; 0x01
    7fc4:	00 83       	st	Z, r16
					_delay_ms(50);
					front();
    7fc6:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    7fca:	9e 01       	movw	r18, r28
    7fcc:	23 56       	subi	r18, 0x63	; 99
    7fce:	3f 4f       	sbci	r19, 0xFF	; 255
    7fd0:	80 e0       	ldi	r24, 0x00	; 0
    7fd2:	90 e0       	ldi	r25, 0x00	; 0
    7fd4:	a8 ec       	ldi	r26, 0xC8	; 200
    7fd6:	b2 e4       	ldi	r27, 0x42	; 66
    7fd8:	f9 01       	movw	r30, r18
    7fda:	80 83       	st	Z, r24
    7fdc:	91 83       	std	Z+1, r25	; 0x01
    7fde:	a2 83       	std	Z+2, r26	; 0x02
    7fe0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7fe2:	8e 01       	movw	r16, r28
    7fe4:	0f 55       	subi	r16, 0x5F	; 95
    7fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    7fe8:	ce 01       	movw	r24, r28
    7fea:	83 56       	subi	r24, 0x63	; 99
    7fec:	9f 4f       	sbci	r25, 0xFF	; 255
    7fee:	fc 01       	movw	r30, r24
    7ff0:	60 81       	ld	r22, Z
    7ff2:	71 81       	ldd	r23, Z+1	; 0x01
    7ff4:	82 81       	ldd	r24, Z+2	; 0x02
    7ff6:	93 81       	ldd	r25, Z+3	; 0x03
    7ff8:	26 e6       	ldi	r18, 0x66	; 102
    7ffa:	36 e6       	ldi	r19, 0x66	; 102
    7ffc:	46 e6       	ldi	r20, 0x66	; 102
    7ffe:	55 e4       	ldi	r21, 0x45	; 69
    8000:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8004:	dc 01       	movw	r26, r24
    8006:	cb 01       	movw	r24, r22
    8008:	f8 01       	movw	r30, r16
    800a:	80 83       	st	Z, r24
    800c:	91 83       	std	Z+1, r25	; 0x01
    800e:	a2 83       	std	Z+2, r26	; 0x02
    8010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8012:	ce 01       	movw	r24, r28
    8014:	8f 55       	subi	r24, 0x5F	; 95
    8016:	9f 4f       	sbci	r25, 0xFF	; 255
    8018:	11 e0       	ldi	r17, 0x01	; 1
    801a:	fc 01       	movw	r30, r24
    801c:	60 81       	ld	r22, Z
    801e:	71 81       	ldd	r23, Z+1	; 0x01
    8020:	82 81       	ldd	r24, Z+2	; 0x02
    8022:	93 81       	ldd	r25, Z+3	; 0x03
    8024:	20 e0       	ldi	r18, 0x00	; 0
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	40 e8       	ldi	r20, 0x80	; 128
    802a:	5f e3       	ldi	r21, 0x3F	; 63
    802c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    8030:	88 23       	and	r24, r24
    8032:	0c f0       	brlt	.+2      	; 0x8036 <pick_drop+0x1124>
    8034:	10 e0       	ldi	r17, 0x00	; 0
    8036:	11 23       	and	r17, r17
    8038:	49 f0       	breq	.+18     	; 0x804c <pick_drop+0x113a>
		__ticks = 1;
    803a:	ce 01       	movw	r24, r28
    803c:	8b 55       	subi	r24, 0x5B	; 91
    803e:	9f 4f       	sbci	r25, 0xFF	; 255
    8040:	21 e0       	ldi	r18, 0x01	; 1
    8042:	30 e0       	ldi	r19, 0x00	; 0
    8044:	fc 01       	movw	r30, r24
    8046:	31 83       	std	Z+1, r19	; 0x01
    8048:	20 83       	st	Z, r18
    804a:	74 c0       	rjmp	.+232    	; 0x8134 <pick_drop+0x1222>
	else if (__tmp > 65535)
    804c:	ce 01       	movw	r24, r28
    804e:	8f 55       	subi	r24, 0x5F	; 95
    8050:	9f 4f       	sbci	r25, 0xFF	; 255
    8052:	11 e0       	ldi	r17, 0x01	; 1
    8054:	fc 01       	movw	r30, r24
    8056:	60 81       	ld	r22, Z
    8058:	71 81       	ldd	r23, Z+1	; 0x01
    805a:	82 81       	ldd	r24, Z+2	; 0x02
    805c:	93 81       	ldd	r25, Z+3	; 0x03
    805e:	20 e0       	ldi	r18, 0x00	; 0
    8060:	3f ef       	ldi	r19, 0xFF	; 255
    8062:	4f e7       	ldi	r20, 0x7F	; 127
    8064:	57 e4       	ldi	r21, 0x47	; 71
    8066:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    806a:	18 16       	cp	r1, r24
    806c:	0c f0       	brlt	.+2      	; 0x8070 <pick_drop+0x115e>
    806e:	10 e0       	ldi	r17, 0x00	; 0
    8070:	11 23       	and	r17, r17
    8072:	09 f4       	brne	.+2      	; 0x8076 <pick_drop+0x1164>
    8074:	4d c0       	rjmp	.+154    	; 0x8110 <pick_drop+0x11fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8076:	ce 01       	movw	r24, r28
    8078:	83 56       	subi	r24, 0x63	; 99
    807a:	9f 4f       	sbci	r25, 0xFF	; 255
    807c:	fc 01       	movw	r30, r24
    807e:	60 81       	ld	r22, Z
    8080:	71 81       	ldd	r23, Z+1	; 0x01
    8082:	82 81       	ldd	r24, Z+2	; 0x02
    8084:	93 81       	ldd	r25, Z+3	; 0x03
    8086:	20 e0       	ldi	r18, 0x00	; 0
    8088:	30 e0       	ldi	r19, 0x00	; 0
    808a:	40 e2       	ldi	r20, 0x20	; 32
    808c:	51 e4       	ldi	r21, 0x41	; 65
    808e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8092:	dc 01       	movw	r26, r24
    8094:	cb 01       	movw	r24, r22
    8096:	8e 01       	movw	r16, r28
    8098:	0b 55       	subi	r16, 0x5B	; 91
    809a:	1f 4f       	sbci	r17, 0xFF	; 255
    809c:	bc 01       	movw	r22, r24
    809e:	cd 01       	movw	r24, r26
    80a0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    80a4:	dc 01       	movw	r26, r24
    80a6:	cb 01       	movw	r24, r22
    80a8:	f8 01       	movw	r30, r16
    80aa:	91 83       	std	Z+1, r25	; 0x01
    80ac:	80 83       	st	Z, r24
    80ae:	27 c0       	rjmp	.+78     	; 0x80fe <pick_drop+0x11ec>
    80b0:	ce 01       	movw	r24, r28
    80b2:	89 55       	subi	r24, 0x59	; 89
    80b4:	9f 4f       	sbci	r25, 0xFF	; 255
    80b6:	20 e7       	ldi	r18, 0x70	; 112
    80b8:	31 e0       	ldi	r19, 0x01	; 1
    80ba:	fc 01       	movw	r30, r24
    80bc:	31 83       	std	Z+1, r19	; 0x01
    80be:	20 83       	st	Z, r18
    80c0:	ce 01       	movw	r24, r28
    80c2:	89 55       	subi	r24, 0x59	; 89
    80c4:	9f 4f       	sbci	r25, 0xFF	; 255
    80c6:	fc 01       	movw	r30, r24
    80c8:	80 81       	ld	r24, Z
    80ca:	91 81       	ldd	r25, Z+1	; 0x01
    80cc:	8c 01       	movw	r16, r24
    80ce:	c8 01       	movw	r24, r16
    80d0:	01 97       	sbiw	r24, 0x01	; 1
    80d2:	f1 f7       	brne	.-4      	; 0x80d0 <pick_drop+0x11be>
    80d4:	8c 01       	movw	r16, r24
    80d6:	ce 01       	movw	r24, r28
    80d8:	89 55       	subi	r24, 0x59	; 89
    80da:	9f 4f       	sbci	r25, 0xFF	; 255
    80dc:	fc 01       	movw	r30, r24
    80de:	11 83       	std	Z+1, r17	; 0x01
    80e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80e2:	ce 01       	movw	r24, r28
    80e4:	8b 55       	subi	r24, 0x5B	; 91
    80e6:	9f 4f       	sbci	r25, 0xFF	; 255
    80e8:	9e 01       	movw	r18, r28
    80ea:	2b 55       	subi	r18, 0x5B	; 91
    80ec:	3f 4f       	sbci	r19, 0xFF	; 255
    80ee:	f9 01       	movw	r30, r18
    80f0:	20 81       	ld	r18, Z
    80f2:	31 81       	ldd	r19, Z+1	; 0x01
    80f4:	21 50       	subi	r18, 0x01	; 1
    80f6:	30 40       	sbci	r19, 0x00	; 0
    80f8:	fc 01       	movw	r30, r24
    80fa:	31 83       	std	Z+1, r19	; 0x01
    80fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80fe:	ce 01       	movw	r24, r28
    8100:	8b 55       	subi	r24, 0x5B	; 91
    8102:	9f 4f       	sbci	r25, 0xFF	; 255
    8104:	fc 01       	movw	r30, r24
    8106:	80 81       	ld	r24, Z
    8108:	91 81       	ldd	r25, Z+1	; 0x01
    810a:	00 97       	sbiw	r24, 0x00	; 0
    810c:	89 f6       	brne	.-94     	; 0x80b0 <pick_drop+0x119e>
    810e:	2f c0       	rjmp	.+94     	; 0x816e <pick_drop+0x125c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8110:	8e 01       	movw	r16, r28
    8112:	0b 55       	subi	r16, 0x5B	; 91
    8114:	1f 4f       	sbci	r17, 0xFF	; 255
    8116:	ce 01       	movw	r24, r28
    8118:	8f 55       	subi	r24, 0x5F	; 95
    811a:	9f 4f       	sbci	r25, 0xFF	; 255
    811c:	fc 01       	movw	r30, r24
    811e:	60 81       	ld	r22, Z
    8120:	71 81       	ldd	r23, Z+1	; 0x01
    8122:	82 81       	ldd	r24, Z+2	; 0x02
    8124:	93 81       	ldd	r25, Z+3	; 0x03
    8126:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    812a:	dc 01       	movw	r26, r24
    812c:	cb 01       	movw	r24, r22
    812e:	f8 01       	movw	r30, r16
    8130:	91 83       	std	Z+1, r25	; 0x01
    8132:	80 83       	st	Z, r24
    8134:	ce 01       	movw	r24, r28
    8136:	87 55       	subi	r24, 0x57	; 87
    8138:	9f 4f       	sbci	r25, 0xFF	; 255
    813a:	9e 01       	movw	r18, r28
    813c:	2b 55       	subi	r18, 0x5B	; 91
    813e:	3f 4f       	sbci	r19, 0xFF	; 255
    8140:	f9 01       	movw	r30, r18
    8142:	20 81       	ld	r18, Z
    8144:	31 81       	ldd	r19, Z+1	; 0x01
    8146:	fc 01       	movw	r30, r24
    8148:	31 83       	std	Z+1, r19	; 0x01
    814a:	20 83       	st	Z, r18
    814c:	ce 01       	movw	r24, r28
    814e:	87 55       	subi	r24, 0x57	; 87
    8150:	9f 4f       	sbci	r25, 0xFF	; 255
    8152:	fc 01       	movw	r30, r24
    8154:	80 81       	ld	r24, Z
    8156:	91 81       	ldd	r25, Z+1	; 0x01
    8158:	8c 01       	movw	r16, r24
    815a:	c8 01       	movw	r24, r16
    815c:	01 97       	sbiw	r24, 0x01	; 1
    815e:	f1 f7       	brne	.-4      	; 0x815c <pick_drop+0x124a>
    8160:	8c 01       	movw	r16, r24
    8162:	ce 01       	movw	r24, r28
    8164:	87 55       	subi	r24, 0x57	; 87
    8166:	9f 4f       	sbci	r25, 0xFF	; 255
    8168:	fc 01       	movw	r30, r24
    816a:	11 83       	std	Z+1, r17	; 0x01
    816c:	00 83       	st	Z, r16
					_delay_ms(100);
					correct_right();
    816e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
					back_mm(pdback);
    8172:	89 81       	ldd	r24, Y+1	; 0x01
    8174:	9a 81       	ldd	r25, Y+2	; 0x02
    8176:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    817a:	9e 01       	movw	r18, r28
    817c:	25 55       	subi	r18, 0x55	; 85
    817e:	3f 4f       	sbci	r19, 0xFF	; 255
    8180:	80 e0       	ldi	r24, 0x00	; 0
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	a0 ea       	ldi	r26, 0xA0	; 160
    8186:	b1 e4       	ldi	r27, 0x41	; 65
    8188:	f9 01       	movw	r30, r18
    818a:	80 83       	st	Z, r24
    818c:	91 83       	std	Z+1, r25	; 0x01
    818e:	a2 83       	std	Z+2, r26	; 0x02
    8190:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8192:	8e 01       	movw	r16, r28
    8194:	01 55       	subi	r16, 0x51	; 81
    8196:	1f 4f       	sbci	r17, 0xFF	; 255
    8198:	ce 01       	movw	r24, r28
    819a:	85 55       	subi	r24, 0x55	; 85
    819c:	9f 4f       	sbci	r25, 0xFF	; 255
    819e:	fc 01       	movw	r30, r24
    81a0:	60 81       	ld	r22, Z
    81a2:	71 81       	ldd	r23, Z+1	; 0x01
    81a4:	82 81       	ldd	r24, Z+2	; 0x02
    81a6:	93 81       	ldd	r25, Z+3	; 0x03
    81a8:	26 e6       	ldi	r18, 0x66	; 102
    81aa:	36 e6       	ldi	r19, 0x66	; 102
    81ac:	46 e6       	ldi	r20, 0x66	; 102
    81ae:	55 e4       	ldi	r21, 0x45	; 69
    81b0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    81b4:	dc 01       	movw	r26, r24
    81b6:	cb 01       	movw	r24, r22
    81b8:	f8 01       	movw	r30, r16
    81ba:	80 83       	st	Z, r24
    81bc:	91 83       	std	Z+1, r25	; 0x01
    81be:	a2 83       	std	Z+2, r26	; 0x02
    81c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    81c2:	ce 01       	movw	r24, r28
    81c4:	81 55       	subi	r24, 0x51	; 81
    81c6:	9f 4f       	sbci	r25, 0xFF	; 255
    81c8:	11 e0       	ldi	r17, 0x01	; 1
    81ca:	fc 01       	movw	r30, r24
    81cc:	60 81       	ld	r22, Z
    81ce:	71 81       	ldd	r23, Z+1	; 0x01
    81d0:	82 81       	ldd	r24, Z+2	; 0x02
    81d2:	93 81       	ldd	r25, Z+3	; 0x03
    81d4:	20 e0       	ldi	r18, 0x00	; 0
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	40 e8       	ldi	r20, 0x80	; 128
    81da:	5f e3       	ldi	r21, 0x3F	; 63
    81dc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    81e0:	88 23       	and	r24, r24
    81e2:	0c f0       	brlt	.+2      	; 0x81e6 <pick_drop+0x12d4>
    81e4:	10 e0       	ldi	r17, 0x00	; 0
    81e6:	11 23       	and	r17, r17
    81e8:	49 f0       	breq	.+18     	; 0x81fc <pick_drop+0x12ea>
		__ticks = 1;
    81ea:	ce 01       	movw	r24, r28
    81ec:	8d 54       	subi	r24, 0x4D	; 77
    81ee:	9f 4f       	sbci	r25, 0xFF	; 255
    81f0:	21 e0       	ldi	r18, 0x01	; 1
    81f2:	30 e0       	ldi	r19, 0x00	; 0
    81f4:	fc 01       	movw	r30, r24
    81f6:	31 83       	std	Z+1, r19	; 0x01
    81f8:	20 83       	st	Z, r18
    81fa:	74 c0       	rjmp	.+232    	; 0x82e4 <pick_drop+0x13d2>
	else if (__tmp > 65535)
    81fc:	ce 01       	movw	r24, r28
    81fe:	81 55       	subi	r24, 0x51	; 81
    8200:	9f 4f       	sbci	r25, 0xFF	; 255
    8202:	11 e0       	ldi	r17, 0x01	; 1
    8204:	fc 01       	movw	r30, r24
    8206:	60 81       	ld	r22, Z
    8208:	71 81       	ldd	r23, Z+1	; 0x01
    820a:	82 81       	ldd	r24, Z+2	; 0x02
    820c:	93 81       	ldd	r25, Z+3	; 0x03
    820e:	20 e0       	ldi	r18, 0x00	; 0
    8210:	3f ef       	ldi	r19, 0xFF	; 255
    8212:	4f e7       	ldi	r20, 0x7F	; 127
    8214:	57 e4       	ldi	r21, 0x47	; 71
    8216:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    821a:	18 16       	cp	r1, r24
    821c:	0c f0       	brlt	.+2      	; 0x8220 <pick_drop+0x130e>
    821e:	10 e0       	ldi	r17, 0x00	; 0
    8220:	11 23       	and	r17, r17
    8222:	09 f4       	brne	.+2      	; 0x8226 <pick_drop+0x1314>
    8224:	4d c0       	rjmp	.+154    	; 0x82c0 <pick_drop+0x13ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8226:	ce 01       	movw	r24, r28
    8228:	85 55       	subi	r24, 0x55	; 85
    822a:	9f 4f       	sbci	r25, 0xFF	; 255
    822c:	fc 01       	movw	r30, r24
    822e:	60 81       	ld	r22, Z
    8230:	71 81       	ldd	r23, Z+1	; 0x01
    8232:	82 81       	ldd	r24, Z+2	; 0x02
    8234:	93 81       	ldd	r25, Z+3	; 0x03
    8236:	20 e0       	ldi	r18, 0x00	; 0
    8238:	30 e0       	ldi	r19, 0x00	; 0
    823a:	40 e2       	ldi	r20, 0x20	; 32
    823c:	51 e4       	ldi	r21, 0x41	; 65
    823e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8242:	dc 01       	movw	r26, r24
    8244:	cb 01       	movw	r24, r22
    8246:	8e 01       	movw	r16, r28
    8248:	0d 54       	subi	r16, 0x4D	; 77
    824a:	1f 4f       	sbci	r17, 0xFF	; 255
    824c:	bc 01       	movw	r22, r24
    824e:	cd 01       	movw	r24, r26
    8250:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8254:	dc 01       	movw	r26, r24
    8256:	cb 01       	movw	r24, r22
    8258:	f8 01       	movw	r30, r16
    825a:	91 83       	std	Z+1, r25	; 0x01
    825c:	80 83       	st	Z, r24
    825e:	27 c0       	rjmp	.+78     	; 0x82ae <pick_drop+0x139c>
    8260:	ce 01       	movw	r24, r28
    8262:	8b 54       	subi	r24, 0x4B	; 75
    8264:	9f 4f       	sbci	r25, 0xFF	; 255
    8266:	20 e7       	ldi	r18, 0x70	; 112
    8268:	31 e0       	ldi	r19, 0x01	; 1
    826a:	fc 01       	movw	r30, r24
    826c:	31 83       	std	Z+1, r19	; 0x01
    826e:	20 83       	st	Z, r18
    8270:	ce 01       	movw	r24, r28
    8272:	8b 54       	subi	r24, 0x4B	; 75
    8274:	9f 4f       	sbci	r25, 0xFF	; 255
    8276:	fc 01       	movw	r30, r24
    8278:	80 81       	ld	r24, Z
    827a:	91 81       	ldd	r25, Z+1	; 0x01
    827c:	8c 01       	movw	r16, r24
    827e:	c8 01       	movw	r24, r16
    8280:	01 97       	sbiw	r24, 0x01	; 1
    8282:	f1 f7       	brne	.-4      	; 0x8280 <pick_drop+0x136e>
    8284:	8c 01       	movw	r16, r24
    8286:	ce 01       	movw	r24, r28
    8288:	8b 54       	subi	r24, 0x4B	; 75
    828a:	9f 4f       	sbci	r25, 0xFF	; 255
    828c:	fc 01       	movw	r30, r24
    828e:	11 83       	std	Z+1, r17	; 0x01
    8290:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8292:	ce 01       	movw	r24, r28
    8294:	8d 54       	subi	r24, 0x4D	; 77
    8296:	9f 4f       	sbci	r25, 0xFF	; 255
    8298:	9e 01       	movw	r18, r28
    829a:	2d 54       	subi	r18, 0x4D	; 77
    829c:	3f 4f       	sbci	r19, 0xFF	; 255
    829e:	f9 01       	movw	r30, r18
    82a0:	20 81       	ld	r18, Z
    82a2:	31 81       	ldd	r19, Z+1	; 0x01
    82a4:	21 50       	subi	r18, 0x01	; 1
    82a6:	30 40       	sbci	r19, 0x00	; 0
    82a8:	fc 01       	movw	r30, r24
    82aa:	31 83       	std	Z+1, r19	; 0x01
    82ac:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    82ae:	ce 01       	movw	r24, r28
    82b0:	8d 54       	subi	r24, 0x4D	; 77
    82b2:	9f 4f       	sbci	r25, 0xFF	; 255
    82b4:	fc 01       	movw	r30, r24
    82b6:	80 81       	ld	r24, Z
    82b8:	91 81       	ldd	r25, Z+1	; 0x01
    82ba:	00 97       	sbiw	r24, 0x00	; 0
    82bc:	89 f6       	brne	.-94     	; 0x8260 <pick_drop+0x134e>
    82be:	ba c2       	rjmp	.+1396   	; 0x8834 <pick_drop+0x1922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    82c0:	8e 01       	movw	r16, r28
    82c2:	0d 54       	subi	r16, 0x4D	; 77
    82c4:	1f 4f       	sbci	r17, 0xFF	; 255
    82c6:	ce 01       	movw	r24, r28
    82c8:	81 55       	subi	r24, 0x51	; 81
    82ca:	9f 4f       	sbci	r25, 0xFF	; 255
    82cc:	fc 01       	movw	r30, r24
    82ce:	60 81       	ld	r22, Z
    82d0:	71 81       	ldd	r23, Z+1	; 0x01
    82d2:	82 81       	ldd	r24, Z+2	; 0x02
    82d4:	93 81       	ldd	r25, Z+3	; 0x03
    82d6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    82da:	dc 01       	movw	r26, r24
    82dc:	cb 01       	movw	r24, r22
    82de:	f8 01       	movw	r30, r16
    82e0:	91 83       	std	Z+1, r25	; 0x01
    82e2:	80 83       	st	Z, r24
    82e4:	ce 01       	movw	r24, r28
    82e6:	89 54       	subi	r24, 0x49	; 73
    82e8:	9f 4f       	sbci	r25, 0xFF	; 255
    82ea:	9e 01       	movw	r18, r28
    82ec:	2d 54       	subi	r18, 0x4D	; 77
    82ee:	3f 4f       	sbci	r19, 0xFF	; 255
    82f0:	f9 01       	movw	r30, r18
    82f2:	20 81       	ld	r18, Z
    82f4:	31 81       	ldd	r19, Z+1	; 0x01
    82f6:	fc 01       	movw	r30, r24
    82f8:	31 83       	std	Z+1, r19	; 0x01
    82fa:	20 83       	st	Z, r18
    82fc:	ce 01       	movw	r24, r28
    82fe:	89 54       	subi	r24, 0x49	; 73
    8300:	9f 4f       	sbci	r25, 0xFF	; 255
    8302:	fc 01       	movw	r30, r24
    8304:	80 81       	ld	r24, Z
    8306:	91 81       	ldd	r25, Z+1	; 0x01
    8308:	8c 01       	movw	r16, r24
    830a:	c8 01       	movw	r24, r16
    830c:	01 97       	sbiw	r24, 0x01	; 1
    830e:	f1 f7       	brne	.-4      	; 0x830c <pick_drop+0x13fa>
    8310:	8c 01       	movw	r16, r24
    8312:	ce 01       	movw	r24, r28
    8314:	89 54       	subi	r24, 0x49	; 73
    8316:	9f 4f       	sbci	r25, 0xFF	; 255
    8318:	fc 01       	movw	r30, r24
    831a:	11 83       	std	Z+1, r17	; 0x01
    831c:	00 83       	st	Z, r16
    831e:	8a c2       	rjmp	.+1300   	; 0x8834 <pick_drop+0x1922>
					_delay_ms(20);
				}
				else if(master_path[node-1] == 'R')
    8320:	80 91 63 03 	lds	r24, 0x0363
    8324:	90 91 64 03 	lds	r25, 0x0364
    8328:	01 97       	sbiw	r24, 0x01	; 1
    832a:	89 59       	subi	r24, 0x99	; 153
    832c:	9c 4f       	sbci	r25, 0xFC	; 252
    832e:	fc 01       	movw	r30, r24
    8330:	80 81       	ld	r24, Z
    8332:	82 35       	cpi	r24, 0x52	; 82
    8334:	09 f0       	breq	.+2      	; 0x8338 <pick_drop+0x1426>
    8336:	7e c2       	rjmp	.+1276   	; 0x8834 <pick_drop+0x1922>
    8338:	9e 01       	movw	r18, r28
    833a:	27 54       	subi	r18, 0x47	; 71
    833c:	3f 4f       	sbci	r19, 0xFF	; 255
    833e:	80 e0       	ldi	r24, 0x00	; 0
    8340:	90 e0       	ldi	r25, 0x00	; 0
    8342:	a8 e4       	ldi	r26, 0x48	; 72
    8344:	b2 e4       	ldi	r27, 0x42	; 66
    8346:	f9 01       	movw	r30, r18
    8348:	80 83       	st	Z, r24
    834a:	91 83       	std	Z+1, r25	; 0x01
    834c:	a2 83       	std	Z+2, r26	; 0x02
    834e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8350:	8e 01       	movw	r16, r28
    8352:	03 54       	subi	r16, 0x43	; 67
    8354:	1f 4f       	sbci	r17, 0xFF	; 255
    8356:	ce 01       	movw	r24, r28
    8358:	87 54       	subi	r24, 0x47	; 71
    835a:	9f 4f       	sbci	r25, 0xFF	; 255
    835c:	fc 01       	movw	r30, r24
    835e:	60 81       	ld	r22, Z
    8360:	71 81       	ldd	r23, Z+1	; 0x01
    8362:	82 81       	ldd	r24, Z+2	; 0x02
    8364:	93 81       	ldd	r25, Z+3	; 0x03
    8366:	26 e6       	ldi	r18, 0x66	; 102
    8368:	36 e6       	ldi	r19, 0x66	; 102
    836a:	46 e6       	ldi	r20, 0x66	; 102
    836c:	55 e4       	ldi	r21, 0x45	; 69
    836e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8372:	dc 01       	movw	r26, r24
    8374:	cb 01       	movw	r24, r22
    8376:	f8 01       	movw	r30, r16
    8378:	80 83       	st	Z, r24
    837a:	91 83       	std	Z+1, r25	; 0x01
    837c:	a2 83       	std	Z+2, r26	; 0x02
    837e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8380:	ce 01       	movw	r24, r28
    8382:	83 54       	subi	r24, 0x43	; 67
    8384:	9f 4f       	sbci	r25, 0xFF	; 255
    8386:	11 e0       	ldi	r17, 0x01	; 1
    8388:	fc 01       	movw	r30, r24
    838a:	60 81       	ld	r22, Z
    838c:	71 81       	ldd	r23, Z+1	; 0x01
    838e:	82 81       	ldd	r24, Z+2	; 0x02
    8390:	93 81       	ldd	r25, Z+3	; 0x03
    8392:	20 e0       	ldi	r18, 0x00	; 0
    8394:	30 e0       	ldi	r19, 0x00	; 0
    8396:	40 e8       	ldi	r20, 0x80	; 128
    8398:	5f e3       	ldi	r21, 0x3F	; 63
    839a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    839e:	88 23       	and	r24, r24
    83a0:	0c f0       	brlt	.+2      	; 0x83a4 <pick_drop+0x1492>
    83a2:	10 e0       	ldi	r17, 0x00	; 0
    83a4:	11 23       	and	r17, r17
    83a6:	49 f0       	breq	.+18     	; 0x83ba <pick_drop+0x14a8>
		__ticks = 1;
    83a8:	ce 01       	movw	r24, r28
    83aa:	8f 53       	subi	r24, 0x3F	; 63
    83ac:	9f 4f       	sbci	r25, 0xFF	; 255
    83ae:	21 e0       	ldi	r18, 0x01	; 1
    83b0:	30 e0       	ldi	r19, 0x00	; 0
    83b2:	fc 01       	movw	r30, r24
    83b4:	31 83       	std	Z+1, r19	; 0x01
    83b6:	20 83       	st	Z, r18
    83b8:	74 c0       	rjmp	.+232    	; 0x84a2 <pick_drop+0x1590>
	else if (__tmp > 65535)
    83ba:	ce 01       	movw	r24, r28
    83bc:	83 54       	subi	r24, 0x43	; 67
    83be:	9f 4f       	sbci	r25, 0xFF	; 255
    83c0:	11 e0       	ldi	r17, 0x01	; 1
    83c2:	fc 01       	movw	r30, r24
    83c4:	60 81       	ld	r22, Z
    83c6:	71 81       	ldd	r23, Z+1	; 0x01
    83c8:	82 81       	ldd	r24, Z+2	; 0x02
    83ca:	93 81       	ldd	r25, Z+3	; 0x03
    83cc:	20 e0       	ldi	r18, 0x00	; 0
    83ce:	3f ef       	ldi	r19, 0xFF	; 255
    83d0:	4f e7       	ldi	r20, 0x7F	; 127
    83d2:	57 e4       	ldi	r21, 0x47	; 71
    83d4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    83d8:	18 16       	cp	r1, r24
    83da:	0c f0       	brlt	.+2      	; 0x83de <pick_drop+0x14cc>
    83dc:	10 e0       	ldi	r17, 0x00	; 0
    83de:	11 23       	and	r17, r17
    83e0:	09 f4       	brne	.+2      	; 0x83e4 <pick_drop+0x14d2>
    83e2:	4d c0       	rjmp	.+154    	; 0x847e <pick_drop+0x156c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    83e4:	ce 01       	movw	r24, r28
    83e6:	87 54       	subi	r24, 0x47	; 71
    83e8:	9f 4f       	sbci	r25, 0xFF	; 255
    83ea:	fc 01       	movw	r30, r24
    83ec:	60 81       	ld	r22, Z
    83ee:	71 81       	ldd	r23, Z+1	; 0x01
    83f0:	82 81       	ldd	r24, Z+2	; 0x02
    83f2:	93 81       	ldd	r25, Z+3	; 0x03
    83f4:	20 e0       	ldi	r18, 0x00	; 0
    83f6:	30 e0       	ldi	r19, 0x00	; 0
    83f8:	40 e2       	ldi	r20, 0x20	; 32
    83fa:	51 e4       	ldi	r21, 0x41	; 65
    83fc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8400:	dc 01       	movw	r26, r24
    8402:	cb 01       	movw	r24, r22
    8404:	8e 01       	movw	r16, r28
    8406:	0f 53       	subi	r16, 0x3F	; 63
    8408:	1f 4f       	sbci	r17, 0xFF	; 255
    840a:	bc 01       	movw	r22, r24
    840c:	cd 01       	movw	r24, r26
    840e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8412:	dc 01       	movw	r26, r24
    8414:	cb 01       	movw	r24, r22
    8416:	f8 01       	movw	r30, r16
    8418:	91 83       	std	Z+1, r25	; 0x01
    841a:	80 83       	st	Z, r24
    841c:	27 c0       	rjmp	.+78     	; 0x846c <pick_drop+0x155a>
    841e:	ce 01       	movw	r24, r28
    8420:	8d 53       	subi	r24, 0x3D	; 61
    8422:	9f 4f       	sbci	r25, 0xFF	; 255
    8424:	20 e7       	ldi	r18, 0x70	; 112
    8426:	31 e0       	ldi	r19, 0x01	; 1
    8428:	fc 01       	movw	r30, r24
    842a:	31 83       	std	Z+1, r19	; 0x01
    842c:	20 83       	st	Z, r18
    842e:	ce 01       	movw	r24, r28
    8430:	8d 53       	subi	r24, 0x3D	; 61
    8432:	9f 4f       	sbci	r25, 0xFF	; 255
    8434:	fc 01       	movw	r30, r24
    8436:	80 81       	ld	r24, Z
    8438:	91 81       	ldd	r25, Z+1	; 0x01
    843a:	8c 01       	movw	r16, r24
    843c:	c8 01       	movw	r24, r16
    843e:	01 97       	sbiw	r24, 0x01	; 1
    8440:	f1 f7       	brne	.-4      	; 0x843e <pick_drop+0x152c>
    8442:	8c 01       	movw	r16, r24
    8444:	ce 01       	movw	r24, r28
    8446:	8d 53       	subi	r24, 0x3D	; 61
    8448:	9f 4f       	sbci	r25, 0xFF	; 255
    844a:	fc 01       	movw	r30, r24
    844c:	11 83       	std	Z+1, r17	; 0x01
    844e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8450:	ce 01       	movw	r24, r28
    8452:	8f 53       	subi	r24, 0x3F	; 63
    8454:	9f 4f       	sbci	r25, 0xFF	; 255
    8456:	9e 01       	movw	r18, r28
    8458:	2f 53       	subi	r18, 0x3F	; 63
    845a:	3f 4f       	sbci	r19, 0xFF	; 255
    845c:	f9 01       	movw	r30, r18
    845e:	20 81       	ld	r18, Z
    8460:	31 81       	ldd	r19, Z+1	; 0x01
    8462:	21 50       	subi	r18, 0x01	; 1
    8464:	30 40       	sbci	r19, 0x00	; 0
    8466:	fc 01       	movw	r30, r24
    8468:	31 83       	std	Z+1, r19	; 0x01
    846a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    846c:	ce 01       	movw	r24, r28
    846e:	8f 53       	subi	r24, 0x3F	; 63
    8470:	9f 4f       	sbci	r25, 0xFF	; 255
    8472:	fc 01       	movw	r30, r24
    8474:	80 81       	ld	r24, Z
    8476:	91 81       	ldd	r25, Z+1	; 0x01
    8478:	00 97       	sbiw	r24, 0x00	; 0
    847a:	89 f6       	brne	.-94     	; 0x841e <pick_drop+0x150c>
    847c:	2f c0       	rjmp	.+94     	; 0x84dc <pick_drop+0x15ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    847e:	8e 01       	movw	r16, r28
    8480:	0f 53       	subi	r16, 0x3F	; 63
    8482:	1f 4f       	sbci	r17, 0xFF	; 255
    8484:	ce 01       	movw	r24, r28
    8486:	83 54       	subi	r24, 0x43	; 67
    8488:	9f 4f       	sbci	r25, 0xFF	; 255
    848a:	fc 01       	movw	r30, r24
    848c:	60 81       	ld	r22, Z
    848e:	71 81       	ldd	r23, Z+1	; 0x01
    8490:	82 81       	ldd	r24, Z+2	; 0x02
    8492:	93 81       	ldd	r25, Z+3	; 0x03
    8494:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8498:	dc 01       	movw	r26, r24
    849a:	cb 01       	movw	r24, r22
    849c:	f8 01       	movw	r30, r16
    849e:	91 83       	std	Z+1, r25	; 0x01
    84a0:	80 83       	st	Z, r24
    84a2:	ce 01       	movw	r24, r28
    84a4:	8b 53       	subi	r24, 0x3B	; 59
    84a6:	9f 4f       	sbci	r25, 0xFF	; 255
    84a8:	9e 01       	movw	r18, r28
    84aa:	2f 53       	subi	r18, 0x3F	; 63
    84ac:	3f 4f       	sbci	r19, 0xFF	; 255
    84ae:	f9 01       	movw	r30, r18
    84b0:	20 81       	ld	r18, Z
    84b2:	31 81       	ldd	r19, Z+1	; 0x01
    84b4:	fc 01       	movw	r30, r24
    84b6:	31 83       	std	Z+1, r19	; 0x01
    84b8:	20 83       	st	Z, r18
    84ba:	ce 01       	movw	r24, r28
    84bc:	8b 53       	subi	r24, 0x3B	; 59
    84be:	9f 4f       	sbci	r25, 0xFF	; 255
    84c0:	fc 01       	movw	r30, r24
    84c2:	80 81       	ld	r24, Z
    84c4:	91 81       	ldd	r25, Z+1	; 0x01
    84c6:	8c 01       	movw	r16, r24
    84c8:	c8 01       	movw	r24, r16
    84ca:	01 97       	sbiw	r24, 0x01	; 1
    84cc:	f1 f7       	brne	.-4      	; 0x84ca <pick_drop+0x15b8>
    84ce:	8c 01       	movw	r16, r24
    84d0:	ce 01       	movw	r24, r28
    84d2:	8b 53       	subi	r24, 0x3B	; 59
    84d4:	9f 4f       	sbci	r25, 0xFF	; 255
    84d6:	fc 01       	movw	r30, r24
    84d8:	11 83       	std	Z+1, r17	; 0x01
    84da:	00 83       	st	Z, r16
				{
					//spl_left2();
					_delay_ms(50);
					front();
    84dc:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    84e0:	9e 01       	movw	r18, r28
    84e2:	29 53       	subi	r18, 0x39	; 57
    84e4:	3f 4f       	sbci	r19, 0xFF	; 255
    84e6:	80 e0       	ldi	r24, 0x00	; 0
    84e8:	90 e0       	ldi	r25, 0x00	; 0
    84ea:	a8 ec       	ldi	r26, 0xC8	; 200
    84ec:	b2 e4       	ldi	r27, 0x42	; 66
    84ee:	f9 01       	movw	r30, r18
    84f0:	80 83       	st	Z, r24
    84f2:	91 83       	std	Z+1, r25	; 0x01
    84f4:	a2 83       	std	Z+2, r26	; 0x02
    84f6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    84f8:	8e 01       	movw	r16, r28
    84fa:	05 53       	subi	r16, 0x35	; 53
    84fc:	1f 4f       	sbci	r17, 0xFF	; 255
    84fe:	ce 01       	movw	r24, r28
    8500:	89 53       	subi	r24, 0x39	; 57
    8502:	9f 4f       	sbci	r25, 0xFF	; 255
    8504:	fc 01       	movw	r30, r24
    8506:	60 81       	ld	r22, Z
    8508:	71 81       	ldd	r23, Z+1	; 0x01
    850a:	82 81       	ldd	r24, Z+2	; 0x02
    850c:	93 81       	ldd	r25, Z+3	; 0x03
    850e:	26 e6       	ldi	r18, 0x66	; 102
    8510:	36 e6       	ldi	r19, 0x66	; 102
    8512:	46 e6       	ldi	r20, 0x66	; 102
    8514:	55 e4       	ldi	r21, 0x45	; 69
    8516:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    851a:	dc 01       	movw	r26, r24
    851c:	cb 01       	movw	r24, r22
    851e:	f8 01       	movw	r30, r16
    8520:	80 83       	st	Z, r24
    8522:	91 83       	std	Z+1, r25	; 0x01
    8524:	a2 83       	std	Z+2, r26	; 0x02
    8526:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8528:	ce 01       	movw	r24, r28
    852a:	85 53       	subi	r24, 0x35	; 53
    852c:	9f 4f       	sbci	r25, 0xFF	; 255
    852e:	11 e0       	ldi	r17, 0x01	; 1
    8530:	fc 01       	movw	r30, r24
    8532:	60 81       	ld	r22, Z
    8534:	71 81       	ldd	r23, Z+1	; 0x01
    8536:	82 81       	ldd	r24, Z+2	; 0x02
    8538:	93 81       	ldd	r25, Z+3	; 0x03
    853a:	20 e0       	ldi	r18, 0x00	; 0
    853c:	30 e0       	ldi	r19, 0x00	; 0
    853e:	40 e8       	ldi	r20, 0x80	; 128
    8540:	5f e3       	ldi	r21, 0x3F	; 63
    8542:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    8546:	88 23       	and	r24, r24
    8548:	0c f0       	brlt	.+2      	; 0x854c <pick_drop+0x163a>
    854a:	10 e0       	ldi	r17, 0x00	; 0
    854c:	11 23       	and	r17, r17
    854e:	49 f0       	breq	.+18     	; 0x8562 <pick_drop+0x1650>
		__ticks = 1;
    8550:	ce 01       	movw	r24, r28
    8552:	81 53       	subi	r24, 0x31	; 49
    8554:	9f 4f       	sbci	r25, 0xFF	; 255
    8556:	21 e0       	ldi	r18, 0x01	; 1
    8558:	30 e0       	ldi	r19, 0x00	; 0
    855a:	fc 01       	movw	r30, r24
    855c:	31 83       	std	Z+1, r19	; 0x01
    855e:	20 83       	st	Z, r18
    8560:	74 c0       	rjmp	.+232    	; 0x864a <pick_drop+0x1738>
	else if (__tmp > 65535)
    8562:	ce 01       	movw	r24, r28
    8564:	85 53       	subi	r24, 0x35	; 53
    8566:	9f 4f       	sbci	r25, 0xFF	; 255
    8568:	11 e0       	ldi	r17, 0x01	; 1
    856a:	fc 01       	movw	r30, r24
    856c:	60 81       	ld	r22, Z
    856e:	71 81       	ldd	r23, Z+1	; 0x01
    8570:	82 81       	ldd	r24, Z+2	; 0x02
    8572:	93 81       	ldd	r25, Z+3	; 0x03
    8574:	20 e0       	ldi	r18, 0x00	; 0
    8576:	3f ef       	ldi	r19, 0xFF	; 255
    8578:	4f e7       	ldi	r20, 0x7F	; 127
    857a:	57 e4       	ldi	r21, 0x47	; 71
    857c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8580:	18 16       	cp	r1, r24
    8582:	0c f0       	brlt	.+2      	; 0x8586 <pick_drop+0x1674>
    8584:	10 e0       	ldi	r17, 0x00	; 0
    8586:	11 23       	and	r17, r17
    8588:	09 f4       	brne	.+2      	; 0x858c <pick_drop+0x167a>
    858a:	4d c0       	rjmp	.+154    	; 0x8626 <pick_drop+0x1714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    858c:	ce 01       	movw	r24, r28
    858e:	89 53       	subi	r24, 0x39	; 57
    8590:	9f 4f       	sbci	r25, 0xFF	; 255
    8592:	fc 01       	movw	r30, r24
    8594:	60 81       	ld	r22, Z
    8596:	71 81       	ldd	r23, Z+1	; 0x01
    8598:	82 81       	ldd	r24, Z+2	; 0x02
    859a:	93 81       	ldd	r25, Z+3	; 0x03
    859c:	20 e0       	ldi	r18, 0x00	; 0
    859e:	30 e0       	ldi	r19, 0x00	; 0
    85a0:	40 e2       	ldi	r20, 0x20	; 32
    85a2:	51 e4       	ldi	r21, 0x41	; 65
    85a4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    85a8:	dc 01       	movw	r26, r24
    85aa:	cb 01       	movw	r24, r22
    85ac:	8e 01       	movw	r16, r28
    85ae:	01 53       	subi	r16, 0x31	; 49
    85b0:	1f 4f       	sbci	r17, 0xFF	; 255
    85b2:	bc 01       	movw	r22, r24
    85b4:	cd 01       	movw	r24, r26
    85b6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    85ba:	dc 01       	movw	r26, r24
    85bc:	cb 01       	movw	r24, r22
    85be:	f8 01       	movw	r30, r16
    85c0:	91 83       	std	Z+1, r25	; 0x01
    85c2:	80 83       	st	Z, r24
    85c4:	27 c0       	rjmp	.+78     	; 0x8614 <pick_drop+0x1702>
    85c6:	ce 01       	movw	r24, r28
    85c8:	8f 52       	subi	r24, 0x2F	; 47
    85ca:	9f 4f       	sbci	r25, 0xFF	; 255
    85cc:	20 e7       	ldi	r18, 0x70	; 112
    85ce:	31 e0       	ldi	r19, 0x01	; 1
    85d0:	fc 01       	movw	r30, r24
    85d2:	31 83       	std	Z+1, r19	; 0x01
    85d4:	20 83       	st	Z, r18
    85d6:	ce 01       	movw	r24, r28
    85d8:	8f 52       	subi	r24, 0x2F	; 47
    85da:	9f 4f       	sbci	r25, 0xFF	; 255
    85dc:	fc 01       	movw	r30, r24
    85de:	80 81       	ld	r24, Z
    85e0:	91 81       	ldd	r25, Z+1	; 0x01
    85e2:	8c 01       	movw	r16, r24
    85e4:	c8 01       	movw	r24, r16
    85e6:	01 97       	sbiw	r24, 0x01	; 1
    85e8:	f1 f7       	brne	.-4      	; 0x85e6 <pick_drop+0x16d4>
    85ea:	8c 01       	movw	r16, r24
    85ec:	ce 01       	movw	r24, r28
    85ee:	8f 52       	subi	r24, 0x2F	; 47
    85f0:	9f 4f       	sbci	r25, 0xFF	; 255
    85f2:	fc 01       	movw	r30, r24
    85f4:	11 83       	std	Z+1, r17	; 0x01
    85f6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    85f8:	ce 01       	movw	r24, r28
    85fa:	81 53       	subi	r24, 0x31	; 49
    85fc:	9f 4f       	sbci	r25, 0xFF	; 255
    85fe:	9e 01       	movw	r18, r28
    8600:	21 53       	subi	r18, 0x31	; 49
    8602:	3f 4f       	sbci	r19, 0xFF	; 255
    8604:	f9 01       	movw	r30, r18
    8606:	20 81       	ld	r18, Z
    8608:	31 81       	ldd	r19, Z+1	; 0x01
    860a:	21 50       	subi	r18, 0x01	; 1
    860c:	30 40       	sbci	r19, 0x00	; 0
    860e:	fc 01       	movw	r30, r24
    8610:	31 83       	std	Z+1, r19	; 0x01
    8612:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8614:	ce 01       	movw	r24, r28
    8616:	81 53       	subi	r24, 0x31	; 49
    8618:	9f 4f       	sbci	r25, 0xFF	; 255
    861a:	fc 01       	movw	r30, r24
    861c:	80 81       	ld	r24, Z
    861e:	91 81       	ldd	r25, Z+1	; 0x01
    8620:	00 97       	sbiw	r24, 0x00	; 0
    8622:	89 f6       	brne	.-94     	; 0x85c6 <pick_drop+0x16b4>
    8624:	2f c0       	rjmp	.+94     	; 0x8684 <pick_drop+0x1772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8626:	8e 01       	movw	r16, r28
    8628:	01 53       	subi	r16, 0x31	; 49
    862a:	1f 4f       	sbci	r17, 0xFF	; 255
    862c:	ce 01       	movw	r24, r28
    862e:	85 53       	subi	r24, 0x35	; 53
    8630:	9f 4f       	sbci	r25, 0xFF	; 255
    8632:	fc 01       	movw	r30, r24
    8634:	60 81       	ld	r22, Z
    8636:	71 81       	ldd	r23, Z+1	; 0x01
    8638:	82 81       	ldd	r24, Z+2	; 0x02
    863a:	93 81       	ldd	r25, Z+3	; 0x03
    863c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8640:	dc 01       	movw	r26, r24
    8642:	cb 01       	movw	r24, r22
    8644:	f8 01       	movw	r30, r16
    8646:	91 83       	std	Z+1, r25	; 0x01
    8648:	80 83       	st	Z, r24
    864a:	ce 01       	movw	r24, r28
    864c:	8d 52       	subi	r24, 0x2D	; 45
    864e:	9f 4f       	sbci	r25, 0xFF	; 255
    8650:	9e 01       	movw	r18, r28
    8652:	21 53       	subi	r18, 0x31	; 49
    8654:	3f 4f       	sbci	r19, 0xFF	; 255
    8656:	f9 01       	movw	r30, r18
    8658:	20 81       	ld	r18, Z
    865a:	31 81       	ldd	r19, Z+1	; 0x01
    865c:	fc 01       	movw	r30, r24
    865e:	31 83       	std	Z+1, r19	; 0x01
    8660:	20 83       	st	Z, r18
    8662:	ce 01       	movw	r24, r28
    8664:	8d 52       	subi	r24, 0x2D	; 45
    8666:	9f 4f       	sbci	r25, 0xFF	; 255
    8668:	fc 01       	movw	r30, r24
    866a:	80 81       	ld	r24, Z
    866c:	91 81       	ldd	r25, Z+1	; 0x01
    866e:	8c 01       	movw	r16, r24
    8670:	c8 01       	movw	r24, r16
    8672:	01 97       	sbiw	r24, 0x01	; 1
    8674:	f1 f7       	brne	.-4      	; 0x8672 <pick_drop+0x1760>
    8676:	8c 01       	movw	r16, r24
    8678:	ce 01       	movw	r24, r28
    867a:	8d 52       	subi	r24, 0x2D	; 45
    867c:	9f 4f       	sbci	r25, 0xFF	; 255
    867e:	fc 01       	movw	r30, r24
    8680:	11 83       	std	Z+1, r17	; 0x01
    8682:	00 83       	st	Z, r16
					_delay_ms(100);
					correct_right();
    8684:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
					back_mm(pdback);
    8688:	89 81       	ldd	r24, Y+1	; 0x01
    868a:	9a 81       	ldd	r25, Y+2	; 0x02
    868c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8690:	9e 01       	movw	r18, r28
    8692:	2b 52       	subi	r18, 0x2B	; 43
    8694:	3f 4f       	sbci	r19, 0xFF	; 255
    8696:	80 e0       	ldi	r24, 0x00	; 0
    8698:	90 e0       	ldi	r25, 0x00	; 0
    869a:	a0 ea       	ldi	r26, 0xA0	; 160
    869c:	b1 e4       	ldi	r27, 0x41	; 65
    869e:	f9 01       	movw	r30, r18
    86a0:	80 83       	st	Z, r24
    86a2:	91 83       	std	Z+1, r25	; 0x01
    86a4:	a2 83       	std	Z+2, r26	; 0x02
    86a6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    86a8:	8e 01       	movw	r16, r28
    86aa:	07 52       	subi	r16, 0x27	; 39
    86ac:	1f 4f       	sbci	r17, 0xFF	; 255
    86ae:	ce 01       	movw	r24, r28
    86b0:	8b 52       	subi	r24, 0x2B	; 43
    86b2:	9f 4f       	sbci	r25, 0xFF	; 255
    86b4:	fc 01       	movw	r30, r24
    86b6:	60 81       	ld	r22, Z
    86b8:	71 81       	ldd	r23, Z+1	; 0x01
    86ba:	82 81       	ldd	r24, Z+2	; 0x02
    86bc:	93 81       	ldd	r25, Z+3	; 0x03
    86be:	26 e6       	ldi	r18, 0x66	; 102
    86c0:	36 e6       	ldi	r19, 0x66	; 102
    86c2:	46 e6       	ldi	r20, 0x66	; 102
    86c4:	55 e4       	ldi	r21, 0x45	; 69
    86c6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    86ca:	dc 01       	movw	r26, r24
    86cc:	cb 01       	movw	r24, r22
    86ce:	f8 01       	movw	r30, r16
    86d0:	80 83       	st	Z, r24
    86d2:	91 83       	std	Z+1, r25	; 0x01
    86d4:	a2 83       	std	Z+2, r26	; 0x02
    86d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    86d8:	ce 01       	movw	r24, r28
    86da:	87 52       	subi	r24, 0x27	; 39
    86dc:	9f 4f       	sbci	r25, 0xFF	; 255
    86de:	11 e0       	ldi	r17, 0x01	; 1
    86e0:	fc 01       	movw	r30, r24
    86e2:	60 81       	ld	r22, Z
    86e4:	71 81       	ldd	r23, Z+1	; 0x01
    86e6:	82 81       	ldd	r24, Z+2	; 0x02
    86e8:	93 81       	ldd	r25, Z+3	; 0x03
    86ea:	20 e0       	ldi	r18, 0x00	; 0
    86ec:	30 e0       	ldi	r19, 0x00	; 0
    86ee:	40 e8       	ldi	r20, 0x80	; 128
    86f0:	5f e3       	ldi	r21, 0x3F	; 63
    86f2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    86f6:	88 23       	and	r24, r24
    86f8:	0c f0       	brlt	.+2      	; 0x86fc <pick_drop+0x17ea>
    86fa:	10 e0       	ldi	r17, 0x00	; 0
    86fc:	11 23       	and	r17, r17
    86fe:	49 f0       	breq	.+18     	; 0x8712 <pick_drop+0x1800>
		__ticks = 1;
    8700:	ce 01       	movw	r24, r28
    8702:	83 52       	subi	r24, 0x23	; 35
    8704:	9f 4f       	sbci	r25, 0xFF	; 255
    8706:	21 e0       	ldi	r18, 0x01	; 1
    8708:	30 e0       	ldi	r19, 0x00	; 0
    870a:	fc 01       	movw	r30, r24
    870c:	31 83       	std	Z+1, r19	; 0x01
    870e:	20 83       	st	Z, r18
    8710:	74 c0       	rjmp	.+232    	; 0x87fa <pick_drop+0x18e8>
	else if (__tmp > 65535)
    8712:	ce 01       	movw	r24, r28
    8714:	87 52       	subi	r24, 0x27	; 39
    8716:	9f 4f       	sbci	r25, 0xFF	; 255
    8718:	11 e0       	ldi	r17, 0x01	; 1
    871a:	fc 01       	movw	r30, r24
    871c:	60 81       	ld	r22, Z
    871e:	71 81       	ldd	r23, Z+1	; 0x01
    8720:	82 81       	ldd	r24, Z+2	; 0x02
    8722:	93 81       	ldd	r25, Z+3	; 0x03
    8724:	20 e0       	ldi	r18, 0x00	; 0
    8726:	3f ef       	ldi	r19, 0xFF	; 255
    8728:	4f e7       	ldi	r20, 0x7F	; 127
    872a:	57 e4       	ldi	r21, 0x47	; 71
    872c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8730:	18 16       	cp	r1, r24
    8732:	0c f0       	brlt	.+2      	; 0x8736 <pick_drop+0x1824>
    8734:	10 e0       	ldi	r17, 0x00	; 0
    8736:	11 23       	and	r17, r17
    8738:	09 f4       	brne	.+2      	; 0x873c <pick_drop+0x182a>
    873a:	4d c0       	rjmp	.+154    	; 0x87d6 <pick_drop+0x18c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    873c:	ce 01       	movw	r24, r28
    873e:	8b 52       	subi	r24, 0x2B	; 43
    8740:	9f 4f       	sbci	r25, 0xFF	; 255
    8742:	fc 01       	movw	r30, r24
    8744:	60 81       	ld	r22, Z
    8746:	71 81       	ldd	r23, Z+1	; 0x01
    8748:	82 81       	ldd	r24, Z+2	; 0x02
    874a:	93 81       	ldd	r25, Z+3	; 0x03
    874c:	20 e0       	ldi	r18, 0x00	; 0
    874e:	30 e0       	ldi	r19, 0x00	; 0
    8750:	40 e2       	ldi	r20, 0x20	; 32
    8752:	51 e4       	ldi	r21, 0x41	; 65
    8754:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8758:	dc 01       	movw	r26, r24
    875a:	cb 01       	movw	r24, r22
    875c:	8e 01       	movw	r16, r28
    875e:	03 52       	subi	r16, 0x23	; 35
    8760:	1f 4f       	sbci	r17, 0xFF	; 255
    8762:	bc 01       	movw	r22, r24
    8764:	cd 01       	movw	r24, r26
    8766:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    876a:	dc 01       	movw	r26, r24
    876c:	cb 01       	movw	r24, r22
    876e:	f8 01       	movw	r30, r16
    8770:	91 83       	std	Z+1, r25	; 0x01
    8772:	80 83       	st	Z, r24
    8774:	27 c0       	rjmp	.+78     	; 0x87c4 <pick_drop+0x18b2>
    8776:	ce 01       	movw	r24, r28
    8778:	81 52       	subi	r24, 0x21	; 33
    877a:	9f 4f       	sbci	r25, 0xFF	; 255
    877c:	20 e7       	ldi	r18, 0x70	; 112
    877e:	31 e0       	ldi	r19, 0x01	; 1
    8780:	fc 01       	movw	r30, r24
    8782:	31 83       	std	Z+1, r19	; 0x01
    8784:	20 83       	st	Z, r18
    8786:	ce 01       	movw	r24, r28
    8788:	81 52       	subi	r24, 0x21	; 33
    878a:	9f 4f       	sbci	r25, 0xFF	; 255
    878c:	fc 01       	movw	r30, r24
    878e:	80 81       	ld	r24, Z
    8790:	91 81       	ldd	r25, Z+1	; 0x01
    8792:	8c 01       	movw	r16, r24
    8794:	c8 01       	movw	r24, r16
    8796:	01 97       	sbiw	r24, 0x01	; 1
    8798:	f1 f7       	brne	.-4      	; 0x8796 <pick_drop+0x1884>
    879a:	8c 01       	movw	r16, r24
    879c:	ce 01       	movw	r24, r28
    879e:	81 52       	subi	r24, 0x21	; 33
    87a0:	9f 4f       	sbci	r25, 0xFF	; 255
    87a2:	fc 01       	movw	r30, r24
    87a4:	11 83       	std	Z+1, r17	; 0x01
    87a6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    87a8:	ce 01       	movw	r24, r28
    87aa:	83 52       	subi	r24, 0x23	; 35
    87ac:	9f 4f       	sbci	r25, 0xFF	; 255
    87ae:	9e 01       	movw	r18, r28
    87b0:	23 52       	subi	r18, 0x23	; 35
    87b2:	3f 4f       	sbci	r19, 0xFF	; 255
    87b4:	f9 01       	movw	r30, r18
    87b6:	20 81       	ld	r18, Z
    87b8:	31 81       	ldd	r19, Z+1	; 0x01
    87ba:	21 50       	subi	r18, 0x01	; 1
    87bc:	30 40       	sbci	r19, 0x00	; 0
    87be:	fc 01       	movw	r30, r24
    87c0:	31 83       	std	Z+1, r19	; 0x01
    87c2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    87c4:	ce 01       	movw	r24, r28
    87c6:	83 52       	subi	r24, 0x23	; 35
    87c8:	9f 4f       	sbci	r25, 0xFF	; 255
    87ca:	fc 01       	movw	r30, r24
    87cc:	80 81       	ld	r24, Z
    87ce:	91 81       	ldd	r25, Z+1	; 0x01
    87d0:	00 97       	sbiw	r24, 0x00	; 0
    87d2:	89 f6       	brne	.-94     	; 0x8776 <pick_drop+0x1864>
    87d4:	2f c0       	rjmp	.+94     	; 0x8834 <pick_drop+0x1922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    87d6:	8e 01       	movw	r16, r28
    87d8:	03 52       	subi	r16, 0x23	; 35
    87da:	1f 4f       	sbci	r17, 0xFF	; 255
    87dc:	ce 01       	movw	r24, r28
    87de:	87 52       	subi	r24, 0x27	; 39
    87e0:	9f 4f       	sbci	r25, 0xFF	; 255
    87e2:	fc 01       	movw	r30, r24
    87e4:	60 81       	ld	r22, Z
    87e6:	71 81       	ldd	r23, Z+1	; 0x01
    87e8:	82 81       	ldd	r24, Z+2	; 0x02
    87ea:	93 81       	ldd	r25, Z+3	; 0x03
    87ec:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    87f0:	dc 01       	movw	r26, r24
    87f2:	cb 01       	movw	r24, r22
    87f4:	f8 01       	movw	r30, r16
    87f6:	91 83       	std	Z+1, r25	; 0x01
    87f8:	80 83       	st	Z, r24
    87fa:	ce 01       	movw	r24, r28
    87fc:	8f 51       	subi	r24, 0x1F	; 31
    87fe:	9f 4f       	sbci	r25, 0xFF	; 255
    8800:	9e 01       	movw	r18, r28
    8802:	23 52       	subi	r18, 0x23	; 35
    8804:	3f 4f       	sbci	r19, 0xFF	; 255
    8806:	f9 01       	movw	r30, r18
    8808:	20 81       	ld	r18, Z
    880a:	31 81       	ldd	r19, Z+1	; 0x01
    880c:	fc 01       	movw	r30, r24
    880e:	31 83       	std	Z+1, r19	; 0x01
    8810:	20 83       	st	Z, r18
    8812:	ce 01       	movw	r24, r28
    8814:	8f 51       	subi	r24, 0x1F	; 31
    8816:	9f 4f       	sbci	r25, 0xFF	; 255
    8818:	fc 01       	movw	r30, r24
    881a:	80 81       	ld	r24, Z
    881c:	91 81       	ldd	r25, Z+1	; 0x01
    881e:	8c 01       	movw	r16, r24
    8820:	c8 01       	movw	r24, r16
    8822:	01 97       	sbiw	r24, 0x01	; 1
    8824:	f1 f7       	brne	.-4      	; 0x8822 <pick_drop+0x1910>
    8826:	8c 01       	movw	r16, r24
    8828:	ce 01       	movw	r24, r28
    882a:	8f 51       	subi	r24, 0x1F	; 31
    882c:	9f 4f       	sbci	r25, 0xFF	; 255
    882e:	fc 01       	movw	r30, r24
    8830:	11 83       	std	Z+1, r17	; 0x01
    8832:	00 83       	st	Z, r16
					_delay_ms(20);
				}
		}
		if(pd == '2')//right animals
    8834:	ce 01       	movw	r24, r28
    8836:	8d 5e       	subi	r24, 0xED	; 237
    8838:	9c 4f       	sbci	r25, 0xFC	; 252
    883a:	fc 01       	movw	r30, r24
    883c:	80 81       	ld	r24, Z
    883e:	82 33       	cpi	r24, 0x32	; 50
    8840:	11 f0       	breq	.+4      	; 0x8846 <pick_drop+0x1934>
    8842:	0c 94 7b 4d 	jmp	0x9af6	; 0x9af6 <pick_drop+0x2be4>
		{
			if(master_path[node-1]=='U')
    8846:	80 91 63 03 	lds	r24, 0x0363
    884a:	90 91 64 03 	lds	r25, 0x0364
    884e:	01 97       	sbiw	r24, 0x01	; 1
    8850:	89 59       	subi	r24, 0x99	; 153
    8852:	9c 4f       	sbci	r25, 0xFC	; 252
    8854:	fc 01       	movw	r30, r24
    8856:	80 81       	ld	r24, Z
    8858:	85 35       	cpi	r24, 0x55	; 85
    885a:	09 f0       	breq	.+2      	; 0x885e <pick_drop+0x194c>
    885c:	59 c3       	rjmp	.+1714   	; 0x8f10 <pick_drop+0x1ffe>
			{
			forward_mm(40);
    885e:	88 e2       	ldi	r24, 0x28	; 40
    8860:	90 e0       	ldi	r25, 0x00	; 0
    8862:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    8866:	9e 01       	movw	r18, r28
    8868:	2d 51       	subi	r18, 0x1D	; 29
    886a:	3f 4f       	sbci	r19, 0xFF	; 255
    886c:	80 e0       	ldi	r24, 0x00	; 0
    886e:	90 e0       	ldi	r25, 0x00	; 0
    8870:	a0 ea       	ldi	r26, 0xA0	; 160
    8872:	b1 e4       	ldi	r27, 0x41	; 65
    8874:	f9 01       	movw	r30, r18
    8876:	80 83       	st	Z, r24
    8878:	91 83       	std	Z+1, r25	; 0x01
    887a:	a2 83       	std	Z+2, r26	; 0x02
    887c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    887e:	8e 01       	movw	r16, r28
    8880:	09 51       	subi	r16, 0x19	; 25
    8882:	1f 4f       	sbci	r17, 0xFF	; 255
    8884:	ce 01       	movw	r24, r28
    8886:	8d 51       	subi	r24, 0x1D	; 29
    8888:	9f 4f       	sbci	r25, 0xFF	; 255
    888a:	fc 01       	movw	r30, r24
    888c:	60 81       	ld	r22, Z
    888e:	71 81       	ldd	r23, Z+1	; 0x01
    8890:	82 81       	ldd	r24, Z+2	; 0x02
    8892:	93 81       	ldd	r25, Z+3	; 0x03
    8894:	26 e6       	ldi	r18, 0x66	; 102
    8896:	36 e6       	ldi	r19, 0x66	; 102
    8898:	46 e6       	ldi	r20, 0x66	; 102
    889a:	55 e4       	ldi	r21, 0x45	; 69
    889c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    88a0:	dc 01       	movw	r26, r24
    88a2:	cb 01       	movw	r24, r22
    88a4:	f8 01       	movw	r30, r16
    88a6:	80 83       	st	Z, r24
    88a8:	91 83       	std	Z+1, r25	; 0x01
    88aa:	a2 83       	std	Z+2, r26	; 0x02
    88ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    88ae:	ce 01       	movw	r24, r28
    88b0:	89 51       	subi	r24, 0x19	; 25
    88b2:	9f 4f       	sbci	r25, 0xFF	; 255
    88b4:	11 e0       	ldi	r17, 0x01	; 1
    88b6:	fc 01       	movw	r30, r24
    88b8:	60 81       	ld	r22, Z
    88ba:	71 81       	ldd	r23, Z+1	; 0x01
    88bc:	82 81       	ldd	r24, Z+2	; 0x02
    88be:	93 81       	ldd	r25, Z+3	; 0x03
    88c0:	20 e0       	ldi	r18, 0x00	; 0
    88c2:	30 e0       	ldi	r19, 0x00	; 0
    88c4:	40 e8       	ldi	r20, 0x80	; 128
    88c6:	5f e3       	ldi	r21, 0x3F	; 63
    88c8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    88cc:	88 23       	and	r24, r24
    88ce:	0c f0       	brlt	.+2      	; 0x88d2 <pick_drop+0x19c0>
    88d0:	10 e0       	ldi	r17, 0x00	; 0
    88d2:	11 23       	and	r17, r17
    88d4:	49 f0       	breq	.+18     	; 0x88e8 <pick_drop+0x19d6>
		__ticks = 1;
    88d6:	ce 01       	movw	r24, r28
    88d8:	85 51       	subi	r24, 0x15	; 21
    88da:	9f 4f       	sbci	r25, 0xFF	; 255
    88dc:	21 e0       	ldi	r18, 0x01	; 1
    88de:	30 e0       	ldi	r19, 0x00	; 0
    88e0:	fc 01       	movw	r30, r24
    88e2:	31 83       	std	Z+1, r19	; 0x01
    88e4:	20 83       	st	Z, r18
    88e6:	74 c0       	rjmp	.+232    	; 0x89d0 <pick_drop+0x1abe>
	else if (__tmp > 65535)
    88e8:	ce 01       	movw	r24, r28
    88ea:	89 51       	subi	r24, 0x19	; 25
    88ec:	9f 4f       	sbci	r25, 0xFF	; 255
    88ee:	11 e0       	ldi	r17, 0x01	; 1
    88f0:	fc 01       	movw	r30, r24
    88f2:	60 81       	ld	r22, Z
    88f4:	71 81       	ldd	r23, Z+1	; 0x01
    88f6:	82 81       	ldd	r24, Z+2	; 0x02
    88f8:	93 81       	ldd	r25, Z+3	; 0x03
    88fa:	20 e0       	ldi	r18, 0x00	; 0
    88fc:	3f ef       	ldi	r19, 0xFF	; 255
    88fe:	4f e7       	ldi	r20, 0x7F	; 127
    8900:	57 e4       	ldi	r21, 0x47	; 71
    8902:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8906:	18 16       	cp	r1, r24
    8908:	0c f0       	brlt	.+2      	; 0x890c <pick_drop+0x19fa>
    890a:	10 e0       	ldi	r17, 0x00	; 0
    890c:	11 23       	and	r17, r17
    890e:	09 f4       	brne	.+2      	; 0x8912 <pick_drop+0x1a00>
    8910:	4d c0       	rjmp	.+154    	; 0x89ac <pick_drop+0x1a9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8912:	ce 01       	movw	r24, r28
    8914:	8d 51       	subi	r24, 0x1D	; 29
    8916:	9f 4f       	sbci	r25, 0xFF	; 255
    8918:	fc 01       	movw	r30, r24
    891a:	60 81       	ld	r22, Z
    891c:	71 81       	ldd	r23, Z+1	; 0x01
    891e:	82 81       	ldd	r24, Z+2	; 0x02
    8920:	93 81       	ldd	r25, Z+3	; 0x03
    8922:	20 e0       	ldi	r18, 0x00	; 0
    8924:	30 e0       	ldi	r19, 0x00	; 0
    8926:	40 e2       	ldi	r20, 0x20	; 32
    8928:	51 e4       	ldi	r21, 0x41	; 65
    892a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    892e:	dc 01       	movw	r26, r24
    8930:	cb 01       	movw	r24, r22
    8932:	8e 01       	movw	r16, r28
    8934:	05 51       	subi	r16, 0x15	; 21
    8936:	1f 4f       	sbci	r17, 0xFF	; 255
    8938:	bc 01       	movw	r22, r24
    893a:	cd 01       	movw	r24, r26
    893c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8940:	dc 01       	movw	r26, r24
    8942:	cb 01       	movw	r24, r22
    8944:	f8 01       	movw	r30, r16
    8946:	91 83       	std	Z+1, r25	; 0x01
    8948:	80 83       	st	Z, r24
    894a:	27 c0       	rjmp	.+78     	; 0x899a <pick_drop+0x1a88>
    894c:	ce 01       	movw	r24, r28
    894e:	83 51       	subi	r24, 0x13	; 19
    8950:	9f 4f       	sbci	r25, 0xFF	; 255
    8952:	20 e7       	ldi	r18, 0x70	; 112
    8954:	31 e0       	ldi	r19, 0x01	; 1
    8956:	fc 01       	movw	r30, r24
    8958:	31 83       	std	Z+1, r19	; 0x01
    895a:	20 83       	st	Z, r18
    895c:	ce 01       	movw	r24, r28
    895e:	83 51       	subi	r24, 0x13	; 19
    8960:	9f 4f       	sbci	r25, 0xFF	; 255
    8962:	fc 01       	movw	r30, r24
    8964:	80 81       	ld	r24, Z
    8966:	91 81       	ldd	r25, Z+1	; 0x01
    8968:	8c 01       	movw	r16, r24
    896a:	c8 01       	movw	r24, r16
    896c:	01 97       	sbiw	r24, 0x01	; 1
    896e:	f1 f7       	brne	.-4      	; 0x896c <pick_drop+0x1a5a>
    8970:	8c 01       	movw	r16, r24
    8972:	ce 01       	movw	r24, r28
    8974:	83 51       	subi	r24, 0x13	; 19
    8976:	9f 4f       	sbci	r25, 0xFF	; 255
    8978:	fc 01       	movw	r30, r24
    897a:	11 83       	std	Z+1, r17	; 0x01
    897c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    897e:	ce 01       	movw	r24, r28
    8980:	85 51       	subi	r24, 0x15	; 21
    8982:	9f 4f       	sbci	r25, 0xFF	; 255
    8984:	9e 01       	movw	r18, r28
    8986:	25 51       	subi	r18, 0x15	; 21
    8988:	3f 4f       	sbci	r19, 0xFF	; 255
    898a:	f9 01       	movw	r30, r18
    898c:	20 81       	ld	r18, Z
    898e:	31 81       	ldd	r19, Z+1	; 0x01
    8990:	21 50       	subi	r18, 0x01	; 1
    8992:	30 40       	sbci	r19, 0x00	; 0
    8994:	fc 01       	movw	r30, r24
    8996:	31 83       	std	Z+1, r19	; 0x01
    8998:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    899a:	ce 01       	movw	r24, r28
    899c:	85 51       	subi	r24, 0x15	; 21
    899e:	9f 4f       	sbci	r25, 0xFF	; 255
    89a0:	fc 01       	movw	r30, r24
    89a2:	80 81       	ld	r24, Z
    89a4:	91 81       	ldd	r25, Z+1	; 0x01
    89a6:	00 97       	sbiw	r24, 0x00	; 0
    89a8:	89 f6       	brne	.-94     	; 0x894c <pick_drop+0x1a3a>
    89aa:	2f c0       	rjmp	.+94     	; 0x8a0a <pick_drop+0x1af8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    89ac:	8e 01       	movw	r16, r28
    89ae:	05 51       	subi	r16, 0x15	; 21
    89b0:	1f 4f       	sbci	r17, 0xFF	; 255
    89b2:	ce 01       	movw	r24, r28
    89b4:	89 51       	subi	r24, 0x19	; 25
    89b6:	9f 4f       	sbci	r25, 0xFF	; 255
    89b8:	fc 01       	movw	r30, r24
    89ba:	60 81       	ld	r22, Z
    89bc:	71 81       	ldd	r23, Z+1	; 0x01
    89be:	82 81       	ldd	r24, Z+2	; 0x02
    89c0:	93 81       	ldd	r25, Z+3	; 0x03
    89c2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    89c6:	dc 01       	movw	r26, r24
    89c8:	cb 01       	movw	r24, r22
    89ca:	f8 01       	movw	r30, r16
    89cc:	91 83       	std	Z+1, r25	; 0x01
    89ce:	80 83       	st	Z, r24
    89d0:	ce 01       	movw	r24, r28
    89d2:	81 51       	subi	r24, 0x11	; 17
    89d4:	9f 4f       	sbci	r25, 0xFF	; 255
    89d6:	9e 01       	movw	r18, r28
    89d8:	25 51       	subi	r18, 0x15	; 21
    89da:	3f 4f       	sbci	r19, 0xFF	; 255
    89dc:	f9 01       	movw	r30, r18
    89de:	20 81       	ld	r18, Z
    89e0:	31 81       	ldd	r19, Z+1	; 0x01
    89e2:	fc 01       	movw	r30, r24
    89e4:	31 83       	std	Z+1, r19	; 0x01
    89e6:	20 83       	st	Z, r18
    89e8:	ce 01       	movw	r24, r28
    89ea:	81 51       	subi	r24, 0x11	; 17
    89ec:	9f 4f       	sbci	r25, 0xFF	; 255
    89ee:	fc 01       	movw	r30, r24
    89f0:	80 81       	ld	r24, Z
    89f2:	91 81       	ldd	r25, Z+1	; 0x01
    89f4:	8c 01       	movw	r16, r24
    89f6:	c8 01       	movw	r24, r16
    89f8:	01 97       	sbiw	r24, 0x01	; 1
    89fa:	f1 f7       	brne	.-4      	; 0x89f8 <pick_drop+0x1ae6>
    89fc:	8c 01       	movw	r16, r24
    89fe:	ce 01       	movw	r24, r28
    8a00:	81 51       	subi	r24, 0x11	; 17
    8a02:	9f 4f       	sbci	r25, 0xFF	; 255
    8a04:	fc 01       	movw	r30, r24
    8a06:	11 83       	std	Z+1, r17	; 0x01
    8a08:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right2();
    8a0a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    8a0e:	9e 01       	movw	r18, r28
    8a10:	2f 50       	subi	r18, 0x0F	; 15
    8a12:	3f 4f       	sbci	r19, 0xFF	; 255
    8a14:	80 e0       	ldi	r24, 0x00	; 0
    8a16:	90 e0       	ldi	r25, 0x00	; 0
    8a18:	a8 e4       	ldi	r26, 0x48	; 72
    8a1a:	b2 e4       	ldi	r27, 0x42	; 66
    8a1c:	f9 01       	movw	r30, r18
    8a1e:	80 83       	st	Z, r24
    8a20:	91 83       	std	Z+1, r25	; 0x01
    8a22:	a2 83       	std	Z+2, r26	; 0x02
    8a24:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8a26:	8e 01       	movw	r16, r28
    8a28:	0b 50       	subi	r16, 0x0B	; 11
    8a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    8a2c:	ce 01       	movw	r24, r28
    8a2e:	8f 50       	subi	r24, 0x0F	; 15
    8a30:	9f 4f       	sbci	r25, 0xFF	; 255
    8a32:	fc 01       	movw	r30, r24
    8a34:	60 81       	ld	r22, Z
    8a36:	71 81       	ldd	r23, Z+1	; 0x01
    8a38:	82 81       	ldd	r24, Z+2	; 0x02
    8a3a:	93 81       	ldd	r25, Z+3	; 0x03
    8a3c:	26 e6       	ldi	r18, 0x66	; 102
    8a3e:	36 e6       	ldi	r19, 0x66	; 102
    8a40:	46 e6       	ldi	r20, 0x66	; 102
    8a42:	55 e4       	ldi	r21, 0x45	; 69
    8a44:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8a48:	dc 01       	movw	r26, r24
    8a4a:	cb 01       	movw	r24, r22
    8a4c:	f8 01       	movw	r30, r16
    8a4e:	80 83       	st	Z, r24
    8a50:	91 83       	std	Z+1, r25	; 0x01
    8a52:	a2 83       	std	Z+2, r26	; 0x02
    8a54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8a56:	ce 01       	movw	r24, r28
    8a58:	8b 50       	subi	r24, 0x0B	; 11
    8a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    8a5c:	11 e0       	ldi	r17, 0x01	; 1
    8a5e:	fc 01       	movw	r30, r24
    8a60:	60 81       	ld	r22, Z
    8a62:	71 81       	ldd	r23, Z+1	; 0x01
    8a64:	82 81       	ldd	r24, Z+2	; 0x02
    8a66:	93 81       	ldd	r25, Z+3	; 0x03
    8a68:	20 e0       	ldi	r18, 0x00	; 0
    8a6a:	30 e0       	ldi	r19, 0x00	; 0
    8a6c:	40 e8       	ldi	r20, 0x80	; 128
    8a6e:	5f e3       	ldi	r21, 0x3F	; 63
    8a70:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    8a74:	88 23       	and	r24, r24
    8a76:	0c f0       	brlt	.+2      	; 0x8a7a <pick_drop+0x1b68>
    8a78:	10 e0       	ldi	r17, 0x00	; 0
    8a7a:	11 23       	and	r17, r17
    8a7c:	49 f0       	breq	.+18     	; 0x8a90 <pick_drop+0x1b7e>
		__ticks = 1;
    8a7e:	ce 01       	movw	r24, r28
    8a80:	87 50       	subi	r24, 0x07	; 7
    8a82:	9f 4f       	sbci	r25, 0xFF	; 255
    8a84:	21 e0       	ldi	r18, 0x01	; 1
    8a86:	30 e0       	ldi	r19, 0x00	; 0
    8a88:	fc 01       	movw	r30, r24
    8a8a:	31 83       	std	Z+1, r19	; 0x01
    8a8c:	20 83       	st	Z, r18
    8a8e:	74 c0       	rjmp	.+232    	; 0x8b78 <pick_drop+0x1c66>
	else if (__tmp > 65535)
    8a90:	ce 01       	movw	r24, r28
    8a92:	8b 50       	subi	r24, 0x0B	; 11
    8a94:	9f 4f       	sbci	r25, 0xFF	; 255
    8a96:	11 e0       	ldi	r17, 0x01	; 1
    8a98:	fc 01       	movw	r30, r24
    8a9a:	60 81       	ld	r22, Z
    8a9c:	71 81       	ldd	r23, Z+1	; 0x01
    8a9e:	82 81       	ldd	r24, Z+2	; 0x02
    8aa0:	93 81       	ldd	r25, Z+3	; 0x03
    8aa2:	20 e0       	ldi	r18, 0x00	; 0
    8aa4:	3f ef       	ldi	r19, 0xFF	; 255
    8aa6:	4f e7       	ldi	r20, 0x7F	; 127
    8aa8:	57 e4       	ldi	r21, 0x47	; 71
    8aaa:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8aae:	18 16       	cp	r1, r24
    8ab0:	0c f0       	brlt	.+2      	; 0x8ab4 <pick_drop+0x1ba2>
    8ab2:	10 e0       	ldi	r17, 0x00	; 0
    8ab4:	11 23       	and	r17, r17
    8ab6:	09 f4       	brne	.+2      	; 0x8aba <pick_drop+0x1ba8>
    8ab8:	4d c0       	rjmp	.+154    	; 0x8b54 <pick_drop+0x1c42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8aba:	ce 01       	movw	r24, r28
    8abc:	8f 50       	subi	r24, 0x0F	; 15
    8abe:	9f 4f       	sbci	r25, 0xFF	; 255
    8ac0:	fc 01       	movw	r30, r24
    8ac2:	60 81       	ld	r22, Z
    8ac4:	71 81       	ldd	r23, Z+1	; 0x01
    8ac6:	82 81       	ldd	r24, Z+2	; 0x02
    8ac8:	93 81       	ldd	r25, Z+3	; 0x03
    8aca:	20 e0       	ldi	r18, 0x00	; 0
    8acc:	30 e0       	ldi	r19, 0x00	; 0
    8ace:	40 e2       	ldi	r20, 0x20	; 32
    8ad0:	51 e4       	ldi	r21, 0x41	; 65
    8ad2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8ad6:	dc 01       	movw	r26, r24
    8ad8:	cb 01       	movw	r24, r22
    8ada:	8e 01       	movw	r16, r28
    8adc:	07 50       	subi	r16, 0x07	; 7
    8ade:	1f 4f       	sbci	r17, 0xFF	; 255
    8ae0:	bc 01       	movw	r22, r24
    8ae2:	cd 01       	movw	r24, r26
    8ae4:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8ae8:	dc 01       	movw	r26, r24
    8aea:	cb 01       	movw	r24, r22
    8aec:	f8 01       	movw	r30, r16
    8aee:	91 83       	std	Z+1, r25	; 0x01
    8af0:	80 83       	st	Z, r24
    8af2:	27 c0       	rjmp	.+78     	; 0x8b42 <pick_drop+0x1c30>
    8af4:	ce 01       	movw	r24, r28
    8af6:	85 50       	subi	r24, 0x05	; 5
    8af8:	9f 4f       	sbci	r25, 0xFF	; 255
    8afa:	20 e7       	ldi	r18, 0x70	; 112
    8afc:	31 e0       	ldi	r19, 0x01	; 1
    8afe:	fc 01       	movw	r30, r24
    8b00:	31 83       	std	Z+1, r19	; 0x01
    8b02:	20 83       	st	Z, r18
    8b04:	ce 01       	movw	r24, r28
    8b06:	85 50       	subi	r24, 0x05	; 5
    8b08:	9f 4f       	sbci	r25, 0xFF	; 255
    8b0a:	fc 01       	movw	r30, r24
    8b0c:	80 81       	ld	r24, Z
    8b0e:	91 81       	ldd	r25, Z+1	; 0x01
    8b10:	8c 01       	movw	r16, r24
    8b12:	c8 01       	movw	r24, r16
    8b14:	01 97       	sbiw	r24, 0x01	; 1
    8b16:	f1 f7       	brne	.-4      	; 0x8b14 <pick_drop+0x1c02>
    8b18:	8c 01       	movw	r16, r24
    8b1a:	ce 01       	movw	r24, r28
    8b1c:	85 50       	subi	r24, 0x05	; 5
    8b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b20:	fc 01       	movw	r30, r24
    8b22:	11 83       	std	Z+1, r17	; 0x01
    8b24:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b26:	ce 01       	movw	r24, r28
    8b28:	87 50       	subi	r24, 0x07	; 7
    8b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    8b2c:	9e 01       	movw	r18, r28
    8b2e:	27 50       	subi	r18, 0x07	; 7
    8b30:	3f 4f       	sbci	r19, 0xFF	; 255
    8b32:	f9 01       	movw	r30, r18
    8b34:	20 81       	ld	r18, Z
    8b36:	31 81       	ldd	r19, Z+1	; 0x01
    8b38:	21 50       	subi	r18, 0x01	; 1
    8b3a:	30 40       	sbci	r19, 0x00	; 0
    8b3c:	fc 01       	movw	r30, r24
    8b3e:	31 83       	std	Z+1, r19	; 0x01
    8b40:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b42:	ce 01       	movw	r24, r28
    8b44:	87 50       	subi	r24, 0x07	; 7
    8b46:	9f 4f       	sbci	r25, 0xFF	; 255
    8b48:	fc 01       	movw	r30, r24
    8b4a:	80 81       	ld	r24, Z
    8b4c:	91 81       	ldd	r25, Z+1	; 0x01
    8b4e:	00 97       	sbiw	r24, 0x00	; 0
    8b50:	89 f6       	brne	.-94     	; 0x8af4 <pick_drop+0x1be2>
    8b52:	2f c0       	rjmp	.+94     	; 0x8bb2 <pick_drop+0x1ca0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8b54:	8e 01       	movw	r16, r28
    8b56:	07 50       	subi	r16, 0x07	; 7
    8b58:	1f 4f       	sbci	r17, 0xFF	; 255
    8b5a:	ce 01       	movw	r24, r28
    8b5c:	8b 50       	subi	r24, 0x0B	; 11
    8b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b60:	fc 01       	movw	r30, r24
    8b62:	60 81       	ld	r22, Z
    8b64:	71 81       	ldd	r23, Z+1	; 0x01
    8b66:	82 81       	ldd	r24, Z+2	; 0x02
    8b68:	93 81       	ldd	r25, Z+3	; 0x03
    8b6a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8b6e:	dc 01       	movw	r26, r24
    8b70:	cb 01       	movw	r24, r22
    8b72:	f8 01       	movw	r30, r16
    8b74:	91 83       	std	Z+1, r25	; 0x01
    8b76:	80 83       	st	Z, r24
    8b78:	ce 01       	movw	r24, r28
    8b7a:	83 50       	subi	r24, 0x03	; 3
    8b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b7e:	9e 01       	movw	r18, r28
    8b80:	27 50       	subi	r18, 0x07	; 7
    8b82:	3f 4f       	sbci	r19, 0xFF	; 255
    8b84:	f9 01       	movw	r30, r18
    8b86:	20 81       	ld	r18, Z
    8b88:	31 81       	ldd	r19, Z+1	; 0x01
    8b8a:	fc 01       	movw	r30, r24
    8b8c:	31 83       	std	Z+1, r19	; 0x01
    8b8e:	20 83       	st	Z, r18
    8b90:	ce 01       	movw	r24, r28
    8b92:	83 50       	subi	r24, 0x03	; 3
    8b94:	9f 4f       	sbci	r25, 0xFF	; 255
    8b96:	fc 01       	movw	r30, r24
    8b98:	80 81       	ld	r24, Z
    8b9a:	91 81       	ldd	r25, Z+1	; 0x01
    8b9c:	8c 01       	movw	r16, r24
    8b9e:	c8 01       	movw	r24, r16
    8ba0:	01 97       	sbiw	r24, 0x01	; 1
    8ba2:	f1 f7       	brne	.-4      	; 0x8ba0 <pick_drop+0x1c8e>
    8ba4:	8c 01       	movw	r16, r24
    8ba6:	ce 01       	movw	r24, r28
    8ba8:	83 50       	subi	r24, 0x03	; 3
    8baa:	9f 4f       	sbci	r25, 0xFF	; 255
    8bac:	fc 01       	movw	r30, r24
    8bae:	11 83       	std	Z+1, r17	; 0x01
    8bb0:	00 83       	st	Z, r16
			_delay_ms(50);
			front();
    8bb2:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    8bb6:	9e 01       	movw	r18, r28
    8bb8:	21 50       	subi	r18, 0x01	; 1
    8bba:	3f 4f       	sbci	r19, 0xFF	; 255
    8bbc:	80 e0       	ldi	r24, 0x00	; 0
    8bbe:	90 e0       	ldi	r25, 0x00	; 0
    8bc0:	a8 ec       	ldi	r26, 0xC8	; 200
    8bc2:	b2 e4       	ldi	r27, 0x42	; 66
    8bc4:	f9 01       	movw	r30, r18
    8bc6:	80 83       	st	Z, r24
    8bc8:	91 83       	std	Z+1, r25	; 0x01
    8bca:	a2 83       	std	Z+2, r26	; 0x02
    8bcc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8bce:	8e 01       	movw	r16, r28
    8bd0:	0d 5f       	subi	r16, 0xFD	; 253
    8bd2:	1e 4f       	sbci	r17, 0xFE	; 254
    8bd4:	ce 01       	movw	r24, r28
    8bd6:	81 50       	subi	r24, 0x01	; 1
    8bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    8bda:	fc 01       	movw	r30, r24
    8bdc:	60 81       	ld	r22, Z
    8bde:	71 81       	ldd	r23, Z+1	; 0x01
    8be0:	82 81       	ldd	r24, Z+2	; 0x02
    8be2:	93 81       	ldd	r25, Z+3	; 0x03
    8be4:	26 e6       	ldi	r18, 0x66	; 102
    8be6:	36 e6       	ldi	r19, 0x66	; 102
    8be8:	46 e6       	ldi	r20, 0x66	; 102
    8bea:	55 e4       	ldi	r21, 0x45	; 69
    8bec:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8bf0:	dc 01       	movw	r26, r24
    8bf2:	cb 01       	movw	r24, r22
    8bf4:	f8 01       	movw	r30, r16
    8bf6:	80 83       	st	Z, r24
    8bf8:	91 83       	std	Z+1, r25	; 0x01
    8bfa:	a2 83       	std	Z+2, r26	; 0x02
    8bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8bfe:	ce 01       	movw	r24, r28
    8c00:	8d 5f       	subi	r24, 0xFD	; 253
    8c02:	9e 4f       	sbci	r25, 0xFE	; 254
    8c04:	11 e0       	ldi	r17, 0x01	; 1
    8c06:	fc 01       	movw	r30, r24
    8c08:	60 81       	ld	r22, Z
    8c0a:	71 81       	ldd	r23, Z+1	; 0x01
    8c0c:	82 81       	ldd	r24, Z+2	; 0x02
    8c0e:	93 81       	ldd	r25, Z+3	; 0x03
    8c10:	20 e0       	ldi	r18, 0x00	; 0
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	40 e8       	ldi	r20, 0x80	; 128
    8c16:	5f e3       	ldi	r21, 0x3F	; 63
    8c18:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    8c1c:	88 23       	and	r24, r24
    8c1e:	0c f0       	brlt	.+2      	; 0x8c22 <pick_drop+0x1d10>
    8c20:	10 e0       	ldi	r17, 0x00	; 0
    8c22:	11 23       	and	r17, r17
    8c24:	49 f0       	breq	.+18     	; 0x8c38 <pick_drop+0x1d26>
		__ticks = 1;
    8c26:	ce 01       	movw	r24, r28
    8c28:	89 5f       	subi	r24, 0xF9	; 249
    8c2a:	9e 4f       	sbci	r25, 0xFE	; 254
    8c2c:	21 e0       	ldi	r18, 0x01	; 1
    8c2e:	30 e0       	ldi	r19, 0x00	; 0
    8c30:	fc 01       	movw	r30, r24
    8c32:	31 83       	std	Z+1, r19	; 0x01
    8c34:	20 83       	st	Z, r18
    8c36:	74 c0       	rjmp	.+232    	; 0x8d20 <pick_drop+0x1e0e>
	else if (__tmp > 65535)
    8c38:	ce 01       	movw	r24, r28
    8c3a:	8d 5f       	subi	r24, 0xFD	; 253
    8c3c:	9e 4f       	sbci	r25, 0xFE	; 254
    8c3e:	11 e0       	ldi	r17, 0x01	; 1
    8c40:	fc 01       	movw	r30, r24
    8c42:	60 81       	ld	r22, Z
    8c44:	71 81       	ldd	r23, Z+1	; 0x01
    8c46:	82 81       	ldd	r24, Z+2	; 0x02
    8c48:	93 81       	ldd	r25, Z+3	; 0x03
    8c4a:	20 e0       	ldi	r18, 0x00	; 0
    8c4c:	3f ef       	ldi	r19, 0xFF	; 255
    8c4e:	4f e7       	ldi	r20, 0x7F	; 127
    8c50:	57 e4       	ldi	r21, 0x47	; 71
    8c52:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8c56:	18 16       	cp	r1, r24
    8c58:	0c f0       	brlt	.+2      	; 0x8c5c <pick_drop+0x1d4a>
    8c5a:	10 e0       	ldi	r17, 0x00	; 0
    8c5c:	11 23       	and	r17, r17
    8c5e:	09 f4       	brne	.+2      	; 0x8c62 <pick_drop+0x1d50>
    8c60:	4d c0       	rjmp	.+154    	; 0x8cfc <pick_drop+0x1dea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8c62:	ce 01       	movw	r24, r28
    8c64:	81 50       	subi	r24, 0x01	; 1
    8c66:	9f 4f       	sbci	r25, 0xFF	; 255
    8c68:	fc 01       	movw	r30, r24
    8c6a:	60 81       	ld	r22, Z
    8c6c:	71 81       	ldd	r23, Z+1	; 0x01
    8c6e:	82 81       	ldd	r24, Z+2	; 0x02
    8c70:	93 81       	ldd	r25, Z+3	; 0x03
    8c72:	20 e0       	ldi	r18, 0x00	; 0
    8c74:	30 e0       	ldi	r19, 0x00	; 0
    8c76:	40 e2       	ldi	r20, 0x20	; 32
    8c78:	51 e4       	ldi	r21, 0x41	; 65
    8c7a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8c7e:	dc 01       	movw	r26, r24
    8c80:	cb 01       	movw	r24, r22
    8c82:	8e 01       	movw	r16, r28
    8c84:	09 5f       	subi	r16, 0xF9	; 249
    8c86:	1e 4f       	sbci	r17, 0xFE	; 254
    8c88:	bc 01       	movw	r22, r24
    8c8a:	cd 01       	movw	r24, r26
    8c8c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8c90:	dc 01       	movw	r26, r24
    8c92:	cb 01       	movw	r24, r22
    8c94:	f8 01       	movw	r30, r16
    8c96:	91 83       	std	Z+1, r25	; 0x01
    8c98:	80 83       	st	Z, r24
    8c9a:	27 c0       	rjmp	.+78     	; 0x8cea <pick_drop+0x1dd8>
    8c9c:	ce 01       	movw	r24, r28
    8c9e:	87 5f       	subi	r24, 0xF7	; 247
    8ca0:	9e 4f       	sbci	r25, 0xFE	; 254
    8ca2:	20 e7       	ldi	r18, 0x70	; 112
    8ca4:	31 e0       	ldi	r19, 0x01	; 1
    8ca6:	fc 01       	movw	r30, r24
    8ca8:	31 83       	std	Z+1, r19	; 0x01
    8caa:	20 83       	st	Z, r18
    8cac:	ce 01       	movw	r24, r28
    8cae:	87 5f       	subi	r24, 0xF7	; 247
    8cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    8cb2:	fc 01       	movw	r30, r24
    8cb4:	80 81       	ld	r24, Z
    8cb6:	91 81       	ldd	r25, Z+1	; 0x01
    8cb8:	8c 01       	movw	r16, r24
    8cba:	c8 01       	movw	r24, r16
    8cbc:	01 97       	sbiw	r24, 0x01	; 1
    8cbe:	f1 f7       	brne	.-4      	; 0x8cbc <pick_drop+0x1daa>
    8cc0:	8c 01       	movw	r16, r24
    8cc2:	ce 01       	movw	r24, r28
    8cc4:	87 5f       	subi	r24, 0xF7	; 247
    8cc6:	9e 4f       	sbci	r25, 0xFE	; 254
    8cc8:	fc 01       	movw	r30, r24
    8cca:	11 83       	std	Z+1, r17	; 0x01
    8ccc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8cce:	ce 01       	movw	r24, r28
    8cd0:	89 5f       	subi	r24, 0xF9	; 249
    8cd2:	9e 4f       	sbci	r25, 0xFE	; 254
    8cd4:	9e 01       	movw	r18, r28
    8cd6:	29 5f       	subi	r18, 0xF9	; 249
    8cd8:	3e 4f       	sbci	r19, 0xFE	; 254
    8cda:	f9 01       	movw	r30, r18
    8cdc:	20 81       	ld	r18, Z
    8cde:	31 81       	ldd	r19, Z+1	; 0x01
    8ce0:	21 50       	subi	r18, 0x01	; 1
    8ce2:	30 40       	sbci	r19, 0x00	; 0
    8ce4:	fc 01       	movw	r30, r24
    8ce6:	31 83       	std	Z+1, r19	; 0x01
    8ce8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8cea:	ce 01       	movw	r24, r28
    8cec:	89 5f       	subi	r24, 0xF9	; 249
    8cee:	9e 4f       	sbci	r25, 0xFE	; 254
    8cf0:	fc 01       	movw	r30, r24
    8cf2:	80 81       	ld	r24, Z
    8cf4:	91 81       	ldd	r25, Z+1	; 0x01
    8cf6:	00 97       	sbiw	r24, 0x00	; 0
    8cf8:	89 f6       	brne	.-94     	; 0x8c9c <pick_drop+0x1d8a>
    8cfa:	2f c0       	rjmp	.+94     	; 0x8d5a <pick_drop+0x1e48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8cfc:	8e 01       	movw	r16, r28
    8cfe:	09 5f       	subi	r16, 0xF9	; 249
    8d00:	1e 4f       	sbci	r17, 0xFE	; 254
    8d02:	ce 01       	movw	r24, r28
    8d04:	8d 5f       	subi	r24, 0xFD	; 253
    8d06:	9e 4f       	sbci	r25, 0xFE	; 254
    8d08:	fc 01       	movw	r30, r24
    8d0a:	60 81       	ld	r22, Z
    8d0c:	71 81       	ldd	r23, Z+1	; 0x01
    8d0e:	82 81       	ldd	r24, Z+2	; 0x02
    8d10:	93 81       	ldd	r25, Z+3	; 0x03
    8d12:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8d16:	dc 01       	movw	r26, r24
    8d18:	cb 01       	movw	r24, r22
    8d1a:	f8 01       	movw	r30, r16
    8d1c:	91 83       	std	Z+1, r25	; 0x01
    8d1e:	80 83       	st	Z, r24
    8d20:	ce 01       	movw	r24, r28
    8d22:	85 5f       	subi	r24, 0xF5	; 245
    8d24:	9e 4f       	sbci	r25, 0xFE	; 254
    8d26:	9e 01       	movw	r18, r28
    8d28:	29 5f       	subi	r18, 0xF9	; 249
    8d2a:	3e 4f       	sbci	r19, 0xFE	; 254
    8d2c:	f9 01       	movw	r30, r18
    8d2e:	20 81       	ld	r18, Z
    8d30:	31 81       	ldd	r19, Z+1	; 0x01
    8d32:	fc 01       	movw	r30, r24
    8d34:	31 83       	std	Z+1, r19	; 0x01
    8d36:	20 83       	st	Z, r18
    8d38:	ce 01       	movw	r24, r28
    8d3a:	85 5f       	subi	r24, 0xF5	; 245
    8d3c:	9e 4f       	sbci	r25, 0xFE	; 254
    8d3e:	fc 01       	movw	r30, r24
    8d40:	80 81       	ld	r24, Z
    8d42:	91 81       	ldd	r25, Z+1	; 0x01
    8d44:	8c 01       	movw	r16, r24
    8d46:	c8 01       	movw	r24, r16
    8d48:	01 97       	sbiw	r24, 0x01	; 1
    8d4a:	f1 f7       	brne	.-4      	; 0x8d48 <pick_drop+0x1e36>
    8d4c:	8c 01       	movw	r16, r24
    8d4e:	ce 01       	movw	r24, r28
    8d50:	85 5f       	subi	r24, 0xF5	; 245
    8d52:	9e 4f       	sbci	r25, 0xFE	; 254
    8d54:	fc 01       	movw	r30, r24
    8d56:	11 83       	std	Z+1, r17	; 0x01
    8d58:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_left();
    8d5a:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
			back_mm(pdback);
    8d5e:	89 81       	ldd	r24, Y+1	; 0x01
    8d60:	9a 81       	ldd	r25, Y+2	; 0x02
    8d62:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8d66:	9e 01       	movw	r18, r28
    8d68:	23 5f       	subi	r18, 0xF3	; 243
    8d6a:	3e 4f       	sbci	r19, 0xFE	; 254
    8d6c:	80 e0       	ldi	r24, 0x00	; 0
    8d6e:	90 e0       	ldi	r25, 0x00	; 0
    8d70:	a0 ea       	ldi	r26, 0xA0	; 160
    8d72:	b1 e4       	ldi	r27, 0x41	; 65
    8d74:	f9 01       	movw	r30, r18
    8d76:	80 83       	st	Z, r24
    8d78:	91 83       	std	Z+1, r25	; 0x01
    8d7a:	a2 83       	std	Z+2, r26	; 0x02
    8d7c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8d7e:	8e 01       	movw	r16, r28
    8d80:	0f 5e       	subi	r16, 0xEF	; 239
    8d82:	1e 4f       	sbci	r17, 0xFE	; 254
    8d84:	ce 01       	movw	r24, r28
    8d86:	83 5f       	subi	r24, 0xF3	; 243
    8d88:	9e 4f       	sbci	r25, 0xFE	; 254
    8d8a:	fc 01       	movw	r30, r24
    8d8c:	60 81       	ld	r22, Z
    8d8e:	71 81       	ldd	r23, Z+1	; 0x01
    8d90:	82 81       	ldd	r24, Z+2	; 0x02
    8d92:	93 81       	ldd	r25, Z+3	; 0x03
    8d94:	26 e6       	ldi	r18, 0x66	; 102
    8d96:	36 e6       	ldi	r19, 0x66	; 102
    8d98:	46 e6       	ldi	r20, 0x66	; 102
    8d9a:	55 e4       	ldi	r21, 0x45	; 69
    8d9c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8da0:	dc 01       	movw	r26, r24
    8da2:	cb 01       	movw	r24, r22
    8da4:	f8 01       	movw	r30, r16
    8da6:	80 83       	st	Z, r24
    8da8:	91 83       	std	Z+1, r25	; 0x01
    8daa:	a2 83       	std	Z+2, r26	; 0x02
    8dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8dae:	ce 01       	movw	r24, r28
    8db0:	8f 5e       	subi	r24, 0xEF	; 239
    8db2:	9e 4f       	sbci	r25, 0xFE	; 254
    8db4:	11 e0       	ldi	r17, 0x01	; 1
    8db6:	fc 01       	movw	r30, r24
    8db8:	60 81       	ld	r22, Z
    8dba:	71 81       	ldd	r23, Z+1	; 0x01
    8dbc:	82 81       	ldd	r24, Z+2	; 0x02
    8dbe:	93 81       	ldd	r25, Z+3	; 0x03
    8dc0:	20 e0       	ldi	r18, 0x00	; 0
    8dc2:	30 e0       	ldi	r19, 0x00	; 0
    8dc4:	40 e8       	ldi	r20, 0x80	; 128
    8dc6:	5f e3       	ldi	r21, 0x3F	; 63
    8dc8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    8dcc:	88 23       	and	r24, r24
    8dce:	0c f0       	brlt	.+2      	; 0x8dd2 <pick_drop+0x1ec0>
    8dd0:	10 e0       	ldi	r17, 0x00	; 0
    8dd2:	11 23       	and	r17, r17
    8dd4:	49 f0       	breq	.+18     	; 0x8de8 <pick_drop+0x1ed6>
		__ticks = 1;
    8dd6:	ce 01       	movw	r24, r28
    8dd8:	8b 5e       	subi	r24, 0xEB	; 235
    8dda:	9e 4f       	sbci	r25, 0xFE	; 254
    8ddc:	21 e0       	ldi	r18, 0x01	; 1
    8dde:	30 e0       	ldi	r19, 0x00	; 0
    8de0:	fc 01       	movw	r30, r24
    8de2:	31 83       	std	Z+1, r19	; 0x01
    8de4:	20 83       	st	Z, r18
    8de6:	75 c0       	rjmp	.+234    	; 0x8ed2 <pick_drop+0x1fc0>
	else if (__tmp > 65535)
    8de8:	ce 01       	movw	r24, r28
    8dea:	8f 5e       	subi	r24, 0xEF	; 239
    8dec:	9e 4f       	sbci	r25, 0xFE	; 254
    8dee:	11 e0       	ldi	r17, 0x01	; 1
    8df0:	fc 01       	movw	r30, r24
    8df2:	60 81       	ld	r22, Z
    8df4:	71 81       	ldd	r23, Z+1	; 0x01
    8df6:	82 81       	ldd	r24, Z+2	; 0x02
    8df8:	93 81       	ldd	r25, Z+3	; 0x03
    8dfa:	20 e0       	ldi	r18, 0x00	; 0
    8dfc:	3f ef       	ldi	r19, 0xFF	; 255
    8dfe:	4f e7       	ldi	r20, 0x7F	; 127
    8e00:	57 e4       	ldi	r21, 0x47	; 71
    8e02:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8e06:	18 16       	cp	r1, r24
    8e08:	0c f0       	brlt	.+2      	; 0x8e0c <pick_drop+0x1efa>
    8e0a:	10 e0       	ldi	r17, 0x00	; 0
    8e0c:	11 23       	and	r17, r17
    8e0e:	09 f4       	brne	.+2      	; 0x8e12 <pick_drop+0x1f00>
    8e10:	4e c0       	rjmp	.+156    	; 0x8eae <pick_drop+0x1f9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8e12:	ce 01       	movw	r24, r28
    8e14:	83 5f       	subi	r24, 0xF3	; 243
    8e16:	9e 4f       	sbci	r25, 0xFE	; 254
    8e18:	fc 01       	movw	r30, r24
    8e1a:	60 81       	ld	r22, Z
    8e1c:	71 81       	ldd	r23, Z+1	; 0x01
    8e1e:	82 81       	ldd	r24, Z+2	; 0x02
    8e20:	93 81       	ldd	r25, Z+3	; 0x03
    8e22:	20 e0       	ldi	r18, 0x00	; 0
    8e24:	30 e0       	ldi	r19, 0x00	; 0
    8e26:	40 e2       	ldi	r20, 0x20	; 32
    8e28:	51 e4       	ldi	r21, 0x41	; 65
    8e2a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8e2e:	dc 01       	movw	r26, r24
    8e30:	cb 01       	movw	r24, r22
    8e32:	8e 01       	movw	r16, r28
    8e34:	0b 5e       	subi	r16, 0xEB	; 235
    8e36:	1e 4f       	sbci	r17, 0xFE	; 254
    8e38:	bc 01       	movw	r22, r24
    8e3a:	cd 01       	movw	r24, r26
    8e3c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8e40:	dc 01       	movw	r26, r24
    8e42:	cb 01       	movw	r24, r22
    8e44:	f8 01       	movw	r30, r16
    8e46:	91 83       	std	Z+1, r25	; 0x01
    8e48:	80 83       	st	Z, r24
    8e4a:	27 c0       	rjmp	.+78     	; 0x8e9a <pick_drop+0x1f88>
    8e4c:	ce 01       	movw	r24, r28
    8e4e:	89 5e       	subi	r24, 0xE9	; 233
    8e50:	9e 4f       	sbci	r25, 0xFE	; 254
    8e52:	20 e7       	ldi	r18, 0x70	; 112
    8e54:	31 e0       	ldi	r19, 0x01	; 1
    8e56:	fc 01       	movw	r30, r24
    8e58:	31 83       	std	Z+1, r19	; 0x01
    8e5a:	20 83       	st	Z, r18
    8e5c:	ce 01       	movw	r24, r28
    8e5e:	89 5e       	subi	r24, 0xE9	; 233
    8e60:	9e 4f       	sbci	r25, 0xFE	; 254
    8e62:	fc 01       	movw	r30, r24
    8e64:	80 81       	ld	r24, Z
    8e66:	91 81       	ldd	r25, Z+1	; 0x01
    8e68:	8c 01       	movw	r16, r24
    8e6a:	c8 01       	movw	r24, r16
    8e6c:	01 97       	sbiw	r24, 0x01	; 1
    8e6e:	f1 f7       	brne	.-4      	; 0x8e6c <pick_drop+0x1f5a>
    8e70:	8c 01       	movw	r16, r24
    8e72:	ce 01       	movw	r24, r28
    8e74:	89 5e       	subi	r24, 0xE9	; 233
    8e76:	9e 4f       	sbci	r25, 0xFE	; 254
    8e78:	fc 01       	movw	r30, r24
    8e7a:	11 83       	std	Z+1, r17	; 0x01
    8e7c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8e7e:	ce 01       	movw	r24, r28
    8e80:	8b 5e       	subi	r24, 0xEB	; 235
    8e82:	9e 4f       	sbci	r25, 0xFE	; 254
    8e84:	9e 01       	movw	r18, r28
    8e86:	2b 5e       	subi	r18, 0xEB	; 235
    8e88:	3e 4f       	sbci	r19, 0xFE	; 254
    8e8a:	f9 01       	movw	r30, r18
    8e8c:	20 81       	ld	r18, Z
    8e8e:	31 81       	ldd	r19, Z+1	; 0x01
    8e90:	21 50       	subi	r18, 0x01	; 1
    8e92:	30 40       	sbci	r19, 0x00	; 0
    8e94:	fc 01       	movw	r30, r24
    8e96:	31 83       	std	Z+1, r19	; 0x01
    8e98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8e9a:	ce 01       	movw	r24, r28
    8e9c:	8b 5e       	subi	r24, 0xEB	; 235
    8e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    8ea0:	fc 01       	movw	r30, r24
    8ea2:	80 81       	ld	r24, Z
    8ea4:	91 81       	ldd	r25, Z+1	; 0x01
    8ea6:	00 97       	sbiw	r24, 0x00	; 0
    8ea8:	89 f6       	brne	.-94     	; 0x8e4c <pick_drop+0x1f3a>
    8eaa:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8eae:	8e 01       	movw	r16, r28
    8eb0:	0b 5e       	subi	r16, 0xEB	; 235
    8eb2:	1e 4f       	sbci	r17, 0xFE	; 254
    8eb4:	ce 01       	movw	r24, r28
    8eb6:	8f 5e       	subi	r24, 0xEF	; 239
    8eb8:	9e 4f       	sbci	r25, 0xFE	; 254
    8eba:	fc 01       	movw	r30, r24
    8ebc:	60 81       	ld	r22, Z
    8ebe:	71 81       	ldd	r23, Z+1	; 0x01
    8ec0:	82 81       	ldd	r24, Z+2	; 0x02
    8ec2:	93 81       	ldd	r25, Z+3	; 0x03
    8ec4:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    8ec8:	dc 01       	movw	r26, r24
    8eca:	cb 01       	movw	r24, r22
    8ecc:	f8 01       	movw	r30, r16
    8ece:	91 83       	std	Z+1, r25	; 0x01
    8ed0:	80 83       	st	Z, r24
    8ed2:	ce 01       	movw	r24, r28
    8ed4:	87 5e       	subi	r24, 0xE7	; 231
    8ed6:	9e 4f       	sbci	r25, 0xFE	; 254
    8ed8:	9e 01       	movw	r18, r28
    8eda:	2b 5e       	subi	r18, 0xEB	; 235
    8edc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ede:	f9 01       	movw	r30, r18
    8ee0:	20 81       	ld	r18, Z
    8ee2:	31 81       	ldd	r19, Z+1	; 0x01
    8ee4:	fc 01       	movw	r30, r24
    8ee6:	31 83       	std	Z+1, r19	; 0x01
    8ee8:	20 83       	st	Z, r18
    8eea:	ce 01       	movw	r24, r28
    8eec:	87 5e       	subi	r24, 0xE7	; 231
    8eee:	9e 4f       	sbci	r25, 0xFE	; 254
    8ef0:	fc 01       	movw	r30, r24
    8ef2:	80 81       	ld	r24, Z
    8ef4:	91 81       	ldd	r25, Z+1	; 0x01
    8ef6:	8c 01       	movw	r16, r24
    8ef8:	c8 01       	movw	r24, r16
    8efa:	01 97       	sbiw	r24, 0x01	; 1
    8efc:	f1 f7       	brne	.-4      	; 0x8efa <pick_drop+0x1fe8>
    8efe:	8c 01       	movw	r16, r24
    8f00:	ce 01       	movw	r24, r28
    8f02:	87 5e       	subi	r24, 0xE7	; 231
    8f04:	9e 4f       	sbci	r25, 0xFE	; 254
    8f06:	fc 01       	movw	r30, r24
    8f08:	11 83       	std	Z+1, r17	; 0x01
    8f0a:	00 83       	st	Z, r16
    8f0c:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
			_delay_ms(20);
			}
			else if(master_path[node-1] == 'N')
    8f10:	80 91 63 03 	lds	r24, 0x0363
    8f14:	90 91 64 03 	lds	r25, 0x0364
    8f18:	01 97       	sbiw	r24, 0x01	; 1
    8f1a:	89 59       	subi	r24, 0x99	; 153
    8f1c:	9c 4f       	sbci	r25, 0xFC	; 252
    8f1e:	fc 01       	movw	r30, r24
    8f20:	80 81       	ld	r24, Z
    8f22:	8e 34       	cpi	r24, 0x4E	; 78
    8f24:	09 f0       	breq	.+2      	; 0x8f28 <pick_drop+0x2016>
    8f26:	59 c3       	rjmp	.+1714   	; 0x95da <pick_drop+0x26c8>
			{
				//right_cycle();
				forward_mm(120);
    8f28:	88 e7       	ldi	r24, 0x78	; 120
    8f2a:	90 e0       	ldi	r25, 0x00	; 0
    8f2c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    8f30:	9e 01       	movw	r18, r28
    8f32:	25 5e       	subi	r18, 0xE5	; 229
    8f34:	3e 4f       	sbci	r19, 0xFE	; 254
    8f36:	80 e0       	ldi	r24, 0x00	; 0
    8f38:	90 e0       	ldi	r25, 0x00	; 0
    8f3a:	a0 ea       	ldi	r26, 0xA0	; 160
    8f3c:	b1 e4       	ldi	r27, 0x41	; 65
    8f3e:	f9 01       	movw	r30, r18
    8f40:	80 83       	st	Z, r24
    8f42:	91 83       	std	Z+1, r25	; 0x01
    8f44:	a2 83       	std	Z+2, r26	; 0x02
    8f46:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8f48:	8e 01       	movw	r16, r28
    8f4a:	01 5e       	subi	r16, 0xE1	; 225
    8f4c:	1e 4f       	sbci	r17, 0xFE	; 254
    8f4e:	ce 01       	movw	r24, r28
    8f50:	85 5e       	subi	r24, 0xE5	; 229
    8f52:	9e 4f       	sbci	r25, 0xFE	; 254
    8f54:	fc 01       	movw	r30, r24
    8f56:	60 81       	ld	r22, Z
    8f58:	71 81       	ldd	r23, Z+1	; 0x01
    8f5a:	82 81       	ldd	r24, Z+2	; 0x02
    8f5c:	93 81       	ldd	r25, Z+3	; 0x03
    8f5e:	26 e6       	ldi	r18, 0x66	; 102
    8f60:	36 e6       	ldi	r19, 0x66	; 102
    8f62:	46 e6       	ldi	r20, 0x66	; 102
    8f64:	55 e4       	ldi	r21, 0x45	; 69
    8f66:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8f6a:	dc 01       	movw	r26, r24
    8f6c:	cb 01       	movw	r24, r22
    8f6e:	f8 01       	movw	r30, r16
    8f70:	80 83       	st	Z, r24
    8f72:	91 83       	std	Z+1, r25	; 0x01
    8f74:	a2 83       	std	Z+2, r26	; 0x02
    8f76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8f78:	ce 01       	movw	r24, r28
    8f7a:	81 5e       	subi	r24, 0xE1	; 225
    8f7c:	9e 4f       	sbci	r25, 0xFE	; 254
    8f7e:	11 e0       	ldi	r17, 0x01	; 1
    8f80:	fc 01       	movw	r30, r24
    8f82:	60 81       	ld	r22, Z
    8f84:	71 81       	ldd	r23, Z+1	; 0x01
    8f86:	82 81       	ldd	r24, Z+2	; 0x02
    8f88:	93 81       	ldd	r25, Z+3	; 0x03
    8f8a:	20 e0       	ldi	r18, 0x00	; 0
    8f8c:	30 e0       	ldi	r19, 0x00	; 0
    8f8e:	40 e8       	ldi	r20, 0x80	; 128
    8f90:	5f e3       	ldi	r21, 0x3F	; 63
    8f92:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    8f96:	88 23       	and	r24, r24
    8f98:	0c f0       	brlt	.+2      	; 0x8f9c <pick_drop+0x208a>
    8f9a:	10 e0       	ldi	r17, 0x00	; 0
    8f9c:	11 23       	and	r17, r17
    8f9e:	49 f0       	breq	.+18     	; 0x8fb2 <pick_drop+0x20a0>
		__ticks = 1;
    8fa0:	ce 01       	movw	r24, r28
    8fa2:	8d 5d       	subi	r24, 0xDD	; 221
    8fa4:	9e 4f       	sbci	r25, 0xFE	; 254
    8fa6:	21 e0       	ldi	r18, 0x01	; 1
    8fa8:	30 e0       	ldi	r19, 0x00	; 0
    8faa:	fc 01       	movw	r30, r24
    8fac:	31 83       	std	Z+1, r19	; 0x01
    8fae:	20 83       	st	Z, r18
    8fb0:	74 c0       	rjmp	.+232    	; 0x909a <pick_drop+0x2188>
	else if (__tmp > 65535)
    8fb2:	ce 01       	movw	r24, r28
    8fb4:	81 5e       	subi	r24, 0xE1	; 225
    8fb6:	9e 4f       	sbci	r25, 0xFE	; 254
    8fb8:	11 e0       	ldi	r17, 0x01	; 1
    8fba:	fc 01       	movw	r30, r24
    8fbc:	60 81       	ld	r22, Z
    8fbe:	71 81       	ldd	r23, Z+1	; 0x01
    8fc0:	82 81       	ldd	r24, Z+2	; 0x02
    8fc2:	93 81       	ldd	r25, Z+3	; 0x03
    8fc4:	20 e0       	ldi	r18, 0x00	; 0
    8fc6:	3f ef       	ldi	r19, 0xFF	; 255
    8fc8:	4f e7       	ldi	r20, 0x7F	; 127
    8fca:	57 e4       	ldi	r21, 0x47	; 71
    8fcc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    8fd0:	18 16       	cp	r1, r24
    8fd2:	0c f0       	brlt	.+2      	; 0x8fd6 <pick_drop+0x20c4>
    8fd4:	10 e0       	ldi	r17, 0x00	; 0
    8fd6:	11 23       	and	r17, r17
    8fd8:	09 f4       	brne	.+2      	; 0x8fdc <pick_drop+0x20ca>
    8fda:	4d c0       	rjmp	.+154    	; 0x9076 <pick_drop+0x2164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8fdc:	ce 01       	movw	r24, r28
    8fde:	85 5e       	subi	r24, 0xE5	; 229
    8fe0:	9e 4f       	sbci	r25, 0xFE	; 254
    8fe2:	fc 01       	movw	r30, r24
    8fe4:	60 81       	ld	r22, Z
    8fe6:	71 81       	ldd	r23, Z+1	; 0x01
    8fe8:	82 81       	ldd	r24, Z+2	; 0x02
    8fea:	93 81       	ldd	r25, Z+3	; 0x03
    8fec:	20 e0       	ldi	r18, 0x00	; 0
    8fee:	30 e0       	ldi	r19, 0x00	; 0
    8ff0:	40 e2       	ldi	r20, 0x20	; 32
    8ff2:	51 e4       	ldi	r21, 0x41	; 65
    8ff4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    8ff8:	dc 01       	movw	r26, r24
    8ffa:	cb 01       	movw	r24, r22
    8ffc:	8e 01       	movw	r16, r28
    8ffe:	0d 5d       	subi	r16, 0xDD	; 221
    9000:	1e 4f       	sbci	r17, 0xFE	; 254
    9002:	bc 01       	movw	r22, r24
    9004:	cd 01       	movw	r24, r26
    9006:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    900a:	dc 01       	movw	r26, r24
    900c:	cb 01       	movw	r24, r22
    900e:	f8 01       	movw	r30, r16
    9010:	91 83       	std	Z+1, r25	; 0x01
    9012:	80 83       	st	Z, r24
    9014:	27 c0       	rjmp	.+78     	; 0x9064 <pick_drop+0x2152>
    9016:	ce 01       	movw	r24, r28
    9018:	8b 5d       	subi	r24, 0xDB	; 219
    901a:	9e 4f       	sbci	r25, 0xFE	; 254
    901c:	20 e7       	ldi	r18, 0x70	; 112
    901e:	31 e0       	ldi	r19, 0x01	; 1
    9020:	fc 01       	movw	r30, r24
    9022:	31 83       	std	Z+1, r19	; 0x01
    9024:	20 83       	st	Z, r18
    9026:	ce 01       	movw	r24, r28
    9028:	8b 5d       	subi	r24, 0xDB	; 219
    902a:	9e 4f       	sbci	r25, 0xFE	; 254
    902c:	fc 01       	movw	r30, r24
    902e:	80 81       	ld	r24, Z
    9030:	91 81       	ldd	r25, Z+1	; 0x01
    9032:	8c 01       	movw	r16, r24
    9034:	c8 01       	movw	r24, r16
    9036:	01 97       	sbiw	r24, 0x01	; 1
    9038:	f1 f7       	brne	.-4      	; 0x9036 <pick_drop+0x2124>
    903a:	8c 01       	movw	r16, r24
    903c:	ce 01       	movw	r24, r28
    903e:	8b 5d       	subi	r24, 0xDB	; 219
    9040:	9e 4f       	sbci	r25, 0xFE	; 254
    9042:	fc 01       	movw	r30, r24
    9044:	11 83       	std	Z+1, r17	; 0x01
    9046:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9048:	ce 01       	movw	r24, r28
    904a:	8d 5d       	subi	r24, 0xDD	; 221
    904c:	9e 4f       	sbci	r25, 0xFE	; 254
    904e:	9e 01       	movw	r18, r28
    9050:	2d 5d       	subi	r18, 0xDD	; 221
    9052:	3e 4f       	sbci	r19, 0xFE	; 254
    9054:	f9 01       	movw	r30, r18
    9056:	20 81       	ld	r18, Z
    9058:	31 81       	ldd	r19, Z+1	; 0x01
    905a:	21 50       	subi	r18, 0x01	; 1
    905c:	30 40       	sbci	r19, 0x00	; 0
    905e:	fc 01       	movw	r30, r24
    9060:	31 83       	std	Z+1, r19	; 0x01
    9062:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9064:	ce 01       	movw	r24, r28
    9066:	8d 5d       	subi	r24, 0xDD	; 221
    9068:	9e 4f       	sbci	r25, 0xFE	; 254
    906a:	fc 01       	movw	r30, r24
    906c:	80 81       	ld	r24, Z
    906e:	91 81       	ldd	r25, Z+1	; 0x01
    9070:	00 97       	sbiw	r24, 0x00	; 0
    9072:	89 f6       	brne	.-94     	; 0x9016 <pick_drop+0x2104>
    9074:	2f c0       	rjmp	.+94     	; 0x90d4 <pick_drop+0x21c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9076:	8e 01       	movw	r16, r28
    9078:	0d 5d       	subi	r16, 0xDD	; 221
    907a:	1e 4f       	sbci	r17, 0xFE	; 254
    907c:	ce 01       	movw	r24, r28
    907e:	81 5e       	subi	r24, 0xE1	; 225
    9080:	9e 4f       	sbci	r25, 0xFE	; 254
    9082:	fc 01       	movw	r30, r24
    9084:	60 81       	ld	r22, Z
    9086:	71 81       	ldd	r23, Z+1	; 0x01
    9088:	82 81       	ldd	r24, Z+2	; 0x02
    908a:	93 81       	ldd	r25, Z+3	; 0x03
    908c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9090:	dc 01       	movw	r26, r24
    9092:	cb 01       	movw	r24, r22
    9094:	f8 01       	movw	r30, r16
    9096:	91 83       	std	Z+1, r25	; 0x01
    9098:	80 83       	st	Z, r24
    909a:	ce 01       	movw	r24, r28
    909c:	89 5d       	subi	r24, 0xD9	; 217
    909e:	9e 4f       	sbci	r25, 0xFE	; 254
    90a0:	9e 01       	movw	r18, r28
    90a2:	2d 5d       	subi	r18, 0xDD	; 221
    90a4:	3e 4f       	sbci	r19, 0xFE	; 254
    90a6:	f9 01       	movw	r30, r18
    90a8:	20 81       	ld	r18, Z
    90aa:	31 81       	ldd	r19, Z+1	; 0x01
    90ac:	fc 01       	movw	r30, r24
    90ae:	31 83       	std	Z+1, r19	; 0x01
    90b0:	20 83       	st	Z, r18
    90b2:	ce 01       	movw	r24, r28
    90b4:	89 5d       	subi	r24, 0xD9	; 217
    90b6:	9e 4f       	sbci	r25, 0xFE	; 254
    90b8:	fc 01       	movw	r30, r24
    90ba:	80 81       	ld	r24, Z
    90bc:	91 81       	ldd	r25, Z+1	; 0x01
    90be:	8c 01       	movw	r16, r24
    90c0:	c8 01       	movw	r24, r16
    90c2:	01 97       	sbiw	r24, 0x01	; 1
    90c4:	f1 f7       	brne	.-4      	; 0x90c2 <pick_drop+0x21b0>
    90c6:	8c 01       	movw	r16, r24
    90c8:	ce 01       	movw	r24, r28
    90ca:	89 5d       	subi	r24, 0xD9	; 217
    90cc:	9e 4f       	sbci	r25, 0xFE	; 254
    90ce:	fc 01       	movw	r30, r24
    90d0:	11 83       	std	Z+1, r17	; 0x01
    90d2:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_right2();
    90d4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    90d8:	9e 01       	movw	r18, r28
    90da:	27 5d       	subi	r18, 0xD7	; 215
    90dc:	3e 4f       	sbci	r19, 0xFE	; 254
    90de:	80 e0       	ldi	r24, 0x00	; 0
    90e0:	90 e0       	ldi	r25, 0x00	; 0
    90e2:	a8 e4       	ldi	r26, 0x48	; 72
    90e4:	b2 e4       	ldi	r27, 0x42	; 66
    90e6:	f9 01       	movw	r30, r18
    90e8:	80 83       	st	Z, r24
    90ea:	91 83       	std	Z+1, r25	; 0x01
    90ec:	a2 83       	std	Z+2, r26	; 0x02
    90ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    90f0:	8e 01       	movw	r16, r28
    90f2:	03 5d       	subi	r16, 0xD3	; 211
    90f4:	1e 4f       	sbci	r17, 0xFE	; 254
    90f6:	ce 01       	movw	r24, r28
    90f8:	87 5d       	subi	r24, 0xD7	; 215
    90fa:	9e 4f       	sbci	r25, 0xFE	; 254
    90fc:	fc 01       	movw	r30, r24
    90fe:	60 81       	ld	r22, Z
    9100:	71 81       	ldd	r23, Z+1	; 0x01
    9102:	82 81       	ldd	r24, Z+2	; 0x02
    9104:	93 81       	ldd	r25, Z+3	; 0x03
    9106:	26 e6       	ldi	r18, 0x66	; 102
    9108:	36 e6       	ldi	r19, 0x66	; 102
    910a:	46 e6       	ldi	r20, 0x66	; 102
    910c:	55 e4       	ldi	r21, 0x45	; 69
    910e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9112:	dc 01       	movw	r26, r24
    9114:	cb 01       	movw	r24, r22
    9116:	f8 01       	movw	r30, r16
    9118:	80 83       	st	Z, r24
    911a:	91 83       	std	Z+1, r25	; 0x01
    911c:	a2 83       	std	Z+2, r26	; 0x02
    911e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9120:	ce 01       	movw	r24, r28
    9122:	83 5d       	subi	r24, 0xD3	; 211
    9124:	9e 4f       	sbci	r25, 0xFE	; 254
    9126:	11 e0       	ldi	r17, 0x01	; 1
    9128:	fc 01       	movw	r30, r24
    912a:	60 81       	ld	r22, Z
    912c:	71 81       	ldd	r23, Z+1	; 0x01
    912e:	82 81       	ldd	r24, Z+2	; 0x02
    9130:	93 81       	ldd	r25, Z+3	; 0x03
    9132:	20 e0       	ldi	r18, 0x00	; 0
    9134:	30 e0       	ldi	r19, 0x00	; 0
    9136:	40 e8       	ldi	r20, 0x80	; 128
    9138:	5f e3       	ldi	r21, 0x3F	; 63
    913a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    913e:	88 23       	and	r24, r24
    9140:	0c f0       	brlt	.+2      	; 0x9144 <pick_drop+0x2232>
    9142:	10 e0       	ldi	r17, 0x00	; 0
    9144:	11 23       	and	r17, r17
    9146:	49 f0       	breq	.+18     	; 0x915a <pick_drop+0x2248>
		__ticks = 1;
    9148:	ce 01       	movw	r24, r28
    914a:	8f 5c       	subi	r24, 0xCF	; 207
    914c:	9e 4f       	sbci	r25, 0xFE	; 254
    914e:	21 e0       	ldi	r18, 0x01	; 1
    9150:	30 e0       	ldi	r19, 0x00	; 0
    9152:	fc 01       	movw	r30, r24
    9154:	31 83       	std	Z+1, r19	; 0x01
    9156:	20 83       	st	Z, r18
    9158:	74 c0       	rjmp	.+232    	; 0x9242 <pick_drop+0x2330>
	else if (__tmp > 65535)
    915a:	ce 01       	movw	r24, r28
    915c:	83 5d       	subi	r24, 0xD3	; 211
    915e:	9e 4f       	sbci	r25, 0xFE	; 254
    9160:	11 e0       	ldi	r17, 0x01	; 1
    9162:	fc 01       	movw	r30, r24
    9164:	60 81       	ld	r22, Z
    9166:	71 81       	ldd	r23, Z+1	; 0x01
    9168:	82 81       	ldd	r24, Z+2	; 0x02
    916a:	93 81       	ldd	r25, Z+3	; 0x03
    916c:	20 e0       	ldi	r18, 0x00	; 0
    916e:	3f ef       	ldi	r19, 0xFF	; 255
    9170:	4f e7       	ldi	r20, 0x7F	; 127
    9172:	57 e4       	ldi	r21, 0x47	; 71
    9174:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    9178:	18 16       	cp	r1, r24
    917a:	0c f0       	brlt	.+2      	; 0x917e <pick_drop+0x226c>
    917c:	10 e0       	ldi	r17, 0x00	; 0
    917e:	11 23       	and	r17, r17
    9180:	09 f4       	brne	.+2      	; 0x9184 <pick_drop+0x2272>
    9182:	4d c0       	rjmp	.+154    	; 0x921e <pick_drop+0x230c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9184:	ce 01       	movw	r24, r28
    9186:	87 5d       	subi	r24, 0xD7	; 215
    9188:	9e 4f       	sbci	r25, 0xFE	; 254
    918a:	fc 01       	movw	r30, r24
    918c:	60 81       	ld	r22, Z
    918e:	71 81       	ldd	r23, Z+1	; 0x01
    9190:	82 81       	ldd	r24, Z+2	; 0x02
    9192:	93 81       	ldd	r25, Z+3	; 0x03
    9194:	20 e0       	ldi	r18, 0x00	; 0
    9196:	30 e0       	ldi	r19, 0x00	; 0
    9198:	40 e2       	ldi	r20, 0x20	; 32
    919a:	51 e4       	ldi	r21, 0x41	; 65
    919c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    91a0:	dc 01       	movw	r26, r24
    91a2:	cb 01       	movw	r24, r22
    91a4:	8e 01       	movw	r16, r28
    91a6:	0f 5c       	subi	r16, 0xCF	; 207
    91a8:	1e 4f       	sbci	r17, 0xFE	; 254
    91aa:	bc 01       	movw	r22, r24
    91ac:	cd 01       	movw	r24, r26
    91ae:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    91b2:	dc 01       	movw	r26, r24
    91b4:	cb 01       	movw	r24, r22
    91b6:	f8 01       	movw	r30, r16
    91b8:	91 83       	std	Z+1, r25	; 0x01
    91ba:	80 83       	st	Z, r24
    91bc:	27 c0       	rjmp	.+78     	; 0x920c <pick_drop+0x22fa>
    91be:	ce 01       	movw	r24, r28
    91c0:	8d 5c       	subi	r24, 0xCD	; 205
    91c2:	9e 4f       	sbci	r25, 0xFE	; 254
    91c4:	20 e7       	ldi	r18, 0x70	; 112
    91c6:	31 e0       	ldi	r19, 0x01	; 1
    91c8:	fc 01       	movw	r30, r24
    91ca:	31 83       	std	Z+1, r19	; 0x01
    91cc:	20 83       	st	Z, r18
    91ce:	ce 01       	movw	r24, r28
    91d0:	8d 5c       	subi	r24, 0xCD	; 205
    91d2:	9e 4f       	sbci	r25, 0xFE	; 254
    91d4:	fc 01       	movw	r30, r24
    91d6:	80 81       	ld	r24, Z
    91d8:	91 81       	ldd	r25, Z+1	; 0x01
    91da:	8c 01       	movw	r16, r24
    91dc:	c8 01       	movw	r24, r16
    91de:	01 97       	sbiw	r24, 0x01	; 1
    91e0:	f1 f7       	brne	.-4      	; 0x91de <pick_drop+0x22cc>
    91e2:	8c 01       	movw	r16, r24
    91e4:	ce 01       	movw	r24, r28
    91e6:	8d 5c       	subi	r24, 0xCD	; 205
    91e8:	9e 4f       	sbci	r25, 0xFE	; 254
    91ea:	fc 01       	movw	r30, r24
    91ec:	11 83       	std	Z+1, r17	; 0x01
    91ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    91f0:	ce 01       	movw	r24, r28
    91f2:	8f 5c       	subi	r24, 0xCF	; 207
    91f4:	9e 4f       	sbci	r25, 0xFE	; 254
    91f6:	9e 01       	movw	r18, r28
    91f8:	2f 5c       	subi	r18, 0xCF	; 207
    91fa:	3e 4f       	sbci	r19, 0xFE	; 254
    91fc:	f9 01       	movw	r30, r18
    91fe:	20 81       	ld	r18, Z
    9200:	31 81       	ldd	r19, Z+1	; 0x01
    9202:	21 50       	subi	r18, 0x01	; 1
    9204:	30 40       	sbci	r19, 0x00	; 0
    9206:	fc 01       	movw	r30, r24
    9208:	31 83       	std	Z+1, r19	; 0x01
    920a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    920c:	ce 01       	movw	r24, r28
    920e:	8f 5c       	subi	r24, 0xCF	; 207
    9210:	9e 4f       	sbci	r25, 0xFE	; 254
    9212:	fc 01       	movw	r30, r24
    9214:	80 81       	ld	r24, Z
    9216:	91 81       	ldd	r25, Z+1	; 0x01
    9218:	00 97       	sbiw	r24, 0x00	; 0
    921a:	89 f6       	brne	.-94     	; 0x91be <pick_drop+0x22ac>
    921c:	2f c0       	rjmp	.+94     	; 0x927c <pick_drop+0x236a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    921e:	8e 01       	movw	r16, r28
    9220:	0f 5c       	subi	r16, 0xCF	; 207
    9222:	1e 4f       	sbci	r17, 0xFE	; 254
    9224:	ce 01       	movw	r24, r28
    9226:	83 5d       	subi	r24, 0xD3	; 211
    9228:	9e 4f       	sbci	r25, 0xFE	; 254
    922a:	fc 01       	movw	r30, r24
    922c:	60 81       	ld	r22, Z
    922e:	71 81       	ldd	r23, Z+1	; 0x01
    9230:	82 81       	ldd	r24, Z+2	; 0x02
    9232:	93 81       	ldd	r25, Z+3	; 0x03
    9234:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9238:	dc 01       	movw	r26, r24
    923a:	cb 01       	movw	r24, r22
    923c:	f8 01       	movw	r30, r16
    923e:	91 83       	std	Z+1, r25	; 0x01
    9240:	80 83       	st	Z, r24
    9242:	ce 01       	movw	r24, r28
    9244:	8b 5c       	subi	r24, 0xCB	; 203
    9246:	9e 4f       	sbci	r25, 0xFE	; 254
    9248:	9e 01       	movw	r18, r28
    924a:	2f 5c       	subi	r18, 0xCF	; 207
    924c:	3e 4f       	sbci	r19, 0xFE	; 254
    924e:	f9 01       	movw	r30, r18
    9250:	20 81       	ld	r18, Z
    9252:	31 81       	ldd	r19, Z+1	; 0x01
    9254:	fc 01       	movw	r30, r24
    9256:	31 83       	std	Z+1, r19	; 0x01
    9258:	20 83       	st	Z, r18
    925a:	ce 01       	movw	r24, r28
    925c:	8b 5c       	subi	r24, 0xCB	; 203
    925e:	9e 4f       	sbci	r25, 0xFE	; 254
    9260:	fc 01       	movw	r30, r24
    9262:	80 81       	ld	r24, Z
    9264:	91 81       	ldd	r25, Z+1	; 0x01
    9266:	8c 01       	movw	r16, r24
    9268:	c8 01       	movw	r24, r16
    926a:	01 97       	sbiw	r24, 0x01	; 1
    926c:	f1 f7       	brne	.-4      	; 0x926a <pick_drop+0x2358>
    926e:	8c 01       	movw	r16, r24
    9270:	ce 01       	movw	r24, r28
    9272:	8b 5c       	subi	r24, 0xCB	; 203
    9274:	9e 4f       	sbci	r25, 0xFE	; 254
    9276:	fc 01       	movw	r30, r24
    9278:	11 83       	std	Z+1, r17	; 0x01
    927a:	00 83       	st	Z, r16
				_delay_ms(50);
				front();
    927c:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    9280:	9e 01       	movw	r18, r28
    9282:	29 5c       	subi	r18, 0xC9	; 201
    9284:	3e 4f       	sbci	r19, 0xFE	; 254
    9286:	80 e0       	ldi	r24, 0x00	; 0
    9288:	90 e0       	ldi	r25, 0x00	; 0
    928a:	a8 ec       	ldi	r26, 0xC8	; 200
    928c:	b2 e4       	ldi	r27, 0x42	; 66
    928e:	f9 01       	movw	r30, r18
    9290:	80 83       	st	Z, r24
    9292:	91 83       	std	Z+1, r25	; 0x01
    9294:	a2 83       	std	Z+2, r26	; 0x02
    9296:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9298:	8e 01       	movw	r16, r28
    929a:	05 5c       	subi	r16, 0xC5	; 197
    929c:	1e 4f       	sbci	r17, 0xFE	; 254
    929e:	ce 01       	movw	r24, r28
    92a0:	89 5c       	subi	r24, 0xC9	; 201
    92a2:	9e 4f       	sbci	r25, 0xFE	; 254
    92a4:	fc 01       	movw	r30, r24
    92a6:	60 81       	ld	r22, Z
    92a8:	71 81       	ldd	r23, Z+1	; 0x01
    92aa:	82 81       	ldd	r24, Z+2	; 0x02
    92ac:	93 81       	ldd	r25, Z+3	; 0x03
    92ae:	26 e6       	ldi	r18, 0x66	; 102
    92b0:	36 e6       	ldi	r19, 0x66	; 102
    92b2:	46 e6       	ldi	r20, 0x66	; 102
    92b4:	55 e4       	ldi	r21, 0x45	; 69
    92b6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    92ba:	dc 01       	movw	r26, r24
    92bc:	cb 01       	movw	r24, r22
    92be:	f8 01       	movw	r30, r16
    92c0:	80 83       	st	Z, r24
    92c2:	91 83       	std	Z+1, r25	; 0x01
    92c4:	a2 83       	std	Z+2, r26	; 0x02
    92c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    92c8:	ce 01       	movw	r24, r28
    92ca:	85 5c       	subi	r24, 0xC5	; 197
    92cc:	9e 4f       	sbci	r25, 0xFE	; 254
    92ce:	11 e0       	ldi	r17, 0x01	; 1
    92d0:	fc 01       	movw	r30, r24
    92d2:	60 81       	ld	r22, Z
    92d4:	71 81       	ldd	r23, Z+1	; 0x01
    92d6:	82 81       	ldd	r24, Z+2	; 0x02
    92d8:	93 81       	ldd	r25, Z+3	; 0x03
    92da:	20 e0       	ldi	r18, 0x00	; 0
    92dc:	30 e0       	ldi	r19, 0x00	; 0
    92de:	40 e8       	ldi	r20, 0x80	; 128
    92e0:	5f e3       	ldi	r21, 0x3F	; 63
    92e2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    92e6:	88 23       	and	r24, r24
    92e8:	0c f0       	brlt	.+2      	; 0x92ec <pick_drop+0x23da>
    92ea:	10 e0       	ldi	r17, 0x00	; 0
    92ec:	11 23       	and	r17, r17
    92ee:	49 f0       	breq	.+18     	; 0x9302 <pick_drop+0x23f0>
		__ticks = 1;
    92f0:	ce 01       	movw	r24, r28
    92f2:	81 5c       	subi	r24, 0xC1	; 193
    92f4:	9e 4f       	sbci	r25, 0xFE	; 254
    92f6:	21 e0       	ldi	r18, 0x01	; 1
    92f8:	30 e0       	ldi	r19, 0x00	; 0
    92fa:	fc 01       	movw	r30, r24
    92fc:	31 83       	std	Z+1, r19	; 0x01
    92fe:	20 83       	st	Z, r18
    9300:	74 c0       	rjmp	.+232    	; 0x93ea <pick_drop+0x24d8>
	else if (__tmp > 65535)
    9302:	ce 01       	movw	r24, r28
    9304:	85 5c       	subi	r24, 0xC5	; 197
    9306:	9e 4f       	sbci	r25, 0xFE	; 254
    9308:	11 e0       	ldi	r17, 0x01	; 1
    930a:	fc 01       	movw	r30, r24
    930c:	60 81       	ld	r22, Z
    930e:	71 81       	ldd	r23, Z+1	; 0x01
    9310:	82 81       	ldd	r24, Z+2	; 0x02
    9312:	93 81       	ldd	r25, Z+3	; 0x03
    9314:	20 e0       	ldi	r18, 0x00	; 0
    9316:	3f ef       	ldi	r19, 0xFF	; 255
    9318:	4f e7       	ldi	r20, 0x7F	; 127
    931a:	57 e4       	ldi	r21, 0x47	; 71
    931c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    9320:	18 16       	cp	r1, r24
    9322:	0c f0       	brlt	.+2      	; 0x9326 <pick_drop+0x2414>
    9324:	10 e0       	ldi	r17, 0x00	; 0
    9326:	11 23       	and	r17, r17
    9328:	09 f4       	brne	.+2      	; 0x932c <pick_drop+0x241a>
    932a:	4d c0       	rjmp	.+154    	; 0x93c6 <pick_drop+0x24b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    932c:	ce 01       	movw	r24, r28
    932e:	89 5c       	subi	r24, 0xC9	; 201
    9330:	9e 4f       	sbci	r25, 0xFE	; 254
    9332:	fc 01       	movw	r30, r24
    9334:	60 81       	ld	r22, Z
    9336:	71 81       	ldd	r23, Z+1	; 0x01
    9338:	82 81       	ldd	r24, Z+2	; 0x02
    933a:	93 81       	ldd	r25, Z+3	; 0x03
    933c:	20 e0       	ldi	r18, 0x00	; 0
    933e:	30 e0       	ldi	r19, 0x00	; 0
    9340:	40 e2       	ldi	r20, 0x20	; 32
    9342:	51 e4       	ldi	r21, 0x41	; 65
    9344:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9348:	dc 01       	movw	r26, r24
    934a:	cb 01       	movw	r24, r22
    934c:	8e 01       	movw	r16, r28
    934e:	01 5c       	subi	r16, 0xC1	; 193
    9350:	1e 4f       	sbci	r17, 0xFE	; 254
    9352:	bc 01       	movw	r22, r24
    9354:	cd 01       	movw	r24, r26
    9356:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    935a:	dc 01       	movw	r26, r24
    935c:	cb 01       	movw	r24, r22
    935e:	f8 01       	movw	r30, r16
    9360:	91 83       	std	Z+1, r25	; 0x01
    9362:	80 83       	st	Z, r24
    9364:	27 c0       	rjmp	.+78     	; 0x93b4 <pick_drop+0x24a2>
    9366:	ce 01       	movw	r24, r28
    9368:	8f 5b       	subi	r24, 0xBF	; 191
    936a:	9e 4f       	sbci	r25, 0xFE	; 254
    936c:	20 e7       	ldi	r18, 0x70	; 112
    936e:	31 e0       	ldi	r19, 0x01	; 1
    9370:	fc 01       	movw	r30, r24
    9372:	31 83       	std	Z+1, r19	; 0x01
    9374:	20 83       	st	Z, r18
    9376:	ce 01       	movw	r24, r28
    9378:	8f 5b       	subi	r24, 0xBF	; 191
    937a:	9e 4f       	sbci	r25, 0xFE	; 254
    937c:	fc 01       	movw	r30, r24
    937e:	80 81       	ld	r24, Z
    9380:	91 81       	ldd	r25, Z+1	; 0x01
    9382:	8c 01       	movw	r16, r24
    9384:	c8 01       	movw	r24, r16
    9386:	01 97       	sbiw	r24, 0x01	; 1
    9388:	f1 f7       	brne	.-4      	; 0x9386 <pick_drop+0x2474>
    938a:	8c 01       	movw	r16, r24
    938c:	ce 01       	movw	r24, r28
    938e:	8f 5b       	subi	r24, 0xBF	; 191
    9390:	9e 4f       	sbci	r25, 0xFE	; 254
    9392:	fc 01       	movw	r30, r24
    9394:	11 83       	std	Z+1, r17	; 0x01
    9396:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9398:	ce 01       	movw	r24, r28
    939a:	81 5c       	subi	r24, 0xC1	; 193
    939c:	9e 4f       	sbci	r25, 0xFE	; 254
    939e:	9e 01       	movw	r18, r28
    93a0:	21 5c       	subi	r18, 0xC1	; 193
    93a2:	3e 4f       	sbci	r19, 0xFE	; 254
    93a4:	f9 01       	movw	r30, r18
    93a6:	20 81       	ld	r18, Z
    93a8:	31 81       	ldd	r19, Z+1	; 0x01
    93aa:	21 50       	subi	r18, 0x01	; 1
    93ac:	30 40       	sbci	r19, 0x00	; 0
    93ae:	fc 01       	movw	r30, r24
    93b0:	31 83       	std	Z+1, r19	; 0x01
    93b2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    93b4:	ce 01       	movw	r24, r28
    93b6:	81 5c       	subi	r24, 0xC1	; 193
    93b8:	9e 4f       	sbci	r25, 0xFE	; 254
    93ba:	fc 01       	movw	r30, r24
    93bc:	80 81       	ld	r24, Z
    93be:	91 81       	ldd	r25, Z+1	; 0x01
    93c0:	00 97       	sbiw	r24, 0x00	; 0
    93c2:	89 f6       	brne	.-94     	; 0x9366 <pick_drop+0x2454>
    93c4:	2f c0       	rjmp	.+94     	; 0x9424 <pick_drop+0x2512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    93c6:	8e 01       	movw	r16, r28
    93c8:	01 5c       	subi	r16, 0xC1	; 193
    93ca:	1e 4f       	sbci	r17, 0xFE	; 254
    93cc:	ce 01       	movw	r24, r28
    93ce:	85 5c       	subi	r24, 0xC5	; 197
    93d0:	9e 4f       	sbci	r25, 0xFE	; 254
    93d2:	fc 01       	movw	r30, r24
    93d4:	60 81       	ld	r22, Z
    93d6:	71 81       	ldd	r23, Z+1	; 0x01
    93d8:	82 81       	ldd	r24, Z+2	; 0x02
    93da:	93 81       	ldd	r25, Z+3	; 0x03
    93dc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    93e0:	dc 01       	movw	r26, r24
    93e2:	cb 01       	movw	r24, r22
    93e4:	f8 01       	movw	r30, r16
    93e6:	91 83       	std	Z+1, r25	; 0x01
    93e8:	80 83       	st	Z, r24
    93ea:	ce 01       	movw	r24, r28
    93ec:	8d 5b       	subi	r24, 0xBD	; 189
    93ee:	9e 4f       	sbci	r25, 0xFE	; 254
    93f0:	9e 01       	movw	r18, r28
    93f2:	21 5c       	subi	r18, 0xC1	; 193
    93f4:	3e 4f       	sbci	r19, 0xFE	; 254
    93f6:	f9 01       	movw	r30, r18
    93f8:	20 81       	ld	r18, Z
    93fa:	31 81       	ldd	r19, Z+1	; 0x01
    93fc:	fc 01       	movw	r30, r24
    93fe:	31 83       	std	Z+1, r19	; 0x01
    9400:	20 83       	st	Z, r18
    9402:	ce 01       	movw	r24, r28
    9404:	8d 5b       	subi	r24, 0xBD	; 189
    9406:	9e 4f       	sbci	r25, 0xFE	; 254
    9408:	fc 01       	movw	r30, r24
    940a:	80 81       	ld	r24, Z
    940c:	91 81       	ldd	r25, Z+1	; 0x01
    940e:	8c 01       	movw	r16, r24
    9410:	c8 01       	movw	r24, r16
    9412:	01 97       	sbiw	r24, 0x01	; 1
    9414:	f1 f7       	brne	.-4      	; 0x9412 <pick_drop+0x2500>
    9416:	8c 01       	movw	r16, r24
    9418:	ce 01       	movw	r24, r28
    941a:	8d 5b       	subi	r24, 0xBD	; 189
    941c:	9e 4f       	sbci	r25, 0xFE	; 254
    941e:	fc 01       	movw	r30, r24
    9420:	11 83       	std	Z+1, r17	; 0x01
    9422:	00 83       	st	Z, r16
				_delay_ms(100);
				correct_left();
    9424:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				back_mm(pdback);
    9428:	89 81       	ldd	r24, Y+1	; 0x01
    942a:	9a 81       	ldd	r25, Y+2	; 0x02
    942c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    9430:	9e 01       	movw	r18, r28
    9432:	2b 5b       	subi	r18, 0xBB	; 187
    9434:	3e 4f       	sbci	r19, 0xFE	; 254
    9436:	80 e0       	ldi	r24, 0x00	; 0
    9438:	90 e0       	ldi	r25, 0x00	; 0
    943a:	a0 ea       	ldi	r26, 0xA0	; 160
    943c:	b1 e4       	ldi	r27, 0x41	; 65
    943e:	f9 01       	movw	r30, r18
    9440:	80 83       	st	Z, r24
    9442:	91 83       	std	Z+1, r25	; 0x01
    9444:	a2 83       	std	Z+2, r26	; 0x02
    9446:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9448:	8e 01       	movw	r16, r28
    944a:	07 5b       	subi	r16, 0xB7	; 183
    944c:	1e 4f       	sbci	r17, 0xFE	; 254
    944e:	ce 01       	movw	r24, r28
    9450:	8b 5b       	subi	r24, 0xBB	; 187
    9452:	9e 4f       	sbci	r25, 0xFE	; 254
    9454:	fc 01       	movw	r30, r24
    9456:	60 81       	ld	r22, Z
    9458:	71 81       	ldd	r23, Z+1	; 0x01
    945a:	82 81       	ldd	r24, Z+2	; 0x02
    945c:	93 81       	ldd	r25, Z+3	; 0x03
    945e:	26 e6       	ldi	r18, 0x66	; 102
    9460:	36 e6       	ldi	r19, 0x66	; 102
    9462:	46 e6       	ldi	r20, 0x66	; 102
    9464:	55 e4       	ldi	r21, 0x45	; 69
    9466:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    946a:	dc 01       	movw	r26, r24
    946c:	cb 01       	movw	r24, r22
    946e:	f8 01       	movw	r30, r16
    9470:	80 83       	st	Z, r24
    9472:	91 83       	std	Z+1, r25	; 0x01
    9474:	a2 83       	std	Z+2, r26	; 0x02
    9476:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9478:	ce 01       	movw	r24, r28
    947a:	87 5b       	subi	r24, 0xB7	; 183
    947c:	9e 4f       	sbci	r25, 0xFE	; 254
    947e:	11 e0       	ldi	r17, 0x01	; 1
    9480:	fc 01       	movw	r30, r24
    9482:	60 81       	ld	r22, Z
    9484:	71 81       	ldd	r23, Z+1	; 0x01
    9486:	82 81       	ldd	r24, Z+2	; 0x02
    9488:	93 81       	ldd	r25, Z+3	; 0x03
    948a:	20 e0       	ldi	r18, 0x00	; 0
    948c:	30 e0       	ldi	r19, 0x00	; 0
    948e:	40 e8       	ldi	r20, 0x80	; 128
    9490:	5f e3       	ldi	r21, 0x3F	; 63
    9492:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    9496:	88 23       	and	r24, r24
    9498:	0c f0       	brlt	.+2      	; 0x949c <pick_drop+0x258a>
    949a:	10 e0       	ldi	r17, 0x00	; 0
    949c:	11 23       	and	r17, r17
    949e:	49 f0       	breq	.+18     	; 0x94b2 <pick_drop+0x25a0>
		__ticks = 1;
    94a0:	ce 01       	movw	r24, r28
    94a2:	83 5b       	subi	r24, 0xB3	; 179
    94a4:	9e 4f       	sbci	r25, 0xFE	; 254
    94a6:	21 e0       	ldi	r18, 0x01	; 1
    94a8:	30 e0       	ldi	r19, 0x00	; 0
    94aa:	fc 01       	movw	r30, r24
    94ac:	31 83       	std	Z+1, r19	; 0x01
    94ae:	20 83       	st	Z, r18
    94b0:	75 c0       	rjmp	.+234    	; 0x959c <pick_drop+0x268a>
	else if (__tmp > 65535)
    94b2:	ce 01       	movw	r24, r28
    94b4:	87 5b       	subi	r24, 0xB7	; 183
    94b6:	9e 4f       	sbci	r25, 0xFE	; 254
    94b8:	11 e0       	ldi	r17, 0x01	; 1
    94ba:	fc 01       	movw	r30, r24
    94bc:	60 81       	ld	r22, Z
    94be:	71 81       	ldd	r23, Z+1	; 0x01
    94c0:	82 81       	ldd	r24, Z+2	; 0x02
    94c2:	93 81       	ldd	r25, Z+3	; 0x03
    94c4:	20 e0       	ldi	r18, 0x00	; 0
    94c6:	3f ef       	ldi	r19, 0xFF	; 255
    94c8:	4f e7       	ldi	r20, 0x7F	; 127
    94ca:	57 e4       	ldi	r21, 0x47	; 71
    94cc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    94d0:	18 16       	cp	r1, r24
    94d2:	0c f0       	brlt	.+2      	; 0x94d6 <pick_drop+0x25c4>
    94d4:	10 e0       	ldi	r17, 0x00	; 0
    94d6:	11 23       	and	r17, r17
    94d8:	09 f4       	brne	.+2      	; 0x94dc <pick_drop+0x25ca>
    94da:	4e c0       	rjmp	.+156    	; 0x9578 <pick_drop+0x2666>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    94dc:	ce 01       	movw	r24, r28
    94de:	8b 5b       	subi	r24, 0xBB	; 187
    94e0:	9e 4f       	sbci	r25, 0xFE	; 254
    94e2:	fc 01       	movw	r30, r24
    94e4:	60 81       	ld	r22, Z
    94e6:	71 81       	ldd	r23, Z+1	; 0x01
    94e8:	82 81       	ldd	r24, Z+2	; 0x02
    94ea:	93 81       	ldd	r25, Z+3	; 0x03
    94ec:	20 e0       	ldi	r18, 0x00	; 0
    94ee:	30 e0       	ldi	r19, 0x00	; 0
    94f0:	40 e2       	ldi	r20, 0x20	; 32
    94f2:	51 e4       	ldi	r21, 0x41	; 65
    94f4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    94f8:	dc 01       	movw	r26, r24
    94fa:	cb 01       	movw	r24, r22
    94fc:	8e 01       	movw	r16, r28
    94fe:	03 5b       	subi	r16, 0xB3	; 179
    9500:	1e 4f       	sbci	r17, 0xFE	; 254
    9502:	bc 01       	movw	r22, r24
    9504:	cd 01       	movw	r24, r26
    9506:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    950a:	dc 01       	movw	r26, r24
    950c:	cb 01       	movw	r24, r22
    950e:	f8 01       	movw	r30, r16
    9510:	91 83       	std	Z+1, r25	; 0x01
    9512:	80 83       	st	Z, r24
    9514:	27 c0       	rjmp	.+78     	; 0x9564 <pick_drop+0x2652>
    9516:	ce 01       	movw	r24, r28
    9518:	81 5b       	subi	r24, 0xB1	; 177
    951a:	9e 4f       	sbci	r25, 0xFE	; 254
    951c:	20 e7       	ldi	r18, 0x70	; 112
    951e:	31 e0       	ldi	r19, 0x01	; 1
    9520:	fc 01       	movw	r30, r24
    9522:	31 83       	std	Z+1, r19	; 0x01
    9524:	20 83       	st	Z, r18
    9526:	ce 01       	movw	r24, r28
    9528:	81 5b       	subi	r24, 0xB1	; 177
    952a:	9e 4f       	sbci	r25, 0xFE	; 254
    952c:	fc 01       	movw	r30, r24
    952e:	80 81       	ld	r24, Z
    9530:	91 81       	ldd	r25, Z+1	; 0x01
    9532:	8c 01       	movw	r16, r24
    9534:	c8 01       	movw	r24, r16
    9536:	01 97       	sbiw	r24, 0x01	; 1
    9538:	f1 f7       	brne	.-4      	; 0x9536 <pick_drop+0x2624>
    953a:	8c 01       	movw	r16, r24
    953c:	ce 01       	movw	r24, r28
    953e:	81 5b       	subi	r24, 0xB1	; 177
    9540:	9e 4f       	sbci	r25, 0xFE	; 254
    9542:	fc 01       	movw	r30, r24
    9544:	11 83       	std	Z+1, r17	; 0x01
    9546:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9548:	ce 01       	movw	r24, r28
    954a:	83 5b       	subi	r24, 0xB3	; 179
    954c:	9e 4f       	sbci	r25, 0xFE	; 254
    954e:	9e 01       	movw	r18, r28
    9550:	23 5b       	subi	r18, 0xB3	; 179
    9552:	3e 4f       	sbci	r19, 0xFE	; 254
    9554:	f9 01       	movw	r30, r18
    9556:	20 81       	ld	r18, Z
    9558:	31 81       	ldd	r19, Z+1	; 0x01
    955a:	21 50       	subi	r18, 0x01	; 1
    955c:	30 40       	sbci	r19, 0x00	; 0
    955e:	fc 01       	movw	r30, r24
    9560:	31 83       	std	Z+1, r19	; 0x01
    9562:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9564:	ce 01       	movw	r24, r28
    9566:	83 5b       	subi	r24, 0xB3	; 179
    9568:	9e 4f       	sbci	r25, 0xFE	; 254
    956a:	fc 01       	movw	r30, r24
    956c:	80 81       	ld	r24, Z
    956e:	91 81       	ldd	r25, Z+1	; 0x01
    9570:	00 97       	sbiw	r24, 0x00	; 0
    9572:	89 f6       	brne	.-94     	; 0x9516 <pick_drop+0x2604>
    9574:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9578:	8e 01       	movw	r16, r28
    957a:	03 5b       	subi	r16, 0xB3	; 179
    957c:	1e 4f       	sbci	r17, 0xFE	; 254
    957e:	ce 01       	movw	r24, r28
    9580:	87 5b       	subi	r24, 0xB7	; 183
    9582:	9e 4f       	sbci	r25, 0xFE	; 254
    9584:	fc 01       	movw	r30, r24
    9586:	60 81       	ld	r22, Z
    9588:	71 81       	ldd	r23, Z+1	; 0x01
    958a:	82 81       	ldd	r24, Z+2	; 0x02
    958c:	93 81       	ldd	r25, Z+3	; 0x03
    958e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9592:	dc 01       	movw	r26, r24
    9594:	cb 01       	movw	r24, r22
    9596:	f8 01       	movw	r30, r16
    9598:	91 83       	std	Z+1, r25	; 0x01
    959a:	80 83       	st	Z, r24
    959c:	ce 01       	movw	r24, r28
    959e:	8f 5a       	subi	r24, 0xAF	; 175
    95a0:	9e 4f       	sbci	r25, 0xFE	; 254
    95a2:	9e 01       	movw	r18, r28
    95a4:	23 5b       	subi	r18, 0xB3	; 179
    95a6:	3e 4f       	sbci	r19, 0xFE	; 254
    95a8:	f9 01       	movw	r30, r18
    95aa:	20 81       	ld	r18, Z
    95ac:	31 81       	ldd	r19, Z+1	; 0x01
    95ae:	fc 01       	movw	r30, r24
    95b0:	31 83       	std	Z+1, r19	; 0x01
    95b2:	20 83       	st	Z, r18
    95b4:	ce 01       	movw	r24, r28
    95b6:	8f 5a       	subi	r24, 0xAF	; 175
    95b8:	9e 4f       	sbci	r25, 0xFE	; 254
    95ba:	fc 01       	movw	r30, r24
    95bc:	80 81       	ld	r24, Z
    95be:	91 81       	ldd	r25, Z+1	; 0x01
    95c0:	8c 01       	movw	r16, r24
    95c2:	c8 01       	movw	r24, r16
    95c4:	01 97       	sbiw	r24, 0x01	; 1
    95c6:	f1 f7       	brne	.-4      	; 0x95c4 <pick_drop+0x26b2>
    95c8:	8c 01       	movw	r16, r24
    95ca:	ce 01       	movw	r24, r28
    95cc:	8f 5a       	subi	r24, 0xAF	; 175
    95ce:	9e 4f       	sbci	r25, 0xFE	; 254
    95d0:	fc 01       	movw	r30, r24
    95d2:	11 83       	std	Z+1, r17	; 0x01
    95d4:	00 83       	st	Z, r16
    95d6:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
				_delay_ms(20);
			}
			
			else if(master_path[node-1] == 'L')
    95da:	80 91 63 03 	lds	r24, 0x0363
    95de:	90 91 64 03 	lds	r25, 0x0364
    95e2:	01 97       	sbiw	r24, 0x01	; 1
    95e4:	89 59       	subi	r24, 0x99	; 153
    95e6:	9c 4f       	sbci	r25, 0xFC	; 252
    95e8:	fc 01       	movw	r30, r24
    95ea:	80 81       	ld	r24, Z
    95ec:	8c 34       	cpi	r24, 0x4C	; 76
    95ee:	11 f0       	breq	.+4      	; 0x95f4 <pick_drop+0x26e2>
    95f0:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
    95f4:	9e 01       	movw	r18, r28
    95f6:	2d 5a       	subi	r18, 0xAD	; 173
    95f8:	3e 4f       	sbci	r19, 0xFE	; 254
    95fa:	80 e0       	ldi	r24, 0x00	; 0
    95fc:	90 e0       	ldi	r25, 0x00	; 0
    95fe:	a8 e4       	ldi	r26, 0x48	; 72
    9600:	b2 e4       	ldi	r27, 0x42	; 66
    9602:	f9 01       	movw	r30, r18
    9604:	80 83       	st	Z, r24
    9606:	91 83       	std	Z+1, r25	; 0x01
    9608:	a2 83       	std	Z+2, r26	; 0x02
    960a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    960c:	8e 01       	movw	r16, r28
    960e:	09 5a       	subi	r16, 0xA9	; 169
    9610:	1e 4f       	sbci	r17, 0xFE	; 254
    9612:	ce 01       	movw	r24, r28
    9614:	8d 5a       	subi	r24, 0xAD	; 173
    9616:	9e 4f       	sbci	r25, 0xFE	; 254
    9618:	fc 01       	movw	r30, r24
    961a:	60 81       	ld	r22, Z
    961c:	71 81       	ldd	r23, Z+1	; 0x01
    961e:	82 81       	ldd	r24, Z+2	; 0x02
    9620:	93 81       	ldd	r25, Z+3	; 0x03
    9622:	26 e6       	ldi	r18, 0x66	; 102
    9624:	36 e6       	ldi	r19, 0x66	; 102
    9626:	46 e6       	ldi	r20, 0x66	; 102
    9628:	55 e4       	ldi	r21, 0x45	; 69
    962a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    962e:	dc 01       	movw	r26, r24
    9630:	cb 01       	movw	r24, r22
    9632:	f8 01       	movw	r30, r16
    9634:	80 83       	st	Z, r24
    9636:	91 83       	std	Z+1, r25	; 0x01
    9638:	a2 83       	std	Z+2, r26	; 0x02
    963a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    963c:	ce 01       	movw	r24, r28
    963e:	89 5a       	subi	r24, 0xA9	; 169
    9640:	9e 4f       	sbci	r25, 0xFE	; 254
    9642:	11 e0       	ldi	r17, 0x01	; 1
    9644:	fc 01       	movw	r30, r24
    9646:	60 81       	ld	r22, Z
    9648:	71 81       	ldd	r23, Z+1	; 0x01
    964a:	82 81       	ldd	r24, Z+2	; 0x02
    964c:	93 81       	ldd	r25, Z+3	; 0x03
    964e:	20 e0       	ldi	r18, 0x00	; 0
    9650:	30 e0       	ldi	r19, 0x00	; 0
    9652:	40 e8       	ldi	r20, 0x80	; 128
    9654:	5f e3       	ldi	r21, 0x3F	; 63
    9656:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    965a:	88 23       	and	r24, r24
    965c:	0c f0       	brlt	.+2      	; 0x9660 <pick_drop+0x274e>
    965e:	10 e0       	ldi	r17, 0x00	; 0
    9660:	11 23       	and	r17, r17
    9662:	49 f0       	breq	.+18     	; 0x9676 <pick_drop+0x2764>
		__ticks = 1;
    9664:	ce 01       	movw	r24, r28
    9666:	85 5a       	subi	r24, 0xA5	; 165
    9668:	9e 4f       	sbci	r25, 0xFE	; 254
    966a:	21 e0       	ldi	r18, 0x01	; 1
    966c:	30 e0       	ldi	r19, 0x00	; 0
    966e:	fc 01       	movw	r30, r24
    9670:	31 83       	std	Z+1, r19	; 0x01
    9672:	20 83       	st	Z, r18
    9674:	74 c0       	rjmp	.+232    	; 0x975e <pick_drop+0x284c>
	else if (__tmp > 65535)
    9676:	ce 01       	movw	r24, r28
    9678:	89 5a       	subi	r24, 0xA9	; 169
    967a:	9e 4f       	sbci	r25, 0xFE	; 254
    967c:	11 e0       	ldi	r17, 0x01	; 1
    967e:	fc 01       	movw	r30, r24
    9680:	60 81       	ld	r22, Z
    9682:	71 81       	ldd	r23, Z+1	; 0x01
    9684:	82 81       	ldd	r24, Z+2	; 0x02
    9686:	93 81       	ldd	r25, Z+3	; 0x03
    9688:	20 e0       	ldi	r18, 0x00	; 0
    968a:	3f ef       	ldi	r19, 0xFF	; 255
    968c:	4f e7       	ldi	r20, 0x7F	; 127
    968e:	57 e4       	ldi	r21, 0x47	; 71
    9690:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    9694:	18 16       	cp	r1, r24
    9696:	0c f0       	brlt	.+2      	; 0x969a <pick_drop+0x2788>
    9698:	10 e0       	ldi	r17, 0x00	; 0
    969a:	11 23       	and	r17, r17
    969c:	09 f4       	brne	.+2      	; 0x96a0 <pick_drop+0x278e>
    969e:	4d c0       	rjmp	.+154    	; 0x973a <pick_drop+0x2828>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    96a0:	ce 01       	movw	r24, r28
    96a2:	8d 5a       	subi	r24, 0xAD	; 173
    96a4:	9e 4f       	sbci	r25, 0xFE	; 254
    96a6:	fc 01       	movw	r30, r24
    96a8:	60 81       	ld	r22, Z
    96aa:	71 81       	ldd	r23, Z+1	; 0x01
    96ac:	82 81       	ldd	r24, Z+2	; 0x02
    96ae:	93 81       	ldd	r25, Z+3	; 0x03
    96b0:	20 e0       	ldi	r18, 0x00	; 0
    96b2:	30 e0       	ldi	r19, 0x00	; 0
    96b4:	40 e2       	ldi	r20, 0x20	; 32
    96b6:	51 e4       	ldi	r21, 0x41	; 65
    96b8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    96bc:	dc 01       	movw	r26, r24
    96be:	cb 01       	movw	r24, r22
    96c0:	8e 01       	movw	r16, r28
    96c2:	05 5a       	subi	r16, 0xA5	; 165
    96c4:	1e 4f       	sbci	r17, 0xFE	; 254
    96c6:	bc 01       	movw	r22, r24
    96c8:	cd 01       	movw	r24, r26
    96ca:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    96ce:	dc 01       	movw	r26, r24
    96d0:	cb 01       	movw	r24, r22
    96d2:	f8 01       	movw	r30, r16
    96d4:	91 83       	std	Z+1, r25	; 0x01
    96d6:	80 83       	st	Z, r24
    96d8:	27 c0       	rjmp	.+78     	; 0x9728 <pick_drop+0x2816>
    96da:	ce 01       	movw	r24, r28
    96dc:	83 5a       	subi	r24, 0xA3	; 163
    96de:	9e 4f       	sbci	r25, 0xFE	; 254
    96e0:	20 e7       	ldi	r18, 0x70	; 112
    96e2:	31 e0       	ldi	r19, 0x01	; 1
    96e4:	fc 01       	movw	r30, r24
    96e6:	31 83       	std	Z+1, r19	; 0x01
    96e8:	20 83       	st	Z, r18
    96ea:	ce 01       	movw	r24, r28
    96ec:	83 5a       	subi	r24, 0xA3	; 163
    96ee:	9e 4f       	sbci	r25, 0xFE	; 254
    96f0:	fc 01       	movw	r30, r24
    96f2:	80 81       	ld	r24, Z
    96f4:	91 81       	ldd	r25, Z+1	; 0x01
    96f6:	8c 01       	movw	r16, r24
    96f8:	c8 01       	movw	r24, r16
    96fa:	01 97       	sbiw	r24, 0x01	; 1
    96fc:	f1 f7       	brne	.-4      	; 0x96fa <pick_drop+0x27e8>
    96fe:	8c 01       	movw	r16, r24
    9700:	ce 01       	movw	r24, r28
    9702:	83 5a       	subi	r24, 0xA3	; 163
    9704:	9e 4f       	sbci	r25, 0xFE	; 254
    9706:	fc 01       	movw	r30, r24
    9708:	11 83       	std	Z+1, r17	; 0x01
    970a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    970c:	ce 01       	movw	r24, r28
    970e:	85 5a       	subi	r24, 0xA5	; 165
    9710:	9e 4f       	sbci	r25, 0xFE	; 254
    9712:	9e 01       	movw	r18, r28
    9714:	25 5a       	subi	r18, 0xA5	; 165
    9716:	3e 4f       	sbci	r19, 0xFE	; 254
    9718:	f9 01       	movw	r30, r18
    971a:	20 81       	ld	r18, Z
    971c:	31 81       	ldd	r19, Z+1	; 0x01
    971e:	21 50       	subi	r18, 0x01	; 1
    9720:	30 40       	sbci	r19, 0x00	; 0
    9722:	fc 01       	movw	r30, r24
    9724:	31 83       	std	Z+1, r19	; 0x01
    9726:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9728:	ce 01       	movw	r24, r28
    972a:	85 5a       	subi	r24, 0xA5	; 165
    972c:	9e 4f       	sbci	r25, 0xFE	; 254
    972e:	fc 01       	movw	r30, r24
    9730:	80 81       	ld	r24, Z
    9732:	91 81       	ldd	r25, Z+1	; 0x01
    9734:	00 97       	sbiw	r24, 0x00	; 0
    9736:	89 f6       	brne	.-94     	; 0x96da <pick_drop+0x27c8>
    9738:	2f c0       	rjmp	.+94     	; 0x9798 <pick_drop+0x2886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    973a:	8e 01       	movw	r16, r28
    973c:	05 5a       	subi	r16, 0xA5	; 165
    973e:	1e 4f       	sbci	r17, 0xFE	; 254
    9740:	ce 01       	movw	r24, r28
    9742:	89 5a       	subi	r24, 0xA9	; 169
    9744:	9e 4f       	sbci	r25, 0xFE	; 254
    9746:	fc 01       	movw	r30, r24
    9748:	60 81       	ld	r22, Z
    974a:	71 81       	ldd	r23, Z+1	; 0x01
    974c:	82 81       	ldd	r24, Z+2	; 0x02
    974e:	93 81       	ldd	r25, Z+3	; 0x03
    9750:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9754:	dc 01       	movw	r26, r24
    9756:	cb 01       	movw	r24, r22
    9758:	f8 01       	movw	r30, r16
    975a:	91 83       	std	Z+1, r25	; 0x01
    975c:	80 83       	st	Z, r24
    975e:	ce 01       	movw	r24, r28
    9760:	81 5a       	subi	r24, 0xA1	; 161
    9762:	9e 4f       	sbci	r25, 0xFE	; 254
    9764:	9e 01       	movw	r18, r28
    9766:	25 5a       	subi	r18, 0xA5	; 165
    9768:	3e 4f       	sbci	r19, 0xFE	; 254
    976a:	f9 01       	movw	r30, r18
    976c:	20 81       	ld	r18, Z
    976e:	31 81       	ldd	r19, Z+1	; 0x01
    9770:	fc 01       	movw	r30, r24
    9772:	31 83       	std	Z+1, r19	; 0x01
    9774:	20 83       	st	Z, r18
    9776:	ce 01       	movw	r24, r28
    9778:	81 5a       	subi	r24, 0xA1	; 161
    977a:	9e 4f       	sbci	r25, 0xFE	; 254
    977c:	fc 01       	movw	r30, r24
    977e:	80 81       	ld	r24, Z
    9780:	91 81       	ldd	r25, Z+1	; 0x01
    9782:	8c 01       	movw	r16, r24
    9784:	c8 01       	movw	r24, r16
    9786:	01 97       	sbiw	r24, 0x01	; 1
    9788:	f1 f7       	brne	.-4      	; 0x9786 <pick_drop+0x2874>
    978a:	8c 01       	movw	r16, r24
    978c:	ce 01       	movw	r24, r28
    978e:	81 5a       	subi	r24, 0xA1	; 161
    9790:	9e 4f       	sbci	r25, 0xFE	; 254
    9792:	fc 01       	movw	r30, r24
    9794:	11 83       	std	Z+1, r17	; 0x01
    9796:	00 83       	st	Z, r16
			{
				//spl_right2();
				_delay_ms(50);
				front();
    9798:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    979c:	9e 01       	movw	r18, r28
    979e:	2f 59       	subi	r18, 0x9F	; 159
    97a0:	3e 4f       	sbci	r19, 0xFE	; 254
    97a2:	80 e0       	ldi	r24, 0x00	; 0
    97a4:	90 e0       	ldi	r25, 0x00	; 0
    97a6:	a8 ec       	ldi	r26, 0xC8	; 200
    97a8:	b2 e4       	ldi	r27, 0x42	; 66
    97aa:	f9 01       	movw	r30, r18
    97ac:	80 83       	st	Z, r24
    97ae:	91 83       	std	Z+1, r25	; 0x01
    97b0:	a2 83       	std	Z+2, r26	; 0x02
    97b2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    97b4:	8e 01       	movw	r16, r28
    97b6:	0b 59       	subi	r16, 0x9B	; 155
    97b8:	1e 4f       	sbci	r17, 0xFE	; 254
    97ba:	ce 01       	movw	r24, r28
    97bc:	8f 59       	subi	r24, 0x9F	; 159
    97be:	9e 4f       	sbci	r25, 0xFE	; 254
    97c0:	fc 01       	movw	r30, r24
    97c2:	60 81       	ld	r22, Z
    97c4:	71 81       	ldd	r23, Z+1	; 0x01
    97c6:	82 81       	ldd	r24, Z+2	; 0x02
    97c8:	93 81       	ldd	r25, Z+3	; 0x03
    97ca:	26 e6       	ldi	r18, 0x66	; 102
    97cc:	36 e6       	ldi	r19, 0x66	; 102
    97ce:	46 e6       	ldi	r20, 0x66	; 102
    97d0:	55 e4       	ldi	r21, 0x45	; 69
    97d2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    97d6:	dc 01       	movw	r26, r24
    97d8:	cb 01       	movw	r24, r22
    97da:	f8 01       	movw	r30, r16
    97dc:	80 83       	st	Z, r24
    97de:	91 83       	std	Z+1, r25	; 0x01
    97e0:	a2 83       	std	Z+2, r26	; 0x02
    97e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    97e4:	ce 01       	movw	r24, r28
    97e6:	8b 59       	subi	r24, 0x9B	; 155
    97e8:	9e 4f       	sbci	r25, 0xFE	; 254
    97ea:	11 e0       	ldi	r17, 0x01	; 1
    97ec:	fc 01       	movw	r30, r24
    97ee:	60 81       	ld	r22, Z
    97f0:	71 81       	ldd	r23, Z+1	; 0x01
    97f2:	82 81       	ldd	r24, Z+2	; 0x02
    97f4:	93 81       	ldd	r25, Z+3	; 0x03
    97f6:	20 e0       	ldi	r18, 0x00	; 0
    97f8:	30 e0       	ldi	r19, 0x00	; 0
    97fa:	40 e8       	ldi	r20, 0x80	; 128
    97fc:	5f e3       	ldi	r21, 0x3F	; 63
    97fe:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    9802:	88 23       	and	r24, r24
    9804:	0c f0       	brlt	.+2      	; 0x9808 <pick_drop+0x28f6>
    9806:	10 e0       	ldi	r17, 0x00	; 0
    9808:	11 23       	and	r17, r17
    980a:	49 f0       	breq	.+18     	; 0x981e <pick_drop+0x290c>
		__ticks = 1;
    980c:	ce 01       	movw	r24, r28
    980e:	87 59       	subi	r24, 0x97	; 151
    9810:	9e 4f       	sbci	r25, 0xFE	; 254
    9812:	21 e0       	ldi	r18, 0x01	; 1
    9814:	30 e0       	ldi	r19, 0x00	; 0
    9816:	fc 01       	movw	r30, r24
    9818:	31 83       	std	Z+1, r19	; 0x01
    981a:	20 83       	st	Z, r18
    981c:	74 c0       	rjmp	.+232    	; 0x9906 <pick_drop+0x29f4>
	else if (__tmp > 65535)
    981e:	ce 01       	movw	r24, r28
    9820:	8b 59       	subi	r24, 0x9B	; 155
    9822:	9e 4f       	sbci	r25, 0xFE	; 254
    9824:	11 e0       	ldi	r17, 0x01	; 1
    9826:	fc 01       	movw	r30, r24
    9828:	60 81       	ld	r22, Z
    982a:	71 81       	ldd	r23, Z+1	; 0x01
    982c:	82 81       	ldd	r24, Z+2	; 0x02
    982e:	93 81       	ldd	r25, Z+3	; 0x03
    9830:	20 e0       	ldi	r18, 0x00	; 0
    9832:	3f ef       	ldi	r19, 0xFF	; 255
    9834:	4f e7       	ldi	r20, 0x7F	; 127
    9836:	57 e4       	ldi	r21, 0x47	; 71
    9838:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    983c:	18 16       	cp	r1, r24
    983e:	0c f0       	brlt	.+2      	; 0x9842 <pick_drop+0x2930>
    9840:	10 e0       	ldi	r17, 0x00	; 0
    9842:	11 23       	and	r17, r17
    9844:	09 f4       	brne	.+2      	; 0x9848 <pick_drop+0x2936>
    9846:	4d c0       	rjmp	.+154    	; 0x98e2 <pick_drop+0x29d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9848:	ce 01       	movw	r24, r28
    984a:	8f 59       	subi	r24, 0x9F	; 159
    984c:	9e 4f       	sbci	r25, 0xFE	; 254
    984e:	fc 01       	movw	r30, r24
    9850:	60 81       	ld	r22, Z
    9852:	71 81       	ldd	r23, Z+1	; 0x01
    9854:	82 81       	ldd	r24, Z+2	; 0x02
    9856:	93 81       	ldd	r25, Z+3	; 0x03
    9858:	20 e0       	ldi	r18, 0x00	; 0
    985a:	30 e0       	ldi	r19, 0x00	; 0
    985c:	40 e2       	ldi	r20, 0x20	; 32
    985e:	51 e4       	ldi	r21, 0x41	; 65
    9860:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9864:	dc 01       	movw	r26, r24
    9866:	cb 01       	movw	r24, r22
    9868:	8e 01       	movw	r16, r28
    986a:	07 59       	subi	r16, 0x97	; 151
    986c:	1e 4f       	sbci	r17, 0xFE	; 254
    986e:	bc 01       	movw	r22, r24
    9870:	cd 01       	movw	r24, r26
    9872:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9876:	dc 01       	movw	r26, r24
    9878:	cb 01       	movw	r24, r22
    987a:	f8 01       	movw	r30, r16
    987c:	91 83       	std	Z+1, r25	; 0x01
    987e:	80 83       	st	Z, r24
    9880:	27 c0       	rjmp	.+78     	; 0x98d0 <pick_drop+0x29be>
    9882:	ce 01       	movw	r24, r28
    9884:	85 59       	subi	r24, 0x95	; 149
    9886:	9e 4f       	sbci	r25, 0xFE	; 254
    9888:	20 e7       	ldi	r18, 0x70	; 112
    988a:	31 e0       	ldi	r19, 0x01	; 1
    988c:	fc 01       	movw	r30, r24
    988e:	31 83       	std	Z+1, r19	; 0x01
    9890:	20 83       	st	Z, r18
    9892:	ce 01       	movw	r24, r28
    9894:	85 59       	subi	r24, 0x95	; 149
    9896:	9e 4f       	sbci	r25, 0xFE	; 254
    9898:	fc 01       	movw	r30, r24
    989a:	80 81       	ld	r24, Z
    989c:	91 81       	ldd	r25, Z+1	; 0x01
    989e:	8c 01       	movw	r16, r24
    98a0:	c8 01       	movw	r24, r16
    98a2:	01 97       	sbiw	r24, 0x01	; 1
    98a4:	f1 f7       	brne	.-4      	; 0x98a2 <pick_drop+0x2990>
    98a6:	8c 01       	movw	r16, r24
    98a8:	ce 01       	movw	r24, r28
    98aa:	85 59       	subi	r24, 0x95	; 149
    98ac:	9e 4f       	sbci	r25, 0xFE	; 254
    98ae:	fc 01       	movw	r30, r24
    98b0:	11 83       	std	Z+1, r17	; 0x01
    98b2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    98b4:	ce 01       	movw	r24, r28
    98b6:	87 59       	subi	r24, 0x97	; 151
    98b8:	9e 4f       	sbci	r25, 0xFE	; 254
    98ba:	9e 01       	movw	r18, r28
    98bc:	27 59       	subi	r18, 0x97	; 151
    98be:	3e 4f       	sbci	r19, 0xFE	; 254
    98c0:	f9 01       	movw	r30, r18
    98c2:	20 81       	ld	r18, Z
    98c4:	31 81       	ldd	r19, Z+1	; 0x01
    98c6:	21 50       	subi	r18, 0x01	; 1
    98c8:	30 40       	sbci	r19, 0x00	; 0
    98ca:	fc 01       	movw	r30, r24
    98cc:	31 83       	std	Z+1, r19	; 0x01
    98ce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    98d0:	ce 01       	movw	r24, r28
    98d2:	87 59       	subi	r24, 0x97	; 151
    98d4:	9e 4f       	sbci	r25, 0xFE	; 254
    98d6:	fc 01       	movw	r30, r24
    98d8:	80 81       	ld	r24, Z
    98da:	91 81       	ldd	r25, Z+1	; 0x01
    98dc:	00 97       	sbiw	r24, 0x00	; 0
    98de:	89 f6       	brne	.-94     	; 0x9882 <pick_drop+0x2970>
    98e0:	2f c0       	rjmp	.+94     	; 0x9940 <pick_drop+0x2a2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    98e2:	8e 01       	movw	r16, r28
    98e4:	07 59       	subi	r16, 0x97	; 151
    98e6:	1e 4f       	sbci	r17, 0xFE	; 254
    98e8:	ce 01       	movw	r24, r28
    98ea:	8b 59       	subi	r24, 0x9B	; 155
    98ec:	9e 4f       	sbci	r25, 0xFE	; 254
    98ee:	fc 01       	movw	r30, r24
    98f0:	60 81       	ld	r22, Z
    98f2:	71 81       	ldd	r23, Z+1	; 0x01
    98f4:	82 81       	ldd	r24, Z+2	; 0x02
    98f6:	93 81       	ldd	r25, Z+3	; 0x03
    98f8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    98fc:	dc 01       	movw	r26, r24
    98fe:	cb 01       	movw	r24, r22
    9900:	f8 01       	movw	r30, r16
    9902:	91 83       	std	Z+1, r25	; 0x01
    9904:	80 83       	st	Z, r24
    9906:	ce 01       	movw	r24, r28
    9908:	83 59       	subi	r24, 0x93	; 147
    990a:	9e 4f       	sbci	r25, 0xFE	; 254
    990c:	9e 01       	movw	r18, r28
    990e:	27 59       	subi	r18, 0x97	; 151
    9910:	3e 4f       	sbci	r19, 0xFE	; 254
    9912:	f9 01       	movw	r30, r18
    9914:	20 81       	ld	r18, Z
    9916:	31 81       	ldd	r19, Z+1	; 0x01
    9918:	fc 01       	movw	r30, r24
    991a:	31 83       	std	Z+1, r19	; 0x01
    991c:	20 83       	st	Z, r18
    991e:	ce 01       	movw	r24, r28
    9920:	83 59       	subi	r24, 0x93	; 147
    9922:	9e 4f       	sbci	r25, 0xFE	; 254
    9924:	fc 01       	movw	r30, r24
    9926:	80 81       	ld	r24, Z
    9928:	91 81       	ldd	r25, Z+1	; 0x01
    992a:	8c 01       	movw	r16, r24
    992c:	c8 01       	movw	r24, r16
    992e:	01 97       	sbiw	r24, 0x01	; 1
    9930:	f1 f7       	brne	.-4      	; 0x992e <pick_drop+0x2a1c>
    9932:	8c 01       	movw	r16, r24
    9934:	ce 01       	movw	r24, r28
    9936:	83 59       	subi	r24, 0x93	; 147
    9938:	9e 4f       	sbci	r25, 0xFE	; 254
    993a:	fc 01       	movw	r30, r24
    993c:	11 83       	std	Z+1, r17	; 0x01
    993e:	00 83       	st	Z, r16
				_delay_ms(100);
				correct_left();
    9940:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				back_mm(pdback);
    9944:	89 81       	ldd	r24, Y+1	; 0x01
    9946:	9a 81       	ldd	r25, Y+2	; 0x02
    9948:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    994c:	9e 01       	movw	r18, r28
    994e:	21 59       	subi	r18, 0x91	; 145
    9950:	3e 4f       	sbci	r19, 0xFE	; 254
    9952:	80 e0       	ldi	r24, 0x00	; 0
    9954:	90 e0       	ldi	r25, 0x00	; 0
    9956:	a0 ea       	ldi	r26, 0xA0	; 160
    9958:	b1 e4       	ldi	r27, 0x41	; 65
    995a:	f9 01       	movw	r30, r18
    995c:	80 83       	st	Z, r24
    995e:	91 83       	std	Z+1, r25	; 0x01
    9960:	a2 83       	std	Z+2, r26	; 0x02
    9962:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9964:	8e 01       	movw	r16, r28
    9966:	0d 58       	subi	r16, 0x8D	; 141
    9968:	1e 4f       	sbci	r17, 0xFE	; 254
    996a:	ce 01       	movw	r24, r28
    996c:	81 59       	subi	r24, 0x91	; 145
    996e:	9e 4f       	sbci	r25, 0xFE	; 254
    9970:	fc 01       	movw	r30, r24
    9972:	60 81       	ld	r22, Z
    9974:	71 81       	ldd	r23, Z+1	; 0x01
    9976:	82 81       	ldd	r24, Z+2	; 0x02
    9978:	93 81       	ldd	r25, Z+3	; 0x03
    997a:	26 e6       	ldi	r18, 0x66	; 102
    997c:	36 e6       	ldi	r19, 0x66	; 102
    997e:	46 e6       	ldi	r20, 0x66	; 102
    9980:	55 e4       	ldi	r21, 0x45	; 69
    9982:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9986:	dc 01       	movw	r26, r24
    9988:	cb 01       	movw	r24, r22
    998a:	f8 01       	movw	r30, r16
    998c:	80 83       	st	Z, r24
    998e:	91 83       	std	Z+1, r25	; 0x01
    9990:	a2 83       	std	Z+2, r26	; 0x02
    9992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9994:	ce 01       	movw	r24, r28
    9996:	8d 58       	subi	r24, 0x8D	; 141
    9998:	9e 4f       	sbci	r25, 0xFE	; 254
    999a:	11 e0       	ldi	r17, 0x01	; 1
    999c:	fc 01       	movw	r30, r24
    999e:	60 81       	ld	r22, Z
    99a0:	71 81       	ldd	r23, Z+1	; 0x01
    99a2:	82 81       	ldd	r24, Z+2	; 0x02
    99a4:	93 81       	ldd	r25, Z+3	; 0x03
    99a6:	20 e0       	ldi	r18, 0x00	; 0
    99a8:	30 e0       	ldi	r19, 0x00	; 0
    99aa:	40 e8       	ldi	r20, 0x80	; 128
    99ac:	5f e3       	ldi	r21, 0x3F	; 63
    99ae:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    99b2:	88 23       	and	r24, r24
    99b4:	0c f0       	brlt	.+2      	; 0x99b8 <pick_drop+0x2aa6>
    99b6:	10 e0       	ldi	r17, 0x00	; 0
    99b8:	11 23       	and	r17, r17
    99ba:	49 f0       	breq	.+18     	; 0x99ce <pick_drop+0x2abc>
		__ticks = 1;
    99bc:	ce 01       	movw	r24, r28
    99be:	89 58       	subi	r24, 0x89	; 137
    99c0:	9e 4f       	sbci	r25, 0xFE	; 254
    99c2:	21 e0       	ldi	r18, 0x01	; 1
    99c4:	30 e0       	ldi	r19, 0x00	; 0
    99c6:	fc 01       	movw	r30, r24
    99c8:	31 83       	std	Z+1, r19	; 0x01
    99ca:	20 83       	st	Z, r18
    99cc:	75 c0       	rjmp	.+234    	; 0x9ab8 <pick_drop+0x2ba6>
	else if (__tmp > 65535)
    99ce:	ce 01       	movw	r24, r28
    99d0:	8d 58       	subi	r24, 0x8D	; 141
    99d2:	9e 4f       	sbci	r25, 0xFE	; 254
    99d4:	11 e0       	ldi	r17, 0x01	; 1
    99d6:	fc 01       	movw	r30, r24
    99d8:	60 81       	ld	r22, Z
    99da:	71 81       	ldd	r23, Z+1	; 0x01
    99dc:	82 81       	ldd	r24, Z+2	; 0x02
    99de:	93 81       	ldd	r25, Z+3	; 0x03
    99e0:	20 e0       	ldi	r18, 0x00	; 0
    99e2:	3f ef       	ldi	r19, 0xFF	; 255
    99e4:	4f e7       	ldi	r20, 0x7F	; 127
    99e6:	57 e4       	ldi	r21, 0x47	; 71
    99e8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    99ec:	18 16       	cp	r1, r24
    99ee:	0c f0       	brlt	.+2      	; 0x99f2 <pick_drop+0x2ae0>
    99f0:	10 e0       	ldi	r17, 0x00	; 0
    99f2:	11 23       	and	r17, r17
    99f4:	09 f4       	brne	.+2      	; 0x99f8 <pick_drop+0x2ae6>
    99f6:	4e c0       	rjmp	.+156    	; 0x9a94 <pick_drop+0x2b82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    99f8:	ce 01       	movw	r24, r28
    99fa:	81 59       	subi	r24, 0x91	; 145
    99fc:	9e 4f       	sbci	r25, 0xFE	; 254
    99fe:	fc 01       	movw	r30, r24
    9a00:	60 81       	ld	r22, Z
    9a02:	71 81       	ldd	r23, Z+1	; 0x01
    9a04:	82 81       	ldd	r24, Z+2	; 0x02
    9a06:	93 81       	ldd	r25, Z+3	; 0x03
    9a08:	20 e0       	ldi	r18, 0x00	; 0
    9a0a:	30 e0       	ldi	r19, 0x00	; 0
    9a0c:	40 e2       	ldi	r20, 0x20	; 32
    9a0e:	51 e4       	ldi	r21, 0x41	; 65
    9a10:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9a14:	dc 01       	movw	r26, r24
    9a16:	cb 01       	movw	r24, r22
    9a18:	8e 01       	movw	r16, r28
    9a1a:	09 58       	subi	r16, 0x89	; 137
    9a1c:	1e 4f       	sbci	r17, 0xFE	; 254
    9a1e:	bc 01       	movw	r22, r24
    9a20:	cd 01       	movw	r24, r26
    9a22:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9a26:	dc 01       	movw	r26, r24
    9a28:	cb 01       	movw	r24, r22
    9a2a:	f8 01       	movw	r30, r16
    9a2c:	91 83       	std	Z+1, r25	; 0x01
    9a2e:	80 83       	st	Z, r24
    9a30:	27 c0       	rjmp	.+78     	; 0x9a80 <pick_drop+0x2b6e>
    9a32:	ce 01       	movw	r24, r28
    9a34:	87 58       	subi	r24, 0x87	; 135
    9a36:	9e 4f       	sbci	r25, 0xFE	; 254
    9a38:	20 e7       	ldi	r18, 0x70	; 112
    9a3a:	31 e0       	ldi	r19, 0x01	; 1
    9a3c:	fc 01       	movw	r30, r24
    9a3e:	31 83       	std	Z+1, r19	; 0x01
    9a40:	20 83       	st	Z, r18
    9a42:	ce 01       	movw	r24, r28
    9a44:	87 58       	subi	r24, 0x87	; 135
    9a46:	9e 4f       	sbci	r25, 0xFE	; 254
    9a48:	fc 01       	movw	r30, r24
    9a4a:	80 81       	ld	r24, Z
    9a4c:	91 81       	ldd	r25, Z+1	; 0x01
    9a4e:	8c 01       	movw	r16, r24
    9a50:	c8 01       	movw	r24, r16
    9a52:	01 97       	sbiw	r24, 0x01	; 1
    9a54:	f1 f7       	brne	.-4      	; 0x9a52 <pick_drop+0x2b40>
    9a56:	8c 01       	movw	r16, r24
    9a58:	ce 01       	movw	r24, r28
    9a5a:	87 58       	subi	r24, 0x87	; 135
    9a5c:	9e 4f       	sbci	r25, 0xFE	; 254
    9a5e:	fc 01       	movw	r30, r24
    9a60:	11 83       	std	Z+1, r17	; 0x01
    9a62:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a64:	ce 01       	movw	r24, r28
    9a66:	89 58       	subi	r24, 0x89	; 137
    9a68:	9e 4f       	sbci	r25, 0xFE	; 254
    9a6a:	9e 01       	movw	r18, r28
    9a6c:	29 58       	subi	r18, 0x89	; 137
    9a6e:	3e 4f       	sbci	r19, 0xFE	; 254
    9a70:	f9 01       	movw	r30, r18
    9a72:	20 81       	ld	r18, Z
    9a74:	31 81       	ldd	r19, Z+1	; 0x01
    9a76:	21 50       	subi	r18, 0x01	; 1
    9a78:	30 40       	sbci	r19, 0x00	; 0
    9a7a:	fc 01       	movw	r30, r24
    9a7c:	31 83       	std	Z+1, r19	; 0x01
    9a7e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a80:	ce 01       	movw	r24, r28
    9a82:	89 58       	subi	r24, 0x89	; 137
    9a84:	9e 4f       	sbci	r25, 0xFE	; 254
    9a86:	fc 01       	movw	r30, r24
    9a88:	80 81       	ld	r24, Z
    9a8a:	91 81       	ldd	r25, Z+1	; 0x01
    9a8c:	00 97       	sbiw	r24, 0x00	; 0
    9a8e:	89 f6       	brne	.-94     	; 0x9a32 <pick_drop+0x2b20>
    9a90:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a94:	8e 01       	movw	r16, r28
    9a96:	09 58       	subi	r16, 0x89	; 137
    9a98:	1e 4f       	sbci	r17, 0xFE	; 254
    9a9a:	ce 01       	movw	r24, r28
    9a9c:	8d 58       	subi	r24, 0x8D	; 141
    9a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    9aa0:	fc 01       	movw	r30, r24
    9aa2:	60 81       	ld	r22, Z
    9aa4:	71 81       	ldd	r23, Z+1	; 0x01
    9aa6:	82 81       	ldd	r24, Z+2	; 0x02
    9aa8:	93 81       	ldd	r25, Z+3	; 0x03
    9aaa:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9aae:	dc 01       	movw	r26, r24
    9ab0:	cb 01       	movw	r24, r22
    9ab2:	f8 01       	movw	r30, r16
    9ab4:	91 83       	std	Z+1, r25	; 0x01
    9ab6:	80 83       	st	Z, r24
    9ab8:	ce 01       	movw	r24, r28
    9aba:	85 58       	subi	r24, 0x85	; 133
    9abc:	9e 4f       	sbci	r25, 0xFE	; 254
    9abe:	9e 01       	movw	r18, r28
    9ac0:	29 58       	subi	r18, 0x89	; 137
    9ac2:	3e 4f       	sbci	r19, 0xFE	; 254
    9ac4:	f9 01       	movw	r30, r18
    9ac6:	20 81       	ld	r18, Z
    9ac8:	31 81       	ldd	r19, Z+1	; 0x01
    9aca:	fc 01       	movw	r30, r24
    9acc:	31 83       	std	Z+1, r19	; 0x01
    9ace:	20 83       	st	Z, r18
    9ad0:	ce 01       	movw	r24, r28
    9ad2:	85 58       	subi	r24, 0x85	; 133
    9ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    9ad6:	fc 01       	movw	r30, r24
    9ad8:	80 81       	ld	r24, Z
    9ada:	91 81       	ldd	r25, Z+1	; 0x01
    9adc:	8c 01       	movw	r16, r24
    9ade:	c8 01       	movw	r24, r16
    9ae0:	01 97       	sbiw	r24, 0x01	; 1
    9ae2:	f1 f7       	brne	.-4      	; 0x9ae0 <pick_drop+0x2bce>
    9ae4:	8c 01       	movw	r16, r24
    9ae6:	ce 01       	movw	r24, r28
    9ae8:	85 58       	subi	r24, 0x85	; 133
    9aea:	9e 4f       	sbci	r25, 0xFE	; 254
    9aec:	fc 01       	movw	r30, r24
    9aee:	11 83       	std	Z+1, r17	; 0x01
    9af0:	00 83       	st	Z, r16
    9af2:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
				_delay_ms(20);
			}
		}
					
	else if(pd=='3')
    9af6:	ce 01       	movw	r24, r28
    9af8:	8d 5e       	subi	r24, 0xED	; 237
    9afa:	9c 4f       	sbci	r25, 0xFC	; 252
    9afc:	fc 01       	movw	r30, r24
    9afe:	80 81       	ld	r24, Z
    9b00:	83 33       	cpi	r24, 0x33	; 51
    9b02:	09 f0       	breq	.+2      	; 0x9b06 <pick_drop+0x2bf4>
    9b04:	ff c4       	rjmp	.+2558   	; 0xa504 <pick_drop+0x35f2>
	{//back array
		stop();
    9b06:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    9b0a:	9e 01       	movw	r18, r28
    9b0c:	23 58       	subi	r18, 0x83	; 131
    9b0e:	3e 4f       	sbci	r19, 0xFE	; 254
    9b10:	80 e0       	ldi	r24, 0x00	; 0
    9b12:	90 e0       	ldi	r25, 0x00	; 0
    9b14:	a0 ea       	ldi	r26, 0xA0	; 160
    9b16:	b1 e4       	ldi	r27, 0x41	; 65
    9b18:	f9 01       	movw	r30, r18
    9b1a:	80 83       	st	Z, r24
    9b1c:	91 83       	std	Z+1, r25	; 0x01
    9b1e:	a2 83       	std	Z+2, r26	; 0x02
    9b20:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9b22:	8e 01       	movw	r16, r28
    9b24:	0f 57       	subi	r16, 0x7F	; 127
    9b26:	1e 4f       	sbci	r17, 0xFE	; 254
    9b28:	ce 01       	movw	r24, r28
    9b2a:	83 58       	subi	r24, 0x83	; 131
    9b2c:	9e 4f       	sbci	r25, 0xFE	; 254
    9b2e:	fc 01       	movw	r30, r24
    9b30:	60 81       	ld	r22, Z
    9b32:	71 81       	ldd	r23, Z+1	; 0x01
    9b34:	82 81       	ldd	r24, Z+2	; 0x02
    9b36:	93 81       	ldd	r25, Z+3	; 0x03
    9b38:	26 e6       	ldi	r18, 0x66	; 102
    9b3a:	36 e6       	ldi	r19, 0x66	; 102
    9b3c:	46 e6       	ldi	r20, 0x66	; 102
    9b3e:	55 e4       	ldi	r21, 0x45	; 69
    9b40:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9b44:	dc 01       	movw	r26, r24
    9b46:	cb 01       	movw	r24, r22
    9b48:	f8 01       	movw	r30, r16
    9b4a:	80 83       	st	Z, r24
    9b4c:	91 83       	std	Z+1, r25	; 0x01
    9b4e:	a2 83       	std	Z+2, r26	; 0x02
    9b50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9b52:	ce 01       	movw	r24, r28
    9b54:	8f 57       	subi	r24, 0x7F	; 127
    9b56:	9e 4f       	sbci	r25, 0xFE	; 254
    9b58:	11 e0       	ldi	r17, 0x01	; 1
    9b5a:	fc 01       	movw	r30, r24
    9b5c:	60 81       	ld	r22, Z
    9b5e:	71 81       	ldd	r23, Z+1	; 0x01
    9b60:	82 81       	ldd	r24, Z+2	; 0x02
    9b62:	93 81       	ldd	r25, Z+3	; 0x03
    9b64:	20 e0       	ldi	r18, 0x00	; 0
    9b66:	30 e0       	ldi	r19, 0x00	; 0
    9b68:	40 e8       	ldi	r20, 0x80	; 128
    9b6a:	5f e3       	ldi	r21, 0x3F	; 63
    9b6c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    9b70:	88 23       	and	r24, r24
    9b72:	0c f0       	brlt	.+2      	; 0x9b76 <pick_drop+0x2c64>
    9b74:	10 e0       	ldi	r17, 0x00	; 0
    9b76:	11 23       	and	r17, r17
    9b78:	49 f0       	breq	.+18     	; 0x9b8c <pick_drop+0x2c7a>
		__ticks = 1;
    9b7a:	ce 01       	movw	r24, r28
    9b7c:	8b 57       	subi	r24, 0x7B	; 123
    9b7e:	9e 4f       	sbci	r25, 0xFE	; 254
    9b80:	21 e0       	ldi	r18, 0x01	; 1
    9b82:	30 e0       	ldi	r19, 0x00	; 0
    9b84:	fc 01       	movw	r30, r24
    9b86:	31 83       	std	Z+1, r19	; 0x01
    9b88:	20 83       	st	Z, r18
    9b8a:	74 c0       	rjmp	.+232    	; 0x9c74 <pick_drop+0x2d62>
	else if (__tmp > 65535)
    9b8c:	ce 01       	movw	r24, r28
    9b8e:	8f 57       	subi	r24, 0x7F	; 127
    9b90:	9e 4f       	sbci	r25, 0xFE	; 254
    9b92:	11 e0       	ldi	r17, 0x01	; 1
    9b94:	fc 01       	movw	r30, r24
    9b96:	60 81       	ld	r22, Z
    9b98:	71 81       	ldd	r23, Z+1	; 0x01
    9b9a:	82 81       	ldd	r24, Z+2	; 0x02
    9b9c:	93 81       	ldd	r25, Z+3	; 0x03
    9b9e:	20 e0       	ldi	r18, 0x00	; 0
    9ba0:	3f ef       	ldi	r19, 0xFF	; 255
    9ba2:	4f e7       	ldi	r20, 0x7F	; 127
    9ba4:	57 e4       	ldi	r21, 0x47	; 71
    9ba6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    9baa:	18 16       	cp	r1, r24
    9bac:	0c f0       	brlt	.+2      	; 0x9bb0 <pick_drop+0x2c9e>
    9bae:	10 e0       	ldi	r17, 0x00	; 0
    9bb0:	11 23       	and	r17, r17
    9bb2:	09 f4       	brne	.+2      	; 0x9bb6 <pick_drop+0x2ca4>
    9bb4:	4d c0       	rjmp	.+154    	; 0x9c50 <pick_drop+0x2d3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9bb6:	ce 01       	movw	r24, r28
    9bb8:	83 58       	subi	r24, 0x83	; 131
    9bba:	9e 4f       	sbci	r25, 0xFE	; 254
    9bbc:	fc 01       	movw	r30, r24
    9bbe:	60 81       	ld	r22, Z
    9bc0:	71 81       	ldd	r23, Z+1	; 0x01
    9bc2:	82 81       	ldd	r24, Z+2	; 0x02
    9bc4:	93 81       	ldd	r25, Z+3	; 0x03
    9bc6:	20 e0       	ldi	r18, 0x00	; 0
    9bc8:	30 e0       	ldi	r19, 0x00	; 0
    9bca:	40 e2       	ldi	r20, 0x20	; 32
    9bcc:	51 e4       	ldi	r21, 0x41	; 65
    9bce:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9bd2:	dc 01       	movw	r26, r24
    9bd4:	cb 01       	movw	r24, r22
    9bd6:	8e 01       	movw	r16, r28
    9bd8:	0b 57       	subi	r16, 0x7B	; 123
    9bda:	1e 4f       	sbci	r17, 0xFE	; 254
    9bdc:	bc 01       	movw	r22, r24
    9bde:	cd 01       	movw	r24, r26
    9be0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9be4:	dc 01       	movw	r26, r24
    9be6:	cb 01       	movw	r24, r22
    9be8:	f8 01       	movw	r30, r16
    9bea:	91 83       	std	Z+1, r25	; 0x01
    9bec:	80 83       	st	Z, r24
    9bee:	27 c0       	rjmp	.+78     	; 0x9c3e <pick_drop+0x2d2c>
    9bf0:	ce 01       	movw	r24, r28
    9bf2:	89 57       	subi	r24, 0x79	; 121
    9bf4:	9e 4f       	sbci	r25, 0xFE	; 254
    9bf6:	20 e7       	ldi	r18, 0x70	; 112
    9bf8:	31 e0       	ldi	r19, 0x01	; 1
    9bfa:	fc 01       	movw	r30, r24
    9bfc:	31 83       	std	Z+1, r19	; 0x01
    9bfe:	20 83       	st	Z, r18
    9c00:	ce 01       	movw	r24, r28
    9c02:	89 57       	subi	r24, 0x79	; 121
    9c04:	9e 4f       	sbci	r25, 0xFE	; 254
    9c06:	fc 01       	movw	r30, r24
    9c08:	80 81       	ld	r24, Z
    9c0a:	91 81       	ldd	r25, Z+1	; 0x01
    9c0c:	8c 01       	movw	r16, r24
    9c0e:	c8 01       	movw	r24, r16
    9c10:	01 97       	sbiw	r24, 0x01	; 1
    9c12:	f1 f7       	brne	.-4      	; 0x9c10 <pick_drop+0x2cfe>
    9c14:	8c 01       	movw	r16, r24
    9c16:	ce 01       	movw	r24, r28
    9c18:	89 57       	subi	r24, 0x79	; 121
    9c1a:	9e 4f       	sbci	r25, 0xFE	; 254
    9c1c:	fc 01       	movw	r30, r24
    9c1e:	11 83       	std	Z+1, r17	; 0x01
    9c20:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9c22:	ce 01       	movw	r24, r28
    9c24:	8b 57       	subi	r24, 0x7B	; 123
    9c26:	9e 4f       	sbci	r25, 0xFE	; 254
    9c28:	9e 01       	movw	r18, r28
    9c2a:	2b 57       	subi	r18, 0x7B	; 123
    9c2c:	3e 4f       	sbci	r19, 0xFE	; 254
    9c2e:	f9 01       	movw	r30, r18
    9c30:	20 81       	ld	r18, Z
    9c32:	31 81       	ldd	r19, Z+1	; 0x01
    9c34:	21 50       	subi	r18, 0x01	; 1
    9c36:	30 40       	sbci	r19, 0x00	; 0
    9c38:	fc 01       	movw	r30, r24
    9c3a:	31 83       	std	Z+1, r19	; 0x01
    9c3c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9c3e:	ce 01       	movw	r24, r28
    9c40:	8b 57       	subi	r24, 0x7B	; 123
    9c42:	9e 4f       	sbci	r25, 0xFE	; 254
    9c44:	fc 01       	movw	r30, r24
    9c46:	80 81       	ld	r24, Z
    9c48:	91 81       	ldd	r25, Z+1	; 0x01
    9c4a:	00 97       	sbiw	r24, 0x00	; 0
    9c4c:	89 f6       	brne	.-94     	; 0x9bf0 <pick_drop+0x2cde>
    9c4e:	2f c0       	rjmp	.+94     	; 0x9cae <pick_drop+0x2d9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9c50:	8e 01       	movw	r16, r28
    9c52:	0b 57       	subi	r16, 0x7B	; 123
    9c54:	1e 4f       	sbci	r17, 0xFE	; 254
    9c56:	ce 01       	movw	r24, r28
    9c58:	8f 57       	subi	r24, 0x7F	; 127
    9c5a:	9e 4f       	sbci	r25, 0xFE	; 254
    9c5c:	fc 01       	movw	r30, r24
    9c5e:	60 81       	ld	r22, Z
    9c60:	71 81       	ldd	r23, Z+1	; 0x01
    9c62:	82 81       	ldd	r24, Z+2	; 0x02
    9c64:	93 81       	ldd	r25, Z+3	; 0x03
    9c66:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9c6a:	dc 01       	movw	r26, r24
    9c6c:	cb 01       	movw	r24, r22
    9c6e:	f8 01       	movw	r30, r16
    9c70:	91 83       	std	Z+1, r25	; 0x01
    9c72:	80 83       	st	Z, r24
    9c74:	ce 01       	movw	r24, r28
    9c76:	87 57       	subi	r24, 0x77	; 119
    9c78:	9e 4f       	sbci	r25, 0xFE	; 254
    9c7a:	9e 01       	movw	r18, r28
    9c7c:	2b 57       	subi	r18, 0x7B	; 123
    9c7e:	3e 4f       	sbci	r19, 0xFE	; 254
    9c80:	f9 01       	movw	r30, r18
    9c82:	20 81       	ld	r18, Z
    9c84:	31 81       	ldd	r19, Z+1	; 0x01
    9c86:	fc 01       	movw	r30, r24
    9c88:	31 83       	std	Z+1, r19	; 0x01
    9c8a:	20 83       	st	Z, r18
    9c8c:	ce 01       	movw	r24, r28
    9c8e:	87 57       	subi	r24, 0x77	; 119
    9c90:	9e 4f       	sbci	r25, 0xFE	; 254
    9c92:	fc 01       	movw	r30, r24
    9c94:	80 81       	ld	r24, Z
    9c96:	91 81       	ldd	r25, Z+1	; 0x01
    9c98:	8c 01       	movw	r16, r24
    9c9a:	c8 01       	movw	r24, r16
    9c9c:	01 97       	sbiw	r24, 0x01	; 1
    9c9e:	f1 f7       	brne	.-4      	; 0x9c9c <pick_drop+0x2d8a>
    9ca0:	8c 01       	movw	r16, r24
    9ca2:	ce 01       	movw	r24, r28
    9ca4:	87 57       	subi	r24, 0x77	; 119
    9ca6:	9e 4f       	sbci	r25, 0xFE	; 254
    9ca8:	fc 01       	movw	r30, r24
    9caa:	11 83       	std	Z+1, r17	; 0x01
    9cac:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    9cae:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    9cb2:	9e 01       	movw	r18, r28
    9cb4:	25 57       	subi	r18, 0x75	; 117
    9cb6:	3e 4f       	sbci	r19, 0xFE	; 254
    9cb8:	80 e0       	ldi	r24, 0x00	; 0
    9cba:	90 e0       	ldi	r25, 0x00	; 0
    9cbc:	a8 e4       	ldi	r26, 0x48	; 72
    9cbe:	b3 e4       	ldi	r27, 0x43	; 67
    9cc0:	f9 01       	movw	r30, r18
    9cc2:	80 83       	st	Z, r24
    9cc4:	91 83       	std	Z+1, r25	; 0x01
    9cc6:	a2 83       	std	Z+2, r26	; 0x02
    9cc8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9cca:	8e 01       	movw	r16, r28
    9ccc:	01 57       	subi	r16, 0x71	; 113
    9cce:	1e 4f       	sbci	r17, 0xFE	; 254
    9cd0:	ce 01       	movw	r24, r28
    9cd2:	85 57       	subi	r24, 0x75	; 117
    9cd4:	9e 4f       	sbci	r25, 0xFE	; 254
    9cd6:	fc 01       	movw	r30, r24
    9cd8:	60 81       	ld	r22, Z
    9cda:	71 81       	ldd	r23, Z+1	; 0x01
    9cdc:	82 81       	ldd	r24, Z+2	; 0x02
    9cde:	93 81       	ldd	r25, Z+3	; 0x03
    9ce0:	26 e6       	ldi	r18, 0x66	; 102
    9ce2:	36 e6       	ldi	r19, 0x66	; 102
    9ce4:	46 e6       	ldi	r20, 0x66	; 102
    9ce6:	55 e4       	ldi	r21, 0x45	; 69
    9ce8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9cec:	dc 01       	movw	r26, r24
    9cee:	cb 01       	movw	r24, r22
    9cf0:	f8 01       	movw	r30, r16
    9cf2:	80 83       	st	Z, r24
    9cf4:	91 83       	std	Z+1, r25	; 0x01
    9cf6:	a2 83       	std	Z+2, r26	; 0x02
    9cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9cfa:	ce 01       	movw	r24, r28
    9cfc:	81 57       	subi	r24, 0x71	; 113
    9cfe:	9e 4f       	sbci	r25, 0xFE	; 254
    9d00:	11 e0       	ldi	r17, 0x01	; 1
    9d02:	fc 01       	movw	r30, r24
    9d04:	60 81       	ld	r22, Z
    9d06:	71 81       	ldd	r23, Z+1	; 0x01
    9d08:	82 81       	ldd	r24, Z+2	; 0x02
    9d0a:	93 81       	ldd	r25, Z+3	; 0x03
    9d0c:	20 e0       	ldi	r18, 0x00	; 0
    9d0e:	30 e0       	ldi	r19, 0x00	; 0
    9d10:	40 e8       	ldi	r20, 0x80	; 128
    9d12:	5f e3       	ldi	r21, 0x3F	; 63
    9d14:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    9d18:	88 23       	and	r24, r24
    9d1a:	0c f0       	brlt	.+2      	; 0x9d1e <pick_drop+0x2e0c>
    9d1c:	10 e0       	ldi	r17, 0x00	; 0
    9d1e:	11 23       	and	r17, r17
    9d20:	49 f0       	breq	.+18     	; 0x9d34 <pick_drop+0x2e22>
		__ticks = 1;
    9d22:	ce 01       	movw	r24, r28
    9d24:	8d 56       	subi	r24, 0x6D	; 109
    9d26:	9e 4f       	sbci	r25, 0xFE	; 254
    9d28:	21 e0       	ldi	r18, 0x01	; 1
    9d2a:	30 e0       	ldi	r19, 0x00	; 0
    9d2c:	fc 01       	movw	r30, r24
    9d2e:	31 83       	std	Z+1, r19	; 0x01
    9d30:	20 83       	st	Z, r18
    9d32:	74 c0       	rjmp	.+232    	; 0x9e1c <pick_drop+0x2f0a>
	else if (__tmp > 65535)
    9d34:	ce 01       	movw	r24, r28
    9d36:	81 57       	subi	r24, 0x71	; 113
    9d38:	9e 4f       	sbci	r25, 0xFE	; 254
    9d3a:	11 e0       	ldi	r17, 0x01	; 1
    9d3c:	fc 01       	movw	r30, r24
    9d3e:	60 81       	ld	r22, Z
    9d40:	71 81       	ldd	r23, Z+1	; 0x01
    9d42:	82 81       	ldd	r24, Z+2	; 0x02
    9d44:	93 81       	ldd	r25, Z+3	; 0x03
    9d46:	20 e0       	ldi	r18, 0x00	; 0
    9d48:	3f ef       	ldi	r19, 0xFF	; 255
    9d4a:	4f e7       	ldi	r20, 0x7F	; 127
    9d4c:	57 e4       	ldi	r21, 0x47	; 71
    9d4e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    9d52:	18 16       	cp	r1, r24
    9d54:	0c f0       	brlt	.+2      	; 0x9d58 <pick_drop+0x2e46>
    9d56:	10 e0       	ldi	r17, 0x00	; 0
    9d58:	11 23       	and	r17, r17
    9d5a:	09 f4       	brne	.+2      	; 0x9d5e <pick_drop+0x2e4c>
    9d5c:	4d c0       	rjmp	.+154    	; 0x9df8 <pick_drop+0x2ee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9d5e:	ce 01       	movw	r24, r28
    9d60:	85 57       	subi	r24, 0x75	; 117
    9d62:	9e 4f       	sbci	r25, 0xFE	; 254
    9d64:	fc 01       	movw	r30, r24
    9d66:	60 81       	ld	r22, Z
    9d68:	71 81       	ldd	r23, Z+1	; 0x01
    9d6a:	82 81       	ldd	r24, Z+2	; 0x02
    9d6c:	93 81       	ldd	r25, Z+3	; 0x03
    9d6e:	20 e0       	ldi	r18, 0x00	; 0
    9d70:	30 e0       	ldi	r19, 0x00	; 0
    9d72:	40 e2       	ldi	r20, 0x20	; 32
    9d74:	51 e4       	ldi	r21, 0x41	; 65
    9d76:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9d7a:	dc 01       	movw	r26, r24
    9d7c:	cb 01       	movw	r24, r22
    9d7e:	8e 01       	movw	r16, r28
    9d80:	0d 56       	subi	r16, 0x6D	; 109
    9d82:	1e 4f       	sbci	r17, 0xFE	; 254
    9d84:	bc 01       	movw	r22, r24
    9d86:	cd 01       	movw	r24, r26
    9d88:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9d8c:	dc 01       	movw	r26, r24
    9d8e:	cb 01       	movw	r24, r22
    9d90:	f8 01       	movw	r30, r16
    9d92:	91 83       	std	Z+1, r25	; 0x01
    9d94:	80 83       	st	Z, r24
    9d96:	27 c0       	rjmp	.+78     	; 0x9de6 <pick_drop+0x2ed4>
    9d98:	ce 01       	movw	r24, r28
    9d9a:	8b 56       	subi	r24, 0x6B	; 107
    9d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    9d9e:	20 e7       	ldi	r18, 0x70	; 112
    9da0:	31 e0       	ldi	r19, 0x01	; 1
    9da2:	fc 01       	movw	r30, r24
    9da4:	31 83       	std	Z+1, r19	; 0x01
    9da6:	20 83       	st	Z, r18
    9da8:	ce 01       	movw	r24, r28
    9daa:	8b 56       	subi	r24, 0x6B	; 107
    9dac:	9e 4f       	sbci	r25, 0xFE	; 254
    9dae:	fc 01       	movw	r30, r24
    9db0:	80 81       	ld	r24, Z
    9db2:	91 81       	ldd	r25, Z+1	; 0x01
    9db4:	8c 01       	movw	r16, r24
    9db6:	c8 01       	movw	r24, r16
    9db8:	01 97       	sbiw	r24, 0x01	; 1
    9dba:	f1 f7       	brne	.-4      	; 0x9db8 <pick_drop+0x2ea6>
    9dbc:	8c 01       	movw	r16, r24
    9dbe:	ce 01       	movw	r24, r28
    9dc0:	8b 56       	subi	r24, 0x6B	; 107
    9dc2:	9e 4f       	sbci	r25, 0xFE	; 254
    9dc4:	fc 01       	movw	r30, r24
    9dc6:	11 83       	std	Z+1, r17	; 0x01
    9dc8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9dca:	ce 01       	movw	r24, r28
    9dcc:	8d 56       	subi	r24, 0x6D	; 109
    9dce:	9e 4f       	sbci	r25, 0xFE	; 254
    9dd0:	9e 01       	movw	r18, r28
    9dd2:	2d 56       	subi	r18, 0x6D	; 109
    9dd4:	3e 4f       	sbci	r19, 0xFE	; 254
    9dd6:	f9 01       	movw	r30, r18
    9dd8:	20 81       	ld	r18, Z
    9dda:	31 81       	ldd	r19, Z+1	; 0x01
    9ddc:	21 50       	subi	r18, 0x01	; 1
    9dde:	30 40       	sbci	r19, 0x00	; 0
    9de0:	fc 01       	movw	r30, r24
    9de2:	31 83       	std	Z+1, r19	; 0x01
    9de4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9de6:	ce 01       	movw	r24, r28
    9de8:	8d 56       	subi	r24, 0x6D	; 109
    9dea:	9e 4f       	sbci	r25, 0xFE	; 254
    9dec:	fc 01       	movw	r30, r24
    9dee:	80 81       	ld	r24, Z
    9df0:	91 81       	ldd	r25, Z+1	; 0x01
    9df2:	00 97       	sbiw	r24, 0x00	; 0
    9df4:	89 f6       	brne	.-94     	; 0x9d98 <pick_drop+0x2e86>
    9df6:	2f c0       	rjmp	.+94     	; 0x9e56 <pick_drop+0x2f44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9df8:	8e 01       	movw	r16, r28
    9dfa:	0d 56       	subi	r16, 0x6D	; 109
    9dfc:	1e 4f       	sbci	r17, 0xFE	; 254
    9dfe:	ce 01       	movw	r24, r28
    9e00:	81 57       	subi	r24, 0x71	; 113
    9e02:	9e 4f       	sbci	r25, 0xFE	; 254
    9e04:	fc 01       	movw	r30, r24
    9e06:	60 81       	ld	r22, Z
    9e08:	71 81       	ldd	r23, Z+1	; 0x01
    9e0a:	82 81       	ldd	r24, Z+2	; 0x02
    9e0c:	93 81       	ldd	r25, Z+3	; 0x03
    9e0e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9e12:	dc 01       	movw	r26, r24
    9e14:	cb 01       	movw	r24, r22
    9e16:	f8 01       	movw	r30, r16
    9e18:	91 83       	std	Z+1, r25	; 0x01
    9e1a:	80 83       	st	Z, r24
    9e1c:	ce 01       	movw	r24, r28
    9e1e:	89 56       	subi	r24, 0x69	; 105
    9e20:	9e 4f       	sbci	r25, 0xFE	; 254
    9e22:	9e 01       	movw	r18, r28
    9e24:	2d 56       	subi	r18, 0x6D	; 109
    9e26:	3e 4f       	sbci	r19, 0xFE	; 254
    9e28:	f9 01       	movw	r30, r18
    9e2a:	20 81       	ld	r18, Z
    9e2c:	31 81       	ldd	r19, Z+1	; 0x01
    9e2e:	fc 01       	movw	r30, r24
    9e30:	31 83       	std	Z+1, r19	; 0x01
    9e32:	20 83       	st	Z, r18
    9e34:	ce 01       	movw	r24, r28
    9e36:	89 56       	subi	r24, 0x69	; 105
    9e38:	9e 4f       	sbci	r25, 0xFE	; 254
    9e3a:	fc 01       	movw	r30, r24
    9e3c:	80 81       	ld	r24, Z
    9e3e:	91 81       	ldd	r25, Z+1	; 0x01
    9e40:	8c 01       	movw	r16, r24
    9e42:	c8 01       	movw	r24, r16
    9e44:	01 97       	sbiw	r24, 0x01	; 1
    9e46:	f1 f7       	brne	.-4      	; 0x9e44 <pick_drop+0x2f32>
    9e48:	8c 01       	movw	r16, r24
    9e4a:	ce 01       	movw	r24, r28
    9e4c:	89 56       	subi	r24, 0x69	; 105
    9e4e:	9e 4f       	sbci	r25, 0xFE	; 254
    9e50:	fc 01       	movw	r30, r24
    9e52:	11 83       	std	Z+1, r17	; 0x01
    9e54:	00 83       	st	Z, r16
		_delay_ms(200);
		forward_mm(60);
    9e56:	8c e3       	ldi	r24, 0x3C	; 60
    9e58:	90 e0       	ldi	r25, 0x00	; 0
    9e5a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    9e5e:	9e 01       	movw	r18, r28
    9e60:	27 56       	subi	r18, 0x67	; 103
    9e62:	3e 4f       	sbci	r19, 0xFE	; 254
    9e64:	80 e0       	ldi	r24, 0x00	; 0
    9e66:	90 e0       	ldi	r25, 0x00	; 0
    9e68:	a0 ea       	ldi	r26, 0xA0	; 160
    9e6a:	b1 e4       	ldi	r27, 0x41	; 65
    9e6c:	f9 01       	movw	r30, r18
    9e6e:	80 83       	st	Z, r24
    9e70:	91 83       	std	Z+1, r25	; 0x01
    9e72:	a2 83       	std	Z+2, r26	; 0x02
    9e74:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9e76:	8e 01       	movw	r16, r28
    9e78:	03 56       	subi	r16, 0x63	; 99
    9e7a:	1e 4f       	sbci	r17, 0xFE	; 254
    9e7c:	ce 01       	movw	r24, r28
    9e7e:	87 56       	subi	r24, 0x67	; 103
    9e80:	9e 4f       	sbci	r25, 0xFE	; 254
    9e82:	fc 01       	movw	r30, r24
    9e84:	60 81       	ld	r22, Z
    9e86:	71 81       	ldd	r23, Z+1	; 0x01
    9e88:	82 81       	ldd	r24, Z+2	; 0x02
    9e8a:	93 81       	ldd	r25, Z+3	; 0x03
    9e8c:	26 e6       	ldi	r18, 0x66	; 102
    9e8e:	36 e6       	ldi	r19, 0x66	; 102
    9e90:	46 e6       	ldi	r20, 0x66	; 102
    9e92:	55 e4       	ldi	r21, 0x45	; 69
    9e94:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9e98:	dc 01       	movw	r26, r24
    9e9a:	cb 01       	movw	r24, r22
    9e9c:	f8 01       	movw	r30, r16
    9e9e:	80 83       	st	Z, r24
    9ea0:	91 83       	std	Z+1, r25	; 0x01
    9ea2:	a2 83       	std	Z+2, r26	; 0x02
    9ea4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9ea6:	ce 01       	movw	r24, r28
    9ea8:	83 56       	subi	r24, 0x63	; 99
    9eaa:	9e 4f       	sbci	r25, 0xFE	; 254
    9eac:	11 e0       	ldi	r17, 0x01	; 1
    9eae:	fc 01       	movw	r30, r24
    9eb0:	60 81       	ld	r22, Z
    9eb2:	71 81       	ldd	r23, Z+1	; 0x01
    9eb4:	82 81       	ldd	r24, Z+2	; 0x02
    9eb6:	93 81       	ldd	r25, Z+3	; 0x03
    9eb8:	20 e0       	ldi	r18, 0x00	; 0
    9eba:	30 e0       	ldi	r19, 0x00	; 0
    9ebc:	40 e8       	ldi	r20, 0x80	; 128
    9ebe:	5f e3       	ldi	r21, 0x3F	; 63
    9ec0:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    9ec4:	88 23       	and	r24, r24
    9ec6:	0c f0       	brlt	.+2      	; 0x9eca <pick_drop+0x2fb8>
    9ec8:	10 e0       	ldi	r17, 0x00	; 0
    9eca:	11 23       	and	r17, r17
    9ecc:	49 f0       	breq	.+18     	; 0x9ee0 <pick_drop+0x2fce>
		__ticks = 1;
    9ece:	ce 01       	movw	r24, r28
    9ed0:	8f 55       	subi	r24, 0x5F	; 95
    9ed2:	9e 4f       	sbci	r25, 0xFE	; 254
    9ed4:	21 e0       	ldi	r18, 0x01	; 1
    9ed6:	30 e0       	ldi	r19, 0x00	; 0
    9ed8:	fc 01       	movw	r30, r24
    9eda:	31 83       	std	Z+1, r19	; 0x01
    9edc:	20 83       	st	Z, r18
    9ede:	74 c0       	rjmp	.+232    	; 0x9fc8 <pick_drop+0x30b6>
	else if (__tmp > 65535)
    9ee0:	ce 01       	movw	r24, r28
    9ee2:	83 56       	subi	r24, 0x63	; 99
    9ee4:	9e 4f       	sbci	r25, 0xFE	; 254
    9ee6:	11 e0       	ldi	r17, 0x01	; 1
    9ee8:	fc 01       	movw	r30, r24
    9eea:	60 81       	ld	r22, Z
    9eec:	71 81       	ldd	r23, Z+1	; 0x01
    9eee:	82 81       	ldd	r24, Z+2	; 0x02
    9ef0:	93 81       	ldd	r25, Z+3	; 0x03
    9ef2:	20 e0       	ldi	r18, 0x00	; 0
    9ef4:	3f ef       	ldi	r19, 0xFF	; 255
    9ef6:	4f e7       	ldi	r20, 0x7F	; 127
    9ef8:	57 e4       	ldi	r21, 0x47	; 71
    9efa:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    9efe:	18 16       	cp	r1, r24
    9f00:	0c f0       	brlt	.+2      	; 0x9f04 <pick_drop+0x2ff2>
    9f02:	10 e0       	ldi	r17, 0x00	; 0
    9f04:	11 23       	and	r17, r17
    9f06:	09 f4       	brne	.+2      	; 0x9f0a <pick_drop+0x2ff8>
    9f08:	4d c0       	rjmp	.+154    	; 0x9fa4 <pick_drop+0x3092>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9f0a:	ce 01       	movw	r24, r28
    9f0c:	87 56       	subi	r24, 0x67	; 103
    9f0e:	9e 4f       	sbci	r25, 0xFE	; 254
    9f10:	fc 01       	movw	r30, r24
    9f12:	60 81       	ld	r22, Z
    9f14:	71 81       	ldd	r23, Z+1	; 0x01
    9f16:	82 81       	ldd	r24, Z+2	; 0x02
    9f18:	93 81       	ldd	r25, Z+3	; 0x03
    9f1a:	20 e0       	ldi	r18, 0x00	; 0
    9f1c:	30 e0       	ldi	r19, 0x00	; 0
    9f1e:	40 e2       	ldi	r20, 0x20	; 32
    9f20:	51 e4       	ldi	r21, 0x41	; 65
    9f22:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    9f26:	dc 01       	movw	r26, r24
    9f28:	cb 01       	movw	r24, r22
    9f2a:	8e 01       	movw	r16, r28
    9f2c:	0f 55       	subi	r16, 0x5F	; 95
    9f2e:	1e 4f       	sbci	r17, 0xFE	; 254
    9f30:	bc 01       	movw	r22, r24
    9f32:	cd 01       	movw	r24, r26
    9f34:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9f38:	dc 01       	movw	r26, r24
    9f3a:	cb 01       	movw	r24, r22
    9f3c:	f8 01       	movw	r30, r16
    9f3e:	91 83       	std	Z+1, r25	; 0x01
    9f40:	80 83       	st	Z, r24
    9f42:	27 c0       	rjmp	.+78     	; 0x9f92 <pick_drop+0x3080>
    9f44:	ce 01       	movw	r24, r28
    9f46:	8d 55       	subi	r24, 0x5D	; 93
    9f48:	9e 4f       	sbci	r25, 0xFE	; 254
    9f4a:	20 e7       	ldi	r18, 0x70	; 112
    9f4c:	31 e0       	ldi	r19, 0x01	; 1
    9f4e:	fc 01       	movw	r30, r24
    9f50:	31 83       	std	Z+1, r19	; 0x01
    9f52:	20 83       	st	Z, r18
    9f54:	ce 01       	movw	r24, r28
    9f56:	8d 55       	subi	r24, 0x5D	; 93
    9f58:	9e 4f       	sbci	r25, 0xFE	; 254
    9f5a:	fc 01       	movw	r30, r24
    9f5c:	80 81       	ld	r24, Z
    9f5e:	91 81       	ldd	r25, Z+1	; 0x01
    9f60:	8c 01       	movw	r16, r24
    9f62:	c8 01       	movw	r24, r16
    9f64:	01 97       	sbiw	r24, 0x01	; 1
    9f66:	f1 f7       	brne	.-4      	; 0x9f64 <pick_drop+0x3052>
    9f68:	8c 01       	movw	r16, r24
    9f6a:	ce 01       	movw	r24, r28
    9f6c:	8d 55       	subi	r24, 0x5D	; 93
    9f6e:	9e 4f       	sbci	r25, 0xFE	; 254
    9f70:	fc 01       	movw	r30, r24
    9f72:	11 83       	std	Z+1, r17	; 0x01
    9f74:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f76:	ce 01       	movw	r24, r28
    9f78:	8f 55       	subi	r24, 0x5F	; 95
    9f7a:	9e 4f       	sbci	r25, 0xFE	; 254
    9f7c:	9e 01       	movw	r18, r28
    9f7e:	2f 55       	subi	r18, 0x5F	; 95
    9f80:	3e 4f       	sbci	r19, 0xFE	; 254
    9f82:	f9 01       	movw	r30, r18
    9f84:	20 81       	ld	r18, Z
    9f86:	31 81       	ldd	r19, Z+1	; 0x01
    9f88:	21 50       	subi	r18, 0x01	; 1
    9f8a:	30 40       	sbci	r19, 0x00	; 0
    9f8c:	fc 01       	movw	r30, r24
    9f8e:	31 83       	std	Z+1, r19	; 0x01
    9f90:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f92:	ce 01       	movw	r24, r28
    9f94:	8f 55       	subi	r24, 0x5F	; 95
    9f96:	9e 4f       	sbci	r25, 0xFE	; 254
    9f98:	fc 01       	movw	r30, r24
    9f9a:	80 81       	ld	r24, Z
    9f9c:	91 81       	ldd	r25, Z+1	; 0x01
    9f9e:	00 97       	sbiw	r24, 0x00	; 0
    9fa0:	89 f6       	brne	.-94     	; 0x9f44 <pick_drop+0x3032>
    9fa2:	2f c0       	rjmp	.+94     	; 0xa002 <pick_drop+0x30f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9fa4:	8e 01       	movw	r16, r28
    9fa6:	0f 55       	subi	r16, 0x5F	; 95
    9fa8:	1e 4f       	sbci	r17, 0xFE	; 254
    9faa:	ce 01       	movw	r24, r28
    9fac:	83 56       	subi	r24, 0x63	; 99
    9fae:	9e 4f       	sbci	r25, 0xFE	; 254
    9fb0:	fc 01       	movw	r30, r24
    9fb2:	60 81       	ld	r22, Z
    9fb4:	71 81       	ldd	r23, Z+1	; 0x01
    9fb6:	82 81       	ldd	r24, Z+2	; 0x02
    9fb8:	93 81       	ldd	r25, Z+3	; 0x03
    9fba:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    9fbe:	dc 01       	movw	r26, r24
    9fc0:	cb 01       	movw	r24, r22
    9fc2:	f8 01       	movw	r30, r16
    9fc4:	91 83       	std	Z+1, r25	; 0x01
    9fc6:	80 83       	st	Z, r24
    9fc8:	ce 01       	movw	r24, r28
    9fca:	8b 55       	subi	r24, 0x5B	; 91
    9fcc:	9e 4f       	sbci	r25, 0xFE	; 254
    9fce:	9e 01       	movw	r18, r28
    9fd0:	2f 55       	subi	r18, 0x5F	; 95
    9fd2:	3e 4f       	sbci	r19, 0xFE	; 254
    9fd4:	f9 01       	movw	r30, r18
    9fd6:	20 81       	ld	r18, Z
    9fd8:	31 81       	ldd	r19, Z+1	; 0x01
    9fda:	fc 01       	movw	r30, r24
    9fdc:	31 83       	std	Z+1, r19	; 0x01
    9fde:	20 83       	st	Z, r18
    9fe0:	ce 01       	movw	r24, r28
    9fe2:	8b 55       	subi	r24, 0x5B	; 91
    9fe4:	9e 4f       	sbci	r25, 0xFE	; 254
    9fe6:	fc 01       	movw	r30, r24
    9fe8:	80 81       	ld	r24, Z
    9fea:	91 81       	ldd	r25, Z+1	; 0x01
    9fec:	8c 01       	movw	r16, r24
    9fee:	c8 01       	movw	r24, r16
    9ff0:	01 97       	sbiw	r24, 0x01	; 1
    9ff2:	f1 f7       	brne	.-4      	; 0x9ff0 <pick_drop+0x30de>
    9ff4:	8c 01       	movw	r16, r24
    9ff6:	ce 01       	movw	r24, r28
    9ff8:	8b 55       	subi	r24, 0x5B	; 91
    9ffa:	9e 4f       	sbci	r25, 0xFE	; 254
    9ffc:	fc 01       	movw	r30, r24
    9ffe:	11 83       	std	Z+1, r17	; 0x01
    a000:	00 83       	st	Z, r16
		_delay_ms(20);
		correct_right3();
    a002:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    a006:	9e 01       	movw	r18, r28
    a008:	29 55       	subi	r18, 0x59	; 89
    a00a:	3e 4f       	sbci	r19, 0xFE	; 254
    a00c:	80 e0       	ldi	r24, 0x00	; 0
    a00e:	90 e0       	ldi	r25, 0x00	; 0
    a010:	a0 ea       	ldi	r26, 0xA0	; 160
    a012:	b1 e4       	ldi	r27, 0x41	; 65
    a014:	f9 01       	movw	r30, r18
    a016:	80 83       	st	Z, r24
    a018:	91 83       	std	Z+1, r25	; 0x01
    a01a:	a2 83       	std	Z+2, r26	; 0x02
    a01c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a01e:	8e 01       	movw	r16, r28
    a020:	05 55       	subi	r16, 0x55	; 85
    a022:	1e 4f       	sbci	r17, 0xFE	; 254
    a024:	ce 01       	movw	r24, r28
    a026:	89 55       	subi	r24, 0x59	; 89
    a028:	9e 4f       	sbci	r25, 0xFE	; 254
    a02a:	fc 01       	movw	r30, r24
    a02c:	60 81       	ld	r22, Z
    a02e:	71 81       	ldd	r23, Z+1	; 0x01
    a030:	82 81       	ldd	r24, Z+2	; 0x02
    a032:	93 81       	ldd	r25, Z+3	; 0x03
    a034:	26 e6       	ldi	r18, 0x66	; 102
    a036:	36 e6       	ldi	r19, 0x66	; 102
    a038:	46 e6       	ldi	r20, 0x66	; 102
    a03a:	55 e4       	ldi	r21, 0x45	; 69
    a03c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a040:	dc 01       	movw	r26, r24
    a042:	cb 01       	movw	r24, r22
    a044:	f8 01       	movw	r30, r16
    a046:	80 83       	st	Z, r24
    a048:	91 83       	std	Z+1, r25	; 0x01
    a04a:	a2 83       	std	Z+2, r26	; 0x02
    a04c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a04e:	ce 01       	movw	r24, r28
    a050:	85 55       	subi	r24, 0x55	; 85
    a052:	9e 4f       	sbci	r25, 0xFE	; 254
    a054:	11 e0       	ldi	r17, 0x01	; 1
    a056:	fc 01       	movw	r30, r24
    a058:	60 81       	ld	r22, Z
    a05a:	71 81       	ldd	r23, Z+1	; 0x01
    a05c:	82 81       	ldd	r24, Z+2	; 0x02
    a05e:	93 81       	ldd	r25, Z+3	; 0x03
    a060:	20 e0       	ldi	r18, 0x00	; 0
    a062:	30 e0       	ldi	r19, 0x00	; 0
    a064:	40 e8       	ldi	r20, 0x80	; 128
    a066:	5f e3       	ldi	r21, 0x3F	; 63
    a068:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    a06c:	88 23       	and	r24, r24
    a06e:	0c f0       	brlt	.+2      	; 0xa072 <pick_drop+0x3160>
    a070:	10 e0       	ldi	r17, 0x00	; 0
    a072:	11 23       	and	r17, r17
    a074:	49 f0       	breq	.+18     	; 0xa088 <pick_drop+0x3176>
		__ticks = 1;
    a076:	ce 01       	movw	r24, r28
    a078:	81 55       	subi	r24, 0x51	; 81
    a07a:	9e 4f       	sbci	r25, 0xFE	; 254
    a07c:	21 e0       	ldi	r18, 0x01	; 1
    a07e:	30 e0       	ldi	r19, 0x00	; 0
    a080:	fc 01       	movw	r30, r24
    a082:	31 83       	std	Z+1, r19	; 0x01
    a084:	20 83       	st	Z, r18
    a086:	74 c0       	rjmp	.+232    	; 0xa170 <pick_drop+0x325e>
	else if (__tmp > 65535)
    a088:	ce 01       	movw	r24, r28
    a08a:	85 55       	subi	r24, 0x55	; 85
    a08c:	9e 4f       	sbci	r25, 0xFE	; 254
    a08e:	11 e0       	ldi	r17, 0x01	; 1
    a090:	fc 01       	movw	r30, r24
    a092:	60 81       	ld	r22, Z
    a094:	71 81       	ldd	r23, Z+1	; 0x01
    a096:	82 81       	ldd	r24, Z+2	; 0x02
    a098:	93 81       	ldd	r25, Z+3	; 0x03
    a09a:	20 e0       	ldi	r18, 0x00	; 0
    a09c:	3f ef       	ldi	r19, 0xFF	; 255
    a09e:	4f e7       	ldi	r20, 0x7F	; 127
    a0a0:	57 e4       	ldi	r21, 0x47	; 71
    a0a2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    a0a6:	18 16       	cp	r1, r24
    a0a8:	0c f0       	brlt	.+2      	; 0xa0ac <pick_drop+0x319a>
    a0aa:	10 e0       	ldi	r17, 0x00	; 0
    a0ac:	11 23       	and	r17, r17
    a0ae:	09 f4       	brne	.+2      	; 0xa0b2 <pick_drop+0x31a0>
    a0b0:	4d c0       	rjmp	.+154    	; 0xa14c <pick_drop+0x323a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a0b2:	ce 01       	movw	r24, r28
    a0b4:	89 55       	subi	r24, 0x59	; 89
    a0b6:	9e 4f       	sbci	r25, 0xFE	; 254
    a0b8:	fc 01       	movw	r30, r24
    a0ba:	60 81       	ld	r22, Z
    a0bc:	71 81       	ldd	r23, Z+1	; 0x01
    a0be:	82 81       	ldd	r24, Z+2	; 0x02
    a0c0:	93 81       	ldd	r25, Z+3	; 0x03
    a0c2:	20 e0       	ldi	r18, 0x00	; 0
    a0c4:	30 e0       	ldi	r19, 0x00	; 0
    a0c6:	40 e2       	ldi	r20, 0x20	; 32
    a0c8:	51 e4       	ldi	r21, 0x41	; 65
    a0ca:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a0ce:	dc 01       	movw	r26, r24
    a0d0:	cb 01       	movw	r24, r22
    a0d2:	8e 01       	movw	r16, r28
    a0d4:	01 55       	subi	r16, 0x51	; 81
    a0d6:	1e 4f       	sbci	r17, 0xFE	; 254
    a0d8:	bc 01       	movw	r22, r24
    a0da:	cd 01       	movw	r24, r26
    a0dc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a0e0:	dc 01       	movw	r26, r24
    a0e2:	cb 01       	movw	r24, r22
    a0e4:	f8 01       	movw	r30, r16
    a0e6:	91 83       	std	Z+1, r25	; 0x01
    a0e8:	80 83       	st	Z, r24
    a0ea:	27 c0       	rjmp	.+78     	; 0xa13a <pick_drop+0x3228>
    a0ec:	ce 01       	movw	r24, r28
    a0ee:	8f 54       	subi	r24, 0x4F	; 79
    a0f0:	9e 4f       	sbci	r25, 0xFE	; 254
    a0f2:	20 e7       	ldi	r18, 0x70	; 112
    a0f4:	31 e0       	ldi	r19, 0x01	; 1
    a0f6:	fc 01       	movw	r30, r24
    a0f8:	31 83       	std	Z+1, r19	; 0x01
    a0fa:	20 83       	st	Z, r18
    a0fc:	ce 01       	movw	r24, r28
    a0fe:	8f 54       	subi	r24, 0x4F	; 79
    a100:	9e 4f       	sbci	r25, 0xFE	; 254
    a102:	fc 01       	movw	r30, r24
    a104:	80 81       	ld	r24, Z
    a106:	91 81       	ldd	r25, Z+1	; 0x01
    a108:	8c 01       	movw	r16, r24
    a10a:	c8 01       	movw	r24, r16
    a10c:	01 97       	sbiw	r24, 0x01	; 1
    a10e:	f1 f7       	brne	.-4      	; 0xa10c <pick_drop+0x31fa>
    a110:	8c 01       	movw	r16, r24
    a112:	ce 01       	movw	r24, r28
    a114:	8f 54       	subi	r24, 0x4F	; 79
    a116:	9e 4f       	sbci	r25, 0xFE	; 254
    a118:	fc 01       	movw	r30, r24
    a11a:	11 83       	std	Z+1, r17	; 0x01
    a11c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a11e:	ce 01       	movw	r24, r28
    a120:	81 55       	subi	r24, 0x51	; 81
    a122:	9e 4f       	sbci	r25, 0xFE	; 254
    a124:	9e 01       	movw	r18, r28
    a126:	21 55       	subi	r18, 0x51	; 81
    a128:	3e 4f       	sbci	r19, 0xFE	; 254
    a12a:	f9 01       	movw	r30, r18
    a12c:	20 81       	ld	r18, Z
    a12e:	31 81       	ldd	r19, Z+1	; 0x01
    a130:	21 50       	subi	r18, 0x01	; 1
    a132:	30 40       	sbci	r19, 0x00	; 0
    a134:	fc 01       	movw	r30, r24
    a136:	31 83       	std	Z+1, r19	; 0x01
    a138:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a13a:	ce 01       	movw	r24, r28
    a13c:	81 55       	subi	r24, 0x51	; 81
    a13e:	9e 4f       	sbci	r25, 0xFE	; 254
    a140:	fc 01       	movw	r30, r24
    a142:	80 81       	ld	r24, Z
    a144:	91 81       	ldd	r25, Z+1	; 0x01
    a146:	00 97       	sbiw	r24, 0x00	; 0
    a148:	89 f6       	brne	.-94     	; 0xa0ec <pick_drop+0x31da>
    a14a:	2f c0       	rjmp	.+94     	; 0xa1aa <pick_drop+0x3298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a14c:	8e 01       	movw	r16, r28
    a14e:	01 55       	subi	r16, 0x51	; 81
    a150:	1e 4f       	sbci	r17, 0xFE	; 254
    a152:	ce 01       	movw	r24, r28
    a154:	85 55       	subi	r24, 0x55	; 85
    a156:	9e 4f       	sbci	r25, 0xFE	; 254
    a158:	fc 01       	movw	r30, r24
    a15a:	60 81       	ld	r22, Z
    a15c:	71 81       	ldd	r23, Z+1	; 0x01
    a15e:	82 81       	ldd	r24, Z+2	; 0x02
    a160:	93 81       	ldd	r25, Z+3	; 0x03
    a162:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a166:	dc 01       	movw	r26, r24
    a168:	cb 01       	movw	r24, r22
    a16a:	f8 01       	movw	r30, r16
    a16c:	91 83       	std	Z+1, r25	; 0x01
    a16e:	80 83       	st	Z, r24
    a170:	ce 01       	movw	r24, r28
    a172:	8d 54       	subi	r24, 0x4D	; 77
    a174:	9e 4f       	sbci	r25, 0xFE	; 254
    a176:	9e 01       	movw	r18, r28
    a178:	21 55       	subi	r18, 0x51	; 81
    a17a:	3e 4f       	sbci	r19, 0xFE	; 254
    a17c:	f9 01       	movw	r30, r18
    a17e:	20 81       	ld	r18, Z
    a180:	31 81       	ldd	r19, Z+1	; 0x01
    a182:	fc 01       	movw	r30, r24
    a184:	31 83       	std	Z+1, r19	; 0x01
    a186:	20 83       	st	Z, r18
    a188:	ce 01       	movw	r24, r28
    a18a:	8d 54       	subi	r24, 0x4D	; 77
    a18c:	9e 4f       	sbci	r25, 0xFE	; 254
    a18e:	fc 01       	movw	r30, r24
    a190:	80 81       	ld	r24, Z
    a192:	91 81       	ldd	r25, Z+1	; 0x01
    a194:	8c 01       	movw	r16, r24
    a196:	c8 01       	movw	r24, r16
    a198:	01 97       	sbiw	r24, 0x01	; 1
    a19a:	f1 f7       	brne	.-4      	; 0xa198 <pick_drop+0x3286>
    a19c:	8c 01       	movw	r16, r24
    a19e:	ce 01       	movw	r24, r28
    a1a0:	8d 54       	subi	r24, 0x4D	; 77
    a1a2:	9e 4f       	sbci	r25, 0xFE	; 254
    a1a4:	fc 01       	movw	r30, r24
    a1a6:	11 83       	std	Z+1, r17	; 0x01
    a1a8:	00 83       	st	Z, r16
		_delay_ms(20);
		stop();
    a1aa:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    a1ae:	9e 01       	movw	r18, r28
    a1b0:	2b 54       	subi	r18, 0x4B	; 75
    a1b2:	3e 4f       	sbci	r19, 0xFE	; 254
    a1b4:	80 e0       	ldi	r24, 0x00	; 0
    a1b6:	90 e0       	ldi	r25, 0x00	; 0
    a1b8:	a0 ea       	ldi	r26, 0xA0	; 160
    a1ba:	b1 e4       	ldi	r27, 0x41	; 65
    a1bc:	f9 01       	movw	r30, r18
    a1be:	80 83       	st	Z, r24
    a1c0:	91 83       	std	Z+1, r25	; 0x01
    a1c2:	a2 83       	std	Z+2, r26	; 0x02
    a1c4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a1c6:	8e 01       	movw	r16, r28
    a1c8:	07 54       	subi	r16, 0x47	; 71
    a1ca:	1e 4f       	sbci	r17, 0xFE	; 254
    a1cc:	ce 01       	movw	r24, r28
    a1ce:	8b 54       	subi	r24, 0x4B	; 75
    a1d0:	9e 4f       	sbci	r25, 0xFE	; 254
    a1d2:	fc 01       	movw	r30, r24
    a1d4:	60 81       	ld	r22, Z
    a1d6:	71 81       	ldd	r23, Z+1	; 0x01
    a1d8:	82 81       	ldd	r24, Z+2	; 0x02
    a1da:	93 81       	ldd	r25, Z+3	; 0x03
    a1dc:	26 e6       	ldi	r18, 0x66	; 102
    a1de:	36 e6       	ldi	r19, 0x66	; 102
    a1e0:	46 e6       	ldi	r20, 0x66	; 102
    a1e2:	55 e4       	ldi	r21, 0x45	; 69
    a1e4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a1e8:	dc 01       	movw	r26, r24
    a1ea:	cb 01       	movw	r24, r22
    a1ec:	f8 01       	movw	r30, r16
    a1ee:	80 83       	st	Z, r24
    a1f0:	91 83       	std	Z+1, r25	; 0x01
    a1f2:	a2 83       	std	Z+2, r26	; 0x02
    a1f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a1f6:	ce 01       	movw	r24, r28
    a1f8:	87 54       	subi	r24, 0x47	; 71
    a1fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a1fc:	11 e0       	ldi	r17, 0x01	; 1
    a1fe:	fc 01       	movw	r30, r24
    a200:	60 81       	ld	r22, Z
    a202:	71 81       	ldd	r23, Z+1	; 0x01
    a204:	82 81       	ldd	r24, Z+2	; 0x02
    a206:	93 81       	ldd	r25, Z+3	; 0x03
    a208:	20 e0       	ldi	r18, 0x00	; 0
    a20a:	30 e0       	ldi	r19, 0x00	; 0
    a20c:	40 e8       	ldi	r20, 0x80	; 128
    a20e:	5f e3       	ldi	r21, 0x3F	; 63
    a210:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    a214:	88 23       	and	r24, r24
    a216:	0c f0       	brlt	.+2      	; 0xa21a <pick_drop+0x3308>
    a218:	10 e0       	ldi	r17, 0x00	; 0
    a21a:	11 23       	and	r17, r17
    a21c:	49 f0       	breq	.+18     	; 0xa230 <pick_drop+0x331e>
		__ticks = 1;
    a21e:	ce 01       	movw	r24, r28
    a220:	83 54       	subi	r24, 0x43	; 67
    a222:	9e 4f       	sbci	r25, 0xFE	; 254
    a224:	21 e0       	ldi	r18, 0x01	; 1
    a226:	30 e0       	ldi	r19, 0x00	; 0
    a228:	fc 01       	movw	r30, r24
    a22a:	31 83       	std	Z+1, r19	; 0x01
    a22c:	20 83       	st	Z, r18
    a22e:	74 c0       	rjmp	.+232    	; 0xa318 <pick_drop+0x3406>
	else if (__tmp > 65535)
    a230:	ce 01       	movw	r24, r28
    a232:	87 54       	subi	r24, 0x47	; 71
    a234:	9e 4f       	sbci	r25, 0xFE	; 254
    a236:	11 e0       	ldi	r17, 0x01	; 1
    a238:	fc 01       	movw	r30, r24
    a23a:	60 81       	ld	r22, Z
    a23c:	71 81       	ldd	r23, Z+1	; 0x01
    a23e:	82 81       	ldd	r24, Z+2	; 0x02
    a240:	93 81       	ldd	r25, Z+3	; 0x03
    a242:	20 e0       	ldi	r18, 0x00	; 0
    a244:	3f ef       	ldi	r19, 0xFF	; 255
    a246:	4f e7       	ldi	r20, 0x7F	; 127
    a248:	57 e4       	ldi	r21, 0x47	; 71
    a24a:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    a24e:	18 16       	cp	r1, r24
    a250:	0c f0       	brlt	.+2      	; 0xa254 <pick_drop+0x3342>
    a252:	10 e0       	ldi	r17, 0x00	; 0
    a254:	11 23       	and	r17, r17
    a256:	09 f4       	brne	.+2      	; 0xa25a <pick_drop+0x3348>
    a258:	4d c0       	rjmp	.+154    	; 0xa2f4 <pick_drop+0x33e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a25a:	ce 01       	movw	r24, r28
    a25c:	8b 54       	subi	r24, 0x4B	; 75
    a25e:	9e 4f       	sbci	r25, 0xFE	; 254
    a260:	fc 01       	movw	r30, r24
    a262:	60 81       	ld	r22, Z
    a264:	71 81       	ldd	r23, Z+1	; 0x01
    a266:	82 81       	ldd	r24, Z+2	; 0x02
    a268:	93 81       	ldd	r25, Z+3	; 0x03
    a26a:	20 e0       	ldi	r18, 0x00	; 0
    a26c:	30 e0       	ldi	r19, 0x00	; 0
    a26e:	40 e2       	ldi	r20, 0x20	; 32
    a270:	51 e4       	ldi	r21, 0x41	; 65
    a272:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a276:	dc 01       	movw	r26, r24
    a278:	cb 01       	movw	r24, r22
    a27a:	8e 01       	movw	r16, r28
    a27c:	03 54       	subi	r16, 0x43	; 67
    a27e:	1e 4f       	sbci	r17, 0xFE	; 254
    a280:	bc 01       	movw	r22, r24
    a282:	cd 01       	movw	r24, r26
    a284:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a288:	dc 01       	movw	r26, r24
    a28a:	cb 01       	movw	r24, r22
    a28c:	f8 01       	movw	r30, r16
    a28e:	91 83       	std	Z+1, r25	; 0x01
    a290:	80 83       	st	Z, r24
    a292:	27 c0       	rjmp	.+78     	; 0xa2e2 <pick_drop+0x33d0>
    a294:	ce 01       	movw	r24, r28
    a296:	81 54       	subi	r24, 0x41	; 65
    a298:	9e 4f       	sbci	r25, 0xFE	; 254
    a29a:	20 e7       	ldi	r18, 0x70	; 112
    a29c:	31 e0       	ldi	r19, 0x01	; 1
    a29e:	fc 01       	movw	r30, r24
    a2a0:	31 83       	std	Z+1, r19	; 0x01
    a2a2:	20 83       	st	Z, r18
    a2a4:	ce 01       	movw	r24, r28
    a2a6:	81 54       	subi	r24, 0x41	; 65
    a2a8:	9e 4f       	sbci	r25, 0xFE	; 254
    a2aa:	fc 01       	movw	r30, r24
    a2ac:	80 81       	ld	r24, Z
    a2ae:	91 81       	ldd	r25, Z+1	; 0x01
    a2b0:	8c 01       	movw	r16, r24
    a2b2:	c8 01       	movw	r24, r16
    a2b4:	01 97       	sbiw	r24, 0x01	; 1
    a2b6:	f1 f7       	brne	.-4      	; 0xa2b4 <pick_drop+0x33a2>
    a2b8:	8c 01       	movw	r16, r24
    a2ba:	ce 01       	movw	r24, r28
    a2bc:	81 54       	subi	r24, 0x41	; 65
    a2be:	9e 4f       	sbci	r25, 0xFE	; 254
    a2c0:	fc 01       	movw	r30, r24
    a2c2:	11 83       	std	Z+1, r17	; 0x01
    a2c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a2c6:	ce 01       	movw	r24, r28
    a2c8:	83 54       	subi	r24, 0x43	; 67
    a2ca:	9e 4f       	sbci	r25, 0xFE	; 254
    a2cc:	9e 01       	movw	r18, r28
    a2ce:	23 54       	subi	r18, 0x43	; 67
    a2d0:	3e 4f       	sbci	r19, 0xFE	; 254
    a2d2:	f9 01       	movw	r30, r18
    a2d4:	20 81       	ld	r18, Z
    a2d6:	31 81       	ldd	r19, Z+1	; 0x01
    a2d8:	21 50       	subi	r18, 0x01	; 1
    a2da:	30 40       	sbci	r19, 0x00	; 0
    a2dc:	fc 01       	movw	r30, r24
    a2de:	31 83       	std	Z+1, r19	; 0x01
    a2e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a2e2:	ce 01       	movw	r24, r28
    a2e4:	83 54       	subi	r24, 0x43	; 67
    a2e6:	9e 4f       	sbci	r25, 0xFE	; 254
    a2e8:	fc 01       	movw	r30, r24
    a2ea:	80 81       	ld	r24, Z
    a2ec:	91 81       	ldd	r25, Z+1	; 0x01
    a2ee:	00 97       	sbiw	r24, 0x00	; 0
    a2f0:	89 f6       	brne	.-94     	; 0xa294 <pick_drop+0x3382>
    a2f2:	2f c0       	rjmp	.+94     	; 0xa352 <pick_drop+0x3440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a2f4:	8e 01       	movw	r16, r28
    a2f6:	03 54       	subi	r16, 0x43	; 67
    a2f8:	1e 4f       	sbci	r17, 0xFE	; 254
    a2fa:	ce 01       	movw	r24, r28
    a2fc:	87 54       	subi	r24, 0x47	; 71
    a2fe:	9e 4f       	sbci	r25, 0xFE	; 254
    a300:	fc 01       	movw	r30, r24
    a302:	60 81       	ld	r22, Z
    a304:	71 81       	ldd	r23, Z+1	; 0x01
    a306:	82 81       	ldd	r24, Z+2	; 0x02
    a308:	93 81       	ldd	r25, Z+3	; 0x03
    a30a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a30e:	dc 01       	movw	r26, r24
    a310:	cb 01       	movw	r24, r22
    a312:	f8 01       	movw	r30, r16
    a314:	91 83       	std	Z+1, r25	; 0x01
    a316:	80 83       	st	Z, r24
    a318:	ce 01       	movw	r24, r28
    a31a:	8f 53       	subi	r24, 0x3F	; 63
    a31c:	9e 4f       	sbci	r25, 0xFE	; 254
    a31e:	9e 01       	movw	r18, r28
    a320:	23 54       	subi	r18, 0x43	; 67
    a322:	3e 4f       	sbci	r19, 0xFE	; 254
    a324:	f9 01       	movw	r30, r18
    a326:	20 81       	ld	r18, Z
    a328:	31 81       	ldd	r19, Z+1	; 0x01
    a32a:	fc 01       	movw	r30, r24
    a32c:	31 83       	std	Z+1, r19	; 0x01
    a32e:	20 83       	st	Z, r18
    a330:	ce 01       	movw	r24, r28
    a332:	8f 53       	subi	r24, 0x3F	; 63
    a334:	9e 4f       	sbci	r25, 0xFE	; 254
    a336:	fc 01       	movw	r30, r24
    a338:	80 81       	ld	r24, Z
    a33a:	91 81       	ldd	r25, Z+1	; 0x01
    a33c:	8c 01       	movw	r16, r24
    a33e:	c8 01       	movw	r24, r16
    a340:	01 97       	sbiw	r24, 0x01	; 1
    a342:	f1 f7       	brne	.-4      	; 0xa340 <pick_drop+0x342e>
    a344:	8c 01       	movw	r16, r24
    a346:	ce 01       	movw	r24, r28
    a348:	8f 53       	subi	r24, 0x3F	; 63
    a34a:	9e 4f       	sbci	r25, 0xFE	; 254
    a34c:	fc 01       	movw	r30, r24
    a34e:	11 83       	std	Z+1, r17	; 0x01
    a350:	00 83       	st	Z, r16
		_delay_ms(20);
		forward_mm(20);
    a352:	84 e1       	ldi	r24, 0x14	; 20
    a354:	90 e0       	ldi	r25, 0x00	; 0
    a356:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a35a:	9e 01       	movw	r18, r28
    a35c:	2d 53       	subi	r18, 0x3D	; 61
    a35e:	3e 4f       	sbci	r19, 0xFE	; 254
    a360:	80 e0       	ldi	r24, 0x00	; 0
    a362:	90 e0       	ldi	r25, 0x00	; 0
    a364:	a0 ea       	ldi	r26, 0xA0	; 160
    a366:	b1 e4       	ldi	r27, 0x41	; 65
    a368:	f9 01       	movw	r30, r18
    a36a:	80 83       	st	Z, r24
    a36c:	91 83       	std	Z+1, r25	; 0x01
    a36e:	a2 83       	std	Z+2, r26	; 0x02
    a370:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a372:	8e 01       	movw	r16, r28
    a374:	09 53       	subi	r16, 0x39	; 57
    a376:	1e 4f       	sbci	r17, 0xFE	; 254
    a378:	ce 01       	movw	r24, r28
    a37a:	8d 53       	subi	r24, 0x3D	; 61
    a37c:	9e 4f       	sbci	r25, 0xFE	; 254
    a37e:	fc 01       	movw	r30, r24
    a380:	60 81       	ld	r22, Z
    a382:	71 81       	ldd	r23, Z+1	; 0x01
    a384:	82 81       	ldd	r24, Z+2	; 0x02
    a386:	93 81       	ldd	r25, Z+3	; 0x03
    a388:	26 e6       	ldi	r18, 0x66	; 102
    a38a:	36 e6       	ldi	r19, 0x66	; 102
    a38c:	46 e6       	ldi	r20, 0x66	; 102
    a38e:	55 e4       	ldi	r21, 0x45	; 69
    a390:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a394:	dc 01       	movw	r26, r24
    a396:	cb 01       	movw	r24, r22
    a398:	f8 01       	movw	r30, r16
    a39a:	80 83       	st	Z, r24
    a39c:	91 83       	std	Z+1, r25	; 0x01
    a39e:	a2 83       	std	Z+2, r26	; 0x02
    a3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a3a2:	ce 01       	movw	r24, r28
    a3a4:	89 53       	subi	r24, 0x39	; 57
    a3a6:	9e 4f       	sbci	r25, 0xFE	; 254
    a3a8:	11 e0       	ldi	r17, 0x01	; 1
    a3aa:	fc 01       	movw	r30, r24
    a3ac:	60 81       	ld	r22, Z
    a3ae:	71 81       	ldd	r23, Z+1	; 0x01
    a3b0:	82 81       	ldd	r24, Z+2	; 0x02
    a3b2:	93 81       	ldd	r25, Z+3	; 0x03
    a3b4:	20 e0       	ldi	r18, 0x00	; 0
    a3b6:	30 e0       	ldi	r19, 0x00	; 0
    a3b8:	40 e8       	ldi	r20, 0x80	; 128
    a3ba:	5f e3       	ldi	r21, 0x3F	; 63
    a3bc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    a3c0:	88 23       	and	r24, r24
    a3c2:	0c f0       	brlt	.+2      	; 0xa3c6 <pick_drop+0x34b4>
    a3c4:	10 e0       	ldi	r17, 0x00	; 0
    a3c6:	11 23       	and	r17, r17
    a3c8:	49 f0       	breq	.+18     	; 0xa3dc <pick_drop+0x34ca>
		__ticks = 1;
    a3ca:	ce 01       	movw	r24, r28
    a3cc:	85 53       	subi	r24, 0x35	; 53
    a3ce:	9e 4f       	sbci	r25, 0xFE	; 254
    a3d0:	21 e0       	ldi	r18, 0x01	; 1
    a3d2:	30 e0       	ldi	r19, 0x00	; 0
    a3d4:	fc 01       	movw	r30, r24
    a3d6:	31 83       	std	Z+1, r19	; 0x01
    a3d8:	20 83       	st	Z, r18
    a3da:	75 c0       	rjmp	.+234    	; 0xa4c6 <pick_drop+0x35b4>
	else if (__tmp > 65535)
    a3dc:	ce 01       	movw	r24, r28
    a3de:	89 53       	subi	r24, 0x39	; 57
    a3e0:	9e 4f       	sbci	r25, 0xFE	; 254
    a3e2:	11 e0       	ldi	r17, 0x01	; 1
    a3e4:	fc 01       	movw	r30, r24
    a3e6:	60 81       	ld	r22, Z
    a3e8:	71 81       	ldd	r23, Z+1	; 0x01
    a3ea:	82 81       	ldd	r24, Z+2	; 0x02
    a3ec:	93 81       	ldd	r25, Z+3	; 0x03
    a3ee:	20 e0       	ldi	r18, 0x00	; 0
    a3f0:	3f ef       	ldi	r19, 0xFF	; 255
    a3f2:	4f e7       	ldi	r20, 0x7F	; 127
    a3f4:	57 e4       	ldi	r21, 0x47	; 71
    a3f6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    a3fa:	18 16       	cp	r1, r24
    a3fc:	0c f0       	brlt	.+2      	; 0xa400 <pick_drop+0x34ee>
    a3fe:	10 e0       	ldi	r17, 0x00	; 0
    a400:	11 23       	and	r17, r17
    a402:	09 f4       	brne	.+2      	; 0xa406 <pick_drop+0x34f4>
    a404:	4e c0       	rjmp	.+156    	; 0xa4a2 <pick_drop+0x3590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a406:	ce 01       	movw	r24, r28
    a408:	8d 53       	subi	r24, 0x3D	; 61
    a40a:	9e 4f       	sbci	r25, 0xFE	; 254
    a40c:	fc 01       	movw	r30, r24
    a40e:	60 81       	ld	r22, Z
    a410:	71 81       	ldd	r23, Z+1	; 0x01
    a412:	82 81       	ldd	r24, Z+2	; 0x02
    a414:	93 81       	ldd	r25, Z+3	; 0x03
    a416:	20 e0       	ldi	r18, 0x00	; 0
    a418:	30 e0       	ldi	r19, 0x00	; 0
    a41a:	40 e2       	ldi	r20, 0x20	; 32
    a41c:	51 e4       	ldi	r21, 0x41	; 65
    a41e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a422:	dc 01       	movw	r26, r24
    a424:	cb 01       	movw	r24, r22
    a426:	8e 01       	movw	r16, r28
    a428:	05 53       	subi	r16, 0x35	; 53
    a42a:	1e 4f       	sbci	r17, 0xFE	; 254
    a42c:	bc 01       	movw	r22, r24
    a42e:	cd 01       	movw	r24, r26
    a430:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a434:	dc 01       	movw	r26, r24
    a436:	cb 01       	movw	r24, r22
    a438:	f8 01       	movw	r30, r16
    a43a:	91 83       	std	Z+1, r25	; 0x01
    a43c:	80 83       	st	Z, r24
    a43e:	27 c0       	rjmp	.+78     	; 0xa48e <pick_drop+0x357c>
    a440:	ce 01       	movw	r24, r28
    a442:	83 53       	subi	r24, 0x33	; 51
    a444:	9e 4f       	sbci	r25, 0xFE	; 254
    a446:	20 e7       	ldi	r18, 0x70	; 112
    a448:	31 e0       	ldi	r19, 0x01	; 1
    a44a:	fc 01       	movw	r30, r24
    a44c:	31 83       	std	Z+1, r19	; 0x01
    a44e:	20 83       	st	Z, r18
    a450:	ce 01       	movw	r24, r28
    a452:	83 53       	subi	r24, 0x33	; 51
    a454:	9e 4f       	sbci	r25, 0xFE	; 254
    a456:	fc 01       	movw	r30, r24
    a458:	80 81       	ld	r24, Z
    a45a:	91 81       	ldd	r25, Z+1	; 0x01
    a45c:	8c 01       	movw	r16, r24
    a45e:	c8 01       	movw	r24, r16
    a460:	01 97       	sbiw	r24, 0x01	; 1
    a462:	f1 f7       	brne	.-4      	; 0xa460 <pick_drop+0x354e>
    a464:	8c 01       	movw	r16, r24
    a466:	ce 01       	movw	r24, r28
    a468:	83 53       	subi	r24, 0x33	; 51
    a46a:	9e 4f       	sbci	r25, 0xFE	; 254
    a46c:	fc 01       	movw	r30, r24
    a46e:	11 83       	std	Z+1, r17	; 0x01
    a470:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a472:	ce 01       	movw	r24, r28
    a474:	85 53       	subi	r24, 0x35	; 53
    a476:	9e 4f       	sbci	r25, 0xFE	; 254
    a478:	9e 01       	movw	r18, r28
    a47a:	25 53       	subi	r18, 0x35	; 53
    a47c:	3e 4f       	sbci	r19, 0xFE	; 254
    a47e:	f9 01       	movw	r30, r18
    a480:	20 81       	ld	r18, Z
    a482:	31 81       	ldd	r19, Z+1	; 0x01
    a484:	21 50       	subi	r18, 0x01	; 1
    a486:	30 40       	sbci	r19, 0x00	; 0
    a488:	fc 01       	movw	r30, r24
    a48a:	31 83       	std	Z+1, r19	; 0x01
    a48c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a48e:	ce 01       	movw	r24, r28
    a490:	85 53       	subi	r24, 0x35	; 53
    a492:	9e 4f       	sbci	r25, 0xFE	; 254
    a494:	fc 01       	movw	r30, r24
    a496:	80 81       	ld	r24, Z
    a498:	91 81       	ldd	r25, Z+1	; 0x01
    a49a:	00 97       	sbiw	r24, 0x00	; 0
    a49c:	89 f6       	brne	.-94     	; 0xa440 <pick_drop+0x352e>
    a49e:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a4a2:	8e 01       	movw	r16, r28
    a4a4:	05 53       	subi	r16, 0x35	; 53
    a4a6:	1e 4f       	sbci	r17, 0xFE	; 254
    a4a8:	ce 01       	movw	r24, r28
    a4aa:	89 53       	subi	r24, 0x39	; 57
    a4ac:	9e 4f       	sbci	r25, 0xFE	; 254
    a4ae:	fc 01       	movw	r30, r24
    a4b0:	60 81       	ld	r22, Z
    a4b2:	71 81       	ldd	r23, Z+1	; 0x01
    a4b4:	82 81       	ldd	r24, Z+2	; 0x02
    a4b6:	93 81       	ldd	r25, Z+3	; 0x03
    a4b8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a4bc:	dc 01       	movw	r26, r24
    a4be:	cb 01       	movw	r24, r22
    a4c0:	f8 01       	movw	r30, r16
    a4c2:	91 83       	std	Z+1, r25	; 0x01
    a4c4:	80 83       	st	Z, r24
    a4c6:	ce 01       	movw	r24, r28
    a4c8:	81 53       	subi	r24, 0x31	; 49
    a4ca:	9e 4f       	sbci	r25, 0xFE	; 254
    a4cc:	9e 01       	movw	r18, r28
    a4ce:	25 53       	subi	r18, 0x35	; 53
    a4d0:	3e 4f       	sbci	r19, 0xFE	; 254
    a4d2:	f9 01       	movw	r30, r18
    a4d4:	20 81       	ld	r18, Z
    a4d6:	31 81       	ldd	r19, Z+1	; 0x01
    a4d8:	fc 01       	movw	r30, r24
    a4da:	31 83       	std	Z+1, r19	; 0x01
    a4dc:	20 83       	st	Z, r18
    a4de:	ce 01       	movw	r24, r28
    a4e0:	81 53       	subi	r24, 0x31	; 49
    a4e2:	9e 4f       	sbci	r25, 0xFE	; 254
    a4e4:	fc 01       	movw	r30, r24
    a4e6:	80 81       	ld	r24, Z
    a4e8:	91 81       	ldd	r25, Z+1	; 0x01
    a4ea:	8c 01       	movw	r16, r24
    a4ec:	c8 01       	movw	r24, r16
    a4ee:	01 97       	sbiw	r24, 0x01	; 1
    a4f0:	f1 f7       	brne	.-4      	; 0xa4ee <pick_drop+0x35dc>
    a4f2:	8c 01       	movw	r16, r24
    a4f4:	ce 01       	movw	r24, r28
    a4f6:	81 53       	subi	r24, 0x31	; 49
    a4f8:	9e 4f       	sbci	r25, 0xFE	; 254
    a4fa:	fc 01       	movw	r30, r24
    a4fc:	11 83       	std	Z+1, r17	; 0x01
    a4fe:	00 83       	st	Z, r16
    a500:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
		_delay_ms(20);
	}
	else if(pd=='4')
    a504:	ce 01       	movw	r24, r28
    a506:	8d 5e       	subi	r24, 0xED	; 237
    a508:	9c 4f       	sbci	r25, 0xFC	; 252
    a50a:	fc 01       	movw	r30, r24
    a50c:	80 81       	ld	r24, Z
    a50e:	84 33       	cpi	r24, 0x34	; 52
    a510:	09 f0       	breq	.+2      	; 0xa514 <pick_drop+0x3602>
    a512:	6e c3       	rjmp	.+1756   	; 0xabf0 <pick_drop+0x3cde>
	{	// first node
		if(master_path[node-1]=='N'){
    a514:	80 91 63 03 	lds	r24, 0x0363
    a518:	90 91 64 03 	lds	r25, 0x0364
    a51c:	01 97       	sbiw	r24, 0x01	; 1
    a51e:	89 59       	subi	r24, 0x99	; 153
    a520:	9c 4f       	sbci	r25, 0xFC	; 252
    a522:	fc 01       	movw	r30, r24
    a524:	80 81       	ld	r24, Z
    a526:	8e 34       	cpi	r24, 0x4E	; 78
    a528:	11 f0       	breq	.+4      	; 0xa52e <pick_drop+0x361c>
    a52a:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
		forward_mm(35);
    a52e:	83 e2       	ldi	r24, 0x23	; 35
    a530:	90 e0       	ldi	r25, 0x00	; 0
    a532:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		spl_left();
    a536:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
		back_mm(25);
    a53a:	89 e1       	ldi	r24, 0x19	; 25
    a53c:	90 e0       	ldi	r25, 0x00	; 0
    a53e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    a542:	9e 01       	movw	r18, r28
    a544:	2f 52       	subi	r18, 0x2F	; 47
    a546:	3e 4f       	sbci	r19, 0xFE	; 254
    a548:	80 e0       	ldi	r24, 0x00	; 0
    a54a:	90 e0       	ldi	r25, 0x00	; 0
    a54c:	a0 ea       	ldi	r26, 0xA0	; 160
    a54e:	b1 e4       	ldi	r27, 0x41	; 65
    a550:	f9 01       	movw	r30, r18
    a552:	80 83       	st	Z, r24
    a554:	91 83       	std	Z+1, r25	; 0x01
    a556:	a2 83       	std	Z+2, r26	; 0x02
    a558:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a55a:	8e 01       	movw	r16, r28
    a55c:	0b 52       	subi	r16, 0x2B	; 43
    a55e:	1e 4f       	sbci	r17, 0xFE	; 254
    a560:	ce 01       	movw	r24, r28
    a562:	8f 52       	subi	r24, 0x2F	; 47
    a564:	9e 4f       	sbci	r25, 0xFE	; 254
    a566:	fc 01       	movw	r30, r24
    a568:	60 81       	ld	r22, Z
    a56a:	71 81       	ldd	r23, Z+1	; 0x01
    a56c:	82 81       	ldd	r24, Z+2	; 0x02
    a56e:	93 81       	ldd	r25, Z+3	; 0x03
    a570:	26 e6       	ldi	r18, 0x66	; 102
    a572:	36 e6       	ldi	r19, 0x66	; 102
    a574:	46 e6       	ldi	r20, 0x66	; 102
    a576:	55 e4       	ldi	r21, 0x45	; 69
    a578:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a57c:	dc 01       	movw	r26, r24
    a57e:	cb 01       	movw	r24, r22
    a580:	f8 01       	movw	r30, r16
    a582:	80 83       	st	Z, r24
    a584:	91 83       	std	Z+1, r25	; 0x01
    a586:	a2 83       	std	Z+2, r26	; 0x02
    a588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a58a:	ce 01       	movw	r24, r28
    a58c:	8b 52       	subi	r24, 0x2B	; 43
    a58e:	9e 4f       	sbci	r25, 0xFE	; 254
    a590:	11 e0       	ldi	r17, 0x01	; 1
    a592:	fc 01       	movw	r30, r24
    a594:	60 81       	ld	r22, Z
    a596:	71 81       	ldd	r23, Z+1	; 0x01
    a598:	82 81       	ldd	r24, Z+2	; 0x02
    a59a:	93 81       	ldd	r25, Z+3	; 0x03
    a59c:	20 e0       	ldi	r18, 0x00	; 0
    a59e:	30 e0       	ldi	r19, 0x00	; 0
    a5a0:	40 e8       	ldi	r20, 0x80	; 128
    a5a2:	5f e3       	ldi	r21, 0x3F	; 63
    a5a4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    a5a8:	88 23       	and	r24, r24
    a5aa:	0c f0       	brlt	.+2      	; 0xa5ae <pick_drop+0x369c>
    a5ac:	10 e0       	ldi	r17, 0x00	; 0
    a5ae:	11 23       	and	r17, r17
    a5b0:	49 f0       	breq	.+18     	; 0xa5c4 <pick_drop+0x36b2>
		__ticks = 1;
    a5b2:	ce 01       	movw	r24, r28
    a5b4:	87 52       	subi	r24, 0x27	; 39
    a5b6:	9e 4f       	sbci	r25, 0xFE	; 254
    a5b8:	21 e0       	ldi	r18, 0x01	; 1
    a5ba:	30 e0       	ldi	r19, 0x00	; 0
    a5bc:	fc 01       	movw	r30, r24
    a5be:	31 83       	std	Z+1, r19	; 0x01
    a5c0:	20 83       	st	Z, r18
    a5c2:	74 c0       	rjmp	.+232    	; 0xa6ac <pick_drop+0x379a>
	else if (__tmp > 65535)
    a5c4:	ce 01       	movw	r24, r28
    a5c6:	8b 52       	subi	r24, 0x2B	; 43
    a5c8:	9e 4f       	sbci	r25, 0xFE	; 254
    a5ca:	11 e0       	ldi	r17, 0x01	; 1
    a5cc:	fc 01       	movw	r30, r24
    a5ce:	60 81       	ld	r22, Z
    a5d0:	71 81       	ldd	r23, Z+1	; 0x01
    a5d2:	82 81       	ldd	r24, Z+2	; 0x02
    a5d4:	93 81       	ldd	r25, Z+3	; 0x03
    a5d6:	20 e0       	ldi	r18, 0x00	; 0
    a5d8:	3f ef       	ldi	r19, 0xFF	; 255
    a5da:	4f e7       	ldi	r20, 0x7F	; 127
    a5dc:	57 e4       	ldi	r21, 0x47	; 71
    a5de:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    a5e2:	18 16       	cp	r1, r24
    a5e4:	0c f0       	brlt	.+2      	; 0xa5e8 <pick_drop+0x36d6>
    a5e6:	10 e0       	ldi	r17, 0x00	; 0
    a5e8:	11 23       	and	r17, r17
    a5ea:	09 f4       	brne	.+2      	; 0xa5ee <pick_drop+0x36dc>
    a5ec:	4d c0       	rjmp	.+154    	; 0xa688 <pick_drop+0x3776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a5ee:	ce 01       	movw	r24, r28
    a5f0:	8f 52       	subi	r24, 0x2F	; 47
    a5f2:	9e 4f       	sbci	r25, 0xFE	; 254
    a5f4:	fc 01       	movw	r30, r24
    a5f6:	60 81       	ld	r22, Z
    a5f8:	71 81       	ldd	r23, Z+1	; 0x01
    a5fa:	82 81       	ldd	r24, Z+2	; 0x02
    a5fc:	93 81       	ldd	r25, Z+3	; 0x03
    a5fe:	20 e0       	ldi	r18, 0x00	; 0
    a600:	30 e0       	ldi	r19, 0x00	; 0
    a602:	40 e2       	ldi	r20, 0x20	; 32
    a604:	51 e4       	ldi	r21, 0x41	; 65
    a606:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a60a:	dc 01       	movw	r26, r24
    a60c:	cb 01       	movw	r24, r22
    a60e:	8e 01       	movw	r16, r28
    a610:	07 52       	subi	r16, 0x27	; 39
    a612:	1e 4f       	sbci	r17, 0xFE	; 254
    a614:	bc 01       	movw	r22, r24
    a616:	cd 01       	movw	r24, r26
    a618:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a61c:	dc 01       	movw	r26, r24
    a61e:	cb 01       	movw	r24, r22
    a620:	f8 01       	movw	r30, r16
    a622:	91 83       	std	Z+1, r25	; 0x01
    a624:	80 83       	st	Z, r24
    a626:	27 c0       	rjmp	.+78     	; 0xa676 <pick_drop+0x3764>
    a628:	ce 01       	movw	r24, r28
    a62a:	85 52       	subi	r24, 0x25	; 37
    a62c:	9e 4f       	sbci	r25, 0xFE	; 254
    a62e:	20 e7       	ldi	r18, 0x70	; 112
    a630:	31 e0       	ldi	r19, 0x01	; 1
    a632:	fc 01       	movw	r30, r24
    a634:	31 83       	std	Z+1, r19	; 0x01
    a636:	20 83       	st	Z, r18
    a638:	ce 01       	movw	r24, r28
    a63a:	85 52       	subi	r24, 0x25	; 37
    a63c:	9e 4f       	sbci	r25, 0xFE	; 254
    a63e:	fc 01       	movw	r30, r24
    a640:	80 81       	ld	r24, Z
    a642:	91 81       	ldd	r25, Z+1	; 0x01
    a644:	8c 01       	movw	r16, r24
    a646:	c8 01       	movw	r24, r16
    a648:	01 97       	sbiw	r24, 0x01	; 1
    a64a:	f1 f7       	brne	.-4      	; 0xa648 <pick_drop+0x3736>
    a64c:	8c 01       	movw	r16, r24
    a64e:	ce 01       	movw	r24, r28
    a650:	85 52       	subi	r24, 0x25	; 37
    a652:	9e 4f       	sbci	r25, 0xFE	; 254
    a654:	fc 01       	movw	r30, r24
    a656:	11 83       	std	Z+1, r17	; 0x01
    a658:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a65a:	ce 01       	movw	r24, r28
    a65c:	87 52       	subi	r24, 0x27	; 39
    a65e:	9e 4f       	sbci	r25, 0xFE	; 254
    a660:	9e 01       	movw	r18, r28
    a662:	27 52       	subi	r18, 0x27	; 39
    a664:	3e 4f       	sbci	r19, 0xFE	; 254
    a666:	f9 01       	movw	r30, r18
    a668:	20 81       	ld	r18, Z
    a66a:	31 81       	ldd	r19, Z+1	; 0x01
    a66c:	21 50       	subi	r18, 0x01	; 1
    a66e:	30 40       	sbci	r19, 0x00	; 0
    a670:	fc 01       	movw	r30, r24
    a672:	31 83       	std	Z+1, r19	; 0x01
    a674:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a676:	ce 01       	movw	r24, r28
    a678:	87 52       	subi	r24, 0x27	; 39
    a67a:	9e 4f       	sbci	r25, 0xFE	; 254
    a67c:	fc 01       	movw	r30, r24
    a67e:	80 81       	ld	r24, Z
    a680:	91 81       	ldd	r25, Z+1	; 0x01
    a682:	00 97       	sbiw	r24, 0x00	; 0
    a684:	89 f6       	brne	.-94     	; 0xa628 <pick_drop+0x3716>
    a686:	2f c0       	rjmp	.+94     	; 0xa6e6 <pick_drop+0x37d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a688:	8e 01       	movw	r16, r28
    a68a:	07 52       	subi	r16, 0x27	; 39
    a68c:	1e 4f       	sbci	r17, 0xFE	; 254
    a68e:	ce 01       	movw	r24, r28
    a690:	8b 52       	subi	r24, 0x2B	; 43
    a692:	9e 4f       	sbci	r25, 0xFE	; 254
    a694:	fc 01       	movw	r30, r24
    a696:	60 81       	ld	r22, Z
    a698:	71 81       	ldd	r23, Z+1	; 0x01
    a69a:	82 81       	ldd	r24, Z+2	; 0x02
    a69c:	93 81       	ldd	r25, Z+3	; 0x03
    a69e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a6a2:	dc 01       	movw	r26, r24
    a6a4:	cb 01       	movw	r24, r22
    a6a6:	f8 01       	movw	r30, r16
    a6a8:	91 83       	std	Z+1, r25	; 0x01
    a6aa:	80 83       	st	Z, r24
    a6ac:	ce 01       	movw	r24, r28
    a6ae:	83 52       	subi	r24, 0x23	; 35
    a6b0:	9e 4f       	sbci	r25, 0xFE	; 254
    a6b2:	9e 01       	movw	r18, r28
    a6b4:	27 52       	subi	r18, 0x27	; 39
    a6b6:	3e 4f       	sbci	r19, 0xFE	; 254
    a6b8:	f9 01       	movw	r30, r18
    a6ba:	20 81       	ld	r18, Z
    a6bc:	31 81       	ldd	r19, Z+1	; 0x01
    a6be:	fc 01       	movw	r30, r24
    a6c0:	31 83       	std	Z+1, r19	; 0x01
    a6c2:	20 83       	st	Z, r18
    a6c4:	ce 01       	movw	r24, r28
    a6c6:	83 52       	subi	r24, 0x23	; 35
    a6c8:	9e 4f       	sbci	r25, 0xFE	; 254
    a6ca:	fc 01       	movw	r30, r24
    a6cc:	80 81       	ld	r24, Z
    a6ce:	91 81       	ldd	r25, Z+1	; 0x01
    a6d0:	8c 01       	movw	r16, r24
    a6d2:	c8 01       	movw	r24, r16
    a6d4:	01 97       	sbiw	r24, 0x01	; 1
    a6d6:	f1 f7       	brne	.-4      	; 0xa6d4 <pick_drop+0x37c2>
    a6d8:	8c 01       	movw	r16, r24
    a6da:	ce 01       	movw	r24, r28
    a6dc:	83 52       	subi	r24, 0x23	; 35
    a6de:	9e 4f       	sbci	r25, 0xFE	; 254
    a6e0:	fc 01       	movw	r30, r24
    a6e2:	11 83       	std	Z+1, r17	; 0x01
    a6e4:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    a6e6:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
		forward_mm(25);
    a6ea:	89 e1       	ldi	r24, 0x19	; 25
    a6ec:	90 e0       	ldi	r25, 0x00	; 0
    a6ee:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a6f2:	9e 01       	movw	r18, r28
    a6f4:	21 52       	subi	r18, 0x21	; 33
    a6f6:	3e 4f       	sbci	r19, 0xFE	; 254
    a6f8:	80 e0       	ldi	r24, 0x00	; 0
    a6fa:	90 e0       	ldi	r25, 0x00	; 0
    a6fc:	a0 ea       	ldi	r26, 0xA0	; 160
    a6fe:	b1 e4       	ldi	r27, 0x41	; 65
    a700:	f9 01       	movw	r30, r18
    a702:	80 83       	st	Z, r24
    a704:	91 83       	std	Z+1, r25	; 0x01
    a706:	a2 83       	std	Z+2, r26	; 0x02
    a708:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a70a:	8e 01       	movw	r16, r28
    a70c:	0d 51       	subi	r16, 0x1D	; 29
    a70e:	1e 4f       	sbci	r17, 0xFE	; 254
    a710:	ce 01       	movw	r24, r28
    a712:	81 52       	subi	r24, 0x21	; 33
    a714:	9e 4f       	sbci	r25, 0xFE	; 254
    a716:	fc 01       	movw	r30, r24
    a718:	60 81       	ld	r22, Z
    a71a:	71 81       	ldd	r23, Z+1	; 0x01
    a71c:	82 81       	ldd	r24, Z+2	; 0x02
    a71e:	93 81       	ldd	r25, Z+3	; 0x03
    a720:	26 e6       	ldi	r18, 0x66	; 102
    a722:	36 e6       	ldi	r19, 0x66	; 102
    a724:	46 e6       	ldi	r20, 0x66	; 102
    a726:	55 e4       	ldi	r21, 0x45	; 69
    a728:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a72c:	dc 01       	movw	r26, r24
    a72e:	cb 01       	movw	r24, r22
    a730:	f8 01       	movw	r30, r16
    a732:	80 83       	st	Z, r24
    a734:	91 83       	std	Z+1, r25	; 0x01
    a736:	a2 83       	std	Z+2, r26	; 0x02
    a738:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a73a:	ce 01       	movw	r24, r28
    a73c:	8d 51       	subi	r24, 0x1D	; 29
    a73e:	9e 4f       	sbci	r25, 0xFE	; 254
    a740:	11 e0       	ldi	r17, 0x01	; 1
    a742:	fc 01       	movw	r30, r24
    a744:	60 81       	ld	r22, Z
    a746:	71 81       	ldd	r23, Z+1	; 0x01
    a748:	82 81       	ldd	r24, Z+2	; 0x02
    a74a:	93 81       	ldd	r25, Z+3	; 0x03
    a74c:	20 e0       	ldi	r18, 0x00	; 0
    a74e:	30 e0       	ldi	r19, 0x00	; 0
    a750:	40 e8       	ldi	r20, 0x80	; 128
    a752:	5f e3       	ldi	r21, 0x3F	; 63
    a754:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    a758:	88 23       	and	r24, r24
    a75a:	0c f0       	brlt	.+2      	; 0xa75e <pick_drop+0x384c>
    a75c:	10 e0       	ldi	r17, 0x00	; 0
    a75e:	11 23       	and	r17, r17
    a760:	49 f0       	breq	.+18     	; 0xa774 <pick_drop+0x3862>
		__ticks = 1;
    a762:	ce 01       	movw	r24, r28
    a764:	89 51       	subi	r24, 0x19	; 25
    a766:	9e 4f       	sbci	r25, 0xFE	; 254
    a768:	21 e0       	ldi	r18, 0x01	; 1
    a76a:	30 e0       	ldi	r19, 0x00	; 0
    a76c:	fc 01       	movw	r30, r24
    a76e:	31 83       	std	Z+1, r19	; 0x01
    a770:	20 83       	st	Z, r18
    a772:	74 c0       	rjmp	.+232    	; 0xa85c <pick_drop+0x394a>
	else if (__tmp > 65535)
    a774:	ce 01       	movw	r24, r28
    a776:	8d 51       	subi	r24, 0x1D	; 29
    a778:	9e 4f       	sbci	r25, 0xFE	; 254
    a77a:	11 e0       	ldi	r17, 0x01	; 1
    a77c:	fc 01       	movw	r30, r24
    a77e:	60 81       	ld	r22, Z
    a780:	71 81       	ldd	r23, Z+1	; 0x01
    a782:	82 81       	ldd	r24, Z+2	; 0x02
    a784:	93 81       	ldd	r25, Z+3	; 0x03
    a786:	20 e0       	ldi	r18, 0x00	; 0
    a788:	3f ef       	ldi	r19, 0xFF	; 255
    a78a:	4f e7       	ldi	r20, 0x7F	; 127
    a78c:	57 e4       	ldi	r21, 0x47	; 71
    a78e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    a792:	18 16       	cp	r1, r24
    a794:	0c f0       	brlt	.+2      	; 0xa798 <pick_drop+0x3886>
    a796:	10 e0       	ldi	r17, 0x00	; 0
    a798:	11 23       	and	r17, r17
    a79a:	09 f4       	brne	.+2      	; 0xa79e <pick_drop+0x388c>
    a79c:	4d c0       	rjmp	.+154    	; 0xa838 <pick_drop+0x3926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a79e:	ce 01       	movw	r24, r28
    a7a0:	81 52       	subi	r24, 0x21	; 33
    a7a2:	9e 4f       	sbci	r25, 0xFE	; 254
    a7a4:	fc 01       	movw	r30, r24
    a7a6:	60 81       	ld	r22, Z
    a7a8:	71 81       	ldd	r23, Z+1	; 0x01
    a7aa:	82 81       	ldd	r24, Z+2	; 0x02
    a7ac:	93 81       	ldd	r25, Z+3	; 0x03
    a7ae:	20 e0       	ldi	r18, 0x00	; 0
    a7b0:	30 e0       	ldi	r19, 0x00	; 0
    a7b2:	40 e2       	ldi	r20, 0x20	; 32
    a7b4:	51 e4       	ldi	r21, 0x41	; 65
    a7b6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a7ba:	dc 01       	movw	r26, r24
    a7bc:	cb 01       	movw	r24, r22
    a7be:	8e 01       	movw	r16, r28
    a7c0:	09 51       	subi	r16, 0x19	; 25
    a7c2:	1e 4f       	sbci	r17, 0xFE	; 254
    a7c4:	bc 01       	movw	r22, r24
    a7c6:	cd 01       	movw	r24, r26
    a7c8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a7cc:	dc 01       	movw	r26, r24
    a7ce:	cb 01       	movw	r24, r22
    a7d0:	f8 01       	movw	r30, r16
    a7d2:	91 83       	std	Z+1, r25	; 0x01
    a7d4:	80 83       	st	Z, r24
    a7d6:	27 c0       	rjmp	.+78     	; 0xa826 <pick_drop+0x3914>
    a7d8:	ce 01       	movw	r24, r28
    a7da:	87 51       	subi	r24, 0x17	; 23
    a7dc:	9e 4f       	sbci	r25, 0xFE	; 254
    a7de:	20 e7       	ldi	r18, 0x70	; 112
    a7e0:	31 e0       	ldi	r19, 0x01	; 1
    a7e2:	fc 01       	movw	r30, r24
    a7e4:	31 83       	std	Z+1, r19	; 0x01
    a7e6:	20 83       	st	Z, r18
    a7e8:	ce 01       	movw	r24, r28
    a7ea:	87 51       	subi	r24, 0x17	; 23
    a7ec:	9e 4f       	sbci	r25, 0xFE	; 254
    a7ee:	fc 01       	movw	r30, r24
    a7f0:	80 81       	ld	r24, Z
    a7f2:	91 81       	ldd	r25, Z+1	; 0x01
    a7f4:	8c 01       	movw	r16, r24
    a7f6:	c8 01       	movw	r24, r16
    a7f8:	01 97       	sbiw	r24, 0x01	; 1
    a7fa:	f1 f7       	brne	.-4      	; 0xa7f8 <pick_drop+0x38e6>
    a7fc:	8c 01       	movw	r16, r24
    a7fe:	ce 01       	movw	r24, r28
    a800:	87 51       	subi	r24, 0x17	; 23
    a802:	9e 4f       	sbci	r25, 0xFE	; 254
    a804:	fc 01       	movw	r30, r24
    a806:	11 83       	std	Z+1, r17	; 0x01
    a808:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a80a:	ce 01       	movw	r24, r28
    a80c:	89 51       	subi	r24, 0x19	; 25
    a80e:	9e 4f       	sbci	r25, 0xFE	; 254
    a810:	9e 01       	movw	r18, r28
    a812:	29 51       	subi	r18, 0x19	; 25
    a814:	3e 4f       	sbci	r19, 0xFE	; 254
    a816:	f9 01       	movw	r30, r18
    a818:	20 81       	ld	r18, Z
    a81a:	31 81       	ldd	r19, Z+1	; 0x01
    a81c:	21 50       	subi	r18, 0x01	; 1
    a81e:	30 40       	sbci	r19, 0x00	; 0
    a820:	fc 01       	movw	r30, r24
    a822:	31 83       	std	Z+1, r19	; 0x01
    a824:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a826:	ce 01       	movw	r24, r28
    a828:	89 51       	subi	r24, 0x19	; 25
    a82a:	9e 4f       	sbci	r25, 0xFE	; 254
    a82c:	fc 01       	movw	r30, r24
    a82e:	80 81       	ld	r24, Z
    a830:	91 81       	ldd	r25, Z+1	; 0x01
    a832:	00 97       	sbiw	r24, 0x00	; 0
    a834:	89 f6       	brne	.-94     	; 0xa7d8 <pick_drop+0x38c6>
    a836:	2f c0       	rjmp	.+94     	; 0xa896 <pick_drop+0x3984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a838:	8e 01       	movw	r16, r28
    a83a:	09 51       	subi	r16, 0x19	; 25
    a83c:	1e 4f       	sbci	r17, 0xFE	; 254
    a83e:	ce 01       	movw	r24, r28
    a840:	8d 51       	subi	r24, 0x1D	; 29
    a842:	9e 4f       	sbci	r25, 0xFE	; 254
    a844:	fc 01       	movw	r30, r24
    a846:	60 81       	ld	r22, Z
    a848:	71 81       	ldd	r23, Z+1	; 0x01
    a84a:	82 81       	ldd	r24, Z+2	; 0x02
    a84c:	93 81       	ldd	r25, Z+3	; 0x03
    a84e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a852:	dc 01       	movw	r26, r24
    a854:	cb 01       	movw	r24, r22
    a856:	f8 01       	movw	r30, r16
    a858:	91 83       	std	Z+1, r25	; 0x01
    a85a:	80 83       	st	Z, r24
    a85c:	ce 01       	movw	r24, r28
    a85e:	85 51       	subi	r24, 0x15	; 21
    a860:	9e 4f       	sbci	r25, 0xFE	; 254
    a862:	9e 01       	movw	r18, r28
    a864:	29 51       	subi	r18, 0x19	; 25
    a866:	3e 4f       	sbci	r19, 0xFE	; 254
    a868:	f9 01       	movw	r30, r18
    a86a:	20 81       	ld	r18, Z
    a86c:	31 81       	ldd	r19, Z+1	; 0x01
    a86e:	fc 01       	movw	r30, r24
    a870:	31 83       	std	Z+1, r19	; 0x01
    a872:	20 83       	st	Z, r18
    a874:	ce 01       	movw	r24, r28
    a876:	85 51       	subi	r24, 0x15	; 21
    a878:	9e 4f       	sbci	r25, 0xFE	; 254
    a87a:	fc 01       	movw	r30, r24
    a87c:	80 81       	ld	r24, Z
    a87e:	91 81       	ldd	r25, Z+1	; 0x01
    a880:	8c 01       	movw	r16, r24
    a882:	c8 01       	movw	r24, r16
    a884:	01 97       	sbiw	r24, 0x01	; 1
    a886:	f1 f7       	brne	.-4      	; 0xa884 <pick_drop+0x3972>
    a888:	8c 01       	movw	r16, r24
    a88a:	ce 01       	movw	r24, r28
    a88c:	85 51       	subi	r24, 0x15	; 21
    a88e:	9e 4f       	sbci	r25, 0xFE	; 254
    a890:	fc 01       	movw	r30, r24
    a892:	11 83       	std	Z+1, r17	; 0x01
    a894:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_right();
    a896:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
    a89a:	9e 01       	movw	r18, r28
    a89c:	23 51       	subi	r18, 0x13	; 19
    a89e:	3e 4f       	sbci	r19, 0xFE	; 254
    a8a0:	80 e0       	ldi	r24, 0x00	; 0
    a8a2:	90 e0       	ldi	r25, 0x00	; 0
    a8a4:	a0 ea       	ldi	r26, 0xA0	; 160
    a8a6:	b1 e4       	ldi	r27, 0x41	; 65
    a8a8:	f9 01       	movw	r30, r18
    a8aa:	80 83       	st	Z, r24
    a8ac:	91 83       	std	Z+1, r25	; 0x01
    a8ae:	a2 83       	std	Z+2, r26	; 0x02
    a8b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a8b2:	8e 01       	movw	r16, r28
    a8b4:	0f 50       	subi	r16, 0x0F	; 15
    a8b6:	1e 4f       	sbci	r17, 0xFE	; 254
    a8b8:	ce 01       	movw	r24, r28
    a8ba:	83 51       	subi	r24, 0x13	; 19
    a8bc:	9e 4f       	sbci	r25, 0xFE	; 254
    a8be:	fc 01       	movw	r30, r24
    a8c0:	60 81       	ld	r22, Z
    a8c2:	71 81       	ldd	r23, Z+1	; 0x01
    a8c4:	82 81       	ldd	r24, Z+2	; 0x02
    a8c6:	93 81       	ldd	r25, Z+3	; 0x03
    a8c8:	26 e6       	ldi	r18, 0x66	; 102
    a8ca:	36 e6       	ldi	r19, 0x66	; 102
    a8cc:	46 e6       	ldi	r20, 0x66	; 102
    a8ce:	55 e4       	ldi	r21, 0x45	; 69
    a8d0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a8d4:	dc 01       	movw	r26, r24
    a8d6:	cb 01       	movw	r24, r22
    a8d8:	f8 01       	movw	r30, r16
    a8da:	80 83       	st	Z, r24
    a8dc:	91 83       	std	Z+1, r25	; 0x01
    a8de:	a2 83       	std	Z+2, r26	; 0x02
    a8e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a8e2:	ce 01       	movw	r24, r28
    a8e4:	8f 50       	subi	r24, 0x0F	; 15
    a8e6:	9e 4f       	sbci	r25, 0xFE	; 254
    a8e8:	11 e0       	ldi	r17, 0x01	; 1
    a8ea:	fc 01       	movw	r30, r24
    a8ec:	60 81       	ld	r22, Z
    a8ee:	71 81       	ldd	r23, Z+1	; 0x01
    a8f0:	82 81       	ldd	r24, Z+2	; 0x02
    a8f2:	93 81       	ldd	r25, Z+3	; 0x03
    a8f4:	20 e0       	ldi	r18, 0x00	; 0
    a8f6:	30 e0       	ldi	r19, 0x00	; 0
    a8f8:	40 e8       	ldi	r20, 0x80	; 128
    a8fa:	5f e3       	ldi	r21, 0x3F	; 63
    a8fc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    a900:	88 23       	and	r24, r24
    a902:	0c f0       	brlt	.+2      	; 0xa906 <pick_drop+0x39f4>
    a904:	10 e0       	ldi	r17, 0x00	; 0
    a906:	11 23       	and	r17, r17
    a908:	49 f0       	breq	.+18     	; 0xa91c <pick_drop+0x3a0a>
		__ticks = 1;
    a90a:	ce 01       	movw	r24, r28
    a90c:	8b 50       	subi	r24, 0x0B	; 11
    a90e:	9e 4f       	sbci	r25, 0xFE	; 254
    a910:	21 e0       	ldi	r18, 0x01	; 1
    a912:	30 e0       	ldi	r19, 0x00	; 0
    a914:	fc 01       	movw	r30, r24
    a916:	31 83       	std	Z+1, r19	; 0x01
    a918:	20 83       	st	Z, r18
    a91a:	74 c0       	rjmp	.+232    	; 0xaa04 <pick_drop+0x3af2>
	else if (__tmp > 65535)
    a91c:	ce 01       	movw	r24, r28
    a91e:	8f 50       	subi	r24, 0x0F	; 15
    a920:	9e 4f       	sbci	r25, 0xFE	; 254
    a922:	11 e0       	ldi	r17, 0x01	; 1
    a924:	fc 01       	movw	r30, r24
    a926:	60 81       	ld	r22, Z
    a928:	71 81       	ldd	r23, Z+1	; 0x01
    a92a:	82 81       	ldd	r24, Z+2	; 0x02
    a92c:	93 81       	ldd	r25, Z+3	; 0x03
    a92e:	20 e0       	ldi	r18, 0x00	; 0
    a930:	3f ef       	ldi	r19, 0xFF	; 255
    a932:	4f e7       	ldi	r20, 0x7F	; 127
    a934:	57 e4       	ldi	r21, 0x47	; 71
    a936:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    a93a:	18 16       	cp	r1, r24
    a93c:	0c f0       	brlt	.+2      	; 0xa940 <pick_drop+0x3a2e>
    a93e:	10 e0       	ldi	r17, 0x00	; 0
    a940:	11 23       	and	r17, r17
    a942:	09 f4       	brne	.+2      	; 0xa946 <pick_drop+0x3a34>
    a944:	4d c0       	rjmp	.+154    	; 0xa9e0 <pick_drop+0x3ace>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a946:	ce 01       	movw	r24, r28
    a948:	83 51       	subi	r24, 0x13	; 19
    a94a:	9e 4f       	sbci	r25, 0xFE	; 254
    a94c:	fc 01       	movw	r30, r24
    a94e:	60 81       	ld	r22, Z
    a950:	71 81       	ldd	r23, Z+1	; 0x01
    a952:	82 81       	ldd	r24, Z+2	; 0x02
    a954:	93 81       	ldd	r25, Z+3	; 0x03
    a956:	20 e0       	ldi	r18, 0x00	; 0
    a958:	30 e0       	ldi	r19, 0x00	; 0
    a95a:	40 e2       	ldi	r20, 0x20	; 32
    a95c:	51 e4       	ldi	r21, 0x41	; 65
    a95e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    a962:	dc 01       	movw	r26, r24
    a964:	cb 01       	movw	r24, r22
    a966:	8e 01       	movw	r16, r28
    a968:	0b 50       	subi	r16, 0x0B	; 11
    a96a:	1e 4f       	sbci	r17, 0xFE	; 254
    a96c:	bc 01       	movw	r22, r24
    a96e:	cd 01       	movw	r24, r26
    a970:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a974:	dc 01       	movw	r26, r24
    a976:	cb 01       	movw	r24, r22
    a978:	f8 01       	movw	r30, r16
    a97a:	91 83       	std	Z+1, r25	; 0x01
    a97c:	80 83       	st	Z, r24
    a97e:	27 c0       	rjmp	.+78     	; 0xa9ce <pick_drop+0x3abc>
    a980:	ce 01       	movw	r24, r28
    a982:	89 50       	subi	r24, 0x09	; 9
    a984:	9e 4f       	sbci	r25, 0xFE	; 254
    a986:	20 e7       	ldi	r18, 0x70	; 112
    a988:	31 e0       	ldi	r19, 0x01	; 1
    a98a:	fc 01       	movw	r30, r24
    a98c:	31 83       	std	Z+1, r19	; 0x01
    a98e:	20 83       	st	Z, r18
    a990:	ce 01       	movw	r24, r28
    a992:	89 50       	subi	r24, 0x09	; 9
    a994:	9e 4f       	sbci	r25, 0xFE	; 254
    a996:	fc 01       	movw	r30, r24
    a998:	80 81       	ld	r24, Z
    a99a:	91 81       	ldd	r25, Z+1	; 0x01
    a99c:	8c 01       	movw	r16, r24
    a99e:	c8 01       	movw	r24, r16
    a9a0:	01 97       	sbiw	r24, 0x01	; 1
    a9a2:	f1 f7       	brne	.-4      	; 0xa9a0 <pick_drop+0x3a8e>
    a9a4:	8c 01       	movw	r16, r24
    a9a6:	ce 01       	movw	r24, r28
    a9a8:	89 50       	subi	r24, 0x09	; 9
    a9aa:	9e 4f       	sbci	r25, 0xFE	; 254
    a9ac:	fc 01       	movw	r30, r24
    a9ae:	11 83       	std	Z+1, r17	; 0x01
    a9b0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9b2:	ce 01       	movw	r24, r28
    a9b4:	8b 50       	subi	r24, 0x0B	; 11
    a9b6:	9e 4f       	sbci	r25, 0xFE	; 254
    a9b8:	9e 01       	movw	r18, r28
    a9ba:	2b 50       	subi	r18, 0x0B	; 11
    a9bc:	3e 4f       	sbci	r19, 0xFE	; 254
    a9be:	f9 01       	movw	r30, r18
    a9c0:	20 81       	ld	r18, Z
    a9c2:	31 81       	ldd	r19, Z+1	; 0x01
    a9c4:	21 50       	subi	r18, 0x01	; 1
    a9c6:	30 40       	sbci	r19, 0x00	; 0
    a9c8:	fc 01       	movw	r30, r24
    a9ca:	31 83       	std	Z+1, r19	; 0x01
    a9cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9ce:	ce 01       	movw	r24, r28
    a9d0:	8b 50       	subi	r24, 0x0B	; 11
    a9d2:	9e 4f       	sbci	r25, 0xFE	; 254
    a9d4:	fc 01       	movw	r30, r24
    a9d6:	80 81       	ld	r24, Z
    a9d8:	91 81       	ldd	r25, Z+1	; 0x01
    a9da:	00 97       	sbiw	r24, 0x00	; 0
    a9dc:	89 f6       	brne	.-94     	; 0xa980 <pick_drop+0x3a6e>
    a9de:	2f c0       	rjmp	.+94     	; 0xaa3e <pick_drop+0x3b2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a9e0:	8e 01       	movw	r16, r28
    a9e2:	0b 50       	subi	r16, 0x0B	; 11
    a9e4:	1e 4f       	sbci	r17, 0xFE	; 254
    a9e6:	ce 01       	movw	r24, r28
    a9e8:	8f 50       	subi	r24, 0x0F	; 15
    a9ea:	9e 4f       	sbci	r25, 0xFE	; 254
    a9ec:	fc 01       	movw	r30, r24
    a9ee:	60 81       	ld	r22, Z
    a9f0:	71 81       	ldd	r23, Z+1	; 0x01
    a9f2:	82 81       	ldd	r24, Z+2	; 0x02
    a9f4:	93 81       	ldd	r25, Z+3	; 0x03
    a9f6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    a9fa:	dc 01       	movw	r26, r24
    a9fc:	cb 01       	movw	r24, r22
    a9fe:	f8 01       	movw	r30, r16
    aa00:	91 83       	std	Z+1, r25	; 0x01
    aa02:	80 83       	st	Z, r24
    aa04:	ce 01       	movw	r24, r28
    aa06:	87 50       	subi	r24, 0x07	; 7
    aa08:	9e 4f       	sbci	r25, 0xFE	; 254
    aa0a:	9e 01       	movw	r18, r28
    aa0c:	2b 50       	subi	r18, 0x0B	; 11
    aa0e:	3e 4f       	sbci	r19, 0xFE	; 254
    aa10:	f9 01       	movw	r30, r18
    aa12:	20 81       	ld	r18, Z
    aa14:	31 81       	ldd	r19, Z+1	; 0x01
    aa16:	fc 01       	movw	r30, r24
    aa18:	31 83       	std	Z+1, r19	; 0x01
    aa1a:	20 83       	st	Z, r18
    aa1c:	ce 01       	movw	r24, r28
    aa1e:	87 50       	subi	r24, 0x07	; 7
    aa20:	9e 4f       	sbci	r25, 0xFE	; 254
    aa22:	fc 01       	movw	r30, r24
    aa24:	80 81       	ld	r24, Z
    aa26:	91 81       	ldd	r25, Z+1	; 0x01
    aa28:	8c 01       	movw	r16, r24
    aa2a:	c8 01       	movw	r24, r16
    aa2c:	01 97       	sbiw	r24, 0x01	; 1
    aa2e:	f1 f7       	brne	.-4      	; 0xaa2c <pick_drop+0x3b1a>
    aa30:	8c 01       	movw	r16, r24
    aa32:	ce 01       	movw	r24, r28
    aa34:	87 50       	subi	r24, 0x07	; 7
    aa36:	9e 4f       	sbci	r25, 0xFE	; 254
    aa38:	fc 01       	movw	r30, r24
    aa3a:	11 83       	std	Z+1, r17	; 0x01
    aa3c:	00 83       	st	Z, r16
		_delay_ms(20);
		back_mm(20);
    aa3e:	84 e1       	ldi	r24, 0x14	; 20
    aa40:	90 e0       	ldi	r25, 0x00	; 0
    aa42:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    aa46:	9e 01       	movw	r18, r28
    aa48:	25 50       	subi	r18, 0x05	; 5
    aa4a:	3e 4f       	sbci	r19, 0xFE	; 254
    aa4c:	80 e0       	ldi	r24, 0x00	; 0
    aa4e:	90 e0       	ldi	r25, 0x00	; 0
    aa50:	a6 e9       	ldi	r26, 0x96	; 150
    aa52:	b3 e4       	ldi	r27, 0x43	; 67
    aa54:	f9 01       	movw	r30, r18
    aa56:	80 83       	st	Z, r24
    aa58:	91 83       	std	Z+1, r25	; 0x01
    aa5a:	a2 83       	std	Z+2, r26	; 0x02
    aa5c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    aa5e:	8e 01       	movw	r16, r28
    aa60:	01 50       	subi	r16, 0x01	; 1
    aa62:	1e 4f       	sbci	r17, 0xFE	; 254
    aa64:	ce 01       	movw	r24, r28
    aa66:	85 50       	subi	r24, 0x05	; 5
    aa68:	9e 4f       	sbci	r25, 0xFE	; 254
    aa6a:	fc 01       	movw	r30, r24
    aa6c:	60 81       	ld	r22, Z
    aa6e:	71 81       	ldd	r23, Z+1	; 0x01
    aa70:	82 81       	ldd	r24, Z+2	; 0x02
    aa72:	93 81       	ldd	r25, Z+3	; 0x03
    aa74:	26 e6       	ldi	r18, 0x66	; 102
    aa76:	36 e6       	ldi	r19, 0x66	; 102
    aa78:	46 e6       	ldi	r20, 0x66	; 102
    aa7a:	55 e4       	ldi	r21, 0x45	; 69
    aa7c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    aa80:	dc 01       	movw	r26, r24
    aa82:	cb 01       	movw	r24, r22
    aa84:	f8 01       	movw	r30, r16
    aa86:	80 83       	st	Z, r24
    aa88:	91 83       	std	Z+1, r25	; 0x01
    aa8a:	a2 83       	std	Z+2, r26	; 0x02
    aa8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    aa8e:	ce 01       	movw	r24, r28
    aa90:	81 50       	subi	r24, 0x01	; 1
    aa92:	9e 4f       	sbci	r25, 0xFE	; 254
    aa94:	11 e0       	ldi	r17, 0x01	; 1
    aa96:	fc 01       	movw	r30, r24
    aa98:	60 81       	ld	r22, Z
    aa9a:	71 81       	ldd	r23, Z+1	; 0x01
    aa9c:	82 81       	ldd	r24, Z+2	; 0x02
    aa9e:	93 81       	ldd	r25, Z+3	; 0x03
    aaa0:	20 e0       	ldi	r18, 0x00	; 0
    aaa2:	30 e0       	ldi	r19, 0x00	; 0
    aaa4:	40 e8       	ldi	r20, 0x80	; 128
    aaa6:	5f e3       	ldi	r21, 0x3F	; 63
    aaa8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    aaac:	88 23       	and	r24, r24
    aaae:	0c f0       	brlt	.+2      	; 0xaab2 <pick_drop+0x3ba0>
    aab0:	10 e0       	ldi	r17, 0x00	; 0
    aab2:	11 23       	and	r17, r17
    aab4:	49 f0       	breq	.+18     	; 0xaac8 <pick_drop+0x3bb6>
		__ticks = 1;
    aab6:	ce 01       	movw	r24, r28
    aab8:	8d 5f       	subi	r24, 0xFD	; 253
    aaba:	9d 4f       	sbci	r25, 0xFD	; 253
    aabc:	21 e0       	ldi	r18, 0x01	; 1
    aabe:	30 e0       	ldi	r19, 0x00	; 0
    aac0:	fc 01       	movw	r30, r24
    aac2:	31 83       	std	Z+1, r19	; 0x01
    aac4:	20 83       	st	Z, r18
    aac6:	75 c0       	rjmp	.+234    	; 0xabb2 <pick_drop+0x3ca0>
	else if (__tmp > 65535)
    aac8:	ce 01       	movw	r24, r28
    aaca:	81 50       	subi	r24, 0x01	; 1
    aacc:	9e 4f       	sbci	r25, 0xFE	; 254
    aace:	11 e0       	ldi	r17, 0x01	; 1
    aad0:	fc 01       	movw	r30, r24
    aad2:	60 81       	ld	r22, Z
    aad4:	71 81       	ldd	r23, Z+1	; 0x01
    aad6:	82 81       	ldd	r24, Z+2	; 0x02
    aad8:	93 81       	ldd	r25, Z+3	; 0x03
    aada:	20 e0       	ldi	r18, 0x00	; 0
    aadc:	3f ef       	ldi	r19, 0xFF	; 255
    aade:	4f e7       	ldi	r20, 0x7F	; 127
    aae0:	57 e4       	ldi	r21, 0x47	; 71
    aae2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    aae6:	18 16       	cp	r1, r24
    aae8:	0c f0       	brlt	.+2      	; 0xaaec <pick_drop+0x3bda>
    aaea:	10 e0       	ldi	r17, 0x00	; 0
    aaec:	11 23       	and	r17, r17
    aaee:	09 f4       	brne	.+2      	; 0xaaf2 <pick_drop+0x3be0>
    aaf0:	4e c0       	rjmp	.+156    	; 0xab8e <pick_drop+0x3c7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aaf2:	ce 01       	movw	r24, r28
    aaf4:	85 50       	subi	r24, 0x05	; 5
    aaf6:	9e 4f       	sbci	r25, 0xFE	; 254
    aaf8:	fc 01       	movw	r30, r24
    aafa:	60 81       	ld	r22, Z
    aafc:	71 81       	ldd	r23, Z+1	; 0x01
    aafe:	82 81       	ldd	r24, Z+2	; 0x02
    ab00:	93 81       	ldd	r25, Z+3	; 0x03
    ab02:	20 e0       	ldi	r18, 0x00	; 0
    ab04:	30 e0       	ldi	r19, 0x00	; 0
    ab06:	40 e2       	ldi	r20, 0x20	; 32
    ab08:	51 e4       	ldi	r21, 0x41	; 65
    ab0a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ab0e:	dc 01       	movw	r26, r24
    ab10:	cb 01       	movw	r24, r22
    ab12:	8e 01       	movw	r16, r28
    ab14:	0d 5f       	subi	r16, 0xFD	; 253
    ab16:	1d 4f       	sbci	r17, 0xFD	; 253
    ab18:	bc 01       	movw	r22, r24
    ab1a:	cd 01       	movw	r24, r26
    ab1c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ab20:	dc 01       	movw	r26, r24
    ab22:	cb 01       	movw	r24, r22
    ab24:	f8 01       	movw	r30, r16
    ab26:	91 83       	std	Z+1, r25	; 0x01
    ab28:	80 83       	st	Z, r24
    ab2a:	27 c0       	rjmp	.+78     	; 0xab7a <pick_drop+0x3c68>
    ab2c:	ce 01       	movw	r24, r28
    ab2e:	8b 5f       	subi	r24, 0xFB	; 251
    ab30:	9d 4f       	sbci	r25, 0xFD	; 253
    ab32:	20 e7       	ldi	r18, 0x70	; 112
    ab34:	31 e0       	ldi	r19, 0x01	; 1
    ab36:	fc 01       	movw	r30, r24
    ab38:	31 83       	std	Z+1, r19	; 0x01
    ab3a:	20 83       	st	Z, r18
    ab3c:	ce 01       	movw	r24, r28
    ab3e:	8b 5f       	subi	r24, 0xFB	; 251
    ab40:	9d 4f       	sbci	r25, 0xFD	; 253
    ab42:	fc 01       	movw	r30, r24
    ab44:	80 81       	ld	r24, Z
    ab46:	91 81       	ldd	r25, Z+1	; 0x01
    ab48:	8c 01       	movw	r16, r24
    ab4a:	c8 01       	movw	r24, r16
    ab4c:	01 97       	sbiw	r24, 0x01	; 1
    ab4e:	f1 f7       	brne	.-4      	; 0xab4c <pick_drop+0x3c3a>
    ab50:	8c 01       	movw	r16, r24
    ab52:	ce 01       	movw	r24, r28
    ab54:	8b 5f       	subi	r24, 0xFB	; 251
    ab56:	9d 4f       	sbci	r25, 0xFD	; 253
    ab58:	fc 01       	movw	r30, r24
    ab5a:	11 83       	std	Z+1, r17	; 0x01
    ab5c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab5e:	ce 01       	movw	r24, r28
    ab60:	8d 5f       	subi	r24, 0xFD	; 253
    ab62:	9d 4f       	sbci	r25, 0xFD	; 253
    ab64:	9e 01       	movw	r18, r28
    ab66:	2d 5f       	subi	r18, 0xFD	; 253
    ab68:	3d 4f       	sbci	r19, 0xFD	; 253
    ab6a:	f9 01       	movw	r30, r18
    ab6c:	20 81       	ld	r18, Z
    ab6e:	31 81       	ldd	r19, Z+1	; 0x01
    ab70:	21 50       	subi	r18, 0x01	; 1
    ab72:	30 40       	sbci	r19, 0x00	; 0
    ab74:	fc 01       	movw	r30, r24
    ab76:	31 83       	std	Z+1, r19	; 0x01
    ab78:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab7a:	ce 01       	movw	r24, r28
    ab7c:	8d 5f       	subi	r24, 0xFD	; 253
    ab7e:	9d 4f       	sbci	r25, 0xFD	; 253
    ab80:	fc 01       	movw	r30, r24
    ab82:	80 81       	ld	r24, Z
    ab84:	91 81       	ldd	r25, Z+1	; 0x01
    ab86:	00 97       	sbiw	r24, 0x00	; 0
    ab88:	89 f6       	brne	.-94     	; 0xab2c <pick_drop+0x3c1a>
    ab8a:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ab8e:	8e 01       	movw	r16, r28
    ab90:	0d 5f       	subi	r16, 0xFD	; 253
    ab92:	1d 4f       	sbci	r17, 0xFD	; 253
    ab94:	ce 01       	movw	r24, r28
    ab96:	81 50       	subi	r24, 0x01	; 1
    ab98:	9e 4f       	sbci	r25, 0xFE	; 254
    ab9a:	fc 01       	movw	r30, r24
    ab9c:	60 81       	ld	r22, Z
    ab9e:	71 81       	ldd	r23, Z+1	; 0x01
    aba0:	82 81       	ldd	r24, Z+2	; 0x02
    aba2:	93 81       	ldd	r25, Z+3	; 0x03
    aba4:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    aba8:	dc 01       	movw	r26, r24
    abaa:	cb 01       	movw	r24, r22
    abac:	f8 01       	movw	r30, r16
    abae:	91 83       	std	Z+1, r25	; 0x01
    abb0:	80 83       	st	Z, r24
    abb2:	ce 01       	movw	r24, r28
    abb4:	89 5f       	subi	r24, 0xF9	; 249
    abb6:	9d 4f       	sbci	r25, 0xFD	; 253
    abb8:	9e 01       	movw	r18, r28
    abba:	2d 5f       	subi	r18, 0xFD	; 253
    abbc:	3d 4f       	sbci	r19, 0xFD	; 253
    abbe:	f9 01       	movw	r30, r18
    abc0:	20 81       	ld	r18, Z
    abc2:	31 81       	ldd	r19, Z+1	; 0x01
    abc4:	fc 01       	movw	r30, r24
    abc6:	31 83       	std	Z+1, r19	; 0x01
    abc8:	20 83       	st	Z, r18
    abca:	ce 01       	movw	r24, r28
    abcc:	89 5f       	subi	r24, 0xF9	; 249
    abce:	9d 4f       	sbci	r25, 0xFD	; 253
    abd0:	fc 01       	movw	r30, r24
    abd2:	80 81       	ld	r24, Z
    abd4:	91 81       	ldd	r25, Z+1	; 0x01
    abd6:	8c 01       	movw	r16, r24
    abd8:	c8 01       	movw	r24, r16
    abda:	01 97       	sbiw	r24, 0x01	; 1
    abdc:	f1 f7       	brne	.-4      	; 0xabda <pick_drop+0x3cc8>
    abde:	8c 01       	movw	r16, r24
    abe0:	ce 01       	movw	r24, r28
    abe2:	89 5f       	subi	r24, 0xF9	; 249
    abe4:	9d 4f       	sbci	r25, 0xFD	; 253
    abe6:	fc 01       	movw	r30, r24
    abe8:	11 83       	std	Z+1, r17	; 0x01
    abea:	00 83       	st	Z, r16
    abec:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
		_delay_ms(300);
		}		
	}
	else if(pd=='5')//F1
    abf0:	ce 01       	movw	r24, r28
    abf2:	8d 5e       	subi	r24, 0xED	; 237
    abf4:	9c 4f       	sbci	r25, 0xFC	; 252
    abf6:	fc 01       	movw	r30, r24
    abf8:	80 81       	ld	r24, Z
    abfa:	85 33       	cpi	r24, 0x35	; 53
    abfc:	09 f0       	breq	.+2      	; 0xac00 <pick_drop+0x3cee>
    abfe:	30 c4       	rjmp	.+2144   	; 0xb460 <pick_drop+0x454e>
	{// 1X6 	delay_ms(20);//mod
			back_mm(20);
    ac00:	84 e1       	ldi	r24, 0x14	; 20
    ac02:	90 e0       	ldi	r25, 0x00	; 0
    ac04:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    ac08:	9e 01       	movw	r18, r28
    ac0a:	27 5f       	subi	r18, 0xF7	; 247
    ac0c:	3d 4f       	sbci	r19, 0xFD	; 253
    ac0e:	80 e0       	ldi	r24, 0x00	; 0
    ac10:	90 e0       	ldi	r25, 0x00	; 0
    ac12:	a0 ea       	ldi	r26, 0xA0	; 160
    ac14:	b1 e4       	ldi	r27, 0x41	; 65
    ac16:	f9 01       	movw	r30, r18
    ac18:	80 83       	st	Z, r24
    ac1a:	91 83       	std	Z+1, r25	; 0x01
    ac1c:	a2 83       	std	Z+2, r26	; 0x02
    ac1e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ac20:	8e 01       	movw	r16, r28
    ac22:	03 5f       	subi	r16, 0xF3	; 243
    ac24:	1d 4f       	sbci	r17, 0xFD	; 253
    ac26:	ce 01       	movw	r24, r28
    ac28:	87 5f       	subi	r24, 0xF7	; 247
    ac2a:	9d 4f       	sbci	r25, 0xFD	; 253
    ac2c:	fc 01       	movw	r30, r24
    ac2e:	60 81       	ld	r22, Z
    ac30:	71 81       	ldd	r23, Z+1	; 0x01
    ac32:	82 81       	ldd	r24, Z+2	; 0x02
    ac34:	93 81       	ldd	r25, Z+3	; 0x03
    ac36:	26 e6       	ldi	r18, 0x66	; 102
    ac38:	36 e6       	ldi	r19, 0x66	; 102
    ac3a:	46 e6       	ldi	r20, 0x66	; 102
    ac3c:	55 e4       	ldi	r21, 0x45	; 69
    ac3e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ac42:	dc 01       	movw	r26, r24
    ac44:	cb 01       	movw	r24, r22
    ac46:	f8 01       	movw	r30, r16
    ac48:	80 83       	st	Z, r24
    ac4a:	91 83       	std	Z+1, r25	; 0x01
    ac4c:	a2 83       	std	Z+2, r26	; 0x02
    ac4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ac50:	ce 01       	movw	r24, r28
    ac52:	83 5f       	subi	r24, 0xF3	; 243
    ac54:	9d 4f       	sbci	r25, 0xFD	; 253
    ac56:	11 e0       	ldi	r17, 0x01	; 1
    ac58:	fc 01       	movw	r30, r24
    ac5a:	60 81       	ld	r22, Z
    ac5c:	71 81       	ldd	r23, Z+1	; 0x01
    ac5e:	82 81       	ldd	r24, Z+2	; 0x02
    ac60:	93 81       	ldd	r25, Z+3	; 0x03
    ac62:	20 e0       	ldi	r18, 0x00	; 0
    ac64:	30 e0       	ldi	r19, 0x00	; 0
    ac66:	40 e8       	ldi	r20, 0x80	; 128
    ac68:	5f e3       	ldi	r21, 0x3F	; 63
    ac6a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ac6e:	88 23       	and	r24, r24
    ac70:	0c f0       	brlt	.+2      	; 0xac74 <pick_drop+0x3d62>
    ac72:	10 e0       	ldi	r17, 0x00	; 0
    ac74:	11 23       	and	r17, r17
    ac76:	49 f0       	breq	.+18     	; 0xac8a <pick_drop+0x3d78>
		__ticks = 1;
    ac78:	ce 01       	movw	r24, r28
    ac7a:	8f 5e       	subi	r24, 0xEF	; 239
    ac7c:	9d 4f       	sbci	r25, 0xFD	; 253
    ac7e:	21 e0       	ldi	r18, 0x01	; 1
    ac80:	30 e0       	ldi	r19, 0x00	; 0
    ac82:	fc 01       	movw	r30, r24
    ac84:	31 83       	std	Z+1, r19	; 0x01
    ac86:	20 83       	st	Z, r18
    ac88:	74 c0       	rjmp	.+232    	; 0xad72 <pick_drop+0x3e60>
	else if (__tmp > 65535)
    ac8a:	ce 01       	movw	r24, r28
    ac8c:	83 5f       	subi	r24, 0xF3	; 243
    ac8e:	9d 4f       	sbci	r25, 0xFD	; 253
    ac90:	11 e0       	ldi	r17, 0x01	; 1
    ac92:	fc 01       	movw	r30, r24
    ac94:	60 81       	ld	r22, Z
    ac96:	71 81       	ldd	r23, Z+1	; 0x01
    ac98:	82 81       	ldd	r24, Z+2	; 0x02
    ac9a:	93 81       	ldd	r25, Z+3	; 0x03
    ac9c:	20 e0       	ldi	r18, 0x00	; 0
    ac9e:	3f ef       	ldi	r19, 0xFF	; 255
    aca0:	4f e7       	ldi	r20, 0x7F	; 127
    aca2:	57 e4       	ldi	r21, 0x47	; 71
    aca4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    aca8:	18 16       	cp	r1, r24
    acaa:	0c f0       	brlt	.+2      	; 0xacae <pick_drop+0x3d9c>
    acac:	10 e0       	ldi	r17, 0x00	; 0
    acae:	11 23       	and	r17, r17
    acb0:	09 f4       	brne	.+2      	; 0xacb4 <pick_drop+0x3da2>
    acb2:	4d c0       	rjmp	.+154    	; 0xad4e <pick_drop+0x3e3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    acb4:	ce 01       	movw	r24, r28
    acb6:	87 5f       	subi	r24, 0xF7	; 247
    acb8:	9d 4f       	sbci	r25, 0xFD	; 253
    acba:	fc 01       	movw	r30, r24
    acbc:	60 81       	ld	r22, Z
    acbe:	71 81       	ldd	r23, Z+1	; 0x01
    acc0:	82 81       	ldd	r24, Z+2	; 0x02
    acc2:	93 81       	ldd	r25, Z+3	; 0x03
    acc4:	20 e0       	ldi	r18, 0x00	; 0
    acc6:	30 e0       	ldi	r19, 0x00	; 0
    acc8:	40 e2       	ldi	r20, 0x20	; 32
    acca:	51 e4       	ldi	r21, 0x41	; 65
    accc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    acd0:	dc 01       	movw	r26, r24
    acd2:	cb 01       	movw	r24, r22
    acd4:	8e 01       	movw	r16, r28
    acd6:	0f 5e       	subi	r16, 0xEF	; 239
    acd8:	1d 4f       	sbci	r17, 0xFD	; 253
    acda:	bc 01       	movw	r22, r24
    acdc:	cd 01       	movw	r24, r26
    acde:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ace2:	dc 01       	movw	r26, r24
    ace4:	cb 01       	movw	r24, r22
    ace6:	f8 01       	movw	r30, r16
    ace8:	91 83       	std	Z+1, r25	; 0x01
    acea:	80 83       	st	Z, r24
    acec:	27 c0       	rjmp	.+78     	; 0xad3c <pick_drop+0x3e2a>
    acee:	ce 01       	movw	r24, r28
    acf0:	8d 5e       	subi	r24, 0xED	; 237
    acf2:	9d 4f       	sbci	r25, 0xFD	; 253
    acf4:	20 e7       	ldi	r18, 0x70	; 112
    acf6:	31 e0       	ldi	r19, 0x01	; 1
    acf8:	fc 01       	movw	r30, r24
    acfa:	31 83       	std	Z+1, r19	; 0x01
    acfc:	20 83       	st	Z, r18
    acfe:	ce 01       	movw	r24, r28
    ad00:	8d 5e       	subi	r24, 0xED	; 237
    ad02:	9d 4f       	sbci	r25, 0xFD	; 253
    ad04:	fc 01       	movw	r30, r24
    ad06:	80 81       	ld	r24, Z
    ad08:	91 81       	ldd	r25, Z+1	; 0x01
    ad0a:	8c 01       	movw	r16, r24
    ad0c:	c8 01       	movw	r24, r16
    ad0e:	01 97       	sbiw	r24, 0x01	; 1
    ad10:	f1 f7       	brne	.-4      	; 0xad0e <pick_drop+0x3dfc>
    ad12:	8c 01       	movw	r16, r24
    ad14:	ce 01       	movw	r24, r28
    ad16:	8d 5e       	subi	r24, 0xED	; 237
    ad18:	9d 4f       	sbci	r25, 0xFD	; 253
    ad1a:	fc 01       	movw	r30, r24
    ad1c:	11 83       	std	Z+1, r17	; 0x01
    ad1e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad20:	ce 01       	movw	r24, r28
    ad22:	8f 5e       	subi	r24, 0xEF	; 239
    ad24:	9d 4f       	sbci	r25, 0xFD	; 253
    ad26:	9e 01       	movw	r18, r28
    ad28:	2f 5e       	subi	r18, 0xEF	; 239
    ad2a:	3d 4f       	sbci	r19, 0xFD	; 253
    ad2c:	f9 01       	movw	r30, r18
    ad2e:	20 81       	ld	r18, Z
    ad30:	31 81       	ldd	r19, Z+1	; 0x01
    ad32:	21 50       	subi	r18, 0x01	; 1
    ad34:	30 40       	sbci	r19, 0x00	; 0
    ad36:	fc 01       	movw	r30, r24
    ad38:	31 83       	std	Z+1, r19	; 0x01
    ad3a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad3c:	ce 01       	movw	r24, r28
    ad3e:	8f 5e       	subi	r24, 0xEF	; 239
    ad40:	9d 4f       	sbci	r25, 0xFD	; 253
    ad42:	fc 01       	movw	r30, r24
    ad44:	80 81       	ld	r24, Z
    ad46:	91 81       	ldd	r25, Z+1	; 0x01
    ad48:	00 97       	sbiw	r24, 0x00	; 0
    ad4a:	89 f6       	brne	.-94     	; 0xacee <pick_drop+0x3ddc>
    ad4c:	2f c0       	rjmp	.+94     	; 0xadac <pick_drop+0x3e9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ad4e:	8e 01       	movw	r16, r28
    ad50:	0f 5e       	subi	r16, 0xEF	; 239
    ad52:	1d 4f       	sbci	r17, 0xFD	; 253
    ad54:	ce 01       	movw	r24, r28
    ad56:	83 5f       	subi	r24, 0xF3	; 243
    ad58:	9d 4f       	sbci	r25, 0xFD	; 253
    ad5a:	fc 01       	movw	r30, r24
    ad5c:	60 81       	ld	r22, Z
    ad5e:	71 81       	ldd	r23, Z+1	; 0x01
    ad60:	82 81       	ldd	r24, Z+2	; 0x02
    ad62:	93 81       	ldd	r25, Z+3	; 0x03
    ad64:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ad68:	dc 01       	movw	r26, r24
    ad6a:	cb 01       	movw	r24, r22
    ad6c:	f8 01       	movw	r30, r16
    ad6e:	91 83       	std	Z+1, r25	; 0x01
    ad70:	80 83       	st	Z, r24
    ad72:	ce 01       	movw	r24, r28
    ad74:	8b 5e       	subi	r24, 0xEB	; 235
    ad76:	9d 4f       	sbci	r25, 0xFD	; 253
    ad78:	9e 01       	movw	r18, r28
    ad7a:	2f 5e       	subi	r18, 0xEF	; 239
    ad7c:	3d 4f       	sbci	r19, 0xFD	; 253
    ad7e:	f9 01       	movw	r30, r18
    ad80:	20 81       	ld	r18, Z
    ad82:	31 81       	ldd	r19, Z+1	; 0x01
    ad84:	fc 01       	movw	r30, r24
    ad86:	31 83       	std	Z+1, r19	; 0x01
    ad88:	20 83       	st	Z, r18
    ad8a:	ce 01       	movw	r24, r28
    ad8c:	8b 5e       	subi	r24, 0xEB	; 235
    ad8e:	9d 4f       	sbci	r25, 0xFD	; 253
    ad90:	fc 01       	movw	r30, r24
    ad92:	80 81       	ld	r24, Z
    ad94:	91 81       	ldd	r25, Z+1	; 0x01
    ad96:	8c 01       	movw	r16, r24
    ad98:	c8 01       	movw	r24, r16
    ad9a:	01 97       	sbiw	r24, 0x01	; 1
    ad9c:	f1 f7       	brne	.-4      	; 0xad9a <pick_drop+0x3e88>
    ad9e:	8c 01       	movw	r16, r24
    ada0:	ce 01       	movw	r24, r28
    ada2:	8b 5e       	subi	r24, 0xEB	; 235
    ada4:	9d 4f       	sbci	r25, 0xFD	; 253
    ada6:	fc 01       	movw	r30, r24
    ada8:	11 83       	std	Z+1, r17	; 0x01
    adaa:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right();
    adac:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
			stop();
    adb0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    adb4:	9e 01       	movw	r18, r28
    adb6:	29 5e       	subi	r18, 0xE9	; 233
    adb8:	3d 4f       	sbci	r19, 0xFD	; 253
    adba:	80 e0       	ldi	r24, 0x00	; 0
    adbc:	90 e0       	ldi	r25, 0x00	; 0
    adbe:	a0 ea       	ldi	r26, 0xA0	; 160
    adc0:	b1 e4       	ldi	r27, 0x41	; 65
    adc2:	f9 01       	movw	r30, r18
    adc4:	80 83       	st	Z, r24
    adc6:	91 83       	std	Z+1, r25	; 0x01
    adc8:	a2 83       	std	Z+2, r26	; 0x02
    adca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    adcc:	8e 01       	movw	r16, r28
    adce:	05 5e       	subi	r16, 0xE5	; 229
    add0:	1d 4f       	sbci	r17, 0xFD	; 253
    add2:	ce 01       	movw	r24, r28
    add4:	89 5e       	subi	r24, 0xE9	; 233
    add6:	9d 4f       	sbci	r25, 0xFD	; 253
    add8:	fc 01       	movw	r30, r24
    adda:	60 81       	ld	r22, Z
    addc:	71 81       	ldd	r23, Z+1	; 0x01
    adde:	82 81       	ldd	r24, Z+2	; 0x02
    ade0:	93 81       	ldd	r25, Z+3	; 0x03
    ade2:	26 e6       	ldi	r18, 0x66	; 102
    ade4:	36 e6       	ldi	r19, 0x66	; 102
    ade6:	46 e6       	ldi	r20, 0x66	; 102
    ade8:	55 e4       	ldi	r21, 0x45	; 69
    adea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    adee:	dc 01       	movw	r26, r24
    adf0:	cb 01       	movw	r24, r22
    adf2:	f8 01       	movw	r30, r16
    adf4:	80 83       	st	Z, r24
    adf6:	91 83       	std	Z+1, r25	; 0x01
    adf8:	a2 83       	std	Z+2, r26	; 0x02
    adfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    adfc:	ce 01       	movw	r24, r28
    adfe:	85 5e       	subi	r24, 0xE5	; 229
    ae00:	9d 4f       	sbci	r25, 0xFD	; 253
    ae02:	11 e0       	ldi	r17, 0x01	; 1
    ae04:	fc 01       	movw	r30, r24
    ae06:	60 81       	ld	r22, Z
    ae08:	71 81       	ldd	r23, Z+1	; 0x01
    ae0a:	82 81       	ldd	r24, Z+2	; 0x02
    ae0c:	93 81       	ldd	r25, Z+3	; 0x03
    ae0e:	20 e0       	ldi	r18, 0x00	; 0
    ae10:	30 e0       	ldi	r19, 0x00	; 0
    ae12:	40 e8       	ldi	r20, 0x80	; 128
    ae14:	5f e3       	ldi	r21, 0x3F	; 63
    ae16:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ae1a:	88 23       	and	r24, r24
    ae1c:	0c f0       	brlt	.+2      	; 0xae20 <pick_drop+0x3f0e>
    ae1e:	10 e0       	ldi	r17, 0x00	; 0
    ae20:	11 23       	and	r17, r17
    ae22:	49 f0       	breq	.+18     	; 0xae36 <pick_drop+0x3f24>
		__ticks = 1;
    ae24:	ce 01       	movw	r24, r28
    ae26:	81 5e       	subi	r24, 0xE1	; 225
    ae28:	9d 4f       	sbci	r25, 0xFD	; 253
    ae2a:	21 e0       	ldi	r18, 0x01	; 1
    ae2c:	30 e0       	ldi	r19, 0x00	; 0
    ae2e:	fc 01       	movw	r30, r24
    ae30:	31 83       	std	Z+1, r19	; 0x01
    ae32:	20 83       	st	Z, r18
    ae34:	74 c0       	rjmp	.+232    	; 0xaf1e <pick_drop+0x400c>
	else if (__tmp > 65535)
    ae36:	ce 01       	movw	r24, r28
    ae38:	85 5e       	subi	r24, 0xE5	; 229
    ae3a:	9d 4f       	sbci	r25, 0xFD	; 253
    ae3c:	11 e0       	ldi	r17, 0x01	; 1
    ae3e:	fc 01       	movw	r30, r24
    ae40:	60 81       	ld	r22, Z
    ae42:	71 81       	ldd	r23, Z+1	; 0x01
    ae44:	82 81       	ldd	r24, Z+2	; 0x02
    ae46:	93 81       	ldd	r25, Z+3	; 0x03
    ae48:	20 e0       	ldi	r18, 0x00	; 0
    ae4a:	3f ef       	ldi	r19, 0xFF	; 255
    ae4c:	4f e7       	ldi	r20, 0x7F	; 127
    ae4e:	57 e4       	ldi	r21, 0x47	; 71
    ae50:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    ae54:	18 16       	cp	r1, r24
    ae56:	0c f0       	brlt	.+2      	; 0xae5a <pick_drop+0x3f48>
    ae58:	10 e0       	ldi	r17, 0x00	; 0
    ae5a:	11 23       	and	r17, r17
    ae5c:	09 f4       	brne	.+2      	; 0xae60 <pick_drop+0x3f4e>
    ae5e:	4d c0       	rjmp	.+154    	; 0xaefa <pick_drop+0x3fe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ae60:	ce 01       	movw	r24, r28
    ae62:	89 5e       	subi	r24, 0xE9	; 233
    ae64:	9d 4f       	sbci	r25, 0xFD	; 253
    ae66:	fc 01       	movw	r30, r24
    ae68:	60 81       	ld	r22, Z
    ae6a:	71 81       	ldd	r23, Z+1	; 0x01
    ae6c:	82 81       	ldd	r24, Z+2	; 0x02
    ae6e:	93 81       	ldd	r25, Z+3	; 0x03
    ae70:	20 e0       	ldi	r18, 0x00	; 0
    ae72:	30 e0       	ldi	r19, 0x00	; 0
    ae74:	40 e2       	ldi	r20, 0x20	; 32
    ae76:	51 e4       	ldi	r21, 0x41	; 65
    ae78:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ae7c:	dc 01       	movw	r26, r24
    ae7e:	cb 01       	movw	r24, r22
    ae80:	8e 01       	movw	r16, r28
    ae82:	01 5e       	subi	r16, 0xE1	; 225
    ae84:	1d 4f       	sbci	r17, 0xFD	; 253
    ae86:	bc 01       	movw	r22, r24
    ae88:	cd 01       	movw	r24, r26
    ae8a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ae8e:	dc 01       	movw	r26, r24
    ae90:	cb 01       	movw	r24, r22
    ae92:	f8 01       	movw	r30, r16
    ae94:	91 83       	std	Z+1, r25	; 0x01
    ae96:	80 83       	st	Z, r24
    ae98:	27 c0       	rjmp	.+78     	; 0xaee8 <pick_drop+0x3fd6>
    ae9a:	ce 01       	movw	r24, r28
    ae9c:	8f 5d       	subi	r24, 0xDF	; 223
    ae9e:	9d 4f       	sbci	r25, 0xFD	; 253
    aea0:	20 e7       	ldi	r18, 0x70	; 112
    aea2:	31 e0       	ldi	r19, 0x01	; 1
    aea4:	fc 01       	movw	r30, r24
    aea6:	31 83       	std	Z+1, r19	; 0x01
    aea8:	20 83       	st	Z, r18
    aeaa:	ce 01       	movw	r24, r28
    aeac:	8f 5d       	subi	r24, 0xDF	; 223
    aeae:	9d 4f       	sbci	r25, 0xFD	; 253
    aeb0:	fc 01       	movw	r30, r24
    aeb2:	80 81       	ld	r24, Z
    aeb4:	91 81       	ldd	r25, Z+1	; 0x01
    aeb6:	8c 01       	movw	r16, r24
    aeb8:	c8 01       	movw	r24, r16
    aeba:	01 97       	sbiw	r24, 0x01	; 1
    aebc:	f1 f7       	brne	.-4      	; 0xaeba <pick_drop+0x3fa8>
    aebe:	8c 01       	movw	r16, r24
    aec0:	ce 01       	movw	r24, r28
    aec2:	8f 5d       	subi	r24, 0xDF	; 223
    aec4:	9d 4f       	sbci	r25, 0xFD	; 253
    aec6:	fc 01       	movw	r30, r24
    aec8:	11 83       	std	Z+1, r17	; 0x01
    aeca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aecc:	ce 01       	movw	r24, r28
    aece:	81 5e       	subi	r24, 0xE1	; 225
    aed0:	9d 4f       	sbci	r25, 0xFD	; 253
    aed2:	9e 01       	movw	r18, r28
    aed4:	21 5e       	subi	r18, 0xE1	; 225
    aed6:	3d 4f       	sbci	r19, 0xFD	; 253
    aed8:	f9 01       	movw	r30, r18
    aeda:	20 81       	ld	r18, Z
    aedc:	31 81       	ldd	r19, Z+1	; 0x01
    aede:	21 50       	subi	r18, 0x01	; 1
    aee0:	30 40       	sbci	r19, 0x00	; 0
    aee2:	fc 01       	movw	r30, r24
    aee4:	31 83       	std	Z+1, r19	; 0x01
    aee6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aee8:	ce 01       	movw	r24, r28
    aeea:	81 5e       	subi	r24, 0xE1	; 225
    aeec:	9d 4f       	sbci	r25, 0xFD	; 253
    aeee:	fc 01       	movw	r30, r24
    aef0:	80 81       	ld	r24, Z
    aef2:	91 81       	ldd	r25, Z+1	; 0x01
    aef4:	00 97       	sbiw	r24, 0x00	; 0
    aef6:	89 f6       	brne	.-94     	; 0xae9a <pick_drop+0x3f88>
    aef8:	2f c0       	rjmp	.+94     	; 0xaf58 <pick_drop+0x4046>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aefa:	8e 01       	movw	r16, r28
    aefc:	01 5e       	subi	r16, 0xE1	; 225
    aefe:	1d 4f       	sbci	r17, 0xFD	; 253
    af00:	ce 01       	movw	r24, r28
    af02:	85 5e       	subi	r24, 0xE5	; 229
    af04:	9d 4f       	sbci	r25, 0xFD	; 253
    af06:	fc 01       	movw	r30, r24
    af08:	60 81       	ld	r22, Z
    af0a:	71 81       	ldd	r23, Z+1	; 0x01
    af0c:	82 81       	ldd	r24, Z+2	; 0x02
    af0e:	93 81       	ldd	r25, Z+3	; 0x03
    af10:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    af14:	dc 01       	movw	r26, r24
    af16:	cb 01       	movw	r24, r22
    af18:	f8 01       	movw	r30, r16
    af1a:	91 83       	std	Z+1, r25	; 0x01
    af1c:	80 83       	st	Z, r24
    af1e:	ce 01       	movw	r24, r28
    af20:	8d 5d       	subi	r24, 0xDD	; 221
    af22:	9d 4f       	sbci	r25, 0xFD	; 253
    af24:	9e 01       	movw	r18, r28
    af26:	21 5e       	subi	r18, 0xE1	; 225
    af28:	3d 4f       	sbci	r19, 0xFD	; 253
    af2a:	f9 01       	movw	r30, r18
    af2c:	20 81       	ld	r18, Z
    af2e:	31 81       	ldd	r19, Z+1	; 0x01
    af30:	fc 01       	movw	r30, r24
    af32:	31 83       	std	Z+1, r19	; 0x01
    af34:	20 83       	st	Z, r18
    af36:	ce 01       	movw	r24, r28
    af38:	8d 5d       	subi	r24, 0xDD	; 221
    af3a:	9d 4f       	sbci	r25, 0xFD	; 253
    af3c:	fc 01       	movw	r30, r24
    af3e:	80 81       	ld	r24, Z
    af40:	91 81       	ldd	r25, Z+1	; 0x01
    af42:	8c 01       	movw	r16, r24
    af44:	c8 01       	movw	r24, r16
    af46:	01 97       	sbiw	r24, 0x01	; 1
    af48:	f1 f7       	brne	.-4      	; 0xaf46 <pick_drop+0x4034>
    af4a:	8c 01       	movw	r16, r24
    af4c:	ce 01       	movw	r24, r28
    af4e:	8d 5d       	subi	r24, 0xDD	; 221
    af50:	9d 4f       	sbci	r25, 0xFD	; 253
    af52:	fc 01       	movw	r30, r24
    af54:	11 83       	std	Z+1, r17	; 0x01
    af56:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(20);
    af58:	84 e1       	ldi	r24, 0x14	; 20
    af5a:	90 e0       	ldi	r25, 0x00	; 0
    af5c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    af60:	9e 01       	movw	r18, r28
    af62:	2b 5d       	subi	r18, 0xDB	; 219
    af64:	3d 4f       	sbci	r19, 0xFD	; 253
    af66:	80 e0       	ldi	r24, 0x00	; 0
    af68:	90 e0       	ldi	r25, 0x00	; 0
    af6a:	a0 ea       	ldi	r26, 0xA0	; 160
    af6c:	b1 e4       	ldi	r27, 0x41	; 65
    af6e:	f9 01       	movw	r30, r18
    af70:	80 83       	st	Z, r24
    af72:	91 83       	std	Z+1, r25	; 0x01
    af74:	a2 83       	std	Z+2, r26	; 0x02
    af76:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    af78:	8e 01       	movw	r16, r28
    af7a:	07 5d       	subi	r16, 0xD7	; 215
    af7c:	1d 4f       	sbci	r17, 0xFD	; 253
    af7e:	ce 01       	movw	r24, r28
    af80:	8b 5d       	subi	r24, 0xDB	; 219
    af82:	9d 4f       	sbci	r25, 0xFD	; 253
    af84:	fc 01       	movw	r30, r24
    af86:	60 81       	ld	r22, Z
    af88:	71 81       	ldd	r23, Z+1	; 0x01
    af8a:	82 81       	ldd	r24, Z+2	; 0x02
    af8c:	93 81       	ldd	r25, Z+3	; 0x03
    af8e:	26 e6       	ldi	r18, 0x66	; 102
    af90:	36 e6       	ldi	r19, 0x66	; 102
    af92:	46 e6       	ldi	r20, 0x66	; 102
    af94:	55 e4       	ldi	r21, 0x45	; 69
    af96:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    af9a:	dc 01       	movw	r26, r24
    af9c:	cb 01       	movw	r24, r22
    af9e:	f8 01       	movw	r30, r16
    afa0:	80 83       	st	Z, r24
    afa2:	91 83       	std	Z+1, r25	; 0x01
    afa4:	a2 83       	std	Z+2, r26	; 0x02
    afa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    afa8:	ce 01       	movw	r24, r28
    afaa:	87 5d       	subi	r24, 0xD7	; 215
    afac:	9d 4f       	sbci	r25, 0xFD	; 253
    afae:	11 e0       	ldi	r17, 0x01	; 1
    afb0:	fc 01       	movw	r30, r24
    afb2:	60 81       	ld	r22, Z
    afb4:	71 81       	ldd	r23, Z+1	; 0x01
    afb6:	82 81       	ldd	r24, Z+2	; 0x02
    afb8:	93 81       	ldd	r25, Z+3	; 0x03
    afba:	20 e0       	ldi	r18, 0x00	; 0
    afbc:	30 e0       	ldi	r19, 0x00	; 0
    afbe:	40 e8       	ldi	r20, 0x80	; 128
    afc0:	5f e3       	ldi	r21, 0x3F	; 63
    afc2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    afc6:	88 23       	and	r24, r24
    afc8:	0c f0       	brlt	.+2      	; 0xafcc <pick_drop+0x40ba>
    afca:	10 e0       	ldi	r17, 0x00	; 0
    afcc:	11 23       	and	r17, r17
    afce:	49 f0       	breq	.+18     	; 0xafe2 <pick_drop+0x40d0>
		__ticks = 1;
    afd0:	ce 01       	movw	r24, r28
    afd2:	83 5d       	subi	r24, 0xD3	; 211
    afd4:	9d 4f       	sbci	r25, 0xFD	; 253
    afd6:	21 e0       	ldi	r18, 0x01	; 1
    afd8:	30 e0       	ldi	r19, 0x00	; 0
    afda:	fc 01       	movw	r30, r24
    afdc:	31 83       	std	Z+1, r19	; 0x01
    afde:	20 83       	st	Z, r18
    afe0:	74 c0       	rjmp	.+232    	; 0xb0ca <pick_drop+0x41b8>
	else if (__tmp > 65535)
    afe2:	ce 01       	movw	r24, r28
    afe4:	87 5d       	subi	r24, 0xD7	; 215
    afe6:	9d 4f       	sbci	r25, 0xFD	; 253
    afe8:	11 e0       	ldi	r17, 0x01	; 1
    afea:	fc 01       	movw	r30, r24
    afec:	60 81       	ld	r22, Z
    afee:	71 81       	ldd	r23, Z+1	; 0x01
    aff0:	82 81       	ldd	r24, Z+2	; 0x02
    aff2:	93 81       	ldd	r25, Z+3	; 0x03
    aff4:	20 e0       	ldi	r18, 0x00	; 0
    aff6:	3f ef       	ldi	r19, 0xFF	; 255
    aff8:	4f e7       	ldi	r20, 0x7F	; 127
    affa:	57 e4       	ldi	r21, 0x47	; 71
    affc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    b000:	18 16       	cp	r1, r24
    b002:	0c f0       	brlt	.+2      	; 0xb006 <pick_drop+0x40f4>
    b004:	10 e0       	ldi	r17, 0x00	; 0
    b006:	11 23       	and	r17, r17
    b008:	09 f4       	brne	.+2      	; 0xb00c <pick_drop+0x40fa>
    b00a:	4d c0       	rjmp	.+154    	; 0xb0a6 <pick_drop+0x4194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b00c:	ce 01       	movw	r24, r28
    b00e:	8b 5d       	subi	r24, 0xDB	; 219
    b010:	9d 4f       	sbci	r25, 0xFD	; 253
    b012:	fc 01       	movw	r30, r24
    b014:	60 81       	ld	r22, Z
    b016:	71 81       	ldd	r23, Z+1	; 0x01
    b018:	82 81       	ldd	r24, Z+2	; 0x02
    b01a:	93 81       	ldd	r25, Z+3	; 0x03
    b01c:	20 e0       	ldi	r18, 0x00	; 0
    b01e:	30 e0       	ldi	r19, 0x00	; 0
    b020:	40 e2       	ldi	r20, 0x20	; 32
    b022:	51 e4       	ldi	r21, 0x41	; 65
    b024:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b028:	dc 01       	movw	r26, r24
    b02a:	cb 01       	movw	r24, r22
    b02c:	8e 01       	movw	r16, r28
    b02e:	03 5d       	subi	r16, 0xD3	; 211
    b030:	1d 4f       	sbci	r17, 0xFD	; 253
    b032:	bc 01       	movw	r22, r24
    b034:	cd 01       	movw	r24, r26
    b036:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b03a:	dc 01       	movw	r26, r24
    b03c:	cb 01       	movw	r24, r22
    b03e:	f8 01       	movw	r30, r16
    b040:	91 83       	std	Z+1, r25	; 0x01
    b042:	80 83       	st	Z, r24
    b044:	27 c0       	rjmp	.+78     	; 0xb094 <pick_drop+0x4182>
    b046:	ce 01       	movw	r24, r28
    b048:	81 5d       	subi	r24, 0xD1	; 209
    b04a:	9d 4f       	sbci	r25, 0xFD	; 253
    b04c:	20 e7       	ldi	r18, 0x70	; 112
    b04e:	31 e0       	ldi	r19, 0x01	; 1
    b050:	fc 01       	movw	r30, r24
    b052:	31 83       	std	Z+1, r19	; 0x01
    b054:	20 83       	st	Z, r18
    b056:	ce 01       	movw	r24, r28
    b058:	81 5d       	subi	r24, 0xD1	; 209
    b05a:	9d 4f       	sbci	r25, 0xFD	; 253
    b05c:	fc 01       	movw	r30, r24
    b05e:	80 81       	ld	r24, Z
    b060:	91 81       	ldd	r25, Z+1	; 0x01
    b062:	8c 01       	movw	r16, r24
    b064:	c8 01       	movw	r24, r16
    b066:	01 97       	sbiw	r24, 0x01	; 1
    b068:	f1 f7       	brne	.-4      	; 0xb066 <pick_drop+0x4154>
    b06a:	8c 01       	movw	r16, r24
    b06c:	ce 01       	movw	r24, r28
    b06e:	81 5d       	subi	r24, 0xD1	; 209
    b070:	9d 4f       	sbci	r25, 0xFD	; 253
    b072:	fc 01       	movw	r30, r24
    b074:	11 83       	std	Z+1, r17	; 0x01
    b076:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b078:	ce 01       	movw	r24, r28
    b07a:	83 5d       	subi	r24, 0xD3	; 211
    b07c:	9d 4f       	sbci	r25, 0xFD	; 253
    b07e:	9e 01       	movw	r18, r28
    b080:	23 5d       	subi	r18, 0xD3	; 211
    b082:	3d 4f       	sbci	r19, 0xFD	; 253
    b084:	f9 01       	movw	r30, r18
    b086:	20 81       	ld	r18, Z
    b088:	31 81       	ldd	r19, Z+1	; 0x01
    b08a:	21 50       	subi	r18, 0x01	; 1
    b08c:	30 40       	sbci	r19, 0x00	; 0
    b08e:	fc 01       	movw	r30, r24
    b090:	31 83       	std	Z+1, r19	; 0x01
    b092:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b094:	ce 01       	movw	r24, r28
    b096:	83 5d       	subi	r24, 0xD3	; 211
    b098:	9d 4f       	sbci	r25, 0xFD	; 253
    b09a:	fc 01       	movw	r30, r24
    b09c:	80 81       	ld	r24, Z
    b09e:	91 81       	ldd	r25, Z+1	; 0x01
    b0a0:	00 97       	sbiw	r24, 0x00	; 0
    b0a2:	89 f6       	brne	.-94     	; 0xb046 <pick_drop+0x4134>
    b0a4:	2f c0       	rjmp	.+94     	; 0xb104 <pick_drop+0x41f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b0a6:	8e 01       	movw	r16, r28
    b0a8:	03 5d       	subi	r16, 0xD3	; 211
    b0aa:	1d 4f       	sbci	r17, 0xFD	; 253
    b0ac:	ce 01       	movw	r24, r28
    b0ae:	87 5d       	subi	r24, 0xD7	; 215
    b0b0:	9d 4f       	sbci	r25, 0xFD	; 253
    b0b2:	fc 01       	movw	r30, r24
    b0b4:	60 81       	ld	r22, Z
    b0b6:	71 81       	ldd	r23, Z+1	; 0x01
    b0b8:	82 81       	ldd	r24, Z+2	; 0x02
    b0ba:	93 81       	ldd	r25, Z+3	; 0x03
    b0bc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b0c0:	dc 01       	movw	r26, r24
    b0c2:	cb 01       	movw	r24, r22
    b0c4:	f8 01       	movw	r30, r16
    b0c6:	91 83       	std	Z+1, r25	; 0x01
    b0c8:	80 83       	st	Z, r24
    b0ca:	ce 01       	movw	r24, r28
    b0cc:	8f 5c       	subi	r24, 0xCF	; 207
    b0ce:	9d 4f       	sbci	r25, 0xFD	; 253
    b0d0:	9e 01       	movw	r18, r28
    b0d2:	23 5d       	subi	r18, 0xD3	; 211
    b0d4:	3d 4f       	sbci	r19, 0xFD	; 253
    b0d6:	f9 01       	movw	r30, r18
    b0d8:	20 81       	ld	r18, Z
    b0da:	31 81       	ldd	r19, Z+1	; 0x01
    b0dc:	fc 01       	movw	r30, r24
    b0de:	31 83       	std	Z+1, r19	; 0x01
    b0e0:	20 83       	st	Z, r18
    b0e2:	ce 01       	movw	r24, r28
    b0e4:	8f 5c       	subi	r24, 0xCF	; 207
    b0e6:	9d 4f       	sbci	r25, 0xFD	; 253
    b0e8:	fc 01       	movw	r30, r24
    b0ea:	80 81       	ld	r24, Z
    b0ec:	91 81       	ldd	r25, Z+1	; 0x01
    b0ee:	8c 01       	movw	r16, r24
    b0f0:	c8 01       	movw	r24, r16
    b0f2:	01 97       	sbiw	r24, 0x01	; 1
    b0f4:	f1 f7       	brne	.-4      	; 0xb0f2 <pick_drop+0x41e0>
    b0f6:	8c 01       	movw	r16, r24
    b0f8:	ce 01       	movw	r24, r28
    b0fa:	8f 5c       	subi	r24, 0xCF	; 207
    b0fc:	9d 4f       	sbci	r25, 0xFD	; 253
    b0fe:	fc 01       	movw	r30, r24
    b100:	11 83       	std	Z+1, r17	; 0x01
    b102:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    b104:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    b108:	9e 01       	movw	r18, r28
    b10a:	2d 5c       	subi	r18, 0xCD	; 205
    b10c:	3d 4f       	sbci	r19, 0xFD	; 253
    b10e:	80 e0       	ldi	r24, 0x00	; 0
    b110:	90 e0       	ldi	r25, 0x00	; 0
    b112:	a8 ec       	ldi	r26, 0xC8	; 200
    b114:	b2 e4       	ldi	r27, 0x42	; 66
    b116:	f9 01       	movw	r30, r18
    b118:	80 83       	st	Z, r24
    b11a:	91 83       	std	Z+1, r25	; 0x01
    b11c:	a2 83       	std	Z+2, r26	; 0x02
    b11e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b120:	8e 01       	movw	r16, r28
    b122:	09 5c       	subi	r16, 0xC9	; 201
    b124:	1d 4f       	sbci	r17, 0xFD	; 253
    b126:	ce 01       	movw	r24, r28
    b128:	8d 5c       	subi	r24, 0xCD	; 205
    b12a:	9d 4f       	sbci	r25, 0xFD	; 253
    b12c:	fc 01       	movw	r30, r24
    b12e:	60 81       	ld	r22, Z
    b130:	71 81       	ldd	r23, Z+1	; 0x01
    b132:	82 81       	ldd	r24, Z+2	; 0x02
    b134:	93 81       	ldd	r25, Z+3	; 0x03
    b136:	26 e6       	ldi	r18, 0x66	; 102
    b138:	36 e6       	ldi	r19, 0x66	; 102
    b13a:	46 e6       	ldi	r20, 0x66	; 102
    b13c:	55 e4       	ldi	r21, 0x45	; 69
    b13e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b142:	dc 01       	movw	r26, r24
    b144:	cb 01       	movw	r24, r22
    b146:	f8 01       	movw	r30, r16
    b148:	80 83       	st	Z, r24
    b14a:	91 83       	std	Z+1, r25	; 0x01
    b14c:	a2 83       	std	Z+2, r26	; 0x02
    b14e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b150:	ce 01       	movw	r24, r28
    b152:	89 5c       	subi	r24, 0xC9	; 201
    b154:	9d 4f       	sbci	r25, 0xFD	; 253
    b156:	11 e0       	ldi	r17, 0x01	; 1
    b158:	fc 01       	movw	r30, r24
    b15a:	60 81       	ld	r22, Z
    b15c:	71 81       	ldd	r23, Z+1	; 0x01
    b15e:	82 81       	ldd	r24, Z+2	; 0x02
    b160:	93 81       	ldd	r25, Z+3	; 0x03
    b162:	20 e0       	ldi	r18, 0x00	; 0
    b164:	30 e0       	ldi	r19, 0x00	; 0
    b166:	40 e8       	ldi	r20, 0x80	; 128
    b168:	5f e3       	ldi	r21, 0x3F	; 63
    b16a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    b16e:	88 23       	and	r24, r24
    b170:	0c f0       	brlt	.+2      	; 0xb174 <pick_drop+0x4262>
    b172:	10 e0       	ldi	r17, 0x00	; 0
    b174:	11 23       	and	r17, r17
    b176:	49 f0       	breq	.+18     	; 0xb18a <pick_drop+0x4278>
		__ticks = 1;
    b178:	ce 01       	movw	r24, r28
    b17a:	85 5c       	subi	r24, 0xC5	; 197
    b17c:	9d 4f       	sbci	r25, 0xFD	; 253
    b17e:	21 e0       	ldi	r18, 0x01	; 1
    b180:	30 e0       	ldi	r19, 0x00	; 0
    b182:	fc 01       	movw	r30, r24
    b184:	31 83       	std	Z+1, r19	; 0x01
    b186:	20 83       	st	Z, r18
    b188:	74 c0       	rjmp	.+232    	; 0xb272 <pick_drop+0x4360>
	else if (__tmp > 65535)
    b18a:	ce 01       	movw	r24, r28
    b18c:	89 5c       	subi	r24, 0xC9	; 201
    b18e:	9d 4f       	sbci	r25, 0xFD	; 253
    b190:	11 e0       	ldi	r17, 0x01	; 1
    b192:	fc 01       	movw	r30, r24
    b194:	60 81       	ld	r22, Z
    b196:	71 81       	ldd	r23, Z+1	; 0x01
    b198:	82 81       	ldd	r24, Z+2	; 0x02
    b19a:	93 81       	ldd	r25, Z+3	; 0x03
    b19c:	20 e0       	ldi	r18, 0x00	; 0
    b19e:	3f ef       	ldi	r19, 0xFF	; 255
    b1a0:	4f e7       	ldi	r20, 0x7F	; 127
    b1a2:	57 e4       	ldi	r21, 0x47	; 71
    b1a4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    b1a8:	18 16       	cp	r1, r24
    b1aa:	0c f0       	brlt	.+2      	; 0xb1ae <pick_drop+0x429c>
    b1ac:	10 e0       	ldi	r17, 0x00	; 0
    b1ae:	11 23       	and	r17, r17
    b1b0:	09 f4       	brne	.+2      	; 0xb1b4 <pick_drop+0x42a2>
    b1b2:	4d c0       	rjmp	.+154    	; 0xb24e <pick_drop+0x433c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b1b4:	ce 01       	movw	r24, r28
    b1b6:	8d 5c       	subi	r24, 0xCD	; 205
    b1b8:	9d 4f       	sbci	r25, 0xFD	; 253
    b1ba:	fc 01       	movw	r30, r24
    b1bc:	60 81       	ld	r22, Z
    b1be:	71 81       	ldd	r23, Z+1	; 0x01
    b1c0:	82 81       	ldd	r24, Z+2	; 0x02
    b1c2:	93 81       	ldd	r25, Z+3	; 0x03
    b1c4:	20 e0       	ldi	r18, 0x00	; 0
    b1c6:	30 e0       	ldi	r19, 0x00	; 0
    b1c8:	40 e2       	ldi	r20, 0x20	; 32
    b1ca:	51 e4       	ldi	r21, 0x41	; 65
    b1cc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b1d0:	dc 01       	movw	r26, r24
    b1d2:	cb 01       	movw	r24, r22
    b1d4:	8e 01       	movw	r16, r28
    b1d6:	05 5c       	subi	r16, 0xC5	; 197
    b1d8:	1d 4f       	sbci	r17, 0xFD	; 253
    b1da:	bc 01       	movw	r22, r24
    b1dc:	cd 01       	movw	r24, r26
    b1de:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b1e2:	dc 01       	movw	r26, r24
    b1e4:	cb 01       	movw	r24, r22
    b1e6:	f8 01       	movw	r30, r16
    b1e8:	91 83       	std	Z+1, r25	; 0x01
    b1ea:	80 83       	st	Z, r24
    b1ec:	27 c0       	rjmp	.+78     	; 0xb23c <pick_drop+0x432a>
    b1ee:	ce 01       	movw	r24, r28
    b1f0:	83 5c       	subi	r24, 0xC3	; 195
    b1f2:	9d 4f       	sbci	r25, 0xFD	; 253
    b1f4:	20 e7       	ldi	r18, 0x70	; 112
    b1f6:	31 e0       	ldi	r19, 0x01	; 1
    b1f8:	fc 01       	movw	r30, r24
    b1fa:	31 83       	std	Z+1, r19	; 0x01
    b1fc:	20 83       	st	Z, r18
    b1fe:	ce 01       	movw	r24, r28
    b200:	83 5c       	subi	r24, 0xC3	; 195
    b202:	9d 4f       	sbci	r25, 0xFD	; 253
    b204:	fc 01       	movw	r30, r24
    b206:	80 81       	ld	r24, Z
    b208:	91 81       	ldd	r25, Z+1	; 0x01
    b20a:	8c 01       	movw	r16, r24
    b20c:	c8 01       	movw	r24, r16
    b20e:	01 97       	sbiw	r24, 0x01	; 1
    b210:	f1 f7       	brne	.-4      	; 0xb20e <pick_drop+0x42fc>
    b212:	8c 01       	movw	r16, r24
    b214:	ce 01       	movw	r24, r28
    b216:	83 5c       	subi	r24, 0xC3	; 195
    b218:	9d 4f       	sbci	r25, 0xFD	; 253
    b21a:	fc 01       	movw	r30, r24
    b21c:	11 83       	std	Z+1, r17	; 0x01
    b21e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b220:	ce 01       	movw	r24, r28
    b222:	85 5c       	subi	r24, 0xC5	; 197
    b224:	9d 4f       	sbci	r25, 0xFD	; 253
    b226:	9e 01       	movw	r18, r28
    b228:	25 5c       	subi	r18, 0xC5	; 197
    b22a:	3d 4f       	sbci	r19, 0xFD	; 253
    b22c:	f9 01       	movw	r30, r18
    b22e:	20 81       	ld	r18, Z
    b230:	31 81       	ldd	r19, Z+1	; 0x01
    b232:	21 50       	subi	r18, 0x01	; 1
    b234:	30 40       	sbci	r19, 0x00	; 0
    b236:	fc 01       	movw	r30, r24
    b238:	31 83       	std	Z+1, r19	; 0x01
    b23a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b23c:	ce 01       	movw	r24, r28
    b23e:	85 5c       	subi	r24, 0xC5	; 197
    b240:	9d 4f       	sbci	r25, 0xFD	; 253
    b242:	fc 01       	movw	r30, r24
    b244:	80 81       	ld	r24, Z
    b246:	91 81       	ldd	r25, Z+1	; 0x01
    b248:	00 97       	sbiw	r24, 0x00	; 0
    b24a:	89 f6       	brne	.-94     	; 0xb1ee <pick_drop+0x42dc>
    b24c:	2f c0       	rjmp	.+94     	; 0xb2ac <pick_drop+0x439a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b24e:	8e 01       	movw	r16, r28
    b250:	05 5c       	subi	r16, 0xC5	; 197
    b252:	1d 4f       	sbci	r17, 0xFD	; 253
    b254:	ce 01       	movw	r24, r28
    b256:	89 5c       	subi	r24, 0xC9	; 201
    b258:	9d 4f       	sbci	r25, 0xFD	; 253
    b25a:	fc 01       	movw	r30, r24
    b25c:	60 81       	ld	r22, Z
    b25e:	71 81       	ldd	r23, Z+1	; 0x01
    b260:	82 81       	ldd	r24, Z+2	; 0x02
    b262:	93 81       	ldd	r25, Z+3	; 0x03
    b264:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b268:	dc 01       	movw	r26, r24
    b26a:	cb 01       	movw	r24, r22
    b26c:	f8 01       	movw	r30, r16
    b26e:	91 83       	std	Z+1, r25	; 0x01
    b270:	80 83       	st	Z, r24
    b272:	ce 01       	movw	r24, r28
    b274:	81 5c       	subi	r24, 0xC1	; 193
    b276:	9d 4f       	sbci	r25, 0xFD	; 253
    b278:	9e 01       	movw	r18, r28
    b27a:	25 5c       	subi	r18, 0xC5	; 197
    b27c:	3d 4f       	sbci	r19, 0xFD	; 253
    b27e:	f9 01       	movw	r30, r18
    b280:	20 81       	ld	r18, Z
    b282:	31 81       	ldd	r19, Z+1	; 0x01
    b284:	fc 01       	movw	r30, r24
    b286:	31 83       	std	Z+1, r19	; 0x01
    b288:	20 83       	st	Z, r18
    b28a:	ce 01       	movw	r24, r28
    b28c:	81 5c       	subi	r24, 0xC1	; 193
    b28e:	9d 4f       	sbci	r25, 0xFD	; 253
    b290:	fc 01       	movw	r30, r24
    b292:	80 81       	ld	r24, Z
    b294:	91 81       	ldd	r25, Z+1	; 0x01
    b296:	8c 01       	movw	r16, r24
    b298:	c8 01       	movw	r24, r16
    b29a:	01 97       	sbiw	r24, 0x01	; 1
    b29c:	f1 f7       	brne	.-4      	; 0xb29a <pick_drop+0x4388>
    b29e:	8c 01       	movw	r16, r24
    b2a0:	ce 01       	movw	r24, r28
    b2a2:	81 5c       	subi	r24, 0xC1	; 193
    b2a4:	9d 4f       	sbci	r25, 0xFD	; 253
    b2a6:	fc 01       	movw	r30, r24
    b2a8:	11 83       	std	Z+1, r17	; 0x01
    b2aa:	00 83       	st	Z, r16
			_delay_ms(100);
			forward_mm(25);
    b2ac:	89 e1       	ldi	r24, 0x19	; 25
    b2ae:	90 e0       	ldi	r25, 0x00	; 0
    b2b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b2b4:	9e 01       	movw	r18, r28
    b2b6:	2f 5b       	subi	r18, 0xBF	; 191
    b2b8:	3d 4f       	sbci	r19, 0xFD	; 253
    b2ba:	80 e0       	ldi	r24, 0x00	; 0
    b2bc:	90 e0       	ldi	r25, 0x00	; 0
    b2be:	a0 ea       	ldi	r26, 0xA0	; 160
    b2c0:	b1 e4       	ldi	r27, 0x41	; 65
    b2c2:	f9 01       	movw	r30, r18
    b2c4:	80 83       	st	Z, r24
    b2c6:	91 83       	std	Z+1, r25	; 0x01
    b2c8:	a2 83       	std	Z+2, r26	; 0x02
    b2ca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b2cc:	8e 01       	movw	r16, r28
    b2ce:	0b 5b       	subi	r16, 0xBB	; 187
    b2d0:	1d 4f       	sbci	r17, 0xFD	; 253
    b2d2:	ce 01       	movw	r24, r28
    b2d4:	8f 5b       	subi	r24, 0xBF	; 191
    b2d6:	9d 4f       	sbci	r25, 0xFD	; 253
    b2d8:	fc 01       	movw	r30, r24
    b2da:	60 81       	ld	r22, Z
    b2dc:	71 81       	ldd	r23, Z+1	; 0x01
    b2de:	82 81       	ldd	r24, Z+2	; 0x02
    b2e0:	93 81       	ldd	r25, Z+3	; 0x03
    b2e2:	26 e6       	ldi	r18, 0x66	; 102
    b2e4:	36 e6       	ldi	r19, 0x66	; 102
    b2e6:	46 e6       	ldi	r20, 0x66	; 102
    b2e8:	55 e4       	ldi	r21, 0x45	; 69
    b2ea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b2ee:	dc 01       	movw	r26, r24
    b2f0:	cb 01       	movw	r24, r22
    b2f2:	f8 01       	movw	r30, r16
    b2f4:	80 83       	st	Z, r24
    b2f6:	91 83       	std	Z+1, r25	; 0x01
    b2f8:	a2 83       	std	Z+2, r26	; 0x02
    b2fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b2fc:	ce 01       	movw	r24, r28
    b2fe:	8b 5b       	subi	r24, 0xBB	; 187
    b300:	9d 4f       	sbci	r25, 0xFD	; 253
    b302:	11 e0       	ldi	r17, 0x01	; 1
    b304:	fc 01       	movw	r30, r24
    b306:	60 81       	ld	r22, Z
    b308:	71 81       	ldd	r23, Z+1	; 0x01
    b30a:	82 81       	ldd	r24, Z+2	; 0x02
    b30c:	93 81       	ldd	r25, Z+3	; 0x03
    b30e:	20 e0       	ldi	r18, 0x00	; 0
    b310:	30 e0       	ldi	r19, 0x00	; 0
    b312:	40 e8       	ldi	r20, 0x80	; 128
    b314:	5f e3       	ldi	r21, 0x3F	; 63
    b316:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    b31a:	88 23       	and	r24, r24
    b31c:	0c f0       	brlt	.+2      	; 0xb320 <pick_drop+0x440e>
    b31e:	10 e0       	ldi	r17, 0x00	; 0
    b320:	11 23       	and	r17, r17
    b322:	49 f0       	breq	.+18     	; 0xb336 <pick_drop+0x4424>
		__ticks = 1;
    b324:	ce 01       	movw	r24, r28
    b326:	87 5b       	subi	r24, 0xB7	; 183
    b328:	9d 4f       	sbci	r25, 0xFD	; 253
    b32a:	21 e0       	ldi	r18, 0x01	; 1
    b32c:	30 e0       	ldi	r19, 0x00	; 0
    b32e:	fc 01       	movw	r30, r24
    b330:	31 83       	std	Z+1, r19	; 0x01
    b332:	20 83       	st	Z, r18
    b334:	74 c0       	rjmp	.+232    	; 0xb41e <pick_drop+0x450c>
	else if (__tmp > 65535)
    b336:	ce 01       	movw	r24, r28
    b338:	8b 5b       	subi	r24, 0xBB	; 187
    b33a:	9d 4f       	sbci	r25, 0xFD	; 253
    b33c:	11 e0       	ldi	r17, 0x01	; 1
    b33e:	fc 01       	movw	r30, r24
    b340:	60 81       	ld	r22, Z
    b342:	71 81       	ldd	r23, Z+1	; 0x01
    b344:	82 81       	ldd	r24, Z+2	; 0x02
    b346:	93 81       	ldd	r25, Z+3	; 0x03
    b348:	20 e0       	ldi	r18, 0x00	; 0
    b34a:	3f ef       	ldi	r19, 0xFF	; 255
    b34c:	4f e7       	ldi	r20, 0x7F	; 127
    b34e:	57 e4       	ldi	r21, 0x47	; 71
    b350:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    b354:	18 16       	cp	r1, r24
    b356:	0c f0       	brlt	.+2      	; 0xb35a <pick_drop+0x4448>
    b358:	10 e0       	ldi	r17, 0x00	; 0
    b35a:	11 23       	and	r17, r17
    b35c:	09 f4       	brne	.+2      	; 0xb360 <pick_drop+0x444e>
    b35e:	4d c0       	rjmp	.+154    	; 0xb3fa <pick_drop+0x44e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b360:	ce 01       	movw	r24, r28
    b362:	8f 5b       	subi	r24, 0xBF	; 191
    b364:	9d 4f       	sbci	r25, 0xFD	; 253
    b366:	fc 01       	movw	r30, r24
    b368:	60 81       	ld	r22, Z
    b36a:	71 81       	ldd	r23, Z+1	; 0x01
    b36c:	82 81       	ldd	r24, Z+2	; 0x02
    b36e:	93 81       	ldd	r25, Z+3	; 0x03
    b370:	20 e0       	ldi	r18, 0x00	; 0
    b372:	30 e0       	ldi	r19, 0x00	; 0
    b374:	40 e2       	ldi	r20, 0x20	; 32
    b376:	51 e4       	ldi	r21, 0x41	; 65
    b378:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b37c:	dc 01       	movw	r26, r24
    b37e:	cb 01       	movw	r24, r22
    b380:	8e 01       	movw	r16, r28
    b382:	07 5b       	subi	r16, 0xB7	; 183
    b384:	1d 4f       	sbci	r17, 0xFD	; 253
    b386:	bc 01       	movw	r22, r24
    b388:	cd 01       	movw	r24, r26
    b38a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b38e:	dc 01       	movw	r26, r24
    b390:	cb 01       	movw	r24, r22
    b392:	f8 01       	movw	r30, r16
    b394:	91 83       	std	Z+1, r25	; 0x01
    b396:	80 83       	st	Z, r24
    b398:	27 c0       	rjmp	.+78     	; 0xb3e8 <pick_drop+0x44d6>
    b39a:	ce 01       	movw	r24, r28
    b39c:	85 5b       	subi	r24, 0xB5	; 181
    b39e:	9d 4f       	sbci	r25, 0xFD	; 253
    b3a0:	20 e7       	ldi	r18, 0x70	; 112
    b3a2:	31 e0       	ldi	r19, 0x01	; 1
    b3a4:	fc 01       	movw	r30, r24
    b3a6:	31 83       	std	Z+1, r19	; 0x01
    b3a8:	20 83       	st	Z, r18
    b3aa:	ce 01       	movw	r24, r28
    b3ac:	85 5b       	subi	r24, 0xB5	; 181
    b3ae:	9d 4f       	sbci	r25, 0xFD	; 253
    b3b0:	fc 01       	movw	r30, r24
    b3b2:	80 81       	ld	r24, Z
    b3b4:	91 81       	ldd	r25, Z+1	; 0x01
    b3b6:	8c 01       	movw	r16, r24
    b3b8:	c8 01       	movw	r24, r16
    b3ba:	01 97       	sbiw	r24, 0x01	; 1
    b3bc:	f1 f7       	brne	.-4      	; 0xb3ba <pick_drop+0x44a8>
    b3be:	8c 01       	movw	r16, r24
    b3c0:	ce 01       	movw	r24, r28
    b3c2:	85 5b       	subi	r24, 0xB5	; 181
    b3c4:	9d 4f       	sbci	r25, 0xFD	; 253
    b3c6:	fc 01       	movw	r30, r24
    b3c8:	11 83       	std	Z+1, r17	; 0x01
    b3ca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3cc:	ce 01       	movw	r24, r28
    b3ce:	87 5b       	subi	r24, 0xB7	; 183
    b3d0:	9d 4f       	sbci	r25, 0xFD	; 253
    b3d2:	9e 01       	movw	r18, r28
    b3d4:	27 5b       	subi	r18, 0xB7	; 183
    b3d6:	3d 4f       	sbci	r19, 0xFD	; 253
    b3d8:	f9 01       	movw	r30, r18
    b3da:	20 81       	ld	r18, Z
    b3dc:	31 81       	ldd	r19, Z+1	; 0x01
    b3de:	21 50       	subi	r18, 0x01	; 1
    b3e0:	30 40       	sbci	r19, 0x00	; 0
    b3e2:	fc 01       	movw	r30, r24
    b3e4:	31 83       	std	Z+1, r19	; 0x01
    b3e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3e8:	ce 01       	movw	r24, r28
    b3ea:	87 5b       	subi	r24, 0xB7	; 183
    b3ec:	9d 4f       	sbci	r25, 0xFD	; 253
    b3ee:	fc 01       	movw	r30, r24
    b3f0:	80 81       	ld	r24, Z
    b3f2:	91 81       	ldd	r25, Z+1	; 0x01
    b3f4:	00 97       	sbiw	r24, 0x00	; 0
    b3f6:	89 f6       	brne	.-94     	; 0xb39a <pick_drop+0x4488>
    b3f8:	2f c0       	rjmp	.+94     	; 0xb458 <pick_drop+0x4546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b3fa:	8e 01       	movw	r16, r28
    b3fc:	07 5b       	subi	r16, 0xB7	; 183
    b3fe:	1d 4f       	sbci	r17, 0xFD	; 253
    b400:	ce 01       	movw	r24, r28
    b402:	8b 5b       	subi	r24, 0xBB	; 187
    b404:	9d 4f       	sbci	r25, 0xFD	; 253
    b406:	fc 01       	movw	r30, r24
    b408:	60 81       	ld	r22, Z
    b40a:	71 81       	ldd	r23, Z+1	; 0x01
    b40c:	82 81       	ldd	r24, Z+2	; 0x02
    b40e:	93 81       	ldd	r25, Z+3	; 0x03
    b410:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b414:	dc 01       	movw	r26, r24
    b416:	cb 01       	movw	r24, r22
    b418:	f8 01       	movw	r30, r16
    b41a:	91 83       	std	Z+1, r25	; 0x01
    b41c:	80 83       	st	Z, r24
    b41e:	ce 01       	movw	r24, r28
    b420:	83 5b       	subi	r24, 0xB3	; 179
    b422:	9d 4f       	sbci	r25, 0xFD	; 253
    b424:	9e 01       	movw	r18, r28
    b426:	27 5b       	subi	r18, 0xB7	; 183
    b428:	3d 4f       	sbci	r19, 0xFD	; 253
    b42a:	f9 01       	movw	r30, r18
    b42c:	20 81       	ld	r18, Z
    b42e:	31 81       	ldd	r19, Z+1	; 0x01
    b430:	fc 01       	movw	r30, r24
    b432:	31 83       	std	Z+1, r19	; 0x01
    b434:	20 83       	st	Z, r18
    b436:	ce 01       	movw	r24, r28
    b438:	83 5b       	subi	r24, 0xB3	; 179
    b43a:	9d 4f       	sbci	r25, 0xFD	; 253
    b43c:	fc 01       	movw	r30, r24
    b43e:	80 81       	ld	r24, Z
    b440:	91 81       	ldd	r25, Z+1	; 0x01
    b442:	8c 01       	movw	r16, r24
    b444:	c8 01       	movw	r24, r16
    b446:	01 97       	sbiw	r24, 0x01	; 1
    b448:	f1 f7       	brne	.-4      	; 0xb446 <pick_drop+0x4534>
    b44a:	8c 01       	movw	r16, r24
    b44c:	ce 01       	movw	r24, r28
    b44e:	83 5b       	subi	r24, 0xB3	; 179
    b450:	9d 4f       	sbci	r25, 0xFD	; 253
    b452:	fc 01       	movw	r30, r24
    b454:	11 83       	std	Z+1, r17	; 0x01
    b456:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    b458:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    b45c:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
	}
	else if(pd=='6'){// 6X1 A6
    b460:	ce 01       	movw	r24, r28
    b462:	8d 5e       	subi	r24, 0xED	; 237
    b464:	9c 4f       	sbci	r25, 0xFC	; 252
    b466:	fc 01       	movw	r30, r24
    b468:	80 81       	ld	r24, Z
    b46a:	86 33       	cpi	r24, 0x36	; 54
    b46c:	09 f0       	breq	.+2      	; 0xb470 <pick_drop+0x455e>
    b46e:	20 c5       	rjmp	.+2624   	; 0xbeb0 <pick_drop+0x4f9e>
		if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    b470:	80 91 63 03 	lds	r24, 0x0363
    b474:	90 91 64 03 	lds	r25, 0x0364
    b478:	01 97       	sbiw	r24, 0x01	; 1
    b47a:	89 59       	subi	r24, 0x99	; 153
    b47c:	9c 4f       	sbci	r25, 0xFC	; 252
    b47e:	fc 01       	movw	r30, r24
    b480:	80 81       	ld	r24, Z
    b482:	8c 34       	cpi	r24, 0x4C	; 76
    b484:	61 f0       	breq	.+24     	; 0xb49e <pick_drop+0x458c>
    b486:	80 91 63 03 	lds	r24, 0x0363
    b48a:	90 91 64 03 	lds	r25, 0x0364
    b48e:	01 97       	sbiw	r24, 0x01	; 1
    b490:	89 59       	subi	r24, 0x99	; 153
    b492:	9c 4f       	sbci	r25, 0xFC	; 252
    b494:	fc 01       	movw	r30, r24
    b496:	80 81       	ld	r24, Z
    b498:	82 35       	cpi	r24, 0x52	; 82
    b49a:	09 f0       	breq	.+2      	; 0xb49e <pick_drop+0x458c>
    b49c:	b0 c1       	rjmp	.+864    	; 0xb7fe <pick_drop+0x48ec>
			forward_mm(20);
    b49e:	84 e1       	ldi	r24, 0x14	; 20
    b4a0:	90 e0       	ldi	r25, 0x00	; 0
    b4a2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b4a6:	9e 01       	movw	r18, r28
    b4a8:	21 5b       	subi	r18, 0xB1	; 177
    b4aa:	3d 4f       	sbci	r19, 0xFD	; 253
    b4ac:	80 e0       	ldi	r24, 0x00	; 0
    b4ae:	90 e0       	ldi	r25, 0x00	; 0
    b4b0:	a0 ea       	ldi	r26, 0xA0	; 160
    b4b2:	b1 e4       	ldi	r27, 0x41	; 65
    b4b4:	f9 01       	movw	r30, r18
    b4b6:	80 83       	st	Z, r24
    b4b8:	91 83       	std	Z+1, r25	; 0x01
    b4ba:	a2 83       	std	Z+2, r26	; 0x02
    b4bc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b4be:	8e 01       	movw	r16, r28
    b4c0:	0d 5a       	subi	r16, 0xAD	; 173
    b4c2:	1d 4f       	sbci	r17, 0xFD	; 253
    b4c4:	ce 01       	movw	r24, r28
    b4c6:	81 5b       	subi	r24, 0xB1	; 177
    b4c8:	9d 4f       	sbci	r25, 0xFD	; 253
    b4ca:	fc 01       	movw	r30, r24
    b4cc:	60 81       	ld	r22, Z
    b4ce:	71 81       	ldd	r23, Z+1	; 0x01
    b4d0:	82 81       	ldd	r24, Z+2	; 0x02
    b4d2:	93 81       	ldd	r25, Z+3	; 0x03
    b4d4:	26 e6       	ldi	r18, 0x66	; 102
    b4d6:	36 e6       	ldi	r19, 0x66	; 102
    b4d8:	46 e6       	ldi	r20, 0x66	; 102
    b4da:	55 e4       	ldi	r21, 0x45	; 69
    b4dc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b4e0:	dc 01       	movw	r26, r24
    b4e2:	cb 01       	movw	r24, r22
    b4e4:	f8 01       	movw	r30, r16
    b4e6:	80 83       	st	Z, r24
    b4e8:	91 83       	std	Z+1, r25	; 0x01
    b4ea:	a2 83       	std	Z+2, r26	; 0x02
    b4ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b4ee:	ce 01       	movw	r24, r28
    b4f0:	8d 5a       	subi	r24, 0xAD	; 173
    b4f2:	9d 4f       	sbci	r25, 0xFD	; 253
    b4f4:	11 e0       	ldi	r17, 0x01	; 1
    b4f6:	fc 01       	movw	r30, r24
    b4f8:	60 81       	ld	r22, Z
    b4fa:	71 81       	ldd	r23, Z+1	; 0x01
    b4fc:	82 81       	ldd	r24, Z+2	; 0x02
    b4fe:	93 81       	ldd	r25, Z+3	; 0x03
    b500:	20 e0       	ldi	r18, 0x00	; 0
    b502:	30 e0       	ldi	r19, 0x00	; 0
    b504:	40 e8       	ldi	r20, 0x80	; 128
    b506:	5f e3       	ldi	r21, 0x3F	; 63
    b508:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    b50c:	88 23       	and	r24, r24
    b50e:	0c f0       	brlt	.+2      	; 0xb512 <pick_drop+0x4600>
    b510:	10 e0       	ldi	r17, 0x00	; 0
    b512:	11 23       	and	r17, r17
    b514:	49 f0       	breq	.+18     	; 0xb528 <pick_drop+0x4616>
		__ticks = 1;
    b516:	ce 01       	movw	r24, r28
    b518:	89 5a       	subi	r24, 0xA9	; 169
    b51a:	9d 4f       	sbci	r25, 0xFD	; 253
    b51c:	21 e0       	ldi	r18, 0x01	; 1
    b51e:	30 e0       	ldi	r19, 0x00	; 0
    b520:	fc 01       	movw	r30, r24
    b522:	31 83       	std	Z+1, r19	; 0x01
    b524:	20 83       	st	Z, r18
    b526:	74 c0       	rjmp	.+232    	; 0xb610 <pick_drop+0x46fe>
	else if (__tmp > 65535)
    b528:	ce 01       	movw	r24, r28
    b52a:	8d 5a       	subi	r24, 0xAD	; 173
    b52c:	9d 4f       	sbci	r25, 0xFD	; 253
    b52e:	11 e0       	ldi	r17, 0x01	; 1
    b530:	fc 01       	movw	r30, r24
    b532:	60 81       	ld	r22, Z
    b534:	71 81       	ldd	r23, Z+1	; 0x01
    b536:	82 81       	ldd	r24, Z+2	; 0x02
    b538:	93 81       	ldd	r25, Z+3	; 0x03
    b53a:	20 e0       	ldi	r18, 0x00	; 0
    b53c:	3f ef       	ldi	r19, 0xFF	; 255
    b53e:	4f e7       	ldi	r20, 0x7F	; 127
    b540:	57 e4       	ldi	r21, 0x47	; 71
    b542:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    b546:	18 16       	cp	r1, r24
    b548:	0c f0       	brlt	.+2      	; 0xb54c <pick_drop+0x463a>
    b54a:	10 e0       	ldi	r17, 0x00	; 0
    b54c:	11 23       	and	r17, r17
    b54e:	09 f4       	brne	.+2      	; 0xb552 <pick_drop+0x4640>
    b550:	4d c0       	rjmp	.+154    	; 0xb5ec <pick_drop+0x46da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b552:	ce 01       	movw	r24, r28
    b554:	81 5b       	subi	r24, 0xB1	; 177
    b556:	9d 4f       	sbci	r25, 0xFD	; 253
    b558:	fc 01       	movw	r30, r24
    b55a:	60 81       	ld	r22, Z
    b55c:	71 81       	ldd	r23, Z+1	; 0x01
    b55e:	82 81       	ldd	r24, Z+2	; 0x02
    b560:	93 81       	ldd	r25, Z+3	; 0x03
    b562:	20 e0       	ldi	r18, 0x00	; 0
    b564:	30 e0       	ldi	r19, 0x00	; 0
    b566:	40 e2       	ldi	r20, 0x20	; 32
    b568:	51 e4       	ldi	r21, 0x41	; 65
    b56a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b56e:	dc 01       	movw	r26, r24
    b570:	cb 01       	movw	r24, r22
    b572:	8e 01       	movw	r16, r28
    b574:	09 5a       	subi	r16, 0xA9	; 169
    b576:	1d 4f       	sbci	r17, 0xFD	; 253
    b578:	bc 01       	movw	r22, r24
    b57a:	cd 01       	movw	r24, r26
    b57c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b580:	dc 01       	movw	r26, r24
    b582:	cb 01       	movw	r24, r22
    b584:	f8 01       	movw	r30, r16
    b586:	91 83       	std	Z+1, r25	; 0x01
    b588:	80 83       	st	Z, r24
    b58a:	27 c0       	rjmp	.+78     	; 0xb5da <pick_drop+0x46c8>
    b58c:	ce 01       	movw	r24, r28
    b58e:	87 5a       	subi	r24, 0xA7	; 167
    b590:	9d 4f       	sbci	r25, 0xFD	; 253
    b592:	20 e7       	ldi	r18, 0x70	; 112
    b594:	31 e0       	ldi	r19, 0x01	; 1
    b596:	fc 01       	movw	r30, r24
    b598:	31 83       	std	Z+1, r19	; 0x01
    b59a:	20 83       	st	Z, r18
    b59c:	ce 01       	movw	r24, r28
    b59e:	87 5a       	subi	r24, 0xA7	; 167
    b5a0:	9d 4f       	sbci	r25, 0xFD	; 253
    b5a2:	fc 01       	movw	r30, r24
    b5a4:	80 81       	ld	r24, Z
    b5a6:	91 81       	ldd	r25, Z+1	; 0x01
    b5a8:	8c 01       	movw	r16, r24
    b5aa:	c8 01       	movw	r24, r16
    b5ac:	01 97       	sbiw	r24, 0x01	; 1
    b5ae:	f1 f7       	brne	.-4      	; 0xb5ac <pick_drop+0x469a>
    b5b0:	8c 01       	movw	r16, r24
    b5b2:	ce 01       	movw	r24, r28
    b5b4:	87 5a       	subi	r24, 0xA7	; 167
    b5b6:	9d 4f       	sbci	r25, 0xFD	; 253
    b5b8:	fc 01       	movw	r30, r24
    b5ba:	11 83       	std	Z+1, r17	; 0x01
    b5bc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b5be:	ce 01       	movw	r24, r28
    b5c0:	89 5a       	subi	r24, 0xA9	; 169
    b5c2:	9d 4f       	sbci	r25, 0xFD	; 253
    b5c4:	9e 01       	movw	r18, r28
    b5c6:	29 5a       	subi	r18, 0xA9	; 169
    b5c8:	3d 4f       	sbci	r19, 0xFD	; 253
    b5ca:	f9 01       	movw	r30, r18
    b5cc:	20 81       	ld	r18, Z
    b5ce:	31 81       	ldd	r19, Z+1	; 0x01
    b5d0:	21 50       	subi	r18, 0x01	; 1
    b5d2:	30 40       	sbci	r19, 0x00	; 0
    b5d4:	fc 01       	movw	r30, r24
    b5d6:	31 83       	std	Z+1, r19	; 0x01
    b5d8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b5da:	ce 01       	movw	r24, r28
    b5dc:	89 5a       	subi	r24, 0xA9	; 169
    b5de:	9d 4f       	sbci	r25, 0xFD	; 253
    b5e0:	fc 01       	movw	r30, r24
    b5e2:	80 81       	ld	r24, Z
    b5e4:	91 81       	ldd	r25, Z+1	; 0x01
    b5e6:	00 97       	sbiw	r24, 0x00	; 0
    b5e8:	89 f6       	brne	.-94     	; 0xb58c <pick_drop+0x467a>
    b5ea:	2f c0       	rjmp	.+94     	; 0xb64a <pick_drop+0x4738>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b5ec:	8e 01       	movw	r16, r28
    b5ee:	09 5a       	subi	r16, 0xA9	; 169
    b5f0:	1d 4f       	sbci	r17, 0xFD	; 253
    b5f2:	ce 01       	movw	r24, r28
    b5f4:	8d 5a       	subi	r24, 0xAD	; 173
    b5f6:	9d 4f       	sbci	r25, 0xFD	; 253
    b5f8:	fc 01       	movw	r30, r24
    b5fa:	60 81       	ld	r22, Z
    b5fc:	71 81       	ldd	r23, Z+1	; 0x01
    b5fe:	82 81       	ldd	r24, Z+2	; 0x02
    b600:	93 81       	ldd	r25, Z+3	; 0x03
    b602:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b606:	dc 01       	movw	r26, r24
    b608:	cb 01       	movw	r24, r22
    b60a:	f8 01       	movw	r30, r16
    b60c:	91 83       	std	Z+1, r25	; 0x01
    b60e:	80 83       	st	Z, r24
    b610:	ce 01       	movw	r24, r28
    b612:	85 5a       	subi	r24, 0xA5	; 165
    b614:	9d 4f       	sbci	r25, 0xFD	; 253
    b616:	9e 01       	movw	r18, r28
    b618:	29 5a       	subi	r18, 0xA9	; 169
    b61a:	3d 4f       	sbci	r19, 0xFD	; 253
    b61c:	f9 01       	movw	r30, r18
    b61e:	20 81       	ld	r18, Z
    b620:	31 81       	ldd	r19, Z+1	; 0x01
    b622:	fc 01       	movw	r30, r24
    b624:	31 83       	std	Z+1, r19	; 0x01
    b626:	20 83       	st	Z, r18
    b628:	ce 01       	movw	r24, r28
    b62a:	85 5a       	subi	r24, 0xA5	; 165
    b62c:	9d 4f       	sbci	r25, 0xFD	; 253
    b62e:	fc 01       	movw	r30, r24
    b630:	80 81       	ld	r24, Z
    b632:	91 81       	ldd	r25, Z+1	; 0x01
    b634:	8c 01       	movw	r16, r24
    b636:	c8 01       	movw	r24, r16
    b638:	01 97       	sbiw	r24, 0x01	; 1
    b63a:	f1 f7       	brne	.-4      	; 0xb638 <pick_drop+0x4726>
    b63c:	8c 01       	movw	r16, r24
    b63e:	ce 01       	movw	r24, r28
    b640:	85 5a       	subi	r24, 0xA5	; 165
    b642:	9d 4f       	sbci	r25, 0xFD	; 253
    b644:	fc 01       	movw	r30, r24
    b646:	11 83       	std	Z+1, r17	; 0x01
    b648:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    b64a:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    b64e:	9e 01       	movw	r18, r28
    b650:	23 5a       	subi	r18, 0xA3	; 163
    b652:	3d 4f       	sbci	r19, 0xFD	; 253
    b654:	80 e0       	ldi	r24, 0x00	; 0
    b656:	90 e0       	ldi	r25, 0x00	; 0
    b658:	a0 e2       	ldi	r26, 0x20	; 32
    b65a:	b1 e4       	ldi	r27, 0x41	; 65
    b65c:	f9 01       	movw	r30, r18
    b65e:	80 83       	st	Z, r24
    b660:	91 83       	std	Z+1, r25	; 0x01
    b662:	a2 83       	std	Z+2, r26	; 0x02
    b664:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b666:	8e 01       	movw	r16, r28
    b668:	0f 59       	subi	r16, 0x9F	; 159
    b66a:	1d 4f       	sbci	r17, 0xFD	; 253
    b66c:	ce 01       	movw	r24, r28
    b66e:	83 5a       	subi	r24, 0xA3	; 163
    b670:	9d 4f       	sbci	r25, 0xFD	; 253
    b672:	fc 01       	movw	r30, r24
    b674:	60 81       	ld	r22, Z
    b676:	71 81       	ldd	r23, Z+1	; 0x01
    b678:	82 81       	ldd	r24, Z+2	; 0x02
    b67a:	93 81       	ldd	r25, Z+3	; 0x03
    b67c:	26 e6       	ldi	r18, 0x66	; 102
    b67e:	36 e6       	ldi	r19, 0x66	; 102
    b680:	46 e6       	ldi	r20, 0x66	; 102
    b682:	55 e4       	ldi	r21, 0x45	; 69
    b684:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b688:	dc 01       	movw	r26, r24
    b68a:	cb 01       	movw	r24, r22
    b68c:	f8 01       	movw	r30, r16
    b68e:	80 83       	st	Z, r24
    b690:	91 83       	std	Z+1, r25	; 0x01
    b692:	a2 83       	std	Z+2, r26	; 0x02
    b694:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b696:	ce 01       	movw	r24, r28
    b698:	8f 59       	subi	r24, 0x9F	; 159
    b69a:	9d 4f       	sbci	r25, 0xFD	; 253
    b69c:	11 e0       	ldi	r17, 0x01	; 1
    b69e:	fc 01       	movw	r30, r24
    b6a0:	60 81       	ld	r22, Z
    b6a2:	71 81       	ldd	r23, Z+1	; 0x01
    b6a4:	82 81       	ldd	r24, Z+2	; 0x02
    b6a6:	93 81       	ldd	r25, Z+3	; 0x03
    b6a8:	20 e0       	ldi	r18, 0x00	; 0
    b6aa:	30 e0       	ldi	r19, 0x00	; 0
    b6ac:	40 e8       	ldi	r20, 0x80	; 128
    b6ae:	5f e3       	ldi	r21, 0x3F	; 63
    b6b0:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    b6b4:	88 23       	and	r24, r24
    b6b6:	0c f0       	brlt	.+2      	; 0xb6ba <pick_drop+0x47a8>
    b6b8:	10 e0       	ldi	r17, 0x00	; 0
    b6ba:	11 23       	and	r17, r17
    b6bc:	49 f0       	breq	.+18     	; 0xb6d0 <pick_drop+0x47be>
		__ticks = 1;
    b6be:	ce 01       	movw	r24, r28
    b6c0:	8b 59       	subi	r24, 0x9B	; 155
    b6c2:	9d 4f       	sbci	r25, 0xFD	; 253
    b6c4:	21 e0       	ldi	r18, 0x01	; 1
    b6c6:	30 e0       	ldi	r19, 0x00	; 0
    b6c8:	fc 01       	movw	r30, r24
    b6ca:	31 83       	std	Z+1, r19	; 0x01
    b6cc:	20 83       	st	Z, r18
    b6ce:	74 c0       	rjmp	.+232    	; 0xb7b8 <pick_drop+0x48a6>
	else if (__tmp > 65535)
    b6d0:	ce 01       	movw	r24, r28
    b6d2:	8f 59       	subi	r24, 0x9F	; 159
    b6d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b6d6:	11 e0       	ldi	r17, 0x01	; 1
    b6d8:	fc 01       	movw	r30, r24
    b6da:	60 81       	ld	r22, Z
    b6dc:	71 81       	ldd	r23, Z+1	; 0x01
    b6de:	82 81       	ldd	r24, Z+2	; 0x02
    b6e0:	93 81       	ldd	r25, Z+3	; 0x03
    b6e2:	20 e0       	ldi	r18, 0x00	; 0
    b6e4:	3f ef       	ldi	r19, 0xFF	; 255
    b6e6:	4f e7       	ldi	r20, 0x7F	; 127
    b6e8:	57 e4       	ldi	r21, 0x47	; 71
    b6ea:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    b6ee:	18 16       	cp	r1, r24
    b6f0:	0c f0       	brlt	.+2      	; 0xb6f4 <pick_drop+0x47e2>
    b6f2:	10 e0       	ldi	r17, 0x00	; 0
    b6f4:	11 23       	and	r17, r17
    b6f6:	09 f4       	brne	.+2      	; 0xb6fa <pick_drop+0x47e8>
    b6f8:	4d c0       	rjmp	.+154    	; 0xb794 <pick_drop+0x4882>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b6fa:	ce 01       	movw	r24, r28
    b6fc:	83 5a       	subi	r24, 0xA3	; 163
    b6fe:	9d 4f       	sbci	r25, 0xFD	; 253
    b700:	fc 01       	movw	r30, r24
    b702:	60 81       	ld	r22, Z
    b704:	71 81       	ldd	r23, Z+1	; 0x01
    b706:	82 81       	ldd	r24, Z+2	; 0x02
    b708:	93 81       	ldd	r25, Z+3	; 0x03
    b70a:	20 e0       	ldi	r18, 0x00	; 0
    b70c:	30 e0       	ldi	r19, 0x00	; 0
    b70e:	40 e2       	ldi	r20, 0x20	; 32
    b710:	51 e4       	ldi	r21, 0x41	; 65
    b712:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b716:	dc 01       	movw	r26, r24
    b718:	cb 01       	movw	r24, r22
    b71a:	8e 01       	movw	r16, r28
    b71c:	0b 59       	subi	r16, 0x9B	; 155
    b71e:	1d 4f       	sbci	r17, 0xFD	; 253
    b720:	bc 01       	movw	r22, r24
    b722:	cd 01       	movw	r24, r26
    b724:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b728:	dc 01       	movw	r26, r24
    b72a:	cb 01       	movw	r24, r22
    b72c:	f8 01       	movw	r30, r16
    b72e:	91 83       	std	Z+1, r25	; 0x01
    b730:	80 83       	st	Z, r24
    b732:	27 c0       	rjmp	.+78     	; 0xb782 <pick_drop+0x4870>
    b734:	ce 01       	movw	r24, r28
    b736:	89 59       	subi	r24, 0x99	; 153
    b738:	9d 4f       	sbci	r25, 0xFD	; 253
    b73a:	20 e7       	ldi	r18, 0x70	; 112
    b73c:	31 e0       	ldi	r19, 0x01	; 1
    b73e:	fc 01       	movw	r30, r24
    b740:	31 83       	std	Z+1, r19	; 0x01
    b742:	20 83       	st	Z, r18
    b744:	ce 01       	movw	r24, r28
    b746:	89 59       	subi	r24, 0x99	; 153
    b748:	9d 4f       	sbci	r25, 0xFD	; 253
    b74a:	fc 01       	movw	r30, r24
    b74c:	80 81       	ld	r24, Z
    b74e:	91 81       	ldd	r25, Z+1	; 0x01
    b750:	8c 01       	movw	r16, r24
    b752:	c8 01       	movw	r24, r16
    b754:	01 97       	sbiw	r24, 0x01	; 1
    b756:	f1 f7       	brne	.-4      	; 0xb754 <pick_drop+0x4842>
    b758:	8c 01       	movw	r16, r24
    b75a:	ce 01       	movw	r24, r28
    b75c:	89 59       	subi	r24, 0x99	; 153
    b75e:	9d 4f       	sbci	r25, 0xFD	; 253
    b760:	fc 01       	movw	r30, r24
    b762:	11 83       	std	Z+1, r17	; 0x01
    b764:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b766:	ce 01       	movw	r24, r28
    b768:	8b 59       	subi	r24, 0x9B	; 155
    b76a:	9d 4f       	sbci	r25, 0xFD	; 253
    b76c:	9e 01       	movw	r18, r28
    b76e:	2b 59       	subi	r18, 0x9B	; 155
    b770:	3d 4f       	sbci	r19, 0xFD	; 253
    b772:	f9 01       	movw	r30, r18
    b774:	20 81       	ld	r18, Z
    b776:	31 81       	ldd	r19, Z+1	; 0x01
    b778:	21 50       	subi	r18, 0x01	; 1
    b77a:	30 40       	sbci	r19, 0x00	; 0
    b77c:	fc 01       	movw	r30, r24
    b77e:	31 83       	std	Z+1, r19	; 0x01
    b780:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b782:	ce 01       	movw	r24, r28
    b784:	8b 59       	subi	r24, 0x9B	; 155
    b786:	9d 4f       	sbci	r25, 0xFD	; 253
    b788:	fc 01       	movw	r30, r24
    b78a:	80 81       	ld	r24, Z
    b78c:	91 81       	ldd	r25, Z+1	; 0x01
    b78e:	00 97       	sbiw	r24, 0x00	; 0
    b790:	89 f6       	brne	.-94     	; 0xb734 <pick_drop+0x4822>
    b792:	2f c0       	rjmp	.+94     	; 0xb7f2 <pick_drop+0x48e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b794:	8e 01       	movw	r16, r28
    b796:	0b 59       	subi	r16, 0x9B	; 155
    b798:	1d 4f       	sbci	r17, 0xFD	; 253
    b79a:	ce 01       	movw	r24, r28
    b79c:	8f 59       	subi	r24, 0x9F	; 159
    b79e:	9d 4f       	sbci	r25, 0xFD	; 253
    b7a0:	fc 01       	movw	r30, r24
    b7a2:	60 81       	ld	r22, Z
    b7a4:	71 81       	ldd	r23, Z+1	; 0x01
    b7a6:	82 81       	ldd	r24, Z+2	; 0x02
    b7a8:	93 81       	ldd	r25, Z+3	; 0x03
    b7aa:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b7ae:	dc 01       	movw	r26, r24
    b7b0:	cb 01       	movw	r24, r22
    b7b2:	f8 01       	movw	r30, r16
    b7b4:	91 83       	std	Z+1, r25	; 0x01
    b7b6:	80 83       	st	Z, r24
    b7b8:	ce 01       	movw	r24, r28
    b7ba:	87 59       	subi	r24, 0x97	; 151
    b7bc:	9d 4f       	sbci	r25, 0xFD	; 253
    b7be:	9e 01       	movw	r18, r28
    b7c0:	2b 59       	subi	r18, 0x9B	; 155
    b7c2:	3d 4f       	sbci	r19, 0xFD	; 253
    b7c4:	f9 01       	movw	r30, r18
    b7c6:	20 81       	ld	r18, Z
    b7c8:	31 81       	ldd	r19, Z+1	; 0x01
    b7ca:	fc 01       	movw	r30, r24
    b7cc:	31 83       	std	Z+1, r19	; 0x01
    b7ce:	20 83       	st	Z, r18
    b7d0:	ce 01       	movw	r24, r28
    b7d2:	87 59       	subi	r24, 0x97	; 151
    b7d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b7d6:	fc 01       	movw	r30, r24
    b7d8:	80 81       	ld	r24, Z
    b7da:	91 81       	ldd	r25, Z+1	; 0x01
    b7dc:	8c 01       	movw	r16, r24
    b7de:	c8 01       	movw	r24, r16
    b7e0:	01 97       	sbiw	r24, 0x01	; 1
    b7e2:	f1 f7       	brne	.-4      	; 0xb7e0 <pick_drop+0x48ce>
    b7e4:	8c 01       	movw	r16, r24
    b7e6:	ce 01       	movw	r24, r28
    b7e8:	87 59       	subi	r24, 0x97	; 151
    b7ea:	9d 4f       	sbci	r25, 0xFD	; 253
    b7ec:	fc 01       	movw	r30, r24
    b7ee:	11 83       	std	Z+1, r17	; 0x01
    b7f0:	00 83       	st	Z, r16
			_delay_ms(10);
			back_mm(20);
    b7f2:	84 e1       	ldi	r24, 0x14	; 20
    b7f4:	90 e0       	ldi	r25, 0x00	; 0
    b7f6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    b7fa:	0c 94 2c 66 	jmp	0xcc58	; 0xcc58 <pick_drop+0x5d46>
		} 
		else{
			forward_mm(35);
    b7fe:	83 e2       	ldi	r24, 0x23	; 35
    b800:	90 e0       	ldi	r25, 0x00	; 0
    b802:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b806:	9e 01       	movw	r18, r28
    b808:	25 59       	subi	r18, 0x95	; 149
    b80a:	3d 4f       	sbci	r19, 0xFD	; 253
    b80c:	80 e0       	ldi	r24, 0x00	; 0
    b80e:	90 e0       	ldi	r25, 0x00	; 0
    b810:	a0 ea       	ldi	r26, 0xA0	; 160
    b812:	b1 e4       	ldi	r27, 0x41	; 65
    b814:	f9 01       	movw	r30, r18
    b816:	80 83       	st	Z, r24
    b818:	91 83       	std	Z+1, r25	; 0x01
    b81a:	a2 83       	std	Z+2, r26	; 0x02
    b81c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b81e:	8e 01       	movw	r16, r28
    b820:	01 59       	subi	r16, 0x91	; 145
    b822:	1d 4f       	sbci	r17, 0xFD	; 253
    b824:	ce 01       	movw	r24, r28
    b826:	85 59       	subi	r24, 0x95	; 149
    b828:	9d 4f       	sbci	r25, 0xFD	; 253
    b82a:	fc 01       	movw	r30, r24
    b82c:	60 81       	ld	r22, Z
    b82e:	71 81       	ldd	r23, Z+1	; 0x01
    b830:	82 81       	ldd	r24, Z+2	; 0x02
    b832:	93 81       	ldd	r25, Z+3	; 0x03
    b834:	26 e6       	ldi	r18, 0x66	; 102
    b836:	36 e6       	ldi	r19, 0x66	; 102
    b838:	46 e6       	ldi	r20, 0x66	; 102
    b83a:	55 e4       	ldi	r21, 0x45	; 69
    b83c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b840:	dc 01       	movw	r26, r24
    b842:	cb 01       	movw	r24, r22
    b844:	f8 01       	movw	r30, r16
    b846:	80 83       	st	Z, r24
    b848:	91 83       	std	Z+1, r25	; 0x01
    b84a:	a2 83       	std	Z+2, r26	; 0x02
    b84c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b84e:	ce 01       	movw	r24, r28
    b850:	81 59       	subi	r24, 0x91	; 145
    b852:	9d 4f       	sbci	r25, 0xFD	; 253
    b854:	11 e0       	ldi	r17, 0x01	; 1
    b856:	fc 01       	movw	r30, r24
    b858:	60 81       	ld	r22, Z
    b85a:	71 81       	ldd	r23, Z+1	; 0x01
    b85c:	82 81       	ldd	r24, Z+2	; 0x02
    b85e:	93 81       	ldd	r25, Z+3	; 0x03
    b860:	20 e0       	ldi	r18, 0x00	; 0
    b862:	30 e0       	ldi	r19, 0x00	; 0
    b864:	40 e8       	ldi	r20, 0x80	; 128
    b866:	5f e3       	ldi	r21, 0x3F	; 63
    b868:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    b86c:	88 23       	and	r24, r24
    b86e:	0c f0       	brlt	.+2      	; 0xb872 <pick_drop+0x4960>
    b870:	10 e0       	ldi	r17, 0x00	; 0
    b872:	11 23       	and	r17, r17
    b874:	49 f0       	breq	.+18     	; 0xb888 <pick_drop+0x4976>
		__ticks = 1;
    b876:	ce 01       	movw	r24, r28
    b878:	8d 58       	subi	r24, 0x8D	; 141
    b87a:	9d 4f       	sbci	r25, 0xFD	; 253
    b87c:	21 e0       	ldi	r18, 0x01	; 1
    b87e:	30 e0       	ldi	r19, 0x00	; 0
    b880:	fc 01       	movw	r30, r24
    b882:	31 83       	std	Z+1, r19	; 0x01
    b884:	20 83       	st	Z, r18
    b886:	74 c0       	rjmp	.+232    	; 0xb970 <pick_drop+0x4a5e>
	else if (__tmp > 65535)
    b888:	ce 01       	movw	r24, r28
    b88a:	81 59       	subi	r24, 0x91	; 145
    b88c:	9d 4f       	sbci	r25, 0xFD	; 253
    b88e:	11 e0       	ldi	r17, 0x01	; 1
    b890:	fc 01       	movw	r30, r24
    b892:	60 81       	ld	r22, Z
    b894:	71 81       	ldd	r23, Z+1	; 0x01
    b896:	82 81       	ldd	r24, Z+2	; 0x02
    b898:	93 81       	ldd	r25, Z+3	; 0x03
    b89a:	20 e0       	ldi	r18, 0x00	; 0
    b89c:	3f ef       	ldi	r19, 0xFF	; 255
    b89e:	4f e7       	ldi	r20, 0x7F	; 127
    b8a0:	57 e4       	ldi	r21, 0x47	; 71
    b8a2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    b8a6:	18 16       	cp	r1, r24
    b8a8:	0c f0       	brlt	.+2      	; 0xb8ac <pick_drop+0x499a>
    b8aa:	10 e0       	ldi	r17, 0x00	; 0
    b8ac:	11 23       	and	r17, r17
    b8ae:	09 f4       	brne	.+2      	; 0xb8b2 <pick_drop+0x49a0>
    b8b0:	4d c0       	rjmp	.+154    	; 0xb94c <pick_drop+0x4a3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b8b2:	ce 01       	movw	r24, r28
    b8b4:	85 59       	subi	r24, 0x95	; 149
    b8b6:	9d 4f       	sbci	r25, 0xFD	; 253
    b8b8:	fc 01       	movw	r30, r24
    b8ba:	60 81       	ld	r22, Z
    b8bc:	71 81       	ldd	r23, Z+1	; 0x01
    b8be:	82 81       	ldd	r24, Z+2	; 0x02
    b8c0:	93 81       	ldd	r25, Z+3	; 0x03
    b8c2:	20 e0       	ldi	r18, 0x00	; 0
    b8c4:	30 e0       	ldi	r19, 0x00	; 0
    b8c6:	40 e2       	ldi	r20, 0x20	; 32
    b8c8:	51 e4       	ldi	r21, 0x41	; 65
    b8ca:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b8ce:	dc 01       	movw	r26, r24
    b8d0:	cb 01       	movw	r24, r22
    b8d2:	8e 01       	movw	r16, r28
    b8d4:	0d 58       	subi	r16, 0x8D	; 141
    b8d6:	1d 4f       	sbci	r17, 0xFD	; 253
    b8d8:	bc 01       	movw	r22, r24
    b8da:	cd 01       	movw	r24, r26
    b8dc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b8e0:	dc 01       	movw	r26, r24
    b8e2:	cb 01       	movw	r24, r22
    b8e4:	f8 01       	movw	r30, r16
    b8e6:	91 83       	std	Z+1, r25	; 0x01
    b8e8:	80 83       	st	Z, r24
    b8ea:	27 c0       	rjmp	.+78     	; 0xb93a <pick_drop+0x4a28>
    b8ec:	ce 01       	movw	r24, r28
    b8ee:	8b 58       	subi	r24, 0x8B	; 139
    b8f0:	9d 4f       	sbci	r25, 0xFD	; 253
    b8f2:	20 e7       	ldi	r18, 0x70	; 112
    b8f4:	31 e0       	ldi	r19, 0x01	; 1
    b8f6:	fc 01       	movw	r30, r24
    b8f8:	31 83       	std	Z+1, r19	; 0x01
    b8fa:	20 83       	st	Z, r18
    b8fc:	ce 01       	movw	r24, r28
    b8fe:	8b 58       	subi	r24, 0x8B	; 139
    b900:	9d 4f       	sbci	r25, 0xFD	; 253
    b902:	fc 01       	movw	r30, r24
    b904:	80 81       	ld	r24, Z
    b906:	91 81       	ldd	r25, Z+1	; 0x01
    b908:	8c 01       	movw	r16, r24
    b90a:	c8 01       	movw	r24, r16
    b90c:	01 97       	sbiw	r24, 0x01	; 1
    b90e:	f1 f7       	brne	.-4      	; 0xb90c <pick_drop+0x49fa>
    b910:	8c 01       	movw	r16, r24
    b912:	ce 01       	movw	r24, r28
    b914:	8b 58       	subi	r24, 0x8B	; 139
    b916:	9d 4f       	sbci	r25, 0xFD	; 253
    b918:	fc 01       	movw	r30, r24
    b91a:	11 83       	std	Z+1, r17	; 0x01
    b91c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b91e:	ce 01       	movw	r24, r28
    b920:	8d 58       	subi	r24, 0x8D	; 141
    b922:	9d 4f       	sbci	r25, 0xFD	; 253
    b924:	9e 01       	movw	r18, r28
    b926:	2d 58       	subi	r18, 0x8D	; 141
    b928:	3d 4f       	sbci	r19, 0xFD	; 253
    b92a:	f9 01       	movw	r30, r18
    b92c:	20 81       	ld	r18, Z
    b92e:	31 81       	ldd	r19, Z+1	; 0x01
    b930:	21 50       	subi	r18, 0x01	; 1
    b932:	30 40       	sbci	r19, 0x00	; 0
    b934:	fc 01       	movw	r30, r24
    b936:	31 83       	std	Z+1, r19	; 0x01
    b938:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b93a:	ce 01       	movw	r24, r28
    b93c:	8d 58       	subi	r24, 0x8D	; 141
    b93e:	9d 4f       	sbci	r25, 0xFD	; 253
    b940:	fc 01       	movw	r30, r24
    b942:	80 81       	ld	r24, Z
    b944:	91 81       	ldd	r25, Z+1	; 0x01
    b946:	00 97       	sbiw	r24, 0x00	; 0
    b948:	89 f6       	brne	.-94     	; 0xb8ec <pick_drop+0x49da>
    b94a:	2f c0       	rjmp	.+94     	; 0xb9aa <pick_drop+0x4a98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b94c:	8e 01       	movw	r16, r28
    b94e:	0d 58       	subi	r16, 0x8D	; 141
    b950:	1d 4f       	sbci	r17, 0xFD	; 253
    b952:	ce 01       	movw	r24, r28
    b954:	81 59       	subi	r24, 0x91	; 145
    b956:	9d 4f       	sbci	r25, 0xFD	; 253
    b958:	fc 01       	movw	r30, r24
    b95a:	60 81       	ld	r22, Z
    b95c:	71 81       	ldd	r23, Z+1	; 0x01
    b95e:	82 81       	ldd	r24, Z+2	; 0x02
    b960:	93 81       	ldd	r25, Z+3	; 0x03
    b962:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    b966:	dc 01       	movw	r26, r24
    b968:	cb 01       	movw	r24, r22
    b96a:	f8 01       	movw	r30, r16
    b96c:	91 83       	std	Z+1, r25	; 0x01
    b96e:	80 83       	st	Z, r24
    b970:	ce 01       	movw	r24, r28
    b972:	89 58       	subi	r24, 0x89	; 137
    b974:	9d 4f       	sbci	r25, 0xFD	; 253
    b976:	9e 01       	movw	r18, r28
    b978:	2d 58       	subi	r18, 0x8D	; 141
    b97a:	3d 4f       	sbci	r19, 0xFD	; 253
    b97c:	f9 01       	movw	r30, r18
    b97e:	20 81       	ld	r18, Z
    b980:	31 81       	ldd	r19, Z+1	; 0x01
    b982:	fc 01       	movw	r30, r24
    b984:	31 83       	std	Z+1, r19	; 0x01
    b986:	20 83       	st	Z, r18
    b988:	ce 01       	movw	r24, r28
    b98a:	89 58       	subi	r24, 0x89	; 137
    b98c:	9d 4f       	sbci	r25, 0xFD	; 253
    b98e:	fc 01       	movw	r30, r24
    b990:	80 81       	ld	r24, Z
    b992:	91 81       	ldd	r25, Z+1	; 0x01
    b994:	8c 01       	movw	r16, r24
    b996:	c8 01       	movw	r24, r16
    b998:	01 97       	sbiw	r24, 0x01	; 1
    b99a:	f1 f7       	brne	.-4      	; 0xb998 <pick_drop+0x4a86>
    b99c:	8c 01       	movw	r16, r24
    b99e:	ce 01       	movw	r24, r28
    b9a0:	89 58       	subi	r24, 0x89	; 137
    b9a2:	9d 4f       	sbci	r25, 0xFD	; 253
    b9a4:	fc 01       	movw	r30, r24
    b9a6:	11 83       	std	Z+1, r17	; 0x01
    b9a8:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    b9aa:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
			front();
    b9ae:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    b9b2:	9e 01       	movw	r18, r28
    b9b4:	27 58       	subi	r18, 0x87	; 135
    b9b6:	3d 4f       	sbci	r19, 0xFD	; 253
    b9b8:	80 e0       	ldi	r24, 0x00	; 0
    b9ba:	90 e0       	ldi	r25, 0x00	; 0
    b9bc:	a8 ec       	ldi	r26, 0xC8	; 200
    b9be:	b2 e4       	ldi	r27, 0x42	; 66
    b9c0:	f9 01       	movw	r30, r18
    b9c2:	80 83       	st	Z, r24
    b9c4:	91 83       	std	Z+1, r25	; 0x01
    b9c6:	a2 83       	std	Z+2, r26	; 0x02
    b9c8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b9ca:	8e 01       	movw	r16, r28
    b9cc:	03 58       	subi	r16, 0x83	; 131
    b9ce:	1d 4f       	sbci	r17, 0xFD	; 253
    b9d0:	ce 01       	movw	r24, r28
    b9d2:	87 58       	subi	r24, 0x87	; 135
    b9d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b9d6:	fc 01       	movw	r30, r24
    b9d8:	60 81       	ld	r22, Z
    b9da:	71 81       	ldd	r23, Z+1	; 0x01
    b9dc:	82 81       	ldd	r24, Z+2	; 0x02
    b9de:	93 81       	ldd	r25, Z+3	; 0x03
    b9e0:	26 e6       	ldi	r18, 0x66	; 102
    b9e2:	36 e6       	ldi	r19, 0x66	; 102
    b9e4:	46 e6       	ldi	r20, 0x66	; 102
    b9e6:	55 e4       	ldi	r21, 0x45	; 69
    b9e8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    b9ec:	dc 01       	movw	r26, r24
    b9ee:	cb 01       	movw	r24, r22
    b9f0:	f8 01       	movw	r30, r16
    b9f2:	80 83       	st	Z, r24
    b9f4:	91 83       	std	Z+1, r25	; 0x01
    b9f6:	a2 83       	std	Z+2, r26	; 0x02
    b9f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b9fa:	ce 01       	movw	r24, r28
    b9fc:	83 58       	subi	r24, 0x83	; 131
    b9fe:	9d 4f       	sbci	r25, 0xFD	; 253
    ba00:	11 e0       	ldi	r17, 0x01	; 1
    ba02:	fc 01       	movw	r30, r24
    ba04:	60 81       	ld	r22, Z
    ba06:	71 81       	ldd	r23, Z+1	; 0x01
    ba08:	82 81       	ldd	r24, Z+2	; 0x02
    ba0a:	93 81       	ldd	r25, Z+3	; 0x03
    ba0c:	20 e0       	ldi	r18, 0x00	; 0
    ba0e:	30 e0       	ldi	r19, 0x00	; 0
    ba10:	40 e8       	ldi	r20, 0x80	; 128
    ba12:	5f e3       	ldi	r21, 0x3F	; 63
    ba14:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ba18:	88 23       	and	r24, r24
    ba1a:	0c f0       	brlt	.+2      	; 0xba1e <pick_drop+0x4b0c>
    ba1c:	10 e0       	ldi	r17, 0x00	; 0
    ba1e:	11 23       	and	r17, r17
    ba20:	49 f0       	breq	.+18     	; 0xba34 <pick_drop+0x4b22>
		__ticks = 1;
    ba22:	ce 01       	movw	r24, r28
    ba24:	8f 57       	subi	r24, 0x7F	; 127
    ba26:	9d 4f       	sbci	r25, 0xFD	; 253
    ba28:	21 e0       	ldi	r18, 0x01	; 1
    ba2a:	30 e0       	ldi	r19, 0x00	; 0
    ba2c:	fc 01       	movw	r30, r24
    ba2e:	31 83       	std	Z+1, r19	; 0x01
    ba30:	20 83       	st	Z, r18
    ba32:	74 c0       	rjmp	.+232    	; 0xbb1c <pick_drop+0x4c0a>
	else if (__tmp > 65535)
    ba34:	ce 01       	movw	r24, r28
    ba36:	83 58       	subi	r24, 0x83	; 131
    ba38:	9d 4f       	sbci	r25, 0xFD	; 253
    ba3a:	11 e0       	ldi	r17, 0x01	; 1
    ba3c:	fc 01       	movw	r30, r24
    ba3e:	60 81       	ld	r22, Z
    ba40:	71 81       	ldd	r23, Z+1	; 0x01
    ba42:	82 81       	ldd	r24, Z+2	; 0x02
    ba44:	93 81       	ldd	r25, Z+3	; 0x03
    ba46:	20 e0       	ldi	r18, 0x00	; 0
    ba48:	3f ef       	ldi	r19, 0xFF	; 255
    ba4a:	4f e7       	ldi	r20, 0x7F	; 127
    ba4c:	57 e4       	ldi	r21, 0x47	; 71
    ba4e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    ba52:	18 16       	cp	r1, r24
    ba54:	0c f0       	brlt	.+2      	; 0xba58 <pick_drop+0x4b46>
    ba56:	10 e0       	ldi	r17, 0x00	; 0
    ba58:	11 23       	and	r17, r17
    ba5a:	09 f4       	brne	.+2      	; 0xba5e <pick_drop+0x4b4c>
    ba5c:	4d c0       	rjmp	.+154    	; 0xbaf8 <pick_drop+0x4be6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ba5e:	ce 01       	movw	r24, r28
    ba60:	87 58       	subi	r24, 0x87	; 135
    ba62:	9d 4f       	sbci	r25, 0xFD	; 253
    ba64:	fc 01       	movw	r30, r24
    ba66:	60 81       	ld	r22, Z
    ba68:	71 81       	ldd	r23, Z+1	; 0x01
    ba6a:	82 81       	ldd	r24, Z+2	; 0x02
    ba6c:	93 81       	ldd	r25, Z+3	; 0x03
    ba6e:	20 e0       	ldi	r18, 0x00	; 0
    ba70:	30 e0       	ldi	r19, 0x00	; 0
    ba72:	40 e2       	ldi	r20, 0x20	; 32
    ba74:	51 e4       	ldi	r21, 0x41	; 65
    ba76:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ba7a:	dc 01       	movw	r26, r24
    ba7c:	cb 01       	movw	r24, r22
    ba7e:	8e 01       	movw	r16, r28
    ba80:	0f 57       	subi	r16, 0x7F	; 127
    ba82:	1d 4f       	sbci	r17, 0xFD	; 253
    ba84:	bc 01       	movw	r22, r24
    ba86:	cd 01       	movw	r24, r26
    ba88:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ba8c:	dc 01       	movw	r26, r24
    ba8e:	cb 01       	movw	r24, r22
    ba90:	f8 01       	movw	r30, r16
    ba92:	91 83       	std	Z+1, r25	; 0x01
    ba94:	80 83       	st	Z, r24
    ba96:	27 c0       	rjmp	.+78     	; 0xbae6 <pick_drop+0x4bd4>
    ba98:	ce 01       	movw	r24, r28
    ba9a:	8d 57       	subi	r24, 0x7D	; 125
    ba9c:	9d 4f       	sbci	r25, 0xFD	; 253
    ba9e:	20 e7       	ldi	r18, 0x70	; 112
    baa0:	31 e0       	ldi	r19, 0x01	; 1
    baa2:	fc 01       	movw	r30, r24
    baa4:	31 83       	std	Z+1, r19	; 0x01
    baa6:	20 83       	st	Z, r18
    baa8:	ce 01       	movw	r24, r28
    baaa:	8d 57       	subi	r24, 0x7D	; 125
    baac:	9d 4f       	sbci	r25, 0xFD	; 253
    baae:	fc 01       	movw	r30, r24
    bab0:	80 81       	ld	r24, Z
    bab2:	91 81       	ldd	r25, Z+1	; 0x01
    bab4:	8c 01       	movw	r16, r24
    bab6:	c8 01       	movw	r24, r16
    bab8:	01 97       	sbiw	r24, 0x01	; 1
    baba:	f1 f7       	brne	.-4      	; 0xbab8 <pick_drop+0x4ba6>
    babc:	8c 01       	movw	r16, r24
    babe:	ce 01       	movw	r24, r28
    bac0:	8d 57       	subi	r24, 0x7D	; 125
    bac2:	9d 4f       	sbci	r25, 0xFD	; 253
    bac4:	fc 01       	movw	r30, r24
    bac6:	11 83       	std	Z+1, r17	; 0x01
    bac8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    baca:	ce 01       	movw	r24, r28
    bacc:	8f 57       	subi	r24, 0x7F	; 127
    bace:	9d 4f       	sbci	r25, 0xFD	; 253
    bad0:	9e 01       	movw	r18, r28
    bad2:	2f 57       	subi	r18, 0x7F	; 127
    bad4:	3d 4f       	sbci	r19, 0xFD	; 253
    bad6:	f9 01       	movw	r30, r18
    bad8:	20 81       	ld	r18, Z
    bada:	31 81       	ldd	r19, Z+1	; 0x01
    badc:	21 50       	subi	r18, 0x01	; 1
    bade:	30 40       	sbci	r19, 0x00	; 0
    bae0:	fc 01       	movw	r30, r24
    bae2:	31 83       	std	Z+1, r19	; 0x01
    bae4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bae6:	ce 01       	movw	r24, r28
    bae8:	8f 57       	subi	r24, 0x7F	; 127
    baea:	9d 4f       	sbci	r25, 0xFD	; 253
    baec:	fc 01       	movw	r30, r24
    baee:	80 81       	ld	r24, Z
    baf0:	91 81       	ldd	r25, Z+1	; 0x01
    baf2:	00 97       	sbiw	r24, 0x00	; 0
    baf4:	89 f6       	brne	.-94     	; 0xba98 <pick_drop+0x4b86>
    baf6:	2f c0       	rjmp	.+94     	; 0xbb56 <pick_drop+0x4c44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    baf8:	8e 01       	movw	r16, r28
    bafa:	0f 57       	subi	r16, 0x7F	; 127
    bafc:	1d 4f       	sbci	r17, 0xFD	; 253
    bafe:	ce 01       	movw	r24, r28
    bb00:	83 58       	subi	r24, 0x83	; 131
    bb02:	9d 4f       	sbci	r25, 0xFD	; 253
    bb04:	fc 01       	movw	r30, r24
    bb06:	60 81       	ld	r22, Z
    bb08:	71 81       	ldd	r23, Z+1	; 0x01
    bb0a:	82 81       	ldd	r24, Z+2	; 0x02
    bb0c:	93 81       	ldd	r25, Z+3	; 0x03
    bb0e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    bb12:	dc 01       	movw	r26, r24
    bb14:	cb 01       	movw	r24, r22
    bb16:	f8 01       	movw	r30, r16
    bb18:	91 83       	std	Z+1, r25	; 0x01
    bb1a:	80 83       	st	Z, r24
    bb1c:	ce 01       	movw	r24, r28
    bb1e:	8b 57       	subi	r24, 0x7B	; 123
    bb20:	9d 4f       	sbci	r25, 0xFD	; 253
    bb22:	9e 01       	movw	r18, r28
    bb24:	2f 57       	subi	r18, 0x7F	; 127
    bb26:	3d 4f       	sbci	r19, 0xFD	; 253
    bb28:	f9 01       	movw	r30, r18
    bb2a:	20 81       	ld	r18, Z
    bb2c:	31 81       	ldd	r19, Z+1	; 0x01
    bb2e:	fc 01       	movw	r30, r24
    bb30:	31 83       	std	Z+1, r19	; 0x01
    bb32:	20 83       	st	Z, r18
    bb34:	ce 01       	movw	r24, r28
    bb36:	8b 57       	subi	r24, 0x7B	; 123
    bb38:	9d 4f       	sbci	r25, 0xFD	; 253
    bb3a:	fc 01       	movw	r30, r24
    bb3c:	80 81       	ld	r24, Z
    bb3e:	91 81       	ldd	r25, Z+1	; 0x01
    bb40:	8c 01       	movw	r16, r24
    bb42:	c8 01       	movw	r24, r16
    bb44:	01 97       	sbiw	r24, 0x01	; 1
    bb46:	f1 f7       	brne	.-4      	; 0xbb44 <pick_drop+0x4c32>
    bb48:	8c 01       	movw	r16, r24
    bb4a:	ce 01       	movw	r24, r28
    bb4c:	8b 57       	subi	r24, 0x7B	; 123
    bb4e:	9d 4f       	sbci	r25, 0xFD	; 253
    bb50:	fc 01       	movw	r30, r24
    bb52:	11 83       	std	Z+1, r17	; 0x01
    bb54:	00 83       	st	Z, r16
			_delay_ms(100);
			right_degrees(50);
    bb56:	82 e3       	ldi	r24, 0x32	; 50
    bb58:	90 e0       	ldi	r25, 0x00	; 0
    bb5a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
    bb5e:	9e 01       	movw	r18, r28
    bb60:	29 57       	subi	r18, 0x79	; 121
    bb62:	3d 4f       	sbci	r19, 0xFD	; 253
    bb64:	80 e0       	ldi	r24, 0x00	; 0
    bb66:	90 e0       	ldi	r25, 0x00	; 0
    bb68:	a0 ea       	ldi	r26, 0xA0	; 160
    bb6a:	b1 e4       	ldi	r27, 0x41	; 65
    bb6c:	f9 01       	movw	r30, r18
    bb6e:	80 83       	st	Z, r24
    bb70:	91 83       	std	Z+1, r25	; 0x01
    bb72:	a2 83       	std	Z+2, r26	; 0x02
    bb74:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bb76:	8e 01       	movw	r16, r28
    bb78:	05 57       	subi	r16, 0x75	; 117
    bb7a:	1d 4f       	sbci	r17, 0xFD	; 253
    bb7c:	ce 01       	movw	r24, r28
    bb7e:	89 57       	subi	r24, 0x79	; 121
    bb80:	9d 4f       	sbci	r25, 0xFD	; 253
    bb82:	fc 01       	movw	r30, r24
    bb84:	60 81       	ld	r22, Z
    bb86:	71 81       	ldd	r23, Z+1	; 0x01
    bb88:	82 81       	ldd	r24, Z+2	; 0x02
    bb8a:	93 81       	ldd	r25, Z+3	; 0x03
    bb8c:	26 e6       	ldi	r18, 0x66	; 102
    bb8e:	36 e6       	ldi	r19, 0x66	; 102
    bb90:	46 e6       	ldi	r20, 0x66	; 102
    bb92:	55 e4       	ldi	r21, 0x45	; 69
    bb94:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    bb98:	dc 01       	movw	r26, r24
    bb9a:	cb 01       	movw	r24, r22
    bb9c:	f8 01       	movw	r30, r16
    bb9e:	80 83       	st	Z, r24
    bba0:	91 83       	std	Z+1, r25	; 0x01
    bba2:	a2 83       	std	Z+2, r26	; 0x02
    bba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bba6:	ce 01       	movw	r24, r28
    bba8:	85 57       	subi	r24, 0x75	; 117
    bbaa:	9d 4f       	sbci	r25, 0xFD	; 253
    bbac:	11 e0       	ldi	r17, 0x01	; 1
    bbae:	fc 01       	movw	r30, r24
    bbb0:	60 81       	ld	r22, Z
    bbb2:	71 81       	ldd	r23, Z+1	; 0x01
    bbb4:	82 81       	ldd	r24, Z+2	; 0x02
    bbb6:	93 81       	ldd	r25, Z+3	; 0x03
    bbb8:	20 e0       	ldi	r18, 0x00	; 0
    bbba:	30 e0       	ldi	r19, 0x00	; 0
    bbbc:	40 e8       	ldi	r20, 0x80	; 128
    bbbe:	5f e3       	ldi	r21, 0x3F	; 63
    bbc0:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    bbc4:	88 23       	and	r24, r24
    bbc6:	0c f0       	brlt	.+2      	; 0xbbca <pick_drop+0x4cb8>
    bbc8:	10 e0       	ldi	r17, 0x00	; 0
    bbca:	11 23       	and	r17, r17
    bbcc:	49 f0       	breq	.+18     	; 0xbbe0 <pick_drop+0x4cce>
		__ticks = 1;
    bbce:	ce 01       	movw	r24, r28
    bbd0:	81 57       	subi	r24, 0x71	; 113
    bbd2:	9d 4f       	sbci	r25, 0xFD	; 253
    bbd4:	21 e0       	ldi	r18, 0x01	; 1
    bbd6:	30 e0       	ldi	r19, 0x00	; 0
    bbd8:	fc 01       	movw	r30, r24
    bbda:	31 83       	std	Z+1, r19	; 0x01
    bbdc:	20 83       	st	Z, r18
    bbde:	74 c0       	rjmp	.+232    	; 0xbcc8 <pick_drop+0x4db6>
	else if (__tmp > 65535)
    bbe0:	ce 01       	movw	r24, r28
    bbe2:	85 57       	subi	r24, 0x75	; 117
    bbe4:	9d 4f       	sbci	r25, 0xFD	; 253
    bbe6:	11 e0       	ldi	r17, 0x01	; 1
    bbe8:	fc 01       	movw	r30, r24
    bbea:	60 81       	ld	r22, Z
    bbec:	71 81       	ldd	r23, Z+1	; 0x01
    bbee:	82 81       	ldd	r24, Z+2	; 0x02
    bbf0:	93 81       	ldd	r25, Z+3	; 0x03
    bbf2:	20 e0       	ldi	r18, 0x00	; 0
    bbf4:	3f ef       	ldi	r19, 0xFF	; 255
    bbf6:	4f e7       	ldi	r20, 0x7F	; 127
    bbf8:	57 e4       	ldi	r21, 0x47	; 71
    bbfa:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    bbfe:	18 16       	cp	r1, r24
    bc00:	0c f0       	brlt	.+2      	; 0xbc04 <pick_drop+0x4cf2>
    bc02:	10 e0       	ldi	r17, 0x00	; 0
    bc04:	11 23       	and	r17, r17
    bc06:	09 f4       	brne	.+2      	; 0xbc0a <pick_drop+0x4cf8>
    bc08:	4d c0       	rjmp	.+154    	; 0xbca4 <pick_drop+0x4d92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bc0a:	ce 01       	movw	r24, r28
    bc0c:	89 57       	subi	r24, 0x79	; 121
    bc0e:	9d 4f       	sbci	r25, 0xFD	; 253
    bc10:	fc 01       	movw	r30, r24
    bc12:	60 81       	ld	r22, Z
    bc14:	71 81       	ldd	r23, Z+1	; 0x01
    bc16:	82 81       	ldd	r24, Z+2	; 0x02
    bc18:	93 81       	ldd	r25, Z+3	; 0x03
    bc1a:	20 e0       	ldi	r18, 0x00	; 0
    bc1c:	30 e0       	ldi	r19, 0x00	; 0
    bc1e:	40 e2       	ldi	r20, 0x20	; 32
    bc20:	51 e4       	ldi	r21, 0x41	; 65
    bc22:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    bc26:	dc 01       	movw	r26, r24
    bc28:	cb 01       	movw	r24, r22
    bc2a:	8e 01       	movw	r16, r28
    bc2c:	01 57       	subi	r16, 0x71	; 113
    bc2e:	1d 4f       	sbci	r17, 0xFD	; 253
    bc30:	bc 01       	movw	r22, r24
    bc32:	cd 01       	movw	r24, r26
    bc34:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    bc38:	dc 01       	movw	r26, r24
    bc3a:	cb 01       	movw	r24, r22
    bc3c:	f8 01       	movw	r30, r16
    bc3e:	91 83       	std	Z+1, r25	; 0x01
    bc40:	80 83       	st	Z, r24
    bc42:	27 c0       	rjmp	.+78     	; 0xbc92 <pick_drop+0x4d80>
    bc44:	ce 01       	movw	r24, r28
    bc46:	8f 56       	subi	r24, 0x6F	; 111
    bc48:	9d 4f       	sbci	r25, 0xFD	; 253
    bc4a:	20 e7       	ldi	r18, 0x70	; 112
    bc4c:	31 e0       	ldi	r19, 0x01	; 1
    bc4e:	fc 01       	movw	r30, r24
    bc50:	31 83       	std	Z+1, r19	; 0x01
    bc52:	20 83       	st	Z, r18
    bc54:	ce 01       	movw	r24, r28
    bc56:	8f 56       	subi	r24, 0x6F	; 111
    bc58:	9d 4f       	sbci	r25, 0xFD	; 253
    bc5a:	fc 01       	movw	r30, r24
    bc5c:	80 81       	ld	r24, Z
    bc5e:	91 81       	ldd	r25, Z+1	; 0x01
    bc60:	8c 01       	movw	r16, r24
    bc62:	c8 01       	movw	r24, r16
    bc64:	01 97       	sbiw	r24, 0x01	; 1
    bc66:	f1 f7       	brne	.-4      	; 0xbc64 <pick_drop+0x4d52>
    bc68:	8c 01       	movw	r16, r24
    bc6a:	ce 01       	movw	r24, r28
    bc6c:	8f 56       	subi	r24, 0x6F	; 111
    bc6e:	9d 4f       	sbci	r25, 0xFD	; 253
    bc70:	fc 01       	movw	r30, r24
    bc72:	11 83       	std	Z+1, r17	; 0x01
    bc74:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bc76:	ce 01       	movw	r24, r28
    bc78:	81 57       	subi	r24, 0x71	; 113
    bc7a:	9d 4f       	sbci	r25, 0xFD	; 253
    bc7c:	9e 01       	movw	r18, r28
    bc7e:	21 57       	subi	r18, 0x71	; 113
    bc80:	3d 4f       	sbci	r19, 0xFD	; 253
    bc82:	f9 01       	movw	r30, r18
    bc84:	20 81       	ld	r18, Z
    bc86:	31 81       	ldd	r19, Z+1	; 0x01
    bc88:	21 50       	subi	r18, 0x01	; 1
    bc8a:	30 40       	sbci	r19, 0x00	; 0
    bc8c:	fc 01       	movw	r30, r24
    bc8e:	31 83       	std	Z+1, r19	; 0x01
    bc90:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bc92:	ce 01       	movw	r24, r28
    bc94:	81 57       	subi	r24, 0x71	; 113
    bc96:	9d 4f       	sbci	r25, 0xFD	; 253
    bc98:	fc 01       	movw	r30, r24
    bc9a:	80 81       	ld	r24, Z
    bc9c:	91 81       	ldd	r25, Z+1	; 0x01
    bc9e:	00 97       	sbiw	r24, 0x00	; 0
    bca0:	89 f6       	brne	.-94     	; 0xbc44 <pick_drop+0x4d32>
    bca2:	2f c0       	rjmp	.+94     	; 0xbd02 <pick_drop+0x4df0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bca4:	8e 01       	movw	r16, r28
    bca6:	01 57       	subi	r16, 0x71	; 113
    bca8:	1d 4f       	sbci	r17, 0xFD	; 253
    bcaa:	ce 01       	movw	r24, r28
    bcac:	85 57       	subi	r24, 0x75	; 117
    bcae:	9d 4f       	sbci	r25, 0xFD	; 253
    bcb0:	fc 01       	movw	r30, r24
    bcb2:	60 81       	ld	r22, Z
    bcb4:	71 81       	ldd	r23, Z+1	; 0x01
    bcb6:	82 81       	ldd	r24, Z+2	; 0x02
    bcb8:	93 81       	ldd	r25, Z+3	; 0x03
    bcba:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    bcbe:	dc 01       	movw	r26, r24
    bcc0:	cb 01       	movw	r24, r22
    bcc2:	f8 01       	movw	r30, r16
    bcc4:	91 83       	std	Z+1, r25	; 0x01
    bcc6:	80 83       	st	Z, r24
    bcc8:	ce 01       	movw	r24, r28
    bcca:	8d 56       	subi	r24, 0x6D	; 109
    bccc:	9d 4f       	sbci	r25, 0xFD	; 253
    bcce:	9e 01       	movw	r18, r28
    bcd0:	21 57       	subi	r18, 0x71	; 113
    bcd2:	3d 4f       	sbci	r19, 0xFD	; 253
    bcd4:	f9 01       	movw	r30, r18
    bcd6:	20 81       	ld	r18, Z
    bcd8:	31 81       	ldd	r19, Z+1	; 0x01
    bcda:	fc 01       	movw	r30, r24
    bcdc:	31 83       	std	Z+1, r19	; 0x01
    bcde:	20 83       	st	Z, r18
    bce0:	ce 01       	movw	r24, r28
    bce2:	8d 56       	subi	r24, 0x6D	; 109
    bce4:	9d 4f       	sbci	r25, 0xFD	; 253
    bce6:	fc 01       	movw	r30, r24
    bce8:	80 81       	ld	r24, Z
    bcea:	91 81       	ldd	r25, Z+1	; 0x01
    bcec:	8c 01       	movw	r16, r24
    bcee:	c8 01       	movw	r24, r16
    bcf0:	01 97       	sbiw	r24, 0x01	; 1
    bcf2:	f1 f7       	brne	.-4      	; 0xbcf0 <pick_drop+0x4dde>
    bcf4:	8c 01       	movw	r16, r24
    bcf6:	ce 01       	movw	r24, r28
    bcf8:	8d 56       	subi	r24, 0x6D	; 109
    bcfa:	9d 4f       	sbci	r25, 0xFD	; 253
    bcfc:	fc 01       	movw	r30, r24
    bcfe:	11 83       	std	Z+1, r17	; 0x01
    bd00:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(55);
    bd02:	87 e3       	ldi	r24, 0x37	; 55
    bd04:	90 e0       	ldi	r25, 0x00	; 0
    bd06:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    bd0a:	9e 01       	movw	r18, r28
    bd0c:	2b 56       	subi	r18, 0x6B	; 107
    bd0e:	3d 4f       	sbci	r19, 0xFD	; 253
    bd10:	80 e0       	ldi	r24, 0x00	; 0
    bd12:	90 e0       	ldi	r25, 0x00	; 0
    bd14:	a0 ea       	ldi	r26, 0xA0	; 160
    bd16:	b1 e4       	ldi	r27, 0x41	; 65
    bd18:	f9 01       	movw	r30, r18
    bd1a:	80 83       	st	Z, r24
    bd1c:	91 83       	std	Z+1, r25	; 0x01
    bd1e:	a2 83       	std	Z+2, r26	; 0x02
    bd20:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bd22:	8e 01       	movw	r16, r28
    bd24:	07 56       	subi	r16, 0x67	; 103
    bd26:	1d 4f       	sbci	r17, 0xFD	; 253
    bd28:	ce 01       	movw	r24, r28
    bd2a:	8b 56       	subi	r24, 0x6B	; 107
    bd2c:	9d 4f       	sbci	r25, 0xFD	; 253
    bd2e:	fc 01       	movw	r30, r24
    bd30:	60 81       	ld	r22, Z
    bd32:	71 81       	ldd	r23, Z+1	; 0x01
    bd34:	82 81       	ldd	r24, Z+2	; 0x02
    bd36:	93 81       	ldd	r25, Z+3	; 0x03
    bd38:	26 e6       	ldi	r18, 0x66	; 102
    bd3a:	36 e6       	ldi	r19, 0x66	; 102
    bd3c:	46 e6       	ldi	r20, 0x66	; 102
    bd3e:	55 e4       	ldi	r21, 0x45	; 69
    bd40:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    bd44:	dc 01       	movw	r26, r24
    bd46:	cb 01       	movw	r24, r22
    bd48:	f8 01       	movw	r30, r16
    bd4a:	80 83       	st	Z, r24
    bd4c:	91 83       	std	Z+1, r25	; 0x01
    bd4e:	a2 83       	std	Z+2, r26	; 0x02
    bd50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bd52:	ce 01       	movw	r24, r28
    bd54:	87 56       	subi	r24, 0x67	; 103
    bd56:	9d 4f       	sbci	r25, 0xFD	; 253
    bd58:	11 e0       	ldi	r17, 0x01	; 1
    bd5a:	fc 01       	movw	r30, r24
    bd5c:	60 81       	ld	r22, Z
    bd5e:	71 81       	ldd	r23, Z+1	; 0x01
    bd60:	82 81       	ldd	r24, Z+2	; 0x02
    bd62:	93 81       	ldd	r25, Z+3	; 0x03
    bd64:	20 e0       	ldi	r18, 0x00	; 0
    bd66:	30 e0       	ldi	r19, 0x00	; 0
    bd68:	40 e8       	ldi	r20, 0x80	; 128
    bd6a:	5f e3       	ldi	r21, 0x3F	; 63
    bd6c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    bd70:	88 23       	and	r24, r24
    bd72:	0c f0       	brlt	.+2      	; 0xbd76 <pick_drop+0x4e64>
    bd74:	10 e0       	ldi	r17, 0x00	; 0
    bd76:	11 23       	and	r17, r17
    bd78:	49 f0       	breq	.+18     	; 0xbd8c <pick_drop+0x4e7a>
		__ticks = 1;
    bd7a:	ce 01       	movw	r24, r28
    bd7c:	83 56       	subi	r24, 0x63	; 99
    bd7e:	9d 4f       	sbci	r25, 0xFD	; 253
    bd80:	21 e0       	ldi	r18, 0x01	; 1
    bd82:	30 e0       	ldi	r19, 0x00	; 0
    bd84:	fc 01       	movw	r30, r24
    bd86:	31 83       	std	Z+1, r19	; 0x01
    bd88:	20 83       	st	Z, r18
    bd8a:	74 c0       	rjmp	.+232    	; 0xbe74 <pick_drop+0x4f62>
	else if (__tmp > 65535)
    bd8c:	ce 01       	movw	r24, r28
    bd8e:	87 56       	subi	r24, 0x67	; 103
    bd90:	9d 4f       	sbci	r25, 0xFD	; 253
    bd92:	11 e0       	ldi	r17, 0x01	; 1
    bd94:	fc 01       	movw	r30, r24
    bd96:	60 81       	ld	r22, Z
    bd98:	71 81       	ldd	r23, Z+1	; 0x01
    bd9a:	82 81       	ldd	r24, Z+2	; 0x02
    bd9c:	93 81       	ldd	r25, Z+3	; 0x03
    bd9e:	20 e0       	ldi	r18, 0x00	; 0
    bda0:	3f ef       	ldi	r19, 0xFF	; 255
    bda2:	4f e7       	ldi	r20, 0x7F	; 127
    bda4:	57 e4       	ldi	r21, 0x47	; 71
    bda6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    bdaa:	18 16       	cp	r1, r24
    bdac:	0c f0       	brlt	.+2      	; 0xbdb0 <pick_drop+0x4e9e>
    bdae:	10 e0       	ldi	r17, 0x00	; 0
    bdb0:	11 23       	and	r17, r17
    bdb2:	09 f4       	brne	.+2      	; 0xbdb6 <pick_drop+0x4ea4>
    bdb4:	4d c0       	rjmp	.+154    	; 0xbe50 <pick_drop+0x4f3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bdb6:	ce 01       	movw	r24, r28
    bdb8:	8b 56       	subi	r24, 0x6B	; 107
    bdba:	9d 4f       	sbci	r25, 0xFD	; 253
    bdbc:	fc 01       	movw	r30, r24
    bdbe:	60 81       	ld	r22, Z
    bdc0:	71 81       	ldd	r23, Z+1	; 0x01
    bdc2:	82 81       	ldd	r24, Z+2	; 0x02
    bdc4:	93 81       	ldd	r25, Z+3	; 0x03
    bdc6:	20 e0       	ldi	r18, 0x00	; 0
    bdc8:	30 e0       	ldi	r19, 0x00	; 0
    bdca:	40 e2       	ldi	r20, 0x20	; 32
    bdcc:	51 e4       	ldi	r21, 0x41	; 65
    bdce:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    bdd2:	dc 01       	movw	r26, r24
    bdd4:	cb 01       	movw	r24, r22
    bdd6:	8e 01       	movw	r16, r28
    bdd8:	03 56       	subi	r16, 0x63	; 99
    bdda:	1d 4f       	sbci	r17, 0xFD	; 253
    bddc:	bc 01       	movw	r22, r24
    bdde:	cd 01       	movw	r24, r26
    bde0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    bde4:	dc 01       	movw	r26, r24
    bde6:	cb 01       	movw	r24, r22
    bde8:	f8 01       	movw	r30, r16
    bdea:	91 83       	std	Z+1, r25	; 0x01
    bdec:	80 83       	st	Z, r24
    bdee:	27 c0       	rjmp	.+78     	; 0xbe3e <pick_drop+0x4f2c>
    bdf0:	ce 01       	movw	r24, r28
    bdf2:	81 56       	subi	r24, 0x61	; 97
    bdf4:	9d 4f       	sbci	r25, 0xFD	; 253
    bdf6:	20 e7       	ldi	r18, 0x70	; 112
    bdf8:	31 e0       	ldi	r19, 0x01	; 1
    bdfa:	fc 01       	movw	r30, r24
    bdfc:	31 83       	std	Z+1, r19	; 0x01
    bdfe:	20 83       	st	Z, r18
    be00:	ce 01       	movw	r24, r28
    be02:	81 56       	subi	r24, 0x61	; 97
    be04:	9d 4f       	sbci	r25, 0xFD	; 253
    be06:	fc 01       	movw	r30, r24
    be08:	80 81       	ld	r24, Z
    be0a:	91 81       	ldd	r25, Z+1	; 0x01
    be0c:	8c 01       	movw	r16, r24
    be0e:	c8 01       	movw	r24, r16
    be10:	01 97       	sbiw	r24, 0x01	; 1
    be12:	f1 f7       	brne	.-4      	; 0xbe10 <pick_drop+0x4efe>
    be14:	8c 01       	movw	r16, r24
    be16:	ce 01       	movw	r24, r28
    be18:	81 56       	subi	r24, 0x61	; 97
    be1a:	9d 4f       	sbci	r25, 0xFD	; 253
    be1c:	fc 01       	movw	r30, r24
    be1e:	11 83       	std	Z+1, r17	; 0x01
    be20:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    be22:	ce 01       	movw	r24, r28
    be24:	83 56       	subi	r24, 0x63	; 99
    be26:	9d 4f       	sbci	r25, 0xFD	; 253
    be28:	9e 01       	movw	r18, r28
    be2a:	23 56       	subi	r18, 0x63	; 99
    be2c:	3d 4f       	sbci	r19, 0xFD	; 253
    be2e:	f9 01       	movw	r30, r18
    be30:	20 81       	ld	r18, Z
    be32:	31 81       	ldd	r19, Z+1	; 0x01
    be34:	21 50       	subi	r18, 0x01	; 1
    be36:	30 40       	sbci	r19, 0x00	; 0
    be38:	fc 01       	movw	r30, r24
    be3a:	31 83       	std	Z+1, r19	; 0x01
    be3c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    be3e:	ce 01       	movw	r24, r28
    be40:	83 56       	subi	r24, 0x63	; 99
    be42:	9d 4f       	sbci	r25, 0xFD	; 253
    be44:	fc 01       	movw	r30, r24
    be46:	80 81       	ld	r24, Z
    be48:	91 81       	ldd	r25, Z+1	; 0x01
    be4a:	00 97       	sbiw	r24, 0x00	; 0
    be4c:	89 f6       	brne	.-94     	; 0xbdf0 <pick_drop+0x4ede>
    be4e:	04 c7       	rjmp	.+3592   	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    be50:	8e 01       	movw	r16, r28
    be52:	03 56       	subi	r16, 0x63	; 99
    be54:	1d 4f       	sbci	r17, 0xFD	; 253
    be56:	ce 01       	movw	r24, r28
    be58:	87 56       	subi	r24, 0x67	; 103
    be5a:	9d 4f       	sbci	r25, 0xFD	; 253
    be5c:	fc 01       	movw	r30, r24
    be5e:	60 81       	ld	r22, Z
    be60:	71 81       	ldd	r23, Z+1	; 0x01
    be62:	82 81       	ldd	r24, Z+2	; 0x02
    be64:	93 81       	ldd	r25, Z+3	; 0x03
    be66:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    be6a:	dc 01       	movw	r26, r24
    be6c:	cb 01       	movw	r24, r22
    be6e:	f8 01       	movw	r30, r16
    be70:	91 83       	std	Z+1, r25	; 0x01
    be72:	80 83       	st	Z, r24
    be74:	ce 01       	movw	r24, r28
    be76:	8f 55       	subi	r24, 0x5F	; 95
    be78:	9d 4f       	sbci	r25, 0xFD	; 253
    be7a:	9e 01       	movw	r18, r28
    be7c:	23 56       	subi	r18, 0x63	; 99
    be7e:	3d 4f       	sbci	r19, 0xFD	; 253
    be80:	f9 01       	movw	r30, r18
    be82:	20 81       	ld	r18, Z
    be84:	31 81       	ldd	r19, Z+1	; 0x01
    be86:	fc 01       	movw	r30, r24
    be88:	31 83       	std	Z+1, r19	; 0x01
    be8a:	20 83       	st	Z, r18
    be8c:	ce 01       	movw	r24, r28
    be8e:	8f 55       	subi	r24, 0x5F	; 95
    be90:	9d 4f       	sbci	r25, 0xFD	; 253
    be92:	fc 01       	movw	r30, r24
    be94:	80 81       	ld	r24, Z
    be96:	91 81       	ldd	r25, Z+1	; 0x01
    be98:	8c 01       	movw	r16, r24
    be9a:	c8 01       	movw	r24, r16
    be9c:	01 97       	sbiw	r24, 0x01	; 1
    be9e:	f1 f7       	brne	.-4      	; 0xbe9c <pick_drop+0x4f8a>
    bea0:	8c 01       	movw	r16, r24
    bea2:	ce 01       	movw	r24, r28
    bea4:	8f 55       	subi	r24, 0x5F	; 95
    bea6:	9d 4f       	sbci	r25, 0xFD	; 253
    bea8:	fc 01       	movw	r30, r24
    beaa:	11 83       	std	Z+1, r17	; 0x01
    beac:	00 83       	st	Z, r16
    beae:	d4 c6       	rjmp	.+3496   	; 0xcc58 <pick_drop+0x5d46>
			_delay_ms(20);
		}       
	}
		else if(pd=='7'){//6X6 F6
    beb0:	ce 01       	movw	r24, r28
    beb2:	8d 5e       	subi	r24, 0xED	; 237
    beb4:	9c 4f       	sbci	r25, 0xFC	; 252
    beb6:	fc 01       	movw	r30, r24
    beb8:	80 81       	ld	r24, Z
    beba:	87 33       	cpi	r24, 0x37	; 55
    bebc:	09 f0       	breq	.+2      	; 0xbec0 <pick_drop+0x4fae>
    bebe:	1a c5       	rjmp	.+2612   	; 0xc8f4 <pick_drop+0x59e2>
				if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    bec0:	80 91 63 03 	lds	r24, 0x0363
    bec4:	90 91 64 03 	lds	r25, 0x0364
    bec8:	01 97       	sbiw	r24, 0x01	; 1
    beca:	89 59       	subi	r24, 0x99	; 153
    becc:	9c 4f       	sbci	r25, 0xFC	; 252
    bece:	fc 01       	movw	r30, r24
    bed0:	80 81       	ld	r24, Z
    bed2:	8c 34       	cpi	r24, 0x4C	; 76
    bed4:	61 f0       	breq	.+24     	; 0xbeee <pick_drop+0x4fdc>
    bed6:	80 91 63 03 	lds	r24, 0x0363
    beda:	90 91 64 03 	lds	r25, 0x0364
    bede:	01 97       	sbiw	r24, 0x01	; 1
    bee0:	89 59       	subi	r24, 0x99	; 153
    bee2:	9c 4f       	sbci	r25, 0xFC	; 252
    bee4:	fc 01       	movw	r30, r24
    bee6:	80 81       	ld	r24, Z
    bee8:	82 35       	cpi	r24, 0x52	; 82
    beea:	09 f0       	breq	.+2      	; 0xbeee <pick_drop+0x4fdc>
    beec:	aa c1       	rjmp	.+852    	; 0xc242 <pick_drop+0x5330>
					stop();
    beee:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    bef2:	9e 01       	movw	r18, r28
    bef4:	2d 55       	subi	r18, 0x5D	; 93
    bef6:	3d 4f       	sbci	r19, 0xFD	; 253
    bef8:	80 e0       	ldi	r24, 0x00	; 0
    befa:	90 e0       	ldi	r25, 0x00	; 0
    befc:	a0 ea       	ldi	r26, 0xA0	; 160
    befe:	b1 e4       	ldi	r27, 0x41	; 65
    bf00:	f9 01       	movw	r30, r18
    bf02:	80 83       	st	Z, r24
    bf04:	91 83       	std	Z+1, r25	; 0x01
    bf06:	a2 83       	std	Z+2, r26	; 0x02
    bf08:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bf0a:	8e 01       	movw	r16, r28
    bf0c:	09 55       	subi	r16, 0x59	; 89
    bf0e:	1d 4f       	sbci	r17, 0xFD	; 253
    bf10:	ce 01       	movw	r24, r28
    bf12:	8d 55       	subi	r24, 0x5D	; 93
    bf14:	9d 4f       	sbci	r25, 0xFD	; 253
    bf16:	fc 01       	movw	r30, r24
    bf18:	60 81       	ld	r22, Z
    bf1a:	71 81       	ldd	r23, Z+1	; 0x01
    bf1c:	82 81       	ldd	r24, Z+2	; 0x02
    bf1e:	93 81       	ldd	r25, Z+3	; 0x03
    bf20:	26 e6       	ldi	r18, 0x66	; 102
    bf22:	36 e6       	ldi	r19, 0x66	; 102
    bf24:	46 e6       	ldi	r20, 0x66	; 102
    bf26:	55 e4       	ldi	r21, 0x45	; 69
    bf28:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    bf2c:	dc 01       	movw	r26, r24
    bf2e:	cb 01       	movw	r24, r22
    bf30:	f8 01       	movw	r30, r16
    bf32:	80 83       	st	Z, r24
    bf34:	91 83       	std	Z+1, r25	; 0x01
    bf36:	a2 83       	std	Z+2, r26	; 0x02
    bf38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bf3a:	ce 01       	movw	r24, r28
    bf3c:	89 55       	subi	r24, 0x59	; 89
    bf3e:	9d 4f       	sbci	r25, 0xFD	; 253
    bf40:	11 e0       	ldi	r17, 0x01	; 1
    bf42:	fc 01       	movw	r30, r24
    bf44:	60 81       	ld	r22, Z
    bf46:	71 81       	ldd	r23, Z+1	; 0x01
    bf48:	82 81       	ldd	r24, Z+2	; 0x02
    bf4a:	93 81       	ldd	r25, Z+3	; 0x03
    bf4c:	20 e0       	ldi	r18, 0x00	; 0
    bf4e:	30 e0       	ldi	r19, 0x00	; 0
    bf50:	40 e8       	ldi	r20, 0x80	; 128
    bf52:	5f e3       	ldi	r21, 0x3F	; 63
    bf54:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    bf58:	88 23       	and	r24, r24
    bf5a:	0c f0       	brlt	.+2      	; 0xbf5e <pick_drop+0x504c>
    bf5c:	10 e0       	ldi	r17, 0x00	; 0
    bf5e:	11 23       	and	r17, r17
    bf60:	49 f0       	breq	.+18     	; 0xbf74 <pick_drop+0x5062>
		__ticks = 1;
    bf62:	ce 01       	movw	r24, r28
    bf64:	85 55       	subi	r24, 0x55	; 85
    bf66:	9d 4f       	sbci	r25, 0xFD	; 253
    bf68:	21 e0       	ldi	r18, 0x01	; 1
    bf6a:	30 e0       	ldi	r19, 0x00	; 0
    bf6c:	fc 01       	movw	r30, r24
    bf6e:	31 83       	std	Z+1, r19	; 0x01
    bf70:	20 83       	st	Z, r18
    bf72:	74 c0       	rjmp	.+232    	; 0xc05c <pick_drop+0x514a>
	else if (__tmp > 65535)
    bf74:	ce 01       	movw	r24, r28
    bf76:	89 55       	subi	r24, 0x59	; 89
    bf78:	9d 4f       	sbci	r25, 0xFD	; 253
    bf7a:	11 e0       	ldi	r17, 0x01	; 1
    bf7c:	fc 01       	movw	r30, r24
    bf7e:	60 81       	ld	r22, Z
    bf80:	71 81       	ldd	r23, Z+1	; 0x01
    bf82:	82 81       	ldd	r24, Z+2	; 0x02
    bf84:	93 81       	ldd	r25, Z+3	; 0x03
    bf86:	20 e0       	ldi	r18, 0x00	; 0
    bf88:	3f ef       	ldi	r19, 0xFF	; 255
    bf8a:	4f e7       	ldi	r20, 0x7F	; 127
    bf8c:	57 e4       	ldi	r21, 0x47	; 71
    bf8e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    bf92:	18 16       	cp	r1, r24
    bf94:	0c f0       	brlt	.+2      	; 0xbf98 <pick_drop+0x5086>
    bf96:	10 e0       	ldi	r17, 0x00	; 0
    bf98:	11 23       	and	r17, r17
    bf9a:	09 f4       	brne	.+2      	; 0xbf9e <pick_drop+0x508c>
    bf9c:	4d c0       	rjmp	.+154    	; 0xc038 <pick_drop+0x5126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bf9e:	ce 01       	movw	r24, r28
    bfa0:	8d 55       	subi	r24, 0x5D	; 93
    bfa2:	9d 4f       	sbci	r25, 0xFD	; 253
    bfa4:	fc 01       	movw	r30, r24
    bfa6:	60 81       	ld	r22, Z
    bfa8:	71 81       	ldd	r23, Z+1	; 0x01
    bfaa:	82 81       	ldd	r24, Z+2	; 0x02
    bfac:	93 81       	ldd	r25, Z+3	; 0x03
    bfae:	20 e0       	ldi	r18, 0x00	; 0
    bfb0:	30 e0       	ldi	r19, 0x00	; 0
    bfb2:	40 e2       	ldi	r20, 0x20	; 32
    bfb4:	51 e4       	ldi	r21, 0x41	; 65
    bfb6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    bfba:	dc 01       	movw	r26, r24
    bfbc:	cb 01       	movw	r24, r22
    bfbe:	8e 01       	movw	r16, r28
    bfc0:	05 55       	subi	r16, 0x55	; 85
    bfc2:	1d 4f       	sbci	r17, 0xFD	; 253
    bfc4:	bc 01       	movw	r22, r24
    bfc6:	cd 01       	movw	r24, r26
    bfc8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    bfcc:	dc 01       	movw	r26, r24
    bfce:	cb 01       	movw	r24, r22
    bfd0:	f8 01       	movw	r30, r16
    bfd2:	91 83       	std	Z+1, r25	; 0x01
    bfd4:	80 83       	st	Z, r24
    bfd6:	27 c0       	rjmp	.+78     	; 0xc026 <pick_drop+0x5114>
    bfd8:	ce 01       	movw	r24, r28
    bfda:	83 55       	subi	r24, 0x53	; 83
    bfdc:	9d 4f       	sbci	r25, 0xFD	; 253
    bfde:	20 e7       	ldi	r18, 0x70	; 112
    bfe0:	31 e0       	ldi	r19, 0x01	; 1
    bfe2:	fc 01       	movw	r30, r24
    bfe4:	31 83       	std	Z+1, r19	; 0x01
    bfe6:	20 83       	st	Z, r18
    bfe8:	ce 01       	movw	r24, r28
    bfea:	83 55       	subi	r24, 0x53	; 83
    bfec:	9d 4f       	sbci	r25, 0xFD	; 253
    bfee:	fc 01       	movw	r30, r24
    bff0:	80 81       	ld	r24, Z
    bff2:	91 81       	ldd	r25, Z+1	; 0x01
    bff4:	8c 01       	movw	r16, r24
    bff6:	c8 01       	movw	r24, r16
    bff8:	01 97       	sbiw	r24, 0x01	; 1
    bffa:	f1 f7       	brne	.-4      	; 0xbff8 <pick_drop+0x50e6>
    bffc:	8c 01       	movw	r16, r24
    bffe:	ce 01       	movw	r24, r28
    c000:	83 55       	subi	r24, 0x53	; 83
    c002:	9d 4f       	sbci	r25, 0xFD	; 253
    c004:	fc 01       	movw	r30, r24
    c006:	11 83       	std	Z+1, r17	; 0x01
    c008:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c00a:	ce 01       	movw	r24, r28
    c00c:	85 55       	subi	r24, 0x55	; 85
    c00e:	9d 4f       	sbci	r25, 0xFD	; 253
    c010:	9e 01       	movw	r18, r28
    c012:	25 55       	subi	r18, 0x55	; 85
    c014:	3d 4f       	sbci	r19, 0xFD	; 253
    c016:	f9 01       	movw	r30, r18
    c018:	20 81       	ld	r18, Z
    c01a:	31 81       	ldd	r19, Z+1	; 0x01
    c01c:	21 50       	subi	r18, 0x01	; 1
    c01e:	30 40       	sbci	r19, 0x00	; 0
    c020:	fc 01       	movw	r30, r24
    c022:	31 83       	std	Z+1, r19	; 0x01
    c024:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c026:	ce 01       	movw	r24, r28
    c028:	85 55       	subi	r24, 0x55	; 85
    c02a:	9d 4f       	sbci	r25, 0xFD	; 253
    c02c:	fc 01       	movw	r30, r24
    c02e:	80 81       	ld	r24, Z
    c030:	91 81       	ldd	r25, Z+1	; 0x01
    c032:	00 97       	sbiw	r24, 0x00	; 0
    c034:	89 f6       	brne	.-94     	; 0xbfd8 <pick_drop+0x50c6>
    c036:	2f c0       	rjmp	.+94     	; 0xc096 <pick_drop+0x5184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c038:	8e 01       	movw	r16, r28
    c03a:	05 55       	subi	r16, 0x55	; 85
    c03c:	1d 4f       	sbci	r17, 0xFD	; 253
    c03e:	ce 01       	movw	r24, r28
    c040:	89 55       	subi	r24, 0x59	; 89
    c042:	9d 4f       	sbci	r25, 0xFD	; 253
    c044:	fc 01       	movw	r30, r24
    c046:	60 81       	ld	r22, Z
    c048:	71 81       	ldd	r23, Z+1	; 0x01
    c04a:	82 81       	ldd	r24, Z+2	; 0x02
    c04c:	93 81       	ldd	r25, Z+3	; 0x03
    c04e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c052:	dc 01       	movw	r26, r24
    c054:	cb 01       	movw	r24, r22
    c056:	f8 01       	movw	r30, r16
    c058:	91 83       	std	Z+1, r25	; 0x01
    c05a:	80 83       	st	Z, r24
    c05c:	ce 01       	movw	r24, r28
    c05e:	81 55       	subi	r24, 0x51	; 81
    c060:	9d 4f       	sbci	r25, 0xFD	; 253
    c062:	9e 01       	movw	r18, r28
    c064:	25 55       	subi	r18, 0x55	; 85
    c066:	3d 4f       	sbci	r19, 0xFD	; 253
    c068:	f9 01       	movw	r30, r18
    c06a:	20 81       	ld	r18, Z
    c06c:	31 81       	ldd	r19, Z+1	; 0x01
    c06e:	fc 01       	movw	r30, r24
    c070:	31 83       	std	Z+1, r19	; 0x01
    c072:	20 83       	st	Z, r18
    c074:	ce 01       	movw	r24, r28
    c076:	81 55       	subi	r24, 0x51	; 81
    c078:	9d 4f       	sbci	r25, 0xFD	; 253
    c07a:	fc 01       	movw	r30, r24
    c07c:	80 81       	ld	r24, Z
    c07e:	91 81       	ldd	r25, Z+1	; 0x01
    c080:	8c 01       	movw	r16, r24
    c082:	c8 01       	movw	r24, r16
    c084:	01 97       	sbiw	r24, 0x01	; 1
    c086:	f1 f7       	brne	.-4      	; 0xc084 <pick_drop+0x5172>
    c088:	8c 01       	movw	r16, r24
    c08a:	ce 01       	movw	r24, r28
    c08c:	81 55       	subi	r24, 0x51	; 81
    c08e:	9d 4f       	sbci	r25, 0xFD	; 253
    c090:	fc 01       	movw	r30, r24
    c092:	11 83       	std	Z+1, r17	; 0x01
    c094:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    c096:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    c09a:	9e 01       	movw	r18, r28
    c09c:	2f 54       	subi	r18, 0x4F	; 79
    c09e:	3d 4f       	sbci	r19, 0xFD	; 253
    c0a0:	80 e0       	ldi	r24, 0x00	; 0
    c0a2:	90 e0       	ldi	r25, 0x00	; 0
    c0a4:	a8 ec       	ldi	r26, 0xC8	; 200
    c0a6:	b2 e4       	ldi	r27, 0x42	; 66
    c0a8:	f9 01       	movw	r30, r18
    c0aa:	80 83       	st	Z, r24
    c0ac:	91 83       	std	Z+1, r25	; 0x01
    c0ae:	a2 83       	std	Z+2, r26	; 0x02
    c0b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c0b2:	8e 01       	movw	r16, r28
    c0b4:	0b 54       	subi	r16, 0x4B	; 75
    c0b6:	1d 4f       	sbci	r17, 0xFD	; 253
    c0b8:	ce 01       	movw	r24, r28
    c0ba:	8f 54       	subi	r24, 0x4F	; 79
    c0bc:	9d 4f       	sbci	r25, 0xFD	; 253
    c0be:	fc 01       	movw	r30, r24
    c0c0:	60 81       	ld	r22, Z
    c0c2:	71 81       	ldd	r23, Z+1	; 0x01
    c0c4:	82 81       	ldd	r24, Z+2	; 0x02
    c0c6:	93 81       	ldd	r25, Z+3	; 0x03
    c0c8:	26 e6       	ldi	r18, 0x66	; 102
    c0ca:	36 e6       	ldi	r19, 0x66	; 102
    c0cc:	46 e6       	ldi	r20, 0x66	; 102
    c0ce:	55 e4       	ldi	r21, 0x45	; 69
    c0d0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c0d4:	dc 01       	movw	r26, r24
    c0d6:	cb 01       	movw	r24, r22
    c0d8:	f8 01       	movw	r30, r16
    c0da:	80 83       	st	Z, r24
    c0dc:	91 83       	std	Z+1, r25	; 0x01
    c0de:	a2 83       	std	Z+2, r26	; 0x02
    c0e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c0e2:	ce 01       	movw	r24, r28
    c0e4:	8b 54       	subi	r24, 0x4B	; 75
    c0e6:	9d 4f       	sbci	r25, 0xFD	; 253
    c0e8:	11 e0       	ldi	r17, 0x01	; 1
    c0ea:	fc 01       	movw	r30, r24
    c0ec:	60 81       	ld	r22, Z
    c0ee:	71 81       	ldd	r23, Z+1	; 0x01
    c0f0:	82 81       	ldd	r24, Z+2	; 0x02
    c0f2:	93 81       	ldd	r25, Z+3	; 0x03
    c0f4:	20 e0       	ldi	r18, 0x00	; 0
    c0f6:	30 e0       	ldi	r19, 0x00	; 0
    c0f8:	40 e8       	ldi	r20, 0x80	; 128
    c0fa:	5f e3       	ldi	r21, 0x3F	; 63
    c0fc:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    c100:	88 23       	and	r24, r24
    c102:	0c f0       	brlt	.+2      	; 0xc106 <pick_drop+0x51f4>
    c104:	10 e0       	ldi	r17, 0x00	; 0
    c106:	11 23       	and	r17, r17
    c108:	49 f0       	breq	.+18     	; 0xc11c <pick_drop+0x520a>
		__ticks = 1;
    c10a:	ce 01       	movw	r24, r28
    c10c:	87 54       	subi	r24, 0x47	; 71
    c10e:	9d 4f       	sbci	r25, 0xFD	; 253
    c110:	21 e0       	ldi	r18, 0x01	; 1
    c112:	30 e0       	ldi	r19, 0x00	; 0
    c114:	fc 01       	movw	r30, r24
    c116:	31 83       	std	Z+1, r19	; 0x01
    c118:	20 83       	st	Z, r18
    c11a:	74 c0       	rjmp	.+232    	; 0xc204 <pick_drop+0x52f2>
	else if (__tmp > 65535)
    c11c:	ce 01       	movw	r24, r28
    c11e:	8b 54       	subi	r24, 0x4B	; 75
    c120:	9d 4f       	sbci	r25, 0xFD	; 253
    c122:	11 e0       	ldi	r17, 0x01	; 1
    c124:	fc 01       	movw	r30, r24
    c126:	60 81       	ld	r22, Z
    c128:	71 81       	ldd	r23, Z+1	; 0x01
    c12a:	82 81       	ldd	r24, Z+2	; 0x02
    c12c:	93 81       	ldd	r25, Z+3	; 0x03
    c12e:	20 e0       	ldi	r18, 0x00	; 0
    c130:	3f ef       	ldi	r19, 0xFF	; 255
    c132:	4f e7       	ldi	r20, 0x7F	; 127
    c134:	57 e4       	ldi	r21, 0x47	; 71
    c136:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    c13a:	18 16       	cp	r1, r24
    c13c:	0c f0       	brlt	.+2      	; 0xc140 <pick_drop+0x522e>
    c13e:	10 e0       	ldi	r17, 0x00	; 0
    c140:	11 23       	and	r17, r17
    c142:	09 f4       	brne	.+2      	; 0xc146 <pick_drop+0x5234>
    c144:	4d c0       	rjmp	.+154    	; 0xc1e0 <pick_drop+0x52ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c146:	ce 01       	movw	r24, r28
    c148:	8f 54       	subi	r24, 0x4F	; 79
    c14a:	9d 4f       	sbci	r25, 0xFD	; 253
    c14c:	fc 01       	movw	r30, r24
    c14e:	60 81       	ld	r22, Z
    c150:	71 81       	ldd	r23, Z+1	; 0x01
    c152:	82 81       	ldd	r24, Z+2	; 0x02
    c154:	93 81       	ldd	r25, Z+3	; 0x03
    c156:	20 e0       	ldi	r18, 0x00	; 0
    c158:	30 e0       	ldi	r19, 0x00	; 0
    c15a:	40 e2       	ldi	r20, 0x20	; 32
    c15c:	51 e4       	ldi	r21, 0x41	; 65
    c15e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c162:	dc 01       	movw	r26, r24
    c164:	cb 01       	movw	r24, r22
    c166:	8e 01       	movw	r16, r28
    c168:	07 54       	subi	r16, 0x47	; 71
    c16a:	1d 4f       	sbci	r17, 0xFD	; 253
    c16c:	bc 01       	movw	r22, r24
    c16e:	cd 01       	movw	r24, r26
    c170:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c174:	dc 01       	movw	r26, r24
    c176:	cb 01       	movw	r24, r22
    c178:	f8 01       	movw	r30, r16
    c17a:	91 83       	std	Z+1, r25	; 0x01
    c17c:	80 83       	st	Z, r24
    c17e:	27 c0       	rjmp	.+78     	; 0xc1ce <pick_drop+0x52bc>
    c180:	ce 01       	movw	r24, r28
    c182:	85 54       	subi	r24, 0x45	; 69
    c184:	9d 4f       	sbci	r25, 0xFD	; 253
    c186:	20 e7       	ldi	r18, 0x70	; 112
    c188:	31 e0       	ldi	r19, 0x01	; 1
    c18a:	fc 01       	movw	r30, r24
    c18c:	31 83       	std	Z+1, r19	; 0x01
    c18e:	20 83       	st	Z, r18
    c190:	ce 01       	movw	r24, r28
    c192:	85 54       	subi	r24, 0x45	; 69
    c194:	9d 4f       	sbci	r25, 0xFD	; 253
    c196:	fc 01       	movw	r30, r24
    c198:	80 81       	ld	r24, Z
    c19a:	91 81       	ldd	r25, Z+1	; 0x01
    c19c:	8c 01       	movw	r16, r24
    c19e:	c8 01       	movw	r24, r16
    c1a0:	01 97       	sbiw	r24, 0x01	; 1
    c1a2:	f1 f7       	brne	.-4      	; 0xc1a0 <pick_drop+0x528e>
    c1a4:	8c 01       	movw	r16, r24
    c1a6:	ce 01       	movw	r24, r28
    c1a8:	85 54       	subi	r24, 0x45	; 69
    c1aa:	9d 4f       	sbci	r25, 0xFD	; 253
    c1ac:	fc 01       	movw	r30, r24
    c1ae:	11 83       	std	Z+1, r17	; 0x01
    c1b0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c1b2:	ce 01       	movw	r24, r28
    c1b4:	87 54       	subi	r24, 0x47	; 71
    c1b6:	9d 4f       	sbci	r25, 0xFD	; 253
    c1b8:	9e 01       	movw	r18, r28
    c1ba:	27 54       	subi	r18, 0x47	; 71
    c1bc:	3d 4f       	sbci	r19, 0xFD	; 253
    c1be:	f9 01       	movw	r30, r18
    c1c0:	20 81       	ld	r18, Z
    c1c2:	31 81       	ldd	r19, Z+1	; 0x01
    c1c4:	21 50       	subi	r18, 0x01	; 1
    c1c6:	30 40       	sbci	r19, 0x00	; 0
    c1c8:	fc 01       	movw	r30, r24
    c1ca:	31 83       	std	Z+1, r19	; 0x01
    c1cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c1ce:	ce 01       	movw	r24, r28
    c1d0:	87 54       	subi	r24, 0x47	; 71
    c1d2:	9d 4f       	sbci	r25, 0xFD	; 253
    c1d4:	fc 01       	movw	r30, r24
    c1d6:	80 81       	ld	r24, Z
    c1d8:	91 81       	ldd	r25, Z+1	; 0x01
    c1da:	00 97       	sbiw	r24, 0x00	; 0
    c1dc:	89 f6       	brne	.-94     	; 0xc180 <pick_drop+0x526e>
    c1de:	30 c0       	rjmp	.+96     	; 0xc240 <pick_drop+0x532e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c1e0:	8e 01       	movw	r16, r28
    c1e2:	07 54       	subi	r16, 0x47	; 71
    c1e4:	1d 4f       	sbci	r17, 0xFD	; 253
    c1e6:	ce 01       	movw	r24, r28
    c1e8:	8b 54       	subi	r24, 0x4B	; 75
    c1ea:	9d 4f       	sbci	r25, 0xFD	; 253
    c1ec:	fc 01       	movw	r30, r24
    c1ee:	60 81       	ld	r22, Z
    c1f0:	71 81       	ldd	r23, Z+1	; 0x01
    c1f2:	82 81       	ldd	r24, Z+2	; 0x02
    c1f4:	93 81       	ldd	r25, Z+3	; 0x03
    c1f6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c1fa:	dc 01       	movw	r26, r24
    c1fc:	cb 01       	movw	r24, r22
    c1fe:	f8 01       	movw	r30, r16
    c200:	91 83       	std	Z+1, r25	; 0x01
    c202:	80 83       	st	Z, r24
    c204:	ce 01       	movw	r24, r28
    c206:	83 54       	subi	r24, 0x43	; 67
    c208:	9d 4f       	sbci	r25, 0xFD	; 253
    c20a:	9e 01       	movw	r18, r28
    c20c:	27 54       	subi	r18, 0x47	; 71
    c20e:	3d 4f       	sbci	r19, 0xFD	; 253
    c210:	f9 01       	movw	r30, r18
    c212:	20 81       	ld	r18, Z
    c214:	31 81       	ldd	r19, Z+1	; 0x01
    c216:	fc 01       	movw	r30, r24
    c218:	31 83       	std	Z+1, r19	; 0x01
    c21a:	20 83       	st	Z, r18
    c21c:	ce 01       	movw	r24, r28
    c21e:	83 54       	subi	r24, 0x43	; 67
    c220:	9d 4f       	sbci	r25, 0xFD	; 253
    c222:	fc 01       	movw	r30, r24
    c224:	80 81       	ld	r24, Z
    c226:	91 81       	ldd	r25, Z+1	; 0x01
    c228:	8c 01       	movw	r16, r24
    c22a:	c8 01       	movw	r24, r16
    c22c:	01 97       	sbiw	r24, 0x01	; 1
    c22e:	f1 f7       	brne	.-4      	; 0xc22c <pick_drop+0x531a>
    c230:	8c 01       	movw	r16, r24
    c232:	ce 01       	movw	r24, r28
    c234:	83 54       	subi	r24, 0x43	; 67
    c236:	9d 4f       	sbci	r25, 0xFD	; 253
    c238:	fc 01       	movw	r30, r24
    c23a:	11 83       	std	Z+1, r17	; 0x01
    c23c:	00 83       	st	Z, r16
					_delay_ms(100);
    c23e:	0c c5       	rjmp	.+2584   	; 0xcc58 <pick_drop+0x5d46>
    c240:	0b c5       	rjmp	.+2582   	; 0xcc58 <pick_drop+0x5d46>
					//_delay_ms(50);
				}
				else{
					forward_mm(35);
    c242:	83 e2       	ldi	r24, 0x23	; 35
    c244:	90 e0       	ldi	r25, 0x00	; 0
    c246:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    c24a:	9e 01       	movw	r18, r28
    c24c:	21 54       	subi	r18, 0x41	; 65
    c24e:	3d 4f       	sbci	r19, 0xFD	; 253
    c250:	80 e0       	ldi	r24, 0x00	; 0
    c252:	90 e0       	ldi	r25, 0x00	; 0
    c254:	a0 ea       	ldi	r26, 0xA0	; 160
    c256:	b1 e4       	ldi	r27, 0x41	; 65
    c258:	f9 01       	movw	r30, r18
    c25a:	80 83       	st	Z, r24
    c25c:	91 83       	std	Z+1, r25	; 0x01
    c25e:	a2 83       	std	Z+2, r26	; 0x02
    c260:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c262:	8e 01       	movw	r16, r28
    c264:	0d 53       	subi	r16, 0x3D	; 61
    c266:	1d 4f       	sbci	r17, 0xFD	; 253
    c268:	ce 01       	movw	r24, r28
    c26a:	81 54       	subi	r24, 0x41	; 65
    c26c:	9d 4f       	sbci	r25, 0xFD	; 253
    c26e:	fc 01       	movw	r30, r24
    c270:	60 81       	ld	r22, Z
    c272:	71 81       	ldd	r23, Z+1	; 0x01
    c274:	82 81       	ldd	r24, Z+2	; 0x02
    c276:	93 81       	ldd	r25, Z+3	; 0x03
    c278:	26 e6       	ldi	r18, 0x66	; 102
    c27a:	36 e6       	ldi	r19, 0x66	; 102
    c27c:	46 e6       	ldi	r20, 0x66	; 102
    c27e:	55 e4       	ldi	r21, 0x45	; 69
    c280:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c284:	dc 01       	movw	r26, r24
    c286:	cb 01       	movw	r24, r22
    c288:	f8 01       	movw	r30, r16
    c28a:	80 83       	st	Z, r24
    c28c:	91 83       	std	Z+1, r25	; 0x01
    c28e:	a2 83       	std	Z+2, r26	; 0x02
    c290:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c292:	ce 01       	movw	r24, r28
    c294:	8d 53       	subi	r24, 0x3D	; 61
    c296:	9d 4f       	sbci	r25, 0xFD	; 253
    c298:	11 e0       	ldi	r17, 0x01	; 1
    c29a:	fc 01       	movw	r30, r24
    c29c:	60 81       	ld	r22, Z
    c29e:	71 81       	ldd	r23, Z+1	; 0x01
    c2a0:	82 81       	ldd	r24, Z+2	; 0x02
    c2a2:	93 81       	ldd	r25, Z+3	; 0x03
    c2a4:	20 e0       	ldi	r18, 0x00	; 0
    c2a6:	30 e0       	ldi	r19, 0x00	; 0
    c2a8:	40 e8       	ldi	r20, 0x80	; 128
    c2aa:	5f e3       	ldi	r21, 0x3F	; 63
    c2ac:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    c2b0:	88 23       	and	r24, r24
    c2b2:	0c f0       	brlt	.+2      	; 0xc2b6 <pick_drop+0x53a4>
    c2b4:	10 e0       	ldi	r17, 0x00	; 0
    c2b6:	11 23       	and	r17, r17
    c2b8:	49 f0       	breq	.+18     	; 0xc2cc <pick_drop+0x53ba>
		__ticks = 1;
    c2ba:	ce 01       	movw	r24, r28
    c2bc:	89 53       	subi	r24, 0x39	; 57
    c2be:	9d 4f       	sbci	r25, 0xFD	; 253
    c2c0:	21 e0       	ldi	r18, 0x01	; 1
    c2c2:	30 e0       	ldi	r19, 0x00	; 0
    c2c4:	fc 01       	movw	r30, r24
    c2c6:	31 83       	std	Z+1, r19	; 0x01
    c2c8:	20 83       	st	Z, r18
    c2ca:	74 c0       	rjmp	.+232    	; 0xc3b4 <pick_drop+0x54a2>
	else if (__tmp > 65535)
    c2cc:	ce 01       	movw	r24, r28
    c2ce:	8d 53       	subi	r24, 0x3D	; 61
    c2d0:	9d 4f       	sbci	r25, 0xFD	; 253
    c2d2:	11 e0       	ldi	r17, 0x01	; 1
    c2d4:	fc 01       	movw	r30, r24
    c2d6:	60 81       	ld	r22, Z
    c2d8:	71 81       	ldd	r23, Z+1	; 0x01
    c2da:	82 81       	ldd	r24, Z+2	; 0x02
    c2dc:	93 81       	ldd	r25, Z+3	; 0x03
    c2de:	20 e0       	ldi	r18, 0x00	; 0
    c2e0:	3f ef       	ldi	r19, 0xFF	; 255
    c2e2:	4f e7       	ldi	r20, 0x7F	; 127
    c2e4:	57 e4       	ldi	r21, 0x47	; 71
    c2e6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    c2ea:	18 16       	cp	r1, r24
    c2ec:	0c f0       	brlt	.+2      	; 0xc2f0 <pick_drop+0x53de>
    c2ee:	10 e0       	ldi	r17, 0x00	; 0
    c2f0:	11 23       	and	r17, r17
    c2f2:	09 f4       	brne	.+2      	; 0xc2f6 <pick_drop+0x53e4>
    c2f4:	4d c0       	rjmp	.+154    	; 0xc390 <pick_drop+0x547e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c2f6:	ce 01       	movw	r24, r28
    c2f8:	81 54       	subi	r24, 0x41	; 65
    c2fa:	9d 4f       	sbci	r25, 0xFD	; 253
    c2fc:	fc 01       	movw	r30, r24
    c2fe:	60 81       	ld	r22, Z
    c300:	71 81       	ldd	r23, Z+1	; 0x01
    c302:	82 81       	ldd	r24, Z+2	; 0x02
    c304:	93 81       	ldd	r25, Z+3	; 0x03
    c306:	20 e0       	ldi	r18, 0x00	; 0
    c308:	30 e0       	ldi	r19, 0x00	; 0
    c30a:	40 e2       	ldi	r20, 0x20	; 32
    c30c:	51 e4       	ldi	r21, 0x41	; 65
    c30e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c312:	dc 01       	movw	r26, r24
    c314:	cb 01       	movw	r24, r22
    c316:	8e 01       	movw	r16, r28
    c318:	09 53       	subi	r16, 0x39	; 57
    c31a:	1d 4f       	sbci	r17, 0xFD	; 253
    c31c:	bc 01       	movw	r22, r24
    c31e:	cd 01       	movw	r24, r26
    c320:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c324:	dc 01       	movw	r26, r24
    c326:	cb 01       	movw	r24, r22
    c328:	f8 01       	movw	r30, r16
    c32a:	91 83       	std	Z+1, r25	; 0x01
    c32c:	80 83       	st	Z, r24
    c32e:	27 c0       	rjmp	.+78     	; 0xc37e <pick_drop+0x546c>
    c330:	ce 01       	movw	r24, r28
    c332:	87 53       	subi	r24, 0x37	; 55
    c334:	9d 4f       	sbci	r25, 0xFD	; 253
    c336:	20 e7       	ldi	r18, 0x70	; 112
    c338:	31 e0       	ldi	r19, 0x01	; 1
    c33a:	fc 01       	movw	r30, r24
    c33c:	31 83       	std	Z+1, r19	; 0x01
    c33e:	20 83       	st	Z, r18
    c340:	ce 01       	movw	r24, r28
    c342:	87 53       	subi	r24, 0x37	; 55
    c344:	9d 4f       	sbci	r25, 0xFD	; 253
    c346:	fc 01       	movw	r30, r24
    c348:	80 81       	ld	r24, Z
    c34a:	91 81       	ldd	r25, Z+1	; 0x01
    c34c:	8c 01       	movw	r16, r24
    c34e:	c8 01       	movw	r24, r16
    c350:	01 97       	sbiw	r24, 0x01	; 1
    c352:	f1 f7       	brne	.-4      	; 0xc350 <pick_drop+0x543e>
    c354:	8c 01       	movw	r16, r24
    c356:	ce 01       	movw	r24, r28
    c358:	87 53       	subi	r24, 0x37	; 55
    c35a:	9d 4f       	sbci	r25, 0xFD	; 253
    c35c:	fc 01       	movw	r30, r24
    c35e:	11 83       	std	Z+1, r17	; 0x01
    c360:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c362:	ce 01       	movw	r24, r28
    c364:	89 53       	subi	r24, 0x39	; 57
    c366:	9d 4f       	sbci	r25, 0xFD	; 253
    c368:	9e 01       	movw	r18, r28
    c36a:	29 53       	subi	r18, 0x39	; 57
    c36c:	3d 4f       	sbci	r19, 0xFD	; 253
    c36e:	f9 01       	movw	r30, r18
    c370:	20 81       	ld	r18, Z
    c372:	31 81       	ldd	r19, Z+1	; 0x01
    c374:	21 50       	subi	r18, 0x01	; 1
    c376:	30 40       	sbci	r19, 0x00	; 0
    c378:	fc 01       	movw	r30, r24
    c37a:	31 83       	std	Z+1, r19	; 0x01
    c37c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c37e:	ce 01       	movw	r24, r28
    c380:	89 53       	subi	r24, 0x39	; 57
    c382:	9d 4f       	sbci	r25, 0xFD	; 253
    c384:	fc 01       	movw	r30, r24
    c386:	80 81       	ld	r24, Z
    c388:	91 81       	ldd	r25, Z+1	; 0x01
    c38a:	00 97       	sbiw	r24, 0x00	; 0
    c38c:	89 f6       	brne	.-94     	; 0xc330 <pick_drop+0x541e>
    c38e:	2f c0       	rjmp	.+94     	; 0xc3ee <pick_drop+0x54dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c390:	8e 01       	movw	r16, r28
    c392:	09 53       	subi	r16, 0x39	; 57
    c394:	1d 4f       	sbci	r17, 0xFD	; 253
    c396:	ce 01       	movw	r24, r28
    c398:	8d 53       	subi	r24, 0x3D	; 61
    c39a:	9d 4f       	sbci	r25, 0xFD	; 253
    c39c:	fc 01       	movw	r30, r24
    c39e:	60 81       	ld	r22, Z
    c3a0:	71 81       	ldd	r23, Z+1	; 0x01
    c3a2:	82 81       	ldd	r24, Z+2	; 0x02
    c3a4:	93 81       	ldd	r25, Z+3	; 0x03
    c3a6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c3aa:	dc 01       	movw	r26, r24
    c3ac:	cb 01       	movw	r24, r22
    c3ae:	f8 01       	movw	r30, r16
    c3b0:	91 83       	std	Z+1, r25	; 0x01
    c3b2:	80 83       	st	Z, r24
    c3b4:	ce 01       	movw	r24, r28
    c3b6:	85 53       	subi	r24, 0x35	; 53
    c3b8:	9d 4f       	sbci	r25, 0xFD	; 253
    c3ba:	9e 01       	movw	r18, r28
    c3bc:	29 53       	subi	r18, 0x39	; 57
    c3be:	3d 4f       	sbci	r19, 0xFD	; 253
    c3c0:	f9 01       	movw	r30, r18
    c3c2:	20 81       	ld	r18, Z
    c3c4:	31 81       	ldd	r19, Z+1	; 0x01
    c3c6:	fc 01       	movw	r30, r24
    c3c8:	31 83       	std	Z+1, r19	; 0x01
    c3ca:	20 83       	st	Z, r18
    c3cc:	ce 01       	movw	r24, r28
    c3ce:	85 53       	subi	r24, 0x35	; 53
    c3d0:	9d 4f       	sbci	r25, 0xFD	; 253
    c3d2:	fc 01       	movw	r30, r24
    c3d4:	80 81       	ld	r24, Z
    c3d6:	91 81       	ldd	r25, Z+1	; 0x01
    c3d8:	8c 01       	movw	r16, r24
    c3da:	c8 01       	movw	r24, r16
    c3dc:	01 97       	sbiw	r24, 0x01	; 1
    c3de:	f1 f7       	brne	.-4      	; 0xc3dc <pick_drop+0x54ca>
    c3e0:	8c 01       	movw	r16, r24
    c3e2:	ce 01       	movw	r24, r28
    c3e4:	85 53       	subi	r24, 0x35	; 53
    c3e6:	9d 4f       	sbci	r25, 0xFD	; 253
    c3e8:	fc 01       	movw	r30, r24
    c3ea:	11 83       	std	Z+1, r17	; 0x01
    c3ec:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_right();
    c3ee:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
					front();
    c3f2:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    c3f6:	9e 01       	movw	r18, r28
    c3f8:	23 53       	subi	r18, 0x33	; 51
    c3fa:	3d 4f       	sbci	r19, 0xFD	; 253
    c3fc:	80 e0       	ldi	r24, 0x00	; 0
    c3fe:	90 e0       	ldi	r25, 0x00	; 0
    c400:	a8 ec       	ldi	r26, 0xC8	; 200
    c402:	b2 e4       	ldi	r27, 0x42	; 66
    c404:	f9 01       	movw	r30, r18
    c406:	80 83       	st	Z, r24
    c408:	91 83       	std	Z+1, r25	; 0x01
    c40a:	a2 83       	std	Z+2, r26	; 0x02
    c40c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c40e:	8e 01       	movw	r16, r28
    c410:	0f 52       	subi	r16, 0x2F	; 47
    c412:	1d 4f       	sbci	r17, 0xFD	; 253
    c414:	ce 01       	movw	r24, r28
    c416:	83 53       	subi	r24, 0x33	; 51
    c418:	9d 4f       	sbci	r25, 0xFD	; 253
    c41a:	fc 01       	movw	r30, r24
    c41c:	60 81       	ld	r22, Z
    c41e:	71 81       	ldd	r23, Z+1	; 0x01
    c420:	82 81       	ldd	r24, Z+2	; 0x02
    c422:	93 81       	ldd	r25, Z+3	; 0x03
    c424:	26 e6       	ldi	r18, 0x66	; 102
    c426:	36 e6       	ldi	r19, 0x66	; 102
    c428:	46 e6       	ldi	r20, 0x66	; 102
    c42a:	55 e4       	ldi	r21, 0x45	; 69
    c42c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c430:	dc 01       	movw	r26, r24
    c432:	cb 01       	movw	r24, r22
    c434:	f8 01       	movw	r30, r16
    c436:	80 83       	st	Z, r24
    c438:	91 83       	std	Z+1, r25	; 0x01
    c43a:	a2 83       	std	Z+2, r26	; 0x02
    c43c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c43e:	ce 01       	movw	r24, r28
    c440:	8f 52       	subi	r24, 0x2F	; 47
    c442:	9d 4f       	sbci	r25, 0xFD	; 253
    c444:	11 e0       	ldi	r17, 0x01	; 1
    c446:	fc 01       	movw	r30, r24
    c448:	60 81       	ld	r22, Z
    c44a:	71 81       	ldd	r23, Z+1	; 0x01
    c44c:	82 81       	ldd	r24, Z+2	; 0x02
    c44e:	93 81       	ldd	r25, Z+3	; 0x03
    c450:	20 e0       	ldi	r18, 0x00	; 0
    c452:	30 e0       	ldi	r19, 0x00	; 0
    c454:	40 e8       	ldi	r20, 0x80	; 128
    c456:	5f e3       	ldi	r21, 0x3F	; 63
    c458:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    c45c:	88 23       	and	r24, r24
    c45e:	0c f0       	brlt	.+2      	; 0xc462 <pick_drop+0x5550>
    c460:	10 e0       	ldi	r17, 0x00	; 0
    c462:	11 23       	and	r17, r17
    c464:	49 f0       	breq	.+18     	; 0xc478 <pick_drop+0x5566>
		__ticks = 1;
    c466:	ce 01       	movw	r24, r28
    c468:	8b 52       	subi	r24, 0x2B	; 43
    c46a:	9d 4f       	sbci	r25, 0xFD	; 253
    c46c:	21 e0       	ldi	r18, 0x01	; 1
    c46e:	30 e0       	ldi	r19, 0x00	; 0
    c470:	fc 01       	movw	r30, r24
    c472:	31 83       	std	Z+1, r19	; 0x01
    c474:	20 83       	st	Z, r18
    c476:	74 c0       	rjmp	.+232    	; 0xc560 <pick_drop+0x564e>
	else if (__tmp > 65535)
    c478:	ce 01       	movw	r24, r28
    c47a:	8f 52       	subi	r24, 0x2F	; 47
    c47c:	9d 4f       	sbci	r25, 0xFD	; 253
    c47e:	11 e0       	ldi	r17, 0x01	; 1
    c480:	fc 01       	movw	r30, r24
    c482:	60 81       	ld	r22, Z
    c484:	71 81       	ldd	r23, Z+1	; 0x01
    c486:	82 81       	ldd	r24, Z+2	; 0x02
    c488:	93 81       	ldd	r25, Z+3	; 0x03
    c48a:	20 e0       	ldi	r18, 0x00	; 0
    c48c:	3f ef       	ldi	r19, 0xFF	; 255
    c48e:	4f e7       	ldi	r20, 0x7F	; 127
    c490:	57 e4       	ldi	r21, 0x47	; 71
    c492:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    c496:	18 16       	cp	r1, r24
    c498:	0c f0       	brlt	.+2      	; 0xc49c <pick_drop+0x558a>
    c49a:	10 e0       	ldi	r17, 0x00	; 0
    c49c:	11 23       	and	r17, r17
    c49e:	09 f4       	brne	.+2      	; 0xc4a2 <pick_drop+0x5590>
    c4a0:	4d c0       	rjmp	.+154    	; 0xc53c <pick_drop+0x562a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c4a2:	ce 01       	movw	r24, r28
    c4a4:	83 53       	subi	r24, 0x33	; 51
    c4a6:	9d 4f       	sbci	r25, 0xFD	; 253
    c4a8:	fc 01       	movw	r30, r24
    c4aa:	60 81       	ld	r22, Z
    c4ac:	71 81       	ldd	r23, Z+1	; 0x01
    c4ae:	82 81       	ldd	r24, Z+2	; 0x02
    c4b0:	93 81       	ldd	r25, Z+3	; 0x03
    c4b2:	20 e0       	ldi	r18, 0x00	; 0
    c4b4:	30 e0       	ldi	r19, 0x00	; 0
    c4b6:	40 e2       	ldi	r20, 0x20	; 32
    c4b8:	51 e4       	ldi	r21, 0x41	; 65
    c4ba:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c4be:	dc 01       	movw	r26, r24
    c4c0:	cb 01       	movw	r24, r22
    c4c2:	8e 01       	movw	r16, r28
    c4c4:	0b 52       	subi	r16, 0x2B	; 43
    c4c6:	1d 4f       	sbci	r17, 0xFD	; 253
    c4c8:	bc 01       	movw	r22, r24
    c4ca:	cd 01       	movw	r24, r26
    c4cc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c4d0:	dc 01       	movw	r26, r24
    c4d2:	cb 01       	movw	r24, r22
    c4d4:	f8 01       	movw	r30, r16
    c4d6:	91 83       	std	Z+1, r25	; 0x01
    c4d8:	80 83       	st	Z, r24
    c4da:	27 c0       	rjmp	.+78     	; 0xc52a <pick_drop+0x5618>
    c4dc:	ce 01       	movw	r24, r28
    c4de:	89 52       	subi	r24, 0x29	; 41
    c4e0:	9d 4f       	sbci	r25, 0xFD	; 253
    c4e2:	20 e7       	ldi	r18, 0x70	; 112
    c4e4:	31 e0       	ldi	r19, 0x01	; 1
    c4e6:	fc 01       	movw	r30, r24
    c4e8:	31 83       	std	Z+1, r19	; 0x01
    c4ea:	20 83       	st	Z, r18
    c4ec:	ce 01       	movw	r24, r28
    c4ee:	89 52       	subi	r24, 0x29	; 41
    c4f0:	9d 4f       	sbci	r25, 0xFD	; 253
    c4f2:	fc 01       	movw	r30, r24
    c4f4:	80 81       	ld	r24, Z
    c4f6:	91 81       	ldd	r25, Z+1	; 0x01
    c4f8:	8c 01       	movw	r16, r24
    c4fa:	c8 01       	movw	r24, r16
    c4fc:	01 97       	sbiw	r24, 0x01	; 1
    c4fe:	f1 f7       	brne	.-4      	; 0xc4fc <pick_drop+0x55ea>
    c500:	8c 01       	movw	r16, r24
    c502:	ce 01       	movw	r24, r28
    c504:	89 52       	subi	r24, 0x29	; 41
    c506:	9d 4f       	sbci	r25, 0xFD	; 253
    c508:	fc 01       	movw	r30, r24
    c50a:	11 83       	std	Z+1, r17	; 0x01
    c50c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c50e:	ce 01       	movw	r24, r28
    c510:	8b 52       	subi	r24, 0x2B	; 43
    c512:	9d 4f       	sbci	r25, 0xFD	; 253
    c514:	9e 01       	movw	r18, r28
    c516:	2b 52       	subi	r18, 0x2B	; 43
    c518:	3d 4f       	sbci	r19, 0xFD	; 253
    c51a:	f9 01       	movw	r30, r18
    c51c:	20 81       	ld	r18, Z
    c51e:	31 81       	ldd	r19, Z+1	; 0x01
    c520:	21 50       	subi	r18, 0x01	; 1
    c522:	30 40       	sbci	r19, 0x00	; 0
    c524:	fc 01       	movw	r30, r24
    c526:	31 83       	std	Z+1, r19	; 0x01
    c528:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c52a:	ce 01       	movw	r24, r28
    c52c:	8b 52       	subi	r24, 0x2B	; 43
    c52e:	9d 4f       	sbci	r25, 0xFD	; 253
    c530:	fc 01       	movw	r30, r24
    c532:	80 81       	ld	r24, Z
    c534:	91 81       	ldd	r25, Z+1	; 0x01
    c536:	00 97       	sbiw	r24, 0x00	; 0
    c538:	89 f6       	brne	.-94     	; 0xc4dc <pick_drop+0x55ca>
    c53a:	2f c0       	rjmp	.+94     	; 0xc59a <pick_drop+0x5688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c53c:	8e 01       	movw	r16, r28
    c53e:	0b 52       	subi	r16, 0x2B	; 43
    c540:	1d 4f       	sbci	r17, 0xFD	; 253
    c542:	ce 01       	movw	r24, r28
    c544:	8f 52       	subi	r24, 0x2F	; 47
    c546:	9d 4f       	sbci	r25, 0xFD	; 253
    c548:	fc 01       	movw	r30, r24
    c54a:	60 81       	ld	r22, Z
    c54c:	71 81       	ldd	r23, Z+1	; 0x01
    c54e:	82 81       	ldd	r24, Z+2	; 0x02
    c550:	93 81       	ldd	r25, Z+3	; 0x03
    c552:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c556:	dc 01       	movw	r26, r24
    c558:	cb 01       	movw	r24, r22
    c55a:	f8 01       	movw	r30, r16
    c55c:	91 83       	std	Z+1, r25	; 0x01
    c55e:	80 83       	st	Z, r24
    c560:	ce 01       	movw	r24, r28
    c562:	87 52       	subi	r24, 0x27	; 39
    c564:	9d 4f       	sbci	r25, 0xFD	; 253
    c566:	9e 01       	movw	r18, r28
    c568:	2b 52       	subi	r18, 0x2B	; 43
    c56a:	3d 4f       	sbci	r19, 0xFD	; 253
    c56c:	f9 01       	movw	r30, r18
    c56e:	20 81       	ld	r18, Z
    c570:	31 81       	ldd	r19, Z+1	; 0x01
    c572:	fc 01       	movw	r30, r24
    c574:	31 83       	std	Z+1, r19	; 0x01
    c576:	20 83       	st	Z, r18
    c578:	ce 01       	movw	r24, r28
    c57a:	87 52       	subi	r24, 0x27	; 39
    c57c:	9d 4f       	sbci	r25, 0xFD	; 253
    c57e:	fc 01       	movw	r30, r24
    c580:	80 81       	ld	r24, Z
    c582:	91 81       	ldd	r25, Z+1	; 0x01
    c584:	8c 01       	movw	r16, r24
    c586:	c8 01       	movw	r24, r16
    c588:	01 97       	sbiw	r24, 0x01	; 1
    c58a:	f1 f7       	brne	.-4      	; 0xc588 <pick_drop+0x5676>
    c58c:	8c 01       	movw	r16, r24
    c58e:	ce 01       	movw	r24, r28
    c590:	87 52       	subi	r24, 0x27	; 39
    c592:	9d 4f       	sbci	r25, 0xFD	; 253
    c594:	fc 01       	movw	r30, r24
    c596:	11 83       	std	Z+1, r17	; 0x01
    c598:	00 83       	st	Z, r16
					_delay_ms(100);
					left_degrees(50);
    c59a:	82 e3       	ldi	r24, 0x32	; 50
    c59c:	90 e0       	ldi	r25, 0x00	; 0
    c59e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
    c5a2:	9e 01       	movw	r18, r28
    c5a4:	25 52       	subi	r18, 0x25	; 37
    c5a6:	3d 4f       	sbci	r19, 0xFD	; 253
    c5a8:	80 e0       	ldi	r24, 0x00	; 0
    c5aa:	90 e0       	ldi	r25, 0x00	; 0
    c5ac:	a0 ea       	ldi	r26, 0xA0	; 160
    c5ae:	b1 e4       	ldi	r27, 0x41	; 65
    c5b0:	f9 01       	movw	r30, r18
    c5b2:	80 83       	st	Z, r24
    c5b4:	91 83       	std	Z+1, r25	; 0x01
    c5b6:	a2 83       	std	Z+2, r26	; 0x02
    c5b8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c5ba:	8e 01       	movw	r16, r28
    c5bc:	01 52       	subi	r16, 0x21	; 33
    c5be:	1d 4f       	sbci	r17, 0xFD	; 253
    c5c0:	ce 01       	movw	r24, r28
    c5c2:	85 52       	subi	r24, 0x25	; 37
    c5c4:	9d 4f       	sbci	r25, 0xFD	; 253
    c5c6:	fc 01       	movw	r30, r24
    c5c8:	60 81       	ld	r22, Z
    c5ca:	71 81       	ldd	r23, Z+1	; 0x01
    c5cc:	82 81       	ldd	r24, Z+2	; 0x02
    c5ce:	93 81       	ldd	r25, Z+3	; 0x03
    c5d0:	26 e6       	ldi	r18, 0x66	; 102
    c5d2:	36 e6       	ldi	r19, 0x66	; 102
    c5d4:	46 e6       	ldi	r20, 0x66	; 102
    c5d6:	55 e4       	ldi	r21, 0x45	; 69
    c5d8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c5dc:	dc 01       	movw	r26, r24
    c5de:	cb 01       	movw	r24, r22
    c5e0:	f8 01       	movw	r30, r16
    c5e2:	80 83       	st	Z, r24
    c5e4:	91 83       	std	Z+1, r25	; 0x01
    c5e6:	a2 83       	std	Z+2, r26	; 0x02
    c5e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c5ea:	ce 01       	movw	r24, r28
    c5ec:	81 52       	subi	r24, 0x21	; 33
    c5ee:	9d 4f       	sbci	r25, 0xFD	; 253
    c5f0:	11 e0       	ldi	r17, 0x01	; 1
    c5f2:	fc 01       	movw	r30, r24
    c5f4:	60 81       	ld	r22, Z
    c5f6:	71 81       	ldd	r23, Z+1	; 0x01
    c5f8:	82 81       	ldd	r24, Z+2	; 0x02
    c5fa:	93 81       	ldd	r25, Z+3	; 0x03
    c5fc:	20 e0       	ldi	r18, 0x00	; 0
    c5fe:	30 e0       	ldi	r19, 0x00	; 0
    c600:	40 e8       	ldi	r20, 0x80	; 128
    c602:	5f e3       	ldi	r21, 0x3F	; 63
    c604:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    c608:	88 23       	and	r24, r24
    c60a:	0c f0       	brlt	.+2      	; 0xc60e <pick_drop+0x56fc>
    c60c:	10 e0       	ldi	r17, 0x00	; 0
    c60e:	11 23       	and	r17, r17
    c610:	49 f0       	breq	.+18     	; 0xc624 <pick_drop+0x5712>
		__ticks = 1;
    c612:	ce 01       	movw	r24, r28
    c614:	8d 51       	subi	r24, 0x1D	; 29
    c616:	9d 4f       	sbci	r25, 0xFD	; 253
    c618:	21 e0       	ldi	r18, 0x01	; 1
    c61a:	30 e0       	ldi	r19, 0x00	; 0
    c61c:	fc 01       	movw	r30, r24
    c61e:	31 83       	std	Z+1, r19	; 0x01
    c620:	20 83       	st	Z, r18
    c622:	74 c0       	rjmp	.+232    	; 0xc70c <pick_drop+0x57fa>
	else if (__tmp > 65535)
    c624:	ce 01       	movw	r24, r28
    c626:	81 52       	subi	r24, 0x21	; 33
    c628:	9d 4f       	sbci	r25, 0xFD	; 253
    c62a:	11 e0       	ldi	r17, 0x01	; 1
    c62c:	fc 01       	movw	r30, r24
    c62e:	60 81       	ld	r22, Z
    c630:	71 81       	ldd	r23, Z+1	; 0x01
    c632:	82 81       	ldd	r24, Z+2	; 0x02
    c634:	93 81       	ldd	r25, Z+3	; 0x03
    c636:	20 e0       	ldi	r18, 0x00	; 0
    c638:	3f ef       	ldi	r19, 0xFF	; 255
    c63a:	4f e7       	ldi	r20, 0x7F	; 127
    c63c:	57 e4       	ldi	r21, 0x47	; 71
    c63e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    c642:	18 16       	cp	r1, r24
    c644:	0c f0       	brlt	.+2      	; 0xc648 <pick_drop+0x5736>
    c646:	10 e0       	ldi	r17, 0x00	; 0
    c648:	11 23       	and	r17, r17
    c64a:	09 f4       	brne	.+2      	; 0xc64e <pick_drop+0x573c>
    c64c:	4d c0       	rjmp	.+154    	; 0xc6e8 <pick_drop+0x57d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c64e:	ce 01       	movw	r24, r28
    c650:	85 52       	subi	r24, 0x25	; 37
    c652:	9d 4f       	sbci	r25, 0xFD	; 253
    c654:	fc 01       	movw	r30, r24
    c656:	60 81       	ld	r22, Z
    c658:	71 81       	ldd	r23, Z+1	; 0x01
    c65a:	82 81       	ldd	r24, Z+2	; 0x02
    c65c:	93 81       	ldd	r25, Z+3	; 0x03
    c65e:	20 e0       	ldi	r18, 0x00	; 0
    c660:	30 e0       	ldi	r19, 0x00	; 0
    c662:	40 e2       	ldi	r20, 0x20	; 32
    c664:	51 e4       	ldi	r21, 0x41	; 65
    c666:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c66a:	dc 01       	movw	r26, r24
    c66c:	cb 01       	movw	r24, r22
    c66e:	8e 01       	movw	r16, r28
    c670:	0d 51       	subi	r16, 0x1D	; 29
    c672:	1d 4f       	sbci	r17, 0xFD	; 253
    c674:	bc 01       	movw	r22, r24
    c676:	cd 01       	movw	r24, r26
    c678:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c67c:	dc 01       	movw	r26, r24
    c67e:	cb 01       	movw	r24, r22
    c680:	f8 01       	movw	r30, r16
    c682:	91 83       	std	Z+1, r25	; 0x01
    c684:	80 83       	st	Z, r24
    c686:	27 c0       	rjmp	.+78     	; 0xc6d6 <pick_drop+0x57c4>
    c688:	ce 01       	movw	r24, r28
    c68a:	8b 51       	subi	r24, 0x1B	; 27
    c68c:	9d 4f       	sbci	r25, 0xFD	; 253
    c68e:	20 e7       	ldi	r18, 0x70	; 112
    c690:	31 e0       	ldi	r19, 0x01	; 1
    c692:	fc 01       	movw	r30, r24
    c694:	31 83       	std	Z+1, r19	; 0x01
    c696:	20 83       	st	Z, r18
    c698:	ce 01       	movw	r24, r28
    c69a:	8b 51       	subi	r24, 0x1B	; 27
    c69c:	9d 4f       	sbci	r25, 0xFD	; 253
    c69e:	fc 01       	movw	r30, r24
    c6a0:	80 81       	ld	r24, Z
    c6a2:	91 81       	ldd	r25, Z+1	; 0x01
    c6a4:	8c 01       	movw	r16, r24
    c6a6:	c8 01       	movw	r24, r16
    c6a8:	01 97       	sbiw	r24, 0x01	; 1
    c6aa:	f1 f7       	brne	.-4      	; 0xc6a8 <pick_drop+0x5796>
    c6ac:	8c 01       	movw	r16, r24
    c6ae:	ce 01       	movw	r24, r28
    c6b0:	8b 51       	subi	r24, 0x1B	; 27
    c6b2:	9d 4f       	sbci	r25, 0xFD	; 253
    c6b4:	fc 01       	movw	r30, r24
    c6b6:	11 83       	std	Z+1, r17	; 0x01
    c6b8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c6ba:	ce 01       	movw	r24, r28
    c6bc:	8d 51       	subi	r24, 0x1D	; 29
    c6be:	9d 4f       	sbci	r25, 0xFD	; 253
    c6c0:	9e 01       	movw	r18, r28
    c6c2:	2d 51       	subi	r18, 0x1D	; 29
    c6c4:	3d 4f       	sbci	r19, 0xFD	; 253
    c6c6:	f9 01       	movw	r30, r18
    c6c8:	20 81       	ld	r18, Z
    c6ca:	31 81       	ldd	r19, Z+1	; 0x01
    c6cc:	21 50       	subi	r18, 0x01	; 1
    c6ce:	30 40       	sbci	r19, 0x00	; 0
    c6d0:	fc 01       	movw	r30, r24
    c6d2:	31 83       	std	Z+1, r19	; 0x01
    c6d4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c6d6:	ce 01       	movw	r24, r28
    c6d8:	8d 51       	subi	r24, 0x1D	; 29
    c6da:	9d 4f       	sbci	r25, 0xFD	; 253
    c6dc:	fc 01       	movw	r30, r24
    c6de:	80 81       	ld	r24, Z
    c6e0:	91 81       	ldd	r25, Z+1	; 0x01
    c6e2:	00 97       	sbiw	r24, 0x00	; 0
    c6e4:	89 f6       	brne	.-94     	; 0xc688 <pick_drop+0x5776>
    c6e6:	2f c0       	rjmp	.+94     	; 0xc746 <pick_drop+0x5834>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c6e8:	8e 01       	movw	r16, r28
    c6ea:	0d 51       	subi	r16, 0x1D	; 29
    c6ec:	1d 4f       	sbci	r17, 0xFD	; 253
    c6ee:	ce 01       	movw	r24, r28
    c6f0:	81 52       	subi	r24, 0x21	; 33
    c6f2:	9d 4f       	sbci	r25, 0xFD	; 253
    c6f4:	fc 01       	movw	r30, r24
    c6f6:	60 81       	ld	r22, Z
    c6f8:	71 81       	ldd	r23, Z+1	; 0x01
    c6fa:	82 81       	ldd	r24, Z+2	; 0x02
    c6fc:	93 81       	ldd	r25, Z+3	; 0x03
    c6fe:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c702:	dc 01       	movw	r26, r24
    c704:	cb 01       	movw	r24, r22
    c706:	f8 01       	movw	r30, r16
    c708:	91 83       	std	Z+1, r25	; 0x01
    c70a:	80 83       	st	Z, r24
    c70c:	ce 01       	movw	r24, r28
    c70e:	89 51       	subi	r24, 0x19	; 25
    c710:	9d 4f       	sbci	r25, 0xFD	; 253
    c712:	9e 01       	movw	r18, r28
    c714:	2d 51       	subi	r18, 0x1D	; 29
    c716:	3d 4f       	sbci	r19, 0xFD	; 253
    c718:	f9 01       	movw	r30, r18
    c71a:	20 81       	ld	r18, Z
    c71c:	31 81       	ldd	r19, Z+1	; 0x01
    c71e:	fc 01       	movw	r30, r24
    c720:	31 83       	std	Z+1, r19	; 0x01
    c722:	20 83       	st	Z, r18
    c724:	ce 01       	movw	r24, r28
    c726:	89 51       	subi	r24, 0x19	; 25
    c728:	9d 4f       	sbci	r25, 0xFD	; 253
    c72a:	fc 01       	movw	r30, r24
    c72c:	80 81       	ld	r24, Z
    c72e:	91 81       	ldd	r25, Z+1	; 0x01
    c730:	8c 01       	movw	r16, r24
    c732:	c8 01       	movw	r24, r16
    c734:	01 97       	sbiw	r24, 0x01	; 1
    c736:	f1 f7       	brne	.-4      	; 0xc734 <pick_drop+0x5822>
    c738:	8c 01       	movw	r16, r24
    c73a:	ce 01       	movw	r24, r28
    c73c:	89 51       	subi	r24, 0x19	; 25
    c73e:	9d 4f       	sbci	r25, 0xFD	; 253
    c740:	fc 01       	movw	r30, r24
    c742:	11 83       	std	Z+1, r17	; 0x01
    c744:	00 83       	st	Z, r16
					_delay_ms(20);
					back_mm(55);
    c746:	87 e3       	ldi	r24, 0x37	; 55
    c748:	90 e0       	ldi	r25, 0x00	; 0
    c74a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    c74e:	9e 01       	movw	r18, r28
    c750:	27 51       	subi	r18, 0x17	; 23
    c752:	3d 4f       	sbci	r19, 0xFD	; 253
    c754:	80 e0       	ldi	r24, 0x00	; 0
    c756:	90 e0       	ldi	r25, 0x00	; 0
    c758:	a0 ea       	ldi	r26, 0xA0	; 160
    c75a:	b1 e4       	ldi	r27, 0x41	; 65
    c75c:	f9 01       	movw	r30, r18
    c75e:	80 83       	st	Z, r24
    c760:	91 83       	std	Z+1, r25	; 0x01
    c762:	a2 83       	std	Z+2, r26	; 0x02
    c764:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c766:	8e 01       	movw	r16, r28
    c768:	03 51       	subi	r16, 0x13	; 19
    c76a:	1d 4f       	sbci	r17, 0xFD	; 253
    c76c:	ce 01       	movw	r24, r28
    c76e:	87 51       	subi	r24, 0x17	; 23
    c770:	9d 4f       	sbci	r25, 0xFD	; 253
    c772:	fc 01       	movw	r30, r24
    c774:	60 81       	ld	r22, Z
    c776:	71 81       	ldd	r23, Z+1	; 0x01
    c778:	82 81       	ldd	r24, Z+2	; 0x02
    c77a:	93 81       	ldd	r25, Z+3	; 0x03
    c77c:	26 e6       	ldi	r18, 0x66	; 102
    c77e:	36 e6       	ldi	r19, 0x66	; 102
    c780:	46 e6       	ldi	r20, 0x66	; 102
    c782:	55 e4       	ldi	r21, 0x45	; 69
    c784:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c788:	dc 01       	movw	r26, r24
    c78a:	cb 01       	movw	r24, r22
    c78c:	f8 01       	movw	r30, r16
    c78e:	80 83       	st	Z, r24
    c790:	91 83       	std	Z+1, r25	; 0x01
    c792:	a2 83       	std	Z+2, r26	; 0x02
    c794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c796:	ce 01       	movw	r24, r28
    c798:	83 51       	subi	r24, 0x13	; 19
    c79a:	9d 4f       	sbci	r25, 0xFD	; 253
    c79c:	11 e0       	ldi	r17, 0x01	; 1
    c79e:	fc 01       	movw	r30, r24
    c7a0:	60 81       	ld	r22, Z
    c7a2:	71 81       	ldd	r23, Z+1	; 0x01
    c7a4:	82 81       	ldd	r24, Z+2	; 0x02
    c7a6:	93 81       	ldd	r25, Z+3	; 0x03
    c7a8:	20 e0       	ldi	r18, 0x00	; 0
    c7aa:	30 e0       	ldi	r19, 0x00	; 0
    c7ac:	40 e8       	ldi	r20, 0x80	; 128
    c7ae:	5f e3       	ldi	r21, 0x3F	; 63
    c7b0:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    c7b4:	88 23       	and	r24, r24
    c7b6:	0c f0       	brlt	.+2      	; 0xc7ba <pick_drop+0x58a8>
    c7b8:	10 e0       	ldi	r17, 0x00	; 0
    c7ba:	11 23       	and	r17, r17
    c7bc:	49 f0       	breq	.+18     	; 0xc7d0 <pick_drop+0x58be>
		__ticks = 1;
    c7be:	ce 01       	movw	r24, r28
    c7c0:	8f 50       	subi	r24, 0x0F	; 15
    c7c2:	9d 4f       	sbci	r25, 0xFD	; 253
    c7c4:	21 e0       	ldi	r18, 0x01	; 1
    c7c6:	30 e0       	ldi	r19, 0x00	; 0
    c7c8:	fc 01       	movw	r30, r24
    c7ca:	31 83       	std	Z+1, r19	; 0x01
    c7cc:	20 83       	st	Z, r18
    c7ce:	74 c0       	rjmp	.+232    	; 0xc8b8 <pick_drop+0x59a6>
	else if (__tmp > 65535)
    c7d0:	ce 01       	movw	r24, r28
    c7d2:	83 51       	subi	r24, 0x13	; 19
    c7d4:	9d 4f       	sbci	r25, 0xFD	; 253
    c7d6:	11 e0       	ldi	r17, 0x01	; 1
    c7d8:	fc 01       	movw	r30, r24
    c7da:	60 81       	ld	r22, Z
    c7dc:	71 81       	ldd	r23, Z+1	; 0x01
    c7de:	82 81       	ldd	r24, Z+2	; 0x02
    c7e0:	93 81       	ldd	r25, Z+3	; 0x03
    c7e2:	20 e0       	ldi	r18, 0x00	; 0
    c7e4:	3f ef       	ldi	r19, 0xFF	; 255
    c7e6:	4f e7       	ldi	r20, 0x7F	; 127
    c7e8:	57 e4       	ldi	r21, 0x47	; 71
    c7ea:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    c7ee:	18 16       	cp	r1, r24
    c7f0:	0c f0       	brlt	.+2      	; 0xc7f4 <pick_drop+0x58e2>
    c7f2:	10 e0       	ldi	r17, 0x00	; 0
    c7f4:	11 23       	and	r17, r17
    c7f6:	09 f4       	brne	.+2      	; 0xc7fa <pick_drop+0x58e8>
    c7f8:	4d c0       	rjmp	.+154    	; 0xc894 <pick_drop+0x5982>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c7fa:	ce 01       	movw	r24, r28
    c7fc:	87 51       	subi	r24, 0x17	; 23
    c7fe:	9d 4f       	sbci	r25, 0xFD	; 253
    c800:	fc 01       	movw	r30, r24
    c802:	60 81       	ld	r22, Z
    c804:	71 81       	ldd	r23, Z+1	; 0x01
    c806:	82 81       	ldd	r24, Z+2	; 0x02
    c808:	93 81       	ldd	r25, Z+3	; 0x03
    c80a:	20 e0       	ldi	r18, 0x00	; 0
    c80c:	30 e0       	ldi	r19, 0x00	; 0
    c80e:	40 e2       	ldi	r20, 0x20	; 32
    c810:	51 e4       	ldi	r21, 0x41	; 65
    c812:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c816:	dc 01       	movw	r26, r24
    c818:	cb 01       	movw	r24, r22
    c81a:	8e 01       	movw	r16, r28
    c81c:	0f 50       	subi	r16, 0x0F	; 15
    c81e:	1d 4f       	sbci	r17, 0xFD	; 253
    c820:	bc 01       	movw	r22, r24
    c822:	cd 01       	movw	r24, r26
    c824:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c828:	dc 01       	movw	r26, r24
    c82a:	cb 01       	movw	r24, r22
    c82c:	f8 01       	movw	r30, r16
    c82e:	91 83       	std	Z+1, r25	; 0x01
    c830:	80 83       	st	Z, r24
    c832:	27 c0       	rjmp	.+78     	; 0xc882 <pick_drop+0x5970>
    c834:	ce 01       	movw	r24, r28
    c836:	8d 50       	subi	r24, 0x0D	; 13
    c838:	9d 4f       	sbci	r25, 0xFD	; 253
    c83a:	20 e7       	ldi	r18, 0x70	; 112
    c83c:	31 e0       	ldi	r19, 0x01	; 1
    c83e:	fc 01       	movw	r30, r24
    c840:	31 83       	std	Z+1, r19	; 0x01
    c842:	20 83       	st	Z, r18
    c844:	ce 01       	movw	r24, r28
    c846:	8d 50       	subi	r24, 0x0D	; 13
    c848:	9d 4f       	sbci	r25, 0xFD	; 253
    c84a:	fc 01       	movw	r30, r24
    c84c:	80 81       	ld	r24, Z
    c84e:	91 81       	ldd	r25, Z+1	; 0x01
    c850:	8c 01       	movw	r16, r24
    c852:	c8 01       	movw	r24, r16
    c854:	01 97       	sbiw	r24, 0x01	; 1
    c856:	f1 f7       	brne	.-4      	; 0xc854 <pick_drop+0x5942>
    c858:	8c 01       	movw	r16, r24
    c85a:	ce 01       	movw	r24, r28
    c85c:	8d 50       	subi	r24, 0x0D	; 13
    c85e:	9d 4f       	sbci	r25, 0xFD	; 253
    c860:	fc 01       	movw	r30, r24
    c862:	11 83       	std	Z+1, r17	; 0x01
    c864:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c866:	ce 01       	movw	r24, r28
    c868:	8f 50       	subi	r24, 0x0F	; 15
    c86a:	9d 4f       	sbci	r25, 0xFD	; 253
    c86c:	9e 01       	movw	r18, r28
    c86e:	2f 50       	subi	r18, 0x0F	; 15
    c870:	3d 4f       	sbci	r19, 0xFD	; 253
    c872:	f9 01       	movw	r30, r18
    c874:	20 81       	ld	r18, Z
    c876:	31 81       	ldd	r19, Z+1	; 0x01
    c878:	21 50       	subi	r18, 0x01	; 1
    c87a:	30 40       	sbci	r19, 0x00	; 0
    c87c:	fc 01       	movw	r30, r24
    c87e:	31 83       	std	Z+1, r19	; 0x01
    c880:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c882:	ce 01       	movw	r24, r28
    c884:	8f 50       	subi	r24, 0x0F	; 15
    c886:	9d 4f       	sbci	r25, 0xFD	; 253
    c888:	fc 01       	movw	r30, r24
    c88a:	80 81       	ld	r24, Z
    c88c:	91 81       	ldd	r25, Z+1	; 0x01
    c88e:	00 97       	sbiw	r24, 0x00	; 0
    c890:	89 f6       	brne	.-94     	; 0xc834 <pick_drop+0x5922>
    c892:	e2 c1       	rjmp	.+964    	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c894:	8e 01       	movw	r16, r28
    c896:	0f 50       	subi	r16, 0x0F	; 15
    c898:	1d 4f       	sbci	r17, 0xFD	; 253
    c89a:	ce 01       	movw	r24, r28
    c89c:	83 51       	subi	r24, 0x13	; 19
    c89e:	9d 4f       	sbci	r25, 0xFD	; 253
    c8a0:	fc 01       	movw	r30, r24
    c8a2:	60 81       	ld	r22, Z
    c8a4:	71 81       	ldd	r23, Z+1	; 0x01
    c8a6:	82 81       	ldd	r24, Z+2	; 0x02
    c8a8:	93 81       	ldd	r25, Z+3	; 0x03
    c8aa:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c8ae:	dc 01       	movw	r26, r24
    c8b0:	cb 01       	movw	r24, r22
    c8b2:	f8 01       	movw	r30, r16
    c8b4:	91 83       	std	Z+1, r25	; 0x01
    c8b6:	80 83       	st	Z, r24
    c8b8:	ce 01       	movw	r24, r28
    c8ba:	8b 50       	subi	r24, 0x0B	; 11
    c8bc:	9d 4f       	sbci	r25, 0xFD	; 253
    c8be:	9e 01       	movw	r18, r28
    c8c0:	2f 50       	subi	r18, 0x0F	; 15
    c8c2:	3d 4f       	sbci	r19, 0xFD	; 253
    c8c4:	f9 01       	movw	r30, r18
    c8c6:	20 81       	ld	r18, Z
    c8c8:	31 81       	ldd	r19, Z+1	; 0x01
    c8ca:	fc 01       	movw	r30, r24
    c8cc:	31 83       	std	Z+1, r19	; 0x01
    c8ce:	20 83       	st	Z, r18
    c8d0:	ce 01       	movw	r24, r28
    c8d2:	8b 50       	subi	r24, 0x0B	; 11
    c8d4:	9d 4f       	sbci	r25, 0xFD	; 253
    c8d6:	fc 01       	movw	r30, r24
    c8d8:	80 81       	ld	r24, Z
    c8da:	91 81       	ldd	r25, Z+1	; 0x01
    c8dc:	8c 01       	movw	r16, r24
    c8de:	c8 01       	movw	r24, r16
    c8e0:	01 97       	sbiw	r24, 0x01	; 1
    c8e2:	f1 f7       	brne	.-4      	; 0xc8e0 <pick_drop+0x59ce>
    c8e4:	8c 01       	movw	r16, r24
    c8e6:	ce 01       	movw	r24, r28
    c8e8:	8b 50       	subi	r24, 0x0B	; 11
    c8ea:	9d 4f       	sbci	r25, 0xFD	; 253
    c8ec:	fc 01       	movw	r30, r24
    c8ee:	11 83       	std	Z+1, r17	; 0x01
    c8f0:	00 83       	st	Z, r16
    c8f2:	b2 c1       	rjmp	.+868    	; 0xcc58 <pick_drop+0x5d46>
					_delay_ms(20);
				}
		}
			else if(pd=='8'){
    c8f4:	ce 01       	movw	r24, r28
    c8f6:	8d 5e       	subi	r24, 0xED	; 237
    c8f8:	9c 4f       	sbci	r25, 0xFC	; 252
    c8fa:	fc 01       	movw	r30, r24
    c8fc:	80 81       	ld	r24, Z
    c8fe:	88 33       	cpi	r24, 0x38	; 56
    c900:	09 f0       	breq	.+2      	; 0xc904 <pick_drop+0x59f2>
    c902:	aa c1       	rjmp	.+852    	; 0xcc58 <pick_drop+0x5d46>
				front();
    c904:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    c908:	9e 01       	movw	r18, r28
    c90a:	29 50       	subi	r18, 0x09	; 9
    c90c:	3d 4f       	sbci	r19, 0xFD	; 253
    c90e:	80 e0       	ldi	r24, 0x00	; 0
    c910:	90 e0       	ldi	r25, 0x00	; 0
    c912:	a8 ec       	ldi	r26, 0xC8	; 200
    c914:	b2 e4       	ldi	r27, 0x42	; 66
    c916:	f9 01       	movw	r30, r18
    c918:	80 83       	st	Z, r24
    c91a:	91 83       	std	Z+1, r25	; 0x01
    c91c:	a2 83       	std	Z+2, r26	; 0x02
    c91e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c920:	8e 01       	movw	r16, r28
    c922:	05 50       	subi	r16, 0x05	; 5
    c924:	1d 4f       	sbci	r17, 0xFD	; 253
    c926:	ce 01       	movw	r24, r28
    c928:	89 50       	subi	r24, 0x09	; 9
    c92a:	9d 4f       	sbci	r25, 0xFD	; 253
    c92c:	fc 01       	movw	r30, r24
    c92e:	60 81       	ld	r22, Z
    c930:	71 81       	ldd	r23, Z+1	; 0x01
    c932:	82 81       	ldd	r24, Z+2	; 0x02
    c934:	93 81       	ldd	r25, Z+3	; 0x03
    c936:	26 e6       	ldi	r18, 0x66	; 102
    c938:	36 e6       	ldi	r19, 0x66	; 102
    c93a:	46 e6       	ldi	r20, 0x66	; 102
    c93c:	55 e4       	ldi	r21, 0x45	; 69
    c93e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c942:	dc 01       	movw	r26, r24
    c944:	cb 01       	movw	r24, r22
    c946:	f8 01       	movw	r30, r16
    c948:	80 83       	st	Z, r24
    c94a:	91 83       	std	Z+1, r25	; 0x01
    c94c:	a2 83       	std	Z+2, r26	; 0x02
    c94e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c950:	ce 01       	movw	r24, r28
    c952:	85 50       	subi	r24, 0x05	; 5
    c954:	9d 4f       	sbci	r25, 0xFD	; 253
    c956:	11 e0       	ldi	r17, 0x01	; 1
    c958:	fc 01       	movw	r30, r24
    c95a:	60 81       	ld	r22, Z
    c95c:	71 81       	ldd	r23, Z+1	; 0x01
    c95e:	82 81       	ldd	r24, Z+2	; 0x02
    c960:	93 81       	ldd	r25, Z+3	; 0x03
    c962:	20 e0       	ldi	r18, 0x00	; 0
    c964:	30 e0       	ldi	r19, 0x00	; 0
    c966:	40 e8       	ldi	r20, 0x80	; 128
    c968:	5f e3       	ldi	r21, 0x3F	; 63
    c96a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    c96e:	88 23       	and	r24, r24
    c970:	0c f0       	brlt	.+2      	; 0xc974 <pick_drop+0x5a62>
    c972:	10 e0       	ldi	r17, 0x00	; 0
    c974:	11 23       	and	r17, r17
    c976:	49 f0       	breq	.+18     	; 0xc98a <pick_drop+0x5a78>
		__ticks = 1;
    c978:	ce 01       	movw	r24, r28
    c97a:	81 50       	subi	r24, 0x01	; 1
    c97c:	9d 4f       	sbci	r25, 0xFD	; 253
    c97e:	21 e0       	ldi	r18, 0x01	; 1
    c980:	30 e0       	ldi	r19, 0x00	; 0
    c982:	fc 01       	movw	r30, r24
    c984:	31 83       	std	Z+1, r19	; 0x01
    c986:	20 83       	st	Z, r18
    c988:	74 c0       	rjmp	.+232    	; 0xca72 <pick_drop+0x5b60>
	else if (__tmp > 65535)
    c98a:	ce 01       	movw	r24, r28
    c98c:	85 50       	subi	r24, 0x05	; 5
    c98e:	9d 4f       	sbci	r25, 0xFD	; 253
    c990:	11 e0       	ldi	r17, 0x01	; 1
    c992:	fc 01       	movw	r30, r24
    c994:	60 81       	ld	r22, Z
    c996:	71 81       	ldd	r23, Z+1	; 0x01
    c998:	82 81       	ldd	r24, Z+2	; 0x02
    c99a:	93 81       	ldd	r25, Z+3	; 0x03
    c99c:	20 e0       	ldi	r18, 0x00	; 0
    c99e:	3f ef       	ldi	r19, 0xFF	; 255
    c9a0:	4f e7       	ldi	r20, 0x7F	; 127
    c9a2:	57 e4       	ldi	r21, 0x47	; 71
    c9a4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    c9a8:	18 16       	cp	r1, r24
    c9aa:	0c f0       	brlt	.+2      	; 0xc9ae <pick_drop+0x5a9c>
    c9ac:	10 e0       	ldi	r17, 0x00	; 0
    c9ae:	11 23       	and	r17, r17
    c9b0:	09 f4       	brne	.+2      	; 0xc9b4 <pick_drop+0x5aa2>
    c9b2:	4d c0       	rjmp	.+154    	; 0xca4e <pick_drop+0x5b3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c9b4:	ce 01       	movw	r24, r28
    c9b6:	89 50       	subi	r24, 0x09	; 9
    c9b8:	9d 4f       	sbci	r25, 0xFD	; 253
    c9ba:	fc 01       	movw	r30, r24
    c9bc:	60 81       	ld	r22, Z
    c9be:	71 81       	ldd	r23, Z+1	; 0x01
    c9c0:	82 81       	ldd	r24, Z+2	; 0x02
    c9c2:	93 81       	ldd	r25, Z+3	; 0x03
    c9c4:	20 e0       	ldi	r18, 0x00	; 0
    c9c6:	30 e0       	ldi	r19, 0x00	; 0
    c9c8:	40 e2       	ldi	r20, 0x20	; 32
    c9ca:	51 e4       	ldi	r21, 0x41	; 65
    c9cc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    c9d0:	dc 01       	movw	r26, r24
    c9d2:	cb 01       	movw	r24, r22
    c9d4:	8e 01       	movw	r16, r28
    c9d6:	01 50       	subi	r16, 0x01	; 1
    c9d8:	1d 4f       	sbci	r17, 0xFD	; 253
    c9da:	bc 01       	movw	r22, r24
    c9dc:	cd 01       	movw	r24, r26
    c9de:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    c9e2:	dc 01       	movw	r26, r24
    c9e4:	cb 01       	movw	r24, r22
    c9e6:	f8 01       	movw	r30, r16
    c9e8:	91 83       	std	Z+1, r25	; 0x01
    c9ea:	80 83       	st	Z, r24
    c9ec:	27 c0       	rjmp	.+78     	; 0xca3c <pick_drop+0x5b2a>
    c9ee:	ce 01       	movw	r24, r28
    c9f0:	8f 5f       	subi	r24, 0xFF	; 255
    c9f2:	9c 4f       	sbci	r25, 0xFC	; 252
    c9f4:	20 e7       	ldi	r18, 0x70	; 112
    c9f6:	31 e0       	ldi	r19, 0x01	; 1
    c9f8:	fc 01       	movw	r30, r24
    c9fa:	31 83       	std	Z+1, r19	; 0x01
    c9fc:	20 83       	st	Z, r18
    c9fe:	ce 01       	movw	r24, r28
    ca00:	8f 5f       	subi	r24, 0xFF	; 255
    ca02:	9c 4f       	sbci	r25, 0xFC	; 252
    ca04:	fc 01       	movw	r30, r24
    ca06:	80 81       	ld	r24, Z
    ca08:	91 81       	ldd	r25, Z+1	; 0x01
    ca0a:	8c 01       	movw	r16, r24
    ca0c:	c8 01       	movw	r24, r16
    ca0e:	01 97       	sbiw	r24, 0x01	; 1
    ca10:	f1 f7       	brne	.-4      	; 0xca0e <pick_drop+0x5afc>
    ca12:	8c 01       	movw	r16, r24
    ca14:	ce 01       	movw	r24, r28
    ca16:	8f 5f       	subi	r24, 0xFF	; 255
    ca18:	9c 4f       	sbci	r25, 0xFC	; 252
    ca1a:	fc 01       	movw	r30, r24
    ca1c:	11 83       	std	Z+1, r17	; 0x01
    ca1e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ca20:	ce 01       	movw	r24, r28
    ca22:	81 50       	subi	r24, 0x01	; 1
    ca24:	9d 4f       	sbci	r25, 0xFD	; 253
    ca26:	9e 01       	movw	r18, r28
    ca28:	21 50       	subi	r18, 0x01	; 1
    ca2a:	3d 4f       	sbci	r19, 0xFD	; 253
    ca2c:	f9 01       	movw	r30, r18
    ca2e:	20 81       	ld	r18, Z
    ca30:	31 81       	ldd	r19, Z+1	; 0x01
    ca32:	21 50       	subi	r18, 0x01	; 1
    ca34:	30 40       	sbci	r19, 0x00	; 0
    ca36:	fc 01       	movw	r30, r24
    ca38:	31 83       	std	Z+1, r19	; 0x01
    ca3a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ca3c:	ce 01       	movw	r24, r28
    ca3e:	81 50       	subi	r24, 0x01	; 1
    ca40:	9d 4f       	sbci	r25, 0xFD	; 253
    ca42:	fc 01       	movw	r30, r24
    ca44:	80 81       	ld	r24, Z
    ca46:	91 81       	ldd	r25, Z+1	; 0x01
    ca48:	00 97       	sbiw	r24, 0x00	; 0
    ca4a:	89 f6       	brne	.-94     	; 0xc9ee <pick_drop+0x5adc>
    ca4c:	2f c0       	rjmp	.+94     	; 0xcaac <pick_drop+0x5b9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ca4e:	8e 01       	movw	r16, r28
    ca50:	01 50       	subi	r16, 0x01	; 1
    ca52:	1d 4f       	sbci	r17, 0xFD	; 253
    ca54:	ce 01       	movw	r24, r28
    ca56:	85 50       	subi	r24, 0x05	; 5
    ca58:	9d 4f       	sbci	r25, 0xFD	; 253
    ca5a:	fc 01       	movw	r30, r24
    ca5c:	60 81       	ld	r22, Z
    ca5e:	71 81       	ldd	r23, Z+1	; 0x01
    ca60:	82 81       	ldd	r24, Z+2	; 0x02
    ca62:	93 81       	ldd	r25, Z+3	; 0x03
    ca64:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ca68:	dc 01       	movw	r26, r24
    ca6a:	cb 01       	movw	r24, r22
    ca6c:	f8 01       	movw	r30, r16
    ca6e:	91 83       	std	Z+1, r25	; 0x01
    ca70:	80 83       	st	Z, r24
    ca72:	ce 01       	movw	r24, r28
    ca74:	8d 5f       	subi	r24, 0xFD	; 253
    ca76:	9c 4f       	sbci	r25, 0xFC	; 252
    ca78:	9e 01       	movw	r18, r28
    ca7a:	21 50       	subi	r18, 0x01	; 1
    ca7c:	3d 4f       	sbci	r19, 0xFD	; 253
    ca7e:	f9 01       	movw	r30, r18
    ca80:	20 81       	ld	r18, Z
    ca82:	31 81       	ldd	r19, Z+1	; 0x01
    ca84:	fc 01       	movw	r30, r24
    ca86:	31 83       	std	Z+1, r19	; 0x01
    ca88:	20 83       	st	Z, r18
    ca8a:	ce 01       	movw	r24, r28
    ca8c:	8d 5f       	subi	r24, 0xFD	; 253
    ca8e:	9c 4f       	sbci	r25, 0xFC	; 252
    ca90:	fc 01       	movw	r30, r24
    ca92:	80 81       	ld	r24, Z
    ca94:	91 81       	ldd	r25, Z+1	; 0x01
    ca96:	8c 01       	movw	r16, r24
    ca98:	c8 01       	movw	r24, r16
    ca9a:	01 97       	sbiw	r24, 0x01	; 1
    ca9c:	f1 f7       	brne	.-4      	; 0xca9a <pick_drop+0x5b88>
    ca9e:	8c 01       	movw	r16, r24
    caa0:	ce 01       	movw	r24, r28
    caa2:	8d 5f       	subi	r24, 0xFD	; 253
    caa4:	9c 4f       	sbci	r25, 0xFC	; 252
    caa6:	fc 01       	movw	r30, r24
    caa8:	11 83       	std	Z+1, r17	; 0x01
    caaa:	00 83       	st	Z, r16
				_delay_ms(100);
				forward_mm(60);
    caac:	8c e3       	ldi	r24, 0x3C	; 60
    caae:	90 e0       	ldi	r25, 0x00	; 0
    cab0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    cab4:	9e 01       	movw	r18, r28
    cab6:	2b 5f       	subi	r18, 0xFB	; 251
    cab8:	3c 4f       	sbci	r19, 0xFC	; 252
    caba:	80 e0       	ldi	r24, 0x00	; 0
    cabc:	90 e0       	ldi	r25, 0x00	; 0
    cabe:	a0 ea       	ldi	r26, 0xA0	; 160
    cac0:	b1 e4       	ldi	r27, 0x41	; 65
    cac2:	f9 01       	movw	r30, r18
    cac4:	80 83       	st	Z, r24
    cac6:	91 83       	std	Z+1, r25	; 0x01
    cac8:	a2 83       	std	Z+2, r26	; 0x02
    caca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cacc:	8e 01       	movw	r16, r28
    cace:	07 5f       	subi	r16, 0xF7	; 247
    cad0:	1c 4f       	sbci	r17, 0xFC	; 252
    cad2:	ce 01       	movw	r24, r28
    cad4:	8b 5f       	subi	r24, 0xFB	; 251
    cad6:	9c 4f       	sbci	r25, 0xFC	; 252
    cad8:	fc 01       	movw	r30, r24
    cada:	60 81       	ld	r22, Z
    cadc:	71 81       	ldd	r23, Z+1	; 0x01
    cade:	82 81       	ldd	r24, Z+2	; 0x02
    cae0:	93 81       	ldd	r25, Z+3	; 0x03
    cae2:	26 e6       	ldi	r18, 0x66	; 102
    cae4:	36 e6       	ldi	r19, 0x66	; 102
    cae6:	46 e6       	ldi	r20, 0x66	; 102
    cae8:	55 e4       	ldi	r21, 0x45	; 69
    caea:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    caee:	dc 01       	movw	r26, r24
    caf0:	cb 01       	movw	r24, r22
    caf2:	f8 01       	movw	r30, r16
    caf4:	80 83       	st	Z, r24
    caf6:	91 83       	std	Z+1, r25	; 0x01
    caf8:	a2 83       	std	Z+2, r26	; 0x02
    cafa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cafc:	ce 01       	movw	r24, r28
    cafe:	87 5f       	subi	r24, 0xF7	; 247
    cb00:	9c 4f       	sbci	r25, 0xFC	; 252
    cb02:	11 e0       	ldi	r17, 0x01	; 1
    cb04:	fc 01       	movw	r30, r24
    cb06:	60 81       	ld	r22, Z
    cb08:	71 81       	ldd	r23, Z+1	; 0x01
    cb0a:	82 81       	ldd	r24, Z+2	; 0x02
    cb0c:	93 81       	ldd	r25, Z+3	; 0x03
    cb0e:	20 e0       	ldi	r18, 0x00	; 0
    cb10:	30 e0       	ldi	r19, 0x00	; 0
    cb12:	40 e8       	ldi	r20, 0x80	; 128
    cb14:	5f e3       	ldi	r21, 0x3F	; 63
    cb16:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    cb1a:	88 23       	and	r24, r24
    cb1c:	0c f0       	brlt	.+2      	; 0xcb20 <pick_drop+0x5c0e>
    cb1e:	10 e0       	ldi	r17, 0x00	; 0
    cb20:	11 23       	and	r17, r17
    cb22:	49 f0       	breq	.+18     	; 0xcb36 <pick_drop+0x5c24>
		__ticks = 1;
    cb24:	ce 01       	movw	r24, r28
    cb26:	83 5f       	subi	r24, 0xF3	; 243
    cb28:	9c 4f       	sbci	r25, 0xFC	; 252
    cb2a:	21 e0       	ldi	r18, 0x01	; 1
    cb2c:	30 e0       	ldi	r19, 0x00	; 0
    cb2e:	fc 01       	movw	r30, r24
    cb30:	31 83       	std	Z+1, r19	; 0x01
    cb32:	20 83       	st	Z, r18
    cb34:	74 c0       	rjmp	.+232    	; 0xcc1e <pick_drop+0x5d0c>
	else if (__tmp > 65535)
    cb36:	ce 01       	movw	r24, r28
    cb38:	87 5f       	subi	r24, 0xF7	; 247
    cb3a:	9c 4f       	sbci	r25, 0xFC	; 252
    cb3c:	11 e0       	ldi	r17, 0x01	; 1
    cb3e:	fc 01       	movw	r30, r24
    cb40:	60 81       	ld	r22, Z
    cb42:	71 81       	ldd	r23, Z+1	; 0x01
    cb44:	82 81       	ldd	r24, Z+2	; 0x02
    cb46:	93 81       	ldd	r25, Z+3	; 0x03
    cb48:	20 e0       	ldi	r18, 0x00	; 0
    cb4a:	3f ef       	ldi	r19, 0xFF	; 255
    cb4c:	4f e7       	ldi	r20, 0x7F	; 127
    cb4e:	57 e4       	ldi	r21, 0x47	; 71
    cb50:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    cb54:	18 16       	cp	r1, r24
    cb56:	0c f0       	brlt	.+2      	; 0xcb5a <pick_drop+0x5c48>
    cb58:	10 e0       	ldi	r17, 0x00	; 0
    cb5a:	11 23       	and	r17, r17
    cb5c:	09 f4       	brne	.+2      	; 0xcb60 <pick_drop+0x5c4e>
    cb5e:	4d c0       	rjmp	.+154    	; 0xcbfa <pick_drop+0x5ce8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cb60:	ce 01       	movw	r24, r28
    cb62:	8b 5f       	subi	r24, 0xFB	; 251
    cb64:	9c 4f       	sbci	r25, 0xFC	; 252
    cb66:	fc 01       	movw	r30, r24
    cb68:	60 81       	ld	r22, Z
    cb6a:	71 81       	ldd	r23, Z+1	; 0x01
    cb6c:	82 81       	ldd	r24, Z+2	; 0x02
    cb6e:	93 81       	ldd	r25, Z+3	; 0x03
    cb70:	20 e0       	ldi	r18, 0x00	; 0
    cb72:	30 e0       	ldi	r19, 0x00	; 0
    cb74:	40 e2       	ldi	r20, 0x20	; 32
    cb76:	51 e4       	ldi	r21, 0x41	; 65
    cb78:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    cb7c:	dc 01       	movw	r26, r24
    cb7e:	cb 01       	movw	r24, r22
    cb80:	8e 01       	movw	r16, r28
    cb82:	03 5f       	subi	r16, 0xF3	; 243
    cb84:	1c 4f       	sbci	r17, 0xFC	; 252
    cb86:	bc 01       	movw	r22, r24
    cb88:	cd 01       	movw	r24, r26
    cb8a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    cb8e:	dc 01       	movw	r26, r24
    cb90:	cb 01       	movw	r24, r22
    cb92:	f8 01       	movw	r30, r16
    cb94:	91 83       	std	Z+1, r25	; 0x01
    cb96:	80 83       	st	Z, r24
    cb98:	27 c0       	rjmp	.+78     	; 0xcbe8 <pick_drop+0x5cd6>
    cb9a:	ce 01       	movw	r24, r28
    cb9c:	81 5f       	subi	r24, 0xF1	; 241
    cb9e:	9c 4f       	sbci	r25, 0xFC	; 252
    cba0:	20 e7       	ldi	r18, 0x70	; 112
    cba2:	31 e0       	ldi	r19, 0x01	; 1
    cba4:	fc 01       	movw	r30, r24
    cba6:	31 83       	std	Z+1, r19	; 0x01
    cba8:	20 83       	st	Z, r18
    cbaa:	ce 01       	movw	r24, r28
    cbac:	81 5f       	subi	r24, 0xF1	; 241
    cbae:	9c 4f       	sbci	r25, 0xFC	; 252
    cbb0:	fc 01       	movw	r30, r24
    cbb2:	80 81       	ld	r24, Z
    cbb4:	91 81       	ldd	r25, Z+1	; 0x01
    cbb6:	8c 01       	movw	r16, r24
    cbb8:	c8 01       	movw	r24, r16
    cbba:	01 97       	sbiw	r24, 0x01	; 1
    cbbc:	f1 f7       	brne	.-4      	; 0xcbba <pick_drop+0x5ca8>
    cbbe:	8c 01       	movw	r16, r24
    cbc0:	ce 01       	movw	r24, r28
    cbc2:	81 5f       	subi	r24, 0xF1	; 241
    cbc4:	9c 4f       	sbci	r25, 0xFC	; 252
    cbc6:	fc 01       	movw	r30, r24
    cbc8:	11 83       	std	Z+1, r17	; 0x01
    cbca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cbcc:	ce 01       	movw	r24, r28
    cbce:	83 5f       	subi	r24, 0xF3	; 243
    cbd0:	9c 4f       	sbci	r25, 0xFC	; 252
    cbd2:	9e 01       	movw	r18, r28
    cbd4:	23 5f       	subi	r18, 0xF3	; 243
    cbd6:	3c 4f       	sbci	r19, 0xFC	; 252
    cbd8:	f9 01       	movw	r30, r18
    cbda:	20 81       	ld	r18, Z
    cbdc:	31 81       	ldd	r19, Z+1	; 0x01
    cbde:	21 50       	subi	r18, 0x01	; 1
    cbe0:	30 40       	sbci	r19, 0x00	; 0
    cbe2:	fc 01       	movw	r30, r24
    cbe4:	31 83       	std	Z+1, r19	; 0x01
    cbe6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cbe8:	ce 01       	movw	r24, r28
    cbea:	83 5f       	subi	r24, 0xF3	; 243
    cbec:	9c 4f       	sbci	r25, 0xFC	; 252
    cbee:	fc 01       	movw	r30, r24
    cbf0:	80 81       	ld	r24, Z
    cbf2:	91 81       	ldd	r25, Z+1	; 0x01
    cbf4:	00 97       	sbiw	r24, 0x00	; 0
    cbf6:	89 f6       	brne	.-94     	; 0xcb9a <pick_drop+0x5c88>
    cbf8:	2f c0       	rjmp	.+94     	; 0xcc58 <pick_drop+0x5d46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cbfa:	8e 01       	movw	r16, r28
    cbfc:	03 5f       	subi	r16, 0xF3	; 243
    cbfe:	1c 4f       	sbci	r17, 0xFC	; 252
    cc00:	ce 01       	movw	r24, r28
    cc02:	87 5f       	subi	r24, 0xF7	; 247
    cc04:	9c 4f       	sbci	r25, 0xFC	; 252
    cc06:	fc 01       	movw	r30, r24
    cc08:	60 81       	ld	r22, Z
    cc0a:	71 81       	ldd	r23, Z+1	; 0x01
    cc0c:	82 81       	ldd	r24, Z+2	; 0x02
    cc0e:	93 81       	ldd	r25, Z+3	; 0x03
    cc10:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    cc14:	dc 01       	movw	r26, r24
    cc16:	cb 01       	movw	r24, r22
    cc18:	f8 01       	movw	r30, r16
    cc1a:	91 83       	std	Z+1, r25	; 0x01
    cc1c:	80 83       	st	Z, r24
    cc1e:	ce 01       	movw	r24, r28
    cc20:	8f 5e       	subi	r24, 0xEF	; 239
    cc22:	9c 4f       	sbci	r25, 0xFC	; 252
    cc24:	9e 01       	movw	r18, r28
    cc26:	23 5f       	subi	r18, 0xF3	; 243
    cc28:	3c 4f       	sbci	r19, 0xFC	; 252
    cc2a:	f9 01       	movw	r30, r18
    cc2c:	20 81       	ld	r18, Z
    cc2e:	31 81       	ldd	r19, Z+1	; 0x01
    cc30:	fc 01       	movw	r30, r24
    cc32:	31 83       	std	Z+1, r19	; 0x01
    cc34:	20 83       	st	Z, r18
    cc36:	ce 01       	movw	r24, r28
    cc38:	8f 5e       	subi	r24, 0xEF	; 239
    cc3a:	9c 4f       	sbci	r25, 0xFC	; 252
    cc3c:	fc 01       	movw	r30, r24
    cc3e:	80 81       	ld	r24, Z
    cc40:	91 81       	ldd	r25, Z+1	; 0x01
    cc42:	8c 01       	movw	r16, r24
    cc44:	c8 01       	movw	r24, r16
    cc46:	01 97       	sbiw	r24, 0x01	; 1
    cc48:	f1 f7       	brne	.-4      	; 0xcc46 <pick_drop+0x5d34>
    cc4a:	8c 01       	movw	r16, r24
    cc4c:	ce 01       	movw	r24, r28
    cc4e:	8f 5e       	subi	r24, 0xEF	; 239
    cc50:	9c 4f       	sbci	r25, 0xFC	; 252
    cc52:	fc 01       	movw	r30, r24
    cc54:	11 83       	std	Z+1, r17	; 0x01
    cc56:	00 83       	st	Z, r16
				_delay_ms(20);
			}
defaulty();
    cc58:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <defaulty>
}
    cc5c:	cd 5e       	subi	r28, 0xED	; 237
    cc5e:	dc 4f       	sbci	r29, 0xFC	; 252
    cc60:	0f b6       	in	r0, 0x3f	; 63
    cc62:	f8 94       	cli
    cc64:	de bf       	out	0x3e, r29	; 62
    cc66:	0f be       	out	0x3f, r0	; 63
    cc68:	cd bf       	out	0x3d, r28	; 61
    cc6a:	df 91       	pop	r29
    cc6c:	cf 91       	pop	r28
    cc6e:	1f 91       	pop	r17
    cc70:	0f 91       	pop	r16
    cc72:	08 95       	ret

0000cc74 <travel_path>:
void travel_path(char pos_val)
{   TIMSK3=0;
    cc74:	0f 93       	push	r16
    cc76:	1f 93       	push	r17
    cc78:	cf 93       	push	r28
    cc7a:	df 93       	push	r29
    cc7c:	cd b7       	in	r28, 0x3d	; 61
    cc7e:	de b7       	in	r29, 0x3e	; 62
    cc80:	c9 58       	subi	r28, 0x89	; 137
    cc82:	d1 40       	sbci	r29, 0x01	; 1
    cc84:	0f b6       	in	r0, 0x3f	; 63
    cc86:	f8 94       	cli
    cc88:	de bf       	out	0x3e, r29	; 62
    cc8a:	0f be       	out	0x3f, r0	; 63
    cc8c:	cd bf       	out	0x3d, r28	; 61
    cc8e:	9e 01       	movw	r18, r28
    cc90:	27 57       	subi	r18, 0x77	; 119
    cc92:	3e 4f       	sbci	r19, 0xFE	; 254
    cc94:	f9 01       	movw	r30, r18
    cc96:	80 83       	st	Z, r24
    cc98:	81 e7       	ldi	r24, 0x71	; 113
    cc9a:	90 e0       	ldi	r25, 0x00	; 0
    cc9c:	fc 01       	movw	r30, r24
    cc9e:	10 82       	st	Z, r1
	halt=1;
    cca0:	81 e0       	ldi	r24, 0x01	; 1
    cca2:	90 e0       	ldi	r25, 0x00	; 0
    cca4:	90 93 66 03 	sts	0x0366, r25
    cca8:	80 93 65 03 	sts	0x0365, r24
	stop();
    ccac:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ccb0:	80 e0       	ldi	r24, 0x00	; 0
    ccb2:	90 e0       	ldi	r25, 0x00	; 0
    ccb4:	a0 ea       	ldi	r26, 0xA0	; 160
    ccb6:	b1 e4       	ldi	r27, 0x41	; 65
    ccb8:	89 83       	std	Y+1, r24	; 0x01
    ccba:	9a 83       	std	Y+2, r25	; 0x02
    ccbc:	ab 83       	std	Y+3, r26	; 0x03
    ccbe:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ccc0:	69 81       	ldd	r22, Y+1	; 0x01
    ccc2:	7a 81       	ldd	r23, Y+2	; 0x02
    ccc4:	8b 81       	ldd	r24, Y+3	; 0x03
    ccc6:	9c 81       	ldd	r25, Y+4	; 0x04
    ccc8:	26 e6       	ldi	r18, 0x66	; 102
    ccca:	36 e6       	ldi	r19, 0x66	; 102
    cccc:	46 e6       	ldi	r20, 0x66	; 102
    ccce:	55 e4       	ldi	r21, 0x45	; 69
    ccd0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ccd4:	dc 01       	movw	r26, r24
    ccd6:	cb 01       	movw	r24, r22
    ccd8:	8d 83       	std	Y+5, r24	; 0x05
    ccda:	9e 83       	std	Y+6, r25	; 0x06
    ccdc:	af 83       	std	Y+7, r26	; 0x07
    ccde:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    cce0:	11 e0       	ldi	r17, 0x01	; 1
    cce2:	6d 81       	ldd	r22, Y+5	; 0x05
    cce4:	7e 81       	ldd	r23, Y+6	; 0x06
    cce6:	8f 81       	ldd	r24, Y+7	; 0x07
    cce8:	98 85       	ldd	r25, Y+8	; 0x08
    ccea:	20 e0       	ldi	r18, 0x00	; 0
    ccec:	30 e0       	ldi	r19, 0x00	; 0
    ccee:	40 e8       	ldi	r20, 0x80	; 128
    ccf0:	5f e3       	ldi	r21, 0x3F	; 63
    ccf2:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ccf6:	88 23       	and	r24, r24
    ccf8:	0c f0       	brlt	.+2      	; 0xccfc <travel_path+0x88>
    ccfa:	10 e0       	ldi	r17, 0x00	; 0
    ccfc:	11 23       	and	r17, r17
    ccfe:	29 f0       	breq	.+10     	; 0xcd0a <travel_path+0x96>
		__ticks = 1;
    cd00:	81 e0       	ldi	r24, 0x01	; 1
    cd02:	90 e0       	ldi	r25, 0x00	; 0
    cd04:	9a 87       	std	Y+10, r25	; 0x0a
    cd06:	89 87       	std	Y+9, r24	; 0x09
    cd08:	46 c0       	rjmp	.+140    	; 0xcd96 <travel_path+0x122>
	else if (__tmp > 65535)
    cd0a:	11 e0       	ldi	r17, 0x01	; 1
    cd0c:	6d 81       	ldd	r22, Y+5	; 0x05
    cd0e:	7e 81       	ldd	r23, Y+6	; 0x06
    cd10:	8f 81       	ldd	r24, Y+7	; 0x07
    cd12:	98 85       	ldd	r25, Y+8	; 0x08
    cd14:	20 e0       	ldi	r18, 0x00	; 0
    cd16:	3f ef       	ldi	r19, 0xFF	; 255
    cd18:	4f e7       	ldi	r20, 0x7F	; 127
    cd1a:	57 e4       	ldi	r21, 0x47	; 71
    cd1c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    cd20:	18 16       	cp	r1, r24
    cd22:	0c f0       	brlt	.+2      	; 0xcd26 <travel_path+0xb2>
    cd24:	10 e0       	ldi	r17, 0x00	; 0
    cd26:	11 23       	and	r17, r17
    cd28:	61 f1       	breq	.+88     	; 0xcd82 <travel_path+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cd2a:	69 81       	ldd	r22, Y+1	; 0x01
    cd2c:	7a 81       	ldd	r23, Y+2	; 0x02
    cd2e:	8b 81       	ldd	r24, Y+3	; 0x03
    cd30:	9c 81       	ldd	r25, Y+4	; 0x04
    cd32:	20 e0       	ldi	r18, 0x00	; 0
    cd34:	30 e0       	ldi	r19, 0x00	; 0
    cd36:	40 e2       	ldi	r20, 0x20	; 32
    cd38:	51 e4       	ldi	r21, 0x41	; 65
    cd3a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    cd3e:	dc 01       	movw	r26, r24
    cd40:	cb 01       	movw	r24, r22
    cd42:	bc 01       	movw	r22, r24
    cd44:	cd 01       	movw	r24, r26
    cd46:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    cd4a:	dc 01       	movw	r26, r24
    cd4c:	cb 01       	movw	r24, r22
    cd4e:	9a 87       	std	Y+10, r25	; 0x0a
    cd50:	89 87       	std	Y+9, r24	; 0x09
    cd52:	12 c0       	rjmp	.+36     	; 0xcd78 <travel_path+0x104>
    cd54:	80 e7       	ldi	r24, 0x70	; 112
    cd56:	91 e0       	ldi	r25, 0x01	; 1
    cd58:	9c 87       	std	Y+12, r25	; 0x0c
    cd5a:	8b 87       	std	Y+11, r24	; 0x0b
    cd5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    cd5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    cd60:	8c 01       	movw	r16, r24
    cd62:	c8 01       	movw	r24, r16
    cd64:	01 97       	sbiw	r24, 0x01	; 1
    cd66:	f1 f7       	brne	.-4      	; 0xcd64 <travel_path+0xf0>
    cd68:	8c 01       	movw	r16, r24
    cd6a:	1c 87       	std	Y+12, r17	; 0x0c
    cd6c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cd6e:	89 85       	ldd	r24, Y+9	; 0x09
    cd70:	9a 85       	ldd	r25, Y+10	; 0x0a
    cd72:	01 97       	sbiw	r24, 0x01	; 1
    cd74:	9a 87       	std	Y+10, r25	; 0x0a
    cd76:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cd78:	89 85       	ldd	r24, Y+9	; 0x09
    cd7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    cd7c:	00 97       	sbiw	r24, 0x00	; 0
    cd7e:	51 f7       	brne	.-44     	; 0xcd54 <travel_path+0xe0>
    cd80:	17 c0       	rjmp	.+46     	; 0xcdb0 <travel_path+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cd82:	6d 81       	ldd	r22, Y+5	; 0x05
    cd84:	7e 81       	ldd	r23, Y+6	; 0x06
    cd86:	8f 81       	ldd	r24, Y+7	; 0x07
    cd88:	98 85       	ldd	r25, Y+8	; 0x08
    cd8a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    cd8e:	dc 01       	movw	r26, r24
    cd90:	cb 01       	movw	r24, r22
    cd92:	9a 87       	std	Y+10, r25	; 0x0a
    cd94:	89 87       	std	Y+9, r24	; 0x09
    cd96:	89 85       	ldd	r24, Y+9	; 0x09
    cd98:	9a 85       	ldd	r25, Y+10	; 0x0a
    cd9a:	9e 87       	std	Y+14, r25	; 0x0e
    cd9c:	8d 87       	std	Y+13, r24	; 0x0d
    cd9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    cda0:	9e 85       	ldd	r25, Y+14	; 0x0e
    cda2:	8c 01       	movw	r16, r24
    cda4:	f8 01       	movw	r30, r16
    cda6:	31 97       	sbiw	r30, 0x01	; 1
    cda8:	f1 f7       	brne	.-4      	; 0xcda6 <travel_path+0x132>
    cdaa:	8f 01       	movw	r16, r30
    cdac:	1e 87       	std	Y+14, r17	; 0x0e
    cdae:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(pos_val=='n'){
    cdb0:	ce 01       	movw	r24, r28
    cdb2:	87 57       	subi	r24, 0x77	; 119
    cdb4:	9e 4f       	sbci	r25, 0xFE	; 254
    cdb6:	fc 01       	movw	r30, r24
    cdb8:	80 81       	ld	r24, Z
    cdba:	8e 36       	cpi	r24, 0x6E	; 110
    cdbc:	21 f4       	brne	.+8      	; 0xcdc6 <travel_path+0x152>
	forward();
    cdbe:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    cdc2:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
	}
	else if(pos_val=='r')
    cdc6:	ce 01       	movw	r24, r28
    cdc8:	87 57       	subi	r24, 0x77	; 119
    cdca:	9e 4f       	sbci	r25, 0xFE	; 254
    cdcc:	fc 01       	movw	r30, r24
    cdce:	80 81       	ld	r24, Z
    cdd0:	82 37       	cpi	r24, 0x72	; 114
    cdd2:	21 f4       	brne	.+8      	; 0xcddc <travel_path+0x168>
	correct_right();
    cdd4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    cdd8:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
	else if(pos_val=='l')
    cddc:	ce 01       	movw	r24, r28
    cdde:	87 57       	subi	r24, 0x77	; 119
    cde0:	9e 4f       	sbci	r25, 0xFE	; 254
    cde2:	fc 01       	movw	r30, r24
    cde4:	80 81       	ld	r24, Z
    cde6:	8c 36       	cpi	r24, 0x6C	; 108
    cde8:	21 f4       	brne	.+8      	; 0xcdf2 <travel_path+0x17e>
	correct_left();
    cdea:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    cdee:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
	else if(pos_val=='R')
    cdf2:	ce 01       	movw	r24, r28
    cdf4:	87 57       	subi	r24, 0x77	; 119
    cdf6:	9e 4f       	sbci	r25, 0xFE	; 254
    cdf8:	fc 01       	movw	r30, r24
    cdfa:	80 81       	ld	r24, Z
    cdfc:	82 35       	cpi	r24, 0x52	; 82
    cdfe:	09 f0       	breq	.+2      	; 0xce02 <travel_path+0x18e>
    ce00:	a6 c7       	rjmp	.+3916   	; 0xdd4e <travel_path+0x10da>
	{
		if(node==0)
    ce02:	80 91 63 03 	lds	r24, 0x0363
    ce06:	90 91 64 03 	lds	r25, 0x0364
    ce0a:	00 97       	sbiw	r24, 0x00	; 0
    ce0c:	21 f4       	brne	.+8      	; 0xce16 <travel_path+0x1a2>
		correct_right();
    ce0e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    ce12:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
	else if(pos_val=='R')
	{
		if(node==0)
		correct_right();
		//else if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
		else if(master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    ce16:	80 91 63 03 	lds	r24, 0x0363
    ce1a:	90 91 64 03 	lds	r25, 0x0364
    ce1e:	01 96       	adiw	r24, 0x01	; 1
    ce20:	89 59       	subi	r24, 0x99	; 153
    ce22:	9c 4f       	sbci	r25, 0xFC	; 252
    ce24:	fc 01       	movw	r30, r24
    ce26:	80 81       	ld	r24, Z
    ce28:	81 33       	cpi	r24, 0x31	; 49
    ce2a:	09 f4       	brne	.+2      	; 0xce2e <travel_path+0x1ba>
    ce2c:	4f c0       	rjmp	.+158    	; 0xcecc <travel_path+0x258>
    ce2e:	80 91 63 03 	lds	r24, 0x0363
    ce32:	90 91 64 03 	lds	r25, 0x0364
    ce36:	01 96       	adiw	r24, 0x01	; 1
    ce38:	89 59       	subi	r24, 0x99	; 153
    ce3a:	9c 4f       	sbci	r25, 0xFC	; 252
    ce3c:	fc 01       	movw	r30, r24
    ce3e:	80 81       	ld	r24, Z
    ce40:	82 33       	cpi	r24, 0x32	; 50
    ce42:	09 f4       	brne	.+2      	; 0xce46 <travel_path+0x1d2>
    ce44:	43 c0       	rjmp	.+134    	; 0xcecc <travel_path+0x258>
    ce46:	80 91 63 03 	lds	r24, 0x0363
    ce4a:	90 91 64 03 	lds	r25, 0x0364
    ce4e:	01 96       	adiw	r24, 0x01	; 1
    ce50:	89 59       	subi	r24, 0x99	; 153
    ce52:	9c 4f       	sbci	r25, 0xFC	; 252
    ce54:	fc 01       	movw	r30, r24
    ce56:	80 81       	ld	r24, Z
    ce58:	83 33       	cpi	r24, 0x33	; 51
    ce5a:	c1 f1       	breq	.+112    	; 0xcecc <travel_path+0x258>
    ce5c:	80 91 63 03 	lds	r24, 0x0363
    ce60:	90 91 64 03 	lds	r25, 0x0364
    ce64:	01 96       	adiw	r24, 0x01	; 1
    ce66:	89 59       	subi	r24, 0x99	; 153
    ce68:	9c 4f       	sbci	r25, 0xFC	; 252
    ce6a:	fc 01       	movw	r30, r24
    ce6c:	80 81       	ld	r24, Z
    ce6e:	84 33       	cpi	r24, 0x34	; 52
    ce70:	69 f1       	breq	.+90     	; 0xcecc <travel_path+0x258>
    ce72:	80 91 63 03 	lds	r24, 0x0363
    ce76:	90 91 64 03 	lds	r25, 0x0364
    ce7a:	01 96       	adiw	r24, 0x01	; 1
    ce7c:	89 59       	subi	r24, 0x99	; 153
    ce7e:	9c 4f       	sbci	r25, 0xFC	; 252
    ce80:	fc 01       	movw	r30, r24
    ce82:	80 81       	ld	r24, Z
    ce84:	85 33       	cpi	r24, 0x35	; 53
    ce86:	11 f1       	breq	.+68     	; 0xcecc <travel_path+0x258>
    ce88:	80 91 63 03 	lds	r24, 0x0363
    ce8c:	90 91 64 03 	lds	r25, 0x0364
    ce90:	01 96       	adiw	r24, 0x01	; 1
    ce92:	89 59       	subi	r24, 0x99	; 153
    ce94:	9c 4f       	sbci	r25, 0xFC	; 252
    ce96:	fc 01       	movw	r30, r24
    ce98:	80 81       	ld	r24, Z
    ce9a:	86 33       	cpi	r24, 0x36	; 54
    ce9c:	b9 f0       	breq	.+46     	; 0xcecc <travel_path+0x258>
    ce9e:	80 91 63 03 	lds	r24, 0x0363
    cea2:	90 91 64 03 	lds	r25, 0x0364
    cea6:	01 96       	adiw	r24, 0x01	; 1
    cea8:	89 59       	subi	r24, 0x99	; 153
    ceaa:	9c 4f       	sbci	r25, 0xFC	; 252
    ceac:	fc 01       	movw	r30, r24
    ceae:	80 81       	ld	r24, Z
    ceb0:	87 33       	cpi	r24, 0x37	; 55
    ceb2:	61 f0       	breq	.+24     	; 0xcecc <travel_path+0x258>
    ceb4:	80 91 63 03 	lds	r24, 0x0363
    ceb8:	90 91 64 03 	lds	r25, 0x0364
    cebc:	01 96       	adiw	r24, 0x01	; 1
    cebe:	89 59       	subi	r24, 0x99	; 153
    cec0:	9c 4f       	sbci	r25, 0xFC	; 252
    cec2:	fc 01       	movw	r30, r24
    cec4:	80 81       	ld	r24, Z
    cec6:	88 33       	cpi	r24, 0x38	; 56
    cec8:	09 f0       	breq	.+2      	; 0xcecc <travel_path+0x258>
    ceca:	ff c5       	rjmp	.+3070   	; 0xdaca <travel_path+0xe56>
		{//mod
			stop();
    cecc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			if(master_path[node+1]=='7'||master_path[node+1]=='6')// TO ALIGN TO NORTH SLANT LINE ONLY
    ced0:	80 91 63 03 	lds	r24, 0x0363
    ced4:	90 91 64 03 	lds	r25, 0x0364
    ced8:	01 96       	adiw	r24, 0x01	; 1
    ceda:	89 59       	subi	r24, 0x99	; 153
    cedc:	9c 4f       	sbci	r25, 0xFC	; 252
    cede:	fc 01       	movw	r30, r24
    cee0:	80 81       	ld	r24, Z
    cee2:	87 33       	cpi	r24, 0x37	; 55
    cee4:	61 f0       	breq	.+24     	; 0xcefe <travel_path+0x28a>
    cee6:	80 91 63 03 	lds	r24, 0x0363
    ceea:	90 91 64 03 	lds	r25, 0x0364
    ceee:	01 96       	adiw	r24, 0x01	; 1
    cef0:	89 59       	subi	r24, 0x99	; 153
    cef2:	9c 4f       	sbci	r25, 0xFC	; 252
    cef4:	fc 01       	movw	r30, r24
    cef6:	80 81       	ld	r24, Z
    cef8:	86 33       	cpi	r24, 0x36	; 54
    cefa:	09 f0       	breq	.+2      	; 0xcefe <travel_path+0x28a>
    cefc:	87 c0       	rjmp	.+270    	; 0xd00c <travel_path+0x398>
			{
				forward_mm(25);
    cefe:	89 e1       	ldi	r24, 0x19	; 25
    cf00:	90 e0       	ldi	r25, 0x00	; 0
    cf02:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    cf06:	80 e0       	ldi	r24, 0x00	; 0
    cf08:	90 e0       	ldi	r25, 0x00	; 0
    cf0a:	a0 ea       	ldi	r26, 0xA0	; 160
    cf0c:	b1 e4       	ldi	r27, 0x41	; 65
    cf0e:	8f 87       	std	Y+15, r24	; 0x0f
    cf10:	98 8b       	std	Y+16, r25	; 0x10
    cf12:	a9 8b       	std	Y+17, r26	; 0x11
    cf14:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cf16:	6f 85       	ldd	r22, Y+15	; 0x0f
    cf18:	78 89       	ldd	r23, Y+16	; 0x10
    cf1a:	89 89       	ldd	r24, Y+17	; 0x11
    cf1c:	9a 89       	ldd	r25, Y+18	; 0x12
    cf1e:	26 e6       	ldi	r18, 0x66	; 102
    cf20:	36 e6       	ldi	r19, 0x66	; 102
    cf22:	46 e6       	ldi	r20, 0x66	; 102
    cf24:	55 e4       	ldi	r21, 0x45	; 69
    cf26:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    cf2a:	dc 01       	movw	r26, r24
    cf2c:	cb 01       	movw	r24, r22
    cf2e:	8b 8b       	std	Y+19, r24	; 0x13
    cf30:	9c 8b       	std	Y+20, r25	; 0x14
    cf32:	ad 8b       	std	Y+21, r26	; 0x15
    cf34:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    cf36:	11 e0       	ldi	r17, 0x01	; 1
    cf38:	6b 89       	ldd	r22, Y+19	; 0x13
    cf3a:	7c 89       	ldd	r23, Y+20	; 0x14
    cf3c:	8d 89       	ldd	r24, Y+21	; 0x15
    cf3e:	9e 89       	ldd	r25, Y+22	; 0x16
    cf40:	20 e0       	ldi	r18, 0x00	; 0
    cf42:	30 e0       	ldi	r19, 0x00	; 0
    cf44:	40 e8       	ldi	r20, 0x80	; 128
    cf46:	5f e3       	ldi	r21, 0x3F	; 63
    cf48:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    cf4c:	88 23       	and	r24, r24
    cf4e:	0c f0       	brlt	.+2      	; 0xcf52 <travel_path+0x2de>
    cf50:	10 e0       	ldi	r17, 0x00	; 0
    cf52:	11 23       	and	r17, r17
    cf54:	29 f0       	breq	.+10     	; 0xcf60 <travel_path+0x2ec>
		__ticks = 1;
    cf56:	81 e0       	ldi	r24, 0x01	; 1
    cf58:	90 e0       	ldi	r25, 0x00	; 0
    cf5a:	98 8f       	std	Y+24, r25	; 0x18
    cf5c:	8f 8b       	std	Y+23, r24	; 0x17
    cf5e:	46 c0       	rjmp	.+140    	; 0xcfec <travel_path+0x378>
	else if (__tmp > 65535)
    cf60:	11 e0       	ldi	r17, 0x01	; 1
    cf62:	6b 89       	ldd	r22, Y+19	; 0x13
    cf64:	7c 89       	ldd	r23, Y+20	; 0x14
    cf66:	8d 89       	ldd	r24, Y+21	; 0x15
    cf68:	9e 89       	ldd	r25, Y+22	; 0x16
    cf6a:	20 e0       	ldi	r18, 0x00	; 0
    cf6c:	3f ef       	ldi	r19, 0xFF	; 255
    cf6e:	4f e7       	ldi	r20, 0x7F	; 127
    cf70:	57 e4       	ldi	r21, 0x47	; 71
    cf72:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    cf76:	18 16       	cp	r1, r24
    cf78:	0c f0       	brlt	.+2      	; 0xcf7c <travel_path+0x308>
    cf7a:	10 e0       	ldi	r17, 0x00	; 0
    cf7c:	11 23       	and	r17, r17
    cf7e:	61 f1       	breq	.+88     	; 0xcfd8 <travel_path+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cf80:	6f 85       	ldd	r22, Y+15	; 0x0f
    cf82:	78 89       	ldd	r23, Y+16	; 0x10
    cf84:	89 89       	ldd	r24, Y+17	; 0x11
    cf86:	9a 89       	ldd	r25, Y+18	; 0x12
    cf88:	20 e0       	ldi	r18, 0x00	; 0
    cf8a:	30 e0       	ldi	r19, 0x00	; 0
    cf8c:	40 e2       	ldi	r20, 0x20	; 32
    cf8e:	51 e4       	ldi	r21, 0x41	; 65
    cf90:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    cf94:	dc 01       	movw	r26, r24
    cf96:	cb 01       	movw	r24, r22
    cf98:	bc 01       	movw	r22, r24
    cf9a:	cd 01       	movw	r24, r26
    cf9c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    cfa0:	dc 01       	movw	r26, r24
    cfa2:	cb 01       	movw	r24, r22
    cfa4:	98 8f       	std	Y+24, r25	; 0x18
    cfa6:	8f 8b       	std	Y+23, r24	; 0x17
    cfa8:	12 c0       	rjmp	.+36     	; 0xcfce <travel_path+0x35a>
    cfaa:	80 e7       	ldi	r24, 0x70	; 112
    cfac:	91 e0       	ldi	r25, 0x01	; 1
    cfae:	9a 8f       	std	Y+26, r25	; 0x1a
    cfb0:	89 8f       	std	Y+25, r24	; 0x19
    cfb2:	89 8d       	ldd	r24, Y+25	; 0x19
    cfb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    cfb6:	8c 01       	movw	r16, r24
    cfb8:	c8 01       	movw	r24, r16
    cfba:	01 97       	sbiw	r24, 0x01	; 1
    cfbc:	f1 f7       	brne	.-4      	; 0xcfba <travel_path+0x346>
    cfbe:	8c 01       	movw	r16, r24
    cfc0:	1a 8f       	std	Y+26, r17	; 0x1a
    cfc2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cfc4:	8f 89       	ldd	r24, Y+23	; 0x17
    cfc6:	98 8d       	ldd	r25, Y+24	; 0x18
    cfc8:	01 97       	sbiw	r24, 0x01	; 1
    cfca:	98 8f       	std	Y+24, r25	; 0x18
    cfcc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cfce:	8f 89       	ldd	r24, Y+23	; 0x17
    cfd0:	98 8d       	ldd	r25, Y+24	; 0x18
    cfd2:	00 97       	sbiw	r24, 0x00	; 0
    cfd4:	51 f7       	brne	.-44     	; 0xcfaa <travel_path+0x336>
    cfd6:	17 c0       	rjmp	.+46     	; 0xd006 <travel_path+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cfd8:	6b 89       	ldd	r22, Y+19	; 0x13
    cfda:	7c 89       	ldd	r23, Y+20	; 0x14
    cfdc:	8d 89       	ldd	r24, Y+21	; 0x15
    cfde:	9e 89       	ldd	r25, Y+22	; 0x16
    cfe0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    cfe4:	dc 01       	movw	r26, r24
    cfe6:	cb 01       	movw	r24, r22
    cfe8:	98 8f       	std	Y+24, r25	; 0x18
    cfea:	8f 8b       	std	Y+23, r24	; 0x17
    cfec:	8f 89       	ldd	r24, Y+23	; 0x17
    cfee:	98 8d       	ldd	r25, Y+24	; 0x18
    cff0:	9c 8f       	std	Y+28, r25	; 0x1c
    cff2:	8b 8f       	std	Y+27, r24	; 0x1b
    cff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cff8:	8c 01       	movw	r16, r24
    cffa:	f8 01       	movw	r30, r16
    cffc:	31 97       	sbiw	r30, 0x01	; 1
    cffe:	f1 f7       	brne	.-4      	; 0xcffc <travel_path+0x388>
    d000:	8f 01       	movw	r16, r30
    d002:	1c 8f       	std	Y+28, r17	; 0x1c
    d004:	0b 8f       	std	Y+27, r16	; 0x1b
				_delay_ms(20);
				correct_right();
    d006:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    d00a:	37 c5       	rjmp	.+2670   	; 0xda7a <travel_path+0xe06>
			}
			else if(master_path[node+1]=='8'){//if bot comes from right
    d00c:	80 91 63 03 	lds	r24, 0x0363
    d010:	90 91 64 03 	lds	r25, 0x0364
    d014:	01 96       	adiw	r24, 0x01	; 1
    d016:	89 59       	subi	r24, 0x99	; 153
    d018:	9c 4f       	sbci	r25, 0xFC	; 252
    d01a:	fc 01       	movw	r30, r24
    d01c:	80 81       	ld	r24, Z
    d01e:	88 33       	cpi	r24, 0x38	; 56
    d020:	09 f0       	breq	.+2      	; 0xd024 <travel_path+0x3b0>
    d022:	cc c1       	rjmp	.+920    	; 0xd3bc <travel_path+0x748>
				stop();
    d024:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d028:	80 e0       	ldi	r24, 0x00	; 0
    d02a:	90 e0       	ldi	r25, 0x00	; 0
    d02c:	a0 ea       	ldi	r26, 0xA0	; 160
    d02e:	b1 e4       	ldi	r27, 0x41	; 65
    d030:	8d 8f       	std	Y+29, r24	; 0x1d
    d032:	9e 8f       	std	Y+30, r25	; 0x1e
    d034:	af 8f       	std	Y+31, r26	; 0x1f
    d036:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d038:	6d 8d       	ldd	r22, Y+29	; 0x1d
    d03a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    d03c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d03e:	98 a1       	lds	r25, 0x48
    d040:	26 e6       	ldi	r18, 0x66	; 102
    d042:	36 e6       	ldi	r19, 0x66	; 102
    d044:	46 e6       	ldi	r20, 0x66	; 102
    d046:	55 e4       	ldi	r21, 0x45	; 69
    d048:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d04c:	dc 01       	movw	r26, r24
    d04e:	cb 01       	movw	r24, r22
    d050:	89 a3       	lds	r24, 0x59
    d052:	9a a3       	lds	r25, 0x5a
    d054:	ab a3       	lds	r26, 0x5b
    d056:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    d058:	11 e0       	ldi	r17, 0x01	; 1
    d05a:	69 a1       	lds	r22, 0x49
    d05c:	7a a1       	lds	r23, 0x4a
    d05e:	8b a1       	lds	r24, 0x4b
    d060:	9c a1       	lds	r25, 0x4c
    d062:	20 e0       	ldi	r18, 0x00	; 0
    d064:	30 e0       	ldi	r19, 0x00	; 0
    d066:	40 e8       	ldi	r20, 0x80	; 128
    d068:	5f e3       	ldi	r21, 0x3F	; 63
    d06a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d06e:	88 23       	and	r24, r24
    d070:	0c f0       	brlt	.+2      	; 0xd074 <travel_path+0x400>
    d072:	10 e0       	ldi	r17, 0x00	; 0
    d074:	11 23       	and	r17, r17
    d076:	29 f0       	breq	.+10     	; 0xd082 <travel_path+0x40e>
		__ticks = 1;
    d078:	81 e0       	ldi	r24, 0x01	; 1
    d07a:	90 e0       	ldi	r25, 0x00	; 0
    d07c:	9e a3       	lds	r25, 0x5e
    d07e:	8d a3       	lds	r24, 0x5d
    d080:	46 c0       	rjmp	.+140    	; 0xd10e <travel_path+0x49a>
	else if (__tmp > 65535)
    d082:	11 e0       	ldi	r17, 0x01	; 1
    d084:	69 a1       	lds	r22, 0x49
    d086:	7a a1       	lds	r23, 0x4a
    d088:	8b a1       	lds	r24, 0x4b
    d08a:	9c a1       	lds	r25, 0x4c
    d08c:	20 e0       	ldi	r18, 0x00	; 0
    d08e:	3f ef       	ldi	r19, 0xFF	; 255
    d090:	4f e7       	ldi	r20, 0x7F	; 127
    d092:	57 e4       	ldi	r21, 0x47	; 71
    d094:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d098:	18 16       	cp	r1, r24
    d09a:	0c f0       	brlt	.+2      	; 0xd09e <travel_path+0x42a>
    d09c:	10 e0       	ldi	r17, 0x00	; 0
    d09e:	11 23       	and	r17, r17
    d0a0:	61 f1       	breq	.+88     	; 0xd0fa <travel_path+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d0a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    d0a4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    d0a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d0a8:	98 a1       	lds	r25, 0x48
    d0aa:	20 e0       	ldi	r18, 0x00	; 0
    d0ac:	30 e0       	ldi	r19, 0x00	; 0
    d0ae:	40 e2       	ldi	r20, 0x20	; 32
    d0b0:	51 e4       	ldi	r21, 0x41	; 65
    d0b2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d0b6:	dc 01       	movw	r26, r24
    d0b8:	cb 01       	movw	r24, r22
    d0ba:	bc 01       	movw	r22, r24
    d0bc:	cd 01       	movw	r24, r26
    d0be:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d0c2:	dc 01       	movw	r26, r24
    d0c4:	cb 01       	movw	r24, r22
    d0c6:	9e a3       	lds	r25, 0x5e
    d0c8:	8d a3       	lds	r24, 0x5d
    d0ca:	12 c0       	rjmp	.+36     	; 0xd0f0 <travel_path+0x47c>
    d0cc:	80 e7       	ldi	r24, 0x70	; 112
    d0ce:	91 e0       	ldi	r25, 0x01	; 1
    d0d0:	98 a7       	lds	r25, 0x78
    d0d2:	8f a3       	lds	r24, 0x5f
    d0d4:	8f a1       	lds	r24, 0x4f
    d0d6:	98 a5       	lds	r25, 0x68
    d0d8:	8c 01       	movw	r16, r24
    d0da:	c8 01       	movw	r24, r16
    d0dc:	01 97       	sbiw	r24, 0x01	; 1
    d0de:	f1 f7       	brne	.-4      	; 0xd0dc <travel_path+0x468>
    d0e0:	8c 01       	movw	r16, r24
    d0e2:	18 a7       	lds	r17, 0x78
    d0e4:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d0e6:	8d a1       	lds	r24, 0x4d
    d0e8:	9e a1       	lds	r25, 0x4e
    d0ea:	01 97       	sbiw	r24, 0x01	; 1
    d0ec:	9e a3       	lds	r25, 0x5e
    d0ee:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d0f0:	8d a1       	lds	r24, 0x4d
    d0f2:	9e a1       	lds	r25, 0x4e
    d0f4:	00 97       	sbiw	r24, 0x00	; 0
    d0f6:	51 f7       	brne	.-44     	; 0xd0cc <travel_path+0x458>
    d0f8:	17 c0       	rjmp	.+46     	; 0xd128 <travel_path+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d0fa:	69 a1       	lds	r22, 0x49
    d0fc:	7a a1       	lds	r23, 0x4a
    d0fe:	8b a1       	lds	r24, 0x4b
    d100:	9c a1       	lds	r25, 0x4c
    d102:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d106:	dc 01       	movw	r26, r24
    d108:	cb 01       	movw	r24, r22
    d10a:	9e a3       	lds	r25, 0x5e
    d10c:	8d a3       	lds	r24, 0x5d
    d10e:	8d a1       	lds	r24, 0x4d
    d110:	9e a1       	lds	r25, 0x4e
    d112:	9a a7       	lds	r25, 0x7a
    d114:	89 a7       	lds	r24, 0x79
    d116:	89 a5       	lds	r24, 0x69
    d118:	9a a5       	lds	r25, 0x6a
    d11a:	8c 01       	movw	r16, r24
    d11c:	f8 01       	movw	r30, r16
    d11e:	31 97       	sbiw	r30, 0x01	; 1
    d120:	f1 f7       	brne	.-4      	; 0xd11e <travel_path+0x4aa>
    d122:	8f 01       	movw	r16, r30
    d124:	1a a7       	lds	r17, 0x7a
    d126:	09 a7       	lds	r16, 0x79
				_delay_ms(20);
				forward_mm(160);
    d128:	80 ea       	ldi	r24, 0xA0	; 160
    d12a:	90 e0       	ldi	r25, 0x00	; 0
    d12c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d130:	80 e0       	ldi	r24, 0x00	; 0
    d132:	90 e0       	ldi	r25, 0x00	; 0
    d134:	a0 ea       	ldi	r26, 0xA0	; 160
    d136:	b1 e4       	ldi	r27, 0x41	; 65
    d138:	8b a7       	lds	r24, 0x7b
    d13a:	9c a7       	lds	r25, 0x7c
    d13c:	ad a7       	lds	r26, 0x7d
    d13e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d140:	6b a5       	lds	r22, 0x6b
    d142:	7c a5       	lds	r23, 0x6c
    d144:	8d a5       	lds	r24, 0x6d
    d146:	9e a5       	lds	r25, 0x6e
    d148:	26 e6       	ldi	r18, 0x66	; 102
    d14a:	36 e6       	ldi	r19, 0x66	; 102
    d14c:	46 e6       	ldi	r20, 0x66	; 102
    d14e:	55 e4       	ldi	r21, 0x45	; 69
    d150:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d154:	dc 01       	movw	r26, r24
    d156:	cb 01       	movw	r24, r22
    d158:	8f a7       	lds	r24, 0x7f
    d15a:	98 ab       	sts	0x58, r25
    d15c:	a9 ab       	sts	0x59, r26
    d15e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    d160:	11 e0       	ldi	r17, 0x01	; 1
    d162:	6f a5       	lds	r22, 0x6f
    d164:	78 a9       	sts	0x48, r23
    d166:	89 a9       	sts	0x49, r24
    d168:	9a a9       	sts	0x4a, r25
    d16a:	20 e0       	ldi	r18, 0x00	; 0
    d16c:	30 e0       	ldi	r19, 0x00	; 0
    d16e:	40 e8       	ldi	r20, 0x80	; 128
    d170:	5f e3       	ldi	r21, 0x3F	; 63
    d172:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d176:	88 23       	and	r24, r24
    d178:	0c f0       	brlt	.+2      	; 0xd17c <travel_path+0x508>
    d17a:	10 e0       	ldi	r17, 0x00	; 0
    d17c:	11 23       	and	r17, r17
    d17e:	29 f0       	breq	.+10     	; 0xd18a <travel_path+0x516>
		__ticks = 1;
    d180:	81 e0       	ldi	r24, 0x01	; 1
    d182:	90 e0       	ldi	r25, 0x00	; 0
    d184:	9c ab       	sts	0x5c, r25
    d186:	8b ab       	sts	0x5b, r24
    d188:	46 c0       	rjmp	.+140    	; 0xd216 <travel_path+0x5a2>
	else if (__tmp > 65535)
    d18a:	11 e0       	ldi	r17, 0x01	; 1
    d18c:	6f a5       	lds	r22, 0x6f
    d18e:	78 a9       	sts	0x48, r23
    d190:	89 a9       	sts	0x49, r24
    d192:	9a a9       	sts	0x4a, r25
    d194:	20 e0       	ldi	r18, 0x00	; 0
    d196:	3f ef       	ldi	r19, 0xFF	; 255
    d198:	4f e7       	ldi	r20, 0x7F	; 127
    d19a:	57 e4       	ldi	r21, 0x47	; 71
    d19c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d1a0:	18 16       	cp	r1, r24
    d1a2:	0c f0       	brlt	.+2      	; 0xd1a6 <travel_path+0x532>
    d1a4:	10 e0       	ldi	r17, 0x00	; 0
    d1a6:	11 23       	and	r17, r17
    d1a8:	61 f1       	breq	.+88     	; 0xd202 <travel_path+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d1aa:	6b a5       	lds	r22, 0x6b
    d1ac:	7c a5       	lds	r23, 0x6c
    d1ae:	8d a5       	lds	r24, 0x6d
    d1b0:	9e a5       	lds	r25, 0x6e
    d1b2:	20 e0       	ldi	r18, 0x00	; 0
    d1b4:	30 e0       	ldi	r19, 0x00	; 0
    d1b6:	40 e2       	ldi	r20, 0x20	; 32
    d1b8:	51 e4       	ldi	r21, 0x41	; 65
    d1ba:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d1be:	dc 01       	movw	r26, r24
    d1c0:	cb 01       	movw	r24, r22
    d1c2:	bc 01       	movw	r22, r24
    d1c4:	cd 01       	movw	r24, r26
    d1c6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d1ca:	dc 01       	movw	r26, r24
    d1cc:	cb 01       	movw	r24, r22
    d1ce:	9c ab       	sts	0x5c, r25
    d1d0:	8b ab       	sts	0x5b, r24
    d1d2:	12 c0       	rjmp	.+36     	; 0xd1f8 <travel_path+0x584>
    d1d4:	80 e7       	ldi	r24, 0x70	; 112
    d1d6:	91 e0       	ldi	r25, 0x01	; 1
    d1d8:	9e ab       	sts	0x5e, r25
    d1da:	8d ab       	sts	0x5d, r24
    d1dc:	8d a9       	sts	0x4d, r24
    d1de:	9e a9       	sts	0x4e, r25
    d1e0:	8c 01       	movw	r16, r24
    d1e2:	c8 01       	movw	r24, r16
    d1e4:	01 97       	sbiw	r24, 0x01	; 1
    d1e6:	f1 f7       	brne	.-4      	; 0xd1e4 <travel_path+0x570>
    d1e8:	8c 01       	movw	r16, r24
    d1ea:	1e ab       	sts	0x5e, r17
    d1ec:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d1ee:	8b a9       	sts	0x4b, r24
    d1f0:	9c a9       	sts	0x4c, r25
    d1f2:	01 97       	sbiw	r24, 0x01	; 1
    d1f4:	9c ab       	sts	0x5c, r25
    d1f6:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d1f8:	8b a9       	sts	0x4b, r24
    d1fa:	9c a9       	sts	0x4c, r25
    d1fc:	00 97       	sbiw	r24, 0x00	; 0
    d1fe:	51 f7       	brne	.-44     	; 0xd1d4 <travel_path+0x560>
    d200:	17 c0       	rjmp	.+46     	; 0xd230 <travel_path+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d202:	6f a5       	lds	r22, 0x6f
    d204:	78 a9       	sts	0x48, r23
    d206:	89 a9       	sts	0x49, r24
    d208:	9a a9       	sts	0x4a, r25
    d20a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d20e:	dc 01       	movw	r26, r24
    d210:	cb 01       	movw	r24, r22
    d212:	9c ab       	sts	0x5c, r25
    d214:	8b ab       	sts	0x5b, r24
    d216:	8b a9       	sts	0x4b, r24
    d218:	9c a9       	sts	0x4c, r25
    d21a:	98 af       	sts	0x78, r25
    d21c:	8f ab       	sts	0x5f, r24
    d21e:	8f a9       	sts	0x4f, r24
    d220:	98 ad       	sts	0x68, r25
    d222:	8c 01       	movw	r16, r24
    d224:	f8 01       	movw	r30, r16
    d226:	31 97       	sbiw	r30, 0x01	; 1
    d228:	f1 f7       	brne	.-4      	; 0xd226 <travel_path+0x5b2>
    d22a:	8f 01       	movw	r16, r30
    d22c:	18 af       	sts	0x78, r17
    d22e:	0f ab       	sts	0x5f, r16
				_delay_ms(20);
				 spl_right2();
    d230:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    d234:	80 e0       	ldi	r24, 0x00	; 0
    d236:	90 e0       	ldi	r25, 0x00	; 0
    d238:	a0 ea       	ldi	r26, 0xA0	; 160
    d23a:	b1 e4       	ldi	r27, 0x41	; 65
    d23c:	89 af       	sts	0x79, r24
    d23e:	9a af       	sts	0x7a, r25
    d240:	ab af       	sts	0x7b, r26
    d242:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d244:	69 ad       	sts	0x69, r22
    d246:	7a ad       	sts	0x6a, r23
    d248:	8b ad       	sts	0x6b, r24
    d24a:	9c ad       	sts	0x6c, r25
    d24c:	26 e6       	ldi	r18, 0x66	; 102
    d24e:	36 e6       	ldi	r19, 0x66	; 102
    d250:	46 e6       	ldi	r20, 0x66	; 102
    d252:	55 e4       	ldi	r21, 0x45	; 69
    d254:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d258:	dc 01       	movw	r26, r24
    d25a:	cb 01       	movw	r24, r22
    d25c:	9e 01       	movw	r18, r28
    d25e:	23 5c       	subi	r18, 0xC3	; 195
    d260:	3f 4f       	sbci	r19, 0xFF	; 255
    d262:	f9 01       	movw	r30, r18
    d264:	80 83       	st	Z, r24
    d266:	91 83       	std	Z+1, r25	; 0x01
    d268:	a2 83       	std	Z+2, r26	; 0x02
    d26a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d26c:	11 e0       	ldi	r17, 0x01	; 1
    d26e:	ce 01       	movw	r24, r28
    d270:	cd 96       	adiw	r24, 0x3d	; 61
    d272:	fc 01       	movw	r30, r24
    d274:	60 81       	ld	r22, Z
    d276:	71 81       	ldd	r23, Z+1	; 0x01
    d278:	82 81       	ldd	r24, Z+2	; 0x02
    d27a:	93 81       	ldd	r25, Z+3	; 0x03
    d27c:	20 e0       	ldi	r18, 0x00	; 0
    d27e:	30 e0       	ldi	r19, 0x00	; 0
    d280:	40 e8       	ldi	r20, 0x80	; 128
    d282:	5f e3       	ldi	r21, 0x3F	; 63
    d284:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d288:	88 23       	and	r24, r24
    d28a:	0c f0       	brlt	.+2      	; 0xd28e <travel_path+0x61a>
    d28c:	10 e0       	ldi	r17, 0x00	; 0
    d28e:	11 23       	and	r17, r17
    d290:	49 f0       	breq	.+18     	; 0xd2a4 <travel_path+0x630>
		__ticks = 1;
    d292:	ce 01       	movw	r24, r28
    d294:	8f 5b       	subi	r24, 0xBF	; 191
    d296:	9f 4f       	sbci	r25, 0xFF	; 255
    d298:	21 e0       	ldi	r18, 0x01	; 1
    d29a:	30 e0       	ldi	r19, 0x00	; 0
    d29c:	fc 01       	movw	r30, r24
    d29e:	31 83       	std	Z+1, r19	; 0x01
    d2a0:	20 83       	st	Z, r18
    d2a2:	6e c0       	rjmp	.+220    	; 0xd380 <travel_path+0x70c>
	else if (__tmp > 65535)
    d2a4:	11 e0       	ldi	r17, 0x01	; 1
    d2a6:	ce 01       	movw	r24, r28
    d2a8:	cd 96       	adiw	r24, 0x3d	; 61
    d2aa:	fc 01       	movw	r30, r24
    d2ac:	60 81       	ld	r22, Z
    d2ae:	71 81       	ldd	r23, Z+1	; 0x01
    d2b0:	82 81       	ldd	r24, Z+2	; 0x02
    d2b2:	93 81       	ldd	r25, Z+3	; 0x03
    d2b4:	20 e0       	ldi	r18, 0x00	; 0
    d2b6:	3f ef       	ldi	r19, 0xFF	; 255
    d2b8:	4f e7       	ldi	r20, 0x7F	; 127
    d2ba:	57 e4       	ldi	r21, 0x47	; 71
    d2bc:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d2c0:	18 16       	cp	r1, r24
    d2c2:	0c f0       	brlt	.+2      	; 0xd2c6 <travel_path+0x652>
    d2c4:	10 e0       	ldi	r17, 0x00	; 0
    d2c6:	11 23       	and	r17, r17
    d2c8:	09 f4       	brne	.+2      	; 0xd2cc <travel_path+0x658>
    d2ca:	49 c0       	rjmp	.+146    	; 0xd35e <travel_path+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d2cc:	69 ad       	sts	0x69, r22
    d2ce:	7a ad       	sts	0x6a, r23
    d2d0:	8b ad       	sts	0x6b, r24
    d2d2:	9c ad       	sts	0x6c, r25
    d2d4:	20 e0       	ldi	r18, 0x00	; 0
    d2d6:	30 e0       	ldi	r19, 0x00	; 0
    d2d8:	40 e2       	ldi	r20, 0x20	; 32
    d2da:	51 e4       	ldi	r21, 0x41	; 65
    d2dc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d2e0:	dc 01       	movw	r26, r24
    d2e2:	cb 01       	movw	r24, r22
    d2e4:	8e 01       	movw	r16, r28
    d2e6:	0f 5b       	subi	r16, 0xBF	; 191
    d2e8:	1f 4f       	sbci	r17, 0xFF	; 255
    d2ea:	bc 01       	movw	r22, r24
    d2ec:	cd 01       	movw	r24, r26
    d2ee:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d2f2:	dc 01       	movw	r26, r24
    d2f4:	cb 01       	movw	r24, r22
    d2f6:	f8 01       	movw	r30, r16
    d2f8:	91 83       	std	Z+1, r25	; 0x01
    d2fa:	80 83       	st	Z, r24
    d2fc:	27 c0       	rjmp	.+78     	; 0xd34c <travel_path+0x6d8>
    d2fe:	ce 01       	movw	r24, r28
    d300:	8d 5b       	subi	r24, 0xBD	; 189
    d302:	9f 4f       	sbci	r25, 0xFF	; 255
    d304:	20 e7       	ldi	r18, 0x70	; 112
    d306:	31 e0       	ldi	r19, 0x01	; 1
    d308:	fc 01       	movw	r30, r24
    d30a:	31 83       	std	Z+1, r19	; 0x01
    d30c:	20 83       	st	Z, r18
    d30e:	ce 01       	movw	r24, r28
    d310:	8d 5b       	subi	r24, 0xBD	; 189
    d312:	9f 4f       	sbci	r25, 0xFF	; 255
    d314:	fc 01       	movw	r30, r24
    d316:	80 81       	ld	r24, Z
    d318:	91 81       	ldd	r25, Z+1	; 0x01
    d31a:	8c 01       	movw	r16, r24
    d31c:	c8 01       	movw	r24, r16
    d31e:	01 97       	sbiw	r24, 0x01	; 1
    d320:	f1 f7       	brne	.-4      	; 0xd31e <travel_path+0x6aa>
    d322:	8c 01       	movw	r16, r24
    d324:	ce 01       	movw	r24, r28
    d326:	8d 5b       	subi	r24, 0xBD	; 189
    d328:	9f 4f       	sbci	r25, 0xFF	; 255
    d32a:	fc 01       	movw	r30, r24
    d32c:	11 83       	std	Z+1, r17	; 0x01
    d32e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d330:	ce 01       	movw	r24, r28
    d332:	8f 5b       	subi	r24, 0xBF	; 191
    d334:	9f 4f       	sbci	r25, 0xFF	; 255
    d336:	9e 01       	movw	r18, r28
    d338:	2f 5b       	subi	r18, 0xBF	; 191
    d33a:	3f 4f       	sbci	r19, 0xFF	; 255
    d33c:	f9 01       	movw	r30, r18
    d33e:	20 81       	ld	r18, Z
    d340:	31 81       	ldd	r19, Z+1	; 0x01
    d342:	21 50       	subi	r18, 0x01	; 1
    d344:	30 40       	sbci	r19, 0x00	; 0
    d346:	fc 01       	movw	r30, r24
    d348:	31 83       	std	Z+1, r19	; 0x01
    d34a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d34c:	ce 01       	movw	r24, r28
    d34e:	8f 5b       	subi	r24, 0xBF	; 191
    d350:	9f 4f       	sbci	r25, 0xFF	; 255
    d352:	fc 01       	movw	r30, r24
    d354:	80 81       	ld	r24, Z
    d356:	91 81       	ldd	r25, Z+1	; 0x01
    d358:	00 97       	sbiw	r24, 0x00	; 0
    d35a:	89 f6       	brne	.-94     	; 0xd2fe <travel_path+0x68a>
    d35c:	8e c3       	rjmp	.+1820   	; 0xda7a <travel_path+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d35e:	8e 01       	movw	r16, r28
    d360:	0f 5b       	subi	r16, 0xBF	; 191
    d362:	1f 4f       	sbci	r17, 0xFF	; 255
    d364:	ce 01       	movw	r24, r28
    d366:	cd 96       	adiw	r24, 0x3d	; 61
    d368:	fc 01       	movw	r30, r24
    d36a:	60 81       	ld	r22, Z
    d36c:	71 81       	ldd	r23, Z+1	; 0x01
    d36e:	82 81       	ldd	r24, Z+2	; 0x02
    d370:	93 81       	ldd	r25, Z+3	; 0x03
    d372:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d376:	dc 01       	movw	r26, r24
    d378:	cb 01       	movw	r24, r22
    d37a:	f8 01       	movw	r30, r16
    d37c:	91 83       	std	Z+1, r25	; 0x01
    d37e:	80 83       	st	Z, r24
    d380:	ce 01       	movw	r24, r28
    d382:	8b 5b       	subi	r24, 0xBB	; 187
    d384:	9f 4f       	sbci	r25, 0xFF	; 255
    d386:	9e 01       	movw	r18, r28
    d388:	2f 5b       	subi	r18, 0xBF	; 191
    d38a:	3f 4f       	sbci	r19, 0xFF	; 255
    d38c:	f9 01       	movw	r30, r18
    d38e:	20 81       	ld	r18, Z
    d390:	31 81       	ldd	r19, Z+1	; 0x01
    d392:	fc 01       	movw	r30, r24
    d394:	31 83       	std	Z+1, r19	; 0x01
    d396:	20 83       	st	Z, r18
    d398:	ce 01       	movw	r24, r28
    d39a:	8b 5b       	subi	r24, 0xBB	; 187
    d39c:	9f 4f       	sbci	r25, 0xFF	; 255
    d39e:	fc 01       	movw	r30, r24
    d3a0:	80 81       	ld	r24, Z
    d3a2:	91 81       	ldd	r25, Z+1	; 0x01
    d3a4:	8c 01       	movw	r16, r24
    d3a6:	c8 01       	movw	r24, r16
    d3a8:	01 97       	sbiw	r24, 0x01	; 1
    d3aa:	f1 f7       	brne	.-4      	; 0xd3a8 <travel_path+0x734>
    d3ac:	8c 01       	movw	r16, r24
    d3ae:	ce 01       	movw	r24, r28
    d3b0:	8b 5b       	subi	r24, 0xBB	; 187
    d3b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d3b4:	fc 01       	movw	r30, r24
    d3b6:	11 83       	std	Z+1, r17	; 0x01
    d3b8:	00 83       	st	Z, r16
    d3ba:	5f c3       	rjmp	.+1726   	; 0xda7a <travel_path+0xe06>
				_delay_ms(20);
			}
			else if(master_path[node+1] == '3')
    d3bc:	80 91 63 03 	lds	r24, 0x0363
    d3c0:	90 91 64 03 	lds	r25, 0x0364
    d3c4:	01 96       	adiw	r24, 0x01	; 1
    d3c6:	89 59       	subi	r24, 0x99	; 153
    d3c8:	9c 4f       	sbci	r25, 0xFC	; 252
    d3ca:	fc 01       	movw	r30, r24
    d3cc:	80 81       	ld	r24, Z
    d3ce:	83 33       	cpi	r24, 0x33	; 51
    d3d0:	09 f0       	breq	.+2      	; 0xd3d4 <travel_path+0x760>
    d3d2:	7f c2       	rjmp	.+1278   	; 0xd8d2 <travel_path+0xc5e>
			{
				stop();
    d3d4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d3d8:	9e 01       	movw	r18, r28
    d3da:	29 5b       	subi	r18, 0xB9	; 185
    d3dc:	3f 4f       	sbci	r19, 0xFF	; 255
    d3de:	80 e0       	ldi	r24, 0x00	; 0
    d3e0:	90 e0       	ldi	r25, 0x00	; 0
    d3e2:	a0 ea       	ldi	r26, 0xA0	; 160
    d3e4:	b1 e4       	ldi	r27, 0x41	; 65
    d3e6:	f9 01       	movw	r30, r18
    d3e8:	80 83       	st	Z, r24
    d3ea:	91 83       	std	Z+1, r25	; 0x01
    d3ec:	a2 83       	std	Z+2, r26	; 0x02
    d3ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d3f0:	8e 01       	movw	r16, r28
    d3f2:	05 5b       	subi	r16, 0xB5	; 181
    d3f4:	1f 4f       	sbci	r17, 0xFF	; 255
    d3f6:	ce 01       	movw	r24, r28
    d3f8:	89 5b       	subi	r24, 0xB9	; 185
    d3fa:	9f 4f       	sbci	r25, 0xFF	; 255
    d3fc:	fc 01       	movw	r30, r24
    d3fe:	60 81       	ld	r22, Z
    d400:	71 81       	ldd	r23, Z+1	; 0x01
    d402:	82 81       	ldd	r24, Z+2	; 0x02
    d404:	93 81       	ldd	r25, Z+3	; 0x03
    d406:	26 e6       	ldi	r18, 0x66	; 102
    d408:	36 e6       	ldi	r19, 0x66	; 102
    d40a:	46 e6       	ldi	r20, 0x66	; 102
    d40c:	55 e4       	ldi	r21, 0x45	; 69
    d40e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d412:	dc 01       	movw	r26, r24
    d414:	cb 01       	movw	r24, r22
    d416:	f8 01       	movw	r30, r16
    d418:	80 83       	st	Z, r24
    d41a:	91 83       	std	Z+1, r25	; 0x01
    d41c:	a2 83       	std	Z+2, r26	; 0x02
    d41e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d420:	ce 01       	movw	r24, r28
    d422:	85 5b       	subi	r24, 0xB5	; 181
    d424:	9f 4f       	sbci	r25, 0xFF	; 255
    d426:	11 e0       	ldi	r17, 0x01	; 1
    d428:	fc 01       	movw	r30, r24
    d42a:	60 81       	ld	r22, Z
    d42c:	71 81       	ldd	r23, Z+1	; 0x01
    d42e:	82 81       	ldd	r24, Z+2	; 0x02
    d430:	93 81       	ldd	r25, Z+3	; 0x03
    d432:	20 e0       	ldi	r18, 0x00	; 0
    d434:	30 e0       	ldi	r19, 0x00	; 0
    d436:	40 e8       	ldi	r20, 0x80	; 128
    d438:	5f e3       	ldi	r21, 0x3F	; 63
    d43a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d43e:	88 23       	and	r24, r24
    d440:	0c f0       	brlt	.+2      	; 0xd444 <travel_path+0x7d0>
    d442:	10 e0       	ldi	r17, 0x00	; 0
    d444:	11 23       	and	r17, r17
    d446:	49 f0       	breq	.+18     	; 0xd45a <travel_path+0x7e6>
		__ticks = 1;
    d448:	ce 01       	movw	r24, r28
    d44a:	81 5b       	subi	r24, 0xB1	; 177
    d44c:	9f 4f       	sbci	r25, 0xFF	; 255
    d44e:	21 e0       	ldi	r18, 0x01	; 1
    d450:	30 e0       	ldi	r19, 0x00	; 0
    d452:	fc 01       	movw	r30, r24
    d454:	31 83       	std	Z+1, r19	; 0x01
    d456:	20 83       	st	Z, r18
    d458:	74 c0       	rjmp	.+232    	; 0xd542 <travel_path+0x8ce>
	else if (__tmp > 65535)
    d45a:	ce 01       	movw	r24, r28
    d45c:	85 5b       	subi	r24, 0xB5	; 181
    d45e:	9f 4f       	sbci	r25, 0xFF	; 255
    d460:	11 e0       	ldi	r17, 0x01	; 1
    d462:	fc 01       	movw	r30, r24
    d464:	60 81       	ld	r22, Z
    d466:	71 81       	ldd	r23, Z+1	; 0x01
    d468:	82 81       	ldd	r24, Z+2	; 0x02
    d46a:	93 81       	ldd	r25, Z+3	; 0x03
    d46c:	20 e0       	ldi	r18, 0x00	; 0
    d46e:	3f ef       	ldi	r19, 0xFF	; 255
    d470:	4f e7       	ldi	r20, 0x7F	; 127
    d472:	57 e4       	ldi	r21, 0x47	; 71
    d474:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d478:	18 16       	cp	r1, r24
    d47a:	0c f0       	brlt	.+2      	; 0xd47e <travel_path+0x80a>
    d47c:	10 e0       	ldi	r17, 0x00	; 0
    d47e:	11 23       	and	r17, r17
    d480:	09 f4       	brne	.+2      	; 0xd484 <travel_path+0x810>
    d482:	4d c0       	rjmp	.+154    	; 0xd51e <travel_path+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d484:	ce 01       	movw	r24, r28
    d486:	89 5b       	subi	r24, 0xB9	; 185
    d488:	9f 4f       	sbci	r25, 0xFF	; 255
    d48a:	fc 01       	movw	r30, r24
    d48c:	60 81       	ld	r22, Z
    d48e:	71 81       	ldd	r23, Z+1	; 0x01
    d490:	82 81       	ldd	r24, Z+2	; 0x02
    d492:	93 81       	ldd	r25, Z+3	; 0x03
    d494:	20 e0       	ldi	r18, 0x00	; 0
    d496:	30 e0       	ldi	r19, 0x00	; 0
    d498:	40 e2       	ldi	r20, 0x20	; 32
    d49a:	51 e4       	ldi	r21, 0x41	; 65
    d49c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d4a0:	dc 01       	movw	r26, r24
    d4a2:	cb 01       	movw	r24, r22
    d4a4:	8e 01       	movw	r16, r28
    d4a6:	01 5b       	subi	r16, 0xB1	; 177
    d4a8:	1f 4f       	sbci	r17, 0xFF	; 255
    d4aa:	bc 01       	movw	r22, r24
    d4ac:	cd 01       	movw	r24, r26
    d4ae:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d4b2:	dc 01       	movw	r26, r24
    d4b4:	cb 01       	movw	r24, r22
    d4b6:	f8 01       	movw	r30, r16
    d4b8:	91 83       	std	Z+1, r25	; 0x01
    d4ba:	80 83       	st	Z, r24
    d4bc:	27 c0       	rjmp	.+78     	; 0xd50c <travel_path+0x898>
    d4be:	ce 01       	movw	r24, r28
    d4c0:	8f 5a       	subi	r24, 0xAF	; 175
    d4c2:	9f 4f       	sbci	r25, 0xFF	; 255
    d4c4:	20 e7       	ldi	r18, 0x70	; 112
    d4c6:	31 e0       	ldi	r19, 0x01	; 1
    d4c8:	fc 01       	movw	r30, r24
    d4ca:	31 83       	std	Z+1, r19	; 0x01
    d4cc:	20 83       	st	Z, r18
    d4ce:	ce 01       	movw	r24, r28
    d4d0:	8f 5a       	subi	r24, 0xAF	; 175
    d4d2:	9f 4f       	sbci	r25, 0xFF	; 255
    d4d4:	fc 01       	movw	r30, r24
    d4d6:	80 81       	ld	r24, Z
    d4d8:	91 81       	ldd	r25, Z+1	; 0x01
    d4da:	8c 01       	movw	r16, r24
    d4dc:	c8 01       	movw	r24, r16
    d4de:	01 97       	sbiw	r24, 0x01	; 1
    d4e0:	f1 f7       	brne	.-4      	; 0xd4de <travel_path+0x86a>
    d4e2:	8c 01       	movw	r16, r24
    d4e4:	ce 01       	movw	r24, r28
    d4e6:	8f 5a       	subi	r24, 0xAF	; 175
    d4e8:	9f 4f       	sbci	r25, 0xFF	; 255
    d4ea:	fc 01       	movw	r30, r24
    d4ec:	11 83       	std	Z+1, r17	; 0x01
    d4ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d4f0:	ce 01       	movw	r24, r28
    d4f2:	81 5b       	subi	r24, 0xB1	; 177
    d4f4:	9f 4f       	sbci	r25, 0xFF	; 255
    d4f6:	9e 01       	movw	r18, r28
    d4f8:	21 5b       	subi	r18, 0xB1	; 177
    d4fa:	3f 4f       	sbci	r19, 0xFF	; 255
    d4fc:	f9 01       	movw	r30, r18
    d4fe:	20 81       	ld	r18, Z
    d500:	31 81       	ldd	r19, Z+1	; 0x01
    d502:	21 50       	subi	r18, 0x01	; 1
    d504:	30 40       	sbci	r19, 0x00	; 0
    d506:	fc 01       	movw	r30, r24
    d508:	31 83       	std	Z+1, r19	; 0x01
    d50a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d50c:	ce 01       	movw	r24, r28
    d50e:	81 5b       	subi	r24, 0xB1	; 177
    d510:	9f 4f       	sbci	r25, 0xFF	; 255
    d512:	fc 01       	movw	r30, r24
    d514:	80 81       	ld	r24, Z
    d516:	91 81       	ldd	r25, Z+1	; 0x01
    d518:	00 97       	sbiw	r24, 0x00	; 0
    d51a:	89 f6       	brne	.-94     	; 0xd4be <travel_path+0x84a>
    d51c:	2f c0       	rjmp	.+94     	; 0xd57c <travel_path+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d51e:	8e 01       	movw	r16, r28
    d520:	01 5b       	subi	r16, 0xB1	; 177
    d522:	1f 4f       	sbci	r17, 0xFF	; 255
    d524:	ce 01       	movw	r24, r28
    d526:	85 5b       	subi	r24, 0xB5	; 181
    d528:	9f 4f       	sbci	r25, 0xFF	; 255
    d52a:	fc 01       	movw	r30, r24
    d52c:	60 81       	ld	r22, Z
    d52e:	71 81       	ldd	r23, Z+1	; 0x01
    d530:	82 81       	ldd	r24, Z+2	; 0x02
    d532:	93 81       	ldd	r25, Z+3	; 0x03
    d534:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d538:	dc 01       	movw	r26, r24
    d53a:	cb 01       	movw	r24, r22
    d53c:	f8 01       	movw	r30, r16
    d53e:	91 83       	std	Z+1, r25	; 0x01
    d540:	80 83       	st	Z, r24
    d542:	ce 01       	movw	r24, r28
    d544:	8d 5a       	subi	r24, 0xAD	; 173
    d546:	9f 4f       	sbci	r25, 0xFF	; 255
    d548:	9e 01       	movw	r18, r28
    d54a:	21 5b       	subi	r18, 0xB1	; 177
    d54c:	3f 4f       	sbci	r19, 0xFF	; 255
    d54e:	f9 01       	movw	r30, r18
    d550:	20 81       	ld	r18, Z
    d552:	31 81       	ldd	r19, Z+1	; 0x01
    d554:	fc 01       	movw	r30, r24
    d556:	31 83       	std	Z+1, r19	; 0x01
    d558:	20 83       	st	Z, r18
    d55a:	ce 01       	movw	r24, r28
    d55c:	8d 5a       	subi	r24, 0xAD	; 173
    d55e:	9f 4f       	sbci	r25, 0xFF	; 255
    d560:	fc 01       	movw	r30, r24
    d562:	80 81       	ld	r24, Z
    d564:	91 81       	ldd	r25, Z+1	; 0x01
    d566:	8c 01       	movw	r16, r24
    d568:	c8 01       	movw	r24, r16
    d56a:	01 97       	sbiw	r24, 0x01	; 1
    d56c:	f1 f7       	brne	.-4      	; 0xd56a <travel_path+0x8f6>
    d56e:	8c 01       	movw	r16, r24
    d570:	ce 01       	movw	r24, r28
    d572:	8d 5a       	subi	r24, 0xAD	; 173
    d574:	9f 4f       	sbci	r25, 0xFF	; 255
    d576:	fc 01       	movw	r30, r24
    d578:	11 83       	std	Z+1, r17	; 0x01
    d57a:	00 83       	st	Z, r16
				_delay_ms(20);
				forward_mm(160);
    d57c:	80 ea       	ldi	r24, 0xA0	; 160
    d57e:	90 e0       	ldi	r25, 0x00	; 0
    d580:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d584:	9e 01       	movw	r18, r28
    d586:	2b 5a       	subi	r18, 0xAB	; 171
    d588:	3f 4f       	sbci	r19, 0xFF	; 255
    d58a:	80 e0       	ldi	r24, 0x00	; 0
    d58c:	90 e0       	ldi	r25, 0x00	; 0
    d58e:	a0 ea       	ldi	r26, 0xA0	; 160
    d590:	b1 e4       	ldi	r27, 0x41	; 65
    d592:	f9 01       	movw	r30, r18
    d594:	80 83       	st	Z, r24
    d596:	91 83       	std	Z+1, r25	; 0x01
    d598:	a2 83       	std	Z+2, r26	; 0x02
    d59a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d59c:	8e 01       	movw	r16, r28
    d59e:	07 5a       	subi	r16, 0xA7	; 167
    d5a0:	1f 4f       	sbci	r17, 0xFF	; 255
    d5a2:	ce 01       	movw	r24, r28
    d5a4:	8b 5a       	subi	r24, 0xAB	; 171
    d5a6:	9f 4f       	sbci	r25, 0xFF	; 255
    d5a8:	fc 01       	movw	r30, r24
    d5aa:	60 81       	ld	r22, Z
    d5ac:	71 81       	ldd	r23, Z+1	; 0x01
    d5ae:	82 81       	ldd	r24, Z+2	; 0x02
    d5b0:	93 81       	ldd	r25, Z+3	; 0x03
    d5b2:	26 e6       	ldi	r18, 0x66	; 102
    d5b4:	36 e6       	ldi	r19, 0x66	; 102
    d5b6:	46 e6       	ldi	r20, 0x66	; 102
    d5b8:	55 e4       	ldi	r21, 0x45	; 69
    d5ba:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d5be:	dc 01       	movw	r26, r24
    d5c0:	cb 01       	movw	r24, r22
    d5c2:	f8 01       	movw	r30, r16
    d5c4:	80 83       	st	Z, r24
    d5c6:	91 83       	std	Z+1, r25	; 0x01
    d5c8:	a2 83       	std	Z+2, r26	; 0x02
    d5ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d5cc:	ce 01       	movw	r24, r28
    d5ce:	87 5a       	subi	r24, 0xA7	; 167
    d5d0:	9f 4f       	sbci	r25, 0xFF	; 255
    d5d2:	11 e0       	ldi	r17, 0x01	; 1
    d5d4:	fc 01       	movw	r30, r24
    d5d6:	60 81       	ld	r22, Z
    d5d8:	71 81       	ldd	r23, Z+1	; 0x01
    d5da:	82 81       	ldd	r24, Z+2	; 0x02
    d5dc:	93 81       	ldd	r25, Z+3	; 0x03
    d5de:	20 e0       	ldi	r18, 0x00	; 0
    d5e0:	30 e0       	ldi	r19, 0x00	; 0
    d5e2:	40 e8       	ldi	r20, 0x80	; 128
    d5e4:	5f e3       	ldi	r21, 0x3F	; 63
    d5e6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d5ea:	88 23       	and	r24, r24
    d5ec:	0c f0       	brlt	.+2      	; 0xd5f0 <travel_path+0x97c>
    d5ee:	10 e0       	ldi	r17, 0x00	; 0
    d5f0:	11 23       	and	r17, r17
    d5f2:	49 f0       	breq	.+18     	; 0xd606 <travel_path+0x992>
		__ticks = 1;
    d5f4:	ce 01       	movw	r24, r28
    d5f6:	83 5a       	subi	r24, 0xA3	; 163
    d5f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d5fa:	21 e0       	ldi	r18, 0x01	; 1
    d5fc:	30 e0       	ldi	r19, 0x00	; 0
    d5fe:	fc 01       	movw	r30, r24
    d600:	31 83       	std	Z+1, r19	; 0x01
    d602:	20 83       	st	Z, r18
    d604:	74 c0       	rjmp	.+232    	; 0xd6ee <travel_path+0xa7a>
	else if (__tmp > 65535)
    d606:	ce 01       	movw	r24, r28
    d608:	87 5a       	subi	r24, 0xA7	; 167
    d60a:	9f 4f       	sbci	r25, 0xFF	; 255
    d60c:	11 e0       	ldi	r17, 0x01	; 1
    d60e:	fc 01       	movw	r30, r24
    d610:	60 81       	ld	r22, Z
    d612:	71 81       	ldd	r23, Z+1	; 0x01
    d614:	82 81       	ldd	r24, Z+2	; 0x02
    d616:	93 81       	ldd	r25, Z+3	; 0x03
    d618:	20 e0       	ldi	r18, 0x00	; 0
    d61a:	3f ef       	ldi	r19, 0xFF	; 255
    d61c:	4f e7       	ldi	r20, 0x7F	; 127
    d61e:	57 e4       	ldi	r21, 0x47	; 71
    d620:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d624:	18 16       	cp	r1, r24
    d626:	0c f0       	brlt	.+2      	; 0xd62a <travel_path+0x9b6>
    d628:	10 e0       	ldi	r17, 0x00	; 0
    d62a:	11 23       	and	r17, r17
    d62c:	09 f4       	brne	.+2      	; 0xd630 <travel_path+0x9bc>
    d62e:	4d c0       	rjmp	.+154    	; 0xd6ca <travel_path+0xa56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d630:	ce 01       	movw	r24, r28
    d632:	8b 5a       	subi	r24, 0xAB	; 171
    d634:	9f 4f       	sbci	r25, 0xFF	; 255
    d636:	fc 01       	movw	r30, r24
    d638:	60 81       	ld	r22, Z
    d63a:	71 81       	ldd	r23, Z+1	; 0x01
    d63c:	82 81       	ldd	r24, Z+2	; 0x02
    d63e:	93 81       	ldd	r25, Z+3	; 0x03
    d640:	20 e0       	ldi	r18, 0x00	; 0
    d642:	30 e0       	ldi	r19, 0x00	; 0
    d644:	40 e2       	ldi	r20, 0x20	; 32
    d646:	51 e4       	ldi	r21, 0x41	; 65
    d648:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d64c:	dc 01       	movw	r26, r24
    d64e:	cb 01       	movw	r24, r22
    d650:	8e 01       	movw	r16, r28
    d652:	03 5a       	subi	r16, 0xA3	; 163
    d654:	1f 4f       	sbci	r17, 0xFF	; 255
    d656:	bc 01       	movw	r22, r24
    d658:	cd 01       	movw	r24, r26
    d65a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d65e:	dc 01       	movw	r26, r24
    d660:	cb 01       	movw	r24, r22
    d662:	f8 01       	movw	r30, r16
    d664:	91 83       	std	Z+1, r25	; 0x01
    d666:	80 83       	st	Z, r24
    d668:	27 c0       	rjmp	.+78     	; 0xd6b8 <travel_path+0xa44>
    d66a:	ce 01       	movw	r24, r28
    d66c:	81 5a       	subi	r24, 0xA1	; 161
    d66e:	9f 4f       	sbci	r25, 0xFF	; 255
    d670:	20 e7       	ldi	r18, 0x70	; 112
    d672:	31 e0       	ldi	r19, 0x01	; 1
    d674:	fc 01       	movw	r30, r24
    d676:	31 83       	std	Z+1, r19	; 0x01
    d678:	20 83       	st	Z, r18
    d67a:	ce 01       	movw	r24, r28
    d67c:	81 5a       	subi	r24, 0xA1	; 161
    d67e:	9f 4f       	sbci	r25, 0xFF	; 255
    d680:	fc 01       	movw	r30, r24
    d682:	80 81       	ld	r24, Z
    d684:	91 81       	ldd	r25, Z+1	; 0x01
    d686:	8c 01       	movw	r16, r24
    d688:	c8 01       	movw	r24, r16
    d68a:	01 97       	sbiw	r24, 0x01	; 1
    d68c:	f1 f7       	brne	.-4      	; 0xd68a <travel_path+0xa16>
    d68e:	8c 01       	movw	r16, r24
    d690:	ce 01       	movw	r24, r28
    d692:	81 5a       	subi	r24, 0xA1	; 161
    d694:	9f 4f       	sbci	r25, 0xFF	; 255
    d696:	fc 01       	movw	r30, r24
    d698:	11 83       	std	Z+1, r17	; 0x01
    d69a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d69c:	ce 01       	movw	r24, r28
    d69e:	83 5a       	subi	r24, 0xA3	; 163
    d6a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d6a2:	9e 01       	movw	r18, r28
    d6a4:	23 5a       	subi	r18, 0xA3	; 163
    d6a6:	3f 4f       	sbci	r19, 0xFF	; 255
    d6a8:	f9 01       	movw	r30, r18
    d6aa:	20 81       	ld	r18, Z
    d6ac:	31 81       	ldd	r19, Z+1	; 0x01
    d6ae:	21 50       	subi	r18, 0x01	; 1
    d6b0:	30 40       	sbci	r19, 0x00	; 0
    d6b2:	fc 01       	movw	r30, r24
    d6b4:	31 83       	std	Z+1, r19	; 0x01
    d6b6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d6b8:	ce 01       	movw	r24, r28
    d6ba:	83 5a       	subi	r24, 0xA3	; 163
    d6bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d6be:	fc 01       	movw	r30, r24
    d6c0:	80 81       	ld	r24, Z
    d6c2:	91 81       	ldd	r25, Z+1	; 0x01
    d6c4:	00 97       	sbiw	r24, 0x00	; 0
    d6c6:	89 f6       	brne	.-94     	; 0xd66a <travel_path+0x9f6>
    d6c8:	2f c0       	rjmp	.+94     	; 0xd728 <travel_path+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d6ca:	8e 01       	movw	r16, r28
    d6cc:	03 5a       	subi	r16, 0xA3	; 163
    d6ce:	1f 4f       	sbci	r17, 0xFF	; 255
    d6d0:	ce 01       	movw	r24, r28
    d6d2:	87 5a       	subi	r24, 0xA7	; 167
    d6d4:	9f 4f       	sbci	r25, 0xFF	; 255
    d6d6:	fc 01       	movw	r30, r24
    d6d8:	60 81       	ld	r22, Z
    d6da:	71 81       	ldd	r23, Z+1	; 0x01
    d6dc:	82 81       	ldd	r24, Z+2	; 0x02
    d6de:	93 81       	ldd	r25, Z+3	; 0x03
    d6e0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d6e4:	dc 01       	movw	r26, r24
    d6e6:	cb 01       	movw	r24, r22
    d6e8:	f8 01       	movw	r30, r16
    d6ea:	91 83       	std	Z+1, r25	; 0x01
    d6ec:	80 83       	st	Z, r24
    d6ee:	ce 01       	movw	r24, r28
    d6f0:	8f 59       	subi	r24, 0x9F	; 159
    d6f2:	9f 4f       	sbci	r25, 0xFF	; 255
    d6f4:	9e 01       	movw	r18, r28
    d6f6:	23 5a       	subi	r18, 0xA3	; 163
    d6f8:	3f 4f       	sbci	r19, 0xFF	; 255
    d6fa:	f9 01       	movw	r30, r18
    d6fc:	20 81       	ld	r18, Z
    d6fe:	31 81       	ldd	r19, Z+1	; 0x01
    d700:	fc 01       	movw	r30, r24
    d702:	31 83       	std	Z+1, r19	; 0x01
    d704:	20 83       	st	Z, r18
    d706:	ce 01       	movw	r24, r28
    d708:	8f 59       	subi	r24, 0x9F	; 159
    d70a:	9f 4f       	sbci	r25, 0xFF	; 255
    d70c:	fc 01       	movw	r30, r24
    d70e:	80 81       	ld	r24, Z
    d710:	91 81       	ldd	r25, Z+1	; 0x01
    d712:	8c 01       	movw	r16, r24
    d714:	c8 01       	movw	r24, r16
    d716:	01 97       	sbiw	r24, 0x01	; 1
    d718:	f1 f7       	brne	.-4      	; 0xd716 <travel_path+0xaa2>
    d71a:	8c 01       	movw	r16, r24
    d71c:	ce 01       	movw	r24, r28
    d71e:	8f 59       	subi	r24, 0x9F	; 159
    d720:	9f 4f       	sbci	r25, 0xFF	; 255
    d722:	fc 01       	movw	r30, r24
    d724:	11 83       	std	Z+1, r17	; 0x01
    d726:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_left2();
    d728:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    d72c:	9e 01       	movw	r18, r28
    d72e:	2d 59       	subi	r18, 0x9D	; 157
    d730:	3f 4f       	sbci	r19, 0xFF	; 255
    d732:	80 e0       	ldi	r24, 0x00	; 0
    d734:	90 e0       	ldi	r25, 0x00	; 0
    d736:	a0 ea       	ldi	r26, 0xA0	; 160
    d738:	b1 e4       	ldi	r27, 0x41	; 65
    d73a:	f9 01       	movw	r30, r18
    d73c:	80 83       	st	Z, r24
    d73e:	91 83       	std	Z+1, r25	; 0x01
    d740:	a2 83       	std	Z+2, r26	; 0x02
    d742:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d744:	8e 01       	movw	r16, r28
    d746:	09 59       	subi	r16, 0x99	; 153
    d748:	1f 4f       	sbci	r17, 0xFF	; 255
    d74a:	ce 01       	movw	r24, r28
    d74c:	8d 59       	subi	r24, 0x9D	; 157
    d74e:	9f 4f       	sbci	r25, 0xFF	; 255
    d750:	fc 01       	movw	r30, r24
    d752:	60 81       	ld	r22, Z
    d754:	71 81       	ldd	r23, Z+1	; 0x01
    d756:	82 81       	ldd	r24, Z+2	; 0x02
    d758:	93 81       	ldd	r25, Z+3	; 0x03
    d75a:	26 e6       	ldi	r18, 0x66	; 102
    d75c:	36 e6       	ldi	r19, 0x66	; 102
    d75e:	46 e6       	ldi	r20, 0x66	; 102
    d760:	55 e4       	ldi	r21, 0x45	; 69
    d762:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d766:	dc 01       	movw	r26, r24
    d768:	cb 01       	movw	r24, r22
    d76a:	f8 01       	movw	r30, r16
    d76c:	80 83       	st	Z, r24
    d76e:	91 83       	std	Z+1, r25	; 0x01
    d770:	a2 83       	std	Z+2, r26	; 0x02
    d772:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d774:	ce 01       	movw	r24, r28
    d776:	89 59       	subi	r24, 0x99	; 153
    d778:	9f 4f       	sbci	r25, 0xFF	; 255
    d77a:	11 e0       	ldi	r17, 0x01	; 1
    d77c:	fc 01       	movw	r30, r24
    d77e:	60 81       	ld	r22, Z
    d780:	71 81       	ldd	r23, Z+1	; 0x01
    d782:	82 81       	ldd	r24, Z+2	; 0x02
    d784:	93 81       	ldd	r25, Z+3	; 0x03
    d786:	20 e0       	ldi	r18, 0x00	; 0
    d788:	30 e0       	ldi	r19, 0x00	; 0
    d78a:	40 e8       	ldi	r20, 0x80	; 128
    d78c:	5f e3       	ldi	r21, 0x3F	; 63
    d78e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d792:	88 23       	and	r24, r24
    d794:	0c f0       	brlt	.+2      	; 0xd798 <travel_path+0xb24>
    d796:	10 e0       	ldi	r17, 0x00	; 0
    d798:	11 23       	and	r17, r17
    d79a:	49 f0       	breq	.+18     	; 0xd7ae <travel_path+0xb3a>
		__ticks = 1;
    d79c:	ce 01       	movw	r24, r28
    d79e:	85 59       	subi	r24, 0x95	; 149
    d7a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d7a2:	21 e0       	ldi	r18, 0x01	; 1
    d7a4:	30 e0       	ldi	r19, 0x00	; 0
    d7a6:	fc 01       	movw	r30, r24
    d7a8:	31 83       	std	Z+1, r19	; 0x01
    d7aa:	20 83       	st	Z, r18
    d7ac:	74 c0       	rjmp	.+232    	; 0xd896 <travel_path+0xc22>
	else if (__tmp > 65535)
    d7ae:	ce 01       	movw	r24, r28
    d7b0:	89 59       	subi	r24, 0x99	; 153
    d7b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d7b4:	11 e0       	ldi	r17, 0x01	; 1
    d7b6:	fc 01       	movw	r30, r24
    d7b8:	60 81       	ld	r22, Z
    d7ba:	71 81       	ldd	r23, Z+1	; 0x01
    d7bc:	82 81       	ldd	r24, Z+2	; 0x02
    d7be:	93 81       	ldd	r25, Z+3	; 0x03
    d7c0:	20 e0       	ldi	r18, 0x00	; 0
    d7c2:	3f ef       	ldi	r19, 0xFF	; 255
    d7c4:	4f e7       	ldi	r20, 0x7F	; 127
    d7c6:	57 e4       	ldi	r21, 0x47	; 71
    d7c8:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d7cc:	18 16       	cp	r1, r24
    d7ce:	0c f0       	brlt	.+2      	; 0xd7d2 <travel_path+0xb5e>
    d7d0:	10 e0       	ldi	r17, 0x00	; 0
    d7d2:	11 23       	and	r17, r17
    d7d4:	09 f4       	brne	.+2      	; 0xd7d8 <travel_path+0xb64>
    d7d6:	4d c0       	rjmp	.+154    	; 0xd872 <travel_path+0xbfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d7d8:	ce 01       	movw	r24, r28
    d7da:	8d 59       	subi	r24, 0x9D	; 157
    d7dc:	9f 4f       	sbci	r25, 0xFF	; 255
    d7de:	fc 01       	movw	r30, r24
    d7e0:	60 81       	ld	r22, Z
    d7e2:	71 81       	ldd	r23, Z+1	; 0x01
    d7e4:	82 81       	ldd	r24, Z+2	; 0x02
    d7e6:	93 81       	ldd	r25, Z+3	; 0x03
    d7e8:	20 e0       	ldi	r18, 0x00	; 0
    d7ea:	30 e0       	ldi	r19, 0x00	; 0
    d7ec:	40 e2       	ldi	r20, 0x20	; 32
    d7ee:	51 e4       	ldi	r21, 0x41	; 65
    d7f0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d7f4:	dc 01       	movw	r26, r24
    d7f6:	cb 01       	movw	r24, r22
    d7f8:	8e 01       	movw	r16, r28
    d7fa:	05 59       	subi	r16, 0x95	; 149
    d7fc:	1f 4f       	sbci	r17, 0xFF	; 255
    d7fe:	bc 01       	movw	r22, r24
    d800:	cd 01       	movw	r24, r26
    d802:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d806:	dc 01       	movw	r26, r24
    d808:	cb 01       	movw	r24, r22
    d80a:	f8 01       	movw	r30, r16
    d80c:	91 83       	std	Z+1, r25	; 0x01
    d80e:	80 83       	st	Z, r24
    d810:	27 c0       	rjmp	.+78     	; 0xd860 <travel_path+0xbec>
    d812:	ce 01       	movw	r24, r28
    d814:	83 59       	subi	r24, 0x93	; 147
    d816:	9f 4f       	sbci	r25, 0xFF	; 255
    d818:	20 e7       	ldi	r18, 0x70	; 112
    d81a:	31 e0       	ldi	r19, 0x01	; 1
    d81c:	fc 01       	movw	r30, r24
    d81e:	31 83       	std	Z+1, r19	; 0x01
    d820:	20 83       	st	Z, r18
    d822:	ce 01       	movw	r24, r28
    d824:	83 59       	subi	r24, 0x93	; 147
    d826:	9f 4f       	sbci	r25, 0xFF	; 255
    d828:	fc 01       	movw	r30, r24
    d82a:	80 81       	ld	r24, Z
    d82c:	91 81       	ldd	r25, Z+1	; 0x01
    d82e:	8c 01       	movw	r16, r24
    d830:	c8 01       	movw	r24, r16
    d832:	01 97       	sbiw	r24, 0x01	; 1
    d834:	f1 f7       	brne	.-4      	; 0xd832 <travel_path+0xbbe>
    d836:	8c 01       	movw	r16, r24
    d838:	ce 01       	movw	r24, r28
    d83a:	83 59       	subi	r24, 0x93	; 147
    d83c:	9f 4f       	sbci	r25, 0xFF	; 255
    d83e:	fc 01       	movw	r30, r24
    d840:	11 83       	std	Z+1, r17	; 0x01
    d842:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d844:	ce 01       	movw	r24, r28
    d846:	85 59       	subi	r24, 0x95	; 149
    d848:	9f 4f       	sbci	r25, 0xFF	; 255
    d84a:	9e 01       	movw	r18, r28
    d84c:	25 59       	subi	r18, 0x95	; 149
    d84e:	3f 4f       	sbci	r19, 0xFF	; 255
    d850:	f9 01       	movw	r30, r18
    d852:	20 81       	ld	r18, Z
    d854:	31 81       	ldd	r19, Z+1	; 0x01
    d856:	21 50       	subi	r18, 0x01	; 1
    d858:	30 40       	sbci	r19, 0x00	; 0
    d85a:	fc 01       	movw	r30, r24
    d85c:	31 83       	std	Z+1, r19	; 0x01
    d85e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d860:	ce 01       	movw	r24, r28
    d862:	85 59       	subi	r24, 0x95	; 149
    d864:	9f 4f       	sbci	r25, 0xFF	; 255
    d866:	fc 01       	movw	r30, r24
    d868:	80 81       	ld	r24, Z
    d86a:	91 81       	ldd	r25, Z+1	; 0x01
    d86c:	00 97       	sbiw	r24, 0x00	; 0
    d86e:	89 f6       	brne	.-94     	; 0xd812 <travel_path+0xb9e>
    d870:	04 c1       	rjmp	.+520    	; 0xda7a <travel_path+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d872:	8e 01       	movw	r16, r28
    d874:	05 59       	subi	r16, 0x95	; 149
    d876:	1f 4f       	sbci	r17, 0xFF	; 255
    d878:	ce 01       	movw	r24, r28
    d87a:	89 59       	subi	r24, 0x99	; 153
    d87c:	9f 4f       	sbci	r25, 0xFF	; 255
    d87e:	fc 01       	movw	r30, r24
    d880:	60 81       	ld	r22, Z
    d882:	71 81       	ldd	r23, Z+1	; 0x01
    d884:	82 81       	ldd	r24, Z+2	; 0x02
    d886:	93 81       	ldd	r25, Z+3	; 0x03
    d888:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d88c:	dc 01       	movw	r26, r24
    d88e:	cb 01       	movw	r24, r22
    d890:	f8 01       	movw	r30, r16
    d892:	91 83       	std	Z+1, r25	; 0x01
    d894:	80 83       	st	Z, r24
    d896:	ce 01       	movw	r24, r28
    d898:	81 59       	subi	r24, 0x91	; 145
    d89a:	9f 4f       	sbci	r25, 0xFF	; 255
    d89c:	9e 01       	movw	r18, r28
    d89e:	25 59       	subi	r18, 0x95	; 149
    d8a0:	3f 4f       	sbci	r19, 0xFF	; 255
    d8a2:	f9 01       	movw	r30, r18
    d8a4:	20 81       	ld	r18, Z
    d8a6:	31 81       	ldd	r19, Z+1	; 0x01
    d8a8:	fc 01       	movw	r30, r24
    d8aa:	31 83       	std	Z+1, r19	; 0x01
    d8ac:	20 83       	st	Z, r18
    d8ae:	ce 01       	movw	r24, r28
    d8b0:	81 59       	subi	r24, 0x91	; 145
    d8b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d8b4:	fc 01       	movw	r30, r24
    d8b6:	80 81       	ld	r24, Z
    d8b8:	91 81       	ldd	r25, Z+1	; 0x01
    d8ba:	8c 01       	movw	r16, r24
    d8bc:	c8 01       	movw	r24, r16
    d8be:	01 97       	sbiw	r24, 0x01	; 1
    d8c0:	f1 f7       	brne	.-4      	; 0xd8be <travel_path+0xc4a>
    d8c2:	8c 01       	movw	r16, r24
    d8c4:	ce 01       	movw	r24, r28
    d8c6:	81 59       	subi	r24, 0x91	; 145
    d8c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d8ca:	fc 01       	movw	r30, r24
    d8cc:	11 83       	std	Z+1, r17	; 0x01
    d8ce:	00 83       	st	Z, r16
    d8d0:	d4 c0       	rjmp	.+424    	; 0xda7a <travel_path+0xe06>
				_delay_ms(20);
			}

			else
			{
				stop();
    d8d2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d8d6:	9e 01       	movw	r18, r28
    d8d8:	2f 58       	subi	r18, 0x8F	; 143
    d8da:	3f 4f       	sbci	r19, 0xFF	; 255
    d8dc:	80 e0       	ldi	r24, 0x00	; 0
    d8de:	90 e0       	ldi	r25, 0x00	; 0
    d8e0:	a0 ea       	ldi	r26, 0xA0	; 160
    d8e2:	b1 e4       	ldi	r27, 0x41	; 65
    d8e4:	f9 01       	movw	r30, r18
    d8e6:	80 83       	st	Z, r24
    d8e8:	91 83       	std	Z+1, r25	; 0x01
    d8ea:	a2 83       	std	Z+2, r26	; 0x02
    d8ec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d8ee:	8e 01       	movw	r16, r28
    d8f0:	0b 58       	subi	r16, 0x8B	; 139
    d8f2:	1f 4f       	sbci	r17, 0xFF	; 255
    d8f4:	ce 01       	movw	r24, r28
    d8f6:	8f 58       	subi	r24, 0x8F	; 143
    d8f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d8fa:	fc 01       	movw	r30, r24
    d8fc:	60 81       	ld	r22, Z
    d8fe:	71 81       	ldd	r23, Z+1	; 0x01
    d900:	82 81       	ldd	r24, Z+2	; 0x02
    d902:	93 81       	ldd	r25, Z+3	; 0x03
    d904:	26 e6       	ldi	r18, 0x66	; 102
    d906:	36 e6       	ldi	r19, 0x66	; 102
    d908:	46 e6       	ldi	r20, 0x66	; 102
    d90a:	55 e4       	ldi	r21, 0x45	; 69
    d90c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d910:	dc 01       	movw	r26, r24
    d912:	cb 01       	movw	r24, r22
    d914:	f8 01       	movw	r30, r16
    d916:	80 83       	st	Z, r24
    d918:	91 83       	std	Z+1, r25	; 0x01
    d91a:	a2 83       	std	Z+2, r26	; 0x02
    d91c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d91e:	ce 01       	movw	r24, r28
    d920:	8b 58       	subi	r24, 0x8B	; 139
    d922:	9f 4f       	sbci	r25, 0xFF	; 255
    d924:	11 e0       	ldi	r17, 0x01	; 1
    d926:	fc 01       	movw	r30, r24
    d928:	60 81       	ld	r22, Z
    d92a:	71 81       	ldd	r23, Z+1	; 0x01
    d92c:	82 81       	ldd	r24, Z+2	; 0x02
    d92e:	93 81       	ldd	r25, Z+3	; 0x03
    d930:	20 e0       	ldi	r18, 0x00	; 0
    d932:	30 e0       	ldi	r19, 0x00	; 0
    d934:	40 e8       	ldi	r20, 0x80	; 128
    d936:	5f e3       	ldi	r21, 0x3F	; 63
    d938:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    d93c:	88 23       	and	r24, r24
    d93e:	0c f0       	brlt	.+2      	; 0xd942 <travel_path+0xcce>
    d940:	10 e0       	ldi	r17, 0x00	; 0
    d942:	11 23       	and	r17, r17
    d944:	49 f0       	breq	.+18     	; 0xd958 <travel_path+0xce4>
		__ticks = 1;
    d946:	ce 01       	movw	r24, r28
    d948:	87 58       	subi	r24, 0x87	; 135
    d94a:	9f 4f       	sbci	r25, 0xFF	; 255
    d94c:	21 e0       	ldi	r18, 0x01	; 1
    d94e:	30 e0       	ldi	r19, 0x00	; 0
    d950:	fc 01       	movw	r30, r24
    d952:	31 83       	std	Z+1, r19	; 0x01
    d954:	20 83       	st	Z, r18
    d956:	74 c0       	rjmp	.+232    	; 0xda40 <travel_path+0xdcc>
	else if (__tmp > 65535)
    d958:	ce 01       	movw	r24, r28
    d95a:	8b 58       	subi	r24, 0x8B	; 139
    d95c:	9f 4f       	sbci	r25, 0xFF	; 255
    d95e:	11 e0       	ldi	r17, 0x01	; 1
    d960:	fc 01       	movw	r30, r24
    d962:	60 81       	ld	r22, Z
    d964:	71 81       	ldd	r23, Z+1	; 0x01
    d966:	82 81       	ldd	r24, Z+2	; 0x02
    d968:	93 81       	ldd	r25, Z+3	; 0x03
    d96a:	20 e0       	ldi	r18, 0x00	; 0
    d96c:	3f ef       	ldi	r19, 0xFF	; 255
    d96e:	4f e7       	ldi	r20, 0x7F	; 127
    d970:	57 e4       	ldi	r21, 0x47	; 71
    d972:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    d976:	18 16       	cp	r1, r24
    d978:	0c f0       	brlt	.+2      	; 0xd97c <travel_path+0xd08>
    d97a:	10 e0       	ldi	r17, 0x00	; 0
    d97c:	11 23       	and	r17, r17
    d97e:	09 f4       	brne	.+2      	; 0xd982 <travel_path+0xd0e>
    d980:	4d c0       	rjmp	.+154    	; 0xda1c <travel_path+0xda8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d982:	ce 01       	movw	r24, r28
    d984:	8f 58       	subi	r24, 0x8F	; 143
    d986:	9f 4f       	sbci	r25, 0xFF	; 255
    d988:	fc 01       	movw	r30, r24
    d98a:	60 81       	ld	r22, Z
    d98c:	71 81       	ldd	r23, Z+1	; 0x01
    d98e:	82 81       	ldd	r24, Z+2	; 0x02
    d990:	93 81       	ldd	r25, Z+3	; 0x03
    d992:	20 e0       	ldi	r18, 0x00	; 0
    d994:	30 e0       	ldi	r19, 0x00	; 0
    d996:	40 e2       	ldi	r20, 0x20	; 32
    d998:	51 e4       	ldi	r21, 0x41	; 65
    d99a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    d99e:	dc 01       	movw	r26, r24
    d9a0:	cb 01       	movw	r24, r22
    d9a2:	8e 01       	movw	r16, r28
    d9a4:	07 58       	subi	r16, 0x87	; 135
    d9a6:	1f 4f       	sbci	r17, 0xFF	; 255
    d9a8:	bc 01       	movw	r22, r24
    d9aa:	cd 01       	movw	r24, r26
    d9ac:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    d9b0:	dc 01       	movw	r26, r24
    d9b2:	cb 01       	movw	r24, r22
    d9b4:	f8 01       	movw	r30, r16
    d9b6:	91 83       	std	Z+1, r25	; 0x01
    d9b8:	80 83       	st	Z, r24
    d9ba:	27 c0       	rjmp	.+78     	; 0xda0a <travel_path+0xd96>
    d9bc:	ce 01       	movw	r24, r28
    d9be:	85 58       	subi	r24, 0x85	; 133
    d9c0:	9f 4f       	sbci	r25, 0xFF	; 255
    d9c2:	20 e7       	ldi	r18, 0x70	; 112
    d9c4:	31 e0       	ldi	r19, 0x01	; 1
    d9c6:	fc 01       	movw	r30, r24
    d9c8:	31 83       	std	Z+1, r19	; 0x01
    d9ca:	20 83       	st	Z, r18
    d9cc:	ce 01       	movw	r24, r28
    d9ce:	85 58       	subi	r24, 0x85	; 133
    d9d0:	9f 4f       	sbci	r25, 0xFF	; 255
    d9d2:	fc 01       	movw	r30, r24
    d9d4:	80 81       	ld	r24, Z
    d9d6:	91 81       	ldd	r25, Z+1	; 0x01
    d9d8:	8c 01       	movw	r16, r24
    d9da:	c8 01       	movw	r24, r16
    d9dc:	01 97       	sbiw	r24, 0x01	; 1
    d9de:	f1 f7       	brne	.-4      	; 0xd9dc <travel_path+0xd68>
    d9e0:	8c 01       	movw	r16, r24
    d9e2:	ce 01       	movw	r24, r28
    d9e4:	85 58       	subi	r24, 0x85	; 133
    d9e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d9e8:	fc 01       	movw	r30, r24
    d9ea:	11 83       	std	Z+1, r17	; 0x01
    d9ec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d9ee:	ce 01       	movw	r24, r28
    d9f0:	87 58       	subi	r24, 0x87	; 135
    d9f2:	9f 4f       	sbci	r25, 0xFF	; 255
    d9f4:	9e 01       	movw	r18, r28
    d9f6:	27 58       	subi	r18, 0x87	; 135
    d9f8:	3f 4f       	sbci	r19, 0xFF	; 255
    d9fa:	f9 01       	movw	r30, r18
    d9fc:	20 81       	ld	r18, Z
    d9fe:	31 81       	ldd	r19, Z+1	; 0x01
    da00:	21 50       	subi	r18, 0x01	; 1
    da02:	30 40       	sbci	r19, 0x00	; 0
    da04:	fc 01       	movw	r30, r24
    da06:	31 83       	std	Z+1, r19	; 0x01
    da08:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    da0a:	ce 01       	movw	r24, r28
    da0c:	87 58       	subi	r24, 0x87	; 135
    da0e:	9f 4f       	sbci	r25, 0xFF	; 255
    da10:	fc 01       	movw	r30, r24
    da12:	80 81       	ld	r24, Z
    da14:	91 81       	ldd	r25, Z+1	; 0x01
    da16:	00 97       	sbiw	r24, 0x00	; 0
    da18:	89 f6       	brne	.-94     	; 0xd9bc <travel_path+0xd48>
    da1a:	2f c0       	rjmp	.+94     	; 0xda7a <travel_path+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    da1c:	8e 01       	movw	r16, r28
    da1e:	07 58       	subi	r16, 0x87	; 135
    da20:	1f 4f       	sbci	r17, 0xFF	; 255
    da22:	ce 01       	movw	r24, r28
    da24:	8b 58       	subi	r24, 0x8B	; 139
    da26:	9f 4f       	sbci	r25, 0xFF	; 255
    da28:	fc 01       	movw	r30, r24
    da2a:	60 81       	ld	r22, Z
    da2c:	71 81       	ldd	r23, Z+1	; 0x01
    da2e:	82 81       	ldd	r24, Z+2	; 0x02
    da30:	93 81       	ldd	r25, Z+3	; 0x03
    da32:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    da36:	dc 01       	movw	r26, r24
    da38:	cb 01       	movw	r24, r22
    da3a:	f8 01       	movw	r30, r16
    da3c:	91 83       	std	Z+1, r25	; 0x01
    da3e:	80 83       	st	Z, r24
    da40:	ce 01       	movw	r24, r28
    da42:	83 58       	subi	r24, 0x83	; 131
    da44:	9f 4f       	sbci	r25, 0xFF	; 255
    da46:	9e 01       	movw	r18, r28
    da48:	27 58       	subi	r18, 0x87	; 135
    da4a:	3f 4f       	sbci	r19, 0xFF	; 255
    da4c:	f9 01       	movw	r30, r18
    da4e:	20 81       	ld	r18, Z
    da50:	31 81       	ldd	r19, Z+1	; 0x01
    da52:	fc 01       	movw	r30, r24
    da54:	31 83       	std	Z+1, r19	; 0x01
    da56:	20 83       	st	Z, r18
    da58:	ce 01       	movw	r24, r28
    da5a:	83 58       	subi	r24, 0x83	; 131
    da5c:	9f 4f       	sbci	r25, 0xFF	; 255
    da5e:	fc 01       	movw	r30, r24
    da60:	80 81       	ld	r24, Z
    da62:	91 81       	ldd	r25, Z+1	; 0x01
    da64:	8c 01       	movw	r16, r24
    da66:	c8 01       	movw	r24, r16
    da68:	01 97       	sbiw	r24, 0x01	; 1
    da6a:	f1 f7       	brne	.-4      	; 0xda68 <travel_path+0xdf4>
    da6c:	8c 01       	movw	r16, r24
    da6e:	ce 01       	movw	r24, r28
    da70:	83 58       	subi	r24, 0x83	; 131
    da72:	9f 4f       	sbci	r25, 0xFF	; 255
    da74:	fc 01       	movw	r30, r24
    da76:	11 83       	std	Z+1, r17	; 0x01
    da78:	00 83       	st	Z, r16
				_delay_ms(20);
			}
			node++;
    da7a:	80 91 63 03 	lds	r24, 0x0363
    da7e:	90 91 64 03 	lds	r25, 0x0364
    da82:	01 96       	adiw	r24, 0x01	; 1
    da84:	90 93 64 03 	sts	0x0364, r25
    da88:	80 93 63 03 	sts	0x0363, r24
			pick_drop(master_path[node]);
    da8c:	80 91 63 03 	lds	r24, 0x0363
    da90:	90 91 64 03 	lds	r25, 0x0364
    da94:	89 59       	subi	r24, 0x99	; 153
    da96:	9c 4f       	sbci	r25, 0xFC	; 252
    da98:	fc 01       	movw	r30, r24
    da9a:	80 81       	ld	r24, Z
    da9c:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    daa0:	80 91 63 03 	lds	r24, 0x0363
    daa4:	90 91 64 03 	lds	r25, 0x0364
    daa8:	01 96       	adiw	r24, 0x01	; 1
    daaa:	90 93 64 03 	sts	0x0364, r25
    daae:	80 93 63 03 	sts	0x0363, r24
			travel_path(master_path[node]);
    dab2:	80 91 63 03 	lds	r24, 0x0363
    dab6:	90 91 64 03 	lds	r25, 0x0364
    daba:	89 59       	subi	r24, 0x99	; 153
    dabc:	9c 4f       	sbci	r25, 0xFC	; 252
    dabe:	fc 01       	movw	r30, r24
    dac0:	80 81       	ld	r24, Z
    dac2:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
    dac6:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
		}
		else if(master_path[node+1]=='D')//mod
    daca:	80 91 63 03 	lds	r24, 0x0363
    dace:	90 91 64 03 	lds	r25, 0x0364
    dad2:	01 96       	adiw	r24, 0x01	; 1
    dad4:	89 59       	subi	r24, 0x99	; 153
    dad6:	9c 4f       	sbci	r25, 0xFC	; 252
    dad8:	fc 01       	movw	r30, r24
    dada:	80 81       	ld	r24, Z
    dadc:	84 34       	cpi	r24, 0x44	; 68
    dade:	09 f0       	breq	.+2      	; 0xdae2 <travel_path+0xe6e>
    dae0:	fc c0       	rjmp	.+504    	; 0xdcda <travel_path+0x1066>
		{
			correct_right();
    dae2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    dae6:	9e 01       	movw	r18, r28
    dae8:	21 58       	subi	r18, 0x81	; 129
    daea:	3f 4f       	sbci	r19, 0xFF	; 255
    daec:	80 e0       	ldi	r24, 0x00	; 0
    daee:	90 e0       	ldi	r25, 0x00	; 0
    daf0:	a0 ea       	ldi	r26, 0xA0	; 160
    daf2:	b1 e4       	ldi	r27, 0x41	; 65
    daf4:	f9 01       	movw	r30, r18
    daf6:	80 83       	st	Z, r24
    daf8:	91 83       	std	Z+1, r25	; 0x01
    dafa:	a2 83       	std	Z+2, r26	; 0x02
    dafc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    dafe:	8e 01       	movw	r16, r28
    db00:	0d 57       	subi	r16, 0x7D	; 125
    db02:	1f 4f       	sbci	r17, 0xFF	; 255
    db04:	ce 01       	movw	r24, r28
    db06:	81 58       	subi	r24, 0x81	; 129
    db08:	9f 4f       	sbci	r25, 0xFF	; 255
    db0a:	fc 01       	movw	r30, r24
    db0c:	60 81       	ld	r22, Z
    db0e:	71 81       	ldd	r23, Z+1	; 0x01
    db10:	82 81       	ldd	r24, Z+2	; 0x02
    db12:	93 81       	ldd	r25, Z+3	; 0x03
    db14:	26 e6       	ldi	r18, 0x66	; 102
    db16:	36 e6       	ldi	r19, 0x66	; 102
    db18:	46 e6       	ldi	r20, 0x66	; 102
    db1a:	55 e4       	ldi	r21, 0x45	; 69
    db1c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    db20:	dc 01       	movw	r26, r24
    db22:	cb 01       	movw	r24, r22
    db24:	f8 01       	movw	r30, r16
    db26:	80 83       	st	Z, r24
    db28:	91 83       	std	Z+1, r25	; 0x01
    db2a:	a2 83       	std	Z+2, r26	; 0x02
    db2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    db2e:	ce 01       	movw	r24, r28
    db30:	8d 57       	subi	r24, 0x7D	; 125
    db32:	9f 4f       	sbci	r25, 0xFF	; 255
    db34:	11 e0       	ldi	r17, 0x01	; 1
    db36:	fc 01       	movw	r30, r24
    db38:	60 81       	ld	r22, Z
    db3a:	71 81       	ldd	r23, Z+1	; 0x01
    db3c:	82 81       	ldd	r24, Z+2	; 0x02
    db3e:	93 81       	ldd	r25, Z+3	; 0x03
    db40:	20 e0       	ldi	r18, 0x00	; 0
    db42:	30 e0       	ldi	r19, 0x00	; 0
    db44:	40 e8       	ldi	r20, 0x80	; 128
    db46:	5f e3       	ldi	r21, 0x3F	; 63
    db48:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    db4c:	88 23       	and	r24, r24
    db4e:	0c f0       	brlt	.+2      	; 0xdb52 <travel_path+0xede>
    db50:	10 e0       	ldi	r17, 0x00	; 0
    db52:	11 23       	and	r17, r17
    db54:	49 f0       	breq	.+18     	; 0xdb68 <travel_path+0xef4>
		__ticks = 1;
    db56:	ce 01       	movw	r24, r28
    db58:	89 57       	subi	r24, 0x79	; 121
    db5a:	9f 4f       	sbci	r25, 0xFF	; 255
    db5c:	21 e0       	ldi	r18, 0x01	; 1
    db5e:	30 e0       	ldi	r19, 0x00	; 0
    db60:	fc 01       	movw	r30, r24
    db62:	31 83       	std	Z+1, r19	; 0x01
    db64:	20 83       	st	Z, r18
    db66:	74 c0       	rjmp	.+232    	; 0xdc50 <travel_path+0xfdc>
	else if (__tmp > 65535)
    db68:	ce 01       	movw	r24, r28
    db6a:	8d 57       	subi	r24, 0x7D	; 125
    db6c:	9f 4f       	sbci	r25, 0xFF	; 255
    db6e:	11 e0       	ldi	r17, 0x01	; 1
    db70:	fc 01       	movw	r30, r24
    db72:	60 81       	ld	r22, Z
    db74:	71 81       	ldd	r23, Z+1	; 0x01
    db76:	82 81       	ldd	r24, Z+2	; 0x02
    db78:	93 81       	ldd	r25, Z+3	; 0x03
    db7a:	20 e0       	ldi	r18, 0x00	; 0
    db7c:	3f ef       	ldi	r19, 0xFF	; 255
    db7e:	4f e7       	ldi	r20, 0x7F	; 127
    db80:	57 e4       	ldi	r21, 0x47	; 71
    db82:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    db86:	18 16       	cp	r1, r24
    db88:	0c f0       	brlt	.+2      	; 0xdb8c <travel_path+0xf18>
    db8a:	10 e0       	ldi	r17, 0x00	; 0
    db8c:	11 23       	and	r17, r17
    db8e:	09 f4       	brne	.+2      	; 0xdb92 <travel_path+0xf1e>
    db90:	4d c0       	rjmp	.+154    	; 0xdc2c <travel_path+0xfb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    db92:	ce 01       	movw	r24, r28
    db94:	81 58       	subi	r24, 0x81	; 129
    db96:	9f 4f       	sbci	r25, 0xFF	; 255
    db98:	fc 01       	movw	r30, r24
    db9a:	60 81       	ld	r22, Z
    db9c:	71 81       	ldd	r23, Z+1	; 0x01
    db9e:	82 81       	ldd	r24, Z+2	; 0x02
    dba0:	93 81       	ldd	r25, Z+3	; 0x03
    dba2:	20 e0       	ldi	r18, 0x00	; 0
    dba4:	30 e0       	ldi	r19, 0x00	; 0
    dba6:	40 e2       	ldi	r20, 0x20	; 32
    dba8:	51 e4       	ldi	r21, 0x41	; 65
    dbaa:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    dbae:	dc 01       	movw	r26, r24
    dbb0:	cb 01       	movw	r24, r22
    dbb2:	8e 01       	movw	r16, r28
    dbb4:	09 57       	subi	r16, 0x79	; 121
    dbb6:	1f 4f       	sbci	r17, 0xFF	; 255
    dbb8:	bc 01       	movw	r22, r24
    dbba:	cd 01       	movw	r24, r26
    dbbc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    dbc0:	dc 01       	movw	r26, r24
    dbc2:	cb 01       	movw	r24, r22
    dbc4:	f8 01       	movw	r30, r16
    dbc6:	91 83       	std	Z+1, r25	; 0x01
    dbc8:	80 83       	st	Z, r24
    dbca:	27 c0       	rjmp	.+78     	; 0xdc1a <travel_path+0xfa6>
    dbcc:	ce 01       	movw	r24, r28
    dbce:	87 57       	subi	r24, 0x77	; 119
    dbd0:	9f 4f       	sbci	r25, 0xFF	; 255
    dbd2:	20 e7       	ldi	r18, 0x70	; 112
    dbd4:	31 e0       	ldi	r19, 0x01	; 1
    dbd6:	fc 01       	movw	r30, r24
    dbd8:	31 83       	std	Z+1, r19	; 0x01
    dbda:	20 83       	st	Z, r18
    dbdc:	ce 01       	movw	r24, r28
    dbde:	87 57       	subi	r24, 0x77	; 119
    dbe0:	9f 4f       	sbci	r25, 0xFF	; 255
    dbe2:	fc 01       	movw	r30, r24
    dbe4:	80 81       	ld	r24, Z
    dbe6:	91 81       	ldd	r25, Z+1	; 0x01
    dbe8:	8c 01       	movw	r16, r24
    dbea:	c8 01       	movw	r24, r16
    dbec:	01 97       	sbiw	r24, 0x01	; 1
    dbee:	f1 f7       	brne	.-4      	; 0xdbec <travel_path+0xf78>
    dbf0:	8c 01       	movw	r16, r24
    dbf2:	ce 01       	movw	r24, r28
    dbf4:	87 57       	subi	r24, 0x77	; 119
    dbf6:	9f 4f       	sbci	r25, 0xFF	; 255
    dbf8:	fc 01       	movw	r30, r24
    dbfa:	11 83       	std	Z+1, r17	; 0x01
    dbfc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    dbfe:	ce 01       	movw	r24, r28
    dc00:	89 57       	subi	r24, 0x79	; 121
    dc02:	9f 4f       	sbci	r25, 0xFF	; 255
    dc04:	9e 01       	movw	r18, r28
    dc06:	29 57       	subi	r18, 0x79	; 121
    dc08:	3f 4f       	sbci	r19, 0xFF	; 255
    dc0a:	f9 01       	movw	r30, r18
    dc0c:	20 81       	ld	r18, Z
    dc0e:	31 81       	ldd	r19, Z+1	; 0x01
    dc10:	21 50       	subi	r18, 0x01	; 1
    dc12:	30 40       	sbci	r19, 0x00	; 0
    dc14:	fc 01       	movw	r30, r24
    dc16:	31 83       	std	Z+1, r19	; 0x01
    dc18:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dc1a:	ce 01       	movw	r24, r28
    dc1c:	89 57       	subi	r24, 0x79	; 121
    dc1e:	9f 4f       	sbci	r25, 0xFF	; 255
    dc20:	fc 01       	movw	r30, r24
    dc22:	80 81       	ld	r24, Z
    dc24:	91 81       	ldd	r25, Z+1	; 0x01
    dc26:	00 97       	sbiw	r24, 0x00	; 0
    dc28:	89 f6       	brne	.-94     	; 0xdbcc <travel_path+0xf58>
    dc2a:	2f c0       	rjmp	.+94     	; 0xdc8a <travel_path+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dc2c:	8e 01       	movw	r16, r28
    dc2e:	09 57       	subi	r16, 0x79	; 121
    dc30:	1f 4f       	sbci	r17, 0xFF	; 255
    dc32:	ce 01       	movw	r24, r28
    dc34:	8d 57       	subi	r24, 0x7D	; 125
    dc36:	9f 4f       	sbci	r25, 0xFF	; 255
    dc38:	fc 01       	movw	r30, r24
    dc3a:	60 81       	ld	r22, Z
    dc3c:	71 81       	ldd	r23, Z+1	; 0x01
    dc3e:	82 81       	ldd	r24, Z+2	; 0x02
    dc40:	93 81       	ldd	r25, Z+3	; 0x03
    dc42:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    dc46:	dc 01       	movw	r26, r24
    dc48:	cb 01       	movw	r24, r22
    dc4a:	f8 01       	movw	r30, r16
    dc4c:	91 83       	std	Z+1, r25	; 0x01
    dc4e:	80 83       	st	Z, r24
    dc50:	ce 01       	movw	r24, r28
    dc52:	85 57       	subi	r24, 0x75	; 117
    dc54:	9f 4f       	sbci	r25, 0xFF	; 255
    dc56:	9e 01       	movw	r18, r28
    dc58:	29 57       	subi	r18, 0x79	; 121
    dc5a:	3f 4f       	sbci	r19, 0xFF	; 255
    dc5c:	f9 01       	movw	r30, r18
    dc5e:	20 81       	ld	r18, Z
    dc60:	31 81       	ldd	r19, Z+1	; 0x01
    dc62:	fc 01       	movw	r30, r24
    dc64:	31 83       	std	Z+1, r19	; 0x01
    dc66:	20 83       	st	Z, r18
    dc68:	ce 01       	movw	r24, r28
    dc6a:	85 57       	subi	r24, 0x75	; 117
    dc6c:	9f 4f       	sbci	r25, 0xFF	; 255
    dc6e:	fc 01       	movw	r30, r24
    dc70:	80 81       	ld	r24, Z
    dc72:	91 81       	ldd	r25, Z+1	; 0x01
    dc74:	8c 01       	movw	r16, r24
    dc76:	c8 01       	movw	r24, r16
    dc78:	01 97       	sbiw	r24, 0x01	; 1
    dc7a:	f1 f7       	brne	.-4      	; 0xdc78 <travel_path+0x1004>
    dc7c:	8c 01       	movw	r16, r24
    dc7e:	ce 01       	movw	r24, r28
    dc80:	85 57       	subi	r24, 0x75	; 117
    dc82:	9f 4f       	sbci	r25, 0xFF	; 255
    dc84:	fc 01       	movw	r30, r24
    dc86:	11 83       	std	Z+1, r17	; 0x01
    dc88:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
    dc8a:	80 91 63 03 	lds	r24, 0x0363
    dc8e:	90 91 64 03 	lds	r25, 0x0364
    dc92:	01 96       	adiw	r24, 0x01	; 1
    dc94:	90 93 64 03 	sts	0x0364, r25
    dc98:	80 93 63 03 	sts	0x0363, r24
			pick_drop(master_path[node]);
    dc9c:	80 91 63 03 	lds	r24, 0x0363
    dca0:	90 91 64 03 	lds	r25, 0x0364
    dca4:	89 59       	subi	r24, 0x99	; 153
    dca6:	9c 4f       	sbci	r25, 0xFC	; 252
    dca8:	fc 01       	movw	r30, r24
    dcaa:	80 81       	ld	r24, Z
    dcac:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    dcb0:	80 91 63 03 	lds	r24, 0x0363
    dcb4:	90 91 64 03 	lds	r25, 0x0364
    dcb8:	01 96       	adiw	r24, 0x01	; 1
    dcba:	90 93 64 03 	sts	0x0364, r25
    dcbe:	80 93 63 03 	sts	0x0363, r24
			travel_path(master_path[node]);
    dcc2:	80 91 63 03 	lds	r24, 0x0363
    dcc6:	90 91 64 03 	lds	r25, 0x0364
    dcca:	89 59       	subi	r24, 0x99	; 153
    dccc:	9c 4f       	sbci	r25, 0xFC	; 252
    dcce:	fc 01       	movw	r30, r24
    dcd0:	80 81       	ld	r24, Z
    dcd2:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    dcd6:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
			node++;
			travel_path(master_path[node]);
		}

		else{
			node--;
    dcda:	80 91 63 03 	lds	r24, 0x0363
    dcde:	90 91 64 03 	lds	r25, 0x0364
    dce2:	01 97       	sbiw	r24, 0x01	; 1
    dce4:	90 93 64 03 	sts	0x0364, r25
    dce8:	80 93 63 03 	sts	0x0363, r24
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    dcec:	80 91 63 03 	lds	r24, 0x0363
    dcf0:	90 91 64 03 	lds	r25, 0x0364
    dcf4:	01 97       	sbiw	r24, 0x01	; 1
    dcf6:	89 59       	subi	r24, 0x99	; 153
    dcf8:	9c 4f       	sbci	r25, 0xFC	; 252
    dcfa:	fc 01       	movw	r30, r24
    dcfc:	80 81       	ld	r24, Z
    dcfe:	8c 34       	cpi	r24, 0x4C	; 76
    dd00:	b1 f0       	breq	.+44     	; 0xdd2e <travel_path+0x10ba>
    dd02:	80 91 63 03 	lds	r24, 0x0363
    dd06:	90 91 64 03 	lds	r25, 0x0364
    dd0a:	01 97       	sbiw	r24, 0x01	; 1
    dd0c:	89 59       	subi	r24, 0x99	; 153
    dd0e:	9c 4f       	sbci	r25, 0xFC	; 252
    dd10:	fc 01       	movw	r30, r24
    dd12:	80 81       	ld	r24, Z
    dd14:	82 35       	cpi	r24, 0x52	; 82
    dd16:	59 f0       	breq	.+22     	; 0xdd2e <travel_path+0x10ba>
    dd18:	80 91 63 03 	lds	r24, 0x0363
    dd1c:	90 91 64 03 	lds	r25, 0x0364
    dd20:	01 97       	sbiw	r24, 0x01	; 1
    dd22:	89 59       	subi	r24, 0x99	; 153
    dd24:	9c 4f       	sbci	r25, 0xFC	; 252
    dd26:	fc 01       	movw	r30, r24
    dd28:	80 81       	ld	r24, Z
    dd2a:	85 35       	cpi	r24, 0x55	; 85
    dd2c:	19 f4       	brne	.+6      	; 0xdd34 <travel_path+0x10c0>
			correct_right2();
    dd2e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <correct_right2>
    dd32:	02 c0       	rjmp	.+4      	; 0xdd38 <travel_path+0x10c4>
			else 
			correct_right();
    dd34:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;		
    dd38:	80 91 63 03 	lds	r24, 0x0363
    dd3c:	90 91 64 03 	lds	r25, 0x0364
    dd40:	01 96       	adiw	r24, 0x01	; 1
    dd42:	90 93 64 03 	sts	0x0364, r25
    dd46:	80 93 63 03 	sts	0x0363, r24
    dd4a:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
		}
	}
		else if(pos_val=='L')
    dd4e:	ce 01       	movw	r24, r28
    dd50:	87 57       	subi	r24, 0x77	; 119
    dd52:	9e 4f       	sbci	r25, 0xFE	; 254
    dd54:	fc 01       	movw	r30, r24
    dd56:	80 81       	ld	r24, Z
    dd58:	8c 34       	cpi	r24, 0x4C	; 76
    dd5a:	11 f0       	breq	.+4      	; 0xdd60 <travel_path+0x10ec>
    dd5c:	0c 94 2b 78 	jmp	0xf056	; 0xf056 <travel_path+0x23e2>
		{
			if(node==0)
    dd60:	80 91 63 03 	lds	r24, 0x0363
    dd64:	90 91 64 03 	lds	r25, 0x0364
    dd68:	00 97       	sbiw	r24, 0x00	; 0
    dd6a:	21 f4       	brne	.+8      	; 0xdd74 <travel_path+0x1100>
			correct_left();
    dd6c:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    dd70:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
	}
		else if(pos_val=='L')
		{
			if(node==0)
			correct_left();
			else if(master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    dd74:	80 91 63 03 	lds	r24, 0x0363
    dd78:	90 91 64 03 	lds	r25, 0x0364
    dd7c:	01 96       	adiw	r24, 0x01	; 1
    dd7e:	89 59       	subi	r24, 0x99	; 153
    dd80:	9c 4f       	sbci	r25, 0xFC	; 252
    dd82:	fc 01       	movw	r30, r24
    dd84:	80 81       	ld	r24, Z
    dd86:	81 33       	cpi	r24, 0x31	; 49
    dd88:	09 f4       	brne	.+2      	; 0xdd8c <travel_path+0x1118>
    dd8a:	50 c0       	rjmp	.+160    	; 0xde2c <travel_path+0x11b8>
    dd8c:	80 91 63 03 	lds	r24, 0x0363
    dd90:	90 91 64 03 	lds	r25, 0x0364
    dd94:	01 96       	adiw	r24, 0x01	; 1
    dd96:	89 59       	subi	r24, 0x99	; 153
    dd98:	9c 4f       	sbci	r25, 0xFC	; 252
    dd9a:	fc 01       	movw	r30, r24
    dd9c:	80 81       	ld	r24, Z
    dd9e:	82 33       	cpi	r24, 0x32	; 50
    dda0:	09 f4       	brne	.+2      	; 0xdda4 <travel_path+0x1130>
    dda2:	44 c0       	rjmp	.+136    	; 0xde2c <travel_path+0x11b8>
    dda4:	80 91 63 03 	lds	r24, 0x0363
    dda8:	90 91 64 03 	lds	r25, 0x0364
    ddac:	01 96       	adiw	r24, 0x01	; 1
    ddae:	89 59       	subi	r24, 0x99	; 153
    ddb0:	9c 4f       	sbci	r25, 0xFC	; 252
    ddb2:	fc 01       	movw	r30, r24
    ddb4:	80 81       	ld	r24, Z
    ddb6:	83 33       	cpi	r24, 0x33	; 51
    ddb8:	c9 f1       	breq	.+114    	; 0xde2c <travel_path+0x11b8>
    ddba:	80 91 63 03 	lds	r24, 0x0363
    ddbe:	90 91 64 03 	lds	r25, 0x0364
    ddc2:	01 96       	adiw	r24, 0x01	; 1
    ddc4:	89 59       	subi	r24, 0x99	; 153
    ddc6:	9c 4f       	sbci	r25, 0xFC	; 252
    ddc8:	fc 01       	movw	r30, r24
    ddca:	80 81       	ld	r24, Z
    ddcc:	84 33       	cpi	r24, 0x34	; 52
    ddce:	71 f1       	breq	.+92     	; 0xde2c <travel_path+0x11b8>
    ddd0:	80 91 63 03 	lds	r24, 0x0363
    ddd4:	90 91 64 03 	lds	r25, 0x0364
    ddd8:	01 96       	adiw	r24, 0x01	; 1
    ddda:	89 59       	subi	r24, 0x99	; 153
    dddc:	9c 4f       	sbci	r25, 0xFC	; 252
    ddde:	fc 01       	movw	r30, r24
    dde0:	80 81       	ld	r24, Z
    dde2:	85 33       	cpi	r24, 0x35	; 53
    dde4:	19 f1       	breq	.+70     	; 0xde2c <travel_path+0x11b8>
    dde6:	80 91 63 03 	lds	r24, 0x0363
    ddea:	90 91 64 03 	lds	r25, 0x0364
    ddee:	01 96       	adiw	r24, 0x01	; 1
    ddf0:	89 59       	subi	r24, 0x99	; 153
    ddf2:	9c 4f       	sbci	r25, 0xFC	; 252
    ddf4:	fc 01       	movw	r30, r24
    ddf6:	80 81       	ld	r24, Z
    ddf8:	86 33       	cpi	r24, 0x36	; 54
    ddfa:	c1 f0       	breq	.+48     	; 0xde2c <travel_path+0x11b8>
    ddfc:	80 91 63 03 	lds	r24, 0x0363
    de00:	90 91 64 03 	lds	r25, 0x0364
    de04:	01 96       	adiw	r24, 0x01	; 1
    de06:	89 59       	subi	r24, 0x99	; 153
    de08:	9c 4f       	sbci	r25, 0xFC	; 252
    de0a:	fc 01       	movw	r30, r24
    de0c:	80 81       	ld	r24, Z
    de0e:	87 33       	cpi	r24, 0x37	; 55
    de10:	69 f0       	breq	.+26     	; 0xde2c <travel_path+0x11b8>
    de12:	80 91 63 03 	lds	r24, 0x0363
    de16:	90 91 64 03 	lds	r25, 0x0364
    de1a:	01 96       	adiw	r24, 0x01	; 1
    de1c:	89 59       	subi	r24, 0x99	; 153
    de1e:	9c 4f       	sbci	r25, 0xFC	; 252
    de20:	fc 01       	movw	r30, r24
    de22:	80 81       	ld	r24, Z
    de24:	88 33       	cpi	r24, 0x38	; 56
    de26:	11 f0       	breq	.+4      	; 0xde2c <travel_path+0x11b8>
    de28:	0c 94 ec 76 	jmp	0xedd8	; 0xedd8 <travel_path+0x2164>
			{//mod
				if(master_path[node+1]=='7'||master_path[node+1]=='6')
    de2c:	80 91 63 03 	lds	r24, 0x0363
    de30:	90 91 64 03 	lds	r25, 0x0364
    de34:	01 96       	adiw	r24, 0x01	; 1
    de36:	89 59       	subi	r24, 0x99	; 153
    de38:	9c 4f       	sbci	r25, 0xFC	; 252
    de3a:	fc 01       	movw	r30, r24
    de3c:	80 81       	ld	r24, Z
    de3e:	87 33       	cpi	r24, 0x37	; 55
    de40:	61 f0       	breq	.+24     	; 0xde5a <travel_path+0x11e6>
    de42:	80 91 63 03 	lds	r24, 0x0363
    de46:	90 91 64 03 	lds	r25, 0x0364
    de4a:	01 96       	adiw	r24, 0x01	; 1
    de4c:	89 59       	subi	r24, 0x99	; 153
    de4e:	9c 4f       	sbci	r25, 0xFC	; 252
    de50:	fc 01       	movw	r30, r24
    de52:	80 81       	ld	r24, Z
    de54:	86 33       	cpi	r24, 0x36	; 54
    de56:	09 f0       	breq	.+2      	; 0xde5a <travel_path+0x11e6>
    de58:	ad c1       	rjmp	.+858    	; 0xe1b4 <travel_path+0x1540>
				{
					forward_mm(25);
    de5a:	89 e1       	ldi	r24, 0x19	; 25
    de5c:	90 e0       	ldi	r25, 0x00	; 0
    de5e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    de62:	9e 01       	movw	r18, r28
    de64:	23 57       	subi	r18, 0x73	; 115
    de66:	3f 4f       	sbci	r19, 0xFF	; 255
    de68:	80 e0       	ldi	r24, 0x00	; 0
    de6a:	90 e0       	ldi	r25, 0x00	; 0
    de6c:	a0 ea       	ldi	r26, 0xA0	; 160
    de6e:	b1 e4       	ldi	r27, 0x41	; 65
    de70:	f9 01       	movw	r30, r18
    de72:	80 83       	st	Z, r24
    de74:	91 83       	std	Z+1, r25	; 0x01
    de76:	a2 83       	std	Z+2, r26	; 0x02
    de78:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    de7a:	8e 01       	movw	r16, r28
    de7c:	0f 56       	subi	r16, 0x6F	; 111
    de7e:	1f 4f       	sbci	r17, 0xFF	; 255
    de80:	ce 01       	movw	r24, r28
    de82:	83 57       	subi	r24, 0x73	; 115
    de84:	9f 4f       	sbci	r25, 0xFF	; 255
    de86:	fc 01       	movw	r30, r24
    de88:	60 81       	ld	r22, Z
    de8a:	71 81       	ldd	r23, Z+1	; 0x01
    de8c:	82 81       	ldd	r24, Z+2	; 0x02
    de8e:	93 81       	ldd	r25, Z+3	; 0x03
    de90:	26 e6       	ldi	r18, 0x66	; 102
    de92:	36 e6       	ldi	r19, 0x66	; 102
    de94:	46 e6       	ldi	r20, 0x66	; 102
    de96:	55 e4       	ldi	r21, 0x45	; 69
    de98:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    de9c:	dc 01       	movw	r26, r24
    de9e:	cb 01       	movw	r24, r22
    dea0:	f8 01       	movw	r30, r16
    dea2:	80 83       	st	Z, r24
    dea4:	91 83       	std	Z+1, r25	; 0x01
    dea6:	a2 83       	std	Z+2, r26	; 0x02
    dea8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    deaa:	ce 01       	movw	r24, r28
    deac:	8f 56       	subi	r24, 0x6F	; 111
    deae:	9f 4f       	sbci	r25, 0xFF	; 255
    deb0:	11 e0       	ldi	r17, 0x01	; 1
    deb2:	fc 01       	movw	r30, r24
    deb4:	60 81       	ld	r22, Z
    deb6:	71 81       	ldd	r23, Z+1	; 0x01
    deb8:	82 81       	ldd	r24, Z+2	; 0x02
    deba:	93 81       	ldd	r25, Z+3	; 0x03
    debc:	20 e0       	ldi	r18, 0x00	; 0
    debe:	30 e0       	ldi	r19, 0x00	; 0
    dec0:	40 e8       	ldi	r20, 0x80	; 128
    dec2:	5f e3       	ldi	r21, 0x3F	; 63
    dec4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    dec8:	88 23       	and	r24, r24
    deca:	0c f0       	brlt	.+2      	; 0xdece <travel_path+0x125a>
    decc:	10 e0       	ldi	r17, 0x00	; 0
    dece:	11 23       	and	r17, r17
    ded0:	49 f0       	breq	.+18     	; 0xdee4 <travel_path+0x1270>
		__ticks = 1;
    ded2:	ce 01       	movw	r24, r28
    ded4:	8b 56       	subi	r24, 0x6B	; 107
    ded6:	9f 4f       	sbci	r25, 0xFF	; 255
    ded8:	21 e0       	ldi	r18, 0x01	; 1
    deda:	30 e0       	ldi	r19, 0x00	; 0
    dedc:	fc 01       	movw	r30, r24
    dede:	31 83       	std	Z+1, r19	; 0x01
    dee0:	20 83       	st	Z, r18
    dee2:	74 c0       	rjmp	.+232    	; 0xdfcc <travel_path+0x1358>
	else if (__tmp > 65535)
    dee4:	ce 01       	movw	r24, r28
    dee6:	8f 56       	subi	r24, 0x6F	; 111
    dee8:	9f 4f       	sbci	r25, 0xFF	; 255
    deea:	11 e0       	ldi	r17, 0x01	; 1
    deec:	fc 01       	movw	r30, r24
    deee:	60 81       	ld	r22, Z
    def0:	71 81       	ldd	r23, Z+1	; 0x01
    def2:	82 81       	ldd	r24, Z+2	; 0x02
    def4:	93 81       	ldd	r25, Z+3	; 0x03
    def6:	20 e0       	ldi	r18, 0x00	; 0
    def8:	3f ef       	ldi	r19, 0xFF	; 255
    defa:	4f e7       	ldi	r20, 0x7F	; 127
    defc:	57 e4       	ldi	r21, 0x47	; 71
    defe:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    df02:	18 16       	cp	r1, r24
    df04:	0c f0       	brlt	.+2      	; 0xdf08 <travel_path+0x1294>
    df06:	10 e0       	ldi	r17, 0x00	; 0
    df08:	11 23       	and	r17, r17
    df0a:	09 f4       	brne	.+2      	; 0xdf0e <travel_path+0x129a>
    df0c:	4d c0       	rjmp	.+154    	; 0xdfa8 <travel_path+0x1334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    df0e:	ce 01       	movw	r24, r28
    df10:	83 57       	subi	r24, 0x73	; 115
    df12:	9f 4f       	sbci	r25, 0xFF	; 255
    df14:	fc 01       	movw	r30, r24
    df16:	60 81       	ld	r22, Z
    df18:	71 81       	ldd	r23, Z+1	; 0x01
    df1a:	82 81       	ldd	r24, Z+2	; 0x02
    df1c:	93 81       	ldd	r25, Z+3	; 0x03
    df1e:	20 e0       	ldi	r18, 0x00	; 0
    df20:	30 e0       	ldi	r19, 0x00	; 0
    df22:	40 e2       	ldi	r20, 0x20	; 32
    df24:	51 e4       	ldi	r21, 0x41	; 65
    df26:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    df2a:	dc 01       	movw	r26, r24
    df2c:	cb 01       	movw	r24, r22
    df2e:	8e 01       	movw	r16, r28
    df30:	0b 56       	subi	r16, 0x6B	; 107
    df32:	1f 4f       	sbci	r17, 0xFF	; 255
    df34:	bc 01       	movw	r22, r24
    df36:	cd 01       	movw	r24, r26
    df38:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    df3c:	dc 01       	movw	r26, r24
    df3e:	cb 01       	movw	r24, r22
    df40:	f8 01       	movw	r30, r16
    df42:	91 83       	std	Z+1, r25	; 0x01
    df44:	80 83       	st	Z, r24
    df46:	27 c0       	rjmp	.+78     	; 0xdf96 <travel_path+0x1322>
    df48:	ce 01       	movw	r24, r28
    df4a:	89 56       	subi	r24, 0x69	; 105
    df4c:	9f 4f       	sbci	r25, 0xFF	; 255
    df4e:	20 e7       	ldi	r18, 0x70	; 112
    df50:	31 e0       	ldi	r19, 0x01	; 1
    df52:	fc 01       	movw	r30, r24
    df54:	31 83       	std	Z+1, r19	; 0x01
    df56:	20 83       	st	Z, r18
    df58:	ce 01       	movw	r24, r28
    df5a:	89 56       	subi	r24, 0x69	; 105
    df5c:	9f 4f       	sbci	r25, 0xFF	; 255
    df5e:	fc 01       	movw	r30, r24
    df60:	80 81       	ld	r24, Z
    df62:	91 81       	ldd	r25, Z+1	; 0x01
    df64:	8c 01       	movw	r16, r24
    df66:	c8 01       	movw	r24, r16
    df68:	01 97       	sbiw	r24, 0x01	; 1
    df6a:	f1 f7       	brne	.-4      	; 0xdf68 <travel_path+0x12f4>
    df6c:	8c 01       	movw	r16, r24
    df6e:	ce 01       	movw	r24, r28
    df70:	89 56       	subi	r24, 0x69	; 105
    df72:	9f 4f       	sbci	r25, 0xFF	; 255
    df74:	fc 01       	movw	r30, r24
    df76:	11 83       	std	Z+1, r17	; 0x01
    df78:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    df7a:	ce 01       	movw	r24, r28
    df7c:	8b 56       	subi	r24, 0x6B	; 107
    df7e:	9f 4f       	sbci	r25, 0xFF	; 255
    df80:	9e 01       	movw	r18, r28
    df82:	2b 56       	subi	r18, 0x6B	; 107
    df84:	3f 4f       	sbci	r19, 0xFF	; 255
    df86:	f9 01       	movw	r30, r18
    df88:	20 81       	ld	r18, Z
    df8a:	31 81       	ldd	r19, Z+1	; 0x01
    df8c:	21 50       	subi	r18, 0x01	; 1
    df8e:	30 40       	sbci	r19, 0x00	; 0
    df90:	fc 01       	movw	r30, r24
    df92:	31 83       	std	Z+1, r19	; 0x01
    df94:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    df96:	ce 01       	movw	r24, r28
    df98:	8b 56       	subi	r24, 0x6B	; 107
    df9a:	9f 4f       	sbci	r25, 0xFF	; 255
    df9c:	fc 01       	movw	r30, r24
    df9e:	80 81       	ld	r24, Z
    dfa0:	91 81       	ldd	r25, Z+1	; 0x01
    dfa2:	00 97       	sbiw	r24, 0x00	; 0
    dfa4:	89 f6       	brne	.-94     	; 0xdf48 <travel_path+0x12d4>
    dfa6:	2f c0       	rjmp	.+94     	; 0xe006 <travel_path+0x1392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dfa8:	8e 01       	movw	r16, r28
    dfaa:	0b 56       	subi	r16, 0x6B	; 107
    dfac:	1f 4f       	sbci	r17, 0xFF	; 255
    dfae:	ce 01       	movw	r24, r28
    dfb0:	8f 56       	subi	r24, 0x6F	; 111
    dfb2:	9f 4f       	sbci	r25, 0xFF	; 255
    dfb4:	fc 01       	movw	r30, r24
    dfb6:	60 81       	ld	r22, Z
    dfb8:	71 81       	ldd	r23, Z+1	; 0x01
    dfba:	82 81       	ldd	r24, Z+2	; 0x02
    dfbc:	93 81       	ldd	r25, Z+3	; 0x03
    dfbe:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    dfc2:	dc 01       	movw	r26, r24
    dfc4:	cb 01       	movw	r24, r22
    dfc6:	f8 01       	movw	r30, r16
    dfc8:	91 83       	std	Z+1, r25	; 0x01
    dfca:	80 83       	st	Z, r24
    dfcc:	ce 01       	movw	r24, r28
    dfce:	87 56       	subi	r24, 0x67	; 103
    dfd0:	9f 4f       	sbci	r25, 0xFF	; 255
    dfd2:	9e 01       	movw	r18, r28
    dfd4:	2b 56       	subi	r18, 0x6B	; 107
    dfd6:	3f 4f       	sbci	r19, 0xFF	; 255
    dfd8:	f9 01       	movw	r30, r18
    dfda:	20 81       	ld	r18, Z
    dfdc:	31 81       	ldd	r19, Z+1	; 0x01
    dfde:	fc 01       	movw	r30, r24
    dfe0:	31 83       	std	Z+1, r19	; 0x01
    dfe2:	20 83       	st	Z, r18
    dfe4:	ce 01       	movw	r24, r28
    dfe6:	87 56       	subi	r24, 0x67	; 103
    dfe8:	9f 4f       	sbci	r25, 0xFF	; 255
    dfea:	fc 01       	movw	r30, r24
    dfec:	80 81       	ld	r24, Z
    dfee:	91 81       	ldd	r25, Z+1	; 0x01
    dff0:	8c 01       	movw	r16, r24
    dff2:	c8 01       	movw	r24, r16
    dff4:	01 97       	sbiw	r24, 0x01	; 1
    dff6:	f1 f7       	brne	.-4      	; 0xdff4 <travel_path+0x1380>
    dff8:	8c 01       	movw	r16, r24
    dffa:	ce 01       	movw	r24, r28
    dffc:	87 56       	subi	r24, 0x67	; 103
    dffe:	9f 4f       	sbci	r25, 0xFF	; 255
    e000:	fc 01       	movw	r30, r24
    e002:	11 83       	std	Z+1, r17	; 0x01
    e004:	00 83       	st	Z, r16
					_delay_ms(20);
					stop();
    e006:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    e00a:	9e 01       	movw	r18, r28
    e00c:	25 56       	subi	r18, 0x65	; 101
    e00e:	3f 4f       	sbci	r19, 0xFF	; 255
    e010:	80 e0       	ldi	r24, 0x00	; 0
    e012:	90 e0       	ldi	r25, 0x00	; 0
    e014:	a8 ec       	ldi	r26, 0xC8	; 200
    e016:	b1 e4       	ldi	r27, 0x41	; 65
    e018:	f9 01       	movw	r30, r18
    e01a:	80 83       	st	Z, r24
    e01c:	91 83       	std	Z+1, r25	; 0x01
    e01e:	a2 83       	std	Z+2, r26	; 0x02
    e020:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e022:	8e 01       	movw	r16, r28
    e024:	01 56       	subi	r16, 0x61	; 97
    e026:	1f 4f       	sbci	r17, 0xFF	; 255
    e028:	ce 01       	movw	r24, r28
    e02a:	85 56       	subi	r24, 0x65	; 101
    e02c:	9f 4f       	sbci	r25, 0xFF	; 255
    e02e:	fc 01       	movw	r30, r24
    e030:	60 81       	ld	r22, Z
    e032:	71 81       	ldd	r23, Z+1	; 0x01
    e034:	82 81       	ldd	r24, Z+2	; 0x02
    e036:	93 81       	ldd	r25, Z+3	; 0x03
    e038:	26 e6       	ldi	r18, 0x66	; 102
    e03a:	36 e6       	ldi	r19, 0x66	; 102
    e03c:	46 e6       	ldi	r20, 0x66	; 102
    e03e:	55 e4       	ldi	r21, 0x45	; 69
    e040:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e044:	dc 01       	movw	r26, r24
    e046:	cb 01       	movw	r24, r22
    e048:	f8 01       	movw	r30, r16
    e04a:	80 83       	st	Z, r24
    e04c:	91 83       	std	Z+1, r25	; 0x01
    e04e:	a2 83       	std	Z+2, r26	; 0x02
    e050:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e052:	ce 01       	movw	r24, r28
    e054:	81 56       	subi	r24, 0x61	; 97
    e056:	9f 4f       	sbci	r25, 0xFF	; 255
    e058:	11 e0       	ldi	r17, 0x01	; 1
    e05a:	fc 01       	movw	r30, r24
    e05c:	60 81       	ld	r22, Z
    e05e:	71 81       	ldd	r23, Z+1	; 0x01
    e060:	82 81       	ldd	r24, Z+2	; 0x02
    e062:	93 81       	ldd	r25, Z+3	; 0x03
    e064:	20 e0       	ldi	r18, 0x00	; 0
    e066:	30 e0       	ldi	r19, 0x00	; 0
    e068:	40 e8       	ldi	r20, 0x80	; 128
    e06a:	5f e3       	ldi	r21, 0x3F	; 63
    e06c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    e070:	88 23       	and	r24, r24
    e072:	0c f0       	brlt	.+2      	; 0xe076 <travel_path+0x1402>
    e074:	10 e0       	ldi	r17, 0x00	; 0
    e076:	11 23       	and	r17, r17
    e078:	49 f0       	breq	.+18     	; 0xe08c <travel_path+0x1418>
		__ticks = 1;
    e07a:	ce 01       	movw	r24, r28
    e07c:	8d 55       	subi	r24, 0x5D	; 93
    e07e:	9f 4f       	sbci	r25, 0xFF	; 255
    e080:	21 e0       	ldi	r18, 0x01	; 1
    e082:	30 e0       	ldi	r19, 0x00	; 0
    e084:	fc 01       	movw	r30, r24
    e086:	31 83       	std	Z+1, r19	; 0x01
    e088:	20 83       	st	Z, r18
    e08a:	74 c0       	rjmp	.+232    	; 0xe174 <travel_path+0x1500>
	else if (__tmp > 65535)
    e08c:	ce 01       	movw	r24, r28
    e08e:	81 56       	subi	r24, 0x61	; 97
    e090:	9f 4f       	sbci	r25, 0xFF	; 255
    e092:	11 e0       	ldi	r17, 0x01	; 1
    e094:	fc 01       	movw	r30, r24
    e096:	60 81       	ld	r22, Z
    e098:	71 81       	ldd	r23, Z+1	; 0x01
    e09a:	82 81       	ldd	r24, Z+2	; 0x02
    e09c:	93 81       	ldd	r25, Z+3	; 0x03
    e09e:	20 e0       	ldi	r18, 0x00	; 0
    e0a0:	3f ef       	ldi	r19, 0xFF	; 255
    e0a2:	4f e7       	ldi	r20, 0x7F	; 127
    e0a4:	57 e4       	ldi	r21, 0x47	; 71
    e0a6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    e0aa:	18 16       	cp	r1, r24
    e0ac:	0c f0       	brlt	.+2      	; 0xe0b0 <travel_path+0x143c>
    e0ae:	10 e0       	ldi	r17, 0x00	; 0
    e0b0:	11 23       	and	r17, r17
    e0b2:	09 f4       	brne	.+2      	; 0xe0b6 <travel_path+0x1442>
    e0b4:	4d c0       	rjmp	.+154    	; 0xe150 <travel_path+0x14dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e0b6:	ce 01       	movw	r24, r28
    e0b8:	85 56       	subi	r24, 0x65	; 101
    e0ba:	9f 4f       	sbci	r25, 0xFF	; 255
    e0bc:	fc 01       	movw	r30, r24
    e0be:	60 81       	ld	r22, Z
    e0c0:	71 81       	ldd	r23, Z+1	; 0x01
    e0c2:	82 81       	ldd	r24, Z+2	; 0x02
    e0c4:	93 81       	ldd	r25, Z+3	; 0x03
    e0c6:	20 e0       	ldi	r18, 0x00	; 0
    e0c8:	30 e0       	ldi	r19, 0x00	; 0
    e0ca:	40 e2       	ldi	r20, 0x20	; 32
    e0cc:	51 e4       	ldi	r21, 0x41	; 65
    e0ce:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e0d2:	dc 01       	movw	r26, r24
    e0d4:	cb 01       	movw	r24, r22
    e0d6:	8e 01       	movw	r16, r28
    e0d8:	0d 55       	subi	r16, 0x5D	; 93
    e0da:	1f 4f       	sbci	r17, 0xFF	; 255
    e0dc:	bc 01       	movw	r22, r24
    e0de:	cd 01       	movw	r24, r26
    e0e0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e0e4:	dc 01       	movw	r26, r24
    e0e6:	cb 01       	movw	r24, r22
    e0e8:	f8 01       	movw	r30, r16
    e0ea:	91 83       	std	Z+1, r25	; 0x01
    e0ec:	80 83       	st	Z, r24
    e0ee:	27 c0       	rjmp	.+78     	; 0xe13e <travel_path+0x14ca>
    e0f0:	ce 01       	movw	r24, r28
    e0f2:	8b 55       	subi	r24, 0x5B	; 91
    e0f4:	9f 4f       	sbci	r25, 0xFF	; 255
    e0f6:	20 e7       	ldi	r18, 0x70	; 112
    e0f8:	31 e0       	ldi	r19, 0x01	; 1
    e0fa:	fc 01       	movw	r30, r24
    e0fc:	31 83       	std	Z+1, r19	; 0x01
    e0fe:	20 83       	st	Z, r18
    e100:	ce 01       	movw	r24, r28
    e102:	8b 55       	subi	r24, 0x5B	; 91
    e104:	9f 4f       	sbci	r25, 0xFF	; 255
    e106:	fc 01       	movw	r30, r24
    e108:	80 81       	ld	r24, Z
    e10a:	91 81       	ldd	r25, Z+1	; 0x01
    e10c:	8c 01       	movw	r16, r24
    e10e:	c8 01       	movw	r24, r16
    e110:	01 97       	sbiw	r24, 0x01	; 1
    e112:	f1 f7       	brne	.-4      	; 0xe110 <travel_path+0x149c>
    e114:	8c 01       	movw	r16, r24
    e116:	ce 01       	movw	r24, r28
    e118:	8b 55       	subi	r24, 0x5B	; 91
    e11a:	9f 4f       	sbci	r25, 0xFF	; 255
    e11c:	fc 01       	movw	r30, r24
    e11e:	11 83       	std	Z+1, r17	; 0x01
    e120:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e122:	ce 01       	movw	r24, r28
    e124:	8d 55       	subi	r24, 0x5D	; 93
    e126:	9f 4f       	sbci	r25, 0xFF	; 255
    e128:	9e 01       	movw	r18, r28
    e12a:	2d 55       	subi	r18, 0x5D	; 93
    e12c:	3f 4f       	sbci	r19, 0xFF	; 255
    e12e:	f9 01       	movw	r30, r18
    e130:	20 81       	ld	r18, Z
    e132:	31 81       	ldd	r19, Z+1	; 0x01
    e134:	21 50       	subi	r18, 0x01	; 1
    e136:	30 40       	sbci	r19, 0x00	; 0
    e138:	fc 01       	movw	r30, r24
    e13a:	31 83       	std	Z+1, r19	; 0x01
    e13c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e13e:	ce 01       	movw	r24, r28
    e140:	8d 55       	subi	r24, 0x5D	; 93
    e142:	9f 4f       	sbci	r25, 0xFF	; 255
    e144:	fc 01       	movw	r30, r24
    e146:	80 81       	ld	r24, Z
    e148:	91 81       	ldd	r25, Z+1	; 0x01
    e14a:	00 97       	sbiw	r24, 0x00	; 0
    e14c:	89 f6       	brne	.-94     	; 0xe0f0 <travel_path+0x147c>
    e14e:	2f c0       	rjmp	.+94     	; 0xe1ae <travel_path+0x153a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e150:	8e 01       	movw	r16, r28
    e152:	0d 55       	subi	r16, 0x5D	; 93
    e154:	1f 4f       	sbci	r17, 0xFF	; 255
    e156:	ce 01       	movw	r24, r28
    e158:	81 56       	subi	r24, 0x61	; 97
    e15a:	9f 4f       	sbci	r25, 0xFF	; 255
    e15c:	fc 01       	movw	r30, r24
    e15e:	60 81       	ld	r22, Z
    e160:	71 81       	ldd	r23, Z+1	; 0x01
    e162:	82 81       	ldd	r24, Z+2	; 0x02
    e164:	93 81       	ldd	r25, Z+3	; 0x03
    e166:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e16a:	dc 01       	movw	r26, r24
    e16c:	cb 01       	movw	r24, r22
    e16e:	f8 01       	movw	r30, r16
    e170:	91 83       	std	Z+1, r25	; 0x01
    e172:	80 83       	st	Z, r24
    e174:	ce 01       	movw	r24, r28
    e176:	89 55       	subi	r24, 0x59	; 89
    e178:	9f 4f       	sbci	r25, 0xFF	; 255
    e17a:	9e 01       	movw	r18, r28
    e17c:	2d 55       	subi	r18, 0x5D	; 93
    e17e:	3f 4f       	sbci	r19, 0xFF	; 255
    e180:	f9 01       	movw	r30, r18
    e182:	20 81       	ld	r18, Z
    e184:	31 81       	ldd	r19, Z+1	; 0x01
    e186:	fc 01       	movw	r30, r24
    e188:	31 83       	std	Z+1, r19	; 0x01
    e18a:	20 83       	st	Z, r18
    e18c:	ce 01       	movw	r24, r28
    e18e:	89 55       	subi	r24, 0x59	; 89
    e190:	9f 4f       	sbci	r25, 0xFF	; 255
    e192:	fc 01       	movw	r30, r24
    e194:	80 81       	ld	r24, Z
    e196:	91 81       	ldd	r25, Z+1	; 0x01
    e198:	8c 01       	movw	r16, r24
    e19a:	c8 01       	movw	r24, r16
    e19c:	01 97       	sbiw	r24, 0x01	; 1
    e19e:	f1 f7       	brne	.-4      	; 0xe19c <travel_path+0x1528>
    e1a0:	8c 01       	movw	r16, r24
    e1a2:	ce 01       	movw	r24, r28
    e1a4:	89 55       	subi	r24, 0x59	; 89
    e1a6:	9f 4f       	sbci	r25, 0xFF	; 255
    e1a8:	fc 01       	movw	r30, r24
    e1aa:	11 83       	std	Z+1, r17	; 0x01
    e1ac:	00 83       	st	Z, r16
					_delay_ms(25);
					correct_left();
    e1ae:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    e1b2:	ea c5       	rjmp	.+3028   	; 0xed88 <travel_path+0x2114>
				}
						else if(master_path[node+1]=='8'){
    e1b4:	80 91 63 03 	lds	r24, 0x0363
    e1b8:	90 91 64 03 	lds	r25, 0x0364
    e1bc:	01 96       	adiw	r24, 0x01	; 1
    e1be:	89 59       	subi	r24, 0x99	; 153
    e1c0:	9c 4f       	sbci	r25, 0xFC	; 252
    e1c2:	fc 01       	movw	r30, r24
    e1c4:	80 81       	ld	r24, Z
    e1c6:	88 33       	cpi	r24, 0x38	; 56
    e1c8:	09 f0       	breq	.+2      	; 0xe1cc <travel_path+0x1558>
    e1ca:	7f c2       	rjmp	.+1278   	; 0xe6ca <travel_path+0x1a56>
							stop();
    e1cc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    e1d0:	9e 01       	movw	r18, r28
    e1d2:	27 55       	subi	r18, 0x57	; 87
    e1d4:	3f 4f       	sbci	r19, 0xFF	; 255
    e1d6:	80 e0       	ldi	r24, 0x00	; 0
    e1d8:	90 e0       	ldi	r25, 0x00	; 0
    e1da:	a0 ea       	ldi	r26, 0xA0	; 160
    e1dc:	b1 e4       	ldi	r27, 0x41	; 65
    e1de:	f9 01       	movw	r30, r18
    e1e0:	80 83       	st	Z, r24
    e1e2:	91 83       	std	Z+1, r25	; 0x01
    e1e4:	a2 83       	std	Z+2, r26	; 0x02
    e1e6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e1e8:	8e 01       	movw	r16, r28
    e1ea:	03 55       	subi	r16, 0x53	; 83
    e1ec:	1f 4f       	sbci	r17, 0xFF	; 255
    e1ee:	ce 01       	movw	r24, r28
    e1f0:	87 55       	subi	r24, 0x57	; 87
    e1f2:	9f 4f       	sbci	r25, 0xFF	; 255
    e1f4:	fc 01       	movw	r30, r24
    e1f6:	60 81       	ld	r22, Z
    e1f8:	71 81       	ldd	r23, Z+1	; 0x01
    e1fa:	82 81       	ldd	r24, Z+2	; 0x02
    e1fc:	93 81       	ldd	r25, Z+3	; 0x03
    e1fe:	26 e6       	ldi	r18, 0x66	; 102
    e200:	36 e6       	ldi	r19, 0x66	; 102
    e202:	46 e6       	ldi	r20, 0x66	; 102
    e204:	55 e4       	ldi	r21, 0x45	; 69
    e206:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e20a:	dc 01       	movw	r26, r24
    e20c:	cb 01       	movw	r24, r22
    e20e:	f8 01       	movw	r30, r16
    e210:	80 83       	st	Z, r24
    e212:	91 83       	std	Z+1, r25	; 0x01
    e214:	a2 83       	std	Z+2, r26	; 0x02
    e216:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e218:	ce 01       	movw	r24, r28
    e21a:	83 55       	subi	r24, 0x53	; 83
    e21c:	9f 4f       	sbci	r25, 0xFF	; 255
    e21e:	11 e0       	ldi	r17, 0x01	; 1
    e220:	fc 01       	movw	r30, r24
    e222:	60 81       	ld	r22, Z
    e224:	71 81       	ldd	r23, Z+1	; 0x01
    e226:	82 81       	ldd	r24, Z+2	; 0x02
    e228:	93 81       	ldd	r25, Z+3	; 0x03
    e22a:	20 e0       	ldi	r18, 0x00	; 0
    e22c:	30 e0       	ldi	r19, 0x00	; 0
    e22e:	40 e8       	ldi	r20, 0x80	; 128
    e230:	5f e3       	ldi	r21, 0x3F	; 63
    e232:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    e236:	88 23       	and	r24, r24
    e238:	0c f0       	brlt	.+2      	; 0xe23c <travel_path+0x15c8>
    e23a:	10 e0       	ldi	r17, 0x00	; 0
    e23c:	11 23       	and	r17, r17
    e23e:	49 f0       	breq	.+18     	; 0xe252 <travel_path+0x15de>
		__ticks = 1;
    e240:	ce 01       	movw	r24, r28
    e242:	8f 54       	subi	r24, 0x4F	; 79
    e244:	9f 4f       	sbci	r25, 0xFF	; 255
    e246:	21 e0       	ldi	r18, 0x01	; 1
    e248:	30 e0       	ldi	r19, 0x00	; 0
    e24a:	fc 01       	movw	r30, r24
    e24c:	31 83       	std	Z+1, r19	; 0x01
    e24e:	20 83       	st	Z, r18
    e250:	74 c0       	rjmp	.+232    	; 0xe33a <travel_path+0x16c6>
	else if (__tmp > 65535)
    e252:	ce 01       	movw	r24, r28
    e254:	83 55       	subi	r24, 0x53	; 83
    e256:	9f 4f       	sbci	r25, 0xFF	; 255
    e258:	11 e0       	ldi	r17, 0x01	; 1
    e25a:	fc 01       	movw	r30, r24
    e25c:	60 81       	ld	r22, Z
    e25e:	71 81       	ldd	r23, Z+1	; 0x01
    e260:	82 81       	ldd	r24, Z+2	; 0x02
    e262:	93 81       	ldd	r25, Z+3	; 0x03
    e264:	20 e0       	ldi	r18, 0x00	; 0
    e266:	3f ef       	ldi	r19, 0xFF	; 255
    e268:	4f e7       	ldi	r20, 0x7F	; 127
    e26a:	57 e4       	ldi	r21, 0x47	; 71
    e26c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    e270:	18 16       	cp	r1, r24
    e272:	0c f0       	brlt	.+2      	; 0xe276 <travel_path+0x1602>
    e274:	10 e0       	ldi	r17, 0x00	; 0
    e276:	11 23       	and	r17, r17
    e278:	09 f4       	brne	.+2      	; 0xe27c <travel_path+0x1608>
    e27a:	4d c0       	rjmp	.+154    	; 0xe316 <travel_path+0x16a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e27c:	ce 01       	movw	r24, r28
    e27e:	87 55       	subi	r24, 0x57	; 87
    e280:	9f 4f       	sbci	r25, 0xFF	; 255
    e282:	fc 01       	movw	r30, r24
    e284:	60 81       	ld	r22, Z
    e286:	71 81       	ldd	r23, Z+1	; 0x01
    e288:	82 81       	ldd	r24, Z+2	; 0x02
    e28a:	93 81       	ldd	r25, Z+3	; 0x03
    e28c:	20 e0       	ldi	r18, 0x00	; 0
    e28e:	30 e0       	ldi	r19, 0x00	; 0
    e290:	40 e2       	ldi	r20, 0x20	; 32
    e292:	51 e4       	ldi	r21, 0x41	; 65
    e294:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e298:	dc 01       	movw	r26, r24
    e29a:	cb 01       	movw	r24, r22
    e29c:	8e 01       	movw	r16, r28
    e29e:	0f 54       	subi	r16, 0x4F	; 79
    e2a0:	1f 4f       	sbci	r17, 0xFF	; 255
    e2a2:	bc 01       	movw	r22, r24
    e2a4:	cd 01       	movw	r24, r26
    e2a6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e2aa:	dc 01       	movw	r26, r24
    e2ac:	cb 01       	movw	r24, r22
    e2ae:	f8 01       	movw	r30, r16
    e2b0:	91 83       	std	Z+1, r25	; 0x01
    e2b2:	80 83       	st	Z, r24
    e2b4:	27 c0       	rjmp	.+78     	; 0xe304 <travel_path+0x1690>
    e2b6:	ce 01       	movw	r24, r28
    e2b8:	8d 54       	subi	r24, 0x4D	; 77
    e2ba:	9f 4f       	sbci	r25, 0xFF	; 255
    e2bc:	20 e7       	ldi	r18, 0x70	; 112
    e2be:	31 e0       	ldi	r19, 0x01	; 1
    e2c0:	fc 01       	movw	r30, r24
    e2c2:	31 83       	std	Z+1, r19	; 0x01
    e2c4:	20 83       	st	Z, r18
    e2c6:	ce 01       	movw	r24, r28
    e2c8:	8d 54       	subi	r24, 0x4D	; 77
    e2ca:	9f 4f       	sbci	r25, 0xFF	; 255
    e2cc:	fc 01       	movw	r30, r24
    e2ce:	80 81       	ld	r24, Z
    e2d0:	91 81       	ldd	r25, Z+1	; 0x01
    e2d2:	8c 01       	movw	r16, r24
    e2d4:	c8 01       	movw	r24, r16
    e2d6:	01 97       	sbiw	r24, 0x01	; 1
    e2d8:	f1 f7       	brne	.-4      	; 0xe2d6 <travel_path+0x1662>
    e2da:	8c 01       	movw	r16, r24
    e2dc:	ce 01       	movw	r24, r28
    e2de:	8d 54       	subi	r24, 0x4D	; 77
    e2e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e2e2:	fc 01       	movw	r30, r24
    e2e4:	11 83       	std	Z+1, r17	; 0x01
    e2e6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e2e8:	ce 01       	movw	r24, r28
    e2ea:	8f 54       	subi	r24, 0x4F	; 79
    e2ec:	9f 4f       	sbci	r25, 0xFF	; 255
    e2ee:	9e 01       	movw	r18, r28
    e2f0:	2f 54       	subi	r18, 0x4F	; 79
    e2f2:	3f 4f       	sbci	r19, 0xFF	; 255
    e2f4:	f9 01       	movw	r30, r18
    e2f6:	20 81       	ld	r18, Z
    e2f8:	31 81       	ldd	r19, Z+1	; 0x01
    e2fa:	21 50       	subi	r18, 0x01	; 1
    e2fc:	30 40       	sbci	r19, 0x00	; 0
    e2fe:	fc 01       	movw	r30, r24
    e300:	31 83       	std	Z+1, r19	; 0x01
    e302:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e304:	ce 01       	movw	r24, r28
    e306:	8f 54       	subi	r24, 0x4F	; 79
    e308:	9f 4f       	sbci	r25, 0xFF	; 255
    e30a:	fc 01       	movw	r30, r24
    e30c:	80 81       	ld	r24, Z
    e30e:	91 81       	ldd	r25, Z+1	; 0x01
    e310:	00 97       	sbiw	r24, 0x00	; 0
    e312:	89 f6       	brne	.-94     	; 0xe2b6 <travel_path+0x1642>
    e314:	2f c0       	rjmp	.+94     	; 0xe374 <travel_path+0x1700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e316:	8e 01       	movw	r16, r28
    e318:	0f 54       	subi	r16, 0x4F	; 79
    e31a:	1f 4f       	sbci	r17, 0xFF	; 255
    e31c:	ce 01       	movw	r24, r28
    e31e:	83 55       	subi	r24, 0x53	; 83
    e320:	9f 4f       	sbci	r25, 0xFF	; 255
    e322:	fc 01       	movw	r30, r24
    e324:	60 81       	ld	r22, Z
    e326:	71 81       	ldd	r23, Z+1	; 0x01
    e328:	82 81       	ldd	r24, Z+2	; 0x02
    e32a:	93 81       	ldd	r25, Z+3	; 0x03
    e32c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e330:	dc 01       	movw	r26, r24
    e332:	cb 01       	movw	r24, r22
    e334:	f8 01       	movw	r30, r16
    e336:	91 83       	std	Z+1, r25	; 0x01
    e338:	80 83       	st	Z, r24
    e33a:	ce 01       	movw	r24, r28
    e33c:	8b 54       	subi	r24, 0x4B	; 75
    e33e:	9f 4f       	sbci	r25, 0xFF	; 255
    e340:	9e 01       	movw	r18, r28
    e342:	2f 54       	subi	r18, 0x4F	; 79
    e344:	3f 4f       	sbci	r19, 0xFF	; 255
    e346:	f9 01       	movw	r30, r18
    e348:	20 81       	ld	r18, Z
    e34a:	31 81       	ldd	r19, Z+1	; 0x01
    e34c:	fc 01       	movw	r30, r24
    e34e:	31 83       	std	Z+1, r19	; 0x01
    e350:	20 83       	st	Z, r18
    e352:	ce 01       	movw	r24, r28
    e354:	8b 54       	subi	r24, 0x4B	; 75
    e356:	9f 4f       	sbci	r25, 0xFF	; 255
    e358:	fc 01       	movw	r30, r24
    e35a:	80 81       	ld	r24, Z
    e35c:	91 81       	ldd	r25, Z+1	; 0x01
    e35e:	8c 01       	movw	r16, r24
    e360:	c8 01       	movw	r24, r16
    e362:	01 97       	sbiw	r24, 0x01	; 1
    e364:	f1 f7       	brne	.-4      	; 0xe362 <travel_path+0x16ee>
    e366:	8c 01       	movw	r16, r24
    e368:	ce 01       	movw	r24, r28
    e36a:	8b 54       	subi	r24, 0x4B	; 75
    e36c:	9f 4f       	sbci	r25, 0xFF	; 255
    e36e:	fc 01       	movw	r30, r24
    e370:	11 83       	std	Z+1, r17	; 0x01
    e372:	00 83       	st	Z, r16
							_delay_ms(20);
							forward_mm(160);
    e374:	80 ea       	ldi	r24, 0xA0	; 160
    e376:	90 e0       	ldi	r25, 0x00	; 0
    e378:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    e37c:	9e 01       	movw	r18, r28
    e37e:	29 54       	subi	r18, 0x49	; 73
    e380:	3f 4f       	sbci	r19, 0xFF	; 255
    e382:	80 e0       	ldi	r24, 0x00	; 0
    e384:	90 e0       	ldi	r25, 0x00	; 0
    e386:	a0 ea       	ldi	r26, 0xA0	; 160
    e388:	b1 e4       	ldi	r27, 0x41	; 65
    e38a:	f9 01       	movw	r30, r18
    e38c:	80 83       	st	Z, r24
    e38e:	91 83       	std	Z+1, r25	; 0x01
    e390:	a2 83       	std	Z+2, r26	; 0x02
    e392:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e394:	8e 01       	movw	r16, r28
    e396:	05 54       	subi	r16, 0x45	; 69
    e398:	1f 4f       	sbci	r17, 0xFF	; 255
    e39a:	ce 01       	movw	r24, r28
    e39c:	89 54       	subi	r24, 0x49	; 73
    e39e:	9f 4f       	sbci	r25, 0xFF	; 255
    e3a0:	fc 01       	movw	r30, r24
    e3a2:	60 81       	ld	r22, Z
    e3a4:	71 81       	ldd	r23, Z+1	; 0x01
    e3a6:	82 81       	ldd	r24, Z+2	; 0x02
    e3a8:	93 81       	ldd	r25, Z+3	; 0x03
    e3aa:	26 e6       	ldi	r18, 0x66	; 102
    e3ac:	36 e6       	ldi	r19, 0x66	; 102
    e3ae:	46 e6       	ldi	r20, 0x66	; 102
    e3b0:	55 e4       	ldi	r21, 0x45	; 69
    e3b2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e3b6:	dc 01       	movw	r26, r24
    e3b8:	cb 01       	movw	r24, r22
    e3ba:	f8 01       	movw	r30, r16
    e3bc:	80 83       	st	Z, r24
    e3be:	91 83       	std	Z+1, r25	; 0x01
    e3c0:	a2 83       	std	Z+2, r26	; 0x02
    e3c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e3c4:	ce 01       	movw	r24, r28
    e3c6:	85 54       	subi	r24, 0x45	; 69
    e3c8:	9f 4f       	sbci	r25, 0xFF	; 255
    e3ca:	11 e0       	ldi	r17, 0x01	; 1
    e3cc:	fc 01       	movw	r30, r24
    e3ce:	60 81       	ld	r22, Z
    e3d0:	71 81       	ldd	r23, Z+1	; 0x01
    e3d2:	82 81       	ldd	r24, Z+2	; 0x02
    e3d4:	93 81       	ldd	r25, Z+3	; 0x03
    e3d6:	20 e0       	ldi	r18, 0x00	; 0
    e3d8:	30 e0       	ldi	r19, 0x00	; 0
    e3da:	40 e8       	ldi	r20, 0x80	; 128
    e3dc:	5f e3       	ldi	r21, 0x3F	; 63
    e3de:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    e3e2:	88 23       	and	r24, r24
    e3e4:	0c f0       	brlt	.+2      	; 0xe3e8 <travel_path+0x1774>
    e3e6:	10 e0       	ldi	r17, 0x00	; 0
    e3e8:	11 23       	and	r17, r17
    e3ea:	49 f0       	breq	.+18     	; 0xe3fe <travel_path+0x178a>
		__ticks = 1;
    e3ec:	ce 01       	movw	r24, r28
    e3ee:	81 54       	subi	r24, 0x41	; 65
    e3f0:	9f 4f       	sbci	r25, 0xFF	; 255
    e3f2:	21 e0       	ldi	r18, 0x01	; 1
    e3f4:	30 e0       	ldi	r19, 0x00	; 0
    e3f6:	fc 01       	movw	r30, r24
    e3f8:	31 83       	std	Z+1, r19	; 0x01
    e3fa:	20 83       	st	Z, r18
    e3fc:	74 c0       	rjmp	.+232    	; 0xe4e6 <travel_path+0x1872>
	else if (__tmp > 65535)
    e3fe:	ce 01       	movw	r24, r28
    e400:	85 54       	subi	r24, 0x45	; 69
    e402:	9f 4f       	sbci	r25, 0xFF	; 255
    e404:	11 e0       	ldi	r17, 0x01	; 1
    e406:	fc 01       	movw	r30, r24
    e408:	60 81       	ld	r22, Z
    e40a:	71 81       	ldd	r23, Z+1	; 0x01
    e40c:	82 81       	ldd	r24, Z+2	; 0x02
    e40e:	93 81       	ldd	r25, Z+3	; 0x03
    e410:	20 e0       	ldi	r18, 0x00	; 0
    e412:	3f ef       	ldi	r19, 0xFF	; 255
    e414:	4f e7       	ldi	r20, 0x7F	; 127
    e416:	57 e4       	ldi	r21, 0x47	; 71
    e418:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    e41c:	18 16       	cp	r1, r24
    e41e:	0c f0       	brlt	.+2      	; 0xe422 <travel_path+0x17ae>
    e420:	10 e0       	ldi	r17, 0x00	; 0
    e422:	11 23       	and	r17, r17
    e424:	09 f4       	brne	.+2      	; 0xe428 <travel_path+0x17b4>
    e426:	4d c0       	rjmp	.+154    	; 0xe4c2 <travel_path+0x184e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e428:	ce 01       	movw	r24, r28
    e42a:	89 54       	subi	r24, 0x49	; 73
    e42c:	9f 4f       	sbci	r25, 0xFF	; 255
    e42e:	fc 01       	movw	r30, r24
    e430:	60 81       	ld	r22, Z
    e432:	71 81       	ldd	r23, Z+1	; 0x01
    e434:	82 81       	ldd	r24, Z+2	; 0x02
    e436:	93 81       	ldd	r25, Z+3	; 0x03
    e438:	20 e0       	ldi	r18, 0x00	; 0
    e43a:	30 e0       	ldi	r19, 0x00	; 0
    e43c:	40 e2       	ldi	r20, 0x20	; 32
    e43e:	51 e4       	ldi	r21, 0x41	; 65
    e440:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e444:	dc 01       	movw	r26, r24
    e446:	cb 01       	movw	r24, r22
    e448:	8e 01       	movw	r16, r28
    e44a:	01 54       	subi	r16, 0x41	; 65
    e44c:	1f 4f       	sbci	r17, 0xFF	; 255
    e44e:	bc 01       	movw	r22, r24
    e450:	cd 01       	movw	r24, r26
    e452:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e456:	dc 01       	movw	r26, r24
    e458:	cb 01       	movw	r24, r22
    e45a:	f8 01       	movw	r30, r16
    e45c:	91 83       	std	Z+1, r25	; 0x01
    e45e:	80 83       	st	Z, r24
    e460:	27 c0       	rjmp	.+78     	; 0xe4b0 <travel_path+0x183c>
    e462:	ce 01       	movw	r24, r28
    e464:	8f 53       	subi	r24, 0x3F	; 63
    e466:	9f 4f       	sbci	r25, 0xFF	; 255
    e468:	20 e7       	ldi	r18, 0x70	; 112
    e46a:	31 e0       	ldi	r19, 0x01	; 1
    e46c:	fc 01       	movw	r30, r24
    e46e:	31 83       	std	Z+1, r19	; 0x01
    e470:	20 83       	st	Z, r18
    e472:	ce 01       	movw	r24, r28
    e474:	8f 53       	subi	r24, 0x3F	; 63
    e476:	9f 4f       	sbci	r25, 0xFF	; 255
    e478:	fc 01       	movw	r30, r24
    e47a:	80 81       	ld	r24, Z
    e47c:	91 81       	ldd	r25, Z+1	; 0x01
    e47e:	8c 01       	movw	r16, r24
    e480:	c8 01       	movw	r24, r16
    e482:	01 97       	sbiw	r24, 0x01	; 1
    e484:	f1 f7       	brne	.-4      	; 0xe482 <travel_path+0x180e>
    e486:	8c 01       	movw	r16, r24
    e488:	ce 01       	movw	r24, r28
    e48a:	8f 53       	subi	r24, 0x3F	; 63
    e48c:	9f 4f       	sbci	r25, 0xFF	; 255
    e48e:	fc 01       	movw	r30, r24
    e490:	11 83       	std	Z+1, r17	; 0x01
    e492:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e494:	ce 01       	movw	r24, r28
    e496:	81 54       	subi	r24, 0x41	; 65
    e498:	9f 4f       	sbci	r25, 0xFF	; 255
    e49a:	9e 01       	movw	r18, r28
    e49c:	21 54       	subi	r18, 0x41	; 65
    e49e:	3f 4f       	sbci	r19, 0xFF	; 255
    e4a0:	f9 01       	movw	r30, r18
    e4a2:	20 81       	ld	r18, Z
    e4a4:	31 81       	ldd	r19, Z+1	; 0x01
    e4a6:	21 50       	subi	r18, 0x01	; 1
    e4a8:	30 40       	sbci	r19, 0x00	; 0
    e4aa:	fc 01       	movw	r30, r24
    e4ac:	31 83       	std	Z+1, r19	; 0x01
    e4ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e4b0:	ce 01       	movw	r24, r28
    e4b2:	81 54       	subi	r24, 0x41	; 65
    e4b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4b6:	fc 01       	movw	r30, r24
    e4b8:	80 81       	ld	r24, Z
    e4ba:	91 81       	ldd	r25, Z+1	; 0x01
    e4bc:	00 97       	sbiw	r24, 0x00	; 0
    e4be:	89 f6       	brne	.-94     	; 0xe462 <travel_path+0x17ee>
    e4c0:	2f c0       	rjmp	.+94     	; 0xe520 <travel_path+0x18ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e4c2:	8e 01       	movw	r16, r28
    e4c4:	01 54       	subi	r16, 0x41	; 65
    e4c6:	1f 4f       	sbci	r17, 0xFF	; 255
    e4c8:	ce 01       	movw	r24, r28
    e4ca:	85 54       	subi	r24, 0x45	; 69
    e4cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e4ce:	fc 01       	movw	r30, r24
    e4d0:	60 81       	ld	r22, Z
    e4d2:	71 81       	ldd	r23, Z+1	; 0x01
    e4d4:	82 81       	ldd	r24, Z+2	; 0x02
    e4d6:	93 81       	ldd	r25, Z+3	; 0x03
    e4d8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e4dc:	dc 01       	movw	r26, r24
    e4de:	cb 01       	movw	r24, r22
    e4e0:	f8 01       	movw	r30, r16
    e4e2:	91 83       	std	Z+1, r25	; 0x01
    e4e4:	80 83       	st	Z, r24
    e4e6:	ce 01       	movw	r24, r28
    e4e8:	8d 53       	subi	r24, 0x3D	; 61
    e4ea:	9f 4f       	sbci	r25, 0xFF	; 255
    e4ec:	9e 01       	movw	r18, r28
    e4ee:	21 54       	subi	r18, 0x41	; 65
    e4f0:	3f 4f       	sbci	r19, 0xFF	; 255
    e4f2:	f9 01       	movw	r30, r18
    e4f4:	20 81       	ld	r18, Z
    e4f6:	31 81       	ldd	r19, Z+1	; 0x01
    e4f8:	fc 01       	movw	r30, r24
    e4fa:	31 83       	std	Z+1, r19	; 0x01
    e4fc:	20 83       	st	Z, r18
    e4fe:	ce 01       	movw	r24, r28
    e500:	8d 53       	subi	r24, 0x3D	; 61
    e502:	9f 4f       	sbci	r25, 0xFF	; 255
    e504:	fc 01       	movw	r30, r24
    e506:	80 81       	ld	r24, Z
    e508:	91 81       	ldd	r25, Z+1	; 0x01
    e50a:	8c 01       	movw	r16, r24
    e50c:	c8 01       	movw	r24, r16
    e50e:	01 97       	sbiw	r24, 0x01	; 1
    e510:	f1 f7       	brne	.-4      	; 0xe50e <travel_path+0x189a>
    e512:	8c 01       	movw	r16, r24
    e514:	ce 01       	movw	r24, r28
    e516:	8d 53       	subi	r24, 0x3D	; 61
    e518:	9f 4f       	sbci	r25, 0xFF	; 255
    e51a:	fc 01       	movw	r30, r24
    e51c:	11 83       	std	Z+1, r17	; 0x01
    e51e:	00 83       	st	Z, r16
							_delay_ms(20);
							spl_left2();
    e520:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    e524:	9e 01       	movw	r18, r28
    e526:	2b 53       	subi	r18, 0x3B	; 59
    e528:	3f 4f       	sbci	r19, 0xFF	; 255
    e52a:	80 e0       	ldi	r24, 0x00	; 0
    e52c:	90 e0       	ldi	r25, 0x00	; 0
    e52e:	a0 ea       	ldi	r26, 0xA0	; 160
    e530:	b1 e4       	ldi	r27, 0x41	; 65
    e532:	f9 01       	movw	r30, r18
    e534:	80 83       	st	Z, r24
    e536:	91 83       	std	Z+1, r25	; 0x01
    e538:	a2 83       	std	Z+2, r26	; 0x02
    e53a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e53c:	8e 01       	movw	r16, r28
    e53e:	07 53       	subi	r16, 0x37	; 55
    e540:	1f 4f       	sbci	r17, 0xFF	; 255
    e542:	ce 01       	movw	r24, r28
    e544:	8b 53       	subi	r24, 0x3B	; 59
    e546:	9f 4f       	sbci	r25, 0xFF	; 255
    e548:	fc 01       	movw	r30, r24
    e54a:	60 81       	ld	r22, Z
    e54c:	71 81       	ldd	r23, Z+1	; 0x01
    e54e:	82 81       	ldd	r24, Z+2	; 0x02
    e550:	93 81       	ldd	r25, Z+3	; 0x03
    e552:	26 e6       	ldi	r18, 0x66	; 102
    e554:	36 e6       	ldi	r19, 0x66	; 102
    e556:	46 e6       	ldi	r20, 0x66	; 102
    e558:	55 e4       	ldi	r21, 0x45	; 69
    e55a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e55e:	dc 01       	movw	r26, r24
    e560:	cb 01       	movw	r24, r22
    e562:	f8 01       	movw	r30, r16
    e564:	80 83       	st	Z, r24
    e566:	91 83       	std	Z+1, r25	; 0x01
    e568:	a2 83       	std	Z+2, r26	; 0x02
    e56a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e56c:	ce 01       	movw	r24, r28
    e56e:	87 53       	subi	r24, 0x37	; 55
    e570:	9f 4f       	sbci	r25, 0xFF	; 255
    e572:	11 e0       	ldi	r17, 0x01	; 1
    e574:	fc 01       	movw	r30, r24
    e576:	60 81       	ld	r22, Z
    e578:	71 81       	ldd	r23, Z+1	; 0x01
    e57a:	82 81       	ldd	r24, Z+2	; 0x02
    e57c:	93 81       	ldd	r25, Z+3	; 0x03
    e57e:	20 e0       	ldi	r18, 0x00	; 0
    e580:	30 e0       	ldi	r19, 0x00	; 0
    e582:	40 e8       	ldi	r20, 0x80	; 128
    e584:	5f e3       	ldi	r21, 0x3F	; 63
    e586:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    e58a:	88 23       	and	r24, r24
    e58c:	0c f0       	brlt	.+2      	; 0xe590 <travel_path+0x191c>
    e58e:	10 e0       	ldi	r17, 0x00	; 0
    e590:	11 23       	and	r17, r17
    e592:	49 f0       	breq	.+18     	; 0xe5a6 <travel_path+0x1932>
		__ticks = 1;
    e594:	ce 01       	movw	r24, r28
    e596:	83 53       	subi	r24, 0x33	; 51
    e598:	9f 4f       	sbci	r25, 0xFF	; 255
    e59a:	21 e0       	ldi	r18, 0x01	; 1
    e59c:	30 e0       	ldi	r19, 0x00	; 0
    e59e:	fc 01       	movw	r30, r24
    e5a0:	31 83       	std	Z+1, r19	; 0x01
    e5a2:	20 83       	st	Z, r18
    e5a4:	74 c0       	rjmp	.+232    	; 0xe68e <travel_path+0x1a1a>
	else if (__tmp > 65535)
    e5a6:	ce 01       	movw	r24, r28
    e5a8:	87 53       	subi	r24, 0x37	; 55
    e5aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e5ac:	11 e0       	ldi	r17, 0x01	; 1
    e5ae:	fc 01       	movw	r30, r24
    e5b0:	60 81       	ld	r22, Z
    e5b2:	71 81       	ldd	r23, Z+1	; 0x01
    e5b4:	82 81       	ldd	r24, Z+2	; 0x02
    e5b6:	93 81       	ldd	r25, Z+3	; 0x03
    e5b8:	20 e0       	ldi	r18, 0x00	; 0
    e5ba:	3f ef       	ldi	r19, 0xFF	; 255
    e5bc:	4f e7       	ldi	r20, 0x7F	; 127
    e5be:	57 e4       	ldi	r21, 0x47	; 71
    e5c0:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    e5c4:	18 16       	cp	r1, r24
    e5c6:	0c f0       	brlt	.+2      	; 0xe5ca <travel_path+0x1956>
    e5c8:	10 e0       	ldi	r17, 0x00	; 0
    e5ca:	11 23       	and	r17, r17
    e5cc:	09 f4       	brne	.+2      	; 0xe5d0 <travel_path+0x195c>
    e5ce:	4d c0       	rjmp	.+154    	; 0xe66a <travel_path+0x19f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e5d0:	ce 01       	movw	r24, r28
    e5d2:	8b 53       	subi	r24, 0x3B	; 59
    e5d4:	9f 4f       	sbci	r25, 0xFF	; 255
    e5d6:	fc 01       	movw	r30, r24
    e5d8:	60 81       	ld	r22, Z
    e5da:	71 81       	ldd	r23, Z+1	; 0x01
    e5dc:	82 81       	ldd	r24, Z+2	; 0x02
    e5de:	93 81       	ldd	r25, Z+3	; 0x03
    e5e0:	20 e0       	ldi	r18, 0x00	; 0
    e5e2:	30 e0       	ldi	r19, 0x00	; 0
    e5e4:	40 e2       	ldi	r20, 0x20	; 32
    e5e6:	51 e4       	ldi	r21, 0x41	; 65
    e5e8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e5ec:	dc 01       	movw	r26, r24
    e5ee:	cb 01       	movw	r24, r22
    e5f0:	8e 01       	movw	r16, r28
    e5f2:	03 53       	subi	r16, 0x33	; 51
    e5f4:	1f 4f       	sbci	r17, 0xFF	; 255
    e5f6:	bc 01       	movw	r22, r24
    e5f8:	cd 01       	movw	r24, r26
    e5fa:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e5fe:	dc 01       	movw	r26, r24
    e600:	cb 01       	movw	r24, r22
    e602:	f8 01       	movw	r30, r16
    e604:	91 83       	std	Z+1, r25	; 0x01
    e606:	80 83       	st	Z, r24
    e608:	27 c0       	rjmp	.+78     	; 0xe658 <travel_path+0x19e4>
    e60a:	ce 01       	movw	r24, r28
    e60c:	81 53       	subi	r24, 0x31	; 49
    e60e:	9f 4f       	sbci	r25, 0xFF	; 255
    e610:	20 e7       	ldi	r18, 0x70	; 112
    e612:	31 e0       	ldi	r19, 0x01	; 1
    e614:	fc 01       	movw	r30, r24
    e616:	31 83       	std	Z+1, r19	; 0x01
    e618:	20 83       	st	Z, r18
    e61a:	ce 01       	movw	r24, r28
    e61c:	81 53       	subi	r24, 0x31	; 49
    e61e:	9f 4f       	sbci	r25, 0xFF	; 255
    e620:	fc 01       	movw	r30, r24
    e622:	80 81       	ld	r24, Z
    e624:	91 81       	ldd	r25, Z+1	; 0x01
    e626:	8c 01       	movw	r16, r24
    e628:	c8 01       	movw	r24, r16
    e62a:	01 97       	sbiw	r24, 0x01	; 1
    e62c:	f1 f7       	brne	.-4      	; 0xe62a <travel_path+0x19b6>
    e62e:	8c 01       	movw	r16, r24
    e630:	ce 01       	movw	r24, r28
    e632:	81 53       	subi	r24, 0x31	; 49
    e634:	9f 4f       	sbci	r25, 0xFF	; 255
    e636:	fc 01       	movw	r30, r24
    e638:	11 83       	std	Z+1, r17	; 0x01
    e63a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e63c:	ce 01       	movw	r24, r28
    e63e:	83 53       	subi	r24, 0x33	; 51
    e640:	9f 4f       	sbci	r25, 0xFF	; 255
    e642:	9e 01       	movw	r18, r28
    e644:	23 53       	subi	r18, 0x33	; 51
    e646:	3f 4f       	sbci	r19, 0xFF	; 255
    e648:	f9 01       	movw	r30, r18
    e64a:	20 81       	ld	r18, Z
    e64c:	31 81       	ldd	r19, Z+1	; 0x01
    e64e:	21 50       	subi	r18, 0x01	; 1
    e650:	30 40       	sbci	r19, 0x00	; 0
    e652:	fc 01       	movw	r30, r24
    e654:	31 83       	std	Z+1, r19	; 0x01
    e656:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e658:	ce 01       	movw	r24, r28
    e65a:	83 53       	subi	r24, 0x33	; 51
    e65c:	9f 4f       	sbci	r25, 0xFF	; 255
    e65e:	fc 01       	movw	r30, r24
    e660:	80 81       	ld	r24, Z
    e662:	91 81       	ldd	r25, Z+1	; 0x01
    e664:	00 97       	sbiw	r24, 0x00	; 0
    e666:	89 f6       	brne	.-94     	; 0xe60a <travel_path+0x1996>
    e668:	8f c3       	rjmp	.+1822   	; 0xed88 <travel_path+0x2114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e66a:	8e 01       	movw	r16, r28
    e66c:	03 53       	subi	r16, 0x33	; 51
    e66e:	1f 4f       	sbci	r17, 0xFF	; 255
    e670:	ce 01       	movw	r24, r28
    e672:	87 53       	subi	r24, 0x37	; 55
    e674:	9f 4f       	sbci	r25, 0xFF	; 255
    e676:	fc 01       	movw	r30, r24
    e678:	60 81       	ld	r22, Z
    e67a:	71 81       	ldd	r23, Z+1	; 0x01
    e67c:	82 81       	ldd	r24, Z+2	; 0x02
    e67e:	93 81       	ldd	r25, Z+3	; 0x03
    e680:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e684:	dc 01       	movw	r26, r24
    e686:	cb 01       	movw	r24, r22
    e688:	f8 01       	movw	r30, r16
    e68a:	91 83       	std	Z+1, r25	; 0x01
    e68c:	80 83       	st	Z, r24
    e68e:	ce 01       	movw	r24, r28
    e690:	8f 52       	subi	r24, 0x2F	; 47
    e692:	9f 4f       	sbci	r25, 0xFF	; 255
    e694:	9e 01       	movw	r18, r28
    e696:	23 53       	subi	r18, 0x33	; 51
    e698:	3f 4f       	sbci	r19, 0xFF	; 255
    e69a:	f9 01       	movw	r30, r18
    e69c:	20 81       	ld	r18, Z
    e69e:	31 81       	ldd	r19, Z+1	; 0x01
    e6a0:	fc 01       	movw	r30, r24
    e6a2:	31 83       	std	Z+1, r19	; 0x01
    e6a4:	20 83       	st	Z, r18
    e6a6:	ce 01       	movw	r24, r28
    e6a8:	8f 52       	subi	r24, 0x2F	; 47
    e6aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e6ac:	fc 01       	movw	r30, r24
    e6ae:	80 81       	ld	r24, Z
    e6b0:	91 81       	ldd	r25, Z+1	; 0x01
    e6b2:	8c 01       	movw	r16, r24
    e6b4:	c8 01       	movw	r24, r16
    e6b6:	01 97       	sbiw	r24, 0x01	; 1
    e6b8:	f1 f7       	brne	.-4      	; 0xe6b6 <travel_path+0x1a42>
    e6ba:	8c 01       	movw	r16, r24
    e6bc:	ce 01       	movw	r24, r28
    e6be:	8f 52       	subi	r24, 0x2F	; 47
    e6c0:	9f 4f       	sbci	r25, 0xFF	; 255
    e6c2:	fc 01       	movw	r30, r24
    e6c4:	11 83       	std	Z+1, r17	; 0x01
    e6c6:	00 83       	st	Z, r16
    e6c8:	5f c3       	rjmp	.+1726   	; 0xed88 <travel_path+0x2114>
							_delay_ms(20);
						}
						else if(master_path[node+1]=='3')
    e6ca:	80 91 63 03 	lds	r24, 0x0363
    e6ce:	90 91 64 03 	lds	r25, 0x0364
    e6d2:	01 96       	adiw	r24, 0x01	; 1
    e6d4:	89 59       	subi	r24, 0x99	; 153
    e6d6:	9c 4f       	sbci	r25, 0xFC	; 252
    e6d8:	fc 01       	movw	r30, r24
    e6da:	80 81       	ld	r24, Z
    e6dc:	83 33       	cpi	r24, 0x33	; 51
    e6de:	09 f0       	breq	.+2      	; 0xe6e2 <travel_path+0x1a6e>
    e6e0:	7f c2       	rjmp	.+1278   	; 0xebe0 <travel_path+0x1f6c>
						{
						stop();
    e6e2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    e6e6:	9e 01       	movw	r18, r28
    e6e8:	2d 52       	subi	r18, 0x2D	; 45
    e6ea:	3f 4f       	sbci	r19, 0xFF	; 255
    e6ec:	80 e0       	ldi	r24, 0x00	; 0
    e6ee:	90 e0       	ldi	r25, 0x00	; 0
    e6f0:	a0 ea       	ldi	r26, 0xA0	; 160
    e6f2:	b1 e4       	ldi	r27, 0x41	; 65
    e6f4:	f9 01       	movw	r30, r18
    e6f6:	80 83       	st	Z, r24
    e6f8:	91 83       	std	Z+1, r25	; 0x01
    e6fa:	a2 83       	std	Z+2, r26	; 0x02
    e6fc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e6fe:	8e 01       	movw	r16, r28
    e700:	09 52       	subi	r16, 0x29	; 41
    e702:	1f 4f       	sbci	r17, 0xFF	; 255
    e704:	ce 01       	movw	r24, r28
    e706:	8d 52       	subi	r24, 0x2D	; 45
    e708:	9f 4f       	sbci	r25, 0xFF	; 255
    e70a:	fc 01       	movw	r30, r24
    e70c:	60 81       	ld	r22, Z
    e70e:	71 81       	ldd	r23, Z+1	; 0x01
    e710:	82 81       	ldd	r24, Z+2	; 0x02
    e712:	93 81       	ldd	r25, Z+3	; 0x03
    e714:	26 e6       	ldi	r18, 0x66	; 102
    e716:	36 e6       	ldi	r19, 0x66	; 102
    e718:	46 e6       	ldi	r20, 0x66	; 102
    e71a:	55 e4       	ldi	r21, 0x45	; 69
    e71c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e720:	dc 01       	movw	r26, r24
    e722:	cb 01       	movw	r24, r22
    e724:	f8 01       	movw	r30, r16
    e726:	80 83       	st	Z, r24
    e728:	91 83       	std	Z+1, r25	; 0x01
    e72a:	a2 83       	std	Z+2, r26	; 0x02
    e72c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e72e:	ce 01       	movw	r24, r28
    e730:	89 52       	subi	r24, 0x29	; 41
    e732:	9f 4f       	sbci	r25, 0xFF	; 255
    e734:	11 e0       	ldi	r17, 0x01	; 1
    e736:	fc 01       	movw	r30, r24
    e738:	60 81       	ld	r22, Z
    e73a:	71 81       	ldd	r23, Z+1	; 0x01
    e73c:	82 81       	ldd	r24, Z+2	; 0x02
    e73e:	93 81       	ldd	r25, Z+3	; 0x03
    e740:	20 e0       	ldi	r18, 0x00	; 0
    e742:	30 e0       	ldi	r19, 0x00	; 0
    e744:	40 e8       	ldi	r20, 0x80	; 128
    e746:	5f e3       	ldi	r21, 0x3F	; 63
    e748:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    e74c:	88 23       	and	r24, r24
    e74e:	0c f0       	brlt	.+2      	; 0xe752 <travel_path+0x1ade>
    e750:	10 e0       	ldi	r17, 0x00	; 0
    e752:	11 23       	and	r17, r17
    e754:	49 f0       	breq	.+18     	; 0xe768 <travel_path+0x1af4>
		__ticks = 1;
    e756:	ce 01       	movw	r24, r28
    e758:	85 52       	subi	r24, 0x25	; 37
    e75a:	9f 4f       	sbci	r25, 0xFF	; 255
    e75c:	21 e0       	ldi	r18, 0x01	; 1
    e75e:	30 e0       	ldi	r19, 0x00	; 0
    e760:	fc 01       	movw	r30, r24
    e762:	31 83       	std	Z+1, r19	; 0x01
    e764:	20 83       	st	Z, r18
    e766:	74 c0       	rjmp	.+232    	; 0xe850 <travel_path+0x1bdc>
	else if (__tmp > 65535)
    e768:	ce 01       	movw	r24, r28
    e76a:	89 52       	subi	r24, 0x29	; 41
    e76c:	9f 4f       	sbci	r25, 0xFF	; 255
    e76e:	11 e0       	ldi	r17, 0x01	; 1
    e770:	fc 01       	movw	r30, r24
    e772:	60 81       	ld	r22, Z
    e774:	71 81       	ldd	r23, Z+1	; 0x01
    e776:	82 81       	ldd	r24, Z+2	; 0x02
    e778:	93 81       	ldd	r25, Z+3	; 0x03
    e77a:	20 e0       	ldi	r18, 0x00	; 0
    e77c:	3f ef       	ldi	r19, 0xFF	; 255
    e77e:	4f e7       	ldi	r20, 0x7F	; 127
    e780:	57 e4       	ldi	r21, 0x47	; 71
    e782:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    e786:	18 16       	cp	r1, r24
    e788:	0c f0       	brlt	.+2      	; 0xe78c <travel_path+0x1b18>
    e78a:	10 e0       	ldi	r17, 0x00	; 0
    e78c:	11 23       	and	r17, r17
    e78e:	09 f4       	brne	.+2      	; 0xe792 <travel_path+0x1b1e>
    e790:	4d c0       	rjmp	.+154    	; 0xe82c <travel_path+0x1bb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e792:	ce 01       	movw	r24, r28
    e794:	8d 52       	subi	r24, 0x2D	; 45
    e796:	9f 4f       	sbci	r25, 0xFF	; 255
    e798:	fc 01       	movw	r30, r24
    e79a:	60 81       	ld	r22, Z
    e79c:	71 81       	ldd	r23, Z+1	; 0x01
    e79e:	82 81       	ldd	r24, Z+2	; 0x02
    e7a0:	93 81       	ldd	r25, Z+3	; 0x03
    e7a2:	20 e0       	ldi	r18, 0x00	; 0
    e7a4:	30 e0       	ldi	r19, 0x00	; 0
    e7a6:	40 e2       	ldi	r20, 0x20	; 32
    e7a8:	51 e4       	ldi	r21, 0x41	; 65
    e7aa:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e7ae:	dc 01       	movw	r26, r24
    e7b0:	cb 01       	movw	r24, r22
    e7b2:	8e 01       	movw	r16, r28
    e7b4:	05 52       	subi	r16, 0x25	; 37
    e7b6:	1f 4f       	sbci	r17, 0xFF	; 255
    e7b8:	bc 01       	movw	r22, r24
    e7ba:	cd 01       	movw	r24, r26
    e7bc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e7c0:	dc 01       	movw	r26, r24
    e7c2:	cb 01       	movw	r24, r22
    e7c4:	f8 01       	movw	r30, r16
    e7c6:	91 83       	std	Z+1, r25	; 0x01
    e7c8:	80 83       	st	Z, r24
    e7ca:	27 c0       	rjmp	.+78     	; 0xe81a <travel_path+0x1ba6>
    e7cc:	ce 01       	movw	r24, r28
    e7ce:	83 52       	subi	r24, 0x23	; 35
    e7d0:	9f 4f       	sbci	r25, 0xFF	; 255
    e7d2:	20 e7       	ldi	r18, 0x70	; 112
    e7d4:	31 e0       	ldi	r19, 0x01	; 1
    e7d6:	fc 01       	movw	r30, r24
    e7d8:	31 83       	std	Z+1, r19	; 0x01
    e7da:	20 83       	st	Z, r18
    e7dc:	ce 01       	movw	r24, r28
    e7de:	83 52       	subi	r24, 0x23	; 35
    e7e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e7e2:	fc 01       	movw	r30, r24
    e7e4:	80 81       	ld	r24, Z
    e7e6:	91 81       	ldd	r25, Z+1	; 0x01
    e7e8:	8c 01       	movw	r16, r24
    e7ea:	c8 01       	movw	r24, r16
    e7ec:	01 97       	sbiw	r24, 0x01	; 1
    e7ee:	f1 f7       	brne	.-4      	; 0xe7ec <travel_path+0x1b78>
    e7f0:	8c 01       	movw	r16, r24
    e7f2:	ce 01       	movw	r24, r28
    e7f4:	83 52       	subi	r24, 0x23	; 35
    e7f6:	9f 4f       	sbci	r25, 0xFF	; 255
    e7f8:	fc 01       	movw	r30, r24
    e7fa:	11 83       	std	Z+1, r17	; 0x01
    e7fc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e7fe:	ce 01       	movw	r24, r28
    e800:	85 52       	subi	r24, 0x25	; 37
    e802:	9f 4f       	sbci	r25, 0xFF	; 255
    e804:	9e 01       	movw	r18, r28
    e806:	25 52       	subi	r18, 0x25	; 37
    e808:	3f 4f       	sbci	r19, 0xFF	; 255
    e80a:	f9 01       	movw	r30, r18
    e80c:	20 81       	ld	r18, Z
    e80e:	31 81       	ldd	r19, Z+1	; 0x01
    e810:	21 50       	subi	r18, 0x01	; 1
    e812:	30 40       	sbci	r19, 0x00	; 0
    e814:	fc 01       	movw	r30, r24
    e816:	31 83       	std	Z+1, r19	; 0x01
    e818:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e81a:	ce 01       	movw	r24, r28
    e81c:	85 52       	subi	r24, 0x25	; 37
    e81e:	9f 4f       	sbci	r25, 0xFF	; 255
    e820:	fc 01       	movw	r30, r24
    e822:	80 81       	ld	r24, Z
    e824:	91 81       	ldd	r25, Z+1	; 0x01
    e826:	00 97       	sbiw	r24, 0x00	; 0
    e828:	89 f6       	brne	.-94     	; 0xe7cc <travel_path+0x1b58>
    e82a:	2f c0       	rjmp	.+94     	; 0xe88a <travel_path+0x1c16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e82c:	8e 01       	movw	r16, r28
    e82e:	05 52       	subi	r16, 0x25	; 37
    e830:	1f 4f       	sbci	r17, 0xFF	; 255
    e832:	ce 01       	movw	r24, r28
    e834:	89 52       	subi	r24, 0x29	; 41
    e836:	9f 4f       	sbci	r25, 0xFF	; 255
    e838:	fc 01       	movw	r30, r24
    e83a:	60 81       	ld	r22, Z
    e83c:	71 81       	ldd	r23, Z+1	; 0x01
    e83e:	82 81       	ldd	r24, Z+2	; 0x02
    e840:	93 81       	ldd	r25, Z+3	; 0x03
    e842:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e846:	dc 01       	movw	r26, r24
    e848:	cb 01       	movw	r24, r22
    e84a:	f8 01       	movw	r30, r16
    e84c:	91 83       	std	Z+1, r25	; 0x01
    e84e:	80 83       	st	Z, r24
    e850:	ce 01       	movw	r24, r28
    e852:	81 52       	subi	r24, 0x21	; 33
    e854:	9f 4f       	sbci	r25, 0xFF	; 255
    e856:	9e 01       	movw	r18, r28
    e858:	25 52       	subi	r18, 0x25	; 37
    e85a:	3f 4f       	sbci	r19, 0xFF	; 255
    e85c:	f9 01       	movw	r30, r18
    e85e:	20 81       	ld	r18, Z
    e860:	31 81       	ldd	r19, Z+1	; 0x01
    e862:	fc 01       	movw	r30, r24
    e864:	31 83       	std	Z+1, r19	; 0x01
    e866:	20 83       	st	Z, r18
    e868:	ce 01       	movw	r24, r28
    e86a:	81 52       	subi	r24, 0x21	; 33
    e86c:	9f 4f       	sbci	r25, 0xFF	; 255
    e86e:	fc 01       	movw	r30, r24
    e870:	80 81       	ld	r24, Z
    e872:	91 81       	ldd	r25, Z+1	; 0x01
    e874:	8c 01       	movw	r16, r24
    e876:	c8 01       	movw	r24, r16
    e878:	01 97       	sbiw	r24, 0x01	; 1
    e87a:	f1 f7       	brne	.-4      	; 0xe878 <travel_path+0x1c04>
    e87c:	8c 01       	movw	r16, r24
    e87e:	ce 01       	movw	r24, r28
    e880:	81 52       	subi	r24, 0x21	; 33
    e882:	9f 4f       	sbci	r25, 0xFF	; 255
    e884:	fc 01       	movw	r30, r24
    e886:	11 83       	std	Z+1, r17	; 0x01
    e888:	00 83       	st	Z, r16
						_delay_ms(20);
						forward_mm(160);
    e88a:	80 ea       	ldi	r24, 0xA0	; 160
    e88c:	90 e0       	ldi	r25, 0x00	; 0
    e88e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    e892:	9e 01       	movw	r18, r28
    e894:	2f 51       	subi	r18, 0x1F	; 31
    e896:	3f 4f       	sbci	r19, 0xFF	; 255
    e898:	80 e0       	ldi	r24, 0x00	; 0
    e89a:	90 e0       	ldi	r25, 0x00	; 0
    e89c:	a0 ea       	ldi	r26, 0xA0	; 160
    e89e:	b1 e4       	ldi	r27, 0x41	; 65
    e8a0:	f9 01       	movw	r30, r18
    e8a2:	80 83       	st	Z, r24
    e8a4:	91 83       	std	Z+1, r25	; 0x01
    e8a6:	a2 83       	std	Z+2, r26	; 0x02
    e8a8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e8aa:	8e 01       	movw	r16, r28
    e8ac:	0b 51       	subi	r16, 0x1B	; 27
    e8ae:	1f 4f       	sbci	r17, 0xFF	; 255
    e8b0:	ce 01       	movw	r24, r28
    e8b2:	8f 51       	subi	r24, 0x1F	; 31
    e8b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e8b6:	fc 01       	movw	r30, r24
    e8b8:	60 81       	ld	r22, Z
    e8ba:	71 81       	ldd	r23, Z+1	; 0x01
    e8bc:	82 81       	ldd	r24, Z+2	; 0x02
    e8be:	93 81       	ldd	r25, Z+3	; 0x03
    e8c0:	26 e6       	ldi	r18, 0x66	; 102
    e8c2:	36 e6       	ldi	r19, 0x66	; 102
    e8c4:	46 e6       	ldi	r20, 0x66	; 102
    e8c6:	55 e4       	ldi	r21, 0x45	; 69
    e8c8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e8cc:	dc 01       	movw	r26, r24
    e8ce:	cb 01       	movw	r24, r22
    e8d0:	f8 01       	movw	r30, r16
    e8d2:	80 83       	st	Z, r24
    e8d4:	91 83       	std	Z+1, r25	; 0x01
    e8d6:	a2 83       	std	Z+2, r26	; 0x02
    e8d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e8da:	ce 01       	movw	r24, r28
    e8dc:	8b 51       	subi	r24, 0x1B	; 27
    e8de:	9f 4f       	sbci	r25, 0xFF	; 255
    e8e0:	11 e0       	ldi	r17, 0x01	; 1
    e8e2:	fc 01       	movw	r30, r24
    e8e4:	60 81       	ld	r22, Z
    e8e6:	71 81       	ldd	r23, Z+1	; 0x01
    e8e8:	82 81       	ldd	r24, Z+2	; 0x02
    e8ea:	93 81       	ldd	r25, Z+3	; 0x03
    e8ec:	20 e0       	ldi	r18, 0x00	; 0
    e8ee:	30 e0       	ldi	r19, 0x00	; 0
    e8f0:	40 e8       	ldi	r20, 0x80	; 128
    e8f2:	5f e3       	ldi	r21, 0x3F	; 63
    e8f4:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    e8f8:	88 23       	and	r24, r24
    e8fa:	0c f0       	brlt	.+2      	; 0xe8fe <travel_path+0x1c8a>
    e8fc:	10 e0       	ldi	r17, 0x00	; 0
    e8fe:	11 23       	and	r17, r17
    e900:	49 f0       	breq	.+18     	; 0xe914 <travel_path+0x1ca0>
		__ticks = 1;
    e902:	ce 01       	movw	r24, r28
    e904:	87 51       	subi	r24, 0x17	; 23
    e906:	9f 4f       	sbci	r25, 0xFF	; 255
    e908:	21 e0       	ldi	r18, 0x01	; 1
    e90a:	30 e0       	ldi	r19, 0x00	; 0
    e90c:	fc 01       	movw	r30, r24
    e90e:	31 83       	std	Z+1, r19	; 0x01
    e910:	20 83       	st	Z, r18
    e912:	74 c0       	rjmp	.+232    	; 0xe9fc <travel_path+0x1d88>
	else if (__tmp > 65535)
    e914:	ce 01       	movw	r24, r28
    e916:	8b 51       	subi	r24, 0x1B	; 27
    e918:	9f 4f       	sbci	r25, 0xFF	; 255
    e91a:	11 e0       	ldi	r17, 0x01	; 1
    e91c:	fc 01       	movw	r30, r24
    e91e:	60 81       	ld	r22, Z
    e920:	71 81       	ldd	r23, Z+1	; 0x01
    e922:	82 81       	ldd	r24, Z+2	; 0x02
    e924:	93 81       	ldd	r25, Z+3	; 0x03
    e926:	20 e0       	ldi	r18, 0x00	; 0
    e928:	3f ef       	ldi	r19, 0xFF	; 255
    e92a:	4f e7       	ldi	r20, 0x7F	; 127
    e92c:	57 e4       	ldi	r21, 0x47	; 71
    e92e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    e932:	18 16       	cp	r1, r24
    e934:	0c f0       	brlt	.+2      	; 0xe938 <travel_path+0x1cc4>
    e936:	10 e0       	ldi	r17, 0x00	; 0
    e938:	11 23       	and	r17, r17
    e93a:	09 f4       	brne	.+2      	; 0xe93e <travel_path+0x1cca>
    e93c:	4d c0       	rjmp	.+154    	; 0xe9d8 <travel_path+0x1d64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e93e:	ce 01       	movw	r24, r28
    e940:	8f 51       	subi	r24, 0x1F	; 31
    e942:	9f 4f       	sbci	r25, 0xFF	; 255
    e944:	fc 01       	movw	r30, r24
    e946:	60 81       	ld	r22, Z
    e948:	71 81       	ldd	r23, Z+1	; 0x01
    e94a:	82 81       	ldd	r24, Z+2	; 0x02
    e94c:	93 81       	ldd	r25, Z+3	; 0x03
    e94e:	20 e0       	ldi	r18, 0x00	; 0
    e950:	30 e0       	ldi	r19, 0x00	; 0
    e952:	40 e2       	ldi	r20, 0x20	; 32
    e954:	51 e4       	ldi	r21, 0x41	; 65
    e956:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    e95a:	dc 01       	movw	r26, r24
    e95c:	cb 01       	movw	r24, r22
    e95e:	8e 01       	movw	r16, r28
    e960:	07 51       	subi	r16, 0x17	; 23
    e962:	1f 4f       	sbci	r17, 0xFF	; 255
    e964:	bc 01       	movw	r22, r24
    e966:	cd 01       	movw	r24, r26
    e968:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e96c:	dc 01       	movw	r26, r24
    e96e:	cb 01       	movw	r24, r22
    e970:	f8 01       	movw	r30, r16
    e972:	91 83       	std	Z+1, r25	; 0x01
    e974:	80 83       	st	Z, r24
    e976:	27 c0       	rjmp	.+78     	; 0xe9c6 <travel_path+0x1d52>
    e978:	ce 01       	movw	r24, r28
    e97a:	85 51       	subi	r24, 0x15	; 21
    e97c:	9f 4f       	sbci	r25, 0xFF	; 255
    e97e:	20 e7       	ldi	r18, 0x70	; 112
    e980:	31 e0       	ldi	r19, 0x01	; 1
    e982:	fc 01       	movw	r30, r24
    e984:	31 83       	std	Z+1, r19	; 0x01
    e986:	20 83       	st	Z, r18
    e988:	ce 01       	movw	r24, r28
    e98a:	85 51       	subi	r24, 0x15	; 21
    e98c:	9f 4f       	sbci	r25, 0xFF	; 255
    e98e:	fc 01       	movw	r30, r24
    e990:	80 81       	ld	r24, Z
    e992:	91 81       	ldd	r25, Z+1	; 0x01
    e994:	8c 01       	movw	r16, r24
    e996:	c8 01       	movw	r24, r16
    e998:	01 97       	sbiw	r24, 0x01	; 1
    e99a:	f1 f7       	brne	.-4      	; 0xe998 <travel_path+0x1d24>
    e99c:	8c 01       	movw	r16, r24
    e99e:	ce 01       	movw	r24, r28
    e9a0:	85 51       	subi	r24, 0x15	; 21
    e9a2:	9f 4f       	sbci	r25, 0xFF	; 255
    e9a4:	fc 01       	movw	r30, r24
    e9a6:	11 83       	std	Z+1, r17	; 0x01
    e9a8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e9aa:	ce 01       	movw	r24, r28
    e9ac:	87 51       	subi	r24, 0x17	; 23
    e9ae:	9f 4f       	sbci	r25, 0xFF	; 255
    e9b0:	9e 01       	movw	r18, r28
    e9b2:	27 51       	subi	r18, 0x17	; 23
    e9b4:	3f 4f       	sbci	r19, 0xFF	; 255
    e9b6:	f9 01       	movw	r30, r18
    e9b8:	20 81       	ld	r18, Z
    e9ba:	31 81       	ldd	r19, Z+1	; 0x01
    e9bc:	21 50       	subi	r18, 0x01	; 1
    e9be:	30 40       	sbci	r19, 0x00	; 0
    e9c0:	fc 01       	movw	r30, r24
    e9c2:	31 83       	std	Z+1, r19	; 0x01
    e9c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e9c6:	ce 01       	movw	r24, r28
    e9c8:	87 51       	subi	r24, 0x17	; 23
    e9ca:	9f 4f       	sbci	r25, 0xFF	; 255
    e9cc:	fc 01       	movw	r30, r24
    e9ce:	80 81       	ld	r24, Z
    e9d0:	91 81       	ldd	r25, Z+1	; 0x01
    e9d2:	00 97       	sbiw	r24, 0x00	; 0
    e9d4:	89 f6       	brne	.-94     	; 0xe978 <travel_path+0x1d04>
    e9d6:	2f c0       	rjmp	.+94     	; 0xea36 <travel_path+0x1dc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e9d8:	8e 01       	movw	r16, r28
    e9da:	07 51       	subi	r16, 0x17	; 23
    e9dc:	1f 4f       	sbci	r17, 0xFF	; 255
    e9de:	ce 01       	movw	r24, r28
    e9e0:	8b 51       	subi	r24, 0x1B	; 27
    e9e2:	9f 4f       	sbci	r25, 0xFF	; 255
    e9e4:	fc 01       	movw	r30, r24
    e9e6:	60 81       	ld	r22, Z
    e9e8:	71 81       	ldd	r23, Z+1	; 0x01
    e9ea:	82 81       	ldd	r24, Z+2	; 0x02
    e9ec:	93 81       	ldd	r25, Z+3	; 0x03
    e9ee:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    e9f2:	dc 01       	movw	r26, r24
    e9f4:	cb 01       	movw	r24, r22
    e9f6:	f8 01       	movw	r30, r16
    e9f8:	91 83       	std	Z+1, r25	; 0x01
    e9fa:	80 83       	st	Z, r24
    e9fc:	ce 01       	movw	r24, r28
    e9fe:	83 51       	subi	r24, 0x13	; 19
    ea00:	9f 4f       	sbci	r25, 0xFF	; 255
    ea02:	9e 01       	movw	r18, r28
    ea04:	27 51       	subi	r18, 0x17	; 23
    ea06:	3f 4f       	sbci	r19, 0xFF	; 255
    ea08:	f9 01       	movw	r30, r18
    ea0a:	20 81       	ld	r18, Z
    ea0c:	31 81       	ldd	r19, Z+1	; 0x01
    ea0e:	fc 01       	movw	r30, r24
    ea10:	31 83       	std	Z+1, r19	; 0x01
    ea12:	20 83       	st	Z, r18
    ea14:	ce 01       	movw	r24, r28
    ea16:	83 51       	subi	r24, 0x13	; 19
    ea18:	9f 4f       	sbci	r25, 0xFF	; 255
    ea1a:	fc 01       	movw	r30, r24
    ea1c:	80 81       	ld	r24, Z
    ea1e:	91 81       	ldd	r25, Z+1	; 0x01
    ea20:	8c 01       	movw	r16, r24
    ea22:	c8 01       	movw	r24, r16
    ea24:	01 97       	sbiw	r24, 0x01	; 1
    ea26:	f1 f7       	brne	.-4      	; 0xea24 <travel_path+0x1db0>
    ea28:	8c 01       	movw	r16, r24
    ea2a:	ce 01       	movw	r24, r28
    ea2c:	83 51       	subi	r24, 0x13	; 19
    ea2e:	9f 4f       	sbci	r25, 0xFF	; 255
    ea30:	fc 01       	movw	r30, r24
    ea32:	11 83       	std	Z+1, r17	; 0x01
    ea34:	00 83       	st	Z, r16
						_delay_ms(20);
						spl_right2();
    ea36:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    ea3a:	9e 01       	movw	r18, r28
    ea3c:	21 51       	subi	r18, 0x11	; 17
    ea3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea40:	80 e0       	ldi	r24, 0x00	; 0
    ea42:	90 e0       	ldi	r25, 0x00	; 0
    ea44:	a0 ea       	ldi	r26, 0xA0	; 160
    ea46:	b1 e4       	ldi	r27, 0x41	; 65
    ea48:	f9 01       	movw	r30, r18
    ea4a:	80 83       	st	Z, r24
    ea4c:	91 83       	std	Z+1, r25	; 0x01
    ea4e:	a2 83       	std	Z+2, r26	; 0x02
    ea50:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ea52:	8e 01       	movw	r16, r28
    ea54:	0d 50       	subi	r16, 0x0D	; 13
    ea56:	1f 4f       	sbci	r17, 0xFF	; 255
    ea58:	ce 01       	movw	r24, r28
    ea5a:	81 51       	subi	r24, 0x11	; 17
    ea5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ea5e:	fc 01       	movw	r30, r24
    ea60:	60 81       	ld	r22, Z
    ea62:	71 81       	ldd	r23, Z+1	; 0x01
    ea64:	82 81       	ldd	r24, Z+2	; 0x02
    ea66:	93 81       	ldd	r25, Z+3	; 0x03
    ea68:	26 e6       	ldi	r18, 0x66	; 102
    ea6a:	36 e6       	ldi	r19, 0x66	; 102
    ea6c:	46 e6       	ldi	r20, 0x66	; 102
    ea6e:	55 e4       	ldi	r21, 0x45	; 69
    ea70:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ea74:	dc 01       	movw	r26, r24
    ea76:	cb 01       	movw	r24, r22
    ea78:	f8 01       	movw	r30, r16
    ea7a:	80 83       	st	Z, r24
    ea7c:	91 83       	std	Z+1, r25	; 0x01
    ea7e:	a2 83       	std	Z+2, r26	; 0x02
    ea80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ea82:	ce 01       	movw	r24, r28
    ea84:	8d 50       	subi	r24, 0x0D	; 13
    ea86:	9f 4f       	sbci	r25, 0xFF	; 255
    ea88:	11 e0       	ldi	r17, 0x01	; 1
    ea8a:	fc 01       	movw	r30, r24
    ea8c:	60 81       	ld	r22, Z
    ea8e:	71 81       	ldd	r23, Z+1	; 0x01
    ea90:	82 81       	ldd	r24, Z+2	; 0x02
    ea92:	93 81       	ldd	r25, Z+3	; 0x03
    ea94:	20 e0       	ldi	r18, 0x00	; 0
    ea96:	30 e0       	ldi	r19, 0x00	; 0
    ea98:	40 e8       	ldi	r20, 0x80	; 128
    ea9a:	5f e3       	ldi	r21, 0x3F	; 63
    ea9c:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    eaa0:	88 23       	and	r24, r24
    eaa2:	0c f0       	brlt	.+2      	; 0xeaa6 <travel_path+0x1e32>
    eaa4:	10 e0       	ldi	r17, 0x00	; 0
    eaa6:	11 23       	and	r17, r17
    eaa8:	49 f0       	breq	.+18     	; 0xeabc <travel_path+0x1e48>
		__ticks = 1;
    eaaa:	ce 01       	movw	r24, r28
    eaac:	89 50       	subi	r24, 0x09	; 9
    eaae:	9f 4f       	sbci	r25, 0xFF	; 255
    eab0:	21 e0       	ldi	r18, 0x01	; 1
    eab2:	30 e0       	ldi	r19, 0x00	; 0
    eab4:	fc 01       	movw	r30, r24
    eab6:	31 83       	std	Z+1, r19	; 0x01
    eab8:	20 83       	st	Z, r18
    eaba:	74 c0       	rjmp	.+232    	; 0xeba4 <travel_path+0x1f30>
	else if (__tmp > 65535)
    eabc:	ce 01       	movw	r24, r28
    eabe:	8d 50       	subi	r24, 0x0D	; 13
    eac0:	9f 4f       	sbci	r25, 0xFF	; 255
    eac2:	11 e0       	ldi	r17, 0x01	; 1
    eac4:	fc 01       	movw	r30, r24
    eac6:	60 81       	ld	r22, Z
    eac8:	71 81       	ldd	r23, Z+1	; 0x01
    eaca:	82 81       	ldd	r24, Z+2	; 0x02
    eacc:	93 81       	ldd	r25, Z+3	; 0x03
    eace:	20 e0       	ldi	r18, 0x00	; 0
    ead0:	3f ef       	ldi	r19, 0xFF	; 255
    ead2:	4f e7       	ldi	r20, 0x7F	; 127
    ead4:	57 e4       	ldi	r21, 0x47	; 71
    ead6:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    eada:	18 16       	cp	r1, r24
    eadc:	0c f0       	brlt	.+2      	; 0xeae0 <travel_path+0x1e6c>
    eade:	10 e0       	ldi	r17, 0x00	; 0
    eae0:	11 23       	and	r17, r17
    eae2:	09 f4       	brne	.+2      	; 0xeae6 <travel_path+0x1e72>
    eae4:	4d c0       	rjmp	.+154    	; 0xeb80 <travel_path+0x1f0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    eae6:	ce 01       	movw	r24, r28
    eae8:	81 51       	subi	r24, 0x11	; 17
    eaea:	9f 4f       	sbci	r25, 0xFF	; 255
    eaec:	fc 01       	movw	r30, r24
    eaee:	60 81       	ld	r22, Z
    eaf0:	71 81       	ldd	r23, Z+1	; 0x01
    eaf2:	82 81       	ldd	r24, Z+2	; 0x02
    eaf4:	93 81       	ldd	r25, Z+3	; 0x03
    eaf6:	20 e0       	ldi	r18, 0x00	; 0
    eaf8:	30 e0       	ldi	r19, 0x00	; 0
    eafa:	40 e2       	ldi	r20, 0x20	; 32
    eafc:	51 e4       	ldi	r21, 0x41	; 65
    eafe:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    eb02:	dc 01       	movw	r26, r24
    eb04:	cb 01       	movw	r24, r22
    eb06:	8e 01       	movw	r16, r28
    eb08:	09 50       	subi	r16, 0x09	; 9
    eb0a:	1f 4f       	sbci	r17, 0xFF	; 255
    eb0c:	bc 01       	movw	r22, r24
    eb0e:	cd 01       	movw	r24, r26
    eb10:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    eb14:	dc 01       	movw	r26, r24
    eb16:	cb 01       	movw	r24, r22
    eb18:	f8 01       	movw	r30, r16
    eb1a:	91 83       	std	Z+1, r25	; 0x01
    eb1c:	80 83       	st	Z, r24
    eb1e:	27 c0       	rjmp	.+78     	; 0xeb6e <travel_path+0x1efa>
    eb20:	ce 01       	movw	r24, r28
    eb22:	87 50       	subi	r24, 0x07	; 7
    eb24:	9f 4f       	sbci	r25, 0xFF	; 255
    eb26:	20 e7       	ldi	r18, 0x70	; 112
    eb28:	31 e0       	ldi	r19, 0x01	; 1
    eb2a:	fc 01       	movw	r30, r24
    eb2c:	31 83       	std	Z+1, r19	; 0x01
    eb2e:	20 83       	st	Z, r18
    eb30:	ce 01       	movw	r24, r28
    eb32:	87 50       	subi	r24, 0x07	; 7
    eb34:	9f 4f       	sbci	r25, 0xFF	; 255
    eb36:	fc 01       	movw	r30, r24
    eb38:	80 81       	ld	r24, Z
    eb3a:	91 81       	ldd	r25, Z+1	; 0x01
    eb3c:	8c 01       	movw	r16, r24
    eb3e:	c8 01       	movw	r24, r16
    eb40:	01 97       	sbiw	r24, 0x01	; 1
    eb42:	f1 f7       	brne	.-4      	; 0xeb40 <travel_path+0x1ecc>
    eb44:	8c 01       	movw	r16, r24
    eb46:	ce 01       	movw	r24, r28
    eb48:	87 50       	subi	r24, 0x07	; 7
    eb4a:	9f 4f       	sbci	r25, 0xFF	; 255
    eb4c:	fc 01       	movw	r30, r24
    eb4e:	11 83       	std	Z+1, r17	; 0x01
    eb50:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    eb52:	ce 01       	movw	r24, r28
    eb54:	89 50       	subi	r24, 0x09	; 9
    eb56:	9f 4f       	sbci	r25, 0xFF	; 255
    eb58:	9e 01       	movw	r18, r28
    eb5a:	29 50       	subi	r18, 0x09	; 9
    eb5c:	3f 4f       	sbci	r19, 0xFF	; 255
    eb5e:	f9 01       	movw	r30, r18
    eb60:	20 81       	ld	r18, Z
    eb62:	31 81       	ldd	r19, Z+1	; 0x01
    eb64:	21 50       	subi	r18, 0x01	; 1
    eb66:	30 40       	sbci	r19, 0x00	; 0
    eb68:	fc 01       	movw	r30, r24
    eb6a:	31 83       	std	Z+1, r19	; 0x01
    eb6c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    eb6e:	ce 01       	movw	r24, r28
    eb70:	89 50       	subi	r24, 0x09	; 9
    eb72:	9f 4f       	sbci	r25, 0xFF	; 255
    eb74:	fc 01       	movw	r30, r24
    eb76:	80 81       	ld	r24, Z
    eb78:	91 81       	ldd	r25, Z+1	; 0x01
    eb7a:	00 97       	sbiw	r24, 0x00	; 0
    eb7c:	89 f6       	brne	.-94     	; 0xeb20 <travel_path+0x1eac>
    eb7e:	04 c1       	rjmp	.+520    	; 0xed88 <travel_path+0x2114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    eb80:	8e 01       	movw	r16, r28
    eb82:	09 50       	subi	r16, 0x09	; 9
    eb84:	1f 4f       	sbci	r17, 0xFF	; 255
    eb86:	ce 01       	movw	r24, r28
    eb88:	8d 50       	subi	r24, 0x0D	; 13
    eb8a:	9f 4f       	sbci	r25, 0xFF	; 255
    eb8c:	fc 01       	movw	r30, r24
    eb8e:	60 81       	ld	r22, Z
    eb90:	71 81       	ldd	r23, Z+1	; 0x01
    eb92:	82 81       	ldd	r24, Z+2	; 0x02
    eb94:	93 81       	ldd	r25, Z+3	; 0x03
    eb96:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    eb9a:	dc 01       	movw	r26, r24
    eb9c:	cb 01       	movw	r24, r22
    eb9e:	f8 01       	movw	r30, r16
    eba0:	91 83       	std	Z+1, r25	; 0x01
    eba2:	80 83       	st	Z, r24
    eba4:	ce 01       	movw	r24, r28
    eba6:	85 50       	subi	r24, 0x05	; 5
    eba8:	9f 4f       	sbci	r25, 0xFF	; 255
    ebaa:	9e 01       	movw	r18, r28
    ebac:	29 50       	subi	r18, 0x09	; 9
    ebae:	3f 4f       	sbci	r19, 0xFF	; 255
    ebb0:	f9 01       	movw	r30, r18
    ebb2:	20 81       	ld	r18, Z
    ebb4:	31 81       	ldd	r19, Z+1	; 0x01
    ebb6:	fc 01       	movw	r30, r24
    ebb8:	31 83       	std	Z+1, r19	; 0x01
    ebba:	20 83       	st	Z, r18
    ebbc:	ce 01       	movw	r24, r28
    ebbe:	85 50       	subi	r24, 0x05	; 5
    ebc0:	9f 4f       	sbci	r25, 0xFF	; 255
    ebc2:	fc 01       	movw	r30, r24
    ebc4:	80 81       	ld	r24, Z
    ebc6:	91 81       	ldd	r25, Z+1	; 0x01
    ebc8:	8c 01       	movw	r16, r24
    ebca:	c8 01       	movw	r24, r16
    ebcc:	01 97       	sbiw	r24, 0x01	; 1
    ebce:	f1 f7       	brne	.-4      	; 0xebcc <travel_path+0x1f58>
    ebd0:	8c 01       	movw	r16, r24
    ebd2:	ce 01       	movw	r24, r28
    ebd4:	85 50       	subi	r24, 0x05	; 5
    ebd6:	9f 4f       	sbci	r25, 0xFF	; 255
    ebd8:	fc 01       	movw	r30, r24
    ebda:	11 83       	std	Z+1, r17	; 0x01
    ebdc:	00 83       	st	Z, r16
    ebde:	d4 c0       	rjmp	.+424    	; 0xed88 <travel_path+0x2114>
						_delay_ms(20);
						}						
				else
				{
					stop();
    ebe0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ebe4:	9e 01       	movw	r18, r28
    ebe6:	23 50       	subi	r18, 0x03	; 3
    ebe8:	3f 4f       	sbci	r19, 0xFF	; 255
    ebea:	80 e0       	ldi	r24, 0x00	; 0
    ebec:	90 e0       	ldi	r25, 0x00	; 0
    ebee:	a0 ea       	ldi	r26, 0xA0	; 160
    ebf0:	b1 e4       	ldi	r27, 0x41	; 65
    ebf2:	f9 01       	movw	r30, r18
    ebf4:	80 83       	st	Z, r24
    ebf6:	91 83       	std	Z+1, r25	; 0x01
    ebf8:	a2 83       	std	Z+2, r26	; 0x02
    ebfa:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ebfc:	8e 01       	movw	r16, r28
    ebfe:	0f 5f       	subi	r16, 0xFF	; 255
    ec00:	1e 4f       	sbci	r17, 0xFE	; 254
    ec02:	ce 01       	movw	r24, r28
    ec04:	83 50       	subi	r24, 0x03	; 3
    ec06:	9f 4f       	sbci	r25, 0xFF	; 255
    ec08:	fc 01       	movw	r30, r24
    ec0a:	60 81       	ld	r22, Z
    ec0c:	71 81       	ldd	r23, Z+1	; 0x01
    ec0e:	82 81       	ldd	r24, Z+2	; 0x02
    ec10:	93 81       	ldd	r25, Z+3	; 0x03
    ec12:	26 e6       	ldi	r18, 0x66	; 102
    ec14:	36 e6       	ldi	r19, 0x66	; 102
    ec16:	46 e6       	ldi	r20, 0x66	; 102
    ec18:	55 e4       	ldi	r21, 0x45	; 69
    ec1a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ec1e:	dc 01       	movw	r26, r24
    ec20:	cb 01       	movw	r24, r22
    ec22:	f8 01       	movw	r30, r16
    ec24:	80 83       	st	Z, r24
    ec26:	91 83       	std	Z+1, r25	; 0x01
    ec28:	a2 83       	std	Z+2, r26	; 0x02
    ec2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ec2c:	ce 01       	movw	r24, r28
    ec2e:	8f 5f       	subi	r24, 0xFF	; 255
    ec30:	9e 4f       	sbci	r25, 0xFE	; 254
    ec32:	11 e0       	ldi	r17, 0x01	; 1
    ec34:	fc 01       	movw	r30, r24
    ec36:	60 81       	ld	r22, Z
    ec38:	71 81       	ldd	r23, Z+1	; 0x01
    ec3a:	82 81       	ldd	r24, Z+2	; 0x02
    ec3c:	93 81       	ldd	r25, Z+3	; 0x03
    ec3e:	20 e0       	ldi	r18, 0x00	; 0
    ec40:	30 e0       	ldi	r19, 0x00	; 0
    ec42:	40 e8       	ldi	r20, 0x80	; 128
    ec44:	5f e3       	ldi	r21, 0x3F	; 63
    ec46:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ec4a:	88 23       	and	r24, r24
    ec4c:	0c f0       	brlt	.+2      	; 0xec50 <travel_path+0x1fdc>
    ec4e:	10 e0       	ldi	r17, 0x00	; 0
    ec50:	11 23       	and	r17, r17
    ec52:	49 f0       	breq	.+18     	; 0xec66 <travel_path+0x1ff2>
		__ticks = 1;
    ec54:	ce 01       	movw	r24, r28
    ec56:	8b 5f       	subi	r24, 0xFB	; 251
    ec58:	9e 4f       	sbci	r25, 0xFE	; 254
    ec5a:	21 e0       	ldi	r18, 0x01	; 1
    ec5c:	30 e0       	ldi	r19, 0x00	; 0
    ec5e:	fc 01       	movw	r30, r24
    ec60:	31 83       	std	Z+1, r19	; 0x01
    ec62:	20 83       	st	Z, r18
    ec64:	74 c0       	rjmp	.+232    	; 0xed4e <travel_path+0x20da>
	else if (__tmp > 65535)
    ec66:	ce 01       	movw	r24, r28
    ec68:	8f 5f       	subi	r24, 0xFF	; 255
    ec6a:	9e 4f       	sbci	r25, 0xFE	; 254
    ec6c:	11 e0       	ldi	r17, 0x01	; 1
    ec6e:	fc 01       	movw	r30, r24
    ec70:	60 81       	ld	r22, Z
    ec72:	71 81       	ldd	r23, Z+1	; 0x01
    ec74:	82 81       	ldd	r24, Z+2	; 0x02
    ec76:	93 81       	ldd	r25, Z+3	; 0x03
    ec78:	20 e0       	ldi	r18, 0x00	; 0
    ec7a:	3f ef       	ldi	r19, 0xFF	; 255
    ec7c:	4f e7       	ldi	r20, 0x7F	; 127
    ec7e:	57 e4       	ldi	r21, 0x47	; 71
    ec80:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    ec84:	18 16       	cp	r1, r24
    ec86:	0c f0       	brlt	.+2      	; 0xec8a <travel_path+0x2016>
    ec88:	10 e0       	ldi	r17, 0x00	; 0
    ec8a:	11 23       	and	r17, r17
    ec8c:	09 f4       	brne	.+2      	; 0xec90 <travel_path+0x201c>
    ec8e:	4d c0       	rjmp	.+154    	; 0xed2a <travel_path+0x20b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ec90:	ce 01       	movw	r24, r28
    ec92:	83 50       	subi	r24, 0x03	; 3
    ec94:	9f 4f       	sbci	r25, 0xFF	; 255
    ec96:	fc 01       	movw	r30, r24
    ec98:	60 81       	ld	r22, Z
    ec9a:	71 81       	ldd	r23, Z+1	; 0x01
    ec9c:	82 81       	ldd	r24, Z+2	; 0x02
    ec9e:	93 81       	ldd	r25, Z+3	; 0x03
    eca0:	20 e0       	ldi	r18, 0x00	; 0
    eca2:	30 e0       	ldi	r19, 0x00	; 0
    eca4:	40 e2       	ldi	r20, 0x20	; 32
    eca6:	51 e4       	ldi	r21, 0x41	; 65
    eca8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ecac:	dc 01       	movw	r26, r24
    ecae:	cb 01       	movw	r24, r22
    ecb0:	8e 01       	movw	r16, r28
    ecb2:	0b 5f       	subi	r16, 0xFB	; 251
    ecb4:	1e 4f       	sbci	r17, 0xFE	; 254
    ecb6:	bc 01       	movw	r22, r24
    ecb8:	cd 01       	movw	r24, r26
    ecba:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ecbe:	dc 01       	movw	r26, r24
    ecc0:	cb 01       	movw	r24, r22
    ecc2:	f8 01       	movw	r30, r16
    ecc4:	91 83       	std	Z+1, r25	; 0x01
    ecc6:	80 83       	st	Z, r24
    ecc8:	27 c0       	rjmp	.+78     	; 0xed18 <travel_path+0x20a4>
    ecca:	ce 01       	movw	r24, r28
    eccc:	89 5f       	subi	r24, 0xF9	; 249
    ecce:	9e 4f       	sbci	r25, 0xFE	; 254
    ecd0:	20 e7       	ldi	r18, 0x70	; 112
    ecd2:	31 e0       	ldi	r19, 0x01	; 1
    ecd4:	fc 01       	movw	r30, r24
    ecd6:	31 83       	std	Z+1, r19	; 0x01
    ecd8:	20 83       	st	Z, r18
    ecda:	ce 01       	movw	r24, r28
    ecdc:	89 5f       	subi	r24, 0xF9	; 249
    ecde:	9e 4f       	sbci	r25, 0xFE	; 254
    ece0:	fc 01       	movw	r30, r24
    ece2:	80 81       	ld	r24, Z
    ece4:	91 81       	ldd	r25, Z+1	; 0x01
    ece6:	8c 01       	movw	r16, r24
    ece8:	c8 01       	movw	r24, r16
    ecea:	01 97       	sbiw	r24, 0x01	; 1
    ecec:	f1 f7       	brne	.-4      	; 0xecea <travel_path+0x2076>
    ecee:	8c 01       	movw	r16, r24
    ecf0:	ce 01       	movw	r24, r28
    ecf2:	89 5f       	subi	r24, 0xF9	; 249
    ecf4:	9e 4f       	sbci	r25, 0xFE	; 254
    ecf6:	fc 01       	movw	r30, r24
    ecf8:	11 83       	std	Z+1, r17	; 0x01
    ecfa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ecfc:	ce 01       	movw	r24, r28
    ecfe:	8b 5f       	subi	r24, 0xFB	; 251
    ed00:	9e 4f       	sbci	r25, 0xFE	; 254
    ed02:	9e 01       	movw	r18, r28
    ed04:	2b 5f       	subi	r18, 0xFB	; 251
    ed06:	3e 4f       	sbci	r19, 0xFE	; 254
    ed08:	f9 01       	movw	r30, r18
    ed0a:	20 81       	ld	r18, Z
    ed0c:	31 81       	ldd	r19, Z+1	; 0x01
    ed0e:	21 50       	subi	r18, 0x01	; 1
    ed10:	30 40       	sbci	r19, 0x00	; 0
    ed12:	fc 01       	movw	r30, r24
    ed14:	31 83       	std	Z+1, r19	; 0x01
    ed16:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ed18:	ce 01       	movw	r24, r28
    ed1a:	8b 5f       	subi	r24, 0xFB	; 251
    ed1c:	9e 4f       	sbci	r25, 0xFE	; 254
    ed1e:	fc 01       	movw	r30, r24
    ed20:	80 81       	ld	r24, Z
    ed22:	91 81       	ldd	r25, Z+1	; 0x01
    ed24:	00 97       	sbiw	r24, 0x00	; 0
    ed26:	89 f6       	brne	.-94     	; 0xecca <travel_path+0x2056>
    ed28:	2f c0       	rjmp	.+94     	; 0xed88 <travel_path+0x2114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ed2a:	8e 01       	movw	r16, r28
    ed2c:	0b 5f       	subi	r16, 0xFB	; 251
    ed2e:	1e 4f       	sbci	r17, 0xFE	; 254
    ed30:	ce 01       	movw	r24, r28
    ed32:	8f 5f       	subi	r24, 0xFF	; 255
    ed34:	9e 4f       	sbci	r25, 0xFE	; 254
    ed36:	fc 01       	movw	r30, r24
    ed38:	60 81       	ld	r22, Z
    ed3a:	71 81       	ldd	r23, Z+1	; 0x01
    ed3c:	82 81       	ldd	r24, Z+2	; 0x02
    ed3e:	93 81       	ldd	r25, Z+3	; 0x03
    ed40:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ed44:	dc 01       	movw	r26, r24
    ed46:	cb 01       	movw	r24, r22
    ed48:	f8 01       	movw	r30, r16
    ed4a:	91 83       	std	Z+1, r25	; 0x01
    ed4c:	80 83       	st	Z, r24
    ed4e:	ce 01       	movw	r24, r28
    ed50:	87 5f       	subi	r24, 0xF7	; 247
    ed52:	9e 4f       	sbci	r25, 0xFE	; 254
    ed54:	9e 01       	movw	r18, r28
    ed56:	2b 5f       	subi	r18, 0xFB	; 251
    ed58:	3e 4f       	sbci	r19, 0xFE	; 254
    ed5a:	f9 01       	movw	r30, r18
    ed5c:	20 81       	ld	r18, Z
    ed5e:	31 81       	ldd	r19, Z+1	; 0x01
    ed60:	fc 01       	movw	r30, r24
    ed62:	31 83       	std	Z+1, r19	; 0x01
    ed64:	20 83       	st	Z, r18
    ed66:	ce 01       	movw	r24, r28
    ed68:	87 5f       	subi	r24, 0xF7	; 247
    ed6a:	9e 4f       	sbci	r25, 0xFE	; 254
    ed6c:	fc 01       	movw	r30, r24
    ed6e:	80 81       	ld	r24, Z
    ed70:	91 81       	ldd	r25, Z+1	; 0x01
    ed72:	8c 01       	movw	r16, r24
    ed74:	c8 01       	movw	r24, r16
    ed76:	01 97       	sbiw	r24, 0x01	; 1
    ed78:	f1 f7       	brne	.-4      	; 0xed76 <travel_path+0x2102>
    ed7a:	8c 01       	movw	r16, r24
    ed7c:	ce 01       	movw	r24, r28
    ed7e:	87 5f       	subi	r24, 0xF7	; 247
    ed80:	9e 4f       	sbci	r25, 0xFE	; 254
    ed82:	fc 01       	movw	r30, r24
    ed84:	11 83       	std	Z+1, r17	; 0x01
    ed86:	00 83       	st	Z, r16
					_delay_ms(20);
				}					
				node++;
    ed88:	80 91 63 03 	lds	r24, 0x0363
    ed8c:	90 91 64 03 	lds	r25, 0x0364
    ed90:	01 96       	adiw	r24, 0x01	; 1
    ed92:	90 93 64 03 	sts	0x0364, r25
    ed96:	80 93 63 03 	sts	0x0363, r24
				pick_drop(master_path[node]);
    ed9a:	80 91 63 03 	lds	r24, 0x0363
    ed9e:	90 91 64 03 	lds	r25, 0x0364
    eda2:	89 59       	subi	r24, 0x99	; 153
    eda4:	9c 4f       	sbci	r25, 0xFC	; 252
    eda6:	fc 01       	movw	r30, r24
    eda8:	80 81       	ld	r24, Z
    edaa:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
				node++;
    edae:	80 91 63 03 	lds	r24, 0x0363
    edb2:	90 91 64 03 	lds	r25, 0x0364
    edb6:	01 96       	adiw	r24, 0x01	; 1
    edb8:	90 93 64 03 	sts	0x0364, r25
    edbc:	80 93 63 03 	sts	0x0363, r24
				travel_path(master_path[node]);
    edc0:	80 91 63 03 	lds	r24, 0x0363
    edc4:	90 91 64 03 	lds	r25, 0x0364
    edc8:	89 59       	subi	r24, 0x99	; 153
    edca:	9c 4f       	sbci	r25, 0xFC	; 252
    edcc:	fc 01       	movw	r30, r24
    edce:	80 81       	ld	r24, Z
    edd0:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
    edd4:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
			}
			else if(master_path[node+1]=='D')//mod
    edd8:	80 91 63 03 	lds	r24, 0x0363
    eddc:	90 91 64 03 	lds	r25, 0x0364
    ede0:	01 96       	adiw	r24, 0x01	; 1
    ede2:	89 59       	subi	r24, 0x99	; 153
    ede4:	9c 4f       	sbci	r25, 0xFC	; 252
    ede6:	fc 01       	movw	r30, r24
    ede8:	80 81       	ld	r24, Z
    edea:	84 34       	cpi	r24, 0x44	; 68
    edec:	09 f0       	breq	.+2      	; 0xedf0 <travel_path+0x217c>
    edee:	fc c0       	rjmp	.+504    	; 0xefe8 <travel_path+0x2374>
			{
				correct_left();
    edf0:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    edf4:	9e 01       	movw	r18, r28
    edf6:	25 5f       	subi	r18, 0xF5	; 245
    edf8:	3e 4f       	sbci	r19, 0xFE	; 254
    edfa:	80 e0       	ldi	r24, 0x00	; 0
    edfc:	90 e0       	ldi	r25, 0x00	; 0
    edfe:	a0 ea       	ldi	r26, 0xA0	; 160
    ee00:	b1 e4       	ldi	r27, 0x41	; 65
    ee02:	f9 01       	movw	r30, r18
    ee04:	80 83       	st	Z, r24
    ee06:	91 83       	std	Z+1, r25	; 0x01
    ee08:	a2 83       	std	Z+2, r26	; 0x02
    ee0a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ee0c:	8e 01       	movw	r16, r28
    ee0e:	01 5f       	subi	r16, 0xF1	; 241
    ee10:	1e 4f       	sbci	r17, 0xFE	; 254
    ee12:	ce 01       	movw	r24, r28
    ee14:	85 5f       	subi	r24, 0xF5	; 245
    ee16:	9e 4f       	sbci	r25, 0xFE	; 254
    ee18:	fc 01       	movw	r30, r24
    ee1a:	60 81       	ld	r22, Z
    ee1c:	71 81       	ldd	r23, Z+1	; 0x01
    ee1e:	82 81       	ldd	r24, Z+2	; 0x02
    ee20:	93 81       	ldd	r25, Z+3	; 0x03
    ee22:	26 e6       	ldi	r18, 0x66	; 102
    ee24:	36 e6       	ldi	r19, 0x66	; 102
    ee26:	46 e6       	ldi	r20, 0x66	; 102
    ee28:	55 e4       	ldi	r21, 0x45	; 69
    ee2a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ee2e:	dc 01       	movw	r26, r24
    ee30:	cb 01       	movw	r24, r22
    ee32:	f8 01       	movw	r30, r16
    ee34:	80 83       	st	Z, r24
    ee36:	91 83       	std	Z+1, r25	; 0x01
    ee38:	a2 83       	std	Z+2, r26	; 0x02
    ee3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ee3c:	ce 01       	movw	r24, r28
    ee3e:	81 5f       	subi	r24, 0xF1	; 241
    ee40:	9e 4f       	sbci	r25, 0xFE	; 254
    ee42:	11 e0       	ldi	r17, 0x01	; 1
    ee44:	fc 01       	movw	r30, r24
    ee46:	60 81       	ld	r22, Z
    ee48:	71 81       	ldd	r23, Z+1	; 0x01
    ee4a:	82 81       	ldd	r24, Z+2	; 0x02
    ee4c:	93 81       	ldd	r25, Z+3	; 0x03
    ee4e:	20 e0       	ldi	r18, 0x00	; 0
    ee50:	30 e0       	ldi	r19, 0x00	; 0
    ee52:	40 e8       	ldi	r20, 0x80	; 128
    ee54:	5f e3       	ldi	r21, 0x3F	; 63
    ee56:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ee5a:	88 23       	and	r24, r24
    ee5c:	0c f0       	brlt	.+2      	; 0xee60 <travel_path+0x21ec>
    ee5e:	10 e0       	ldi	r17, 0x00	; 0
    ee60:	11 23       	and	r17, r17
    ee62:	49 f0       	breq	.+18     	; 0xee76 <travel_path+0x2202>
		__ticks = 1;
    ee64:	ce 01       	movw	r24, r28
    ee66:	8d 5e       	subi	r24, 0xED	; 237
    ee68:	9e 4f       	sbci	r25, 0xFE	; 254
    ee6a:	21 e0       	ldi	r18, 0x01	; 1
    ee6c:	30 e0       	ldi	r19, 0x00	; 0
    ee6e:	fc 01       	movw	r30, r24
    ee70:	31 83       	std	Z+1, r19	; 0x01
    ee72:	20 83       	st	Z, r18
    ee74:	74 c0       	rjmp	.+232    	; 0xef5e <travel_path+0x22ea>
	else if (__tmp > 65535)
    ee76:	ce 01       	movw	r24, r28
    ee78:	81 5f       	subi	r24, 0xF1	; 241
    ee7a:	9e 4f       	sbci	r25, 0xFE	; 254
    ee7c:	11 e0       	ldi	r17, 0x01	; 1
    ee7e:	fc 01       	movw	r30, r24
    ee80:	60 81       	ld	r22, Z
    ee82:	71 81       	ldd	r23, Z+1	; 0x01
    ee84:	82 81       	ldd	r24, Z+2	; 0x02
    ee86:	93 81       	ldd	r25, Z+3	; 0x03
    ee88:	20 e0       	ldi	r18, 0x00	; 0
    ee8a:	3f ef       	ldi	r19, 0xFF	; 255
    ee8c:	4f e7       	ldi	r20, 0x7F	; 127
    ee8e:	57 e4       	ldi	r21, 0x47	; 71
    ee90:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    ee94:	18 16       	cp	r1, r24
    ee96:	0c f0       	brlt	.+2      	; 0xee9a <travel_path+0x2226>
    ee98:	10 e0       	ldi	r17, 0x00	; 0
    ee9a:	11 23       	and	r17, r17
    ee9c:	09 f4       	brne	.+2      	; 0xeea0 <travel_path+0x222c>
    ee9e:	4d c0       	rjmp	.+154    	; 0xef3a <travel_path+0x22c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    eea0:	ce 01       	movw	r24, r28
    eea2:	85 5f       	subi	r24, 0xF5	; 245
    eea4:	9e 4f       	sbci	r25, 0xFE	; 254
    eea6:	fc 01       	movw	r30, r24
    eea8:	60 81       	ld	r22, Z
    eeaa:	71 81       	ldd	r23, Z+1	; 0x01
    eeac:	82 81       	ldd	r24, Z+2	; 0x02
    eeae:	93 81       	ldd	r25, Z+3	; 0x03
    eeb0:	20 e0       	ldi	r18, 0x00	; 0
    eeb2:	30 e0       	ldi	r19, 0x00	; 0
    eeb4:	40 e2       	ldi	r20, 0x20	; 32
    eeb6:	51 e4       	ldi	r21, 0x41	; 65
    eeb8:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    eebc:	dc 01       	movw	r26, r24
    eebe:	cb 01       	movw	r24, r22
    eec0:	8e 01       	movw	r16, r28
    eec2:	0d 5e       	subi	r16, 0xED	; 237
    eec4:	1e 4f       	sbci	r17, 0xFE	; 254
    eec6:	bc 01       	movw	r22, r24
    eec8:	cd 01       	movw	r24, r26
    eeca:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    eece:	dc 01       	movw	r26, r24
    eed0:	cb 01       	movw	r24, r22
    eed2:	f8 01       	movw	r30, r16
    eed4:	91 83       	std	Z+1, r25	; 0x01
    eed6:	80 83       	st	Z, r24
    eed8:	27 c0       	rjmp	.+78     	; 0xef28 <travel_path+0x22b4>
    eeda:	ce 01       	movw	r24, r28
    eedc:	8b 5e       	subi	r24, 0xEB	; 235
    eede:	9e 4f       	sbci	r25, 0xFE	; 254
    eee0:	20 e7       	ldi	r18, 0x70	; 112
    eee2:	31 e0       	ldi	r19, 0x01	; 1
    eee4:	fc 01       	movw	r30, r24
    eee6:	31 83       	std	Z+1, r19	; 0x01
    eee8:	20 83       	st	Z, r18
    eeea:	ce 01       	movw	r24, r28
    eeec:	8b 5e       	subi	r24, 0xEB	; 235
    eeee:	9e 4f       	sbci	r25, 0xFE	; 254
    eef0:	fc 01       	movw	r30, r24
    eef2:	80 81       	ld	r24, Z
    eef4:	91 81       	ldd	r25, Z+1	; 0x01
    eef6:	8c 01       	movw	r16, r24
    eef8:	c8 01       	movw	r24, r16
    eefa:	01 97       	sbiw	r24, 0x01	; 1
    eefc:	f1 f7       	brne	.-4      	; 0xeefa <travel_path+0x2286>
    eefe:	8c 01       	movw	r16, r24
    ef00:	ce 01       	movw	r24, r28
    ef02:	8b 5e       	subi	r24, 0xEB	; 235
    ef04:	9e 4f       	sbci	r25, 0xFE	; 254
    ef06:	fc 01       	movw	r30, r24
    ef08:	11 83       	std	Z+1, r17	; 0x01
    ef0a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ef0c:	ce 01       	movw	r24, r28
    ef0e:	8d 5e       	subi	r24, 0xED	; 237
    ef10:	9e 4f       	sbci	r25, 0xFE	; 254
    ef12:	9e 01       	movw	r18, r28
    ef14:	2d 5e       	subi	r18, 0xED	; 237
    ef16:	3e 4f       	sbci	r19, 0xFE	; 254
    ef18:	f9 01       	movw	r30, r18
    ef1a:	20 81       	ld	r18, Z
    ef1c:	31 81       	ldd	r19, Z+1	; 0x01
    ef1e:	21 50       	subi	r18, 0x01	; 1
    ef20:	30 40       	sbci	r19, 0x00	; 0
    ef22:	fc 01       	movw	r30, r24
    ef24:	31 83       	std	Z+1, r19	; 0x01
    ef26:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ef28:	ce 01       	movw	r24, r28
    ef2a:	8d 5e       	subi	r24, 0xED	; 237
    ef2c:	9e 4f       	sbci	r25, 0xFE	; 254
    ef2e:	fc 01       	movw	r30, r24
    ef30:	80 81       	ld	r24, Z
    ef32:	91 81       	ldd	r25, Z+1	; 0x01
    ef34:	00 97       	sbiw	r24, 0x00	; 0
    ef36:	89 f6       	brne	.-94     	; 0xeeda <travel_path+0x2266>
    ef38:	2f c0       	rjmp	.+94     	; 0xef98 <travel_path+0x2324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ef3a:	8e 01       	movw	r16, r28
    ef3c:	0d 5e       	subi	r16, 0xED	; 237
    ef3e:	1e 4f       	sbci	r17, 0xFE	; 254
    ef40:	ce 01       	movw	r24, r28
    ef42:	81 5f       	subi	r24, 0xF1	; 241
    ef44:	9e 4f       	sbci	r25, 0xFE	; 254
    ef46:	fc 01       	movw	r30, r24
    ef48:	60 81       	ld	r22, Z
    ef4a:	71 81       	ldd	r23, Z+1	; 0x01
    ef4c:	82 81       	ldd	r24, Z+2	; 0x02
    ef4e:	93 81       	ldd	r25, Z+3	; 0x03
    ef50:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    ef54:	dc 01       	movw	r26, r24
    ef56:	cb 01       	movw	r24, r22
    ef58:	f8 01       	movw	r30, r16
    ef5a:	91 83       	std	Z+1, r25	; 0x01
    ef5c:	80 83       	st	Z, r24
    ef5e:	ce 01       	movw	r24, r28
    ef60:	89 5e       	subi	r24, 0xE9	; 233
    ef62:	9e 4f       	sbci	r25, 0xFE	; 254
    ef64:	9e 01       	movw	r18, r28
    ef66:	2d 5e       	subi	r18, 0xED	; 237
    ef68:	3e 4f       	sbci	r19, 0xFE	; 254
    ef6a:	f9 01       	movw	r30, r18
    ef6c:	20 81       	ld	r18, Z
    ef6e:	31 81       	ldd	r19, Z+1	; 0x01
    ef70:	fc 01       	movw	r30, r24
    ef72:	31 83       	std	Z+1, r19	; 0x01
    ef74:	20 83       	st	Z, r18
    ef76:	ce 01       	movw	r24, r28
    ef78:	89 5e       	subi	r24, 0xE9	; 233
    ef7a:	9e 4f       	sbci	r25, 0xFE	; 254
    ef7c:	fc 01       	movw	r30, r24
    ef7e:	80 81       	ld	r24, Z
    ef80:	91 81       	ldd	r25, Z+1	; 0x01
    ef82:	8c 01       	movw	r16, r24
    ef84:	c8 01       	movw	r24, r16
    ef86:	01 97       	sbiw	r24, 0x01	; 1
    ef88:	f1 f7       	brne	.-4      	; 0xef86 <travel_path+0x2312>
    ef8a:	8c 01       	movw	r16, r24
    ef8c:	ce 01       	movw	r24, r28
    ef8e:	89 5e       	subi	r24, 0xE9	; 233
    ef90:	9e 4f       	sbci	r25, 0xFE	; 254
    ef92:	fc 01       	movw	r30, r24
    ef94:	11 83       	std	Z+1, r17	; 0x01
    ef96:	00 83       	st	Z, r16
				_delay_ms(20);
				node++;
    ef98:	80 91 63 03 	lds	r24, 0x0363
    ef9c:	90 91 64 03 	lds	r25, 0x0364
    efa0:	01 96       	adiw	r24, 0x01	; 1
    efa2:	90 93 64 03 	sts	0x0364, r25
    efa6:	80 93 63 03 	sts	0x0363, r24
				pick_drop(master_path[node]);
    efaa:	80 91 63 03 	lds	r24, 0x0363
    efae:	90 91 64 03 	lds	r25, 0x0364
    efb2:	89 59       	subi	r24, 0x99	; 153
    efb4:	9c 4f       	sbci	r25, 0xFC	; 252
    efb6:	fc 01       	movw	r30, r24
    efb8:	80 81       	ld	r24, Z
    efba:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
				node++;
    efbe:	80 91 63 03 	lds	r24, 0x0363
    efc2:	90 91 64 03 	lds	r25, 0x0364
    efc6:	01 96       	adiw	r24, 0x01	; 1
    efc8:	90 93 64 03 	sts	0x0364, r25
    efcc:	80 93 63 03 	sts	0x0363, r24
				travel_path(master_path[node]);
    efd0:	80 91 63 03 	lds	r24, 0x0363
    efd4:	90 91 64 03 	lds	r25, 0x0364
    efd8:	89 59       	subi	r24, 0x99	; 153
    efda:	9c 4f       	sbci	r25, 0xFC	; 252
    efdc:	fc 01       	movw	r30, r24
    efde:	80 81       	ld	r24, Z
    efe0:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    efe4:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
				pick_drop(master_path[node]);
				node++;
				travel_path(master_path[node]);
			}
			else{
				node=node-2;
    efe8:	80 91 63 03 	lds	r24, 0x0363
    efec:	90 91 64 03 	lds	r25, 0x0364
    eff0:	02 97       	sbiw	r24, 0x02	; 2
    eff2:	90 93 64 03 	sts	0x0364, r25
    eff6:	80 93 63 03 	sts	0x0363, r24
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
    effa:	80 91 63 03 	lds	r24, 0x0363
    effe:	90 91 64 03 	lds	r25, 0x0364
    f002:	89 59       	subi	r24, 0x99	; 153
    f004:	9c 4f       	sbci	r25, 0xFC	; 252
    f006:	fc 01       	movw	r30, r24
    f008:	80 81       	ld	r24, Z
    f00a:	82 35       	cpi	r24, 0x52	; 82
    f00c:	a1 f0       	breq	.+40     	; 0xf036 <travel_path+0x23c2>
    f00e:	80 91 63 03 	lds	r24, 0x0363
    f012:	90 91 64 03 	lds	r25, 0x0364
    f016:	89 59       	subi	r24, 0x99	; 153
    f018:	9c 4f       	sbci	r25, 0xFC	; 252
    f01a:	fc 01       	movw	r30, r24
    f01c:	80 81       	ld	r24, Z
    f01e:	8c 34       	cpi	r24, 0x4C	; 76
    f020:	51 f0       	breq	.+20     	; 0xf036 <travel_path+0x23c2>
    f022:	80 91 63 03 	lds	r24, 0x0363
    f026:	90 91 64 03 	lds	r25, 0x0364
    f02a:	89 59       	subi	r24, 0x99	; 153
    f02c:	9c 4f       	sbci	r25, 0xFC	; 252
    f02e:	fc 01       	movw	r30, r24
    f030:	80 81       	ld	r24, Z
    f032:	85 35       	cpi	r24, 0x55	; 85
    f034:	19 f4       	brne	.+6      	; 0xf03c <travel_path+0x23c8>
				correct_left2();
    f036:	0e 94 80 17 	call	0x2f00	; 0x2f00 <correct_left2>
    f03a:	02 c0       	rjmp	.+4      	; 0xf040 <travel_path+0x23cc>
				else
				correct_left();
    f03c:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node+2;
    f040:	80 91 63 03 	lds	r24, 0x0363
    f044:	90 91 64 03 	lds	r25, 0x0364
    f048:	02 96       	adiw	r24, 0x02	; 2
    f04a:	90 93 64 03 	sts	0x0364, r25
    f04e:	80 93 63 03 	sts	0x0363, r24
    f052:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
			}
		}
		else if(pos_val=='N'){
    f056:	ce 01       	movw	r24, r28
    f058:	87 57       	subi	r24, 0x77	; 119
    f05a:	9e 4f       	sbci	r25, 0xFE	; 254
    f05c:	fc 01       	movw	r30, r24
    f05e:	80 81       	ld	r24, Z
    f060:	8e 34       	cpi	r24, 0x4E	; 78
    f062:	09 f0       	breq	.+2      	; 0xf066 <travel_path+0x23f2>
    f064:	3a c4       	rjmp	.+2164   	; 0xf8da <travel_path+0x2c66>
		if(node==0){
    f066:	80 91 63 03 	lds	r24, 0x0363
    f06a:	90 91 64 03 	lds	r25, 0x0364
    f06e:	00 97       	sbiw	r24, 0x00	; 0
    f070:	09 f0       	breq	.+2      	; 0xf074 <travel_path+0x2400>
    f072:	67 c1       	rjmp	.+718    	; 0xf342 <travel_path+0x26ce>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    f074:	80 91 63 03 	lds	r24, 0x0363
    f078:	90 91 64 03 	lds	r25, 0x0364
    f07c:	01 96       	adiw	r24, 0x01	; 1
    f07e:	89 59       	subi	r24, 0x99	; 153
    f080:	9c 4f       	sbci	r25, 0xFC	; 252
    f082:	fc 01       	movw	r30, r24
    f084:	80 81       	ld	r24, Z
    f086:	84 34       	cpi	r24, 0x44	; 68
    f088:	09 f4       	brne	.+2      	; 0xf08c <travel_path+0x2418>
    f08a:	5b c0       	rjmp	.+182    	; 0xf142 <travel_path+0x24ce>
    f08c:	80 91 63 03 	lds	r24, 0x0363
    f090:	90 91 64 03 	lds	r25, 0x0364
    f094:	01 96       	adiw	r24, 0x01	; 1
    f096:	89 59       	subi	r24, 0x99	; 153
    f098:	9c 4f       	sbci	r25, 0xFC	; 252
    f09a:	fc 01       	movw	r30, r24
    f09c:	80 81       	ld	r24, Z
    f09e:	81 33       	cpi	r24, 0x31	; 49
    f0a0:	09 f4       	brne	.+2      	; 0xf0a4 <travel_path+0x2430>
    f0a2:	4f c0       	rjmp	.+158    	; 0xf142 <travel_path+0x24ce>
    f0a4:	80 91 63 03 	lds	r24, 0x0363
    f0a8:	90 91 64 03 	lds	r25, 0x0364
    f0ac:	01 96       	adiw	r24, 0x01	; 1
    f0ae:	89 59       	subi	r24, 0x99	; 153
    f0b0:	9c 4f       	sbci	r25, 0xFC	; 252
    f0b2:	fc 01       	movw	r30, r24
    f0b4:	80 81       	ld	r24, Z
    f0b6:	82 33       	cpi	r24, 0x32	; 50
    f0b8:	09 f4       	brne	.+2      	; 0xf0bc <travel_path+0x2448>
    f0ba:	43 c0       	rjmp	.+134    	; 0xf142 <travel_path+0x24ce>
    f0bc:	80 91 63 03 	lds	r24, 0x0363
    f0c0:	90 91 64 03 	lds	r25, 0x0364
    f0c4:	01 96       	adiw	r24, 0x01	; 1
    f0c6:	89 59       	subi	r24, 0x99	; 153
    f0c8:	9c 4f       	sbci	r25, 0xFC	; 252
    f0ca:	fc 01       	movw	r30, r24
    f0cc:	80 81       	ld	r24, Z
    f0ce:	83 33       	cpi	r24, 0x33	; 51
    f0d0:	c1 f1       	breq	.+112    	; 0xf142 <travel_path+0x24ce>
    f0d2:	80 91 63 03 	lds	r24, 0x0363
    f0d6:	90 91 64 03 	lds	r25, 0x0364
    f0da:	01 96       	adiw	r24, 0x01	; 1
    f0dc:	89 59       	subi	r24, 0x99	; 153
    f0de:	9c 4f       	sbci	r25, 0xFC	; 252
    f0e0:	fc 01       	movw	r30, r24
    f0e2:	80 81       	ld	r24, Z
    f0e4:	84 33       	cpi	r24, 0x34	; 52
    f0e6:	69 f1       	breq	.+90     	; 0xf142 <travel_path+0x24ce>
    f0e8:	80 91 63 03 	lds	r24, 0x0363
    f0ec:	90 91 64 03 	lds	r25, 0x0364
    f0f0:	01 96       	adiw	r24, 0x01	; 1
    f0f2:	89 59       	subi	r24, 0x99	; 153
    f0f4:	9c 4f       	sbci	r25, 0xFC	; 252
    f0f6:	fc 01       	movw	r30, r24
    f0f8:	80 81       	ld	r24, Z
    f0fa:	85 33       	cpi	r24, 0x35	; 53
    f0fc:	11 f1       	breq	.+68     	; 0xf142 <travel_path+0x24ce>
    f0fe:	80 91 63 03 	lds	r24, 0x0363
    f102:	90 91 64 03 	lds	r25, 0x0364
    f106:	01 96       	adiw	r24, 0x01	; 1
    f108:	89 59       	subi	r24, 0x99	; 153
    f10a:	9c 4f       	sbci	r25, 0xFC	; 252
    f10c:	fc 01       	movw	r30, r24
    f10e:	80 81       	ld	r24, Z
    f110:	86 33       	cpi	r24, 0x36	; 54
    f112:	b9 f0       	breq	.+46     	; 0xf142 <travel_path+0x24ce>
    f114:	80 91 63 03 	lds	r24, 0x0363
    f118:	90 91 64 03 	lds	r25, 0x0364
    f11c:	01 96       	adiw	r24, 0x01	; 1
    f11e:	89 59       	subi	r24, 0x99	; 153
    f120:	9c 4f       	sbci	r25, 0xFC	; 252
    f122:	fc 01       	movw	r30, r24
    f124:	80 81       	ld	r24, Z
    f126:	87 33       	cpi	r24, 0x37	; 55
    f128:	61 f0       	breq	.+24     	; 0xf142 <travel_path+0x24ce>
    f12a:	80 91 63 03 	lds	r24, 0x0363
    f12e:	90 91 64 03 	lds	r25, 0x0364
    f132:	01 96       	adiw	r24, 0x01	; 1
    f134:	89 59       	subi	r24, 0x99	; 153
    f136:	9c 4f       	sbci	r25, 0xFC	; 252
    f138:	fc 01       	movw	r30, r24
    f13a:	80 81       	ld	r24, Z
    f13c:	88 33       	cpi	r24, 0x38	; 56
    f13e:	09 f0       	breq	.+2      	; 0xf142 <travel_path+0x24ce>
    f140:	fc c0       	rjmp	.+504    	; 0xf33a <travel_path+0x26c6>
		{
						stop();
    f142:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f146:	9e 01       	movw	r18, r28
    f148:	27 5e       	subi	r18, 0xE7	; 231
    f14a:	3e 4f       	sbci	r19, 0xFE	; 254
    f14c:	80 e0       	ldi	r24, 0x00	; 0
    f14e:	90 e0       	ldi	r25, 0x00	; 0
    f150:	a0 ea       	ldi	r26, 0xA0	; 160
    f152:	b1 e4       	ldi	r27, 0x41	; 65
    f154:	f9 01       	movw	r30, r18
    f156:	80 83       	st	Z, r24
    f158:	91 83       	std	Z+1, r25	; 0x01
    f15a:	a2 83       	std	Z+2, r26	; 0x02
    f15c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f15e:	8e 01       	movw	r16, r28
    f160:	03 5e       	subi	r16, 0xE3	; 227
    f162:	1e 4f       	sbci	r17, 0xFE	; 254
    f164:	ce 01       	movw	r24, r28
    f166:	87 5e       	subi	r24, 0xE7	; 231
    f168:	9e 4f       	sbci	r25, 0xFE	; 254
    f16a:	fc 01       	movw	r30, r24
    f16c:	60 81       	ld	r22, Z
    f16e:	71 81       	ldd	r23, Z+1	; 0x01
    f170:	82 81       	ldd	r24, Z+2	; 0x02
    f172:	93 81       	ldd	r25, Z+3	; 0x03
    f174:	26 e6       	ldi	r18, 0x66	; 102
    f176:	36 e6       	ldi	r19, 0x66	; 102
    f178:	46 e6       	ldi	r20, 0x66	; 102
    f17a:	55 e4       	ldi	r21, 0x45	; 69
    f17c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f180:	dc 01       	movw	r26, r24
    f182:	cb 01       	movw	r24, r22
    f184:	f8 01       	movw	r30, r16
    f186:	80 83       	st	Z, r24
    f188:	91 83       	std	Z+1, r25	; 0x01
    f18a:	a2 83       	std	Z+2, r26	; 0x02
    f18c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f18e:	ce 01       	movw	r24, r28
    f190:	83 5e       	subi	r24, 0xE3	; 227
    f192:	9e 4f       	sbci	r25, 0xFE	; 254
    f194:	11 e0       	ldi	r17, 0x01	; 1
    f196:	fc 01       	movw	r30, r24
    f198:	60 81       	ld	r22, Z
    f19a:	71 81       	ldd	r23, Z+1	; 0x01
    f19c:	82 81       	ldd	r24, Z+2	; 0x02
    f19e:	93 81       	ldd	r25, Z+3	; 0x03
    f1a0:	20 e0       	ldi	r18, 0x00	; 0
    f1a2:	30 e0       	ldi	r19, 0x00	; 0
    f1a4:	40 e8       	ldi	r20, 0x80	; 128
    f1a6:	5f e3       	ldi	r21, 0x3F	; 63
    f1a8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    f1ac:	88 23       	and	r24, r24
    f1ae:	0c f0       	brlt	.+2      	; 0xf1b2 <travel_path+0x253e>
    f1b0:	10 e0       	ldi	r17, 0x00	; 0
    f1b2:	11 23       	and	r17, r17
    f1b4:	49 f0       	breq	.+18     	; 0xf1c8 <travel_path+0x2554>
		__ticks = 1;
    f1b6:	ce 01       	movw	r24, r28
    f1b8:	8f 5d       	subi	r24, 0xDF	; 223
    f1ba:	9e 4f       	sbci	r25, 0xFE	; 254
    f1bc:	21 e0       	ldi	r18, 0x01	; 1
    f1be:	30 e0       	ldi	r19, 0x00	; 0
    f1c0:	fc 01       	movw	r30, r24
    f1c2:	31 83       	std	Z+1, r19	; 0x01
    f1c4:	20 83       	st	Z, r18
    f1c6:	74 c0       	rjmp	.+232    	; 0xf2b0 <travel_path+0x263c>
	else if (__tmp > 65535)
    f1c8:	ce 01       	movw	r24, r28
    f1ca:	83 5e       	subi	r24, 0xE3	; 227
    f1cc:	9e 4f       	sbci	r25, 0xFE	; 254
    f1ce:	11 e0       	ldi	r17, 0x01	; 1
    f1d0:	fc 01       	movw	r30, r24
    f1d2:	60 81       	ld	r22, Z
    f1d4:	71 81       	ldd	r23, Z+1	; 0x01
    f1d6:	82 81       	ldd	r24, Z+2	; 0x02
    f1d8:	93 81       	ldd	r25, Z+3	; 0x03
    f1da:	20 e0       	ldi	r18, 0x00	; 0
    f1dc:	3f ef       	ldi	r19, 0xFF	; 255
    f1de:	4f e7       	ldi	r20, 0x7F	; 127
    f1e0:	57 e4       	ldi	r21, 0x47	; 71
    f1e2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    f1e6:	18 16       	cp	r1, r24
    f1e8:	0c f0       	brlt	.+2      	; 0xf1ec <travel_path+0x2578>
    f1ea:	10 e0       	ldi	r17, 0x00	; 0
    f1ec:	11 23       	and	r17, r17
    f1ee:	09 f4       	brne	.+2      	; 0xf1f2 <travel_path+0x257e>
    f1f0:	4d c0       	rjmp	.+154    	; 0xf28c <travel_path+0x2618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f1f2:	ce 01       	movw	r24, r28
    f1f4:	87 5e       	subi	r24, 0xE7	; 231
    f1f6:	9e 4f       	sbci	r25, 0xFE	; 254
    f1f8:	fc 01       	movw	r30, r24
    f1fa:	60 81       	ld	r22, Z
    f1fc:	71 81       	ldd	r23, Z+1	; 0x01
    f1fe:	82 81       	ldd	r24, Z+2	; 0x02
    f200:	93 81       	ldd	r25, Z+3	; 0x03
    f202:	20 e0       	ldi	r18, 0x00	; 0
    f204:	30 e0       	ldi	r19, 0x00	; 0
    f206:	40 e2       	ldi	r20, 0x20	; 32
    f208:	51 e4       	ldi	r21, 0x41	; 65
    f20a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f20e:	dc 01       	movw	r26, r24
    f210:	cb 01       	movw	r24, r22
    f212:	8e 01       	movw	r16, r28
    f214:	0f 5d       	subi	r16, 0xDF	; 223
    f216:	1e 4f       	sbci	r17, 0xFE	; 254
    f218:	bc 01       	movw	r22, r24
    f21a:	cd 01       	movw	r24, r26
    f21c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    f220:	dc 01       	movw	r26, r24
    f222:	cb 01       	movw	r24, r22
    f224:	f8 01       	movw	r30, r16
    f226:	91 83       	std	Z+1, r25	; 0x01
    f228:	80 83       	st	Z, r24
    f22a:	27 c0       	rjmp	.+78     	; 0xf27a <travel_path+0x2606>
    f22c:	ce 01       	movw	r24, r28
    f22e:	8d 5d       	subi	r24, 0xDD	; 221
    f230:	9e 4f       	sbci	r25, 0xFE	; 254
    f232:	20 e7       	ldi	r18, 0x70	; 112
    f234:	31 e0       	ldi	r19, 0x01	; 1
    f236:	fc 01       	movw	r30, r24
    f238:	31 83       	std	Z+1, r19	; 0x01
    f23a:	20 83       	st	Z, r18
    f23c:	ce 01       	movw	r24, r28
    f23e:	8d 5d       	subi	r24, 0xDD	; 221
    f240:	9e 4f       	sbci	r25, 0xFE	; 254
    f242:	fc 01       	movw	r30, r24
    f244:	80 81       	ld	r24, Z
    f246:	91 81       	ldd	r25, Z+1	; 0x01
    f248:	8c 01       	movw	r16, r24
    f24a:	c8 01       	movw	r24, r16
    f24c:	01 97       	sbiw	r24, 0x01	; 1
    f24e:	f1 f7       	brne	.-4      	; 0xf24c <travel_path+0x25d8>
    f250:	8c 01       	movw	r16, r24
    f252:	ce 01       	movw	r24, r28
    f254:	8d 5d       	subi	r24, 0xDD	; 221
    f256:	9e 4f       	sbci	r25, 0xFE	; 254
    f258:	fc 01       	movw	r30, r24
    f25a:	11 83       	std	Z+1, r17	; 0x01
    f25c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f25e:	ce 01       	movw	r24, r28
    f260:	8f 5d       	subi	r24, 0xDF	; 223
    f262:	9e 4f       	sbci	r25, 0xFE	; 254
    f264:	9e 01       	movw	r18, r28
    f266:	2f 5d       	subi	r18, 0xDF	; 223
    f268:	3e 4f       	sbci	r19, 0xFE	; 254
    f26a:	f9 01       	movw	r30, r18
    f26c:	20 81       	ld	r18, Z
    f26e:	31 81       	ldd	r19, Z+1	; 0x01
    f270:	21 50       	subi	r18, 0x01	; 1
    f272:	30 40       	sbci	r19, 0x00	; 0
    f274:	fc 01       	movw	r30, r24
    f276:	31 83       	std	Z+1, r19	; 0x01
    f278:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f27a:	ce 01       	movw	r24, r28
    f27c:	8f 5d       	subi	r24, 0xDF	; 223
    f27e:	9e 4f       	sbci	r25, 0xFE	; 254
    f280:	fc 01       	movw	r30, r24
    f282:	80 81       	ld	r24, Z
    f284:	91 81       	ldd	r25, Z+1	; 0x01
    f286:	00 97       	sbiw	r24, 0x00	; 0
    f288:	89 f6       	brne	.-94     	; 0xf22c <travel_path+0x25b8>
    f28a:	2f c0       	rjmp	.+94     	; 0xf2ea <travel_path+0x2676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f28c:	8e 01       	movw	r16, r28
    f28e:	0f 5d       	subi	r16, 0xDF	; 223
    f290:	1e 4f       	sbci	r17, 0xFE	; 254
    f292:	ce 01       	movw	r24, r28
    f294:	83 5e       	subi	r24, 0xE3	; 227
    f296:	9e 4f       	sbci	r25, 0xFE	; 254
    f298:	fc 01       	movw	r30, r24
    f29a:	60 81       	ld	r22, Z
    f29c:	71 81       	ldd	r23, Z+1	; 0x01
    f29e:	82 81       	ldd	r24, Z+2	; 0x02
    f2a0:	93 81       	ldd	r25, Z+3	; 0x03
    f2a2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    f2a6:	dc 01       	movw	r26, r24
    f2a8:	cb 01       	movw	r24, r22
    f2aa:	f8 01       	movw	r30, r16
    f2ac:	91 83       	std	Z+1, r25	; 0x01
    f2ae:	80 83       	st	Z, r24
    f2b0:	ce 01       	movw	r24, r28
    f2b2:	8b 5d       	subi	r24, 0xDB	; 219
    f2b4:	9e 4f       	sbci	r25, 0xFE	; 254
    f2b6:	9e 01       	movw	r18, r28
    f2b8:	2f 5d       	subi	r18, 0xDF	; 223
    f2ba:	3e 4f       	sbci	r19, 0xFE	; 254
    f2bc:	f9 01       	movw	r30, r18
    f2be:	20 81       	ld	r18, Z
    f2c0:	31 81       	ldd	r19, Z+1	; 0x01
    f2c2:	fc 01       	movw	r30, r24
    f2c4:	31 83       	std	Z+1, r19	; 0x01
    f2c6:	20 83       	st	Z, r18
    f2c8:	ce 01       	movw	r24, r28
    f2ca:	8b 5d       	subi	r24, 0xDB	; 219
    f2cc:	9e 4f       	sbci	r25, 0xFE	; 254
    f2ce:	fc 01       	movw	r30, r24
    f2d0:	80 81       	ld	r24, Z
    f2d2:	91 81       	ldd	r25, Z+1	; 0x01
    f2d4:	8c 01       	movw	r16, r24
    f2d6:	c8 01       	movw	r24, r16
    f2d8:	01 97       	sbiw	r24, 0x01	; 1
    f2da:	f1 f7       	brne	.-4      	; 0xf2d8 <travel_path+0x2664>
    f2dc:	8c 01       	movw	r16, r24
    f2de:	ce 01       	movw	r24, r28
    f2e0:	8b 5d       	subi	r24, 0xDB	; 219
    f2e2:	9e 4f       	sbci	r25, 0xFE	; 254
    f2e4:	fc 01       	movw	r30, r24
    f2e6:	11 83       	std	Z+1, r17	; 0x01
    f2e8:	00 83       	st	Z, r16
						_delay_ms(20);
						node++;
    f2ea:	80 91 63 03 	lds	r24, 0x0363
    f2ee:	90 91 64 03 	lds	r25, 0x0364
    f2f2:	01 96       	adiw	r24, 0x01	; 1
    f2f4:	90 93 64 03 	sts	0x0364, r25
    f2f8:	80 93 63 03 	sts	0x0363, r24
						pick_drop(master_path[node]);
    f2fc:	80 91 63 03 	lds	r24, 0x0363
    f300:	90 91 64 03 	lds	r25, 0x0364
    f304:	89 59       	subi	r24, 0x99	; 153
    f306:	9c 4f       	sbci	r25, 0xFC	; 252
    f308:	fc 01       	movw	r30, r24
    f30a:	80 81       	ld	r24, Z
    f30c:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
						node++;
    f310:	80 91 63 03 	lds	r24, 0x0363
    f314:	90 91 64 03 	lds	r25, 0x0364
    f318:	01 96       	adiw	r24, 0x01	; 1
    f31a:	90 93 64 03 	sts	0x0364, r25
    f31e:	80 93 63 03 	sts	0x0363, r24
						travel_path(master_path[node]);
    f322:	80 91 63 03 	lds	r24, 0x0363
    f326:	90 91 64 03 	lds	r25, 0x0364
    f32a:	89 59       	subi	r24, 0x99	; 153
    f32c:	9c 4f       	sbci	r25, 0xFC	; 252
    f32e:	fc 01       	movw	r30, r24
    f330:	80 81       	ld	r24, Z
    f332:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
			_delay_ms(20);
			forward_mm(30);
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
    f336:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
						pick_drop(master_path[node]);
						node++;
						travel_path(master_path[node]);
		}
		else
		forward();
    f33a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    f33e:	0c 94 89 81 	jmp	0x10312	; 0x10312 <travel_path+0x369e>
		}
		//else if(master_path[node+1]=='N'||master_path[node+1]=='L'||master_path[node+1]=='R'||master_path[node+1]=='U')//drop same as pick
		//{
			//
		//}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
    f342:	80 91 63 03 	lds	r24, 0x0363
    f346:	90 91 64 03 	lds	r25, 0x0364
    f34a:	01 97       	sbiw	r24, 0x01	; 1
    f34c:	89 59       	subi	r24, 0x99	; 153
    f34e:	9c 4f       	sbci	r25, 0xFC	; 252
    f350:	fc 01       	movw	r30, r24
    f352:	80 81       	ld	r24, Z
    f354:	84 34       	cpi	r24, 0x44	; 68
    f356:	09 f4       	brne	.+2      	; 0xf35a <travel_path+0x26e6>
    f358:	5b c0       	rjmp	.+182    	; 0xf410 <travel_path+0x279c>
    f35a:	80 91 63 03 	lds	r24, 0x0363
    f35e:	90 91 64 03 	lds	r25, 0x0364
    f362:	01 97       	sbiw	r24, 0x01	; 1
    f364:	89 59       	subi	r24, 0x99	; 153
    f366:	9c 4f       	sbci	r25, 0xFC	; 252
    f368:	fc 01       	movw	r30, r24
    f36a:	80 81       	ld	r24, Z
    f36c:	81 33       	cpi	r24, 0x31	; 49
    f36e:	09 f4       	brne	.+2      	; 0xf372 <travel_path+0x26fe>
    f370:	4f c0       	rjmp	.+158    	; 0xf410 <travel_path+0x279c>
    f372:	80 91 63 03 	lds	r24, 0x0363
    f376:	90 91 64 03 	lds	r25, 0x0364
    f37a:	01 97       	sbiw	r24, 0x01	; 1
    f37c:	89 59       	subi	r24, 0x99	; 153
    f37e:	9c 4f       	sbci	r25, 0xFC	; 252
    f380:	fc 01       	movw	r30, r24
    f382:	80 81       	ld	r24, Z
    f384:	82 33       	cpi	r24, 0x32	; 50
    f386:	09 f4       	brne	.+2      	; 0xf38a <travel_path+0x2716>
    f388:	43 c0       	rjmp	.+134    	; 0xf410 <travel_path+0x279c>
    f38a:	80 91 63 03 	lds	r24, 0x0363
    f38e:	90 91 64 03 	lds	r25, 0x0364
    f392:	01 97       	sbiw	r24, 0x01	; 1
    f394:	89 59       	subi	r24, 0x99	; 153
    f396:	9c 4f       	sbci	r25, 0xFC	; 252
    f398:	fc 01       	movw	r30, r24
    f39a:	80 81       	ld	r24, Z
    f39c:	83 33       	cpi	r24, 0x33	; 51
    f39e:	c1 f1       	breq	.+112    	; 0xf410 <travel_path+0x279c>
    f3a0:	80 91 63 03 	lds	r24, 0x0363
    f3a4:	90 91 64 03 	lds	r25, 0x0364
    f3a8:	01 97       	sbiw	r24, 0x01	; 1
    f3aa:	89 59       	subi	r24, 0x99	; 153
    f3ac:	9c 4f       	sbci	r25, 0xFC	; 252
    f3ae:	fc 01       	movw	r30, r24
    f3b0:	80 81       	ld	r24, Z
    f3b2:	84 33       	cpi	r24, 0x34	; 52
    f3b4:	69 f1       	breq	.+90     	; 0xf410 <travel_path+0x279c>
    f3b6:	80 91 63 03 	lds	r24, 0x0363
    f3ba:	90 91 64 03 	lds	r25, 0x0364
    f3be:	01 97       	sbiw	r24, 0x01	; 1
    f3c0:	89 59       	subi	r24, 0x99	; 153
    f3c2:	9c 4f       	sbci	r25, 0xFC	; 252
    f3c4:	fc 01       	movw	r30, r24
    f3c6:	80 81       	ld	r24, Z
    f3c8:	85 33       	cpi	r24, 0x35	; 53
    f3ca:	11 f1       	breq	.+68     	; 0xf410 <travel_path+0x279c>
    f3cc:	80 91 63 03 	lds	r24, 0x0363
    f3d0:	90 91 64 03 	lds	r25, 0x0364
    f3d4:	01 97       	sbiw	r24, 0x01	; 1
    f3d6:	89 59       	subi	r24, 0x99	; 153
    f3d8:	9c 4f       	sbci	r25, 0xFC	; 252
    f3da:	fc 01       	movw	r30, r24
    f3dc:	80 81       	ld	r24, Z
    f3de:	86 33       	cpi	r24, 0x36	; 54
    f3e0:	b9 f0       	breq	.+46     	; 0xf410 <travel_path+0x279c>
    f3e2:	80 91 63 03 	lds	r24, 0x0363
    f3e6:	90 91 64 03 	lds	r25, 0x0364
    f3ea:	01 97       	sbiw	r24, 0x01	; 1
    f3ec:	89 59       	subi	r24, 0x99	; 153
    f3ee:	9c 4f       	sbci	r25, 0xFC	; 252
    f3f0:	fc 01       	movw	r30, r24
    f3f2:	80 81       	ld	r24, Z
    f3f4:	87 33       	cpi	r24, 0x37	; 55
    f3f6:	61 f0       	breq	.+24     	; 0xf410 <travel_path+0x279c>
    f3f8:	80 91 63 03 	lds	r24, 0x0363
    f3fc:	90 91 64 03 	lds	r25, 0x0364
    f400:	01 97       	sbiw	r24, 0x01	; 1
    f402:	89 59       	subi	r24, 0x99	; 153
    f404:	9c 4f       	sbci	r25, 0xFC	; 252
    f406:	fc 01       	movw	r30, r24
    f408:	80 81       	ld	r24, Z
    f40a:	88 33       	cpi	r24, 0x38	; 56
    f40c:	09 f0       	breq	.+2      	; 0xf410 <travel_path+0x279c>
    f40e:	66 c1       	rjmp	.+716    	; 0xf6dc <travel_path+0x2a68>
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    f410:	80 91 63 03 	lds	r24, 0x0363
    f414:	90 91 64 03 	lds	r25, 0x0364
    f418:	01 96       	adiw	r24, 0x01	; 1
    f41a:	89 59       	subi	r24, 0x99	; 153
    f41c:	9c 4f       	sbci	r25, 0xFC	; 252
    f41e:	fc 01       	movw	r30, r24
    f420:	80 81       	ld	r24, Z
    f422:	84 34       	cpi	r24, 0x44	; 68
    f424:	09 f4       	brne	.+2      	; 0xf428 <travel_path+0x27b4>
    f426:	5b c0       	rjmp	.+182    	; 0xf4de <travel_path+0x286a>
    f428:	80 91 63 03 	lds	r24, 0x0363
    f42c:	90 91 64 03 	lds	r25, 0x0364
    f430:	01 96       	adiw	r24, 0x01	; 1
    f432:	89 59       	subi	r24, 0x99	; 153
    f434:	9c 4f       	sbci	r25, 0xFC	; 252
    f436:	fc 01       	movw	r30, r24
    f438:	80 81       	ld	r24, Z
    f43a:	81 33       	cpi	r24, 0x31	; 49
    f43c:	09 f4       	brne	.+2      	; 0xf440 <travel_path+0x27cc>
    f43e:	4f c0       	rjmp	.+158    	; 0xf4de <travel_path+0x286a>
    f440:	80 91 63 03 	lds	r24, 0x0363
    f444:	90 91 64 03 	lds	r25, 0x0364
    f448:	01 96       	adiw	r24, 0x01	; 1
    f44a:	89 59       	subi	r24, 0x99	; 153
    f44c:	9c 4f       	sbci	r25, 0xFC	; 252
    f44e:	fc 01       	movw	r30, r24
    f450:	80 81       	ld	r24, Z
    f452:	82 33       	cpi	r24, 0x32	; 50
    f454:	09 f4       	brne	.+2      	; 0xf458 <travel_path+0x27e4>
    f456:	43 c0       	rjmp	.+134    	; 0xf4de <travel_path+0x286a>
    f458:	80 91 63 03 	lds	r24, 0x0363
    f45c:	90 91 64 03 	lds	r25, 0x0364
    f460:	01 96       	adiw	r24, 0x01	; 1
    f462:	89 59       	subi	r24, 0x99	; 153
    f464:	9c 4f       	sbci	r25, 0xFC	; 252
    f466:	fc 01       	movw	r30, r24
    f468:	80 81       	ld	r24, Z
    f46a:	83 33       	cpi	r24, 0x33	; 51
    f46c:	c1 f1       	breq	.+112    	; 0xf4de <travel_path+0x286a>
    f46e:	80 91 63 03 	lds	r24, 0x0363
    f472:	90 91 64 03 	lds	r25, 0x0364
    f476:	01 96       	adiw	r24, 0x01	; 1
    f478:	89 59       	subi	r24, 0x99	; 153
    f47a:	9c 4f       	sbci	r25, 0xFC	; 252
    f47c:	fc 01       	movw	r30, r24
    f47e:	80 81       	ld	r24, Z
    f480:	84 33       	cpi	r24, 0x34	; 52
    f482:	69 f1       	breq	.+90     	; 0xf4de <travel_path+0x286a>
    f484:	80 91 63 03 	lds	r24, 0x0363
    f488:	90 91 64 03 	lds	r25, 0x0364
    f48c:	01 96       	adiw	r24, 0x01	; 1
    f48e:	89 59       	subi	r24, 0x99	; 153
    f490:	9c 4f       	sbci	r25, 0xFC	; 252
    f492:	fc 01       	movw	r30, r24
    f494:	80 81       	ld	r24, Z
    f496:	85 33       	cpi	r24, 0x35	; 53
    f498:	11 f1       	breq	.+68     	; 0xf4de <travel_path+0x286a>
    f49a:	80 91 63 03 	lds	r24, 0x0363
    f49e:	90 91 64 03 	lds	r25, 0x0364
    f4a2:	01 96       	adiw	r24, 0x01	; 1
    f4a4:	89 59       	subi	r24, 0x99	; 153
    f4a6:	9c 4f       	sbci	r25, 0xFC	; 252
    f4a8:	fc 01       	movw	r30, r24
    f4aa:	80 81       	ld	r24, Z
    f4ac:	86 33       	cpi	r24, 0x36	; 54
    f4ae:	b9 f0       	breq	.+46     	; 0xf4de <travel_path+0x286a>
    f4b0:	80 91 63 03 	lds	r24, 0x0363
    f4b4:	90 91 64 03 	lds	r25, 0x0364
    f4b8:	01 96       	adiw	r24, 0x01	; 1
    f4ba:	89 59       	subi	r24, 0x99	; 153
    f4bc:	9c 4f       	sbci	r25, 0xFC	; 252
    f4be:	fc 01       	movw	r30, r24
    f4c0:	80 81       	ld	r24, Z
    f4c2:	87 33       	cpi	r24, 0x37	; 55
    f4c4:	61 f0       	breq	.+24     	; 0xf4de <travel_path+0x286a>
    f4c6:	80 91 63 03 	lds	r24, 0x0363
    f4ca:	90 91 64 03 	lds	r25, 0x0364
    f4ce:	01 96       	adiw	r24, 0x01	; 1
    f4d0:	89 59       	subi	r24, 0x99	; 153
    f4d2:	9c 4f       	sbci	r25, 0xFC	; 252
    f4d4:	fc 01       	movw	r30, r24
    f4d6:	80 81       	ld	r24, Z
    f4d8:	88 33       	cpi	r24, 0x38	; 56
    f4da:	09 f0       	breq	.+2      	; 0xf4de <travel_path+0x286a>
    f4dc:	fb c0       	rjmp	.+502    	; 0xf6d4 <travel_path+0x2a60>
			{
				stop();
    f4de:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f4e2:	9e 01       	movw	r18, r28
    f4e4:	29 5d       	subi	r18, 0xD9	; 217
    f4e6:	3e 4f       	sbci	r19, 0xFE	; 254
    f4e8:	80 e0       	ldi	r24, 0x00	; 0
    f4ea:	90 e0       	ldi	r25, 0x00	; 0
    f4ec:	a0 ea       	ldi	r26, 0xA0	; 160
    f4ee:	b1 e4       	ldi	r27, 0x41	; 65
    f4f0:	f9 01       	movw	r30, r18
    f4f2:	80 83       	st	Z, r24
    f4f4:	91 83       	std	Z+1, r25	; 0x01
    f4f6:	a2 83       	std	Z+2, r26	; 0x02
    f4f8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f4fa:	8e 01       	movw	r16, r28
    f4fc:	05 5d       	subi	r16, 0xD5	; 213
    f4fe:	1e 4f       	sbci	r17, 0xFE	; 254
    f500:	ce 01       	movw	r24, r28
    f502:	89 5d       	subi	r24, 0xD9	; 217
    f504:	9e 4f       	sbci	r25, 0xFE	; 254
    f506:	fc 01       	movw	r30, r24
    f508:	60 81       	ld	r22, Z
    f50a:	71 81       	ldd	r23, Z+1	; 0x01
    f50c:	82 81       	ldd	r24, Z+2	; 0x02
    f50e:	93 81       	ldd	r25, Z+3	; 0x03
    f510:	26 e6       	ldi	r18, 0x66	; 102
    f512:	36 e6       	ldi	r19, 0x66	; 102
    f514:	46 e6       	ldi	r20, 0x66	; 102
    f516:	55 e4       	ldi	r21, 0x45	; 69
    f518:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f51c:	dc 01       	movw	r26, r24
    f51e:	cb 01       	movw	r24, r22
    f520:	f8 01       	movw	r30, r16
    f522:	80 83       	st	Z, r24
    f524:	91 83       	std	Z+1, r25	; 0x01
    f526:	a2 83       	std	Z+2, r26	; 0x02
    f528:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f52a:	ce 01       	movw	r24, r28
    f52c:	85 5d       	subi	r24, 0xD5	; 213
    f52e:	9e 4f       	sbci	r25, 0xFE	; 254
    f530:	11 e0       	ldi	r17, 0x01	; 1
    f532:	fc 01       	movw	r30, r24
    f534:	60 81       	ld	r22, Z
    f536:	71 81       	ldd	r23, Z+1	; 0x01
    f538:	82 81       	ldd	r24, Z+2	; 0x02
    f53a:	93 81       	ldd	r25, Z+3	; 0x03
    f53c:	20 e0       	ldi	r18, 0x00	; 0
    f53e:	30 e0       	ldi	r19, 0x00	; 0
    f540:	40 e8       	ldi	r20, 0x80	; 128
    f542:	5f e3       	ldi	r21, 0x3F	; 63
    f544:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    f548:	88 23       	and	r24, r24
    f54a:	0c f0       	brlt	.+2      	; 0xf54e <travel_path+0x28da>
    f54c:	10 e0       	ldi	r17, 0x00	; 0
    f54e:	11 23       	and	r17, r17
    f550:	49 f0       	breq	.+18     	; 0xf564 <travel_path+0x28f0>
		__ticks = 1;
    f552:	ce 01       	movw	r24, r28
    f554:	81 5d       	subi	r24, 0xD1	; 209
    f556:	9e 4f       	sbci	r25, 0xFE	; 254
    f558:	21 e0       	ldi	r18, 0x01	; 1
    f55a:	30 e0       	ldi	r19, 0x00	; 0
    f55c:	fc 01       	movw	r30, r24
    f55e:	31 83       	std	Z+1, r19	; 0x01
    f560:	20 83       	st	Z, r18
    f562:	74 c0       	rjmp	.+232    	; 0xf64c <travel_path+0x29d8>
	else if (__tmp > 65535)
    f564:	ce 01       	movw	r24, r28
    f566:	85 5d       	subi	r24, 0xD5	; 213
    f568:	9e 4f       	sbci	r25, 0xFE	; 254
    f56a:	11 e0       	ldi	r17, 0x01	; 1
    f56c:	fc 01       	movw	r30, r24
    f56e:	60 81       	ld	r22, Z
    f570:	71 81       	ldd	r23, Z+1	; 0x01
    f572:	82 81       	ldd	r24, Z+2	; 0x02
    f574:	93 81       	ldd	r25, Z+3	; 0x03
    f576:	20 e0       	ldi	r18, 0x00	; 0
    f578:	3f ef       	ldi	r19, 0xFF	; 255
    f57a:	4f e7       	ldi	r20, 0x7F	; 127
    f57c:	57 e4       	ldi	r21, 0x47	; 71
    f57e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    f582:	18 16       	cp	r1, r24
    f584:	0c f0       	brlt	.+2      	; 0xf588 <travel_path+0x2914>
    f586:	10 e0       	ldi	r17, 0x00	; 0
    f588:	11 23       	and	r17, r17
    f58a:	09 f4       	brne	.+2      	; 0xf58e <travel_path+0x291a>
    f58c:	4d c0       	rjmp	.+154    	; 0xf628 <travel_path+0x29b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f58e:	ce 01       	movw	r24, r28
    f590:	89 5d       	subi	r24, 0xD9	; 217
    f592:	9e 4f       	sbci	r25, 0xFE	; 254
    f594:	fc 01       	movw	r30, r24
    f596:	60 81       	ld	r22, Z
    f598:	71 81       	ldd	r23, Z+1	; 0x01
    f59a:	82 81       	ldd	r24, Z+2	; 0x02
    f59c:	93 81       	ldd	r25, Z+3	; 0x03
    f59e:	20 e0       	ldi	r18, 0x00	; 0
    f5a0:	30 e0       	ldi	r19, 0x00	; 0
    f5a2:	40 e2       	ldi	r20, 0x20	; 32
    f5a4:	51 e4       	ldi	r21, 0x41	; 65
    f5a6:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f5aa:	dc 01       	movw	r26, r24
    f5ac:	cb 01       	movw	r24, r22
    f5ae:	8e 01       	movw	r16, r28
    f5b0:	01 5d       	subi	r16, 0xD1	; 209
    f5b2:	1e 4f       	sbci	r17, 0xFE	; 254
    f5b4:	bc 01       	movw	r22, r24
    f5b6:	cd 01       	movw	r24, r26
    f5b8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    f5bc:	dc 01       	movw	r26, r24
    f5be:	cb 01       	movw	r24, r22
    f5c0:	f8 01       	movw	r30, r16
    f5c2:	91 83       	std	Z+1, r25	; 0x01
    f5c4:	80 83       	st	Z, r24
    f5c6:	27 c0       	rjmp	.+78     	; 0xf616 <travel_path+0x29a2>
    f5c8:	ce 01       	movw	r24, r28
    f5ca:	8f 5c       	subi	r24, 0xCF	; 207
    f5cc:	9e 4f       	sbci	r25, 0xFE	; 254
    f5ce:	20 e7       	ldi	r18, 0x70	; 112
    f5d0:	31 e0       	ldi	r19, 0x01	; 1
    f5d2:	fc 01       	movw	r30, r24
    f5d4:	31 83       	std	Z+1, r19	; 0x01
    f5d6:	20 83       	st	Z, r18
    f5d8:	ce 01       	movw	r24, r28
    f5da:	8f 5c       	subi	r24, 0xCF	; 207
    f5dc:	9e 4f       	sbci	r25, 0xFE	; 254
    f5de:	fc 01       	movw	r30, r24
    f5e0:	80 81       	ld	r24, Z
    f5e2:	91 81       	ldd	r25, Z+1	; 0x01
    f5e4:	8c 01       	movw	r16, r24
    f5e6:	c8 01       	movw	r24, r16
    f5e8:	01 97       	sbiw	r24, 0x01	; 1
    f5ea:	f1 f7       	brne	.-4      	; 0xf5e8 <travel_path+0x2974>
    f5ec:	8c 01       	movw	r16, r24
    f5ee:	ce 01       	movw	r24, r28
    f5f0:	8f 5c       	subi	r24, 0xCF	; 207
    f5f2:	9e 4f       	sbci	r25, 0xFE	; 254
    f5f4:	fc 01       	movw	r30, r24
    f5f6:	11 83       	std	Z+1, r17	; 0x01
    f5f8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f5fa:	ce 01       	movw	r24, r28
    f5fc:	81 5d       	subi	r24, 0xD1	; 209
    f5fe:	9e 4f       	sbci	r25, 0xFE	; 254
    f600:	9e 01       	movw	r18, r28
    f602:	21 5d       	subi	r18, 0xD1	; 209
    f604:	3e 4f       	sbci	r19, 0xFE	; 254
    f606:	f9 01       	movw	r30, r18
    f608:	20 81       	ld	r18, Z
    f60a:	31 81       	ldd	r19, Z+1	; 0x01
    f60c:	21 50       	subi	r18, 0x01	; 1
    f60e:	30 40       	sbci	r19, 0x00	; 0
    f610:	fc 01       	movw	r30, r24
    f612:	31 83       	std	Z+1, r19	; 0x01
    f614:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f616:	ce 01       	movw	r24, r28
    f618:	81 5d       	subi	r24, 0xD1	; 209
    f61a:	9e 4f       	sbci	r25, 0xFE	; 254
    f61c:	fc 01       	movw	r30, r24
    f61e:	80 81       	ld	r24, Z
    f620:	91 81       	ldd	r25, Z+1	; 0x01
    f622:	00 97       	sbiw	r24, 0x00	; 0
    f624:	89 f6       	brne	.-94     	; 0xf5c8 <travel_path+0x2954>
    f626:	2f c0       	rjmp	.+94     	; 0xf686 <travel_path+0x2a12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f628:	8e 01       	movw	r16, r28
    f62a:	01 5d       	subi	r16, 0xD1	; 209
    f62c:	1e 4f       	sbci	r17, 0xFE	; 254
    f62e:	ce 01       	movw	r24, r28
    f630:	85 5d       	subi	r24, 0xD5	; 213
    f632:	9e 4f       	sbci	r25, 0xFE	; 254
    f634:	fc 01       	movw	r30, r24
    f636:	60 81       	ld	r22, Z
    f638:	71 81       	ldd	r23, Z+1	; 0x01
    f63a:	82 81       	ldd	r24, Z+2	; 0x02
    f63c:	93 81       	ldd	r25, Z+3	; 0x03
    f63e:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    f642:	dc 01       	movw	r26, r24
    f644:	cb 01       	movw	r24, r22
    f646:	f8 01       	movw	r30, r16
    f648:	91 83       	std	Z+1, r25	; 0x01
    f64a:	80 83       	st	Z, r24
    f64c:	ce 01       	movw	r24, r28
    f64e:	8d 5c       	subi	r24, 0xCD	; 205
    f650:	9e 4f       	sbci	r25, 0xFE	; 254
    f652:	9e 01       	movw	r18, r28
    f654:	21 5d       	subi	r18, 0xD1	; 209
    f656:	3e 4f       	sbci	r19, 0xFE	; 254
    f658:	f9 01       	movw	r30, r18
    f65a:	20 81       	ld	r18, Z
    f65c:	31 81       	ldd	r19, Z+1	; 0x01
    f65e:	fc 01       	movw	r30, r24
    f660:	31 83       	std	Z+1, r19	; 0x01
    f662:	20 83       	st	Z, r18
    f664:	ce 01       	movw	r24, r28
    f666:	8d 5c       	subi	r24, 0xCD	; 205
    f668:	9e 4f       	sbci	r25, 0xFE	; 254
    f66a:	fc 01       	movw	r30, r24
    f66c:	80 81       	ld	r24, Z
    f66e:	91 81       	ldd	r25, Z+1	; 0x01
    f670:	8c 01       	movw	r16, r24
    f672:	c8 01       	movw	r24, r16
    f674:	01 97       	sbiw	r24, 0x01	; 1
    f676:	f1 f7       	brne	.-4      	; 0xf674 <travel_path+0x2a00>
    f678:	8c 01       	movw	r16, r24
    f67a:	ce 01       	movw	r24, r28
    f67c:	8d 5c       	subi	r24, 0xCD	; 205
    f67e:	9e 4f       	sbci	r25, 0xFE	; 254
    f680:	fc 01       	movw	r30, r24
    f682:	11 83       	std	Z+1, r17	; 0x01
    f684:	00 83       	st	Z, r16
				_delay_ms(20);
				node++;
    f686:	80 91 63 03 	lds	r24, 0x0363
    f68a:	90 91 64 03 	lds	r25, 0x0364
    f68e:	01 96       	adiw	r24, 0x01	; 1
    f690:	90 93 64 03 	sts	0x0364, r25
    f694:	80 93 63 03 	sts	0x0363, r24
				pick_drop(master_path[node]);
    f698:	80 91 63 03 	lds	r24, 0x0363
    f69c:	90 91 64 03 	lds	r25, 0x0364
    f6a0:	89 59       	subi	r24, 0x99	; 153
    f6a2:	9c 4f       	sbci	r25, 0xFC	; 252
    f6a4:	fc 01       	movw	r30, r24
    f6a6:	80 81       	ld	r24, Z
    f6a8:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
				node++;
    f6ac:	80 91 63 03 	lds	r24, 0x0363
    f6b0:	90 91 64 03 	lds	r25, 0x0364
    f6b4:	01 96       	adiw	r24, 0x01	; 1
    f6b6:	90 93 64 03 	sts	0x0364, r25
    f6ba:	80 93 63 03 	sts	0x0363, r24
				travel_path(master_path[node]);
    f6be:	80 91 63 03 	lds	r24, 0x0363
    f6c2:	90 91 64 03 	lds	r25, 0x0364
    f6c6:	89 59       	subi	r24, 0x99	; 153
    f6c8:	9c 4f       	sbci	r25, 0xFC	; 252
    f6ca:	fc 01       	movw	r30, r24
    f6cc:	80 81       	ld	r24, Z
    f6ce:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
		//else if(master_path[node+1]=='N'||master_path[node+1]=='L'||master_path[node+1]=='R'||master_path[node+1]=='U')//drop same as pick
		//{
			//
		//}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    f6d2:	1f c6       	rjmp	.+3134   	; 0x10312 <travel_path+0x369e>
				pick_drop(master_path[node]);
				node++;
				travel_path(master_path[node]);
			}
			else
			 forward();
    f6d4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
		//else if(master_path[node+1]=='N'||master_path[node+1]=='L'||master_path[node+1]=='R'||master_path[node+1]=='U')//drop same as pick
		//{
			//
		//}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    f6d8:	00 00       	nop
    f6da:	1b c6       	rjmp	.+3126   	; 0x10312 <travel_path+0x369e>
			else
			 forward();
		}
		else
		{
			stop();
    f6dc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f6e0:	9e 01       	movw	r18, r28
    f6e2:	2b 5c       	subi	r18, 0xCB	; 203
    f6e4:	3e 4f       	sbci	r19, 0xFE	; 254
    f6e6:	80 e0       	ldi	r24, 0x00	; 0
    f6e8:	90 e0       	ldi	r25, 0x00	; 0
    f6ea:	a0 ea       	ldi	r26, 0xA0	; 160
    f6ec:	b1 e4       	ldi	r27, 0x41	; 65
    f6ee:	f9 01       	movw	r30, r18
    f6f0:	80 83       	st	Z, r24
    f6f2:	91 83       	std	Z+1, r25	; 0x01
    f6f4:	a2 83       	std	Z+2, r26	; 0x02
    f6f6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f6f8:	8e 01       	movw	r16, r28
    f6fa:	07 5c       	subi	r16, 0xC7	; 199
    f6fc:	1e 4f       	sbci	r17, 0xFE	; 254
    f6fe:	ce 01       	movw	r24, r28
    f700:	8b 5c       	subi	r24, 0xCB	; 203
    f702:	9e 4f       	sbci	r25, 0xFE	; 254
    f704:	fc 01       	movw	r30, r24
    f706:	60 81       	ld	r22, Z
    f708:	71 81       	ldd	r23, Z+1	; 0x01
    f70a:	82 81       	ldd	r24, Z+2	; 0x02
    f70c:	93 81       	ldd	r25, Z+3	; 0x03
    f70e:	26 e6       	ldi	r18, 0x66	; 102
    f710:	36 e6       	ldi	r19, 0x66	; 102
    f712:	46 e6       	ldi	r20, 0x66	; 102
    f714:	55 e4       	ldi	r21, 0x45	; 69
    f716:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f71a:	dc 01       	movw	r26, r24
    f71c:	cb 01       	movw	r24, r22
    f71e:	f8 01       	movw	r30, r16
    f720:	80 83       	st	Z, r24
    f722:	91 83       	std	Z+1, r25	; 0x01
    f724:	a2 83       	std	Z+2, r26	; 0x02
    f726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f728:	ce 01       	movw	r24, r28
    f72a:	87 5c       	subi	r24, 0xC7	; 199
    f72c:	9e 4f       	sbci	r25, 0xFE	; 254
    f72e:	11 e0       	ldi	r17, 0x01	; 1
    f730:	fc 01       	movw	r30, r24
    f732:	60 81       	ld	r22, Z
    f734:	71 81       	ldd	r23, Z+1	; 0x01
    f736:	82 81       	ldd	r24, Z+2	; 0x02
    f738:	93 81       	ldd	r25, Z+3	; 0x03
    f73a:	20 e0       	ldi	r18, 0x00	; 0
    f73c:	30 e0       	ldi	r19, 0x00	; 0
    f73e:	40 e8       	ldi	r20, 0x80	; 128
    f740:	5f e3       	ldi	r21, 0x3F	; 63
    f742:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    f746:	88 23       	and	r24, r24
    f748:	0c f0       	brlt	.+2      	; 0xf74c <travel_path+0x2ad8>
    f74a:	10 e0       	ldi	r17, 0x00	; 0
    f74c:	11 23       	and	r17, r17
    f74e:	49 f0       	breq	.+18     	; 0xf762 <travel_path+0x2aee>
		__ticks = 1;
    f750:	ce 01       	movw	r24, r28
    f752:	83 5c       	subi	r24, 0xC3	; 195
    f754:	9e 4f       	sbci	r25, 0xFE	; 254
    f756:	21 e0       	ldi	r18, 0x01	; 1
    f758:	30 e0       	ldi	r19, 0x00	; 0
    f75a:	fc 01       	movw	r30, r24
    f75c:	31 83       	std	Z+1, r19	; 0x01
    f75e:	20 83       	st	Z, r18
    f760:	74 c0       	rjmp	.+232    	; 0xf84a <travel_path+0x2bd6>
	else if (__tmp > 65535)
    f762:	ce 01       	movw	r24, r28
    f764:	87 5c       	subi	r24, 0xC7	; 199
    f766:	9e 4f       	sbci	r25, 0xFE	; 254
    f768:	11 e0       	ldi	r17, 0x01	; 1
    f76a:	fc 01       	movw	r30, r24
    f76c:	60 81       	ld	r22, Z
    f76e:	71 81       	ldd	r23, Z+1	; 0x01
    f770:	82 81       	ldd	r24, Z+2	; 0x02
    f772:	93 81       	ldd	r25, Z+3	; 0x03
    f774:	20 e0       	ldi	r18, 0x00	; 0
    f776:	3f ef       	ldi	r19, 0xFF	; 255
    f778:	4f e7       	ldi	r20, 0x7F	; 127
    f77a:	57 e4       	ldi	r21, 0x47	; 71
    f77c:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    f780:	18 16       	cp	r1, r24
    f782:	0c f0       	brlt	.+2      	; 0xf786 <travel_path+0x2b12>
    f784:	10 e0       	ldi	r17, 0x00	; 0
    f786:	11 23       	and	r17, r17
    f788:	09 f4       	brne	.+2      	; 0xf78c <travel_path+0x2b18>
    f78a:	4d c0       	rjmp	.+154    	; 0xf826 <travel_path+0x2bb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f78c:	ce 01       	movw	r24, r28
    f78e:	8b 5c       	subi	r24, 0xCB	; 203
    f790:	9e 4f       	sbci	r25, 0xFE	; 254
    f792:	fc 01       	movw	r30, r24
    f794:	60 81       	ld	r22, Z
    f796:	71 81       	ldd	r23, Z+1	; 0x01
    f798:	82 81       	ldd	r24, Z+2	; 0x02
    f79a:	93 81       	ldd	r25, Z+3	; 0x03
    f79c:	20 e0       	ldi	r18, 0x00	; 0
    f79e:	30 e0       	ldi	r19, 0x00	; 0
    f7a0:	40 e2       	ldi	r20, 0x20	; 32
    f7a2:	51 e4       	ldi	r21, 0x41	; 65
    f7a4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f7a8:	dc 01       	movw	r26, r24
    f7aa:	cb 01       	movw	r24, r22
    f7ac:	8e 01       	movw	r16, r28
    f7ae:	03 5c       	subi	r16, 0xC3	; 195
    f7b0:	1e 4f       	sbci	r17, 0xFE	; 254
    f7b2:	bc 01       	movw	r22, r24
    f7b4:	cd 01       	movw	r24, r26
    f7b6:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    f7ba:	dc 01       	movw	r26, r24
    f7bc:	cb 01       	movw	r24, r22
    f7be:	f8 01       	movw	r30, r16
    f7c0:	91 83       	std	Z+1, r25	; 0x01
    f7c2:	80 83       	st	Z, r24
    f7c4:	27 c0       	rjmp	.+78     	; 0xf814 <travel_path+0x2ba0>
    f7c6:	ce 01       	movw	r24, r28
    f7c8:	81 5c       	subi	r24, 0xC1	; 193
    f7ca:	9e 4f       	sbci	r25, 0xFE	; 254
    f7cc:	20 e7       	ldi	r18, 0x70	; 112
    f7ce:	31 e0       	ldi	r19, 0x01	; 1
    f7d0:	fc 01       	movw	r30, r24
    f7d2:	31 83       	std	Z+1, r19	; 0x01
    f7d4:	20 83       	st	Z, r18
    f7d6:	ce 01       	movw	r24, r28
    f7d8:	81 5c       	subi	r24, 0xC1	; 193
    f7da:	9e 4f       	sbci	r25, 0xFE	; 254
    f7dc:	fc 01       	movw	r30, r24
    f7de:	80 81       	ld	r24, Z
    f7e0:	91 81       	ldd	r25, Z+1	; 0x01
    f7e2:	8c 01       	movw	r16, r24
    f7e4:	c8 01       	movw	r24, r16
    f7e6:	01 97       	sbiw	r24, 0x01	; 1
    f7e8:	f1 f7       	brne	.-4      	; 0xf7e6 <travel_path+0x2b72>
    f7ea:	8c 01       	movw	r16, r24
    f7ec:	ce 01       	movw	r24, r28
    f7ee:	81 5c       	subi	r24, 0xC1	; 193
    f7f0:	9e 4f       	sbci	r25, 0xFE	; 254
    f7f2:	fc 01       	movw	r30, r24
    f7f4:	11 83       	std	Z+1, r17	; 0x01
    f7f6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f7f8:	ce 01       	movw	r24, r28
    f7fa:	83 5c       	subi	r24, 0xC3	; 195
    f7fc:	9e 4f       	sbci	r25, 0xFE	; 254
    f7fe:	9e 01       	movw	r18, r28
    f800:	23 5c       	subi	r18, 0xC3	; 195
    f802:	3e 4f       	sbci	r19, 0xFE	; 254
    f804:	f9 01       	movw	r30, r18
    f806:	20 81       	ld	r18, Z
    f808:	31 81       	ldd	r19, Z+1	; 0x01
    f80a:	21 50       	subi	r18, 0x01	; 1
    f80c:	30 40       	sbci	r19, 0x00	; 0
    f80e:	fc 01       	movw	r30, r24
    f810:	31 83       	std	Z+1, r19	; 0x01
    f812:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f814:	ce 01       	movw	r24, r28
    f816:	83 5c       	subi	r24, 0xC3	; 195
    f818:	9e 4f       	sbci	r25, 0xFE	; 254
    f81a:	fc 01       	movw	r30, r24
    f81c:	80 81       	ld	r24, Z
    f81e:	91 81       	ldd	r25, Z+1	; 0x01
    f820:	00 97       	sbiw	r24, 0x00	; 0
    f822:	89 f6       	brne	.-94     	; 0xf7c6 <travel_path+0x2b52>
    f824:	2f c0       	rjmp	.+94     	; 0xf884 <travel_path+0x2c10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f826:	8e 01       	movw	r16, r28
    f828:	03 5c       	subi	r16, 0xC3	; 195
    f82a:	1e 4f       	sbci	r17, 0xFE	; 254
    f82c:	ce 01       	movw	r24, r28
    f82e:	87 5c       	subi	r24, 0xC7	; 199
    f830:	9e 4f       	sbci	r25, 0xFE	; 254
    f832:	fc 01       	movw	r30, r24
    f834:	60 81       	ld	r22, Z
    f836:	71 81       	ldd	r23, Z+1	; 0x01
    f838:	82 81       	ldd	r24, Z+2	; 0x02
    f83a:	93 81       	ldd	r25, Z+3	; 0x03
    f83c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    f840:	dc 01       	movw	r26, r24
    f842:	cb 01       	movw	r24, r22
    f844:	f8 01       	movw	r30, r16
    f846:	91 83       	std	Z+1, r25	; 0x01
    f848:	80 83       	st	Z, r24
    f84a:	ce 01       	movw	r24, r28
    f84c:	8f 5b       	subi	r24, 0xBF	; 191
    f84e:	9e 4f       	sbci	r25, 0xFE	; 254
    f850:	9e 01       	movw	r18, r28
    f852:	23 5c       	subi	r18, 0xC3	; 195
    f854:	3e 4f       	sbci	r19, 0xFE	; 254
    f856:	f9 01       	movw	r30, r18
    f858:	20 81       	ld	r18, Z
    f85a:	31 81       	ldd	r19, Z+1	; 0x01
    f85c:	fc 01       	movw	r30, r24
    f85e:	31 83       	std	Z+1, r19	; 0x01
    f860:	20 83       	st	Z, r18
    f862:	ce 01       	movw	r24, r28
    f864:	8f 5b       	subi	r24, 0xBF	; 191
    f866:	9e 4f       	sbci	r25, 0xFE	; 254
    f868:	fc 01       	movw	r30, r24
    f86a:	80 81       	ld	r24, Z
    f86c:	91 81       	ldd	r25, Z+1	; 0x01
    f86e:	8c 01       	movw	r16, r24
    f870:	c8 01       	movw	r24, r16
    f872:	01 97       	sbiw	r24, 0x01	; 1
    f874:	f1 f7       	brne	.-4      	; 0xf872 <travel_path+0x2bfe>
    f876:	8c 01       	movw	r16, r24
    f878:	ce 01       	movw	r24, r28
    f87a:	8f 5b       	subi	r24, 0xBF	; 191
    f87c:	9e 4f       	sbci	r25, 0xFE	; 254
    f87e:	fc 01       	movw	r30, r24
    f880:	11 83       	std	Z+1, r17	; 0x01
    f882:	00 83       	st	Z, r16
			_delay_ms(20);
			forward_mm(30);
    f884:	8e e1       	ldi	r24, 0x1E	; 30
    f886:	90 e0       	ldi	r25, 0x00	; 0
    f888:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
			node++;
    f88c:	80 91 63 03 	lds	r24, 0x0363
    f890:	90 91 64 03 	lds	r25, 0x0364
    f894:	01 96       	adiw	r24, 0x01	; 1
    f896:	90 93 64 03 	sts	0x0364, r25
    f89a:	80 93 63 03 	sts	0x0363, r24
			pick_drop(master_path[node]);
    f89e:	80 91 63 03 	lds	r24, 0x0363
    f8a2:	90 91 64 03 	lds	r25, 0x0364
    f8a6:	89 59       	subi	r24, 0x99	; 153
    f8a8:	9c 4f       	sbci	r25, 0xFC	; 252
    f8aa:	fc 01       	movw	r30, r24
    f8ac:	80 81       	ld	r24, Z
    f8ae:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    f8b2:	80 91 63 03 	lds	r24, 0x0363
    f8b6:	90 91 64 03 	lds	r25, 0x0364
    f8ba:	01 96       	adiw	r24, 0x01	; 1
    f8bc:	90 93 64 03 	sts	0x0364, r25
    f8c0:	80 93 63 03 	sts	0x0363, r24
			travel_path(master_path[node]);
    f8c4:	80 91 63 03 	lds	r24, 0x0363
    f8c8:	90 91 64 03 	lds	r25, 0x0364
    f8cc:	89 59       	subi	r24, 0x99	; 153
    f8ce:	9c 4f       	sbci	r25, 0xFC	; 252
    f8d0:	fc 01       	movw	r30, r24
    f8d2:	80 81       	ld	r24, Z
    f8d4:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
    f8d8:	1c c5       	rjmp	.+2616   	; 0x10312 <travel_path+0x369e>
		}
		}
	else if(pos_val=='U'){
    f8da:	ce 01       	movw	r24, r28
    f8dc:	87 57       	subi	r24, 0x77	; 119
    f8de:	9e 4f       	sbci	r25, 0xFE	; 254
    f8e0:	fc 01       	movw	r30, r24
    f8e2:	80 81       	ld	r24, Z
    f8e4:	85 35       	cpi	r24, 0x55	; 85
    f8e6:	09 f0       	breq	.+2      	; 0xf8ea <travel_path+0x2c76>
    f8e8:	05 c5       	rjmp	.+2570   	; 0x102f4 <travel_path+0x3680>
		if(master_path[node+1]=='D'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    f8ea:	80 91 63 03 	lds	r24, 0x0363
    f8ee:	90 91 64 03 	lds	r25, 0x0364
    f8f2:	01 96       	adiw	r24, 0x01	; 1
    f8f4:	89 59       	subi	r24, 0x99	; 153
    f8f6:	9c 4f       	sbci	r25, 0xFC	; 252
    f8f8:	fc 01       	movw	r30, r24
    f8fa:	80 81       	ld	r24, Z
    f8fc:	84 34       	cpi	r24, 0x44	; 68
    f8fe:	09 f4       	brne	.+2      	; 0xf902 <travel_path+0x2c8e>
    f900:	43 c0       	rjmp	.+134    	; 0xf988 <travel_path+0x2d14>
    f902:	80 91 63 03 	lds	r24, 0x0363
    f906:	90 91 64 03 	lds	r25, 0x0364
    f90a:	01 96       	adiw	r24, 0x01	; 1
    f90c:	89 59       	subi	r24, 0x99	; 153
    f90e:	9c 4f       	sbci	r25, 0xFC	; 252
    f910:	fc 01       	movw	r30, r24
    f912:	80 81       	ld	r24, Z
    f914:	83 33       	cpi	r24, 0x33	; 51
    f916:	c1 f1       	breq	.+112    	; 0xf988 <travel_path+0x2d14>
    f918:	80 91 63 03 	lds	r24, 0x0363
    f91c:	90 91 64 03 	lds	r25, 0x0364
    f920:	01 96       	adiw	r24, 0x01	; 1
    f922:	89 59       	subi	r24, 0x99	; 153
    f924:	9c 4f       	sbci	r25, 0xFC	; 252
    f926:	fc 01       	movw	r30, r24
    f928:	80 81       	ld	r24, Z
    f92a:	84 33       	cpi	r24, 0x34	; 52
    f92c:	69 f1       	breq	.+90     	; 0xf988 <travel_path+0x2d14>
    f92e:	80 91 63 03 	lds	r24, 0x0363
    f932:	90 91 64 03 	lds	r25, 0x0364
    f936:	01 96       	adiw	r24, 0x01	; 1
    f938:	89 59       	subi	r24, 0x99	; 153
    f93a:	9c 4f       	sbci	r25, 0xFC	; 252
    f93c:	fc 01       	movw	r30, r24
    f93e:	80 81       	ld	r24, Z
    f940:	85 33       	cpi	r24, 0x35	; 53
    f942:	11 f1       	breq	.+68     	; 0xf988 <travel_path+0x2d14>
    f944:	80 91 63 03 	lds	r24, 0x0363
    f948:	90 91 64 03 	lds	r25, 0x0364
    f94c:	01 96       	adiw	r24, 0x01	; 1
    f94e:	89 59       	subi	r24, 0x99	; 153
    f950:	9c 4f       	sbci	r25, 0xFC	; 252
    f952:	fc 01       	movw	r30, r24
    f954:	80 81       	ld	r24, Z
    f956:	86 33       	cpi	r24, 0x36	; 54
    f958:	b9 f0       	breq	.+46     	; 0xf988 <travel_path+0x2d14>
    f95a:	80 91 63 03 	lds	r24, 0x0363
    f95e:	90 91 64 03 	lds	r25, 0x0364
    f962:	01 96       	adiw	r24, 0x01	; 1
    f964:	89 59       	subi	r24, 0x99	; 153
    f966:	9c 4f       	sbci	r25, 0xFC	; 252
    f968:	fc 01       	movw	r30, r24
    f96a:	80 81       	ld	r24, Z
    f96c:	87 33       	cpi	r24, 0x37	; 55
    f96e:	61 f0       	breq	.+24     	; 0xf988 <travel_path+0x2d14>
    f970:	80 91 63 03 	lds	r24, 0x0363
    f974:	90 91 64 03 	lds	r25, 0x0364
    f978:	01 96       	adiw	r24, 0x01	; 1
    f97a:	89 59       	subi	r24, 0x99	; 153
    f97c:	9c 4f       	sbci	r25, 0xFC	; 252
    f97e:	fc 01       	movw	r30, r24
    f980:	80 81       	ld	r24, Z
    f982:	88 33       	cpi	r24, 0x38	; 56
    f984:	09 f0       	breq	.+2      	; 0xf988 <travel_path+0x2d14>
    f986:	fd c0       	rjmp	.+506    	; 0xfb82 <travel_path+0x2f0e>
		{
			stop();
    f988:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f98c:	9e 01       	movw	r18, r28
    f98e:	2d 5b       	subi	r18, 0xBD	; 189
    f990:	3e 4f       	sbci	r19, 0xFE	; 254
    f992:	80 e0       	ldi	r24, 0x00	; 0
    f994:	90 e0       	ldi	r25, 0x00	; 0
    f996:	a0 ea       	ldi	r26, 0xA0	; 160
    f998:	b1 e4       	ldi	r27, 0x41	; 65
    f99a:	f9 01       	movw	r30, r18
    f99c:	80 83       	st	Z, r24
    f99e:	91 83       	std	Z+1, r25	; 0x01
    f9a0:	a2 83       	std	Z+2, r26	; 0x02
    f9a2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f9a4:	8e 01       	movw	r16, r28
    f9a6:	09 5b       	subi	r16, 0xB9	; 185
    f9a8:	1e 4f       	sbci	r17, 0xFE	; 254
    f9aa:	ce 01       	movw	r24, r28
    f9ac:	8d 5b       	subi	r24, 0xBD	; 189
    f9ae:	9e 4f       	sbci	r25, 0xFE	; 254
    f9b0:	fc 01       	movw	r30, r24
    f9b2:	60 81       	ld	r22, Z
    f9b4:	71 81       	ldd	r23, Z+1	; 0x01
    f9b6:	82 81       	ldd	r24, Z+2	; 0x02
    f9b8:	93 81       	ldd	r25, Z+3	; 0x03
    f9ba:	26 e6       	ldi	r18, 0x66	; 102
    f9bc:	36 e6       	ldi	r19, 0x66	; 102
    f9be:	46 e6       	ldi	r20, 0x66	; 102
    f9c0:	55 e4       	ldi	r21, 0x45	; 69
    f9c2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    f9c6:	dc 01       	movw	r26, r24
    f9c8:	cb 01       	movw	r24, r22
    f9ca:	f8 01       	movw	r30, r16
    f9cc:	80 83       	st	Z, r24
    f9ce:	91 83       	std	Z+1, r25	; 0x01
    f9d0:	a2 83       	std	Z+2, r26	; 0x02
    f9d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f9d4:	ce 01       	movw	r24, r28
    f9d6:	89 5b       	subi	r24, 0xB9	; 185
    f9d8:	9e 4f       	sbci	r25, 0xFE	; 254
    f9da:	11 e0       	ldi	r17, 0x01	; 1
    f9dc:	fc 01       	movw	r30, r24
    f9de:	60 81       	ld	r22, Z
    f9e0:	71 81       	ldd	r23, Z+1	; 0x01
    f9e2:	82 81       	ldd	r24, Z+2	; 0x02
    f9e4:	93 81       	ldd	r25, Z+3	; 0x03
    f9e6:	20 e0       	ldi	r18, 0x00	; 0
    f9e8:	30 e0       	ldi	r19, 0x00	; 0
    f9ea:	40 e8       	ldi	r20, 0x80	; 128
    f9ec:	5f e3       	ldi	r21, 0x3F	; 63
    f9ee:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    f9f2:	88 23       	and	r24, r24
    f9f4:	0c f0       	brlt	.+2      	; 0xf9f8 <travel_path+0x2d84>
    f9f6:	10 e0       	ldi	r17, 0x00	; 0
    f9f8:	11 23       	and	r17, r17
    f9fa:	49 f0       	breq	.+18     	; 0xfa0e <travel_path+0x2d9a>
		__ticks = 1;
    f9fc:	ce 01       	movw	r24, r28
    f9fe:	85 5b       	subi	r24, 0xB5	; 181
    fa00:	9e 4f       	sbci	r25, 0xFE	; 254
    fa02:	21 e0       	ldi	r18, 0x01	; 1
    fa04:	30 e0       	ldi	r19, 0x00	; 0
    fa06:	fc 01       	movw	r30, r24
    fa08:	31 83       	std	Z+1, r19	; 0x01
    fa0a:	20 83       	st	Z, r18
    fa0c:	74 c0       	rjmp	.+232    	; 0xfaf6 <travel_path+0x2e82>
	else if (__tmp > 65535)
    fa0e:	ce 01       	movw	r24, r28
    fa10:	89 5b       	subi	r24, 0xB9	; 185
    fa12:	9e 4f       	sbci	r25, 0xFE	; 254
    fa14:	11 e0       	ldi	r17, 0x01	; 1
    fa16:	fc 01       	movw	r30, r24
    fa18:	60 81       	ld	r22, Z
    fa1a:	71 81       	ldd	r23, Z+1	; 0x01
    fa1c:	82 81       	ldd	r24, Z+2	; 0x02
    fa1e:	93 81       	ldd	r25, Z+3	; 0x03
    fa20:	20 e0       	ldi	r18, 0x00	; 0
    fa22:	3f ef       	ldi	r19, 0xFF	; 255
    fa24:	4f e7       	ldi	r20, 0x7F	; 127
    fa26:	57 e4       	ldi	r21, 0x47	; 71
    fa28:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    fa2c:	18 16       	cp	r1, r24
    fa2e:	0c f0       	brlt	.+2      	; 0xfa32 <travel_path+0x2dbe>
    fa30:	10 e0       	ldi	r17, 0x00	; 0
    fa32:	11 23       	and	r17, r17
    fa34:	09 f4       	brne	.+2      	; 0xfa38 <travel_path+0x2dc4>
    fa36:	4d c0       	rjmp	.+154    	; 0xfad2 <travel_path+0x2e5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fa38:	ce 01       	movw	r24, r28
    fa3a:	8d 5b       	subi	r24, 0xBD	; 189
    fa3c:	9e 4f       	sbci	r25, 0xFE	; 254
    fa3e:	fc 01       	movw	r30, r24
    fa40:	60 81       	ld	r22, Z
    fa42:	71 81       	ldd	r23, Z+1	; 0x01
    fa44:	82 81       	ldd	r24, Z+2	; 0x02
    fa46:	93 81       	ldd	r25, Z+3	; 0x03
    fa48:	20 e0       	ldi	r18, 0x00	; 0
    fa4a:	30 e0       	ldi	r19, 0x00	; 0
    fa4c:	40 e2       	ldi	r20, 0x20	; 32
    fa4e:	51 e4       	ldi	r21, 0x41	; 65
    fa50:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    fa54:	dc 01       	movw	r26, r24
    fa56:	cb 01       	movw	r24, r22
    fa58:	8e 01       	movw	r16, r28
    fa5a:	05 5b       	subi	r16, 0xB5	; 181
    fa5c:	1e 4f       	sbci	r17, 0xFE	; 254
    fa5e:	bc 01       	movw	r22, r24
    fa60:	cd 01       	movw	r24, r26
    fa62:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    fa66:	dc 01       	movw	r26, r24
    fa68:	cb 01       	movw	r24, r22
    fa6a:	f8 01       	movw	r30, r16
    fa6c:	91 83       	std	Z+1, r25	; 0x01
    fa6e:	80 83       	st	Z, r24
    fa70:	27 c0       	rjmp	.+78     	; 0xfac0 <travel_path+0x2e4c>
    fa72:	ce 01       	movw	r24, r28
    fa74:	83 5b       	subi	r24, 0xB3	; 179
    fa76:	9e 4f       	sbci	r25, 0xFE	; 254
    fa78:	20 e7       	ldi	r18, 0x70	; 112
    fa7a:	31 e0       	ldi	r19, 0x01	; 1
    fa7c:	fc 01       	movw	r30, r24
    fa7e:	31 83       	std	Z+1, r19	; 0x01
    fa80:	20 83       	st	Z, r18
    fa82:	ce 01       	movw	r24, r28
    fa84:	83 5b       	subi	r24, 0xB3	; 179
    fa86:	9e 4f       	sbci	r25, 0xFE	; 254
    fa88:	fc 01       	movw	r30, r24
    fa8a:	80 81       	ld	r24, Z
    fa8c:	91 81       	ldd	r25, Z+1	; 0x01
    fa8e:	8c 01       	movw	r16, r24
    fa90:	c8 01       	movw	r24, r16
    fa92:	01 97       	sbiw	r24, 0x01	; 1
    fa94:	f1 f7       	brne	.-4      	; 0xfa92 <travel_path+0x2e1e>
    fa96:	8c 01       	movw	r16, r24
    fa98:	ce 01       	movw	r24, r28
    fa9a:	83 5b       	subi	r24, 0xB3	; 179
    fa9c:	9e 4f       	sbci	r25, 0xFE	; 254
    fa9e:	fc 01       	movw	r30, r24
    faa0:	11 83       	std	Z+1, r17	; 0x01
    faa2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    faa4:	ce 01       	movw	r24, r28
    faa6:	85 5b       	subi	r24, 0xB5	; 181
    faa8:	9e 4f       	sbci	r25, 0xFE	; 254
    faaa:	9e 01       	movw	r18, r28
    faac:	25 5b       	subi	r18, 0xB5	; 181
    faae:	3e 4f       	sbci	r19, 0xFE	; 254
    fab0:	f9 01       	movw	r30, r18
    fab2:	20 81       	ld	r18, Z
    fab4:	31 81       	ldd	r19, Z+1	; 0x01
    fab6:	21 50       	subi	r18, 0x01	; 1
    fab8:	30 40       	sbci	r19, 0x00	; 0
    faba:	fc 01       	movw	r30, r24
    fabc:	31 83       	std	Z+1, r19	; 0x01
    fabe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fac0:	ce 01       	movw	r24, r28
    fac2:	85 5b       	subi	r24, 0xB5	; 181
    fac4:	9e 4f       	sbci	r25, 0xFE	; 254
    fac6:	fc 01       	movw	r30, r24
    fac8:	80 81       	ld	r24, Z
    faca:	91 81       	ldd	r25, Z+1	; 0x01
    facc:	00 97       	sbiw	r24, 0x00	; 0
    face:	89 f6       	brne	.-94     	; 0xfa72 <travel_path+0x2dfe>
    fad0:	2f c0       	rjmp	.+94     	; 0xfb30 <travel_path+0x2ebc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fad2:	8e 01       	movw	r16, r28
    fad4:	05 5b       	subi	r16, 0xB5	; 181
    fad6:	1e 4f       	sbci	r17, 0xFE	; 254
    fad8:	ce 01       	movw	r24, r28
    fada:	89 5b       	subi	r24, 0xB9	; 185
    fadc:	9e 4f       	sbci	r25, 0xFE	; 254
    fade:	fc 01       	movw	r30, r24
    fae0:	60 81       	ld	r22, Z
    fae2:	71 81       	ldd	r23, Z+1	; 0x01
    fae4:	82 81       	ldd	r24, Z+2	; 0x02
    fae6:	93 81       	ldd	r25, Z+3	; 0x03
    fae8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    faec:	dc 01       	movw	r26, r24
    faee:	cb 01       	movw	r24, r22
    faf0:	f8 01       	movw	r30, r16
    faf2:	91 83       	std	Z+1, r25	; 0x01
    faf4:	80 83       	st	Z, r24
    faf6:	ce 01       	movw	r24, r28
    faf8:	81 5b       	subi	r24, 0xB1	; 177
    fafa:	9e 4f       	sbci	r25, 0xFE	; 254
    fafc:	9e 01       	movw	r18, r28
    fafe:	25 5b       	subi	r18, 0xB5	; 181
    fb00:	3e 4f       	sbci	r19, 0xFE	; 254
    fb02:	f9 01       	movw	r30, r18
    fb04:	20 81       	ld	r18, Z
    fb06:	31 81       	ldd	r19, Z+1	; 0x01
    fb08:	fc 01       	movw	r30, r24
    fb0a:	31 83       	std	Z+1, r19	; 0x01
    fb0c:	20 83       	st	Z, r18
    fb0e:	ce 01       	movw	r24, r28
    fb10:	81 5b       	subi	r24, 0xB1	; 177
    fb12:	9e 4f       	sbci	r25, 0xFE	; 254
    fb14:	fc 01       	movw	r30, r24
    fb16:	80 81       	ld	r24, Z
    fb18:	91 81       	ldd	r25, Z+1	; 0x01
    fb1a:	8c 01       	movw	r16, r24
    fb1c:	c8 01       	movw	r24, r16
    fb1e:	01 97       	sbiw	r24, 0x01	; 1
    fb20:	f1 f7       	brne	.-4      	; 0xfb1e <travel_path+0x2eaa>
    fb22:	8c 01       	movw	r16, r24
    fb24:	ce 01       	movw	r24, r28
    fb26:	81 5b       	subi	r24, 0xB1	; 177
    fb28:	9e 4f       	sbci	r25, 0xFE	; 254
    fb2a:	fc 01       	movw	r30, r24
    fb2c:	11 83       	std	Z+1, r17	; 0x01
    fb2e:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
    fb30:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
			node++;
    fb34:	80 91 63 03 	lds	r24, 0x0363
    fb38:	90 91 64 03 	lds	r25, 0x0364
    fb3c:	01 96       	adiw	r24, 0x01	; 1
    fb3e:	90 93 64 03 	sts	0x0364, r25
    fb42:	80 93 63 03 	sts	0x0363, r24
			pick_drop(master_path[node]);
    fb46:	80 91 63 03 	lds	r24, 0x0363
    fb4a:	90 91 64 03 	lds	r25, 0x0364
    fb4e:	89 59       	subi	r24, 0x99	; 153
    fb50:	9c 4f       	sbci	r25, 0xFC	; 252
    fb52:	fc 01       	movw	r30, r24
    fb54:	80 81       	ld	r24, Z
    fb56:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    fb5a:	80 91 63 03 	lds	r24, 0x0363
    fb5e:	90 91 64 03 	lds	r25, 0x0364
    fb62:	01 96       	adiw	r24, 0x01	; 1
    fb64:	90 93 64 03 	sts	0x0364, r25
    fb68:	80 93 63 03 	sts	0x0363, r24
			travel_path(master_path[node]);
    fb6c:	80 91 63 03 	lds	r24, 0x0363
    fb70:	90 91 64 03 	lds	r25, 0x0364
    fb74:	89 59       	subi	r24, 0x99	; 153
    fb76:	9c 4f       	sbci	r25, 0xFC	; 252
    fb78:	fc 01       	movw	r30, r24
    fb7a:	80 81       	ld	r24, Z
    fb7c:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
    fb80:	c8 c3       	rjmp	.+1936   	; 0x10312 <travel_path+0x369e>
		}
		else if(master_path[node+1]=='1')
    fb82:	80 91 63 03 	lds	r24, 0x0363
    fb86:	90 91 64 03 	lds	r25, 0x0364
    fb8a:	01 96       	adiw	r24, 0x01	; 1
    fb8c:	89 59       	subi	r24, 0x99	; 153
    fb8e:	9c 4f       	sbci	r25, 0xFC	; 252
    fb90:	fc 01       	movw	r30, r24
    fb92:	80 81       	ld	r24, Z
    fb94:	81 33       	cpi	r24, 0x31	; 49
    fb96:	09 f0       	breq	.+2      	; 0xfb9a <travel_path+0x2f26>
    fb98:	cf c1       	rjmp	.+926    	; 0xff38 <travel_path+0x32c4>
		{
			stop();
    fb9a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    fb9e:	9e 01       	movw	r18, r28
    fba0:	2f 5a       	subi	r18, 0xAF	; 175
    fba2:	3e 4f       	sbci	r19, 0xFE	; 254
    fba4:	80 e0       	ldi	r24, 0x00	; 0
    fba6:	90 e0       	ldi	r25, 0x00	; 0
    fba8:	a0 ea       	ldi	r26, 0xA0	; 160
    fbaa:	b1 e4       	ldi	r27, 0x41	; 65
    fbac:	f9 01       	movw	r30, r18
    fbae:	80 83       	st	Z, r24
    fbb0:	91 83       	std	Z+1, r25	; 0x01
    fbb2:	a2 83       	std	Z+2, r26	; 0x02
    fbb4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fbb6:	8e 01       	movw	r16, r28
    fbb8:	0b 5a       	subi	r16, 0xAB	; 171
    fbba:	1e 4f       	sbci	r17, 0xFE	; 254
    fbbc:	ce 01       	movw	r24, r28
    fbbe:	8f 5a       	subi	r24, 0xAF	; 175
    fbc0:	9e 4f       	sbci	r25, 0xFE	; 254
    fbc2:	fc 01       	movw	r30, r24
    fbc4:	60 81       	ld	r22, Z
    fbc6:	71 81       	ldd	r23, Z+1	; 0x01
    fbc8:	82 81       	ldd	r24, Z+2	; 0x02
    fbca:	93 81       	ldd	r25, Z+3	; 0x03
    fbcc:	26 e6       	ldi	r18, 0x66	; 102
    fbce:	36 e6       	ldi	r19, 0x66	; 102
    fbd0:	46 e6       	ldi	r20, 0x66	; 102
    fbd2:	55 e4       	ldi	r21, 0x45	; 69
    fbd4:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    fbd8:	dc 01       	movw	r26, r24
    fbda:	cb 01       	movw	r24, r22
    fbdc:	f8 01       	movw	r30, r16
    fbde:	80 83       	st	Z, r24
    fbe0:	91 83       	std	Z+1, r25	; 0x01
    fbe2:	a2 83       	std	Z+2, r26	; 0x02
    fbe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    fbe6:	ce 01       	movw	r24, r28
    fbe8:	8b 5a       	subi	r24, 0xAB	; 171
    fbea:	9e 4f       	sbci	r25, 0xFE	; 254
    fbec:	11 e0       	ldi	r17, 0x01	; 1
    fbee:	fc 01       	movw	r30, r24
    fbf0:	60 81       	ld	r22, Z
    fbf2:	71 81       	ldd	r23, Z+1	; 0x01
    fbf4:	82 81       	ldd	r24, Z+2	; 0x02
    fbf6:	93 81       	ldd	r25, Z+3	; 0x03
    fbf8:	20 e0       	ldi	r18, 0x00	; 0
    fbfa:	30 e0       	ldi	r19, 0x00	; 0
    fbfc:	40 e8       	ldi	r20, 0x80	; 128
    fbfe:	5f e3       	ldi	r21, 0x3F	; 63
    fc00:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    fc04:	88 23       	and	r24, r24
    fc06:	0c f0       	brlt	.+2      	; 0xfc0a <travel_path+0x2f96>
    fc08:	10 e0       	ldi	r17, 0x00	; 0
    fc0a:	11 23       	and	r17, r17
    fc0c:	49 f0       	breq	.+18     	; 0xfc20 <travel_path+0x2fac>
		__ticks = 1;
    fc0e:	ce 01       	movw	r24, r28
    fc10:	87 5a       	subi	r24, 0xA7	; 167
    fc12:	9e 4f       	sbci	r25, 0xFE	; 254
    fc14:	21 e0       	ldi	r18, 0x01	; 1
    fc16:	30 e0       	ldi	r19, 0x00	; 0
    fc18:	fc 01       	movw	r30, r24
    fc1a:	31 83       	std	Z+1, r19	; 0x01
    fc1c:	20 83       	st	Z, r18
    fc1e:	74 c0       	rjmp	.+232    	; 0xfd08 <travel_path+0x3094>
	else if (__tmp > 65535)
    fc20:	ce 01       	movw	r24, r28
    fc22:	8b 5a       	subi	r24, 0xAB	; 171
    fc24:	9e 4f       	sbci	r25, 0xFE	; 254
    fc26:	11 e0       	ldi	r17, 0x01	; 1
    fc28:	fc 01       	movw	r30, r24
    fc2a:	60 81       	ld	r22, Z
    fc2c:	71 81       	ldd	r23, Z+1	; 0x01
    fc2e:	82 81       	ldd	r24, Z+2	; 0x02
    fc30:	93 81       	ldd	r25, Z+3	; 0x03
    fc32:	20 e0       	ldi	r18, 0x00	; 0
    fc34:	3f ef       	ldi	r19, 0xFF	; 255
    fc36:	4f e7       	ldi	r20, 0x7F	; 127
    fc38:	57 e4       	ldi	r21, 0x47	; 71
    fc3a:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    fc3e:	18 16       	cp	r1, r24
    fc40:	0c f0       	brlt	.+2      	; 0xfc44 <travel_path+0x2fd0>
    fc42:	10 e0       	ldi	r17, 0x00	; 0
    fc44:	11 23       	and	r17, r17
    fc46:	09 f4       	brne	.+2      	; 0xfc4a <travel_path+0x2fd6>
    fc48:	4d c0       	rjmp	.+154    	; 0xfce4 <travel_path+0x3070>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fc4a:	ce 01       	movw	r24, r28
    fc4c:	8f 5a       	subi	r24, 0xAF	; 175
    fc4e:	9e 4f       	sbci	r25, 0xFE	; 254
    fc50:	fc 01       	movw	r30, r24
    fc52:	60 81       	ld	r22, Z
    fc54:	71 81       	ldd	r23, Z+1	; 0x01
    fc56:	82 81       	ldd	r24, Z+2	; 0x02
    fc58:	93 81       	ldd	r25, Z+3	; 0x03
    fc5a:	20 e0       	ldi	r18, 0x00	; 0
    fc5c:	30 e0       	ldi	r19, 0x00	; 0
    fc5e:	40 e2       	ldi	r20, 0x20	; 32
    fc60:	51 e4       	ldi	r21, 0x41	; 65
    fc62:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    fc66:	dc 01       	movw	r26, r24
    fc68:	cb 01       	movw	r24, r22
    fc6a:	8e 01       	movw	r16, r28
    fc6c:	07 5a       	subi	r16, 0xA7	; 167
    fc6e:	1e 4f       	sbci	r17, 0xFE	; 254
    fc70:	bc 01       	movw	r22, r24
    fc72:	cd 01       	movw	r24, r26
    fc74:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    fc78:	dc 01       	movw	r26, r24
    fc7a:	cb 01       	movw	r24, r22
    fc7c:	f8 01       	movw	r30, r16
    fc7e:	91 83       	std	Z+1, r25	; 0x01
    fc80:	80 83       	st	Z, r24
    fc82:	27 c0       	rjmp	.+78     	; 0xfcd2 <travel_path+0x305e>
    fc84:	ce 01       	movw	r24, r28
    fc86:	85 5a       	subi	r24, 0xA5	; 165
    fc88:	9e 4f       	sbci	r25, 0xFE	; 254
    fc8a:	20 e7       	ldi	r18, 0x70	; 112
    fc8c:	31 e0       	ldi	r19, 0x01	; 1
    fc8e:	fc 01       	movw	r30, r24
    fc90:	31 83       	std	Z+1, r19	; 0x01
    fc92:	20 83       	st	Z, r18
    fc94:	ce 01       	movw	r24, r28
    fc96:	85 5a       	subi	r24, 0xA5	; 165
    fc98:	9e 4f       	sbci	r25, 0xFE	; 254
    fc9a:	fc 01       	movw	r30, r24
    fc9c:	80 81       	ld	r24, Z
    fc9e:	91 81       	ldd	r25, Z+1	; 0x01
    fca0:	8c 01       	movw	r16, r24
    fca2:	c8 01       	movw	r24, r16
    fca4:	01 97       	sbiw	r24, 0x01	; 1
    fca6:	f1 f7       	brne	.-4      	; 0xfca4 <travel_path+0x3030>
    fca8:	8c 01       	movw	r16, r24
    fcaa:	ce 01       	movw	r24, r28
    fcac:	85 5a       	subi	r24, 0xA5	; 165
    fcae:	9e 4f       	sbci	r25, 0xFE	; 254
    fcb0:	fc 01       	movw	r30, r24
    fcb2:	11 83       	std	Z+1, r17	; 0x01
    fcb4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fcb6:	ce 01       	movw	r24, r28
    fcb8:	87 5a       	subi	r24, 0xA7	; 167
    fcba:	9e 4f       	sbci	r25, 0xFE	; 254
    fcbc:	9e 01       	movw	r18, r28
    fcbe:	27 5a       	subi	r18, 0xA7	; 167
    fcc0:	3e 4f       	sbci	r19, 0xFE	; 254
    fcc2:	f9 01       	movw	r30, r18
    fcc4:	20 81       	ld	r18, Z
    fcc6:	31 81       	ldd	r19, Z+1	; 0x01
    fcc8:	21 50       	subi	r18, 0x01	; 1
    fcca:	30 40       	sbci	r19, 0x00	; 0
    fccc:	fc 01       	movw	r30, r24
    fcce:	31 83       	std	Z+1, r19	; 0x01
    fcd0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fcd2:	ce 01       	movw	r24, r28
    fcd4:	87 5a       	subi	r24, 0xA7	; 167
    fcd6:	9e 4f       	sbci	r25, 0xFE	; 254
    fcd8:	fc 01       	movw	r30, r24
    fcda:	80 81       	ld	r24, Z
    fcdc:	91 81       	ldd	r25, Z+1	; 0x01
    fcde:	00 97       	sbiw	r24, 0x00	; 0
    fce0:	89 f6       	brne	.-94     	; 0xfc84 <travel_path+0x3010>
    fce2:	2f c0       	rjmp	.+94     	; 0xfd42 <travel_path+0x30ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fce4:	8e 01       	movw	r16, r28
    fce6:	07 5a       	subi	r16, 0xA7	; 167
    fce8:	1e 4f       	sbci	r17, 0xFE	; 254
    fcea:	ce 01       	movw	r24, r28
    fcec:	8b 5a       	subi	r24, 0xAB	; 171
    fcee:	9e 4f       	sbci	r25, 0xFE	; 254
    fcf0:	fc 01       	movw	r30, r24
    fcf2:	60 81       	ld	r22, Z
    fcf4:	71 81       	ldd	r23, Z+1	; 0x01
    fcf6:	82 81       	ldd	r24, Z+2	; 0x02
    fcf8:	93 81       	ldd	r25, Z+3	; 0x03
    fcfa:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    fcfe:	dc 01       	movw	r26, r24
    fd00:	cb 01       	movw	r24, r22
    fd02:	f8 01       	movw	r30, r16
    fd04:	91 83       	std	Z+1, r25	; 0x01
    fd06:	80 83       	st	Z, r24
    fd08:	ce 01       	movw	r24, r28
    fd0a:	83 5a       	subi	r24, 0xA3	; 163
    fd0c:	9e 4f       	sbci	r25, 0xFE	; 254
    fd0e:	9e 01       	movw	r18, r28
    fd10:	27 5a       	subi	r18, 0xA7	; 167
    fd12:	3e 4f       	sbci	r19, 0xFE	; 254
    fd14:	f9 01       	movw	r30, r18
    fd16:	20 81       	ld	r18, Z
    fd18:	31 81       	ldd	r19, Z+1	; 0x01
    fd1a:	fc 01       	movw	r30, r24
    fd1c:	31 83       	std	Z+1, r19	; 0x01
    fd1e:	20 83       	st	Z, r18
    fd20:	ce 01       	movw	r24, r28
    fd22:	83 5a       	subi	r24, 0xA3	; 163
    fd24:	9e 4f       	sbci	r25, 0xFE	; 254
    fd26:	fc 01       	movw	r30, r24
    fd28:	80 81       	ld	r24, Z
    fd2a:	91 81       	ldd	r25, Z+1	; 0x01
    fd2c:	8c 01       	movw	r16, r24
    fd2e:	c8 01       	movw	r24, r16
    fd30:	01 97       	sbiw	r24, 0x01	; 1
    fd32:	f1 f7       	brne	.-4      	; 0xfd30 <travel_path+0x30bc>
    fd34:	8c 01       	movw	r16, r24
    fd36:	ce 01       	movw	r24, r28
    fd38:	83 5a       	subi	r24, 0xA3	; 163
    fd3a:	9e 4f       	sbci	r25, 0xFE	; 254
    fd3c:	fc 01       	movw	r30, r24
    fd3e:	11 83       	std	Z+1, r17	; 0x01
    fd40:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_left3();
    fd42:	0e 94 e5 19 	call	0x33ca	; 0x33ca <correct_left3>
    fd46:	9e 01       	movw	r18, r28
    fd48:	21 5a       	subi	r18, 0xA1	; 161
    fd4a:	3e 4f       	sbci	r19, 0xFE	; 254
    fd4c:	80 e0       	ldi	r24, 0x00	; 0
    fd4e:	90 e0       	ldi	r25, 0x00	; 0
    fd50:	a0 ea       	ldi	r26, 0xA0	; 160
    fd52:	b1 e4       	ldi	r27, 0x41	; 65
    fd54:	f9 01       	movw	r30, r18
    fd56:	80 83       	st	Z, r24
    fd58:	91 83       	std	Z+1, r25	; 0x01
    fd5a:	a2 83       	std	Z+2, r26	; 0x02
    fd5c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fd5e:	8e 01       	movw	r16, r28
    fd60:	0d 59       	subi	r16, 0x9D	; 157
    fd62:	1e 4f       	sbci	r17, 0xFE	; 254
    fd64:	ce 01       	movw	r24, r28
    fd66:	81 5a       	subi	r24, 0xA1	; 161
    fd68:	9e 4f       	sbci	r25, 0xFE	; 254
    fd6a:	fc 01       	movw	r30, r24
    fd6c:	60 81       	ld	r22, Z
    fd6e:	71 81       	ldd	r23, Z+1	; 0x01
    fd70:	82 81       	ldd	r24, Z+2	; 0x02
    fd72:	93 81       	ldd	r25, Z+3	; 0x03
    fd74:	26 e6       	ldi	r18, 0x66	; 102
    fd76:	36 e6       	ldi	r19, 0x66	; 102
    fd78:	46 e6       	ldi	r20, 0x66	; 102
    fd7a:	55 e4       	ldi	r21, 0x45	; 69
    fd7c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    fd80:	dc 01       	movw	r26, r24
    fd82:	cb 01       	movw	r24, r22
    fd84:	f8 01       	movw	r30, r16
    fd86:	80 83       	st	Z, r24
    fd88:	91 83       	std	Z+1, r25	; 0x01
    fd8a:	a2 83       	std	Z+2, r26	; 0x02
    fd8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    fd8e:	ce 01       	movw	r24, r28
    fd90:	8d 59       	subi	r24, 0x9D	; 157
    fd92:	9e 4f       	sbci	r25, 0xFE	; 254
    fd94:	11 e0       	ldi	r17, 0x01	; 1
    fd96:	fc 01       	movw	r30, r24
    fd98:	60 81       	ld	r22, Z
    fd9a:	71 81       	ldd	r23, Z+1	; 0x01
    fd9c:	82 81       	ldd	r24, Z+2	; 0x02
    fd9e:	93 81       	ldd	r25, Z+3	; 0x03
    fda0:	20 e0       	ldi	r18, 0x00	; 0
    fda2:	30 e0       	ldi	r19, 0x00	; 0
    fda4:	40 e8       	ldi	r20, 0x80	; 128
    fda6:	5f e3       	ldi	r21, 0x3F	; 63
    fda8:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    fdac:	88 23       	and	r24, r24
    fdae:	0c f0       	brlt	.+2      	; 0xfdb2 <travel_path+0x313e>
    fdb0:	10 e0       	ldi	r17, 0x00	; 0
    fdb2:	11 23       	and	r17, r17
    fdb4:	49 f0       	breq	.+18     	; 0xfdc8 <travel_path+0x3154>
		__ticks = 1;
    fdb6:	ce 01       	movw	r24, r28
    fdb8:	89 59       	subi	r24, 0x99	; 153
    fdba:	9e 4f       	sbci	r25, 0xFE	; 254
    fdbc:	21 e0       	ldi	r18, 0x01	; 1
    fdbe:	30 e0       	ldi	r19, 0x00	; 0
    fdc0:	fc 01       	movw	r30, r24
    fdc2:	31 83       	std	Z+1, r19	; 0x01
    fdc4:	20 83       	st	Z, r18
    fdc6:	74 c0       	rjmp	.+232    	; 0xfeb0 <travel_path+0x323c>
	else if (__tmp > 65535)
    fdc8:	ce 01       	movw	r24, r28
    fdca:	8d 59       	subi	r24, 0x9D	; 157
    fdcc:	9e 4f       	sbci	r25, 0xFE	; 254
    fdce:	11 e0       	ldi	r17, 0x01	; 1
    fdd0:	fc 01       	movw	r30, r24
    fdd2:	60 81       	ld	r22, Z
    fdd4:	71 81       	ldd	r23, Z+1	; 0x01
    fdd6:	82 81       	ldd	r24, Z+2	; 0x02
    fdd8:	93 81       	ldd	r25, Z+3	; 0x03
    fdda:	20 e0       	ldi	r18, 0x00	; 0
    fddc:	3f ef       	ldi	r19, 0xFF	; 255
    fdde:	4f e7       	ldi	r20, 0x7F	; 127
    fde0:	57 e4       	ldi	r21, 0x47	; 71
    fde2:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    fde6:	18 16       	cp	r1, r24
    fde8:	0c f0       	brlt	.+2      	; 0xfdec <travel_path+0x3178>
    fdea:	10 e0       	ldi	r17, 0x00	; 0
    fdec:	11 23       	and	r17, r17
    fdee:	09 f4       	brne	.+2      	; 0xfdf2 <travel_path+0x317e>
    fdf0:	4d c0       	rjmp	.+154    	; 0xfe8c <travel_path+0x3218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fdf2:	ce 01       	movw	r24, r28
    fdf4:	81 5a       	subi	r24, 0xA1	; 161
    fdf6:	9e 4f       	sbci	r25, 0xFE	; 254
    fdf8:	fc 01       	movw	r30, r24
    fdfa:	60 81       	ld	r22, Z
    fdfc:	71 81       	ldd	r23, Z+1	; 0x01
    fdfe:	82 81       	ldd	r24, Z+2	; 0x02
    fe00:	93 81       	ldd	r25, Z+3	; 0x03
    fe02:	20 e0       	ldi	r18, 0x00	; 0
    fe04:	30 e0       	ldi	r19, 0x00	; 0
    fe06:	40 e2       	ldi	r20, 0x20	; 32
    fe08:	51 e4       	ldi	r21, 0x41	; 65
    fe0a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    fe0e:	dc 01       	movw	r26, r24
    fe10:	cb 01       	movw	r24, r22
    fe12:	8e 01       	movw	r16, r28
    fe14:	09 59       	subi	r16, 0x99	; 153
    fe16:	1e 4f       	sbci	r17, 0xFE	; 254
    fe18:	bc 01       	movw	r22, r24
    fe1a:	cd 01       	movw	r24, r26
    fe1c:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    fe20:	dc 01       	movw	r26, r24
    fe22:	cb 01       	movw	r24, r22
    fe24:	f8 01       	movw	r30, r16
    fe26:	91 83       	std	Z+1, r25	; 0x01
    fe28:	80 83       	st	Z, r24
    fe2a:	27 c0       	rjmp	.+78     	; 0xfe7a <travel_path+0x3206>
    fe2c:	ce 01       	movw	r24, r28
    fe2e:	87 59       	subi	r24, 0x97	; 151
    fe30:	9e 4f       	sbci	r25, 0xFE	; 254
    fe32:	20 e7       	ldi	r18, 0x70	; 112
    fe34:	31 e0       	ldi	r19, 0x01	; 1
    fe36:	fc 01       	movw	r30, r24
    fe38:	31 83       	std	Z+1, r19	; 0x01
    fe3a:	20 83       	st	Z, r18
    fe3c:	ce 01       	movw	r24, r28
    fe3e:	87 59       	subi	r24, 0x97	; 151
    fe40:	9e 4f       	sbci	r25, 0xFE	; 254
    fe42:	fc 01       	movw	r30, r24
    fe44:	80 81       	ld	r24, Z
    fe46:	91 81       	ldd	r25, Z+1	; 0x01
    fe48:	8c 01       	movw	r16, r24
    fe4a:	c8 01       	movw	r24, r16
    fe4c:	01 97       	sbiw	r24, 0x01	; 1
    fe4e:	f1 f7       	brne	.-4      	; 0xfe4c <travel_path+0x31d8>
    fe50:	8c 01       	movw	r16, r24
    fe52:	ce 01       	movw	r24, r28
    fe54:	87 59       	subi	r24, 0x97	; 151
    fe56:	9e 4f       	sbci	r25, 0xFE	; 254
    fe58:	fc 01       	movw	r30, r24
    fe5a:	11 83       	std	Z+1, r17	; 0x01
    fe5c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fe5e:	ce 01       	movw	r24, r28
    fe60:	89 59       	subi	r24, 0x99	; 153
    fe62:	9e 4f       	sbci	r25, 0xFE	; 254
    fe64:	9e 01       	movw	r18, r28
    fe66:	29 59       	subi	r18, 0x99	; 153
    fe68:	3e 4f       	sbci	r19, 0xFE	; 254
    fe6a:	f9 01       	movw	r30, r18
    fe6c:	20 81       	ld	r18, Z
    fe6e:	31 81       	ldd	r19, Z+1	; 0x01
    fe70:	21 50       	subi	r18, 0x01	; 1
    fe72:	30 40       	sbci	r19, 0x00	; 0
    fe74:	fc 01       	movw	r30, r24
    fe76:	31 83       	std	Z+1, r19	; 0x01
    fe78:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fe7a:	ce 01       	movw	r24, r28
    fe7c:	89 59       	subi	r24, 0x99	; 153
    fe7e:	9e 4f       	sbci	r25, 0xFE	; 254
    fe80:	fc 01       	movw	r30, r24
    fe82:	80 81       	ld	r24, Z
    fe84:	91 81       	ldd	r25, Z+1	; 0x01
    fe86:	00 97       	sbiw	r24, 0x00	; 0
    fe88:	89 f6       	brne	.-94     	; 0xfe2c <travel_path+0x31b8>
    fe8a:	2f c0       	rjmp	.+94     	; 0xfeea <travel_path+0x3276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fe8c:	8e 01       	movw	r16, r28
    fe8e:	09 59       	subi	r16, 0x99	; 153
    fe90:	1e 4f       	sbci	r17, 0xFE	; 254
    fe92:	ce 01       	movw	r24, r28
    fe94:	8d 59       	subi	r24, 0x9D	; 157
    fe96:	9e 4f       	sbci	r25, 0xFE	; 254
    fe98:	fc 01       	movw	r30, r24
    fe9a:	60 81       	ld	r22, Z
    fe9c:	71 81       	ldd	r23, Z+1	; 0x01
    fe9e:	82 81       	ldd	r24, Z+2	; 0x02
    fea0:	93 81       	ldd	r25, Z+3	; 0x03
    fea2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
    fea6:	dc 01       	movw	r26, r24
    fea8:	cb 01       	movw	r24, r22
    feaa:	f8 01       	movw	r30, r16
    feac:	91 83       	std	Z+1, r25	; 0x01
    feae:	80 83       	st	Z, r24
    feb0:	ce 01       	movw	r24, r28
    feb2:	85 59       	subi	r24, 0x95	; 149
    feb4:	9e 4f       	sbci	r25, 0xFE	; 254
    feb6:	9e 01       	movw	r18, r28
    feb8:	29 59       	subi	r18, 0x99	; 153
    feba:	3e 4f       	sbci	r19, 0xFE	; 254
    febc:	f9 01       	movw	r30, r18
    febe:	20 81       	ld	r18, Z
    fec0:	31 81       	ldd	r19, Z+1	; 0x01
    fec2:	fc 01       	movw	r30, r24
    fec4:	31 83       	std	Z+1, r19	; 0x01
    fec6:	20 83       	st	Z, r18
    fec8:	ce 01       	movw	r24, r28
    feca:	85 59       	subi	r24, 0x95	; 149
    fecc:	9e 4f       	sbci	r25, 0xFE	; 254
    fece:	fc 01       	movw	r30, r24
    fed0:	80 81       	ld	r24, Z
    fed2:	91 81       	ldd	r25, Z+1	; 0x01
    fed4:	8c 01       	movw	r16, r24
    fed6:	c8 01       	movw	r24, r16
    fed8:	01 97       	sbiw	r24, 0x01	; 1
    feda:	f1 f7       	brne	.-4      	; 0xfed8 <travel_path+0x3264>
    fedc:	8c 01       	movw	r16, r24
    fede:	ce 01       	movw	r24, r28
    fee0:	85 59       	subi	r24, 0x95	; 149
    fee2:	9e 4f       	sbci	r25, 0xFE	; 254
    fee4:	fc 01       	movw	r30, r24
    fee6:	11 83       	std	Z+1, r17	; 0x01
    fee8:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
    feea:	80 91 63 03 	lds	r24, 0x0363
    feee:	90 91 64 03 	lds	r25, 0x0364
    fef2:	01 96       	adiw	r24, 0x01	; 1
    fef4:	90 93 64 03 	sts	0x0364, r25
    fef8:	80 93 63 03 	sts	0x0363, r24
			pick_drop(master_path[node]);
    fefc:	80 91 63 03 	lds	r24, 0x0363
    ff00:	90 91 64 03 	lds	r25, 0x0364
    ff04:	89 59       	subi	r24, 0x99	; 153
    ff06:	9c 4f       	sbci	r25, 0xFC	; 252
    ff08:	fc 01       	movw	r30, r24
    ff0a:	80 81       	ld	r24, Z
    ff0c:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    ff10:	80 91 63 03 	lds	r24, 0x0363
    ff14:	90 91 64 03 	lds	r25, 0x0364
    ff18:	01 96       	adiw	r24, 0x01	; 1
    ff1a:	90 93 64 03 	sts	0x0364, r25
    ff1e:	80 93 63 03 	sts	0x0363, r24
			travel_path(master_path[node]);
    ff22:	80 91 63 03 	lds	r24, 0x0363
    ff26:	90 91 64 03 	lds	r25, 0x0364
    ff2a:	89 59       	subi	r24, 0x99	; 153
    ff2c:	9c 4f       	sbci	r25, 0xFC	; 252
    ff2e:	fc 01       	movw	r30, r24
    ff30:	80 81       	ld	r24, Z
    ff32:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else
		correct_right3();
    ff36:	ed c1       	rjmp	.+986    	; 0x10312 <travel_path+0x369e>
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else if(master_path[node+1]=='2')
    ff38:	80 91 63 03 	lds	r24, 0x0363
    ff3c:	90 91 64 03 	lds	r25, 0x0364
    ff40:	01 96       	adiw	r24, 0x01	; 1
    ff42:	89 59       	subi	r24, 0x99	; 153
    ff44:	9c 4f       	sbci	r25, 0xFC	; 252
    ff46:	fc 01       	movw	r30, r24
    ff48:	80 81       	ld	r24, Z
    ff4a:	82 33       	cpi	r24, 0x32	; 50
    ff4c:	09 f0       	breq	.+2      	; 0xff50 <travel_path+0x32dc>
    ff4e:	cf c1       	rjmp	.+926    	; 0x102ee <travel_path+0x367a>
		{
			stop();
    ff50:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ff54:	9e 01       	movw	r18, r28
    ff56:	23 59       	subi	r18, 0x93	; 147
    ff58:	3e 4f       	sbci	r19, 0xFE	; 254
    ff5a:	80 e0       	ldi	r24, 0x00	; 0
    ff5c:	90 e0       	ldi	r25, 0x00	; 0
    ff5e:	a0 ea       	ldi	r26, 0xA0	; 160
    ff60:	b1 e4       	ldi	r27, 0x41	; 65
    ff62:	f9 01       	movw	r30, r18
    ff64:	80 83       	st	Z, r24
    ff66:	91 83       	std	Z+1, r25	; 0x01
    ff68:	a2 83       	std	Z+2, r26	; 0x02
    ff6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ff6c:	8e 01       	movw	r16, r28
    ff6e:	0f 58       	subi	r16, 0x8F	; 143
    ff70:	1e 4f       	sbci	r17, 0xFE	; 254
    ff72:	ce 01       	movw	r24, r28
    ff74:	83 59       	subi	r24, 0x93	; 147
    ff76:	9e 4f       	sbci	r25, 0xFE	; 254
    ff78:	fc 01       	movw	r30, r24
    ff7a:	60 81       	ld	r22, Z
    ff7c:	71 81       	ldd	r23, Z+1	; 0x01
    ff7e:	82 81       	ldd	r24, Z+2	; 0x02
    ff80:	93 81       	ldd	r25, Z+3	; 0x03
    ff82:	26 e6       	ldi	r18, 0x66	; 102
    ff84:	36 e6       	ldi	r19, 0x66	; 102
    ff86:	46 e6       	ldi	r20, 0x66	; 102
    ff88:	55 e4       	ldi	r21, 0x45	; 69
    ff8a:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
    ff8e:	dc 01       	movw	r26, r24
    ff90:	cb 01       	movw	r24, r22
    ff92:	f8 01       	movw	r30, r16
    ff94:	80 83       	st	Z, r24
    ff96:	91 83       	std	Z+1, r25	; 0x01
    ff98:	a2 83       	std	Z+2, r26	; 0x02
    ff9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ff9c:	ce 01       	movw	r24, r28
    ff9e:	8f 58       	subi	r24, 0x8F	; 143
    ffa0:	9e 4f       	sbci	r25, 0xFE	; 254
    ffa2:	11 e0       	ldi	r17, 0x01	; 1
    ffa4:	fc 01       	movw	r30, r24
    ffa6:	60 81       	ld	r22, Z
    ffa8:	71 81       	ldd	r23, Z+1	; 0x01
    ffaa:	82 81       	ldd	r24, Z+2	; 0x02
    ffac:	93 81       	ldd	r25, Z+3	; 0x03
    ffae:	20 e0       	ldi	r18, 0x00	; 0
    ffb0:	30 e0       	ldi	r19, 0x00	; 0
    ffb2:	40 e8       	ldi	r20, 0x80	; 128
    ffb4:	5f e3       	ldi	r21, 0x3F	; 63
    ffb6:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
    ffba:	88 23       	and	r24, r24
    ffbc:	0c f0       	brlt	.+2      	; 0xffc0 <travel_path+0x334c>
    ffbe:	10 e0       	ldi	r17, 0x00	; 0
    ffc0:	11 23       	and	r17, r17
    ffc2:	49 f0       	breq	.+18     	; 0xffd6 <travel_path+0x3362>
		__ticks = 1;
    ffc4:	ce 01       	movw	r24, r28
    ffc6:	8b 58       	subi	r24, 0x8B	; 139
    ffc8:	9e 4f       	sbci	r25, 0xFE	; 254
    ffca:	21 e0       	ldi	r18, 0x01	; 1
    ffcc:	30 e0       	ldi	r19, 0x00	; 0
    ffce:	fc 01       	movw	r30, r24
    ffd0:	31 83       	std	Z+1, r19	; 0x01
    ffd2:	20 83       	st	Z, r18
    ffd4:	74 c0       	rjmp	.+232    	; 0x100be <travel_path+0x344a>
	else if (__tmp > 65535)
    ffd6:	ce 01       	movw	r24, r28
    ffd8:	8f 58       	subi	r24, 0x8F	; 143
    ffda:	9e 4f       	sbci	r25, 0xFE	; 254
    ffdc:	11 e0       	ldi	r17, 0x01	; 1
    ffde:	fc 01       	movw	r30, r24
    ffe0:	60 81       	ld	r22, Z
    ffe2:	71 81       	ldd	r23, Z+1	; 0x01
    ffe4:	82 81       	ldd	r24, Z+2	; 0x02
    ffe6:	93 81       	ldd	r25, Z+3	; 0x03
    ffe8:	20 e0       	ldi	r18, 0x00	; 0
    ffea:	3f ef       	ldi	r19, 0xFF	; 255
    ffec:	4f e7       	ldi	r20, 0x7F	; 127
    ffee:	57 e4       	ldi	r21, 0x47	; 71
    fff0:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
    fff4:	18 16       	cp	r1, r24
    fff6:	0c f0       	brlt	.+2      	; 0xfffa <travel_path+0x3386>
    fff8:	10 e0       	ldi	r17, 0x00	; 0
    fffa:	11 23       	and	r17, r17
    fffc:	09 f4       	brne	.+2      	; 0x10000 <travel_path+0x338c>
    fffe:	4d c0       	rjmp	.+154    	; 0x1009a <travel_path+0x3426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10000:	ce 01       	movw	r24, r28
   10002:	83 59       	subi	r24, 0x93	; 147
   10004:	9e 4f       	sbci	r25, 0xFE	; 254
   10006:	fc 01       	movw	r30, r24
   10008:	60 81       	ld	r22, Z
   1000a:	71 81       	ldd	r23, Z+1	; 0x01
   1000c:	82 81       	ldd	r24, Z+2	; 0x02
   1000e:	93 81       	ldd	r25, Z+3	; 0x03
   10010:	20 e0       	ldi	r18, 0x00	; 0
   10012:	30 e0       	ldi	r19, 0x00	; 0
   10014:	40 e2       	ldi	r20, 0x20	; 32
   10016:	51 e4       	ldi	r21, 0x41	; 65
   10018:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   1001c:	dc 01       	movw	r26, r24
   1001e:	cb 01       	movw	r24, r22
   10020:	8e 01       	movw	r16, r28
   10022:	0b 58       	subi	r16, 0x8B	; 139
   10024:	1e 4f       	sbci	r17, 0xFE	; 254
   10026:	bc 01       	movw	r22, r24
   10028:	cd 01       	movw	r24, r26
   1002a:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   1002e:	dc 01       	movw	r26, r24
   10030:	cb 01       	movw	r24, r22
   10032:	f8 01       	movw	r30, r16
   10034:	91 83       	std	Z+1, r25	; 0x01
   10036:	80 83       	st	Z, r24
   10038:	27 c0       	rjmp	.+78     	; 0x10088 <travel_path+0x3414>
   1003a:	ce 01       	movw	r24, r28
   1003c:	89 58       	subi	r24, 0x89	; 137
   1003e:	9e 4f       	sbci	r25, 0xFE	; 254
   10040:	20 e7       	ldi	r18, 0x70	; 112
   10042:	31 e0       	ldi	r19, 0x01	; 1
   10044:	fc 01       	movw	r30, r24
   10046:	31 83       	std	Z+1, r19	; 0x01
   10048:	20 83       	st	Z, r18
   1004a:	ce 01       	movw	r24, r28
   1004c:	89 58       	subi	r24, 0x89	; 137
   1004e:	9e 4f       	sbci	r25, 0xFE	; 254
   10050:	fc 01       	movw	r30, r24
   10052:	80 81       	ld	r24, Z
   10054:	91 81       	ldd	r25, Z+1	; 0x01
   10056:	8c 01       	movw	r16, r24
   10058:	c8 01       	movw	r24, r16
   1005a:	01 97       	sbiw	r24, 0x01	; 1
   1005c:	f1 f7       	brne	.-4      	; 0x1005a <travel_path+0x33e6>
   1005e:	8c 01       	movw	r16, r24
   10060:	ce 01       	movw	r24, r28
   10062:	89 58       	subi	r24, 0x89	; 137
   10064:	9e 4f       	sbci	r25, 0xFE	; 254
   10066:	fc 01       	movw	r30, r24
   10068:	11 83       	std	Z+1, r17	; 0x01
   1006a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1006c:	ce 01       	movw	r24, r28
   1006e:	8b 58       	subi	r24, 0x8B	; 139
   10070:	9e 4f       	sbci	r25, 0xFE	; 254
   10072:	9e 01       	movw	r18, r28
   10074:	2b 58       	subi	r18, 0x8B	; 139
   10076:	3e 4f       	sbci	r19, 0xFE	; 254
   10078:	f9 01       	movw	r30, r18
   1007a:	20 81       	ld	r18, Z
   1007c:	31 81       	ldd	r19, Z+1	; 0x01
   1007e:	21 50       	subi	r18, 0x01	; 1
   10080:	30 40       	sbci	r19, 0x00	; 0
   10082:	fc 01       	movw	r30, r24
   10084:	31 83       	std	Z+1, r19	; 0x01
   10086:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10088:	ce 01       	movw	r24, r28
   1008a:	8b 58       	subi	r24, 0x8B	; 139
   1008c:	9e 4f       	sbci	r25, 0xFE	; 254
   1008e:	fc 01       	movw	r30, r24
   10090:	80 81       	ld	r24, Z
   10092:	91 81       	ldd	r25, Z+1	; 0x01
   10094:	00 97       	sbiw	r24, 0x00	; 0
   10096:	89 f6       	brne	.-94     	; 0x1003a <travel_path+0x33c6>
   10098:	2f c0       	rjmp	.+94     	; 0x100f8 <travel_path+0x3484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1009a:	8e 01       	movw	r16, r28
   1009c:	0b 58       	subi	r16, 0x8B	; 139
   1009e:	1e 4f       	sbci	r17, 0xFE	; 254
   100a0:	ce 01       	movw	r24, r28
   100a2:	8f 58       	subi	r24, 0x8F	; 143
   100a4:	9e 4f       	sbci	r25, 0xFE	; 254
   100a6:	fc 01       	movw	r30, r24
   100a8:	60 81       	ld	r22, Z
   100aa:	71 81       	ldd	r23, Z+1	; 0x01
   100ac:	82 81       	ldd	r24, Z+2	; 0x02
   100ae:	93 81       	ldd	r25, Z+3	; 0x03
   100b0:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   100b4:	dc 01       	movw	r26, r24
   100b6:	cb 01       	movw	r24, r22
   100b8:	f8 01       	movw	r30, r16
   100ba:	91 83       	std	Z+1, r25	; 0x01
   100bc:	80 83       	st	Z, r24
   100be:	ce 01       	movw	r24, r28
   100c0:	87 58       	subi	r24, 0x87	; 135
   100c2:	9e 4f       	sbci	r25, 0xFE	; 254
   100c4:	9e 01       	movw	r18, r28
   100c6:	2b 58       	subi	r18, 0x8B	; 139
   100c8:	3e 4f       	sbci	r19, 0xFE	; 254
   100ca:	f9 01       	movw	r30, r18
   100cc:	20 81       	ld	r18, Z
   100ce:	31 81       	ldd	r19, Z+1	; 0x01
   100d0:	fc 01       	movw	r30, r24
   100d2:	31 83       	std	Z+1, r19	; 0x01
   100d4:	20 83       	st	Z, r18
   100d6:	ce 01       	movw	r24, r28
   100d8:	87 58       	subi	r24, 0x87	; 135
   100da:	9e 4f       	sbci	r25, 0xFE	; 254
   100dc:	fc 01       	movw	r30, r24
   100de:	80 81       	ld	r24, Z
   100e0:	91 81       	ldd	r25, Z+1	; 0x01
   100e2:	8c 01       	movw	r16, r24
   100e4:	c8 01       	movw	r24, r16
   100e6:	01 97       	sbiw	r24, 0x01	; 1
   100e8:	f1 f7       	brne	.-4      	; 0x100e6 <travel_path+0x3472>
   100ea:	8c 01       	movw	r16, r24
   100ec:	ce 01       	movw	r24, r28
   100ee:	87 58       	subi	r24, 0x87	; 135
   100f0:	9e 4f       	sbci	r25, 0xFE	; 254
   100f2:	fc 01       	movw	r30, r24
   100f4:	11 83       	std	Z+1, r17	; 0x01
   100f6:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
   100f8:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
   100fc:	9e 01       	movw	r18, r28
   100fe:	25 58       	subi	r18, 0x85	; 133
   10100:	3e 4f       	sbci	r19, 0xFE	; 254
   10102:	80 e0       	ldi	r24, 0x00	; 0
   10104:	90 e0       	ldi	r25, 0x00	; 0
   10106:	a0 ea       	ldi	r26, 0xA0	; 160
   10108:	b1 e4       	ldi	r27, 0x41	; 65
   1010a:	f9 01       	movw	r30, r18
   1010c:	80 83       	st	Z, r24
   1010e:	91 83       	std	Z+1, r25	; 0x01
   10110:	a2 83       	std	Z+2, r26	; 0x02
   10112:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10114:	8e 01       	movw	r16, r28
   10116:	01 58       	subi	r16, 0x81	; 129
   10118:	1e 4f       	sbci	r17, 0xFE	; 254
   1011a:	ce 01       	movw	r24, r28
   1011c:	85 58       	subi	r24, 0x85	; 133
   1011e:	9e 4f       	sbci	r25, 0xFE	; 254
   10120:	fc 01       	movw	r30, r24
   10122:	60 81       	ld	r22, Z
   10124:	71 81       	ldd	r23, Z+1	; 0x01
   10126:	82 81       	ldd	r24, Z+2	; 0x02
   10128:	93 81       	ldd	r25, Z+3	; 0x03
   1012a:	26 e6       	ldi	r18, 0x66	; 102
   1012c:	36 e6       	ldi	r19, 0x66	; 102
   1012e:	46 e6       	ldi	r20, 0x66	; 102
   10130:	55 e4       	ldi	r21, 0x45	; 69
   10132:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   10136:	dc 01       	movw	r26, r24
   10138:	cb 01       	movw	r24, r22
   1013a:	f8 01       	movw	r30, r16
   1013c:	80 83       	st	Z, r24
   1013e:	91 83       	std	Z+1, r25	; 0x01
   10140:	a2 83       	std	Z+2, r26	; 0x02
   10142:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10144:	ce 01       	movw	r24, r28
   10146:	81 58       	subi	r24, 0x81	; 129
   10148:	9e 4f       	sbci	r25, 0xFE	; 254
   1014a:	11 e0       	ldi	r17, 0x01	; 1
   1014c:	fc 01       	movw	r30, r24
   1014e:	60 81       	ld	r22, Z
   10150:	71 81       	ldd	r23, Z+1	; 0x01
   10152:	82 81       	ldd	r24, Z+2	; 0x02
   10154:	93 81       	ldd	r25, Z+3	; 0x03
   10156:	20 e0       	ldi	r18, 0x00	; 0
   10158:	30 e0       	ldi	r19, 0x00	; 0
   1015a:	40 e8       	ldi	r20, 0x80	; 128
   1015c:	5f e3       	ldi	r21, 0x3F	; 63
   1015e:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
   10162:	88 23       	and	r24, r24
   10164:	0c f0       	brlt	.+2      	; 0x10168 <travel_path+0x34f4>
   10166:	10 e0       	ldi	r17, 0x00	; 0
   10168:	11 23       	and	r17, r17
   1016a:	49 f0       	breq	.+18     	; 0x1017e <travel_path+0x350a>
		__ticks = 1;
   1016c:	ce 01       	movw	r24, r28
   1016e:	8d 57       	subi	r24, 0x7D	; 125
   10170:	9e 4f       	sbci	r25, 0xFE	; 254
   10172:	21 e0       	ldi	r18, 0x01	; 1
   10174:	30 e0       	ldi	r19, 0x00	; 0
   10176:	fc 01       	movw	r30, r24
   10178:	31 83       	std	Z+1, r19	; 0x01
   1017a:	20 83       	st	Z, r18
   1017c:	74 c0       	rjmp	.+232    	; 0x10266 <travel_path+0x35f2>
	else if (__tmp > 65535)
   1017e:	ce 01       	movw	r24, r28
   10180:	81 58       	subi	r24, 0x81	; 129
   10182:	9e 4f       	sbci	r25, 0xFE	; 254
   10184:	11 e0       	ldi	r17, 0x01	; 1
   10186:	fc 01       	movw	r30, r24
   10188:	60 81       	ld	r22, Z
   1018a:	71 81       	ldd	r23, Z+1	; 0x01
   1018c:	82 81       	ldd	r24, Z+2	; 0x02
   1018e:	93 81       	ldd	r25, Z+3	; 0x03
   10190:	20 e0       	ldi	r18, 0x00	; 0
   10192:	3f ef       	ldi	r19, 0xFF	; 255
   10194:	4f e7       	ldi	r20, 0x7F	; 127
   10196:	57 e4       	ldi	r21, 0x47	; 71
   10198:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
   1019c:	18 16       	cp	r1, r24
   1019e:	0c f0       	brlt	.+2      	; 0x101a2 <travel_path+0x352e>
   101a0:	10 e0       	ldi	r17, 0x00	; 0
   101a2:	11 23       	and	r17, r17
   101a4:	09 f4       	brne	.+2      	; 0x101a8 <travel_path+0x3534>
   101a6:	4d c0       	rjmp	.+154    	; 0x10242 <travel_path+0x35ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   101a8:	ce 01       	movw	r24, r28
   101aa:	85 58       	subi	r24, 0x85	; 133
   101ac:	9e 4f       	sbci	r25, 0xFE	; 254
   101ae:	fc 01       	movw	r30, r24
   101b0:	60 81       	ld	r22, Z
   101b2:	71 81       	ldd	r23, Z+1	; 0x01
   101b4:	82 81       	ldd	r24, Z+2	; 0x02
   101b6:	93 81       	ldd	r25, Z+3	; 0x03
   101b8:	20 e0       	ldi	r18, 0x00	; 0
   101ba:	30 e0       	ldi	r19, 0x00	; 0
   101bc:	40 e2       	ldi	r20, 0x20	; 32
   101be:	51 e4       	ldi	r21, 0x41	; 65
   101c0:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   101c4:	dc 01       	movw	r26, r24
   101c6:	cb 01       	movw	r24, r22
   101c8:	8e 01       	movw	r16, r28
   101ca:	0d 57       	subi	r16, 0x7D	; 125
   101cc:	1e 4f       	sbci	r17, 0xFE	; 254
   101ce:	bc 01       	movw	r22, r24
   101d0:	cd 01       	movw	r24, r26
   101d2:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   101d6:	dc 01       	movw	r26, r24
   101d8:	cb 01       	movw	r24, r22
   101da:	f8 01       	movw	r30, r16
   101dc:	91 83       	std	Z+1, r25	; 0x01
   101de:	80 83       	st	Z, r24
   101e0:	27 c0       	rjmp	.+78     	; 0x10230 <travel_path+0x35bc>
   101e2:	ce 01       	movw	r24, r28
   101e4:	8b 57       	subi	r24, 0x7B	; 123
   101e6:	9e 4f       	sbci	r25, 0xFE	; 254
   101e8:	20 e7       	ldi	r18, 0x70	; 112
   101ea:	31 e0       	ldi	r19, 0x01	; 1
   101ec:	fc 01       	movw	r30, r24
   101ee:	31 83       	std	Z+1, r19	; 0x01
   101f0:	20 83       	st	Z, r18
   101f2:	ce 01       	movw	r24, r28
   101f4:	8b 57       	subi	r24, 0x7B	; 123
   101f6:	9e 4f       	sbci	r25, 0xFE	; 254
   101f8:	fc 01       	movw	r30, r24
   101fa:	80 81       	ld	r24, Z
   101fc:	91 81       	ldd	r25, Z+1	; 0x01
   101fe:	8c 01       	movw	r16, r24
   10200:	c8 01       	movw	r24, r16
   10202:	01 97       	sbiw	r24, 0x01	; 1
   10204:	f1 f7       	brne	.-4      	; 0x10202 <travel_path+0x358e>
   10206:	8c 01       	movw	r16, r24
   10208:	ce 01       	movw	r24, r28
   1020a:	8b 57       	subi	r24, 0x7B	; 123
   1020c:	9e 4f       	sbci	r25, 0xFE	; 254
   1020e:	fc 01       	movw	r30, r24
   10210:	11 83       	std	Z+1, r17	; 0x01
   10212:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10214:	ce 01       	movw	r24, r28
   10216:	8d 57       	subi	r24, 0x7D	; 125
   10218:	9e 4f       	sbci	r25, 0xFE	; 254
   1021a:	9e 01       	movw	r18, r28
   1021c:	2d 57       	subi	r18, 0x7D	; 125
   1021e:	3e 4f       	sbci	r19, 0xFE	; 254
   10220:	f9 01       	movw	r30, r18
   10222:	20 81       	ld	r18, Z
   10224:	31 81       	ldd	r19, Z+1	; 0x01
   10226:	21 50       	subi	r18, 0x01	; 1
   10228:	30 40       	sbci	r19, 0x00	; 0
   1022a:	fc 01       	movw	r30, r24
   1022c:	31 83       	std	Z+1, r19	; 0x01
   1022e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10230:	ce 01       	movw	r24, r28
   10232:	8d 57       	subi	r24, 0x7D	; 125
   10234:	9e 4f       	sbci	r25, 0xFE	; 254
   10236:	fc 01       	movw	r30, r24
   10238:	80 81       	ld	r24, Z
   1023a:	91 81       	ldd	r25, Z+1	; 0x01
   1023c:	00 97       	sbiw	r24, 0x00	; 0
   1023e:	89 f6       	brne	.-94     	; 0x101e2 <travel_path+0x356e>
   10240:	2f c0       	rjmp	.+94     	; 0x102a0 <travel_path+0x362c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10242:	8e 01       	movw	r16, r28
   10244:	0d 57       	subi	r16, 0x7D	; 125
   10246:	1e 4f       	sbci	r17, 0xFE	; 254
   10248:	ce 01       	movw	r24, r28
   1024a:	81 58       	subi	r24, 0x81	; 129
   1024c:	9e 4f       	sbci	r25, 0xFE	; 254
   1024e:	fc 01       	movw	r30, r24
   10250:	60 81       	ld	r22, Z
   10252:	71 81       	ldd	r23, Z+1	; 0x01
   10254:	82 81       	ldd	r24, Z+2	; 0x02
   10256:	93 81       	ldd	r25, Z+3	; 0x03
   10258:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   1025c:	dc 01       	movw	r26, r24
   1025e:	cb 01       	movw	r24, r22
   10260:	f8 01       	movw	r30, r16
   10262:	91 83       	std	Z+1, r25	; 0x01
   10264:	80 83       	st	Z, r24
   10266:	ce 01       	movw	r24, r28
   10268:	89 57       	subi	r24, 0x79	; 121
   1026a:	9e 4f       	sbci	r25, 0xFE	; 254
   1026c:	9e 01       	movw	r18, r28
   1026e:	2d 57       	subi	r18, 0x7D	; 125
   10270:	3e 4f       	sbci	r19, 0xFE	; 254
   10272:	f9 01       	movw	r30, r18
   10274:	20 81       	ld	r18, Z
   10276:	31 81       	ldd	r19, Z+1	; 0x01
   10278:	fc 01       	movw	r30, r24
   1027a:	31 83       	std	Z+1, r19	; 0x01
   1027c:	20 83       	st	Z, r18
   1027e:	ce 01       	movw	r24, r28
   10280:	89 57       	subi	r24, 0x79	; 121
   10282:	9e 4f       	sbci	r25, 0xFE	; 254
   10284:	fc 01       	movw	r30, r24
   10286:	80 81       	ld	r24, Z
   10288:	91 81       	ldd	r25, Z+1	; 0x01
   1028a:	8c 01       	movw	r16, r24
   1028c:	c8 01       	movw	r24, r16
   1028e:	01 97       	sbiw	r24, 0x01	; 1
   10290:	f1 f7       	brne	.-4      	; 0x1028e <travel_path+0x361a>
   10292:	8c 01       	movw	r16, r24
   10294:	ce 01       	movw	r24, r28
   10296:	89 57       	subi	r24, 0x79	; 121
   10298:	9e 4f       	sbci	r25, 0xFE	; 254
   1029a:	fc 01       	movw	r30, r24
   1029c:	11 83       	std	Z+1, r17	; 0x01
   1029e:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
   102a0:	80 91 63 03 	lds	r24, 0x0363
   102a4:	90 91 64 03 	lds	r25, 0x0364
   102a8:	01 96       	adiw	r24, 0x01	; 1
   102aa:	90 93 64 03 	sts	0x0364, r25
   102ae:	80 93 63 03 	sts	0x0363, r24
			pick_drop(master_path[node]);
   102b2:	80 91 63 03 	lds	r24, 0x0363
   102b6:	90 91 64 03 	lds	r25, 0x0364
   102ba:	89 59       	subi	r24, 0x99	; 153
   102bc:	9c 4f       	sbci	r25, 0xFC	; 252
   102be:	fc 01       	movw	r30, r24
   102c0:	80 81       	ld	r24, Z
   102c2:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
   102c6:	80 91 63 03 	lds	r24, 0x0363
   102ca:	90 91 64 03 	lds	r25, 0x0364
   102ce:	01 96       	adiw	r24, 0x01	; 1
   102d0:	90 93 64 03 	sts	0x0364, r25
   102d4:	80 93 63 03 	sts	0x0363, r24
			travel_path(master_path[node]);
   102d8:	80 91 63 03 	lds	r24, 0x0363
   102dc:	90 91 64 03 	lds	r25, 0x0364
   102e0:	89 59       	subi	r24, 0x99	; 153
   102e2:	9c 4f       	sbci	r25, 0xFC	; 252
   102e4:	fc 01       	movw	r30, r24
   102e6:	80 81       	ld	r24, Z
   102e8:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
		}
		else
		correct_right3();
   102ec:	12 c0       	rjmp	.+36     	; 0x10312 <travel_path+0x369e>
   102ee:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
   102f2:	0f c0       	rjmp	.+30     	; 0x10312 <travel_path+0x369e>
	}
	else if(pos_val=='o')
   102f4:	ce 01       	movw	r24, r28
   102f6:	87 57       	subi	r24, 0x77	; 119
   102f8:	9e 4f       	sbci	r25, 0xFE	; 254
   102fa:	fc 01       	movw	r30, r24
   102fc:	80 81       	ld	r24, Z
   102fe:	8f 36       	cpi	r24, 0x6F	; 111
   10300:	41 f4       	brne	.+16     	; 0x10312 <travel_path+0x369e>
	{
		stop();
   10302:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		path_fin=1;
   10306:	81 e0       	ldi	r24, 0x01	; 1
   10308:	90 e0       	ldi	r25, 0x00	; 0
   1030a:	90 93 30 04 	sts	0x0430, r25
   1030e:	80 93 2f 04 	sts	0x042F, r24
	}
halt=0;	
   10312:	10 92 66 03 	sts	0x0366, r1
   10316:	10 92 65 03 	sts	0x0365, r1
TIMSK3=1;
   1031a:	81 e7       	ldi	r24, 0x71	; 113
   1031c:	90 e0       	ldi	r25, 0x00	; 0
   1031e:	21 e0       	ldi	r18, 0x01	; 1
   10320:	fc 01       	movw	r30, r24
   10322:	20 83       	st	Z, r18
}
   10324:	c7 57       	subi	r28, 0x77	; 119
   10326:	de 4f       	sbci	r29, 0xFE	; 254
   10328:	0f b6       	in	r0, 0x3f	; 63
   1032a:	f8 94       	cli
   1032c:	de bf       	out	0x3e, r29	; 62
   1032e:	0f be       	out	0x3f, r0	; 63
   10330:	cd bf       	out	0x3d, r28	; 61
   10332:	df 91       	pop	r29
   10334:	cf 91       	pop	r28
   10336:	1f 91       	pop	r17
   10338:	0f 91       	pop	r16
   1033a:	08 95       	ret

0001033c <line_following>:
* Example Call:		line_following();
*/

void line_following()

{
   1033c:	cf 93       	push	r28
   1033e:	df 93       	push	r29
   10340:	cd b7       	in	r28, 0x3d	; 61
   10342:	de b7       	in	r29, 0x3e	; 62

	TIMSK3 = 0x01;
   10344:	81 e7       	ldi	r24, 0x71	; 113
   10346:	90 e0       	ldi	r25, 0x00	; 0
   10348:	21 e0       	ldi	r18, 0x01	; 1
   1034a:	fc 01       	movw	r30, r24
   1034c:	20 83       	st	Z, r18

}
   1034e:	df 91       	pop	r29
   10350:	cf 91       	pop	r28
   10352:	08 95       	ret

00010354 <lcd_port_config>:

*/

void lcd_port_config(void)

{
   10354:	cf 93       	push	r28
   10356:	df 93       	push	r29
   10358:	cd b7       	in	r28, 0x3d	; 61
   1035a:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
   1035c:	87 e2       	ldi	r24, 0x27	; 39
   1035e:	90 e0       	ldi	r25, 0x00	; 0
   10360:	27 e2       	ldi	r18, 0x27	; 39
   10362:	30 e0       	ldi	r19, 0x00	; 0
   10364:	f9 01       	movw	r30, r18
   10366:	20 81       	ld	r18, Z
   10368:	27 6f       	ori	r18, 0xF7	; 247
   1036a:	fc 01       	movw	r30, r24
   1036c:	20 83       	st	Z, r18

	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
   1036e:	88 e2       	ldi	r24, 0x28	; 40
   10370:	90 e0       	ldi	r25, 0x00	; 0
   10372:	28 e2       	ldi	r18, 0x28	; 40
   10374:	30 e0       	ldi	r19, 0x00	; 0
   10376:	f9 01       	movw	r30, r18
   10378:	20 81       	ld	r18, Z
   1037a:	20 78       	andi	r18, 0x80	; 128
   1037c:	fc 01       	movw	r30, r24
   1037e:	20 83       	st	Z, r18

}
   10380:	df 91       	pop	r29
   10382:	cf 91       	pop	r28
   10384:	08 95       	ret

00010386 <buzzer_pin_config>:

*/

void buzzer_pin_config(void)

{
   10386:	cf 93       	push	r28
   10388:	df 93       	push	r29
   1038a:	cd b7       	in	r28, 0x3d	; 61
   1038c:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0x08; //Setting PORTC 3 as output
   1038e:	87 e2       	ldi	r24, 0x27	; 39
   10390:	90 e0       	ldi	r25, 0x00	; 0
   10392:	27 e2       	ldi	r18, 0x27	; 39
   10394:	30 e0       	ldi	r19, 0x00	; 0
   10396:	f9 01       	movw	r30, r18
   10398:	20 81       	ld	r18, Z
   1039a:	28 60       	ori	r18, 0x08	; 8
   1039c:	fc 01       	movw	r30, r24
   1039e:	20 83       	st	Z, r18

	PORTC = PORTC & 0xF7; //Setting PORTC 3 logic low to turnoff buzzer
   103a0:	88 e2       	ldi	r24, 0x28	; 40
   103a2:	90 e0       	ldi	r25, 0x00	; 0
   103a4:	28 e2       	ldi	r18, 0x28	; 40
   103a6:	30 e0       	ldi	r19, 0x00	; 0
   103a8:	f9 01       	movw	r30, r18
   103aa:	20 81       	ld	r18, Z
   103ac:	27 7f       	andi	r18, 0xF7	; 247
   103ae:	fc 01       	movw	r30, r24
   103b0:	20 83       	st	Z, r18

}
   103b2:	df 91       	pop	r29
   103b4:	cf 91       	pop	r28
   103b6:	08 95       	ret

000103b8 <buzzer_on>:

*/

void buzzer_on(void)

{
   103b8:	cf 93       	push	r28
   103ba:	df 93       	push	r29
   103bc:	0f 92       	push	r0
   103be:	cd b7       	in	r28, 0x3d	; 61
   103c0:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
   103c2:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
   103c4:	86 e2       	ldi	r24, 0x26	; 38
   103c6:	90 e0       	ldi	r25, 0x00	; 0
   103c8:	fc 01       	movw	r30, r24
   103ca:	80 81       	ld	r24, Z
   103cc:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore | 0x08;
   103ce:	89 81       	ldd	r24, Y+1	; 0x01
   103d0:	88 60       	ori	r24, 0x08	; 8
   103d2:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
   103d4:	88 e2       	ldi	r24, 0x28	; 40
   103d6:	90 e0       	ldi	r25, 0x00	; 0
   103d8:	29 81       	ldd	r18, Y+1	; 0x01
   103da:	fc 01       	movw	r30, r24
   103dc:	20 83       	st	Z, r18

}
   103de:	0f 90       	pop	r0
   103e0:	df 91       	pop	r29
   103e2:	cf 91       	pop	r28
   103e4:	08 95       	ret

000103e6 <buzzer_off>:

*/

void buzzer_off(void)

{
   103e6:	cf 93       	push	r28
   103e8:	df 93       	push	r29
   103ea:	0f 92       	push	r0
   103ec:	cd b7       	in	r28, 0x3d	; 61
   103ee:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
   103f0:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
   103f2:	86 e2       	ldi	r24, 0x26	; 38
   103f4:	90 e0       	ldi	r25, 0x00	; 0
   103f6:	fc 01       	movw	r30, r24
   103f8:	80 81       	ld	r24, Z
   103fa:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore & 0xF7;
   103fc:	89 81       	ldd	r24, Y+1	; 0x01
   103fe:	87 7f       	andi	r24, 0xF7	; 247
   10400:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
   10402:	88 e2       	ldi	r24, 0x28	; 40
   10404:	90 e0       	ldi	r25, 0x00	; 0
   10406:	29 81       	ldd	r18, Y+1	; 0x01
   10408:	fc 01       	movw	r30, r24
   1040a:	20 83       	st	Z, r18

}
   1040c:	0f 90       	pop	r0
   1040e:	df 91       	pop	r29
   10410:	cf 91       	pop	r28
   10412:	08 95       	ret

00010414 <buzz>:

*/

void buzz(unsigned long mst)

{
   10414:	0f 93       	push	r16
   10416:	1f 93       	push	r17
   10418:	cf 93       	push	r28
   1041a:	df 93       	push	r29
   1041c:	cd b7       	in	r28, 0x3d	; 61
   1041e:	de b7       	in	r29, 0x3e	; 62
   10420:	62 97       	sbiw	r28, 0x12	; 18
   10422:	0f b6       	in	r0, 0x3f	; 63
   10424:	f8 94       	cli
   10426:	de bf       	out	0x3e, r29	; 62
   10428:	0f be       	out	0x3f, r0	; 63
   1042a:	cd bf       	out	0x3d, r28	; 61
   1042c:	6f 87       	std	Y+15, r22	; 0x0f
   1042e:	78 8b       	std	Y+16, r23	; 0x10
   10430:	89 8b       	std	Y+17, r24	; 0x11
   10432:	9a 8b       	std	Y+18, r25	; 0x12

	buzzer_on();
   10434:	0e 94 dc 81 	call	0x103b8	; 0x103b8 <buzzer_on>
   10438:	80 e0       	ldi	r24, 0x00	; 0
   1043a:	90 e0       	ldi	r25, 0x00	; 0
   1043c:	a8 e4       	ldi	r26, 0x48	; 72
   1043e:	b2 e4       	ldi	r27, 0x42	; 66
   10440:	89 83       	std	Y+1, r24	; 0x01
   10442:	9a 83       	std	Y+2, r25	; 0x02
   10444:	ab 83       	std	Y+3, r26	; 0x03
   10446:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10448:	69 81       	ldd	r22, Y+1	; 0x01
   1044a:	7a 81       	ldd	r23, Y+2	; 0x02
   1044c:	8b 81       	ldd	r24, Y+3	; 0x03
   1044e:	9c 81       	ldd	r25, Y+4	; 0x04
   10450:	26 e6       	ldi	r18, 0x66	; 102
   10452:	36 e6       	ldi	r19, 0x66	; 102
   10454:	46 e6       	ldi	r20, 0x66	; 102
   10456:	55 e4       	ldi	r21, 0x45	; 69
   10458:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   1045c:	dc 01       	movw	r26, r24
   1045e:	cb 01       	movw	r24, r22
   10460:	8d 83       	std	Y+5, r24	; 0x05
   10462:	9e 83       	std	Y+6, r25	; 0x06
   10464:	af 83       	std	Y+7, r26	; 0x07
   10466:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
   10468:	11 e0       	ldi	r17, 0x01	; 1
   1046a:	6d 81       	ldd	r22, Y+5	; 0x05
   1046c:	7e 81       	ldd	r23, Y+6	; 0x06
   1046e:	8f 81       	ldd	r24, Y+7	; 0x07
   10470:	98 85       	ldd	r25, Y+8	; 0x08
   10472:	20 e0       	ldi	r18, 0x00	; 0
   10474:	30 e0       	ldi	r19, 0x00	; 0
   10476:	40 e8       	ldi	r20, 0x80	; 128
   10478:	5f e3       	ldi	r21, 0x3F	; 63
   1047a:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
   1047e:	88 23       	and	r24, r24
   10480:	0c f0       	brlt	.+2      	; 0x10484 <buzz+0x70>
   10482:	10 e0       	ldi	r17, 0x00	; 0
   10484:	11 23       	and	r17, r17
   10486:	29 f0       	breq	.+10     	; 0x10492 <buzz+0x7e>
		__ticks = 1;
   10488:	81 e0       	ldi	r24, 0x01	; 1
   1048a:	90 e0       	ldi	r25, 0x00	; 0
   1048c:	9a 87       	std	Y+10, r25	; 0x0a
   1048e:	89 87       	std	Y+9, r24	; 0x09
   10490:	46 c0       	rjmp	.+140    	; 0x1051e <buzz+0x10a>
	else if (__tmp > 65535)
   10492:	11 e0       	ldi	r17, 0x01	; 1
   10494:	6d 81       	ldd	r22, Y+5	; 0x05
   10496:	7e 81       	ldd	r23, Y+6	; 0x06
   10498:	8f 81       	ldd	r24, Y+7	; 0x07
   1049a:	98 85       	ldd	r25, Y+8	; 0x08
   1049c:	20 e0       	ldi	r18, 0x00	; 0
   1049e:	3f ef       	ldi	r19, 0xFF	; 255
   104a0:	4f e7       	ldi	r20, 0x7F	; 127
   104a2:	57 e4       	ldi	r21, 0x47	; 71
   104a4:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
   104a8:	18 16       	cp	r1, r24
   104aa:	0c f0       	brlt	.+2      	; 0x104ae <buzz+0x9a>
   104ac:	10 e0       	ldi	r17, 0x00	; 0
   104ae:	11 23       	and	r17, r17
   104b0:	61 f1       	breq	.+88     	; 0x1050a <buzz+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   104b2:	69 81       	ldd	r22, Y+1	; 0x01
   104b4:	7a 81       	ldd	r23, Y+2	; 0x02
   104b6:	8b 81       	ldd	r24, Y+3	; 0x03
   104b8:	9c 81       	ldd	r25, Y+4	; 0x04
   104ba:	20 e0       	ldi	r18, 0x00	; 0
   104bc:	30 e0       	ldi	r19, 0x00	; 0
   104be:	40 e2       	ldi	r20, 0x20	; 32
   104c0:	51 e4       	ldi	r21, 0x41	; 65
   104c2:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   104c6:	dc 01       	movw	r26, r24
   104c8:	cb 01       	movw	r24, r22
   104ca:	bc 01       	movw	r22, r24
   104cc:	cd 01       	movw	r24, r26
   104ce:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   104d2:	dc 01       	movw	r26, r24
   104d4:	cb 01       	movw	r24, r22
   104d6:	9a 87       	std	Y+10, r25	; 0x0a
   104d8:	89 87       	std	Y+9, r24	; 0x09
   104da:	12 c0       	rjmp	.+36     	; 0x10500 <buzz+0xec>
   104dc:	80 e7       	ldi	r24, 0x70	; 112
   104de:	91 e0       	ldi	r25, 0x01	; 1
   104e0:	9c 87       	std	Y+12, r25	; 0x0c
   104e2:	8b 87       	std	Y+11, r24	; 0x0b
   104e4:	8b 85       	ldd	r24, Y+11	; 0x0b
   104e6:	9c 85       	ldd	r25, Y+12	; 0x0c
   104e8:	8c 01       	movw	r16, r24
   104ea:	c8 01       	movw	r24, r16
   104ec:	01 97       	sbiw	r24, 0x01	; 1
   104ee:	f1 f7       	brne	.-4      	; 0x104ec <buzz+0xd8>
   104f0:	8c 01       	movw	r16, r24
   104f2:	1c 87       	std	Y+12, r17	; 0x0c
   104f4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   104f6:	89 85       	ldd	r24, Y+9	; 0x09
   104f8:	9a 85       	ldd	r25, Y+10	; 0x0a
   104fa:	01 97       	sbiw	r24, 0x01	; 1
   104fc:	9a 87       	std	Y+10, r25	; 0x0a
   104fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10500:	89 85       	ldd	r24, Y+9	; 0x09
   10502:	9a 85       	ldd	r25, Y+10	; 0x0a
   10504:	00 97       	sbiw	r24, 0x00	; 0
   10506:	51 f7       	brne	.-44     	; 0x104dc <buzz+0xc8>
   10508:	17 c0       	rjmp	.+46     	; 0x10538 <buzz+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1050a:	6d 81       	ldd	r22, Y+5	; 0x05
   1050c:	7e 81       	ldd	r23, Y+6	; 0x06
   1050e:	8f 81       	ldd	r24, Y+7	; 0x07
   10510:	98 85       	ldd	r25, Y+8	; 0x08
   10512:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   10516:	dc 01       	movw	r26, r24
   10518:	cb 01       	movw	r24, r22
   1051a:	9a 87       	std	Y+10, r25	; 0x0a
   1051c:	89 87       	std	Y+9, r24	; 0x09
   1051e:	89 85       	ldd	r24, Y+9	; 0x09
   10520:	9a 85       	ldd	r25, Y+10	; 0x0a
   10522:	9e 87       	std	Y+14, r25	; 0x0e
   10524:	8d 87       	std	Y+13, r24	; 0x0d
   10526:	8d 85       	ldd	r24, Y+13	; 0x0d
   10528:	9e 85       	ldd	r25, Y+14	; 0x0e
   1052a:	8c 01       	movw	r16, r24
   1052c:	c8 01       	movw	r24, r16
   1052e:	01 97       	sbiw	r24, 0x01	; 1
   10530:	f1 f7       	brne	.-4      	; 0x1052e <buzz+0x11a>
   10532:	8c 01       	movw	r16, r24
   10534:	1e 87       	std	Y+14, r17	; 0x0e
   10536:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(50);

	buzzer_off();
   10538:	0e 94 f3 81 	call	0x103e6	; 0x103e6 <buzzer_off>

}
   1053c:	62 96       	adiw	r28, 0x12	; 18
   1053e:	0f b6       	in	r0, 0x3f	; 63
   10540:	f8 94       	cli
   10542:	de bf       	out	0x3e, r29	; 62
   10544:	0f be       	out	0x3f, r0	; 63
   10546:	cd bf       	out	0x3d, r28	; 61
   10548:	df 91       	pop	r29
   1054a:	cf 91       	pop	r28
   1054c:	1f 91       	pop	r17
   1054e:	0f 91       	pop	r16
   10550:	08 95       	ret

00010552 <timer1_init>:

*/

void timer1_init()

{
   10552:	cf 93       	push	r28
   10554:	df 93       	push	r29
   10556:	cd b7       	in	r28, 0x3d	; 61
   10558:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0X00;
   1055a:	80 e8       	ldi	r24, 0x80	; 128
   1055c:	90 e0       	ldi	r25, 0x00	; 0
   1055e:	fc 01       	movw	r30, r24
   10560:	10 82       	st	Z, r1

	ICR1 = 1023;
   10562:	86 e8       	ldi	r24, 0x86	; 134
   10564:	90 e0       	ldi	r25, 0x00	; 0
   10566:	2f ef       	ldi	r18, 0xFF	; 255
   10568:	33 e0       	ldi	r19, 0x03	; 3
   1056a:	fc 01       	movw	r30, r24
   1056c:	31 83       	std	Z+1, r19	; 0x01
   1056e:	20 83       	st	Z, r18

	TCNT1H = 0XFC;
   10570:	85 e8       	ldi	r24, 0x85	; 133
   10572:	90 e0       	ldi	r25, 0x00	; 0
   10574:	2c ef       	ldi	r18, 0xFC	; 252
   10576:	fc 01       	movw	r30, r24
   10578:	20 83       	st	Z, r18

	TCNT1L = 0X01;
   1057a:	84 e8       	ldi	r24, 0x84	; 132
   1057c:	90 e0       	ldi	r25, 0x00	; 0
   1057e:	21 e0       	ldi	r18, 0x01	; 1
   10580:	fc 01       	movw	r30, r24
   10582:	20 83       	st	Z, r18

	OCR1AH = 0x03;	//Output compare Register high value for servo 1
   10584:	89 e8       	ldi	r24, 0x89	; 137
   10586:	90 e0       	ldi	r25, 0x00	; 0
   10588:	23 e0       	ldi	r18, 0x03	; 3
   1058a:	fc 01       	movw	r30, r24
   1058c:	20 83       	st	Z, r18

	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
   1058e:	88 e8       	ldi	r24, 0x88	; 136
   10590:	90 e0       	ldi	r25, 0x00	; 0
   10592:	2f ef       	ldi	r18, 0xFF	; 255
   10594:	fc 01       	movw	r30, r24
   10596:	20 83       	st	Z, r18

	OCR1BH = 0x03;	//Output compare Register high value for servo 2
   10598:	8b e8       	ldi	r24, 0x8B	; 139
   1059a:	90 e0       	ldi	r25, 0x00	; 0
   1059c:	23 e0       	ldi	r18, 0x03	; 3
   1059e:	fc 01       	movw	r30, r24
   105a0:	20 83       	st	Z, r18

	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
   105a2:	8a e8       	ldi	r24, 0x8A	; 138
   105a4:	90 e0       	ldi	r25, 0x00	; 0
   105a6:	2f ef       	ldi	r18, 0xFF	; 255
   105a8:	fc 01       	movw	r30, r24
   105aa:	20 83       	st	Z, r18

	OCR1CH = 0x03;	//Output compare Register high value for servo 3
   105ac:	8d e8       	ldi	r24, 0x8D	; 141
   105ae:	90 e0       	ldi	r25, 0x00	; 0
   105b0:	23 e0       	ldi	r18, 0x03	; 3
   105b2:	fc 01       	movw	r30, r24
   105b4:	20 83       	st	Z, r18

	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
   105b6:	8c e8       	ldi	r24, 0x8C	; 140
   105b8:	90 e0       	ldi	r25, 0x00	; 0
   105ba:	2f ef       	ldi	r18, 0xFF	; 255
   105bc:	fc 01       	movw	r30, r24
   105be:	20 83       	st	Z, r18

	ICR1H  = 0x03;
   105c0:	87 e8       	ldi	r24, 0x87	; 135
   105c2:	90 e0       	ldi	r25, 0x00	; 0
   105c4:	23 e0       	ldi	r18, 0x03	; 3
   105c6:	fc 01       	movw	r30, r24
   105c8:	20 83       	st	Z, r18

	ICR1L  = 0xFF;
   105ca:	86 e8       	ldi	r24, 0x86	; 134
   105cc:	90 e0       	ldi	r25, 0x00	; 0
   105ce:	2f ef       	ldi	r18, 0xFF	; 255
   105d0:	fc 01       	movw	r30, r24
   105d2:	20 83       	st	Z, r18

	TCCR1A = 0XAB;
   105d4:	80 e8       	ldi	r24, 0x80	; 128
   105d6:	90 e0       	ldi	r25, 0x00	; 0
   105d8:	2b ea       	ldi	r18, 0xAB	; 171
   105da:	fc 01       	movw	r30, r24
   105dc:	20 83       	st	Z, r18

	TCCR1B = 0X0C;
   105de:	81 e8       	ldi	r24, 0x81	; 129
   105e0:	90 e0       	ldi	r25, 0x00	; 0
   105e2:	2c e0       	ldi	r18, 0x0C	; 12
   105e4:	fc 01       	movw	r30, r24
   105e6:	20 83       	st	Z, r18

	TCCR1C = 0x00;
   105e8:	82 e8       	ldi	r24, 0x82	; 130
   105ea:	90 e0       	ldi	r25, 0x00	; 0
   105ec:	fc 01       	movw	r30, r24
   105ee:	10 82       	st	Z, r1

}
   105f0:	df 91       	pop	r29
   105f2:	cf 91       	pop	r28
   105f4:	08 95       	ret

000105f6 <timer3_init>:

*/

void timer3_init(void)

{
   105f6:	cf 93       	push	r28
   105f8:	df 93       	push	r29
   105fa:	cd b7       	in	r28, 0x3d	; 61
   105fc:	de b7       	in	r29, 0x3e	; 62

	TCCR3B = 0x00; //stop
   105fe:	81 e9       	ldi	r24, 0x91	; 145
   10600:	90 e0       	ldi	r25, 0x00	; 0
   10602:	fc 01       	movw	r30, r24
   10604:	10 82       	st	Z, r1

	TCNT3 = 0xFDC0; // 0.01s
   10606:	84 e9       	ldi	r24, 0x94	; 148
   10608:	90 e0       	ldi	r25, 0x00	; 0
   1060a:	20 ec       	ldi	r18, 0xC0	; 192
   1060c:	3d ef       	ldi	r19, 0xFD	; 253
   1060e:	fc 01       	movw	r30, r24
   10610:	31 83       	std	Z+1, r19	; 0x01
   10612:	20 83       	st	Z, r18

	OCR3AH = 0x00; //Output Compare Register (OCR)- Not used
   10614:	89 e9       	ldi	r24, 0x99	; 153
   10616:	90 e0       	ldi	r25, 0x00	; 0
   10618:	fc 01       	movw	r30, r24
   1061a:	10 82       	st	Z, r1

	OCR3AL = 0x00; //Output Compare Register (OCR)- Not used
   1061c:	88 e9       	ldi	r24, 0x98	; 152
   1061e:	90 e0       	ldi	r25, 0x00	; 0
   10620:	fc 01       	movw	r30, r24
   10622:	10 82       	st	Z, r1

	OCR3BH = 0x00; //Output Compare Register (OCR)- Not used
   10624:	8b e9       	ldi	r24, 0x9B	; 155
   10626:	90 e0       	ldi	r25, 0x00	; 0
   10628:	fc 01       	movw	r30, r24
   1062a:	10 82       	st	Z, r1

	OCR3BL = 0x00; //Output Compare Register (OCR)- Not used
   1062c:	8a e9       	ldi	r24, 0x9A	; 154
   1062e:	90 e0       	ldi	r25, 0x00	; 0
   10630:	fc 01       	movw	r30, r24
   10632:	10 82       	st	Z, r1

	OCR3CH = 0x00; //Output Compare Register (OCR)- Not used
   10634:	8d e9       	ldi	r24, 0x9D	; 157
   10636:	90 e0       	ldi	r25, 0x00	; 0
   10638:	fc 01       	movw	r30, r24
   1063a:	10 82       	st	Z, r1

	OCR3CL = 0x00; //Output Compare Register (OCR)- Not used
   1063c:	8c e9       	ldi	r24, 0x9C	; 156
   1063e:	90 e0       	ldi	r25, 0x00	; 0
   10640:	fc 01       	movw	r30, r24
   10642:	10 82       	st	Z, r1

	ICR3H = 0x00; //Input Capture Register (ICR)- Not used
   10644:	87 e9       	ldi	r24, 0x97	; 151
   10646:	90 e0       	ldi	r25, 0x00	; 0
   10648:	fc 01       	movw	r30, r24
   1064a:	10 82       	st	Z, r1

	ICR3L = 0x00; //Input Capture Register (ICR)- Not used
   1064c:	86 e9       	ldi	r24, 0x96	; 150
   1064e:	90 e0       	ldi	r25, 0x00	; 0
   10650:	fc 01       	movw	r30, r24
   10652:	10 82       	st	Z, r1

	TCCR3A = 0x00;
   10654:	80 e9       	ldi	r24, 0x90	; 144
   10656:	90 e0       	ldi	r25, 0x00	; 0
   10658:	fc 01       	movw	r30, r24
   1065a:	10 82       	st	Z, r1

	TCCR3C = 0x00;
   1065c:	82 e9       	ldi	r24, 0x92	; 146
   1065e:	90 e0       	ldi	r25, 0x00	; 0
   10660:	fc 01       	movw	r30, r24
   10662:	10 82       	st	Z, r1

	TCCR3B = 0x04; //Pre-scaler 256 1-0-0
   10664:	81 e9       	ldi	r24, 0x91	; 145
   10666:	90 e0       	ldi	r25, 0x00	; 0
   10668:	24 e0       	ldi	r18, 0x04	; 4
   1066a:	fc 01       	movw	r30, r24
   1066c:	20 83       	st	Z, r18

}
   1066e:	df 91       	pop	r29
   10670:	cf 91       	pop	r28
   10672:	08 95       	ret

00010674 <timer4_init>:

*/

void timer4_init(void) 

{
   10674:	cf 93       	push	r28
   10676:	df 93       	push	r29
   10678:	cd b7       	in	r28, 0x3d	; 61
   1067a:	de b7       	in	r29, 0x3e	; 62

	TCCR4B = 0x00; //stop
   1067c:	81 ea       	ldi	r24, 0xA1	; 161
   1067e:	90 e0       	ldi	r25, 0x00	; 0
   10680:	fc 01       	movw	r30, r24
   10682:	10 82       	st	Z, r1

	TCNT4 = 0xE980; // 0.1s
   10684:	84 ea       	ldi	r24, 0xA4	; 164
   10686:	90 e0       	ldi	r25, 0x00	; 0
   10688:	20 e8       	ldi	r18, 0x80	; 128
   1068a:	39 ee       	ldi	r19, 0xE9	; 233
   1068c:	fc 01       	movw	r30, r24
   1068e:	31 83       	std	Z+1, r19	; 0x01
   10690:	20 83       	st	Z, r18

	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
   10692:	89 ea       	ldi	r24, 0xA9	; 169
   10694:	90 e0       	ldi	r25, 0x00	; 0
   10696:	fc 01       	movw	r30, r24
   10698:	10 82       	st	Z, r1

	OCR4AL = 0x00; //Output Compare Register (OCR)- Not used
   1069a:	88 ea       	ldi	r24, 0xA8	; 168
   1069c:	90 e0       	ldi	r25, 0x00	; 0
   1069e:	fc 01       	movw	r30, r24
   106a0:	10 82       	st	Z, r1

	OCR4BH = 0x00; //Output Compare Register (OCR)- Not used
   106a2:	8b ea       	ldi	r24, 0xAB	; 171
   106a4:	90 e0       	ldi	r25, 0x00	; 0
   106a6:	fc 01       	movw	r30, r24
   106a8:	10 82       	st	Z, r1

	OCR4BL = 0x00; //Output Compare Register (OCR)- Not used
   106aa:	8a ea       	ldi	r24, 0xAA	; 170
   106ac:	90 e0       	ldi	r25, 0x00	; 0
   106ae:	fc 01       	movw	r30, r24
   106b0:	10 82       	st	Z, r1

	OCR4CH = 0x00; //Output Compare Register (OCR)- Not used
   106b2:	8d ea       	ldi	r24, 0xAD	; 173
   106b4:	90 e0       	ldi	r25, 0x00	; 0
   106b6:	fc 01       	movw	r30, r24
   106b8:	10 82       	st	Z, r1

	OCR4CL = 0x00; //Output Compare Register (OCR)- Not used
   106ba:	8c ea       	ldi	r24, 0xAC	; 172
   106bc:	90 e0       	ldi	r25, 0x00	; 0
   106be:	fc 01       	movw	r30, r24
   106c0:	10 82       	st	Z, r1

	ICR4H = 0x00; //Input Capture Register (ICR)- Not used
   106c2:	87 ea       	ldi	r24, 0xA7	; 167
   106c4:	90 e0       	ldi	r25, 0x00	; 0
   106c6:	fc 01       	movw	r30, r24
   106c8:	10 82       	st	Z, r1

	ICR4L = 0x00; //Input Capture Register (ICR)- Not used
   106ca:	86 ea       	ldi	r24, 0xA6	; 166
   106cc:	90 e0       	ldi	r25, 0x00	; 0
   106ce:	fc 01       	movw	r30, r24
   106d0:	10 82       	st	Z, r1

	TCCR4A = 0x00;
   106d2:	80 ea       	ldi	r24, 0xA0	; 160
   106d4:	90 e0       	ldi	r25, 0x00	; 0
   106d6:	fc 01       	movw	r30, r24
   106d8:	10 82       	st	Z, r1

	TCCR4C = 0x00;
   106da:	82 ea       	ldi	r24, 0xA2	; 162
   106dc:	90 e0       	ldi	r25, 0x00	; 0
   106de:	fc 01       	movw	r30, r24
   106e0:	10 82       	st	Z, r1

	TCCR4B = 0x04; //Pre-scaler 256 1-0-0
   106e2:	81 ea       	ldi	r24, 0xA1	; 161
   106e4:	90 e0       	ldi	r25, 0x00	; 0
   106e6:	24 e0       	ldi	r18, 0x04	; 4
   106e8:	fc 01       	movw	r30, r24
   106ea:	20 83       	st	Z, r18

}
   106ec:	df 91       	pop	r29
   106ee:	cf 91       	pop	r28
   106f0:	08 95       	ret

000106f2 <timer5_init>:

*/

void timer5_init()

{
   106f2:	cf 93       	push	r28
   106f4:	df 93       	push	r29
   106f6:	cd b7       	in	r28, 0x3d	; 61
   106f8:	de b7       	in	r29, 0x3e	; 62

    TCCR5B = 0x00; //Stop
   106fa:	81 e2       	ldi	r24, 0x21	; 33
   106fc:	91 e0       	ldi	r25, 0x01	; 1
   106fe:	fc 01       	movw	r30, r24
   10700:	10 82       	st	Z, r1

    TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
   10702:	85 e2       	ldi	r24, 0x25	; 37
   10704:	91 e0       	ldi	r25, 0x01	; 1
   10706:	2f ef       	ldi	r18, 0xFF	; 255
   10708:	fc 01       	movw	r30, r24
   1070a:	20 83       	st	Z, r18

    TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
   1070c:	84 e2       	ldi	r24, 0x24	; 36
   1070e:	91 e0       	ldi	r25, 0x01	; 1
   10710:	21 e0       	ldi	r18, 0x01	; 1
   10712:	fc 01       	movw	r30, r24
   10714:	20 83       	st	Z, r18

    OCR5AH = 0x00; //Output compare register high value for Left Motor
   10716:	89 e2       	ldi	r24, 0x29	; 41
   10718:	91 e0       	ldi	r25, 0x01	; 1
   1071a:	fc 01       	movw	r30, r24
   1071c:	10 82       	st	Z, r1

    OCR5AL = 0xFF; //Output compare register low value for Left Motor
   1071e:	88 e2       	ldi	r24, 0x28	; 40
   10720:	91 e0       	ldi	r25, 0x01	; 1
   10722:	2f ef       	ldi	r18, 0xFF	; 255
   10724:	fc 01       	movw	r30, r24
   10726:	20 83       	st	Z, r18

    OCR5BH = 0x00; //Output compare register high value for Right Motor
   10728:	8b e2       	ldi	r24, 0x2B	; 43
   1072a:	91 e0       	ldi	r25, 0x01	; 1
   1072c:	fc 01       	movw	r30, r24
   1072e:	10 82       	st	Z, r1

    OCR5BL = 0xFF; //Output compare register low value for Right Motor
   10730:	8a e2       	ldi	r24, 0x2A	; 42
   10732:	91 e0       	ldi	r25, 0x01	; 1
   10734:	2f ef       	ldi	r18, 0xFF	; 255
   10736:	fc 01       	movw	r30, r24
   10738:	20 83       	st	Z, r18

    OCR5CH = 0x00; //Output compare register high value for Motor C1
   1073a:	8d e2       	ldi	r24, 0x2D	; 45
   1073c:	91 e0       	ldi	r25, 0x01	; 1
   1073e:	fc 01       	movw	r30, r24
   10740:	10 82       	st	Z, r1

    OCR5CL = 0xFF; //Output compare register low value for Motor C1
   10742:	8c e2       	ldi	r24, 0x2C	; 44
   10744:	91 e0       	ldi	r25, 0x01	; 1
   10746:	2f ef       	ldi	r18, 0xFF	; 255
   10748:	fc 01       	movw	r30, r24
   1074a:	20 83       	st	Z, r18

    TCCR5A = 0xA9;
   1074c:	80 e2       	ldi	r24, 0x20	; 32
   1074e:	91 e0       	ldi	r25, 0x01	; 1
   10750:	29 ea       	ldi	r18, 0xA9	; 169
   10752:	fc 01       	movw	r30, r24
   10754:	20 83       	st	Z, r18

				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/



    TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
   10756:	81 e2       	ldi	r24, 0x21	; 33
   10758:	91 e0       	ldi	r25, 0x01	; 1
   1075a:	2b e0       	ldi	r18, 0x0B	; 11
   1075c:	fc 01       	movw	r30, r24
   1075e:	20 83       	st	Z, r18

}
   10760:	df 91       	pop	r29
   10762:	cf 91       	pop	r28
   10764:	08 95       	ret

00010766 <port_init>:

*/

void port_init()

{   DDRJ= DDRJ | 0xF7;
   10766:	cf 93       	push	r28
   10768:	df 93       	push	r29
   1076a:	cd b7       	in	r28, 0x3d	; 61
   1076c:	de b7       	in	r29, 0x3e	; 62
   1076e:	84 e0       	ldi	r24, 0x04	; 4
   10770:	91 e0       	ldi	r25, 0x01	; 1
   10772:	24 e0       	ldi	r18, 0x04	; 4
   10774:	31 e0       	ldi	r19, 0x01	; 1
   10776:	f9 01       	movw	r30, r18
   10778:	20 81       	ld	r18, Z
   1077a:	27 6f       	ori	r18, 0xF7	; 247
   1077c:	fc 01       	movw	r30, r24
   1077e:	20 83       	st	Z, r18

	PORTJ=0xFF;
   10780:	85 e0       	ldi	r24, 0x05	; 5
   10782:	91 e0       	ldi	r25, 0x01	; 1
   10784:	2f ef       	ldi	r18, 0xFF	; 255
   10786:	fc 01       	movw	r30, r24
   10788:	20 83       	st	Z, r18

	buzzer_pin_config(); //Buzzer pin configuration
   1078a:	0e 94 c3 81 	call	0x10386	; 0x10386 <buzzer_pin_config>

	lcd_port_config();  //LCD pin configuration
   1078e:	0e 94 aa 81 	call	0x10354	; 0x10354 <lcd_port_config>

	

	adc_pin_config();  //ADC pin configuration
   10792:	0e 94 15 1b 	call	0x362a	; 0x362a <adc_pin_config>

	motion_pin_config(); //Motion pin configuration
   10796:	0e 94 a2 0b 	call	0x1744	; 0x1744 <motion_pin_config>

	left_encoder_pin_config(); //Left Encoder pin configuration
   1079a:	0e 94 cd 0b 	call	0x179a	; 0x179a <left_encoder_pin_config>

	right_encoder_pin_config(); //Right Encoder pin configuration
   1079e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <right_encoder_pin_config>
	
	servo1_pin_config();
   107a2:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <servo1_pin_config>
	
	servo2_pin_config();
   107a6:	0e 94 8c 1c 	call	0x3918	; 0x3918 <servo2_pin_config>
	
	servo3_pin_config();
   107aa:	0e 94 a5 1c 	call	0x394a	; 0x394a <servo3_pin_config>

}
   107ae:	df 91       	pop	r29
   107b0:	cf 91       	pop	r28
   107b2:	08 95       	ret

000107b4 <init_devices>:

*/

void init_devices(void)

{
   107b4:	cf 93       	push	r28
   107b6:	df 93       	push	r29
   107b8:	cd b7       	in	r28, 0x3d	; 61
   107ba:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupts
   107bc:	f8 94       	cli

	

	port_init(); //Initiate all ports
   107be:	0e 94 b3 83 	call	0x10766	; 0x10766 <port_init>

	adc_init(); //Initiate ADC registers
   107c2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <adc_init>
	
	uart2_init();
   107c6:	8d ec       	ldi	r24, 0xCD	; 205
   107c8:	9b e8       	ldi	r25, 0x8B	; 139
   107ca:	fc 01       	movw	r30, r24
   107cc:	19 95       	eicall


	//Initiate timers

	timer1_init();
   107ce:	0e 94 a9 82 	call	0x10552	; 0x10552 <timer1_init>

	timer5_init();
   107d2:	0e 94 79 83 	call	0x106f2	; 0x106f2 <timer5_init>

	timer3_init();
   107d6:	0e 94 fb 82 	call	0x105f6	; 0x105f6 <timer3_init>

	timer4_init();
   107da:	0e 94 3a 83 	call	0x10674	; 0x10674 <timer4_init>

	

	//Initiate position encoder interrupts

	left_position_encoder_interrupt_init();
   107de:	0e 94 16 0c 	call	0x182c	; 0x182c <left_position_encoder_interrupt_init>

	right_position_encoder_interrupt_init();
   107e2:	0e 94 31 0c 	call	0x1862	; 0x1862 <right_position_encoder_interrupt_init>

	

	sei(); //Enables the global interrupts
   107e6:	78 94       	sei

}
   107e8:	df 91       	pop	r29
   107ea:	cf 91       	pop	r28
   107ec:	08 95       	ret

000107ee <adjacent>:
int transf[37]={99,30,31,32,33,34,35,24,25,26,27,28,29,18,19,20,21,22,23,12,13,14,15,16,17,6,7,8,9,10,11,0,1,2,3,4,5};
int p_nx=0,p_ny=0,n_nx=0,n_ny=0;


void adjacent(int x1,int y1,int adj[4][2])
{
   107ee:	cf 93       	push	r28
   107f0:	df 93       	push	r29
   107f2:	cd b7       	in	r28, 0x3d	; 61
   107f4:	de b7       	in	r29, 0x3e	; 62
   107f6:	6c 97       	sbiw	r28, 0x1c	; 28
   107f8:	0f b6       	in	r0, 0x3f	; 63
   107fa:	f8 94       	cli
   107fc:	de bf       	out	0x3e, r29	; 62
   107fe:	0f be       	out	0x3f, r0	; 63
   10800:	cd bf       	out	0x3d, r28	; 61
   10802:	98 8f       	std	Y+24, r25	; 0x18
   10804:	8f 8b       	std	Y+23, r24	; 0x17
   10806:	7a 8f       	std	Y+26, r23	; 0x1a
   10808:	69 8f       	std	Y+25, r22	; 0x19
   1080a:	5c 8f       	std	Y+28, r21	; 0x1c
   1080c:	4b 8f       	std	Y+27, r20	; 0x1b
    int i=0,x=0,y=0;
   1080e:	1a 82       	std	Y+2, r1	; 0x02
   10810:	19 82       	std	Y+1, r1	; 0x01
   10812:	1c 82       	std	Y+4, r1	; 0x04
   10814:	1b 82       	std	Y+3, r1	; 0x03
   10816:	1e 82       	std	Y+6, r1	; 0x06
   10818:	1d 82       	std	Y+5, r1	; 0x05
    int key_x[4]={-1,0,1,0};//N E S W
   1081a:	ce 01       	movw	r24, r28
   1081c:	07 96       	adiw	r24, 0x07	; 7
   1081e:	24 e9       	ldi	r18, 0x94	; 148
   10820:	32 e0       	ldi	r19, 0x02	; 2
   10822:	48 e0       	ldi	r20, 0x08	; 8
   10824:	f9 01       	movw	r30, r18
   10826:	00 80       	ld	r0, Z
   10828:	2f 5f       	subi	r18, 0xFF	; 255
   1082a:	3f 4f       	sbci	r19, 0xFF	; 255
   1082c:	fc 01       	movw	r30, r24
   1082e:	00 82       	st	Z, r0
   10830:	01 96       	adiw	r24, 0x01	; 1
   10832:	41 50       	subi	r20, 0x01	; 1
   10834:	44 23       	and	r20, r20
   10836:	b1 f7       	brne	.-20     	; 0x10824 <adjacent+0x36>
    int key_y[4]={0,1,0,-1};
   10838:	ce 01       	movw	r24, r28
   1083a:	0f 96       	adiw	r24, 0x0f	; 15
   1083c:	2c e9       	ldi	r18, 0x9C	; 156
   1083e:	32 e0       	ldi	r19, 0x02	; 2
   10840:	48 e0       	ldi	r20, 0x08	; 8
   10842:	f9 01       	movw	r30, r18
   10844:	00 80       	ld	r0, Z
   10846:	2f 5f       	subi	r18, 0xFF	; 255
   10848:	3f 4f       	sbci	r19, 0xFF	; 255
   1084a:	fc 01       	movw	r30, r24
   1084c:	00 82       	st	Z, r0
   1084e:	01 96       	adiw	r24, 0x01	; 1
   10850:	41 50       	subi	r20, 0x01	; 1
   10852:	44 23       	and	r20, r20
   10854:	b1 f7       	brne	.-20     	; 0x10842 <adjacent+0x54>
    for(i=0;i<4;i++)
   10856:	1a 82       	std	Y+2, r1	; 0x02
   10858:	19 82       	std	Y+1, r1	; 0x01
   1085a:	79 c0       	rjmp	.+242    	; 0x1094e <adjacent+0x160>
	{
        adj[i][0]=-1;
   1085c:	89 81       	ldd	r24, Y+1	; 0x01
   1085e:	9a 81       	ldd	r25, Y+2	; 0x02
   10860:	88 0f       	add	r24, r24
   10862:	99 1f       	adc	r25, r25
   10864:	88 0f       	add	r24, r24
   10866:	99 1f       	adc	r25, r25
   10868:	2b 8d       	ldd	r18, Y+27	; 0x1b
   1086a:	3c 8d       	ldd	r19, Y+28	; 0x1c
   1086c:	82 0f       	add	r24, r18
   1086e:	93 1f       	adc	r25, r19
   10870:	2f ef       	ldi	r18, 0xFF	; 255
   10872:	3f ef       	ldi	r19, 0xFF	; 255
   10874:	fc 01       	movw	r30, r24
   10876:	31 83       	std	Z+1, r19	; 0x01
   10878:	20 83       	st	Z, r18
        adj[i][1]=-1;
   1087a:	89 81       	ldd	r24, Y+1	; 0x01
   1087c:	9a 81       	ldd	r25, Y+2	; 0x02
   1087e:	88 0f       	add	r24, r24
   10880:	99 1f       	adc	r25, r25
   10882:	88 0f       	add	r24, r24
   10884:	99 1f       	adc	r25, r25
   10886:	2b 8d       	ldd	r18, Y+27	; 0x1b
   10888:	3c 8d       	ldd	r19, Y+28	; 0x1c
   1088a:	82 0f       	add	r24, r18
   1088c:	93 1f       	adc	r25, r19
   1088e:	2f ef       	ldi	r18, 0xFF	; 255
   10890:	3f ef       	ldi	r19, 0xFF	; 255
   10892:	fc 01       	movw	r30, r24
   10894:	33 83       	std	Z+3, r19	; 0x03
   10896:	22 83       	std	Z+2, r18	; 0x02
        x=x1+key_x[i];
   10898:	89 81       	ldd	r24, Y+1	; 0x01
   1089a:	9a 81       	ldd	r25, Y+2	; 0x02
   1089c:	88 0f       	add	r24, r24
   1089e:	99 1f       	adc	r25, r25
   108a0:	9e 01       	movw	r18, r28
   108a2:	2f 5f       	subi	r18, 0xFF	; 255
   108a4:	3f 4f       	sbci	r19, 0xFF	; 255
   108a6:	82 0f       	add	r24, r18
   108a8:	93 1f       	adc	r25, r19
   108aa:	06 96       	adiw	r24, 0x06	; 6
   108ac:	fc 01       	movw	r30, r24
   108ae:	20 81       	ld	r18, Z
   108b0:	31 81       	ldd	r19, Z+1	; 0x01
   108b2:	8f 89       	ldd	r24, Y+23	; 0x17
   108b4:	98 8d       	ldd	r25, Y+24	; 0x18
   108b6:	82 0f       	add	r24, r18
   108b8:	93 1f       	adc	r25, r19
   108ba:	9c 83       	std	Y+4, r25	; 0x04
   108bc:	8b 83       	std	Y+3, r24	; 0x03
        y=y1+key_y[i];
   108be:	89 81       	ldd	r24, Y+1	; 0x01
   108c0:	9a 81       	ldd	r25, Y+2	; 0x02
   108c2:	88 0f       	add	r24, r24
   108c4:	99 1f       	adc	r25, r25
   108c6:	9e 01       	movw	r18, r28
   108c8:	2f 5f       	subi	r18, 0xFF	; 255
   108ca:	3f 4f       	sbci	r19, 0xFF	; 255
   108cc:	82 0f       	add	r24, r18
   108ce:	93 1f       	adc	r25, r19
   108d0:	0e 96       	adiw	r24, 0x0e	; 14
   108d2:	fc 01       	movw	r30, r24
   108d4:	20 81       	ld	r18, Z
   108d6:	31 81       	ldd	r19, Z+1	; 0x01
   108d8:	89 8d       	ldd	r24, Y+25	; 0x19
   108da:	9a 8d       	ldd	r25, Y+26	; 0x1a
   108dc:	82 0f       	add	r24, r18
   108de:	93 1f       	adc	r25, r19
   108e0:	9e 83       	std	Y+6, r25	; 0x06
   108e2:	8d 83       	std	Y+5, r24	; 0x05
        if(x>-1 && y>-1 && x<6 && y<6)
   108e4:	8b 81       	ldd	r24, Y+3	; 0x03
   108e6:	9c 81       	ldd	r25, Y+4	; 0x04
   108e8:	99 23       	and	r25, r25
   108ea:	64 f1       	brlt	.+88     	; 0x10944 <adjacent+0x156>
   108ec:	8d 81       	ldd	r24, Y+5	; 0x05
   108ee:	9e 81       	ldd	r25, Y+6	; 0x06
   108f0:	99 23       	and	r25, r25
   108f2:	44 f1       	brlt	.+80     	; 0x10944 <adjacent+0x156>
   108f4:	8b 81       	ldd	r24, Y+3	; 0x03
   108f6:	9c 81       	ldd	r25, Y+4	; 0x04
   108f8:	86 30       	cpi	r24, 0x06	; 6
   108fa:	91 05       	cpc	r25, r1
   108fc:	1c f5       	brge	.+70     	; 0x10944 <adjacent+0x156>
   108fe:	8d 81       	ldd	r24, Y+5	; 0x05
   10900:	9e 81       	ldd	r25, Y+6	; 0x06
   10902:	86 30       	cpi	r24, 0x06	; 6
   10904:	91 05       	cpc	r25, r1
   10906:	f4 f4       	brge	.+60     	; 0x10944 <adjacent+0x156>
		{
            adj[i][0]=x;
   10908:	89 81       	ldd	r24, Y+1	; 0x01
   1090a:	9a 81       	ldd	r25, Y+2	; 0x02
   1090c:	88 0f       	add	r24, r24
   1090e:	99 1f       	adc	r25, r25
   10910:	88 0f       	add	r24, r24
   10912:	99 1f       	adc	r25, r25
   10914:	2b 8d       	ldd	r18, Y+27	; 0x1b
   10916:	3c 8d       	ldd	r19, Y+28	; 0x1c
   10918:	82 0f       	add	r24, r18
   1091a:	93 1f       	adc	r25, r19
   1091c:	2b 81       	ldd	r18, Y+3	; 0x03
   1091e:	3c 81       	ldd	r19, Y+4	; 0x04
   10920:	fc 01       	movw	r30, r24
   10922:	31 83       	std	Z+1, r19	; 0x01
   10924:	20 83       	st	Z, r18
            adj[i][1]=y;
   10926:	89 81       	ldd	r24, Y+1	; 0x01
   10928:	9a 81       	ldd	r25, Y+2	; 0x02
   1092a:	88 0f       	add	r24, r24
   1092c:	99 1f       	adc	r25, r25
   1092e:	88 0f       	add	r24, r24
   10930:	99 1f       	adc	r25, r25
   10932:	2b 8d       	ldd	r18, Y+27	; 0x1b
   10934:	3c 8d       	ldd	r19, Y+28	; 0x1c
   10936:	82 0f       	add	r24, r18
   10938:	93 1f       	adc	r25, r19
   1093a:	2d 81       	ldd	r18, Y+5	; 0x05
   1093c:	3e 81       	ldd	r19, Y+6	; 0x06
   1093e:	fc 01       	movw	r30, r24
   10940:	33 83       	std	Z+3, r19	; 0x03
   10942:	22 83       	std	Z+2, r18	; 0x02
void adjacent(int x1,int y1,int adj[4][2])
{
    int i=0,x=0,y=0;
    int key_x[4]={-1,0,1,0};//N E S W
    int key_y[4]={0,1,0,-1};
    for(i=0;i<4;i++)
   10944:	89 81       	ldd	r24, Y+1	; 0x01
   10946:	9a 81       	ldd	r25, Y+2	; 0x02
   10948:	01 96       	adiw	r24, 0x01	; 1
   1094a:	9a 83       	std	Y+2, r25	; 0x02
   1094c:	89 83       	std	Y+1, r24	; 0x01
   1094e:	89 81       	ldd	r24, Y+1	; 0x01
   10950:	9a 81       	ldd	r25, Y+2	; 0x02
   10952:	84 30       	cpi	r24, 0x04	; 4
   10954:	91 05       	cpc	r25, r1
   10956:	0c f4       	brge	.+2      	; 0x1095a <adjacent+0x16c>
   10958:	81 cf       	rjmp	.-254    	; 0x1085c <adjacent+0x6e>
		{
            adj[i][0]=x;
            adj[i][1]=y;
        }
    }
}
   1095a:	6c 96       	adiw	r28, 0x1c	; 28
   1095c:	0f b6       	in	r0, 0x3f	; 63
   1095e:	f8 94       	cli
   10960:	de bf       	out	0x3e, r29	; 62
   10962:	0f be       	out	0x3f, r0	; 63
   10964:	cd bf       	out	0x3d, r28	; 61
   10966:	df 91       	pop	r29
   10968:	cf 91       	pop	r28
   1096a:	08 95       	ret

0001096c <min_dis>:

int min_dis(int dist[], int included[])
{
   1096c:	cf 93       	push	r28
   1096e:	df 93       	push	r29
   10970:	cd b7       	in	r28, 0x3d	; 61
   10972:	de b7       	in	r29, 0x3e	; 62
   10974:	2a 97       	sbiw	r28, 0x0a	; 10
   10976:	0f b6       	in	r0, 0x3f	; 63
   10978:	f8 94       	cli
   1097a:	de bf       	out	0x3e, r29	; 62
   1097c:	0f be       	out	0x3f, r0	; 63
   1097e:	cd bf       	out	0x3d, r28	; 61
   10980:	98 87       	std	Y+8, r25	; 0x08
   10982:	8f 83       	std	Y+7, r24	; 0x07
   10984:	7a 87       	std	Y+10, r23	; 0x0a
   10986:	69 87       	std	Y+9, r22	; 0x09
    int min=INF,min_index=0,i=0;
   10988:	87 ee       	ldi	r24, 0xE7	; 231
   1098a:	93 e0       	ldi	r25, 0x03	; 3
   1098c:	9a 83       	std	Y+2, r25	; 0x02
   1098e:	89 83       	std	Y+1, r24	; 0x01
   10990:	1c 82       	std	Y+4, r1	; 0x04
   10992:	1b 82       	std	Y+3, r1	; 0x03
   10994:	1e 82       	std	Y+6, r1	; 0x06
   10996:	1d 82       	std	Y+5, r1	; 0x05
    for(i=0;i<36;i++)
   10998:	1e 82       	std	Y+6, r1	; 0x06
   1099a:	1d 82       	std	Y+5, r1	; 0x05
   1099c:	33 c0       	rjmp	.+102    	; 0x10a04 <min_dis+0x98>
    {
        if((included[i]==FALSE)&&dist[i]<min)
   1099e:	8d 81       	ldd	r24, Y+5	; 0x05
   109a0:	9e 81       	ldd	r25, Y+6	; 0x06
   109a2:	88 0f       	add	r24, r24
   109a4:	99 1f       	adc	r25, r25
   109a6:	29 85       	ldd	r18, Y+9	; 0x09
   109a8:	3a 85       	ldd	r19, Y+10	; 0x0a
   109aa:	82 0f       	add	r24, r18
   109ac:	93 1f       	adc	r25, r19
   109ae:	fc 01       	movw	r30, r24
   109b0:	80 81       	ld	r24, Z
   109b2:	91 81       	ldd	r25, Z+1	; 0x01
   109b4:	00 97       	sbiw	r24, 0x00	; 0
   109b6:	09 f5       	brne	.+66     	; 0x109fa <min_dis+0x8e>
   109b8:	8d 81       	ldd	r24, Y+5	; 0x05
   109ba:	9e 81       	ldd	r25, Y+6	; 0x06
   109bc:	88 0f       	add	r24, r24
   109be:	99 1f       	adc	r25, r25
   109c0:	2f 81       	ldd	r18, Y+7	; 0x07
   109c2:	38 85       	ldd	r19, Y+8	; 0x08
   109c4:	82 0f       	add	r24, r18
   109c6:	93 1f       	adc	r25, r19
   109c8:	fc 01       	movw	r30, r24
   109ca:	20 81       	ld	r18, Z
   109cc:	31 81       	ldd	r19, Z+1	; 0x01
   109ce:	89 81       	ldd	r24, Y+1	; 0x01
   109d0:	9a 81       	ldd	r25, Y+2	; 0x02
   109d2:	28 17       	cp	r18, r24
   109d4:	39 07       	cpc	r19, r25
   109d6:	8c f4       	brge	.+34     	; 0x109fa <min_dis+0x8e>
        {
            min=dist[i];
   109d8:	8d 81       	ldd	r24, Y+5	; 0x05
   109da:	9e 81       	ldd	r25, Y+6	; 0x06
   109dc:	88 0f       	add	r24, r24
   109de:	99 1f       	adc	r25, r25
   109e0:	2f 81       	ldd	r18, Y+7	; 0x07
   109e2:	38 85       	ldd	r19, Y+8	; 0x08
   109e4:	82 0f       	add	r24, r18
   109e6:	93 1f       	adc	r25, r19
   109e8:	fc 01       	movw	r30, r24
   109ea:	80 81       	ld	r24, Z
   109ec:	91 81       	ldd	r25, Z+1	; 0x01
   109ee:	9a 83       	std	Y+2, r25	; 0x02
   109f0:	89 83       	std	Y+1, r24	; 0x01
            min_index=i;
   109f2:	8d 81       	ldd	r24, Y+5	; 0x05
   109f4:	9e 81       	ldd	r25, Y+6	; 0x06
   109f6:	9c 83       	std	Y+4, r25	; 0x04
   109f8:	8b 83       	std	Y+3, r24	; 0x03
}

int min_dis(int dist[], int included[])
{
    int min=INF,min_index=0,i=0;
    for(i=0;i<36;i++)
   109fa:	8d 81       	ldd	r24, Y+5	; 0x05
   109fc:	9e 81       	ldd	r25, Y+6	; 0x06
   109fe:	01 96       	adiw	r24, 0x01	; 1
   10a00:	9e 83       	std	Y+6, r25	; 0x06
   10a02:	8d 83       	std	Y+5, r24	; 0x05
   10a04:	8d 81       	ldd	r24, Y+5	; 0x05
   10a06:	9e 81       	ldd	r25, Y+6	; 0x06
   10a08:	84 32       	cpi	r24, 0x24	; 36
   10a0a:	91 05       	cpc	r25, r1
   10a0c:	44 f2       	brlt	.-112    	; 0x1099e <min_dis+0x32>
        {
            min=dist[i];
            min_index=i;
        }
    }
    return min_index;
   10a0e:	8b 81       	ldd	r24, Y+3	; 0x03
   10a10:	9c 81       	ldd	r25, Y+4	; 0x04
}
   10a12:	2a 96       	adiw	r28, 0x0a	; 10
   10a14:	0f b6       	in	r0, 0x3f	; 63
   10a16:	f8 94       	cli
   10a18:	de bf       	out	0x3e, r29	; 62
   10a1a:	0f be       	out	0x3f, r0	; 63
   10a1c:	cd bf       	out	0x3d, r28	; 61
   10a1e:	df 91       	pop	r29
   10a20:	cf 91       	pop	r28
   10a22:	08 95       	ret

00010a24 <align>:

char align(int turn_count)
{
   10a24:	cf 93       	push	r28
   10a26:	df 93       	push	r29
   10a28:	0f 92       	push	r0
   10a2a:	0f 92       	push	r0
   10a2c:	cd b7       	in	r28, 0x3d	; 61
   10a2e:	de b7       	in	r29, 0x3e	; 62
   10a30:	9a 83       	std	Y+2, r25	; 0x02
   10a32:	89 83       	std	Y+1, r24	; 0x01
turn_count=turn_count%3;
   10a34:	89 81       	ldd	r24, Y+1	; 0x01
   10a36:	9a 81       	ldd	r25, Y+2	; 0x02
   10a38:	23 e0       	ldi	r18, 0x03	; 3
   10a3a:	30 e0       	ldi	r19, 0x00	; 0
   10a3c:	b9 01       	movw	r22, r18
   10a3e:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10a42:	9a 83       	std	Y+2, r25	; 0x02
   10a44:	89 83       	std	Y+1, r24	; 0x01
if(turn_count==2||turn_count==-2)
   10a46:	89 81       	ldd	r24, Y+1	; 0x01
   10a48:	9a 81       	ldd	r25, Y+2	; 0x02
   10a4a:	82 30       	cpi	r24, 0x02	; 2
   10a4c:	91 05       	cpc	r25, r1
   10a4e:	31 f0       	breq	.+12     	; 0x10a5c <align+0x38>
   10a50:	89 81       	ldd	r24, Y+1	; 0x01
   10a52:	9a 81       	ldd	r25, Y+2	; 0x02
   10a54:	2f ef       	ldi	r18, 0xFF	; 255
   10a56:	8e 3f       	cpi	r24, 0xFE	; 254
   10a58:	92 07       	cpc	r25, r18
   10a5a:	11 f4       	brne	.+4      	; 0x10a60 <align+0x3c>
	return 'U';
   10a5c:	85 e5       	ldi	r24, 0x55	; 85
   10a5e:	1b c0       	rjmp	.+54     	; 0x10a96 <align+0x72>
else if(turn_count==1||turn_count==-3)
   10a60:	89 81       	ldd	r24, Y+1	; 0x01
   10a62:	9a 81       	ldd	r25, Y+2	; 0x02
   10a64:	81 30       	cpi	r24, 0x01	; 1
   10a66:	91 05       	cpc	r25, r1
   10a68:	31 f0       	breq	.+12     	; 0x10a76 <align+0x52>
   10a6a:	89 81       	ldd	r24, Y+1	; 0x01
   10a6c:	9a 81       	ldd	r25, Y+2	; 0x02
   10a6e:	2f ef       	ldi	r18, 0xFF	; 255
   10a70:	8d 3f       	cpi	r24, 0xFD	; 253
   10a72:	92 07       	cpc	r25, r18
   10a74:	11 f4       	brne	.+4      	; 0x10a7a <align+0x56>
	return 'L';
   10a76:	8c e4       	ldi	r24, 0x4C	; 76
   10a78:	0e c0       	rjmp	.+28     	; 0x10a96 <align+0x72>
else if(turn_count==-1||turn_count==3)
   10a7a:	89 81       	ldd	r24, Y+1	; 0x01
   10a7c:	9a 81       	ldd	r25, Y+2	; 0x02
   10a7e:	2f ef       	ldi	r18, 0xFF	; 255
   10a80:	8f 3f       	cpi	r24, 0xFF	; 255
   10a82:	92 07       	cpc	r25, r18
   10a84:	29 f0       	breq	.+10     	; 0x10a90 <align+0x6c>
   10a86:	89 81       	ldd	r24, Y+1	; 0x01
   10a88:	9a 81       	ldd	r25, Y+2	; 0x02
   10a8a:	83 30       	cpi	r24, 0x03	; 3
   10a8c:	91 05       	cpc	r25, r1
   10a8e:	11 f4       	brne	.+4      	; 0x10a94 <align+0x70>
	return 'R';
   10a90:	82 e5       	ldi	r24, 0x52	; 82
   10a92:	01 c0       	rjmp	.+2      	; 0x10a96 <align+0x72>
else
	return 'N';
   10a94:	8e e4       	ldi	r24, 0x4E	; 78
}
   10a96:	0f 90       	pop	r0
   10a98:	0f 90       	pop	r0
   10a9a:	df 91       	pop	r29
   10a9c:	cf 91       	pop	r28
   10a9e:	08 95       	ret

00010aa0 <rotate>:

char rotate(int current,int next,int *turn_count)
{
   10aa0:	cf 93       	push	r28
   10aa2:	df 93       	push	r29
   10aa4:	cd b7       	in	r28, 0x3d	; 61
   10aa6:	de b7       	in	r29, 0x3e	; 62
   10aa8:	2a 97       	sbiw	r28, 0x0a	; 10
   10aaa:	0f b6       	in	r0, 0x3f	; 63
   10aac:	f8 94       	cli
   10aae:	de bf       	out	0x3e, r29	; 62
   10ab0:	0f be       	out	0x3f, r0	; 63
   10ab2:	cd bf       	out	0x3d, r28	; 61
   10ab4:	9e 83       	std	Y+6, r25	; 0x06
   10ab6:	8d 83       	std	Y+5, r24	; 0x05
   10ab8:	78 87       	std	Y+8, r23	; 0x08
   10aba:	6f 83       	std	Y+7, r22	; 0x07
   10abc:	5a 87       	std	Y+10, r21	; 0x0a
   10abe:	49 87       	std	Y+9, r20	; 0x09
     int dir_x,dir_y;
     dir_x=(current/6)-(next/6);
   10ac0:	8d 81       	ldd	r24, Y+5	; 0x05
   10ac2:	9e 81       	ldd	r25, Y+6	; 0x06
   10ac4:	26 e0       	ldi	r18, 0x06	; 6
   10ac6:	30 e0       	ldi	r19, 0x00	; 0
   10ac8:	b9 01       	movw	r22, r18
   10aca:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10ace:	9b 01       	movw	r18, r22
   10ad0:	8f 81       	ldd	r24, Y+7	; 0x07
   10ad2:	98 85       	ldd	r25, Y+8	; 0x08
   10ad4:	46 e0       	ldi	r20, 0x06	; 6
   10ad6:	50 e0       	ldi	r21, 0x00	; 0
   10ad8:	ba 01       	movw	r22, r20
   10ada:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10ade:	ab 01       	movw	r20, r22
   10ae0:	ca 01       	movw	r24, r20
   10ae2:	a9 01       	movw	r20, r18
   10ae4:	48 1b       	sub	r20, r24
   10ae6:	59 0b       	sbc	r21, r25
   10ae8:	ca 01       	movw	r24, r20
   10aea:	9a 83       	std	Y+2, r25	; 0x02
   10aec:	89 83       	std	Y+1, r24	; 0x01
     dir_y=(current%6)-(next%6);
   10aee:	8d 81       	ldd	r24, Y+5	; 0x05
   10af0:	9e 81       	ldd	r25, Y+6	; 0x06
   10af2:	26 e0       	ldi	r18, 0x06	; 6
   10af4:	30 e0       	ldi	r19, 0x00	; 0
   10af6:	b9 01       	movw	r22, r18
   10af8:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10afc:	9c 01       	movw	r18, r24
   10afe:	8f 81       	ldd	r24, Y+7	; 0x07
   10b00:	98 85       	ldd	r25, Y+8	; 0x08
   10b02:	46 e0       	ldi	r20, 0x06	; 6
   10b04:	50 e0       	ldi	r21, 0x00	; 0
   10b06:	ba 01       	movw	r22, r20
   10b08:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10b0c:	f9 01       	movw	r30, r18
   10b0e:	e8 1b       	sub	r30, r24
   10b10:	f9 0b       	sbc	r31, r25
   10b12:	cf 01       	movw	r24, r30
   10b14:	9c 83       	std	Y+4, r25	; 0x04
   10b16:	8b 83       	std	Y+3, r24	; 0x03
     if(dir_y==0)
   10b18:	8b 81       	ldd	r24, Y+3	; 0x03
   10b1a:	9c 81       	ldd	r25, Y+4	; 0x04
   10b1c:	00 97       	sbiw	r24, 0x00	; 0
   10b1e:	a9 f4       	brne	.+42     	; 0x10b4a <rotate+0xaa>
	 {
        if(dir_x<0)
   10b20:	89 81       	ldd	r24, Y+1	; 0x01
   10b22:	9a 81       	ldd	r25, Y+2	; 0x02
   10b24:	99 23       	and	r25, r25
   10b26:	7c f4       	brge	.+30     	; 0x10b46 <rotate+0xa6>
		{
		// printf("Uturn\n");
			*turn_count+=2;
   10b28:	89 85       	ldd	r24, Y+9	; 0x09
   10b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b2c:	fc 01       	movw	r30, r24
   10b2e:	80 81       	ld	r24, Z
   10b30:	91 81       	ldd	r25, Z+1	; 0x01
   10b32:	9c 01       	movw	r18, r24
   10b34:	2e 5f       	subi	r18, 0xFE	; 254
   10b36:	3f 4f       	sbci	r19, 0xFF	; 255
   10b38:	89 85       	ldd	r24, Y+9	; 0x09
   10b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b3c:	fc 01       	movw	r30, r24
   10b3e:	31 83       	std	Z+1, r19	; 0x01
   10b40:	20 83       	st	Z, r18
			return 'U';
   10b42:	85 e5       	ldi	r24, 0x55	; 85
   10b44:	3d c0       	rjmp	.+122    	; 0x10bc0 <rotate+0x120>
			p_ny=0;
        }
        else
        {
        //printf("NC\n");
			return 'N';
   10b46:	8e e4       	ldi	r24, 0x4E	; 78
   10b48:	3b c0       	rjmp	.+118    	; 0x10bc0 <rotate+0x120>
        }
     }
     else if(dir_x==0)
   10b4a:	89 81       	ldd	r24, Y+1	; 0x01
   10b4c:	9a 81       	ldd	r25, Y+2	; 0x02
   10b4e:	00 97       	sbiw	r24, 0x00	; 0
   10b50:	b1 f5       	brne	.+108    	; 0x10bbe <rotate+0x11e>
     {
      if(dir_y<0)
   10b52:	8b 81       	ldd	r24, Y+3	; 0x03
   10b54:	9c 81       	ldd	r25, Y+4	; 0x04
   10b56:	99 23       	and	r25, r25
   10b58:	cc f4       	brge	.+50     	; 0x10b8c <rotate+0xec>
	  {
      //printf("Right\n");
		*turn_count=*turn_count+1;
   10b5a:	89 85       	ldd	r24, Y+9	; 0x09
   10b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b5e:	fc 01       	movw	r30, r24
   10b60:	80 81       	ld	r24, Z
   10b62:	91 81       	ldd	r25, Z+1	; 0x01
   10b64:	9c 01       	movw	r18, r24
   10b66:	2f 5f       	subi	r18, 0xFF	; 255
   10b68:	3f 4f       	sbci	r19, 0xFF	; 255
   10b6a:	89 85       	ldd	r24, Y+9	; 0x09
   10b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b6e:	fc 01       	movw	r30, r24
   10b70:	31 83       	std	Z+1, r19	; 0x01
   10b72:	20 83       	st	Z, r18
		p_nx=0;
   10b74:	10 92 32 04 	sts	0x0432, r1
   10b78:	10 92 31 04 	sts	0x0431, r1
		p_ny=1;
   10b7c:	81 e0       	ldi	r24, 0x01	; 1
   10b7e:	90 e0       	ldi	r25, 0x00	; 0
   10b80:	90 93 34 04 	sts	0x0434, r25
   10b84:	80 93 33 04 	sts	0x0433, r24
		return 'R';
   10b88:	82 e5       	ldi	r24, 0x52	; 82
   10b8a:	1a c0       	rjmp	.+52     	; 0x10bc0 <rotate+0x120>
      }
      else
	  {
      //printf("Left\n");
		p_nx=0;
   10b8c:	10 92 32 04 	sts	0x0432, r1
   10b90:	10 92 31 04 	sts	0x0431, r1
		p_ny=-1;
   10b94:	8f ef       	ldi	r24, 0xFF	; 255
   10b96:	9f ef       	ldi	r25, 0xFF	; 255
   10b98:	90 93 34 04 	sts	0x0434, r25
   10b9c:	80 93 33 04 	sts	0x0433, r24
		*turn_count=*turn_count-1;
   10ba0:	89 85       	ldd	r24, Y+9	; 0x09
   10ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ba4:	fc 01       	movw	r30, r24
   10ba6:	80 81       	ld	r24, Z
   10ba8:	91 81       	ldd	r25, Z+1	; 0x01
   10baa:	9c 01       	movw	r18, r24
   10bac:	21 50       	subi	r18, 0x01	; 1
   10bae:	30 40       	sbci	r19, 0x00	; 0
   10bb0:	89 85       	ldd	r24, Y+9	; 0x09
   10bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10bb4:	fc 01       	movw	r30, r24
   10bb6:	31 83       	std	Z+1, r19	; 0x01
   10bb8:	20 83       	st	Z, r18
		return 'L';
   10bba:	8c e4       	ldi	r24, 0x4C	; 76
   10bbc:	01 c0       	rjmp	.+2      	; 0x10bc0 <rotate+0x120>
   10bbe:	00 c0       	rjmp	.+0      	; 0x10bc0 <rotate+0x120>
      }
    }
}
   10bc0:	2a 96       	adiw	r28, 0x0a	; 10
   10bc2:	0f b6       	in	r0, 0x3f	; 63
   10bc4:	f8 94       	cli
   10bc6:	de bf       	out	0x3e, r29	; 62
   10bc8:	0f be       	out	0x3f, r0	; 63
   10bca:	cd bf       	out	0x3d, r28	; 61
   10bcc:	df 91       	pop	r29
   10bce:	cf 91       	pop	r28
   10bd0:	08 95       	ret

00010bd2 <direction>:

char direction(int current,int next,int *turn_count)
{
   10bd2:	cf 93       	push	r28
   10bd4:	df 93       	push	r29
   10bd6:	cd b7       	in	r28, 0x3d	; 61
   10bd8:	de b7       	in	r29, 0x3e	; 62
   10bda:	27 97       	sbiw	r28, 0x07	; 7
   10bdc:	0f b6       	in	r0, 0x3f	; 63
   10bde:	f8 94       	cli
   10be0:	de bf       	out	0x3e, r29	; 62
   10be2:	0f be       	out	0x3f, r0	; 63
   10be4:	cd bf       	out	0x3d, r28	; 61
   10be6:	9b 83       	std	Y+3, r25	; 0x03
   10be8:	8a 83       	std	Y+2, r24	; 0x02
   10bea:	7d 83       	std	Y+5, r23	; 0x05
   10bec:	6c 83       	std	Y+4, r22	; 0x04
   10bee:	5f 83       	std	Y+7, r21	; 0x07
   10bf0:	4e 83       	std	Y+6, r20	; 0x06
     n_nx=(next/6)-(current/6);
   10bf2:	8c 81       	ldd	r24, Y+4	; 0x04
   10bf4:	9d 81       	ldd	r25, Y+5	; 0x05
   10bf6:	26 e0       	ldi	r18, 0x06	; 6
   10bf8:	30 e0       	ldi	r19, 0x00	; 0
   10bfa:	b9 01       	movw	r22, r18
   10bfc:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10c00:	9b 01       	movw	r18, r22
   10c02:	8a 81       	ldd	r24, Y+2	; 0x02
   10c04:	9b 81       	ldd	r25, Y+3	; 0x03
   10c06:	46 e0       	ldi	r20, 0x06	; 6
   10c08:	50 e0       	ldi	r21, 0x00	; 0
   10c0a:	ba 01       	movw	r22, r20
   10c0c:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10c10:	ab 01       	movw	r20, r22
   10c12:	ca 01       	movw	r24, r20
   10c14:	a9 01       	movw	r20, r18
   10c16:	48 1b       	sub	r20, r24
   10c18:	59 0b       	sbc	r21, r25
   10c1a:	ca 01       	movw	r24, r20
   10c1c:	90 93 36 04 	sts	0x0436, r25
   10c20:	80 93 35 04 	sts	0x0435, r24
     n_ny=(next%6)-(current%6);
   10c24:	8c 81       	ldd	r24, Y+4	; 0x04
   10c26:	9d 81       	ldd	r25, Y+5	; 0x05
   10c28:	26 e0       	ldi	r18, 0x06	; 6
   10c2a:	30 e0       	ldi	r19, 0x00	; 0
   10c2c:	b9 01       	movw	r22, r18
   10c2e:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10c32:	9c 01       	movw	r18, r24
   10c34:	8a 81       	ldd	r24, Y+2	; 0x02
   10c36:	9b 81       	ldd	r25, Y+3	; 0x03
   10c38:	46 e0       	ldi	r20, 0x06	; 6
   10c3a:	50 e0       	ldi	r21, 0x00	; 0
   10c3c:	ba 01       	movw	r22, r20
   10c3e:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10c42:	f9 01       	movw	r30, r18
   10c44:	e8 1b       	sub	r30, r24
   10c46:	f9 0b       	sbc	r31, r25
   10c48:	cf 01       	movw	r24, r30
   10c4a:	90 93 38 04 	sts	0x0438, r25
   10c4e:	80 93 37 04 	sts	0x0437, r24
     char out='o';
   10c52:	8f e6       	ldi	r24, 0x6F	; 111
   10c54:	89 83       	std	Y+1, r24	; 0x01
     if(n_nx==p_nx && n_ny==p_ny)
   10c56:	20 91 35 04 	lds	r18, 0x0435
   10c5a:	30 91 36 04 	lds	r19, 0x0436
   10c5e:	80 91 31 04 	lds	r24, 0x0431
   10c62:	90 91 32 04 	lds	r25, 0x0432
   10c66:	28 17       	cp	r18, r24
   10c68:	39 07       	cpc	r19, r25
   10c6a:	71 f4       	brne	.+28     	; 0x10c88 <direction+0xb6>
   10c6c:	20 91 37 04 	lds	r18, 0x0437
   10c70:	30 91 38 04 	lds	r19, 0x0438
   10c74:	80 91 33 04 	lds	r24, 0x0433
   10c78:	90 91 34 04 	lds	r25, 0x0434
   10c7c:	28 17       	cp	r18, r24
   10c7e:	39 07       	cpc	r19, r25
   10c80:	19 f4       	brne	.+6      	; 0x10c88 <direction+0xb6>
	 {
		out='n';
   10c82:	8e e6       	ldi	r24, 0x6E	; 110
   10c84:	89 83       	std	Y+1, r24	; 0x01
   10c86:	82 c0       	rjmp	.+260    	; 0x10d8c <direction+0x1ba>
     }
     else if(n_nx==(-p_nx) && n_ny==(-p_ny))
   10c88:	80 91 31 04 	lds	r24, 0x0431
   10c8c:	90 91 32 04 	lds	r25, 0x0432
   10c90:	22 27       	eor	r18, r18
   10c92:	33 27       	eor	r19, r19
   10c94:	28 1b       	sub	r18, r24
   10c96:	39 0b       	sbc	r19, r25
   10c98:	80 91 35 04 	lds	r24, 0x0435
   10c9c:	90 91 36 04 	lds	r25, 0x0436
   10ca0:	28 17       	cp	r18, r24
   10ca2:	39 07       	cpc	r19, r25
   10ca4:	91 f4       	brne	.+36     	; 0x10cca <direction+0xf8>
   10ca6:	80 91 33 04 	lds	r24, 0x0433
   10caa:	90 91 34 04 	lds	r25, 0x0434
   10cae:	22 27       	eor	r18, r18
   10cb0:	33 27       	eor	r19, r19
   10cb2:	28 1b       	sub	r18, r24
   10cb4:	39 0b       	sbc	r19, r25
   10cb6:	80 91 37 04 	lds	r24, 0x0437
   10cba:	90 91 38 04 	lds	r25, 0x0438
   10cbe:	28 17       	cp	r18, r24
   10cc0:	39 07       	cpc	r19, r25
   10cc2:	19 f4       	brne	.+6      	; 0x10cca <direction+0xf8>
	 {
		//*turn_count+=2;
		out='n';
   10cc4:	8e e6       	ldi	r24, 0x6E	; 110
   10cc6:	89 83       	std	Y+1, r24	; 0x01
   10cc8:	61 c0       	rjmp	.+194    	; 0x10d8c <direction+0x1ba>
     }
     else if(p_nx!=0)
   10cca:	80 91 31 04 	lds	r24, 0x0431
   10cce:	90 91 32 04 	lds	r25, 0x0432
   10cd2:	00 97       	sbiw	r24, 0x00	; 0
   10cd4:	59 f1       	breq	.+86     	; 0x10d2c <direction+0x15a>
	 {
		if((p_nx==n_ny ))
   10cd6:	20 91 31 04 	lds	r18, 0x0431
   10cda:	30 91 32 04 	lds	r19, 0x0432
   10cde:	80 91 37 04 	lds	r24, 0x0437
   10ce2:	90 91 38 04 	lds	r25, 0x0438
   10ce6:	28 17       	cp	r18, r24
   10ce8:	39 07       	cpc	r19, r25
   10cea:	81 f4       	brne	.+32     	; 0x10d0c <direction+0x13a>
		{
			*turn_count+=-1;
   10cec:	8e 81       	ldd	r24, Y+6	; 0x06
   10cee:	9f 81       	ldd	r25, Y+7	; 0x07
   10cf0:	fc 01       	movw	r30, r24
   10cf2:	80 81       	ld	r24, Z
   10cf4:	91 81       	ldd	r25, Z+1	; 0x01
   10cf6:	9c 01       	movw	r18, r24
   10cf8:	21 50       	subi	r18, 0x01	; 1
   10cfa:	30 40       	sbci	r19, 0x00	; 0
   10cfc:	8e 81       	ldd	r24, Y+6	; 0x06
   10cfe:	9f 81       	ldd	r25, Y+7	; 0x07
   10d00:	fc 01       	movw	r30, r24
   10d02:	31 83       	std	Z+1, r19	; 0x01
   10d04:	20 83       	st	Z, r18
			out= 'l';
   10d06:	8c e6       	ldi	r24, 0x6C	; 108
   10d08:	89 83       	std	Y+1, r24	; 0x01
   10d0a:	40 c0       	rjmp	.+128    	; 0x10d8c <direction+0x1ba>
		}
		else
		{
			*turn_count+=1;
   10d0c:	8e 81       	ldd	r24, Y+6	; 0x06
   10d0e:	9f 81       	ldd	r25, Y+7	; 0x07
   10d10:	fc 01       	movw	r30, r24
   10d12:	80 81       	ld	r24, Z
   10d14:	91 81       	ldd	r25, Z+1	; 0x01
   10d16:	9c 01       	movw	r18, r24
   10d18:	2f 5f       	subi	r18, 0xFF	; 255
   10d1a:	3f 4f       	sbci	r19, 0xFF	; 255
   10d1c:	8e 81       	ldd	r24, Y+6	; 0x06
   10d1e:	9f 81       	ldd	r25, Y+7	; 0x07
   10d20:	fc 01       	movw	r30, r24
   10d22:	31 83       	std	Z+1, r19	; 0x01
   10d24:	20 83       	st	Z, r18
			out= 'r';
   10d26:	82 e7       	ldi	r24, 0x72	; 114
   10d28:	89 83       	std	Y+1, r24	; 0x01
   10d2a:	30 c0       	rjmp	.+96     	; 0x10d8c <direction+0x1ba>
		}
    }
    else if(p_ny!=0)
   10d2c:	80 91 33 04 	lds	r24, 0x0433
   10d30:	90 91 34 04 	lds	r25, 0x0434
   10d34:	00 97       	sbiw	r24, 0x00	; 0
   10d36:	51 f1       	breq	.+84     	; 0x10d8c <direction+0x1ba>
	{
		if(p_ny==n_nx)
   10d38:	20 91 33 04 	lds	r18, 0x0433
   10d3c:	30 91 34 04 	lds	r19, 0x0434
   10d40:	80 91 35 04 	lds	r24, 0x0435
   10d44:	90 91 36 04 	lds	r25, 0x0436
   10d48:	28 17       	cp	r18, r24
   10d4a:	39 07       	cpc	r19, r25
   10d4c:	81 f4       	brne	.+32     	; 0x10d6e <direction+0x19c>
		{
			*turn_count+=1;
   10d4e:	8e 81       	ldd	r24, Y+6	; 0x06
   10d50:	9f 81       	ldd	r25, Y+7	; 0x07
   10d52:	fc 01       	movw	r30, r24
   10d54:	80 81       	ld	r24, Z
   10d56:	91 81       	ldd	r25, Z+1	; 0x01
   10d58:	9c 01       	movw	r18, r24
   10d5a:	2f 5f       	subi	r18, 0xFF	; 255
   10d5c:	3f 4f       	sbci	r19, 0xFF	; 255
   10d5e:	8e 81       	ldd	r24, Y+6	; 0x06
   10d60:	9f 81       	ldd	r25, Y+7	; 0x07
   10d62:	fc 01       	movw	r30, r24
   10d64:	31 83       	std	Z+1, r19	; 0x01
   10d66:	20 83       	st	Z, r18
			out= 'r';
   10d68:	82 e7       	ldi	r24, 0x72	; 114
   10d6a:	89 83       	std	Y+1, r24	; 0x01
   10d6c:	0f c0       	rjmp	.+30     	; 0x10d8c <direction+0x1ba>
		}
		else
		{
		*turn_count-=1;
   10d6e:	8e 81       	ldd	r24, Y+6	; 0x06
   10d70:	9f 81       	ldd	r25, Y+7	; 0x07
   10d72:	fc 01       	movw	r30, r24
   10d74:	80 81       	ld	r24, Z
   10d76:	91 81       	ldd	r25, Z+1	; 0x01
   10d78:	9c 01       	movw	r18, r24
   10d7a:	21 50       	subi	r18, 0x01	; 1
   10d7c:	30 40       	sbci	r19, 0x00	; 0
   10d7e:	8e 81       	ldd	r24, Y+6	; 0x06
   10d80:	9f 81       	ldd	r25, Y+7	; 0x07
   10d82:	fc 01       	movw	r30, r24
   10d84:	31 83       	std	Z+1, r19	; 0x01
   10d86:	20 83       	st	Z, r18
		out= 'l';
   10d88:	8c e6       	ldi	r24, 0x6C	; 108
   10d8a:	89 83       	std	Y+1, r24	; 0x01
		}
    }
    p_nx=n_nx;
   10d8c:	80 91 35 04 	lds	r24, 0x0435
   10d90:	90 91 36 04 	lds	r25, 0x0436
   10d94:	90 93 32 04 	sts	0x0432, r25
   10d98:	80 93 31 04 	sts	0x0431, r24
    p_ny=n_ny;
   10d9c:	80 91 37 04 	lds	r24, 0x0437
   10da0:	90 91 38 04 	lds	r25, 0x0438
   10da4:	90 93 34 04 	sts	0x0434, r25
   10da8:	80 93 33 04 	sts	0x0433, r24
    return out;
   10dac:	89 81       	ldd	r24, Y+1	; 0x01
}
   10dae:	27 96       	adiw	r28, 0x07	; 7
   10db0:	0f b6       	in	r0, 0x3f	; 63
   10db2:	f8 94       	cli
   10db4:	de bf       	out	0x3e, r29	; 62
   10db6:	0f be       	out	0x3f, r0	; 63
   10db8:	cd bf       	out	0x3d, r28	; 61
   10dba:	df 91       	pop	r29
   10dbc:	cf 91       	pop	r28
   10dbe:	08 95       	ret

00010dc0 <sh_path>:

char* sh_path(int start, int end,int *count1)
{
   10dc0:	0f 93       	push	r16
   10dc2:	1f 93       	push	r17
   10dc4:	cf 93       	push	r28
   10dc6:	df 93       	push	r29
   10dc8:	cd b7       	in	r28, 0x3d	; 61
   10dca:	de b7       	in	r29, 0x3e	; 62
   10dcc:	c5 50       	subi	r28, 0x05	; 5
   10dce:	d1 40       	sbci	r29, 0x01	; 1
   10dd0:	0f b6       	in	r0, 0x3f	; 63
   10dd2:	f8 94       	cli
   10dd4:	de bf       	out	0x3e, r29	; 62
   10dd6:	0f be       	out	0x3f, r0	; 63
   10dd8:	cd bf       	out	0x3d, r28	; 61
   10dda:	9e 01       	movw	r18, r28
   10ddc:	20 50       	subi	r18, 0x00	; 0
   10dde:	3f 4f       	sbci	r19, 0xFF	; 255
   10de0:	f9 01       	movw	r30, r18
   10de2:	91 83       	std	Z+1, r25	; 0x01
   10de4:	80 83       	st	Z, r24
   10de6:	ce 01       	movw	r24, r28
   10de8:	8e 5f       	subi	r24, 0xFE	; 254
   10dea:	9e 4f       	sbci	r25, 0xFE	; 254
   10dec:	fc 01       	movw	r30, r24
   10dee:	71 83       	std	Z+1, r23	; 0x01
   10df0:	60 83       	st	Z, r22
   10df2:	ce 01       	movw	r24, r28
   10df4:	8c 5f       	subi	r24, 0xFC	; 252
   10df6:	9e 4f       	sbci	r25, 0xFE	; 254
   10df8:	fc 01       	movw	r30, r24
   10dfa:	51 83       	std	Z+1, r21	; 0x01
   10dfc:	40 83       	st	Z, r20
    int dist[36],parent[36];
    int count=0,turn_count=0,current=0,length=0,weight=1,u=0,v=0,i=0,j=0;
   10dfe:	1c 86       	std	Y+12, r1	; 0x0c
   10e00:	1b 86       	std	Y+11, r1	; 0x0b
   10e02:	ce 01       	movw	r24, r28
   10e04:	8a 55       	subi	r24, 0x5A	; 90
   10e06:	9f 4f       	sbci	r25, 0xFF	; 255
   10e08:	fc 01       	movw	r30, r24
   10e0a:	11 82       	std	Z+1, r1	; 0x01
   10e0c:	10 82       	st	Z, r1
   10e0e:	1a 82       	std	Y+2, r1	; 0x02
   10e10:	19 82       	std	Y+1, r1	; 0x01
   10e12:	1c 82       	std	Y+4, r1	; 0x04
   10e14:	1b 82       	std	Y+3, r1	; 0x03
   10e16:	81 e0       	ldi	r24, 0x01	; 1
   10e18:	90 e0       	ldi	r25, 0x00	; 0
   10e1a:	9e 87       	std	Y+14, r25	; 0x0e
   10e1c:	8d 87       	std	Y+13, r24	; 0x0d
   10e1e:	18 8a       	std	Y+16, r1	; 0x10
   10e20:	1f 86       	std	Y+15, r1	; 0x0f
   10e22:	1a 8a       	std	Y+18, r1	; 0x12
   10e24:	19 8a       	std	Y+17, r1	; 0x11
   10e26:	1e 82       	std	Y+6, r1	; 0x06
   10e28:	1d 82       	std	Y+5, r1	; 0x05
   10e2a:	18 86       	std	Y+8, r1	; 0x08
   10e2c:	1f 82       	std	Y+7, r1	; 0x07
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
   10e2e:	ce 01       	movw	r24, r28
   10e30:	80 51       	subi	r24, 0x10	; 16
   10e32:	9f 4f       	sbci	r25, 0xFF	; 255
   10e34:	20 e1       	ldi	r18, 0x10	; 16
   10e36:	fc 01       	movw	r30, r24
   10e38:	32 2f       	mov	r19, r18
   10e3a:	11 92       	st	Z+, r1
   10e3c:	3a 95       	dec	r19
   10e3e:	e9 f7       	brne	.-6      	; 0x10e3a <sh_path+0x7a>
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
   10e40:	10 92 32 04 	sts	0x0432, r1
   10e44:	10 92 31 04 	sts	0x0431, r1
   10e48:	10 92 34 04 	sts	0x0434, r1
   10e4c:	10 92 33 04 	sts	0x0433, r1
   10e50:	10 92 36 04 	sts	0x0436, r1
   10e54:	10 92 35 04 	sts	0x0435, r1
   10e58:	10 92 38 04 	sts	0x0438, r1
   10e5c:	10 92 37 04 	sts	0x0437, r1
    for(i=0;i<36;i++)
   10e60:	1e 82       	std	Y+6, r1	; 0x06
   10e62:	1d 82       	std	Y+5, r1	; 0x05
   10e64:	2e c0       	rjmp	.+92     	; 0x10ec2 <sh_path+0x102>
	{
        dist[i]=INF;
   10e66:	8d 81       	ldd	r24, Y+5	; 0x05
   10e68:	9e 81       	ldd	r25, Y+6	; 0x06
   10e6a:	88 0f       	add	r24, r24
   10e6c:	99 1f       	adc	r25, r25
   10e6e:	9e 01       	movw	r18, r28
   10e70:	2f 5f       	subi	r18, 0xFF	; 255
   10e72:	3f 4f       	sbci	r19, 0xFF	; 255
   10e74:	82 0f       	add	r24, r18
   10e76:	93 1f       	adc	r25, r19
   10e78:	45 96       	adiw	r24, 0x15	; 21
   10e7a:	27 ee       	ldi	r18, 0xE7	; 231
   10e7c:	33 e0       	ldi	r19, 0x03	; 3
   10e7e:	fc 01       	movw	r30, r24
   10e80:	31 83       	std	Z+1, r19	; 0x01
   10e82:	20 83       	st	Z, r18
        included[i]=FALSE;
   10e84:	9e 01       	movw	r18, r28
   10e86:	28 55       	subi	r18, 0x58	; 88
   10e88:	3f 4f       	sbci	r19, 0xFF	; 255
   10e8a:	8d 81       	ldd	r24, Y+5	; 0x05
   10e8c:	9e 81       	ldd	r25, Y+6	; 0x06
   10e8e:	88 0f       	add	r24, r24
   10e90:	99 1f       	adc	r25, r25
   10e92:	82 0f       	add	r24, r18
   10e94:	93 1f       	adc	r25, r19
   10e96:	fc 01       	movw	r30, r24
   10e98:	11 82       	std	Z+1, r1	; 0x01
   10e9a:	10 82       	st	Z, r1
        parent[i]=INF;
   10e9c:	9e 01       	movw	r18, r28
   10e9e:	22 5a       	subi	r18, 0xA2	; 162
   10ea0:	3f 4f       	sbci	r19, 0xFF	; 255
   10ea2:	8d 81       	ldd	r24, Y+5	; 0x05
   10ea4:	9e 81       	ldd	r25, Y+6	; 0x06
   10ea6:	88 0f       	add	r24, r24
   10ea8:	99 1f       	adc	r25, r25
   10eaa:	82 0f       	add	r24, r18
   10eac:	93 1f       	adc	r25, r19
   10eae:	27 ee       	ldi	r18, 0xE7	; 231
   10eb0:	33 e0       	ldi	r19, 0x03	; 3
   10eb2:	fc 01       	movw	r30, r24
   10eb4:	31 83       	std	Z+1, r19	; 0x01
   10eb6:	20 83       	st	Z, r18
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    for(i=0;i<36;i++)
   10eb8:	8d 81       	ldd	r24, Y+5	; 0x05
   10eba:	9e 81       	ldd	r25, Y+6	; 0x06
   10ebc:	01 96       	adiw	r24, 0x01	; 1
   10ebe:	9e 83       	std	Y+6, r25	; 0x06
   10ec0:	8d 83       	std	Y+5, r24	; 0x05
   10ec2:	8d 81       	ldd	r24, Y+5	; 0x05
   10ec4:	9e 81       	ldd	r25, Y+6	; 0x06
   10ec6:	84 32       	cpi	r24, 0x24	; 36
   10ec8:	91 05       	cpc	r25, r1
   10eca:	6c f2       	brlt	.-102    	; 0x10e66 <sh_path+0xa6>
	{
        dist[i]=INF;
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
   10ecc:	ce 01       	movw	r24, r28
   10ece:	80 50       	subi	r24, 0x00	; 0
   10ed0:	9f 4f       	sbci	r25, 0xFF	; 255
   10ed2:	fc 01       	movw	r30, r24
   10ed4:	80 81       	ld	r24, Z
   10ed6:	91 81       	ldd	r25, Z+1	; 0x01
   10ed8:	88 0f       	add	r24, r24
   10eda:	99 1f       	adc	r25, r25
   10edc:	9e 01       	movw	r18, r28
   10ede:	2f 5f       	subi	r18, 0xFF	; 255
   10ee0:	3f 4f       	sbci	r19, 0xFF	; 255
   10ee2:	82 0f       	add	r24, r18
   10ee4:	93 1f       	adc	r25, r19
   10ee6:	45 96       	adiw	r24, 0x15	; 21
   10ee8:	fc 01       	movw	r30, r24
   10eea:	11 82       	std	Z+1, r1	; 0x01
   10eec:	10 82       	st	Z, r1
    parent[start]=start;
   10eee:	9e 01       	movw	r18, r28
   10ef0:	22 5a       	subi	r18, 0xA2	; 162
   10ef2:	3f 4f       	sbci	r19, 0xFF	; 255
   10ef4:	ce 01       	movw	r24, r28
   10ef6:	80 50       	subi	r24, 0x00	; 0
   10ef8:	9f 4f       	sbci	r25, 0xFF	; 255
   10efa:	fc 01       	movw	r30, r24
   10efc:	80 81       	ld	r24, Z
   10efe:	91 81       	ldd	r25, Z+1	; 0x01
   10f00:	88 0f       	add	r24, r24
   10f02:	99 1f       	adc	r25, r25
   10f04:	82 0f       	add	r24, r18
   10f06:	93 1f       	adc	r25, r19
   10f08:	9e 01       	movw	r18, r28
   10f0a:	20 50       	subi	r18, 0x00	; 0
   10f0c:	3f 4f       	sbci	r19, 0xFF	; 255
   10f0e:	f9 01       	movw	r30, r18
   10f10:	20 81       	ld	r18, Z
   10f12:	31 81       	ldd	r19, Z+1	; 0x01
   10f14:	fc 01       	movw	r30, r24
   10f16:	31 83       	std	Z+1, r19	; 0x01
   10f18:	20 83       	st	Z, r18
    for(i=0;i<35;i++)
   10f1a:	1e 82       	std	Y+6, r1	; 0x06
   10f1c:	1d 82       	std	Y+5, r1	; 0x05
   10f1e:	01 c1       	rjmp	.+514    	; 0x11122 <sh_path+0x362>
	{
        u=min_dis(dist,included);
   10f20:	ce 01       	movw	r24, r28
   10f22:	46 96       	adiw	r24, 0x16	; 22
   10f24:	9e 01       	movw	r18, r28
   10f26:	28 55       	subi	r18, 0x58	; 88
   10f28:	3f 4f       	sbci	r19, 0xFF	; 255
   10f2a:	b9 01       	movw	r22, r18
   10f2c:	0e 94 b6 84 	call	0x1096c	; 0x1096c <min_dis>
   10f30:	98 8b       	std	Y+16, r25	; 0x10
   10f32:	8f 87       	std	Y+15, r24	; 0x0f
    //    printf("%d\n",u);
        included[u]=TRUE;
   10f34:	9e 01       	movw	r18, r28
   10f36:	28 55       	subi	r18, 0x58	; 88
   10f38:	3f 4f       	sbci	r19, 0xFF	; 255
   10f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
   10f3c:	98 89       	ldd	r25, Y+16	; 0x10
   10f3e:	88 0f       	add	r24, r24
   10f40:	99 1f       	adc	r25, r25
   10f42:	82 0f       	add	r24, r18
   10f44:	93 1f       	adc	r25, r19
   10f46:	21 e0       	ldi	r18, 0x01	; 1
   10f48:	30 e0       	ldi	r19, 0x00	; 0
   10f4a:	fc 01       	movw	r30, r24
   10f4c:	31 83       	std	Z+1, r19	; 0x01
   10f4e:	20 83       	st	Z, r18
        p_nx=u/6;
   10f50:	8f 85       	ldd	r24, Y+15	; 0x0f
   10f52:	98 89       	ldd	r25, Y+16	; 0x10
   10f54:	26 e0       	ldi	r18, 0x06	; 6
   10f56:	30 e0       	ldi	r19, 0x00	; 0
   10f58:	b9 01       	movw	r22, r18
   10f5a:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10f5e:	9b 01       	movw	r18, r22
   10f60:	c9 01       	movw	r24, r18
   10f62:	90 93 32 04 	sts	0x0432, r25
   10f66:	80 93 31 04 	sts	0x0431, r24
        p_ny=u%6;
   10f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
   10f6c:	98 89       	ldd	r25, Y+16	; 0x10
   10f6e:	26 e0       	ldi	r18, 0x06	; 6
   10f70:	30 e0       	ldi	r19, 0x00	; 0
   10f72:	b9 01       	movw	r22, r18
   10f74:	0e 94 42 93 	call	0x12684	; 0x12684 <__divmodhi4>
   10f78:	90 93 34 04 	sts	0x0434, r25
   10f7c:	80 93 33 04 	sts	0x0433, r24
        adjacent(p_nx,p_ny,adj);
   10f80:	80 91 31 04 	lds	r24, 0x0431
   10f84:	90 91 32 04 	lds	r25, 0x0432
   10f88:	40 91 33 04 	lds	r20, 0x0433
   10f8c:	50 91 34 04 	lds	r21, 0x0434
   10f90:	9e 01       	movw	r18, r28
   10f92:	20 51       	subi	r18, 0x10	; 16
   10f94:	3f 4f       	sbci	r19, 0xFF	; 255
   10f96:	ba 01       	movw	r22, r20
   10f98:	a9 01       	movw	r20, r18
   10f9a:	0e 94 f7 83 	call	0x107ee	; 0x107ee <adjacent>
        for(j=0;j<4;j++)
   10f9e:	18 86       	std	Y+8, r1	; 0x08
   10fa0:	1f 82       	std	Y+7, r1	; 0x07
   10fa2:	b4 c0       	rjmp	.+360    	; 0x1110c <sh_path+0x34c>
		{
            if(adj[j][0]!=-1)
   10fa4:	9e 01       	movw	r18, r28
   10fa6:	20 51       	subi	r18, 0x10	; 16
   10fa8:	3f 4f       	sbci	r19, 0xFF	; 255
   10faa:	8f 81       	ldd	r24, Y+7	; 0x07
   10fac:	98 85       	ldd	r25, Y+8	; 0x08
   10fae:	88 0f       	add	r24, r24
   10fb0:	99 1f       	adc	r25, r25
   10fb2:	88 0f       	add	r24, r24
   10fb4:	99 1f       	adc	r25, r25
   10fb6:	82 0f       	add	r24, r18
   10fb8:	93 1f       	adc	r25, r19
   10fba:	fc 01       	movw	r30, r24
   10fbc:	80 81       	ld	r24, Z
   10fbe:	91 81       	ldd	r25, Z+1	; 0x01
   10fc0:	ff ef       	ldi	r31, 0xFF	; 255
   10fc2:	8f 3f       	cpi	r24, 0xFF	; 255
   10fc4:	9f 07       	cpc	r25, r31
   10fc6:	09 f4       	brne	.+2      	; 0x10fca <sh_path+0x20a>
   10fc8:	9c c0       	rjmp	.+312    	; 0x11102 <sh_path+0x342>
			{

                n_nx=adj[j][0];
   10fca:	9e 01       	movw	r18, r28
   10fcc:	20 51       	subi	r18, 0x10	; 16
   10fce:	3f 4f       	sbci	r19, 0xFF	; 255
   10fd0:	8f 81       	ldd	r24, Y+7	; 0x07
   10fd2:	98 85       	ldd	r25, Y+8	; 0x08
   10fd4:	88 0f       	add	r24, r24
   10fd6:	99 1f       	adc	r25, r25
   10fd8:	88 0f       	add	r24, r24
   10fda:	99 1f       	adc	r25, r25
   10fdc:	82 0f       	add	r24, r18
   10fde:	93 1f       	adc	r25, r19
   10fe0:	fc 01       	movw	r30, r24
   10fe2:	80 81       	ld	r24, Z
   10fe4:	91 81       	ldd	r25, Z+1	; 0x01
   10fe6:	90 93 36 04 	sts	0x0436, r25
   10fea:	80 93 35 04 	sts	0x0435, r24
                n_ny=adj[j][1];
   10fee:	9e 01       	movw	r18, r28
   10ff0:	20 51       	subi	r18, 0x10	; 16
   10ff2:	3f 4f       	sbci	r19, 0xFF	; 255
   10ff4:	8f 81       	ldd	r24, Y+7	; 0x07
   10ff6:	98 85       	ldd	r25, Y+8	; 0x08
   10ff8:	88 0f       	add	r24, r24
   10ffa:	99 1f       	adc	r25, r25
   10ffc:	88 0f       	add	r24, r24
   10ffe:	99 1f       	adc	r25, r25
   11000:	82 0f       	add	r24, r18
   11002:	93 1f       	adc	r25, r19
   11004:	02 96       	adiw	r24, 0x02	; 2
   11006:	fc 01       	movw	r30, r24
   11008:	80 81       	ld	r24, Z
   1100a:	91 81       	ldd	r25, Z+1	; 0x01
   1100c:	90 93 38 04 	sts	0x0438, r25
   11010:	80 93 37 04 	sts	0x0437, r24
                v=grid[n_nx][n_ny]-1;
   11014:	20 91 35 04 	lds	r18, 0x0435
   11018:	30 91 36 04 	lds	r19, 0x0436
   1101c:	40 91 37 04 	lds	r20, 0x0437
   11020:	50 91 38 04 	lds	r21, 0x0438
   11024:	c9 01       	movw	r24, r18
   11026:	88 0f       	add	r24, r24
   11028:	99 1f       	adc	r25, r25
   1102a:	82 0f       	add	r24, r18
   1102c:	93 1f       	adc	r25, r19
   1102e:	88 0f       	add	r24, r24
   11030:	99 1f       	adc	r25, r25
   11032:	84 0f       	add	r24, r20
   11034:	95 1f       	adc	r25, r21
   11036:	88 0f       	add	r24, r24
   11038:	99 1f       	adc	r25, r25
   1103a:	8e 5f       	subi	r24, 0xFE	; 254
   1103c:	9d 4f       	sbci	r25, 0xFD	; 253
   1103e:	fc 01       	movw	r30, r24
   11040:	80 81       	ld	r24, Z
   11042:	91 81       	ldd	r25, Z+1	; 0x01
   11044:	01 97       	sbiw	r24, 0x01	; 1
   11046:	9a 8b       	std	Y+18, r25	; 0x12
   11048:	89 8b       	std	Y+17, r24	; 0x11
                //printf("%d  %d\n",n_nx,n_ny);
                if((included[v]==FALSE)&&(dist[v]>(dist[u]+weight)))   // d[u,v] > d[u,i]+d[i,v] here d[i,v] is always 1 for a grid
   1104a:	9e 01       	movw	r18, r28
   1104c:	28 55       	subi	r18, 0x58	; 88
   1104e:	3f 4f       	sbci	r19, 0xFF	; 255
   11050:	89 89       	ldd	r24, Y+17	; 0x11
   11052:	9a 89       	ldd	r25, Y+18	; 0x12
   11054:	88 0f       	add	r24, r24
   11056:	99 1f       	adc	r25, r25
   11058:	82 0f       	add	r24, r18
   1105a:	93 1f       	adc	r25, r19
   1105c:	fc 01       	movw	r30, r24
   1105e:	80 81       	ld	r24, Z
   11060:	91 81       	ldd	r25, Z+1	; 0x01
   11062:	00 97       	sbiw	r24, 0x00	; 0
   11064:	09 f0       	breq	.+2      	; 0x11068 <sh_path+0x2a8>
   11066:	4d c0       	rjmp	.+154    	; 0x11102 <sh_path+0x342>
   11068:	89 89       	ldd	r24, Y+17	; 0x11
   1106a:	9a 89       	ldd	r25, Y+18	; 0x12
   1106c:	88 0f       	add	r24, r24
   1106e:	99 1f       	adc	r25, r25
   11070:	9e 01       	movw	r18, r28
   11072:	2f 5f       	subi	r18, 0xFF	; 255
   11074:	3f 4f       	sbci	r19, 0xFF	; 255
   11076:	82 0f       	add	r24, r18
   11078:	93 1f       	adc	r25, r19
   1107a:	45 96       	adiw	r24, 0x15	; 21
   1107c:	fc 01       	movw	r30, r24
   1107e:	20 81       	ld	r18, Z
   11080:	31 81       	ldd	r19, Z+1	; 0x01
   11082:	8f 85       	ldd	r24, Y+15	; 0x0f
   11084:	98 89       	ldd	r25, Y+16	; 0x10
   11086:	88 0f       	add	r24, r24
   11088:	99 1f       	adc	r25, r25
   1108a:	ae 01       	movw	r20, r28
   1108c:	4f 5f       	subi	r20, 0xFF	; 255
   1108e:	5f 4f       	sbci	r21, 0xFF	; 255
   11090:	84 0f       	add	r24, r20
   11092:	95 1f       	adc	r25, r21
   11094:	45 96       	adiw	r24, 0x15	; 21
   11096:	fc 01       	movw	r30, r24
   11098:	40 81       	ld	r20, Z
   1109a:	51 81       	ldd	r21, Z+1	; 0x01
   1109c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1109e:	9e 85       	ldd	r25, Y+14	; 0x0e
   110a0:	84 0f       	add	r24, r20
   110a2:	95 1f       	adc	r25, r21
   110a4:	82 17       	cp	r24, r18
   110a6:	93 07       	cpc	r25, r19
   110a8:	64 f5       	brge	.+88     	; 0x11102 <sh_path+0x342>
                    {
						dist[v]=dist[u]+weight;
   110aa:	8f 85       	ldd	r24, Y+15	; 0x0f
   110ac:	98 89       	ldd	r25, Y+16	; 0x10
   110ae:	88 0f       	add	r24, r24
   110b0:	99 1f       	adc	r25, r25
   110b2:	9e 01       	movw	r18, r28
   110b4:	2f 5f       	subi	r18, 0xFF	; 255
   110b6:	3f 4f       	sbci	r19, 0xFF	; 255
   110b8:	82 0f       	add	r24, r18
   110ba:	93 1f       	adc	r25, r19
   110bc:	45 96       	adiw	r24, 0x15	; 21
   110be:	fc 01       	movw	r30, r24
   110c0:	20 81       	ld	r18, Z
   110c2:	31 81       	ldd	r19, Z+1	; 0x01
   110c4:	8d 85       	ldd	r24, Y+13	; 0x0d
   110c6:	9e 85       	ldd	r25, Y+14	; 0x0e
   110c8:	28 0f       	add	r18, r24
   110ca:	39 1f       	adc	r19, r25
   110cc:	89 89       	ldd	r24, Y+17	; 0x11
   110ce:	9a 89       	ldd	r25, Y+18	; 0x12
   110d0:	88 0f       	add	r24, r24
   110d2:	99 1f       	adc	r25, r25
   110d4:	ae 01       	movw	r20, r28
   110d6:	4f 5f       	subi	r20, 0xFF	; 255
   110d8:	5f 4f       	sbci	r21, 0xFF	; 255
   110da:	84 0f       	add	r24, r20
   110dc:	95 1f       	adc	r25, r21
   110de:	45 96       	adiw	r24, 0x15	; 21
   110e0:	fc 01       	movw	r30, r24
   110e2:	31 83       	std	Z+1, r19	; 0x01
   110e4:	20 83       	st	Z, r18
						parent[v]=u;
   110e6:	9e 01       	movw	r18, r28
   110e8:	22 5a       	subi	r18, 0xA2	; 162
   110ea:	3f 4f       	sbci	r19, 0xFF	; 255
   110ec:	89 89       	ldd	r24, Y+17	; 0x11
   110ee:	9a 89       	ldd	r25, Y+18	; 0x12
   110f0:	88 0f       	add	r24, r24
   110f2:	99 1f       	adc	r25, r25
   110f4:	82 0f       	add	r24, r18
   110f6:	93 1f       	adc	r25, r19
   110f8:	2f 85       	ldd	r18, Y+15	; 0x0f
   110fa:	38 89       	ldd	r19, Y+16	; 0x10
   110fc:	fc 01       	movw	r30, r24
   110fe:	31 83       	std	Z+1, r19	; 0x01
   11100:	20 83       	st	Z, r18
    //    printf("%d\n",u);
        included[u]=TRUE;
        p_nx=u/6;
        p_ny=u%6;
        adjacent(p_nx,p_ny,adj);
        for(j=0;j<4;j++)
   11102:	8f 81       	ldd	r24, Y+7	; 0x07
   11104:	98 85       	ldd	r25, Y+8	; 0x08
   11106:	01 96       	adiw	r24, 0x01	; 1
   11108:	98 87       	std	Y+8, r25	; 0x08
   1110a:	8f 83       	std	Y+7, r24	; 0x07
   1110c:	8f 81       	ldd	r24, Y+7	; 0x07
   1110e:	98 85       	ldd	r25, Y+8	; 0x08
   11110:	84 30       	cpi	r24, 0x04	; 4
   11112:	91 05       	cpc	r25, r1
   11114:	0c f4       	brge	.+2      	; 0x11118 <sh_path+0x358>
   11116:	46 cf       	rjmp	.-372    	; 0x10fa4 <sh_path+0x1e4>
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    parent[start]=start;
    for(i=0;i<35;i++)
   11118:	8d 81       	ldd	r24, Y+5	; 0x05
   1111a:	9e 81       	ldd	r25, Y+6	; 0x06
   1111c:	01 96       	adiw	r24, 0x01	; 1
   1111e:	9e 83       	std	Y+6, r25	; 0x06
   11120:	8d 83       	std	Y+5, r24	; 0x05
   11122:	8d 81       	ldd	r24, Y+5	; 0x05
   11124:	9e 81       	ldd	r25, Y+6	; 0x06
   11126:	83 32       	cpi	r24, 0x23	; 35
   11128:	91 05       	cpc	r25, r1
   1112a:	0c f4       	brge	.+2      	; 0x1112e <sh_path+0x36e>
   1112c:	f9 ce       	rjmp	.-526    	; 0x10f20 <sh_path+0x160>
                    }
            }
        }
    }

    p=(int*)malloc(sizeof(int));
   1112e:	82 e0       	ldi	r24, 0x02	; 2
   11130:	90 e0       	ldi	r25, 0x00	; 0
   11132:	0e 94 55 93 	call	0x126aa	; 0x126aa <malloc>
   11136:	9a 87       	std	Y+10, r25	; 0x0a
   11138:	89 87       	std	Y+9, r24	; 0x09
    current=end;
   1113a:	ce 01       	movw	r24, r28
   1113c:	8e 5f       	subi	r24, 0xFE	; 254
   1113e:	9e 4f       	sbci	r25, 0xFE	; 254
   11140:	fc 01       	movw	r30, r24
   11142:	80 81       	ld	r24, Z
   11144:	91 81       	ldd	r25, Z+1	; 0x01
   11146:	9a 83       	std	Y+2, r25	; 0x02
   11148:	89 83       	std	Y+1, r24	; 0x01
    p[0]=current;
   1114a:	89 85       	ldd	r24, Y+9	; 0x09
   1114c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1114e:	29 81       	ldd	r18, Y+1	; 0x01
   11150:	3a 81       	ldd	r19, Y+2	; 0x02
   11152:	fc 01       	movw	r30, r24
   11154:	31 83       	std	Z+1, r19	; 0x01
   11156:	20 83       	st	Z, r18
    while(current!=start)
   11158:	2d c0       	rjmp	.+90     	; 0x111b4 <sh_path+0x3f4>
	{
		length++;
   1115a:	8b 81       	ldd	r24, Y+3	; 0x03
   1115c:	9c 81       	ldd	r25, Y+4	; 0x04
   1115e:	01 96       	adiw	r24, 0x01	; 1
   11160:	9c 83       	std	Y+4, r25	; 0x04
   11162:	8b 83       	std	Y+3, r24	; 0x03
		current=parent[current];
   11164:	9e 01       	movw	r18, r28
   11166:	22 5a       	subi	r18, 0xA2	; 162
   11168:	3f 4f       	sbci	r19, 0xFF	; 255
   1116a:	89 81       	ldd	r24, Y+1	; 0x01
   1116c:	9a 81       	ldd	r25, Y+2	; 0x02
   1116e:	88 0f       	add	r24, r24
   11170:	99 1f       	adc	r25, r25
   11172:	82 0f       	add	r24, r18
   11174:	93 1f       	adc	r25, r19
   11176:	fc 01       	movw	r30, r24
   11178:	80 81       	ld	r24, Z
   1117a:	91 81       	ldd	r25, Z+1	; 0x01
   1117c:	9a 83       	std	Y+2, r25	; 0x02
   1117e:	89 83       	std	Y+1, r24	; 0x01
		p=(int*)realloc(p,((length+1)*sizeof(int)));
   11180:	8b 81       	ldd	r24, Y+3	; 0x03
   11182:	9c 81       	ldd	r25, Y+4	; 0x04
   11184:	01 96       	adiw	r24, 0x01	; 1
   11186:	88 0f       	add	r24, r24
   11188:	99 1f       	adc	r25, r25
   1118a:	9c 01       	movw	r18, r24
   1118c:	89 85       	ldd	r24, Y+9	; 0x09
   1118e:	9a 85       	ldd	r25, Y+10	; 0x0a
   11190:	b9 01       	movw	r22, r18
   11192:	0e 94 84 94 	call	0x12908	; 0x12908 <realloc>
   11196:	9a 87       	std	Y+10, r25	; 0x0a
   11198:	89 87       	std	Y+9, r24	; 0x09
		p[length]=current;
   1119a:	8b 81       	ldd	r24, Y+3	; 0x03
   1119c:	9c 81       	ldd	r25, Y+4	; 0x04
   1119e:	88 0f       	add	r24, r24
   111a0:	99 1f       	adc	r25, r25
   111a2:	29 85       	ldd	r18, Y+9	; 0x09
   111a4:	3a 85       	ldd	r19, Y+10	; 0x0a
   111a6:	82 0f       	add	r24, r18
   111a8:	93 1f       	adc	r25, r19
   111aa:	29 81       	ldd	r18, Y+1	; 0x01
   111ac:	3a 81       	ldd	r19, Y+2	; 0x02
   111ae:	fc 01       	movw	r30, r24
   111b0:	31 83       	std	Z+1, r19	; 0x01
   111b2:	20 83       	st	Z, r18
    }

    p=(int*)malloc(sizeof(int));
    current=end;
    p[0]=current;
    while(current!=start)
   111b4:	ce 01       	movw	r24, r28
   111b6:	80 50       	subi	r24, 0x00	; 0
   111b8:	9f 4f       	sbci	r25, 0xFF	; 255
   111ba:	29 81       	ldd	r18, Y+1	; 0x01
   111bc:	3a 81       	ldd	r19, Y+2	; 0x02
   111be:	fc 01       	movw	r30, r24
   111c0:	80 81       	ld	r24, Z
   111c2:	91 81       	ldd	r25, Z+1	; 0x01
   111c4:	28 17       	cp	r18, r24
   111c6:	39 07       	cpc	r19, r25
   111c8:	41 f6       	brne	.-112    	; 0x1115a <sh_path+0x39a>
		p=(int*)realloc(p,((length+1)*sizeof(int)));
		p[length]=current;
    }


    p_nx=-1,p_ny=0,n_nx=0,n_ny=0;// Starting with facing north
   111ca:	8f ef       	ldi	r24, 0xFF	; 255
   111cc:	9f ef       	ldi	r25, 0xFF	; 255
   111ce:	90 93 32 04 	sts	0x0432, r25
   111d2:	80 93 31 04 	sts	0x0431, r24
   111d6:	10 92 34 04 	sts	0x0434, r1
   111da:	10 92 33 04 	sts	0x0433, r1
   111de:	10 92 36 04 	sts	0x0436, r1
   111e2:	10 92 35 04 	sts	0x0435, r1
   111e6:	10 92 38 04 	sts	0x0438, r1
   111ea:	10 92 37 04 	sts	0x0437, r1

    dir=rotate(p[length],p[length-1],&turn_count);
   111ee:	8b 81       	ldd	r24, Y+3	; 0x03
   111f0:	9c 81       	ldd	r25, Y+4	; 0x04
   111f2:	88 0f       	add	r24, r24
   111f4:	99 1f       	adc	r25, r25
   111f6:	29 85       	ldd	r18, Y+9	; 0x09
   111f8:	3a 85       	ldd	r19, Y+10	; 0x0a
   111fa:	82 0f       	add	r24, r18
   111fc:	93 1f       	adc	r25, r19
   111fe:	fc 01       	movw	r30, r24
   11200:	80 81       	ld	r24, Z
   11202:	91 81       	ldd	r25, Z+1	; 0x01
   11204:	2b 81       	ldd	r18, Y+3	; 0x03
   11206:	3c 81       	ldd	r19, Y+4	; 0x04
   11208:	21 50       	subi	r18, 0x01	; 1
   1120a:	30 40       	sbci	r19, 0x00	; 0
   1120c:	22 0f       	add	r18, r18
   1120e:	33 1f       	adc	r19, r19
   11210:	49 85       	ldd	r20, Y+9	; 0x09
   11212:	5a 85       	ldd	r21, Y+10	; 0x0a
   11214:	24 0f       	add	r18, r20
   11216:	35 1f       	adc	r19, r21
   11218:	f9 01       	movw	r30, r18
   1121a:	40 81       	ld	r20, Z
   1121c:	51 81       	ldd	r21, Z+1	; 0x01
   1121e:	9e 01       	movw	r18, r28
   11220:	2a 55       	subi	r18, 0x5A	; 90
   11222:	3f 4f       	sbci	r19, 0xFF	; 255
   11224:	ba 01       	movw	r22, r20
   11226:	a9 01       	movw	r20, r18
   11228:	0e 94 50 85 	call	0x10aa0	; 0x10aa0 <rotate>
   1122c:	8b 8b       	std	Y+19, r24	; 0x13

    path=(char*)malloc((length+1)*sizeof(char *));
   1122e:	8b 81       	ldd	r24, Y+3	; 0x03
   11230:	9c 81       	ldd	r25, Y+4	; 0x04
   11232:	01 96       	adiw	r24, 0x01	; 1
   11234:	88 0f       	add	r24, r24
   11236:	99 1f       	adc	r25, r25
   11238:	0e 94 55 93 	call	0x126aa	; 0x126aa <malloc>
   1123c:	9d 8b       	std	Y+21, r25	; 0x15
   1123e:	8c 8b       	std	Y+20, r24	; 0x14
    path[0]=dir;
   11240:	8c 89       	ldd	r24, Y+20	; 0x14
   11242:	9d 89       	ldd	r25, Y+21	; 0x15
   11244:	2b 89       	ldd	r18, Y+19	; 0x13
   11246:	fc 01       	movw	r30, r24
   11248:	20 83       	st	Z, r18
    *count1=0;
   1124a:	ce 01       	movw	r24, r28
   1124c:	8c 5f       	subi	r24, 0xFC	; 252
   1124e:	9e 4f       	sbci	r25, 0xFE	; 254
   11250:	fc 01       	movw	r30, r24
   11252:	80 81       	ld	r24, Z
   11254:	91 81       	ldd	r25, Z+1	; 0x01
   11256:	fc 01       	movw	r30, r24
   11258:	11 82       	std	Z+1, r1	; 0x01
   1125a:	10 82       	st	Z, r1
    for(i=length-1;i>0;i--)
   1125c:	8b 81       	ldd	r24, Y+3	; 0x03
   1125e:	9c 81       	ldd	r25, Y+4	; 0x04
   11260:	01 97       	sbiw	r24, 0x01	; 1
   11262:	9e 83       	std	Y+6, r25	; 0x06
   11264:	8d 83       	std	Y+5, r24	; 0x05
   11266:	4a c0       	rjmp	.+148    	; 0x112fc <sh_path+0x53c>
	{
		*count1+=1;
   11268:	ce 01       	movw	r24, r28
   1126a:	8c 5f       	subi	r24, 0xFC	; 252
   1126c:	9e 4f       	sbci	r25, 0xFE	; 254
   1126e:	fc 01       	movw	r30, r24
   11270:	80 81       	ld	r24, Z
   11272:	91 81       	ldd	r25, Z+1	; 0x01
   11274:	fc 01       	movw	r30, r24
   11276:	80 81       	ld	r24, Z
   11278:	91 81       	ldd	r25, Z+1	; 0x01
   1127a:	9c 01       	movw	r18, r24
   1127c:	2f 5f       	subi	r18, 0xFF	; 255
   1127e:	3f 4f       	sbci	r19, 0xFF	; 255
   11280:	ce 01       	movw	r24, r28
   11282:	8c 5f       	subi	r24, 0xFC	; 252
   11284:	9e 4f       	sbci	r25, 0xFE	; 254
   11286:	fc 01       	movw	r30, r24
   11288:	80 81       	ld	r24, Z
   1128a:	91 81       	ldd	r25, Z+1	; 0x01
   1128c:	fc 01       	movw	r30, r24
   1128e:	31 83       	std	Z+1, r19	; 0x01
   11290:	20 83       	st	Z, r18
		dir=direction(p[i],p[i-1],&turn_count);
   11292:	8d 81       	ldd	r24, Y+5	; 0x05
   11294:	9e 81       	ldd	r25, Y+6	; 0x06
   11296:	88 0f       	add	r24, r24
   11298:	99 1f       	adc	r25, r25
   1129a:	29 85       	ldd	r18, Y+9	; 0x09
   1129c:	3a 85       	ldd	r19, Y+10	; 0x0a
   1129e:	82 0f       	add	r24, r18
   112a0:	93 1f       	adc	r25, r19
   112a2:	fc 01       	movw	r30, r24
   112a4:	80 81       	ld	r24, Z
   112a6:	91 81       	ldd	r25, Z+1	; 0x01
   112a8:	2d 81       	ldd	r18, Y+5	; 0x05
   112aa:	3e 81       	ldd	r19, Y+6	; 0x06
   112ac:	21 50       	subi	r18, 0x01	; 1
   112ae:	30 40       	sbci	r19, 0x00	; 0
   112b0:	22 0f       	add	r18, r18
   112b2:	33 1f       	adc	r19, r19
   112b4:	49 85       	ldd	r20, Y+9	; 0x09
   112b6:	5a 85       	ldd	r21, Y+10	; 0x0a
   112b8:	24 0f       	add	r18, r20
   112ba:	35 1f       	adc	r19, r21
   112bc:	f9 01       	movw	r30, r18
   112be:	40 81       	ld	r20, Z
   112c0:	51 81       	ldd	r21, Z+1	; 0x01
   112c2:	9e 01       	movw	r18, r28
   112c4:	2a 55       	subi	r18, 0x5A	; 90
   112c6:	3f 4f       	sbci	r19, 0xFF	; 255
   112c8:	ba 01       	movw	r22, r20
   112ca:	a9 01       	movw	r20, r18
   112cc:	0e 94 e9 85 	call	0x10bd2	; 0x10bd2 <direction>
   112d0:	8b 8b       	std	Y+19, r24	; 0x13
		path[*count1]=dir;
   112d2:	ce 01       	movw	r24, r28
   112d4:	8c 5f       	subi	r24, 0xFC	; 252
   112d6:	9e 4f       	sbci	r25, 0xFE	; 254
   112d8:	fc 01       	movw	r30, r24
   112da:	80 81       	ld	r24, Z
   112dc:	91 81       	ldd	r25, Z+1	; 0x01
   112de:	fc 01       	movw	r30, r24
   112e0:	80 81       	ld	r24, Z
   112e2:	91 81       	ldd	r25, Z+1	; 0x01
   112e4:	2c 89       	ldd	r18, Y+20	; 0x14
   112e6:	3d 89       	ldd	r19, Y+21	; 0x15
   112e8:	82 0f       	add	r24, r18
   112ea:	93 1f       	adc	r25, r19
   112ec:	2b 89       	ldd	r18, Y+19	; 0x13
   112ee:	fc 01       	movw	r30, r24
   112f0:	20 83       	st	Z, r18
    dir=rotate(p[length],p[length-1],&turn_count);

    path=(char*)malloc((length+1)*sizeof(char *));
    path[0]=dir;
    *count1=0;
    for(i=length-1;i>0;i--)
   112f2:	8d 81       	ldd	r24, Y+5	; 0x05
   112f4:	9e 81       	ldd	r25, Y+6	; 0x06
   112f6:	01 97       	sbiw	r24, 0x01	; 1
   112f8:	9e 83       	std	Y+6, r25	; 0x06
   112fa:	8d 83       	std	Y+5, r24	; 0x05
   112fc:	8d 81       	ldd	r24, Y+5	; 0x05
   112fe:	9e 81       	ldd	r25, Y+6	; 0x06
   11300:	18 16       	cp	r1, r24
   11302:	19 06       	cpc	r1, r25
   11304:	0c f4       	brge	.+2      	; 0x11308 <sh_path+0x548>
   11306:	b0 cf       	rjmp	.-160    	; 0x11268 <sh_path+0x4a8>
	{
		*count1+=1;
		dir=direction(p[i],p[i-1],&turn_count);
		path[*count1]=dir;
    }
    *count1+=1;
   11308:	ce 01       	movw	r24, r28
   1130a:	8c 5f       	subi	r24, 0xFC	; 252
   1130c:	9e 4f       	sbci	r25, 0xFE	; 254
   1130e:	fc 01       	movw	r30, r24
   11310:	80 81       	ld	r24, Z
   11312:	91 81       	ldd	r25, Z+1	; 0x01
   11314:	fc 01       	movw	r30, r24
   11316:	80 81       	ld	r24, Z
   11318:	91 81       	ldd	r25, Z+1	; 0x01
   1131a:	9c 01       	movw	r18, r24
   1131c:	2f 5f       	subi	r18, 0xFF	; 255
   1131e:	3f 4f       	sbci	r19, 0xFF	; 255
   11320:	ce 01       	movw	r24, r28
   11322:	8c 5f       	subi	r24, 0xFC	; 252
   11324:	9e 4f       	sbci	r25, 0xFE	; 254
   11326:	fc 01       	movw	r30, r24
   11328:	80 81       	ld	r24, Z
   1132a:	91 81       	ldd	r25, Z+1	; 0x01
   1132c:	fc 01       	movw	r30, r24
   1132e:	31 83       	std	Z+1, r19	; 0x01
   11330:	20 83       	st	Z, r18
    path[*count1]=align(turn_count);
   11332:	ce 01       	movw	r24, r28
   11334:	8c 5f       	subi	r24, 0xFC	; 252
   11336:	9e 4f       	sbci	r25, 0xFE	; 254
   11338:	fc 01       	movw	r30, r24
   1133a:	80 81       	ld	r24, Z
   1133c:	91 81       	ldd	r25, Z+1	; 0x01
   1133e:	fc 01       	movw	r30, r24
   11340:	80 81       	ld	r24, Z
   11342:	91 81       	ldd	r25, Z+1	; 0x01
   11344:	2c 89       	ldd	r18, Y+20	; 0x14
   11346:	3d 89       	ldd	r19, Y+21	; 0x15
   11348:	89 01       	movw	r16, r18
   1134a:	08 0f       	add	r16, r24
   1134c:	19 1f       	adc	r17, r25
   1134e:	ce 01       	movw	r24, r28
   11350:	8a 55       	subi	r24, 0x5A	; 90
   11352:	9f 4f       	sbci	r25, 0xFF	; 255
   11354:	fc 01       	movw	r30, r24
   11356:	80 81       	ld	r24, Z
   11358:	91 81       	ldd	r25, Z+1	; 0x01
   1135a:	0e 94 12 85 	call	0x10a24	; 0x10a24 <align>
   1135e:	f8 01       	movw	r30, r16
   11360:	80 83       	st	Z, r24
	*count1+=1;
   11362:	ce 01       	movw	r24, r28
   11364:	8c 5f       	subi	r24, 0xFC	; 252
   11366:	9e 4f       	sbci	r25, 0xFE	; 254
   11368:	fc 01       	movw	r30, r24
   1136a:	80 81       	ld	r24, Z
   1136c:	91 81       	ldd	r25, Z+1	; 0x01
   1136e:	fc 01       	movw	r30, r24
   11370:	80 81       	ld	r24, Z
   11372:	91 81       	ldd	r25, Z+1	; 0x01
   11374:	9c 01       	movw	r18, r24
   11376:	2f 5f       	subi	r18, 0xFF	; 255
   11378:	3f 4f       	sbci	r19, 0xFF	; 255
   1137a:	ce 01       	movw	r24, r28
   1137c:	8c 5f       	subi	r24, 0xFC	; 252
   1137e:	9e 4f       	sbci	r25, 0xFE	; 254
   11380:	fc 01       	movw	r30, r24
   11382:	80 81       	ld	r24, Z
   11384:	91 81       	ldd	r25, Z+1	; 0x01
   11386:	fc 01       	movw	r30, r24
   11388:	31 83       	std	Z+1, r19	; 0x01
   1138a:	20 83       	st	Z, r18
	path[*count1]='\0';
   1138c:	ce 01       	movw	r24, r28
   1138e:	8c 5f       	subi	r24, 0xFC	; 252
   11390:	9e 4f       	sbci	r25, 0xFE	; 254
   11392:	fc 01       	movw	r30, r24
   11394:	80 81       	ld	r24, Z
   11396:	91 81       	ldd	r25, Z+1	; 0x01
   11398:	fc 01       	movw	r30, r24
   1139a:	80 81       	ld	r24, Z
   1139c:	91 81       	ldd	r25, Z+1	; 0x01
   1139e:	2c 89       	ldd	r18, Y+20	; 0x14
   113a0:	3d 89       	ldd	r19, Y+21	; 0x15
   113a2:	82 0f       	add	r24, r18
   113a4:	93 1f       	adc	r25, r19
   113a6:	fc 01       	movw	r30, r24
   113a8:	10 82       	st	Z, r1
    free(p);
   113aa:	89 85       	ldd	r24, Y+9	; 0x09
   113ac:	9a 85       	ldd	r25, Y+10	; 0x0a
   113ae:	0e 94 eb 93 	call	0x127d6	; 0x127d6 <free>
    return path;
   113b2:	8c 89       	ldd	r24, Y+20	; 0x14
   113b4:	9d 89       	ldd	r25, Y+21	; 0x15
}
   113b6:	cb 5f       	subi	r28, 0xFB	; 251
   113b8:	de 4f       	sbci	r29, 0xFE	; 254
   113ba:	0f b6       	in	r0, 0x3f	; 63
   113bc:	f8 94       	cli
   113be:	de bf       	out	0x3e, r29	; 62
   113c0:	0f be       	out	0x3f, r0	; 63
   113c2:	cd bf       	out	0x3d, r28	; 61
   113c4:	df 91       	pop	r29
   113c6:	cf 91       	pop	r28
   113c8:	1f 91       	pop	r17
   113ca:	0f 91       	pop	r16
   113cc:	08 95       	ret

000113ce <dijkstra>:
//printf("%c\n",path[i]);
//return 0;
//}

char* dijkstra(int start,int end,int *count)
{
   113ce:	cf 93       	push	r28
   113d0:	df 93       	push	r29
   113d2:	cd b7       	in	r28, 0x3d	; 61
   113d4:	de b7       	in	r29, 0x3e	; 62
   113d6:	2e 97       	sbiw	r28, 0x0e	; 14
   113d8:	0f b6       	in	r0, 0x3f	; 63
   113da:	f8 94       	cli
   113dc:	de bf       	out	0x3e, r29	; 62
   113de:	0f be       	out	0x3f, r0	; 63
   113e0:	cd bf       	out	0x3d, r28	; 61
   113e2:	9a 87       	std	Y+10, r25	; 0x0a
   113e4:	89 87       	std	Y+9, r24	; 0x09
   113e6:	7c 87       	std	Y+12, r23	; 0x0c
   113e8:	6b 87       	std	Y+11, r22	; 0x0b
   113ea:	5e 87       	std	Y+14, r21	; 0x0e
   113ec:	4d 87       	std	Y+13, r20	; 0x0d
	char *path;
	int i=0,j=0,m=31;
   113ee:	1c 82       	std	Y+4, r1	; 0x04
   113f0:	1b 82       	std	Y+3, r1	; 0x03
   113f2:	1e 82       	std	Y+6, r1	; 0x06
   113f4:	1d 82       	std	Y+5, r1	; 0x05
   113f6:	8f e1       	ldi	r24, 0x1F	; 31
   113f8:	90 e0       	ldi	r25, 0x00	; 0
   113fa:	98 87       	std	Y+8, r25	; 0x08
   113fc:	8f 83       	std	Y+7, r24	; 0x07
		if(start==end)
   113fe:	29 85       	ldd	r18, Y+9	; 0x09
   11400:	3a 85       	ldd	r19, Y+10	; 0x0a
   11402:	8b 85       	ldd	r24, Y+11	; 0x0b
   11404:	9c 85       	ldd	r25, Y+12	; 0x0c
   11406:	28 17       	cp	r18, r24
   11408:	39 07       	cpc	r19, r25
   1140a:	89 f4       	brne	.+34     	; 0x1142e <dijkstra+0x60>
    {
        path=(char*)malloc(2*sizeof(char));
   1140c:	82 e0       	ldi	r24, 0x02	; 2
   1140e:	90 e0       	ldi	r25, 0x00	; 0
   11410:	0e 94 55 93 	call	0x126aa	; 0x126aa <malloc>
   11414:	9a 83       	std	Y+2, r25	; 0x02
   11416:	89 83       	std	Y+1, r24	; 0x01
        path[0]='N';
   11418:	89 81       	ldd	r24, Y+1	; 0x01
   1141a:	9a 81       	ldd	r25, Y+2	; 0x02
   1141c:	2e e4       	ldi	r18, 0x4E	; 78
   1141e:	fc 01       	movw	r30, r24
   11420:	20 83       	st	Z, r18
        path[1]='\0';
   11422:	89 81       	ldd	r24, Y+1	; 0x01
   11424:	9a 81       	ldd	r25, Y+2	; 0x02
   11426:	01 96       	adiw	r24, 0x01	; 1
   11428:	fc 01       	movw	r30, r24
   1142a:	10 82       	st	Z, r1
   1142c:	22 c0       	rjmp	.+68     	; 0x11472 <dijkstra+0xa4>
    }
    else{
	start=transf[start];
   1142e:	89 85       	ldd	r24, Y+9	; 0x09
   11430:	9a 85       	ldd	r25, Y+10	; 0x0a
   11432:	88 0f       	add	r24, r24
   11434:	99 1f       	adc	r25, r25
   11436:	86 5b       	subi	r24, 0xB6	; 182
   11438:	9d 4f       	sbci	r25, 0xFD	; 253
   1143a:	fc 01       	movw	r30, r24
   1143c:	80 81       	ld	r24, Z
   1143e:	91 81       	ldd	r25, Z+1	; 0x01
   11440:	9a 87       	std	Y+10, r25	; 0x0a
   11442:	89 87       	std	Y+9, r24	; 0x09
	end=transf[end];
   11444:	8b 85       	ldd	r24, Y+11	; 0x0b
   11446:	9c 85       	ldd	r25, Y+12	; 0x0c
   11448:	88 0f       	add	r24, r24
   1144a:	99 1f       	adc	r25, r25
   1144c:	86 5b       	subi	r24, 0xB6	; 182
   1144e:	9d 4f       	sbci	r25, 0xFD	; 253
   11450:	fc 01       	movw	r30, r24
   11452:	80 81       	ld	r24, Z
   11454:	91 81       	ldd	r25, Z+1	; 0x01
   11456:	9c 87       	std	Y+12, r25	; 0x0c
   11458:	8b 87       	std	Y+11, r24	; 0x0b
	path=sh_path(start,end,count);}
   1145a:	89 85       	ldd	r24, Y+9	; 0x09
   1145c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1145e:	4b 85       	ldd	r20, Y+11	; 0x0b
   11460:	5c 85       	ldd	r21, Y+12	; 0x0c
   11462:	2d 85       	ldd	r18, Y+13	; 0x0d
   11464:	3e 85       	ldd	r19, Y+14	; 0x0e
   11466:	ba 01       	movw	r22, r20
   11468:	a9 01       	movw	r20, r18
   1146a:	0e 94 e0 86 	call	0x10dc0	; 0x10dc0 <sh_path>
   1146e:	9a 83       	std	Y+2, r25	; 0x02
   11470:	89 83       	std	Y+1, r24	; 0x01
	return path;
   11472:	89 81       	ldd	r24, Y+1	; 0x01
   11474:	9a 81       	ldd	r25, Y+2	; 0x02
}
   11476:	2e 96       	adiw	r28, 0x0e	; 14
   11478:	0f b6       	in	r0, 0x3f	; 63
   1147a:	f8 94       	cli
   1147c:	de bf       	out	0x3e, r29	; 62
   1147e:	0f be       	out	0x3f, r0	; 63
   11480:	cd bf       	out	0x3d, r28	; 61
   11482:	df 91       	pop	r29
   11484:	cf 91       	pop	r28
   11486:	08 95       	ret

00011488 <animals>:
{31,32,33,34,35,36}};

	int aniloc[20];
	int habloc[20];

	int animals(char a[2]){
   11488:	cf 93       	push	r28
   1148a:	df 93       	push	r29
   1148c:	cd b7       	in	r28, 0x3d	; 61
   1148e:	de b7       	in	r29, 0x3e	; 62
   11490:	28 97       	sbiw	r28, 0x08	; 8
   11492:	0f b6       	in	r0, 0x3f	; 63
   11494:	f8 94       	cli
   11496:	de bf       	out	0x3e, r29	; 62
   11498:	0f be       	out	0x3f, r0	; 63
   1149a:	cd bf       	out	0x3d, r28	; 61
   1149c:	98 87       	std	Y+8, r25	; 0x08
   1149e:	8f 83       	std	Y+7, r24	; 0x07
		//printf("-----%s\n",a);
		int animal=0,number=0,letter=0;
   114a0:	1e 82       	std	Y+6, r1	; 0x06
   114a2:	1d 82       	std	Y+5, r1	; 0x05
   114a4:	1a 82       	std	Y+2, r1	; 0x02
   114a6:	19 82       	std	Y+1, r1	; 0x01
   114a8:	1c 82       	std	Y+4, r1	; 0x04
   114aa:	1b 82       	std	Y+3, r1	; 0x03
		if(a[0] >= 'A' && a[0] <= 'F')
   114ac:	8f 81       	ldd	r24, Y+7	; 0x07
   114ae:	98 85       	ldd	r25, Y+8	; 0x08
   114b0:	fc 01       	movw	r30, r24
   114b2:	80 81       	ld	r24, Z
   114b4:	81 34       	cpi	r24, 0x41	; 65
   114b6:	80 f0       	brcs	.+32     	; 0x114d8 <animals+0x50>
   114b8:	8f 81       	ldd	r24, Y+7	; 0x07
   114ba:	98 85       	ldd	r25, Y+8	; 0x08
   114bc:	fc 01       	movw	r30, r24
   114be:	80 81       	ld	r24, Z
   114c0:	87 34       	cpi	r24, 0x47	; 71
   114c2:	50 f4       	brcc	.+20     	; 0x114d8 <animals+0x50>
		letter = a[0]+1 - 'A';
   114c4:	8f 81       	ldd	r24, Y+7	; 0x07
   114c6:	98 85       	ldd	r25, Y+8	; 0x08
   114c8:	fc 01       	movw	r30, r24
   114ca:	80 81       	ld	r24, Z
   114cc:	88 2f       	mov	r24, r24
   114ce:	90 e0       	ldi	r25, 0x00	; 0
   114d0:	80 54       	subi	r24, 0x40	; 64
   114d2:	90 40       	sbci	r25, 0x00	; 0
   114d4:	9c 83       	std	Y+4, r25	; 0x04
   114d6:	8b 83       	std	Y+3, r24	; 0x03
		if(a[1] >='1' && a[1] <= '6')
   114d8:	8f 81       	ldd	r24, Y+7	; 0x07
   114da:	98 85       	ldd	r25, Y+8	; 0x08
   114dc:	01 96       	adiw	r24, 0x01	; 1
   114de:	fc 01       	movw	r30, r24
   114e0:	80 81       	ld	r24, Z
   114e2:	81 33       	cpi	r24, 0x31	; 49
   114e4:	88 f0       	brcs	.+34     	; 0x11508 <animals+0x80>
   114e6:	8f 81       	ldd	r24, Y+7	; 0x07
   114e8:	98 85       	ldd	r25, Y+8	; 0x08
   114ea:	01 96       	adiw	r24, 0x01	; 1
   114ec:	fc 01       	movw	r30, r24
   114ee:	80 81       	ld	r24, Z
   114f0:	87 33       	cpi	r24, 0x37	; 55
   114f2:	50 f4       	brcc	.+20     	; 0x11508 <animals+0x80>
		number = a[1] - '0';
   114f4:	8f 81       	ldd	r24, Y+7	; 0x07
   114f6:	98 85       	ldd	r25, Y+8	; 0x08
   114f8:	01 96       	adiw	r24, 0x01	; 1
   114fa:	fc 01       	movw	r30, r24
   114fc:	80 81       	ld	r24, Z
   114fe:	88 2f       	mov	r24, r24
   11500:	90 e0       	ldi	r25, 0x00	; 0
   11502:	c0 97       	sbiw	r24, 0x30	; 48
   11504:	9a 83       	std	Y+2, r25	; 0x02
   11506:	89 83       	std	Y+1, r24	; 0x01

		animal = graph[number-1][letter-1];
   11508:	89 81       	ldd	r24, Y+1	; 0x01
   1150a:	9a 81       	ldd	r25, Y+2	; 0x02
   1150c:	9c 01       	movw	r18, r24
   1150e:	21 50       	subi	r18, 0x01	; 1
   11510:	30 40       	sbci	r19, 0x00	; 0
   11512:	8b 81       	ldd	r24, Y+3	; 0x03
   11514:	9c 81       	ldd	r25, Y+4	; 0x04
   11516:	ac 01       	movw	r20, r24
   11518:	41 50       	subi	r20, 0x01	; 1
   1151a:	50 40       	sbci	r21, 0x00	; 0
   1151c:	c9 01       	movw	r24, r18
   1151e:	88 0f       	add	r24, r24
   11520:	99 1f       	adc	r25, r25
   11522:	82 0f       	add	r24, r18
   11524:	93 1f       	adc	r25, r19
   11526:	88 0f       	add	r24, r24
   11528:	99 1f       	adc	r25, r25
   1152a:	84 0f       	add	r24, r20
   1152c:	95 1f       	adc	r25, r21
   1152e:	88 0f       	add	r24, r24
   11530:	99 1f       	adc	r25, r25
   11532:	8c 55       	subi	r24, 0x5C	; 92
   11534:	9d 4f       	sbci	r25, 0xFD	; 253
   11536:	fc 01       	movw	r30, r24
   11538:	80 81       	ld	r24, Z
   1153a:	91 81       	ldd	r25, Z+1	; 0x01
   1153c:	9e 83       	std	Y+6, r25	; 0x06
   1153e:	8d 83       	std	Y+5, r24	; 0x05
		// if(strcmp("A1",a)==0)
		// animal++;
		return animal;
   11540:	8d 81       	ldd	r24, Y+5	; 0x05
   11542:	9e 81       	ldd	r25, Y+6	; 0x06
	}
   11544:	28 96       	adiw	r28, 0x08	; 8
   11546:	0f b6       	in	r0, 0x3f	; 63
   11548:	f8 94       	cli
   1154a:	de bf       	out	0x3e, r29	; 62
   1154c:	0f be       	out	0x3f, r0	; 63
   1154e:	cd bf       	out	0x3d, r28	; 61
   11550:	df 91       	pop	r29
   11552:	cf 91       	pop	r28
   11554:	08 95       	ret

00011556 <habitats>:

	int habitats(char h[2]){
   11556:	cf 93       	push	r28
   11558:	df 93       	push	r29
   1155a:	cd b7       	in	r28, 0x3d	; 61
   1155c:	de b7       	in	r29, 0x3e	; 62
   1155e:	28 97       	sbiw	r28, 0x08	; 8
   11560:	0f b6       	in	r0, 0x3f	; 63
   11562:	f8 94       	cli
   11564:	de bf       	out	0x3e, r29	; 62
   11566:	0f be       	out	0x3f, r0	; 63
   11568:	cd bf       	out	0x3d, r28	; 61
   1156a:	98 87       	std	Y+8, r25	; 0x08
   1156c:	8f 83       	std	Y+7, r24	; 0x07
		int i=0,m=0,habitat=0;
   1156e:	1a 82       	std	Y+2, r1	; 0x02
   11570:	19 82       	std	Y+1, r1	; 0x01
   11572:	1c 82       	std	Y+4, r1	; 0x04
   11574:	1b 82       	std	Y+3, r1	; 0x03
   11576:	1e 82       	std	Y+6, r1	; 0x06
   11578:	1d 82       	std	Y+5, r1	; 0x05
		for ( i = 0; h[i] != '\0'; i++)
   1157a:	1a 82       	std	Y+2, r1	; 0x02
   1157c:	19 82       	std	Y+1, r1	; 0x01
   1157e:	1f c0       	rjmp	.+62     	; 0x115be <habitats+0x68>
		m = m * 10 + h[i] - '0';
   11580:	8b 81       	ldd	r24, Y+3	; 0x03
   11582:	9c 81       	ldd	r25, Y+4	; 0x04
   11584:	88 0f       	add	r24, r24
   11586:	99 1f       	adc	r25, r25
   11588:	9c 01       	movw	r18, r24
   1158a:	22 0f       	add	r18, r18
   1158c:	33 1f       	adc	r19, r19
   1158e:	22 0f       	add	r18, r18
   11590:	33 1f       	adc	r19, r19
   11592:	28 0f       	add	r18, r24
   11594:	39 1f       	adc	r19, r25
   11596:	89 81       	ldd	r24, Y+1	; 0x01
   11598:	9a 81       	ldd	r25, Y+2	; 0x02
   1159a:	4f 81       	ldd	r20, Y+7	; 0x07
   1159c:	58 85       	ldd	r21, Y+8	; 0x08
   1159e:	84 0f       	add	r24, r20
   115a0:	95 1f       	adc	r25, r21
   115a2:	fc 01       	movw	r30, r24
   115a4:	80 81       	ld	r24, Z
   115a6:	88 2f       	mov	r24, r24
   115a8:	90 e0       	ldi	r25, 0x00	; 0
   115aa:	82 0f       	add	r24, r18
   115ac:	93 1f       	adc	r25, r19
   115ae:	c0 97       	sbiw	r24, 0x30	; 48
   115b0:	9c 83       	std	Y+4, r25	; 0x04
   115b2:	8b 83       	std	Y+3, r24	; 0x03
		return animal;
	}

	int habitats(char h[2]){
		int i=0,m=0,habitat=0;
		for ( i = 0; h[i] != '\0'; i++)
   115b4:	89 81       	ldd	r24, Y+1	; 0x01
   115b6:	9a 81       	ldd	r25, Y+2	; 0x02
   115b8:	01 96       	adiw	r24, 0x01	; 1
   115ba:	9a 83       	std	Y+2, r25	; 0x02
   115bc:	89 83       	std	Y+1, r24	; 0x01
   115be:	89 81       	ldd	r24, Y+1	; 0x01
   115c0:	9a 81       	ldd	r25, Y+2	; 0x02
   115c2:	2f 81       	ldd	r18, Y+7	; 0x07
   115c4:	38 85       	ldd	r19, Y+8	; 0x08
   115c6:	82 0f       	add	r24, r18
   115c8:	93 1f       	adc	r25, r19
   115ca:	fc 01       	movw	r30, r24
   115cc:	80 81       	ld	r24, Z
   115ce:	88 23       	and	r24, r24
   115d0:	b9 f6       	brne	.-82     	; 0x11580 <habitats+0x2a>
		m = m * 10 + h[i] - '0';

		if(m<=5)
   115d2:	8b 81       	ldd	r24, Y+3	; 0x03
   115d4:	9c 81       	ldd	r25, Y+4	; 0x04
   115d6:	86 30       	cpi	r24, 0x06	; 6
   115d8:	91 05       	cpc	r25, r1
   115da:	2c f4       	brge	.+10     	; 0x115e6 <habitats+0x90>
		habitat = 1 + (m-1);
   115dc:	8b 81       	ldd	r24, Y+3	; 0x03
   115de:	9c 81       	ldd	r25, Y+4	; 0x04
   115e0:	9e 83       	std	Y+6, r25	; 0x06
   115e2:	8d 83       	std	Y+5, r24	; 0x05
   115e4:	3f c0       	rjmp	.+126    	; 0x11664 <habitats+0x10e>
		else if(m>=6 && m<=10)
   115e6:	8b 81       	ldd	r24, Y+3	; 0x03
   115e8:	9c 81       	ldd	r25, Y+4	; 0x04
   115ea:	86 30       	cpi	r24, 0x06	; 6
   115ec:	91 05       	cpc	r25, r1
   115ee:	5c f0       	brlt	.+22     	; 0x11606 <habitats+0xb0>
   115f0:	8b 81       	ldd	r24, Y+3	; 0x03
   115f2:	9c 81       	ldd	r25, Y+4	; 0x04
   115f4:	8b 30       	cpi	r24, 0x0B	; 11
   115f6:	91 05       	cpc	r25, r1
   115f8:	34 f4       	brge	.+12     	; 0x11606 <habitats+0xb0>
		habitat = 2 + (m-1);
   115fa:	8b 81       	ldd	r24, Y+3	; 0x03
   115fc:	9c 81       	ldd	r25, Y+4	; 0x04
   115fe:	01 96       	adiw	r24, 0x01	; 1
   11600:	9e 83       	std	Y+6, r25	; 0x06
   11602:	8d 83       	std	Y+5, r24	; 0x05
   11604:	2f c0       	rjmp	.+94     	; 0x11664 <habitats+0x10e>
		else if(m>=11 && m<=15)
   11606:	8b 81       	ldd	r24, Y+3	; 0x03
   11608:	9c 81       	ldd	r25, Y+4	; 0x04
   1160a:	8b 30       	cpi	r24, 0x0B	; 11
   1160c:	91 05       	cpc	r25, r1
   1160e:	5c f0       	brlt	.+22     	; 0x11626 <habitats+0xd0>
   11610:	8b 81       	ldd	r24, Y+3	; 0x03
   11612:	9c 81       	ldd	r25, Y+4	; 0x04
   11614:	80 31       	cpi	r24, 0x10	; 16
   11616:	91 05       	cpc	r25, r1
   11618:	34 f4       	brge	.+12     	; 0x11626 <habitats+0xd0>
		habitat = 3 + (m-1);
   1161a:	8b 81       	ldd	r24, Y+3	; 0x03
   1161c:	9c 81       	ldd	r25, Y+4	; 0x04
   1161e:	02 96       	adiw	r24, 0x02	; 2
   11620:	9e 83       	std	Y+6, r25	; 0x06
   11622:	8d 83       	std	Y+5, r24	; 0x05
   11624:	1f c0       	rjmp	.+62     	; 0x11664 <habitats+0x10e>
		else if(m>=16 && m<=20)
   11626:	8b 81       	ldd	r24, Y+3	; 0x03
   11628:	9c 81       	ldd	r25, Y+4	; 0x04
   1162a:	80 31       	cpi	r24, 0x10	; 16
   1162c:	91 05       	cpc	r25, r1
   1162e:	5c f0       	brlt	.+22     	; 0x11646 <habitats+0xf0>
   11630:	8b 81       	ldd	r24, Y+3	; 0x03
   11632:	9c 81       	ldd	r25, Y+4	; 0x04
   11634:	85 31       	cpi	r24, 0x15	; 21
   11636:	91 05       	cpc	r25, r1
   11638:	34 f4       	brge	.+12     	; 0x11646 <habitats+0xf0>
		habitat = 4 + (m-1);
   1163a:	8b 81       	ldd	r24, Y+3	; 0x03
   1163c:	9c 81       	ldd	r25, Y+4	; 0x04
   1163e:	03 96       	adiw	r24, 0x03	; 3
   11640:	9e 83       	std	Y+6, r25	; 0x06
   11642:	8d 83       	std	Y+5, r24	; 0x05
   11644:	0f c0       	rjmp	.+30     	; 0x11664 <habitats+0x10e>
		else if(m>=21 && m<=25)
   11646:	8b 81       	ldd	r24, Y+3	; 0x03
   11648:	9c 81       	ldd	r25, Y+4	; 0x04
   1164a:	85 31       	cpi	r24, 0x15	; 21
   1164c:	91 05       	cpc	r25, r1
   1164e:	54 f0       	brlt	.+20     	; 0x11664 <habitats+0x10e>
   11650:	8b 81       	ldd	r24, Y+3	; 0x03
   11652:	9c 81       	ldd	r25, Y+4	; 0x04
   11654:	8a 31       	cpi	r24, 0x1A	; 26
   11656:	91 05       	cpc	r25, r1
   11658:	2c f4       	brge	.+10     	; 0x11664 <habitats+0x10e>
		habitat = 5 + (m-1);
   1165a:	8b 81       	ldd	r24, Y+3	; 0x03
   1165c:	9c 81       	ldd	r25, Y+4	; 0x04
   1165e:	04 96       	adiw	r24, 0x04	; 4
   11660:	9e 83       	std	Y+6, r25	; 0x06
   11662:	8d 83       	std	Y+5, r24	; 0x05
		return habitat;
   11664:	8d 81       	ldd	r24, Y+5	; 0x05
   11666:	9e 81       	ldd	r25, Y+6	; 0x06
	}
   11668:	28 96       	adiw	r28, 0x08	; 8
   1166a:	0f b6       	in	r0, 0x3f	; 63
   1166c:	f8 94       	cli
   1166e:	de bf       	out	0x3e, r29	; 62
   11670:	0f be       	out	0x3f, r0	; 63
   11672:	cd bf       	out	0x3d, r28	; 61
   11674:	df 91       	pop	r29
   11676:	cf 91       	pop	r28
   11678:	08 95       	ret

0001167a <node_map>:

	void node_map(char *tokenstring,int type, int *len)
	{
   1167a:	cf 93       	push	r28
   1167c:	df 93       	push	r29
   1167e:	cd b7       	in	r28, 0x3d	; 61
   11680:	de b7       	in	r29, 0x3e	; 62
   11682:	63 97       	sbiw	r28, 0x13	; 19
   11684:	0f b6       	in	r0, 0x3f	; 63
   11686:	f8 94       	cli
   11688:	de bf       	out	0x3e, r29	; 62
   1168a:	0f be       	out	0x3f, r0	; 63
   1168c:	cd bf       	out	0x3d, r28	; 61
   1168e:	9f 87       	std	Y+15, r25	; 0x0f
   11690:	8e 87       	std	Y+14, r24	; 0x0e
   11692:	79 8b       	std	Y+17, r23	; 0x11
   11694:	68 8b       	std	Y+16, r22	; 0x10
   11696:	5b 8b       	std	Y+19, r21	; 0x13
   11698:	4a 8b       	std	Y+18, r20	; 0x12
		char a[2];
		char h[2];
		char seps[] = ", ";
   1169a:	ce 01       	movw	r24, r28
   1169c:	09 96       	adiw	r24, 0x09	; 9
   1169e:	2f ee       	ldi	r18, 0xEF	; 239
   116a0:	32 e0       	ldi	r19, 0x02	; 2
   116a2:	43 e0       	ldi	r20, 0x03	; 3
   116a4:	f9 01       	movw	r30, r18
   116a6:	00 80       	ld	r0, Z
   116a8:	2f 5f       	subi	r18, 0xFF	; 255
   116aa:	3f 4f       	sbci	r19, 0xFF	; 255
   116ac:	fc 01       	movw	r30, r24
   116ae:	00 82       	st	Z, r0
   116b0:	01 96       	adiw	r24, 0x01	; 1
   116b2:	41 50       	subi	r20, 0x01	; 1
   116b4:	44 23       	and	r20, r20
   116b6:	b1 f7       	brne	.-20     	; 0x116a4 <node_map+0x2a>
		char* token;
		int var;
		int i = 0;
   116b8:	1c 82       	std	Y+4, r1	; 0x04
   116ba:	1b 82       	std	Y+3, r1	; 0x03
		token = strtok (tokenstring, seps);
   116bc:	8e 85       	ldd	r24, Y+14	; 0x0e
   116be:	9f 85       	ldd	r25, Y+15	; 0x0f
   116c0:	9e 01       	movw	r18, r28
   116c2:	27 5f       	subi	r18, 0xF7	; 247
   116c4:	3f 4f       	sbci	r19, 0xFF	; 255
   116c6:	b9 01       	movw	r22, r18
   116c8:	0e 94 64 95 	call	0x12ac8	; 0x12ac8 <strtok>
   116cc:	9a 83       	std	Y+2, r25	; 0x02
   116ce:	89 83       	std	Y+1, r24	; 0x01
		while (token != NULL)
   116d0:	4f c0       	rjmp	.+158    	; 0x11770 <node_map+0xf6>
		{
			if(type==0)
   116d2:	88 89       	ldd	r24, Y+16	; 0x10
   116d4:	99 89       	ldd	r25, Y+17	; 0x11
   116d6:	00 97       	sbiw	r24, 0x00	; 0
   116d8:	79 f4       	brne	.+30     	; 0x116f8 <node_map+0x7e>
			{//Animal
				aniloc[i]=animals(token);
   116da:	89 81       	ldd	r24, Y+1	; 0x01
   116dc:	9a 81       	ldd	r25, Y+2	; 0x02
   116de:	0e 94 44 8a 	call	0x11488	; 0x11488 <animals>
   116e2:	9c 01       	movw	r18, r24
   116e4:	8b 81       	ldd	r24, Y+3	; 0x03
   116e6:	9c 81       	ldd	r25, Y+4	; 0x04
   116e8:	88 0f       	add	r24, r24
   116ea:	99 1f       	adc	r25, r25
   116ec:	8c 53       	subi	r24, 0x3C	; 60
   116ee:	9b 4f       	sbci	r25, 0xFB	; 251
   116f0:	fc 01       	movw	r30, r24
   116f2:	31 83       	std	Z+1, r19	; 0x01
   116f4:	20 83       	st	Z, r18
   116f6:	0e c0       	rjmp	.+28     	; 0x11714 <node_map+0x9a>
			}
			else
			{
				habloc[i]=habitats(token);
   116f8:	89 81       	ldd	r24, Y+1	; 0x01
   116fa:	9a 81       	ldd	r25, Y+2	; 0x02
   116fc:	0e 94 ab 8a 	call	0x11556	; 0x11556 <habitats>
   11700:	9c 01       	movw	r18, r24
   11702:	8b 81       	ldd	r24, Y+3	; 0x03
   11704:	9c 81       	ldd	r25, Y+4	; 0x04
   11706:	88 0f       	add	r24, r24
   11708:	99 1f       	adc	r25, r25
   1170a:	87 5a       	subi	r24, 0xA7	; 167
   1170c:	9b 4f       	sbci	r25, 0xFB	; 251
   1170e:	fc 01       	movw	r30, r24
   11710:	31 83       	std	Z+1, r19	; 0x01
   11712:	20 83       	st	Z, r18
			}
			sscanf (token, "%d", &var);
   11714:	00 d0       	rcall	.+0      	; 0x11716 <node_map+0x9c>
   11716:	00 d0       	rcall	.+0      	; 0x11718 <node_map+0x9e>
   11718:	8d b7       	in	r24, 0x3d	; 61
   1171a:	9e b7       	in	r25, 0x3e	; 62
   1171c:	01 96       	adiw	r24, 0x01	; 1
   1171e:	29 81       	ldd	r18, Y+1	; 0x01
   11720:	3a 81       	ldd	r19, Y+2	; 0x02
   11722:	fc 01       	movw	r30, r24
   11724:	31 83       	std	Z+1, r19	; 0x01
   11726:	20 83       	st	Z, r18
   11728:	2c ee       	ldi	r18, 0xEC	; 236
   1172a:	32 e0       	ldi	r19, 0x02	; 2
   1172c:	fc 01       	movw	r30, r24
   1172e:	33 83       	std	Z+3, r19	; 0x03
   11730:	22 83       	std	Z+2, r18	; 0x02
   11732:	9e 01       	movw	r18, r28
   11734:	24 5f       	subi	r18, 0xF4	; 244
   11736:	3f 4f       	sbci	r19, 0xFF	; 255
   11738:	fc 01       	movw	r30, r24
   1173a:	35 83       	std	Z+5, r19	; 0x05
   1173c:	24 83       	std	Z+4, r18	; 0x04
   1173e:	0e 94 ab 95 	call	0x12b56	; 0x12b56 <sscanf>
   11742:	8d b7       	in	r24, 0x3d	; 61
   11744:	9e b7       	in	r25, 0x3e	; 62
   11746:	06 96       	adiw	r24, 0x06	; 6
   11748:	0f b6       	in	r0, 0x3f	; 63
   1174a:	f8 94       	cli
   1174c:	9e bf       	out	0x3e, r25	; 62
   1174e:	0f be       	out	0x3f, r0	; 63
   11750:	8d bf       	out	0x3d, r24	; 61
			i++;
   11752:	8b 81       	ldd	r24, Y+3	; 0x03
   11754:	9c 81       	ldd	r25, Y+4	; 0x04
   11756:	01 96       	adiw	r24, 0x01	; 1
   11758:	9c 83       	std	Y+4, r25	; 0x04
   1175a:	8b 83       	std	Y+3, r24	; 0x03
			token = strtok (NULL, seps);
   1175c:	9e 01       	movw	r18, r28
   1175e:	27 5f       	subi	r18, 0xF7	; 247
   11760:	3f 4f       	sbci	r19, 0xFF	; 255
   11762:	80 e0       	ldi	r24, 0x00	; 0
   11764:	90 e0       	ldi	r25, 0x00	; 0
   11766:	b9 01       	movw	r22, r18
   11768:	0e 94 64 95 	call	0x12ac8	; 0x12ac8 <strtok>
   1176c:	9a 83       	std	Y+2, r25	; 0x02
   1176e:	89 83       	std	Y+1, r24	; 0x01
		char seps[] = ", ";
		char* token;
		int var;
		int i = 0;
		token = strtok (tokenstring, seps);
		while (token != NULL)
   11770:	89 81       	ldd	r24, Y+1	; 0x01
   11772:	9a 81       	ldd	r25, Y+2	; 0x02
   11774:	00 97       	sbiw	r24, 0x00	; 0
   11776:	09 f0       	breq	.+2      	; 0x1177a <node_map+0x100>
   11778:	ac cf       	rjmp	.-168    	; 0x116d2 <node_map+0x58>
			}
			sscanf (token, "%d", &var);
			i++;
			token = strtok (NULL, seps);
		}
		*len=i;
   1177a:	8a 89       	ldd	r24, Y+18	; 0x12
   1177c:	9b 89       	ldd	r25, Y+19	; 0x13
   1177e:	2b 81       	ldd	r18, Y+3	; 0x03
   11780:	3c 81       	ldd	r19, Y+4	; 0x04
   11782:	fc 01       	movw	r30, r24
   11784:	31 83       	std	Z+1, r19	; 0x01
   11786:	20 83       	st	Z, r18
	}
   11788:	63 96       	adiw	r28, 0x13	; 19
   1178a:	0f b6       	in	r0, 0x3f	; 63
   1178c:	f8 94       	cli
   1178e:	de bf       	out	0x3e, r29	; 62
   11790:	0f be       	out	0x3f, r0	; 63
   11792:	cd bf       	out	0x3d, r28	; 61
   11794:	df 91       	pop	r29
   11796:	cf 91       	pop	r28
   11798:	08 95       	ret

0001179a <uart2_init>:

//Function to configure LCD port


void uart2_init(void)
{
   1179a:	cf 93       	push	r28
   1179c:	df 93       	push	r29
   1179e:	cd b7       	in	r28, 0x3d	; 61
   117a0:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
   117a2:	81 ed       	ldi	r24, 0xD1	; 209
   117a4:	90 e0       	ldi	r25, 0x00	; 0
   117a6:	fc 01       	movw	r30, r24
   117a8:	10 82       	st	Z, r1
	UCSR2A = 0x00;
   117aa:	80 ed       	ldi	r24, 0xD0	; 208
   117ac:	90 e0       	ldi	r25, 0x00	; 0
   117ae:	fc 01       	movw	r30, r24
   117b0:	10 82       	st	Z, r1
	UCSR2C = 0x06;
   117b2:	82 ed       	ldi	r24, 0xD2	; 210
   117b4:	90 e0       	ldi	r25, 0x00	; 0
   117b6:	26 e0       	ldi	r18, 0x06	; 6
   117b8:	fc 01       	movw	r30, r24
   117ba:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
   117bc:	84 ed       	ldi	r24, 0xD4	; 212
   117be:	90 e0       	ldi	r25, 0x00	; 0
   117c0:	2f e5       	ldi	r18, 0x5F	; 95
   117c2:	fc 01       	movw	r30, r24
   117c4:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
   117c6:	85 ed       	ldi	r24, 0xD5	; 213
   117c8:	90 e0       	ldi	r25, 0x00	; 0
   117ca:	fc 01       	movw	r30, r24
   117cc:	10 82       	st	Z, r1
	UCSR2B = 0x98;
   117ce:	81 ed       	ldi	r24, 0xD1	; 209
   117d0:	90 e0       	ldi	r25, 0x00	; 0
   117d2:	28 e9       	ldi	r18, 0x98	; 152
   117d4:	fc 01       	movw	r30, r24
   117d6:	20 83       	st	Z, r18
}
   117d8:	df 91       	pop	r29
   117da:	cf 91       	pop	r28
   117dc:	08 95       	ret

000117de <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{
   117de:	1f 92       	push	r1
   117e0:	0f 92       	push	r0
   117e2:	0f b6       	in	r0, 0x3f	; 63
   117e4:	0f 92       	push	r0
   117e6:	00 90 5b 00 	lds	r0, 0x005B
   117ea:	0f 92       	push	r0
   117ec:	11 24       	eor	r1, r1
   117ee:	2f 93       	push	r18
   117f0:	3f 93       	push	r19
   117f2:	4f 93       	push	r20
   117f4:	5f 93       	push	r21
   117f6:	6f 93       	push	r22
   117f8:	7f 93       	push	r23
   117fa:	8f 93       	push	r24
   117fc:	9f 93       	push	r25
   117fe:	af 93       	push	r26
   11800:	bf 93       	push	r27
   11802:	ef 93       	push	r30
   11804:	ff 93       	push	r31
   11806:	cf 93       	push	r28
   11808:	df 93       	push	r29
   1180a:	cd b7       	in	r28, 0x3d	; 61
   1180c:	de b7       	in	r29, 0x3e	; 62
	data= UDR2;
   1180e:	86 ed       	ldi	r24, 0xD6	; 214
   11810:	90 e0       	ldi	r25, 0x00	; 0
   11812:	fc 01       	movw	r30, r24
   11814:	80 81       	ld	r24, Z
   11816:	80 93 c0 04 	sts	0x04C0, r24
	if(data == 0x0A)
   1181a:	80 91 c0 04 	lds	r24, 0x04C0
   1181e:	8a 30       	cpi	r24, 0x0A	; 10
   11820:	61 f4       	brne	.+24     	; 0x1183a <__vector_51+0x5c>
	{
		pos = count;
   11822:	80 91 39 04 	lds	r24, 0x0439
   11826:	80 93 f2 02 	sts	0x02F2, r24
		count++;
   1182a:	80 91 39 04 	lds	r24, 0x0439
   1182e:	8f 5f       	subi	r24, 0xFF	; 255
   11830:	80 93 39 04 	sts	0x0439, r24
		flag = FALSE;
   11834:	10 92 f3 02 	sts	0x02F3, r1
   11838:	52 c0       	rjmp	.+164    	; 0x118de <__vector_51+0x100>
	}
	else if(data == 0x23)
   1183a:	80 91 c0 04 	lds	r24, 0x04C0
   1183e:	83 32       	cpi	r24, 0x23	; 35
   11840:	91 f4       	brne	.+36     	; 0x11866 <__vector_51+0x88>
	{
		flag = 2;
   11842:	82 e0       	ldi	r24, 0x02	; 2
   11844:	80 93 f3 02 	sts	0x02F3, r24
		strcpy(hab, tmp1);
   11848:	85 e8       	ldi	r24, 0x85	; 133
   1184a:	94 e0       	ldi	r25, 0x04	; 4
   1184c:	20 ef       	ldi	r18, 0xF0	; 240
   1184e:	34 e0       	ldi	r19, 0x04	; 4
   11850:	b9 01       	movw	r22, r18
   11852:	0e 94 7d 95 	call	0x12afa	; 0x12afa <strcpy>
		strcpy(ani, tmp2);
   11856:	8e e3       	ldi	r24, 0x3E	; 62
   11858:	94 e0       	ldi	r25, 0x04	; 4
   1185a:	20 ea       	ldi	r18, 0xA0	; 160
   1185c:	34 e0       	ldi	r19, 0x04	; 4
   1185e:	b9 01       	movw	r22, r18
   11860:	0e 94 7d 95 	call	0x12afa	; 0x12afa <strcpy>
   11864:	3c c0       	rjmp	.+120    	; 0x118de <__vector_51+0x100>
	}
	else if(count > pos && flag == FALSE)
   11866:	90 91 39 04 	lds	r25, 0x0439
   1186a:	80 91 f2 02 	lds	r24, 0x02F2
   1186e:	89 17       	cp	r24, r25
   11870:	d8 f4       	brcc	.+54     	; 0x118a8 <__vector_51+0xca>
   11872:	80 91 f3 02 	lds	r24, 0x02F3
   11876:	88 23       	and	r24, r24
   11878:	b9 f4       	brne	.+46     	; 0x118a8 <__vector_51+0xca>
	{
		tmp2[a]=data;
   1187a:	80 91 3a 04 	lds	r24, 0x043A
   1187e:	88 2f       	mov	r24, r24
   11880:	90 e0       	ldi	r25, 0x00	; 0
   11882:	20 91 c0 04 	lds	r18, 0x04C0
   11886:	80 56       	subi	r24, 0x60	; 96
   11888:	9b 4f       	sbci	r25, 0xFB	; 251
   1188a:	fc 01       	movw	r30, r24
   1188c:	20 83       	st	Z, r18
		a++;
   1188e:	80 91 3a 04 	lds	r24, 0x043A
   11892:	8f 5f       	subi	r24, 0xFF	; 255
   11894:	80 93 3a 04 	sts	0x043A, r24
		count++;
   11898:	80 91 39 04 	lds	r24, 0x0439
   1189c:	8f 5f       	subi	r24, 0xFF	; 255
   1189e:	80 93 39 04 	sts	0x0439, r24
		flag = FALSE;
   118a2:	10 92 f3 02 	sts	0x02F3, r1
   118a6:	1b c0       	rjmp	.+54     	; 0x118de <__vector_51+0x100>
	}
	else if(flag==TRUE)
   118a8:	80 91 f3 02 	lds	r24, 0x02F3
   118ac:	81 30       	cpi	r24, 0x01	; 1
   118ae:	b9 f4       	brne	.+46     	; 0x118de <__vector_51+0x100>
	{
		tmp1[h]=data;
   118b0:	80 91 3b 04 	lds	r24, 0x043B
   118b4:	88 2f       	mov	r24, r24
   118b6:	90 e0       	ldi	r25, 0x00	; 0
   118b8:	20 91 c0 04 	lds	r18, 0x04C0
   118bc:	80 51       	subi	r24, 0x10	; 16
   118be:	9b 4f       	sbci	r25, 0xFB	; 251
   118c0:	fc 01       	movw	r30, r24
   118c2:	20 83       	st	Z, r18
		h++;
   118c4:	80 91 3b 04 	lds	r24, 0x043B
   118c8:	8f 5f       	subi	r24, 0xFF	; 255
   118ca:	80 93 3b 04 	sts	0x043B, r24
		count++;
   118ce:	80 91 39 04 	lds	r24, 0x0439
   118d2:	8f 5f       	subi	r24, 0xFF	; 255
   118d4:	80 93 39 04 	sts	0x0439, r24
		flag = TRUE;
   118d8:	81 e0       	ldi	r24, 0x01	; 1
   118da:	80 93 f3 02 	sts	0x02F3, r24
	}
}
   118de:	df 91       	pop	r29
   118e0:	cf 91       	pop	r28
   118e2:	ff 91       	pop	r31
   118e4:	ef 91       	pop	r30
   118e6:	bf 91       	pop	r27
   118e8:	af 91       	pop	r26
   118ea:	9f 91       	pop	r25
   118ec:	8f 91       	pop	r24
   118ee:	7f 91       	pop	r23
   118f0:	6f 91       	pop	r22
   118f2:	5f 91       	pop	r21
   118f4:	4f 91       	pop	r20
   118f6:	3f 91       	pop	r19
   118f8:	2f 91       	pop	r18
   118fa:	0f 90       	pop	r0
   118fc:	00 92 5b 00 	sts	0x005B, r0
   11900:	0f 90       	pop	r0
   11902:	0f be       	out	0x3f, r0	; 63
   11904:	0f 90       	pop	r0
   11906:	1f 90       	pop	r1
   11908:	18 95       	reti

0001190a <interrupt_switch_config>:
#include "node.c"
#include "uart.c"

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
   1190a:	cf 93       	push	r28
   1190c:	df 93       	push	r29
   1190e:	cd b7       	in	r28, 0x3d	; 61
   11910:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
   11912:	8d e2       	ldi	r24, 0x2D	; 45
   11914:	90 e0       	ldi	r25, 0x00	; 0
   11916:	2d e2       	ldi	r18, 0x2D	; 45
   11918:	30 e0       	ldi	r19, 0x00	; 0
   1191a:	f9 01       	movw	r30, r18
   1191c:	20 81       	ld	r18, Z
   1191e:	2f 77       	andi	r18, 0x7F	; 127
   11920:	fc 01       	movw	r30, r24
   11922:	20 83       	st	Z, r18
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
   11924:	8e e2       	ldi	r24, 0x2E	; 46
   11926:	90 e0       	ldi	r25, 0x00	; 0
   11928:	2e e2       	ldi	r18, 0x2E	; 46
   1192a:	30 e0       	ldi	r19, 0x00	; 0
   1192c:	f9 01       	movw	r30, r18
   1192e:	20 81       	ld	r18, Z
   11930:	20 68       	ori	r18, 0x80	; 128
   11932:	fc 01       	movw	r30, r24
   11934:	20 83       	st	Z, r18
}
   11936:	df 91       	pop	r29
   11938:	cf 91       	pop	r28
   1193a:	08 95       	ret

0001193c <pick_assign>:

void pick_assign(int nxt_node){
   1193c:	cf 93       	push	r28
   1193e:	df 93       	push	r29
   11940:	cd b7       	in	r28, 0x3d	; 61
   11942:	de b7       	in	r29, 0x3e	; 62
   11944:	e4 97       	sbiw	r28, 0x34	; 52
   11946:	0f b6       	in	r0, 0x3f	; 63
   11948:	f8 94       	cli
   1194a:	de bf       	out	0x3e, r29	; 62
   1194c:	0f be       	out	0x3f, r0	; 63
   1194e:	cd bf       	out	0x3d, r28	; 61
   11950:	9c ab       	sts	0x5c, r25
   11952:	8b ab       	sts	0x5b, r24
int left[6]={7,13,19,25,99,99};
   11954:	ce 01       	movw	r24, r28
   11956:	03 96       	adiw	r24, 0x03	; 3
   11958:	24 ef       	ldi	r18, 0xF4	; 244
   1195a:	32 e0       	ldi	r19, 0x02	; 2
   1195c:	4c e0       	ldi	r20, 0x0C	; 12
   1195e:	f9 01       	movw	r30, r18
   11960:	00 80       	ld	r0, Z
   11962:	2f 5f       	subi	r18, 0xFF	; 255
   11964:	3f 4f       	sbci	r19, 0xFF	; 255
   11966:	fc 01       	movw	r30, r24
   11968:	00 82       	st	Z, r0
   1196a:	01 96       	adiw	r24, 0x01	; 1
   1196c:	41 50       	subi	r20, 0x01	; 1
   1196e:	44 23       	and	r20, r20
   11970:	b1 f7       	brne	.-20     	; 0x1195e <pick_assign+0x22>
int right[6]={12,18,24,30,99,99};
   11972:	ce 01       	movw	r24, r28
   11974:	0f 96       	adiw	r24, 0x0f	; 15
   11976:	20 e0       	ldi	r18, 0x00	; 0
   11978:	33 e0       	ldi	r19, 0x03	; 3
   1197a:	4c e0       	ldi	r20, 0x0C	; 12
   1197c:	f9 01       	movw	r30, r18
   1197e:	00 80       	ld	r0, Z
   11980:	2f 5f       	subi	r18, 0xFF	; 255
   11982:	3f 4f       	sbci	r19, 0xFF	; 255
   11984:	fc 01       	movw	r30, r24
   11986:	00 82       	st	Z, r0
   11988:	01 96       	adiw	r24, 0x01	; 1
   1198a:	41 50       	subi	r20, 0x01	; 1
   1198c:	44 23       	and	r20, r20
   1198e:	b1 f7       	brne	.-20     	; 0x1197c <pick_assign+0x40>
int back[6]={2,3,4,5,99,99};
   11990:	ce 01       	movw	r24, r28
   11992:	4b 96       	adiw	r24, 0x1b	; 27
   11994:	2c e0       	ldi	r18, 0x0C	; 12
   11996:	33 e0       	ldi	r19, 0x03	; 3
   11998:	4c e0       	ldi	r20, 0x0C	; 12
   1199a:	f9 01       	movw	r30, r18
   1199c:	00 80       	ld	r0, Z
   1199e:	2f 5f       	subi	r18, 0xFF	; 255
   119a0:	3f 4f       	sbci	r19, 0xFF	; 255
   119a2:	fc 01       	movw	r30, r24
   119a4:	00 82       	st	Z, r0
   119a6:	01 96       	adiw	r24, 0x01	; 1
   119a8:	41 50       	subi	r20, 0x01	; 1
   119aa:	44 23       	and	r20, r20
   119ac:	b1 f7       	brne	.-20     	; 0x1199a <pick_assign+0x5e>
int front[6]={32,33,34,35,99,99};
   119ae:	ce 01       	movw	r24, r28
   119b0:	87 96       	adiw	r24, 0x27	; 39
   119b2:	28 e1       	ldi	r18, 0x18	; 24
   119b4:	33 e0       	ldi	r19, 0x03	; 3
   119b6:	4c e0       	ldi	r20, 0x0C	; 12
   119b8:	f9 01       	movw	r30, r18
   119ba:	00 80       	ld	r0, Z
   119bc:	2f 5f       	subi	r18, 0xFF	; 255
   119be:	3f 4f       	sbci	r19, 0xFF	; 255
   119c0:	fc 01       	movw	r30, r24
   119c2:	00 82       	st	Z, r0
   119c4:	01 96       	adiw	r24, 0x01	; 1
   119c6:	41 50       	subi	r20, 0x01	; 1
   119c8:	44 23       	and	r20, r20
   119ca:	b1 f7       	brne	.-20     	; 0x119b8 <pick_assign+0x7c>
int temp_var=0;
   119cc:	1a 82       	std	Y+2, r1	; 0x02
   119ce:	19 82       	std	Y+1, r1	; 0x01
for(temp_var=0;temp_var<6;temp_var++){
   119d0:	1a 82       	std	Y+2, r1	; 0x02
   119d2:	19 82       	std	Y+1, r1	; 0x01
   119d4:	f9 c0       	rjmp	.+498    	; 0x11bc8 <pick_assign+0x28c>
    if(left[temp_var]==nxt_node)
   119d6:	89 81       	ldd	r24, Y+1	; 0x01
   119d8:	9a 81       	ldd	r25, Y+2	; 0x02
   119da:	88 0f       	add	r24, r24
   119dc:	99 1f       	adc	r25, r25
   119de:	9e 01       	movw	r18, r28
   119e0:	2f 5f       	subi	r18, 0xFF	; 255
   119e2:	3f 4f       	sbci	r19, 0xFF	; 255
   119e4:	82 0f       	add	r24, r18
   119e6:	93 1f       	adc	r25, r19
   119e8:	02 96       	adiw	r24, 0x02	; 2
   119ea:	fc 01       	movw	r30, r24
   119ec:	20 81       	ld	r18, Z
   119ee:	31 81       	ldd	r19, Z+1	; 0x01
   119f0:	8b a9       	sts	0x4b, r24
   119f2:	9c a9       	sts	0x4c, r25
   119f4:	28 17       	cp	r18, r24
   119f6:	39 07       	cpc	r19, r25
   119f8:	99 f4       	brne	.+38     	; 0x11a20 <pick_assign+0xe4>
        {
        strcat(master_path,"1");
   119fa:	87 e6       	ldi	r24, 0x67	; 103
   119fc:	93 e0       	ldi	r25, 0x03	; 3
   119fe:	9c 01       	movw	r18, r24
   11a00:	f9 01       	movw	r30, r18
   11a02:	01 90       	ld	r0, Z+
   11a04:	00 20       	and	r0, r0
   11a06:	e9 f7       	brne	.-6      	; 0x11a02 <pick_assign+0xc6>
   11a08:	cf 01       	movw	r24, r30
   11a0a:	01 97       	sbiw	r24, 0x01	; 1
   11a0c:	82 1b       	sub	r24, r18
   11a0e:	93 0b       	sbc	r25, r19
   11a10:	89 59       	subi	r24, 0x99	; 153
   11a12:	9c 4f       	sbci	r25, 0xFC	; 252
   11a14:	21 e3       	ldi	r18, 0x31	; 49
   11a16:	30 e0       	ldi	r19, 0x00	; 0
   11a18:	fc 01       	movw	r30, r24
   11a1a:	31 83       	std	Z+1, r19	; 0x01
   11a1c:	20 83       	st	Z, r18
        return; }
   11a1e:	da c0       	rjmp	.+436    	; 0x11bd4 <pick_assign+0x298>
    else if(right[temp_var]==nxt_node)
   11a20:	89 81       	ldd	r24, Y+1	; 0x01
   11a22:	9a 81       	ldd	r25, Y+2	; 0x02
   11a24:	88 0f       	add	r24, r24
   11a26:	99 1f       	adc	r25, r25
   11a28:	9e 01       	movw	r18, r28
   11a2a:	2f 5f       	subi	r18, 0xFF	; 255
   11a2c:	3f 4f       	sbci	r19, 0xFF	; 255
   11a2e:	82 0f       	add	r24, r18
   11a30:	93 1f       	adc	r25, r19
   11a32:	0e 96       	adiw	r24, 0x0e	; 14
   11a34:	fc 01       	movw	r30, r24
   11a36:	20 81       	ld	r18, Z
   11a38:	31 81       	ldd	r19, Z+1	; 0x01
   11a3a:	8b a9       	sts	0x4b, r24
   11a3c:	9c a9       	sts	0x4c, r25
   11a3e:	28 17       	cp	r18, r24
   11a40:	39 07       	cpc	r19, r25
   11a42:	99 f4       	brne	.+38     	; 0x11a6a <pick_assign+0x12e>
              {
        strcat(master_path,"2");
   11a44:	87 e6       	ldi	r24, 0x67	; 103
   11a46:	93 e0       	ldi	r25, 0x03	; 3
   11a48:	9c 01       	movw	r18, r24
   11a4a:	f9 01       	movw	r30, r18
   11a4c:	01 90       	ld	r0, Z+
   11a4e:	00 20       	and	r0, r0
   11a50:	e9 f7       	brne	.-6      	; 0x11a4c <pick_assign+0x110>
   11a52:	cf 01       	movw	r24, r30
   11a54:	01 97       	sbiw	r24, 0x01	; 1
   11a56:	82 1b       	sub	r24, r18
   11a58:	93 0b       	sbc	r25, r19
   11a5a:	89 59       	subi	r24, 0x99	; 153
   11a5c:	9c 4f       	sbci	r25, 0xFC	; 252
   11a5e:	22 e3       	ldi	r18, 0x32	; 50
   11a60:	30 e0       	ldi	r19, 0x00	; 0
   11a62:	fc 01       	movw	r30, r24
   11a64:	31 83       	std	Z+1, r19	; 0x01
   11a66:	20 83       	st	Z, r18
        return; }
   11a68:	b5 c0       	rjmp	.+362    	; 0x11bd4 <pick_assign+0x298>
    else if(back[temp_var]==nxt_node)
   11a6a:	89 81       	ldd	r24, Y+1	; 0x01
   11a6c:	9a 81       	ldd	r25, Y+2	; 0x02
   11a6e:	88 0f       	add	r24, r24
   11a70:	99 1f       	adc	r25, r25
   11a72:	9e 01       	movw	r18, r28
   11a74:	2f 5f       	subi	r18, 0xFF	; 255
   11a76:	3f 4f       	sbci	r19, 0xFF	; 255
   11a78:	82 0f       	add	r24, r18
   11a7a:	93 1f       	adc	r25, r19
   11a7c:	4a 96       	adiw	r24, 0x1a	; 26
   11a7e:	fc 01       	movw	r30, r24
   11a80:	20 81       	ld	r18, Z
   11a82:	31 81       	ldd	r19, Z+1	; 0x01
   11a84:	8b a9       	sts	0x4b, r24
   11a86:	9c a9       	sts	0x4c, r25
   11a88:	28 17       	cp	r18, r24
   11a8a:	39 07       	cpc	r19, r25
   11a8c:	99 f4       	brne	.+38     	; 0x11ab4 <pick_assign+0x178>
              {
        strcat(master_path,"3");
   11a8e:	87 e6       	ldi	r24, 0x67	; 103
   11a90:	93 e0       	ldi	r25, 0x03	; 3
   11a92:	9c 01       	movw	r18, r24
   11a94:	f9 01       	movw	r30, r18
   11a96:	01 90       	ld	r0, Z+
   11a98:	00 20       	and	r0, r0
   11a9a:	e9 f7       	brne	.-6      	; 0x11a96 <pick_assign+0x15a>
   11a9c:	cf 01       	movw	r24, r30
   11a9e:	01 97       	sbiw	r24, 0x01	; 1
   11aa0:	82 1b       	sub	r24, r18
   11aa2:	93 0b       	sbc	r25, r19
   11aa4:	89 59       	subi	r24, 0x99	; 153
   11aa6:	9c 4f       	sbci	r25, 0xFC	; 252
   11aa8:	23 e3       	ldi	r18, 0x33	; 51
   11aaa:	30 e0       	ldi	r19, 0x00	; 0
   11aac:	fc 01       	movw	r30, r24
   11aae:	31 83       	std	Z+1, r19	; 0x01
   11ab0:	20 83       	st	Z, r18
        return; }
   11ab2:	90 c0       	rjmp	.+288    	; 0x11bd4 <pick_assign+0x298>
    else if(nxt_node==1)
   11ab4:	8b a9       	sts	0x4b, r24
   11ab6:	9c a9       	sts	0x4c, r25
   11ab8:	81 30       	cpi	r24, 0x01	; 1
   11aba:	91 05       	cpc	r25, r1
   11abc:	99 f4       	brne	.+38     	; 0x11ae4 <pick_assign+0x1a8>
              {
        strcat(master_path,"4");// first node
   11abe:	87 e6       	ldi	r24, 0x67	; 103
   11ac0:	93 e0       	ldi	r25, 0x03	; 3
   11ac2:	9c 01       	movw	r18, r24
   11ac4:	f9 01       	movw	r30, r18
   11ac6:	01 90       	ld	r0, Z+
   11ac8:	00 20       	and	r0, r0
   11aca:	e9 f7       	brne	.-6      	; 0x11ac6 <pick_assign+0x18a>
   11acc:	cf 01       	movw	r24, r30
   11ace:	01 97       	sbiw	r24, 0x01	; 1
   11ad0:	82 1b       	sub	r24, r18
   11ad2:	93 0b       	sbc	r25, r19
   11ad4:	89 59       	subi	r24, 0x99	; 153
   11ad6:	9c 4f       	sbci	r25, 0xFC	; 252
   11ad8:	24 e3       	ldi	r18, 0x34	; 52
   11ada:	30 e0       	ldi	r19, 0x00	; 0
   11adc:	fc 01       	movw	r30, r24
   11ade:	31 83       	std	Z+1, r19	; 0x01
   11ae0:	20 83       	st	Z, r18
        return; }
   11ae2:	78 c0       	rjmp	.+240    	; 0x11bd4 <pick_assign+0x298>
    else if(nxt_node==6)
   11ae4:	8b a9       	sts	0x4b, r24
   11ae6:	9c a9       	sts	0x4c, r25
   11ae8:	86 30       	cpi	r24, 0x06	; 6
   11aea:	91 05       	cpc	r25, r1
   11aec:	99 f4       	brne	.+38     	; 0x11b14 <pick_assign+0x1d8>
              {
        strcat(master_path,"5");// first row last col
   11aee:	87 e6       	ldi	r24, 0x67	; 103
   11af0:	93 e0       	ldi	r25, 0x03	; 3
   11af2:	9c 01       	movw	r18, r24
   11af4:	f9 01       	movw	r30, r18
   11af6:	01 90       	ld	r0, Z+
   11af8:	00 20       	and	r0, r0
   11afa:	e9 f7       	brne	.-6      	; 0x11af6 <pick_assign+0x1ba>
   11afc:	cf 01       	movw	r24, r30
   11afe:	01 97       	sbiw	r24, 0x01	; 1
   11b00:	82 1b       	sub	r24, r18
   11b02:	93 0b       	sbc	r25, r19
   11b04:	89 59       	subi	r24, 0x99	; 153
   11b06:	9c 4f       	sbci	r25, 0xFC	; 252
   11b08:	25 e3       	ldi	r18, 0x35	; 53
   11b0a:	30 e0       	ldi	r19, 0x00	; 0
   11b0c:	fc 01       	movw	r30, r24
   11b0e:	31 83       	std	Z+1, r19	; 0x01
   11b10:	20 83       	st	Z, r18
        return; }
   11b12:	60 c0       	rjmp	.+192    	; 0x11bd4 <pick_assign+0x298>
    else if(nxt_node==31)//
   11b14:	8b a9       	sts	0x4b, r24
   11b16:	9c a9       	sts	0x4c, r25
   11b18:	8f 31       	cpi	r24, 0x1F	; 31
   11b1a:	91 05       	cpc	r25, r1
   11b1c:	99 f4       	brne	.+38     	; 0x11b44 <pick_assign+0x208>
    {
	    strcat(master_path,"6");//last row first col
   11b1e:	87 e6       	ldi	r24, 0x67	; 103
   11b20:	93 e0       	ldi	r25, 0x03	; 3
   11b22:	9c 01       	movw	r18, r24
   11b24:	f9 01       	movw	r30, r18
   11b26:	01 90       	ld	r0, Z+
   11b28:	00 20       	and	r0, r0
   11b2a:	e9 f7       	brne	.-6      	; 0x11b26 <pick_assign+0x1ea>
   11b2c:	cf 01       	movw	r24, r30
   11b2e:	01 97       	sbiw	r24, 0x01	; 1
   11b30:	82 1b       	sub	r24, r18
   11b32:	93 0b       	sbc	r25, r19
   11b34:	89 59       	subi	r24, 0x99	; 153
   11b36:	9c 4f       	sbci	r25, 0xFC	; 252
   11b38:	26 e3       	ldi	r18, 0x36	; 54
   11b3a:	30 e0       	ldi	r19, 0x00	; 0
   11b3c:	fc 01       	movw	r30, r24
   11b3e:	31 83       	std	Z+1, r19	; 0x01
   11b40:	20 83       	st	Z, r18
	    return;
   11b42:	48 c0       	rjmp	.+144    	; 0x11bd4 <pick_assign+0x298>
    }
    else if(nxt_node==36)
   11b44:	8b a9       	sts	0x4b, r24
   11b46:	9c a9       	sts	0x4c, r25
   11b48:	84 32       	cpi	r24, 0x24	; 36
   11b4a:	91 05       	cpc	r25, r1
   11b4c:	99 f4       	brne	.+38     	; 0x11b74 <pick_assign+0x238>
    {
	    strcat(master_path,"7");//last row last col
   11b4e:	87 e6       	ldi	r24, 0x67	; 103
   11b50:	93 e0       	ldi	r25, 0x03	; 3
   11b52:	9c 01       	movw	r18, r24
   11b54:	f9 01       	movw	r30, r18
   11b56:	01 90       	ld	r0, Z+
   11b58:	00 20       	and	r0, r0
   11b5a:	e9 f7       	brne	.-6      	; 0x11b56 <pick_assign+0x21a>
   11b5c:	cf 01       	movw	r24, r30
   11b5e:	01 97       	sbiw	r24, 0x01	; 1
   11b60:	82 1b       	sub	r24, r18
   11b62:	93 0b       	sbc	r25, r19
   11b64:	89 59       	subi	r24, 0x99	; 153
   11b66:	9c 4f       	sbci	r25, 0xFC	; 252
   11b68:	27 e3       	ldi	r18, 0x37	; 55
   11b6a:	30 e0       	ldi	r19, 0x00	; 0
   11b6c:	fc 01       	movw	r30, r24
   11b6e:	31 83       	std	Z+1, r19	; 0x01
   11b70:	20 83       	st	Z, r18
	    return;
   11b72:	30 c0       	rjmp	.+96     	; 0x11bd4 <pick_assign+0x298>
    }
    else if(front[temp_var]==nxt_node)
   11b74:	89 81       	ldd	r24, Y+1	; 0x01
   11b76:	9a 81       	ldd	r25, Y+2	; 0x02
   11b78:	88 0f       	add	r24, r24
   11b7a:	99 1f       	adc	r25, r25
   11b7c:	9e 01       	movw	r18, r28
   11b7e:	2f 5f       	subi	r18, 0xFF	; 255
   11b80:	3f 4f       	sbci	r19, 0xFF	; 255
   11b82:	82 0f       	add	r24, r18
   11b84:	93 1f       	adc	r25, r19
   11b86:	86 96       	adiw	r24, 0x26	; 38
   11b88:	fc 01       	movw	r30, r24
   11b8a:	20 81       	ld	r18, Z
   11b8c:	31 81       	ldd	r19, Z+1	; 0x01
   11b8e:	8b a9       	sts	0x4b, r24
   11b90:	9c a9       	sts	0x4c, r25
   11b92:	28 17       	cp	r18, r24
   11b94:	39 07       	cpc	r19, r25
   11b96:	99 f4       	brne	.+38     	; 0x11bbe <pick_assign+0x282>
    {
	    strcat(master_path,"8");
   11b98:	87 e6       	ldi	r24, 0x67	; 103
   11b9a:	93 e0       	ldi	r25, 0x03	; 3
   11b9c:	9c 01       	movw	r18, r24
   11b9e:	f9 01       	movw	r30, r18
   11ba0:	01 90       	ld	r0, Z+
   11ba2:	00 20       	and	r0, r0
   11ba4:	e9 f7       	brne	.-6      	; 0x11ba0 <pick_assign+0x264>
   11ba6:	cf 01       	movw	r24, r30
   11ba8:	01 97       	sbiw	r24, 0x01	; 1
   11baa:	82 1b       	sub	r24, r18
   11bac:	93 0b       	sbc	r25, r19
   11bae:	89 59       	subi	r24, 0x99	; 153
   11bb0:	9c 4f       	sbci	r25, 0xFC	; 252
   11bb2:	28 e3       	ldi	r18, 0x38	; 56
   11bb4:	30 e0       	ldi	r19, 0x00	; 0
   11bb6:	fc 01       	movw	r30, r24
   11bb8:	31 83       	std	Z+1, r19	; 0x01
   11bba:	20 83       	st	Z, r18
    return; }
   11bbc:	0b c0       	rjmp	.+22     	; 0x11bd4 <pick_assign+0x298>
int left[6]={7,13,19,25,99,99};
int right[6]={12,18,24,30,99,99};
int back[6]={2,3,4,5,99,99};
int front[6]={32,33,34,35,99,99};
int temp_var=0;
for(temp_var=0;temp_var<6;temp_var++){
   11bbe:	89 81       	ldd	r24, Y+1	; 0x01
   11bc0:	9a 81       	ldd	r25, Y+2	; 0x02
   11bc2:	01 96       	adiw	r24, 0x01	; 1
   11bc4:	9a 83       	std	Y+2, r25	; 0x02
   11bc6:	89 83       	std	Y+1, r24	; 0x01
   11bc8:	89 81       	ldd	r24, Y+1	; 0x01
   11bca:	9a 81       	ldd	r25, Y+2	; 0x02
   11bcc:	86 30       	cpi	r24, 0x06	; 6
   11bce:	91 05       	cpc	r25, r1
   11bd0:	0c f4       	brge	.+2      	; 0x11bd4 <pick_assign+0x298>
   11bd2:	01 cf       	rjmp	.-510    	; 0x119d6 <pick_assign+0x9a>
    {
	    strcat(master_path,"8");
    return; }
}

}
   11bd4:	e4 96       	adiw	r28, 0x34	; 52
   11bd6:	0f b6       	in	r0, 0x3f	; 63
   11bd8:	f8 94       	cli
   11bda:	de bf       	out	0x3e, r29	; 62
   11bdc:	0f be       	out	0x3f, r0	; 63
   11bde:	cd bf       	out	0x3d, r28	; 61
   11be0:	df 91       	pop	r29
   11be2:	cf 91       	pop	r28
   11be4:	08 95       	ret

00011be6 <main>:
int main()
{
   11be6:	0f 93       	push	r16
   11be8:	1f 93       	push	r17
   11bea:	cf 93       	push	r28
   11bec:	df 93       	push	r29
   11bee:	cd b7       	in	r28, 0x3d	; 61
   11bf0:	de b7       	in	r29, 0x3e	; 62
   11bf2:	ca 55       	subi	r28, 0x5A	; 90
   11bf4:	d0 40       	sbci	r29, 0x00	; 0
   11bf6:	0f b6       	in	r0, 0x3f	; 63
   11bf8:	f8 94       	cli
   11bfa:	de bf       	out	0x3e, r29	; 62
   11bfc:	0f be       	out	0x3f, r0	; 63
   11bfe:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
   11c00:	0e 94 aa 81 	call	0x10354	; 0x10354 <lcd_port_config>
	init_devices();
   11c04:	0e 94 da 83 	call	0x107b4	; 0x107b4 <init_devices>
	lcd_set_4bit();
   11c08:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_set_4bit>
	lcd_init();
   11c0c:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_init>
	int lena,lenb,lenp;
	int present_node=0, next_node=0,t_count=0;
   11c10:	1a 82       	std	Y+2, r1	; 0x02
   11c12:	19 82       	std	Y+1, r1	; 0x01
   11c14:	1c 82       	std	Y+4, r1	; 0x04
   11c16:	1b 82       	std	Y+3, r1	; 0x03
   11c18:	1a 8a       	std	Y+18, r1	; 0x12
   11c1a:	19 8a       	std	Y+17, r1	; 0x11
	int switch_pressed = 0, mapped=0,size=0,an_count=0,hab_count=0,var=0,complete=0;
   11c1c:	1e 82       	std	Y+6, r1	; 0x06
   11c1e:	1d 82       	std	Y+5, r1	; 0x05
   11c20:	18 86       	std	Y+8, r1	; 0x08
   11c22:	1f 82       	std	Y+7, r1	; 0x07
   11c24:	1c 8a       	std	Y+20, r1	; 0x14
   11c26:	1b 8a       	std	Y+19, r1	; 0x13
   11c28:	1a 86       	std	Y+10, r1	; 0x0a
   11c2a:	19 86       	std	Y+9, r1	; 0x09
   11c2c:	1c 86       	std	Y+12, r1	; 0x0c
   11c2e:	1b 86       	std	Y+11, r1	; 0x0b
   11c30:	1e 86       	std	Y+14, r1	; 0x0e
   11c32:	1d 86       	std	Y+13, r1	; 0x0d
   11c34:	18 8a       	std	Y+16, r1	; 0x10
   11c36:	1f 86       	std	Y+15, r1	; 0x0f
	char *p;
	char animal[]="A1, A2, F1";
   11c38:	ce 01       	movw	r24, r28
   11c3a:	89 5b       	subi	r24, 0xB9	; 185
   11c3c:	9f 4f       	sbci	r25, 0xFF	; 255
   11c3e:	24 e2       	ldi	r18, 0x24	; 36
   11c40:	33 e0       	ldi	r19, 0x03	; 3
   11c42:	4b e0       	ldi	r20, 0x0B	; 11
   11c44:	f9 01       	movw	r30, r18
   11c46:	00 80       	ld	r0, Z
   11c48:	2f 5f       	subi	r18, 0xFF	; 255
   11c4a:	3f 4f       	sbci	r19, 0xFF	; 255
   11c4c:	fc 01       	movw	r30, r24
   11c4e:	00 82       	st	Z, r0
   11c50:	01 96       	adiw	r24, 0x01	; 1
   11c52:	41 50       	subi	r20, 0x01	; 1
   11c54:	44 23       	and	r20, r20
   11c56:	b1 f7       	brne	.-20     	; 0x11c44 <main+0x5e>
	char habit[]="1, 8, 25";
   11c58:	ce 01       	movw	r24, r28
   11c5a:	8e 5a       	subi	r24, 0xAE	; 174
   11c5c:	9f 4f       	sbci	r25, 0xFF	; 255
   11c5e:	2f e2       	ldi	r18, 0x2F	; 47
   11c60:	33 e0       	ldi	r19, 0x03	; 3
   11c62:	49 e0       	ldi	r20, 0x09	; 9
   11c64:	f9 01       	movw	r30, r18
   11c66:	00 80       	ld	r0, Z
   11c68:	2f 5f       	subi	r18, 0xFF	; 255
   11c6a:	3f 4f       	sbci	r19, 0xFF	; 255
   11c6c:	fc 01       	movw	r30, r24
   11c6e:	00 82       	st	Z, r0
   11c70:	01 96       	adiw	r24, 0x01	; 1
   11c72:	41 50       	subi	r20, 0x01	; 1
   11c74:	44 23       	and	r20, r20
   11c76:	b1 f7       	brne	.-20     	; 0x11c64 <main+0x7e>
	path_fin=0;
   11c78:	10 92 30 04 	sts	0x0430, r1
   11c7c:	10 92 2f 04 	sts	0x042F, r1
	halt=0;
   11c80:	10 92 66 03 	sts	0x0366, r1
   11c84:	10 92 65 03 	sts	0x0365, r1
	defaulty();
   11c88:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <defaulty>
	while(!complete)
   11c8c:	b1 c1       	rjmp	.+866    	; 0x11ff0 <main+0x40a>
	{	
		if((PINE & 0x80) == 0x80) //when BOOT switch is not pressed
   11c8e:	8c e2       	ldi	r24, 0x2C	; 44
   11c90:	90 e0       	ldi	r25, 0x00	; 0
   11c92:	fc 01       	movw	r30, r24
   11c94:	80 81       	ld	r24, Z
   11c96:	88 23       	and	r24, r24
   11c98:	0c f0       	brlt	.+2      	; 0x11c9c <main+0xb6>
   11c9a:	96 c1       	rjmp	.+812    	; 0x11fc8 <main+0x3e2>
		{	
			if(switch_pressed==1)//after press
   11c9c:	8d 81       	ldd	r24, Y+5	; 0x05
   11c9e:	9e 81       	ldd	r25, Y+6	; 0x06
   11ca0:	81 30       	cpi	r24, 0x01	; 1
   11ca2:	91 05       	cpc	r25, r1
   11ca4:	09 f0       	breq	.+2      	; 0x11ca8 <main+0xc2>
   11ca6:	a4 c1       	rjmp	.+840    	; 0x11ff0 <main+0x40a>
			{
				if(!mapped)
   11ca8:	8f 81       	ldd	r24, Y+7	; 0x07
   11caa:	98 85       	ldd	r25, Y+8	; 0x08
   11cac:	00 97       	sbiw	r24, 0x00	; 0
   11cae:	09 f0       	breq	.+2      	; 0x11cb2 <main+0xcc>
   11cb0:	ea c0       	rjmp	.+468    	; 0x11e86 <main+0x2a0>
				{	mapped=1;
   11cb2:	81 e0       	ldi	r24, 0x01	; 1
   11cb4:	90 e0       	ldi	r25, 0x00	; 0
   11cb6:	98 87       	std	Y+8, r25	; 0x08
   11cb8:	8f 83       	std	Y+7, r24	; 0x07
					node=0;
   11cba:	10 92 64 03 	sts	0x0364, r1
   11cbe:	10 92 63 03 	sts	0x0363, r1
					node_map(animal,0,&lena);
   11cc2:	ce 01       	movw	r24, r28
   11cc4:	89 5b       	subi	r24, 0xB9	; 185
   11cc6:	9f 4f       	sbci	r25, 0xFF	; 255
   11cc8:	9e 01       	movw	r18, r28
   11cca:	2f 5b       	subi	r18, 0xBF	; 191
   11ccc:	3f 4f       	sbci	r19, 0xFF	; 255
   11cce:	60 e0       	ldi	r22, 0x00	; 0
   11cd0:	70 e0       	ldi	r23, 0x00	; 0
   11cd2:	a9 01       	movw	r20, r18
   11cd4:	0e 94 3d 8b 	call	0x1167a	; 0x1167a <node_map>
					node_map(habit,1,&lenb);
   11cd8:	ce 01       	movw	r24, r28
   11cda:	8e 5a       	subi	r24, 0xAE	; 174
   11cdc:	9f 4f       	sbci	r25, 0xFF	; 255
   11cde:	9e 01       	movw	r18, r28
   11ce0:	2d 5b       	subi	r18, 0xBD	; 189
   11ce2:	3f 4f       	sbci	r19, 0xFF	; 255
   11ce4:	61 e0       	ldi	r22, 0x01	; 1
   11ce6:	70 e0       	ldi	r23, 0x00	; 0
   11ce8:	a9 01       	movw	r20, r18
   11cea:	0e 94 3d 8b 	call	0x1167a	; 0x1167a <node_map>
					size=lena;
   11cee:	ce 01       	movw	r24, r28
   11cf0:	8f 5b       	subi	r24, 0xBF	; 191
   11cf2:	9f 4f       	sbci	r25, 0xFF	; 255
   11cf4:	fc 01       	movw	r30, r24
   11cf6:	80 81       	ld	r24, Z
   11cf8:	91 81       	ldd	r25, Z+1	; 0x01
   11cfa:	9c 8b       	std	Y+20, r25	; 0x14
   11cfc:	8b 8b       	std	Y+19, r24	; 0x13
					size=size*2-1;
   11cfe:	8b 89       	ldd	r24, Y+19	; 0x13
   11d00:	9c 89       	ldd	r25, Y+20	; 0x14
   11d02:	88 0f       	add	r24, r24
   11d04:	99 1f       	adc	r25, r25
   11d06:	01 97       	sbiw	r24, 0x01	; 1
   11d08:	9c 8b       	std	Y+20, r25	; 0x14
   11d0a:	8b 8b       	std	Y+19, r24	; 0x13
					    p= dijkstra(1,aniloc[0],&lenp);
   11d0c:	40 91 c4 04 	lds	r20, 0x04C4
   11d10:	50 91 c5 04 	lds	r21, 0x04C5
   11d14:	9e 01       	movw	r18, r28
   11d16:	2b 5b       	subi	r18, 0xBB	; 187
   11d18:	3f 4f       	sbci	r19, 0xFF	; 255
   11d1a:	81 e0       	ldi	r24, 0x01	; 1
   11d1c:	90 e0       	ldi	r25, 0x00	; 0
   11d1e:	ba 01       	movw	r22, r20
   11d20:	a9 01       	movw	r20, r18
   11d22:	0e 94 e7 89 	call	0x113ce	; 0x113ce <dijkstra>
   11d26:	9e 8b       	std	Y+22, r25	; 0x16
   11d28:	8d 8b       	std	Y+21, r24	; 0x15
					    strcat(master_path,p);
   11d2a:	87 e6       	ldi	r24, 0x67	; 103
   11d2c:	93 e0       	ldi	r25, 0x03	; 3
   11d2e:	2d 89       	ldd	r18, Y+21	; 0x15
   11d30:	3e 89       	ldd	r19, Y+22	; 0x16
   11d32:	b9 01       	movw	r22, r18
   11d34:	0e 94 72 95 	call	0x12ae4	; 0x12ae4 <strcat>
					    pick_assign(aniloc[0]);
   11d38:	80 91 c4 04 	lds	r24, 0x04C4
   11d3c:	90 91 c5 04 	lds	r25, 0x04C5
   11d40:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <pick_assign>
					    free(p);
   11d44:	8d 89       	ldd	r24, Y+21	; 0x15
   11d46:	9e 89       	ldd	r25, Y+22	; 0x16
   11d48:	0e 94 eb 93 	call	0x127d6	; 0x127d6 <free>
					    for(var=0;var<size;var++)
   11d4c:	1e 86       	std	Y+14, r1	; 0x0e
   11d4e:	1d 86       	std	Y+13, r1	; 0x0d
   11d50:	78 c0       	rjmp	.+240    	; 0x11e42 <main+0x25c>
					    {
						    if(var%2==0)
   11d52:	8d 85       	ldd	r24, Y+13	; 0x0d
   11d54:	9e 85       	ldd	r25, Y+14	; 0x0e
   11d56:	81 70       	andi	r24, 0x01	; 1
   11d58:	90 70       	andi	r25, 0x00	; 0
   11d5a:	00 97       	sbiw	r24, 0x00	; 0
   11d5c:	09 f5       	brne	.+66     	; 0x11da0 <main+0x1ba>
						    {
							    present_node=aniloc[an_count];
   11d5e:	89 85       	ldd	r24, Y+9	; 0x09
   11d60:	9a 85       	ldd	r25, Y+10	; 0x0a
   11d62:	88 0f       	add	r24, r24
   11d64:	99 1f       	adc	r25, r25
   11d66:	8c 53       	subi	r24, 0x3C	; 60
   11d68:	9b 4f       	sbci	r25, 0xFB	; 251
   11d6a:	fc 01       	movw	r30, r24
   11d6c:	80 81       	ld	r24, Z
   11d6e:	91 81       	ldd	r25, Z+1	; 0x01
   11d70:	9a 83       	std	Y+2, r25	; 0x02
   11d72:	89 83       	std	Y+1, r24	; 0x01
							    next_node=habloc[hab_count];
   11d74:	8b 85       	ldd	r24, Y+11	; 0x0b
   11d76:	9c 85       	ldd	r25, Y+12	; 0x0c
   11d78:	88 0f       	add	r24, r24
   11d7a:	99 1f       	adc	r25, r25
   11d7c:	87 5a       	subi	r24, 0xA7	; 167
   11d7e:	9b 4f       	sbci	r25, 0xFB	; 251
   11d80:	fc 01       	movw	r30, r24
   11d82:	80 81       	ld	r24, Z
   11d84:	91 81       	ldd	r25, Z+1	; 0x01
   11d86:	9c 83       	std	Y+4, r25	; 0x04
   11d88:	8b 83       	std	Y+3, r24	; 0x03
							    an_count++;
   11d8a:	89 85       	ldd	r24, Y+9	; 0x09
   11d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
   11d8e:	01 96       	adiw	r24, 0x01	; 1
   11d90:	9a 87       	std	Y+10, r25	; 0x0a
   11d92:	89 87       	std	Y+9, r24	; 0x09
							    hab_count++;
   11d94:	8b 85       	ldd	r24, Y+11	; 0x0b
   11d96:	9c 85       	ldd	r25, Y+12	; 0x0c
   11d98:	01 96       	adiw	r24, 0x01	; 1
   11d9a:	9c 87       	std	Y+12, r25	; 0x0c
   11d9c:	8b 87       	std	Y+11, r24	; 0x0b
   11d9e:	17 c0       	rjmp	.+46     	; 0x11dce <main+0x1e8>
						    }
						    else
						    {
							    present_node=habloc[hab_count-1];
   11da0:	8b 85       	ldd	r24, Y+11	; 0x0b
   11da2:	9c 85       	ldd	r25, Y+12	; 0x0c
   11da4:	01 97       	sbiw	r24, 0x01	; 1
   11da6:	88 0f       	add	r24, r24
   11da8:	99 1f       	adc	r25, r25
   11daa:	87 5a       	subi	r24, 0xA7	; 167
   11dac:	9b 4f       	sbci	r25, 0xFB	; 251
   11dae:	fc 01       	movw	r30, r24
   11db0:	80 81       	ld	r24, Z
   11db2:	91 81       	ldd	r25, Z+1	; 0x01
   11db4:	9a 83       	std	Y+2, r25	; 0x02
   11db6:	89 83       	std	Y+1, r24	; 0x01
							    next_node=aniloc[an_count];
   11db8:	89 85       	ldd	r24, Y+9	; 0x09
   11dba:	9a 85       	ldd	r25, Y+10	; 0x0a
   11dbc:	88 0f       	add	r24, r24
   11dbe:	99 1f       	adc	r25, r25
   11dc0:	8c 53       	subi	r24, 0x3C	; 60
   11dc2:	9b 4f       	sbci	r25, 0xFB	; 251
   11dc4:	fc 01       	movw	r30, r24
   11dc6:	80 81       	ld	r24, Z
   11dc8:	91 81       	ldd	r25, Z+1	; 0x01
   11dca:	9c 83       	std	Y+4, r25	; 0x04
   11dcc:	8b 83       	std	Y+3, r24	; 0x03
						    }
						    p=dijkstra(present_node,next_node,&lenp);
   11dce:	89 81       	ldd	r24, Y+1	; 0x01
   11dd0:	9a 81       	ldd	r25, Y+2	; 0x02
   11dd2:	4b 81       	ldd	r20, Y+3	; 0x03
   11dd4:	5c 81       	ldd	r21, Y+4	; 0x04
   11dd6:	9e 01       	movw	r18, r28
   11dd8:	2b 5b       	subi	r18, 0xBB	; 187
   11dda:	3f 4f       	sbci	r19, 0xFF	; 255
   11ddc:	ba 01       	movw	r22, r20
   11dde:	a9 01       	movw	r20, r18
   11de0:	0e 94 e7 89 	call	0x113ce	; 0x113ce <dijkstra>
   11de4:	9e 8b       	std	Y+22, r25	; 0x16
   11de6:	8d 8b       	std	Y+21, r24	; 0x15
						    strcat(master_path,p);
   11de8:	87 e6       	ldi	r24, 0x67	; 103
   11dea:	93 e0       	ldi	r25, 0x03	; 3
   11dec:	2d 89       	ldd	r18, Y+21	; 0x15
   11dee:	3e 89       	ldd	r19, Y+22	; 0x16
   11df0:	b9 01       	movw	r22, r18
   11df2:	0e 94 72 95 	call	0x12ae4	; 0x12ae4 <strcat>
						    free(p);
   11df6:	8d 89       	ldd	r24, Y+21	; 0x15
   11df8:	9e 89       	ldd	r25, Y+22	; 0x16
   11dfa:	0e 94 eb 93 	call	0x127d6	; 0x127d6 <free>
						    if(var%2==0)
   11dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
   11e00:	9e 85       	ldd	r25, Y+14	; 0x0e
   11e02:	81 70       	andi	r24, 0x01	; 1
   11e04:	90 70       	andi	r25, 0x00	; 0
   11e06:	00 97       	sbiw	r24, 0x00	; 0
   11e08:	99 f4       	brne	.+38     	; 0x11e30 <main+0x24a>
						    strcat(master_path,"D");
   11e0a:	87 e6       	ldi	r24, 0x67	; 103
   11e0c:	93 e0       	ldi	r25, 0x03	; 3
   11e0e:	9c 01       	movw	r18, r24
   11e10:	f9 01       	movw	r30, r18
   11e12:	01 90       	ld	r0, Z+
   11e14:	00 20       	and	r0, r0
   11e16:	e9 f7       	brne	.-6      	; 0x11e12 <main+0x22c>
   11e18:	cf 01       	movw	r24, r30
   11e1a:	01 97       	sbiw	r24, 0x01	; 1
   11e1c:	82 1b       	sub	r24, r18
   11e1e:	93 0b       	sbc	r25, r19
   11e20:	89 59       	subi	r24, 0x99	; 153
   11e22:	9c 4f       	sbci	r25, 0xFC	; 252
   11e24:	24 e4       	ldi	r18, 0x44	; 68
   11e26:	30 e0       	ldi	r19, 0x00	; 0
   11e28:	fc 01       	movw	r30, r24
   11e2a:	31 83       	std	Z+1, r19	; 0x01
   11e2c:	20 83       	st	Z, r18
   11e2e:	04 c0       	rjmp	.+8      	; 0x11e38 <main+0x252>
						    else{
							    pick_assign(next_node);
   11e30:	8b 81       	ldd	r24, Y+3	; 0x03
   11e32:	9c 81       	ldd	r25, Y+4	; 0x04
   11e34:	0e 94 9e 8c 	call	0x1193c	; 0x1193c <pick_assign>
					size=size*2-1;
					    p= dijkstra(1,aniloc[0],&lenp);
					    strcat(master_path,p);
					    pick_assign(aniloc[0]);
					    free(p);
					    for(var=0;var<size;var++)
   11e38:	8d 85       	ldd	r24, Y+13	; 0x0d
   11e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
   11e3c:	01 96       	adiw	r24, 0x01	; 1
   11e3e:	9e 87       	std	Y+14, r25	; 0x0e
   11e40:	8d 87       	std	Y+13, r24	; 0x0d
   11e42:	2d 85       	ldd	r18, Y+13	; 0x0d
   11e44:	3e 85       	ldd	r19, Y+14	; 0x0e
   11e46:	8b 89       	ldd	r24, Y+19	; 0x13
   11e48:	9c 89       	ldd	r25, Y+20	; 0x14
   11e4a:	28 17       	cp	r18, r24
   11e4c:	39 07       	cpc	r19, r25
   11e4e:	0c f4       	brge	.+2      	; 0x11e52 <main+0x26c>
   11e50:	80 cf       	rjmp	.-256    	; 0x11d52 <main+0x16c>
						    else{
							    pick_assign(next_node);
						    }

					    }
					    strcat(master_path,"o");
   11e52:	87 e6       	ldi	r24, 0x67	; 103
   11e54:	93 e0       	ldi	r25, 0x03	; 3
   11e56:	9c 01       	movw	r18, r24
   11e58:	f9 01       	movw	r30, r18
   11e5a:	01 90       	ld	r0, Z+
   11e5c:	00 20       	and	r0, r0
   11e5e:	e9 f7       	brne	.-6      	; 0x11e5a <main+0x274>
   11e60:	cf 01       	movw	r24, r30
   11e62:	01 97       	sbiw	r24, 0x01	; 1
   11e64:	82 1b       	sub	r24, r18
   11e66:	93 0b       	sbc	r25, r19
   11e68:	89 59       	subi	r24, 0x99	; 153
   11e6a:	9c 4f       	sbci	r25, 0xFC	; 252
   11e6c:	2f e6       	ldi	r18, 0x6F	; 111
   11e6e:	30 e0       	ldi	r19, 0x00	; 0
   11e70:	fc 01       	movw	r30, r24
   11e72:	31 83       	std	Z+1, r19	; 0x01
   11e74:	20 83       	st	Z, r18
					
				lcd_cursor(1,1);
   11e76:	81 e0       	ldi	r24, 0x01	; 1
   11e78:	61 e0       	ldi	r22, 0x01	; 1
   11e7a:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
				lcd_wr_char(master_path[18]);
   11e7e:	80 91 79 03 	lds	r24, 0x0379
   11e82:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>
				}//end of mapping
				travel_path(master_path[0]);
   11e86:	80 91 67 03 	lds	r24, 0x0367
   11e8a:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <travel_path>
				TIMSK3=1;
   11e8e:	81 e7       	ldi	r24, 0x71	; 113
   11e90:	90 e0       	ldi	r25, 0x00	; 0
   11e92:	21 e0       	ldi	r18, 0x01	; 1
   11e94:	fc 01       	movw	r30, r24
   11e96:	20 83       	st	Z, r18
				while(!path_fin){
   11e98:	89 c0       	rjmp	.+274    	; 0x11fac <main+0x3c6>
					if(!halt){
   11e9a:	80 91 65 03 	lds	r24, 0x0365
   11e9e:	90 91 66 03 	lds	r25, 0x0366
   11ea2:	00 97       	sbiw	r24, 0x00	; 0
   11ea4:	09 f0       	breq	.+2      	; 0x11ea8 <main+0x2c2>
   11ea6:	82 c0       	rjmp	.+260    	; 0x11fac <main+0x3c6>
						line_follow();
   11ea8:	0e 94 c6 34 	call	0x698c	; 0x698c <line_follow>
   11eac:	80 e0       	ldi	r24, 0x00	; 0
   11eae:	90 e0       	ldi	r25, 0x00	; 0
   11eb0:	a8 e4       	ldi	r26, 0x48	; 72
   11eb2:	b2 e4       	ldi	r27, 0x42	; 66
   11eb4:	8f 8b       	std	Y+23, r24	; 0x17
   11eb6:	98 8f       	std	Y+24, r25	; 0x18
   11eb8:	a9 8f       	std	Y+25, r26	; 0x19
   11eba:	ba 8f       	std	Y+26, r27	; 0x1a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   11ebc:	6f 89       	ldd	r22, Y+23	; 0x17
   11ebe:	78 8d       	ldd	r23, Y+24	; 0x18
   11ec0:	89 8d       	ldd	r24, Y+25	; 0x19
   11ec2:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11ec4:	26 e6       	ldi	r18, 0x66	; 102
   11ec6:	36 e6       	ldi	r19, 0x66	; 102
   11ec8:	46 e6       	ldi	r20, 0x66	; 102
   11eca:	55 e4       	ldi	r21, 0x45	; 69
   11ecc:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   11ed0:	dc 01       	movw	r26, r24
   11ed2:	cb 01       	movw	r24, r22
   11ed4:	8b 8f       	std	Y+27, r24	; 0x1b
   11ed6:	9c 8f       	std	Y+28, r25	; 0x1c
   11ed8:	ad 8f       	std	Y+29, r26	; 0x1d
   11eda:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
   11edc:	11 e0       	ldi	r17, 0x01	; 1
   11ede:	6b 8d       	ldd	r22, Y+27	; 0x1b
   11ee0:	7c 8d       	ldd	r23, Y+28	; 0x1c
   11ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
   11ee4:	9e 8d       	ldd	r25, Y+30	; 0x1e
   11ee6:	20 e0       	ldi	r18, 0x00	; 0
   11ee8:	30 e0       	ldi	r19, 0x00	; 0
   11eea:	40 e8       	ldi	r20, 0x80	; 128
   11eec:	5f e3       	ldi	r21, 0x3F	; 63
   11eee:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
   11ef2:	88 23       	and	r24, r24
   11ef4:	0c f0       	brlt	.+2      	; 0x11ef8 <main+0x312>
   11ef6:	10 e0       	ldi	r17, 0x00	; 0
   11ef8:	11 23       	and	r17, r17
   11efa:	29 f0       	breq	.+10     	; 0x11f06 <main+0x320>
		__ticks = 1;
   11efc:	81 e0       	ldi	r24, 0x01	; 1
   11efe:	90 e0       	ldi	r25, 0x00	; 0
   11f00:	98 a3       	lds	r25, 0x58
   11f02:	8f 8f       	std	Y+31, r24	; 0x1f
   11f04:	46 c0       	rjmp	.+140    	; 0x11f92 <main+0x3ac>
	else if (__tmp > 65535)
   11f06:	11 e0       	ldi	r17, 0x01	; 1
   11f08:	6b 8d       	ldd	r22, Y+27	; 0x1b
   11f0a:	7c 8d       	ldd	r23, Y+28	; 0x1c
   11f0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
   11f0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
   11f10:	20 e0       	ldi	r18, 0x00	; 0
   11f12:	3f ef       	ldi	r19, 0xFF	; 255
   11f14:	4f e7       	ldi	r20, 0x7F	; 127
   11f16:	57 e4       	ldi	r21, 0x47	; 71
   11f18:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
   11f1c:	18 16       	cp	r1, r24
   11f1e:	0c f0       	brlt	.+2      	; 0x11f22 <main+0x33c>
   11f20:	10 e0       	ldi	r17, 0x00	; 0
   11f22:	11 23       	and	r17, r17
   11f24:	61 f1       	breq	.+88     	; 0x11f7e <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   11f26:	6f 89       	ldd	r22, Y+23	; 0x17
   11f28:	78 8d       	ldd	r23, Y+24	; 0x18
   11f2a:	89 8d       	ldd	r24, Y+25	; 0x19
   11f2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11f2e:	20 e0       	ldi	r18, 0x00	; 0
   11f30:	30 e0       	ldi	r19, 0x00	; 0
   11f32:	40 e2       	ldi	r20, 0x20	; 32
   11f34:	51 e4       	ldi	r21, 0x41	; 65
   11f36:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   11f3a:	dc 01       	movw	r26, r24
   11f3c:	cb 01       	movw	r24, r22
   11f3e:	bc 01       	movw	r22, r24
   11f40:	cd 01       	movw	r24, r26
   11f42:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   11f46:	dc 01       	movw	r26, r24
   11f48:	cb 01       	movw	r24, r22
   11f4a:	98 a3       	lds	r25, 0x58
   11f4c:	8f 8f       	std	Y+31, r24	; 0x1f
   11f4e:	12 c0       	rjmp	.+36     	; 0x11f74 <main+0x38e>
   11f50:	80 e7       	ldi	r24, 0x70	; 112
   11f52:	91 e0       	ldi	r25, 0x01	; 1
   11f54:	9a a3       	lds	r25, 0x5a
   11f56:	89 a3       	lds	r24, 0x59
   11f58:	89 a1       	lds	r24, 0x49
   11f5a:	9a a1       	lds	r25, 0x4a
   11f5c:	8c 01       	movw	r16, r24
   11f5e:	c8 01       	movw	r24, r16
   11f60:	01 97       	sbiw	r24, 0x01	; 1
   11f62:	f1 f7       	brne	.-4      	; 0x11f60 <main+0x37a>
   11f64:	8c 01       	movw	r16, r24
   11f66:	1a a3       	lds	r17, 0x5a
   11f68:	09 a3       	lds	r16, 0x59
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   11f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11f6c:	98 a1       	lds	r25, 0x48
   11f6e:	01 97       	sbiw	r24, 0x01	; 1
   11f70:	98 a3       	lds	r25, 0x58
   11f72:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   11f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11f76:	98 a1       	lds	r25, 0x48
   11f78:	00 97       	sbiw	r24, 0x00	; 0
   11f7a:	51 f7       	brne	.-44     	; 0x11f50 <main+0x36a>
   11f7c:	17 c0       	rjmp	.+46     	; 0x11fac <main+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   11f7e:	6b 8d       	ldd	r22, Y+27	; 0x1b
   11f80:	7c 8d       	ldd	r23, Y+28	; 0x1c
   11f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
   11f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
   11f86:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   11f8a:	dc 01       	movw	r26, r24
   11f8c:	cb 01       	movw	r24, r22
   11f8e:	98 a3       	lds	r25, 0x58
   11f90:	8f 8f       	std	Y+31, r24	; 0x1f
   11f92:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11f94:	98 a1       	lds	r25, 0x48
   11f96:	9c a3       	lds	r25, 0x5c
   11f98:	8b a3       	lds	r24, 0x5b
   11f9a:	8b a1       	lds	r24, 0x4b
   11f9c:	9c a1       	lds	r25, 0x4c
   11f9e:	8c 01       	movw	r16, r24
   11fa0:	f8 01       	movw	r30, r16
   11fa2:	31 97       	sbiw	r30, 0x01	; 1
   11fa4:	f1 f7       	brne	.-4      	; 0x11fa2 <main+0x3bc>
   11fa6:	8f 01       	movw	r16, r30
   11fa8:	1c a3       	lds	r17, 0x5c
   11faa:	0b a3       	lds	r16, 0x5b
				lcd_cursor(1,1);
				lcd_wr_char(master_path[18]);
				}//end of mapping
				travel_path(master_path[0]);
				TIMSK3=1;
				while(!path_fin){
   11fac:	80 91 2f 04 	lds	r24, 0x042F
   11fb0:	90 91 30 04 	lds	r25, 0x0430
   11fb4:	00 97       	sbiw	r24, 0x00	; 0
   11fb6:	09 f4       	brne	.+2      	; 0x11fba <main+0x3d4>
   11fb8:	70 cf       	rjmp	.-288    	; 0x11e9a <main+0x2b4>
						line_follow();
					_delay_ms(50);}
					//display_line();
					//_delay_ms(20);
				}
			stop();
   11fba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			complete=1;
   11fbe:	81 e0       	ldi	r24, 0x01	; 1
   11fc0:	90 e0       	ldi	r25, 0x00	; 0
   11fc2:	98 8b       	std	Y+16, r25	; 0x10
   11fc4:	8f 87       	std	Y+15, r24	; 0x0f
   11fc6:	14 c0       	rjmp	.+40     	; 0x11ff0 <main+0x40a>
			}
		}							  	
		else//BOOT switch is pressed
		{
			lcd_cursor(1,1);
   11fc8:	81 e0       	ldi	r24, 0x01	; 1
   11fca:	61 e0       	ldi	r22, 0x01	; 1
   11fcc:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(ani);
   11fd0:	8e e3       	ldi	r24, 0x3E	; 62
   11fd2:	94 e0       	ldi	r25, 0x04	; 4
   11fd4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			lcd_cursor(2,1);
   11fd8:	82 e0       	ldi	r24, 0x02	; 2
   11fda:	61 e0       	ldi	r22, 0x01	; 1
   11fdc:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(hab);
   11fe0:	85 e8       	ldi	r24, 0x85	; 133
   11fe2:	94 e0       	ldi	r25, 0x04	; 4
   11fe4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			switch_pressed=1;
   11fe8:	81 e0       	ldi	r24, 0x01	; 1
   11fea:	90 e0       	ldi	r25, 0x00	; 0
   11fec:	9e 83       	std	Y+6, r25	; 0x06
   11fee:	8d 83       	std	Y+5, r24	; 0x05
	char animal[]="A1, A2, F1";
	char habit[]="1, 8, 25";
	path_fin=0;
	halt=0;
	defaulty();
	while(!complete)
   11ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
   11ff2:	98 89       	ldd	r25, Y+16	; 0x10
   11ff4:	00 97       	sbiw	r24, 0x00	; 0
   11ff6:	09 f4       	brne	.+2      	; 0x11ffa <main+0x414>
   11ff8:	4a ce       	rjmp	.-876    	; 0x11c8e <main+0xa8>
			lcd_cursor(2,1);
			lcd_string(hab);
			switch_pressed=1;
		}
	}
	buzzer_on();
   11ffa:	0e 94 dc 81 	call	0x103b8	; 0x103b8 <buzzer_on>
   11ffe:	80 e0       	ldi	r24, 0x00	; 0
   12000:	90 e0       	ldi	r25, 0x00	; 0
   12002:	aa ef       	ldi	r26, 0xFA	; 250
   12004:	b4 e4       	ldi	r27, 0x44	; 68
   12006:	8d a3       	lds	r24, 0x5d
   12008:	9e a3       	lds	r25, 0x5e
   1200a:	af a3       	lds	r26, 0x5f
   1200c:	b8 a7       	lds	r27, 0x78
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   1200e:	6d a1       	lds	r22, 0x4d
   12010:	7e a1       	lds	r23, 0x4e
   12012:	8f a1       	lds	r24, 0x4f
   12014:	98 a5       	lds	r25, 0x68
   12016:	26 e6       	ldi	r18, 0x66	; 102
   12018:	36 e6       	ldi	r19, 0x66	; 102
   1201a:	46 e6       	ldi	r20, 0x66	; 102
   1201c:	55 e4       	ldi	r21, 0x45	; 69
   1201e:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   12022:	dc 01       	movw	r26, r24
   12024:	cb 01       	movw	r24, r22
   12026:	89 a7       	lds	r24, 0x79
   12028:	9a a7       	lds	r25, 0x7a
   1202a:	ab a7       	lds	r26, 0x7b
   1202c:	bc a7       	lds	r27, 0x7c
	if (__tmp < 1.0)
   1202e:	11 e0       	ldi	r17, 0x01	; 1
   12030:	69 a5       	lds	r22, 0x69
   12032:	7a a5       	lds	r23, 0x6a
   12034:	8b a5       	lds	r24, 0x6b
   12036:	9c a5       	lds	r25, 0x6c
   12038:	20 e0       	ldi	r18, 0x00	; 0
   1203a:	30 e0       	ldi	r19, 0x00	; 0
   1203c:	40 e8       	ldi	r20, 0x80	; 128
   1203e:	5f e3       	ldi	r21, 0x3F	; 63
   12040:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
   12044:	88 23       	and	r24, r24
   12046:	0c f0       	brlt	.+2      	; 0x1204a <main+0x464>
   12048:	10 e0       	ldi	r17, 0x00	; 0
   1204a:	11 23       	and	r17, r17
   1204c:	29 f0       	breq	.+10     	; 0x12058 <main+0x472>
		__ticks = 1;
   1204e:	81 e0       	ldi	r24, 0x01	; 1
   12050:	90 e0       	ldi	r25, 0x00	; 0
   12052:	9e a7       	lds	r25, 0x7e
   12054:	8d a7       	lds	r24, 0x7d
   12056:	46 c0       	rjmp	.+140    	; 0x120e4 <main+0x4fe>
	else if (__tmp > 65535)
   12058:	11 e0       	ldi	r17, 0x01	; 1
   1205a:	69 a5       	lds	r22, 0x69
   1205c:	7a a5       	lds	r23, 0x6a
   1205e:	8b a5       	lds	r24, 0x6b
   12060:	9c a5       	lds	r25, 0x6c
   12062:	20 e0       	ldi	r18, 0x00	; 0
   12064:	3f ef       	ldi	r19, 0xFF	; 255
   12066:	4f e7       	ldi	r20, 0x7F	; 127
   12068:	57 e4       	ldi	r21, 0x47	; 71
   1206a:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
   1206e:	18 16       	cp	r1, r24
   12070:	0c f0       	brlt	.+2      	; 0x12074 <main+0x48e>
   12072:	10 e0       	ldi	r17, 0x00	; 0
   12074:	11 23       	and	r17, r17
   12076:	61 f1       	breq	.+88     	; 0x120d0 <main+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   12078:	6d a1       	lds	r22, 0x4d
   1207a:	7e a1       	lds	r23, 0x4e
   1207c:	8f a1       	lds	r24, 0x4f
   1207e:	98 a5       	lds	r25, 0x68
   12080:	20 e0       	ldi	r18, 0x00	; 0
   12082:	30 e0       	ldi	r19, 0x00	; 0
   12084:	40 e2       	ldi	r20, 0x20	; 32
   12086:	51 e4       	ldi	r21, 0x41	; 65
   12088:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   1208c:	dc 01       	movw	r26, r24
   1208e:	cb 01       	movw	r24, r22
   12090:	bc 01       	movw	r22, r24
   12092:	cd 01       	movw	r24, r26
   12094:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   12098:	dc 01       	movw	r26, r24
   1209a:	cb 01       	movw	r24, r22
   1209c:	9e a7       	lds	r25, 0x7e
   1209e:	8d a7       	lds	r24, 0x7d
   120a0:	12 c0       	rjmp	.+36     	; 0x120c6 <main+0x4e0>
   120a2:	80 e7       	ldi	r24, 0x70	; 112
   120a4:	91 e0       	ldi	r25, 0x01	; 1
   120a6:	98 ab       	sts	0x58, r25
   120a8:	8f a7       	lds	r24, 0x7f
   120aa:	8f a5       	lds	r24, 0x6f
   120ac:	98 a9       	sts	0x48, r25
   120ae:	8c 01       	movw	r16, r24
   120b0:	c8 01       	movw	r24, r16
   120b2:	01 97       	sbiw	r24, 0x01	; 1
   120b4:	f1 f7       	brne	.-4      	; 0x120b2 <main+0x4cc>
   120b6:	8c 01       	movw	r16, r24
   120b8:	18 ab       	sts	0x58, r17
   120ba:	0f a7       	lds	r16, 0x7f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   120bc:	8d a5       	lds	r24, 0x6d
   120be:	9e a5       	lds	r25, 0x6e
   120c0:	01 97       	sbiw	r24, 0x01	; 1
   120c2:	9e a7       	lds	r25, 0x7e
   120c4:	8d a7       	lds	r24, 0x7d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   120c6:	8d a5       	lds	r24, 0x6d
   120c8:	9e a5       	lds	r25, 0x6e
   120ca:	00 97       	sbiw	r24, 0x00	; 0
   120cc:	51 f7       	brne	.-44     	; 0x120a2 <main+0x4bc>
   120ce:	17 c0       	rjmp	.+46     	; 0x120fe <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   120d0:	69 a5       	lds	r22, 0x69
   120d2:	7a a5       	lds	r23, 0x6a
   120d4:	8b a5       	lds	r24, 0x6b
   120d6:	9c a5       	lds	r25, 0x6c
   120d8:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   120dc:	dc 01       	movw	r26, r24
   120de:	cb 01       	movw	r24, r22
   120e0:	9e a7       	lds	r25, 0x7e
   120e2:	8d a7       	lds	r24, 0x7d
   120e4:	8d a5       	lds	r24, 0x6d
   120e6:	9e a5       	lds	r25, 0x6e
   120e8:	9a ab       	sts	0x5a, r25
   120ea:	89 ab       	sts	0x59, r24
   120ec:	89 a9       	sts	0x49, r24
   120ee:	9a a9       	sts	0x4a, r25
   120f0:	8c 01       	movw	r16, r24
   120f2:	f8 01       	movw	r30, r16
   120f4:	31 97       	sbiw	r30, 0x01	; 1
   120f6:	f1 f7       	brne	.-4      	; 0x120f4 <main+0x50e>
   120f8:	8f 01       	movw	r16, r30
   120fa:	1a ab       	sts	0x5a, r17
   120fc:	09 ab       	sts	0x59, r16
	_delay_ms(2000);
	buzzer_off();
   120fe:	0e 94 f3 81 	call	0x103e6	; 0x103e6 <buzzer_off>
   12102:	80 e0       	ldi	r24, 0x00	; 0
   12104:	90 e0       	ldi	r25, 0x00	; 0
   12106:	aa ef       	ldi	r26, 0xFA	; 250
   12108:	b4 e4       	ldi	r27, 0x44	; 68
   1210a:	8b ab       	sts	0x5b, r24
   1210c:	9c ab       	sts	0x5c, r25
   1210e:	ad ab       	sts	0x5d, r26
   12110:	be ab       	sts	0x5e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   12112:	6b a9       	sts	0x4b, r22
   12114:	7c a9       	sts	0x4c, r23
   12116:	8d a9       	sts	0x4d, r24
   12118:	9e a9       	sts	0x4e, r25
   1211a:	26 e6       	ldi	r18, 0x66	; 102
   1211c:	36 e6       	ldi	r19, 0x66	; 102
   1211e:	46 e6       	ldi	r20, 0x66	; 102
   12120:	55 e4       	ldi	r21, 0x45	; 69
   12122:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   12126:	dc 01       	movw	r26, r24
   12128:	cb 01       	movw	r24, r22
   1212a:	8f ab       	sts	0x5f, r24
   1212c:	98 af       	sts	0x78, r25
   1212e:	a9 af       	sts	0x79, r26
   12130:	ba af       	sts	0x7a, r27
	if (__tmp < 1.0)
   12132:	11 e0       	ldi	r17, 0x01	; 1
   12134:	6f a9       	sts	0x4f, r22
   12136:	78 ad       	sts	0x68, r23
   12138:	89 ad       	sts	0x69, r24
   1213a:	9a ad       	sts	0x6a, r25
   1213c:	20 e0       	ldi	r18, 0x00	; 0
   1213e:	30 e0       	ldi	r19, 0x00	; 0
   12140:	40 e8       	ldi	r20, 0x80	; 128
   12142:	5f e3       	ldi	r21, 0x3F	; 63
   12144:	0e 94 7d 91 	call	0x122fa	; 0x122fa <__cmpsf2>
   12148:	88 23       	and	r24, r24
   1214a:	0c f0       	brlt	.+2      	; 0x1214e <main+0x568>
   1214c:	10 e0       	ldi	r17, 0x00	; 0
   1214e:	11 23       	and	r17, r17
   12150:	29 f0       	breq	.+10     	; 0x1215c <main+0x576>
		__ticks = 1;
   12152:	81 e0       	ldi	r24, 0x01	; 1
   12154:	90 e0       	ldi	r25, 0x00	; 0
   12156:	9c af       	sts	0x7c, r25
   12158:	8b af       	sts	0x7b, r24
   1215a:	46 c0       	rjmp	.+140    	; 0x121e8 <main+0x602>
	else if (__tmp > 65535)
   1215c:	11 e0       	ldi	r17, 0x01	; 1
   1215e:	6f a9       	sts	0x4f, r22
   12160:	78 ad       	sts	0x68, r23
   12162:	89 ad       	sts	0x69, r24
   12164:	9a ad       	sts	0x6a, r25
   12166:	20 e0       	ldi	r18, 0x00	; 0
   12168:	3f ef       	ldi	r19, 0xFF	; 255
   1216a:	4f e7       	ldi	r20, 0x7F	; 127
   1216c:	57 e4       	ldi	r21, 0x47	; 71
   1216e:	0e 94 c7 92 	call	0x1258e	; 0x1258e <__gesf2>
   12172:	18 16       	cp	r1, r24
   12174:	0c f0       	brlt	.+2      	; 0x12178 <main+0x592>
   12176:	10 e0       	ldi	r17, 0x00	; 0
   12178:	11 23       	and	r17, r17
   1217a:	61 f1       	breq	.+88     	; 0x121d4 <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   1217c:	6b a9       	sts	0x4b, r22
   1217e:	7c a9       	sts	0x4c, r23
   12180:	8d a9       	sts	0x4d, r24
   12182:	9e a9       	sts	0x4e, r25
   12184:	20 e0       	ldi	r18, 0x00	; 0
   12186:	30 e0       	ldi	r19, 0x00	; 0
   12188:	40 e2       	ldi	r20, 0x20	; 32
   1218a:	51 e4       	ldi	r21, 0x41	; 65
   1218c:	0e 94 cb 92 	call	0x12596	; 0x12596 <__mulsf3>
   12190:	dc 01       	movw	r26, r24
   12192:	cb 01       	movw	r24, r22
   12194:	bc 01       	movw	r22, r24
   12196:	cd 01       	movw	r24, r26
   12198:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   1219c:	dc 01       	movw	r26, r24
   1219e:	cb 01       	movw	r24, r22
   121a0:	9c af       	sts	0x7c, r25
   121a2:	8b af       	sts	0x7b, r24
   121a4:	12 c0       	rjmp	.+36     	; 0x121ca <main+0x5e4>
   121a6:	80 e7       	ldi	r24, 0x70	; 112
   121a8:	91 e0       	ldi	r25, 0x01	; 1
   121aa:	9e af       	sts	0x7e, r25
   121ac:	8d af       	sts	0x7d, r24
   121ae:	8d ad       	sts	0x6d, r24
   121b0:	9e ad       	sts	0x6e, r25
   121b2:	8c 01       	movw	r16, r24
   121b4:	c8 01       	movw	r24, r16
   121b6:	01 97       	sbiw	r24, 0x01	; 1
   121b8:	f1 f7       	brne	.-4      	; 0x121b6 <main+0x5d0>
   121ba:	8c 01       	movw	r16, r24
   121bc:	1e af       	sts	0x7e, r17
   121be:	0d af       	sts	0x7d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   121c0:	8b ad       	sts	0x6b, r24
   121c2:	9c ad       	sts	0x6c, r25
   121c4:	01 97       	sbiw	r24, 0x01	; 1
   121c6:	9c af       	sts	0x7c, r25
   121c8:	8b af       	sts	0x7b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   121ca:	8b ad       	sts	0x6b, r24
   121cc:	9c ad       	sts	0x6c, r25
   121ce:	00 97       	sbiw	r24, 0x00	; 0
   121d0:	51 f7       	brne	.-44     	; 0x121a6 <main+0x5c0>
   121d2:	20 c0       	rjmp	.+64     	; 0x12214 <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   121d4:	6f a9       	sts	0x4f, r22
   121d6:	78 ad       	sts	0x68, r23
   121d8:	89 ad       	sts	0x69, r24
   121da:	9a ad       	sts	0x6a, r25
   121dc:	0e 94 e9 91 	call	0x123d2	; 0x123d2 <__fixunssfsi>
   121e0:	dc 01       	movw	r26, r24
   121e2:	cb 01       	movw	r24, r22
   121e4:	9c af       	sts	0x7c, r25
   121e6:	8b af       	sts	0x7b, r24
   121e8:	2b ad       	sts	0x6b, r18
   121ea:	3c ad       	sts	0x6c, r19
   121ec:	ce 01       	movw	r24, r28
   121ee:	cf 96       	adiw	r24, 0x3f	; 63
   121f0:	fc 01       	movw	r30, r24
   121f2:	31 83       	std	Z+1, r19	; 0x01
   121f4:	20 83       	st	Z, r18
   121f6:	ce 01       	movw	r24, r28
   121f8:	cf 96       	adiw	r24, 0x3f	; 63
   121fa:	fc 01       	movw	r30, r24
   121fc:	80 81       	ld	r24, Z
   121fe:	91 81       	ldd	r25, Z+1	; 0x01
   12200:	8c 01       	movw	r16, r24
   12202:	c8 01       	movw	r24, r16
   12204:	01 97       	sbiw	r24, 0x01	; 1
   12206:	f1 f7       	brne	.-4      	; 0x12204 <main+0x61e>
   12208:	8c 01       	movw	r16, r24
   1220a:	ce 01       	movw	r24, r28
   1220c:	cf 96       	adiw	r24, 0x3f	; 63
   1220e:	fc 01       	movw	r30, r24
   12210:	11 83       	std	Z+1, r17	; 0x01
   12212:	00 83       	st	Z, r16
   12214:	80 e0       	ldi	r24, 0x00	; 0
   12216:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(2000);
	
   12218:	c6 5a       	subi	r28, 0xA6	; 166
   1221a:	df 4f       	sbci	r29, 0xFF	; 255
   1221c:	0f b6       	in	r0, 0x3f	; 63
   1221e:	f8 94       	cli
   12220:	de bf       	out	0x3e, r29	; 62
   12222:	0f be       	out	0x3f, r0	; 63
   12224:	cd bf       	out	0x3d, r28	; 61
   12226:	df 91       	pop	r29
   12228:	cf 91       	pop	r28
   1222a:	1f 91       	pop	r17
   1222c:	0f 91       	pop	r16
   1222e:	08 95       	ret

00012230 <__subsf3>:
   12230:	50 58       	subi	r21, 0x80	; 128

00012232 <__addsf3>:
   12232:	bb 27       	eor	r27, r27
   12234:	aa 27       	eor	r26, r26
   12236:	0e d0       	rcall	.+28     	; 0x12254 <__addsf3x>
   12238:	70 c1       	rjmp	.+736    	; 0x1251a <__fp_round>
   1223a:	61 d1       	rcall	.+706    	; 0x124fe <__fp_pscA>
   1223c:	30 f0       	brcs	.+12     	; 0x1224a <__addsf3+0x18>
   1223e:	66 d1       	rcall	.+716    	; 0x1250c <__fp_pscB>
   12240:	20 f0       	brcs	.+8      	; 0x1224a <__addsf3+0x18>
   12242:	31 f4       	brne	.+12     	; 0x12250 <__addsf3+0x1e>
   12244:	9f 3f       	cpi	r25, 0xFF	; 255
   12246:	11 f4       	brne	.+4      	; 0x1224c <__addsf3+0x1a>
   12248:	1e f4       	brtc	.+6      	; 0x12250 <__addsf3+0x1e>
   1224a:	56 c1       	rjmp	.+684    	; 0x124f8 <__fp_nan>
   1224c:	0e f4       	brtc	.+2      	; 0x12250 <__addsf3+0x1e>
   1224e:	e0 95       	com	r30
   12250:	e7 fb       	bst	r30, 7
   12252:	4c c1       	rjmp	.+664    	; 0x124ec <__fp_inf>

00012254 <__addsf3x>:
   12254:	e9 2f       	mov	r30, r25
   12256:	72 d1       	rcall	.+740    	; 0x1253c <__fp_split3>
   12258:	80 f3       	brcs	.-32     	; 0x1223a <__addsf3+0x8>
   1225a:	ba 17       	cp	r27, r26
   1225c:	62 07       	cpc	r22, r18
   1225e:	73 07       	cpc	r23, r19
   12260:	84 07       	cpc	r24, r20
   12262:	95 07       	cpc	r25, r21
   12264:	18 f0       	brcs	.+6      	; 0x1226c <__addsf3x+0x18>
   12266:	71 f4       	brne	.+28     	; 0x12284 <__addsf3x+0x30>
   12268:	9e f5       	brtc	.+102    	; 0x122d0 <__addsf3x+0x7c>
   1226a:	8a c1       	rjmp	.+788    	; 0x12580 <__fp_zero>
   1226c:	0e f4       	brtc	.+2      	; 0x12270 <__addsf3x+0x1c>
   1226e:	e0 95       	com	r30
   12270:	0b 2e       	mov	r0, r27
   12272:	ba 2f       	mov	r27, r26
   12274:	a0 2d       	mov	r26, r0
   12276:	0b 01       	movw	r0, r22
   12278:	b9 01       	movw	r22, r18
   1227a:	90 01       	movw	r18, r0
   1227c:	0c 01       	movw	r0, r24
   1227e:	ca 01       	movw	r24, r20
   12280:	a0 01       	movw	r20, r0
   12282:	11 24       	eor	r1, r1
   12284:	ff 27       	eor	r31, r31
   12286:	59 1b       	sub	r21, r25
   12288:	99 f0       	breq	.+38     	; 0x122b0 <__addsf3x+0x5c>
   1228a:	59 3f       	cpi	r21, 0xF9	; 249
   1228c:	50 f4       	brcc	.+20     	; 0x122a2 <__addsf3x+0x4e>
   1228e:	50 3e       	cpi	r21, 0xE0	; 224
   12290:	68 f1       	brcs	.+90     	; 0x122ec <__addsf3x+0x98>
   12292:	1a 16       	cp	r1, r26
   12294:	f0 40       	sbci	r31, 0x00	; 0
   12296:	a2 2f       	mov	r26, r18
   12298:	23 2f       	mov	r18, r19
   1229a:	34 2f       	mov	r19, r20
   1229c:	44 27       	eor	r20, r20
   1229e:	58 5f       	subi	r21, 0xF8	; 248
   122a0:	f3 cf       	rjmp	.-26     	; 0x12288 <__addsf3x+0x34>
   122a2:	46 95       	lsr	r20
   122a4:	37 95       	ror	r19
   122a6:	27 95       	ror	r18
   122a8:	a7 95       	ror	r26
   122aa:	f0 40       	sbci	r31, 0x00	; 0
   122ac:	53 95       	inc	r21
   122ae:	c9 f7       	brne	.-14     	; 0x122a2 <__addsf3x+0x4e>
   122b0:	7e f4       	brtc	.+30     	; 0x122d0 <__addsf3x+0x7c>
   122b2:	1f 16       	cp	r1, r31
   122b4:	ba 0b       	sbc	r27, r26
   122b6:	62 0b       	sbc	r22, r18
   122b8:	73 0b       	sbc	r23, r19
   122ba:	84 0b       	sbc	r24, r20
   122bc:	ba f0       	brmi	.+46     	; 0x122ec <__addsf3x+0x98>
   122be:	91 50       	subi	r25, 0x01	; 1
   122c0:	a1 f0       	breq	.+40     	; 0x122ea <__addsf3x+0x96>
   122c2:	ff 0f       	add	r31, r31
   122c4:	bb 1f       	adc	r27, r27
   122c6:	66 1f       	adc	r22, r22
   122c8:	77 1f       	adc	r23, r23
   122ca:	88 1f       	adc	r24, r24
   122cc:	c2 f7       	brpl	.-16     	; 0x122be <__addsf3x+0x6a>
   122ce:	0e c0       	rjmp	.+28     	; 0x122ec <__addsf3x+0x98>
   122d0:	ba 0f       	add	r27, r26
   122d2:	62 1f       	adc	r22, r18
   122d4:	73 1f       	adc	r23, r19
   122d6:	84 1f       	adc	r24, r20
   122d8:	48 f4       	brcc	.+18     	; 0x122ec <__addsf3x+0x98>
   122da:	87 95       	ror	r24
   122dc:	77 95       	ror	r23
   122de:	67 95       	ror	r22
   122e0:	b7 95       	ror	r27
   122e2:	f7 95       	ror	r31
   122e4:	9e 3f       	cpi	r25, 0xFE	; 254
   122e6:	08 f0       	brcs	.+2      	; 0x122ea <__addsf3x+0x96>
   122e8:	b3 cf       	rjmp	.-154    	; 0x12250 <__addsf3+0x1e>
   122ea:	93 95       	inc	r25
   122ec:	88 0f       	add	r24, r24
   122ee:	08 f0       	brcs	.+2      	; 0x122f2 <__addsf3x+0x9e>
   122f0:	99 27       	eor	r25, r25
   122f2:	ee 0f       	add	r30, r30
   122f4:	97 95       	ror	r25
   122f6:	87 95       	ror	r24
   122f8:	08 95       	ret

000122fa <__cmpsf2>:
   122fa:	d4 d0       	rcall	.+424    	; 0x124a4 <__fp_cmp>
   122fc:	08 f4       	brcc	.+2      	; 0x12300 <__cmpsf2+0x6>
   122fe:	81 e0       	ldi	r24, 0x01	; 1
   12300:	08 95       	ret

00012302 <__divsf3>:
   12302:	0c d0       	rcall	.+24     	; 0x1231c <__divsf3x>
   12304:	0a c1       	rjmp	.+532    	; 0x1251a <__fp_round>
   12306:	02 d1       	rcall	.+516    	; 0x1250c <__fp_pscB>
   12308:	40 f0       	brcs	.+16     	; 0x1231a <__divsf3+0x18>
   1230a:	f9 d0       	rcall	.+498    	; 0x124fe <__fp_pscA>
   1230c:	30 f0       	brcs	.+12     	; 0x1231a <__divsf3+0x18>
   1230e:	21 f4       	brne	.+8      	; 0x12318 <__divsf3+0x16>
   12310:	5f 3f       	cpi	r21, 0xFF	; 255
   12312:	19 f0       	breq	.+6      	; 0x1231a <__divsf3+0x18>
   12314:	eb c0       	rjmp	.+470    	; 0x124ec <__fp_inf>
   12316:	51 11       	cpse	r21, r1
   12318:	34 c1       	rjmp	.+616    	; 0x12582 <__fp_szero>
   1231a:	ee c0       	rjmp	.+476    	; 0x124f8 <__fp_nan>

0001231c <__divsf3x>:
   1231c:	0f d1       	rcall	.+542    	; 0x1253c <__fp_split3>
   1231e:	98 f3       	brcs	.-26     	; 0x12306 <__divsf3+0x4>

00012320 <__divsf3_pse>:
   12320:	99 23       	and	r25, r25
   12322:	c9 f3       	breq	.-14     	; 0x12316 <__divsf3+0x14>
   12324:	55 23       	and	r21, r21
   12326:	b1 f3       	breq	.-20     	; 0x12314 <__divsf3+0x12>
   12328:	95 1b       	sub	r25, r21
   1232a:	55 0b       	sbc	r21, r21
   1232c:	bb 27       	eor	r27, r27
   1232e:	aa 27       	eor	r26, r26
   12330:	62 17       	cp	r22, r18
   12332:	73 07       	cpc	r23, r19
   12334:	84 07       	cpc	r24, r20
   12336:	38 f0       	brcs	.+14     	; 0x12346 <__divsf3_pse+0x26>
   12338:	9f 5f       	subi	r25, 0xFF	; 255
   1233a:	5f 4f       	sbci	r21, 0xFF	; 255
   1233c:	22 0f       	add	r18, r18
   1233e:	33 1f       	adc	r19, r19
   12340:	44 1f       	adc	r20, r20
   12342:	aa 1f       	adc	r26, r26
   12344:	a9 f3       	breq	.-22     	; 0x12330 <__divsf3_pse+0x10>
   12346:	33 d0       	rcall	.+102    	; 0x123ae <__divsf3_pse+0x8e>
   12348:	0e 2e       	mov	r0, r30
   1234a:	3a f0       	brmi	.+14     	; 0x1235a <__divsf3_pse+0x3a>
   1234c:	e0 e8       	ldi	r30, 0x80	; 128
   1234e:	30 d0       	rcall	.+96     	; 0x123b0 <__divsf3_pse+0x90>
   12350:	91 50       	subi	r25, 0x01	; 1
   12352:	50 40       	sbci	r21, 0x00	; 0
   12354:	e6 95       	lsr	r30
   12356:	00 1c       	adc	r0, r0
   12358:	ca f7       	brpl	.-14     	; 0x1234c <__divsf3_pse+0x2c>
   1235a:	29 d0       	rcall	.+82     	; 0x123ae <__divsf3_pse+0x8e>
   1235c:	fe 2f       	mov	r31, r30
   1235e:	27 d0       	rcall	.+78     	; 0x123ae <__divsf3_pse+0x8e>
   12360:	66 0f       	add	r22, r22
   12362:	77 1f       	adc	r23, r23
   12364:	88 1f       	adc	r24, r24
   12366:	bb 1f       	adc	r27, r27
   12368:	26 17       	cp	r18, r22
   1236a:	37 07       	cpc	r19, r23
   1236c:	48 07       	cpc	r20, r24
   1236e:	ab 07       	cpc	r26, r27
   12370:	b0 e8       	ldi	r27, 0x80	; 128
   12372:	09 f0       	breq	.+2      	; 0x12376 <__divsf3_pse+0x56>
   12374:	bb 0b       	sbc	r27, r27
   12376:	80 2d       	mov	r24, r0
   12378:	bf 01       	movw	r22, r30
   1237a:	ff 27       	eor	r31, r31
   1237c:	93 58       	subi	r25, 0x83	; 131
   1237e:	5f 4f       	sbci	r21, 0xFF	; 255
   12380:	2a f0       	brmi	.+10     	; 0x1238c <__divsf3_pse+0x6c>
   12382:	9e 3f       	cpi	r25, 0xFE	; 254
   12384:	51 05       	cpc	r21, r1
   12386:	68 f0       	brcs	.+26     	; 0x123a2 <__divsf3_pse+0x82>
   12388:	b1 c0       	rjmp	.+354    	; 0x124ec <__fp_inf>
   1238a:	fb c0       	rjmp	.+502    	; 0x12582 <__fp_szero>
   1238c:	5f 3f       	cpi	r21, 0xFF	; 255
   1238e:	ec f3       	brlt	.-6      	; 0x1238a <__divsf3_pse+0x6a>
   12390:	98 3e       	cpi	r25, 0xE8	; 232
   12392:	dc f3       	brlt	.-10     	; 0x1238a <__divsf3_pse+0x6a>
   12394:	86 95       	lsr	r24
   12396:	77 95       	ror	r23
   12398:	67 95       	ror	r22
   1239a:	b7 95       	ror	r27
   1239c:	f7 95       	ror	r31
   1239e:	9f 5f       	subi	r25, 0xFF	; 255
   123a0:	c9 f7       	brne	.-14     	; 0x12394 <__divsf3_pse+0x74>
   123a2:	88 0f       	add	r24, r24
   123a4:	91 1d       	adc	r25, r1
   123a6:	96 95       	lsr	r25
   123a8:	87 95       	ror	r24
   123aa:	97 f9       	bld	r25, 7
   123ac:	08 95       	ret
   123ae:	e1 e0       	ldi	r30, 0x01	; 1
   123b0:	66 0f       	add	r22, r22
   123b2:	77 1f       	adc	r23, r23
   123b4:	88 1f       	adc	r24, r24
   123b6:	bb 1f       	adc	r27, r27
   123b8:	62 17       	cp	r22, r18
   123ba:	73 07       	cpc	r23, r19
   123bc:	84 07       	cpc	r24, r20
   123be:	ba 07       	cpc	r27, r26
   123c0:	20 f0       	brcs	.+8      	; 0x123ca <__divsf3_pse+0xaa>
   123c2:	62 1b       	sub	r22, r18
   123c4:	73 0b       	sbc	r23, r19
   123c6:	84 0b       	sbc	r24, r20
   123c8:	ba 0b       	sbc	r27, r26
   123ca:	ee 1f       	adc	r30, r30
   123cc:	88 f7       	brcc	.-30     	; 0x123b0 <__divsf3_pse+0x90>
   123ce:	e0 95       	com	r30
   123d0:	08 95       	ret

000123d2 <__fixunssfsi>:
   123d2:	bc d0       	rcall	.+376    	; 0x1254c <__fp_splitA>
   123d4:	88 f0       	brcs	.+34     	; 0x123f8 <__fixunssfsi+0x26>
   123d6:	9f 57       	subi	r25, 0x7F	; 127
   123d8:	90 f0       	brcs	.+36     	; 0x123fe <__fixunssfsi+0x2c>
   123da:	b9 2f       	mov	r27, r25
   123dc:	99 27       	eor	r25, r25
   123de:	b7 51       	subi	r27, 0x17	; 23
   123e0:	a0 f0       	brcs	.+40     	; 0x1240a <__fixunssfsi+0x38>
   123e2:	d1 f0       	breq	.+52     	; 0x12418 <__fixunssfsi+0x46>
   123e4:	66 0f       	add	r22, r22
   123e6:	77 1f       	adc	r23, r23
   123e8:	88 1f       	adc	r24, r24
   123ea:	99 1f       	adc	r25, r25
   123ec:	1a f0       	brmi	.+6      	; 0x123f4 <__fixunssfsi+0x22>
   123ee:	ba 95       	dec	r27
   123f0:	c9 f7       	brne	.-14     	; 0x123e4 <__fixunssfsi+0x12>
   123f2:	12 c0       	rjmp	.+36     	; 0x12418 <__fixunssfsi+0x46>
   123f4:	b1 30       	cpi	r27, 0x01	; 1
   123f6:	81 f0       	breq	.+32     	; 0x12418 <__fixunssfsi+0x46>
   123f8:	c3 d0       	rcall	.+390    	; 0x12580 <__fp_zero>
   123fa:	b1 e0       	ldi	r27, 0x01	; 1
   123fc:	08 95       	ret
   123fe:	c0 c0       	rjmp	.+384    	; 0x12580 <__fp_zero>
   12400:	67 2f       	mov	r22, r23
   12402:	78 2f       	mov	r23, r24
   12404:	88 27       	eor	r24, r24
   12406:	b8 5f       	subi	r27, 0xF8	; 248
   12408:	39 f0       	breq	.+14     	; 0x12418 <__fixunssfsi+0x46>
   1240a:	b9 3f       	cpi	r27, 0xF9	; 249
   1240c:	cc f3       	brlt	.-14     	; 0x12400 <__fixunssfsi+0x2e>
   1240e:	86 95       	lsr	r24
   12410:	77 95       	ror	r23
   12412:	67 95       	ror	r22
   12414:	b3 95       	inc	r27
   12416:	d9 f7       	brne	.-10     	; 0x1240e <__fixunssfsi+0x3c>
   12418:	3e f4       	brtc	.+14     	; 0x12428 <__fixunssfsi+0x56>
   1241a:	90 95       	com	r25
   1241c:	80 95       	com	r24
   1241e:	70 95       	com	r23
   12420:	61 95       	neg	r22
   12422:	7f 4f       	sbci	r23, 0xFF	; 255
   12424:	8f 4f       	sbci	r24, 0xFF	; 255
   12426:	9f 4f       	sbci	r25, 0xFF	; 255
   12428:	08 95       	ret

0001242a <__floatunsisf>:
   1242a:	e8 94       	clt
   1242c:	09 c0       	rjmp	.+18     	; 0x12440 <__floatsisf+0x12>

0001242e <__floatsisf>:
   1242e:	97 fb       	bst	r25, 7
   12430:	3e f4       	brtc	.+14     	; 0x12440 <__floatsisf+0x12>
   12432:	90 95       	com	r25
   12434:	80 95       	com	r24
   12436:	70 95       	com	r23
   12438:	61 95       	neg	r22
   1243a:	7f 4f       	sbci	r23, 0xFF	; 255
   1243c:	8f 4f       	sbci	r24, 0xFF	; 255
   1243e:	9f 4f       	sbci	r25, 0xFF	; 255
   12440:	99 23       	and	r25, r25
   12442:	a9 f0       	breq	.+42     	; 0x1246e <__floatsisf+0x40>
   12444:	f9 2f       	mov	r31, r25
   12446:	96 e9       	ldi	r25, 0x96	; 150
   12448:	bb 27       	eor	r27, r27
   1244a:	93 95       	inc	r25
   1244c:	f6 95       	lsr	r31
   1244e:	87 95       	ror	r24
   12450:	77 95       	ror	r23
   12452:	67 95       	ror	r22
   12454:	b7 95       	ror	r27
   12456:	f1 11       	cpse	r31, r1
   12458:	f8 cf       	rjmp	.-16     	; 0x1244a <__floatsisf+0x1c>
   1245a:	fa f4       	brpl	.+62     	; 0x1249a <__floatsisf+0x6c>
   1245c:	bb 0f       	add	r27, r27
   1245e:	11 f4       	brne	.+4      	; 0x12464 <__floatsisf+0x36>
   12460:	60 ff       	sbrs	r22, 0
   12462:	1b c0       	rjmp	.+54     	; 0x1249a <__floatsisf+0x6c>
   12464:	6f 5f       	subi	r22, 0xFF	; 255
   12466:	7f 4f       	sbci	r23, 0xFF	; 255
   12468:	8f 4f       	sbci	r24, 0xFF	; 255
   1246a:	9f 4f       	sbci	r25, 0xFF	; 255
   1246c:	16 c0       	rjmp	.+44     	; 0x1249a <__floatsisf+0x6c>
   1246e:	88 23       	and	r24, r24
   12470:	11 f0       	breq	.+4      	; 0x12476 <__floatsisf+0x48>
   12472:	96 e9       	ldi	r25, 0x96	; 150
   12474:	11 c0       	rjmp	.+34     	; 0x12498 <__floatsisf+0x6a>
   12476:	77 23       	and	r23, r23
   12478:	21 f0       	breq	.+8      	; 0x12482 <__floatsisf+0x54>
   1247a:	9e e8       	ldi	r25, 0x8E	; 142
   1247c:	87 2f       	mov	r24, r23
   1247e:	76 2f       	mov	r23, r22
   12480:	05 c0       	rjmp	.+10     	; 0x1248c <__floatsisf+0x5e>
   12482:	66 23       	and	r22, r22
   12484:	71 f0       	breq	.+28     	; 0x124a2 <__floatsisf+0x74>
   12486:	96 e8       	ldi	r25, 0x86	; 134
   12488:	86 2f       	mov	r24, r22
   1248a:	70 e0       	ldi	r23, 0x00	; 0
   1248c:	60 e0       	ldi	r22, 0x00	; 0
   1248e:	2a f0       	brmi	.+10     	; 0x1249a <__floatsisf+0x6c>
   12490:	9a 95       	dec	r25
   12492:	66 0f       	add	r22, r22
   12494:	77 1f       	adc	r23, r23
   12496:	88 1f       	adc	r24, r24
   12498:	da f7       	brpl	.-10     	; 0x12490 <__floatsisf+0x62>
   1249a:	88 0f       	add	r24, r24
   1249c:	96 95       	lsr	r25
   1249e:	87 95       	ror	r24
   124a0:	97 f9       	bld	r25, 7
   124a2:	08 95       	ret

000124a4 <__fp_cmp>:
   124a4:	99 0f       	add	r25, r25
   124a6:	00 08       	sbc	r0, r0
   124a8:	55 0f       	add	r21, r21
   124aa:	aa 0b       	sbc	r26, r26
   124ac:	e0 e8       	ldi	r30, 0x80	; 128
   124ae:	fe ef       	ldi	r31, 0xFE	; 254
   124b0:	16 16       	cp	r1, r22
   124b2:	17 06       	cpc	r1, r23
   124b4:	e8 07       	cpc	r30, r24
   124b6:	f9 07       	cpc	r31, r25
   124b8:	c0 f0       	brcs	.+48     	; 0x124ea <__fp_cmp+0x46>
   124ba:	12 16       	cp	r1, r18
   124bc:	13 06       	cpc	r1, r19
   124be:	e4 07       	cpc	r30, r20
   124c0:	f5 07       	cpc	r31, r21
   124c2:	98 f0       	brcs	.+38     	; 0x124ea <__fp_cmp+0x46>
   124c4:	62 1b       	sub	r22, r18
   124c6:	73 0b       	sbc	r23, r19
   124c8:	84 0b       	sbc	r24, r20
   124ca:	95 0b       	sbc	r25, r21
   124cc:	39 f4       	brne	.+14     	; 0x124dc <__fp_cmp+0x38>
   124ce:	0a 26       	eor	r0, r26
   124d0:	61 f0       	breq	.+24     	; 0x124ea <__fp_cmp+0x46>
   124d2:	23 2b       	or	r18, r19
   124d4:	24 2b       	or	r18, r20
   124d6:	25 2b       	or	r18, r21
   124d8:	21 f4       	brne	.+8      	; 0x124e2 <__fp_cmp+0x3e>
   124da:	08 95       	ret
   124dc:	0a 26       	eor	r0, r26
   124de:	09 f4       	brne	.+2      	; 0x124e2 <__fp_cmp+0x3e>
   124e0:	a1 40       	sbci	r26, 0x01	; 1
   124e2:	a6 95       	lsr	r26
   124e4:	8f ef       	ldi	r24, 0xFF	; 255
   124e6:	81 1d       	adc	r24, r1
   124e8:	81 1d       	adc	r24, r1
   124ea:	08 95       	ret

000124ec <__fp_inf>:
   124ec:	97 f9       	bld	r25, 7
   124ee:	9f 67       	ori	r25, 0x7F	; 127
   124f0:	80 e8       	ldi	r24, 0x80	; 128
   124f2:	70 e0       	ldi	r23, 0x00	; 0
   124f4:	60 e0       	ldi	r22, 0x00	; 0
   124f6:	08 95       	ret

000124f8 <__fp_nan>:
   124f8:	9f ef       	ldi	r25, 0xFF	; 255
   124fa:	80 ec       	ldi	r24, 0xC0	; 192
   124fc:	08 95       	ret

000124fe <__fp_pscA>:
   124fe:	00 24       	eor	r0, r0
   12500:	0a 94       	dec	r0
   12502:	16 16       	cp	r1, r22
   12504:	17 06       	cpc	r1, r23
   12506:	18 06       	cpc	r1, r24
   12508:	09 06       	cpc	r0, r25
   1250a:	08 95       	ret

0001250c <__fp_pscB>:
   1250c:	00 24       	eor	r0, r0
   1250e:	0a 94       	dec	r0
   12510:	12 16       	cp	r1, r18
   12512:	13 06       	cpc	r1, r19
   12514:	14 06       	cpc	r1, r20
   12516:	05 06       	cpc	r0, r21
   12518:	08 95       	ret

0001251a <__fp_round>:
   1251a:	09 2e       	mov	r0, r25
   1251c:	03 94       	inc	r0
   1251e:	00 0c       	add	r0, r0
   12520:	11 f4       	brne	.+4      	; 0x12526 <__fp_round+0xc>
   12522:	88 23       	and	r24, r24
   12524:	52 f0       	brmi	.+20     	; 0x1253a <__fp_round+0x20>
   12526:	bb 0f       	add	r27, r27
   12528:	40 f4       	brcc	.+16     	; 0x1253a <__fp_round+0x20>
   1252a:	bf 2b       	or	r27, r31
   1252c:	11 f4       	brne	.+4      	; 0x12532 <__fp_round+0x18>
   1252e:	60 ff       	sbrs	r22, 0
   12530:	04 c0       	rjmp	.+8      	; 0x1253a <__fp_round+0x20>
   12532:	6f 5f       	subi	r22, 0xFF	; 255
   12534:	7f 4f       	sbci	r23, 0xFF	; 255
   12536:	8f 4f       	sbci	r24, 0xFF	; 255
   12538:	9f 4f       	sbci	r25, 0xFF	; 255
   1253a:	08 95       	ret

0001253c <__fp_split3>:
   1253c:	57 fd       	sbrc	r21, 7
   1253e:	90 58       	subi	r25, 0x80	; 128
   12540:	44 0f       	add	r20, r20
   12542:	55 1f       	adc	r21, r21
   12544:	59 f0       	breq	.+22     	; 0x1255c <__fp_splitA+0x10>
   12546:	5f 3f       	cpi	r21, 0xFF	; 255
   12548:	71 f0       	breq	.+28     	; 0x12566 <__fp_splitA+0x1a>
   1254a:	47 95       	ror	r20

0001254c <__fp_splitA>:
   1254c:	88 0f       	add	r24, r24
   1254e:	97 fb       	bst	r25, 7
   12550:	99 1f       	adc	r25, r25
   12552:	61 f0       	breq	.+24     	; 0x1256c <__fp_splitA+0x20>
   12554:	9f 3f       	cpi	r25, 0xFF	; 255
   12556:	79 f0       	breq	.+30     	; 0x12576 <__fp_splitA+0x2a>
   12558:	87 95       	ror	r24
   1255a:	08 95       	ret
   1255c:	12 16       	cp	r1, r18
   1255e:	13 06       	cpc	r1, r19
   12560:	14 06       	cpc	r1, r20
   12562:	55 1f       	adc	r21, r21
   12564:	f2 cf       	rjmp	.-28     	; 0x1254a <__fp_split3+0xe>
   12566:	46 95       	lsr	r20
   12568:	f1 df       	rcall	.-30     	; 0x1254c <__fp_splitA>
   1256a:	08 c0       	rjmp	.+16     	; 0x1257c <__fp_splitA+0x30>
   1256c:	16 16       	cp	r1, r22
   1256e:	17 06       	cpc	r1, r23
   12570:	18 06       	cpc	r1, r24
   12572:	99 1f       	adc	r25, r25
   12574:	f1 cf       	rjmp	.-30     	; 0x12558 <__fp_splitA+0xc>
   12576:	86 95       	lsr	r24
   12578:	71 05       	cpc	r23, r1
   1257a:	61 05       	cpc	r22, r1
   1257c:	08 94       	sec
   1257e:	08 95       	ret

00012580 <__fp_zero>:
   12580:	e8 94       	clt

00012582 <__fp_szero>:
   12582:	bb 27       	eor	r27, r27
   12584:	66 27       	eor	r22, r22
   12586:	77 27       	eor	r23, r23
   12588:	cb 01       	movw	r24, r22
   1258a:	97 f9       	bld	r25, 7
   1258c:	08 95       	ret

0001258e <__gesf2>:
   1258e:	8a df       	rcall	.-236    	; 0x124a4 <__fp_cmp>
   12590:	08 f4       	brcc	.+2      	; 0x12594 <__gesf2+0x6>
   12592:	8f ef       	ldi	r24, 0xFF	; 255
   12594:	08 95       	ret

00012596 <__mulsf3>:
   12596:	0b d0       	rcall	.+22     	; 0x125ae <__mulsf3x>
   12598:	c0 cf       	rjmp	.-128    	; 0x1251a <__fp_round>
   1259a:	b1 df       	rcall	.-158    	; 0x124fe <__fp_pscA>
   1259c:	28 f0       	brcs	.+10     	; 0x125a8 <__mulsf3+0x12>
   1259e:	b6 df       	rcall	.-148    	; 0x1250c <__fp_pscB>
   125a0:	18 f0       	brcs	.+6      	; 0x125a8 <__mulsf3+0x12>
   125a2:	95 23       	and	r25, r21
   125a4:	09 f0       	breq	.+2      	; 0x125a8 <__mulsf3+0x12>
   125a6:	a2 cf       	rjmp	.-188    	; 0x124ec <__fp_inf>
   125a8:	a7 cf       	rjmp	.-178    	; 0x124f8 <__fp_nan>
   125aa:	11 24       	eor	r1, r1
   125ac:	ea cf       	rjmp	.-44     	; 0x12582 <__fp_szero>

000125ae <__mulsf3x>:
   125ae:	c6 df       	rcall	.-116    	; 0x1253c <__fp_split3>
   125b0:	a0 f3       	brcs	.-24     	; 0x1259a <__mulsf3+0x4>

000125b2 <__mulsf3_pse>:
   125b2:	95 9f       	mul	r25, r21
   125b4:	d1 f3       	breq	.-12     	; 0x125aa <__mulsf3+0x14>
   125b6:	95 0f       	add	r25, r21
   125b8:	50 e0       	ldi	r21, 0x00	; 0
   125ba:	55 1f       	adc	r21, r21
   125bc:	62 9f       	mul	r22, r18
   125be:	f0 01       	movw	r30, r0
   125c0:	72 9f       	mul	r23, r18
   125c2:	bb 27       	eor	r27, r27
   125c4:	f0 0d       	add	r31, r0
   125c6:	b1 1d       	adc	r27, r1
   125c8:	63 9f       	mul	r22, r19
   125ca:	aa 27       	eor	r26, r26
   125cc:	f0 0d       	add	r31, r0
   125ce:	b1 1d       	adc	r27, r1
   125d0:	aa 1f       	adc	r26, r26
   125d2:	64 9f       	mul	r22, r20
   125d4:	66 27       	eor	r22, r22
   125d6:	b0 0d       	add	r27, r0
   125d8:	a1 1d       	adc	r26, r1
   125da:	66 1f       	adc	r22, r22
   125dc:	82 9f       	mul	r24, r18
   125de:	22 27       	eor	r18, r18
   125e0:	b0 0d       	add	r27, r0
   125e2:	a1 1d       	adc	r26, r1
   125e4:	62 1f       	adc	r22, r18
   125e6:	73 9f       	mul	r23, r19
   125e8:	b0 0d       	add	r27, r0
   125ea:	a1 1d       	adc	r26, r1
   125ec:	62 1f       	adc	r22, r18
   125ee:	83 9f       	mul	r24, r19
   125f0:	a0 0d       	add	r26, r0
   125f2:	61 1d       	adc	r22, r1
   125f4:	22 1f       	adc	r18, r18
   125f6:	74 9f       	mul	r23, r20
   125f8:	33 27       	eor	r19, r19
   125fa:	a0 0d       	add	r26, r0
   125fc:	61 1d       	adc	r22, r1
   125fe:	23 1f       	adc	r18, r19
   12600:	84 9f       	mul	r24, r20
   12602:	60 0d       	add	r22, r0
   12604:	21 1d       	adc	r18, r1
   12606:	82 2f       	mov	r24, r18
   12608:	76 2f       	mov	r23, r22
   1260a:	6a 2f       	mov	r22, r26
   1260c:	11 24       	eor	r1, r1
   1260e:	9f 57       	subi	r25, 0x7F	; 127
   12610:	50 40       	sbci	r21, 0x00	; 0
   12612:	8a f0       	brmi	.+34     	; 0x12636 <__mulsf3_pse+0x84>
   12614:	e1 f0       	breq	.+56     	; 0x1264e <__mulsf3_pse+0x9c>
   12616:	88 23       	and	r24, r24
   12618:	4a f0       	brmi	.+18     	; 0x1262c <__mulsf3_pse+0x7a>
   1261a:	ee 0f       	add	r30, r30
   1261c:	ff 1f       	adc	r31, r31
   1261e:	bb 1f       	adc	r27, r27
   12620:	66 1f       	adc	r22, r22
   12622:	77 1f       	adc	r23, r23
   12624:	88 1f       	adc	r24, r24
   12626:	91 50       	subi	r25, 0x01	; 1
   12628:	50 40       	sbci	r21, 0x00	; 0
   1262a:	a9 f7       	brne	.-22     	; 0x12616 <__mulsf3_pse+0x64>
   1262c:	9e 3f       	cpi	r25, 0xFE	; 254
   1262e:	51 05       	cpc	r21, r1
   12630:	70 f0       	brcs	.+28     	; 0x1264e <__mulsf3_pse+0x9c>
   12632:	5c cf       	rjmp	.-328    	; 0x124ec <__fp_inf>
   12634:	a6 cf       	rjmp	.-180    	; 0x12582 <__fp_szero>
   12636:	5f 3f       	cpi	r21, 0xFF	; 255
   12638:	ec f3       	brlt	.-6      	; 0x12634 <__mulsf3_pse+0x82>
   1263a:	98 3e       	cpi	r25, 0xE8	; 232
   1263c:	dc f3       	brlt	.-10     	; 0x12634 <__mulsf3_pse+0x82>
   1263e:	86 95       	lsr	r24
   12640:	77 95       	ror	r23
   12642:	67 95       	ror	r22
   12644:	b7 95       	ror	r27
   12646:	f7 95       	ror	r31
   12648:	e7 95       	ror	r30
   1264a:	9f 5f       	subi	r25, 0xFF	; 255
   1264c:	c1 f7       	brne	.-16     	; 0x1263e <__mulsf3_pse+0x8c>
   1264e:	fe 2b       	or	r31, r30
   12650:	88 0f       	add	r24, r24
   12652:	91 1d       	adc	r25, r1
   12654:	96 95       	lsr	r25
   12656:	87 95       	ror	r24
   12658:	97 f9       	bld	r25, 7
   1265a:	08 95       	ret

0001265c <__udivmodhi4>:
   1265c:	aa 1b       	sub	r26, r26
   1265e:	bb 1b       	sub	r27, r27
   12660:	51 e1       	ldi	r21, 0x11	; 17
   12662:	07 c0       	rjmp	.+14     	; 0x12672 <__udivmodhi4_ep>

00012664 <__udivmodhi4_loop>:
   12664:	aa 1f       	adc	r26, r26
   12666:	bb 1f       	adc	r27, r27
   12668:	a6 17       	cp	r26, r22
   1266a:	b7 07       	cpc	r27, r23
   1266c:	10 f0       	brcs	.+4      	; 0x12672 <__udivmodhi4_ep>
   1266e:	a6 1b       	sub	r26, r22
   12670:	b7 0b       	sbc	r27, r23

00012672 <__udivmodhi4_ep>:
   12672:	88 1f       	adc	r24, r24
   12674:	99 1f       	adc	r25, r25
   12676:	5a 95       	dec	r21
   12678:	a9 f7       	brne	.-22     	; 0x12664 <__udivmodhi4_loop>
   1267a:	80 95       	com	r24
   1267c:	90 95       	com	r25
   1267e:	bc 01       	movw	r22, r24
   12680:	cd 01       	movw	r24, r26
   12682:	08 95       	ret

00012684 <__divmodhi4>:
   12684:	97 fb       	bst	r25, 7
   12686:	09 2e       	mov	r0, r25
   12688:	07 26       	eor	r0, r23
   1268a:	0a d0       	rcall	.+20     	; 0x126a0 <__divmodhi4_neg1>
   1268c:	77 fd       	sbrc	r23, 7
   1268e:	04 d0       	rcall	.+8      	; 0x12698 <__divmodhi4_neg2>
   12690:	e5 df       	rcall	.-54     	; 0x1265c <__udivmodhi4>
   12692:	06 d0       	rcall	.+12     	; 0x126a0 <__divmodhi4_neg1>
   12694:	00 20       	and	r0, r0
   12696:	1a f4       	brpl	.+6      	; 0x1269e <__divmodhi4_exit>

00012698 <__divmodhi4_neg2>:
   12698:	70 95       	com	r23
   1269a:	61 95       	neg	r22
   1269c:	7f 4f       	sbci	r23, 0xFF	; 255

0001269e <__divmodhi4_exit>:
   1269e:	08 95       	ret

000126a0 <__divmodhi4_neg1>:
   126a0:	f6 f7       	brtc	.-4      	; 0x1269e <__divmodhi4_exit>
   126a2:	90 95       	com	r25
   126a4:	81 95       	neg	r24
   126a6:	9f 4f       	sbci	r25, 0xFF	; 255
   126a8:	08 95       	ret

000126aa <malloc>:
   126aa:	cf 93       	push	r28
   126ac:	df 93       	push	r29
   126ae:	ac 01       	movw	r20, r24
   126b0:	82 30       	cpi	r24, 0x02	; 2
   126b2:	91 05       	cpc	r25, r1
   126b4:	10 f4       	brcc	.+4      	; 0x126ba <malloc+0x10>
   126b6:	42 e0       	ldi	r20, 0x02	; 2
   126b8:	50 e0       	ldi	r21, 0x00	; 0
   126ba:	e0 91 0b 05 	lds	r30, 0x050B
   126be:	f0 91 0c 05 	lds	r31, 0x050C
   126c2:	20 e0       	ldi	r18, 0x00	; 0
   126c4:	30 e0       	ldi	r19, 0x00	; 0
   126c6:	a0 e0       	ldi	r26, 0x00	; 0
   126c8:	b0 e0       	ldi	r27, 0x00	; 0
   126ca:	24 c0       	rjmp	.+72     	; 0x12714 <malloc+0x6a>
   126cc:	80 81       	ld	r24, Z
   126ce:	91 81       	ldd	r25, Z+1	; 0x01
   126d0:	84 17       	cp	r24, r20
   126d2:	95 07       	cpc	r25, r21
   126d4:	d0 f0       	brcs	.+52     	; 0x1270a <malloc+0x60>
   126d6:	84 17       	cp	r24, r20
   126d8:	95 07       	cpc	r25, r21
   126da:	71 f4       	brne	.+28     	; 0x126f8 <malloc+0x4e>
   126dc:	82 81       	ldd	r24, Z+2	; 0x02
   126de:	93 81       	ldd	r25, Z+3	; 0x03
   126e0:	10 97       	sbiw	r26, 0x00	; 0
   126e2:	29 f0       	breq	.+10     	; 0x126ee <malloc+0x44>
   126e4:	13 96       	adiw	r26, 0x03	; 3
   126e6:	9c 93       	st	X, r25
   126e8:	8e 93       	st	-X, r24
   126ea:	12 97       	sbiw	r26, 0x02	; 2
   126ec:	2c c0       	rjmp	.+88     	; 0x12746 <malloc+0x9c>
   126ee:	90 93 0c 05 	sts	0x050C, r25
   126f2:	80 93 0b 05 	sts	0x050B, r24
   126f6:	27 c0       	rjmp	.+78     	; 0x12746 <malloc+0x9c>
   126f8:	21 15       	cp	r18, r1
   126fa:	31 05       	cpc	r19, r1
   126fc:	19 f0       	breq	.+6      	; 0x12704 <malloc+0x5a>
   126fe:	82 17       	cp	r24, r18
   12700:	93 07       	cpc	r25, r19
   12702:	18 f4       	brcc	.+6      	; 0x1270a <malloc+0x60>
   12704:	9c 01       	movw	r18, r24
   12706:	bd 01       	movw	r22, r26
   12708:	ef 01       	movw	r28, r30
   1270a:	92 81       	ldd	r25, Z+2	; 0x02
   1270c:	83 81       	ldd	r24, Z+3	; 0x03
   1270e:	df 01       	movw	r26, r30
   12710:	e9 2f       	mov	r30, r25
   12712:	f8 2f       	mov	r31, r24
   12714:	30 97       	sbiw	r30, 0x00	; 0
   12716:	d1 f6       	brne	.-76     	; 0x126cc <malloc+0x22>
   12718:	21 15       	cp	r18, r1
   1271a:	31 05       	cpc	r19, r1
   1271c:	f9 f0       	breq	.+62     	; 0x1275c <malloc+0xb2>
   1271e:	c9 01       	movw	r24, r18
   12720:	84 1b       	sub	r24, r20
   12722:	95 0b       	sbc	r25, r21
   12724:	84 30       	cpi	r24, 0x04	; 4
   12726:	91 05       	cpc	r25, r1
   12728:	80 f4       	brcc	.+32     	; 0x1274a <malloc+0xa0>
   1272a:	8a 81       	ldd	r24, Y+2	; 0x02
   1272c:	9b 81       	ldd	r25, Y+3	; 0x03
   1272e:	61 15       	cp	r22, r1
   12730:	71 05       	cpc	r23, r1
   12732:	21 f0       	breq	.+8      	; 0x1273c <malloc+0x92>
   12734:	fb 01       	movw	r30, r22
   12736:	93 83       	std	Z+3, r25	; 0x03
   12738:	82 83       	std	Z+2, r24	; 0x02
   1273a:	04 c0       	rjmp	.+8      	; 0x12744 <malloc+0x9a>
   1273c:	90 93 0c 05 	sts	0x050C, r25
   12740:	80 93 0b 05 	sts	0x050B, r24
   12744:	fe 01       	movw	r30, r28
   12746:	32 96       	adiw	r30, 0x02	; 2
   12748:	42 c0       	rjmp	.+132    	; 0x127ce <malloc+0x124>
   1274a:	fe 01       	movw	r30, r28
   1274c:	e8 0f       	add	r30, r24
   1274e:	f9 1f       	adc	r31, r25
   12750:	41 93       	st	Z+, r20
   12752:	51 93       	st	Z+, r21
   12754:	02 97       	sbiw	r24, 0x02	; 2
   12756:	99 83       	std	Y+1, r25	; 0x01
   12758:	88 83       	st	Y, r24
   1275a:	39 c0       	rjmp	.+114    	; 0x127ce <malloc+0x124>
   1275c:	80 91 09 05 	lds	r24, 0x0509
   12760:	90 91 0a 05 	lds	r25, 0x050A
   12764:	00 97       	sbiw	r24, 0x00	; 0
   12766:	41 f4       	brne	.+16     	; 0x12778 <malloc+0xce>
   12768:	80 91 3a 03 	lds	r24, 0x033A
   1276c:	90 91 3b 03 	lds	r25, 0x033B
   12770:	90 93 0a 05 	sts	0x050A, r25
   12774:	80 93 09 05 	sts	0x0509, r24
   12778:	20 91 38 03 	lds	r18, 0x0338
   1277c:	30 91 39 03 	lds	r19, 0x0339
   12780:	21 15       	cp	r18, r1
   12782:	31 05       	cpc	r19, r1
   12784:	41 f4       	brne	.+16     	; 0x12796 <malloc+0xec>
   12786:	2d b7       	in	r18, 0x3d	; 61
   12788:	3e b7       	in	r19, 0x3e	; 62
   1278a:	80 91 3c 03 	lds	r24, 0x033C
   1278e:	90 91 3d 03 	lds	r25, 0x033D
   12792:	28 1b       	sub	r18, r24
   12794:	39 0b       	sbc	r19, r25
   12796:	e0 91 09 05 	lds	r30, 0x0509
   1279a:	f0 91 0a 05 	lds	r31, 0x050A
   1279e:	e2 17       	cp	r30, r18
   127a0:	f3 07       	cpc	r31, r19
   127a2:	98 f4       	brcc	.+38     	; 0x127ca <malloc+0x120>
   127a4:	2e 1b       	sub	r18, r30
   127a6:	3f 0b       	sbc	r19, r31
   127a8:	24 17       	cp	r18, r20
   127aa:	35 07       	cpc	r19, r21
   127ac:	70 f0       	brcs	.+28     	; 0x127ca <malloc+0x120>
   127ae:	ca 01       	movw	r24, r20
   127b0:	02 96       	adiw	r24, 0x02	; 2
   127b2:	28 17       	cp	r18, r24
   127b4:	39 07       	cpc	r19, r25
   127b6:	48 f0       	brcs	.+18     	; 0x127ca <malloc+0x120>
   127b8:	8e 0f       	add	r24, r30
   127ba:	9f 1f       	adc	r25, r31
   127bc:	90 93 0a 05 	sts	0x050A, r25
   127c0:	80 93 09 05 	sts	0x0509, r24
   127c4:	41 93       	st	Z+, r20
   127c6:	51 93       	st	Z+, r21
   127c8:	02 c0       	rjmp	.+4      	; 0x127ce <malloc+0x124>
   127ca:	e0 e0       	ldi	r30, 0x00	; 0
   127cc:	f0 e0       	ldi	r31, 0x00	; 0
   127ce:	cf 01       	movw	r24, r30
   127d0:	df 91       	pop	r29
   127d2:	cf 91       	pop	r28
   127d4:	08 95       	ret

000127d6 <free>:
   127d6:	0f 93       	push	r16
   127d8:	1f 93       	push	r17
   127da:	cf 93       	push	r28
   127dc:	df 93       	push	r29
   127de:	9c 01       	movw	r18, r24
   127e0:	00 97       	sbiw	r24, 0x00	; 0
   127e2:	09 f4       	brne	.+2      	; 0x127e6 <free+0x10>
   127e4:	8c c0       	rjmp	.+280    	; 0x128fe <free+0x128>
   127e6:	dc 01       	movw	r26, r24
   127e8:	12 97       	sbiw	r26, 0x02	; 2
   127ea:	13 96       	adiw	r26, 0x03	; 3
   127ec:	1c 92       	st	X, r1
   127ee:	1e 92       	st	-X, r1
   127f0:	12 97       	sbiw	r26, 0x02	; 2
   127f2:	60 91 0b 05 	lds	r22, 0x050B
   127f6:	70 91 0c 05 	lds	r23, 0x050C
   127fa:	61 15       	cp	r22, r1
   127fc:	71 05       	cpc	r23, r1
   127fe:	89 f4       	brne	.+34     	; 0x12822 <free+0x4c>
   12800:	8d 91       	ld	r24, X+
   12802:	9c 91       	ld	r25, X
   12804:	11 97       	sbiw	r26, 0x01	; 1
   12806:	82 0f       	add	r24, r18
   12808:	93 1f       	adc	r25, r19
   1280a:	20 91 09 05 	lds	r18, 0x0509
   1280e:	30 91 0a 05 	lds	r19, 0x050A
   12812:	28 17       	cp	r18, r24
   12814:	39 07       	cpc	r19, r25
   12816:	69 f5       	brne	.+90     	; 0x12872 <free+0x9c>
   12818:	b0 93 0a 05 	sts	0x050A, r27
   1281c:	a0 93 09 05 	sts	0x0509, r26
   12820:	6e c0       	rjmp	.+220    	; 0x128fe <free+0x128>
   12822:	fb 01       	movw	r30, r22
   12824:	40 e0       	ldi	r20, 0x00	; 0
   12826:	50 e0       	ldi	r21, 0x00	; 0
   12828:	01 c0       	rjmp	.+2      	; 0x1282c <free+0x56>
   1282a:	fc 01       	movw	r30, r24
   1282c:	ea 17       	cp	r30, r26
   1282e:	fb 07       	cpc	r31, r27
   12830:	30 f4       	brcc	.+12     	; 0x1283e <free+0x68>
   12832:	82 81       	ldd	r24, Z+2	; 0x02
   12834:	93 81       	ldd	r25, Z+3	; 0x03
   12836:	af 01       	movw	r20, r30
   12838:	00 97       	sbiw	r24, 0x00	; 0
   1283a:	b9 f7       	brne	.-18     	; 0x1282a <free+0x54>
   1283c:	1f c0       	rjmp	.+62     	; 0x1287c <free+0xa6>
   1283e:	e9 01       	movw	r28, r18
   12840:	22 97       	sbiw	r28, 0x02	; 2
   12842:	fb 83       	std	Y+3, r31	; 0x03
   12844:	ea 83       	std	Y+2, r30	; 0x02
   12846:	08 81       	ld	r16, Y
   12848:	19 81       	ldd	r17, Y+1	; 0x01
   1284a:	c9 01       	movw	r24, r18
   1284c:	80 0f       	add	r24, r16
   1284e:	91 1f       	adc	r25, r17
   12850:	8e 17       	cp	r24, r30
   12852:	9f 07       	cpc	r25, r31
   12854:	59 f4       	brne	.+22     	; 0x1286c <free+0x96>
   12856:	80 81       	ld	r24, Z
   12858:	91 81       	ldd	r25, Z+1	; 0x01
   1285a:	80 0f       	add	r24, r16
   1285c:	91 1f       	adc	r25, r17
   1285e:	02 96       	adiw	r24, 0x02	; 2
   12860:	99 83       	std	Y+1, r25	; 0x01
   12862:	88 83       	st	Y, r24
   12864:	82 81       	ldd	r24, Z+2	; 0x02
   12866:	93 81       	ldd	r25, Z+3	; 0x03
   12868:	9b 83       	std	Y+3, r25	; 0x03
   1286a:	8a 83       	std	Y+2, r24	; 0x02
   1286c:	41 15       	cp	r20, r1
   1286e:	51 05       	cpc	r21, r1
   12870:	29 f4       	brne	.+10     	; 0x1287c <free+0xa6>
   12872:	b0 93 0c 05 	sts	0x050C, r27
   12876:	a0 93 0b 05 	sts	0x050B, r26
   1287a:	41 c0       	rjmp	.+130    	; 0x128fe <free+0x128>
   1287c:	fa 01       	movw	r30, r20
   1287e:	b3 83       	std	Z+3, r27	; 0x03
   12880:	a2 83       	std	Z+2, r26	; 0x02
   12882:	c1 91       	ld	r28, Z+
   12884:	d1 91       	ld	r29, Z+
   12886:	ec 0f       	add	r30, r28
   12888:	fd 1f       	adc	r31, r29
   1288a:	ae 17       	cp	r26, r30
   1288c:	bf 07       	cpc	r27, r31
   1288e:	81 f4       	brne	.+32     	; 0x128b0 <free+0xda>
   12890:	f9 01       	movw	r30, r18
   12892:	92 91       	ld	r25, -Z
   12894:	82 91       	ld	r24, -Z
   12896:	8c 0f       	add	r24, r28
   12898:	9d 1f       	adc	r25, r29
   1289a:	02 96       	adiw	r24, 0x02	; 2
   1289c:	da 01       	movw	r26, r20
   1289e:	11 96       	adiw	r26, 0x01	; 1
   128a0:	9c 93       	st	X, r25
   128a2:	8e 93       	st	-X, r24
   128a4:	82 81       	ldd	r24, Z+2	; 0x02
   128a6:	93 81       	ldd	r25, Z+3	; 0x03
   128a8:	13 96       	adiw	r26, 0x03	; 3
   128aa:	9c 93       	st	X, r25
   128ac:	8e 93       	st	-X, r24
   128ae:	12 97       	sbiw	r26, 0x02	; 2
   128b0:	e0 e0       	ldi	r30, 0x00	; 0
   128b2:	f0 e0       	ldi	r31, 0x00	; 0
   128b4:	02 c0       	rjmp	.+4      	; 0x128ba <free+0xe4>
   128b6:	fb 01       	movw	r30, r22
   128b8:	bc 01       	movw	r22, r24
   128ba:	db 01       	movw	r26, r22
   128bc:	12 96       	adiw	r26, 0x02	; 2
   128be:	8d 91       	ld	r24, X+
   128c0:	9c 91       	ld	r25, X
   128c2:	13 97       	sbiw	r26, 0x03	; 3
   128c4:	00 97       	sbiw	r24, 0x00	; 0
   128c6:	b9 f7       	brne	.-18     	; 0x128b6 <free+0xe0>
   128c8:	cb 01       	movw	r24, r22
   128ca:	02 96       	adiw	r24, 0x02	; 2
   128cc:	2d 91       	ld	r18, X+
   128ce:	3c 91       	ld	r19, X
   128d0:	11 97       	sbiw	r26, 0x01	; 1
   128d2:	82 0f       	add	r24, r18
   128d4:	93 1f       	adc	r25, r19
   128d6:	20 91 09 05 	lds	r18, 0x0509
   128da:	30 91 0a 05 	lds	r19, 0x050A
   128de:	28 17       	cp	r18, r24
   128e0:	39 07       	cpc	r19, r25
   128e2:	69 f4       	brne	.+26     	; 0x128fe <free+0x128>
   128e4:	30 97       	sbiw	r30, 0x00	; 0
   128e6:	29 f4       	brne	.+10     	; 0x128f2 <free+0x11c>
   128e8:	10 92 0c 05 	sts	0x050C, r1
   128ec:	10 92 0b 05 	sts	0x050B, r1
   128f0:	02 c0       	rjmp	.+4      	; 0x128f6 <free+0x120>
   128f2:	13 82       	std	Z+3, r1	; 0x03
   128f4:	12 82       	std	Z+2, r1	; 0x02
   128f6:	70 93 0a 05 	sts	0x050A, r23
   128fa:	60 93 09 05 	sts	0x0509, r22
   128fe:	df 91       	pop	r29
   12900:	cf 91       	pop	r28
   12902:	1f 91       	pop	r17
   12904:	0f 91       	pop	r16
   12906:	08 95       	ret

00012908 <realloc>:
   12908:	8f 92       	push	r8
   1290a:	9f 92       	push	r9
   1290c:	af 92       	push	r10
   1290e:	bf 92       	push	r11
   12910:	cf 92       	push	r12
   12912:	df 92       	push	r13
   12914:	ef 92       	push	r14
   12916:	ff 92       	push	r15
   12918:	0f 93       	push	r16
   1291a:	1f 93       	push	r17
   1291c:	cf 93       	push	r28
   1291e:	df 93       	push	r29
   12920:	0f 92       	push	r0
   12922:	0f 92       	push	r0
   12924:	cd b7       	in	r28, 0x3d	; 61
   12926:	de b7       	in	r29, 0x3e	; 62
   12928:	8c 01       	movw	r16, r24
   1292a:	00 97       	sbiw	r24, 0x00	; 0
   1292c:	29 f4       	brne	.+10     	; 0x12938 <realloc+0x30>
   1292e:	cb 01       	movw	r24, r22
   12930:	0e 94 55 93 	call	0x126aa	; 0x126aa <malloc>
   12934:	8c 01       	movw	r16, r24
   12936:	b8 c0       	rjmp	.+368    	; 0x12aa8 <realloc+0x1a0>
   12938:	dc 01       	movw	r26, r24
   1293a:	a6 0f       	add	r26, r22
   1293c:	b7 1f       	adc	r27, r23
   1293e:	fc 01       	movw	r30, r24
   12940:	32 97       	sbiw	r30, 0x02	; 2
   12942:	ae 17       	cp	r26, r30
   12944:	bf 07       	cpc	r27, r31
   12946:	08 f4       	brcc	.+2      	; 0x1294a <realloc+0x42>
   12948:	ad c0       	rjmp	.+346    	; 0x12aa4 <realloc+0x19c>
   1294a:	20 81       	ld	r18, Z
   1294c:	31 81       	ldd	r19, Z+1	; 0x01
   1294e:	26 17       	cp	r18, r22
   12950:	37 07       	cpc	r19, r23
   12952:	b0 f0       	brcs	.+44     	; 0x12980 <realloc+0x78>
   12954:	25 30       	cpi	r18, 0x05	; 5
   12956:	31 05       	cpc	r19, r1
   12958:	08 f4       	brcc	.+2      	; 0x1295c <realloc+0x54>
   1295a:	a6 c0       	rjmp	.+332    	; 0x12aa8 <realloc+0x1a0>
   1295c:	c9 01       	movw	r24, r18
   1295e:	04 97       	sbiw	r24, 0x04	; 4
   12960:	86 17       	cp	r24, r22
   12962:	97 07       	cpc	r25, r23
   12964:	08 f4       	brcc	.+2      	; 0x12968 <realloc+0x60>
   12966:	a0 c0       	rjmp	.+320    	; 0x12aa8 <realloc+0x1a0>
   12968:	22 50       	subi	r18, 0x02	; 2
   1296a:	30 40       	sbci	r19, 0x00	; 0
   1296c:	26 1b       	sub	r18, r22
   1296e:	37 0b       	sbc	r19, r23
   12970:	2d 93       	st	X+, r18
   12972:	3d 93       	st	X+, r19
   12974:	cd 01       	movw	r24, r26
   12976:	71 83       	std	Z+1, r23	; 0x01
   12978:	60 83       	st	Z, r22
   1297a:	0e 94 eb 93 	call	0x127d6	; 0x127d6 <free>
   1297e:	94 c0       	rjmp	.+296    	; 0x12aa8 <realloc+0x1a0>
   12980:	6b 01       	movw	r12, r22
   12982:	c2 1a       	sub	r12, r18
   12984:	d3 0a       	sbc	r13, r19
   12986:	5c 01       	movw	r10, r24
   12988:	a2 0e       	add	r10, r18
   1298a:	b3 1e       	adc	r11, r19
   1298c:	e0 91 0b 05 	lds	r30, 0x050B
   12990:	f0 91 0c 05 	lds	r31, 0x050C
   12994:	40 e0       	ldi	r20, 0x00	; 0
   12996:	50 e0       	ldi	r21, 0x00	; 0
   12998:	88 24       	eor	r8, r8
   1299a:	99 24       	eor	r9, r9
   1299c:	49 c0       	rjmp	.+146    	; 0x12a30 <realloc+0x128>
   1299e:	ea 15       	cp	r30, r10
   129a0:	fb 05       	cpc	r31, r11
   129a2:	e1 f5       	brne	.+120    	; 0x12a1c <realloc+0x114>
   129a4:	e0 80       	ld	r14, Z
   129a6:	f1 80       	ldd	r15, Z+1	; 0x01
   129a8:	c7 01       	movw	r24, r14
   129aa:	02 96       	adiw	r24, 0x02	; 2
   129ac:	8c 15       	cp	r24, r12
   129ae:	9d 05       	cpc	r25, r13
   129b0:	a8 f1       	brcs	.+106    	; 0x12a1c <realloc+0x114>
   129b2:	a7 01       	movw	r20, r14
   129b4:	4c 19       	sub	r20, r12
   129b6:	5d 09       	sbc	r21, r13
   129b8:	ca 01       	movw	r24, r20
   129ba:	02 96       	adiw	r24, 0x02	; 2
   129bc:	0f 2e       	mov	r0, r31
   129be:	fe ef       	ldi	r31, 0xFE	; 254
   129c0:	cf 2e       	mov	r12, r31
   129c2:	ff ef       	ldi	r31, 0xFF	; 255
   129c4:	df 2e       	mov	r13, r31
   129c6:	f0 2d       	mov	r31, r0
   129c8:	c0 0e       	add	r12, r16
   129ca:	d1 1e       	adc	r13, r17
   129cc:	85 30       	cpi	r24, 0x05	; 5
   129ce:	91 05       	cpc	r25, r1
   129d0:	78 f0       	brcs	.+30     	; 0x129f0 <realloc+0xe8>
   129d2:	82 81       	ldd	r24, Z+2	; 0x02
   129d4:	93 81       	ldd	r25, Z+3	; 0x03
   129d6:	13 96       	adiw	r26, 0x03	; 3
   129d8:	9c 93       	st	X, r25
   129da:	8e 93       	st	-X, r24
   129dc:	12 97       	sbiw	r26, 0x02	; 2
   129de:	11 96       	adiw	r26, 0x01	; 1
   129e0:	5c 93       	st	X, r21
   129e2:	4e 93       	st	-X, r20
   129e4:	f6 01       	movw	r30, r12
   129e6:	71 83       	std	Z+1, r23	; 0x01
   129e8:	60 83       	st	Z, r22
   129ea:	9a 2f       	mov	r25, r26
   129ec:	8b 2f       	mov	r24, r27
   129ee:	0a c0       	rjmp	.+20     	; 0x12a04 <realloc+0xfc>
   129f0:	c9 01       	movw	r24, r18
   129f2:	02 96       	adiw	r24, 0x02	; 2
   129f4:	8e 0d       	add	r24, r14
   129f6:	9f 1d       	adc	r25, r15
   129f8:	d6 01       	movw	r26, r12
   129fa:	11 96       	adiw	r26, 0x01	; 1
   129fc:	9c 93       	st	X, r25
   129fe:	8e 93       	st	-X, r24
   12a00:	92 81       	ldd	r25, Z+2	; 0x02
   12a02:	83 81       	ldd	r24, Z+3	; 0x03
   12a04:	81 14       	cp	r8, r1
   12a06:	91 04       	cpc	r9, r1
   12a08:	21 f0       	breq	.+8      	; 0x12a12 <realloc+0x10a>
   12a0a:	f4 01       	movw	r30, r8
   12a0c:	92 83       	std	Z+2, r25	; 0x02
   12a0e:	83 83       	std	Z+3, r24	; 0x03
   12a10:	4b c0       	rjmp	.+150    	; 0x12aa8 <realloc+0x1a0>
   12a12:	90 93 0b 05 	sts	0x050B, r25
   12a16:	80 93 0c 05 	sts	0x050C, r24
   12a1a:	46 c0       	rjmp	.+140    	; 0x12aa8 <realloc+0x1a0>
   12a1c:	80 81       	ld	r24, Z
   12a1e:	91 81       	ldd	r25, Z+1	; 0x01
   12a20:	48 17       	cp	r20, r24
   12a22:	59 07       	cpc	r21, r25
   12a24:	08 f4       	brcc	.+2      	; 0x12a28 <realloc+0x120>
   12a26:	ac 01       	movw	r20, r24
   12a28:	82 81       	ldd	r24, Z+2	; 0x02
   12a2a:	93 81       	ldd	r25, Z+3	; 0x03
   12a2c:	4f 01       	movw	r8, r30
   12a2e:	fc 01       	movw	r30, r24
   12a30:	30 97       	sbiw	r30, 0x00	; 0
   12a32:	09 f0       	breq	.+2      	; 0x12a36 <realloc+0x12e>
   12a34:	b4 cf       	rjmp	.-152    	; 0x1299e <realloc+0x96>
   12a36:	80 91 09 05 	lds	r24, 0x0509
   12a3a:	90 91 0a 05 	lds	r25, 0x050A
   12a3e:	8a 15       	cp	r24, r10
   12a40:	9b 05       	cpc	r25, r11
   12a42:	e9 f4       	brne	.+58     	; 0x12a7e <realloc+0x176>
   12a44:	46 17       	cp	r20, r22
   12a46:	57 07       	cpc	r21, r23
   12a48:	d0 f4       	brcc	.+52     	; 0x12a7e <realloc+0x176>
   12a4a:	80 91 38 03 	lds	r24, 0x0338
   12a4e:	90 91 39 03 	lds	r25, 0x0339
   12a52:	00 97       	sbiw	r24, 0x00	; 0
   12a54:	41 f4       	brne	.+16     	; 0x12a66 <realloc+0x15e>
   12a56:	8d b7       	in	r24, 0x3d	; 61
   12a58:	9e b7       	in	r25, 0x3e	; 62
   12a5a:	20 91 3c 03 	lds	r18, 0x033C
   12a5e:	30 91 3d 03 	lds	r19, 0x033D
   12a62:	82 1b       	sub	r24, r18
   12a64:	93 0b       	sbc	r25, r19
   12a66:	a8 17       	cp	r26, r24
   12a68:	b9 07       	cpc	r27, r25
   12a6a:	e0 f4       	brcc	.+56     	; 0x12aa4 <realloc+0x19c>
   12a6c:	b0 93 0a 05 	sts	0x050A, r27
   12a70:	a0 93 09 05 	sts	0x0509, r26
   12a74:	f8 01       	movw	r30, r16
   12a76:	32 97       	sbiw	r30, 0x02	; 2
   12a78:	71 83       	std	Z+1, r23	; 0x01
   12a7a:	60 83       	st	Z, r22
   12a7c:	15 c0       	rjmp	.+42     	; 0x12aa8 <realloc+0x1a0>
   12a7e:	cb 01       	movw	r24, r22
   12a80:	29 83       	std	Y+1, r18	; 0x01
   12a82:	3a 83       	std	Y+2, r19	; 0x02
   12a84:	0e 94 55 93 	call	0x126aa	; 0x126aa <malloc>
   12a88:	7c 01       	movw	r14, r24
   12a8a:	29 81       	ldd	r18, Y+1	; 0x01
   12a8c:	3a 81       	ldd	r19, Y+2	; 0x02
   12a8e:	00 97       	sbiw	r24, 0x00	; 0
   12a90:	49 f0       	breq	.+18     	; 0x12aa4 <realloc+0x19c>
   12a92:	b8 01       	movw	r22, r16
   12a94:	a9 01       	movw	r20, r18
   12a96:	0e 94 69 95 	call	0x12ad2	; 0x12ad2 <memcpy>
   12a9a:	c8 01       	movw	r24, r16
   12a9c:	0e 94 eb 93 	call	0x127d6	; 0x127d6 <free>
   12aa0:	87 01       	movw	r16, r14
   12aa2:	02 c0       	rjmp	.+4      	; 0x12aa8 <realloc+0x1a0>
   12aa4:	00 e0       	ldi	r16, 0x00	; 0
   12aa6:	10 e0       	ldi	r17, 0x00	; 0
   12aa8:	c8 01       	movw	r24, r16
   12aaa:	0f 90       	pop	r0
   12aac:	0f 90       	pop	r0
   12aae:	df 91       	pop	r29
   12ab0:	cf 91       	pop	r28
   12ab2:	1f 91       	pop	r17
   12ab4:	0f 91       	pop	r16
   12ab6:	ff 90       	pop	r15
   12ab8:	ef 90       	pop	r14
   12aba:	df 90       	pop	r13
   12abc:	cf 90       	pop	r12
   12abe:	bf 90       	pop	r11
   12ac0:	af 90       	pop	r10
   12ac2:	9f 90       	pop	r9
   12ac4:	8f 90       	pop	r8
   12ac6:	08 95       	ret

00012ac8 <strtok>:
   12ac8:	4c e3       	ldi	r20, 0x3C	; 60
   12aca:	54 e0       	ldi	r21, 0x04	; 4
   12acc:	0e 94 84 95 	call	0x12b08	; 0x12b08 <strtok_r>
   12ad0:	08 95       	ret

00012ad2 <memcpy>:
   12ad2:	fb 01       	movw	r30, r22
   12ad4:	dc 01       	movw	r26, r24
   12ad6:	02 c0       	rjmp	.+4      	; 0x12adc <memcpy+0xa>
   12ad8:	01 90       	ld	r0, Z+
   12ada:	0d 92       	st	X+, r0
   12adc:	41 50       	subi	r20, 0x01	; 1
   12ade:	50 40       	sbci	r21, 0x00	; 0
   12ae0:	d8 f7       	brcc	.-10     	; 0x12ad8 <memcpy+0x6>
   12ae2:	08 95       	ret

00012ae4 <strcat>:
   12ae4:	fb 01       	movw	r30, r22
   12ae6:	dc 01       	movw	r26, r24
   12ae8:	0d 90       	ld	r0, X+
   12aea:	00 20       	and	r0, r0
   12aec:	e9 f7       	brne	.-6      	; 0x12ae8 <strcat+0x4>
   12aee:	11 97       	sbiw	r26, 0x01	; 1
   12af0:	01 90       	ld	r0, Z+
   12af2:	0d 92       	st	X+, r0
   12af4:	00 20       	and	r0, r0
   12af6:	e1 f7       	brne	.-8      	; 0x12af0 <strcat+0xc>
   12af8:	08 95       	ret

00012afa <strcpy>:
   12afa:	fb 01       	movw	r30, r22
   12afc:	dc 01       	movw	r26, r24
   12afe:	01 90       	ld	r0, Z+
   12b00:	0d 92       	st	X+, r0
   12b02:	00 20       	and	r0, r0
   12b04:	e1 f7       	brne	.-8      	; 0x12afe <strcpy+0x4>
   12b06:	08 95       	ret

00012b08 <strtok_r>:
   12b08:	fa 01       	movw	r30, r20
   12b0a:	a1 91       	ld	r26, Z+
   12b0c:	b0 81       	ld	r27, Z
   12b0e:	00 97       	sbiw	r24, 0x00	; 0
   12b10:	19 f4       	brne	.+6      	; 0x12b18 <strtok_r+0x10>
   12b12:	10 97       	sbiw	r26, 0x00	; 0
   12b14:	e1 f0       	breq	.+56     	; 0x12b4e <strtok_r+0x46>
   12b16:	cd 01       	movw	r24, r26
   12b18:	dc 01       	movw	r26, r24
   12b1a:	cd 01       	movw	r24, r26
   12b1c:	0d 90       	ld	r0, X+
   12b1e:	00 20       	and	r0, r0
   12b20:	11 f4       	brne	.+4      	; 0x12b26 <strtok_r+0x1e>
   12b22:	c0 01       	movw	r24, r0
   12b24:	13 c0       	rjmp	.+38     	; 0x12b4c <strtok_r+0x44>
   12b26:	fb 01       	movw	r30, r22
   12b28:	21 91       	ld	r18, Z+
   12b2a:	22 23       	and	r18, r18
   12b2c:	19 f0       	breq	.+6      	; 0x12b34 <strtok_r+0x2c>
   12b2e:	20 15       	cp	r18, r0
   12b30:	d9 f7       	brne	.-10     	; 0x12b28 <strtok_r+0x20>
   12b32:	f3 cf       	rjmp	.-26     	; 0x12b1a <strtok_r+0x12>
   12b34:	fb 01       	movw	r30, r22
   12b36:	21 91       	ld	r18, Z+
   12b38:	20 15       	cp	r18, r0
   12b3a:	19 f4       	brne	.+6      	; 0x12b42 <strtok_r+0x3a>
   12b3c:	1e 92       	st	-X, r1
   12b3e:	11 96       	adiw	r26, 0x01	; 1
   12b40:	06 c0       	rjmp	.+12     	; 0x12b4e <strtok_r+0x46>
   12b42:	22 23       	and	r18, r18
   12b44:	c1 f7       	brne	.-16     	; 0x12b36 <strtok_r+0x2e>
   12b46:	0d 90       	ld	r0, X+
   12b48:	00 20       	and	r0, r0
   12b4a:	a1 f7       	brne	.-24     	; 0x12b34 <strtok_r+0x2c>
   12b4c:	d0 01       	movw	r26, r0
   12b4e:	fa 01       	movw	r30, r20
   12b50:	a1 93       	st	Z+, r26
   12b52:	b0 83       	st	Z, r27
   12b54:	08 95       	ret

00012b56 <sscanf>:
   12b56:	cf 93       	push	r28
   12b58:	df 93       	push	r29
   12b5a:	cd b7       	in	r28, 0x3d	; 61
   12b5c:	de b7       	in	r29, 0x3e	; 62
   12b5e:	2e 97       	sbiw	r28, 0x0e	; 14
   12b60:	0f b6       	in	r0, 0x3f	; 63
   12b62:	f8 94       	cli
   12b64:	de bf       	out	0x3e, r29	; 62
   12b66:	0f be       	out	0x3f, r0	; 63
   12b68:	cd bf       	out	0x3d, r28	; 61
   12b6a:	85 e0       	ldi	r24, 0x05	; 5
   12b6c:	8c 83       	std	Y+4, r24	; 0x04
   12b6e:	8c 89       	ldd	r24, Y+20	; 0x14
   12b70:	9d 89       	ldd	r25, Y+21	; 0x15
   12b72:	9a 83       	std	Y+2, r25	; 0x02
   12b74:	89 83       	std	Y+1, r24	; 0x01
   12b76:	ae 01       	movw	r20, r28
   12b78:	48 5e       	subi	r20, 0xE8	; 232
   12b7a:	5f 4f       	sbci	r21, 0xFF	; 255
   12b7c:	ce 01       	movw	r24, r28
   12b7e:	01 96       	adiw	r24, 0x01	; 1
   12b80:	6e 89       	ldd	r22, Y+22	; 0x16
   12b82:	7f 89       	ldd	r23, Y+23	; 0x17
   12b84:	0e 94 71 97 	call	0x12ee2	; 0x12ee2 <vfscanf>
   12b88:	2e 96       	adiw	r28, 0x0e	; 14
   12b8a:	0f b6       	in	r0, 0x3f	; 63
   12b8c:	f8 94       	cli
   12b8e:	de bf       	out	0x3e, r29	; 62
   12b90:	0f be       	out	0x3f, r0	; 63
   12b92:	cd bf       	out	0x3d, r28	; 61
   12b94:	df 91       	pop	r29
   12b96:	cf 91       	pop	r28
   12b98:	08 95       	ret

00012b9a <putval>:
   12b9a:	20 fd       	sbrc	r18, 0
   12b9c:	09 c0       	rjmp	.+18     	; 0x12bb0 <putval+0x16>
   12b9e:	fc 01       	movw	r30, r24
   12ba0:	23 fd       	sbrc	r18, 3
   12ba2:	05 c0       	rjmp	.+10     	; 0x12bae <putval+0x14>
   12ba4:	22 ff       	sbrs	r18, 2
   12ba6:	02 c0       	rjmp	.+4      	; 0x12bac <putval+0x12>
   12ba8:	73 83       	std	Z+3, r23	; 0x03
   12baa:	62 83       	std	Z+2, r22	; 0x02
   12bac:	51 83       	std	Z+1, r21	; 0x01
   12bae:	40 83       	st	Z, r20
   12bb0:	08 95       	ret

00012bb2 <mulacc>:
   12bb2:	cf 92       	push	r12
   12bb4:	df 92       	push	r13
   12bb6:	ef 92       	push	r14
   12bb8:	ff 92       	push	r15
   12bba:	6b 01       	movw	r12, r22
   12bbc:	7c 01       	movw	r14, r24
   12bbe:	44 fd       	sbrc	r20, 4
   12bc0:	10 c0       	rjmp	.+32     	; 0x12be2 <mulacc+0x30>
   12bc2:	46 fd       	sbrc	r20, 6
   12bc4:	10 c0       	rjmp	.+32     	; 0x12be6 <mulacc+0x34>
   12bc6:	d6 01       	movw	r26, r12
   12bc8:	f7 01       	movw	r30, r14
   12bca:	aa 0f       	add	r26, r26
   12bcc:	bb 1f       	adc	r27, r27
   12bce:	ee 1f       	adc	r30, r30
   12bd0:	ff 1f       	adc	r31, r31
   12bd2:	10 94       	com	r1
   12bd4:	d1 f7       	brne	.-12     	; 0x12bca <mulacc+0x18>
   12bd6:	ca 0e       	add	r12, r26
   12bd8:	db 1e       	adc	r13, r27
   12bda:	ee 1e       	adc	r14, r30
   12bdc:	ff 1e       	adc	r15, r31
   12bde:	81 e0       	ldi	r24, 0x01	; 1
   12be0:	03 c0       	rjmp	.+6      	; 0x12be8 <mulacc+0x36>
   12be2:	83 e0       	ldi	r24, 0x03	; 3
   12be4:	01 c0       	rjmp	.+2      	; 0x12be8 <mulacc+0x36>
   12be6:	84 e0       	ldi	r24, 0x04	; 4
   12be8:	cc 0c       	add	r12, r12
   12bea:	dd 1c       	adc	r13, r13
   12bec:	ee 1c       	adc	r14, r14
   12bee:	ff 1c       	adc	r15, r15
   12bf0:	81 50       	subi	r24, 0x01	; 1
   12bf2:	d1 f7       	brne	.-12     	; 0x12be8 <mulacc+0x36>
   12bf4:	c2 0e       	add	r12, r18
   12bf6:	d1 1c       	adc	r13, r1
   12bf8:	e1 1c       	adc	r14, r1
   12bfa:	f1 1c       	adc	r15, r1
   12bfc:	b6 01       	movw	r22, r12
   12bfe:	c7 01       	movw	r24, r14
   12c00:	ff 90       	pop	r15
   12c02:	ef 90       	pop	r14
   12c04:	df 90       	pop	r13
   12c06:	cf 90       	pop	r12
   12c08:	08 95       	ret

00012c0a <skip_spaces>:
   12c0a:	0f 93       	push	r16
   12c0c:	1f 93       	push	r17
   12c0e:	cf 93       	push	r28
   12c10:	df 93       	push	r29
   12c12:	8c 01       	movw	r16, r24
   12c14:	c8 01       	movw	r24, r16
   12c16:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12c1a:	ec 01       	movw	r28, r24
   12c1c:	97 fd       	sbrc	r25, 7
   12c1e:	08 c0       	rjmp	.+16     	; 0x12c30 <skip_spaces+0x26>
   12c20:	0e 94 9e 98 	call	0x1313c	; 0x1313c <isspace>
   12c24:	00 97       	sbiw	r24, 0x00	; 0
   12c26:	b1 f7       	brne	.-20     	; 0x12c14 <skip_spaces+0xa>
   12c28:	ce 01       	movw	r24, r28
   12c2a:	b8 01       	movw	r22, r16
   12c2c:	0e 94 f1 98 	call	0x131e2	; 0x131e2 <ungetc>
   12c30:	ce 01       	movw	r24, r28
   12c32:	df 91       	pop	r29
   12c34:	cf 91       	pop	r28
   12c36:	1f 91       	pop	r17
   12c38:	0f 91       	pop	r16
   12c3a:	08 95       	ret

00012c3c <conv_int>:
   12c3c:	af 92       	push	r10
   12c3e:	bf 92       	push	r11
   12c40:	cf 92       	push	r12
   12c42:	df 92       	push	r13
   12c44:	ef 92       	push	r14
   12c46:	ff 92       	push	r15
   12c48:	0f 93       	push	r16
   12c4a:	1f 93       	push	r17
   12c4c:	cf 93       	push	r28
   12c4e:	df 93       	push	r29
   12c50:	8c 01       	movw	r16, r24
   12c52:	d6 2f       	mov	r29, r22
   12c54:	5a 01       	movw	r10, r20
   12c56:	c2 2f       	mov	r28, r18
   12c58:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12c5c:	8b 32       	cpi	r24, 0x2B	; 43
   12c5e:	19 f0       	breq	.+6      	; 0x12c66 <conv_int+0x2a>
   12c60:	8d 32       	cpi	r24, 0x2D	; 45
   12c62:	49 f4       	brne	.+18     	; 0x12c76 <conv_int+0x3a>
   12c64:	c0 68       	ori	r28, 0x80	; 128
   12c66:	d1 50       	subi	r29, 0x01	; 1
   12c68:	09 f4       	brne	.+2      	; 0x12c6c <conv_int+0x30>
   12c6a:	61 c0       	rjmp	.+194    	; 0x12d2e <conv_int+0xf2>
   12c6c:	c8 01       	movw	r24, r16
   12c6e:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12c72:	97 fd       	sbrc	r25, 7
   12c74:	5c c0       	rjmp	.+184    	; 0x12d2e <conv_int+0xf2>
   12c76:	cd 7f       	andi	r28, 0xFD	; 253
   12c78:	2c 2f       	mov	r18, r28
   12c7a:	20 73       	andi	r18, 0x30	; 48
   12c7c:	d1 f4       	brne	.+52     	; 0x12cb2 <conv_int+0x76>
   12c7e:	80 33       	cpi	r24, 0x30	; 48
   12c80:	c1 f4       	brne	.+48     	; 0x12cb2 <conv_int+0x76>
   12c82:	d1 50       	subi	r29, 0x01	; 1
   12c84:	09 f4       	brne	.+2      	; 0x12c88 <conv_int+0x4c>
   12c86:	3e c0       	rjmp	.+124    	; 0x12d04 <conv_int+0xc8>
   12c88:	c8 01       	movw	r24, r16
   12c8a:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12c8e:	97 fd       	sbrc	r25, 7
   12c90:	39 c0       	rjmp	.+114    	; 0x12d04 <conv_int+0xc8>
   12c92:	c2 60       	ori	r28, 0x02	; 2
   12c94:	88 37       	cpi	r24, 0x78	; 120
   12c96:	11 f0       	breq	.+4      	; 0x12c9c <conv_int+0x60>
   12c98:	88 35       	cpi	r24, 0x58	; 88
   12c9a:	49 f4       	brne	.+18     	; 0x12cae <conv_int+0x72>
   12c9c:	c0 64       	ori	r28, 0x40	; 64
   12c9e:	d1 50       	subi	r29, 0x01	; 1
   12ca0:	89 f1       	breq	.+98     	; 0x12d04 <conv_int+0xc8>
   12ca2:	c8 01       	movw	r24, r16
   12ca4:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12ca8:	97 ff       	sbrs	r25, 7
   12caa:	03 c0       	rjmp	.+6      	; 0x12cb2 <conv_int+0x76>
   12cac:	2b c0       	rjmp	.+86     	; 0x12d04 <conv_int+0xc8>
   12cae:	c6 ff       	sbrs	r28, 6
   12cb0:	c0 61       	ori	r28, 0x10	; 16
   12cb2:	cc 24       	eor	r12, r12
   12cb4:	dd 24       	eor	r13, r13
   12cb6:	76 01       	movw	r14, r12
   12cb8:	28 2f       	mov	r18, r24
   12cba:	20 53       	subi	r18, 0x30	; 48
   12cbc:	28 30       	cpi	r18, 0x08	; 8
   12cbe:	80 f0       	brcs	.+32     	; 0x12ce0 <conv_int+0xa4>
   12cc0:	c4 fd       	sbrc	r28, 4
   12cc2:	09 c0       	rjmp	.+18     	; 0x12cd6 <conv_int+0x9a>
   12cc4:	2a 30       	cpi	r18, 0x0A	; 10
   12cc6:	60 f0       	brcs	.+24     	; 0x12ce0 <conv_int+0xa4>
   12cc8:	c6 ff       	sbrs	r28, 6
   12cca:	05 c0       	rjmp	.+10     	; 0x12cd6 <conv_int+0x9a>
   12ccc:	2f 7d       	andi	r18, 0xDF	; 223
   12cce:	32 2f       	mov	r19, r18
   12cd0:	31 51       	subi	r19, 0x11	; 17
   12cd2:	36 30       	cpi	r19, 0x06	; 6
   12cd4:	20 f0       	brcs	.+8      	; 0x12cde <conv_int+0xa2>
   12cd6:	b8 01       	movw	r22, r16
   12cd8:	0e 94 f1 98 	call	0x131e2	; 0x131e2 <ungetc>
   12cdc:	10 c0       	rjmp	.+32     	; 0x12cfe <conv_int+0xc2>
   12cde:	27 50       	subi	r18, 0x07	; 7
   12ce0:	c7 01       	movw	r24, r14
   12ce2:	b6 01       	movw	r22, r12
   12ce4:	4c 2f       	mov	r20, r28
   12ce6:	0e 94 d9 95 	call	0x12bb2	; 0x12bb2 <mulacc>
   12cea:	6b 01       	movw	r12, r22
   12cec:	7c 01       	movw	r14, r24
   12cee:	c2 60       	ori	r28, 0x02	; 2
   12cf0:	d1 50       	subi	r29, 0x01	; 1
   12cf2:	59 f0       	breq	.+22     	; 0x12d0a <conv_int+0xce>
   12cf4:	c8 01       	movw	r24, r16
   12cf6:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12cfa:	97 ff       	sbrs	r25, 7
   12cfc:	dd cf       	rjmp	.-70     	; 0x12cb8 <conv_int+0x7c>
   12cfe:	c1 fd       	sbrc	r28, 1
   12d00:	04 c0       	rjmp	.+8      	; 0x12d0a <conv_int+0xce>
   12d02:	15 c0       	rjmp	.+42     	; 0x12d2e <conv_int+0xf2>
   12d04:	cc 24       	eor	r12, r12
   12d06:	dd 24       	eor	r13, r13
   12d08:	76 01       	movw	r14, r12
   12d0a:	c7 ff       	sbrs	r28, 7
   12d0c:	08 c0       	rjmp	.+16     	; 0x12d1e <conv_int+0xe2>
   12d0e:	f0 94       	com	r15
   12d10:	e0 94       	com	r14
   12d12:	d0 94       	com	r13
   12d14:	c0 94       	com	r12
   12d16:	c1 1c       	adc	r12, r1
   12d18:	d1 1c       	adc	r13, r1
   12d1a:	e1 1c       	adc	r14, r1
   12d1c:	f1 1c       	adc	r15, r1
   12d1e:	c5 01       	movw	r24, r10
   12d20:	b7 01       	movw	r22, r14
   12d22:	a6 01       	movw	r20, r12
   12d24:	2c 2f       	mov	r18, r28
   12d26:	0e 94 cd 95 	call	0x12b9a	; 0x12b9a <putval>
   12d2a:	81 e0       	ldi	r24, 0x01	; 1
   12d2c:	01 c0       	rjmp	.+2      	; 0x12d30 <conv_int+0xf4>
   12d2e:	80 e0       	ldi	r24, 0x00	; 0
   12d30:	df 91       	pop	r29
   12d32:	cf 91       	pop	r28
   12d34:	1f 91       	pop	r17
   12d36:	0f 91       	pop	r16
   12d38:	ff 90       	pop	r15
   12d3a:	ef 90       	pop	r14
   12d3c:	df 90       	pop	r13
   12d3e:	cf 90       	pop	r12
   12d40:	bf 90       	pop	r11
   12d42:	af 90       	pop	r10
   12d44:	08 95       	ret

00012d46 <conv_brk>:
   12d46:	4f 92       	push	r4
   12d48:	5f 92       	push	r5
   12d4a:	6f 92       	push	r6
   12d4c:	7f 92       	push	r7
   12d4e:	8f 92       	push	r8
   12d50:	9f 92       	push	r9
   12d52:	af 92       	push	r10
   12d54:	bf 92       	push	r11
   12d56:	cf 92       	push	r12
   12d58:	df 92       	push	r13
   12d5a:	ef 92       	push	r14
   12d5c:	ff 92       	push	r15
   12d5e:	0f 93       	push	r16
   12d60:	1f 93       	push	r17
   12d62:	cf 93       	push	r28
   12d64:	df 93       	push	r29
   12d66:	cd b7       	in	r28, 0x3d	; 61
   12d68:	de b7       	in	r29, 0x3e	; 62
   12d6a:	a0 97       	sbiw	r28, 0x20	; 32
   12d6c:	0f b6       	in	r0, 0x3f	; 63
   12d6e:	f8 94       	cli
   12d70:	de bf       	out	0x3e, r29	; 62
   12d72:	0f be       	out	0x3f, r0	; 63
   12d74:	cd bf       	out	0x3d, r28	; 61
   12d76:	5c 01       	movw	r10, r24
   12d78:	06 2f       	mov	r16, r22
   12d7a:	7a 01       	movw	r14, r20
   12d7c:	69 01       	movw	r12, r18
   12d7e:	fe 01       	movw	r30, r28
   12d80:	31 96       	adiw	r30, 0x01	; 1
   12d82:	80 e2       	ldi	r24, 0x20	; 32
   12d84:	df 01       	movw	r26, r30
   12d86:	1d 92       	st	X+, r1
   12d88:	8a 95       	dec	r24
   12d8a:	e9 f7       	brne	.-6      	; 0x12d86 <conv_brk+0x40>
   12d8c:	d5 01       	movw	r26, r10
   12d8e:	13 96       	adiw	r26, 0x03	; 3
   12d90:	1c 91       	ld	r17, X
   12d92:	13 97       	sbiw	r26, 0x03	; 3
   12d94:	60 e0       	ldi	r22, 0x00	; 0
   12d96:	70 e0       	ldi	r23, 0x00	; 0
   12d98:	20 e0       	ldi	r18, 0x00	; 0
   12d9a:	40 e0       	ldi	r20, 0x00	; 0
   12d9c:	30 e0       	ldi	r19, 0x00	; 0
   12d9e:	4f 01       	movw	r8, r30
   12da0:	81 e0       	ldi	r24, 0x01	; 1
   12da2:	68 2e       	mov	r6, r24
   12da4:	71 2c       	mov	r7, r1
   12da6:	f6 01       	movw	r30, r12
   12da8:	13 fd       	sbrc	r17, 3
   12daa:	55 91       	lpm	r21, Z+
   12dac:	13 ff       	sbrs	r17, 3
   12dae:	51 91       	ld	r21, Z+
   12db0:	6f 01       	movw	r12, r30
   12db2:	55 23       	and	r21, r21
   12db4:	09 f4       	brne	.+2      	; 0x12db8 <conv_brk+0x72>
   12db6:	7b c0       	rjmp	.+246    	; 0x12eae <conv_brk+0x168>
   12db8:	5e 35       	cpi	r21, 0x5E	; 94
   12dba:	19 f4       	brne	.+6      	; 0x12dc2 <conv_brk+0x7c>
   12dbc:	61 15       	cp	r22, r1
   12dbe:	71 05       	cpc	r23, r1
   12dc0:	49 f1       	breq	.+82     	; 0x12e14 <conv_brk+0xce>
   12dc2:	83 2f       	mov	r24, r19
   12dc4:	90 e0       	ldi	r25, 0x00	; 0
   12dc6:	86 17       	cp	r24, r22
   12dc8:	97 07       	cpc	r25, r23
   12dca:	3c f4       	brge	.+14     	; 0x12dda <conv_brk+0x94>
   12dcc:	5d 35       	cpi	r21, 0x5D	; 93
   12dce:	51 f1       	breq	.+84     	; 0x12e24 <conv_brk+0xde>
   12dd0:	5d 32       	cpi	r21, 0x2D	; 45
   12dd2:	19 f4       	brne	.+6      	; 0x12dda <conv_brk+0x94>
   12dd4:	44 23       	and	r20, r20
   12dd6:	01 f1       	breq	.+64     	; 0x12e18 <conv_brk+0xd2>
   12dd8:	03 c0       	rjmp	.+6      	; 0x12de0 <conv_brk+0x9a>
   12dda:	44 23       	and	r20, r20
   12ddc:	09 f4       	brne	.+2      	; 0x12de0 <conv_brk+0x9a>
   12dde:	25 2f       	mov	r18, r21
   12de0:	85 2f       	mov	r24, r21
   12de2:	86 95       	lsr	r24
   12de4:	86 95       	lsr	r24
   12de6:	86 95       	lsr	r24
   12de8:	f4 01       	movw	r30, r8
   12dea:	e8 0f       	add	r30, r24
   12dec:	f1 1d       	adc	r31, r1
   12dee:	85 2f       	mov	r24, r21
   12df0:	87 70       	andi	r24, 0x07	; 7
   12df2:	23 01       	movw	r4, r6
   12df4:	02 c0       	rjmp	.+4      	; 0x12dfa <conv_brk+0xb4>
   12df6:	44 0c       	add	r4, r4
   12df8:	55 1c       	adc	r5, r5
   12dfa:	8a 95       	dec	r24
   12dfc:	e2 f7       	brpl	.-8      	; 0x12df6 <conv_brk+0xb0>
   12dfe:	80 81       	ld	r24, Z
   12e00:	84 29       	or	r24, r4
   12e02:	80 83       	st	Z, r24
   12e04:	52 17       	cp	r21, r18
   12e06:	51 f0       	breq	.+20     	; 0x12e1c <conv_brk+0xd6>
   12e08:	52 17       	cp	r21, r18
   12e0a:	10 f4       	brcc	.+4      	; 0x12e10 <conv_brk+0xca>
   12e0c:	5f 5f       	subi	r21, 0xFF	; 255
   12e0e:	e8 cf       	rjmp	.-48     	; 0x12de0 <conv_brk+0x9a>
   12e10:	51 50       	subi	r21, 0x01	; 1
   12e12:	e6 cf       	rjmp	.-52     	; 0x12de0 <conv_brk+0x9a>
   12e14:	31 e0       	ldi	r19, 0x01	; 1
   12e16:	03 c0       	rjmp	.+6      	; 0x12e1e <conv_brk+0xd8>
   12e18:	41 e0       	ldi	r20, 0x01	; 1
   12e1a:	01 c0       	rjmp	.+2      	; 0x12e1e <conv_brk+0xd8>
   12e1c:	40 e0       	ldi	r20, 0x00	; 0
   12e1e:	6f 5f       	subi	r22, 0xFF	; 255
   12e20:	7f 4f       	sbci	r23, 0xFF	; 255
   12e22:	c1 cf       	rjmp	.-126    	; 0x12da6 <conv_brk+0x60>
   12e24:	44 23       	and	r20, r20
   12e26:	19 f0       	breq	.+6      	; 0x12e2e <conv_brk+0xe8>
   12e28:	8e 81       	ldd	r24, Y+6	; 0x06
   12e2a:	80 62       	ori	r24, 0x20	; 32
   12e2c:	8e 83       	std	Y+6, r24	; 0x06
   12e2e:	33 23       	and	r19, r19
   12e30:	51 f0       	breq	.+20     	; 0x12e46 <conv_brk+0x100>
   12e32:	fe 01       	movw	r30, r28
   12e34:	31 96       	adiw	r30, 0x01	; 1
   12e36:	ce 01       	movw	r24, r28
   12e38:	81 96       	adiw	r24, 0x21	; 33
   12e3a:	20 81       	ld	r18, Z
   12e3c:	20 95       	com	r18
   12e3e:	21 93       	st	Z+, r18
   12e40:	e8 17       	cp	r30, r24
   12e42:	f9 07       	cpc	r31, r25
   12e44:	d1 f7       	brne	.-12     	; 0x12e3a <conv_brk+0xf4>
   12e46:	11 e0       	ldi	r17, 0x01	; 1
   12e48:	01 c0       	rjmp	.+2      	; 0x12e4c <conv_brk+0x106>
   12e4a:	10 e0       	ldi	r17, 0x00	; 0
   12e4c:	c5 01       	movw	r24, r10
   12e4e:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12e52:	9c 01       	movw	r18, r24
   12e54:	97 fd       	sbrc	r25, 7
   12e56:	23 c0       	rjmp	.+70     	; 0x12e9e <conv_brk+0x158>
   12e58:	86 95       	lsr	r24
   12e5a:	86 95       	lsr	r24
   12e5c:	86 95       	lsr	r24
   12e5e:	e1 e0       	ldi	r30, 0x01	; 1
   12e60:	f0 e0       	ldi	r31, 0x00	; 0
   12e62:	ec 0f       	add	r30, r28
   12e64:	fd 1f       	adc	r31, r29
   12e66:	e8 0f       	add	r30, r24
   12e68:	f1 1d       	adc	r31, r1
   12e6a:	40 81       	ld	r20, Z
   12e6c:	50 e0       	ldi	r21, 0x00	; 0
   12e6e:	c9 01       	movw	r24, r18
   12e70:	87 70       	andi	r24, 0x07	; 7
   12e72:	90 70       	andi	r25, 0x00	; 0
   12e74:	02 c0       	rjmp	.+4      	; 0x12e7a <conv_brk+0x134>
   12e76:	55 95       	asr	r21
   12e78:	47 95       	ror	r20
   12e7a:	8a 95       	dec	r24
   12e7c:	e2 f7       	brpl	.-8      	; 0x12e76 <conv_brk+0x130>
   12e7e:	40 fd       	sbrc	r20, 0
   12e80:	05 c0       	rjmp	.+10     	; 0x12e8c <conv_brk+0x146>
   12e82:	c9 01       	movw	r24, r18
   12e84:	b5 01       	movw	r22, r10
   12e86:	0e 94 f1 98 	call	0x131e2	; 0x131e2 <ungetc>
   12e8a:	09 c0       	rjmp	.+18     	; 0x12e9e <conv_brk+0x158>
   12e8c:	e1 14       	cp	r14, r1
   12e8e:	f1 04       	cpc	r15, r1
   12e90:	19 f0       	breq	.+6      	; 0x12e98 <conv_brk+0x152>
   12e92:	d7 01       	movw	r26, r14
   12e94:	2d 93       	st	X+, r18
   12e96:	7d 01       	movw	r14, r26
   12e98:	01 50       	subi	r16, 0x01	; 1
   12e9a:	b9 f6       	brne	.-82     	; 0x12e4a <conv_brk+0x104>
   12e9c:	02 c0       	rjmp	.+4      	; 0x12ea2 <conv_brk+0x15c>
   12e9e:	11 23       	and	r17, r17
   12ea0:	31 f4       	brne	.+12     	; 0x12eae <conv_brk+0x168>
   12ea2:	e1 14       	cp	r14, r1
   12ea4:	f1 04       	cpc	r15, r1
   12ea6:	29 f0       	breq	.+10     	; 0x12eb2 <conv_brk+0x16c>
   12ea8:	f7 01       	movw	r30, r14
   12eaa:	10 82       	st	Z, r1
   12eac:	02 c0       	rjmp	.+4      	; 0x12eb2 <conv_brk+0x16c>
   12eae:	cc 24       	eor	r12, r12
   12eb0:	dd 24       	eor	r13, r13
   12eb2:	c6 01       	movw	r24, r12
   12eb4:	a0 96       	adiw	r28, 0x20	; 32
   12eb6:	0f b6       	in	r0, 0x3f	; 63
   12eb8:	f8 94       	cli
   12eba:	de bf       	out	0x3e, r29	; 62
   12ebc:	0f be       	out	0x3f, r0	; 63
   12ebe:	cd bf       	out	0x3d, r28	; 61
   12ec0:	df 91       	pop	r29
   12ec2:	cf 91       	pop	r28
   12ec4:	1f 91       	pop	r17
   12ec6:	0f 91       	pop	r16
   12ec8:	ff 90       	pop	r15
   12eca:	ef 90       	pop	r14
   12ecc:	df 90       	pop	r13
   12ece:	cf 90       	pop	r12
   12ed0:	bf 90       	pop	r11
   12ed2:	af 90       	pop	r10
   12ed4:	9f 90       	pop	r9
   12ed6:	8f 90       	pop	r8
   12ed8:	7f 90       	pop	r7
   12eda:	6f 90       	pop	r6
   12edc:	5f 90       	pop	r5
   12ede:	4f 90       	pop	r4
   12ee0:	08 95       	ret

00012ee2 <vfscanf>:
   12ee2:	5f 92       	push	r5
   12ee4:	6f 92       	push	r6
   12ee6:	7f 92       	push	r7
   12ee8:	8f 92       	push	r8
   12eea:	9f 92       	push	r9
   12eec:	af 92       	push	r10
   12eee:	bf 92       	push	r11
   12ef0:	cf 92       	push	r12
   12ef2:	df 92       	push	r13
   12ef4:	ef 92       	push	r14
   12ef6:	ff 92       	push	r15
   12ef8:	0f 93       	push	r16
   12efa:	1f 93       	push	r17
   12efc:	cf 93       	push	r28
   12efe:	df 93       	push	r29
   12f00:	0f 92       	push	r0
   12f02:	cd b7       	in	r28, 0x3d	; 61
   12f04:	de b7       	in	r29, 0x3e	; 62
   12f06:	7c 01       	movw	r14, r24
   12f08:	5b 01       	movw	r10, r22
   12f0a:	3a 01       	movw	r6, r20
   12f0c:	fc 01       	movw	r30, r24
   12f0e:	17 82       	std	Z+7, r1	; 0x07
   12f10:	16 82       	std	Z+6, r1	; 0x06
   12f12:	99 24       	eor	r9, r9
   12f14:	ef c0       	rjmp	.+478    	; 0x130f4 <vfscanf+0x212>
   12f16:	81 2f       	mov	r24, r17
   12f18:	90 e0       	ldi	r25, 0x00	; 0
   12f1a:	0e 94 9e 98 	call	0x1313c	; 0x1313c <isspace>
   12f1e:	00 97       	sbiw	r24, 0x00	; 0
   12f20:	21 f0       	breq	.+8      	; 0x12f2a <vfscanf+0x48>
   12f22:	c7 01       	movw	r24, r14
   12f24:	0e 94 05 96 	call	0x12c0a	; 0x12c0a <skip_spaces>
   12f28:	e5 c0       	rjmp	.+458    	; 0x130f4 <vfscanf+0x212>
   12f2a:	15 32       	cpi	r17, 0x25	; 37
   12f2c:	41 f4       	brne	.+16     	; 0x12f3e <vfscanf+0x5c>
   12f2e:	f5 01       	movw	r30, r10
   12f30:	03 fd       	sbrc	r16, 3
   12f32:	35 91       	lpm	r19, Z+
   12f34:	03 ff       	sbrs	r16, 3
   12f36:	31 91       	ld	r19, Z+
   12f38:	5f 01       	movw	r10, r30
   12f3a:	35 32       	cpi	r19, 0x25	; 37
   12f3c:	61 f4       	brne	.+24     	; 0x12f56 <vfscanf+0x74>
   12f3e:	c7 01       	movw	r24, r14
   12f40:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   12f44:	97 fd       	sbrc	r25, 7
   12f46:	e2 c0       	rjmp	.+452    	; 0x1310c <vfscanf+0x22a>
   12f48:	18 17       	cp	r17, r24
   12f4a:	09 f4       	brne	.+2      	; 0x12f4e <vfscanf+0x6c>
   12f4c:	d3 c0       	rjmp	.+422    	; 0x130f4 <vfscanf+0x212>
   12f4e:	b7 01       	movw	r22, r14
   12f50:	0e 94 f1 98 	call	0x131e2	; 0x131e2 <ungetc>
   12f54:	dd c0       	rjmp	.+442    	; 0x13110 <vfscanf+0x22e>
   12f56:	3a 32       	cpi	r19, 0x2A	; 42
   12f58:	41 f4       	brne	.+16     	; 0x12f6a <vfscanf+0x88>
   12f5a:	03 fd       	sbrc	r16, 3
   12f5c:	35 91       	lpm	r19, Z+
   12f5e:	03 ff       	sbrs	r16, 3
   12f60:	31 91       	ld	r19, Z+
   12f62:	5f 01       	movw	r10, r30
   12f64:	55 24       	eor	r5, r5
   12f66:	53 94       	inc	r5
   12f68:	01 c0       	rjmp	.+2      	; 0x12f6c <vfscanf+0x8a>
   12f6a:	55 24       	eor	r5, r5
   12f6c:	88 24       	eor	r8, r8
   12f6e:	10 c0       	rjmp	.+32     	; 0x12f90 <vfscanf+0xae>
   12f70:	f2 e0       	ldi	r31, 0x02	; 2
   12f72:	5f 2a       	or	r5, r31
   12f74:	68 2d       	mov	r22, r8
   12f76:	70 e0       	ldi	r23, 0x00	; 0
   12f78:	80 e0       	ldi	r24, 0x00	; 0
   12f7a:	90 e0       	ldi	r25, 0x00	; 0
   12f7c:	40 e2       	ldi	r20, 0x20	; 32
   12f7e:	0e 94 d9 95 	call	0x12bb2	; 0x12bb2 <mulacc>
   12f82:	86 2e       	mov	r8, r22
   12f84:	f5 01       	movw	r30, r10
   12f86:	03 fd       	sbrc	r16, 3
   12f88:	35 91       	lpm	r19, Z+
   12f8a:	03 ff       	sbrs	r16, 3
   12f8c:	31 91       	ld	r19, Z+
   12f8e:	5f 01       	movw	r10, r30
   12f90:	23 2f       	mov	r18, r19
   12f92:	20 53       	subi	r18, 0x30	; 48
   12f94:	2a 30       	cpi	r18, 0x0A	; 10
   12f96:	60 f3       	brcs	.-40     	; 0x12f70 <vfscanf+0x8e>
   12f98:	51 fe       	sbrs	r5, 1
   12f9a:	03 c0       	rjmp	.+6      	; 0x12fa2 <vfscanf+0xc0>
   12f9c:	88 20       	and	r8, r8
   12f9e:	19 f4       	brne	.+6      	; 0x12fa6 <vfscanf+0xc4>
   12fa0:	b7 c0       	rjmp	.+366    	; 0x13110 <vfscanf+0x22e>
   12fa2:	88 24       	eor	r8, r8
   12fa4:	8a 94       	dec	r8
   12fa6:	38 36       	cpi	r19, 0x68	; 104
   12fa8:	19 f0       	breq	.+6      	; 0x12fb0 <vfscanf+0xce>
   12faa:	3c 36       	cpi	r19, 0x6C	; 108
   12fac:	99 f4       	brne	.+38     	; 0x12fd4 <vfscanf+0xf2>
   12fae:	0a c0       	rjmp	.+20     	; 0x12fc4 <vfscanf+0xe2>
   12fb0:	f5 01       	movw	r30, r10
   12fb2:	03 fd       	sbrc	r16, 3
   12fb4:	35 91       	lpm	r19, Z+
   12fb6:	03 ff       	sbrs	r16, 3
   12fb8:	31 91       	ld	r19, Z+
   12fba:	5f 01       	movw	r10, r30
   12fbc:	38 36       	cpi	r19, 0x68	; 104
   12fbe:	51 f4       	brne	.+20     	; 0x12fd4 <vfscanf+0xf2>
   12fc0:	f8 e0       	ldi	r31, 0x08	; 8
   12fc2:	5f 2a       	or	r5, r31
   12fc4:	44 e0       	ldi	r20, 0x04	; 4
   12fc6:	54 2a       	or	r5, r20
   12fc8:	f5 01       	movw	r30, r10
   12fca:	03 fd       	sbrc	r16, 3
   12fcc:	35 91       	lpm	r19, Z+
   12fce:	03 ff       	sbrs	r16, 3
   12fd0:	31 91       	ld	r19, Z+
   12fd2:	5f 01       	movw	r10, r30
   12fd4:	33 23       	and	r19, r19
   12fd6:	09 f4       	brne	.+2      	; 0x12fda <vfscanf+0xf8>
   12fd8:	9b c0       	rjmp	.+310    	; 0x13110 <vfscanf+0x22e>
   12fda:	84 ee       	ldi	r24, 0xE4	; 228
   12fdc:	90 e0       	ldi	r25, 0x00	; 0
   12fde:	63 2f       	mov	r22, r19
   12fe0:	70 e0       	ldi	r23, 0x00	; 0
   12fe2:	39 83       	std	Y+1, r19	; 0x01
   12fe4:	0e 94 a6 98 	call	0x1314c	; 0x1314c <strchr_P>
   12fe8:	39 81       	ldd	r19, Y+1	; 0x01
   12fea:	00 97       	sbiw	r24, 0x00	; 0
   12fec:	09 f4       	brne	.+2      	; 0x12ff0 <vfscanf+0x10e>
   12fee:	90 c0       	rjmp	.+288    	; 0x13110 <vfscanf+0x22e>
   12ff0:	85 2d       	mov	r24, r5
   12ff2:	50 fc       	sbrc	r5, 0
   12ff4:	08 c0       	rjmp	.+16     	; 0x13006 <vfscanf+0x124>
   12ff6:	f3 01       	movw	r30, r6
   12ff8:	00 81       	ld	r16, Z
   12ffa:	11 81       	ldd	r17, Z+1	; 0x01
   12ffc:	42 e0       	ldi	r20, 0x02	; 2
   12ffe:	50 e0       	ldi	r21, 0x00	; 0
   13000:	64 0e       	add	r6, r20
   13002:	75 1e       	adc	r7, r21
   13004:	02 c0       	rjmp	.+4      	; 0x1300a <vfscanf+0x128>
   13006:	00 e0       	ldi	r16, 0x00	; 0
   13008:	10 e0       	ldi	r17, 0x00	; 0
   1300a:	3e 36       	cpi	r19, 0x6E	; 110
   1300c:	51 f4       	brne	.+20     	; 0x13022 <vfscanf+0x140>
   1300e:	f7 01       	movw	r30, r14
   13010:	46 81       	ldd	r20, Z+6	; 0x06
   13012:	57 81       	ldd	r21, Z+7	; 0x07
   13014:	60 e0       	ldi	r22, 0x00	; 0
   13016:	70 e0       	ldi	r23, 0x00	; 0
   13018:	c8 01       	movw	r24, r16
   1301a:	25 2d       	mov	r18, r5
   1301c:	0e 94 cd 95 	call	0x12b9a	; 0x12b9a <putval>
   13020:	69 c0       	rjmp	.+210    	; 0x130f4 <vfscanf+0x212>
   13022:	33 36       	cpi	r19, 0x63	; 99
   13024:	91 f4       	brne	.+36     	; 0x1304a <vfscanf+0x168>
   13026:	81 fd       	sbrc	r24, 1
   13028:	02 c0       	rjmp	.+4      	; 0x1302e <vfscanf+0x14c>
   1302a:	88 24       	eor	r8, r8
   1302c:	83 94       	inc	r8
   1302e:	c7 01       	movw	r24, r14
   13030:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   13034:	97 fd       	sbrc	r25, 7
   13036:	6a c0       	rjmp	.+212    	; 0x1310c <vfscanf+0x22a>
   13038:	01 15       	cp	r16, r1
   1303a:	11 05       	cpc	r17, r1
   1303c:	19 f0       	breq	.+6      	; 0x13044 <vfscanf+0x162>
   1303e:	f8 01       	movw	r30, r16
   13040:	81 93       	st	Z+, r24
   13042:	8f 01       	movw	r16, r30
   13044:	8a 94       	dec	r8
   13046:	99 f7       	brne	.-26     	; 0x1302e <vfscanf+0x14c>
   13048:	53 c0       	rjmp	.+166    	; 0x130f0 <vfscanf+0x20e>
   1304a:	c7 01       	movw	r24, r14
   1304c:	3b 35       	cpi	r19, 0x5B	; 91
   1304e:	51 f4       	brne	.+20     	; 0x13064 <vfscanf+0x182>
   13050:	68 2d       	mov	r22, r8
   13052:	a8 01       	movw	r20, r16
   13054:	95 01       	movw	r18, r10
   13056:	0e 94 a3 96 	call	0x12d46	; 0x12d46 <conv_brk>
   1305a:	5c 01       	movw	r10, r24
   1305c:	00 97       	sbiw	r24, 0x00	; 0
   1305e:	09 f0       	breq	.+2      	; 0x13062 <vfscanf+0x180>
   13060:	47 c0       	rjmp	.+142    	; 0x130f0 <vfscanf+0x20e>
   13062:	41 c0       	rjmp	.+130    	; 0x130e6 <vfscanf+0x204>
   13064:	39 83       	std	Y+1, r19	; 0x01
   13066:	0e 94 05 96 	call	0x12c0a	; 0x12c0a <skip_spaces>
   1306a:	39 81       	ldd	r19, Y+1	; 0x01
   1306c:	97 fd       	sbrc	r25, 7
   1306e:	4e c0       	rjmp	.+156    	; 0x1310c <vfscanf+0x22a>
   13070:	3f 36       	cpi	r19, 0x6F	; 111
   13072:	61 f1       	breq	.+88     	; 0x130cc <vfscanf+0x1ea>
   13074:	30 37       	cpi	r19, 0x70	; 112
   13076:	28 f4       	brcc	.+10     	; 0x13082 <vfscanf+0x1a0>
   13078:	34 36       	cpi	r19, 0x64	; 100
   1307a:	29 f1       	breq	.+74     	; 0x130c6 <vfscanf+0x1e4>
   1307c:	39 36       	cpi	r19, 0x69	; 105
   1307e:	49 f5       	brne	.+82     	; 0x130d2 <vfscanf+0x1f0>
   13080:	2a c0       	rjmp	.+84     	; 0x130d6 <vfscanf+0x1f4>
   13082:	33 37       	cpi	r19, 0x73	; 115
   13084:	19 f0       	breq	.+6      	; 0x1308c <vfscanf+0x1aa>
   13086:	35 37       	cpi	r19, 0x75	; 117
   13088:	21 f5       	brne	.+72     	; 0x130d2 <vfscanf+0x1f0>
   1308a:	1d c0       	rjmp	.+58     	; 0x130c6 <vfscanf+0x1e4>
   1308c:	c7 01       	movw	r24, r14
   1308e:	0e 94 b1 98 	call	0x13162	; 0x13162 <fgetc>
   13092:	6c 01       	movw	r12, r24
   13094:	97 fd       	sbrc	r25, 7
   13096:	11 c0       	rjmp	.+34     	; 0x130ba <vfscanf+0x1d8>
   13098:	0e 94 9e 98 	call	0x1313c	; 0x1313c <isspace>
   1309c:	00 97       	sbiw	r24, 0x00	; 0
   1309e:	29 f0       	breq	.+10     	; 0x130aa <vfscanf+0x1c8>
   130a0:	c6 01       	movw	r24, r12
   130a2:	b7 01       	movw	r22, r14
   130a4:	0e 94 f1 98 	call	0x131e2	; 0x131e2 <ungetc>
   130a8:	08 c0       	rjmp	.+16     	; 0x130ba <vfscanf+0x1d8>
   130aa:	01 15       	cp	r16, r1
   130ac:	11 05       	cpc	r17, r1
   130ae:	19 f0       	breq	.+6      	; 0x130b6 <vfscanf+0x1d4>
   130b0:	f8 01       	movw	r30, r16
   130b2:	c1 92       	st	Z+, r12
   130b4:	8f 01       	movw	r16, r30
   130b6:	8a 94       	dec	r8
   130b8:	49 f7       	brne	.-46     	; 0x1308c <vfscanf+0x1aa>
   130ba:	01 15       	cp	r16, r1
   130bc:	11 05       	cpc	r17, r1
   130be:	c1 f0       	breq	.+48     	; 0x130f0 <vfscanf+0x20e>
   130c0:	f8 01       	movw	r30, r16
   130c2:	10 82       	st	Z, r1
   130c4:	15 c0       	rjmp	.+42     	; 0x130f0 <vfscanf+0x20e>
   130c6:	f0 e2       	ldi	r31, 0x20	; 32
   130c8:	5f 2a       	or	r5, r31
   130ca:	05 c0       	rjmp	.+10     	; 0x130d6 <vfscanf+0x1f4>
   130cc:	40 e1       	ldi	r20, 0x10	; 16
   130ce:	54 2a       	or	r5, r20
   130d0:	02 c0       	rjmp	.+4      	; 0x130d6 <vfscanf+0x1f4>
   130d2:	50 e4       	ldi	r21, 0x40	; 64
   130d4:	55 2a       	or	r5, r21
   130d6:	c7 01       	movw	r24, r14
   130d8:	68 2d       	mov	r22, r8
   130da:	a8 01       	movw	r20, r16
   130dc:	25 2d       	mov	r18, r5
   130de:	0e 94 1e 96 	call	0x12c3c	; 0x12c3c <conv_int>
   130e2:	88 23       	and	r24, r24
   130e4:	29 f4       	brne	.+10     	; 0x130f0 <vfscanf+0x20e>
   130e6:	f7 01       	movw	r30, r14
   130e8:	83 81       	ldd	r24, Z+3	; 0x03
   130ea:	80 73       	andi	r24, 0x30	; 48
   130ec:	79 f4       	brne	.+30     	; 0x1310c <vfscanf+0x22a>
   130ee:	10 c0       	rjmp	.+32     	; 0x13110 <vfscanf+0x22e>
   130f0:	50 fe       	sbrs	r5, 0
   130f2:	93 94       	inc	r9
   130f4:	f7 01       	movw	r30, r14
   130f6:	03 81       	ldd	r16, Z+3	; 0x03
   130f8:	f5 01       	movw	r30, r10
   130fa:	03 fd       	sbrc	r16, 3
   130fc:	15 91       	lpm	r17, Z+
   130fe:	03 ff       	sbrs	r16, 3
   13100:	11 91       	ld	r17, Z+
   13102:	5f 01       	movw	r10, r30
   13104:	11 23       	and	r17, r17
   13106:	09 f0       	breq	.+2      	; 0x1310a <vfscanf+0x228>
   13108:	06 cf       	rjmp	.-500    	; 0x12f16 <vfscanf+0x34>
   1310a:	02 c0       	rjmp	.+4      	; 0x13110 <vfscanf+0x22e>
   1310c:	99 20       	and	r9, r9
   1310e:	19 f0       	breq	.+6      	; 0x13116 <vfscanf+0x234>
   13110:	89 2d       	mov	r24, r9
   13112:	90 e0       	ldi	r25, 0x00	; 0
   13114:	02 c0       	rjmp	.+4      	; 0x1311a <vfscanf+0x238>
   13116:	8f ef       	ldi	r24, 0xFF	; 255
   13118:	9f ef       	ldi	r25, 0xFF	; 255
   1311a:	0f 90       	pop	r0
   1311c:	df 91       	pop	r29
   1311e:	cf 91       	pop	r28
   13120:	1f 91       	pop	r17
   13122:	0f 91       	pop	r16
   13124:	ff 90       	pop	r15
   13126:	ef 90       	pop	r14
   13128:	df 90       	pop	r13
   1312a:	cf 90       	pop	r12
   1312c:	bf 90       	pop	r11
   1312e:	af 90       	pop	r10
   13130:	9f 90       	pop	r9
   13132:	8f 90       	pop	r8
   13134:	7f 90       	pop	r7
   13136:	6f 90       	pop	r6
   13138:	5f 90       	pop	r5
   1313a:	08 95       	ret

0001313c <isspace>:
   1313c:	91 11       	cpse	r25, r1
   1313e:	6e c0       	rjmp	.+220    	; 0x1321c <__ctype_isfalse>
   13140:	80 32       	cpi	r24, 0x20	; 32
   13142:	19 f0       	breq	.+6      	; 0x1314a <isspace+0xe>
   13144:	89 50       	subi	r24, 0x09	; 9
   13146:	85 50       	subi	r24, 0x05	; 5
   13148:	d0 f7       	brcc	.-12     	; 0x1313e <isspace+0x2>
   1314a:	08 95       	ret

0001314c <strchr_P>:
   1314c:	fc 01       	movw	r30, r24
   1314e:	05 90       	lpm	r0, Z+
   13150:	06 16       	cp	r0, r22
   13152:	21 f0       	breq	.+8      	; 0x1315c <strchr_P+0x10>
   13154:	00 20       	and	r0, r0
   13156:	d9 f7       	brne	.-10     	; 0x1314e <strchr_P+0x2>
   13158:	c0 01       	movw	r24, r0
   1315a:	08 95       	ret
   1315c:	31 97       	sbiw	r30, 0x01	; 1
   1315e:	cf 01       	movw	r24, r30
   13160:	08 95       	ret

00013162 <fgetc>:
   13162:	cf 93       	push	r28
   13164:	df 93       	push	r29
   13166:	ec 01       	movw	r28, r24
   13168:	2b 81       	ldd	r18, Y+3	; 0x03
   1316a:	20 ff       	sbrs	r18, 0
   1316c:	35 c0       	rjmp	.+106    	; 0x131d8 <fgetc+0x76>
   1316e:	26 ff       	sbrs	r18, 6
   13170:	09 c0       	rjmp	.+18     	; 0x13184 <fgetc+0x22>
   13172:	2f 7b       	andi	r18, 0xBF	; 191
   13174:	2b 83       	std	Y+3, r18	; 0x03
   13176:	8e 81       	ldd	r24, Y+6	; 0x06
   13178:	9f 81       	ldd	r25, Y+7	; 0x07
   1317a:	01 96       	adiw	r24, 0x01	; 1
   1317c:	9f 83       	std	Y+7, r25	; 0x07
   1317e:	8e 83       	std	Y+6, r24	; 0x06
   13180:	8a 81       	ldd	r24, Y+2	; 0x02
   13182:	28 c0       	rjmp	.+80     	; 0x131d4 <fgetc+0x72>
   13184:	22 ff       	sbrs	r18, 2
   13186:	0f c0       	rjmp	.+30     	; 0x131a6 <fgetc+0x44>
   13188:	e8 81       	ld	r30, Y
   1318a:	f9 81       	ldd	r31, Y+1	; 0x01
   1318c:	80 81       	ld	r24, Z
   1318e:	99 27       	eor	r25, r25
   13190:	87 fd       	sbrc	r24, 7
   13192:	90 95       	com	r25
   13194:	00 97       	sbiw	r24, 0x00	; 0
   13196:	19 f4       	brne	.+6      	; 0x1319e <fgetc+0x3c>
   13198:	20 62       	ori	r18, 0x20	; 32
   1319a:	2b 83       	std	Y+3, r18	; 0x03
   1319c:	1d c0       	rjmp	.+58     	; 0x131d8 <fgetc+0x76>
   1319e:	31 96       	adiw	r30, 0x01	; 1
   131a0:	f9 83       	std	Y+1, r31	; 0x01
   131a2:	e8 83       	st	Y, r30
   131a4:	11 c0       	rjmp	.+34     	; 0x131c8 <fgetc+0x66>
   131a6:	ea 85       	ldd	r30, Y+10	; 0x0a
   131a8:	fb 85       	ldd	r31, Y+11	; 0x0b
   131aa:	ce 01       	movw	r24, r28
   131ac:	19 95       	eicall
   131ae:	97 ff       	sbrs	r25, 7
   131b0:	0b c0       	rjmp	.+22     	; 0x131c8 <fgetc+0x66>
   131b2:	2b 81       	ldd	r18, Y+3	; 0x03
   131b4:	3f ef       	ldi	r19, 0xFF	; 255
   131b6:	8f 3f       	cpi	r24, 0xFF	; 255
   131b8:	93 07       	cpc	r25, r19
   131ba:	11 f4       	brne	.+4      	; 0x131c0 <fgetc+0x5e>
   131bc:	80 e1       	ldi	r24, 0x10	; 16
   131be:	01 c0       	rjmp	.+2      	; 0x131c2 <fgetc+0x60>
   131c0:	80 e2       	ldi	r24, 0x20	; 32
   131c2:	82 2b       	or	r24, r18
   131c4:	8b 83       	std	Y+3, r24	; 0x03
   131c6:	08 c0       	rjmp	.+16     	; 0x131d8 <fgetc+0x76>
   131c8:	2e 81       	ldd	r18, Y+6	; 0x06
   131ca:	3f 81       	ldd	r19, Y+7	; 0x07
   131cc:	2f 5f       	subi	r18, 0xFF	; 255
   131ce:	3f 4f       	sbci	r19, 0xFF	; 255
   131d0:	3f 83       	std	Y+7, r19	; 0x07
   131d2:	2e 83       	std	Y+6, r18	; 0x06
   131d4:	90 e0       	ldi	r25, 0x00	; 0
   131d6:	02 c0       	rjmp	.+4      	; 0x131dc <fgetc+0x7a>
   131d8:	8f ef       	ldi	r24, 0xFF	; 255
   131da:	9f ef       	ldi	r25, 0xFF	; 255
   131dc:	df 91       	pop	r29
   131de:	cf 91       	pop	r28
   131e0:	08 95       	ret

000131e2 <ungetc>:
   131e2:	fb 01       	movw	r30, r22
   131e4:	23 81       	ldd	r18, Z+3	; 0x03
   131e6:	20 ff       	sbrs	r18, 0
   131e8:	13 c0       	rjmp	.+38     	; 0x13210 <ungetc+0x2e>
   131ea:	26 fd       	sbrc	r18, 6
   131ec:	11 c0       	rjmp	.+34     	; 0x13210 <ungetc+0x2e>
   131ee:	3f ef       	ldi	r19, 0xFF	; 255
   131f0:	8f 3f       	cpi	r24, 0xFF	; 255
   131f2:	93 07       	cpc	r25, r19
   131f4:	81 f0       	breq	.+32     	; 0x13216 <ungetc+0x34>
   131f6:	82 83       	std	Z+2, r24	; 0x02
   131f8:	92 2f       	mov	r25, r18
   131fa:	90 64       	ori	r25, 0x40	; 64
   131fc:	9f 7d       	andi	r25, 0xDF	; 223
   131fe:	93 83       	std	Z+3, r25	; 0x03
   13200:	26 81       	ldd	r18, Z+6	; 0x06
   13202:	37 81       	ldd	r19, Z+7	; 0x07
   13204:	21 50       	subi	r18, 0x01	; 1
   13206:	30 40       	sbci	r19, 0x00	; 0
   13208:	37 83       	std	Z+7, r19	; 0x07
   1320a:	26 83       	std	Z+6, r18	; 0x06
   1320c:	90 e0       	ldi	r25, 0x00	; 0
   1320e:	08 95       	ret
   13210:	8f ef       	ldi	r24, 0xFF	; 255
   13212:	9f ef       	ldi	r25, 0xFF	; 255
   13214:	08 95       	ret
   13216:	8f ef       	ldi	r24, 0xFF	; 255
   13218:	9f ef       	ldi	r25, 0xFF	; 255
   1321a:	08 95       	ret

0001321c <__ctype_isfalse>:
   1321c:	99 27       	eor	r25, r25
   1321e:	88 27       	eor	r24, r24

00013220 <__ctype_istrue>:
   13220:	08 95       	ret

00013222 <_exit>:
   13222:	f8 94       	cli

00013224 <__stop_program>:
   13224:	ff cf       	rjmp	.-2      	; 0x13224 <__stop_program>
