
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800200  00010f74  00011008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00010f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  00800348  00800348  00011150  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  00011150  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009e7  00000000  00000000  00013a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001d0  00000000  00000000  00014458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006bfb  00000000  00000000  00014628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  0001b223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dd1  00000000  00000000  0001bc17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001310  00000000  00000000  0001e9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d07  00000000  00000000  0001fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000358e  00000000  00000000  000209ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00023f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_5>
      18:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_6>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__vector_35>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_45>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 96 7a 	jmp	0xf52c	; 0xf52c <__vector_51>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	e4 e7       	ldi	r30, 0x74	; 116
     108:	ff e0       	ldi	r31, 0x0F	; 15
     10a:	01 e0       	ldi	r16, 0x01	; 1
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a8 34       	cpi	r26, 0x48	; 72
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	15 e0       	ldi	r17, 0x05	; 5
     11c:	a8 e4       	ldi	r26, 0x48	; 72
     11e:	b3 e0       	ldi	r27, 0x03	; 3
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a7 31       	cpi	r26, 0x17	; 23
     126:	b1 07       	cpc	r27, r17
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 9a 7c 	call	0xf934	; 0xf934 <main>
     12e:	0c 94 b8 87 	jmp	0x10f70	; 0x10f70 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <lcd_set_4bit>:

/*****Function to Reset LCD*****/

void lcd_set_4bit()

{
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	c0 57       	subi	r28, 0x70	; 112
     144:	d0 40       	sbci	r29, 0x00	; 0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e8       	ldi	r26, 0x80	; 128
     156:	bf e3       	ldi	r27, 0x3F	; 63
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	ab 83       	std	Y+3, r26	; 0x03
     15e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	26 e6       	ldi	r18, 0x66	; 102
     16a:	36 e6       	ldi	r19, 0x66	; 102
     16c:	46 e6       	ldi	r20, 0x66	; 102
     16e:	55 e4       	ldi	r21, 0x45	; 69
     170:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	8d 83       	std	Y+5, r24	; 0x05
     17a:	9e 83       	std	Y+6, r25	; 0x06
     17c:	af 83       	std	Y+7, r26	; 0x07
     17e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e8       	ldi	r20, 0x80	; 128
     190:	5f e3       	ldi	r21, 0x3F	; 63
     192:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <lcd_set_4bit+0x66>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	29 f0       	breq	.+10     	; 0x1aa <lcd_set_4bit+0x74>
		__ticks = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	3f ef       	ldi	r19, 0xFF	; 255
     1b8:	4f e7       	ldi	r20, 0x7F	; 127
     1ba:	57 e4       	ldi	r21, 0x47	; 71
     1bc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     1c0:	18 16       	cp	r1, r24
     1c2:	0c f0       	brlt	.+2      	; 0x1c6 <lcd_set_4bit+0x90>
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	11 23       	and	r17, r17
     1c8:	61 f1       	breq	.+88     	; 0x222 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ca:	69 81       	ldd	r22, Y+1	; 0x01
     1cc:	7a 81       	ldd	r23, Y+2	; 0x02
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	89 87       	std	Y+9, r24	; 0x09
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <lcd_set_4bit+0xe2>
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	8c 01       	movw	r16, r24
     202:	c8 01       	movw	r24, r16
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0xce>
     208:	8c 01       	movw	r16, r24
     20a:	1c 87       	std	Y+12, r17	; 0x0c
     20c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	9a 85       	ldd	r25, Y+10	; 0x0a
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	51 f7       	brne	.-44     	; 0x1f4 <lcd_set_4bit+0xbe>
     220:	17 c0       	rjmp	.+46     	; 0x250 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	6d 81       	ldd	r22, Y+5	; 0x05
     224:	7e 81       	ldd	r23, Y+6	; 0x06
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	9e 87       	std	Y+14, r25	; 0x0e
     23c:	8d 87       	std	Y+13, r24	; 0x0d
     23e:	8d 85       	ldd	r24, Y+13	; 0x0d
     240:	9e 85       	ldd	r25, Y+14	; 0x0e
     242:	8c 01       	movw	r16, r24
     244:	f8 01       	movw	r30, r16
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_set_4bit+0x110>
     24a:	8f 01       	movw	r16, r30
     24c:	1e 87       	std	Y+14, r17	; 0x0e
     24e:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	28 e2       	ldi	r18, 0x28	; 40
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2e 7f       	andi	r18, 0xFE	; 254
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     262:	88 e2       	ldi	r24, 0x28	; 40
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	28 e2       	ldi	r18, 0x28	; 40
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	20 e3       	ldi	r18, 0x30	; 48
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 e2       	ldi	r18, 0x28	; 40
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	24 60       	ori	r18, 0x04	; 4
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 ea       	ldi	r26, 0xA0	; 160
     296:	b0 e4       	ldi	r27, 0x40	; 64
     298:	8f 87       	std	Y+15, r24	; 0x0f
     29a:	98 8b       	std	Y+16, r25	; 0x10
     29c:	a9 8b       	std	Y+17, r26	; 0x11
     29e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a2:	78 89       	ldd	r23, Y+16	; 0x10
     2a4:	89 89       	ldd	r24, Y+17	; 0x11
     2a6:	9a 89       	ldd	r25, Y+18	; 0x12
     2a8:	26 e6       	ldi	r18, 0x66	; 102
     2aa:	36 e6       	ldi	r19, 0x66	; 102
     2ac:	46 e6       	ldi	r20, 0x66	; 102
     2ae:	55 e4       	ldi	r21, 0x45	; 69
     2b0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	8b 8b       	std	Y+19, r24	; 0x13
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	ad 8b       	std	Y+21, r26	; 0x15
     2be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	6b 89       	ldd	r22, Y+19	; 0x13
     2c4:	7c 89       	ldd	r23, Y+20	; 0x14
     2c6:	8d 89       	ldd	r24, Y+21	; 0x15
     2c8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <lcd_set_4bit+0x1a6>
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	11 23       	and	r17, r17
     2de:	29 f0       	breq	.+10     	; 0x2ea <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 8f       	std	Y+24, r25	; 0x18
     2e6:	8f 8b       	std	Y+23, r24	; 0x17
     2e8:	46 c0       	rjmp	.+140    	; 0x376 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	6b 89       	ldd	r22, Y+19	; 0x13
     2ee:	7c 89       	ldd	r23, Y+20	; 0x14
     2f0:	8d 89       	ldd	r24, Y+21	; 0x15
     2f2:	9e 89       	ldd	r25, Y+22	; 0x16
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	3f ef       	ldi	r19, 0xFF	; 255
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	57 e4       	ldi	r21, 0x47	; 71
     2fc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     300:	18 16       	cp	r1, r24
     302:	0c f0       	brlt	.+2      	; 0x306 <lcd_set_4bit+0x1d0>
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	11 23       	and	r17, r17
     308:	61 f1       	breq	.+88     	; 0x362 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     30a:	6f 85       	ldd	r22, Y+15	; 0x0f
     30c:	78 89       	ldd	r23, Y+16	; 0x10
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	9a 89       	ldd	r25, Y+18	; 0x12
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	98 8f       	std	Y+24, r25	; 0x18
     330:	8f 8b       	std	Y+23, r24	; 0x17
     332:	12 c0       	rjmp	.+36     	; 0x358 <lcd_set_4bit+0x222>
     334:	80 e7       	ldi	r24, 0x70	; 112
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	9a 8f       	std	Y+26, r25	; 0x1a
     33a:	89 8f       	std	Y+25, r24	; 0x19
     33c:	89 8d       	ldd	r24, Y+25	; 0x19
     33e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     340:	8c 01       	movw	r16, r24
     342:	c8 01       	movw	r24, r16
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_set_4bit+0x20e>
     348:	8c 01       	movw	r16, r24
     34a:	1a 8f       	std	Y+26, r17	; 0x1a
     34c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34e:	8f 89       	ldd	r24, Y+23	; 0x17
     350:	98 8d       	ldd	r25, Y+24	; 0x18
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	98 8f       	std	Y+24, r25	; 0x18
     356:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     358:	8f 89       	ldd	r24, Y+23	; 0x17
     35a:	98 8d       	ldd	r25, Y+24	; 0x18
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	51 f7       	brne	.-44     	; 0x334 <lcd_set_4bit+0x1fe>
     360:	17 c0       	rjmp	.+46     	; 0x390 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	6b 89       	ldd	r22, Y+19	; 0x13
     364:	7c 89       	ldd	r23, Y+20	; 0x14
     366:	8d 89       	ldd	r24, Y+21	; 0x15
     368:	9e 89       	ldd	r25, Y+22	; 0x16
     36a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	98 8f       	std	Y+24, r25	; 0x18
     374:	8f 8b       	std	Y+23, r24	; 0x17
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	9c 8f       	std	Y+28, r25	; 0x1c
     37c:	8b 8f       	std	Y+27, r24	; 0x1b
     37e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     380:	9c 8d       	ldd	r25, Y+28	; 0x1c
     382:	8c 01       	movw	r16, r24
     384:	f8 01       	movw	r30, r16
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_set_4bit+0x250>
     38a:	8f 01       	movw	r16, r30
     38c:	1c 8f       	std	Y+28, r17	; 0x1c
     38e:	0b 8f       	std	Y+27, r16	; 0x1b

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     390:	88 e2       	ldi	r24, 0x28	; 40
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	28 e2       	ldi	r18, 0x28	; 40
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2b 7f       	andi	r18, 0xFB	; 251
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e8       	ldi	r26, 0x80	; 128
     3a8:	bf e3       	ldi	r27, 0x3F	; 63
     3aa:	8d 8f       	std	Y+29, r24	; 0x1d
     3ac:	9e 8f       	std	Y+30, r25	; 0x1e
     3ae:	af 8f       	std	Y+31, r26	; 0x1f
     3b0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3b4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b8:	98 a1       	lds	r25, 0x48
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	46 e6       	ldi	r20, 0x66	; 102
     3c0:	55 e4       	ldi	r21, 0x45	; 69
     3c2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	89 a3       	lds	r24, 0x59
     3cc:	9a a3       	lds	r25, 0x5a
     3ce:	ab a3       	lds	r26, 0x5b
     3d0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 a1       	lds	r22, 0x49
     3d6:	7a a1       	lds	r23, 0x4a
     3d8:	8b a1       	lds	r24, 0x4b
     3da:	9c a1       	lds	r25, 0x4c
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5f e3       	ldi	r21, 0x3F	; 63
     3e4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <lcd_set_4bit+0x2b8>
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	11 23       	and	r17, r17
     3f0:	29 f0       	breq	.+10     	; 0x3fc <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9e a3       	lds	r25, 0x5e
     3f8:	8d a3       	lds	r24, 0x5d
     3fa:	46 c0       	rjmp	.+140    	; 0x488 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3fc:	11 e0       	ldi	r17, 0x01	; 1
     3fe:	69 a1       	lds	r22, 0x49
     400:	7a a1       	lds	r23, 0x4a
     402:	8b a1       	lds	r24, 0x4b
     404:	9c a1       	lds	r25, 0x4c
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	0c f0       	brlt	.+2      	; 0x418 <lcd_set_4bit+0x2e2>
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	11 23       	and	r17, r17
     41a:	61 f1       	breq	.+88     	; 0x474 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     41e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     420:	8f 8d       	ldd	r24, Y+31	; 0x1f
     422:	98 a1       	lds	r25, 0x48
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e2       	ldi	r20, 0x20	; 32
     42a:	51 e4       	ldi	r21, 0x41	; 65
     42c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	9e a3       	lds	r25, 0x5e
     442:	8d a3       	lds	r24, 0x5d
     444:	12 c0       	rjmp	.+36     	; 0x46a <lcd_set_4bit+0x334>
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 a7       	lds	r25, 0x78
     44c:	8f a3       	lds	r24, 0x5f
     44e:	8f a1       	lds	r24, 0x4f
     450:	98 a5       	lds	r25, 0x68
     452:	8c 01       	movw	r16, r24
     454:	c8 01       	movw	r24, r16
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_set_4bit+0x320>
     45a:	8c 01       	movw	r16, r24
     45c:	18 a7       	lds	r17, 0x78
     45e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	8d a1       	lds	r24, 0x4d
     462:	9e a1       	lds	r25, 0x4e
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	9e a3       	lds	r25, 0x5e
     468:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	8d a1       	lds	r24, 0x4d
     46c:	9e a1       	lds	r25, 0x4e
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	51 f7       	brne	.-44     	; 0x446 <lcd_set_4bit+0x310>
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     474:	69 a1       	lds	r22, 0x49
     476:	7a a1       	lds	r23, 0x4a
     478:	8b a1       	lds	r24, 0x4b
     47a:	9c a1       	lds	r25, 0x4c
     47c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9e a3       	lds	r25, 0x5e
     486:	8d a3       	lds	r24, 0x5d
     488:	8d a1       	lds	r24, 0x4d
     48a:	9e a1       	lds	r25, 0x4e
     48c:	9a a7       	lds	r25, 0x7a
     48e:	89 a7       	lds	r24, 0x79
     490:	89 a5       	lds	r24, 0x69
     492:	9a a5       	lds	r25, 0x6a
     494:	8c 01       	movw	r16, r24
     496:	f8 01       	movw	r30, r16
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_set_4bit+0x362>
     49c:	8f 01       	movw	r16, r30
     49e:	1a a7       	lds	r17, 0x7a
     4a0:	09 a7       	lds	r16, 0x79

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	28 e2       	ldi	r18, 0x28	; 40
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2e 7f       	andi	r18, 0xFE	; 254
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4b4:	88 e2       	ldi	r24, 0x28	; 40
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 e2       	ldi	r18, 0x28	; 40
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2d 7f       	andi	r18, 0xFD	; 253
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	20 e3       	ldi	r18, 0x30	; 48
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     4d0:	88 e2       	ldi	r24, 0x28	; 40
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 e2       	ldi	r18, 0x28	; 40
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	24 60       	ori	r18, 0x04	; 4
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 ea       	ldi	r26, 0xA0	; 160
     4e8:	b0 e4       	ldi	r27, 0x40	; 64
     4ea:	8b a7       	lds	r24, 0x7b
     4ec:	9c a7       	lds	r25, 0x7c
     4ee:	ad a7       	lds	r26, 0x7d
     4f0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f2:	6b a5       	lds	r22, 0x6b
     4f4:	7c a5       	lds	r23, 0x6c
     4f6:	8d a5       	lds	r24, 0x6d
     4f8:	9e a5       	lds	r25, 0x6e
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 e6       	ldi	r20, 0x66	; 102
     500:	55 e4       	ldi	r21, 0x45	; 69
     502:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	8f a7       	lds	r24, 0x7f
     50c:	98 ab       	sts	0x58, r25
     50e:	a9 ab       	sts	0x59, r26
     510:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     512:	11 e0       	ldi	r17, 0x01	; 1
     514:	6f a5       	lds	r22, 0x6f
     516:	78 a9       	sts	0x48, r23
     518:	89 a9       	sts	0x49, r24
     51a:	9a a9       	sts	0x4a, r25
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	0c f0       	brlt	.+2      	; 0x52e <lcd_set_4bit+0x3f8>
     52c:	10 e0       	ldi	r17, 0x00	; 0
     52e:	11 23       	and	r17, r17
     530:	29 f0       	breq	.+10     	; 0x53c <lcd_set_4bit+0x406>
		__ticks = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9c ab       	sts	0x5c, r25
     538:	8b ab       	sts	0x5b, r24
     53a:	46 c0       	rjmp	.+140    	; 0x5c8 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	6f a5       	lds	r22, 0x6f
     540:	78 a9       	sts	0x48, r23
     542:	89 a9       	sts	0x49, r24
     544:	9a a9       	sts	0x4a, r25
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	3f ef       	ldi	r19, 0xFF	; 255
     54a:	4f e7       	ldi	r20, 0x7F	; 127
     54c:	57 e4       	ldi	r21, 0x47	; 71
     54e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <lcd_set_4bit+0x422>
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	11 23       	and	r17, r17
     55a:	61 f1       	breq	.+88     	; 0x5b4 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	6b a5       	lds	r22, 0x6b
     55e:	7c a5       	lds	r23, 0x6c
     560:	8d a5       	lds	r24, 0x6d
     562:	9e a5       	lds	r25, 0x6e
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c ab       	sts	0x5c, r25
     582:	8b ab       	sts	0x5b, r24
     584:	12 c0       	rjmp	.+36     	; 0x5aa <lcd_set_4bit+0x474>
     586:	80 e7       	ldi	r24, 0x70	; 112
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9e ab       	sts	0x5e, r25
     58c:	8d ab       	sts	0x5d, r24
     58e:	8d a9       	sts	0x4d, r24
     590:	9e a9       	sts	0x4e, r25
     592:	8c 01       	movw	r16, r24
     594:	c8 01       	movw	r24, r16
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_set_4bit+0x460>
     59a:	8c 01       	movw	r16, r24
     59c:	1e ab       	sts	0x5e, r17
     59e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	8b a9       	sts	0x4b, r24
     5a2:	9c a9       	sts	0x4c, r25
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9c ab       	sts	0x5c, r25
     5a8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	8b a9       	sts	0x4b, r24
     5ac:	9c a9       	sts	0x4c, r25
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	51 f7       	brne	.-44     	; 0x586 <lcd_set_4bit+0x450>
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6f a5       	lds	r22, 0x6f
     5b6:	78 a9       	sts	0x48, r23
     5b8:	89 a9       	sts	0x49, r24
     5ba:	9a a9       	sts	0x4a, r25
     5bc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9c ab       	sts	0x5c, r25
     5c6:	8b ab       	sts	0x5b, r24
     5c8:	8b a9       	sts	0x4b, r24
     5ca:	9c a9       	sts	0x4c, r25
     5cc:	98 af       	sts	0x78, r25
     5ce:	8f ab       	sts	0x5f, r24
     5d0:	8f a9       	sts	0x4f, r24
     5d2:	98 ad       	sts	0x68, r25
     5d4:	8c 01       	movw	r16, r24
     5d6:	f8 01       	movw	r30, r16
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_set_4bit+0x4a2>
     5dc:	8f 01       	movw	r16, r30
     5de:	18 af       	sts	0x78, r17
     5e0:	0f ab       	sts	0x5f, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	28 e2       	ldi	r18, 0x28	; 40
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	2b 7f       	andi	r18, 0xFB	; 251
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e8       	ldi	r26, 0x80	; 128
     5fa:	bf e3       	ldi	r27, 0x3F	; 63
     5fc:	89 af       	sts	0x79, r24
     5fe:	9a af       	sts	0x7a, r25
     600:	ab af       	sts	0x7b, r26
     602:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     604:	69 ad       	sts	0x69, r22
     606:	7a ad       	sts	0x6a, r23
     608:	8b ad       	sts	0x6b, r24
     60a:	9c ad       	sts	0x6c, r25
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e6       	ldi	r20, 0x66	; 102
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	9e 01       	movw	r18, r28
     61e:	23 5c       	subi	r18, 0xC3	; 195
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	cd 96       	adiw	r24, 0x3d	; 61
     632:	fc 01       	movw	r30, r24
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <lcd_set_4bit+0x518>
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 23       	and	r17, r17
     650:	49 f0       	breq	.+18     	; 0x664 <lcd_set_4bit+0x52e>
		__ticks = 1;
     652:	ce 01       	movw	r24, r28
     654:	8f 5b       	subi	r24, 0xBF	; 191
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	31 83       	std	Z+1, r19	; 0x01
     660:	20 83       	st	Z, r18
     662:	6e c0       	rjmp	.+220    	; 0x740 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     664:	11 e0       	ldi	r17, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	cd 96       	adiw	r24, 0x3d	; 61
     66a:	fc 01       	movw	r30, r24
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <lcd_set_4bit+0x550>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	11 23       	and	r17, r17
     688:	09 f4       	brne	.+2      	; 0x68c <lcd_set_4bit+0x556>
     68a:	49 c0       	rjmp	.+146    	; 0x71e <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	69 ad       	sts	0x69, r22
     68e:	7a ad       	sts	0x6a, r23
     690:	8b ad       	sts	0x6b, r24
     692:	9c ad       	sts	0x6c, r25
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e2       	ldi	r20, 0x20	; 32
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	8e 01       	movw	r16, r28
     6a6:	0f 5b       	subi	r16, 0xBF	; 191
     6a8:	1f 4f       	sbci	r17, 0xFF	; 255
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	f8 01       	movw	r30, r16
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	27 c0       	rjmp	.+78     	; 0x70c <lcd_set_4bit+0x5d6>
     6be:	ce 01       	movw	r24, r28
     6c0:	8d 5b       	subi	r24, 0xBD	; 189
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	20 e7       	ldi	r18, 0x70	; 112
     6c6:	31 e0       	ldi	r19, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
     6ce:	ce 01       	movw	r24, r28
     6d0:	8d 5b       	subi	r24, 0xBD	; 189
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	8c 01       	movw	r16, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_set_4bit+0x5a8>
     6e2:	8c 01       	movw	r16, r24
     6e4:	ce 01       	movw	r24, r28
     6e6:	8d 5b       	subi	r24, 0xBD	; 189
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	fc 01       	movw	r30, r24
     6ec:	11 83       	std	Z+1, r17	; 0x01
     6ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	ce 01       	movw	r24, r28
     6f2:	8f 5b       	subi	r24, 0xBF	; 191
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	9e 01       	movw	r18, r28
     6f8:	2f 5b       	subi	r18, 0xBF	; 191
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	31 81       	ldd	r19, Z+1	; 0x01
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	ce 01       	movw	r24, r28
     70e:	8f 5b       	subi	r24, 0xBF	; 191
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	89 f6       	brne	.-94     	; 0x6be <lcd_set_4bit+0x588>
     71c:	2e c0       	rjmp	.+92     	; 0x77a <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71e:	8e 01       	movw	r16, r28
     720:	0f 5b       	subi	r16, 0xBF	; 191
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	ce 01       	movw	r24, r28
     726:	cd 96       	adiw	r24, 0x3d	; 61
     728:	fc 01       	movw	r30, r24
     72a:	60 81       	ld	r22, Z
     72c:	71 81       	ldd	r23, Z+1	; 0x01
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	f8 01       	movw	r30, r16
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	ce 01       	movw	r24, r28
     742:	8b 5b       	subi	r24, 0xBB	; 187
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	9e 01       	movw	r18, r28
     748:	2f 5b       	subi	r18, 0xBF	; 191
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	fc 01       	movw	r30, r24
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	20 83       	st	Z, r18
     758:	ce 01       	movw	r24, r28
     75a:	8b 5b       	subi	r24, 0xBB	; 187
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	8c 01       	movw	r16, r24
     766:	c8 01       	movw	r24, r16
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <lcd_set_4bit+0x632>
     76c:	8c 01       	movw	r16, r24
     76e:	ce 01       	movw	r24, r28
     770:	8b 5b       	subi	r24, 0xBB	; 187
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	fc 01       	movw	r30, r24
     776:	11 83       	std	Z+1, r17	; 0x01
     778:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	28 e2       	ldi	r18, 0x28	; 40
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2e 7f       	andi	r18, 0xFE	; 254
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     78c:	88 e2       	ldi	r24, 0x28	; 40
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	28 e2       	ldi	r18, 0x28	; 40
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2d 7f       	andi	r18, 0xFD	; 253
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	20 e3       	ldi	r18, 0x30	; 48
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 e2       	ldi	r18, 0x28	; 40
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	24 60       	ori	r18, 0x04	; 4
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	9e 01       	movw	r18, r28
     7bc:	29 5b       	subi	r18, 0xB9	; 185
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 ea       	ldi	r26, 0xA0	; 160
     7c6:	b0 e4       	ldi	r27, 0x40	; 64
     7c8:	f9 01       	movw	r30, r18
     7ca:	80 83       	st	Z, r24
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	a2 83       	std	Z+2, r26	; 0x02
     7d0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	8e 01       	movw	r16, r28
     7d4:	05 5b       	subi	r16, 0xB5	; 181
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	60 81       	ld	r22, Z
     7e2:	71 81       	ldd	r23, Z+1	; 0x01
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	93 81       	ldd	r25, Z+3	; 0x03
     7e8:	26 e6       	ldi	r18, 0x66	; 102
     7ea:	36 e6       	ldi	r19, 0x66	; 102
     7ec:	46 e6       	ldi	r20, 0x66	; 102
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     802:	ce 01       	movw	r24, r28
     804:	85 5b       	subi	r24, 0xB5	; 181
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <lcd_set_4bit+0x6f0>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	11 23       	and	r17, r17
     828:	49 f0       	breq	.+18     	; 0x83c <lcd_set_4bit+0x706>
		__ticks = 1;
     82a:	ce 01       	movw	r24, r28
     82c:	81 5b       	subi	r24, 0xB1	; 177
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	74 c0       	rjmp	.+232    	; 0x924 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     83c:	ce 01       	movw	r24, r28
     83e:	85 5b       	subi	r24, 0xB5	; 181
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <lcd_set_4bit+0x72a>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	11 23       	and	r17, r17
     862:	09 f4       	brne	.+2      	; 0x866 <lcd_set_4bit+0x730>
     864:	4d c0       	rjmp	.+154    	; 0x900 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	ce 01       	movw	r24, r28
     868:	89 5b       	subi	r24, 0xB9	; 185
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	fc 01       	movw	r30, r24
     86e:	60 81       	ld	r22, Z
     870:	71 81       	ldd	r23, Z+1	; 0x01
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	93 81       	ldd	r25, Z+3	; 0x03
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8e 01       	movw	r16, r28
     888:	01 5b       	subi	r16, 0xB1	; 177
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	f8 01       	movw	r30, r16
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
     89e:	27 c0       	rjmp	.+78     	; 0x8ee <lcd_set_4bit+0x7b8>
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 5a       	subi	r24, 0xAF	; 175
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	20 e7       	ldi	r18, 0x70	; 112
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	ce 01       	movw	r24, r28
     8b2:	8f 5a       	subi	r24, 0xAF	; 175
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	8c 01       	movw	r16, r24
     8be:	c8 01       	movw	r24, r16
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_set_4bit+0x78a>
     8c4:	8c 01       	movw	r16, r24
     8c6:	ce 01       	movw	r24, r28
     8c8:	8f 5a       	subi	r24, 0xAF	; 175
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 83       	std	Z+1, r17	; 0x01
     8d0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	ce 01       	movw	r24, r28
     8d4:	81 5b       	subi	r24, 0xB1	; 177
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	9e 01       	movw	r18, r28
     8da:	21 5b       	subi	r18, 0xB1	; 177
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	30 40       	sbci	r19, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	ce 01       	movw	r24, r28
     8f0:	81 5b       	subi	r24, 0xB1	; 177
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	89 f6       	brne	.-94     	; 0x8a0 <lcd_set_4bit+0x76a>
     8fe:	2f c0       	rjmp	.+94     	; 0x95e <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     900:	8e 01       	movw	r16, r28
     902:	01 5b       	subi	r16, 0xB1	; 177
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	ce 01       	movw	r24, r28
     908:	85 5b       	subi	r24, 0xB5	; 181
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	ce 01       	movw	r24, r28
     926:	8d 5a       	subi	r24, 0xAD	; 173
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	9e 01       	movw	r18, r28
     92c:	21 5b       	subi	r18, 0xB1	; 177
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	20 83       	st	Z, r18
     93c:	ce 01       	movw	r24, r28
     93e:	8d 5a       	subi	r24, 0xAD	; 173
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	8c 01       	movw	r16, r24
     94a:	c8 01       	movw	r24, r16
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <lcd_set_4bit+0x816>
     950:	8c 01       	movw	r16, r24
     952:	ce 01       	movw	r24, r28
     954:	8d 5a       	subi	r24, 0xAD	; 173
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	fc 01       	movw	r30, r24
     95a:	11 83       	std	Z+1, r17	; 0x01
     95c:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 e2       	ldi	r18, 0x28	; 40
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2b 7f       	andi	r18, 0xFB	; 251
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	9e 01       	movw	r18, r28
     972:	2b 5a       	subi	r18, 0xAB	; 171
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e8       	ldi	r26, 0x80	; 128
     97c:	bf e3       	ldi	r27, 0x3F	; 63
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     988:	8e 01       	movw	r16, r28
     98a:	07 5a       	subi	r16, 0xA7	; 167
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	ce 01       	movw	r24, r28
     990:	8b 5a       	subi	r24, 0xAB	; 171
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 e6       	ldi	r20, 0x66	; 102
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	87 5a       	subi	r24, 0xA7	; 167
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	fc 01       	movw	r30, r24
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <lcd_set_4bit+0x8a6>
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	11 23       	and	r17, r17
     9de:	49 f0       	breq	.+18     	; 0x9f2 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9e0:	ce 01       	movw	r24, r28
     9e2:	83 5a       	subi	r24, 0xA3	; 163
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	74 c0       	rjmp	.+232    	; 0xada <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9f2:	ce 01       	movw	r24, r28
     9f4:	87 5a       	subi	r24, 0xA7	; 167
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	11 e0       	ldi	r17, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     a10:	18 16       	cp	r1, r24
     a12:	0c f0       	brlt	.+2      	; 0xa16 <lcd_set_4bit+0x8e0>
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	11 23       	and	r17, r17
     a18:	09 f4       	brne	.+2      	; 0xa1c <lcd_set_4bit+0x8e6>
     a1a:	4d c0       	rjmp	.+154    	; 0xab6 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1c:	ce 01       	movw	r24, r28
     a1e:	8b 5a       	subi	r24, 0xAB	; 171
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	8e 01       	movw	r16, r28
     a3e:	03 5a       	subi	r16, 0xA3	; 163
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	f8 01       	movw	r30, r16
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <lcd_set_4bit+0x96e>
     a56:	ce 01       	movw	r24, r28
     a58:	81 5a       	subi	r24, 0xA1	; 161
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	20 e7       	ldi	r18, 0x70	; 112
     a5e:	31 e0       	ldi	r19, 0x01	; 1
     a60:	fc 01       	movw	r30, r24
     a62:	31 83       	std	Z+1, r19	; 0x01
     a64:	20 83       	st	Z, r18
     a66:	ce 01       	movw	r24, r28
     a68:	81 5a       	subi	r24, 0xA1	; 161
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	8c 01       	movw	r16, r24
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <lcd_set_4bit+0x940>
     a7a:	8c 01       	movw	r16, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	81 5a       	subi	r24, 0xA1	; 161
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	11 83       	std	Z+1, r17	; 0x01
     a86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	ce 01       	movw	r24, r28
     a8a:	83 5a       	subi	r24, 0xA3	; 163
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9e 01       	movw	r18, r28
     a90:	23 5a       	subi	r18, 0xA3	; 163
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa4:	ce 01       	movw	r24, r28
     aa6:	83 5a       	subi	r24, 0xA3	; 163
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	89 f6       	brne	.-94     	; 0xa56 <lcd_set_4bit+0x920>
     ab4:	2f c0       	rjmp	.+94     	; 0xb14 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	8e 01       	movw	r16, r28
     ab8:	03 5a       	subi	r16, 0xA3	; 163
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	87 5a       	subi	r24, 0xA7	; 167
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	f8 01       	movw	r30, r16
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
     ada:	ce 01       	movw	r24, r28
     adc:	8f 59       	subi	r24, 0x9F	; 159
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	9e 01       	movw	r18, r28
     ae2:	23 5a       	subi	r18, 0xA3	; 163
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	31 83       	std	Z+1, r19	; 0x01
     af0:	20 83       	st	Z, r18
     af2:	ce 01       	movw	r24, r28
     af4:	8f 59       	subi	r24, 0x9F	; 159
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	8c 01       	movw	r16, r24
     b00:	c8 01       	movw	r24, r16
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <lcd_set_4bit+0x9cc>
     b06:	8c 01       	movw	r16, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	8f 59       	subi	r24, 0x9F	; 159
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	fc 01       	movw	r30, r24
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b14:	88 e2       	ldi	r24, 0x28	; 40
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	28 e2       	ldi	r18, 0x28	; 40
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	2e 7f       	andi	r18, 0xFE	; 254
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	28 e2       	ldi	r18, 0x28	; 40
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	2d 7f       	andi	r18, 0xFD	; 253
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18

	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b38:	88 e2       	ldi	r24, 0x28	; 40
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	20 e2       	ldi	r18, 0x20	; 32
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     b42:	88 e2       	ldi	r24, 0x28	; 40
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	28 e2       	ldi	r18, 0x28	; 40
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	24 60       	ori	r18, 0x04	; 4
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	9e 01       	movw	r18, r28
     b56:	2d 59       	subi	r18, 0x9D	; 157
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 ea       	ldi	r26, 0xA0	; 160
     b60:	b0 e4       	ldi	r27, 0x40	; 64
     b62:	f9 01       	movw	r30, r18
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	8e 01       	movw	r16, r28
     b6e:	09 59       	subi	r16, 0x99	; 153
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	ce 01       	movw	r24, r28
     b74:	8d 59       	subi	r24, 0x9D	; 157
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	fc 01       	movw	r30, r24
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	26 e6       	ldi	r18, 0x66	; 102
     b84:	36 e6       	ldi	r19, 0x66	; 102
     b86:	46 e6       	ldi	r20, 0x66	; 102
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	a2 83       	std	Z+2, r26	; 0x02
     b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	89 59       	subi	r24, 0x99	; 153
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     bba:	88 23       	and	r24, r24
     bbc:	0c f0       	brlt	.+2      	; 0xbc0 <lcd_set_4bit+0xa8a>
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	11 23       	and	r17, r17
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 59       	subi	r24, 0x95	; 149
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	74 c0       	rjmp	.+232    	; 0xcbe <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bd6:	ce 01       	movw	r24, r28
     bd8:	89 59       	subi	r24, 0x99	; 153
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	fc 01       	movw	r30, r24
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <lcd_set_4bit+0xac4>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	11 23       	and	r17, r17
     bfc:	09 f4       	brne	.+2      	; 0xc00 <lcd_set_4bit+0xaca>
     bfe:	4d c0       	rjmp	.+154    	; 0xc9a <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	ce 01       	movw	r24, r28
     c02:	8d 59       	subi	r24, 0x9D	; 157
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8e 01       	movw	r16, r28
     c22:	05 59       	subi	r16, 0x95	; 149
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	27 c0       	rjmp	.+78     	; 0xc88 <lcd_set_4bit+0xb52>
     c3a:	ce 01       	movw	r24, r28
     c3c:	83 59       	subi	r24, 0x93	; 147
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	31 83       	std	Z+1, r19	; 0x01
     c48:	20 83       	st	Z, r18
     c4a:	ce 01       	movw	r24, r28
     c4c:	83 59       	subi	r24, 0x93	; 147
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	8c 01       	movw	r16, r24
     c58:	c8 01       	movw	r24, r16
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_set_4bit+0xb24>
     c5e:	8c 01       	movw	r16, r24
     c60:	ce 01       	movw	r24, r28
     c62:	83 59       	subi	r24, 0x93	; 147
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	fc 01       	movw	r30, r24
     c68:	11 83       	std	Z+1, r17	; 0x01
     c6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	ce 01       	movw	r24, r28
     c6e:	85 59       	subi	r24, 0x95	; 149
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	9e 01       	movw	r18, r28
     c74:	25 59       	subi	r18, 0x95	; 149
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	ce 01       	movw	r24, r28
     c8a:	85 59       	subi	r24, 0x95	; 149
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	89 f6       	brne	.-94     	; 0xc3a <lcd_set_4bit+0xb04>
     c98:	2f c0       	rjmp	.+94     	; 0xcf8 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	8e 01       	movw	r16, r28
     c9c:	05 59       	subi	r16, 0x95	; 149
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	89 59       	subi	r24, 0x99	; 153
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	ce 01       	movw	r24, r28
     cc0:	81 59       	subi	r24, 0x91	; 145
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	9e 01       	movw	r18, r28
     cc6:	25 59       	subi	r18, 0x95	; 149
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 83       	std	Z+1, r19	; 0x01
     cd4:	20 83       	st	Z, r18
     cd6:	ce 01       	movw	r24, r28
     cd8:	81 59       	subi	r24, 0x91	; 145
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	8c 01       	movw	r16, r24
     ce4:	c8 01       	movw	r24, r16
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <lcd_set_4bit+0xbb0>
     cea:	8c 01       	movw	r16, r24
     cec:	ce 01       	movw	r24, r28
     cee:	81 59       	subi	r24, 0x91	; 145
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	fc 01       	movw	r30, r24
     cf4:	11 83       	std	Z+1, r17	; 0x01
     cf6:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	28 e2       	ldi	r18, 0x28	; 40
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	2b 7f       	andi	r18, 0xFB	; 251
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18



	

}
     d0a:	c0 59       	subi	r28, 0x90	; 144
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <lcd_init>:

/*****Function to Initialize LCD*****/

void lcd_init()

{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	2e 97       	sbiw	r28, 0x0e	; 14
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e8       	ldi	r26, 0x80	; 128
     d40:	bf e3       	ldi	r27, 0x3F	; 63
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	26 e6       	ldi	r18, 0x66	; 102
     d54:	36 e6       	ldi	r19, 0x66	; 102
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	af 83       	std	Y+7, r26	; 0x07
     d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d6a:	11 e0       	ldi	r17, 0x01	; 1
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	0c f0       	brlt	.+2      	; 0xd86 <lcd_init+0x64>
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	11 23       	and	r17, r17
     d88:	29 f0       	breq	.+10     	; 0xd94 <lcd_init+0x72>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	89 87       	std	Y+9, r24	; 0x09
     d92:	46 c0       	rjmp	.+140    	; 0xe20 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d94:	11 e0       	ldi	r17, 0x01	; 1
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     daa:	18 16       	cp	r1, r24
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <lcd_init+0x8e>
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	11 23       	and	r17, r17
     db2:	61 f1       	breq	.+88     	; 0xe0c <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	7a 81       	ldd	r23, Y+2	; 0x02
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9a 87       	std	Y+10, r25	; 0x0a
     dda:	89 87       	std	Y+9, r24	; 0x09
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <lcd_init+0xe0>
     dde:	80 e7       	ldi	r24, 0x70	; 112
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	8b 85       	ldd	r24, Y+11	; 0x0b
     de8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dea:	8c 01       	movw	r16, r24
     dec:	c8 01       	movw	r24, r16
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <lcd_init+0xcc>
     df2:	8c 01       	movw	r16, r24
     df4:	1c 87       	std	Y+12, r17	; 0x0c
     df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9a 87       	std	Y+10, r25	; 0x0a
     e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	51 f7       	brne	.-44     	; 0xdde <lcd_init+0xbc>
     e0a:	17 c0       	rjmp	.+46     	; 0xe3a <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a 87       	std	Y+10, r25	; 0x0a
     e1e:	89 87       	std	Y+9, r24	; 0x09
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	9e 87       	std	Y+14, r25	; 0x0e
     e26:	8d 87       	std	Y+13, r24	; 0x0d
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	8c 01       	movw	r16, r24
     e2e:	c8 01       	movw	r24, r16
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <lcd_init+0x10e>
     e34:	8c 01       	movw	r16, r24
     e36:	1e 87       	std	Y+14, r17	; 0x0e
     e38:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x01);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x06);
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x0E);
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x80);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	

}
     e58:	2e 96       	adiw	r28, 0x0e	; 14
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <lcd_wr_command>:

/*****Function to Write Command on LCD*****/

void lcd_wr_command(unsigned char cmd)

{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	6e 97       	sbiw	r28, 0x1e	; 30
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8e 8f       	std	Y+30, r24	; 0x1e

	unsigned char temp;

	temp = cmd;
     e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8a:	89 83       	std	Y+1, r24	; 0x01

	temp = temp & 0xF0;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 7f       	andi	r24, 0xF0	; 240
     e90:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
     e92:	88 e2       	ldi	r24, 0x28	; 40
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 e2       	ldi	r18, 0x28	; 40
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 70       	andi	r18, 0x0F	; 15
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18

	lcd_port |= temp;
     ea4:	88 e2       	ldi	r24, 0x28	; 40
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 e2       	ldi	r18, 0x28	; 40
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	f9 01       	movw	r30, r18
     eae:	30 81       	ld	r19, Z
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	23 2b       	or	r18, r19
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
     eb8:	88 e2       	ldi	r24, 0x28	; 40
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	28 e2       	ldi	r18, 0x28	; 40
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	2e 7f       	andi	r18, 0xFE	; 254
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 e2       	ldi	r18, 0x28	; 40
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	2d 7f       	andi	r18, 0xFD	; 253
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	28 e2       	ldi	r18, 0x28	; 40
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	24 60       	ori	r18, 0x04	; 4
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 ea       	ldi	r26, 0xA0	; 160
     ef4:	b0 e4       	ldi	r27, 0x40	; 64
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	ac 83       	std	Y+4, r26	; 0x04
     efc:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6a 81       	ldd	r22, Y+2	; 0x02
     f00:	7b 81       	ldd	r23, Y+3	; 0x03
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	26 e6       	ldi	r18, 0x66	; 102
     f08:	36 e6       	ldi	r19, 0x66	; 102
     f0a:	46 e6       	ldi	r20, 0x66	; 102
     f0c:	55 e4       	ldi	r21, 0x45	; 69
     f0e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	a8 87       	std	Y+8, r26	; 0x08
     f1c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	6e 81       	ldd	r22, Y+6	; 0x06
     f22:	7f 81       	ldd	r23, Y+7	; 0x07
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
     f34:	88 23       	and	r24, r24
     f36:	0c f0       	brlt	.+2      	; 0xf3a <lcd_wr_command+0xcc>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	11 23       	and	r17, r17
     f3c:	29 f0       	breq	.+10     	; 0xf48 <lcd_wr_command+0xda>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9b 87       	std	Y+11, r25	; 0x0b
     f44:	8a 87       	std	Y+10, r24	; 0x0a
     f46:	46 c0       	rjmp	.+140    	; 0xfd4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	6e 81       	ldd	r22, Y+6	; 0x06
     f4c:	7f 81       	ldd	r23, Y+7	; 0x07
     f4e:	88 85       	ldd	r24, Y+8	; 0x08
     f50:	99 85       	ldd	r25, Y+9	; 0x09
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	0c f0       	brlt	.+2      	; 0xf64 <lcd_wr_command+0xf6>
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	11 23       	and	r17, r17
     f66:	61 f1       	breq	.+88     	; 0xfc0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6a 81       	ldd	r22, Y+2	; 0x02
     f6a:	7b 81       	ldd	r23, Y+3	; 0x03
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9b 87       	std	Y+11, r25	; 0x0b
     f8e:	8a 87       	std	Y+10, r24	; 0x0a
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <lcd_wr_command+0x148>
     f92:	80 e7       	ldi	r24, 0x70	; 112
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	9d 87       	std	Y+13, r25	; 0x0d
     f98:	8c 87       	std	Y+12, r24	; 0x0c
     f9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9e:	8c 01       	movw	r16, r24
     fa0:	c8 01       	movw	r24, r16
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <lcd_wr_command+0x134>
     fa6:	8c 01       	movw	r16, r24
     fa8:	1d 87       	std	Y+13, r17	; 0x0d
     faa:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
     fb4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	51 f7       	brne	.-44     	; 0xf92 <lcd_wr_command+0x124>
     fbe:	17 c0       	rjmp	.+46     	; 0xfee <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6e 81       	ldd	r22, Y+6	; 0x06
     fc2:	7f 81       	ldd	r23, Y+7	; 0x07
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9b 87       	std	Y+11, r25	; 0x0b
     fd2:	8a 87       	std	Y+10, r24	; 0x0a
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd8:	9f 87       	std	Y+15, r25	; 0x0f
     fda:	8e 87       	std	Y+14, r24	; 0x0e
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	8c 01       	movw	r16, r24
     fe2:	f8 01       	movw	r30, r16
     fe4:	31 97       	sbiw	r30, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_wr_command+0x176>
     fe8:	8f 01       	movw	r16, r30
     fea:	1f 87       	std	Y+15, r17	; 0x0f
     fec:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
     fee:	88 e2       	ldi	r24, 0x28	; 40
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e2       	ldi	r18, 0x28	; 40
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	2b 7f       	andi	r18, 0xFB	; 251
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18

	

	cmd = cmd & 0x0F;
    1000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	8e 8f       	std	Y+30, r24	; 0x1e

	cmd = cmd<<4;
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	82 95       	swap	r24
    100a:	80 7f       	andi	r24, 0xF0	; 240
    100c:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	28 e2       	ldi	r18, 0x28	; 40
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	2f 70       	andi	r18, 0x0F	; 15
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18

	lcd_port |= cmd;
    1020:	88 e2       	ldi	r24, 0x28	; 40
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 e2       	ldi	r18, 0x28	; 40
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f9 01       	movw	r30, r18
    102a:	30 81       	ld	r19, Z
    102c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    102e:	23 2b       	or	r18, r19
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
    1034:	88 e2       	ldi	r24, 0x28	; 40
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	28 e2       	ldi	r18, 0x28	; 40
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2e 7f       	andi	r18, 0xFE	; 254
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	28 e2       	ldi	r18, 0x28	; 40
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	2d 7f       	andi	r18, 0xFD	; 253
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1058:	88 e2       	ldi	r24, 0x28	; 40
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 e2       	ldi	r18, 0x28	; 40
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 ea       	ldi	r26, 0xA0	; 160
    1070:	b0 e4       	ldi	r27, 0x40	; 64
    1072:	88 8b       	std	Y+16, r24	; 0x10
    1074:	99 8b       	std	Y+17, r25	; 0x11
    1076:	aa 8b       	std	Y+18, r26	; 0x12
    1078:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    107a:	68 89       	ldd	r22, Y+16	; 0x10
    107c:	79 89       	ldd	r23, Y+17	; 0x11
    107e:	8a 89       	ldd	r24, Y+18	; 0x12
    1080:	9b 89       	ldd	r25, Y+19	; 0x13
    1082:	26 e6       	ldi	r18, 0x66	; 102
    1084:	36 e6       	ldi	r19, 0x66	; 102
    1086:	46 e6       	ldi	r20, 0x66	; 102
    1088:	55 e4       	ldi	r21, 0x45	; 69
    108a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8c 8b       	std	Y+20, r24	; 0x14
    1094:	9d 8b       	std	Y+21, r25	; 0x15
    1096:	ae 8b       	std	Y+22, r26	; 0x16
    1098:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    109a:	11 e0       	ldi	r17, 0x01	; 1
    109c:	6c 89       	ldd	r22, Y+20	; 0x14
    109e:	7d 89       	ldd	r23, Y+21	; 0x15
    10a0:	8e 89       	ldd	r24, Y+22	; 0x16
    10a2:	9f 89       	ldd	r25, Y+23	; 0x17
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <lcd_wr_command+0x248>
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	11 23       	and	r17, r17
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <lcd_wr_command+0x256>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	99 8f       	std	Y+25, r25	; 0x19
    10c0:	88 8f       	std	Y+24, r24	; 0x18
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	6c 89       	ldd	r22, Y+20	; 0x14
    10c8:	7d 89       	ldd	r23, Y+21	; 0x15
    10ca:	8e 89       	ldd	r24, Y+22	; 0x16
    10cc:	9f 89       	ldd	r25, Y+23	; 0x17
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	0c f0       	brlt	.+2      	; 0x10e0 <lcd_wr_command+0x272>
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	11 23       	and	r17, r17
    10e2:	61 f1       	breq	.+88     	; 0x113c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	68 89       	ldd	r22, Y+16	; 0x10
    10e6:	79 89       	ldd	r23, Y+17	; 0x11
    10e8:	8a 89       	ldd	r24, Y+18	; 0x12
    10ea:	9b 89       	ldd	r25, Y+19	; 0x13
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	99 8f       	std	Y+25, r25	; 0x19
    110a:	88 8f       	std	Y+24, r24	; 0x18
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <lcd_wr_command+0x2c4>
    110e:	80 e7       	ldi	r24, 0x70	; 112
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9b 8f       	std	Y+27, r25	; 0x1b
    1114:	8a 8f       	std	Y+26, r24	; 0x1a
    1116:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    111a:	8c 01       	movw	r16, r24
    111c:	c8 01       	movw	r24, r16
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <lcd_wr_command+0x2b0>
    1122:	8c 01       	movw	r16, r24
    1124:	1b 8f       	std	Y+27, r17	; 0x1b
    1126:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	88 8d       	ldd	r24, Y+24	; 0x18
    112a:	99 8d       	ldd	r25, Y+25	; 0x19
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	99 8f       	std	Y+25, r25	; 0x19
    1130:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	88 8d       	ldd	r24, Y+24	; 0x18
    1134:	99 8d       	ldd	r25, Y+25	; 0x19
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	51 f7       	brne	.-44     	; 0x110e <lcd_wr_command+0x2a0>
    113a:	17 c0       	rjmp	.+46     	; 0x116a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6c 89       	ldd	r22, Y+20	; 0x14
    113e:	7d 89       	ldd	r23, Y+21	; 0x15
    1140:	8e 89       	ldd	r24, Y+22	; 0x16
    1142:	9f 89       	ldd	r25, Y+23	; 0x17
    1144:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	99 8f       	std	Y+25, r25	; 0x19
    114e:	88 8f       	std	Y+24, r24	; 0x18
    1150:	88 8d       	ldd	r24, Y+24	; 0x18
    1152:	99 8d       	ldd	r25, Y+25	; 0x19
    1154:	9d 8f       	std	Y+29, r25	; 0x1d
    1156:	8c 8f       	std	Y+28, r24	; 0x1c
    1158:	8c 8d       	ldd	r24, Y+28	; 0x1c
    115a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    115c:	8c 01       	movw	r16, r24
    115e:	f8 01       	movw	r30, r16
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <lcd_wr_command+0x2f2>
    1164:	8f 01       	movw	r16, r30
    1166:	1d 8f       	std	Y+29, r17	; 0x1d
    1168:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    116a:	88 e2       	ldi	r24, 0x28	; 40
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	28 e2       	ldi	r18, 0x28	; 40
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	2b 7f       	andi	r18, 0xFB	; 251
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18

}
    117c:	6e 96       	adiw	r28, 0x1e	; 30
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/

void lcd_wr_char(char letter)

{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	6e 97       	sbiw	r28, 0x1e	; 30
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8e 8f       	std	Y+30, r24	; 0x1e

	char temp;

	temp = letter;
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	89 83       	std	Y+1, r24	; 0x01

	temp = (temp & 0xF0);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
    11b6:	88 e2       	ldi	r24, 0x28	; 40
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	28 e2       	ldi	r18, 0x28	; 40
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	2f 70       	andi	r18, 0x0F	; 15
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18

	lcd_port |= temp;
    11c8:	88 e2       	ldi	r24, 0x28	; 40
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	28 e2       	ldi	r18, 0x28	; 40
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	30 81       	ld	r19, Z
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	23 2b       	or	r18, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    11dc:	88 e2       	ldi	r24, 0x28	; 40
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	28 e2       	ldi	r18, 0x28	; 40
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	21 60       	ori	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	28 e2       	ldi	r18, 0x28	; 40
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	2d 7f       	andi	r18, 0xFD	; 253
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1200:	88 e2       	ldi	r24, 0x28	; 40
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e2       	ldi	r18, 0x28	; 40
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	24 60       	ori	r18, 0x04	; 4
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 ea       	ldi	r26, 0xA0	; 160
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	ac 83       	std	Y+4, r26	; 0x04
    1220:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	7b 81       	ldd	r23, Y+3	; 0x03
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	26 e6       	ldi	r18, 0x66	; 102
    122c:	36 e6       	ldi	r19, 0x66	; 102
    122e:	46 e6       	ldi	r20, 0x66	; 102
    1230:	55 e4       	ldi	r21, 0x45	; 69
    1232:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	a8 87       	std	Y+8, r26	; 0x08
    1240:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1242:	11 e0       	ldi	r17, 0x01	; 1
    1244:	6e 81       	ldd	r22, Y+6	; 0x06
    1246:	7f 81       	ldd	r23, Y+7	; 0x07
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	0c f0       	brlt	.+2      	; 0x125e <lcd_wr_char+0xcc>
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	11 23       	and	r17, r17
    1260:	29 f0       	breq	.+10     	; 0x126c <lcd_wr_char+0xda>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9b 87       	std	Y+11, r25	; 0x0b
    1268:	8a 87       	std	Y+10, r24	; 0x0a
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    126c:	11 e0       	ldi	r17, 0x01	; 1
    126e:	6e 81       	ldd	r22, Y+6	; 0x06
    1270:	7f 81       	ldd	r23, Y+7	; 0x07
    1272:	88 85       	ldd	r24, Y+8	; 0x08
    1274:	99 85       	ldd	r25, Y+9	; 0x09
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	0c f0       	brlt	.+2      	; 0x1288 <lcd_wr_char+0xf6>
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	11 23       	and	r17, r17
    128a:	61 f1       	breq	.+88     	; 0x12e4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6a 81       	ldd	r22, Y+2	; 0x02
    128e:	7b 81       	ldd	r23, Y+3	; 0x03
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9b 87       	std	Y+11, r25	; 0x0b
    12b2:	8a 87       	std	Y+10, r24	; 0x0a
    12b4:	12 c0       	rjmp	.+36     	; 0x12da <lcd_wr_char+0x148>
    12b6:	80 e7       	ldi	r24, 0x70	; 112
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9d 87       	std	Y+13, r25	; 0x0d
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c2:	8c 01       	movw	r16, r24
    12c4:	c8 01       	movw	r24, r16
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <lcd_wr_char+0x134>
    12ca:	8c 01       	movw	r16, r24
    12cc:	1d 87       	std	Y+13, r17	; 0x0d
    12ce:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9b 87       	std	Y+11, r25	; 0x0b
    12d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	51 f7       	brne	.-44     	; 0x12b6 <lcd_wr_char+0x124>
    12e2:	17 c0       	rjmp	.+46     	; 0x1312 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6e 81       	ldd	r22, Y+6	; 0x06
    12e6:	7f 81       	ldd	r23, Y+7	; 0x07
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9b 87       	std	Y+11, r25	; 0x0b
    12f6:	8a 87       	std	Y+10, r24	; 0x0a
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	9f 87       	std	Y+15, r25	; 0x0f
    12fe:	8e 87       	std	Y+14, r24	; 0x0e
    1300:	8e 85       	ldd	r24, Y+14	; 0x0e
    1302:	9f 85       	ldd	r25, Y+15	; 0x0f
    1304:	8c 01       	movw	r16, r24
    1306:	f8 01       	movw	r30, r16
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <lcd_wr_char+0x176>
    130c:	8f 01       	movw	r16, r30
    130e:	1f 87       	std	Y+15, r17	; 0x0f
    1310:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
    1312:	88 e2       	ldi	r24, 0x28	; 40
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	28 e2       	ldi	r18, 0x28	; 40
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	2b 7f       	andi	r18, 0xFB	; 251
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18



	letter = letter & 0x0F;
    1324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	8e 8f       	std	Y+30, r24	; 0x1e

	letter = letter<<4;
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	82 95       	swap	r24
    132e:	80 7f       	andi	r24, 0xF0	; 240
    1330:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    1332:	88 e2       	ldi	r24, 0x28	; 40
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	28 e2       	ldi	r18, 0x28	; 40
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	20 81       	ld	r18, Z
    133e:	2f 70       	andi	r18, 0x0F	; 15
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18

	lcd_port |= letter;
    1344:	88 e2       	ldi	r24, 0x28	; 40
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	28 e2       	ldi	r18, 0x28	; 40
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	f9 01       	movw	r30, r18
    134e:	30 81       	ld	r19, Z
    1350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1352:	23 2b       	or	r18, r19
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    1358:	88 e2       	ldi	r24, 0x28	; 40
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	28 e2       	ldi	r18, 0x28	; 40
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	20 81       	ld	r18, Z
    1364:	21 60       	ori	r18, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	28 e2       	ldi	r18, 0x28	; 40
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	2d 7f       	andi	r18, 0xFD	; 253
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	28 e2       	ldi	r18, 0x28	; 40
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	24 60       	ori	r18, 0x04	; 4
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 ea       	ldi	r26, 0xA0	; 160
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	88 8b       	std	Y+16, r24	; 0x10
    1398:	99 8b       	std	Y+17, r25	; 0x11
    139a:	aa 8b       	std	Y+18, r26	; 0x12
    139c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    139e:	68 89       	ldd	r22, Y+16	; 0x10
    13a0:	79 89       	ldd	r23, Y+17	; 0x11
    13a2:	8a 89       	ldd	r24, Y+18	; 0x12
    13a4:	9b 89       	ldd	r25, Y+19	; 0x13
    13a6:	26 e6       	ldi	r18, 0x66	; 102
    13a8:	36 e6       	ldi	r19, 0x66	; 102
    13aa:	46 e6       	ldi	r20, 0x66	; 102
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8c 8b       	std	Y+20, r24	; 0x14
    13b8:	9d 8b       	std	Y+21, r25	; 0x15
    13ba:	ae 8b       	std	Y+22, r26	; 0x16
    13bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13be:	11 e0       	ldi	r17, 0x01	; 1
    13c0:	6c 89       	ldd	r22, Y+20	; 0x14
    13c2:	7d 89       	ldd	r23, Y+21	; 0x15
    13c4:	8e 89       	ldd	r24, Y+22	; 0x16
    13c6:	9f 89       	ldd	r25, Y+23	; 0x17
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	0c f0       	brlt	.+2      	; 0x13da <lcd_wr_char+0x248>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	11 23       	and	r17, r17
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <lcd_wr_char+0x256>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	99 8f       	std	Y+25, r25	; 0x19
    13e4:	88 8f       	std	Y+24, r24	; 0x18
    13e6:	46 c0       	rjmp	.+140    	; 0x1474 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	6c 89       	ldd	r22, Y+20	; 0x14
    13ec:	7d 89       	ldd	r23, Y+21	; 0x15
    13ee:	8e 89       	ldd	r24, Y+22	; 0x16
    13f0:	9f 89       	ldd	r25, Y+23	; 0x17
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <lcd_wr_char+0x272>
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	11 23       	and	r17, r17
    1406:	61 f1       	breq	.+88     	; 0x1460 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	68 89       	ldd	r22, Y+16	; 0x10
    140a:	79 89       	ldd	r23, Y+17	; 0x11
    140c:	8a 89       	ldd	r24, Y+18	; 0x12
    140e:	9b 89       	ldd	r25, Y+19	; 0x13
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	99 8f       	std	Y+25, r25	; 0x19
    142e:	88 8f       	std	Y+24, r24	; 0x18
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <lcd_wr_char+0x2c4>
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	9b 8f       	std	Y+27, r25	; 0x1b
    1438:	8a 8f       	std	Y+26, r24	; 0x1a
    143a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    143c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    143e:	8c 01       	movw	r16, r24
    1440:	c8 01       	movw	r24, r16
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <lcd_wr_char+0x2b0>
    1446:	8c 01       	movw	r16, r24
    1448:	1b 8f       	std	Y+27, r17	; 0x1b
    144a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	88 8d       	ldd	r24, Y+24	; 0x18
    144e:	99 8d       	ldd	r25, Y+25	; 0x19
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	99 8f       	std	Y+25, r25	; 0x19
    1454:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	88 8d       	ldd	r24, Y+24	; 0x18
    1458:	99 8d       	ldd	r25, Y+25	; 0x19
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	51 f7       	brne	.-44     	; 0x1432 <lcd_wr_char+0x2a0>
    145e:	17 c0       	rjmp	.+46     	; 0x148e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	6c 89       	ldd	r22, Y+20	; 0x14
    1462:	7d 89       	ldd	r23, Y+21	; 0x15
    1464:	8e 89       	ldd	r24, Y+22	; 0x16
    1466:	9f 89       	ldd	r25, Y+23	; 0x17
    1468:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	99 8f       	std	Y+25, r25	; 0x19
    1472:	88 8f       	std	Y+24, r24	; 0x18
    1474:	88 8d       	ldd	r24, Y+24	; 0x18
    1476:	99 8d       	ldd	r25, Y+25	; 0x19
    1478:	9d 8f       	std	Y+29, r25	; 0x1d
    147a:	8c 8f       	std	Y+28, r24	; 0x1c
    147c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    147e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1480:	8c 01       	movw	r16, r24
    1482:	f8 01       	movw	r30, r16
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <lcd_wr_char+0x2f2>
    1488:	8f 01       	movw	r16, r30
    148a:	1d 8f       	std	Y+29, r17	; 0x1d
    148c:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e2       	ldi	r18, 0x28	; 40
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	2b 7f       	andi	r18, 0xFB	; 251
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18

}
    14a0:	6e 96       	adiw	r28, 0x1e	; 30
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <lcd_home>:



void lcd_home()

{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62

	lcd_wr_command(0x80);
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <lcd_string>:

/*****Function to Print String on LCD*****/

void lcd_string(char *str)

{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	0f 92       	push	r0
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01

	while(*str != '\0')
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <lcd_string+0x28>

	{

		lcd_wr_char(*str);
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		str++;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01

void lcd_string(char *str)

{

	while(*str != '\0')
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	79 f7       	brne	.-34     	; 0x14dc <lcd_string+0x12>

		str++;

	}

}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <lcd_cursor>:



void lcd_cursor (char row, char column)

{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	0f 92       	push	r0
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02

	switch (row) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	99 f0       	breq	.+38     	; 0x154a <lcd_cursor+0x42>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	24 f4       	brge	.+8      	; 0x1532 <lcd_cursor+0x2a>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	41 f0       	breq	.+16     	; 0x1540 <lcd_cursor+0x38>
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <lcd_cursor+0x60>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	71 f0       	breq	.+28     	; 0x1554 <lcd_cursor+0x4c>
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <lcd_cursor+0x56>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <lcd_cursor+0x60>

		case 1: lcd_wr_command (0x80 + column - 1); break;
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 58       	subi	r24, 0x81	; 129
    1544:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1548:	10 c0       	rjmp	.+32     	; 0x156a <lcd_cursor+0x62>

		case 2: lcd_wr_command (0xc0 + column - 1); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	81 54       	subi	r24, 0x41	; 65
    154e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1552:	0b c0       	rjmp	.+22     	; 0x156a <lcd_cursor+0x62>

		case 3: lcd_wr_command (0x94 + column - 1); break;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	8d 56       	subi	r24, 0x6D	; 109
    1558:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    155c:	06 c0       	rjmp	.+12     	; 0x156a <lcd_cursor+0x62>

		case 4: lcd_wr_command (0xd4 + column - 1); break;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8d 52       	subi	r24, 0x2D	; 45
    1562:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1566:	01 c0       	rjmp	.+2      	; 0x156a <lcd_cursor+0x62>

		default: break;
    1568:	00 00       	nop

	}

}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/

void lcd_print (char row, char coloumn, unsigned int value, int digits)

{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
    158c:	5d 83       	std	Y+5, r21	; 0x05
    158e:	4c 83       	std	Y+4, r20	; 0x04
    1590:	3f 83       	std	Y+7, r19	; 0x07
    1592:	2e 83       	std	Y+6, r18	; 0x06

	unsigned char flag=0;
    1594:	19 82       	std	Y+1, r1	; 0x01

	if(row==0||coloumn==0)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <lcd_print+0x2e>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 23       	and	r24, r24
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <lcd_print+0x34>

	{

		lcd_home();
    15a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <lcd_home>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <lcd_print+0x3c>

	else

	{

		lcd_cursor(row,coloumn);
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	6b 81       	ldd	r22, Y+3	; 0x03
    15ac:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>

	}

	if(digits==5 || flag==1)
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <lcd_print+0x4c>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	b1 f4       	brne	.+44     	; 0x15ec <lcd_print+0x78>

	{

		million=value/10000+48;
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	20 e1       	ldi	r18, 0x10	; 16
    15c6:	37 e2       	ldi	r19, 0x27	; 39
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    15ce:	9b 01       	movw	r18, r22
    15d0:	c9 01       	movw	r24, r18
    15d2:	c0 96       	adiw	r24, 0x30	; 48
    15d4:	90 93 8c 04 	sts	0x048C, r25
    15d8:	80 93 8b 04 	sts	0x048B, r24

		lcd_wr_char(million);
    15dc:	80 91 8b 04 	lds	r24, 0x048B
    15e0:	90 91 8c 04 	lds	r25, 0x048C
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==4 || flag==1)
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	9f 81       	ldd	r25, Y+7	; 0x07
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <lcd_print+0x88>
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f5       	brne	.+70     	; 0x1642 <lcd_print+0xce>

	{

		temp = value/1000;
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	28 ee       	ldi	r18, 0xE8	; 232
    1602:	33 e0       	ldi	r19, 0x03	; 3
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    160a:	9b 01       	movw	r18, r22
    160c:	c9 01       	movw	r24, r18
    160e:	90 93 a9 04 	sts	0x04A9, r25
    1612:	80 93 a8 04 	sts	0x04A8, r24

		thousand = temp%10 + 48;
    1616:	80 91 a8 04 	lds	r24, 0x04A8
    161a:	90 91 a9 04 	lds	r25, 0x04A9
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	b9 01       	movw	r22, r18
    1624:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    1628:	c0 96       	adiw	r24, 0x30	; 48
    162a:	90 93 f9 04 	sts	0x04F9, r25
    162e:	80 93 f8 04 	sts	0x04F8, r24

		lcd_wr_char(thousand);
    1632:	80 91 f8 04 	lds	r24, 0x04F8
    1636:	90 91 f9 04 	lds	r25, 0x04F9
    163a:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==3 || flag==1)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	19 f0       	breq	.+6      	; 0x1652 <lcd_print+0xde>
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	19 f5       	brne	.+70     	; 0x1698 <lcd_print+0x124>

	{

		temp = value/100;
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	24 e6       	ldi	r18, 0x64	; 100
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    1660:	9b 01       	movw	r18, r22
    1662:	c9 01       	movw	r24, r18
    1664:	90 93 a9 04 	sts	0x04A9, r25
    1668:	80 93 a8 04 	sts	0x04A8, r24

		hundred = temp%10 + 48;
    166c:	80 91 a8 04 	lds	r24, 0x04A8
    1670:	90 91 a9 04 	lds	r25, 0x04A9
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 cd 04 	sts	0x04CD, r25
    1684:	80 93 cc 04 	sts	0x04CC, r24

		lcd_wr_char(hundred);
    1688:	80 91 cc 04 	lds	r24, 0x04CC
    168c:	90 91 cd 04 	lds	r25, 0x04CD
    1690:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==2 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x134>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	19 f5       	brne	.+70     	; 0x16ee <lcd_print+0x17a>

	{

		temp = value/10;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    16b6:	9b 01       	movw	r18, r22
    16b8:	c9 01       	movw	r24, r18
    16ba:	90 93 a9 04 	sts	0x04A9, r25
    16be:	80 93 a8 04 	sts	0x04A8, r24

		tens = temp%10 + 48;
    16c2:	80 91 a8 04 	lds	r24, 0x04A8
    16c6:	90 91 a9 04 	lds	r25, 0x04A9
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	b9 01       	movw	r22, r18
    16d0:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    16d4:	c0 96       	adiw	r24, 0x30	; 48
    16d6:	90 93 c7 04 	sts	0x04C7, r25
    16da:	80 93 c6 04 	sts	0x04C6, r24

		lcd_wr_char(tens);
    16de:	80 91 c6 04 	lds	r24, 0x04C6
    16e2:	90 91 c7 04 	lds	r25, 0x04C7
    16e6:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==1 || flag==1)
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	19 f0       	breq	.+6      	; 0x16fe <lcd_print+0x18a>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 f4       	brne	.+36     	; 0x1722 <lcd_print+0x1ae>

	{

		unit = value%10 + 48;
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	0e 94 d5 81 	call	0x103aa	; 0x103aa <__udivmodhi4>
    170c:	c0 96       	adiw	r24, 0x30	; 48
    170e:	90 93 f7 04 	sts	0x04F7, r25
    1712:	80 93 f6 04 	sts	0x04F6, r24

		lcd_wr_char(unit);
    1716:	80 91 f6 04 	lds	r24, 0x04F6
    171a:	90 91 f7 04 	lds	r25, 0x04F7
    171e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	if(digits>5)
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	86 30       	cpi	r24, 0x06	; 6
    1728:	91 05       	cpc	r25, r1
    172a:	1c f0       	brlt	.+6      	; 0x1732 <lcd_print+0x1be>

	{

		lcd_wr_char('E');
    172c:	85 e4       	ldi	r24, 0x45	; 69
    172e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	

    1732:	27 96       	adiw	r28, 0x07	; 7
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <motion_pin_config>:

*/

void motion_pin_config(void)

 {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62

    DDRA = DDRA | 0x0F;
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	21 e2       	ldi	r18, 0x21	; 33
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 60       	ori	r18, 0x0F	; 15
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18

    PORTA = PORTA & 0xF0;
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	22 e2       	ldi	r18, 0x22	; 34
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	20 7f       	andi	r18, 0xF0	; 240
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18

    DDRL = DDRL | 0x18; //Setting PL3 and PL4 pins as output for PWM generation
    1770:	8a e0       	ldi	r24, 0x0A	; 10
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 61       	ori	r18, 0x18	; 24
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18

    PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1782:	8b e0       	ldi	r24, 0x0B	; 11
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	2b e0       	ldi	r18, 0x0B	; 11
    1788:	31 e0       	ldi	r19, 0x01	; 1
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	28 61       	ori	r18, 0x18	; 24
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <left_encoder_pin_config>:

*/

void left_encoder_pin_config (void)

{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2d e2       	ldi	r18, 0x2D	; 45
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	2f 7e       	andi	r18, 0xEF	; 239
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18

	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17b4:	8e e2       	ldi	r24, 0x2E	; 46
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2e e2       	ldi	r18, 0x2E	; 46
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	20 61       	ori	r18, 0x10	; 16
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18

}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <right_encoder_pin_config>:

*/

void right_encoder_pin_config (void)

{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    17d4:	8d e2       	ldi	r24, 0x2D	; 45
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2d e2       	ldi	r18, 0x2D	; 45
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	2f 7d       	andi	r18, 0xDF	; 223
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18

	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    17e6:	8e e2       	ldi	r24, 0x2E	; 46
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	2e e2       	ldi	r18, 0x2E	; 46
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	20 62       	ori	r18, 0x20	; 32
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18

}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <velocity>:

*/

void velocity(unsigned char left_motor, unsigned char right_motor) 

{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f 92       	push	r0
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02

    OCR5AL = (unsigned char) left_motor;
    180e:	88 e2       	ldi	r24, 0x28	; 40
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18

    OCR5BL = (unsigned char) right_motor;
    1818:	8a e2       	ldi	r24, 0x2A	; 42
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	2a 81       	ldd	r18, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18

}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <left_position_encoder_interrupt_init>:

*/

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable

{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    1834:	f8 94       	cli

	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1836:	8a e6       	ldi	r24, 0x6A	; 106
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a e6       	ldi	r18, 0x6A	; 106
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	22 60       	ori	r18, 0x02	; 2
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1848:	8d e3       	ldi	r24, 0x3D	; 61
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2d e3       	ldi	r18, 0x3D	; 61
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	20 61       	ori	r18, 0x10	; 16
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    185a:	78 94       	sei

}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <right_position_encoder_interrupt_init>:

*/

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable

{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    186a:	f8 94       	cli

	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    186c:	8a e6       	ldi	r24, 0x6A	; 106
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2a e6       	ldi	r18, 0x6A	; 106
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	f9 01       	movw	r30, r18
    1876:	20 81       	ld	r18, Z
    1878:	28 60       	ori	r18, 0x08	; 8
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2d e3       	ldi	r18, 0x3D	; 61
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	20 62       	ori	r18, 0x20	; 32
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    1890:	78 94       	sei

}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <__vector_6>:

*/

ISR(INT5_vect)

{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	ShaftCountRight++;  //increment right shaft position count
    18b2:	80 91 4c 03 	lds	r24, 0x034C
    18b6:	90 91 4d 03 	lds	r25, 0x034D
    18ba:	a0 91 4e 03 	lds	r26, 0x034E
    18be:	b0 91 4f 03 	lds	r27, 0x034F
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	80 93 4c 03 	sts	0x034C, r24
    18cc:	90 93 4d 03 	sts	0x034D, r25
    18d0:	a0 93 4e 03 	sts	0x034E, r26
    18d4:	b0 93 4f 03 	sts	0x034F, r27

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_5>:

*/

ISR(INT4_vect)

{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62

	ShaftCountLeft++;  //increment left shaft position count
    1908:	80 91 48 03 	lds	r24, 0x0348
    190c:	90 91 49 03 	lds	r25, 0x0349
    1910:	a0 91 4a 03 	lds	r26, 0x034A
    1914:	b0 91 4b 03 	lds	r27, 0x034B
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	80 93 48 03 	sts	0x0348, r24
    1922:	90 93 49 03 	sts	0x0349, r25
    1926:	a0 93 4a 03 	sts	0x034A, r26
    192a:	b0 93 4b 03 	sts	0x034B, r27

}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <motion_set>:

*/

void motion_set(unsigned char Direction)

 {
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	0f 92       	push	r0
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char PortARestore = 0;
    1952:	19 82       	std	Y+1, r1	; 0x01



    Direction &= 0x0F; // removing upper nibble for protection
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 70       	andi	r24, 0x0F	; 15
    1958:	8a 83       	std	Y+2, r24	; 0x02

    PortARestore = PORTA; // reading PORTA's original status
    195a:	82 e2       	ldi	r24, 0x22	; 34
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	80 81       	ld	r24, Z
    1962:	89 83       	std	Y+1, r24	; 0x01

    PortARestore &= 0xF0; // making lower direction nibble to 0
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	80 7f       	andi	r24, 0xF0	; 240
    1968:	89 83       	std	Y+1, r24	; 0x01

    PortARestore |= Direction; // adding lower nibble for forward command and restoring PORTA's status
    196a:	99 81       	ldd	r25, Y+1	; 0x01
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	89 2b       	or	r24, r25
    1970:	89 83       	std	Y+1, r24	; 0x01

    PORTA = PortARestore; // executing the command
    1972:	82 e2       	ldi	r24, 0x22	; 34
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	29 81       	ldd	r18, Y+1	; 0x01
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18

}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <forward>:

*/

void forward(void)

 {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

    motion_set(0x06);
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <back>:

*/

void back (void)

{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x09);
    19a2:	89 e0       	ldi	r24, 0x09	; 9
    19a4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <left>:

*/

void left (void)

{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x05);
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <right>:

*/

void right (void)

{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x0A);
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <soft_left>:

*/

void soft_left (void)

{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x04);
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <soft_right>:

*/

void soft_right (void) 

{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x02);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <soft_left_2>:

*/

void soft_left_2 (void) 

{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x01);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <soft_right_2>:

*/

void soft_right_2 (void)

{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x08);
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <stop>:

*/

void stop(void)

{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x00);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <angle_rotate>:

*/

void angle_rotate(unsigned int Degrees)

{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2a 97       	sbiw	r28, 0x0a	; 10
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	9a 87       	std	Y+10, r25	; 0x0a
    1a50:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	ab 83       	std	Y+3, r26	; 0x03
    1a5e:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1a60:	1d 82       	std	Y+5, r1	; 0x05
    1a62:	1e 82       	std	Y+6, r1	; 0x06
    1a64:	1f 82       	std	Y+7, r1	; 0x07
    1a66:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	cc 01       	movw	r24, r24
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 bc 80 	call	0x10178	; 0x10178 <__floatunsisf>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	28 e4       	ldi	r18, 0x48	; 72
    1a84:	31 ee       	ldi	r19, 0xE1	; 225
    1a86:	42 e8       	ldi	r20, 0x82	; 130
    1a88:	50 e4       	ldi	r21, 0x40	; 64
    1a8a:	0e 94 28 80 	call	0x10050	; 0x10050 <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	ab 83       	std	Y+3, r26	; 0x03
    1a98:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	cc 01       	movw	r24, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	af 83       	std	Y+7, r26	; 0x07
    1ab6:	b8 87       	std	Y+8, r27	; 0x08

	ShaftCountRight = 0;
    1ab8:	10 92 4c 03 	sts	0x034C, r1
    1abc:	10 92 4d 03 	sts	0x034D, r1
    1ac0:	10 92 4e 03 	sts	0x034E, r1
    1ac4:	10 92 4f 03 	sts	0x034F, r1

	ShaftCountLeft = 0;
    1ac8:	10 92 48 03 	sts	0x0348, r1
    1acc:	10 92 49 03 	sts	0x0349, r1
    1ad0:	10 92 4a 03 	sts	0x034A, r1
    1ad4:	10 92 4b 03 	sts	0x034B, r1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <angle_rotate+0xa2>

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))

		break;

	}
    1ada:	00 00       	nop

	while (1)

	{

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1adc:	20 91 4c 03 	lds	r18, 0x034C
    1ae0:	30 91 4d 03 	lds	r19, 0x034D
    1ae4:	40 91 4e 03 	lds	r20, 0x034E
    1ae8:	50 91 4f 03 	lds	r21, 0x034F
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	af 81       	ldd	r26, Y+7	; 0x07
    1af4:	b8 85       	ldd	r27, Y+8	; 0x08
    1af6:	28 17       	cp	r18, r24
    1af8:	39 07       	cpc	r19, r25
    1afa:	4a 07       	cpc	r20, r26
    1afc:	5b 07       	cpc	r21, r27
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <angle_rotate+0xc8>
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	20 91 48 03 	lds	r18, 0x0348
    1b06:	30 91 49 03 	lds	r19, 0x0349
    1b0a:	40 91 4a 03 	lds	r20, 0x034A
    1b0e:	50 91 4b 03 	lds	r21, 0x034B
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	af 81       	ldd	r26, Y+7	; 0x07
    1b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <angle_rotate+0xee>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	87 2f       	mov	r24, r23
    1b2a:	86 2b       	or	r24, r22
    1b2c:	88 23       	and	r24, r24
    1b2e:	a9 f2       	breq	.-86     	; 0x1ada <angle_rotate+0xa0>

		break;
    1b30:	00 00       	nop

	}

	stop(); //Stop robot
    1b32:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1b36:	2a 96       	adiw	r28, 0x0a	; 10
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <linear_distance_mm>:

*/

void linear_distance_mm(unsigned int DistanceInMM)

{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	dc 01       	movw	r26, r24
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	ab 83       	std	Y+3, r26	; 0x03
    1b6c:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1b6e:	1d 82       	std	Y+5, r1	; 0x05
    1b70:	1e 82       	std	Y+6, r1	; 0x06
    1b72:	1f 82       	std	Y+7, r1	; 0x07
    1b74:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	cc 01       	movw	r24, r24
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 bc 80 	call	0x10178	; 0x10178 <__floatunsisf>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	25 ee       	ldi	r18, 0xE5	; 229
    1b92:	30 ed       	ldi	r19, 0xD0	; 208
    1b94:	4a ea       	ldi	r20, 0xAA	; 170
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 28 80 	call	0x10050	; 0x10050 <__divsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	ab 83       	std	Y+3, r26	; 0x03
    1ba6:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08

	

	ShaftCountRight = 0;
    1bc0:	10 92 4c 03 	sts	0x034C, r1
    1bc4:	10 92 4d 03 	sts	0x034D, r1
    1bc8:	10 92 4e 03 	sts	0x034E, r1
    1bcc:	10 92 4f 03 	sts	0x034F, r1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <linear_distance_mm+0x8c>

			break;

		}

	}
    1bd2:	00 00       	nop

	while(1)

	{

		if(ShaftCountRight > ReqdShaftCountInt)
    1bd4:	20 91 4c 03 	lds	r18, 0x034C
    1bd8:	30 91 4d 03 	lds	r19, 0x034D
    1bdc:	40 91 4e 03 	lds	r20, 0x034E
    1be0:	50 91 4f 03 	lds	r21, 0x034F
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	af 81       	ldd	r26, Y+7	; 0x07
    1bea:	b8 85       	ldd	r27, Y+8	; 0x08
    1bec:	82 17       	cp	r24, r18
    1bee:	93 07       	cpc	r25, r19
    1bf0:	a4 07       	cpc	r26, r20
    1bf2:	b5 07       	cpc	r27, r21
    1bf4:	70 f7       	brcc	.-36     	; 0x1bd2 <linear_distance_mm+0x8a>

		{

			break;
    1bf6:	00 00       	nop

		}

	}

	stop(); //Stop robot
    1bf8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1bfc:	2a 96       	adiw	r28, 0x0a	; 10
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <forward_mm>:

*/

void forward_mm(unsigned int DistanceInMM)

{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	0f 92       	push	r0
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01

	forward();
    1c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

	linear_distance_mm(DistanceInMM);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <back_mm>:

*/

void back_mm(unsigned int DistanceInMM)

{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	0f 92       	push	r0
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01

	back();
    1c44:	0e 94 cd 0c 	call	0x199a	; 0x199a <back>

	linear_distance_mm(DistanceInMM);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <left_degrees>:

*/

void left_degrees(unsigned int Degrees)

{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	0f 92       	push	r0
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	left(); //Turn left
    1c6a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>

	angle_rotate(Degrees);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <right_degrees>:

*/

void right_degrees(unsigned int Degrees)

{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	0f 92       	push	r0
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	right(); //Turn right
    1c90:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>

	angle_rotate(Degrees);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <soft_left_degrees>:

*/

void soft_left_degrees(unsigned int Degrees)

{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	0f 92       	push	r0
    1cac:	0f 92       	push	r0
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left(); //Turn soft left
    1cb6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>

	Degrees=Degrees*2;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <soft_right_degrees>:

*/

void soft_right_degrees(unsigned int Degrees)

{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	0f 92       	push	r0
    1cde:	0f 92       	push	r0
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right();  //Turn soft right
    1ce8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>

	Degrees=Degrees*2;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <soft_left_2_degrees>:

*/

void soft_left_2_degrees(unsigned int Degrees)

{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	0f 92       	push	r0
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left_2(); //Turn reverse soft left
    1d1a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>

	Degrees=Degrees*2;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <soft_right_2_degrees>:

*/

void soft_right_2_degrees(unsigned int Degrees)

{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	0f 92       	push	r0
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right_2();  //Turn reverse soft right
    1d4c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>

	Degrees=Degrees*2;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <correct_right>:

*/

void correct_right()

{   stop();
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6c 97       	sbiw	r28, 0x1c	; 28
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d90:	b1 e4       	ldi	r27, 0x41	; 65
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	26 e6       	ldi	r18, 0x66	; 102
    1da4:	36 e6       	ldi	r19, 0x66	; 102
    1da6:	46 e6       	ldi	r20, 0x66	; 102
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	af 83       	std	Y+7, r26	; 0x07
    1db8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1dba:	11 e0       	ldi	r17, 0x01	; 1
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <correct_right+0x68>
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	11 23       	and	r17, r17
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <correct_right+0x76>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a 87       	std	Y+10, r25	; 0x0a
    1de0:	89 87       	std	Y+9, r24	; 0x09
    1de2:	46 c0       	rjmp	.+140    	; 0x1e70 <correct_right+0x102>
	else if (__tmp > 65535)
    1de4:	11 e0       	ldi	r17, 0x01	; 1
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <correct_right+0x92>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	11 23       	and	r17, r17
    1e02:	61 f1       	breq	.+88     	; 0x1e5c <correct_right+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	69 81       	ldd	r22, Y+1	; 0x01
    1e06:	7a 81       	ldd	r23, Y+2	; 0x02
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a 87       	std	Y+10, r25	; 0x0a
    1e2a:	89 87       	std	Y+9, r24	; 0x09
    1e2c:	12 c0       	rjmp	.+36     	; 0x1e52 <correct_right+0xe4>
    1e2e:	80 e7       	ldi	r24, 0x70	; 112
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <correct_right+0xd0>
    1e42:	8c 01       	movw	r16, r24
    1e44:	1c 87       	std	Y+12, r17	; 0x0c
    1e46:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a 87       	std	Y+10, r25	; 0x0a
    1e50:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	51 f7       	brne	.-44     	; 0x1e2e <correct_right+0xc0>
    1e5a:	17 c0       	rjmp	.+46     	; 0x1e8a <correct_right+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a 87       	std	Y+10, r25	; 0x0a
    1e6e:	89 87       	std	Y+9, r24	; 0x09
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	9e 87       	std	Y+14, r25	; 0x0e
    1e76:	8d 87       	std	Y+13, r24	; 0x0d
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	c8 01       	movw	r24, r16
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <correct_right+0x112>
    1e84:	8c 01       	movw	r16, r24
    1e86:	1e 87       	std	Y+14, r17	; 0x0e
    1e88:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_degrees(35);
    1e8a:	83 e2       	ldi	r24, 0x23	; 35
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <soft_right_degrees>
	soft_right();
    1e92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <correct_right+0x12c>
		{   
			stop();
			_delay_ms(50);
			break;
		}
	}
    1e98:	00 00       	nop
	_delay_ms(20);
	soft_right_degrees(35);
	soft_right();
	while(1)
	{
		read_line();    
    1e9a:	81 e7       	ldi	r24, 0x71	; 113
    1e9c:	92 e3       	ldi	r25, 0x32	; 50
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	19 95       	eicall
		if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>70))
    1ea2:	80 91 51 03 	lds	r24, 0x0351
    1ea6:	8f 30       	cpi	r24, 0x0F	; 15
    1ea8:	20 f0       	brcs	.+8      	; 0x1eb2 <correct_right+0x144>
    1eaa:	80 91 50 03 	lds	r24, 0x0350
    1eae:	8f 30       	cpi	r24, 0x0F	; 15
    1eb0:	20 f4       	brcc	.+8      	; 0x1eba <correct_right+0x14c>
    1eb2:	80 91 51 03 	lds	r24, 0x0351
    1eb6:	87 34       	cpi	r24, 0x47	; 71
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <correct_right+0x12a>
		{   
			stop();
    1eba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	a9 8b       	std	Y+17, r26	; 0x11
    1ecc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ed0:	78 89       	ldd	r23, Y+16	; 0x10
    1ed2:	89 89       	ldd	r24, Y+17	; 0x11
    1ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed6:	26 e6       	ldi	r18, 0x66	; 102
    1ed8:	36 e6       	ldi	r19, 0x66	; 102
    1eda:	46 e6       	ldi	r20, 0x66	; 102
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	ad 8b       	std	Y+21, r26	; 0x15
    1eec:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1eee:	11 e0       	ldi	r17, 0x01	; 1
    1ef0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ef2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ef4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <correct_right+0x19c>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	11 23       	and	r17, r17
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <correct_right+0x1aa>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 8f       	std	Y+24, r25	; 0x18
    1f14:	8f 8b       	std	Y+23, r24	; 0x17
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <correct_right+0x236>
	else if (__tmp > 65535)
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    1f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    1f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <correct_right+0x1c6>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	11 23       	and	r17, r17
    1f36:	61 f1       	breq	.+88     	; 0x1f90 <correct_right+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f3a:	78 89       	ldd	r23, Y+16	; 0x10
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 8f       	std	Y+24, r25	; 0x18
    1f5e:	8f 8b       	std	Y+23, r24	; 0x17
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <correct_right+0x218>
    1f62:	80 e7       	ldi	r24, 0x70	; 112
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9a 8f       	std	Y+26, r25	; 0x1a
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f6e:	8c 01       	movw	r16, r24
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <correct_right+0x204>
    1f76:	8c 01       	movw	r16, r24
    1f78:	1a 8f       	std	Y+26, r17	; 0x1a
    1f7a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	98 8f       	std	Y+24, r25	; 0x18
    1f84:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	51 f7       	brne	.-44     	; 0x1f62 <correct_right+0x1f4>
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <correct_right+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6b 89       	ldd	r22, Y+19	; 0x13
    1f92:	7c 89       	ldd	r23, Y+20	; 0x14
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	9e 89       	ldd	r25, Y+22	; 0x16
    1f98:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	98 8f       	std	Y+24, r25	; 0x18
    1fa2:	8f 8b       	std	Y+23, r24	; 0x17
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <correct_right+0x246>
    1fb8:	8c 01       	movw	r16, r24
    1fba:	1c 8f       	std	Y+28, r17	; 0x1c
    1fbc:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <correct_right+0x254>
    1fc0:	00 00       	nop
		}
	}

}
    1fc2:	6c 96       	adiw	r28, 0x1c	; 28
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <correct_right2>:

*/

void correct_right2()

{   stop();
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6c 97       	sbiw	r28, 0x1c	; 28
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2004:	69 81       	ldd	r22, Y+1	; 0x01
    2006:	7a 81       	ldd	r23, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	26 e6       	ldi	r18, 0x66	; 102
    200e:	36 e6       	ldi	r19, 0x66	; 102
    2010:	46 e6       	ldi	r20, 0x66	; 102
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	af 83       	std	Y+7, r26	; 0x07
    2022:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2024:	11 e0       	ldi	r17, 0x01	; 1
    2026:	6d 81       	ldd	r22, Y+5	; 0x05
    2028:	7e 81       	ldd	r23, Y+6	; 0x06
    202a:	8f 81       	ldd	r24, Y+7	; 0x07
    202c:	98 85       	ldd	r25, Y+8	; 0x08
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    203a:	88 23       	and	r24, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <correct_right2+0x68>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	11 23       	and	r17, r17
    2042:	29 f0       	breq	.+10     	; 0x204e <correct_right2+0x76>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 87       	std	Y+10, r25	; 0x0a
    204a:	89 87       	std	Y+9, r24	; 0x09
    204c:	46 c0       	rjmp	.+140    	; 0x20da <correct_right2+0x102>
	else if (__tmp > 65535)
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	6d 81       	ldd	r22, Y+5	; 0x05
    2052:	7e 81       	ldd	r23, Y+6	; 0x06
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <correct_right2+0x92>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	11 23       	and	r17, r17
    206c:	61 f1       	breq	.+88     	; 0x20c6 <correct_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	69 81       	ldd	r22, Y+1	; 0x01
    2070:	7a 81       	ldd	r23, Y+2	; 0x02
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a 87       	std	Y+10, r25	; 0x0a
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <correct_right2+0xe4>
    2098:	80 e7       	ldi	r24, 0x70	; 112
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a4:	8c 01       	movw	r16, r24
    20a6:	c8 01       	movw	r24, r16
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <correct_right2+0xd0>
    20ac:	8c 01       	movw	r16, r24
    20ae:	1c 87       	std	Y+12, r17	; 0x0c
    20b0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9a 87       	std	Y+10, r25	; 0x0a
    20ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	51 f7       	brne	.-44     	; 0x2098 <correct_right2+0xc0>
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <correct_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6d 81       	ldd	r22, Y+5	; 0x05
    20c8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9a 87       	std	Y+10, r25	; 0x0a
    20d8:	89 87       	std	Y+9, r24	; 0x09
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	9e 87       	std	Y+14, r25	; 0x0e
    20e0:	8d 87       	std	Y+13, r24	; 0x0d
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	8c 01       	movw	r16, r24
    20e8:	c8 01       	movw	r24, r16
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <correct_right2+0x112>
    20ee:	8c 01       	movw	r16, r24
    20f0:	1e 87       	std	Y+14, r17	; 0x0e
    20f2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	right_degrees(35);
    20f4:	83 e2       	ldi	r24, 0x23	; 35
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    20fc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <correct_right2+0x12c>

			break;

		}

	}
    2102:	00 00       	nop
	right();
	while(1)

	{

		read_line();
    2104:	81 e7       	ldi	r24, 0x71	; 113
    2106:	92 e3       	ldi	r25, 0x32	; 50
    2108:	fc 01       	movw	r30, r24
    210a:	19 95       	eicall

		//if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>71))
		if(Center_white_line > 25)
    210c:	80 91 51 03 	lds	r24, 0x0351
    2110:	8a 31       	cpi	r24, 0x1A	; 26
    2112:	b8 f3       	brcs	.-18     	; 0x2102 <correct_right2+0x12a>

		{

			stop();
    2114:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a8 e4       	ldi	r26, 0x48	; 72
    211e:	b2 e4       	ldi	r27, 0x42	; 66
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	a9 8b       	std	Y+17, r26	; 0x11
    2126:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6f 85       	ldd	r22, Y+15	; 0x0f
    212a:	78 89       	ldd	r23, Y+16	; 0x10
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	26 e6       	ldi	r18, 0x66	; 102
    2132:	36 e6       	ldi	r19, 0x66	; 102
    2134:	46 e6       	ldi	r20, 0x66	; 102
    2136:	55 e4       	ldi	r21, 0x45	; 69
    2138:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	ad 8b       	std	Y+21, r26	; 0x15
    2146:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2148:	11 e0       	ldi	r17, 0x01	; 1
    214a:	6b 89       	ldd	r22, Y+19	; 0x13
    214c:	7c 89       	ldd	r23, Y+20	; 0x14
    214e:	8d 89       	ldd	r24, Y+21	; 0x15
    2150:	9e 89       	ldd	r25, Y+22	; 0x16
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <correct_right2+0x18c>
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	11 23       	and	r17, r17
    2166:	29 f0       	breq	.+10     	; 0x2172 <correct_right2+0x19a>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 8f       	std	Y+24, r25	; 0x18
    216e:	8f 8b       	std	Y+23, r24	; 0x17
    2170:	46 c0       	rjmp	.+140    	; 0x21fe <correct_right2+0x226>
	else if (__tmp > 65535)
    2172:	11 e0       	ldi	r17, 0x01	; 1
    2174:	6b 89       	ldd	r22, Y+19	; 0x13
    2176:	7c 89       	ldd	r23, Y+20	; 0x14
    2178:	8d 89       	ldd	r24, Y+21	; 0x15
    217a:	9e 89       	ldd	r25, Y+22	; 0x16
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <correct_right2+0x1b6>
    218c:	10 e0       	ldi	r17, 0x00	; 0
    218e:	11 23       	and	r17, r17
    2190:	61 f1       	breq	.+88     	; 0x21ea <correct_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6f 85       	ldd	r22, Y+15	; 0x0f
    2194:	78 89       	ldd	r23, Y+16	; 0x10
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	98 8f       	std	Y+24, r25	; 0x18
    21b8:	8f 8b       	std	Y+23, r24	; 0x17
    21ba:	12 c0       	rjmp	.+36     	; 0x21e0 <correct_right2+0x208>
    21bc:	80 e7       	ldi	r24, 0x70	; 112
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	89 8f       	std	Y+25, r24	; 0x19
    21c4:	89 8d       	ldd	r24, Y+25	; 0x19
    21c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21c8:	8c 01       	movw	r16, r24
    21ca:	c8 01       	movw	r24, r16
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <correct_right2+0x1f4>
    21d0:	8c 01       	movw	r16, r24
    21d2:	1a 8f       	std	Y+26, r17	; 0x1a
    21d4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 8f       	std	Y+24, r25	; 0x18
    21de:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	51 f7       	brne	.-44     	; 0x21bc <correct_right2+0x1e4>
    21e8:	18 c0       	rjmp	.+48     	; 0x221a <__stack+0x1b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6b 89       	ldd	r22, Y+19	; 0x13
    21ec:	7c 89       	ldd	r23, Y+20	; 0x14
    21ee:	8d 89       	ldd	r24, Y+21	; 0x15
    21f0:	9e 89       	ldd	r25, Y+22	; 0x16
    21f2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 8f       	std	Y+24, r25	; 0x18
    21fc:	8f 8b       	std	Y+23, r24	; 0x17
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	9c 8f       	std	Y+28, r25	; 0x1c
    2204:	8b 8f       	std	Y+27, r24	; 0x1b
    2206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220a:	8c 01       	movw	r16, r24
    220c:	c8 01       	movw	r24, r16
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <__stack+0xf>
    2212:	8c 01       	movw	r16, r24
    2214:	1c 8f       	std	Y+28, r17	; 0x1c
    2216:	0b 8f       	std	Y+27, r16	; 0x1b

			_delay_ms(50);

			break;
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	00 00       	nop

		}

	}
}
    221c:	6c 96       	adiw	r28, 0x1c	; 28
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <correct_left>:

*/

void correct_left()

{   
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	6c 97       	sbiw	r28, 0x1c	; 28
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
	     stop();
    224a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ea       	ldi	r26, 0xA0	; 160
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	ab 83       	std	Y+3, r26	; 0x03
    225c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    225e:	69 81       	ldd	r22, Y+1	; 0x01
    2260:	7a 81       	ldd	r23, Y+2	; 0x02
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	26 e6       	ldi	r18, 0x66	; 102
    2268:	36 e6       	ldi	r19, 0x66	; 102
    226a:	46 e6       	ldi	r20, 0x66	; 102
    226c:	55 e4       	ldi	r21, 0x45	; 69
    226e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	af 83       	std	Y+7, r26	; 0x07
    227c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    227e:	11 e0       	ldi	r17, 0x01	; 1
    2280:	6d 81       	ldd	r22, Y+5	; 0x05
    2282:	7e 81       	ldd	r23, Y+6	; 0x06
    2284:	8f 81       	ldd	r24, Y+7	; 0x07
    2286:	98 85       	ldd	r25, Y+8	; 0x08
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2294:	88 23       	and	r24, r24
    2296:	0c f0       	brlt	.+2      	; 0x229a <correct_left+0x68>
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	11 23       	and	r17, r17
    229c:	29 f0       	breq	.+10     	; 0x22a8 <correct_left+0x76>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a 87       	std	Y+10, r25	; 0x0a
    22a4:	89 87       	std	Y+9, r24	; 0x09
    22a6:	46 c0       	rjmp	.+140    	; 0x2334 <correct_left+0x102>
	else if (__tmp > 65535)
    22a8:	11 e0       	ldi	r17, 0x01	; 1
    22aa:	6d 81       	ldd	r22, Y+5	; 0x05
    22ac:	7e 81       	ldd	r23, Y+6	; 0x06
    22ae:	8f 81       	ldd	r24, Y+7	; 0x07
    22b0:	98 85       	ldd	r25, Y+8	; 0x08
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    22be:	18 16       	cp	r1, r24
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <correct_left+0x92>
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	11 23       	and	r17, r17
    22c6:	61 f1       	breq	.+88     	; 0x2320 <correct_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9a 87       	std	Y+10, r25	; 0x0a
    22ee:	89 87       	std	Y+9, r24	; 0x09
    22f0:	12 c0       	rjmp	.+36     	; 0x2316 <correct_left+0xe4>
    22f2:	80 e7       	ldi	r24, 0x70	; 112
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fe:	8c 01       	movw	r16, r24
    2300:	c8 01       	movw	r24, r16
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <correct_left+0xd0>
    2306:	8c 01       	movw	r16, r24
    2308:	1c 87       	std	Y+12, r17	; 0x0c
    230a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9a 87       	std	Y+10, r25	; 0x0a
    2314:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	51 f7       	brne	.-44     	; 0x22f2 <correct_left+0xc0>
    231e:	17 c0       	rjmp	.+46     	; 0x234e <correct_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 81       	ldd	r22, Y+5	; 0x05
    2322:	7e 81       	ldd	r23, Y+6	; 0x06
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
    2326:	98 85       	ldd	r25, Y+8	; 0x08
    2328:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9a 87       	std	Y+10, r25	; 0x0a
    2332:	89 87       	std	Y+9, r24	; 0x09
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	8d 87       	std	Y+13, r24	; 0x0d
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	8c 01       	movw	r16, r24
    2342:	c8 01       	movw	r24, r16
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <correct_left+0x112>
    2348:	8c 01       	movw	r16, r24
    234a:	1e 87       	std	Y+14, r17	; 0x0e
    234c:	0d 87       	std	Y+13, r16	; 0x0d
		 _delay_ms(20);
	     soft_left_degrees(35);
    234e:	83 e2       	ldi	r24, 0x23	; 35
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <soft_left_degrees>
		 soft_left();
    2356:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>
    235a:	01 c0       	rjmp	.+2      	; 0x235e <correct_left+0x12c>
		     {
			     stop();
			     _delay_ms(50);
			     break;
		     }
	     }
    235c:	00 00       	nop
		 _delay_ms(20);
	     soft_left_degrees(35);
		 soft_left();
	     while(1)
	     {
		     read_line();
    235e:	81 e7       	ldi	r24, 0x71	; 113
    2360:	92 e3       	ldi	r25, 0x32	; 50
    2362:	fc 01       	movw	r30, r24
    2364:	19 95       	eicall
			 if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 80))
    2366:	80 91 51 03 	lds	r24, 0x0351
    236a:	8f 30       	cpi	r24, 0x0F	; 15
    236c:	20 f0       	brcs	.+8      	; 0x2376 <correct_left+0x144>
    236e:	80 91 52 03 	lds	r24, 0x0352
    2372:	8f 30       	cpi	r24, 0x0F	; 15
    2374:	20 f4       	brcc	.+8      	; 0x237e <correct_left+0x14c>
    2376:	80 91 51 03 	lds	r24, 0x0351
    237a:	81 35       	cpi	r24, 0x51	; 81
    237c:	78 f3       	brcs	.-34     	; 0x235c <correct_left+0x12a>
		     {
			     stop();
    237e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 e4       	ldi	r26, 0x48	; 72
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	a9 8b       	std	Y+17, r26	; 0x11
    2390:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6f 85       	ldd	r22, Y+15	; 0x0f
    2394:	78 89       	ldd	r23, Y+16	; 0x10
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	26 e6       	ldi	r18, 0x66	; 102
    239c:	36 e6       	ldi	r19, 0x66	; 102
    239e:	46 e6       	ldi	r20, 0x66	; 102
    23a0:	55 e4       	ldi	r21, 0x45	; 69
    23a2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	ad 8b       	std	Y+21, r26	; 0x15
    23b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23b2:	11 e0       	ldi	r17, 0x01	; 1
    23b4:	6b 89       	ldd	r22, Y+19	; 0x13
    23b6:	7c 89       	ldd	r23, Y+20	; 0x14
    23b8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ba:	9e 89       	ldd	r25, Y+22	; 0x16
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	0c f0       	brlt	.+2      	; 0x23ce <correct_left+0x19c>
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	11 23       	and	r17, r17
    23d0:	29 f0       	breq	.+10     	; 0x23dc <correct_left+0x1aa>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	98 8f       	std	Y+24, r25	; 0x18
    23d8:	8f 8b       	std	Y+23, r24	; 0x17
    23da:	46 c0       	rjmp	.+140    	; 0x2468 <correct_left+0x236>
	else if (__tmp > 65535)
    23dc:	11 e0       	ldi	r17, 0x01	; 1
    23de:	6b 89       	ldd	r22, Y+19	; 0x13
    23e0:	7c 89       	ldd	r23, Y+20	; 0x14
    23e2:	8d 89       	ldd	r24, Y+21	; 0x15
    23e4:	9e 89       	ldd	r25, Y+22	; 0x16
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <correct_left+0x1c6>
    23f6:	10 e0       	ldi	r17, 0x00	; 0
    23f8:	11 23       	and	r17, r17
    23fa:	61 f1       	breq	.+88     	; 0x2454 <correct_left+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fe:	78 89       	ldd	r23, Y+16	; 0x10
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 8f       	std	Y+24, r25	; 0x18
    2422:	8f 8b       	std	Y+23, r24	; 0x17
    2424:	12 c0       	rjmp	.+36     	; 0x244a <correct_left+0x218>
    2426:	80 e7       	ldi	r24, 0x70	; 112
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	9a 8f       	std	Y+26, r25	; 0x1a
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	89 8d       	ldd	r24, Y+25	; 0x19
    2430:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2432:	8c 01       	movw	r16, r24
    2434:	c8 01       	movw	r24, r16
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <correct_left+0x204>
    243a:	8c 01       	movw	r16, r24
    243c:	1a 8f       	std	Y+26, r17	; 0x1a
    243e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	98 8f       	std	Y+24, r25	; 0x18
    2448:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	51 f7       	brne	.-44     	; 0x2426 <correct_left+0x1f4>
    2452:	18 c0       	rjmp	.+48     	; 0x2484 <correct_left+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	6b 89       	ldd	r22, Y+19	; 0x13
    2456:	7c 89       	ldd	r23, Y+20	; 0x14
    2458:	8d 89       	ldd	r24, Y+21	; 0x15
    245a:	9e 89       	ldd	r25, Y+22	; 0x16
    245c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	98 8f       	std	Y+24, r25	; 0x18
    2466:	8f 8b       	std	Y+23, r24	; 0x17
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	9c 8f       	std	Y+28, r25	; 0x1c
    246e:	8b 8f       	std	Y+27, r24	; 0x1b
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	8c 01       	movw	r16, r24
    2476:	c8 01       	movw	r24, r16
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <correct_left+0x246>
    247c:	8c 01       	movw	r16, r24
    247e:	1c 8f       	std	Y+28, r17	; 0x1c
    2480:	0b 8f       	std	Y+27, r16	; 0x1b
			     _delay_ms(50);
			     break;
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <correct_left+0x254>
    2484:	00 00       	nop
		     }
	     }
}
    2486:	6c 96       	adiw	r28, 0x1c	; 28
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <spl_left>:

void spl_left(){
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	aa 97       	sbiw	r28, 0x2a	; 42
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
	stop();
    24b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 ea       	ldi	r26, 0xA0	; 160
    24be:	b1 e4       	ldi	r27, 0x41	; 65
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	69 81       	ldd	r22, Y+1	; 0x01
    24ca:	7a 81       	ldd	r23, Y+2	; 0x02
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	26 e6       	ldi	r18, 0x66	; 102
    24d2:	36 e6       	ldi	r19, 0x66	; 102
    24d4:	46 e6       	ldi	r20, 0x66	; 102
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	af 83       	std	Y+7, r26	; 0x07
    24e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24e8:	11 e0       	ldi	r17, 0x01	; 1
    24ea:	6d 81       	ldd	r22, Y+5	; 0x05
    24ec:	7e 81       	ldd	r23, Y+6	; 0x06
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	98 85       	ldd	r25, Y+8	; 0x08
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    24fe:	88 23       	and	r24, r24
    2500:	0c f0       	brlt	.+2      	; 0x2504 <spl_left+0x68>
    2502:	10 e0       	ldi	r17, 0x00	; 0
    2504:	11 23       	and	r17, r17
    2506:	29 f0       	breq	.+10     	; 0x2512 <spl_left+0x76>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9a 87       	std	Y+10, r25	; 0x0a
    250e:	89 87       	std	Y+9, r24	; 0x09
    2510:	46 c0       	rjmp	.+140    	; 0x259e <spl_left+0x102>
	else if (__tmp > 65535)
    2512:	11 e0       	ldi	r17, 0x01	; 1
    2514:	6d 81       	ldd	r22, Y+5	; 0x05
    2516:	7e 81       	ldd	r23, Y+6	; 0x06
    2518:	8f 81       	ldd	r24, Y+7	; 0x07
    251a:	98 85       	ldd	r25, Y+8	; 0x08
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2528:	18 16       	cp	r1, r24
    252a:	0c f0       	brlt	.+2      	; 0x252e <spl_left+0x92>
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	11 23       	and	r17, r17
    2530:	61 f1       	breq	.+88     	; 0x258a <spl_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	69 81       	ldd	r22, Y+1	; 0x01
    2534:	7a 81       	ldd	r23, Y+2	; 0x02
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9a 87       	std	Y+10, r25	; 0x0a
    2558:	89 87       	std	Y+9, r24	; 0x09
    255a:	12 c0       	rjmp	.+36     	; 0x2580 <spl_left+0xe4>
    255c:	80 e7       	ldi	r24, 0x70	; 112
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c 87       	std	Y+12, r25	; 0x0c
    2562:	8b 87       	std	Y+11, r24	; 0x0b
    2564:	8b 85       	ldd	r24, Y+11	; 0x0b
    2566:	9c 85       	ldd	r25, Y+12	; 0x0c
    2568:	8c 01       	movw	r16, r24
    256a:	c8 01       	movw	r24, r16
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <spl_left+0xd0>
    2570:	8c 01       	movw	r16, r24
    2572:	1c 87       	std	Y+12, r17	; 0x0c
    2574:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9a 87       	std	Y+10, r25	; 0x0a
    257e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	51 f7       	brne	.-44     	; 0x255c <spl_left+0xc0>
    2588:	17 c0       	rjmp	.+46     	; 0x25b8 <spl_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6d 81       	ldd	r22, Y+5	; 0x05
    258c:	7e 81       	ldd	r23, Y+6	; 0x06
    258e:	8f 81       	ldd	r24, Y+7	; 0x07
    2590:	98 85       	ldd	r25, Y+8	; 0x08
    2592:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a 87       	std	Y+10, r25	; 0x0a
    259c:	89 87       	std	Y+9, r24	; 0x09
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	9e 87       	std	Y+14, r25	; 0x0e
    25a4:	8d 87       	std	Y+13, r24	; 0x0d
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	8c 01       	movw	r16, r24
    25ac:	c8 01       	movw	r24, r16
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <spl_left+0x112>
    25b2:	8c 01       	movw	r16, r24
    25b4:	1e 87       	std	Y+14, r17	; 0x0e
    25b6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(35);
    25b8:	83 e2       	ldi	r24, 0x23	; 35
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    25c0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <spl_left+0x12c>
		{
		stop();
		_delay_ms(20);
		break;	
		}
	}
    25c6:	00 00       	nop
	stop();
	_delay_ms(20);
	left_degrees(35);
	left();
	while(1){
		read_line();
    25c8:	81 e7       	ldi	r24, 0x71	; 113
    25ca:	92 e3       	ldi	r25, 0x32	; 50
    25cc:	fc 01       	movw	r30, r24
    25ce:	19 95       	eicall
		if(Center_white_line>=25)
    25d0:	80 91 51 03 	lds	r24, 0x0351
    25d4:	89 31       	cpi	r24, 0x19	; 25
    25d6:	b8 f3       	brcs	.-18     	; 0x25c6 <spl_left+0x12a>
		{
		stop();
    25d8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 ea       	ldi	r26, 0xA0	; 160
    25e2:	b1 e4       	ldi	r27, 0x41	; 65
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
    25e6:	98 8b       	std	Y+16, r25	; 0x10
    25e8:	a9 8b       	std	Y+17, r26	; 0x11
    25ea:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    25ee:	78 89       	ldd	r23, Y+16	; 0x10
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	26 e6       	ldi	r18, 0x66	; 102
    25f6:	36 e6       	ldi	r19, 0x66	; 102
    25f8:	46 e6       	ldi	r20, 0x66	; 102
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	ad 8b       	std	Y+21, r26	; 0x15
    260a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    260c:	11 e0       	ldi	r17, 0x01	; 1
    260e:	6b 89       	ldd	r22, Y+19	; 0x13
    2610:	7c 89       	ldd	r23, Y+20	; 0x14
    2612:	8d 89       	ldd	r24, Y+21	; 0x15
    2614:	9e 89       	ldd	r25, Y+22	; 0x16
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2622:	88 23       	and	r24, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <spl_left+0x18c>
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	11 23       	and	r17, r17
    262a:	29 f0       	breq	.+10     	; 0x2636 <spl_left+0x19a>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 8f       	std	Y+24, r25	; 0x18
    2632:	8f 8b       	std	Y+23, r24	; 0x17
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <spl_left+0x226>
	else if (__tmp > 65535)
    2636:	11 e0       	ldi	r17, 0x01	; 1
    2638:	6b 89       	ldd	r22, Y+19	; 0x13
    263a:	7c 89       	ldd	r23, Y+20	; 0x14
    263c:	8d 89       	ldd	r24, Y+21	; 0x15
    263e:	9e 89       	ldd	r25, Y+22	; 0x16
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    264c:	18 16       	cp	r1, r24
    264e:	0c f0       	brlt	.+2      	; 0x2652 <spl_left+0x1b6>
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	11 23       	and	r17, r17
    2654:	61 f1       	breq	.+88     	; 0x26ae <spl_left+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6f 85       	ldd	r22, Y+15	; 0x0f
    2658:	78 89       	ldd	r23, Y+16	; 0x10
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	98 8f       	std	Y+24, r25	; 0x18
    267c:	8f 8b       	std	Y+23, r24	; 0x17
    267e:	12 c0       	rjmp	.+36     	; 0x26a4 <spl_left+0x208>
    2680:	80 e7       	ldi	r24, 0x70	; 112
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	8c 01       	movw	r16, r24
    268e:	c8 01       	movw	r24, r16
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <spl_left+0x1f4>
    2694:	8c 01       	movw	r16, r24
    2696:	1a 8f       	std	Y+26, r17	; 0x1a
    2698:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	98 8f       	std	Y+24, r25	; 0x18
    26a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8f 89       	ldd	r24, Y+23	; 0x17
    26a6:	98 8d       	ldd	r25, Y+24	; 0x18
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	51 f7       	brne	.-44     	; 0x2680 <spl_left+0x1e4>
    26ac:	18 c0       	rjmp	.+48     	; 0x26de <spl_left+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6b 89       	ldd	r22, Y+19	; 0x13
    26b0:	7c 89       	ldd	r23, Y+20	; 0x14
    26b2:	8d 89       	ldd	r24, Y+21	; 0x15
    26b4:	9e 89       	ldd	r25, Y+22	; 0x16
    26b6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 8f       	std	Y+24, r25	; 0x18
    26c0:	8f 8b       	std	Y+23, r24	; 0x17
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	9c 8f       	std	Y+28, r25	; 0x1c
    26c8:	8b 8f       	std	Y+27, r24	; 0x1b
    26ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ce:	8c 01       	movw	r16, r24
    26d0:	c8 01       	movw	r24, r16
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <spl_left+0x236>
    26d6:	8c 01       	movw	r16, r24
    26d8:	1c 8f       	std	Y+28, r17	; 0x1c
    26da:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(20);
		break;	
    26dc:	00 c0       	rjmp	.+0      	; 0x26de <spl_left+0x242>
    26de:	00 00       	nop
		}
	}
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 ea       	ldi	r26, 0xA0	; 160
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ea:	9e 8f       	std	Y+30, r25	; 0x1e
    26ec:	af 8f       	std	Y+31, r26	; 0x1f
    26ee:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	lds	r25, 0x48
    26f8:	26 e6       	ldi	r18, 0x66	; 102
    26fa:	36 e6       	ldi	r19, 0x66	; 102
    26fc:	46 e6       	ldi	r20, 0x66	; 102
    26fe:	55 e4       	ldi	r21, 0x45	; 69
    2700:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	89 a3       	lds	r24, 0x59
    270a:	9a a3       	lds	r25, 0x5a
    270c:	ab a3       	lds	r26, 0x5b
    270e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2710:	11 e0       	ldi	r17, 0x01	; 1
    2712:	69 a1       	lds	r22, 0x49
    2714:	7a a1       	lds	r23, 0x4a
    2716:	8b a1       	lds	r24, 0x4b
    2718:	9c a1       	lds	r25, 0x4c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2726:	88 23       	and	r24, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <spl_left+0x290>
    272a:	10 e0       	ldi	r17, 0x00	; 0
    272c:	11 23       	and	r17, r17
    272e:	29 f0       	breq	.+10     	; 0x273a <spl_left+0x29e>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9e a3       	lds	r25, 0x5e
    2736:	8d a3       	lds	r24, 0x5d
    2738:	46 c0       	rjmp	.+140    	; 0x27c6 <spl_left+0x32a>
	else if (__tmp > 65535)
    273a:	11 e0       	ldi	r17, 0x01	; 1
    273c:	69 a1       	lds	r22, 0x49
    273e:	7a a1       	lds	r23, 0x4a
    2740:	8b a1       	lds	r24, 0x4b
    2742:	9c a1       	lds	r25, 0x4c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2750:	18 16       	cp	r1, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <spl_left+0x2ba>
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	11 23       	and	r17, r17
    2758:	61 f1       	breq	.+88     	; 0x27b2 <spl_left+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    275c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    275e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2760:	98 a1       	lds	r25, 0x48
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e a3       	lds	r25, 0x5e
    2780:	8d a3       	lds	r24, 0x5d
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <spl_left+0x30c>
    2784:	80 e7       	ldi	r24, 0x70	; 112
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	98 a7       	lds	r25, 0x78
    278a:	8f a3       	lds	r24, 0x5f
    278c:	8f a1       	lds	r24, 0x4f
    278e:	98 a5       	lds	r25, 0x68
    2790:	8c 01       	movw	r16, r24
    2792:	c8 01       	movw	r24, r16
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <spl_left+0x2f8>
    2798:	8c 01       	movw	r16, r24
    279a:	18 a7       	lds	r17, 0x78
    279c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d a1       	lds	r24, 0x4d
    27a0:	9e a1       	lds	r25, 0x4e
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e a3       	lds	r25, 0x5e
    27a6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d a1       	lds	r24, 0x4d
    27aa:	9e a1       	lds	r25, 0x4e
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	51 f7       	brne	.-44     	; 0x2784 <spl_left+0x2e8>
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <spl_left+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a1       	lds	r22, 0x49
    27b4:	7a a1       	lds	r23, 0x4a
    27b6:	8b a1       	lds	r24, 0x4b
    27b8:	9c a1       	lds	r25, 0x4c
    27ba:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e a3       	lds	r25, 0x5e
    27c4:	8d a3       	lds	r24, 0x5d
    27c6:	8d a1       	lds	r24, 0x4d
    27c8:	9e a1       	lds	r25, 0x4e
    27ca:	9a a7       	lds	r25, 0x7a
    27cc:	89 a7       	lds	r24, 0x79
    27ce:	89 a5       	lds	r24, 0x69
    27d0:	9a a5       	lds	r25, 0x6a
    27d2:	8c 01       	movw	r16, r24
    27d4:	c8 01       	movw	r24, r16
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <spl_left+0x33a>
    27da:	8c 01       	movw	r16, r24
    27dc:	1a a7       	lds	r17, 0x7a
    27de:	09 a7       	lds	r16, 0x79
	_delay_ms(20);
}
    27e0:	aa 96       	adiw	r28, 0x2a	; 42
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <spl_right>:
void spl_right(){
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	6c 97       	sbiw	r28, 0x1c	; 28
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
	right_degrees(25);
    280e:	89 e1       	ldi	r24, 0x19	; 25
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    2816:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    281a:	01 c0       	rjmp	.+2      	; 0x281e <spl_right+0x28>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    281c:	00 00       	nop
}
void spl_right(){
	right_degrees(25);
	right();
	while(1){
		read_line();
    281e:	81 e7       	ldi	r24, 0x71	; 113
    2820:	92 e3       	ldi	r25, 0x32	; 50
    2822:	fc 01       	movw	r30, r24
    2824:	19 95       	eicall
		if(Center_white_line>=25)
    2826:	80 91 51 03 	lds	r24, 0x0351
    282a:	89 31       	cpi	r24, 0x19	; 25
    282c:	b8 f3       	brcs	.-18     	; 0x281c <spl_right+0x26>
		{
			stop();
    282e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 ea       	ldi	r26, 0xA0	; 160
    2838:	b1 e4       	ldi	r27, 0x41	; 65
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	ab 83       	std	Y+3, r26	; 0x03
    2840:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2842:	69 81       	ldd	r22, Y+1	; 0x01
    2844:	7a 81       	ldd	r23, Y+2	; 0x02
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	26 e6       	ldi	r18, 0x66	; 102
    284c:	36 e6       	ldi	r19, 0x66	; 102
    284e:	46 e6       	ldi	r20, 0x66	; 102
    2850:	55 e4       	ldi	r21, 0x45	; 69
    2852:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	af 83       	std	Y+7, r26	; 0x07
    2860:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2862:	11 e0       	ldi	r17, 0x01	; 1
    2864:	6d 81       	ldd	r22, Y+5	; 0x05
    2866:	7e 81       	ldd	r23, Y+6	; 0x06
    2868:	8f 81       	ldd	r24, Y+7	; 0x07
    286a:	98 85       	ldd	r25, Y+8	; 0x08
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2878:	88 23       	and	r24, r24
    287a:	0c f0       	brlt	.+2      	; 0x287e <spl_right+0x88>
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	11 23       	and	r17, r17
    2880:	29 f0       	breq	.+10     	; 0x288c <spl_right+0x96>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 87       	std	Y+10, r25	; 0x0a
    2888:	89 87       	std	Y+9, r24	; 0x09
    288a:	46 c0       	rjmp	.+140    	; 0x2918 <spl_right+0x122>
	else if (__tmp > 65535)
    288c:	11 e0       	ldi	r17, 0x01	; 1
    288e:	6d 81       	ldd	r22, Y+5	; 0x05
    2890:	7e 81       	ldd	r23, Y+6	; 0x06
    2892:	8f 81       	ldd	r24, Y+7	; 0x07
    2894:	98 85       	ldd	r25, Y+8	; 0x08
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <spl_right+0xb2>
    28a6:	10 e0       	ldi	r17, 0x00	; 0
    28a8:	11 23       	and	r17, r17
    28aa:	61 f1       	breq	.+88     	; 0x2904 <spl_right+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	69 81       	ldd	r22, Y+1	; 0x01
    28ae:	7a 81       	ldd	r23, Y+2	; 0x02
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a 87       	std	Y+10, r25	; 0x0a
    28d2:	89 87       	std	Y+9, r24	; 0x09
    28d4:	12 c0       	rjmp	.+36     	; 0x28fa <spl_right+0x104>
    28d6:	80 e7       	ldi	r24, 0x70	; 112
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	9c 87       	std	Y+12, r25	; 0x0c
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e2:	8c 01       	movw	r16, r24
    28e4:	c8 01       	movw	r24, r16
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <spl_right+0xf0>
    28ea:	8c 01       	movw	r16, r24
    28ec:	1c 87       	std	Y+12, r17	; 0x0c
    28ee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9a 87       	std	Y+10, r25	; 0x0a
    28f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	51 f7       	brne	.-44     	; 0x28d6 <spl_right+0xe0>
    2902:	18 c0       	rjmp	.+48     	; 0x2934 <spl_right+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6d 81       	ldd	r22, Y+5	; 0x05
    2906:	7e 81       	ldd	r23, Y+6	; 0x06
    2908:	8f 81       	ldd	r24, Y+7	; 0x07
    290a:	98 85       	ldd	r25, Y+8	; 0x08
    290c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9a 87       	std	Y+10, r25	; 0x0a
    2916:	89 87       	std	Y+9, r24	; 0x09
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	9e 87       	std	Y+14, r25	; 0x0e
    291e:	8d 87       	std	Y+13, r24	; 0x0d
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	8c 01       	movw	r16, r24
    2926:	c8 01       	movw	r24, r16
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <spl_right+0x132>
    292c:	8c 01       	movw	r16, r24
    292e:	1e 87       	std	Y+14, r17	; 0x0e
    2930:	0d 87       	std	Y+13, r16	; 0x0d
			_delay_ms(20);
			break;
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <spl_right+0x13e>
    2934:	00 00       	nop
		}
	}
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 ea       	ldi	r26, 0xA0	; 160
    293c:	b1 e4       	ldi	r27, 0x41	; 65
    293e:	8f 87       	std	Y+15, r24	; 0x0f
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	a9 8b       	std	Y+17, r26	; 0x11
    2944:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6f 85       	ldd	r22, Y+15	; 0x0f
    2948:	78 89       	ldd	r23, Y+16	; 0x10
    294a:	89 89       	ldd	r24, Y+17	; 0x11
    294c:	9a 89       	ldd	r25, Y+18	; 0x12
    294e:	26 e6       	ldi	r18, 0x66	; 102
    2950:	36 e6       	ldi	r19, 0x66	; 102
    2952:	46 e6       	ldi	r20, 0x66	; 102
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	ad 8b       	std	Y+21, r26	; 0x15
    2964:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2966:	11 e0       	ldi	r17, 0x01	; 1
    2968:	6b 89       	ldd	r22, Y+19	; 0x13
    296a:	7c 89       	ldd	r23, Y+20	; 0x14
    296c:	8d 89       	ldd	r24, Y+21	; 0x15
    296e:	9e 89       	ldd	r25, Y+22	; 0x16
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    297c:	88 23       	and	r24, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <spl_right+0x18c>
    2980:	10 e0       	ldi	r17, 0x00	; 0
    2982:	11 23       	and	r17, r17
    2984:	29 f0       	breq	.+10     	; 0x2990 <spl_right+0x19a>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	98 8f       	std	Y+24, r25	; 0x18
    298c:	8f 8b       	std	Y+23, r24	; 0x17
    298e:	46 c0       	rjmp	.+140    	; 0x2a1c <spl_right+0x226>
	else if (__tmp > 65535)
    2990:	11 e0       	ldi	r17, 0x01	; 1
    2992:	6b 89       	ldd	r22, Y+19	; 0x13
    2994:	7c 89       	ldd	r23, Y+20	; 0x14
    2996:	8d 89       	ldd	r24, Y+21	; 0x15
    2998:	9e 89       	ldd	r25, Y+22	; 0x16
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	0c f0       	brlt	.+2      	; 0x29ac <spl_right+0x1b6>
    29aa:	10 e0       	ldi	r17, 0x00	; 0
    29ac:	11 23       	and	r17, r17
    29ae:	61 f1       	breq	.+88     	; 0x2a08 <spl_right+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    29b2:	78 89       	ldd	r23, Y+16	; 0x10
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	9a 89       	ldd	r25, Y+18	; 0x12
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	98 8f       	std	Y+24, r25	; 0x18
    29d6:	8f 8b       	std	Y+23, r24	; 0x17
    29d8:	12 c0       	rjmp	.+36     	; 0x29fe <spl_right+0x208>
    29da:	80 e7       	ldi	r24, 0x70	; 112
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	9a 8f       	std	Y+26, r25	; 0x1a
    29e0:	89 8f       	std	Y+25, r24	; 0x19
    29e2:	89 8d       	ldd	r24, Y+25	; 0x19
    29e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29e6:	8c 01       	movw	r16, r24
    29e8:	c8 01       	movw	r24, r16
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <spl_right+0x1f4>
    29ee:	8c 01       	movw	r16, r24
    29f0:	1a 8f       	std	Y+26, r17	; 0x1a
    29f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	98 8f       	std	Y+24, r25	; 0x18
    29fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	51 f7       	brne	.-44     	; 0x29da <spl_right+0x1e4>
    2a06:	17 c0       	rjmp	.+46     	; 0x2a36 <spl_right+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6b 89       	ldd	r22, Y+19	; 0x13
    2a0a:	7c 89       	ldd	r23, Y+20	; 0x14
    2a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a0e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a10:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	98 8f       	std	Y+24, r25	; 0x18
    2a1a:	8f 8b       	std	Y+23, r24	; 0x17
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	9c 8f       	std	Y+28, r25	; 0x1c
    2a22:	8b 8f       	std	Y+27, r24	; 0x1b
    2a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a28:	8c 01       	movw	r16, r24
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <spl_right+0x236>
    2a30:	8c 01       	movw	r16, r24
    2a32:	1c 8f       	std	Y+28, r17	; 0x1c
    2a34:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(20);
}
    2a36:	6c 96       	adiw	r28, 0x1c	; 28
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <spl_left2>:
* Example Call:		correct_left2();



*/
void spl_left2(){// FOR FRONT PICK FROM LEFT DIRECTION
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	6c 97       	sbiw	r28, 0x1c	; 28
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
	stop();
    2a64:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a6e:	b1 e4       	ldi	r27, 0x41	; 65
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	ab 83       	std	Y+3, r26	; 0x03
    2a76:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	69 81       	ldd	r22, Y+1	; 0x01
    2a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	26 e6       	ldi	r18, 0x66	; 102
    2a82:	36 e6       	ldi	r19, 0x66	; 102
    2a84:	46 e6       	ldi	r20, 0x66	; 102
    2a86:	55 e4       	ldi	r21, 0x45	; 69
    2a88:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	af 83       	std	Y+7, r26	; 0x07
    2a96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a98:	11 e0       	ldi	r17, 0x01	; 1
    2a9a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a9c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	98 85       	ldd	r25, Y+8	; 0x08
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	0c f0       	brlt	.+2      	; 0x2ab4 <spl_left2+0x68>
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	11 23       	and	r17, r17
    2ab6:	29 f0       	breq	.+10     	; 0x2ac2 <spl_left2+0x76>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a 87       	std	Y+10, r25	; 0x0a
    2abe:	89 87       	std	Y+9, r24	; 0x09
    2ac0:	46 c0       	rjmp	.+140    	; 0x2b4e <spl_left2+0x102>
	else if (__tmp > 65535)
    2ac2:	11 e0       	ldi	r17, 0x01	; 1
    2ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    2aca:	98 85       	ldd	r25, Y+8	; 0x08
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <spl_left2+0x92>
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	11 23       	and	r17, r17
    2ae0:	61 f1       	breq	.+88     	; 0x2b3a <spl_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	69 81       	ldd	r22, Y+1	; 0x01
    2ae4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a 87       	std	Y+10, r25	; 0x0a
    2b08:	89 87       	std	Y+9, r24	; 0x09
    2b0a:	12 c0       	rjmp	.+36     	; 0x2b30 <spl_left2+0xe4>
    2b0c:	80 e7       	ldi	r24, 0x70	; 112
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
    2b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b18:	8c 01       	movw	r16, r24
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <spl_left2+0xd0>
    2b20:	8c 01       	movw	r16, r24
    2b22:	1c 87       	std	Y+12, r17	; 0x0c
    2b24:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9a 87       	std	Y+10, r25	; 0x0a
    2b2e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	51 f7       	brne	.-44     	; 0x2b0c <spl_left2+0xc0>
    2b38:	17 c0       	rjmp	.+46     	; 0x2b68 <spl_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b3c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9a 87       	std	Y+10, r25	; 0x0a
    2b4c:	89 87       	std	Y+9, r24	; 0x09
    2b4e:	89 85       	ldd	r24, Y+9	; 0x09
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	9e 87       	std	Y+14, r25	; 0x0e
    2b54:	8d 87       	std	Y+13, r24	; 0x0d
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	8c 01       	movw	r16, r24
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <spl_left2+0x112>
    2b62:	8c 01       	movw	r16, r24
    2b64:	1e 87       	std	Y+14, r17	; 0x0e
    2b66:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_2_degrees(30);
    2b68:	8e e1       	ldi	r24, 0x1E	; 30
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <soft_left_2_degrees>
	soft_left_2();
    2b70:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <spl_left2+0x12c>
		if(Center_white_line>25){
			stop();
			_delay_ms(20);
			break;
		}
	}
    2b76:	00 00       	nop
	stop();
	_delay_ms(20);
	soft_left_2_degrees(30);
	soft_left_2();
	while(1){
		read_line();
    2b78:	81 e7       	ldi	r24, 0x71	; 113
    2b7a:	92 e3       	ldi	r25, 0x32	; 50
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	19 95       	eicall
		if(Center_white_line>25){
    2b80:	80 91 51 03 	lds	r24, 0x0351
    2b84:	8a 31       	cpi	r24, 0x1A	; 26
    2b86:	b8 f3       	brcs	.-18     	; 0x2b76 <spl_left2+0x12a>
			stop();
    2b88:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 ea       	ldi	r26, 0xA0	; 160
    2b92:	b1 e4       	ldi	r27, 0x41	; 65
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
    2b96:	98 8b       	std	Y+16, r25	; 0x10
    2b98:	a9 8b       	std	Y+17, r26	; 0x11
    2b9a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b9e:	78 89       	ldd	r23, Y+16	; 0x10
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	26 e6       	ldi	r18, 0x66	; 102
    2ba6:	36 e6       	ldi	r19, 0x66	; 102
    2ba8:	46 e6       	ldi	r20, 0x66	; 102
    2baa:	55 e4       	ldi	r21, 0x45	; 69
    2bac:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	ad 8b       	std	Y+21, r26	; 0x15
    2bba:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2bbc:	11 e0       	ldi	r17, 0x01	; 1
    2bbe:	6b 89       	ldd	r22, Y+19	; 0x13
    2bc0:	7c 89       	ldd	r23, Y+20	; 0x14
    2bc2:	8d 89       	ldd	r24, Y+21	; 0x15
    2bc4:	9e 89       	ldd	r25, Y+22	; 0x16
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <spl_left2+0x18c>
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	11 23       	and	r17, r17
    2bda:	29 f0       	breq	.+10     	; 0x2be6 <spl_left2+0x19a>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 8f       	std	Y+24, r25	; 0x18
    2be2:	8f 8b       	std	Y+23, r24	; 0x17
    2be4:	46 c0       	rjmp	.+140    	; 0x2c72 <spl_left2+0x226>
	else if (__tmp > 65535)
    2be6:	11 e0       	ldi	r17, 0x01	; 1
    2be8:	6b 89       	ldd	r22, Y+19	; 0x13
    2bea:	7c 89       	ldd	r23, Y+20	; 0x14
    2bec:	8d 89       	ldd	r24, Y+21	; 0x15
    2bee:	9e 89       	ldd	r25, Y+22	; 0x16
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	3f ef       	ldi	r19, 0xFF	; 255
    2bf4:	4f e7       	ldi	r20, 0x7F	; 127
    2bf6:	57 e4       	ldi	r21, 0x47	; 71
    2bf8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2bfc:	18 16       	cp	r1, r24
    2bfe:	0c f0       	brlt	.+2      	; 0x2c02 <spl_left2+0x1b6>
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	11 23       	and	r17, r17
    2c04:	61 f1       	breq	.+88     	; 0x2c5e <spl_left2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c08:	78 89       	ldd	r23, Y+16	; 0x10
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e2       	ldi	r20, 0x20	; 32
    2c14:	51 e4       	ldi	r21, 0x41	; 65
    2c16:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	98 8f       	std	Y+24, r25	; 0x18
    2c2c:	8f 8b       	std	Y+23, r24	; 0x17
    2c2e:	12 c0       	rjmp	.+36     	; 0x2c54 <spl_left2+0x208>
    2c30:	80 e7       	ldi	r24, 0x70	; 112
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	9a 8f       	std	Y+26, r25	; 0x1a
    2c36:	89 8f       	std	Y+25, r24	; 0x19
    2c38:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3c:	8c 01       	movw	r16, r24
    2c3e:	c8 01       	movw	r24, r16
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <spl_left2+0x1f4>
    2c44:	8c 01       	movw	r16, r24
    2c46:	1a 8f       	std	Y+26, r17	; 0x1a
    2c48:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	98 8f       	std	Y+24, r25	; 0x18
    2c52:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	51 f7       	brne	.-44     	; 0x2c30 <spl_left2+0x1e4>
    2c5c:	18 c0       	rjmp	.+48     	; 0x2c8e <spl_left2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6b 89       	ldd	r22, Y+19	; 0x13
    2c60:	7c 89       	ldd	r23, Y+20	; 0x14
    2c62:	8d 89       	ldd	r24, Y+21	; 0x15
    2c64:	9e 89       	ldd	r25, Y+22	; 0x16
    2c66:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	98 8f       	std	Y+24, r25	; 0x18
    2c70:	8f 8b       	std	Y+23, r24	; 0x17
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	9c 8f       	std	Y+28, r25	; 0x1c
    2c78:	8b 8f       	std	Y+27, r24	; 0x1b
    2c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7e:	8c 01       	movw	r16, r24
    2c80:	c8 01       	movw	r24, r16
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <spl_left2+0x236>
    2c86:	8c 01       	movw	r16, r24
    2c88:	1c 8f       	std	Y+28, r17	; 0x1c
    2c8a:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <spl_left2+0x244>
    2c8e:	00 00       	nop
		}
	}
}
    2c90:	6c 96       	adiw	r28, 0x1c	; 28
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <spl_right2>:
void spl_right2(){//FOR FRONT WHEN BOT IS COMING FROM RIGHT
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	6c 97       	sbiw	r28, 0x1c	; 28
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
	stop();
    2cbe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cc8:	b1 e4       	ldi	r27, 0x41	; 65
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	ab 83       	std	Y+3, r26	; 0x03
    2cd0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	69 81       	ldd	r22, Y+1	; 0x01
    2cd4:	7a 81       	ldd	r23, Y+2	; 0x02
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	26 e6       	ldi	r18, 0x66	; 102
    2cdc:	36 e6       	ldi	r19, 0x66	; 102
    2cde:	46 e6       	ldi	r20, 0x66	; 102
    2ce0:	55 e4       	ldi	r21, 0x45	; 69
    2ce2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	af 83       	std	Y+7, r26	; 0x07
    2cf0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2cf2:	11 e0       	ldi	r17, 0x01	; 1
    2cf4:	6d 81       	ldd	r22, Y+5	; 0x05
    2cf6:	7e 81       	ldd	r23, Y+6	; 0x06
    2cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfa:	98 85       	ldd	r25, Y+8	; 0x08
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <spl_right2+0x68>
    2d0c:	10 e0       	ldi	r17, 0x00	; 0
    2d0e:	11 23       	and	r17, r17
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <spl_right2+0x76>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9a 87       	std	Y+10, r25	; 0x0a
    2d18:	89 87       	std	Y+9, r24	; 0x09
    2d1a:	46 c0       	rjmp	.+140    	; 0x2da8 <spl_right2+0x102>
	else if (__tmp > 65535)
    2d1c:	11 e0       	ldi	r17, 0x01	; 1
    2d1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d20:	7e 81       	ldd	r23, Y+6	; 0x06
    2d22:	8f 81       	ldd	r24, Y+7	; 0x07
    2d24:	98 85       	ldd	r25, Y+8	; 0x08
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <spl_right2+0x92>
    2d36:	10 e0       	ldi	r17, 0x00	; 0
    2d38:	11 23       	and	r17, r17
    2d3a:	61 f1       	breq	.+88     	; 0x2d94 <spl_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	69 81       	ldd	r22, Y+1	; 0x01
    2d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a 87       	std	Y+10, r25	; 0x0a
    2d62:	89 87       	std	Y+9, r24	; 0x09
    2d64:	12 c0       	rjmp	.+36     	; 0x2d8a <spl_right2+0xe4>
    2d66:	80 e7       	ldi	r24, 0x70	; 112
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	9c 87       	std	Y+12, r25	; 0x0c
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d72:	8c 01       	movw	r16, r24
    2d74:	c8 01       	movw	r24, r16
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <spl_right2+0xd0>
    2d7a:	8c 01       	movw	r16, r24
    2d7c:	1c 87       	std	Y+12, r17	; 0x0c
    2d7e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9a 87       	std	Y+10, r25	; 0x0a
    2d88:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	51 f7       	brne	.-44     	; 0x2d66 <spl_right2+0xc0>
    2d92:	17 c0       	rjmp	.+46     	; 0x2dc2 <spl_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6d 81       	ldd	r22, Y+5	; 0x05
    2d96:	7e 81       	ldd	r23, Y+6	; 0x06
    2d98:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9a:	98 85       	ldd	r25, Y+8	; 0x08
    2d9c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9a 87       	std	Y+10, r25	; 0x0a
    2da6:	89 87       	std	Y+9, r24	; 0x09
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	9e 87       	std	Y+14, r25	; 0x0e
    2dae:	8d 87       	std	Y+13, r24	; 0x0d
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	8c 01       	movw	r16, r24
    2db6:	c8 01       	movw	r24, r16
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <spl_right2+0x112>
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	1e 87       	std	Y+14, r17	; 0x0e
    2dc0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_2_degrees(30);
    2dc2:	8e e1       	ldi	r24, 0x1E	; 30
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <soft_right_2_degrees>
	soft_right_2();
    2dca:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <spl_right2+0x12c>
		if(Center_white_line>25){
			stop();
			_delay_ms(20);
			break;
		}
	}
    2dd0:	00 00       	nop
	stop();
	_delay_ms(20);
	soft_right_2_degrees(30);
	soft_right_2();
	while(1){
		read_line();
    2dd2:	81 e7       	ldi	r24, 0x71	; 113
    2dd4:	92 e3       	ldi	r25, 0x32	; 50
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	19 95       	eicall
		if(Center_white_line>25){
    2dda:	80 91 51 03 	lds	r24, 0x0351
    2dde:	8a 31       	cpi	r24, 0x1A	; 26
    2de0:	b8 f3       	brcs	.-18     	; 0x2dd0 <spl_right2+0x12a>
			stop();
    2de2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 ea       	ldi	r26, 0xA0	; 160
    2dec:	b1 e4       	ldi	r27, 0x41	; 65
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    2df0:	98 8b       	std	Y+16, r25	; 0x10
    2df2:	a9 8b       	std	Y+17, r26	; 0x11
    2df4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2df8:	78 89       	ldd	r23, Y+16	; 0x10
    2dfa:	89 89       	ldd	r24, Y+17	; 0x11
    2dfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dfe:	26 e6       	ldi	r18, 0x66	; 102
    2e00:	36 e6       	ldi	r19, 0x66	; 102
    2e02:	46 e6       	ldi	r20, 0x66	; 102
    2e04:	55 e4       	ldi	r21, 0x45	; 69
    2e06:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8b 8b       	std	Y+19, r24	; 0x13
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	ad 8b       	std	Y+21, r26	; 0x15
    2e14:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2e16:	11 e0       	ldi	r17, 0x01	; 1
    2e18:	6b 89       	ldd	r22, Y+19	; 0x13
    2e1a:	7c 89       	ldd	r23, Y+20	; 0x14
    2e1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2e1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	0c f0       	brlt	.+2      	; 0x2e32 <spl_right2+0x18c>
    2e30:	10 e0       	ldi	r17, 0x00	; 0
    2e32:	11 23       	and	r17, r17
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <spl_right2+0x19a>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	98 8f       	std	Y+24, r25	; 0x18
    2e3c:	8f 8b       	std	Y+23, r24	; 0x17
    2e3e:	46 c0       	rjmp	.+140    	; 0x2ecc <spl_right2+0x226>
	else if (__tmp > 65535)
    2e40:	11 e0       	ldi	r17, 0x01	; 1
    2e42:	6b 89       	ldd	r22, Y+19	; 0x13
    2e44:	7c 89       	ldd	r23, Y+20	; 0x14
    2e46:	8d 89       	ldd	r24, Y+21	; 0x15
    2e48:	9e 89       	ldd	r25, Y+22	; 0x16
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <spl_right2+0x1b6>
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    2e5c:	11 23       	and	r17, r17
    2e5e:	61 f1       	breq	.+88     	; 0x2eb8 <spl_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e62:	78 89       	ldd	r23, Y+16	; 0x10
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	98 8f       	std	Y+24, r25	; 0x18
    2e86:	8f 8b       	std	Y+23, r24	; 0x17
    2e88:	12 c0       	rjmp	.+36     	; 0x2eae <spl_right2+0x208>
    2e8a:	80 e7       	ldi	r24, 0x70	; 112
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e90:	89 8f       	std	Y+25, r24	; 0x19
    2e92:	89 8d       	ldd	r24, Y+25	; 0x19
    2e94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e96:	8c 01       	movw	r16, r24
    2e98:	c8 01       	movw	r24, r16
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <spl_right2+0x1f4>
    2e9e:	8c 01       	movw	r16, r24
    2ea0:	1a 8f       	std	Y+26, r17	; 0x1a
    2ea2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	98 8f       	std	Y+24, r25	; 0x18
    2eac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	51 f7       	brne	.-44     	; 0x2e8a <spl_right2+0x1e4>
    2eb6:	18 c0       	rjmp	.+48     	; 0x2ee8 <spl_right2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6b 89       	ldd	r22, Y+19	; 0x13
    2eba:	7c 89       	ldd	r23, Y+20	; 0x14
    2ebc:	8d 89       	ldd	r24, Y+21	; 0x15
    2ebe:	9e 89       	ldd	r25, Y+22	; 0x16
    2ec0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	98 8f       	std	Y+24, r25	; 0x18
    2eca:	8f 8b       	std	Y+23, r24	; 0x17
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	9c 8f       	std	Y+28, r25	; 0x1c
    2ed2:	8b 8f       	std	Y+27, r24	; 0x1b
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	8c 01       	movw	r16, r24
    2eda:	c8 01       	movw	r24, r16
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <spl_right2+0x236>
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ee4:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <spl_right2+0x244>
    2ee8:	00 00       	nop
		}
	}
}
    2eea:	6c 96       	adiw	r28, 0x1c	; 28
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <correct_left2>:
void correct_left2()

{   
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	6c 97       	sbiw	r28, 0x1c	; 28
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61

    stop();
    2f18:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a8 e4       	ldi	r26, 0x48	; 72
    2f22:	b2 e4       	ldi	r27, 0x42	; 66
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	ab 83       	std	Y+3, r26	; 0x03
    2f2a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	69 81       	ldd	r22, Y+1	; 0x01
    2f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	26 e6       	ldi	r18, 0x66	; 102
    2f36:	36 e6       	ldi	r19, 0x66	; 102
    2f38:	46 e6       	ldi	r20, 0x66	; 102
    2f3a:	55 e4       	ldi	r21, 0x45	; 69
    2f3c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	af 83       	std	Y+7, r26	; 0x07
    2f4a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f4c:	11 e0       	ldi	r17, 0x01	; 1
    2f4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f50:	7e 81       	ldd	r23, Y+6	; 0x06
    2f52:	8f 81       	ldd	r24, Y+7	; 0x07
    2f54:	98 85       	ldd	r25, Y+8	; 0x08
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <correct_left2+0x68>
    2f66:	10 e0       	ldi	r17, 0x00	; 0
    2f68:	11 23       	and	r17, r17
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <correct_left2+0x76>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9a 87       	std	Y+10, r25	; 0x0a
    2f72:	89 87       	std	Y+9, r24	; 0x09
    2f74:	46 c0       	rjmp	.+140    	; 0x3002 <correct_left2+0x102>
	else if (__tmp > 65535)
    2f76:	11 e0       	ldi	r17, 0x01	; 1
    2f78:	6d 81       	ldd	r22, Y+5	; 0x05
    2f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7e:	98 85       	ldd	r25, Y+8	; 0x08
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <correct_left2+0x92>
    2f90:	10 e0       	ldi	r17, 0x00	; 0
    2f92:	11 23       	and	r17, r17
    2f94:	61 f1       	breq	.+88     	; 0x2fee <correct_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	69 81       	ldd	r22, Y+1	; 0x01
    2f98:	7a 81       	ldd	r23, Y+2	; 0x02
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9a 87       	std	Y+10, r25	; 0x0a
    2fbc:	89 87       	std	Y+9, r24	; 0x09
    2fbe:	12 c0       	rjmp	.+36     	; 0x2fe4 <correct_left2+0xe4>
    2fc0:	80 e7       	ldi	r24, 0x70	; 112
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fcc:	8c 01       	movw	r16, r24
    2fce:	c8 01       	movw	r24, r16
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <correct_left2+0xd0>
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	1c 87       	std	Y+12, r17	; 0x0c
    2fd8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9a 87       	std	Y+10, r25	; 0x0a
    2fe2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	51 f7       	brne	.-44     	; 0x2fc0 <correct_left2+0xc0>
    2fec:	17 c0       	rjmp	.+46     	; 0x301c <correct_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6d 81       	ldd	r22, Y+5	; 0x05
    2ff0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	98 85       	ldd	r25, Y+8	; 0x08
    2ff6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9a 87       	std	Y+10, r25	; 0x0a
    3000:	89 87       	std	Y+9, r24	; 0x09
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	9e 87       	std	Y+14, r25	; 0x0e
    3008:	8d 87       	std	Y+13, r24	; 0x0d
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	8c 01       	movw	r16, r24
    3010:	c8 01       	movw	r24, r16
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <correct_left2+0x112>
    3016:	8c 01       	movw	r16, r24
    3018:	1e 87       	std	Y+14, r17	; 0x0e
    301a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	left_degrees(35);
    301c:	83 e2       	ldi	r24, 0x23	; 35
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    3024:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    3028:	01 c0       	rjmp	.+2      	; 0x302c <correct_left2+0x12c>

			break;

		}

	}
    302a:	00 00       	nop
	left_degrees(35);
	left();
	while(1)

	{   
		read_line();
    302c:	81 e7       	ldi	r24, 0x71	; 113
    302e:	92 e3       	ldi	r25, 0x32	; 50
    3030:	fc 01       	movw	r30, r24
    3032:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 70))
    3034:	80 91 51 03 	lds	r24, 0x0351
    3038:	8f 30       	cpi	r24, 0x0F	; 15
    303a:	20 f0       	brcs	.+8      	; 0x3044 <correct_left2+0x144>
    303c:	80 91 52 03 	lds	r24, 0x0352
    3040:	8f 30       	cpi	r24, 0x0F	; 15
    3042:	20 f4       	brcc	.+8      	; 0x304c <correct_left2+0x14c>
    3044:	80 91 51 03 	lds	r24, 0x0351
    3048:	87 34       	cpi	r24, 0x47	; 71
    304a:	78 f3       	brcs	.-34     	; 0x302a <correct_left2+0x12a>

		{

			stop();
    304c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a8 e4       	ldi	r26, 0x48	; 72
    3056:	b2 e4       	ldi	r27, 0x42	; 66
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	98 8b       	std	Y+16, r25	; 0x10
    305c:	a9 8b       	std	Y+17, r26	; 0x11
    305e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3060:	6f 85       	ldd	r22, Y+15	; 0x0f
    3062:	78 89       	ldd	r23, Y+16	; 0x10
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	26 e6       	ldi	r18, 0x66	; 102
    306a:	36 e6       	ldi	r19, 0x66	; 102
    306c:	46 e6       	ldi	r20, 0x66	; 102
    306e:	55 e4       	ldi	r21, 0x45	; 69
    3070:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8b 8b       	std	Y+19, r24	; 0x13
    307a:	9c 8b       	std	Y+20, r25	; 0x14
    307c:	ad 8b       	std	Y+21, r26	; 0x15
    307e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3080:	11 e0       	ldi	r17, 0x01	; 1
    3082:	6b 89       	ldd	r22, Y+19	; 0x13
    3084:	7c 89       	ldd	r23, Y+20	; 0x14
    3086:	8d 89       	ldd	r24, Y+21	; 0x15
    3088:	9e 89       	ldd	r25, Y+22	; 0x16
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    3096:	88 23       	and	r24, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <correct_left2+0x19c>
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	11 23       	and	r17, r17
    309e:	29 f0       	breq	.+10     	; 0x30aa <correct_left2+0x1aa>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	98 8f       	std	Y+24, r25	; 0x18
    30a6:	8f 8b       	std	Y+23, r24	; 0x17
    30a8:	46 c0       	rjmp	.+140    	; 0x3136 <correct_left2+0x236>
	else if (__tmp > 65535)
    30aa:	11 e0       	ldi	r17, 0x01	; 1
    30ac:	6b 89       	ldd	r22, Y+19	; 0x13
    30ae:	7c 89       	ldd	r23, Y+20	; 0x14
    30b0:	8d 89       	ldd	r24, Y+21	; 0x15
    30b2:	9e 89       	ldd	r25, Y+22	; 0x16
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <correct_left2+0x1c6>
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	11 23       	and	r17, r17
    30c8:	61 f1       	breq	.+88     	; 0x3122 <correct_left2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    30cc:	78 89       	ldd	r23, Y+16	; 0x10
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	9a 89       	ldd	r25, Y+18	; 0x12
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	98 8f       	std	Y+24, r25	; 0x18
    30f0:	8f 8b       	std	Y+23, r24	; 0x17
    30f2:	12 c0       	rjmp	.+36     	; 0x3118 <correct_left2+0x218>
    30f4:	80 e7       	ldi	r24, 0x70	; 112
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	9a 8f       	std	Y+26, r25	; 0x1a
    30fa:	89 8f       	std	Y+25, r24	; 0x19
    30fc:	89 8d       	ldd	r24, Y+25	; 0x19
    30fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3100:	8c 01       	movw	r16, r24
    3102:	c8 01       	movw	r24, r16
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <correct_left2+0x204>
    3108:	8c 01       	movw	r16, r24
    310a:	1a 8f       	std	Y+26, r17	; 0x1a
    310c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	98 8f       	std	Y+24, r25	; 0x18
    3116:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3118:	8f 89       	ldd	r24, Y+23	; 0x17
    311a:	98 8d       	ldd	r25, Y+24	; 0x18
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	51 f7       	brne	.-44     	; 0x30f4 <correct_left2+0x1f4>
    3120:	18 c0       	rjmp	.+48     	; 0x3152 <correct_left2+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3122:	6b 89       	ldd	r22, Y+19	; 0x13
    3124:	7c 89       	ldd	r23, Y+20	; 0x14
    3126:	8d 89       	ldd	r24, Y+21	; 0x15
    3128:	9e 89       	ldd	r25, Y+22	; 0x16
    312a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	98 8f       	std	Y+24, r25	; 0x18
    3134:	8f 8b       	std	Y+23, r24	; 0x17
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	9c 8f       	std	Y+28, r25	; 0x1c
    313c:	8b 8f       	std	Y+27, r24	; 0x1b
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	8c 01       	movw	r16, r24
    3144:	c8 01       	movw	r24, r16
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <correct_left2+0x246>
    314a:	8c 01       	movw	r16, r24
    314c:	1c 8f       	std	Y+28, r17	; 0x1c
    314e:	0b 8f       	std	Y+27, r16	; 0x1b

			_delay_ms(50);

			break;
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <correct_left2+0x254>
    3152:	00 00       	nop
		}

	}


}
    3154:	6c 96       	adiw	r28, 0x1c	; 28
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	08 95       	ret

0000316a <correct_right3>:

void correct_right3()

{   stop();
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	6c 97       	sbiw	r28, 0x1c	; 28
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 ea       	ldi	r26, 0xA0	; 160
    318c:	b1 e4       	ldi	r27, 0x41	; 65
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	ab 83       	std	Y+3, r26	; 0x03
    3194:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3196:	69 81       	ldd	r22, Y+1	; 0x01
    3198:	7a 81       	ldd	r23, Y+2	; 0x02
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	26 e6       	ldi	r18, 0x66	; 102
    31a0:	36 e6       	ldi	r19, 0x66	; 102
    31a2:	46 e6       	ldi	r20, 0x66	; 102
    31a4:	55 e4       	ldi	r21, 0x45	; 69
    31a6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	af 83       	std	Y+7, r26	; 0x07
    31b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    31b6:	11 e0       	ldi	r17, 0x01	; 1
    31b8:	6d 81       	ldd	r22, Y+5	; 0x05
    31ba:	7e 81       	ldd	r23, Y+6	; 0x06
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <correct_right3+0x68>
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	11 23       	and	r17, r17
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <correct_right3+0x76>
		__ticks = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9a 87       	std	Y+10, r25	; 0x0a
    31dc:	89 87       	std	Y+9, r24	; 0x09
    31de:	46 c0       	rjmp	.+140    	; 0x326c <correct_right3+0x102>
	else if (__tmp > 65535)
    31e0:	11 e0       	ldi	r17, 0x01	; 1
    31e2:	6d 81       	ldd	r22, Y+5	; 0x05
    31e4:	7e 81       	ldd	r23, Y+6	; 0x06
    31e6:	8f 81       	ldd	r24, Y+7	; 0x07
    31e8:	98 85       	ldd	r25, Y+8	; 0x08
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <correct_right3+0x92>
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	11 23       	and	r17, r17
    31fe:	61 f1       	breq	.+88     	; 0x3258 <correct_right3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3200:	69 81       	ldd	r22, Y+1	; 0x01
    3202:	7a 81       	ldd	r23, Y+2	; 0x02
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e2       	ldi	r20, 0x20	; 32
    320e:	51 e4       	ldi	r21, 0x41	; 65
    3210:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a 87       	std	Y+10, r25	; 0x0a
    3226:	89 87       	std	Y+9, r24	; 0x09
    3228:	12 c0       	rjmp	.+36     	; 0x324e <correct_right3+0xe4>
    322a:	80 e7       	ldi	r24, 0x70	; 112
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	9c 87       	std	Y+12, r25	; 0x0c
    3230:	8b 87       	std	Y+11, r24	; 0x0b
    3232:	8b 85       	ldd	r24, Y+11	; 0x0b
    3234:	9c 85       	ldd	r25, Y+12	; 0x0c
    3236:	8c 01       	movw	r16, r24
    3238:	c8 01       	movw	r24, r16
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <correct_right3+0xd0>
    323e:	8c 01       	movw	r16, r24
    3240:	1c 87       	std	Y+12, r17	; 0x0c
    3242:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9a 87       	std	Y+10, r25	; 0x0a
    324c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	51 f7       	brne	.-44     	; 0x322a <correct_right3+0xc0>
    3256:	17 c0       	rjmp	.+46     	; 0x3286 <correct_right3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 81       	ldd	r22, Y+5	; 0x05
    325a:	7e 81       	ldd	r23, Y+6	; 0x06
    325c:	8f 81       	ldd	r24, Y+7	; 0x07
    325e:	98 85       	ldd	r25, Y+8	; 0x08
    3260:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9a 87       	std	Y+10, r25	; 0x0a
    326a:	89 87       	std	Y+9, r24	; 0x09
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	9e 87       	std	Y+14, r25	; 0x0e
    3272:	8d 87       	std	Y+13, r24	; 0x0d
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	8c 01       	movw	r16, r24
    327a:	c8 01       	movw	r24, r16
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <correct_right3+0x112>
    3280:	8c 01       	movw	r16, r24
    3282:	1e 87       	std	Y+14, r17	; 0x0e
    3284:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	right_degrees(160);
    3286:	80 ea       	ldi	r24, 0xA0	; 160
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    328e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <correct_right3+0x12c>
	while(1){
		read_line();
		if(Center_white_line>25){
			stop();
		break;}
	}
    3294:	00 00       	nop
{   stop();
	_delay_ms(20);
	right_degrees(160);
	right();
	while(1){
		read_line();
    3296:	81 e7       	ldi	r24, 0x71	; 113
    3298:	92 e3       	ldi	r25, 0x32	; 50
    329a:	fc 01       	movw	r30, r24
    329c:	19 95       	eicall
		if(Center_white_line>25){
    329e:	80 91 51 03 	lds	r24, 0x0351
    32a2:	8a 31       	cpi	r24, 0x1A	; 26
    32a4:	b8 f3       	brcs	.-18     	; 0x3294 <correct_right3+0x12a>
			stop();
    32a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		break;}
    32aa:	00 00       	nop
	}
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 e2       	ldi	r26, 0x20	; 32
    32b2:	b2 e4       	ldi	r27, 0x42	; 66
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
    32b6:	98 8b       	std	Y+16, r25	; 0x10
    32b8:	a9 8b       	std	Y+17, r26	; 0x11
    32ba:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    32be:	78 89       	ldd	r23, Y+16	; 0x10
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	9a 89       	ldd	r25, Y+18	; 0x12
    32c4:	26 e6       	ldi	r18, 0x66	; 102
    32c6:	36 e6       	ldi	r19, 0x66	; 102
    32c8:	46 e6       	ldi	r20, 0x66	; 102
    32ca:	55 e4       	ldi	r21, 0x45	; 69
    32cc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	9c 8b       	std	Y+20, r25	; 0x14
    32d8:	ad 8b       	std	Y+21, r26	; 0x15
    32da:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    32dc:	11 e0       	ldi	r17, 0x01	; 1
    32de:	6b 89       	ldd	r22, Y+19	; 0x13
    32e0:	7c 89       	ldd	r23, Y+20	; 0x14
    32e2:	8d 89       	ldd	r24, Y+21	; 0x15
    32e4:	9e 89       	ldd	r25, Y+22	; 0x16
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    32f2:	88 23       	and	r24, r24
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <correct_right3+0x18e>
    32f6:	10 e0       	ldi	r17, 0x00	; 0
    32f8:	11 23       	and	r17, r17
    32fa:	29 f0       	breq	.+10     	; 0x3306 <correct_right3+0x19c>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	98 8f       	std	Y+24, r25	; 0x18
    3302:	8f 8b       	std	Y+23, r24	; 0x17
    3304:	46 c0       	rjmp	.+140    	; 0x3392 <correct_right3+0x228>
	else if (__tmp > 65535)
    3306:	11 e0       	ldi	r17, 0x01	; 1
    3308:	6b 89       	ldd	r22, Y+19	; 0x13
    330a:	7c 89       	ldd	r23, Y+20	; 0x14
    330c:	8d 89       	ldd	r24, Y+21	; 0x15
    330e:	9e 89       	ldd	r25, Y+22	; 0x16
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    331c:	18 16       	cp	r1, r24
    331e:	0c f0       	brlt	.+2      	; 0x3322 <correct_right3+0x1b8>
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	11 23       	and	r17, r17
    3324:	61 f1       	breq	.+88     	; 0x337e <correct_right3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	6f 85       	ldd	r22, Y+15	; 0x0f
    3328:	78 89       	ldd	r23, Y+16	; 0x10
    332a:	89 89       	ldd	r24, Y+17	; 0x11
    332c:	9a 89       	ldd	r25, Y+18	; 0x12
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	98 8f       	std	Y+24, r25	; 0x18
    334c:	8f 8b       	std	Y+23, r24	; 0x17
    334e:	12 c0       	rjmp	.+36     	; 0x3374 <correct_right3+0x20a>
    3350:	80 e7       	ldi	r24, 0x70	; 112
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	9a 8f       	std	Y+26, r25	; 0x1a
    3356:	89 8f       	std	Y+25, r24	; 0x19
    3358:	89 8d       	ldd	r24, Y+25	; 0x19
    335a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    335c:	8c 01       	movw	r16, r24
    335e:	c8 01       	movw	r24, r16
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <correct_right3+0x1f6>
    3364:	8c 01       	movw	r16, r24
    3366:	1a 8f       	std	Y+26, r17	; 0x1a
    3368:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	98 8f       	std	Y+24, r25	; 0x18
    3372:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	51 f7       	brne	.-44     	; 0x3350 <correct_right3+0x1e6>
    337c:	17 c0       	rjmp	.+46     	; 0x33ac <correct_right3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	6b 89       	ldd	r22, Y+19	; 0x13
    3380:	7c 89       	ldd	r23, Y+20	; 0x14
    3382:	8d 89       	ldd	r24, Y+21	; 0x15
    3384:	9e 89       	ldd	r25, Y+22	; 0x16
    3386:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	98 8f       	std	Y+24, r25	; 0x18
    3390:	8f 8b       	std	Y+23, r24	; 0x17
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	9c 8f       	std	Y+28, r25	; 0x1c
    3398:	8b 8f       	std	Y+27, r24	; 0x1b
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	8c 01       	movw	r16, r24
    33a0:	c8 01       	movw	r24, r16
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <correct_right3+0x238>
    33a6:	8c 01       	movw	r16, r24
    33a8:	1c 8f       	std	Y+28, r17	; 0x1c
    33aa:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    33ac:	88 e2       	ldi	r24, 0x28	; 40
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    33b4:	6c 96       	adiw	r28, 0x1c	; 28
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <adc_pin_config>:

*/

void adc_pin_config(void)

{
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62

    DDRF = 0x00;
    33d2:	80 e3       	ldi	r24, 0x30	; 48
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	fc 01       	movw	r30, r24
    33d8:	10 82       	st	Z, r1

    PORTF = 0x00;
    33da:	81 e3       	ldi	r24, 0x31	; 49
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	fc 01       	movw	r30, r24
    33e0:	10 82       	st	Z, r1

    DDRK = 0x00;
    33e2:	87 e0       	ldi	r24, 0x07	; 7
    33e4:	91 e0       	ldi	r25, 0x01	; 1
    33e6:	fc 01       	movw	r30, r24
    33e8:	10 82       	st	Z, r1

    PORTK = 0x00;
    33ea:	88 e0       	ldi	r24, 0x08	; 8
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	fc 01       	movw	r30, r24
    33f0:	10 82       	st	Z, r1

}
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	08 95       	ret

000033f8 <adc_init>:

*/

void adc_init() 

{
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0x00;
    3400:	8a e7       	ldi	r24, 0x7A	; 122
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	fc 01       	movw	r30, r24
    3406:	10 82       	st	Z, r1

	ADCSRB = 0x00; //MUX5 = 0
    3408:	8b e7       	ldi	r24, 0x7B	; 123
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	fc 01       	movw	r30, r24
    340e:	10 82       	st	Z, r1

	ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    3410:	8c e7       	ldi	r24, 0x7C	; 124
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	20 e2       	ldi	r18, 0x20	; 32
    3416:	fc 01       	movw	r30, r24
    3418:	20 83       	st	Z, r18

	ACSR = 0x80;
    341a:	80 e5       	ldi	r24, 0x50	; 80
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	20 e8       	ldi	r18, 0x80	; 128
    3420:	fc 01       	movw	r30, r24
    3422:	20 83       	st	Z, r18

	ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    3424:	8a e7       	ldi	r24, 0x7A	; 122
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	26 e8       	ldi	r18, 0x86	; 134
    342a:	fc 01       	movw	r30, r24
    342c:	20 83       	st	Z, r18

}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	08 95       	ret

00003434 <ADC_Conversion>:

*/

unsigned char ADC_Conversion(unsigned char Ch) 

{
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	0f 92       	push	r0
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	8a 83       	std	Y+2, r24	; 0x02

	unsigned char a;

	if (Ch > 7)
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	88 30       	cpi	r24, 0x08	; 8
    3446:	28 f0       	brcs	.+10     	; 0x3452 <ADC_Conversion+0x1e>

	{

		ADCSRB = 0x08;
    3448:	8b e7       	ldi	r24, 0x7B	; 123
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	28 e0       	ldi	r18, 0x08	; 8
    344e:	fc 01       	movw	r30, r24
    3450:	20 83       	st	Z, r18

	}

	Ch = Ch & 0x07;
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	87 70       	andi	r24, 0x07	; 7
    3456:	8a 83       	std	Y+2, r24	; 0x02

	ADMUX = 0x20 | Ch;
    3458:	8c e7       	ldi	r24, 0x7C	; 124
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	2a 81       	ldd	r18, Y+2	; 0x02
    345e:	20 62       	ori	r18, 0x20	; 32
    3460:	fc 01       	movw	r30, r24
    3462:	20 83       	st	Z, r18

	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
    3464:	8a e7       	ldi	r24, 0x7A	; 122
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	2a e7       	ldi	r18, 0x7A	; 122
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	f9 01       	movw	r30, r18
    346e:	20 81       	ld	r18, Z
    3470:	20 64       	ori	r18, 0x40	; 64
    3472:	fc 01       	movw	r30, r24
    3474:	20 83       	st	Z, r18

	while ((ADCSRA & 0x10) == 0); //Wait for conversion to complete
    3476:	00 00       	nop
    3478:	8a e7       	ldi	r24, 0x7A	; 122
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	fc 01       	movw	r30, r24
    347e:	80 81       	ld	r24, Z
    3480:	88 2f       	mov	r24, r24
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	80 71       	andi	r24, 0x10	; 16
    3486:	90 70       	andi	r25, 0x00	; 0
    3488:	00 97       	sbiw	r24, 0x00	; 0
    348a:	b1 f3       	breq	.-20     	; 0x3478 <ADC_Conversion+0x44>

	a = ADCH;
    348c:	89 e7       	ldi	r24, 0x79	; 121
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	fc 01       	movw	r30, r24
    3492:	80 81       	ld	r24, Z
    3494:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA = ADCSRA | 0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    3496:	8a e7       	ldi	r24, 0x7A	; 122
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	2a e7       	ldi	r18, 0x7A	; 122
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	f9 01       	movw	r30, r18
    34a0:	20 81       	ld	r18, Z
    34a2:	20 61       	ori	r18, 0x10	; 16
    34a4:	fc 01       	movw	r30, r24
    34a6:	20 83       	st	Z, r18

	ADCSRB = 0x00;
    34a8:	8b e7       	ldi	r24, 0x7B	; 123
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	fc 01       	movw	r30, r24
    34ae:	10 82       	st	Z, r1

	return a;
    34b0:	89 81       	ldd	r24, Y+1	; 0x01

}
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	08 95       	ret

000034bc <print_sensor>:

*/

void print_sensor(char row, char coloumn, unsigned char channel)

 {
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <print_sensor+0x6>
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	89 83       	std	Y+1, r24	; 0x01
    34c8:	6a 83       	std	Y+2, r22	; 0x02
    34ca:	4b 83       	std	Y+3, r20	; 0x03



	ADC_Value = ADC_Conversion(channel);
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	0e 94 1a 1a 	call	0x3434	; 0x3434 <ADC_Conversion>
    34d2:	80 93 c3 04 	sts	0x04C3, r24

	lcd_print(row, coloumn, ADC_Value, 3);
    34d6:	80 91 c3 04 	lds	r24, 0x04C3
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	6a 81       	ldd	r22, Y+2	; 0x02
    34e2:	a9 01       	movw	r20, r18
    34e4:	23 e0       	ldi	r18, 0x03	; 3
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	08 95       	ret

000034f8 <__vector_35>:

*/

ISR(TIMER3_OVF_vect)

{
    34f8:	1f 92       	push	r1
    34fa:	0f 92       	push	r0
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	0f 92       	push	r0
    3500:	00 90 5b 00 	lds	r0, 0x005B
    3504:	0f 92       	push	r0
    3506:	11 24       	eor	r1, r1
    3508:	2f 93       	push	r18
    350a:	3f 93       	push	r19
    350c:	4f 93       	push	r20
    350e:	5f 93       	push	r21
    3510:	6f 93       	push	r22
    3512:	7f 93       	push	r23
    3514:	8f 93       	push	r24
    3516:	9f 93       	push	r25
    3518:	af 93       	push	r26
    351a:	bf 93       	push	r27
    351c:	ef 93       	push	r30
    351e:	ff 93       	push	r31
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62

    read_line();
    3528:	81 e7       	ldi	r24, 0x71	; 113
    352a:	92 e3       	ldi	r25, 0x32	; 50
    352c:	fc 01       	movw	r30, r24
    352e:	19 95       	eicall

    line_conditions();
    3530:	89 ef       	ldi	r24, 0xF9	; 249
    3532:	92 e3       	ldi	r25, 0x32	; 50
    3534:	fc 01       	movw	r30, r24
    3536:	19 95       	eicall

    TCNT3 = 0xFDC0;
    3538:	84 e9       	ldi	r24, 0x94	; 148
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	20 ec       	ldi	r18, 0xC0	; 192
    353e:	3d ef       	ldi	r19, 0xFD	; 253
    3540:	fc 01       	movw	r30, r24
    3542:	31 83       	std	Z+1, r19	; 0x01
    3544:	20 83       	st	Z, r18

}
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	ff 91       	pop	r31
    354c:	ef 91       	pop	r30
    354e:	bf 91       	pop	r27
    3550:	af 91       	pop	r26
    3552:	9f 91       	pop	r25
    3554:	8f 91       	pop	r24
    3556:	7f 91       	pop	r23
    3558:	6f 91       	pop	r22
    355a:	5f 91       	pop	r21
    355c:	4f 91       	pop	r20
    355e:	3f 91       	pop	r19
    3560:	2f 91       	pop	r18
    3562:	0f 90       	pop	r0
    3564:	00 92 5b 00 	sts	0x005B, r0
    3568:	0f 90       	pop	r0
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	0f 90       	pop	r0
    356e:	1f 90       	pop	r1
    3570:	18 95       	reti

00003572 <__vector_45>:

*/

ISR(TIMER4_OVF_vect)

{
    3572:	1f 92       	push	r1
    3574:	0f 92       	push	r0
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	0f 92       	push	r0
    357a:	00 90 5b 00 	lds	r0, 0x005B
    357e:	0f 92       	push	r0
    3580:	11 24       	eor	r1, r1
    3582:	2f 93       	push	r18
    3584:	3f 93       	push	r19
    3586:	4f 93       	push	r20
    3588:	5f 93       	push	r21
    358a:	6f 93       	push	r22
    358c:	7f 93       	push	r23
    358e:	8f 93       	push	r24
    3590:	9f 93       	push	r25
    3592:	af 93       	push	r26
    3594:	bf 93       	push	r27
    3596:	ef 93       	push	r30
    3598:	ff 93       	push	r31
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62

    TCNT4 = 0xE980;
    35a2:	84 ea       	ldi	r24, 0xA4	; 164
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	20 e8       	ldi	r18, 0x80	; 128
    35a8:	39 ee       	ldi	r19, 0xE9	; 233
    35aa:	fc 01       	movw	r30, r24
    35ac:	31 83       	std	Z+1, r19	; 0x01
    35ae:	20 83       	st	Z, r18

    t4_sec++; //Increment every 0.1 sec
    35b0:	80 91 53 03 	lds	r24, 0x0353
    35b4:	90 91 54 03 	lds	r25, 0x0354
    35b8:	01 96       	adiw	r24, 0x01	; 1
    35ba:	90 93 54 03 	sts	0x0354, r25
    35be:	80 93 53 03 	sts	0x0353, r24



    if (t4_sec == t4_count && t4_flag == 1)
    35c2:	20 91 53 03 	lds	r18, 0x0353
    35c6:	30 91 54 03 	lds	r19, 0x0354
    35ca:	80 91 c8 04 	lds	r24, 0x04C8
    35ce:	90 91 c9 04 	lds	r25, 0x04C9
    35d2:	28 17       	cp	r18, r24
    35d4:	39 07       	cpc	r19, r25
    35d6:	59 f4       	brne	.+22     	; 0x35ee <__vector_45+0x7c>
    35d8:	80 91 55 03 	lds	r24, 0x0355
    35dc:	90 91 56 03 	lds	r25, 0x0356
    35e0:	81 30       	cpi	r24, 0x01	; 1
    35e2:	91 05       	cpc	r25, r1
    35e4:	21 f4       	brne	.+8      	; 0x35ee <__vector_45+0x7c>

        stop_timer4();
    35e6:	80 e3       	ldi	r24, 0x30	; 48
    35e8:	9b e1       	ldi	r25, 0x1B	; 27
    35ea:	fc 01       	movw	r30, r24
    35ec:	19 95       	eicall

}
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	ff 91       	pop	r31
    35f4:	ef 91       	pop	r30
    35f6:	bf 91       	pop	r27
    35f8:	af 91       	pop	r26
    35fa:	9f 91       	pop	r25
    35fc:	8f 91       	pop	r24
    35fe:	7f 91       	pop	r23
    3600:	6f 91       	pop	r22
    3602:	5f 91       	pop	r21
    3604:	4f 91       	pop	r20
    3606:	3f 91       	pop	r19
    3608:	2f 91       	pop	r18
    360a:	0f 90       	pop	r0
    360c:	00 92 5b 00 	sts	0x005B, r0
    3610:	0f 90       	pop	r0
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	0f 90       	pop	r0
    3616:	1f 90       	pop	r1
    3618:	18 95       	reti

0000361a <start_timer4>:

*/

void start_timer4(int count)

{
    361a:	cf 93       	push	r28
    361c:	df 93       	push	r29
    361e:	0f 92       	push	r0
    3620:	0f 92       	push	r0
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01

    t4_flag = 1; //Indicate timer 4 is enabled
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	90 93 56 03 	sts	0x0356, r25
    3632:	80 93 55 03 	sts	0x0355, r24

    t4_sec = 0;
    3636:	10 92 54 03 	sts	0x0354, r1
    363a:	10 92 53 03 	sts	0x0353, r1

    t4_count = count + 1;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	90 93 c9 04 	sts	0x04C9, r25
    3648:	80 93 c8 04 	sts	0x04C8, r24

    TIMSK4 = 0x01; //Timer 4 overflow interrupt enable
    364c:	82 e7       	ldi	r24, 0x72	; 114
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	21 e0       	ldi	r18, 0x01	; 1
    3652:	fc 01       	movw	r30, r24
    3654:	20 83       	st	Z, r18

}
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <stop_timer4>:

*/

void stop_timer4()

{
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62

	t4_flag = 0;
    3668:	10 92 56 03 	sts	0x0356, r1
    366c:	10 92 55 03 	sts	0x0355, r1

	t4_sec = 0;
    3670:	10 92 54 03 	sts	0x0354, r1
    3674:	10 92 53 03 	sts	0x0353, r1

	TIMSK4 = 0x00; //Timer4 overflow interrupt disable
    3678:	82 e7       	ldi	r24, 0x72	; 114
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	fc 01       	movw	r30, r24
    367e:	10 82       	st	Z, r1

}
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	08 95       	ret

00003686 <servo1_pin_config>:
unsigned char ii = 0;
signed char jj = 0;

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    368e:	84 e2       	ldi	r24, 0x24	; 36
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	24 e2       	ldi	r18, 0x24	; 36
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	f9 01       	movw	r30, r18
    3698:	20 81       	ld	r18, Z
    369a:	20 62       	ori	r18, 0x20	; 32
    369c:	fc 01       	movw	r30, r24
    369e:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    36a0:	85 e2       	ldi	r24, 0x25	; 37
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	25 e2       	ldi	r18, 0x25	; 37
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	f9 01       	movw	r30, r18
    36aa:	20 81       	ld	r18, Z
    36ac:	20 62       	ori	r18, 0x20	; 32
    36ae:	fc 01       	movw	r30, r24
    36b0:	20 83       	st	Z, r18
}
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	08 95       	ret

000036b8 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    36c0:	84 e2       	ldi	r24, 0x24	; 36
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	24 e2       	ldi	r18, 0x24	; 36
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	f9 01       	movw	r30, r18
    36ca:	20 81       	ld	r18, Z
    36cc:	20 64       	ori	r18, 0x40	; 64
    36ce:	fc 01       	movw	r30, r24
    36d0:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    36d2:	85 e2       	ldi	r24, 0x25	; 37
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	25 e2       	ldi	r18, 0x25	; 37
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	f9 01       	movw	r30, r18
    36dc:	20 81       	ld	r18, Z
    36de:	20 64       	ori	r18, 0x40	; 64
    36e0:	fc 01       	movw	r30, r24
    36e2:	20 83       	st	Z, r18
}
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	08 95       	ret

000036ea <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    36f2:	84 e2       	ldi	r24, 0x24	; 36
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	24 e2       	ldi	r18, 0x24	; 36
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	f9 01       	movw	r30, r18
    36fc:	20 81       	ld	r18, Z
    36fe:	20 68       	ori	r18, 0x80	; 128
    3700:	fc 01       	movw	r30, r24
    3702:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    3704:	85 e2       	ldi	r24, 0x25	; 37
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	25 e2       	ldi	r18, 0x25	; 37
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	f9 01       	movw	r30, r18
    370e:	20 81       	ld	r18, Z
    3710:	20 68       	ori	r18, 0x80	; 128
    3712:	fc 01       	movw	r30, r24
    3714:	20 83       	st	Z, r18
}
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    371c:	0f 93       	push	r16
    371e:	1f 93       	push	r17
    3720:	cf 93       	push	r28
    3722:	df 93       	push	r29
    3724:	00 d0       	rcall	.+0      	; 0x3726 <servo_1+0xa>
    3726:	0f 92       	push	r0
    3728:	0f 92       	push	r0
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	dc 01       	movw	r26, r24
    3736:	89 83       	std	Y+1, r24	; 0x01
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	ab 83       	std	Y+3, r26	; 0x03
    373c:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees * 0.512) + 34.56;
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	88 2f       	mov	r24, r24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	a0 e0       	ldi	r26, 0x00	; 0
    3746:	b0 e0       	ldi	r27, 0x00	; 0
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 bc 80 	call	0x10178	; 0x10178 <__floatunsisf>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	bc 01       	movw	r22, r24
    3756:	cd 01       	movw	r24, r26
    3758:	2f e6       	ldi	r18, 0x6F	; 111
    375a:	32 e1       	ldi	r19, 0x12	; 18
    375c:	43 e0       	ldi	r20, 0x03	; 3
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	21 e7       	ldi	r18, 0x71	; 113
    376e:	3d e3       	ldi	r19, 0x3D	; 61
    3770:	4a e0       	ldi	r20, 0x0A	; 10
    3772:	52 e4       	ldi	r21, 0x42	; 66
    3774:	0e 94 c0 7f 	call	0xff80	; 0xff80 <__addsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	9a 83       	std	Y+2, r25	; 0x02
    3780:	ab 83       	std	Y+3, r26	; 0x03
    3782:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    3784:	89 e8       	ldi	r24, 0x89	; 137
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	fc 01       	movw	r30, r24
    378a:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    378c:	08 e8       	ldi	r16, 0x88	; 136
    378e:	10 e0       	ldi	r17, 0x00	; 0
    3790:	69 81       	ldd	r22, Y+1	; 0x01
    3792:	7a 81       	ldd	r23, Y+2	; 0x02
    3794:	8b 81       	ldd	r24, Y+3	; 0x03
    3796:	9c 81       	ldd	r25, Y+4	; 0x04
    3798:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
}
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <servo_2+0xa>
    37c2:	0f 92       	push	r0
    37c4:	0f 92       	push	r0
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	dc 01       	movw	r26, r24
    37d2:	89 83       	std	Y+1, r24	; 0x01
    37d4:	9a 83       	std	Y+2, r25	; 0x02
    37d6:	ab 83       	std	Y+3, r26	; 0x03
    37d8:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees * 0.512) + 34.56;
    37da:	8d 81       	ldd	r24, Y+5	; 0x05
    37dc:	88 2f       	mov	r24, r24
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	a0 e0       	ldi	r26, 0x00	; 0
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	bc 01       	movw	r22, r24
    37e6:	cd 01       	movw	r24, r26
    37e8:	0e 94 bc 80 	call	0x10178	; 0x10178 <__floatunsisf>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	2f e6       	ldi	r18, 0x6F	; 111
    37f6:	32 e1       	ldi	r19, 0x12	; 18
    37f8:	43 e0       	ldi	r20, 0x03	; 3
    37fa:	5f e3       	ldi	r21, 0x3F	; 63
    37fc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	21 e7       	ldi	r18, 0x71	; 113
    380a:	3d e3       	ldi	r19, 0x3D	; 61
    380c:	4a e0       	ldi	r20, 0x0A	; 10
    380e:	52 e4       	ldi	r21, 0x42	; 66
    3810:	0e 94 c0 7f 	call	0xff80	; 0xff80 <__addsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	9a 83       	std	Y+2, r25	; 0x02
    381c:	ab 83       	std	Y+3, r26	; 0x03
    381e:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    3820:	8b e8       	ldi	r24, 0x8B	; 139
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	fc 01       	movw	r30, r24
    3826:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    3828:	0a e8       	ldi	r16, 0x8A	; 138
    382a:	10 e0       	ldi	r17, 0x00	; 0
    382c:	69 81       	ldd	r22, Y+1	; 0x01
    382e:	7a 81       	ldd	r23, Y+2	; 0x02
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	9c 81       	ldd	r25, Y+4	; 0x04
    3834:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	f8 01       	movw	r30, r16
    383e:	80 83       	st	Z, r24
}
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	df 91       	pop	r29
    384c:	cf 91       	pop	r28
    384e:	1f 91       	pop	r17
    3850:	0f 91       	pop	r16
    3852:	08 95       	ret

00003854 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	00 d0       	rcall	.+0      	; 0x385e <servo_3+0xa>
    385e:	0f 92       	push	r0
    3860:	0f 92       	push	r0
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	dc 01       	movw	r26, r24
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	ab 83       	std	Y+3, r26	; 0x03
    3874:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees * 0.512) + 34.56;
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	88 2f       	mov	r24, r24
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	a0 e0       	ldi	r26, 0x00	; 0
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 bc 80 	call	0x10178	; 0x10178 <__floatunsisf>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	2f e6       	ldi	r18, 0x6F	; 111
    3892:	32 e1       	ldi	r19, 0x12	; 18
    3894:	43 e0       	ldi	r20, 0x03	; 3
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	21 e7       	ldi	r18, 0x71	; 113
    38a6:	3d e3       	ldi	r19, 0x3D	; 61
    38a8:	4a e0       	ldi	r20, 0x0A	; 10
    38aa:	52 e4       	ldi	r21, 0x42	; 66
    38ac:	0e 94 c0 7f 	call	0xff80	; 0xff80 <__addsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	9a 83       	std	Y+2, r25	; 0x02
    38b8:	ab 83       	std	Y+3, r26	; 0x03
    38ba:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    38bc:	8d e8       	ldi	r24, 0x8D	; 141
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	fc 01       	movw	r30, r24
    38c2:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    38c4:	0c e8       	ldi	r16, 0x8C	; 140
    38c6:	10 e0       	ldi	r17, 0x00	; 0
    38c8:	69 81       	ldd	r22, Y+1	; 0x01
    38ca:	7a 81       	ldd	r23, Y+2	; 0x02
    38cc:	8b 81       	ldd	r24, Y+3	; 0x03
    38ce:	9c 81       	ldd	r25, Y+4	; 0x04
    38d0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	f8 01       	movw	r30, r16
    38da:	80 83       	st	Z, r24
}
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	08 95       	ret

000038f0 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    38f8:	89 e8       	ldi	r24, 0x89	; 137
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	23 e0       	ldi	r18, 0x03	; 3
    38fe:	fc 01       	movw	r30, r24
    3900:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    3902:	88 e8       	ldi	r24, 0x88	; 136
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	2f ef       	ldi	r18, 0xFF	; 255
    3908:	fc 01       	movw	r30, r24
    390a:	20 83       	st	Z, r18
}
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	08 95       	ret

00003912 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    3912:	cf 93       	push	r28
    3914:	df 93       	push	r29
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    391a:	8b e8       	ldi	r24, 0x8B	; 139
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	23 e0       	ldi	r18, 0x03	; 3
    3920:	fc 01       	movw	r30, r24
    3922:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    3924:	8a e8       	ldi	r24, 0x8A	; 138
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	2f ef       	ldi	r18, 0xFF	; 255
    392a:	fc 01       	movw	r30, r24
    392c:	20 83       	st	Z, r18
}
    392e:	df 91       	pop	r29
    3930:	cf 91       	pop	r28
    3932:	08 95       	ret

00003934 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    393c:	8d e8       	ldi	r24, 0x8D	; 141
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	23 e0       	ldi	r18, 0x03	; 3
    3942:	fc 01       	movw	r30, r24
    3944:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    3946:	8c e8       	ldi	r24, 0x8C	; 140
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	2f ef       	ldi	r18, 0xFF	; 255
    394c:	fc 01       	movw	r30, r24
    394e:	20 83       	st	Z, r18
} 
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	08 95       	ret

00003956 <gripper_open>:
void gripper_open()
{
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	6c 97       	sbiw	r28, 0x1c	; 28
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	cd bf       	out	0x3d, r28	; 61
	for(jj=0;jj<55;jj++)
    396e:	10 92 58 03 	sts	0x0358, r1
    3972:	89 c0       	rjmp	.+274    	; 0x3a86 <gripper_open+0x130>
	{
		servo_3(jj);
    3974:	80 91 58 03 	lds	r24, 0x0358
    3978:	0e 94 2a 1c 	call	0x3854	; 0x3854 <servo_3>
    397c:	80 e0       	ldi	r24, 0x00	; 0
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	a0 e2       	ldi	r26, 0x20	; 32
    3982:	b1 e4       	ldi	r27, 0x41	; 65
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	ab 83       	std	Y+3, r26	; 0x03
    398a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    398c:	69 81       	ldd	r22, Y+1	; 0x01
    398e:	7a 81       	ldd	r23, Y+2	; 0x02
    3990:	8b 81       	ldd	r24, Y+3	; 0x03
    3992:	9c 81       	ldd	r25, Y+4	; 0x04
    3994:	26 e6       	ldi	r18, 0x66	; 102
    3996:	36 e6       	ldi	r19, 0x66	; 102
    3998:	46 e6       	ldi	r20, 0x66	; 102
    399a:	55 e4       	ldi	r21, 0x45	; 69
    399c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	8d 83       	std	Y+5, r24	; 0x05
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	af 83       	std	Y+7, r26	; 0x07
    39aa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    39ac:	11 e0       	ldi	r17, 0x01	; 1
    39ae:	6d 81       	ldd	r22, Y+5	; 0x05
    39b0:	7e 81       	ldd	r23, Y+6	; 0x06
    39b2:	8f 81       	ldd	r24, Y+7	; 0x07
    39b4:	98 85       	ldd	r25, Y+8	; 0x08
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e8       	ldi	r20, 0x80	; 128
    39bc:	5f e3       	ldi	r21, 0x3F	; 63
    39be:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    39c2:	88 23       	and	r24, r24
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <gripper_open+0x72>
    39c6:	10 e0       	ldi	r17, 0x00	; 0
    39c8:	11 23       	and	r17, r17
    39ca:	29 f0       	breq	.+10     	; 0x39d6 <gripper_open+0x80>
		__ticks = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9a 87       	std	Y+10, r25	; 0x0a
    39d2:	89 87       	std	Y+9, r24	; 0x09
    39d4:	46 c0       	rjmp	.+140    	; 0x3a62 <gripper_open+0x10c>
	else if (__tmp > 65535)
    39d6:	11 e0       	ldi	r17, 0x01	; 1
    39d8:	6d 81       	ldd	r22, Y+5	; 0x05
    39da:	7e 81       	ldd	r23, Y+6	; 0x06
    39dc:	8f 81       	ldd	r24, Y+7	; 0x07
    39de:	98 85       	ldd	r25, Y+8	; 0x08
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	3f ef       	ldi	r19, 0xFF	; 255
    39e4:	4f e7       	ldi	r20, 0x7F	; 127
    39e6:	57 e4       	ldi	r21, 0x47	; 71
    39e8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    39ec:	18 16       	cp	r1, r24
    39ee:	0c f0       	brlt	.+2      	; 0x39f2 <gripper_open+0x9c>
    39f0:	10 e0       	ldi	r17, 0x00	; 0
    39f2:	11 23       	and	r17, r17
    39f4:	61 f1       	breq	.+88     	; 0x3a4e <gripper_open+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f6:	69 81       	ldd	r22, Y+1	; 0x01
    39f8:	7a 81       	ldd	r23, Y+2	; 0x02
    39fa:	8b 81       	ldd	r24, Y+3	; 0x03
    39fc:	9c 81       	ldd	r25, Y+4	; 0x04
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e2       	ldi	r20, 0x20	; 32
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	9a 87       	std	Y+10, r25	; 0x0a
    3a1c:	89 87       	std	Y+9, r24	; 0x09
    3a1e:	12 c0       	rjmp	.+36     	; 0x3a44 <gripper_open+0xee>
    3a20:	80 e7       	ldi	r24, 0x70	; 112
    3a22:	91 e0       	ldi	r25, 0x01	; 1
    3a24:	9c 87       	std	Y+12, r25	; 0x0c
    3a26:	8b 87       	std	Y+11, r24	; 0x0b
    3a28:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a2c:	8c 01       	movw	r16, r24
    3a2e:	c8 01       	movw	r24, r16
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <gripper_open+0xda>
    3a34:	8c 01       	movw	r16, r24
    3a36:	1c 87       	std	Y+12, r17	; 0x0c
    3a38:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	9a 87       	std	Y+10, r25	; 0x0a
    3a42:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	51 f7       	brne	.-44     	; 0x3a20 <gripper_open+0xca>
    3a4c:	17 c0       	rjmp	.+46     	; 0x3a7c <gripper_open+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4e:	6d 81       	ldd	r22, Y+5	; 0x05
    3a50:	7e 81       	ldd	r23, Y+6	; 0x06
    3a52:	8f 81       	ldd	r24, Y+7	; 0x07
    3a54:	98 85       	ldd	r25, Y+8	; 0x08
    3a56:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9a 87       	std	Y+10, r25	; 0x0a
    3a60:	89 87       	std	Y+9, r24	; 0x09
    3a62:	89 85       	ldd	r24, Y+9	; 0x09
    3a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a66:	9e 87       	std	Y+14, r25	; 0x0e
    3a68:	8d 87       	std	Y+13, r24	; 0x0d
    3a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6e:	8c 01       	movw	r16, r24
    3a70:	c8 01       	movw	r24, r16
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <gripper_open+0x11c>
    3a76:	8c 01       	movw	r16, r24
    3a78:	1e 87       	std	Y+14, r17	; 0x0e
    3a7a:	0d 87       	std	Y+13, r16	; 0x0d
 OCR1CH = 0x03;
 OCR1CL = 0xFF; //Servo 3 off
} 
void gripper_open()
{
	for(jj=0;jj<55;jj++)
    3a7c:	80 91 58 03 	lds	r24, 0x0358
    3a80:	8f 5f       	subi	r24, 0xFF	; 255
    3a82:	80 93 58 03 	sts	0x0358, r24
    3a86:	80 91 58 03 	lds	r24, 0x0358
    3a8a:	87 33       	cpi	r24, 0x37	; 55
    3a8c:	0c f4       	brge	.+2      	; 0x3a90 <gripper_open+0x13a>
    3a8e:	72 cf       	rjmp	.-284    	; 0x3974 <gripper_open+0x1e>
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	a8 e4       	ldi	r26, 0x48	; 72
    3a96:	b3 e4       	ldi	r27, 0x43	; 67
    3a98:	8f 87       	std	Y+15, r24	; 0x0f
    3a9a:	98 8b       	std	Y+16, r25	; 0x10
    3a9c:	a9 8b       	std	Y+17, r26	; 0x11
    3a9e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3aa0:	6f 85       	ldd	r22, Y+15	; 0x0f
    3aa2:	78 89       	ldd	r23, Y+16	; 0x10
    3aa4:	89 89       	ldd	r24, Y+17	; 0x11
    3aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    3aa8:	26 e6       	ldi	r18, 0x66	; 102
    3aaa:	36 e6       	ldi	r19, 0x66	; 102
    3aac:	46 e6       	ldi	r20, 0x66	; 102
    3aae:	55 e4       	ldi	r21, 0x45	; 69
    3ab0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	8b 8b       	std	Y+19, r24	; 0x13
    3aba:	9c 8b       	std	Y+20, r25	; 0x14
    3abc:	ad 8b       	std	Y+21, r26	; 0x15
    3abe:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3ac0:	11 e0       	ldi	r17, 0x01	; 1
    3ac2:	6b 89       	ldd	r22, Y+19	; 0x13
    3ac4:	7c 89       	ldd	r23, Y+20	; 0x14
    3ac6:	8d 89       	ldd	r24, Y+21	; 0x15
    3ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	40 e8       	ldi	r20, 0x80	; 128
    3ad0:	5f e3       	ldi	r21, 0x3F	; 63
    3ad2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	0c f0       	brlt	.+2      	; 0x3adc <gripper_open+0x186>
    3ada:	10 e0       	ldi	r17, 0x00	; 0
    3adc:	11 23       	and	r17, r17
    3ade:	29 f0       	breq	.+10     	; 0x3aea <gripper_open+0x194>
		__ticks = 1;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	98 8f       	std	Y+24, r25	; 0x18
    3ae6:	8f 8b       	std	Y+23, r24	; 0x17
    3ae8:	46 c0       	rjmp	.+140    	; 0x3b76 <gripper_open+0x220>
	else if (__tmp > 65535)
    3aea:	11 e0       	ldi	r17, 0x01	; 1
    3aec:	6b 89       	ldd	r22, Y+19	; 0x13
    3aee:	7c 89       	ldd	r23, Y+20	; 0x14
    3af0:	8d 89       	ldd	r24, Y+21	; 0x15
    3af2:	9e 89       	ldd	r25, Y+22	; 0x16
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	0c f0       	brlt	.+2      	; 0x3b06 <gripper_open+0x1b0>
    3b04:	10 e0       	ldi	r17, 0x00	; 0
    3b06:	11 23       	and	r17, r17
    3b08:	61 f1       	breq	.+88     	; 0x3b62 <gripper_open+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3b0c:	78 89       	ldd	r23, Y+16	; 0x10
    3b0e:	89 89       	ldd	r24, Y+17	; 0x11
    3b10:	9a 89       	ldd	r25, Y+18	; 0x12
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e2       	ldi	r20, 0x20	; 32
    3b18:	51 e4       	ldi	r21, 0x41	; 65
    3b1a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	98 8f       	std	Y+24, r25	; 0x18
    3b30:	8f 8b       	std	Y+23, r24	; 0x17
    3b32:	12 c0       	rjmp	.+36     	; 0x3b58 <gripper_open+0x202>
    3b34:	80 e7       	ldi	r24, 0x70	; 112
    3b36:	91 e0       	ldi	r25, 0x01	; 1
    3b38:	9a 8f       	std	Y+26, r25	; 0x1a
    3b3a:	89 8f       	std	Y+25, r24	; 0x19
    3b3c:	89 8d       	ldd	r24, Y+25	; 0x19
    3b3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b40:	8c 01       	movw	r16, r24
    3b42:	c8 01       	movw	r24, r16
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <gripper_open+0x1ee>
    3b48:	8c 01       	movw	r16, r24
    3b4a:	1a 8f       	std	Y+26, r17	; 0x1a
    3b4c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b50:	98 8d       	ldd	r25, Y+24	; 0x18
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	98 8f       	std	Y+24, r25	; 0x18
    3b56:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b58:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	51 f7       	brne	.-44     	; 0x3b34 <gripper_open+0x1de>
    3b60:	17 c0       	rjmp	.+46     	; 0x3b90 <gripper_open+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b62:	6b 89       	ldd	r22, Y+19	; 0x13
    3b64:	7c 89       	ldd	r23, Y+20	; 0x14
    3b66:	8d 89       	ldd	r24, Y+21	; 0x15
    3b68:	9e 89       	ldd	r25, Y+22	; 0x16
    3b6a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	98 8f       	std	Y+24, r25	; 0x18
    3b74:	8f 8b       	std	Y+23, r24	; 0x17
    3b76:	8f 89       	ldd	r24, Y+23	; 0x17
    3b78:	98 8d       	ldd	r25, Y+24	; 0x18
    3b7a:	9c 8f       	std	Y+28, r25	; 0x1c
    3b7c:	8b 8f       	std	Y+27, r24	; 0x1b
    3b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b82:	8c 01       	movw	r16, r24
    3b84:	c8 01       	movw	r24, r16
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	f1 f7       	brne	.-4      	; 0x3b86 <gripper_open+0x230>
    3b8a:	8c 01       	movw	r16, r24
    3b8c:	1c 8f       	std	Y+28, r17	; 0x1c
    3b8e:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_3(jj);
		_delay_ms(10);
	}
	_delay_ms(200);
}
    3b90:	6c 96       	adiw	r28, 0x1c	; 28
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	08 95       	ret

00003ba6 <gripper_close>:

void gripper_close()
{
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	6c 97       	sbiw	r28, 0x1c	; 28
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
	for(ii=55;ii>0;ii--)
    3bbe:	87 e3       	ldi	r24, 0x37	; 55
    3bc0:	80 93 57 03 	sts	0x0357, r24
    3bc4:	89 c0       	rjmp	.+274    	; 0x3cd8 <gripper_close+0x132>
	{
		servo_3(ii);
    3bc6:	80 91 57 03 	lds	r24, 0x0357
    3bca:	0e 94 2a 1c 	call	0x3854	; 0x3854 <servo_3>
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	a0 e2       	ldi	r26, 0x20	; 32
    3bd4:	b1 e4       	ldi	r27, 0x41	; 65
    3bd6:	89 83       	std	Y+1, r24	; 0x01
    3bd8:	9a 83       	std	Y+2, r25	; 0x02
    3bda:	ab 83       	std	Y+3, r26	; 0x03
    3bdc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bde:	69 81       	ldd	r22, Y+1	; 0x01
    3be0:	7a 81       	ldd	r23, Y+2	; 0x02
    3be2:	8b 81       	ldd	r24, Y+3	; 0x03
    3be4:	9c 81       	ldd	r25, Y+4	; 0x04
    3be6:	26 e6       	ldi	r18, 0x66	; 102
    3be8:	36 e6       	ldi	r19, 0x66	; 102
    3bea:	46 e6       	ldi	r20, 0x66	; 102
    3bec:	55 e4       	ldi	r21, 0x45	; 69
    3bee:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	af 83       	std	Y+7, r26	; 0x07
    3bfc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3bfe:	11 e0       	ldi	r17, 0x01	; 1
    3c00:	6d 81       	ldd	r22, Y+5	; 0x05
    3c02:	7e 81       	ldd	r23, Y+6	; 0x06
    3c04:	8f 81       	ldd	r24, Y+7	; 0x07
    3c06:	98 85       	ldd	r25, Y+8	; 0x08
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e8       	ldi	r20, 0x80	; 128
    3c0e:	5f e3       	ldi	r21, 0x3F	; 63
    3c10:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    3c14:	88 23       	and	r24, r24
    3c16:	0c f0       	brlt	.+2      	; 0x3c1a <gripper_close+0x74>
    3c18:	10 e0       	ldi	r17, 0x00	; 0
    3c1a:	11 23       	and	r17, r17
    3c1c:	29 f0       	breq	.+10     	; 0x3c28 <gripper_close+0x82>
		__ticks = 1;
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	9a 87       	std	Y+10, r25	; 0x0a
    3c24:	89 87       	std	Y+9, r24	; 0x09
    3c26:	46 c0       	rjmp	.+140    	; 0x3cb4 <gripper_close+0x10e>
	else if (__tmp > 65535)
    3c28:	11 e0       	ldi	r17, 0x01	; 1
    3c2a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c2c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c30:	98 85       	ldd	r25, Y+8	; 0x08
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	3f ef       	ldi	r19, 0xFF	; 255
    3c36:	4f e7       	ldi	r20, 0x7F	; 127
    3c38:	57 e4       	ldi	r21, 0x47	; 71
    3c3a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    3c3e:	18 16       	cp	r1, r24
    3c40:	0c f0       	brlt	.+2      	; 0x3c44 <gripper_close+0x9e>
    3c42:	10 e0       	ldi	r17, 0x00	; 0
    3c44:	11 23       	and	r17, r17
    3c46:	61 f1       	breq	.+88     	; 0x3ca0 <gripper_close+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c48:	69 81       	ldd	r22, Y+1	; 0x01
    3c4a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e2       	ldi	r20, 0x20	; 32
    3c56:	51 e4       	ldi	r21, 0x41	; 65
    3c58:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	9a 87       	std	Y+10, r25	; 0x0a
    3c6e:	89 87       	std	Y+9, r24	; 0x09
    3c70:	12 c0       	rjmp	.+36     	; 0x3c96 <gripper_close+0xf0>
    3c72:	80 e7       	ldi	r24, 0x70	; 112
    3c74:	91 e0       	ldi	r25, 0x01	; 1
    3c76:	9c 87       	std	Y+12, r25	; 0x0c
    3c78:	8b 87       	std	Y+11, r24	; 0x0b
    3c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c7e:	8c 01       	movw	r16, r24
    3c80:	c8 01       	movw	r24, r16
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	f1 f7       	brne	.-4      	; 0x3c82 <gripper_close+0xdc>
    3c86:	8c 01       	movw	r16, r24
    3c88:	1c 87       	std	Y+12, r17	; 0x0c
    3c8a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8c:	89 85       	ldd	r24, Y+9	; 0x09
    3c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	9a 87       	std	Y+10, r25	; 0x0a
    3c94:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c96:	89 85       	ldd	r24, Y+9	; 0x09
    3c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	51 f7       	brne	.-44     	; 0x3c72 <gripper_close+0xcc>
    3c9e:	17 c0       	rjmp	.+46     	; 0x3cce <gripper_close+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca0:	6d 81       	ldd	r22, Y+5	; 0x05
    3ca2:	7e 81       	ldd	r23, Y+6	; 0x06
    3ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca6:	98 85       	ldd	r25, Y+8	; 0x08
    3ca8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9a 87       	std	Y+10, r25	; 0x0a
    3cb2:	89 87       	std	Y+9, r24	; 0x09
    3cb4:	89 85       	ldd	r24, Y+9	; 0x09
    3cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb8:	9e 87       	std	Y+14, r25	; 0x0e
    3cba:	8d 87       	std	Y+13, r24	; 0x0d
    3cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc0:	8c 01       	movw	r16, r24
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <gripper_close+0x11e>
    3cc8:	8c 01       	movw	r16, r24
    3cca:	1e 87       	std	Y+14, r17	; 0x0e
    3ccc:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void gripper_close()
{
	for(ii=55;ii>0;ii--)
    3cce:	80 91 57 03 	lds	r24, 0x0357
    3cd2:	81 50       	subi	r24, 0x01	; 1
    3cd4:	80 93 57 03 	sts	0x0357, r24
    3cd8:	80 91 57 03 	lds	r24, 0x0357
    3cdc:	88 23       	and	r24, r24
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <gripper_close+0x13c>
    3ce0:	72 cf       	rjmp	.-284    	; 0x3bc6 <gripper_close+0x20>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	a8 e4       	ldi	r26, 0x48	; 72
    3ce8:	b3 e4       	ldi	r27, 0x43	; 67
    3cea:	8f 87       	std	Y+15, r24	; 0x0f
    3cec:	98 8b       	std	Y+16, r25	; 0x10
    3cee:	a9 8b       	std	Y+17, r26	; 0x11
    3cf0:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3cf2:	6f 85       	ldd	r22, Y+15	; 0x0f
    3cf4:	78 89       	ldd	r23, Y+16	; 0x10
    3cf6:	89 89       	ldd	r24, Y+17	; 0x11
    3cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    3cfa:	26 e6       	ldi	r18, 0x66	; 102
    3cfc:	36 e6       	ldi	r19, 0x66	; 102
    3cfe:	46 e6       	ldi	r20, 0x66	; 102
    3d00:	55 e4       	ldi	r21, 0x45	; 69
    3d02:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	8b 8b       	std	Y+19, r24	; 0x13
    3d0c:	9c 8b       	std	Y+20, r25	; 0x14
    3d0e:	ad 8b       	std	Y+21, r26	; 0x15
    3d10:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3d12:	11 e0       	ldi	r17, 0x01	; 1
    3d14:	6b 89       	ldd	r22, Y+19	; 0x13
    3d16:	7c 89       	ldd	r23, Y+20	; 0x14
    3d18:	8d 89       	ldd	r24, Y+21	; 0x15
    3d1a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	40 e8       	ldi	r20, 0x80	; 128
    3d22:	5f e3       	ldi	r21, 0x3F	; 63
    3d24:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    3d28:	88 23       	and	r24, r24
    3d2a:	0c f0       	brlt	.+2      	; 0x3d2e <gripper_close+0x188>
    3d2c:	10 e0       	ldi	r17, 0x00	; 0
    3d2e:	11 23       	and	r17, r17
    3d30:	29 f0       	breq	.+10     	; 0x3d3c <gripper_close+0x196>
		__ticks = 1;
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	98 8f       	std	Y+24, r25	; 0x18
    3d38:	8f 8b       	std	Y+23, r24	; 0x17
    3d3a:	46 c0       	rjmp	.+140    	; 0x3dc8 <gripper_close+0x222>
	else if (__tmp > 65535)
    3d3c:	11 e0       	ldi	r17, 0x01	; 1
    3d3e:	6b 89       	ldd	r22, Y+19	; 0x13
    3d40:	7c 89       	ldd	r23, Y+20	; 0x14
    3d42:	8d 89       	ldd	r24, Y+21	; 0x15
    3d44:	9e 89       	ldd	r25, Y+22	; 0x16
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	3f ef       	ldi	r19, 0xFF	; 255
    3d4a:	4f e7       	ldi	r20, 0x7F	; 127
    3d4c:	57 e4       	ldi	r21, 0x47	; 71
    3d4e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    3d52:	18 16       	cp	r1, r24
    3d54:	0c f0       	brlt	.+2      	; 0x3d58 <gripper_close+0x1b2>
    3d56:	10 e0       	ldi	r17, 0x00	; 0
    3d58:	11 23       	and	r17, r17
    3d5a:	61 f1       	breq	.+88     	; 0x3db4 <gripper_close+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d5c:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d5e:	78 89       	ldd	r23, Y+16	; 0x10
    3d60:	89 89       	ldd	r24, Y+17	; 0x11
    3d62:	9a 89       	ldd	r25, Y+18	; 0x12
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	98 8f       	std	Y+24, r25	; 0x18
    3d82:	8f 8b       	std	Y+23, r24	; 0x17
    3d84:	12 c0       	rjmp	.+36     	; 0x3daa <gripper_close+0x204>
    3d86:	80 e7       	ldi	r24, 0x70	; 112
    3d88:	91 e0       	ldi	r25, 0x01	; 1
    3d8a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d8c:	89 8f       	std	Y+25, r24	; 0x19
    3d8e:	89 8d       	ldd	r24, Y+25	; 0x19
    3d90:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d92:	8c 01       	movw	r16, r24
    3d94:	c8 01       	movw	r24, r16
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	f1 f7       	brne	.-4      	; 0x3d96 <gripper_close+0x1f0>
    3d9a:	8c 01       	movw	r16, r24
    3d9c:	1a 8f       	std	Y+26, r17	; 0x1a
    3d9e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da0:	8f 89       	ldd	r24, Y+23	; 0x17
    3da2:	98 8d       	ldd	r25, Y+24	; 0x18
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	98 8f       	std	Y+24, r25	; 0x18
    3da8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3daa:	8f 89       	ldd	r24, Y+23	; 0x17
    3dac:	98 8d       	ldd	r25, Y+24	; 0x18
    3dae:	00 97       	sbiw	r24, 0x00	; 0
    3db0:	51 f7       	brne	.-44     	; 0x3d86 <gripper_close+0x1e0>
    3db2:	17 c0       	rjmp	.+46     	; 0x3de2 <gripper_close+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db4:	6b 89       	ldd	r22, Y+19	; 0x13
    3db6:	7c 89       	ldd	r23, Y+20	; 0x14
    3db8:	8d 89       	ldd	r24, Y+21	; 0x15
    3dba:	9e 89       	ldd	r25, Y+22	; 0x16
    3dbc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	98 8f       	std	Y+24, r25	; 0x18
    3dc6:	8f 8b       	std	Y+23, r24	; 0x17
    3dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dca:	98 8d       	ldd	r25, Y+24	; 0x18
    3dcc:	9c 8f       	std	Y+28, r25	; 0x1c
    3dce:	8b 8f       	std	Y+27, r24	; 0x1b
    3dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd4:	8c 01       	movw	r16, r24
    3dd6:	c8 01       	movw	r24, r16
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <gripper_close+0x232>
    3ddc:	8c 01       	movw	r16, r24
    3dde:	1c 8f       	std	Y+28, r17	; 0x1c
    3de0:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_3(ii);
		_delay_ms(10);
	}
	
	_delay_ms(200);
}
    3de2:	6c 96       	adiw	r28, 0x1c	; 28
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	08 95       	ret

00003df8 <arm_rotate_left>:

void arm_rotate_left()
{
    3df8:	0f 93       	push	r16
    3dfa:	1f 93       	push	r17
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
    3e04:	6c 97       	sbiw	r28, 0x1c	; 28
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    3e10:	8a e5       	ldi	r24, 0x5A	; 90
    3e12:	80 93 57 03 	sts	0x0357, r24
    3e16:	89 c0       	rjmp	.+274    	; 0x3f2a <arm_rotate_left+0x132>
	{
		servo_1(ii);
    3e18:	80 91 57 03 	lds	r24, 0x0357
    3e1c:	0e 94 8e 1b 	call	0x371c	; 0x371c <servo_1>
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	a0 e2       	ldi	r26, 0x20	; 32
    3e26:	b1 e4       	ldi	r27, 0x41	; 65
    3e28:	89 83       	std	Y+1, r24	; 0x01
    3e2a:	9a 83       	std	Y+2, r25	; 0x02
    3e2c:	ab 83       	std	Y+3, r26	; 0x03
    3e2e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e30:	69 81       	ldd	r22, Y+1	; 0x01
    3e32:	7a 81       	ldd	r23, Y+2	; 0x02
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	9c 81       	ldd	r25, Y+4	; 0x04
    3e38:	26 e6       	ldi	r18, 0x66	; 102
    3e3a:	36 e6       	ldi	r19, 0x66	; 102
    3e3c:	46 e6       	ldi	r20, 0x66	; 102
    3e3e:	55 e4       	ldi	r21, 0x45	; 69
    3e40:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	8d 83       	std	Y+5, r24	; 0x05
    3e4a:	9e 83       	std	Y+6, r25	; 0x06
    3e4c:	af 83       	std	Y+7, r26	; 0x07
    3e4e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3e50:	11 e0       	ldi	r17, 0x01	; 1
    3e52:	6d 81       	ldd	r22, Y+5	; 0x05
    3e54:	7e 81       	ldd	r23, Y+6	; 0x06
    3e56:	8f 81       	ldd	r24, Y+7	; 0x07
    3e58:	98 85       	ldd	r25, Y+8	; 0x08
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e8       	ldi	r20, 0x80	; 128
    3e60:	5f e3       	ldi	r21, 0x3F	; 63
    3e62:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    3e66:	88 23       	and	r24, r24
    3e68:	0c f0       	brlt	.+2      	; 0x3e6c <arm_rotate_left+0x74>
    3e6a:	10 e0       	ldi	r17, 0x00	; 0
    3e6c:	11 23       	and	r17, r17
    3e6e:	29 f0       	breq	.+10     	; 0x3e7a <arm_rotate_left+0x82>
		__ticks = 1;
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9a 87       	std	Y+10, r25	; 0x0a
    3e76:	89 87       	std	Y+9, r24	; 0x09
    3e78:	46 c0       	rjmp	.+140    	; 0x3f06 <arm_rotate_left+0x10e>
	else if (__tmp > 65535)
    3e7a:	11 e0       	ldi	r17, 0x01	; 1
    3e7c:	6d 81       	ldd	r22, Y+5	; 0x05
    3e7e:	7e 81       	ldd	r23, Y+6	; 0x06
    3e80:	8f 81       	ldd	r24, Y+7	; 0x07
    3e82:	98 85       	ldd	r25, Y+8	; 0x08
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	3f ef       	ldi	r19, 0xFF	; 255
    3e88:	4f e7       	ldi	r20, 0x7F	; 127
    3e8a:	57 e4       	ldi	r21, 0x47	; 71
    3e8c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    3e90:	18 16       	cp	r1, r24
    3e92:	0c f0       	brlt	.+2      	; 0x3e96 <arm_rotate_left+0x9e>
    3e94:	10 e0       	ldi	r17, 0x00	; 0
    3e96:	11 23       	and	r17, r17
    3e98:	61 f1       	breq	.+88     	; 0x3ef2 <arm_rotate_left+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9a:	69 81       	ldd	r22, Y+1	; 0x01
    3e9c:	7a 81       	ldd	r23, Y+2	; 0x02
    3e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 e2       	ldi	r20, 0x20	; 32
    3ea8:	51 e4       	ldi	r21, 0x41	; 65
    3eaa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	bc 01       	movw	r22, r24
    3eb4:	cd 01       	movw	r24, r26
    3eb6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	9a 87       	std	Y+10, r25	; 0x0a
    3ec0:	89 87       	std	Y+9, r24	; 0x09
    3ec2:	12 c0       	rjmp	.+36     	; 0x3ee8 <arm_rotate_left+0xf0>
    3ec4:	80 e7       	ldi	r24, 0x70	; 112
    3ec6:	91 e0       	ldi	r25, 0x01	; 1
    3ec8:	9c 87       	std	Y+12, r25	; 0x0c
    3eca:	8b 87       	std	Y+11, r24	; 0x0b
    3ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ece:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed0:	8c 01       	movw	r16, r24
    3ed2:	c8 01       	movw	r24, r16
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <arm_rotate_left+0xdc>
    3ed8:	8c 01       	movw	r16, r24
    3eda:	1c 87       	std	Y+12, r17	; 0x0c
    3edc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ede:	89 85       	ldd	r24, Y+9	; 0x09
    3ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	9a 87       	std	Y+10, r25	; 0x0a
    3ee6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	00 97       	sbiw	r24, 0x00	; 0
    3eee:	51 f7       	brne	.-44     	; 0x3ec4 <arm_rotate_left+0xcc>
    3ef0:	17 c0       	rjmp	.+46     	; 0x3f20 <arm_rotate_left+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef2:	6d 81       	ldd	r22, Y+5	; 0x05
    3ef4:	7e 81       	ldd	r23, Y+6	; 0x06
    3ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ef8:	98 85       	ldd	r25, Y+8	; 0x08
    3efa:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	9a 87       	std	Y+10, r25	; 0x0a
    3f04:	89 87       	std	Y+9, r24	; 0x09
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0a:	9e 87       	std	Y+14, r25	; 0x0e
    3f0c:	8d 87       	std	Y+13, r24	; 0x0d
    3f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f12:	8c 01       	movw	r16, r24
    3f14:	c8 01       	movw	r24, r16
    3f16:	01 97       	sbiw	r24, 0x01	; 1
    3f18:	f1 f7       	brne	.-4      	; 0x3f16 <arm_rotate_left+0x11e>
    3f1a:	8c 01       	movw	r16, r24
    3f1c:	1e 87       	std	Y+14, r17	; 0x0e
    3f1e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void arm_rotate_left()
{
	for(ii=90;ii>0;ii--)
    3f20:	80 91 57 03 	lds	r24, 0x0357
    3f24:	81 50       	subi	r24, 0x01	; 1
    3f26:	80 93 57 03 	sts	0x0357, r24
    3f2a:	80 91 57 03 	lds	r24, 0x0357
    3f2e:	88 23       	and	r24, r24
    3f30:	09 f0       	breq	.+2      	; 0x3f34 <arm_rotate_left+0x13c>
    3f32:	72 cf       	rjmp	.-284    	; 0x3e18 <arm_rotate_left+0x20>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	a6 e9       	ldi	r26, 0x96	; 150
    3f3a:	b3 e4       	ldi	r27, 0x43	; 67
    3f3c:	8f 87       	std	Y+15, r24	; 0x0f
    3f3e:	98 8b       	std	Y+16, r25	; 0x10
    3f40:	a9 8b       	std	Y+17, r26	; 0x11
    3f42:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f46:	78 89       	ldd	r23, Y+16	; 0x10
    3f48:	89 89       	ldd	r24, Y+17	; 0x11
    3f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f4c:	26 e6       	ldi	r18, 0x66	; 102
    3f4e:	36 e6       	ldi	r19, 0x66	; 102
    3f50:	46 e6       	ldi	r20, 0x66	; 102
    3f52:	55 e4       	ldi	r21, 0x45	; 69
    3f54:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	8b 8b       	std	Y+19, r24	; 0x13
    3f5e:	9c 8b       	std	Y+20, r25	; 0x14
    3f60:	ad 8b       	std	Y+21, r26	; 0x15
    3f62:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3f64:	11 e0       	ldi	r17, 0x01	; 1
    3f66:	6b 89       	ldd	r22, Y+19	; 0x13
    3f68:	7c 89       	ldd	r23, Y+20	; 0x14
    3f6a:	8d 89       	ldd	r24, Y+21	; 0x15
    3f6c:	9e 89       	ldd	r25, Y+22	; 0x16
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e8       	ldi	r20, 0x80	; 128
    3f74:	5f e3       	ldi	r21, 0x3F	; 63
    3f76:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    3f7a:	88 23       	and	r24, r24
    3f7c:	0c f0       	brlt	.+2      	; 0x3f80 <arm_rotate_left+0x188>
    3f7e:	10 e0       	ldi	r17, 0x00	; 0
    3f80:	11 23       	and	r17, r17
    3f82:	29 f0       	breq	.+10     	; 0x3f8e <arm_rotate_left+0x196>
		__ticks = 1;
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	98 8f       	std	Y+24, r25	; 0x18
    3f8a:	8f 8b       	std	Y+23, r24	; 0x17
    3f8c:	46 c0       	rjmp	.+140    	; 0x401a <arm_rotate_left+0x222>
	else if (__tmp > 65535)
    3f8e:	11 e0       	ldi	r17, 0x01	; 1
    3f90:	6b 89       	ldd	r22, Y+19	; 0x13
    3f92:	7c 89       	ldd	r23, Y+20	; 0x14
    3f94:	8d 89       	ldd	r24, Y+21	; 0x15
    3f96:	9e 89       	ldd	r25, Y+22	; 0x16
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	57 e4       	ldi	r21, 0x47	; 71
    3fa0:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	0c f0       	brlt	.+2      	; 0x3faa <arm_rotate_left+0x1b2>
    3fa8:	10 e0       	ldi	r17, 0x00	; 0
    3faa:	11 23       	and	r17, r17
    3fac:	61 f1       	breq	.+88     	; 0x4006 <arm_rotate_left+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fae:	6f 85       	ldd	r22, Y+15	; 0x0f
    3fb0:	78 89       	ldd	r23, Y+16	; 0x10
    3fb2:	89 89       	ldd	r24, Y+17	; 0x11
    3fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e2       	ldi	r20, 0x20	; 32
    3fbc:	51 e4       	ldi	r21, 0x41	; 65
    3fbe:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	bc 01       	movw	r22, r24
    3fc8:	cd 01       	movw	r24, r26
    3fca:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	98 8f       	std	Y+24, r25	; 0x18
    3fd4:	8f 8b       	std	Y+23, r24	; 0x17
    3fd6:	12 c0       	rjmp	.+36     	; 0x3ffc <arm_rotate_left+0x204>
    3fd8:	80 e7       	ldi	r24, 0x70	; 112
    3fda:	91 e0       	ldi	r25, 0x01	; 1
    3fdc:	9a 8f       	std	Y+26, r25	; 0x1a
    3fde:	89 8f       	std	Y+25, r24	; 0x19
    3fe0:	89 8d       	ldd	r24, Y+25	; 0x19
    3fe2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3fe4:	8c 01       	movw	r16, r24
    3fe6:	c8 01       	movw	r24, r16
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <arm_rotate_left+0x1f0>
    3fec:	8c 01       	movw	r16, r24
    3fee:	1a 8f       	std	Y+26, r17	; 0x1a
    3ff0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	98 8f       	std	Y+24, r25	; 0x18
    3ffa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    4000:	00 97       	sbiw	r24, 0x00	; 0
    4002:	51 f7       	brne	.-44     	; 0x3fd8 <arm_rotate_left+0x1e0>
    4004:	17 c0       	rjmp	.+46     	; 0x4034 <arm_rotate_left+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4006:	6b 89       	ldd	r22, Y+19	; 0x13
    4008:	7c 89       	ldd	r23, Y+20	; 0x14
    400a:	8d 89       	ldd	r24, Y+21	; 0x15
    400c:	9e 89       	ldd	r25, Y+22	; 0x16
    400e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	98 8f       	std	Y+24, r25	; 0x18
    4018:	8f 8b       	std	Y+23, r24	; 0x17
    401a:	8f 89       	ldd	r24, Y+23	; 0x17
    401c:	98 8d       	ldd	r25, Y+24	; 0x18
    401e:	9c 8f       	std	Y+28, r25	; 0x1c
    4020:	8b 8f       	std	Y+27, r24	; 0x1b
    4022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4026:	8c 01       	movw	r16, r24
    4028:	c8 01       	movw	r24, r16
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <arm_rotate_left+0x232>
    402e:	8c 01       	movw	r16, r24
    4030:	1c 8f       	std	Y+28, r17	; 0x1c
    4032:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4034:	6c 96       	adiw	r28, 0x1c	; 28
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	f8 94       	cli
    403a:	de bf       	out	0x3e, r29	; 62
    403c:	0f be       	out	0x3f, r0	; 63
    403e:	cd bf       	out	0x3d, r28	; 61
    4040:	df 91       	pop	r29
    4042:	cf 91       	pop	r28
    4044:	1f 91       	pop	r17
    4046:	0f 91       	pop	r16
    4048:	08 95       	ret

0000404a <arm_rotate_right>:

void arm_rotate_right()
{
    404a:	0f 93       	push	r16
    404c:	1f 93       	push	r17
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	6c 97       	sbiw	r28, 0x1c	; 28
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii<180;ii++)
    4062:	8a e5       	ldi	r24, 0x5A	; 90
    4064:	80 93 57 03 	sts	0x0357, r24
    4068:	89 c0       	rjmp	.+274    	; 0x417c <arm_rotate_right+0x132>
	{
		servo_1(ii);
    406a:	80 91 57 03 	lds	r24, 0x0357
    406e:	0e 94 8e 1b 	call	0x371c	; 0x371c <servo_1>
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	a0 e2       	ldi	r26, 0x20	; 32
    4078:	b1 e4       	ldi	r27, 0x41	; 65
    407a:	89 83       	std	Y+1, r24	; 0x01
    407c:	9a 83       	std	Y+2, r25	; 0x02
    407e:	ab 83       	std	Y+3, r26	; 0x03
    4080:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4082:	69 81       	ldd	r22, Y+1	; 0x01
    4084:	7a 81       	ldd	r23, Y+2	; 0x02
    4086:	8b 81       	ldd	r24, Y+3	; 0x03
    4088:	9c 81       	ldd	r25, Y+4	; 0x04
    408a:	26 e6       	ldi	r18, 0x66	; 102
    408c:	36 e6       	ldi	r19, 0x66	; 102
    408e:	46 e6       	ldi	r20, 0x66	; 102
    4090:	55 e4       	ldi	r21, 0x45	; 69
    4092:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	8d 83       	std	Y+5, r24	; 0x05
    409c:	9e 83       	std	Y+6, r25	; 0x06
    409e:	af 83       	std	Y+7, r26	; 0x07
    40a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    40a2:	11 e0       	ldi	r17, 0x01	; 1
    40a4:	6d 81       	ldd	r22, Y+5	; 0x05
    40a6:	7e 81       	ldd	r23, Y+6	; 0x06
    40a8:	8f 81       	ldd	r24, Y+7	; 0x07
    40aa:	98 85       	ldd	r25, Y+8	; 0x08
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e8       	ldi	r20, 0x80	; 128
    40b2:	5f e3       	ldi	r21, 0x3F	; 63
    40b4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    40b8:	88 23       	and	r24, r24
    40ba:	0c f0       	brlt	.+2      	; 0x40be <arm_rotate_right+0x74>
    40bc:	10 e0       	ldi	r17, 0x00	; 0
    40be:	11 23       	and	r17, r17
    40c0:	29 f0       	breq	.+10     	; 0x40cc <arm_rotate_right+0x82>
		__ticks = 1;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	9a 87       	std	Y+10, r25	; 0x0a
    40c8:	89 87       	std	Y+9, r24	; 0x09
    40ca:	46 c0       	rjmp	.+140    	; 0x4158 <arm_rotate_right+0x10e>
	else if (__tmp > 65535)
    40cc:	11 e0       	ldi	r17, 0x01	; 1
    40ce:	6d 81       	ldd	r22, Y+5	; 0x05
    40d0:	7e 81       	ldd	r23, Y+6	; 0x06
    40d2:	8f 81       	ldd	r24, Y+7	; 0x07
    40d4:	98 85       	ldd	r25, Y+8	; 0x08
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	3f ef       	ldi	r19, 0xFF	; 255
    40da:	4f e7       	ldi	r20, 0x7F	; 127
    40dc:	57 e4       	ldi	r21, 0x47	; 71
    40de:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    40e2:	18 16       	cp	r1, r24
    40e4:	0c f0       	brlt	.+2      	; 0x40e8 <arm_rotate_right+0x9e>
    40e6:	10 e0       	ldi	r17, 0x00	; 0
    40e8:	11 23       	and	r17, r17
    40ea:	61 f1       	breq	.+88     	; 0x4144 <arm_rotate_right+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ec:	69 81       	ldd	r22, Y+1	; 0x01
    40ee:	7a 81       	ldd	r23, Y+2	; 0x02
    40f0:	8b 81       	ldd	r24, Y+3	; 0x03
    40f2:	9c 81       	ldd	r25, Y+4	; 0x04
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e2       	ldi	r20, 0x20	; 32
    40fa:	51 e4       	ldi	r21, 0x41	; 65
    40fc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	9a 87       	std	Y+10, r25	; 0x0a
    4112:	89 87       	std	Y+9, r24	; 0x09
    4114:	12 c0       	rjmp	.+36     	; 0x413a <arm_rotate_right+0xf0>
    4116:	80 e7       	ldi	r24, 0x70	; 112
    4118:	91 e0       	ldi	r25, 0x01	; 1
    411a:	9c 87       	std	Y+12, r25	; 0x0c
    411c:	8b 87       	std	Y+11, r24	; 0x0b
    411e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4120:	9c 85       	ldd	r25, Y+12	; 0x0c
    4122:	8c 01       	movw	r16, r24
    4124:	c8 01       	movw	r24, r16
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	f1 f7       	brne	.-4      	; 0x4126 <arm_rotate_right+0xdc>
    412a:	8c 01       	movw	r16, r24
    412c:	1c 87       	std	Y+12, r17	; 0x0c
    412e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4130:	89 85       	ldd	r24, Y+9	; 0x09
    4132:	9a 85       	ldd	r25, Y+10	; 0x0a
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	9a 87       	std	Y+10, r25	; 0x0a
    4138:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413a:	89 85       	ldd	r24, Y+9	; 0x09
    413c:	9a 85       	ldd	r25, Y+10	; 0x0a
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	51 f7       	brne	.-44     	; 0x4116 <arm_rotate_right+0xcc>
    4142:	17 c0       	rjmp	.+46     	; 0x4172 <arm_rotate_right+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4144:	6d 81       	ldd	r22, Y+5	; 0x05
    4146:	7e 81       	ldd	r23, Y+6	; 0x06
    4148:	8f 81       	ldd	r24, Y+7	; 0x07
    414a:	98 85       	ldd	r25, Y+8	; 0x08
    414c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	9a 87       	std	Y+10, r25	; 0x0a
    4156:	89 87       	std	Y+9, r24	; 0x09
    4158:	89 85       	ldd	r24, Y+9	; 0x09
    415a:	9a 85       	ldd	r25, Y+10	; 0x0a
    415c:	9e 87       	std	Y+14, r25	; 0x0e
    415e:	8d 87       	std	Y+13, r24	; 0x0d
    4160:	8d 85       	ldd	r24, Y+13	; 0x0d
    4162:	9e 85       	ldd	r25, Y+14	; 0x0e
    4164:	8c 01       	movw	r16, r24
    4166:	c8 01       	movw	r24, r16
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <arm_rotate_right+0x11e>
    416c:	8c 01       	movw	r16, r24
    416e:	1e 87       	std	Y+14, r17	; 0x0e
    4170:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_rotate_right()
{
	for(ii=90;ii<180;ii++)
    4172:	80 91 57 03 	lds	r24, 0x0357
    4176:	8f 5f       	subi	r24, 0xFF	; 255
    4178:	80 93 57 03 	sts	0x0357, r24
    417c:	80 91 57 03 	lds	r24, 0x0357
    4180:	84 3b       	cpi	r24, 0xB4	; 180
    4182:	08 f4       	brcc	.+2      	; 0x4186 <arm_rotate_right+0x13c>
    4184:	72 cf       	rjmp	.-284    	; 0x406a <arm_rotate_right+0x20>
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	a6 e9       	ldi	r26, 0x96	; 150
    418c:	b3 e4       	ldi	r27, 0x43	; 67
    418e:	8f 87       	std	Y+15, r24	; 0x0f
    4190:	98 8b       	std	Y+16, r25	; 0x10
    4192:	a9 8b       	std	Y+17, r26	; 0x11
    4194:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4196:	6f 85       	ldd	r22, Y+15	; 0x0f
    4198:	78 89       	ldd	r23, Y+16	; 0x10
    419a:	89 89       	ldd	r24, Y+17	; 0x11
    419c:	9a 89       	ldd	r25, Y+18	; 0x12
    419e:	26 e6       	ldi	r18, 0x66	; 102
    41a0:	36 e6       	ldi	r19, 0x66	; 102
    41a2:	46 e6       	ldi	r20, 0x66	; 102
    41a4:	55 e4       	ldi	r21, 0x45	; 69
    41a6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	8b 8b       	std	Y+19, r24	; 0x13
    41b0:	9c 8b       	std	Y+20, r25	; 0x14
    41b2:	ad 8b       	std	Y+21, r26	; 0x15
    41b4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    41b6:	11 e0       	ldi	r17, 0x01	; 1
    41b8:	6b 89       	ldd	r22, Y+19	; 0x13
    41ba:	7c 89       	ldd	r23, Y+20	; 0x14
    41bc:	8d 89       	ldd	r24, Y+21	; 0x15
    41be:	9e 89       	ldd	r25, Y+22	; 0x16
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e8       	ldi	r20, 0x80	; 128
    41c6:	5f e3       	ldi	r21, 0x3F	; 63
    41c8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    41cc:	88 23       	and	r24, r24
    41ce:	0c f0       	brlt	.+2      	; 0x41d2 <arm_rotate_right+0x188>
    41d0:	10 e0       	ldi	r17, 0x00	; 0
    41d2:	11 23       	and	r17, r17
    41d4:	29 f0       	breq	.+10     	; 0x41e0 <arm_rotate_right+0x196>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	98 8f       	std	Y+24, r25	; 0x18
    41dc:	8f 8b       	std	Y+23, r24	; 0x17
    41de:	46 c0       	rjmp	.+140    	; 0x426c <arm_rotate_right+0x222>
	else if (__tmp > 65535)
    41e0:	11 e0       	ldi	r17, 0x01	; 1
    41e2:	6b 89       	ldd	r22, Y+19	; 0x13
    41e4:	7c 89       	ldd	r23, Y+20	; 0x14
    41e6:	8d 89       	ldd	r24, Y+21	; 0x15
    41e8:	9e 89       	ldd	r25, Y+22	; 0x16
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	3f ef       	ldi	r19, 0xFF	; 255
    41ee:	4f e7       	ldi	r20, 0x7F	; 127
    41f0:	57 e4       	ldi	r21, 0x47	; 71
    41f2:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    41f6:	18 16       	cp	r1, r24
    41f8:	0c f0       	brlt	.+2      	; 0x41fc <arm_rotate_right+0x1b2>
    41fa:	10 e0       	ldi	r17, 0x00	; 0
    41fc:	11 23       	and	r17, r17
    41fe:	61 f1       	breq	.+88     	; 0x4258 <arm_rotate_right+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4200:	6f 85       	ldd	r22, Y+15	; 0x0f
    4202:	78 89       	ldd	r23, Y+16	; 0x10
    4204:	89 89       	ldd	r24, Y+17	; 0x11
    4206:	9a 89       	ldd	r25, Y+18	; 0x12
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	40 e2       	ldi	r20, 0x20	; 32
    420e:	51 e4       	ldi	r21, 0x41	; 65
    4210:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	98 8f       	std	Y+24, r25	; 0x18
    4226:	8f 8b       	std	Y+23, r24	; 0x17
    4228:	12 c0       	rjmp	.+36     	; 0x424e <arm_rotate_right+0x204>
    422a:	80 e7       	ldi	r24, 0x70	; 112
    422c:	91 e0       	ldi	r25, 0x01	; 1
    422e:	9a 8f       	std	Y+26, r25	; 0x1a
    4230:	89 8f       	std	Y+25, r24	; 0x19
    4232:	89 8d       	ldd	r24, Y+25	; 0x19
    4234:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4236:	8c 01       	movw	r16, r24
    4238:	c8 01       	movw	r24, r16
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	f1 f7       	brne	.-4      	; 0x423a <arm_rotate_right+0x1f0>
    423e:	8c 01       	movw	r16, r24
    4240:	1a 8f       	std	Y+26, r17	; 0x1a
    4242:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4244:	8f 89       	ldd	r24, Y+23	; 0x17
    4246:	98 8d       	ldd	r25, Y+24	; 0x18
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	98 8f       	std	Y+24, r25	; 0x18
    424c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    424e:	8f 89       	ldd	r24, Y+23	; 0x17
    4250:	98 8d       	ldd	r25, Y+24	; 0x18
    4252:	00 97       	sbiw	r24, 0x00	; 0
    4254:	51 f7       	brne	.-44     	; 0x422a <arm_rotate_right+0x1e0>
    4256:	17 c0       	rjmp	.+46     	; 0x4286 <arm_rotate_right+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4258:	6b 89       	ldd	r22, Y+19	; 0x13
    425a:	7c 89       	ldd	r23, Y+20	; 0x14
    425c:	8d 89       	ldd	r24, Y+21	; 0x15
    425e:	9e 89       	ldd	r25, Y+22	; 0x16
    4260:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	98 8f       	std	Y+24, r25	; 0x18
    426a:	8f 8b       	std	Y+23, r24	; 0x17
    426c:	8f 89       	ldd	r24, Y+23	; 0x17
    426e:	98 8d       	ldd	r25, Y+24	; 0x18
    4270:	9c 8f       	std	Y+28, r25	; 0x1c
    4272:	8b 8f       	std	Y+27, r24	; 0x1b
    4274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4278:	8c 01       	movw	r16, r24
    427a:	c8 01       	movw	r24, r16
    427c:	01 97       	sbiw	r24, 0x01	; 1
    427e:	f1 f7       	brne	.-4      	; 0x427c <arm_rotate_right+0x232>
    4280:	8c 01       	movw	r16, r24
    4282:	1c 8f       	std	Y+28, r17	; 0x1c
    4284:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4286:	6c 96       	adiw	r28, 0x1c	; 28
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	df 91       	pop	r29
    4294:	cf 91       	pop	r28
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <arm_straight>:
void arm_straight()
{
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	6c 97       	sbiw	r28, 0x1c	; 28
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    42b4:	10 92 57 03 	sts	0x0357, r1
    42b8:	89 c0       	rjmp	.+274    	; 0x43cc <arm_straight+0x130>
	{
		servo_1(ii);
    42ba:	80 91 57 03 	lds	r24, 0x0357
    42be:	0e 94 8e 1b 	call	0x371c	; 0x371c <servo_1>
    42c2:	80 e0       	ldi	r24, 0x00	; 0
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	a0 e2       	ldi	r26, 0x20	; 32
    42c8:	b1 e4       	ldi	r27, 0x41	; 65
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	9a 83       	std	Y+2, r25	; 0x02
    42ce:	ab 83       	std	Y+3, r26	; 0x03
    42d0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42d2:	69 81       	ldd	r22, Y+1	; 0x01
    42d4:	7a 81       	ldd	r23, Y+2	; 0x02
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	9c 81       	ldd	r25, Y+4	; 0x04
    42da:	26 e6       	ldi	r18, 0x66	; 102
    42dc:	36 e6       	ldi	r19, 0x66	; 102
    42de:	46 e6       	ldi	r20, 0x66	; 102
    42e0:	55 e4       	ldi	r21, 0x45	; 69
    42e2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	8d 83       	std	Y+5, r24	; 0x05
    42ec:	9e 83       	std	Y+6, r25	; 0x06
    42ee:	af 83       	std	Y+7, r26	; 0x07
    42f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    42f2:	11 e0       	ldi	r17, 0x01	; 1
    42f4:	6d 81       	ldd	r22, Y+5	; 0x05
    42f6:	7e 81       	ldd	r23, Y+6	; 0x06
    42f8:	8f 81       	ldd	r24, Y+7	; 0x07
    42fa:	98 85       	ldd	r25, Y+8	; 0x08
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4308:	88 23       	and	r24, r24
    430a:	0c f0       	brlt	.+2      	; 0x430e <arm_straight+0x72>
    430c:	10 e0       	ldi	r17, 0x00	; 0
    430e:	11 23       	and	r17, r17
    4310:	29 f0       	breq	.+10     	; 0x431c <arm_straight+0x80>
		__ticks = 1;
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	9a 87       	std	Y+10, r25	; 0x0a
    4318:	89 87       	std	Y+9, r24	; 0x09
    431a:	46 c0       	rjmp	.+140    	; 0x43a8 <arm_straight+0x10c>
	else if (__tmp > 65535)
    431c:	11 e0       	ldi	r17, 0x01	; 1
    431e:	6d 81       	ldd	r22, Y+5	; 0x05
    4320:	7e 81       	ldd	r23, Y+6	; 0x06
    4322:	8f 81       	ldd	r24, Y+7	; 0x07
    4324:	98 85       	ldd	r25, Y+8	; 0x08
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	3f ef       	ldi	r19, 0xFF	; 255
    432a:	4f e7       	ldi	r20, 0x7F	; 127
    432c:	57 e4       	ldi	r21, 0x47	; 71
    432e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4332:	18 16       	cp	r1, r24
    4334:	0c f0       	brlt	.+2      	; 0x4338 <arm_straight+0x9c>
    4336:	10 e0       	ldi	r17, 0x00	; 0
    4338:	11 23       	and	r17, r17
    433a:	61 f1       	breq	.+88     	; 0x4394 <arm_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433c:	69 81       	ldd	r22, Y+1	; 0x01
    433e:	7a 81       	ldd	r23, Y+2	; 0x02
    4340:	8b 81       	ldd	r24, Y+3	; 0x03
    4342:	9c 81       	ldd	r25, Y+4	; 0x04
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e2       	ldi	r20, 0x20	; 32
    434a:	51 e4       	ldi	r21, 0x41	; 65
    434c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	9a 87       	std	Y+10, r25	; 0x0a
    4362:	89 87       	std	Y+9, r24	; 0x09
    4364:	12 c0       	rjmp	.+36     	; 0x438a <arm_straight+0xee>
    4366:	80 e7       	ldi	r24, 0x70	; 112
    4368:	91 e0       	ldi	r25, 0x01	; 1
    436a:	9c 87       	std	Y+12, r25	; 0x0c
    436c:	8b 87       	std	Y+11, r24	; 0x0b
    436e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4370:	9c 85       	ldd	r25, Y+12	; 0x0c
    4372:	8c 01       	movw	r16, r24
    4374:	c8 01       	movw	r24, r16
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <arm_straight+0xda>
    437a:	8c 01       	movw	r16, r24
    437c:	1c 87       	std	Y+12, r17	; 0x0c
    437e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4380:	89 85       	ldd	r24, Y+9	; 0x09
    4382:	9a 85       	ldd	r25, Y+10	; 0x0a
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	9a 87       	std	Y+10, r25	; 0x0a
    4388:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    438a:	89 85       	ldd	r24, Y+9	; 0x09
    438c:	9a 85       	ldd	r25, Y+10	; 0x0a
    438e:	00 97       	sbiw	r24, 0x00	; 0
    4390:	51 f7       	brne	.-44     	; 0x4366 <arm_straight+0xca>
    4392:	17 c0       	rjmp	.+46     	; 0x43c2 <arm_straight+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4394:	6d 81       	ldd	r22, Y+5	; 0x05
    4396:	7e 81       	ldd	r23, Y+6	; 0x06
    4398:	8f 81       	ldd	r24, Y+7	; 0x07
    439a:	98 85       	ldd	r25, Y+8	; 0x08
    439c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	9a 87       	std	Y+10, r25	; 0x0a
    43a6:	89 87       	std	Y+9, r24	; 0x09
    43a8:	89 85       	ldd	r24, Y+9	; 0x09
    43aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ac:	9e 87       	std	Y+14, r25	; 0x0e
    43ae:	8d 87       	std	Y+13, r24	; 0x0d
    43b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b4:	8c 01       	movw	r16, r24
    43b6:	c8 01       	movw	r24, r16
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	f1 f7       	brne	.-4      	; 0x43b8 <arm_straight+0x11c>
    43bc:	8c 01       	movw	r16, r24
    43be:	1e 87       	std	Y+14, r17	; 0x0e
    43c0:	0d 87       	std	Y+13, r16	; 0x0d
	}
	_delay_ms(300);
}
void arm_straight()
{
	for(ii=0;ii<90;ii++)
    43c2:	80 91 57 03 	lds	r24, 0x0357
    43c6:	8f 5f       	subi	r24, 0xFF	; 255
    43c8:	80 93 57 03 	sts	0x0357, r24
    43cc:	80 91 57 03 	lds	r24, 0x0357
    43d0:	8a 35       	cpi	r24, 0x5A	; 90
    43d2:	08 f4       	brcc	.+2      	; 0x43d6 <arm_straight+0x13a>
    43d4:	72 cf       	rjmp	.-284    	; 0x42ba <arm_straight+0x1e>
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	a6 e9       	ldi	r26, 0x96	; 150
    43dc:	b3 e4       	ldi	r27, 0x43	; 67
    43de:	8f 87       	std	Y+15, r24	; 0x0f
    43e0:	98 8b       	std	Y+16, r25	; 0x10
    43e2:	a9 8b       	std	Y+17, r26	; 0x11
    43e4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    43e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    43e8:	78 89       	ldd	r23, Y+16	; 0x10
    43ea:	89 89       	ldd	r24, Y+17	; 0x11
    43ec:	9a 89       	ldd	r25, Y+18	; 0x12
    43ee:	26 e6       	ldi	r18, 0x66	; 102
    43f0:	36 e6       	ldi	r19, 0x66	; 102
    43f2:	46 e6       	ldi	r20, 0x66	; 102
    43f4:	55 e4       	ldi	r21, 0x45	; 69
    43f6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	8b 8b       	std	Y+19, r24	; 0x13
    4400:	9c 8b       	std	Y+20, r25	; 0x14
    4402:	ad 8b       	std	Y+21, r26	; 0x15
    4404:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4406:	11 e0       	ldi	r17, 0x01	; 1
    4408:	6b 89       	ldd	r22, Y+19	; 0x13
    440a:	7c 89       	ldd	r23, Y+20	; 0x14
    440c:	8d 89       	ldd	r24, Y+21	; 0x15
    440e:	9e 89       	ldd	r25, Y+22	; 0x16
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e8       	ldi	r20, 0x80	; 128
    4416:	5f e3       	ldi	r21, 0x3F	; 63
    4418:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    441c:	88 23       	and	r24, r24
    441e:	0c f0       	brlt	.+2      	; 0x4422 <arm_straight+0x186>
    4420:	10 e0       	ldi	r17, 0x00	; 0
    4422:	11 23       	and	r17, r17
    4424:	29 f0       	breq	.+10     	; 0x4430 <arm_straight+0x194>
		__ticks = 1;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	98 8f       	std	Y+24, r25	; 0x18
    442c:	8f 8b       	std	Y+23, r24	; 0x17
    442e:	46 c0       	rjmp	.+140    	; 0x44bc <arm_straight+0x220>
	else if (__tmp > 65535)
    4430:	11 e0       	ldi	r17, 0x01	; 1
    4432:	6b 89       	ldd	r22, Y+19	; 0x13
    4434:	7c 89       	ldd	r23, Y+20	; 0x14
    4436:	8d 89       	ldd	r24, Y+21	; 0x15
    4438:	9e 89       	ldd	r25, Y+22	; 0x16
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	3f ef       	ldi	r19, 0xFF	; 255
    443e:	4f e7       	ldi	r20, 0x7F	; 127
    4440:	57 e4       	ldi	r21, 0x47	; 71
    4442:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4446:	18 16       	cp	r1, r24
    4448:	0c f0       	brlt	.+2      	; 0x444c <arm_straight+0x1b0>
    444a:	10 e0       	ldi	r17, 0x00	; 0
    444c:	11 23       	and	r17, r17
    444e:	61 f1       	breq	.+88     	; 0x44a8 <arm_straight+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4450:	6f 85       	ldd	r22, Y+15	; 0x0f
    4452:	78 89       	ldd	r23, Y+16	; 0x10
    4454:	89 89       	ldd	r24, Y+17	; 0x11
    4456:	9a 89       	ldd	r25, Y+18	; 0x12
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	40 e2       	ldi	r20, 0x20	; 32
    445e:	51 e4       	ldi	r21, 0x41	; 65
    4460:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4464:	dc 01       	movw	r26, r24
    4466:	cb 01       	movw	r24, r22
    4468:	bc 01       	movw	r22, r24
    446a:	cd 01       	movw	r24, r26
    446c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	98 8f       	std	Y+24, r25	; 0x18
    4476:	8f 8b       	std	Y+23, r24	; 0x17
    4478:	12 c0       	rjmp	.+36     	; 0x449e <arm_straight+0x202>
    447a:	80 e7       	ldi	r24, 0x70	; 112
    447c:	91 e0       	ldi	r25, 0x01	; 1
    447e:	9a 8f       	std	Y+26, r25	; 0x1a
    4480:	89 8f       	std	Y+25, r24	; 0x19
    4482:	89 8d       	ldd	r24, Y+25	; 0x19
    4484:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4486:	8c 01       	movw	r16, r24
    4488:	c8 01       	movw	r24, r16
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	f1 f7       	brne	.-4      	; 0x448a <arm_straight+0x1ee>
    448e:	8c 01       	movw	r16, r24
    4490:	1a 8f       	std	Y+26, r17	; 0x1a
    4492:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4494:	8f 89       	ldd	r24, Y+23	; 0x17
    4496:	98 8d       	ldd	r25, Y+24	; 0x18
    4498:	01 97       	sbiw	r24, 0x01	; 1
    449a:	98 8f       	std	Y+24, r25	; 0x18
    449c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    449e:	8f 89       	ldd	r24, Y+23	; 0x17
    44a0:	98 8d       	ldd	r25, Y+24	; 0x18
    44a2:	00 97       	sbiw	r24, 0x00	; 0
    44a4:	51 f7       	brne	.-44     	; 0x447a <arm_straight+0x1de>
    44a6:	17 c0       	rjmp	.+46     	; 0x44d6 <arm_straight+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a8:	6b 89       	ldd	r22, Y+19	; 0x13
    44aa:	7c 89       	ldd	r23, Y+20	; 0x14
    44ac:	8d 89       	ldd	r24, Y+21	; 0x15
    44ae:	9e 89       	ldd	r25, Y+22	; 0x16
    44b0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	98 8f       	std	Y+24, r25	; 0x18
    44ba:	8f 8b       	std	Y+23, r24	; 0x17
    44bc:	8f 89       	ldd	r24, Y+23	; 0x17
    44be:	98 8d       	ldd	r25, Y+24	; 0x18
    44c0:	9c 8f       	std	Y+28, r25	; 0x1c
    44c2:	8b 8f       	std	Y+27, r24	; 0x1b
    44c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c8:	8c 01       	movw	r16, r24
    44ca:	c8 01       	movw	r24, r16
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <arm_straight+0x230>
    44d0:	8c 01       	movw	r16, r24
    44d2:	1c 8f       	std	Y+28, r17	; 0x1c
    44d4:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    44d6:	6c 96       	adiw	r28, 0x1c	; 28
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	1f 91       	pop	r17
    44e8:	0f 91       	pop	r16
    44ea:	08 95       	ret

000044ec <arm_forward>:

void arm_forward()
{
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62
    44f8:	6c 97       	sbiw	r28, 0x1c	; 28
    44fa:	0f b6       	in	r0, 0x3f	; 63
    44fc:	f8 94       	cli
    44fe:	de bf       	out	0x3e, r29	; 62
    4500:	0f be       	out	0x3f, r0	; 63
    4502:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    4504:	10 92 57 03 	sts	0x0357, r1
    4508:	89 c0       	rjmp	.+274    	; 0x461c <arm_forward+0x130>
	{
		servo_2(ii);
    450a:	80 91 57 03 	lds	r24, 0x0357
    450e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <servo_2>
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	a0 e2       	ldi	r26, 0x20	; 32
    4518:	b1 e4       	ldi	r27, 0x41	; 65
    451a:	89 83       	std	Y+1, r24	; 0x01
    451c:	9a 83       	std	Y+2, r25	; 0x02
    451e:	ab 83       	std	Y+3, r26	; 0x03
    4520:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4522:	69 81       	ldd	r22, Y+1	; 0x01
    4524:	7a 81       	ldd	r23, Y+2	; 0x02
    4526:	8b 81       	ldd	r24, Y+3	; 0x03
    4528:	9c 81       	ldd	r25, Y+4	; 0x04
    452a:	26 e6       	ldi	r18, 0x66	; 102
    452c:	36 e6       	ldi	r19, 0x66	; 102
    452e:	46 e6       	ldi	r20, 0x66	; 102
    4530:	55 e4       	ldi	r21, 0x45	; 69
    4532:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	8d 83       	std	Y+5, r24	; 0x05
    453c:	9e 83       	std	Y+6, r25	; 0x06
    453e:	af 83       	std	Y+7, r26	; 0x07
    4540:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4542:	11 e0       	ldi	r17, 0x01	; 1
    4544:	6d 81       	ldd	r22, Y+5	; 0x05
    4546:	7e 81       	ldd	r23, Y+6	; 0x06
    4548:	8f 81       	ldd	r24, Y+7	; 0x07
    454a:	98 85       	ldd	r25, Y+8	; 0x08
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e8       	ldi	r20, 0x80	; 128
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4558:	88 23       	and	r24, r24
    455a:	0c f0       	brlt	.+2      	; 0x455e <arm_forward+0x72>
    455c:	10 e0       	ldi	r17, 0x00	; 0
    455e:	11 23       	and	r17, r17
    4560:	29 f0       	breq	.+10     	; 0x456c <arm_forward+0x80>
		__ticks = 1;
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	9a 87       	std	Y+10, r25	; 0x0a
    4568:	89 87       	std	Y+9, r24	; 0x09
    456a:	46 c0       	rjmp	.+140    	; 0x45f8 <arm_forward+0x10c>
	else if (__tmp > 65535)
    456c:	11 e0       	ldi	r17, 0x01	; 1
    456e:	6d 81       	ldd	r22, Y+5	; 0x05
    4570:	7e 81       	ldd	r23, Y+6	; 0x06
    4572:	8f 81       	ldd	r24, Y+7	; 0x07
    4574:	98 85       	ldd	r25, Y+8	; 0x08
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	3f ef       	ldi	r19, 0xFF	; 255
    457a:	4f e7       	ldi	r20, 0x7F	; 127
    457c:	57 e4       	ldi	r21, 0x47	; 71
    457e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4582:	18 16       	cp	r1, r24
    4584:	0c f0       	brlt	.+2      	; 0x4588 <arm_forward+0x9c>
    4586:	10 e0       	ldi	r17, 0x00	; 0
    4588:	11 23       	and	r17, r17
    458a:	61 f1       	breq	.+88     	; 0x45e4 <arm_forward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458c:	69 81       	ldd	r22, Y+1	; 0x01
    458e:	7a 81       	ldd	r23, Y+2	; 0x02
    4590:	8b 81       	ldd	r24, Y+3	; 0x03
    4592:	9c 81       	ldd	r25, Y+4	; 0x04
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	40 e2       	ldi	r20, 0x20	; 32
    459a:	51 e4       	ldi	r21, 0x41	; 65
    459c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	bc 01       	movw	r22, r24
    45a6:	cd 01       	movw	r24, r26
    45a8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    45ac:	dc 01       	movw	r26, r24
    45ae:	cb 01       	movw	r24, r22
    45b0:	9a 87       	std	Y+10, r25	; 0x0a
    45b2:	89 87       	std	Y+9, r24	; 0x09
    45b4:	12 c0       	rjmp	.+36     	; 0x45da <arm_forward+0xee>
    45b6:	80 e7       	ldi	r24, 0x70	; 112
    45b8:	91 e0       	ldi	r25, 0x01	; 1
    45ba:	9c 87       	std	Y+12, r25	; 0x0c
    45bc:	8b 87       	std	Y+11, r24	; 0x0b
    45be:	8b 85       	ldd	r24, Y+11	; 0x0b
    45c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    45c2:	8c 01       	movw	r16, r24
    45c4:	c8 01       	movw	r24, r16
    45c6:	01 97       	sbiw	r24, 0x01	; 1
    45c8:	f1 f7       	brne	.-4      	; 0x45c6 <arm_forward+0xda>
    45ca:	8c 01       	movw	r16, r24
    45cc:	1c 87       	std	Y+12, r17	; 0x0c
    45ce:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45d0:	89 85       	ldd	r24, Y+9	; 0x09
    45d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	9a 87       	std	Y+10, r25	; 0x0a
    45d8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45da:	89 85       	ldd	r24, Y+9	; 0x09
    45dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	51 f7       	brne	.-44     	; 0x45b6 <arm_forward+0xca>
    45e2:	17 c0       	rjmp	.+46     	; 0x4612 <arm_forward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e4:	6d 81       	ldd	r22, Y+5	; 0x05
    45e6:	7e 81       	ldd	r23, Y+6	; 0x06
    45e8:	8f 81       	ldd	r24, Y+7	; 0x07
    45ea:	98 85       	ldd	r25, Y+8	; 0x08
    45ec:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	9a 87       	std	Y+10, r25	; 0x0a
    45f6:	89 87       	std	Y+9, r24	; 0x09
    45f8:	89 85       	ldd	r24, Y+9	; 0x09
    45fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    45fc:	9e 87       	std	Y+14, r25	; 0x0e
    45fe:	8d 87       	std	Y+13, r24	; 0x0d
    4600:	8d 85       	ldd	r24, Y+13	; 0x0d
    4602:	9e 85       	ldd	r25, Y+14	; 0x0e
    4604:	8c 01       	movw	r16, r24
    4606:	c8 01       	movw	r24, r16
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	f1 f7       	brne	.-4      	; 0x4608 <arm_forward+0x11c>
    460c:	8c 01       	movw	r16, r24
    460e:	1e 87       	std	Y+14, r17	; 0x0e
    4610:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_forward()
{
	for(ii=0;ii<90;ii++)
    4612:	80 91 57 03 	lds	r24, 0x0357
    4616:	8f 5f       	subi	r24, 0xFF	; 255
    4618:	80 93 57 03 	sts	0x0357, r24
    461c:	80 91 57 03 	lds	r24, 0x0357
    4620:	8a 35       	cpi	r24, 0x5A	; 90
    4622:	08 f4       	brcc	.+2      	; 0x4626 <arm_forward+0x13a>
    4624:	72 cf       	rjmp	.-284    	; 0x450a <arm_forward+0x1e>
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	a6 e9       	ldi	r26, 0x96	; 150
    462c:	b3 e4       	ldi	r27, 0x43	; 67
    462e:	8f 87       	std	Y+15, r24	; 0x0f
    4630:	98 8b       	std	Y+16, r25	; 0x10
    4632:	a9 8b       	std	Y+17, r26	; 0x11
    4634:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4636:	6f 85       	ldd	r22, Y+15	; 0x0f
    4638:	78 89       	ldd	r23, Y+16	; 0x10
    463a:	89 89       	ldd	r24, Y+17	; 0x11
    463c:	9a 89       	ldd	r25, Y+18	; 0x12
    463e:	26 e6       	ldi	r18, 0x66	; 102
    4640:	36 e6       	ldi	r19, 0x66	; 102
    4642:	46 e6       	ldi	r20, 0x66	; 102
    4644:	55 e4       	ldi	r21, 0x45	; 69
    4646:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	8b 8b       	std	Y+19, r24	; 0x13
    4650:	9c 8b       	std	Y+20, r25	; 0x14
    4652:	ad 8b       	std	Y+21, r26	; 0x15
    4654:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4656:	11 e0       	ldi	r17, 0x01	; 1
    4658:	6b 89       	ldd	r22, Y+19	; 0x13
    465a:	7c 89       	ldd	r23, Y+20	; 0x14
    465c:	8d 89       	ldd	r24, Y+21	; 0x15
    465e:	9e 89       	ldd	r25, Y+22	; 0x16
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	40 e8       	ldi	r20, 0x80	; 128
    4666:	5f e3       	ldi	r21, 0x3F	; 63
    4668:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    466c:	88 23       	and	r24, r24
    466e:	0c f0       	brlt	.+2      	; 0x4672 <arm_forward+0x186>
    4670:	10 e0       	ldi	r17, 0x00	; 0
    4672:	11 23       	and	r17, r17
    4674:	29 f0       	breq	.+10     	; 0x4680 <arm_forward+0x194>
		__ticks = 1;
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	98 8f       	std	Y+24, r25	; 0x18
    467c:	8f 8b       	std	Y+23, r24	; 0x17
    467e:	46 c0       	rjmp	.+140    	; 0x470c <arm_forward+0x220>
	else if (__tmp > 65535)
    4680:	11 e0       	ldi	r17, 0x01	; 1
    4682:	6b 89       	ldd	r22, Y+19	; 0x13
    4684:	7c 89       	ldd	r23, Y+20	; 0x14
    4686:	8d 89       	ldd	r24, Y+21	; 0x15
    4688:	9e 89       	ldd	r25, Y+22	; 0x16
    468a:	20 e0       	ldi	r18, 0x00	; 0
    468c:	3f ef       	ldi	r19, 0xFF	; 255
    468e:	4f e7       	ldi	r20, 0x7F	; 127
    4690:	57 e4       	ldi	r21, 0x47	; 71
    4692:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4696:	18 16       	cp	r1, r24
    4698:	0c f0       	brlt	.+2      	; 0x469c <arm_forward+0x1b0>
    469a:	10 e0       	ldi	r17, 0x00	; 0
    469c:	11 23       	and	r17, r17
    469e:	61 f1       	breq	.+88     	; 0x46f8 <arm_forward+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    46a2:	78 89       	ldd	r23, Y+16	; 0x10
    46a4:	89 89       	ldd	r24, Y+17	; 0x11
    46a6:	9a 89       	ldd	r25, Y+18	; 0x12
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	40 e2       	ldi	r20, 0x20	; 32
    46ae:	51 e4       	ldi	r21, 0x41	; 65
    46b0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	bc 01       	movw	r22, r24
    46ba:	cd 01       	movw	r24, r26
    46bc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	98 8f       	std	Y+24, r25	; 0x18
    46c6:	8f 8b       	std	Y+23, r24	; 0x17
    46c8:	12 c0       	rjmp	.+36     	; 0x46ee <arm_forward+0x202>
    46ca:	80 e7       	ldi	r24, 0x70	; 112
    46cc:	91 e0       	ldi	r25, 0x01	; 1
    46ce:	9a 8f       	std	Y+26, r25	; 0x1a
    46d0:	89 8f       	std	Y+25, r24	; 0x19
    46d2:	89 8d       	ldd	r24, Y+25	; 0x19
    46d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46d6:	8c 01       	movw	r16, r24
    46d8:	c8 01       	movw	r24, r16
    46da:	01 97       	sbiw	r24, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <arm_forward+0x1ee>
    46de:	8c 01       	movw	r16, r24
    46e0:	1a 8f       	std	Y+26, r17	; 0x1a
    46e2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e4:	8f 89       	ldd	r24, Y+23	; 0x17
    46e6:	98 8d       	ldd	r25, Y+24	; 0x18
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	98 8f       	std	Y+24, r25	; 0x18
    46ec:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ee:	8f 89       	ldd	r24, Y+23	; 0x17
    46f0:	98 8d       	ldd	r25, Y+24	; 0x18
    46f2:	00 97       	sbiw	r24, 0x00	; 0
    46f4:	51 f7       	brne	.-44     	; 0x46ca <arm_forward+0x1de>
    46f6:	17 c0       	rjmp	.+46     	; 0x4726 <arm_forward+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f8:	6b 89       	ldd	r22, Y+19	; 0x13
    46fa:	7c 89       	ldd	r23, Y+20	; 0x14
    46fc:	8d 89       	ldd	r24, Y+21	; 0x15
    46fe:	9e 89       	ldd	r25, Y+22	; 0x16
    4700:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	98 8f       	std	Y+24, r25	; 0x18
    470a:	8f 8b       	std	Y+23, r24	; 0x17
    470c:	8f 89       	ldd	r24, Y+23	; 0x17
    470e:	98 8d       	ldd	r25, Y+24	; 0x18
    4710:	9c 8f       	std	Y+28, r25	; 0x1c
    4712:	8b 8f       	std	Y+27, r24	; 0x1b
    4714:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4718:	8c 01       	movw	r16, r24
    471a:	c8 01       	movw	r24, r16
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <arm_forward+0x230>
    4720:	8c 01       	movw	r16, r24
    4722:	1c 8f       	std	Y+28, r17	; 0x1c
    4724:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_2(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
	
}
    4726:	6c 96       	adiw	r28, 0x1c	; 28
    4728:	0f b6       	in	r0, 0x3f	; 63
    472a:	f8 94       	cli
    472c:	de bf       	out	0x3e, r29	; 62
    472e:	0f be       	out	0x3f, r0	; 63
    4730:	cd bf       	out	0x3d, r28	; 61
    4732:	df 91       	pop	r29
    4734:	cf 91       	pop	r28
    4736:	1f 91       	pop	r17
    4738:	0f 91       	pop	r16
    473a:	08 95       	ret

0000473c <arm_backward>:

void arm_backward()
{
    473c:	0f 93       	push	r16
    473e:	1f 93       	push	r17
    4740:	cf 93       	push	r28
    4742:	df 93       	push	r29
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	2e 97       	sbiw	r28, 0x0e	; 14
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    4754:	8a e5       	ldi	r24, 0x5A	; 90
    4756:	80 93 57 03 	sts	0x0357, r24
    475a:	89 c0       	rjmp	.+274    	; 0x486e <arm_backward+0x132>
	{
		servo_2(ii);
    475c:	80 91 57 03 	lds	r24, 0x0357
    4760:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <servo_2>
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	a0 e2       	ldi	r26, 0x20	; 32
    476a:	b1 e4       	ldi	r27, 0x41	; 65
    476c:	89 83       	std	Y+1, r24	; 0x01
    476e:	9a 83       	std	Y+2, r25	; 0x02
    4770:	ab 83       	std	Y+3, r26	; 0x03
    4772:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4774:	69 81       	ldd	r22, Y+1	; 0x01
    4776:	7a 81       	ldd	r23, Y+2	; 0x02
    4778:	8b 81       	ldd	r24, Y+3	; 0x03
    477a:	9c 81       	ldd	r25, Y+4	; 0x04
    477c:	26 e6       	ldi	r18, 0x66	; 102
    477e:	36 e6       	ldi	r19, 0x66	; 102
    4780:	46 e6       	ldi	r20, 0x66	; 102
    4782:	55 e4       	ldi	r21, 0x45	; 69
    4784:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4788:	dc 01       	movw	r26, r24
    478a:	cb 01       	movw	r24, r22
    478c:	8d 83       	std	Y+5, r24	; 0x05
    478e:	9e 83       	std	Y+6, r25	; 0x06
    4790:	af 83       	std	Y+7, r26	; 0x07
    4792:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4794:	11 e0       	ldi	r17, 0x01	; 1
    4796:	6d 81       	ldd	r22, Y+5	; 0x05
    4798:	7e 81       	ldd	r23, Y+6	; 0x06
    479a:	8f 81       	ldd	r24, Y+7	; 0x07
    479c:	98 85       	ldd	r25, Y+8	; 0x08
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	40 e8       	ldi	r20, 0x80	; 128
    47a4:	5f e3       	ldi	r21, 0x3F	; 63
    47a6:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    47aa:	88 23       	and	r24, r24
    47ac:	0c f0       	brlt	.+2      	; 0x47b0 <arm_backward+0x74>
    47ae:	10 e0       	ldi	r17, 0x00	; 0
    47b0:	11 23       	and	r17, r17
    47b2:	29 f0       	breq	.+10     	; 0x47be <arm_backward+0x82>
		__ticks = 1;
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	9a 87       	std	Y+10, r25	; 0x0a
    47ba:	89 87       	std	Y+9, r24	; 0x09
    47bc:	46 c0       	rjmp	.+140    	; 0x484a <arm_backward+0x10e>
	else if (__tmp > 65535)
    47be:	11 e0       	ldi	r17, 0x01	; 1
    47c0:	6d 81       	ldd	r22, Y+5	; 0x05
    47c2:	7e 81       	ldd	r23, Y+6	; 0x06
    47c4:	8f 81       	ldd	r24, Y+7	; 0x07
    47c6:	98 85       	ldd	r25, Y+8	; 0x08
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	3f ef       	ldi	r19, 0xFF	; 255
    47cc:	4f e7       	ldi	r20, 0x7F	; 127
    47ce:	57 e4       	ldi	r21, 0x47	; 71
    47d0:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    47d4:	18 16       	cp	r1, r24
    47d6:	0c f0       	brlt	.+2      	; 0x47da <arm_backward+0x9e>
    47d8:	10 e0       	ldi	r17, 0x00	; 0
    47da:	11 23       	and	r17, r17
    47dc:	61 f1       	breq	.+88     	; 0x4836 <arm_backward+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47de:	69 81       	ldd	r22, Y+1	; 0x01
    47e0:	7a 81       	ldd	r23, Y+2	; 0x02
    47e2:	8b 81       	ldd	r24, Y+3	; 0x03
    47e4:	9c 81       	ldd	r25, Y+4	; 0x04
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	40 e2       	ldi	r20, 0x20	; 32
    47ec:	51 e4       	ldi	r21, 0x41	; 65
    47ee:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	bc 01       	movw	r22, r24
    47f8:	cd 01       	movw	r24, r26
    47fa:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	9a 87       	std	Y+10, r25	; 0x0a
    4804:	89 87       	std	Y+9, r24	; 0x09
    4806:	12 c0       	rjmp	.+36     	; 0x482c <arm_backward+0xf0>
    4808:	80 e7       	ldi	r24, 0x70	; 112
    480a:	91 e0       	ldi	r25, 0x01	; 1
    480c:	9c 87       	std	Y+12, r25	; 0x0c
    480e:	8b 87       	std	Y+11, r24	; 0x0b
    4810:	8b 85       	ldd	r24, Y+11	; 0x0b
    4812:	9c 85       	ldd	r25, Y+12	; 0x0c
    4814:	8c 01       	movw	r16, r24
    4816:	c8 01       	movw	r24, r16
    4818:	01 97       	sbiw	r24, 0x01	; 1
    481a:	f1 f7       	brne	.-4      	; 0x4818 <arm_backward+0xdc>
    481c:	8c 01       	movw	r16, r24
    481e:	1c 87       	std	Y+12, r17	; 0x0c
    4820:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4822:	89 85       	ldd	r24, Y+9	; 0x09
    4824:	9a 85       	ldd	r25, Y+10	; 0x0a
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	9a 87       	std	Y+10, r25	; 0x0a
    482a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482c:	89 85       	ldd	r24, Y+9	; 0x09
    482e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4830:	00 97       	sbiw	r24, 0x00	; 0
    4832:	51 f7       	brne	.-44     	; 0x4808 <arm_backward+0xcc>
    4834:	17 c0       	rjmp	.+46     	; 0x4864 <arm_backward+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4836:	6d 81       	ldd	r22, Y+5	; 0x05
    4838:	7e 81       	ldd	r23, Y+6	; 0x06
    483a:	8f 81       	ldd	r24, Y+7	; 0x07
    483c:	98 85       	ldd	r25, Y+8	; 0x08
    483e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	9a 87       	std	Y+10, r25	; 0x0a
    4848:	89 87       	std	Y+9, r24	; 0x09
    484a:	89 85       	ldd	r24, Y+9	; 0x09
    484c:	9a 85       	ldd	r25, Y+10	; 0x0a
    484e:	9e 87       	std	Y+14, r25	; 0x0e
    4850:	8d 87       	std	Y+13, r24	; 0x0d
    4852:	8d 85       	ldd	r24, Y+13	; 0x0d
    4854:	9e 85       	ldd	r25, Y+14	; 0x0e
    4856:	8c 01       	movw	r16, r24
    4858:	c8 01       	movw	r24, r16
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <arm_backward+0x11e>
    485e:	8c 01       	movw	r16, r24
    4860:	1e 87       	std	Y+14, r17	; 0x0e
    4862:	0d 87       	std	Y+13, r16	; 0x0d
	
}

void arm_backward()
{
	for(ii=90;ii>0;ii--)
    4864:	80 91 57 03 	lds	r24, 0x0357
    4868:	81 50       	subi	r24, 0x01	; 1
    486a:	80 93 57 03 	sts	0x0357, r24
    486e:	80 91 57 03 	lds	r24, 0x0357
    4872:	88 23       	and	r24, r24
    4874:	09 f0       	breq	.+2      	; 0x4878 <arm_backward+0x13c>
    4876:	72 cf       	rjmp	.-284    	; 0x475c <arm_backward+0x20>
	{
		servo_2(ii);
		_delay_ms(10);
	}
	
}
    4878:	2e 96       	adiw	r28, 0x0e	; 14
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	08 95       	ret

0000488e <reset>:

void reset()
{
    488e:	0f 93       	push	r16
    4890:	1f 93       	push	r17
    4892:	cf 93       	push	r28
    4894:	df 93       	push	r29
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	e8 97       	sbiw	r28, 0x38	; 56
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	cd bf       	out	0x3d, r28	; 61
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	aa ef       	ldi	r26, 0xFA	; 250
    48ac:	b3 e4       	ldi	r27, 0x43	; 67
    48ae:	89 83       	std	Y+1, r24	; 0x01
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	ab 83       	std	Y+3, r26	; 0x03
    48b4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    48b6:	69 81       	ldd	r22, Y+1	; 0x01
    48b8:	7a 81       	ldd	r23, Y+2	; 0x02
    48ba:	8b 81       	ldd	r24, Y+3	; 0x03
    48bc:	9c 81       	ldd	r25, Y+4	; 0x04
    48be:	26 e6       	ldi	r18, 0x66	; 102
    48c0:	36 e6       	ldi	r19, 0x66	; 102
    48c2:	46 e6       	ldi	r20, 0x66	; 102
    48c4:	55 e4       	ldi	r21, 0x45	; 69
    48c6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	8d 83       	std	Y+5, r24	; 0x05
    48d0:	9e 83       	std	Y+6, r25	; 0x06
    48d2:	af 83       	std	Y+7, r26	; 0x07
    48d4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    48d6:	11 e0       	ldi	r17, 0x01	; 1
    48d8:	6d 81       	ldd	r22, Y+5	; 0x05
    48da:	7e 81       	ldd	r23, Y+6	; 0x06
    48dc:	8f 81       	ldd	r24, Y+7	; 0x07
    48de:	98 85       	ldd	r25, Y+8	; 0x08
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	40 e8       	ldi	r20, 0x80	; 128
    48e6:	5f e3       	ldi	r21, 0x3F	; 63
    48e8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    48ec:	88 23       	and	r24, r24
    48ee:	0c f0       	brlt	.+2      	; 0x48f2 <reset+0x64>
    48f0:	10 e0       	ldi	r17, 0x00	; 0
    48f2:	11 23       	and	r17, r17
    48f4:	29 f0       	breq	.+10     	; 0x4900 <reset+0x72>
		__ticks = 1;
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	9a 87       	std	Y+10, r25	; 0x0a
    48fc:	89 87       	std	Y+9, r24	; 0x09
    48fe:	46 c0       	rjmp	.+140    	; 0x498c <reset+0xfe>
	else if (__tmp > 65535)
    4900:	11 e0       	ldi	r17, 0x01	; 1
    4902:	6d 81       	ldd	r22, Y+5	; 0x05
    4904:	7e 81       	ldd	r23, Y+6	; 0x06
    4906:	8f 81       	ldd	r24, Y+7	; 0x07
    4908:	98 85       	ldd	r25, Y+8	; 0x08
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	3f ef       	ldi	r19, 0xFF	; 255
    490e:	4f e7       	ldi	r20, 0x7F	; 127
    4910:	57 e4       	ldi	r21, 0x47	; 71
    4912:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4916:	18 16       	cp	r1, r24
    4918:	0c f0       	brlt	.+2      	; 0x491c <reset+0x8e>
    491a:	10 e0       	ldi	r17, 0x00	; 0
    491c:	11 23       	and	r17, r17
    491e:	61 f1       	breq	.+88     	; 0x4978 <reset+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4920:	69 81       	ldd	r22, Y+1	; 0x01
    4922:	7a 81       	ldd	r23, Y+2	; 0x02
    4924:	8b 81       	ldd	r24, Y+3	; 0x03
    4926:	9c 81       	ldd	r25, Y+4	; 0x04
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	40 e2       	ldi	r20, 0x20	; 32
    492e:	51 e4       	ldi	r21, 0x41	; 65
    4930:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	bc 01       	movw	r22, r24
    493a:	cd 01       	movw	r24, r26
    493c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4940:	dc 01       	movw	r26, r24
    4942:	cb 01       	movw	r24, r22
    4944:	9a 87       	std	Y+10, r25	; 0x0a
    4946:	89 87       	std	Y+9, r24	; 0x09
    4948:	12 c0       	rjmp	.+36     	; 0x496e <reset+0xe0>
    494a:	80 e7       	ldi	r24, 0x70	; 112
    494c:	91 e0       	ldi	r25, 0x01	; 1
    494e:	9c 87       	std	Y+12, r25	; 0x0c
    4950:	8b 87       	std	Y+11, r24	; 0x0b
    4952:	8b 85       	ldd	r24, Y+11	; 0x0b
    4954:	9c 85       	ldd	r25, Y+12	; 0x0c
    4956:	8c 01       	movw	r16, r24
    4958:	c8 01       	movw	r24, r16
    495a:	01 97       	sbiw	r24, 0x01	; 1
    495c:	f1 f7       	brne	.-4      	; 0x495a <reset+0xcc>
    495e:	8c 01       	movw	r16, r24
    4960:	1c 87       	std	Y+12, r17	; 0x0c
    4962:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4964:	89 85       	ldd	r24, Y+9	; 0x09
    4966:	9a 85       	ldd	r25, Y+10	; 0x0a
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	9a 87       	std	Y+10, r25	; 0x0a
    496c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    496e:	89 85       	ldd	r24, Y+9	; 0x09
    4970:	9a 85       	ldd	r25, Y+10	; 0x0a
    4972:	00 97       	sbiw	r24, 0x00	; 0
    4974:	51 f7       	brne	.-44     	; 0x494a <reset+0xbc>
    4976:	17 c0       	rjmp	.+46     	; 0x49a6 <reset+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4978:	6d 81       	ldd	r22, Y+5	; 0x05
    497a:	7e 81       	ldd	r23, Y+6	; 0x06
    497c:	8f 81       	ldd	r24, Y+7	; 0x07
    497e:	98 85       	ldd	r25, Y+8	; 0x08
    4980:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	9a 87       	std	Y+10, r25	; 0x0a
    498a:	89 87       	std	Y+9, r24	; 0x09
    498c:	89 85       	ldd	r24, Y+9	; 0x09
    498e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4990:	9e 87       	std	Y+14, r25	; 0x0e
    4992:	8d 87       	std	Y+13, r24	; 0x0d
    4994:	8d 85       	ldd	r24, Y+13	; 0x0d
    4996:	9e 85       	ldd	r25, Y+14	; 0x0e
    4998:	8c 01       	movw	r16, r24
    499a:	c8 01       	movw	r24, r16
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	f1 f7       	brne	.-4      	; 0x499c <reset+0x10e>
    49a0:	8c 01       	movw	r16, r24
    49a2:	1e 87       	std	Y+14, r17	; 0x0e
    49a4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	servo_1(0);
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	0e 94 8e 1b 	call	0x371c	; 0x371c <servo_1>
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	aa ef       	ldi	r26, 0xFA	; 250
    49b2:	b3 e4       	ldi	r27, 0x43	; 67
    49b4:	8f 87       	std	Y+15, r24	; 0x0f
    49b6:	98 8b       	std	Y+16, r25	; 0x10
    49b8:	a9 8b       	std	Y+17, r26	; 0x11
    49ba:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    49be:	78 89       	ldd	r23, Y+16	; 0x10
    49c0:	89 89       	ldd	r24, Y+17	; 0x11
    49c2:	9a 89       	ldd	r25, Y+18	; 0x12
    49c4:	26 e6       	ldi	r18, 0x66	; 102
    49c6:	36 e6       	ldi	r19, 0x66	; 102
    49c8:	46 e6       	ldi	r20, 0x66	; 102
    49ca:	55 e4       	ldi	r21, 0x45	; 69
    49cc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	8b 8b       	std	Y+19, r24	; 0x13
    49d6:	9c 8b       	std	Y+20, r25	; 0x14
    49d8:	ad 8b       	std	Y+21, r26	; 0x15
    49da:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    49dc:	11 e0       	ldi	r17, 0x01	; 1
    49de:	6b 89       	ldd	r22, Y+19	; 0x13
    49e0:	7c 89       	ldd	r23, Y+20	; 0x14
    49e2:	8d 89       	ldd	r24, Y+21	; 0x15
    49e4:	9e 89       	ldd	r25, Y+22	; 0x16
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e8       	ldi	r20, 0x80	; 128
    49ec:	5f e3       	ldi	r21, 0x3F	; 63
    49ee:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    49f2:	88 23       	and	r24, r24
    49f4:	0c f0       	brlt	.+2      	; 0x49f8 <reset+0x16a>
    49f6:	10 e0       	ldi	r17, 0x00	; 0
    49f8:	11 23       	and	r17, r17
    49fa:	29 f0       	breq	.+10     	; 0x4a06 <reset+0x178>
		__ticks = 1;
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	98 8f       	std	Y+24, r25	; 0x18
    4a02:	8f 8b       	std	Y+23, r24	; 0x17
    4a04:	46 c0       	rjmp	.+140    	; 0x4a92 <reset+0x204>
	else if (__tmp > 65535)
    4a06:	11 e0       	ldi	r17, 0x01	; 1
    4a08:	6b 89       	ldd	r22, Y+19	; 0x13
    4a0a:	7c 89       	ldd	r23, Y+20	; 0x14
    4a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    4a0e:	9e 89       	ldd	r25, Y+22	; 0x16
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	3f ef       	ldi	r19, 0xFF	; 255
    4a14:	4f e7       	ldi	r20, 0x7F	; 127
    4a16:	57 e4       	ldi	r21, 0x47	; 71
    4a18:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4a1c:	18 16       	cp	r1, r24
    4a1e:	0c f0       	brlt	.+2      	; 0x4a22 <reset+0x194>
    4a20:	10 e0       	ldi	r17, 0x00	; 0
    4a22:	11 23       	and	r17, r17
    4a24:	61 f1       	breq	.+88     	; 0x4a7e <reset+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a26:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a28:	78 89       	ldd	r23, Y+16	; 0x10
    4a2a:	89 89       	ldd	r24, Y+17	; 0x11
    4a2c:	9a 89       	ldd	r25, Y+18	; 0x12
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e2       	ldi	r20, 0x20	; 32
    4a34:	51 e4       	ldi	r21, 0x41	; 65
    4a36:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	bc 01       	movw	r22, r24
    4a40:	cd 01       	movw	r24, r26
    4a42:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4a46:	dc 01       	movw	r26, r24
    4a48:	cb 01       	movw	r24, r22
    4a4a:	98 8f       	std	Y+24, r25	; 0x18
    4a4c:	8f 8b       	std	Y+23, r24	; 0x17
    4a4e:	12 c0       	rjmp	.+36     	; 0x4a74 <reset+0x1e6>
    4a50:	80 e7       	ldi	r24, 0x70	; 112
    4a52:	91 e0       	ldi	r25, 0x01	; 1
    4a54:	9a 8f       	std	Y+26, r25	; 0x1a
    4a56:	89 8f       	std	Y+25, r24	; 0x19
    4a58:	89 8d       	ldd	r24, Y+25	; 0x19
    4a5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a5c:	8c 01       	movw	r16, r24
    4a5e:	c8 01       	movw	r24, r16
    4a60:	01 97       	sbiw	r24, 0x01	; 1
    4a62:	f1 f7       	brne	.-4      	; 0x4a60 <reset+0x1d2>
    4a64:	8c 01       	movw	r16, r24
    4a66:	1a 8f       	std	Y+26, r17	; 0x1a
    4a68:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	98 8f       	std	Y+24, r25	; 0x18
    4a72:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a74:	8f 89       	ldd	r24, Y+23	; 0x17
    4a76:	98 8d       	ldd	r25, Y+24	; 0x18
    4a78:	00 97       	sbiw	r24, 0x00	; 0
    4a7a:	51 f7       	brne	.-44     	; 0x4a50 <reset+0x1c2>
    4a7c:	17 c0       	rjmp	.+46     	; 0x4aac <reset+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a7e:	6b 89       	ldd	r22, Y+19	; 0x13
    4a80:	7c 89       	ldd	r23, Y+20	; 0x14
    4a82:	8d 89       	ldd	r24, Y+21	; 0x15
    4a84:	9e 89       	ldd	r25, Y+22	; 0x16
    4a86:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	98 8f       	std	Y+24, r25	; 0x18
    4a90:	8f 8b       	std	Y+23, r24	; 0x17
    4a92:	8f 89       	ldd	r24, Y+23	; 0x17
    4a94:	98 8d       	ldd	r25, Y+24	; 0x18
    4a96:	9c 8f       	std	Y+28, r25	; 0x1c
    4a98:	8b 8f       	std	Y+27, r24	; 0x1b
    4a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a9e:	8c 01       	movw	r16, r24
    4aa0:	c8 01       	movw	r24, r16
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	f1 f7       	brne	.-4      	; 0x4aa2 <reset+0x214>
    4aa6:	8c 01       	movw	r16, r24
    4aa8:	1c 8f       	std	Y+28, r17	; 0x1c
    4aaa:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(500);
	servo_2(0);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <servo_2>
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	aa ef       	ldi	r26, 0xFA	; 250
    4ab8:	b3 e4       	ldi	r27, 0x43	; 67
    4aba:	8d 8f       	std	Y+29, r24	; 0x1d
    4abc:	9e 8f       	std	Y+30, r25	; 0x1e
    4abe:	af 8f       	std	Y+31, r26	; 0x1f
    4ac0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ac2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4ac4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4ac6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ac8:	98 a1       	lds	r25, 0x48
    4aca:	26 e6       	ldi	r18, 0x66	; 102
    4acc:	36 e6       	ldi	r19, 0x66	; 102
    4ace:	46 e6       	ldi	r20, 0x66	; 102
    4ad0:	55 e4       	ldi	r21, 0x45	; 69
    4ad2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	89 a3       	lds	r24, 0x59
    4adc:	9a a3       	lds	r25, 0x5a
    4ade:	ab a3       	lds	r26, 0x5b
    4ae0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    4ae2:	11 e0       	ldi	r17, 0x01	; 1
    4ae4:	69 a1       	lds	r22, 0x49
    4ae6:	7a a1       	lds	r23, 0x4a
    4ae8:	8b a1       	lds	r24, 0x4b
    4aea:	9c a1       	lds	r25, 0x4c
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	40 e8       	ldi	r20, 0x80	; 128
    4af2:	5f e3       	ldi	r21, 0x3F	; 63
    4af4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4af8:	88 23       	and	r24, r24
    4afa:	0c f0       	brlt	.+2      	; 0x4afe <reset+0x270>
    4afc:	10 e0       	ldi	r17, 0x00	; 0
    4afe:	11 23       	and	r17, r17
    4b00:	29 f0       	breq	.+10     	; 0x4b0c <reset+0x27e>
		__ticks = 1;
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	9e a3       	lds	r25, 0x5e
    4b08:	8d a3       	lds	r24, 0x5d
    4b0a:	46 c0       	rjmp	.+140    	; 0x4b98 <reset+0x30a>
	else if (__tmp > 65535)
    4b0c:	11 e0       	ldi	r17, 0x01	; 1
    4b0e:	69 a1       	lds	r22, 0x49
    4b10:	7a a1       	lds	r23, 0x4a
    4b12:	8b a1       	lds	r24, 0x4b
    4b14:	9c a1       	lds	r25, 0x4c
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	3f ef       	ldi	r19, 0xFF	; 255
    4b1a:	4f e7       	ldi	r20, 0x7F	; 127
    4b1c:	57 e4       	ldi	r21, 0x47	; 71
    4b1e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4b22:	18 16       	cp	r1, r24
    4b24:	0c f0       	brlt	.+2      	; 0x4b28 <reset+0x29a>
    4b26:	10 e0       	ldi	r17, 0x00	; 0
    4b28:	11 23       	and	r17, r17
    4b2a:	61 f1       	breq	.+88     	; 0x4b84 <reset+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b2c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4b2e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4b30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b32:	98 a1       	lds	r25, 0x48
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	30 e0       	ldi	r19, 0x00	; 0
    4b38:	40 e2       	ldi	r20, 0x20	; 32
    4b3a:	51 e4       	ldi	r21, 0x41	; 65
    4b3c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	bc 01       	movw	r22, r24
    4b46:	cd 01       	movw	r24, r26
    4b48:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	9e a3       	lds	r25, 0x5e
    4b52:	8d a3       	lds	r24, 0x5d
    4b54:	12 c0       	rjmp	.+36     	; 0x4b7a <reset+0x2ec>
    4b56:	80 e7       	ldi	r24, 0x70	; 112
    4b58:	91 e0       	ldi	r25, 0x01	; 1
    4b5a:	98 a7       	lds	r25, 0x78
    4b5c:	8f a3       	lds	r24, 0x5f
    4b5e:	8f a1       	lds	r24, 0x4f
    4b60:	98 a5       	lds	r25, 0x68
    4b62:	8c 01       	movw	r16, r24
    4b64:	c8 01       	movw	r24, r16
    4b66:	01 97       	sbiw	r24, 0x01	; 1
    4b68:	f1 f7       	brne	.-4      	; 0x4b66 <reset+0x2d8>
    4b6a:	8c 01       	movw	r16, r24
    4b6c:	18 a7       	lds	r17, 0x78
    4b6e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b70:	8d a1       	lds	r24, 0x4d
    4b72:	9e a1       	lds	r25, 0x4e
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	9e a3       	lds	r25, 0x5e
    4b78:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7a:	8d a1       	lds	r24, 0x4d
    4b7c:	9e a1       	lds	r25, 0x4e
    4b7e:	00 97       	sbiw	r24, 0x00	; 0
    4b80:	51 f7       	brne	.-44     	; 0x4b56 <reset+0x2c8>
    4b82:	17 c0       	rjmp	.+46     	; 0x4bb2 <reset+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b84:	69 a1       	lds	r22, 0x49
    4b86:	7a a1       	lds	r23, 0x4a
    4b88:	8b a1       	lds	r24, 0x4b
    4b8a:	9c a1       	lds	r25, 0x4c
    4b8c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	9e a3       	lds	r25, 0x5e
    4b96:	8d a3       	lds	r24, 0x5d
    4b98:	8d a1       	lds	r24, 0x4d
    4b9a:	9e a1       	lds	r25, 0x4e
    4b9c:	9a a7       	lds	r25, 0x7a
    4b9e:	89 a7       	lds	r24, 0x79
    4ba0:	89 a5       	lds	r24, 0x69
    4ba2:	9a a5       	lds	r25, 0x6a
    4ba4:	8c 01       	movw	r16, r24
    4ba6:	c8 01       	movw	r24, r16
    4ba8:	01 97       	sbiw	r24, 0x01	; 1
    4baa:	f1 f7       	brne	.-4      	; 0x4ba8 <reset+0x31a>
    4bac:	8c 01       	movw	r16, r24
    4bae:	1a a7       	lds	r17, 0x7a
    4bb0:	09 a7       	lds	r16, 0x79
	_delay_ms(500);
	servo_3(0);
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <servo_3>
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	aa ef       	ldi	r26, 0xFA	; 250
    4bbe:	b3 e4       	ldi	r27, 0x43	; 67
    4bc0:	8b a7       	lds	r24, 0x7b
    4bc2:	9c a7       	lds	r25, 0x7c
    4bc4:	ad a7       	lds	r26, 0x7d
    4bc6:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4bc8:	6b a5       	lds	r22, 0x6b
    4bca:	7c a5       	lds	r23, 0x6c
    4bcc:	8d a5       	lds	r24, 0x6d
    4bce:	9e a5       	lds	r25, 0x6e
    4bd0:	26 e6       	ldi	r18, 0x66	; 102
    4bd2:	36 e6       	ldi	r19, 0x66	; 102
    4bd4:	46 e6       	ldi	r20, 0x66	; 102
    4bd6:	55 e4       	ldi	r21, 0x45	; 69
    4bd8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	8f a7       	lds	r24, 0x7f
    4be2:	98 ab       	sts	0x58, r25
    4be4:	a9 ab       	sts	0x59, r26
    4be6:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    4be8:	11 e0       	ldi	r17, 0x01	; 1
    4bea:	6f a5       	lds	r22, 0x6f
    4bec:	78 a9       	sts	0x48, r23
    4bee:	89 a9       	sts	0x49, r24
    4bf0:	9a a9       	sts	0x4a, r25
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	40 e8       	ldi	r20, 0x80	; 128
    4bf8:	5f e3       	ldi	r21, 0x3F	; 63
    4bfa:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4bfe:	88 23       	and	r24, r24
    4c00:	0c f0       	brlt	.+2      	; 0x4c04 <reset+0x376>
    4c02:	10 e0       	ldi	r17, 0x00	; 0
    4c04:	11 23       	and	r17, r17
    4c06:	29 f0       	breq	.+10     	; 0x4c12 <reset+0x384>
		__ticks = 1;
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	9c ab       	sts	0x5c, r25
    4c0e:	8b ab       	sts	0x5b, r24
    4c10:	46 c0       	rjmp	.+140    	; 0x4c9e <reset+0x410>
	else if (__tmp > 65535)
    4c12:	11 e0       	ldi	r17, 0x01	; 1
    4c14:	6f a5       	lds	r22, 0x6f
    4c16:	78 a9       	sts	0x48, r23
    4c18:	89 a9       	sts	0x49, r24
    4c1a:	9a a9       	sts	0x4a, r25
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	3f ef       	ldi	r19, 0xFF	; 255
    4c20:	4f e7       	ldi	r20, 0x7F	; 127
    4c22:	57 e4       	ldi	r21, 0x47	; 71
    4c24:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4c28:	18 16       	cp	r1, r24
    4c2a:	0c f0       	brlt	.+2      	; 0x4c2e <reset+0x3a0>
    4c2c:	10 e0       	ldi	r17, 0x00	; 0
    4c2e:	11 23       	and	r17, r17
    4c30:	61 f1       	breq	.+88     	; 0x4c8a <reset+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c32:	6b a5       	lds	r22, 0x6b
    4c34:	7c a5       	lds	r23, 0x6c
    4c36:	8d a5       	lds	r24, 0x6d
    4c38:	9e a5       	lds	r25, 0x6e
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	40 e2       	ldi	r20, 0x20	; 32
    4c40:	51 e4       	ldi	r21, 0x41	; 65
    4c42:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	bc 01       	movw	r22, r24
    4c4c:	cd 01       	movw	r24, r26
    4c4e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	9c ab       	sts	0x5c, r25
    4c58:	8b ab       	sts	0x5b, r24
    4c5a:	12 c0       	rjmp	.+36     	; 0x4c80 <reset+0x3f2>
    4c5c:	80 e7       	ldi	r24, 0x70	; 112
    4c5e:	91 e0       	ldi	r25, 0x01	; 1
    4c60:	9e ab       	sts	0x5e, r25
    4c62:	8d ab       	sts	0x5d, r24
    4c64:	8d a9       	sts	0x4d, r24
    4c66:	9e a9       	sts	0x4e, r25
    4c68:	8c 01       	movw	r16, r24
    4c6a:	c8 01       	movw	r24, r16
    4c6c:	01 97       	sbiw	r24, 0x01	; 1
    4c6e:	f1 f7       	brne	.-4      	; 0x4c6c <reset+0x3de>
    4c70:	8c 01       	movw	r16, r24
    4c72:	1e ab       	sts	0x5e, r17
    4c74:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c76:	8b a9       	sts	0x4b, r24
    4c78:	9c a9       	sts	0x4c, r25
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	9c ab       	sts	0x5c, r25
    4c7e:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c80:	8b a9       	sts	0x4b, r24
    4c82:	9c a9       	sts	0x4c, r25
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	51 f7       	brne	.-44     	; 0x4c5c <reset+0x3ce>
    4c88:	17 c0       	rjmp	.+46     	; 0x4cb8 <reset+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c8a:	6f a5       	lds	r22, 0x6f
    4c8c:	78 a9       	sts	0x48, r23
    4c8e:	89 a9       	sts	0x49, r24
    4c90:	9a a9       	sts	0x4a, r25
    4c92:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	9c ab       	sts	0x5c, r25
    4c9c:	8b ab       	sts	0x5b, r24
    4c9e:	8b a9       	sts	0x4b, r24
    4ca0:	9c a9       	sts	0x4c, r25
    4ca2:	98 af       	sts	0x78, r25
    4ca4:	8f ab       	sts	0x5f, r24
    4ca6:	8f a9       	sts	0x4f, r24
    4ca8:	98 ad       	sts	0x68, r25
    4caa:	8c 01       	movw	r16, r24
    4cac:	c8 01       	movw	r24, r16
    4cae:	01 97       	sbiw	r24, 0x01	; 1
    4cb0:	f1 f7       	brne	.-4      	; 0x4cae <reset+0x420>
    4cb2:	8c 01       	movw	r16, r24
    4cb4:	18 af       	sts	0x78, r17
    4cb6:	0f ab       	sts	0x5f, r16
	_delay_ms(500);
}
    4cb8:	e8 96       	adiw	r28, 0x38	; 56
    4cba:	0f b6       	in	r0, 0x3f	; 63
    4cbc:	f8 94       	cli
    4cbe:	de bf       	out	0x3e, r29	; 62
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	cd bf       	out	0x3d, r28	; 61
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	1f 91       	pop	r17
    4cca:	0f 91       	pop	r16
    4ccc:	08 95       	ret

00004cce <reset1>:
void reset1()
{
    4cce:	cf 93       	push	r28
    4cd0:	df 93       	push	r29
    4cd2:	cd b7       	in	r28, 0x3d	; 61
    4cd4:	de b7       	in	r29, 0x3e	; 62
	servo_1_free();
    4cd6:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <servo_1_free>
	servo_2_free();
    4cda:	0e 94 89 1c 	call	0x3912	; 0x3912 <servo_2_free>
	servo_3_free();
    4cde:	0e 94 9a 1c 	call	0x3934	; 0x3934 <servo_3_free>
}
    4ce2:	df 91       	pop	r29
    4ce4:	cf 91       	pop	r28
    4ce6:	08 95       	ret

00004ce8 <defaulty>:


void defaulty()
{
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	6c 97       	sbiw	r28, 0x1c	; 28
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
	servo_1(90);
    4d00:	8a e5       	ldi	r24, 0x5A	; 90
    4d02:	0e 94 8e 1b 	call	0x371c	; 0x371c <servo_1>
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	a6 e9       	ldi	r26, 0x96	; 150
    4d0c:	b3 e4       	ldi	r27, 0x43	; 67
    4d0e:	89 83       	std	Y+1, r24	; 0x01
    4d10:	9a 83       	std	Y+2, r25	; 0x02
    4d12:	ab 83       	std	Y+3, r26	; 0x03
    4d14:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d16:	69 81       	ldd	r22, Y+1	; 0x01
    4d18:	7a 81       	ldd	r23, Y+2	; 0x02
    4d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d1e:	26 e6       	ldi	r18, 0x66	; 102
    4d20:	36 e6       	ldi	r19, 0x66	; 102
    4d22:	46 e6       	ldi	r20, 0x66	; 102
    4d24:	55 e4       	ldi	r21, 0x45	; 69
    4d26:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	8d 83       	std	Y+5, r24	; 0x05
    4d30:	9e 83       	std	Y+6, r25	; 0x06
    4d32:	af 83       	std	Y+7, r26	; 0x07
    4d34:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4d36:	11 e0       	ldi	r17, 0x01	; 1
    4d38:	6d 81       	ldd	r22, Y+5	; 0x05
    4d3a:	7e 81       	ldd	r23, Y+6	; 0x06
    4d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d3e:	98 85       	ldd	r25, Y+8	; 0x08
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	40 e8       	ldi	r20, 0x80	; 128
    4d46:	5f e3       	ldi	r21, 0x3F	; 63
    4d48:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4d4c:	88 23       	and	r24, r24
    4d4e:	0c f0       	brlt	.+2      	; 0x4d52 <defaulty+0x6a>
    4d50:	10 e0       	ldi	r17, 0x00	; 0
    4d52:	11 23       	and	r17, r17
    4d54:	29 f0       	breq	.+10     	; 0x4d60 <defaulty+0x78>
		__ticks = 1;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	9a 87       	std	Y+10, r25	; 0x0a
    4d5c:	89 87       	std	Y+9, r24	; 0x09
    4d5e:	46 c0       	rjmp	.+140    	; 0x4dec <defaulty+0x104>
	else if (__tmp > 65535)
    4d60:	11 e0       	ldi	r17, 0x01	; 1
    4d62:	6d 81       	ldd	r22, Y+5	; 0x05
    4d64:	7e 81       	ldd	r23, Y+6	; 0x06
    4d66:	8f 81       	ldd	r24, Y+7	; 0x07
    4d68:	98 85       	ldd	r25, Y+8	; 0x08
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	3f ef       	ldi	r19, 0xFF	; 255
    4d6e:	4f e7       	ldi	r20, 0x7F	; 127
    4d70:	57 e4       	ldi	r21, 0x47	; 71
    4d72:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4d76:	18 16       	cp	r1, r24
    4d78:	0c f0       	brlt	.+2      	; 0x4d7c <defaulty+0x94>
    4d7a:	10 e0       	ldi	r17, 0x00	; 0
    4d7c:	11 23       	and	r17, r17
    4d7e:	61 f1       	breq	.+88     	; 0x4dd8 <defaulty+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d80:	69 81       	ldd	r22, Y+1	; 0x01
    4d82:	7a 81       	ldd	r23, Y+2	; 0x02
    4d84:	8b 81       	ldd	r24, Y+3	; 0x03
    4d86:	9c 81       	ldd	r25, Y+4	; 0x04
    4d88:	20 e0       	ldi	r18, 0x00	; 0
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	40 e2       	ldi	r20, 0x20	; 32
    4d8e:	51 e4       	ldi	r21, 0x41	; 65
    4d90:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4d94:	dc 01       	movw	r26, r24
    4d96:	cb 01       	movw	r24, r22
    4d98:	bc 01       	movw	r22, r24
    4d9a:	cd 01       	movw	r24, r26
    4d9c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	9a 87       	std	Y+10, r25	; 0x0a
    4da6:	89 87       	std	Y+9, r24	; 0x09
    4da8:	12 c0       	rjmp	.+36     	; 0x4dce <defaulty+0xe6>
    4daa:	80 e7       	ldi	r24, 0x70	; 112
    4dac:	91 e0       	ldi	r25, 0x01	; 1
    4dae:	9c 87       	std	Y+12, r25	; 0x0c
    4db0:	8b 87       	std	Y+11, r24	; 0x0b
    4db2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4db4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4db6:	8c 01       	movw	r16, r24
    4db8:	c8 01       	movw	r24, r16
    4dba:	01 97       	sbiw	r24, 0x01	; 1
    4dbc:	f1 f7       	brne	.-4      	; 0x4dba <defaulty+0xd2>
    4dbe:	8c 01       	movw	r16, r24
    4dc0:	1c 87       	std	Y+12, r17	; 0x0c
    4dc2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc4:	89 85       	ldd	r24, Y+9	; 0x09
    4dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	9a 87       	std	Y+10, r25	; 0x0a
    4dcc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dce:	89 85       	ldd	r24, Y+9	; 0x09
    4dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dd2:	00 97       	sbiw	r24, 0x00	; 0
    4dd4:	51 f7       	brne	.-44     	; 0x4daa <defaulty+0xc2>
    4dd6:	17 c0       	rjmp	.+46     	; 0x4e06 <defaulty+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd8:	6d 81       	ldd	r22, Y+5	; 0x05
    4dda:	7e 81       	ldd	r23, Y+6	; 0x06
    4ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dde:	98 85       	ldd	r25, Y+8	; 0x08
    4de0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4de4:	dc 01       	movw	r26, r24
    4de6:	cb 01       	movw	r24, r22
    4de8:	9a 87       	std	Y+10, r25	; 0x0a
    4dea:	89 87       	std	Y+9, r24	; 0x09
    4dec:	89 85       	ldd	r24, Y+9	; 0x09
    4dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df0:	9e 87       	std	Y+14, r25	; 0x0e
    4df2:	8d 87       	std	Y+13, r24	; 0x0d
    4df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4df8:	8c 01       	movw	r16, r24
    4dfa:	c8 01       	movw	r24, r16
    4dfc:	01 97       	sbiw	r24, 0x01	; 1
    4dfe:	f1 f7       	brne	.-4      	; 0x4dfc <defaulty+0x114>
    4e00:	8c 01       	movw	r16, r24
    4e02:	1e 87       	std	Y+14, r17	; 0x0e
    4e04:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	servo_2(0);
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <servo_2>
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	a6 e9       	ldi	r26, 0x96	; 150
    4e12:	b3 e4       	ldi	r27, 0x43	; 67
    4e14:	8f 87       	std	Y+15, r24	; 0x0f
    4e16:	98 8b       	std	Y+16, r25	; 0x10
    4e18:	a9 8b       	std	Y+17, r26	; 0x11
    4e1a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4e1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e1e:	78 89       	ldd	r23, Y+16	; 0x10
    4e20:	89 89       	ldd	r24, Y+17	; 0x11
    4e22:	9a 89       	ldd	r25, Y+18	; 0x12
    4e24:	26 e6       	ldi	r18, 0x66	; 102
    4e26:	36 e6       	ldi	r19, 0x66	; 102
    4e28:	46 e6       	ldi	r20, 0x66	; 102
    4e2a:	55 e4       	ldi	r21, 0x45	; 69
    4e2c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	8b 8b       	std	Y+19, r24	; 0x13
    4e36:	9c 8b       	std	Y+20, r25	; 0x14
    4e38:	ad 8b       	std	Y+21, r26	; 0x15
    4e3a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4e3c:	11 e0       	ldi	r17, 0x01	; 1
    4e3e:	6b 89       	ldd	r22, Y+19	; 0x13
    4e40:	7c 89       	ldd	r23, Y+20	; 0x14
    4e42:	8d 89       	ldd	r24, Y+21	; 0x15
    4e44:	9e 89       	ldd	r25, Y+22	; 0x16
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e8       	ldi	r20, 0x80	; 128
    4e4c:	5f e3       	ldi	r21, 0x3F	; 63
    4e4e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4e52:	88 23       	and	r24, r24
    4e54:	0c f0       	brlt	.+2      	; 0x4e58 <defaulty+0x170>
    4e56:	10 e0       	ldi	r17, 0x00	; 0
    4e58:	11 23       	and	r17, r17
    4e5a:	29 f0       	breq	.+10     	; 0x4e66 <defaulty+0x17e>
		__ticks = 1;
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	98 8f       	std	Y+24, r25	; 0x18
    4e62:	8f 8b       	std	Y+23, r24	; 0x17
    4e64:	46 c0       	rjmp	.+140    	; 0x4ef2 <defaulty+0x20a>
	else if (__tmp > 65535)
    4e66:	11 e0       	ldi	r17, 0x01	; 1
    4e68:	6b 89       	ldd	r22, Y+19	; 0x13
    4e6a:	7c 89       	ldd	r23, Y+20	; 0x14
    4e6c:	8d 89       	ldd	r24, Y+21	; 0x15
    4e6e:	9e 89       	ldd	r25, Y+22	; 0x16
    4e70:	20 e0       	ldi	r18, 0x00	; 0
    4e72:	3f ef       	ldi	r19, 0xFF	; 255
    4e74:	4f e7       	ldi	r20, 0x7F	; 127
    4e76:	57 e4       	ldi	r21, 0x47	; 71
    4e78:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4e7c:	18 16       	cp	r1, r24
    4e7e:	0c f0       	brlt	.+2      	; 0x4e82 <defaulty+0x19a>
    4e80:	10 e0       	ldi	r17, 0x00	; 0
    4e82:	11 23       	and	r17, r17
    4e84:	61 f1       	breq	.+88     	; 0x4ede <defaulty+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e86:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e88:	78 89       	ldd	r23, Y+16	; 0x10
    4e8a:	89 89       	ldd	r24, Y+17	; 0x11
    4e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	40 e2       	ldi	r20, 0x20	; 32
    4e94:	51 e4       	ldi	r21, 0x41	; 65
    4e96:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	98 8f       	std	Y+24, r25	; 0x18
    4eac:	8f 8b       	std	Y+23, r24	; 0x17
    4eae:	12 c0       	rjmp	.+36     	; 0x4ed4 <defaulty+0x1ec>
    4eb0:	80 e7       	ldi	r24, 0x70	; 112
    4eb2:	91 e0       	ldi	r25, 0x01	; 1
    4eb4:	9a 8f       	std	Y+26, r25	; 0x1a
    4eb6:	89 8f       	std	Y+25, r24	; 0x19
    4eb8:	89 8d       	ldd	r24, Y+25	; 0x19
    4eba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ebc:	8c 01       	movw	r16, r24
    4ebe:	c8 01       	movw	r24, r16
    4ec0:	01 97       	sbiw	r24, 0x01	; 1
    4ec2:	f1 f7       	brne	.-4      	; 0x4ec0 <defaulty+0x1d8>
    4ec4:	8c 01       	movw	r16, r24
    4ec6:	1a 8f       	std	Y+26, r17	; 0x1a
    4ec8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eca:	8f 89       	ldd	r24, Y+23	; 0x17
    4ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	98 8f       	std	Y+24, r25	; 0x18
    4ed2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ed8:	00 97       	sbiw	r24, 0x00	; 0
    4eda:	51 f7       	brne	.-44     	; 0x4eb0 <defaulty+0x1c8>
    4edc:	17 c0       	rjmp	.+46     	; 0x4f0c <defaulty+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ede:	6b 89       	ldd	r22, Y+19	; 0x13
    4ee0:	7c 89       	ldd	r23, Y+20	; 0x14
    4ee2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ee4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ee6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	98 8f       	std	Y+24, r25	; 0x18
    4ef0:	8f 8b       	std	Y+23, r24	; 0x17
    4ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ef6:	9c 8f       	std	Y+28, r25	; 0x1c
    4ef8:	8b 8f       	std	Y+27, r24	; 0x1b
    4efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4efe:	8c 01       	movw	r16, r24
    4f00:	c8 01       	movw	r24, r16
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	f1 f7       	brne	.-4      	; 0x4f02 <defaulty+0x21a>
    4f06:	8c 01       	movw	r16, r24
    4f08:	1c 8f       	std	Y+28, r17	; 0x1c
    4f0a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
}
    4f0c:	6c 96       	adiw	r28, 0x1c	; 28
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	df 91       	pop	r29
    4f1a:	cf 91       	pop	r28
    4f1c:	1f 91       	pop	r17
    4f1e:	0f 91       	pop	r16
    4f20:	08 95       	ret

00004f22 <left_cycle>:
void left_cycle()
{
    4f22:	0f 93       	push	r16
    4f24:	1f 93       	push	r17
    4f26:	cf 93       	push	r28
    4f28:	df 93       	push	r29
    4f2a:	cd b7       	in	r28, 0x3d	; 61
    4f2c:	de b7       	in	r29, 0x3e	; 62
    4f2e:	c6 54       	subi	r28, 0x46	; 70
    4f30:	d0 40       	sbci	r29, 0x00	; 0
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
	
	gripper_open();
    4f3c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <gripper_open>
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	a6 e9       	ldi	r26, 0x96	; 150
    4f46:	b3 e4       	ldi	r27, 0x43	; 67
    4f48:	89 83       	std	Y+1, r24	; 0x01
    4f4a:	9a 83       	std	Y+2, r25	; 0x02
    4f4c:	ab 83       	std	Y+3, r26	; 0x03
    4f4e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4f50:	69 81       	ldd	r22, Y+1	; 0x01
    4f52:	7a 81       	ldd	r23, Y+2	; 0x02
    4f54:	8b 81       	ldd	r24, Y+3	; 0x03
    4f56:	9c 81       	ldd	r25, Y+4	; 0x04
    4f58:	26 e6       	ldi	r18, 0x66	; 102
    4f5a:	36 e6       	ldi	r19, 0x66	; 102
    4f5c:	46 e6       	ldi	r20, 0x66	; 102
    4f5e:	55 e4       	ldi	r21, 0x45	; 69
    4f60:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	8d 83       	std	Y+5, r24	; 0x05
    4f6a:	9e 83       	std	Y+6, r25	; 0x06
    4f6c:	af 83       	std	Y+7, r26	; 0x07
    4f6e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4f70:	11 e0       	ldi	r17, 0x01	; 1
    4f72:	6d 81       	ldd	r22, Y+5	; 0x05
    4f74:	7e 81       	ldd	r23, Y+6	; 0x06
    4f76:	8f 81       	ldd	r24, Y+7	; 0x07
    4f78:	98 85       	ldd	r25, Y+8	; 0x08
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e8       	ldi	r20, 0x80	; 128
    4f80:	5f e3       	ldi	r21, 0x3F	; 63
    4f82:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    4f86:	88 23       	and	r24, r24
    4f88:	0c f0       	brlt	.+2      	; 0x4f8c <left_cycle+0x6a>
    4f8a:	10 e0       	ldi	r17, 0x00	; 0
    4f8c:	11 23       	and	r17, r17
    4f8e:	29 f0       	breq	.+10     	; 0x4f9a <left_cycle+0x78>
		__ticks = 1;
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9a 87       	std	Y+10, r25	; 0x0a
    4f96:	89 87       	std	Y+9, r24	; 0x09
    4f98:	46 c0       	rjmp	.+140    	; 0x5026 <left_cycle+0x104>
	else if (__tmp > 65535)
    4f9a:	11 e0       	ldi	r17, 0x01	; 1
    4f9c:	6d 81       	ldd	r22, Y+5	; 0x05
    4f9e:	7e 81       	ldd	r23, Y+6	; 0x06
    4fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    4fa2:	98 85       	ldd	r25, Y+8	; 0x08
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	3f ef       	ldi	r19, 0xFF	; 255
    4fa8:	4f e7       	ldi	r20, 0x7F	; 127
    4faa:	57 e4       	ldi	r21, 0x47	; 71
    4fac:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    4fb0:	18 16       	cp	r1, r24
    4fb2:	0c f0       	brlt	.+2      	; 0x4fb6 <left_cycle+0x94>
    4fb4:	10 e0       	ldi	r17, 0x00	; 0
    4fb6:	11 23       	and	r17, r17
    4fb8:	61 f1       	breq	.+88     	; 0x5012 <left_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fba:	69 81       	ldd	r22, Y+1	; 0x01
    4fbc:	7a 81       	ldd	r23, Y+2	; 0x02
    4fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	40 e2       	ldi	r20, 0x20	; 32
    4fc8:	51 e4       	ldi	r21, 0x41	; 65
    4fca:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    4fce:	dc 01       	movw	r26, r24
    4fd0:	cb 01       	movw	r24, r22
    4fd2:	bc 01       	movw	r22, r24
    4fd4:	cd 01       	movw	r24, r26
    4fd6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    4fda:	dc 01       	movw	r26, r24
    4fdc:	cb 01       	movw	r24, r22
    4fde:	9a 87       	std	Y+10, r25	; 0x0a
    4fe0:	89 87       	std	Y+9, r24	; 0x09
    4fe2:	12 c0       	rjmp	.+36     	; 0x5008 <left_cycle+0xe6>
    4fe4:	80 e7       	ldi	r24, 0x70	; 112
    4fe6:	91 e0       	ldi	r25, 0x01	; 1
    4fe8:	9c 87       	std	Y+12, r25	; 0x0c
    4fea:	8b 87       	std	Y+11, r24	; 0x0b
    4fec:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fee:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ff0:	8c 01       	movw	r16, r24
    4ff2:	c8 01       	movw	r24, r16
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	f1 f7       	brne	.-4      	; 0x4ff4 <left_cycle+0xd2>
    4ff8:	8c 01       	movw	r16, r24
    4ffa:	1c 87       	std	Y+12, r17	; 0x0c
    4ffc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ffe:	89 85       	ldd	r24, Y+9	; 0x09
    5000:	9a 85       	ldd	r25, Y+10	; 0x0a
    5002:	01 97       	sbiw	r24, 0x01	; 1
    5004:	9a 87       	std	Y+10, r25	; 0x0a
    5006:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5008:	89 85       	ldd	r24, Y+9	; 0x09
    500a:	9a 85       	ldd	r25, Y+10	; 0x0a
    500c:	00 97       	sbiw	r24, 0x00	; 0
    500e:	51 f7       	brne	.-44     	; 0x4fe4 <left_cycle+0xc2>
    5010:	17 c0       	rjmp	.+46     	; 0x5040 <left_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5012:	6d 81       	ldd	r22, Y+5	; 0x05
    5014:	7e 81       	ldd	r23, Y+6	; 0x06
    5016:	8f 81       	ldd	r24, Y+7	; 0x07
    5018:	98 85       	ldd	r25, Y+8	; 0x08
    501a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	9a 87       	std	Y+10, r25	; 0x0a
    5024:	89 87       	std	Y+9, r24	; 0x09
    5026:	89 85       	ldd	r24, Y+9	; 0x09
    5028:	9a 85       	ldd	r25, Y+10	; 0x0a
    502a:	9e 87       	std	Y+14, r25	; 0x0e
    502c:	8d 87       	std	Y+13, r24	; 0x0d
    502e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5030:	9e 85       	ldd	r25, Y+14	; 0x0e
    5032:	8c 01       	movw	r16, r24
    5034:	f8 01       	movw	r30, r16
    5036:	31 97       	sbiw	r30, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <left_cycle+0x114>
    503a:	8f 01       	movw	r16, r30
    503c:	1e 87       	std	Y+14, r17	; 0x0e
    503e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_left();
    5040:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <arm_rotate_left>
    5044:	80 e0       	ldi	r24, 0x00	; 0
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	a6 e9       	ldi	r26, 0x96	; 150
    504a:	b3 e4       	ldi	r27, 0x43	; 67
    504c:	8f 87       	std	Y+15, r24	; 0x0f
    504e:	98 8b       	std	Y+16, r25	; 0x10
    5050:	a9 8b       	std	Y+17, r26	; 0x11
    5052:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5054:	6f 85       	ldd	r22, Y+15	; 0x0f
    5056:	78 89       	ldd	r23, Y+16	; 0x10
    5058:	89 89       	ldd	r24, Y+17	; 0x11
    505a:	9a 89       	ldd	r25, Y+18	; 0x12
    505c:	26 e6       	ldi	r18, 0x66	; 102
    505e:	36 e6       	ldi	r19, 0x66	; 102
    5060:	46 e6       	ldi	r20, 0x66	; 102
    5062:	55 e4       	ldi	r21, 0x45	; 69
    5064:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5068:	dc 01       	movw	r26, r24
    506a:	cb 01       	movw	r24, r22
    506c:	8b 8b       	std	Y+19, r24	; 0x13
    506e:	9c 8b       	std	Y+20, r25	; 0x14
    5070:	ad 8b       	std	Y+21, r26	; 0x15
    5072:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5074:	11 e0       	ldi	r17, 0x01	; 1
    5076:	6b 89       	ldd	r22, Y+19	; 0x13
    5078:	7c 89       	ldd	r23, Y+20	; 0x14
    507a:	8d 89       	ldd	r24, Y+21	; 0x15
    507c:	9e 89       	ldd	r25, Y+22	; 0x16
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	40 e8       	ldi	r20, 0x80	; 128
    5084:	5f e3       	ldi	r21, 0x3F	; 63
    5086:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    508a:	88 23       	and	r24, r24
    508c:	0c f0       	brlt	.+2      	; 0x5090 <left_cycle+0x16e>
    508e:	10 e0       	ldi	r17, 0x00	; 0
    5090:	11 23       	and	r17, r17
    5092:	29 f0       	breq	.+10     	; 0x509e <left_cycle+0x17c>
		__ticks = 1;
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	98 8f       	std	Y+24, r25	; 0x18
    509a:	8f 8b       	std	Y+23, r24	; 0x17
    509c:	46 c0       	rjmp	.+140    	; 0x512a <left_cycle+0x208>
	else if (__tmp > 65535)
    509e:	11 e0       	ldi	r17, 0x01	; 1
    50a0:	6b 89       	ldd	r22, Y+19	; 0x13
    50a2:	7c 89       	ldd	r23, Y+20	; 0x14
    50a4:	8d 89       	ldd	r24, Y+21	; 0x15
    50a6:	9e 89       	ldd	r25, Y+22	; 0x16
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	3f ef       	ldi	r19, 0xFF	; 255
    50ac:	4f e7       	ldi	r20, 0x7F	; 127
    50ae:	57 e4       	ldi	r21, 0x47	; 71
    50b0:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    50b4:	18 16       	cp	r1, r24
    50b6:	0c f0       	brlt	.+2      	; 0x50ba <left_cycle+0x198>
    50b8:	10 e0       	ldi	r17, 0x00	; 0
    50ba:	11 23       	and	r17, r17
    50bc:	61 f1       	breq	.+88     	; 0x5116 <left_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50be:	6f 85       	ldd	r22, Y+15	; 0x0f
    50c0:	78 89       	ldd	r23, Y+16	; 0x10
    50c2:	89 89       	ldd	r24, Y+17	; 0x11
    50c4:	9a 89       	ldd	r25, Y+18	; 0x12
    50c6:	20 e0       	ldi	r18, 0x00	; 0
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	40 e2       	ldi	r20, 0x20	; 32
    50cc:	51 e4       	ldi	r21, 0x41	; 65
    50ce:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    50d2:	dc 01       	movw	r26, r24
    50d4:	cb 01       	movw	r24, r22
    50d6:	bc 01       	movw	r22, r24
    50d8:	cd 01       	movw	r24, r26
    50da:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    50de:	dc 01       	movw	r26, r24
    50e0:	cb 01       	movw	r24, r22
    50e2:	98 8f       	std	Y+24, r25	; 0x18
    50e4:	8f 8b       	std	Y+23, r24	; 0x17
    50e6:	12 c0       	rjmp	.+36     	; 0x510c <left_cycle+0x1ea>
    50e8:	80 e7       	ldi	r24, 0x70	; 112
    50ea:	91 e0       	ldi	r25, 0x01	; 1
    50ec:	9a 8f       	std	Y+26, r25	; 0x1a
    50ee:	89 8f       	std	Y+25, r24	; 0x19
    50f0:	89 8d       	ldd	r24, Y+25	; 0x19
    50f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    50f4:	8c 01       	movw	r16, r24
    50f6:	c8 01       	movw	r24, r16
    50f8:	01 97       	sbiw	r24, 0x01	; 1
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <left_cycle+0x1d6>
    50fc:	8c 01       	movw	r16, r24
    50fe:	1a 8f       	std	Y+26, r17	; 0x1a
    5100:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5102:	8f 89       	ldd	r24, Y+23	; 0x17
    5104:	98 8d       	ldd	r25, Y+24	; 0x18
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	98 8f       	std	Y+24, r25	; 0x18
    510a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510c:	8f 89       	ldd	r24, Y+23	; 0x17
    510e:	98 8d       	ldd	r25, Y+24	; 0x18
    5110:	00 97       	sbiw	r24, 0x00	; 0
    5112:	51 f7       	brne	.-44     	; 0x50e8 <left_cycle+0x1c6>
    5114:	17 c0       	rjmp	.+46     	; 0x5144 <left_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5116:	6b 89       	ldd	r22, Y+19	; 0x13
    5118:	7c 89       	ldd	r23, Y+20	; 0x14
    511a:	8d 89       	ldd	r24, Y+21	; 0x15
    511c:	9e 89       	ldd	r25, Y+22	; 0x16
    511e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5122:	dc 01       	movw	r26, r24
    5124:	cb 01       	movw	r24, r22
    5126:	98 8f       	std	Y+24, r25	; 0x18
    5128:	8f 8b       	std	Y+23, r24	; 0x17
    512a:	8f 89       	ldd	r24, Y+23	; 0x17
    512c:	98 8d       	ldd	r25, Y+24	; 0x18
    512e:	9c 8f       	std	Y+28, r25	; 0x1c
    5130:	8b 8f       	std	Y+27, r24	; 0x1b
    5132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5136:	8c 01       	movw	r16, r24
    5138:	f8 01       	movw	r30, r16
    513a:	31 97       	sbiw	r30, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <left_cycle+0x218>
    513e:	8f 01       	movw	r16, r30
    5140:	1c 8f       	std	Y+28, r17	; 0x1c
    5142:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    5144:	0e 94 76 22 	call	0x44ec	; 0x44ec <arm_forward>
    5148:	80 e0       	ldi	r24, 0x00	; 0
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	a6 e9       	ldi	r26, 0x96	; 150
    514e:	b3 e4       	ldi	r27, 0x43	; 67
    5150:	8d 8f       	std	Y+29, r24	; 0x1d
    5152:	9e 8f       	std	Y+30, r25	; 0x1e
    5154:	af 8f       	std	Y+31, r26	; 0x1f
    5156:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5158:	6d 8d       	ldd	r22, Y+29	; 0x1d
    515a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    515c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    515e:	98 a1       	lds	r25, 0x48
    5160:	26 e6       	ldi	r18, 0x66	; 102
    5162:	36 e6       	ldi	r19, 0x66	; 102
    5164:	46 e6       	ldi	r20, 0x66	; 102
    5166:	55 e4       	ldi	r21, 0x45	; 69
    5168:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	89 a3       	lds	r24, 0x59
    5172:	9a a3       	lds	r25, 0x5a
    5174:	ab a3       	lds	r26, 0x5b
    5176:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5178:	11 e0       	ldi	r17, 0x01	; 1
    517a:	69 a1       	lds	r22, 0x49
    517c:	7a a1       	lds	r23, 0x4a
    517e:	8b a1       	lds	r24, 0x4b
    5180:	9c a1       	lds	r25, 0x4c
    5182:	20 e0       	ldi	r18, 0x00	; 0
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	40 e8       	ldi	r20, 0x80	; 128
    5188:	5f e3       	ldi	r21, 0x3F	; 63
    518a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    518e:	88 23       	and	r24, r24
    5190:	0c f0       	brlt	.+2      	; 0x5194 <left_cycle+0x272>
    5192:	10 e0       	ldi	r17, 0x00	; 0
    5194:	11 23       	and	r17, r17
    5196:	29 f0       	breq	.+10     	; 0x51a2 <left_cycle+0x280>
		__ticks = 1;
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	9e a3       	lds	r25, 0x5e
    519e:	8d a3       	lds	r24, 0x5d
    51a0:	46 c0       	rjmp	.+140    	; 0x522e <left_cycle+0x30c>
	else if (__tmp > 65535)
    51a2:	11 e0       	ldi	r17, 0x01	; 1
    51a4:	69 a1       	lds	r22, 0x49
    51a6:	7a a1       	lds	r23, 0x4a
    51a8:	8b a1       	lds	r24, 0x4b
    51aa:	9c a1       	lds	r25, 0x4c
    51ac:	20 e0       	ldi	r18, 0x00	; 0
    51ae:	3f ef       	ldi	r19, 0xFF	; 255
    51b0:	4f e7       	ldi	r20, 0x7F	; 127
    51b2:	57 e4       	ldi	r21, 0x47	; 71
    51b4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    51b8:	18 16       	cp	r1, r24
    51ba:	0c f0       	brlt	.+2      	; 0x51be <left_cycle+0x29c>
    51bc:	10 e0       	ldi	r17, 0x00	; 0
    51be:	11 23       	and	r17, r17
    51c0:	61 f1       	breq	.+88     	; 0x521a <left_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    51c4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    51c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51c8:	98 a1       	lds	r25, 0x48
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	40 e2       	ldi	r20, 0x20	; 32
    51d0:	51 e4       	ldi	r21, 0x41	; 65
    51d2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	bc 01       	movw	r22, r24
    51dc:	cd 01       	movw	r24, r26
    51de:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    51e2:	dc 01       	movw	r26, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	9e a3       	lds	r25, 0x5e
    51e8:	8d a3       	lds	r24, 0x5d
    51ea:	12 c0       	rjmp	.+36     	; 0x5210 <left_cycle+0x2ee>
    51ec:	80 e7       	ldi	r24, 0x70	; 112
    51ee:	91 e0       	ldi	r25, 0x01	; 1
    51f0:	98 a7       	lds	r25, 0x78
    51f2:	8f a3       	lds	r24, 0x5f
    51f4:	8f a1       	lds	r24, 0x4f
    51f6:	98 a5       	lds	r25, 0x68
    51f8:	8c 01       	movw	r16, r24
    51fa:	c8 01       	movw	r24, r16
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <left_cycle+0x2da>
    5200:	8c 01       	movw	r16, r24
    5202:	18 a7       	lds	r17, 0x78
    5204:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5206:	8d a1       	lds	r24, 0x4d
    5208:	9e a1       	lds	r25, 0x4e
    520a:	01 97       	sbiw	r24, 0x01	; 1
    520c:	9e a3       	lds	r25, 0x5e
    520e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5210:	8d a1       	lds	r24, 0x4d
    5212:	9e a1       	lds	r25, 0x4e
    5214:	00 97       	sbiw	r24, 0x00	; 0
    5216:	51 f7       	brne	.-44     	; 0x51ec <left_cycle+0x2ca>
    5218:	17 c0       	rjmp	.+46     	; 0x5248 <left_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    521a:	69 a1       	lds	r22, 0x49
    521c:	7a a1       	lds	r23, 0x4a
    521e:	8b a1       	lds	r24, 0x4b
    5220:	9c a1       	lds	r25, 0x4c
    5222:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	9e a3       	lds	r25, 0x5e
    522c:	8d a3       	lds	r24, 0x5d
    522e:	8d a1       	lds	r24, 0x4d
    5230:	9e a1       	lds	r25, 0x4e
    5232:	9a a7       	lds	r25, 0x7a
    5234:	89 a7       	lds	r24, 0x79
    5236:	89 a5       	lds	r24, 0x69
    5238:	9a a5       	lds	r25, 0x6a
    523a:	8c 01       	movw	r16, r24
    523c:	f8 01       	movw	r30, r16
    523e:	31 97       	sbiw	r30, 0x01	; 1
    5240:	f1 f7       	brne	.-4      	; 0x523e <left_cycle+0x31c>
    5242:	8f 01       	movw	r16, r30
    5244:	1a a7       	lds	r17, 0x7a
    5246:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    5248:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <gripper_close>
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	a6 e9       	ldi	r26, 0x96	; 150
    5252:	b3 e4       	ldi	r27, 0x43	; 67
    5254:	8b a7       	lds	r24, 0x7b
    5256:	9c a7       	lds	r25, 0x7c
    5258:	ad a7       	lds	r26, 0x7d
    525a:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    525c:	6b a5       	lds	r22, 0x6b
    525e:	7c a5       	lds	r23, 0x6c
    5260:	8d a5       	lds	r24, 0x6d
    5262:	9e a5       	lds	r25, 0x6e
    5264:	26 e6       	ldi	r18, 0x66	; 102
    5266:	36 e6       	ldi	r19, 0x66	; 102
    5268:	46 e6       	ldi	r20, 0x66	; 102
    526a:	55 e4       	ldi	r21, 0x45	; 69
    526c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5270:	dc 01       	movw	r26, r24
    5272:	cb 01       	movw	r24, r22
    5274:	8f a7       	lds	r24, 0x7f
    5276:	98 ab       	sts	0x58, r25
    5278:	a9 ab       	sts	0x59, r26
    527a:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    527c:	11 e0       	ldi	r17, 0x01	; 1
    527e:	6f a5       	lds	r22, 0x6f
    5280:	78 a9       	sts	0x48, r23
    5282:	89 a9       	sts	0x49, r24
    5284:	9a a9       	sts	0x4a, r25
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e8       	ldi	r20, 0x80	; 128
    528c:	5f e3       	ldi	r21, 0x3F	; 63
    528e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5292:	88 23       	and	r24, r24
    5294:	0c f0       	brlt	.+2      	; 0x5298 <left_cycle+0x376>
    5296:	10 e0       	ldi	r17, 0x00	; 0
    5298:	11 23       	and	r17, r17
    529a:	29 f0       	breq	.+10     	; 0x52a6 <left_cycle+0x384>
		__ticks = 1;
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	9c ab       	sts	0x5c, r25
    52a2:	8b ab       	sts	0x5b, r24
    52a4:	46 c0       	rjmp	.+140    	; 0x5332 <left_cycle+0x410>
	else if (__tmp > 65535)
    52a6:	11 e0       	ldi	r17, 0x01	; 1
    52a8:	6f a5       	lds	r22, 0x6f
    52aa:	78 a9       	sts	0x48, r23
    52ac:	89 a9       	sts	0x49, r24
    52ae:	9a a9       	sts	0x4a, r25
    52b0:	20 e0       	ldi	r18, 0x00	; 0
    52b2:	3f ef       	ldi	r19, 0xFF	; 255
    52b4:	4f e7       	ldi	r20, 0x7F	; 127
    52b6:	57 e4       	ldi	r21, 0x47	; 71
    52b8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    52bc:	18 16       	cp	r1, r24
    52be:	0c f0       	brlt	.+2      	; 0x52c2 <left_cycle+0x3a0>
    52c0:	10 e0       	ldi	r17, 0x00	; 0
    52c2:	11 23       	and	r17, r17
    52c4:	61 f1       	breq	.+88     	; 0x531e <left_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c6:	6b a5       	lds	r22, 0x6b
    52c8:	7c a5       	lds	r23, 0x6c
    52ca:	8d a5       	lds	r24, 0x6d
    52cc:	9e a5       	lds	r25, 0x6e
    52ce:	20 e0       	ldi	r18, 0x00	; 0
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	40 e2       	ldi	r20, 0x20	; 32
    52d4:	51 e4       	ldi	r21, 0x41	; 65
    52d6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	bc 01       	movw	r22, r24
    52e0:	cd 01       	movw	r24, r26
    52e2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	9c ab       	sts	0x5c, r25
    52ec:	8b ab       	sts	0x5b, r24
    52ee:	12 c0       	rjmp	.+36     	; 0x5314 <left_cycle+0x3f2>
    52f0:	80 e7       	ldi	r24, 0x70	; 112
    52f2:	91 e0       	ldi	r25, 0x01	; 1
    52f4:	9e ab       	sts	0x5e, r25
    52f6:	8d ab       	sts	0x5d, r24
    52f8:	8d a9       	sts	0x4d, r24
    52fa:	9e a9       	sts	0x4e, r25
    52fc:	8c 01       	movw	r16, r24
    52fe:	c8 01       	movw	r24, r16
    5300:	01 97       	sbiw	r24, 0x01	; 1
    5302:	f1 f7       	brne	.-4      	; 0x5300 <left_cycle+0x3de>
    5304:	8c 01       	movw	r16, r24
    5306:	1e ab       	sts	0x5e, r17
    5308:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    530a:	8b a9       	sts	0x4b, r24
    530c:	9c a9       	sts	0x4c, r25
    530e:	01 97       	sbiw	r24, 0x01	; 1
    5310:	9c ab       	sts	0x5c, r25
    5312:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5314:	8b a9       	sts	0x4b, r24
    5316:	9c a9       	sts	0x4c, r25
    5318:	00 97       	sbiw	r24, 0x00	; 0
    531a:	51 f7       	brne	.-44     	; 0x52f0 <left_cycle+0x3ce>
    531c:	17 c0       	rjmp	.+46     	; 0x534c <left_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    531e:	6f a5       	lds	r22, 0x6f
    5320:	78 a9       	sts	0x48, r23
    5322:	89 a9       	sts	0x49, r24
    5324:	9a a9       	sts	0x4a, r25
    5326:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    532a:	dc 01       	movw	r26, r24
    532c:	cb 01       	movw	r24, r22
    532e:	9c ab       	sts	0x5c, r25
    5330:	8b ab       	sts	0x5b, r24
    5332:	8b a9       	sts	0x4b, r24
    5334:	9c a9       	sts	0x4c, r25
    5336:	98 af       	sts	0x78, r25
    5338:	8f ab       	sts	0x5f, r24
    533a:	8f a9       	sts	0x4f, r24
    533c:	98 ad       	sts	0x68, r25
    533e:	8c 01       	movw	r16, r24
    5340:	f8 01       	movw	r30, r16
    5342:	31 97       	sbiw	r30, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <left_cycle+0x420>
    5346:	8f 01       	movw	r16, r30
    5348:	18 af       	sts	0x78, r17
    534a:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    534c:	0e 94 9e 23 	call	0x473c	; 0x473c <arm_backward>
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	a6 e9       	ldi	r26, 0x96	; 150
    5356:	b3 e4       	ldi	r27, 0x43	; 67
    5358:	89 af       	sts	0x79, r24
    535a:	9a af       	sts	0x7a, r25
    535c:	ab af       	sts	0x7b, r26
    535e:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5360:	69 ad       	sts	0x69, r22
    5362:	7a ad       	sts	0x6a, r23
    5364:	8b ad       	sts	0x6b, r24
    5366:	9c ad       	sts	0x6c, r25
    5368:	26 e6       	ldi	r18, 0x66	; 102
    536a:	36 e6       	ldi	r19, 0x66	; 102
    536c:	46 e6       	ldi	r20, 0x66	; 102
    536e:	55 e4       	ldi	r21, 0x45	; 69
    5370:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	9e 01       	movw	r18, r28
    537a:	23 5c       	subi	r18, 0xC3	; 195
    537c:	3f 4f       	sbci	r19, 0xFF	; 255
    537e:	f9 01       	movw	r30, r18
    5380:	80 83       	st	Z, r24
    5382:	91 83       	std	Z+1, r25	; 0x01
    5384:	a2 83       	std	Z+2, r26	; 0x02
    5386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5388:	11 e0       	ldi	r17, 0x01	; 1
    538a:	ce 01       	movw	r24, r28
    538c:	cd 96       	adiw	r24, 0x3d	; 61
    538e:	fc 01       	movw	r30, r24
    5390:	60 81       	ld	r22, Z
    5392:	71 81       	ldd	r23, Z+1	; 0x01
    5394:	82 81       	ldd	r24, Z+2	; 0x02
    5396:	93 81       	ldd	r25, Z+3	; 0x03
    5398:	20 e0       	ldi	r18, 0x00	; 0
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	40 e8       	ldi	r20, 0x80	; 128
    539e:	5f e3       	ldi	r21, 0x3F	; 63
    53a0:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    53a4:	88 23       	and	r24, r24
    53a6:	0c f0       	brlt	.+2      	; 0x53aa <left_cycle+0x488>
    53a8:	10 e0       	ldi	r17, 0x00	; 0
    53aa:	11 23       	and	r17, r17
    53ac:	49 f0       	breq	.+18     	; 0x53c0 <left_cycle+0x49e>
		__ticks = 1;
    53ae:	ce 01       	movw	r24, r28
    53b0:	8f 5b       	subi	r24, 0xBF	; 191
    53b2:	9f 4f       	sbci	r25, 0xFF	; 255
    53b4:	21 e0       	ldi	r18, 0x01	; 1
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	fc 01       	movw	r30, r24
    53ba:	31 83       	std	Z+1, r19	; 0x01
    53bc:	20 83       	st	Z, r18
    53be:	6e c0       	rjmp	.+220    	; 0x549c <left_cycle+0x57a>
	else if (__tmp > 65535)
    53c0:	11 e0       	ldi	r17, 0x01	; 1
    53c2:	ce 01       	movw	r24, r28
    53c4:	cd 96       	adiw	r24, 0x3d	; 61
    53c6:	fc 01       	movw	r30, r24
    53c8:	60 81       	ld	r22, Z
    53ca:	71 81       	ldd	r23, Z+1	; 0x01
    53cc:	82 81       	ldd	r24, Z+2	; 0x02
    53ce:	93 81       	ldd	r25, Z+3	; 0x03
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	3f ef       	ldi	r19, 0xFF	; 255
    53d4:	4f e7       	ldi	r20, 0x7F	; 127
    53d6:	57 e4       	ldi	r21, 0x47	; 71
    53d8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    53dc:	18 16       	cp	r1, r24
    53de:	0c f0       	brlt	.+2      	; 0x53e2 <left_cycle+0x4c0>
    53e0:	10 e0       	ldi	r17, 0x00	; 0
    53e2:	11 23       	and	r17, r17
    53e4:	09 f4       	brne	.+2      	; 0x53e8 <left_cycle+0x4c6>
    53e6:	49 c0       	rjmp	.+146    	; 0x547a <left_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53e8:	69 ad       	sts	0x69, r22
    53ea:	7a ad       	sts	0x6a, r23
    53ec:	8b ad       	sts	0x6b, r24
    53ee:	9c ad       	sts	0x6c, r25
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	40 e2       	ldi	r20, 0x20	; 32
    53f6:	51 e4       	ldi	r21, 0x41	; 65
    53f8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	8e 01       	movw	r16, r28
    5402:	0f 5b       	subi	r16, 0xBF	; 191
    5404:	1f 4f       	sbci	r17, 0xFF	; 255
    5406:	bc 01       	movw	r22, r24
    5408:	cd 01       	movw	r24, r26
    540a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	f8 01       	movw	r30, r16
    5414:	91 83       	std	Z+1, r25	; 0x01
    5416:	80 83       	st	Z, r24
    5418:	27 c0       	rjmp	.+78     	; 0x5468 <left_cycle+0x546>
    541a:	ce 01       	movw	r24, r28
    541c:	8d 5b       	subi	r24, 0xBD	; 189
    541e:	9f 4f       	sbci	r25, 0xFF	; 255
    5420:	20 e7       	ldi	r18, 0x70	; 112
    5422:	31 e0       	ldi	r19, 0x01	; 1
    5424:	fc 01       	movw	r30, r24
    5426:	31 83       	std	Z+1, r19	; 0x01
    5428:	20 83       	st	Z, r18
    542a:	ce 01       	movw	r24, r28
    542c:	8d 5b       	subi	r24, 0xBD	; 189
    542e:	9f 4f       	sbci	r25, 0xFF	; 255
    5430:	fc 01       	movw	r30, r24
    5432:	80 81       	ld	r24, Z
    5434:	91 81       	ldd	r25, Z+1	; 0x01
    5436:	8c 01       	movw	r16, r24
    5438:	c8 01       	movw	r24, r16
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <left_cycle+0x518>
    543e:	8c 01       	movw	r16, r24
    5440:	ce 01       	movw	r24, r28
    5442:	8d 5b       	subi	r24, 0xBD	; 189
    5444:	9f 4f       	sbci	r25, 0xFF	; 255
    5446:	fc 01       	movw	r30, r24
    5448:	11 83       	std	Z+1, r17	; 0x01
    544a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    544c:	ce 01       	movw	r24, r28
    544e:	8f 5b       	subi	r24, 0xBF	; 191
    5450:	9f 4f       	sbci	r25, 0xFF	; 255
    5452:	9e 01       	movw	r18, r28
    5454:	2f 5b       	subi	r18, 0xBF	; 191
    5456:	3f 4f       	sbci	r19, 0xFF	; 255
    5458:	f9 01       	movw	r30, r18
    545a:	20 81       	ld	r18, Z
    545c:	31 81       	ldd	r19, Z+1	; 0x01
    545e:	21 50       	subi	r18, 0x01	; 1
    5460:	30 40       	sbci	r19, 0x00	; 0
    5462:	fc 01       	movw	r30, r24
    5464:	31 83       	std	Z+1, r19	; 0x01
    5466:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5468:	ce 01       	movw	r24, r28
    546a:	8f 5b       	subi	r24, 0xBF	; 191
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	fc 01       	movw	r30, r24
    5470:	80 81       	ld	r24, Z
    5472:	91 81       	ldd	r25, Z+1	; 0x01
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	89 f6       	brne	.-94     	; 0x541a <left_cycle+0x4f8>
    5478:	2e c0       	rjmp	.+92     	; 0x54d6 <left_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547a:	8e 01       	movw	r16, r28
    547c:	0f 5b       	subi	r16, 0xBF	; 191
    547e:	1f 4f       	sbci	r17, 0xFF	; 255
    5480:	ce 01       	movw	r24, r28
    5482:	cd 96       	adiw	r24, 0x3d	; 61
    5484:	fc 01       	movw	r30, r24
    5486:	60 81       	ld	r22, Z
    5488:	71 81       	ldd	r23, Z+1	; 0x01
    548a:	82 81       	ldd	r24, Z+2	; 0x02
    548c:	93 81       	ldd	r25, Z+3	; 0x03
    548e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5492:	dc 01       	movw	r26, r24
    5494:	cb 01       	movw	r24, r22
    5496:	f8 01       	movw	r30, r16
    5498:	91 83       	std	Z+1, r25	; 0x01
    549a:	80 83       	st	Z, r24
    549c:	ce 01       	movw	r24, r28
    549e:	8b 5b       	subi	r24, 0xBB	; 187
    54a0:	9f 4f       	sbci	r25, 0xFF	; 255
    54a2:	9e 01       	movw	r18, r28
    54a4:	2f 5b       	subi	r18, 0xBF	; 191
    54a6:	3f 4f       	sbci	r19, 0xFF	; 255
    54a8:	f9 01       	movw	r30, r18
    54aa:	20 81       	ld	r18, Z
    54ac:	31 81       	ldd	r19, Z+1	; 0x01
    54ae:	fc 01       	movw	r30, r24
    54b0:	31 83       	std	Z+1, r19	; 0x01
    54b2:	20 83       	st	Z, r18
    54b4:	ce 01       	movw	r24, r28
    54b6:	8b 5b       	subi	r24, 0xBB	; 187
    54b8:	9f 4f       	sbci	r25, 0xFF	; 255
    54ba:	fc 01       	movw	r30, r24
    54bc:	80 81       	ld	r24, Z
    54be:	91 81       	ldd	r25, Z+1	; 0x01
    54c0:	8c 01       	movw	r16, r24
    54c2:	c8 01       	movw	r24, r16
    54c4:	01 97       	sbiw	r24, 0x01	; 1
    54c6:	f1 f7       	brne	.-4      	; 0x54c4 <left_cycle+0x5a2>
    54c8:	8c 01       	movw	r16, r24
    54ca:	ce 01       	movw	r24, r28
    54cc:	8b 5b       	subi	r24, 0xBB	; 187
    54ce:	9f 4f       	sbci	r25, 0xFF	; 255
    54d0:	fc 01       	movw	r30, r24
    54d2:	11 83       	std	Z+1, r17	; 0x01
    54d4:	00 83       	st	Z, r16
	_delay_ms(300);

}
    54d6:	ca 5b       	subi	r28, 0xBA	; 186
    54d8:	df 4f       	sbci	r29, 0xFF	; 255
    54da:	0f b6       	in	r0, 0x3f	; 63
    54dc:	f8 94       	cli
    54de:	de bf       	out	0x3e, r29	; 62
    54e0:	0f be       	out	0x3f, r0	; 63
    54e2:	cd bf       	out	0x3d, r28	; 61
    54e4:	df 91       	pop	r29
    54e6:	cf 91       	pop	r28
    54e8:	1f 91       	pop	r17
    54ea:	0f 91       	pop	r16
    54ec:	08 95       	ret

000054ee <right_cycle>:

void right_cycle()
{
    54ee:	0f 93       	push	r16
    54f0:	1f 93       	push	r17
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	cd b7       	in	r28, 0x3d	; 61
    54f8:	de b7       	in	r29, 0x3e	; 62
    54fa:	c6 54       	subi	r28, 0x46	; 70
    54fc:	d0 40       	sbci	r29, 0x00	; 0
    54fe:	0f b6       	in	r0, 0x3f	; 63
    5500:	f8 94       	cli
    5502:	de bf       	out	0x3e, r29	; 62
    5504:	0f be       	out	0x3f, r0	; 63
    5506:	cd bf       	out	0x3d, r28	; 61

	gripper_open();
    5508:	0e 94 ab 1c 	call	0x3956	; 0x3956 <gripper_open>
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	a6 e9       	ldi	r26, 0x96	; 150
    5512:	b3 e4       	ldi	r27, 0x43	; 67
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	9a 83       	std	Y+2, r25	; 0x02
    5518:	ab 83       	std	Y+3, r26	; 0x03
    551a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    551c:	69 81       	ldd	r22, Y+1	; 0x01
    551e:	7a 81       	ldd	r23, Y+2	; 0x02
    5520:	8b 81       	ldd	r24, Y+3	; 0x03
    5522:	9c 81       	ldd	r25, Y+4	; 0x04
    5524:	26 e6       	ldi	r18, 0x66	; 102
    5526:	36 e6       	ldi	r19, 0x66	; 102
    5528:	46 e6       	ldi	r20, 0x66	; 102
    552a:	55 e4       	ldi	r21, 0x45	; 69
    552c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	8d 83       	std	Y+5, r24	; 0x05
    5536:	9e 83       	std	Y+6, r25	; 0x06
    5538:	af 83       	std	Y+7, r26	; 0x07
    553a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    553c:	11 e0       	ldi	r17, 0x01	; 1
    553e:	6d 81       	ldd	r22, Y+5	; 0x05
    5540:	7e 81       	ldd	r23, Y+6	; 0x06
    5542:	8f 81       	ldd	r24, Y+7	; 0x07
    5544:	98 85       	ldd	r25, Y+8	; 0x08
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 e8       	ldi	r20, 0x80	; 128
    554c:	5f e3       	ldi	r21, 0x3F	; 63
    554e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5552:	88 23       	and	r24, r24
    5554:	0c f0       	brlt	.+2      	; 0x5558 <right_cycle+0x6a>
    5556:	10 e0       	ldi	r17, 0x00	; 0
    5558:	11 23       	and	r17, r17
    555a:	29 f0       	breq	.+10     	; 0x5566 <right_cycle+0x78>
		__ticks = 1;
    555c:	81 e0       	ldi	r24, 0x01	; 1
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	9a 87       	std	Y+10, r25	; 0x0a
    5562:	89 87       	std	Y+9, r24	; 0x09
    5564:	46 c0       	rjmp	.+140    	; 0x55f2 <right_cycle+0x104>
	else if (__tmp > 65535)
    5566:	11 e0       	ldi	r17, 0x01	; 1
    5568:	6d 81       	ldd	r22, Y+5	; 0x05
    556a:	7e 81       	ldd	r23, Y+6	; 0x06
    556c:	8f 81       	ldd	r24, Y+7	; 0x07
    556e:	98 85       	ldd	r25, Y+8	; 0x08
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	3f ef       	ldi	r19, 0xFF	; 255
    5574:	4f e7       	ldi	r20, 0x7F	; 127
    5576:	57 e4       	ldi	r21, 0x47	; 71
    5578:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    557c:	18 16       	cp	r1, r24
    557e:	0c f0       	brlt	.+2      	; 0x5582 <right_cycle+0x94>
    5580:	10 e0       	ldi	r17, 0x00	; 0
    5582:	11 23       	and	r17, r17
    5584:	61 f1       	breq	.+88     	; 0x55de <right_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5586:	69 81       	ldd	r22, Y+1	; 0x01
    5588:	7a 81       	ldd	r23, Y+2	; 0x02
    558a:	8b 81       	ldd	r24, Y+3	; 0x03
    558c:	9c 81       	ldd	r25, Y+4	; 0x04
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e2       	ldi	r20, 0x20	; 32
    5594:	51 e4       	ldi	r21, 0x41	; 65
    5596:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	bc 01       	movw	r22, r24
    55a0:	cd 01       	movw	r24, r26
    55a2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    55a6:	dc 01       	movw	r26, r24
    55a8:	cb 01       	movw	r24, r22
    55aa:	9a 87       	std	Y+10, r25	; 0x0a
    55ac:	89 87       	std	Y+9, r24	; 0x09
    55ae:	12 c0       	rjmp	.+36     	; 0x55d4 <right_cycle+0xe6>
    55b0:	80 e7       	ldi	r24, 0x70	; 112
    55b2:	91 e0       	ldi	r25, 0x01	; 1
    55b4:	9c 87       	std	Y+12, r25	; 0x0c
    55b6:	8b 87       	std	Y+11, r24	; 0x0b
    55b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    55bc:	8c 01       	movw	r16, r24
    55be:	c8 01       	movw	r24, r16
    55c0:	01 97       	sbiw	r24, 0x01	; 1
    55c2:	f1 f7       	brne	.-4      	; 0x55c0 <right_cycle+0xd2>
    55c4:	8c 01       	movw	r16, r24
    55c6:	1c 87       	std	Y+12, r17	; 0x0c
    55c8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ca:	89 85       	ldd	r24, Y+9	; 0x09
    55cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ce:	01 97       	sbiw	r24, 0x01	; 1
    55d0:	9a 87       	std	Y+10, r25	; 0x0a
    55d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55d4:	89 85       	ldd	r24, Y+9	; 0x09
    55d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55d8:	00 97       	sbiw	r24, 0x00	; 0
    55da:	51 f7       	brne	.-44     	; 0x55b0 <right_cycle+0xc2>
    55dc:	17 c0       	rjmp	.+46     	; 0x560c <right_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55de:	6d 81       	ldd	r22, Y+5	; 0x05
    55e0:	7e 81       	ldd	r23, Y+6	; 0x06
    55e2:	8f 81       	ldd	r24, Y+7	; 0x07
    55e4:	98 85       	ldd	r25, Y+8	; 0x08
    55e6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	9a 87       	std	Y+10, r25	; 0x0a
    55f0:	89 87       	std	Y+9, r24	; 0x09
    55f2:	89 85       	ldd	r24, Y+9	; 0x09
    55f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f6:	9e 87       	std	Y+14, r25	; 0x0e
    55f8:	8d 87       	std	Y+13, r24	; 0x0d
    55fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    55fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    55fe:	8c 01       	movw	r16, r24
    5600:	f8 01       	movw	r30, r16
    5602:	31 97       	sbiw	r30, 0x01	; 1
    5604:	f1 f7       	brne	.-4      	; 0x5602 <right_cycle+0x114>
    5606:	8f 01       	movw	r16, r30
    5608:	1e 87       	std	Y+14, r17	; 0x0e
    560a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_right();
    560c:	0e 94 25 20 	call	0x404a	; 0x404a <arm_rotate_right>
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	a6 e9       	ldi	r26, 0x96	; 150
    5616:	b3 e4       	ldi	r27, 0x43	; 67
    5618:	8f 87       	std	Y+15, r24	; 0x0f
    561a:	98 8b       	std	Y+16, r25	; 0x10
    561c:	a9 8b       	std	Y+17, r26	; 0x11
    561e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5620:	6f 85       	ldd	r22, Y+15	; 0x0f
    5622:	78 89       	ldd	r23, Y+16	; 0x10
    5624:	89 89       	ldd	r24, Y+17	; 0x11
    5626:	9a 89       	ldd	r25, Y+18	; 0x12
    5628:	26 e6       	ldi	r18, 0x66	; 102
    562a:	36 e6       	ldi	r19, 0x66	; 102
    562c:	46 e6       	ldi	r20, 0x66	; 102
    562e:	55 e4       	ldi	r21, 0x45	; 69
    5630:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	8b 8b       	std	Y+19, r24	; 0x13
    563a:	9c 8b       	std	Y+20, r25	; 0x14
    563c:	ad 8b       	std	Y+21, r26	; 0x15
    563e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5640:	11 e0       	ldi	r17, 0x01	; 1
    5642:	6b 89       	ldd	r22, Y+19	; 0x13
    5644:	7c 89       	ldd	r23, Y+20	; 0x14
    5646:	8d 89       	ldd	r24, Y+21	; 0x15
    5648:	9e 89       	ldd	r25, Y+22	; 0x16
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e8       	ldi	r20, 0x80	; 128
    5650:	5f e3       	ldi	r21, 0x3F	; 63
    5652:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5656:	88 23       	and	r24, r24
    5658:	0c f0       	brlt	.+2      	; 0x565c <right_cycle+0x16e>
    565a:	10 e0       	ldi	r17, 0x00	; 0
    565c:	11 23       	and	r17, r17
    565e:	29 f0       	breq	.+10     	; 0x566a <right_cycle+0x17c>
		__ticks = 1;
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	98 8f       	std	Y+24, r25	; 0x18
    5666:	8f 8b       	std	Y+23, r24	; 0x17
    5668:	46 c0       	rjmp	.+140    	; 0x56f6 <right_cycle+0x208>
	else if (__tmp > 65535)
    566a:	11 e0       	ldi	r17, 0x01	; 1
    566c:	6b 89       	ldd	r22, Y+19	; 0x13
    566e:	7c 89       	ldd	r23, Y+20	; 0x14
    5670:	8d 89       	ldd	r24, Y+21	; 0x15
    5672:	9e 89       	ldd	r25, Y+22	; 0x16
    5674:	20 e0       	ldi	r18, 0x00	; 0
    5676:	3f ef       	ldi	r19, 0xFF	; 255
    5678:	4f e7       	ldi	r20, 0x7F	; 127
    567a:	57 e4       	ldi	r21, 0x47	; 71
    567c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5680:	18 16       	cp	r1, r24
    5682:	0c f0       	brlt	.+2      	; 0x5686 <right_cycle+0x198>
    5684:	10 e0       	ldi	r17, 0x00	; 0
    5686:	11 23       	and	r17, r17
    5688:	61 f1       	breq	.+88     	; 0x56e2 <right_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    568a:	6f 85       	ldd	r22, Y+15	; 0x0f
    568c:	78 89       	ldd	r23, Y+16	; 0x10
    568e:	89 89       	ldd	r24, Y+17	; 0x11
    5690:	9a 89       	ldd	r25, Y+18	; 0x12
    5692:	20 e0       	ldi	r18, 0x00	; 0
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	40 e2       	ldi	r20, 0x20	; 32
    5698:	51 e4       	ldi	r21, 0x41	; 65
    569a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    569e:	dc 01       	movw	r26, r24
    56a0:	cb 01       	movw	r24, r22
    56a2:	bc 01       	movw	r22, r24
    56a4:	cd 01       	movw	r24, r26
    56a6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    56aa:	dc 01       	movw	r26, r24
    56ac:	cb 01       	movw	r24, r22
    56ae:	98 8f       	std	Y+24, r25	; 0x18
    56b0:	8f 8b       	std	Y+23, r24	; 0x17
    56b2:	12 c0       	rjmp	.+36     	; 0x56d8 <right_cycle+0x1ea>
    56b4:	80 e7       	ldi	r24, 0x70	; 112
    56b6:	91 e0       	ldi	r25, 0x01	; 1
    56b8:	9a 8f       	std	Y+26, r25	; 0x1a
    56ba:	89 8f       	std	Y+25, r24	; 0x19
    56bc:	89 8d       	ldd	r24, Y+25	; 0x19
    56be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56c0:	8c 01       	movw	r16, r24
    56c2:	c8 01       	movw	r24, r16
    56c4:	01 97       	sbiw	r24, 0x01	; 1
    56c6:	f1 f7       	brne	.-4      	; 0x56c4 <right_cycle+0x1d6>
    56c8:	8c 01       	movw	r16, r24
    56ca:	1a 8f       	std	Y+26, r17	; 0x1a
    56cc:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ce:	8f 89       	ldd	r24, Y+23	; 0x17
    56d0:	98 8d       	ldd	r25, Y+24	; 0x18
    56d2:	01 97       	sbiw	r24, 0x01	; 1
    56d4:	98 8f       	std	Y+24, r25	; 0x18
    56d6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56d8:	8f 89       	ldd	r24, Y+23	; 0x17
    56da:	98 8d       	ldd	r25, Y+24	; 0x18
    56dc:	00 97       	sbiw	r24, 0x00	; 0
    56de:	51 f7       	brne	.-44     	; 0x56b4 <right_cycle+0x1c6>
    56e0:	17 c0       	rjmp	.+46     	; 0x5710 <right_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56e2:	6b 89       	ldd	r22, Y+19	; 0x13
    56e4:	7c 89       	ldd	r23, Y+20	; 0x14
    56e6:	8d 89       	ldd	r24, Y+21	; 0x15
    56e8:	9e 89       	ldd	r25, Y+22	; 0x16
    56ea:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    56ee:	dc 01       	movw	r26, r24
    56f0:	cb 01       	movw	r24, r22
    56f2:	98 8f       	std	Y+24, r25	; 0x18
    56f4:	8f 8b       	std	Y+23, r24	; 0x17
    56f6:	8f 89       	ldd	r24, Y+23	; 0x17
    56f8:	98 8d       	ldd	r25, Y+24	; 0x18
    56fa:	9c 8f       	std	Y+28, r25	; 0x1c
    56fc:	8b 8f       	std	Y+27, r24	; 0x1b
    56fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5702:	8c 01       	movw	r16, r24
    5704:	f8 01       	movw	r30, r16
    5706:	31 97       	sbiw	r30, 0x01	; 1
    5708:	f1 f7       	brne	.-4      	; 0x5706 <right_cycle+0x218>
    570a:	8f 01       	movw	r16, r30
    570c:	1c 8f       	std	Y+28, r17	; 0x1c
    570e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    5710:	0e 94 76 22 	call	0x44ec	; 0x44ec <arm_forward>
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	a6 e9       	ldi	r26, 0x96	; 150
    571a:	b3 e4       	ldi	r27, 0x43	; 67
    571c:	8d 8f       	std	Y+29, r24	; 0x1d
    571e:	9e 8f       	std	Y+30, r25	; 0x1e
    5720:	af 8f       	std	Y+31, r26	; 0x1f
    5722:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5724:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5726:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5728:	8f 8d       	ldd	r24, Y+31	; 0x1f
    572a:	98 a1       	lds	r25, 0x48
    572c:	26 e6       	ldi	r18, 0x66	; 102
    572e:	36 e6       	ldi	r19, 0x66	; 102
    5730:	46 e6       	ldi	r20, 0x66	; 102
    5732:	55 e4       	ldi	r21, 0x45	; 69
    5734:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	89 a3       	lds	r24, 0x59
    573e:	9a a3       	lds	r25, 0x5a
    5740:	ab a3       	lds	r26, 0x5b
    5742:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5744:	11 e0       	ldi	r17, 0x01	; 1
    5746:	69 a1       	lds	r22, 0x49
    5748:	7a a1       	lds	r23, 0x4a
    574a:	8b a1       	lds	r24, 0x4b
    574c:	9c a1       	lds	r25, 0x4c
    574e:	20 e0       	ldi	r18, 0x00	; 0
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	40 e8       	ldi	r20, 0x80	; 128
    5754:	5f e3       	ldi	r21, 0x3F	; 63
    5756:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    575a:	88 23       	and	r24, r24
    575c:	0c f0       	brlt	.+2      	; 0x5760 <right_cycle+0x272>
    575e:	10 e0       	ldi	r17, 0x00	; 0
    5760:	11 23       	and	r17, r17
    5762:	29 f0       	breq	.+10     	; 0x576e <right_cycle+0x280>
		__ticks = 1;
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	9e a3       	lds	r25, 0x5e
    576a:	8d a3       	lds	r24, 0x5d
    576c:	46 c0       	rjmp	.+140    	; 0x57fa <right_cycle+0x30c>
	else if (__tmp > 65535)
    576e:	11 e0       	ldi	r17, 0x01	; 1
    5770:	69 a1       	lds	r22, 0x49
    5772:	7a a1       	lds	r23, 0x4a
    5774:	8b a1       	lds	r24, 0x4b
    5776:	9c a1       	lds	r25, 0x4c
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	3f ef       	ldi	r19, 0xFF	; 255
    577c:	4f e7       	ldi	r20, 0x7F	; 127
    577e:	57 e4       	ldi	r21, 0x47	; 71
    5780:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5784:	18 16       	cp	r1, r24
    5786:	0c f0       	brlt	.+2      	; 0x578a <right_cycle+0x29c>
    5788:	10 e0       	ldi	r17, 0x00	; 0
    578a:	11 23       	and	r17, r17
    578c:	61 f1       	breq	.+88     	; 0x57e6 <right_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    578e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5790:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5792:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5794:	98 a1       	lds	r25, 0x48
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	40 e2       	ldi	r20, 0x20	; 32
    579c:	51 e4       	ldi	r21, 0x41	; 65
    579e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    57a2:	dc 01       	movw	r26, r24
    57a4:	cb 01       	movw	r24, r22
    57a6:	bc 01       	movw	r22, r24
    57a8:	cd 01       	movw	r24, r26
    57aa:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	9e a3       	lds	r25, 0x5e
    57b4:	8d a3       	lds	r24, 0x5d
    57b6:	12 c0       	rjmp	.+36     	; 0x57dc <right_cycle+0x2ee>
    57b8:	80 e7       	ldi	r24, 0x70	; 112
    57ba:	91 e0       	ldi	r25, 0x01	; 1
    57bc:	98 a7       	lds	r25, 0x78
    57be:	8f a3       	lds	r24, 0x5f
    57c0:	8f a1       	lds	r24, 0x4f
    57c2:	98 a5       	lds	r25, 0x68
    57c4:	8c 01       	movw	r16, r24
    57c6:	c8 01       	movw	r24, r16
    57c8:	01 97       	sbiw	r24, 0x01	; 1
    57ca:	f1 f7       	brne	.-4      	; 0x57c8 <right_cycle+0x2da>
    57cc:	8c 01       	movw	r16, r24
    57ce:	18 a7       	lds	r17, 0x78
    57d0:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d2:	8d a1       	lds	r24, 0x4d
    57d4:	9e a1       	lds	r25, 0x4e
    57d6:	01 97       	sbiw	r24, 0x01	; 1
    57d8:	9e a3       	lds	r25, 0x5e
    57da:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57dc:	8d a1       	lds	r24, 0x4d
    57de:	9e a1       	lds	r25, 0x4e
    57e0:	00 97       	sbiw	r24, 0x00	; 0
    57e2:	51 f7       	brne	.-44     	; 0x57b8 <right_cycle+0x2ca>
    57e4:	17 c0       	rjmp	.+46     	; 0x5814 <right_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e6:	69 a1       	lds	r22, 0x49
    57e8:	7a a1       	lds	r23, 0x4a
    57ea:	8b a1       	lds	r24, 0x4b
    57ec:	9c a1       	lds	r25, 0x4c
    57ee:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    57f2:	dc 01       	movw	r26, r24
    57f4:	cb 01       	movw	r24, r22
    57f6:	9e a3       	lds	r25, 0x5e
    57f8:	8d a3       	lds	r24, 0x5d
    57fa:	8d a1       	lds	r24, 0x4d
    57fc:	9e a1       	lds	r25, 0x4e
    57fe:	9a a7       	lds	r25, 0x7a
    5800:	89 a7       	lds	r24, 0x79
    5802:	89 a5       	lds	r24, 0x69
    5804:	9a a5       	lds	r25, 0x6a
    5806:	8c 01       	movw	r16, r24
    5808:	f8 01       	movw	r30, r16
    580a:	31 97       	sbiw	r30, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <right_cycle+0x31c>
    580e:	8f 01       	movw	r16, r30
    5810:	1a a7       	lds	r17, 0x7a
    5812:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    5814:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <gripper_close>
    5818:	80 e0       	ldi	r24, 0x00	; 0
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	a6 e9       	ldi	r26, 0x96	; 150
    581e:	b3 e4       	ldi	r27, 0x43	; 67
    5820:	8b a7       	lds	r24, 0x7b
    5822:	9c a7       	lds	r25, 0x7c
    5824:	ad a7       	lds	r26, 0x7d
    5826:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5828:	6b a5       	lds	r22, 0x6b
    582a:	7c a5       	lds	r23, 0x6c
    582c:	8d a5       	lds	r24, 0x6d
    582e:	9e a5       	lds	r25, 0x6e
    5830:	26 e6       	ldi	r18, 0x66	; 102
    5832:	36 e6       	ldi	r19, 0x66	; 102
    5834:	46 e6       	ldi	r20, 0x66	; 102
    5836:	55 e4       	ldi	r21, 0x45	; 69
    5838:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	8f a7       	lds	r24, 0x7f
    5842:	98 ab       	sts	0x58, r25
    5844:	a9 ab       	sts	0x59, r26
    5846:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5848:	11 e0       	ldi	r17, 0x01	; 1
    584a:	6f a5       	lds	r22, 0x6f
    584c:	78 a9       	sts	0x48, r23
    584e:	89 a9       	sts	0x49, r24
    5850:	9a a9       	sts	0x4a, r25
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	40 e8       	ldi	r20, 0x80	; 128
    5858:	5f e3       	ldi	r21, 0x3F	; 63
    585a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    585e:	88 23       	and	r24, r24
    5860:	0c f0       	brlt	.+2      	; 0x5864 <right_cycle+0x376>
    5862:	10 e0       	ldi	r17, 0x00	; 0
    5864:	11 23       	and	r17, r17
    5866:	29 f0       	breq	.+10     	; 0x5872 <right_cycle+0x384>
		__ticks = 1;
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	90 e0       	ldi	r25, 0x00	; 0
    586c:	9c ab       	sts	0x5c, r25
    586e:	8b ab       	sts	0x5b, r24
    5870:	46 c0       	rjmp	.+140    	; 0x58fe <right_cycle+0x410>
	else if (__tmp > 65535)
    5872:	11 e0       	ldi	r17, 0x01	; 1
    5874:	6f a5       	lds	r22, 0x6f
    5876:	78 a9       	sts	0x48, r23
    5878:	89 a9       	sts	0x49, r24
    587a:	9a a9       	sts	0x4a, r25
    587c:	20 e0       	ldi	r18, 0x00	; 0
    587e:	3f ef       	ldi	r19, 0xFF	; 255
    5880:	4f e7       	ldi	r20, 0x7F	; 127
    5882:	57 e4       	ldi	r21, 0x47	; 71
    5884:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5888:	18 16       	cp	r1, r24
    588a:	0c f0       	brlt	.+2      	; 0x588e <right_cycle+0x3a0>
    588c:	10 e0       	ldi	r17, 0x00	; 0
    588e:	11 23       	and	r17, r17
    5890:	61 f1       	breq	.+88     	; 0x58ea <right_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5892:	6b a5       	lds	r22, 0x6b
    5894:	7c a5       	lds	r23, 0x6c
    5896:	8d a5       	lds	r24, 0x6d
    5898:	9e a5       	lds	r25, 0x6e
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	40 e2       	ldi	r20, 0x20	; 32
    58a0:	51 e4       	ldi	r21, 0x41	; 65
    58a2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	bc 01       	movw	r22, r24
    58ac:	cd 01       	movw	r24, r26
    58ae:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	9c ab       	sts	0x5c, r25
    58b8:	8b ab       	sts	0x5b, r24
    58ba:	12 c0       	rjmp	.+36     	; 0x58e0 <right_cycle+0x3f2>
    58bc:	80 e7       	ldi	r24, 0x70	; 112
    58be:	91 e0       	ldi	r25, 0x01	; 1
    58c0:	9e ab       	sts	0x5e, r25
    58c2:	8d ab       	sts	0x5d, r24
    58c4:	8d a9       	sts	0x4d, r24
    58c6:	9e a9       	sts	0x4e, r25
    58c8:	8c 01       	movw	r16, r24
    58ca:	c8 01       	movw	r24, r16
    58cc:	01 97       	sbiw	r24, 0x01	; 1
    58ce:	f1 f7       	brne	.-4      	; 0x58cc <right_cycle+0x3de>
    58d0:	8c 01       	movw	r16, r24
    58d2:	1e ab       	sts	0x5e, r17
    58d4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d6:	8b a9       	sts	0x4b, r24
    58d8:	9c a9       	sts	0x4c, r25
    58da:	01 97       	sbiw	r24, 0x01	; 1
    58dc:	9c ab       	sts	0x5c, r25
    58de:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e0:	8b a9       	sts	0x4b, r24
    58e2:	9c a9       	sts	0x4c, r25
    58e4:	00 97       	sbiw	r24, 0x00	; 0
    58e6:	51 f7       	brne	.-44     	; 0x58bc <right_cycle+0x3ce>
    58e8:	17 c0       	rjmp	.+46     	; 0x5918 <right_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ea:	6f a5       	lds	r22, 0x6f
    58ec:	78 a9       	sts	0x48, r23
    58ee:	89 a9       	sts	0x49, r24
    58f0:	9a a9       	sts	0x4a, r25
    58f2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	9c ab       	sts	0x5c, r25
    58fc:	8b ab       	sts	0x5b, r24
    58fe:	8b a9       	sts	0x4b, r24
    5900:	9c a9       	sts	0x4c, r25
    5902:	98 af       	sts	0x78, r25
    5904:	8f ab       	sts	0x5f, r24
    5906:	8f a9       	sts	0x4f, r24
    5908:	98 ad       	sts	0x68, r25
    590a:	8c 01       	movw	r16, r24
    590c:	f8 01       	movw	r30, r16
    590e:	31 97       	sbiw	r30, 0x01	; 1
    5910:	f1 f7       	brne	.-4      	; 0x590e <right_cycle+0x420>
    5912:	8f 01       	movw	r16, r30
    5914:	18 af       	sts	0x78, r17
    5916:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    5918:	0e 94 9e 23 	call	0x473c	; 0x473c <arm_backward>
    591c:	80 e0       	ldi	r24, 0x00	; 0
    591e:	90 e0       	ldi	r25, 0x00	; 0
    5920:	a6 e9       	ldi	r26, 0x96	; 150
    5922:	b3 e4       	ldi	r27, 0x43	; 67
    5924:	89 af       	sts	0x79, r24
    5926:	9a af       	sts	0x7a, r25
    5928:	ab af       	sts	0x7b, r26
    592a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    592c:	69 ad       	sts	0x69, r22
    592e:	7a ad       	sts	0x6a, r23
    5930:	8b ad       	sts	0x6b, r24
    5932:	9c ad       	sts	0x6c, r25
    5934:	26 e6       	ldi	r18, 0x66	; 102
    5936:	36 e6       	ldi	r19, 0x66	; 102
    5938:	46 e6       	ldi	r20, 0x66	; 102
    593a:	55 e4       	ldi	r21, 0x45	; 69
    593c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	9e 01       	movw	r18, r28
    5946:	23 5c       	subi	r18, 0xC3	; 195
    5948:	3f 4f       	sbci	r19, 0xFF	; 255
    594a:	f9 01       	movw	r30, r18
    594c:	80 83       	st	Z, r24
    594e:	91 83       	std	Z+1, r25	; 0x01
    5950:	a2 83       	std	Z+2, r26	; 0x02
    5952:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5954:	11 e0       	ldi	r17, 0x01	; 1
    5956:	ce 01       	movw	r24, r28
    5958:	cd 96       	adiw	r24, 0x3d	; 61
    595a:	fc 01       	movw	r30, r24
    595c:	60 81       	ld	r22, Z
    595e:	71 81       	ldd	r23, Z+1	; 0x01
    5960:	82 81       	ldd	r24, Z+2	; 0x02
    5962:	93 81       	ldd	r25, Z+3	; 0x03
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	30 e0       	ldi	r19, 0x00	; 0
    5968:	40 e8       	ldi	r20, 0x80	; 128
    596a:	5f e3       	ldi	r21, 0x3F	; 63
    596c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5970:	88 23       	and	r24, r24
    5972:	0c f0       	brlt	.+2      	; 0x5976 <right_cycle+0x488>
    5974:	10 e0       	ldi	r17, 0x00	; 0
    5976:	11 23       	and	r17, r17
    5978:	49 f0       	breq	.+18     	; 0x598c <right_cycle+0x49e>
		__ticks = 1;
    597a:	ce 01       	movw	r24, r28
    597c:	8f 5b       	subi	r24, 0xBF	; 191
    597e:	9f 4f       	sbci	r25, 0xFF	; 255
    5980:	21 e0       	ldi	r18, 0x01	; 1
    5982:	30 e0       	ldi	r19, 0x00	; 0
    5984:	fc 01       	movw	r30, r24
    5986:	31 83       	std	Z+1, r19	; 0x01
    5988:	20 83       	st	Z, r18
    598a:	6e c0       	rjmp	.+220    	; 0x5a68 <right_cycle+0x57a>
	else if (__tmp > 65535)
    598c:	11 e0       	ldi	r17, 0x01	; 1
    598e:	ce 01       	movw	r24, r28
    5990:	cd 96       	adiw	r24, 0x3d	; 61
    5992:	fc 01       	movw	r30, r24
    5994:	60 81       	ld	r22, Z
    5996:	71 81       	ldd	r23, Z+1	; 0x01
    5998:	82 81       	ldd	r24, Z+2	; 0x02
    599a:	93 81       	ldd	r25, Z+3	; 0x03
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	3f ef       	ldi	r19, 0xFF	; 255
    59a0:	4f e7       	ldi	r20, 0x7F	; 127
    59a2:	57 e4       	ldi	r21, 0x47	; 71
    59a4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    59a8:	18 16       	cp	r1, r24
    59aa:	0c f0       	brlt	.+2      	; 0x59ae <right_cycle+0x4c0>
    59ac:	10 e0       	ldi	r17, 0x00	; 0
    59ae:	11 23       	and	r17, r17
    59b0:	09 f4       	brne	.+2      	; 0x59b4 <right_cycle+0x4c6>
    59b2:	49 c0       	rjmp	.+146    	; 0x5a46 <right_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59b4:	69 ad       	sts	0x69, r22
    59b6:	7a ad       	sts	0x6a, r23
    59b8:	8b ad       	sts	0x6b, r24
    59ba:	9c ad       	sts	0x6c, r25
    59bc:	20 e0       	ldi	r18, 0x00	; 0
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	40 e2       	ldi	r20, 0x20	; 32
    59c2:	51 e4       	ldi	r21, 0x41	; 65
    59c4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	8e 01       	movw	r16, r28
    59ce:	0f 5b       	subi	r16, 0xBF	; 191
    59d0:	1f 4f       	sbci	r17, 0xFF	; 255
    59d2:	bc 01       	movw	r22, r24
    59d4:	cd 01       	movw	r24, r26
    59d6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	f8 01       	movw	r30, r16
    59e0:	91 83       	std	Z+1, r25	; 0x01
    59e2:	80 83       	st	Z, r24
    59e4:	27 c0       	rjmp	.+78     	; 0x5a34 <right_cycle+0x546>
    59e6:	ce 01       	movw	r24, r28
    59e8:	8d 5b       	subi	r24, 0xBD	; 189
    59ea:	9f 4f       	sbci	r25, 0xFF	; 255
    59ec:	20 e7       	ldi	r18, 0x70	; 112
    59ee:	31 e0       	ldi	r19, 0x01	; 1
    59f0:	fc 01       	movw	r30, r24
    59f2:	31 83       	std	Z+1, r19	; 0x01
    59f4:	20 83       	st	Z, r18
    59f6:	ce 01       	movw	r24, r28
    59f8:	8d 5b       	subi	r24, 0xBD	; 189
    59fa:	9f 4f       	sbci	r25, 0xFF	; 255
    59fc:	fc 01       	movw	r30, r24
    59fe:	80 81       	ld	r24, Z
    5a00:	91 81       	ldd	r25, Z+1	; 0x01
    5a02:	8c 01       	movw	r16, r24
    5a04:	c8 01       	movw	r24, r16
    5a06:	01 97       	sbiw	r24, 0x01	; 1
    5a08:	f1 f7       	brne	.-4      	; 0x5a06 <right_cycle+0x518>
    5a0a:	8c 01       	movw	r16, r24
    5a0c:	ce 01       	movw	r24, r28
    5a0e:	8d 5b       	subi	r24, 0xBD	; 189
    5a10:	9f 4f       	sbci	r25, 0xFF	; 255
    5a12:	fc 01       	movw	r30, r24
    5a14:	11 83       	std	Z+1, r17	; 0x01
    5a16:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a18:	ce 01       	movw	r24, r28
    5a1a:	8f 5b       	subi	r24, 0xBF	; 191
    5a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1e:	9e 01       	movw	r18, r28
    5a20:	2f 5b       	subi	r18, 0xBF	; 191
    5a22:	3f 4f       	sbci	r19, 0xFF	; 255
    5a24:	f9 01       	movw	r30, r18
    5a26:	20 81       	ld	r18, Z
    5a28:	31 81       	ldd	r19, Z+1	; 0x01
    5a2a:	21 50       	subi	r18, 0x01	; 1
    5a2c:	30 40       	sbci	r19, 0x00	; 0
    5a2e:	fc 01       	movw	r30, r24
    5a30:	31 83       	std	Z+1, r19	; 0x01
    5a32:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a34:	ce 01       	movw	r24, r28
    5a36:	8f 5b       	subi	r24, 0xBF	; 191
    5a38:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	80 81       	ld	r24, Z
    5a3e:	91 81       	ldd	r25, Z+1	; 0x01
    5a40:	00 97       	sbiw	r24, 0x00	; 0
    5a42:	89 f6       	brne	.-94     	; 0x59e6 <right_cycle+0x4f8>
    5a44:	2e c0       	rjmp	.+92     	; 0x5aa2 <right_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a46:	8e 01       	movw	r16, r28
    5a48:	0f 5b       	subi	r16, 0xBF	; 191
    5a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a4c:	ce 01       	movw	r24, r28
    5a4e:	cd 96       	adiw	r24, 0x3d	; 61
    5a50:	fc 01       	movw	r30, r24
    5a52:	60 81       	ld	r22, Z
    5a54:	71 81       	ldd	r23, Z+1	; 0x01
    5a56:	82 81       	ldd	r24, Z+2	; 0x02
    5a58:	93 81       	ldd	r25, Z+3	; 0x03
    5a5a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	f8 01       	movw	r30, r16
    5a64:	91 83       	std	Z+1, r25	; 0x01
    5a66:	80 83       	st	Z, r24
    5a68:	ce 01       	movw	r24, r28
    5a6a:	8b 5b       	subi	r24, 0xBB	; 187
    5a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a6e:	9e 01       	movw	r18, r28
    5a70:	2f 5b       	subi	r18, 0xBF	; 191
    5a72:	3f 4f       	sbci	r19, 0xFF	; 255
    5a74:	f9 01       	movw	r30, r18
    5a76:	20 81       	ld	r18, Z
    5a78:	31 81       	ldd	r19, Z+1	; 0x01
    5a7a:	fc 01       	movw	r30, r24
    5a7c:	31 83       	std	Z+1, r19	; 0x01
    5a7e:	20 83       	st	Z, r18
    5a80:	ce 01       	movw	r24, r28
    5a82:	8b 5b       	subi	r24, 0xBB	; 187
    5a84:	9f 4f       	sbci	r25, 0xFF	; 255
    5a86:	fc 01       	movw	r30, r24
    5a88:	80 81       	ld	r24, Z
    5a8a:	91 81       	ldd	r25, Z+1	; 0x01
    5a8c:	8c 01       	movw	r16, r24
    5a8e:	c8 01       	movw	r24, r16
    5a90:	01 97       	sbiw	r24, 0x01	; 1
    5a92:	f1 f7       	brne	.-4      	; 0x5a90 <right_cycle+0x5a2>
    5a94:	8c 01       	movw	r16, r24
    5a96:	ce 01       	movw	r24, r28
    5a98:	8b 5b       	subi	r24, 0xBB	; 187
    5a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	11 83       	std	Z+1, r17	; 0x01
    5aa0:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    5aa2:	ca 5b       	subi	r28, 0xBA	; 186
    5aa4:	df 4f       	sbci	r29, 0xFF	; 255
    5aa6:	0f b6       	in	r0, 0x3f	; 63
    5aa8:	f8 94       	cli
    5aaa:	de bf       	out	0x3e, r29	; 62
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	cd bf       	out	0x3d, r28	; 61
    5ab0:	df 91       	pop	r29
    5ab2:	cf 91       	pop	r28
    5ab4:	1f 91       	pop	r17
    5ab6:	0f 91       	pop	r16
    5ab8:	08 95       	ret

00005aba <drop>:
void drop()
{
    5aba:	0f 93       	push	r16
    5abc:	1f 93       	push	r17
    5abe:	cf 93       	push	r28
    5ac0:	df 93       	push	r29
    5ac2:	cd b7       	in	r28, 0x3d	; 61
    5ac4:	de b7       	in	r29, 0x3e	; 62
    5ac6:	c6 54       	subi	r28, 0x46	; 70
    5ac8:	d0 40       	sbci	r29, 0x00	; 0
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
	servo_1(150);
    5ad4:	86 e9       	ldi	r24, 0x96	; 150
    5ad6:	0e 94 8e 1b 	call	0x371c	; 0x371c <servo_1>
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	a6 e9       	ldi	r26, 0x96	; 150
    5ae0:	b3 e4       	ldi	r27, 0x43	; 67
    5ae2:	89 83       	std	Y+1, r24	; 0x01
    5ae4:	9a 83       	std	Y+2, r25	; 0x02
    5ae6:	ab 83       	std	Y+3, r26	; 0x03
    5ae8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5aea:	69 81       	ldd	r22, Y+1	; 0x01
    5aec:	7a 81       	ldd	r23, Y+2	; 0x02
    5aee:	8b 81       	ldd	r24, Y+3	; 0x03
    5af0:	9c 81       	ldd	r25, Y+4	; 0x04
    5af2:	26 e6       	ldi	r18, 0x66	; 102
    5af4:	36 e6       	ldi	r19, 0x66	; 102
    5af6:	46 e6       	ldi	r20, 0x66	; 102
    5af8:	55 e4       	ldi	r21, 0x45	; 69
    5afa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5afe:	dc 01       	movw	r26, r24
    5b00:	cb 01       	movw	r24, r22
    5b02:	8d 83       	std	Y+5, r24	; 0x05
    5b04:	9e 83       	std	Y+6, r25	; 0x06
    5b06:	af 83       	std	Y+7, r26	; 0x07
    5b08:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5b0a:	11 e0       	ldi	r17, 0x01	; 1
    5b0c:	6d 81       	ldd	r22, Y+5	; 0x05
    5b0e:	7e 81       	ldd	r23, Y+6	; 0x06
    5b10:	8f 81       	ldd	r24, Y+7	; 0x07
    5b12:	98 85       	ldd	r25, Y+8	; 0x08
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	40 e8       	ldi	r20, 0x80	; 128
    5b1a:	5f e3       	ldi	r21, 0x3F	; 63
    5b1c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5b20:	88 23       	and	r24, r24
    5b22:	0c f0       	brlt	.+2      	; 0x5b26 <drop+0x6c>
    5b24:	10 e0       	ldi	r17, 0x00	; 0
    5b26:	11 23       	and	r17, r17
    5b28:	29 f0       	breq	.+10     	; 0x5b34 <drop+0x7a>
		__ticks = 1;
    5b2a:	81 e0       	ldi	r24, 0x01	; 1
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	9a 87       	std	Y+10, r25	; 0x0a
    5b30:	89 87       	std	Y+9, r24	; 0x09
    5b32:	46 c0       	rjmp	.+140    	; 0x5bc0 <drop+0x106>
	else if (__tmp > 65535)
    5b34:	11 e0       	ldi	r17, 0x01	; 1
    5b36:	6d 81       	ldd	r22, Y+5	; 0x05
    5b38:	7e 81       	ldd	r23, Y+6	; 0x06
    5b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    5b3c:	98 85       	ldd	r25, Y+8	; 0x08
    5b3e:	20 e0       	ldi	r18, 0x00	; 0
    5b40:	3f ef       	ldi	r19, 0xFF	; 255
    5b42:	4f e7       	ldi	r20, 0x7F	; 127
    5b44:	57 e4       	ldi	r21, 0x47	; 71
    5b46:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5b4a:	18 16       	cp	r1, r24
    5b4c:	0c f0       	brlt	.+2      	; 0x5b50 <drop+0x96>
    5b4e:	10 e0       	ldi	r17, 0x00	; 0
    5b50:	11 23       	and	r17, r17
    5b52:	61 f1       	breq	.+88     	; 0x5bac <drop+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b54:	69 81       	ldd	r22, Y+1	; 0x01
    5b56:	7a 81       	ldd	r23, Y+2	; 0x02
    5b58:	8b 81       	ldd	r24, Y+3	; 0x03
    5b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b5c:	20 e0       	ldi	r18, 0x00	; 0
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	40 e2       	ldi	r20, 0x20	; 32
    5b62:	51 e4       	ldi	r21, 0x41	; 65
    5b64:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5b68:	dc 01       	movw	r26, r24
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	bc 01       	movw	r22, r24
    5b6e:	cd 01       	movw	r24, r26
    5b70:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	9a 87       	std	Y+10, r25	; 0x0a
    5b7a:	89 87       	std	Y+9, r24	; 0x09
    5b7c:	12 c0       	rjmp	.+36     	; 0x5ba2 <drop+0xe8>
    5b7e:	80 e7       	ldi	r24, 0x70	; 112
    5b80:	91 e0       	ldi	r25, 0x01	; 1
    5b82:	9c 87       	std	Y+12, r25	; 0x0c
    5b84:	8b 87       	std	Y+11, r24	; 0x0b
    5b86:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b88:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b8a:	8c 01       	movw	r16, r24
    5b8c:	c8 01       	movw	r24, r16
    5b8e:	01 97       	sbiw	r24, 0x01	; 1
    5b90:	f1 f7       	brne	.-4      	; 0x5b8e <drop+0xd4>
    5b92:	8c 01       	movw	r16, r24
    5b94:	1c 87       	std	Y+12, r17	; 0x0c
    5b96:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b98:	89 85       	ldd	r24, Y+9	; 0x09
    5b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b9c:	01 97       	sbiw	r24, 0x01	; 1
    5b9e:	9a 87       	std	Y+10, r25	; 0x0a
    5ba0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba2:	89 85       	ldd	r24, Y+9	; 0x09
    5ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba6:	00 97       	sbiw	r24, 0x00	; 0
    5ba8:	51 f7       	brne	.-44     	; 0x5b7e <drop+0xc4>
    5baa:	17 c0       	rjmp	.+46     	; 0x5bda <drop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bac:	6d 81       	ldd	r22, Y+5	; 0x05
    5bae:	7e 81       	ldd	r23, Y+6	; 0x06
    5bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    5bb2:	98 85       	ldd	r25, Y+8	; 0x08
    5bb4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5bb8:	dc 01       	movw	r26, r24
    5bba:	cb 01       	movw	r24, r22
    5bbc:	9a 87       	std	Y+10, r25	; 0x0a
    5bbe:	89 87       	std	Y+9, r24	; 0x09
    5bc0:	89 85       	ldd	r24, Y+9	; 0x09
    5bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bc4:	9e 87       	std	Y+14, r25	; 0x0e
    5bc6:	8d 87       	std	Y+13, r24	; 0x0d
    5bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bcc:	8c 01       	movw	r16, r24
    5bce:	f8 01       	movw	r30, r16
    5bd0:	31 97       	sbiw	r30, 0x01	; 1
    5bd2:	f1 f7       	brne	.-4      	; 0x5bd0 <drop+0x116>
    5bd4:	8f 01       	movw	r16, r30
    5bd6:	1e 87       	std	Y+14, r17	; 0x0e
    5bd8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	
	for(ii=0;ii<65;ii++)
    5bda:	10 92 57 03 	sts	0x0357, r1
    5bde:	89 c0       	rjmp	.+274    	; 0x5cf2 <drop+0x238>
	{
		servo_2(ii);
    5be0:	80 91 57 03 	lds	r24, 0x0357
    5be4:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <servo_2>
    5be8:	80 e0       	ldi	r24, 0x00	; 0
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	a0 e2       	ldi	r26, 0x20	; 32
    5bee:	b1 e4       	ldi	r27, 0x41	; 65
    5bf0:	8f 87       	std	Y+15, r24	; 0x0f
    5bf2:	98 8b       	std	Y+16, r25	; 0x10
    5bf4:	a9 8b       	std	Y+17, r26	; 0x11
    5bf6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5bf8:	6f 85       	ldd	r22, Y+15	; 0x0f
    5bfa:	78 89       	ldd	r23, Y+16	; 0x10
    5bfc:	89 89       	ldd	r24, Y+17	; 0x11
    5bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    5c00:	26 e6       	ldi	r18, 0x66	; 102
    5c02:	36 e6       	ldi	r19, 0x66	; 102
    5c04:	46 e6       	ldi	r20, 0x66	; 102
    5c06:	55 e4       	ldi	r21, 0x45	; 69
    5c08:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5c0c:	dc 01       	movw	r26, r24
    5c0e:	cb 01       	movw	r24, r22
    5c10:	8b 8b       	std	Y+19, r24	; 0x13
    5c12:	9c 8b       	std	Y+20, r25	; 0x14
    5c14:	ad 8b       	std	Y+21, r26	; 0x15
    5c16:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5c18:	11 e0       	ldi	r17, 0x01	; 1
    5c1a:	6b 89       	ldd	r22, Y+19	; 0x13
    5c1c:	7c 89       	ldd	r23, Y+20	; 0x14
    5c1e:	8d 89       	ldd	r24, Y+21	; 0x15
    5c20:	9e 89       	ldd	r25, Y+22	; 0x16
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	40 e8       	ldi	r20, 0x80	; 128
    5c28:	5f e3       	ldi	r21, 0x3F	; 63
    5c2a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5c2e:	88 23       	and	r24, r24
    5c30:	0c f0       	brlt	.+2      	; 0x5c34 <drop+0x17a>
    5c32:	10 e0       	ldi	r17, 0x00	; 0
    5c34:	11 23       	and	r17, r17
    5c36:	29 f0       	breq	.+10     	; 0x5c42 <drop+0x188>
		__ticks = 1;
    5c38:	81 e0       	ldi	r24, 0x01	; 1
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	98 8f       	std	Y+24, r25	; 0x18
    5c3e:	8f 8b       	std	Y+23, r24	; 0x17
    5c40:	46 c0       	rjmp	.+140    	; 0x5cce <drop+0x214>
	else if (__tmp > 65535)
    5c42:	11 e0       	ldi	r17, 0x01	; 1
    5c44:	6b 89       	ldd	r22, Y+19	; 0x13
    5c46:	7c 89       	ldd	r23, Y+20	; 0x14
    5c48:	8d 89       	ldd	r24, Y+21	; 0x15
    5c4a:	9e 89       	ldd	r25, Y+22	; 0x16
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	3f ef       	ldi	r19, 0xFF	; 255
    5c50:	4f e7       	ldi	r20, 0x7F	; 127
    5c52:	57 e4       	ldi	r21, 0x47	; 71
    5c54:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5c58:	18 16       	cp	r1, r24
    5c5a:	0c f0       	brlt	.+2      	; 0x5c5e <drop+0x1a4>
    5c5c:	10 e0       	ldi	r17, 0x00	; 0
    5c5e:	11 23       	and	r17, r17
    5c60:	61 f1       	breq	.+88     	; 0x5cba <drop+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c62:	6f 85       	ldd	r22, Y+15	; 0x0f
    5c64:	78 89       	ldd	r23, Y+16	; 0x10
    5c66:	89 89       	ldd	r24, Y+17	; 0x11
    5c68:	9a 89       	ldd	r25, Y+18	; 0x12
    5c6a:	20 e0       	ldi	r18, 0x00	; 0
    5c6c:	30 e0       	ldi	r19, 0x00	; 0
    5c6e:	40 e2       	ldi	r20, 0x20	; 32
    5c70:	51 e4       	ldi	r21, 0x41	; 65
    5c72:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5c76:	dc 01       	movw	r26, r24
    5c78:	cb 01       	movw	r24, r22
    5c7a:	bc 01       	movw	r22, r24
    5c7c:	cd 01       	movw	r24, r26
    5c7e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5c82:	dc 01       	movw	r26, r24
    5c84:	cb 01       	movw	r24, r22
    5c86:	98 8f       	std	Y+24, r25	; 0x18
    5c88:	8f 8b       	std	Y+23, r24	; 0x17
    5c8a:	12 c0       	rjmp	.+36     	; 0x5cb0 <drop+0x1f6>
    5c8c:	80 e7       	ldi	r24, 0x70	; 112
    5c8e:	91 e0       	ldi	r25, 0x01	; 1
    5c90:	9a 8f       	std	Y+26, r25	; 0x1a
    5c92:	89 8f       	std	Y+25, r24	; 0x19
    5c94:	89 8d       	ldd	r24, Y+25	; 0x19
    5c96:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c98:	8c 01       	movw	r16, r24
    5c9a:	c8 01       	movw	r24, r16
    5c9c:	01 97       	sbiw	r24, 0x01	; 1
    5c9e:	f1 f7       	brne	.-4      	; 0x5c9c <drop+0x1e2>
    5ca0:	8c 01       	movw	r16, r24
    5ca2:	1a 8f       	std	Y+26, r17	; 0x1a
    5ca4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    5caa:	01 97       	sbiw	r24, 0x01	; 1
    5cac:	98 8f       	std	Y+24, r25	; 0x18
    5cae:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    5cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    5cb4:	00 97       	sbiw	r24, 0x00	; 0
    5cb6:	51 f7       	brne	.-44     	; 0x5c8c <drop+0x1d2>
    5cb8:	17 c0       	rjmp	.+46     	; 0x5ce8 <drop+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cba:	6b 89       	ldd	r22, Y+19	; 0x13
    5cbc:	7c 89       	ldd	r23, Y+20	; 0x14
    5cbe:	8d 89       	ldd	r24, Y+21	; 0x15
    5cc0:	9e 89       	ldd	r25, Y+22	; 0x16
    5cc2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5cc6:	dc 01       	movw	r26, r24
    5cc8:	cb 01       	movw	r24, r22
    5cca:	98 8f       	std	Y+24, r25	; 0x18
    5ccc:	8f 8b       	std	Y+23, r24	; 0x17
    5cce:	8f 89       	ldd	r24, Y+23	; 0x17
    5cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    5cd2:	9c 8f       	std	Y+28, r25	; 0x1c
    5cd4:	8b 8f       	std	Y+27, r24	; 0x1b
    5cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cda:	8c 01       	movw	r16, r24
    5cdc:	f8 01       	movw	r30, r16
    5cde:	31 97       	sbiw	r30, 0x01	; 1
    5ce0:	f1 f7       	brne	.-4      	; 0x5cde <drop+0x224>
    5ce2:	8f 01       	movw	r16, r30
    5ce4:	1c 8f       	std	Y+28, r17	; 0x1c
    5ce6:	0b 8f       	std	Y+27, r16	; 0x1b
void drop()
{
	servo_1(150);
	_delay_ms(300);
	
	for(ii=0;ii<65;ii++)
    5ce8:	80 91 57 03 	lds	r24, 0x0357
    5cec:	8f 5f       	subi	r24, 0xFF	; 255
    5cee:	80 93 57 03 	sts	0x0357, r24
    5cf2:	80 91 57 03 	lds	r24, 0x0357
    5cf6:	81 34       	cpi	r24, 0x41	; 65
    5cf8:	08 f4       	brcc	.+2      	; 0x5cfc <drop+0x242>
    5cfa:	72 cf       	rjmp	.-284    	; 0x5be0 <drop+0x126>
    5cfc:	80 e0       	ldi	r24, 0x00	; 0
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	a6 e9       	ldi	r26, 0x96	; 150
    5d02:	b3 e4       	ldi	r27, 0x43	; 67
    5d04:	8d 8f       	std	Y+29, r24	; 0x1d
    5d06:	9e 8f       	std	Y+30, r25	; 0x1e
    5d08:	af 8f       	std	Y+31, r26	; 0x1f
    5d0a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5d0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5d10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d12:	98 a1       	lds	r25, 0x48
    5d14:	26 e6       	ldi	r18, 0x66	; 102
    5d16:	36 e6       	ldi	r19, 0x66	; 102
    5d18:	46 e6       	ldi	r20, 0x66	; 102
    5d1a:	55 e4       	ldi	r21, 0x45	; 69
    5d1c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5d20:	dc 01       	movw	r26, r24
    5d22:	cb 01       	movw	r24, r22
    5d24:	89 a3       	lds	r24, 0x59
    5d26:	9a a3       	lds	r25, 0x5a
    5d28:	ab a3       	lds	r26, 0x5b
    5d2a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5d2c:	11 e0       	ldi	r17, 0x01	; 1
    5d2e:	69 a1       	lds	r22, 0x49
    5d30:	7a a1       	lds	r23, 0x4a
    5d32:	8b a1       	lds	r24, 0x4b
    5d34:	9c a1       	lds	r25, 0x4c
    5d36:	20 e0       	ldi	r18, 0x00	; 0
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	40 e8       	ldi	r20, 0x80	; 128
    5d3c:	5f e3       	ldi	r21, 0x3F	; 63
    5d3e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5d42:	88 23       	and	r24, r24
    5d44:	0c f0       	brlt	.+2      	; 0x5d48 <drop+0x28e>
    5d46:	10 e0       	ldi	r17, 0x00	; 0
    5d48:	11 23       	and	r17, r17
    5d4a:	29 f0       	breq	.+10     	; 0x5d56 <drop+0x29c>
		__ticks = 1;
    5d4c:	81 e0       	ldi	r24, 0x01	; 1
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	9e a3       	lds	r25, 0x5e
    5d52:	8d a3       	lds	r24, 0x5d
    5d54:	46 c0       	rjmp	.+140    	; 0x5de2 <drop+0x328>
	else if (__tmp > 65535)
    5d56:	11 e0       	ldi	r17, 0x01	; 1
    5d58:	69 a1       	lds	r22, 0x49
    5d5a:	7a a1       	lds	r23, 0x4a
    5d5c:	8b a1       	lds	r24, 0x4b
    5d5e:	9c a1       	lds	r25, 0x4c
    5d60:	20 e0       	ldi	r18, 0x00	; 0
    5d62:	3f ef       	ldi	r19, 0xFF	; 255
    5d64:	4f e7       	ldi	r20, 0x7F	; 127
    5d66:	57 e4       	ldi	r21, 0x47	; 71
    5d68:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5d6c:	18 16       	cp	r1, r24
    5d6e:	0c f0       	brlt	.+2      	; 0x5d72 <drop+0x2b8>
    5d70:	10 e0       	ldi	r17, 0x00	; 0
    5d72:	11 23       	and	r17, r17
    5d74:	61 f1       	breq	.+88     	; 0x5dce <drop+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d76:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5d78:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d7c:	98 a1       	lds	r25, 0x48
    5d7e:	20 e0       	ldi	r18, 0x00	; 0
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	40 e2       	ldi	r20, 0x20	; 32
    5d84:	51 e4       	ldi	r21, 0x41	; 65
    5d86:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5d8a:	dc 01       	movw	r26, r24
    5d8c:	cb 01       	movw	r24, r22
    5d8e:	bc 01       	movw	r22, r24
    5d90:	cd 01       	movw	r24, r26
    5d92:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5d96:	dc 01       	movw	r26, r24
    5d98:	cb 01       	movw	r24, r22
    5d9a:	9e a3       	lds	r25, 0x5e
    5d9c:	8d a3       	lds	r24, 0x5d
    5d9e:	12 c0       	rjmp	.+36     	; 0x5dc4 <drop+0x30a>
    5da0:	80 e7       	ldi	r24, 0x70	; 112
    5da2:	91 e0       	ldi	r25, 0x01	; 1
    5da4:	98 a7       	lds	r25, 0x78
    5da6:	8f a3       	lds	r24, 0x5f
    5da8:	8f a1       	lds	r24, 0x4f
    5daa:	98 a5       	lds	r25, 0x68
    5dac:	8c 01       	movw	r16, r24
    5dae:	c8 01       	movw	r24, r16
    5db0:	01 97       	sbiw	r24, 0x01	; 1
    5db2:	f1 f7       	brne	.-4      	; 0x5db0 <drop+0x2f6>
    5db4:	8c 01       	movw	r16, r24
    5db6:	18 a7       	lds	r17, 0x78
    5db8:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dba:	8d a1       	lds	r24, 0x4d
    5dbc:	9e a1       	lds	r25, 0x4e
    5dbe:	01 97       	sbiw	r24, 0x01	; 1
    5dc0:	9e a3       	lds	r25, 0x5e
    5dc2:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dc4:	8d a1       	lds	r24, 0x4d
    5dc6:	9e a1       	lds	r25, 0x4e
    5dc8:	00 97       	sbiw	r24, 0x00	; 0
    5dca:	51 f7       	brne	.-44     	; 0x5da0 <drop+0x2e6>
    5dcc:	17 c0       	rjmp	.+46     	; 0x5dfc <drop+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dce:	69 a1       	lds	r22, 0x49
    5dd0:	7a a1       	lds	r23, 0x4a
    5dd2:	8b a1       	lds	r24, 0x4b
    5dd4:	9c a1       	lds	r25, 0x4c
    5dd6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	9e a3       	lds	r25, 0x5e
    5de0:	8d a3       	lds	r24, 0x5d
    5de2:	8d a1       	lds	r24, 0x4d
    5de4:	9e a1       	lds	r25, 0x4e
    5de6:	9a a7       	lds	r25, 0x7a
    5de8:	89 a7       	lds	r24, 0x79
    5dea:	89 a5       	lds	r24, 0x69
    5dec:	9a a5       	lds	r25, 0x6a
    5dee:	8c 01       	movw	r16, r24
    5df0:	f8 01       	movw	r30, r16
    5df2:	31 97       	sbiw	r30, 0x01	; 1
    5df4:	f1 f7       	brne	.-4      	; 0x5df2 <drop+0x338>
    5df6:	8f 01       	movw	r16, r30
    5df8:	1a a7       	lds	r17, 0x7a
    5dfa:	09 a7       	lds	r16, 0x79
		servo_2(ii);
		_delay_ms(10);

	}
	_delay_ms(300);
	gripper_open();
    5dfc:	0e 94 ab 1c 	call	0x3956	; 0x3956 <gripper_open>
    5e00:	80 e0       	ldi	r24, 0x00	; 0
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	a6 e9       	ldi	r26, 0x96	; 150
    5e06:	b3 e4       	ldi	r27, 0x43	; 67
    5e08:	8b a7       	lds	r24, 0x7b
    5e0a:	9c a7       	lds	r25, 0x7c
    5e0c:	ad a7       	lds	r26, 0x7d
    5e0e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5e10:	6b a5       	lds	r22, 0x6b
    5e12:	7c a5       	lds	r23, 0x6c
    5e14:	8d a5       	lds	r24, 0x6d
    5e16:	9e a5       	lds	r25, 0x6e
    5e18:	26 e6       	ldi	r18, 0x66	; 102
    5e1a:	36 e6       	ldi	r19, 0x66	; 102
    5e1c:	46 e6       	ldi	r20, 0x66	; 102
    5e1e:	55 e4       	ldi	r21, 0x45	; 69
    5e20:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5e24:	dc 01       	movw	r26, r24
    5e26:	cb 01       	movw	r24, r22
    5e28:	8f a7       	lds	r24, 0x7f
    5e2a:	98 ab       	sts	0x58, r25
    5e2c:	a9 ab       	sts	0x59, r26
    5e2e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5e30:	11 e0       	ldi	r17, 0x01	; 1
    5e32:	6f a5       	lds	r22, 0x6f
    5e34:	78 a9       	sts	0x48, r23
    5e36:	89 a9       	sts	0x49, r24
    5e38:	9a a9       	sts	0x4a, r25
    5e3a:	20 e0       	ldi	r18, 0x00	; 0
    5e3c:	30 e0       	ldi	r19, 0x00	; 0
    5e3e:	40 e8       	ldi	r20, 0x80	; 128
    5e40:	5f e3       	ldi	r21, 0x3F	; 63
    5e42:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5e46:	88 23       	and	r24, r24
    5e48:	0c f0       	brlt	.+2      	; 0x5e4c <drop+0x392>
    5e4a:	10 e0       	ldi	r17, 0x00	; 0
    5e4c:	11 23       	and	r17, r17
    5e4e:	29 f0       	breq	.+10     	; 0x5e5a <drop+0x3a0>
		__ticks = 1;
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	9c ab       	sts	0x5c, r25
    5e56:	8b ab       	sts	0x5b, r24
    5e58:	46 c0       	rjmp	.+140    	; 0x5ee6 <drop+0x42c>
	else if (__tmp > 65535)
    5e5a:	11 e0       	ldi	r17, 0x01	; 1
    5e5c:	6f a5       	lds	r22, 0x6f
    5e5e:	78 a9       	sts	0x48, r23
    5e60:	89 a9       	sts	0x49, r24
    5e62:	9a a9       	sts	0x4a, r25
    5e64:	20 e0       	ldi	r18, 0x00	; 0
    5e66:	3f ef       	ldi	r19, 0xFF	; 255
    5e68:	4f e7       	ldi	r20, 0x7F	; 127
    5e6a:	57 e4       	ldi	r21, 0x47	; 71
    5e6c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5e70:	18 16       	cp	r1, r24
    5e72:	0c f0       	brlt	.+2      	; 0x5e76 <drop+0x3bc>
    5e74:	10 e0       	ldi	r17, 0x00	; 0
    5e76:	11 23       	and	r17, r17
    5e78:	61 f1       	breq	.+88     	; 0x5ed2 <drop+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e7a:	6b a5       	lds	r22, 0x6b
    5e7c:	7c a5       	lds	r23, 0x6c
    5e7e:	8d a5       	lds	r24, 0x6d
    5e80:	9e a5       	lds	r25, 0x6e
    5e82:	20 e0       	ldi	r18, 0x00	; 0
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	40 e2       	ldi	r20, 0x20	; 32
    5e88:	51 e4       	ldi	r21, 0x41	; 65
    5e8a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5e8e:	dc 01       	movw	r26, r24
    5e90:	cb 01       	movw	r24, r22
    5e92:	bc 01       	movw	r22, r24
    5e94:	cd 01       	movw	r24, r26
    5e96:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	cb 01       	movw	r24, r22
    5e9e:	9c ab       	sts	0x5c, r25
    5ea0:	8b ab       	sts	0x5b, r24
    5ea2:	12 c0       	rjmp	.+36     	; 0x5ec8 <drop+0x40e>
    5ea4:	80 e7       	ldi	r24, 0x70	; 112
    5ea6:	91 e0       	ldi	r25, 0x01	; 1
    5ea8:	9e ab       	sts	0x5e, r25
    5eaa:	8d ab       	sts	0x5d, r24
    5eac:	8d a9       	sts	0x4d, r24
    5eae:	9e a9       	sts	0x4e, r25
    5eb0:	8c 01       	movw	r16, r24
    5eb2:	c8 01       	movw	r24, r16
    5eb4:	01 97       	sbiw	r24, 0x01	; 1
    5eb6:	f1 f7       	brne	.-4      	; 0x5eb4 <drop+0x3fa>
    5eb8:	8c 01       	movw	r16, r24
    5eba:	1e ab       	sts	0x5e, r17
    5ebc:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ebe:	8b a9       	sts	0x4b, r24
    5ec0:	9c a9       	sts	0x4c, r25
    5ec2:	01 97       	sbiw	r24, 0x01	; 1
    5ec4:	9c ab       	sts	0x5c, r25
    5ec6:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ec8:	8b a9       	sts	0x4b, r24
    5eca:	9c a9       	sts	0x4c, r25
    5ecc:	00 97       	sbiw	r24, 0x00	; 0
    5ece:	51 f7       	brne	.-44     	; 0x5ea4 <drop+0x3ea>
    5ed0:	17 c0       	rjmp	.+46     	; 0x5f00 <drop+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ed2:	6f a5       	lds	r22, 0x6f
    5ed4:	78 a9       	sts	0x48, r23
    5ed6:	89 a9       	sts	0x49, r24
    5ed8:	9a a9       	sts	0x4a, r25
    5eda:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5ede:	dc 01       	movw	r26, r24
    5ee0:	cb 01       	movw	r24, r22
    5ee2:	9c ab       	sts	0x5c, r25
    5ee4:	8b ab       	sts	0x5b, r24
    5ee6:	8b a9       	sts	0x4b, r24
    5ee8:	9c a9       	sts	0x4c, r25
    5eea:	98 af       	sts	0x78, r25
    5eec:	8f ab       	sts	0x5f, r24
    5eee:	8f a9       	sts	0x4f, r24
    5ef0:	98 ad       	sts	0x68, r25
    5ef2:	8c 01       	movw	r16, r24
    5ef4:	f8 01       	movw	r30, r16
    5ef6:	31 97       	sbiw	r30, 0x01	; 1
    5ef8:	f1 f7       	brne	.-4      	; 0x5ef6 <drop+0x43c>
    5efa:	8f 01       	movw	r16, r30
    5efc:	18 af       	sts	0x78, r17
    5efe:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	servo_2(0);
    5f00:	80 e0       	ldi	r24, 0x00	; 0
    5f02:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <servo_2>
    5f06:	80 e0       	ldi	r24, 0x00	; 0
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	a6 e9       	ldi	r26, 0x96	; 150
    5f0c:	b3 e4       	ldi	r27, 0x43	; 67
    5f0e:	89 af       	sts	0x79, r24
    5f10:	9a af       	sts	0x7a, r25
    5f12:	ab af       	sts	0x7b, r26
    5f14:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5f16:	69 ad       	sts	0x69, r22
    5f18:	7a ad       	sts	0x6a, r23
    5f1a:	8b ad       	sts	0x6b, r24
    5f1c:	9c ad       	sts	0x6c, r25
    5f1e:	26 e6       	ldi	r18, 0x66	; 102
    5f20:	36 e6       	ldi	r19, 0x66	; 102
    5f22:	46 e6       	ldi	r20, 0x66	; 102
    5f24:	55 e4       	ldi	r21, 0x45	; 69
    5f26:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5f2a:	dc 01       	movw	r26, r24
    5f2c:	cb 01       	movw	r24, r22
    5f2e:	9e 01       	movw	r18, r28
    5f30:	23 5c       	subi	r18, 0xC3	; 195
    5f32:	3f 4f       	sbci	r19, 0xFF	; 255
    5f34:	f9 01       	movw	r30, r18
    5f36:	80 83       	st	Z, r24
    5f38:	91 83       	std	Z+1, r25	; 0x01
    5f3a:	a2 83       	std	Z+2, r26	; 0x02
    5f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f3e:	11 e0       	ldi	r17, 0x01	; 1
    5f40:	ce 01       	movw	r24, r28
    5f42:	cd 96       	adiw	r24, 0x3d	; 61
    5f44:	fc 01       	movw	r30, r24
    5f46:	60 81       	ld	r22, Z
    5f48:	71 81       	ldd	r23, Z+1	; 0x01
    5f4a:	82 81       	ldd	r24, Z+2	; 0x02
    5f4c:	93 81       	ldd	r25, Z+3	; 0x03
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
    5f50:	30 e0       	ldi	r19, 0x00	; 0
    5f52:	40 e8       	ldi	r20, 0x80	; 128
    5f54:	5f e3       	ldi	r21, 0x3F	; 63
    5f56:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    5f5a:	88 23       	and	r24, r24
    5f5c:	0c f0       	brlt	.+2      	; 0x5f60 <drop+0x4a6>
    5f5e:	10 e0       	ldi	r17, 0x00	; 0
    5f60:	11 23       	and	r17, r17
    5f62:	49 f0       	breq	.+18     	; 0x5f76 <drop+0x4bc>
		__ticks = 1;
    5f64:	ce 01       	movw	r24, r28
    5f66:	8f 5b       	subi	r24, 0xBF	; 191
    5f68:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6a:	21 e0       	ldi	r18, 0x01	; 1
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	fc 01       	movw	r30, r24
    5f70:	31 83       	std	Z+1, r19	; 0x01
    5f72:	20 83       	st	Z, r18
    5f74:	6e c0       	rjmp	.+220    	; 0x6052 <drop+0x598>
	else if (__tmp > 65535)
    5f76:	11 e0       	ldi	r17, 0x01	; 1
    5f78:	ce 01       	movw	r24, r28
    5f7a:	cd 96       	adiw	r24, 0x3d	; 61
    5f7c:	fc 01       	movw	r30, r24
    5f7e:	60 81       	ld	r22, Z
    5f80:	71 81       	ldd	r23, Z+1	; 0x01
    5f82:	82 81       	ldd	r24, Z+2	; 0x02
    5f84:	93 81       	ldd	r25, Z+3	; 0x03
    5f86:	20 e0       	ldi	r18, 0x00	; 0
    5f88:	3f ef       	ldi	r19, 0xFF	; 255
    5f8a:	4f e7       	ldi	r20, 0x7F	; 127
    5f8c:	57 e4       	ldi	r21, 0x47	; 71
    5f8e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    5f92:	18 16       	cp	r1, r24
    5f94:	0c f0       	brlt	.+2      	; 0x5f98 <drop+0x4de>
    5f96:	10 e0       	ldi	r17, 0x00	; 0
    5f98:	11 23       	and	r17, r17
    5f9a:	09 f4       	brne	.+2      	; 0x5f9e <drop+0x4e4>
    5f9c:	49 c0       	rjmp	.+146    	; 0x6030 <drop+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f9e:	69 ad       	sts	0x69, r22
    5fa0:	7a ad       	sts	0x6a, r23
    5fa2:	8b ad       	sts	0x6b, r24
    5fa4:	9c ad       	sts	0x6c, r25
    5fa6:	20 e0       	ldi	r18, 0x00	; 0
    5fa8:	30 e0       	ldi	r19, 0x00	; 0
    5faa:	40 e2       	ldi	r20, 0x20	; 32
    5fac:	51 e4       	ldi	r21, 0x41	; 65
    5fae:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    5fb2:	dc 01       	movw	r26, r24
    5fb4:	cb 01       	movw	r24, r22
    5fb6:	8e 01       	movw	r16, r28
    5fb8:	0f 5b       	subi	r16, 0xBF	; 191
    5fba:	1f 4f       	sbci	r17, 0xFF	; 255
    5fbc:	bc 01       	movw	r22, r24
    5fbe:	cd 01       	movw	r24, r26
    5fc0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    5fc4:	dc 01       	movw	r26, r24
    5fc6:	cb 01       	movw	r24, r22
    5fc8:	f8 01       	movw	r30, r16
    5fca:	91 83       	std	Z+1, r25	; 0x01
    5fcc:	80 83       	st	Z, r24
    5fce:	27 c0       	rjmp	.+78     	; 0x601e <drop+0x564>
    5fd0:	ce 01       	movw	r24, r28
    5fd2:	8d 5b       	subi	r24, 0xBD	; 189
    5fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd6:	20 e7       	ldi	r18, 0x70	; 112
    5fd8:	31 e0       	ldi	r19, 0x01	; 1
    5fda:	fc 01       	movw	r30, r24
    5fdc:	31 83       	std	Z+1, r19	; 0x01
    5fde:	20 83       	st	Z, r18
    5fe0:	ce 01       	movw	r24, r28
    5fe2:	8d 5b       	subi	r24, 0xBD	; 189
    5fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe6:	fc 01       	movw	r30, r24
    5fe8:	80 81       	ld	r24, Z
    5fea:	91 81       	ldd	r25, Z+1	; 0x01
    5fec:	8c 01       	movw	r16, r24
    5fee:	c8 01       	movw	r24, r16
    5ff0:	01 97       	sbiw	r24, 0x01	; 1
    5ff2:	f1 f7       	brne	.-4      	; 0x5ff0 <drop+0x536>
    5ff4:	8c 01       	movw	r16, r24
    5ff6:	ce 01       	movw	r24, r28
    5ff8:	8d 5b       	subi	r24, 0xBD	; 189
    5ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    5ffc:	fc 01       	movw	r30, r24
    5ffe:	11 83       	std	Z+1, r17	; 0x01
    6000:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6002:	ce 01       	movw	r24, r28
    6004:	8f 5b       	subi	r24, 0xBF	; 191
    6006:	9f 4f       	sbci	r25, 0xFF	; 255
    6008:	9e 01       	movw	r18, r28
    600a:	2f 5b       	subi	r18, 0xBF	; 191
    600c:	3f 4f       	sbci	r19, 0xFF	; 255
    600e:	f9 01       	movw	r30, r18
    6010:	20 81       	ld	r18, Z
    6012:	31 81       	ldd	r19, Z+1	; 0x01
    6014:	21 50       	subi	r18, 0x01	; 1
    6016:	30 40       	sbci	r19, 0x00	; 0
    6018:	fc 01       	movw	r30, r24
    601a:	31 83       	std	Z+1, r19	; 0x01
    601c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    601e:	ce 01       	movw	r24, r28
    6020:	8f 5b       	subi	r24, 0xBF	; 191
    6022:	9f 4f       	sbci	r25, 0xFF	; 255
    6024:	fc 01       	movw	r30, r24
    6026:	80 81       	ld	r24, Z
    6028:	91 81       	ldd	r25, Z+1	; 0x01
    602a:	00 97       	sbiw	r24, 0x00	; 0
    602c:	89 f6       	brne	.-94     	; 0x5fd0 <drop+0x516>
    602e:	2e c0       	rjmp	.+92     	; 0x608c <drop+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6030:	8e 01       	movw	r16, r28
    6032:	0f 5b       	subi	r16, 0xBF	; 191
    6034:	1f 4f       	sbci	r17, 0xFF	; 255
    6036:	ce 01       	movw	r24, r28
    6038:	cd 96       	adiw	r24, 0x3d	; 61
    603a:	fc 01       	movw	r30, r24
    603c:	60 81       	ld	r22, Z
    603e:	71 81       	ldd	r23, Z+1	; 0x01
    6040:	82 81       	ldd	r24, Z+2	; 0x02
    6042:	93 81       	ldd	r25, Z+3	; 0x03
    6044:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6048:	dc 01       	movw	r26, r24
    604a:	cb 01       	movw	r24, r22
    604c:	f8 01       	movw	r30, r16
    604e:	91 83       	std	Z+1, r25	; 0x01
    6050:	80 83       	st	Z, r24
    6052:	ce 01       	movw	r24, r28
    6054:	8b 5b       	subi	r24, 0xBB	; 187
    6056:	9f 4f       	sbci	r25, 0xFF	; 255
    6058:	9e 01       	movw	r18, r28
    605a:	2f 5b       	subi	r18, 0xBF	; 191
    605c:	3f 4f       	sbci	r19, 0xFF	; 255
    605e:	f9 01       	movw	r30, r18
    6060:	20 81       	ld	r18, Z
    6062:	31 81       	ldd	r19, Z+1	; 0x01
    6064:	fc 01       	movw	r30, r24
    6066:	31 83       	std	Z+1, r19	; 0x01
    6068:	20 83       	st	Z, r18
    606a:	ce 01       	movw	r24, r28
    606c:	8b 5b       	subi	r24, 0xBB	; 187
    606e:	9f 4f       	sbci	r25, 0xFF	; 255
    6070:	fc 01       	movw	r30, r24
    6072:	80 81       	ld	r24, Z
    6074:	91 81       	ldd	r25, Z+1	; 0x01
    6076:	8c 01       	movw	r16, r24
    6078:	c8 01       	movw	r24, r16
    607a:	01 97       	sbiw	r24, 0x01	; 1
    607c:	f1 f7       	brne	.-4      	; 0x607a <drop+0x5c0>
    607e:	8c 01       	movw	r16, r24
    6080:	ce 01       	movw	r24, r28
    6082:	8b 5b       	subi	r24, 0xBB	; 187
    6084:	9f 4f       	sbci	r25, 0xFF	; 255
    6086:	fc 01       	movw	r30, r24
    6088:	11 83       	std	Z+1, r17	; 0x01
    608a:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    608c:	ca 5b       	subi	r28, 0xBA	; 186
    608e:	df 4f       	sbci	r29, 0xFF	; 255
    6090:	0f b6       	in	r0, 0x3f	; 63
    6092:	f8 94       	cli
    6094:	de bf       	out	0x3e, r29	; 62
    6096:	0f be       	out	0x3f, r0	; 63
    6098:	cd bf       	out	0x3d, r28	; 61
    609a:	df 91       	pop	r29
    609c:	cf 91       	pop	r28
    609e:	1f 91       	pop	r17
    60a0:	0f 91       	pop	r16
    60a2:	08 95       	ret

000060a4 <front>:

void front()
{
    60a4:	0f 93       	push	r16
    60a6:	1f 93       	push	r17
    60a8:	cf 93       	push	r28
    60aa:	df 93       	push	r29
    60ac:	cd b7       	in	r28, 0x3d	; 61
    60ae:	de b7       	in	r29, 0x3e	; 62
    60b0:	e8 97       	sbiw	r28, 0x38	; 56
    60b2:	0f b6       	in	r0, 0x3f	; 63
    60b4:	f8 94       	cli
    60b6:	de bf       	out	0x3e, r29	; 62
    60b8:	0f be       	out	0x3f, r0	; 63
    60ba:	cd bf       	out	0x3d, r28	; 61
	gripper_open();
    60bc:	0e 94 ab 1c 	call	0x3956	; 0x3956 <gripper_open>
    60c0:	80 e0       	ldi	r24, 0x00	; 0
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	a6 e9       	ldi	r26, 0x96	; 150
    60c6:	b3 e4       	ldi	r27, 0x43	; 67
    60c8:	89 83       	std	Y+1, r24	; 0x01
    60ca:	9a 83       	std	Y+2, r25	; 0x02
    60cc:	ab 83       	std	Y+3, r26	; 0x03
    60ce:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    60d0:	69 81       	ldd	r22, Y+1	; 0x01
    60d2:	7a 81       	ldd	r23, Y+2	; 0x02
    60d4:	8b 81       	ldd	r24, Y+3	; 0x03
    60d6:	9c 81       	ldd	r25, Y+4	; 0x04
    60d8:	26 e6       	ldi	r18, 0x66	; 102
    60da:	36 e6       	ldi	r19, 0x66	; 102
    60dc:	46 e6       	ldi	r20, 0x66	; 102
    60de:	55 e4       	ldi	r21, 0x45	; 69
    60e0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    60e4:	dc 01       	movw	r26, r24
    60e6:	cb 01       	movw	r24, r22
    60e8:	8d 83       	std	Y+5, r24	; 0x05
    60ea:	9e 83       	std	Y+6, r25	; 0x06
    60ec:	af 83       	std	Y+7, r26	; 0x07
    60ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    60f0:	11 e0       	ldi	r17, 0x01	; 1
    60f2:	6d 81       	ldd	r22, Y+5	; 0x05
    60f4:	7e 81       	ldd	r23, Y+6	; 0x06
    60f6:	8f 81       	ldd	r24, Y+7	; 0x07
    60f8:	98 85       	ldd	r25, Y+8	; 0x08
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	40 e8       	ldi	r20, 0x80	; 128
    6100:	5f e3       	ldi	r21, 0x3F	; 63
    6102:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6106:	88 23       	and	r24, r24
    6108:	0c f0       	brlt	.+2      	; 0x610c <front+0x68>
    610a:	10 e0       	ldi	r17, 0x00	; 0
    610c:	11 23       	and	r17, r17
    610e:	29 f0       	breq	.+10     	; 0x611a <front+0x76>
		__ticks = 1;
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	9a 87       	std	Y+10, r25	; 0x0a
    6116:	89 87       	std	Y+9, r24	; 0x09
    6118:	46 c0       	rjmp	.+140    	; 0x61a6 <front+0x102>
	else if (__tmp > 65535)
    611a:	11 e0       	ldi	r17, 0x01	; 1
    611c:	6d 81       	ldd	r22, Y+5	; 0x05
    611e:	7e 81       	ldd	r23, Y+6	; 0x06
    6120:	8f 81       	ldd	r24, Y+7	; 0x07
    6122:	98 85       	ldd	r25, Y+8	; 0x08
    6124:	20 e0       	ldi	r18, 0x00	; 0
    6126:	3f ef       	ldi	r19, 0xFF	; 255
    6128:	4f e7       	ldi	r20, 0x7F	; 127
    612a:	57 e4       	ldi	r21, 0x47	; 71
    612c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6130:	18 16       	cp	r1, r24
    6132:	0c f0       	brlt	.+2      	; 0x6136 <front+0x92>
    6134:	10 e0       	ldi	r17, 0x00	; 0
    6136:	11 23       	and	r17, r17
    6138:	61 f1       	breq	.+88     	; 0x6192 <front+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    613a:	69 81       	ldd	r22, Y+1	; 0x01
    613c:	7a 81       	ldd	r23, Y+2	; 0x02
    613e:	8b 81       	ldd	r24, Y+3	; 0x03
    6140:	9c 81       	ldd	r25, Y+4	; 0x04
    6142:	20 e0       	ldi	r18, 0x00	; 0
    6144:	30 e0       	ldi	r19, 0x00	; 0
    6146:	40 e2       	ldi	r20, 0x20	; 32
    6148:	51 e4       	ldi	r21, 0x41	; 65
    614a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    614e:	dc 01       	movw	r26, r24
    6150:	cb 01       	movw	r24, r22
    6152:	bc 01       	movw	r22, r24
    6154:	cd 01       	movw	r24, r26
    6156:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    615a:	dc 01       	movw	r26, r24
    615c:	cb 01       	movw	r24, r22
    615e:	9a 87       	std	Y+10, r25	; 0x0a
    6160:	89 87       	std	Y+9, r24	; 0x09
    6162:	12 c0       	rjmp	.+36     	; 0x6188 <front+0xe4>
    6164:	80 e7       	ldi	r24, 0x70	; 112
    6166:	91 e0       	ldi	r25, 0x01	; 1
    6168:	9c 87       	std	Y+12, r25	; 0x0c
    616a:	8b 87       	std	Y+11, r24	; 0x0b
    616c:	8b 85       	ldd	r24, Y+11	; 0x0b
    616e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6170:	8c 01       	movw	r16, r24
    6172:	c8 01       	movw	r24, r16
    6174:	01 97       	sbiw	r24, 0x01	; 1
    6176:	f1 f7       	brne	.-4      	; 0x6174 <front+0xd0>
    6178:	8c 01       	movw	r16, r24
    617a:	1c 87       	std	Y+12, r17	; 0x0c
    617c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    617e:	89 85       	ldd	r24, Y+9	; 0x09
    6180:	9a 85       	ldd	r25, Y+10	; 0x0a
    6182:	01 97       	sbiw	r24, 0x01	; 1
    6184:	9a 87       	std	Y+10, r25	; 0x0a
    6186:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6188:	89 85       	ldd	r24, Y+9	; 0x09
    618a:	9a 85       	ldd	r25, Y+10	; 0x0a
    618c:	00 97       	sbiw	r24, 0x00	; 0
    618e:	51 f7       	brne	.-44     	; 0x6164 <front+0xc0>
    6190:	17 c0       	rjmp	.+46     	; 0x61c0 <front+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6192:	6d 81       	ldd	r22, Y+5	; 0x05
    6194:	7e 81       	ldd	r23, Y+6	; 0x06
    6196:	8f 81       	ldd	r24, Y+7	; 0x07
    6198:	98 85       	ldd	r25, Y+8	; 0x08
    619a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    619e:	dc 01       	movw	r26, r24
    61a0:	cb 01       	movw	r24, r22
    61a2:	9a 87       	std	Y+10, r25	; 0x0a
    61a4:	89 87       	std	Y+9, r24	; 0x09
    61a6:	89 85       	ldd	r24, Y+9	; 0x09
    61a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    61aa:	9e 87       	std	Y+14, r25	; 0x0e
    61ac:	8d 87       	std	Y+13, r24	; 0x0d
    61ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    61b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    61b2:	8c 01       	movw	r16, r24
    61b4:	c8 01       	movw	r24, r16
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	f1 f7       	brne	.-4      	; 0x61b6 <front+0x112>
    61ba:	8c 01       	movw	r16, r24
    61bc:	1e 87       	std	Y+14, r17	; 0x0e
    61be:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_forward();
    61c0:	0e 94 76 22 	call	0x44ec	; 0x44ec <arm_forward>
    61c4:	80 e0       	ldi	r24, 0x00	; 0
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	a6 e9       	ldi	r26, 0x96	; 150
    61ca:	b3 e4       	ldi	r27, 0x43	; 67
    61cc:	8f 87       	std	Y+15, r24	; 0x0f
    61ce:	98 8b       	std	Y+16, r25	; 0x10
    61d0:	a9 8b       	std	Y+17, r26	; 0x11
    61d2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    61d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    61d6:	78 89       	ldd	r23, Y+16	; 0x10
    61d8:	89 89       	ldd	r24, Y+17	; 0x11
    61da:	9a 89       	ldd	r25, Y+18	; 0x12
    61dc:	26 e6       	ldi	r18, 0x66	; 102
    61de:	36 e6       	ldi	r19, 0x66	; 102
    61e0:	46 e6       	ldi	r20, 0x66	; 102
    61e2:	55 e4       	ldi	r21, 0x45	; 69
    61e4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    61e8:	dc 01       	movw	r26, r24
    61ea:	cb 01       	movw	r24, r22
    61ec:	8b 8b       	std	Y+19, r24	; 0x13
    61ee:	9c 8b       	std	Y+20, r25	; 0x14
    61f0:	ad 8b       	std	Y+21, r26	; 0x15
    61f2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    61f4:	11 e0       	ldi	r17, 0x01	; 1
    61f6:	6b 89       	ldd	r22, Y+19	; 0x13
    61f8:	7c 89       	ldd	r23, Y+20	; 0x14
    61fa:	8d 89       	ldd	r24, Y+21	; 0x15
    61fc:	9e 89       	ldd	r25, Y+22	; 0x16
    61fe:	20 e0       	ldi	r18, 0x00	; 0
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	40 e8       	ldi	r20, 0x80	; 128
    6204:	5f e3       	ldi	r21, 0x3F	; 63
    6206:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    620a:	88 23       	and	r24, r24
    620c:	0c f0       	brlt	.+2      	; 0x6210 <front+0x16c>
    620e:	10 e0       	ldi	r17, 0x00	; 0
    6210:	11 23       	and	r17, r17
    6212:	29 f0       	breq	.+10     	; 0x621e <front+0x17a>
		__ticks = 1;
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	98 8f       	std	Y+24, r25	; 0x18
    621a:	8f 8b       	std	Y+23, r24	; 0x17
    621c:	46 c0       	rjmp	.+140    	; 0x62aa <front+0x206>
	else if (__tmp > 65535)
    621e:	11 e0       	ldi	r17, 0x01	; 1
    6220:	6b 89       	ldd	r22, Y+19	; 0x13
    6222:	7c 89       	ldd	r23, Y+20	; 0x14
    6224:	8d 89       	ldd	r24, Y+21	; 0x15
    6226:	9e 89       	ldd	r25, Y+22	; 0x16
    6228:	20 e0       	ldi	r18, 0x00	; 0
    622a:	3f ef       	ldi	r19, 0xFF	; 255
    622c:	4f e7       	ldi	r20, 0x7F	; 127
    622e:	57 e4       	ldi	r21, 0x47	; 71
    6230:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6234:	18 16       	cp	r1, r24
    6236:	0c f0       	brlt	.+2      	; 0x623a <front+0x196>
    6238:	10 e0       	ldi	r17, 0x00	; 0
    623a:	11 23       	and	r17, r17
    623c:	61 f1       	breq	.+88     	; 0x6296 <front+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    623e:	6f 85       	ldd	r22, Y+15	; 0x0f
    6240:	78 89       	ldd	r23, Y+16	; 0x10
    6242:	89 89       	ldd	r24, Y+17	; 0x11
    6244:	9a 89       	ldd	r25, Y+18	; 0x12
    6246:	20 e0       	ldi	r18, 0x00	; 0
    6248:	30 e0       	ldi	r19, 0x00	; 0
    624a:	40 e2       	ldi	r20, 0x20	; 32
    624c:	51 e4       	ldi	r21, 0x41	; 65
    624e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6252:	dc 01       	movw	r26, r24
    6254:	cb 01       	movw	r24, r22
    6256:	bc 01       	movw	r22, r24
    6258:	cd 01       	movw	r24, r26
    625a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    625e:	dc 01       	movw	r26, r24
    6260:	cb 01       	movw	r24, r22
    6262:	98 8f       	std	Y+24, r25	; 0x18
    6264:	8f 8b       	std	Y+23, r24	; 0x17
    6266:	12 c0       	rjmp	.+36     	; 0x628c <front+0x1e8>
    6268:	80 e7       	ldi	r24, 0x70	; 112
    626a:	91 e0       	ldi	r25, 0x01	; 1
    626c:	9a 8f       	std	Y+26, r25	; 0x1a
    626e:	89 8f       	std	Y+25, r24	; 0x19
    6270:	89 8d       	ldd	r24, Y+25	; 0x19
    6272:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6274:	8c 01       	movw	r16, r24
    6276:	c8 01       	movw	r24, r16
    6278:	01 97       	sbiw	r24, 0x01	; 1
    627a:	f1 f7       	brne	.-4      	; 0x6278 <front+0x1d4>
    627c:	8c 01       	movw	r16, r24
    627e:	1a 8f       	std	Y+26, r17	; 0x1a
    6280:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6282:	8f 89       	ldd	r24, Y+23	; 0x17
    6284:	98 8d       	ldd	r25, Y+24	; 0x18
    6286:	01 97       	sbiw	r24, 0x01	; 1
    6288:	98 8f       	std	Y+24, r25	; 0x18
    628a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    628c:	8f 89       	ldd	r24, Y+23	; 0x17
    628e:	98 8d       	ldd	r25, Y+24	; 0x18
    6290:	00 97       	sbiw	r24, 0x00	; 0
    6292:	51 f7       	brne	.-44     	; 0x6268 <front+0x1c4>
    6294:	17 c0       	rjmp	.+46     	; 0x62c4 <front+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6296:	6b 89       	ldd	r22, Y+19	; 0x13
    6298:	7c 89       	ldd	r23, Y+20	; 0x14
    629a:	8d 89       	ldd	r24, Y+21	; 0x15
    629c:	9e 89       	ldd	r25, Y+22	; 0x16
    629e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    62a2:	dc 01       	movw	r26, r24
    62a4:	cb 01       	movw	r24, r22
    62a6:	98 8f       	std	Y+24, r25	; 0x18
    62a8:	8f 8b       	std	Y+23, r24	; 0x17
    62aa:	8f 89       	ldd	r24, Y+23	; 0x17
    62ac:	98 8d       	ldd	r25, Y+24	; 0x18
    62ae:	9c 8f       	std	Y+28, r25	; 0x1c
    62b0:	8b 8f       	std	Y+27, r24	; 0x1b
    62b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62b6:	8c 01       	movw	r16, r24
    62b8:	c8 01       	movw	r24, r16
    62ba:	01 97       	sbiw	r24, 0x01	; 1
    62bc:	f1 f7       	brne	.-4      	; 0x62ba <front+0x216>
    62be:	8c 01       	movw	r16, r24
    62c0:	1c 8f       	std	Y+28, r17	; 0x1c
    62c2:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	gripper_close();
    62c4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <gripper_close>
    62c8:	80 e0       	ldi	r24, 0x00	; 0
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	a6 e9       	ldi	r26, 0x96	; 150
    62ce:	b3 e4       	ldi	r27, 0x43	; 67
    62d0:	8d 8f       	std	Y+29, r24	; 0x1d
    62d2:	9e 8f       	std	Y+30, r25	; 0x1e
    62d4:	af 8f       	std	Y+31, r26	; 0x1f
    62d6:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    62d8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    62da:	7e 8d       	ldd	r23, Y+30	; 0x1e
    62dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    62de:	98 a1       	lds	r25, 0x48
    62e0:	26 e6       	ldi	r18, 0x66	; 102
    62e2:	36 e6       	ldi	r19, 0x66	; 102
    62e4:	46 e6       	ldi	r20, 0x66	; 102
    62e6:	55 e4       	ldi	r21, 0x45	; 69
    62e8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    62ec:	dc 01       	movw	r26, r24
    62ee:	cb 01       	movw	r24, r22
    62f0:	89 a3       	lds	r24, 0x59
    62f2:	9a a3       	lds	r25, 0x5a
    62f4:	ab a3       	lds	r26, 0x5b
    62f6:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    62f8:	11 e0       	ldi	r17, 0x01	; 1
    62fa:	69 a1       	lds	r22, 0x49
    62fc:	7a a1       	lds	r23, 0x4a
    62fe:	8b a1       	lds	r24, 0x4b
    6300:	9c a1       	lds	r25, 0x4c
    6302:	20 e0       	ldi	r18, 0x00	; 0
    6304:	30 e0       	ldi	r19, 0x00	; 0
    6306:	40 e8       	ldi	r20, 0x80	; 128
    6308:	5f e3       	ldi	r21, 0x3F	; 63
    630a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    630e:	88 23       	and	r24, r24
    6310:	0c f0       	brlt	.+2      	; 0x6314 <front+0x270>
    6312:	10 e0       	ldi	r17, 0x00	; 0
    6314:	11 23       	and	r17, r17
    6316:	29 f0       	breq	.+10     	; 0x6322 <front+0x27e>
		__ticks = 1;
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	9e a3       	lds	r25, 0x5e
    631e:	8d a3       	lds	r24, 0x5d
    6320:	46 c0       	rjmp	.+140    	; 0x63ae <front+0x30a>
	else if (__tmp > 65535)
    6322:	11 e0       	ldi	r17, 0x01	; 1
    6324:	69 a1       	lds	r22, 0x49
    6326:	7a a1       	lds	r23, 0x4a
    6328:	8b a1       	lds	r24, 0x4b
    632a:	9c a1       	lds	r25, 0x4c
    632c:	20 e0       	ldi	r18, 0x00	; 0
    632e:	3f ef       	ldi	r19, 0xFF	; 255
    6330:	4f e7       	ldi	r20, 0x7F	; 127
    6332:	57 e4       	ldi	r21, 0x47	; 71
    6334:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6338:	18 16       	cp	r1, r24
    633a:	0c f0       	brlt	.+2      	; 0x633e <front+0x29a>
    633c:	10 e0       	ldi	r17, 0x00	; 0
    633e:	11 23       	and	r17, r17
    6340:	61 f1       	breq	.+88     	; 0x639a <front+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6342:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6344:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6346:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6348:	98 a1       	lds	r25, 0x48
    634a:	20 e0       	ldi	r18, 0x00	; 0
    634c:	30 e0       	ldi	r19, 0x00	; 0
    634e:	40 e2       	ldi	r20, 0x20	; 32
    6350:	51 e4       	ldi	r21, 0x41	; 65
    6352:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6356:	dc 01       	movw	r26, r24
    6358:	cb 01       	movw	r24, r22
    635a:	bc 01       	movw	r22, r24
    635c:	cd 01       	movw	r24, r26
    635e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6362:	dc 01       	movw	r26, r24
    6364:	cb 01       	movw	r24, r22
    6366:	9e a3       	lds	r25, 0x5e
    6368:	8d a3       	lds	r24, 0x5d
    636a:	12 c0       	rjmp	.+36     	; 0x6390 <front+0x2ec>
    636c:	80 e7       	ldi	r24, 0x70	; 112
    636e:	91 e0       	ldi	r25, 0x01	; 1
    6370:	98 a7       	lds	r25, 0x78
    6372:	8f a3       	lds	r24, 0x5f
    6374:	8f a1       	lds	r24, 0x4f
    6376:	98 a5       	lds	r25, 0x68
    6378:	8c 01       	movw	r16, r24
    637a:	c8 01       	movw	r24, r16
    637c:	01 97       	sbiw	r24, 0x01	; 1
    637e:	f1 f7       	brne	.-4      	; 0x637c <front+0x2d8>
    6380:	8c 01       	movw	r16, r24
    6382:	18 a7       	lds	r17, 0x78
    6384:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6386:	8d a1       	lds	r24, 0x4d
    6388:	9e a1       	lds	r25, 0x4e
    638a:	01 97       	sbiw	r24, 0x01	; 1
    638c:	9e a3       	lds	r25, 0x5e
    638e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6390:	8d a1       	lds	r24, 0x4d
    6392:	9e a1       	lds	r25, 0x4e
    6394:	00 97       	sbiw	r24, 0x00	; 0
    6396:	51 f7       	brne	.-44     	; 0x636c <front+0x2c8>
    6398:	17 c0       	rjmp	.+46     	; 0x63c8 <front+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    639a:	69 a1       	lds	r22, 0x49
    639c:	7a a1       	lds	r23, 0x4a
    639e:	8b a1       	lds	r24, 0x4b
    63a0:	9c a1       	lds	r25, 0x4c
    63a2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    63a6:	dc 01       	movw	r26, r24
    63a8:	cb 01       	movw	r24, r22
    63aa:	9e a3       	lds	r25, 0x5e
    63ac:	8d a3       	lds	r24, 0x5d
    63ae:	8d a1       	lds	r24, 0x4d
    63b0:	9e a1       	lds	r25, 0x4e
    63b2:	9a a7       	lds	r25, 0x7a
    63b4:	89 a7       	lds	r24, 0x79
    63b6:	89 a5       	lds	r24, 0x69
    63b8:	9a a5       	lds	r25, 0x6a
    63ba:	8c 01       	movw	r16, r24
    63bc:	c8 01       	movw	r24, r16
    63be:	01 97       	sbiw	r24, 0x01	; 1
    63c0:	f1 f7       	brne	.-4      	; 0x63be <front+0x31a>
    63c2:	8c 01       	movw	r16, r24
    63c4:	1a a7       	lds	r17, 0x7a
    63c6:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	arm_backward();
    63c8:	0e 94 9e 23 	call	0x473c	; 0x473c <arm_backward>
    63cc:	80 e0       	ldi	r24, 0x00	; 0
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	a6 e9       	ldi	r26, 0x96	; 150
    63d2:	b3 e4       	ldi	r27, 0x43	; 67
    63d4:	8b a7       	lds	r24, 0x7b
    63d6:	9c a7       	lds	r25, 0x7c
    63d8:	ad a7       	lds	r26, 0x7d
    63da:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    63dc:	6b a5       	lds	r22, 0x6b
    63de:	7c a5       	lds	r23, 0x6c
    63e0:	8d a5       	lds	r24, 0x6d
    63e2:	9e a5       	lds	r25, 0x6e
    63e4:	26 e6       	ldi	r18, 0x66	; 102
    63e6:	36 e6       	ldi	r19, 0x66	; 102
    63e8:	46 e6       	ldi	r20, 0x66	; 102
    63ea:	55 e4       	ldi	r21, 0x45	; 69
    63ec:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    63f0:	dc 01       	movw	r26, r24
    63f2:	cb 01       	movw	r24, r22
    63f4:	8f a7       	lds	r24, 0x7f
    63f6:	98 ab       	sts	0x58, r25
    63f8:	a9 ab       	sts	0x59, r26
    63fa:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    63fc:	11 e0       	ldi	r17, 0x01	; 1
    63fe:	6f a5       	lds	r22, 0x6f
    6400:	78 a9       	sts	0x48, r23
    6402:	89 a9       	sts	0x49, r24
    6404:	9a a9       	sts	0x4a, r25
    6406:	20 e0       	ldi	r18, 0x00	; 0
    6408:	30 e0       	ldi	r19, 0x00	; 0
    640a:	40 e8       	ldi	r20, 0x80	; 128
    640c:	5f e3       	ldi	r21, 0x3F	; 63
    640e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6412:	88 23       	and	r24, r24
    6414:	0c f0       	brlt	.+2      	; 0x6418 <front+0x374>
    6416:	10 e0       	ldi	r17, 0x00	; 0
    6418:	11 23       	and	r17, r17
    641a:	29 f0       	breq	.+10     	; 0x6426 <front+0x382>
		__ticks = 1;
    641c:	81 e0       	ldi	r24, 0x01	; 1
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	9c ab       	sts	0x5c, r25
    6422:	8b ab       	sts	0x5b, r24
    6424:	46 c0       	rjmp	.+140    	; 0x64b2 <front+0x40e>
	else if (__tmp > 65535)
    6426:	11 e0       	ldi	r17, 0x01	; 1
    6428:	6f a5       	lds	r22, 0x6f
    642a:	78 a9       	sts	0x48, r23
    642c:	89 a9       	sts	0x49, r24
    642e:	9a a9       	sts	0x4a, r25
    6430:	20 e0       	ldi	r18, 0x00	; 0
    6432:	3f ef       	ldi	r19, 0xFF	; 255
    6434:	4f e7       	ldi	r20, 0x7F	; 127
    6436:	57 e4       	ldi	r21, 0x47	; 71
    6438:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    643c:	18 16       	cp	r1, r24
    643e:	0c f0       	brlt	.+2      	; 0x6442 <front+0x39e>
    6440:	10 e0       	ldi	r17, 0x00	; 0
    6442:	11 23       	and	r17, r17
    6444:	61 f1       	breq	.+88     	; 0x649e <front+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6446:	6b a5       	lds	r22, 0x6b
    6448:	7c a5       	lds	r23, 0x6c
    644a:	8d a5       	lds	r24, 0x6d
    644c:	9e a5       	lds	r25, 0x6e
    644e:	20 e0       	ldi	r18, 0x00	; 0
    6450:	30 e0       	ldi	r19, 0x00	; 0
    6452:	40 e2       	ldi	r20, 0x20	; 32
    6454:	51 e4       	ldi	r21, 0x41	; 65
    6456:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    645a:	dc 01       	movw	r26, r24
    645c:	cb 01       	movw	r24, r22
    645e:	bc 01       	movw	r22, r24
    6460:	cd 01       	movw	r24, r26
    6462:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6466:	dc 01       	movw	r26, r24
    6468:	cb 01       	movw	r24, r22
    646a:	9c ab       	sts	0x5c, r25
    646c:	8b ab       	sts	0x5b, r24
    646e:	12 c0       	rjmp	.+36     	; 0x6494 <front+0x3f0>
    6470:	80 e7       	ldi	r24, 0x70	; 112
    6472:	91 e0       	ldi	r25, 0x01	; 1
    6474:	9e ab       	sts	0x5e, r25
    6476:	8d ab       	sts	0x5d, r24
    6478:	8d a9       	sts	0x4d, r24
    647a:	9e a9       	sts	0x4e, r25
    647c:	8c 01       	movw	r16, r24
    647e:	c8 01       	movw	r24, r16
    6480:	01 97       	sbiw	r24, 0x01	; 1
    6482:	f1 f7       	brne	.-4      	; 0x6480 <front+0x3dc>
    6484:	8c 01       	movw	r16, r24
    6486:	1e ab       	sts	0x5e, r17
    6488:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    648a:	8b a9       	sts	0x4b, r24
    648c:	9c a9       	sts	0x4c, r25
    648e:	01 97       	sbiw	r24, 0x01	; 1
    6490:	9c ab       	sts	0x5c, r25
    6492:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6494:	8b a9       	sts	0x4b, r24
    6496:	9c a9       	sts	0x4c, r25
    6498:	00 97       	sbiw	r24, 0x00	; 0
    649a:	51 f7       	brne	.-44     	; 0x6470 <front+0x3cc>
    649c:	17 c0       	rjmp	.+46     	; 0x64cc <front+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    649e:	6f a5       	lds	r22, 0x6f
    64a0:	78 a9       	sts	0x48, r23
    64a2:	89 a9       	sts	0x49, r24
    64a4:	9a a9       	sts	0x4a, r25
    64a6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    64aa:	dc 01       	movw	r26, r24
    64ac:	cb 01       	movw	r24, r22
    64ae:	9c ab       	sts	0x5c, r25
    64b0:	8b ab       	sts	0x5b, r24
    64b2:	8b a9       	sts	0x4b, r24
    64b4:	9c a9       	sts	0x4c, r25
    64b6:	98 af       	sts	0x78, r25
    64b8:	8f ab       	sts	0x5f, r24
    64ba:	8f a9       	sts	0x4f, r24
    64bc:	98 ad       	sts	0x68, r25
    64be:	8c 01       	movw	r16, r24
    64c0:	c8 01       	movw	r24, r16
    64c2:	01 97       	sbiw	r24, 0x01	; 1
    64c4:	f1 f7       	brne	.-4      	; 0x64c2 <front+0x41e>
    64c6:	8c 01       	movw	r16, r24
    64c8:	18 af       	sts	0x78, r17
    64ca:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
    64cc:	e8 96       	adiw	r28, 0x38	; 56
    64ce:	0f b6       	in	r0, 0x3f	; 63
    64d0:	f8 94       	cli
    64d2:	de bf       	out	0x3e, r29	; 62
    64d4:	0f be       	out	0x3f, r0	; 63
    64d6:	cd bf       	out	0x3d, r28	; 61
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	1f 91       	pop	r17
    64de:	0f 91       	pop	r16
    64e0:	08 95       	ret

000064e2 <read_line>:

*/

void read_line()

{
    64e2:	cf 93       	push	r28
    64e4:	df 93       	push	r29
    64e6:	cd b7       	in	r28, 0x3d	; 61
    64e8:	de b7       	in	r29, 0x3e	; 62

    Left_white_line = (int) ADC_Conversion(3); //Getting data of Left WL Sensor
    64ea:	83 e0       	ldi	r24, 0x03	; 3
    64ec:	0e 94 1a 1a 	call	0x3434	; 0x3434 <ADC_Conversion>
    64f0:	80 93 50 03 	sts	0x0350, r24

    Center_white_line = (int) ADC_Conversion(2); //Getting data of Center WL Sensor
    64f4:	82 e0       	ldi	r24, 0x02	; 2
    64f6:	0e 94 1a 1a 	call	0x3434	; 0x3434 <ADC_Conversion>
    64fa:	80 93 51 03 	sts	0x0351, r24

    Right_white_line = (int) ADC_Conversion(1); //Getting data of Right WL Sensor
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	0e 94 1a 1a 	call	0x3434	; 0x3434 <ADC_Conversion>
    6504:	80 93 52 03 	sts	0x0352, r24

}
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	08 95       	ret

0000650e <display_line>:

*/

void display_line()

 {
    650e:	cf 93       	push	r28
    6510:	df 93       	push	r29
    6512:	cd b7       	in	r28, 0x3d	; 61
    6514:	de b7       	in	r29, 0x3e	; 62

    lcd_print(1,1,Left_white_line,3);
    6516:	80 91 50 03 	lds	r24, 0x0350
    651a:	28 2f       	mov	r18, r24
    651c:	30 e0       	ldi	r19, 0x00	; 0
    651e:	81 e0       	ldi	r24, 0x01	; 1
    6520:	61 e0       	ldi	r22, 0x01	; 1
    6522:	a9 01       	movw	r20, r18
    6524:	23 e0       	ldi	r18, 0x03	; 3
    6526:	30 e0       	ldi	r19, 0x00	; 0
    6528:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,5,Center_white_line,3);
    652c:	80 91 51 03 	lds	r24, 0x0351
    6530:	28 2f       	mov	r18, r24
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	81 e0       	ldi	r24, 0x01	; 1
    6536:	65 e0       	ldi	r22, 0x05	; 5
    6538:	a9 01       	movw	r20, r18
    653a:	23 e0       	ldi	r18, 0x03	; 3
    653c:	30 e0       	ldi	r19, 0x00	; 0
    653e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,9,Right_white_line,3);
    6542:	80 91 52 03 	lds	r24, 0x0352
    6546:	28 2f       	mov	r18, r24
    6548:	30 e0       	ldi	r19, 0x00	; 0
    654a:	81 e0       	ldi	r24, 0x01	; 1
    654c:	69 e0       	ldi	r22, 0x09	; 9
    654e:	a9 01       	movw	r20, r18
    6550:	23 e0       	ldi	r18, 0x03	; 3
    6552:	30 e0       	ldi	r19, 0x00	; 0
    6554:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,1,line_cond,1);
    6558:	80 91 59 03 	lds	r24, 0x0359
    655c:	90 91 5a 03 	lds	r25, 0x035A
    6560:	9c 01       	movw	r18, r24
    6562:	81 e0       	ldi	r24, 0x01	; 1
    6564:	61 e0       	ldi	r22, 0x01	; 1
    6566:	a9 01       	movw	r20, r18
    6568:	21 e0       	ldi	r18, 0x01	; 1
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	08 95       	ret

00006576 <clear_count>:

*/

void clear_count()

{
    6576:	cf 93       	push	r28
    6578:	df 93       	push	r29
    657a:	cd b7       	in	r28, 0x3d	; 61
    657c:	de b7       	in	r29, 0x3e	; 62

    node = 0;
    657e:	10 92 6e 03 	sts	0x036E, r1
    6582:	10 92 6d 03 	sts	0x036D, r1

    node_flag = 0;
    6586:	10 92 8e 04 	sts	0x048E, r1
    658a:	10 92 8d 04 	sts	0x048D, r1

    left_flag = 0;
    658e:	10 92 60 03 	sts	0x0360, r1
    6592:	10 92 5f 03 	sts	0x035F, r1

    right_flag = 0;
    6596:	10 92 62 03 	sts	0x0362, r1
    659a:	10 92 61 03 	sts	0x0361, r1

}
    659e:	df 91       	pop	r29
    65a0:	cf 91       	pop	r28
    65a2:	08 95       	ret

000065a4 <enable_flags>:

*/

void enable_flags(int l_flag, int n_flag, int r_flag)

{
    65a4:	cf 93       	push	r28
    65a6:	df 93       	push	r29
    65a8:	00 d0       	rcall	.+0      	; 0x65aa <enable_flags+0x6>
    65aa:	00 d0       	rcall	.+0      	; 0x65ac <enable_flags+0x8>
    65ac:	cd b7       	in	r28, 0x3d	; 61
    65ae:	de b7       	in	r29, 0x3e	; 62
    65b0:	9a 83       	std	Y+2, r25	; 0x02
    65b2:	89 83       	std	Y+1, r24	; 0x01
    65b4:	7c 83       	std	Y+4, r23	; 0x04
    65b6:	6b 83       	std	Y+3, r22	; 0x03
    65b8:	5e 83       	std	Y+6, r21	; 0x06
    65ba:	4d 83       	std	Y+5, r20	; 0x05

    en_left = l_flag;
    65bc:	89 81       	ldd	r24, Y+1	; 0x01
    65be:	9a 81       	ldd	r25, Y+2	; 0x02
    65c0:	90 93 5c 03 	sts	0x035C, r25
    65c4:	80 93 5b 03 	sts	0x035B, r24

    en_right = r_flag;
    65c8:	8d 81       	ldd	r24, Y+5	; 0x05
    65ca:	9e 81       	ldd	r25, Y+6	; 0x06
    65cc:	90 93 5e 03 	sts	0x035E, r25
    65d0:	80 93 5d 03 	sts	0x035D, r24

    en_node = n_flag;
    65d4:	8b 81       	ldd	r24, Y+3	; 0x03
    65d6:	9c 81       	ldd	r25, Y+4	; 0x04
    65d8:	90 93 01 02 	sts	0x0201, r25
    65dc:	80 93 00 02 	sts	0x0200, r24

}
    65e0:	26 96       	adiw	r28, 0x06	; 6
    65e2:	0f b6       	in	r0, 0x3f	; 63
    65e4:	f8 94       	cli
    65e6:	de bf       	out	0x3e, r29	; 62
    65e8:	0f be       	out	0x3f, r0	; 63
    65ea:	cd bf       	out	0x3d, r28	; 61
    65ec:	df 91       	pop	r29
    65ee:	cf 91       	pop	r28
    65f0:	08 95       	ret

000065f2 <line_conditions>:


*/

void line_conditions()
{
    65f2:	cf 93       	push	r28
    65f4:	df 93       	push	r29
    65f6:	cd b7       	in	r28, 0x3d	; 61
    65f8:	de b7       	in	r29, 0x3e	; 62
	// Nodes Condition
	if (Center_white_line >= 115 || Left_white_line >= 120 || Right_white_line >= 115 || (Center_white_line >=120 && (Left_white_line >= 110 || Right_white_line >= 110))) // 1 1 1
    65fa:	80 91 51 03 	lds	r24, 0x0351
    65fe:	83 37       	cpi	r24, 0x73	; 115
    6600:	a0 f4       	brcc	.+40     	; 0x662a <line_conditions+0x38>
    6602:	80 91 50 03 	lds	r24, 0x0350
    6606:	88 37       	cpi	r24, 0x78	; 120
    6608:	80 f4       	brcc	.+32     	; 0x662a <line_conditions+0x38>
    660a:	80 91 52 03 	lds	r24, 0x0352
    660e:	83 37       	cpi	r24, 0x73	; 115
    6610:	60 f4       	brcc	.+24     	; 0x662a <line_conditions+0x38>
    6612:	80 91 51 03 	lds	r24, 0x0351
    6616:	88 37       	cpi	r24, 0x78	; 120
    6618:	a8 f0       	brcs	.+42     	; 0x6644 <line_conditions+0x52>
    661a:	80 91 50 03 	lds	r24, 0x0350
    661e:	8e 36       	cpi	r24, 0x6E	; 110
    6620:	20 f4       	brcc	.+8      	; 0x662a <line_conditions+0x38>
    6622:	80 91 52 03 	lds	r24, 0x0352
    6626:	8e 36       	cpi	r24, 0x6E	; 110
    6628:	68 f0       	brcs	.+26     	; 0x6644 <line_conditions+0x52>
	{
		line_cond = 1;
    662a:	81 e0       	ldi	r24, 0x01	; 1
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	90 93 5a 03 	sts	0x035A, r25
    6632:	80 93 59 03 	sts	0x0359, r24
		node_flag = 1;
    6636:	81 e0       	ldi	r24, 0x01	; 1
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	90 93 8e 04 	sts	0x048E, r25
    663e:	80 93 8d 04 	sts	0x048D, r24
    6642:	71 c0       	rjmp	.+226    	; 0x6726 <line_conditions+0x134>
	}
	
	//Straight Line Condition
	else if (Left_white_line < 11  && Center_white_line >= 14 && Right_white_line < 11) // 0 1 0
    6644:	80 91 50 03 	lds	r24, 0x0350
    6648:	8b 30       	cpi	r24, 0x0B	; 11
    664a:	78 f4       	brcc	.+30     	; 0x666a <line_conditions+0x78>
    664c:	80 91 51 03 	lds	r24, 0x0351
    6650:	8e 30       	cpi	r24, 0x0E	; 14
    6652:	58 f0       	brcs	.+22     	; 0x666a <line_conditions+0x78>
    6654:	80 91 52 03 	lds	r24, 0x0352
    6658:	8b 30       	cpi	r24, 0x0B	; 11
    665a:	38 f4       	brcc	.+14     	; 0x666a <line_conditions+0x78>
	{
		line_cond = 2;
    665c:	82 e0       	ldi	r24, 0x02	; 2
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	90 93 5a 03 	sts	0x035A, r25
    6664:	80 93 59 03 	sts	0x0359, r24
    6668:	5e c0       	rjmp	.+188    	; 0x6726 <line_conditions+0x134>
	}
	
	//Straight Line Condition (Robot moved slightly towards right)
	else if (Left_white_line > 20 && Center_white_line < 11 && Right_white_line < 11) // 1 0 0
    666a:	80 91 50 03 	lds	r24, 0x0350
    666e:	85 31       	cpi	r24, 0x15	; 21
    6670:	78 f0       	brcs	.+30     	; 0x6690 <line_conditions+0x9e>
    6672:	80 91 51 03 	lds	r24, 0x0351
    6676:	8b 30       	cpi	r24, 0x0B	; 11
    6678:	58 f4       	brcc	.+22     	; 0x6690 <line_conditions+0x9e>
    667a:	80 91 52 03 	lds	r24, 0x0352
    667e:	8b 30       	cpi	r24, 0x0B	; 11
    6680:	38 f4       	brcc	.+14     	; 0x6690 <line_conditions+0x9e>
	{
		line_cond = 3;
    6682:	83 e0       	ldi	r24, 0x03	; 3
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	90 93 5a 03 	sts	0x035A, r25
    668a:	80 93 59 03 	sts	0x0359, r24
    668e:	4b c0       	rjmp	.+150    	; 0x6726 <line_conditions+0x134>
	}

        else if (Left_white_line > 10 && Center_white_line > 10 && Right_white_line < 11) // 1 1 0
    6690:	80 91 50 03 	lds	r24, 0x0350
    6694:	8b 30       	cpi	r24, 0x0B	; 11
    6696:	78 f0       	brcs	.+30     	; 0x66b6 <line_conditions+0xc4>
    6698:	80 91 51 03 	lds	r24, 0x0351
    669c:	8b 30       	cpi	r24, 0x0B	; 11
    669e:	58 f0       	brcs	.+22     	; 0x66b6 <line_conditions+0xc4>
    66a0:	80 91 52 03 	lds	r24, 0x0352
    66a4:	8b 30       	cpi	r24, 0x0B	; 11
    66a6:	38 f4       	brcc	.+14     	; 0x66b6 <line_conditions+0xc4>
	{
		line_cond = 6;//slighty_L
    66a8:	86 e0       	ldi	r24, 0x06	; 6
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	90 93 5a 03 	sts	0x035A, r25
    66b0:	80 93 59 03 	sts	0x0359, r24
    66b4:	38 c0       	rjmp	.+112    	; 0x6726 <line_conditions+0x134>
	}

        
	//Straight Line Condition (Robot moved slightly towards left)
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line > 20) // 0 0 1
    66b6:	80 91 50 03 	lds	r24, 0x0350
    66ba:	8b 30       	cpi	r24, 0x0B	; 11
    66bc:	78 f4       	brcc	.+30     	; 0x66dc <line_conditions+0xea>
    66be:	80 91 51 03 	lds	r24, 0x0351
    66c2:	8b 30       	cpi	r24, 0x0B	; 11
    66c4:	58 f4       	brcc	.+22     	; 0x66dc <line_conditions+0xea>
    66c6:	80 91 52 03 	lds	r24, 0x0352
    66ca:	85 31       	cpi	r24, 0x15	; 21
    66cc:	38 f0       	brcs	.+14     	; 0x66dc <line_conditions+0xea>
	{
		line_cond = 4;
    66ce:	84 e0       	ldi	r24, 0x04	; 4
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	90 93 5a 03 	sts	0x035A, r25
    66d6:	80 93 59 03 	sts	0x0359, r24
    66da:	25 c0       	rjmp	.+74     	; 0x6726 <line_conditions+0x134>
	}

        else if (Left_white_line < 11 && Center_white_line > 11 && Right_white_line > 11) // 0 1 1
    66dc:	80 91 50 03 	lds	r24, 0x0350
    66e0:	8b 30       	cpi	r24, 0x0B	; 11
    66e2:	78 f4       	brcc	.+30     	; 0x6702 <line_conditions+0x110>
    66e4:	80 91 51 03 	lds	r24, 0x0351
    66e8:	8c 30       	cpi	r24, 0x0C	; 12
    66ea:	58 f0       	brcs	.+22     	; 0x6702 <line_conditions+0x110>
    66ec:	80 91 52 03 	lds	r24, 0x0352
    66f0:	8c 30       	cpi	r24, 0x0C	; 12
    66f2:	38 f0       	brcs	.+14     	; 0x6702 <line_conditions+0x110>
	{
		line_cond = 7;//slighty_R
    66f4:	87 e0       	ldi	r24, 0x07	; 7
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	90 93 5a 03 	sts	0x035A, r25
    66fc:	80 93 59 03 	sts	0x0359, r24
    6700:	12 c0       	rjmp	.+36     	; 0x6726 <line_conditions+0x134>
	}

	//No Line Condition
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line < 11) // 0 0 0
    6702:	80 91 50 03 	lds	r24, 0x0350
    6706:	8b 30       	cpi	r24, 0x0B	; 11
    6708:	70 f4       	brcc	.+28     	; 0x6726 <line_conditions+0x134>
    670a:	80 91 51 03 	lds	r24, 0x0351
    670e:	8b 30       	cpi	r24, 0x0B	; 11
    6710:	50 f4       	brcc	.+20     	; 0x6726 <line_conditions+0x134>
    6712:	80 91 52 03 	lds	r24, 0x0352
    6716:	8b 30       	cpi	r24, 0x0B	; 11
    6718:	30 f4       	brcc	.+12     	; 0x6726 <line_conditions+0x134>
	{
		line_cond = 5;
    671a:	85 e0       	ldi	r24, 0x05	; 5
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	90 93 5a 03 	sts	0x035A, r25
    6722:	80 93 59 03 	sts	0x0359, r24
	}

}
    6726:	df 91       	pop	r29
    6728:	cf 91       	pop	r28
    672a:	08 95       	ret

0000672c <line_follow>:

*/

void line_follow() 

{
    672c:	0f 93       	push	r16
    672e:	1f 93       	push	r17
    6730:	cf 93       	push	r28
    6732:	df 93       	push	r29
    6734:	cd b7       	in	r28, 0x3d	; 61
    6736:	de b7       	in	r29, 0x3e	; 62
    6738:	e8 97       	sbiw	r28, 0x38	; 56
    673a:	0f b6       	in	r0, 0x3f	; 63
    673c:	f8 94       	cli
    673e:	de bf       	out	0x3e, r29	; 62
    6740:	0f be       	out	0x3f, r0	; 63
    6742:	cd bf       	out	0x3d, r28	; 61

    if (t4_flag == 1) 
    6744:	80 91 55 03 	lds	r24, 0x0355
    6748:	90 91 56 03 	lds	r25, 0x0356
    674c:	81 30       	cpi	r24, 0x01	; 1
    674e:	91 05       	cpc	r25, r1
    6750:	61 f4       	brne	.+24     	; 0x676a <line_follow+0x3e>

	{

        node_flag = 0;
    6752:	10 92 8e 04 	sts	0x048E, r1
    6756:	10 92 8d 04 	sts	0x048D, r1

        left_flag = 0;
    675a:	10 92 60 03 	sts	0x0360, r1
    675e:	10 92 5f 03 	sts	0x035F, r1

        right_flag = 0;
    6762:	10 92 62 03 	sts	0x0362, r1
    6766:	10 92 61 03 	sts	0x0361, r1

    }



    if (node_flag == 1)
    676a:	80 91 8d 04 	lds	r24, 0x048D
    676e:	90 91 8e 04 	lds	r25, 0x048E
    6772:	81 30       	cpi	r24, 0x01	; 1
    6774:	91 05       	cpc	r25, r1
    6776:	61 f5       	brne	.+88     	; 0x67d0 <line_follow+0xa4>

	 {

        start_timer4(10);
    6778:	8a e0       	ldi	r24, 0x0A	; 10
    677a:	90 e0       	ldi	r25, 0x00	; 0
    677c:	0e 94 0d 1b 	call	0x361a	; 0x361a <start_timer4>

		buzz(50);
    6780:	21 eb       	ldi	r18, 0xB1	; 177
    6782:	30 e7       	ldi	r19, 0x70	; 112
    6784:	82 e3       	ldi	r24, 0x32	; 50
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	f9 01       	movw	r30, r18
    678a:	19 95       	eicall

		node++;		
    678c:	80 91 6d 03 	lds	r24, 0x036D
    6790:	90 91 6e 03 	lds	r25, 0x036E
    6794:	01 96       	adiw	r24, 0x01	; 1
    6796:	90 93 6e 03 	sts	0x036E, r25
    679a:	80 93 6d 03 	sts	0x036D, r24

		forward();
    679e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

		velocity(255,255);
    67a2:	8f ef       	ldi	r24, 0xFF	; 255
    67a4:	6f ef       	ldi	r22, 0xFF	; 255
    67a6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>

        node_flag = 0;
    67aa:	10 92 8e 04 	sts	0x048E, r1
    67ae:	10 92 8d 04 	sts	0x048D, r1

		travel_path(master_path[node]);
    67b2:	2b e9       	ldi	r18, 0x9B	; 155
    67b4:	32 e6       	ldi	r19, 0x62	; 98
    67b6:	80 91 6d 03 	lds	r24, 0x036D
    67ba:	90 91 6e 03 	lds	r25, 0x036E
    67be:	8f 58       	subi	r24, 0x8F	; 143
    67c0:	9c 4f       	sbci	r25, 0xFC	; 252
    67c2:	fc 01       	movw	r30, r24
    67c4:	80 81       	ld	r24, Z
    67c6:	88 2f       	mov	r24, r24
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	f9 01       	movw	r30, r18
    67cc:	19 95       	eicall
    67ce:	66 c2       	rjmp	.+1228   	; 0x6c9c <line_follow+0x570>

	 }



    else if (line_cond == 2)
    67d0:	80 91 59 03 	lds	r24, 0x0359
    67d4:	90 91 5a 03 	lds	r25, 0x035A
    67d8:	82 30       	cpi	r24, 0x02	; 2
    67da:	91 05       	cpc	r25, r1
    67dc:	39 f4       	brne	.+14     	; 0x67ec <line_follow+0xc0>

	{

        forward();
    67de:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    67e2:	8f ef       	ldi	r24, 0xFF	; 255
    67e4:	6f ef       	ldi	r22, 0xFF	; 255
    67e6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    67ea:	58 c2       	rjmp	.+1200   	; 0x6c9c <line_follow+0x570>

    } 

	else if (line_cond == 3)
    67ec:	80 91 59 03 	lds	r24, 0x0359
    67f0:	90 91 5a 03 	lds	r25, 0x035A
    67f4:	83 30       	cpi	r24, 0x03	; 3
    67f6:	91 05       	cpc	r25, r1
    67f8:	09 f0       	breq	.+2      	; 0x67fc <line_follow+0xd0>
    67fa:	89 c0       	rjmp	.+274    	; 0x690e <line_follow+0x1e2>

	{

        stop();
    67fc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	a0 e2       	ldi	r26, 0x20	; 32
    6806:	b1 e4       	ldi	r27, 0x41	; 65
    6808:	89 83       	std	Y+1, r24	; 0x01
    680a:	9a 83       	std	Y+2, r25	; 0x02
    680c:	ab 83       	std	Y+3, r26	; 0x03
    680e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6810:	69 81       	ldd	r22, Y+1	; 0x01
    6812:	7a 81       	ldd	r23, Y+2	; 0x02
    6814:	8b 81       	ldd	r24, Y+3	; 0x03
    6816:	9c 81       	ldd	r25, Y+4	; 0x04
    6818:	26 e6       	ldi	r18, 0x66	; 102
    681a:	36 e6       	ldi	r19, 0x66	; 102
    681c:	46 e6       	ldi	r20, 0x66	; 102
    681e:	55 e4       	ldi	r21, 0x45	; 69
    6820:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6824:	dc 01       	movw	r26, r24
    6826:	cb 01       	movw	r24, r22
    6828:	8d 83       	std	Y+5, r24	; 0x05
    682a:	9e 83       	std	Y+6, r25	; 0x06
    682c:	af 83       	std	Y+7, r26	; 0x07
    682e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6830:	11 e0       	ldi	r17, 0x01	; 1
    6832:	6d 81       	ldd	r22, Y+5	; 0x05
    6834:	7e 81       	ldd	r23, Y+6	; 0x06
    6836:	8f 81       	ldd	r24, Y+7	; 0x07
    6838:	98 85       	ldd	r25, Y+8	; 0x08
    683a:	20 e0       	ldi	r18, 0x00	; 0
    683c:	30 e0       	ldi	r19, 0x00	; 0
    683e:	40 e8       	ldi	r20, 0x80	; 128
    6840:	5f e3       	ldi	r21, 0x3F	; 63
    6842:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6846:	88 23       	and	r24, r24
    6848:	0c f0       	brlt	.+2      	; 0x684c <line_follow+0x120>
    684a:	10 e0       	ldi	r17, 0x00	; 0
    684c:	11 23       	and	r17, r17
    684e:	29 f0       	breq	.+10     	; 0x685a <line_follow+0x12e>
		__ticks = 1;
    6850:	81 e0       	ldi	r24, 0x01	; 1
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	9a 87       	std	Y+10, r25	; 0x0a
    6856:	89 87       	std	Y+9, r24	; 0x09
    6858:	46 c0       	rjmp	.+140    	; 0x68e6 <line_follow+0x1ba>
	else if (__tmp > 65535)
    685a:	11 e0       	ldi	r17, 0x01	; 1
    685c:	6d 81       	ldd	r22, Y+5	; 0x05
    685e:	7e 81       	ldd	r23, Y+6	; 0x06
    6860:	8f 81       	ldd	r24, Y+7	; 0x07
    6862:	98 85       	ldd	r25, Y+8	; 0x08
    6864:	20 e0       	ldi	r18, 0x00	; 0
    6866:	3f ef       	ldi	r19, 0xFF	; 255
    6868:	4f e7       	ldi	r20, 0x7F	; 127
    686a:	57 e4       	ldi	r21, 0x47	; 71
    686c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6870:	18 16       	cp	r1, r24
    6872:	0c f0       	brlt	.+2      	; 0x6876 <line_follow+0x14a>
    6874:	10 e0       	ldi	r17, 0x00	; 0
    6876:	11 23       	and	r17, r17
    6878:	61 f1       	breq	.+88     	; 0x68d2 <line_follow+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    687a:	69 81       	ldd	r22, Y+1	; 0x01
    687c:	7a 81       	ldd	r23, Y+2	; 0x02
    687e:	8b 81       	ldd	r24, Y+3	; 0x03
    6880:	9c 81       	ldd	r25, Y+4	; 0x04
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	30 e0       	ldi	r19, 0x00	; 0
    6886:	40 e2       	ldi	r20, 0x20	; 32
    6888:	51 e4       	ldi	r21, 0x41	; 65
    688a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    688e:	dc 01       	movw	r26, r24
    6890:	cb 01       	movw	r24, r22
    6892:	bc 01       	movw	r22, r24
    6894:	cd 01       	movw	r24, r26
    6896:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    689a:	dc 01       	movw	r26, r24
    689c:	cb 01       	movw	r24, r22
    689e:	9a 87       	std	Y+10, r25	; 0x0a
    68a0:	89 87       	std	Y+9, r24	; 0x09
    68a2:	12 c0       	rjmp	.+36     	; 0x68c8 <line_follow+0x19c>
    68a4:	80 e7       	ldi	r24, 0x70	; 112
    68a6:	91 e0       	ldi	r25, 0x01	; 1
    68a8:	9c 87       	std	Y+12, r25	; 0x0c
    68aa:	8b 87       	std	Y+11, r24	; 0x0b
    68ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    68ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    68b0:	8c 01       	movw	r16, r24
    68b2:	c8 01       	movw	r24, r16
    68b4:	01 97       	sbiw	r24, 0x01	; 1
    68b6:	f1 f7       	brne	.-4      	; 0x68b4 <line_follow+0x188>
    68b8:	8c 01       	movw	r16, r24
    68ba:	1c 87       	std	Y+12, r17	; 0x0c
    68bc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68be:	89 85       	ldd	r24, Y+9	; 0x09
    68c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    68c2:	01 97       	sbiw	r24, 0x01	; 1
    68c4:	9a 87       	std	Y+10, r25	; 0x0a
    68c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68c8:	89 85       	ldd	r24, Y+9	; 0x09
    68ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    68cc:	00 97       	sbiw	r24, 0x00	; 0
    68ce:	51 f7       	brne	.-44     	; 0x68a4 <line_follow+0x178>
    68d0:	17 c0       	rjmp	.+46     	; 0x6900 <line_follow+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68d2:	6d 81       	ldd	r22, Y+5	; 0x05
    68d4:	7e 81       	ldd	r23, Y+6	; 0x06
    68d6:	8f 81       	ldd	r24, Y+7	; 0x07
    68d8:	98 85       	ldd	r25, Y+8	; 0x08
    68da:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    68de:	dc 01       	movw	r26, r24
    68e0:	cb 01       	movw	r24, r22
    68e2:	9a 87       	std	Y+10, r25	; 0x0a
    68e4:	89 87       	std	Y+9, r24	; 0x09
    68e6:	89 85       	ldd	r24, Y+9	; 0x09
    68e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    68ea:	9e 87       	std	Y+14, r25	; 0x0e
    68ec:	8d 87       	std	Y+13, r24	; 0x0d
    68ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    68f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    68f2:	8c 01       	movw	r16, r24
    68f4:	f8 01       	movw	r30, r16
    68f6:	31 97       	sbiw	r30, 0x01	; 1
    68f8:	f1 f7       	brne	.-4      	; 0x68f6 <line_follow+0x1ca>
    68fa:	8f 01       	movw	r16, r30
    68fc:	1e 87       	std	Y+14, r17	; 0x0e
    68fe:	0d 87       	std	Y+13, r16	; 0x0d

        _delay_ms(10);

        forward();
    6900:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(180, 255);
    6904:	84 eb       	ldi	r24, 0xB4	; 180
    6906:	6f ef       	ldi	r22, 0xFF	; 255
    6908:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    690c:	c7 c1       	rjmp	.+910    	; 0x6c9c <line_follow+0x570>

    } 

	else if (line_cond == 4)
    690e:	80 91 59 03 	lds	r24, 0x0359
    6912:	90 91 5a 03 	lds	r25, 0x035A
    6916:	84 30       	cpi	r24, 0x04	; 4
    6918:	91 05       	cpc	r25, r1
    691a:	09 f0       	breq	.+2      	; 0x691e <line_follow+0x1f2>
    691c:	89 c0       	rjmp	.+274    	; 0x6a30 <line_follow+0x304>

	{

        stop();
    691e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6922:	80 e0       	ldi	r24, 0x00	; 0
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	a0 e2       	ldi	r26, 0x20	; 32
    6928:	b1 e4       	ldi	r27, 0x41	; 65
    692a:	8f 87       	std	Y+15, r24	; 0x0f
    692c:	98 8b       	std	Y+16, r25	; 0x10
    692e:	a9 8b       	std	Y+17, r26	; 0x11
    6930:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6932:	6f 85       	ldd	r22, Y+15	; 0x0f
    6934:	78 89       	ldd	r23, Y+16	; 0x10
    6936:	89 89       	ldd	r24, Y+17	; 0x11
    6938:	9a 89       	ldd	r25, Y+18	; 0x12
    693a:	26 e6       	ldi	r18, 0x66	; 102
    693c:	36 e6       	ldi	r19, 0x66	; 102
    693e:	46 e6       	ldi	r20, 0x66	; 102
    6940:	55 e4       	ldi	r21, 0x45	; 69
    6942:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6946:	dc 01       	movw	r26, r24
    6948:	cb 01       	movw	r24, r22
    694a:	8b 8b       	std	Y+19, r24	; 0x13
    694c:	9c 8b       	std	Y+20, r25	; 0x14
    694e:	ad 8b       	std	Y+21, r26	; 0x15
    6950:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6952:	11 e0       	ldi	r17, 0x01	; 1
    6954:	6b 89       	ldd	r22, Y+19	; 0x13
    6956:	7c 89       	ldd	r23, Y+20	; 0x14
    6958:	8d 89       	ldd	r24, Y+21	; 0x15
    695a:	9e 89       	ldd	r25, Y+22	; 0x16
    695c:	20 e0       	ldi	r18, 0x00	; 0
    695e:	30 e0       	ldi	r19, 0x00	; 0
    6960:	40 e8       	ldi	r20, 0x80	; 128
    6962:	5f e3       	ldi	r21, 0x3F	; 63
    6964:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6968:	88 23       	and	r24, r24
    696a:	0c f0       	brlt	.+2      	; 0x696e <line_follow+0x242>
    696c:	10 e0       	ldi	r17, 0x00	; 0
    696e:	11 23       	and	r17, r17
    6970:	29 f0       	breq	.+10     	; 0x697c <line_follow+0x250>
		__ticks = 1;
    6972:	81 e0       	ldi	r24, 0x01	; 1
    6974:	90 e0       	ldi	r25, 0x00	; 0
    6976:	98 8f       	std	Y+24, r25	; 0x18
    6978:	8f 8b       	std	Y+23, r24	; 0x17
    697a:	46 c0       	rjmp	.+140    	; 0x6a08 <line_follow+0x2dc>
	else if (__tmp > 65535)
    697c:	11 e0       	ldi	r17, 0x01	; 1
    697e:	6b 89       	ldd	r22, Y+19	; 0x13
    6980:	7c 89       	ldd	r23, Y+20	; 0x14
    6982:	8d 89       	ldd	r24, Y+21	; 0x15
    6984:	9e 89       	ldd	r25, Y+22	; 0x16
    6986:	20 e0       	ldi	r18, 0x00	; 0
    6988:	3f ef       	ldi	r19, 0xFF	; 255
    698a:	4f e7       	ldi	r20, 0x7F	; 127
    698c:	57 e4       	ldi	r21, 0x47	; 71
    698e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6992:	18 16       	cp	r1, r24
    6994:	0c f0       	brlt	.+2      	; 0x6998 <line_follow+0x26c>
    6996:	10 e0       	ldi	r17, 0x00	; 0
    6998:	11 23       	and	r17, r17
    699a:	61 f1       	breq	.+88     	; 0x69f4 <line_follow+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    699c:	6f 85       	ldd	r22, Y+15	; 0x0f
    699e:	78 89       	ldd	r23, Y+16	; 0x10
    69a0:	89 89       	ldd	r24, Y+17	; 0x11
    69a2:	9a 89       	ldd	r25, Y+18	; 0x12
    69a4:	20 e0       	ldi	r18, 0x00	; 0
    69a6:	30 e0       	ldi	r19, 0x00	; 0
    69a8:	40 e2       	ldi	r20, 0x20	; 32
    69aa:	51 e4       	ldi	r21, 0x41	; 65
    69ac:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    69b0:	dc 01       	movw	r26, r24
    69b2:	cb 01       	movw	r24, r22
    69b4:	bc 01       	movw	r22, r24
    69b6:	cd 01       	movw	r24, r26
    69b8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    69bc:	dc 01       	movw	r26, r24
    69be:	cb 01       	movw	r24, r22
    69c0:	98 8f       	std	Y+24, r25	; 0x18
    69c2:	8f 8b       	std	Y+23, r24	; 0x17
    69c4:	12 c0       	rjmp	.+36     	; 0x69ea <line_follow+0x2be>
    69c6:	80 e7       	ldi	r24, 0x70	; 112
    69c8:	91 e0       	ldi	r25, 0x01	; 1
    69ca:	9a 8f       	std	Y+26, r25	; 0x1a
    69cc:	89 8f       	std	Y+25, r24	; 0x19
    69ce:	89 8d       	ldd	r24, Y+25	; 0x19
    69d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    69d2:	8c 01       	movw	r16, r24
    69d4:	c8 01       	movw	r24, r16
    69d6:	01 97       	sbiw	r24, 0x01	; 1
    69d8:	f1 f7       	brne	.-4      	; 0x69d6 <line_follow+0x2aa>
    69da:	8c 01       	movw	r16, r24
    69dc:	1a 8f       	std	Y+26, r17	; 0x1a
    69de:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69e0:	8f 89       	ldd	r24, Y+23	; 0x17
    69e2:	98 8d       	ldd	r25, Y+24	; 0x18
    69e4:	01 97       	sbiw	r24, 0x01	; 1
    69e6:	98 8f       	std	Y+24, r25	; 0x18
    69e8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69ea:	8f 89       	ldd	r24, Y+23	; 0x17
    69ec:	98 8d       	ldd	r25, Y+24	; 0x18
    69ee:	00 97       	sbiw	r24, 0x00	; 0
    69f0:	51 f7       	brne	.-44     	; 0x69c6 <line_follow+0x29a>
    69f2:	17 c0       	rjmp	.+46     	; 0x6a22 <line_follow+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69f4:	6b 89       	ldd	r22, Y+19	; 0x13
    69f6:	7c 89       	ldd	r23, Y+20	; 0x14
    69f8:	8d 89       	ldd	r24, Y+21	; 0x15
    69fa:	9e 89       	ldd	r25, Y+22	; 0x16
    69fc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6a00:	dc 01       	movw	r26, r24
    6a02:	cb 01       	movw	r24, r22
    6a04:	98 8f       	std	Y+24, r25	; 0x18
    6a06:	8f 8b       	std	Y+23, r24	; 0x17
    6a08:	8f 89       	ldd	r24, Y+23	; 0x17
    6a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    6a0c:	9c 8f       	std	Y+28, r25	; 0x1c
    6a0e:	8b 8f       	std	Y+27, r24	; 0x1b
    6a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a14:	8c 01       	movw	r16, r24
    6a16:	f8 01       	movw	r30, r16
    6a18:	31 97       	sbiw	r30, 0x01	; 1
    6a1a:	f1 f7       	brne	.-4      	; 0x6a18 <line_follow+0x2ec>
    6a1c:	8f 01       	movw	r16, r30
    6a1e:	1c 8f       	std	Y+28, r17	; 0x1c
    6a20:	0b 8f       	std	Y+27, r16	; 0x1b

        _delay_ms(10);

        forward();
    6a22:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 180);
    6a26:	8f ef       	ldi	r24, 0xFF	; 255
    6a28:	64 eb       	ldi	r22, 0xB4	; 180
    6a2a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6a2e:	36 c1       	rjmp	.+620    	; 0x6c9c <line_follow+0x570>

    } 

	else if (line_cond == 5)
    6a30:	80 91 59 03 	lds	r24, 0x0359
    6a34:	90 91 5a 03 	lds	r25, 0x035A
    6a38:	85 30       	cpi	r24, 0x05	; 5
    6a3a:	91 05       	cpc	r25, r1
    6a3c:	39 f4       	brne	.+14     	; 0x6a4c <line_follow+0x320>

	{

        forward();
    6a3e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    6a42:	8f ef       	ldi	r24, 0xFF	; 255
    6a44:	6f ef       	ldi	r22, 0xFF	; 255
    6a46:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6a4a:	28 c1       	rjmp	.+592    	; 0x6c9c <line_follow+0x570>

        }

       else if (line_cond == 6)
    6a4c:	80 91 59 03 	lds	r24, 0x0359
    6a50:	90 91 5a 03 	lds	r25, 0x035A
    6a54:	86 30       	cpi	r24, 0x06	; 6
    6a56:	91 05       	cpc	r25, r1
    6a58:	09 f0       	breq	.+2      	; 0x6a5c <line_follow+0x330>
    6a5a:	89 c0       	rjmp	.+274    	; 0x6b6e <line_follow+0x442>

	{
        stop();_delay_ms(10);
    6a5c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6a60:	80 e0       	ldi	r24, 0x00	; 0
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	a0 e2       	ldi	r26, 0x20	; 32
    6a66:	b1 e4       	ldi	r27, 0x41	; 65
    6a68:	8d 8f       	std	Y+29, r24	; 0x1d
    6a6a:	9e 8f       	std	Y+30, r25	; 0x1e
    6a6c:	af 8f       	std	Y+31, r26	; 0x1f
    6a6e:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6a70:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6a72:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a76:	98 a1       	lds	r25, 0x48
    6a78:	26 e6       	ldi	r18, 0x66	; 102
    6a7a:	36 e6       	ldi	r19, 0x66	; 102
    6a7c:	46 e6       	ldi	r20, 0x66	; 102
    6a7e:	55 e4       	ldi	r21, 0x45	; 69
    6a80:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6a84:	dc 01       	movw	r26, r24
    6a86:	cb 01       	movw	r24, r22
    6a88:	89 a3       	lds	r24, 0x59
    6a8a:	9a a3       	lds	r25, 0x5a
    6a8c:	ab a3       	lds	r26, 0x5b
    6a8e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6a90:	11 e0       	ldi	r17, 0x01	; 1
    6a92:	69 a1       	lds	r22, 0x49
    6a94:	7a a1       	lds	r23, 0x4a
    6a96:	8b a1       	lds	r24, 0x4b
    6a98:	9c a1       	lds	r25, 0x4c
    6a9a:	20 e0       	ldi	r18, 0x00	; 0
    6a9c:	30 e0       	ldi	r19, 0x00	; 0
    6a9e:	40 e8       	ldi	r20, 0x80	; 128
    6aa0:	5f e3       	ldi	r21, 0x3F	; 63
    6aa2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6aa6:	88 23       	and	r24, r24
    6aa8:	0c f0       	brlt	.+2      	; 0x6aac <line_follow+0x380>
    6aaa:	10 e0       	ldi	r17, 0x00	; 0
    6aac:	11 23       	and	r17, r17
    6aae:	29 f0       	breq	.+10     	; 0x6aba <line_follow+0x38e>
		__ticks = 1;
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	9e a3       	lds	r25, 0x5e
    6ab6:	8d a3       	lds	r24, 0x5d
    6ab8:	46 c0       	rjmp	.+140    	; 0x6b46 <line_follow+0x41a>
	else if (__tmp > 65535)
    6aba:	11 e0       	ldi	r17, 0x01	; 1
    6abc:	69 a1       	lds	r22, 0x49
    6abe:	7a a1       	lds	r23, 0x4a
    6ac0:	8b a1       	lds	r24, 0x4b
    6ac2:	9c a1       	lds	r25, 0x4c
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	3f ef       	ldi	r19, 0xFF	; 255
    6ac8:	4f e7       	ldi	r20, 0x7F	; 127
    6aca:	57 e4       	ldi	r21, 0x47	; 71
    6acc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6ad0:	18 16       	cp	r1, r24
    6ad2:	0c f0       	brlt	.+2      	; 0x6ad6 <line_follow+0x3aa>
    6ad4:	10 e0       	ldi	r17, 0x00	; 0
    6ad6:	11 23       	and	r17, r17
    6ad8:	61 f1       	breq	.+88     	; 0x6b32 <line_follow+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ada:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6adc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6ae0:	98 a1       	lds	r25, 0x48
    6ae2:	20 e0       	ldi	r18, 0x00	; 0
    6ae4:	30 e0       	ldi	r19, 0x00	; 0
    6ae6:	40 e2       	ldi	r20, 0x20	; 32
    6ae8:	51 e4       	ldi	r21, 0x41	; 65
    6aea:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6aee:	dc 01       	movw	r26, r24
    6af0:	cb 01       	movw	r24, r22
    6af2:	bc 01       	movw	r22, r24
    6af4:	cd 01       	movw	r24, r26
    6af6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6afa:	dc 01       	movw	r26, r24
    6afc:	cb 01       	movw	r24, r22
    6afe:	9e a3       	lds	r25, 0x5e
    6b00:	8d a3       	lds	r24, 0x5d
    6b02:	12 c0       	rjmp	.+36     	; 0x6b28 <line_follow+0x3fc>
    6b04:	80 e7       	ldi	r24, 0x70	; 112
    6b06:	91 e0       	ldi	r25, 0x01	; 1
    6b08:	98 a7       	lds	r25, 0x78
    6b0a:	8f a3       	lds	r24, 0x5f
    6b0c:	8f a1       	lds	r24, 0x4f
    6b0e:	98 a5       	lds	r25, 0x68
    6b10:	8c 01       	movw	r16, r24
    6b12:	c8 01       	movw	r24, r16
    6b14:	01 97       	sbiw	r24, 0x01	; 1
    6b16:	f1 f7       	brne	.-4      	; 0x6b14 <line_follow+0x3e8>
    6b18:	8c 01       	movw	r16, r24
    6b1a:	18 a7       	lds	r17, 0x78
    6b1c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b1e:	8d a1       	lds	r24, 0x4d
    6b20:	9e a1       	lds	r25, 0x4e
    6b22:	01 97       	sbiw	r24, 0x01	; 1
    6b24:	9e a3       	lds	r25, 0x5e
    6b26:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b28:	8d a1       	lds	r24, 0x4d
    6b2a:	9e a1       	lds	r25, 0x4e
    6b2c:	00 97       	sbiw	r24, 0x00	; 0
    6b2e:	51 f7       	brne	.-44     	; 0x6b04 <line_follow+0x3d8>
    6b30:	17 c0       	rjmp	.+46     	; 0x6b60 <line_follow+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b32:	69 a1       	lds	r22, 0x49
    6b34:	7a a1       	lds	r23, 0x4a
    6b36:	8b a1       	lds	r24, 0x4b
    6b38:	9c a1       	lds	r25, 0x4c
    6b3a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6b3e:	dc 01       	movw	r26, r24
    6b40:	cb 01       	movw	r24, r22
    6b42:	9e a3       	lds	r25, 0x5e
    6b44:	8d a3       	lds	r24, 0x5d
    6b46:	8d a1       	lds	r24, 0x4d
    6b48:	9e a1       	lds	r25, 0x4e
    6b4a:	9a a7       	lds	r25, 0x7a
    6b4c:	89 a7       	lds	r24, 0x79
    6b4e:	89 a5       	lds	r24, 0x69
    6b50:	9a a5       	lds	r25, 0x6a
    6b52:	8c 01       	movw	r16, r24
    6b54:	f8 01       	movw	r30, r16
    6b56:	31 97       	sbiw	r30, 0x01	; 1
    6b58:	f1 f7       	brne	.-4      	; 0x6b56 <line_follow+0x42a>
    6b5a:	8f 01       	movw	r16, r30
    6b5c:	1a a7       	lds	r17, 0x7a
    6b5e:	09 a7       	lds	r16, 0x79

        forward();
    6b60:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(250, 255);
    6b64:	8a ef       	ldi	r24, 0xFA	; 250
    6b66:	6f ef       	ldi	r22, 0xFF	; 255
    6b68:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6b6c:	97 c0       	rjmp	.+302    	; 0x6c9c <line_follow+0x570>

        }

        else if (line_cond == 7)
    6b6e:	80 91 59 03 	lds	r24, 0x0359
    6b72:	90 91 5a 03 	lds	r25, 0x035A
    6b76:	87 30       	cpi	r24, 0x07	; 7
    6b78:	91 05       	cpc	r25, r1
    6b7a:	09 f0       	breq	.+2      	; 0x6b7e <line_follow+0x452>
    6b7c:	89 c0       	rjmp	.+274    	; 0x6c90 <line_follow+0x564>

	{
        stop();
    6b7e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6b82:	80 e0       	ldi	r24, 0x00	; 0
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	a0 e2       	ldi	r26, 0x20	; 32
    6b88:	b1 e4       	ldi	r27, 0x41	; 65
    6b8a:	8b a7       	lds	r24, 0x7b
    6b8c:	9c a7       	lds	r25, 0x7c
    6b8e:	ad a7       	lds	r26, 0x7d
    6b90:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b92:	6b a5       	lds	r22, 0x6b
    6b94:	7c a5       	lds	r23, 0x6c
    6b96:	8d a5       	lds	r24, 0x6d
    6b98:	9e a5       	lds	r25, 0x6e
    6b9a:	26 e6       	ldi	r18, 0x66	; 102
    6b9c:	36 e6       	ldi	r19, 0x66	; 102
    6b9e:	46 e6       	ldi	r20, 0x66	; 102
    6ba0:	55 e4       	ldi	r21, 0x45	; 69
    6ba2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	8f a7       	lds	r24, 0x7f
    6bac:	98 ab       	sts	0x58, r25
    6bae:	a9 ab       	sts	0x59, r26
    6bb0:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    6bb2:	11 e0       	ldi	r17, 0x01	; 1
    6bb4:	6f a5       	lds	r22, 0x6f
    6bb6:	78 a9       	sts	0x48, r23
    6bb8:	89 a9       	sts	0x49, r24
    6bba:	9a a9       	sts	0x4a, r25
    6bbc:	20 e0       	ldi	r18, 0x00	; 0
    6bbe:	30 e0       	ldi	r19, 0x00	; 0
    6bc0:	40 e8       	ldi	r20, 0x80	; 128
    6bc2:	5f e3       	ldi	r21, 0x3F	; 63
    6bc4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6bc8:	88 23       	and	r24, r24
    6bca:	0c f0       	brlt	.+2      	; 0x6bce <line_follow+0x4a2>
    6bcc:	10 e0       	ldi	r17, 0x00	; 0
    6bce:	11 23       	and	r17, r17
    6bd0:	29 f0       	breq	.+10     	; 0x6bdc <line_follow+0x4b0>
		__ticks = 1;
    6bd2:	81 e0       	ldi	r24, 0x01	; 1
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	9c ab       	sts	0x5c, r25
    6bd8:	8b ab       	sts	0x5b, r24
    6bda:	46 c0       	rjmp	.+140    	; 0x6c68 <line_follow+0x53c>
	else if (__tmp > 65535)
    6bdc:	11 e0       	ldi	r17, 0x01	; 1
    6bde:	6f a5       	lds	r22, 0x6f
    6be0:	78 a9       	sts	0x48, r23
    6be2:	89 a9       	sts	0x49, r24
    6be4:	9a a9       	sts	0x4a, r25
    6be6:	20 e0       	ldi	r18, 0x00	; 0
    6be8:	3f ef       	ldi	r19, 0xFF	; 255
    6bea:	4f e7       	ldi	r20, 0x7F	; 127
    6bec:	57 e4       	ldi	r21, 0x47	; 71
    6bee:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6bf2:	18 16       	cp	r1, r24
    6bf4:	0c f0       	brlt	.+2      	; 0x6bf8 <line_follow+0x4cc>
    6bf6:	10 e0       	ldi	r17, 0x00	; 0
    6bf8:	11 23       	and	r17, r17
    6bfa:	61 f1       	breq	.+88     	; 0x6c54 <line_follow+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bfc:	6b a5       	lds	r22, 0x6b
    6bfe:	7c a5       	lds	r23, 0x6c
    6c00:	8d a5       	lds	r24, 0x6d
    6c02:	9e a5       	lds	r25, 0x6e
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	40 e2       	ldi	r20, 0x20	; 32
    6c0a:	51 e4       	ldi	r21, 0x41	; 65
    6c0c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6c10:	dc 01       	movw	r26, r24
    6c12:	cb 01       	movw	r24, r22
    6c14:	bc 01       	movw	r22, r24
    6c16:	cd 01       	movw	r24, r26
    6c18:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6c1c:	dc 01       	movw	r26, r24
    6c1e:	cb 01       	movw	r24, r22
    6c20:	9c ab       	sts	0x5c, r25
    6c22:	8b ab       	sts	0x5b, r24
    6c24:	12 c0       	rjmp	.+36     	; 0x6c4a <line_follow+0x51e>
    6c26:	80 e7       	ldi	r24, 0x70	; 112
    6c28:	91 e0       	ldi	r25, 0x01	; 1
    6c2a:	9e ab       	sts	0x5e, r25
    6c2c:	8d ab       	sts	0x5d, r24
    6c2e:	8d a9       	sts	0x4d, r24
    6c30:	9e a9       	sts	0x4e, r25
    6c32:	8c 01       	movw	r16, r24
    6c34:	c8 01       	movw	r24, r16
    6c36:	01 97       	sbiw	r24, 0x01	; 1
    6c38:	f1 f7       	brne	.-4      	; 0x6c36 <line_follow+0x50a>
    6c3a:	8c 01       	movw	r16, r24
    6c3c:	1e ab       	sts	0x5e, r17
    6c3e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c40:	8b a9       	sts	0x4b, r24
    6c42:	9c a9       	sts	0x4c, r25
    6c44:	01 97       	sbiw	r24, 0x01	; 1
    6c46:	9c ab       	sts	0x5c, r25
    6c48:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c4a:	8b a9       	sts	0x4b, r24
    6c4c:	9c a9       	sts	0x4c, r25
    6c4e:	00 97       	sbiw	r24, 0x00	; 0
    6c50:	51 f7       	brne	.-44     	; 0x6c26 <line_follow+0x4fa>
    6c52:	17 c0       	rjmp	.+46     	; 0x6c82 <line_follow+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c54:	6f a5       	lds	r22, 0x6f
    6c56:	78 a9       	sts	0x48, r23
    6c58:	89 a9       	sts	0x49, r24
    6c5a:	9a a9       	sts	0x4a, r25
    6c5c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6c60:	dc 01       	movw	r26, r24
    6c62:	cb 01       	movw	r24, r22
    6c64:	9c ab       	sts	0x5c, r25
    6c66:	8b ab       	sts	0x5b, r24
    6c68:	8b a9       	sts	0x4b, r24
    6c6a:	9c a9       	sts	0x4c, r25
    6c6c:	98 af       	sts	0x78, r25
    6c6e:	8f ab       	sts	0x5f, r24
    6c70:	8f a9       	sts	0x4f, r24
    6c72:	98 ad       	sts	0x68, r25
    6c74:	8c 01       	movw	r16, r24
    6c76:	f8 01       	movw	r30, r16
    6c78:	31 97       	sbiw	r30, 0x01	; 1
    6c7a:	f1 f7       	brne	.-4      	; 0x6c78 <line_follow+0x54c>
    6c7c:	8f 01       	movw	r16, r30
    6c7e:	18 af       	sts	0x78, r17
    6c80:	0f ab       	sts	0x5f, r16
		_delay_ms(10);

        forward();
    6c82:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 250);
    6c86:	8f ef       	ldi	r24, 0xFF	; 255
    6c88:	6a ef       	ldi	r22, 0xFA	; 250
    6c8a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6c8e:	06 c0       	rjmp	.+12     	; 0x6c9c <line_follow+0x570>

        }
	else
	{
forward();
    6c90:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
velocity(254,255); }
    6c94:	8e ef       	ldi	r24, 0xFE	; 254
    6c96:	6f ef       	ldi	r22, 0xFF	; 255
    6c98:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>


}
    6c9c:	e8 96       	adiw	r28, 0x38	; 56
    6c9e:	0f b6       	in	r0, 0x3f	; 63
    6ca0:	f8 94       	cli
    6ca2:	de bf       	out	0x3e, r29	; 62
    6ca4:	0f be       	out	0x3f, r0	; 63
    6ca6:	cd bf       	out	0x3d, r28	; 61
    6ca8:	df 91       	pop	r29
    6caa:	cf 91       	pop	r28
    6cac:	1f 91       	pop	r17
    6cae:	0f 91       	pop	r16
    6cb0:	08 95       	ret

00006cb2 <pick_drop>:


void pick_drop(char pd){
    6cb2:	0f 93       	push	r16
    6cb4:	1f 93       	push	r17
    6cb6:	cf 93       	push	r28
    6cb8:	df 93       	push	r29
    6cba:	cd b7       	in	r28, 0x3d	; 61
    6cbc:	de b7       	in	r29, 0x3e	; 62
    6cbe:	c7 5e       	subi	r28, 0xE7	; 231
    6cc0:	d2 40       	sbci	r29, 0x02	; 2
    6cc2:	0f b6       	in	r0, 0x3f	; 63
    6cc4:	f8 94       	cli
    6cc6:	de bf       	out	0x3e, r29	; 62
    6cc8:	0f be       	out	0x3f, r0	; 63
    6cca:	cd bf       	out	0x3d, r28	; 61
    6ccc:	9e 01       	movw	r18, r28
    6cce:	29 51       	subi	r18, 0x19	; 25
    6cd0:	3d 4f       	sbci	r19, 0xFD	; 253
    6cd2:	f9 01       	movw	r30, r18
    6cd4:	80 83       	st	Z, r24
	defaulty();
    6cd6:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <defaulty>
	stop();
    6cda:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6cde:	80 e0       	ldi	r24, 0x00	; 0
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	a0 ea       	ldi	r26, 0xA0	; 160
    6ce4:	b1 e4       	ldi	r27, 0x41	; 65
    6ce6:	89 83       	std	Y+1, r24	; 0x01
    6ce8:	9a 83       	std	Y+2, r25	; 0x02
    6cea:	ab 83       	std	Y+3, r26	; 0x03
    6cec:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6cee:	69 81       	ldd	r22, Y+1	; 0x01
    6cf0:	7a 81       	ldd	r23, Y+2	; 0x02
    6cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    6cf6:	26 e6       	ldi	r18, 0x66	; 102
    6cf8:	36 e6       	ldi	r19, 0x66	; 102
    6cfa:	46 e6       	ldi	r20, 0x66	; 102
    6cfc:	55 e4       	ldi	r21, 0x45	; 69
    6cfe:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6d02:	dc 01       	movw	r26, r24
    6d04:	cb 01       	movw	r24, r22
    6d06:	8d 83       	std	Y+5, r24	; 0x05
    6d08:	9e 83       	std	Y+6, r25	; 0x06
    6d0a:	af 83       	std	Y+7, r26	; 0x07
    6d0c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6d0e:	11 e0       	ldi	r17, 0x01	; 1
    6d10:	6d 81       	ldd	r22, Y+5	; 0x05
    6d12:	7e 81       	ldd	r23, Y+6	; 0x06
    6d14:	8f 81       	ldd	r24, Y+7	; 0x07
    6d16:	98 85       	ldd	r25, Y+8	; 0x08
    6d18:	20 e0       	ldi	r18, 0x00	; 0
    6d1a:	30 e0       	ldi	r19, 0x00	; 0
    6d1c:	40 e8       	ldi	r20, 0x80	; 128
    6d1e:	5f e3       	ldi	r21, 0x3F	; 63
    6d20:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6d24:	88 23       	and	r24, r24
    6d26:	0c f0       	brlt	.+2      	; 0x6d2a <pick_drop+0x78>
    6d28:	10 e0       	ldi	r17, 0x00	; 0
    6d2a:	11 23       	and	r17, r17
    6d2c:	29 f0       	breq	.+10     	; 0x6d38 <pick_drop+0x86>
		__ticks = 1;
    6d2e:	81 e0       	ldi	r24, 0x01	; 1
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	9a 87       	std	Y+10, r25	; 0x0a
    6d34:	89 87       	std	Y+9, r24	; 0x09
    6d36:	46 c0       	rjmp	.+140    	; 0x6dc4 <pick_drop+0x112>
	else if (__tmp > 65535)
    6d38:	11 e0       	ldi	r17, 0x01	; 1
    6d3a:	6d 81       	ldd	r22, Y+5	; 0x05
    6d3c:	7e 81       	ldd	r23, Y+6	; 0x06
    6d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    6d40:	98 85       	ldd	r25, Y+8	; 0x08
    6d42:	20 e0       	ldi	r18, 0x00	; 0
    6d44:	3f ef       	ldi	r19, 0xFF	; 255
    6d46:	4f e7       	ldi	r20, 0x7F	; 127
    6d48:	57 e4       	ldi	r21, 0x47	; 71
    6d4a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6d4e:	18 16       	cp	r1, r24
    6d50:	0c f0       	brlt	.+2      	; 0x6d54 <pick_drop+0xa2>
    6d52:	10 e0       	ldi	r17, 0x00	; 0
    6d54:	11 23       	and	r17, r17
    6d56:	61 f1       	breq	.+88     	; 0x6db0 <pick_drop+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d58:	69 81       	ldd	r22, Y+1	; 0x01
    6d5a:	7a 81       	ldd	r23, Y+2	; 0x02
    6d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    6d60:	20 e0       	ldi	r18, 0x00	; 0
    6d62:	30 e0       	ldi	r19, 0x00	; 0
    6d64:	40 e2       	ldi	r20, 0x20	; 32
    6d66:	51 e4       	ldi	r21, 0x41	; 65
    6d68:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6d6c:	dc 01       	movw	r26, r24
    6d6e:	cb 01       	movw	r24, r22
    6d70:	bc 01       	movw	r22, r24
    6d72:	cd 01       	movw	r24, r26
    6d74:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6d78:	dc 01       	movw	r26, r24
    6d7a:	cb 01       	movw	r24, r22
    6d7c:	9a 87       	std	Y+10, r25	; 0x0a
    6d7e:	89 87       	std	Y+9, r24	; 0x09
    6d80:	12 c0       	rjmp	.+36     	; 0x6da6 <pick_drop+0xf4>
    6d82:	80 e7       	ldi	r24, 0x70	; 112
    6d84:	91 e0       	ldi	r25, 0x01	; 1
    6d86:	9c 87       	std	Y+12, r25	; 0x0c
    6d88:	8b 87       	std	Y+11, r24	; 0x0b
    6d8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d8e:	8c 01       	movw	r16, r24
    6d90:	c8 01       	movw	r24, r16
    6d92:	01 97       	sbiw	r24, 0x01	; 1
    6d94:	f1 f7       	brne	.-4      	; 0x6d92 <pick_drop+0xe0>
    6d96:	8c 01       	movw	r16, r24
    6d98:	1c 87       	std	Y+12, r17	; 0x0c
    6d9a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d9c:	89 85       	ldd	r24, Y+9	; 0x09
    6d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da0:	01 97       	sbiw	r24, 0x01	; 1
    6da2:	9a 87       	std	Y+10, r25	; 0x0a
    6da4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6da6:	89 85       	ldd	r24, Y+9	; 0x09
    6da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6daa:	00 97       	sbiw	r24, 0x00	; 0
    6dac:	51 f7       	brne	.-44     	; 0x6d82 <pick_drop+0xd0>
    6dae:	17 c0       	rjmp	.+46     	; 0x6dde <pick_drop+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6db0:	6d 81       	ldd	r22, Y+5	; 0x05
    6db2:	7e 81       	ldd	r23, Y+6	; 0x06
    6db4:	8f 81       	ldd	r24, Y+7	; 0x07
    6db6:	98 85       	ldd	r25, Y+8	; 0x08
    6db8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6dbc:	dc 01       	movw	r26, r24
    6dbe:	cb 01       	movw	r24, r22
    6dc0:	9a 87       	std	Y+10, r25	; 0x0a
    6dc2:	89 87       	std	Y+9, r24	; 0x09
    6dc4:	89 85       	ldd	r24, Y+9	; 0x09
    6dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dc8:	9e 87       	std	Y+14, r25	; 0x0e
    6dca:	8d 87       	std	Y+13, r24	; 0x0d
    6dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dd0:	8c 01       	movw	r16, r24
    6dd2:	f8 01       	movw	r30, r16
    6dd4:	31 97       	sbiw	r30, 0x01	; 1
    6dd6:	f1 f7       	brne	.-4      	; 0x6dd4 <pick_drop+0x122>
    6dd8:	8f 01       	movw	r16, r30
    6dda:	1e 87       	std	Y+14, r17	; 0x0e
    6ddc:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    6dde:	80 91 6d 03 	lds	r24, 0x036D
    6de2:	90 91 6e 03 	lds	r25, 0x036E
    6de6:	01 97       	sbiw	r24, 0x01	; 1
    6de8:	8f 58       	subi	r24, 0x8F	; 143
    6dea:	9c 4f       	sbci	r25, 0xFC	; 252
    6dec:	fc 01       	movw	r30, r24
    6dee:	80 81       	ld	r24, Z
    6df0:	8c 34       	cpi	r24, 0x4C	; 76
    6df2:	b1 f0       	breq	.+44     	; 0x6e20 <pick_drop+0x16e>
    6df4:	80 91 6d 03 	lds	r24, 0x036D
    6df8:	90 91 6e 03 	lds	r25, 0x036E
    6dfc:	01 97       	sbiw	r24, 0x01	; 1
    6dfe:	8f 58       	subi	r24, 0x8F	; 143
    6e00:	9c 4f       	sbci	r25, 0xFC	; 252
    6e02:	fc 01       	movw	r30, r24
    6e04:	80 81       	ld	r24, Z
    6e06:	82 35       	cpi	r24, 0x52	; 82
    6e08:	59 f0       	breq	.+22     	; 0x6e20 <pick_drop+0x16e>
    6e0a:	80 91 6d 03 	lds	r24, 0x036D
    6e0e:	90 91 6e 03 	lds	r25, 0x036E
    6e12:	01 97       	sbiw	r24, 0x01	; 1
    6e14:	8f 58       	subi	r24, 0x8F	; 143
    6e16:	9c 4f       	sbci	r25, 0xFC	; 252
    6e18:	fc 01       	movw	r30, r24
    6e1a:	80 81       	ld	r24, Z
    6e1c:	85 35       	cpi	r24, 0x55	; 85
    6e1e:	c9 f4       	brne	.+50     	; 0x6e52 <pick_drop+0x1a0>
	{
	if(pd=='7'||pd=='6'||pd=='5')
    6e20:	ce 01       	movw	r24, r28
    6e22:	89 51       	subi	r24, 0x19	; 25
    6e24:	9d 4f       	sbci	r25, 0xFD	; 253
    6e26:	fc 01       	movw	r30, r24
    6e28:	80 81       	ld	r24, Z
    6e2a:	87 33       	cpi	r24, 0x37	; 55
    6e2c:	71 f0       	breq	.+28     	; 0x6e4a <pick_drop+0x198>
    6e2e:	ce 01       	movw	r24, r28
    6e30:	89 51       	subi	r24, 0x19	; 25
    6e32:	9d 4f       	sbci	r25, 0xFD	; 253
    6e34:	fc 01       	movw	r30, r24
    6e36:	80 81       	ld	r24, Z
    6e38:	86 33       	cpi	r24, 0x36	; 54
    6e3a:	39 f0       	breq	.+14     	; 0x6e4a <pick_drop+0x198>
    6e3c:	ce 01       	movw	r24, r28
    6e3e:	89 51       	subi	r24, 0x19	; 25
    6e40:	9d 4f       	sbci	r25, 0xFD	; 253
    6e42:	fc 01       	movw	r30, r24
    6e44:	80 81       	ld	r24, Z
    6e46:	85 33       	cpi	r24, 0x35	; 53
    6e48:	21 f4       	brne	.+8      	; 0x6e52 <pick_drop+0x1a0>
		back_mm(50);
    6e4a:	82 e3       	ldi	r24, 0x32	; 50
    6e4c:	90 e0       	ldi	r25, 0x00	; 0
    6e4e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
		//back_mm(1);
	//}
	//else
	//back_mm(1);
	}
	if(pd=='D'){
    6e52:	ce 01       	movw	r24, r28
    6e54:	89 51       	subi	r24, 0x19	; 25
    6e56:	9d 4f       	sbci	r25, 0xFD	; 253
    6e58:	fc 01       	movw	r30, r24
    6e5a:	80 81       	ld	r24, Z
    6e5c:	84 34       	cpi	r24, 0x44	; 68
    6e5e:	09 f0       	breq	.+2      	; 0x6e62 <pick_drop+0x1b0>
    6e60:	06 c1       	rjmp	.+524    	; 0x706e <pick_drop+0x3bc>
		back_mm(20);
    6e62:	84 e1       	ldi	r24, 0x14	; 20
    6e64:	90 e0       	ldi	r25, 0x00	; 0
    6e66:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    6e6a:	80 e0       	ldi	r24, 0x00	; 0
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	a0 ea       	ldi	r26, 0xA0	; 160
    6e70:	b1 e4       	ldi	r27, 0x41	; 65
    6e72:	8f 87       	std	Y+15, r24	; 0x0f
    6e74:	98 8b       	std	Y+16, r25	; 0x10
    6e76:	a9 8b       	std	Y+17, r26	; 0x11
    6e78:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6e7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    6e7c:	78 89       	ldd	r23, Y+16	; 0x10
    6e7e:	89 89       	ldd	r24, Y+17	; 0x11
    6e80:	9a 89       	ldd	r25, Y+18	; 0x12
    6e82:	26 e6       	ldi	r18, 0x66	; 102
    6e84:	36 e6       	ldi	r19, 0x66	; 102
    6e86:	46 e6       	ldi	r20, 0x66	; 102
    6e88:	55 e4       	ldi	r21, 0x45	; 69
    6e8a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6e8e:	dc 01       	movw	r26, r24
    6e90:	cb 01       	movw	r24, r22
    6e92:	8b 8b       	std	Y+19, r24	; 0x13
    6e94:	9c 8b       	std	Y+20, r25	; 0x14
    6e96:	ad 8b       	std	Y+21, r26	; 0x15
    6e98:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6e9a:	11 e0       	ldi	r17, 0x01	; 1
    6e9c:	6b 89       	ldd	r22, Y+19	; 0x13
    6e9e:	7c 89       	ldd	r23, Y+20	; 0x14
    6ea0:	8d 89       	ldd	r24, Y+21	; 0x15
    6ea2:	9e 89       	ldd	r25, Y+22	; 0x16
    6ea4:	20 e0       	ldi	r18, 0x00	; 0
    6ea6:	30 e0       	ldi	r19, 0x00	; 0
    6ea8:	40 e8       	ldi	r20, 0x80	; 128
    6eaa:	5f e3       	ldi	r21, 0x3F	; 63
    6eac:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6eb0:	88 23       	and	r24, r24
    6eb2:	0c f0       	brlt	.+2      	; 0x6eb6 <pick_drop+0x204>
    6eb4:	10 e0       	ldi	r17, 0x00	; 0
    6eb6:	11 23       	and	r17, r17
    6eb8:	29 f0       	breq	.+10     	; 0x6ec4 <pick_drop+0x212>
		__ticks = 1;
    6eba:	81 e0       	ldi	r24, 0x01	; 1
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	98 8f       	std	Y+24, r25	; 0x18
    6ec0:	8f 8b       	std	Y+23, r24	; 0x17
    6ec2:	46 c0       	rjmp	.+140    	; 0x6f50 <pick_drop+0x29e>
	else if (__tmp > 65535)
    6ec4:	11 e0       	ldi	r17, 0x01	; 1
    6ec6:	6b 89       	ldd	r22, Y+19	; 0x13
    6ec8:	7c 89       	ldd	r23, Y+20	; 0x14
    6eca:	8d 89       	ldd	r24, Y+21	; 0x15
    6ecc:	9e 89       	ldd	r25, Y+22	; 0x16
    6ece:	20 e0       	ldi	r18, 0x00	; 0
    6ed0:	3f ef       	ldi	r19, 0xFF	; 255
    6ed2:	4f e7       	ldi	r20, 0x7F	; 127
    6ed4:	57 e4       	ldi	r21, 0x47	; 71
    6ed6:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6eda:	18 16       	cp	r1, r24
    6edc:	0c f0       	brlt	.+2      	; 0x6ee0 <pick_drop+0x22e>
    6ede:	10 e0       	ldi	r17, 0x00	; 0
    6ee0:	11 23       	and	r17, r17
    6ee2:	61 f1       	breq	.+88     	; 0x6f3c <pick_drop+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ee4:	6f 85       	ldd	r22, Y+15	; 0x0f
    6ee6:	78 89       	ldd	r23, Y+16	; 0x10
    6ee8:	89 89       	ldd	r24, Y+17	; 0x11
    6eea:	9a 89       	ldd	r25, Y+18	; 0x12
    6eec:	20 e0       	ldi	r18, 0x00	; 0
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	40 e2       	ldi	r20, 0x20	; 32
    6ef2:	51 e4       	ldi	r21, 0x41	; 65
    6ef4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6ef8:	dc 01       	movw	r26, r24
    6efa:	cb 01       	movw	r24, r22
    6efc:	bc 01       	movw	r22, r24
    6efe:	cd 01       	movw	r24, r26
    6f00:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6f04:	dc 01       	movw	r26, r24
    6f06:	cb 01       	movw	r24, r22
    6f08:	98 8f       	std	Y+24, r25	; 0x18
    6f0a:	8f 8b       	std	Y+23, r24	; 0x17
    6f0c:	12 c0       	rjmp	.+36     	; 0x6f32 <pick_drop+0x280>
    6f0e:	80 e7       	ldi	r24, 0x70	; 112
    6f10:	91 e0       	ldi	r25, 0x01	; 1
    6f12:	9a 8f       	std	Y+26, r25	; 0x1a
    6f14:	89 8f       	std	Y+25, r24	; 0x19
    6f16:	89 8d       	ldd	r24, Y+25	; 0x19
    6f18:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6f1a:	8c 01       	movw	r16, r24
    6f1c:	c8 01       	movw	r24, r16
    6f1e:	01 97       	sbiw	r24, 0x01	; 1
    6f20:	f1 f7       	brne	.-4      	; 0x6f1e <pick_drop+0x26c>
    6f22:	8c 01       	movw	r16, r24
    6f24:	1a 8f       	std	Y+26, r17	; 0x1a
    6f26:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f28:	8f 89       	ldd	r24, Y+23	; 0x17
    6f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    6f2c:	01 97       	sbiw	r24, 0x01	; 1
    6f2e:	98 8f       	std	Y+24, r25	; 0x18
    6f30:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f32:	8f 89       	ldd	r24, Y+23	; 0x17
    6f34:	98 8d       	ldd	r25, Y+24	; 0x18
    6f36:	00 97       	sbiw	r24, 0x00	; 0
    6f38:	51 f7       	brne	.-44     	; 0x6f0e <pick_drop+0x25c>
    6f3a:	17 c0       	rjmp	.+46     	; 0x6f6a <pick_drop+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f3c:	6b 89       	ldd	r22, Y+19	; 0x13
    6f3e:	7c 89       	ldd	r23, Y+20	; 0x14
    6f40:	8d 89       	ldd	r24, Y+21	; 0x15
    6f42:	9e 89       	ldd	r25, Y+22	; 0x16
    6f44:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    6f48:	dc 01       	movw	r26, r24
    6f4a:	cb 01       	movw	r24, r22
    6f4c:	98 8f       	std	Y+24, r25	; 0x18
    6f4e:	8f 8b       	std	Y+23, r24	; 0x17
    6f50:	8f 89       	ldd	r24, Y+23	; 0x17
    6f52:	98 8d       	ldd	r25, Y+24	; 0x18
    6f54:	9c 8f       	std	Y+28, r25	; 0x1c
    6f56:	8b 8f       	std	Y+27, r24	; 0x1b
    6f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f5c:	8c 01       	movw	r16, r24
    6f5e:	f8 01       	movw	r30, r16
    6f60:	31 97       	sbiw	r30, 0x01	; 1
    6f62:	f1 f7       	brne	.-4      	; 0x6f60 <pick_drop+0x2ae>
    6f64:	8f 01       	movw	r16, r30
    6f66:	1c 8f       	std	Y+28, r17	; 0x1c
    6f68:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(20);
		drop();
    6f6a:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <drop>
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	a8 ec       	ldi	r26, 0xC8	; 200
    6f74:	b2 e4       	ldi	r27, 0x42	; 66
    6f76:	8d 8f       	std	Y+29, r24	; 0x1d
    6f78:	9e 8f       	std	Y+30, r25	; 0x1e
    6f7a:	af 8f       	std	Y+31, r26	; 0x1f
    6f7c:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6f7e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6f80:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6f82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6f84:	98 a1       	lds	r25, 0x48
    6f86:	26 e6       	ldi	r18, 0x66	; 102
    6f88:	36 e6       	ldi	r19, 0x66	; 102
    6f8a:	46 e6       	ldi	r20, 0x66	; 102
    6f8c:	55 e4       	ldi	r21, 0x45	; 69
    6f8e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6f92:	dc 01       	movw	r26, r24
    6f94:	cb 01       	movw	r24, r22
    6f96:	89 a3       	lds	r24, 0x59
    6f98:	9a a3       	lds	r25, 0x5a
    6f9a:	ab a3       	lds	r26, 0x5b
    6f9c:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6f9e:	11 e0       	ldi	r17, 0x01	; 1
    6fa0:	69 a1       	lds	r22, 0x49
    6fa2:	7a a1       	lds	r23, 0x4a
    6fa4:	8b a1       	lds	r24, 0x4b
    6fa6:	9c a1       	lds	r25, 0x4c
    6fa8:	20 e0       	ldi	r18, 0x00	; 0
    6faa:	30 e0       	ldi	r19, 0x00	; 0
    6fac:	40 e8       	ldi	r20, 0x80	; 128
    6fae:	5f e3       	ldi	r21, 0x3F	; 63
    6fb0:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    6fb4:	88 23       	and	r24, r24
    6fb6:	0c f0       	brlt	.+2      	; 0x6fba <pick_drop+0x308>
    6fb8:	10 e0       	ldi	r17, 0x00	; 0
    6fba:	11 23       	and	r17, r17
    6fbc:	29 f0       	breq	.+10     	; 0x6fc8 <pick_drop+0x316>
		__ticks = 1;
    6fbe:	81 e0       	ldi	r24, 0x01	; 1
    6fc0:	90 e0       	ldi	r25, 0x00	; 0
    6fc2:	9e a3       	lds	r25, 0x5e
    6fc4:	8d a3       	lds	r24, 0x5d
    6fc6:	46 c0       	rjmp	.+140    	; 0x7054 <pick_drop+0x3a2>
	else if (__tmp > 65535)
    6fc8:	11 e0       	ldi	r17, 0x01	; 1
    6fca:	69 a1       	lds	r22, 0x49
    6fcc:	7a a1       	lds	r23, 0x4a
    6fce:	8b a1       	lds	r24, 0x4b
    6fd0:	9c a1       	lds	r25, 0x4c
    6fd2:	20 e0       	ldi	r18, 0x00	; 0
    6fd4:	3f ef       	ldi	r19, 0xFF	; 255
    6fd6:	4f e7       	ldi	r20, 0x7F	; 127
    6fd8:	57 e4       	ldi	r21, 0x47	; 71
    6fda:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    6fde:	18 16       	cp	r1, r24
    6fe0:	0c f0       	brlt	.+2      	; 0x6fe4 <pick_drop+0x332>
    6fe2:	10 e0       	ldi	r17, 0x00	; 0
    6fe4:	11 23       	and	r17, r17
    6fe6:	61 f1       	breq	.+88     	; 0x7040 <pick_drop+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fe8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6fea:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6fec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6fee:	98 a1       	lds	r25, 0x48
    6ff0:	20 e0       	ldi	r18, 0x00	; 0
    6ff2:	30 e0       	ldi	r19, 0x00	; 0
    6ff4:	40 e2       	ldi	r20, 0x20	; 32
    6ff6:	51 e4       	ldi	r21, 0x41	; 65
    6ff8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    6ffc:	dc 01       	movw	r26, r24
    6ffe:	cb 01       	movw	r24, r22
    7000:	bc 01       	movw	r22, r24
    7002:	cd 01       	movw	r24, r26
    7004:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7008:	dc 01       	movw	r26, r24
    700a:	cb 01       	movw	r24, r22
    700c:	9e a3       	lds	r25, 0x5e
    700e:	8d a3       	lds	r24, 0x5d
    7010:	12 c0       	rjmp	.+36     	; 0x7036 <pick_drop+0x384>
    7012:	80 e7       	ldi	r24, 0x70	; 112
    7014:	91 e0       	ldi	r25, 0x01	; 1
    7016:	98 a7       	lds	r25, 0x78
    7018:	8f a3       	lds	r24, 0x5f
    701a:	8f a1       	lds	r24, 0x4f
    701c:	98 a5       	lds	r25, 0x68
    701e:	8c 01       	movw	r16, r24
    7020:	c8 01       	movw	r24, r16
    7022:	01 97       	sbiw	r24, 0x01	; 1
    7024:	f1 f7       	brne	.-4      	; 0x7022 <pick_drop+0x370>
    7026:	8c 01       	movw	r16, r24
    7028:	18 a7       	lds	r17, 0x78
    702a:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    702c:	8d a1       	lds	r24, 0x4d
    702e:	9e a1       	lds	r25, 0x4e
    7030:	01 97       	sbiw	r24, 0x01	; 1
    7032:	9e a3       	lds	r25, 0x5e
    7034:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7036:	8d a1       	lds	r24, 0x4d
    7038:	9e a1       	lds	r25, 0x4e
    703a:	00 97       	sbiw	r24, 0x00	; 0
    703c:	51 f7       	brne	.-44     	; 0x7012 <pick_drop+0x360>
    703e:	17 c0       	rjmp	.+46     	; 0x706e <pick_drop+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7040:	69 a1       	lds	r22, 0x49
    7042:	7a a1       	lds	r23, 0x4a
    7044:	8b a1       	lds	r24, 0x4b
    7046:	9c a1       	lds	r25, 0x4c
    7048:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    704c:	dc 01       	movw	r26, r24
    704e:	cb 01       	movw	r24, r22
    7050:	9e a3       	lds	r25, 0x5e
    7052:	8d a3       	lds	r24, 0x5d
    7054:	8d a1       	lds	r24, 0x4d
    7056:	9e a1       	lds	r25, 0x4e
    7058:	9a a7       	lds	r25, 0x7a
    705a:	89 a7       	lds	r24, 0x79
    705c:	89 a5       	lds	r24, 0x69
    705e:	9a a5       	lds	r25, 0x6a
    7060:	8c 01       	movw	r16, r24
    7062:	f8 01       	movw	r30, r16
    7064:	31 97       	sbiw	r30, 0x01	; 1
    7066:	f1 f7       	brne	.-4      	; 0x7064 <pick_drop+0x3b2>
    7068:	8f 01       	movw	r16, r30
    706a:	1a a7       	lds	r17, 0x7a
    706c:	09 a7       	lds	r16, 0x79
		_delay_ms(100);
	}
	if(master_path[node-1]=='U')
    706e:	80 91 6d 03 	lds	r24, 0x036D
    7072:	90 91 6e 03 	lds	r25, 0x036E
    7076:	01 97       	sbiw	r24, 0x01	; 1
    7078:	8f 58       	subi	r24, 0x8F	; 143
    707a:	9c 4f       	sbci	r25, 0xFC	; 252
    707c:	fc 01       	movw	r30, r24
    707e:	80 81       	ld	r24, Z
    7080:	85 35       	cpi	r24, 0x55	; 85
    7082:	09 f0       	breq	.+2      	; 0x7086 <pick_drop+0x3d4>
    7084:	5f c6       	rjmp	.+3262   	; 0x7d44 <pick_drop+0x1092>
	{
		if(pd == '1')
    7086:	ce 01       	movw	r24, r28
    7088:	89 51       	subi	r24, 0x19	; 25
    708a:	9d 4f       	sbci	r25, 0xFD	; 253
    708c:	fc 01       	movw	r30, r24
    708e:	80 81       	ld	r24, Z
    7090:	81 33       	cpi	r24, 0x31	; 49
    7092:	09 f0       	breq	.+2      	; 0x7096 <pick_drop+0x3e4>
    7094:	f5 c2       	rjmp	.+1514   	; 0x7680 <pick_drop+0x9ce>
		{
			forward_mm(60);
    7096:	8c e3       	ldi	r24, 0x3C	; 60
    7098:	90 e0       	ldi	r25, 0x00	; 0
    709a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    709e:	80 e0       	ldi	r24, 0x00	; 0
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	a0 ea       	ldi	r26, 0xA0	; 160
    70a4:	b1 e4       	ldi	r27, 0x41	; 65
    70a6:	8b a7       	lds	r24, 0x7b
    70a8:	9c a7       	lds	r25, 0x7c
    70aa:	ad a7       	lds	r26, 0x7d
    70ac:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    70ae:	6b a5       	lds	r22, 0x6b
    70b0:	7c a5       	lds	r23, 0x6c
    70b2:	8d a5       	lds	r24, 0x6d
    70b4:	9e a5       	lds	r25, 0x6e
    70b6:	26 e6       	ldi	r18, 0x66	; 102
    70b8:	36 e6       	ldi	r19, 0x66	; 102
    70ba:	46 e6       	ldi	r20, 0x66	; 102
    70bc:	55 e4       	ldi	r21, 0x45	; 69
    70be:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    70c2:	dc 01       	movw	r26, r24
    70c4:	cb 01       	movw	r24, r22
    70c6:	8f a7       	lds	r24, 0x7f
    70c8:	98 ab       	sts	0x58, r25
    70ca:	a9 ab       	sts	0x59, r26
    70cc:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    70ce:	11 e0       	ldi	r17, 0x01	; 1
    70d0:	6f a5       	lds	r22, 0x6f
    70d2:	78 a9       	sts	0x48, r23
    70d4:	89 a9       	sts	0x49, r24
    70d6:	9a a9       	sts	0x4a, r25
    70d8:	20 e0       	ldi	r18, 0x00	; 0
    70da:	30 e0       	ldi	r19, 0x00	; 0
    70dc:	40 e8       	ldi	r20, 0x80	; 128
    70de:	5f e3       	ldi	r21, 0x3F	; 63
    70e0:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    70e4:	88 23       	and	r24, r24
    70e6:	0c f0       	brlt	.+2      	; 0x70ea <pick_drop+0x438>
    70e8:	10 e0       	ldi	r17, 0x00	; 0
    70ea:	11 23       	and	r17, r17
    70ec:	29 f0       	breq	.+10     	; 0x70f8 <pick_drop+0x446>
		__ticks = 1;
    70ee:	81 e0       	ldi	r24, 0x01	; 1
    70f0:	90 e0       	ldi	r25, 0x00	; 0
    70f2:	9c ab       	sts	0x5c, r25
    70f4:	8b ab       	sts	0x5b, r24
    70f6:	46 c0       	rjmp	.+140    	; 0x7184 <pick_drop+0x4d2>
	else if (__tmp > 65535)
    70f8:	11 e0       	ldi	r17, 0x01	; 1
    70fa:	6f a5       	lds	r22, 0x6f
    70fc:	78 a9       	sts	0x48, r23
    70fe:	89 a9       	sts	0x49, r24
    7100:	9a a9       	sts	0x4a, r25
    7102:	20 e0       	ldi	r18, 0x00	; 0
    7104:	3f ef       	ldi	r19, 0xFF	; 255
    7106:	4f e7       	ldi	r20, 0x7F	; 127
    7108:	57 e4       	ldi	r21, 0x47	; 71
    710a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    710e:	18 16       	cp	r1, r24
    7110:	0c f0       	brlt	.+2      	; 0x7114 <pick_drop+0x462>
    7112:	10 e0       	ldi	r17, 0x00	; 0
    7114:	11 23       	and	r17, r17
    7116:	61 f1       	breq	.+88     	; 0x7170 <pick_drop+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7118:	6b a5       	lds	r22, 0x6b
    711a:	7c a5       	lds	r23, 0x6c
    711c:	8d a5       	lds	r24, 0x6d
    711e:	9e a5       	lds	r25, 0x6e
    7120:	20 e0       	ldi	r18, 0x00	; 0
    7122:	30 e0       	ldi	r19, 0x00	; 0
    7124:	40 e2       	ldi	r20, 0x20	; 32
    7126:	51 e4       	ldi	r21, 0x41	; 65
    7128:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    712c:	dc 01       	movw	r26, r24
    712e:	cb 01       	movw	r24, r22
    7130:	bc 01       	movw	r22, r24
    7132:	cd 01       	movw	r24, r26
    7134:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7138:	dc 01       	movw	r26, r24
    713a:	cb 01       	movw	r24, r22
    713c:	9c ab       	sts	0x5c, r25
    713e:	8b ab       	sts	0x5b, r24
    7140:	12 c0       	rjmp	.+36     	; 0x7166 <pick_drop+0x4b4>
    7142:	80 e7       	ldi	r24, 0x70	; 112
    7144:	91 e0       	ldi	r25, 0x01	; 1
    7146:	9e ab       	sts	0x5e, r25
    7148:	8d ab       	sts	0x5d, r24
    714a:	8d a9       	sts	0x4d, r24
    714c:	9e a9       	sts	0x4e, r25
    714e:	8c 01       	movw	r16, r24
    7150:	c8 01       	movw	r24, r16
    7152:	01 97       	sbiw	r24, 0x01	; 1
    7154:	f1 f7       	brne	.-4      	; 0x7152 <pick_drop+0x4a0>
    7156:	8c 01       	movw	r16, r24
    7158:	1e ab       	sts	0x5e, r17
    715a:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    715c:	8b a9       	sts	0x4b, r24
    715e:	9c a9       	sts	0x4c, r25
    7160:	01 97       	sbiw	r24, 0x01	; 1
    7162:	9c ab       	sts	0x5c, r25
    7164:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7166:	8b a9       	sts	0x4b, r24
    7168:	9c a9       	sts	0x4c, r25
    716a:	00 97       	sbiw	r24, 0x00	; 0
    716c:	51 f7       	brne	.-44     	; 0x7142 <pick_drop+0x490>
    716e:	17 c0       	rjmp	.+46     	; 0x719e <pick_drop+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7170:	6f a5       	lds	r22, 0x6f
    7172:	78 a9       	sts	0x48, r23
    7174:	89 a9       	sts	0x49, r24
    7176:	9a a9       	sts	0x4a, r25
    7178:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    717c:	dc 01       	movw	r26, r24
    717e:	cb 01       	movw	r24, r22
    7180:	9c ab       	sts	0x5c, r25
    7182:	8b ab       	sts	0x5b, r24
    7184:	8b a9       	sts	0x4b, r24
    7186:	9c a9       	sts	0x4c, r25
    7188:	98 af       	sts	0x78, r25
    718a:	8f ab       	sts	0x5f, r24
    718c:	8f a9       	sts	0x4f, r24
    718e:	98 ad       	sts	0x68, r25
    7190:	8c 01       	movw	r16, r24
    7192:	f8 01       	movw	r30, r16
    7194:	31 97       	sbiw	r30, 0x01	; 1
    7196:	f1 f7       	brne	.-4      	; 0x7194 <pick_drop+0x4e2>
    7198:	8f 01       	movw	r16, r30
    719a:	18 af       	sts	0x78, r17
    719c:	0f ab       	sts	0x5f, r16
			_delay_ms(20);
			spl_left2();
    719e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    71a2:	80 e0       	ldi	r24, 0x00	; 0
    71a4:	90 e0       	ldi	r25, 0x00	; 0
    71a6:	a8 e4       	ldi	r26, 0x48	; 72
    71a8:	b2 e4       	ldi	r27, 0x42	; 66
    71aa:	89 af       	sts	0x79, r24
    71ac:	9a af       	sts	0x7a, r25
    71ae:	ab af       	sts	0x7b, r26
    71b0:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    71b2:	69 ad       	sts	0x69, r22
    71b4:	7a ad       	sts	0x6a, r23
    71b6:	8b ad       	sts	0x6b, r24
    71b8:	9c ad       	sts	0x6c, r25
    71ba:	26 e6       	ldi	r18, 0x66	; 102
    71bc:	36 e6       	ldi	r19, 0x66	; 102
    71be:	46 e6       	ldi	r20, 0x66	; 102
    71c0:	55 e4       	ldi	r21, 0x45	; 69
    71c2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    71c6:	dc 01       	movw	r26, r24
    71c8:	cb 01       	movw	r24, r22
    71ca:	9e 01       	movw	r18, r28
    71cc:	23 5c       	subi	r18, 0xC3	; 195
    71ce:	3f 4f       	sbci	r19, 0xFF	; 255
    71d0:	f9 01       	movw	r30, r18
    71d2:	80 83       	st	Z, r24
    71d4:	91 83       	std	Z+1, r25	; 0x01
    71d6:	a2 83       	std	Z+2, r26	; 0x02
    71d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    71da:	11 e0       	ldi	r17, 0x01	; 1
    71dc:	ce 01       	movw	r24, r28
    71de:	cd 96       	adiw	r24, 0x3d	; 61
    71e0:	fc 01       	movw	r30, r24
    71e2:	60 81       	ld	r22, Z
    71e4:	71 81       	ldd	r23, Z+1	; 0x01
    71e6:	82 81       	ldd	r24, Z+2	; 0x02
    71e8:	93 81       	ldd	r25, Z+3	; 0x03
    71ea:	20 e0       	ldi	r18, 0x00	; 0
    71ec:	30 e0       	ldi	r19, 0x00	; 0
    71ee:	40 e8       	ldi	r20, 0x80	; 128
    71f0:	5f e3       	ldi	r21, 0x3F	; 63
    71f2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    71f6:	88 23       	and	r24, r24
    71f8:	0c f0       	brlt	.+2      	; 0x71fc <pick_drop+0x54a>
    71fa:	10 e0       	ldi	r17, 0x00	; 0
    71fc:	11 23       	and	r17, r17
    71fe:	49 f0       	breq	.+18     	; 0x7212 <pick_drop+0x560>
		__ticks = 1;
    7200:	ce 01       	movw	r24, r28
    7202:	8f 5b       	subi	r24, 0xBF	; 191
    7204:	9f 4f       	sbci	r25, 0xFF	; 255
    7206:	21 e0       	ldi	r18, 0x01	; 1
    7208:	30 e0       	ldi	r19, 0x00	; 0
    720a:	fc 01       	movw	r30, r24
    720c:	31 83       	std	Z+1, r19	; 0x01
    720e:	20 83       	st	Z, r18
    7210:	6e c0       	rjmp	.+220    	; 0x72ee <pick_drop+0x63c>
	else if (__tmp > 65535)
    7212:	11 e0       	ldi	r17, 0x01	; 1
    7214:	ce 01       	movw	r24, r28
    7216:	cd 96       	adiw	r24, 0x3d	; 61
    7218:	fc 01       	movw	r30, r24
    721a:	60 81       	ld	r22, Z
    721c:	71 81       	ldd	r23, Z+1	; 0x01
    721e:	82 81       	ldd	r24, Z+2	; 0x02
    7220:	93 81       	ldd	r25, Z+3	; 0x03
    7222:	20 e0       	ldi	r18, 0x00	; 0
    7224:	3f ef       	ldi	r19, 0xFF	; 255
    7226:	4f e7       	ldi	r20, 0x7F	; 127
    7228:	57 e4       	ldi	r21, 0x47	; 71
    722a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    722e:	18 16       	cp	r1, r24
    7230:	0c f0       	brlt	.+2      	; 0x7234 <pick_drop+0x582>
    7232:	10 e0       	ldi	r17, 0x00	; 0
    7234:	11 23       	and	r17, r17
    7236:	09 f4       	brne	.+2      	; 0x723a <pick_drop+0x588>
    7238:	49 c0       	rjmp	.+146    	; 0x72cc <pick_drop+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    723a:	69 ad       	sts	0x69, r22
    723c:	7a ad       	sts	0x6a, r23
    723e:	8b ad       	sts	0x6b, r24
    7240:	9c ad       	sts	0x6c, r25
    7242:	20 e0       	ldi	r18, 0x00	; 0
    7244:	30 e0       	ldi	r19, 0x00	; 0
    7246:	40 e2       	ldi	r20, 0x20	; 32
    7248:	51 e4       	ldi	r21, 0x41	; 65
    724a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    724e:	dc 01       	movw	r26, r24
    7250:	cb 01       	movw	r24, r22
    7252:	8e 01       	movw	r16, r28
    7254:	0f 5b       	subi	r16, 0xBF	; 191
    7256:	1f 4f       	sbci	r17, 0xFF	; 255
    7258:	bc 01       	movw	r22, r24
    725a:	cd 01       	movw	r24, r26
    725c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7260:	dc 01       	movw	r26, r24
    7262:	cb 01       	movw	r24, r22
    7264:	f8 01       	movw	r30, r16
    7266:	91 83       	std	Z+1, r25	; 0x01
    7268:	80 83       	st	Z, r24
    726a:	27 c0       	rjmp	.+78     	; 0x72ba <pick_drop+0x608>
    726c:	ce 01       	movw	r24, r28
    726e:	8d 5b       	subi	r24, 0xBD	; 189
    7270:	9f 4f       	sbci	r25, 0xFF	; 255
    7272:	20 e7       	ldi	r18, 0x70	; 112
    7274:	31 e0       	ldi	r19, 0x01	; 1
    7276:	fc 01       	movw	r30, r24
    7278:	31 83       	std	Z+1, r19	; 0x01
    727a:	20 83       	st	Z, r18
    727c:	ce 01       	movw	r24, r28
    727e:	8d 5b       	subi	r24, 0xBD	; 189
    7280:	9f 4f       	sbci	r25, 0xFF	; 255
    7282:	fc 01       	movw	r30, r24
    7284:	80 81       	ld	r24, Z
    7286:	91 81       	ldd	r25, Z+1	; 0x01
    7288:	8c 01       	movw	r16, r24
    728a:	c8 01       	movw	r24, r16
    728c:	01 97       	sbiw	r24, 0x01	; 1
    728e:	f1 f7       	brne	.-4      	; 0x728c <pick_drop+0x5da>
    7290:	8c 01       	movw	r16, r24
    7292:	ce 01       	movw	r24, r28
    7294:	8d 5b       	subi	r24, 0xBD	; 189
    7296:	9f 4f       	sbci	r25, 0xFF	; 255
    7298:	fc 01       	movw	r30, r24
    729a:	11 83       	std	Z+1, r17	; 0x01
    729c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    729e:	ce 01       	movw	r24, r28
    72a0:	8f 5b       	subi	r24, 0xBF	; 191
    72a2:	9f 4f       	sbci	r25, 0xFF	; 255
    72a4:	9e 01       	movw	r18, r28
    72a6:	2f 5b       	subi	r18, 0xBF	; 191
    72a8:	3f 4f       	sbci	r19, 0xFF	; 255
    72aa:	f9 01       	movw	r30, r18
    72ac:	20 81       	ld	r18, Z
    72ae:	31 81       	ldd	r19, Z+1	; 0x01
    72b0:	21 50       	subi	r18, 0x01	; 1
    72b2:	30 40       	sbci	r19, 0x00	; 0
    72b4:	fc 01       	movw	r30, r24
    72b6:	31 83       	std	Z+1, r19	; 0x01
    72b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72ba:	ce 01       	movw	r24, r28
    72bc:	8f 5b       	subi	r24, 0xBF	; 191
    72be:	9f 4f       	sbci	r25, 0xFF	; 255
    72c0:	fc 01       	movw	r30, r24
    72c2:	80 81       	ld	r24, Z
    72c4:	91 81       	ldd	r25, Z+1	; 0x01
    72c6:	00 97       	sbiw	r24, 0x00	; 0
    72c8:	89 f6       	brne	.-94     	; 0x726c <pick_drop+0x5ba>
    72ca:	2e c0       	rjmp	.+92     	; 0x7328 <pick_drop+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72cc:	8e 01       	movw	r16, r28
    72ce:	0f 5b       	subi	r16, 0xBF	; 191
    72d0:	1f 4f       	sbci	r17, 0xFF	; 255
    72d2:	ce 01       	movw	r24, r28
    72d4:	cd 96       	adiw	r24, 0x3d	; 61
    72d6:	fc 01       	movw	r30, r24
    72d8:	60 81       	ld	r22, Z
    72da:	71 81       	ldd	r23, Z+1	; 0x01
    72dc:	82 81       	ldd	r24, Z+2	; 0x02
    72de:	93 81       	ldd	r25, Z+3	; 0x03
    72e0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    72e4:	dc 01       	movw	r26, r24
    72e6:	cb 01       	movw	r24, r22
    72e8:	f8 01       	movw	r30, r16
    72ea:	91 83       	std	Z+1, r25	; 0x01
    72ec:	80 83       	st	Z, r24
    72ee:	ce 01       	movw	r24, r28
    72f0:	8b 5b       	subi	r24, 0xBB	; 187
    72f2:	9f 4f       	sbci	r25, 0xFF	; 255
    72f4:	9e 01       	movw	r18, r28
    72f6:	2f 5b       	subi	r18, 0xBF	; 191
    72f8:	3f 4f       	sbci	r19, 0xFF	; 255
    72fa:	f9 01       	movw	r30, r18
    72fc:	20 81       	ld	r18, Z
    72fe:	31 81       	ldd	r19, Z+1	; 0x01
    7300:	fc 01       	movw	r30, r24
    7302:	31 83       	std	Z+1, r19	; 0x01
    7304:	20 83       	st	Z, r18
    7306:	ce 01       	movw	r24, r28
    7308:	8b 5b       	subi	r24, 0xBB	; 187
    730a:	9f 4f       	sbci	r25, 0xFF	; 255
    730c:	fc 01       	movw	r30, r24
    730e:	80 81       	ld	r24, Z
    7310:	91 81       	ldd	r25, Z+1	; 0x01
    7312:	8c 01       	movw	r16, r24
    7314:	c8 01       	movw	r24, r16
    7316:	01 97       	sbiw	r24, 0x01	; 1
    7318:	f1 f7       	brne	.-4      	; 0x7316 <pick_drop+0x664>
    731a:	8c 01       	movw	r16, r24
    731c:	ce 01       	movw	r24, r28
    731e:	8b 5b       	subi	r24, 0xBB	; 187
    7320:	9f 4f       	sbci	r25, 0xFF	; 255
    7322:	fc 01       	movw	r30, r24
    7324:	11 83       	std	Z+1, r17	; 0x01
    7326:	00 83       	st	Z, r16
			_delay_ms(50);
			front();
    7328:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    732c:	9e 01       	movw	r18, r28
    732e:	29 5b       	subi	r18, 0xB9	; 185
    7330:	3f 4f       	sbci	r19, 0xFF	; 255
    7332:	80 e0       	ldi	r24, 0x00	; 0
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	a8 ec       	ldi	r26, 0xC8	; 200
    7338:	b2 e4       	ldi	r27, 0x42	; 66
    733a:	f9 01       	movw	r30, r18
    733c:	80 83       	st	Z, r24
    733e:	91 83       	std	Z+1, r25	; 0x01
    7340:	a2 83       	std	Z+2, r26	; 0x02
    7342:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7344:	8e 01       	movw	r16, r28
    7346:	05 5b       	subi	r16, 0xB5	; 181
    7348:	1f 4f       	sbci	r17, 0xFF	; 255
    734a:	ce 01       	movw	r24, r28
    734c:	89 5b       	subi	r24, 0xB9	; 185
    734e:	9f 4f       	sbci	r25, 0xFF	; 255
    7350:	fc 01       	movw	r30, r24
    7352:	60 81       	ld	r22, Z
    7354:	71 81       	ldd	r23, Z+1	; 0x01
    7356:	82 81       	ldd	r24, Z+2	; 0x02
    7358:	93 81       	ldd	r25, Z+3	; 0x03
    735a:	26 e6       	ldi	r18, 0x66	; 102
    735c:	36 e6       	ldi	r19, 0x66	; 102
    735e:	46 e6       	ldi	r20, 0x66	; 102
    7360:	55 e4       	ldi	r21, 0x45	; 69
    7362:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7366:	dc 01       	movw	r26, r24
    7368:	cb 01       	movw	r24, r22
    736a:	f8 01       	movw	r30, r16
    736c:	80 83       	st	Z, r24
    736e:	91 83       	std	Z+1, r25	; 0x01
    7370:	a2 83       	std	Z+2, r26	; 0x02
    7372:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7374:	ce 01       	movw	r24, r28
    7376:	85 5b       	subi	r24, 0xB5	; 181
    7378:	9f 4f       	sbci	r25, 0xFF	; 255
    737a:	11 e0       	ldi	r17, 0x01	; 1
    737c:	fc 01       	movw	r30, r24
    737e:	60 81       	ld	r22, Z
    7380:	71 81       	ldd	r23, Z+1	; 0x01
    7382:	82 81       	ldd	r24, Z+2	; 0x02
    7384:	93 81       	ldd	r25, Z+3	; 0x03
    7386:	20 e0       	ldi	r18, 0x00	; 0
    7388:	30 e0       	ldi	r19, 0x00	; 0
    738a:	40 e8       	ldi	r20, 0x80	; 128
    738c:	5f e3       	ldi	r21, 0x3F	; 63
    738e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7392:	88 23       	and	r24, r24
    7394:	0c f0       	brlt	.+2      	; 0x7398 <pick_drop+0x6e6>
    7396:	10 e0       	ldi	r17, 0x00	; 0
    7398:	11 23       	and	r17, r17
    739a:	49 f0       	breq	.+18     	; 0x73ae <pick_drop+0x6fc>
		__ticks = 1;
    739c:	ce 01       	movw	r24, r28
    739e:	81 5b       	subi	r24, 0xB1	; 177
    73a0:	9f 4f       	sbci	r25, 0xFF	; 255
    73a2:	21 e0       	ldi	r18, 0x01	; 1
    73a4:	30 e0       	ldi	r19, 0x00	; 0
    73a6:	fc 01       	movw	r30, r24
    73a8:	31 83       	std	Z+1, r19	; 0x01
    73aa:	20 83       	st	Z, r18
    73ac:	74 c0       	rjmp	.+232    	; 0x7496 <pick_drop+0x7e4>
	else if (__tmp > 65535)
    73ae:	ce 01       	movw	r24, r28
    73b0:	85 5b       	subi	r24, 0xB5	; 181
    73b2:	9f 4f       	sbci	r25, 0xFF	; 255
    73b4:	11 e0       	ldi	r17, 0x01	; 1
    73b6:	fc 01       	movw	r30, r24
    73b8:	60 81       	ld	r22, Z
    73ba:	71 81       	ldd	r23, Z+1	; 0x01
    73bc:	82 81       	ldd	r24, Z+2	; 0x02
    73be:	93 81       	ldd	r25, Z+3	; 0x03
    73c0:	20 e0       	ldi	r18, 0x00	; 0
    73c2:	3f ef       	ldi	r19, 0xFF	; 255
    73c4:	4f e7       	ldi	r20, 0x7F	; 127
    73c6:	57 e4       	ldi	r21, 0x47	; 71
    73c8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    73cc:	18 16       	cp	r1, r24
    73ce:	0c f0       	brlt	.+2      	; 0x73d2 <pick_drop+0x720>
    73d0:	10 e0       	ldi	r17, 0x00	; 0
    73d2:	11 23       	and	r17, r17
    73d4:	09 f4       	brne	.+2      	; 0x73d8 <pick_drop+0x726>
    73d6:	4d c0       	rjmp	.+154    	; 0x7472 <pick_drop+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73d8:	ce 01       	movw	r24, r28
    73da:	89 5b       	subi	r24, 0xB9	; 185
    73dc:	9f 4f       	sbci	r25, 0xFF	; 255
    73de:	fc 01       	movw	r30, r24
    73e0:	60 81       	ld	r22, Z
    73e2:	71 81       	ldd	r23, Z+1	; 0x01
    73e4:	82 81       	ldd	r24, Z+2	; 0x02
    73e6:	93 81       	ldd	r25, Z+3	; 0x03
    73e8:	20 e0       	ldi	r18, 0x00	; 0
    73ea:	30 e0       	ldi	r19, 0x00	; 0
    73ec:	40 e2       	ldi	r20, 0x20	; 32
    73ee:	51 e4       	ldi	r21, 0x41	; 65
    73f0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    73f4:	dc 01       	movw	r26, r24
    73f6:	cb 01       	movw	r24, r22
    73f8:	8e 01       	movw	r16, r28
    73fa:	01 5b       	subi	r16, 0xB1	; 177
    73fc:	1f 4f       	sbci	r17, 0xFF	; 255
    73fe:	bc 01       	movw	r22, r24
    7400:	cd 01       	movw	r24, r26
    7402:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7406:	dc 01       	movw	r26, r24
    7408:	cb 01       	movw	r24, r22
    740a:	f8 01       	movw	r30, r16
    740c:	91 83       	std	Z+1, r25	; 0x01
    740e:	80 83       	st	Z, r24
    7410:	27 c0       	rjmp	.+78     	; 0x7460 <pick_drop+0x7ae>
    7412:	ce 01       	movw	r24, r28
    7414:	8f 5a       	subi	r24, 0xAF	; 175
    7416:	9f 4f       	sbci	r25, 0xFF	; 255
    7418:	20 e7       	ldi	r18, 0x70	; 112
    741a:	31 e0       	ldi	r19, 0x01	; 1
    741c:	fc 01       	movw	r30, r24
    741e:	31 83       	std	Z+1, r19	; 0x01
    7420:	20 83       	st	Z, r18
    7422:	ce 01       	movw	r24, r28
    7424:	8f 5a       	subi	r24, 0xAF	; 175
    7426:	9f 4f       	sbci	r25, 0xFF	; 255
    7428:	fc 01       	movw	r30, r24
    742a:	80 81       	ld	r24, Z
    742c:	91 81       	ldd	r25, Z+1	; 0x01
    742e:	8c 01       	movw	r16, r24
    7430:	c8 01       	movw	r24, r16
    7432:	01 97       	sbiw	r24, 0x01	; 1
    7434:	f1 f7       	brne	.-4      	; 0x7432 <pick_drop+0x780>
    7436:	8c 01       	movw	r16, r24
    7438:	ce 01       	movw	r24, r28
    743a:	8f 5a       	subi	r24, 0xAF	; 175
    743c:	9f 4f       	sbci	r25, 0xFF	; 255
    743e:	fc 01       	movw	r30, r24
    7440:	11 83       	std	Z+1, r17	; 0x01
    7442:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7444:	ce 01       	movw	r24, r28
    7446:	81 5b       	subi	r24, 0xB1	; 177
    7448:	9f 4f       	sbci	r25, 0xFF	; 255
    744a:	9e 01       	movw	r18, r28
    744c:	21 5b       	subi	r18, 0xB1	; 177
    744e:	3f 4f       	sbci	r19, 0xFF	; 255
    7450:	f9 01       	movw	r30, r18
    7452:	20 81       	ld	r18, Z
    7454:	31 81       	ldd	r19, Z+1	; 0x01
    7456:	21 50       	subi	r18, 0x01	; 1
    7458:	30 40       	sbci	r19, 0x00	; 0
    745a:	fc 01       	movw	r30, r24
    745c:	31 83       	std	Z+1, r19	; 0x01
    745e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7460:	ce 01       	movw	r24, r28
    7462:	81 5b       	subi	r24, 0xB1	; 177
    7464:	9f 4f       	sbci	r25, 0xFF	; 255
    7466:	fc 01       	movw	r30, r24
    7468:	80 81       	ld	r24, Z
    746a:	91 81       	ldd	r25, Z+1	; 0x01
    746c:	00 97       	sbiw	r24, 0x00	; 0
    746e:	89 f6       	brne	.-94     	; 0x7412 <pick_drop+0x760>
    7470:	2f c0       	rjmp	.+94     	; 0x74d0 <pick_drop+0x81e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7472:	8e 01       	movw	r16, r28
    7474:	01 5b       	subi	r16, 0xB1	; 177
    7476:	1f 4f       	sbci	r17, 0xFF	; 255
    7478:	ce 01       	movw	r24, r28
    747a:	85 5b       	subi	r24, 0xB5	; 181
    747c:	9f 4f       	sbci	r25, 0xFF	; 255
    747e:	fc 01       	movw	r30, r24
    7480:	60 81       	ld	r22, Z
    7482:	71 81       	ldd	r23, Z+1	; 0x01
    7484:	82 81       	ldd	r24, Z+2	; 0x02
    7486:	93 81       	ldd	r25, Z+3	; 0x03
    7488:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    748c:	dc 01       	movw	r26, r24
    748e:	cb 01       	movw	r24, r22
    7490:	f8 01       	movw	r30, r16
    7492:	91 83       	std	Z+1, r25	; 0x01
    7494:	80 83       	st	Z, r24
    7496:	ce 01       	movw	r24, r28
    7498:	8d 5a       	subi	r24, 0xAD	; 173
    749a:	9f 4f       	sbci	r25, 0xFF	; 255
    749c:	9e 01       	movw	r18, r28
    749e:	21 5b       	subi	r18, 0xB1	; 177
    74a0:	3f 4f       	sbci	r19, 0xFF	; 255
    74a2:	f9 01       	movw	r30, r18
    74a4:	20 81       	ld	r18, Z
    74a6:	31 81       	ldd	r19, Z+1	; 0x01
    74a8:	fc 01       	movw	r30, r24
    74aa:	31 83       	std	Z+1, r19	; 0x01
    74ac:	20 83       	st	Z, r18
    74ae:	ce 01       	movw	r24, r28
    74b0:	8d 5a       	subi	r24, 0xAD	; 173
    74b2:	9f 4f       	sbci	r25, 0xFF	; 255
    74b4:	fc 01       	movw	r30, r24
    74b6:	80 81       	ld	r24, Z
    74b8:	91 81       	ldd	r25, Z+1	; 0x01
    74ba:	8c 01       	movw	r16, r24
    74bc:	c8 01       	movw	r24, r16
    74be:	01 97       	sbiw	r24, 0x01	; 1
    74c0:	f1 f7       	brne	.-4      	; 0x74be <pick_drop+0x80c>
    74c2:	8c 01       	movw	r16, r24
    74c4:	ce 01       	movw	r24, r28
    74c6:	8d 5a       	subi	r24, 0xAD	; 173
    74c8:	9f 4f       	sbci	r25, 0xFF	; 255
    74ca:	fc 01       	movw	r30, r24
    74cc:	11 83       	std	Z+1, r17	; 0x01
    74ce:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_right();
    74d0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			back_mm(70);
    74d4:	86 e4       	ldi	r24, 0x46	; 70
    74d6:	90 e0       	ldi	r25, 0x00	; 0
    74d8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    74dc:	9e 01       	movw	r18, r28
    74de:	2b 5a       	subi	r18, 0xAB	; 171
    74e0:	3f 4f       	sbci	r19, 0xFF	; 255
    74e2:	80 e0       	ldi	r24, 0x00	; 0
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	a0 ea       	ldi	r26, 0xA0	; 160
    74e8:	b1 e4       	ldi	r27, 0x41	; 65
    74ea:	f9 01       	movw	r30, r18
    74ec:	80 83       	st	Z, r24
    74ee:	91 83       	std	Z+1, r25	; 0x01
    74f0:	a2 83       	std	Z+2, r26	; 0x02
    74f2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    74f4:	8e 01       	movw	r16, r28
    74f6:	07 5a       	subi	r16, 0xA7	; 167
    74f8:	1f 4f       	sbci	r17, 0xFF	; 255
    74fa:	ce 01       	movw	r24, r28
    74fc:	8b 5a       	subi	r24, 0xAB	; 171
    74fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7500:	fc 01       	movw	r30, r24
    7502:	60 81       	ld	r22, Z
    7504:	71 81       	ldd	r23, Z+1	; 0x01
    7506:	82 81       	ldd	r24, Z+2	; 0x02
    7508:	93 81       	ldd	r25, Z+3	; 0x03
    750a:	26 e6       	ldi	r18, 0x66	; 102
    750c:	36 e6       	ldi	r19, 0x66	; 102
    750e:	46 e6       	ldi	r20, 0x66	; 102
    7510:	55 e4       	ldi	r21, 0x45	; 69
    7512:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7516:	dc 01       	movw	r26, r24
    7518:	cb 01       	movw	r24, r22
    751a:	f8 01       	movw	r30, r16
    751c:	80 83       	st	Z, r24
    751e:	91 83       	std	Z+1, r25	; 0x01
    7520:	a2 83       	std	Z+2, r26	; 0x02
    7522:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7524:	ce 01       	movw	r24, r28
    7526:	87 5a       	subi	r24, 0xA7	; 167
    7528:	9f 4f       	sbci	r25, 0xFF	; 255
    752a:	11 e0       	ldi	r17, 0x01	; 1
    752c:	fc 01       	movw	r30, r24
    752e:	60 81       	ld	r22, Z
    7530:	71 81       	ldd	r23, Z+1	; 0x01
    7532:	82 81       	ldd	r24, Z+2	; 0x02
    7534:	93 81       	ldd	r25, Z+3	; 0x03
    7536:	20 e0       	ldi	r18, 0x00	; 0
    7538:	30 e0       	ldi	r19, 0x00	; 0
    753a:	40 e8       	ldi	r20, 0x80	; 128
    753c:	5f e3       	ldi	r21, 0x3F	; 63
    753e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7542:	88 23       	and	r24, r24
    7544:	0c f0       	brlt	.+2      	; 0x7548 <pick_drop+0x896>
    7546:	10 e0       	ldi	r17, 0x00	; 0
    7548:	11 23       	and	r17, r17
    754a:	49 f0       	breq	.+18     	; 0x755e <pick_drop+0x8ac>
		__ticks = 1;
    754c:	ce 01       	movw	r24, r28
    754e:	83 5a       	subi	r24, 0xA3	; 163
    7550:	9f 4f       	sbci	r25, 0xFF	; 255
    7552:	21 e0       	ldi	r18, 0x01	; 1
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	fc 01       	movw	r30, r24
    7558:	31 83       	std	Z+1, r19	; 0x01
    755a:	20 83       	st	Z, r18
    755c:	74 c0       	rjmp	.+232    	; 0x7646 <pick_drop+0x994>
	else if (__tmp > 65535)
    755e:	ce 01       	movw	r24, r28
    7560:	87 5a       	subi	r24, 0xA7	; 167
    7562:	9f 4f       	sbci	r25, 0xFF	; 255
    7564:	11 e0       	ldi	r17, 0x01	; 1
    7566:	fc 01       	movw	r30, r24
    7568:	60 81       	ld	r22, Z
    756a:	71 81       	ldd	r23, Z+1	; 0x01
    756c:	82 81       	ldd	r24, Z+2	; 0x02
    756e:	93 81       	ldd	r25, Z+3	; 0x03
    7570:	20 e0       	ldi	r18, 0x00	; 0
    7572:	3f ef       	ldi	r19, 0xFF	; 255
    7574:	4f e7       	ldi	r20, 0x7F	; 127
    7576:	57 e4       	ldi	r21, 0x47	; 71
    7578:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    757c:	18 16       	cp	r1, r24
    757e:	0c f0       	brlt	.+2      	; 0x7582 <pick_drop+0x8d0>
    7580:	10 e0       	ldi	r17, 0x00	; 0
    7582:	11 23       	and	r17, r17
    7584:	09 f4       	brne	.+2      	; 0x7588 <pick_drop+0x8d6>
    7586:	4d c0       	rjmp	.+154    	; 0x7622 <pick_drop+0x970>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7588:	ce 01       	movw	r24, r28
    758a:	8b 5a       	subi	r24, 0xAB	; 171
    758c:	9f 4f       	sbci	r25, 0xFF	; 255
    758e:	fc 01       	movw	r30, r24
    7590:	60 81       	ld	r22, Z
    7592:	71 81       	ldd	r23, Z+1	; 0x01
    7594:	82 81       	ldd	r24, Z+2	; 0x02
    7596:	93 81       	ldd	r25, Z+3	; 0x03
    7598:	20 e0       	ldi	r18, 0x00	; 0
    759a:	30 e0       	ldi	r19, 0x00	; 0
    759c:	40 e2       	ldi	r20, 0x20	; 32
    759e:	51 e4       	ldi	r21, 0x41	; 65
    75a0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    75a4:	dc 01       	movw	r26, r24
    75a6:	cb 01       	movw	r24, r22
    75a8:	8e 01       	movw	r16, r28
    75aa:	03 5a       	subi	r16, 0xA3	; 163
    75ac:	1f 4f       	sbci	r17, 0xFF	; 255
    75ae:	bc 01       	movw	r22, r24
    75b0:	cd 01       	movw	r24, r26
    75b2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    75b6:	dc 01       	movw	r26, r24
    75b8:	cb 01       	movw	r24, r22
    75ba:	f8 01       	movw	r30, r16
    75bc:	91 83       	std	Z+1, r25	; 0x01
    75be:	80 83       	st	Z, r24
    75c0:	27 c0       	rjmp	.+78     	; 0x7610 <pick_drop+0x95e>
    75c2:	ce 01       	movw	r24, r28
    75c4:	81 5a       	subi	r24, 0xA1	; 161
    75c6:	9f 4f       	sbci	r25, 0xFF	; 255
    75c8:	20 e7       	ldi	r18, 0x70	; 112
    75ca:	31 e0       	ldi	r19, 0x01	; 1
    75cc:	fc 01       	movw	r30, r24
    75ce:	31 83       	std	Z+1, r19	; 0x01
    75d0:	20 83       	st	Z, r18
    75d2:	ce 01       	movw	r24, r28
    75d4:	81 5a       	subi	r24, 0xA1	; 161
    75d6:	9f 4f       	sbci	r25, 0xFF	; 255
    75d8:	fc 01       	movw	r30, r24
    75da:	80 81       	ld	r24, Z
    75dc:	91 81       	ldd	r25, Z+1	; 0x01
    75de:	8c 01       	movw	r16, r24
    75e0:	c8 01       	movw	r24, r16
    75e2:	01 97       	sbiw	r24, 0x01	; 1
    75e4:	f1 f7       	brne	.-4      	; 0x75e2 <pick_drop+0x930>
    75e6:	8c 01       	movw	r16, r24
    75e8:	ce 01       	movw	r24, r28
    75ea:	81 5a       	subi	r24, 0xA1	; 161
    75ec:	9f 4f       	sbci	r25, 0xFF	; 255
    75ee:	fc 01       	movw	r30, r24
    75f0:	11 83       	std	Z+1, r17	; 0x01
    75f2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75f4:	ce 01       	movw	r24, r28
    75f6:	83 5a       	subi	r24, 0xA3	; 163
    75f8:	9f 4f       	sbci	r25, 0xFF	; 255
    75fa:	9e 01       	movw	r18, r28
    75fc:	23 5a       	subi	r18, 0xA3	; 163
    75fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7600:	f9 01       	movw	r30, r18
    7602:	20 81       	ld	r18, Z
    7604:	31 81       	ldd	r19, Z+1	; 0x01
    7606:	21 50       	subi	r18, 0x01	; 1
    7608:	30 40       	sbci	r19, 0x00	; 0
    760a:	fc 01       	movw	r30, r24
    760c:	31 83       	std	Z+1, r19	; 0x01
    760e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7610:	ce 01       	movw	r24, r28
    7612:	83 5a       	subi	r24, 0xA3	; 163
    7614:	9f 4f       	sbci	r25, 0xFF	; 255
    7616:	fc 01       	movw	r30, r24
    7618:	80 81       	ld	r24, Z
    761a:	91 81       	ldd	r25, Z+1	; 0x01
    761c:	00 97       	sbiw	r24, 0x00	; 0
    761e:	89 f6       	brne	.-94     	; 0x75c2 <pick_drop+0x910>
    7620:	2f c0       	rjmp	.+94     	; 0x7680 <pick_drop+0x9ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7622:	8e 01       	movw	r16, r28
    7624:	03 5a       	subi	r16, 0xA3	; 163
    7626:	1f 4f       	sbci	r17, 0xFF	; 255
    7628:	ce 01       	movw	r24, r28
    762a:	87 5a       	subi	r24, 0xA7	; 167
    762c:	9f 4f       	sbci	r25, 0xFF	; 255
    762e:	fc 01       	movw	r30, r24
    7630:	60 81       	ld	r22, Z
    7632:	71 81       	ldd	r23, Z+1	; 0x01
    7634:	82 81       	ldd	r24, Z+2	; 0x02
    7636:	93 81       	ldd	r25, Z+3	; 0x03
    7638:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    763c:	dc 01       	movw	r26, r24
    763e:	cb 01       	movw	r24, r22
    7640:	f8 01       	movw	r30, r16
    7642:	91 83       	std	Z+1, r25	; 0x01
    7644:	80 83       	st	Z, r24
    7646:	ce 01       	movw	r24, r28
    7648:	8f 59       	subi	r24, 0x9F	; 159
    764a:	9f 4f       	sbci	r25, 0xFF	; 255
    764c:	9e 01       	movw	r18, r28
    764e:	23 5a       	subi	r18, 0xA3	; 163
    7650:	3f 4f       	sbci	r19, 0xFF	; 255
    7652:	f9 01       	movw	r30, r18
    7654:	20 81       	ld	r18, Z
    7656:	31 81       	ldd	r19, Z+1	; 0x01
    7658:	fc 01       	movw	r30, r24
    765a:	31 83       	std	Z+1, r19	; 0x01
    765c:	20 83       	st	Z, r18
    765e:	ce 01       	movw	r24, r28
    7660:	8f 59       	subi	r24, 0x9F	; 159
    7662:	9f 4f       	sbci	r25, 0xFF	; 255
    7664:	fc 01       	movw	r30, r24
    7666:	80 81       	ld	r24, Z
    7668:	91 81       	ldd	r25, Z+1	; 0x01
    766a:	8c 01       	movw	r16, r24
    766c:	c8 01       	movw	r24, r16
    766e:	01 97       	sbiw	r24, 0x01	; 1
    7670:	f1 f7       	brne	.-4      	; 0x766e <pick_drop+0x9bc>
    7672:	8c 01       	movw	r16, r24
    7674:	ce 01       	movw	r24, r28
    7676:	8f 59       	subi	r24, 0x9F	; 159
    7678:	9f 4f       	sbci	r25, 0xFF	; 255
    767a:	fc 01       	movw	r30, r24
    767c:	11 83       	std	Z+1, r17	; 0x01
    767e:	00 83       	st	Z, r16
			_delay_ms(20);
		}
		if(pd == '2')
    7680:	ce 01       	movw	r24, r28
    7682:	89 51       	subi	r24, 0x19	; 25
    7684:	9d 4f       	sbci	r25, 0xFD	; 253
    7686:	fc 01       	movw	r30, r24
    7688:	80 81       	ld	r24, Z
    768a:	82 33       	cpi	r24, 0x32	; 50
    768c:	11 f0       	breq	.+4      	; 0x7692 <pick_drop+0x9e0>
    768e:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
		{
			forward_mm(60);
    7692:	8c e3       	ldi	r24, 0x3C	; 60
    7694:	90 e0       	ldi	r25, 0x00	; 0
    7696:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    769a:	9e 01       	movw	r18, r28
    769c:	2d 59       	subi	r18, 0x9D	; 157
    769e:	3f 4f       	sbci	r19, 0xFF	; 255
    76a0:	80 e0       	ldi	r24, 0x00	; 0
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	a0 ea       	ldi	r26, 0xA0	; 160
    76a6:	b1 e4       	ldi	r27, 0x41	; 65
    76a8:	f9 01       	movw	r30, r18
    76aa:	80 83       	st	Z, r24
    76ac:	91 83       	std	Z+1, r25	; 0x01
    76ae:	a2 83       	std	Z+2, r26	; 0x02
    76b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    76b2:	8e 01       	movw	r16, r28
    76b4:	09 59       	subi	r16, 0x99	; 153
    76b6:	1f 4f       	sbci	r17, 0xFF	; 255
    76b8:	ce 01       	movw	r24, r28
    76ba:	8d 59       	subi	r24, 0x9D	; 157
    76bc:	9f 4f       	sbci	r25, 0xFF	; 255
    76be:	fc 01       	movw	r30, r24
    76c0:	60 81       	ld	r22, Z
    76c2:	71 81       	ldd	r23, Z+1	; 0x01
    76c4:	82 81       	ldd	r24, Z+2	; 0x02
    76c6:	93 81       	ldd	r25, Z+3	; 0x03
    76c8:	26 e6       	ldi	r18, 0x66	; 102
    76ca:	36 e6       	ldi	r19, 0x66	; 102
    76cc:	46 e6       	ldi	r20, 0x66	; 102
    76ce:	55 e4       	ldi	r21, 0x45	; 69
    76d0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    76d4:	dc 01       	movw	r26, r24
    76d6:	cb 01       	movw	r24, r22
    76d8:	f8 01       	movw	r30, r16
    76da:	80 83       	st	Z, r24
    76dc:	91 83       	std	Z+1, r25	; 0x01
    76de:	a2 83       	std	Z+2, r26	; 0x02
    76e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    76e2:	ce 01       	movw	r24, r28
    76e4:	89 59       	subi	r24, 0x99	; 153
    76e6:	9f 4f       	sbci	r25, 0xFF	; 255
    76e8:	11 e0       	ldi	r17, 0x01	; 1
    76ea:	fc 01       	movw	r30, r24
    76ec:	60 81       	ld	r22, Z
    76ee:	71 81       	ldd	r23, Z+1	; 0x01
    76f0:	82 81       	ldd	r24, Z+2	; 0x02
    76f2:	93 81       	ldd	r25, Z+3	; 0x03
    76f4:	20 e0       	ldi	r18, 0x00	; 0
    76f6:	30 e0       	ldi	r19, 0x00	; 0
    76f8:	40 e8       	ldi	r20, 0x80	; 128
    76fa:	5f e3       	ldi	r21, 0x3F	; 63
    76fc:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7700:	88 23       	and	r24, r24
    7702:	0c f0       	brlt	.+2      	; 0x7706 <pick_drop+0xa54>
    7704:	10 e0       	ldi	r17, 0x00	; 0
    7706:	11 23       	and	r17, r17
    7708:	49 f0       	breq	.+18     	; 0x771c <pick_drop+0xa6a>
		__ticks = 1;
    770a:	ce 01       	movw	r24, r28
    770c:	85 59       	subi	r24, 0x95	; 149
    770e:	9f 4f       	sbci	r25, 0xFF	; 255
    7710:	21 e0       	ldi	r18, 0x01	; 1
    7712:	30 e0       	ldi	r19, 0x00	; 0
    7714:	fc 01       	movw	r30, r24
    7716:	31 83       	std	Z+1, r19	; 0x01
    7718:	20 83       	st	Z, r18
    771a:	74 c0       	rjmp	.+232    	; 0x7804 <pick_drop+0xb52>
	else if (__tmp > 65535)
    771c:	ce 01       	movw	r24, r28
    771e:	89 59       	subi	r24, 0x99	; 153
    7720:	9f 4f       	sbci	r25, 0xFF	; 255
    7722:	11 e0       	ldi	r17, 0x01	; 1
    7724:	fc 01       	movw	r30, r24
    7726:	60 81       	ld	r22, Z
    7728:	71 81       	ldd	r23, Z+1	; 0x01
    772a:	82 81       	ldd	r24, Z+2	; 0x02
    772c:	93 81       	ldd	r25, Z+3	; 0x03
    772e:	20 e0       	ldi	r18, 0x00	; 0
    7730:	3f ef       	ldi	r19, 0xFF	; 255
    7732:	4f e7       	ldi	r20, 0x7F	; 127
    7734:	57 e4       	ldi	r21, 0x47	; 71
    7736:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    773a:	18 16       	cp	r1, r24
    773c:	0c f0       	brlt	.+2      	; 0x7740 <pick_drop+0xa8e>
    773e:	10 e0       	ldi	r17, 0x00	; 0
    7740:	11 23       	and	r17, r17
    7742:	09 f4       	brne	.+2      	; 0x7746 <pick_drop+0xa94>
    7744:	4d c0       	rjmp	.+154    	; 0x77e0 <pick_drop+0xb2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7746:	ce 01       	movw	r24, r28
    7748:	8d 59       	subi	r24, 0x9D	; 157
    774a:	9f 4f       	sbci	r25, 0xFF	; 255
    774c:	fc 01       	movw	r30, r24
    774e:	60 81       	ld	r22, Z
    7750:	71 81       	ldd	r23, Z+1	; 0x01
    7752:	82 81       	ldd	r24, Z+2	; 0x02
    7754:	93 81       	ldd	r25, Z+3	; 0x03
    7756:	20 e0       	ldi	r18, 0x00	; 0
    7758:	30 e0       	ldi	r19, 0x00	; 0
    775a:	40 e2       	ldi	r20, 0x20	; 32
    775c:	51 e4       	ldi	r21, 0x41	; 65
    775e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7762:	dc 01       	movw	r26, r24
    7764:	cb 01       	movw	r24, r22
    7766:	8e 01       	movw	r16, r28
    7768:	05 59       	subi	r16, 0x95	; 149
    776a:	1f 4f       	sbci	r17, 0xFF	; 255
    776c:	bc 01       	movw	r22, r24
    776e:	cd 01       	movw	r24, r26
    7770:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7774:	dc 01       	movw	r26, r24
    7776:	cb 01       	movw	r24, r22
    7778:	f8 01       	movw	r30, r16
    777a:	91 83       	std	Z+1, r25	; 0x01
    777c:	80 83       	st	Z, r24
    777e:	27 c0       	rjmp	.+78     	; 0x77ce <pick_drop+0xb1c>
    7780:	ce 01       	movw	r24, r28
    7782:	83 59       	subi	r24, 0x93	; 147
    7784:	9f 4f       	sbci	r25, 0xFF	; 255
    7786:	20 e7       	ldi	r18, 0x70	; 112
    7788:	31 e0       	ldi	r19, 0x01	; 1
    778a:	fc 01       	movw	r30, r24
    778c:	31 83       	std	Z+1, r19	; 0x01
    778e:	20 83       	st	Z, r18
    7790:	ce 01       	movw	r24, r28
    7792:	83 59       	subi	r24, 0x93	; 147
    7794:	9f 4f       	sbci	r25, 0xFF	; 255
    7796:	fc 01       	movw	r30, r24
    7798:	80 81       	ld	r24, Z
    779a:	91 81       	ldd	r25, Z+1	; 0x01
    779c:	8c 01       	movw	r16, r24
    779e:	c8 01       	movw	r24, r16
    77a0:	01 97       	sbiw	r24, 0x01	; 1
    77a2:	f1 f7       	brne	.-4      	; 0x77a0 <pick_drop+0xaee>
    77a4:	8c 01       	movw	r16, r24
    77a6:	ce 01       	movw	r24, r28
    77a8:	83 59       	subi	r24, 0x93	; 147
    77aa:	9f 4f       	sbci	r25, 0xFF	; 255
    77ac:	fc 01       	movw	r30, r24
    77ae:	11 83       	std	Z+1, r17	; 0x01
    77b0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77b2:	ce 01       	movw	r24, r28
    77b4:	85 59       	subi	r24, 0x95	; 149
    77b6:	9f 4f       	sbci	r25, 0xFF	; 255
    77b8:	9e 01       	movw	r18, r28
    77ba:	25 59       	subi	r18, 0x95	; 149
    77bc:	3f 4f       	sbci	r19, 0xFF	; 255
    77be:	f9 01       	movw	r30, r18
    77c0:	20 81       	ld	r18, Z
    77c2:	31 81       	ldd	r19, Z+1	; 0x01
    77c4:	21 50       	subi	r18, 0x01	; 1
    77c6:	30 40       	sbci	r19, 0x00	; 0
    77c8:	fc 01       	movw	r30, r24
    77ca:	31 83       	std	Z+1, r19	; 0x01
    77cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77ce:	ce 01       	movw	r24, r28
    77d0:	85 59       	subi	r24, 0x95	; 149
    77d2:	9f 4f       	sbci	r25, 0xFF	; 255
    77d4:	fc 01       	movw	r30, r24
    77d6:	80 81       	ld	r24, Z
    77d8:	91 81       	ldd	r25, Z+1	; 0x01
    77da:	00 97       	sbiw	r24, 0x00	; 0
    77dc:	89 f6       	brne	.-94     	; 0x7780 <pick_drop+0xace>
    77de:	2f c0       	rjmp	.+94     	; 0x783e <pick_drop+0xb8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77e0:	8e 01       	movw	r16, r28
    77e2:	05 59       	subi	r16, 0x95	; 149
    77e4:	1f 4f       	sbci	r17, 0xFF	; 255
    77e6:	ce 01       	movw	r24, r28
    77e8:	89 59       	subi	r24, 0x99	; 153
    77ea:	9f 4f       	sbci	r25, 0xFF	; 255
    77ec:	fc 01       	movw	r30, r24
    77ee:	60 81       	ld	r22, Z
    77f0:	71 81       	ldd	r23, Z+1	; 0x01
    77f2:	82 81       	ldd	r24, Z+2	; 0x02
    77f4:	93 81       	ldd	r25, Z+3	; 0x03
    77f6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    77fa:	dc 01       	movw	r26, r24
    77fc:	cb 01       	movw	r24, r22
    77fe:	f8 01       	movw	r30, r16
    7800:	91 83       	std	Z+1, r25	; 0x01
    7802:	80 83       	st	Z, r24
    7804:	ce 01       	movw	r24, r28
    7806:	81 59       	subi	r24, 0x91	; 145
    7808:	9f 4f       	sbci	r25, 0xFF	; 255
    780a:	9e 01       	movw	r18, r28
    780c:	25 59       	subi	r18, 0x95	; 149
    780e:	3f 4f       	sbci	r19, 0xFF	; 255
    7810:	f9 01       	movw	r30, r18
    7812:	20 81       	ld	r18, Z
    7814:	31 81       	ldd	r19, Z+1	; 0x01
    7816:	fc 01       	movw	r30, r24
    7818:	31 83       	std	Z+1, r19	; 0x01
    781a:	20 83       	st	Z, r18
    781c:	ce 01       	movw	r24, r28
    781e:	81 59       	subi	r24, 0x91	; 145
    7820:	9f 4f       	sbci	r25, 0xFF	; 255
    7822:	fc 01       	movw	r30, r24
    7824:	80 81       	ld	r24, Z
    7826:	91 81       	ldd	r25, Z+1	; 0x01
    7828:	8c 01       	movw	r16, r24
    782a:	c8 01       	movw	r24, r16
    782c:	01 97       	sbiw	r24, 0x01	; 1
    782e:	f1 f7       	brne	.-4      	; 0x782c <pick_drop+0xb7a>
    7830:	8c 01       	movw	r16, r24
    7832:	ce 01       	movw	r24, r28
    7834:	81 59       	subi	r24, 0x91	; 145
    7836:	9f 4f       	sbci	r25, 0xFF	; 255
    7838:	fc 01       	movw	r30, r24
    783a:	11 83       	std	Z+1, r17	; 0x01
    783c:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right2();
    783e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    7842:	9e 01       	movw	r18, r28
    7844:	2f 58       	subi	r18, 0x8F	; 143
    7846:	3f 4f       	sbci	r19, 0xFF	; 255
    7848:	80 e0       	ldi	r24, 0x00	; 0
    784a:	90 e0       	ldi	r25, 0x00	; 0
    784c:	a8 e4       	ldi	r26, 0x48	; 72
    784e:	b2 e4       	ldi	r27, 0x42	; 66
    7850:	f9 01       	movw	r30, r18
    7852:	80 83       	st	Z, r24
    7854:	91 83       	std	Z+1, r25	; 0x01
    7856:	a2 83       	std	Z+2, r26	; 0x02
    7858:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    785a:	8e 01       	movw	r16, r28
    785c:	0b 58       	subi	r16, 0x8B	; 139
    785e:	1f 4f       	sbci	r17, 0xFF	; 255
    7860:	ce 01       	movw	r24, r28
    7862:	8f 58       	subi	r24, 0x8F	; 143
    7864:	9f 4f       	sbci	r25, 0xFF	; 255
    7866:	fc 01       	movw	r30, r24
    7868:	60 81       	ld	r22, Z
    786a:	71 81       	ldd	r23, Z+1	; 0x01
    786c:	82 81       	ldd	r24, Z+2	; 0x02
    786e:	93 81       	ldd	r25, Z+3	; 0x03
    7870:	26 e6       	ldi	r18, 0x66	; 102
    7872:	36 e6       	ldi	r19, 0x66	; 102
    7874:	46 e6       	ldi	r20, 0x66	; 102
    7876:	55 e4       	ldi	r21, 0x45	; 69
    7878:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    787c:	dc 01       	movw	r26, r24
    787e:	cb 01       	movw	r24, r22
    7880:	f8 01       	movw	r30, r16
    7882:	80 83       	st	Z, r24
    7884:	91 83       	std	Z+1, r25	; 0x01
    7886:	a2 83       	std	Z+2, r26	; 0x02
    7888:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    788a:	ce 01       	movw	r24, r28
    788c:	8b 58       	subi	r24, 0x8B	; 139
    788e:	9f 4f       	sbci	r25, 0xFF	; 255
    7890:	11 e0       	ldi	r17, 0x01	; 1
    7892:	fc 01       	movw	r30, r24
    7894:	60 81       	ld	r22, Z
    7896:	71 81       	ldd	r23, Z+1	; 0x01
    7898:	82 81       	ldd	r24, Z+2	; 0x02
    789a:	93 81       	ldd	r25, Z+3	; 0x03
    789c:	20 e0       	ldi	r18, 0x00	; 0
    789e:	30 e0       	ldi	r19, 0x00	; 0
    78a0:	40 e8       	ldi	r20, 0x80	; 128
    78a2:	5f e3       	ldi	r21, 0x3F	; 63
    78a4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    78a8:	88 23       	and	r24, r24
    78aa:	0c f0       	brlt	.+2      	; 0x78ae <pick_drop+0xbfc>
    78ac:	10 e0       	ldi	r17, 0x00	; 0
    78ae:	11 23       	and	r17, r17
    78b0:	49 f0       	breq	.+18     	; 0x78c4 <pick_drop+0xc12>
		__ticks = 1;
    78b2:	ce 01       	movw	r24, r28
    78b4:	87 58       	subi	r24, 0x87	; 135
    78b6:	9f 4f       	sbci	r25, 0xFF	; 255
    78b8:	21 e0       	ldi	r18, 0x01	; 1
    78ba:	30 e0       	ldi	r19, 0x00	; 0
    78bc:	fc 01       	movw	r30, r24
    78be:	31 83       	std	Z+1, r19	; 0x01
    78c0:	20 83       	st	Z, r18
    78c2:	74 c0       	rjmp	.+232    	; 0x79ac <pick_drop+0xcfa>
	else if (__tmp > 65535)
    78c4:	ce 01       	movw	r24, r28
    78c6:	8b 58       	subi	r24, 0x8B	; 139
    78c8:	9f 4f       	sbci	r25, 0xFF	; 255
    78ca:	11 e0       	ldi	r17, 0x01	; 1
    78cc:	fc 01       	movw	r30, r24
    78ce:	60 81       	ld	r22, Z
    78d0:	71 81       	ldd	r23, Z+1	; 0x01
    78d2:	82 81       	ldd	r24, Z+2	; 0x02
    78d4:	93 81       	ldd	r25, Z+3	; 0x03
    78d6:	20 e0       	ldi	r18, 0x00	; 0
    78d8:	3f ef       	ldi	r19, 0xFF	; 255
    78da:	4f e7       	ldi	r20, 0x7F	; 127
    78dc:	57 e4       	ldi	r21, 0x47	; 71
    78de:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    78e2:	18 16       	cp	r1, r24
    78e4:	0c f0       	brlt	.+2      	; 0x78e8 <pick_drop+0xc36>
    78e6:	10 e0       	ldi	r17, 0x00	; 0
    78e8:	11 23       	and	r17, r17
    78ea:	09 f4       	brne	.+2      	; 0x78ee <pick_drop+0xc3c>
    78ec:	4d c0       	rjmp	.+154    	; 0x7988 <pick_drop+0xcd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    78ee:	ce 01       	movw	r24, r28
    78f0:	8f 58       	subi	r24, 0x8F	; 143
    78f2:	9f 4f       	sbci	r25, 0xFF	; 255
    78f4:	fc 01       	movw	r30, r24
    78f6:	60 81       	ld	r22, Z
    78f8:	71 81       	ldd	r23, Z+1	; 0x01
    78fa:	82 81       	ldd	r24, Z+2	; 0x02
    78fc:	93 81       	ldd	r25, Z+3	; 0x03
    78fe:	20 e0       	ldi	r18, 0x00	; 0
    7900:	30 e0       	ldi	r19, 0x00	; 0
    7902:	40 e2       	ldi	r20, 0x20	; 32
    7904:	51 e4       	ldi	r21, 0x41	; 65
    7906:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    790a:	dc 01       	movw	r26, r24
    790c:	cb 01       	movw	r24, r22
    790e:	8e 01       	movw	r16, r28
    7910:	07 58       	subi	r16, 0x87	; 135
    7912:	1f 4f       	sbci	r17, 0xFF	; 255
    7914:	bc 01       	movw	r22, r24
    7916:	cd 01       	movw	r24, r26
    7918:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    791c:	dc 01       	movw	r26, r24
    791e:	cb 01       	movw	r24, r22
    7920:	f8 01       	movw	r30, r16
    7922:	91 83       	std	Z+1, r25	; 0x01
    7924:	80 83       	st	Z, r24
    7926:	27 c0       	rjmp	.+78     	; 0x7976 <pick_drop+0xcc4>
    7928:	ce 01       	movw	r24, r28
    792a:	85 58       	subi	r24, 0x85	; 133
    792c:	9f 4f       	sbci	r25, 0xFF	; 255
    792e:	20 e7       	ldi	r18, 0x70	; 112
    7930:	31 e0       	ldi	r19, 0x01	; 1
    7932:	fc 01       	movw	r30, r24
    7934:	31 83       	std	Z+1, r19	; 0x01
    7936:	20 83       	st	Z, r18
    7938:	ce 01       	movw	r24, r28
    793a:	85 58       	subi	r24, 0x85	; 133
    793c:	9f 4f       	sbci	r25, 0xFF	; 255
    793e:	fc 01       	movw	r30, r24
    7940:	80 81       	ld	r24, Z
    7942:	91 81       	ldd	r25, Z+1	; 0x01
    7944:	8c 01       	movw	r16, r24
    7946:	c8 01       	movw	r24, r16
    7948:	01 97       	sbiw	r24, 0x01	; 1
    794a:	f1 f7       	brne	.-4      	; 0x7948 <pick_drop+0xc96>
    794c:	8c 01       	movw	r16, r24
    794e:	ce 01       	movw	r24, r28
    7950:	85 58       	subi	r24, 0x85	; 133
    7952:	9f 4f       	sbci	r25, 0xFF	; 255
    7954:	fc 01       	movw	r30, r24
    7956:	11 83       	std	Z+1, r17	; 0x01
    7958:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    795a:	ce 01       	movw	r24, r28
    795c:	87 58       	subi	r24, 0x87	; 135
    795e:	9f 4f       	sbci	r25, 0xFF	; 255
    7960:	9e 01       	movw	r18, r28
    7962:	27 58       	subi	r18, 0x87	; 135
    7964:	3f 4f       	sbci	r19, 0xFF	; 255
    7966:	f9 01       	movw	r30, r18
    7968:	20 81       	ld	r18, Z
    796a:	31 81       	ldd	r19, Z+1	; 0x01
    796c:	21 50       	subi	r18, 0x01	; 1
    796e:	30 40       	sbci	r19, 0x00	; 0
    7970:	fc 01       	movw	r30, r24
    7972:	31 83       	std	Z+1, r19	; 0x01
    7974:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7976:	ce 01       	movw	r24, r28
    7978:	87 58       	subi	r24, 0x87	; 135
    797a:	9f 4f       	sbci	r25, 0xFF	; 255
    797c:	fc 01       	movw	r30, r24
    797e:	80 81       	ld	r24, Z
    7980:	91 81       	ldd	r25, Z+1	; 0x01
    7982:	00 97       	sbiw	r24, 0x00	; 0
    7984:	89 f6       	brne	.-94     	; 0x7928 <pick_drop+0xc76>
    7986:	2f c0       	rjmp	.+94     	; 0x79e6 <pick_drop+0xd34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7988:	8e 01       	movw	r16, r28
    798a:	07 58       	subi	r16, 0x87	; 135
    798c:	1f 4f       	sbci	r17, 0xFF	; 255
    798e:	ce 01       	movw	r24, r28
    7990:	8b 58       	subi	r24, 0x8B	; 139
    7992:	9f 4f       	sbci	r25, 0xFF	; 255
    7994:	fc 01       	movw	r30, r24
    7996:	60 81       	ld	r22, Z
    7998:	71 81       	ldd	r23, Z+1	; 0x01
    799a:	82 81       	ldd	r24, Z+2	; 0x02
    799c:	93 81       	ldd	r25, Z+3	; 0x03
    799e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    79a2:	dc 01       	movw	r26, r24
    79a4:	cb 01       	movw	r24, r22
    79a6:	f8 01       	movw	r30, r16
    79a8:	91 83       	std	Z+1, r25	; 0x01
    79aa:	80 83       	st	Z, r24
    79ac:	ce 01       	movw	r24, r28
    79ae:	83 58       	subi	r24, 0x83	; 131
    79b0:	9f 4f       	sbci	r25, 0xFF	; 255
    79b2:	9e 01       	movw	r18, r28
    79b4:	27 58       	subi	r18, 0x87	; 135
    79b6:	3f 4f       	sbci	r19, 0xFF	; 255
    79b8:	f9 01       	movw	r30, r18
    79ba:	20 81       	ld	r18, Z
    79bc:	31 81       	ldd	r19, Z+1	; 0x01
    79be:	fc 01       	movw	r30, r24
    79c0:	31 83       	std	Z+1, r19	; 0x01
    79c2:	20 83       	st	Z, r18
    79c4:	ce 01       	movw	r24, r28
    79c6:	83 58       	subi	r24, 0x83	; 131
    79c8:	9f 4f       	sbci	r25, 0xFF	; 255
    79ca:	fc 01       	movw	r30, r24
    79cc:	80 81       	ld	r24, Z
    79ce:	91 81       	ldd	r25, Z+1	; 0x01
    79d0:	8c 01       	movw	r16, r24
    79d2:	c8 01       	movw	r24, r16
    79d4:	01 97       	sbiw	r24, 0x01	; 1
    79d6:	f1 f7       	brne	.-4      	; 0x79d4 <pick_drop+0xd22>
    79d8:	8c 01       	movw	r16, r24
    79da:	ce 01       	movw	r24, r28
    79dc:	83 58       	subi	r24, 0x83	; 131
    79de:	9f 4f       	sbci	r25, 0xFF	; 255
    79e0:	fc 01       	movw	r30, r24
    79e2:	11 83       	std	Z+1, r17	; 0x01
    79e4:	00 83       	st	Z, r16
			_delay_ms(50);
			front();
    79e6:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    79ea:	9e 01       	movw	r18, r28
    79ec:	21 58       	subi	r18, 0x81	; 129
    79ee:	3f 4f       	sbci	r19, 0xFF	; 255
    79f0:	80 e0       	ldi	r24, 0x00	; 0
    79f2:	90 e0       	ldi	r25, 0x00	; 0
    79f4:	a8 ec       	ldi	r26, 0xC8	; 200
    79f6:	b2 e4       	ldi	r27, 0x42	; 66
    79f8:	f9 01       	movw	r30, r18
    79fa:	80 83       	st	Z, r24
    79fc:	91 83       	std	Z+1, r25	; 0x01
    79fe:	a2 83       	std	Z+2, r26	; 0x02
    7a00:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7a02:	8e 01       	movw	r16, r28
    7a04:	0d 57       	subi	r16, 0x7D	; 125
    7a06:	1f 4f       	sbci	r17, 0xFF	; 255
    7a08:	ce 01       	movw	r24, r28
    7a0a:	81 58       	subi	r24, 0x81	; 129
    7a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a0e:	fc 01       	movw	r30, r24
    7a10:	60 81       	ld	r22, Z
    7a12:	71 81       	ldd	r23, Z+1	; 0x01
    7a14:	82 81       	ldd	r24, Z+2	; 0x02
    7a16:	93 81       	ldd	r25, Z+3	; 0x03
    7a18:	26 e6       	ldi	r18, 0x66	; 102
    7a1a:	36 e6       	ldi	r19, 0x66	; 102
    7a1c:	46 e6       	ldi	r20, 0x66	; 102
    7a1e:	55 e4       	ldi	r21, 0x45	; 69
    7a20:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7a24:	dc 01       	movw	r26, r24
    7a26:	cb 01       	movw	r24, r22
    7a28:	f8 01       	movw	r30, r16
    7a2a:	80 83       	st	Z, r24
    7a2c:	91 83       	std	Z+1, r25	; 0x01
    7a2e:	a2 83       	std	Z+2, r26	; 0x02
    7a30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7a32:	ce 01       	movw	r24, r28
    7a34:	8d 57       	subi	r24, 0x7D	; 125
    7a36:	9f 4f       	sbci	r25, 0xFF	; 255
    7a38:	11 e0       	ldi	r17, 0x01	; 1
    7a3a:	fc 01       	movw	r30, r24
    7a3c:	60 81       	ld	r22, Z
    7a3e:	71 81       	ldd	r23, Z+1	; 0x01
    7a40:	82 81       	ldd	r24, Z+2	; 0x02
    7a42:	93 81       	ldd	r25, Z+3	; 0x03
    7a44:	20 e0       	ldi	r18, 0x00	; 0
    7a46:	30 e0       	ldi	r19, 0x00	; 0
    7a48:	40 e8       	ldi	r20, 0x80	; 128
    7a4a:	5f e3       	ldi	r21, 0x3F	; 63
    7a4c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7a50:	88 23       	and	r24, r24
    7a52:	0c f0       	brlt	.+2      	; 0x7a56 <pick_drop+0xda4>
    7a54:	10 e0       	ldi	r17, 0x00	; 0
    7a56:	11 23       	and	r17, r17
    7a58:	49 f0       	breq	.+18     	; 0x7a6c <pick_drop+0xdba>
		__ticks = 1;
    7a5a:	ce 01       	movw	r24, r28
    7a5c:	89 57       	subi	r24, 0x79	; 121
    7a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7a60:	21 e0       	ldi	r18, 0x01	; 1
    7a62:	30 e0       	ldi	r19, 0x00	; 0
    7a64:	fc 01       	movw	r30, r24
    7a66:	31 83       	std	Z+1, r19	; 0x01
    7a68:	20 83       	st	Z, r18
    7a6a:	74 c0       	rjmp	.+232    	; 0x7b54 <pick_drop+0xea2>
	else if (__tmp > 65535)
    7a6c:	ce 01       	movw	r24, r28
    7a6e:	8d 57       	subi	r24, 0x7D	; 125
    7a70:	9f 4f       	sbci	r25, 0xFF	; 255
    7a72:	11 e0       	ldi	r17, 0x01	; 1
    7a74:	fc 01       	movw	r30, r24
    7a76:	60 81       	ld	r22, Z
    7a78:	71 81       	ldd	r23, Z+1	; 0x01
    7a7a:	82 81       	ldd	r24, Z+2	; 0x02
    7a7c:	93 81       	ldd	r25, Z+3	; 0x03
    7a7e:	20 e0       	ldi	r18, 0x00	; 0
    7a80:	3f ef       	ldi	r19, 0xFF	; 255
    7a82:	4f e7       	ldi	r20, 0x7F	; 127
    7a84:	57 e4       	ldi	r21, 0x47	; 71
    7a86:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    7a8a:	18 16       	cp	r1, r24
    7a8c:	0c f0       	brlt	.+2      	; 0x7a90 <pick_drop+0xdde>
    7a8e:	10 e0       	ldi	r17, 0x00	; 0
    7a90:	11 23       	and	r17, r17
    7a92:	09 f4       	brne	.+2      	; 0x7a96 <pick_drop+0xde4>
    7a94:	4d c0       	rjmp	.+154    	; 0x7b30 <pick_drop+0xe7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7a96:	ce 01       	movw	r24, r28
    7a98:	81 58       	subi	r24, 0x81	; 129
    7a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a9c:	fc 01       	movw	r30, r24
    7a9e:	60 81       	ld	r22, Z
    7aa0:	71 81       	ldd	r23, Z+1	; 0x01
    7aa2:	82 81       	ldd	r24, Z+2	; 0x02
    7aa4:	93 81       	ldd	r25, Z+3	; 0x03
    7aa6:	20 e0       	ldi	r18, 0x00	; 0
    7aa8:	30 e0       	ldi	r19, 0x00	; 0
    7aaa:	40 e2       	ldi	r20, 0x20	; 32
    7aac:	51 e4       	ldi	r21, 0x41	; 65
    7aae:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7ab2:	dc 01       	movw	r26, r24
    7ab4:	cb 01       	movw	r24, r22
    7ab6:	8e 01       	movw	r16, r28
    7ab8:	09 57       	subi	r16, 0x79	; 121
    7aba:	1f 4f       	sbci	r17, 0xFF	; 255
    7abc:	bc 01       	movw	r22, r24
    7abe:	cd 01       	movw	r24, r26
    7ac0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7ac4:	dc 01       	movw	r26, r24
    7ac6:	cb 01       	movw	r24, r22
    7ac8:	f8 01       	movw	r30, r16
    7aca:	91 83       	std	Z+1, r25	; 0x01
    7acc:	80 83       	st	Z, r24
    7ace:	27 c0       	rjmp	.+78     	; 0x7b1e <pick_drop+0xe6c>
    7ad0:	ce 01       	movw	r24, r28
    7ad2:	87 57       	subi	r24, 0x77	; 119
    7ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad6:	20 e7       	ldi	r18, 0x70	; 112
    7ad8:	31 e0       	ldi	r19, 0x01	; 1
    7ada:	fc 01       	movw	r30, r24
    7adc:	31 83       	std	Z+1, r19	; 0x01
    7ade:	20 83       	st	Z, r18
    7ae0:	ce 01       	movw	r24, r28
    7ae2:	87 57       	subi	r24, 0x77	; 119
    7ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ae6:	fc 01       	movw	r30, r24
    7ae8:	80 81       	ld	r24, Z
    7aea:	91 81       	ldd	r25, Z+1	; 0x01
    7aec:	8c 01       	movw	r16, r24
    7aee:	c8 01       	movw	r24, r16
    7af0:	01 97       	sbiw	r24, 0x01	; 1
    7af2:	f1 f7       	brne	.-4      	; 0x7af0 <pick_drop+0xe3e>
    7af4:	8c 01       	movw	r16, r24
    7af6:	ce 01       	movw	r24, r28
    7af8:	87 57       	subi	r24, 0x77	; 119
    7afa:	9f 4f       	sbci	r25, 0xFF	; 255
    7afc:	fc 01       	movw	r30, r24
    7afe:	11 83       	std	Z+1, r17	; 0x01
    7b00:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b02:	ce 01       	movw	r24, r28
    7b04:	89 57       	subi	r24, 0x79	; 121
    7b06:	9f 4f       	sbci	r25, 0xFF	; 255
    7b08:	9e 01       	movw	r18, r28
    7b0a:	29 57       	subi	r18, 0x79	; 121
    7b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b0e:	f9 01       	movw	r30, r18
    7b10:	20 81       	ld	r18, Z
    7b12:	31 81       	ldd	r19, Z+1	; 0x01
    7b14:	21 50       	subi	r18, 0x01	; 1
    7b16:	30 40       	sbci	r19, 0x00	; 0
    7b18:	fc 01       	movw	r30, r24
    7b1a:	31 83       	std	Z+1, r19	; 0x01
    7b1c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b1e:	ce 01       	movw	r24, r28
    7b20:	89 57       	subi	r24, 0x79	; 121
    7b22:	9f 4f       	sbci	r25, 0xFF	; 255
    7b24:	fc 01       	movw	r30, r24
    7b26:	80 81       	ld	r24, Z
    7b28:	91 81       	ldd	r25, Z+1	; 0x01
    7b2a:	00 97       	sbiw	r24, 0x00	; 0
    7b2c:	89 f6       	brne	.-94     	; 0x7ad0 <pick_drop+0xe1e>
    7b2e:	2f c0       	rjmp	.+94     	; 0x7b8e <pick_drop+0xedc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b30:	8e 01       	movw	r16, r28
    7b32:	09 57       	subi	r16, 0x79	; 121
    7b34:	1f 4f       	sbci	r17, 0xFF	; 255
    7b36:	ce 01       	movw	r24, r28
    7b38:	8d 57       	subi	r24, 0x7D	; 125
    7b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b3c:	fc 01       	movw	r30, r24
    7b3e:	60 81       	ld	r22, Z
    7b40:	71 81       	ldd	r23, Z+1	; 0x01
    7b42:	82 81       	ldd	r24, Z+2	; 0x02
    7b44:	93 81       	ldd	r25, Z+3	; 0x03
    7b46:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7b4a:	dc 01       	movw	r26, r24
    7b4c:	cb 01       	movw	r24, r22
    7b4e:	f8 01       	movw	r30, r16
    7b50:	91 83       	std	Z+1, r25	; 0x01
    7b52:	80 83       	st	Z, r24
    7b54:	ce 01       	movw	r24, r28
    7b56:	85 57       	subi	r24, 0x75	; 117
    7b58:	9f 4f       	sbci	r25, 0xFF	; 255
    7b5a:	9e 01       	movw	r18, r28
    7b5c:	29 57       	subi	r18, 0x79	; 121
    7b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    7b60:	f9 01       	movw	r30, r18
    7b62:	20 81       	ld	r18, Z
    7b64:	31 81       	ldd	r19, Z+1	; 0x01
    7b66:	fc 01       	movw	r30, r24
    7b68:	31 83       	std	Z+1, r19	; 0x01
    7b6a:	20 83       	st	Z, r18
    7b6c:	ce 01       	movw	r24, r28
    7b6e:	85 57       	subi	r24, 0x75	; 117
    7b70:	9f 4f       	sbci	r25, 0xFF	; 255
    7b72:	fc 01       	movw	r30, r24
    7b74:	80 81       	ld	r24, Z
    7b76:	91 81       	ldd	r25, Z+1	; 0x01
    7b78:	8c 01       	movw	r16, r24
    7b7a:	c8 01       	movw	r24, r16
    7b7c:	01 97       	sbiw	r24, 0x01	; 1
    7b7e:	f1 f7       	brne	.-4      	; 0x7b7c <pick_drop+0xeca>
    7b80:	8c 01       	movw	r16, r24
    7b82:	ce 01       	movw	r24, r28
    7b84:	85 57       	subi	r24, 0x75	; 117
    7b86:	9f 4f       	sbci	r25, 0xFF	; 255
    7b88:	fc 01       	movw	r30, r24
    7b8a:	11 83       	std	Z+1, r17	; 0x01
    7b8c:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_left();
    7b8e:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
			back_mm(70);
    7b92:	86 e4       	ldi	r24, 0x46	; 70
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    7b9a:	9e 01       	movw	r18, r28
    7b9c:	23 57       	subi	r18, 0x73	; 115
    7b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba0:	80 e0       	ldi	r24, 0x00	; 0
    7ba2:	90 e0       	ldi	r25, 0x00	; 0
    7ba4:	a0 ea       	ldi	r26, 0xA0	; 160
    7ba6:	b1 e4       	ldi	r27, 0x41	; 65
    7ba8:	f9 01       	movw	r30, r18
    7baa:	80 83       	st	Z, r24
    7bac:	91 83       	std	Z+1, r25	; 0x01
    7bae:	a2 83       	std	Z+2, r26	; 0x02
    7bb0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7bb2:	8e 01       	movw	r16, r28
    7bb4:	0f 56       	subi	r16, 0x6F	; 111
    7bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    7bb8:	ce 01       	movw	r24, r28
    7bba:	83 57       	subi	r24, 0x73	; 115
    7bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    7bbe:	fc 01       	movw	r30, r24
    7bc0:	60 81       	ld	r22, Z
    7bc2:	71 81       	ldd	r23, Z+1	; 0x01
    7bc4:	82 81       	ldd	r24, Z+2	; 0x02
    7bc6:	93 81       	ldd	r25, Z+3	; 0x03
    7bc8:	26 e6       	ldi	r18, 0x66	; 102
    7bca:	36 e6       	ldi	r19, 0x66	; 102
    7bcc:	46 e6       	ldi	r20, 0x66	; 102
    7bce:	55 e4       	ldi	r21, 0x45	; 69
    7bd0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7bd4:	dc 01       	movw	r26, r24
    7bd6:	cb 01       	movw	r24, r22
    7bd8:	f8 01       	movw	r30, r16
    7bda:	80 83       	st	Z, r24
    7bdc:	91 83       	std	Z+1, r25	; 0x01
    7bde:	a2 83       	std	Z+2, r26	; 0x02
    7be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7be2:	ce 01       	movw	r24, r28
    7be4:	8f 56       	subi	r24, 0x6F	; 111
    7be6:	9f 4f       	sbci	r25, 0xFF	; 255
    7be8:	11 e0       	ldi	r17, 0x01	; 1
    7bea:	fc 01       	movw	r30, r24
    7bec:	60 81       	ld	r22, Z
    7bee:	71 81       	ldd	r23, Z+1	; 0x01
    7bf0:	82 81       	ldd	r24, Z+2	; 0x02
    7bf2:	93 81       	ldd	r25, Z+3	; 0x03
    7bf4:	20 e0       	ldi	r18, 0x00	; 0
    7bf6:	30 e0       	ldi	r19, 0x00	; 0
    7bf8:	40 e8       	ldi	r20, 0x80	; 128
    7bfa:	5f e3       	ldi	r21, 0x3F	; 63
    7bfc:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7c00:	88 23       	and	r24, r24
    7c02:	0c f0       	brlt	.+2      	; 0x7c06 <pick_drop+0xf54>
    7c04:	10 e0       	ldi	r17, 0x00	; 0
    7c06:	11 23       	and	r17, r17
    7c08:	49 f0       	breq	.+18     	; 0x7c1c <pick_drop+0xf6a>
		__ticks = 1;
    7c0a:	ce 01       	movw	r24, r28
    7c0c:	8b 56       	subi	r24, 0x6B	; 107
    7c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c10:	21 e0       	ldi	r18, 0x01	; 1
    7c12:	30 e0       	ldi	r19, 0x00	; 0
    7c14:	fc 01       	movw	r30, r24
    7c16:	31 83       	std	Z+1, r19	; 0x01
    7c18:	20 83       	st	Z, r18
    7c1a:	75 c0       	rjmp	.+234    	; 0x7d06 <pick_drop+0x1054>
	else if (__tmp > 65535)
    7c1c:	ce 01       	movw	r24, r28
    7c1e:	8f 56       	subi	r24, 0x6F	; 111
    7c20:	9f 4f       	sbci	r25, 0xFF	; 255
    7c22:	11 e0       	ldi	r17, 0x01	; 1
    7c24:	fc 01       	movw	r30, r24
    7c26:	60 81       	ld	r22, Z
    7c28:	71 81       	ldd	r23, Z+1	; 0x01
    7c2a:	82 81       	ldd	r24, Z+2	; 0x02
    7c2c:	93 81       	ldd	r25, Z+3	; 0x03
    7c2e:	20 e0       	ldi	r18, 0x00	; 0
    7c30:	3f ef       	ldi	r19, 0xFF	; 255
    7c32:	4f e7       	ldi	r20, 0x7F	; 127
    7c34:	57 e4       	ldi	r21, 0x47	; 71
    7c36:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    7c3a:	18 16       	cp	r1, r24
    7c3c:	0c f0       	brlt	.+2      	; 0x7c40 <pick_drop+0xf8e>
    7c3e:	10 e0       	ldi	r17, 0x00	; 0
    7c40:	11 23       	and	r17, r17
    7c42:	09 f4       	brne	.+2      	; 0x7c46 <pick_drop+0xf94>
    7c44:	4e c0       	rjmp	.+156    	; 0x7ce2 <pick_drop+0x1030>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7c46:	ce 01       	movw	r24, r28
    7c48:	83 57       	subi	r24, 0x73	; 115
    7c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c4c:	fc 01       	movw	r30, r24
    7c4e:	60 81       	ld	r22, Z
    7c50:	71 81       	ldd	r23, Z+1	; 0x01
    7c52:	82 81       	ldd	r24, Z+2	; 0x02
    7c54:	93 81       	ldd	r25, Z+3	; 0x03
    7c56:	20 e0       	ldi	r18, 0x00	; 0
    7c58:	30 e0       	ldi	r19, 0x00	; 0
    7c5a:	40 e2       	ldi	r20, 0x20	; 32
    7c5c:	51 e4       	ldi	r21, 0x41	; 65
    7c5e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7c62:	dc 01       	movw	r26, r24
    7c64:	cb 01       	movw	r24, r22
    7c66:	8e 01       	movw	r16, r28
    7c68:	0b 56       	subi	r16, 0x6B	; 107
    7c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    7c6c:	bc 01       	movw	r22, r24
    7c6e:	cd 01       	movw	r24, r26
    7c70:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7c74:	dc 01       	movw	r26, r24
    7c76:	cb 01       	movw	r24, r22
    7c78:	f8 01       	movw	r30, r16
    7c7a:	91 83       	std	Z+1, r25	; 0x01
    7c7c:	80 83       	st	Z, r24
    7c7e:	27 c0       	rjmp	.+78     	; 0x7cce <pick_drop+0x101c>
    7c80:	ce 01       	movw	r24, r28
    7c82:	89 56       	subi	r24, 0x69	; 105
    7c84:	9f 4f       	sbci	r25, 0xFF	; 255
    7c86:	20 e7       	ldi	r18, 0x70	; 112
    7c88:	31 e0       	ldi	r19, 0x01	; 1
    7c8a:	fc 01       	movw	r30, r24
    7c8c:	31 83       	std	Z+1, r19	; 0x01
    7c8e:	20 83       	st	Z, r18
    7c90:	ce 01       	movw	r24, r28
    7c92:	89 56       	subi	r24, 0x69	; 105
    7c94:	9f 4f       	sbci	r25, 0xFF	; 255
    7c96:	fc 01       	movw	r30, r24
    7c98:	80 81       	ld	r24, Z
    7c9a:	91 81       	ldd	r25, Z+1	; 0x01
    7c9c:	8c 01       	movw	r16, r24
    7c9e:	c8 01       	movw	r24, r16
    7ca0:	01 97       	sbiw	r24, 0x01	; 1
    7ca2:	f1 f7       	brne	.-4      	; 0x7ca0 <pick_drop+0xfee>
    7ca4:	8c 01       	movw	r16, r24
    7ca6:	ce 01       	movw	r24, r28
    7ca8:	89 56       	subi	r24, 0x69	; 105
    7caa:	9f 4f       	sbci	r25, 0xFF	; 255
    7cac:	fc 01       	movw	r30, r24
    7cae:	11 83       	std	Z+1, r17	; 0x01
    7cb0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7cb2:	ce 01       	movw	r24, r28
    7cb4:	8b 56       	subi	r24, 0x6B	; 107
    7cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb8:	9e 01       	movw	r18, r28
    7cba:	2b 56       	subi	r18, 0x6B	; 107
    7cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    7cbe:	f9 01       	movw	r30, r18
    7cc0:	20 81       	ld	r18, Z
    7cc2:	31 81       	ldd	r19, Z+1	; 0x01
    7cc4:	21 50       	subi	r18, 0x01	; 1
    7cc6:	30 40       	sbci	r19, 0x00	; 0
    7cc8:	fc 01       	movw	r30, r24
    7cca:	31 83       	std	Z+1, r19	; 0x01
    7ccc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7cce:	ce 01       	movw	r24, r28
    7cd0:	8b 56       	subi	r24, 0x6B	; 107
    7cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    7cd4:	fc 01       	movw	r30, r24
    7cd6:	80 81       	ld	r24, Z
    7cd8:	91 81       	ldd	r25, Z+1	; 0x01
    7cda:	00 97       	sbiw	r24, 0x00	; 0
    7cdc:	89 f6       	brne	.-94     	; 0x7c80 <pick_drop+0xfce>
    7cde:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ce2:	8e 01       	movw	r16, r28
    7ce4:	0b 56       	subi	r16, 0x6B	; 107
    7ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ce8:	ce 01       	movw	r24, r28
    7cea:	8f 56       	subi	r24, 0x6F	; 111
    7cec:	9f 4f       	sbci	r25, 0xFF	; 255
    7cee:	fc 01       	movw	r30, r24
    7cf0:	60 81       	ld	r22, Z
    7cf2:	71 81       	ldd	r23, Z+1	; 0x01
    7cf4:	82 81       	ldd	r24, Z+2	; 0x02
    7cf6:	93 81       	ldd	r25, Z+3	; 0x03
    7cf8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7cfc:	dc 01       	movw	r26, r24
    7cfe:	cb 01       	movw	r24, r22
    7d00:	f8 01       	movw	r30, r16
    7d02:	91 83       	std	Z+1, r25	; 0x01
    7d04:	80 83       	st	Z, r24
    7d06:	ce 01       	movw	r24, r28
    7d08:	87 56       	subi	r24, 0x67	; 103
    7d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d0c:	9e 01       	movw	r18, r28
    7d0e:	2b 56       	subi	r18, 0x6B	; 107
    7d10:	3f 4f       	sbci	r19, 0xFF	; 255
    7d12:	f9 01       	movw	r30, r18
    7d14:	20 81       	ld	r18, Z
    7d16:	31 81       	ldd	r19, Z+1	; 0x01
    7d18:	fc 01       	movw	r30, r24
    7d1a:	31 83       	std	Z+1, r19	; 0x01
    7d1c:	20 83       	st	Z, r18
    7d1e:	ce 01       	movw	r24, r28
    7d20:	87 56       	subi	r24, 0x67	; 103
    7d22:	9f 4f       	sbci	r25, 0xFF	; 255
    7d24:	fc 01       	movw	r30, r24
    7d26:	80 81       	ld	r24, Z
    7d28:	91 81       	ldd	r25, Z+1	; 0x01
    7d2a:	8c 01       	movw	r16, r24
    7d2c:	c8 01       	movw	r24, r16
    7d2e:	01 97       	sbiw	r24, 0x01	; 1
    7d30:	f1 f7       	brne	.-4      	; 0x7d2e <pick_drop+0x107c>
    7d32:	8c 01       	movw	r16, r24
    7d34:	ce 01       	movw	r24, r28
    7d36:	87 56       	subi	r24, 0x67	; 103
    7d38:	9f 4f       	sbci	r25, 0xFF	; 255
    7d3a:	fc 01       	movw	r30, r24
    7d3c:	11 83       	std	Z+1, r17	; 0x01
    7d3e:	00 83       	st	Z, r16
    7d40:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			_delay_ms(20);
		}
	}
	else if(pd=='1' && (master_path[node-1] == 'N'))
    7d44:	ce 01       	movw	r24, r28
    7d46:	89 51       	subi	r24, 0x19	; 25
    7d48:	9d 4f       	sbci	r25, 0xFD	; 253
    7d4a:	fc 01       	movw	r30, r24
    7d4c:	80 81       	ld	r24, Z
    7d4e:	81 33       	cpi	r24, 0x31	; 49
    7d50:	09 f0       	breq	.+2      	; 0x7d54 <pick_drop+0x10a2>
    7d52:	66 c3       	rjmp	.+1740   	; 0x8420 <pick_drop+0x176e>
    7d54:	80 91 6d 03 	lds	r24, 0x036D
    7d58:	90 91 6e 03 	lds	r25, 0x036E
    7d5c:	01 97       	sbiw	r24, 0x01	; 1
    7d5e:	8f 58       	subi	r24, 0x8F	; 143
    7d60:	9c 4f       	sbci	r25, 0xFC	; 252
    7d62:	fc 01       	movw	r30, r24
    7d64:	80 81       	ld	r24, Z
    7d66:	8e 34       	cpi	r24, 0x4E	; 78
    7d68:	09 f0       	breq	.+2      	; 0x7d6c <pick_drop+0x10ba>
    7d6a:	5a c3       	rjmp	.+1716   	; 0x8420 <pick_drop+0x176e>
	{
		//left_cycle();
		forward_mm(160);
    7d6c:	80 ea       	ldi	r24, 0xA0	; 160
    7d6e:	90 e0       	ldi	r25, 0x00	; 0
    7d70:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7d74:	9e 01       	movw	r18, r28
    7d76:	25 56       	subi	r18, 0x65	; 101
    7d78:	3f 4f       	sbci	r19, 0xFF	; 255
    7d7a:	80 e0       	ldi	r24, 0x00	; 0
    7d7c:	90 e0       	ldi	r25, 0x00	; 0
    7d7e:	a0 ea       	ldi	r26, 0xA0	; 160
    7d80:	b1 e4       	ldi	r27, 0x41	; 65
    7d82:	f9 01       	movw	r30, r18
    7d84:	80 83       	st	Z, r24
    7d86:	91 83       	std	Z+1, r25	; 0x01
    7d88:	a2 83       	std	Z+2, r26	; 0x02
    7d8a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7d8c:	8e 01       	movw	r16, r28
    7d8e:	01 56       	subi	r16, 0x61	; 97
    7d90:	1f 4f       	sbci	r17, 0xFF	; 255
    7d92:	ce 01       	movw	r24, r28
    7d94:	85 56       	subi	r24, 0x65	; 101
    7d96:	9f 4f       	sbci	r25, 0xFF	; 255
    7d98:	fc 01       	movw	r30, r24
    7d9a:	60 81       	ld	r22, Z
    7d9c:	71 81       	ldd	r23, Z+1	; 0x01
    7d9e:	82 81       	ldd	r24, Z+2	; 0x02
    7da0:	93 81       	ldd	r25, Z+3	; 0x03
    7da2:	26 e6       	ldi	r18, 0x66	; 102
    7da4:	36 e6       	ldi	r19, 0x66	; 102
    7da6:	46 e6       	ldi	r20, 0x66	; 102
    7da8:	55 e4       	ldi	r21, 0x45	; 69
    7daa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7dae:	dc 01       	movw	r26, r24
    7db0:	cb 01       	movw	r24, r22
    7db2:	f8 01       	movw	r30, r16
    7db4:	80 83       	st	Z, r24
    7db6:	91 83       	std	Z+1, r25	; 0x01
    7db8:	a2 83       	std	Z+2, r26	; 0x02
    7dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7dbc:	ce 01       	movw	r24, r28
    7dbe:	81 56       	subi	r24, 0x61	; 97
    7dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc2:	11 e0       	ldi	r17, 0x01	; 1
    7dc4:	fc 01       	movw	r30, r24
    7dc6:	60 81       	ld	r22, Z
    7dc8:	71 81       	ldd	r23, Z+1	; 0x01
    7dca:	82 81       	ldd	r24, Z+2	; 0x02
    7dcc:	93 81       	ldd	r25, Z+3	; 0x03
    7dce:	20 e0       	ldi	r18, 0x00	; 0
    7dd0:	30 e0       	ldi	r19, 0x00	; 0
    7dd2:	40 e8       	ldi	r20, 0x80	; 128
    7dd4:	5f e3       	ldi	r21, 0x3F	; 63
    7dd6:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7dda:	88 23       	and	r24, r24
    7ddc:	0c f0       	brlt	.+2      	; 0x7de0 <pick_drop+0x112e>
    7dde:	10 e0       	ldi	r17, 0x00	; 0
    7de0:	11 23       	and	r17, r17
    7de2:	49 f0       	breq	.+18     	; 0x7df6 <pick_drop+0x1144>
		__ticks = 1;
    7de4:	ce 01       	movw	r24, r28
    7de6:	8d 55       	subi	r24, 0x5D	; 93
    7de8:	9f 4f       	sbci	r25, 0xFF	; 255
    7dea:	21 e0       	ldi	r18, 0x01	; 1
    7dec:	30 e0       	ldi	r19, 0x00	; 0
    7dee:	fc 01       	movw	r30, r24
    7df0:	31 83       	std	Z+1, r19	; 0x01
    7df2:	20 83       	st	Z, r18
    7df4:	74 c0       	rjmp	.+232    	; 0x7ede <pick_drop+0x122c>
	else if (__tmp > 65535)
    7df6:	ce 01       	movw	r24, r28
    7df8:	81 56       	subi	r24, 0x61	; 97
    7dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    7dfc:	11 e0       	ldi	r17, 0x01	; 1
    7dfe:	fc 01       	movw	r30, r24
    7e00:	60 81       	ld	r22, Z
    7e02:	71 81       	ldd	r23, Z+1	; 0x01
    7e04:	82 81       	ldd	r24, Z+2	; 0x02
    7e06:	93 81       	ldd	r25, Z+3	; 0x03
    7e08:	20 e0       	ldi	r18, 0x00	; 0
    7e0a:	3f ef       	ldi	r19, 0xFF	; 255
    7e0c:	4f e7       	ldi	r20, 0x7F	; 127
    7e0e:	57 e4       	ldi	r21, 0x47	; 71
    7e10:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    7e14:	18 16       	cp	r1, r24
    7e16:	0c f0       	brlt	.+2      	; 0x7e1a <pick_drop+0x1168>
    7e18:	10 e0       	ldi	r17, 0x00	; 0
    7e1a:	11 23       	and	r17, r17
    7e1c:	09 f4       	brne	.+2      	; 0x7e20 <pick_drop+0x116e>
    7e1e:	4d c0       	rjmp	.+154    	; 0x7eba <pick_drop+0x1208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e20:	ce 01       	movw	r24, r28
    7e22:	85 56       	subi	r24, 0x65	; 101
    7e24:	9f 4f       	sbci	r25, 0xFF	; 255
    7e26:	fc 01       	movw	r30, r24
    7e28:	60 81       	ld	r22, Z
    7e2a:	71 81       	ldd	r23, Z+1	; 0x01
    7e2c:	82 81       	ldd	r24, Z+2	; 0x02
    7e2e:	93 81       	ldd	r25, Z+3	; 0x03
    7e30:	20 e0       	ldi	r18, 0x00	; 0
    7e32:	30 e0       	ldi	r19, 0x00	; 0
    7e34:	40 e2       	ldi	r20, 0x20	; 32
    7e36:	51 e4       	ldi	r21, 0x41	; 65
    7e38:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7e3c:	dc 01       	movw	r26, r24
    7e3e:	cb 01       	movw	r24, r22
    7e40:	8e 01       	movw	r16, r28
    7e42:	0d 55       	subi	r16, 0x5D	; 93
    7e44:	1f 4f       	sbci	r17, 0xFF	; 255
    7e46:	bc 01       	movw	r22, r24
    7e48:	cd 01       	movw	r24, r26
    7e4a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7e4e:	dc 01       	movw	r26, r24
    7e50:	cb 01       	movw	r24, r22
    7e52:	f8 01       	movw	r30, r16
    7e54:	91 83       	std	Z+1, r25	; 0x01
    7e56:	80 83       	st	Z, r24
    7e58:	27 c0       	rjmp	.+78     	; 0x7ea8 <pick_drop+0x11f6>
    7e5a:	ce 01       	movw	r24, r28
    7e5c:	8b 55       	subi	r24, 0x5B	; 91
    7e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e60:	20 e7       	ldi	r18, 0x70	; 112
    7e62:	31 e0       	ldi	r19, 0x01	; 1
    7e64:	fc 01       	movw	r30, r24
    7e66:	31 83       	std	Z+1, r19	; 0x01
    7e68:	20 83       	st	Z, r18
    7e6a:	ce 01       	movw	r24, r28
    7e6c:	8b 55       	subi	r24, 0x5B	; 91
    7e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e70:	fc 01       	movw	r30, r24
    7e72:	80 81       	ld	r24, Z
    7e74:	91 81       	ldd	r25, Z+1	; 0x01
    7e76:	8c 01       	movw	r16, r24
    7e78:	c8 01       	movw	r24, r16
    7e7a:	01 97       	sbiw	r24, 0x01	; 1
    7e7c:	f1 f7       	brne	.-4      	; 0x7e7a <pick_drop+0x11c8>
    7e7e:	8c 01       	movw	r16, r24
    7e80:	ce 01       	movw	r24, r28
    7e82:	8b 55       	subi	r24, 0x5B	; 91
    7e84:	9f 4f       	sbci	r25, 0xFF	; 255
    7e86:	fc 01       	movw	r30, r24
    7e88:	11 83       	std	Z+1, r17	; 0x01
    7e8a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e8c:	ce 01       	movw	r24, r28
    7e8e:	8d 55       	subi	r24, 0x5D	; 93
    7e90:	9f 4f       	sbci	r25, 0xFF	; 255
    7e92:	9e 01       	movw	r18, r28
    7e94:	2d 55       	subi	r18, 0x5D	; 93
    7e96:	3f 4f       	sbci	r19, 0xFF	; 255
    7e98:	f9 01       	movw	r30, r18
    7e9a:	20 81       	ld	r18, Z
    7e9c:	31 81       	ldd	r19, Z+1	; 0x01
    7e9e:	21 50       	subi	r18, 0x01	; 1
    7ea0:	30 40       	sbci	r19, 0x00	; 0
    7ea2:	fc 01       	movw	r30, r24
    7ea4:	31 83       	std	Z+1, r19	; 0x01
    7ea6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ea8:	ce 01       	movw	r24, r28
    7eaa:	8d 55       	subi	r24, 0x5D	; 93
    7eac:	9f 4f       	sbci	r25, 0xFF	; 255
    7eae:	fc 01       	movw	r30, r24
    7eb0:	80 81       	ld	r24, Z
    7eb2:	91 81       	ldd	r25, Z+1	; 0x01
    7eb4:	00 97       	sbiw	r24, 0x00	; 0
    7eb6:	89 f6       	brne	.-94     	; 0x7e5a <pick_drop+0x11a8>
    7eb8:	2f c0       	rjmp	.+94     	; 0x7f18 <pick_drop+0x1266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7eba:	8e 01       	movw	r16, r28
    7ebc:	0d 55       	subi	r16, 0x5D	; 93
    7ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    7ec0:	ce 01       	movw	r24, r28
    7ec2:	81 56       	subi	r24, 0x61	; 97
    7ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ec6:	fc 01       	movw	r30, r24
    7ec8:	60 81       	ld	r22, Z
    7eca:	71 81       	ldd	r23, Z+1	; 0x01
    7ecc:	82 81       	ldd	r24, Z+2	; 0x02
    7ece:	93 81       	ldd	r25, Z+3	; 0x03
    7ed0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7ed4:	dc 01       	movw	r26, r24
    7ed6:	cb 01       	movw	r24, r22
    7ed8:	f8 01       	movw	r30, r16
    7eda:	91 83       	std	Z+1, r25	; 0x01
    7edc:	80 83       	st	Z, r24
    7ede:	ce 01       	movw	r24, r28
    7ee0:	89 55       	subi	r24, 0x59	; 89
    7ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ee4:	9e 01       	movw	r18, r28
    7ee6:	2d 55       	subi	r18, 0x5D	; 93
    7ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    7eea:	f9 01       	movw	r30, r18
    7eec:	20 81       	ld	r18, Z
    7eee:	31 81       	ldd	r19, Z+1	; 0x01
    7ef0:	fc 01       	movw	r30, r24
    7ef2:	31 83       	std	Z+1, r19	; 0x01
    7ef4:	20 83       	st	Z, r18
    7ef6:	ce 01       	movw	r24, r28
    7ef8:	89 55       	subi	r24, 0x59	; 89
    7efa:	9f 4f       	sbci	r25, 0xFF	; 255
    7efc:	fc 01       	movw	r30, r24
    7efe:	80 81       	ld	r24, Z
    7f00:	91 81       	ldd	r25, Z+1	; 0x01
    7f02:	8c 01       	movw	r16, r24
    7f04:	c8 01       	movw	r24, r16
    7f06:	01 97       	sbiw	r24, 0x01	; 1
    7f08:	f1 f7       	brne	.-4      	; 0x7f06 <pick_drop+0x1254>
    7f0a:	8c 01       	movw	r16, r24
    7f0c:	ce 01       	movw	r24, r28
    7f0e:	89 55       	subi	r24, 0x59	; 89
    7f10:	9f 4f       	sbci	r25, 0xFF	; 255
    7f12:	fc 01       	movw	r30, r24
    7f14:	11 83       	std	Z+1, r17	; 0x01
    7f16:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_left2();
    7f18:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    7f1c:	9e 01       	movw	r18, r28
    7f1e:	27 55       	subi	r18, 0x57	; 87
    7f20:	3f 4f       	sbci	r19, 0xFF	; 255
    7f22:	80 e0       	ldi	r24, 0x00	; 0
    7f24:	90 e0       	ldi	r25, 0x00	; 0
    7f26:	a8 e4       	ldi	r26, 0x48	; 72
    7f28:	b2 e4       	ldi	r27, 0x42	; 66
    7f2a:	f9 01       	movw	r30, r18
    7f2c:	80 83       	st	Z, r24
    7f2e:	91 83       	std	Z+1, r25	; 0x01
    7f30:	a2 83       	std	Z+2, r26	; 0x02
    7f32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7f34:	8e 01       	movw	r16, r28
    7f36:	03 55       	subi	r16, 0x53	; 83
    7f38:	1f 4f       	sbci	r17, 0xFF	; 255
    7f3a:	ce 01       	movw	r24, r28
    7f3c:	87 55       	subi	r24, 0x57	; 87
    7f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f40:	fc 01       	movw	r30, r24
    7f42:	60 81       	ld	r22, Z
    7f44:	71 81       	ldd	r23, Z+1	; 0x01
    7f46:	82 81       	ldd	r24, Z+2	; 0x02
    7f48:	93 81       	ldd	r25, Z+3	; 0x03
    7f4a:	26 e6       	ldi	r18, 0x66	; 102
    7f4c:	36 e6       	ldi	r19, 0x66	; 102
    7f4e:	46 e6       	ldi	r20, 0x66	; 102
    7f50:	55 e4       	ldi	r21, 0x45	; 69
    7f52:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7f56:	dc 01       	movw	r26, r24
    7f58:	cb 01       	movw	r24, r22
    7f5a:	f8 01       	movw	r30, r16
    7f5c:	80 83       	st	Z, r24
    7f5e:	91 83       	std	Z+1, r25	; 0x01
    7f60:	a2 83       	std	Z+2, r26	; 0x02
    7f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7f64:	ce 01       	movw	r24, r28
    7f66:	83 55       	subi	r24, 0x53	; 83
    7f68:	9f 4f       	sbci	r25, 0xFF	; 255
    7f6a:	11 e0       	ldi	r17, 0x01	; 1
    7f6c:	fc 01       	movw	r30, r24
    7f6e:	60 81       	ld	r22, Z
    7f70:	71 81       	ldd	r23, Z+1	; 0x01
    7f72:	82 81       	ldd	r24, Z+2	; 0x02
    7f74:	93 81       	ldd	r25, Z+3	; 0x03
    7f76:	20 e0       	ldi	r18, 0x00	; 0
    7f78:	30 e0       	ldi	r19, 0x00	; 0
    7f7a:	40 e8       	ldi	r20, 0x80	; 128
    7f7c:	5f e3       	ldi	r21, 0x3F	; 63
    7f7e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    7f82:	88 23       	and	r24, r24
    7f84:	0c f0       	brlt	.+2      	; 0x7f88 <pick_drop+0x12d6>
    7f86:	10 e0       	ldi	r17, 0x00	; 0
    7f88:	11 23       	and	r17, r17
    7f8a:	49 f0       	breq	.+18     	; 0x7f9e <pick_drop+0x12ec>
		__ticks = 1;
    7f8c:	ce 01       	movw	r24, r28
    7f8e:	8f 54       	subi	r24, 0x4F	; 79
    7f90:	9f 4f       	sbci	r25, 0xFF	; 255
    7f92:	21 e0       	ldi	r18, 0x01	; 1
    7f94:	30 e0       	ldi	r19, 0x00	; 0
    7f96:	fc 01       	movw	r30, r24
    7f98:	31 83       	std	Z+1, r19	; 0x01
    7f9a:	20 83       	st	Z, r18
    7f9c:	74 c0       	rjmp	.+232    	; 0x8086 <pick_drop+0x13d4>
	else if (__tmp > 65535)
    7f9e:	ce 01       	movw	r24, r28
    7fa0:	83 55       	subi	r24, 0x53	; 83
    7fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    7fa4:	11 e0       	ldi	r17, 0x01	; 1
    7fa6:	fc 01       	movw	r30, r24
    7fa8:	60 81       	ld	r22, Z
    7faa:	71 81       	ldd	r23, Z+1	; 0x01
    7fac:	82 81       	ldd	r24, Z+2	; 0x02
    7fae:	93 81       	ldd	r25, Z+3	; 0x03
    7fb0:	20 e0       	ldi	r18, 0x00	; 0
    7fb2:	3f ef       	ldi	r19, 0xFF	; 255
    7fb4:	4f e7       	ldi	r20, 0x7F	; 127
    7fb6:	57 e4       	ldi	r21, 0x47	; 71
    7fb8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    7fbc:	18 16       	cp	r1, r24
    7fbe:	0c f0       	brlt	.+2      	; 0x7fc2 <pick_drop+0x1310>
    7fc0:	10 e0       	ldi	r17, 0x00	; 0
    7fc2:	11 23       	and	r17, r17
    7fc4:	09 f4       	brne	.+2      	; 0x7fc8 <pick_drop+0x1316>
    7fc6:	4d c0       	rjmp	.+154    	; 0x8062 <pick_drop+0x13b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7fc8:	ce 01       	movw	r24, r28
    7fca:	87 55       	subi	r24, 0x57	; 87
    7fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    7fce:	fc 01       	movw	r30, r24
    7fd0:	60 81       	ld	r22, Z
    7fd2:	71 81       	ldd	r23, Z+1	; 0x01
    7fd4:	82 81       	ldd	r24, Z+2	; 0x02
    7fd6:	93 81       	ldd	r25, Z+3	; 0x03
    7fd8:	20 e0       	ldi	r18, 0x00	; 0
    7fda:	30 e0       	ldi	r19, 0x00	; 0
    7fdc:	40 e2       	ldi	r20, 0x20	; 32
    7fde:	51 e4       	ldi	r21, 0x41	; 65
    7fe0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    7fe4:	dc 01       	movw	r26, r24
    7fe6:	cb 01       	movw	r24, r22
    7fe8:	8e 01       	movw	r16, r28
    7fea:	0f 54       	subi	r16, 0x4F	; 79
    7fec:	1f 4f       	sbci	r17, 0xFF	; 255
    7fee:	bc 01       	movw	r22, r24
    7ff0:	cd 01       	movw	r24, r26
    7ff2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    7ff6:	dc 01       	movw	r26, r24
    7ff8:	cb 01       	movw	r24, r22
    7ffa:	f8 01       	movw	r30, r16
    7ffc:	91 83       	std	Z+1, r25	; 0x01
    7ffe:	80 83       	st	Z, r24
    8000:	27 c0       	rjmp	.+78     	; 0x8050 <pick_drop+0x139e>
    8002:	ce 01       	movw	r24, r28
    8004:	8d 54       	subi	r24, 0x4D	; 77
    8006:	9f 4f       	sbci	r25, 0xFF	; 255
    8008:	20 e7       	ldi	r18, 0x70	; 112
    800a:	31 e0       	ldi	r19, 0x01	; 1
    800c:	fc 01       	movw	r30, r24
    800e:	31 83       	std	Z+1, r19	; 0x01
    8010:	20 83       	st	Z, r18
    8012:	ce 01       	movw	r24, r28
    8014:	8d 54       	subi	r24, 0x4D	; 77
    8016:	9f 4f       	sbci	r25, 0xFF	; 255
    8018:	fc 01       	movw	r30, r24
    801a:	80 81       	ld	r24, Z
    801c:	91 81       	ldd	r25, Z+1	; 0x01
    801e:	8c 01       	movw	r16, r24
    8020:	c8 01       	movw	r24, r16
    8022:	01 97       	sbiw	r24, 0x01	; 1
    8024:	f1 f7       	brne	.-4      	; 0x8022 <pick_drop+0x1370>
    8026:	8c 01       	movw	r16, r24
    8028:	ce 01       	movw	r24, r28
    802a:	8d 54       	subi	r24, 0x4D	; 77
    802c:	9f 4f       	sbci	r25, 0xFF	; 255
    802e:	fc 01       	movw	r30, r24
    8030:	11 83       	std	Z+1, r17	; 0x01
    8032:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8034:	ce 01       	movw	r24, r28
    8036:	8f 54       	subi	r24, 0x4F	; 79
    8038:	9f 4f       	sbci	r25, 0xFF	; 255
    803a:	9e 01       	movw	r18, r28
    803c:	2f 54       	subi	r18, 0x4F	; 79
    803e:	3f 4f       	sbci	r19, 0xFF	; 255
    8040:	f9 01       	movw	r30, r18
    8042:	20 81       	ld	r18, Z
    8044:	31 81       	ldd	r19, Z+1	; 0x01
    8046:	21 50       	subi	r18, 0x01	; 1
    8048:	30 40       	sbci	r19, 0x00	; 0
    804a:	fc 01       	movw	r30, r24
    804c:	31 83       	std	Z+1, r19	; 0x01
    804e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8050:	ce 01       	movw	r24, r28
    8052:	8f 54       	subi	r24, 0x4F	; 79
    8054:	9f 4f       	sbci	r25, 0xFF	; 255
    8056:	fc 01       	movw	r30, r24
    8058:	80 81       	ld	r24, Z
    805a:	91 81       	ldd	r25, Z+1	; 0x01
    805c:	00 97       	sbiw	r24, 0x00	; 0
    805e:	89 f6       	brne	.-94     	; 0x8002 <pick_drop+0x1350>
    8060:	2f c0       	rjmp	.+94     	; 0x80c0 <pick_drop+0x140e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8062:	8e 01       	movw	r16, r28
    8064:	0f 54       	subi	r16, 0x4F	; 79
    8066:	1f 4f       	sbci	r17, 0xFF	; 255
    8068:	ce 01       	movw	r24, r28
    806a:	83 55       	subi	r24, 0x53	; 83
    806c:	9f 4f       	sbci	r25, 0xFF	; 255
    806e:	fc 01       	movw	r30, r24
    8070:	60 81       	ld	r22, Z
    8072:	71 81       	ldd	r23, Z+1	; 0x01
    8074:	82 81       	ldd	r24, Z+2	; 0x02
    8076:	93 81       	ldd	r25, Z+3	; 0x03
    8078:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    807c:	dc 01       	movw	r26, r24
    807e:	cb 01       	movw	r24, r22
    8080:	f8 01       	movw	r30, r16
    8082:	91 83       	std	Z+1, r25	; 0x01
    8084:	80 83       	st	Z, r24
    8086:	ce 01       	movw	r24, r28
    8088:	8b 54       	subi	r24, 0x4B	; 75
    808a:	9f 4f       	sbci	r25, 0xFF	; 255
    808c:	9e 01       	movw	r18, r28
    808e:	2f 54       	subi	r18, 0x4F	; 79
    8090:	3f 4f       	sbci	r19, 0xFF	; 255
    8092:	f9 01       	movw	r30, r18
    8094:	20 81       	ld	r18, Z
    8096:	31 81       	ldd	r19, Z+1	; 0x01
    8098:	fc 01       	movw	r30, r24
    809a:	31 83       	std	Z+1, r19	; 0x01
    809c:	20 83       	st	Z, r18
    809e:	ce 01       	movw	r24, r28
    80a0:	8b 54       	subi	r24, 0x4B	; 75
    80a2:	9f 4f       	sbci	r25, 0xFF	; 255
    80a4:	fc 01       	movw	r30, r24
    80a6:	80 81       	ld	r24, Z
    80a8:	91 81       	ldd	r25, Z+1	; 0x01
    80aa:	8c 01       	movw	r16, r24
    80ac:	c8 01       	movw	r24, r16
    80ae:	01 97       	sbiw	r24, 0x01	; 1
    80b0:	f1 f7       	brne	.-4      	; 0x80ae <pick_drop+0x13fc>
    80b2:	8c 01       	movw	r16, r24
    80b4:	ce 01       	movw	r24, r28
    80b6:	8b 54       	subi	r24, 0x4B	; 75
    80b8:	9f 4f       	sbci	r25, 0xFF	; 255
    80ba:	fc 01       	movw	r30, r24
    80bc:	11 83       	std	Z+1, r17	; 0x01
    80be:	00 83       	st	Z, r16
		_delay_ms(50);
		front();
    80c0:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    80c4:	9e 01       	movw	r18, r28
    80c6:	29 54       	subi	r18, 0x49	; 73
    80c8:	3f 4f       	sbci	r19, 0xFF	; 255
    80ca:	80 e0       	ldi	r24, 0x00	; 0
    80cc:	90 e0       	ldi	r25, 0x00	; 0
    80ce:	a8 ec       	ldi	r26, 0xC8	; 200
    80d0:	b2 e4       	ldi	r27, 0x42	; 66
    80d2:	f9 01       	movw	r30, r18
    80d4:	80 83       	st	Z, r24
    80d6:	91 83       	std	Z+1, r25	; 0x01
    80d8:	a2 83       	std	Z+2, r26	; 0x02
    80da:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    80dc:	8e 01       	movw	r16, r28
    80de:	05 54       	subi	r16, 0x45	; 69
    80e0:	1f 4f       	sbci	r17, 0xFF	; 255
    80e2:	ce 01       	movw	r24, r28
    80e4:	89 54       	subi	r24, 0x49	; 73
    80e6:	9f 4f       	sbci	r25, 0xFF	; 255
    80e8:	fc 01       	movw	r30, r24
    80ea:	60 81       	ld	r22, Z
    80ec:	71 81       	ldd	r23, Z+1	; 0x01
    80ee:	82 81       	ldd	r24, Z+2	; 0x02
    80f0:	93 81       	ldd	r25, Z+3	; 0x03
    80f2:	26 e6       	ldi	r18, 0x66	; 102
    80f4:	36 e6       	ldi	r19, 0x66	; 102
    80f6:	46 e6       	ldi	r20, 0x66	; 102
    80f8:	55 e4       	ldi	r21, 0x45	; 69
    80fa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    80fe:	dc 01       	movw	r26, r24
    8100:	cb 01       	movw	r24, r22
    8102:	f8 01       	movw	r30, r16
    8104:	80 83       	st	Z, r24
    8106:	91 83       	std	Z+1, r25	; 0x01
    8108:	a2 83       	std	Z+2, r26	; 0x02
    810a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    810c:	ce 01       	movw	r24, r28
    810e:	85 54       	subi	r24, 0x45	; 69
    8110:	9f 4f       	sbci	r25, 0xFF	; 255
    8112:	11 e0       	ldi	r17, 0x01	; 1
    8114:	fc 01       	movw	r30, r24
    8116:	60 81       	ld	r22, Z
    8118:	71 81       	ldd	r23, Z+1	; 0x01
    811a:	82 81       	ldd	r24, Z+2	; 0x02
    811c:	93 81       	ldd	r25, Z+3	; 0x03
    811e:	20 e0       	ldi	r18, 0x00	; 0
    8120:	30 e0       	ldi	r19, 0x00	; 0
    8122:	40 e8       	ldi	r20, 0x80	; 128
    8124:	5f e3       	ldi	r21, 0x3F	; 63
    8126:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    812a:	88 23       	and	r24, r24
    812c:	0c f0       	brlt	.+2      	; 0x8130 <pick_drop+0x147e>
    812e:	10 e0       	ldi	r17, 0x00	; 0
    8130:	11 23       	and	r17, r17
    8132:	49 f0       	breq	.+18     	; 0x8146 <pick_drop+0x1494>
		__ticks = 1;
    8134:	ce 01       	movw	r24, r28
    8136:	81 54       	subi	r24, 0x41	; 65
    8138:	9f 4f       	sbci	r25, 0xFF	; 255
    813a:	21 e0       	ldi	r18, 0x01	; 1
    813c:	30 e0       	ldi	r19, 0x00	; 0
    813e:	fc 01       	movw	r30, r24
    8140:	31 83       	std	Z+1, r19	; 0x01
    8142:	20 83       	st	Z, r18
    8144:	74 c0       	rjmp	.+232    	; 0x822e <pick_drop+0x157c>
	else if (__tmp > 65535)
    8146:	ce 01       	movw	r24, r28
    8148:	85 54       	subi	r24, 0x45	; 69
    814a:	9f 4f       	sbci	r25, 0xFF	; 255
    814c:	11 e0       	ldi	r17, 0x01	; 1
    814e:	fc 01       	movw	r30, r24
    8150:	60 81       	ld	r22, Z
    8152:	71 81       	ldd	r23, Z+1	; 0x01
    8154:	82 81       	ldd	r24, Z+2	; 0x02
    8156:	93 81       	ldd	r25, Z+3	; 0x03
    8158:	20 e0       	ldi	r18, 0x00	; 0
    815a:	3f ef       	ldi	r19, 0xFF	; 255
    815c:	4f e7       	ldi	r20, 0x7F	; 127
    815e:	57 e4       	ldi	r21, 0x47	; 71
    8160:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8164:	18 16       	cp	r1, r24
    8166:	0c f0       	brlt	.+2      	; 0x816a <pick_drop+0x14b8>
    8168:	10 e0       	ldi	r17, 0x00	; 0
    816a:	11 23       	and	r17, r17
    816c:	09 f4       	brne	.+2      	; 0x8170 <pick_drop+0x14be>
    816e:	4d c0       	rjmp	.+154    	; 0x820a <pick_drop+0x1558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8170:	ce 01       	movw	r24, r28
    8172:	89 54       	subi	r24, 0x49	; 73
    8174:	9f 4f       	sbci	r25, 0xFF	; 255
    8176:	fc 01       	movw	r30, r24
    8178:	60 81       	ld	r22, Z
    817a:	71 81       	ldd	r23, Z+1	; 0x01
    817c:	82 81       	ldd	r24, Z+2	; 0x02
    817e:	93 81       	ldd	r25, Z+3	; 0x03
    8180:	20 e0       	ldi	r18, 0x00	; 0
    8182:	30 e0       	ldi	r19, 0x00	; 0
    8184:	40 e2       	ldi	r20, 0x20	; 32
    8186:	51 e4       	ldi	r21, 0x41	; 65
    8188:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    818c:	dc 01       	movw	r26, r24
    818e:	cb 01       	movw	r24, r22
    8190:	8e 01       	movw	r16, r28
    8192:	01 54       	subi	r16, 0x41	; 65
    8194:	1f 4f       	sbci	r17, 0xFF	; 255
    8196:	bc 01       	movw	r22, r24
    8198:	cd 01       	movw	r24, r26
    819a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    819e:	dc 01       	movw	r26, r24
    81a0:	cb 01       	movw	r24, r22
    81a2:	f8 01       	movw	r30, r16
    81a4:	91 83       	std	Z+1, r25	; 0x01
    81a6:	80 83       	st	Z, r24
    81a8:	27 c0       	rjmp	.+78     	; 0x81f8 <pick_drop+0x1546>
    81aa:	ce 01       	movw	r24, r28
    81ac:	8f 53       	subi	r24, 0x3F	; 63
    81ae:	9f 4f       	sbci	r25, 0xFF	; 255
    81b0:	20 e7       	ldi	r18, 0x70	; 112
    81b2:	31 e0       	ldi	r19, 0x01	; 1
    81b4:	fc 01       	movw	r30, r24
    81b6:	31 83       	std	Z+1, r19	; 0x01
    81b8:	20 83       	st	Z, r18
    81ba:	ce 01       	movw	r24, r28
    81bc:	8f 53       	subi	r24, 0x3F	; 63
    81be:	9f 4f       	sbci	r25, 0xFF	; 255
    81c0:	fc 01       	movw	r30, r24
    81c2:	80 81       	ld	r24, Z
    81c4:	91 81       	ldd	r25, Z+1	; 0x01
    81c6:	8c 01       	movw	r16, r24
    81c8:	c8 01       	movw	r24, r16
    81ca:	01 97       	sbiw	r24, 0x01	; 1
    81cc:	f1 f7       	brne	.-4      	; 0x81ca <pick_drop+0x1518>
    81ce:	8c 01       	movw	r16, r24
    81d0:	ce 01       	movw	r24, r28
    81d2:	8f 53       	subi	r24, 0x3F	; 63
    81d4:	9f 4f       	sbci	r25, 0xFF	; 255
    81d6:	fc 01       	movw	r30, r24
    81d8:	11 83       	std	Z+1, r17	; 0x01
    81da:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81dc:	ce 01       	movw	r24, r28
    81de:	81 54       	subi	r24, 0x41	; 65
    81e0:	9f 4f       	sbci	r25, 0xFF	; 255
    81e2:	9e 01       	movw	r18, r28
    81e4:	21 54       	subi	r18, 0x41	; 65
    81e6:	3f 4f       	sbci	r19, 0xFF	; 255
    81e8:	f9 01       	movw	r30, r18
    81ea:	20 81       	ld	r18, Z
    81ec:	31 81       	ldd	r19, Z+1	; 0x01
    81ee:	21 50       	subi	r18, 0x01	; 1
    81f0:	30 40       	sbci	r19, 0x00	; 0
    81f2:	fc 01       	movw	r30, r24
    81f4:	31 83       	std	Z+1, r19	; 0x01
    81f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81f8:	ce 01       	movw	r24, r28
    81fa:	81 54       	subi	r24, 0x41	; 65
    81fc:	9f 4f       	sbci	r25, 0xFF	; 255
    81fe:	fc 01       	movw	r30, r24
    8200:	80 81       	ld	r24, Z
    8202:	91 81       	ldd	r25, Z+1	; 0x01
    8204:	00 97       	sbiw	r24, 0x00	; 0
    8206:	89 f6       	brne	.-94     	; 0x81aa <pick_drop+0x14f8>
    8208:	2f c0       	rjmp	.+94     	; 0x8268 <pick_drop+0x15b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    820a:	8e 01       	movw	r16, r28
    820c:	01 54       	subi	r16, 0x41	; 65
    820e:	1f 4f       	sbci	r17, 0xFF	; 255
    8210:	ce 01       	movw	r24, r28
    8212:	85 54       	subi	r24, 0x45	; 69
    8214:	9f 4f       	sbci	r25, 0xFF	; 255
    8216:	fc 01       	movw	r30, r24
    8218:	60 81       	ld	r22, Z
    821a:	71 81       	ldd	r23, Z+1	; 0x01
    821c:	82 81       	ldd	r24, Z+2	; 0x02
    821e:	93 81       	ldd	r25, Z+3	; 0x03
    8220:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8224:	dc 01       	movw	r26, r24
    8226:	cb 01       	movw	r24, r22
    8228:	f8 01       	movw	r30, r16
    822a:	91 83       	std	Z+1, r25	; 0x01
    822c:	80 83       	st	Z, r24
    822e:	ce 01       	movw	r24, r28
    8230:	8d 53       	subi	r24, 0x3D	; 61
    8232:	9f 4f       	sbci	r25, 0xFF	; 255
    8234:	9e 01       	movw	r18, r28
    8236:	21 54       	subi	r18, 0x41	; 65
    8238:	3f 4f       	sbci	r19, 0xFF	; 255
    823a:	f9 01       	movw	r30, r18
    823c:	20 81       	ld	r18, Z
    823e:	31 81       	ldd	r19, Z+1	; 0x01
    8240:	fc 01       	movw	r30, r24
    8242:	31 83       	std	Z+1, r19	; 0x01
    8244:	20 83       	st	Z, r18
    8246:	ce 01       	movw	r24, r28
    8248:	8d 53       	subi	r24, 0x3D	; 61
    824a:	9f 4f       	sbci	r25, 0xFF	; 255
    824c:	fc 01       	movw	r30, r24
    824e:	80 81       	ld	r24, Z
    8250:	91 81       	ldd	r25, Z+1	; 0x01
    8252:	8c 01       	movw	r16, r24
    8254:	c8 01       	movw	r24, r16
    8256:	01 97       	sbiw	r24, 0x01	; 1
    8258:	f1 f7       	brne	.-4      	; 0x8256 <pick_drop+0x15a4>
    825a:	8c 01       	movw	r16, r24
    825c:	ce 01       	movw	r24, r28
    825e:	8d 53       	subi	r24, 0x3D	; 61
    8260:	9f 4f       	sbci	r25, 0xFF	; 255
    8262:	fc 01       	movw	r30, r24
    8264:	11 83       	std	Z+1, r17	; 0x01
    8266:	00 83       	st	Z, r16
		_delay_ms(100);
		correct_right();
    8268:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
		back_mm(70);
    826c:	86 e4       	ldi	r24, 0x46	; 70
    826e:	90 e0       	ldi	r25, 0x00	; 0
    8270:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8274:	9e 01       	movw	r18, r28
    8276:	2b 53       	subi	r18, 0x3B	; 59
    8278:	3f 4f       	sbci	r19, 0xFF	; 255
    827a:	80 e0       	ldi	r24, 0x00	; 0
    827c:	90 e0       	ldi	r25, 0x00	; 0
    827e:	a0 ea       	ldi	r26, 0xA0	; 160
    8280:	b1 e4       	ldi	r27, 0x41	; 65
    8282:	f9 01       	movw	r30, r18
    8284:	80 83       	st	Z, r24
    8286:	91 83       	std	Z+1, r25	; 0x01
    8288:	a2 83       	std	Z+2, r26	; 0x02
    828a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    828c:	8e 01       	movw	r16, r28
    828e:	07 53       	subi	r16, 0x37	; 55
    8290:	1f 4f       	sbci	r17, 0xFF	; 255
    8292:	ce 01       	movw	r24, r28
    8294:	8b 53       	subi	r24, 0x3B	; 59
    8296:	9f 4f       	sbci	r25, 0xFF	; 255
    8298:	fc 01       	movw	r30, r24
    829a:	60 81       	ld	r22, Z
    829c:	71 81       	ldd	r23, Z+1	; 0x01
    829e:	82 81       	ldd	r24, Z+2	; 0x02
    82a0:	93 81       	ldd	r25, Z+3	; 0x03
    82a2:	26 e6       	ldi	r18, 0x66	; 102
    82a4:	36 e6       	ldi	r19, 0x66	; 102
    82a6:	46 e6       	ldi	r20, 0x66	; 102
    82a8:	55 e4       	ldi	r21, 0x45	; 69
    82aa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    82ae:	dc 01       	movw	r26, r24
    82b0:	cb 01       	movw	r24, r22
    82b2:	f8 01       	movw	r30, r16
    82b4:	80 83       	st	Z, r24
    82b6:	91 83       	std	Z+1, r25	; 0x01
    82b8:	a2 83       	std	Z+2, r26	; 0x02
    82ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    82bc:	ce 01       	movw	r24, r28
    82be:	87 53       	subi	r24, 0x37	; 55
    82c0:	9f 4f       	sbci	r25, 0xFF	; 255
    82c2:	11 e0       	ldi	r17, 0x01	; 1
    82c4:	fc 01       	movw	r30, r24
    82c6:	60 81       	ld	r22, Z
    82c8:	71 81       	ldd	r23, Z+1	; 0x01
    82ca:	82 81       	ldd	r24, Z+2	; 0x02
    82cc:	93 81       	ldd	r25, Z+3	; 0x03
    82ce:	20 e0       	ldi	r18, 0x00	; 0
    82d0:	30 e0       	ldi	r19, 0x00	; 0
    82d2:	40 e8       	ldi	r20, 0x80	; 128
    82d4:	5f e3       	ldi	r21, 0x3F	; 63
    82d6:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    82da:	88 23       	and	r24, r24
    82dc:	0c f0       	brlt	.+2      	; 0x82e0 <pick_drop+0x162e>
    82de:	10 e0       	ldi	r17, 0x00	; 0
    82e0:	11 23       	and	r17, r17
    82e2:	49 f0       	breq	.+18     	; 0x82f6 <pick_drop+0x1644>
		__ticks = 1;
    82e4:	ce 01       	movw	r24, r28
    82e6:	83 53       	subi	r24, 0x33	; 51
    82e8:	9f 4f       	sbci	r25, 0xFF	; 255
    82ea:	21 e0       	ldi	r18, 0x01	; 1
    82ec:	30 e0       	ldi	r19, 0x00	; 0
    82ee:	fc 01       	movw	r30, r24
    82f0:	31 83       	std	Z+1, r19	; 0x01
    82f2:	20 83       	st	Z, r18
    82f4:	74 c0       	rjmp	.+232    	; 0x83de <pick_drop+0x172c>
	else if (__tmp > 65535)
    82f6:	ce 01       	movw	r24, r28
    82f8:	87 53       	subi	r24, 0x37	; 55
    82fa:	9f 4f       	sbci	r25, 0xFF	; 255
    82fc:	11 e0       	ldi	r17, 0x01	; 1
    82fe:	fc 01       	movw	r30, r24
    8300:	60 81       	ld	r22, Z
    8302:	71 81       	ldd	r23, Z+1	; 0x01
    8304:	82 81       	ldd	r24, Z+2	; 0x02
    8306:	93 81       	ldd	r25, Z+3	; 0x03
    8308:	20 e0       	ldi	r18, 0x00	; 0
    830a:	3f ef       	ldi	r19, 0xFF	; 255
    830c:	4f e7       	ldi	r20, 0x7F	; 127
    830e:	57 e4       	ldi	r21, 0x47	; 71
    8310:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8314:	18 16       	cp	r1, r24
    8316:	0c f0       	brlt	.+2      	; 0x831a <pick_drop+0x1668>
    8318:	10 e0       	ldi	r17, 0x00	; 0
    831a:	11 23       	and	r17, r17
    831c:	09 f4       	brne	.+2      	; 0x8320 <pick_drop+0x166e>
    831e:	4d c0       	rjmp	.+154    	; 0x83ba <pick_drop+0x1708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8320:	ce 01       	movw	r24, r28
    8322:	8b 53       	subi	r24, 0x3B	; 59
    8324:	9f 4f       	sbci	r25, 0xFF	; 255
    8326:	fc 01       	movw	r30, r24
    8328:	60 81       	ld	r22, Z
    832a:	71 81       	ldd	r23, Z+1	; 0x01
    832c:	82 81       	ldd	r24, Z+2	; 0x02
    832e:	93 81       	ldd	r25, Z+3	; 0x03
    8330:	20 e0       	ldi	r18, 0x00	; 0
    8332:	30 e0       	ldi	r19, 0x00	; 0
    8334:	40 e2       	ldi	r20, 0x20	; 32
    8336:	51 e4       	ldi	r21, 0x41	; 65
    8338:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    833c:	dc 01       	movw	r26, r24
    833e:	cb 01       	movw	r24, r22
    8340:	8e 01       	movw	r16, r28
    8342:	03 53       	subi	r16, 0x33	; 51
    8344:	1f 4f       	sbci	r17, 0xFF	; 255
    8346:	bc 01       	movw	r22, r24
    8348:	cd 01       	movw	r24, r26
    834a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    834e:	dc 01       	movw	r26, r24
    8350:	cb 01       	movw	r24, r22
    8352:	f8 01       	movw	r30, r16
    8354:	91 83       	std	Z+1, r25	; 0x01
    8356:	80 83       	st	Z, r24
    8358:	27 c0       	rjmp	.+78     	; 0x83a8 <pick_drop+0x16f6>
    835a:	ce 01       	movw	r24, r28
    835c:	81 53       	subi	r24, 0x31	; 49
    835e:	9f 4f       	sbci	r25, 0xFF	; 255
    8360:	20 e7       	ldi	r18, 0x70	; 112
    8362:	31 e0       	ldi	r19, 0x01	; 1
    8364:	fc 01       	movw	r30, r24
    8366:	31 83       	std	Z+1, r19	; 0x01
    8368:	20 83       	st	Z, r18
    836a:	ce 01       	movw	r24, r28
    836c:	81 53       	subi	r24, 0x31	; 49
    836e:	9f 4f       	sbci	r25, 0xFF	; 255
    8370:	fc 01       	movw	r30, r24
    8372:	80 81       	ld	r24, Z
    8374:	91 81       	ldd	r25, Z+1	; 0x01
    8376:	8c 01       	movw	r16, r24
    8378:	c8 01       	movw	r24, r16
    837a:	01 97       	sbiw	r24, 0x01	; 1
    837c:	f1 f7       	brne	.-4      	; 0x837a <pick_drop+0x16c8>
    837e:	8c 01       	movw	r16, r24
    8380:	ce 01       	movw	r24, r28
    8382:	81 53       	subi	r24, 0x31	; 49
    8384:	9f 4f       	sbci	r25, 0xFF	; 255
    8386:	fc 01       	movw	r30, r24
    8388:	11 83       	std	Z+1, r17	; 0x01
    838a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    838c:	ce 01       	movw	r24, r28
    838e:	83 53       	subi	r24, 0x33	; 51
    8390:	9f 4f       	sbci	r25, 0xFF	; 255
    8392:	9e 01       	movw	r18, r28
    8394:	23 53       	subi	r18, 0x33	; 51
    8396:	3f 4f       	sbci	r19, 0xFF	; 255
    8398:	f9 01       	movw	r30, r18
    839a:	20 81       	ld	r18, Z
    839c:	31 81       	ldd	r19, Z+1	; 0x01
    839e:	21 50       	subi	r18, 0x01	; 1
    83a0:	30 40       	sbci	r19, 0x00	; 0
    83a2:	fc 01       	movw	r30, r24
    83a4:	31 83       	std	Z+1, r19	; 0x01
    83a6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83a8:	ce 01       	movw	r24, r28
    83aa:	83 53       	subi	r24, 0x33	; 51
    83ac:	9f 4f       	sbci	r25, 0xFF	; 255
    83ae:	fc 01       	movw	r30, r24
    83b0:	80 81       	ld	r24, Z
    83b2:	91 81       	ldd	r25, Z+1	; 0x01
    83b4:	00 97       	sbiw	r24, 0x00	; 0
    83b6:	89 f6       	brne	.-94     	; 0x835a <pick_drop+0x16a8>
    83b8:	31 c0       	rjmp	.+98     	; 0x841c <pick_drop+0x176a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    83ba:	8e 01       	movw	r16, r28
    83bc:	03 53       	subi	r16, 0x33	; 51
    83be:	1f 4f       	sbci	r17, 0xFF	; 255
    83c0:	ce 01       	movw	r24, r28
    83c2:	87 53       	subi	r24, 0x37	; 55
    83c4:	9f 4f       	sbci	r25, 0xFF	; 255
    83c6:	fc 01       	movw	r30, r24
    83c8:	60 81       	ld	r22, Z
    83ca:	71 81       	ldd	r23, Z+1	; 0x01
    83cc:	82 81       	ldd	r24, Z+2	; 0x02
    83ce:	93 81       	ldd	r25, Z+3	; 0x03
    83d0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    83d4:	dc 01       	movw	r26, r24
    83d6:	cb 01       	movw	r24, r22
    83d8:	f8 01       	movw	r30, r16
    83da:	91 83       	std	Z+1, r25	; 0x01
    83dc:	80 83       	st	Z, r24
    83de:	ce 01       	movw	r24, r28
    83e0:	8f 52       	subi	r24, 0x2F	; 47
    83e2:	9f 4f       	sbci	r25, 0xFF	; 255
    83e4:	9e 01       	movw	r18, r28
    83e6:	23 53       	subi	r18, 0x33	; 51
    83e8:	3f 4f       	sbci	r19, 0xFF	; 255
    83ea:	f9 01       	movw	r30, r18
    83ec:	20 81       	ld	r18, Z
    83ee:	31 81       	ldd	r19, Z+1	; 0x01
    83f0:	fc 01       	movw	r30, r24
    83f2:	31 83       	std	Z+1, r19	; 0x01
    83f4:	20 83       	st	Z, r18
    83f6:	ce 01       	movw	r24, r28
    83f8:	8f 52       	subi	r24, 0x2F	; 47
    83fa:	9f 4f       	sbci	r25, 0xFF	; 255
    83fc:	fc 01       	movw	r30, r24
    83fe:	80 81       	ld	r24, Z
    8400:	91 81       	ldd	r25, Z+1	; 0x01
    8402:	8c 01       	movw	r16, r24
    8404:	c8 01       	movw	r24, r16
    8406:	01 97       	sbiw	r24, 0x01	; 1
    8408:	f1 f7       	brne	.-4      	; 0x8406 <pick_drop+0x1754>
    840a:	8c 01       	movw	r16, r24
    840c:	ce 01       	movw	r24, r28
    840e:	8f 52       	subi	r24, 0x2F	; 47
    8410:	9f 4f       	sbci	r25, 0xFF	; 255
    8412:	fc 01       	movw	r30, r24
    8414:	11 83       	std	Z+1, r17	; 0x01
    8416:	00 83       	st	Z, r16
		_delay_ms(20);
    8418:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
    841c:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
	}
	else if(pd=='2' && (master_path[node-1] == 'N'))
    8420:	ce 01       	movw	r24, r28
    8422:	89 51       	subi	r24, 0x19	; 25
    8424:	9d 4f       	sbci	r25, 0xFD	; 253
    8426:	fc 01       	movw	r30, r24
    8428:	80 81       	ld	r24, Z
    842a:	82 33       	cpi	r24, 0x32	; 50
    842c:	09 f0       	breq	.+2      	; 0x8430 <pick_drop+0x177e>
    842e:	66 c3       	rjmp	.+1740   	; 0x8afc <pick_drop+0x1e4a>
    8430:	80 91 6d 03 	lds	r24, 0x036D
    8434:	90 91 6e 03 	lds	r25, 0x036E
    8438:	01 97       	sbiw	r24, 0x01	; 1
    843a:	8f 58       	subi	r24, 0x8F	; 143
    843c:	9c 4f       	sbci	r25, 0xFC	; 252
    843e:	fc 01       	movw	r30, r24
    8440:	80 81       	ld	r24, Z
    8442:	8e 34       	cpi	r24, 0x4E	; 78
    8444:	09 f0       	breq	.+2      	; 0x8448 <pick_drop+0x1796>
    8446:	5a c3       	rjmp	.+1716   	; 0x8afc <pick_drop+0x1e4a>
	{
		//right_cycle();
		forward_mm(160);
    8448:	80 ea       	ldi	r24, 0xA0	; 160
    844a:	90 e0       	ldi	r25, 0x00	; 0
    844c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    8450:	9e 01       	movw	r18, r28
    8452:	2d 52       	subi	r18, 0x2D	; 45
    8454:	3f 4f       	sbci	r19, 0xFF	; 255
    8456:	80 e0       	ldi	r24, 0x00	; 0
    8458:	90 e0       	ldi	r25, 0x00	; 0
    845a:	a0 ea       	ldi	r26, 0xA0	; 160
    845c:	b1 e4       	ldi	r27, 0x41	; 65
    845e:	f9 01       	movw	r30, r18
    8460:	80 83       	st	Z, r24
    8462:	91 83       	std	Z+1, r25	; 0x01
    8464:	a2 83       	std	Z+2, r26	; 0x02
    8466:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8468:	8e 01       	movw	r16, r28
    846a:	09 52       	subi	r16, 0x29	; 41
    846c:	1f 4f       	sbci	r17, 0xFF	; 255
    846e:	ce 01       	movw	r24, r28
    8470:	8d 52       	subi	r24, 0x2D	; 45
    8472:	9f 4f       	sbci	r25, 0xFF	; 255
    8474:	fc 01       	movw	r30, r24
    8476:	60 81       	ld	r22, Z
    8478:	71 81       	ldd	r23, Z+1	; 0x01
    847a:	82 81       	ldd	r24, Z+2	; 0x02
    847c:	93 81       	ldd	r25, Z+3	; 0x03
    847e:	26 e6       	ldi	r18, 0x66	; 102
    8480:	36 e6       	ldi	r19, 0x66	; 102
    8482:	46 e6       	ldi	r20, 0x66	; 102
    8484:	55 e4       	ldi	r21, 0x45	; 69
    8486:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    848a:	dc 01       	movw	r26, r24
    848c:	cb 01       	movw	r24, r22
    848e:	f8 01       	movw	r30, r16
    8490:	80 83       	st	Z, r24
    8492:	91 83       	std	Z+1, r25	; 0x01
    8494:	a2 83       	std	Z+2, r26	; 0x02
    8496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8498:	ce 01       	movw	r24, r28
    849a:	89 52       	subi	r24, 0x29	; 41
    849c:	9f 4f       	sbci	r25, 0xFF	; 255
    849e:	11 e0       	ldi	r17, 0x01	; 1
    84a0:	fc 01       	movw	r30, r24
    84a2:	60 81       	ld	r22, Z
    84a4:	71 81       	ldd	r23, Z+1	; 0x01
    84a6:	82 81       	ldd	r24, Z+2	; 0x02
    84a8:	93 81       	ldd	r25, Z+3	; 0x03
    84aa:	20 e0       	ldi	r18, 0x00	; 0
    84ac:	30 e0       	ldi	r19, 0x00	; 0
    84ae:	40 e8       	ldi	r20, 0x80	; 128
    84b0:	5f e3       	ldi	r21, 0x3F	; 63
    84b2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    84b6:	88 23       	and	r24, r24
    84b8:	0c f0       	brlt	.+2      	; 0x84bc <pick_drop+0x180a>
    84ba:	10 e0       	ldi	r17, 0x00	; 0
    84bc:	11 23       	and	r17, r17
    84be:	49 f0       	breq	.+18     	; 0x84d2 <pick_drop+0x1820>
		__ticks = 1;
    84c0:	ce 01       	movw	r24, r28
    84c2:	85 52       	subi	r24, 0x25	; 37
    84c4:	9f 4f       	sbci	r25, 0xFF	; 255
    84c6:	21 e0       	ldi	r18, 0x01	; 1
    84c8:	30 e0       	ldi	r19, 0x00	; 0
    84ca:	fc 01       	movw	r30, r24
    84cc:	31 83       	std	Z+1, r19	; 0x01
    84ce:	20 83       	st	Z, r18
    84d0:	74 c0       	rjmp	.+232    	; 0x85ba <pick_drop+0x1908>
	else if (__tmp > 65535)
    84d2:	ce 01       	movw	r24, r28
    84d4:	89 52       	subi	r24, 0x29	; 41
    84d6:	9f 4f       	sbci	r25, 0xFF	; 255
    84d8:	11 e0       	ldi	r17, 0x01	; 1
    84da:	fc 01       	movw	r30, r24
    84dc:	60 81       	ld	r22, Z
    84de:	71 81       	ldd	r23, Z+1	; 0x01
    84e0:	82 81       	ldd	r24, Z+2	; 0x02
    84e2:	93 81       	ldd	r25, Z+3	; 0x03
    84e4:	20 e0       	ldi	r18, 0x00	; 0
    84e6:	3f ef       	ldi	r19, 0xFF	; 255
    84e8:	4f e7       	ldi	r20, 0x7F	; 127
    84ea:	57 e4       	ldi	r21, 0x47	; 71
    84ec:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    84f0:	18 16       	cp	r1, r24
    84f2:	0c f0       	brlt	.+2      	; 0x84f6 <pick_drop+0x1844>
    84f4:	10 e0       	ldi	r17, 0x00	; 0
    84f6:	11 23       	and	r17, r17
    84f8:	09 f4       	brne	.+2      	; 0x84fc <pick_drop+0x184a>
    84fa:	4d c0       	rjmp	.+154    	; 0x8596 <pick_drop+0x18e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    84fc:	ce 01       	movw	r24, r28
    84fe:	8d 52       	subi	r24, 0x2D	; 45
    8500:	9f 4f       	sbci	r25, 0xFF	; 255
    8502:	fc 01       	movw	r30, r24
    8504:	60 81       	ld	r22, Z
    8506:	71 81       	ldd	r23, Z+1	; 0x01
    8508:	82 81       	ldd	r24, Z+2	; 0x02
    850a:	93 81       	ldd	r25, Z+3	; 0x03
    850c:	20 e0       	ldi	r18, 0x00	; 0
    850e:	30 e0       	ldi	r19, 0x00	; 0
    8510:	40 e2       	ldi	r20, 0x20	; 32
    8512:	51 e4       	ldi	r21, 0x41	; 65
    8514:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8518:	dc 01       	movw	r26, r24
    851a:	cb 01       	movw	r24, r22
    851c:	8e 01       	movw	r16, r28
    851e:	05 52       	subi	r16, 0x25	; 37
    8520:	1f 4f       	sbci	r17, 0xFF	; 255
    8522:	bc 01       	movw	r22, r24
    8524:	cd 01       	movw	r24, r26
    8526:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    852a:	dc 01       	movw	r26, r24
    852c:	cb 01       	movw	r24, r22
    852e:	f8 01       	movw	r30, r16
    8530:	91 83       	std	Z+1, r25	; 0x01
    8532:	80 83       	st	Z, r24
    8534:	27 c0       	rjmp	.+78     	; 0x8584 <pick_drop+0x18d2>
    8536:	ce 01       	movw	r24, r28
    8538:	83 52       	subi	r24, 0x23	; 35
    853a:	9f 4f       	sbci	r25, 0xFF	; 255
    853c:	20 e7       	ldi	r18, 0x70	; 112
    853e:	31 e0       	ldi	r19, 0x01	; 1
    8540:	fc 01       	movw	r30, r24
    8542:	31 83       	std	Z+1, r19	; 0x01
    8544:	20 83       	st	Z, r18
    8546:	ce 01       	movw	r24, r28
    8548:	83 52       	subi	r24, 0x23	; 35
    854a:	9f 4f       	sbci	r25, 0xFF	; 255
    854c:	fc 01       	movw	r30, r24
    854e:	80 81       	ld	r24, Z
    8550:	91 81       	ldd	r25, Z+1	; 0x01
    8552:	8c 01       	movw	r16, r24
    8554:	c8 01       	movw	r24, r16
    8556:	01 97       	sbiw	r24, 0x01	; 1
    8558:	f1 f7       	brne	.-4      	; 0x8556 <pick_drop+0x18a4>
    855a:	8c 01       	movw	r16, r24
    855c:	ce 01       	movw	r24, r28
    855e:	83 52       	subi	r24, 0x23	; 35
    8560:	9f 4f       	sbci	r25, 0xFF	; 255
    8562:	fc 01       	movw	r30, r24
    8564:	11 83       	std	Z+1, r17	; 0x01
    8566:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8568:	ce 01       	movw	r24, r28
    856a:	85 52       	subi	r24, 0x25	; 37
    856c:	9f 4f       	sbci	r25, 0xFF	; 255
    856e:	9e 01       	movw	r18, r28
    8570:	25 52       	subi	r18, 0x25	; 37
    8572:	3f 4f       	sbci	r19, 0xFF	; 255
    8574:	f9 01       	movw	r30, r18
    8576:	20 81       	ld	r18, Z
    8578:	31 81       	ldd	r19, Z+1	; 0x01
    857a:	21 50       	subi	r18, 0x01	; 1
    857c:	30 40       	sbci	r19, 0x00	; 0
    857e:	fc 01       	movw	r30, r24
    8580:	31 83       	std	Z+1, r19	; 0x01
    8582:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8584:	ce 01       	movw	r24, r28
    8586:	85 52       	subi	r24, 0x25	; 37
    8588:	9f 4f       	sbci	r25, 0xFF	; 255
    858a:	fc 01       	movw	r30, r24
    858c:	80 81       	ld	r24, Z
    858e:	91 81       	ldd	r25, Z+1	; 0x01
    8590:	00 97       	sbiw	r24, 0x00	; 0
    8592:	89 f6       	brne	.-94     	; 0x8536 <pick_drop+0x1884>
    8594:	2f c0       	rjmp	.+94     	; 0x85f4 <pick_drop+0x1942>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8596:	8e 01       	movw	r16, r28
    8598:	05 52       	subi	r16, 0x25	; 37
    859a:	1f 4f       	sbci	r17, 0xFF	; 255
    859c:	ce 01       	movw	r24, r28
    859e:	89 52       	subi	r24, 0x29	; 41
    85a0:	9f 4f       	sbci	r25, 0xFF	; 255
    85a2:	fc 01       	movw	r30, r24
    85a4:	60 81       	ld	r22, Z
    85a6:	71 81       	ldd	r23, Z+1	; 0x01
    85a8:	82 81       	ldd	r24, Z+2	; 0x02
    85aa:	93 81       	ldd	r25, Z+3	; 0x03
    85ac:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    85b0:	dc 01       	movw	r26, r24
    85b2:	cb 01       	movw	r24, r22
    85b4:	f8 01       	movw	r30, r16
    85b6:	91 83       	std	Z+1, r25	; 0x01
    85b8:	80 83       	st	Z, r24
    85ba:	ce 01       	movw	r24, r28
    85bc:	81 52       	subi	r24, 0x21	; 33
    85be:	9f 4f       	sbci	r25, 0xFF	; 255
    85c0:	9e 01       	movw	r18, r28
    85c2:	25 52       	subi	r18, 0x25	; 37
    85c4:	3f 4f       	sbci	r19, 0xFF	; 255
    85c6:	f9 01       	movw	r30, r18
    85c8:	20 81       	ld	r18, Z
    85ca:	31 81       	ldd	r19, Z+1	; 0x01
    85cc:	fc 01       	movw	r30, r24
    85ce:	31 83       	std	Z+1, r19	; 0x01
    85d0:	20 83       	st	Z, r18
    85d2:	ce 01       	movw	r24, r28
    85d4:	81 52       	subi	r24, 0x21	; 33
    85d6:	9f 4f       	sbci	r25, 0xFF	; 255
    85d8:	fc 01       	movw	r30, r24
    85da:	80 81       	ld	r24, Z
    85dc:	91 81       	ldd	r25, Z+1	; 0x01
    85de:	8c 01       	movw	r16, r24
    85e0:	c8 01       	movw	r24, r16
    85e2:	01 97       	sbiw	r24, 0x01	; 1
    85e4:	f1 f7       	brne	.-4      	; 0x85e2 <pick_drop+0x1930>
    85e6:	8c 01       	movw	r16, r24
    85e8:	ce 01       	movw	r24, r28
    85ea:	81 52       	subi	r24, 0x21	; 33
    85ec:	9f 4f       	sbci	r25, 0xFF	; 255
    85ee:	fc 01       	movw	r30, r24
    85f0:	11 83       	std	Z+1, r17	; 0x01
    85f2:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_right2();
    85f4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    85f8:	9e 01       	movw	r18, r28
    85fa:	2f 51       	subi	r18, 0x1F	; 31
    85fc:	3f 4f       	sbci	r19, 0xFF	; 255
    85fe:	80 e0       	ldi	r24, 0x00	; 0
    8600:	90 e0       	ldi	r25, 0x00	; 0
    8602:	a8 e4       	ldi	r26, 0x48	; 72
    8604:	b2 e4       	ldi	r27, 0x42	; 66
    8606:	f9 01       	movw	r30, r18
    8608:	80 83       	st	Z, r24
    860a:	91 83       	std	Z+1, r25	; 0x01
    860c:	a2 83       	std	Z+2, r26	; 0x02
    860e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8610:	8e 01       	movw	r16, r28
    8612:	0b 51       	subi	r16, 0x1B	; 27
    8614:	1f 4f       	sbci	r17, 0xFF	; 255
    8616:	ce 01       	movw	r24, r28
    8618:	8f 51       	subi	r24, 0x1F	; 31
    861a:	9f 4f       	sbci	r25, 0xFF	; 255
    861c:	fc 01       	movw	r30, r24
    861e:	60 81       	ld	r22, Z
    8620:	71 81       	ldd	r23, Z+1	; 0x01
    8622:	82 81       	ldd	r24, Z+2	; 0x02
    8624:	93 81       	ldd	r25, Z+3	; 0x03
    8626:	26 e6       	ldi	r18, 0x66	; 102
    8628:	36 e6       	ldi	r19, 0x66	; 102
    862a:	46 e6       	ldi	r20, 0x66	; 102
    862c:	55 e4       	ldi	r21, 0x45	; 69
    862e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8632:	dc 01       	movw	r26, r24
    8634:	cb 01       	movw	r24, r22
    8636:	f8 01       	movw	r30, r16
    8638:	80 83       	st	Z, r24
    863a:	91 83       	std	Z+1, r25	; 0x01
    863c:	a2 83       	std	Z+2, r26	; 0x02
    863e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8640:	ce 01       	movw	r24, r28
    8642:	8b 51       	subi	r24, 0x1B	; 27
    8644:	9f 4f       	sbci	r25, 0xFF	; 255
    8646:	11 e0       	ldi	r17, 0x01	; 1
    8648:	fc 01       	movw	r30, r24
    864a:	60 81       	ld	r22, Z
    864c:	71 81       	ldd	r23, Z+1	; 0x01
    864e:	82 81       	ldd	r24, Z+2	; 0x02
    8650:	93 81       	ldd	r25, Z+3	; 0x03
    8652:	20 e0       	ldi	r18, 0x00	; 0
    8654:	30 e0       	ldi	r19, 0x00	; 0
    8656:	40 e8       	ldi	r20, 0x80	; 128
    8658:	5f e3       	ldi	r21, 0x3F	; 63
    865a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    865e:	88 23       	and	r24, r24
    8660:	0c f0       	brlt	.+2      	; 0x8664 <pick_drop+0x19b2>
    8662:	10 e0       	ldi	r17, 0x00	; 0
    8664:	11 23       	and	r17, r17
    8666:	49 f0       	breq	.+18     	; 0x867a <pick_drop+0x19c8>
		__ticks = 1;
    8668:	ce 01       	movw	r24, r28
    866a:	87 51       	subi	r24, 0x17	; 23
    866c:	9f 4f       	sbci	r25, 0xFF	; 255
    866e:	21 e0       	ldi	r18, 0x01	; 1
    8670:	30 e0       	ldi	r19, 0x00	; 0
    8672:	fc 01       	movw	r30, r24
    8674:	31 83       	std	Z+1, r19	; 0x01
    8676:	20 83       	st	Z, r18
    8678:	74 c0       	rjmp	.+232    	; 0x8762 <pick_drop+0x1ab0>
	else if (__tmp > 65535)
    867a:	ce 01       	movw	r24, r28
    867c:	8b 51       	subi	r24, 0x1B	; 27
    867e:	9f 4f       	sbci	r25, 0xFF	; 255
    8680:	11 e0       	ldi	r17, 0x01	; 1
    8682:	fc 01       	movw	r30, r24
    8684:	60 81       	ld	r22, Z
    8686:	71 81       	ldd	r23, Z+1	; 0x01
    8688:	82 81       	ldd	r24, Z+2	; 0x02
    868a:	93 81       	ldd	r25, Z+3	; 0x03
    868c:	20 e0       	ldi	r18, 0x00	; 0
    868e:	3f ef       	ldi	r19, 0xFF	; 255
    8690:	4f e7       	ldi	r20, 0x7F	; 127
    8692:	57 e4       	ldi	r21, 0x47	; 71
    8694:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8698:	18 16       	cp	r1, r24
    869a:	0c f0       	brlt	.+2      	; 0x869e <pick_drop+0x19ec>
    869c:	10 e0       	ldi	r17, 0x00	; 0
    869e:	11 23       	and	r17, r17
    86a0:	09 f4       	brne	.+2      	; 0x86a4 <pick_drop+0x19f2>
    86a2:	4d c0       	rjmp	.+154    	; 0x873e <pick_drop+0x1a8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    86a4:	ce 01       	movw	r24, r28
    86a6:	8f 51       	subi	r24, 0x1F	; 31
    86a8:	9f 4f       	sbci	r25, 0xFF	; 255
    86aa:	fc 01       	movw	r30, r24
    86ac:	60 81       	ld	r22, Z
    86ae:	71 81       	ldd	r23, Z+1	; 0x01
    86b0:	82 81       	ldd	r24, Z+2	; 0x02
    86b2:	93 81       	ldd	r25, Z+3	; 0x03
    86b4:	20 e0       	ldi	r18, 0x00	; 0
    86b6:	30 e0       	ldi	r19, 0x00	; 0
    86b8:	40 e2       	ldi	r20, 0x20	; 32
    86ba:	51 e4       	ldi	r21, 0x41	; 65
    86bc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    86c0:	dc 01       	movw	r26, r24
    86c2:	cb 01       	movw	r24, r22
    86c4:	8e 01       	movw	r16, r28
    86c6:	07 51       	subi	r16, 0x17	; 23
    86c8:	1f 4f       	sbci	r17, 0xFF	; 255
    86ca:	bc 01       	movw	r22, r24
    86cc:	cd 01       	movw	r24, r26
    86ce:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    86d2:	dc 01       	movw	r26, r24
    86d4:	cb 01       	movw	r24, r22
    86d6:	f8 01       	movw	r30, r16
    86d8:	91 83       	std	Z+1, r25	; 0x01
    86da:	80 83       	st	Z, r24
    86dc:	27 c0       	rjmp	.+78     	; 0x872c <pick_drop+0x1a7a>
    86de:	ce 01       	movw	r24, r28
    86e0:	85 51       	subi	r24, 0x15	; 21
    86e2:	9f 4f       	sbci	r25, 0xFF	; 255
    86e4:	20 e7       	ldi	r18, 0x70	; 112
    86e6:	31 e0       	ldi	r19, 0x01	; 1
    86e8:	fc 01       	movw	r30, r24
    86ea:	31 83       	std	Z+1, r19	; 0x01
    86ec:	20 83       	st	Z, r18
    86ee:	ce 01       	movw	r24, r28
    86f0:	85 51       	subi	r24, 0x15	; 21
    86f2:	9f 4f       	sbci	r25, 0xFF	; 255
    86f4:	fc 01       	movw	r30, r24
    86f6:	80 81       	ld	r24, Z
    86f8:	91 81       	ldd	r25, Z+1	; 0x01
    86fa:	8c 01       	movw	r16, r24
    86fc:	c8 01       	movw	r24, r16
    86fe:	01 97       	sbiw	r24, 0x01	; 1
    8700:	f1 f7       	brne	.-4      	; 0x86fe <pick_drop+0x1a4c>
    8702:	8c 01       	movw	r16, r24
    8704:	ce 01       	movw	r24, r28
    8706:	85 51       	subi	r24, 0x15	; 21
    8708:	9f 4f       	sbci	r25, 0xFF	; 255
    870a:	fc 01       	movw	r30, r24
    870c:	11 83       	std	Z+1, r17	; 0x01
    870e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8710:	ce 01       	movw	r24, r28
    8712:	87 51       	subi	r24, 0x17	; 23
    8714:	9f 4f       	sbci	r25, 0xFF	; 255
    8716:	9e 01       	movw	r18, r28
    8718:	27 51       	subi	r18, 0x17	; 23
    871a:	3f 4f       	sbci	r19, 0xFF	; 255
    871c:	f9 01       	movw	r30, r18
    871e:	20 81       	ld	r18, Z
    8720:	31 81       	ldd	r19, Z+1	; 0x01
    8722:	21 50       	subi	r18, 0x01	; 1
    8724:	30 40       	sbci	r19, 0x00	; 0
    8726:	fc 01       	movw	r30, r24
    8728:	31 83       	std	Z+1, r19	; 0x01
    872a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    872c:	ce 01       	movw	r24, r28
    872e:	87 51       	subi	r24, 0x17	; 23
    8730:	9f 4f       	sbci	r25, 0xFF	; 255
    8732:	fc 01       	movw	r30, r24
    8734:	80 81       	ld	r24, Z
    8736:	91 81       	ldd	r25, Z+1	; 0x01
    8738:	00 97       	sbiw	r24, 0x00	; 0
    873a:	89 f6       	brne	.-94     	; 0x86de <pick_drop+0x1a2c>
    873c:	2f c0       	rjmp	.+94     	; 0x879c <pick_drop+0x1aea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    873e:	8e 01       	movw	r16, r28
    8740:	07 51       	subi	r16, 0x17	; 23
    8742:	1f 4f       	sbci	r17, 0xFF	; 255
    8744:	ce 01       	movw	r24, r28
    8746:	8b 51       	subi	r24, 0x1B	; 27
    8748:	9f 4f       	sbci	r25, 0xFF	; 255
    874a:	fc 01       	movw	r30, r24
    874c:	60 81       	ld	r22, Z
    874e:	71 81       	ldd	r23, Z+1	; 0x01
    8750:	82 81       	ldd	r24, Z+2	; 0x02
    8752:	93 81       	ldd	r25, Z+3	; 0x03
    8754:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8758:	dc 01       	movw	r26, r24
    875a:	cb 01       	movw	r24, r22
    875c:	f8 01       	movw	r30, r16
    875e:	91 83       	std	Z+1, r25	; 0x01
    8760:	80 83       	st	Z, r24
    8762:	ce 01       	movw	r24, r28
    8764:	83 51       	subi	r24, 0x13	; 19
    8766:	9f 4f       	sbci	r25, 0xFF	; 255
    8768:	9e 01       	movw	r18, r28
    876a:	27 51       	subi	r18, 0x17	; 23
    876c:	3f 4f       	sbci	r19, 0xFF	; 255
    876e:	f9 01       	movw	r30, r18
    8770:	20 81       	ld	r18, Z
    8772:	31 81       	ldd	r19, Z+1	; 0x01
    8774:	fc 01       	movw	r30, r24
    8776:	31 83       	std	Z+1, r19	; 0x01
    8778:	20 83       	st	Z, r18
    877a:	ce 01       	movw	r24, r28
    877c:	83 51       	subi	r24, 0x13	; 19
    877e:	9f 4f       	sbci	r25, 0xFF	; 255
    8780:	fc 01       	movw	r30, r24
    8782:	80 81       	ld	r24, Z
    8784:	91 81       	ldd	r25, Z+1	; 0x01
    8786:	8c 01       	movw	r16, r24
    8788:	c8 01       	movw	r24, r16
    878a:	01 97       	sbiw	r24, 0x01	; 1
    878c:	f1 f7       	brne	.-4      	; 0x878a <pick_drop+0x1ad8>
    878e:	8c 01       	movw	r16, r24
    8790:	ce 01       	movw	r24, r28
    8792:	83 51       	subi	r24, 0x13	; 19
    8794:	9f 4f       	sbci	r25, 0xFF	; 255
    8796:	fc 01       	movw	r30, r24
    8798:	11 83       	std	Z+1, r17	; 0x01
    879a:	00 83       	st	Z, r16
		_delay_ms(50);
		front();
    879c:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    87a0:	9e 01       	movw	r18, r28
    87a2:	21 51       	subi	r18, 0x11	; 17
    87a4:	3f 4f       	sbci	r19, 0xFF	; 255
    87a6:	80 e0       	ldi	r24, 0x00	; 0
    87a8:	90 e0       	ldi	r25, 0x00	; 0
    87aa:	a8 ec       	ldi	r26, 0xC8	; 200
    87ac:	b2 e4       	ldi	r27, 0x42	; 66
    87ae:	f9 01       	movw	r30, r18
    87b0:	80 83       	st	Z, r24
    87b2:	91 83       	std	Z+1, r25	; 0x01
    87b4:	a2 83       	std	Z+2, r26	; 0x02
    87b6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    87b8:	8e 01       	movw	r16, r28
    87ba:	0d 50       	subi	r16, 0x0D	; 13
    87bc:	1f 4f       	sbci	r17, 0xFF	; 255
    87be:	ce 01       	movw	r24, r28
    87c0:	81 51       	subi	r24, 0x11	; 17
    87c2:	9f 4f       	sbci	r25, 0xFF	; 255
    87c4:	fc 01       	movw	r30, r24
    87c6:	60 81       	ld	r22, Z
    87c8:	71 81       	ldd	r23, Z+1	; 0x01
    87ca:	82 81       	ldd	r24, Z+2	; 0x02
    87cc:	93 81       	ldd	r25, Z+3	; 0x03
    87ce:	26 e6       	ldi	r18, 0x66	; 102
    87d0:	36 e6       	ldi	r19, 0x66	; 102
    87d2:	46 e6       	ldi	r20, 0x66	; 102
    87d4:	55 e4       	ldi	r21, 0x45	; 69
    87d6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    87da:	dc 01       	movw	r26, r24
    87dc:	cb 01       	movw	r24, r22
    87de:	f8 01       	movw	r30, r16
    87e0:	80 83       	st	Z, r24
    87e2:	91 83       	std	Z+1, r25	; 0x01
    87e4:	a2 83       	std	Z+2, r26	; 0x02
    87e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    87e8:	ce 01       	movw	r24, r28
    87ea:	8d 50       	subi	r24, 0x0D	; 13
    87ec:	9f 4f       	sbci	r25, 0xFF	; 255
    87ee:	11 e0       	ldi	r17, 0x01	; 1
    87f0:	fc 01       	movw	r30, r24
    87f2:	60 81       	ld	r22, Z
    87f4:	71 81       	ldd	r23, Z+1	; 0x01
    87f6:	82 81       	ldd	r24, Z+2	; 0x02
    87f8:	93 81       	ldd	r25, Z+3	; 0x03
    87fa:	20 e0       	ldi	r18, 0x00	; 0
    87fc:	30 e0       	ldi	r19, 0x00	; 0
    87fe:	40 e8       	ldi	r20, 0x80	; 128
    8800:	5f e3       	ldi	r21, 0x3F	; 63
    8802:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    8806:	88 23       	and	r24, r24
    8808:	0c f0       	brlt	.+2      	; 0x880c <pick_drop+0x1b5a>
    880a:	10 e0       	ldi	r17, 0x00	; 0
    880c:	11 23       	and	r17, r17
    880e:	49 f0       	breq	.+18     	; 0x8822 <pick_drop+0x1b70>
		__ticks = 1;
    8810:	ce 01       	movw	r24, r28
    8812:	89 50       	subi	r24, 0x09	; 9
    8814:	9f 4f       	sbci	r25, 0xFF	; 255
    8816:	21 e0       	ldi	r18, 0x01	; 1
    8818:	30 e0       	ldi	r19, 0x00	; 0
    881a:	fc 01       	movw	r30, r24
    881c:	31 83       	std	Z+1, r19	; 0x01
    881e:	20 83       	st	Z, r18
    8820:	74 c0       	rjmp	.+232    	; 0x890a <pick_drop+0x1c58>
	else if (__tmp > 65535)
    8822:	ce 01       	movw	r24, r28
    8824:	8d 50       	subi	r24, 0x0D	; 13
    8826:	9f 4f       	sbci	r25, 0xFF	; 255
    8828:	11 e0       	ldi	r17, 0x01	; 1
    882a:	fc 01       	movw	r30, r24
    882c:	60 81       	ld	r22, Z
    882e:	71 81       	ldd	r23, Z+1	; 0x01
    8830:	82 81       	ldd	r24, Z+2	; 0x02
    8832:	93 81       	ldd	r25, Z+3	; 0x03
    8834:	20 e0       	ldi	r18, 0x00	; 0
    8836:	3f ef       	ldi	r19, 0xFF	; 255
    8838:	4f e7       	ldi	r20, 0x7F	; 127
    883a:	57 e4       	ldi	r21, 0x47	; 71
    883c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8840:	18 16       	cp	r1, r24
    8842:	0c f0       	brlt	.+2      	; 0x8846 <pick_drop+0x1b94>
    8844:	10 e0       	ldi	r17, 0x00	; 0
    8846:	11 23       	and	r17, r17
    8848:	09 f4       	brne	.+2      	; 0x884c <pick_drop+0x1b9a>
    884a:	4d c0       	rjmp	.+154    	; 0x88e6 <pick_drop+0x1c34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    884c:	ce 01       	movw	r24, r28
    884e:	81 51       	subi	r24, 0x11	; 17
    8850:	9f 4f       	sbci	r25, 0xFF	; 255
    8852:	fc 01       	movw	r30, r24
    8854:	60 81       	ld	r22, Z
    8856:	71 81       	ldd	r23, Z+1	; 0x01
    8858:	82 81       	ldd	r24, Z+2	; 0x02
    885a:	93 81       	ldd	r25, Z+3	; 0x03
    885c:	20 e0       	ldi	r18, 0x00	; 0
    885e:	30 e0       	ldi	r19, 0x00	; 0
    8860:	40 e2       	ldi	r20, 0x20	; 32
    8862:	51 e4       	ldi	r21, 0x41	; 65
    8864:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8868:	dc 01       	movw	r26, r24
    886a:	cb 01       	movw	r24, r22
    886c:	8e 01       	movw	r16, r28
    886e:	09 50       	subi	r16, 0x09	; 9
    8870:	1f 4f       	sbci	r17, 0xFF	; 255
    8872:	bc 01       	movw	r22, r24
    8874:	cd 01       	movw	r24, r26
    8876:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    887a:	dc 01       	movw	r26, r24
    887c:	cb 01       	movw	r24, r22
    887e:	f8 01       	movw	r30, r16
    8880:	91 83       	std	Z+1, r25	; 0x01
    8882:	80 83       	st	Z, r24
    8884:	27 c0       	rjmp	.+78     	; 0x88d4 <pick_drop+0x1c22>
    8886:	ce 01       	movw	r24, r28
    8888:	87 50       	subi	r24, 0x07	; 7
    888a:	9f 4f       	sbci	r25, 0xFF	; 255
    888c:	20 e7       	ldi	r18, 0x70	; 112
    888e:	31 e0       	ldi	r19, 0x01	; 1
    8890:	fc 01       	movw	r30, r24
    8892:	31 83       	std	Z+1, r19	; 0x01
    8894:	20 83       	st	Z, r18
    8896:	ce 01       	movw	r24, r28
    8898:	87 50       	subi	r24, 0x07	; 7
    889a:	9f 4f       	sbci	r25, 0xFF	; 255
    889c:	fc 01       	movw	r30, r24
    889e:	80 81       	ld	r24, Z
    88a0:	91 81       	ldd	r25, Z+1	; 0x01
    88a2:	8c 01       	movw	r16, r24
    88a4:	c8 01       	movw	r24, r16
    88a6:	01 97       	sbiw	r24, 0x01	; 1
    88a8:	f1 f7       	brne	.-4      	; 0x88a6 <pick_drop+0x1bf4>
    88aa:	8c 01       	movw	r16, r24
    88ac:	ce 01       	movw	r24, r28
    88ae:	87 50       	subi	r24, 0x07	; 7
    88b0:	9f 4f       	sbci	r25, 0xFF	; 255
    88b2:	fc 01       	movw	r30, r24
    88b4:	11 83       	std	Z+1, r17	; 0x01
    88b6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    88b8:	ce 01       	movw	r24, r28
    88ba:	89 50       	subi	r24, 0x09	; 9
    88bc:	9f 4f       	sbci	r25, 0xFF	; 255
    88be:	9e 01       	movw	r18, r28
    88c0:	29 50       	subi	r18, 0x09	; 9
    88c2:	3f 4f       	sbci	r19, 0xFF	; 255
    88c4:	f9 01       	movw	r30, r18
    88c6:	20 81       	ld	r18, Z
    88c8:	31 81       	ldd	r19, Z+1	; 0x01
    88ca:	21 50       	subi	r18, 0x01	; 1
    88cc:	30 40       	sbci	r19, 0x00	; 0
    88ce:	fc 01       	movw	r30, r24
    88d0:	31 83       	std	Z+1, r19	; 0x01
    88d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    88d4:	ce 01       	movw	r24, r28
    88d6:	89 50       	subi	r24, 0x09	; 9
    88d8:	9f 4f       	sbci	r25, 0xFF	; 255
    88da:	fc 01       	movw	r30, r24
    88dc:	80 81       	ld	r24, Z
    88de:	91 81       	ldd	r25, Z+1	; 0x01
    88e0:	00 97       	sbiw	r24, 0x00	; 0
    88e2:	89 f6       	brne	.-94     	; 0x8886 <pick_drop+0x1bd4>
    88e4:	2f c0       	rjmp	.+94     	; 0x8944 <pick_drop+0x1c92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    88e6:	8e 01       	movw	r16, r28
    88e8:	09 50       	subi	r16, 0x09	; 9
    88ea:	1f 4f       	sbci	r17, 0xFF	; 255
    88ec:	ce 01       	movw	r24, r28
    88ee:	8d 50       	subi	r24, 0x0D	; 13
    88f0:	9f 4f       	sbci	r25, 0xFF	; 255
    88f2:	fc 01       	movw	r30, r24
    88f4:	60 81       	ld	r22, Z
    88f6:	71 81       	ldd	r23, Z+1	; 0x01
    88f8:	82 81       	ldd	r24, Z+2	; 0x02
    88fa:	93 81       	ldd	r25, Z+3	; 0x03
    88fc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8900:	dc 01       	movw	r26, r24
    8902:	cb 01       	movw	r24, r22
    8904:	f8 01       	movw	r30, r16
    8906:	91 83       	std	Z+1, r25	; 0x01
    8908:	80 83       	st	Z, r24
    890a:	ce 01       	movw	r24, r28
    890c:	85 50       	subi	r24, 0x05	; 5
    890e:	9f 4f       	sbci	r25, 0xFF	; 255
    8910:	9e 01       	movw	r18, r28
    8912:	29 50       	subi	r18, 0x09	; 9
    8914:	3f 4f       	sbci	r19, 0xFF	; 255
    8916:	f9 01       	movw	r30, r18
    8918:	20 81       	ld	r18, Z
    891a:	31 81       	ldd	r19, Z+1	; 0x01
    891c:	fc 01       	movw	r30, r24
    891e:	31 83       	std	Z+1, r19	; 0x01
    8920:	20 83       	st	Z, r18
    8922:	ce 01       	movw	r24, r28
    8924:	85 50       	subi	r24, 0x05	; 5
    8926:	9f 4f       	sbci	r25, 0xFF	; 255
    8928:	fc 01       	movw	r30, r24
    892a:	80 81       	ld	r24, Z
    892c:	91 81       	ldd	r25, Z+1	; 0x01
    892e:	8c 01       	movw	r16, r24
    8930:	c8 01       	movw	r24, r16
    8932:	01 97       	sbiw	r24, 0x01	; 1
    8934:	f1 f7       	brne	.-4      	; 0x8932 <pick_drop+0x1c80>
    8936:	8c 01       	movw	r16, r24
    8938:	ce 01       	movw	r24, r28
    893a:	85 50       	subi	r24, 0x05	; 5
    893c:	9f 4f       	sbci	r25, 0xFF	; 255
    893e:	fc 01       	movw	r30, r24
    8940:	11 83       	std	Z+1, r17	; 0x01
    8942:	00 83       	st	Z, r16
		_delay_ms(100);
		correct_left();
    8944:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
		back_mm(70);
    8948:	86 e4       	ldi	r24, 0x46	; 70
    894a:	90 e0       	ldi	r25, 0x00	; 0
    894c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8950:	9e 01       	movw	r18, r28
    8952:	23 50       	subi	r18, 0x03	; 3
    8954:	3f 4f       	sbci	r19, 0xFF	; 255
    8956:	80 e0       	ldi	r24, 0x00	; 0
    8958:	90 e0       	ldi	r25, 0x00	; 0
    895a:	a0 ea       	ldi	r26, 0xA0	; 160
    895c:	b1 e4       	ldi	r27, 0x41	; 65
    895e:	f9 01       	movw	r30, r18
    8960:	80 83       	st	Z, r24
    8962:	91 83       	std	Z+1, r25	; 0x01
    8964:	a2 83       	std	Z+2, r26	; 0x02
    8966:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8968:	8e 01       	movw	r16, r28
    896a:	0f 5f       	subi	r16, 0xFF	; 255
    896c:	1e 4f       	sbci	r17, 0xFE	; 254
    896e:	ce 01       	movw	r24, r28
    8970:	83 50       	subi	r24, 0x03	; 3
    8972:	9f 4f       	sbci	r25, 0xFF	; 255
    8974:	fc 01       	movw	r30, r24
    8976:	60 81       	ld	r22, Z
    8978:	71 81       	ldd	r23, Z+1	; 0x01
    897a:	82 81       	ldd	r24, Z+2	; 0x02
    897c:	93 81       	ldd	r25, Z+3	; 0x03
    897e:	26 e6       	ldi	r18, 0x66	; 102
    8980:	36 e6       	ldi	r19, 0x66	; 102
    8982:	46 e6       	ldi	r20, 0x66	; 102
    8984:	55 e4       	ldi	r21, 0x45	; 69
    8986:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    898a:	dc 01       	movw	r26, r24
    898c:	cb 01       	movw	r24, r22
    898e:	f8 01       	movw	r30, r16
    8990:	80 83       	st	Z, r24
    8992:	91 83       	std	Z+1, r25	; 0x01
    8994:	a2 83       	std	Z+2, r26	; 0x02
    8996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8998:	ce 01       	movw	r24, r28
    899a:	8f 5f       	subi	r24, 0xFF	; 255
    899c:	9e 4f       	sbci	r25, 0xFE	; 254
    899e:	11 e0       	ldi	r17, 0x01	; 1
    89a0:	fc 01       	movw	r30, r24
    89a2:	60 81       	ld	r22, Z
    89a4:	71 81       	ldd	r23, Z+1	; 0x01
    89a6:	82 81       	ldd	r24, Z+2	; 0x02
    89a8:	93 81       	ldd	r25, Z+3	; 0x03
    89aa:	20 e0       	ldi	r18, 0x00	; 0
    89ac:	30 e0       	ldi	r19, 0x00	; 0
    89ae:	40 e8       	ldi	r20, 0x80	; 128
    89b0:	5f e3       	ldi	r21, 0x3F	; 63
    89b2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    89b6:	88 23       	and	r24, r24
    89b8:	0c f0       	brlt	.+2      	; 0x89bc <pick_drop+0x1d0a>
    89ba:	10 e0       	ldi	r17, 0x00	; 0
    89bc:	11 23       	and	r17, r17
    89be:	49 f0       	breq	.+18     	; 0x89d2 <pick_drop+0x1d20>
		__ticks = 1;
    89c0:	ce 01       	movw	r24, r28
    89c2:	8b 5f       	subi	r24, 0xFB	; 251
    89c4:	9e 4f       	sbci	r25, 0xFE	; 254
    89c6:	21 e0       	ldi	r18, 0x01	; 1
    89c8:	30 e0       	ldi	r19, 0x00	; 0
    89ca:	fc 01       	movw	r30, r24
    89cc:	31 83       	std	Z+1, r19	; 0x01
    89ce:	20 83       	st	Z, r18
    89d0:	74 c0       	rjmp	.+232    	; 0x8aba <pick_drop+0x1e08>
	else if (__tmp > 65535)
    89d2:	ce 01       	movw	r24, r28
    89d4:	8f 5f       	subi	r24, 0xFF	; 255
    89d6:	9e 4f       	sbci	r25, 0xFE	; 254
    89d8:	11 e0       	ldi	r17, 0x01	; 1
    89da:	fc 01       	movw	r30, r24
    89dc:	60 81       	ld	r22, Z
    89de:	71 81       	ldd	r23, Z+1	; 0x01
    89e0:	82 81       	ldd	r24, Z+2	; 0x02
    89e2:	93 81       	ldd	r25, Z+3	; 0x03
    89e4:	20 e0       	ldi	r18, 0x00	; 0
    89e6:	3f ef       	ldi	r19, 0xFF	; 255
    89e8:	4f e7       	ldi	r20, 0x7F	; 127
    89ea:	57 e4       	ldi	r21, 0x47	; 71
    89ec:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    89f0:	18 16       	cp	r1, r24
    89f2:	0c f0       	brlt	.+2      	; 0x89f6 <pick_drop+0x1d44>
    89f4:	10 e0       	ldi	r17, 0x00	; 0
    89f6:	11 23       	and	r17, r17
    89f8:	09 f4       	brne	.+2      	; 0x89fc <pick_drop+0x1d4a>
    89fa:	4d c0       	rjmp	.+154    	; 0x8a96 <pick_drop+0x1de4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    89fc:	ce 01       	movw	r24, r28
    89fe:	83 50       	subi	r24, 0x03	; 3
    8a00:	9f 4f       	sbci	r25, 0xFF	; 255
    8a02:	fc 01       	movw	r30, r24
    8a04:	60 81       	ld	r22, Z
    8a06:	71 81       	ldd	r23, Z+1	; 0x01
    8a08:	82 81       	ldd	r24, Z+2	; 0x02
    8a0a:	93 81       	ldd	r25, Z+3	; 0x03
    8a0c:	20 e0       	ldi	r18, 0x00	; 0
    8a0e:	30 e0       	ldi	r19, 0x00	; 0
    8a10:	40 e2       	ldi	r20, 0x20	; 32
    8a12:	51 e4       	ldi	r21, 0x41	; 65
    8a14:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8a18:	dc 01       	movw	r26, r24
    8a1a:	cb 01       	movw	r24, r22
    8a1c:	8e 01       	movw	r16, r28
    8a1e:	0b 5f       	subi	r16, 0xFB	; 251
    8a20:	1e 4f       	sbci	r17, 0xFE	; 254
    8a22:	bc 01       	movw	r22, r24
    8a24:	cd 01       	movw	r24, r26
    8a26:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8a2a:	dc 01       	movw	r26, r24
    8a2c:	cb 01       	movw	r24, r22
    8a2e:	f8 01       	movw	r30, r16
    8a30:	91 83       	std	Z+1, r25	; 0x01
    8a32:	80 83       	st	Z, r24
    8a34:	27 c0       	rjmp	.+78     	; 0x8a84 <pick_drop+0x1dd2>
    8a36:	ce 01       	movw	r24, r28
    8a38:	89 5f       	subi	r24, 0xF9	; 249
    8a3a:	9e 4f       	sbci	r25, 0xFE	; 254
    8a3c:	20 e7       	ldi	r18, 0x70	; 112
    8a3e:	31 e0       	ldi	r19, 0x01	; 1
    8a40:	fc 01       	movw	r30, r24
    8a42:	31 83       	std	Z+1, r19	; 0x01
    8a44:	20 83       	st	Z, r18
    8a46:	ce 01       	movw	r24, r28
    8a48:	89 5f       	subi	r24, 0xF9	; 249
    8a4a:	9e 4f       	sbci	r25, 0xFE	; 254
    8a4c:	fc 01       	movw	r30, r24
    8a4e:	80 81       	ld	r24, Z
    8a50:	91 81       	ldd	r25, Z+1	; 0x01
    8a52:	8c 01       	movw	r16, r24
    8a54:	c8 01       	movw	r24, r16
    8a56:	01 97       	sbiw	r24, 0x01	; 1
    8a58:	f1 f7       	brne	.-4      	; 0x8a56 <pick_drop+0x1da4>
    8a5a:	8c 01       	movw	r16, r24
    8a5c:	ce 01       	movw	r24, r28
    8a5e:	89 5f       	subi	r24, 0xF9	; 249
    8a60:	9e 4f       	sbci	r25, 0xFE	; 254
    8a62:	fc 01       	movw	r30, r24
    8a64:	11 83       	std	Z+1, r17	; 0x01
    8a66:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8a68:	ce 01       	movw	r24, r28
    8a6a:	8b 5f       	subi	r24, 0xFB	; 251
    8a6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8a6e:	9e 01       	movw	r18, r28
    8a70:	2b 5f       	subi	r18, 0xFB	; 251
    8a72:	3e 4f       	sbci	r19, 0xFE	; 254
    8a74:	f9 01       	movw	r30, r18
    8a76:	20 81       	ld	r18, Z
    8a78:	31 81       	ldd	r19, Z+1	; 0x01
    8a7a:	21 50       	subi	r18, 0x01	; 1
    8a7c:	30 40       	sbci	r19, 0x00	; 0
    8a7e:	fc 01       	movw	r30, r24
    8a80:	31 83       	std	Z+1, r19	; 0x01
    8a82:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8a84:	ce 01       	movw	r24, r28
    8a86:	8b 5f       	subi	r24, 0xFB	; 251
    8a88:	9e 4f       	sbci	r25, 0xFE	; 254
    8a8a:	fc 01       	movw	r30, r24
    8a8c:	80 81       	ld	r24, Z
    8a8e:	91 81       	ldd	r25, Z+1	; 0x01
    8a90:	00 97       	sbiw	r24, 0x00	; 0
    8a92:	89 f6       	brne	.-94     	; 0x8a36 <pick_drop+0x1d84>
    8a94:	31 c0       	rjmp	.+98     	; 0x8af8 <pick_drop+0x1e46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8a96:	8e 01       	movw	r16, r28
    8a98:	0b 5f       	subi	r16, 0xFB	; 251
    8a9a:	1e 4f       	sbci	r17, 0xFE	; 254
    8a9c:	ce 01       	movw	r24, r28
    8a9e:	8f 5f       	subi	r24, 0xFF	; 255
    8aa0:	9e 4f       	sbci	r25, 0xFE	; 254
    8aa2:	fc 01       	movw	r30, r24
    8aa4:	60 81       	ld	r22, Z
    8aa6:	71 81       	ldd	r23, Z+1	; 0x01
    8aa8:	82 81       	ldd	r24, Z+2	; 0x02
    8aaa:	93 81       	ldd	r25, Z+3	; 0x03
    8aac:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8ab0:	dc 01       	movw	r26, r24
    8ab2:	cb 01       	movw	r24, r22
    8ab4:	f8 01       	movw	r30, r16
    8ab6:	91 83       	std	Z+1, r25	; 0x01
    8ab8:	80 83       	st	Z, r24
    8aba:	ce 01       	movw	r24, r28
    8abc:	87 5f       	subi	r24, 0xF7	; 247
    8abe:	9e 4f       	sbci	r25, 0xFE	; 254
    8ac0:	9e 01       	movw	r18, r28
    8ac2:	2b 5f       	subi	r18, 0xFB	; 251
    8ac4:	3e 4f       	sbci	r19, 0xFE	; 254
    8ac6:	f9 01       	movw	r30, r18
    8ac8:	20 81       	ld	r18, Z
    8aca:	31 81       	ldd	r19, Z+1	; 0x01
    8acc:	fc 01       	movw	r30, r24
    8ace:	31 83       	std	Z+1, r19	; 0x01
    8ad0:	20 83       	st	Z, r18
    8ad2:	ce 01       	movw	r24, r28
    8ad4:	87 5f       	subi	r24, 0xF7	; 247
    8ad6:	9e 4f       	sbci	r25, 0xFE	; 254
    8ad8:	fc 01       	movw	r30, r24
    8ada:	80 81       	ld	r24, Z
    8adc:	91 81       	ldd	r25, Z+1	; 0x01
    8ade:	8c 01       	movw	r16, r24
    8ae0:	c8 01       	movw	r24, r16
    8ae2:	01 97       	sbiw	r24, 0x01	; 1
    8ae4:	f1 f7       	brne	.-4      	; 0x8ae2 <pick_drop+0x1e30>
    8ae6:	8c 01       	movw	r16, r24
    8ae8:	ce 01       	movw	r24, r28
    8aea:	87 5f       	subi	r24, 0xF7	; 247
    8aec:	9e 4f       	sbci	r25, 0xFE	; 254
    8aee:	fc 01       	movw	r30, r24
    8af0:	11 83       	std	Z+1, r17	; 0x01
    8af2:	00 83       	st	Z, r16
		_delay_ms(20);
    8af4:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
    8af8:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
	}
	else if(pd=='1' && master_path[node-1] == 'R')
    8afc:	ce 01       	movw	r24, r28
    8afe:	89 51       	subi	r24, 0x19	; 25
    8b00:	9d 4f       	sbci	r25, 0xFD	; 253
    8b02:	fc 01       	movw	r30, r24
    8b04:	80 81       	ld	r24, Z
    8b06:	81 33       	cpi	r24, 0x31	; 49
    8b08:	09 f0       	breq	.+2      	; 0x8b0c <pick_drop+0x1e5a>
    8b0a:	90 c2       	rjmp	.+1312   	; 0x902c <pick_drop+0x237a>
    8b0c:	80 91 6d 03 	lds	r24, 0x036D
    8b10:	90 91 6e 03 	lds	r25, 0x036E
    8b14:	01 97       	sbiw	r24, 0x01	; 1
    8b16:	8f 58       	subi	r24, 0x8F	; 143
    8b18:	9c 4f       	sbci	r25, 0xFC	; 252
    8b1a:	fc 01       	movw	r30, r24
    8b1c:	80 81       	ld	r24, Z
    8b1e:	82 35       	cpi	r24, 0x52	; 82
    8b20:	09 f0       	breq	.+2      	; 0x8b24 <pick_drop+0x1e72>
    8b22:	84 c2       	rjmp	.+1288   	; 0x902c <pick_drop+0x237a>
	{
		spl_left2();
    8b24:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    8b28:	9e 01       	movw	r18, r28
    8b2a:	25 5f       	subi	r18, 0xF5	; 245
    8b2c:	3e 4f       	sbci	r19, 0xFE	; 254
    8b2e:	80 e0       	ldi	r24, 0x00	; 0
    8b30:	90 e0       	ldi	r25, 0x00	; 0
    8b32:	a8 e4       	ldi	r26, 0x48	; 72
    8b34:	b2 e4       	ldi	r27, 0x42	; 66
    8b36:	f9 01       	movw	r30, r18
    8b38:	80 83       	st	Z, r24
    8b3a:	91 83       	std	Z+1, r25	; 0x01
    8b3c:	a2 83       	std	Z+2, r26	; 0x02
    8b3e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8b40:	8e 01       	movw	r16, r28
    8b42:	01 5f       	subi	r16, 0xF1	; 241
    8b44:	1e 4f       	sbci	r17, 0xFE	; 254
    8b46:	ce 01       	movw	r24, r28
    8b48:	85 5f       	subi	r24, 0xF5	; 245
    8b4a:	9e 4f       	sbci	r25, 0xFE	; 254
    8b4c:	fc 01       	movw	r30, r24
    8b4e:	60 81       	ld	r22, Z
    8b50:	71 81       	ldd	r23, Z+1	; 0x01
    8b52:	82 81       	ldd	r24, Z+2	; 0x02
    8b54:	93 81       	ldd	r25, Z+3	; 0x03
    8b56:	26 e6       	ldi	r18, 0x66	; 102
    8b58:	36 e6       	ldi	r19, 0x66	; 102
    8b5a:	46 e6       	ldi	r20, 0x66	; 102
    8b5c:	55 e4       	ldi	r21, 0x45	; 69
    8b5e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8b62:	dc 01       	movw	r26, r24
    8b64:	cb 01       	movw	r24, r22
    8b66:	f8 01       	movw	r30, r16
    8b68:	80 83       	st	Z, r24
    8b6a:	91 83       	std	Z+1, r25	; 0x01
    8b6c:	a2 83       	std	Z+2, r26	; 0x02
    8b6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8b70:	ce 01       	movw	r24, r28
    8b72:	81 5f       	subi	r24, 0xF1	; 241
    8b74:	9e 4f       	sbci	r25, 0xFE	; 254
    8b76:	11 e0       	ldi	r17, 0x01	; 1
    8b78:	fc 01       	movw	r30, r24
    8b7a:	60 81       	ld	r22, Z
    8b7c:	71 81       	ldd	r23, Z+1	; 0x01
    8b7e:	82 81       	ldd	r24, Z+2	; 0x02
    8b80:	93 81       	ldd	r25, Z+3	; 0x03
    8b82:	20 e0       	ldi	r18, 0x00	; 0
    8b84:	30 e0       	ldi	r19, 0x00	; 0
    8b86:	40 e8       	ldi	r20, 0x80	; 128
    8b88:	5f e3       	ldi	r21, 0x3F	; 63
    8b8a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    8b8e:	88 23       	and	r24, r24
    8b90:	0c f0       	brlt	.+2      	; 0x8b94 <pick_drop+0x1ee2>
    8b92:	10 e0       	ldi	r17, 0x00	; 0
    8b94:	11 23       	and	r17, r17
    8b96:	49 f0       	breq	.+18     	; 0x8baa <pick_drop+0x1ef8>
		__ticks = 1;
    8b98:	ce 01       	movw	r24, r28
    8b9a:	8d 5e       	subi	r24, 0xED	; 237
    8b9c:	9e 4f       	sbci	r25, 0xFE	; 254
    8b9e:	21 e0       	ldi	r18, 0x01	; 1
    8ba0:	30 e0       	ldi	r19, 0x00	; 0
    8ba2:	fc 01       	movw	r30, r24
    8ba4:	31 83       	std	Z+1, r19	; 0x01
    8ba6:	20 83       	st	Z, r18
    8ba8:	74 c0       	rjmp	.+232    	; 0x8c92 <pick_drop+0x1fe0>
	else if (__tmp > 65535)
    8baa:	ce 01       	movw	r24, r28
    8bac:	81 5f       	subi	r24, 0xF1	; 241
    8bae:	9e 4f       	sbci	r25, 0xFE	; 254
    8bb0:	11 e0       	ldi	r17, 0x01	; 1
    8bb2:	fc 01       	movw	r30, r24
    8bb4:	60 81       	ld	r22, Z
    8bb6:	71 81       	ldd	r23, Z+1	; 0x01
    8bb8:	82 81       	ldd	r24, Z+2	; 0x02
    8bba:	93 81       	ldd	r25, Z+3	; 0x03
    8bbc:	20 e0       	ldi	r18, 0x00	; 0
    8bbe:	3f ef       	ldi	r19, 0xFF	; 255
    8bc0:	4f e7       	ldi	r20, 0x7F	; 127
    8bc2:	57 e4       	ldi	r21, 0x47	; 71
    8bc4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8bc8:	18 16       	cp	r1, r24
    8bca:	0c f0       	brlt	.+2      	; 0x8bce <pick_drop+0x1f1c>
    8bcc:	10 e0       	ldi	r17, 0x00	; 0
    8bce:	11 23       	and	r17, r17
    8bd0:	09 f4       	brne	.+2      	; 0x8bd4 <pick_drop+0x1f22>
    8bd2:	4d c0       	rjmp	.+154    	; 0x8c6e <pick_drop+0x1fbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8bd4:	ce 01       	movw	r24, r28
    8bd6:	85 5f       	subi	r24, 0xF5	; 245
    8bd8:	9e 4f       	sbci	r25, 0xFE	; 254
    8bda:	fc 01       	movw	r30, r24
    8bdc:	60 81       	ld	r22, Z
    8bde:	71 81       	ldd	r23, Z+1	; 0x01
    8be0:	82 81       	ldd	r24, Z+2	; 0x02
    8be2:	93 81       	ldd	r25, Z+3	; 0x03
    8be4:	20 e0       	ldi	r18, 0x00	; 0
    8be6:	30 e0       	ldi	r19, 0x00	; 0
    8be8:	40 e2       	ldi	r20, 0x20	; 32
    8bea:	51 e4       	ldi	r21, 0x41	; 65
    8bec:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8bf0:	dc 01       	movw	r26, r24
    8bf2:	cb 01       	movw	r24, r22
    8bf4:	8e 01       	movw	r16, r28
    8bf6:	0d 5e       	subi	r16, 0xED	; 237
    8bf8:	1e 4f       	sbci	r17, 0xFE	; 254
    8bfa:	bc 01       	movw	r22, r24
    8bfc:	cd 01       	movw	r24, r26
    8bfe:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8c02:	dc 01       	movw	r26, r24
    8c04:	cb 01       	movw	r24, r22
    8c06:	f8 01       	movw	r30, r16
    8c08:	91 83       	std	Z+1, r25	; 0x01
    8c0a:	80 83       	st	Z, r24
    8c0c:	27 c0       	rjmp	.+78     	; 0x8c5c <pick_drop+0x1faa>
    8c0e:	ce 01       	movw	r24, r28
    8c10:	8b 5e       	subi	r24, 0xEB	; 235
    8c12:	9e 4f       	sbci	r25, 0xFE	; 254
    8c14:	20 e7       	ldi	r18, 0x70	; 112
    8c16:	31 e0       	ldi	r19, 0x01	; 1
    8c18:	fc 01       	movw	r30, r24
    8c1a:	31 83       	std	Z+1, r19	; 0x01
    8c1c:	20 83       	st	Z, r18
    8c1e:	ce 01       	movw	r24, r28
    8c20:	8b 5e       	subi	r24, 0xEB	; 235
    8c22:	9e 4f       	sbci	r25, 0xFE	; 254
    8c24:	fc 01       	movw	r30, r24
    8c26:	80 81       	ld	r24, Z
    8c28:	91 81       	ldd	r25, Z+1	; 0x01
    8c2a:	8c 01       	movw	r16, r24
    8c2c:	c8 01       	movw	r24, r16
    8c2e:	01 97       	sbiw	r24, 0x01	; 1
    8c30:	f1 f7       	brne	.-4      	; 0x8c2e <pick_drop+0x1f7c>
    8c32:	8c 01       	movw	r16, r24
    8c34:	ce 01       	movw	r24, r28
    8c36:	8b 5e       	subi	r24, 0xEB	; 235
    8c38:	9e 4f       	sbci	r25, 0xFE	; 254
    8c3a:	fc 01       	movw	r30, r24
    8c3c:	11 83       	std	Z+1, r17	; 0x01
    8c3e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8c40:	ce 01       	movw	r24, r28
    8c42:	8d 5e       	subi	r24, 0xED	; 237
    8c44:	9e 4f       	sbci	r25, 0xFE	; 254
    8c46:	9e 01       	movw	r18, r28
    8c48:	2d 5e       	subi	r18, 0xED	; 237
    8c4a:	3e 4f       	sbci	r19, 0xFE	; 254
    8c4c:	f9 01       	movw	r30, r18
    8c4e:	20 81       	ld	r18, Z
    8c50:	31 81       	ldd	r19, Z+1	; 0x01
    8c52:	21 50       	subi	r18, 0x01	; 1
    8c54:	30 40       	sbci	r19, 0x00	; 0
    8c56:	fc 01       	movw	r30, r24
    8c58:	31 83       	std	Z+1, r19	; 0x01
    8c5a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8c5c:	ce 01       	movw	r24, r28
    8c5e:	8d 5e       	subi	r24, 0xED	; 237
    8c60:	9e 4f       	sbci	r25, 0xFE	; 254
    8c62:	fc 01       	movw	r30, r24
    8c64:	80 81       	ld	r24, Z
    8c66:	91 81       	ldd	r25, Z+1	; 0x01
    8c68:	00 97       	sbiw	r24, 0x00	; 0
    8c6a:	89 f6       	brne	.-94     	; 0x8c0e <pick_drop+0x1f5c>
    8c6c:	2f c0       	rjmp	.+94     	; 0x8ccc <pick_drop+0x201a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8c6e:	8e 01       	movw	r16, r28
    8c70:	0d 5e       	subi	r16, 0xED	; 237
    8c72:	1e 4f       	sbci	r17, 0xFE	; 254
    8c74:	ce 01       	movw	r24, r28
    8c76:	81 5f       	subi	r24, 0xF1	; 241
    8c78:	9e 4f       	sbci	r25, 0xFE	; 254
    8c7a:	fc 01       	movw	r30, r24
    8c7c:	60 81       	ld	r22, Z
    8c7e:	71 81       	ldd	r23, Z+1	; 0x01
    8c80:	82 81       	ldd	r24, Z+2	; 0x02
    8c82:	93 81       	ldd	r25, Z+3	; 0x03
    8c84:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8c88:	dc 01       	movw	r26, r24
    8c8a:	cb 01       	movw	r24, r22
    8c8c:	f8 01       	movw	r30, r16
    8c8e:	91 83       	std	Z+1, r25	; 0x01
    8c90:	80 83       	st	Z, r24
    8c92:	ce 01       	movw	r24, r28
    8c94:	89 5e       	subi	r24, 0xE9	; 233
    8c96:	9e 4f       	sbci	r25, 0xFE	; 254
    8c98:	9e 01       	movw	r18, r28
    8c9a:	2d 5e       	subi	r18, 0xED	; 237
    8c9c:	3e 4f       	sbci	r19, 0xFE	; 254
    8c9e:	f9 01       	movw	r30, r18
    8ca0:	20 81       	ld	r18, Z
    8ca2:	31 81       	ldd	r19, Z+1	; 0x01
    8ca4:	fc 01       	movw	r30, r24
    8ca6:	31 83       	std	Z+1, r19	; 0x01
    8ca8:	20 83       	st	Z, r18
    8caa:	ce 01       	movw	r24, r28
    8cac:	89 5e       	subi	r24, 0xE9	; 233
    8cae:	9e 4f       	sbci	r25, 0xFE	; 254
    8cb0:	fc 01       	movw	r30, r24
    8cb2:	80 81       	ld	r24, Z
    8cb4:	91 81       	ldd	r25, Z+1	; 0x01
    8cb6:	8c 01       	movw	r16, r24
    8cb8:	c8 01       	movw	r24, r16
    8cba:	01 97       	sbiw	r24, 0x01	; 1
    8cbc:	f1 f7       	brne	.-4      	; 0x8cba <pick_drop+0x2008>
    8cbe:	8c 01       	movw	r16, r24
    8cc0:	ce 01       	movw	r24, r28
    8cc2:	89 5e       	subi	r24, 0xE9	; 233
    8cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    8cc6:	fc 01       	movw	r30, r24
    8cc8:	11 83       	std	Z+1, r17	; 0x01
    8cca:	00 83       	st	Z, r16
		_delay_ms(50);
		front();
    8ccc:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    8cd0:	9e 01       	movw	r18, r28
    8cd2:	27 5e       	subi	r18, 0xE7	; 231
    8cd4:	3e 4f       	sbci	r19, 0xFE	; 254
    8cd6:	80 e0       	ldi	r24, 0x00	; 0
    8cd8:	90 e0       	ldi	r25, 0x00	; 0
    8cda:	a8 ec       	ldi	r26, 0xC8	; 200
    8cdc:	b2 e4       	ldi	r27, 0x42	; 66
    8cde:	f9 01       	movw	r30, r18
    8ce0:	80 83       	st	Z, r24
    8ce2:	91 83       	std	Z+1, r25	; 0x01
    8ce4:	a2 83       	std	Z+2, r26	; 0x02
    8ce6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8ce8:	8e 01       	movw	r16, r28
    8cea:	03 5e       	subi	r16, 0xE3	; 227
    8cec:	1e 4f       	sbci	r17, 0xFE	; 254
    8cee:	ce 01       	movw	r24, r28
    8cf0:	87 5e       	subi	r24, 0xE7	; 231
    8cf2:	9e 4f       	sbci	r25, 0xFE	; 254
    8cf4:	fc 01       	movw	r30, r24
    8cf6:	60 81       	ld	r22, Z
    8cf8:	71 81       	ldd	r23, Z+1	; 0x01
    8cfa:	82 81       	ldd	r24, Z+2	; 0x02
    8cfc:	93 81       	ldd	r25, Z+3	; 0x03
    8cfe:	26 e6       	ldi	r18, 0x66	; 102
    8d00:	36 e6       	ldi	r19, 0x66	; 102
    8d02:	46 e6       	ldi	r20, 0x66	; 102
    8d04:	55 e4       	ldi	r21, 0x45	; 69
    8d06:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8d0a:	dc 01       	movw	r26, r24
    8d0c:	cb 01       	movw	r24, r22
    8d0e:	f8 01       	movw	r30, r16
    8d10:	80 83       	st	Z, r24
    8d12:	91 83       	std	Z+1, r25	; 0x01
    8d14:	a2 83       	std	Z+2, r26	; 0x02
    8d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8d18:	ce 01       	movw	r24, r28
    8d1a:	83 5e       	subi	r24, 0xE3	; 227
    8d1c:	9e 4f       	sbci	r25, 0xFE	; 254
    8d1e:	11 e0       	ldi	r17, 0x01	; 1
    8d20:	fc 01       	movw	r30, r24
    8d22:	60 81       	ld	r22, Z
    8d24:	71 81       	ldd	r23, Z+1	; 0x01
    8d26:	82 81       	ldd	r24, Z+2	; 0x02
    8d28:	93 81       	ldd	r25, Z+3	; 0x03
    8d2a:	20 e0       	ldi	r18, 0x00	; 0
    8d2c:	30 e0       	ldi	r19, 0x00	; 0
    8d2e:	40 e8       	ldi	r20, 0x80	; 128
    8d30:	5f e3       	ldi	r21, 0x3F	; 63
    8d32:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    8d36:	88 23       	and	r24, r24
    8d38:	0c f0       	brlt	.+2      	; 0x8d3c <pick_drop+0x208a>
    8d3a:	10 e0       	ldi	r17, 0x00	; 0
    8d3c:	11 23       	and	r17, r17
    8d3e:	49 f0       	breq	.+18     	; 0x8d52 <pick_drop+0x20a0>
		__ticks = 1;
    8d40:	ce 01       	movw	r24, r28
    8d42:	8f 5d       	subi	r24, 0xDF	; 223
    8d44:	9e 4f       	sbci	r25, 0xFE	; 254
    8d46:	21 e0       	ldi	r18, 0x01	; 1
    8d48:	30 e0       	ldi	r19, 0x00	; 0
    8d4a:	fc 01       	movw	r30, r24
    8d4c:	31 83       	std	Z+1, r19	; 0x01
    8d4e:	20 83       	st	Z, r18
    8d50:	74 c0       	rjmp	.+232    	; 0x8e3a <pick_drop+0x2188>
	else if (__tmp > 65535)
    8d52:	ce 01       	movw	r24, r28
    8d54:	83 5e       	subi	r24, 0xE3	; 227
    8d56:	9e 4f       	sbci	r25, 0xFE	; 254
    8d58:	11 e0       	ldi	r17, 0x01	; 1
    8d5a:	fc 01       	movw	r30, r24
    8d5c:	60 81       	ld	r22, Z
    8d5e:	71 81       	ldd	r23, Z+1	; 0x01
    8d60:	82 81       	ldd	r24, Z+2	; 0x02
    8d62:	93 81       	ldd	r25, Z+3	; 0x03
    8d64:	20 e0       	ldi	r18, 0x00	; 0
    8d66:	3f ef       	ldi	r19, 0xFF	; 255
    8d68:	4f e7       	ldi	r20, 0x7F	; 127
    8d6a:	57 e4       	ldi	r21, 0x47	; 71
    8d6c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8d70:	18 16       	cp	r1, r24
    8d72:	0c f0       	brlt	.+2      	; 0x8d76 <pick_drop+0x20c4>
    8d74:	10 e0       	ldi	r17, 0x00	; 0
    8d76:	11 23       	and	r17, r17
    8d78:	09 f4       	brne	.+2      	; 0x8d7c <pick_drop+0x20ca>
    8d7a:	4d c0       	rjmp	.+154    	; 0x8e16 <pick_drop+0x2164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8d7c:	ce 01       	movw	r24, r28
    8d7e:	87 5e       	subi	r24, 0xE7	; 231
    8d80:	9e 4f       	sbci	r25, 0xFE	; 254
    8d82:	fc 01       	movw	r30, r24
    8d84:	60 81       	ld	r22, Z
    8d86:	71 81       	ldd	r23, Z+1	; 0x01
    8d88:	82 81       	ldd	r24, Z+2	; 0x02
    8d8a:	93 81       	ldd	r25, Z+3	; 0x03
    8d8c:	20 e0       	ldi	r18, 0x00	; 0
    8d8e:	30 e0       	ldi	r19, 0x00	; 0
    8d90:	40 e2       	ldi	r20, 0x20	; 32
    8d92:	51 e4       	ldi	r21, 0x41	; 65
    8d94:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8d98:	dc 01       	movw	r26, r24
    8d9a:	cb 01       	movw	r24, r22
    8d9c:	8e 01       	movw	r16, r28
    8d9e:	0f 5d       	subi	r16, 0xDF	; 223
    8da0:	1e 4f       	sbci	r17, 0xFE	; 254
    8da2:	bc 01       	movw	r22, r24
    8da4:	cd 01       	movw	r24, r26
    8da6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8daa:	dc 01       	movw	r26, r24
    8dac:	cb 01       	movw	r24, r22
    8dae:	f8 01       	movw	r30, r16
    8db0:	91 83       	std	Z+1, r25	; 0x01
    8db2:	80 83       	st	Z, r24
    8db4:	27 c0       	rjmp	.+78     	; 0x8e04 <pick_drop+0x2152>
    8db6:	ce 01       	movw	r24, r28
    8db8:	8d 5d       	subi	r24, 0xDD	; 221
    8dba:	9e 4f       	sbci	r25, 0xFE	; 254
    8dbc:	20 e7       	ldi	r18, 0x70	; 112
    8dbe:	31 e0       	ldi	r19, 0x01	; 1
    8dc0:	fc 01       	movw	r30, r24
    8dc2:	31 83       	std	Z+1, r19	; 0x01
    8dc4:	20 83       	st	Z, r18
    8dc6:	ce 01       	movw	r24, r28
    8dc8:	8d 5d       	subi	r24, 0xDD	; 221
    8dca:	9e 4f       	sbci	r25, 0xFE	; 254
    8dcc:	fc 01       	movw	r30, r24
    8dce:	80 81       	ld	r24, Z
    8dd0:	91 81       	ldd	r25, Z+1	; 0x01
    8dd2:	8c 01       	movw	r16, r24
    8dd4:	c8 01       	movw	r24, r16
    8dd6:	01 97       	sbiw	r24, 0x01	; 1
    8dd8:	f1 f7       	brne	.-4      	; 0x8dd6 <pick_drop+0x2124>
    8dda:	8c 01       	movw	r16, r24
    8ddc:	ce 01       	movw	r24, r28
    8dde:	8d 5d       	subi	r24, 0xDD	; 221
    8de0:	9e 4f       	sbci	r25, 0xFE	; 254
    8de2:	fc 01       	movw	r30, r24
    8de4:	11 83       	std	Z+1, r17	; 0x01
    8de6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8de8:	ce 01       	movw	r24, r28
    8dea:	8f 5d       	subi	r24, 0xDF	; 223
    8dec:	9e 4f       	sbci	r25, 0xFE	; 254
    8dee:	9e 01       	movw	r18, r28
    8df0:	2f 5d       	subi	r18, 0xDF	; 223
    8df2:	3e 4f       	sbci	r19, 0xFE	; 254
    8df4:	f9 01       	movw	r30, r18
    8df6:	20 81       	ld	r18, Z
    8df8:	31 81       	ldd	r19, Z+1	; 0x01
    8dfa:	21 50       	subi	r18, 0x01	; 1
    8dfc:	30 40       	sbci	r19, 0x00	; 0
    8dfe:	fc 01       	movw	r30, r24
    8e00:	31 83       	std	Z+1, r19	; 0x01
    8e02:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8e04:	ce 01       	movw	r24, r28
    8e06:	8f 5d       	subi	r24, 0xDF	; 223
    8e08:	9e 4f       	sbci	r25, 0xFE	; 254
    8e0a:	fc 01       	movw	r30, r24
    8e0c:	80 81       	ld	r24, Z
    8e0e:	91 81       	ldd	r25, Z+1	; 0x01
    8e10:	00 97       	sbiw	r24, 0x00	; 0
    8e12:	89 f6       	brne	.-94     	; 0x8db6 <pick_drop+0x2104>
    8e14:	2f c0       	rjmp	.+94     	; 0x8e74 <pick_drop+0x21c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8e16:	8e 01       	movw	r16, r28
    8e18:	0f 5d       	subi	r16, 0xDF	; 223
    8e1a:	1e 4f       	sbci	r17, 0xFE	; 254
    8e1c:	ce 01       	movw	r24, r28
    8e1e:	83 5e       	subi	r24, 0xE3	; 227
    8e20:	9e 4f       	sbci	r25, 0xFE	; 254
    8e22:	fc 01       	movw	r30, r24
    8e24:	60 81       	ld	r22, Z
    8e26:	71 81       	ldd	r23, Z+1	; 0x01
    8e28:	82 81       	ldd	r24, Z+2	; 0x02
    8e2a:	93 81       	ldd	r25, Z+3	; 0x03
    8e2c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8e30:	dc 01       	movw	r26, r24
    8e32:	cb 01       	movw	r24, r22
    8e34:	f8 01       	movw	r30, r16
    8e36:	91 83       	std	Z+1, r25	; 0x01
    8e38:	80 83       	st	Z, r24
    8e3a:	ce 01       	movw	r24, r28
    8e3c:	8b 5d       	subi	r24, 0xDB	; 219
    8e3e:	9e 4f       	sbci	r25, 0xFE	; 254
    8e40:	9e 01       	movw	r18, r28
    8e42:	2f 5d       	subi	r18, 0xDF	; 223
    8e44:	3e 4f       	sbci	r19, 0xFE	; 254
    8e46:	f9 01       	movw	r30, r18
    8e48:	20 81       	ld	r18, Z
    8e4a:	31 81       	ldd	r19, Z+1	; 0x01
    8e4c:	fc 01       	movw	r30, r24
    8e4e:	31 83       	std	Z+1, r19	; 0x01
    8e50:	20 83       	st	Z, r18
    8e52:	ce 01       	movw	r24, r28
    8e54:	8b 5d       	subi	r24, 0xDB	; 219
    8e56:	9e 4f       	sbci	r25, 0xFE	; 254
    8e58:	fc 01       	movw	r30, r24
    8e5a:	80 81       	ld	r24, Z
    8e5c:	91 81       	ldd	r25, Z+1	; 0x01
    8e5e:	8c 01       	movw	r16, r24
    8e60:	c8 01       	movw	r24, r16
    8e62:	01 97       	sbiw	r24, 0x01	; 1
    8e64:	f1 f7       	brne	.-4      	; 0x8e62 <pick_drop+0x21b0>
    8e66:	8c 01       	movw	r16, r24
    8e68:	ce 01       	movw	r24, r28
    8e6a:	8b 5d       	subi	r24, 0xDB	; 219
    8e6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8e6e:	fc 01       	movw	r30, r24
    8e70:	11 83       	std	Z+1, r17	; 0x01
    8e72:	00 83       	st	Z, r16
		_delay_ms(100);
		correct_right();
    8e74:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
		back_mm(70);
    8e78:	86 e4       	ldi	r24, 0x46	; 70
    8e7a:	90 e0       	ldi	r25, 0x00	; 0
    8e7c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8e80:	9e 01       	movw	r18, r28
    8e82:	29 5d       	subi	r18, 0xD9	; 217
    8e84:	3e 4f       	sbci	r19, 0xFE	; 254
    8e86:	80 e0       	ldi	r24, 0x00	; 0
    8e88:	90 e0       	ldi	r25, 0x00	; 0
    8e8a:	a0 ea       	ldi	r26, 0xA0	; 160
    8e8c:	b1 e4       	ldi	r27, 0x41	; 65
    8e8e:	f9 01       	movw	r30, r18
    8e90:	80 83       	st	Z, r24
    8e92:	91 83       	std	Z+1, r25	; 0x01
    8e94:	a2 83       	std	Z+2, r26	; 0x02
    8e96:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8e98:	8e 01       	movw	r16, r28
    8e9a:	05 5d       	subi	r16, 0xD5	; 213
    8e9c:	1e 4f       	sbci	r17, 0xFE	; 254
    8e9e:	ce 01       	movw	r24, r28
    8ea0:	89 5d       	subi	r24, 0xD9	; 217
    8ea2:	9e 4f       	sbci	r25, 0xFE	; 254
    8ea4:	fc 01       	movw	r30, r24
    8ea6:	60 81       	ld	r22, Z
    8ea8:	71 81       	ldd	r23, Z+1	; 0x01
    8eaa:	82 81       	ldd	r24, Z+2	; 0x02
    8eac:	93 81       	ldd	r25, Z+3	; 0x03
    8eae:	26 e6       	ldi	r18, 0x66	; 102
    8eb0:	36 e6       	ldi	r19, 0x66	; 102
    8eb2:	46 e6       	ldi	r20, 0x66	; 102
    8eb4:	55 e4       	ldi	r21, 0x45	; 69
    8eb6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8eba:	dc 01       	movw	r26, r24
    8ebc:	cb 01       	movw	r24, r22
    8ebe:	f8 01       	movw	r30, r16
    8ec0:	80 83       	st	Z, r24
    8ec2:	91 83       	std	Z+1, r25	; 0x01
    8ec4:	a2 83       	std	Z+2, r26	; 0x02
    8ec6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8ec8:	ce 01       	movw	r24, r28
    8eca:	85 5d       	subi	r24, 0xD5	; 213
    8ecc:	9e 4f       	sbci	r25, 0xFE	; 254
    8ece:	11 e0       	ldi	r17, 0x01	; 1
    8ed0:	fc 01       	movw	r30, r24
    8ed2:	60 81       	ld	r22, Z
    8ed4:	71 81       	ldd	r23, Z+1	; 0x01
    8ed6:	82 81       	ldd	r24, Z+2	; 0x02
    8ed8:	93 81       	ldd	r25, Z+3	; 0x03
    8eda:	20 e0       	ldi	r18, 0x00	; 0
    8edc:	30 e0       	ldi	r19, 0x00	; 0
    8ede:	40 e8       	ldi	r20, 0x80	; 128
    8ee0:	5f e3       	ldi	r21, 0x3F	; 63
    8ee2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    8ee6:	88 23       	and	r24, r24
    8ee8:	0c f0       	brlt	.+2      	; 0x8eec <pick_drop+0x223a>
    8eea:	10 e0       	ldi	r17, 0x00	; 0
    8eec:	11 23       	and	r17, r17
    8eee:	49 f0       	breq	.+18     	; 0x8f02 <pick_drop+0x2250>
		__ticks = 1;
    8ef0:	ce 01       	movw	r24, r28
    8ef2:	81 5d       	subi	r24, 0xD1	; 209
    8ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    8ef6:	21 e0       	ldi	r18, 0x01	; 1
    8ef8:	30 e0       	ldi	r19, 0x00	; 0
    8efa:	fc 01       	movw	r30, r24
    8efc:	31 83       	std	Z+1, r19	; 0x01
    8efe:	20 83       	st	Z, r18
    8f00:	74 c0       	rjmp	.+232    	; 0x8fea <pick_drop+0x2338>
	else if (__tmp > 65535)
    8f02:	ce 01       	movw	r24, r28
    8f04:	85 5d       	subi	r24, 0xD5	; 213
    8f06:	9e 4f       	sbci	r25, 0xFE	; 254
    8f08:	11 e0       	ldi	r17, 0x01	; 1
    8f0a:	fc 01       	movw	r30, r24
    8f0c:	60 81       	ld	r22, Z
    8f0e:	71 81       	ldd	r23, Z+1	; 0x01
    8f10:	82 81       	ldd	r24, Z+2	; 0x02
    8f12:	93 81       	ldd	r25, Z+3	; 0x03
    8f14:	20 e0       	ldi	r18, 0x00	; 0
    8f16:	3f ef       	ldi	r19, 0xFF	; 255
    8f18:	4f e7       	ldi	r20, 0x7F	; 127
    8f1a:	57 e4       	ldi	r21, 0x47	; 71
    8f1c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    8f20:	18 16       	cp	r1, r24
    8f22:	0c f0       	brlt	.+2      	; 0x8f26 <pick_drop+0x2274>
    8f24:	10 e0       	ldi	r17, 0x00	; 0
    8f26:	11 23       	and	r17, r17
    8f28:	09 f4       	brne	.+2      	; 0x8f2c <pick_drop+0x227a>
    8f2a:	4d c0       	rjmp	.+154    	; 0x8fc6 <pick_drop+0x2314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8f2c:	ce 01       	movw	r24, r28
    8f2e:	89 5d       	subi	r24, 0xD9	; 217
    8f30:	9e 4f       	sbci	r25, 0xFE	; 254
    8f32:	fc 01       	movw	r30, r24
    8f34:	60 81       	ld	r22, Z
    8f36:	71 81       	ldd	r23, Z+1	; 0x01
    8f38:	82 81       	ldd	r24, Z+2	; 0x02
    8f3a:	93 81       	ldd	r25, Z+3	; 0x03
    8f3c:	20 e0       	ldi	r18, 0x00	; 0
    8f3e:	30 e0       	ldi	r19, 0x00	; 0
    8f40:	40 e2       	ldi	r20, 0x20	; 32
    8f42:	51 e4       	ldi	r21, 0x41	; 65
    8f44:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    8f48:	dc 01       	movw	r26, r24
    8f4a:	cb 01       	movw	r24, r22
    8f4c:	8e 01       	movw	r16, r28
    8f4e:	01 5d       	subi	r16, 0xD1	; 209
    8f50:	1e 4f       	sbci	r17, 0xFE	; 254
    8f52:	bc 01       	movw	r22, r24
    8f54:	cd 01       	movw	r24, r26
    8f56:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8f5a:	dc 01       	movw	r26, r24
    8f5c:	cb 01       	movw	r24, r22
    8f5e:	f8 01       	movw	r30, r16
    8f60:	91 83       	std	Z+1, r25	; 0x01
    8f62:	80 83       	st	Z, r24
    8f64:	27 c0       	rjmp	.+78     	; 0x8fb4 <pick_drop+0x2302>
    8f66:	ce 01       	movw	r24, r28
    8f68:	8f 5c       	subi	r24, 0xCF	; 207
    8f6a:	9e 4f       	sbci	r25, 0xFE	; 254
    8f6c:	20 e7       	ldi	r18, 0x70	; 112
    8f6e:	31 e0       	ldi	r19, 0x01	; 1
    8f70:	fc 01       	movw	r30, r24
    8f72:	31 83       	std	Z+1, r19	; 0x01
    8f74:	20 83       	st	Z, r18
    8f76:	ce 01       	movw	r24, r28
    8f78:	8f 5c       	subi	r24, 0xCF	; 207
    8f7a:	9e 4f       	sbci	r25, 0xFE	; 254
    8f7c:	fc 01       	movw	r30, r24
    8f7e:	80 81       	ld	r24, Z
    8f80:	91 81       	ldd	r25, Z+1	; 0x01
    8f82:	8c 01       	movw	r16, r24
    8f84:	c8 01       	movw	r24, r16
    8f86:	01 97       	sbiw	r24, 0x01	; 1
    8f88:	f1 f7       	brne	.-4      	; 0x8f86 <pick_drop+0x22d4>
    8f8a:	8c 01       	movw	r16, r24
    8f8c:	ce 01       	movw	r24, r28
    8f8e:	8f 5c       	subi	r24, 0xCF	; 207
    8f90:	9e 4f       	sbci	r25, 0xFE	; 254
    8f92:	fc 01       	movw	r30, r24
    8f94:	11 83       	std	Z+1, r17	; 0x01
    8f96:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8f98:	ce 01       	movw	r24, r28
    8f9a:	81 5d       	subi	r24, 0xD1	; 209
    8f9c:	9e 4f       	sbci	r25, 0xFE	; 254
    8f9e:	9e 01       	movw	r18, r28
    8fa0:	21 5d       	subi	r18, 0xD1	; 209
    8fa2:	3e 4f       	sbci	r19, 0xFE	; 254
    8fa4:	f9 01       	movw	r30, r18
    8fa6:	20 81       	ld	r18, Z
    8fa8:	31 81       	ldd	r19, Z+1	; 0x01
    8faa:	21 50       	subi	r18, 0x01	; 1
    8fac:	30 40       	sbci	r19, 0x00	; 0
    8fae:	fc 01       	movw	r30, r24
    8fb0:	31 83       	std	Z+1, r19	; 0x01
    8fb2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8fb4:	ce 01       	movw	r24, r28
    8fb6:	81 5d       	subi	r24, 0xD1	; 209
    8fb8:	9e 4f       	sbci	r25, 0xFE	; 254
    8fba:	fc 01       	movw	r30, r24
    8fbc:	80 81       	ld	r24, Z
    8fbe:	91 81       	ldd	r25, Z+1	; 0x01
    8fc0:	00 97       	sbiw	r24, 0x00	; 0
    8fc2:	89 f6       	brne	.-94     	; 0x8f66 <pick_drop+0x22b4>
    8fc4:	31 c0       	rjmp	.+98     	; 0x9028 <pick_drop+0x2376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8fc6:	8e 01       	movw	r16, r28
    8fc8:	01 5d       	subi	r16, 0xD1	; 209
    8fca:	1e 4f       	sbci	r17, 0xFE	; 254
    8fcc:	ce 01       	movw	r24, r28
    8fce:	85 5d       	subi	r24, 0xD5	; 213
    8fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    8fd2:	fc 01       	movw	r30, r24
    8fd4:	60 81       	ld	r22, Z
    8fd6:	71 81       	ldd	r23, Z+1	; 0x01
    8fd8:	82 81       	ldd	r24, Z+2	; 0x02
    8fda:	93 81       	ldd	r25, Z+3	; 0x03
    8fdc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    8fe0:	dc 01       	movw	r26, r24
    8fe2:	cb 01       	movw	r24, r22
    8fe4:	f8 01       	movw	r30, r16
    8fe6:	91 83       	std	Z+1, r25	; 0x01
    8fe8:	80 83       	st	Z, r24
    8fea:	ce 01       	movw	r24, r28
    8fec:	8d 5c       	subi	r24, 0xCD	; 205
    8fee:	9e 4f       	sbci	r25, 0xFE	; 254
    8ff0:	9e 01       	movw	r18, r28
    8ff2:	21 5d       	subi	r18, 0xD1	; 209
    8ff4:	3e 4f       	sbci	r19, 0xFE	; 254
    8ff6:	f9 01       	movw	r30, r18
    8ff8:	20 81       	ld	r18, Z
    8ffa:	31 81       	ldd	r19, Z+1	; 0x01
    8ffc:	fc 01       	movw	r30, r24
    8ffe:	31 83       	std	Z+1, r19	; 0x01
    9000:	20 83       	st	Z, r18
    9002:	ce 01       	movw	r24, r28
    9004:	8d 5c       	subi	r24, 0xCD	; 205
    9006:	9e 4f       	sbci	r25, 0xFE	; 254
    9008:	fc 01       	movw	r30, r24
    900a:	80 81       	ld	r24, Z
    900c:	91 81       	ldd	r25, Z+1	; 0x01
    900e:	8c 01       	movw	r16, r24
    9010:	c8 01       	movw	r24, r16
    9012:	01 97       	sbiw	r24, 0x01	; 1
    9014:	f1 f7       	brne	.-4      	; 0x9012 <pick_drop+0x2360>
    9016:	8c 01       	movw	r16, r24
    9018:	ce 01       	movw	r24, r28
    901a:	8d 5c       	subi	r24, 0xCD	; 205
    901c:	9e 4f       	sbci	r25, 0xFE	; 254
    901e:	fc 01       	movw	r30, r24
    9020:	11 83       	std	Z+1, r17	; 0x01
    9022:	00 83       	st	Z, r16
		_delay_ms(20);	
    9024:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
    9028:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
	}
	else if(pd=='2' && master_path[node-1] == 'L')
    902c:	ce 01       	movw	r24, r28
    902e:	89 51       	subi	r24, 0x19	; 25
    9030:	9d 4f       	sbci	r25, 0xFD	; 253
    9032:	fc 01       	movw	r30, r24
    9034:	80 81       	ld	r24, Z
    9036:	82 33       	cpi	r24, 0x32	; 50
    9038:	09 f0       	breq	.+2      	; 0x903c <pick_drop+0x238a>
    903a:	90 c2       	rjmp	.+1312   	; 0x955c <pick_drop+0x28aa>
    903c:	80 91 6d 03 	lds	r24, 0x036D
    9040:	90 91 6e 03 	lds	r25, 0x036E
    9044:	01 97       	sbiw	r24, 0x01	; 1
    9046:	8f 58       	subi	r24, 0x8F	; 143
    9048:	9c 4f       	sbci	r25, 0xFC	; 252
    904a:	fc 01       	movw	r30, r24
    904c:	80 81       	ld	r24, Z
    904e:	8c 34       	cpi	r24, 0x4C	; 76
    9050:	09 f0       	breq	.+2      	; 0x9054 <pick_drop+0x23a2>
    9052:	84 c2       	rjmp	.+1288   	; 0x955c <pick_drop+0x28aa>
	{
		spl_right2();
    9054:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    9058:	9e 01       	movw	r18, r28
    905a:	2b 5c       	subi	r18, 0xCB	; 203
    905c:	3e 4f       	sbci	r19, 0xFE	; 254
    905e:	80 e0       	ldi	r24, 0x00	; 0
    9060:	90 e0       	ldi	r25, 0x00	; 0
    9062:	a8 e4       	ldi	r26, 0x48	; 72
    9064:	b2 e4       	ldi	r27, 0x42	; 66
    9066:	f9 01       	movw	r30, r18
    9068:	80 83       	st	Z, r24
    906a:	91 83       	std	Z+1, r25	; 0x01
    906c:	a2 83       	std	Z+2, r26	; 0x02
    906e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9070:	8e 01       	movw	r16, r28
    9072:	07 5c       	subi	r16, 0xC7	; 199
    9074:	1e 4f       	sbci	r17, 0xFE	; 254
    9076:	ce 01       	movw	r24, r28
    9078:	8b 5c       	subi	r24, 0xCB	; 203
    907a:	9e 4f       	sbci	r25, 0xFE	; 254
    907c:	fc 01       	movw	r30, r24
    907e:	60 81       	ld	r22, Z
    9080:	71 81       	ldd	r23, Z+1	; 0x01
    9082:	82 81       	ldd	r24, Z+2	; 0x02
    9084:	93 81       	ldd	r25, Z+3	; 0x03
    9086:	26 e6       	ldi	r18, 0x66	; 102
    9088:	36 e6       	ldi	r19, 0x66	; 102
    908a:	46 e6       	ldi	r20, 0x66	; 102
    908c:	55 e4       	ldi	r21, 0x45	; 69
    908e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9092:	dc 01       	movw	r26, r24
    9094:	cb 01       	movw	r24, r22
    9096:	f8 01       	movw	r30, r16
    9098:	80 83       	st	Z, r24
    909a:	91 83       	std	Z+1, r25	; 0x01
    909c:	a2 83       	std	Z+2, r26	; 0x02
    909e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    90a0:	ce 01       	movw	r24, r28
    90a2:	87 5c       	subi	r24, 0xC7	; 199
    90a4:	9e 4f       	sbci	r25, 0xFE	; 254
    90a6:	11 e0       	ldi	r17, 0x01	; 1
    90a8:	fc 01       	movw	r30, r24
    90aa:	60 81       	ld	r22, Z
    90ac:	71 81       	ldd	r23, Z+1	; 0x01
    90ae:	82 81       	ldd	r24, Z+2	; 0x02
    90b0:	93 81       	ldd	r25, Z+3	; 0x03
    90b2:	20 e0       	ldi	r18, 0x00	; 0
    90b4:	30 e0       	ldi	r19, 0x00	; 0
    90b6:	40 e8       	ldi	r20, 0x80	; 128
    90b8:	5f e3       	ldi	r21, 0x3F	; 63
    90ba:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    90be:	88 23       	and	r24, r24
    90c0:	0c f0       	brlt	.+2      	; 0x90c4 <pick_drop+0x2412>
    90c2:	10 e0       	ldi	r17, 0x00	; 0
    90c4:	11 23       	and	r17, r17
    90c6:	49 f0       	breq	.+18     	; 0x90da <pick_drop+0x2428>
		__ticks = 1;
    90c8:	ce 01       	movw	r24, r28
    90ca:	83 5c       	subi	r24, 0xC3	; 195
    90cc:	9e 4f       	sbci	r25, 0xFE	; 254
    90ce:	21 e0       	ldi	r18, 0x01	; 1
    90d0:	30 e0       	ldi	r19, 0x00	; 0
    90d2:	fc 01       	movw	r30, r24
    90d4:	31 83       	std	Z+1, r19	; 0x01
    90d6:	20 83       	st	Z, r18
    90d8:	74 c0       	rjmp	.+232    	; 0x91c2 <pick_drop+0x2510>
	else if (__tmp > 65535)
    90da:	ce 01       	movw	r24, r28
    90dc:	87 5c       	subi	r24, 0xC7	; 199
    90de:	9e 4f       	sbci	r25, 0xFE	; 254
    90e0:	11 e0       	ldi	r17, 0x01	; 1
    90e2:	fc 01       	movw	r30, r24
    90e4:	60 81       	ld	r22, Z
    90e6:	71 81       	ldd	r23, Z+1	; 0x01
    90e8:	82 81       	ldd	r24, Z+2	; 0x02
    90ea:	93 81       	ldd	r25, Z+3	; 0x03
    90ec:	20 e0       	ldi	r18, 0x00	; 0
    90ee:	3f ef       	ldi	r19, 0xFF	; 255
    90f0:	4f e7       	ldi	r20, 0x7F	; 127
    90f2:	57 e4       	ldi	r21, 0x47	; 71
    90f4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    90f8:	18 16       	cp	r1, r24
    90fa:	0c f0       	brlt	.+2      	; 0x90fe <pick_drop+0x244c>
    90fc:	10 e0       	ldi	r17, 0x00	; 0
    90fe:	11 23       	and	r17, r17
    9100:	09 f4       	brne	.+2      	; 0x9104 <pick_drop+0x2452>
    9102:	4d c0       	rjmp	.+154    	; 0x919e <pick_drop+0x24ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9104:	ce 01       	movw	r24, r28
    9106:	8b 5c       	subi	r24, 0xCB	; 203
    9108:	9e 4f       	sbci	r25, 0xFE	; 254
    910a:	fc 01       	movw	r30, r24
    910c:	60 81       	ld	r22, Z
    910e:	71 81       	ldd	r23, Z+1	; 0x01
    9110:	82 81       	ldd	r24, Z+2	; 0x02
    9112:	93 81       	ldd	r25, Z+3	; 0x03
    9114:	20 e0       	ldi	r18, 0x00	; 0
    9116:	30 e0       	ldi	r19, 0x00	; 0
    9118:	40 e2       	ldi	r20, 0x20	; 32
    911a:	51 e4       	ldi	r21, 0x41	; 65
    911c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9120:	dc 01       	movw	r26, r24
    9122:	cb 01       	movw	r24, r22
    9124:	8e 01       	movw	r16, r28
    9126:	03 5c       	subi	r16, 0xC3	; 195
    9128:	1e 4f       	sbci	r17, 0xFE	; 254
    912a:	bc 01       	movw	r22, r24
    912c:	cd 01       	movw	r24, r26
    912e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9132:	dc 01       	movw	r26, r24
    9134:	cb 01       	movw	r24, r22
    9136:	f8 01       	movw	r30, r16
    9138:	91 83       	std	Z+1, r25	; 0x01
    913a:	80 83       	st	Z, r24
    913c:	27 c0       	rjmp	.+78     	; 0x918c <pick_drop+0x24da>
    913e:	ce 01       	movw	r24, r28
    9140:	81 5c       	subi	r24, 0xC1	; 193
    9142:	9e 4f       	sbci	r25, 0xFE	; 254
    9144:	20 e7       	ldi	r18, 0x70	; 112
    9146:	31 e0       	ldi	r19, 0x01	; 1
    9148:	fc 01       	movw	r30, r24
    914a:	31 83       	std	Z+1, r19	; 0x01
    914c:	20 83       	st	Z, r18
    914e:	ce 01       	movw	r24, r28
    9150:	81 5c       	subi	r24, 0xC1	; 193
    9152:	9e 4f       	sbci	r25, 0xFE	; 254
    9154:	fc 01       	movw	r30, r24
    9156:	80 81       	ld	r24, Z
    9158:	91 81       	ldd	r25, Z+1	; 0x01
    915a:	8c 01       	movw	r16, r24
    915c:	c8 01       	movw	r24, r16
    915e:	01 97       	sbiw	r24, 0x01	; 1
    9160:	f1 f7       	brne	.-4      	; 0x915e <pick_drop+0x24ac>
    9162:	8c 01       	movw	r16, r24
    9164:	ce 01       	movw	r24, r28
    9166:	81 5c       	subi	r24, 0xC1	; 193
    9168:	9e 4f       	sbci	r25, 0xFE	; 254
    916a:	fc 01       	movw	r30, r24
    916c:	11 83       	std	Z+1, r17	; 0x01
    916e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9170:	ce 01       	movw	r24, r28
    9172:	83 5c       	subi	r24, 0xC3	; 195
    9174:	9e 4f       	sbci	r25, 0xFE	; 254
    9176:	9e 01       	movw	r18, r28
    9178:	23 5c       	subi	r18, 0xC3	; 195
    917a:	3e 4f       	sbci	r19, 0xFE	; 254
    917c:	f9 01       	movw	r30, r18
    917e:	20 81       	ld	r18, Z
    9180:	31 81       	ldd	r19, Z+1	; 0x01
    9182:	21 50       	subi	r18, 0x01	; 1
    9184:	30 40       	sbci	r19, 0x00	; 0
    9186:	fc 01       	movw	r30, r24
    9188:	31 83       	std	Z+1, r19	; 0x01
    918a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    918c:	ce 01       	movw	r24, r28
    918e:	83 5c       	subi	r24, 0xC3	; 195
    9190:	9e 4f       	sbci	r25, 0xFE	; 254
    9192:	fc 01       	movw	r30, r24
    9194:	80 81       	ld	r24, Z
    9196:	91 81       	ldd	r25, Z+1	; 0x01
    9198:	00 97       	sbiw	r24, 0x00	; 0
    919a:	89 f6       	brne	.-94     	; 0x913e <pick_drop+0x248c>
    919c:	2f c0       	rjmp	.+94     	; 0x91fc <pick_drop+0x254a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    919e:	8e 01       	movw	r16, r28
    91a0:	03 5c       	subi	r16, 0xC3	; 195
    91a2:	1e 4f       	sbci	r17, 0xFE	; 254
    91a4:	ce 01       	movw	r24, r28
    91a6:	87 5c       	subi	r24, 0xC7	; 199
    91a8:	9e 4f       	sbci	r25, 0xFE	; 254
    91aa:	fc 01       	movw	r30, r24
    91ac:	60 81       	ld	r22, Z
    91ae:	71 81       	ldd	r23, Z+1	; 0x01
    91b0:	82 81       	ldd	r24, Z+2	; 0x02
    91b2:	93 81       	ldd	r25, Z+3	; 0x03
    91b4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    91b8:	dc 01       	movw	r26, r24
    91ba:	cb 01       	movw	r24, r22
    91bc:	f8 01       	movw	r30, r16
    91be:	91 83       	std	Z+1, r25	; 0x01
    91c0:	80 83       	st	Z, r24
    91c2:	ce 01       	movw	r24, r28
    91c4:	8f 5b       	subi	r24, 0xBF	; 191
    91c6:	9e 4f       	sbci	r25, 0xFE	; 254
    91c8:	9e 01       	movw	r18, r28
    91ca:	23 5c       	subi	r18, 0xC3	; 195
    91cc:	3e 4f       	sbci	r19, 0xFE	; 254
    91ce:	f9 01       	movw	r30, r18
    91d0:	20 81       	ld	r18, Z
    91d2:	31 81       	ldd	r19, Z+1	; 0x01
    91d4:	fc 01       	movw	r30, r24
    91d6:	31 83       	std	Z+1, r19	; 0x01
    91d8:	20 83       	st	Z, r18
    91da:	ce 01       	movw	r24, r28
    91dc:	8f 5b       	subi	r24, 0xBF	; 191
    91de:	9e 4f       	sbci	r25, 0xFE	; 254
    91e0:	fc 01       	movw	r30, r24
    91e2:	80 81       	ld	r24, Z
    91e4:	91 81       	ldd	r25, Z+1	; 0x01
    91e6:	8c 01       	movw	r16, r24
    91e8:	c8 01       	movw	r24, r16
    91ea:	01 97       	sbiw	r24, 0x01	; 1
    91ec:	f1 f7       	brne	.-4      	; 0x91ea <pick_drop+0x2538>
    91ee:	8c 01       	movw	r16, r24
    91f0:	ce 01       	movw	r24, r28
    91f2:	8f 5b       	subi	r24, 0xBF	; 191
    91f4:	9e 4f       	sbci	r25, 0xFE	; 254
    91f6:	fc 01       	movw	r30, r24
    91f8:	11 83       	std	Z+1, r17	; 0x01
    91fa:	00 83       	st	Z, r16
		_delay_ms(50);
		front();
    91fc:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    9200:	9e 01       	movw	r18, r28
    9202:	2d 5b       	subi	r18, 0xBD	; 189
    9204:	3e 4f       	sbci	r19, 0xFE	; 254
    9206:	80 e0       	ldi	r24, 0x00	; 0
    9208:	90 e0       	ldi	r25, 0x00	; 0
    920a:	a8 ec       	ldi	r26, 0xC8	; 200
    920c:	b2 e4       	ldi	r27, 0x42	; 66
    920e:	f9 01       	movw	r30, r18
    9210:	80 83       	st	Z, r24
    9212:	91 83       	std	Z+1, r25	; 0x01
    9214:	a2 83       	std	Z+2, r26	; 0x02
    9216:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9218:	8e 01       	movw	r16, r28
    921a:	09 5b       	subi	r16, 0xB9	; 185
    921c:	1e 4f       	sbci	r17, 0xFE	; 254
    921e:	ce 01       	movw	r24, r28
    9220:	8d 5b       	subi	r24, 0xBD	; 189
    9222:	9e 4f       	sbci	r25, 0xFE	; 254
    9224:	fc 01       	movw	r30, r24
    9226:	60 81       	ld	r22, Z
    9228:	71 81       	ldd	r23, Z+1	; 0x01
    922a:	82 81       	ldd	r24, Z+2	; 0x02
    922c:	93 81       	ldd	r25, Z+3	; 0x03
    922e:	26 e6       	ldi	r18, 0x66	; 102
    9230:	36 e6       	ldi	r19, 0x66	; 102
    9232:	46 e6       	ldi	r20, 0x66	; 102
    9234:	55 e4       	ldi	r21, 0x45	; 69
    9236:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    923a:	dc 01       	movw	r26, r24
    923c:	cb 01       	movw	r24, r22
    923e:	f8 01       	movw	r30, r16
    9240:	80 83       	st	Z, r24
    9242:	91 83       	std	Z+1, r25	; 0x01
    9244:	a2 83       	std	Z+2, r26	; 0x02
    9246:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9248:	ce 01       	movw	r24, r28
    924a:	89 5b       	subi	r24, 0xB9	; 185
    924c:	9e 4f       	sbci	r25, 0xFE	; 254
    924e:	11 e0       	ldi	r17, 0x01	; 1
    9250:	fc 01       	movw	r30, r24
    9252:	60 81       	ld	r22, Z
    9254:	71 81       	ldd	r23, Z+1	; 0x01
    9256:	82 81       	ldd	r24, Z+2	; 0x02
    9258:	93 81       	ldd	r25, Z+3	; 0x03
    925a:	20 e0       	ldi	r18, 0x00	; 0
    925c:	30 e0       	ldi	r19, 0x00	; 0
    925e:	40 e8       	ldi	r20, 0x80	; 128
    9260:	5f e3       	ldi	r21, 0x3F	; 63
    9262:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    9266:	88 23       	and	r24, r24
    9268:	0c f0       	brlt	.+2      	; 0x926c <pick_drop+0x25ba>
    926a:	10 e0       	ldi	r17, 0x00	; 0
    926c:	11 23       	and	r17, r17
    926e:	49 f0       	breq	.+18     	; 0x9282 <pick_drop+0x25d0>
		__ticks = 1;
    9270:	ce 01       	movw	r24, r28
    9272:	85 5b       	subi	r24, 0xB5	; 181
    9274:	9e 4f       	sbci	r25, 0xFE	; 254
    9276:	21 e0       	ldi	r18, 0x01	; 1
    9278:	30 e0       	ldi	r19, 0x00	; 0
    927a:	fc 01       	movw	r30, r24
    927c:	31 83       	std	Z+1, r19	; 0x01
    927e:	20 83       	st	Z, r18
    9280:	74 c0       	rjmp	.+232    	; 0x936a <pick_drop+0x26b8>
	else if (__tmp > 65535)
    9282:	ce 01       	movw	r24, r28
    9284:	89 5b       	subi	r24, 0xB9	; 185
    9286:	9e 4f       	sbci	r25, 0xFE	; 254
    9288:	11 e0       	ldi	r17, 0x01	; 1
    928a:	fc 01       	movw	r30, r24
    928c:	60 81       	ld	r22, Z
    928e:	71 81       	ldd	r23, Z+1	; 0x01
    9290:	82 81       	ldd	r24, Z+2	; 0x02
    9292:	93 81       	ldd	r25, Z+3	; 0x03
    9294:	20 e0       	ldi	r18, 0x00	; 0
    9296:	3f ef       	ldi	r19, 0xFF	; 255
    9298:	4f e7       	ldi	r20, 0x7F	; 127
    929a:	57 e4       	ldi	r21, 0x47	; 71
    929c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    92a0:	18 16       	cp	r1, r24
    92a2:	0c f0       	brlt	.+2      	; 0x92a6 <pick_drop+0x25f4>
    92a4:	10 e0       	ldi	r17, 0x00	; 0
    92a6:	11 23       	and	r17, r17
    92a8:	09 f4       	brne	.+2      	; 0x92ac <pick_drop+0x25fa>
    92aa:	4d c0       	rjmp	.+154    	; 0x9346 <pick_drop+0x2694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    92ac:	ce 01       	movw	r24, r28
    92ae:	8d 5b       	subi	r24, 0xBD	; 189
    92b0:	9e 4f       	sbci	r25, 0xFE	; 254
    92b2:	fc 01       	movw	r30, r24
    92b4:	60 81       	ld	r22, Z
    92b6:	71 81       	ldd	r23, Z+1	; 0x01
    92b8:	82 81       	ldd	r24, Z+2	; 0x02
    92ba:	93 81       	ldd	r25, Z+3	; 0x03
    92bc:	20 e0       	ldi	r18, 0x00	; 0
    92be:	30 e0       	ldi	r19, 0x00	; 0
    92c0:	40 e2       	ldi	r20, 0x20	; 32
    92c2:	51 e4       	ldi	r21, 0x41	; 65
    92c4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    92c8:	dc 01       	movw	r26, r24
    92ca:	cb 01       	movw	r24, r22
    92cc:	8e 01       	movw	r16, r28
    92ce:	05 5b       	subi	r16, 0xB5	; 181
    92d0:	1e 4f       	sbci	r17, 0xFE	; 254
    92d2:	bc 01       	movw	r22, r24
    92d4:	cd 01       	movw	r24, r26
    92d6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    92da:	dc 01       	movw	r26, r24
    92dc:	cb 01       	movw	r24, r22
    92de:	f8 01       	movw	r30, r16
    92e0:	91 83       	std	Z+1, r25	; 0x01
    92e2:	80 83       	st	Z, r24
    92e4:	27 c0       	rjmp	.+78     	; 0x9334 <pick_drop+0x2682>
    92e6:	ce 01       	movw	r24, r28
    92e8:	83 5b       	subi	r24, 0xB3	; 179
    92ea:	9e 4f       	sbci	r25, 0xFE	; 254
    92ec:	20 e7       	ldi	r18, 0x70	; 112
    92ee:	31 e0       	ldi	r19, 0x01	; 1
    92f0:	fc 01       	movw	r30, r24
    92f2:	31 83       	std	Z+1, r19	; 0x01
    92f4:	20 83       	st	Z, r18
    92f6:	ce 01       	movw	r24, r28
    92f8:	83 5b       	subi	r24, 0xB3	; 179
    92fa:	9e 4f       	sbci	r25, 0xFE	; 254
    92fc:	fc 01       	movw	r30, r24
    92fe:	80 81       	ld	r24, Z
    9300:	91 81       	ldd	r25, Z+1	; 0x01
    9302:	8c 01       	movw	r16, r24
    9304:	c8 01       	movw	r24, r16
    9306:	01 97       	sbiw	r24, 0x01	; 1
    9308:	f1 f7       	brne	.-4      	; 0x9306 <pick_drop+0x2654>
    930a:	8c 01       	movw	r16, r24
    930c:	ce 01       	movw	r24, r28
    930e:	83 5b       	subi	r24, 0xB3	; 179
    9310:	9e 4f       	sbci	r25, 0xFE	; 254
    9312:	fc 01       	movw	r30, r24
    9314:	11 83       	std	Z+1, r17	; 0x01
    9316:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9318:	ce 01       	movw	r24, r28
    931a:	85 5b       	subi	r24, 0xB5	; 181
    931c:	9e 4f       	sbci	r25, 0xFE	; 254
    931e:	9e 01       	movw	r18, r28
    9320:	25 5b       	subi	r18, 0xB5	; 181
    9322:	3e 4f       	sbci	r19, 0xFE	; 254
    9324:	f9 01       	movw	r30, r18
    9326:	20 81       	ld	r18, Z
    9328:	31 81       	ldd	r19, Z+1	; 0x01
    932a:	21 50       	subi	r18, 0x01	; 1
    932c:	30 40       	sbci	r19, 0x00	; 0
    932e:	fc 01       	movw	r30, r24
    9330:	31 83       	std	Z+1, r19	; 0x01
    9332:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9334:	ce 01       	movw	r24, r28
    9336:	85 5b       	subi	r24, 0xB5	; 181
    9338:	9e 4f       	sbci	r25, 0xFE	; 254
    933a:	fc 01       	movw	r30, r24
    933c:	80 81       	ld	r24, Z
    933e:	91 81       	ldd	r25, Z+1	; 0x01
    9340:	00 97       	sbiw	r24, 0x00	; 0
    9342:	89 f6       	brne	.-94     	; 0x92e6 <pick_drop+0x2634>
    9344:	2f c0       	rjmp	.+94     	; 0x93a4 <pick_drop+0x26f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9346:	8e 01       	movw	r16, r28
    9348:	05 5b       	subi	r16, 0xB5	; 181
    934a:	1e 4f       	sbci	r17, 0xFE	; 254
    934c:	ce 01       	movw	r24, r28
    934e:	89 5b       	subi	r24, 0xB9	; 185
    9350:	9e 4f       	sbci	r25, 0xFE	; 254
    9352:	fc 01       	movw	r30, r24
    9354:	60 81       	ld	r22, Z
    9356:	71 81       	ldd	r23, Z+1	; 0x01
    9358:	82 81       	ldd	r24, Z+2	; 0x02
    935a:	93 81       	ldd	r25, Z+3	; 0x03
    935c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9360:	dc 01       	movw	r26, r24
    9362:	cb 01       	movw	r24, r22
    9364:	f8 01       	movw	r30, r16
    9366:	91 83       	std	Z+1, r25	; 0x01
    9368:	80 83       	st	Z, r24
    936a:	ce 01       	movw	r24, r28
    936c:	81 5b       	subi	r24, 0xB1	; 177
    936e:	9e 4f       	sbci	r25, 0xFE	; 254
    9370:	9e 01       	movw	r18, r28
    9372:	25 5b       	subi	r18, 0xB5	; 181
    9374:	3e 4f       	sbci	r19, 0xFE	; 254
    9376:	f9 01       	movw	r30, r18
    9378:	20 81       	ld	r18, Z
    937a:	31 81       	ldd	r19, Z+1	; 0x01
    937c:	fc 01       	movw	r30, r24
    937e:	31 83       	std	Z+1, r19	; 0x01
    9380:	20 83       	st	Z, r18
    9382:	ce 01       	movw	r24, r28
    9384:	81 5b       	subi	r24, 0xB1	; 177
    9386:	9e 4f       	sbci	r25, 0xFE	; 254
    9388:	fc 01       	movw	r30, r24
    938a:	80 81       	ld	r24, Z
    938c:	91 81       	ldd	r25, Z+1	; 0x01
    938e:	8c 01       	movw	r16, r24
    9390:	c8 01       	movw	r24, r16
    9392:	01 97       	sbiw	r24, 0x01	; 1
    9394:	f1 f7       	brne	.-4      	; 0x9392 <pick_drop+0x26e0>
    9396:	8c 01       	movw	r16, r24
    9398:	ce 01       	movw	r24, r28
    939a:	81 5b       	subi	r24, 0xB1	; 177
    939c:	9e 4f       	sbci	r25, 0xFE	; 254
    939e:	fc 01       	movw	r30, r24
    93a0:	11 83       	std	Z+1, r17	; 0x01
    93a2:	00 83       	st	Z, r16
		_delay_ms(100);
		correct_left();
    93a4:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
		back_mm(70);
    93a8:	86 e4       	ldi	r24, 0x46	; 70
    93aa:	90 e0       	ldi	r25, 0x00	; 0
    93ac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    93b0:	9e 01       	movw	r18, r28
    93b2:	2f 5a       	subi	r18, 0xAF	; 175
    93b4:	3e 4f       	sbci	r19, 0xFE	; 254
    93b6:	80 e0       	ldi	r24, 0x00	; 0
    93b8:	90 e0       	ldi	r25, 0x00	; 0
    93ba:	a0 ea       	ldi	r26, 0xA0	; 160
    93bc:	b1 e4       	ldi	r27, 0x41	; 65
    93be:	f9 01       	movw	r30, r18
    93c0:	80 83       	st	Z, r24
    93c2:	91 83       	std	Z+1, r25	; 0x01
    93c4:	a2 83       	std	Z+2, r26	; 0x02
    93c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    93c8:	8e 01       	movw	r16, r28
    93ca:	0b 5a       	subi	r16, 0xAB	; 171
    93cc:	1e 4f       	sbci	r17, 0xFE	; 254
    93ce:	ce 01       	movw	r24, r28
    93d0:	8f 5a       	subi	r24, 0xAF	; 175
    93d2:	9e 4f       	sbci	r25, 0xFE	; 254
    93d4:	fc 01       	movw	r30, r24
    93d6:	60 81       	ld	r22, Z
    93d8:	71 81       	ldd	r23, Z+1	; 0x01
    93da:	82 81       	ldd	r24, Z+2	; 0x02
    93dc:	93 81       	ldd	r25, Z+3	; 0x03
    93de:	26 e6       	ldi	r18, 0x66	; 102
    93e0:	36 e6       	ldi	r19, 0x66	; 102
    93e2:	46 e6       	ldi	r20, 0x66	; 102
    93e4:	55 e4       	ldi	r21, 0x45	; 69
    93e6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    93ea:	dc 01       	movw	r26, r24
    93ec:	cb 01       	movw	r24, r22
    93ee:	f8 01       	movw	r30, r16
    93f0:	80 83       	st	Z, r24
    93f2:	91 83       	std	Z+1, r25	; 0x01
    93f4:	a2 83       	std	Z+2, r26	; 0x02
    93f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    93f8:	ce 01       	movw	r24, r28
    93fa:	8b 5a       	subi	r24, 0xAB	; 171
    93fc:	9e 4f       	sbci	r25, 0xFE	; 254
    93fe:	11 e0       	ldi	r17, 0x01	; 1
    9400:	fc 01       	movw	r30, r24
    9402:	60 81       	ld	r22, Z
    9404:	71 81       	ldd	r23, Z+1	; 0x01
    9406:	82 81       	ldd	r24, Z+2	; 0x02
    9408:	93 81       	ldd	r25, Z+3	; 0x03
    940a:	20 e0       	ldi	r18, 0x00	; 0
    940c:	30 e0       	ldi	r19, 0x00	; 0
    940e:	40 e8       	ldi	r20, 0x80	; 128
    9410:	5f e3       	ldi	r21, 0x3F	; 63
    9412:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    9416:	88 23       	and	r24, r24
    9418:	0c f0       	brlt	.+2      	; 0x941c <pick_drop+0x276a>
    941a:	10 e0       	ldi	r17, 0x00	; 0
    941c:	11 23       	and	r17, r17
    941e:	49 f0       	breq	.+18     	; 0x9432 <pick_drop+0x2780>
		__ticks = 1;
    9420:	ce 01       	movw	r24, r28
    9422:	87 5a       	subi	r24, 0xA7	; 167
    9424:	9e 4f       	sbci	r25, 0xFE	; 254
    9426:	21 e0       	ldi	r18, 0x01	; 1
    9428:	30 e0       	ldi	r19, 0x00	; 0
    942a:	fc 01       	movw	r30, r24
    942c:	31 83       	std	Z+1, r19	; 0x01
    942e:	20 83       	st	Z, r18
    9430:	74 c0       	rjmp	.+232    	; 0x951a <pick_drop+0x2868>
	else if (__tmp > 65535)
    9432:	ce 01       	movw	r24, r28
    9434:	8b 5a       	subi	r24, 0xAB	; 171
    9436:	9e 4f       	sbci	r25, 0xFE	; 254
    9438:	11 e0       	ldi	r17, 0x01	; 1
    943a:	fc 01       	movw	r30, r24
    943c:	60 81       	ld	r22, Z
    943e:	71 81       	ldd	r23, Z+1	; 0x01
    9440:	82 81       	ldd	r24, Z+2	; 0x02
    9442:	93 81       	ldd	r25, Z+3	; 0x03
    9444:	20 e0       	ldi	r18, 0x00	; 0
    9446:	3f ef       	ldi	r19, 0xFF	; 255
    9448:	4f e7       	ldi	r20, 0x7F	; 127
    944a:	57 e4       	ldi	r21, 0x47	; 71
    944c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    9450:	18 16       	cp	r1, r24
    9452:	0c f0       	brlt	.+2      	; 0x9456 <pick_drop+0x27a4>
    9454:	10 e0       	ldi	r17, 0x00	; 0
    9456:	11 23       	and	r17, r17
    9458:	09 f4       	brne	.+2      	; 0x945c <pick_drop+0x27aa>
    945a:	4d c0       	rjmp	.+154    	; 0x94f6 <pick_drop+0x2844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    945c:	ce 01       	movw	r24, r28
    945e:	8f 5a       	subi	r24, 0xAF	; 175
    9460:	9e 4f       	sbci	r25, 0xFE	; 254
    9462:	fc 01       	movw	r30, r24
    9464:	60 81       	ld	r22, Z
    9466:	71 81       	ldd	r23, Z+1	; 0x01
    9468:	82 81       	ldd	r24, Z+2	; 0x02
    946a:	93 81       	ldd	r25, Z+3	; 0x03
    946c:	20 e0       	ldi	r18, 0x00	; 0
    946e:	30 e0       	ldi	r19, 0x00	; 0
    9470:	40 e2       	ldi	r20, 0x20	; 32
    9472:	51 e4       	ldi	r21, 0x41	; 65
    9474:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9478:	dc 01       	movw	r26, r24
    947a:	cb 01       	movw	r24, r22
    947c:	8e 01       	movw	r16, r28
    947e:	07 5a       	subi	r16, 0xA7	; 167
    9480:	1e 4f       	sbci	r17, 0xFE	; 254
    9482:	bc 01       	movw	r22, r24
    9484:	cd 01       	movw	r24, r26
    9486:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    948a:	dc 01       	movw	r26, r24
    948c:	cb 01       	movw	r24, r22
    948e:	f8 01       	movw	r30, r16
    9490:	91 83       	std	Z+1, r25	; 0x01
    9492:	80 83       	st	Z, r24
    9494:	27 c0       	rjmp	.+78     	; 0x94e4 <pick_drop+0x2832>
    9496:	ce 01       	movw	r24, r28
    9498:	85 5a       	subi	r24, 0xA5	; 165
    949a:	9e 4f       	sbci	r25, 0xFE	; 254
    949c:	20 e7       	ldi	r18, 0x70	; 112
    949e:	31 e0       	ldi	r19, 0x01	; 1
    94a0:	fc 01       	movw	r30, r24
    94a2:	31 83       	std	Z+1, r19	; 0x01
    94a4:	20 83       	st	Z, r18
    94a6:	ce 01       	movw	r24, r28
    94a8:	85 5a       	subi	r24, 0xA5	; 165
    94aa:	9e 4f       	sbci	r25, 0xFE	; 254
    94ac:	fc 01       	movw	r30, r24
    94ae:	80 81       	ld	r24, Z
    94b0:	91 81       	ldd	r25, Z+1	; 0x01
    94b2:	8c 01       	movw	r16, r24
    94b4:	c8 01       	movw	r24, r16
    94b6:	01 97       	sbiw	r24, 0x01	; 1
    94b8:	f1 f7       	brne	.-4      	; 0x94b6 <pick_drop+0x2804>
    94ba:	8c 01       	movw	r16, r24
    94bc:	ce 01       	movw	r24, r28
    94be:	85 5a       	subi	r24, 0xA5	; 165
    94c0:	9e 4f       	sbci	r25, 0xFE	; 254
    94c2:	fc 01       	movw	r30, r24
    94c4:	11 83       	std	Z+1, r17	; 0x01
    94c6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    94c8:	ce 01       	movw	r24, r28
    94ca:	87 5a       	subi	r24, 0xA7	; 167
    94cc:	9e 4f       	sbci	r25, 0xFE	; 254
    94ce:	9e 01       	movw	r18, r28
    94d0:	27 5a       	subi	r18, 0xA7	; 167
    94d2:	3e 4f       	sbci	r19, 0xFE	; 254
    94d4:	f9 01       	movw	r30, r18
    94d6:	20 81       	ld	r18, Z
    94d8:	31 81       	ldd	r19, Z+1	; 0x01
    94da:	21 50       	subi	r18, 0x01	; 1
    94dc:	30 40       	sbci	r19, 0x00	; 0
    94de:	fc 01       	movw	r30, r24
    94e0:	31 83       	std	Z+1, r19	; 0x01
    94e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    94e4:	ce 01       	movw	r24, r28
    94e6:	87 5a       	subi	r24, 0xA7	; 167
    94e8:	9e 4f       	sbci	r25, 0xFE	; 254
    94ea:	fc 01       	movw	r30, r24
    94ec:	80 81       	ld	r24, Z
    94ee:	91 81       	ldd	r25, Z+1	; 0x01
    94f0:	00 97       	sbiw	r24, 0x00	; 0
    94f2:	89 f6       	brne	.-94     	; 0x9496 <pick_drop+0x27e4>
    94f4:	31 c0       	rjmp	.+98     	; 0x9558 <pick_drop+0x28a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    94f6:	8e 01       	movw	r16, r28
    94f8:	07 5a       	subi	r16, 0xA7	; 167
    94fa:	1e 4f       	sbci	r17, 0xFE	; 254
    94fc:	ce 01       	movw	r24, r28
    94fe:	8b 5a       	subi	r24, 0xAB	; 171
    9500:	9e 4f       	sbci	r25, 0xFE	; 254
    9502:	fc 01       	movw	r30, r24
    9504:	60 81       	ld	r22, Z
    9506:	71 81       	ldd	r23, Z+1	; 0x01
    9508:	82 81       	ldd	r24, Z+2	; 0x02
    950a:	93 81       	ldd	r25, Z+3	; 0x03
    950c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9510:	dc 01       	movw	r26, r24
    9512:	cb 01       	movw	r24, r22
    9514:	f8 01       	movw	r30, r16
    9516:	91 83       	std	Z+1, r25	; 0x01
    9518:	80 83       	st	Z, r24
    951a:	ce 01       	movw	r24, r28
    951c:	83 5a       	subi	r24, 0xA3	; 163
    951e:	9e 4f       	sbci	r25, 0xFE	; 254
    9520:	9e 01       	movw	r18, r28
    9522:	27 5a       	subi	r18, 0xA7	; 167
    9524:	3e 4f       	sbci	r19, 0xFE	; 254
    9526:	f9 01       	movw	r30, r18
    9528:	20 81       	ld	r18, Z
    952a:	31 81       	ldd	r19, Z+1	; 0x01
    952c:	fc 01       	movw	r30, r24
    952e:	31 83       	std	Z+1, r19	; 0x01
    9530:	20 83       	st	Z, r18
    9532:	ce 01       	movw	r24, r28
    9534:	83 5a       	subi	r24, 0xA3	; 163
    9536:	9e 4f       	sbci	r25, 0xFE	; 254
    9538:	fc 01       	movw	r30, r24
    953a:	80 81       	ld	r24, Z
    953c:	91 81       	ldd	r25, Z+1	; 0x01
    953e:	8c 01       	movw	r16, r24
    9540:	c8 01       	movw	r24, r16
    9542:	01 97       	sbiw	r24, 0x01	; 1
    9544:	f1 f7       	brne	.-4      	; 0x9542 <pick_drop+0x2890>
    9546:	8c 01       	movw	r16, r24
    9548:	ce 01       	movw	r24, r28
    954a:	83 5a       	subi	r24, 0xA3	; 163
    954c:	9e 4f       	sbci	r25, 0xFE	; 254
    954e:	fc 01       	movw	r30, r24
    9550:	11 83       	std	Z+1, r17	; 0x01
    9552:	00 83       	st	Z, r16
		_delay_ms(20);
    9554:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
    9558:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
	}
	else if(pd=='3'){
    955c:	ce 01       	movw	r24, r28
    955e:	89 51       	subi	r24, 0x19	; 25
    9560:	9d 4f       	sbci	r25, 0xFD	; 253
    9562:	fc 01       	movw	r30, r24
    9564:	80 81       	ld	r24, Z
    9566:	83 33       	cpi	r24, 0x33	; 51
    9568:	09 f0       	breq	.+2      	; 0x956c <pick_drop+0x28ba>
    956a:	2b c4       	rjmp	.+2134   	; 0x9dc2 <pick_drop+0x3110>
		stop();
    956c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    9570:	9e 01       	movw	r18, r28
    9572:	21 5a       	subi	r18, 0xA1	; 161
    9574:	3e 4f       	sbci	r19, 0xFE	; 254
    9576:	80 e0       	ldi	r24, 0x00	; 0
    9578:	90 e0       	ldi	r25, 0x00	; 0
    957a:	a0 ea       	ldi	r26, 0xA0	; 160
    957c:	b1 e4       	ldi	r27, 0x41	; 65
    957e:	f9 01       	movw	r30, r18
    9580:	80 83       	st	Z, r24
    9582:	91 83       	std	Z+1, r25	; 0x01
    9584:	a2 83       	std	Z+2, r26	; 0x02
    9586:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9588:	8e 01       	movw	r16, r28
    958a:	0d 59       	subi	r16, 0x9D	; 157
    958c:	1e 4f       	sbci	r17, 0xFE	; 254
    958e:	ce 01       	movw	r24, r28
    9590:	81 5a       	subi	r24, 0xA1	; 161
    9592:	9e 4f       	sbci	r25, 0xFE	; 254
    9594:	fc 01       	movw	r30, r24
    9596:	60 81       	ld	r22, Z
    9598:	71 81       	ldd	r23, Z+1	; 0x01
    959a:	82 81       	ldd	r24, Z+2	; 0x02
    959c:	93 81       	ldd	r25, Z+3	; 0x03
    959e:	26 e6       	ldi	r18, 0x66	; 102
    95a0:	36 e6       	ldi	r19, 0x66	; 102
    95a2:	46 e6       	ldi	r20, 0x66	; 102
    95a4:	55 e4       	ldi	r21, 0x45	; 69
    95a6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    95aa:	dc 01       	movw	r26, r24
    95ac:	cb 01       	movw	r24, r22
    95ae:	f8 01       	movw	r30, r16
    95b0:	80 83       	st	Z, r24
    95b2:	91 83       	std	Z+1, r25	; 0x01
    95b4:	a2 83       	std	Z+2, r26	; 0x02
    95b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    95b8:	ce 01       	movw	r24, r28
    95ba:	8d 59       	subi	r24, 0x9D	; 157
    95bc:	9e 4f       	sbci	r25, 0xFE	; 254
    95be:	11 e0       	ldi	r17, 0x01	; 1
    95c0:	fc 01       	movw	r30, r24
    95c2:	60 81       	ld	r22, Z
    95c4:	71 81       	ldd	r23, Z+1	; 0x01
    95c6:	82 81       	ldd	r24, Z+2	; 0x02
    95c8:	93 81       	ldd	r25, Z+3	; 0x03
    95ca:	20 e0       	ldi	r18, 0x00	; 0
    95cc:	30 e0       	ldi	r19, 0x00	; 0
    95ce:	40 e8       	ldi	r20, 0x80	; 128
    95d0:	5f e3       	ldi	r21, 0x3F	; 63
    95d2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    95d6:	88 23       	and	r24, r24
    95d8:	0c f0       	brlt	.+2      	; 0x95dc <pick_drop+0x292a>
    95da:	10 e0       	ldi	r17, 0x00	; 0
    95dc:	11 23       	and	r17, r17
    95de:	49 f0       	breq	.+18     	; 0x95f2 <pick_drop+0x2940>
		__ticks = 1;
    95e0:	ce 01       	movw	r24, r28
    95e2:	89 59       	subi	r24, 0x99	; 153
    95e4:	9e 4f       	sbci	r25, 0xFE	; 254
    95e6:	21 e0       	ldi	r18, 0x01	; 1
    95e8:	30 e0       	ldi	r19, 0x00	; 0
    95ea:	fc 01       	movw	r30, r24
    95ec:	31 83       	std	Z+1, r19	; 0x01
    95ee:	20 83       	st	Z, r18
    95f0:	74 c0       	rjmp	.+232    	; 0x96da <pick_drop+0x2a28>
	else if (__tmp > 65535)
    95f2:	ce 01       	movw	r24, r28
    95f4:	8d 59       	subi	r24, 0x9D	; 157
    95f6:	9e 4f       	sbci	r25, 0xFE	; 254
    95f8:	11 e0       	ldi	r17, 0x01	; 1
    95fa:	fc 01       	movw	r30, r24
    95fc:	60 81       	ld	r22, Z
    95fe:	71 81       	ldd	r23, Z+1	; 0x01
    9600:	82 81       	ldd	r24, Z+2	; 0x02
    9602:	93 81       	ldd	r25, Z+3	; 0x03
    9604:	20 e0       	ldi	r18, 0x00	; 0
    9606:	3f ef       	ldi	r19, 0xFF	; 255
    9608:	4f e7       	ldi	r20, 0x7F	; 127
    960a:	57 e4       	ldi	r21, 0x47	; 71
    960c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    9610:	18 16       	cp	r1, r24
    9612:	0c f0       	brlt	.+2      	; 0x9616 <pick_drop+0x2964>
    9614:	10 e0       	ldi	r17, 0x00	; 0
    9616:	11 23       	and	r17, r17
    9618:	09 f4       	brne	.+2      	; 0x961c <pick_drop+0x296a>
    961a:	4d c0       	rjmp	.+154    	; 0x96b6 <pick_drop+0x2a04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    961c:	ce 01       	movw	r24, r28
    961e:	81 5a       	subi	r24, 0xA1	; 161
    9620:	9e 4f       	sbci	r25, 0xFE	; 254
    9622:	fc 01       	movw	r30, r24
    9624:	60 81       	ld	r22, Z
    9626:	71 81       	ldd	r23, Z+1	; 0x01
    9628:	82 81       	ldd	r24, Z+2	; 0x02
    962a:	93 81       	ldd	r25, Z+3	; 0x03
    962c:	20 e0       	ldi	r18, 0x00	; 0
    962e:	30 e0       	ldi	r19, 0x00	; 0
    9630:	40 e2       	ldi	r20, 0x20	; 32
    9632:	51 e4       	ldi	r21, 0x41	; 65
    9634:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9638:	dc 01       	movw	r26, r24
    963a:	cb 01       	movw	r24, r22
    963c:	8e 01       	movw	r16, r28
    963e:	09 59       	subi	r16, 0x99	; 153
    9640:	1e 4f       	sbci	r17, 0xFE	; 254
    9642:	bc 01       	movw	r22, r24
    9644:	cd 01       	movw	r24, r26
    9646:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    964a:	dc 01       	movw	r26, r24
    964c:	cb 01       	movw	r24, r22
    964e:	f8 01       	movw	r30, r16
    9650:	91 83       	std	Z+1, r25	; 0x01
    9652:	80 83       	st	Z, r24
    9654:	27 c0       	rjmp	.+78     	; 0x96a4 <pick_drop+0x29f2>
    9656:	ce 01       	movw	r24, r28
    9658:	87 59       	subi	r24, 0x97	; 151
    965a:	9e 4f       	sbci	r25, 0xFE	; 254
    965c:	20 e7       	ldi	r18, 0x70	; 112
    965e:	31 e0       	ldi	r19, 0x01	; 1
    9660:	fc 01       	movw	r30, r24
    9662:	31 83       	std	Z+1, r19	; 0x01
    9664:	20 83       	st	Z, r18
    9666:	ce 01       	movw	r24, r28
    9668:	87 59       	subi	r24, 0x97	; 151
    966a:	9e 4f       	sbci	r25, 0xFE	; 254
    966c:	fc 01       	movw	r30, r24
    966e:	80 81       	ld	r24, Z
    9670:	91 81       	ldd	r25, Z+1	; 0x01
    9672:	8c 01       	movw	r16, r24
    9674:	c8 01       	movw	r24, r16
    9676:	01 97       	sbiw	r24, 0x01	; 1
    9678:	f1 f7       	brne	.-4      	; 0x9676 <pick_drop+0x29c4>
    967a:	8c 01       	movw	r16, r24
    967c:	ce 01       	movw	r24, r28
    967e:	87 59       	subi	r24, 0x97	; 151
    9680:	9e 4f       	sbci	r25, 0xFE	; 254
    9682:	fc 01       	movw	r30, r24
    9684:	11 83       	std	Z+1, r17	; 0x01
    9686:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9688:	ce 01       	movw	r24, r28
    968a:	89 59       	subi	r24, 0x99	; 153
    968c:	9e 4f       	sbci	r25, 0xFE	; 254
    968e:	9e 01       	movw	r18, r28
    9690:	29 59       	subi	r18, 0x99	; 153
    9692:	3e 4f       	sbci	r19, 0xFE	; 254
    9694:	f9 01       	movw	r30, r18
    9696:	20 81       	ld	r18, Z
    9698:	31 81       	ldd	r19, Z+1	; 0x01
    969a:	21 50       	subi	r18, 0x01	; 1
    969c:	30 40       	sbci	r19, 0x00	; 0
    969e:	fc 01       	movw	r30, r24
    96a0:	31 83       	std	Z+1, r19	; 0x01
    96a2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    96a4:	ce 01       	movw	r24, r28
    96a6:	89 59       	subi	r24, 0x99	; 153
    96a8:	9e 4f       	sbci	r25, 0xFE	; 254
    96aa:	fc 01       	movw	r30, r24
    96ac:	80 81       	ld	r24, Z
    96ae:	91 81       	ldd	r25, Z+1	; 0x01
    96b0:	00 97       	sbiw	r24, 0x00	; 0
    96b2:	89 f6       	brne	.-94     	; 0x9656 <pick_drop+0x29a4>
    96b4:	2f c0       	rjmp	.+94     	; 0x9714 <pick_drop+0x2a62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    96b6:	8e 01       	movw	r16, r28
    96b8:	09 59       	subi	r16, 0x99	; 153
    96ba:	1e 4f       	sbci	r17, 0xFE	; 254
    96bc:	ce 01       	movw	r24, r28
    96be:	8d 59       	subi	r24, 0x9D	; 157
    96c0:	9e 4f       	sbci	r25, 0xFE	; 254
    96c2:	fc 01       	movw	r30, r24
    96c4:	60 81       	ld	r22, Z
    96c6:	71 81       	ldd	r23, Z+1	; 0x01
    96c8:	82 81       	ldd	r24, Z+2	; 0x02
    96ca:	93 81       	ldd	r25, Z+3	; 0x03
    96cc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    96d0:	dc 01       	movw	r26, r24
    96d2:	cb 01       	movw	r24, r22
    96d4:	f8 01       	movw	r30, r16
    96d6:	91 83       	std	Z+1, r25	; 0x01
    96d8:	80 83       	st	Z, r24
    96da:	ce 01       	movw	r24, r28
    96dc:	85 59       	subi	r24, 0x95	; 149
    96de:	9e 4f       	sbci	r25, 0xFE	; 254
    96e0:	9e 01       	movw	r18, r28
    96e2:	29 59       	subi	r18, 0x99	; 153
    96e4:	3e 4f       	sbci	r19, 0xFE	; 254
    96e6:	f9 01       	movw	r30, r18
    96e8:	20 81       	ld	r18, Z
    96ea:	31 81       	ldd	r19, Z+1	; 0x01
    96ec:	fc 01       	movw	r30, r24
    96ee:	31 83       	std	Z+1, r19	; 0x01
    96f0:	20 83       	st	Z, r18
    96f2:	ce 01       	movw	r24, r28
    96f4:	85 59       	subi	r24, 0x95	; 149
    96f6:	9e 4f       	sbci	r25, 0xFE	; 254
    96f8:	fc 01       	movw	r30, r24
    96fa:	80 81       	ld	r24, Z
    96fc:	91 81       	ldd	r25, Z+1	; 0x01
    96fe:	8c 01       	movw	r16, r24
    9700:	c8 01       	movw	r24, r16
    9702:	01 97       	sbiw	r24, 0x01	; 1
    9704:	f1 f7       	brne	.-4      	; 0x9702 <pick_drop+0x2a50>
    9706:	8c 01       	movw	r16, r24
    9708:	ce 01       	movw	r24, r28
    970a:	85 59       	subi	r24, 0x95	; 149
    970c:	9e 4f       	sbci	r25, 0xFE	; 254
    970e:	fc 01       	movw	r30, r24
    9710:	11 83       	std	Z+1, r17	; 0x01
    9712:	00 83       	st	Z, r16
		_delay_ms(20);
		forward_mm(70);
    9714:	86 e4       	ldi	r24, 0x46	; 70
    9716:	90 e0       	ldi	r25, 0x00	; 0
    9718:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		correct_right3();
    971c:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    9720:	9e 01       	movw	r18, r28
    9722:	23 59       	subi	r18, 0x93	; 147
    9724:	3e 4f       	sbci	r19, 0xFE	; 254
    9726:	80 e0       	ldi	r24, 0x00	; 0
    9728:	90 e0       	ldi	r25, 0x00	; 0
    972a:	a8 e4       	ldi	r26, 0x48	; 72
    972c:	b3 e4       	ldi	r27, 0x43	; 67
    972e:	f9 01       	movw	r30, r18
    9730:	80 83       	st	Z, r24
    9732:	91 83       	std	Z+1, r25	; 0x01
    9734:	a2 83       	std	Z+2, r26	; 0x02
    9736:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9738:	8e 01       	movw	r16, r28
    973a:	0f 58       	subi	r16, 0x8F	; 143
    973c:	1e 4f       	sbci	r17, 0xFE	; 254
    973e:	ce 01       	movw	r24, r28
    9740:	83 59       	subi	r24, 0x93	; 147
    9742:	9e 4f       	sbci	r25, 0xFE	; 254
    9744:	fc 01       	movw	r30, r24
    9746:	60 81       	ld	r22, Z
    9748:	71 81       	ldd	r23, Z+1	; 0x01
    974a:	82 81       	ldd	r24, Z+2	; 0x02
    974c:	93 81       	ldd	r25, Z+3	; 0x03
    974e:	26 e6       	ldi	r18, 0x66	; 102
    9750:	36 e6       	ldi	r19, 0x66	; 102
    9752:	46 e6       	ldi	r20, 0x66	; 102
    9754:	55 e4       	ldi	r21, 0x45	; 69
    9756:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    975a:	dc 01       	movw	r26, r24
    975c:	cb 01       	movw	r24, r22
    975e:	f8 01       	movw	r30, r16
    9760:	80 83       	st	Z, r24
    9762:	91 83       	std	Z+1, r25	; 0x01
    9764:	a2 83       	std	Z+2, r26	; 0x02
    9766:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9768:	ce 01       	movw	r24, r28
    976a:	8f 58       	subi	r24, 0x8F	; 143
    976c:	9e 4f       	sbci	r25, 0xFE	; 254
    976e:	11 e0       	ldi	r17, 0x01	; 1
    9770:	fc 01       	movw	r30, r24
    9772:	60 81       	ld	r22, Z
    9774:	71 81       	ldd	r23, Z+1	; 0x01
    9776:	82 81       	ldd	r24, Z+2	; 0x02
    9778:	93 81       	ldd	r25, Z+3	; 0x03
    977a:	20 e0       	ldi	r18, 0x00	; 0
    977c:	30 e0       	ldi	r19, 0x00	; 0
    977e:	40 e8       	ldi	r20, 0x80	; 128
    9780:	5f e3       	ldi	r21, 0x3F	; 63
    9782:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    9786:	88 23       	and	r24, r24
    9788:	0c f0       	brlt	.+2      	; 0x978c <pick_drop+0x2ada>
    978a:	10 e0       	ldi	r17, 0x00	; 0
    978c:	11 23       	and	r17, r17
    978e:	49 f0       	breq	.+18     	; 0x97a2 <pick_drop+0x2af0>
		__ticks = 1;
    9790:	ce 01       	movw	r24, r28
    9792:	8b 58       	subi	r24, 0x8B	; 139
    9794:	9e 4f       	sbci	r25, 0xFE	; 254
    9796:	21 e0       	ldi	r18, 0x01	; 1
    9798:	30 e0       	ldi	r19, 0x00	; 0
    979a:	fc 01       	movw	r30, r24
    979c:	31 83       	std	Z+1, r19	; 0x01
    979e:	20 83       	st	Z, r18
    97a0:	74 c0       	rjmp	.+232    	; 0x988a <pick_drop+0x2bd8>
	else if (__tmp > 65535)
    97a2:	ce 01       	movw	r24, r28
    97a4:	8f 58       	subi	r24, 0x8F	; 143
    97a6:	9e 4f       	sbci	r25, 0xFE	; 254
    97a8:	11 e0       	ldi	r17, 0x01	; 1
    97aa:	fc 01       	movw	r30, r24
    97ac:	60 81       	ld	r22, Z
    97ae:	71 81       	ldd	r23, Z+1	; 0x01
    97b0:	82 81       	ldd	r24, Z+2	; 0x02
    97b2:	93 81       	ldd	r25, Z+3	; 0x03
    97b4:	20 e0       	ldi	r18, 0x00	; 0
    97b6:	3f ef       	ldi	r19, 0xFF	; 255
    97b8:	4f e7       	ldi	r20, 0x7F	; 127
    97ba:	57 e4       	ldi	r21, 0x47	; 71
    97bc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    97c0:	18 16       	cp	r1, r24
    97c2:	0c f0       	brlt	.+2      	; 0x97c6 <pick_drop+0x2b14>
    97c4:	10 e0       	ldi	r17, 0x00	; 0
    97c6:	11 23       	and	r17, r17
    97c8:	09 f4       	brne	.+2      	; 0x97cc <pick_drop+0x2b1a>
    97ca:	4d c0       	rjmp	.+154    	; 0x9866 <pick_drop+0x2bb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    97cc:	ce 01       	movw	r24, r28
    97ce:	83 59       	subi	r24, 0x93	; 147
    97d0:	9e 4f       	sbci	r25, 0xFE	; 254
    97d2:	fc 01       	movw	r30, r24
    97d4:	60 81       	ld	r22, Z
    97d6:	71 81       	ldd	r23, Z+1	; 0x01
    97d8:	82 81       	ldd	r24, Z+2	; 0x02
    97da:	93 81       	ldd	r25, Z+3	; 0x03
    97dc:	20 e0       	ldi	r18, 0x00	; 0
    97de:	30 e0       	ldi	r19, 0x00	; 0
    97e0:	40 e2       	ldi	r20, 0x20	; 32
    97e2:	51 e4       	ldi	r21, 0x41	; 65
    97e4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    97e8:	dc 01       	movw	r26, r24
    97ea:	cb 01       	movw	r24, r22
    97ec:	8e 01       	movw	r16, r28
    97ee:	0b 58       	subi	r16, 0x8B	; 139
    97f0:	1e 4f       	sbci	r17, 0xFE	; 254
    97f2:	bc 01       	movw	r22, r24
    97f4:	cd 01       	movw	r24, r26
    97f6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    97fa:	dc 01       	movw	r26, r24
    97fc:	cb 01       	movw	r24, r22
    97fe:	f8 01       	movw	r30, r16
    9800:	91 83       	std	Z+1, r25	; 0x01
    9802:	80 83       	st	Z, r24
    9804:	27 c0       	rjmp	.+78     	; 0x9854 <pick_drop+0x2ba2>
    9806:	ce 01       	movw	r24, r28
    9808:	89 58       	subi	r24, 0x89	; 137
    980a:	9e 4f       	sbci	r25, 0xFE	; 254
    980c:	20 e7       	ldi	r18, 0x70	; 112
    980e:	31 e0       	ldi	r19, 0x01	; 1
    9810:	fc 01       	movw	r30, r24
    9812:	31 83       	std	Z+1, r19	; 0x01
    9814:	20 83       	st	Z, r18
    9816:	ce 01       	movw	r24, r28
    9818:	89 58       	subi	r24, 0x89	; 137
    981a:	9e 4f       	sbci	r25, 0xFE	; 254
    981c:	fc 01       	movw	r30, r24
    981e:	80 81       	ld	r24, Z
    9820:	91 81       	ldd	r25, Z+1	; 0x01
    9822:	8c 01       	movw	r16, r24
    9824:	c8 01       	movw	r24, r16
    9826:	01 97       	sbiw	r24, 0x01	; 1
    9828:	f1 f7       	brne	.-4      	; 0x9826 <pick_drop+0x2b74>
    982a:	8c 01       	movw	r16, r24
    982c:	ce 01       	movw	r24, r28
    982e:	89 58       	subi	r24, 0x89	; 137
    9830:	9e 4f       	sbci	r25, 0xFE	; 254
    9832:	fc 01       	movw	r30, r24
    9834:	11 83       	std	Z+1, r17	; 0x01
    9836:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9838:	ce 01       	movw	r24, r28
    983a:	8b 58       	subi	r24, 0x8B	; 139
    983c:	9e 4f       	sbci	r25, 0xFE	; 254
    983e:	9e 01       	movw	r18, r28
    9840:	2b 58       	subi	r18, 0x8B	; 139
    9842:	3e 4f       	sbci	r19, 0xFE	; 254
    9844:	f9 01       	movw	r30, r18
    9846:	20 81       	ld	r18, Z
    9848:	31 81       	ldd	r19, Z+1	; 0x01
    984a:	21 50       	subi	r18, 0x01	; 1
    984c:	30 40       	sbci	r19, 0x00	; 0
    984e:	fc 01       	movw	r30, r24
    9850:	31 83       	std	Z+1, r19	; 0x01
    9852:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9854:	ce 01       	movw	r24, r28
    9856:	8b 58       	subi	r24, 0x8B	; 139
    9858:	9e 4f       	sbci	r25, 0xFE	; 254
    985a:	fc 01       	movw	r30, r24
    985c:	80 81       	ld	r24, Z
    985e:	91 81       	ldd	r25, Z+1	; 0x01
    9860:	00 97       	sbiw	r24, 0x00	; 0
    9862:	89 f6       	brne	.-94     	; 0x9806 <pick_drop+0x2b54>
    9864:	2f c0       	rjmp	.+94     	; 0x98c4 <pick_drop+0x2c12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9866:	8e 01       	movw	r16, r28
    9868:	0b 58       	subi	r16, 0x8B	; 139
    986a:	1e 4f       	sbci	r17, 0xFE	; 254
    986c:	ce 01       	movw	r24, r28
    986e:	8f 58       	subi	r24, 0x8F	; 143
    9870:	9e 4f       	sbci	r25, 0xFE	; 254
    9872:	fc 01       	movw	r30, r24
    9874:	60 81       	ld	r22, Z
    9876:	71 81       	ldd	r23, Z+1	; 0x01
    9878:	82 81       	ldd	r24, Z+2	; 0x02
    987a:	93 81       	ldd	r25, Z+3	; 0x03
    987c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9880:	dc 01       	movw	r26, r24
    9882:	cb 01       	movw	r24, r22
    9884:	f8 01       	movw	r30, r16
    9886:	91 83       	std	Z+1, r25	; 0x01
    9888:	80 83       	st	Z, r24
    988a:	ce 01       	movw	r24, r28
    988c:	87 58       	subi	r24, 0x87	; 135
    988e:	9e 4f       	sbci	r25, 0xFE	; 254
    9890:	9e 01       	movw	r18, r28
    9892:	2b 58       	subi	r18, 0x8B	; 139
    9894:	3e 4f       	sbci	r19, 0xFE	; 254
    9896:	f9 01       	movw	r30, r18
    9898:	20 81       	ld	r18, Z
    989a:	31 81       	ldd	r19, Z+1	; 0x01
    989c:	fc 01       	movw	r30, r24
    989e:	31 83       	std	Z+1, r19	; 0x01
    98a0:	20 83       	st	Z, r18
    98a2:	ce 01       	movw	r24, r28
    98a4:	87 58       	subi	r24, 0x87	; 135
    98a6:	9e 4f       	sbci	r25, 0xFE	; 254
    98a8:	fc 01       	movw	r30, r24
    98aa:	80 81       	ld	r24, Z
    98ac:	91 81       	ldd	r25, Z+1	; 0x01
    98ae:	8c 01       	movw	r16, r24
    98b0:	c8 01       	movw	r24, r16
    98b2:	01 97       	sbiw	r24, 0x01	; 1
    98b4:	f1 f7       	brne	.-4      	; 0x98b2 <pick_drop+0x2c00>
    98b6:	8c 01       	movw	r16, r24
    98b8:	ce 01       	movw	r24, r28
    98ba:	87 58       	subi	r24, 0x87	; 135
    98bc:	9e 4f       	sbci	r25, 0xFE	; 254
    98be:	fc 01       	movw	r30, r24
    98c0:	11 83       	std	Z+1, r17	; 0x01
    98c2:	00 83       	st	Z, r16
		_delay_ms(200);
		stop();
    98c4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    98c8:	9e 01       	movw	r18, r28
    98ca:	25 58       	subi	r18, 0x85	; 133
    98cc:	3e 4f       	sbci	r19, 0xFE	; 254
    98ce:	80 e0       	ldi	r24, 0x00	; 0
    98d0:	90 e0       	ldi	r25, 0x00	; 0
    98d2:	a0 ea       	ldi	r26, 0xA0	; 160
    98d4:	b1 e4       	ldi	r27, 0x41	; 65
    98d6:	f9 01       	movw	r30, r18
    98d8:	80 83       	st	Z, r24
    98da:	91 83       	std	Z+1, r25	; 0x01
    98dc:	a2 83       	std	Z+2, r26	; 0x02
    98de:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    98e0:	8e 01       	movw	r16, r28
    98e2:	01 58       	subi	r16, 0x81	; 129
    98e4:	1e 4f       	sbci	r17, 0xFE	; 254
    98e6:	ce 01       	movw	r24, r28
    98e8:	85 58       	subi	r24, 0x85	; 133
    98ea:	9e 4f       	sbci	r25, 0xFE	; 254
    98ec:	fc 01       	movw	r30, r24
    98ee:	60 81       	ld	r22, Z
    98f0:	71 81       	ldd	r23, Z+1	; 0x01
    98f2:	82 81       	ldd	r24, Z+2	; 0x02
    98f4:	93 81       	ldd	r25, Z+3	; 0x03
    98f6:	26 e6       	ldi	r18, 0x66	; 102
    98f8:	36 e6       	ldi	r19, 0x66	; 102
    98fa:	46 e6       	ldi	r20, 0x66	; 102
    98fc:	55 e4       	ldi	r21, 0x45	; 69
    98fe:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9902:	dc 01       	movw	r26, r24
    9904:	cb 01       	movw	r24, r22
    9906:	f8 01       	movw	r30, r16
    9908:	80 83       	st	Z, r24
    990a:	91 83       	std	Z+1, r25	; 0x01
    990c:	a2 83       	std	Z+2, r26	; 0x02
    990e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9910:	ce 01       	movw	r24, r28
    9912:	81 58       	subi	r24, 0x81	; 129
    9914:	9e 4f       	sbci	r25, 0xFE	; 254
    9916:	11 e0       	ldi	r17, 0x01	; 1
    9918:	fc 01       	movw	r30, r24
    991a:	60 81       	ld	r22, Z
    991c:	71 81       	ldd	r23, Z+1	; 0x01
    991e:	82 81       	ldd	r24, Z+2	; 0x02
    9920:	93 81       	ldd	r25, Z+3	; 0x03
    9922:	20 e0       	ldi	r18, 0x00	; 0
    9924:	30 e0       	ldi	r19, 0x00	; 0
    9926:	40 e8       	ldi	r20, 0x80	; 128
    9928:	5f e3       	ldi	r21, 0x3F	; 63
    992a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    992e:	88 23       	and	r24, r24
    9930:	0c f0       	brlt	.+2      	; 0x9934 <pick_drop+0x2c82>
    9932:	10 e0       	ldi	r17, 0x00	; 0
    9934:	11 23       	and	r17, r17
    9936:	49 f0       	breq	.+18     	; 0x994a <pick_drop+0x2c98>
		__ticks = 1;
    9938:	ce 01       	movw	r24, r28
    993a:	8d 57       	subi	r24, 0x7D	; 125
    993c:	9e 4f       	sbci	r25, 0xFE	; 254
    993e:	21 e0       	ldi	r18, 0x01	; 1
    9940:	30 e0       	ldi	r19, 0x00	; 0
    9942:	fc 01       	movw	r30, r24
    9944:	31 83       	std	Z+1, r19	; 0x01
    9946:	20 83       	st	Z, r18
    9948:	74 c0       	rjmp	.+232    	; 0x9a32 <pick_drop+0x2d80>
	else if (__tmp > 65535)
    994a:	ce 01       	movw	r24, r28
    994c:	81 58       	subi	r24, 0x81	; 129
    994e:	9e 4f       	sbci	r25, 0xFE	; 254
    9950:	11 e0       	ldi	r17, 0x01	; 1
    9952:	fc 01       	movw	r30, r24
    9954:	60 81       	ld	r22, Z
    9956:	71 81       	ldd	r23, Z+1	; 0x01
    9958:	82 81       	ldd	r24, Z+2	; 0x02
    995a:	93 81       	ldd	r25, Z+3	; 0x03
    995c:	20 e0       	ldi	r18, 0x00	; 0
    995e:	3f ef       	ldi	r19, 0xFF	; 255
    9960:	4f e7       	ldi	r20, 0x7F	; 127
    9962:	57 e4       	ldi	r21, 0x47	; 71
    9964:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    9968:	18 16       	cp	r1, r24
    996a:	0c f0       	brlt	.+2      	; 0x996e <pick_drop+0x2cbc>
    996c:	10 e0       	ldi	r17, 0x00	; 0
    996e:	11 23       	and	r17, r17
    9970:	09 f4       	brne	.+2      	; 0x9974 <pick_drop+0x2cc2>
    9972:	4d c0       	rjmp	.+154    	; 0x9a0e <pick_drop+0x2d5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9974:	ce 01       	movw	r24, r28
    9976:	85 58       	subi	r24, 0x85	; 133
    9978:	9e 4f       	sbci	r25, 0xFE	; 254
    997a:	fc 01       	movw	r30, r24
    997c:	60 81       	ld	r22, Z
    997e:	71 81       	ldd	r23, Z+1	; 0x01
    9980:	82 81       	ldd	r24, Z+2	; 0x02
    9982:	93 81       	ldd	r25, Z+3	; 0x03
    9984:	20 e0       	ldi	r18, 0x00	; 0
    9986:	30 e0       	ldi	r19, 0x00	; 0
    9988:	40 e2       	ldi	r20, 0x20	; 32
    998a:	51 e4       	ldi	r21, 0x41	; 65
    998c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9990:	dc 01       	movw	r26, r24
    9992:	cb 01       	movw	r24, r22
    9994:	8e 01       	movw	r16, r28
    9996:	0d 57       	subi	r16, 0x7D	; 125
    9998:	1e 4f       	sbci	r17, 0xFE	; 254
    999a:	bc 01       	movw	r22, r24
    999c:	cd 01       	movw	r24, r26
    999e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    99a2:	dc 01       	movw	r26, r24
    99a4:	cb 01       	movw	r24, r22
    99a6:	f8 01       	movw	r30, r16
    99a8:	91 83       	std	Z+1, r25	; 0x01
    99aa:	80 83       	st	Z, r24
    99ac:	27 c0       	rjmp	.+78     	; 0x99fc <pick_drop+0x2d4a>
    99ae:	ce 01       	movw	r24, r28
    99b0:	8b 57       	subi	r24, 0x7B	; 123
    99b2:	9e 4f       	sbci	r25, 0xFE	; 254
    99b4:	20 e7       	ldi	r18, 0x70	; 112
    99b6:	31 e0       	ldi	r19, 0x01	; 1
    99b8:	fc 01       	movw	r30, r24
    99ba:	31 83       	std	Z+1, r19	; 0x01
    99bc:	20 83       	st	Z, r18
    99be:	ce 01       	movw	r24, r28
    99c0:	8b 57       	subi	r24, 0x7B	; 123
    99c2:	9e 4f       	sbci	r25, 0xFE	; 254
    99c4:	fc 01       	movw	r30, r24
    99c6:	80 81       	ld	r24, Z
    99c8:	91 81       	ldd	r25, Z+1	; 0x01
    99ca:	8c 01       	movw	r16, r24
    99cc:	c8 01       	movw	r24, r16
    99ce:	01 97       	sbiw	r24, 0x01	; 1
    99d0:	f1 f7       	brne	.-4      	; 0x99ce <pick_drop+0x2d1c>
    99d2:	8c 01       	movw	r16, r24
    99d4:	ce 01       	movw	r24, r28
    99d6:	8b 57       	subi	r24, 0x7B	; 123
    99d8:	9e 4f       	sbci	r25, 0xFE	; 254
    99da:	fc 01       	movw	r30, r24
    99dc:	11 83       	std	Z+1, r17	; 0x01
    99de:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    99e0:	ce 01       	movw	r24, r28
    99e2:	8d 57       	subi	r24, 0x7D	; 125
    99e4:	9e 4f       	sbci	r25, 0xFE	; 254
    99e6:	9e 01       	movw	r18, r28
    99e8:	2d 57       	subi	r18, 0x7D	; 125
    99ea:	3e 4f       	sbci	r19, 0xFE	; 254
    99ec:	f9 01       	movw	r30, r18
    99ee:	20 81       	ld	r18, Z
    99f0:	31 81       	ldd	r19, Z+1	; 0x01
    99f2:	21 50       	subi	r18, 0x01	; 1
    99f4:	30 40       	sbci	r19, 0x00	; 0
    99f6:	fc 01       	movw	r30, r24
    99f8:	31 83       	std	Z+1, r19	; 0x01
    99fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    99fc:	ce 01       	movw	r24, r28
    99fe:	8d 57       	subi	r24, 0x7D	; 125
    9a00:	9e 4f       	sbci	r25, 0xFE	; 254
    9a02:	fc 01       	movw	r30, r24
    9a04:	80 81       	ld	r24, Z
    9a06:	91 81       	ldd	r25, Z+1	; 0x01
    9a08:	00 97       	sbiw	r24, 0x00	; 0
    9a0a:	89 f6       	brne	.-94     	; 0x99ae <pick_drop+0x2cfc>
    9a0c:	2f c0       	rjmp	.+94     	; 0x9a6c <pick_drop+0x2dba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a0e:	8e 01       	movw	r16, r28
    9a10:	0d 57       	subi	r16, 0x7D	; 125
    9a12:	1e 4f       	sbci	r17, 0xFE	; 254
    9a14:	ce 01       	movw	r24, r28
    9a16:	81 58       	subi	r24, 0x81	; 129
    9a18:	9e 4f       	sbci	r25, 0xFE	; 254
    9a1a:	fc 01       	movw	r30, r24
    9a1c:	60 81       	ld	r22, Z
    9a1e:	71 81       	ldd	r23, Z+1	; 0x01
    9a20:	82 81       	ldd	r24, Z+2	; 0x02
    9a22:	93 81       	ldd	r25, Z+3	; 0x03
    9a24:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9a28:	dc 01       	movw	r26, r24
    9a2a:	cb 01       	movw	r24, r22
    9a2c:	f8 01       	movw	r30, r16
    9a2e:	91 83       	std	Z+1, r25	; 0x01
    9a30:	80 83       	st	Z, r24
    9a32:	ce 01       	movw	r24, r28
    9a34:	89 57       	subi	r24, 0x79	; 121
    9a36:	9e 4f       	sbci	r25, 0xFE	; 254
    9a38:	9e 01       	movw	r18, r28
    9a3a:	2d 57       	subi	r18, 0x7D	; 125
    9a3c:	3e 4f       	sbci	r19, 0xFE	; 254
    9a3e:	f9 01       	movw	r30, r18
    9a40:	20 81       	ld	r18, Z
    9a42:	31 81       	ldd	r19, Z+1	; 0x01
    9a44:	fc 01       	movw	r30, r24
    9a46:	31 83       	std	Z+1, r19	; 0x01
    9a48:	20 83       	st	Z, r18
    9a4a:	ce 01       	movw	r24, r28
    9a4c:	89 57       	subi	r24, 0x79	; 121
    9a4e:	9e 4f       	sbci	r25, 0xFE	; 254
    9a50:	fc 01       	movw	r30, r24
    9a52:	80 81       	ld	r24, Z
    9a54:	91 81       	ldd	r25, Z+1	; 0x01
    9a56:	8c 01       	movw	r16, r24
    9a58:	c8 01       	movw	r24, r16
    9a5a:	01 97       	sbiw	r24, 0x01	; 1
    9a5c:	f1 f7       	brne	.-4      	; 0x9a5a <pick_drop+0x2da8>
    9a5e:	8c 01       	movw	r16, r24
    9a60:	ce 01       	movw	r24, r28
    9a62:	89 57       	subi	r24, 0x79	; 121
    9a64:	9e 4f       	sbci	r25, 0xFE	; 254
    9a66:	fc 01       	movw	r30, r24
    9a68:	11 83       	std	Z+1, r17	; 0x01
    9a6a:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    9a6c:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    9a70:	9e 01       	movw	r18, r28
    9a72:	27 57       	subi	r18, 0x77	; 119
    9a74:	3e 4f       	sbci	r19, 0xFE	; 254
    9a76:	80 e0       	ldi	r24, 0x00	; 0
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	a0 ea       	ldi	r26, 0xA0	; 160
    9a7c:	b1 e4       	ldi	r27, 0x41	; 65
    9a7e:	f9 01       	movw	r30, r18
    9a80:	80 83       	st	Z, r24
    9a82:	91 83       	std	Z+1, r25	; 0x01
    9a84:	a2 83       	std	Z+2, r26	; 0x02
    9a86:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9a88:	8e 01       	movw	r16, r28
    9a8a:	03 57       	subi	r16, 0x73	; 115
    9a8c:	1e 4f       	sbci	r17, 0xFE	; 254
    9a8e:	ce 01       	movw	r24, r28
    9a90:	87 57       	subi	r24, 0x77	; 119
    9a92:	9e 4f       	sbci	r25, 0xFE	; 254
    9a94:	fc 01       	movw	r30, r24
    9a96:	60 81       	ld	r22, Z
    9a98:	71 81       	ldd	r23, Z+1	; 0x01
    9a9a:	82 81       	ldd	r24, Z+2	; 0x02
    9a9c:	93 81       	ldd	r25, Z+3	; 0x03
    9a9e:	26 e6       	ldi	r18, 0x66	; 102
    9aa0:	36 e6       	ldi	r19, 0x66	; 102
    9aa2:	46 e6       	ldi	r20, 0x66	; 102
    9aa4:	55 e4       	ldi	r21, 0x45	; 69
    9aa6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9aaa:	dc 01       	movw	r26, r24
    9aac:	cb 01       	movw	r24, r22
    9aae:	f8 01       	movw	r30, r16
    9ab0:	80 83       	st	Z, r24
    9ab2:	91 83       	std	Z+1, r25	; 0x01
    9ab4:	a2 83       	std	Z+2, r26	; 0x02
    9ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9ab8:	ce 01       	movw	r24, r28
    9aba:	83 57       	subi	r24, 0x73	; 115
    9abc:	9e 4f       	sbci	r25, 0xFE	; 254
    9abe:	11 e0       	ldi	r17, 0x01	; 1
    9ac0:	fc 01       	movw	r30, r24
    9ac2:	60 81       	ld	r22, Z
    9ac4:	71 81       	ldd	r23, Z+1	; 0x01
    9ac6:	82 81       	ldd	r24, Z+2	; 0x02
    9ac8:	93 81       	ldd	r25, Z+3	; 0x03
    9aca:	20 e0       	ldi	r18, 0x00	; 0
    9acc:	30 e0       	ldi	r19, 0x00	; 0
    9ace:	40 e8       	ldi	r20, 0x80	; 128
    9ad0:	5f e3       	ldi	r21, 0x3F	; 63
    9ad2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    9ad6:	88 23       	and	r24, r24
    9ad8:	0c f0       	brlt	.+2      	; 0x9adc <pick_drop+0x2e2a>
    9ada:	10 e0       	ldi	r17, 0x00	; 0
    9adc:	11 23       	and	r17, r17
    9ade:	49 f0       	breq	.+18     	; 0x9af2 <pick_drop+0x2e40>
		__ticks = 1;
    9ae0:	ce 01       	movw	r24, r28
    9ae2:	8f 56       	subi	r24, 0x6F	; 111
    9ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    9ae6:	21 e0       	ldi	r18, 0x01	; 1
    9ae8:	30 e0       	ldi	r19, 0x00	; 0
    9aea:	fc 01       	movw	r30, r24
    9aec:	31 83       	std	Z+1, r19	; 0x01
    9aee:	20 83       	st	Z, r18
    9af0:	74 c0       	rjmp	.+232    	; 0x9bda <pick_drop+0x2f28>
	else if (__tmp > 65535)
    9af2:	ce 01       	movw	r24, r28
    9af4:	83 57       	subi	r24, 0x73	; 115
    9af6:	9e 4f       	sbci	r25, 0xFE	; 254
    9af8:	11 e0       	ldi	r17, 0x01	; 1
    9afa:	fc 01       	movw	r30, r24
    9afc:	60 81       	ld	r22, Z
    9afe:	71 81       	ldd	r23, Z+1	; 0x01
    9b00:	82 81       	ldd	r24, Z+2	; 0x02
    9b02:	93 81       	ldd	r25, Z+3	; 0x03
    9b04:	20 e0       	ldi	r18, 0x00	; 0
    9b06:	3f ef       	ldi	r19, 0xFF	; 255
    9b08:	4f e7       	ldi	r20, 0x7F	; 127
    9b0a:	57 e4       	ldi	r21, 0x47	; 71
    9b0c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    9b10:	18 16       	cp	r1, r24
    9b12:	0c f0       	brlt	.+2      	; 0x9b16 <pick_drop+0x2e64>
    9b14:	10 e0       	ldi	r17, 0x00	; 0
    9b16:	11 23       	and	r17, r17
    9b18:	09 f4       	brne	.+2      	; 0x9b1c <pick_drop+0x2e6a>
    9b1a:	4d c0       	rjmp	.+154    	; 0x9bb6 <pick_drop+0x2f04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9b1c:	ce 01       	movw	r24, r28
    9b1e:	87 57       	subi	r24, 0x77	; 119
    9b20:	9e 4f       	sbci	r25, 0xFE	; 254
    9b22:	fc 01       	movw	r30, r24
    9b24:	60 81       	ld	r22, Z
    9b26:	71 81       	ldd	r23, Z+1	; 0x01
    9b28:	82 81       	ldd	r24, Z+2	; 0x02
    9b2a:	93 81       	ldd	r25, Z+3	; 0x03
    9b2c:	20 e0       	ldi	r18, 0x00	; 0
    9b2e:	30 e0       	ldi	r19, 0x00	; 0
    9b30:	40 e2       	ldi	r20, 0x20	; 32
    9b32:	51 e4       	ldi	r21, 0x41	; 65
    9b34:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9b38:	dc 01       	movw	r26, r24
    9b3a:	cb 01       	movw	r24, r22
    9b3c:	8e 01       	movw	r16, r28
    9b3e:	0f 56       	subi	r16, 0x6F	; 111
    9b40:	1e 4f       	sbci	r17, 0xFE	; 254
    9b42:	bc 01       	movw	r22, r24
    9b44:	cd 01       	movw	r24, r26
    9b46:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9b4a:	dc 01       	movw	r26, r24
    9b4c:	cb 01       	movw	r24, r22
    9b4e:	f8 01       	movw	r30, r16
    9b50:	91 83       	std	Z+1, r25	; 0x01
    9b52:	80 83       	st	Z, r24
    9b54:	27 c0       	rjmp	.+78     	; 0x9ba4 <pick_drop+0x2ef2>
    9b56:	ce 01       	movw	r24, r28
    9b58:	8d 56       	subi	r24, 0x6D	; 109
    9b5a:	9e 4f       	sbci	r25, 0xFE	; 254
    9b5c:	20 e7       	ldi	r18, 0x70	; 112
    9b5e:	31 e0       	ldi	r19, 0x01	; 1
    9b60:	fc 01       	movw	r30, r24
    9b62:	31 83       	std	Z+1, r19	; 0x01
    9b64:	20 83       	st	Z, r18
    9b66:	ce 01       	movw	r24, r28
    9b68:	8d 56       	subi	r24, 0x6D	; 109
    9b6a:	9e 4f       	sbci	r25, 0xFE	; 254
    9b6c:	fc 01       	movw	r30, r24
    9b6e:	80 81       	ld	r24, Z
    9b70:	91 81       	ldd	r25, Z+1	; 0x01
    9b72:	8c 01       	movw	r16, r24
    9b74:	c8 01       	movw	r24, r16
    9b76:	01 97       	sbiw	r24, 0x01	; 1
    9b78:	f1 f7       	brne	.-4      	; 0x9b76 <pick_drop+0x2ec4>
    9b7a:	8c 01       	movw	r16, r24
    9b7c:	ce 01       	movw	r24, r28
    9b7e:	8d 56       	subi	r24, 0x6D	; 109
    9b80:	9e 4f       	sbci	r25, 0xFE	; 254
    9b82:	fc 01       	movw	r30, r24
    9b84:	11 83       	std	Z+1, r17	; 0x01
    9b86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9b88:	ce 01       	movw	r24, r28
    9b8a:	8f 56       	subi	r24, 0x6F	; 111
    9b8c:	9e 4f       	sbci	r25, 0xFE	; 254
    9b8e:	9e 01       	movw	r18, r28
    9b90:	2f 56       	subi	r18, 0x6F	; 111
    9b92:	3e 4f       	sbci	r19, 0xFE	; 254
    9b94:	f9 01       	movw	r30, r18
    9b96:	20 81       	ld	r18, Z
    9b98:	31 81       	ldd	r19, Z+1	; 0x01
    9b9a:	21 50       	subi	r18, 0x01	; 1
    9b9c:	30 40       	sbci	r19, 0x00	; 0
    9b9e:	fc 01       	movw	r30, r24
    9ba0:	31 83       	std	Z+1, r19	; 0x01
    9ba2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9ba4:	ce 01       	movw	r24, r28
    9ba6:	8f 56       	subi	r24, 0x6F	; 111
    9ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    9baa:	fc 01       	movw	r30, r24
    9bac:	80 81       	ld	r24, Z
    9bae:	91 81       	ldd	r25, Z+1	; 0x01
    9bb0:	00 97       	sbiw	r24, 0x00	; 0
    9bb2:	89 f6       	brne	.-94     	; 0x9b56 <pick_drop+0x2ea4>
    9bb4:	2f c0       	rjmp	.+94     	; 0x9c14 <pick_drop+0x2f62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9bb6:	8e 01       	movw	r16, r28
    9bb8:	0f 56       	subi	r16, 0x6F	; 111
    9bba:	1e 4f       	sbci	r17, 0xFE	; 254
    9bbc:	ce 01       	movw	r24, r28
    9bbe:	83 57       	subi	r24, 0x73	; 115
    9bc0:	9e 4f       	sbci	r25, 0xFE	; 254
    9bc2:	fc 01       	movw	r30, r24
    9bc4:	60 81       	ld	r22, Z
    9bc6:	71 81       	ldd	r23, Z+1	; 0x01
    9bc8:	82 81       	ldd	r24, Z+2	; 0x02
    9bca:	93 81       	ldd	r25, Z+3	; 0x03
    9bcc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9bd0:	dc 01       	movw	r26, r24
    9bd2:	cb 01       	movw	r24, r22
    9bd4:	f8 01       	movw	r30, r16
    9bd6:	91 83       	std	Z+1, r25	; 0x01
    9bd8:	80 83       	st	Z, r24
    9bda:	ce 01       	movw	r24, r28
    9bdc:	8b 56       	subi	r24, 0x6B	; 107
    9bde:	9e 4f       	sbci	r25, 0xFE	; 254
    9be0:	9e 01       	movw	r18, r28
    9be2:	2f 56       	subi	r18, 0x6F	; 111
    9be4:	3e 4f       	sbci	r19, 0xFE	; 254
    9be6:	f9 01       	movw	r30, r18
    9be8:	20 81       	ld	r18, Z
    9bea:	31 81       	ldd	r19, Z+1	; 0x01
    9bec:	fc 01       	movw	r30, r24
    9bee:	31 83       	std	Z+1, r19	; 0x01
    9bf0:	20 83       	st	Z, r18
    9bf2:	ce 01       	movw	r24, r28
    9bf4:	8b 56       	subi	r24, 0x6B	; 107
    9bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    9bf8:	fc 01       	movw	r30, r24
    9bfa:	80 81       	ld	r24, Z
    9bfc:	91 81       	ldd	r25, Z+1	; 0x01
    9bfe:	8c 01       	movw	r16, r24
    9c00:	c8 01       	movw	r24, r16
    9c02:	01 97       	sbiw	r24, 0x01	; 1
    9c04:	f1 f7       	brne	.-4      	; 0x9c02 <pick_drop+0x2f50>
    9c06:	8c 01       	movw	r16, r24
    9c08:	ce 01       	movw	r24, r28
    9c0a:	8b 56       	subi	r24, 0x6B	; 107
    9c0c:	9e 4f       	sbci	r25, 0xFE	; 254
    9c0e:	fc 01       	movw	r30, r24
    9c10:	11 83       	std	Z+1, r17	; 0x01
    9c12:	00 83       	st	Z, r16
		_delay_ms(20);
		correct_right3();
    9c14:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    9c18:	9e 01       	movw	r18, r28
    9c1a:	29 56       	subi	r18, 0x69	; 105
    9c1c:	3e 4f       	sbci	r19, 0xFE	; 254
    9c1e:	80 e0       	ldi	r24, 0x00	; 0
    9c20:	90 e0       	ldi	r25, 0x00	; 0
    9c22:	a0 ef       	ldi	r26, 0xF0	; 240
    9c24:	b1 e4       	ldi	r27, 0x41	; 65
    9c26:	f9 01       	movw	r30, r18
    9c28:	80 83       	st	Z, r24
    9c2a:	91 83       	std	Z+1, r25	; 0x01
    9c2c:	a2 83       	std	Z+2, r26	; 0x02
    9c2e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9c30:	8e 01       	movw	r16, r28
    9c32:	05 56       	subi	r16, 0x65	; 101
    9c34:	1e 4f       	sbci	r17, 0xFE	; 254
    9c36:	ce 01       	movw	r24, r28
    9c38:	89 56       	subi	r24, 0x69	; 105
    9c3a:	9e 4f       	sbci	r25, 0xFE	; 254
    9c3c:	fc 01       	movw	r30, r24
    9c3e:	60 81       	ld	r22, Z
    9c40:	71 81       	ldd	r23, Z+1	; 0x01
    9c42:	82 81       	ldd	r24, Z+2	; 0x02
    9c44:	93 81       	ldd	r25, Z+3	; 0x03
    9c46:	26 e6       	ldi	r18, 0x66	; 102
    9c48:	36 e6       	ldi	r19, 0x66	; 102
    9c4a:	46 e6       	ldi	r20, 0x66	; 102
    9c4c:	55 e4       	ldi	r21, 0x45	; 69
    9c4e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9c52:	dc 01       	movw	r26, r24
    9c54:	cb 01       	movw	r24, r22
    9c56:	f8 01       	movw	r30, r16
    9c58:	80 83       	st	Z, r24
    9c5a:	91 83       	std	Z+1, r25	; 0x01
    9c5c:	a2 83       	std	Z+2, r26	; 0x02
    9c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9c60:	ce 01       	movw	r24, r28
    9c62:	85 56       	subi	r24, 0x65	; 101
    9c64:	9e 4f       	sbci	r25, 0xFE	; 254
    9c66:	11 e0       	ldi	r17, 0x01	; 1
    9c68:	fc 01       	movw	r30, r24
    9c6a:	60 81       	ld	r22, Z
    9c6c:	71 81       	ldd	r23, Z+1	; 0x01
    9c6e:	82 81       	ldd	r24, Z+2	; 0x02
    9c70:	93 81       	ldd	r25, Z+3	; 0x03
    9c72:	20 e0       	ldi	r18, 0x00	; 0
    9c74:	30 e0       	ldi	r19, 0x00	; 0
    9c76:	40 e8       	ldi	r20, 0x80	; 128
    9c78:	5f e3       	ldi	r21, 0x3F	; 63
    9c7a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    9c7e:	88 23       	and	r24, r24
    9c80:	0c f0       	brlt	.+2      	; 0x9c84 <pick_drop+0x2fd2>
    9c82:	10 e0       	ldi	r17, 0x00	; 0
    9c84:	11 23       	and	r17, r17
    9c86:	49 f0       	breq	.+18     	; 0x9c9a <pick_drop+0x2fe8>
		__ticks = 1;
    9c88:	ce 01       	movw	r24, r28
    9c8a:	81 56       	subi	r24, 0x61	; 97
    9c8c:	9e 4f       	sbci	r25, 0xFE	; 254
    9c8e:	21 e0       	ldi	r18, 0x01	; 1
    9c90:	30 e0       	ldi	r19, 0x00	; 0
    9c92:	fc 01       	movw	r30, r24
    9c94:	31 83       	std	Z+1, r19	; 0x01
    9c96:	20 83       	st	Z, r18
    9c98:	75 c0       	rjmp	.+234    	; 0x9d84 <pick_drop+0x30d2>
	else if (__tmp > 65535)
    9c9a:	ce 01       	movw	r24, r28
    9c9c:	85 56       	subi	r24, 0x65	; 101
    9c9e:	9e 4f       	sbci	r25, 0xFE	; 254
    9ca0:	11 e0       	ldi	r17, 0x01	; 1
    9ca2:	fc 01       	movw	r30, r24
    9ca4:	60 81       	ld	r22, Z
    9ca6:	71 81       	ldd	r23, Z+1	; 0x01
    9ca8:	82 81       	ldd	r24, Z+2	; 0x02
    9caa:	93 81       	ldd	r25, Z+3	; 0x03
    9cac:	20 e0       	ldi	r18, 0x00	; 0
    9cae:	3f ef       	ldi	r19, 0xFF	; 255
    9cb0:	4f e7       	ldi	r20, 0x7F	; 127
    9cb2:	57 e4       	ldi	r21, 0x47	; 71
    9cb4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    9cb8:	18 16       	cp	r1, r24
    9cba:	0c f0       	brlt	.+2      	; 0x9cbe <pick_drop+0x300c>
    9cbc:	10 e0       	ldi	r17, 0x00	; 0
    9cbe:	11 23       	and	r17, r17
    9cc0:	09 f4       	brne	.+2      	; 0x9cc4 <pick_drop+0x3012>
    9cc2:	4e c0       	rjmp	.+156    	; 0x9d60 <pick_drop+0x30ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9cc4:	ce 01       	movw	r24, r28
    9cc6:	89 56       	subi	r24, 0x69	; 105
    9cc8:	9e 4f       	sbci	r25, 0xFE	; 254
    9cca:	fc 01       	movw	r30, r24
    9ccc:	60 81       	ld	r22, Z
    9cce:	71 81       	ldd	r23, Z+1	; 0x01
    9cd0:	82 81       	ldd	r24, Z+2	; 0x02
    9cd2:	93 81       	ldd	r25, Z+3	; 0x03
    9cd4:	20 e0       	ldi	r18, 0x00	; 0
    9cd6:	30 e0       	ldi	r19, 0x00	; 0
    9cd8:	40 e2       	ldi	r20, 0x20	; 32
    9cda:	51 e4       	ldi	r21, 0x41	; 65
    9cdc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9ce0:	dc 01       	movw	r26, r24
    9ce2:	cb 01       	movw	r24, r22
    9ce4:	8e 01       	movw	r16, r28
    9ce6:	01 56       	subi	r16, 0x61	; 97
    9ce8:	1e 4f       	sbci	r17, 0xFE	; 254
    9cea:	bc 01       	movw	r22, r24
    9cec:	cd 01       	movw	r24, r26
    9cee:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9cf2:	dc 01       	movw	r26, r24
    9cf4:	cb 01       	movw	r24, r22
    9cf6:	f8 01       	movw	r30, r16
    9cf8:	91 83       	std	Z+1, r25	; 0x01
    9cfa:	80 83       	st	Z, r24
    9cfc:	27 c0       	rjmp	.+78     	; 0x9d4c <pick_drop+0x309a>
    9cfe:	ce 01       	movw	r24, r28
    9d00:	8f 55       	subi	r24, 0x5F	; 95
    9d02:	9e 4f       	sbci	r25, 0xFE	; 254
    9d04:	20 e7       	ldi	r18, 0x70	; 112
    9d06:	31 e0       	ldi	r19, 0x01	; 1
    9d08:	fc 01       	movw	r30, r24
    9d0a:	31 83       	std	Z+1, r19	; 0x01
    9d0c:	20 83       	st	Z, r18
    9d0e:	ce 01       	movw	r24, r28
    9d10:	8f 55       	subi	r24, 0x5F	; 95
    9d12:	9e 4f       	sbci	r25, 0xFE	; 254
    9d14:	fc 01       	movw	r30, r24
    9d16:	80 81       	ld	r24, Z
    9d18:	91 81       	ldd	r25, Z+1	; 0x01
    9d1a:	8c 01       	movw	r16, r24
    9d1c:	c8 01       	movw	r24, r16
    9d1e:	01 97       	sbiw	r24, 0x01	; 1
    9d20:	f1 f7       	brne	.-4      	; 0x9d1e <pick_drop+0x306c>
    9d22:	8c 01       	movw	r16, r24
    9d24:	ce 01       	movw	r24, r28
    9d26:	8f 55       	subi	r24, 0x5F	; 95
    9d28:	9e 4f       	sbci	r25, 0xFE	; 254
    9d2a:	fc 01       	movw	r30, r24
    9d2c:	11 83       	std	Z+1, r17	; 0x01
    9d2e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d30:	ce 01       	movw	r24, r28
    9d32:	81 56       	subi	r24, 0x61	; 97
    9d34:	9e 4f       	sbci	r25, 0xFE	; 254
    9d36:	9e 01       	movw	r18, r28
    9d38:	21 56       	subi	r18, 0x61	; 97
    9d3a:	3e 4f       	sbci	r19, 0xFE	; 254
    9d3c:	f9 01       	movw	r30, r18
    9d3e:	20 81       	ld	r18, Z
    9d40:	31 81       	ldd	r19, Z+1	; 0x01
    9d42:	21 50       	subi	r18, 0x01	; 1
    9d44:	30 40       	sbci	r19, 0x00	; 0
    9d46:	fc 01       	movw	r30, r24
    9d48:	31 83       	std	Z+1, r19	; 0x01
    9d4a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d4c:	ce 01       	movw	r24, r28
    9d4e:	81 56       	subi	r24, 0x61	; 97
    9d50:	9e 4f       	sbci	r25, 0xFE	; 254
    9d52:	fc 01       	movw	r30, r24
    9d54:	80 81       	ld	r24, Z
    9d56:	91 81       	ldd	r25, Z+1	; 0x01
    9d58:	00 97       	sbiw	r24, 0x00	; 0
    9d5a:	89 f6       	brne	.-94     	; 0x9cfe <pick_drop+0x304c>
    9d5c:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9d60:	8e 01       	movw	r16, r28
    9d62:	01 56       	subi	r16, 0x61	; 97
    9d64:	1e 4f       	sbci	r17, 0xFE	; 254
    9d66:	ce 01       	movw	r24, r28
    9d68:	85 56       	subi	r24, 0x65	; 101
    9d6a:	9e 4f       	sbci	r25, 0xFE	; 254
    9d6c:	fc 01       	movw	r30, r24
    9d6e:	60 81       	ld	r22, Z
    9d70:	71 81       	ldd	r23, Z+1	; 0x01
    9d72:	82 81       	ldd	r24, Z+2	; 0x02
    9d74:	93 81       	ldd	r25, Z+3	; 0x03
    9d76:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9d7a:	dc 01       	movw	r26, r24
    9d7c:	cb 01       	movw	r24, r22
    9d7e:	f8 01       	movw	r30, r16
    9d80:	91 83       	std	Z+1, r25	; 0x01
    9d82:	80 83       	st	Z, r24
    9d84:	ce 01       	movw	r24, r28
    9d86:	8d 55       	subi	r24, 0x5D	; 93
    9d88:	9e 4f       	sbci	r25, 0xFE	; 254
    9d8a:	9e 01       	movw	r18, r28
    9d8c:	21 56       	subi	r18, 0x61	; 97
    9d8e:	3e 4f       	sbci	r19, 0xFE	; 254
    9d90:	f9 01       	movw	r30, r18
    9d92:	20 81       	ld	r18, Z
    9d94:	31 81       	ldd	r19, Z+1	; 0x01
    9d96:	fc 01       	movw	r30, r24
    9d98:	31 83       	std	Z+1, r19	; 0x01
    9d9a:	20 83       	st	Z, r18
    9d9c:	ce 01       	movw	r24, r28
    9d9e:	8d 55       	subi	r24, 0x5D	; 93
    9da0:	9e 4f       	sbci	r25, 0xFE	; 254
    9da2:	fc 01       	movw	r30, r24
    9da4:	80 81       	ld	r24, Z
    9da6:	91 81       	ldd	r25, Z+1	; 0x01
    9da8:	8c 01       	movw	r16, r24
    9daa:	c8 01       	movw	r24, r16
    9dac:	01 97       	sbiw	r24, 0x01	; 1
    9dae:	f1 f7       	brne	.-4      	; 0x9dac <pick_drop+0x30fa>
    9db0:	8c 01       	movw	r16, r24
    9db2:	ce 01       	movw	r24, r28
    9db4:	8d 55       	subi	r24, 0x5D	; 93
    9db6:	9e 4f       	sbci	r25, 0xFE	; 254
    9db8:	fc 01       	movw	r30, r24
    9dba:	11 83       	std	Z+1, r17	; 0x01
    9dbc:	00 83       	st	Z, r16
    9dbe:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
		_delay_ms(30);
	}
	else if(pd=='4'){
    9dc2:	ce 01       	movw	r24, r28
    9dc4:	89 51       	subi	r24, 0x19	; 25
    9dc6:	9d 4f       	sbci	r25, 0xFD	; 253
    9dc8:	fc 01       	movw	r30, r24
    9dca:	80 81       	ld	r24, Z
    9dcc:	84 33       	cpi	r24, 0x34	; 52
    9dce:	09 f0       	breq	.+2      	; 0x9dd2 <pick_drop+0x3120>
    9dd0:	44 c4       	rjmp	.+2184   	; 0xa65a <pick_drop+0x39a8>
		// first node
		if(master_path[node-1]=='N'){
    9dd2:	80 91 6d 03 	lds	r24, 0x036D
    9dd6:	90 91 6e 03 	lds	r25, 0x036E
    9dda:	01 97       	sbiw	r24, 0x01	; 1
    9ddc:	8f 58       	subi	r24, 0x8F	; 143
    9dde:	9c 4f       	sbci	r25, 0xFC	; 252
    9de0:	fc 01       	movw	r30, r24
    9de2:	80 81       	ld	r24, Z
    9de4:	8e 34       	cpi	r24, 0x4E	; 78
    9de6:	09 f0       	breq	.+2      	; 0x9dea <pick_drop+0x3138>
    9de8:	61 c3       	rjmp	.+1730   	; 0xa4ac <pick_drop+0x37fa>
		forward_mm(35);
    9dea:	83 e2       	ldi	r24, 0x23	; 35
    9dec:	90 e0       	ldi	r25, 0x00	; 0
    9dee:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		spl_left();
    9df2:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
		back_mm(25);
    9df6:	89 e1       	ldi	r24, 0x19	; 25
    9df8:	90 e0       	ldi	r25, 0x00	; 0
    9dfa:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    9dfe:	9e 01       	movw	r18, r28
    9e00:	2b 55       	subi	r18, 0x5B	; 91
    9e02:	3e 4f       	sbci	r19, 0xFE	; 254
    9e04:	80 e0       	ldi	r24, 0x00	; 0
    9e06:	90 e0       	ldi	r25, 0x00	; 0
    9e08:	a0 ea       	ldi	r26, 0xA0	; 160
    9e0a:	b1 e4       	ldi	r27, 0x41	; 65
    9e0c:	f9 01       	movw	r30, r18
    9e0e:	80 83       	st	Z, r24
    9e10:	91 83       	std	Z+1, r25	; 0x01
    9e12:	a2 83       	std	Z+2, r26	; 0x02
    9e14:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9e16:	8e 01       	movw	r16, r28
    9e18:	07 55       	subi	r16, 0x57	; 87
    9e1a:	1e 4f       	sbci	r17, 0xFE	; 254
    9e1c:	ce 01       	movw	r24, r28
    9e1e:	8b 55       	subi	r24, 0x5B	; 91
    9e20:	9e 4f       	sbci	r25, 0xFE	; 254
    9e22:	fc 01       	movw	r30, r24
    9e24:	60 81       	ld	r22, Z
    9e26:	71 81       	ldd	r23, Z+1	; 0x01
    9e28:	82 81       	ldd	r24, Z+2	; 0x02
    9e2a:	93 81       	ldd	r25, Z+3	; 0x03
    9e2c:	26 e6       	ldi	r18, 0x66	; 102
    9e2e:	36 e6       	ldi	r19, 0x66	; 102
    9e30:	46 e6       	ldi	r20, 0x66	; 102
    9e32:	55 e4       	ldi	r21, 0x45	; 69
    9e34:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9e38:	dc 01       	movw	r26, r24
    9e3a:	cb 01       	movw	r24, r22
    9e3c:	f8 01       	movw	r30, r16
    9e3e:	80 83       	st	Z, r24
    9e40:	91 83       	std	Z+1, r25	; 0x01
    9e42:	a2 83       	std	Z+2, r26	; 0x02
    9e44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9e46:	ce 01       	movw	r24, r28
    9e48:	87 55       	subi	r24, 0x57	; 87
    9e4a:	9e 4f       	sbci	r25, 0xFE	; 254
    9e4c:	11 e0       	ldi	r17, 0x01	; 1
    9e4e:	fc 01       	movw	r30, r24
    9e50:	60 81       	ld	r22, Z
    9e52:	71 81       	ldd	r23, Z+1	; 0x01
    9e54:	82 81       	ldd	r24, Z+2	; 0x02
    9e56:	93 81       	ldd	r25, Z+3	; 0x03
    9e58:	20 e0       	ldi	r18, 0x00	; 0
    9e5a:	30 e0       	ldi	r19, 0x00	; 0
    9e5c:	40 e8       	ldi	r20, 0x80	; 128
    9e5e:	5f e3       	ldi	r21, 0x3F	; 63
    9e60:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    9e64:	88 23       	and	r24, r24
    9e66:	0c f0       	brlt	.+2      	; 0x9e6a <pick_drop+0x31b8>
    9e68:	10 e0       	ldi	r17, 0x00	; 0
    9e6a:	11 23       	and	r17, r17
    9e6c:	49 f0       	breq	.+18     	; 0x9e80 <pick_drop+0x31ce>
		__ticks = 1;
    9e6e:	ce 01       	movw	r24, r28
    9e70:	83 55       	subi	r24, 0x53	; 83
    9e72:	9e 4f       	sbci	r25, 0xFE	; 254
    9e74:	21 e0       	ldi	r18, 0x01	; 1
    9e76:	30 e0       	ldi	r19, 0x00	; 0
    9e78:	fc 01       	movw	r30, r24
    9e7a:	31 83       	std	Z+1, r19	; 0x01
    9e7c:	20 83       	st	Z, r18
    9e7e:	74 c0       	rjmp	.+232    	; 0x9f68 <pick_drop+0x32b6>
	else if (__tmp > 65535)
    9e80:	ce 01       	movw	r24, r28
    9e82:	87 55       	subi	r24, 0x57	; 87
    9e84:	9e 4f       	sbci	r25, 0xFE	; 254
    9e86:	11 e0       	ldi	r17, 0x01	; 1
    9e88:	fc 01       	movw	r30, r24
    9e8a:	60 81       	ld	r22, Z
    9e8c:	71 81       	ldd	r23, Z+1	; 0x01
    9e8e:	82 81       	ldd	r24, Z+2	; 0x02
    9e90:	93 81       	ldd	r25, Z+3	; 0x03
    9e92:	20 e0       	ldi	r18, 0x00	; 0
    9e94:	3f ef       	ldi	r19, 0xFF	; 255
    9e96:	4f e7       	ldi	r20, 0x7F	; 127
    9e98:	57 e4       	ldi	r21, 0x47	; 71
    9e9a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    9e9e:	18 16       	cp	r1, r24
    9ea0:	0c f0       	brlt	.+2      	; 0x9ea4 <pick_drop+0x31f2>
    9ea2:	10 e0       	ldi	r17, 0x00	; 0
    9ea4:	11 23       	and	r17, r17
    9ea6:	09 f4       	brne	.+2      	; 0x9eaa <pick_drop+0x31f8>
    9ea8:	4d c0       	rjmp	.+154    	; 0x9f44 <pick_drop+0x3292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9eaa:	ce 01       	movw	r24, r28
    9eac:	8b 55       	subi	r24, 0x5B	; 91
    9eae:	9e 4f       	sbci	r25, 0xFE	; 254
    9eb0:	fc 01       	movw	r30, r24
    9eb2:	60 81       	ld	r22, Z
    9eb4:	71 81       	ldd	r23, Z+1	; 0x01
    9eb6:	82 81       	ldd	r24, Z+2	; 0x02
    9eb8:	93 81       	ldd	r25, Z+3	; 0x03
    9eba:	20 e0       	ldi	r18, 0x00	; 0
    9ebc:	30 e0       	ldi	r19, 0x00	; 0
    9ebe:	40 e2       	ldi	r20, 0x20	; 32
    9ec0:	51 e4       	ldi	r21, 0x41	; 65
    9ec2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9ec6:	dc 01       	movw	r26, r24
    9ec8:	cb 01       	movw	r24, r22
    9eca:	8e 01       	movw	r16, r28
    9ecc:	03 55       	subi	r16, 0x53	; 83
    9ece:	1e 4f       	sbci	r17, 0xFE	; 254
    9ed0:	bc 01       	movw	r22, r24
    9ed2:	cd 01       	movw	r24, r26
    9ed4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9ed8:	dc 01       	movw	r26, r24
    9eda:	cb 01       	movw	r24, r22
    9edc:	f8 01       	movw	r30, r16
    9ede:	91 83       	std	Z+1, r25	; 0x01
    9ee0:	80 83       	st	Z, r24
    9ee2:	27 c0       	rjmp	.+78     	; 0x9f32 <pick_drop+0x3280>
    9ee4:	ce 01       	movw	r24, r28
    9ee6:	81 55       	subi	r24, 0x51	; 81
    9ee8:	9e 4f       	sbci	r25, 0xFE	; 254
    9eea:	20 e7       	ldi	r18, 0x70	; 112
    9eec:	31 e0       	ldi	r19, 0x01	; 1
    9eee:	fc 01       	movw	r30, r24
    9ef0:	31 83       	std	Z+1, r19	; 0x01
    9ef2:	20 83       	st	Z, r18
    9ef4:	ce 01       	movw	r24, r28
    9ef6:	81 55       	subi	r24, 0x51	; 81
    9ef8:	9e 4f       	sbci	r25, 0xFE	; 254
    9efa:	fc 01       	movw	r30, r24
    9efc:	80 81       	ld	r24, Z
    9efe:	91 81       	ldd	r25, Z+1	; 0x01
    9f00:	8c 01       	movw	r16, r24
    9f02:	c8 01       	movw	r24, r16
    9f04:	01 97       	sbiw	r24, 0x01	; 1
    9f06:	f1 f7       	brne	.-4      	; 0x9f04 <pick_drop+0x3252>
    9f08:	8c 01       	movw	r16, r24
    9f0a:	ce 01       	movw	r24, r28
    9f0c:	81 55       	subi	r24, 0x51	; 81
    9f0e:	9e 4f       	sbci	r25, 0xFE	; 254
    9f10:	fc 01       	movw	r30, r24
    9f12:	11 83       	std	Z+1, r17	; 0x01
    9f14:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f16:	ce 01       	movw	r24, r28
    9f18:	83 55       	subi	r24, 0x53	; 83
    9f1a:	9e 4f       	sbci	r25, 0xFE	; 254
    9f1c:	9e 01       	movw	r18, r28
    9f1e:	23 55       	subi	r18, 0x53	; 83
    9f20:	3e 4f       	sbci	r19, 0xFE	; 254
    9f22:	f9 01       	movw	r30, r18
    9f24:	20 81       	ld	r18, Z
    9f26:	31 81       	ldd	r19, Z+1	; 0x01
    9f28:	21 50       	subi	r18, 0x01	; 1
    9f2a:	30 40       	sbci	r19, 0x00	; 0
    9f2c:	fc 01       	movw	r30, r24
    9f2e:	31 83       	std	Z+1, r19	; 0x01
    9f30:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f32:	ce 01       	movw	r24, r28
    9f34:	83 55       	subi	r24, 0x53	; 83
    9f36:	9e 4f       	sbci	r25, 0xFE	; 254
    9f38:	fc 01       	movw	r30, r24
    9f3a:	80 81       	ld	r24, Z
    9f3c:	91 81       	ldd	r25, Z+1	; 0x01
    9f3e:	00 97       	sbiw	r24, 0x00	; 0
    9f40:	89 f6       	brne	.-94     	; 0x9ee4 <pick_drop+0x3232>
    9f42:	2f c0       	rjmp	.+94     	; 0x9fa2 <pick_drop+0x32f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9f44:	8e 01       	movw	r16, r28
    9f46:	03 55       	subi	r16, 0x53	; 83
    9f48:	1e 4f       	sbci	r17, 0xFE	; 254
    9f4a:	ce 01       	movw	r24, r28
    9f4c:	87 55       	subi	r24, 0x57	; 87
    9f4e:	9e 4f       	sbci	r25, 0xFE	; 254
    9f50:	fc 01       	movw	r30, r24
    9f52:	60 81       	ld	r22, Z
    9f54:	71 81       	ldd	r23, Z+1	; 0x01
    9f56:	82 81       	ldd	r24, Z+2	; 0x02
    9f58:	93 81       	ldd	r25, Z+3	; 0x03
    9f5a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    9f5e:	dc 01       	movw	r26, r24
    9f60:	cb 01       	movw	r24, r22
    9f62:	f8 01       	movw	r30, r16
    9f64:	91 83       	std	Z+1, r25	; 0x01
    9f66:	80 83       	st	Z, r24
    9f68:	ce 01       	movw	r24, r28
    9f6a:	8f 54       	subi	r24, 0x4F	; 79
    9f6c:	9e 4f       	sbci	r25, 0xFE	; 254
    9f6e:	9e 01       	movw	r18, r28
    9f70:	23 55       	subi	r18, 0x53	; 83
    9f72:	3e 4f       	sbci	r19, 0xFE	; 254
    9f74:	f9 01       	movw	r30, r18
    9f76:	20 81       	ld	r18, Z
    9f78:	31 81       	ldd	r19, Z+1	; 0x01
    9f7a:	fc 01       	movw	r30, r24
    9f7c:	31 83       	std	Z+1, r19	; 0x01
    9f7e:	20 83       	st	Z, r18
    9f80:	ce 01       	movw	r24, r28
    9f82:	8f 54       	subi	r24, 0x4F	; 79
    9f84:	9e 4f       	sbci	r25, 0xFE	; 254
    9f86:	fc 01       	movw	r30, r24
    9f88:	80 81       	ld	r24, Z
    9f8a:	91 81       	ldd	r25, Z+1	; 0x01
    9f8c:	8c 01       	movw	r16, r24
    9f8e:	c8 01       	movw	r24, r16
    9f90:	01 97       	sbiw	r24, 0x01	; 1
    9f92:	f1 f7       	brne	.-4      	; 0x9f90 <pick_drop+0x32de>
    9f94:	8c 01       	movw	r16, r24
    9f96:	ce 01       	movw	r24, r28
    9f98:	8f 54       	subi	r24, 0x4F	; 79
    9f9a:	9e 4f       	sbci	r25, 0xFE	; 254
    9f9c:	fc 01       	movw	r30, r24
    9f9e:	11 83       	std	Z+1, r17	; 0x01
    9fa0:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    9fa2:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
		forward_mm(25);
    9fa6:	89 e1       	ldi	r24, 0x19	; 25
    9fa8:	90 e0       	ldi	r25, 0x00	; 0
    9faa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    9fae:	9e 01       	movw	r18, r28
    9fb0:	2d 54       	subi	r18, 0x4D	; 77
    9fb2:	3e 4f       	sbci	r19, 0xFE	; 254
    9fb4:	80 e0       	ldi	r24, 0x00	; 0
    9fb6:	90 e0       	ldi	r25, 0x00	; 0
    9fb8:	a0 ea       	ldi	r26, 0xA0	; 160
    9fba:	b1 e4       	ldi	r27, 0x41	; 65
    9fbc:	f9 01       	movw	r30, r18
    9fbe:	80 83       	st	Z, r24
    9fc0:	91 83       	std	Z+1, r25	; 0x01
    9fc2:	a2 83       	std	Z+2, r26	; 0x02
    9fc4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9fc6:	8e 01       	movw	r16, r28
    9fc8:	09 54       	subi	r16, 0x49	; 73
    9fca:	1e 4f       	sbci	r17, 0xFE	; 254
    9fcc:	ce 01       	movw	r24, r28
    9fce:	8d 54       	subi	r24, 0x4D	; 77
    9fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    9fd2:	fc 01       	movw	r30, r24
    9fd4:	60 81       	ld	r22, Z
    9fd6:	71 81       	ldd	r23, Z+1	; 0x01
    9fd8:	82 81       	ldd	r24, Z+2	; 0x02
    9fda:	93 81       	ldd	r25, Z+3	; 0x03
    9fdc:	26 e6       	ldi	r18, 0x66	; 102
    9fde:	36 e6       	ldi	r19, 0x66	; 102
    9fe0:	46 e6       	ldi	r20, 0x66	; 102
    9fe2:	55 e4       	ldi	r21, 0x45	; 69
    9fe4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    9fe8:	dc 01       	movw	r26, r24
    9fea:	cb 01       	movw	r24, r22
    9fec:	f8 01       	movw	r30, r16
    9fee:	80 83       	st	Z, r24
    9ff0:	91 83       	std	Z+1, r25	; 0x01
    9ff2:	a2 83       	std	Z+2, r26	; 0x02
    9ff4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9ff6:	ce 01       	movw	r24, r28
    9ff8:	89 54       	subi	r24, 0x49	; 73
    9ffa:	9e 4f       	sbci	r25, 0xFE	; 254
    9ffc:	11 e0       	ldi	r17, 0x01	; 1
    9ffe:	fc 01       	movw	r30, r24
    a000:	60 81       	ld	r22, Z
    a002:	71 81       	ldd	r23, Z+1	; 0x01
    a004:	82 81       	ldd	r24, Z+2	; 0x02
    a006:	93 81       	ldd	r25, Z+3	; 0x03
    a008:	20 e0       	ldi	r18, 0x00	; 0
    a00a:	30 e0       	ldi	r19, 0x00	; 0
    a00c:	40 e8       	ldi	r20, 0x80	; 128
    a00e:	5f e3       	ldi	r21, 0x3F	; 63
    a010:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    a014:	88 23       	and	r24, r24
    a016:	0c f0       	brlt	.+2      	; 0xa01a <pick_drop+0x3368>
    a018:	10 e0       	ldi	r17, 0x00	; 0
    a01a:	11 23       	and	r17, r17
    a01c:	49 f0       	breq	.+18     	; 0xa030 <pick_drop+0x337e>
		__ticks = 1;
    a01e:	ce 01       	movw	r24, r28
    a020:	85 54       	subi	r24, 0x45	; 69
    a022:	9e 4f       	sbci	r25, 0xFE	; 254
    a024:	21 e0       	ldi	r18, 0x01	; 1
    a026:	30 e0       	ldi	r19, 0x00	; 0
    a028:	fc 01       	movw	r30, r24
    a02a:	31 83       	std	Z+1, r19	; 0x01
    a02c:	20 83       	st	Z, r18
    a02e:	74 c0       	rjmp	.+232    	; 0xa118 <pick_drop+0x3466>
	else if (__tmp > 65535)
    a030:	ce 01       	movw	r24, r28
    a032:	89 54       	subi	r24, 0x49	; 73
    a034:	9e 4f       	sbci	r25, 0xFE	; 254
    a036:	11 e0       	ldi	r17, 0x01	; 1
    a038:	fc 01       	movw	r30, r24
    a03a:	60 81       	ld	r22, Z
    a03c:	71 81       	ldd	r23, Z+1	; 0x01
    a03e:	82 81       	ldd	r24, Z+2	; 0x02
    a040:	93 81       	ldd	r25, Z+3	; 0x03
    a042:	20 e0       	ldi	r18, 0x00	; 0
    a044:	3f ef       	ldi	r19, 0xFF	; 255
    a046:	4f e7       	ldi	r20, 0x7F	; 127
    a048:	57 e4       	ldi	r21, 0x47	; 71
    a04a:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    a04e:	18 16       	cp	r1, r24
    a050:	0c f0       	brlt	.+2      	; 0xa054 <pick_drop+0x33a2>
    a052:	10 e0       	ldi	r17, 0x00	; 0
    a054:	11 23       	and	r17, r17
    a056:	09 f4       	brne	.+2      	; 0xa05a <pick_drop+0x33a8>
    a058:	4d c0       	rjmp	.+154    	; 0xa0f4 <pick_drop+0x3442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a05a:	ce 01       	movw	r24, r28
    a05c:	8d 54       	subi	r24, 0x4D	; 77
    a05e:	9e 4f       	sbci	r25, 0xFE	; 254
    a060:	fc 01       	movw	r30, r24
    a062:	60 81       	ld	r22, Z
    a064:	71 81       	ldd	r23, Z+1	; 0x01
    a066:	82 81       	ldd	r24, Z+2	; 0x02
    a068:	93 81       	ldd	r25, Z+3	; 0x03
    a06a:	20 e0       	ldi	r18, 0x00	; 0
    a06c:	30 e0       	ldi	r19, 0x00	; 0
    a06e:	40 e2       	ldi	r20, 0x20	; 32
    a070:	51 e4       	ldi	r21, 0x41	; 65
    a072:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a076:	dc 01       	movw	r26, r24
    a078:	cb 01       	movw	r24, r22
    a07a:	8e 01       	movw	r16, r28
    a07c:	05 54       	subi	r16, 0x45	; 69
    a07e:	1e 4f       	sbci	r17, 0xFE	; 254
    a080:	bc 01       	movw	r22, r24
    a082:	cd 01       	movw	r24, r26
    a084:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a088:	dc 01       	movw	r26, r24
    a08a:	cb 01       	movw	r24, r22
    a08c:	f8 01       	movw	r30, r16
    a08e:	91 83       	std	Z+1, r25	; 0x01
    a090:	80 83       	st	Z, r24
    a092:	27 c0       	rjmp	.+78     	; 0xa0e2 <pick_drop+0x3430>
    a094:	ce 01       	movw	r24, r28
    a096:	83 54       	subi	r24, 0x43	; 67
    a098:	9e 4f       	sbci	r25, 0xFE	; 254
    a09a:	20 e7       	ldi	r18, 0x70	; 112
    a09c:	31 e0       	ldi	r19, 0x01	; 1
    a09e:	fc 01       	movw	r30, r24
    a0a0:	31 83       	std	Z+1, r19	; 0x01
    a0a2:	20 83       	st	Z, r18
    a0a4:	ce 01       	movw	r24, r28
    a0a6:	83 54       	subi	r24, 0x43	; 67
    a0a8:	9e 4f       	sbci	r25, 0xFE	; 254
    a0aa:	fc 01       	movw	r30, r24
    a0ac:	80 81       	ld	r24, Z
    a0ae:	91 81       	ldd	r25, Z+1	; 0x01
    a0b0:	8c 01       	movw	r16, r24
    a0b2:	c8 01       	movw	r24, r16
    a0b4:	01 97       	sbiw	r24, 0x01	; 1
    a0b6:	f1 f7       	brne	.-4      	; 0xa0b4 <pick_drop+0x3402>
    a0b8:	8c 01       	movw	r16, r24
    a0ba:	ce 01       	movw	r24, r28
    a0bc:	83 54       	subi	r24, 0x43	; 67
    a0be:	9e 4f       	sbci	r25, 0xFE	; 254
    a0c0:	fc 01       	movw	r30, r24
    a0c2:	11 83       	std	Z+1, r17	; 0x01
    a0c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a0c6:	ce 01       	movw	r24, r28
    a0c8:	85 54       	subi	r24, 0x45	; 69
    a0ca:	9e 4f       	sbci	r25, 0xFE	; 254
    a0cc:	9e 01       	movw	r18, r28
    a0ce:	25 54       	subi	r18, 0x45	; 69
    a0d0:	3e 4f       	sbci	r19, 0xFE	; 254
    a0d2:	f9 01       	movw	r30, r18
    a0d4:	20 81       	ld	r18, Z
    a0d6:	31 81       	ldd	r19, Z+1	; 0x01
    a0d8:	21 50       	subi	r18, 0x01	; 1
    a0da:	30 40       	sbci	r19, 0x00	; 0
    a0dc:	fc 01       	movw	r30, r24
    a0de:	31 83       	std	Z+1, r19	; 0x01
    a0e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0e2:	ce 01       	movw	r24, r28
    a0e4:	85 54       	subi	r24, 0x45	; 69
    a0e6:	9e 4f       	sbci	r25, 0xFE	; 254
    a0e8:	fc 01       	movw	r30, r24
    a0ea:	80 81       	ld	r24, Z
    a0ec:	91 81       	ldd	r25, Z+1	; 0x01
    a0ee:	00 97       	sbiw	r24, 0x00	; 0
    a0f0:	89 f6       	brne	.-94     	; 0xa094 <pick_drop+0x33e2>
    a0f2:	2f c0       	rjmp	.+94     	; 0xa152 <pick_drop+0x34a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a0f4:	8e 01       	movw	r16, r28
    a0f6:	05 54       	subi	r16, 0x45	; 69
    a0f8:	1e 4f       	sbci	r17, 0xFE	; 254
    a0fa:	ce 01       	movw	r24, r28
    a0fc:	89 54       	subi	r24, 0x49	; 73
    a0fe:	9e 4f       	sbci	r25, 0xFE	; 254
    a100:	fc 01       	movw	r30, r24
    a102:	60 81       	ld	r22, Z
    a104:	71 81       	ldd	r23, Z+1	; 0x01
    a106:	82 81       	ldd	r24, Z+2	; 0x02
    a108:	93 81       	ldd	r25, Z+3	; 0x03
    a10a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a10e:	dc 01       	movw	r26, r24
    a110:	cb 01       	movw	r24, r22
    a112:	f8 01       	movw	r30, r16
    a114:	91 83       	std	Z+1, r25	; 0x01
    a116:	80 83       	st	Z, r24
    a118:	ce 01       	movw	r24, r28
    a11a:	81 54       	subi	r24, 0x41	; 65
    a11c:	9e 4f       	sbci	r25, 0xFE	; 254
    a11e:	9e 01       	movw	r18, r28
    a120:	25 54       	subi	r18, 0x45	; 69
    a122:	3e 4f       	sbci	r19, 0xFE	; 254
    a124:	f9 01       	movw	r30, r18
    a126:	20 81       	ld	r18, Z
    a128:	31 81       	ldd	r19, Z+1	; 0x01
    a12a:	fc 01       	movw	r30, r24
    a12c:	31 83       	std	Z+1, r19	; 0x01
    a12e:	20 83       	st	Z, r18
    a130:	ce 01       	movw	r24, r28
    a132:	81 54       	subi	r24, 0x41	; 65
    a134:	9e 4f       	sbci	r25, 0xFE	; 254
    a136:	fc 01       	movw	r30, r24
    a138:	80 81       	ld	r24, Z
    a13a:	91 81       	ldd	r25, Z+1	; 0x01
    a13c:	8c 01       	movw	r16, r24
    a13e:	c8 01       	movw	r24, r16
    a140:	01 97       	sbiw	r24, 0x01	; 1
    a142:	f1 f7       	brne	.-4      	; 0xa140 <pick_drop+0x348e>
    a144:	8c 01       	movw	r16, r24
    a146:	ce 01       	movw	r24, r28
    a148:	81 54       	subi	r24, 0x41	; 65
    a14a:	9e 4f       	sbci	r25, 0xFE	; 254
    a14c:	fc 01       	movw	r30, r24
    a14e:	11 83       	std	Z+1, r17	; 0x01
    a150:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_right();
    a152:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
    a156:	9e 01       	movw	r18, r28
    a158:	2f 53       	subi	r18, 0x3F	; 63
    a15a:	3e 4f       	sbci	r19, 0xFE	; 254
    a15c:	80 e0       	ldi	r24, 0x00	; 0
    a15e:	90 e0       	ldi	r25, 0x00	; 0
    a160:	a0 ea       	ldi	r26, 0xA0	; 160
    a162:	b1 e4       	ldi	r27, 0x41	; 65
    a164:	f9 01       	movw	r30, r18
    a166:	80 83       	st	Z, r24
    a168:	91 83       	std	Z+1, r25	; 0x01
    a16a:	a2 83       	std	Z+2, r26	; 0x02
    a16c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a16e:	8e 01       	movw	r16, r28
    a170:	0b 53       	subi	r16, 0x3B	; 59
    a172:	1e 4f       	sbci	r17, 0xFE	; 254
    a174:	ce 01       	movw	r24, r28
    a176:	8f 53       	subi	r24, 0x3F	; 63
    a178:	9e 4f       	sbci	r25, 0xFE	; 254
    a17a:	fc 01       	movw	r30, r24
    a17c:	60 81       	ld	r22, Z
    a17e:	71 81       	ldd	r23, Z+1	; 0x01
    a180:	82 81       	ldd	r24, Z+2	; 0x02
    a182:	93 81       	ldd	r25, Z+3	; 0x03
    a184:	26 e6       	ldi	r18, 0x66	; 102
    a186:	36 e6       	ldi	r19, 0x66	; 102
    a188:	46 e6       	ldi	r20, 0x66	; 102
    a18a:	55 e4       	ldi	r21, 0x45	; 69
    a18c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a190:	dc 01       	movw	r26, r24
    a192:	cb 01       	movw	r24, r22
    a194:	f8 01       	movw	r30, r16
    a196:	80 83       	st	Z, r24
    a198:	91 83       	std	Z+1, r25	; 0x01
    a19a:	a2 83       	std	Z+2, r26	; 0x02
    a19c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a19e:	ce 01       	movw	r24, r28
    a1a0:	8b 53       	subi	r24, 0x3B	; 59
    a1a2:	9e 4f       	sbci	r25, 0xFE	; 254
    a1a4:	11 e0       	ldi	r17, 0x01	; 1
    a1a6:	fc 01       	movw	r30, r24
    a1a8:	60 81       	ld	r22, Z
    a1aa:	71 81       	ldd	r23, Z+1	; 0x01
    a1ac:	82 81       	ldd	r24, Z+2	; 0x02
    a1ae:	93 81       	ldd	r25, Z+3	; 0x03
    a1b0:	20 e0       	ldi	r18, 0x00	; 0
    a1b2:	30 e0       	ldi	r19, 0x00	; 0
    a1b4:	40 e8       	ldi	r20, 0x80	; 128
    a1b6:	5f e3       	ldi	r21, 0x3F	; 63
    a1b8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    a1bc:	88 23       	and	r24, r24
    a1be:	0c f0       	brlt	.+2      	; 0xa1c2 <pick_drop+0x3510>
    a1c0:	10 e0       	ldi	r17, 0x00	; 0
    a1c2:	11 23       	and	r17, r17
    a1c4:	49 f0       	breq	.+18     	; 0xa1d8 <pick_drop+0x3526>
		__ticks = 1;
    a1c6:	ce 01       	movw	r24, r28
    a1c8:	87 53       	subi	r24, 0x37	; 55
    a1ca:	9e 4f       	sbci	r25, 0xFE	; 254
    a1cc:	21 e0       	ldi	r18, 0x01	; 1
    a1ce:	30 e0       	ldi	r19, 0x00	; 0
    a1d0:	fc 01       	movw	r30, r24
    a1d2:	31 83       	std	Z+1, r19	; 0x01
    a1d4:	20 83       	st	Z, r18
    a1d6:	74 c0       	rjmp	.+232    	; 0xa2c0 <pick_drop+0x360e>
	else if (__tmp > 65535)
    a1d8:	ce 01       	movw	r24, r28
    a1da:	8b 53       	subi	r24, 0x3B	; 59
    a1dc:	9e 4f       	sbci	r25, 0xFE	; 254
    a1de:	11 e0       	ldi	r17, 0x01	; 1
    a1e0:	fc 01       	movw	r30, r24
    a1e2:	60 81       	ld	r22, Z
    a1e4:	71 81       	ldd	r23, Z+1	; 0x01
    a1e6:	82 81       	ldd	r24, Z+2	; 0x02
    a1e8:	93 81       	ldd	r25, Z+3	; 0x03
    a1ea:	20 e0       	ldi	r18, 0x00	; 0
    a1ec:	3f ef       	ldi	r19, 0xFF	; 255
    a1ee:	4f e7       	ldi	r20, 0x7F	; 127
    a1f0:	57 e4       	ldi	r21, 0x47	; 71
    a1f2:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    a1f6:	18 16       	cp	r1, r24
    a1f8:	0c f0       	brlt	.+2      	; 0xa1fc <pick_drop+0x354a>
    a1fa:	10 e0       	ldi	r17, 0x00	; 0
    a1fc:	11 23       	and	r17, r17
    a1fe:	09 f4       	brne	.+2      	; 0xa202 <pick_drop+0x3550>
    a200:	4d c0       	rjmp	.+154    	; 0xa29c <pick_drop+0x35ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a202:	ce 01       	movw	r24, r28
    a204:	8f 53       	subi	r24, 0x3F	; 63
    a206:	9e 4f       	sbci	r25, 0xFE	; 254
    a208:	fc 01       	movw	r30, r24
    a20a:	60 81       	ld	r22, Z
    a20c:	71 81       	ldd	r23, Z+1	; 0x01
    a20e:	82 81       	ldd	r24, Z+2	; 0x02
    a210:	93 81       	ldd	r25, Z+3	; 0x03
    a212:	20 e0       	ldi	r18, 0x00	; 0
    a214:	30 e0       	ldi	r19, 0x00	; 0
    a216:	40 e2       	ldi	r20, 0x20	; 32
    a218:	51 e4       	ldi	r21, 0x41	; 65
    a21a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a21e:	dc 01       	movw	r26, r24
    a220:	cb 01       	movw	r24, r22
    a222:	8e 01       	movw	r16, r28
    a224:	07 53       	subi	r16, 0x37	; 55
    a226:	1e 4f       	sbci	r17, 0xFE	; 254
    a228:	bc 01       	movw	r22, r24
    a22a:	cd 01       	movw	r24, r26
    a22c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a230:	dc 01       	movw	r26, r24
    a232:	cb 01       	movw	r24, r22
    a234:	f8 01       	movw	r30, r16
    a236:	91 83       	std	Z+1, r25	; 0x01
    a238:	80 83       	st	Z, r24
    a23a:	27 c0       	rjmp	.+78     	; 0xa28a <pick_drop+0x35d8>
    a23c:	ce 01       	movw	r24, r28
    a23e:	85 53       	subi	r24, 0x35	; 53
    a240:	9e 4f       	sbci	r25, 0xFE	; 254
    a242:	20 e7       	ldi	r18, 0x70	; 112
    a244:	31 e0       	ldi	r19, 0x01	; 1
    a246:	fc 01       	movw	r30, r24
    a248:	31 83       	std	Z+1, r19	; 0x01
    a24a:	20 83       	st	Z, r18
    a24c:	ce 01       	movw	r24, r28
    a24e:	85 53       	subi	r24, 0x35	; 53
    a250:	9e 4f       	sbci	r25, 0xFE	; 254
    a252:	fc 01       	movw	r30, r24
    a254:	80 81       	ld	r24, Z
    a256:	91 81       	ldd	r25, Z+1	; 0x01
    a258:	8c 01       	movw	r16, r24
    a25a:	c8 01       	movw	r24, r16
    a25c:	01 97       	sbiw	r24, 0x01	; 1
    a25e:	f1 f7       	brne	.-4      	; 0xa25c <pick_drop+0x35aa>
    a260:	8c 01       	movw	r16, r24
    a262:	ce 01       	movw	r24, r28
    a264:	85 53       	subi	r24, 0x35	; 53
    a266:	9e 4f       	sbci	r25, 0xFE	; 254
    a268:	fc 01       	movw	r30, r24
    a26a:	11 83       	std	Z+1, r17	; 0x01
    a26c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a26e:	ce 01       	movw	r24, r28
    a270:	87 53       	subi	r24, 0x37	; 55
    a272:	9e 4f       	sbci	r25, 0xFE	; 254
    a274:	9e 01       	movw	r18, r28
    a276:	27 53       	subi	r18, 0x37	; 55
    a278:	3e 4f       	sbci	r19, 0xFE	; 254
    a27a:	f9 01       	movw	r30, r18
    a27c:	20 81       	ld	r18, Z
    a27e:	31 81       	ldd	r19, Z+1	; 0x01
    a280:	21 50       	subi	r18, 0x01	; 1
    a282:	30 40       	sbci	r19, 0x00	; 0
    a284:	fc 01       	movw	r30, r24
    a286:	31 83       	std	Z+1, r19	; 0x01
    a288:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a28a:	ce 01       	movw	r24, r28
    a28c:	87 53       	subi	r24, 0x37	; 55
    a28e:	9e 4f       	sbci	r25, 0xFE	; 254
    a290:	fc 01       	movw	r30, r24
    a292:	80 81       	ld	r24, Z
    a294:	91 81       	ldd	r25, Z+1	; 0x01
    a296:	00 97       	sbiw	r24, 0x00	; 0
    a298:	89 f6       	brne	.-94     	; 0xa23c <pick_drop+0x358a>
    a29a:	2f c0       	rjmp	.+94     	; 0xa2fa <pick_drop+0x3648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a29c:	8e 01       	movw	r16, r28
    a29e:	07 53       	subi	r16, 0x37	; 55
    a2a0:	1e 4f       	sbci	r17, 0xFE	; 254
    a2a2:	ce 01       	movw	r24, r28
    a2a4:	8b 53       	subi	r24, 0x3B	; 59
    a2a6:	9e 4f       	sbci	r25, 0xFE	; 254
    a2a8:	fc 01       	movw	r30, r24
    a2aa:	60 81       	ld	r22, Z
    a2ac:	71 81       	ldd	r23, Z+1	; 0x01
    a2ae:	82 81       	ldd	r24, Z+2	; 0x02
    a2b0:	93 81       	ldd	r25, Z+3	; 0x03
    a2b2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a2b6:	dc 01       	movw	r26, r24
    a2b8:	cb 01       	movw	r24, r22
    a2ba:	f8 01       	movw	r30, r16
    a2bc:	91 83       	std	Z+1, r25	; 0x01
    a2be:	80 83       	st	Z, r24
    a2c0:	ce 01       	movw	r24, r28
    a2c2:	83 53       	subi	r24, 0x33	; 51
    a2c4:	9e 4f       	sbci	r25, 0xFE	; 254
    a2c6:	9e 01       	movw	r18, r28
    a2c8:	27 53       	subi	r18, 0x37	; 55
    a2ca:	3e 4f       	sbci	r19, 0xFE	; 254
    a2cc:	f9 01       	movw	r30, r18
    a2ce:	20 81       	ld	r18, Z
    a2d0:	31 81       	ldd	r19, Z+1	; 0x01
    a2d2:	fc 01       	movw	r30, r24
    a2d4:	31 83       	std	Z+1, r19	; 0x01
    a2d6:	20 83       	st	Z, r18
    a2d8:	ce 01       	movw	r24, r28
    a2da:	83 53       	subi	r24, 0x33	; 51
    a2dc:	9e 4f       	sbci	r25, 0xFE	; 254
    a2de:	fc 01       	movw	r30, r24
    a2e0:	80 81       	ld	r24, Z
    a2e2:	91 81       	ldd	r25, Z+1	; 0x01
    a2e4:	8c 01       	movw	r16, r24
    a2e6:	c8 01       	movw	r24, r16
    a2e8:	01 97       	sbiw	r24, 0x01	; 1
    a2ea:	f1 f7       	brne	.-4      	; 0xa2e8 <pick_drop+0x3636>
    a2ec:	8c 01       	movw	r16, r24
    a2ee:	ce 01       	movw	r24, r28
    a2f0:	83 53       	subi	r24, 0x33	; 51
    a2f2:	9e 4f       	sbci	r25, 0xFE	; 254
    a2f4:	fc 01       	movw	r30, r24
    a2f6:	11 83       	std	Z+1, r17	; 0x01
    a2f8:	00 83       	st	Z, r16
		_delay_ms(20);
		back_mm(20);
    a2fa:	84 e1       	ldi	r24, 0x14	; 20
    a2fc:	90 e0       	ldi	r25, 0x00	; 0
    a2fe:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    a302:	9e 01       	movw	r18, r28
    a304:	21 53       	subi	r18, 0x31	; 49
    a306:	3e 4f       	sbci	r19, 0xFE	; 254
    a308:	80 e0       	ldi	r24, 0x00	; 0
    a30a:	90 e0       	ldi	r25, 0x00	; 0
    a30c:	a6 e9       	ldi	r26, 0x96	; 150
    a30e:	b3 e4       	ldi	r27, 0x43	; 67
    a310:	f9 01       	movw	r30, r18
    a312:	80 83       	st	Z, r24
    a314:	91 83       	std	Z+1, r25	; 0x01
    a316:	a2 83       	std	Z+2, r26	; 0x02
    a318:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a31a:	8e 01       	movw	r16, r28
    a31c:	0d 52       	subi	r16, 0x2D	; 45
    a31e:	1e 4f       	sbci	r17, 0xFE	; 254
    a320:	ce 01       	movw	r24, r28
    a322:	81 53       	subi	r24, 0x31	; 49
    a324:	9e 4f       	sbci	r25, 0xFE	; 254
    a326:	fc 01       	movw	r30, r24
    a328:	60 81       	ld	r22, Z
    a32a:	71 81       	ldd	r23, Z+1	; 0x01
    a32c:	82 81       	ldd	r24, Z+2	; 0x02
    a32e:	93 81       	ldd	r25, Z+3	; 0x03
    a330:	26 e6       	ldi	r18, 0x66	; 102
    a332:	36 e6       	ldi	r19, 0x66	; 102
    a334:	46 e6       	ldi	r20, 0x66	; 102
    a336:	55 e4       	ldi	r21, 0x45	; 69
    a338:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a33c:	dc 01       	movw	r26, r24
    a33e:	cb 01       	movw	r24, r22
    a340:	f8 01       	movw	r30, r16
    a342:	80 83       	st	Z, r24
    a344:	91 83       	std	Z+1, r25	; 0x01
    a346:	a2 83       	std	Z+2, r26	; 0x02
    a348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a34a:	ce 01       	movw	r24, r28
    a34c:	8d 52       	subi	r24, 0x2D	; 45
    a34e:	9e 4f       	sbci	r25, 0xFE	; 254
    a350:	11 e0       	ldi	r17, 0x01	; 1
    a352:	fc 01       	movw	r30, r24
    a354:	60 81       	ld	r22, Z
    a356:	71 81       	ldd	r23, Z+1	; 0x01
    a358:	82 81       	ldd	r24, Z+2	; 0x02
    a35a:	93 81       	ldd	r25, Z+3	; 0x03
    a35c:	20 e0       	ldi	r18, 0x00	; 0
    a35e:	30 e0       	ldi	r19, 0x00	; 0
    a360:	40 e8       	ldi	r20, 0x80	; 128
    a362:	5f e3       	ldi	r21, 0x3F	; 63
    a364:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    a368:	88 23       	and	r24, r24
    a36a:	0c f0       	brlt	.+2      	; 0xa36e <pick_drop+0x36bc>
    a36c:	10 e0       	ldi	r17, 0x00	; 0
    a36e:	11 23       	and	r17, r17
    a370:	49 f0       	breq	.+18     	; 0xa384 <pick_drop+0x36d2>
		__ticks = 1;
    a372:	ce 01       	movw	r24, r28
    a374:	89 52       	subi	r24, 0x29	; 41
    a376:	9e 4f       	sbci	r25, 0xFE	; 254
    a378:	21 e0       	ldi	r18, 0x01	; 1
    a37a:	30 e0       	ldi	r19, 0x00	; 0
    a37c:	fc 01       	movw	r30, r24
    a37e:	31 83       	std	Z+1, r19	; 0x01
    a380:	20 83       	st	Z, r18
    a382:	75 c0       	rjmp	.+234    	; 0xa46e <pick_drop+0x37bc>
	else if (__tmp > 65535)
    a384:	ce 01       	movw	r24, r28
    a386:	8d 52       	subi	r24, 0x2D	; 45
    a388:	9e 4f       	sbci	r25, 0xFE	; 254
    a38a:	11 e0       	ldi	r17, 0x01	; 1
    a38c:	fc 01       	movw	r30, r24
    a38e:	60 81       	ld	r22, Z
    a390:	71 81       	ldd	r23, Z+1	; 0x01
    a392:	82 81       	ldd	r24, Z+2	; 0x02
    a394:	93 81       	ldd	r25, Z+3	; 0x03
    a396:	20 e0       	ldi	r18, 0x00	; 0
    a398:	3f ef       	ldi	r19, 0xFF	; 255
    a39a:	4f e7       	ldi	r20, 0x7F	; 127
    a39c:	57 e4       	ldi	r21, 0x47	; 71
    a39e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    a3a2:	18 16       	cp	r1, r24
    a3a4:	0c f0       	brlt	.+2      	; 0xa3a8 <pick_drop+0x36f6>
    a3a6:	10 e0       	ldi	r17, 0x00	; 0
    a3a8:	11 23       	and	r17, r17
    a3aa:	09 f4       	brne	.+2      	; 0xa3ae <pick_drop+0x36fc>
    a3ac:	4e c0       	rjmp	.+156    	; 0xa44a <pick_drop+0x3798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a3ae:	ce 01       	movw	r24, r28
    a3b0:	81 53       	subi	r24, 0x31	; 49
    a3b2:	9e 4f       	sbci	r25, 0xFE	; 254
    a3b4:	fc 01       	movw	r30, r24
    a3b6:	60 81       	ld	r22, Z
    a3b8:	71 81       	ldd	r23, Z+1	; 0x01
    a3ba:	82 81       	ldd	r24, Z+2	; 0x02
    a3bc:	93 81       	ldd	r25, Z+3	; 0x03
    a3be:	20 e0       	ldi	r18, 0x00	; 0
    a3c0:	30 e0       	ldi	r19, 0x00	; 0
    a3c2:	40 e2       	ldi	r20, 0x20	; 32
    a3c4:	51 e4       	ldi	r21, 0x41	; 65
    a3c6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a3ca:	dc 01       	movw	r26, r24
    a3cc:	cb 01       	movw	r24, r22
    a3ce:	8e 01       	movw	r16, r28
    a3d0:	09 52       	subi	r16, 0x29	; 41
    a3d2:	1e 4f       	sbci	r17, 0xFE	; 254
    a3d4:	bc 01       	movw	r22, r24
    a3d6:	cd 01       	movw	r24, r26
    a3d8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a3dc:	dc 01       	movw	r26, r24
    a3de:	cb 01       	movw	r24, r22
    a3e0:	f8 01       	movw	r30, r16
    a3e2:	91 83       	std	Z+1, r25	; 0x01
    a3e4:	80 83       	st	Z, r24
    a3e6:	27 c0       	rjmp	.+78     	; 0xa436 <pick_drop+0x3784>
    a3e8:	ce 01       	movw	r24, r28
    a3ea:	87 52       	subi	r24, 0x27	; 39
    a3ec:	9e 4f       	sbci	r25, 0xFE	; 254
    a3ee:	20 e7       	ldi	r18, 0x70	; 112
    a3f0:	31 e0       	ldi	r19, 0x01	; 1
    a3f2:	fc 01       	movw	r30, r24
    a3f4:	31 83       	std	Z+1, r19	; 0x01
    a3f6:	20 83       	st	Z, r18
    a3f8:	ce 01       	movw	r24, r28
    a3fa:	87 52       	subi	r24, 0x27	; 39
    a3fc:	9e 4f       	sbci	r25, 0xFE	; 254
    a3fe:	fc 01       	movw	r30, r24
    a400:	80 81       	ld	r24, Z
    a402:	91 81       	ldd	r25, Z+1	; 0x01
    a404:	8c 01       	movw	r16, r24
    a406:	c8 01       	movw	r24, r16
    a408:	01 97       	sbiw	r24, 0x01	; 1
    a40a:	f1 f7       	brne	.-4      	; 0xa408 <pick_drop+0x3756>
    a40c:	8c 01       	movw	r16, r24
    a40e:	ce 01       	movw	r24, r28
    a410:	87 52       	subi	r24, 0x27	; 39
    a412:	9e 4f       	sbci	r25, 0xFE	; 254
    a414:	fc 01       	movw	r30, r24
    a416:	11 83       	std	Z+1, r17	; 0x01
    a418:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a41a:	ce 01       	movw	r24, r28
    a41c:	89 52       	subi	r24, 0x29	; 41
    a41e:	9e 4f       	sbci	r25, 0xFE	; 254
    a420:	9e 01       	movw	r18, r28
    a422:	29 52       	subi	r18, 0x29	; 41
    a424:	3e 4f       	sbci	r19, 0xFE	; 254
    a426:	f9 01       	movw	r30, r18
    a428:	20 81       	ld	r18, Z
    a42a:	31 81       	ldd	r19, Z+1	; 0x01
    a42c:	21 50       	subi	r18, 0x01	; 1
    a42e:	30 40       	sbci	r19, 0x00	; 0
    a430:	fc 01       	movw	r30, r24
    a432:	31 83       	std	Z+1, r19	; 0x01
    a434:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a436:	ce 01       	movw	r24, r28
    a438:	89 52       	subi	r24, 0x29	; 41
    a43a:	9e 4f       	sbci	r25, 0xFE	; 254
    a43c:	fc 01       	movw	r30, r24
    a43e:	80 81       	ld	r24, Z
    a440:	91 81       	ldd	r25, Z+1	; 0x01
    a442:	00 97       	sbiw	r24, 0x00	; 0
    a444:	89 f6       	brne	.-94     	; 0xa3e8 <pick_drop+0x3736>
    a446:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a44a:	8e 01       	movw	r16, r28
    a44c:	09 52       	subi	r16, 0x29	; 41
    a44e:	1e 4f       	sbci	r17, 0xFE	; 254
    a450:	ce 01       	movw	r24, r28
    a452:	8d 52       	subi	r24, 0x2D	; 45
    a454:	9e 4f       	sbci	r25, 0xFE	; 254
    a456:	fc 01       	movw	r30, r24
    a458:	60 81       	ld	r22, Z
    a45a:	71 81       	ldd	r23, Z+1	; 0x01
    a45c:	82 81       	ldd	r24, Z+2	; 0x02
    a45e:	93 81       	ldd	r25, Z+3	; 0x03
    a460:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a464:	dc 01       	movw	r26, r24
    a466:	cb 01       	movw	r24, r22
    a468:	f8 01       	movw	r30, r16
    a46a:	91 83       	std	Z+1, r25	; 0x01
    a46c:	80 83       	st	Z, r24
    a46e:	ce 01       	movw	r24, r28
    a470:	85 52       	subi	r24, 0x25	; 37
    a472:	9e 4f       	sbci	r25, 0xFE	; 254
    a474:	9e 01       	movw	r18, r28
    a476:	29 52       	subi	r18, 0x29	; 41
    a478:	3e 4f       	sbci	r19, 0xFE	; 254
    a47a:	f9 01       	movw	r30, r18
    a47c:	20 81       	ld	r18, Z
    a47e:	31 81       	ldd	r19, Z+1	; 0x01
    a480:	fc 01       	movw	r30, r24
    a482:	31 83       	std	Z+1, r19	; 0x01
    a484:	20 83       	st	Z, r18
    a486:	ce 01       	movw	r24, r28
    a488:	85 52       	subi	r24, 0x25	; 37
    a48a:	9e 4f       	sbci	r25, 0xFE	; 254
    a48c:	fc 01       	movw	r30, r24
    a48e:	80 81       	ld	r24, Z
    a490:	91 81       	ldd	r25, Z+1	; 0x01
    a492:	8c 01       	movw	r16, r24
    a494:	c8 01       	movw	r24, r16
    a496:	01 97       	sbiw	r24, 0x01	; 1
    a498:	f1 f7       	brne	.-4      	; 0xa496 <pick_drop+0x37e4>
    a49a:	8c 01       	movw	r16, r24
    a49c:	ce 01       	movw	r24, r28
    a49e:	85 52       	subi	r24, 0x25	; 37
    a4a0:	9e 4f       	sbci	r25, 0xFE	; 254
    a4a2:	fc 01       	movw	r30, r24
    a4a4:	11 83       	std	Z+1, r17	; 0x01
    a4a6:	00 83       	st	Z, r16
    a4a8:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
		_delay_ms(300);}
		else
		{
			front();
    a4ac:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    a4b0:	9e 01       	movw	r18, r28
    a4b2:	23 52       	subi	r18, 0x23	; 35
    a4b4:	3e 4f       	sbci	r19, 0xFE	; 254
    a4b6:	80 e0       	ldi	r24, 0x00	; 0
    a4b8:	90 e0       	ldi	r25, 0x00	; 0
    a4ba:	a6 e9       	ldi	r26, 0x96	; 150
    a4bc:	b3 e4       	ldi	r27, 0x43	; 67
    a4be:	f9 01       	movw	r30, r18
    a4c0:	80 83       	st	Z, r24
    a4c2:	91 83       	std	Z+1, r25	; 0x01
    a4c4:	a2 83       	std	Z+2, r26	; 0x02
    a4c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a4c8:	8e 01       	movw	r16, r28
    a4ca:	0f 51       	subi	r16, 0x1F	; 31
    a4cc:	1e 4f       	sbci	r17, 0xFE	; 254
    a4ce:	ce 01       	movw	r24, r28
    a4d0:	83 52       	subi	r24, 0x23	; 35
    a4d2:	9e 4f       	sbci	r25, 0xFE	; 254
    a4d4:	fc 01       	movw	r30, r24
    a4d6:	60 81       	ld	r22, Z
    a4d8:	71 81       	ldd	r23, Z+1	; 0x01
    a4da:	82 81       	ldd	r24, Z+2	; 0x02
    a4dc:	93 81       	ldd	r25, Z+3	; 0x03
    a4de:	26 e6       	ldi	r18, 0x66	; 102
    a4e0:	36 e6       	ldi	r19, 0x66	; 102
    a4e2:	46 e6       	ldi	r20, 0x66	; 102
    a4e4:	55 e4       	ldi	r21, 0x45	; 69
    a4e6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a4ea:	dc 01       	movw	r26, r24
    a4ec:	cb 01       	movw	r24, r22
    a4ee:	f8 01       	movw	r30, r16
    a4f0:	80 83       	st	Z, r24
    a4f2:	91 83       	std	Z+1, r25	; 0x01
    a4f4:	a2 83       	std	Z+2, r26	; 0x02
    a4f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a4f8:	ce 01       	movw	r24, r28
    a4fa:	8f 51       	subi	r24, 0x1F	; 31
    a4fc:	9e 4f       	sbci	r25, 0xFE	; 254
    a4fe:	11 e0       	ldi	r17, 0x01	; 1
    a500:	fc 01       	movw	r30, r24
    a502:	60 81       	ld	r22, Z
    a504:	71 81       	ldd	r23, Z+1	; 0x01
    a506:	82 81       	ldd	r24, Z+2	; 0x02
    a508:	93 81       	ldd	r25, Z+3	; 0x03
    a50a:	20 e0       	ldi	r18, 0x00	; 0
    a50c:	30 e0       	ldi	r19, 0x00	; 0
    a50e:	40 e8       	ldi	r20, 0x80	; 128
    a510:	5f e3       	ldi	r21, 0x3F	; 63
    a512:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    a516:	88 23       	and	r24, r24
    a518:	0c f0       	brlt	.+2      	; 0xa51c <pick_drop+0x386a>
    a51a:	10 e0       	ldi	r17, 0x00	; 0
    a51c:	11 23       	and	r17, r17
    a51e:	49 f0       	breq	.+18     	; 0xa532 <pick_drop+0x3880>
		__ticks = 1;
    a520:	ce 01       	movw	r24, r28
    a522:	8b 51       	subi	r24, 0x1B	; 27
    a524:	9e 4f       	sbci	r25, 0xFE	; 254
    a526:	21 e0       	ldi	r18, 0x01	; 1
    a528:	30 e0       	ldi	r19, 0x00	; 0
    a52a:	fc 01       	movw	r30, r24
    a52c:	31 83       	std	Z+1, r19	; 0x01
    a52e:	20 83       	st	Z, r18
    a530:	75 c0       	rjmp	.+234    	; 0xa61c <pick_drop+0x396a>
	else if (__tmp > 65535)
    a532:	ce 01       	movw	r24, r28
    a534:	8f 51       	subi	r24, 0x1F	; 31
    a536:	9e 4f       	sbci	r25, 0xFE	; 254
    a538:	11 e0       	ldi	r17, 0x01	; 1
    a53a:	fc 01       	movw	r30, r24
    a53c:	60 81       	ld	r22, Z
    a53e:	71 81       	ldd	r23, Z+1	; 0x01
    a540:	82 81       	ldd	r24, Z+2	; 0x02
    a542:	93 81       	ldd	r25, Z+3	; 0x03
    a544:	20 e0       	ldi	r18, 0x00	; 0
    a546:	3f ef       	ldi	r19, 0xFF	; 255
    a548:	4f e7       	ldi	r20, 0x7F	; 127
    a54a:	57 e4       	ldi	r21, 0x47	; 71
    a54c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    a550:	18 16       	cp	r1, r24
    a552:	0c f0       	brlt	.+2      	; 0xa556 <pick_drop+0x38a4>
    a554:	10 e0       	ldi	r17, 0x00	; 0
    a556:	11 23       	and	r17, r17
    a558:	09 f4       	brne	.+2      	; 0xa55c <pick_drop+0x38aa>
    a55a:	4e c0       	rjmp	.+156    	; 0xa5f8 <pick_drop+0x3946>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a55c:	ce 01       	movw	r24, r28
    a55e:	83 52       	subi	r24, 0x23	; 35
    a560:	9e 4f       	sbci	r25, 0xFE	; 254
    a562:	fc 01       	movw	r30, r24
    a564:	60 81       	ld	r22, Z
    a566:	71 81       	ldd	r23, Z+1	; 0x01
    a568:	82 81       	ldd	r24, Z+2	; 0x02
    a56a:	93 81       	ldd	r25, Z+3	; 0x03
    a56c:	20 e0       	ldi	r18, 0x00	; 0
    a56e:	30 e0       	ldi	r19, 0x00	; 0
    a570:	40 e2       	ldi	r20, 0x20	; 32
    a572:	51 e4       	ldi	r21, 0x41	; 65
    a574:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a578:	dc 01       	movw	r26, r24
    a57a:	cb 01       	movw	r24, r22
    a57c:	8e 01       	movw	r16, r28
    a57e:	0b 51       	subi	r16, 0x1B	; 27
    a580:	1e 4f       	sbci	r17, 0xFE	; 254
    a582:	bc 01       	movw	r22, r24
    a584:	cd 01       	movw	r24, r26
    a586:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a58a:	dc 01       	movw	r26, r24
    a58c:	cb 01       	movw	r24, r22
    a58e:	f8 01       	movw	r30, r16
    a590:	91 83       	std	Z+1, r25	; 0x01
    a592:	80 83       	st	Z, r24
    a594:	27 c0       	rjmp	.+78     	; 0xa5e4 <pick_drop+0x3932>
    a596:	ce 01       	movw	r24, r28
    a598:	89 51       	subi	r24, 0x19	; 25
    a59a:	9e 4f       	sbci	r25, 0xFE	; 254
    a59c:	20 e7       	ldi	r18, 0x70	; 112
    a59e:	31 e0       	ldi	r19, 0x01	; 1
    a5a0:	fc 01       	movw	r30, r24
    a5a2:	31 83       	std	Z+1, r19	; 0x01
    a5a4:	20 83       	st	Z, r18
    a5a6:	ce 01       	movw	r24, r28
    a5a8:	89 51       	subi	r24, 0x19	; 25
    a5aa:	9e 4f       	sbci	r25, 0xFE	; 254
    a5ac:	fc 01       	movw	r30, r24
    a5ae:	80 81       	ld	r24, Z
    a5b0:	91 81       	ldd	r25, Z+1	; 0x01
    a5b2:	8c 01       	movw	r16, r24
    a5b4:	c8 01       	movw	r24, r16
    a5b6:	01 97       	sbiw	r24, 0x01	; 1
    a5b8:	f1 f7       	brne	.-4      	; 0xa5b6 <pick_drop+0x3904>
    a5ba:	8c 01       	movw	r16, r24
    a5bc:	ce 01       	movw	r24, r28
    a5be:	89 51       	subi	r24, 0x19	; 25
    a5c0:	9e 4f       	sbci	r25, 0xFE	; 254
    a5c2:	fc 01       	movw	r30, r24
    a5c4:	11 83       	std	Z+1, r17	; 0x01
    a5c6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a5c8:	ce 01       	movw	r24, r28
    a5ca:	8b 51       	subi	r24, 0x1B	; 27
    a5cc:	9e 4f       	sbci	r25, 0xFE	; 254
    a5ce:	9e 01       	movw	r18, r28
    a5d0:	2b 51       	subi	r18, 0x1B	; 27
    a5d2:	3e 4f       	sbci	r19, 0xFE	; 254
    a5d4:	f9 01       	movw	r30, r18
    a5d6:	20 81       	ld	r18, Z
    a5d8:	31 81       	ldd	r19, Z+1	; 0x01
    a5da:	21 50       	subi	r18, 0x01	; 1
    a5dc:	30 40       	sbci	r19, 0x00	; 0
    a5de:	fc 01       	movw	r30, r24
    a5e0:	31 83       	std	Z+1, r19	; 0x01
    a5e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5e4:	ce 01       	movw	r24, r28
    a5e6:	8b 51       	subi	r24, 0x1B	; 27
    a5e8:	9e 4f       	sbci	r25, 0xFE	; 254
    a5ea:	fc 01       	movw	r30, r24
    a5ec:	80 81       	ld	r24, Z
    a5ee:	91 81       	ldd	r25, Z+1	; 0x01
    a5f0:	00 97       	sbiw	r24, 0x00	; 0
    a5f2:	89 f6       	brne	.-94     	; 0xa596 <pick_drop+0x38e4>
    a5f4:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a5f8:	8e 01       	movw	r16, r28
    a5fa:	0b 51       	subi	r16, 0x1B	; 27
    a5fc:	1e 4f       	sbci	r17, 0xFE	; 254
    a5fe:	ce 01       	movw	r24, r28
    a600:	8f 51       	subi	r24, 0x1F	; 31
    a602:	9e 4f       	sbci	r25, 0xFE	; 254
    a604:	fc 01       	movw	r30, r24
    a606:	60 81       	ld	r22, Z
    a608:	71 81       	ldd	r23, Z+1	; 0x01
    a60a:	82 81       	ldd	r24, Z+2	; 0x02
    a60c:	93 81       	ldd	r25, Z+3	; 0x03
    a60e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a612:	dc 01       	movw	r26, r24
    a614:	cb 01       	movw	r24, r22
    a616:	f8 01       	movw	r30, r16
    a618:	91 83       	std	Z+1, r25	; 0x01
    a61a:	80 83       	st	Z, r24
    a61c:	ce 01       	movw	r24, r28
    a61e:	87 51       	subi	r24, 0x17	; 23
    a620:	9e 4f       	sbci	r25, 0xFE	; 254
    a622:	9e 01       	movw	r18, r28
    a624:	2b 51       	subi	r18, 0x1B	; 27
    a626:	3e 4f       	sbci	r19, 0xFE	; 254
    a628:	f9 01       	movw	r30, r18
    a62a:	20 81       	ld	r18, Z
    a62c:	31 81       	ldd	r19, Z+1	; 0x01
    a62e:	fc 01       	movw	r30, r24
    a630:	31 83       	std	Z+1, r19	; 0x01
    a632:	20 83       	st	Z, r18
    a634:	ce 01       	movw	r24, r28
    a636:	87 51       	subi	r24, 0x17	; 23
    a638:	9e 4f       	sbci	r25, 0xFE	; 254
    a63a:	fc 01       	movw	r30, r24
    a63c:	80 81       	ld	r24, Z
    a63e:	91 81       	ldd	r25, Z+1	; 0x01
    a640:	8c 01       	movw	r16, r24
    a642:	c8 01       	movw	r24, r16
    a644:	01 97       	sbiw	r24, 0x01	; 1
    a646:	f1 f7       	brne	.-4      	; 0xa644 <pick_drop+0x3992>
    a648:	8c 01       	movw	r16, r24
    a64a:	ce 01       	movw	r24, r28
    a64c:	87 51       	subi	r24, 0x17	; 23
    a64e:	9e 4f       	sbci	r25, 0xFE	; 254
    a650:	fc 01       	movw	r30, r24
    a652:	11 83       	std	Z+1, r17	; 0x01
    a654:	00 83       	st	Z, r16
    a656:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			_delay_ms(300);
		}
		
	}
	else if(pd=='5'){// 1X6
    a65a:	ce 01       	movw	r24, r28
    a65c:	89 51       	subi	r24, 0x19	; 25
    a65e:	9d 4f       	sbci	r25, 0xFD	; 253
    a660:	fc 01       	movw	r30, r24
    a662:	80 81       	ld	r24, Z
    a664:	85 33       	cpi	r24, 0x35	; 53
    a666:	09 f0       	breq	.+2      	; 0xa66a <pick_drop+0x39b8>
    a668:	84 c2       	rjmp	.+1288   	; 0xab72 <pick_drop+0x3ec0>
			spl_right();
    a66a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
			stop();
    a66e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    a672:	9e 01       	movw	r18, r28
    a674:	25 51       	subi	r18, 0x15	; 21
    a676:	3e 4f       	sbci	r19, 0xFE	; 254
    a678:	80 e0       	ldi	r24, 0x00	; 0
    a67a:	90 e0       	ldi	r25, 0x00	; 0
    a67c:	a0 ea       	ldi	r26, 0xA0	; 160
    a67e:	b1 e4       	ldi	r27, 0x41	; 65
    a680:	f9 01       	movw	r30, r18
    a682:	80 83       	st	Z, r24
    a684:	91 83       	std	Z+1, r25	; 0x01
    a686:	a2 83       	std	Z+2, r26	; 0x02
    a688:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a68a:	8e 01       	movw	r16, r28
    a68c:	01 51       	subi	r16, 0x11	; 17
    a68e:	1e 4f       	sbci	r17, 0xFE	; 254
    a690:	ce 01       	movw	r24, r28
    a692:	85 51       	subi	r24, 0x15	; 21
    a694:	9e 4f       	sbci	r25, 0xFE	; 254
    a696:	fc 01       	movw	r30, r24
    a698:	60 81       	ld	r22, Z
    a69a:	71 81       	ldd	r23, Z+1	; 0x01
    a69c:	82 81       	ldd	r24, Z+2	; 0x02
    a69e:	93 81       	ldd	r25, Z+3	; 0x03
    a6a0:	26 e6       	ldi	r18, 0x66	; 102
    a6a2:	36 e6       	ldi	r19, 0x66	; 102
    a6a4:	46 e6       	ldi	r20, 0x66	; 102
    a6a6:	55 e4       	ldi	r21, 0x45	; 69
    a6a8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a6ac:	dc 01       	movw	r26, r24
    a6ae:	cb 01       	movw	r24, r22
    a6b0:	f8 01       	movw	r30, r16
    a6b2:	80 83       	st	Z, r24
    a6b4:	91 83       	std	Z+1, r25	; 0x01
    a6b6:	a2 83       	std	Z+2, r26	; 0x02
    a6b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a6ba:	ce 01       	movw	r24, r28
    a6bc:	81 51       	subi	r24, 0x11	; 17
    a6be:	9e 4f       	sbci	r25, 0xFE	; 254
    a6c0:	11 e0       	ldi	r17, 0x01	; 1
    a6c2:	fc 01       	movw	r30, r24
    a6c4:	60 81       	ld	r22, Z
    a6c6:	71 81       	ldd	r23, Z+1	; 0x01
    a6c8:	82 81       	ldd	r24, Z+2	; 0x02
    a6ca:	93 81       	ldd	r25, Z+3	; 0x03
    a6cc:	20 e0       	ldi	r18, 0x00	; 0
    a6ce:	30 e0       	ldi	r19, 0x00	; 0
    a6d0:	40 e8       	ldi	r20, 0x80	; 128
    a6d2:	5f e3       	ldi	r21, 0x3F	; 63
    a6d4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    a6d8:	88 23       	and	r24, r24
    a6da:	0c f0       	brlt	.+2      	; 0xa6de <pick_drop+0x3a2c>
    a6dc:	10 e0       	ldi	r17, 0x00	; 0
    a6de:	11 23       	and	r17, r17
    a6e0:	49 f0       	breq	.+18     	; 0xa6f4 <pick_drop+0x3a42>
		__ticks = 1;
    a6e2:	ce 01       	movw	r24, r28
    a6e4:	8d 50       	subi	r24, 0x0D	; 13
    a6e6:	9e 4f       	sbci	r25, 0xFE	; 254
    a6e8:	21 e0       	ldi	r18, 0x01	; 1
    a6ea:	30 e0       	ldi	r19, 0x00	; 0
    a6ec:	fc 01       	movw	r30, r24
    a6ee:	31 83       	std	Z+1, r19	; 0x01
    a6f0:	20 83       	st	Z, r18
    a6f2:	74 c0       	rjmp	.+232    	; 0xa7dc <pick_drop+0x3b2a>
	else if (__tmp > 65535)
    a6f4:	ce 01       	movw	r24, r28
    a6f6:	81 51       	subi	r24, 0x11	; 17
    a6f8:	9e 4f       	sbci	r25, 0xFE	; 254
    a6fa:	11 e0       	ldi	r17, 0x01	; 1
    a6fc:	fc 01       	movw	r30, r24
    a6fe:	60 81       	ld	r22, Z
    a700:	71 81       	ldd	r23, Z+1	; 0x01
    a702:	82 81       	ldd	r24, Z+2	; 0x02
    a704:	93 81       	ldd	r25, Z+3	; 0x03
    a706:	20 e0       	ldi	r18, 0x00	; 0
    a708:	3f ef       	ldi	r19, 0xFF	; 255
    a70a:	4f e7       	ldi	r20, 0x7F	; 127
    a70c:	57 e4       	ldi	r21, 0x47	; 71
    a70e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    a712:	18 16       	cp	r1, r24
    a714:	0c f0       	brlt	.+2      	; 0xa718 <pick_drop+0x3a66>
    a716:	10 e0       	ldi	r17, 0x00	; 0
    a718:	11 23       	and	r17, r17
    a71a:	09 f4       	brne	.+2      	; 0xa71e <pick_drop+0x3a6c>
    a71c:	4d c0       	rjmp	.+154    	; 0xa7b8 <pick_drop+0x3b06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a71e:	ce 01       	movw	r24, r28
    a720:	85 51       	subi	r24, 0x15	; 21
    a722:	9e 4f       	sbci	r25, 0xFE	; 254
    a724:	fc 01       	movw	r30, r24
    a726:	60 81       	ld	r22, Z
    a728:	71 81       	ldd	r23, Z+1	; 0x01
    a72a:	82 81       	ldd	r24, Z+2	; 0x02
    a72c:	93 81       	ldd	r25, Z+3	; 0x03
    a72e:	20 e0       	ldi	r18, 0x00	; 0
    a730:	30 e0       	ldi	r19, 0x00	; 0
    a732:	40 e2       	ldi	r20, 0x20	; 32
    a734:	51 e4       	ldi	r21, 0x41	; 65
    a736:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a73a:	dc 01       	movw	r26, r24
    a73c:	cb 01       	movw	r24, r22
    a73e:	8e 01       	movw	r16, r28
    a740:	0d 50       	subi	r16, 0x0D	; 13
    a742:	1e 4f       	sbci	r17, 0xFE	; 254
    a744:	bc 01       	movw	r22, r24
    a746:	cd 01       	movw	r24, r26
    a748:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a74c:	dc 01       	movw	r26, r24
    a74e:	cb 01       	movw	r24, r22
    a750:	f8 01       	movw	r30, r16
    a752:	91 83       	std	Z+1, r25	; 0x01
    a754:	80 83       	st	Z, r24
    a756:	27 c0       	rjmp	.+78     	; 0xa7a6 <pick_drop+0x3af4>
    a758:	ce 01       	movw	r24, r28
    a75a:	8b 50       	subi	r24, 0x0B	; 11
    a75c:	9e 4f       	sbci	r25, 0xFE	; 254
    a75e:	20 e7       	ldi	r18, 0x70	; 112
    a760:	31 e0       	ldi	r19, 0x01	; 1
    a762:	fc 01       	movw	r30, r24
    a764:	31 83       	std	Z+1, r19	; 0x01
    a766:	20 83       	st	Z, r18
    a768:	ce 01       	movw	r24, r28
    a76a:	8b 50       	subi	r24, 0x0B	; 11
    a76c:	9e 4f       	sbci	r25, 0xFE	; 254
    a76e:	fc 01       	movw	r30, r24
    a770:	80 81       	ld	r24, Z
    a772:	91 81       	ldd	r25, Z+1	; 0x01
    a774:	8c 01       	movw	r16, r24
    a776:	c8 01       	movw	r24, r16
    a778:	01 97       	sbiw	r24, 0x01	; 1
    a77a:	f1 f7       	brne	.-4      	; 0xa778 <pick_drop+0x3ac6>
    a77c:	8c 01       	movw	r16, r24
    a77e:	ce 01       	movw	r24, r28
    a780:	8b 50       	subi	r24, 0x0B	; 11
    a782:	9e 4f       	sbci	r25, 0xFE	; 254
    a784:	fc 01       	movw	r30, r24
    a786:	11 83       	std	Z+1, r17	; 0x01
    a788:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a78a:	ce 01       	movw	r24, r28
    a78c:	8d 50       	subi	r24, 0x0D	; 13
    a78e:	9e 4f       	sbci	r25, 0xFE	; 254
    a790:	9e 01       	movw	r18, r28
    a792:	2d 50       	subi	r18, 0x0D	; 13
    a794:	3e 4f       	sbci	r19, 0xFE	; 254
    a796:	f9 01       	movw	r30, r18
    a798:	20 81       	ld	r18, Z
    a79a:	31 81       	ldd	r19, Z+1	; 0x01
    a79c:	21 50       	subi	r18, 0x01	; 1
    a79e:	30 40       	sbci	r19, 0x00	; 0
    a7a0:	fc 01       	movw	r30, r24
    a7a2:	31 83       	std	Z+1, r19	; 0x01
    a7a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7a6:	ce 01       	movw	r24, r28
    a7a8:	8d 50       	subi	r24, 0x0D	; 13
    a7aa:	9e 4f       	sbci	r25, 0xFE	; 254
    a7ac:	fc 01       	movw	r30, r24
    a7ae:	80 81       	ld	r24, Z
    a7b0:	91 81       	ldd	r25, Z+1	; 0x01
    a7b2:	00 97       	sbiw	r24, 0x00	; 0
    a7b4:	89 f6       	brne	.-94     	; 0xa758 <pick_drop+0x3aa6>
    a7b6:	2f c0       	rjmp	.+94     	; 0xa816 <pick_drop+0x3b64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a7b8:	8e 01       	movw	r16, r28
    a7ba:	0d 50       	subi	r16, 0x0D	; 13
    a7bc:	1e 4f       	sbci	r17, 0xFE	; 254
    a7be:	ce 01       	movw	r24, r28
    a7c0:	81 51       	subi	r24, 0x11	; 17
    a7c2:	9e 4f       	sbci	r25, 0xFE	; 254
    a7c4:	fc 01       	movw	r30, r24
    a7c6:	60 81       	ld	r22, Z
    a7c8:	71 81       	ldd	r23, Z+1	; 0x01
    a7ca:	82 81       	ldd	r24, Z+2	; 0x02
    a7cc:	93 81       	ldd	r25, Z+3	; 0x03
    a7ce:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a7d2:	dc 01       	movw	r26, r24
    a7d4:	cb 01       	movw	r24, r22
    a7d6:	f8 01       	movw	r30, r16
    a7d8:	91 83       	std	Z+1, r25	; 0x01
    a7da:	80 83       	st	Z, r24
    a7dc:	ce 01       	movw	r24, r28
    a7de:	89 50       	subi	r24, 0x09	; 9
    a7e0:	9e 4f       	sbci	r25, 0xFE	; 254
    a7e2:	9e 01       	movw	r18, r28
    a7e4:	2d 50       	subi	r18, 0x0D	; 13
    a7e6:	3e 4f       	sbci	r19, 0xFE	; 254
    a7e8:	f9 01       	movw	r30, r18
    a7ea:	20 81       	ld	r18, Z
    a7ec:	31 81       	ldd	r19, Z+1	; 0x01
    a7ee:	fc 01       	movw	r30, r24
    a7f0:	31 83       	std	Z+1, r19	; 0x01
    a7f2:	20 83       	st	Z, r18
    a7f4:	ce 01       	movw	r24, r28
    a7f6:	89 50       	subi	r24, 0x09	; 9
    a7f8:	9e 4f       	sbci	r25, 0xFE	; 254
    a7fa:	fc 01       	movw	r30, r24
    a7fc:	80 81       	ld	r24, Z
    a7fe:	91 81       	ldd	r25, Z+1	; 0x01
    a800:	8c 01       	movw	r16, r24
    a802:	c8 01       	movw	r24, r16
    a804:	01 97       	sbiw	r24, 0x01	; 1
    a806:	f1 f7       	brne	.-4      	; 0xa804 <pick_drop+0x3b52>
    a808:	8c 01       	movw	r16, r24
    a80a:	ce 01       	movw	r24, r28
    a80c:	89 50       	subi	r24, 0x09	; 9
    a80e:	9e 4f       	sbci	r25, 0xFE	; 254
    a810:	fc 01       	movw	r30, r24
    a812:	11 83       	std	Z+1, r17	; 0x01
    a814:	00 83       	st	Z, r16
			_delay_ms(20);
			//back_mm(25);
			//_delay_ms(20);
			front();
    a816:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    a81a:	9e 01       	movw	r18, r28
    a81c:	27 50       	subi	r18, 0x07	; 7
    a81e:	3e 4f       	sbci	r19, 0xFE	; 254
    a820:	80 e0       	ldi	r24, 0x00	; 0
    a822:	90 e0       	ldi	r25, 0x00	; 0
    a824:	a8 ec       	ldi	r26, 0xC8	; 200
    a826:	b2 e4       	ldi	r27, 0x42	; 66
    a828:	f9 01       	movw	r30, r18
    a82a:	80 83       	st	Z, r24
    a82c:	91 83       	std	Z+1, r25	; 0x01
    a82e:	a2 83       	std	Z+2, r26	; 0x02
    a830:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a832:	8e 01       	movw	r16, r28
    a834:	03 50       	subi	r16, 0x03	; 3
    a836:	1e 4f       	sbci	r17, 0xFE	; 254
    a838:	ce 01       	movw	r24, r28
    a83a:	87 50       	subi	r24, 0x07	; 7
    a83c:	9e 4f       	sbci	r25, 0xFE	; 254
    a83e:	fc 01       	movw	r30, r24
    a840:	60 81       	ld	r22, Z
    a842:	71 81       	ldd	r23, Z+1	; 0x01
    a844:	82 81       	ldd	r24, Z+2	; 0x02
    a846:	93 81       	ldd	r25, Z+3	; 0x03
    a848:	26 e6       	ldi	r18, 0x66	; 102
    a84a:	36 e6       	ldi	r19, 0x66	; 102
    a84c:	46 e6       	ldi	r20, 0x66	; 102
    a84e:	55 e4       	ldi	r21, 0x45	; 69
    a850:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a854:	dc 01       	movw	r26, r24
    a856:	cb 01       	movw	r24, r22
    a858:	f8 01       	movw	r30, r16
    a85a:	80 83       	st	Z, r24
    a85c:	91 83       	std	Z+1, r25	; 0x01
    a85e:	a2 83       	std	Z+2, r26	; 0x02
    a860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a862:	ce 01       	movw	r24, r28
    a864:	83 50       	subi	r24, 0x03	; 3
    a866:	9e 4f       	sbci	r25, 0xFE	; 254
    a868:	11 e0       	ldi	r17, 0x01	; 1
    a86a:	fc 01       	movw	r30, r24
    a86c:	60 81       	ld	r22, Z
    a86e:	71 81       	ldd	r23, Z+1	; 0x01
    a870:	82 81       	ldd	r24, Z+2	; 0x02
    a872:	93 81       	ldd	r25, Z+3	; 0x03
    a874:	20 e0       	ldi	r18, 0x00	; 0
    a876:	30 e0       	ldi	r19, 0x00	; 0
    a878:	40 e8       	ldi	r20, 0x80	; 128
    a87a:	5f e3       	ldi	r21, 0x3F	; 63
    a87c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    a880:	88 23       	and	r24, r24
    a882:	0c f0       	brlt	.+2      	; 0xa886 <pick_drop+0x3bd4>
    a884:	10 e0       	ldi	r17, 0x00	; 0
    a886:	11 23       	and	r17, r17
    a888:	49 f0       	breq	.+18     	; 0xa89c <pick_drop+0x3bea>
		__ticks = 1;
    a88a:	ce 01       	movw	r24, r28
    a88c:	8f 5f       	subi	r24, 0xFF	; 255
    a88e:	9d 4f       	sbci	r25, 0xFD	; 253
    a890:	21 e0       	ldi	r18, 0x01	; 1
    a892:	30 e0       	ldi	r19, 0x00	; 0
    a894:	fc 01       	movw	r30, r24
    a896:	31 83       	std	Z+1, r19	; 0x01
    a898:	20 83       	st	Z, r18
    a89a:	74 c0       	rjmp	.+232    	; 0xa984 <pick_drop+0x3cd2>
	else if (__tmp > 65535)
    a89c:	ce 01       	movw	r24, r28
    a89e:	83 50       	subi	r24, 0x03	; 3
    a8a0:	9e 4f       	sbci	r25, 0xFE	; 254
    a8a2:	11 e0       	ldi	r17, 0x01	; 1
    a8a4:	fc 01       	movw	r30, r24
    a8a6:	60 81       	ld	r22, Z
    a8a8:	71 81       	ldd	r23, Z+1	; 0x01
    a8aa:	82 81       	ldd	r24, Z+2	; 0x02
    a8ac:	93 81       	ldd	r25, Z+3	; 0x03
    a8ae:	20 e0       	ldi	r18, 0x00	; 0
    a8b0:	3f ef       	ldi	r19, 0xFF	; 255
    a8b2:	4f e7       	ldi	r20, 0x7F	; 127
    a8b4:	57 e4       	ldi	r21, 0x47	; 71
    a8b6:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    a8ba:	18 16       	cp	r1, r24
    a8bc:	0c f0       	brlt	.+2      	; 0xa8c0 <pick_drop+0x3c0e>
    a8be:	10 e0       	ldi	r17, 0x00	; 0
    a8c0:	11 23       	and	r17, r17
    a8c2:	09 f4       	brne	.+2      	; 0xa8c6 <pick_drop+0x3c14>
    a8c4:	4d c0       	rjmp	.+154    	; 0xa960 <pick_drop+0x3cae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a8c6:	ce 01       	movw	r24, r28
    a8c8:	87 50       	subi	r24, 0x07	; 7
    a8ca:	9e 4f       	sbci	r25, 0xFE	; 254
    a8cc:	fc 01       	movw	r30, r24
    a8ce:	60 81       	ld	r22, Z
    a8d0:	71 81       	ldd	r23, Z+1	; 0x01
    a8d2:	82 81       	ldd	r24, Z+2	; 0x02
    a8d4:	93 81       	ldd	r25, Z+3	; 0x03
    a8d6:	20 e0       	ldi	r18, 0x00	; 0
    a8d8:	30 e0       	ldi	r19, 0x00	; 0
    a8da:	40 e2       	ldi	r20, 0x20	; 32
    a8dc:	51 e4       	ldi	r21, 0x41	; 65
    a8de:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    a8e2:	dc 01       	movw	r26, r24
    a8e4:	cb 01       	movw	r24, r22
    a8e6:	8e 01       	movw	r16, r28
    a8e8:	0f 5f       	subi	r16, 0xFF	; 255
    a8ea:	1d 4f       	sbci	r17, 0xFD	; 253
    a8ec:	bc 01       	movw	r22, r24
    a8ee:	cd 01       	movw	r24, r26
    a8f0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a8f4:	dc 01       	movw	r26, r24
    a8f6:	cb 01       	movw	r24, r22
    a8f8:	f8 01       	movw	r30, r16
    a8fa:	91 83       	std	Z+1, r25	; 0x01
    a8fc:	80 83       	st	Z, r24
    a8fe:	27 c0       	rjmp	.+78     	; 0xa94e <pick_drop+0x3c9c>
    a900:	ce 01       	movw	r24, r28
    a902:	8d 5f       	subi	r24, 0xFD	; 253
    a904:	9d 4f       	sbci	r25, 0xFD	; 253
    a906:	20 e7       	ldi	r18, 0x70	; 112
    a908:	31 e0       	ldi	r19, 0x01	; 1
    a90a:	fc 01       	movw	r30, r24
    a90c:	31 83       	std	Z+1, r19	; 0x01
    a90e:	20 83       	st	Z, r18
    a910:	ce 01       	movw	r24, r28
    a912:	8d 5f       	subi	r24, 0xFD	; 253
    a914:	9d 4f       	sbci	r25, 0xFD	; 253
    a916:	fc 01       	movw	r30, r24
    a918:	80 81       	ld	r24, Z
    a91a:	91 81       	ldd	r25, Z+1	; 0x01
    a91c:	8c 01       	movw	r16, r24
    a91e:	c8 01       	movw	r24, r16
    a920:	01 97       	sbiw	r24, 0x01	; 1
    a922:	f1 f7       	brne	.-4      	; 0xa920 <pick_drop+0x3c6e>
    a924:	8c 01       	movw	r16, r24
    a926:	ce 01       	movw	r24, r28
    a928:	8d 5f       	subi	r24, 0xFD	; 253
    a92a:	9d 4f       	sbci	r25, 0xFD	; 253
    a92c:	fc 01       	movw	r30, r24
    a92e:	11 83       	std	Z+1, r17	; 0x01
    a930:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a932:	ce 01       	movw	r24, r28
    a934:	8f 5f       	subi	r24, 0xFF	; 255
    a936:	9d 4f       	sbci	r25, 0xFD	; 253
    a938:	9e 01       	movw	r18, r28
    a93a:	2f 5f       	subi	r18, 0xFF	; 255
    a93c:	3d 4f       	sbci	r19, 0xFD	; 253
    a93e:	f9 01       	movw	r30, r18
    a940:	20 81       	ld	r18, Z
    a942:	31 81       	ldd	r19, Z+1	; 0x01
    a944:	21 50       	subi	r18, 0x01	; 1
    a946:	30 40       	sbci	r19, 0x00	; 0
    a948:	fc 01       	movw	r30, r24
    a94a:	31 83       	std	Z+1, r19	; 0x01
    a94c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a94e:	ce 01       	movw	r24, r28
    a950:	8f 5f       	subi	r24, 0xFF	; 255
    a952:	9d 4f       	sbci	r25, 0xFD	; 253
    a954:	fc 01       	movw	r30, r24
    a956:	80 81       	ld	r24, Z
    a958:	91 81       	ldd	r25, Z+1	; 0x01
    a95a:	00 97       	sbiw	r24, 0x00	; 0
    a95c:	89 f6       	brne	.-94     	; 0xa900 <pick_drop+0x3c4e>
    a95e:	2f c0       	rjmp	.+94     	; 0xa9be <pick_drop+0x3d0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a960:	8e 01       	movw	r16, r28
    a962:	0f 5f       	subi	r16, 0xFF	; 255
    a964:	1d 4f       	sbci	r17, 0xFD	; 253
    a966:	ce 01       	movw	r24, r28
    a968:	83 50       	subi	r24, 0x03	; 3
    a96a:	9e 4f       	sbci	r25, 0xFE	; 254
    a96c:	fc 01       	movw	r30, r24
    a96e:	60 81       	ld	r22, Z
    a970:	71 81       	ldd	r23, Z+1	; 0x01
    a972:	82 81       	ldd	r24, Z+2	; 0x02
    a974:	93 81       	ldd	r25, Z+3	; 0x03
    a976:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    a97a:	dc 01       	movw	r26, r24
    a97c:	cb 01       	movw	r24, r22
    a97e:	f8 01       	movw	r30, r16
    a980:	91 83       	std	Z+1, r25	; 0x01
    a982:	80 83       	st	Z, r24
    a984:	ce 01       	movw	r24, r28
    a986:	8b 5f       	subi	r24, 0xFB	; 251
    a988:	9d 4f       	sbci	r25, 0xFD	; 253
    a98a:	9e 01       	movw	r18, r28
    a98c:	2f 5f       	subi	r18, 0xFF	; 255
    a98e:	3d 4f       	sbci	r19, 0xFD	; 253
    a990:	f9 01       	movw	r30, r18
    a992:	20 81       	ld	r18, Z
    a994:	31 81       	ldd	r19, Z+1	; 0x01
    a996:	fc 01       	movw	r30, r24
    a998:	31 83       	std	Z+1, r19	; 0x01
    a99a:	20 83       	st	Z, r18
    a99c:	ce 01       	movw	r24, r28
    a99e:	8b 5f       	subi	r24, 0xFB	; 251
    a9a0:	9d 4f       	sbci	r25, 0xFD	; 253
    a9a2:	fc 01       	movw	r30, r24
    a9a4:	80 81       	ld	r24, Z
    a9a6:	91 81       	ldd	r25, Z+1	; 0x01
    a9a8:	8c 01       	movw	r16, r24
    a9aa:	c8 01       	movw	r24, r16
    a9ac:	01 97       	sbiw	r24, 0x01	; 1
    a9ae:	f1 f7       	brne	.-4      	; 0xa9ac <pick_drop+0x3cfa>
    a9b0:	8c 01       	movw	r16, r24
    a9b2:	ce 01       	movw	r24, r28
    a9b4:	8b 5f       	subi	r24, 0xFB	; 251
    a9b6:	9d 4f       	sbci	r25, 0xFD	; 253
    a9b8:	fc 01       	movw	r30, r24
    a9ba:	11 83       	std	Z+1, r17	; 0x01
    a9bc:	00 83       	st	Z, r16
			_delay_ms(100);
			forward_mm(25);
    a9be:	89 e1       	ldi	r24, 0x19	; 25
    a9c0:	90 e0       	ldi	r25, 0x00	; 0
    a9c2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a9c6:	9e 01       	movw	r18, r28
    a9c8:	29 5f       	subi	r18, 0xF9	; 249
    a9ca:	3d 4f       	sbci	r19, 0xFD	; 253
    a9cc:	80 e0       	ldi	r24, 0x00	; 0
    a9ce:	90 e0       	ldi	r25, 0x00	; 0
    a9d0:	a0 ea       	ldi	r26, 0xA0	; 160
    a9d2:	b1 e4       	ldi	r27, 0x41	; 65
    a9d4:	f9 01       	movw	r30, r18
    a9d6:	80 83       	st	Z, r24
    a9d8:	91 83       	std	Z+1, r25	; 0x01
    a9da:	a2 83       	std	Z+2, r26	; 0x02
    a9dc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a9de:	8e 01       	movw	r16, r28
    a9e0:	05 5f       	subi	r16, 0xF5	; 245
    a9e2:	1d 4f       	sbci	r17, 0xFD	; 253
    a9e4:	ce 01       	movw	r24, r28
    a9e6:	89 5f       	subi	r24, 0xF9	; 249
    a9e8:	9d 4f       	sbci	r25, 0xFD	; 253
    a9ea:	fc 01       	movw	r30, r24
    a9ec:	60 81       	ld	r22, Z
    a9ee:	71 81       	ldd	r23, Z+1	; 0x01
    a9f0:	82 81       	ldd	r24, Z+2	; 0x02
    a9f2:	93 81       	ldd	r25, Z+3	; 0x03
    a9f4:	26 e6       	ldi	r18, 0x66	; 102
    a9f6:	36 e6       	ldi	r19, 0x66	; 102
    a9f8:	46 e6       	ldi	r20, 0x66	; 102
    a9fa:	55 e4       	ldi	r21, 0x45	; 69
    a9fc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    aa00:	dc 01       	movw	r26, r24
    aa02:	cb 01       	movw	r24, r22
    aa04:	f8 01       	movw	r30, r16
    aa06:	80 83       	st	Z, r24
    aa08:	91 83       	std	Z+1, r25	; 0x01
    aa0a:	a2 83       	std	Z+2, r26	; 0x02
    aa0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    aa0e:	ce 01       	movw	r24, r28
    aa10:	85 5f       	subi	r24, 0xF5	; 245
    aa12:	9d 4f       	sbci	r25, 0xFD	; 253
    aa14:	11 e0       	ldi	r17, 0x01	; 1
    aa16:	fc 01       	movw	r30, r24
    aa18:	60 81       	ld	r22, Z
    aa1a:	71 81       	ldd	r23, Z+1	; 0x01
    aa1c:	82 81       	ldd	r24, Z+2	; 0x02
    aa1e:	93 81       	ldd	r25, Z+3	; 0x03
    aa20:	20 e0       	ldi	r18, 0x00	; 0
    aa22:	30 e0       	ldi	r19, 0x00	; 0
    aa24:	40 e8       	ldi	r20, 0x80	; 128
    aa26:	5f e3       	ldi	r21, 0x3F	; 63
    aa28:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    aa2c:	88 23       	and	r24, r24
    aa2e:	0c f0       	brlt	.+2      	; 0xaa32 <pick_drop+0x3d80>
    aa30:	10 e0       	ldi	r17, 0x00	; 0
    aa32:	11 23       	and	r17, r17
    aa34:	49 f0       	breq	.+18     	; 0xaa48 <pick_drop+0x3d96>
		__ticks = 1;
    aa36:	ce 01       	movw	r24, r28
    aa38:	81 5f       	subi	r24, 0xF1	; 241
    aa3a:	9d 4f       	sbci	r25, 0xFD	; 253
    aa3c:	21 e0       	ldi	r18, 0x01	; 1
    aa3e:	30 e0       	ldi	r19, 0x00	; 0
    aa40:	fc 01       	movw	r30, r24
    aa42:	31 83       	std	Z+1, r19	; 0x01
    aa44:	20 83       	st	Z, r18
    aa46:	74 c0       	rjmp	.+232    	; 0xab30 <pick_drop+0x3e7e>
	else if (__tmp > 65535)
    aa48:	ce 01       	movw	r24, r28
    aa4a:	85 5f       	subi	r24, 0xF5	; 245
    aa4c:	9d 4f       	sbci	r25, 0xFD	; 253
    aa4e:	11 e0       	ldi	r17, 0x01	; 1
    aa50:	fc 01       	movw	r30, r24
    aa52:	60 81       	ld	r22, Z
    aa54:	71 81       	ldd	r23, Z+1	; 0x01
    aa56:	82 81       	ldd	r24, Z+2	; 0x02
    aa58:	93 81       	ldd	r25, Z+3	; 0x03
    aa5a:	20 e0       	ldi	r18, 0x00	; 0
    aa5c:	3f ef       	ldi	r19, 0xFF	; 255
    aa5e:	4f e7       	ldi	r20, 0x7F	; 127
    aa60:	57 e4       	ldi	r21, 0x47	; 71
    aa62:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    aa66:	18 16       	cp	r1, r24
    aa68:	0c f0       	brlt	.+2      	; 0xaa6c <pick_drop+0x3dba>
    aa6a:	10 e0       	ldi	r17, 0x00	; 0
    aa6c:	11 23       	and	r17, r17
    aa6e:	09 f4       	brne	.+2      	; 0xaa72 <pick_drop+0x3dc0>
    aa70:	4d c0       	rjmp	.+154    	; 0xab0c <pick_drop+0x3e5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aa72:	ce 01       	movw	r24, r28
    aa74:	89 5f       	subi	r24, 0xF9	; 249
    aa76:	9d 4f       	sbci	r25, 0xFD	; 253
    aa78:	fc 01       	movw	r30, r24
    aa7a:	60 81       	ld	r22, Z
    aa7c:	71 81       	ldd	r23, Z+1	; 0x01
    aa7e:	82 81       	ldd	r24, Z+2	; 0x02
    aa80:	93 81       	ldd	r25, Z+3	; 0x03
    aa82:	20 e0       	ldi	r18, 0x00	; 0
    aa84:	30 e0       	ldi	r19, 0x00	; 0
    aa86:	40 e2       	ldi	r20, 0x20	; 32
    aa88:	51 e4       	ldi	r21, 0x41	; 65
    aa8a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    aa8e:	dc 01       	movw	r26, r24
    aa90:	cb 01       	movw	r24, r22
    aa92:	8e 01       	movw	r16, r28
    aa94:	01 5f       	subi	r16, 0xF1	; 241
    aa96:	1d 4f       	sbci	r17, 0xFD	; 253
    aa98:	bc 01       	movw	r22, r24
    aa9a:	cd 01       	movw	r24, r26
    aa9c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    aaa0:	dc 01       	movw	r26, r24
    aaa2:	cb 01       	movw	r24, r22
    aaa4:	f8 01       	movw	r30, r16
    aaa6:	91 83       	std	Z+1, r25	; 0x01
    aaa8:	80 83       	st	Z, r24
    aaaa:	27 c0       	rjmp	.+78     	; 0xaafa <pick_drop+0x3e48>
    aaac:	ce 01       	movw	r24, r28
    aaae:	8f 5e       	subi	r24, 0xEF	; 239
    aab0:	9d 4f       	sbci	r25, 0xFD	; 253
    aab2:	20 e7       	ldi	r18, 0x70	; 112
    aab4:	31 e0       	ldi	r19, 0x01	; 1
    aab6:	fc 01       	movw	r30, r24
    aab8:	31 83       	std	Z+1, r19	; 0x01
    aaba:	20 83       	st	Z, r18
    aabc:	ce 01       	movw	r24, r28
    aabe:	8f 5e       	subi	r24, 0xEF	; 239
    aac0:	9d 4f       	sbci	r25, 0xFD	; 253
    aac2:	fc 01       	movw	r30, r24
    aac4:	80 81       	ld	r24, Z
    aac6:	91 81       	ldd	r25, Z+1	; 0x01
    aac8:	8c 01       	movw	r16, r24
    aaca:	c8 01       	movw	r24, r16
    aacc:	01 97       	sbiw	r24, 0x01	; 1
    aace:	f1 f7       	brne	.-4      	; 0xaacc <pick_drop+0x3e1a>
    aad0:	8c 01       	movw	r16, r24
    aad2:	ce 01       	movw	r24, r28
    aad4:	8f 5e       	subi	r24, 0xEF	; 239
    aad6:	9d 4f       	sbci	r25, 0xFD	; 253
    aad8:	fc 01       	movw	r30, r24
    aada:	11 83       	std	Z+1, r17	; 0x01
    aadc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aade:	ce 01       	movw	r24, r28
    aae0:	81 5f       	subi	r24, 0xF1	; 241
    aae2:	9d 4f       	sbci	r25, 0xFD	; 253
    aae4:	9e 01       	movw	r18, r28
    aae6:	21 5f       	subi	r18, 0xF1	; 241
    aae8:	3d 4f       	sbci	r19, 0xFD	; 253
    aaea:	f9 01       	movw	r30, r18
    aaec:	20 81       	ld	r18, Z
    aaee:	31 81       	ldd	r19, Z+1	; 0x01
    aaf0:	21 50       	subi	r18, 0x01	; 1
    aaf2:	30 40       	sbci	r19, 0x00	; 0
    aaf4:	fc 01       	movw	r30, r24
    aaf6:	31 83       	std	Z+1, r19	; 0x01
    aaf8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aafa:	ce 01       	movw	r24, r28
    aafc:	81 5f       	subi	r24, 0xF1	; 241
    aafe:	9d 4f       	sbci	r25, 0xFD	; 253
    ab00:	fc 01       	movw	r30, r24
    ab02:	80 81       	ld	r24, Z
    ab04:	91 81       	ldd	r25, Z+1	; 0x01
    ab06:	00 97       	sbiw	r24, 0x00	; 0
    ab08:	89 f6       	brne	.-94     	; 0xaaac <pick_drop+0x3dfa>
    ab0a:	2f c0       	rjmp	.+94     	; 0xab6a <pick_drop+0x3eb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ab0c:	8e 01       	movw	r16, r28
    ab0e:	01 5f       	subi	r16, 0xF1	; 241
    ab10:	1d 4f       	sbci	r17, 0xFD	; 253
    ab12:	ce 01       	movw	r24, r28
    ab14:	85 5f       	subi	r24, 0xF5	; 245
    ab16:	9d 4f       	sbci	r25, 0xFD	; 253
    ab18:	fc 01       	movw	r30, r24
    ab1a:	60 81       	ld	r22, Z
    ab1c:	71 81       	ldd	r23, Z+1	; 0x01
    ab1e:	82 81       	ldd	r24, Z+2	; 0x02
    ab20:	93 81       	ldd	r25, Z+3	; 0x03
    ab22:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    ab26:	dc 01       	movw	r26, r24
    ab28:	cb 01       	movw	r24, r22
    ab2a:	f8 01       	movw	r30, r16
    ab2c:	91 83       	std	Z+1, r25	; 0x01
    ab2e:	80 83       	st	Z, r24
    ab30:	ce 01       	movw	r24, r28
    ab32:	8d 5e       	subi	r24, 0xED	; 237
    ab34:	9d 4f       	sbci	r25, 0xFD	; 253
    ab36:	9e 01       	movw	r18, r28
    ab38:	21 5f       	subi	r18, 0xF1	; 241
    ab3a:	3d 4f       	sbci	r19, 0xFD	; 253
    ab3c:	f9 01       	movw	r30, r18
    ab3e:	20 81       	ld	r18, Z
    ab40:	31 81       	ldd	r19, Z+1	; 0x01
    ab42:	fc 01       	movw	r30, r24
    ab44:	31 83       	std	Z+1, r19	; 0x01
    ab46:	20 83       	st	Z, r18
    ab48:	ce 01       	movw	r24, r28
    ab4a:	8d 5e       	subi	r24, 0xED	; 237
    ab4c:	9d 4f       	sbci	r25, 0xFD	; 253
    ab4e:	fc 01       	movw	r30, r24
    ab50:	80 81       	ld	r24, Z
    ab52:	91 81       	ldd	r25, Z+1	; 0x01
    ab54:	8c 01       	movw	r16, r24
    ab56:	c8 01       	movw	r24, r16
    ab58:	01 97       	sbiw	r24, 0x01	; 1
    ab5a:	f1 f7       	brne	.-4      	; 0xab58 <pick_drop+0x3ea6>
    ab5c:	8c 01       	movw	r16, r24
    ab5e:	ce 01       	movw	r24, r28
    ab60:	8d 5e       	subi	r24, 0xED	; 237
    ab62:	9d 4f       	sbci	r25, 0xFD	; 253
    ab64:	fc 01       	movw	r30, r24
    ab66:	11 83       	std	Z+1, r17	; 0x01
    ab68:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    ab6a:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    ab6e:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
	}
	else if(pd=='6'){// 6X1
    ab72:	ce 01       	movw	r24, r28
    ab74:	89 51       	subi	r24, 0x19	; 25
    ab76:	9d 4f       	sbci	r25, 0xFD	; 253
    ab78:	fc 01       	movw	r30, r24
    ab7a:	80 81       	ld	r24, Z
    ab7c:	86 33       	cpi	r24, 0x36	; 54
    ab7e:	09 f0       	breq	.+2      	; 0xab82 <pick_drop+0x3ed0>
    ab80:	22 c5       	rjmp	.+2628   	; 0xb5c6 <pick_drop+0x4914>
		if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    ab82:	80 91 6d 03 	lds	r24, 0x036D
    ab86:	90 91 6e 03 	lds	r25, 0x036E
    ab8a:	01 97       	sbiw	r24, 0x01	; 1
    ab8c:	8f 58       	subi	r24, 0x8F	; 143
    ab8e:	9c 4f       	sbci	r25, 0xFC	; 252
    ab90:	fc 01       	movw	r30, r24
    ab92:	80 81       	ld	r24, Z
    ab94:	8c 34       	cpi	r24, 0x4C	; 76
    ab96:	61 f0       	breq	.+24     	; 0xabb0 <pick_drop+0x3efe>
    ab98:	80 91 6d 03 	lds	r24, 0x036D
    ab9c:	90 91 6e 03 	lds	r25, 0x036E
    aba0:	01 97       	sbiw	r24, 0x01	; 1
    aba2:	8f 58       	subi	r24, 0x8F	; 143
    aba4:	9c 4f       	sbci	r25, 0xFC	; 252
    aba6:	fc 01       	movw	r30, r24
    aba8:	80 81       	ld	r24, Z
    abaa:	82 35       	cpi	r24, 0x52	; 82
    abac:	09 f0       	breq	.+2      	; 0xabb0 <pick_drop+0x3efe>
    abae:	b0 c1       	rjmp	.+864    	; 0xaf10 <pick_drop+0x425e>
			forward_mm(20);
    abb0:	84 e1       	ldi	r24, 0x14	; 20
    abb2:	90 e0       	ldi	r25, 0x00	; 0
    abb4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    abb8:	9e 01       	movw	r18, r28
    abba:	2b 5e       	subi	r18, 0xEB	; 235
    abbc:	3d 4f       	sbci	r19, 0xFD	; 253
    abbe:	80 e0       	ldi	r24, 0x00	; 0
    abc0:	90 e0       	ldi	r25, 0x00	; 0
    abc2:	a0 ea       	ldi	r26, 0xA0	; 160
    abc4:	b1 e4       	ldi	r27, 0x41	; 65
    abc6:	f9 01       	movw	r30, r18
    abc8:	80 83       	st	Z, r24
    abca:	91 83       	std	Z+1, r25	; 0x01
    abcc:	a2 83       	std	Z+2, r26	; 0x02
    abce:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    abd0:	8e 01       	movw	r16, r28
    abd2:	07 5e       	subi	r16, 0xE7	; 231
    abd4:	1d 4f       	sbci	r17, 0xFD	; 253
    abd6:	ce 01       	movw	r24, r28
    abd8:	8b 5e       	subi	r24, 0xEB	; 235
    abda:	9d 4f       	sbci	r25, 0xFD	; 253
    abdc:	fc 01       	movw	r30, r24
    abde:	60 81       	ld	r22, Z
    abe0:	71 81       	ldd	r23, Z+1	; 0x01
    abe2:	82 81       	ldd	r24, Z+2	; 0x02
    abe4:	93 81       	ldd	r25, Z+3	; 0x03
    abe6:	26 e6       	ldi	r18, 0x66	; 102
    abe8:	36 e6       	ldi	r19, 0x66	; 102
    abea:	46 e6       	ldi	r20, 0x66	; 102
    abec:	55 e4       	ldi	r21, 0x45	; 69
    abee:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    abf2:	dc 01       	movw	r26, r24
    abf4:	cb 01       	movw	r24, r22
    abf6:	f8 01       	movw	r30, r16
    abf8:	80 83       	st	Z, r24
    abfa:	91 83       	std	Z+1, r25	; 0x01
    abfc:	a2 83       	std	Z+2, r26	; 0x02
    abfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ac00:	ce 01       	movw	r24, r28
    ac02:	87 5e       	subi	r24, 0xE7	; 231
    ac04:	9d 4f       	sbci	r25, 0xFD	; 253
    ac06:	11 e0       	ldi	r17, 0x01	; 1
    ac08:	fc 01       	movw	r30, r24
    ac0a:	60 81       	ld	r22, Z
    ac0c:	71 81       	ldd	r23, Z+1	; 0x01
    ac0e:	82 81       	ldd	r24, Z+2	; 0x02
    ac10:	93 81       	ldd	r25, Z+3	; 0x03
    ac12:	20 e0       	ldi	r18, 0x00	; 0
    ac14:	30 e0       	ldi	r19, 0x00	; 0
    ac16:	40 e8       	ldi	r20, 0x80	; 128
    ac18:	5f e3       	ldi	r21, 0x3F	; 63
    ac1a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    ac1e:	88 23       	and	r24, r24
    ac20:	0c f0       	brlt	.+2      	; 0xac24 <pick_drop+0x3f72>
    ac22:	10 e0       	ldi	r17, 0x00	; 0
    ac24:	11 23       	and	r17, r17
    ac26:	49 f0       	breq	.+18     	; 0xac3a <pick_drop+0x3f88>
		__ticks = 1;
    ac28:	ce 01       	movw	r24, r28
    ac2a:	83 5e       	subi	r24, 0xE3	; 227
    ac2c:	9d 4f       	sbci	r25, 0xFD	; 253
    ac2e:	21 e0       	ldi	r18, 0x01	; 1
    ac30:	30 e0       	ldi	r19, 0x00	; 0
    ac32:	fc 01       	movw	r30, r24
    ac34:	31 83       	std	Z+1, r19	; 0x01
    ac36:	20 83       	st	Z, r18
    ac38:	74 c0       	rjmp	.+232    	; 0xad22 <pick_drop+0x4070>
	else if (__tmp > 65535)
    ac3a:	ce 01       	movw	r24, r28
    ac3c:	87 5e       	subi	r24, 0xE7	; 231
    ac3e:	9d 4f       	sbci	r25, 0xFD	; 253
    ac40:	11 e0       	ldi	r17, 0x01	; 1
    ac42:	fc 01       	movw	r30, r24
    ac44:	60 81       	ld	r22, Z
    ac46:	71 81       	ldd	r23, Z+1	; 0x01
    ac48:	82 81       	ldd	r24, Z+2	; 0x02
    ac4a:	93 81       	ldd	r25, Z+3	; 0x03
    ac4c:	20 e0       	ldi	r18, 0x00	; 0
    ac4e:	3f ef       	ldi	r19, 0xFF	; 255
    ac50:	4f e7       	ldi	r20, 0x7F	; 127
    ac52:	57 e4       	ldi	r21, 0x47	; 71
    ac54:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    ac58:	18 16       	cp	r1, r24
    ac5a:	0c f0       	brlt	.+2      	; 0xac5e <pick_drop+0x3fac>
    ac5c:	10 e0       	ldi	r17, 0x00	; 0
    ac5e:	11 23       	and	r17, r17
    ac60:	09 f4       	brne	.+2      	; 0xac64 <pick_drop+0x3fb2>
    ac62:	4d c0       	rjmp	.+154    	; 0xacfe <pick_drop+0x404c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ac64:	ce 01       	movw	r24, r28
    ac66:	8b 5e       	subi	r24, 0xEB	; 235
    ac68:	9d 4f       	sbci	r25, 0xFD	; 253
    ac6a:	fc 01       	movw	r30, r24
    ac6c:	60 81       	ld	r22, Z
    ac6e:	71 81       	ldd	r23, Z+1	; 0x01
    ac70:	82 81       	ldd	r24, Z+2	; 0x02
    ac72:	93 81       	ldd	r25, Z+3	; 0x03
    ac74:	20 e0       	ldi	r18, 0x00	; 0
    ac76:	30 e0       	ldi	r19, 0x00	; 0
    ac78:	40 e2       	ldi	r20, 0x20	; 32
    ac7a:	51 e4       	ldi	r21, 0x41	; 65
    ac7c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    ac80:	dc 01       	movw	r26, r24
    ac82:	cb 01       	movw	r24, r22
    ac84:	8e 01       	movw	r16, r28
    ac86:	03 5e       	subi	r16, 0xE3	; 227
    ac88:	1d 4f       	sbci	r17, 0xFD	; 253
    ac8a:	bc 01       	movw	r22, r24
    ac8c:	cd 01       	movw	r24, r26
    ac8e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    ac92:	dc 01       	movw	r26, r24
    ac94:	cb 01       	movw	r24, r22
    ac96:	f8 01       	movw	r30, r16
    ac98:	91 83       	std	Z+1, r25	; 0x01
    ac9a:	80 83       	st	Z, r24
    ac9c:	27 c0       	rjmp	.+78     	; 0xacec <pick_drop+0x403a>
    ac9e:	ce 01       	movw	r24, r28
    aca0:	81 5e       	subi	r24, 0xE1	; 225
    aca2:	9d 4f       	sbci	r25, 0xFD	; 253
    aca4:	20 e7       	ldi	r18, 0x70	; 112
    aca6:	31 e0       	ldi	r19, 0x01	; 1
    aca8:	fc 01       	movw	r30, r24
    acaa:	31 83       	std	Z+1, r19	; 0x01
    acac:	20 83       	st	Z, r18
    acae:	ce 01       	movw	r24, r28
    acb0:	81 5e       	subi	r24, 0xE1	; 225
    acb2:	9d 4f       	sbci	r25, 0xFD	; 253
    acb4:	fc 01       	movw	r30, r24
    acb6:	80 81       	ld	r24, Z
    acb8:	91 81       	ldd	r25, Z+1	; 0x01
    acba:	8c 01       	movw	r16, r24
    acbc:	c8 01       	movw	r24, r16
    acbe:	01 97       	sbiw	r24, 0x01	; 1
    acc0:	f1 f7       	brne	.-4      	; 0xacbe <pick_drop+0x400c>
    acc2:	8c 01       	movw	r16, r24
    acc4:	ce 01       	movw	r24, r28
    acc6:	81 5e       	subi	r24, 0xE1	; 225
    acc8:	9d 4f       	sbci	r25, 0xFD	; 253
    acca:	fc 01       	movw	r30, r24
    accc:	11 83       	std	Z+1, r17	; 0x01
    acce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    acd0:	ce 01       	movw	r24, r28
    acd2:	83 5e       	subi	r24, 0xE3	; 227
    acd4:	9d 4f       	sbci	r25, 0xFD	; 253
    acd6:	9e 01       	movw	r18, r28
    acd8:	23 5e       	subi	r18, 0xE3	; 227
    acda:	3d 4f       	sbci	r19, 0xFD	; 253
    acdc:	f9 01       	movw	r30, r18
    acde:	20 81       	ld	r18, Z
    ace0:	31 81       	ldd	r19, Z+1	; 0x01
    ace2:	21 50       	subi	r18, 0x01	; 1
    ace4:	30 40       	sbci	r19, 0x00	; 0
    ace6:	fc 01       	movw	r30, r24
    ace8:	31 83       	std	Z+1, r19	; 0x01
    acea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    acec:	ce 01       	movw	r24, r28
    acee:	83 5e       	subi	r24, 0xE3	; 227
    acf0:	9d 4f       	sbci	r25, 0xFD	; 253
    acf2:	fc 01       	movw	r30, r24
    acf4:	80 81       	ld	r24, Z
    acf6:	91 81       	ldd	r25, Z+1	; 0x01
    acf8:	00 97       	sbiw	r24, 0x00	; 0
    acfa:	89 f6       	brne	.-94     	; 0xac9e <pick_drop+0x3fec>
    acfc:	2f c0       	rjmp	.+94     	; 0xad5c <pick_drop+0x40aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    acfe:	8e 01       	movw	r16, r28
    ad00:	03 5e       	subi	r16, 0xE3	; 227
    ad02:	1d 4f       	sbci	r17, 0xFD	; 253
    ad04:	ce 01       	movw	r24, r28
    ad06:	87 5e       	subi	r24, 0xE7	; 231
    ad08:	9d 4f       	sbci	r25, 0xFD	; 253
    ad0a:	fc 01       	movw	r30, r24
    ad0c:	60 81       	ld	r22, Z
    ad0e:	71 81       	ldd	r23, Z+1	; 0x01
    ad10:	82 81       	ldd	r24, Z+2	; 0x02
    ad12:	93 81       	ldd	r25, Z+3	; 0x03
    ad14:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    ad18:	dc 01       	movw	r26, r24
    ad1a:	cb 01       	movw	r24, r22
    ad1c:	f8 01       	movw	r30, r16
    ad1e:	91 83       	std	Z+1, r25	; 0x01
    ad20:	80 83       	st	Z, r24
    ad22:	ce 01       	movw	r24, r28
    ad24:	8f 5d       	subi	r24, 0xDF	; 223
    ad26:	9d 4f       	sbci	r25, 0xFD	; 253
    ad28:	9e 01       	movw	r18, r28
    ad2a:	23 5e       	subi	r18, 0xE3	; 227
    ad2c:	3d 4f       	sbci	r19, 0xFD	; 253
    ad2e:	f9 01       	movw	r30, r18
    ad30:	20 81       	ld	r18, Z
    ad32:	31 81       	ldd	r19, Z+1	; 0x01
    ad34:	fc 01       	movw	r30, r24
    ad36:	31 83       	std	Z+1, r19	; 0x01
    ad38:	20 83       	st	Z, r18
    ad3a:	ce 01       	movw	r24, r28
    ad3c:	8f 5d       	subi	r24, 0xDF	; 223
    ad3e:	9d 4f       	sbci	r25, 0xFD	; 253
    ad40:	fc 01       	movw	r30, r24
    ad42:	80 81       	ld	r24, Z
    ad44:	91 81       	ldd	r25, Z+1	; 0x01
    ad46:	8c 01       	movw	r16, r24
    ad48:	c8 01       	movw	r24, r16
    ad4a:	01 97       	sbiw	r24, 0x01	; 1
    ad4c:	f1 f7       	brne	.-4      	; 0xad4a <pick_drop+0x4098>
    ad4e:	8c 01       	movw	r16, r24
    ad50:	ce 01       	movw	r24, r28
    ad52:	8f 5d       	subi	r24, 0xDF	; 223
    ad54:	9d 4f       	sbci	r25, 0xFD	; 253
    ad56:	fc 01       	movw	r30, r24
    ad58:	11 83       	std	Z+1, r17	; 0x01
    ad5a:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    ad5c:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    ad60:	9e 01       	movw	r18, r28
    ad62:	2d 5d       	subi	r18, 0xDD	; 221
    ad64:	3d 4f       	sbci	r19, 0xFD	; 253
    ad66:	80 e0       	ldi	r24, 0x00	; 0
    ad68:	90 e0       	ldi	r25, 0x00	; 0
    ad6a:	a0 e2       	ldi	r26, 0x20	; 32
    ad6c:	b1 e4       	ldi	r27, 0x41	; 65
    ad6e:	f9 01       	movw	r30, r18
    ad70:	80 83       	st	Z, r24
    ad72:	91 83       	std	Z+1, r25	; 0x01
    ad74:	a2 83       	std	Z+2, r26	; 0x02
    ad76:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ad78:	8e 01       	movw	r16, r28
    ad7a:	09 5d       	subi	r16, 0xD9	; 217
    ad7c:	1d 4f       	sbci	r17, 0xFD	; 253
    ad7e:	ce 01       	movw	r24, r28
    ad80:	8d 5d       	subi	r24, 0xDD	; 221
    ad82:	9d 4f       	sbci	r25, 0xFD	; 253
    ad84:	fc 01       	movw	r30, r24
    ad86:	60 81       	ld	r22, Z
    ad88:	71 81       	ldd	r23, Z+1	; 0x01
    ad8a:	82 81       	ldd	r24, Z+2	; 0x02
    ad8c:	93 81       	ldd	r25, Z+3	; 0x03
    ad8e:	26 e6       	ldi	r18, 0x66	; 102
    ad90:	36 e6       	ldi	r19, 0x66	; 102
    ad92:	46 e6       	ldi	r20, 0x66	; 102
    ad94:	55 e4       	ldi	r21, 0x45	; 69
    ad96:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    ad9a:	dc 01       	movw	r26, r24
    ad9c:	cb 01       	movw	r24, r22
    ad9e:	f8 01       	movw	r30, r16
    ada0:	80 83       	st	Z, r24
    ada2:	91 83       	std	Z+1, r25	; 0x01
    ada4:	a2 83       	std	Z+2, r26	; 0x02
    ada6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ada8:	ce 01       	movw	r24, r28
    adaa:	89 5d       	subi	r24, 0xD9	; 217
    adac:	9d 4f       	sbci	r25, 0xFD	; 253
    adae:	11 e0       	ldi	r17, 0x01	; 1
    adb0:	fc 01       	movw	r30, r24
    adb2:	60 81       	ld	r22, Z
    adb4:	71 81       	ldd	r23, Z+1	; 0x01
    adb6:	82 81       	ldd	r24, Z+2	; 0x02
    adb8:	93 81       	ldd	r25, Z+3	; 0x03
    adba:	20 e0       	ldi	r18, 0x00	; 0
    adbc:	30 e0       	ldi	r19, 0x00	; 0
    adbe:	40 e8       	ldi	r20, 0x80	; 128
    adc0:	5f e3       	ldi	r21, 0x3F	; 63
    adc2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    adc6:	88 23       	and	r24, r24
    adc8:	0c f0       	brlt	.+2      	; 0xadcc <pick_drop+0x411a>
    adca:	10 e0       	ldi	r17, 0x00	; 0
    adcc:	11 23       	and	r17, r17
    adce:	49 f0       	breq	.+18     	; 0xade2 <pick_drop+0x4130>
		__ticks = 1;
    add0:	ce 01       	movw	r24, r28
    add2:	85 5d       	subi	r24, 0xD5	; 213
    add4:	9d 4f       	sbci	r25, 0xFD	; 253
    add6:	21 e0       	ldi	r18, 0x01	; 1
    add8:	30 e0       	ldi	r19, 0x00	; 0
    adda:	fc 01       	movw	r30, r24
    addc:	31 83       	std	Z+1, r19	; 0x01
    adde:	20 83       	st	Z, r18
    ade0:	74 c0       	rjmp	.+232    	; 0xaeca <pick_drop+0x4218>
	else if (__tmp > 65535)
    ade2:	ce 01       	movw	r24, r28
    ade4:	89 5d       	subi	r24, 0xD9	; 217
    ade6:	9d 4f       	sbci	r25, 0xFD	; 253
    ade8:	11 e0       	ldi	r17, 0x01	; 1
    adea:	fc 01       	movw	r30, r24
    adec:	60 81       	ld	r22, Z
    adee:	71 81       	ldd	r23, Z+1	; 0x01
    adf0:	82 81       	ldd	r24, Z+2	; 0x02
    adf2:	93 81       	ldd	r25, Z+3	; 0x03
    adf4:	20 e0       	ldi	r18, 0x00	; 0
    adf6:	3f ef       	ldi	r19, 0xFF	; 255
    adf8:	4f e7       	ldi	r20, 0x7F	; 127
    adfa:	57 e4       	ldi	r21, 0x47	; 71
    adfc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    ae00:	18 16       	cp	r1, r24
    ae02:	0c f0       	brlt	.+2      	; 0xae06 <pick_drop+0x4154>
    ae04:	10 e0       	ldi	r17, 0x00	; 0
    ae06:	11 23       	and	r17, r17
    ae08:	09 f4       	brne	.+2      	; 0xae0c <pick_drop+0x415a>
    ae0a:	4d c0       	rjmp	.+154    	; 0xaea6 <pick_drop+0x41f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ae0c:	ce 01       	movw	r24, r28
    ae0e:	8d 5d       	subi	r24, 0xDD	; 221
    ae10:	9d 4f       	sbci	r25, 0xFD	; 253
    ae12:	fc 01       	movw	r30, r24
    ae14:	60 81       	ld	r22, Z
    ae16:	71 81       	ldd	r23, Z+1	; 0x01
    ae18:	82 81       	ldd	r24, Z+2	; 0x02
    ae1a:	93 81       	ldd	r25, Z+3	; 0x03
    ae1c:	20 e0       	ldi	r18, 0x00	; 0
    ae1e:	30 e0       	ldi	r19, 0x00	; 0
    ae20:	40 e2       	ldi	r20, 0x20	; 32
    ae22:	51 e4       	ldi	r21, 0x41	; 65
    ae24:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    ae28:	dc 01       	movw	r26, r24
    ae2a:	cb 01       	movw	r24, r22
    ae2c:	8e 01       	movw	r16, r28
    ae2e:	05 5d       	subi	r16, 0xD5	; 213
    ae30:	1d 4f       	sbci	r17, 0xFD	; 253
    ae32:	bc 01       	movw	r22, r24
    ae34:	cd 01       	movw	r24, r26
    ae36:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    ae3a:	dc 01       	movw	r26, r24
    ae3c:	cb 01       	movw	r24, r22
    ae3e:	f8 01       	movw	r30, r16
    ae40:	91 83       	std	Z+1, r25	; 0x01
    ae42:	80 83       	st	Z, r24
    ae44:	27 c0       	rjmp	.+78     	; 0xae94 <pick_drop+0x41e2>
    ae46:	ce 01       	movw	r24, r28
    ae48:	83 5d       	subi	r24, 0xD3	; 211
    ae4a:	9d 4f       	sbci	r25, 0xFD	; 253
    ae4c:	20 e7       	ldi	r18, 0x70	; 112
    ae4e:	31 e0       	ldi	r19, 0x01	; 1
    ae50:	fc 01       	movw	r30, r24
    ae52:	31 83       	std	Z+1, r19	; 0x01
    ae54:	20 83       	st	Z, r18
    ae56:	ce 01       	movw	r24, r28
    ae58:	83 5d       	subi	r24, 0xD3	; 211
    ae5a:	9d 4f       	sbci	r25, 0xFD	; 253
    ae5c:	fc 01       	movw	r30, r24
    ae5e:	80 81       	ld	r24, Z
    ae60:	91 81       	ldd	r25, Z+1	; 0x01
    ae62:	8c 01       	movw	r16, r24
    ae64:	c8 01       	movw	r24, r16
    ae66:	01 97       	sbiw	r24, 0x01	; 1
    ae68:	f1 f7       	brne	.-4      	; 0xae66 <pick_drop+0x41b4>
    ae6a:	8c 01       	movw	r16, r24
    ae6c:	ce 01       	movw	r24, r28
    ae6e:	83 5d       	subi	r24, 0xD3	; 211
    ae70:	9d 4f       	sbci	r25, 0xFD	; 253
    ae72:	fc 01       	movw	r30, r24
    ae74:	11 83       	std	Z+1, r17	; 0x01
    ae76:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae78:	ce 01       	movw	r24, r28
    ae7a:	85 5d       	subi	r24, 0xD5	; 213
    ae7c:	9d 4f       	sbci	r25, 0xFD	; 253
    ae7e:	9e 01       	movw	r18, r28
    ae80:	25 5d       	subi	r18, 0xD5	; 213
    ae82:	3d 4f       	sbci	r19, 0xFD	; 253
    ae84:	f9 01       	movw	r30, r18
    ae86:	20 81       	ld	r18, Z
    ae88:	31 81       	ldd	r19, Z+1	; 0x01
    ae8a:	21 50       	subi	r18, 0x01	; 1
    ae8c:	30 40       	sbci	r19, 0x00	; 0
    ae8e:	fc 01       	movw	r30, r24
    ae90:	31 83       	std	Z+1, r19	; 0x01
    ae92:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae94:	ce 01       	movw	r24, r28
    ae96:	85 5d       	subi	r24, 0xD5	; 213
    ae98:	9d 4f       	sbci	r25, 0xFD	; 253
    ae9a:	fc 01       	movw	r30, r24
    ae9c:	80 81       	ld	r24, Z
    ae9e:	91 81       	ldd	r25, Z+1	; 0x01
    aea0:	00 97       	sbiw	r24, 0x00	; 0
    aea2:	89 f6       	brne	.-94     	; 0xae46 <pick_drop+0x4194>
    aea4:	2f c0       	rjmp	.+94     	; 0xaf04 <pick_drop+0x4252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aea6:	8e 01       	movw	r16, r28
    aea8:	05 5d       	subi	r16, 0xD5	; 213
    aeaa:	1d 4f       	sbci	r17, 0xFD	; 253
    aeac:	ce 01       	movw	r24, r28
    aeae:	89 5d       	subi	r24, 0xD9	; 217
    aeb0:	9d 4f       	sbci	r25, 0xFD	; 253
    aeb2:	fc 01       	movw	r30, r24
    aeb4:	60 81       	ld	r22, Z
    aeb6:	71 81       	ldd	r23, Z+1	; 0x01
    aeb8:	82 81       	ldd	r24, Z+2	; 0x02
    aeba:	93 81       	ldd	r25, Z+3	; 0x03
    aebc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    aec0:	dc 01       	movw	r26, r24
    aec2:	cb 01       	movw	r24, r22
    aec4:	f8 01       	movw	r30, r16
    aec6:	91 83       	std	Z+1, r25	; 0x01
    aec8:	80 83       	st	Z, r24
    aeca:	ce 01       	movw	r24, r28
    aecc:	81 5d       	subi	r24, 0xD1	; 209
    aece:	9d 4f       	sbci	r25, 0xFD	; 253
    aed0:	9e 01       	movw	r18, r28
    aed2:	25 5d       	subi	r18, 0xD5	; 213
    aed4:	3d 4f       	sbci	r19, 0xFD	; 253
    aed6:	f9 01       	movw	r30, r18
    aed8:	20 81       	ld	r18, Z
    aeda:	31 81       	ldd	r19, Z+1	; 0x01
    aedc:	fc 01       	movw	r30, r24
    aede:	31 83       	std	Z+1, r19	; 0x01
    aee0:	20 83       	st	Z, r18
    aee2:	ce 01       	movw	r24, r28
    aee4:	81 5d       	subi	r24, 0xD1	; 209
    aee6:	9d 4f       	sbci	r25, 0xFD	; 253
    aee8:	fc 01       	movw	r30, r24
    aeea:	80 81       	ld	r24, Z
    aeec:	91 81       	ldd	r25, Z+1	; 0x01
    aeee:	8c 01       	movw	r16, r24
    aef0:	c8 01       	movw	r24, r16
    aef2:	01 97       	sbiw	r24, 0x01	; 1
    aef4:	f1 f7       	brne	.-4      	; 0xaef2 <pick_drop+0x4240>
    aef6:	8c 01       	movw	r16, r24
    aef8:	ce 01       	movw	r24, r28
    aefa:	81 5d       	subi	r24, 0xD1	; 209
    aefc:	9d 4f       	sbci	r25, 0xFD	; 253
    aefe:	fc 01       	movw	r30, r24
    af00:	11 83       	std	Z+1, r17	; 0x01
    af02:	00 83       	st	Z, r16
			_delay_ms(10);
			back_mm(20);
    af04:	84 e1       	ldi	r24, 0x14	; 20
    af06:	90 e0       	ldi	r25, 0x00	; 0
    af08:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    af0c:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
		} 
		else{
			forward_mm(35);
    af10:	83 e2       	ldi	r24, 0x23	; 35
    af12:	90 e0       	ldi	r25, 0x00	; 0
    af14:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    af18:	9e 01       	movw	r18, r28
    af1a:	2f 5c       	subi	r18, 0xCF	; 207
    af1c:	3d 4f       	sbci	r19, 0xFD	; 253
    af1e:	80 e0       	ldi	r24, 0x00	; 0
    af20:	90 e0       	ldi	r25, 0x00	; 0
    af22:	a0 ea       	ldi	r26, 0xA0	; 160
    af24:	b1 e4       	ldi	r27, 0x41	; 65
    af26:	f9 01       	movw	r30, r18
    af28:	80 83       	st	Z, r24
    af2a:	91 83       	std	Z+1, r25	; 0x01
    af2c:	a2 83       	std	Z+2, r26	; 0x02
    af2e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    af30:	8e 01       	movw	r16, r28
    af32:	0b 5c       	subi	r16, 0xCB	; 203
    af34:	1d 4f       	sbci	r17, 0xFD	; 253
    af36:	ce 01       	movw	r24, r28
    af38:	8f 5c       	subi	r24, 0xCF	; 207
    af3a:	9d 4f       	sbci	r25, 0xFD	; 253
    af3c:	fc 01       	movw	r30, r24
    af3e:	60 81       	ld	r22, Z
    af40:	71 81       	ldd	r23, Z+1	; 0x01
    af42:	82 81       	ldd	r24, Z+2	; 0x02
    af44:	93 81       	ldd	r25, Z+3	; 0x03
    af46:	26 e6       	ldi	r18, 0x66	; 102
    af48:	36 e6       	ldi	r19, 0x66	; 102
    af4a:	46 e6       	ldi	r20, 0x66	; 102
    af4c:	55 e4       	ldi	r21, 0x45	; 69
    af4e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    af52:	dc 01       	movw	r26, r24
    af54:	cb 01       	movw	r24, r22
    af56:	f8 01       	movw	r30, r16
    af58:	80 83       	st	Z, r24
    af5a:	91 83       	std	Z+1, r25	; 0x01
    af5c:	a2 83       	std	Z+2, r26	; 0x02
    af5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    af60:	ce 01       	movw	r24, r28
    af62:	8b 5c       	subi	r24, 0xCB	; 203
    af64:	9d 4f       	sbci	r25, 0xFD	; 253
    af66:	11 e0       	ldi	r17, 0x01	; 1
    af68:	fc 01       	movw	r30, r24
    af6a:	60 81       	ld	r22, Z
    af6c:	71 81       	ldd	r23, Z+1	; 0x01
    af6e:	82 81       	ldd	r24, Z+2	; 0x02
    af70:	93 81       	ldd	r25, Z+3	; 0x03
    af72:	20 e0       	ldi	r18, 0x00	; 0
    af74:	30 e0       	ldi	r19, 0x00	; 0
    af76:	40 e8       	ldi	r20, 0x80	; 128
    af78:	5f e3       	ldi	r21, 0x3F	; 63
    af7a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    af7e:	88 23       	and	r24, r24
    af80:	0c f0       	brlt	.+2      	; 0xaf84 <pick_drop+0x42d2>
    af82:	10 e0       	ldi	r17, 0x00	; 0
    af84:	11 23       	and	r17, r17
    af86:	49 f0       	breq	.+18     	; 0xaf9a <pick_drop+0x42e8>
		__ticks = 1;
    af88:	ce 01       	movw	r24, r28
    af8a:	87 5c       	subi	r24, 0xC7	; 199
    af8c:	9d 4f       	sbci	r25, 0xFD	; 253
    af8e:	21 e0       	ldi	r18, 0x01	; 1
    af90:	30 e0       	ldi	r19, 0x00	; 0
    af92:	fc 01       	movw	r30, r24
    af94:	31 83       	std	Z+1, r19	; 0x01
    af96:	20 83       	st	Z, r18
    af98:	74 c0       	rjmp	.+232    	; 0xb082 <pick_drop+0x43d0>
	else if (__tmp > 65535)
    af9a:	ce 01       	movw	r24, r28
    af9c:	8b 5c       	subi	r24, 0xCB	; 203
    af9e:	9d 4f       	sbci	r25, 0xFD	; 253
    afa0:	11 e0       	ldi	r17, 0x01	; 1
    afa2:	fc 01       	movw	r30, r24
    afa4:	60 81       	ld	r22, Z
    afa6:	71 81       	ldd	r23, Z+1	; 0x01
    afa8:	82 81       	ldd	r24, Z+2	; 0x02
    afaa:	93 81       	ldd	r25, Z+3	; 0x03
    afac:	20 e0       	ldi	r18, 0x00	; 0
    afae:	3f ef       	ldi	r19, 0xFF	; 255
    afb0:	4f e7       	ldi	r20, 0x7F	; 127
    afb2:	57 e4       	ldi	r21, 0x47	; 71
    afb4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    afb8:	18 16       	cp	r1, r24
    afba:	0c f0       	brlt	.+2      	; 0xafbe <pick_drop+0x430c>
    afbc:	10 e0       	ldi	r17, 0x00	; 0
    afbe:	11 23       	and	r17, r17
    afc0:	09 f4       	brne	.+2      	; 0xafc4 <pick_drop+0x4312>
    afc2:	4d c0       	rjmp	.+154    	; 0xb05e <pick_drop+0x43ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    afc4:	ce 01       	movw	r24, r28
    afc6:	8f 5c       	subi	r24, 0xCF	; 207
    afc8:	9d 4f       	sbci	r25, 0xFD	; 253
    afca:	fc 01       	movw	r30, r24
    afcc:	60 81       	ld	r22, Z
    afce:	71 81       	ldd	r23, Z+1	; 0x01
    afd0:	82 81       	ldd	r24, Z+2	; 0x02
    afd2:	93 81       	ldd	r25, Z+3	; 0x03
    afd4:	20 e0       	ldi	r18, 0x00	; 0
    afd6:	30 e0       	ldi	r19, 0x00	; 0
    afd8:	40 e2       	ldi	r20, 0x20	; 32
    afda:	51 e4       	ldi	r21, 0x41	; 65
    afdc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    afe0:	dc 01       	movw	r26, r24
    afe2:	cb 01       	movw	r24, r22
    afe4:	8e 01       	movw	r16, r28
    afe6:	07 5c       	subi	r16, 0xC7	; 199
    afe8:	1d 4f       	sbci	r17, 0xFD	; 253
    afea:	bc 01       	movw	r22, r24
    afec:	cd 01       	movw	r24, r26
    afee:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    aff2:	dc 01       	movw	r26, r24
    aff4:	cb 01       	movw	r24, r22
    aff6:	f8 01       	movw	r30, r16
    aff8:	91 83       	std	Z+1, r25	; 0x01
    affa:	80 83       	st	Z, r24
    affc:	27 c0       	rjmp	.+78     	; 0xb04c <pick_drop+0x439a>
    affe:	ce 01       	movw	r24, r28
    b000:	85 5c       	subi	r24, 0xC5	; 197
    b002:	9d 4f       	sbci	r25, 0xFD	; 253
    b004:	20 e7       	ldi	r18, 0x70	; 112
    b006:	31 e0       	ldi	r19, 0x01	; 1
    b008:	fc 01       	movw	r30, r24
    b00a:	31 83       	std	Z+1, r19	; 0x01
    b00c:	20 83       	st	Z, r18
    b00e:	ce 01       	movw	r24, r28
    b010:	85 5c       	subi	r24, 0xC5	; 197
    b012:	9d 4f       	sbci	r25, 0xFD	; 253
    b014:	fc 01       	movw	r30, r24
    b016:	80 81       	ld	r24, Z
    b018:	91 81       	ldd	r25, Z+1	; 0x01
    b01a:	8c 01       	movw	r16, r24
    b01c:	c8 01       	movw	r24, r16
    b01e:	01 97       	sbiw	r24, 0x01	; 1
    b020:	f1 f7       	brne	.-4      	; 0xb01e <pick_drop+0x436c>
    b022:	8c 01       	movw	r16, r24
    b024:	ce 01       	movw	r24, r28
    b026:	85 5c       	subi	r24, 0xC5	; 197
    b028:	9d 4f       	sbci	r25, 0xFD	; 253
    b02a:	fc 01       	movw	r30, r24
    b02c:	11 83       	std	Z+1, r17	; 0x01
    b02e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b030:	ce 01       	movw	r24, r28
    b032:	87 5c       	subi	r24, 0xC7	; 199
    b034:	9d 4f       	sbci	r25, 0xFD	; 253
    b036:	9e 01       	movw	r18, r28
    b038:	27 5c       	subi	r18, 0xC7	; 199
    b03a:	3d 4f       	sbci	r19, 0xFD	; 253
    b03c:	f9 01       	movw	r30, r18
    b03e:	20 81       	ld	r18, Z
    b040:	31 81       	ldd	r19, Z+1	; 0x01
    b042:	21 50       	subi	r18, 0x01	; 1
    b044:	30 40       	sbci	r19, 0x00	; 0
    b046:	fc 01       	movw	r30, r24
    b048:	31 83       	std	Z+1, r19	; 0x01
    b04a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b04c:	ce 01       	movw	r24, r28
    b04e:	87 5c       	subi	r24, 0xC7	; 199
    b050:	9d 4f       	sbci	r25, 0xFD	; 253
    b052:	fc 01       	movw	r30, r24
    b054:	80 81       	ld	r24, Z
    b056:	91 81       	ldd	r25, Z+1	; 0x01
    b058:	00 97       	sbiw	r24, 0x00	; 0
    b05a:	89 f6       	brne	.-94     	; 0xaffe <pick_drop+0x434c>
    b05c:	2f c0       	rjmp	.+94     	; 0xb0bc <pick_drop+0x440a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b05e:	8e 01       	movw	r16, r28
    b060:	07 5c       	subi	r16, 0xC7	; 199
    b062:	1d 4f       	sbci	r17, 0xFD	; 253
    b064:	ce 01       	movw	r24, r28
    b066:	8b 5c       	subi	r24, 0xCB	; 203
    b068:	9d 4f       	sbci	r25, 0xFD	; 253
    b06a:	fc 01       	movw	r30, r24
    b06c:	60 81       	ld	r22, Z
    b06e:	71 81       	ldd	r23, Z+1	; 0x01
    b070:	82 81       	ldd	r24, Z+2	; 0x02
    b072:	93 81       	ldd	r25, Z+3	; 0x03
    b074:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b078:	dc 01       	movw	r26, r24
    b07a:	cb 01       	movw	r24, r22
    b07c:	f8 01       	movw	r30, r16
    b07e:	91 83       	std	Z+1, r25	; 0x01
    b080:	80 83       	st	Z, r24
    b082:	ce 01       	movw	r24, r28
    b084:	83 5c       	subi	r24, 0xC3	; 195
    b086:	9d 4f       	sbci	r25, 0xFD	; 253
    b088:	9e 01       	movw	r18, r28
    b08a:	27 5c       	subi	r18, 0xC7	; 199
    b08c:	3d 4f       	sbci	r19, 0xFD	; 253
    b08e:	f9 01       	movw	r30, r18
    b090:	20 81       	ld	r18, Z
    b092:	31 81       	ldd	r19, Z+1	; 0x01
    b094:	fc 01       	movw	r30, r24
    b096:	31 83       	std	Z+1, r19	; 0x01
    b098:	20 83       	st	Z, r18
    b09a:	ce 01       	movw	r24, r28
    b09c:	83 5c       	subi	r24, 0xC3	; 195
    b09e:	9d 4f       	sbci	r25, 0xFD	; 253
    b0a0:	fc 01       	movw	r30, r24
    b0a2:	80 81       	ld	r24, Z
    b0a4:	91 81       	ldd	r25, Z+1	; 0x01
    b0a6:	8c 01       	movw	r16, r24
    b0a8:	c8 01       	movw	r24, r16
    b0aa:	01 97       	sbiw	r24, 0x01	; 1
    b0ac:	f1 f7       	brne	.-4      	; 0xb0aa <pick_drop+0x43f8>
    b0ae:	8c 01       	movw	r16, r24
    b0b0:	ce 01       	movw	r24, r28
    b0b2:	83 5c       	subi	r24, 0xC3	; 195
    b0b4:	9d 4f       	sbci	r25, 0xFD	; 253
    b0b6:	fc 01       	movw	r30, r24
    b0b8:	11 83       	std	Z+1, r17	; 0x01
    b0ba:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    b0bc:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
			front();
    b0c0:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    b0c4:	9e 01       	movw	r18, r28
    b0c6:	21 5c       	subi	r18, 0xC1	; 193
    b0c8:	3d 4f       	sbci	r19, 0xFD	; 253
    b0ca:	80 e0       	ldi	r24, 0x00	; 0
    b0cc:	90 e0       	ldi	r25, 0x00	; 0
    b0ce:	a8 ec       	ldi	r26, 0xC8	; 200
    b0d0:	b2 e4       	ldi	r27, 0x42	; 66
    b0d2:	f9 01       	movw	r30, r18
    b0d4:	80 83       	st	Z, r24
    b0d6:	91 83       	std	Z+1, r25	; 0x01
    b0d8:	a2 83       	std	Z+2, r26	; 0x02
    b0da:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b0dc:	8e 01       	movw	r16, r28
    b0de:	0d 5b       	subi	r16, 0xBD	; 189
    b0e0:	1d 4f       	sbci	r17, 0xFD	; 253
    b0e2:	ce 01       	movw	r24, r28
    b0e4:	81 5c       	subi	r24, 0xC1	; 193
    b0e6:	9d 4f       	sbci	r25, 0xFD	; 253
    b0e8:	fc 01       	movw	r30, r24
    b0ea:	60 81       	ld	r22, Z
    b0ec:	71 81       	ldd	r23, Z+1	; 0x01
    b0ee:	82 81       	ldd	r24, Z+2	; 0x02
    b0f0:	93 81       	ldd	r25, Z+3	; 0x03
    b0f2:	26 e6       	ldi	r18, 0x66	; 102
    b0f4:	36 e6       	ldi	r19, 0x66	; 102
    b0f6:	46 e6       	ldi	r20, 0x66	; 102
    b0f8:	55 e4       	ldi	r21, 0x45	; 69
    b0fa:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b0fe:	dc 01       	movw	r26, r24
    b100:	cb 01       	movw	r24, r22
    b102:	f8 01       	movw	r30, r16
    b104:	80 83       	st	Z, r24
    b106:	91 83       	std	Z+1, r25	; 0x01
    b108:	a2 83       	std	Z+2, r26	; 0x02
    b10a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b10c:	ce 01       	movw	r24, r28
    b10e:	8d 5b       	subi	r24, 0xBD	; 189
    b110:	9d 4f       	sbci	r25, 0xFD	; 253
    b112:	11 e0       	ldi	r17, 0x01	; 1
    b114:	fc 01       	movw	r30, r24
    b116:	60 81       	ld	r22, Z
    b118:	71 81       	ldd	r23, Z+1	; 0x01
    b11a:	82 81       	ldd	r24, Z+2	; 0x02
    b11c:	93 81       	ldd	r25, Z+3	; 0x03
    b11e:	20 e0       	ldi	r18, 0x00	; 0
    b120:	30 e0       	ldi	r19, 0x00	; 0
    b122:	40 e8       	ldi	r20, 0x80	; 128
    b124:	5f e3       	ldi	r21, 0x3F	; 63
    b126:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    b12a:	88 23       	and	r24, r24
    b12c:	0c f0       	brlt	.+2      	; 0xb130 <pick_drop+0x447e>
    b12e:	10 e0       	ldi	r17, 0x00	; 0
    b130:	11 23       	and	r17, r17
    b132:	49 f0       	breq	.+18     	; 0xb146 <pick_drop+0x4494>
		__ticks = 1;
    b134:	ce 01       	movw	r24, r28
    b136:	89 5b       	subi	r24, 0xB9	; 185
    b138:	9d 4f       	sbci	r25, 0xFD	; 253
    b13a:	21 e0       	ldi	r18, 0x01	; 1
    b13c:	30 e0       	ldi	r19, 0x00	; 0
    b13e:	fc 01       	movw	r30, r24
    b140:	31 83       	std	Z+1, r19	; 0x01
    b142:	20 83       	st	Z, r18
    b144:	74 c0       	rjmp	.+232    	; 0xb22e <pick_drop+0x457c>
	else if (__tmp > 65535)
    b146:	ce 01       	movw	r24, r28
    b148:	8d 5b       	subi	r24, 0xBD	; 189
    b14a:	9d 4f       	sbci	r25, 0xFD	; 253
    b14c:	11 e0       	ldi	r17, 0x01	; 1
    b14e:	fc 01       	movw	r30, r24
    b150:	60 81       	ld	r22, Z
    b152:	71 81       	ldd	r23, Z+1	; 0x01
    b154:	82 81       	ldd	r24, Z+2	; 0x02
    b156:	93 81       	ldd	r25, Z+3	; 0x03
    b158:	20 e0       	ldi	r18, 0x00	; 0
    b15a:	3f ef       	ldi	r19, 0xFF	; 255
    b15c:	4f e7       	ldi	r20, 0x7F	; 127
    b15e:	57 e4       	ldi	r21, 0x47	; 71
    b160:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    b164:	18 16       	cp	r1, r24
    b166:	0c f0       	brlt	.+2      	; 0xb16a <pick_drop+0x44b8>
    b168:	10 e0       	ldi	r17, 0x00	; 0
    b16a:	11 23       	and	r17, r17
    b16c:	09 f4       	brne	.+2      	; 0xb170 <pick_drop+0x44be>
    b16e:	4d c0       	rjmp	.+154    	; 0xb20a <pick_drop+0x4558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b170:	ce 01       	movw	r24, r28
    b172:	81 5c       	subi	r24, 0xC1	; 193
    b174:	9d 4f       	sbci	r25, 0xFD	; 253
    b176:	fc 01       	movw	r30, r24
    b178:	60 81       	ld	r22, Z
    b17a:	71 81       	ldd	r23, Z+1	; 0x01
    b17c:	82 81       	ldd	r24, Z+2	; 0x02
    b17e:	93 81       	ldd	r25, Z+3	; 0x03
    b180:	20 e0       	ldi	r18, 0x00	; 0
    b182:	30 e0       	ldi	r19, 0x00	; 0
    b184:	40 e2       	ldi	r20, 0x20	; 32
    b186:	51 e4       	ldi	r21, 0x41	; 65
    b188:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b18c:	dc 01       	movw	r26, r24
    b18e:	cb 01       	movw	r24, r22
    b190:	8e 01       	movw	r16, r28
    b192:	09 5b       	subi	r16, 0xB9	; 185
    b194:	1d 4f       	sbci	r17, 0xFD	; 253
    b196:	bc 01       	movw	r22, r24
    b198:	cd 01       	movw	r24, r26
    b19a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b19e:	dc 01       	movw	r26, r24
    b1a0:	cb 01       	movw	r24, r22
    b1a2:	f8 01       	movw	r30, r16
    b1a4:	91 83       	std	Z+1, r25	; 0x01
    b1a6:	80 83       	st	Z, r24
    b1a8:	27 c0       	rjmp	.+78     	; 0xb1f8 <pick_drop+0x4546>
    b1aa:	ce 01       	movw	r24, r28
    b1ac:	87 5b       	subi	r24, 0xB7	; 183
    b1ae:	9d 4f       	sbci	r25, 0xFD	; 253
    b1b0:	20 e7       	ldi	r18, 0x70	; 112
    b1b2:	31 e0       	ldi	r19, 0x01	; 1
    b1b4:	fc 01       	movw	r30, r24
    b1b6:	31 83       	std	Z+1, r19	; 0x01
    b1b8:	20 83       	st	Z, r18
    b1ba:	ce 01       	movw	r24, r28
    b1bc:	87 5b       	subi	r24, 0xB7	; 183
    b1be:	9d 4f       	sbci	r25, 0xFD	; 253
    b1c0:	fc 01       	movw	r30, r24
    b1c2:	80 81       	ld	r24, Z
    b1c4:	91 81       	ldd	r25, Z+1	; 0x01
    b1c6:	8c 01       	movw	r16, r24
    b1c8:	c8 01       	movw	r24, r16
    b1ca:	01 97       	sbiw	r24, 0x01	; 1
    b1cc:	f1 f7       	brne	.-4      	; 0xb1ca <pick_drop+0x4518>
    b1ce:	8c 01       	movw	r16, r24
    b1d0:	ce 01       	movw	r24, r28
    b1d2:	87 5b       	subi	r24, 0xB7	; 183
    b1d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b1d6:	fc 01       	movw	r30, r24
    b1d8:	11 83       	std	Z+1, r17	; 0x01
    b1da:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b1dc:	ce 01       	movw	r24, r28
    b1de:	89 5b       	subi	r24, 0xB9	; 185
    b1e0:	9d 4f       	sbci	r25, 0xFD	; 253
    b1e2:	9e 01       	movw	r18, r28
    b1e4:	29 5b       	subi	r18, 0xB9	; 185
    b1e6:	3d 4f       	sbci	r19, 0xFD	; 253
    b1e8:	f9 01       	movw	r30, r18
    b1ea:	20 81       	ld	r18, Z
    b1ec:	31 81       	ldd	r19, Z+1	; 0x01
    b1ee:	21 50       	subi	r18, 0x01	; 1
    b1f0:	30 40       	sbci	r19, 0x00	; 0
    b1f2:	fc 01       	movw	r30, r24
    b1f4:	31 83       	std	Z+1, r19	; 0x01
    b1f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1f8:	ce 01       	movw	r24, r28
    b1fa:	89 5b       	subi	r24, 0xB9	; 185
    b1fc:	9d 4f       	sbci	r25, 0xFD	; 253
    b1fe:	fc 01       	movw	r30, r24
    b200:	80 81       	ld	r24, Z
    b202:	91 81       	ldd	r25, Z+1	; 0x01
    b204:	00 97       	sbiw	r24, 0x00	; 0
    b206:	89 f6       	brne	.-94     	; 0xb1aa <pick_drop+0x44f8>
    b208:	2f c0       	rjmp	.+94     	; 0xb268 <pick_drop+0x45b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b20a:	8e 01       	movw	r16, r28
    b20c:	09 5b       	subi	r16, 0xB9	; 185
    b20e:	1d 4f       	sbci	r17, 0xFD	; 253
    b210:	ce 01       	movw	r24, r28
    b212:	8d 5b       	subi	r24, 0xBD	; 189
    b214:	9d 4f       	sbci	r25, 0xFD	; 253
    b216:	fc 01       	movw	r30, r24
    b218:	60 81       	ld	r22, Z
    b21a:	71 81       	ldd	r23, Z+1	; 0x01
    b21c:	82 81       	ldd	r24, Z+2	; 0x02
    b21e:	93 81       	ldd	r25, Z+3	; 0x03
    b220:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b224:	dc 01       	movw	r26, r24
    b226:	cb 01       	movw	r24, r22
    b228:	f8 01       	movw	r30, r16
    b22a:	91 83       	std	Z+1, r25	; 0x01
    b22c:	80 83       	st	Z, r24
    b22e:	ce 01       	movw	r24, r28
    b230:	85 5b       	subi	r24, 0xB5	; 181
    b232:	9d 4f       	sbci	r25, 0xFD	; 253
    b234:	9e 01       	movw	r18, r28
    b236:	29 5b       	subi	r18, 0xB9	; 185
    b238:	3d 4f       	sbci	r19, 0xFD	; 253
    b23a:	f9 01       	movw	r30, r18
    b23c:	20 81       	ld	r18, Z
    b23e:	31 81       	ldd	r19, Z+1	; 0x01
    b240:	fc 01       	movw	r30, r24
    b242:	31 83       	std	Z+1, r19	; 0x01
    b244:	20 83       	st	Z, r18
    b246:	ce 01       	movw	r24, r28
    b248:	85 5b       	subi	r24, 0xB5	; 181
    b24a:	9d 4f       	sbci	r25, 0xFD	; 253
    b24c:	fc 01       	movw	r30, r24
    b24e:	80 81       	ld	r24, Z
    b250:	91 81       	ldd	r25, Z+1	; 0x01
    b252:	8c 01       	movw	r16, r24
    b254:	c8 01       	movw	r24, r16
    b256:	01 97       	sbiw	r24, 0x01	; 1
    b258:	f1 f7       	brne	.-4      	; 0xb256 <pick_drop+0x45a4>
    b25a:	8c 01       	movw	r16, r24
    b25c:	ce 01       	movw	r24, r28
    b25e:	85 5b       	subi	r24, 0xB5	; 181
    b260:	9d 4f       	sbci	r25, 0xFD	; 253
    b262:	fc 01       	movw	r30, r24
    b264:	11 83       	std	Z+1, r17	; 0x01
    b266:	00 83       	st	Z, r16
			_delay_ms(100);
			right_degrees(50);
    b268:	82 e3       	ldi	r24, 0x32	; 50
    b26a:	90 e0       	ldi	r25, 0x00	; 0
    b26c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
    b270:	9e 01       	movw	r18, r28
    b272:	23 5b       	subi	r18, 0xB3	; 179
    b274:	3d 4f       	sbci	r19, 0xFD	; 253
    b276:	80 e0       	ldi	r24, 0x00	; 0
    b278:	90 e0       	ldi	r25, 0x00	; 0
    b27a:	a0 ea       	ldi	r26, 0xA0	; 160
    b27c:	b1 e4       	ldi	r27, 0x41	; 65
    b27e:	f9 01       	movw	r30, r18
    b280:	80 83       	st	Z, r24
    b282:	91 83       	std	Z+1, r25	; 0x01
    b284:	a2 83       	std	Z+2, r26	; 0x02
    b286:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b288:	8e 01       	movw	r16, r28
    b28a:	0f 5a       	subi	r16, 0xAF	; 175
    b28c:	1d 4f       	sbci	r17, 0xFD	; 253
    b28e:	ce 01       	movw	r24, r28
    b290:	83 5b       	subi	r24, 0xB3	; 179
    b292:	9d 4f       	sbci	r25, 0xFD	; 253
    b294:	fc 01       	movw	r30, r24
    b296:	60 81       	ld	r22, Z
    b298:	71 81       	ldd	r23, Z+1	; 0x01
    b29a:	82 81       	ldd	r24, Z+2	; 0x02
    b29c:	93 81       	ldd	r25, Z+3	; 0x03
    b29e:	26 e6       	ldi	r18, 0x66	; 102
    b2a0:	36 e6       	ldi	r19, 0x66	; 102
    b2a2:	46 e6       	ldi	r20, 0x66	; 102
    b2a4:	55 e4       	ldi	r21, 0x45	; 69
    b2a6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b2aa:	dc 01       	movw	r26, r24
    b2ac:	cb 01       	movw	r24, r22
    b2ae:	f8 01       	movw	r30, r16
    b2b0:	80 83       	st	Z, r24
    b2b2:	91 83       	std	Z+1, r25	; 0x01
    b2b4:	a2 83       	std	Z+2, r26	; 0x02
    b2b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b2b8:	ce 01       	movw	r24, r28
    b2ba:	8f 5a       	subi	r24, 0xAF	; 175
    b2bc:	9d 4f       	sbci	r25, 0xFD	; 253
    b2be:	11 e0       	ldi	r17, 0x01	; 1
    b2c0:	fc 01       	movw	r30, r24
    b2c2:	60 81       	ld	r22, Z
    b2c4:	71 81       	ldd	r23, Z+1	; 0x01
    b2c6:	82 81       	ldd	r24, Z+2	; 0x02
    b2c8:	93 81       	ldd	r25, Z+3	; 0x03
    b2ca:	20 e0       	ldi	r18, 0x00	; 0
    b2cc:	30 e0       	ldi	r19, 0x00	; 0
    b2ce:	40 e8       	ldi	r20, 0x80	; 128
    b2d0:	5f e3       	ldi	r21, 0x3F	; 63
    b2d2:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    b2d6:	88 23       	and	r24, r24
    b2d8:	0c f0       	brlt	.+2      	; 0xb2dc <pick_drop+0x462a>
    b2da:	10 e0       	ldi	r17, 0x00	; 0
    b2dc:	11 23       	and	r17, r17
    b2de:	49 f0       	breq	.+18     	; 0xb2f2 <pick_drop+0x4640>
		__ticks = 1;
    b2e0:	ce 01       	movw	r24, r28
    b2e2:	8b 5a       	subi	r24, 0xAB	; 171
    b2e4:	9d 4f       	sbci	r25, 0xFD	; 253
    b2e6:	21 e0       	ldi	r18, 0x01	; 1
    b2e8:	30 e0       	ldi	r19, 0x00	; 0
    b2ea:	fc 01       	movw	r30, r24
    b2ec:	31 83       	std	Z+1, r19	; 0x01
    b2ee:	20 83       	st	Z, r18
    b2f0:	74 c0       	rjmp	.+232    	; 0xb3da <pick_drop+0x4728>
	else if (__tmp > 65535)
    b2f2:	ce 01       	movw	r24, r28
    b2f4:	8f 5a       	subi	r24, 0xAF	; 175
    b2f6:	9d 4f       	sbci	r25, 0xFD	; 253
    b2f8:	11 e0       	ldi	r17, 0x01	; 1
    b2fa:	fc 01       	movw	r30, r24
    b2fc:	60 81       	ld	r22, Z
    b2fe:	71 81       	ldd	r23, Z+1	; 0x01
    b300:	82 81       	ldd	r24, Z+2	; 0x02
    b302:	93 81       	ldd	r25, Z+3	; 0x03
    b304:	20 e0       	ldi	r18, 0x00	; 0
    b306:	3f ef       	ldi	r19, 0xFF	; 255
    b308:	4f e7       	ldi	r20, 0x7F	; 127
    b30a:	57 e4       	ldi	r21, 0x47	; 71
    b30c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    b310:	18 16       	cp	r1, r24
    b312:	0c f0       	brlt	.+2      	; 0xb316 <pick_drop+0x4664>
    b314:	10 e0       	ldi	r17, 0x00	; 0
    b316:	11 23       	and	r17, r17
    b318:	09 f4       	brne	.+2      	; 0xb31c <pick_drop+0x466a>
    b31a:	4d c0       	rjmp	.+154    	; 0xb3b6 <pick_drop+0x4704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b31c:	ce 01       	movw	r24, r28
    b31e:	83 5b       	subi	r24, 0xB3	; 179
    b320:	9d 4f       	sbci	r25, 0xFD	; 253
    b322:	fc 01       	movw	r30, r24
    b324:	60 81       	ld	r22, Z
    b326:	71 81       	ldd	r23, Z+1	; 0x01
    b328:	82 81       	ldd	r24, Z+2	; 0x02
    b32a:	93 81       	ldd	r25, Z+3	; 0x03
    b32c:	20 e0       	ldi	r18, 0x00	; 0
    b32e:	30 e0       	ldi	r19, 0x00	; 0
    b330:	40 e2       	ldi	r20, 0x20	; 32
    b332:	51 e4       	ldi	r21, 0x41	; 65
    b334:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b338:	dc 01       	movw	r26, r24
    b33a:	cb 01       	movw	r24, r22
    b33c:	8e 01       	movw	r16, r28
    b33e:	0b 5a       	subi	r16, 0xAB	; 171
    b340:	1d 4f       	sbci	r17, 0xFD	; 253
    b342:	bc 01       	movw	r22, r24
    b344:	cd 01       	movw	r24, r26
    b346:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b34a:	dc 01       	movw	r26, r24
    b34c:	cb 01       	movw	r24, r22
    b34e:	f8 01       	movw	r30, r16
    b350:	91 83       	std	Z+1, r25	; 0x01
    b352:	80 83       	st	Z, r24
    b354:	27 c0       	rjmp	.+78     	; 0xb3a4 <pick_drop+0x46f2>
    b356:	ce 01       	movw	r24, r28
    b358:	89 5a       	subi	r24, 0xA9	; 169
    b35a:	9d 4f       	sbci	r25, 0xFD	; 253
    b35c:	20 e7       	ldi	r18, 0x70	; 112
    b35e:	31 e0       	ldi	r19, 0x01	; 1
    b360:	fc 01       	movw	r30, r24
    b362:	31 83       	std	Z+1, r19	; 0x01
    b364:	20 83       	st	Z, r18
    b366:	ce 01       	movw	r24, r28
    b368:	89 5a       	subi	r24, 0xA9	; 169
    b36a:	9d 4f       	sbci	r25, 0xFD	; 253
    b36c:	fc 01       	movw	r30, r24
    b36e:	80 81       	ld	r24, Z
    b370:	91 81       	ldd	r25, Z+1	; 0x01
    b372:	8c 01       	movw	r16, r24
    b374:	c8 01       	movw	r24, r16
    b376:	01 97       	sbiw	r24, 0x01	; 1
    b378:	f1 f7       	brne	.-4      	; 0xb376 <pick_drop+0x46c4>
    b37a:	8c 01       	movw	r16, r24
    b37c:	ce 01       	movw	r24, r28
    b37e:	89 5a       	subi	r24, 0xA9	; 169
    b380:	9d 4f       	sbci	r25, 0xFD	; 253
    b382:	fc 01       	movw	r30, r24
    b384:	11 83       	std	Z+1, r17	; 0x01
    b386:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b388:	ce 01       	movw	r24, r28
    b38a:	8b 5a       	subi	r24, 0xAB	; 171
    b38c:	9d 4f       	sbci	r25, 0xFD	; 253
    b38e:	9e 01       	movw	r18, r28
    b390:	2b 5a       	subi	r18, 0xAB	; 171
    b392:	3d 4f       	sbci	r19, 0xFD	; 253
    b394:	f9 01       	movw	r30, r18
    b396:	20 81       	ld	r18, Z
    b398:	31 81       	ldd	r19, Z+1	; 0x01
    b39a:	21 50       	subi	r18, 0x01	; 1
    b39c:	30 40       	sbci	r19, 0x00	; 0
    b39e:	fc 01       	movw	r30, r24
    b3a0:	31 83       	std	Z+1, r19	; 0x01
    b3a2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3a4:	ce 01       	movw	r24, r28
    b3a6:	8b 5a       	subi	r24, 0xAB	; 171
    b3a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b3aa:	fc 01       	movw	r30, r24
    b3ac:	80 81       	ld	r24, Z
    b3ae:	91 81       	ldd	r25, Z+1	; 0x01
    b3b0:	00 97       	sbiw	r24, 0x00	; 0
    b3b2:	89 f6       	brne	.-94     	; 0xb356 <pick_drop+0x46a4>
    b3b4:	2f c0       	rjmp	.+94     	; 0xb414 <pick_drop+0x4762>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b3b6:	8e 01       	movw	r16, r28
    b3b8:	0b 5a       	subi	r16, 0xAB	; 171
    b3ba:	1d 4f       	sbci	r17, 0xFD	; 253
    b3bc:	ce 01       	movw	r24, r28
    b3be:	8f 5a       	subi	r24, 0xAF	; 175
    b3c0:	9d 4f       	sbci	r25, 0xFD	; 253
    b3c2:	fc 01       	movw	r30, r24
    b3c4:	60 81       	ld	r22, Z
    b3c6:	71 81       	ldd	r23, Z+1	; 0x01
    b3c8:	82 81       	ldd	r24, Z+2	; 0x02
    b3ca:	93 81       	ldd	r25, Z+3	; 0x03
    b3cc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b3d0:	dc 01       	movw	r26, r24
    b3d2:	cb 01       	movw	r24, r22
    b3d4:	f8 01       	movw	r30, r16
    b3d6:	91 83       	std	Z+1, r25	; 0x01
    b3d8:	80 83       	st	Z, r24
    b3da:	ce 01       	movw	r24, r28
    b3dc:	87 5a       	subi	r24, 0xA7	; 167
    b3de:	9d 4f       	sbci	r25, 0xFD	; 253
    b3e0:	9e 01       	movw	r18, r28
    b3e2:	2b 5a       	subi	r18, 0xAB	; 171
    b3e4:	3d 4f       	sbci	r19, 0xFD	; 253
    b3e6:	f9 01       	movw	r30, r18
    b3e8:	20 81       	ld	r18, Z
    b3ea:	31 81       	ldd	r19, Z+1	; 0x01
    b3ec:	fc 01       	movw	r30, r24
    b3ee:	31 83       	std	Z+1, r19	; 0x01
    b3f0:	20 83       	st	Z, r18
    b3f2:	ce 01       	movw	r24, r28
    b3f4:	87 5a       	subi	r24, 0xA7	; 167
    b3f6:	9d 4f       	sbci	r25, 0xFD	; 253
    b3f8:	fc 01       	movw	r30, r24
    b3fa:	80 81       	ld	r24, Z
    b3fc:	91 81       	ldd	r25, Z+1	; 0x01
    b3fe:	8c 01       	movw	r16, r24
    b400:	c8 01       	movw	r24, r16
    b402:	01 97       	sbiw	r24, 0x01	; 1
    b404:	f1 f7       	brne	.-4      	; 0xb402 <pick_drop+0x4750>
    b406:	8c 01       	movw	r16, r24
    b408:	ce 01       	movw	r24, r28
    b40a:	87 5a       	subi	r24, 0xA7	; 167
    b40c:	9d 4f       	sbci	r25, 0xFD	; 253
    b40e:	fc 01       	movw	r30, r24
    b410:	11 83       	std	Z+1, r17	; 0x01
    b412:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(55);
    b414:	87 e3       	ldi	r24, 0x37	; 55
    b416:	90 e0       	ldi	r25, 0x00	; 0
    b418:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    b41c:	9e 01       	movw	r18, r28
    b41e:	25 5a       	subi	r18, 0xA5	; 165
    b420:	3d 4f       	sbci	r19, 0xFD	; 253
    b422:	80 e0       	ldi	r24, 0x00	; 0
    b424:	90 e0       	ldi	r25, 0x00	; 0
    b426:	a0 ea       	ldi	r26, 0xA0	; 160
    b428:	b1 e4       	ldi	r27, 0x41	; 65
    b42a:	f9 01       	movw	r30, r18
    b42c:	80 83       	st	Z, r24
    b42e:	91 83       	std	Z+1, r25	; 0x01
    b430:	a2 83       	std	Z+2, r26	; 0x02
    b432:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b434:	8e 01       	movw	r16, r28
    b436:	01 5a       	subi	r16, 0xA1	; 161
    b438:	1d 4f       	sbci	r17, 0xFD	; 253
    b43a:	ce 01       	movw	r24, r28
    b43c:	85 5a       	subi	r24, 0xA5	; 165
    b43e:	9d 4f       	sbci	r25, 0xFD	; 253
    b440:	fc 01       	movw	r30, r24
    b442:	60 81       	ld	r22, Z
    b444:	71 81       	ldd	r23, Z+1	; 0x01
    b446:	82 81       	ldd	r24, Z+2	; 0x02
    b448:	93 81       	ldd	r25, Z+3	; 0x03
    b44a:	26 e6       	ldi	r18, 0x66	; 102
    b44c:	36 e6       	ldi	r19, 0x66	; 102
    b44e:	46 e6       	ldi	r20, 0x66	; 102
    b450:	55 e4       	ldi	r21, 0x45	; 69
    b452:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b456:	dc 01       	movw	r26, r24
    b458:	cb 01       	movw	r24, r22
    b45a:	f8 01       	movw	r30, r16
    b45c:	80 83       	st	Z, r24
    b45e:	91 83       	std	Z+1, r25	; 0x01
    b460:	a2 83       	std	Z+2, r26	; 0x02
    b462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b464:	ce 01       	movw	r24, r28
    b466:	81 5a       	subi	r24, 0xA1	; 161
    b468:	9d 4f       	sbci	r25, 0xFD	; 253
    b46a:	11 e0       	ldi	r17, 0x01	; 1
    b46c:	fc 01       	movw	r30, r24
    b46e:	60 81       	ld	r22, Z
    b470:	71 81       	ldd	r23, Z+1	; 0x01
    b472:	82 81       	ldd	r24, Z+2	; 0x02
    b474:	93 81       	ldd	r25, Z+3	; 0x03
    b476:	20 e0       	ldi	r18, 0x00	; 0
    b478:	30 e0       	ldi	r19, 0x00	; 0
    b47a:	40 e8       	ldi	r20, 0x80	; 128
    b47c:	5f e3       	ldi	r21, 0x3F	; 63
    b47e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    b482:	88 23       	and	r24, r24
    b484:	0c f0       	brlt	.+2      	; 0xb488 <pick_drop+0x47d6>
    b486:	10 e0       	ldi	r17, 0x00	; 0
    b488:	11 23       	and	r17, r17
    b48a:	49 f0       	breq	.+18     	; 0xb49e <pick_drop+0x47ec>
		__ticks = 1;
    b48c:	ce 01       	movw	r24, r28
    b48e:	8d 59       	subi	r24, 0x9D	; 157
    b490:	9d 4f       	sbci	r25, 0xFD	; 253
    b492:	21 e0       	ldi	r18, 0x01	; 1
    b494:	30 e0       	ldi	r19, 0x00	; 0
    b496:	fc 01       	movw	r30, r24
    b498:	31 83       	std	Z+1, r19	; 0x01
    b49a:	20 83       	st	Z, r18
    b49c:	75 c0       	rjmp	.+234    	; 0xb588 <pick_drop+0x48d6>
	else if (__tmp > 65535)
    b49e:	ce 01       	movw	r24, r28
    b4a0:	81 5a       	subi	r24, 0xA1	; 161
    b4a2:	9d 4f       	sbci	r25, 0xFD	; 253
    b4a4:	11 e0       	ldi	r17, 0x01	; 1
    b4a6:	fc 01       	movw	r30, r24
    b4a8:	60 81       	ld	r22, Z
    b4aa:	71 81       	ldd	r23, Z+1	; 0x01
    b4ac:	82 81       	ldd	r24, Z+2	; 0x02
    b4ae:	93 81       	ldd	r25, Z+3	; 0x03
    b4b0:	20 e0       	ldi	r18, 0x00	; 0
    b4b2:	3f ef       	ldi	r19, 0xFF	; 255
    b4b4:	4f e7       	ldi	r20, 0x7F	; 127
    b4b6:	57 e4       	ldi	r21, 0x47	; 71
    b4b8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    b4bc:	18 16       	cp	r1, r24
    b4be:	0c f0       	brlt	.+2      	; 0xb4c2 <pick_drop+0x4810>
    b4c0:	10 e0       	ldi	r17, 0x00	; 0
    b4c2:	11 23       	and	r17, r17
    b4c4:	09 f4       	brne	.+2      	; 0xb4c8 <pick_drop+0x4816>
    b4c6:	4e c0       	rjmp	.+156    	; 0xb564 <pick_drop+0x48b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b4c8:	ce 01       	movw	r24, r28
    b4ca:	85 5a       	subi	r24, 0xA5	; 165
    b4cc:	9d 4f       	sbci	r25, 0xFD	; 253
    b4ce:	fc 01       	movw	r30, r24
    b4d0:	60 81       	ld	r22, Z
    b4d2:	71 81       	ldd	r23, Z+1	; 0x01
    b4d4:	82 81       	ldd	r24, Z+2	; 0x02
    b4d6:	93 81       	ldd	r25, Z+3	; 0x03
    b4d8:	20 e0       	ldi	r18, 0x00	; 0
    b4da:	30 e0       	ldi	r19, 0x00	; 0
    b4dc:	40 e2       	ldi	r20, 0x20	; 32
    b4de:	51 e4       	ldi	r21, 0x41	; 65
    b4e0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b4e4:	dc 01       	movw	r26, r24
    b4e6:	cb 01       	movw	r24, r22
    b4e8:	8e 01       	movw	r16, r28
    b4ea:	0d 59       	subi	r16, 0x9D	; 157
    b4ec:	1d 4f       	sbci	r17, 0xFD	; 253
    b4ee:	bc 01       	movw	r22, r24
    b4f0:	cd 01       	movw	r24, r26
    b4f2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b4f6:	dc 01       	movw	r26, r24
    b4f8:	cb 01       	movw	r24, r22
    b4fa:	f8 01       	movw	r30, r16
    b4fc:	91 83       	std	Z+1, r25	; 0x01
    b4fe:	80 83       	st	Z, r24
    b500:	27 c0       	rjmp	.+78     	; 0xb550 <pick_drop+0x489e>
    b502:	ce 01       	movw	r24, r28
    b504:	8b 59       	subi	r24, 0x9B	; 155
    b506:	9d 4f       	sbci	r25, 0xFD	; 253
    b508:	20 e7       	ldi	r18, 0x70	; 112
    b50a:	31 e0       	ldi	r19, 0x01	; 1
    b50c:	fc 01       	movw	r30, r24
    b50e:	31 83       	std	Z+1, r19	; 0x01
    b510:	20 83       	st	Z, r18
    b512:	ce 01       	movw	r24, r28
    b514:	8b 59       	subi	r24, 0x9B	; 155
    b516:	9d 4f       	sbci	r25, 0xFD	; 253
    b518:	fc 01       	movw	r30, r24
    b51a:	80 81       	ld	r24, Z
    b51c:	91 81       	ldd	r25, Z+1	; 0x01
    b51e:	8c 01       	movw	r16, r24
    b520:	c8 01       	movw	r24, r16
    b522:	01 97       	sbiw	r24, 0x01	; 1
    b524:	f1 f7       	brne	.-4      	; 0xb522 <pick_drop+0x4870>
    b526:	8c 01       	movw	r16, r24
    b528:	ce 01       	movw	r24, r28
    b52a:	8b 59       	subi	r24, 0x9B	; 155
    b52c:	9d 4f       	sbci	r25, 0xFD	; 253
    b52e:	fc 01       	movw	r30, r24
    b530:	11 83       	std	Z+1, r17	; 0x01
    b532:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b534:	ce 01       	movw	r24, r28
    b536:	8d 59       	subi	r24, 0x9D	; 157
    b538:	9d 4f       	sbci	r25, 0xFD	; 253
    b53a:	9e 01       	movw	r18, r28
    b53c:	2d 59       	subi	r18, 0x9D	; 157
    b53e:	3d 4f       	sbci	r19, 0xFD	; 253
    b540:	f9 01       	movw	r30, r18
    b542:	20 81       	ld	r18, Z
    b544:	31 81       	ldd	r19, Z+1	; 0x01
    b546:	21 50       	subi	r18, 0x01	; 1
    b548:	30 40       	sbci	r19, 0x00	; 0
    b54a:	fc 01       	movw	r30, r24
    b54c:	31 83       	std	Z+1, r19	; 0x01
    b54e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b550:	ce 01       	movw	r24, r28
    b552:	8d 59       	subi	r24, 0x9D	; 157
    b554:	9d 4f       	sbci	r25, 0xFD	; 253
    b556:	fc 01       	movw	r30, r24
    b558:	80 81       	ld	r24, Z
    b55a:	91 81       	ldd	r25, Z+1	; 0x01
    b55c:	00 97       	sbiw	r24, 0x00	; 0
    b55e:	89 f6       	brne	.-94     	; 0xb502 <pick_drop+0x4850>
    b560:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b564:	8e 01       	movw	r16, r28
    b566:	0d 59       	subi	r16, 0x9D	; 157
    b568:	1d 4f       	sbci	r17, 0xFD	; 253
    b56a:	ce 01       	movw	r24, r28
    b56c:	81 5a       	subi	r24, 0xA1	; 161
    b56e:	9d 4f       	sbci	r25, 0xFD	; 253
    b570:	fc 01       	movw	r30, r24
    b572:	60 81       	ld	r22, Z
    b574:	71 81       	ldd	r23, Z+1	; 0x01
    b576:	82 81       	ldd	r24, Z+2	; 0x02
    b578:	93 81       	ldd	r25, Z+3	; 0x03
    b57a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b57e:	dc 01       	movw	r26, r24
    b580:	cb 01       	movw	r24, r22
    b582:	f8 01       	movw	r30, r16
    b584:	91 83       	std	Z+1, r25	; 0x01
    b586:	80 83       	st	Z, r24
    b588:	ce 01       	movw	r24, r28
    b58a:	89 59       	subi	r24, 0x99	; 153
    b58c:	9d 4f       	sbci	r25, 0xFD	; 253
    b58e:	9e 01       	movw	r18, r28
    b590:	2d 59       	subi	r18, 0x9D	; 157
    b592:	3d 4f       	sbci	r19, 0xFD	; 253
    b594:	f9 01       	movw	r30, r18
    b596:	20 81       	ld	r18, Z
    b598:	31 81       	ldd	r19, Z+1	; 0x01
    b59a:	fc 01       	movw	r30, r24
    b59c:	31 83       	std	Z+1, r19	; 0x01
    b59e:	20 83       	st	Z, r18
    b5a0:	ce 01       	movw	r24, r28
    b5a2:	89 59       	subi	r24, 0x99	; 153
    b5a4:	9d 4f       	sbci	r25, 0xFD	; 253
    b5a6:	fc 01       	movw	r30, r24
    b5a8:	80 81       	ld	r24, Z
    b5aa:	91 81       	ldd	r25, Z+1	; 0x01
    b5ac:	8c 01       	movw	r16, r24
    b5ae:	c8 01       	movw	r24, r16
    b5b0:	01 97       	sbiw	r24, 0x01	; 1
    b5b2:	f1 f7       	brne	.-4      	; 0xb5b0 <pick_drop+0x48fe>
    b5b4:	8c 01       	movw	r16, r24
    b5b6:	ce 01       	movw	r24, r28
    b5b8:	89 59       	subi	r24, 0x99	; 153
    b5ba:	9d 4f       	sbci	r25, 0xFD	; 253
    b5bc:	fc 01       	movw	r30, r24
    b5be:	11 83       	std	Z+1, r17	; 0x01
    b5c0:	00 83       	st	Z, r16
    b5c2:	0c 94 8d 62 	jmp	0xc51a	; 0xc51a <pick_drop+0x5868>
			_delay_ms(20);
		}       
	}
		else if(pd=='7'){//6X6
    b5c6:	ce 01       	movw	r24, r28
    b5c8:	89 51       	subi	r24, 0x19	; 25
    b5ca:	9d 4f       	sbci	r25, 0xFD	; 253
    b5cc:	fc 01       	movw	r30, r24
    b5ce:	80 81       	ld	r24, Z
    b5d0:	87 33       	cpi	r24, 0x37	; 55
    b5d2:	09 f0       	breq	.+2      	; 0xb5d6 <pick_drop+0x4924>
    b5d4:	f0 c5       	rjmp	.+3040   	; 0xc1b6 <pick_drop+0x5504>
				if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    b5d6:	80 91 6d 03 	lds	r24, 0x036D
    b5da:	90 91 6e 03 	lds	r25, 0x036E
    b5de:	01 97       	sbiw	r24, 0x01	; 1
    b5e0:	8f 58       	subi	r24, 0x8F	; 143
    b5e2:	9c 4f       	sbci	r25, 0xFC	; 252
    b5e4:	fc 01       	movw	r30, r24
    b5e6:	80 81       	ld	r24, Z
    b5e8:	8c 34       	cpi	r24, 0x4C	; 76
    b5ea:	61 f0       	breq	.+24     	; 0xb604 <pick_drop+0x4952>
    b5ec:	80 91 6d 03 	lds	r24, 0x036D
    b5f0:	90 91 6e 03 	lds	r25, 0x036E
    b5f4:	01 97       	sbiw	r24, 0x01	; 1
    b5f6:	8f 58       	subi	r24, 0x8F	; 143
    b5f8:	9c 4f       	sbci	r25, 0xFC	; 252
    b5fa:	fc 01       	movw	r30, r24
    b5fc:	80 81       	ld	r24, Z
    b5fe:	82 35       	cpi	r24, 0x52	; 82
    b600:	09 f0       	breq	.+2      	; 0xb604 <pick_drop+0x4952>
    b602:	80 c2       	rjmp	.+1280   	; 0xbb04 <pick_drop+0x4e52>
					stop();
    b604:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    b608:	9e 01       	movw	r18, r28
    b60a:	27 59       	subi	r18, 0x97	; 151
    b60c:	3d 4f       	sbci	r19, 0xFD	; 253
    b60e:	80 e0       	ldi	r24, 0x00	; 0
    b610:	90 e0       	ldi	r25, 0x00	; 0
    b612:	a0 ea       	ldi	r26, 0xA0	; 160
    b614:	b1 e4       	ldi	r27, 0x41	; 65
    b616:	f9 01       	movw	r30, r18
    b618:	80 83       	st	Z, r24
    b61a:	91 83       	std	Z+1, r25	; 0x01
    b61c:	a2 83       	std	Z+2, r26	; 0x02
    b61e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b620:	8e 01       	movw	r16, r28
    b622:	03 59       	subi	r16, 0x93	; 147
    b624:	1d 4f       	sbci	r17, 0xFD	; 253
    b626:	ce 01       	movw	r24, r28
    b628:	87 59       	subi	r24, 0x97	; 151
    b62a:	9d 4f       	sbci	r25, 0xFD	; 253
    b62c:	fc 01       	movw	r30, r24
    b62e:	60 81       	ld	r22, Z
    b630:	71 81       	ldd	r23, Z+1	; 0x01
    b632:	82 81       	ldd	r24, Z+2	; 0x02
    b634:	93 81       	ldd	r25, Z+3	; 0x03
    b636:	26 e6       	ldi	r18, 0x66	; 102
    b638:	36 e6       	ldi	r19, 0x66	; 102
    b63a:	46 e6       	ldi	r20, 0x66	; 102
    b63c:	55 e4       	ldi	r21, 0x45	; 69
    b63e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b642:	dc 01       	movw	r26, r24
    b644:	cb 01       	movw	r24, r22
    b646:	f8 01       	movw	r30, r16
    b648:	80 83       	st	Z, r24
    b64a:	91 83       	std	Z+1, r25	; 0x01
    b64c:	a2 83       	std	Z+2, r26	; 0x02
    b64e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b650:	ce 01       	movw	r24, r28
    b652:	83 59       	subi	r24, 0x93	; 147
    b654:	9d 4f       	sbci	r25, 0xFD	; 253
    b656:	11 e0       	ldi	r17, 0x01	; 1
    b658:	fc 01       	movw	r30, r24
    b65a:	60 81       	ld	r22, Z
    b65c:	71 81       	ldd	r23, Z+1	; 0x01
    b65e:	82 81       	ldd	r24, Z+2	; 0x02
    b660:	93 81       	ldd	r25, Z+3	; 0x03
    b662:	20 e0       	ldi	r18, 0x00	; 0
    b664:	30 e0       	ldi	r19, 0x00	; 0
    b666:	40 e8       	ldi	r20, 0x80	; 128
    b668:	5f e3       	ldi	r21, 0x3F	; 63
    b66a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    b66e:	88 23       	and	r24, r24
    b670:	0c f0       	brlt	.+2      	; 0xb674 <pick_drop+0x49c2>
    b672:	10 e0       	ldi	r17, 0x00	; 0
    b674:	11 23       	and	r17, r17
    b676:	49 f0       	breq	.+18     	; 0xb68a <pick_drop+0x49d8>
		__ticks = 1;
    b678:	ce 01       	movw	r24, r28
    b67a:	8f 58       	subi	r24, 0x8F	; 143
    b67c:	9d 4f       	sbci	r25, 0xFD	; 253
    b67e:	21 e0       	ldi	r18, 0x01	; 1
    b680:	30 e0       	ldi	r19, 0x00	; 0
    b682:	fc 01       	movw	r30, r24
    b684:	31 83       	std	Z+1, r19	; 0x01
    b686:	20 83       	st	Z, r18
    b688:	74 c0       	rjmp	.+232    	; 0xb772 <pick_drop+0x4ac0>
	else if (__tmp > 65535)
    b68a:	ce 01       	movw	r24, r28
    b68c:	83 59       	subi	r24, 0x93	; 147
    b68e:	9d 4f       	sbci	r25, 0xFD	; 253
    b690:	11 e0       	ldi	r17, 0x01	; 1
    b692:	fc 01       	movw	r30, r24
    b694:	60 81       	ld	r22, Z
    b696:	71 81       	ldd	r23, Z+1	; 0x01
    b698:	82 81       	ldd	r24, Z+2	; 0x02
    b69a:	93 81       	ldd	r25, Z+3	; 0x03
    b69c:	20 e0       	ldi	r18, 0x00	; 0
    b69e:	3f ef       	ldi	r19, 0xFF	; 255
    b6a0:	4f e7       	ldi	r20, 0x7F	; 127
    b6a2:	57 e4       	ldi	r21, 0x47	; 71
    b6a4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    b6a8:	18 16       	cp	r1, r24
    b6aa:	0c f0       	brlt	.+2      	; 0xb6ae <pick_drop+0x49fc>
    b6ac:	10 e0       	ldi	r17, 0x00	; 0
    b6ae:	11 23       	and	r17, r17
    b6b0:	09 f4       	brne	.+2      	; 0xb6b4 <pick_drop+0x4a02>
    b6b2:	4d c0       	rjmp	.+154    	; 0xb74e <pick_drop+0x4a9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b6b4:	ce 01       	movw	r24, r28
    b6b6:	87 59       	subi	r24, 0x97	; 151
    b6b8:	9d 4f       	sbci	r25, 0xFD	; 253
    b6ba:	fc 01       	movw	r30, r24
    b6bc:	60 81       	ld	r22, Z
    b6be:	71 81       	ldd	r23, Z+1	; 0x01
    b6c0:	82 81       	ldd	r24, Z+2	; 0x02
    b6c2:	93 81       	ldd	r25, Z+3	; 0x03
    b6c4:	20 e0       	ldi	r18, 0x00	; 0
    b6c6:	30 e0       	ldi	r19, 0x00	; 0
    b6c8:	40 e2       	ldi	r20, 0x20	; 32
    b6ca:	51 e4       	ldi	r21, 0x41	; 65
    b6cc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b6d0:	dc 01       	movw	r26, r24
    b6d2:	cb 01       	movw	r24, r22
    b6d4:	8e 01       	movw	r16, r28
    b6d6:	0f 58       	subi	r16, 0x8F	; 143
    b6d8:	1d 4f       	sbci	r17, 0xFD	; 253
    b6da:	bc 01       	movw	r22, r24
    b6dc:	cd 01       	movw	r24, r26
    b6de:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b6e2:	dc 01       	movw	r26, r24
    b6e4:	cb 01       	movw	r24, r22
    b6e6:	f8 01       	movw	r30, r16
    b6e8:	91 83       	std	Z+1, r25	; 0x01
    b6ea:	80 83       	st	Z, r24
    b6ec:	27 c0       	rjmp	.+78     	; 0xb73c <pick_drop+0x4a8a>
    b6ee:	ce 01       	movw	r24, r28
    b6f0:	8d 58       	subi	r24, 0x8D	; 141
    b6f2:	9d 4f       	sbci	r25, 0xFD	; 253
    b6f4:	20 e7       	ldi	r18, 0x70	; 112
    b6f6:	31 e0       	ldi	r19, 0x01	; 1
    b6f8:	fc 01       	movw	r30, r24
    b6fa:	31 83       	std	Z+1, r19	; 0x01
    b6fc:	20 83       	st	Z, r18
    b6fe:	ce 01       	movw	r24, r28
    b700:	8d 58       	subi	r24, 0x8D	; 141
    b702:	9d 4f       	sbci	r25, 0xFD	; 253
    b704:	fc 01       	movw	r30, r24
    b706:	80 81       	ld	r24, Z
    b708:	91 81       	ldd	r25, Z+1	; 0x01
    b70a:	8c 01       	movw	r16, r24
    b70c:	c8 01       	movw	r24, r16
    b70e:	01 97       	sbiw	r24, 0x01	; 1
    b710:	f1 f7       	brne	.-4      	; 0xb70e <pick_drop+0x4a5c>
    b712:	8c 01       	movw	r16, r24
    b714:	ce 01       	movw	r24, r28
    b716:	8d 58       	subi	r24, 0x8D	; 141
    b718:	9d 4f       	sbci	r25, 0xFD	; 253
    b71a:	fc 01       	movw	r30, r24
    b71c:	11 83       	std	Z+1, r17	; 0x01
    b71e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b720:	ce 01       	movw	r24, r28
    b722:	8f 58       	subi	r24, 0x8F	; 143
    b724:	9d 4f       	sbci	r25, 0xFD	; 253
    b726:	9e 01       	movw	r18, r28
    b728:	2f 58       	subi	r18, 0x8F	; 143
    b72a:	3d 4f       	sbci	r19, 0xFD	; 253
    b72c:	f9 01       	movw	r30, r18
    b72e:	20 81       	ld	r18, Z
    b730:	31 81       	ldd	r19, Z+1	; 0x01
    b732:	21 50       	subi	r18, 0x01	; 1
    b734:	30 40       	sbci	r19, 0x00	; 0
    b736:	fc 01       	movw	r30, r24
    b738:	31 83       	std	Z+1, r19	; 0x01
    b73a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b73c:	ce 01       	movw	r24, r28
    b73e:	8f 58       	subi	r24, 0x8F	; 143
    b740:	9d 4f       	sbci	r25, 0xFD	; 253
    b742:	fc 01       	movw	r30, r24
    b744:	80 81       	ld	r24, Z
    b746:	91 81       	ldd	r25, Z+1	; 0x01
    b748:	00 97       	sbiw	r24, 0x00	; 0
    b74a:	89 f6       	brne	.-94     	; 0xb6ee <pick_drop+0x4a3c>
    b74c:	2f c0       	rjmp	.+94     	; 0xb7ac <pick_drop+0x4afa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b74e:	8e 01       	movw	r16, r28
    b750:	0f 58       	subi	r16, 0x8F	; 143
    b752:	1d 4f       	sbci	r17, 0xFD	; 253
    b754:	ce 01       	movw	r24, r28
    b756:	83 59       	subi	r24, 0x93	; 147
    b758:	9d 4f       	sbci	r25, 0xFD	; 253
    b75a:	fc 01       	movw	r30, r24
    b75c:	60 81       	ld	r22, Z
    b75e:	71 81       	ldd	r23, Z+1	; 0x01
    b760:	82 81       	ldd	r24, Z+2	; 0x02
    b762:	93 81       	ldd	r25, Z+3	; 0x03
    b764:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b768:	dc 01       	movw	r26, r24
    b76a:	cb 01       	movw	r24, r22
    b76c:	f8 01       	movw	r30, r16
    b76e:	91 83       	std	Z+1, r25	; 0x01
    b770:	80 83       	st	Z, r24
    b772:	ce 01       	movw	r24, r28
    b774:	8b 58       	subi	r24, 0x8B	; 139
    b776:	9d 4f       	sbci	r25, 0xFD	; 253
    b778:	9e 01       	movw	r18, r28
    b77a:	2f 58       	subi	r18, 0x8F	; 143
    b77c:	3d 4f       	sbci	r19, 0xFD	; 253
    b77e:	f9 01       	movw	r30, r18
    b780:	20 81       	ld	r18, Z
    b782:	31 81       	ldd	r19, Z+1	; 0x01
    b784:	fc 01       	movw	r30, r24
    b786:	31 83       	std	Z+1, r19	; 0x01
    b788:	20 83       	st	Z, r18
    b78a:	ce 01       	movw	r24, r28
    b78c:	8b 58       	subi	r24, 0x8B	; 139
    b78e:	9d 4f       	sbci	r25, 0xFD	; 253
    b790:	fc 01       	movw	r30, r24
    b792:	80 81       	ld	r24, Z
    b794:	91 81       	ldd	r25, Z+1	; 0x01
    b796:	8c 01       	movw	r16, r24
    b798:	c8 01       	movw	r24, r16
    b79a:	01 97       	sbiw	r24, 0x01	; 1
    b79c:	f1 f7       	brne	.-4      	; 0xb79a <pick_drop+0x4ae8>
    b79e:	8c 01       	movw	r16, r24
    b7a0:	ce 01       	movw	r24, r28
    b7a2:	8b 58       	subi	r24, 0x8B	; 139
    b7a4:	9d 4f       	sbci	r25, 0xFD	; 253
    b7a6:	fc 01       	movw	r30, r24
    b7a8:	11 83       	std	Z+1, r17	; 0x01
    b7aa:	00 83       	st	Z, r16
					_delay_ms(20);
					forward_mm(20);
    b7ac:	84 e1       	ldi	r24, 0x14	; 20
    b7ae:	90 e0       	ldi	r25, 0x00	; 0
    b7b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b7b4:	9e 01       	movw	r18, r28
    b7b6:	29 58       	subi	r18, 0x89	; 137
    b7b8:	3d 4f       	sbci	r19, 0xFD	; 253
    b7ba:	80 e0       	ldi	r24, 0x00	; 0
    b7bc:	90 e0       	ldi	r25, 0x00	; 0
    b7be:	a0 ea       	ldi	r26, 0xA0	; 160
    b7c0:	b1 e4       	ldi	r27, 0x41	; 65
    b7c2:	f9 01       	movw	r30, r18
    b7c4:	80 83       	st	Z, r24
    b7c6:	91 83       	std	Z+1, r25	; 0x01
    b7c8:	a2 83       	std	Z+2, r26	; 0x02
    b7ca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b7cc:	8e 01       	movw	r16, r28
    b7ce:	05 58       	subi	r16, 0x85	; 133
    b7d0:	1d 4f       	sbci	r17, 0xFD	; 253
    b7d2:	ce 01       	movw	r24, r28
    b7d4:	89 58       	subi	r24, 0x89	; 137
    b7d6:	9d 4f       	sbci	r25, 0xFD	; 253
    b7d8:	fc 01       	movw	r30, r24
    b7da:	60 81       	ld	r22, Z
    b7dc:	71 81       	ldd	r23, Z+1	; 0x01
    b7de:	82 81       	ldd	r24, Z+2	; 0x02
    b7e0:	93 81       	ldd	r25, Z+3	; 0x03
    b7e2:	26 e6       	ldi	r18, 0x66	; 102
    b7e4:	36 e6       	ldi	r19, 0x66	; 102
    b7e6:	46 e6       	ldi	r20, 0x66	; 102
    b7e8:	55 e4       	ldi	r21, 0x45	; 69
    b7ea:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b7ee:	dc 01       	movw	r26, r24
    b7f0:	cb 01       	movw	r24, r22
    b7f2:	f8 01       	movw	r30, r16
    b7f4:	80 83       	st	Z, r24
    b7f6:	91 83       	std	Z+1, r25	; 0x01
    b7f8:	a2 83       	std	Z+2, r26	; 0x02
    b7fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b7fc:	ce 01       	movw	r24, r28
    b7fe:	85 58       	subi	r24, 0x85	; 133
    b800:	9d 4f       	sbci	r25, 0xFD	; 253
    b802:	11 e0       	ldi	r17, 0x01	; 1
    b804:	fc 01       	movw	r30, r24
    b806:	60 81       	ld	r22, Z
    b808:	71 81       	ldd	r23, Z+1	; 0x01
    b80a:	82 81       	ldd	r24, Z+2	; 0x02
    b80c:	93 81       	ldd	r25, Z+3	; 0x03
    b80e:	20 e0       	ldi	r18, 0x00	; 0
    b810:	30 e0       	ldi	r19, 0x00	; 0
    b812:	40 e8       	ldi	r20, 0x80	; 128
    b814:	5f e3       	ldi	r21, 0x3F	; 63
    b816:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    b81a:	88 23       	and	r24, r24
    b81c:	0c f0       	brlt	.+2      	; 0xb820 <pick_drop+0x4b6e>
    b81e:	10 e0       	ldi	r17, 0x00	; 0
    b820:	11 23       	and	r17, r17
    b822:	49 f0       	breq	.+18     	; 0xb836 <pick_drop+0x4b84>
		__ticks = 1;
    b824:	ce 01       	movw	r24, r28
    b826:	81 58       	subi	r24, 0x81	; 129
    b828:	9d 4f       	sbci	r25, 0xFD	; 253
    b82a:	21 e0       	ldi	r18, 0x01	; 1
    b82c:	30 e0       	ldi	r19, 0x00	; 0
    b82e:	fc 01       	movw	r30, r24
    b830:	31 83       	std	Z+1, r19	; 0x01
    b832:	20 83       	st	Z, r18
    b834:	74 c0       	rjmp	.+232    	; 0xb91e <pick_drop+0x4c6c>
	else if (__tmp > 65535)
    b836:	ce 01       	movw	r24, r28
    b838:	85 58       	subi	r24, 0x85	; 133
    b83a:	9d 4f       	sbci	r25, 0xFD	; 253
    b83c:	11 e0       	ldi	r17, 0x01	; 1
    b83e:	fc 01       	movw	r30, r24
    b840:	60 81       	ld	r22, Z
    b842:	71 81       	ldd	r23, Z+1	; 0x01
    b844:	82 81       	ldd	r24, Z+2	; 0x02
    b846:	93 81       	ldd	r25, Z+3	; 0x03
    b848:	20 e0       	ldi	r18, 0x00	; 0
    b84a:	3f ef       	ldi	r19, 0xFF	; 255
    b84c:	4f e7       	ldi	r20, 0x7F	; 127
    b84e:	57 e4       	ldi	r21, 0x47	; 71
    b850:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    b854:	18 16       	cp	r1, r24
    b856:	0c f0       	brlt	.+2      	; 0xb85a <pick_drop+0x4ba8>
    b858:	10 e0       	ldi	r17, 0x00	; 0
    b85a:	11 23       	and	r17, r17
    b85c:	09 f4       	brne	.+2      	; 0xb860 <pick_drop+0x4bae>
    b85e:	4d c0       	rjmp	.+154    	; 0xb8fa <pick_drop+0x4c48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b860:	ce 01       	movw	r24, r28
    b862:	89 58       	subi	r24, 0x89	; 137
    b864:	9d 4f       	sbci	r25, 0xFD	; 253
    b866:	fc 01       	movw	r30, r24
    b868:	60 81       	ld	r22, Z
    b86a:	71 81       	ldd	r23, Z+1	; 0x01
    b86c:	82 81       	ldd	r24, Z+2	; 0x02
    b86e:	93 81       	ldd	r25, Z+3	; 0x03
    b870:	20 e0       	ldi	r18, 0x00	; 0
    b872:	30 e0       	ldi	r19, 0x00	; 0
    b874:	40 e2       	ldi	r20, 0x20	; 32
    b876:	51 e4       	ldi	r21, 0x41	; 65
    b878:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b87c:	dc 01       	movw	r26, r24
    b87e:	cb 01       	movw	r24, r22
    b880:	8e 01       	movw	r16, r28
    b882:	01 58       	subi	r16, 0x81	; 129
    b884:	1d 4f       	sbci	r17, 0xFD	; 253
    b886:	bc 01       	movw	r22, r24
    b888:	cd 01       	movw	r24, r26
    b88a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b88e:	dc 01       	movw	r26, r24
    b890:	cb 01       	movw	r24, r22
    b892:	f8 01       	movw	r30, r16
    b894:	91 83       	std	Z+1, r25	; 0x01
    b896:	80 83       	st	Z, r24
    b898:	27 c0       	rjmp	.+78     	; 0xb8e8 <pick_drop+0x4c36>
    b89a:	ce 01       	movw	r24, r28
    b89c:	8f 57       	subi	r24, 0x7F	; 127
    b89e:	9d 4f       	sbci	r25, 0xFD	; 253
    b8a0:	20 e7       	ldi	r18, 0x70	; 112
    b8a2:	31 e0       	ldi	r19, 0x01	; 1
    b8a4:	fc 01       	movw	r30, r24
    b8a6:	31 83       	std	Z+1, r19	; 0x01
    b8a8:	20 83       	st	Z, r18
    b8aa:	ce 01       	movw	r24, r28
    b8ac:	8f 57       	subi	r24, 0x7F	; 127
    b8ae:	9d 4f       	sbci	r25, 0xFD	; 253
    b8b0:	fc 01       	movw	r30, r24
    b8b2:	80 81       	ld	r24, Z
    b8b4:	91 81       	ldd	r25, Z+1	; 0x01
    b8b6:	8c 01       	movw	r16, r24
    b8b8:	c8 01       	movw	r24, r16
    b8ba:	01 97       	sbiw	r24, 0x01	; 1
    b8bc:	f1 f7       	brne	.-4      	; 0xb8ba <pick_drop+0x4c08>
    b8be:	8c 01       	movw	r16, r24
    b8c0:	ce 01       	movw	r24, r28
    b8c2:	8f 57       	subi	r24, 0x7F	; 127
    b8c4:	9d 4f       	sbci	r25, 0xFD	; 253
    b8c6:	fc 01       	movw	r30, r24
    b8c8:	11 83       	std	Z+1, r17	; 0x01
    b8ca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b8cc:	ce 01       	movw	r24, r28
    b8ce:	81 58       	subi	r24, 0x81	; 129
    b8d0:	9d 4f       	sbci	r25, 0xFD	; 253
    b8d2:	9e 01       	movw	r18, r28
    b8d4:	21 58       	subi	r18, 0x81	; 129
    b8d6:	3d 4f       	sbci	r19, 0xFD	; 253
    b8d8:	f9 01       	movw	r30, r18
    b8da:	20 81       	ld	r18, Z
    b8dc:	31 81       	ldd	r19, Z+1	; 0x01
    b8de:	21 50       	subi	r18, 0x01	; 1
    b8e0:	30 40       	sbci	r19, 0x00	; 0
    b8e2:	fc 01       	movw	r30, r24
    b8e4:	31 83       	std	Z+1, r19	; 0x01
    b8e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b8e8:	ce 01       	movw	r24, r28
    b8ea:	81 58       	subi	r24, 0x81	; 129
    b8ec:	9d 4f       	sbci	r25, 0xFD	; 253
    b8ee:	fc 01       	movw	r30, r24
    b8f0:	80 81       	ld	r24, Z
    b8f2:	91 81       	ldd	r25, Z+1	; 0x01
    b8f4:	00 97       	sbiw	r24, 0x00	; 0
    b8f6:	89 f6       	brne	.-94     	; 0xb89a <pick_drop+0x4be8>
    b8f8:	2f c0       	rjmp	.+94     	; 0xb958 <pick_drop+0x4ca6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b8fa:	8e 01       	movw	r16, r28
    b8fc:	01 58       	subi	r16, 0x81	; 129
    b8fe:	1d 4f       	sbci	r17, 0xFD	; 253
    b900:	ce 01       	movw	r24, r28
    b902:	85 58       	subi	r24, 0x85	; 133
    b904:	9d 4f       	sbci	r25, 0xFD	; 253
    b906:	fc 01       	movw	r30, r24
    b908:	60 81       	ld	r22, Z
    b90a:	71 81       	ldd	r23, Z+1	; 0x01
    b90c:	82 81       	ldd	r24, Z+2	; 0x02
    b90e:	93 81       	ldd	r25, Z+3	; 0x03
    b910:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    b914:	dc 01       	movw	r26, r24
    b916:	cb 01       	movw	r24, r22
    b918:	f8 01       	movw	r30, r16
    b91a:	91 83       	std	Z+1, r25	; 0x01
    b91c:	80 83       	st	Z, r24
    b91e:	ce 01       	movw	r24, r28
    b920:	8d 57       	subi	r24, 0x7D	; 125
    b922:	9d 4f       	sbci	r25, 0xFD	; 253
    b924:	9e 01       	movw	r18, r28
    b926:	21 58       	subi	r18, 0x81	; 129
    b928:	3d 4f       	sbci	r19, 0xFD	; 253
    b92a:	f9 01       	movw	r30, r18
    b92c:	20 81       	ld	r18, Z
    b92e:	31 81       	ldd	r19, Z+1	; 0x01
    b930:	fc 01       	movw	r30, r24
    b932:	31 83       	std	Z+1, r19	; 0x01
    b934:	20 83       	st	Z, r18
    b936:	ce 01       	movw	r24, r28
    b938:	8d 57       	subi	r24, 0x7D	; 125
    b93a:	9d 4f       	sbci	r25, 0xFD	; 253
    b93c:	fc 01       	movw	r30, r24
    b93e:	80 81       	ld	r24, Z
    b940:	91 81       	ldd	r25, Z+1	; 0x01
    b942:	8c 01       	movw	r16, r24
    b944:	c8 01       	movw	r24, r16
    b946:	01 97       	sbiw	r24, 0x01	; 1
    b948:	f1 f7       	brne	.-4      	; 0xb946 <pick_drop+0x4c94>
    b94a:	8c 01       	movw	r16, r24
    b94c:	ce 01       	movw	r24, r28
    b94e:	8d 57       	subi	r24, 0x7D	; 125
    b950:	9d 4f       	sbci	r25, 0xFD	; 253
    b952:	fc 01       	movw	r30, r24
    b954:	11 83       	std	Z+1, r17	; 0x01
    b956:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    b958:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    b95c:	9e 01       	movw	r18, r28
    b95e:	2b 57       	subi	r18, 0x7B	; 123
    b960:	3d 4f       	sbci	r19, 0xFD	; 253
    b962:	80 e0       	ldi	r24, 0x00	; 0
    b964:	90 e0       	ldi	r25, 0x00	; 0
    b966:	a8 ec       	ldi	r26, 0xC8	; 200
    b968:	b2 e4       	ldi	r27, 0x42	; 66
    b96a:	f9 01       	movw	r30, r18
    b96c:	80 83       	st	Z, r24
    b96e:	91 83       	std	Z+1, r25	; 0x01
    b970:	a2 83       	std	Z+2, r26	; 0x02
    b972:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b974:	8e 01       	movw	r16, r28
    b976:	07 57       	subi	r16, 0x77	; 119
    b978:	1d 4f       	sbci	r17, 0xFD	; 253
    b97a:	ce 01       	movw	r24, r28
    b97c:	8b 57       	subi	r24, 0x7B	; 123
    b97e:	9d 4f       	sbci	r25, 0xFD	; 253
    b980:	fc 01       	movw	r30, r24
    b982:	60 81       	ld	r22, Z
    b984:	71 81       	ldd	r23, Z+1	; 0x01
    b986:	82 81       	ldd	r24, Z+2	; 0x02
    b988:	93 81       	ldd	r25, Z+3	; 0x03
    b98a:	26 e6       	ldi	r18, 0x66	; 102
    b98c:	36 e6       	ldi	r19, 0x66	; 102
    b98e:	46 e6       	ldi	r20, 0x66	; 102
    b990:	55 e4       	ldi	r21, 0x45	; 69
    b992:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    b996:	dc 01       	movw	r26, r24
    b998:	cb 01       	movw	r24, r22
    b99a:	f8 01       	movw	r30, r16
    b99c:	80 83       	st	Z, r24
    b99e:	91 83       	std	Z+1, r25	; 0x01
    b9a0:	a2 83       	std	Z+2, r26	; 0x02
    b9a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b9a4:	ce 01       	movw	r24, r28
    b9a6:	87 57       	subi	r24, 0x77	; 119
    b9a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b9aa:	11 e0       	ldi	r17, 0x01	; 1
    b9ac:	fc 01       	movw	r30, r24
    b9ae:	60 81       	ld	r22, Z
    b9b0:	71 81       	ldd	r23, Z+1	; 0x01
    b9b2:	82 81       	ldd	r24, Z+2	; 0x02
    b9b4:	93 81       	ldd	r25, Z+3	; 0x03
    b9b6:	20 e0       	ldi	r18, 0x00	; 0
    b9b8:	30 e0       	ldi	r19, 0x00	; 0
    b9ba:	40 e8       	ldi	r20, 0x80	; 128
    b9bc:	5f e3       	ldi	r21, 0x3F	; 63
    b9be:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    b9c2:	88 23       	and	r24, r24
    b9c4:	0c f0       	brlt	.+2      	; 0xb9c8 <pick_drop+0x4d16>
    b9c6:	10 e0       	ldi	r17, 0x00	; 0
    b9c8:	11 23       	and	r17, r17
    b9ca:	49 f0       	breq	.+18     	; 0xb9de <pick_drop+0x4d2c>
		__ticks = 1;
    b9cc:	ce 01       	movw	r24, r28
    b9ce:	83 57       	subi	r24, 0x73	; 115
    b9d0:	9d 4f       	sbci	r25, 0xFD	; 253
    b9d2:	21 e0       	ldi	r18, 0x01	; 1
    b9d4:	30 e0       	ldi	r19, 0x00	; 0
    b9d6:	fc 01       	movw	r30, r24
    b9d8:	31 83       	std	Z+1, r19	; 0x01
    b9da:	20 83       	st	Z, r18
    b9dc:	74 c0       	rjmp	.+232    	; 0xbac6 <pick_drop+0x4e14>
	else if (__tmp > 65535)
    b9de:	ce 01       	movw	r24, r28
    b9e0:	87 57       	subi	r24, 0x77	; 119
    b9e2:	9d 4f       	sbci	r25, 0xFD	; 253
    b9e4:	11 e0       	ldi	r17, 0x01	; 1
    b9e6:	fc 01       	movw	r30, r24
    b9e8:	60 81       	ld	r22, Z
    b9ea:	71 81       	ldd	r23, Z+1	; 0x01
    b9ec:	82 81       	ldd	r24, Z+2	; 0x02
    b9ee:	93 81       	ldd	r25, Z+3	; 0x03
    b9f0:	20 e0       	ldi	r18, 0x00	; 0
    b9f2:	3f ef       	ldi	r19, 0xFF	; 255
    b9f4:	4f e7       	ldi	r20, 0x7F	; 127
    b9f6:	57 e4       	ldi	r21, 0x47	; 71
    b9f8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    b9fc:	18 16       	cp	r1, r24
    b9fe:	0c f0       	brlt	.+2      	; 0xba02 <pick_drop+0x4d50>
    ba00:	10 e0       	ldi	r17, 0x00	; 0
    ba02:	11 23       	and	r17, r17
    ba04:	09 f4       	brne	.+2      	; 0xba08 <pick_drop+0x4d56>
    ba06:	4d c0       	rjmp	.+154    	; 0xbaa2 <pick_drop+0x4df0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ba08:	ce 01       	movw	r24, r28
    ba0a:	8b 57       	subi	r24, 0x7B	; 123
    ba0c:	9d 4f       	sbci	r25, 0xFD	; 253
    ba0e:	fc 01       	movw	r30, r24
    ba10:	60 81       	ld	r22, Z
    ba12:	71 81       	ldd	r23, Z+1	; 0x01
    ba14:	82 81       	ldd	r24, Z+2	; 0x02
    ba16:	93 81       	ldd	r25, Z+3	; 0x03
    ba18:	20 e0       	ldi	r18, 0x00	; 0
    ba1a:	30 e0       	ldi	r19, 0x00	; 0
    ba1c:	40 e2       	ldi	r20, 0x20	; 32
    ba1e:	51 e4       	ldi	r21, 0x41	; 65
    ba20:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    ba24:	dc 01       	movw	r26, r24
    ba26:	cb 01       	movw	r24, r22
    ba28:	8e 01       	movw	r16, r28
    ba2a:	03 57       	subi	r16, 0x73	; 115
    ba2c:	1d 4f       	sbci	r17, 0xFD	; 253
    ba2e:	bc 01       	movw	r22, r24
    ba30:	cd 01       	movw	r24, r26
    ba32:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    ba36:	dc 01       	movw	r26, r24
    ba38:	cb 01       	movw	r24, r22
    ba3a:	f8 01       	movw	r30, r16
    ba3c:	91 83       	std	Z+1, r25	; 0x01
    ba3e:	80 83       	st	Z, r24
    ba40:	27 c0       	rjmp	.+78     	; 0xba90 <pick_drop+0x4dde>
    ba42:	ce 01       	movw	r24, r28
    ba44:	81 57       	subi	r24, 0x71	; 113
    ba46:	9d 4f       	sbci	r25, 0xFD	; 253
    ba48:	20 e7       	ldi	r18, 0x70	; 112
    ba4a:	31 e0       	ldi	r19, 0x01	; 1
    ba4c:	fc 01       	movw	r30, r24
    ba4e:	31 83       	std	Z+1, r19	; 0x01
    ba50:	20 83       	st	Z, r18
    ba52:	ce 01       	movw	r24, r28
    ba54:	81 57       	subi	r24, 0x71	; 113
    ba56:	9d 4f       	sbci	r25, 0xFD	; 253
    ba58:	fc 01       	movw	r30, r24
    ba5a:	80 81       	ld	r24, Z
    ba5c:	91 81       	ldd	r25, Z+1	; 0x01
    ba5e:	8c 01       	movw	r16, r24
    ba60:	c8 01       	movw	r24, r16
    ba62:	01 97       	sbiw	r24, 0x01	; 1
    ba64:	f1 f7       	brne	.-4      	; 0xba62 <pick_drop+0x4db0>
    ba66:	8c 01       	movw	r16, r24
    ba68:	ce 01       	movw	r24, r28
    ba6a:	81 57       	subi	r24, 0x71	; 113
    ba6c:	9d 4f       	sbci	r25, 0xFD	; 253
    ba6e:	fc 01       	movw	r30, r24
    ba70:	11 83       	std	Z+1, r17	; 0x01
    ba72:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ba74:	ce 01       	movw	r24, r28
    ba76:	83 57       	subi	r24, 0x73	; 115
    ba78:	9d 4f       	sbci	r25, 0xFD	; 253
    ba7a:	9e 01       	movw	r18, r28
    ba7c:	23 57       	subi	r18, 0x73	; 115
    ba7e:	3d 4f       	sbci	r19, 0xFD	; 253
    ba80:	f9 01       	movw	r30, r18
    ba82:	20 81       	ld	r18, Z
    ba84:	31 81       	ldd	r19, Z+1	; 0x01
    ba86:	21 50       	subi	r18, 0x01	; 1
    ba88:	30 40       	sbci	r19, 0x00	; 0
    ba8a:	fc 01       	movw	r30, r24
    ba8c:	31 83       	std	Z+1, r19	; 0x01
    ba8e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ba90:	ce 01       	movw	r24, r28
    ba92:	83 57       	subi	r24, 0x73	; 115
    ba94:	9d 4f       	sbci	r25, 0xFD	; 253
    ba96:	fc 01       	movw	r30, r24
    ba98:	80 81       	ld	r24, Z
    ba9a:	91 81       	ldd	r25, Z+1	; 0x01
    ba9c:	00 97       	sbiw	r24, 0x00	; 0
    ba9e:	89 f6       	brne	.-94     	; 0xba42 <pick_drop+0x4d90>
    baa0:	30 c0       	rjmp	.+96     	; 0xbb02 <pick_drop+0x4e50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    baa2:	8e 01       	movw	r16, r28
    baa4:	03 57       	subi	r16, 0x73	; 115
    baa6:	1d 4f       	sbci	r17, 0xFD	; 253
    baa8:	ce 01       	movw	r24, r28
    baaa:	87 57       	subi	r24, 0x77	; 119
    baac:	9d 4f       	sbci	r25, 0xFD	; 253
    baae:	fc 01       	movw	r30, r24
    bab0:	60 81       	ld	r22, Z
    bab2:	71 81       	ldd	r23, Z+1	; 0x01
    bab4:	82 81       	ldd	r24, Z+2	; 0x02
    bab6:	93 81       	ldd	r25, Z+3	; 0x03
    bab8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    babc:	dc 01       	movw	r26, r24
    babe:	cb 01       	movw	r24, r22
    bac0:	f8 01       	movw	r30, r16
    bac2:	91 83       	std	Z+1, r25	; 0x01
    bac4:	80 83       	st	Z, r24
    bac6:	ce 01       	movw	r24, r28
    bac8:	8f 56       	subi	r24, 0x6F	; 111
    baca:	9d 4f       	sbci	r25, 0xFD	; 253
    bacc:	9e 01       	movw	r18, r28
    bace:	23 57       	subi	r18, 0x73	; 115
    bad0:	3d 4f       	sbci	r19, 0xFD	; 253
    bad2:	f9 01       	movw	r30, r18
    bad4:	20 81       	ld	r18, Z
    bad6:	31 81       	ldd	r19, Z+1	; 0x01
    bad8:	fc 01       	movw	r30, r24
    bada:	31 83       	std	Z+1, r19	; 0x01
    badc:	20 83       	st	Z, r18
    bade:	ce 01       	movw	r24, r28
    bae0:	8f 56       	subi	r24, 0x6F	; 111
    bae2:	9d 4f       	sbci	r25, 0xFD	; 253
    bae4:	fc 01       	movw	r30, r24
    bae6:	80 81       	ld	r24, Z
    bae8:	91 81       	ldd	r25, Z+1	; 0x01
    baea:	8c 01       	movw	r16, r24
    baec:	c8 01       	movw	r24, r16
    baee:	01 97       	sbiw	r24, 0x01	; 1
    baf0:	f1 f7       	brne	.-4      	; 0xbaee <pick_drop+0x4e3c>
    baf2:	8c 01       	movw	r16, r24
    baf4:	ce 01       	movw	r24, r28
    baf6:	8f 56       	subi	r24, 0x6F	; 111
    baf8:	9d 4f       	sbci	r25, 0xFD	; 253
    bafa:	fc 01       	movw	r30, r24
    bafc:	11 83       	std	Z+1, r17	; 0x01
    bafe:	00 83       	st	Z, r16
					_delay_ms(100);
    bb00:	0c c5       	rjmp	.+2584   	; 0xc51a <pick_drop+0x5868>
    bb02:	0b c5       	rjmp	.+2582   	; 0xc51a <pick_drop+0x5868>
					//_delay_ms(50);
				}
				else{
					forward_mm(35);
    bb04:	83 e2       	ldi	r24, 0x23	; 35
    bb06:	90 e0       	ldi	r25, 0x00	; 0
    bb08:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    bb0c:	9e 01       	movw	r18, r28
    bb0e:	2d 56       	subi	r18, 0x6D	; 109
    bb10:	3d 4f       	sbci	r19, 0xFD	; 253
    bb12:	80 e0       	ldi	r24, 0x00	; 0
    bb14:	90 e0       	ldi	r25, 0x00	; 0
    bb16:	a0 ea       	ldi	r26, 0xA0	; 160
    bb18:	b1 e4       	ldi	r27, 0x41	; 65
    bb1a:	f9 01       	movw	r30, r18
    bb1c:	80 83       	st	Z, r24
    bb1e:	91 83       	std	Z+1, r25	; 0x01
    bb20:	a2 83       	std	Z+2, r26	; 0x02
    bb22:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bb24:	8e 01       	movw	r16, r28
    bb26:	09 56       	subi	r16, 0x69	; 105
    bb28:	1d 4f       	sbci	r17, 0xFD	; 253
    bb2a:	ce 01       	movw	r24, r28
    bb2c:	8d 56       	subi	r24, 0x6D	; 109
    bb2e:	9d 4f       	sbci	r25, 0xFD	; 253
    bb30:	fc 01       	movw	r30, r24
    bb32:	60 81       	ld	r22, Z
    bb34:	71 81       	ldd	r23, Z+1	; 0x01
    bb36:	82 81       	ldd	r24, Z+2	; 0x02
    bb38:	93 81       	ldd	r25, Z+3	; 0x03
    bb3a:	26 e6       	ldi	r18, 0x66	; 102
    bb3c:	36 e6       	ldi	r19, 0x66	; 102
    bb3e:	46 e6       	ldi	r20, 0x66	; 102
    bb40:	55 e4       	ldi	r21, 0x45	; 69
    bb42:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    bb46:	dc 01       	movw	r26, r24
    bb48:	cb 01       	movw	r24, r22
    bb4a:	f8 01       	movw	r30, r16
    bb4c:	80 83       	st	Z, r24
    bb4e:	91 83       	std	Z+1, r25	; 0x01
    bb50:	a2 83       	std	Z+2, r26	; 0x02
    bb52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bb54:	ce 01       	movw	r24, r28
    bb56:	89 56       	subi	r24, 0x69	; 105
    bb58:	9d 4f       	sbci	r25, 0xFD	; 253
    bb5a:	11 e0       	ldi	r17, 0x01	; 1
    bb5c:	fc 01       	movw	r30, r24
    bb5e:	60 81       	ld	r22, Z
    bb60:	71 81       	ldd	r23, Z+1	; 0x01
    bb62:	82 81       	ldd	r24, Z+2	; 0x02
    bb64:	93 81       	ldd	r25, Z+3	; 0x03
    bb66:	20 e0       	ldi	r18, 0x00	; 0
    bb68:	30 e0       	ldi	r19, 0x00	; 0
    bb6a:	40 e8       	ldi	r20, 0x80	; 128
    bb6c:	5f e3       	ldi	r21, 0x3F	; 63
    bb6e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    bb72:	88 23       	and	r24, r24
    bb74:	0c f0       	brlt	.+2      	; 0xbb78 <pick_drop+0x4ec6>
    bb76:	10 e0       	ldi	r17, 0x00	; 0
    bb78:	11 23       	and	r17, r17
    bb7a:	49 f0       	breq	.+18     	; 0xbb8e <pick_drop+0x4edc>
		__ticks = 1;
    bb7c:	ce 01       	movw	r24, r28
    bb7e:	85 56       	subi	r24, 0x65	; 101
    bb80:	9d 4f       	sbci	r25, 0xFD	; 253
    bb82:	21 e0       	ldi	r18, 0x01	; 1
    bb84:	30 e0       	ldi	r19, 0x00	; 0
    bb86:	fc 01       	movw	r30, r24
    bb88:	31 83       	std	Z+1, r19	; 0x01
    bb8a:	20 83       	st	Z, r18
    bb8c:	74 c0       	rjmp	.+232    	; 0xbc76 <pick_drop+0x4fc4>
	else if (__tmp > 65535)
    bb8e:	ce 01       	movw	r24, r28
    bb90:	89 56       	subi	r24, 0x69	; 105
    bb92:	9d 4f       	sbci	r25, 0xFD	; 253
    bb94:	11 e0       	ldi	r17, 0x01	; 1
    bb96:	fc 01       	movw	r30, r24
    bb98:	60 81       	ld	r22, Z
    bb9a:	71 81       	ldd	r23, Z+1	; 0x01
    bb9c:	82 81       	ldd	r24, Z+2	; 0x02
    bb9e:	93 81       	ldd	r25, Z+3	; 0x03
    bba0:	20 e0       	ldi	r18, 0x00	; 0
    bba2:	3f ef       	ldi	r19, 0xFF	; 255
    bba4:	4f e7       	ldi	r20, 0x7F	; 127
    bba6:	57 e4       	ldi	r21, 0x47	; 71
    bba8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    bbac:	18 16       	cp	r1, r24
    bbae:	0c f0       	brlt	.+2      	; 0xbbb2 <pick_drop+0x4f00>
    bbb0:	10 e0       	ldi	r17, 0x00	; 0
    bbb2:	11 23       	and	r17, r17
    bbb4:	09 f4       	brne	.+2      	; 0xbbb8 <pick_drop+0x4f06>
    bbb6:	4d c0       	rjmp	.+154    	; 0xbc52 <pick_drop+0x4fa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bbb8:	ce 01       	movw	r24, r28
    bbba:	8d 56       	subi	r24, 0x6D	; 109
    bbbc:	9d 4f       	sbci	r25, 0xFD	; 253
    bbbe:	fc 01       	movw	r30, r24
    bbc0:	60 81       	ld	r22, Z
    bbc2:	71 81       	ldd	r23, Z+1	; 0x01
    bbc4:	82 81       	ldd	r24, Z+2	; 0x02
    bbc6:	93 81       	ldd	r25, Z+3	; 0x03
    bbc8:	20 e0       	ldi	r18, 0x00	; 0
    bbca:	30 e0       	ldi	r19, 0x00	; 0
    bbcc:	40 e2       	ldi	r20, 0x20	; 32
    bbce:	51 e4       	ldi	r21, 0x41	; 65
    bbd0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    bbd4:	dc 01       	movw	r26, r24
    bbd6:	cb 01       	movw	r24, r22
    bbd8:	8e 01       	movw	r16, r28
    bbda:	05 56       	subi	r16, 0x65	; 101
    bbdc:	1d 4f       	sbci	r17, 0xFD	; 253
    bbde:	bc 01       	movw	r22, r24
    bbe0:	cd 01       	movw	r24, r26
    bbe2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    bbe6:	dc 01       	movw	r26, r24
    bbe8:	cb 01       	movw	r24, r22
    bbea:	f8 01       	movw	r30, r16
    bbec:	91 83       	std	Z+1, r25	; 0x01
    bbee:	80 83       	st	Z, r24
    bbf0:	27 c0       	rjmp	.+78     	; 0xbc40 <pick_drop+0x4f8e>
    bbf2:	ce 01       	movw	r24, r28
    bbf4:	83 56       	subi	r24, 0x63	; 99
    bbf6:	9d 4f       	sbci	r25, 0xFD	; 253
    bbf8:	20 e7       	ldi	r18, 0x70	; 112
    bbfa:	31 e0       	ldi	r19, 0x01	; 1
    bbfc:	fc 01       	movw	r30, r24
    bbfe:	31 83       	std	Z+1, r19	; 0x01
    bc00:	20 83       	st	Z, r18
    bc02:	ce 01       	movw	r24, r28
    bc04:	83 56       	subi	r24, 0x63	; 99
    bc06:	9d 4f       	sbci	r25, 0xFD	; 253
    bc08:	fc 01       	movw	r30, r24
    bc0a:	80 81       	ld	r24, Z
    bc0c:	91 81       	ldd	r25, Z+1	; 0x01
    bc0e:	8c 01       	movw	r16, r24
    bc10:	c8 01       	movw	r24, r16
    bc12:	01 97       	sbiw	r24, 0x01	; 1
    bc14:	f1 f7       	brne	.-4      	; 0xbc12 <pick_drop+0x4f60>
    bc16:	8c 01       	movw	r16, r24
    bc18:	ce 01       	movw	r24, r28
    bc1a:	83 56       	subi	r24, 0x63	; 99
    bc1c:	9d 4f       	sbci	r25, 0xFD	; 253
    bc1e:	fc 01       	movw	r30, r24
    bc20:	11 83       	std	Z+1, r17	; 0x01
    bc22:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bc24:	ce 01       	movw	r24, r28
    bc26:	85 56       	subi	r24, 0x65	; 101
    bc28:	9d 4f       	sbci	r25, 0xFD	; 253
    bc2a:	9e 01       	movw	r18, r28
    bc2c:	25 56       	subi	r18, 0x65	; 101
    bc2e:	3d 4f       	sbci	r19, 0xFD	; 253
    bc30:	f9 01       	movw	r30, r18
    bc32:	20 81       	ld	r18, Z
    bc34:	31 81       	ldd	r19, Z+1	; 0x01
    bc36:	21 50       	subi	r18, 0x01	; 1
    bc38:	30 40       	sbci	r19, 0x00	; 0
    bc3a:	fc 01       	movw	r30, r24
    bc3c:	31 83       	std	Z+1, r19	; 0x01
    bc3e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bc40:	ce 01       	movw	r24, r28
    bc42:	85 56       	subi	r24, 0x65	; 101
    bc44:	9d 4f       	sbci	r25, 0xFD	; 253
    bc46:	fc 01       	movw	r30, r24
    bc48:	80 81       	ld	r24, Z
    bc4a:	91 81       	ldd	r25, Z+1	; 0x01
    bc4c:	00 97       	sbiw	r24, 0x00	; 0
    bc4e:	89 f6       	brne	.-94     	; 0xbbf2 <pick_drop+0x4f40>
    bc50:	2f c0       	rjmp	.+94     	; 0xbcb0 <pick_drop+0x4ffe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bc52:	8e 01       	movw	r16, r28
    bc54:	05 56       	subi	r16, 0x65	; 101
    bc56:	1d 4f       	sbci	r17, 0xFD	; 253
    bc58:	ce 01       	movw	r24, r28
    bc5a:	89 56       	subi	r24, 0x69	; 105
    bc5c:	9d 4f       	sbci	r25, 0xFD	; 253
    bc5e:	fc 01       	movw	r30, r24
    bc60:	60 81       	ld	r22, Z
    bc62:	71 81       	ldd	r23, Z+1	; 0x01
    bc64:	82 81       	ldd	r24, Z+2	; 0x02
    bc66:	93 81       	ldd	r25, Z+3	; 0x03
    bc68:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    bc6c:	dc 01       	movw	r26, r24
    bc6e:	cb 01       	movw	r24, r22
    bc70:	f8 01       	movw	r30, r16
    bc72:	91 83       	std	Z+1, r25	; 0x01
    bc74:	80 83       	st	Z, r24
    bc76:	ce 01       	movw	r24, r28
    bc78:	81 56       	subi	r24, 0x61	; 97
    bc7a:	9d 4f       	sbci	r25, 0xFD	; 253
    bc7c:	9e 01       	movw	r18, r28
    bc7e:	25 56       	subi	r18, 0x65	; 101
    bc80:	3d 4f       	sbci	r19, 0xFD	; 253
    bc82:	f9 01       	movw	r30, r18
    bc84:	20 81       	ld	r18, Z
    bc86:	31 81       	ldd	r19, Z+1	; 0x01
    bc88:	fc 01       	movw	r30, r24
    bc8a:	31 83       	std	Z+1, r19	; 0x01
    bc8c:	20 83       	st	Z, r18
    bc8e:	ce 01       	movw	r24, r28
    bc90:	81 56       	subi	r24, 0x61	; 97
    bc92:	9d 4f       	sbci	r25, 0xFD	; 253
    bc94:	fc 01       	movw	r30, r24
    bc96:	80 81       	ld	r24, Z
    bc98:	91 81       	ldd	r25, Z+1	; 0x01
    bc9a:	8c 01       	movw	r16, r24
    bc9c:	c8 01       	movw	r24, r16
    bc9e:	01 97       	sbiw	r24, 0x01	; 1
    bca0:	f1 f7       	brne	.-4      	; 0xbc9e <pick_drop+0x4fec>
    bca2:	8c 01       	movw	r16, r24
    bca4:	ce 01       	movw	r24, r28
    bca6:	81 56       	subi	r24, 0x61	; 97
    bca8:	9d 4f       	sbci	r25, 0xFD	; 253
    bcaa:	fc 01       	movw	r30, r24
    bcac:	11 83       	std	Z+1, r17	; 0x01
    bcae:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_right();
    bcb0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
					front();
    bcb4:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    bcb8:	9e 01       	movw	r18, r28
    bcba:	2f 55       	subi	r18, 0x5F	; 95
    bcbc:	3d 4f       	sbci	r19, 0xFD	; 253
    bcbe:	80 e0       	ldi	r24, 0x00	; 0
    bcc0:	90 e0       	ldi	r25, 0x00	; 0
    bcc2:	a8 ec       	ldi	r26, 0xC8	; 200
    bcc4:	b2 e4       	ldi	r27, 0x42	; 66
    bcc6:	f9 01       	movw	r30, r18
    bcc8:	80 83       	st	Z, r24
    bcca:	91 83       	std	Z+1, r25	; 0x01
    bccc:	a2 83       	std	Z+2, r26	; 0x02
    bcce:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bcd0:	8e 01       	movw	r16, r28
    bcd2:	0b 55       	subi	r16, 0x5B	; 91
    bcd4:	1d 4f       	sbci	r17, 0xFD	; 253
    bcd6:	ce 01       	movw	r24, r28
    bcd8:	8f 55       	subi	r24, 0x5F	; 95
    bcda:	9d 4f       	sbci	r25, 0xFD	; 253
    bcdc:	fc 01       	movw	r30, r24
    bcde:	60 81       	ld	r22, Z
    bce0:	71 81       	ldd	r23, Z+1	; 0x01
    bce2:	82 81       	ldd	r24, Z+2	; 0x02
    bce4:	93 81       	ldd	r25, Z+3	; 0x03
    bce6:	26 e6       	ldi	r18, 0x66	; 102
    bce8:	36 e6       	ldi	r19, 0x66	; 102
    bcea:	46 e6       	ldi	r20, 0x66	; 102
    bcec:	55 e4       	ldi	r21, 0x45	; 69
    bcee:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    bcf2:	dc 01       	movw	r26, r24
    bcf4:	cb 01       	movw	r24, r22
    bcf6:	f8 01       	movw	r30, r16
    bcf8:	80 83       	st	Z, r24
    bcfa:	91 83       	std	Z+1, r25	; 0x01
    bcfc:	a2 83       	std	Z+2, r26	; 0x02
    bcfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bd00:	ce 01       	movw	r24, r28
    bd02:	8b 55       	subi	r24, 0x5B	; 91
    bd04:	9d 4f       	sbci	r25, 0xFD	; 253
    bd06:	11 e0       	ldi	r17, 0x01	; 1
    bd08:	fc 01       	movw	r30, r24
    bd0a:	60 81       	ld	r22, Z
    bd0c:	71 81       	ldd	r23, Z+1	; 0x01
    bd0e:	82 81       	ldd	r24, Z+2	; 0x02
    bd10:	93 81       	ldd	r25, Z+3	; 0x03
    bd12:	20 e0       	ldi	r18, 0x00	; 0
    bd14:	30 e0       	ldi	r19, 0x00	; 0
    bd16:	40 e8       	ldi	r20, 0x80	; 128
    bd18:	5f e3       	ldi	r21, 0x3F	; 63
    bd1a:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    bd1e:	88 23       	and	r24, r24
    bd20:	0c f0       	brlt	.+2      	; 0xbd24 <pick_drop+0x5072>
    bd22:	10 e0       	ldi	r17, 0x00	; 0
    bd24:	11 23       	and	r17, r17
    bd26:	49 f0       	breq	.+18     	; 0xbd3a <pick_drop+0x5088>
		__ticks = 1;
    bd28:	ce 01       	movw	r24, r28
    bd2a:	87 55       	subi	r24, 0x57	; 87
    bd2c:	9d 4f       	sbci	r25, 0xFD	; 253
    bd2e:	21 e0       	ldi	r18, 0x01	; 1
    bd30:	30 e0       	ldi	r19, 0x00	; 0
    bd32:	fc 01       	movw	r30, r24
    bd34:	31 83       	std	Z+1, r19	; 0x01
    bd36:	20 83       	st	Z, r18
    bd38:	74 c0       	rjmp	.+232    	; 0xbe22 <pick_drop+0x5170>
	else if (__tmp > 65535)
    bd3a:	ce 01       	movw	r24, r28
    bd3c:	8b 55       	subi	r24, 0x5B	; 91
    bd3e:	9d 4f       	sbci	r25, 0xFD	; 253
    bd40:	11 e0       	ldi	r17, 0x01	; 1
    bd42:	fc 01       	movw	r30, r24
    bd44:	60 81       	ld	r22, Z
    bd46:	71 81       	ldd	r23, Z+1	; 0x01
    bd48:	82 81       	ldd	r24, Z+2	; 0x02
    bd4a:	93 81       	ldd	r25, Z+3	; 0x03
    bd4c:	20 e0       	ldi	r18, 0x00	; 0
    bd4e:	3f ef       	ldi	r19, 0xFF	; 255
    bd50:	4f e7       	ldi	r20, 0x7F	; 127
    bd52:	57 e4       	ldi	r21, 0x47	; 71
    bd54:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    bd58:	18 16       	cp	r1, r24
    bd5a:	0c f0       	brlt	.+2      	; 0xbd5e <pick_drop+0x50ac>
    bd5c:	10 e0       	ldi	r17, 0x00	; 0
    bd5e:	11 23       	and	r17, r17
    bd60:	09 f4       	brne	.+2      	; 0xbd64 <pick_drop+0x50b2>
    bd62:	4d c0       	rjmp	.+154    	; 0xbdfe <pick_drop+0x514c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bd64:	ce 01       	movw	r24, r28
    bd66:	8f 55       	subi	r24, 0x5F	; 95
    bd68:	9d 4f       	sbci	r25, 0xFD	; 253
    bd6a:	fc 01       	movw	r30, r24
    bd6c:	60 81       	ld	r22, Z
    bd6e:	71 81       	ldd	r23, Z+1	; 0x01
    bd70:	82 81       	ldd	r24, Z+2	; 0x02
    bd72:	93 81       	ldd	r25, Z+3	; 0x03
    bd74:	20 e0       	ldi	r18, 0x00	; 0
    bd76:	30 e0       	ldi	r19, 0x00	; 0
    bd78:	40 e2       	ldi	r20, 0x20	; 32
    bd7a:	51 e4       	ldi	r21, 0x41	; 65
    bd7c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    bd80:	dc 01       	movw	r26, r24
    bd82:	cb 01       	movw	r24, r22
    bd84:	8e 01       	movw	r16, r28
    bd86:	07 55       	subi	r16, 0x57	; 87
    bd88:	1d 4f       	sbci	r17, 0xFD	; 253
    bd8a:	bc 01       	movw	r22, r24
    bd8c:	cd 01       	movw	r24, r26
    bd8e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    bd92:	dc 01       	movw	r26, r24
    bd94:	cb 01       	movw	r24, r22
    bd96:	f8 01       	movw	r30, r16
    bd98:	91 83       	std	Z+1, r25	; 0x01
    bd9a:	80 83       	st	Z, r24
    bd9c:	27 c0       	rjmp	.+78     	; 0xbdec <pick_drop+0x513a>
    bd9e:	ce 01       	movw	r24, r28
    bda0:	85 55       	subi	r24, 0x55	; 85
    bda2:	9d 4f       	sbci	r25, 0xFD	; 253
    bda4:	20 e7       	ldi	r18, 0x70	; 112
    bda6:	31 e0       	ldi	r19, 0x01	; 1
    bda8:	fc 01       	movw	r30, r24
    bdaa:	31 83       	std	Z+1, r19	; 0x01
    bdac:	20 83       	st	Z, r18
    bdae:	ce 01       	movw	r24, r28
    bdb0:	85 55       	subi	r24, 0x55	; 85
    bdb2:	9d 4f       	sbci	r25, 0xFD	; 253
    bdb4:	fc 01       	movw	r30, r24
    bdb6:	80 81       	ld	r24, Z
    bdb8:	91 81       	ldd	r25, Z+1	; 0x01
    bdba:	8c 01       	movw	r16, r24
    bdbc:	c8 01       	movw	r24, r16
    bdbe:	01 97       	sbiw	r24, 0x01	; 1
    bdc0:	f1 f7       	brne	.-4      	; 0xbdbe <pick_drop+0x510c>
    bdc2:	8c 01       	movw	r16, r24
    bdc4:	ce 01       	movw	r24, r28
    bdc6:	85 55       	subi	r24, 0x55	; 85
    bdc8:	9d 4f       	sbci	r25, 0xFD	; 253
    bdca:	fc 01       	movw	r30, r24
    bdcc:	11 83       	std	Z+1, r17	; 0x01
    bdce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bdd0:	ce 01       	movw	r24, r28
    bdd2:	87 55       	subi	r24, 0x57	; 87
    bdd4:	9d 4f       	sbci	r25, 0xFD	; 253
    bdd6:	9e 01       	movw	r18, r28
    bdd8:	27 55       	subi	r18, 0x57	; 87
    bdda:	3d 4f       	sbci	r19, 0xFD	; 253
    bddc:	f9 01       	movw	r30, r18
    bdde:	20 81       	ld	r18, Z
    bde0:	31 81       	ldd	r19, Z+1	; 0x01
    bde2:	21 50       	subi	r18, 0x01	; 1
    bde4:	30 40       	sbci	r19, 0x00	; 0
    bde6:	fc 01       	movw	r30, r24
    bde8:	31 83       	std	Z+1, r19	; 0x01
    bdea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bdec:	ce 01       	movw	r24, r28
    bdee:	87 55       	subi	r24, 0x57	; 87
    bdf0:	9d 4f       	sbci	r25, 0xFD	; 253
    bdf2:	fc 01       	movw	r30, r24
    bdf4:	80 81       	ld	r24, Z
    bdf6:	91 81       	ldd	r25, Z+1	; 0x01
    bdf8:	00 97       	sbiw	r24, 0x00	; 0
    bdfa:	89 f6       	brne	.-94     	; 0xbd9e <pick_drop+0x50ec>
    bdfc:	2f c0       	rjmp	.+94     	; 0xbe5c <pick_drop+0x51aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bdfe:	8e 01       	movw	r16, r28
    be00:	07 55       	subi	r16, 0x57	; 87
    be02:	1d 4f       	sbci	r17, 0xFD	; 253
    be04:	ce 01       	movw	r24, r28
    be06:	8b 55       	subi	r24, 0x5B	; 91
    be08:	9d 4f       	sbci	r25, 0xFD	; 253
    be0a:	fc 01       	movw	r30, r24
    be0c:	60 81       	ld	r22, Z
    be0e:	71 81       	ldd	r23, Z+1	; 0x01
    be10:	82 81       	ldd	r24, Z+2	; 0x02
    be12:	93 81       	ldd	r25, Z+3	; 0x03
    be14:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    be18:	dc 01       	movw	r26, r24
    be1a:	cb 01       	movw	r24, r22
    be1c:	f8 01       	movw	r30, r16
    be1e:	91 83       	std	Z+1, r25	; 0x01
    be20:	80 83       	st	Z, r24
    be22:	ce 01       	movw	r24, r28
    be24:	83 55       	subi	r24, 0x53	; 83
    be26:	9d 4f       	sbci	r25, 0xFD	; 253
    be28:	9e 01       	movw	r18, r28
    be2a:	27 55       	subi	r18, 0x57	; 87
    be2c:	3d 4f       	sbci	r19, 0xFD	; 253
    be2e:	f9 01       	movw	r30, r18
    be30:	20 81       	ld	r18, Z
    be32:	31 81       	ldd	r19, Z+1	; 0x01
    be34:	fc 01       	movw	r30, r24
    be36:	31 83       	std	Z+1, r19	; 0x01
    be38:	20 83       	st	Z, r18
    be3a:	ce 01       	movw	r24, r28
    be3c:	83 55       	subi	r24, 0x53	; 83
    be3e:	9d 4f       	sbci	r25, 0xFD	; 253
    be40:	fc 01       	movw	r30, r24
    be42:	80 81       	ld	r24, Z
    be44:	91 81       	ldd	r25, Z+1	; 0x01
    be46:	8c 01       	movw	r16, r24
    be48:	c8 01       	movw	r24, r16
    be4a:	01 97       	sbiw	r24, 0x01	; 1
    be4c:	f1 f7       	brne	.-4      	; 0xbe4a <pick_drop+0x5198>
    be4e:	8c 01       	movw	r16, r24
    be50:	ce 01       	movw	r24, r28
    be52:	83 55       	subi	r24, 0x53	; 83
    be54:	9d 4f       	sbci	r25, 0xFD	; 253
    be56:	fc 01       	movw	r30, r24
    be58:	11 83       	std	Z+1, r17	; 0x01
    be5a:	00 83       	st	Z, r16
					_delay_ms(100);
					left_degrees(50);
    be5c:	82 e3       	ldi	r24, 0x32	; 50
    be5e:	90 e0       	ldi	r25, 0x00	; 0
    be60:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
    be64:	9e 01       	movw	r18, r28
    be66:	21 55       	subi	r18, 0x51	; 81
    be68:	3d 4f       	sbci	r19, 0xFD	; 253
    be6a:	80 e0       	ldi	r24, 0x00	; 0
    be6c:	90 e0       	ldi	r25, 0x00	; 0
    be6e:	a0 ea       	ldi	r26, 0xA0	; 160
    be70:	b1 e4       	ldi	r27, 0x41	; 65
    be72:	f9 01       	movw	r30, r18
    be74:	80 83       	st	Z, r24
    be76:	91 83       	std	Z+1, r25	; 0x01
    be78:	a2 83       	std	Z+2, r26	; 0x02
    be7a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    be7c:	8e 01       	movw	r16, r28
    be7e:	0d 54       	subi	r16, 0x4D	; 77
    be80:	1d 4f       	sbci	r17, 0xFD	; 253
    be82:	ce 01       	movw	r24, r28
    be84:	81 55       	subi	r24, 0x51	; 81
    be86:	9d 4f       	sbci	r25, 0xFD	; 253
    be88:	fc 01       	movw	r30, r24
    be8a:	60 81       	ld	r22, Z
    be8c:	71 81       	ldd	r23, Z+1	; 0x01
    be8e:	82 81       	ldd	r24, Z+2	; 0x02
    be90:	93 81       	ldd	r25, Z+3	; 0x03
    be92:	26 e6       	ldi	r18, 0x66	; 102
    be94:	36 e6       	ldi	r19, 0x66	; 102
    be96:	46 e6       	ldi	r20, 0x66	; 102
    be98:	55 e4       	ldi	r21, 0x45	; 69
    be9a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    be9e:	dc 01       	movw	r26, r24
    bea0:	cb 01       	movw	r24, r22
    bea2:	f8 01       	movw	r30, r16
    bea4:	80 83       	st	Z, r24
    bea6:	91 83       	std	Z+1, r25	; 0x01
    bea8:	a2 83       	std	Z+2, r26	; 0x02
    beaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    beac:	ce 01       	movw	r24, r28
    beae:	8d 54       	subi	r24, 0x4D	; 77
    beb0:	9d 4f       	sbci	r25, 0xFD	; 253
    beb2:	11 e0       	ldi	r17, 0x01	; 1
    beb4:	fc 01       	movw	r30, r24
    beb6:	60 81       	ld	r22, Z
    beb8:	71 81       	ldd	r23, Z+1	; 0x01
    beba:	82 81       	ldd	r24, Z+2	; 0x02
    bebc:	93 81       	ldd	r25, Z+3	; 0x03
    bebe:	20 e0       	ldi	r18, 0x00	; 0
    bec0:	30 e0       	ldi	r19, 0x00	; 0
    bec2:	40 e8       	ldi	r20, 0x80	; 128
    bec4:	5f e3       	ldi	r21, 0x3F	; 63
    bec6:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    beca:	88 23       	and	r24, r24
    becc:	0c f0       	brlt	.+2      	; 0xbed0 <pick_drop+0x521e>
    bece:	10 e0       	ldi	r17, 0x00	; 0
    bed0:	11 23       	and	r17, r17
    bed2:	49 f0       	breq	.+18     	; 0xbee6 <pick_drop+0x5234>
		__ticks = 1;
    bed4:	ce 01       	movw	r24, r28
    bed6:	89 54       	subi	r24, 0x49	; 73
    bed8:	9d 4f       	sbci	r25, 0xFD	; 253
    beda:	21 e0       	ldi	r18, 0x01	; 1
    bedc:	30 e0       	ldi	r19, 0x00	; 0
    bede:	fc 01       	movw	r30, r24
    bee0:	31 83       	std	Z+1, r19	; 0x01
    bee2:	20 83       	st	Z, r18
    bee4:	74 c0       	rjmp	.+232    	; 0xbfce <pick_drop+0x531c>
	else if (__tmp > 65535)
    bee6:	ce 01       	movw	r24, r28
    bee8:	8d 54       	subi	r24, 0x4D	; 77
    beea:	9d 4f       	sbci	r25, 0xFD	; 253
    beec:	11 e0       	ldi	r17, 0x01	; 1
    beee:	fc 01       	movw	r30, r24
    bef0:	60 81       	ld	r22, Z
    bef2:	71 81       	ldd	r23, Z+1	; 0x01
    bef4:	82 81       	ldd	r24, Z+2	; 0x02
    bef6:	93 81       	ldd	r25, Z+3	; 0x03
    bef8:	20 e0       	ldi	r18, 0x00	; 0
    befa:	3f ef       	ldi	r19, 0xFF	; 255
    befc:	4f e7       	ldi	r20, 0x7F	; 127
    befe:	57 e4       	ldi	r21, 0x47	; 71
    bf00:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    bf04:	18 16       	cp	r1, r24
    bf06:	0c f0       	brlt	.+2      	; 0xbf0a <pick_drop+0x5258>
    bf08:	10 e0       	ldi	r17, 0x00	; 0
    bf0a:	11 23       	and	r17, r17
    bf0c:	09 f4       	brne	.+2      	; 0xbf10 <pick_drop+0x525e>
    bf0e:	4d c0       	rjmp	.+154    	; 0xbfaa <pick_drop+0x52f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bf10:	ce 01       	movw	r24, r28
    bf12:	81 55       	subi	r24, 0x51	; 81
    bf14:	9d 4f       	sbci	r25, 0xFD	; 253
    bf16:	fc 01       	movw	r30, r24
    bf18:	60 81       	ld	r22, Z
    bf1a:	71 81       	ldd	r23, Z+1	; 0x01
    bf1c:	82 81       	ldd	r24, Z+2	; 0x02
    bf1e:	93 81       	ldd	r25, Z+3	; 0x03
    bf20:	20 e0       	ldi	r18, 0x00	; 0
    bf22:	30 e0       	ldi	r19, 0x00	; 0
    bf24:	40 e2       	ldi	r20, 0x20	; 32
    bf26:	51 e4       	ldi	r21, 0x41	; 65
    bf28:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    bf2c:	dc 01       	movw	r26, r24
    bf2e:	cb 01       	movw	r24, r22
    bf30:	8e 01       	movw	r16, r28
    bf32:	09 54       	subi	r16, 0x49	; 73
    bf34:	1d 4f       	sbci	r17, 0xFD	; 253
    bf36:	bc 01       	movw	r22, r24
    bf38:	cd 01       	movw	r24, r26
    bf3a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    bf3e:	dc 01       	movw	r26, r24
    bf40:	cb 01       	movw	r24, r22
    bf42:	f8 01       	movw	r30, r16
    bf44:	91 83       	std	Z+1, r25	; 0x01
    bf46:	80 83       	st	Z, r24
    bf48:	27 c0       	rjmp	.+78     	; 0xbf98 <pick_drop+0x52e6>
    bf4a:	ce 01       	movw	r24, r28
    bf4c:	87 54       	subi	r24, 0x47	; 71
    bf4e:	9d 4f       	sbci	r25, 0xFD	; 253
    bf50:	20 e7       	ldi	r18, 0x70	; 112
    bf52:	31 e0       	ldi	r19, 0x01	; 1
    bf54:	fc 01       	movw	r30, r24
    bf56:	31 83       	std	Z+1, r19	; 0x01
    bf58:	20 83       	st	Z, r18
    bf5a:	ce 01       	movw	r24, r28
    bf5c:	87 54       	subi	r24, 0x47	; 71
    bf5e:	9d 4f       	sbci	r25, 0xFD	; 253
    bf60:	fc 01       	movw	r30, r24
    bf62:	80 81       	ld	r24, Z
    bf64:	91 81       	ldd	r25, Z+1	; 0x01
    bf66:	8c 01       	movw	r16, r24
    bf68:	c8 01       	movw	r24, r16
    bf6a:	01 97       	sbiw	r24, 0x01	; 1
    bf6c:	f1 f7       	brne	.-4      	; 0xbf6a <pick_drop+0x52b8>
    bf6e:	8c 01       	movw	r16, r24
    bf70:	ce 01       	movw	r24, r28
    bf72:	87 54       	subi	r24, 0x47	; 71
    bf74:	9d 4f       	sbci	r25, 0xFD	; 253
    bf76:	fc 01       	movw	r30, r24
    bf78:	11 83       	std	Z+1, r17	; 0x01
    bf7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bf7c:	ce 01       	movw	r24, r28
    bf7e:	89 54       	subi	r24, 0x49	; 73
    bf80:	9d 4f       	sbci	r25, 0xFD	; 253
    bf82:	9e 01       	movw	r18, r28
    bf84:	29 54       	subi	r18, 0x49	; 73
    bf86:	3d 4f       	sbci	r19, 0xFD	; 253
    bf88:	f9 01       	movw	r30, r18
    bf8a:	20 81       	ld	r18, Z
    bf8c:	31 81       	ldd	r19, Z+1	; 0x01
    bf8e:	21 50       	subi	r18, 0x01	; 1
    bf90:	30 40       	sbci	r19, 0x00	; 0
    bf92:	fc 01       	movw	r30, r24
    bf94:	31 83       	std	Z+1, r19	; 0x01
    bf96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bf98:	ce 01       	movw	r24, r28
    bf9a:	89 54       	subi	r24, 0x49	; 73
    bf9c:	9d 4f       	sbci	r25, 0xFD	; 253
    bf9e:	fc 01       	movw	r30, r24
    bfa0:	80 81       	ld	r24, Z
    bfa2:	91 81       	ldd	r25, Z+1	; 0x01
    bfa4:	00 97       	sbiw	r24, 0x00	; 0
    bfa6:	89 f6       	brne	.-94     	; 0xbf4a <pick_drop+0x5298>
    bfa8:	2f c0       	rjmp	.+94     	; 0xc008 <pick_drop+0x5356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bfaa:	8e 01       	movw	r16, r28
    bfac:	09 54       	subi	r16, 0x49	; 73
    bfae:	1d 4f       	sbci	r17, 0xFD	; 253
    bfb0:	ce 01       	movw	r24, r28
    bfb2:	8d 54       	subi	r24, 0x4D	; 77
    bfb4:	9d 4f       	sbci	r25, 0xFD	; 253
    bfb6:	fc 01       	movw	r30, r24
    bfb8:	60 81       	ld	r22, Z
    bfba:	71 81       	ldd	r23, Z+1	; 0x01
    bfbc:	82 81       	ldd	r24, Z+2	; 0x02
    bfbe:	93 81       	ldd	r25, Z+3	; 0x03
    bfc0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    bfc4:	dc 01       	movw	r26, r24
    bfc6:	cb 01       	movw	r24, r22
    bfc8:	f8 01       	movw	r30, r16
    bfca:	91 83       	std	Z+1, r25	; 0x01
    bfcc:	80 83       	st	Z, r24
    bfce:	ce 01       	movw	r24, r28
    bfd0:	85 54       	subi	r24, 0x45	; 69
    bfd2:	9d 4f       	sbci	r25, 0xFD	; 253
    bfd4:	9e 01       	movw	r18, r28
    bfd6:	29 54       	subi	r18, 0x49	; 73
    bfd8:	3d 4f       	sbci	r19, 0xFD	; 253
    bfda:	f9 01       	movw	r30, r18
    bfdc:	20 81       	ld	r18, Z
    bfde:	31 81       	ldd	r19, Z+1	; 0x01
    bfe0:	fc 01       	movw	r30, r24
    bfe2:	31 83       	std	Z+1, r19	; 0x01
    bfe4:	20 83       	st	Z, r18
    bfe6:	ce 01       	movw	r24, r28
    bfe8:	85 54       	subi	r24, 0x45	; 69
    bfea:	9d 4f       	sbci	r25, 0xFD	; 253
    bfec:	fc 01       	movw	r30, r24
    bfee:	80 81       	ld	r24, Z
    bff0:	91 81       	ldd	r25, Z+1	; 0x01
    bff2:	8c 01       	movw	r16, r24
    bff4:	c8 01       	movw	r24, r16
    bff6:	01 97       	sbiw	r24, 0x01	; 1
    bff8:	f1 f7       	brne	.-4      	; 0xbff6 <pick_drop+0x5344>
    bffa:	8c 01       	movw	r16, r24
    bffc:	ce 01       	movw	r24, r28
    bffe:	85 54       	subi	r24, 0x45	; 69
    c000:	9d 4f       	sbci	r25, 0xFD	; 253
    c002:	fc 01       	movw	r30, r24
    c004:	11 83       	std	Z+1, r17	; 0x01
    c006:	00 83       	st	Z, r16
					_delay_ms(20);
					back_mm(55);
    c008:	87 e3       	ldi	r24, 0x37	; 55
    c00a:	90 e0       	ldi	r25, 0x00	; 0
    c00c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    c010:	9e 01       	movw	r18, r28
    c012:	23 54       	subi	r18, 0x43	; 67
    c014:	3d 4f       	sbci	r19, 0xFD	; 253
    c016:	80 e0       	ldi	r24, 0x00	; 0
    c018:	90 e0       	ldi	r25, 0x00	; 0
    c01a:	a0 ea       	ldi	r26, 0xA0	; 160
    c01c:	b1 e4       	ldi	r27, 0x41	; 65
    c01e:	f9 01       	movw	r30, r18
    c020:	80 83       	st	Z, r24
    c022:	91 83       	std	Z+1, r25	; 0x01
    c024:	a2 83       	std	Z+2, r26	; 0x02
    c026:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c028:	8e 01       	movw	r16, r28
    c02a:	0f 53       	subi	r16, 0x3F	; 63
    c02c:	1d 4f       	sbci	r17, 0xFD	; 253
    c02e:	ce 01       	movw	r24, r28
    c030:	83 54       	subi	r24, 0x43	; 67
    c032:	9d 4f       	sbci	r25, 0xFD	; 253
    c034:	fc 01       	movw	r30, r24
    c036:	60 81       	ld	r22, Z
    c038:	71 81       	ldd	r23, Z+1	; 0x01
    c03a:	82 81       	ldd	r24, Z+2	; 0x02
    c03c:	93 81       	ldd	r25, Z+3	; 0x03
    c03e:	26 e6       	ldi	r18, 0x66	; 102
    c040:	36 e6       	ldi	r19, 0x66	; 102
    c042:	46 e6       	ldi	r20, 0x66	; 102
    c044:	55 e4       	ldi	r21, 0x45	; 69
    c046:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c04a:	dc 01       	movw	r26, r24
    c04c:	cb 01       	movw	r24, r22
    c04e:	f8 01       	movw	r30, r16
    c050:	80 83       	st	Z, r24
    c052:	91 83       	std	Z+1, r25	; 0x01
    c054:	a2 83       	std	Z+2, r26	; 0x02
    c056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c058:	ce 01       	movw	r24, r28
    c05a:	8f 53       	subi	r24, 0x3F	; 63
    c05c:	9d 4f       	sbci	r25, 0xFD	; 253
    c05e:	11 e0       	ldi	r17, 0x01	; 1
    c060:	fc 01       	movw	r30, r24
    c062:	60 81       	ld	r22, Z
    c064:	71 81       	ldd	r23, Z+1	; 0x01
    c066:	82 81       	ldd	r24, Z+2	; 0x02
    c068:	93 81       	ldd	r25, Z+3	; 0x03
    c06a:	20 e0       	ldi	r18, 0x00	; 0
    c06c:	30 e0       	ldi	r19, 0x00	; 0
    c06e:	40 e8       	ldi	r20, 0x80	; 128
    c070:	5f e3       	ldi	r21, 0x3F	; 63
    c072:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    c076:	88 23       	and	r24, r24
    c078:	0c f0       	brlt	.+2      	; 0xc07c <pick_drop+0x53ca>
    c07a:	10 e0       	ldi	r17, 0x00	; 0
    c07c:	11 23       	and	r17, r17
    c07e:	49 f0       	breq	.+18     	; 0xc092 <pick_drop+0x53e0>
		__ticks = 1;
    c080:	ce 01       	movw	r24, r28
    c082:	8b 53       	subi	r24, 0x3B	; 59
    c084:	9d 4f       	sbci	r25, 0xFD	; 253
    c086:	21 e0       	ldi	r18, 0x01	; 1
    c088:	30 e0       	ldi	r19, 0x00	; 0
    c08a:	fc 01       	movw	r30, r24
    c08c:	31 83       	std	Z+1, r19	; 0x01
    c08e:	20 83       	st	Z, r18
    c090:	74 c0       	rjmp	.+232    	; 0xc17a <pick_drop+0x54c8>
	else if (__tmp > 65535)
    c092:	ce 01       	movw	r24, r28
    c094:	8f 53       	subi	r24, 0x3F	; 63
    c096:	9d 4f       	sbci	r25, 0xFD	; 253
    c098:	11 e0       	ldi	r17, 0x01	; 1
    c09a:	fc 01       	movw	r30, r24
    c09c:	60 81       	ld	r22, Z
    c09e:	71 81       	ldd	r23, Z+1	; 0x01
    c0a0:	82 81       	ldd	r24, Z+2	; 0x02
    c0a2:	93 81       	ldd	r25, Z+3	; 0x03
    c0a4:	20 e0       	ldi	r18, 0x00	; 0
    c0a6:	3f ef       	ldi	r19, 0xFF	; 255
    c0a8:	4f e7       	ldi	r20, 0x7F	; 127
    c0aa:	57 e4       	ldi	r21, 0x47	; 71
    c0ac:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    c0b0:	18 16       	cp	r1, r24
    c0b2:	0c f0       	brlt	.+2      	; 0xc0b6 <pick_drop+0x5404>
    c0b4:	10 e0       	ldi	r17, 0x00	; 0
    c0b6:	11 23       	and	r17, r17
    c0b8:	09 f4       	brne	.+2      	; 0xc0bc <pick_drop+0x540a>
    c0ba:	4d c0       	rjmp	.+154    	; 0xc156 <pick_drop+0x54a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c0bc:	ce 01       	movw	r24, r28
    c0be:	83 54       	subi	r24, 0x43	; 67
    c0c0:	9d 4f       	sbci	r25, 0xFD	; 253
    c0c2:	fc 01       	movw	r30, r24
    c0c4:	60 81       	ld	r22, Z
    c0c6:	71 81       	ldd	r23, Z+1	; 0x01
    c0c8:	82 81       	ldd	r24, Z+2	; 0x02
    c0ca:	93 81       	ldd	r25, Z+3	; 0x03
    c0cc:	20 e0       	ldi	r18, 0x00	; 0
    c0ce:	30 e0       	ldi	r19, 0x00	; 0
    c0d0:	40 e2       	ldi	r20, 0x20	; 32
    c0d2:	51 e4       	ldi	r21, 0x41	; 65
    c0d4:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c0d8:	dc 01       	movw	r26, r24
    c0da:	cb 01       	movw	r24, r22
    c0dc:	8e 01       	movw	r16, r28
    c0de:	0b 53       	subi	r16, 0x3B	; 59
    c0e0:	1d 4f       	sbci	r17, 0xFD	; 253
    c0e2:	bc 01       	movw	r22, r24
    c0e4:	cd 01       	movw	r24, r26
    c0e6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c0ea:	dc 01       	movw	r26, r24
    c0ec:	cb 01       	movw	r24, r22
    c0ee:	f8 01       	movw	r30, r16
    c0f0:	91 83       	std	Z+1, r25	; 0x01
    c0f2:	80 83       	st	Z, r24
    c0f4:	27 c0       	rjmp	.+78     	; 0xc144 <pick_drop+0x5492>
    c0f6:	ce 01       	movw	r24, r28
    c0f8:	89 53       	subi	r24, 0x39	; 57
    c0fa:	9d 4f       	sbci	r25, 0xFD	; 253
    c0fc:	20 e7       	ldi	r18, 0x70	; 112
    c0fe:	31 e0       	ldi	r19, 0x01	; 1
    c100:	fc 01       	movw	r30, r24
    c102:	31 83       	std	Z+1, r19	; 0x01
    c104:	20 83       	st	Z, r18
    c106:	ce 01       	movw	r24, r28
    c108:	89 53       	subi	r24, 0x39	; 57
    c10a:	9d 4f       	sbci	r25, 0xFD	; 253
    c10c:	fc 01       	movw	r30, r24
    c10e:	80 81       	ld	r24, Z
    c110:	91 81       	ldd	r25, Z+1	; 0x01
    c112:	8c 01       	movw	r16, r24
    c114:	c8 01       	movw	r24, r16
    c116:	01 97       	sbiw	r24, 0x01	; 1
    c118:	f1 f7       	brne	.-4      	; 0xc116 <pick_drop+0x5464>
    c11a:	8c 01       	movw	r16, r24
    c11c:	ce 01       	movw	r24, r28
    c11e:	89 53       	subi	r24, 0x39	; 57
    c120:	9d 4f       	sbci	r25, 0xFD	; 253
    c122:	fc 01       	movw	r30, r24
    c124:	11 83       	std	Z+1, r17	; 0x01
    c126:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c128:	ce 01       	movw	r24, r28
    c12a:	8b 53       	subi	r24, 0x3B	; 59
    c12c:	9d 4f       	sbci	r25, 0xFD	; 253
    c12e:	9e 01       	movw	r18, r28
    c130:	2b 53       	subi	r18, 0x3B	; 59
    c132:	3d 4f       	sbci	r19, 0xFD	; 253
    c134:	f9 01       	movw	r30, r18
    c136:	20 81       	ld	r18, Z
    c138:	31 81       	ldd	r19, Z+1	; 0x01
    c13a:	21 50       	subi	r18, 0x01	; 1
    c13c:	30 40       	sbci	r19, 0x00	; 0
    c13e:	fc 01       	movw	r30, r24
    c140:	31 83       	std	Z+1, r19	; 0x01
    c142:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c144:	ce 01       	movw	r24, r28
    c146:	8b 53       	subi	r24, 0x3B	; 59
    c148:	9d 4f       	sbci	r25, 0xFD	; 253
    c14a:	fc 01       	movw	r30, r24
    c14c:	80 81       	ld	r24, Z
    c14e:	91 81       	ldd	r25, Z+1	; 0x01
    c150:	00 97       	sbiw	r24, 0x00	; 0
    c152:	89 f6       	brne	.-94     	; 0xc0f6 <pick_drop+0x5444>
    c154:	e2 c1       	rjmp	.+964    	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c156:	8e 01       	movw	r16, r28
    c158:	0b 53       	subi	r16, 0x3B	; 59
    c15a:	1d 4f       	sbci	r17, 0xFD	; 253
    c15c:	ce 01       	movw	r24, r28
    c15e:	8f 53       	subi	r24, 0x3F	; 63
    c160:	9d 4f       	sbci	r25, 0xFD	; 253
    c162:	fc 01       	movw	r30, r24
    c164:	60 81       	ld	r22, Z
    c166:	71 81       	ldd	r23, Z+1	; 0x01
    c168:	82 81       	ldd	r24, Z+2	; 0x02
    c16a:	93 81       	ldd	r25, Z+3	; 0x03
    c16c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c170:	dc 01       	movw	r26, r24
    c172:	cb 01       	movw	r24, r22
    c174:	f8 01       	movw	r30, r16
    c176:	91 83       	std	Z+1, r25	; 0x01
    c178:	80 83       	st	Z, r24
    c17a:	ce 01       	movw	r24, r28
    c17c:	87 53       	subi	r24, 0x37	; 55
    c17e:	9d 4f       	sbci	r25, 0xFD	; 253
    c180:	9e 01       	movw	r18, r28
    c182:	2b 53       	subi	r18, 0x3B	; 59
    c184:	3d 4f       	sbci	r19, 0xFD	; 253
    c186:	f9 01       	movw	r30, r18
    c188:	20 81       	ld	r18, Z
    c18a:	31 81       	ldd	r19, Z+1	; 0x01
    c18c:	fc 01       	movw	r30, r24
    c18e:	31 83       	std	Z+1, r19	; 0x01
    c190:	20 83       	st	Z, r18
    c192:	ce 01       	movw	r24, r28
    c194:	87 53       	subi	r24, 0x37	; 55
    c196:	9d 4f       	sbci	r25, 0xFD	; 253
    c198:	fc 01       	movw	r30, r24
    c19a:	80 81       	ld	r24, Z
    c19c:	91 81       	ldd	r25, Z+1	; 0x01
    c19e:	8c 01       	movw	r16, r24
    c1a0:	c8 01       	movw	r24, r16
    c1a2:	01 97       	sbiw	r24, 0x01	; 1
    c1a4:	f1 f7       	brne	.-4      	; 0xc1a2 <pick_drop+0x54f0>
    c1a6:	8c 01       	movw	r16, r24
    c1a8:	ce 01       	movw	r24, r28
    c1aa:	87 53       	subi	r24, 0x37	; 55
    c1ac:	9d 4f       	sbci	r25, 0xFD	; 253
    c1ae:	fc 01       	movw	r30, r24
    c1b0:	11 83       	std	Z+1, r17	; 0x01
    c1b2:	00 83       	st	Z, r16
    c1b4:	b2 c1       	rjmp	.+868    	; 0xc51a <pick_drop+0x5868>
					_delay_ms(20);
				}
		}
			else if(pd=='8'){
    c1b6:	ce 01       	movw	r24, r28
    c1b8:	89 51       	subi	r24, 0x19	; 25
    c1ba:	9d 4f       	sbci	r25, 0xFD	; 253
    c1bc:	fc 01       	movw	r30, r24
    c1be:	80 81       	ld	r24, Z
    c1c0:	88 33       	cpi	r24, 0x38	; 56
    c1c2:	09 f0       	breq	.+2      	; 0xc1c6 <pick_drop+0x5514>
    c1c4:	aa c1       	rjmp	.+852    	; 0xc51a <pick_drop+0x5868>
				front();
    c1c6:	0e 94 52 30 	call	0x60a4	; 0x60a4 <front>
    c1ca:	9e 01       	movw	r18, r28
    c1cc:	25 53       	subi	r18, 0x35	; 53
    c1ce:	3d 4f       	sbci	r19, 0xFD	; 253
    c1d0:	80 e0       	ldi	r24, 0x00	; 0
    c1d2:	90 e0       	ldi	r25, 0x00	; 0
    c1d4:	a8 ec       	ldi	r26, 0xC8	; 200
    c1d6:	b2 e4       	ldi	r27, 0x42	; 66
    c1d8:	f9 01       	movw	r30, r18
    c1da:	80 83       	st	Z, r24
    c1dc:	91 83       	std	Z+1, r25	; 0x01
    c1de:	a2 83       	std	Z+2, r26	; 0x02
    c1e0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c1e2:	8e 01       	movw	r16, r28
    c1e4:	01 53       	subi	r16, 0x31	; 49
    c1e6:	1d 4f       	sbci	r17, 0xFD	; 253
    c1e8:	ce 01       	movw	r24, r28
    c1ea:	85 53       	subi	r24, 0x35	; 53
    c1ec:	9d 4f       	sbci	r25, 0xFD	; 253
    c1ee:	fc 01       	movw	r30, r24
    c1f0:	60 81       	ld	r22, Z
    c1f2:	71 81       	ldd	r23, Z+1	; 0x01
    c1f4:	82 81       	ldd	r24, Z+2	; 0x02
    c1f6:	93 81       	ldd	r25, Z+3	; 0x03
    c1f8:	26 e6       	ldi	r18, 0x66	; 102
    c1fa:	36 e6       	ldi	r19, 0x66	; 102
    c1fc:	46 e6       	ldi	r20, 0x66	; 102
    c1fe:	55 e4       	ldi	r21, 0x45	; 69
    c200:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c204:	dc 01       	movw	r26, r24
    c206:	cb 01       	movw	r24, r22
    c208:	f8 01       	movw	r30, r16
    c20a:	80 83       	st	Z, r24
    c20c:	91 83       	std	Z+1, r25	; 0x01
    c20e:	a2 83       	std	Z+2, r26	; 0x02
    c210:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c212:	ce 01       	movw	r24, r28
    c214:	81 53       	subi	r24, 0x31	; 49
    c216:	9d 4f       	sbci	r25, 0xFD	; 253
    c218:	11 e0       	ldi	r17, 0x01	; 1
    c21a:	fc 01       	movw	r30, r24
    c21c:	60 81       	ld	r22, Z
    c21e:	71 81       	ldd	r23, Z+1	; 0x01
    c220:	82 81       	ldd	r24, Z+2	; 0x02
    c222:	93 81       	ldd	r25, Z+3	; 0x03
    c224:	20 e0       	ldi	r18, 0x00	; 0
    c226:	30 e0       	ldi	r19, 0x00	; 0
    c228:	40 e8       	ldi	r20, 0x80	; 128
    c22a:	5f e3       	ldi	r21, 0x3F	; 63
    c22c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    c230:	88 23       	and	r24, r24
    c232:	0c f0       	brlt	.+2      	; 0xc236 <pick_drop+0x5584>
    c234:	10 e0       	ldi	r17, 0x00	; 0
    c236:	11 23       	and	r17, r17
    c238:	49 f0       	breq	.+18     	; 0xc24c <pick_drop+0x559a>
		__ticks = 1;
    c23a:	ce 01       	movw	r24, r28
    c23c:	8d 52       	subi	r24, 0x2D	; 45
    c23e:	9d 4f       	sbci	r25, 0xFD	; 253
    c240:	21 e0       	ldi	r18, 0x01	; 1
    c242:	30 e0       	ldi	r19, 0x00	; 0
    c244:	fc 01       	movw	r30, r24
    c246:	31 83       	std	Z+1, r19	; 0x01
    c248:	20 83       	st	Z, r18
    c24a:	74 c0       	rjmp	.+232    	; 0xc334 <pick_drop+0x5682>
	else if (__tmp > 65535)
    c24c:	ce 01       	movw	r24, r28
    c24e:	81 53       	subi	r24, 0x31	; 49
    c250:	9d 4f       	sbci	r25, 0xFD	; 253
    c252:	11 e0       	ldi	r17, 0x01	; 1
    c254:	fc 01       	movw	r30, r24
    c256:	60 81       	ld	r22, Z
    c258:	71 81       	ldd	r23, Z+1	; 0x01
    c25a:	82 81       	ldd	r24, Z+2	; 0x02
    c25c:	93 81       	ldd	r25, Z+3	; 0x03
    c25e:	20 e0       	ldi	r18, 0x00	; 0
    c260:	3f ef       	ldi	r19, 0xFF	; 255
    c262:	4f e7       	ldi	r20, 0x7F	; 127
    c264:	57 e4       	ldi	r21, 0x47	; 71
    c266:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    c26a:	18 16       	cp	r1, r24
    c26c:	0c f0       	brlt	.+2      	; 0xc270 <pick_drop+0x55be>
    c26e:	10 e0       	ldi	r17, 0x00	; 0
    c270:	11 23       	and	r17, r17
    c272:	09 f4       	brne	.+2      	; 0xc276 <pick_drop+0x55c4>
    c274:	4d c0       	rjmp	.+154    	; 0xc310 <pick_drop+0x565e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c276:	ce 01       	movw	r24, r28
    c278:	85 53       	subi	r24, 0x35	; 53
    c27a:	9d 4f       	sbci	r25, 0xFD	; 253
    c27c:	fc 01       	movw	r30, r24
    c27e:	60 81       	ld	r22, Z
    c280:	71 81       	ldd	r23, Z+1	; 0x01
    c282:	82 81       	ldd	r24, Z+2	; 0x02
    c284:	93 81       	ldd	r25, Z+3	; 0x03
    c286:	20 e0       	ldi	r18, 0x00	; 0
    c288:	30 e0       	ldi	r19, 0x00	; 0
    c28a:	40 e2       	ldi	r20, 0x20	; 32
    c28c:	51 e4       	ldi	r21, 0x41	; 65
    c28e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c292:	dc 01       	movw	r26, r24
    c294:	cb 01       	movw	r24, r22
    c296:	8e 01       	movw	r16, r28
    c298:	0d 52       	subi	r16, 0x2D	; 45
    c29a:	1d 4f       	sbci	r17, 0xFD	; 253
    c29c:	bc 01       	movw	r22, r24
    c29e:	cd 01       	movw	r24, r26
    c2a0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c2a4:	dc 01       	movw	r26, r24
    c2a6:	cb 01       	movw	r24, r22
    c2a8:	f8 01       	movw	r30, r16
    c2aa:	91 83       	std	Z+1, r25	; 0x01
    c2ac:	80 83       	st	Z, r24
    c2ae:	27 c0       	rjmp	.+78     	; 0xc2fe <pick_drop+0x564c>
    c2b0:	ce 01       	movw	r24, r28
    c2b2:	8b 52       	subi	r24, 0x2B	; 43
    c2b4:	9d 4f       	sbci	r25, 0xFD	; 253
    c2b6:	20 e7       	ldi	r18, 0x70	; 112
    c2b8:	31 e0       	ldi	r19, 0x01	; 1
    c2ba:	fc 01       	movw	r30, r24
    c2bc:	31 83       	std	Z+1, r19	; 0x01
    c2be:	20 83       	st	Z, r18
    c2c0:	ce 01       	movw	r24, r28
    c2c2:	8b 52       	subi	r24, 0x2B	; 43
    c2c4:	9d 4f       	sbci	r25, 0xFD	; 253
    c2c6:	fc 01       	movw	r30, r24
    c2c8:	80 81       	ld	r24, Z
    c2ca:	91 81       	ldd	r25, Z+1	; 0x01
    c2cc:	8c 01       	movw	r16, r24
    c2ce:	c8 01       	movw	r24, r16
    c2d0:	01 97       	sbiw	r24, 0x01	; 1
    c2d2:	f1 f7       	brne	.-4      	; 0xc2d0 <pick_drop+0x561e>
    c2d4:	8c 01       	movw	r16, r24
    c2d6:	ce 01       	movw	r24, r28
    c2d8:	8b 52       	subi	r24, 0x2B	; 43
    c2da:	9d 4f       	sbci	r25, 0xFD	; 253
    c2dc:	fc 01       	movw	r30, r24
    c2de:	11 83       	std	Z+1, r17	; 0x01
    c2e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c2e2:	ce 01       	movw	r24, r28
    c2e4:	8d 52       	subi	r24, 0x2D	; 45
    c2e6:	9d 4f       	sbci	r25, 0xFD	; 253
    c2e8:	9e 01       	movw	r18, r28
    c2ea:	2d 52       	subi	r18, 0x2D	; 45
    c2ec:	3d 4f       	sbci	r19, 0xFD	; 253
    c2ee:	f9 01       	movw	r30, r18
    c2f0:	20 81       	ld	r18, Z
    c2f2:	31 81       	ldd	r19, Z+1	; 0x01
    c2f4:	21 50       	subi	r18, 0x01	; 1
    c2f6:	30 40       	sbci	r19, 0x00	; 0
    c2f8:	fc 01       	movw	r30, r24
    c2fa:	31 83       	std	Z+1, r19	; 0x01
    c2fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c2fe:	ce 01       	movw	r24, r28
    c300:	8d 52       	subi	r24, 0x2D	; 45
    c302:	9d 4f       	sbci	r25, 0xFD	; 253
    c304:	fc 01       	movw	r30, r24
    c306:	80 81       	ld	r24, Z
    c308:	91 81       	ldd	r25, Z+1	; 0x01
    c30a:	00 97       	sbiw	r24, 0x00	; 0
    c30c:	89 f6       	brne	.-94     	; 0xc2b0 <pick_drop+0x55fe>
    c30e:	2f c0       	rjmp	.+94     	; 0xc36e <pick_drop+0x56bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c310:	8e 01       	movw	r16, r28
    c312:	0d 52       	subi	r16, 0x2D	; 45
    c314:	1d 4f       	sbci	r17, 0xFD	; 253
    c316:	ce 01       	movw	r24, r28
    c318:	81 53       	subi	r24, 0x31	; 49
    c31a:	9d 4f       	sbci	r25, 0xFD	; 253
    c31c:	fc 01       	movw	r30, r24
    c31e:	60 81       	ld	r22, Z
    c320:	71 81       	ldd	r23, Z+1	; 0x01
    c322:	82 81       	ldd	r24, Z+2	; 0x02
    c324:	93 81       	ldd	r25, Z+3	; 0x03
    c326:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c32a:	dc 01       	movw	r26, r24
    c32c:	cb 01       	movw	r24, r22
    c32e:	f8 01       	movw	r30, r16
    c330:	91 83       	std	Z+1, r25	; 0x01
    c332:	80 83       	st	Z, r24
    c334:	ce 01       	movw	r24, r28
    c336:	89 52       	subi	r24, 0x29	; 41
    c338:	9d 4f       	sbci	r25, 0xFD	; 253
    c33a:	9e 01       	movw	r18, r28
    c33c:	2d 52       	subi	r18, 0x2D	; 45
    c33e:	3d 4f       	sbci	r19, 0xFD	; 253
    c340:	f9 01       	movw	r30, r18
    c342:	20 81       	ld	r18, Z
    c344:	31 81       	ldd	r19, Z+1	; 0x01
    c346:	fc 01       	movw	r30, r24
    c348:	31 83       	std	Z+1, r19	; 0x01
    c34a:	20 83       	st	Z, r18
    c34c:	ce 01       	movw	r24, r28
    c34e:	89 52       	subi	r24, 0x29	; 41
    c350:	9d 4f       	sbci	r25, 0xFD	; 253
    c352:	fc 01       	movw	r30, r24
    c354:	80 81       	ld	r24, Z
    c356:	91 81       	ldd	r25, Z+1	; 0x01
    c358:	8c 01       	movw	r16, r24
    c35a:	c8 01       	movw	r24, r16
    c35c:	01 97       	sbiw	r24, 0x01	; 1
    c35e:	f1 f7       	brne	.-4      	; 0xc35c <pick_drop+0x56aa>
    c360:	8c 01       	movw	r16, r24
    c362:	ce 01       	movw	r24, r28
    c364:	89 52       	subi	r24, 0x29	; 41
    c366:	9d 4f       	sbci	r25, 0xFD	; 253
    c368:	fc 01       	movw	r30, r24
    c36a:	11 83       	std	Z+1, r17	; 0x01
    c36c:	00 83       	st	Z, r16
				_delay_ms(100);
				forward_mm(60);
    c36e:	8c e3       	ldi	r24, 0x3C	; 60
    c370:	90 e0       	ldi	r25, 0x00	; 0
    c372:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    c376:	9e 01       	movw	r18, r28
    c378:	27 52       	subi	r18, 0x27	; 39
    c37a:	3d 4f       	sbci	r19, 0xFD	; 253
    c37c:	80 e0       	ldi	r24, 0x00	; 0
    c37e:	90 e0       	ldi	r25, 0x00	; 0
    c380:	a0 ea       	ldi	r26, 0xA0	; 160
    c382:	b1 e4       	ldi	r27, 0x41	; 65
    c384:	f9 01       	movw	r30, r18
    c386:	80 83       	st	Z, r24
    c388:	91 83       	std	Z+1, r25	; 0x01
    c38a:	a2 83       	std	Z+2, r26	; 0x02
    c38c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c38e:	8e 01       	movw	r16, r28
    c390:	03 52       	subi	r16, 0x23	; 35
    c392:	1d 4f       	sbci	r17, 0xFD	; 253
    c394:	ce 01       	movw	r24, r28
    c396:	87 52       	subi	r24, 0x27	; 39
    c398:	9d 4f       	sbci	r25, 0xFD	; 253
    c39a:	fc 01       	movw	r30, r24
    c39c:	60 81       	ld	r22, Z
    c39e:	71 81       	ldd	r23, Z+1	; 0x01
    c3a0:	82 81       	ldd	r24, Z+2	; 0x02
    c3a2:	93 81       	ldd	r25, Z+3	; 0x03
    c3a4:	26 e6       	ldi	r18, 0x66	; 102
    c3a6:	36 e6       	ldi	r19, 0x66	; 102
    c3a8:	46 e6       	ldi	r20, 0x66	; 102
    c3aa:	55 e4       	ldi	r21, 0x45	; 69
    c3ac:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c3b0:	dc 01       	movw	r26, r24
    c3b2:	cb 01       	movw	r24, r22
    c3b4:	f8 01       	movw	r30, r16
    c3b6:	80 83       	st	Z, r24
    c3b8:	91 83       	std	Z+1, r25	; 0x01
    c3ba:	a2 83       	std	Z+2, r26	; 0x02
    c3bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c3be:	ce 01       	movw	r24, r28
    c3c0:	83 52       	subi	r24, 0x23	; 35
    c3c2:	9d 4f       	sbci	r25, 0xFD	; 253
    c3c4:	11 e0       	ldi	r17, 0x01	; 1
    c3c6:	fc 01       	movw	r30, r24
    c3c8:	60 81       	ld	r22, Z
    c3ca:	71 81       	ldd	r23, Z+1	; 0x01
    c3cc:	82 81       	ldd	r24, Z+2	; 0x02
    c3ce:	93 81       	ldd	r25, Z+3	; 0x03
    c3d0:	20 e0       	ldi	r18, 0x00	; 0
    c3d2:	30 e0       	ldi	r19, 0x00	; 0
    c3d4:	40 e8       	ldi	r20, 0x80	; 128
    c3d6:	5f e3       	ldi	r21, 0x3F	; 63
    c3d8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    c3dc:	88 23       	and	r24, r24
    c3de:	0c f0       	brlt	.+2      	; 0xc3e2 <pick_drop+0x5730>
    c3e0:	10 e0       	ldi	r17, 0x00	; 0
    c3e2:	11 23       	and	r17, r17
    c3e4:	49 f0       	breq	.+18     	; 0xc3f8 <pick_drop+0x5746>
		__ticks = 1;
    c3e6:	ce 01       	movw	r24, r28
    c3e8:	8f 51       	subi	r24, 0x1F	; 31
    c3ea:	9d 4f       	sbci	r25, 0xFD	; 253
    c3ec:	21 e0       	ldi	r18, 0x01	; 1
    c3ee:	30 e0       	ldi	r19, 0x00	; 0
    c3f0:	fc 01       	movw	r30, r24
    c3f2:	31 83       	std	Z+1, r19	; 0x01
    c3f4:	20 83       	st	Z, r18
    c3f6:	74 c0       	rjmp	.+232    	; 0xc4e0 <pick_drop+0x582e>
	else if (__tmp > 65535)
    c3f8:	ce 01       	movw	r24, r28
    c3fa:	83 52       	subi	r24, 0x23	; 35
    c3fc:	9d 4f       	sbci	r25, 0xFD	; 253
    c3fe:	11 e0       	ldi	r17, 0x01	; 1
    c400:	fc 01       	movw	r30, r24
    c402:	60 81       	ld	r22, Z
    c404:	71 81       	ldd	r23, Z+1	; 0x01
    c406:	82 81       	ldd	r24, Z+2	; 0x02
    c408:	93 81       	ldd	r25, Z+3	; 0x03
    c40a:	20 e0       	ldi	r18, 0x00	; 0
    c40c:	3f ef       	ldi	r19, 0xFF	; 255
    c40e:	4f e7       	ldi	r20, 0x7F	; 127
    c410:	57 e4       	ldi	r21, 0x47	; 71
    c412:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    c416:	18 16       	cp	r1, r24
    c418:	0c f0       	brlt	.+2      	; 0xc41c <pick_drop+0x576a>
    c41a:	10 e0       	ldi	r17, 0x00	; 0
    c41c:	11 23       	and	r17, r17
    c41e:	09 f4       	brne	.+2      	; 0xc422 <pick_drop+0x5770>
    c420:	4d c0       	rjmp	.+154    	; 0xc4bc <pick_drop+0x580a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c422:	ce 01       	movw	r24, r28
    c424:	87 52       	subi	r24, 0x27	; 39
    c426:	9d 4f       	sbci	r25, 0xFD	; 253
    c428:	fc 01       	movw	r30, r24
    c42a:	60 81       	ld	r22, Z
    c42c:	71 81       	ldd	r23, Z+1	; 0x01
    c42e:	82 81       	ldd	r24, Z+2	; 0x02
    c430:	93 81       	ldd	r25, Z+3	; 0x03
    c432:	20 e0       	ldi	r18, 0x00	; 0
    c434:	30 e0       	ldi	r19, 0x00	; 0
    c436:	40 e2       	ldi	r20, 0x20	; 32
    c438:	51 e4       	ldi	r21, 0x41	; 65
    c43a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c43e:	dc 01       	movw	r26, r24
    c440:	cb 01       	movw	r24, r22
    c442:	8e 01       	movw	r16, r28
    c444:	0f 51       	subi	r16, 0x1F	; 31
    c446:	1d 4f       	sbci	r17, 0xFD	; 253
    c448:	bc 01       	movw	r22, r24
    c44a:	cd 01       	movw	r24, r26
    c44c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c450:	dc 01       	movw	r26, r24
    c452:	cb 01       	movw	r24, r22
    c454:	f8 01       	movw	r30, r16
    c456:	91 83       	std	Z+1, r25	; 0x01
    c458:	80 83       	st	Z, r24
    c45a:	27 c0       	rjmp	.+78     	; 0xc4aa <pick_drop+0x57f8>
    c45c:	ce 01       	movw	r24, r28
    c45e:	8d 51       	subi	r24, 0x1D	; 29
    c460:	9d 4f       	sbci	r25, 0xFD	; 253
    c462:	20 e7       	ldi	r18, 0x70	; 112
    c464:	31 e0       	ldi	r19, 0x01	; 1
    c466:	fc 01       	movw	r30, r24
    c468:	31 83       	std	Z+1, r19	; 0x01
    c46a:	20 83       	st	Z, r18
    c46c:	ce 01       	movw	r24, r28
    c46e:	8d 51       	subi	r24, 0x1D	; 29
    c470:	9d 4f       	sbci	r25, 0xFD	; 253
    c472:	fc 01       	movw	r30, r24
    c474:	80 81       	ld	r24, Z
    c476:	91 81       	ldd	r25, Z+1	; 0x01
    c478:	8c 01       	movw	r16, r24
    c47a:	c8 01       	movw	r24, r16
    c47c:	01 97       	sbiw	r24, 0x01	; 1
    c47e:	f1 f7       	brne	.-4      	; 0xc47c <pick_drop+0x57ca>
    c480:	8c 01       	movw	r16, r24
    c482:	ce 01       	movw	r24, r28
    c484:	8d 51       	subi	r24, 0x1D	; 29
    c486:	9d 4f       	sbci	r25, 0xFD	; 253
    c488:	fc 01       	movw	r30, r24
    c48a:	11 83       	std	Z+1, r17	; 0x01
    c48c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c48e:	ce 01       	movw	r24, r28
    c490:	8f 51       	subi	r24, 0x1F	; 31
    c492:	9d 4f       	sbci	r25, 0xFD	; 253
    c494:	9e 01       	movw	r18, r28
    c496:	2f 51       	subi	r18, 0x1F	; 31
    c498:	3d 4f       	sbci	r19, 0xFD	; 253
    c49a:	f9 01       	movw	r30, r18
    c49c:	20 81       	ld	r18, Z
    c49e:	31 81       	ldd	r19, Z+1	; 0x01
    c4a0:	21 50       	subi	r18, 0x01	; 1
    c4a2:	30 40       	sbci	r19, 0x00	; 0
    c4a4:	fc 01       	movw	r30, r24
    c4a6:	31 83       	std	Z+1, r19	; 0x01
    c4a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c4aa:	ce 01       	movw	r24, r28
    c4ac:	8f 51       	subi	r24, 0x1F	; 31
    c4ae:	9d 4f       	sbci	r25, 0xFD	; 253
    c4b0:	fc 01       	movw	r30, r24
    c4b2:	80 81       	ld	r24, Z
    c4b4:	91 81       	ldd	r25, Z+1	; 0x01
    c4b6:	00 97       	sbiw	r24, 0x00	; 0
    c4b8:	89 f6       	brne	.-94     	; 0xc45c <pick_drop+0x57aa>
    c4ba:	2f c0       	rjmp	.+94     	; 0xc51a <pick_drop+0x5868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c4bc:	8e 01       	movw	r16, r28
    c4be:	0f 51       	subi	r16, 0x1F	; 31
    c4c0:	1d 4f       	sbci	r17, 0xFD	; 253
    c4c2:	ce 01       	movw	r24, r28
    c4c4:	83 52       	subi	r24, 0x23	; 35
    c4c6:	9d 4f       	sbci	r25, 0xFD	; 253
    c4c8:	fc 01       	movw	r30, r24
    c4ca:	60 81       	ld	r22, Z
    c4cc:	71 81       	ldd	r23, Z+1	; 0x01
    c4ce:	82 81       	ldd	r24, Z+2	; 0x02
    c4d0:	93 81       	ldd	r25, Z+3	; 0x03
    c4d2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c4d6:	dc 01       	movw	r26, r24
    c4d8:	cb 01       	movw	r24, r22
    c4da:	f8 01       	movw	r30, r16
    c4dc:	91 83       	std	Z+1, r25	; 0x01
    c4de:	80 83       	st	Z, r24
    c4e0:	ce 01       	movw	r24, r28
    c4e2:	8b 51       	subi	r24, 0x1B	; 27
    c4e4:	9d 4f       	sbci	r25, 0xFD	; 253
    c4e6:	9e 01       	movw	r18, r28
    c4e8:	2f 51       	subi	r18, 0x1F	; 31
    c4ea:	3d 4f       	sbci	r19, 0xFD	; 253
    c4ec:	f9 01       	movw	r30, r18
    c4ee:	20 81       	ld	r18, Z
    c4f0:	31 81       	ldd	r19, Z+1	; 0x01
    c4f2:	fc 01       	movw	r30, r24
    c4f4:	31 83       	std	Z+1, r19	; 0x01
    c4f6:	20 83       	st	Z, r18
    c4f8:	ce 01       	movw	r24, r28
    c4fa:	8b 51       	subi	r24, 0x1B	; 27
    c4fc:	9d 4f       	sbci	r25, 0xFD	; 253
    c4fe:	fc 01       	movw	r30, r24
    c500:	80 81       	ld	r24, Z
    c502:	91 81       	ldd	r25, Z+1	; 0x01
    c504:	8c 01       	movw	r16, r24
    c506:	c8 01       	movw	r24, r16
    c508:	01 97       	sbiw	r24, 0x01	; 1
    c50a:	f1 f7       	brne	.-4      	; 0xc508 <pick_drop+0x5856>
    c50c:	8c 01       	movw	r16, r24
    c50e:	ce 01       	movw	r24, r28
    c510:	8b 51       	subi	r24, 0x1B	; 27
    c512:	9d 4f       	sbci	r25, 0xFD	; 253
    c514:	fc 01       	movw	r30, r24
    c516:	11 83       	std	Z+1, r17	; 0x01
    c518:	00 83       	st	Z, r16
				_delay_ms(20);
			}
defaulty();
    c51a:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <defaulty>
}
    c51e:	c9 51       	subi	r28, 0x19	; 25
    c520:	dd 4f       	sbci	r29, 0xFD	; 253
    c522:	0f b6       	in	r0, 0x3f	; 63
    c524:	f8 94       	cli
    c526:	de bf       	out	0x3e, r29	; 62
    c528:	0f be       	out	0x3f, r0	; 63
    c52a:	cd bf       	out	0x3d, r28	; 61
    c52c:	df 91       	pop	r29
    c52e:	cf 91       	pop	r28
    c530:	1f 91       	pop	r17
    c532:	0f 91       	pop	r16
    c534:	08 95       	ret

0000c536 <travel_path>:
void travel_path(char pos_val)
{   TIMSK3=0;
    c536:	0f 93       	push	r16
    c538:	1f 93       	push	r17
    c53a:	cf 93       	push	r28
    c53c:	df 93       	push	r29
    c53e:	cd b7       	in	r28, 0x3d	; 61
    c540:	de b7       	in	r29, 0x3e	; 62
    c542:	c7 5b       	subi	r28, 0xB7	; 183
    c544:	d0 40       	sbci	r29, 0x00	; 0
    c546:	0f b6       	in	r0, 0x3f	; 63
    c548:	f8 94       	cli
    c54a:	de bf       	out	0x3e, r29	; 62
    c54c:	0f be       	out	0x3f, r0	; 63
    c54e:	cd bf       	out	0x3d, r28	; 61
    c550:	9e 01       	movw	r18, r28
    c552:	29 54       	subi	r18, 0x49	; 73
    c554:	3f 4f       	sbci	r19, 0xFF	; 255
    c556:	f9 01       	movw	r30, r18
    c558:	80 83       	st	Z, r24
    c55a:	81 e7       	ldi	r24, 0x71	; 113
    c55c:	90 e0       	ldi	r25, 0x00	; 0
    c55e:	fc 01       	movw	r30, r24
    c560:	10 82       	st	Z, r1
	halt=1;
    c562:	81 e0       	ldi	r24, 0x01	; 1
    c564:	90 e0       	ldi	r25, 0x00	; 0
    c566:	90 93 70 03 	sts	0x0370, r25
    c56a:	80 93 6f 03 	sts	0x036F, r24
	stop();
    c56e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    c572:	80 e0       	ldi	r24, 0x00	; 0
    c574:	90 e0       	ldi	r25, 0x00	; 0
    c576:	a0 ea       	ldi	r26, 0xA0	; 160
    c578:	b1 e4       	ldi	r27, 0x41	; 65
    c57a:	89 83       	std	Y+1, r24	; 0x01
    c57c:	9a 83       	std	Y+2, r25	; 0x02
    c57e:	ab 83       	std	Y+3, r26	; 0x03
    c580:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c582:	69 81       	ldd	r22, Y+1	; 0x01
    c584:	7a 81       	ldd	r23, Y+2	; 0x02
    c586:	8b 81       	ldd	r24, Y+3	; 0x03
    c588:	9c 81       	ldd	r25, Y+4	; 0x04
    c58a:	26 e6       	ldi	r18, 0x66	; 102
    c58c:	36 e6       	ldi	r19, 0x66	; 102
    c58e:	46 e6       	ldi	r20, 0x66	; 102
    c590:	55 e4       	ldi	r21, 0x45	; 69
    c592:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c596:	dc 01       	movw	r26, r24
    c598:	cb 01       	movw	r24, r22
    c59a:	8d 83       	std	Y+5, r24	; 0x05
    c59c:	9e 83       	std	Y+6, r25	; 0x06
    c59e:	af 83       	std	Y+7, r26	; 0x07
    c5a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    c5a2:	11 e0       	ldi	r17, 0x01	; 1
    c5a4:	6d 81       	ldd	r22, Y+5	; 0x05
    c5a6:	7e 81       	ldd	r23, Y+6	; 0x06
    c5a8:	8f 81       	ldd	r24, Y+7	; 0x07
    c5aa:	98 85       	ldd	r25, Y+8	; 0x08
    c5ac:	20 e0       	ldi	r18, 0x00	; 0
    c5ae:	30 e0       	ldi	r19, 0x00	; 0
    c5b0:	40 e8       	ldi	r20, 0x80	; 128
    c5b2:	5f e3       	ldi	r21, 0x3F	; 63
    c5b4:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    c5b8:	88 23       	and	r24, r24
    c5ba:	0c f0       	brlt	.+2      	; 0xc5be <travel_path+0x88>
    c5bc:	10 e0       	ldi	r17, 0x00	; 0
    c5be:	11 23       	and	r17, r17
    c5c0:	29 f0       	breq	.+10     	; 0xc5cc <travel_path+0x96>
		__ticks = 1;
    c5c2:	81 e0       	ldi	r24, 0x01	; 1
    c5c4:	90 e0       	ldi	r25, 0x00	; 0
    c5c6:	9a 87       	std	Y+10, r25	; 0x0a
    c5c8:	89 87       	std	Y+9, r24	; 0x09
    c5ca:	46 c0       	rjmp	.+140    	; 0xc658 <travel_path+0x122>
	else if (__tmp > 65535)
    c5cc:	11 e0       	ldi	r17, 0x01	; 1
    c5ce:	6d 81       	ldd	r22, Y+5	; 0x05
    c5d0:	7e 81       	ldd	r23, Y+6	; 0x06
    c5d2:	8f 81       	ldd	r24, Y+7	; 0x07
    c5d4:	98 85       	ldd	r25, Y+8	; 0x08
    c5d6:	20 e0       	ldi	r18, 0x00	; 0
    c5d8:	3f ef       	ldi	r19, 0xFF	; 255
    c5da:	4f e7       	ldi	r20, 0x7F	; 127
    c5dc:	57 e4       	ldi	r21, 0x47	; 71
    c5de:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    c5e2:	18 16       	cp	r1, r24
    c5e4:	0c f0       	brlt	.+2      	; 0xc5e8 <travel_path+0xb2>
    c5e6:	10 e0       	ldi	r17, 0x00	; 0
    c5e8:	11 23       	and	r17, r17
    c5ea:	61 f1       	breq	.+88     	; 0xc644 <travel_path+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c5ec:	69 81       	ldd	r22, Y+1	; 0x01
    c5ee:	7a 81       	ldd	r23, Y+2	; 0x02
    c5f0:	8b 81       	ldd	r24, Y+3	; 0x03
    c5f2:	9c 81       	ldd	r25, Y+4	; 0x04
    c5f4:	20 e0       	ldi	r18, 0x00	; 0
    c5f6:	30 e0       	ldi	r19, 0x00	; 0
    c5f8:	40 e2       	ldi	r20, 0x20	; 32
    c5fa:	51 e4       	ldi	r21, 0x41	; 65
    c5fc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c600:	dc 01       	movw	r26, r24
    c602:	cb 01       	movw	r24, r22
    c604:	bc 01       	movw	r22, r24
    c606:	cd 01       	movw	r24, r26
    c608:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c60c:	dc 01       	movw	r26, r24
    c60e:	cb 01       	movw	r24, r22
    c610:	9a 87       	std	Y+10, r25	; 0x0a
    c612:	89 87       	std	Y+9, r24	; 0x09
    c614:	12 c0       	rjmp	.+36     	; 0xc63a <travel_path+0x104>
    c616:	80 e7       	ldi	r24, 0x70	; 112
    c618:	91 e0       	ldi	r25, 0x01	; 1
    c61a:	9c 87       	std	Y+12, r25	; 0x0c
    c61c:	8b 87       	std	Y+11, r24	; 0x0b
    c61e:	8b 85       	ldd	r24, Y+11	; 0x0b
    c620:	9c 85       	ldd	r25, Y+12	; 0x0c
    c622:	8c 01       	movw	r16, r24
    c624:	c8 01       	movw	r24, r16
    c626:	01 97       	sbiw	r24, 0x01	; 1
    c628:	f1 f7       	brne	.-4      	; 0xc626 <travel_path+0xf0>
    c62a:	8c 01       	movw	r16, r24
    c62c:	1c 87       	std	Y+12, r17	; 0x0c
    c62e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c630:	89 85       	ldd	r24, Y+9	; 0x09
    c632:	9a 85       	ldd	r25, Y+10	; 0x0a
    c634:	01 97       	sbiw	r24, 0x01	; 1
    c636:	9a 87       	std	Y+10, r25	; 0x0a
    c638:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c63a:	89 85       	ldd	r24, Y+9	; 0x09
    c63c:	9a 85       	ldd	r25, Y+10	; 0x0a
    c63e:	00 97       	sbiw	r24, 0x00	; 0
    c640:	51 f7       	brne	.-44     	; 0xc616 <travel_path+0xe0>
    c642:	17 c0       	rjmp	.+46     	; 0xc672 <travel_path+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c644:	6d 81       	ldd	r22, Y+5	; 0x05
    c646:	7e 81       	ldd	r23, Y+6	; 0x06
    c648:	8f 81       	ldd	r24, Y+7	; 0x07
    c64a:	98 85       	ldd	r25, Y+8	; 0x08
    c64c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c650:	dc 01       	movw	r26, r24
    c652:	cb 01       	movw	r24, r22
    c654:	9a 87       	std	Y+10, r25	; 0x0a
    c656:	89 87       	std	Y+9, r24	; 0x09
    c658:	89 85       	ldd	r24, Y+9	; 0x09
    c65a:	9a 85       	ldd	r25, Y+10	; 0x0a
    c65c:	9e 87       	std	Y+14, r25	; 0x0e
    c65e:	8d 87       	std	Y+13, r24	; 0x0d
    c660:	8d 85       	ldd	r24, Y+13	; 0x0d
    c662:	9e 85       	ldd	r25, Y+14	; 0x0e
    c664:	8c 01       	movw	r16, r24
    c666:	f8 01       	movw	r30, r16
    c668:	31 97       	sbiw	r30, 0x01	; 1
    c66a:	f1 f7       	brne	.-4      	; 0xc668 <travel_path+0x132>
    c66c:	8f 01       	movw	r16, r30
    c66e:	1e 87       	std	Y+14, r17	; 0x0e
    c670:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(pos_val=='n'){
    c672:	ce 01       	movw	r24, r28
    c674:	89 54       	subi	r24, 0x49	; 73
    c676:	9f 4f       	sbci	r25, 0xFF	; 255
    c678:	fc 01       	movw	r30, r24
    c67a:	80 81       	ld	r24, Z
    c67c:	8e 36       	cpi	r24, 0x6E	; 110
    c67e:	21 f4       	brne	.+8      	; 0xc688 <travel_path+0x152>
	forward();
    c680:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    c684:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
	}
	else if(pos_val=='r')
    c688:	ce 01       	movw	r24, r28
    c68a:	89 54       	subi	r24, 0x49	; 73
    c68c:	9f 4f       	sbci	r25, 0xFF	; 255
    c68e:	fc 01       	movw	r30, r24
    c690:	80 81       	ld	r24, Z
    c692:	82 37       	cpi	r24, 0x72	; 114
    c694:	21 f4       	brne	.+8      	; 0xc69e <travel_path+0x168>
	correct_right();
    c696:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    c69a:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
	else if(pos_val=='l')
    c69e:	ce 01       	movw	r24, r28
    c6a0:	89 54       	subi	r24, 0x49	; 73
    c6a2:	9f 4f       	sbci	r25, 0xFF	; 255
    c6a4:	fc 01       	movw	r30, r24
    c6a6:	80 81       	ld	r24, Z
    c6a8:	8c 36       	cpi	r24, 0x6C	; 108
    c6aa:	21 f4       	brne	.+8      	; 0xc6b4 <travel_path+0x17e>
	correct_left();
    c6ac:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    c6b0:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
	else if(pos_val=='R')
    c6b4:	ce 01       	movw	r24, r28
    c6b6:	89 54       	subi	r24, 0x49	; 73
    c6b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c6ba:	fc 01       	movw	r30, r24
    c6bc:	80 81       	ld	r24, Z
    c6be:	82 35       	cpi	r24, 0x52	; 82
    c6c0:	09 f0       	breq	.+2      	; 0xc6c4 <travel_path+0x18e>
    c6c2:	4d c3       	rjmp	.+1690   	; 0xcd5e <travel_path+0x828>
	{
		if(node==0)
    c6c4:	80 91 6d 03 	lds	r24, 0x036D
    c6c8:	90 91 6e 03 	lds	r25, 0x036E
    c6cc:	00 97       	sbiw	r24, 0x00	; 0
    c6ce:	21 f4       	brne	.+8      	; 0xc6d8 <travel_path+0x1a2>
		correct_right();
    c6d0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    c6d4:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
	correct_left();
	else if(pos_val=='R')
	{
		if(node==0)
		correct_right();
		else if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    c6d8:	80 91 6d 03 	lds	r24, 0x036D
    c6dc:	90 91 6e 03 	lds	r25, 0x036E
    c6e0:	01 96       	adiw	r24, 0x01	; 1
    c6e2:	8f 58       	subi	r24, 0x8F	; 143
    c6e4:	9c 4f       	sbci	r25, 0xFC	; 252
    c6e6:	fc 01       	movw	r30, r24
    c6e8:	80 81       	ld	r24, Z
    c6ea:	84 34       	cpi	r24, 0x44	; 68
    c6ec:	09 f4       	brne	.+2      	; 0xc6f0 <travel_path+0x1ba>
    c6ee:	5b c0       	rjmp	.+182    	; 0xc7a6 <travel_path+0x270>
    c6f0:	80 91 6d 03 	lds	r24, 0x036D
    c6f4:	90 91 6e 03 	lds	r25, 0x036E
    c6f8:	01 96       	adiw	r24, 0x01	; 1
    c6fa:	8f 58       	subi	r24, 0x8F	; 143
    c6fc:	9c 4f       	sbci	r25, 0xFC	; 252
    c6fe:	fc 01       	movw	r30, r24
    c700:	80 81       	ld	r24, Z
    c702:	81 33       	cpi	r24, 0x31	; 49
    c704:	09 f4       	brne	.+2      	; 0xc708 <travel_path+0x1d2>
    c706:	4f c0       	rjmp	.+158    	; 0xc7a6 <travel_path+0x270>
    c708:	80 91 6d 03 	lds	r24, 0x036D
    c70c:	90 91 6e 03 	lds	r25, 0x036E
    c710:	01 96       	adiw	r24, 0x01	; 1
    c712:	8f 58       	subi	r24, 0x8F	; 143
    c714:	9c 4f       	sbci	r25, 0xFC	; 252
    c716:	fc 01       	movw	r30, r24
    c718:	80 81       	ld	r24, Z
    c71a:	82 33       	cpi	r24, 0x32	; 50
    c71c:	09 f4       	brne	.+2      	; 0xc720 <travel_path+0x1ea>
    c71e:	43 c0       	rjmp	.+134    	; 0xc7a6 <travel_path+0x270>
    c720:	80 91 6d 03 	lds	r24, 0x036D
    c724:	90 91 6e 03 	lds	r25, 0x036E
    c728:	01 96       	adiw	r24, 0x01	; 1
    c72a:	8f 58       	subi	r24, 0x8F	; 143
    c72c:	9c 4f       	sbci	r25, 0xFC	; 252
    c72e:	fc 01       	movw	r30, r24
    c730:	80 81       	ld	r24, Z
    c732:	83 33       	cpi	r24, 0x33	; 51
    c734:	c1 f1       	breq	.+112    	; 0xc7a6 <travel_path+0x270>
    c736:	80 91 6d 03 	lds	r24, 0x036D
    c73a:	90 91 6e 03 	lds	r25, 0x036E
    c73e:	01 96       	adiw	r24, 0x01	; 1
    c740:	8f 58       	subi	r24, 0x8F	; 143
    c742:	9c 4f       	sbci	r25, 0xFC	; 252
    c744:	fc 01       	movw	r30, r24
    c746:	80 81       	ld	r24, Z
    c748:	84 33       	cpi	r24, 0x34	; 52
    c74a:	69 f1       	breq	.+90     	; 0xc7a6 <travel_path+0x270>
    c74c:	80 91 6d 03 	lds	r24, 0x036D
    c750:	90 91 6e 03 	lds	r25, 0x036E
    c754:	01 96       	adiw	r24, 0x01	; 1
    c756:	8f 58       	subi	r24, 0x8F	; 143
    c758:	9c 4f       	sbci	r25, 0xFC	; 252
    c75a:	fc 01       	movw	r30, r24
    c75c:	80 81       	ld	r24, Z
    c75e:	85 33       	cpi	r24, 0x35	; 53
    c760:	11 f1       	breq	.+68     	; 0xc7a6 <travel_path+0x270>
    c762:	80 91 6d 03 	lds	r24, 0x036D
    c766:	90 91 6e 03 	lds	r25, 0x036E
    c76a:	01 96       	adiw	r24, 0x01	; 1
    c76c:	8f 58       	subi	r24, 0x8F	; 143
    c76e:	9c 4f       	sbci	r25, 0xFC	; 252
    c770:	fc 01       	movw	r30, r24
    c772:	80 81       	ld	r24, Z
    c774:	86 33       	cpi	r24, 0x36	; 54
    c776:	b9 f0       	breq	.+46     	; 0xc7a6 <travel_path+0x270>
    c778:	80 91 6d 03 	lds	r24, 0x036D
    c77c:	90 91 6e 03 	lds	r25, 0x036E
    c780:	01 96       	adiw	r24, 0x01	; 1
    c782:	8f 58       	subi	r24, 0x8F	; 143
    c784:	9c 4f       	sbci	r25, 0xFC	; 252
    c786:	fc 01       	movw	r30, r24
    c788:	80 81       	ld	r24, Z
    c78a:	87 33       	cpi	r24, 0x37	; 55
    c78c:	61 f0       	breq	.+24     	; 0xc7a6 <travel_path+0x270>
    c78e:	80 91 6d 03 	lds	r24, 0x036D
    c792:	90 91 6e 03 	lds	r25, 0x036E
    c796:	01 96       	adiw	r24, 0x01	; 1
    c798:	8f 58       	subi	r24, 0x8F	; 143
    c79a:	9c 4f       	sbci	r25, 0xFC	; 252
    c79c:	fc 01       	movw	r30, r24
    c79e:	80 81       	ld	r24, Z
    c7a0:	88 33       	cpi	r24, 0x38	; 56
    c7a2:	09 f0       	breq	.+2      	; 0xc7a6 <travel_path+0x270>
    c7a4:	a2 c2       	rjmp	.+1348   	; 0xccea <travel_path+0x7b4>
		{
			stop();
    c7a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			if(master_path[node+1]=='7'||master_path[node+1]=='6')// TO ALLIGN TO NORTH SLANT LINE ONLY
    c7aa:	80 91 6d 03 	lds	r24, 0x036D
    c7ae:	90 91 6e 03 	lds	r25, 0x036E
    c7b2:	01 96       	adiw	r24, 0x01	; 1
    c7b4:	8f 58       	subi	r24, 0x8F	; 143
    c7b6:	9c 4f       	sbci	r25, 0xFC	; 252
    c7b8:	fc 01       	movw	r30, r24
    c7ba:	80 81       	ld	r24, Z
    c7bc:	87 33       	cpi	r24, 0x37	; 55
    c7be:	61 f0       	breq	.+24     	; 0xc7d8 <travel_path+0x2a2>
    c7c0:	80 91 6d 03 	lds	r24, 0x036D
    c7c4:	90 91 6e 03 	lds	r25, 0x036E
    c7c8:	01 96       	adiw	r24, 0x01	; 1
    c7ca:	8f 58       	subi	r24, 0x8F	; 143
    c7cc:	9c 4f       	sbci	r25, 0xFC	; 252
    c7ce:	fc 01       	movw	r30, r24
    c7d0:	80 81       	ld	r24, Z
    c7d2:	86 33       	cpi	r24, 0x36	; 54
    c7d4:	09 f0       	breq	.+2      	; 0xc7d8 <travel_path+0x2a2>
    c7d6:	87 c0       	rjmp	.+270    	; 0xc8e6 <travel_path+0x3b0>
			{
				forward_mm(25);
    c7d8:	89 e1       	ldi	r24, 0x19	; 25
    c7da:	90 e0       	ldi	r25, 0x00	; 0
    c7dc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    c7e0:	80 e0       	ldi	r24, 0x00	; 0
    c7e2:	90 e0       	ldi	r25, 0x00	; 0
    c7e4:	a0 ea       	ldi	r26, 0xA0	; 160
    c7e6:	b1 e4       	ldi	r27, 0x41	; 65
    c7e8:	8f 87       	std	Y+15, r24	; 0x0f
    c7ea:	98 8b       	std	Y+16, r25	; 0x10
    c7ec:	a9 8b       	std	Y+17, r26	; 0x11
    c7ee:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c7f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    c7f2:	78 89       	ldd	r23, Y+16	; 0x10
    c7f4:	89 89       	ldd	r24, Y+17	; 0x11
    c7f6:	9a 89       	ldd	r25, Y+18	; 0x12
    c7f8:	26 e6       	ldi	r18, 0x66	; 102
    c7fa:	36 e6       	ldi	r19, 0x66	; 102
    c7fc:	46 e6       	ldi	r20, 0x66	; 102
    c7fe:	55 e4       	ldi	r21, 0x45	; 69
    c800:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c804:	dc 01       	movw	r26, r24
    c806:	cb 01       	movw	r24, r22
    c808:	8b 8b       	std	Y+19, r24	; 0x13
    c80a:	9c 8b       	std	Y+20, r25	; 0x14
    c80c:	ad 8b       	std	Y+21, r26	; 0x15
    c80e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    c810:	11 e0       	ldi	r17, 0x01	; 1
    c812:	6b 89       	ldd	r22, Y+19	; 0x13
    c814:	7c 89       	ldd	r23, Y+20	; 0x14
    c816:	8d 89       	ldd	r24, Y+21	; 0x15
    c818:	9e 89       	ldd	r25, Y+22	; 0x16
    c81a:	20 e0       	ldi	r18, 0x00	; 0
    c81c:	30 e0       	ldi	r19, 0x00	; 0
    c81e:	40 e8       	ldi	r20, 0x80	; 128
    c820:	5f e3       	ldi	r21, 0x3F	; 63
    c822:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    c826:	88 23       	and	r24, r24
    c828:	0c f0       	brlt	.+2      	; 0xc82c <travel_path+0x2f6>
    c82a:	10 e0       	ldi	r17, 0x00	; 0
    c82c:	11 23       	and	r17, r17
    c82e:	29 f0       	breq	.+10     	; 0xc83a <travel_path+0x304>
		__ticks = 1;
    c830:	81 e0       	ldi	r24, 0x01	; 1
    c832:	90 e0       	ldi	r25, 0x00	; 0
    c834:	98 8f       	std	Y+24, r25	; 0x18
    c836:	8f 8b       	std	Y+23, r24	; 0x17
    c838:	46 c0       	rjmp	.+140    	; 0xc8c6 <travel_path+0x390>
	else if (__tmp > 65535)
    c83a:	11 e0       	ldi	r17, 0x01	; 1
    c83c:	6b 89       	ldd	r22, Y+19	; 0x13
    c83e:	7c 89       	ldd	r23, Y+20	; 0x14
    c840:	8d 89       	ldd	r24, Y+21	; 0x15
    c842:	9e 89       	ldd	r25, Y+22	; 0x16
    c844:	20 e0       	ldi	r18, 0x00	; 0
    c846:	3f ef       	ldi	r19, 0xFF	; 255
    c848:	4f e7       	ldi	r20, 0x7F	; 127
    c84a:	57 e4       	ldi	r21, 0x47	; 71
    c84c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    c850:	18 16       	cp	r1, r24
    c852:	0c f0       	brlt	.+2      	; 0xc856 <travel_path+0x320>
    c854:	10 e0       	ldi	r17, 0x00	; 0
    c856:	11 23       	and	r17, r17
    c858:	61 f1       	breq	.+88     	; 0xc8b2 <travel_path+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c85a:	6f 85       	ldd	r22, Y+15	; 0x0f
    c85c:	78 89       	ldd	r23, Y+16	; 0x10
    c85e:	89 89       	ldd	r24, Y+17	; 0x11
    c860:	9a 89       	ldd	r25, Y+18	; 0x12
    c862:	20 e0       	ldi	r18, 0x00	; 0
    c864:	30 e0       	ldi	r19, 0x00	; 0
    c866:	40 e2       	ldi	r20, 0x20	; 32
    c868:	51 e4       	ldi	r21, 0x41	; 65
    c86a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c86e:	dc 01       	movw	r26, r24
    c870:	cb 01       	movw	r24, r22
    c872:	bc 01       	movw	r22, r24
    c874:	cd 01       	movw	r24, r26
    c876:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c87a:	dc 01       	movw	r26, r24
    c87c:	cb 01       	movw	r24, r22
    c87e:	98 8f       	std	Y+24, r25	; 0x18
    c880:	8f 8b       	std	Y+23, r24	; 0x17
    c882:	12 c0       	rjmp	.+36     	; 0xc8a8 <travel_path+0x372>
    c884:	80 e7       	ldi	r24, 0x70	; 112
    c886:	91 e0       	ldi	r25, 0x01	; 1
    c888:	9a 8f       	std	Y+26, r25	; 0x1a
    c88a:	89 8f       	std	Y+25, r24	; 0x19
    c88c:	89 8d       	ldd	r24, Y+25	; 0x19
    c88e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    c890:	8c 01       	movw	r16, r24
    c892:	c8 01       	movw	r24, r16
    c894:	01 97       	sbiw	r24, 0x01	; 1
    c896:	f1 f7       	brne	.-4      	; 0xc894 <travel_path+0x35e>
    c898:	8c 01       	movw	r16, r24
    c89a:	1a 8f       	std	Y+26, r17	; 0x1a
    c89c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c89e:	8f 89       	ldd	r24, Y+23	; 0x17
    c8a0:	98 8d       	ldd	r25, Y+24	; 0x18
    c8a2:	01 97       	sbiw	r24, 0x01	; 1
    c8a4:	98 8f       	std	Y+24, r25	; 0x18
    c8a6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c8a8:	8f 89       	ldd	r24, Y+23	; 0x17
    c8aa:	98 8d       	ldd	r25, Y+24	; 0x18
    c8ac:	00 97       	sbiw	r24, 0x00	; 0
    c8ae:	51 f7       	brne	.-44     	; 0xc884 <travel_path+0x34e>
    c8b0:	17 c0       	rjmp	.+46     	; 0xc8e0 <travel_path+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c8b2:	6b 89       	ldd	r22, Y+19	; 0x13
    c8b4:	7c 89       	ldd	r23, Y+20	; 0x14
    c8b6:	8d 89       	ldd	r24, Y+21	; 0x15
    c8b8:	9e 89       	ldd	r25, Y+22	; 0x16
    c8ba:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c8be:	dc 01       	movw	r26, r24
    c8c0:	cb 01       	movw	r24, r22
    c8c2:	98 8f       	std	Y+24, r25	; 0x18
    c8c4:	8f 8b       	std	Y+23, r24	; 0x17
    c8c6:	8f 89       	ldd	r24, Y+23	; 0x17
    c8c8:	98 8d       	ldd	r25, Y+24	; 0x18
    c8ca:	9c 8f       	std	Y+28, r25	; 0x1c
    c8cc:	8b 8f       	std	Y+27, r24	; 0x1b
    c8ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c8d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c8d2:	8c 01       	movw	r16, r24
    c8d4:	f8 01       	movw	r30, r16
    c8d6:	31 97       	sbiw	r30, 0x01	; 1
    c8d8:	f1 f7       	brne	.-4      	; 0xc8d6 <travel_path+0x3a0>
    c8da:	8f 01       	movw	r16, r30
    c8dc:	1c 8f       	std	Y+28, r17	; 0x1c
    c8de:	0b 8f       	std	Y+27, r16	; 0x1b
				_delay_ms(20);
				correct_right();
    c8e0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    c8e4:	da c1       	rjmp	.+948    	; 0xcc9a <travel_path+0x764>
			}
			else if(master_path[node+1]=='8'){
    c8e6:	80 91 6d 03 	lds	r24, 0x036D
    c8ea:	90 91 6e 03 	lds	r25, 0x036E
    c8ee:	01 96       	adiw	r24, 0x01	; 1
    c8f0:	8f 58       	subi	r24, 0x8F	; 143
    c8f2:	9c 4f       	sbci	r25, 0xFC	; 252
    c8f4:	fc 01       	movw	r30, r24
    c8f6:	80 81       	ld	r24, Z
    c8f8:	88 33       	cpi	r24, 0x38	; 56
    c8fa:	09 f0       	breq	.+2      	; 0xc8fe <travel_path+0x3c8>
    c8fc:	cc c1       	rjmp	.+920    	; 0xcc96 <travel_path+0x760>
				stop();
    c8fe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    c902:	80 e0       	ldi	r24, 0x00	; 0
    c904:	90 e0       	ldi	r25, 0x00	; 0
    c906:	a0 ea       	ldi	r26, 0xA0	; 160
    c908:	b1 e4       	ldi	r27, 0x41	; 65
    c90a:	8d 8f       	std	Y+29, r24	; 0x1d
    c90c:	9e 8f       	std	Y+30, r25	; 0x1e
    c90e:	af 8f       	std	Y+31, r26	; 0x1f
    c910:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c912:	6d 8d       	ldd	r22, Y+29	; 0x1d
    c914:	7e 8d       	ldd	r23, Y+30	; 0x1e
    c916:	8f 8d       	ldd	r24, Y+31	; 0x1f
    c918:	98 a1       	lds	r25, 0x48
    c91a:	26 e6       	ldi	r18, 0x66	; 102
    c91c:	36 e6       	ldi	r19, 0x66	; 102
    c91e:	46 e6       	ldi	r20, 0x66	; 102
    c920:	55 e4       	ldi	r21, 0x45	; 69
    c922:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c926:	dc 01       	movw	r26, r24
    c928:	cb 01       	movw	r24, r22
    c92a:	89 a3       	lds	r24, 0x59
    c92c:	9a a3       	lds	r25, 0x5a
    c92e:	ab a3       	lds	r26, 0x5b
    c930:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    c932:	11 e0       	ldi	r17, 0x01	; 1
    c934:	69 a1       	lds	r22, 0x49
    c936:	7a a1       	lds	r23, 0x4a
    c938:	8b a1       	lds	r24, 0x4b
    c93a:	9c a1       	lds	r25, 0x4c
    c93c:	20 e0       	ldi	r18, 0x00	; 0
    c93e:	30 e0       	ldi	r19, 0x00	; 0
    c940:	40 e8       	ldi	r20, 0x80	; 128
    c942:	5f e3       	ldi	r21, 0x3F	; 63
    c944:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    c948:	88 23       	and	r24, r24
    c94a:	0c f0       	brlt	.+2      	; 0xc94e <travel_path+0x418>
    c94c:	10 e0       	ldi	r17, 0x00	; 0
    c94e:	11 23       	and	r17, r17
    c950:	29 f0       	breq	.+10     	; 0xc95c <travel_path+0x426>
		__ticks = 1;
    c952:	81 e0       	ldi	r24, 0x01	; 1
    c954:	90 e0       	ldi	r25, 0x00	; 0
    c956:	9e a3       	lds	r25, 0x5e
    c958:	8d a3       	lds	r24, 0x5d
    c95a:	46 c0       	rjmp	.+140    	; 0xc9e8 <travel_path+0x4b2>
	else if (__tmp > 65535)
    c95c:	11 e0       	ldi	r17, 0x01	; 1
    c95e:	69 a1       	lds	r22, 0x49
    c960:	7a a1       	lds	r23, 0x4a
    c962:	8b a1       	lds	r24, 0x4b
    c964:	9c a1       	lds	r25, 0x4c
    c966:	20 e0       	ldi	r18, 0x00	; 0
    c968:	3f ef       	ldi	r19, 0xFF	; 255
    c96a:	4f e7       	ldi	r20, 0x7F	; 127
    c96c:	57 e4       	ldi	r21, 0x47	; 71
    c96e:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    c972:	18 16       	cp	r1, r24
    c974:	0c f0       	brlt	.+2      	; 0xc978 <travel_path+0x442>
    c976:	10 e0       	ldi	r17, 0x00	; 0
    c978:	11 23       	and	r17, r17
    c97a:	61 f1       	breq	.+88     	; 0xc9d4 <travel_path+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c97c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    c97e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    c980:	8f 8d       	ldd	r24, Y+31	; 0x1f
    c982:	98 a1       	lds	r25, 0x48
    c984:	20 e0       	ldi	r18, 0x00	; 0
    c986:	30 e0       	ldi	r19, 0x00	; 0
    c988:	40 e2       	ldi	r20, 0x20	; 32
    c98a:	51 e4       	ldi	r21, 0x41	; 65
    c98c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    c990:	dc 01       	movw	r26, r24
    c992:	cb 01       	movw	r24, r22
    c994:	bc 01       	movw	r22, r24
    c996:	cd 01       	movw	r24, r26
    c998:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c99c:	dc 01       	movw	r26, r24
    c99e:	cb 01       	movw	r24, r22
    c9a0:	9e a3       	lds	r25, 0x5e
    c9a2:	8d a3       	lds	r24, 0x5d
    c9a4:	12 c0       	rjmp	.+36     	; 0xc9ca <travel_path+0x494>
    c9a6:	80 e7       	ldi	r24, 0x70	; 112
    c9a8:	91 e0       	ldi	r25, 0x01	; 1
    c9aa:	98 a7       	lds	r25, 0x78
    c9ac:	8f a3       	lds	r24, 0x5f
    c9ae:	8f a1       	lds	r24, 0x4f
    c9b0:	98 a5       	lds	r25, 0x68
    c9b2:	8c 01       	movw	r16, r24
    c9b4:	c8 01       	movw	r24, r16
    c9b6:	01 97       	sbiw	r24, 0x01	; 1
    c9b8:	f1 f7       	brne	.-4      	; 0xc9b6 <travel_path+0x480>
    c9ba:	8c 01       	movw	r16, r24
    c9bc:	18 a7       	lds	r17, 0x78
    c9be:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c9c0:	8d a1       	lds	r24, 0x4d
    c9c2:	9e a1       	lds	r25, 0x4e
    c9c4:	01 97       	sbiw	r24, 0x01	; 1
    c9c6:	9e a3       	lds	r25, 0x5e
    c9c8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c9ca:	8d a1       	lds	r24, 0x4d
    c9cc:	9e a1       	lds	r25, 0x4e
    c9ce:	00 97       	sbiw	r24, 0x00	; 0
    c9d0:	51 f7       	brne	.-44     	; 0xc9a6 <travel_path+0x470>
    c9d2:	17 c0       	rjmp	.+46     	; 0xca02 <travel_path+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c9d4:	69 a1       	lds	r22, 0x49
    c9d6:	7a a1       	lds	r23, 0x4a
    c9d8:	8b a1       	lds	r24, 0x4b
    c9da:	9c a1       	lds	r25, 0x4c
    c9dc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    c9e0:	dc 01       	movw	r26, r24
    c9e2:	cb 01       	movw	r24, r22
    c9e4:	9e a3       	lds	r25, 0x5e
    c9e6:	8d a3       	lds	r24, 0x5d
    c9e8:	8d a1       	lds	r24, 0x4d
    c9ea:	9e a1       	lds	r25, 0x4e
    c9ec:	9a a7       	lds	r25, 0x7a
    c9ee:	89 a7       	lds	r24, 0x79
    c9f0:	89 a5       	lds	r24, 0x69
    c9f2:	9a a5       	lds	r25, 0x6a
    c9f4:	8c 01       	movw	r16, r24
    c9f6:	f8 01       	movw	r30, r16
    c9f8:	31 97       	sbiw	r30, 0x01	; 1
    c9fa:	f1 f7       	brne	.-4      	; 0xc9f8 <travel_path+0x4c2>
    c9fc:	8f 01       	movw	r16, r30
    c9fe:	1a a7       	lds	r17, 0x7a
    ca00:	09 a7       	lds	r16, 0x79
				_delay_ms(20);
				forward_mm(160);
    ca02:	80 ea       	ldi	r24, 0xA0	; 160
    ca04:	90 e0       	ldi	r25, 0x00	; 0
    ca06:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    ca0a:	80 e0       	ldi	r24, 0x00	; 0
    ca0c:	90 e0       	ldi	r25, 0x00	; 0
    ca0e:	a0 ea       	ldi	r26, 0xA0	; 160
    ca10:	b1 e4       	ldi	r27, 0x41	; 65
    ca12:	8b a7       	lds	r24, 0x7b
    ca14:	9c a7       	lds	r25, 0x7c
    ca16:	ad a7       	lds	r26, 0x7d
    ca18:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ca1a:	6b a5       	lds	r22, 0x6b
    ca1c:	7c a5       	lds	r23, 0x6c
    ca1e:	8d a5       	lds	r24, 0x6d
    ca20:	9e a5       	lds	r25, 0x6e
    ca22:	26 e6       	ldi	r18, 0x66	; 102
    ca24:	36 e6       	ldi	r19, 0x66	; 102
    ca26:	46 e6       	ldi	r20, 0x66	; 102
    ca28:	55 e4       	ldi	r21, 0x45	; 69
    ca2a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    ca2e:	dc 01       	movw	r26, r24
    ca30:	cb 01       	movw	r24, r22
    ca32:	8f a7       	lds	r24, 0x7f
    ca34:	98 ab       	sts	0x58, r25
    ca36:	a9 ab       	sts	0x59, r26
    ca38:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    ca3a:	11 e0       	ldi	r17, 0x01	; 1
    ca3c:	6f a5       	lds	r22, 0x6f
    ca3e:	78 a9       	sts	0x48, r23
    ca40:	89 a9       	sts	0x49, r24
    ca42:	9a a9       	sts	0x4a, r25
    ca44:	20 e0       	ldi	r18, 0x00	; 0
    ca46:	30 e0       	ldi	r19, 0x00	; 0
    ca48:	40 e8       	ldi	r20, 0x80	; 128
    ca4a:	5f e3       	ldi	r21, 0x3F	; 63
    ca4c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    ca50:	88 23       	and	r24, r24
    ca52:	0c f0       	brlt	.+2      	; 0xca56 <travel_path+0x520>
    ca54:	10 e0       	ldi	r17, 0x00	; 0
    ca56:	11 23       	and	r17, r17
    ca58:	29 f0       	breq	.+10     	; 0xca64 <travel_path+0x52e>
		__ticks = 1;
    ca5a:	81 e0       	ldi	r24, 0x01	; 1
    ca5c:	90 e0       	ldi	r25, 0x00	; 0
    ca5e:	9c ab       	sts	0x5c, r25
    ca60:	8b ab       	sts	0x5b, r24
    ca62:	46 c0       	rjmp	.+140    	; 0xcaf0 <travel_path+0x5ba>
	else if (__tmp > 65535)
    ca64:	11 e0       	ldi	r17, 0x01	; 1
    ca66:	6f a5       	lds	r22, 0x6f
    ca68:	78 a9       	sts	0x48, r23
    ca6a:	89 a9       	sts	0x49, r24
    ca6c:	9a a9       	sts	0x4a, r25
    ca6e:	20 e0       	ldi	r18, 0x00	; 0
    ca70:	3f ef       	ldi	r19, 0xFF	; 255
    ca72:	4f e7       	ldi	r20, 0x7F	; 127
    ca74:	57 e4       	ldi	r21, 0x47	; 71
    ca76:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    ca7a:	18 16       	cp	r1, r24
    ca7c:	0c f0       	brlt	.+2      	; 0xca80 <travel_path+0x54a>
    ca7e:	10 e0       	ldi	r17, 0x00	; 0
    ca80:	11 23       	and	r17, r17
    ca82:	61 f1       	breq	.+88     	; 0xcadc <travel_path+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ca84:	6b a5       	lds	r22, 0x6b
    ca86:	7c a5       	lds	r23, 0x6c
    ca88:	8d a5       	lds	r24, 0x6d
    ca8a:	9e a5       	lds	r25, 0x6e
    ca8c:	20 e0       	ldi	r18, 0x00	; 0
    ca8e:	30 e0       	ldi	r19, 0x00	; 0
    ca90:	40 e2       	ldi	r20, 0x20	; 32
    ca92:	51 e4       	ldi	r21, 0x41	; 65
    ca94:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    ca98:	dc 01       	movw	r26, r24
    ca9a:	cb 01       	movw	r24, r22
    ca9c:	bc 01       	movw	r22, r24
    ca9e:	cd 01       	movw	r24, r26
    caa0:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    caa4:	dc 01       	movw	r26, r24
    caa6:	cb 01       	movw	r24, r22
    caa8:	9c ab       	sts	0x5c, r25
    caaa:	8b ab       	sts	0x5b, r24
    caac:	12 c0       	rjmp	.+36     	; 0xcad2 <travel_path+0x59c>
    caae:	80 e7       	ldi	r24, 0x70	; 112
    cab0:	91 e0       	ldi	r25, 0x01	; 1
    cab2:	9e ab       	sts	0x5e, r25
    cab4:	8d ab       	sts	0x5d, r24
    cab6:	8d a9       	sts	0x4d, r24
    cab8:	9e a9       	sts	0x4e, r25
    caba:	8c 01       	movw	r16, r24
    cabc:	c8 01       	movw	r24, r16
    cabe:	01 97       	sbiw	r24, 0x01	; 1
    cac0:	f1 f7       	brne	.-4      	; 0xcabe <travel_path+0x588>
    cac2:	8c 01       	movw	r16, r24
    cac4:	1e ab       	sts	0x5e, r17
    cac6:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cac8:	8b a9       	sts	0x4b, r24
    caca:	9c a9       	sts	0x4c, r25
    cacc:	01 97       	sbiw	r24, 0x01	; 1
    cace:	9c ab       	sts	0x5c, r25
    cad0:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cad2:	8b a9       	sts	0x4b, r24
    cad4:	9c a9       	sts	0x4c, r25
    cad6:	00 97       	sbiw	r24, 0x00	; 0
    cad8:	51 f7       	brne	.-44     	; 0xcaae <travel_path+0x578>
    cada:	17 c0       	rjmp	.+46     	; 0xcb0a <travel_path+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cadc:	6f a5       	lds	r22, 0x6f
    cade:	78 a9       	sts	0x48, r23
    cae0:	89 a9       	sts	0x49, r24
    cae2:	9a a9       	sts	0x4a, r25
    cae4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    cae8:	dc 01       	movw	r26, r24
    caea:	cb 01       	movw	r24, r22
    caec:	9c ab       	sts	0x5c, r25
    caee:	8b ab       	sts	0x5b, r24
    caf0:	8b a9       	sts	0x4b, r24
    caf2:	9c a9       	sts	0x4c, r25
    caf4:	98 af       	sts	0x78, r25
    caf6:	8f ab       	sts	0x5f, r24
    caf8:	8f a9       	sts	0x4f, r24
    cafa:	98 ad       	sts	0x68, r25
    cafc:	8c 01       	movw	r16, r24
    cafe:	f8 01       	movw	r30, r16
    cb00:	31 97       	sbiw	r30, 0x01	; 1
    cb02:	f1 f7       	brne	.-4      	; 0xcb00 <travel_path+0x5ca>
    cb04:	8f 01       	movw	r16, r30
    cb06:	18 af       	sts	0x78, r17
    cb08:	0f ab       	sts	0x5f, r16
				_delay_ms(20);
				 spl_right2();
    cb0a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    cb0e:	80 e0       	ldi	r24, 0x00	; 0
    cb10:	90 e0       	ldi	r25, 0x00	; 0
    cb12:	a0 ea       	ldi	r26, 0xA0	; 160
    cb14:	b1 e4       	ldi	r27, 0x41	; 65
    cb16:	89 af       	sts	0x79, r24
    cb18:	9a af       	sts	0x7a, r25
    cb1a:	ab af       	sts	0x7b, r26
    cb1c:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cb1e:	69 ad       	sts	0x69, r22
    cb20:	7a ad       	sts	0x6a, r23
    cb22:	8b ad       	sts	0x6b, r24
    cb24:	9c ad       	sts	0x6c, r25
    cb26:	26 e6       	ldi	r18, 0x66	; 102
    cb28:	36 e6       	ldi	r19, 0x66	; 102
    cb2a:	46 e6       	ldi	r20, 0x66	; 102
    cb2c:	55 e4       	ldi	r21, 0x45	; 69
    cb2e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    cb32:	dc 01       	movw	r26, r24
    cb34:	cb 01       	movw	r24, r22
    cb36:	9e 01       	movw	r18, r28
    cb38:	23 5c       	subi	r18, 0xC3	; 195
    cb3a:	3f 4f       	sbci	r19, 0xFF	; 255
    cb3c:	f9 01       	movw	r30, r18
    cb3e:	80 83       	st	Z, r24
    cb40:	91 83       	std	Z+1, r25	; 0x01
    cb42:	a2 83       	std	Z+2, r26	; 0x02
    cb44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cb46:	11 e0       	ldi	r17, 0x01	; 1
    cb48:	ce 01       	movw	r24, r28
    cb4a:	cd 96       	adiw	r24, 0x3d	; 61
    cb4c:	fc 01       	movw	r30, r24
    cb4e:	60 81       	ld	r22, Z
    cb50:	71 81       	ldd	r23, Z+1	; 0x01
    cb52:	82 81       	ldd	r24, Z+2	; 0x02
    cb54:	93 81       	ldd	r25, Z+3	; 0x03
    cb56:	20 e0       	ldi	r18, 0x00	; 0
    cb58:	30 e0       	ldi	r19, 0x00	; 0
    cb5a:	40 e8       	ldi	r20, 0x80	; 128
    cb5c:	5f e3       	ldi	r21, 0x3F	; 63
    cb5e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    cb62:	88 23       	and	r24, r24
    cb64:	0c f0       	brlt	.+2      	; 0xcb68 <travel_path+0x632>
    cb66:	10 e0       	ldi	r17, 0x00	; 0
    cb68:	11 23       	and	r17, r17
    cb6a:	49 f0       	breq	.+18     	; 0xcb7e <travel_path+0x648>
		__ticks = 1;
    cb6c:	ce 01       	movw	r24, r28
    cb6e:	8f 5b       	subi	r24, 0xBF	; 191
    cb70:	9f 4f       	sbci	r25, 0xFF	; 255
    cb72:	21 e0       	ldi	r18, 0x01	; 1
    cb74:	30 e0       	ldi	r19, 0x00	; 0
    cb76:	fc 01       	movw	r30, r24
    cb78:	31 83       	std	Z+1, r19	; 0x01
    cb7a:	20 83       	st	Z, r18
    cb7c:	6e c0       	rjmp	.+220    	; 0xcc5a <travel_path+0x724>
	else if (__tmp > 65535)
    cb7e:	11 e0       	ldi	r17, 0x01	; 1
    cb80:	ce 01       	movw	r24, r28
    cb82:	cd 96       	adiw	r24, 0x3d	; 61
    cb84:	fc 01       	movw	r30, r24
    cb86:	60 81       	ld	r22, Z
    cb88:	71 81       	ldd	r23, Z+1	; 0x01
    cb8a:	82 81       	ldd	r24, Z+2	; 0x02
    cb8c:	93 81       	ldd	r25, Z+3	; 0x03
    cb8e:	20 e0       	ldi	r18, 0x00	; 0
    cb90:	3f ef       	ldi	r19, 0xFF	; 255
    cb92:	4f e7       	ldi	r20, 0x7F	; 127
    cb94:	57 e4       	ldi	r21, 0x47	; 71
    cb96:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    cb9a:	18 16       	cp	r1, r24
    cb9c:	0c f0       	brlt	.+2      	; 0xcba0 <travel_path+0x66a>
    cb9e:	10 e0       	ldi	r17, 0x00	; 0
    cba0:	11 23       	and	r17, r17
    cba2:	09 f4       	brne	.+2      	; 0xcba6 <travel_path+0x670>
    cba4:	49 c0       	rjmp	.+146    	; 0xcc38 <travel_path+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cba6:	69 ad       	sts	0x69, r22
    cba8:	7a ad       	sts	0x6a, r23
    cbaa:	8b ad       	sts	0x6b, r24
    cbac:	9c ad       	sts	0x6c, r25
    cbae:	20 e0       	ldi	r18, 0x00	; 0
    cbb0:	30 e0       	ldi	r19, 0x00	; 0
    cbb2:	40 e2       	ldi	r20, 0x20	; 32
    cbb4:	51 e4       	ldi	r21, 0x41	; 65
    cbb6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    cbba:	dc 01       	movw	r26, r24
    cbbc:	cb 01       	movw	r24, r22
    cbbe:	8e 01       	movw	r16, r28
    cbc0:	0f 5b       	subi	r16, 0xBF	; 191
    cbc2:	1f 4f       	sbci	r17, 0xFF	; 255
    cbc4:	bc 01       	movw	r22, r24
    cbc6:	cd 01       	movw	r24, r26
    cbc8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    cbcc:	dc 01       	movw	r26, r24
    cbce:	cb 01       	movw	r24, r22
    cbd0:	f8 01       	movw	r30, r16
    cbd2:	91 83       	std	Z+1, r25	; 0x01
    cbd4:	80 83       	st	Z, r24
    cbd6:	27 c0       	rjmp	.+78     	; 0xcc26 <travel_path+0x6f0>
    cbd8:	ce 01       	movw	r24, r28
    cbda:	8d 5b       	subi	r24, 0xBD	; 189
    cbdc:	9f 4f       	sbci	r25, 0xFF	; 255
    cbde:	20 e7       	ldi	r18, 0x70	; 112
    cbe0:	31 e0       	ldi	r19, 0x01	; 1
    cbe2:	fc 01       	movw	r30, r24
    cbe4:	31 83       	std	Z+1, r19	; 0x01
    cbe6:	20 83       	st	Z, r18
    cbe8:	ce 01       	movw	r24, r28
    cbea:	8d 5b       	subi	r24, 0xBD	; 189
    cbec:	9f 4f       	sbci	r25, 0xFF	; 255
    cbee:	fc 01       	movw	r30, r24
    cbf0:	80 81       	ld	r24, Z
    cbf2:	91 81       	ldd	r25, Z+1	; 0x01
    cbf4:	8c 01       	movw	r16, r24
    cbf6:	c8 01       	movw	r24, r16
    cbf8:	01 97       	sbiw	r24, 0x01	; 1
    cbfa:	f1 f7       	brne	.-4      	; 0xcbf8 <travel_path+0x6c2>
    cbfc:	8c 01       	movw	r16, r24
    cbfe:	ce 01       	movw	r24, r28
    cc00:	8d 5b       	subi	r24, 0xBD	; 189
    cc02:	9f 4f       	sbci	r25, 0xFF	; 255
    cc04:	fc 01       	movw	r30, r24
    cc06:	11 83       	std	Z+1, r17	; 0x01
    cc08:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cc0a:	ce 01       	movw	r24, r28
    cc0c:	8f 5b       	subi	r24, 0xBF	; 191
    cc0e:	9f 4f       	sbci	r25, 0xFF	; 255
    cc10:	9e 01       	movw	r18, r28
    cc12:	2f 5b       	subi	r18, 0xBF	; 191
    cc14:	3f 4f       	sbci	r19, 0xFF	; 255
    cc16:	f9 01       	movw	r30, r18
    cc18:	20 81       	ld	r18, Z
    cc1a:	31 81       	ldd	r19, Z+1	; 0x01
    cc1c:	21 50       	subi	r18, 0x01	; 1
    cc1e:	30 40       	sbci	r19, 0x00	; 0
    cc20:	fc 01       	movw	r30, r24
    cc22:	31 83       	std	Z+1, r19	; 0x01
    cc24:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cc26:	ce 01       	movw	r24, r28
    cc28:	8f 5b       	subi	r24, 0xBF	; 191
    cc2a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc2c:	fc 01       	movw	r30, r24
    cc2e:	80 81       	ld	r24, Z
    cc30:	91 81       	ldd	r25, Z+1	; 0x01
    cc32:	00 97       	sbiw	r24, 0x00	; 0
    cc34:	89 f6       	brne	.-94     	; 0xcbd8 <travel_path+0x6a2>
    cc36:	31 c0       	rjmp	.+98     	; 0xcc9a <travel_path+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cc38:	8e 01       	movw	r16, r28
    cc3a:	0f 5b       	subi	r16, 0xBF	; 191
    cc3c:	1f 4f       	sbci	r17, 0xFF	; 255
    cc3e:	ce 01       	movw	r24, r28
    cc40:	cd 96       	adiw	r24, 0x3d	; 61
    cc42:	fc 01       	movw	r30, r24
    cc44:	60 81       	ld	r22, Z
    cc46:	71 81       	ldd	r23, Z+1	; 0x01
    cc48:	82 81       	ldd	r24, Z+2	; 0x02
    cc4a:	93 81       	ldd	r25, Z+3	; 0x03
    cc4c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    cc50:	dc 01       	movw	r26, r24
    cc52:	cb 01       	movw	r24, r22
    cc54:	f8 01       	movw	r30, r16
    cc56:	91 83       	std	Z+1, r25	; 0x01
    cc58:	80 83       	st	Z, r24
    cc5a:	ce 01       	movw	r24, r28
    cc5c:	8b 5b       	subi	r24, 0xBB	; 187
    cc5e:	9f 4f       	sbci	r25, 0xFF	; 255
    cc60:	9e 01       	movw	r18, r28
    cc62:	2f 5b       	subi	r18, 0xBF	; 191
    cc64:	3f 4f       	sbci	r19, 0xFF	; 255
    cc66:	f9 01       	movw	r30, r18
    cc68:	20 81       	ld	r18, Z
    cc6a:	31 81       	ldd	r19, Z+1	; 0x01
    cc6c:	fc 01       	movw	r30, r24
    cc6e:	31 83       	std	Z+1, r19	; 0x01
    cc70:	20 83       	st	Z, r18
    cc72:	ce 01       	movw	r24, r28
    cc74:	8b 5b       	subi	r24, 0xBB	; 187
    cc76:	9f 4f       	sbci	r25, 0xFF	; 255
    cc78:	fc 01       	movw	r30, r24
    cc7a:	80 81       	ld	r24, Z
    cc7c:	91 81       	ldd	r25, Z+1	; 0x01
    cc7e:	8c 01       	movw	r16, r24
    cc80:	c8 01       	movw	r24, r16
    cc82:	01 97       	sbiw	r24, 0x01	; 1
    cc84:	f1 f7       	brne	.-4      	; 0xcc82 <travel_path+0x74c>
    cc86:	8c 01       	movw	r16, r24
    cc88:	ce 01       	movw	r24, r28
    cc8a:	8b 5b       	subi	r24, 0xBB	; 187
    cc8c:	9f 4f       	sbci	r25, 0xFF	; 255
    cc8e:	fc 01       	movw	r30, r24
    cc90:	11 83       	std	Z+1, r17	; 0x01
    cc92:	00 83       	st	Z, r16
    cc94:	02 c0       	rjmp	.+4      	; 0xcc9a <travel_path+0x764>
				_delay_ms(20);
			}

			else
			correct_right();
    cc96:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;
    cc9a:	80 91 6d 03 	lds	r24, 0x036D
    cc9e:	90 91 6e 03 	lds	r25, 0x036E
    cca2:	01 96       	adiw	r24, 0x01	; 1
    cca4:	90 93 6e 03 	sts	0x036E, r25
    cca8:	80 93 6d 03 	sts	0x036D, r24
			pick_drop(master_path[node]);
    ccac:	80 91 6d 03 	lds	r24, 0x036D
    ccb0:	90 91 6e 03 	lds	r25, 0x036E
    ccb4:	8f 58       	subi	r24, 0x8F	; 143
    ccb6:	9c 4f       	sbci	r25, 0xFC	; 252
    ccb8:	fc 01       	movw	r30, r24
    ccba:	80 81       	ld	r24, Z
    ccbc:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <pick_drop>
			node++;
    ccc0:	80 91 6d 03 	lds	r24, 0x036D
    ccc4:	90 91 6e 03 	lds	r25, 0x036E
    ccc8:	01 96       	adiw	r24, 0x01	; 1
    ccca:	90 93 6e 03 	sts	0x036E, r25
    ccce:	80 93 6d 03 	sts	0x036D, r24
			travel_path(master_path[node]);
    ccd2:	80 91 6d 03 	lds	r24, 0x036D
    ccd6:	90 91 6e 03 	lds	r25, 0x036E
    ccda:	8f 58       	subi	r24, 0x8F	; 143
    ccdc:	9c 4f       	sbci	r25, 0xFC	; 252
    ccde:	fc 01       	movw	r30, r24
    cce0:	80 81       	ld	r24, Z
    cce2:	0e 94 9b 62 	call	0xc536	; 0xc536 <travel_path>
    cce6:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
		}

		else{
			node--;
    ccea:	80 91 6d 03 	lds	r24, 0x036D
    ccee:	90 91 6e 03 	lds	r25, 0x036E
    ccf2:	01 97       	sbiw	r24, 0x01	; 1
    ccf4:	90 93 6e 03 	sts	0x036E, r25
    ccf8:	80 93 6d 03 	sts	0x036D, r24
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    ccfc:	80 91 6d 03 	lds	r24, 0x036D
    cd00:	90 91 6e 03 	lds	r25, 0x036E
    cd04:	01 97       	sbiw	r24, 0x01	; 1
    cd06:	8f 58       	subi	r24, 0x8F	; 143
    cd08:	9c 4f       	sbci	r25, 0xFC	; 252
    cd0a:	fc 01       	movw	r30, r24
    cd0c:	80 81       	ld	r24, Z
    cd0e:	8c 34       	cpi	r24, 0x4C	; 76
    cd10:	b1 f0       	breq	.+44     	; 0xcd3e <travel_path+0x808>
    cd12:	80 91 6d 03 	lds	r24, 0x036D
    cd16:	90 91 6e 03 	lds	r25, 0x036E
    cd1a:	01 97       	sbiw	r24, 0x01	; 1
    cd1c:	8f 58       	subi	r24, 0x8F	; 143
    cd1e:	9c 4f       	sbci	r25, 0xFC	; 252
    cd20:	fc 01       	movw	r30, r24
    cd22:	80 81       	ld	r24, Z
    cd24:	82 35       	cpi	r24, 0x52	; 82
    cd26:	59 f0       	breq	.+22     	; 0xcd3e <travel_path+0x808>
    cd28:	80 91 6d 03 	lds	r24, 0x036D
    cd2c:	90 91 6e 03 	lds	r25, 0x036E
    cd30:	01 97       	sbiw	r24, 0x01	; 1
    cd32:	8f 58       	subi	r24, 0x8F	; 143
    cd34:	9c 4f       	sbci	r25, 0xFC	; 252
    cd36:	fc 01       	movw	r30, r24
    cd38:	80 81       	ld	r24, Z
    cd3a:	85 35       	cpi	r24, 0x55	; 85
    cd3c:	19 f4       	brne	.+6      	; 0xcd44 <travel_path+0x80e>
			correct_right2();
    cd3e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <correct_right2>
    cd42:	02 c0       	rjmp	.+4      	; 0xcd48 <travel_path+0x812>
			else 
			correct_right();
    cd44:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;		
    cd48:	80 91 6d 03 	lds	r24, 0x036D
    cd4c:	90 91 6e 03 	lds	r25, 0x036E
    cd50:	01 96       	adiw	r24, 0x01	; 1
    cd52:	90 93 6e 03 	sts	0x036E, r25
    cd56:	80 93 6d 03 	sts	0x036D, r24
    cd5a:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
		}
	}
		else if(pos_val=='L')
    cd5e:	ce 01       	movw	r24, r28
    cd60:	89 54       	subi	r24, 0x49	; 73
    cd62:	9f 4f       	sbci	r25, 0xFF	; 255
    cd64:	fc 01       	movw	r30, r24
    cd66:	80 81       	ld	r24, Z
    cd68:	8c 34       	cpi	r24, 0x4C	; 76
    cd6a:	09 f0       	breq	.+2      	; 0xcd6e <travel_path+0x838>
    cd6c:	1f c5       	rjmp	.+2622   	; 0xd7ac <travel_path+0x1276>
		{
			if(node==0)
    cd6e:	80 91 6d 03 	lds	r24, 0x036D
    cd72:	90 91 6e 03 	lds	r25, 0x036E
    cd76:	00 97       	sbiw	r24, 0x00	; 0
    cd78:	21 f4       	brne	.+8      	; 0xcd82 <travel_path+0x84c>
			correct_left();
    cd7a:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    cd7e:	0c 94 30 70 	jmp	0xe060	; 0xe060 <travel_path+0x1b2a>
	}
		else if(pos_val=='L')
		{
			if(node==0)
			correct_left();
			else if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    cd82:	80 91 6d 03 	lds	r24, 0x036D
    cd86:	90 91 6e 03 	lds	r25, 0x036E
    cd8a:	01 96       	adiw	r24, 0x01	; 1
    cd8c:	8f 58       	subi	r24, 0x8F	; 143
    cd8e:	9c 4f       	sbci	r25, 0xFC	; 252
    cd90:	fc 01       	movw	r30, r24
    cd92:	80 81       	ld	r24, Z
    cd94:	84 34       	cpi	r24, 0x44	; 68
    cd96:	09 f4       	brne	.+2      	; 0xcd9a <travel_path+0x864>
    cd98:	5b c0       	rjmp	.+182    	; 0xce50 <travel_path+0x91a>
    cd9a:	80 91 6d 03 	lds	r24, 0x036D
    cd9e:	90 91 6e 03 	lds	r25, 0x036E
    cda2:	01 96       	adiw	r24, 0x01	; 1
    cda4:	8f 58       	subi	r24, 0x8F	; 143
    cda6:	9c 4f       	sbci	r25, 0xFC	; 252
    cda8:	fc 01       	movw	r30, r24
    cdaa:	80 81       	ld	r24, Z
    cdac:	81 33       	cpi	r24, 0x31	; 49
    cdae:	09 f4       	brne	.+2      	; 0xcdb2 <travel_path+0x87c>
    cdb0:	4f c0       	rjmp	.+158    	; 0xce50 <travel_path+0x91a>
    cdb2:	80 91 6d 03 	lds	r24, 0x036D
    cdb6:	90 91 6e 03 	lds	r25, 0x036E
    cdba:	01 96       	adiw	r24, 0x01	; 1
    cdbc:	8f 58       	subi	r24, 0x8F	; 143
    cdbe:	9c 4f       	sbci	r25, 0xFC	; 252
    cdc0:	fc 01       	movw	r30, r24
    cdc2:	80 81       	ld	r24, Z
    cdc4:	82 33       	cpi	r24, 0x32	; 50
    cdc6:	09 f4       	brne	.+2      	; 0xcdca <travel_path+0x894>
    cdc8:	43 c0       	rjmp	.+134    	; 0xce50 <travel_path+0x91a>
    cdca:	80 91 6d 03 	lds	r24, 0x036D
    cdce:	90 91 6e 03 	lds	r25, 0x036E
    cdd2:	01 96       	adiw	r24, 0x01	; 1
    cdd4:	8f 58       	subi	r24, 0x8F	; 143
    cdd6:	9c 4f       	sbci	r25, 0xFC	; 252
    cdd8:	fc 01       	movw	r30, r24
    cdda:	80 81       	ld	r24, Z
    cddc:	83 33       	cpi	r24, 0x33	; 51
    cdde:	c1 f1       	breq	.+112    	; 0xce50 <travel_path+0x91a>
    cde0:	80 91 6d 03 	lds	r24, 0x036D
    cde4:	90 91 6e 03 	lds	r25, 0x036E
    cde8:	01 96       	adiw	r24, 0x01	; 1
    cdea:	8f 58       	subi	r24, 0x8F	; 143
    cdec:	9c 4f       	sbci	r25, 0xFC	; 252
    cdee:	fc 01       	movw	r30, r24
    cdf0:	80 81       	ld	r24, Z
    cdf2:	84 33       	cpi	r24, 0x34	; 52
    cdf4:	69 f1       	breq	.+90     	; 0xce50 <travel_path+0x91a>
    cdf6:	80 91 6d 03 	lds	r24, 0x036D
    cdfa:	90 91 6e 03 	lds	r25, 0x036E
    cdfe:	01 96       	adiw	r24, 0x01	; 1
    ce00:	8f 58       	subi	r24, 0x8F	; 143
    ce02:	9c 4f       	sbci	r25, 0xFC	; 252
    ce04:	fc 01       	movw	r30, r24
    ce06:	80 81       	ld	r24, Z
    ce08:	85 33       	cpi	r24, 0x35	; 53
    ce0a:	11 f1       	breq	.+68     	; 0xce50 <travel_path+0x91a>
    ce0c:	80 91 6d 03 	lds	r24, 0x036D
    ce10:	90 91 6e 03 	lds	r25, 0x036E
    ce14:	01 96       	adiw	r24, 0x01	; 1
    ce16:	8f 58       	subi	r24, 0x8F	; 143
    ce18:	9c 4f       	sbci	r25, 0xFC	; 252
    ce1a:	fc 01       	movw	r30, r24
    ce1c:	80 81       	ld	r24, Z
    ce1e:	86 33       	cpi	r24, 0x36	; 54
    ce20:	b9 f0       	breq	.+46     	; 0xce50 <travel_path+0x91a>
    ce22:	80 91 6d 03 	lds	r24, 0x036D
    ce26:	90 91 6e 03 	lds	r25, 0x036E
    ce2a:	01 96       	adiw	r24, 0x01	; 1
    ce2c:	8f 58       	subi	r24, 0x8F	; 143
    ce2e:	9c 4f       	sbci	r25, 0xFC	; 252
    ce30:	fc 01       	movw	r30, r24
    ce32:	80 81       	ld	r24, Z
    ce34:	87 33       	cpi	r24, 0x37	; 55
    ce36:	61 f0       	breq	.+24     	; 0xce50 <travel_path+0x91a>
    ce38:	80 91 6d 03 	lds	r24, 0x036D
    ce3c:	90 91 6e 03 	lds	r25, 0x036E
    ce40:	01 96       	adiw	r24, 0x01	; 1
    ce42:	8f 58       	subi	r24, 0x8F	; 143
    ce44:	9c 4f       	sbci	r25, 0xFC	; 252
    ce46:	fc 01       	movw	r30, r24
    ce48:	80 81       	ld	r24, Z
    ce4a:	88 33       	cpi	r24, 0x38	; 56
    ce4c:	09 f0       	breq	.+2      	; 0xce50 <travel_path+0x91a>
    ce4e:	78 c4       	rjmp	.+2288   	; 0xd740 <travel_path+0x120a>
			{
				if(master_path[node+1]=='7'||master_path[node+1]=='6')
    ce50:	80 91 6d 03 	lds	r24, 0x036D
    ce54:	90 91 6e 03 	lds	r25, 0x036E
    ce58:	01 96       	adiw	r24, 0x01	; 1
    ce5a:	8f 58       	subi	r24, 0x8F	; 143
    ce5c:	9c 4f       	sbci	r25, 0xFC	; 252
    ce5e:	fc 01       	movw	r30, r24
    ce60:	80 81       	ld	r24, Z
    ce62:	87 33       	cpi	r24, 0x37	; 55
    ce64:	61 f0       	breq	.+24     	; 0xce7e <travel_path+0x948>
    ce66:	80 91 6d 03 	lds	r24, 0x036D
    ce6a:	90 91 6e 03 	lds	r25, 0x036E
    ce6e:	01 96       	adiw	r24, 0x01	; 1
    ce70:	8f 58       	subi	r24, 0x8F	; 143
    ce72:	9c 4f       	sbci	r25, 0xFC	; 252
    ce74:	fc 01       	movw	r30, r24
    ce76:	80 81       	ld	r24, Z
    ce78:	86 33       	cpi	r24, 0x36	; 54
    ce7a:	09 f0       	breq	.+2      	; 0xce7e <travel_path+0x948>
    ce7c:	ad c1       	rjmp	.+858    	; 0xd1d8 <travel_path+0xca2>
				{
					forward_mm(25);
    ce7e:	89 e1       	ldi	r24, 0x19	; 25
    ce80:	90 e0       	ldi	r25, 0x00	; 0
    ce82:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    ce86:	9e 01       	movw	r18, r28
    ce88:	29 5b       	subi	r18, 0xB9	; 185
    ce8a:	3f 4f       	sbci	r19, 0xFF	; 255
    ce8c:	80 e0       	ldi	r24, 0x00	; 0
    ce8e:	90 e0       	ldi	r25, 0x00	; 0
    ce90:	a0 ea       	ldi	r26, 0xA0	; 160
    ce92:	b1 e4       	ldi	r27, 0x41	; 65
    ce94:	f9 01       	movw	r30, r18
    ce96:	80 83       	st	Z, r24
    ce98:	91 83       	std	Z+1, r25	; 0x01
    ce9a:	a2 83       	std	Z+2, r26	; 0x02
    ce9c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ce9e:	8e 01       	movw	r16, r28
    cea0:	05 5b       	subi	r16, 0xB5	; 181
    cea2:	1f 4f       	sbci	r17, 0xFF	; 255
    cea4:	ce 01       	movw	r24, r28
    cea6:	89 5b       	subi	r24, 0xB9	; 185
    cea8:	9f 4f       	sbci	r25, 0xFF	; 255
    ceaa:	fc 01       	movw	r30, r24
    ceac:	60 81       	ld	r22, Z
    ceae:	71 81       	ldd	r23, Z+1	; 0x01
    ceb0:	82 81       	ldd	r24, Z+2	; 0x02
    ceb2:	93 81       	ldd	r25, Z+3	; 0x03
    ceb4:	26 e6       	ldi	r18, 0x66	; 102
    ceb6:	36 e6       	ldi	r19, 0x66	; 102
    ceb8:	46 e6       	ldi	r20, 0x66	; 102
    ceba:	55 e4       	ldi	r21, 0x45	; 69
    cebc:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    cec0:	dc 01       	movw	r26, r24
    cec2:	cb 01       	movw	r24, r22
    cec4:	f8 01       	movw	r30, r16
    cec6:	80 83       	st	Z, r24
    cec8:	91 83       	std	Z+1, r25	; 0x01
    ceca:	a2 83       	std	Z+2, r26	; 0x02
    cecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cece:	ce 01       	movw	r24, r28
    ced0:	85 5b       	subi	r24, 0xB5	; 181
    ced2:	9f 4f       	sbci	r25, 0xFF	; 255
    ced4:	11 e0       	ldi	r17, 0x01	; 1
    ced6:	fc 01       	movw	r30, r24
    ced8:	60 81       	ld	r22, Z
    ceda:	71 81       	ldd	r23, Z+1	; 0x01
    cedc:	82 81       	ldd	r24, Z+2	; 0x02
    cede:	93 81       	ldd	r25, Z+3	; 0x03
    cee0:	20 e0       	ldi	r18, 0x00	; 0
    cee2:	30 e0       	ldi	r19, 0x00	; 0
    cee4:	40 e8       	ldi	r20, 0x80	; 128
    cee6:	5f e3       	ldi	r21, 0x3F	; 63
    cee8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    ceec:	88 23       	and	r24, r24
    ceee:	0c f0       	brlt	.+2      	; 0xcef2 <travel_path+0x9bc>
    cef0:	10 e0       	ldi	r17, 0x00	; 0
    cef2:	11 23       	and	r17, r17
    cef4:	49 f0       	breq	.+18     	; 0xcf08 <travel_path+0x9d2>
		__ticks = 1;
    cef6:	ce 01       	movw	r24, r28
    cef8:	81 5b       	subi	r24, 0xB1	; 177
    cefa:	9f 4f       	sbci	r25, 0xFF	; 255
    cefc:	21 e0       	ldi	r18, 0x01	; 1
    cefe:	30 e0       	ldi	r19, 0x00	; 0
    cf00:	fc 01       	movw	r30, r24
    cf02:	31 83       	std	Z+1, r19	; 0x01
    cf04:	20 83       	st	Z, r18
    cf06:	74 c0       	rjmp	.+232    	; 0xcff0 <travel_path+0xaba>
	else if (__tmp > 65535)
    cf08:	ce 01       	movw	r24, r28
    cf0a:	85 5b       	subi	r24, 0xB5	; 181
    cf0c:	9f 4f       	sbci	r25, 0xFF	; 255
    cf0e:	11 e0       	ldi	r17, 0x01	; 1
    cf10:	fc 01       	movw	r30, r24
    cf12:	60 81       	ld	r22, Z
    cf14:	71 81       	ldd	r23, Z+1	; 0x01
    cf16:	82 81       	ldd	r24, Z+2	; 0x02
    cf18:	93 81       	ldd	r25, Z+3	; 0x03
    cf1a:	20 e0       	ldi	r18, 0x00	; 0
    cf1c:	3f ef       	ldi	r19, 0xFF	; 255
    cf1e:	4f e7       	ldi	r20, 0x7F	; 127
    cf20:	57 e4       	ldi	r21, 0x47	; 71
    cf22:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    cf26:	18 16       	cp	r1, r24
    cf28:	0c f0       	brlt	.+2      	; 0xcf2c <travel_path+0x9f6>
    cf2a:	10 e0       	ldi	r17, 0x00	; 0
    cf2c:	11 23       	and	r17, r17
    cf2e:	09 f4       	brne	.+2      	; 0xcf32 <travel_path+0x9fc>
    cf30:	4d c0       	rjmp	.+154    	; 0xcfcc <travel_path+0xa96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cf32:	ce 01       	movw	r24, r28
    cf34:	89 5b       	subi	r24, 0xB9	; 185
    cf36:	9f 4f       	sbci	r25, 0xFF	; 255
    cf38:	fc 01       	movw	r30, r24
    cf3a:	60 81       	ld	r22, Z
    cf3c:	71 81       	ldd	r23, Z+1	; 0x01
    cf3e:	82 81       	ldd	r24, Z+2	; 0x02
    cf40:	93 81       	ldd	r25, Z+3	; 0x03
    cf42:	20 e0       	ldi	r18, 0x00	; 0
    cf44:	30 e0       	ldi	r19, 0x00	; 0
    cf46:	40 e2       	ldi	r20, 0x20	; 32
    cf48:	51 e4       	ldi	r21, 0x41	; 65
    cf4a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    cf4e:	dc 01       	movw	r26, r24
    cf50:	cb 01       	movw	r24, r22
    cf52:	8e 01       	movw	r16, r28
    cf54:	01 5b       	subi	r16, 0xB1	; 177
    cf56:	1f 4f       	sbci	r17, 0xFF	; 255
    cf58:	bc 01       	movw	r22, r24
    cf5a:	cd 01       	movw	r24, r26
    cf5c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    cf60:	dc 01       	movw	r26, r24
    cf62:	cb 01       	movw	r24, r22
    cf64:	f8 01       	movw	r30, r16
    cf66:	91 83       	std	Z+1, r25	; 0x01
    cf68:	80 83       	st	Z, r24
    cf6a:	27 c0       	rjmp	.+78     	; 0xcfba <travel_path+0xa84>
    cf6c:	ce 01       	movw	r24, r28
    cf6e:	8f 5a       	subi	r24, 0xAF	; 175
    cf70:	9f 4f       	sbci	r25, 0xFF	; 255
    cf72:	20 e7       	ldi	r18, 0x70	; 112
    cf74:	31 e0       	ldi	r19, 0x01	; 1
    cf76:	fc 01       	movw	r30, r24
    cf78:	31 83       	std	Z+1, r19	; 0x01
    cf7a:	20 83       	st	Z, r18
    cf7c:	ce 01       	movw	r24, r28
    cf7e:	8f 5a       	subi	r24, 0xAF	; 175
    cf80:	9f 4f       	sbci	r25, 0xFF	; 255
    cf82:	fc 01       	movw	r30, r24
    cf84:	80 81       	ld	r24, Z
    cf86:	91 81       	ldd	r25, Z+1	; 0x01
    cf88:	8c 01       	movw	r16, r24
    cf8a:	c8 01       	movw	r24, r16
    cf8c:	01 97       	sbiw	r24, 0x01	; 1
    cf8e:	f1 f7       	brne	.-4      	; 0xcf8c <travel_path+0xa56>
    cf90:	8c 01       	movw	r16, r24
    cf92:	ce 01       	movw	r24, r28
    cf94:	8f 5a       	subi	r24, 0xAF	; 175
    cf96:	9f 4f       	sbci	r25, 0xFF	; 255
    cf98:	fc 01       	movw	r30, r24
    cf9a:	11 83       	std	Z+1, r17	; 0x01
    cf9c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cf9e:	ce 01       	movw	r24, r28
    cfa0:	81 5b       	subi	r24, 0xB1	; 177
    cfa2:	9f 4f       	sbci	r25, 0xFF	; 255
    cfa4:	9e 01       	movw	r18, r28
    cfa6:	21 5b       	subi	r18, 0xB1	; 177
    cfa8:	3f 4f       	sbci	r19, 0xFF	; 255
    cfaa:	f9 01       	movw	r30, r18
    cfac:	20 81       	ld	r18, Z
    cfae:	31 81       	ldd	r19, Z+1	; 0x01
    cfb0:	21 50       	subi	r18, 0x01	; 1
    cfb2:	30 40       	sbci	r19, 0x00	; 0
    cfb4:	fc 01       	movw	r30, r24
    cfb6:	31 83       	std	Z+1, r19	; 0x01
    cfb8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cfba:	ce 01       	movw	r24, r28
    cfbc:	81 5b       	subi	r24, 0xB1	; 177
    cfbe:	9f 4f       	sbci	r25, 0xFF	; 255
    cfc0:	fc 01       	movw	r30, r24
    cfc2:	80 81       	ld	r24, Z
    cfc4:	91 81       	ldd	r25, Z+1	; 0x01
    cfc6:	00 97       	sbiw	r24, 0x00	; 0
    cfc8:	89 f6       	brne	.-94     	; 0xcf6c <travel_path+0xa36>
    cfca:	2f c0       	rjmp	.+94     	; 0xd02a <travel_path+0xaf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cfcc:	8e 01       	movw	r16, r28
    cfce:	01 5b       	subi	r16, 0xB1	; 177
    cfd0:	1f 4f       	sbci	r17, 0xFF	; 255
    cfd2:	ce 01       	movw	r24, r28
    cfd4:	85 5b       	subi	r24, 0xB5	; 181
    cfd6:	9f 4f       	sbci	r25, 0xFF	; 255
    cfd8:	fc 01       	movw	r30, r24
    cfda:	60 81       	ld	r22, Z
    cfdc:	71 81       	ldd	r23, Z+1	; 0x01
    cfde:	82 81       	ldd	r24, Z+2	; 0x02
    cfe0:	93 81       	ldd	r25, Z+3	; 0x03
    cfe2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    cfe6:	dc 01       	movw	r26, r24
    cfe8:	cb 01       	movw	r24, r22
    cfea:	f8 01       	movw	r30, r16
    cfec:	91 83       	std	Z+1, r25	; 0x01
    cfee:	80 83       	st	Z, r24
    cff0:	ce 01       	movw	r24, r28
    cff2:	8d 5a       	subi	r24, 0xAD	; 173
    cff4:	9f 4f       	sbci	r25, 0xFF	; 255
    cff6:	9e 01       	movw	r18, r28
    cff8:	21 5b       	subi	r18, 0xB1	; 177
    cffa:	3f 4f       	sbci	r19, 0xFF	; 255
    cffc:	f9 01       	movw	r30, r18
    cffe:	20 81       	ld	r18, Z
    d000:	31 81       	ldd	r19, Z+1	; 0x01
    d002:	fc 01       	movw	r30, r24
    d004:	31 83       	std	Z+1, r19	; 0x01
    d006:	20 83       	st	Z, r18
    d008:	ce 01       	movw	r24, r28
    d00a:	8d 5a       	subi	r24, 0xAD	; 173
    d00c:	9f 4f       	sbci	r25, 0xFF	; 255
    d00e:	fc 01       	movw	r30, r24
    d010:	80 81       	ld	r24, Z
    d012:	91 81       	ldd	r25, Z+1	; 0x01
    d014:	8c 01       	movw	r16, r24
    d016:	c8 01       	movw	r24, r16
    d018:	01 97       	sbiw	r24, 0x01	; 1
    d01a:	f1 f7       	brne	.-4      	; 0xd018 <travel_path+0xae2>
    d01c:	8c 01       	movw	r16, r24
    d01e:	ce 01       	movw	r24, r28
    d020:	8d 5a       	subi	r24, 0xAD	; 173
    d022:	9f 4f       	sbci	r25, 0xFF	; 255
    d024:	fc 01       	movw	r30, r24
    d026:	11 83       	std	Z+1, r17	; 0x01
    d028:	00 83       	st	Z, r16
					_delay_ms(20);
					stop();
    d02a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d02e:	9e 01       	movw	r18, r28
    d030:	2b 5a       	subi	r18, 0xAB	; 171
    d032:	3f 4f       	sbci	r19, 0xFF	; 255
    d034:	80 e0       	ldi	r24, 0x00	; 0
    d036:	90 e0       	ldi	r25, 0x00	; 0
    d038:	a8 ec       	ldi	r26, 0xC8	; 200
    d03a:	b1 e4       	ldi	r27, 0x41	; 65
    d03c:	f9 01       	movw	r30, r18
    d03e:	80 83       	st	Z, r24
    d040:	91 83       	std	Z+1, r25	; 0x01
    d042:	a2 83       	std	Z+2, r26	; 0x02
    d044:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d046:	8e 01       	movw	r16, r28
    d048:	07 5a       	subi	r16, 0xA7	; 167
    d04a:	1f 4f       	sbci	r17, 0xFF	; 255
    d04c:	ce 01       	movw	r24, r28
    d04e:	8b 5a       	subi	r24, 0xAB	; 171
    d050:	9f 4f       	sbci	r25, 0xFF	; 255
    d052:	fc 01       	movw	r30, r24
    d054:	60 81       	ld	r22, Z
    d056:	71 81       	ldd	r23, Z+1	; 0x01
    d058:	82 81       	ldd	r24, Z+2	; 0x02
    d05a:	93 81       	ldd	r25, Z+3	; 0x03
    d05c:	26 e6       	ldi	r18, 0x66	; 102
    d05e:	36 e6       	ldi	r19, 0x66	; 102
    d060:	46 e6       	ldi	r20, 0x66	; 102
    d062:	55 e4       	ldi	r21, 0x45	; 69
    d064:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d068:	dc 01       	movw	r26, r24
    d06a:	cb 01       	movw	r24, r22
    d06c:	f8 01       	movw	r30, r16
    d06e:	80 83       	st	Z, r24
    d070:	91 83       	std	Z+1, r25	; 0x01
    d072:	a2 83       	std	Z+2, r26	; 0x02
    d074:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d076:	ce 01       	movw	r24, r28
    d078:	87 5a       	subi	r24, 0xA7	; 167
    d07a:	9f 4f       	sbci	r25, 0xFF	; 255
    d07c:	11 e0       	ldi	r17, 0x01	; 1
    d07e:	fc 01       	movw	r30, r24
    d080:	60 81       	ld	r22, Z
    d082:	71 81       	ldd	r23, Z+1	; 0x01
    d084:	82 81       	ldd	r24, Z+2	; 0x02
    d086:	93 81       	ldd	r25, Z+3	; 0x03
    d088:	20 e0       	ldi	r18, 0x00	; 0
    d08a:	30 e0       	ldi	r19, 0x00	; 0
    d08c:	40 e8       	ldi	r20, 0x80	; 128
    d08e:	5f e3       	ldi	r21, 0x3F	; 63
    d090:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    d094:	88 23       	and	r24, r24
    d096:	0c f0       	brlt	.+2      	; 0xd09a <travel_path+0xb64>
    d098:	10 e0       	ldi	r17, 0x00	; 0
    d09a:	11 23       	and	r17, r17
    d09c:	49 f0       	breq	.+18     	; 0xd0b0 <travel_path+0xb7a>
		__ticks = 1;
    d09e:	ce 01       	movw	r24, r28
    d0a0:	83 5a       	subi	r24, 0xA3	; 163
    d0a2:	9f 4f       	sbci	r25, 0xFF	; 255
    d0a4:	21 e0       	ldi	r18, 0x01	; 1
    d0a6:	30 e0       	ldi	r19, 0x00	; 0
    d0a8:	fc 01       	movw	r30, r24
    d0aa:	31 83       	std	Z+1, r19	; 0x01
    d0ac:	20 83       	st	Z, r18
    d0ae:	74 c0       	rjmp	.+232    	; 0xd198 <travel_path+0xc62>
	else if (__tmp > 65535)
    d0b0:	ce 01       	movw	r24, r28
    d0b2:	87 5a       	subi	r24, 0xA7	; 167
    d0b4:	9f 4f       	sbci	r25, 0xFF	; 255
    d0b6:	11 e0       	ldi	r17, 0x01	; 1
    d0b8:	fc 01       	movw	r30, r24
    d0ba:	60 81       	ld	r22, Z
    d0bc:	71 81       	ldd	r23, Z+1	; 0x01
    d0be:	82 81       	ldd	r24, Z+2	; 0x02
    d0c0:	93 81       	ldd	r25, Z+3	; 0x03
    d0c2:	20 e0       	ldi	r18, 0x00	; 0
    d0c4:	3f ef       	ldi	r19, 0xFF	; 255
    d0c6:	4f e7       	ldi	r20, 0x7F	; 127
    d0c8:	57 e4       	ldi	r21, 0x47	; 71
    d0ca:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    d0ce:	18 16       	cp	r1, r24
    d0d0:	0c f0       	brlt	.+2      	; 0xd0d4 <travel_path+0xb9e>
    d0d2:	10 e0       	ldi	r17, 0x00	; 0
    d0d4:	11 23       	and	r17, r17
    d0d6:	09 f4       	brne	.+2      	; 0xd0da <travel_path+0xba4>
    d0d8:	4d c0       	rjmp	.+154    	; 0xd174 <travel_path+0xc3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d0da:	ce 01       	movw	r24, r28
    d0dc:	8b 5a       	subi	r24, 0xAB	; 171
    d0de:	9f 4f       	sbci	r25, 0xFF	; 255
    d0e0:	fc 01       	movw	r30, r24
    d0e2:	60 81       	ld	r22, Z
    d0e4:	71 81       	ldd	r23, Z+1	; 0x01
    d0e6:	82 81       	ldd	r24, Z+2	; 0x02
    d0e8:	93 81       	ldd	r25, Z+3	; 0x03
    d0ea:	20 e0       	ldi	r18, 0x00	; 0
    d0ec:	30 e0       	ldi	r19, 0x00	; 0
    d0ee:	40 e2       	ldi	r20, 0x20	; 32
    d0f0:	51 e4       	ldi	r21, 0x41	; 65
    d0f2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d0f6:	dc 01       	movw	r26, r24
    d0f8:	cb 01       	movw	r24, r22
    d0fa:	8e 01       	movw	r16, r28
    d0fc:	03 5a       	subi	r16, 0xA3	; 163
    d0fe:	1f 4f       	sbci	r17, 0xFF	; 255
    d100:	bc 01       	movw	r22, r24
    d102:	cd 01       	movw	r24, r26
    d104:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d108:	dc 01       	movw	r26, r24
    d10a:	cb 01       	movw	r24, r22
    d10c:	f8 01       	movw	r30, r16
    d10e:	91 83       	std	Z+1, r25	; 0x01
    d110:	80 83       	st	Z, r24
    d112:	27 c0       	rjmp	.+78     	; 0xd162 <travel_path+0xc2c>
    d114:	ce 01       	movw	r24, r28
    d116:	81 5a       	subi	r24, 0xA1	; 161
    d118:	9f 4f       	sbci	r25, 0xFF	; 255
    d11a:	20 e7       	ldi	r18, 0x70	; 112
    d11c:	31 e0       	ldi	r19, 0x01	; 1
    d11e:	fc 01       	movw	r30, r24
    d120:	31 83       	std	Z+1, r19	; 0x01
    d122:	20 83       	st	Z, r18
    d124:	ce 01       	movw	r24, r28
    d126:	81 5a       	subi	r24, 0xA1	; 161
    d128:	9f 4f       	sbci	r25, 0xFF	; 255
    d12a:	fc 01       	movw	r30, r24
    d12c:	80 81       	ld	r24, Z
    d12e:	91 81       	ldd	r25, Z+1	; 0x01
    d130:	8c 01       	movw	r16, r24
    d132:	c8 01       	movw	r24, r16
    d134:	01 97       	sbiw	r24, 0x01	; 1
    d136:	f1 f7       	brne	.-4      	; 0xd134 <travel_path+0xbfe>
    d138:	8c 01       	movw	r16, r24
    d13a:	ce 01       	movw	r24, r28
    d13c:	81 5a       	subi	r24, 0xA1	; 161
    d13e:	9f 4f       	sbci	r25, 0xFF	; 255
    d140:	fc 01       	movw	r30, r24
    d142:	11 83       	std	Z+1, r17	; 0x01
    d144:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d146:	ce 01       	movw	r24, r28
    d148:	83 5a       	subi	r24, 0xA3	; 163
    d14a:	9f 4f       	sbci	r25, 0xFF	; 255
    d14c:	9e 01       	movw	r18, r28
    d14e:	23 5a       	subi	r18, 0xA3	; 163
    d150:	3f 4f       	sbci	r19, 0xFF	; 255
    d152:	f9 01       	movw	r30, r18
    d154:	20 81       	ld	r18, Z
    d156:	31 81       	ldd	r19, Z+1	; 0x01
    d158:	21 50       	subi	r18, 0x01	; 1
    d15a:	30 40       	sbci	r19, 0x00	; 0
    d15c:	fc 01       	movw	r30, r24
    d15e:	31 83       	std	Z+1, r19	; 0x01
    d160:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d162:	ce 01       	movw	r24, r28
    d164:	83 5a       	subi	r24, 0xA3	; 163
    d166:	9f 4f       	sbci	r25, 0xFF	; 255
    d168:	fc 01       	movw	r30, r24
    d16a:	80 81       	ld	r24, Z
    d16c:	91 81       	ldd	r25, Z+1	; 0x01
    d16e:	00 97       	sbiw	r24, 0x00	; 0
    d170:	89 f6       	brne	.-94     	; 0xd114 <travel_path+0xbde>
    d172:	2f c0       	rjmp	.+94     	; 0xd1d2 <travel_path+0xc9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d174:	8e 01       	movw	r16, r28
    d176:	03 5a       	subi	r16, 0xA3	; 163
    d178:	1f 4f       	sbci	r17, 0xFF	; 255
    d17a:	ce 01       	movw	r24, r28
    d17c:	87 5a       	subi	r24, 0xA7	; 167
    d17e:	9f 4f       	sbci	r25, 0xFF	; 255
    d180:	fc 01       	movw	r30, r24
    d182:	60 81       	ld	r22, Z
    d184:	71 81       	ldd	r23, Z+1	; 0x01
    d186:	82 81       	ldd	r24, Z+2	; 0x02
    d188:	93 81       	ldd	r25, Z+3	; 0x03
    d18a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d18e:	dc 01       	movw	r26, r24
    d190:	cb 01       	movw	r24, r22
    d192:	f8 01       	movw	r30, r16
    d194:	91 83       	std	Z+1, r25	; 0x01
    d196:	80 83       	st	Z, r24
    d198:	ce 01       	movw	r24, r28
    d19a:	8f 59       	subi	r24, 0x9F	; 159
    d19c:	9f 4f       	sbci	r25, 0xFF	; 255
    d19e:	9e 01       	movw	r18, r28
    d1a0:	23 5a       	subi	r18, 0xA3	; 163
    d1a2:	3f 4f       	sbci	r19, 0xFF	; 255
    d1a4:	f9 01       	movw	r30, r18
    d1a6:	20 81       	ld	r18, Z
    d1a8:	31 81       	ldd	r19, Z+1	; 0x01
    d1aa:	fc 01       	movw	r30, r24
    d1ac:	31 83       	std	Z+1, r19	; 0x01
    d1ae:	20 83       	st	Z, r18
    d1b0:	ce 01       	movw	r24, r28
    d1b2:	8f 59       	subi	r24, 0x9F	; 159
    d1b4:	9f 4f       	sbci	r25, 0xFF	; 255
    d1b6:	fc 01       	movw	r30, r24
    d1b8:	80 81       	ld	r24, Z
    d1ba:	91 81       	ldd	r25, Z+1	; 0x01
    d1bc:	8c 01       	movw	r16, r24
    d1be:	c8 01       	movw	r24, r16
    d1c0:	01 97       	sbiw	r24, 0x01	; 1
    d1c2:	f1 f7       	brne	.-4      	; 0xd1c0 <travel_path+0xc8a>
    d1c4:	8c 01       	movw	r16, r24
    d1c6:	ce 01       	movw	r24, r28
    d1c8:	8f 59       	subi	r24, 0x9F	; 159
    d1ca:	9f 4f       	sbci	r25, 0xFF	; 255
    d1cc:	fc 01       	movw	r30, r24
    d1ce:	11 83       	std	Z+1, r17	; 0x01
    d1d0:	00 83       	st	Z, r16
					_delay_ms(25);
					correct_left();
    d1d2:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    d1d6:	8d c2       	rjmp	.+1306   	; 0xd6f2 <travel_path+0x11bc>
				}
						else if(master_path[node+1]=='8'){
    d1d8:	80 91 6d 03 	lds	r24, 0x036D
    d1dc:	90 91 6e 03 	lds	r25, 0x036E
    d1e0:	01 96       	adiw	r24, 0x01	; 1
    d1e2:	8f 58       	subi	r24, 0x8F	; 143
    d1e4:	9c 4f       	sbci	r25, 0xFC	; 252
    d1e6:	fc 01       	movw	r30, r24
    d1e8:	80 81       	ld	r24, Z
    d1ea:	88 33       	cpi	r24, 0x38	; 56
    d1ec:	09 f0       	breq	.+2      	; 0xd1f0 <travel_path+0xcba>
    d1ee:	7f c2       	rjmp	.+1278   	; 0xd6ee <travel_path+0x11b8>
							stop();
    d1f0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d1f4:	9e 01       	movw	r18, r28
    d1f6:	2d 59       	subi	r18, 0x9D	; 157
    d1f8:	3f 4f       	sbci	r19, 0xFF	; 255
    d1fa:	80 e0       	ldi	r24, 0x00	; 0
    d1fc:	90 e0       	ldi	r25, 0x00	; 0
    d1fe:	a0 ea       	ldi	r26, 0xA0	; 160
    d200:	b1 e4       	ldi	r27, 0x41	; 65
    d202:	f9 01       	movw	r30, r18
    d204:	80 83       	st	Z, r24
    d206:	91 83       	std	Z+1, r25	; 0x01
    d208:	a2 83       	std	Z+2, r26	; 0x02
    d20a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d20c:	8e 01       	movw	r16, r28
    d20e:	09 59       	subi	r16, 0x99	; 153
    d210:	1f 4f       	sbci	r17, 0xFF	; 255
    d212:	ce 01       	movw	r24, r28
    d214:	8d 59       	subi	r24, 0x9D	; 157
    d216:	9f 4f       	sbci	r25, 0xFF	; 255
    d218:	fc 01       	movw	r30, r24
    d21a:	60 81       	ld	r22, Z
    d21c:	71 81       	ldd	r23, Z+1	; 0x01
    d21e:	82 81       	ldd	r24, Z+2	; 0x02
    d220:	93 81       	ldd	r25, Z+3	; 0x03
    d222:	26 e6       	ldi	r18, 0x66	; 102
    d224:	36 e6       	ldi	r19, 0x66	; 102
    d226:	46 e6       	ldi	r20, 0x66	; 102
    d228:	55 e4       	ldi	r21, 0x45	; 69
    d22a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d22e:	dc 01       	movw	r26, r24
    d230:	cb 01       	movw	r24, r22
    d232:	f8 01       	movw	r30, r16
    d234:	80 83       	st	Z, r24
    d236:	91 83       	std	Z+1, r25	; 0x01
    d238:	a2 83       	std	Z+2, r26	; 0x02
    d23a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d23c:	ce 01       	movw	r24, r28
    d23e:	89 59       	subi	r24, 0x99	; 153
    d240:	9f 4f       	sbci	r25, 0xFF	; 255
    d242:	11 e0       	ldi	r17, 0x01	; 1
    d244:	fc 01       	movw	r30, r24
    d246:	60 81       	ld	r22, Z
    d248:	71 81       	ldd	r23, Z+1	; 0x01
    d24a:	82 81       	ldd	r24, Z+2	; 0x02
    d24c:	93 81       	ldd	r25, Z+3	; 0x03
    d24e:	20 e0       	ldi	r18, 0x00	; 0
    d250:	30 e0       	ldi	r19, 0x00	; 0
    d252:	40 e8       	ldi	r20, 0x80	; 128
    d254:	5f e3       	ldi	r21, 0x3F	; 63
    d256:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    d25a:	88 23       	and	r24, r24
    d25c:	0c f0       	brlt	.+2      	; 0xd260 <travel_path+0xd2a>
    d25e:	10 e0       	ldi	r17, 0x00	; 0
    d260:	11 23       	and	r17, r17
    d262:	49 f0       	breq	.+18     	; 0xd276 <travel_path+0xd40>
		__ticks = 1;
    d264:	ce 01       	movw	r24, r28
    d266:	85 59       	subi	r24, 0x95	; 149
    d268:	9f 4f       	sbci	r25, 0xFF	; 255
    d26a:	21 e0       	ldi	r18, 0x01	; 1
    d26c:	30 e0       	ldi	r19, 0x00	; 0
    d26e:	fc 01       	movw	r30, r24
    d270:	31 83       	std	Z+1, r19	; 0x01
    d272:	20 83       	st	Z, r18
    d274:	74 c0       	rjmp	.+232    	; 0xd35e <travel_path+0xe28>
	else if (__tmp > 65535)
    d276:	ce 01       	movw	r24, r28
    d278:	89 59       	subi	r24, 0x99	; 153
    d27a:	9f 4f       	sbci	r25, 0xFF	; 255
    d27c:	11 e0       	ldi	r17, 0x01	; 1
    d27e:	fc 01       	movw	r30, r24
    d280:	60 81       	ld	r22, Z
    d282:	71 81       	ldd	r23, Z+1	; 0x01
    d284:	82 81       	ldd	r24, Z+2	; 0x02
    d286:	93 81       	ldd	r25, Z+3	; 0x03
    d288:	20 e0       	ldi	r18, 0x00	; 0
    d28a:	3f ef       	ldi	r19, 0xFF	; 255
    d28c:	4f e7       	ldi	r20, 0x7F	; 127
    d28e:	57 e4       	ldi	r21, 0x47	; 71
    d290:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    d294:	18 16       	cp	r1, r24
    d296:	0c f0       	brlt	.+2      	; 0xd29a <travel_path+0xd64>
    d298:	10 e0       	ldi	r17, 0x00	; 0
    d29a:	11 23       	and	r17, r17
    d29c:	09 f4       	brne	.+2      	; 0xd2a0 <travel_path+0xd6a>
    d29e:	4d c0       	rjmp	.+154    	; 0xd33a <travel_path+0xe04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d2a0:	ce 01       	movw	r24, r28
    d2a2:	8d 59       	subi	r24, 0x9D	; 157
    d2a4:	9f 4f       	sbci	r25, 0xFF	; 255
    d2a6:	fc 01       	movw	r30, r24
    d2a8:	60 81       	ld	r22, Z
    d2aa:	71 81       	ldd	r23, Z+1	; 0x01
    d2ac:	82 81       	ldd	r24, Z+2	; 0x02
    d2ae:	93 81       	ldd	r25, Z+3	; 0x03
    d2b0:	20 e0       	ldi	r18, 0x00	; 0
    d2b2:	30 e0       	ldi	r19, 0x00	; 0
    d2b4:	40 e2       	ldi	r20, 0x20	; 32
    d2b6:	51 e4       	ldi	r21, 0x41	; 65
    d2b8:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d2bc:	dc 01       	movw	r26, r24
    d2be:	cb 01       	movw	r24, r22
    d2c0:	8e 01       	movw	r16, r28
    d2c2:	05 59       	subi	r16, 0x95	; 149
    d2c4:	1f 4f       	sbci	r17, 0xFF	; 255
    d2c6:	bc 01       	movw	r22, r24
    d2c8:	cd 01       	movw	r24, r26
    d2ca:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d2ce:	dc 01       	movw	r26, r24
    d2d0:	cb 01       	movw	r24, r22
    d2d2:	f8 01       	movw	r30, r16
    d2d4:	91 83       	std	Z+1, r25	; 0x01
    d2d6:	80 83       	st	Z, r24
    d2d8:	27 c0       	rjmp	.+78     	; 0xd328 <travel_path+0xdf2>
    d2da:	ce 01       	movw	r24, r28
    d2dc:	83 59       	subi	r24, 0x93	; 147
    d2de:	9f 4f       	sbci	r25, 0xFF	; 255
    d2e0:	20 e7       	ldi	r18, 0x70	; 112
    d2e2:	31 e0       	ldi	r19, 0x01	; 1
    d2e4:	fc 01       	movw	r30, r24
    d2e6:	31 83       	std	Z+1, r19	; 0x01
    d2e8:	20 83       	st	Z, r18
    d2ea:	ce 01       	movw	r24, r28
    d2ec:	83 59       	subi	r24, 0x93	; 147
    d2ee:	9f 4f       	sbci	r25, 0xFF	; 255
    d2f0:	fc 01       	movw	r30, r24
    d2f2:	80 81       	ld	r24, Z
    d2f4:	91 81       	ldd	r25, Z+1	; 0x01
    d2f6:	8c 01       	movw	r16, r24
    d2f8:	c8 01       	movw	r24, r16
    d2fa:	01 97       	sbiw	r24, 0x01	; 1
    d2fc:	f1 f7       	brne	.-4      	; 0xd2fa <travel_path+0xdc4>
    d2fe:	8c 01       	movw	r16, r24
    d300:	ce 01       	movw	r24, r28
    d302:	83 59       	subi	r24, 0x93	; 147
    d304:	9f 4f       	sbci	r25, 0xFF	; 255
    d306:	fc 01       	movw	r30, r24
    d308:	11 83       	std	Z+1, r17	; 0x01
    d30a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d30c:	ce 01       	movw	r24, r28
    d30e:	85 59       	subi	r24, 0x95	; 149
    d310:	9f 4f       	sbci	r25, 0xFF	; 255
    d312:	9e 01       	movw	r18, r28
    d314:	25 59       	subi	r18, 0x95	; 149
    d316:	3f 4f       	sbci	r19, 0xFF	; 255
    d318:	f9 01       	movw	r30, r18
    d31a:	20 81       	ld	r18, Z
    d31c:	31 81       	ldd	r19, Z+1	; 0x01
    d31e:	21 50       	subi	r18, 0x01	; 1
    d320:	30 40       	sbci	r19, 0x00	; 0
    d322:	fc 01       	movw	r30, r24
    d324:	31 83       	std	Z+1, r19	; 0x01
    d326:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d328:	ce 01       	movw	r24, r28
    d32a:	85 59       	subi	r24, 0x95	; 149
    d32c:	9f 4f       	sbci	r25, 0xFF	; 255
    d32e:	fc 01       	movw	r30, r24
    d330:	80 81       	ld	r24, Z
    d332:	91 81       	ldd	r25, Z+1	; 0x01
    d334:	00 97       	sbiw	r24, 0x00	; 0
    d336:	89 f6       	brne	.-94     	; 0xd2da <travel_path+0xda4>
    d338:	2f c0       	rjmp	.+94     	; 0xd398 <travel_path+0xe62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d33a:	8e 01       	movw	r16, r28
    d33c:	05 59       	subi	r16, 0x95	; 149
    d33e:	1f 4f       	sbci	r17, 0xFF	; 255
    d340:	ce 01       	movw	r24, r28
    d342:	89 59       	subi	r24, 0x99	; 153
    d344:	9f 4f       	sbci	r25, 0xFF	; 255
    d346:	fc 01       	movw	r30, r24
    d348:	60 81       	ld	r22, Z
    d34a:	71 81       	ldd	r23, Z+1	; 0x01
    d34c:	82 81       	ldd	r24, Z+2	; 0x02
    d34e:	93 81       	ldd	r25, Z+3	; 0x03
    d350:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d354:	dc 01       	movw	r26, r24
    d356:	cb 01       	movw	r24, r22
    d358:	f8 01       	movw	r30, r16
    d35a:	91 83       	std	Z+1, r25	; 0x01
    d35c:	80 83       	st	Z, r24
    d35e:	ce 01       	movw	r24, r28
    d360:	81 59       	subi	r24, 0x91	; 145
    d362:	9f 4f       	sbci	r25, 0xFF	; 255
    d364:	9e 01       	movw	r18, r28
    d366:	25 59       	subi	r18, 0x95	; 149
    d368:	3f 4f       	sbci	r19, 0xFF	; 255
    d36a:	f9 01       	movw	r30, r18
    d36c:	20 81       	ld	r18, Z
    d36e:	31 81       	ldd	r19, Z+1	; 0x01
    d370:	fc 01       	movw	r30, r24
    d372:	31 83       	std	Z+1, r19	; 0x01
    d374:	20 83       	st	Z, r18
    d376:	ce 01       	movw	r24, r28
    d378:	81 59       	subi	r24, 0x91	; 145
    d37a:	9f 4f       	sbci	r25, 0xFF	; 255
    d37c:	fc 01       	movw	r30, r24
    d37e:	80 81       	ld	r24, Z
    d380:	91 81       	ldd	r25, Z+1	; 0x01
    d382:	8c 01       	movw	r16, r24
    d384:	c8 01       	movw	r24, r16
    d386:	01 97       	sbiw	r24, 0x01	; 1
    d388:	f1 f7       	brne	.-4      	; 0xd386 <travel_path+0xe50>
    d38a:	8c 01       	movw	r16, r24
    d38c:	ce 01       	movw	r24, r28
    d38e:	81 59       	subi	r24, 0x91	; 145
    d390:	9f 4f       	sbci	r25, 0xFF	; 255
    d392:	fc 01       	movw	r30, r24
    d394:	11 83       	std	Z+1, r17	; 0x01
    d396:	00 83       	st	Z, r16
							_delay_ms(20);
							forward_mm(160);
    d398:	80 ea       	ldi	r24, 0xA0	; 160
    d39a:	90 e0       	ldi	r25, 0x00	; 0
    d39c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d3a0:	9e 01       	movw	r18, r28
    d3a2:	2f 58       	subi	r18, 0x8F	; 143
    d3a4:	3f 4f       	sbci	r19, 0xFF	; 255
    d3a6:	80 e0       	ldi	r24, 0x00	; 0
    d3a8:	90 e0       	ldi	r25, 0x00	; 0
    d3aa:	a0 ea       	ldi	r26, 0xA0	; 160
    d3ac:	b1 e4       	ldi	r27, 0x41	; 65
    d3ae:	f9 01       	movw	r30, r18
    d3b0:	80 83       	st	Z, r24
    d3b2:	91 83       	std	Z+1, r25	; 0x01
    d3b4:	a2 83       	std	Z+2, r26	; 0x02
    d3b6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d3b8:	8e 01       	movw	r16, r28
    d3ba:	0b 58       	subi	r16, 0x8B	; 139
    d3bc:	1f 4f       	sbci	r17, 0xFF	; 255
    d3be:	ce 01       	movw	r24, r28
    d3c0:	8f 58       	subi	r24, 0x8F	; 143
    d3c2:	9f 4f       	sbci	r25, 0xFF	; 255
    d3c4:	fc 01       	movw	r30, r24
    d3c6:	60 81       	ld	r22, Z
    d3c8:	71 81       	ldd	r23, Z+1	; 0x01
    d3ca:	82 81       	ldd	r24, Z+2	; 0x02
    d3cc:	93 81       	ldd	r25, Z+3	; 0x03
    d3ce:	26 e6       	ldi	r18, 0x66	; 102
    d3d0:	36 e6       	ldi	r19, 0x66	; 102
    d3d2:	46 e6       	ldi	r20, 0x66	; 102
    d3d4:	55 e4       	ldi	r21, 0x45	; 69
    d3d6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d3da:	dc 01       	movw	r26, r24
    d3dc:	cb 01       	movw	r24, r22
    d3de:	f8 01       	movw	r30, r16
    d3e0:	80 83       	st	Z, r24
    d3e2:	91 83       	std	Z+1, r25	; 0x01
    d3e4:	a2 83       	std	Z+2, r26	; 0x02
    d3e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d3e8:	ce 01       	movw	r24, r28
    d3ea:	8b 58       	subi	r24, 0x8B	; 139
    d3ec:	9f 4f       	sbci	r25, 0xFF	; 255
    d3ee:	11 e0       	ldi	r17, 0x01	; 1
    d3f0:	fc 01       	movw	r30, r24
    d3f2:	60 81       	ld	r22, Z
    d3f4:	71 81       	ldd	r23, Z+1	; 0x01
    d3f6:	82 81       	ldd	r24, Z+2	; 0x02
    d3f8:	93 81       	ldd	r25, Z+3	; 0x03
    d3fa:	20 e0       	ldi	r18, 0x00	; 0
    d3fc:	30 e0       	ldi	r19, 0x00	; 0
    d3fe:	40 e8       	ldi	r20, 0x80	; 128
    d400:	5f e3       	ldi	r21, 0x3F	; 63
    d402:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    d406:	88 23       	and	r24, r24
    d408:	0c f0       	brlt	.+2      	; 0xd40c <travel_path+0xed6>
    d40a:	10 e0       	ldi	r17, 0x00	; 0
    d40c:	11 23       	and	r17, r17
    d40e:	49 f0       	breq	.+18     	; 0xd422 <travel_path+0xeec>
		__ticks = 1;
    d410:	ce 01       	movw	r24, r28
    d412:	87 58       	subi	r24, 0x87	; 135
    d414:	9f 4f       	sbci	r25, 0xFF	; 255
    d416:	21 e0       	ldi	r18, 0x01	; 1
    d418:	30 e0       	ldi	r19, 0x00	; 0
    d41a:	fc 01       	movw	r30, r24
    d41c:	31 83       	std	Z+1, r19	; 0x01
    d41e:	20 83       	st	Z, r18
    d420:	74 c0       	rjmp	.+232    	; 0xd50a <travel_path+0xfd4>
	else if (__tmp > 65535)
    d422:	ce 01       	movw	r24, r28
    d424:	8b 58       	subi	r24, 0x8B	; 139
    d426:	9f 4f       	sbci	r25, 0xFF	; 255
    d428:	11 e0       	ldi	r17, 0x01	; 1
    d42a:	fc 01       	movw	r30, r24
    d42c:	60 81       	ld	r22, Z
    d42e:	71 81       	ldd	r23, Z+1	; 0x01
    d430:	82 81       	ldd	r24, Z+2	; 0x02
    d432:	93 81       	ldd	r25, Z+3	; 0x03
    d434:	20 e0       	ldi	r18, 0x00	; 0
    d436:	3f ef       	ldi	r19, 0xFF	; 255
    d438:	4f e7       	ldi	r20, 0x7F	; 127
    d43a:	57 e4       	ldi	r21, 0x47	; 71
    d43c:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    d440:	18 16       	cp	r1, r24
    d442:	0c f0       	brlt	.+2      	; 0xd446 <travel_path+0xf10>
    d444:	10 e0       	ldi	r17, 0x00	; 0
    d446:	11 23       	and	r17, r17
    d448:	09 f4       	brne	.+2      	; 0xd44c <travel_path+0xf16>
    d44a:	4d c0       	rjmp	.+154    	; 0xd4e6 <travel_path+0xfb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d44c:	ce 01       	movw	r24, r28
    d44e:	8f 58       	subi	r24, 0x8F	; 143
    d450:	9f 4f       	sbci	r25, 0xFF	; 255
    d452:	fc 01       	movw	r30, r24
    d454:	60 81       	ld	r22, Z
    d456:	71 81       	ldd	r23, Z+1	; 0x01
    d458:	82 81       	ldd	r24, Z+2	; 0x02
    d45a:	93 81       	ldd	r25, Z+3	; 0x03
    d45c:	20 e0       	ldi	r18, 0x00	; 0
    d45e:	30 e0       	ldi	r19, 0x00	; 0
    d460:	40 e2       	ldi	r20, 0x20	; 32
    d462:	51 e4       	ldi	r21, 0x41	; 65
    d464:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d468:	dc 01       	movw	r26, r24
    d46a:	cb 01       	movw	r24, r22
    d46c:	8e 01       	movw	r16, r28
    d46e:	07 58       	subi	r16, 0x87	; 135
    d470:	1f 4f       	sbci	r17, 0xFF	; 255
    d472:	bc 01       	movw	r22, r24
    d474:	cd 01       	movw	r24, r26
    d476:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d47a:	dc 01       	movw	r26, r24
    d47c:	cb 01       	movw	r24, r22
    d47e:	f8 01       	movw	r30, r16
    d480:	91 83       	std	Z+1, r25	; 0x01
    d482:	80 83       	st	Z, r24
    d484:	27 c0       	rjmp	.+78     	; 0xd4d4 <travel_path+0xf9e>
    d486:	ce 01       	movw	r24, r28
    d488:	85 58       	subi	r24, 0x85	; 133
    d48a:	9f 4f       	sbci	r25, 0xFF	; 255
    d48c:	20 e7       	ldi	r18, 0x70	; 112
    d48e:	31 e0       	ldi	r19, 0x01	; 1
    d490:	fc 01       	movw	r30, r24
    d492:	31 83       	std	Z+1, r19	; 0x01
    d494:	20 83       	st	Z, r18
    d496:	ce 01       	movw	r24, r28
    d498:	85 58       	subi	r24, 0x85	; 133
    d49a:	9f 4f       	sbci	r25, 0xFF	; 255
    d49c:	fc 01       	movw	r30, r24
    d49e:	80 81       	ld	r24, Z
    d4a0:	91 81       	ldd	r25, Z+1	; 0x01
    d4a2:	8c 01       	movw	r16, r24
    d4a4:	c8 01       	movw	r24, r16
    d4a6:	01 97       	sbiw	r24, 0x01	; 1
    d4a8:	f1 f7       	brne	.-4      	; 0xd4a6 <travel_path+0xf70>
    d4aa:	8c 01       	movw	r16, r24
    d4ac:	ce 01       	movw	r24, r28
    d4ae:	85 58       	subi	r24, 0x85	; 133
    d4b0:	9f 4f       	sbci	r25, 0xFF	; 255
    d4b2:	fc 01       	movw	r30, r24
    d4b4:	11 83       	std	Z+1, r17	; 0x01
    d4b6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d4b8:	ce 01       	movw	r24, r28
    d4ba:	87 58       	subi	r24, 0x87	; 135
    d4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d4be:	9e 01       	movw	r18, r28
    d4c0:	27 58       	subi	r18, 0x87	; 135
    d4c2:	3f 4f       	sbci	r19, 0xFF	; 255
    d4c4:	f9 01       	movw	r30, r18
    d4c6:	20 81       	ld	r18, Z
    d4c8:	31 81       	ldd	r19, Z+1	; 0x01
    d4ca:	21 50       	subi	r18, 0x01	; 1
    d4cc:	30 40       	sbci	r19, 0x00	; 0
    d4ce:	fc 01       	movw	r30, r24
    d4d0:	31 83       	std	Z+1, r19	; 0x01
    d4d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d4d4:	ce 01       	movw	r24, r28
    d4d6:	87 58       	subi	r24, 0x87	; 135
    d4d8:	9f 4f       	sbci	r25, 0xFF	; 255
    d4da:	fc 01       	movw	r30, r24
    d4dc:	80 81       	ld	r24, Z
    d4de:	91 81       	ldd	r25, Z+1	; 0x01
    d4e0:	00 97       	sbiw	r24, 0x00	; 0
    d4e2:	89 f6       	brne	.-94     	; 0xd486 <travel_path+0xf50>
    d4e4:	2f c0       	rjmp	.+94     	; 0xd544 <travel_path+0x100e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d4e6:	8e 01       	movw	r16, r28
    d4e8:	07 58       	subi	r16, 0x87	; 135
    d4ea:	1f 4f       	sbci	r17, 0xFF	; 255
    d4ec:	ce 01       	movw	r24, r28
    d4ee:	8b 58       	subi	r24, 0x8B	; 139
    d4f0:	9f 4f       	sbci	r25, 0xFF	; 255
    d4f2:	fc 01       	movw	r30, r24
    d4f4:	60 81       	ld	r22, Z
    d4f6:	71 81       	ldd	r23, Z+1	; 0x01
    d4f8:	82 81       	ldd	r24, Z+2	; 0x02
    d4fa:	93 81       	ldd	r25, Z+3	; 0x03
    d4fc:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d500:	dc 01       	movw	r26, r24
    d502:	cb 01       	movw	r24, r22
    d504:	f8 01       	movw	r30, r16
    d506:	91 83       	std	Z+1, r25	; 0x01
    d508:	80 83       	st	Z, r24
    d50a:	ce 01       	movw	r24, r28
    d50c:	83 58       	subi	r24, 0x83	; 131
    d50e:	9f 4f       	sbci	r25, 0xFF	; 255
    d510:	9e 01       	movw	r18, r28
    d512:	27 58       	subi	r18, 0x87	; 135
    d514:	3f 4f       	sbci	r19, 0xFF	; 255
    d516:	f9 01       	movw	r30, r18
    d518:	20 81       	ld	r18, Z
    d51a:	31 81       	ldd	r19, Z+1	; 0x01
    d51c:	fc 01       	movw	r30, r24
    d51e:	31 83       	std	Z+1, r19	; 0x01
    d520:	20 83       	st	Z, r18
    d522:	ce 01       	movw	r24, r28
    d524:	83 58       	subi	r24, 0x83	; 131
    d526:	9f 4f       	sbci	r25, 0xFF	; 255
    d528:	fc 01       	movw	r30, r24
    d52a:	80 81       	ld	r24, Z
    d52c:	91 81       	ldd	r25, Z+1	; 0x01
    d52e:	8c 01       	movw	r16, r24
    d530:	c8 01       	movw	r24, r16
    d532:	01 97       	sbiw	r24, 0x01	; 1
    d534:	f1 f7       	brne	.-4      	; 0xd532 <travel_path+0xffc>
    d536:	8c 01       	movw	r16, r24
    d538:	ce 01       	movw	r24, r28
    d53a:	83 58       	subi	r24, 0x83	; 131
    d53c:	9f 4f       	sbci	r25, 0xFF	; 255
    d53e:	fc 01       	movw	r30, r24
    d540:	11 83       	std	Z+1, r17	; 0x01
    d542:	00 83       	st	Z, r16
							_delay_ms(20);
							spl_left2();
    d544:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    d548:	9e 01       	movw	r18, r28
    d54a:	21 58       	subi	r18, 0x81	; 129
    d54c:	3f 4f       	sbci	r19, 0xFF	; 255
    d54e:	80 e0       	ldi	r24, 0x00	; 0
    d550:	90 e0       	ldi	r25, 0x00	; 0
    d552:	a0 ea       	ldi	r26, 0xA0	; 160
    d554:	b1 e4       	ldi	r27, 0x41	; 65
    d556:	f9 01       	movw	r30, r18
    d558:	80 83       	st	Z, r24
    d55a:	91 83       	std	Z+1, r25	; 0x01
    d55c:	a2 83       	std	Z+2, r26	; 0x02
    d55e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d560:	8e 01       	movw	r16, r28
    d562:	0d 57       	subi	r16, 0x7D	; 125
    d564:	1f 4f       	sbci	r17, 0xFF	; 255
    d566:	ce 01       	movw	r24, r28
    d568:	81 58       	subi	r24, 0x81	; 129
    d56a:	9f 4f       	sbci	r25, 0xFF	; 255
    d56c:	fc 01       	movw	r30, r24
    d56e:	60 81       	ld	r22, Z
    d570:	71 81       	ldd	r23, Z+1	; 0x01
    d572:	82 81       	ldd	r24, Z+2	; 0x02
    d574:	93 81       	ldd	r25, Z+3	; 0x03
    d576:	26 e6       	ldi	r18, 0x66	; 102
    d578:	36 e6       	ldi	r19, 0x66	; 102
    d57a:	46 e6       	ldi	r20, 0x66	; 102
    d57c:	55 e4       	ldi	r21, 0x45	; 69
    d57e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d582:	dc 01       	movw	r26, r24
    d584:	cb 01       	movw	r24, r22
    d586:	f8 01       	movw	r30, r16
    d588:	80 83       	st	Z, r24
    d58a:	91 83       	std	Z+1, r25	; 0x01
    d58c:	a2 83       	std	Z+2, r26	; 0x02
    d58e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d590:	ce 01       	movw	r24, r28
    d592:	8d 57       	subi	r24, 0x7D	; 125
    d594:	9f 4f       	sbci	r25, 0xFF	; 255
    d596:	11 e0       	ldi	r17, 0x01	; 1
    d598:	fc 01       	movw	r30, r24
    d59a:	60 81       	ld	r22, Z
    d59c:	71 81       	ldd	r23, Z+1	; 0x01
    d59e:	82 81       	ldd	r24, Z+2	; 0x02
    d5a0:	93 81       	ldd	r25, Z+3	; 0x03
    d5a2:	20 e0       	ldi	r18, 0x00	; 0
    d5a4:	30 e0       	ldi	r19, 0x00	; 0
    d5a6:	40 e8       	ldi	r20, 0x80	; 128
    d5a8:	5f e3       	ldi	r21, 0x3F	; 63
    d5aa:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    d5ae:	88 23       	and	r24, r24
    d5b0:	0c f0       	brlt	.+2      	; 0xd5b4 <travel_path+0x107e>
    d5b2:	10 e0       	ldi	r17, 0x00	; 0
    d5b4:	11 23       	and	r17, r17
    d5b6:	49 f0       	breq	.+18     	; 0xd5ca <travel_path+0x1094>
		__ticks = 1;
    d5b8:	ce 01       	movw	r24, r28
    d5ba:	89 57       	subi	r24, 0x79	; 121
    d5bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d5be:	21 e0       	ldi	r18, 0x01	; 1
    d5c0:	30 e0       	ldi	r19, 0x00	; 0
    d5c2:	fc 01       	movw	r30, r24
    d5c4:	31 83       	std	Z+1, r19	; 0x01
    d5c6:	20 83       	st	Z, r18
    d5c8:	74 c0       	rjmp	.+232    	; 0xd6b2 <travel_path+0x117c>
	else if (__tmp > 65535)
    d5ca:	ce 01       	movw	r24, r28
    d5cc:	8d 57       	subi	r24, 0x7D	; 125
    d5ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d5d0:	11 e0       	ldi	r17, 0x01	; 1
    d5d2:	fc 01       	movw	r30, r24
    d5d4:	60 81       	ld	r22, Z
    d5d6:	71 81       	ldd	r23, Z+1	; 0x01
    d5d8:	82 81       	ldd	r24, Z+2	; 0x02
    d5da:	93 81       	ldd	r25, Z+3	; 0x03
    d5dc:	20 e0       	ldi	r18, 0x00	; 0
    d5de:	3f ef       	ldi	r19, 0xFF	; 255
    d5e0:	4f e7       	ldi	r20, 0x7F	; 127
    d5e2:	57 e4       	ldi	r21, 0x47	; 71
    d5e4:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    d5e8:	18 16       	cp	r1, r24
    d5ea:	0c f0       	brlt	.+2      	; 0xd5ee <travel_path+0x10b8>
    d5ec:	10 e0       	ldi	r17, 0x00	; 0
    d5ee:	11 23       	and	r17, r17
    d5f0:	09 f4       	brne	.+2      	; 0xd5f4 <travel_path+0x10be>
    d5f2:	4d c0       	rjmp	.+154    	; 0xd68e <travel_path+0x1158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d5f4:	ce 01       	movw	r24, r28
    d5f6:	81 58       	subi	r24, 0x81	; 129
    d5f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d5fa:	fc 01       	movw	r30, r24
    d5fc:	60 81       	ld	r22, Z
    d5fe:	71 81       	ldd	r23, Z+1	; 0x01
    d600:	82 81       	ldd	r24, Z+2	; 0x02
    d602:	93 81       	ldd	r25, Z+3	; 0x03
    d604:	20 e0       	ldi	r18, 0x00	; 0
    d606:	30 e0       	ldi	r19, 0x00	; 0
    d608:	40 e2       	ldi	r20, 0x20	; 32
    d60a:	51 e4       	ldi	r21, 0x41	; 65
    d60c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d610:	dc 01       	movw	r26, r24
    d612:	cb 01       	movw	r24, r22
    d614:	8e 01       	movw	r16, r28
    d616:	09 57       	subi	r16, 0x79	; 121
    d618:	1f 4f       	sbci	r17, 0xFF	; 255
    d61a:	bc 01       	movw	r22, r24
    d61c:	cd 01       	movw	r24, r26
    d61e:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d622:	dc 01       	movw	r26, r24
    d624:	cb 01       	movw	r24, r22
    d626:	f8 01       	movw	r30, r16
    d628:	91 83       	std	Z+1, r25	; 0x01
    d62a:	80 83       	st	Z, r24
    d62c:	27 c0       	rjmp	.+78     	; 0xd67c <travel_path+0x1146>
    d62e:	ce 01       	movw	r24, r28
    d630:	87 57       	subi	r24, 0x77	; 119
    d632:	9f 4f       	sbci	r25, 0xFF	; 255
    d634:	20 e7       	ldi	r18, 0x70	; 112
    d636:	31 e0       	ldi	r19, 0x01	; 1
    d638:	fc 01       	movw	r30, r24
    d63a:	31 83       	std	Z+1, r19	; 0x01
    d63c:	20 83       	st	Z, r18
    d63e:	ce 01       	movw	r24, r28
    d640:	87 57       	subi	r24, 0x77	; 119
    d642:	9f 4f       	sbci	r25, 0xFF	; 255
    d644:	fc 01       	movw	r30, r24
    d646:	80 81       	ld	r24, Z
    d648:	91 81       	ldd	r25, Z+1	; 0x01
    d64a:	8c 01       	movw	r16, r24
    d64c:	c8 01       	movw	r24, r16
    d64e:	01 97       	sbiw	r24, 0x01	; 1
    d650:	f1 f7       	brne	.-4      	; 0xd64e <travel_path+0x1118>
    d652:	8c 01       	movw	r16, r24
    d654:	ce 01       	movw	r24, r28
    d656:	87 57       	subi	r24, 0x77	; 119
    d658:	9f 4f       	sbci	r25, 0xFF	; 255
    d65a:	fc 01       	movw	r30, r24
    d65c:	11 83       	std	Z+1, r17	; 0x01
    d65e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d660:	ce 01       	movw	r24, r28
    d662:	89 57       	subi	r24, 0x79	; 121
    d664:	9f 4f       	sbci	r25, 0xFF	; 255
    d666:	9e 01       	movw	r18, r28
    d668:	29 57       	subi	r18, 0x79	; 121
    d66a:	3f 4f       	sbci	r19, 0xFF	; 255
    d66c:	f9 01       	movw	r30, r18
    d66e:	20 81       	ld	r18, Z
    d670:	31 81       	ldd	r19, Z+1	; 0x01
    d672:	21 50       	subi	r18, 0x01	; 1
    d674:	30 40       	sbci	r19, 0x00	; 0
    d676:	fc 01       	movw	r30, r24
    d678:	31 83       	std	Z+1, r19	; 0x01
    d67a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d67c:	ce 01       	movw	r24, r28
    d67e:	89 57       	subi	r24, 0x79	; 121
    d680:	9f 4f       	sbci	r25, 0xFF	; 255
    d682:	fc 01       	movw	r30, r24
    d684:	80 81       	ld	r24, Z
    d686:	91 81       	ldd	r25, Z+1	; 0x01
    d688:	00 97       	sbiw	r24, 0x00	; 0
    d68a:	89 f6       	brne	.-94     	; 0xd62e <travel_path+0x10f8>
    d68c:	32 c0       	rjmp	.+100    	; 0xd6f2 <travel_path+0x11bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d68e:	8e 01       	movw	r16, r28
    d690:	09 57       	subi	r16, 0x79	; 121
    d692:	1f 4f       	sbci	r17, 0xFF	; 255
    d694:	ce 01       	movw	r24, r28
    d696:	8d 57       	subi	r24, 0x7D	; 125
    d698:	9f 4f       	sbci	r25, 0xFF	; 255
    d69a:	fc 01       	movw	r30, r24
    d69c:	60 81       	ld	r22, Z
    d69e:	71 81       	ldd	r23, Z+1	; 0x01
    d6a0:	82 81       	ldd	r24, Z+2	; 0x02
    d6a2:	93 81       	ldd	r25, Z+3	; 0x03
    d6a4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d6a8:	dc 01       	movw	r26, r24
    d6aa:	cb 01       	movw	r24, r22
    d6ac:	f8 01       	movw	r30, r16
    d6ae:	91 83       	std	Z+1, r25	; 0x01
    d6b0:	80 83       	st	Z, r24
    d6b2:	ce 01       	movw	r24, r28
    d6b4:	85 57       	subi	r24, 0x75	; 117
    d6b6:	9f 4f       	sbci	r25, 0xFF	; 255
    d6b8:	9e 01       	movw	r18, r28
    d6ba:	29 57       	subi	r18, 0x79	; 121
    d6bc:	3f 4f       	sbci	r19, 0xFF	; 255
    d6be:	f9 01       	movw	r30, r18
    d6c0:	20 81       	ld	r18, Z
    d6c2:	31 81       	ldd	r19, Z+1	; 0x01
    d6c4:	fc 01       	movw	r30, r24
    d6c6:	31 83       	std	Z+1, r19	; 0x01
    d6c8:	20 83       	st	Z, r18
    d6ca:	ce 01       	movw	r24, r28
    d6cc:	85 57       	subi	r24, 0x75	; 117
    d6ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d6d0:	fc 01       	movw	r30, r24
    d6d2:	80 81       	ld	r24, Z
    d6d4:	91 81       	ldd	r25, Z+1	; 0x01
    d6d6:	8c 01       	movw	r16, r24
    d6d8:	c8 01       	movw	r24, r16
    d6da:	01 97       	sbiw	r24, 0x01	; 1
    d6dc:	f1 f7       	brne	.-4      	; 0xd6da <travel_path+0x11a4>
    d6de:	8c 01       	movw	r16, r24
    d6e0:	ce 01       	movw	r24, r28
    d6e2:	85 57       	subi	r24, 0x75	; 117
    d6e4:	9f 4f       	sbci	r25, 0xFF	; 255
    d6e6:	fc 01       	movw	r30, r24
    d6e8:	11 83       	std	Z+1, r17	; 0x01
    d6ea:	00 83       	st	Z, r16
    d6ec:	02 c0       	rjmp	.+4      	; 0xd6f2 <travel_path+0x11bc>
							_delay_ms(20);
						}
				else
				correct_left();
    d6ee:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node++;
    d6f2:	80 91 6d 03 	lds	r24, 0x036D
    d6f6:	90 91 6e 03 	lds	r25, 0x036E
    d6fa:	01 96       	adiw	r24, 0x01	; 1
    d6fc:	90 93 6e 03 	sts	0x036E, r25
    d700:	80 93 6d 03 	sts	0x036D, r24
				pick_drop(master_path[node]);
    d704:	80 91 6d 03 	lds	r24, 0x036D
    d708:	90 91 6e 03 	lds	r25, 0x036E
    d70c:	8f 58       	subi	r24, 0x8F	; 143
    d70e:	9c 4f       	sbci	r25, 0xFC	; 252
    d710:	fc 01       	movw	r30, r24
    d712:	80 81       	ld	r24, Z
    d714:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <pick_drop>
				node++;
    d718:	80 91 6d 03 	lds	r24, 0x036D
    d71c:	90 91 6e 03 	lds	r25, 0x036E
    d720:	01 96       	adiw	r24, 0x01	; 1
    d722:	90 93 6e 03 	sts	0x036E, r25
    d726:	80 93 6d 03 	sts	0x036D, r24
				travel_path(master_path[node]);
    d72a:	80 91 6d 03 	lds	r24, 0x036D
    d72e:	90 91 6e 03 	lds	r25, 0x036E
    d732:	8f 58       	subi	r24, 0x8F	; 143
    d734:	9c 4f       	sbci	r25, 0xFC	; 252
    d736:	fc 01       	movw	r30, r24
    d738:	80 81       	ld	r24, Z
    d73a:	0e 94 9b 62 	call	0xc536	; 0xc536 <travel_path>
    d73e:	90 c4       	rjmp	.+2336   	; 0xe060 <travel_path+0x1b2a>
			}
			else{
				node=node-2;
    d740:	80 91 6d 03 	lds	r24, 0x036D
    d744:	90 91 6e 03 	lds	r25, 0x036E
    d748:	02 97       	sbiw	r24, 0x02	; 2
    d74a:	90 93 6e 03 	sts	0x036E, r25
    d74e:	80 93 6d 03 	sts	0x036D, r24
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
    d752:	80 91 6d 03 	lds	r24, 0x036D
    d756:	90 91 6e 03 	lds	r25, 0x036E
    d75a:	8f 58       	subi	r24, 0x8F	; 143
    d75c:	9c 4f       	sbci	r25, 0xFC	; 252
    d75e:	fc 01       	movw	r30, r24
    d760:	80 81       	ld	r24, Z
    d762:	82 35       	cpi	r24, 0x52	; 82
    d764:	a1 f0       	breq	.+40     	; 0xd78e <travel_path+0x1258>
    d766:	80 91 6d 03 	lds	r24, 0x036D
    d76a:	90 91 6e 03 	lds	r25, 0x036E
    d76e:	8f 58       	subi	r24, 0x8F	; 143
    d770:	9c 4f       	sbci	r25, 0xFC	; 252
    d772:	fc 01       	movw	r30, r24
    d774:	80 81       	ld	r24, Z
    d776:	8c 34       	cpi	r24, 0x4C	; 76
    d778:	51 f0       	breq	.+20     	; 0xd78e <travel_path+0x1258>
    d77a:	80 91 6d 03 	lds	r24, 0x036D
    d77e:	90 91 6e 03 	lds	r25, 0x036E
    d782:	8f 58       	subi	r24, 0x8F	; 143
    d784:	9c 4f       	sbci	r25, 0xFC	; 252
    d786:	fc 01       	movw	r30, r24
    d788:	80 81       	ld	r24, Z
    d78a:	85 35       	cpi	r24, 0x55	; 85
    d78c:	19 f4       	brne	.+6      	; 0xd794 <travel_path+0x125e>
				correct_left2();
    d78e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <correct_left2>
    d792:	02 c0       	rjmp	.+4      	; 0xd798 <travel_path+0x1262>
				else
				correct_left();
    d794:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node+2;
    d798:	80 91 6d 03 	lds	r24, 0x036D
    d79c:	90 91 6e 03 	lds	r25, 0x036E
    d7a0:	02 96       	adiw	r24, 0x02	; 2
    d7a2:	90 93 6e 03 	sts	0x036E, r25
    d7a6:	80 93 6d 03 	sts	0x036D, r24
    d7aa:	5a c4       	rjmp	.+2228   	; 0xe060 <travel_path+0x1b2a>
			}
		}
		else if(pos_val=='N'){
    d7ac:	ce 01       	movw	r24, r28
    d7ae:	89 54       	subi	r24, 0x49	; 73
    d7b0:	9f 4f       	sbci	r25, 0xFF	; 255
    d7b2:	fc 01       	movw	r30, r24
    d7b4:	80 81       	ld	r24, Z
    d7b6:	8e 34       	cpi	r24, 0x4E	; 78
    d7b8:	09 f0       	breq	.+2      	; 0xd7bc <travel_path+0x1286>
    d7ba:	d4 c2       	rjmp	.+1448   	; 0xdd64 <travel_path+0x182e>
		if(node==0){
    d7bc:	80 91 6d 03 	lds	r24, 0x036D
    d7c0:	90 91 6e 03 	lds	r25, 0x036E
    d7c4:	00 97       	sbiw	r24, 0x00	; 0
    d7c6:	09 f0       	breq	.+2      	; 0xd7ca <travel_path+0x1294>
    d7c8:	65 c1       	rjmp	.+714    	; 0xda94 <travel_path+0x155e>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    d7ca:	80 91 6d 03 	lds	r24, 0x036D
    d7ce:	90 91 6e 03 	lds	r25, 0x036E
    d7d2:	01 96       	adiw	r24, 0x01	; 1
    d7d4:	8f 58       	subi	r24, 0x8F	; 143
    d7d6:	9c 4f       	sbci	r25, 0xFC	; 252
    d7d8:	fc 01       	movw	r30, r24
    d7da:	80 81       	ld	r24, Z
    d7dc:	84 34       	cpi	r24, 0x44	; 68
    d7de:	09 f4       	brne	.+2      	; 0xd7e2 <travel_path+0x12ac>
    d7e0:	5b c0       	rjmp	.+182    	; 0xd898 <travel_path+0x1362>
    d7e2:	80 91 6d 03 	lds	r24, 0x036D
    d7e6:	90 91 6e 03 	lds	r25, 0x036E
    d7ea:	01 96       	adiw	r24, 0x01	; 1
    d7ec:	8f 58       	subi	r24, 0x8F	; 143
    d7ee:	9c 4f       	sbci	r25, 0xFC	; 252
    d7f0:	fc 01       	movw	r30, r24
    d7f2:	80 81       	ld	r24, Z
    d7f4:	81 33       	cpi	r24, 0x31	; 49
    d7f6:	09 f4       	brne	.+2      	; 0xd7fa <travel_path+0x12c4>
    d7f8:	4f c0       	rjmp	.+158    	; 0xd898 <travel_path+0x1362>
    d7fa:	80 91 6d 03 	lds	r24, 0x036D
    d7fe:	90 91 6e 03 	lds	r25, 0x036E
    d802:	01 96       	adiw	r24, 0x01	; 1
    d804:	8f 58       	subi	r24, 0x8F	; 143
    d806:	9c 4f       	sbci	r25, 0xFC	; 252
    d808:	fc 01       	movw	r30, r24
    d80a:	80 81       	ld	r24, Z
    d80c:	82 33       	cpi	r24, 0x32	; 50
    d80e:	09 f4       	brne	.+2      	; 0xd812 <travel_path+0x12dc>
    d810:	43 c0       	rjmp	.+134    	; 0xd898 <travel_path+0x1362>
    d812:	80 91 6d 03 	lds	r24, 0x036D
    d816:	90 91 6e 03 	lds	r25, 0x036E
    d81a:	01 96       	adiw	r24, 0x01	; 1
    d81c:	8f 58       	subi	r24, 0x8F	; 143
    d81e:	9c 4f       	sbci	r25, 0xFC	; 252
    d820:	fc 01       	movw	r30, r24
    d822:	80 81       	ld	r24, Z
    d824:	83 33       	cpi	r24, 0x33	; 51
    d826:	c1 f1       	breq	.+112    	; 0xd898 <travel_path+0x1362>
    d828:	80 91 6d 03 	lds	r24, 0x036D
    d82c:	90 91 6e 03 	lds	r25, 0x036E
    d830:	01 96       	adiw	r24, 0x01	; 1
    d832:	8f 58       	subi	r24, 0x8F	; 143
    d834:	9c 4f       	sbci	r25, 0xFC	; 252
    d836:	fc 01       	movw	r30, r24
    d838:	80 81       	ld	r24, Z
    d83a:	84 33       	cpi	r24, 0x34	; 52
    d83c:	69 f1       	breq	.+90     	; 0xd898 <travel_path+0x1362>
    d83e:	80 91 6d 03 	lds	r24, 0x036D
    d842:	90 91 6e 03 	lds	r25, 0x036E
    d846:	01 96       	adiw	r24, 0x01	; 1
    d848:	8f 58       	subi	r24, 0x8F	; 143
    d84a:	9c 4f       	sbci	r25, 0xFC	; 252
    d84c:	fc 01       	movw	r30, r24
    d84e:	80 81       	ld	r24, Z
    d850:	85 33       	cpi	r24, 0x35	; 53
    d852:	11 f1       	breq	.+68     	; 0xd898 <travel_path+0x1362>
    d854:	80 91 6d 03 	lds	r24, 0x036D
    d858:	90 91 6e 03 	lds	r25, 0x036E
    d85c:	01 96       	adiw	r24, 0x01	; 1
    d85e:	8f 58       	subi	r24, 0x8F	; 143
    d860:	9c 4f       	sbci	r25, 0xFC	; 252
    d862:	fc 01       	movw	r30, r24
    d864:	80 81       	ld	r24, Z
    d866:	86 33       	cpi	r24, 0x36	; 54
    d868:	b9 f0       	breq	.+46     	; 0xd898 <travel_path+0x1362>
    d86a:	80 91 6d 03 	lds	r24, 0x036D
    d86e:	90 91 6e 03 	lds	r25, 0x036E
    d872:	01 96       	adiw	r24, 0x01	; 1
    d874:	8f 58       	subi	r24, 0x8F	; 143
    d876:	9c 4f       	sbci	r25, 0xFC	; 252
    d878:	fc 01       	movw	r30, r24
    d87a:	80 81       	ld	r24, Z
    d87c:	87 33       	cpi	r24, 0x37	; 55
    d87e:	61 f0       	breq	.+24     	; 0xd898 <travel_path+0x1362>
    d880:	80 91 6d 03 	lds	r24, 0x036D
    d884:	90 91 6e 03 	lds	r25, 0x036E
    d888:	01 96       	adiw	r24, 0x01	; 1
    d88a:	8f 58       	subi	r24, 0x8F	; 143
    d88c:	9c 4f       	sbci	r25, 0xFC	; 252
    d88e:	fc 01       	movw	r30, r24
    d890:	80 81       	ld	r24, Z
    d892:	88 33       	cpi	r24, 0x38	; 56
    d894:	09 f0       	breq	.+2      	; 0xd898 <travel_path+0x1362>
    d896:	fb c0       	rjmp	.+502    	; 0xda8e <travel_path+0x1558>
		{
						stop();
    d898:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d89c:	9e 01       	movw	r18, r28
    d89e:	23 57       	subi	r18, 0x73	; 115
    d8a0:	3f 4f       	sbci	r19, 0xFF	; 255
    d8a2:	80 e0       	ldi	r24, 0x00	; 0
    d8a4:	90 e0       	ldi	r25, 0x00	; 0
    d8a6:	a0 ea       	ldi	r26, 0xA0	; 160
    d8a8:	b1 e4       	ldi	r27, 0x41	; 65
    d8aa:	f9 01       	movw	r30, r18
    d8ac:	80 83       	st	Z, r24
    d8ae:	91 83       	std	Z+1, r25	; 0x01
    d8b0:	a2 83       	std	Z+2, r26	; 0x02
    d8b2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d8b4:	8e 01       	movw	r16, r28
    d8b6:	0f 56       	subi	r16, 0x6F	; 111
    d8b8:	1f 4f       	sbci	r17, 0xFF	; 255
    d8ba:	ce 01       	movw	r24, r28
    d8bc:	83 57       	subi	r24, 0x73	; 115
    d8be:	9f 4f       	sbci	r25, 0xFF	; 255
    d8c0:	fc 01       	movw	r30, r24
    d8c2:	60 81       	ld	r22, Z
    d8c4:	71 81       	ldd	r23, Z+1	; 0x01
    d8c6:	82 81       	ldd	r24, Z+2	; 0x02
    d8c8:	93 81       	ldd	r25, Z+3	; 0x03
    d8ca:	26 e6       	ldi	r18, 0x66	; 102
    d8cc:	36 e6       	ldi	r19, 0x66	; 102
    d8ce:	46 e6       	ldi	r20, 0x66	; 102
    d8d0:	55 e4       	ldi	r21, 0x45	; 69
    d8d2:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d8d6:	dc 01       	movw	r26, r24
    d8d8:	cb 01       	movw	r24, r22
    d8da:	f8 01       	movw	r30, r16
    d8dc:	80 83       	st	Z, r24
    d8de:	91 83       	std	Z+1, r25	; 0x01
    d8e0:	a2 83       	std	Z+2, r26	; 0x02
    d8e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d8e4:	ce 01       	movw	r24, r28
    d8e6:	8f 56       	subi	r24, 0x6F	; 111
    d8e8:	9f 4f       	sbci	r25, 0xFF	; 255
    d8ea:	11 e0       	ldi	r17, 0x01	; 1
    d8ec:	fc 01       	movw	r30, r24
    d8ee:	60 81       	ld	r22, Z
    d8f0:	71 81       	ldd	r23, Z+1	; 0x01
    d8f2:	82 81       	ldd	r24, Z+2	; 0x02
    d8f4:	93 81       	ldd	r25, Z+3	; 0x03
    d8f6:	20 e0       	ldi	r18, 0x00	; 0
    d8f8:	30 e0       	ldi	r19, 0x00	; 0
    d8fa:	40 e8       	ldi	r20, 0x80	; 128
    d8fc:	5f e3       	ldi	r21, 0x3F	; 63
    d8fe:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    d902:	88 23       	and	r24, r24
    d904:	0c f0       	brlt	.+2      	; 0xd908 <travel_path+0x13d2>
    d906:	10 e0       	ldi	r17, 0x00	; 0
    d908:	11 23       	and	r17, r17
    d90a:	49 f0       	breq	.+18     	; 0xd91e <travel_path+0x13e8>
		__ticks = 1;
    d90c:	ce 01       	movw	r24, r28
    d90e:	8b 56       	subi	r24, 0x6B	; 107
    d910:	9f 4f       	sbci	r25, 0xFF	; 255
    d912:	21 e0       	ldi	r18, 0x01	; 1
    d914:	30 e0       	ldi	r19, 0x00	; 0
    d916:	fc 01       	movw	r30, r24
    d918:	31 83       	std	Z+1, r19	; 0x01
    d91a:	20 83       	st	Z, r18
    d91c:	74 c0       	rjmp	.+232    	; 0xda06 <travel_path+0x14d0>
	else if (__tmp > 65535)
    d91e:	ce 01       	movw	r24, r28
    d920:	8f 56       	subi	r24, 0x6F	; 111
    d922:	9f 4f       	sbci	r25, 0xFF	; 255
    d924:	11 e0       	ldi	r17, 0x01	; 1
    d926:	fc 01       	movw	r30, r24
    d928:	60 81       	ld	r22, Z
    d92a:	71 81       	ldd	r23, Z+1	; 0x01
    d92c:	82 81       	ldd	r24, Z+2	; 0x02
    d92e:	93 81       	ldd	r25, Z+3	; 0x03
    d930:	20 e0       	ldi	r18, 0x00	; 0
    d932:	3f ef       	ldi	r19, 0xFF	; 255
    d934:	4f e7       	ldi	r20, 0x7F	; 127
    d936:	57 e4       	ldi	r21, 0x47	; 71
    d938:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    d93c:	18 16       	cp	r1, r24
    d93e:	0c f0       	brlt	.+2      	; 0xd942 <travel_path+0x140c>
    d940:	10 e0       	ldi	r17, 0x00	; 0
    d942:	11 23       	and	r17, r17
    d944:	09 f4       	brne	.+2      	; 0xd948 <travel_path+0x1412>
    d946:	4d c0       	rjmp	.+154    	; 0xd9e2 <travel_path+0x14ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d948:	ce 01       	movw	r24, r28
    d94a:	83 57       	subi	r24, 0x73	; 115
    d94c:	9f 4f       	sbci	r25, 0xFF	; 255
    d94e:	fc 01       	movw	r30, r24
    d950:	60 81       	ld	r22, Z
    d952:	71 81       	ldd	r23, Z+1	; 0x01
    d954:	82 81       	ldd	r24, Z+2	; 0x02
    d956:	93 81       	ldd	r25, Z+3	; 0x03
    d958:	20 e0       	ldi	r18, 0x00	; 0
    d95a:	30 e0       	ldi	r19, 0x00	; 0
    d95c:	40 e2       	ldi	r20, 0x20	; 32
    d95e:	51 e4       	ldi	r21, 0x41	; 65
    d960:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    d964:	dc 01       	movw	r26, r24
    d966:	cb 01       	movw	r24, r22
    d968:	8e 01       	movw	r16, r28
    d96a:	0b 56       	subi	r16, 0x6B	; 107
    d96c:	1f 4f       	sbci	r17, 0xFF	; 255
    d96e:	bc 01       	movw	r22, r24
    d970:	cd 01       	movw	r24, r26
    d972:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d976:	dc 01       	movw	r26, r24
    d978:	cb 01       	movw	r24, r22
    d97a:	f8 01       	movw	r30, r16
    d97c:	91 83       	std	Z+1, r25	; 0x01
    d97e:	80 83       	st	Z, r24
    d980:	27 c0       	rjmp	.+78     	; 0xd9d0 <travel_path+0x149a>
    d982:	ce 01       	movw	r24, r28
    d984:	89 56       	subi	r24, 0x69	; 105
    d986:	9f 4f       	sbci	r25, 0xFF	; 255
    d988:	20 e7       	ldi	r18, 0x70	; 112
    d98a:	31 e0       	ldi	r19, 0x01	; 1
    d98c:	fc 01       	movw	r30, r24
    d98e:	31 83       	std	Z+1, r19	; 0x01
    d990:	20 83       	st	Z, r18
    d992:	ce 01       	movw	r24, r28
    d994:	89 56       	subi	r24, 0x69	; 105
    d996:	9f 4f       	sbci	r25, 0xFF	; 255
    d998:	fc 01       	movw	r30, r24
    d99a:	80 81       	ld	r24, Z
    d99c:	91 81       	ldd	r25, Z+1	; 0x01
    d99e:	8c 01       	movw	r16, r24
    d9a0:	c8 01       	movw	r24, r16
    d9a2:	01 97       	sbiw	r24, 0x01	; 1
    d9a4:	f1 f7       	brne	.-4      	; 0xd9a2 <travel_path+0x146c>
    d9a6:	8c 01       	movw	r16, r24
    d9a8:	ce 01       	movw	r24, r28
    d9aa:	89 56       	subi	r24, 0x69	; 105
    d9ac:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ae:	fc 01       	movw	r30, r24
    d9b0:	11 83       	std	Z+1, r17	; 0x01
    d9b2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d9b4:	ce 01       	movw	r24, r28
    d9b6:	8b 56       	subi	r24, 0x6B	; 107
    d9b8:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ba:	9e 01       	movw	r18, r28
    d9bc:	2b 56       	subi	r18, 0x6B	; 107
    d9be:	3f 4f       	sbci	r19, 0xFF	; 255
    d9c0:	f9 01       	movw	r30, r18
    d9c2:	20 81       	ld	r18, Z
    d9c4:	31 81       	ldd	r19, Z+1	; 0x01
    d9c6:	21 50       	subi	r18, 0x01	; 1
    d9c8:	30 40       	sbci	r19, 0x00	; 0
    d9ca:	fc 01       	movw	r30, r24
    d9cc:	31 83       	std	Z+1, r19	; 0x01
    d9ce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d9d0:	ce 01       	movw	r24, r28
    d9d2:	8b 56       	subi	r24, 0x6B	; 107
    d9d4:	9f 4f       	sbci	r25, 0xFF	; 255
    d9d6:	fc 01       	movw	r30, r24
    d9d8:	80 81       	ld	r24, Z
    d9da:	91 81       	ldd	r25, Z+1	; 0x01
    d9dc:	00 97       	sbiw	r24, 0x00	; 0
    d9de:	89 f6       	brne	.-94     	; 0xd982 <travel_path+0x144c>
    d9e0:	2f c0       	rjmp	.+94     	; 0xda40 <travel_path+0x150a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d9e2:	8e 01       	movw	r16, r28
    d9e4:	0b 56       	subi	r16, 0x6B	; 107
    d9e6:	1f 4f       	sbci	r17, 0xFF	; 255
    d9e8:	ce 01       	movw	r24, r28
    d9ea:	8f 56       	subi	r24, 0x6F	; 111
    d9ec:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ee:	fc 01       	movw	r30, r24
    d9f0:	60 81       	ld	r22, Z
    d9f2:	71 81       	ldd	r23, Z+1	; 0x01
    d9f4:	82 81       	ldd	r24, Z+2	; 0x02
    d9f6:	93 81       	ldd	r25, Z+3	; 0x03
    d9f8:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    d9fc:	dc 01       	movw	r26, r24
    d9fe:	cb 01       	movw	r24, r22
    da00:	f8 01       	movw	r30, r16
    da02:	91 83       	std	Z+1, r25	; 0x01
    da04:	80 83       	st	Z, r24
    da06:	ce 01       	movw	r24, r28
    da08:	87 56       	subi	r24, 0x67	; 103
    da0a:	9f 4f       	sbci	r25, 0xFF	; 255
    da0c:	9e 01       	movw	r18, r28
    da0e:	2b 56       	subi	r18, 0x6B	; 107
    da10:	3f 4f       	sbci	r19, 0xFF	; 255
    da12:	f9 01       	movw	r30, r18
    da14:	20 81       	ld	r18, Z
    da16:	31 81       	ldd	r19, Z+1	; 0x01
    da18:	fc 01       	movw	r30, r24
    da1a:	31 83       	std	Z+1, r19	; 0x01
    da1c:	20 83       	st	Z, r18
    da1e:	ce 01       	movw	r24, r28
    da20:	87 56       	subi	r24, 0x67	; 103
    da22:	9f 4f       	sbci	r25, 0xFF	; 255
    da24:	fc 01       	movw	r30, r24
    da26:	80 81       	ld	r24, Z
    da28:	91 81       	ldd	r25, Z+1	; 0x01
    da2a:	8c 01       	movw	r16, r24
    da2c:	c8 01       	movw	r24, r16
    da2e:	01 97       	sbiw	r24, 0x01	; 1
    da30:	f1 f7       	brne	.-4      	; 0xda2e <travel_path+0x14f8>
    da32:	8c 01       	movw	r16, r24
    da34:	ce 01       	movw	r24, r28
    da36:	87 56       	subi	r24, 0x67	; 103
    da38:	9f 4f       	sbci	r25, 0xFF	; 255
    da3a:	fc 01       	movw	r30, r24
    da3c:	11 83       	std	Z+1, r17	; 0x01
    da3e:	00 83       	st	Z, r16
						_delay_ms(20);
						node++;
    da40:	80 91 6d 03 	lds	r24, 0x036D
    da44:	90 91 6e 03 	lds	r25, 0x036E
    da48:	01 96       	adiw	r24, 0x01	; 1
    da4a:	90 93 6e 03 	sts	0x036E, r25
    da4e:	80 93 6d 03 	sts	0x036D, r24
						pick_drop(master_path[node]);
    da52:	80 91 6d 03 	lds	r24, 0x036D
    da56:	90 91 6e 03 	lds	r25, 0x036E
    da5a:	8f 58       	subi	r24, 0x8F	; 143
    da5c:	9c 4f       	sbci	r25, 0xFC	; 252
    da5e:	fc 01       	movw	r30, r24
    da60:	80 81       	ld	r24, Z
    da62:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <pick_drop>
						node++;
    da66:	80 91 6d 03 	lds	r24, 0x036D
    da6a:	90 91 6e 03 	lds	r25, 0x036E
    da6e:	01 96       	adiw	r24, 0x01	; 1
    da70:	90 93 6e 03 	sts	0x036E, r25
    da74:	80 93 6d 03 	sts	0x036D, r24
						travel_path(master_path[node]);
    da78:	80 91 6d 03 	lds	r24, 0x036D
    da7c:	90 91 6e 03 	lds	r25, 0x036E
    da80:	8f 58       	subi	r24, 0x8F	; 143
    da82:	9c 4f       	sbci	r25, 0xFC	; 252
    da84:	fc 01       	movw	r30, r24
    da86:	80 81       	ld	r24, Z
    da88:	0e 94 9b 62 	call	0xc536	; 0xc536 <travel_path>
			_delay_ms(20);
			forward_mm(30);
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
    da8c:	e9 c2       	rjmp	.+1490   	; 0xe060 <travel_path+0x1b2a>
						pick_drop(master_path[node]);
						node++;
						travel_path(master_path[node]);
		}
		else
		forward();
    da8e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    da92:	e6 c2       	rjmp	.+1484   	; 0xe060 <travel_path+0x1b2a>
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
    da94:	80 91 6d 03 	lds	r24, 0x036D
    da98:	90 91 6e 03 	lds	r25, 0x036E
    da9c:	01 97       	sbiw	r24, 0x01	; 1
    da9e:	8f 58       	subi	r24, 0x8F	; 143
    daa0:	9c 4f       	sbci	r25, 0xFC	; 252
    daa2:	fc 01       	movw	r30, r24
    daa4:	80 81       	ld	r24, Z
    daa6:	84 34       	cpi	r24, 0x44	; 68
    daa8:	09 f4       	brne	.+2      	; 0xdaac <travel_path+0x1576>
    daaa:	5a c0       	rjmp	.+180    	; 0xdb60 <travel_path+0x162a>
    daac:	80 91 6d 03 	lds	r24, 0x036D
    dab0:	90 91 6e 03 	lds	r25, 0x036E
    dab4:	01 97       	sbiw	r24, 0x01	; 1
    dab6:	8f 58       	subi	r24, 0x8F	; 143
    dab8:	9c 4f       	sbci	r25, 0xFC	; 252
    daba:	fc 01       	movw	r30, r24
    dabc:	80 81       	ld	r24, Z
    dabe:	81 33       	cpi	r24, 0x31	; 49
    dac0:	09 f4       	brne	.+2      	; 0xdac4 <travel_path+0x158e>
    dac2:	4e c0       	rjmp	.+156    	; 0xdb60 <travel_path+0x162a>
    dac4:	80 91 6d 03 	lds	r24, 0x036D
    dac8:	90 91 6e 03 	lds	r25, 0x036E
    dacc:	01 97       	sbiw	r24, 0x01	; 1
    dace:	8f 58       	subi	r24, 0x8F	; 143
    dad0:	9c 4f       	sbci	r25, 0xFC	; 252
    dad2:	fc 01       	movw	r30, r24
    dad4:	80 81       	ld	r24, Z
    dad6:	82 33       	cpi	r24, 0x32	; 50
    dad8:	09 f4       	brne	.+2      	; 0xdadc <travel_path+0x15a6>
    dada:	42 c0       	rjmp	.+132    	; 0xdb60 <travel_path+0x162a>
    dadc:	80 91 6d 03 	lds	r24, 0x036D
    dae0:	90 91 6e 03 	lds	r25, 0x036E
    dae4:	01 97       	sbiw	r24, 0x01	; 1
    dae6:	8f 58       	subi	r24, 0x8F	; 143
    dae8:	9c 4f       	sbci	r25, 0xFC	; 252
    daea:	fc 01       	movw	r30, r24
    daec:	80 81       	ld	r24, Z
    daee:	83 33       	cpi	r24, 0x33	; 51
    daf0:	b9 f1       	breq	.+110    	; 0xdb60 <travel_path+0x162a>
    daf2:	80 91 6d 03 	lds	r24, 0x036D
    daf6:	90 91 6e 03 	lds	r25, 0x036E
    dafa:	01 97       	sbiw	r24, 0x01	; 1
    dafc:	8f 58       	subi	r24, 0x8F	; 143
    dafe:	9c 4f       	sbci	r25, 0xFC	; 252
    db00:	fc 01       	movw	r30, r24
    db02:	80 81       	ld	r24, Z
    db04:	84 33       	cpi	r24, 0x34	; 52
    db06:	61 f1       	breq	.+88     	; 0xdb60 <travel_path+0x162a>
    db08:	80 91 6d 03 	lds	r24, 0x036D
    db0c:	90 91 6e 03 	lds	r25, 0x036E
    db10:	01 97       	sbiw	r24, 0x01	; 1
    db12:	8f 58       	subi	r24, 0x8F	; 143
    db14:	9c 4f       	sbci	r25, 0xFC	; 252
    db16:	fc 01       	movw	r30, r24
    db18:	80 81       	ld	r24, Z
    db1a:	85 33       	cpi	r24, 0x35	; 53
    db1c:	09 f1       	breq	.+66     	; 0xdb60 <travel_path+0x162a>
    db1e:	80 91 6d 03 	lds	r24, 0x036D
    db22:	90 91 6e 03 	lds	r25, 0x036E
    db26:	01 97       	sbiw	r24, 0x01	; 1
    db28:	8f 58       	subi	r24, 0x8F	; 143
    db2a:	9c 4f       	sbci	r25, 0xFC	; 252
    db2c:	fc 01       	movw	r30, r24
    db2e:	80 81       	ld	r24, Z
    db30:	86 33       	cpi	r24, 0x36	; 54
    db32:	b1 f0       	breq	.+44     	; 0xdb60 <travel_path+0x162a>
    db34:	80 91 6d 03 	lds	r24, 0x036D
    db38:	90 91 6e 03 	lds	r25, 0x036E
    db3c:	01 97       	sbiw	r24, 0x01	; 1
    db3e:	8f 58       	subi	r24, 0x8F	; 143
    db40:	9c 4f       	sbci	r25, 0xFC	; 252
    db42:	fc 01       	movw	r30, r24
    db44:	80 81       	ld	r24, Z
    db46:	87 33       	cpi	r24, 0x37	; 55
    db48:	59 f0       	breq	.+22     	; 0xdb60 <travel_path+0x162a>
    db4a:	80 91 6d 03 	lds	r24, 0x036D
    db4e:	90 91 6e 03 	lds	r25, 0x036E
    db52:	01 97       	sbiw	r24, 0x01	; 1
    db54:	8f 58       	subi	r24, 0x8F	; 143
    db56:	9c 4f       	sbci	r25, 0xFC	; 252
    db58:	fc 01       	movw	r30, r24
    db5a:	80 81       	ld	r24, Z
    db5c:	88 33       	cpi	r24, 0x38	; 56
    db5e:	19 f4       	brne	.+6      	; 0xdb66 <travel_path+0x1630>
		{   forward();
    db60:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    db64:	7d c2       	rjmp	.+1274   	; 0xe060 <travel_path+0x1b2a>
		}
		else
		{
			stop();
    db66:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    db6a:	9e 01       	movw	r18, r28
    db6c:	25 56       	subi	r18, 0x65	; 101
    db6e:	3f 4f       	sbci	r19, 0xFF	; 255
    db70:	80 e0       	ldi	r24, 0x00	; 0
    db72:	90 e0       	ldi	r25, 0x00	; 0
    db74:	a0 ea       	ldi	r26, 0xA0	; 160
    db76:	b1 e4       	ldi	r27, 0x41	; 65
    db78:	f9 01       	movw	r30, r18
    db7a:	80 83       	st	Z, r24
    db7c:	91 83       	std	Z+1, r25	; 0x01
    db7e:	a2 83       	std	Z+2, r26	; 0x02
    db80:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    db82:	8e 01       	movw	r16, r28
    db84:	01 56       	subi	r16, 0x61	; 97
    db86:	1f 4f       	sbci	r17, 0xFF	; 255
    db88:	ce 01       	movw	r24, r28
    db8a:	85 56       	subi	r24, 0x65	; 101
    db8c:	9f 4f       	sbci	r25, 0xFF	; 255
    db8e:	fc 01       	movw	r30, r24
    db90:	60 81       	ld	r22, Z
    db92:	71 81       	ldd	r23, Z+1	; 0x01
    db94:	82 81       	ldd	r24, Z+2	; 0x02
    db96:	93 81       	ldd	r25, Z+3	; 0x03
    db98:	26 e6       	ldi	r18, 0x66	; 102
    db9a:	36 e6       	ldi	r19, 0x66	; 102
    db9c:	46 e6       	ldi	r20, 0x66	; 102
    db9e:	55 e4       	ldi	r21, 0x45	; 69
    dba0:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    dba4:	dc 01       	movw	r26, r24
    dba6:	cb 01       	movw	r24, r22
    dba8:	f8 01       	movw	r30, r16
    dbaa:	80 83       	st	Z, r24
    dbac:	91 83       	std	Z+1, r25	; 0x01
    dbae:	a2 83       	std	Z+2, r26	; 0x02
    dbb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    dbb2:	ce 01       	movw	r24, r28
    dbb4:	81 56       	subi	r24, 0x61	; 97
    dbb6:	9f 4f       	sbci	r25, 0xFF	; 255
    dbb8:	11 e0       	ldi	r17, 0x01	; 1
    dbba:	fc 01       	movw	r30, r24
    dbbc:	60 81       	ld	r22, Z
    dbbe:	71 81       	ldd	r23, Z+1	; 0x01
    dbc0:	82 81       	ldd	r24, Z+2	; 0x02
    dbc2:	93 81       	ldd	r25, Z+3	; 0x03
    dbc4:	20 e0       	ldi	r18, 0x00	; 0
    dbc6:	30 e0       	ldi	r19, 0x00	; 0
    dbc8:	40 e8       	ldi	r20, 0x80	; 128
    dbca:	5f e3       	ldi	r21, 0x3F	; 63
    dbcc:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    dbd0:	88 23       	and	r24, r24
    dbd2:	0c f0       	brlt	.+2      	; 0xdbd6 <travel_path+0x16a0>
    dbd4:	10 e0       	ldi	r17, 0x00	; 0
    dbd6:	11 23       	and	r17, r17
    dbd8:	49 f0       	breq	.+18     	; 0xdbec <travel_path+0x16b6>
		__ticks = 1;
    dbda:	ce 01       	movw	r24, r28
    dbdc:	8d 55       	subi	r24, 0x5D	; 93
    dbde:	9f 4f       	sbci	r25, 0xFF	; 255
    dbe0:	21 e0       	ldi	r18, 0x01	; 1
    dbe2:	30 e0       	ldi	r19, 0x00	; 0
    dbe4:	fc 01       	movw	r30, r24
    dbe6:	31 83       	std	Z+1, r19	; 0x01
    dbe8:	20 83       	st	Z, r18
    dbea:	74 c0       	rjmp	.+232    	; 0xdcd4 <travel_path+0x179e>
	else if (__tmp > 65535)
    dbec:	ce 01       	movw	r24, r28
    dbee:	81 56       	subi	r24, 0x61	; 97
    dbf0:	9f 4f       	sbci	r25, 0xFF	; 255
    dbf2:	11 e0       	ldi	r17, 0x01	; 1
    dbf4:	fc 01       	movw	r30, r24
    dbf6:	60 81       	ld	r22, Z
    dbf8:	71 81       	ldd	r23, Z+1	; 0x01
    dbfa:	82 81       	ldd	r24, Z+2	; 0x02
    dbfc:	93 81       	ldd	r25, Z+3	; 0x03
    dbfe:	20 e0       	ldi	r18, 0x00	; 0
    dc00:	3f ef       	ldi	r19, 0xFF	; 255
    dc02:	4f e7       	ldi	r20, 0x7F	; 127
    dc04:	57 e4       	ldi	r21, 0x47	; 71
    dc06:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    dc0a:	18 16       	cp	r1, r24
    dc0c:	0c f0       	brlt	.+2      	; 0xdc10 <travel_path+0x16da>
    dc0e:	10 e0       	ldi	r17, 0x00	; 0
    dc10:	11 23       	and	r17, r17
    dc12:	09 f4       	brne	.+2      	; 0xdc16 <travel_path+0x16e0>
    dc14:	4d c0       	rjmp	.+154    	; 0xdcb0 <travel_path+0x177a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    dc16:	ce 01       	movw	r24, r28
    dc18:	85 56       	subi	r24, 0x65	; 101
    dc1a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc1c:	fc 01       	movw	r30, r24
    dc1e:	60 81       	ld	r22, Z
    dc20:	71 81       	ldd	r23, Z+1	; 0x01
    dc22:	82 81       	ldd	r24, Z+2	; 0x02
    dc24:	93 81       	ldd	r25, Z+3	; 0x03
    dc26:	20 e0       	ldi	r18, 0x00	; 0
    dc28:	30 e0       	ldi	r19, 0x00	; 0
    dc2a:	40 e2       	ldi	r20, 0x20	; 32
    dc2c:	51 e4       	ldi	r21, 0x41	; 65
    dc2e:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    dc32:	dc 01       	movw	r26, r24
    dc34:	cb 01       	movw	r24, r22
    dc36:	8e 01       	movw	r16, r28
    dc38:	0d 55       	subi	r16, 0x5D	; 93
    dc3a:	1f 4f       	sbci	r17, 0xFF	; 255
    dc3c:	bc 01       	movw	r22, r24
    dc3e:	cd 01       	movw	r24, r26
    dc40:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    dc44:	dc 01       	movw	r26, r24
    dc46:	cb 01       	movw	r24, r22
    dc48:	f8 01       	movw	r30, r16
    dc4a:	91 83       	std	Z+1, r25	; 0x01
    dc4c:	80 83       	st	Z, r24
    dc4e:	27 c0       	rjmp	.+78     	; 0xdc9e <travel_path+0x1768>
    dc50:	ce 01       	movw	r24, r28
    dc52:	8b 55       	subi	r24, 0x5B	; 91
    dc54:	9f 4f       	sbci	r25, 0xFF	; 255
    dc56:	20 e7       	ldi	r18, 0x70	; 112
    dc58:	31 e0       	ldi	r19, 0x01	; 1
    dc5a:	fc 01       	movw	r30, r24
    dc5c:	31 83       	std	Z+1, r19	; 0x01
    dc5e:	20 83       	st	Z, r18
    dc60:	ce 01       	movw	r24, r28
    dc62:	8b 55       	subi	r24, 0x5B	; 91
    dc64:	9f 4f       	sbci	r25, 0xFF	; 255
    dc66:	fc 01       	movw	r30, r24
    dc68:	80 81       	ld	r24, Z
    dc6a:	91 81       	ldd	r25, Z+1	; 0x01
    dc6c:	8c 01       	movw	r16, r24
    dc6e:	c8 01       	movw	r24, r16
    dc70:	01 97       	sbiw	r24, 0x01	; 1
    dc72:	f1 f7       	brne	.-4      	; 0xdc70 <travel_path+0x173a>
    dc74:	8c 01       	movw	r16, r24
    dc76:	ce 01       	movw	r24, r28
    dc78:	8b 55       	subi	r24, 0x5B	; 91
    dc7a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc7c:	fc 01       	movw	r30, r24
    dc7e:	11 83       	std	Z+1, r17	; 0x01
    dc80:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    dc82:	ce 01       	movw	r24, r28
    dc84:	8d 55       	subi	r24, 0x5D	; 93
    dc86:	9f 4f       	sbci	r25, 0xFF	; 255
    dc88:	9e 01       	movw	r18, r28
    dc8a:	2d 55       	subi	r18, 0x5D	; 93
    dc8c:	3f 4f       	sbci	r19, 0xFF	; 255
    dc8e:	f9 01       	movw	r30, r18
    dc90:	20 81       	ld	r18, Z
    dc92:	31 81       	ldd	r19, Z+1	; 0x01
    dc94:	21 50       	subi	r18, 0x01	; 1
    dc96:	30 40       	sbci	r19, 0x00	; 0
    dc98:	fc 01       	movw	r30, r24
    dc9a:	31 83       	std	Z+1, r19	; 0x01
    dc9c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dc9e:	ce 01       	movw	r24, r28
    dca0:	8d 55       	subi	r24, 0x5D	; 93
    dca2:	9f 4f       	sbci	r25, 0xFF	; 255
    dca4:	fc 01       	movw	r30, r24
    dca6:	80 81       	ld	r24, Z
    dca8:	91 81       	ldd	r25, Z+1	; 0x01
    dcaa:	00 97       	sbiw	r24, 0x00	; 0
    dcac:	89 f6       	brne	.-94     	; 0xdc50 <travel_path+0x171a>
    dcae:	2f c0       	rjmp	.+94     	; 0xdd0e <travel_path+0x17d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dcb0:	8e 01       	movw	r16, r28
    dcb2:	0d 55       	subi	r16, 0x5D	; 93
    dcb4:	1f 4f       	sbci	r17, 0xFF	; 255
    dcb6:	ce 01       	movw	r24, r28
    dcb8:	81 56       	subi	r24, 0x61	; 97
    dcba:	9f 4f       	sbci	r25, 0xFF	; 255
    dcbc:	fc 01       	movw	r30, r24
    dcbe:	60 81       	ld	r22, Z
    dcc0:	71 81       	ldd	r23, Z+1	; 0x01
    dcc2:	82 81       	ldd	r24, Z+2	; 0x02
    dcc4:	93 81       	ldd	r25, Z+3	; 0x03
    dcc6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    dcca:	dc 01       	movw	r26, r24
    dccc:	cb 01       	movw	r24, r22
    dcce:	f8 01       	movw	r30, r16
    dcd0:	91 83       	std	Z+1, r25	; 0x01
    dcd2:	80 83       	st	Z, r24
    dcd4:	ce 01       	movw	r24, r28
    dcd6:	89 55       	subi	r24, 0x59	; 89
    dcd8:	9f 4f       	sbci	r25, 0xFF	; 255
    dcda:	9e 01       	movw	r18, r28
    dcdc:	2d 55       	subi	r18, 0x5D	; 93
    dcde:	3f 4f       	sbci	r19, 0xFF	; 255
    dce0:	f9 01       	movw	r30, r18
    dce2:	20 81       	ld	r18, Z
    dce4:	31 81       	ldd	r19, Z+1	; 0x01
    dce6:	fc 01       	movw	r30, r24
    dce8:	31 83       	std	Z+1, r19	; 0x01
    dcea:	20 83       	st	Z, r18
    dcec:	ce 01       	movw	r24, r28
    dcee:	89 55       	subi	r24, 0x59	; 89
    dcf0:	9f 4f       	sbci	r25, 0xFF	; 255
    dcf2:	fc 01       	movw	r30, r24
    dcf4:	80 81       	ld	r24, Z
    dcf6:	91 81       	ldd	r25, Z+1	; 0x01
    dcf8:	8c 01       	movw	r16, r24
    dcfa:	c8 01       	movw	r24, r16
    dcfc:	01 97       	sbiw	r24, 0x01	; 1
    dcfe:	f1 f7       	brne	.-4      	; 0xdcfc <travel_path+0x17c6>
    dd00:	8c 01       	movw	r16, r24
    dd02:	ce 01       	movw	r24, r28
    dd04:	89 55       	subi	r24, 0x59	; 89
    dd06:	9f 4f       	sbci	r25, 0xFF	; 255
    dd08:	fc 01       	movw	r30, r24
    dd0a:	11 83       	std	Z+1, r17	; 0x01
    dd0c:	00 83       	st	Z, r16
			_delay_ms(20);
			forward_mm(30);
    dd0e:	8e e1       	ldi	r24, 0x1E	; 30
    dd10:	90 e0       	ldi	r25, 0x00	; 0
    dd12:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
			node++;
    dd16:	80 91 6d 03 	lds	r24, 0x036D
    dd1a:	90 91 6e 03 	lds	r25, 0x036E
    dd1e:	01 96       	adiw	r24, 0x01	; 1
    dd20:	90 93 6e 03 	sts	0x036E, r25
    dd24:	80 93 6d 03 	sts	0x036D, r24
			pick_drop(master_path[node]);
    dd28:	80 91 6d 03 	lds	r24, 0x036D
    dd2c:	90 91 6e 03 	lds	r25, 0x036E
    dd30:	8f 58       	subi	r24, 0x8F	; 143
    dd32:	9c 4f       	sbci	r25, 0xFC	; 252
    dd34:	fc 01       	movw	r30, r24
    dd36:	80 81       	ld	r24, Z
    dd38:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <pick_drop>
			node++;
    dd3c:	80 91 6d 03 	lds	r24, 0x036D
    dd40:	90 91 6e 03 	lds	r25, 0x036E
    dd44:	01 96       	adiw	r24, 0x01	; 1
    dd46:	90 93 6e 03 	sts	0x036E, r25
    dd4a:	80 93 6d 03 	sts	0x036D, r24
			travel_path(master_path[node]);
    dd4e:	80 91 6d 03 	lds	r24, 0x036D
    dd52:	90 91 6e 03 	lds	r25, 0x036E
    dd56:	8f 58       	subi	r24, 0x8F	; 143
    dd58:	9c 4f       	sbci	r25, 0xFC	; 252
    dd5a:	fc 01       	movw	r30, r24
    dd5c:	80 81       	ld	r24, Z
    dd5e:	0e 94 9b 62 	call	0xc536	; 0xc536 <travel_path>
    dd62:	7e c1       	rjmp	.+764    	; 0xe060 <travel_path+0x1b2a>
		}
		}
	else if(pos_val=='U'){
    dd64:	ce 01       	movw	r24, r28
    dd66:	89 54       	subi	r24, 0x49	; 73
    dd68:	9f 4f       	sbci	r25, 0xFF	; 255
    dd6a:	fc 01       	movw	r30, r24
    dd6c:	80 81       	ld	r24, Z
    dd6e:	85 35       	cpi	r24, 0x55	; 85
    dd70:	09 f0       	breq	.+2      	; 0xdd74 <travel_path+0x183e>
    dd72:	67 c1       	rjmp	.+718    	; 0xe042 <travel_path+0x1b0c>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    dd74:	80 91 6d 03 	lds	r24, 0x036D
    dd78:	90 91 6e 03 	lds	r25, 0x036E
    dd7c:	01 96       	adiw	r24, 0x01	; 1
    dd7e:	8f 58       	subi	r24, 0x8F	; 143
    dd80:	9c 4f       	sbci	r25, 0xFC	; 252
    dd82:	fc 01       	movw	r30, r24
    dd84:	80 81       	ld	r24, Z
    dd86:	84 34       	cpi	r24, 0x44	; 68
    dd88:	09 f4       	brne	.+2      	; 0xdd8c <travel_path+0x1856>
    dd8a:	5b c0       	rjmp	.+182    	; 0xde42 <travel_path+0x190c>
    dd8c:	80 91 6d 03 	lds	r24, 0x036D
    dd90:	90 91 6e 03 	lds	r25, 0x036E
    dd94:	01 96       	adiw	r24, 0x01	; 1
    dd96:	8f 58       	subi	r24, 0x8F	; 143
    dd98:	9c 4f       	sbci	r25, 0xFC	; 252
    dd9a:	fc 01       	movw	r30, r24
    dd9c:	80 81       	ld	r24, Z
    dd9e:	81 33       	cpi	r24, 0x31	; 49
    dda0:	09 f4       	brne	.+2      	; 0xdda4 <travel_path+0x186e>
    dda2:	4f c0       	rjmp	.+158    	; 0xde42 <travel_path+0x190c>
    dda4:	80 91 6d 03 	lds	r24, 0x036D
    dda8:	90 91 6e 03 	lds	r25, 0x036E
    ddac:	01 96       	adiw	r24, 0x01	; 1
    ddae:	8f 58       	subi	r24, 0x8F	; 143
    ddb0:	9c 4f       	sbci	r25, 0xFC	; 252
    ddb2:	fc 01       	movw	r30, r24
    ddb4:	80 81       	ld	r24, Z
    ddb6:	82 33       	cpi	r24, 0x32	; 50
    ddb8:	09 f4       	brne	.+2      	; 0xddbc <travel_path+0x1886>
    ddba:	43 c0       	rjmp	.+134    	; 0xde42 <travel_path+0x190c>
    ddbc:	80 91 6d 03 	lds	r24, 0x036D
    ddc0:	90 91 6e 03 	lds	r25, 0x036E
    ddc4:	01 96       	adiw	r24, 0x01	; 1
    ddc6:	8f 58       	subi	r24, 0x8F	; 143
    ddc8:	9c 4f       	sbci	r25, 0xFC	; 252
    ddca:	fc 01       	movw	r30, r24
    ddcc:	80 81       	ld	r24, Z
    ddce:	83 33       	cpi	r24, 0x33	; 51
    ddd0:	c1 f1       	breq	.+112    	; 0xde42 <travel_path+0x190c>
    ddd2:	80 91 6d 03 	lds	r24, 0x036D
    ddd6:	90 91 6e 03 	lds	r25, 0x036E
    ddda:	01 96       	adiw	r24, 0x01	; 1
    dddc:	8f 58       	subi	r24, 0x8F	; 143
    ddde:	9c 4f       	sbci	r25, 0xFC	; 252
    dde0:	fc 01       	movw	r30, r24
    dde2:	80 81       	ld	r24, Z
    dde4:	84 33       	cpi	r24, 0x34	; 52
    dde6:	69 f1       	breq	.+90     	; 0xde42 <travel_path+0x190c>
    dde8:	80 91 6d 03 	lds	r24, 0x036D
    ddec:	90 91 6e 03 	lds	r25, 0x036E
    ddf0:	01 96       	adiw	r24, 0x01	; 1
    ddf2:	8f 58       	subi	r24, 0x8F	; 143
    ddf4:	9c 4f       	sbci	r25, 0xFC	; 252
    ddf6:	fc 01       	movw	r30, r24
    ddf8:	80 81       	ld	r24, Z
    ddfa:	85 33       	cpi	r24, 0x35	; 53
    ddfc:	11 f1       	breq	.+68     	; 0xde42 <travel_path+0x190c>
    ddfe:	80 91 6d 03 	lds	r24, 0x036D
    de02:	90 91 6e 03 	lds	r25, 0x036E
    de06:	01 96       	adiw	r24, 0x01	; 1
    de08:	8f 58       	subi	r24, 0x8F	; 143
    de0a:	9c 4f       	sbci	r25, 0xFC	; 252
    de0c:	fc 01       	movw	r30, r24
    de0e:	80 81       	ld	r24, Z
    de10:	86 33       	cpi	r24, 0x36	; 54
    de12:	b9 f0       	breq	.+46     	; 0xde42 <travel_path+0x190c>
    de14:	80 91 6d 03 	lds	r24, 0x036D
    de18:	90 91 6e 03 	lds	r25, 0x036E
    de1c:	01 96       	adiw	r24, 0x01	; 1
    de1e:	8f 58       	subi	r24, 0x8F	; 143
    de20:	9c 4f       	sbci	r25, 0xFC	; 252
    de22:	fc 01       	movw	r30, r24
    de24:	80 81       	ld	r24, Z
    de26:	87 33       	cpi	r24, 0x37	; 55
    de28:	61 f0       	breq	.+24     	; 0xde42 <travel_path+0x190c>
    de2a:	80 91 6d 03 	lds	r24, 0x036D
    de2e:	90 91 6e 03 	lds	r25, 0x036E
    de32:	01 96       	adiw	r24, 0x01	; 1
    de34:	8f 58       	subi	r24, 0x8F	; 143
    de36:	9c 4f       	sbci	r25, 0xFC	; 252
    de38:	fc 01       	movw	r30, r24
    de3a:	80 81       	ld	r24, Z
    de3c:	88 33       	cpi	r24, 0x38	; 56
    de3e:	09 f0       	breq	.+2      	; 0xde42 <travel_path+0x190c>
    de40:	fd c0       	rjmp	.+506    	; 0xe03c <travel_path+0x1b06>
		{
			stop();
    de42:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    de46:	9e 01       	movw	r18, r28
    de48:	27 55       	subi	r18, 0x57	; 87
    de4a:	3f 4f       	sbci	r19, 0xFF	; 255
    de4c:	80 e0       	ldi	r24, 0x00	; 0
    de4e:	90 e0       	ldi	r25, 0x00	; 0
    de50:	a0 ea       	ldi	r26, 0xA0	; 160
    de52:	b1 e4       	ldi	r27, 0x41	; 65
    de54:	f9 01       	movw	r30, r18
    de56:	80 83       	st	Z, r24
    de58:	91 83       	std	Z+1, r25	; 0x01
    de5a:	a2 83       	std	Z+2, r26	; 0x02
    de5c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    de5e:	8e 01       	movw	r16, r28
    de60:	03 55       	subi	r16, 0x53	; 83
    de62:	1f 4f       	sbci	r17, 0xFF	; 255
    de64:	ce 01       	movw	r24, r28
    de66:	87 55       	subi	r24, 0x57	; 87
    de68:	9f 4f       	sbci	r25, 0xFF	; 255
    de6a:	fc 01       	movw	r30, r24
    de6c:	60 81       	ld	r22, Z
    de6e:	71 81       	ldd	r23, Z+1	; 0x01
    de70:	82 81       	ldd	r24, Z+2	; 0x02
    de72:	93 81       	ldd	r25, Z+3	; 0x03
    de74:	26 e6       	ldi	r18, 0x66	; 102
    de76:	36 e6       	ldi	r19, 0x66	; 102
    de78:	46 e6       	ldi	r20, 0x66	; 102
    de7a:	55 e4       	ldi	r21, 0x45	; 69
    de7c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    de80:	dc 01       	movw	r26, r24
    de82:	cb 01       	movw	r24, r22
    de84:	f8 01       	movw	r30, r16
    de86:	80 83       	st	Z, r24
    de88:	91 83       	std	Z+1, r25	; 0x01
    de8a:	a2 83       	std	Z+2, r26	; 0x02
    de8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    de8e:	ce 01       	movw	r24, r28
    de90:	83 55       	subi	r24, 0x53	; 83
    de92:	9f 4f       	sbci	r25, 0xFF	; 255
    de94:	11 e0       	ldi	r17, 0x01	; 1
    de96:	fc 01       	movw	r30, r24
    de98:	60 81       	ld	r22, Z
    de9a:	71 81       	ldd	r23, Z+1	; 0x01
    de9c:	82 81       	ldd	r24, Z+2	; 0x02
    de9e:	93 81       	ldd	r25, Z+3	; 0x03
    dea0:	20 e0       	ldi	r18, 0x00	; 0
    dea2:	30 e0       	ldi	r19, 0x00	; 0
    dea4:	40 e8       	ldi	r20, 0x80	; 128
    dea6:	5f e3       	ldi	r21, 0x3F	; 63
    dea8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    deac:	88 23       	and	r24, r24
    deae:	0c f0       	brlt	.+2      	; 0xdeb2 <travel_path+0x197c>
    deb0:	10 e0       	ldi	r17, 0x00	; 0
    deb2:	11 23       	and	r17, r17
    deb4:	49 f0       	breq	.+18     	; 0xdec8 <travel_path+0x1992>
		__ticks = 1;
    deb6:	ce 01       	movw	r24, r28
    deb8:	8f 54       	subi	r24, 0x4F	; 79
    deba:	9f 4f       	sbci	r25, 0xFF	; 255
    debc:	21 e0       	ldi	r18, 0x01	; 1
    debe:	30 e0       	ldi	r19, 0x00	; 0
    dec0:	fc 01       	movw	r30, r24
    dec2:	31 83       	std	Z+1, r19	; 0x01
    dec4:	20 83       	st	Z, r18
    dec6:	74 c0       	rjmp	.+232    	; 0xdfb0 <travel_path+0x1a7a>
	else if (__tmp > 65535)
    dec8:	ce 01       	movw	r24, r28
    deca:	83 55       	subi	r24, 0x53	; 83
    decc:	9f 4f       	sbci	r25, 0xFF	; 255
    dece:	11 e0       	ldi	r17, 0x01	; 1
    ded0:	fc 01       	movw	r30, r24
    ded2:	60 81       	ld	r22, Z
    ded4:	71 81       	ldd	r23, Z+1	; 0x01
    ded6:	82 81       	ldd	r24, Z+2	; 0x02
    ded8:	93 81       	ldd	r25, Z+3	; 0x03
    deda:	20 e0       	ldi	r18, 0x00	; 0
    dedc:	3f ef       	ldi	r19, 0xFF	; 255
    dede:	4f e7       	ldi	r20, 0x7F	; 127
    dee0:	57 e4       	ldi	r21, 0x47	; 71
    dee2:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    dee6:	18 16       	cp	r1, r24
    dee8:	0c f0       	brlt	.+2      	; 0xdeec <travel_path+0x19b6>
    deea:	10 e0       	ldi	r17, 0x00	; 0
    deec:	11 23       	and	r17, r17
    deee:	09 f4       	brne	.+2      	; 0xdef2 <travel_path+0x19bc>
    def0:	4d c0       	rjmp	.+154    	; 0xdf8c <travel_path+0x1a56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    def2:	ce 01       	movw	r24, r28
    def4:	87 55       	subi	r24, 0x57	; 87
    def6:	9f 4f       	sbci	r25, 0xFF	; 255
    def8:	fc 01       	movw	r30, r24
    defa:	60 81       	ld	r22, Z
    defc:	71 81       	ldd	r23, Z+1	; 0x01
    defe:	82 81       	ldd	r24, Z+2	; 0x02
    df00:	93 81       	ldd	r25, Z+3	; 0x03
    df02:	20 e0       	ldi	r18, 0x00	; 0
    df04:	30 e0       	ldi	r19, 0x00	; 0
    df06:	40 e2       	ldi	r20, 0x20	; 32
    df08:	51 e4       	ldi	r21, 0x41	; 65
    df0a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    df0e:	dc 01       	movw	r26, r24
    df10:	cb 01       	movw	r24, r22
    df12:	8e 01       	movw	r16, r28
    df14:	0f 54       	subi	r16, 0x4F	; 79
    df16:	1f 4f       	sbci	r17, 0xFF	; 255
    df18:	bc 01       	movw	r22, r24
    df1a:	cd 01       	movw	r24, r26
    df1c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    df20:	dc 01       	movw	r26, r24
    df22:	cb 01       	movw	r24, r22
    df24:	f8 01       	movw	r30, r16
    df26:	91 83       	std	Z+1, r25	; 0x01
    df28:	80 83       	st	Z, r24
    df2a:	27 c0       	rjmp	.+78     	; 0xdf7a <travel_path+0x1a44>
    df2c:	ce 01       	movw	r24, r28
    df2e:	8d 54       	subi	r24, 0x4D	; 77
    df30:	9f 4f       	sbci	r25, 0xFF	; 255
    df32:	20 e7       	ldi	r18, 0x70	; 112
    df34:	31 e0       	ldi	r19, 0x01	; 1
    df36:	fc 01       	movw	r30, r24
    df38:	31 83       	std	Z+1, r19	; 0x01
    df3a:	20 83       	st	Z, r18
    df3c:	ce 01       	movw	r24, r28
    df3e:	8d 54       	subi	r24, 0x4D	; 77
    df40:	9f 4f       	sbci	r25, 0xFF	; 255
    df42:	fc 01       	movw	r30, r24
    df44:	80 81       	ld	r24, Z
    df46:	91 81       	ldd	r25, Z+1	; 0x01
    df48:	8c 01       	movw	r16, r24
    df4a:	c8 01       	movw	r24, r16
    df4c:	01 97       	sbiw	r24, 0x01	; 1
    df4e:	f1 f7       	brne	.-4      	; 0xdf4c <travel_path+0x1a16>
    df50:	8c 01       	movw	r16, r24
    df52:	ce 01       	movw	r24, r28
    df54:	8d 54       	subi	r24, 0x4D	; 77
    df56:	9f 4f       	sbci	r25, 0xFF	; 255
    df58:	fc 01       	movw	r30, r24
    df5a:	11 83       	std	Z+1, r17	; 0x01
    df5c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    df5e:	ce 01       	movw	r24, r28
    df60:	8f 54       	subi	r24, 0x4F	; 79
    df62:	9f 4f       	sbci	r25, 0xFF	; 255
    df64:	9e 01       	movw	r18, r28
    df66:	2f 54       	subi	r18, 0x4F	; 79
    df68:	3f 4f       	sbci	r19, 0xFF	; 255
    df6a:	f9 01       	movw	r30, r18
    df6c:	20 81       	ld	r18, Z
    df6e:	31 81       	ldd	r19, Z+1	; 0x01
    df70:	21 50       	subi	r18, 0x01	; 1
    df72:	30 40       	sbci	r19, 0x00	; 0
    df74:	fc 01       	movw	r30, r24
    df76:	31 83       	std	Z+1, r19	; 0x01
    df78:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    df7a:	ce 01       	movw	r24, r28
    df7c:	8f 54       	subi	r24, 0x4F	; 79
    df7e:	9f 4f       	sbci	r25, 0xFF	; 255
    df80:	fc 01       	movw	r30, r24
    df82:	80 81       	ld	r24, Z
    df84:	91 81       	ldd	r25, Z+1	; 0x01
    df86:	00 97       	sbiw	r24, 0x00	; 0
    df88:	89 f6       	brne	.-94     	; 0xdf2c <travel_path+0x19f6>
    df8a:	2f c0       	rjmp	.+94     	; 0xdfea <travel_path+0x1ab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    df8c:	8e 01       	movw	r16, r28
    df8e:	0f 54       	subi	r16, 0x4F	; 79
    df90:	1f 4f       	sbci	r17, 0xFF	; 255
    df92:	ce 01       	movw	r24, r28
    df94:	83 55       	subi	r24, 0x53	; 83
    df96:	9f 4f       	sbci	r25, 0xFF	; 255
    df98:	fc 01       	movw	r30, r24
    df9a:	60 81       	ld	r22, Z
    df9c:	71 81       	ldd	r23, Z+1	; 0x01
    df9e:	82 81       	ldd	r24, Z+2	; 0x02
    dfa0:	93 81       	ldd	r25, Z+3	; 0x03
    dfa2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    dfa6:	dc 01       	movw	r26, r24
    dfa8:	cb 01       	movw	r24, r22
    dfaa:	f8 01       	movw	r30, r16
    dfac:	91 83       	std	Z+1, r25	; 0x01
    dfae:	80 83       	st	Z, r24
    dfb0:	ce 01       	movw	r24, r28
    dfb2:	8b 54       	subi	r24, 0x4B	; 75
    dfb4:	9f 4f       	sbci	r25, 0xFF	; 255
    dfb6:	9e 01       	movw	r18, r28
    dfb8:	2f 54       	subi	r18, 0x4F	; 79
    dfba:	3f 4f       	sbci	r19, 0xFF	; 255
    dfbc:	f9 01       	movw	r30, r18
    dfbe:	20 81       	ld	r18, Z
    dfc0:	31 81       	ldd	r19, Z+1	; 0x01
    dfc2:	fc 01       	movw	r30, r24
    dfc4:	31 83       	std	Z+1, r19	; 0x01
    dfc6:	20 83       	st	Z, r18
    dfc8:	ce 01       	movw	r24, r28
    dfca:	8b 54       	subi	r24, 0x4B	; 75
    dfcc:	9f 4f       	sbci	r25, 0xFF	; 255
    dfce:	fc 01       	movw	r30, r24
    dfd0:	80 81       	ld	r24, Z
    dfd2:	91 81       	ldd	r25, Z+1	; 0x01
    dfd4:	8c 01       	movw	r16, r24
    dfd6:	c8 01       	movw	r24, r16
    dfd8:	01 97       	sbiw	r24, 0x01	; 1
    dfda:	f1 f7       	brne	.-4      	; 0xdfd8 <travel_path+0x1aa2>
    dfdc:	8c 01       	movw	r16, r24
    dfde:	ce 01       	movw	r24, r28
    dfe0:	8b 54       	subi	r24, 0x4B	; 75
    dfe2:	9f 4f       	sbci	r25, 0xFF	; 255
    dfe4:	fc 01       	movw	r30, r24
    dfe6:	11 83       	std	Z+1, r17	; 0x01
    dfe8:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
    dfea:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
			node++;
    dfee:	80 91 6d 03 	lds	r24, 0x036D
    dff2:	90 91 6e 03 	lds	r25, 0x036E
    dff6:	01 96       	adiw	r24, 0x01	; 1
    dff8:	90 93 6e 03 	sts	0x036E, r25
    dffc:	80 93 6d 03 	sts	0x036D, r24
			pick_drop(master_path[node]);
    e000:	80 91 6d 03 	lds	r24, 0x036D
    e004:	90 91 6e 03 	lds	r25, 0x036E
    e008:	8f 58       	subi	r24, 0x8F	; 143
    e00a:	9c 4f       	sbci	r25, 0xFC	; 252
    e00c:	fc 01       	movw	r30, r24
    e00e:	80 81       	ld	r24, Z
    e010:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <pick_drop>
			node++;
    e014:	80 91 6d 03 	lds	r24, 0x036D
    e018:	90 91 6e 03 	lds	r25, 0x036E
    e01c:	01 96       	adiw	r24, 0x01	; 1
    e01e:	90 93 6e 03 	sts	0x036E, r25
    e022:	80 93 6d 03 	sts	0x036D, r24
			travel_path(master_path[node]);
    e026:	80 91 6d 03 	lds	r24, 0x036D
    e02a:	90 91 6e 03 	lds	r25, 0x036E
    e02e:	8f 58       	subi	r24, 0x8F	; 143
    e030:	9c 4f       	sbci	r25, 0xFC	; 252
    e032:	fc 01       	movw	r30, r24
    e034:	80 81       	ld	r24, Z
    e036:	0e 94 9b 62 	call	0xc536	; 0xc536 <travel_path>
    e03a:	12 c0       	rjmp	.+36     	; 0xe060 <travel_path+0x1b2a>
		}
		else
		correct_right3();
    e03c:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    e040:	0f c0       	rjmp	.+30     	; 0xe060 <travel_path+0x1b2a>
	}
	else if(pos_val=='o')
    e042:	ce 01       	movw	r24, r28
    e044:	89 54       	subi	r24, 0x49	; 73
    e046:	9f 4f       	sbci	r25, 0xFF	; 255
    e048:	fc 01       	movw	r30, r24
    e04a:	80 81       	ld	r24, Z
    e04c:	8f 36       	cpi	r24, 0x6F	; 111
    e04e:	41 f4       	brne	.+16     	; 0xe060 <travel_path+0x1b2a>
	{
		stop();
    e050:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		path_fin=1;
    e054:	81 e0       	ldi	r24, 0x01	; 1
    e056:	90 e0       	ldi	r25, 0x00	; 0
    e058:	90 93 3a 04 	sts	0x043A, r25
    e05c:	80 93 39 04 	sts	0x0439, r24
	}
halt=0;	
    e060:	10 92 70 03 	sts	0x0370, r1
    e064:	10 92 6f 03 	sts	0x036F, r1
TIMSK3=1;
    e068:	81 e7       	ldi	r24, 0x71	; 113
    e06a:	90 e0       	ldi	r25, 0x00	; 0
    e06c:	21 e0       	ldi	r18, 0x01	; 1
    e06e:	fc 01       	movw	r30, r24
    e070:	20 83       	st	Z, r18
}
    e072:	c9 54       	subi	r28, 0x49	; 73
    e074:	df 4f       	sbci	r29, 0xFF	; 255
    e076:	0f b6       	in	r0, 0x3f	; 63
    e078:	f8 94       	cli
    e07a:	de bf       	out	0x3e, r29	; 62
    e07c:	0f be       	out	0x3f, r0	; 63
    e07e:	cd bf       	out	0x3d, r28	; 61
    e080:	df 91       	pop	r29
    e082:	cf 91       	pop	r28
    e084:	1f 91       	pop	r17
    e086:	0f 91       	pop	r16
    e088:	08 95       	ret

0000e08a <line_following>:
* Example Call:		line_following();
*/

void line_following()

{
    e08a:	cf 93       	push	r28
    e08c:	df 93       	push	r29
    e08e:	cd b7       	in	r28, 0x3d	; 61
    e090:	de b7       	in	r29, 0x3e	; 62

	TIMSK3 = 0x01;
    e092:	81 e7       	ldi	r24, 0x71	; 113
    e094:	90 e0       	ldi	r25, 0x00	; 0
    e096:	21 e0       	ldi	r18, 0x01	; 1
    e098:	fc 01       	movw	r30, r24
    e09a:	20 83       	st	Z, r18

}
    e09c:	df 91       	pop	r29
    e09e:	cf 91       	pop	r28
    e0a0:	08 95       	ret

0000e0a2 <lcd_port_config>:

*/

void lcd_port_config(void)

{
    e0a2:	cf 93       	push	r28
    e0a4:	df 93       	push	r29
    e0a6:	cd b7       	in	r28, 0x3d	; 61
    e0a8:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    e0aa:	87 e2       	ldi	r24, 0x27	; 39
    e0ac:	90 e0       	ldi	r25, 0x00	; 0
    e0ae:	27 e2       	ldi	r18, 0x27	; 39
    e0b0:	30 e0       	ldi	r19, 0x00	; 0
    e0b2:	f9 01       	movw	r30, r18
    e0b4:	20 81       	ld	r18, Z
    e0b6:	27 6f       	ori	r18, 0xF7	; 247
    e0b8:	fc 01       	movw	r30, r24
    e0ba:	20 83       	st	Z, r18

	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    e0bc:	88 e2       	ldi	r24, 0x28	; 40
    e0be:	90 e0       	ldi	r25, 0x00	; 0
    e0c0:	28 e2       	ldi	r18, 0x28	; 40
    e0c2:	30 e0       	ldi	r19, 0x00	; 0
    e0c4:	f9 01       	movw	r30, r18
    e0c6:	20 81       	ld	r18, Z
    e0c8:	20 78       	andi	r18, 0x80	; 128
    e0ca:	fc 01       	movw	r30, r24
    e0cc:	20 83       	st	Z, r18

}
    e0ce:	df 91       	pop	r29
    e0d0:	cf 91       	pop	r28
    e0d2:	08 95       	ret

0000e0d4 <buzzer_pin_config>:

*/

void buzzer_pin_config(void)

{
    e0d4:	cf 93       	push	r28
    e0d6:	df 93       	push	r29
    e0d8:	cd b7       	in	r28, 0x3d	; 61
    e0da:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0x08; //Setting PORTC 3 as output
    e0dc:	87 e2       	ldi	r24, 0x27	; 39
    e0de:	90 e0       	ldi	r25, 0x00	; 0
    e0e0:	27 e2       	ldi	r18, 0x27	; 39
    e0e2:	30 e0       	ldi	r19, 0x00	; 0
    e0e4:	f9 01       	movw	r30, r18
    e0e6:	20 81       	ld	r18, Z
    e0e8:	28 60       	ori	r18, 0x08	; 8
    e0ea:	fc 01       	movw	r30, r24
    e0ec:	20 83       	st	Z, r18

	PORTC = PORTC & 0xF7; //Setting PORTC 3 logic low to turnoff buzzer
    e0ee:	88 e2       	ldi	r24, 0x28	; 40
    e0f0:	90 e0       	ldi	r25, 0x00	; 0
    e0f2:	28 e2       	ldi	r18, 0x28	; 40
    e0f4:	30 e0       	ldi	r19, 0x00	; 0
    e0f6:	f9 01       	movw	r30, r18
    e0f8:	20 81       	ld	r18, Z
    e0fa:	27 7f       	andi	r18, 0xF7	; 247
    e0fc:	fc 01       	movw	r30, r24
    e0fe:	20 83       	st	Z, r18

}
    e100:	df 91       	pop	r29
    e102:	cf 91       	pop	r28
    e104:	08 95       	ret

0000e106 <buzzer_on>:

*/

void buzzer_on(void)

{
    e106:	cf 93       	push	r28
    e108:	df 93       	push	r29
    e10a:	0f 92       	push	r0
    e10c:	cd b7       	in	r28, 0x3d	; 61
    e10e:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
    e110:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
    e112:	86 e2       	ldi	r24, 0x26	; 38
    e114:	90 e0       	ldi	r25, 0x00	; 0
    e116:	fc 01       	movw	r30, r24
    e118:	80 81       	ld	r24, Z
    e11a:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore | 0x08;
    e11c:	89 81       	ldd	r24, Y+1	; 0x01
    e11e:	88 60       	ori	r24, 0x08	; 8
    e120:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
    e122:	88 e2       	ldi	r24, 0x28	; 40
    e124:	90 e0       	ldi	r25, 0x00	; 0
    e126:	29 81       	ldd	r18, Y+1	; 0x01
    e128:	fc 01       	movw	r30, r24
    e12a:	20 83       	st	Z, r18

}
    e12c:	0f 90       	pop	r0
    e12e:	df 91       	pop	r29
    e130:	cf 91       	pop	r28
    e132:	08 95       	ret

0000e134 <buzzer_off>:

*/

void buzzer_off(void)

{
    e134:	cf 93       	push	r28
    e136:	df 93       	push	r29
    e138:	0f 92       	push	r0
    e13a:	cd b7       	in	r28, 0x3d	; 61
    e13c:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
    e13e:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
    e140:	86 e2       	ldi	r24, 0x26	; 38
    e142:	90 e0       	ldi	r25, 0x00	; 0
    e144:	fc 01       	movw	r30, r24
    e146:	80 81       	ld	r24, Z
    e148:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore & 0xF7;
    e14a:	89 81       	ldd	r24, Y+1	; 0x01
    e14c:	87 7f       	andi	r24, 0xF7	; 247
    e14e:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
    e150:	88 e2       	ldi	r24, 0x28	; 40
    e152:	90 e0       	ldi	r25, 0x00	; 0
    e154:	29 81       	ldd	r18, Y+1	; 0x01
    e156:	fc 01       	movw	r30, r24
    e158:	20 83       	st	Z, r18

}
    e15a:	0f 90       	pop	r0
    e15c:	df 91       	pop	r29
    e15e:	cf 91       	pop	r28
    e160:	08 95       	ret

0000e162 <buzz>:

*/

void buzz(unsigned long mst)

{
    e162:	0f 93       	push	r16
    e164:	1f 93       	push	r17
    e166:	cf 93       	push	r28
    e168:	df 93       	push	r29
    e16a:	cd b7       	in	r28, 0x3d	; 61
    e16c:	de b7       	in	r29, 0x3e	; 62
    e16e:	62 97       	sbiw	r28, 0x12	; 18
    e170:	0f b6       	in	r0, 0x3f	; 63
    e172:	f8 94       	cli
    e174:	de bf       	out	0x3e, r29	; 62
    e176:	0f be       	out	0x3f, r0	; 63
    e178:	cd bf       	out	0x3d, r28	; 61
    e17a:	6f 87       	std	Y+15, r22	; 0x0f
    e17c:	78 8b       	std	Y+16, r23	; 0x10
    e17e:	89 8b       	std	Y+17, r24	; 0x11
    e180:	9a 8b       	std	Y+18, r25	; 0x12

	buzzer_on();
    e182:	0e 94 83 70 	call	0xe106	; 0xe106 <buzzer_on>
    e186:	80 e0       	ldi	r24, 0x00	; 0
    e188:	90 e0       	ldi	r25, 0x00	; 0
    e18a:	a8 e4       	ldi	r26, 0x48	; 72
    e18c:	b2 e4       	ldi	r27, 0x42	; 66
    e18e:	89 83       	std	Y+1, r24	; 0x01
    e190:	9a 83       	std	Y+2, r25	; 0x02
    e192:	ab 83       	std	Y+3, r26	; 0x03
    e194:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e196:	69 81       	ldd	r22, Y+1	; 0x01
    e198:	7a 81       	ldd	r23, Y+2	; 0x02
    e19a:	8b 81       	ldd	r24, Y+3	; 0x03
    e19c:	9c 81       	ldd	r25, Y+4	; 0x04
    e19e:	26 e6       	ldi	r18, 0x66	; 102
    e1a0:	36 e6       	ldi	r19, 0x66	; 102
    e1a2:	46 e6       	ldi	r20, 0x66	; 102
    e1a4:	55 e4       	ldi	r21, 0x45	; 69
    e1a6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    e1aa:	dc 01       	movw	r26, r24
    e1ac:	cb 01       	movw	r24, r22
    e1ae:	8d 83       	std	Y+5, r24	; 0x05
    e1b0:	9e 83       	std	Y+6, r25	; 0x06
    e1b2:	af 83       	std	Y+7, r26	; 0x07
    e1b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    e1b6:	11 e0       	ldi	r17, 0x01	; 1
    e1b8:	6d 81       	ldd	r22, Y+5	; 0x05
    e1ba:	7e 81       	ldd	r23, Y+6	; 0x06
    e1bc:	8f 81       	ldd	r24, Y+7	; 0x07
    e1be:	98 85       	ldd	r25, Y+8	; 0x08
    e1c0:	20 e0       	ldi	r18, 0x00	; 0
    e1c2:	30 e0       	ldi	r19, 0x00	; 0
    e1c4:	40 e8       	ldi	r20, 0x80	; 128
    e1c6:	5f e3       	ldi	r21, 0x3F	; 63
    e1c8:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    e1cc:	88 23       	and	r24, r24
    e1ce:	0c f0       	brlt	.+2      	; 0xe1d2 <buzz+0x70>
    e1d0:	10 e0       	ldi	r17, 0x00	; 0
    e1d2:	11 23       	and	r17, r17
    e1d4:	29 f0       	breq	.+10     	; 0xe1e0 <buzz+0x7e>
		__ticks = 1;
    e1d6:	81 e0       	ldi	r24, 0x01	; 1
    e1d8:	90 e0       	ldi	r25, 0x00	; 0
    e1da:	9a 87       	std	Y+10, r25	; 0x0a
    e1dc:	89 87       	std	Y+9, r24	; 0x09
    e1de:	46 c0       	rjmp	.+140    	; 0xe26c <buzz+0x10a>
	else if (__tmp > 65535)
    e1e0:	11 e0       	ldi	r17, 0x01	; 1
    e1e2:	6d 81       	ldd	r22, Y+5	; 0x05
    e1e4:	7e 81       	ldd	r23, Y+6	; 0x06
    e1e6:	8f 81       	ldd	r24, Y+7	; 0x07
    e1e8:	98 85       	ldd	r25, Y+8	; 0x08
    e1ea:	20 e0       	ldi	r18, 0x00	; 0
    e1ec:	3f ef       	ldi	r19, 0xFF	; 255
    e1ee:	4f e7       	ldi	r20, 0x7F	; 127
    e1f0:	57 e4       	ldi	r21, 0x47	; 71
    e1f2:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    e1f6:	18 16       	cp	r1, r24
    e1f8:	0c f0       	brlt	.+2      	; 0xe1fc <buzz+0x9a>
    e1fa:	10 e0       	ldi	r17, 0x00	; 0
    e1fc:	11 23       	and	r17, r17
    e1fe:	61 f1       	breq	.+88     	; 0xe258 <buzz+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e200:	69 81       	ldd	r22, Y+1	; 0x01
    e202:	7a 81       	ldd	r23, Y+2	; 0x02
    e204:	8b 81       	ldd	r24, Y+3	; 0x03
    e206:	9c 81       	ldd	r25, Y+4	; 0x04
    e208:	20 e0       	ldi	r18, 0x00	; 0
    e20a:	30 e0       	ldi	r19, 0x00	; 0
    e20c:	40 e2       	ldi	r20, 0x20	; 32
    e20e:	51 e4       	ldi	r21, 0x41	; 65
    e210:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    e214:	dc 01       	movw	r26, r24
    e216:	cb 01       	movw	r24, r22
    e218:	bc 01       	movw	r22, r24
    e21a:	cd 01       	movw	r24, r26
    e21c:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    e220:	dc 01       	movw	r26, r24
    e222:	cb 01       	movw	r24, r22
    e224:	9a 87       	std	Y+10, r25	; 0x0a
    e226:	89 87       	std	Y+9, r24	; 0x09
    e228:	12 c0       	rjmp	.+36     	; 0xe24e <buzz+0xec>
    e22a:	80 e7       	ldi	r24, 0x70	; 112
    e22c:	91 e0       	ldi	r25, 0x01	; 1
    e22e:	9c 87       	std	Y+12, r25	; 0x0c
    e230:	8b 87       	std	Y+11, r24	; 0x0b
    e232:	8b 85       	ldd	r24, Y+11	; 0x0b
    e234:	9c 85       	ldd	r25, Y+12	; 0x0c
    e236:	8c 01       	movw	r16, r24
    e238:	c8 01       	movw	r24, r16
    e23a:	01 97       	sbiw	r24, 0x01	; 1
    e23c:	f1 f7       	brne	.-4      	; 0xe23a <buzz+0xd8>
    e23e:	8c 01       	movw	r16, r24
    e240:	1c 87       	std	Y+12, r17	; 0x0c
    e242:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e244:	89 85       	ldd	r24, Y+9	; 0x09
    e246:	9a 85       	ldd	r25, Y+10	; 0x0a
    e248:	01 97       	sbiw	r24, 0x01	; 1
    e24a:	9a 87       	std	Y+10, r25	; 0x0a
    e24c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e24e:	89 85       	ldd	r24, Y+9	; 0x09
    e250:	9a 85       	ldd	r25, Y+10	; 0x0a
    e252:	00 97       	sbiw	r24, 0x00	; 0
    e254:	51 f7       	brne	.-44     	; 0xe22a <buzz+0xc8>
    e256:	17 c0       	rjmp	.+46     	; 0xe286 <buzz+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e258:	6d 81       	ldd	r22, Y+5	; 0x05
    e25a:	7e 81       	ldd	r23, Y+6	; 0x06
    e25c:	8f 81       	ldd	r24, Y+7	; 0x07
    e25e:	98 85       	ldd	r25, Y+8	; 0x08
    e260:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    e264:	dc 01       	movw	r26, r24
    e266:	cb 01       	movw	r24, r22
    e268:	9a 87       	std	Y+10, r25	; 0x0a
    e26a:	89 87       	std	Y+9, r24	; 0x09
    e26c:	89 85       	ldd	r24, Y+9	; 0x09
    e26e:	9a 85       	ldd	r25, Y+10	; 0x0a
    e270:	9e 87       	std	Y+14, r25	; 0x0e
    e272:	8d 87       	std	Y+13, r24	; 0x0d
    e274:	8d 85       	ldd	r24, Y+13	; 0x0d
    e276:	9e 85       	ldd	r25, Y+14	; 0x0e
    e278:	8c 01       	movw	r16, r24
    e27a:	c8 01       	movw	r24, r16
    e27c:	01 97       	sbiw	r24, 0x01	; 1
    e27e:	f1 f7       	brne	.-4      	; 0xe27c <buzz+0x11a>
    e280:	8c 01       	movw	r16, r24
    e282:	1e 87       	std	Y+14, r17	; 0x0e
    e284:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(50);

	buzzer_off();
    e286:	0e 94 9a 70 	call	0xe134	; 0xe134 <buzzer_off>

}
    e28a:	62 96       	adiw	r28, 0x12	; 18
    e28c:	0f b6       	in	r0, 0x3f	; 63
    e28e:	f8 94       	cli
    e290:	de bf       	out	0x3e, r29	; 62
    e292:	0f be       	out	0x3f, r0	; 63
    e294:	cd bf       	out	0x3d, r28	; 61
    e296:	df 91       	pop	r29
    e298:	cf 91       	pop	r28
    e29a:	1f 91       	pop	r17
    e29c:	0f 91       	pop	r16
    e29e:	08 95       	ret

0000e2a0 <timer1_init>:

*/

void timer1_init()

{
    e2a0:	cf 93       	push	r28
    e2a2:	df 93       	push	r29
    e2a4:	cd b7       	in	r28, 0x3d	; 61
    e2a6:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0X00;
    e2a8:	80 e8       	ldi	r24, 0x80	; 128
    e2aa:	90 e0       	ldi	r25, 0x00	; 0
    e2ac:	fc 01       	movw	r30, r24
    e2ae:	10 82       	st	Z, r1

	ICR1 = 1023;
    e2b0:	86 e8       	ldi	r24, 0x86	; 134
    e2b2:	90 e0       	ldi	r25, 0x00	; 0
    e2b4:	2f ef       	ldi	r18, 0xFF	; 255
    e2b6:	33 e0       	ldi	r19, 0x03	; 3
    e2b8:	fc 01       	movw	r30, r24
    e2ba:	31 83       	std	Z+1, r19	; 0x01
    e2bc:	20 83       	st	Z, r18

	TCNT1H = 0XFC;
    e2be:	85 e8       	ldi	r24, 0x85	; 133
    e2c0:	90 e0       	ldi	r25, 0x00	; 0
    e2c2:	2c ef       	ldi	r18, 0xFC	; 252
    e2c4:	fc 01       	movw	r30, r24
    e2c6:	20 83       	st	Z, r18

	TCNT1L = 0X01;
    e2c8:	84 e8       	ldi	r24, 0x84	; 132
    e2ca:	90 e0       	ldi	r25, 0x00	; 0
    e2cc:	21 e0       	ldi	r18, 0x01	; 1
    e2ce:	fc 01       	movw	r30, r24
    e2d0:	20 83       	st	Z, r18

	OCR1AH = 0x03;	//Output compare Register high value for servo 1
    e2d2:	89 e8       	ldi	r24, 0x89	; 137
    e2d4:	90 e0       	ldi	r25, 0x00	; 0
    e2d6:	23 e0       	ldi	r18, 0x03	; 3
    e2d8:	fc 01       	movw	r30, r24
    e2da:	20 83       	st	Z, r18

	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    e2dc:	88 e8       	ldi	r24, 0x88	; 136
    e2de:	90 e0       	ldi	r25, 0x00	; 0
    e2e0:	2f ef       	ldi	r18, 0xFF	; 255
    e2e2:	fc 01       	movw	r30, r24
    e2e4:	20 83       	st	Z, r18

	OCR1BH = 0x03;	//Output compare Register high value for servo 2
    e2e6:	8b e8       	ldi	r24, 0x8B	; 139
    e2e8:	90 e0       	ldi	r25, 0x00	; 0
    e2ea:	23 e0       	ldi	r18, 0x03	; 3
    e2ec:	fc 01       	movw	r30, r24
    e2ee:	20 83       	st	Z, r18

	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    e2f0:	8a e8       	ldi	r24, 0x8A	; 138
    e2f2:	90 e0       	ldi	r25, 0x00	; 0
    e2f4:	2f ef       	ldi	r18, 0xFF	; 255
    e2f6:	fc 01       	movw	r30, r24
    e2f8:	20 83       	st	Z, r18

	OCR1CH = 0x03;	//Output compare Register high value for servo 3
    e2fa:	8d e8       	ldi	r24, 0x8D	; 141
    e2fc:	90 e0       	ldi	r25, 0x00	; 0
    e2fe:	23 e0       	ldi	r18, 0x03	; 3
    e300:	fc 01       	movw	r30, r24
    e302:	20 83       	st	Z, r18

	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    e304:	8c e8       	ldi	r24, 0x8C	; 140
    e306:	90 e0       	ldi	r25, 0x00	; 0
    e308:	2f ef       	ldi	r18, 0xFF	; 255
    e30a:	fc 01       	movw	r30, r24
    e30c:	20 83       	st	Z, r18

	ICR1H  = 0x03;
    e30e:	87 e8       	ldi	r24, 0x87	; 135
    e310:	90 e0       	ldi	r25, 0x00	; 0
    e312:	23 e0       	ldi	r18, 0x03	; 3
    e314:	fc 01       	movw	r30, r24
    e316:	20 83       	st	Z, r18

	ICR1L  = 0xFF;
    e318:	86 e8       	ldi	r24, 0x86	; 134
    e31a:	90 e0       	ldi	r25, 0x00	; 0
    e31c:	2f ef       	ldi	r18, 0xFF	; 255
    e31e:	fc 01       	movw	r30, r24
    e320:	20 83       	st	Z, r18

	TCCR1A = 0XAB;
    e322:	80 e8       	ldi	r24, 0x80	; 128
    e324:	90 e0       	ldi	r25, 0x00	; 0
    e326:	2b ea       	ldi	r18, 0xAB	; 171
    e328:	fc 01       	movw	r30, r24
    e32a:	20 83       	st	Z, r18

	TCCR1B = 0X0C;
    e32c:	81 e8       	ldi	r24, 0x81	; 129
    e32e:	90 e0       	ldi	r25, 0x00	; 0
    e330:	2c e0       	ldi	r18, 0x0C	; 12
    e332:	fc 01       	movw	r30, r24
    e334:	20 83       	st	Z, r18

	TCCR1C = 0x00;
    e336:	82 e8       	ldi	r24, 0x82	; 130
    e338:	90 e0       	ldi	r25, 0x00	; 0
    e33a:	fc 01       	movw	r30, r24
    e33c:	10 82       	st	Z, r1

}
    e33e:	df 91       	pop	r29
    e340:	cf 91       	pop	r28
    e342:	08 95       	ret

0000e344 <timer3_init>:

*/

void timer3_init(void)

{
    e344:	cf 93       	push	r28
    e346:	df 93       	push	r29
    e348:	cd b7       	in	r28, 0x3d	; 61
    e34a:	de b7       	in	r29, 0x3e	; 62

	TCCR3B = 0x00; //stop
    e34c:	81 e9       	ldi	r24, 0x91	; 145
    e34e:	90 e0       	ldi	r25, 0x00	; 0
    e350:	fc 01       	movw	r30, r24
    e352:	10 82       	st	Z, r1

	TCNT3 = 0xFDC0; // 0.01s
    e354:	84 e9       	ldi	r24, 0x94	; 148
    e356:	90 e0       	ldi	r25, 0x00	; 0
    e358:	20 ec       	ldi	r18, 0xC0	; 192
    e35a:	3d ef       	ldi	r19, 0xFD	; 253
    e35c:	fc 01       	movw	r30, r24
    e35e:	31 83       	std	Z+1, r19	; 0x01
    e360:	20 83       	st	Z, r18

	OCR3AH = 0x00; //Output Compare Register (OCR)- Not used
    e362:	89 e9       	ldi	r24, 0x99	; 153
    e364:	90 e0       	ldi	r25, 0x00	; 0
    e366:	fc 01       	movw	r30, r24
    e368:	10 82       	st	Z, r1

	OCR3AL = 0x00; //Output Compare Register (OCR)- Not used
    e36a:	88 e9       	ldi	r24, 0x98	; 152
    e36c:	90 e0       	ldi	r25, 0x00	; 0
    e36e:	fc 01       	movw	r30, r24
    e370:	10 82       	st	Z, r1

	OCR3BH = 0x00; //Output Compare Register (OCR)- Not used
    e372:	8b e9       	ldi	r24, 0x9B	; 155
    e374:	90 e0       	ldi	r25, 0x00	; 0
    e376:	fc 01       	movw	r30, r24
    e378:	10 82       	st	Z, r1

	OCR3BL = 0x00; //Output Compare Register (OCR)- Not used
    e37a:	8a e9       	ldi	r24, 0x9A	; 154
    e37c:	90 e0       	ldi	r25, 0x00	; 0
    e37e:	fc 01       	movw	r30, r24
    e380:	10 82       	st	Z, r1

	OCR3CH = 0x00; //Output Compare Register (OCR)- Not used
    e382:	8d e9       	ldi	r24, 0x9D	; 157
    e384:	90 e0       	ldi	r25, 0x00	; 0
    e386:	fc 01       	movw	r30, r24
    e388:	10 82       	st	Z, r1

	OCR3CL = 0x00; //Output Compare Register (OCR)- Not used
    e38a:	8c e9       	ldi	r24, 0x9C	; 156
    e38c:	90 e0       	ldi	r25, 0x00	; 0
    e38e:	fc 01       	movw	r30, r24
    e390:	10 82       	st	Z, r1

	ICR3H = 0x00; //Input Capture Register (ICR)- Not used
    e392:	87 e9       	ldi	r24, 0x97	; 151
    e394:	90 e0       	ldi	r25, 0x00	; 0
    e396:	fc 01       	movw	r30, r24
    e398:	10 82       	st	Z, r1

	ICR3L = 0x00; //Input Capture Register (ICR)- Not used
    e39a:	86 e9       	ldi	r24, 0x96	; 150
    e39c:	90 e0       	ldi	r25, 0x00	; 0
    e39e:	fc 01       	movw	r30, r24
    e3a0:	10 82       	st	Z, r1

	TCCR3A = 0x00;
    e3a2:	80 e9       	ldi	r24, 0x90	; 144
    e3a4:	90 e0       	ldi	r25, 0x00	; 0
    e3a6:	fc 01       	movw	r30, r24
    e3a8:	10 82       	st	Z, r1

	TCCR3C = 0x00;
    e3aa:	82 e9       	ldi	r24, 0x92	; 146
    e3ac:	90 e0       	ldi	r25, 0x00	; 0
    e3ae:	fc 01       	movw	r30, r24
    e3b0:	10 82       	st	Z, r1

	TCCR3B = 0x04; //Pre-scaler 256 1-0-0
    e3b2:	81 e9       	ldi	r24, 0x91	; 145
    e3b4:	90 e0       	ldi	r25, 0x00	; 0
    e3b6:	24 e0       	ldi	r18, 0x04	; 4
    e3b8:	fc 01       	movw	r30, r24
    e3ba:	20 83       	st	Z, r18

}
    e3bc:	df 91       	pop	r29
    e3be:	cf 91       	pop	r28
    e3c0:	08 95       	ret

0000e3c2 <timer4_init>:

*/

void timer4_init(void) 

{
    e3c2:	cf 93       	push	r28
    e3c4:	df 93       	push	r29
    e3c6:	cd b7       	in	r28, 0x3d	; 61
    e3c8:	de b7       	in	r29, 0x3e	; 62

	TCCR4B = 0x00; //stop
    e3ca:	81 ea       	ldi	r24, 0xA1	; 161
    e3cc:	90 e0       	ldi	r25, 0x00	; 0
    e3ce:	fc 01       	movw	r30, r24
    e3d0:	10 82       	st	Z, r1

	TCNT4 = 0xE980; // 0.1s
    e3d2:	84 ea       	ldi	r24, 0xA4	; 164
    e3d4:	90 e0       	ldi	r25, 0x00	; 0
    e3d6:	20 e8       	ldi	r18, 0x80	; 128
    e3d8:	39 ee       	ldi	r19, 0xE9	; 233
    e3da:	fc 01       	movw	r30, r24
    e3dc:	31 83       	std	Z+1, r19	; 0x01
    e3de:	20 83       	st	Z, r18

	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
    e3e0:	89 ea       	ldi	r24, 0xA9	; 169
    e3e2:	90 e0       	ldi	r25, 0x00	; 0
    e3e4:	fc 01       	movw	r30, r24
    e3e6:	10 82       	st	Z, r1

	OCR4AL = 0x00; //Output Compare Register (OCR)- Not used
    e3e8:	88 ea       	ldi	r24, 0xA8	; 168
    e3ea:	90 e0       	ldi	r25, 0x00	; 0
    e3ec:	fc 01       	movw	r30, r24
    e3ee:	10 82       	st	Z, r1

	OCR4BH = 0x00; //Output Compare Register (OCR)- Not used
    e3f0:	8b ea       	ldi	r24, 0xAB	; 171
    e3f2:	90 e0       	ldi	r25, 0x00	; 0
    e3f4:	fc 01       	movw	r30, r24
    e3f6:	10 82       	st	Z, r1

	OCR4BL = 0x00; //Output Compare Register (OCR)- Not used
    e3f8:	8a ea       	ldi	r24, 0xAA	; 170
    e3fa:	90 e0       	ldi	r25, 0x00	; 0
    e3fc:	fc 01       	movw	r30, r24
    e3fe:	10 82       	st	Z, r1

	OCR4CH = 0x00; //Output Compare Register (OCR)- Not used
    e400:	8d ea       	ldi	r24, 0xAD	; 173
    e402:	90 e0       	ldi	r25, 0x00	; 0
    e404:	fc 01       	movw	r30, r24
    e406:	10 82       	st	Z, r1

	OCR4CL = 0x00; //Output Compare Register (OCR)- Not used
    e408:	8c ea       	ldi	r24, 0xAC	; 172
    e40a:	90 e0       	ldi	r25, 0x00	; 0
    e40c:	fc 01       	movw	r30, r24
    e40e:	10 82       	st	Z, r1

	ICR4H = 0x00; //Input Capture Register (ICR)- Not used
    e410:	87 ea       	ldi	r24, 0xA7	; 167
    e412:	90 e0       	ldi	r25, 0x00	; 0
    e414:	fc 01       	movw	r30, r24
    e416:	10 82       	st	Z, r1

	ICR4L = 0x00; //Input Capture Register (ICR)- Not used
    e418:	86 ea       	ldi	r24, 0xA6	; 166
    e41a:	90 e0       	ldi	r25, 0x00	; 0
    e41c:	fc 01       	movw	r30, r24
    e41e:	10 82       	st	Z, r1

	TCCR4A = 0x00;
    e420:	80 ea       	ldi	r24, 0xA0	; 160
    e422:	90 e0       	ldi	r25, 0x00	; 0
    e424:	fc 01       	movw	r30, r24
    e426:	10 82       	st	Z, r1

	TCCR4C = 0x00;
    e428:	82 ea       	ldi	r24, 0xA2	; 162
    e42a:	90 e0       	ldi	r25, 0x00	; 0
    e42c:	fc 01       	movw	r30, r24
    e42e:	10 82       	st	Z, r1

	TCCR4B = 0x04; //Pre-scaler 256 1-0-0
    e430:	81 ea       	ldi	r24, 0xA1	; 161
    e432:	90 e0       	ldi	r25, 0x00	; 0
    e434:	24 e0       	ldi	r18, 0x04	; 4
    e436:	fc 01       	movw	r30, r24
    e438:	20 83       	st	Z, r18

}
    e43a:	df 91       	pop	r29
    e43c:	cf 91       	pop	r28
    e43e:	08 95       	ret

0000e440 <timer5_init>:

*/

void timer5_init()

{
    e440:	cf 93       	push	r28
    e442:	df 93       	push	r29
    e444:	cd b7       	in	r28, 0x3d	; 61
    e446:	de b7       	in	r29, 0x3e	; 62

    TCCR5B = 0x00; //Stop
    e448:	81 e2       	ldi	r24, 0x21	; 33
    e44a:	91 e0       	ldi	r25, 0x01	; 1
    e44c:	fc 01       	movw	r30, r24
    e44e:	10 82       	st	Z, r1

    TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
    e450:	85 e2       	ldi	r24, 0x25	; 37
    e452:	91 e0       	ldi	r25, 0x01	; 1
    e454:	2f ef       	ldi	r18, 0xFF	; 255
    e456:	fc 01       	movw	r30, r24
    e458:	20 83       	st	Z, r18

    TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
    e45a:	84 e2       	ldi	r24, 0x24	; 36
    e45c:	91 e0       	ldi	r25, 0x01	; 1
    e45e:	21 e0       	ldi	r18, 0x01	; 1
    e460:	fc 01       	movw	r30, r24
    e462:	20 83       	st	Z, r18

    OCR5AH = 0x00; //Output compare register high value for Left Motor
    e464:	89 e2       	ldi	r24, 0x29	; 41
    e466:	91 e0       	ldi	r25, 0x01	; 1
    e468:	fc 01       	movw	r30, r24
    e46a:	10 82       	st	Z, r1

    OCR5AL = 0xFF; //Output compare register low value for Left Motor
    e46c:	88 e2       	ldi	r24, 0x28	; 40
    e46e:	91 e0       	ldi	r25, 0x01	; 1
    e470:	2f ef       	ldi	r18, 0xFF	; 255
    e472:	fc 01       	movw	r30, r24
    e474:	20 83       	st	Z, r18

    OCR5BH = 0x00; //Output compare register high value for Right Motor
    e476:	8b e2       	ldi	r24, 0x2B	; 43
    e478:	91 e0       	ldi	r25, 0x01	; 1
    e47a:	fc 01       	movw	r30, r24
    e47c:	10 82       	st	Z, r1

    OCR5BL = 0xFF; //Output compare register low value for Right Motor
    e47e:	8a e2       	ldi	r24, 0x2A	; 42
    e480:	91 e0       	ldi	r25, 0x01	; 1
    e482:	2f ef       	ldi	r18, 0xFF	; 255
    e484:	fc 01       	movw	r30, r24
    e486:	20 83       	st	Z, r18

    OCR5CH = 0x00; //Output compare register high value for Motor C1
    e488:	8d e2       	ldi	r24, 0x2D	; 45
    e48a:	91 e0       	ldi	r25, 0x01	; 1
    e48c:	fc 01       	movw	r30, r24
    e48e:	10 82       	st	Z, r1

    OCR5CL = 0xFF; //Output compare register low value for Motor C1
    e490:	8c e2       	ldi	r24, 0x2C	; 44
    e492:	91 e0       	ldi	r25, 0x01	; 1
    e494:	2f ef       	ldi	r18, 0xFF	; 255
    e496:	fc 01       	movw	r30, r24
    e498:	20 83       	st	Z, r18

    TCCR5A = 0xA9;
    e49a:	80 e2       	ldi	r24, 0x20	; 32
    e49c:	91 e0       	ldi	r25, 0x01	; 1
    e49e:	29 ea       	ldi	r18, 0xA9	; 169
    e4a0:	fc 01       	movw	r30, r24
    e4a2:	20 83       	st	Z, r18

				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/



    TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    e4a4:	81 e2       	ldi	r24, 0x21	; 33
    e4a6:	91 e0       	ldi	r25, 0x01	; 1
    e4a8:	2b e0       	ldi	r18, 0x0B	; 11
    e4aa:	fc 01       	movw	r30, r24
    e4ac:	20 83       	st	Z, r18

}
    e4ae:	df 91       	pop	r29
    e4b0:	cf 91       	pop	r28
    e4b2:	08 95       	ret

0000e4b4 <port_init>:

*/

void port_init()

{   DDRJ= DDRJ | 0xF7;
    e4b4:	cf 93       	push	r28
    e4b6:	df 93       	push	r29
    e4b8:	cd b7       	in	r28, 0x3d	; 61
    e4ba:	de b7       	in	r29, 0x3e	; 62
    e4bc:	84 e0       	ldi	r24, 0x04	; 4
    e4be:	91 e0       	ldi	r25, 0x01	; 1
    e4c0:	24 e0       	ldi	r18, 0x04	; 4
    e4c2:	31 e0       	ldi	r19, 0x01	; 1
    e4c4:	f9 01       	movw	r30, r18
    e4c6:	20 81       	ld	r18, Z
    e4c8:	27 6f       	ori	r18, 0xF7	; 247
    e4ca:	fc 01       	movw	r30, r24
    e4cc:	20 83       	st	Z, r18

	PORTJ=0xFF;
    e4ce:	85 e0       	ldi	r24, 0x05	; 5
    e4d0:	91 e0       	ldi	r25, 0x01	; 1
    e4d2:	2f ef       	ldi	r18, 0xFF	; 255
    e4d4:	fc 01       	movw	r30, r24
    e4d6:	20 83       	st	Z, r18

	buzzer_pin_config(); //Buzzer pin configuration
    e4d8:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <buzzer_pin_config>

	lcd_port_config();  //LCD pin configuration
    e4dc:	0e 94 51 70 	call	0xe0a2	; 0xe0a2 <lcd_port_config>

	

	adc_pin_config();  //ADC pin configuration
    e4e0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <adc_pin_config>

	motion_pin_config(); //Motion pin configuration
    e4e4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <motion_pin_config>

	left_encoder_pin_config(); //Left Encoder pin configuration
    e4e8:	0e 94 cd 0b 	call	0x179a	; 0x179a <left_encoder_pin_config>

	right_encoder_pin_config(); //Right Encoder pin configuration
    e4ec:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <right_encoder_pin_config>
	
	servo1_pin_config();
    e4f0:	0e 94 43 1b 	call	0x3686	; 0x3686 <servo1_pin_config>
	
	servo2_pin_config();
    e4f4:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <servo2_pin_config>
	
	servo3_pin_config();
    e4f8:	0e 94 75 1b 	call	0x36ea	; 0x36ea <servo3_pin_config>

}
    e4fc:	df 91       	pop	r29
    e4fe:	cf 91       	pop	r28
    e500:	08 95       	ret

0000e502 <init_devices>:

*/

void init_devices(void)

{
    e502:	cf 93       	push	r28
    e504:	df 93       	push	r29
    e506:	cd b7       	in	r28, 0x3d	; 61
    e508:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupts
    e50a:	f8 94       	cli

	

	port_init(); //Initiate all ports
    e50c:	0e 94 5a 72 	call	0xe4b4	; 0xe4b4 <port_init>

	adc_init(); //Initiate ADC registers
    e510:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <adc_init>
	
	uart2_init();
    e514:	84 e7       	ldi	r24, 0x74	; 116
    e516:	9a e7       	ldi	r25, 0x7A	; 122
    e518:	fc 01       	movw	r30, r24
    e51a:	19 95       	eicall


	//Initiate timers

	timer1_init();
    e51c:	0e 94 50 71 	call	0xe2a0	; 0xe2a0 <timer1_init>

	timer5_init();
    e520:	0e 94 20 72 	call	0xe440	; 0xe440 <timer5_init>

	timer3_init();
    e524:	0e 94 a2 71 	call	0xe344	; 0xe344 <timer3_init>

	timer4_init();
    e528:	0e 94 e1 71 	call	0xe3c2	; 0xe3c2 <timer4_init>

	

	//Initiate position encoder interrupts

	left_position_encoder_interrupt_init();
    e52c:	0e 94 16 0c 	call	0x182c	; 0x182c <left_position_encoder_interrupt_init>

	right_position_encoder_interrupt_init();
    e530:	0e 94 31 0c 	call	0x1862	; 0x1862 <right_position_encoder_interrupt_init>

	

	sei(); //Enables the global interrupts
    e534:	78 94       	sei

}
    e536:	df 91       	pop	r29
    e538:	cf 91       	pop	r28
    e53a:	08 95       	ret

0000e53c <adjacent>:
int transf[37]={99,30,31,32,33,34,35,24,25,26,27,28,29,18,19,20,21,22,23,12,13,14,15,16,17,6,7,8,9,10,11,0,1,2,3,4,5};
int p_nx=0,p_ny=0,n_nx=0,n_ny=0;


void adjacent(int x1,int y1,int adj[4][2])
{
    e53c:	cf 93       	push	r28
    e53e:	df 93       	push	r29
    e540:	cd b7       	in	r28, 0x3d	; 61
    e542:	de b7       	in	r29, 0x3e	; 62
    e544:	6c 97       	sbiw	r28, 0x1c	; 28
    e546:	0f b6       	in	r0, 0x3f	; 63
    e548:	f8 94       	cli
    e54a:	de bf       	out	0x3e, r29	; 62
    e54c:	0f be       	out	0x3f, r0	; 63
    e54e:	cd bf       	out	0x3d, r28	; 61
    e550:	98 8f       	std	Y+24, r25	; 0x18
    e552:	8f 8b       	std	Y+23, r24	; 0x17
    e554:	7a 8f       	std	Y+26, r23	; 0x1a
    e556:	69 8f       	std	Y+25, r22	; 0x19
    e558:	5c 8f       	std	Y+28, r21	; 0x1c
    e55a:	4b 8f       	std	Y+27, r20	; 0x1b
    int i=0,x=0,y=0;
    e55c:	1a 82       	std	Y+2, r1	; 0x02
    e55e:	19 82       	std	Y+1, r1	; 0x01
    e560:	1c 82       	std	Y+4, r1	; 0x04
    e562:	1b 82       	std	Y+3, r1	; 0x03
    e564:	1e 82       	std	Y+6, r1	; 0x06
    e566:	1d 82       	std	Y+5, r1	; 0x05
    int key_x[4]={-1,0,1,0};//N E S W
    e568:	ce 01       	movw	r24, r28
    e56a:	07 96       	adiw	r24, 0x07	; 7
    e56c:	24 e9       	ldi	r18, 0x94	; 148
    e56e:	32 e0       	ldi	r19, 0x02	; 2
    e570:	48 e0       	ldi	r20, 0x08	; 8
    e572:	f9 01       	movw	r30, r18
    e574:	00 80       	ld	r0, Z
    e576:	2f 5f       	subi	r18, 0xFF	; 255
    e578:	3f 4f       	sbci	r19, 0xFF	; 255
    e57a:	fc 01       	movw	r30, r24
    e57c:	00 82       	st	Z, r0
    e57e:	01 96       	adiw	r24, 0x01	; 1
    e580:	41 50       	subi	r20, 0x01	; 1
    e582:	44 23       	and	r20, r20
    e584:	b1 f7       	brne	.-20     	; 0xe572 <adjacent+0x36>
    int key_y[4]={0,1,0,-1};
    e586:	ce 01       	movw	r24, r28
    e588:	0f 96       	adiw	r24, 0x0f	; 15
    e58a:	2c e9       	ldi	r18, 0x9C	; 156
    e58c:	32 e0       	ldi	r19, 0x02	; 2
    e58e:	48 e0       	ldi	r20, 0x08	; 8
    e590:	f9 01       	movw	r30, r18
    e592:	00 80       	ld	r0, Z
    e594:	2f 5f       	subi	r18, 0xFF	; 255
    e596:	3f 4f       	sbci	r19, 0xFF	; 255
    e598:	fc 01       	movw	r30, r24
    e59a:	00 82       	st	Z, r0
    e59c:	01 96       	adiw	r24, 0x01	; 1
    e59e:	41 50       	subi	r20, 0x01	; 1
    e5a0:	44 23       	and	r20, r20
    e5a2:	b1 f7       	brne	.-20     	; 0xe590 <adjacent+0x54>
    for(i=0;i<4;i++)
    e5a4:	1a 82       	std	Y+2, r1	; 0x02
    e5a6:	19 82       	std	Y+1, r1	; 0x01
    e5a8:	79 c0       	rjmp	.+242    	; 0xe69c <adjacent+0x160>
	{
        adj[i][0]=-1;
    e5aa:	89 81       	ldd	r24, Y+1	; 0x01
    e5ac:	9a 81       	ldd	r25, Y+2	; 0x02
    e5ae:	88 0f       	add	r24, r24
    e5b0:	99 1f       	adc	r25, r25
    e5b2:	88 0f       	add	r24, r24
    e5b4:	99 1f       	adc	r25, r25
    e5b6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e5b8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e5ba:	82 0f       	add	r24, r18
    e5bc:	93 1f       	adc	r25, r19
    e5be:	2f ef       	ldi	r18, 0xFF	; 255
    e5c0:	3f ef       	ldi	r19, 0xFF	; 255
    e5c2:	fc 01       	movw	r30, r24
    e5c4:	31 83       	std	Z+1, r19	; 0x01
    e5c6:	20 83       	st	Z, r18
        adj[i][1]=-1;
    e5c8:	89 81       	ldd	r24, Y+1	; 0x01
    e5ca:	9a 81       	ldd	r25, Y+2	; 0x02
    e5cc:	88 0f       	add	r24, r24
    e5ce:	99 1f       	adc	r25, r25
    e5d0:	88 0f       	add	r24, r24
    e5d2:	99 1f       	adc	r25, r25
    e5d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e5d6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e5d8:	82 0f       	add	r24, r18
    e5da:	93 1f       	adc	r25, r19
    e5dc:	2f ef       	ldi	r18, 0xFF	; 255
    e5de:	3f ef       	ldi	r19, 0xFF	; 255
    e5e0:	fc 01       	movw	r30, r24
    e5e2:	33 83       	std	Z+3, r19	; 0x03
    e5e4:	22 83       	std	Z+2, r18	; 0x02
        x=x1+key_x[i];
    e5e6:	89 81       	ldd	r24, Y+1	; 0x01
    e5e8:	9a 81       	ldd	r25, Y+2	; 0x02
    e5ea:	88 0f       	add	r24, r24
    e5ec:	99 1f       	adc	r25, r25
    e5ee:	9e 01       	movw	r18, r28
    e5f0:	2f 5f       	subi	r18, 0xFF	; 255
    e5f2:	3f 4f       	sbci	r19, 0xFF	; 255
    e5f4:	82 0f       	add	r24, r18
    e5f6:	93 1f       	adc	r25, r19
    e5f8:	06 96       	adiw	r24, 0x06	; 6
    e5fa:	fc 01       	movw	r30, r24
    e5fc:	20 81       	ld	r18, Z
    e5fe:	31 81       	ldd	r19, Z+1	; 0x01
    e600:	8f 89       	ldd	r24, Y+23	; 0x17
    e602:	98 8d       	ldd	r25, Y+24	; 0x18
    e604:	82 0f       	add	r24, r18
    e606:	93 1f       	adc	r25, r19
    e608:	9c 83       	std	Y+4, r25	; 0x04
    e60a:	8b 83       	std	Y+3, r24	; 0x03
        y=y1+key_y[i];
    e60c:	89 81       	ldd	r24, Y+1	; 0x01
    e60e:	9a 81       	ldd	r25, Y+2	; 0x02
    e610:	88 0f       	add	r24, r24
    e612:	99 1f       	adc	r25, r25
    e614:	9e 01       	movw	r18, r28
    e616:	2f 5f       	subi	r18, 0xFF	; 255
    e618:	3f 4f       	sbci	r19, 0xFF	; 255
    e61a:	82 0f       	add	r24, r18
    e61c:	93 1f       	adc	r25, r19
    e61e:	0e 96       	adiw	r24, 0x0e	; 14
    e620:	fc 01       	movw	r30, r24
    e622:	20 81       	ld	r18, Z
    e624:	31 81       	ldd	r19, Z+1	; 0x01
    e626:	89 8d       	ldd	r24, Y+25	; 0x19
    e628:	9a 8d       	ldd	r25, Y+26	; 0x1a
    e62a:	82 0f       	add	r24, r18
    e62c:	93 1f       	adc	r25, r19
    e62e:	9e 83       	std	Y+6, r25	; 0x06
    e630:	8d 83       	std	Y+5, r24	; 0x05
        if(x>-1 && y>-1 && x<6 && y<6)
    e632:	8b 81       	ldd	r24, Y+3	; 0x03
    e634:	9c 81       	ldd	r25, Y+4	; 0x04
    e636:	99 23       	and	r25, r25
    e638:	64 f1       	brlt	.+88     	; 0xe692 <adjacent+0x156>
    e63a:	8d 81       	ldd	r24, Y+5	; 0x05
    e63c:	9e 81       	ldd	r25, Y+6	; 0x06
    e63e:	99 23       	and	r25, r25
    e640:	44 f1       	brlt	.+80     	; 0xe692 <adjacent+0x156>
    e642:	8b 81       	ldd	r24, Y+3	; 0x03
    e644:	9c 81       	ldd	r25, Y+4	; 0x04
    e646:	86 30       	cpi	r24, 0x06	; 6
    e648:	91 05       	cpc	r25, r1
    e64a:	1c f5       	brge	.+70     	; 0xe692 <adjacent+0x156>
    e64c:	8d 81       	ldd	r24, Y+5	; 0x05
    e64e:	9e 81       	ldd	r25, Y+6	; 0x06
    e650:	86 30       	cpi	r24, 0x06	; 6
    e652:	91 05       	cpc	r25, r1
    e654:	f4 f4       	brge	.+60     	; 0xe692 <adjacent+0x156>
		{
            adj[i][0]=x;
    e656:	89 81       	ldd	r24, Y+1	; 0x01
    e658:	9a 81       	ldd	r25, Y+2	; 0x02
    e65a:	88 0f       	add	r24, r24
    e65c:	99 1f       	adc	r25, r25
    e65e:	88 0f       	add	r24, r24
    e660:	99 1f       	adc	r25, r25
    e662:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e664:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e666:	82 0f       	add	r24, r18
    e668:	93 1f       	adc	r25, r19
    e66a:	2b 81       	ldd	r18, Y+3	; 0x03
    e66c:	3c 81       	ldd	r19, Y+4	; 0x04
    e66e:	fc 01       	movw	r30, r24
    e670:	31 83       	std	Z+1, r19	; 0x01
    e672:	20 83       	st	Z, r18
            adj[i][1]=y;
    e674:	89 81       	ldd	r24, Y+1	; 0x01
    e676:	9a 81       	ldd	r25, Y+2	; 0x02
    e678:	88 0f       	add	r24, r24
    e67a:	99 1f       	adc	r25, r25
    e67c:	88 0f       	add	r24, r24
    e67e:	99 1f       	adc	r25, r25
    e680:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e682:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e684:	82 0f       	add	r24, r18
    e686:	93 1f       	adc	r25, r19
    e688:	2d 81       	ldd	r18, Y+5	; 0x05
    e68a:	3e 81       	ldd	r19, Y+6	; 0x06
    e68c:	fc 01       	movw	r30, r24
    e68e:	33 83       	std	Z+3, r19	; 0x03
    e690:	22 83       	std	Z+2, r18	; 0x02
void adjacent(int x1,int y1,int adj[4][2])
{
    int i=0,x=0,y=0;
    int key_x[4]={-1,0,1,0};//N E S W
    int key_y[4]={0,1,0,-1};
    for(i=0;i<4;i++)
    e692:	89 81       	ldd	r24, Y+1	; 0x01
    e694:	9a 81       	ldd	r25, Y+2	; 0x02
    e696:	01 96       	adiw	r24, 0x01	; 1
    e698:	9a 83       	std	Y+2, r25	; 0x02
    e69a:	89 83       	std	Y+1, r24	; 0x01
    e69c:	89 81       	ldd	r24, Y+1	; 0x01
    e69e:	9a 81       	ldd	r25, Y+2	; 0x02
    e6a0:	84 30       	cpi	r24, 0x04	; 4
    e6a2:	91 05       	cpc	r25, r1
    e6a4:	0c f4       	brge	.+2      	; 0xe6a8 <adjacent+0x16c>
    e6a6:	81 cf       	rjmp	.-254    	; 0xe5aa <adjacent+0x6e>
		{
            adj[i][0]=x;
            adj[i][1]=y;
        }
    }
}
    e6a8:	6c 96       	adiw	r28, 0x1c	; 28
    e6aa:	0f b6       	in	r0, 0x3f	; 63
    e6ac:	f8 94       	cli
    e6ae:	de bf       	out	0x3e, r29	; 62
    e6b0:	0f be       	out	0x3f, r0	; 63
    e6b2:	cd bf       	out	0x3d, r28	; 61
    e6b4:	df 91       	pop	r29
    e6b6:	cf 91       	pop	r28
    e6b8:	08 95       	ret

0000e6ba <min_dis>:

int min_dis(int dist[], int included[])
{
    e6ba:	cf 93       	push	r28
    e6bc:	df 93       	push	r29
    e6be:	cd b7       	in	r28, 0x3d	; 61
    e6c0:	de b7       	in	r29, 0x3e	; 62
    e6c2:	2a 97       	sbiw	r28, 0x0a	; 10
    e6c4:	0f b6       	in	r0, 0x3f	; 63
    e6c6:	f8 94       	cli
    e6c8:	de bf       	out	0x3e, r29	; 62
    e6ca:	0f be       	out	0x3f, r0	; 63
    e6cc:	cd bf       	out	0x3d, r28	; 61
    e6ce:	98 87       	std	Y+8, r25	; 0x08
    e6d0:	8f 83       	std	Y+7, r24	; 0x07
    e6d2:	7a 87       	std	Y+10, r23	; 0x0a
    e6d4:	69 87       	std	Y+9, r22	; 0x09
    int min=INF,min_index=0,i=0;
    e6d6:	87 ee       	ldi	r24, 0xE7	; 231
    e6d8:	93 e0       	ldi	r25, 0x03	; 3
    e6da:	9a 83       	std	Y+2, r25	; 0x02
    e6dc:	89 83       	std	Y+1, r24	; 0x01
    e6de:	1c 82       	std	Y+4, r1	; 0x04
    e6e0:	1b 82       	std	Y+3, r1	; 0x03
    e6e2:	1e 82       	std	Y+6, r1	; 0x06
    e6e4:	1d 82       	std	Y+5, r1	; 0x05
    for(i=0;i<36;i++)
    e6e6:	1e 82       	std	Y+6, r1	; 0x06
    e6e8:	1d 82       	std	Y+5, r1	; 0x05
    e6ea:	33 c0       	rjmp	.+102    	; 0xe752 <min_dis+0x98>
    {
        if((included[i]==FALSE)&&dist[i]<min)
    e6ec:	8d 81       	ldd	r24, Y+5	; 0x05
    e6ee:	9e 81       	ldd	r25, Y+6	; 0x06
    e6f0:	88 0f       	add	r24, r24
    e6f2:	99 1f       	adc	r25, r25
    e6f4:	29 85       	ldd	r18, Y+9	; 0x09
    e6f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    e6f8:	82 0f       	add	r24, r18
    e6fa:	93 1f       	adc	r25, r19
    e6fc:	fc 01       	movw	r30, r24
    e6fe:	80 81       	ld	r24, Z
    e700:	91 81       	ldd	r25, Z+1	; 0x01
    e702:	00 97       	sbiw	r24, 0x00	; 0
    e704:	09 f5       	brne	.+66     	; 0xe748 <min_dis+0x8e>
    e706:	8d 81       	ldd	r24, Y+5	; 0x05
    e708:	9e 81       	ldd	r25, Y+6	; 0x06
    e70a:	88 0f       	add	r24, r24
    e70c:	99 1f       	adc	r25, r25
    e70e:	2f 81       	ldd	r18, Y+7	; 0x07
    e710:	38 85       	ldd	r19, Y+8	; 0x08
    e712:	82 0f       	add	r24, r18
    e714:	93 1f       	adc	r25, r19
    e716:	fc 01       	movw	r30, r24
    e718:	20 81       	ld	r18, Z
    e71a:	31 81       	ldd	r19, Z+1	; 0x01
    e71c:	89 81       	ldd	r24, Y+1	; 0x01
    e71e:	9a 81       	ldd	r25, Y+2	; 0x02
    e720:	28 17       	cp	r18, r24
    e722:	39 07       	cpc	r19, r25
    e724:	8c f4       	brge	.+34     	; 0xe748 <min_dis+0x8e>
        {
            min=dist[i];
    e726:	8d 81       	ldd	r24, Y+5	; 0x05
    e728:	9e 81       	ldd	r25, Y+6	; 0x06
    e72a:	88 0f       	add	r24, r24
    e72c:	99 1f       	adc	r25, r25
    e72e:	2f 81       	ldd	r18, Y+7	; 0x07
    e730:	38 85       	ldd	r19, Y+8	; 0x08
    e732:	82 0f       	add	r24, r18
    e734:	93 1f       	adc	r25, r19
    e736:	fc 01       	movw	r30, r24
    e738:	80 81       	ld	r24, Z
    e73a:	91 81       	ldd	r25, Z+1	; 0x01
    e73c:	9a 83       	std	Y+2, r25	; 0x02
    e73e:	89 83       	std	Y+1, r24	; 0x01
            min_index=i;
    e740:	8d 81       	ldd	r24, Y+5	; 0x05
    e742:	9e 81       	ldd	r25, Y+6	; 0x06
    e744:	9c 83       	std	Y+4, r25	; 0x04
    e746:	8b 83       	std	Y+3, r24	; 0x03
}

int min_dis(int dist[], int included[])
{
    int min=INF,min_index=0,i=0;
    for(i=0;i<36;i++)
    e748:	8d 81       	ldd	r24, Y+5	; 0x05
    e74a:	9e 81       	ldd	r25, Y+6	; 0x06
    e74c:	01 96       	adiw	r24, 0x01	; 1
    e74e:	9e 83       	std	Y+6, r25	; 0x06
    e750:	8d 83       	std	Y+5, r24	; 0x05
    e752:	8d 81       	ldd	r24, Y+5	; 0x05
    e754:	9e 81       	ldd	r25, Y+6	; 0x06
    e756:	84 32       	cpi	r24, 0x24	; 36
    e758:	91 05       	cpc	r25, r1
    e75a:	44 f2       	brlt	.-112    	; 0xe6ec <min_dis+0x32>
        {
            min=dist[i];
            min_index=i;
        }
    }
    return min_index;
    e75c:	8b 81       	ldd	r24, Y+3	; 0x03
    e75e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    e760:	2a 96       	adiw	r28, 0x0a	; 10
    e762:	0f b6       	in	r0, 0x3f	; 63
    e764:	f8 94       	cli
    e766:	de bf       	out	0x3e, r29	; 62
    e768:	0f be       	out	0x3f, r0	; 63
    e76a:	cd bf       	out	0x3d, r28	; 61
    e76c:	df 91       	pop	r29
    e76e:	cf 91       	pop	r28
    e770:	08 95       	ret

0000e772 <align>:

char align(int turn_count)
{
    e772:	cf 93       	push	r28
    e774:	df 93       	push	r29
    e776:	0f 92       	push	r0
    e778:	0f 92       	push	r0
    e77a:	cd b7       	in	r28, 0x3d	; 61
    e77c:	de b7       	in	r29, 0x3e	; 62
    e77e:	9a 83       	std	Y+2, r25	; 0x02
    e780:	89 83       	std	Y+1, r24	; 0x01
turn_count=turn_count%3;
    e782:	89 81       	ldd	r24, Y+1	; 0x01
    e784:	9a 81       	ldd	r25, Y+2	; 0x02
    e786:	23 e0       	ldi	r18, 0x03	; 3
    e788:	30 e0       	ldi	r19, 0x00	; 0
    e78a:	b9 01       	movw	r22, r18
    e78c:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e790:	9a 83       	std	Y+2, r25	; 0x02
    e792:	89 83       	std	Y+1, r24	; 0x01
if(turn_count==2||turn_count==-2)
    e794:	89 81       	ldd	r24, Y+1	; 0x01
    e796:	9a 81       	ldd	r25, Y+2	; 0x02
    e798:	82 30       	cpi	r24, 0x02	; 2
    e79a:	91 05       	cpc	r25, r1
    e79c:	31 f0       	breq	.+12     	; 0xe7aa <align+0x38>
    e79e:	89 81       	ldd	r24, Y+1	; 0x01
    e7a0:	9a 81       	ldd	r25, Y+2	; 0x02
    e7a2:	2f ef       	ldi	r18, 0xFF	; 255
    e7a4:	8e 3f       	cpi	r24, 0xFE	; 254
    e7a6:	92 07       	cpc	r25, r18
    e7a8:	11 f4       	brne	.+4      	; 0xe7ae <align+0x3c>
	return 'U';
    e7aa:	85 e5       	ldi	r24, 0x55	; 85
    e7ac:	1b c0       	rjmp	.+54     	; 0xe7e4 <align+0x72>
else if(turn_count==1||turn_count==-3)
    e7ae:	89 81       	ldd	r24, Y+1	; 0x01
    e7b0:	9a 81       	ldd	r25, Y+2	; 0x02
    e7b2:	81 30       	cpi	r24, 0x01	; 1
    e7b4:	91 05       	cpc	r25, r1
    e7b6:	31 f0       	breq	.+12     	; 0xe7c4 <align+0x52>
    e7b8:	89 81       	ldd	r24, Y+1	; 0x01
    e7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    e7bc:	2f ef       	ldi	r18, 0xFF	; 255
    e7be:	8d 3f       	cpi	r24, 0xFD	; 253
    e7c0:	92 07       	cpc	r25, r18
    e7c2:	11 f4       	brne	.+4      	; 0xe7c8 <align+0x56>
	return 'L';
    e7c4:	8c e4       	ldi	r24, 0x4C	; 76
    e7c6:	0e c0       	rjmp	.+28     	; 0xe7e4 <align+0x72>
else if(turn_count==-1||turn_count==3)
    e7c8:	89 81       	ldd	r24, Y+1	; 0x01
    e7ca:	9a 81       	ldd	r25, Y+2	; 0x02
    e7cc:	2f ef       	ldi	r18, 0xFF	; 255
    e7ce:	8f 3f       	cpi	r24, 0xFF	; 255
    e7d0:	92 07       	cpc	r25, r18
    e7d2:	29 f0       	breq	.+10     	; 0xe7de <align+0x6c>
    e7d4:	89 81       	ldd	r24, Y+1	; 0x01
    e7d6:	9a 81       	ldd	r25, Y+2	; 0x02
    e7d8:	83 30       	cpi	r24, 0x03	; 3
    e7da:	91 05       	cpc	r25, r1
    e7dc:	11 f4       	brne	.+4      	; 0xe7e2 <align+0x70>
	return 'R';
    e7de:	82 e5       	ldi	r24, 0x52	; 82
    e7e0:	01 c0       	rjmp	.+2      	; 0xe7e4 <align+0x72>
else
	return 'N';
    e7e2:	8e e4       	ldi	r24, 0x4E	; 78
}
    e7e4:	0f 90       	pop	r0
    e7e6:	0f 90       	pop	r0
    e7e8:	df 91       	pop	r29
    e7ea:	cf 91       	pop	r28
    e7ec:	08 95       	ret

0000e7ee <rotate>:

char rotate(int current,int next,int *turn_count)
{
    e7ee:	cf 93       	push	r28
    e7f0:	df 93       	push	r29
    e7f2:	cd b7       	in	r28, 0x3d	; 61
    e7f4:	de b7       	in	r29, 0x3e	; 62
    e7f6:	2a 97       	sbiw	r28, 0x0a	; 10
    e7f8:	0f b6       	in	r0, 0x3f	; 63
    e7fa:	f8 94       	cli
    e7fc:	de bf       	out	0x3e, r29	; 62
    e7fe:	0f be       	out	0x3f, r0	; 63
    e800:	cd bf       	out	0x3d, r28	; 61
    e802:	9e 83       	std	Y+6, r25	; 0x06
    e804:	8d 83       	std	Y+5, r24	; 0x05
    e806:	78 87       	std	Y+8, r23	; 0x08
    e808:	6f 83       	std	Y+7, r22	; 0x07
    e80a:	5a 87       	std	Y+10, r21	; 0x0a
    e80c:	49 87       	std	Y+9, r20	; 0x09
     int dir_x,dir_y;
     dir_x=(current/6)-(next/6);
    e80e:	8d 81       	ldd	r24, Y+5	; 0x05
    e810:	9e 81       	ldd	r25, Y+6	; 0x06
    e812:	26 e0       	ldi	r18, 0x06	; 6
    e814:	30 e0       	ldi	r19, 0x00	; 0
    e816:	b9 01       	movw	r22, r18
    e818:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e81c:	9b 01       	movw	r18, r22
    e81e:	8f 81       	ldd	r24, Y+7	; 0x07
    e820:	98 85       	ldd	r25, Y+8	; 0x08
    e822:	46 e0       	ldi	r20, 0x06	; 6
    e824:	50 e0       	ldi	r21, 0x00	; 0
    e826:	ba 01       	movw	r22, r20
    e828:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e82c:	ab 01       	movw	r20, r22
    e82e:	ca 01       	movw	r24, r20
    e830:	a9 01       	movw	r20, r18
    e832:	48 1b       	sub	r20, r24
    e834:	59 0b       	sbc	r21, r25
    e836:	ca 01       	movw	r24, r20
    e838:	9a 83       	std	Y+2, r25	; 0x02
    e83a:	89 83       	std	Y+1, r24	; 0x01
     dir_y=(current%6)-(next%6);
    e83c:	8d 81       	ldd	r24, Y+5	; 0x05
    e83e:	9e 81       	ldd	r25, Y+6	; 0x06
    e840:	26 e0       	ldi	r18, 0x06	; 6
    e842:	30 e0       	ldi	r19, 0x00	; 0
    e844:	b9 01       	movw	r22, r18
    e846:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e84a:	9c 01       	movw	r18, r24
    e84c:	8f 81       	ldd	r24, Y+7	; 0x07
    e84e:	98 85       	ldd	r25, Y+8	; 0x08
    e850:	46 e0       	ldi	r20, 0x06	; 6
    e852:	50 e0       	ldi	r21, 0x00	; 0
    e854:	ba 01       	movw	r22, r20
    e856:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e85a:	f9 01       	movw	r30, r18
    e85c:	e8 1b       	sub	r30, r24
    e85e:	f9 0b       	sbc	r31, r25
    e860:	cf 01       	movw	r24, r30
    e862:	9c 83       	std	Y+4, r25	; 0x04
    e864:	8b 83       	std	Y+3, r24	; 0x03
     if(dir_y==0)
    e866:	8b 81       	ldd	r24, Y+3	; 0x03
    e868:	9c 81       	ldd	r25, Y+4	; 0x04
    e86a:	00 97       	sbiw	r24, 0x00	; 0
    e86c:	a9 f4       	brne	.+42     	; 0xe898 <rotate+0xaa>
	 {
        if(dir_x<0)
    e86e:	89 81       	ldd	r24, Y+1	; 0x01
    e870:	9a 81       	ldd	r25, Y+2	; 0x02
    e872:	99 23       	and	r25, r25
    e874:	7c f4       	brge	.+30     	; 0xe894 <rotate+0xa6>
		{
		// printf("Uturn\n");
			*turn_count+=2;
    e876:	89 85       	ldd	r24, Y+9	; 0x09
    e878:	9a 85       	ldd	r25, Y+10	; 0x0a
    e87a:	fc 01       	movw	r30, r24
    e87c:	80 81       	ld	r24, Z
    e87e:	91 81       	ldd	r25, Z+1	; 0x01
    e880:	9c 01       	movw	r18, r24
    e882:	2e 5f       	subi	r18, 0xFE	; 254
    e884:	3f 4f       	sbci	r19, 0xFF	; 255
    e886:	89 85       	ldd	r24, Y+9	; 0x09
    e888:	9a 85       	ldd	r25, Y+10	; 0x0a
    e88a:	fc 01       	movw	r30, r24
    e88c:	31 83       	std	Z+1, r19	; 0x01
    e88e:	20 83       	st	Z, r18
			return 'U';
    e890:	85 e5       	ldi	r24, 0x55	; 85
    e892:	3d c0       	rjmp	.+122    	; 0xe90e <rotate+0x120>
			p_ny=0;
        }
        else
        {
        //printf("NC\n");
			return 'N';
    e894:	8e e4       	ldi	r24, 0x4E	; 78
    e896:	3b c0       	rjmp	.+118    	; 0xe90e <rotate+0x120>
        }
     }
     else if(dir_x==0)
    e898:	89 81       	ldd	r24, Y+1	; 0x01
    e89a:	9a 81       	ldd	r25, Y+2	; 0x02
    e89c:	00 97       	sbiw	r24, 0x00	; 0
    e89e:	b1 f5       	brne	.+108    	; 0xe90c <rotate+0x11e>
     {
      if(dir_y<0)
    e8a0:	8b 81       	ldd	r24, Y+3	; 0x03
    e8a2:	9c 81       	ldd	r25, Y+4	; 0x04
    e8a4:	99 23       	and	r25, r25
    e8a6:	cc f4       	brge	.+50     	; 0xe8da <rotate+0xec>
	  {
      //printf("Right\n");
		*turn_count=*turn_count+1;
    e8a8:	89 85       	ldd	r24, Y+9	; 0x09
    e8aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    e8ac:	fc 01       	movw	r30, r24
    e8ae:	80 81       	ld	r24, Z
    e8b0:	91 81       	ldd	r25, Z+1	; 0x01
    e8b2:	9c 01       	movw	r18, r24
    e8b4:	2f 5f       	subi	r18, 0xFF	; 255
    e8b6:	3f 4f       	sbci	r19, 0xFF	; 255
    e8b8:	89 85       	ldd	r24, Y+9	; 0x09
    e8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    e8bc:	fc 01       	movw	r30, r24
    e8be:	31 83       	std	Z+1, r19	; 0x01
    e8c0:	20 83       	st	Z, r18
		p_nx=0;
    e8c2:	10 92 3c 04 	sts	0x043C, r1
    e8c6:	10 92 3b 04 	sts	0x043B, r1
		p_ny=1;
    e8ca:	81 e0       	ldi	r24, 0x01	; 1
    e8cc:	90 e0       	ldi	r25, 0x00	; 0
    e8ce:	90 93 3e 04 	sts	0x043E, r25
    e8d2:	80 93 3d 04 	sts	0x043D, r24
		return 'R';
    e8d6:	82 e5       	ldi	r24, 0x52	; 82
    e8d8:	1a c0       	rjmp	.+52     	; 0xe90e <rotate+0x120>
      }
      else
	  {
      //printf("Left\n");
		p_nx=0;
    e8da:	10 92 3c 04 	sts	0x043C, r1
    e8de:	10 92 3b 04 	sts	0x043B, r1
		p_ny=-1;
    e8e2:	8f ef       	ldi	r24, 0xFF	; 255
    e8e4:	9f ef       	ldi	r25, 0xFF	; 255
    e8e6:	90 93 3e 04 	sts	0x043E, r25
    e8ea:	80 93 3d 04 	sts	0x043D, r24
		*turn_count=*turn_count-1;
    e8ee:	89 85       	ldd	r24, Y+9	; 0x09
    e8f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    e8f2:	fc 01       	movw	r30, r24
    e8f4:	80 81       	ld	r24, Z
    e8f6:	91 81       	ldd	r25, Z+1	; 0x01
    e8f8:	9c 01       	movw	r18, r24
    e8fa:	21 50       	subi	r18, 0x01	; 1
    e8fc:	30 40       	sbci	r19, 0x00	; 0
    e8fe:	89 85       	ldd	r24, Y+9	; 0x09
    e900:	9a 85       	ldd	r25, Y+10	; 0x0a
    e902:	fc 01       	movw	r30, r24
    e904:	31 83       	std	Z+1, r19	; 0x01
    e906:	20 83       	st	Z, r18
		return 'L';
    e908:	8c e4       	ldi	r24, 0x4C	; 76
    e90a:	01 c0       	rjmp	.+2      	; 0xe90e <rotate+0x120>
    e90c:	00 c0       	rjmp	.+0      	; 0xe90e <rotate+0x120>
      }
    }
}
    e90e:	2a 96       	adiw	r28, 0x0a	; 10
    e910:	0f b6       	in	r0, 0x3f	; 63
    e912:	f8 94       	cli
    e914:	de bf       	out	0x3e, r29	; 62
    e916:	0f be       	out	0x3f, r0	; 63
    e918:	cd bf       	out	0x3d, r28	; 61
    e91a:	df 91       	pop	r29
    e91c:	cf 91       	pop	r28
    e91e:	08 95       	ret

0000e920 <direction>:

char direction(int current,int next,int *turn_count)
{
    e920:	cf 93       	push	r28
    e922:	df 93       	push	r29
    e924:	cd b7       	in	r28, 0x3d	; 61
    e926:	de b7       	in	r29, 0x3e	; 62
    e928:	27 97       	sbiw	r28, 0x07	; 7
    e92a:	0f b6       	in	r0, 0x3f	; 63
    e92c:	f8 94       	cli
    e92e:	de bf       	out	0x3e, r29	; 62
    e930:	0f be       	out	0x3f, r0	; 63
    e932:	cd bf       	out	0x3d, r28	; 61
    e934:	9b 83       	std	Y+3, r25	; 0x03
    e936:	8a 83       	std	Y+2, r24	; 0x02
    e938:	7d 83       	std	Y+5, r23	; 0x05
    e93a:	6c 83       	std	Y+4, r22	; 0x04
    e93c:	5f 83       	std	Y+7, r21	; 0x07
    e93e:	4e 83       	std	Y+6, r20	; 0x06
     n_nx=(next/6)-(current/6);
    e940:	8c 81       	ldd	r24, Y+4	; 0x04
    e942:	9d 81       	ldd	r25, Y+5	; 0x05
    e944:	26 e0       	ldi	r18, 0x06	; 6
    e946:	30 e0       	ldi	r19, 0x00	; 0
    e948:	b9 01       	movw	r22, r18
    e94a:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e94e:	9b 01       	movw	r18, r22
    e950:	8a 81       	ldd	r24, Y+2	; 0x02
    e952:	9b 81       	ldd	r25, Y+3	; 0x03
    e954:	46 e0       	ldi	r20, 0x06	; 6
    e956:	50 e0       	ldi	r21, 0x00	; 0
    e958:	ba 01       	movw	r22, r20
    e95a:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e95e:	ab 01       	movw	r20, r22
    e960:	ca 01       	movw	r24, r20
    e962:	a9 01       	movw	r20, r18
    e964:	48 1b       	sub	r20, r24
    e966:	59 0b       	sbc	r21, r25
    e968:	ca 01       	movw	r24, r20
    e96a:	90 93 40 04 	sts	0x0440, r25
    e96e:	80 93 3f 04 	sts	0x043F, r24
     n_ny=(next%6)-(current%6);
    e972:	8c 81       	ldd	r24, Y+4	; 0x04
    e974:	9d 81       	ldd	r25, Y+5	; 0x05
    e976:	26 e0       	ldi	r18, 0x06	; 6
    e978:	30 e0       	ldi	r19, 0x00	; 0
    e97a:	b9 01       	movw	r22, r18
    e97c:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e980:	9c 01       	movw	r18, r24
    e982:	8a 81       	ldd	r24, Y+2	; 0x02
    e984:	9b 81       	ldd	r25, Y+3	; 0x03
    e986:	46 e0       	ldi	r20, 0x06	; 6
    e988:	50 e0       	ldi	r21, 0x00	; 0
    e98a:	ba 01       	movw	r22, r20
    e98c:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    e990:	f9 01       	movw	r30, r18
    e992:	e8 1b       	sub	r30, r24
    e994:	f9 0b       	sbc	r31, r25
    e996:	cf 01       	movw	r24, r30
    e998:	90 93 42 04 	sts	0x0442, r25
    e99c:	80 93 41 04 	sts	0x0441, r24
     char out='o';
    e9a0:	8f e6       	ldi	r24, 0x6F	; 111
    e9a2:	89 83       	std	Y+1, r24	; 0x01
     if(n_nx==p_nx && n_ny==p_ny)
    e9a4:	20 91 3f 04 	lds	r18, 0x043F
    e9a8:	30 91 40 04 	lds	r19, 0x0440
    e9ac:	80 91 3b 04 	lds	r24, 0x043B
    e9b0:	90 91 3c 04 	lds	r25, 0x043C
    e9b4:	28 17       	cp	r18, r24
    e9b6:	39 07       	cpc	r19, r25
    e9b8:	71 f4       	brne	.+28     	; 0xe9d6 <direction+0xb6>
    e9ba:	20 91 41 04 	lds	r18, 0x0441
    e9be:	30 91 42 04 	lds	r19, 0x0442
    e9c2:	80 91 3d 04 	lds	r24, 0x043D
    e9c6:	90 91 3e 04 	lds	r25, 0x043E
    e9ca:	28 17       	cp	r18, r24
    e9cc:	39 07       	cpc	r19, r25
    e9ce:	19 f4       	brne	.+6      	; 0xe9d6 <direction+0xb6>
	 {
		out='n';
    e9d0:	8e e6       	ldi	r24, 0x6E	; 110
    e9d2:	89 83       	std	Y+1, r24	; 0x01
    e9d4:	82 c0       	rjmp	.+260    	; 0xeada <direction+0x1ba>
     }
     else if(n_nx==(-p_nx) && n_ny==(-p_ny))
    e9d6:	80 91 3b 04 	lds	r24, 0x043B
    e9da:	90 91 3c 04 	lds	r25, 0x043C
    e9de:	22 27       	eor	r18, r18
    e9e0:	33 27       	eor	r19, r19
    e9e2:	28 1b       	sub	r18, r24
    e9e4:	39 0b       	sbc	r19, r25
    e9e6:	80 91 3f 04 	lds	r24, 0x043F
    e9ea:	90 91 40 04 	lds	r25, 0x0440
    e9ee:	28 17       	cp	r18, r24
    e9f0:	39 07       	cpc	r19, r25
    e9f2:	91 f4       	brne	.+36     	; 0xea18 <direction+0xf8>
    e9f4:	80 91 3d 04 	lds	r24, 0x043D
    e9f8:	90 91 3e 04 	lds	r25, 0x043E
    e9fc:	22 27       	eor	r18, r18
    e9fe:	33 27       	eor	r19, r19
    ea00:	28 1b       	sub	r18, r24
    ea02:	39 0b       	sbc	r19, r25
    ea04:	80 91 41 04 	lds	r24, 0x0441
    ea08:	90 91 42 04 	lds	r25, 0x0442
    ea0c:	28 17       	cp	r18, r24
    ea0e:	39 07       	cpc	r19, r25
    ea10:	19 f4       	brne	.+6      	; 0xea18 <direction+0xf8>
	 {
		//*turn_count+=2;
		out='n';
    ea12:	8e e6       	ldi	r24, 0x6E	; 110
    ea14:	89 83       	std	Y+1, r24	; 0x01
    ea16:	61 c0       	rjmp	.+194    	; 0xeada <direction+0x1ba>
     }
     else if(p_nx!=0)
    ea18:	80 91 3b 04 	lds	r24, 0x043B
    ea1c:	90 91 3c 04 	lds	r25, 0x043C
    ea20:	00 97       	sbiw	r24, 0x00	; 0
    ea22:	59 f1       	breq	.+86     	; 0xea7a <direction+0x15a>
	 {
		if((p_nx==n_ny ))
    ea24:	20 91 3b 04 	lds	r18, 0x043B
    ea28:	30 91 3c 04 	lds	r19, 0x043C
    ea2c:	80 91 41 04 	lds	r24, 0x0441
    ea30:	90 91 42 04 	lds	r25, 0x0442
    ea34:	28 17       	cp	r18, r24
    ea36:	39 07       	cpc	r19, r25
    ea38:	81 f4       	brne	.+32     	; 0xea5a <direction+0x13a>
		{
			*turn_count+=-1;
    ea3a:	8e 81       	ldd	r24, Y+6	; 0x06
    ea3c:	9f 81       	ldd	r25, Y+7	; 0x07
    ea3e:	fc 01       	movw	r30, r24
    ea40:	80 81       	ld	r24, Z
    ea42:	91 81       	ldd	r25, Z+1	; 0x01
    ea44:	9c 01       	movw	r18, r24
    ea46:	21 50       	subi	r18, 0x01	; 1
    ea48:	30 40       	sbci	r19, 0x00	; 0
    ea4a:	8e 81       	ldd	r24, Y+6	; 0x06
    ea4c:	9f 81       	ldd	r25, Y+7	; 0x07
    ea4e:	fc 01       	movw	r30, r24
    ea50:	31 83       	std	Z+1, r19	; 0x01
    ea52:	20 83       	st	Z, r18
			out= 'l';
    ea54:	8c e6       	ldi	r24, 0x6C	; 108
    ea56:	89 83       	std	Y+1, r24	; 0x01
    ea58:	40 c0       	rjmp	.+128    	; 0xeada <direction+0x1ba>
		}
		else
		{
			*turn_count+=1;
    ea5a:	8e 81       	ldd	r24, Y+6	; 0x06
    ea5c:	9f 81       	ldd	r25, Y+7	; 0x07
    ea5e:	fc 01       	movw	r30, r24
    ea60:	80 81       	ld	r24, Z
    ea62:	91 81       	ldd	r25, Z+1	; 0x01
    ea64:	9c 01       	movw	r18, r24
    ea66:	2f 5f       	subi	r18, 0xFF	; 255
    ea68:	3f 4f       	sbci	r19, 0xFF	; 255
    ea6a:	8e 81       	ldd	r24, Y+6	; 0x06
    ea6c:	9f 81       	ldd	r25, Y+7	; 0x07
    ea6e:	fc 01       	movw	r30, r24
    ea70:	31 83       	std	Z+1, r19	; 0x01
    ea72:	20 83       	st	Z, r18
			out= 'r';
    ea74:	82 e7       	ldi	r24, 0x72	; 114
    ea76:	89 83       	std	Y+1, r24	; 0x01
    ea78:	30 c0       	rjmp	.+96     	; 0xeada <direction+0x1ba>
		}
    }
    else if(p_ny!=0)
    ea7a:	80 91 3d 04 	lds	r24, 0x043D
    ea7e:	90 91 3e 04 	lds	r25, 0x043E
    ea82:	00 97       	sbiw	r24, 0x00	; 0
    ea84:	51 f1       	breq	.+84     	; 0xeada <direction+0x1ba>
	{
		if(p_ny==n_nx)
    ea86:	20 91 3d 04 	lds	r18, 0x043D
    ea8a:	30 91 3e 04 	lds	r19, 0x043E
    ea8e:	80 91 3f 04 	lds	r24, 0x043F
    ea92:	90 91 40 04 	lds	r25, 0x0440
    ea96:	28 17       	cp	r18, r24
    ea98:	39 07       	cpc	r19, r25
    ea9a:	81 f4       	brne	.+32     	; 0xeabc <direction+0x19c>
		{
			*turn_count+=1;
    ea9c:	8e 81       	ldd	r24, Y+6	; 0x06
    ea9e:	9f 81       	ldd	r25, Y+7	; 0x07
    eaa0:	fc 01       	movw	r30, r24
    eaa2:	80 81       	ld	r24, Z
    eaa4:	91 81       	ldd	r25, Z+1	; 0x01
    eaa6:	9c 01       	movw	r18, r24
    eaa8:	2f 5f       	subi	r18, 0xFF	; 255
    eaaa:	3f 4f       	sbci	r19, 0xFF	; 255
    eaac:	8e 81       	ldd	r24, Y+6	; 0x06
    eaae:	9f 81       	ldd	r25, Y+7	; 0x07
    eab0:	fc 01       	movw	r30, r24
    eab2:	31 83       	std	Z+1, r19	; 0x01
    eab4:	20 83       	st	Z, r18
			out= 'r';
    eab6:	82 e7       	ldi	r24, 0x72	; 114
    eab8:	89 83       	std	Y+1, r24	; 0x01
    eaba:	0f c0       	rjmp	.+30     	; 0xeada <direction+0x1ba>
		}
		else
		{
		*turn_count-=1;
    eabc:	8e 81       	ldd	r24, Y+6	; 0x06
    eabe:	9f 81       	ldd	r25, Y+7	; 0x07
    eac0:	fc 01       	movw	r30, r24
    eac2:	80 81       	ld	r24, Z
    eac4:	91 81       	ldd	r25, Z+1	; 0x01
    eac6:	9c 01       	movw	r18, r24
    eac8:	21 50       	subi	r18, 0x01	; 1
    eaca:	30 40       	sbci	r19, 0x00	; 0
    eacc:	8e 81       	ldd	r24, Y+6	; 0x06
    eace:	9f 81       	ldd	r25, Y+7	; 0x07
    ead0:	fc 01       	movw	r30, r24
    ead2:	31 83       	std	Z+1, r19	; 0x01
    ead4:	20 83       	st	Z, r18
		out= 'l';
    ead6:	8c e6       	ldi	r24, 0x6C	; 108
    ead8:	89 83       	std	Y+1, r24	; 0x01
		}
    }
    p_nx=n_nx;
    eada:	80 91 3f 04 	lds	r24, 0x043F
    eade:	90 91 40 04 	lds	r25, 0x0440
    eae2:	90 93 3c 04 	sts	0x043C, r25
    eae6:	80 93 3b 04 	sts	0x043B, r24
    p_ny=n_ny;
    eaea:	80 91 41 04 	lds	r24, 0x0441
    eaee:	90 91 42 04 	lds	r25, 0x0442
    eaf2:	90 93 3e 04 	sts	0x043E, r25
    eaf6:	80 93 3d 04 	sts	0x043D, r24
    return out;
    eafa:	89 81       	ldd	r24, Y+1	; 0x01
}
    eafc:	27 96       	adiw	r28, 0x07	; 7
    eafe:	0f b6       	in	r0, 0x3f	; 63
    eb00:	f8 94       	cli
    eb02:	de bf       	out	0x3e, r29	; 62
    eb04:	0f be       	out	0x3f, r0	; 63
    eb06:	cd bf       	out	0x3d, r28	; 61
    eb08:	df 91       	pop	r29
    eb0a:	cf 91       	pop	r28
    eb0c:	08 95       	ret

0000eb0e <sh_path>:

char* sh_path(int start, int end,int *count1)
{
    eb0e:	0f 93       	push	r16
    eb10:	1f 93       	push	r17
    eb12:	cf 93       	push	r28
    eb14:	df 93       	push	r29
    eb16:	cd b7       	in	r28, 0x3d	; 61
    eb18:	de b7       	in	r29, 0x3e	; 62
    eb1a:	c5 50       	subi	r28, 0x05	; 5
    eb1c:	d1 40       	sbci	r29, 0x01	; 1
    eb1e:	0f b6       	in	r0, 0x3f	; 63
    eb20:	f8 94       	cli
    eb22:	de bf       	out	0x3e, r29	; 62
    eb24:	0f be       	out	0x3f, r0	; 63
    eb26:	cd bf       	out	0x3d, r28	; 61
    eb28:	9e 01       	movw	r18, r28
    eb2a:	20 50       	subi	r18, 0x00	; 0
    eb2c:	3f 4f       	sbci	r19, 0xFF	; 255
    eb2e:	f9 01       	movw	r30, r18
    eb30:	91 83       	std	Z+1, r25	; 0x01
    eb32:	80 83       	st	Z, r24
    eb34:	ce 01       	movw	r24, r28
    eb36:	8e 5f       	subi	r24, 0xFE	; 254
    eb38:	9e 4f       	sbci	r25, 0xFE	; 254
    eb3a:	fc 01       	movw	r30, r24
    eb3c:	71 83       	std	Z+1, r23	; 0x01
    eb3e:	60 83       	st	Z, r22
    eb40:	ce 01       	movw	r24, r28
    eb42:	8c 5f       	subi	r24, 0xFC	; 252
    eb44:	9e 4f       	sbci	r25, 0xFE	; 254
    eb46:	fc 01       	movw	r30, r24
    eb48:	51 83       	std	Z+1, r21	; 0x01
    eb4a:	40 83       	st	Z, r20
    int dist[36],parent[36];
    int count=0,turn_count=0,current=0,length=0,weight=1,u=0,v=0,i=0,j=0;
    eb4c:	1c 86       	std	Y+12, r1	; 0x0c
    eb4e:	1b 86       	std	Y+11, r1	; 0x0b
    eb50:	ce 01       	movw	r24, r28
    eb52:	8a 55       	subi	r24, 0x5A	; 90
    eb54:	9f 4f       	sbci	r25, 0xFF	; 255
    eb56:	fc 01       	movw	r30, r24
    eb58:	11 82       	std	Z+1, r1	; 0x01
    eb5a:	10 82       	st	Z, r1
    eb5c:	1a 82       	std	Y+2, r1	; 0x02
    eb5e:	19 82       	std	Y+1, r1	; 0x01
    eb60:	1c 82       	std	Y+4, r1	; 0x04
    eb62:	1b 82       	std	Y+3, r1	; 0x03
    eb64:	81 e0       	ldi	r24, 0x01	; 1
    eb66:	90 e0       	ldi	r25, 0x00	; 0
    eb68:	9e 87       	std	Y+14, r25	; 0x0e
    eb6a:	8d 87       	std	Y+13, r24	; 0x0d
    eb6c:	18 8a       	std	Y+16, r1	; 0x10
    eb6e:	1f 86       	std	Y+15, r1	; 0x0f
    eb70:	1a 8a       	std	Y+18, r1	; 0x12
    eb72:	19 8a       	std	Y+17, r1	; 0x11
    eb74:	1e 82       	std	Y+6, r1	; 0x06
    eb76:	1d 82       	std	Y+5, r1	; 0x05
    eb78:	18 86       	std	Y+8, r1	; 0x08
    eb7a:	1f 82       	std	Y+7, r1	; 0x07
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    eb7c:	ce 01       	movw	r24, r28
    eb7e:	80 51       	subi	r24, 0x10	; 16
    eb80:	9f 4f       	sbci	r25, 0xFF	; 255
    eb82:	20 e1       	ldi	r18, 0x10	; 16
    eb84:	fc 01       	movw	r30, r24
    eb86:	32 2f       	mov	r19, r18
    eb88:	11 92       	st	Z+, r1
    eb8a:	3a 95       	dec	r19
    eb8c:	e9 f7       	brne	.-6      	; 0xeb88 <sh_path+0x7a>
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    eb8e:	10 92 3c 04 	sts	0x043C, r1
    eb92:	10 92 3b 04 	sts	0x043B, r1
    eb96:	10 92 3e 04 	sts	0x043E, r1
    eb9a:	10 92 3d 04 	sts	0x043D, r1
    eb9e:	10 92 40 04 	sts	0x0440, r1
    eba2:	10 92 3f 04 	sts	0x043F, r1
    eba6:	10 92 42 04 	sts	0x0442, r1
    ebaa:	10 92 41 04 	sts	0x0441, r1
    for(i=0;i<36;i++)
    ebae:	1e 82       	std	Y+6, r1	; 0x06
    ebb0:	1d 82       	std	Y+5, r1	; 0x05
    ebb2:	2e c0       	rjmp	.+92     	; 0xec10 <sh_path+0x102>
	{
        dist[i]=INF;
    ebb4:	8d 81       	ldd	r24, Y+5	; 0x05
    ebb6:	9e 81       	ldd	r25, Y+6	; 0x06
    ebb8:	88 0f       	add	r24, r24
    ebba:	99 1f       	adc	r25, r25
    ebbc:	9e 01       	movw	r18, r28
    ebbe:	2f 5f       	subi	r18, 0xFF	; 255
    ebc0:	3f 4f       	sbci	r19, 0xFF	; 255
    ebc2:	82 0f       	add	r24, r18
    ebc4:	93 1f       	adc	r25, r19
    ebc6:	45 96       	adiw	r24, 0x15	; 21
    ebc8:	27 ee       	ldi	r18, 0xE7	; 231
    ebca:	33 e0       	ldi	r19, 0x03	; 3
    ebcc:	fc 01       	movw	r30, r24
    ebce:	31 83       	std	Z+1, r19	; 0x01
    ebd0:	20 83       	st	Z, r18
        included[i]=FALSE;
    ebd2:	9e 01       	movw	r18, r28
    ebd4:	28 55       	subi	r18, 0x58	; 88
    ebd6:	3f 4f       	sbci	r19, 0xFF	; 255
    ebd8:	8d 81       	ldd	r24, Y+5	; 0x05
    ebda:	9e 81       	ldd	r25, Y+6	; 0x06
    ebdc:	88 0f       	add	r24, r24
    ebde:	99 1f       	adc	r25, r25
    ebe0:	82 0f       	add	r24, r18
    ebe2:	93 1f       	adc	r25, r19
    ebe4:	fc 01       	movw	r30, r24
    ebe6:	11 82       	std	Z+1, r1	; 0x01
    ebe8:	10 82       	st	Z, r1
        parent[i]=INF;
    ebea:	9e 01       	movw	r18, r28
    ebec:	22 5a       	subi	r18, 0xA2	; 162
    ebee:	3f 4f       	sbci	r19, 0xFF	; 255
    ebf0:	8d 81       	ldd	r24, Y+5	; 0x05
    ebf2:	9e 81       	ldd	r25, Y+6	; 0x06
    ebf4:	88 0f       	add	r24, r24
    ebf6:	99 1f       	adc	r25, r25
    ebf8:	82 0f       	add	r24, r18
    ebfa:	93 1f       	adc	r25, r19
    ebfc:	27 ee       	ldi	r18, 0xE7	; 231
    ebfe:	33 e0       	ldi	r19, 0x03	; 3
    ec00:	fc 01       	movw	r30, r24
    ec02:	31 83       	std	Z+1, r19	; 0x01
    ec04:	20 83       	st	Z, r18
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    for(i=0;i<36;i++)
    ec06:	8d 81       	ldd	r24, Y+5	; 0x05
    ec08:	9e 81       	ldd	r25, Y+6	; 0x06
    ec0a:	01 96       	adiw	r24, 0x01	; 1
    ec0c:	9e 83       	std	Y+6, r25	; 0x06
    ec0e:	8d 83       	std	Y+5, r24	; 0x05
    ec10:	8d 81       	ldd	r24, Y+5	; 0x05
    ec12:	9e 81       	ldd	r25, Y+6	; 0x06
    ec14:	84 32       	cpi	r24, 0x24	; 36
    ec16:	91 05       	cpc	r25, r1
    ec18:	6c f2       	brlt	.-102    	; 0xebb4 <sh_path+0xa6>
	{
        dist[i]=INF;
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    ec1a:	ce 01       	movw	r24, r28
    ec1c:	80 50       	subi	r24, 0x00	; 0
    ec1e:	9f 4f       	sbci	r25, 0xFF	; 255
    ec20:	fc 01       	movw	r30, r24
    ec22:	80 81       	ld	r24, Z
    ec24:	91 81       	ldd	r25, Z+1	; 0x01
    ec26:	88 0f       	add	r24, r24
    ec28:	99 1f       	adc	r25, r25
    ec2a:	9e 01       	movw	r18, r28
    ec2c:	2f 5f       	subi	r18, 0xFF	; 255
    ec2e:	3f 4f       	sbci	r19, 0xFF	; 255
    ec30:	82 0f       	add	r24, r18
    ec32:	93 1f       	adc	r25, r19
    ec34:	45 96       	adiw	r24, 0x15	; 21
    ec36:	fc 01       	movw	r30, r24
    ec38:	11 82       	std	Z+1, r1	; 0x01
    ec3a:	10 82       	st	Z, r1
    parent[start]=start;
    ec3c:	9e 01       	movw	r18, r28
    ec3e:	22 5a       	subi	r18, 0xA2	; 162
    ec40:	3f 4f       	sbci	r19, 0xFF	; 255
    ec42:	ce 01       	movw	r24, r28
    ec44:	80 50       	subi	r24, 0x00	; 0
    ec46:	9f 4f       	sbci	r25, 0xFF	; 255
    ec48:	fc 01       	movw	r30, r24
    ec4a:	80 81       	ld	r24, Z
    ec4c:	91 81       	ldd	r25, Z+1	; 0x01
    ec4e:	88 0f       	add	r24, r24
    ec50:	99 1f       	adc	r25, r25
    ec52:	82 0f       	add	r24, r18
    ec54:	93 1f       	adc	r25, r19
    ec56:	9e 01       	movw	r18, r28
    ec58:	20 50       	subi	r18, 0x00	; 0
    ec5a:	3f 4f       	sbci	r19, 0xFF	; 255
    ec5c:	f9 01       	movw	r30, r18
    ec5e:	20 81       	ld	r18, Z
    ec60:	31 81       	ldd	r19, Z+1	; 0x01
    ec62:	fc 01       	movw	r30, r24
    ec64:	31 83       	std	Z+1, r19	; 0x01
    ec66:	20 83       	st	Z, r18
    for(i=0;i<35;i++)
    ec68:	1e 82       	std	Y+6, r1	; 0x06
    ec6a:	1d 82       	std	Y+5, r1	; 0x05
    ec6c:	01 c1       	rjmp	.+514    	; 0xee70 <sh_path+0x362>
	{
        u=min_dis(dist,included);
    ec6e:	ce 01       	movw	r24, r28
    ec70:	46 96       	adiw	r24, 0x16	; 22
    ec72:	9e 01       	movw	r18, r28
    ec74:	28 55       	subi	r18, 0x58	; 88
    ec76:	3f 4f       	sbci	r19, 0xFF	; 255
    ec78:	b9 01       	movw	r22, r18
    ec7a:	0e 94 5d 73 	call	0xe6ba	; 0xe6ba <min_dis>
    ec7e:	98 8b       	std	Y+16, r25	; 0x10
    ec80:	8f 87       	std	Y+15, r24	; 0x0f
    //    printf("%d\n",u);
        included[u]=TRUE;
    ec82:	9e 01       	movw	r18, r28
    ec84:	28 55       	subi	r18, 0x58	; 88
    ec86:	3f 4f       	sbci	r19, 0xFF	; 255
    ec88:	8f 85       	ldd	r24, Y+15	; 0x0f
    ec8a:	98 89       	ldd	r25, Y+16	; 0x10
    ec8c:	88 0f       	add	r24, r24
    ec8e:	99 1f       	adc	r25, r25
    ec90:	82 0f       	add	r24, r18
    ec92:	93 1f       	adc	r25, r19
    ec94:	21 e0       	ldi	r18, 0x01	; 1
    ec96:	30 e0       	ldi	r19, 0x00	; 0
    ec98:	fc 01       	movw	r30, r24
    ec9a:	31 83       	std	Z+1, r19	; 0x01
    ec9c:	20 83       	st	Z, r18
        p_nx=u/6;
    ec9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    eca0:	98 89       	ldd	r25, Y+16	; 0x10
    eca2:	26 e0       	ldi	r18, 0x06	; 6
    eca4:	30 e0       	ldi	r19, 0x00	; 0
    eca6:	b9 01       	movw	r22, r18
    eca8:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    ecac:	9b 01       	movw	r18, r22
    ecae:	c9 01       	movw	r24, r18
    ecb0:	90 93 3c 04 	sts	0x043C, r25
    ecb4:	80 93 3b 04 	sts	0x043B, r24
        p_ny=u%6;
    ecb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    ecba:	98 89       	ldd	r25, Y+16	; 0x10
    ecbc:	26 e0       	ldi	r18, 0x06	; 6
    ecbe:	30 e0       	ldi	r19, 0x00	; 0
    ecc0:	b9 01       	movw	r22, r18
    ecc2:	0e 94 e9 81 	call	0x103d2	; 0x103d2 <__divmodhi4>
    ecc6:	90 93 3e 04 	sts	0x043E, r25
    ecca:	80 93 3d 04 	sts	0x043D, r24
        adjacent(p_nx,p_ny,adj);
    ecce:	80 91 3b 04 	lds	r24, 0x043B
    ecd2:	90 91 3c 04 	lds	r25, 0x043C
    ecd6:	40 91 3d 04 	lds	r20, 0x043D
    ecda:	50 91 3e 04 	lds	r21, 0x043E
    ecde:	9e 01       	movw	r18, r28
    ece0:	20 51       	subi	r18, 0x10	; 16
    ece2:	3f 4f       	sbci	r19, 0xFF	; 255
    ece4:	ba 01       	movw	r22, r20
    ece6:	a9 01       	movw	r20, r18
    ece8:	0e 94 9e 72 	call	0xe53c	; 0xe53c <adjacent>
        for(j=0;j<4;j++)
    ecec:	18 86       	std	Y+8, r1	; 0x08
    ecee:	1f 82       	std	Y+7, r1	; 0x07
    ecf0:	b4 c0       	rjmp	.+360    	; 0xee5a <sh_path+0x34c>
		{
            if(adj[j][0]!=-1)
    ecf2:	9e 01       	movw	r18, r28
    ecf4:	20 51       	subi	r18, 0x10	; 16
    ecf6:	3f 4f       	sbci	r19, 0xFF	; 255
    ecf8:	8f 81       	ldd	r24, Y+7	; 0x07
    ecfa:	98 85       	ldd	r25, Y+8	; 0x08
    ecfc:	88 0f       	add	r24, r24
    ecfe:	99 1f       	adc	r25, r25
    ed00:	88 0f       	add	r24, r24
    ed02:	99 1f       	adc	r25, r25
    ed04:	82 0f       	add	r24, r18
    ed06:	93 1f       	adc	r25, r19
    ed08:	fc 01       	movw	r30, r24
    ed0a:	80 81       	ld	r24, Z
    ed0c:	91 81       	ldd	r25, Z+1	; 0x01
    ed0e:	ff ef       	ldi	r31, 0xFF	; 255
    ed10:	8f 3f       	cpi	r24, 0xFF	; 255
    ed12:	9f 07       	cpc	r25, r31
    ed14:	09 f4       	brne	.+2      	; 0xed18 <sh_path+0x20a>
    ed16:	9c c0       	rjmp	.+312    	; 0xee50 <sh_path+0x342>
			{

                n_nx=adj[j][0];
    ed18:	9e 01       	movw	r18, r28
    ed1a:	20 51       	subi	r18, 0x10	; 16
    ed1c:	3f 4f       	sbci	r19, 0xFF	; 255
    ed1e:	8f 81       	ldd	r24, Y+7	; 0x07
    ed20:	98 85       	ldd	r25, Y+8	; 0x08
    ed22:	88 0f       	add	r24, r24
    ed24:	99 1f       	adc	r25, r25
    ed26:	88 0f       	add	r24, r24
    ed28:	99 1f       	adc	r25, r25
    ed2a:	82 0f       	add	r24, r18
    ed2c:	93 1f       	adc	r25, r19
    ed2e:	fc 01       	movw	r30, r24
    ed30:	80 81       	ld	r24, Z
    ed32:	91 81       	ldd	r25, Z+1	; 0x01
    ed34:	90 93 40 04 	sts	0x0440, r25
    ed38:	80 93 3f 04 	sts	0x043F, r24
                n_ny=adj[j][1];
    ed3c:	9e 01       	movw	r18, r28
    ed3e:	20 51       	subi	r18, 0x10	; 16
    ed40:	3f 4f       	sbci	r19, 0xFF	; 255
    ed42:	8f 81       	ldd	r24, Y+7	; 0x07
    ed44:	98 85       	ldd	r25, Y+8	; 0x08
    ed46:	88 0f       	add	r24, r24
    ed48:	99 1f       	adc	r25, r25
    ed4a:	88 0f       	add	r24, r24
    ed4c:	99 1f       	adc	r25, r25
    ed4e:	82 0f       	add	r24, r18
    ed50:	93 1f       	adc	r25, r19
    ed52:	02 96       	adiw	r24, 0x02	; 2
    ed54:	fc 01       	movw	r30, r24
    ed56:	80 81       	ld	r24, Z
    ed58:	91 81       	ldd	r25, Z+1	; 0x01
    ed5a:	90 93 42 04 	sts	0x0442, r25
    ed5e:	80 93 41 04 	sts	0x0441, r24
                v=grid[n_nx][n_ny]-1;
    ed62:	20 91 3f 04 	lds	r18, 0x043F
    ed66:	30 91 40 04 	lds	r19, 0x0440
    ed6a:	40 91 41 04 	lds	r20, 0x0441
    ed6e:	50 91 42 04 	lds	r21, 0x0442
    ed72:	c9 01       	movw	r24, r18
    ed74:	88 0f       	add	r24, r24
    ed76:	99 1f       	adc	r25, r25
    ed78:	82 0f       	add	r24, r18
    ed7a:	93 1f       	adc	r25, r19
    ed7c:	88 0f       	add	r24, r24
    ed7e:	99 1f       	adc	r25, r25
    ed80:	84 0f       	add	r24, r20
    ed82:	95 1f       	adc	r25, r21
    ed84:	88 0f       	add	r24, r24
    ed86:	99 1f       	adc	r25, r25
    ed88:	8e 5f       	subi	r24, 0xFE	; 254
    ed8a:	9d 4f       	sbci	r25, 0xFD	; 253
    ed8c:	fc 01       	movw	r30, r24
    ed8e:	80 81       	ld	r24, Z
    ed90:	91 81       	ldd	r25, Z+1	; 0x01
    ed92:	01 97       	sbiw	r24, 0x01	; 1
    ed94:	9a 8b       	std	Y+18, r25	; 0x12
    ed96:	89 8b       	std	Y+17, r24	; 0x11
                //printf("%d  %d\n",n_nx,n_ny);
                if((included[v]==FALSE)&&(dist[v]>(dist[u]+weight)))   // d[u,v] > d[u,i]+d[i,v] here d[i,v] is always 1 for a grid
    ed98:	9e 01       	movw	r18, r28
    ed9a:	28 55       	subi	r18, 0x58	; 88
    ed9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ed9e:	89 89       	ldd	r24, Y+17	; 0x11
    eda0:	9a 89       	ldd	r25, Y+18	; 0x12
    eda2:	88 0f       	add	r24, r24
    eda4:	99 1f       	adc	r25, r25
    eda6:	82 0f       	add	r24, r18
    eda8:	93 1f       	adc	r25, r19
    edaa:	fc 01       	movw	r30, r24
    edac:	80 81       	ld	r24, Z
    edae:	91 81       	ldd	r25, Z+1	; 0x01
    edb0:	00 97       	sbiw	r24, 0x00	; 0
    edb2:	09 f0       	breq	.+2      	; 0xedb6 <sh_path+0x2a8>
    edb4:	4d c0       	rjmp	.+154    	; 0xee50 <sh_path+0x342>
    edb6:	89 89       	ldd	r24, Y+17	; 0x11
    edb8:	9a 89       	ldd	r25, Y+18	; 0x12
    edba:	88 0f       	add	r24, r24
    edbc:	99 1f       	adc	r25, r25
    edbe:	9e 01       	movw	r18, r28
    edc0:	2f 5f       	subi	r18, 0xFF	; 255
    edc2:	3f 4f       	sbci	r19, 0xFF	; 255
    edc4:	82 0f       	add	r24, r18
    edc6:	93 1f       	adc	r25, r19
    edc8:	45 96       	adiw	r24, 0x15	; 21
    edca:	fc 01       	movw	r30, r24
    edcc:	20 81       	ld	r18, Z
    edce:	31 81       	ldd	r19, Z+1	; 0x01
    edd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    edd2:	98 89       	ldd	r25, Y+16	; 0x10
    edd4:	88 0f       	add	r24, r24
    edd6:	99 1f       	adc	r25, r25
    edd8:	ae 01       	movw	r20, r28
    edda:	4f 5f       	subi	r20, 0xFF	; 255
    eddc:	5f 4f       	sbci	r21, 0xFF	; 255
    edde:	84 0f       	add	r24, r20
    ede0:	95 1f       	adc	r25, r21
    ede2:	45 96       	adiw	r24, 0x15	; 21
    ede4:	fc 01       	movw	r30, r24
    ede6:	40 81       	ld	r20, Z
    ede8:	51 81       	ldd	r21, Z+1	; 0x01
    edea:	8d 85       	ldd	r24, Y+13	; 0x0d
    edec:	9e 85       	ldd	r25, Y+14	; 0x0e
    edee:	84 0f       	add	r24, r20
    edf0:	95 1f       	adc	r25, r21
    edf2:	82 17       	cp	r24, r18
    edf4:	93 07       	cpc	r25, r19
    edf6:	64 f5       	brge	.+88     	; 0xee50 <sh_path+0x342>
                    {
						dist[v]=dist[u]+weight;
    edf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    edfa:	98 89       	ldd	r25, Y+16	; 0x10
    edfc:	88 0f       	add	r24, r24
    edfe:	99 1f       	adc	r25, r25
    ee00:	9e 01       	movw	r18, r28
    ee02:	2f 5f       	subi	r18, 0xFF	; 255
    ee04:	3f 4f       	sbci	r19, 0xFF	; 255
    ee06:	82 0f       	add	r24, r18
    ee08:	93 1f       	adc	r25, r19
    ee0a:	45 96       	adiw	r24, 0x15	; 21
    ee0c:	fc 01       	movw	r30, r24
    ee0e:	20 81       	ld	r18, Z
    ee10:	31 81       	ldd	r19, Z+1	; 0x01
    ee12:	8d 85       	ldd	r24, Y+13	; 0x0d
    ee14:	9e 85       	ldd	r25, Y+14	; 0x0e
    ee16:	28 0f       	add	r18, r24
    ee18:	39 1f       	adc	r19, r25
    ee1a:	89 89       	ldd	r24, Y+17	; 0x11
    ee1c:	9a 89       	ldd	r25, Y+18	; 0x12
    ee1e:	88 0f       	add	r24, r24
    ee20:	99 1f       	adc	r25, r25
    ee22:	ae 01       	movw	r20, r28
    ee24:	4f 5f       	subi	r20, 0xFF	; 255
    ee26:	5f 4f       	sbci	r21, 0xFF	; 255
    ee28:	84 0f       	add	r24, r20
    ee2a:	95 1f       	adc	r25, r21
    ee2c:	45 96       	adiw	r24, 0x15	; 21
    ee2e:	fc 01       	movw	r30, r24
    ee30:	31 83       	std	Z+1, r19	; 0x01
    ee32:	20 83       	st	Z, r18
						parent[v]=u;
    ee34:	9e 01       	movw	r18, r28
    ee36:	22 5a       	subi	r18, 0xA2	; 162
    ee38:	3f 4f       	sbci	r19, 0xFF	; 255
    ee3a:	89 89       	ldd	r24, Y+17	; 0x11
    ee3c:	9a 89       	ldd	r25, Y+18	; 0x12
    ee3e:	88 0f       	add	r24, r24
    ee40:	99 1f       	adc	r25, r25
    ee42:	82 0f       	add	r24, r18
    ee44:	93 1f       	adc	r25, r19
    ee46:	2f 85       	ldd	r18, Y+15	; 0x0f
    ee48:	38 89       	ldd	r19, Y+16	; 0x10
    ee4a:	fc 01       	movw	r30, r24
    ee4c:	31 83       	std	Z+1, r19	; 0x01
    ee4e:	20 83       	st	Z, r18
    //    printf("%d\n",u);
        included[u]=TRUE;
        p_nx=u/6;
        p_ny=u%6;
        adjacent(p_nx,p_ny,adj);
        for(j=0;j<4;j++)
    ee50:	8f 81       	ldd	r24, Y+7	; 0x07
    ee52:	98 85       	ldd	r25, Y+8	; 0x08
    ee54:	01 96       	adiw	r24, 0x01	; 1
    ee56:	98 87       	std	Y+8, r25	; 0x08
    ee58:	8f 83       	std	Y+7, r24	; 0x07
    ee5a:	8f 81       	ldd	r24, Y+7	; 0x07
    ee5c:	98 85       	ldd	r25, Y+8	; 0x08
    ee5e:	84 30       	cpi	r24, 0x04	; 4
    ee60:	91 05       	cpc	r25, r1
    ee62:	0c f4       	brge	.+2      	; 0xee66 <sh_path+0x358>
    ee64:	46 cf       	rjmp	.-372    	; 0xecf2 <sh_path+0x1e4>
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    parent[start]=start;
    for(i=0;i<35;i++)
    ee66:	8d 81       	ldd	r24, Y+5	; 0x05
    ee68:	9e 81       	ldd	r25, Y+6	; 0x06
    ee6a:	01 96       	adiw	r24, 0x01	; 1
    ee6c:	9e 83       	std	Y+6, r25	; 0x06
    ee6e:	8d 83       	std	Y+5, r24	; 0x05
    ee70:	8d 81       	ldd	r24, Y+5	; 0x05
    ee72:	9e 81       	ldd	r25, Y+6	; 0x06
    ee74:	83 32       	cpi	r24, 0x23	; 35
    ee76:	91 05       	cpc	r25, r1
    ee78:	0c f4       	brge	.+2      	; 0xee7c <sh_path+0x36e>
    ee7a:	f9 ce       	rjmp	.-526    	; 0xec6e <sh_path+0x160>
                    }
            }
        }
    }

    p=(int*)malloc(sizeof(int));
    ee7c:	82 e0       	ldi	r24, 0x02	; 2
    ee7e:	90 e0       	ldi	r25, 0x00	; 0
    ee80:	0e 94 fc 81 	call	0x103f8	; 0x103f8 <malloc>
    ee84:	9a 87       	std	Y+10, r25	; 0x0a
    ee86:	89 87       	std	Y+9, r24	; 0x09
    current=end;
    ee88:	ce 01       	movw	r24, r28
    ee8a:	8e 5f       	subi	r24, 0xFE	; 254
    ee8c:	9e 4f       	sbci	r25, 0xFE	; 254
    ee8e:	fc 01       	movw	r30, r24
    ee90:	80 81       	ld	r24, Z
    ee92:	91 81       	ldd	r25, Z+1	; 0x01
    ee94:	9a 83       	std	Y+2, r25	; 0x02
    ee96:	89 83       	std	Y+1, r24	; 0x01
    p[0]=current;
    ee98:	89 85       	ldd	r24, Y+9	; 0x09
    ee9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ee9c:	29 81       	ldd	r18, Y+1	; 0x01
    ee9e:	3a 81       	ldd	r19, Y+2	; 0x02
    eea0:	fc 01       	movw	r30, r24
    eea2:	31 83       	std	Z+1, r19	; 0x01
    eea4:	20 83       	st	Z, r18
    while(current!=start)
    eea6:	2d c0       	rjmp	.+90     	; 0xef02 <sh_path+0x3f4>
	{
		length++;
    eea8:	8b 81       	ldd	r24, Y+3	; 0x03
    eeaa:	9c 81       	ldd	r25, Y+4	; 0x04
    eeac:	01 96       	adiw	r24, 0x01	; 1
    eeae:	9c 83       	std	Y+4, r25	; 0x04
    eeb0:	8b 83       	std	Y+3, r24	; 0x03
		current=parent[current];
    eeb2:	9e 01       	movw	r18, r28
    eeb4:	22 5a       	subi	r18, 0xA2	; 162
    eeb6:	3f 4f       	sbci	r19, 0xFF	; 255
    eeb8:	89 81       	ldd	r24, Y+1	; 0x01
    eeba:	9a 81       	ldd	r25, Y+2	; 0x02
    eebc:	88 0f       	add	r24, r24
    eebe:	99 1f       	adc	r25, r25
    eec0:	82 0f       	add	r24, r18
    eec2:	93 1f       	adc	r25, r19
    eec4:	fc 01       	movw	r30, r24
    eec6:	80 81       	ld	r24, Z
    eec8:	91 81       	ldd	r25, Z+1	; 0x01
    eeca:	9a 83       	std	Y+2, r25	; 0x02
    eecc:	89 83       	std	Y+1, r24	; 0x01
		p=(int*)realloc(p,((length+1)*sizeof(int)));
    eece:	8b 81       	ldd	r24, Y+3	; 0x03
    eed0:	9c 81       	ldd	r25, Y+4	; 0x04
    eed2:	01 96       	adiw	r24, 0x01	; 1
    eed4:	88 0f       	add	r24, r24
    eed6:	99 1f       	adc	r25, r25
    eed8:	9c 01       	movw	r18, r24
    eeda:	89 85       	ldd	r24, Y+9	; 0x09
    eedc:	9a 85       	ldd	r25, Y+10	; 0x0a
    eede:	b9 01       	movw	r22, r18
    eee0:	0e 94 2b 83 	call	0x10656	; 0x10656 <realloc>
    eee4:	9a 87       	std	Y+10, r25	; 0x0a
    eee6:	89 87       	std	Y+9, r24	; 0x09
		p[length]=current;
    eee8:	8b 81       	ldd	r24, Y+3	; 0x03
    eeea:	9c 81       	ldd	r25, Y+4	; 0x04
    eeec:	88 0f       	add	r24, r24
    eeee:	99 1f       	adc	r25, r25
    eef0:	29 85       	ldd	r18, Y+9	; 0x09
    eef2:	3a 85       	ldd	r19, Y+10	; 0x0a
    eef4:	82 0f       	add	r24, r18
    eef6:	93 1f       	adc	r25, r19
    eef8:	29 81       	ldd	r18, Y+1	; 0x01
    eefa:	3a 81       	ldd	r19, Y+2	; 0x02
    eefc:	fc 01       	movw	r30, r24
    eefe:	31 83       	std	Z+1, r19	; 0x01
    ef00:	20 83       	st	Z, r18
    }

    p=(int*)malloc(sizeof(int));
    current=end;
    p[0]=current;
    while(current!=start)
    ef02:	ce 01       	movw	r24, r28
    ef04:	80 50       	subi	r24, 0x00	; 0
    ef06:	9f 4f       	sbci	r25, 0xFF	; 255
    ef08:	29 81       	ldd	r18, Y+1	; 0x01
    ef0a:	3a 81       	ldd	r19, Y+2	; 0x02
    ef0c:	fc 01       	movw	r30, r24
    ef0e:	80 81       	ld	r24, Z
    ef10:	91 81       	ldd	r25, Z+1	; 0x01
    ef12:	28 17       	cp	r18, r24
    ef14:	39 07       	cpc	r19, r25
    ef16:	41 f6       	brne	.-112    	; 0xeea8 <sh_path+0x39a>
		p=(int*)realloc(p,((length+1)*sizeof(int)));
		p[length]=current;
    }


    p_nx=-1,p_ny=0,n_nx=0,n_ny=0;// Starting with facing north
    ef18:	8f ef       	ldi	r24, 0xFF	; 255
    ef1a:	9f ef       	ldi	r25, 0xFF	; 255
    ef1c:	90 93 3c 04 	sts	0x043C, r25
    ef20:	80 93 3b 04 	sts	0x043B, r24
    ef24:	10 92 3e 04 	sts	0x043E, r1
    ef28:	10 92 3d 04 	sts	0x043D, r1
    ef2c:	10 92 40 04 	sts	0x0440, r1
    ef30:	10 92 3f 04 	sts	0x043F, r1
    ef34:	10 92 42 04 	sts	0x0442, r1
    ef38:	10 92 41 04 	sts	0x0441, r1

    dir=rotate(p[length],p[length-1],&turn_count);
    ef3c:	8b 81       	ldd	r24, Y+3	; 0x03
    ef3e:	9c 81       	ldd	r25, Y+4	; 0x04
    ef40:	88 0f       	add	r24, r24
    ef42:	99 1f       	adc	r25, r25
    ef44:	29 85       	ldd	r18, Y+9	; 0x09
    ef46:	3a 85       	ldd	r19, Y+10	; 0x0a
    ef48:	82 0f       	add	r24, r18
    ef4a:	93 1f       	adc	r25, r19
    ef4c:	fc 01       	movw	r30, r24
    ef4e:	80 81       	ld	r24, Z
    ef50:	91 81       	ldd	r25, Z+1	; 0x01
    ef52:	2b 81       	ldd	r18, Y+3	; 0x03
    ef54:	3c 81       	ldd	r19, Y+4	; 0x04
    ef56:	21 50       	subi	r18, 0x01	; 1
    ef58:	30 40       	sbci	r19, 0x00	; 0
    ef5a:	22 0f       	add	r18, r18
    ef5c:	33 1f       	adc	r19, r19
    ef5e:	49 85       	ldd	r20, Y+9	; 0x09
    ef60:	5a 85       	ldd	r21, Y+10	; 0x0a
    ef62:	24 0f       	add	r18, r20
    ef64:	35 1f       	adc	r19, r21
    ef66:	f9 01       	movw	r30, r18
    ef68:	40 81       	ld	r20, Z
    ef6a:	51 81       	ldd	r21, Z+1	; 0x01
    ef6c:	9e 01       	movw	r18, r28
    ef6e:	2a 55       	subi	r18, 0x5A	; 90
    ef70:	3f 4f       	sbci	r19, 0xFF	; 255
    ef72:	ba 01       	movw	r22, r20
    ef74:	a9 01       	movw	r20, r18
    ef76:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <rotate>
    ef7a:	8b 8b       	std	Y+19, r24	; 0x13

    path=(char*)malloc((length+1)*sizeof(char *));
    ef7c:	8b 81       	ldd	r24, Y+3	; 0x03
    ef7e:	9c 81       	ldd	r25, Y+4	; 0x04
    ef80:	01 96       	adiw	r24, 0x01	; 1
    ef82:	88 0f       	add	r24, r24
    ef84:	99 1f       	adc	r25, r25
    ef86:	0e 94 fc 81 	call	0x103f8	; 0x103f8 <malloc>
    ef8a:	9d 8b       	std	Y+21, r25	; 0x15
    ef8c:	8c 8b       	std	Y+20, r24	; 0x14
    path[0]=dir;
    ef8e:	8c 89       	ldd	r24, Y+20	; 0x14
    ef90:	9d 89       	ldd	r25, Y+21	; 0x15
    ef92:	2b 89       	ldd	r18, Y+19	; 0x13
    ef94:	fc 01       	movw	r30, r24
    ef96:	20 83       	st	Z, r18
    *count1=0;
    ef98:	ce 01       	movw	r24, r28
    ef9a:	8c 5f       	subi	r24, 0xFC	; 252
    ef9c:	9e 4f       	sbci	r25, 0xFE	; 254
    ef9e:	fc 01       	movw	r30, r24
    efa0:	80 81       	ld	r24, Z
    efa2:	91 81       	ldd	r25, Z+1	; 0x01
    efa4:	fc 01       	movw	r30, r24
    efa6:	11 82       	std	Z+1, r1	; 0x01
    efa8:	10 82       	st	Z, r1
    for(i=length-1;i>0;i--)
    efaa:	8b 81       	ldd	r24, Y+3	; 0x03
    efac:	9c 81       	ldd	r25, Y+4	; 0x04
    efae:	01 97       	sbiw	r24, 0x01	; 1
    efb0:	9e 83       	std	Y+6, r25	; 0x06
    efb2:	8d 83       	std	Y+5, r24	; 0x05
    efb4:	4a c0       	rjmp	.+148    	; 0xf04a <sh_path+0x53c>
	{
		*count1+=1;
    efb6:	ce 01       	movw	r24, r28
    efb8:	8c 5f       	subi	r24, 0xFC	; 252
    efba:	9e 4f       	sbci	r25, 0xFE	; 254
    efbc:	fc 01       	movw	r30, r24
    efbe:	80 81       	ld	r24, Z
    efc0:	91 81       	ldd	r25, Z+1	; 0x01
    efc2:	fc 01       	movw	r30, r24
    efc4:	80 81       	ld	r24, Z
    efc6:	91 81       	ldd	r25, Z+1	; 0x01
    efc8:	9c 01       	movw	r18, r24
    efca:	2f 5f       	subi	r18, 0xFF	; 255
    efcc:	3f 4f       	sbci	r19, 0xFF	; 255
    efce:	ce 01       	movw	r24, r28
    efd0:	8c 5f       	subi	r24, 0xFC	; 252
    efd2:	9e 4f       	sbci	r25, 0xFE	; 254
    efd4:	fc 01       	movw	r30, r24
    efd6:	80 81       	ld	r24, Z
    efd8:	91 81       	ldd	r25, Z+1	; 0x01
    efda:	fc 01       	movw	r30, r24
    efdc:	31 83       	std	Z+1, r19	; 0x01
    efde:	20 83       	st	Z, r18
		dir=direction(p[i],p[i-1],&turn_count);
    efe0:	8d 81       	ldd	r24, Y+5	; 0x05
    efe2:	9e 81       	ldd	r25, Y+6	; 0x06
    efe4:	88 0f       	add	r24, r24
    efe6:	99 1f       	adc	r25, r25
    efe8:	29 85       	ldd	r18, Y+9	; 0x09
    efea:	3a 85       	ldd	r19, Y+10	; 0x0a
    efec:	82 0f       	add	r24, r18
    efee:	93 1f       	adc	r25, r19
    eff0:	fc 01       	movw	r30, r24
    eff2:	80 81       	ld	r24, Z
    eff4:	91 81       	ldd	r25, Z+1	; 0x01
    eff6:	2d 81       	ldd	r18, Y+5	; 0x05
    eff8:	3e 81       	ldd	r19, Y+6	; 0x06
    effa:	21 50       	subi	r18, 0x01	; 1
    effc:	30 40       	sbci	r19, 0x00	; 0
    effe:	22 0f       	add	r18, r18
    f000:	33 1f       	adc	r19, r19
    f002:	49 85       	ldd	r20, Y+9	; 0x09
    f004:	5a 85       	ldd	r21, Y+10	; 0x0a
    f006:	24 0f       	add	r18, r20
    f008:	35 1f       	adc	r19, r21
    f00a:	f9 01       	movw	r30, r18
    f00c:	40 81       	ld	r20, Z
    f00e:	51 81       	ldd	r21, Z+1	; 0x01
    f010:	9e 01       	movw	r18, r28
    f012:	2a 55       	subi	r18, 0x5A	; 90
    f014:	3f 4f       	sbci	r19, 0xFF	; 255
    f016:	ba 01       	movw	r22, r20
    f018:	a9 01       	movw	r20, r18
    f01a:	0e 94 90 74 	call	0xe920	; 0xe920 <direction>
    f01e:	8b 8b       	std	Y+19, r24	; 0x13
		path[*count1]=dir;
    f020:	ce 01       	movw	r24, r28
    f022:	8c 5f       	subi	r24, 0xFC	; 252
    f024:	9e 4f       	sbci	r25, 0xFE	; 254
    f026:	fc 01       	movw	r30, r24
    f028:	80 81       	ld	r24, Z
    f02a:	91 81       	ldd	r25, Z+1	; 0x01
    f02c:	fc 01       	movw	r30, r24
    f02e:	80 81       	ld	r24, Z
    f030:	91 81       	ldd	r25, Z+1	; 0x01
    f032:	2c 89       	ldd	r18, Y+20	; 0x14
    f034:	3d 89       	ldd	r19, Y+21	; 0x15
    f036:	82 0f       	add	r24, r18
    f038:	93 1f       	adc	r25, r19
    f03a:	2b 89       	ldd	r18, Y+19	; 0x13
    f03c:	fc 01       	movw	r30, r24
    f03e:	20 83       	st	Z, r18
    dir=rotate(p[length],p[length-1],&turn_count);

    path=(char*)malloc((length+1)*sizeof(char *));
    path[0]=dir;
    *count1=0;
    for(i=length-1;i>0;i--)
    f040:	8d 81       	ldd	r24, Y+5	; 0x05
    f042:	9e 81       	ldd	r25, Y+6	; 0x06
    f044:	01 97       	sbiw	r24, 0x01	; 1
    f046:	9e 83       	std	Y+6, r25	; 0x06
    f048:	8d 83       	std	Y+5, r24	; 0x05
    f04a:	8d 81       	ldd	r24, Y+5	; 0x05
    f04c:	9e 81       	ldd	r25, Y+6	; 0x06
    f04e:	18 16       	cp	r1, r24
    f050:	19 06       	cpc	r1, r25
    f052:	0c f4       	brge	.+2      	; 0xf056 <sh_path+0x548>
    f054:	b0 cf       	rjmp	.-160    	; 0xefb6 <sh_path+0x4a8>
	{
		*count1+=1;
		dir=direction(p[i],p[i-1],&turn_count);
		path[*count1]=dir;
    }
    *count1+=1;
    f056:	ce 01       	movw	r24, r28
    f058:	8c 5f       	subi	r24, 0xFC	; 252
    f05a:	9e 4f       	sbci	r25, 0xFE	; 254
    f05c:	fc 01       	movw	r30, r24
    f05e:	80 81       	ld	r24, Z
    f060:	91 81       	ldd	r25, Z+1	; 0x01
    f062:	fc 01       	movw	r30, r24
    f064:	80 81       	ld	r24, Z
    f066:	91 81       	ldd	r25, Z+1	; 0x01
    f068:	9c 01       	movw	r18, r24
    f06a:	2f 5f       	subi	r18, 0xFF	; 255
    f06c:	3f 4f       	sbci	r19, 0xFF	; 255
    f06e:	ce 01       	movw	r24, r28
    f070:	8c 5f       	subi	r24, 0xFC	; 252
    f072:	9e 4f       	sbci	r25, 0xFE	; 254
    f074:	fc 01       	movw	r30, r24
    f076:	80 81       	ld	r24, Z
    f078:	91 81       	ldd	r25, Z+1	; 0x01
    f07a:	fc 01       	movw	r30, r24
    f07c:	31 83       	std	Z+1, r19	; 0x01
    f07e:	20 83       	st	Z, r18
    path[*count1]=align(turn_count);
    f080:	ce 01       	movw	r24, r28
    f082:	8c 5f       	subi	r24, 0xFC	; 252
    f084:	9e 4f       	sbci	r25, 0xFE	; 254
    f086:	fc 01       	movw	r30, r24
    f088:	80 81       	ld	r24, Z
    f08a:	91 81       	ldd	r25, Z+1	; 0x01
    f08c:	fc 01       	movw	r30, r24
    f08e:	80 81       	ld	r24, Z
    f090:	91 81       	ldd	r25, Z+1	; 0x01
    f092:	2c 89       	ldd	r18, Y+20	; 0x14
    f094:	3d 89       	ldd	r19, Y+21	; 0x15
    f096:	89 01       	movw	r16, r18
    f098:	08 0f       	add	r16, r24
    f09a:	19 1f       	adc	r17, r25
    f09c:	ce 01       	movw	r24, r28
    f09e:	8a 55       	subi	r24, 0x5A	; 90
    f0a0:	9f 4f       	sbci	r25, 0xFF	; 255
    f0a2:	fc 01       	movw	r30, r24
    f0a4:	80 81       	ld	r24, Z
    f0a6:	91 81       	ldd	r25, Z+1	; 0x01
    f0a8:	0e 94 b9 73 	call	0xe772	; 0xe772 <align>
    f0ac:	f8 01       	movw	r30, r16
    f0ae:	80 83       	st	Z, r24
	*count1+=1;
    f0b0:	ce 01       	movw	r24, r28
    f0b2:	8c 5f       	subi	r24, 0xFC	; 252
    f0b4:	9e 4f       	sbci	r25, 0xFE	; 254
    f0b6:	fc 01       	movw	r30, r24
    f0b8:	80 81       	ld	r24, Z
    f0ba:	91 81       	ldd	r25, Z+1	; 0x01
    f0bc:	fc 01       	movw	r30, r24
    f0be:	80 81       	ld	r24, Z
    f0c0:	91 81       	ldd	r25, Z+1	; 0x01
    f0c2:	9c 01       	movw	r18, r24
    f0c4:	2f 5f       	subi	r18, 0xFF	; 255
    f0c6:	3f 4f       	sbci	r19, 0xFF	; 255
    f0c8:	ce 01       	movw	r24, r28
    f0ca:	8c 5f       	subi	r24, 0xFC	; 252
    f0cc:	9e 4f       	sbci	r25, 0xFE	; 254
    f0ce:	fc 01       	movw	r30, r24
    f0d0:	80 81       	ld	r24, Z
    f0d2:	91 81       	ldd	r25, Z+1	; 0x01
    f0d4:	fc 01       	movw	r30, r24
    f0d6:	31 83       	std	Z+1, r19	; 0x01
    f0d8:	20 83       	st	Z, r18
	path[*count1]='\0';
    f0da:	ce 01       	movw	r24, r28
    f0dc:	8c 5f       	subi	r24, 0xFC	; 252
    f0de:	9e 4f       	sbci	r25, 0xFE	; 254
    f0e0:	fc 01       	movw	r30, r24
    f0e2:	80 81       	ld	r24, Z
    f0e4:	91 81       	ldd	r25, Z+1	; 0x01
    f0e6:	fc 01       	movw	r30, r24
    f0e8:	80 81       	ld	r24, Z
    f0ea:	91 81       	ldd	r25, Z+1	; 0x01
    f0ec:	2c 89       	ldd	r18, Y+20	; 0x14
    f0ee:	3d 89       	ldd	r19, Y+21	; 0x15
    f0f0:	82 0f       	add	r24, r18
    f0f2:	93 1f       	adc	r25, r19
    f0f4:	fc 01       	movw	r30, r24
    f0f6:	10 82       	st	Z, r1
    free(p);
    f0f8:	89 85       	ldd	r24, Y+9	; 0x09
    f0fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    f0fc:	0e 94 92 82 	call	0x10524	; 0x10524 <free>
    return path;
    f100:	8c 89       	ldd	r24, Y+20	; 0x14
    f102:	9d 89       	ldd	r25, Y+21	; 0x15
}
    f104:	cb 5f       	subi	r28, 0xFB	; 251
    f106:	de 4f       	sbci	r29, 0xFE	; 254
    f108:	0f b6       	in	r0, 0x3f	; 63
    f10a:	f8 94       	cli
    f10c:	de bf       	out	0x3e, r29	; 62
    f10e:	0f be       	out	0x3f, r0	; 63
    f110:	cd bf       	out	0x3d, r28	; 61
    f112:	df 91       	pop	r29
    f114:	cf 91       	pop	r28
    f116:	1f 91       	pop	r17
    f118:	0f 91       	pop	r16
    f11a:	08 95       	ret

0000f11c <dijkstra>:
//printf("%c\n",path[i]);
//return 0;
//}

char* dijkstra(int start,int end,int *count)
{
    f11c:	cf 93       	push	r28
    f11e:	df 93       	push	r29
    f120:	cd b7       	in	r28, 0x3d	; 61
    f122:	de b7       	in	r29, 0x3e	; 62
    f124:	2e 97       	sbiw	r28, 0x0e	; 14
    f126:	0f b6       	in	r0, 0x3f	; 63
    f128:	f8 94       	cli
    f12a:	de bf       	out	0x3e, r29	; 62
    f12c:	0f be       	out	0x3f, r0	; 63
    f12e:	cd bf       	out	0x3d, r28	; 61
    f130:	9a 87       	std	Y+10, r25	; 0x0a
    f132:	89 87       	std	Y+9, r24	; 0x09
    f134:	7c 87       	std	Y+12, r23	; 0x0c
    f136:	6b 87       	std	Y+11, r22	; 0x0b
    f138:	5e 87       	std	Y+14, r21	; 0x0e
    f13a:	4d 87       	std	Y+13, r20	; 0x0d
	char *path;
	int i=0,j=0,m=31;
    f13c:	1c 82       	std	Y+4, r1	; 0x04
    f13e:	1b 82       	std	Y+3, r1	; 0x03
    f140:	1e 82       	std	Y+6, r1	; 0x06
    f142:	1d 82       	std	Y+5, r1	; 0x05
    f144:	8f e1       	ldi	r24, 0x1F	; 31
    f146:	90 e0       	ldi	r25, 0x00	; 0
    f148:	98 87       	std	Y+8, r25	; 0x08
    f14a:	8f 83       	std	Y+7, r24	; 0x07
		if(start==end)
    f14c:	29 85       	ldd	r18, Y+9	; 0x09
    f14e:	3a 85       	ldd	r19, Y+10	; 0x0a
    f150:	8b 85       	ldd	r24, Y+11	; 0x0b
    f152:	9c 85       	ldd	r25, Y+12	; 0x0c
    f154:	28 17       	cp	r18, r24
    f156:	39 07       	cpc	r19, r25
    f158:	89 f4       	brne	.+34     	; 0xf17c <dijkstra+0x60>
    {
        path=(char*)malloc(2*sizeof(char));
    f15a:	82 e0       	ldi	r24, 0x02	; 2
    f15c:	90 e0       	ldi	r25, 0x00	; 0
    f15e:	0e 94 fc 81 	call	0x103f8	; 0x103f8 <malloc>
    f162:	9a 83       	std	Y+2, r25	; 0x02
    f164:	89 83       	std	Y+1, r24	; 0x01
        path[0]='N';
    f166:	89 81       	ldd	r24, Y+1	; 0x01
    f168:	9a 81       	ldd	r25, Y+2	; 0x02
    f16a:	2e e4       	ldi	r18, 0x4E	; 78
    f16c:	fc 01       	movw	r30, r24
    f16e:	20 83       	st	Z, r18
        path[1]='\0';
    f170:	89 81       	ldd	r24, Y+1	; 0x01
    f172:	9a 81       	ldd	r25, Y+2	; 0x02
    f174:	01 96       	adiw	r24, 0x01	; 1
    f176:	fc 01       	movw	r30, r24
    f178:	10 82       	st	Z, r1
    f17a:	22 c0       	rjmp	.+68     	; 0xf1c0 <dijkstra+0xa4>
    }
    else{
	start=transf[start];
    f17c:	89 85       	ldd	r24, Y+9	; 0x09
    f17e:	9a 85       	ldd	r25, Y+10	; 0x0a
    f180:	88 0f       	add	r24, r24
    f182:	99 1f       	adc	r25, r25
    f184:	86 5b       	subi	r24, 0xB6	; 182
    f186:	9d 4f       	sbci	r25, 0xFD	; 253
    f188:	fc 01       	movw	r30, r24
    f18a:	80 81       	ld	r24, Z
    f18c:	91 81       	ldd	r25, Z+1	; 0x01
    f18e:	9a 87       	std	Y+10, r25	; 0x0a
    f190:	89 87       	std	Y+9, r24	; 0x09
	end=transf[end];
    f192:	8b 85       	ldd	r24, Y+11	; 0x0b
    f194:	9c 85       	ldd	r25, Y+12	; 0x0c
    f196:	88 0f       	add	r24, r24
    f198:	99 1f       	adc	r25, r25
    f19a:	86 5b       	subi	r24, 0xB6	; 182
    f19c:	9d 4f       	sbci	r25, 0xFD	; 253
    f19e:	fc 01       	movw	r30, r24
    f1a0:	80 81       	ld	r24, Z
    f1a2:	91 81       	ldd	r25, Z+1	; 0x01
    f1a4:	9c 87       	std	Y+12, r25	; 0x0c
    f1a6:	8b 87       	std	Y+11, r24	; 0x0b
	path=sh_path(start,end,count);}
    f1a8:	89 85       	ldd	r24, Y+9	; 0x09
    f1aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    f1ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    f1ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    f1b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    f1b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    f1b4:	ba 01       	movw	r22, r20
    f1b6:	a9 01       	movw	r20, r18
    f1b8:	0e 94 87 75 	call	0xeb0e	; 0xeb0e <sh_path>
    f1bc:	9a 83       	std	Y+2, r25	; 0x02
    f1be:	89 83       	std	Y+1, r24	; 0x01
	return path;
    f1c0:	89 81       	ldd	r24, Y+1	; 0x01
    f1c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    f1c4:	2e 96       	adiw	r28, 0x0e	; 14
    f1c6:	0f b6       	in	r0, 0x3f	; 63
    f1c8:	f8 94       	cli
    f1ca:	de bf       	out	0x3e, r29	; 62
    f1cc:	0f be       	out	0x3f, r0	; 63
    f1ce:	cd bf       	out	0x3d, r28	; 61
    f1d0:	df 91       	pop	r29
    f1d2:	cf 91       	pop	r28
    f1d4:	08 95       	ret

0000f1d6 <animals>:
{31,32,33,34,35,36}};

	int aniloc[20];
	int habloc[20];

	int animals(char a[2]){
    f1d6:	cf 93       	push	r28
    f1d8:	df 93       	push	r29
    f1da:	cd b7       	in	r28, 0x3d	; 61
    f1dc:	de b7       	in	r29, 0x3e	; 62
    f1de:	28 97       	sbiw	r28, 0x08	; 8
    f1e0:	0f b6       	in	r0, 0x3f	; 63
    f1e2:	f8 94       	cli
    f1e4:	de bf       	out	0x3e, r29	; 62
    f1e6:	0f be       	out	0x3f, r0	; 63
    f1e8:	cd bf       	out	0x3d, r28	; 61
    f1ea:	98 87       	std	Y+8, r25	; 0x08
    f1ec:	8f 83       	std	Y+7, r24	; 0x07
		//printf("-----%s\n",a);
		int animal=0,number=0,letter=0;
    f1ee:	1e 82       	std	Y+6, r1	; 0x06
    f1f0:	1d 82       	std	Y+5, r1	; 0x05
    f1f2:	1a 82       	std	Y+2, r1	; 0x02
    f1f4:	19 82       	std	Y+1, r1	; 0x01
    f1f6:	1c 82       	std	Y+4, r1	; 0x04
    f1f8:	1b 82       	std	Y+3, r1	; 0x03
		if(a[0] >= 'A' && a[0] <= 'F')
    f1fa:	8f 81       	ldd	r24, Y+7	; 0x07
    f1fc:	98 85       	ldd	r25, Y+8	; 0x08
    f1fe:	fc 01       	movw	r30, r24
    f200:	80 81       	ld	r24, Z
    f202:	81 34       	cpi	r24, 0x41	; 65
    f204:	80 f0       	brcs	.+32     	; 0xf226 <animals+0x50>
    f206:	8f 81       	ldd	r24, Y+7	; 0x07
    f208:	98 85       	ldd	r25, Y+8	; 0x08
    f20a:	fc 01       	movw	r30, r24
    f20c:	80 81       	ld	r24, Z
    f20e:	87 34       	cpi	r24, 0x47	; 71
    f210:	50 f4       	brcc	.+20     	; 0xf226 <animals+0x50>
		letter = a[0]+1 - 'A';
    f212:	8f 81       	ldd	r24, Y+7	; 0x07
    f214:	98 85       	ldd	r25, Y+8	; 0x08
    f216:	fc 01       	movw	r30, r24
    f218:	80 81       	ld	r24, Z
    f21a:	88 2f       	mov	r24, r24
    f21c:	90 e0       	ldi	r25, 0x00	; 0
    f21e:	80 54       	subi	r24, 0x40	; 64
    f220:	90 40       	sbci	r25, 0x00	; 0
    f222:	9c 83       	std	Y+4, r25	; 0x04
    f224:	8b 83       	std	Y+3, r24	; 0x03
		if(a[1] >='1' && a[1] <= '6')
    f226:	8f 81       	ldd	r24, Y+7	; 0x07
    f228:	98 85       	ldd	r25, Y+8	; 0x08
    f22a:	01 96       	adiw	r24, 0x01	; 1
    f22c:	fc 01       	movw	r30, r24
    f22e:	80 81       	ld	r24, Z
    f230:	81 33       	cpi	r24, 0x31	; 49
    f232:	88 f0       	brcs	.+34     	; 0xf256 <animals+0x80>
    f234:	8f 81       	ldd	r24, Y+7	; 0x07
    f236:	98 85       	ldd	r25, Y+8	; 0x08
    f238:	01 96       	adiw	r24, 0x01	; 1
    f23a:	fc 01       	movw	r30, r24
    f23c:	80 81       	ld	r24, Z
    f23e:	87 33       	cpi	r24, 0x37	; 55
    f240:	50 f4       	brcc	.+20     	; 0xf256 <animals+0x80>
		number = a[1] - '0';
    f242:	8f 81       	ldd	r24, Y+7	; 0x07
    f244:	98 85       	ldd	r25, Y+8	; 0x08
    f246:	01 96       	adiw	r24, 0x01	; 1
    f248:	fc 01       	movw	r30, r24
    f24a:	80 81       	ld	r24, Z
    f24c:	88 2f       	mov	r24, r24
    f24e:	90 e0       	ldi	r25, 0x00	; 0
    f250:	c0 97       	sbiw	r24, 0x30	; 48
    f252:	9a 83       	std	Y+2, r25	; 0x02
    f254:	89 83       	std	Y+1, r24	; 0x01

		animal = graph[number-1][letter-1];
    f256:	89 81       	ldd	r24, Y+1	; 0x01
    f258:	9a 81       	ldd	r25, Y+2	; 0x02
    f25a:	9c 01       	movw	r18, r24
    f25c:	21 50       	subi	r18, 0x01	; 1
    f25e:	30 40       	sbci	r19, 0x00	; 0
    f260:	8b 81       	ldd	r24, Y+3	; 0x03
    f262:	9c 81       	ldd	r25, Y+4	; 0x04
    f264:	ac 01       	movw	r20, r24
    f266:	41 50       	subi	r20, 0x01	; 1
    f268:	50 40       	sbci	r21, 0x00	; 0
    f26a:	c9 01       	movw	r24, r18
    f26c:	88 0f       	add	r24, r24
    f26e:	99 1f       	adc	r25, r25
    f270:	82 0f       	add	r24, r18
    f272:	93 1f       	adc	r25, r19
    f274:	88 0f       	add	r24, r24
    f276:	99 1f       	adc	r25, r25
    f278:	84 0f       	add	r24, r20
    f27a:	95 1f       	adc	r25, r21
    f27c:	88 0f       	add	r24, r24
    f27e:	99 1f       	adc	r25, r25
    f280:	8c 55       	subi	r24, 0x5C	; 92
    f282:	9d 4f       	sbci	r25, 0xFD	; 253
    f284:	fc 01       	movw	r30, r24
    f286:	80 81       	ld	r24, Z
    f288:	91 81       	ldd	r25, Z+1	; 0x01
    f28a:	9e 83       	std	Y+6, r25	; 0x06
    f28c:	8d 83       	std	Y+5, r24	; 0x05
		// if(strcmp("A1",a)==0)
		// animal++;
		return animal;
    f28e:	8d 81       	ldd	r24, Y+5	; 0x05
    f290:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    f292:	28 96       	adiw	r28, 0x08	; 8
    f294:	0f b6       	in	r0, 0x3f	; 63
    f296:	f8 94       	cli
    f298:	de bf       	out	0x3e, r29	; 62
    f29a:	0f be       	out	0x3f, r0	; 63
    f29c:	cd bf       	out	0x3d, r28	; 61
    f29e:	df 91       	pop	r29
    f2a0:	cf 91       	pop	r28
    f2a2:	08 95       	ret

0000f2a4 <habitats>:

	int habitats(char h[2]){
    f2a4:	cf 93       	push	r28
    f2a6:	df 93       	push	r29
    f2a8:	cd b7       	in	r28, 0x3d	; 61
    f2aa:	de b7       	in	r29, 0x3e	; 62
    f2ac:	28 97       	sbiw	r28, 0x08	; 8
    f2ae:	0f b6       	in	r0, 0x3f	; 63
    f2b0:	f8 94       	cli
    f2b2:	de bf       	out	0x3e, r29	; 62
    f2b4:	0f be       	out	0x3f, r0	; 63
    f2b6:	cd bf       	out	0x3d, r28	; 61
    f2b8:	98 87       	std	Y+8, r25	; 0x08
    f2ba:	8f 83       	std	Y+7, r24	; 0x07
		int i=0,m=0,habitat=0;
    f2bc:	1a 82       	std	Y+2, r1	; 0x02
    f2be:	19 82       	std	Y+1, r1	; 0x01
    f2c0:	1c 82       	std	Y+4, r1	; 0x04
    f2c2:	1b 82       	std	Y+3, r1	; 0x03
    f2c4:	1e 82       	std	Y+6, r1	; 0x06
    f2c6:	1d 82       	std	Y+5, r1	; 0x05
		for ( i = 0; h[i] != '\0'; i++)
    f2c8:	1a 82       	std	Y+2, r1	; 0x02
    f2ca:	19 82       	std	Y+1, r1	; 0x01
    f2cc:	1f c0       	rjmp	.+62     	; 0xf30c <habitats+0x68>
		m = m * 10 + h[i] - '0';
    f2ce:	8b 81       	ldd	r24, Y+3	; 0x03
    f2d0:	9c 81       	ldd	r25, Y+4	; 0x04
    f2d2:	88 0f       	add	r24, r24
    f2d4:	99 1f       	adc	r25, r25
    f2d6:	9c 01       	movw	r18, r24
    f2d8:	22 0f       	add	r18, r18
    f2da:	33 1f       	adc	r19, r19
    f2dc:	22 0f       	add	r18, r18
    f2de:	33 1f       	adc	r19, r19
    f2e0:	28 0f       	add	r18, r24
    f2e2:	39 1f       	adc	r19, r25
    f2e4:	89 81       	ldd	r24, Y+1	; 0x01
    f2e6:	9a 81       	ldd	r25, Y+2	; 0x02
    f2e8:	4f 81       	ldd	r20, Y+7	; 0x07
    f2ea:	58 85       	ldd	r21, Y+8	; 0x08
    f2ec:	84 0f       	add	r24, r20
    f2ee:	95 1f       	adc	r25, r21
    f2f0:	fc 01       	movw	r30, r24
    f2f2:	80 81       	ld	r24, Z
    f2f4:	88 2f       	mov	r24, r24
    f2f6:	90 e0       	ldi	r25, 0x00	; 0
    f2f8:	82 0f       	add	r24, r18
    f2fa:	93 1f       	adc	r25, r19
    f2fc:	c0 97       	sbiw	r24, 0x30	; 48
    f2fe:	9c 83       	std	Y+4, r25	; 0x04
    f300:	8b 83       	std	Y+3, r24	; 0x03
		return animal;
	}

	int habitats(char h[2]){
		int i=0,m=0,habitat=0;
		for ( i = 0; h[i] != '\0'; i++)
    f302:	89 81       	ldd	r24, Y+1	; 0x01
    f304:	9a 81       	ldd	r25, Y+2	; 0x02
    f306:	01 96       	adiw	r24, 0x01	; 1
    f308:	9a 83       	std	Y+2, r25	; 0x02
    f30a:	89 83       	std	Y+1, r24	; 0x01
    f30c:	89 81       	ldd	r24, Y+1	; 0x01
    f30e:	9a 81       	ldd	r25, Y+2	; 0x02
    f310:	2f 81       	ldd	r18, Y+7	; 0x07
    f312:	38 85       	ldd	r19, Y+8	; 0x08
    f314:	82 0f       	add	r24, r18
    f316:	93 1f       	adc	r25, r19
    f318:	fc 01       	movw	r30, r24
    f31a:	80 81       	ld	r24, Z
    f31c:	88 23       	and	r24, r24
    f31e:	b9 f6       	brne	.-82     	; 0xf2ce <habitats+0x2a>
		m = m * 10 + h[i] - '0';

		if(m<=5)
    f320:	8b 81       	ldd	r24, Y+3	; 0x03
    f322:	9c 81       	ldd	r25, Y+4	; 0x04
    f324:	86 30       	cpi	r24, 0x06	; 6
    f326:	91 05       	cpc	r25, r1
    f328:	2c f4       	brge	.+10     	; 0xf334 <habitats+0x90>
		habitat = 1 + (m-1);
    f32a:	8b 81       	ldd	r24, Y+3	; 0x03
    f32c:	9c 81       	ldd	r25, Y+4	; 0x04
    f32e:	9e 83       	std	Y+6, r25	; 0x06
    f330:	8d 83       	std	Y+5, r24	; 0x05
    f332:	3f c0       	rjmp	.+126    	; 0xf3b2 <habitats+0x10e>
		else if(m>=6 && m<=10)
    f334:	8b 81       	ldd	r24, Y+3	; 0x03
    f336:	9c 81       	ldd	r25, Y+4	; 0x04
    f338:	86 30       	cpi	r24, 0x06	; 6
    f33a:	91 05       	cpc	r25, r1
    f33c:	5c f0       	brlt	.+22     	; 0xf354 <habitats+0xb0>
    f33e:	8b 81       	ldd	r24, Y+3	; 0x03
    f340:	9c 81       	ldd	r25, Y+4	; 0x04
    f342:	8b 30       	cpi	r24, 0x0B	; 11
    f344:	91 05       	cpc	r25, r1
    f346:	34 f4       	brge	.+12     	; 0xf354 <habitats+0xb0>
		habitat = 2 + (m-1);
    f348:	8b 81       	ldd	r24, Y+3	; 0x03
    f34a:	9c 81       	ldd	r25, Y+4	; 0x04
    f34c:	01 96       	adiw	r24, 0x01	; 1
    f34e:	9e 83       	std	Y+6, r25	; 0x06
    f350:	8d 83       	std	Y+5, r24	; 0x05
    f352:	2f c0       	rjmp	.+94     	; 0xf3b2 <habitats+0x10e>
		else if(m>=11 && m<=15)
    f354:	8b 81       	ldd	r24, Y+3	; 0x03
    f356:	9c 81       	ldd	r25, Y+4	; 0x04
    f358:	8b 30       	cpi	r24, 0x0B	; 11
    f35a:	91 05       	cpc	r25, r1
    f35c:	5c f0       	brlt	.+22     	; 0xf374 <habitats+0xd0>
    f35e:	8b 81       	ldd	r24, Y+3	; 0x03
    f360:	9c 81       	ldd	r25, Y+4	; 0x04
    f362:	80 31       	cpi	r24, 0x10	; 16
    f364:	91 05       	cpc	r25, r1
    f366:	34 f4       	brge	.+12     	; 0xf374 <habitats+0xd0>
		habitat = 3 + (m-1);
    f368:	8b 81       	ldd	r24, Y+3	; 0x03
    f36a:	9c 81       	ldd	r25, Y+4	; 0x04
    f36c:	02 96       	adiw	r24, 0x02	; 2
    f36e:	9e 83       	std	Y+6, r25	; 0x06
    f370:	8d 83       	std	Y+5, r24	; 0x05
    f372:	1f c0       	rjmp	.+62     	; 0xf3b2 <habitats+0x10e>
		else if(m>=16 && m<=20)
    f374:	8b 81       	ldd	r24, Y+3	; 0x03
    f376:	9c 81       	ldd	r25, Y+4	; 0x04
    f378:	80 31       	cpi	r24, 0x10	; 16
    f37a:	91 05       	cpc	r25, r1
    f37c:	5c f0       	brlt	.+22     	; 0xf394 <habitats+0xf0>
    f37e:	8b 81       	ldd	r24, Y+3	; 0x03
    f380:	9c 81       	ldd	r25, Y+4	; 0x04
    f382:	85 31       	cpi	r24, 0x15	; 21
    f384:	91 05       	cpc	r25, r1
    f386:	34 f4       	brge	.+12     	; 0xf394 <habitats+0xf0>
		habitat = 4 + (m-1);
    f388:	8b 81       	ldd	r24, Y+3	; 0x03
    f38a:	9c 81       	ldd	r25, Y+4	; 0x04
    f38c:	03 96       	adiw	r24, 0x03	; 3
    f38e:	9e 83       	std	Y+6, r25	; 0x06
    f390:	8d 83       	std	Y+5, r24	; 0x05
    f392:	0f c0       	rjmp	.+30     	; 0xf3b2 <habitats+0x10e>
		else if(m>=21 && m<=25)
    f394:	8b 81       	ldd	r24, Y+3	; 0x03
    f396:	9c 81       	ldd	r25, Y+4	; 0x04
    f398:	85 31       	cpi	r24, 0x15	; 21
    f39a:	91 05       	cpc	r25, r1
    f39c:	54 f0       	brlt	.+20     	; 0xf3b2 <habitats+0x10e>
    f39e:	8b 81       	ldd	r24, Y+3	; 0x03
    f3a0:	9c 81       	ldd	r25, Y+4	; 0x04
    f3a2:	8a 31       	cpi	r24, 0x1A	; 26
    f3a4:	91 05       	cpc	r25, r1
    f3a6:	2c f4       	brge	.+10     	; 0xf3b2 <habitats+0x10e>
		habitat = 5 + (m-1);
    f3a8:	8b 81       	ldd	r24, Y+3	; 0x03
    f3aa:	9c 81       	ldd	r25, Y+4	; 0x04
    f3ac:	04 96       	adiw	r24, 0x04	; 4
    f3ae:	9e 83       	std	Y+6, r25	; 0x06
    f3b0:	8d 83       	std	Y+5, r24	; 0x05
		return habitat;
    f3b2:	8d 81       	ldd	r24, Y+5	; 0x05
    f3b4:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    f3b6:	28 96       	adiw	r28, 0x08	; 8
    f3b8:	0f b6       	in	r0, 0x3f	; 63
    f3ba:	f8 94       	cli
    f3bc:	de bf       	out	0x3e, r29	; 62
    f3be:	0f be       	out	0x3f, r0	; 63
    f3c0:	cd bf       	out	0x3d, r28	; 61
    f3c2:	df 91       	pop	r29
    f3c4:	cf 91       	pop	r28
    f3c6:	08 95       	ret

0000f3c8 <node_map>:

	void node_map(char *tokenstring,int type, int *len)
	{
    f3c8:	cf 93       	push	r28
    f3ca:	df 93       	push	r29
    f3cc:	cd b7       	in	r28, 0x3d	; 61
    f3ce:	de b7       	in	r29, 0x3e	; 62
    f3d0:	63 97       	sbiw	r28, 0x13	; 19
    f3d2:	0f b6       	in	r0, 0x3f	; 63
    f3d4:	f8 94       	cli
    f3d6:	de bf       	out	0x3e, r29	; 62
    f3d8:	0f be       	out	0x3f, r0	; 63
    f3da:	cd bf       	out	0x3d, r28	; 61
    f3dc:	9f 87       	std	Y+15, r25	; 0x0f
    f3de:	8e 87       	std	Y+14, r24	; 0x0e
    f3e0:	79 8b       	std	Y+17, r23	; 0x11
    f3e2:	68 8b       	std	Y+16, r22	; 0x10
    f3e4:	5b 8b       	std	Y+19, r21	; 0x13
    f3e6:	4a 8b       	std	Y+18, r20	; 0x12
		char a[2];
		char h[2];
		char seps[] = ", ";
    f3e8:	ce 01       	movw	r24, r28
    f3ea:	09 96       	adiw	r24, 0x09	; 9
    f3ec:	2f ee       	ldi	r18, 0xEF	; 239
    f3ee:	32 e0       	ldi	r19, 0x02	; 2
    f3f0:	43 e0       	ldi	r20, 0x03	; 3
    f3f2:	f9 01       	movw	r30, r18
    f3f4:	00 80       	ld	r0, Z
    f3f6:	2f 5f       	subi	r18, 0xFF	; 255
    f3f8:	3f 4f       	sbci	r19, 0xFF	; 255
    f3fa:	fc 01       	movw	r30, r24
    f3fc:	00 82       	st	Z, r0
    f3fe:	01 96       	adiw	r24, 0x01	; 1
    f400:	41 50       	subi	r20, 0x01	; 1
    f402:	44 23       	and	r20, r20
    f404:	b1 f7       	brne	.-20     	; 0xf3f2 <node_map+0x2a>
		char* token;
		int var;
		int i = 0;
    f406:	1c 82       	std	Y+4, r1	; 0x04
    f408:	1b 82       	std	Y+3, r1	; 0x03
		token = strtok (tokenstring, seps);
    f40a:	8e 85       	ldd	r24, Y+14	; 0x0e
    f40c:	9f 85       	ldd	r25, Y+15	; 0x0f
    f40e:	9e 01       	movw	r18, r28
    f410:	27 5f       	subi	r18, 0xF7	; 247
    f412:	3f 4f       	sbci	r19, 0xFF	; 255
    f414:	b9 01       	movw	r22, r18
    f416:	0e 94 0b 84 	call	0x10816	; 0x10816 <strtok>
    f41a:	9a 83       	std	Y+2, r25	; 0x02
    f41c:	89 83       	std	Y+1, r24	; 0x01
		while (token != NULL)
    f41e:	4f c0       	rjmp	.+158    	; 0xf4be <node_map+0xf6>
		{
			if(type==0)
    f420:	88 89       	ldd	r24, Y+16	; 0x10
    f422:	99 89       	ldd	r25, Y+17	; 0x11
    f424:	00 97       	sbiw	r24, 0x00	; 0
    f426:	79 f4       	brne	.+30     	; 0xf446 <node_map+0x7e>
			{//Animal
				aniloc[i]=animals(token);
    f428:	89 81       	ldd	r24, Y+1	; 0x01
    f42a:	9a 81       	ldd	r25, Y+2	; 0x02
    f42c:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <animals>
    f430:	9c 01       	movw	r18, r24
    f432:	8b 81       	ldd	r24, Y+3	; 0x03
    f434:	9c 81       	ldd	r25, Y+4	; 0x04
    f436:	88 0f       	add	r24, r24
    f438:	99 1f       	adc	r25, r25
    f43a:	82 53       	subi	r24, 0x32	; 50
    f43c:	9b 4f       	sbci	r25, 0xFB	; 251
    f43e:	fc 01       	movw	r30, r24
    f440:	31 83       	std	Z+1, r19	; 0x01
    f442:	20 83       	st	Z, r18
    f444:	0e c0       	rjmp	.+28     	; 0xf462 <node_map+0x9a>
			}
			else
			{
				habloc[i]=habitats(token);
    f446:	89 81       	ldd	r24, Y+1	; 0x01
    f448:	9a 81       	ldd	r25, Y+2	; 0x02
    f44a:	0e 94 52 79 	call	0xf2a4	; 0xf2a4 <habitats>
    f44e:	9c 01       	movw	r18, r24
    f450:	8b 81       	ldd	r24, Y+3	; 0x03
    f452:	9c 81       	ldd	r25, Y+4	; 0x04
    f454:	88 0f       	add	r24, r24
    f456:	99 1f       	adc	r25, r25
    f458:	8d 59       	subi	r24, 0x9D	; 157
    f45a:	9b 4f       	sbci	r25, 0xFB	; 251
    f45c:	fc 01       	movw	r30, r24
    f45e:	31 83       	std	Z+1, r19	; 0x01
    f460:	20 83       	st	Z, r18
			}
			sscanf (token, "%d", &var);
    f462:	00 d0       	rcall	.+0      	; 0xf464 <node_map+0x9c>
    f464:	00 d0       	rcall	.+0      	; 0xf466 <node_map+0x9e>
    f466:	8d b7       	in	r24, 0x3d	; 61
    f468:	9e b7       	in	r25, 0x3e	; 62
    f46a:	01 96       	adiw	r24, 0x01	; 1
    f46c:	29 81       	ldd	r18, Y+1	; 0x01
    f46e:	3a 81       	ldd	r19, Y+2	; 0x02
    f470:	fc 01       	movw	r30, r24
    f472:	31 83       	std	Z+1, r19	; 0x01
    f474:	20 83       	st	Z, r18
    f476:	2c ee       	ldi	r18, 0xEC	; 236
    f478:	32 e0       	ldi	r19, 0x02	; 2
    f47a:	fc 01       	movw	r30, r24
    f47c:	33 83       	std	Z+3, r19	; 0x03
    f47e:	22 83       	std	Z+2, r18	; 0x02
    f480:	9e 01       	movw	r18, r28
    f482:	24 5f       	subi	r18, 0xF4	; 244
    f484:	3f 4f       	sbci	r19, 0xFF	; 255
    f486:	fc 01       	movw	r30, r24
    f488:	35 83       	std	Z+5, r19	; 0x05
    f48a:	24 83       	std	Z+4, r18	; 0x04
    f48c:	0e 94 52 84 	call	0x108a4	; 0x108a4 <sscanf>
    f490:	8d b7       	in	r24, 0x3d	; 61
    f492:	9e b7       	in	r25, 0x3e	; 62
    f494:	06 96       	adiw	r24, 0x06	; 6
    f496:	0f b6       	in	r0, 0x3f	; 63
    f498:	f8 94       	cli
    f49a:	9e bf       	out	0x3e, r25	; 62
    f49c:	0f be       	out	0x3f, r0	; 63
    f49e:	8d bf       	out	0x3d, r24	; 61
			i++;
    f4a0:	8b 81       	ldd	r24, Y+3	; 0x03
    f4a2:	9c 81       	ldd	r25, Y+4	; 0x04
    f4a4:	01 96       	adiw	r24, 0x01	; 1
    f4a6:	9c 83       	std	Y+4, r25	; 0x04
    f4a8:	8b 83       	std	Y+3, r24	; 0x03
			token = strtok (NULL, seps);
    f4aa:	9e 01       	movw	r18, r28
    f4ac:	27 5f       	subi	r18, 0xF7	; 247
    f4ae:	3f 4f       	sbci	r19, 0xFF	; 255
    f4b0:	80 e0       	ldi	r24, 0x00	; 0
    f4b2:	90 e0       	ldi	r25, 0x00	; 0
    f4b4:	b9 01       	movw	r22, r18
    f4b6:	0e 94 0b 84 	call	0x10816	; 0x10816 <strtok>
    f4ba:	9a 83       	std	Y+2, r25	; 0x02
    f4bc:	89 83       	std	Y+1, r24	; 0x01
		char seps[] = ", ";
		char* token;
		int var;
		int i = 0;
		token = strtok (tokenstring, seps);
		while (token != NULL)
    f4be:	89 81       	ldd	r24, Y+1	; 0x01
    f4c0:	9a 81       	ldd	r25, Y+2	; 0x02
    f4c2:	00 97       	sbiw	r24, 0x00	; 0
    f4c4:	09 f0       	breq	.+2      	; 0xf4c8 <node_map+0x100>
    f4c6:	ac cf       	rjmp	.-168    	; 0xf420 <node_map+0x58>
			}
			sscanf (token, "%d", &var);
			i++;
			token = strtok (NULL, seps);
		}
		*len=i;
    f4c8:	8a 89       	ldd	r24, Y+18	; 0x12
    f4ca:	9b 89       	ldd	r25, Y+19	; 0x13
    f4cc:	2b 81       	ldd	r18, Y+3	; 0x03
    f4ce:	3c 81       	ldd	r19, Y+4	; 0x04
    f4d0:	fc 01       	movw	r30, r24
    f4d2:	31 83       	std	Z+1, r19	; 0x01
    f4d4:	20 83       	st	Z, r18
	}
    f4d6:	63 96       	adiw	r28, 0x13	; 19
    f4d8:	0f b6       	in	r0, 0x3f	; 63
    f4da:	f8 94       	cli
    f4dc:	de bf       	out	0x3e, r29	; 62
    f4de:	0f be       	out	0x3f, r0	; 63
    f4e0:	cd bf       	out	0x3d, r28	; 61
    f4e2:	df 91       	pop	r29
    f4e4:	cf 91       	pop	r28
    f4e6:	08 95       	ret

0000f4e8 <uart2_init>:

//Function to configure LCD port


void uart2_init(void)
{
    f4e8:	cf 93       	push	r28
    f4ea:	df 93       	push	r29
    f4ec:	cd b7       	in	r28, 0x3d	; 61
    f4ee:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
    f4f0:	81 ed       	ldi	r24, 0xD1	; 209
    f4f2:	90 e0       	ldi	r25, 0x00	; 0
    f4f4:	fc 01       	movw	r30, r24
    f4f6:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    f4f8:	80 ed       	ldi	r24, 0xD0	; 208
    f4fa:	90 e0       	ldi	r25, 0x00	; 0
    f4fc:	fc 01       	movw	r30, r24
    f4fe:	10 82       	st	Z, r1
	UCSR2C = 0x06;
    f500:	82 ed       	ldi	r24, 0xD2	; 210
    f502:	90 e0       	ldi	r25, 0x00	; 0
    f504:	26 e0       	ldi	r18, 0x06	; 6
    f506:	fc 01       	movw	r30, r24
    f508:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
    f50a:	84 ed       	ldi	r24, 0xD4	; 212
    f50c:	90 e0       	ldi	r25, 0x00	; 0
    f50e:	2f e5       	ldi	r18, 0x5F	; 95
    f510:	fc 01       	movw	r30, r24
    f512:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
    f514:	85 ed       	ldi	r24, 0xD5	; 213
    f516:	90 e0       	ldi	r25, 0x00	; 0
    f518:	fc 01       	movw	r30, r24
    f51a:	10 82       	st	Z, r1
	UCSR2B = 0x98;
    f51c:	81 ed       	ldi	r24, 0xD1	; 209
    f51e:	90 e0       	ldi	r25, 0x00	; 0
    f520:	28 e9       	ldi	r18, 0x98	; 152
    f522:	fc 01       	movw	r30, r24
    f524:	20 83       	st	Z, r18
}
    f526:	df 91       	pop	r29
    f528:	cf 91       	pop	r28
    f52a:	08 95       	ret

0000f52c <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{
    f52c:	1f 92       	push	r1
    f52e:	0f 92       	push	r0
    f530:	0f b6       	in	r0, 0x3f	; 63
    f532:	0f 92       	push	r0
    f534:	00 90 5b 00 	lds	r0, 0x005B
    f538:	0f 92       	push	r0
    f53a:	11 24       	eor	r1, r1
    f53c:	2f 93       	push	r18
    f53e:	3f 93       	push	r19
    f540:	4f 93       	push	r20
    f542:	5f 93       	push	r21
    f544:	6f 93       	push	r22
    f546:	7f 93       	push	r23
    f548:	8f 93       	push	r24
    f54a:	9f 93       	push	r25
    f54c:	af 93       	push	r26
    f54e:	bf 93       	push	r27
    f550:	ef 93       	push	r30
    f552:	ff 93       	push	r31
    f554:	cf 93       	push	r28
    f556:	df 93       	push	r29
    f558:	cd b7       	in	r28, 0x3d	; 61
    f55a:	de b7       	in	r29, 0x3e	; 62
	data= UDR2;
    f55c:	86 ed       	ldi	r24, 0xD6	; 214
    f55e:	90 e0       	ldi	r25, 0x00	; 0
    f560:	fc 01       	movw	r30, r24
    f562:	80 81       	ld	r24, Z
    f564:	80 93 ca 04 	sts	0x04CA, r24
	if(data == 0x0A)
    f568:	80 91 ca 04 	lds	r24, 0x04CA
    f56c:	8a 30       	cpi	r24, 0x0A	; 10
    f56e:	61 f4       	brne	.+24     	; 0xf588 <__vector_51+0x5c>
	{
		pos = count;
    f570:	80 91 43 04 	lds	r24, 0x0443
    f574:	80 93 f2 02 	sts	0x02F2, r24
		count++;
    f578:	80 91 43 04 	lds	r24, 0x0443
    f57c:	8f 5f       	subi	r24, 0xFF	; 255
    f57e:	80 93 43 04 	sts	0x0443, r24
		flag = FALSE;
    f582:	10 92 f3 02 	sts	0x02F3, r1
    f586:	52 c0       	rjmp	.+164    	; 0xf62c <__vector_51+0x100>
	}
	else if(data == 0x23)
    f588:	80 91 ca 04 	lds	r24, 0x04CA
    f58c:	83 32       	cpi	r24, 0x23	; 35
    f58e:	91 f4       	brne	.+36     	; 0xf5b4 <__vector_51+0x88>
	{
		flag = 2;
    f590:	82 e0       	ldi	r24, 0x02	; 2
    f592:	80 93 f3 02 	sts	0x02F3, r24
		strcpy(hab, tmp1);
    f596:	8f e8       	ldi	r24, 0x8F	; 143
    f598:	94 e0       	ldi	r25, 0x04	; 4
    f59a:	2a ef       	ldi	r18, 0xFA	; 250
    f59c:	34 e0       	ldi	r19, 0x04	; 4
    f59e:	b9 01       	movw	r22, r18
    f5a0:	0e 94 24 84 	call	0x10848	; 0x10848 <strcpy>
		strcpy(ani, tmp2);
    f5a4:	88 e4       	ldi	r24, 0x48	; 72
    f5a6:	94 e0       	ldi	r25, 0x04	; 4
    f5a8:	2a ea       	ldi	r18, 0xAA	; 170
    f5aa:	34 e0       	ldi	r19, 0x04	; 4
    f5ac:	b9 01       	movw	r22, r18
    f5ae:	0e 94 24 84 	call	0x10848	; 0x10848 <strcpy>
    f5b2:	3c c0       	rjmp	.+120    	; 0xf62c <__vector_51+0x100>
	}
	else if(count > pos && flag == FALSE)
    f5b4:	90 91 43 04 	lds	r25, 0x0443
    f5b8:	80 91 f2 02 	lds	r24, 0x02F2
    f5bc:	89 17       	cp	r24, r25
    f5be:	d8 f4       	brcc	.+54     	; 0xf5f6 <__vector_51+0xca>
    f5c0:	80 91 f3 02 	lds	r24, 0x02F3
    f5c4:	88 23       	and	r24, r24
    f5c6:	b9 f4       	brne	.+46     	; 0xf5f6 <__vector_51+0xca>
	{
		tmp2[a]=data;
    f5c8:	80 91 44 04 	lds	r24, 0x0444
    f5cc:	88 2f       	mov	r24, r24
    f5ce:	90 e0       	ldi	r25, 0x00	; 0
    f5d0:	20 91 ca 04 	lds	r18, 0x04CA
    f5d4:	86 55       	subi	r24, 0x56	; 86
    f5d6:	9b 4f       	sbci	r25, 0xFB	; 251
    f5d8:	fc 01       	movw	r30, r24
    f5da:	20 83       	st	Z, r18
		a++;
    f5dc:	80 91 44 04 	lds	r24, 0x0444
    f5e0:	8f 5f       	subi	r24, 0xFF	; 255
    f5e2:	80 93 44 04 	sts	0x0444, r24
		count++;
    f5e6:	80 91 43 04 	lds	r24, 0x0443
    f5ea:	8f 5f       	subi	r24, 0xFF	; 255
    f5ec:	80 93 43 04 	sts	0x0443, r24
		flag = FALSE;
    f5f0:	10 92 f3 02 	sts	0x02F3, r1
    f5f4:	1b c0       	rjmp	.+54     	; 0xf62c <__vector_51+0x100>
	}
	else if(flag==TRUE)
    f5f6:	80 91 f3 02 	lds	r24, 0x02F3
    f5fa:	81 30       	cpi	r24, 0x01	; 1
    f5fc:	b9 f4       	brne	.+46     	; 0xf62c <__vector_51+0x100>
	{
		tmp1[h]=data;
    f5fe:	80 91 45 04 	lds	r24, 0x0445
    f602:	88 2f       	mov	r24, r24
    f604:	90 e0       	ldi	r25, 0x00	; 0
    f606:	20 91 ca 04 	lds	r18, 0x04CA
    f60a:	86 50       	subi	r24, 0x06	; 6
    f60c:	9b 4f       	sbci	r25, 0xFB	; 251
    f60e:	fc 01       	movw	r30, r24
    f610:	20 83       	st	Z, r18
		h++;
    f612:	80 91 45 04 	lds	r24, 0x0445
    f616:	8f 5f       	subi	r24, 0xFF	; 255
    f618:	80 93 45 04 	sts	0x0445, r24
		count++;
    f61c:	80 91 43 04 	lds	r24, 0x0443
    f620:	8f 5f       	subi	r24, 0xFF	; 255
    f622:	80 93 43 04 	sts	0x0443, r24
		flag = TRUE;
    f626:	81 e0       	ldi	r24, 0x01	; 1
    f628:	80 93 f3 02 	sts	0x02F3, r24
	}
}
    f62c:	df 91       	pop	r29
    f62e:	cf 91       	pop	r28
    f630:	ff 91       	pop	r31
    f632:	ef 91       	pop	r30
    f634:	bf 91       	pop	r27
    f636:	af 91       	pop	r26
    f638:	9f 91       	pop	r25
    f63a:	8f 91       	pop	r24
    f63c:	7f 91       	pop	r23
    f63e:	6f 91       	pop	r22
    f640:	5f 91       	pop	r21
    f642:	4f 91       	pop	r20
    f644:	3f 91       	pop	r19
    f646:	2f 91       	pop	r18
    f648:	0f 90       	pop	r0
    f64a:	00 92 5b 00 	sts	0x005B, r0
    f64e:	0f 90       	pop	r0
    f650:	0f be       	out	0x3f, r0	; 63
    f652:	0f 90       	pop	r0
    f654:	1f 90       	pop	r1
    f656:	18 95       	reti

0000f658 <interrupt_switch_config>:
#include "node.c"
#include "uart.c"

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
    f658:	cf 93       	push	r28
    f65a:	df 93       	push	r29
    f65c:	cd b7       	in	r28, 0x3d	; 61
    f65e:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
    f660:	8d e2       	ldi	r24, 0x2D	; 45
    f662:	90 e0       	ldi	r25, 0x00	; 0
    f664:	2d e2       	ldi	r18, 0x2D	; 45
    f666:	30 e0       	ldi	r19, 0x00	; 0
    f668:	f9 01       	movw	r30, r18
    f66a:	20 81       	ld	r18, Z
    f66c:	2f 77       	andi	r18, 0x7F	; 127
    f66e:	fc 01       	movw	r30, r24
    f670:	20 83       	st	Z, r18
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
    f672:	8e e2       	ldi	r24, 0x2E	; 46
    f674:	90 e0       	ldi	r25, 0x00	; 0
    f676:	2e e2       	ldi	r18, 0x2E	; 46
    f678:	30 e0       	ldi	r19, 0x00	; 0
    f67a:	f9 01       	movw	r30, r18
    f67c:	20 81       	ld	r18, Z
    f67e:	20 68       	ori	r18, 0x80	; 128
    f680:	fc 01       	movw	r30, r24
    f682:	20 83       	st	Z, r18
}
    f684:	df 91       	pop	r29
    f686:	cf 91       	pop	r28
    f688:	08 95       	ret

0000f68a <pick_assign>:

void pick_assign(int nxt_node){
    f68a:	cf 93       	push	r28
    f68c:	df 93       	push	r29
    f68e:	cd b7       	in	r28, 0x3d	; 61
    f690:	de b7       	in	r29, 0x3e	; 62
    f692:	e4 97       	sbiw	r28, 0x34	; 52
    f694:	0f b6       	in	r0, 0x3f	; 63
    f696:	f8 94       	cli
    f698:	de bf       	out	0x3e, r29	; 62
    f69a:	0f be       	out	0x3f, r0	; 63
    f69c:	cd bf       	out	0x3d, r28	; 61
    f69e:	9c ab       	sts	0x5c, r25
    f6a0:	8b ab       	sts	0x5b, r24
int left[6]={7,13,19,25,99,99};
    f6a2:	ce 01       	movw	r24, r28
    f6a4:	03 96       	adiw	r24, 0x03	; 3
    f6a6:	24 ef       	ldi	r18, 0xF4	; 244
    f6a8:	32 e0       	ldi	r19, 0x02	; 2
    f6aa:	4c e0       	ldi	r20, 0x0C	; 12
    f6ac:	f9 01       	movw	r30, r18
    f6ae:	00 80       	ld	r0, Z
    f6b0:	2f 5f       	subi	r18, 0xFF	; 255
    f6b2:	3f 4f       	sbci	r19, 0xFF	; 255
    f6b4:	fc 01       	movw	r30, r24
    f6b6:	00 82       	st	Z, r0
    f6b8:	01 96       	adiw	r24, 0x01	; 1
    f6ba:	41 50       	subi	r20, 0x01	; 1
    f6bc:	44 23       	and	r20, r20
    f6be:	b1 f7       	brne	.-20     	; 0xf6ac <pick_assign+0x22>
int right[6]={12,18,24,30,99,99};
    f6c0:	ce 01       	movw	r24, r28
    f6c2:	0f 96       	adiw	r24, 0x0f	; 15
    f6c4:	20 e0       	ldi	r18, 0x00	; 0
    f6c6:	33 e0       	ldi	r19, 0x03	; 3
    f6c8:	4c e0       	ldi	r20, 0x0C	; 12
    f6ca:	f9 01       	movw	r30, r18
    f6cc:	00 80       	ld	r0, Z
    f6ce:	2f 5f       	subi	r18, 0xFF	; 255
    f6d0:	3f 4f       	sbci	r19, 0xFF	; 255
    f6d2:	fc 01       	movw	r30, r24
    f6d4:	00 82       	st	Z, r0
    f6d6:	01 96       	adiw	r24, 0x01	; 1
    f6d8:	41 50       	subi	r20, 0x01	; 1
    f6da:	44 23       	and	r20, r20
    f6dc:	b1 f7       	brne	.-20     	; 0xf6ca <pick_assign+0x40>
int back[6]={2,3,4,5,99,99};
    f6de:	ce 01       	movw	r24, r28
    f6e0:	4b 96       	adiw	r24, 0x1b	; 27
    f6e2:	2c e0       	ldi	r18, 0x0C	; 12
    f6e4:	33 e0       	ldi	r19, 0x03	; 3
    f6e6:	4c e0       	ldi	r20, 0x0C	; 12
    f6e8:	f9 01       	movw	r30, r18
    f6ea:	00 80       	ld	r0, Z
    f6ec:	2f 5f       	subi	r18, 0xFF	; 255
    f6ee:	3f 4f       	sbci	r19, 0xFF	; 255
    f6f0:	fc 01       	movw	r30, r24
    f6f2:	00 82       	st	Z, r0
    f6f4:	01 96       	adiw	r24, 0x01	; 1
    f6f6:	41 50       	subi	r20, 0x01	; 1
    f6f8:	44 23       	and	r20, r20
    f6fa:	b1 f7       	brne	.-20     	; 0xf6e8 <pick_assign+0x5e>
int front[6]={32,33,34,35,99,99};
    f6fc:	ce 01       	movw	r24, r28
    f6fe:	87 96       	adiw	r24, 0x27	; 39
    f700:	28 e1       	ldi	r18, 0x18	; 24
    f702:	33 e0       	ldi	r19, 0x03	; 3
    f704:	4c e0       	ldi	r20, 0x0C	; 12
    f706:	f9 01       	movw	r30, r18
    f708:	00 80       	ld	r0, Z
    f70a:	2f 5f       	subi	r18, 0xFF	; 255
    f70c:	3f 4f       	sbci	r19, 0xFF	; 255
    f70e:	fc 01       	movw	r30, r24
    f710:	00 82       	st	Z, r0
    f712:	01 96       	adiw	r24, 0x01	; 1
    f714:	41 50       	subi	r20, 0x01	; 1
    f716:	44 23       	and	r20, r20
    f718:	b1 f7       	brne	.-20     	; 0xf706 <pick_assign+0x7c>
int temp_var=0;
    f71a:	1a 82       	std	Y+2, r1	; 0x02
    f71c:	19 82       	std	Y+1, r1	; 0x01
for(temp_var=0;temp_var<6;temp_var++){
    f71e:	1a 82       	std	Y+2, r1	; 0x02
    f720:	19 82       	std	Y+1, r1	; 0x01
    f722:	f9 c0       	rjmp	.+498    	; 0xf916 <pick_assign+0x28c>
    if(left[temp_var]==nxt_node)
    f724:	89 81       	ldd	r24, Y+1	; 0x01
    f726:	9a 81       	ldd	r25, Y+2	; 0x02
    f728:	88 0f       	add	r24, r24
    f72a:	99 1f       	adc	r25, r25
    f72c:	9e 01       	movw	r18, r28
    f72e:	2f 5f       	subi	r18, 0xFF	; 255
    f730:	3f 4f       	sbci	r19, 0xFF	; 255
    f732:	82 0f       	add	r24, r18
    f734:	93 1f       	adc	r25, r19
    f736:	02 96       	adiw	r24, 0x02	; 2
    f738:	fc 01       	movw	r30, r24
    f73a:	20 81       	ld	r18, Z
    f73c:	31 81       	ldd	r19, Z+1	; 0x01
    f73e:	8b a9       	sts	0x4b, r24
    f740:	9c a9       	sts	0x4c, r25
    f742:	28 17       	cp	r18, r24
    f744:	39 07       	cpc	r19, r25
    f746:	99 f4       	brne	.+38     	; 0xf76e <pick_assign+0xe4>
        {
        strcat(master_path,"1");
    f748:	81 e7       	ldi	r24, 0x71	; 113
    f74a:	93 e0       	ldi	r25, 0x03	; 3
    f74c:	9c 01       	movw	r18, r24
    f74e:	f9 01       	movw	r30, r18
    f750:	01 90       	ld	r0, Z+
    f752:	00 20       	and	r0, r0
    f754:	e9 f7       	brne	.-6      	; 0xf750 <pick_assign+0xc6>
    f756:	cf 01       	movw	r24, r30
    f758:	01 97       	sbiw	r24, 0x01	; 1
    f75a:	82 1b       	sub	r24, r18
    f75c:	93 0b       	sbc	r25, r19
    f75e:	8f 58       	subi	r24, 0x8F	; 143
    f760:	9c 4f       	sbci	r25, 0xFC	; 252
    f762:	21 e3       	ldi	r18, 0x31	; 49
    f764:	30 e0       	ldi	r19, 0x00	; 0
    f766:	fc 01       	movw	r30, r24
    f768:	31 83       	std	Z+1, r19	; 0x01
    f76a:	20 83       	st	Z, r18
        return; }
    f76c:	da c0       	rjmp	.+436    	; 0xf922 <pick_assign+0x298>
    else if(right[temp_var]==nxt_node)
    f76e:	89 81       	ldd	r24, Y+1	; 0x01
    f770:	9a 81       	ldd	r25, Y+2	; 0x02
    f772:	88 0f       	add	r24, r24
    f774:	99 1f       	adc	r25, r25
    f776:	9e 01       	movw	r18, r28
    f778:	2f 5f       	subi	r18, 0xFF	; 255
    f77a:	3f 4f       	sbci	r19, 0xFF	; 255
    f77c:	82 0f       	add	r24, r18
    f77e:	93 1f       	adc	r25, r19
    f780:	0e 96       	adiw	r24, 0x0e	; 14
    f782:	fc 01       	movw	r30, r24
    f784:	20 81       	ld	r18, Z
    f786:	31 81       	ldd	r19, Z+1	; 0x01
    f788:	8b a9       	sts	0x4b, r24
    f78a:	9c a9       	sts	0x4c, r25
    f78c:	28 17       	cp	r18, r24
    f78e:	39 07       	cpc	r19, r25
    f790:	99 f4       	brne	.+38     	; 0xf7b8 <pick_assign+0x12e>
              {
        strcat(master_path,"2");
    f792:	81 e7       	ldi	r24, 0x71	; 113
    f794:	93 e0       	ldi	r25, 0x03	; 3
    f796:	9c 01       	movw	r18, r24
    f798:	f9 01       	movw	r30, r18
    f79a:	01 90       	ld	r0, Z+
    f79c:	00 20       	and	r0, r0
    f79e:	e9 f7       	brne	.-6      	; 0xf79a <pick_assign+0x110>
    f7a0:	cf 01       	movw	r24, r30
    f7a2:	01 97       	sbiw	r24, 0x01	; 1
    f7a4:	82 1b       	sub	r24, r18
    f7a6:	93 0b       	sbc	r25, r19
    f7a8:	8f 58       	subi	r24, 0x8F	; 143
    f7aa:	9c 4f       	sbci	r25, 0xFC	; 252
    f7ac:	22 e3       	ldi	r18, 0x32	; 50
    f7ae:	30 e0       	ldi	r19, 0x00	; 0
    f7b0:	fc 01       	movw	r30, r24
    f7b2:	31 83       	std	Z+1, r19	; 0x01
    f7b4:	20 83       	st	Z, r18
        return; }
    f7b6:	b5 c0       	rjmp	.+362    	; 0xf922 <pick_assign+0x298>
    else if(back[temp_var]==nxt_node)
    f7b8:	89 81       	ldd	r24, Y+1	; 0x01
    f7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    f7bc:	88 0f       	add	r24, r24
    f7be:	99 1f       	adc	r25, r25
    f7c0:	9e 01       	movw	r18, r28
    f7c2:	2f 5f       	subi	r18, 0xFF	; 255
    f7c4:	3f 4f       	sbci	r19, 0xFF	; 255
    f7c6:	82 0f       	add	r24, r18
    f7c8:	93 1f       	adc	r25, r19
    f7ca:	4a 96       	adiw	r24, 0x1a	; 26
    f7cc:	fc 01       	movw	r30, r24
    f7ce:	20 81       	ld	r18, Z
    f7d0:	31 81       	ldd	r19, Z+1	; 0x01
    f7d2:	8b a9       	sts	0x4b, r24
    f7d4:	9c a9       	sts	0x4c, r25
    f7d6:	28 17       	cp	r18, r24
    f7d8:	39 07       	cpc	r19, r25
    f7da:	99 f4       	brne	.+38     	; 0xf802 <pick_assign+0x178>
              {
        strcat(master_path,"3");
    f7dc:	81 e7       	ldi	r24, 0x71	; 113
    f7de:	93 e0       	ldi	r25, 0x03	; 3
    f7e0:	9c 01       	movw	r18, r24
    f7e2:	f9 01       	movw	r30, r18
    f7e4:	01 90       	ld	r0, Z+
    f7e6:	00 20       	and	r0, r0
    f7e8:	e9 f7       	brne	.-6      	; 0xf7e4 <pick_assign+0x15a>
    f7ea:	cf 01       	movw	r24, r30
    f7ec:	01 97       	sbiw	r24, 0x01	; 1
    f7ee:	82 1b       	sub	r24, r18
    f7f0:	93 0b       	sbc	r25, r19
    f7f2:	8f 58       	subi	r24, 0x8F	; 143
    f7f4:	9c 4f       	sbci	r25, 0xFC	; 252
    f7f6:	23 e3       	ldi	r18, 0x33	; 51
    f7f8:	30 e0       	ldi	r19, 0x00	; 0
    f7fa:	fc 01       	movw	r30, r24
    f7fc:	31 83       	std	Z+1, r19	; 0x01
    f7fe:	20 83       	st	Z, r18
        return; }
    f800:	90 c0       	rjmp	.+288    	; 0xf922 <pick_assign+0x298>
    else if(nxt_node==1)
    f802:	8b a9       	sts	0x4b, r24
    f804:	9c a9       	sts	0x4c, r25
    f806:	81 30       	cpi	r24, 0x01	; 1
    f808:	91 05       	cpc	r25, r1
    f80a:	99 f4       	brne	.+38     	; 0xf832 <pick_assign+0x1a8>
              {
        strcat(master_path,"4");// first node
    f80c:	81 e7       	ldi	r24, 0x71	; 113
    f80e:	93 e0       	ldi	r25, 0x03	; 3
    f810:	9c 01       	movw	r18, r24
    f812:	f9 01       	movw	r30, r18
    f814:	01 90       	ld	r0, Z+
    f816:	00 20       	and	r0, r0
    f818:	e9 f7       	brne	.-6      	; 0xf814 <pick_assign+0x18a>
    f81a:	cf 01       	movw	r24, r30
    f81c:	01 97       	sbiw	r24, 0x01	; 1
    f81e:	82 1b       	sub	r24, r18
    f820:	93 0b       	sbc	r25, r19
    f822:	8f 58       	subi	r24, 0x8F	; 143
    f824:	9c 4f       	sbci	r25, 0xFC	; 252
    f826:	24 e3       	ldi	r18, 0x34	; 52
    f828:	30 e0       	ldi	r19, 0x00	; 0
    f82a:	fc 01       	movw	r30, r24
    f82c:	31 83       	std	Z+1, r19	; 0x01
    f82e:	20 83       	st	Z, r18
        return; }
    f830:	78 c0       	rjmp	.+240    	; 0xf922 <pick_assign+0x298>
    else if(nxt_node==6)
    f832:	8b a9       	sts	0x4b, r24
    f834:	9c a9       	sts	0x4c, r25
    f836:	86 30       	cpi	r24, 0x06	; 6
    f838:	91 05       	cpc	r25, r1
    f83a:	99 f4       	brne	.+38     	; 0xf862 <pick_assign+0x1d8>
              {
        strcat(master_path,"5");// first row last col
    f83c:	81 e7       	ldi	r24, 0x71	; 113
    f83e:	93 e0       	ldi	r25, 0x03	; 3
    f840:	9c 01       	movw	r18, r24
    f842:	f9 01       	movw	r30, r18
    f844:	01 90       	ld	r0, Z+
    f846:	00 20       	and	r0, r0
    f848:	e9 f7       	brne	.-6      	; 0xf844 <pick_assign+0x1ba>
    f84a:	cf 01       	movw	r24, r30
    f84c:	01 97       	sbiw	r24, 0x01	; 1
    f84e:	82 1b       	sub	r24, r18
    f850:	93 0b       	sbc	r25, r19
    f852:	8f 58       	subi	r24, 0x8F	; 143
    f854:	9c 4f       	sbci	r25, 0xFC	; 252
    f856:	25 e3       	ldi	r18, 0x35	; 53
    f858:	30 e0       	ldi	r19, 0x00	; 0
    f85a:	fc 01       	movw	r30, r24
    f85c:	31 83       	std	Z+1, r19	; 0x01
    f85e:	20 83       	st	Z, r18
        return; }
    f860:	60 c0       	rjmp	.+192    	; 0xf922 <pick_assign+0x298>
    else if(nxt_node==31)//
    f862:	8b a9       	sts	0x4b, r24
    f864:	9c a9       	sts	0x4c, r25
    f866:	8f 31       	cpi	r24, 0x1F	; 31
    f868:	91 05       	cpc	r25, r1
    f86a:	99 f4       	brne	.+38     	; 0xf892 <pick_assign+0x208>
    {
	    strcat(master_path,"6");//last row first col
    f86c:	81 e7       	ldi	r24, 0x71	; 113
    f86e:	93 e0       	ldi	r25, 0x03	; 3
    f870:	9c 01       	movw	r18, r24
    f872:	f9 01       	movw	r30, r18
    f874:	01 90       	ld	r0, Z+
    f876:	00 20       	and	r0, r0
    f878:	e9 f7       	brne	.-6      	; 0xf874 <pick_assign+0x1ea>
    f87a:	cf 01       	movw	r24, r30
    f87c:	01 97       	sbiw	r24, 0x01	; 1
    f87e:	82 1b       	sub	r24, r18
    f880:	93 0b       	sbc	r25, r19
    f882:	8f 58       	subi	r24, 0x8F	; 143
    f884:	9c 4f       	sbci	r25, 0xFC	; 252
    f886:	26 e3       	ldi	r18, 0x36	; 54
    f888:	30 e0       	ldi	r19, 0x00	; 0
    f88a:	fc 01       	movw	r30, r24
    f88c:	31 83       	std	Z+1, r19	; 0x01
    f88e:	20 83       	st	Z, r18
	    return;
    f890:	48 c0       	rjmp	.+144    	; 0xf922 <pick_assign+0x298>
    }
    else if(nxt_node==36)
    f892:	8b a9       	sts	0x4b, r24
    f894:	9c a9       	sts	0x4c, r25
    f896:	84 32       	cpi	r24, 0x24	; 36
    f898:	91 05       	cpc	r25, r1
    f89a:	99 f4       	brne	.+38     	; 0xf8c2 <pick_assign+0x238>
    {
	    strcat(master_path,"7");//last row last col
    f89c:	81 e7       	ldi	r24, 0x71	; 113
    f89e:	93 e0       	ldi	r25, 0x03	; 3
    f8a0:	9c 01       	movw	r18, r24
    f8a2:	f9 01       	movw	r30, r18
    f8a4:	01 90       	ld	r0, Z+
    f8a6:	00 20       	and	r0, r0
    f8a8:	e9 f7       	brne	.-6      	; 0xf8a4 <pick_assign+0x21a>
    f8aa:	cf 01       	movw	r24, r30
    f8ac:	01 97       	sbiw	r24, 0x01	; 1
    f8ae:	82 1b       	sub	r24, r18
    f8b0:	93 0b       	sbc	r25, r19
    f8b2:	8f 58       	subi	r24, 0x8F	; 143
    f8b4:	9c 4f       	sbci	r25, 0xFC	; 252
    f8b6:	27 e3       	ldi	r18, 0x37	; 55
    f8b8:	30 e0       	ldi	r19, 0x00	; 0
    f8ba:	fc 01       	movw	r30, r24
    f8bc:	31 83       	std	Z+1, r19	; 0x01
    f8be:	20 83       	st	Z, r18
	    return;
    f8c0:	30 c0       	rjmp	.+96     	; 0xf922 <pick_assign+0x298>
    }
    else if(front[temp_var]==nxt_node)
    f8c2:	89 81       	ldd	r24, Y+1	; 0x01
    f8c4:	9a 81       	ldd	r25, Y+2	; 0x02
    f8c6:	88 0f       	add	r24, r24
    f8c8:	99 1f       	adc	r25, r25
    f8ca:	9e 01       	movw	r18, r28
    f8cc:	2f 5f       	subi	r18, 0xFF	; 255
    f8ce:	3f 4f       	sbci	r19, 0xFF	; 255
    f8d0:	82 0f       	add	r24, r18
    f8d2:	93 1f       	adc	r25, r19
    f8d4:	86 96       	adiw	r24, 0x26	; 38
    f8d6:	fc 01       	movw	r30, r24
    f8d8:	20 81       	ld	r18, Z
    f8da:	31 81       	ldd	r19, Z+1	; 0x01
    f8dc:	8b a9       	sts	0x4b, r24
    f8de:	9c a9       	sts	0x4c, r25
    f8e0:	28 17       	cp	r18, r24
    f8e2:	39 07       	cpc	r19, r25
    f8e4:	99 f4       	brne	.+38     	; 0xf90c <pick_assign+0x282>
    {
	    strcat(master_path,"8");
    f8e6:	81 e7       	ldi	r24, 0x71	; 113
    f8e8:	93 e0       	ldi	r25, 0x03	; 3
    f8ea:	9c 01       	movw	r18, r24
    f8ec:	f9 01       	movw	r30, r18
    f8ee:	01 90       	ld	r0, Z+
    f8f0:	00 20       	and	r0, r0
    f8f2:	e9 f7       	brne	.-6      	; 0xf8ee <pick_assign+0x264>
    f8f4:	cf 01       	movw	r24, r30
    f8f6:	01 97       	sbiw	r24, 0x01	; 1
    f8f8:	82 1b       	sub	r24, r18
    f8fa:	93 0b       	sbc	r25, r19
    f8fc:	8f 58       	subi	r24, 0x8F	; 143
    f8fe:	9c 4f       	sbci	r25, 0xFC	; 252
    f900:	28 e3       	ldi	r18, 0x38	; 56
    f902:	30 e0       	ldi	r19, 0x00	; 0
    f904:	fc 01       	movw	r30, r24
    f906:	31 83       	std	Z+1, r19	; 0x01
    f908:	20 83       	st	Z, r18
    return; }
    f90a:	0b c0       	rjmp	.+22     	; 0xf922 <pick_assign+0x298>
int left[6]={7,13,19,25,99,99};
int right[6]={12,18,24,30,99,99};
int back[6]={2,3,4,5,99,99};
int front[6]={32,33,34,35,99,99};
int temp_var=0;
for(temp_var=0;temp_var<6;temp_var++){
    f90c:	89 81       	ldd	r24, Y+1	; 0x01
    f90e:	9a 81       	ldd	r25, Y+2	; 0x02
    f910:	01 96       	adiw	r24, 0x01	; 1
    f912:	9a 83       	std	Y+2, r25	; 0x02
    f914:	89 83       	std	Y+1, r24	; 0x01
    f916:	89 81       	ldd	r24, Y+1	; 0x01
    f918:	9a 81       	ldd	r25, Y+2	; 0x02
    f91a:	86 30       	cpi	r24, 0x06	; 6
    f91c:	91 05       	cpc	r25, r1
    f91e:	0c f4       	brge	.+2      	; 0xf922 <pick_assign+0x298>
    f920:	01 cf       	rjmp	.-510    	; 0xf724 <pick_assign+0x9a>
    {
	    strcat(master_path,"8");
    return; }
}

}
    f922:	e4 96       	adiw	r28, 0x34	; 52
    f924:	0f b6       	in	r0, 0x3f	; 63
    f926:	f8 94       	cli
    f928:	de bf       	out	0x3e, r29	; 62
    f92a:	0f be       	out	0x3f, r0	; 63
    f92c:	cd bf       	out	0x3d, r28	; 61
    f92e:	df 91       	pop	r29
    f930:	cf 91       	pop	r28
    f932:	08 95       	ret

0000f934 <main>:
int main()
{
    f934:	0f 93       	push	r16
    f936:	1f 93       	push	r17
    f938:	cf 93       	push	r28
    f93a:	df 93       	push	r29
    f93c:	cd b7       	in	r28, 0x3d	; 61
    f93e:	de b7       	in	r29, 0x3e	; 62
    f940:	c4 56       	subi	r28, 0x64	; 100
    f942:	d0 40       	sbci	r29, 0x00	; 0
    f944:	0f b6       	in	r0, 0x3f	; 63
    f946:	f8 94       	cli
    f948:	de bf       	out	0x3e, r29	; 62
    f94a:	0f be       	out	0x3f, r0	; 63
    f94c:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
    f94e:	0e 94 51 70 	call	0xe0a2	; 0xe0a2 <lcd_port_config>
	init_devices();
    f952:	0e 94 81 72 	call	0xe502	; 0xe502 <init_devices>
	lcd_set_4bit();
    f956:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_set_4bit>
	lcd_init();
    f95a:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_init>
	int lena,lenb,lenp;
	int present_node=0, next_node=0,t_count=0;
    f95e:	1a 82       	std	Y+2, r1	; 0x02
    f960:	19 82       	std	Y+1, r1	; 0x01
    f962:	1c 82       	std	Y+4, r1	; 0x04
    f964:	1b 82       	std	Y+3, r1	; 0x03
    f966:	1a 8a       	std	Y+18, r1	; 0x12
    f968:	19 8a       	std	Y+17, r1	; 0x11
	int switch_pressed = 0, mapped=0,size=0,an_count=0,hab_count=0,var=0,complete=0;
    f96a:	1e 82       	std	Y+6, r1	; 0x06
    f96c:	1d 82       	std	Y+5, r1	; 0x05
    f96e:	18 86       	std	Y+8, r1	; 0x08
    f970:	1f 82       	std	Y+7, r1	; 0x07
    f972:	1c 8a       	std	Y+20, r1	; 0x14
    f974:	1b 8a       	std	Y+19, r1	; 0x13
    f976:	1a 86       	std	Y+10, r1	; 0x0a
    f978:	19 86       	std	Y+9, r1	; 0x09
    f97a:	1c 86       	std	Y+12, r1	; 0x0c
    f97c:	1b 86       	std	Y+11, r1	; 0x0b
    f97e:	1e 86       	std	Y+14, r1	; 0x0e
    f980:	1d 86       	std	Y+13, r1	; 0x0d
    f982:	18 8a       	std	Y+16, r1	; 0x10
    f984:	1f 86       	std	Y+15, r1	; 0x0f
	char *p;
	char animal[]="F2, A4, F6, F3";
    f986:	ce 01       	movw	r24, r28
    f988:	89 5b       	subi	r24, 0xB9	; 185
    f98a:	9f 4f       	sbci	r25, 0xFF	; 255
    f98c:	24 e2       	ldi	r18, 0x24	; 36
    f98e:	33 e0       	ldi	r19, 0x03	; 3
    f990:	4f e0       	ldi	r20, 0x0F	; 15
    f992:	f9 01       	movw	r30, r18
    f994:	00 80       	ld	r0, Z
    f996:	2f 5f       	subi	r18, 0xFF	; 255
    f998:	3f 4f       	sbci	r19, 0xFF	; 255
    f99a:	fc 01       	movw	r30, r24
    f99c:	00 82       	st	Z, r0
    f99e:	01 96       	adiw	r24, 0x01	; 1
    f9a0:	41 50       	subi	r20, 0x01	; 1
    f9a2:	44 23       	and	r20, r20
    f9a4:	b1 f7       	brne	.-20     	; 0xf992 <main+0x5e>
	char habit[]="15, 23, 20, 17";
    f9a6:	ce 01       	movw	r24, r28
    f9a8:	8a 5a       	subi	r24, 0xAA	; 170
    f9aa:	9f 4f       	sbci	r25, 0xFF	; 255
    f9ac:	23 e3       	ldi	r18, 0x33	; 51
    f9ae:	33 e0       	ldi	r19, 0x03	; 3
    f9b0:	4f e0       	ldi	r20, 0x0F	; 15
    f9b2:	f9 01       	movw	r30, r18
    f9b4:	00 80       	ld	r0, Z
    f9b6:	2f 5f       	subi	r18, 0xFF	; 255
    f9b8:	3f 4f       	sbci	r19, 0xFF	; 255
    f9ba:	fc 01       	movw	r30, r24
    f9bc:	00 82       	st	Z, r0
    f9be:	01 96       	adiw	r24, 0x01	; 1
    f9c0:	41 50       	subi	r20, 0x01	; 1
    f9c2:	44 23       	and	r20, r20
    f9c4:	b1 f7       	brne	.-20     	; 0xf9b2 <main+0x7e>
	path_fin=0;
    f9c6:	10 92 3a 04 	sts	0x043A, r1
    f9ca:	10 92 39 04 	sts	0x0439, r1
	halt=0;
    f9ce:	10 92 70 03 	sts	0x0370, r1
    f9d2:	10 92 6f 03 	sts	0x036F, r1
	defaulty();
    f9d6:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <defaulty>
	while(!complete)
    f9da:	b1 c1       	rjmp	.+866    	; 0xfd3e <main+0x40a>
	{	
		if((PINE & 0x80) == 0x80) //when BOOT switch is not pressed
    f9dc:	8c e2       	ldi	r24, 0x2C	; 44
    f9de:	90 e0       	ldi	r25, 0x00	; 0
    f9e0:	fc 01       	movw	r30, r24
    f9e2:	80 81       	ld	r24, Z
    f9e4:	88 23       	and	r24, r24
    f9e6:	0c f0       	brlt	.+2      	; 0xf9ea <main+0xb6>
    f9e8:	96 c1       	rjmp	.+812    	; 0xfd16 <main+0x3e2>
		{	
			if(switch_pressed==1)//after press
    f9ea:	8d 81       	ldd	r24, Y+5	; 0x05
    f9ec:	9e 81       	ldd	r25, Y+6	; 0x06
    f9ee:	81 30       	cpi	r24, 0x01	; 1
    f9f0:	91 05       	cpc	r25, r1
    f9f2:	09 f0       	breq	.+2      	; 0xf9f6 <main+0xc2>
    f9f4:	a4 c1       	rjmp	.+840    	; 0xfd3e <main+0x40a>
			{
				if(!mapped)
    f9f6:	8f 81       	ldd	r24, Y+7	; 0x07
    f9f8:	98 85       	ldd	r25, Y+8	; 0x08
    f9fa:	00 97       	sbiw	r24, 0x00	; 0
    f9fc:	09 f0       	breq	.+2      	; 0xfa00 <main+0xcc>
    f9fe:	ea c0       	rjmp	.+468    	; 0xfbd4 <main+0x2a0>
				{	mapped=1;
    fa00:	81 e0       	ldi	r24, 0x01	; 1
    fa02:	90 e0       	ldi	r25, 0x00	; 0
    fa04:	98 87       	std	Y+8, r25	; 0x08
    fa06:	8f 83       	std	Y+7, r24	; 0x07
					node=0;
    fa08:	10 92 6e 03 	sts	0x036E, r1
    fa0c:	10 92 6d 03 	sts	0x036D, r1
					node_map(animal,0,&lena);
    fa10:	ce 01       	movw	r24, r28
    fa12:	89 5b       	subi	r24, 0xB9	; 185
    fa14:	9f 4f       	sbci	r25, 0xFF	; 255
    fa16:	9e 01       	movw	r18, r28
    fa18:	2f 5b       	subi	r18, 0xBF	; 191
    fa1a:	3f 4f       	sbci	r19, 0xFF	; 255
    fa1c:	60 e0       	ldi	r22, 0x00	; 0
    fa1e:	70 e0       	ldi	r23, 0x00	; 0
    fa20:	a9 01       	movw	r20, r18
    fa22:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <node_map>
					node_map(habit,1,&lenb);
    fa26:	ce 01       	movw	r24, r28
    fa28:	8a 5a       	subi	r24, 0xAA	; 170
    fa2a:	9f 4f       	sbci	r25, 0xFF	; 255
    fa2c:	9e 01       	movw	r18, r28
    fa2e:	2d 5b       	subi	r18, 0xBD	; 189
    fa30:	3f 4f       	sbci	r19, 0xFF	; 255
    fa32:	61 e0       	ldi	r22, 0x01	; 1
    fa34:	70 e0       	ldi	r23, 0x00	; 0
    fa36:	a9 01       	movw	r20, r18
    fa38:	0e 94 e4 79 	call	0xf3c8	; 0xf3c8 <node_map>
					size=lena;
    fa3c:	ce 01       	movw	r24, r28
    fa3e:	8f 5b       	subi	r24, 0xBF	; 191
    fa40:	9f 4f       	sbci	r25, 0xFF	; 255
    fa42:	fc 01       	movw	r30, r24
    fa44:	80 81       	ld	r24, Z
    fa46:	91 81       	ldd	r25, Z+1	; 0x01
    fa48:	9c 8b       	std	Y+20, r25	; 0x14
    fa4a:	8b 8b       	std	Y+19, r24	; 0x13
					size=size*2-1;
    fa4c:	8b 89       	ldd	r24, Y+19	; 0x13
    fa4e:	9c 89       	ldd	r25, Y+20	; 0x14
    fa50:	88 0f       	add	r24, r24
    fa52:	99 1f       	adc	r25, r25
    fa54:	01 97       	sbiw	r24, 0x01	; 1
    fa56:	9c 8b       	std	Y+20, r25	; 0x14
    fa58:	8b 8b       	std	Y+19, r24	; 0x13
					    p= dijkstra(1,aniloc[0],&lenp);
    fa5a:	40 91 ce 04 	lds	r20, 0x04CE
    fa5e:	50 91 cf 04 	lds	r21, 0x04CF
    fa62:	9e 01       	movw	r18, r28
    fa64:	2b 5b       	subi	r18, 0xBB	; 187
    fa66:	3f 4f       	sbci	r19, 0xFF	; 255
    fa68:	81 e0       	ldi	r24, 0x01	; 1
    fa6a:	90 e0       	ldi	r25, 0x00	; 0
    fa6c:	ba 01       	movw	r22, r20
    fa6e:	a9 01       	movw	r20, r18
    fa70:	0e 94 8e 78 	call	0xf11c	; 0xf11c <dijkstra>
    fa74:	9e 8b       	std	Y+22, r25	; 0x16
    fa76:	8d 8b       	std	Y+21, r24	; 0x15
					    strcat(master_path,p);
    fa78:	81 e7       	ldi	r24, 0x71	; 113
    fa7a:	93 e0       	ldi	r25, 0x03	; 3
    fa7c:	2d 89       	ldd	r18, Y+21	; 0x15
    fa7e:	3e 89       	ldd	r19, Y+22	; 0x16
    fa80:	b9 01       	movw	r22, r18
    fa82:	0e 94 19 84 	call	0x10832	; 0x10832 <strcat>
					    pick_assign(aniloc[0]);
    fa86:	80 91 ce 04 	lds	r24, 0x04CE
    fa8a:	90 91 cf 04 	lds	r25, 0x04CF
    fa8e:	0e 94 45 7b 	call	0xf68a	; 0xf68a <pick_assign>
					    free(p);
    fa92:	8d 89       	ldd	r24, Y+21	; 0x15
    fa94:	9e 89       	ldd	r25, Y+22	; 0x16
    fa96:	0e 94 92 82 	call	0x10524	; 0x10524 <free>
					    for(var=0;var<size;var++)
    fa9a:	1e 86       	std	Y+14, r1	; 0x0e
    fa9c:	1d 86       	std	Y+13, r1	; 0x0d
    fa9e:	78 c0       	rjmp	.+240    	; 0xfb90 <main+0x25c>
					    {
						    if(var%2==0)
    faa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    faa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    faa4:	81 70       	andi	r24, 0x01	; 1
    faa6:	90 70       	andi	r25, 0x00	; 0
    faa8:	00 97       	sbiw	r24, 0x00	; 0
    faaa:	09 f5       	brne	.+66     	; 0xfaee <main+0x1ba>
						    {
							    present_node=aniloc[an_count];
    faac:	89 85       	ldd	r24, Y+9	; 0x09
    faae:	9a 85       	ldd	r25, Y+10	; 0x0a
    fab0:	88 0f       	add	r24, r24
    fab2:	99 1f       	adc	r25, r25
    fab4:	82 53       	subi	r24, 0x32	; 50
    fab6:	9b 4f       	sbci	r25, 0xFB	; 251
    fab8:	fc 01       	movw	r30, r24
    faba:	80 81       	ld	r24, Z
    fabc:	91 81       	ldd	r25, Z+1	; 0x01
    fabe:	9a 83       	std	Y+2, r25	; 0x02
    fac0:	89 83       	std	Y+1, r24	; 0x01
							    next_node=habloc[hab_count];
    fac2:	8b 85       	ldd	r24, Y+11	; 0x0b
    fac4:	9c 85       	ldd	r25, Y+12	; 0x0c
    fac6:	88 0f       	add	r24, r24
    fac8:	99 1f       	adc	r25, r25
    faca:	8d 59       	subi	r24, 0x9D	; 157
    facc:	9b 4f       	sbci	r25, 0xFB	; 251
    face:	fc 01       	movw	r30, r24
    fad0:	80 81       	ld	r24, Z
    fad2:	91 81       	ldd	r25, Z+1	; 0x01
    fad4:	9c 83       	std	Y+4, r25	; 0x04
    fad6:	8b 83       	std	Y+3, r24	; 0x03
							    an_count++;
    fad8:	89 85       	ldd	r24, Y+9	; 0x09
    fada:	9a 85       	ldd	r25, Y+10	; 0x0a
    fadc:	01 96       	adiw	r24, 0x01	; 1
    fade:	9a 87       	std	Y+10, r25	; 0x0a
    fae0:	89 87       	std	Y+9, r24	; 0x09
							    hab_count++;
    fae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    fae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    fae6:	01 96       	adiw	r24, 0x01	; 1
    fae8:	9c 87       	std	Y+12, r25	; 0x0c
    faea:	8b 87       	std	Y+11, r24	; 0x0b
    faec:	17 c0       	rjmp	.+46     	; 0xfb1c <main+0x1e8>
						    }
						    else
						    {
							    present_node=habloc[hab_count-1];
    faee:	8b 85       	ldd	r24, Y+11	; 0x0b
    faf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    faf2:	01 97       	sbiw	r24, 0x01	; 1
    faf4:	88 0f       	add	r24, r24
    faf6:	99 1f       	adc	r25, r25
    faf8:	8d 59       	subi	r24, 0x9D	; 157
    fafa:	9b 4f       	sbci	r25, 0xFB	; 251
    fafc:	fc 01       	movw	r30, r24
    fafe:	80 81       	ld	r24, Z
    fb00:	91 81       	ldd	r25, Z+1	; 0x01
    fb02:	9a 83       	std	Y+2, r25	; 0x02
    fb04:	89 83       	std	Y+1, r24	; 0x01
							    next_node=aniloc[an_count];
    fb06:	89 85       	ldd	r24, Y+9	; 0x09
    fb08:	9a 85       	ldd	r25, Y+10	; 0x0a
    fb0a:	88 0f       	add	r24, r24
    fb0c:	99 1f       	adc	r25, r25
    fb0e:	82 53       	subi	r24, 0x32	; 50
    fb10:	9b 4f       	sbci	r25, 0xFB	; 251
    fb12:	fc 01       	movw	r30, r24
    fb14:	80 81       	ld	r24, Z
    fb16:	91 81       	ldd	r25, Z+1	; 0x01
    fb18:	9c 83       	std	Y+4, r25	; 0x04
    fb1a:	8b 83       	std	Y+3, r24	; 0x03
						    }
						    p=dijkstra(present_node,next_node,&lenp);
    fb1c:	89 81       	ldd	r24, Y+1	; 0x01
    fb1e:	9a 81       	ldd	r25, Y+2	; 0x02
    fb20:	4b 81       	ldd	r20, Y+3	; 0x03
    fb22:	5c 81       	ldd	r21, Y+4	; 0x04
    fb24:	9e 01       	movw	r18, r28
    fb26:	2b 5b       	subi	r18, 0xBB	; 187
    fb28:	3f 4f       	sbci	r19, 0xFF	; 255
    fb2a:	ba 01       	movw	r22, r20
    fb2c:	a9 01       	movw	r20, r18
    fb2e:	0e 94 8e 78 	call	0xf11c	; 0xf11c <dijkstra>
    fb32:	9e 8b       	std	Y+22, r25	; 0x16
    fb34:	8d 8b       	std	Y+21, r24	; 0x15
						    strcat(master_path,p);
    fb36:	81 e7       	ldi	r24, 0x71	; 113
    fb38:	93 e0       	ldi	r25, 0x03	; 3
    fb3a:	2d 89       	ldd	r18, Y+21	; 0x15
    fb3c:	3e 89       	ldd	r19, Y+22	; 0x16
    fb3e:	b9 01       	movw	r22, r18
    fb40:	0e 94 19 84 	call	0x10832	; 0x10832 <strcat>
						    free(p);
    fb44:	8d 89       	ldd	r24, Y+21	; 0x15
    fb46:	9e 89       	ldd	r25, Y+22	; 0x16
    fb48:	0e 94 92 82 	call	0x10524	; 0x10524 <free>
						    if(var%2==0)
    fb4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    fb4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    fb50:	81 70       	andi	r24, 0x01	; 1
    fb52:	90 70       	andi	r25, 0x00	; 0
    fb54:	00 97       	sbiw	r24, 0x00	; 0
    fb56:	99 f4       	brne	.+38     	; 0xfb7e <main+0x24a>
						    strcat(master_path,"D");
    fb58:	81 e7       	ldi	r24, 0x71	; 113
    fb5a:	93 e0       	ldi	r25, 0x03	; 3
    fb5c:	9c 01       	movw	r18, r24
    fb5e:	f9 01       	movw	r30, r18
    fb60:	01 90       	ld	r0, Z+
    fb62:	00 20       	and	r0, r0
    fb64:	e9 f7       	brne	.-6      	; 0xfb60 <main+0x22c>
    fb66:	cf 01       	movw	r24, r30
    fb68:	01 97       	sbiw	r24, 0x01	; 1
    fb6a:	82 1b       	sub	r24, r18
    fb6c:	93 0b       	sbc	r25, r19
    fb6e:	8f 58       	subi	r24, 0x8F	; 143
    fb70:	9c 4f       	sbci	r25, 0xFC	; 252
    fb72:	24 e4       	ldi	r18, 0x44	; 68
    fb74:	30 e0       	ldi	r19, 0x00	; 0
    fb76:	fc 01       	movw	r30, r24
    fb78:	31 83       	std	Z+1, r19	; 0x01
    fb7a:	20 83       	st	Z, r18
    fb7c:	04 c0       	rjmp	.+8      	; 0xfb86 <main+0x252>
						    else{
							    pick_assign(next_node);
    fb7e:	8b 81       	ldd	r24, Y+3	; 0x03
    fb80:	9c 81       	ldd	r25, Y+4	; 0x04
    fb82:	0e 94 45 7b 	call	0xf68a	; 0xf68a <pick_assign>
					size=size*2-1;
					    p= dijkstra(1,aniloc[0],&lenp);
					    strcat(master_path,p);
					    pick_assign(aniloc[0]);
					    free(p);
					    for(var=0;var<size;var++)
    fb86:	8d 85       	ldd	r24, Y+13	; 0x0d
    fb88:	9e 85       	ldd	r25, Y+14	; 0x0e
    fb8a:	01 96       	adiw	r24, 0x01	; 1
    fb8c:	9e 87       	std	Y+14, r25	; 0x0e
    fb8e:	8d 87       	std	Y+13, r24	; 0x0d
    fb90:	2d 85       	ldd	r18, Y+13	; 0x0d
    fb92:	3e 85       	ldd	r19, Y+14	; 0x0e
    fb94:	8b 89       	ldd	r24, Y+19	; 0x13
    fb96:	9c 89       	ldd	r25, Y+20	; 0x14
    fb98:	28 17       	cp	r18, r24
    fb9a:	39 07       	cpc	r19, r25
    fb9c:	0c f4       	brge	.+2      	; 0xfba0 <main+0x26c>
    fb9e:	80 cf       	rjmp	.-256    	; 0xfaa0 <main+0x16c>
						    else{
							    pick_assign(next_node);
						    }

					    }
					    strcat(master_path,"o");
    fba0:	81 e7       	ldi	r24, 0x71	; 113
    fba2:	93 e0       	ldi	r25, 0x03	; 3
    fba4:	9c 01       	movw	r18, r24
    fba6:	f9 01       	movw	r30, r18
    fba8:	01 90       	ld	r0, Z+
    fbaa:	00 20       	and	r0, r0
    fbac:	e9 f7       	brne	.-6      	; 0xfba8 <main+0x274>
    fbae:	cf 01       	movw	r24, r30
    fbb0:	01 97       	sbiw	r24, 0x01	; 1
    fbb2:	82 1b       	sub	r24, r18
    fbb4:	93 0b       	sbc	r25, r19
    fbb6:	8f 58       	subi	r24, 0x8F	; 143
    fbb8:	9c 4f       	sbci	r25, 0xFC	; 252
    fbba:	2f e6       	ldi	r18, 0x6F	; 111
    fbbc:	30 e0       	ldi	r19, 0x00	; 0
    fbbe:	fc 01       	movw	r30, r24
    fbc0:	31 83       	std	Z+1, r19	; 0x01
    fbc2:	20 83       	st	Z, r18
					
				lcd_cursor(1,1);
    fbc4:	81 e0       	ldi	r24, 0x01	; 1
    fbc6:	61 e0       	ldi	r22, 0x01	; 1
    fbc8:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
				lcd_wr_char(master_path[18]);
    fbcc:	80 91 83 03 	lds	r24, 0x0383
    fbd0:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>
				}//end of mapping
				travel_path(master_path[0]);
    fbd4:	80 91 71 03 	lds	r24, 0x0371
    fbd8:	0e 94 9b 62 	call	0xc536	; 0xc536 <travel_path>
				TIMSK3=1;
    fbdc:	81 e7       	ldi	r24, 0x71	; 113
    fbde:	90 e0       	ldi	r25, 0x00	; 0
    fbe0:	21 e0       	ldi	r18, 0x01	; 1
    fbe2:	fc 01       	movw	r30, r24
    fbe4:	20 83       	st	Z, r18
				while(!path_fin){
    fbe6:	89 c0       	rjmp	.+274    	; 0xfcfa <main+0x3c6>
					if(!halt){
    fbe8:	80 91 6f 03 	lds	r24, 0x036F
    fbec:	90 91 70 03 	lds	r25, 0x0370
    fbf0:	00 97       	sbiw	r24, 0x00	; 0
    fbf2:	09 f0       	breq	.+2      	; 0xfbf6 <main+0x2c2>
    fbf4:	82 c0       	rjmp	.+260    	; 0xfcfa <main+0x3c6>
						line_follow();
    fbf6:	0e 94 96 33 	call	0x672c	; 0x672c <line_follow>
    fbfa:	80 e0       	ldi	r24, 0x00	; 0
    fbfc:	90 e0       	ldi	r25, 0x00	; 0
    fbfe:	a8 e4       	ldi	r26, 0x48	; 72
    fc00:	b2 e4       	ldi	r27, 0x42	; 66
    fc02:	8f 8b       	std	Y+23, r24	; 0x17
    fc04:	98 8f       	std	Y+24, r25	; 0x18
    fc06:	a9 8f       	std	Y+25, r26	; 0x19
    fc08:	ba 8f       	std	Y+26, r27	; 0x1a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fc0a:	6f 89       	ldd	r22, Y+23	; 0x17
    fc0c:	78 8d       	ldd	r23, Y+24	; 0x18
    fc0e:	89 8d       	ldd	r24, Y+25	; 0x19
    fc10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    fc12:	26 e6       	ldi	r18, 0x66	; 102
    fc14:	36 e6       	ldi	r19, 0x66	; 102
    fc16:	46 e6       	ldi	r20, 0x66	; 102
    fc18:	55 e4       	ldi	r21, 0x45	; 69
    fc1a:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    fc1e:	dc 01       	movw	r26, r24
    fc20:	cb 01       	movw	r24, r22
    fc22:	8b 8f       	std	Y+27, r24	; 0x1b
    fc24:	9c 8f       	std	Y+28, r25	; 0x1c
    fc26:	ad 8f       	std	Y+29, r26	; 0x1d
    fc28:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    fc2a:	11 e0       	ldi	r17, 0x01	; 1
    fc2c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    fc2e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    fc30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    fc32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    fc34:	20 e0       	ldi	r18, 0x00	; 0
    fc36:	30 e0       	ldi	r19, 0x00	; 0
    fc38:	40 e8       	ldi	r20, 0x80	; 128
    fc3a:	5f e3       	ldi	r21, 0x3F	; 63
    fc3c:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    fc40:	88 23       	and	r24, r24
    fc42:	0c f0       	brlt	.+2      	; 0xfc46 <main+0x312>
    fc44:	10 e0       	ldi	r17, 0x00	; 0
    fc46:	11 23       	and	r17, r17
    fc48:	29 f0       	breq	.+10     	; 0xfc54 <main+0x320>
		__ticks = 1;
    fc4a:	81 e0       	ldi	r24, 0x01	; 1
    fc4c:	90 e0       	ldi	r25, 0x00	; 0
    fc4e:	98 a3       	lds	r25, 0x58
    fc50:	8f 8f       	std	Y+31, r24	; 0x1f
    fc52:	46 c0       	rjmp	.+140    	; 0xfce0 <main+0x3ac>
	else if (__tmp > 65535)
    fc54:	11 e0       	ldi	r17, 0x01	; 1
    fc56:	6b 8d       	ldd	r22, Y+27	; 0x1b
    fc58:	7c 8d       	ldd	r23, Y+28	; 0x1c
    fc5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    fc5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    fc5e:	20 e0       	ldi	r18, 0x00	; 0
    fc60:	3f ef       	ldi	r19, 0xFF	; 255
    fc62:	4f e7       	ldi	r20, 0x7F	; 127
    fc64:	57 e4       	ldi	r21, 0x47	; 71
    fc66:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    fc6a:	18 16       	cp	r1, r24
    fc6c:	0c f0       	brlt	.+2      	; 0xfc70 <main+0x33c>
    fc6e:	10 e0       	ldi	r17, 0x00	; 0
    fc70:	11 23       	and	r17, r17
    fc72:	61 f1       	breq	.+88     	; 0xfccc <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fc74:	6f 89       	ldd	r22, Y+23	; 0x17
    fc76:	78 8d       	ldd	r23, Y+24	; 0x18
    fc78:	89 8d       	ldd	r24, Y+25	; 0x19
    fc7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    fc7c:	20 e0       	ldi	r18, 0x00	; 0
    fc7e:	30 e0       	ldi	r19, 0x00	; 0
    fc80:	40 e2       	ldi	r20, 0x20	; 32
    fc82:	51 e4       	ldi	r21, 0x41	; 65
    fc84:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    fc88:	dc 01       	movw	r26, r24
    fc8a:	cb 01       	movw	r24, r22
    fc8c:	bc 01       	movw	r22, r24
    fc8e:	cd 01       	movw	r24, r26
    fc90:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    fc94:	dc 01       	movw	r26, r24
    fc96:	cb 01       	movw	r24, r22
    fc98:	98 a3       	lds	r25, 0x58
    fc9a:	8f 8f       	std	Y+31, r24	; 0x1f
    fc9c:	12 c0       	rjmp	.+36     	; 0xfcc2 <main+0x38e>
    fc9e:	80 e7       	ldi	r24, 0x70	; 112
    fca0:	91 e0       	ldi	r25, 0x01	; 1
    fca2:	9a a3       	lds	r25, 0x5a
    fca4:	89 a3       	lds	r24, 0x59
    fca6:	89 a1       	lds	r24, 0x49
    fca8:	9a a1       	lds	r25, 0x4a
    fcaa:	8c 01       	movw	r16, r24
    fcac:	c8 01       	movw	r24, r16
    fcae:	01 97       	sbiw	r24, 0x01	; 1
    fcb0:	f1 f7       	brne	.-4      	; 0xfcae <main+0x37a>
    fcb2:	8c 01       	movw	r16, r24
    fcb4:	1a a3       	lds	r17, 0x5a
    fcb6:	09 a3       	lds	r16, 0x59
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fcb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fcba:	98 a1       	lds	r25, 0x48
    fcbc:	01 97       	sbiw	r24, 0x01	; 1
    fcbe:	98 a3       	lds	r25, 0x58
    fcc0:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fcc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fcc4:	98 a1       	lds	r25, 0x48
    fcc6:	00 97       	sbiw	r24, 0x00	; 0
    fcc8:	51 f7       	brne	.-44     	; 0xfc9e <main+0x36a>
    fcca:	17 c0       	rjmp	.+46     	; 0xfcfa <main+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fccc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    fcce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    fcd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    fcd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    fcd4:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    fcd8:	dc 01       	movw	r26, r24
    fcda:	cb 01       	movw	r24, r22
    fcdc:	98 a3       	lds	r25, 0x58
    fcde:	8f 8f       	std	Y+31, r24	; 0x1f
    fce0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fce2:	98 a1       	lds	r25, 0x48
    fce4:	9c a3       	lds	r25, 0x5c
    fce6:	8b a3       	lds	r24, 0x5b
    fce8:	8b a1       	lds	r24, 0x4b
    fcea:	9c a1       	lds	r25, 0x4c
    fcec:	8c 01       	movw	r16, r24
    fcee:	f8 01       	movw	r30, r16
    fcf0:	31 97       	sbiw	r30, 0x01	; 1
    fcf2:	f1 f7       	brne	.-4      	; 0xfcf0 <main+0x3bc>
    fcf4:	8f 01       	movw	r16, r30
    fcf6:	1c a3       	lds	r17, 0x5c
    fcf8:	0b a3       	lds	r16, 0x5b
				lcd_cursor(1,1);
				lcd_wr_char(master_path[18]);
				}//end of mapping
				travel_path(master_path[0]);
				TIMSK3=1;
				while(!path_fin){
    fcfa:	80 91 39 04 	lds	r24, 0x0439
    fcfe:	90 91 3a 04 	lds	r25, 0x043A
    fd02:	00 97       	sbiw	r24, 0x00	; 0
    fd04:	09 f4       	brne	.+2      	; 0xfd08 <main+0x3d4>
    fd06:	70 cf       	rjmp	.-288    	; 0xfbe8 <main+0x2b4>
						line_follow();
					_delay_ms(50);}
					//display_line();
					//_delay_ms(20);
				}
			stop();
    fd08:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			complete=1;
    fd0c:	81 e0       	ldi	r24, 0x01	; 1
    fd0e:	90 e0       	ldi	r25, 0x00	; 0
    fd10:	98 8b       	std	Y+16, r25	; 0x10
    fd12:	8f 87       	std	Y+15, r24	; 0x0f
    fd14:	14 c0       	rjmp	.+40     	; 0xfd3e <main+0x40a>
			}
		}							  	
		else//BOOT switch is pressed
		{
			lcd_cursor(1,1);
    fd16:	81 e0       	ldi	r24, 0x01	; 1
    fd18:	61 e0       	ldi	r22, 0x01	; 1
    fd1a:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(ani);
    fd1e:	88 e4       	ldi	r24, 0x48	; 72
    fd20:	94 e0       	ldi	r25, 0x04	; 4
    fd22:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			lcd_cursor(2,1);
    fd26:	82 e0       	ldi	r24, 0x02	; 2
    fd28:	61 e0       	ldi	r22, 0x01	; 1
    fd2a:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(hab);
    fd2e:	8f e8       	ldi	r24, 0x8F	; 143
    fd30:	94 e0       	ldi	r25, 0x04	; 4
    fd32:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			switch_pressed=1;
    fd36:	81 e0       	ldi	r24, 0x01	; 1
    fd38:	90 e0       	ldi	r25, 0x00	; 0
    fd3a:	9e 83       	std	Y+6, r25	; 0x06
    fd3c:	8d 83       	std	Y+5, r24	; 0x05
	char animal[]="F2, A4, F6, F3";
	char habit[]="15, 23, 20, 17";
	path_fin=0;
	halt=0;
	defaulty();
	while(!complete)
    fd3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    fd40:	98 89       	ldd	r25, Y+16	; 0x10
    fd42:	00 97       	sbiw	r24, 0x00	; 0
    fd44:	09 f4       	brne	.+2      	; 0xfd48 <main+0x414>
    fd46:	4a ce       	rjmp	.-876    	; 0xf9dc <main+0xa8>
			lcd_cursor(2,1);
			lcd_string(hab);
			switch_pressed=1;
		}
	}
	buzzer_on();
    fd48:	0e 94 83 70 	call	0xe106	; 0xe106 <buzzer_on>
    fd4c:	80 e0       	ldi	r24, 0x00	; 0
    fd4e:	90 e0       	ldi	r25, 0x00	; 0
    fd50:	aa ef       	ldi	r26, 0xFA	; 250
    fd52:	b4 e4       	ldi	r27, 0x44	; 68
    fd54:	8d a3       	lds	r24, 0x5d
    fd56:	9e a3       	lds	r25, 0x5e
    fd58:	af a3       	lds	r26, 0x5f
    fd5a:	b8 a7       	lds	r27, 0x78
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fd5c:	6d a1       	lds	r22, 0x4d
    fd5e:	7e a1       	lds	r23, 0x4e
    fd60:	8f a1       	lds	r24, 0x4f
    fd62:	98 a5       	lds	r25, 0x68
    fd64:	26 e6       	ldi	r18, 0x66	; 102
    fd66:	36 e6       	ldi	r19, 0x66	; 102
    fd68:	46 e6       	ldi	r20, 0x66	; 102
    fd6a:	55 e4       	ldi	r21, 0x45	; 69
    fd6c:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    fd70:	dc 01       	movw	r26, r24
    fd72:	cb 01       	movw	r24, r22
    fd74:	89 a7       	lds	r24, 0x79
    fd76:	9a a7       	lds	r25, 0x7a
    fd78:	ab a7       	lds	r26, 0x7b
    fd7a:	bc a7       	lds	r27, 0x7c
	if (__tmp < 1.0)
    fd7c:	11 e0       	ldi	r17, 0x01	; 1
    fd7e:	69 a5       	lds	r22, 0x69
    fd80:	7a a5       	lds	r23, 0x6a
    fd82:	8b a5       	lds	r24, 0x6b
    fd84:	9c a5       	lds	r25, 0x6c
    fd86:	20 e0       	ldi	r18, 0x00	; 0
    fd88:	30 e0       	ldi	r19, 0x00	; 0
    fd8a:	40 e8       	ldi	r20, 0x80	; 128
    fd8c:	5f e3       	ldi	r21, 0x3F	; 63
    fd8e:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    fd92:	88 23       	and	r24, r24
    fd94:	0c f0       	brlt	.+2      	; 0xfd98 <main+0x464>
    fd96:	10 e0       	ldi	r17, 0x00	; 0
    fd98:	11 23       	and	r17, r17
    fd9a:	29 f0       	breq	.+10     	; 0xfda6 <main+0x472>
		__ticks = 1;
    fd9c:	81 e0       	ldi	r24, 0x01	; 1
    fd9e:	90 e0       	ldi	r25, 0x00	; 0
    fda0:	9e a7       	lds	r25, 0x7e
    fda2:	8d a7       	lds	r24, 0x7d
    fda4:	46 c0       	rjmp	.+140    	; 0xfe32 <main+0x4fe>
	else if (__tmp > 65535)
    fda6:	11 e0       	ldi	r17, 0x01	; 1
    fda8:	69 a5       	lds	r22, 0x69
    fdaa:	7a a5       	lds	r23, 0x6a
    fdac:	8b a5       	lds	r24, 0x6b
    fdae:	9c a5       	lds	r25, 0x6c
    fdb0:	20 e0       	ldi	r18, 0x00	; 0
    fdb2:	3f ef       	ldi	r19, 0xFF	; 255
    fdb4:	4f e7       	ldi	r20, 0x7F	; 127
    fdb6:	57 e4       	ldi	r21, 0x47	; 71
    fdb8:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    fdbc:	18 16       	cp	r1, r24
    fdbe:	0c f0       	brlt	.+2      	; 0xfdc2 <main+0x48e>
    fdc0:	10 e0       	ldi	r17, 0x00	; 0
    fdc2:	11 23       	and	r17, r17
    fdc4:	61 f1       	breq	.+88     	; 0xfe1e <main+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fdc6:	6d a1       	lds	r22, 0x4d
    fdc8:	7e a1       	lds	r23, 0x4e
    fdca:	8f a1       	lds	r24, 0x4f
    fdcc:	98 a5       	lds	r25, 0x68
    fdce:	20 e0       	ldi	r18, 0x00	; 0
    fdd0:	30 e0       	ldi	r19, 0x00	; 0
    fdd2:	40 e2       	ldi	r20, 0x20	; 32
    fdd4:	51 e4       	ldi	r21, 0x41	; 65
    fdd6:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    fdda:	dc 01       	movw	r26, r24
    fddc:	cb 01       	movw	r24, r22
    fdde:	bc 01       	movw	r22, r24
    fde0:	cd 01       	movw	r24, r26
    fde2:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    fde6:	dc 01       	movw	r26, r24
    fde8:	cb 01       	movw	r24, r22
    fdea:	9e a7       	lds	r25, 0x7e
    fdec:	8d a7       	lds	r24, 0x7d
    fdee:	12 c0       	rjmp	.+36     	; 0xfe14 <main+0x4e0>
    fdf0:	80 e7       	ldi	r24, 0x70	; 112
    fdf2:	91 e0       	ldi	r25, 0x01	; 1
    fdf4:	98 ab       	sts	0x58, r25
    fdf6:	8f a7       	lds	r24, 0x7f
    fdf8:	8f a5       	lds	r24, 0x6f
    fdfa:	98 a9       	sts	0x48, r25
    fdfc:	8c 01       	movw	r16, r24
    fdfe:	c8 01       	movw	r24, r16
    fe00:	01 97       	sbiw	r24, 0x01	; 1
    fe02:	f1 f7       	brne	.-4      	; 0xfe00 <main+0x4cc>
    fe04:	8c 01       	movw	r16, r24
    fe06:	18 ab       	sts	0x58, r17
    fe08:	0f a7       	lds	r16, 0x7f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fe0a:	8d a5       	lds	r24, 0x6d
    fe0c:	9e a5       	lds	r25, 0x6e
    fe0e:	01 97       	sbiw	r24, 0x01	; 1
    fe10:	9e a7       	lds	r25, 0x7e
    fe12:	8d a7       	lds	r24, 0x7d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fe14:	8d a5       	lds	r24, 0x6d
    fe16:	9e a5       	lds	r25, 0x6e
    fe18:	00 97       	sbiw	r24, 0x00	; 0
    fe1a:	51 f7       	brne	.-44     	; 0xfdf0 <main+0x4bc>
    fe1c:	17 c0       	rjmp	.+46     	; 0xfe4c <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fe1e:	69 a5       	lds	r22, 0x69
    fe20:	7a a5       	lds	r23, 0x6a
    fe22:	8b a5       	lds	r24, 0x6b
    fe24:	9c a5       	lds	r25, 0x6c
    fe26:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    fe2a:	dc 01       	movw	r26, r24
    fe2c:	cb 01       	movw	r24, r22
    fe2e:	9e a7       	lds	r25, 0x7e
    fe30:	8d a7       	lds	r24, 0x7d
    fe32:	8d a5       	lds	r24, 0x6d
    fe34:	9e a5       	lds	r25, 0x6e
    fe36:	9a ab       	sts	0x5a, r25
    fe38:	89 ab       	sts	0x59, r24
    fe3a:	89 a9       	sts	0x49, r24
    fe3c:	9a a9       	sts	0x4a, r25
    fe3e:	8c 01       	movw	r16, r24
    fe40:	f8 01       	movw	r30, r16
    fe42:	31 97       	sbiw	r30, 0x01	; 1
    fe44:	f1 f7       	brne	.-4      	; 0xfe42 <main+0x50e>
    fe46:	8f 01       	movw	r16, r30
    fe48:	1a ab       	sts	0x5a, r17
    fe4a:	09 ab       	sts	0x59, r16
	_delay_ms(2000);
	buzzer_off();
    fe4c:	0e 94 9a 70 	call	0xe134	; 0xe134 <buzzer_off>
    fe50:	80 e0       	ldi	r24, 0x00	; 0
    fe52:	90 e0       	ldi	r25, 0x00	; 0
    fe54:	aa ef       	ldi	r26, 0xFA	; 250
    fe56:	b4 e4       	ldi	r27, 0x44	; 68
    fe58:	8b ab       	sts	0x5b, r24
    fe5a:	9c ab       	sts	0x5c, r25
    fe5c:	ad ab       	sts	0x5d, r26
    fe5e:	be ab       	sts	0x5e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fe60:	6b a9       	sts	0x4b, r22
    fe62:	7c a9       	sts	0x4c, r23
    fe64:	8d a9       	sts	0x4d, r24
    fe66:	9e a9       	sts	0x4e, r25
    fe68:	26 e6       	ldi	r18, 0x66	; 102
    fe6a:	36 e6       	ldi	r19, 0x66	; 102
    fe6c:	46 e6       	ldi	r20, 0x66	; 102
    fe6e:	55 e4       	ldi	r21, 0x45	; 69
    fe70:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    fe74:	dc 01       	movw	r26, r24
    fe76:	cb 01       	movw	r24, r22
    fe78:	8f ab       	sts	0x5f, r24
    fe7a:	98 af       	sts	0x78, r25
    fe7c:	a9 af       	sts	0x79, r26
    fe7e:	ba af       	sts	0x7a, r27
	if (__tmp < 1.0)
    fe80:	11 e0       	ldi	r17, 0x01	; 1
    fe82:	6f a9       	sts	0x4f, r22
    fe84:	78 ad       	sts	0x68, r23
    fe86:	89 ad       	sts	0x69, r24
    fe88:	9a ad       	sts	0x6a, r25
    fe8a:	20 e0       	ldi	r18, 0x00	; 0
    fe8c:	30 e0       	ldi	r19, 0x00	; 0
    fe8e:	40 e8       	ldi	r20, 0x80	; 128
    fe90:	5f e3       	ldi	r21, 0x3F	; 63
    fe92:	0e 94 24 80 	call	0x10048	; 0x10048 <__cmpsf2>
    fe96:	88 23       	and	r24, r24
    fe98:	0c f0       	brlt	.+2      	; 0xfe9c <main+0x568>
    fe9a:	10 e0       	ldi	r17, 0x00	; 0
    fe9c:	11 23       	and	r17, r17
    fe9e:	29 f0       	breq	.+10     	; 0xfeaa <main+0x576>
		__ticks = 1;
    fea0:	81 e0       	ldi	r24, 0x01	; 1
    fea2:	90 e0       	ldi	r25, 0x00	; 0
    fea4:	9c af       	sts	0x7c, r25
    fea6:	8b af       	sts	0x7b, r24
    fea8:	46 c0       	rjmp	.+140    	; 0xff36 <main+0x602>
	else if (__tmp > 65535)
    feaa:	11 e0       	ldi	r17, 0x01	; 1
    feac:	6f a9       	sts	0x4f, r22
    feae:	78 ad       	sts	0x68, r23
    feb0:	89 ad       	sts	0x69, r24
    feb2:	9a ad       	sts	0x6a, r25
    feb4:	20 e0       	ldi	r18, 0x00	; 0
    feb6:	3f ef       	ldi	r19, 0xFF	; 255
    feb8:	4f e7       	ldi	r20, 0x7F	; 127
    feba:	57 e4       	ldi	r21, 0x47	; 71
    febc:	0e 94 6e 81 	call	0x102dc	; 0x102dc <__gesf2>
    fec0:	18 16       	cp	r1, r24
    fec2:	0c f0       	brlt	.+2      	; 0xfec6 <main+0x592>
    fec4:	10 e0       	ldi	r17, 0x00	; 0
    fec6:	11 23       	and	r17, r17
    fec8:	61 f1       	breq	.+88     	; 0xff22 <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    feca:	6b a9       	sts	0x4b, r22
    fecc:	7c a9       	sts	0x4c, r23
    fece:	8d a9       	sts	0x4d, r24
    fed0:	9e a9       	sts	0x4e, r25
    fed2:	20 e0       	ldi	r18, 0x00	; 0
    fed4:	30 e0       	ldi	r19, 0x00	; 0
    fed6:	40 e2       	ldi	r20, 0x20	; 32
    fed8:	51 e4       	ldi	r21, 0x41	; 65
    feda:	0e 94 72 81 	call	0x102e4	; 0x102e4 <__mulsf3>
    fede:	dc 01       	movw	r26, r24
    fee0:	cb 01       	movw	r24, r22
    fee2:	bc 01       	movw	r22, r24
    fee4:	cd 01       	movw	r24, r26
    fee6:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    feea:	dc 01       	movw	r26, r24
    feec:	cb 01       	movw	r24, r22
    feee:	9c af       	sts	0x7c, r25
    fef0:	8b af       	sts	0x7b, r24
    fef2:	12 c0       	rjmp	.+36     	; 0xff18 <main+0x5e4>
    fef4:	80 e7       	ldi	r24, 0x70	; 112
    fef6:	91 e0       	ldi	r25, 0x01	; 1
    fef8:	9e af       	sts	0x7e, r25
    fefa:	8d af       	sts	0x7d, r24
    fefc:	8d ad       	sts	0x6d, r24
    fefe:	9e ad       	sts	0x6e, r25
    ff00:	8c 01       	movw	r16, r24
    ff02:	c8 01       	movw	r24, r16
    ff04:	01 97       	sbiw	r24, 0x01	; 1
    ff06:	f1 f7       	brne	.-4      	; 0xff04 <main+0x5d0>
    ff08:	8c 01       	movw	r16, r24
    ff0a:	1e af       	sts	0x7e, r17
    ff0c:	0d af       	sts	0x7d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ff0e:	8b ad       	sts	0x6b, r24
    ff10:	9c ad       	sts	0x6c, r25
    ff12:	01 97       	sbiw	r24, 0x01	; 1
    ff14:	9c af       	sts	0x7c, r25
    ff16:	8b af       	sts	0x7b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ff18:	8b ad       	sts	0x6b, r24
    ff1a:	9c ad       	sts	0x6c, r25
    ff1c:	00 97       	sbiw	r24, 0x00	; 0
    ff1e:	51 f7       	brne	.-44     	; 0xfef4 <main+0x5c0>
    ff20:	20 c0       	rjmp	.+64     	; 0xff62 <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ff22:	6f a9       	sts	0x4f, r22
    ff24:	78 ad       	sts	0x68, r23
    ff26:	89 ad       	sts	0x69, r24
    ff28:	9a ad       	sts	0x6a, r25
    ff2a:	0e 94 90 80 	call	0x10120	; 0x10120 <__fixunssfsi>
    ff2e:	dc 01       	movw	r26, r24
    ff30:	cb 01       	movw	r24, r22
    ff32:	9c af       	sts	0x7c, r25
    ff34:	8b af       	sts	0x7b, r24
    ff36:	2b ad       	sts	0x6b, r18
    ff38:	3c ad       	sts	0x6c, r19
    ff3a:	ce 01       	movw	r24, r28
    ff3c:	cf 96       	adiw	r24, 0x3f	; 63
    ff3e:	fc 01       	movw	r30, r24
    ff40:	31 83       	std	Z+1, r19	; 0x01
    ff42:	20 83       	st	Z, r18
    ff44:	ce 01       	movw	r24, r28
    ff46:	cf 96       	adiw	r24, 0x3f	; 63
    ff48:	fc 01       	movw	r30, r24
    ff4a:	80 81       	ld	r24, Z
    ff4c:	91 81       	ldd	r25, Z+1	; 0x01
    ff4e:	8c 01       	movw	r16, r24
    ff50:	c8 01       	movw	r24, r16
    ff52:	01 97       	sbiw	r24, 0x01	; 1
    ff54:	f1 f7       	brne	.-4      	; 0xff52 <main+0x61e>
    ff56:	8c 01       	movw	r16, r24
    ff58:	ce 01       	movw	r24, r28
    ff5a:	cf 96       	adiw	r24, 0x3f	; 63
    ff5c:	fc 01       	movw	r30, r24
    ff5e:	11 83       	std	Z+1, r17	; 0x01
    ff60:	00 83       	st	Z, r16
    ff62:	80 e0       	ldi	r24, 0x00	; 0
    ff64:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(2000);
	
    ff66:	cc 59       	subi	r28, 0x9C	; 156
    ff68:	df 4f       	sbci	r29, 0xFF	; 255
    ff6a:	0f b6       	in	r0, 0x3f	; 63
    ff6c:	f8 94       	cli
    ff6e:	de bf       	out	0x3e, r29	; 62
    ff70:	0f be       	out	0x3f, r0	; 63
    ff72:	cd bf       	out	0x3d, r28	; 61
    ff74:	df 91       	pop	r29
    ff76:	cf 91       	pop	r28
    ff78:	1f 91       	pop	r17
    ff7a:	0f 91       	pop	r16
    ff7c:	08 95       	ret

0000ff7e <__subsf3>:
    ff7e:	50 58       	subi	r21, 0x80	; 128

0000ff80 <__addsf3>:
    ff80:	bb 27       	eor	r27, r27
    ff82:	aa 27       	eor	r26, r26
    ff84:	0e d0       	rcall	.+28     	; 0xffa2 <__addsf3x>
    ff86:	70 c1       	rjmp	.+736    	; 0x10268 <__fp_round>
    ff88:	61 d1       	rcall	.+706    	; 0x1024c <__fp_pscA>
    ff8a:	30 f0       	brcs	.+12     	; 0xff98 <__addsf3+0x18>
    ff8c:	66 d1       	rcall	.+716    	; 0x1025a <__fp_pscB>
    ff8e:	20 f0       	brcs	.+8      	; 0xff98 <__addsf3+0x18>
    ff90:	31 f4       	brne	.+12     	; 0xff9e <__addsf3+0x1e>
    ff92:	9f 3f       	cpi	r25, 0xFF	; 255
    ff94:	11 f4       	brne	.+4      	; 0xff9a <__addsf3+0x1a>
    ff96:	1e f4       	brtc	.+6      	; 0xff9e <__addsf3+0x1e>
    ff98:	56 c1       	rjmp	.+684    	; 0x10246 <__fp_nan>
    ff9a:	0e f4       	brtc	.+2      	; 0xff9e <__addsf3+0x1e>
    ff9c:	e0 95       	com	r30
    ff9e:	e7 fb       	bst	r30, 7
    ffa0:	4c c1       	rjmp	.+664    	; 0x1023a <__fp_inf>

0000ffa2 <__addsf3x>:
    ffa2:	e9 2f       	mov	r30, r25
    ffa4:	72 d1       	rcall	.+740    	; 0x1028a <__fp_split3>
    ffa6:	80 f3       	brcs	.-32     	; 0xff88 <__addsf3+0x8>
    ffa8:	ba 17       	cp	r27, r26
    ffaa:	62 07       	cpc	r22, r18
    ffac:	73 07       	cpc	r23, r19
    ffae:	84 07       	cpc	r24, r20
    ffb0:	95 07       	cpc	r25, r21
    ffb2:	18 f0       	brcs	.+6      	; 0xffba <__addsf3x+0x18>
    ffb4:	71 f4       	brne	.+28     	; 0xffd2 <__addsf3x+0x30>
    ffb6:	9e f5       	brtc	.+102    	; 0x1001e <__addsf3x+0x7c>
    ffb8:	8a c1       	rjmp	.+788    	; 0x102ce <__fp_zero>
    ffba:	0e f4       	brtc	.+2      	; 0xffbe <__addsf3x+0x1c>
    ffbc:	e0 95       	com	r30
    ffbe:	0b 2e       	mov	r0, r27
    ffc0:	ba 2f       	mov	r27, r26
    ffc2:	a0 2d       	mov	r26, r0
    ffc4:	0b 01       	movw	r0, r22
    ffc6:	b9 01       	movw	r22, r18
    ffc8:	90 01       	movw	r18, r0
    ffca:	0c 01       	movw	r0, r24
    ffcc:	ca 01       	movw	r24, r20
    ffce:	a0 01       	movw	r20, r0
    ffd0:	11 24       	eor	r1, r1
    ffd2:	ff 27       	eor	r31, r31
    ffd4:	59 1b       	sub	r21, r25
    ffd6:	99 f0       	breq	.+38     	; 0xfffe <__addsf3x+0x5c>
    ffd8:	59 3f       	cpi	r21, 0xF9	; 249
    ffda:	50 f4       	brcc	.+20     	; 0xfff0 <__addsf3x+0x4e>
    ffdc:	50 3e       	cpi	r21, 0xE0	; 224
    ffde:	68 f1       	brcs	.+90     	; 0x1003a <__addsf3x+0x98>
    ffe0:	1a 16       	cp	r1, r26
    ffe2:	f0 40       	sbci	r31, 0x00	; 0
    ffe4:	a2 2f       	mov	r26, r18
    ffe6:	23 2f       	mov	r18, r19
    ffe8:	34 2f       	mov	r19, r20
    ffea:	44 27       	eor	r20, r20
    ffec:	58 5f       	subi	r21, 0xF8	; 248
    ffee:	f3 cf       	rjmp	.-26     	; 0xffd6 <__addsf3x+0x34>
    fff0:	46 95       	lsr	r20
    fff2:	37 95       	ror	r19
    fff4:	27 95       	ror	r18
    fff6:	a7 95       	ror	r26
    fff8:	f0 40       	sbci	r31, 0x00	; 0
    fffa:	53 95       	inc	r21
    fffc:	c9 f7       	brne	.-14     	; 0xfff0 <__addsf3x+0x4e>
    fffe:	7e f4       	brtc	.+30     	; 0x1001e <__addsf3x+0x7c>
   10000:	1f 16       	cp	r1, r31
   10002:	ba 0b       	sbc	r27, r26
   10004:	62 0b       	sbc	r22, r18
   10006:	73 0b       	sbc	r23, r19
   10008:	84 0b       	sbc	r24, r20
   1000a:	ba f0       	brmi	.+46     	; 0x1003a <__addsf3x+0x98>
   1000c:	91 50       	subi	r25, 0x01	; 1
   1000e:	a1 f0       	breq	.+40     	; 0x10038 <__addsf3x+0x96>
   10010:	ff 0f       	add	r31, r31
   10012:	bb 1f       	adc	r27, r27
   10014:	66 1f       	adc	r22, r22
   10016:	77 1f       	adc	r23, r23
   10018:	88 1f       	adc	r24, r24
   1001a:	c2 f7       	brpl	.-16     	; 0x1000c <__addsf3x+0x6a>
   1001c:	0e c0       	rjmp	.+28     	; 0x1003a <__addsf3x+0x98>
   1001e:	ba 0f       	add	r27, r26
   10020:	62 1f       	adc	r22, r18
   10022:	73 1f       	adc	r23, r19
   10024:	84 1f       	adc	r24, r20
   10026:	48 f4       	brcc	.+18     	; 0x1003a <__addsf3x+0x98>
   10028:	87 95       	ror	r24
   1002a:	77 95       	ror	r23
   1002c:	67 95       	ror	r22
   1002e:	b7 95       	ror	r27
   10030:	f7 95       	ror	r31
   10032:	9e 3f       	cpi	r25, 0xFE	; 254
   10034:	08 f0       	brcs	.+2      	; 0x10038 <__addsf3x+0x96>
   10036:	b3 cf       	rjmp	.-154    	; 0xff9e <__addsf3+0x1e>
   10038:	93 95       	inc	r25
   1003a:	88 0f       	add	r24, r24
   1003c:	08 f0       	brcs	.+2      	; 0x10040 <__addsf3x+0x9e>
   1003e:	99 27       	eor	r25, r25
   10040:	ee 0f       	add	r30, r30
   10042:	97 95       	ror	r25
   10044:	87 95       	ror	r24
   10046:	08 95       	ret

00010048 <__cmpsf2>:
   10048:	d4 d0       	rcall	.+424    	; 0x101f2 <__fp_cmp>
   1004a:	08 f4       	brcc	.+2      	; 0x1004e <__cmpsf2+0x6>
   1004c:	81 e0       	ldi	r24, 0x01	; 1
   1004e:	08 95       	ret

00010050 <__divsf3>:
   10050:	0c d0       	rcall	.+24     	; 0x1006a <__divsf3x>
   10052:	0a c1       	rjmp	.+532    	; 0x10268 <__fp_round>
   10054:	02 d1       	rcall	.+516    	; 0x1025a <__fp_pscB>
   10056:	40 f0       	brcs	.+16     	; 0x10068 <__divsf3+0x18>
   10058:	f9 d0       	rcall	.+498    	; 0x1024c <__fp_pscA>
   1005a:	30 f0       	brcs	.+12     	; 0x10068 <__divsf3+0x18>
   1005c:	21 f4       	brne	.+8      	; 0x10066 <__divsf3+0x16>
   1005e:	5f 3f       	cpi	r21, 0xFF	; 255
   10060:	19 f0       	breq	.+6      	; 0x10068 <__divsf3+0x18>
   10062:	eb c0       	rjmp	.+470    	; 0x1023a <__fp_inf>
   10064:	51 11       	cpse	r21, r1
   10066:	34 c1       	rjmp	.+616    	; 0x102d0 <__fp_szero>
   10068:	ee c0       	rjmp	.+476    	; 0x10246 <__fp_nan>

0001006a <__divsf3x>:
   1006a:	0f d1       	rcall	.+542    	; 0x1028a <__fp_split3>
   1006c:	98 f3       	brcs	.-26     	; 0x10054 <__divsf3+0x4>

0001006e <__divsf3_pse>:
   1006e:	99 23       	and	r25, r25
   10070:	c9 f3       	breq	.-14     	; 0x10064 <__divsf3+0x14>
   10072:	55 23       	and	r21, r21
   10074:	b1 f3       	breq	.-20     	; 0x10062 <__divsf3+0x12>
   10076:	95 1b       	sub	r25, r21
   10078:	55 0b       	sbc	r21, r21
   1007a:	bb 27       	eor	r27, r27
   1007c:	aa 27       	eor	r26, r26
   1007e:	62 17       	cp	r22, r18
   10080:	73 07       	cpc	r23, r19
   10082:	84 07       	cpc	r24, r20
   10084:	38 f0       	brcs	.+14     	; 0x10094 <__divsf3_pse+0x26>
   10086:	9f 5f       	subi	r25, 0xFF	; 255
   10088:	5f 4f       	sbci	r21, 0xFF	; 255
   1008a:	22 0f       	add	r18, r18
   1008c:	33 1f       	adc	r19, r19
   1008e:	44 1f       	adc	r20, r20
   10090:	aa 1f       	adc	r26, r26
   10092:	a9 f3       	breq	.-22     	; 0x1007e <__divsf3_pse+0x10>
   10094:	33 d0       	rcall	.+102    	; 0x100fc <__divsf3_pse+0x8e>
   10096:	0e 2e       	mov	r0, r30
   10098:	3a f0       	brmi	.+14     	; 0x100a8 <__divsf3_pse+0x3a>
   1009a:	e0 e8       	ldi	r30, 0x80	; 128
   1009c:	30 d0       	rcall	.+96     	; 0x100fe <__divsf3_pse+0x90>
   1009e:	91 50       	subi	r25, 0x01	; 1
   100a0:	50 40       	sbci	r21, 0x00	; 0
   100a2:	e6 95       	lsr	r30
   100a4:	00 1c       	adc	r0, r0
   100a6:	ca f7       	brpl	.-14     	; 0x1009a <__divsf3_pse+0x2c>
   100a8:	29 d0       	rcall	.+82     	; 0x100fc <__divsf3_pse+0x8e>
   100aa:	fe 2f       	mov	r31, r30
   100ac:	27 d0       	rcall	.+78     	; 0x100fc <__divsf3_pse+0x8e>
   100ae:	66 0f       	add	r22, r22
   100b0:	77 1f       	adc	r23, r23
   100b2:	88 1f       	adc	r24, r24
   100b4:	bb 1f       	adc	r27, r27
   100b6:	26 17       	cp	r18, r22
   100b8:	37 07       	cpc	r19, r23
   100ba:	48 07       	cpc	r20, r24
   100bc:	ab 07       	cpc	r26, r27
   100be:	b0 e8       	ldi	r27, 0x80	; 128
   100c0:	09 f0       	breq	.+2      	; 0x100c4 <__divsf3_pse+0x56>
   100c2:	bb 0b       	sbc	r27, r27
   100c4:	80 2d       	mov	r24, r0
   100c6:	bf 01       	movw	r22, r30
   100c8:	ff 27       	eor	r31, r31
   100ca:	93 58       	subi	r25, 0x83	; 131
   100cc:	5f 4f       	sbci	r21, 0xFF	; 255
   100ce:	2a f0       	brmi	.+10     	; 0x100da <__divsf3_pse+0x6c>
   100d0:	9e 3f       	cpi	r25, 0xFE	; 254
   100d2:	51 05       	cpc	r21, r1
   100d4:	68 f0       	brcs	.+26     	; 0x100f0 <__divsf3_pse+0x82>
   100d6:	b1 c0       	rjmp	.+354    	; 0x1023a <__fp_inf>
   100d8:	fb c0       	rjmp	.+502    	; 0x102d0 <__fp_szero>
   100da:	5f 3f       	cpi	r21, 0xFF	; 255
   100dc:	ec f3       	brlt	.-6      	; 0x100d8 <__divsf3_pse+0x6a>
   100de:	98 3e       	cpi	r25, 0xE8	; 232
   100e0:	dc f3       	brlt	.-10     	; 0x100d8 <__divsf3_pse+0x6a>
   100e2:	86 95       	lsr	r24
   100e4:	77 95       	ror	r23
   100e6:	67 95       	ror	r22
   100e8:	b7 95       	ror	r27
   100ea:	f7 95       	ror	r31
   100ec:	9f 5f       	subi	r25, 0xFF	; 255
   100ee:	c9 f7       	brne	.-14     	; 0x100e2 <__divsf3_pse+0x74>
   100f0:	88 0f       	add	r24, r24
   100f2:	91 1d       	adc	r25, r1
   100f4:	96 95       	lsr	r25
   100f6:	87 95       	ror	r24
   100f8:	97 f9       	bld	r25, 7
   100fa:	08 95       	ret
   100fc:	e1 e0       	ldi	r30, 0x01	; 1
   100fe:	66 0f       	add	r22, r22
   10100:	77 1f       	adc	r23, r23
   10102:	88 1f       	adc	r24, r24
   10104:	bb 1f       	adc	r27, r27
   10106:	62 17       	cp	r22, r18
   10108:	73 07       	cpc	r23, r19
   1010a:	84 07       	cpc	r24, r20
   1010c:	ba 07       	cpc	r27, r26
   1010e:	20 f0       	brcs	.+8      	; 0x10118 <__divsf3_pse+0xaa>
   10110:	62 1b       	sub	r22, r18
   10112:	73 0b       	sbc	r23, r19
   10114:	84 0b       	sbc	r24, r20
   10116:	ba 0b       	sbc	r27, r26
   10118:	ee 1f       	adc	r30, r30
   1011a:	88 f7       	brcc	.-30     	; 0x100fe <__divsf3_pse+0x90>
   1011c:	e0 95       	com	r30
   1011e:	08 95       	ret

00010120 <__fixunssfsi>:
   10120:	bc d0       	rcall	.+376    	; 0x1029a <__fp_splitA>
   10122:	88 f0       	brcs	.+34     	; 0x10146 <__fixunssfsi+0x26>
   10124:	9f 57       	subi	r25, 0x7F	; 127
   10126:	90 f0       	brcs	.+36     	; 0x1014c <__fixunssfsi+0x2c>
   10128:	b9 2f       	mov	r27, r25
   1012a:	99 27       	eor	r25, r25
   1012c:	b7 51       	subi	r27, 0x17	; 23
   1012e:	a0 f0       	brcs	.+40     	; 0x10158 <__fixunssfsi+0x38>
   10130:	d1 f0       	breq	.+52     	; 0x10166 <__fixunssfsi+0x46>
   10132:	66 0f       	add	r22, r22
   10134:	77 1f       	adc	r23, r23
   10136:	88 1f       	adc	r24, r24
   10138:	99 1f       	adc	r25, r25
   1013a:	1a f0       	brmi	.+6      	; 0x10142 <__fixunssfsi+0x22>
   1013c:	ba 95       	dec	r27
   1013e:	c9 f7       	brne	.-14     	; 0x10132 <__fixunssfsi+0x12>
   10140:	12 c0       	rjmp	.+36     	; 0x10166 <__fixunssfsi+0x46>
   10142:	b1 30       	cpi	r27, 0x01	; 1
   10144:	81 f0       	breq	.+32     	; 0x10166 <__fixunssfsi+0x46>
   10146:	c3 d0       	rcall	.+390    	; 0x102ce <__fp_zero>
   10148:	b1 e0       	ldi	r27, 0x01	; 1
   1014a:	08 95       	ret
   1014c:	c0 c0       	rjmp	.+384    	; 0x102ce <__fp_zero>
   1014e:	67 2f       	mov	r22, r23
   10150:	78 2f       	mov	r23, r24
   10152:	88 27       	eor	r24, r24
   10154:	b8 5f       	subi	r27, 0xF8	; 248
   10156:	39 f0       	breq	.+14     	; 0x10166 <__fixunssfsi+0x46>
   10158:	b9 3f       	cpi	r27, 0xF9	; 249
   1015a:	cc f3       	brlt	.-14     	; 0x1014e <__fixunssfsi+0x2e>
   1015c:	86 95       	lsr	r24
   1015e:	77 95       	ror	r23
   10160:	67 95       	ror	r22
   10162:	b3 95       	inc	r27
   10164:	d9 f7       	brne	.-10     	; 0x1015c <__fixunssfsi+0x3c>
   10166:	3e f4       	brtc	.+14     	; 0x10176 <__fixunssfsi+0x56>
   10168:	90 95       	com	r25
   1016a:	80 95       	com	r24
   1016c:	70 95       	com	r23
   1016e:	61 95       	neg	r22
   10170:	7f 4f       	sbci	r23, 0xFF	; 255
   10172:	8f 4f       	sbci	r24, 0xFF	; 255
   10174:	9f 4f       	sbci	r25, 0xFF	; 255
   10176:	08 95       	ret

00010178 <__floatunsisf>:
   10178:	e8 94       	clt
   1017a:	09 c0       	rjmp	.+18     	; 0x1018e <__floatsisf+0x12>

0001017c <__floatsisf>:
   1017c:	97 fb       	bst	r25, 7
   1017e:	3e f4       	brtc	.+14     	; 0x1018e <__floatsisf+0x12>
   10180:	90 95       	com	r25
   10182:	80 95       	com	r24
   10184:	70 95       	com	r23
   10186:	61 95       	neg	r22
   10188:	7f 4f       	sbci	r23, 0xFF	; 255
   1018a:	8f 4f       	sbci	r24, 0xFF	; 255
   1018c:	9f 4f       	sbci	r25, 0xFF	; 255
   1018e:	99 23       	and	r25, r25
   10190:	a9 f0       	breq	.+42     	; 0x101bc <__floatsisf+0x40>
   10192:	f9 2f       	mov	r31, r25
   10194:	96 e9       	ldi	r25, 0x96	; 150
   10196:	bb 27       	eor	r27, r27
   10198:	93 95       	inc	r25
   1019a:	f6 95       	lsr	r31
   1019c:	87 95       	ror	r24
   1019e:	77 95       	ror	r23
   101a0:	67 95       	ror	r22
   101a2:	b7 95       	ror	r27
   101a4:	f1 11       	cpse	r31, r1
   101a6:	f8 cf       	rjmp	.-16     	; 0x10198 <__floatsisf+0x1c>
   101a8:	fa f4       	brpl	.+62     	; 0x101e8 <__floatsisf+0x6c>
   101aa:	bb 0f       	add	r27, r27
   101ac:	11 f4       	brne	.+4      	; 0x101b2 <__floatsisf+0x36>
   101ae:	60 ff       	sbrs	r22, 0
   101b0:	1b c0       	rjmp	.+54     	; 0x101e8 <__floatsisf+0x6c>
   101b2:	6f 5f       	subi	r22, 0xFF	; 255
   101b4:	7f 4f       	sbci	r23, 0xFF	; 255
   101b6:	8f 4f       	sbci	r24, 0xFF	; 255
   101b8:	9f 4f       	sbci	r25, 0xFF	; 255
   101ba:	16 c0       	rjmp	.+44     	; 0x101e8 <__floatsisf+0x6c>
   101bc:	88 23       	and	r24, r24
   101be:	11 f0       	breq	.+4      	; 0x101c4 <__floatsisf+0x48>
   101c0:	96 e9       	ldi	r25, 0x96	; 150
   101c2:	11 c0       	rjmp	.+34     	; 0x101e6 <__floatsisf+0x6a>
   101c4:	77 23       	and	r23, r23
   101c6:	21 f0       	breq	.+8      	; 0x101d0 <__floatsisf+0x54>
   101c8:	9e e8       	ldi	r25, 0x8E	; 142
   101ca:	87 2f       	mov	r24, r23
   101cc:	76 2f       	mov	r23, r22
   101ce:	05 c0       	rjmp	.+10     	; 0x101da <__floatsisf+0x5e>
   101d0:	66 23       	and	r22, r22
   101d2:	71 f0       	breq	.+28     	; 0x101f0 <__floatsisf+0x74>
   101d4:	96 e8       	ldi	r25, 0x86	; 134
   101d6:	86 2f       	mov	r24, r22
   101d8:	70 e0       	ldi	r23, 0x00	; 0
   101da:	60 e0       	ldi	r22, 0x00	; 0
   101dc:	2a f0       	brmi	.+10     	; 0x101e8 <__floatsisf+0x6c>
   101de:	9a 95       	dec	r25
   101e0:	66 0f       	add	r22, r22
   101e2:	77 1f       	adc	r23, r23
   101e4:	88 1f       	adc	r24, r24
   101e6:	da f7       	brpl	.-10     	; 0x101de <__floatsisf+0x62>
   101e8:	88 0f       	add	r24, r24
   101ea:	96 95       	lsr	r25
   101ec:	87 95       	ror	r24
   101ee:	97 f9       	bld	r25, 7
   101f0:	08 95       	ret

000101f2 <__fp_cmp>:
   101f2:	99 0f       	add	r25, r25
   101f4:	00 08       	sbc	r0, r0
   101f6:	55 0f       	add	r21, r21
   101f8:	aa 0b       	sbc	r26, r26
   101fa:	e0 e8       	ldi	r30, 0x80	; 128
   101fc:	fe ef       	ldi	r31, 0xFE	; 254
   101fe:	16 16       	cp	r1, r22
   10200:	17 06       	cpc	r1, r23
   10202:	e8 07       	cpc	r30, r24
   10204:	f9 07       	cpc	r31, r25
   10206:	c0 f0       	brcs	.+48     	; 0x10238 <__fp_cmp+0x46>
   10208:	12 16       	cp	r1, r18
   1020a:	13 06       	cpc	r1, r19
   1020c:	e4 07       	cpc	r30, r20
   1020e:	f5 07       	cpc	r31, r21
   10210:	98 f0       	brcs	.+38     	; 0x10238 <__fp_cmp+0x46>
   10212:	62 1b       	sub	r22, r18
   10214:	73 0b       	sbc	r23, r19
   10216:	84 0b       	sbc	r24, r20
   10218:	95 0b       	sbc	r25, r21
   1021a:	39 f4       	brne	.+14     	; 0x1022a <__fp_cmp+0x38>
   1021c:	0a 26       	eor	r0, r26
   1021e:	61 f0       	breq	.+24     	; 0x10238 <__fp_cmp+0x46>
   10220:	23 2b       	or	r18, r19
   10222:	24 2b       	or	r18, r20
   10224:	25 2b       	or	r18, r21
   10226:	21 f4       	brne	.+8      	; 0x10230 <__fp_cmp+0x3e>
   10228:	08 95       	ret
   1022a:	0a 26       	eor	r0, r26
   1022c:	09 f4       	brne	.+2      	; 0x10230 <__fp_cmp+0x3e>
   1022e:	a1 40       	sbci	r26, 0x01	; 1
   10230:	a6 95       	lsr	r26
   10232:	8f ef       	ldi	r24, 0xFF	; 255
   10234:	81 1d       	adc	r24, r1
   10236:	81 1d       	adc	r24, r1
   10238:	08 95       	ret

0001023a <__fp_inf>:
   1023a:	97 f9       	bld	r25, 7
   1023c:	9f 67       	ori	r25, 0x7F	; 127
   1023e:	80 e8       	ldi	r24, 0x80	; 128
   10240:	70 e0       	ldi	r23, 0x00	; 0
   10242:	60 e0       	ldi	r22, 0x00	; 0
   10244:	08 95       	ret

00010246 <__fp_nan>:
   10246:	9f ef       	ldi	r25, 0xFF	; 255
   10248:	80 ec       	ldi	r24, 0xC0	; 192
   1024a:	08 95       	ret

0001024c <__fp_pscA>:
   1024c:	00 24       	eor	r0, r0
   1024e:	0a 94       	dec	r0
   10250:	16 16       	cp	r1, r22
   10252:	17 06       	cpc	r1, r23
   10254:	18 06       	cpc	r1, r24
   10256:	09 06       	cpc	r0, r25
   10258:	08 95       	ret

0001025a <__fp_pscB>:
   1025a:	00 24       	eor	r0, r0
   1025c:	0a 94       	dec	r0
   1025e:	12 16       	cp	r1, r18
   10260:	13 06       	cpc	r1, r19
   10262:	14 06       	cpc	r1, r20
   10264:	05 06       	cpc	r0, r21
   10266:	08 95       	ret

00010268 <__fp_round>:
   10268:	09 2e       	mov	r0, r25
   1026a:	03 94       	inc	r0
   1026c:	00 0c       	add	r0, r0
   1026e:	11 f4       	brne	.+4      	; 0x10274 <__fp_round+0xc>
   10270:	88 23       	and	r24, r24
   10272:	52 f0       	brmi	.+20     	; 0x10288 <__fp_round+0x20>
   10274:	bb 0f       	add	r27, r27
   10276:	40 f4       	brcc	.+16     	; 0x10288 <__fp_round+0x20>
   10278:	bf 2b       	or	r27, r31
   1027a:	11 f4       	brne	.+4      	; 0x10280 <__fp_round+0x18>
   1027c:	60 ff       	sbrs	r22, 0
   1027e:	04 c0       	rjmp	.+8      	; 0x10288 <__fp_round+0x20>
   10280:	6f 5f       	subi	r22, 0xFF	; 255
   10282:	7f 4f       	sbci	r23, 0xFF	; 255
   10284:	8f 4f       	sbci	r24, 0xFF	; 255
   10286:	9f 4f       	sbci	r25, 0xFF	; 255
   10288:	08 95       	ret

0001028a <__fp_split3>:
   1028a:	57 fd       	sbrc	r21, 7
   1028c:	90 58       	subi	r25, 0x80	; 128
   1028e:	44 0f       	add	r20, r20
   10290:	55 1f       	adc	r21, r21
   10292:	59 f0       	breq	.+22     	; 0x102aa <__fp_splitA+0x10>
   10294:	5f 3f       	cpi	r21, 0xFF	; 255
   10296:	71 f0       	breq	.+28     	; 0x102b4 <__fp_splitA+0x1a>
   10298:	47 95       	ror	r20

0001029a <__fp_splitA>:
   1029a:	88 0f       	add	r24, r24
   1029c:	97 fb       	bst	r25, 7
   1029e:	99 1f       	adc	r25, r25
   102a0:	61 f0       	breq	.+24     	; 0x102ba <__fp_splitA+0x20>
   102a2:	9f 3f       	cpi	r25, 0xFF	; 255
   102a4:	79 f0       	breq	.+30     	; 0x102c4 <__fp_splitA+0x2a>
   102a6:	87 95       	ror	r24
   102a8:	08 95       	ret
   102aa:	12 16       	cp	r1, r18
   102ac:	13 06       	cpc	r1, r19
   102ae:	14 06       	cpc	r1, r20
   102b0:	55 1f       	adc	r21, r21
   102b2:	f2 cf       	rjmp	.-28     	; 0x10298 <__fp_split3+0xe>
   102b4:	46 95       	lsr	r20
   102b6:	f1 df       	rcall	.-30     	; 0x1029a <__fp_splitA>
   102b8:	08 c0       	rjmp	.+16     	; 0x102ca <__fp_splitA+0x30>
   102ba:	16 16       	cp	r1, r22
   102bc:	17 06       	cpc	r1, r23
   102be:	18 06       	cpc	r1, r24
   102c0:	99 1f       	adc	r25, r25
   102c2:	f1 cf       	rjmp	.-30     	; 0x102a6 <__fp_splitA+0xc>
   102c4:	86 95       	lsr	r24
   102c6:	71 05       	cpc	r23, r1
   102c8:	61 05       	cpc	r22, r1
   102ca:	08 94       	sec
   102cc:	08 95       	ret

000102ce <__fp_zero>:
   102ce:	e8 94       	clt

000102d0 <__fp_szero>:
   102d0:	bb 27       	eor	r27, r27
   102d2:	66 27       	eor	r22, r22
   102d4:	77 27       	eor	r23, r23
   102d6:	cb 01       	movw	r24, r22
   102d8:	97 f9       	bld	r25, 7
   102da:	08 95       	ret

000102dc <__gesf2>:
   102dc:	8a df       	rcall	.-236    	; 0x101f2 <__fp_cmp>
   102de:	08 f4       	brcc	.+2      	; 0x102e2 <__gesf2+0x6>
   102e0:	8f ef       	ldi	r24, 0xFF	; 255
   102e2:	08 95       	ret

000102e4 <__mulsf3>:
   102e4:	0b d0       	rcall	.+22     	; 0x102fc <__mulsf3x>
   102e6:	c0 cf       	rjmp	.-128    	; 0x10268 <__fp_round>
   102e8:	b1 df       	rcall	.-158    	; 0x1024c <__fp_pscA>
   102ea:	28 f0       	brcs	.+10     	; 0x102f6 <__mulsf3+0x12>
   102ec:	b6 df       	rcall	.-148    	; 0x1025a <__fp_pscB>
   102ee:	18 f0       	brcs	.+6      	; 0x102f6 <__mulsf3+0x12>
   102f0:	95 23       	and	r25, r21
   102f2:	09 f0       	breq	.+2      	; 0x102f6 <__mulsf3+0x12>
   102f4:	a2 cf       	rjmp	.-188    	; 0x1023a <__fp_inf>
   102f6:	a7 cf       	rjmp	.-178    	; 0x10246 <__fp_nan>
   102f8:	11 24       	eor	r1, r1
   102fa:	ea cf       	rjmp	.-44     	; 0x102d0 <__fp_szero>

000102fc <__mulsf3x>:
   102fc:	c6 df       	rcall	.-116    	; 0x1028a <__fp_split3>
   102fe:	a0 f3       	brcs	.-24     	; 0x102e8 <__mulsf3+0x4>

00010300 <__mulsf3_pse>:
   10300:	95 9f       	mul	r25, r21
   10302:	d1 f3       	breq	.-12     	; 0x102f8 <__mulsf3+0x14>
   10304:	95 0f       	add	r25, r21
   10306:	50 e0       	ldi	r21, 0x00	; 0
   10308:	55 1f       	adc	r21, r21
   1030a:	62 9f       	mul	r22, r18
   1030c:	f0 01       	movw	r30, r0
   1030e:	72 9f       	mul	r23, r18
   10310:	bb 27       	eor	r27, r27
   10312:	f0 0d       	add	r31, r0
   10314:	b1 1d       	adc	r27, r1
   10316:	63 9f       	mul	r22, r19
   10318:	aa 27       	eor	r26, r26
   1031a:	f0 0d       	add	r31, r0
   1031c:	b1 1d       	adc	r27, r1
   1031e:	aa 1f       	adc	r26, r26
   10320:	64 9f       	mul	r22, r20
   10322:	66 27       	eor	r22, r22
   10324:	b0 0d       	add	r27, r0
   10326:	a1 1d       	adc	r26, r1
   10328:	66 1f       	adc	r22, r22
   1032a:	82 9f       	mul	r24, r18
   1032c:	22 27       	eor	r18, r18
   1032e:	b0 0d       	add	r27, r0
   10330:	a1 1d       	adc	r26, r1
   10332:	62 1f       	adc	r22, r18
   10334:	73 9f       	mul	r23, r19
   10336:	b0 0d       	add	r27, r0
   10338:	a1 1d       	adc	r26, r1
   1033a:	62 1f       	adc	r22, r18
   1033c:	83 9f       	mul	r24, r19
   1033e:	a0 0d       	add	r26, r0
   10340:	61 1d       	adc	r22, r1
   10342:	22 1f       	adc	r18, r18
   10344:	74 9f       	mul	r23, r20
   10346:	33 27       	eor	r19, r19
   10348:	a0 0d       	add	r26, r0
   1034a:	61 1d       	adc	r22, r1
   1034c:	23 1f       	adc	r18, r19
   1034e:	84 9f       	mul	r24, r20
   10350:	60 0d       	add	r22, r0
   10352:	21 1d       	adc	r18, r1
   10354:	82 2f       	mov	r24, r18
   10356:	76 2f       	mov	r23, r22
   10358:	6a 2f       	mov	r22, r26
   1035a:	11 24       	eor	r1, r1
   1035c:	9f 57       	subi	r25, 0x7F	; 127
   1035e:	50 40       	sbci	r21, 0x00	; 0
   10360:	8a f0       	brmi	.+34     	; 0x10384 <__mulsf3_pse+0x84>
   10362:	e1 f0       	breq	.+56     	; 0x1039c <__mulsf3_pse+0x9c>
   10364:	88 23       	and	r24, r24
   10366:	4a f0       	brmi	.+18     	; 0x1037a <__mulsf3_pse+0x7a>
   10368:	ee 0f       	add	r30, r30
   1036a:	ff 1f       	adc	r31, r31
   1036c:	bb 1f       	adc	r27, r27
   1036e:	66 1f       	adc	r22, r22
   10370:	77 1f       	adc	r23, r23
   10372:	88 1f       	adc	r24, r24
   10374:	91 50       	subi	r25, 0x01	; 1
   10376:	50 40       	sbci	r21, 0x00	; 0
   10378:	a9 f7       	brne	.-22     	; 0x10364 <__mulsf3_pse+0x64>
   1037a:	9e 3f       	cpi	r25, 0xFE	; 254
   1037c:	51 05       	cpc	r21, r1
   1037e:	70 f0       	brcs	.+28     	; 0x1039c <__mulsf3_pse+0x9c>
   10380:	5c cf       	rjmp	.-328    	; 0x1023a <__fp_inf>
   10382:	a6 cf       	rjmp	.-180    	; 0x102d0 <__fp_szero>
   10384:	5f 3f       	cpi	r21, 0xFF	; 255
   10386:	ec f3       	brlt	.-6      	; 0x10382 <__mulsf3_pse+0x82>
   10388:	98 3e       	cpi	r25, 0xE8	; 232
   1038a:	dc f3       	brlt	.-10     	; 0x10382 <__mulsf3_pse+0x82>
   1038c:	86 95       	lsr	r24
   1038e:	77 95       	ror	r23
   10390:	67 95       	ror	r22
   10392:	b7 95       	ror	r27
   10394:	f7 95       	ror	r31
   10396:	e7 95       	ror	r30
   10398:	9f 5f       	subi	r25, 0xFF	; 255
   1039a:	c1 f7       	brne	.-16     	; 0x1038c <__mulsf3_pse+0x8c>
   1039c:	fe 2b       	or	r31, r30
   1039e:	88 0f       	add	r24, r24
   103a0:	91 1d       	adc	r25, r1
   103a2:	96 95       	lsr	r25
   103a4:	87 95       	ror	r24
   103a6:	97 f9       	bld	r25, 7
   103a8:	08 95       	ret

000103aa <__udivmodhi4>:
   103aa:	aa 1b       	sub	r26, r26
   103ac:	bb 1b       	sub	r27, r27
   103ae:	51 e1       	ldi	r21, 0x11	; 17
   103b0:	07 c0       	rjmp	.+14     	; 0x103c0 <__udivmodhi4_ep>

000103b2 <__udivmodhi4_loop>:
   103b2:	aa 1f       	adc	r26, r26
   103b4:	bb 1f       	adc	r27, r27
   103b6:	a6 17       	cp	r26, r22
   103b8:	b7 07       	cpc	r27, r23
   103ba:	10 f0       	brcs	.+4      	; 0x103c0 <__udivmodhi4_ep>
   103bc:	a6 1b       	sub	r26, r22
   103be:	b7 0b       	sbc	r27, r23

000103c0 <__udivmodhi4_ep>:
   103c0:	88 1f       	adc	r24, r24
   103c2:	99 1f       	adc	r25, r25
   103c4:	5a 95       	dec	r21
   103c6:	a9 f7       	brne	.-22     	; 0x103b2 <__udivmodhi4_loop>
   103c8:	80 95       	com	r24
   103ca:	90 95       	com	r25
   103cc:	bc 01       	movw	r22, r24
   103ce:	cd 01       	movw	r24, r26
   103d0:	08 95       	ret

000103d2 <__divmodhi4>:
   103d2:	97 fb       	bst	r25, 7
   103d4:	09 2e       	mov	r0, r25
   103d6:	07 26       	eor	r0, r23
   103d8:	0a d0       	rcall	.+20     	; 0x103ee <__divmodhi4_neg1>
   103da:	77 fd       	sbrc	r23, 7
   103dc:	04 d0       	rcall	.+8      	; 0x103e6 <__divmodhi4_neg2>
   103de:	e5 df       	rcall	.-54     	; 0x103aa <__udivmodhi4>
   103e0:	06 d0       	rcall	.+12     	; 0x103ee <__divmodhi4_neg1>
   103e2:	00 20       	and	r0, r0
   103e4:	1a f4       	brpl	.+6      	; 0x103ec <__divmodhi4_exit>

000103e6 <__divmodhi4_neg2>:
   103e6:	70 95       	com	r23
   103e8:	61 95       	neg	r22
   103ea:	7f 4f       	sbci	r23, 0xFF	; 255

000103ec <__divmodhi4_exit>:
   103ec:	08 95       	ret

000103ee <__divmodhi4_neg1>:
   103ee:	f6 f7       	brtc	.-4      	; 0x103ec <__divmodhi4_exit>
   103f0:	90 95       	com	r25
   103f2:	81 95       	neg	r24
   103f4:	9f 4f       	sbci	r25, 0xFF	; 255
   103f6:	08 95       	ret

000103f8 <malloc>:
   103f8:	cf 93       	push	r28
   103fa:	df 93       	push	r29
   103fc:	ac 01       	movw	r20, r24
   103fe:	82 30       	cpi	r24, 0x02	; 2
   10400:	91 05       	cpc	r25, r1
   10402:	10 f4       	brcc	.+4      	; 0x10408 <malloc+0x10>
   10404:	42 e0       	ldi	r20, 0x02	; 2
   10406:	50 e0       	ldi	r21, 0x00	; 0
   10408:	e0 91 15 05 	lds	r30, 0x0515
   1040c:	f0 91 16 05 	lds	r31, 0x0516
   10410:	20 e0       	ldi	r18, 0x00	; 0
   10412:	30 e0       	ldi	r19, 0x00	; 0
   10414:	a0 e0       	ldi	r26, 0x00	; 0
   10416:	b0 e0       	ldi	r27, 0x00	; 0
   10418:	24 c0       	rjmp	.+72     	; 0x10462 <malloc+0x6a>
   1041a:	80 81       	ld	r24, Z
   1041c:	91 81       	ldd	r25, Z+1	; 0x01
   1041e:	84 17       	cp	r24, r20
   10420:	95 07       	cpc	r25, r21
   10422:	d0 f0       	brcs	.+52     	; 0x10458 <malloc+0x60>
   10424:	84 17       	cp	r24, r20
   10426:	95 07       	cpc	r25, r21
   10428:	71 f4       	brne	.+28     	; 0x10446 <malloc+0x4e>
   1042a:	82 81       	ldd	r24, Z+2	; 0x02
   1042c:	93 81       	ldd	r25, Z+3	; 0x03
   1042e:	10 97       	sbiw	r26, 0x00	; 0
   10430:	29 f0       	breq	.+10     	; 0x1043c <malloc+0x44>
   10432:	13 96       	adiw	r26, 0x03	; 3
   10434:	9c 93       	st	X, r25
   10436:	8e 93       	st	-X, r24
   10438:	12 97       	sbiw	r26, 0x02	; 2
   1043a:	2c c0       	rjmp	.+88     	; 0x10494 <malloc+0x9c>
   1043c:	90 93 16 05 	sts	0x0516, r25
   10440:	80 93 15 05 	sts	0x0515, r24
   10444:	27 c0       	rjmp	.+78     	; 0x10494 <malloc+0x9c>
   10446:	21 15       	cp	r18, r1
   10448:	31 05       	cpc	r19, r1
   1044a:	19 f0       	breq	.+6      	; 0x10452 <malloc+0x5a>
   1044c:	82 17       	cp	r24, r18
   1044e:	93 07       	cpc	r25, r19
   10450:	18 f4       	brcc	.+6      	; 0x10458 <malloc+0x60>
   10452:	9c 01       	movw	r18, r24
   10454:	bd 01       	movw	r22, r26
   10456:	ef 01       	movw	r28, r30
   10458:	92 81       	ldd	r25, Z+2	; 0x02
   1045a:	83 81       	ldd	r24, Z+3	; 0x03
   1045c:	df 01       	movw	r26, r30
   1045e:	e9 2f       	mov	r30, r25
   10460:	f8 2f       	mov	r31, r24
   10462:	30 97       	sbiw	r30, 0x00	; 0
   10464:	d1 f6       	brne	.-76     	; 0x1041a <malloc+0x22>
   10466:	21 15       	cp	r18, r1
   10468:	31 05       	cpc	r19, r1
   1046a:	f9 f0       	breq	.+62     	; 0x104aa <malloc+0xb2>
   1046c:	c9 01       	movw	r24, r18
   1046e:	84 1b       	sub	r24, r20
   10470:	95 0b       	sbc	r25, r21
   10472:	84 30       	cpi	r24, 0x04	; 4
   10474:	91 05       	cpc	r25, r1
   10476:	80 f4       	brcc	.+32     	; 0x10498 <malloc+0xa0>
   10478:	8a 81       	ldd	r24, Y+2	; 0x02
   1047a:	9b 81       	ldd	r25, Y+3	; 0x03
   1047c:	61 15       	cp	r22, r1
   1047e:	71 05       	cpc	r23, r1
   10480:	21 f0       	breq	.+8      	; 0x1048a <malloc+0x92>
   10482:	fb 01       	movw	r30, r22
   10484:	93 83       	std	Z+3, r25	; 0x03
   10486:	82 83       	std	Z+2, r24	; 0x02
   10488:	04 c0       	rjmp	.+8      	; 0x10492 <malloc+0x9a>
   1048a:	90 93 16 05 	sts	0x0516, r25
   1048e:	80 93 15 05 	sts	0x0515, r24
   10492:	fe 01       	movw	r30, r28
   10494:	32 96       	adiw	r30, 0x02	; 2
   10496:	42 c0       	rjmp	.+132    	; 0x1051c <malloc+0x124>
   10498:	fe 01       	movw	r30, r28
   1049a:	e8 0f       	add	r30, r24
   1049c:	f9 1f       	adc	r31, r25
   1049e:	41 93       	st	Z+, r20
   104a0:	51 93       	st	Z+, r21
   104a2:	02 97       	sbiw	r24, 0x02	; 2
   104a4:	99 83       	std	Y+1, r25	; 0x01
   104a6:	88 83       	st	Y, r24
   104a8:	39 c0       	rjmp	.+114    	; 0x1051c <malloc+0x124>
   104aa:	80 91 13 05 	lds	r24, 0x0513
   104ae:	90 91 14 05 	lds	r25, 0x0514
   104b2:	00 97       	sbiw	r24, 0x00	; 0
   104b4:	41 f4       	brne	.+16     	; 0x104c6 <malloc+0xce>
   104b6:	80 91 44 03 	lds	r24, 0x0344
   104ba:	90 91 45 03 	lds	r25, 0x0345
   104be:	90 93 14 05 	sts	0x0514, r25
   104c2:	80 93 13 05 	sts	0x0513, r24
   104c6:	20 91 42 03 	lds	r18, 0x0342
   104ca:	30 91 43 03 	lds	r19, 0x0343
   104ce:	21 15       	cp	r18, r1
   104d0:	31 05       	cpc	r19, r1
   104d2:	41 f4       	brne	.+16     	; 0x104e4 <malloc+0xec>
   104d4:	2d b7       	in	r18, 0x3d	; 61
   104d6:	3e b7       	in	r19, 0x3e	; 62
   104d8:	80 91 46 03 	lds	r24, 0x0346
   104dc:	90 91 47 03 	lds	r25, 0x0347
   104e0:	28 1b       	sub	r18, r24
   104e2:	39 0b       	sbc	r19, r25
   104e4:	e0 91 13 05 	lds	r30, 0x0513
   104e8:	f0 91 14 05 	lds	r31, 0x0514
   104ec:	e2 17       	cp	r30, r18
   104ee:	f3 07       	cpc	r31, r19
   104f0:	98 f4       	brcc	.+38     	; 0x10518 <malloc+0x120>
   104f2:	2e 1b       	sub	r18, r30
   104f4:	3f 0b       	sbc	r19, r31
   104f6:	24 17       	cp	r18, r20
   104f8:	35 07       	cpc	r19, r21
   104fa:	70 f0       	brcs	.+28     	; 0x10518 <malloc+0x120>
   104fc:	ca 01       	movw	r24, r20
   104fe:	02 96       	adiw	r24, 0x02	; 2
   10500:	28 17       	cp	r18, r24
   10502:	39 07       	cpc	r19, r25
   10504:	48 f0       	brcs	.+18     	; 0x10518 <malloc+0x120>
   10506:	8e 0f       	add	r24, r30
   10508:	9f 1f       	adc	r25, r31
   1050a:	90 93 14 05 	sts	0x0514, r25
   1050e:	80 93 13 05 	sts	0x0513, r24
   10512:	41 93       	st	Z+, r20
   10514:	51 93       	st	Z+, r21
   10516:	02 c0       	rjmp	.+4      	; 0x1051c <malloc+0x124>
   10518:	e0 e0       	ldi	r30, 0x00	; 0
   1051a:	f0 e0       	ldi	r31, 0x00	; 0
   1051c:	cf 01       	movw	r24, r30
   1051e:	df 91       	pop	r29
   10520:	cf 91       	pop	r28
   10522:	08 95       	ret

00010524 <free>:
   10524:	0f 93       	push	r16
   10526:	1f 93       	push	r17
   10528:	cf 93       	push	r28
   1052a:	df 93       	push	r29
   1052c:	9c 01       	movw	r18, r24
   1052e:	00 97       	sbiw	r24, 0x00	; 0
   10530:	09 f4       	brne	.+2      	; 0x10534 <free+0x10>
   10532:	8c c0       	rjmp	.+280    	; 0x1064c <free+0x128>
   10534:	dc 01       	movw	r26, r24
   10536:	12 97       	sbiw	r26, 0x02	; 2
   10538:	13 96       	adiw	r26, 0x03	; 3
   1053a:	1c 92       	st	X, r1
   1053c:	1e 92       	st	-X, r1
   1053e:	12 97       	sbiw	r26, 0x02	; 2
   10540:	60 91 15 05 	lds	r22, 0x0515
   10544:	70 91 16 05 	lds	r23, 0x0516
   10548:	61 15       	cp	r22, r1
   1054a:	71 05       	cpc	r23, r1
   1054c:	89 f4       	brne	.+34     	; 0x10570 <free+0x4c>
   1054e:	8d 91       	ld	r24, X+
   10550:	9c 91       	ld	r25, X
   10552:	11 97       	sbiw	r26, 0x01	; 1
   10554:	82 0f       	add	r24, r18
   10556:	93 1f       	adc	r25, r19
   10558:	20 91 13 05 	lds	r18, 0x0513
   1055c:	30 91 14 05 	lds	r19, 0x0514
   10560:	28 17       	cp	r18, r24
   10562:	39 07       	cpc	r19, r25
   10564:	69 f5       	brne	.+90     	; 0x105c0 <free+0x9c>
   10566:	b0 93 14 05 	sts	0x0514, r27
   1056a:	a0 93 13 05 	sts	0x0513, r26
   1056e:	6e c0       	rjmp	.+220    	; 0x1064c <free+0x128>
   10570:	fb 01       	movw	r30, r22
   10572:	40 e0       	ldi	r20, 0x00	; 0
   10574:	50 e0       	ldi	r21, 0x00	; 0
   10576:	01 c0       	rjmp	.+2      	; 0x1057a <free+0x56>
   10578:	fc 01       	movw	r30, r24
   1057a:	ea 17       	cp	r30, r26
   1057c:	fb 07       	cpc	r31, r27
   1057e:	30 f4       	brcc	.+12     	; 0x1058c <free+0x68>
   10580:	82 81       	ldd	r24, Z+2	; 0x02
   10582:	93 81       	ldd	r25, Z+3	; 0x03
   10584:	af 01       	movw	r20, r30
   10586:	00 97       	sbiw	r24, 0x00	; 0
   10588:	b9 f7       	brne	.-18     	; 0x10578 <free+0x54>
   1058a:	1f c0       	rjmp	.+62     	; 0x105ca <free+0xa6>
   1058c:	e9 01       	movw	r28, r18
   1058e:	22 97       	sbiw	r28, 0x02	; 2
   10590:	fb 83       	std	Y+3, r31	; 0x03
   10592:	ea 83       	std	Y+2, r30	; 0x02
   10594:	08 81       	ld	r16, Y
   10596:	19 81       	ldd	r17, Y+1	; 0x01
   10598:	c9 01       	movw	r24, r18
   1059a:	80 0f       	add	r24, r16
   1059c:	91 1f       	adc	r25, r17
   1059e:	8e 17       	cp	r24, r30
   105a0:	9f 07       	cpc	r25, r31
   105a2:	59 f4       	brne	.+22     	; 0x105ba <free+0x96>
   105a4:	80 81       	ld	r24, Z
   105a6:	91 81       	ldd	r25, Z+1	; 0x01
   105a8:	80 0f       	add	r24, r16
   105aa:	91 1f       	adc	r25, r17
   105ac:	02 96       	adiw	r24, 0x02	; 2
   105ae:	99 83       	std	Y+1, r25	; 0x01
   105b0:	88 83       	st	Y, r24
   105b2:	82 81       	ldd	r24, Z+2	; 0x02
   105b4:	93 81       	ldd	r25, Z+3	; 0x03
   105b6:	9b 83       	std	Y+3, r25	; 0x03
   105b8:	8a 83       	std	Y+2, r24	; 0x02
   105ba:	41 15       	cp	r20, r1
   105bc:	51 05       	cpc	r21, r1
   105be:	29 f4       	brne	.+10     	; 0x105ca <free+0xa6>
   105c0:	b0 93 16 05 	sts	0x0516, r27
   105c4:	a0 93 15 05 	sts	0x0515, r26
   105c8:	41 c0       	rjmp	.+130    	; 0x1064c <free+0x128>
   105ca:	fa 01       	movw	r30, r20
   105cc:	b3 83       	std	Z+3, r27	; 0x03
   105ce:	a2 83       	std	Z+2, r26	; 0x02
   105d0:	c1 91       	ld	r28, Z+
   105d2:	d1 91       	ld	r29, Z+
   105d4:	ec 0f       	add	r30, r28
   105d6:	fd 1f       	adc	r31, r29
   105d8:	ae 17       	cp	r26, r30
   105da:	bf 07       	cpc	r27, r31
   105dc:	81 f4       	brne	.+32     	; 0x105fe <free+0xda>
   105de:	f9 01       	movw	r30, r18
   105e0:	92 91       	ld	r25, -Z
   105e2:	82 91       	ld	r24, -Z
   105e4:	8c 0f       	add	r24, r28
   105e6:	9d 1f       	adc	r25, r29
   105e8:	02 96       	adiw	r24, 0x02	; 2
   105ea:	da 01       	movw	r26, r20
   105ec:	11 96       	adiw	r26, 0x01	; 1
   105ee:	9c 93       	st	X, r25
   105f0:	8e 93       	st	-X, r24
   105f2:	82 81       	ldd	r24, Z+2	; 0x02
   105f4:	93 81       	ldd	r25, Z+3	; 0x03
   105f6:	13 96       	adiw	r26, 0x03	; 3
   105f8:	9c 93       	st	X, r25
   105fa:	8e 93       	st	-X, r24
   105fc:	12 97       	sbiw	r26, 0x02	; 2
   105fe:	e0 e0       	ldi	r30, 0x00	; 0
   10600:	f0 e0       	ldi	r31, 0x00	; 0
   10602:	02 c0       	rjmp	.+4      	; 0x10608 <free+0xe4>
   10604:	fb 01       	movw	r30, r22
   10606:	bc 01       	movw	r22, r24
   10608:	db 01       	movw	r26, r22
   1060a:	12 96       	adiw	r26, 0x02	; 2
   1060c:	8d 91       	ld	r24, X+
   1060e:	9c 91       	ld	r25, X
   10610:	13 97       	sbiw	r26, 0x03	; 3
   10612:	00 97       	sbiw	r24, 0x00	; 0
   10614:	b9 f7       	brne	.-18     	; 0x10604 <free+0xe0>
   10616:	cb 01       	movw	r24, r22
   10618:	02 96       	adiw	r24, 0x02	; 2
   1061a:	2d 91       	ld	r18, X+
   1061c:	3c 91       	ld	r19, X
   1061e:	11 97       	sbiw	r26, 0x01	; 1
   10620:	82 0f       	add	r24, r18
   10622:	93 1f       	adc	r25, r19
   10624:	20 91 13 05 	lds	r18, 0x0513
   10628:	30 91 14 05 	lds	r19, 0x0514
   1062c:	28 17       	cp	r18, r24
   1062e:	39 07       	cpc	r19, r25
   10630:	69 f4       	brne	.+26     	; 0x1064c <free+0x128>
   10632:	30 97       	sbiw	r30, 0x00	; 0
   10634:	29 f4       	brne	.+10     	; 0x10640 <free+0x11c>
   10636:	10 92 16 05 	sts	0x0516, r1
   1063a:	10 92 15 05 	sts	0x0515, r1
   1063e:	02 c0       	rjmp	.+4      	; 0x10644 <free+0x120>
   10640:	13 82       	std	Z+3, r1	; 0x03
   10642:	12 82       	std	Z+2, r1	; 0x02
   10644:	70 93 14 05 	sts	0x0514, r23
   10648:	60 93 13 05 	sts	0x0513, r22
   1064c:	df 91       	pop	r29
   1064e:	cf 91       	pop	r28
   10650:	1f 91       	pop	r17
   10652:	0f 91       	pop	r16
   10654:	08 95       	ret

00010656 <realloc>:
   10656:	8f 92       	push	r8
   10658:	9f 92       	push	r9
   1065a:	af 92       	push	r10
   1065c:	bf 92       	push	r11
   1065e:	cf 92       	push	r12
   10660:	df 92       	push	r13
   10662:	ef 92       	push	r14
   10664:	ff 92       	push	r15
   10666:	0f 93       	push	r16
   10668:	1f 93       	push	r17
   1066a:	cf 93       	push	r28
   1066c:	df 93       	push	r29
   1066e:	0f 92       	push	r0
   10670:	0f 92       	push	r0
   10672:	cd b7       	in	r28, 0x3d	; 61
   10674:	de b7       	in	r29, 0x3e	; 62
   10676:	8c 01       	movw	r16, r24
   10678:	00 97       	sbiw	r24, 0x00	; 0
   1067a:	29 f4       	brne	.+10     	; 0x10686 <realloc+0x30>
   1067c:	cb 01       	movw	r24, r22
   1067e:	0e 94 fc 81 	call	0x103f8	; 0x103f8 <malloc>
   10682:	8c 01       	movw	r16, r24
   10684:	b8 c0       	rjmp	.+368    	; 0x107f6 <realloc+0x1a0>
   10686:	dc 01       	movw	r26, r24
   10688:	a6 0f       	add	r26, r22
   1068a:	b7 1f       	adc	r27, r23
   1068c:	fc 01       	movw	r30, r24
   1068e:	32 97       	sbiw	r30, 0x02	; 2
   10690:	ae 17       	cp	r26, r30
   10692:	bf 07       	cpc	r27, r31
   10694:	08 f4       	brcc	.+2      	; 0x10698 <realloc+0x42>
   10696:	ad c0       	rjmp	.+346    	; 0x107f2 <realloc+0x19c>
   10698:	20 81       	ld	r18, Z
   1069a:	31 81       	ldd	r19, Z+1	; 0x01
   1069c:	26 17       	cp	r18, r22
   1069e:	37 07       	cpc	r19, r23
   106a0:	b0 f0       	brcs	.+44     	; 0x106ce <realloc+0x78>
   106a2:	25 30       	cpi	r18, 0x05	; 5
   106a4:	31 05       	cpc	r19, r1
   106a6:	08 f4       	brcc	.+2      	; 0x106aa <realloc+0x54>
   106a8:	a6 c0       	rjmp	.+332    	; 0x107f6 <realloc+0x1a0>
   106aa:	c9 01       	movw	r24, r18
   106ac:	04 97       	sbiw	r24, 0x04	; 4
   106ae:	86 17       	cp	r24, r22
   106b0:	97 07       	cpc	r25, r23
   106b2:	08 f4       	brcc	.+2      	; 0x106b6 <realloc+0x60>
   106b4:	a0 c0       	rjmp	.+320    	; 0x107f6 <realloc+0x1a0>
   106b6:	22 50       	subi	r18, 0x02	; 2
   106b8:	30 40       	sbci	r19, 0x00	; 0
   106ba:	26 1b       	sub	r18, r22
   106bc:	37 0b       	sbc	r19, r23
   106be:	2d 93       	st	X+, r18
   106c0:	3d 93       	st	X+, r19
   106c2:	cd 01       	movw	r24, r26
   106c4:	71 83       	std	Z+1, r23	; 0x01
   106c6:	60 83       	st	Z, r22
   106c8:	0e 94 92 82 	call	0x10524	; 0x10524 <free>
   106cc:	94 c0       	rjmp	.+296    	; 0x107f6 <realloc+0x1a0>
   106ce:	6b 01       	movw	r12, r22
   106d0:	c2 1a       	sub	r12, r18
   106d2:	d3 0a       	sbc	r13, r19
   106d4:	5c 01       	movw	r10, r24
   106d6:	a2 0e       	add	r10, r18
   106d8:	b3 1e       	adc	r11, r19
   106da:	e0 91 15 05 	lds	r30, 0x0515
   106de:	f0 91 16 05 	lds	r31, 0x0516
   106e2:	40 e0       	ldi	r20, 0x00	; 0
   106e4:	50 e0       	ldi	r21, 0x00	; 0
   106e6:	88 24       	eor	r8, r8
   106e8:	99 24       	eor	r9, r9
   106ea:	49 c0       	rjmp	.+146    	; 0x1077e <realloc+0x128>
   106ec:	ea 15       	cp	r30, r10
   106ee:	fb 05       	cpc	r31, r11
   106f0:	e1 f5       	brne	.+120    	; 0x1076a <realloc+0x114>
   106f2:	e0 80       	ld	r14, Z
   106f4:	f1 80       	ldd	r15, Z+1	; 0x01
   106f6:	c7 01       	movw	r24, r14
   106f8:	02 96       	adiw	r24, 0x02	; 2
   106fa:	8c 15       	cp	r24, r12
   106fc:	9d 05       	cpc	r25, r13
   106fe:	a8 f1       	brcs	.+106    	; 0x1076a <realloc+0x114>
   10700:	a7 01       	movw	r20, r14
   10702:	4c 19       	sub	r20, r12
   10704:	5d 09       	sbc	r21, r13
   10706:	ca 01       	movw	r24, r20
   10708:	02 96       	adiw	r24, 0x02	; 2
   1070a:	0f 2e       	mov	r0, r31
   1070c:	fe ef       	ldi	r31, 0xFE	; 254
   1070e:	cf 2e       	mov	r12, r31
   10710:	ff ef       	ldi	r31, 0xFF	; 255
   10712:	df 2e       	mov	r13, r31
   10714:	f0 2d       	mov	r31, r0
   10716:	c0 0e       	add	r12, r16
   10718:	d1 1e       	adc	r13, r17
   1071a:	85 30       	cpi	r24, 0x05	; 5
   1071c:	91 05       	cpc	r25, r1
   1071e:	78 f0       	brcs	.+30     	; 0x1073e <realloc+0xe8>
   10720:	82 81       	ldd	r24, Z+2	; 0x02
   10722:	93 81       	ldd	r25, Z+3	; 0x03
   10724:	13 96       	adiw	r26, 0x03	; 3
   10726:	9c 93       	st	X, r25
   10728:	8e 93       	st	-X, r24
   1072a:	12 97       	sbiw	r26, 0x02	; 2
   1072c:	11 96       	adiw	r26, 0x01	; 1
   1072e:	5c 93       	st	X, r21
   10730:	4e 93       	st	-X, r20
   10732:	f6 01       	movw	r30, r12
   10734:	71 83       	std	Z+1, r23	; 0x01
   10736:	60 83       	st	Z, r22
   10738:	9a 2f       	mov	r25, r26
   1073a:	8b 2f       	mov	r24, r27
   1073c:	0a c0       	rjmp	.+20     	; 0x10752 <realloc+0xfc>
   1073e:	c9 01       	movw	r24, r18
   10740:	02 96       	adiw	r24, 0x02	; 2
   10742:	8e 0d       	add	r24, r14
   10744:	9f 1d       	adc	r25, r15
   10746:	d6 01       	movw	r26, r12
   10748:	11 96       	adiw	r26, 0x01	; 1
   1074a:	9c 93       	st	X, r25
   1074c:	8e 93       	st	-X, r24
   1074e:	92 81       	ldd	r25, Z+2	; 0x02
   10750:	83 81       	ldd	r24, Z+3	; 0x03
   10752:	81 14       	cp	r8, r1
   10754:	91 04       	cpc	r9, r1
   10756:	21 f0       	breq	.+8      	; 0x10760 <realloc+0x10a>
   10758:	f4 01       	movw	r30, r8
   1075a:	92 83       	std	Z+2, r25	; 0x02
   1075c:	83 83       	std	Z+3, r24	; 0x03
   1075e:	4b c0       	rjmp	.+150    	; 0x107f6 <realloc+0x1a0>
   10760:	90 93 15 05 	sts	0x0515, r25
   10764:	80 93 16 05 	sts	0x0516, r24
   10768:	46 c0       	rjmp	.+140    	; 0x107f6 <realloc+0x1a0>
   1076a:	80 81       	ld	r24, Z
   1076c:	91 81       	ldd	r25, Z+1	; 0x01
   1076e:	48 17       	cp	r20, r24
   10770:	59 07       	cpc	r21, r25
   10772:	08 f4       	brcc	.+2      	; 0x10776 <realloc+0x120>
   10774:	ac 01       	movw	r20, r24
   10776:	82 81       	ldd	r24, Z+2	; 0x02
   10778:	93 81       	ldd	r25, Z+3	; 0x03
   1077a:	4f 01       	movw	r8, r30
   1077c:	fc 01       	movw	r30, r24
   1077e:	30 97       	sbiw	r30, 0x00	; 0
   10780:	09 f0       	breq	.+2      	; 0x10784 <realloc+0x12e>
   10782:	b4 cf       	rjmp	.-152    	; 0x106ec <realloc+0x96>
   10784:	80 91 13 05 	lds	r24, 0x0513
   10788:	90 91 14 05 	lds	r25, 0x0514
   1078c:	8a 15       	cp	r24, r10
   1078e:	9b 05       	cpc	r25, r11
   10790:	e9 f4       	brne	.+58     	; 0x107cc <realloc+0x176>
   10792:	46 17       	cp	r20, r22
   10794:	57 07       	cpc	r21, r23
   10796:	d0 f4       	brcc	.+52     	; 0x107cc <realloc+0x176>
   10798:	80 91 42 03 	lds	r24, 0x0342
   1079c:	90 91 43 03 	lds	r25, 0x0343
   107a0:	00 97       	sbiw	r24, 0x00	; 0
   107a2:	41 f4       	brne	.+16     	; 0x107b4 <realloc+0x15e>
   107a4:	8d b7       	in	r24, 0x3d	; 61
   107a6:	9e b7       	in	r25, 0x3e	; 62
   107a8:	20 91 46 03 	lds	r18, 0x0346
   107ac:	30 91 47 03 	lds	r19, 0x0347
   107b0:	82 1b       	sub	r24, r18
   107b2:	93 0b       	sbc	r25, r19
   107b4:	a8 17       	cp	r26, r24
   107b6:	b9 07       	cpc	r27, r25
   107b8:	e0 f4       	brcc	.+56     	; 0x107f2 <realloc+0x19c>
   107ba:	b0 93 14 05 	sts	0x0514, r27
   107be:	a0 93 13 05 	sts	0x0513, r26
   107c2:	f8 01       	movw	r30, r16
   107c4:	32 97       	sbiw	r30, 0x02	; 2
   107c6:	71 83       	std	Z+1, r23	; 0x01
   107c8:	60 83       	st	Z, r22
   107ca:	15 c0       	rjmp	.+42     	; 0x107f6 <realloc+0x1a0>
   107cc:	cb 01       	movw	r24, r22
   107ce:	29 83       	std	Y+1, r18	; 0x01
   107d0:	3a 83       	std	Y+2, r19	; 0x02
   107d2:	0e 94 fc 81 	call	0x103f8	; 0x103f8 <malloc>
   107d6:	7c 01       	movw	r14, r24
   107d8:	29 81       	ldd	r18, Y+1	; 0x01
   107da:	3a 81       	ldd	r19, Y+2	; 0x02
   107dc:	00 97       	sbiw	r24, 0x00	; 0
   107de:	49 f0       	breq	.+18     	; 0x107f2 <realloc+0x19c>
   107e0:	b8 01       	movw	r22, r16
   107e2:	a9 01       	movw	r20, r18
   107e4:	0e 94 10 84 	call	0x10820	; 0x10820 <memcpy>
   107e8:	c8 01       	movw	r24, r16
   107ea:	0e 94 92 82 	call	0x10524	; 0x10524 <free>
   107ee:	87 01       	movw	r16, r14
   107f0:	02 c0       	rjmp	.+4      	; 0x107f6 <realloc+0x1a0>
   107f2:	00 e0       	ldi	r16, 0x00	; 0
   107f4:	10 e0       	ldi	r17, 0x00	; 0
   107f6:	c8 01       	movw	r24, r16
   107f8:	0f 90       	pop	r0
   107fa:	0f 90       	pop	r0
   107fc:	df 91       	pop	r29
   107fe:	cf 91       	pop	r28
   10800:	1f 91       	pop	r17
   10802:	0f 91       	pop	r16
   10804:	ff 90       	pop	r15
   10806:	ef 90       	pop	r14
   10808:	df 90       	pop	r13
   1080a:	cf 90       	pop	r12
   1080c:	bf 90       	pop	r11
   1080e:	af 90       	pop	r10
   10810:	9f 90       	pop	r9
   10812:	8f 90       	pop	r8
   10814:	08 95       	ret

00010816 <strtok>:
   10816:	46 e4       	ldi	r20, 0x46	; 70
   10818:	54 e0       	ldi	r21, 0x04	; 4
   1081a:	0e 94 2b 84 	call	0x10856	; 0x10856 <strtok_r>
   1081e:	08 95       	ret

00010820 <memcpy>:
   10820:	fb 01       	movw	r30, r22
   10822:	dc 01       	movw	r26, r24
   10824:	02 c0       	rjmp	.+4      	; 0x1082a <memcpy+0xa>
   10826:	01 90       	ld	r0, Z+
   10828:	0d 92       	st	X+, r0
   1082a:	41 50       	subi	r20, 0x01	; 1
   1082c:	50 40       	sbci	r21, 0x00	; 0
   1082e:	d8 f7       	brcc	.-10     	; 0x10826 <memcpy+0x6>
   10830:	08 95       	ret

00010832 <strcat>:
   10832:	fb 01       	movw	r30, r22
   10834:	dc 01       	movw	r26, r24
   10836:	0d 90       	ld	r0, X+
   10838:	00 20       	and	r0, r0
   1083a:	e9 f7       	brne	.-6      	; 0x10836 <strcat+0x4>
   1083c:	11 97       	sbiw	r26, 0x01	; 1
   1083e:	01 90       	ld	r0, Z+
   10840:	0d 92       	st	X+, r0
   10842:	00 20       	and	r0, r0
   10844:	e1 f7       	brne	.-8      	; 0x1083e <strcat+0xc>
   10846:	08 95       	ret

00010848 <strcpy>:
   10848:	fb 01       	movw	r30, r22
   1084a:	dc 01       	movw	r26, r24
   1084c:	01 90       	ld	r0, Z+
   1084e:	0d 92       	st	X+, r0
   10850:	00 20       	and	r0, r0
   10852:	e1 f7       	brne	.-8      	; 0x1084c <strcpy+0x4>
   10854:	08 95       	ret

00010856 <strtok_r>:
   10856:	fa 01       	movw	r30, r20
   10858:	a1 91       	ld	r26, Z+
   1085a:	b0 81       	ld	r27, Z
   1085c:	00 97       	sbiw	r24, 0x00	; 0
   1085e:	19 f4       	brne	.+6      	; 0x10866 <strtok_r+0x10>
   10860:	10 97       	sbiw	r26, 0x00	; 0
   10862:	e1 f0       	breq	.+56     	; 0x1089c <strtok_r+0x46>
   10864:	cd 01       	movw	r24, r26
   10866:	dc 01       	movw	r26, r24
   10868:	cd 01       	movw	r24, r26
   1086a:	0d 90       	ld	r0, X+
   1086c:	00 20       	and	r0, r0
   1086e:	11 f4       	brne	.+4      	; 0x10874 <strtok_r+0x1e>
   10870:	c0 01       	movw	r24, r0
   10872:	13 c0       	rjmp	.+38     	; 0x1089a <strtok_r+0x44>
   10874:	fb 01       	movw	r30, r22
   10876:	21 91       	ld	r18, Z+
   10878:	22 23       	and	r18, r18
   1087a:	19 f0       	breq	.+6      	; 0x10882 <strtok_r+0x2c>
   1087c:	20 15       	cp	r18, r0
   1087e:	d9 f7       	brne	.-10     	; 0x10876 <strtok_r+0x20>
   10880:	f3 cf       	rjmp	.-26     	; 0x10868 <strtok_r+0x12>
   10882:	fb 01       	movw	r30, r22
   10884:	21 91       	ld	r18, Z+
   10886:	20 15       	cp	r18, r0
   10888:	19 f4       	brne	.+6      	; 0x10890 <strtok_r+0x3a>
   1088a:	1e 92       	st	-X, r1
   1088c:	11 96       	adiw	r26, 0x01	; 1
   1088e:	06 c0       	rjmp	.+12     	; 0x1089c <strtok_r+0x46>
   10890:	22 23       	and	r18, r18
   10892:	c1 f7       	brne	.-16     	; 0x10884 <strtok_r+0x2e>
   10894:	0d 90       	ld	r0, X+
   10896:	00 20       	and	r0, r0
   10898:	a1 f7       	brne	.-24     	; 0x10882 <strtok_r+0x2c>
   1089a:	d0 01       	movw	r26, r0
   1089c:	fa 01       	movw	r30, r20
   1089e:	a1 93       	st	Z+, r26
   108a0:	b0 83       	st	Z, r27
   108a2:	08 95       	ret

000108a4 <sscanf>:
   108a4:	cf 93       	push	r28
   108a6:	df 93       	push	r29
   108a8:	cd b7       	in	r28, 0x3d	; 61
   108aa:	de b7       	in	r29, 0x3e	; 62
   108ac:	2e 97       	sbiw	r28, 0x0e	; 14
   108ae:	0f b6       	in	r0, 0x3f	; 63
   108b0:	f8 94       	cli
   108b2:	de bf       	out	0x3e, r29	; 62
   108b4:	0f be       	out	0x3f, r0	; 63
   108b6:	cd bf       	out	0x3d, r28	; 61
   108b8:	85 e0       	ldi	r24, 0x05	; 5
   108ba:	8c 83       	std	Y+4, r24	; 0x04
   108bc:	8c 89       	ldd	r24, Y+20	; 0x14
   108be:	9d 89       	ldd	r25, Y+21	; 0x15
   108c0:	9a 83       	std	Y+2, r25	; 0x02
   108c2:	89 83       	std	Y+1, r24	; 0x01
   108c4:	ae 01       	movw	r20, r28
   108c6:	48 5e       	subi	r20, 0xE8	; 232
   108c8:	5f 4f       	sbci	r21, 0xFF	; 255
   108ca:	ce 01       	movw	r24, r28
   108cc:	01 96       	adiw	r24, 0x01	; 1
   108ce:	6e 89       	ldd	r22, Y+22	; 0x16
   108d0:	7f 89       	ldd	r23, Y+23	; 0x17
   108d2:	0e 94 18 86 	call	0x10c30	; 0x10c30 <vfscanf>
   108d6:	2e 96       	adiw	r28, 0x0e	; 14
   108d8:	0f b6       	in	r0, 0x3f	; 63
   108da:	f8 94       	cli
   108dc:	de bf       	out	0x3e, r29	; 62
   108de:	0f be       	out	0x3f, r0	; 63
   108e0:	cd bf       	out	0x3d, r28	; 61
   108e2:	df 91       	pop	r29
   108e4:	cf 91       	pop	r28
   108e6:	08 95       	ret

000108e8 <putval>:
   108e8:	20 fd       	sbrc	r18, 0
   108ea:	09 c0       	rjmp	.+18     	; 0x108fe <putval+0x16>
   108ec:	fc 01       	movw	r30, r24
   108ee:	23 fd       	sbrc	r18, 3
   108f0:	05 c0       	rjmp	.+10     	; 0x108fc <putval+0x14>
   108f2:	22 ff       	sbrs	r18, 2
   108f4:	02 c0       	rjmp	.+4      	; 0x108fa <putval+0x12>
   108f6:	73 83       	std	Z+3, r23	; 0x03
   108f8:	62 83       	std	Z+2, r22	; 0x02
   108fa:	51 83       	std	Z+1, r21	; 0x01
   108fc:	40 83       	st	Z, r20
   108fe:	08 95       	ret

00010900 <mulacc>:
   10900:	cf 92       	push	r12
   10902:	df 92       	push	r13
   10904:	ef 92       	push	r14
   10906:	ff 92       	push	r15
   10908:	6b 01       	movw	r12, r22
   1090a:	7c 01       	movw	r14, r24
   1090c:	44 fd       	sbrc	r20, 4
   1090e:	10 c0       	rjmp	.+32     	; 0x10930 <mulacc+0x30>
   10910:	46 fd       	sbrc	r20, 6
   10912:	10 c0       	rjmp	.+32     	; 0x10934 <mulacc+0x34>
   10914:	d6 01       	movw	r26, r12
   10916:	f7 01       	movw	r30, r14
   10918:	aa 0f       	add	r26, r26
   1091a:	bb 1f       	adc	r27, r27
   1091c:	ee 1f       	adc	r30, r30
   1091e:	ff 1f       	adc	r31, r31
   10920:	10 94       	com	r1
   10922:	d1 f7       	brne	.-12     	; 0x10918 <mulacc+0x18>
   10924:	ca 0e       	add	r12, r26
   10926:	db 1e       	adc	r13, r27
   10928:	ee 1e       	adc	r14, r30
   1092a:	ff 1e       	adc	r15, r31
   1092c:	81 e0       	ldi	r24, 0x01	; 1
   1092e:	03 c0       	rjmp	.+6      	; 0x10936 <mulacc+0x36>
   10930:	83 e0       	ldi	r24, 0x03	; 3
   10932:	01 c0       	rjmp	.+2      	; 0x10936 <mulacc+0x36>
   10934:	84 e0       	ldi	r24, 0x04	; 4
   10936:	cc 0c       	add	r12, r12
   10938:	dd 1c       	adc	r13, r13
   1093a:	ee 1c       	adc	r14, r14
   1093c:	ff 1c       	adc	r15, r15
   1093e:	81 50       	subi	r24, 0x01	; 1
   10940:	d1 f7       	brne	.-12     	; 0x10936 <mulacc+0x36>
   10942:	c2 0e       	add	r12, r18
   10944:	d1 1c       	adc	r13, r1
   10946:	e1 1c       	adc	r14, r1
   10948:	f1 1c       	adc	r15, r1
   1094a:	b6 01       	movw	r22, r12
   1094c:	c7 01       	movw	r24, r14
   1094e:	ff 90       	pop	r15
   10950:	ef 90       	pop	r14
   10952:	df 90       	pop	r13
   10954:	cf 90       	pop	r12
   10956:	08 95       	ret

00010958 <skip_spaces>:
   10958:	0f 93       	push	r16
   1095a:	1f 93       	push	r17
   1095c:	cf 93       	push	r28
   1095e:	df 93       	push	r29
   10960:	8c 01       	movw	r16, r24
   10962:	c8 01       	movw	r24, r16
   10964:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   10968:	ec 01       	movw	r28, r24
   1096a:	97 fd       	sbrc	r25, 7
   1096c:	08 c0       	rjmp	.+16     	; 0x1097e <skip_spaces+0x26>
   1096e:	0e 94 45 87 	call	0x10e8a	; 0x10e8a <isspace>
   10972:	00 97       	sbiw	r24, 0x00	; 0
   10974:	b1 f7       	brne	.-20     	; 0x10962 <skip_spaces+0xa>
   10976:	ce 01       	movw	r24, r28
   10978:	b8 01       	movw	r22, r16
   1097a:	0e 94 98 87 	call	0x10f30	; 0x10f30 <ungetc>
   1097e:	ce 01       	movw	r24, r28
   10980:	df 91       	pop	r29
   10982:	cf 91       	pop	r28
   10984:	1f 91       	pop	r17
   10986:	0f 91       	pop	r16
   10988:	08 95       	ret

0001098a <conv_int>:
   1098a:	af 92       	push	r10
   1098c:	bf 92       	push	r11
   1098e:	cf 92       	push	r12
   10990:	df 92       	push	r13
   10992:	ef 92       	push	r14
   10994:	ff 92       	push	r15
   10996:	0f 93       	push	r16
   10998:	1f 93       	push	r17
   1099a:	cf 93       	push	r28
   1099c:	df 93       	push	r29
   1099e:	8c 01       	movw	r16, r24
   109a0:	d6 2f       	mov	r29, r22
   109a2:	5a 01       	movw	r10, r20
   109a4:	c2 2f       	mov	r28, r18
   109a6:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   109aa:	8b 32       	cpi	r24, 0x2B	; 43
   109ac:	19 f0       	breq	.+6      	; 0x109b4 <conv_int+0x2a>
   109ae:	8d 32       	cpi	r24, 0x2D	; 45
   109b0:	49 f4       	brne	.+18     	; 0x109c4 <conv_int+0x3a>
   109b2:	c0 68       	ori	r28, 0x80	; 128
   109b4:	d1 50       	subi	r29, 0x01	; 1
   109b6:	09 f4       	brne	.+2      	; 0x109ba <conv_int+0x30>
   109b8:	61 c0       	rjmp	.+194    	; 0x10a7c <conv_int+0xf2>
   109ba:	c8 01       	movw	r24, r16
   109bc:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   109c0:	97 fd       	sbrc	r25, 7
   109c2:	5c c0       	rjmp	.+184    	; 0x10a7c <conv_int+0xf2>
   109c4:	cd 7f       	andi	r28, 0xFD	; 253
   109c6:	2c 2f       	mov	r18, r28
   109c8:	20 73       	andi	r18, 0x30	; 48
   109ca:	d1 f4       	brne	.+52     	; 0x10a00 <conv_int+0x76>
   109cc:	80 33       	cpi	r24, 0x30	; 48
   109ce:	c1 f4       	brne	.+48     	; 0x10a00 <conv_int+0x76>
   109d0:	d1 50       	subi	r29, 0x01	; 1
   109d2:	09 f4       	brne	.+2      	; 0x109d6 <conv_int+0x4c>
   109d4:	3e c0       	rjmp	.+124    	; 0x10a52 <conv_int+0xc8>
   109d6:	c8 01       	movw	r24, r16
   109d8:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   109dc:	97 fd       	sbrc	r25, 7
   109de:	39 c0       	rjmp	.+114    	; 0x10a52 <conv_int+0xc8>
   109e0:	c2 60       	ori	r28, 0x02	; 2
   109e2:	88 37       	cpi	r24, 0x78	; 120
   109e4:	11 f0       	breq	.+4      	; 0x109ea <conv_int+0x60>
   109e6:	88 35       	cpi	r24, 0x58	; 88
   109e8:	49 f4       	brne	.+18     	; 0x109fc <conv_int+0x72>
   109ea:	c0 64       	ori	r28, 0x40	; 64
   109ec:	d1 50       	subi	r29, 0x01	; 1
   109ee:	89 f1       	breq	.+98     	; 0x10a52 <conv_int+0xc8>
   109f0:	c8 01       	movw	r24, r16
   109f2:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   109f6:	97 ff       	sbrs	r25, 7
   109f8:	03 c0       	rjmp	.+6      	; 0x10a00 <conv_int+0x76>
   109fa:	2b c0       	rjmp	.+86     	; 0x10a52 <conv_int+0xc8>
   109fc:	c6 ff       	sbrs	r28, 6
   109fe:	c0 61       	ori	r28, 0x10	; 16
   10a00:	cc 24       	eor	r12, r12
   10a02:	dd 24       	eor	r13, r13
   10a04:	76 01       	movw	r14, r12
   10a06:	28 2f       	mov	r18, r24
   10a08:	20 53       	subi	r18, 0x30	; 48
   10a0a:	28 30       	cpi	r18, 0x08	; 8
   10a0c:	80 f0       	brcs	.+32     	; 0x10a2e <conv_int+0xa4>
   10a0e:	c4 fd       	sbrc	r28, 4
   10a10:	09 c0       	rjmp	.+18     	; 0x10a24 <conv_int+0x9a>
   10a12:	2a 30       	cpi	r18, 0x0A	; 10
   10a14:	60 f0       	brcs	.+24     	; 0x10a2e <conv_int+0xa4>
   10a16:	c6 ff       	sbrs	r28, 6
   10a18:	05 c0       	rjmp	.+10     	; 0x10a24 <conv_int+0x9a>
   10a1a:	2f 7d       	andi	r18, 0xDF	; 223
   10a1c:	32 2f       	mov	r19, r18
   10a1e:	31 51       	subi	r19, 0x11	; 17
   10a20:	36 30       	cpi	r19, 0x06	; 6
   10a22:	20 f0       	brcs	.+8      	; 0x10a2c <conv_int+0xa2>
   10a24:	b8 01       	movw	r22, r16
   10a26:	0e 94 98 87 	call	0x10f30	; 0x10f30 <ungetc>
   10a2a:	10 c0       	rjmp	.+32     	; 0x10a4c <conv_int+0xc2>
   10a2c:	27 50       	subi	r18, 0x07	; 7
   10a2e:	c7 01       	movw	r24, r14
   10a30:	b6 01       	movw	r22, r12
   10a32:	4c 2f       	mov	r20, r28
   10a34:	0e 94 80 84 	call	0x10900	; 0x10900 <mulacc>
   10a38:	6b 01       	movw	r12, r22
   10a3a:	7c 01       	movw	r14, r24
   10a3c:	c2 60       	ori	r28, 0x02	; 2
   10a3e:	d1 50       	subi	r29, 0x01	; 1
   10a40:	59 f0       	breq	.+22     	; 0x10a58 <conv_int+0xce>
   10a42:	c8 01       	movw	r24, r16
   10a44:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   10a48:	97 ff       	sbrs	r25, 7
   10a4a:	dd cf       	rjmp	.-70     	; 0x10a06 <conv_int+0x7c>
   10a4c:	c1 fd       	sbrc	r28, 1
   10a4e:	04 c0       	rjmp	.+8      	; 0x10a58 <conv_int+0xce>
   10a50:	15 c0       	rjmp	.+42     	; 0x10a7c <conv_int+0xf2>
   10a52:	cc 24       	eor	r12, r12
   10a54:	dd 24       	eor	r13, r13
   10a56:	76 01       	movw	r14, r12
   10a58:	c7 ff       	sbrs	r28, 7
   10a5a:	08 c0       	rjmp	.+16     	; 0x10a6c <conv_int+0xe2>
   10a5c:	f0 94       	com	r15
   10a5e:	e0 94       	com	r14
   10a60:	d0 94       	com	r13
   10a62:	c0 94       	com	r12
   10a64:	c1 1c       	adc	r12, r1
   10a66:	d1 1c       	adc	r13, r1
   10a68:	e1 1c       	adc	r14, r1
   10a6a:	f1 1c       	adc	r15, r1
   10a6c:	c5 01       	movw	r24, r10
   10a6e:	b7 01       	movw	r22, r14
   10a70:	a6 01       	movw	r20, r12
   10a72:	2c 2f       	mov	r18, r28
   10a74:	0e 94 74 84 	call	0x108e8	; 0x108e8 <putval>
   10a78:	81 e0       	ldi	r24, 0x01	; 1
   10a7a:	01 c0       	rjmp	.+2      	; 0x10a7e <conv_int+0xf4>
   10a7c:	80 e0       	ldi	r24, 0x00	; 0
   10a7e:	df 91       	pop	r29
   10a80:	cf 91       	pop	r28
   10a82:	1f 91       	pop	r17
   10a84:	0f 91       	pop	r16
   10a86:	ff 90       	pop	r15
   10a88:	ef 90       	pop	r14
   10a8a:	df 90       	pop	r13
   10a8c:	cf 90       	pop	r12
   10a8e:	bf 90       	pop	r11
   10a90:	af 90       	pop	r10
   10a92:	08 95       	ret

00010a94 <conv_brk>:
   10a94:	4f 92       	push	r4
   10a96:	5f 92       	push	r5
   10a98:	6f 92       	push	r6
   10a9a:	7f 92       	push	r7
   10a9c:	8f 92       	push	r8
   10a9e:	9f 92       	push	r9
   10aa0:	af 92       	push	r10
   10aa2:	bf 92       	push	r11
   10aa4:	cf 92       	push	r12
   10aa6:	df 92       	push	r13
   10aa8:	ef 92       	push	r14
   10aaa:	ff 92       	push	r15
   10aac:	0f 93       	push	r16
   10aae:	1f 93       	push	r17
   10ab0:	cf 93       	push	r28
   10ab2:	df 93       	push	r29
   10ab4:	cd b7       	in	r28, 0x3d	; 61
   10ab6:	de b7       	in	r29, 0x3e	; 62
   10ab8:	a0 97       	sbiw	r28, 0x20	; 32
   10aba:	0f b6       	in	r0, 0x3f	; 63
   10abc:	f8 94       	cli
   10abe:	de bf       	out	0x3e, r29	; 62
   10ac0:	0f be       	out	0x3f, r0	; 63
   10ac2:	cd bf       	out	0x3d, r28	; 61
   10ac4:	5c 01       	movw	r10, r24
   10ac6:	06 2f       	mov	r16, r22
   10ac8:	7a 01       	movw	r14, r20
   10aca:	69 01       	movw	r12, r18
   10acc:	fe 01       	movw	r30, r28
   10ace:	31 96       	adiw	r30, 0x01	; 1
   10ad0:	80 e2       	ldi	r24, 0x20	; 32
   10ad2:	df 01       	movw	r26, r30
   10ad4:	1d 92       	st	X+, r1
   10ad6:	8a 95       	dec	r24
   10ad8:	e9 f7       	brne	.-6      	; 0x10ad4 <conv_brk+0x40>
   10ada:	d5 01       	movw	r26, r10
   10adc:	13 96       	adiw	r26, 0x03	; 3
   10ade:	1c 91       	ld	r17, X
   10ae0:	13 97       	sbiw	r26, 0x03	; 3
   10ae2:	60 e0       	ldi	r22, 0x00	; 0
   10ae4:	70 e0       	ldi	r23, 0x00	; 0
   10ae6:	20 e0       	ldi	r18, 0x00	; 0
   10ae8:	40 e0       	ldi	r20, 0x00	; 0
   10aea:	30 e0       	ldi	r19, 0x00	; 0
   10aec:	4f 01       	movw	r8, r30
   10aee:	81 e0       	ldi	r24, 0x01	; 1
   10af0:	68 2e       	mov	r6, r24
   10af2:	71 2c       	mov	r7, r1
   10af4:	f6 01       	movw	r30, r12
   10af6:	13 fd       	sbrc	r17, 3
   10af8:	55 91       	lpm	r21, Z+
   10afa:	13 ff       	sbrs	r17, 3
   10afc:	51 91       	ld	r21, Z+
   10afe:	6f 01       	movw	r12, r30
   10b00:	55 23       	and	r21, r21
   10b02:	09 f4       	brne	.+2      	; 0x10b06 <conv_brk+0x72>
   10b04:	7b c0       	rjmp	.+246    	; 0x10bfc <conv_brk+0x168>
   10b06:	5e 35       	cpi	r21, 0x5E	; 94
   10b08:	19 f4       	brne	.+6      	; 0x10b10 <conv_brk+0x7c>
   10b0a:	61 15       	cp	r22, r1
   10b0c:	71 05       	cpc	r23, r1
   10b0e:	49 f1       	breq	.+82     	; 0x10b62 <conv_brk+0xce>
   10b10:	83 2f       	mov	r24, r19
   10b12:	90 e0       	ldi	r25, 0x00	; 0
   10b14:	86 17       	cp	r24, r22
   10b16:	97 07       	cpc	r25, r23
   10b18:	3c f4       	brge	.+14     	; 0x10b28 <conv_brk+0x94>
   10b1a:	5d 35       	cpi	r21, 0x5D	; 93
   10b1c:	51 f1       	breq	.+84     	; 0x10b72 <conv_brk+0xde>
   10b1e:	5d 32       	cpi	r21, 0x2D	; 45
   10b20:	19 f4       	brne	.+6      	; 0x10b28 <conv_brk+0x94>
   10b22:	44 23       	and	r20, r20
   10b24:	01 f1       	breq	.+64     	; 0x10b66 <conv_brk+0xd2>
   10b26:	03 c0       	rjmp	.+6      	; 0x10b2e <conv_brk+0x9a>
   10b28:	44 23       	and	r20, r20
   10b2a:	09 f4       	brne	.+2      	; 0x10b2e <conv_brk+0x9a>
   10b2c:	25 2f       	mov	r18, r21
   10b2e:	85 2f       	mov	r24, r21
   10b30:	86 95       	lsr	r24
   10b32:	86 95       	lsr	r24
   10b34:	86 95       	lsr	r24
   10b36:	f4 01       	movw	r30, r8
   10b38:	e8 0f       	add	r30, r24
   10b3a:	f1 1d       	adc	r31, r1
   10b3c:	85 2f       	mov	r24, r21
   10b3e:	87 70       	andi	r24, 0x07	; 7
   10b40:	23 01       	movw	r4, r6
   10b42:	02 c0       	rjmp	.+4      	; 0x10b48 <conv_brk+0xb4>
   10b44:	44 0c       	add	r4, r4
   10b46:	55 1c       	adc	r5, r5
   10b48:	8a 95       	dec	r24
   10b4a:	e2 f7       	brpl	.-8      	; 0x10b44 <conv_brk+0xb0>
   10b4c:	80 81       	ld	r24, Z
   10b4e:	84 29       	or	r24, r4
   10b50:	80 83       	st	Z, r24
   10b52:	52 17       	cp	r21, r18
   10b54:	51 f0       	breq	.+20     	; 0x10b6a <conv_brk+0xd6>
   10b56:	52 17       	cp	r21, r18
   10b58:	10 f4       	brcc	.+4      	; 0x10b5e <conv_brk+0xca>
   10b5a:	5f 5f       	subi	r21, 0xFF	; 255
   10b5c:	e8 cf       	rjmp	.-48     	; 0x10b2e <conv_brk+0x9a>
   10b5e:	51 50       	subi	r21, 0x01	; 1
   10b60:	e6 cf       	rjmp	.-52     	; 0x10b2e <conv_brk+0x9a>
   10b62:	31 e0       	ldi	r19, 0x01	; 1
   10b64:	03 c0       	rjmp	.+6      	; 0x10b6c <conv_brk+0xd8>
   10b66:	41 e0       	ldi	r20, 0x01	; 1
   10b68:	01 c0       	rjmp	.+2      	; 0x10b6c <conv_brk+0xd8>
   10b6a:	40 e0       	ldi	r20, 0x00	; 0
   10b6c:	6f 5f       	subi	r22, 0xFF	; 255
   10b6e:	7f 4f       	sbci	r23, 0xFF	; 255
   10b70:	c1 cf       	rjmp	.-126    	; 0x10af4 <conv_brk+0x60>
   10b72:	44 23       	and	r20, r20
   10b74:	19 f0       	breq	.+6      	; 0x10b7c <conv_brk+0xe8>
   10b76:	8e 81       	ldd	r24, Y+6	; 0x06
   10b78:	80 62       	ori	r24, 0x20	; 32
   10b7a:	8e 83       	std	Y+6, r24	; 0x06
   10b7c:	33 23       	and	r19, r19
   10b7e:	51 f0       	breq	.+20     	; 0x10b94 <conv_brk+0x100>
   10b80:	fe 01       	movw	r30, r28
   10b82:	31 96       	adiw	r30, 0x01	; 1
   10b84:	ce 01       	movw	r24, r28
   10b86:	81 96       	adiw	r24, 0x21	; 33
   10b88:	20 81       	ld	r18, Z
   10b8a:	20 95       	com	r18
   10b8c:	21 93       	st	Z+, r18
   10b8e:	e8 17       	cp	r30, r24
   10b90:	f9 07       	cpc	r31, r25
   10b92:	d1 f7       	brne	.-12     	; 0x10b88 <conv_brk+0xf4>
   10b94:	11 e0       	ldi	r17, 0x01	; 1
   10b96:	01 c0       	rjmp	.+2      	; 0x10b9a <conv_brk+0x106>
   10b98:	10 e0       	ldi	r17, 0x00	; 0
   10b9a:	c5 01       	movw	r24, r10
   10b9c:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   10ba0:	9c 01       	movw	r18, r24
   10ba2:	97 fd       	sbrc	r25, 7
   10ba4:	23 c0       	rjmp	.+70     	; 0x10bec <conv_brk+0x158>
   10ba6:	86 95       	lsr	r24
   10ba8:	86 95       	lsr	r24
   10baa:	86 95       	lsr	r24
   10bac:	e1 e0       	ldi	r30, 0x01	; 1
   10bae:	f0 e0       	ldi	r31, 0x00	; 0
   10bb0:	ec 0f       	add	r30, r28
   10bb2:	fd 1f       	adc	r31, r29
   10bb4:	e8 0f       	add	r30, r24
   10bb6:	f1 1d       	adc	r31, r1
   10bb8:	40 81       	ld	r20, Z
   10bba:	50 e0       	ldi	r21, 0x00	; 0
   10bbc:	c9 01       	movw	r24, r18
   10bbe:	87 70       	andi	r24, 0x07	; 7
   10bc0:	90 70       	andi	r25, 0x00	; 0
   10bc2:	02 c0       	rjmp	.+4      	; 0x10bc8 <conv_brk+0x134>
   10bc4:	55 95       	asr	r21
   10bc6:	47 95       	ror	r20
   10bc8:	8a 95       	dec	r24
   10bca:	e2 f7       	brpl	.-8      	; 0x10bc4 <conv_brk+0x130>
   10bcc:	40 fd       	sbrc	r20, 0
   10bce:	05 c0       	rjmp	.+10     	; 0x10bda <conv_brk+0x146>
   10bd0:	c9 01       	movw	r24, r18
   10bd2:	b5 01       	movw	r22, r10
   10bd4:	0e 94 98 87 	call	0x10f30	; 0x10f30 <ungetc>
   10bd8:	09 c0       	rjmp	.+18     	; 0x10bec <conv_brk+0x158>
   10bda:	e1 14       	cp	r14, r1
   10bdc:	f1 04       	cpc	r15, r1
   10bde:	19 f0       	breq	.+6      	; 0x10be6 <conv_brk+0x152>
   10be0:	d7 01       	movw	r26, r14
   10be2:	2d 93       	st	X+, r18
   10be4:	7d 01       	movw	r14, r26
   10be6:	01 50       	subi	r16, 0x01	; 1
   10be8:	b9 f6       	brne	.-82     	; 0x10b98 <conv_brk+0x104>
   10bea:	02 c0       	rjmp	.+4      	; 0x10bf0 <conv_brk+0x15c>
   10bec:	11 23       	and	r17, r17
   10bee:	31 f4       	brne	.+12     	; 0x10bfc <conv_brk+0x168>
   10bf0:	e1 14       	cp	r14, r1
   10bf2:	f1 04       	cpc	r15, r1
   10bf4:	29 f0       	breq	.+10     	; 0x10c00 <conv_brk+0x16c>
   10bf6:	f7 01       	movw	r30, r14
   10bf8:	10 82       	st	Z, r1
   10bfa:	02 c0       	rjmp	.+4      	; 0x10c00 <conv_brk+0x16c>
   10bfc:	cc 24       	eor	r12, r12
   10bfe:	dd 24       	eor	r13, r13
   10c00:	c6 01       	movw	r24, r12
   10c02:	a0 96       	adiw	r28, 0x20	; 32
   10c04:	0f b6       	in	r0, 0x3f	; 63
   10c06:	f8 94       	cli
   10c08:	de bf       	out	0x3e, r29	; 62
   10c0a:	0f be       	out	0x3f, r0	; 63
   10c0c:	cd bf       	out	0x3d, r28	; 61
   10c0e:	df 91       	pop	r29
   10c10:	cf 91       	pop	r28
   10c12:	1f 91       	pop	r17
   10c14:	0f 91       	pop	r16
   10c16:	ff 90       	pop	r15
   10c18:	ef 90       	pop	r14
   10c1a:	df 90       	pop	r13
   10c1c:	cf 90       	pop	r12
   10c1e:	bf 90       	pop	r11
   10c20:	af 90       	pop	r10
   10c22:	9f 90       	pop	r9
   10c24:	8f 90       	pop	r8
   10c26:	7f 90       	pop	r7
   10c28:	6f 90       	pop	r6
   10c2a:	5f 90       	pop	r5
   10c2c:	4f 90       	pop	r4
   10c2e:	08 95       	ret

00010c30 <vfscanf>:
   10c30:	5f 92       	push	r5
   10c32:	6f 92       	push	r6
   10c34:	7f 92       	push	r7
   10c36:	8f 92       	push	r8
   10c38:	9f 92       	push	r9
   10c3a:	af 92       	push	r10
   10c3c:	bf 92       	push	r11
   10c3e:	cf 92       	push	r12
   10c40:	df 92       	push	r13
   10c42:	ef 92       	push	r14
   10c44:	ff 92       	push	r15
   10c46:	0f 93       	push	r16
   10c48:	1f 93       	push	r17
   10c4a:	cf 93       	push	r28
   10c4c:	df 93       	push	r29
   10c4e:	0f 92       	push	r0
   10c50:	cd b7       	in	r28, 0x3d	; 61
   10c52:	de b7       	in	r29, 0x3e	; 62
   10c54:	7c 01       	movw	r14, r24
   10c56:	5b 01       	movw	r10, r22
   10c58:	3a 01       	movw	r6, r20
   10c5a:	fc 01       	movw	r30, r24
   10c5c:	17 82       	std	Z+7, r1	; 0x07
   10c5e:	16 82       	std	Z+6, r1	; 0x06
   10c60:	99 24       	eor	r9, r9
   10c62:	ef c0       	rjmp	.+478    	; 0x10e42 <vfscanf+0x212>
   10c64:	81 2f       	mov	r24, r17
   10c66:	90 e0       	ldi	r25, 0x00	; 0
   10c68:	0e 94 45 87 	call	0x10e8a	; 0x10e8a <isspace>
   10c6c:	00 97       	sbiw	r24, 0x00	; 0
   10c6e:	21 f0       	breq	.+8      	; 0x10c78 <vfscanf+0x48>
   10c70:	c7 01       	movw	r24, r14
   10c72:	0e 94 ac 84 	call	0x10958	; 0x10958 <skip_spaces>
   10c76:	e5 c0       	rjmp	.+458    	; 0x10e42 <vfscanf+0x212>
   10c78:	15 32       	cpi	r17, 0x25	; 37
   10c7a:	41 f4       	brne	.+16     	; 0x10c8c <vfscanf+0x5c>
   10c7c:	f5 01       	movw	r30, r10
   10c7e:	03 fd       	sbrc	r16, 3
   10c80:	35 91       	lpm	r19, Z+
   10c82:	03 ff       	sbrs	r16, 3
   10c84:	31 91       	ld	r19, Z+
   10c86:	5f 01       	movw	r10, r30
   10c88:	35 32       	cpi	r19, 0x25	; 37
   10c8a:	61 f4       	brne	.+24     	; 0x10ca4 <vfscanf+0x74>
   10c8c:	c7 01       	movw	r24, r14
   10c8e:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   10c92:	97 fd       	sbrc	r25, 7
   10c94:	e2 c0       	rjmp	.+452    	; 0x10e5a <vfscanf+0x22a>
   10c96:	18 17       	cp	r17, r24
   10c98:	09 f4       	brne	.+2      	; 0x10c9c <vfscanf+0x6c>
   10c9a:	d3 c0       	rjmp	.+422    	; 0x10e42 <vfscanf+0x212>
   10c9c:	b7 01       	movw	r22, r14
   10c9e:	0e 94 98 87 	call	0x10f30	; 0x10f30 <ungetc>
   10ca2:	dd c0       	rjmp	.+442    	; 0x10e5e <vfscanf+0x22e>
   10ca4:	3a 32       	cpi	r19, 0x2A	; 42
   10ca6:	41 f4       	brne	.+16     	; 0x10cb8 <vfscanf+0x88>
   10ca8:	03 fd       	sbrc	r16, 3
   10caa:	35 91       	lpm	r19, Z+
   10cac:	03 ff       	sbrs	r16, 3
   10cae:	31 91       	ld	r19, Z+
   10cb0:	5f 01       	movw	r10, r30
   10cb2:	55 24       	eor	r5, r5
   10cb4:	53 94       	inc	r5
   10cb6:	01 c0       	rjmp	.+2      	; 0x10cba <vfscanf+0x8a>
   10cb8:	55 24       	eor	r5, r5
   10cba:	88 24       	eor	r8, r8
   10cbc:	10 c0       	rjmp	.+32     	; 0x10cde <vfscanf+0xae>
   10cbe:	f2 e0       	ldi	r31, 0x02	; 2
   10cc0:	5f 2a       	or	r5, r31
   10cc2:	68 2d       	mov	r22, r8
   10cc4:	70 e0       	ldi	r23, 0x00	; 0
   10cc6:	80 e0       	ldi	r24, 0x00	; 0
   10cc8:	90 e0       	ldi	r25, 0x00	; 0
   10cca:	40 e2       	ldi	r20, 0x20	; 32
   10ccc:	0e 94 80 84 	call	0x10900	; 0x10900 <mulacc>
   10cd0:	86 2e       	mov	r8, r22
   10cd2:	f5 01       	movw	r30, r10
   10cd4:	03 fd       	sbrc	r16, 3
   10cd6:	35 91       	lpm	r19, Z+
   10cd8:	03 ff       	sbrs	r16, 3
   10cda:	31 91       	ld	r19, Z+
   10cdc:	5f 01       	movw	r10, r30
   10cde:	23 2f       	mov	r18, r19
   10ce0:	20 53       	subi	r18, 0x30	; 48
   10ce2:	2a 30       	cpi	r18, 0x0A	; 10
   10ce4:	60 f3       	brcs	.-40     	; 0x10cbe <vfscanf+0x8e>
   10ce6:	51 fe       	sbrs	r5, 1
   10ce8:	03 c0       	rjmp	.+6      	; 0x10cf0 <vfscanf+0xc0>
   10cea:	88 20       	and	r8, r8
   10cec:	19 f4       	brne	.+6      	; 0x10cf4 <vfscanf+0xc4>
   10cee:	b7 c0       	rjmp	.+366    	; 0x10e5e <vfscanf+0x22e>
   10cf0:	88 24       	eor	r8, r8
   10cf2:	8a 94       	dec	r8
   10cf4:	38 36       	cpi	r19, 0x68	; 104
   10cf6:	19 f0       	breq	.+6      	; 0x10cfe <vfscanf+0xce>
   10cf8:	3c 36       	cpi	r19, 0x6C	; 108
   10cfa:	99 f4       	brne	.+38     	; 0x10d22 <vfscanf+0xf2>
   10cfc:	0a c0       	rjmp	.+20     	; 0x10d12 <vfscanf+0xe2>
   10cfe:	f5 01       	movw	r30, r10
   10d00:	03 fd       	sbrc	r16, 3
   10d02:	35 91       	lpm	r19, Z+
   10d04:	03 ff       	sbrs	r16, 3
   10d06:	31 91       	ld	r19, Z+
   10d08:	5f 01       	movw	r10, r30
   10d0a:	38 36       	cpi	r19, 0x68	; 104
   10d0c:	51 f4       	brne	.+20     	; 0x10d22 <vfscanf+0xf2>
   10d0e:	f8 e0       	ldi	r31, 0x08	; 8
   10d10:	5f 2a       	or	r5, r31
   10d12:	44 e0       	ldi	r20, 0x04	; 4
   10d14:	54 2a       	or	r5, r20
   10d16:	f5 01       	movw	r30, r10
   10d18:	03 fd       	sbrc	r16, 3
   10d1a:	35 91       	lpm	r19, Z+
   10d1c:	03 ff       	sbrs	r16, 3
   10d1e:	31 91       	ld	r19, Z+
   10d20:	5f 01       	movw	r10, r30
   10d22:	33 23       	and	r19, r19
   10d24:	09 f4       	brne	.+2      	; 0x10d28 <vfscanf+0xf8>
   10d26:	9b c0       	rjmp	.+310    	; 0x10e5e <vfscanf+0x22e>
   10d28:	84 ee       	ldi	r24, 0xE4	; 228
   10d2a:	90 e0       	ldi	r25, 0x00	; 0
   10d2c:	63 2f       	mov	r22, r19
   10d2e:	70 e0       	ldi	r23, 0x00	; 0
   10d30:	39 83       	std	Y+1, r19	; 0x01
   10d32:	0e 94 4d 87 	call	0x10e9a	; 0x10e9a <strchr_P>
   10d36:	39 81       	ldd	r19, Y+1	; 0x01
   10d38:	00 97       	sbiw	r24, 0x00	; 0
   10d3a:	09 f4       	brne	.+2      	; 0x10d3e <vfscanf+0x10e>
   10d3c:	90 c0       	rjmp	.+288    	; 0x10e5e <vfscanf+0x22e>
   10d3e:	85 2d       	mov	r24, r5
   10d40:	50 fc       	sbrc	r5, 0
   10d42:	08 c0       	rjmp	.+16     	; 0x10d54 <vfscanf+0x124>
   10d44:	f3 01       	movw	r30, r6
   10d46:	00 81       	ld	r16, Z
   10d48:	11 81       	ldd	r17, Z+1	; 0x01
   10d4a:	42 e0       	ldi	r20, 0x02	; 2
   10d4c:	50 e0       	ldi	r21, 0x00	; 0
   10d4e:	64 0e       	add	r6, r20
   10d50:	75 1e       	adc	r7, r21
   10d52:	02 c0       	rjmp	.+4      	; 0x10d58 <vfscanf+0x128>
   10d54:	00 e0       	ldi	r16, 0x00	; 0
   10d56:	10 e0       	ldi	r17, 0x00	; 0
   10d58:	3e 36       	cpi	r19, 0x6E	; 110
   10d5a:	51 f4       	brne	.+20     	; 0x10d70 <vfscanf+0x140>
   10d5c:	f7 01       	movw	r30, r14
   10d5e:	46 81       	ldd	r20, Z+6	; 0x06
   10d60:	57 81       	ldd	r21, Z+7	; 0x07
   10d62:	60 e0       	ldi	r22, 0x00	; 0
   10d64:	70 e0       	ldi	r23, 0x00	; 0
   10d66:	c8 01       	movw	r24, r16
   10d68:	25 2d       	mov	r18, r5
   10d6a:	0e 94 74 84 	call	0x108e8	; 0x108e8 <putval>
   10d6e:	69 c0       	rjmp	.+210    	; 0x10e42 <vfscanf+0x212>
   10d70:	33 36       	cpi	r19, 0x63	; 99
   10d72:	91 f4       	brne	.+36     	; 0x10d98 <vfscanf+0x168>
   10d74:	81 fd       	sbrc	r24, 1
   10d76:	02 c0       	rjmp	.+4      	; 0x10d7c <vfscanf+0x14c>
   10d78:	88 24       	eor	r8, r8
   10d7a:	83 94       	inc	r8
   10d7c:	c7 01       	movw	r24, r14
   10d7e:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   10d82:	97 fd       	sbrc	r25, 7
   10d84:	6a c0       	rjmp	.+212    	; 0x10e5a <vfscanf+0x22a>
   10d86:	01 15       	cp	r16, r1
   10d88:	11 05       	cpc	r17, r1
   10d8a:	19 f0       	breq	.+6      	; 0x10d92 <vfscanf+0x162>
   10d8c:	f8 01       	movw	r30, r16
   10d8e:	81 93       	st	Z+, r24
   10d90:	8f 01       	movw	r16, r30
   10d92:	8a 94       	dec	r8
   10d94:	99 f7       	brne	.-26     	; 0x10d7c <vfscanf+0x14c>
   10d96:	53 c0       	rjmp	.+166    	; 0x10e3e <vfscanf+0x20e>
   10d98:	c7 01       	movw	r24, r14
   10d9a:	3b 35       	cpi	r19, 0x5B	; 91
   10d9c:	51 f4       	brne	.+20     	; 0x10db2 <vfscanf+0x182>
   10d9e:	68 2d       	mov	r22, r8
   10da0:	a8 01       	movw	r20, r16
   10da2:	95 01       	movw	r18, r10
   10da4:	0e 94 4a 85 	call	0x10a94	; 0x10a94 <conv_brk>
   10da8:	5c 01       	movw	r10, r24
   10daa:	00 97       	sbiw	r24, 0x00	; 0
   10dac:	09 f0       	breq	.+2      	; 0x10db0 <vfscanf+0x180>
   10dae:	47 c0       	rjmp	.+142    	; 0x10e3e <vfscanf+0x20e>
   10db0:	41 c0       	rjmp	.+130    	; 0x10e34 <vfscanf+0x204>
   10db2:	39 83       	std	Y+1, r19	; 0x01
   10db4:	0e 94 ac 84 	call	0x10958	; 0x10958 <skip_spaces>
   10db8:	39 81       	ldd	r19, Y+1	; 0x01
   10dba:	97 fd       	sbrc	r25, 7
   10dbc:	4e c0       	rjmp	.+156    	; 0x10e5a <vfscanf+0x22a>
   10dbe:	3f 36       	cpi	r19, 0x6F	; 111
   10dc0:	61 f1       	breq	.+88     	; 0x10e1a <vfscanf+0x1ea>
   10dc2:	30 37       	cpi	r19, 0x70	; 112
   10dc4:	28 f4       	brcc	.+10     	; 0x10dd0 <vfscanf+0x1a0>
   10dc6:	34 36       	cpi	r19, 0x64	; 100
   10dc8:	29 f1       	breq	.+74     	; 0x10e14 <vfscanf+0x1e4>
   10dca:	39 36       	cpi	r19, 0x69	; 105
   10dcc:	49 f5       	brne	.+82     	; 0x10e20 <vfscanf+0x1f0>
   10dce:	2a c0       	rjmp	.+84     	; 0x10e24 <vfscanf+0x1f4>
   10dd0:	33 37       	cpi	r19, 0x73	; 115
   10dd2:	19 f0       	breq	.+6      	; 0x10dda <vfscanf+0x1aa>
   10dd4:	35 37       	cpi	r19, 0x75	; 117
   10dd6:	21 f5       	brne	.+72     	; 0x10e20 <vfscanf+0x1f0>
   10dd8:	1d c0       	rjmp	.+58     	; 0x10e14 <vfscanf+0x1e4>
   10dda:	c7 01       	movw	r24, r14
   10ddc:	0e 94 58 87 	call	0x10eb0	; 0x10eb0 <fgetc>
   10de0:	6c 01       	movw	r12, r24
   10de2:	97 fd       	sbrc	r25, 7
   10de4:	11 c0       	rjmp	.+34     	; 0x10e08 <vfscanf+0x1d8>
   10de6:	0e 94 45 87 	call	0x10e8a	; 0x10e8a <isspace>
   10dea:	00 97       	sbiw	r24, 0x00	; 0
   10dec:	29 f0       	breq	.+10     	; 0x10df8 <vfscanf+0x1c8>
   10dee:	c6 01       	movw	r24, r12
   10df0:	b7 01       	movw	r22, r14
   10df2:	0e 94 98 87 	call	0x10f30	; 0x10f30 <ungetc>
   10df6:	08 c0       	rjmp	.+16     	; 0x10e08 <vfscanf+0x1d8>
   10df8:	01 15       	cp	r16, r1
   10dfa:	11 05       	cpc	r17, r1
   10dfc:	19 f0       	breq	.+6      	; 0x10e04 <vfscanf+0x1d4>
   10dfe:	f8 01       	movw	r30, r16
   10e00:	c1 92       	st	Z+, r12
   10e02:	8f 01       	movw	r16, r30
   10e04:	8a 94       	dec	r8
   10e06:	49 f7       	brne	.-46     	; 0x10dda <vfscanf+0x1aa>
   10e08:	01 15       	cp	r16, r1
   10e0a:	11 05       	cpc	r17, r1
   10e0c:	c1 f0       	breq	.+48     	; 0x10e3e <vfscanf+0x20e>
   10e0e:	f8 01       	movw	r30, r16
   10e10:	10 82       	st	Z, r1
   10e12:	15 c0       	rjmp	.+42     	; 0x10e3e <vfscanf+0x20e>
   10e14:	f0 e2       	ldi	r31, 0x20	; 32
   10e16:	5f 2a       	or	r5, r31
   10e18:	05 c0       	rjmp	.+10     	; 0x10e24 <vfscanf+0x1f4>
   10e1a:	40 e1       	ldi	r20, 0x10	; 16
   10e1c:	54 2a       	or	r5, r20
   10e1e:	02 c0       	rjmp	.+4      	; 0x10e24 <vfscanf+0x1f4>
   10e20:	50 e4       	ldi	r21, 0x40	; 64
   10e22:	55 2a       	or	r5, r21
   10e24:	c7 01       	movw	r24, r14
   10e26:	68 2d       	mov	r22, r8
   10e28:	a8 01       	movw	r20, r16
   10e2a:	25 2d       	mov	r18, r5
   10e2c:	0e 94 c5 84 	call	0x1098a	; 0x1098a <conv_int>
   10e30:	88 23       	and	r24, r24
   10e32:	29 f4       	brne	.+10     	; 0x10e3e <vfscanf+0x20e>
   10e34:	f7 01       	movw	r30, r14
   10e36:	83 81       	ldd	r24, Z+3	; 0x03
   10e38:	80 73       	andi	r24, 0x30	; 48
   10e3a:	79 f4       	brne	.+30     	; 0x10e5a <vfscanf+0x22a>
   10e3c:	10 c0       	rjmp	.+32     	; 0x10e5e <vfscanf+0x22e>
   10e3e:	50 fe       	sbrs	r5, 0
   10e40:	93 94       	inc	r9
   10e42:	f7 01       	movw	r30, r14
   10e44:	03 81       	ldd	r16, Z+3	; 0x03
   10e46:	f5 01       	movw	r30, r10
   10e48:	03 fd       	sbrc	r16, 3
   10e4a:	15 91       	lpm	r17, Z+
   10e4c:	03 ff       	sbrs	r16, 3
   10e4e:	11 91       	ld	r17, Z+
   10e50:	5f 01       	movw	r10, r30
   10e52:	11 23       	and	r17, r17
   10e54:	09 f0       	breq	.+2      	; 0x10e58 <vfscanf+0x228>
   10e56:	06 cf       	rjmp	.-500    	; 0x10c64 <vfscanf+0x34>
   10e58:	02 c0       	rjmp	.+4      	; 0x10e5e <vfscanf+0x22e>
   10e5a:	99 20       	and	r9, r9
   10e5c:	19 f0       	breq	.+6      	; 0x10e64 <vfscanf+0x234>
   10e5e:	89 2d       	mov	r24, r9
   10e60:	90 e0       	ldi	r25, 0x00	; 0
   10e62:	02 c0       	rjmp	.+4      	; 0x10e68 <vfscanf+0x238>
   10e64:	8f ef       	ldi	r24, 0xFF	; 255
   10e66:	9f ef       	ldi	r25, 0xFF	; 255
   10e68:	0f 90       	pop	r0
   10e6a:	df 91       	pop	r29
   10e6c:	cf 91       	pop	r28
   10e6e:	1f 91       	pop	r17
   10e70:	0f 91       	pop	r16
   10e72:	ff 90       	pop	r15
   10e74:	ef 90       	pop	r14
   10e76:	df 90       	pop	r13
   10e78:	cf 90       	pop	r12
   10e7a:	bf 90       	pop	r11
   10e7c:	af 90       	pop	r10
   10e7e:	9f 90       	pop	r9
   10e80:	8f 90       	pop	r8
   10e82:	7f 90       	pop	r7
   10e84:	6f 90       	pop	r6
   10e86:	5f 90       	pop	r5
   10e88:	08 95       	ret

00010e8a <isspace>:
   10e8a:	91 11       	cpse	r25, r1
   10e8c:	6e c0       	rjmp	.+220    	; 0x10f6a <__ctype_isfalse>
   10e8e:	80 32       	cpi	r24, 0x20	; 32
   10e90:	19 f0       	breq	.+6      	; 0x10e98 <isspace+0xe>
   10e92:	89 50       	subi	r24, 0x09	; 9
   10e94:	85 50       	subi	r24, 0x05	; 5
   10e96:	d0 f7       	brcc	.-12     	; 0x10e8c <isspace+0x2>
   10e98:	08 95       	ret

00010e9a <strchr_P>:
   10e9a:	fc 01       	movw	r30, r24
   10e9c:	05 90       	lpm	r0, Z+
   10e9e:	06 16       	cp	r0, r22
   10ea0:	21 f0       	breq	.+8      	; 0x10eaa <strchr_P+0x10>
   10ea2:	00 20       	and	r0, r0
   10ea4:	d9 f7       	brne	.-10     	; 0x10e9c <strchr_P+0x2>
   10ea6:	c0 01       	movw	r24, r0
   10ea8:	08 95       	ret
   10eaa:	31 97       	sbiw	r30, 0x01	; 1
   10eac:	cf 01       	movw	r24, r30
   10eae:	08 95       	ret

00010eb0 <fgetc>:
   10eb0:	cf 93       	push	r28
   10eb2:	df 93       	push	r29
   10eb4:	ec 01       	movw	r28, r24
   10eb6:	2b 81       	ldd	r18, Y+3	; 0x03
   10eb8:	20 ff       	sbrs	r18, 0
   10eba:	35 c0       	rjmp	.+106    	; 0x10f26 <fgetc+0x76>
   10ebc:	26 ff       	sbrs	r18, 6
   10ebe:	09 c0       	rjmp	.+18     	; 0x10ed2 <fgetc+0x22>
   10ec0:	2f 7b       	andi	r18, 0xBF	; 191
   10ec2:	2b 83       	std	Y+3, r18	; 0x03
   10ec4:	8e 81       	ldd	r24, Y+6	; 0x06
   10ec6:	9f 81       	ldd	r25, Y+7	; 0x07
   10ec8:	01 96       	adiw	r24, 0x01	; 1
   10eca:	9f 83       	std	Y+7, r25	; 0x07
   10ecc:	8e 83       	std	Y+6, r24	; 0x06
   10ece:	8a 81       	ldd	r24, Y+2	; 0x02
   10ed0:	28 c0       	rjmp	.+80     	; 0x10f22 <fgetc+0x72>
   10ed2:	22 ff       	sbrs	r18, 2
   10ed4:	0f c0       	rjmp	.+30     	; 0x10ef4 <fgetc+0x44>
   10ed6:	e8 81       	ld	r30, Y
   10ed8:	f9 81       	ldd	r31, Y+1	; 0x01
   10eda:	80 81       	ld	r24, Z
   10edc:	99 27       	eor	r25, r25
   10ede:	87 fd       	sbrc	r24, 7
   10ee0:	90 95       	com	r25
   10ee2:	00 97       	sbiw	r24, 0x00	; 0
   10ee4:	19 f4       	brne	.+6      	; 0x10eec <fgetc+0x3c>
   10ee6:	20 62       	ori	r18, 0x20	; 32
   10ee8:	2b 83       	std	Y+3, r18	; 0x03
   10eea:	1d c0       	rjmp	.+58     	; 0x10f26 <fgetc+0x76>
   10eec:	31 96       	adiw	r30, 0x01	; 1
   10eee:	f9 83       	std	Y+1, r31	; 0x01
   10ef0:	e8 83       	st	Y, r30
   10ef2:	11 c0       	rjmp	.+34     	; 0x10f16 <fgetc+0x66>
   10ef4:	ea 85       	ldd	r30, Y+10	; 0x0a
   10ef6:	fb 85       	ldd	r31, Y+11	; 0x0b
   10ef8:	ce 01       	movw	r24, r28
   10efa:	19 95       	eicall
   10efc:	97 ff       	sbrs	r25, 7
   10efe:	0b c0       	rjmp	.+22     	; 0x10f16 <fgetc+0x66>
   10f00:	2b 81       	ldd	r18, Y+3	; 0x03
   10f02:	3f ef       	ldi	r19, 0xFF	; 255
   10f04:	8f 3f       	cpi	r24, 0xFF	; 255
   10f06:	93 07       	cpc	r25, r19
   10f08:	11 f4       	brne	.+4      	; 0x10f0e <fgetc+0x5e>
   10f0a:	80 e1       	ldi	r24, 0x10	; 16
   10f0c:	01 c0       	rjmp	.+2      	; 0x10f10 <fgetc+0x60>
   10f0e:	80 e2       	ldi	r24, 0x20	; 32
   10f10:	82 2b       	or	r24, r18
   10f12:	8b 83       	std	Y+3, r24	; 0x03
   10f14:	08 c0       	rjmp	.+16     	; 0x10f26 <fgetc+0x76>
   10f16:	2e 81       	ldd	r18, Y+6	; 0x06
   10f18:	3f 81       	ldd	r19, Y+7	; 0x07
   10f1a:	2f 5f       	subi	r18, 0xFF	; 255
   10f1c:	3f 4f       	sbci	r19, 0xFF	; 255
   10f1e:	3f 83       	std	Y+7, r19	; 0x07
   10f20:	2e 83       	std	Y+6, r18	; 0x06
   10f22:	90 e0       	ldi	r25, 0x00	; 0
   10f24:	02 c0       	rjmp	.+4      	; 0x10f2a <fgetc+0x7a>
   10f26:	8f ef       	ldi	r24, 0xFF	; 255
   10f28:	9f ef       	ldi	r25, 0xFF	; 255
   10f2a:	df 91       	pop	r29
   10f2c:	cf 91       	pop	r28
   10f2e:	08 95       	ret

00010f30 <ungetc>:
   10f30:	fb 01       	movw	r30, r22
   10f32:	23 81       	ldd	r18, Z+3	; 0x03
   10f34:	20 ff       	sbrs	r18, 0
   10f36:	13 c0       	rjmp	.+38     	; 0x10f5e <ungetc+0x2e>
   10f38:	26 fd       	sbrc	r18, 6
   10f3a:	11 c0       	rjmp	.+34     	; 0x10f5e <ungetc+0x2e>
   10f3c:	3f ef       	ldi	r19, 0xFF	; 255
   10f3e:	8f 3f       	cpi	r24, 0xFF	; 255
   10f40:	93 07       	cpc	r25, r19
   10f42:	81 f0       	breq	.+32     	; 0x10f64 <ungetc+0x34>
   10f44:	82 83       	std	Z+2, r24	; 0x02
   10f46:	92 2f       	mov	r25, r18
   10f48:	90 64       	ori	r25, 0x40	; 64
   10f4a:	9f 7d       	andi	r25, 0xDF	; 223
   10f4c:	93 83       	std	Z+3, r25	; 0x03
   10f4e:	26 81       	ldd	r18, Z+6	; 0x06
   10f50:	37 81       	ldd	r19, Z+7	; 0x07
   10f52:	21 50       	subi	r18, 0x01	; 1
   10f54:	30 40       	sbci	r19, 0x00	; 0
   10f56:	37 83       	std	Z+7, r19	; 0x07
   10f58:	26 83       	std	Z+6, r18	; 0x06
   10f5a:	90 e0       	ldi	r25, 0x00	; 0
   10f5c:	08 95       	ret
   10f5e:	8f ef       	ldi	r24, 0xFF	; 255
   10f60:	9f ef       	ldi	r25, 0xFF	; 255
   10f62:	08 95       	ret
   10f64:	8f ef       	ldi	r24, 0xFF	; 255
   10f66:	9f ef       	ldi	r25, 0xFF	; 255
   10f68:	08 95       	ret

00010f6a <__ctype_isfalse>:
   10f6a:	99 27       	eor	r25, r25
   10f6c:	88 27       	eor	r24, r24

00010f6e <__ctype_istrue>:
   10f6e:	08 95       	ret

00010f70 <_exit>:
   10f70:	f8 94       	cli

00010f72 <__stop_program>:
   10f72:	ff cf       	rjmp	.-2      	; 0x10f72 <__stop_program>
