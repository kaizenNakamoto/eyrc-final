
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800200  00013b00  00013b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00013b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  0080034c  0080034c  00013ce0  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  00013ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009e7  00000000  00000000  000165fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001d0  00000000  00000000  00016fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007736  00000000  00000000  000171b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  0001e8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000324b  00000000  00000000  0001f2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001338  00000000  00000000  00022530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d17  00000000  00000000  00023868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035e3  00000000  00000000  0002457f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00027b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_5>
      18:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_6>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__vector_35>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_45>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 f4 90 	jmp	0x121e8	; 0x121e8 <__vector_51>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	fb e3       	ldi	r31, 0x3B	; 59
     10a:	01 e0       	ldi	r16, 0x01	; 1
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	ac 34       	cpi	r26, 0x4C	; 76
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	15 e0       	ldi	r17, 0x05	; 5
     11c:	ac e4       	ldi	r26, 0x4C	; 76
     11e:	b3 e0       	ldi	r27, 0x03	; 3
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ab 31       	cpi	r26, 0x1B	; 27
     126:	b1 07       	cpc	r27, r17
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 f8 92 	call	0x125f0	; 0x125f0 <main>
     12e:	0c 94 7e 9d 	jmp	0x13afc	; 0x13afc <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <lcd_set_4bit>:

/*****Function to Reset LCD*****/

void lcd_set_4bit()

{
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	c0 57       	subi	r28, 0x70	; 112
     144:	d0 40       	sbci	r29, 0x00	; 0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e8       	ldi	r26, 0x80	; 128
     156:	bf e3       	ldi	r27, 0x3F	; 63
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	ab 83       	std	Y+3, r26	; 0x03
     15e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	26 e6       	ldi	r18, 0x66	; 102
     16a:	36 e6       	ldi	r19, 0x66	; 102
     16c:	46 e6       	ldi	r20, 0x66	; 102
     16e:	55 e4       	ldi	r21, 0x45	; 69
     170:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	8d 83       	std	Y+5, r24	; 0x05
     17a:	9e 83       	std	Y+6, r25	; 0x06
     17c:	af 83       	std	Y+7, r26	; 0x07
     17e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e8       	ldi	r20, 0x80	; 128
     190:	5f e3       	ldi	r21, 0x3F	; 63
     192:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <lcd_set_4bit+0x66>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	29 f0       	breq	.+10     	; 0x1aa <lcd_set_4bit+0x74>
		__ticks = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	3f ef       	ldi	r19, 0xFF	; 255
     1b8:	4f e7       	ldi	r20, 0x7F	; 127
     1ba:	57 e4       	ldi	r21, 0x47	; 71
     1bc:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     1c0:	18 16       	cp	r1, r24
     1c2:	0c f0       	brlt	.+2      	; 0x1c6 <lcd_set_4bit+0x90>
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	11 23       	and	r17, r17
     1c8:	61 f1       	breq	.+88     	; 0x222 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ca:	69 81       	ldd	r22, Y+1	; 0x01
     1cc:	7a 81       	ldd	r23, Y+2	; 0x02
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	89 87       	std	Y+9, r24	; 0x09
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <lcd_set_4bit+0xe2>
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	8c 01       	movw	r16, r24
     202:	c8 01       	movw	r24, r16
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0xce>
     208:	8c 01       	movw	r16, r24
     20a:	1c 87       	std	Y+12, r17	; 0x0c
     20c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	9a 85       	ldd	r25, Y+10	; 0x0a
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	51 f7       	brne	.-44     	; 0x1f4 <lcd_set_4bit+0xbe>
     220:	17 c0       	rjmp	.+46     	; 0x250 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	6d 81       	ldd	r22, Y+5	; 0x05
     224:	7e 81       	ldd	r23, Y+6	; 0x06
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	9e 87       	std	Y+14, r25	; 0x0e
     23c:	8d 87       	std	Y+13, r24	; 0x0d
     23e:	8d 85       	ldd	r24, Y+13	; 0x0d
     240:	9e 85       	ldd	r25, Y+14	; 0x0e
     242:	8c 01       	movw	r16, r24
     244:	f8 01       	movw	r30, r16
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_set_4bit+0x110>
     24a:	8f 01       	movw	r16, r30
     24c:	1e 87       	std	Y+14, r17	; 0x0e
     24e:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	28 e2       	ldi	r18, 0x28	; 40
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2e 7f       	andi	r18, 0xFE	; 254
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     262:	88 e2       	ldi	r24, 0x28	; 40
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	28 e2       	ldi	r18, 0x28	; 40
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	20 e3       	ldi	r18, 0x30	; 48
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 e2       	ldi	r18, 0x28	; 40
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	24 60       	ori	r18, 0x04	; 4
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 ea       	ldi	r26, 0xA0	; 160
     296:	b0 e4       	ldi	r27, 0x40	; 64
     298:	8f 87       	std	Y+15, r24	; 0x0f
     29a:	98 8b       	std	Y+16, r25	; 0x10
     29c:	a9 8b       	std	Y+17, r26	; 0x11
     29e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a2:	78 89       	ldd	r23, Y+16	; 0x10
     2a4:	89 89       	ldd	r24, Y+17	; 0x11
     2a6:	9a 89       	ldd	r25, Y+18	; 0x12
     2a8:	26 e6       	ldi	r18, 0x66	; 102
     2aa:	36 e6       	ldi	r19, 0x66	; 102
     2ac:	46 e6       	ldi	r20, 0x66	; 102
     2ae:	55 e4       	ldi	r21, 0x45	; 69
     2b0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	8b 8b       	std	Y+19, r24	; 0x13
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	ad 8b       	std	Y+21, r26	; 0x15
     2be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	6b 89       	ldd	r22, Y+19	; 0x13
     2c4:	7c 89       	ldd	r23, Y+20	; 0x14
     2c6:	8d 89       	ldd	r24, Y+21	; 0x15
     2c8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <lcd_set_4bit+0x1a6>
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	11 23       	and	r17, r17
     2de:	29 f0       	breq	.+10     	; 0x2ea <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 8f       	std	Y+24, r25	; 0x18
     2e6:	8f 8b       	std	Y+23, r24	; 0x17
     2e8:	46 c0       	rjmp	.+140    	; 0x376 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	6b 89       	ldd	r22, Y+19	; 0x13
     2ee:	7c 89       	ldd	r23, Y+20	; 0x14
     2f0:	8d 89       	ldd	r24, Y+21	; 0x15
     2f2:	9e 89       	ldd	r25, Y+22	; 0x16
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	3f ef       	ldi	r19, 0xFF	; 255
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	57 e4       	ldi	r21, 0x47	; 71
     2fc:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     300:	18 16       	cp	r1, r24
     302:	0c f0       	brlt	.+2      	; 0x306 <lcd_set_4bit+0x1d0>
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	11 23       	and	r17, r17
     308:	61 f1       	breq	.+88     	; 0x362 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     30a:	6f 85       	ldd	r22, Y+15	; 0x0f
     30c:	78 89       	ldd	r23, Y+16	; 0x10
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	9a 89       	ldd	r25, Y+18	; 0x12
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	98 8f       	std	Y+24, r25	; 0x18
     330:	8f 8b       	std	Y+23, r24	; 0x17
     332:	12 c0       	rjmp	.+36     	; 0x358 <lcd_set_4bit+0x222>
     334:	80 e7       	ldi	r24, 0x70	; 112
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	9a 8f       	std	Y+26, r25	; 0x1a
     33a:	89 8f       	std	Y+25, r24	; 0x19
     33c:	89 8d       	ldd	r24, Y+25	; 0x19
     33e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     340:	8c 01       	movw	r16, r24
     342:	c8 01       	movw	r24, r16
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_set_4bit+0x20e>
     348:	8c 01       	movw	r16, r24
     34a:	1a 8f       	std	Y+26, r17	; 0x1a
     34c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34e:	8f 89       	ldd	r24, Y+23	; 0x17
     350:	98 8d       	ldd	r25, Y+24	; 0x18
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	98 8f       	std	Y+24, r25	; 0x18
     356:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     358:	8f 89       	ldd	r24, Y+23	; 0x17
     35a:	98 8d       	ldd	r25, Y+24	; 0x18
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	51 f7       	brne	.-44     	; 0x334 <lcd_set_4bit+0x1fe>
     360:	17 c0       	rjmp	.+46     	; 0x390 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	6b 89       	ldd	r22, Y+19	; 0x13
     364:	7c 89       	ldd	r23, Y+20	; 0x14
     366:	8d 89       	ldd	r24, Y+21	; 0x15
     368:	9e 89       	ldd	r25, Y+22	; 0x16
     36a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	98 8f       	std	Y+24, r25	; 0x18
     374:	8f 8b       	std	Y+23, r24	; 0x17
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	9c 8f       	std	Y+28, r25	; 0x1c
     37c:	8b 8f       	std	Y+27, r24	; 0x1b
     37e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     380:	9c 8d       	ldd	r25, Y+28	; 0x1c
     382:	8c 01       	movw	r16, r24
     384:	f8 01       	movw	r30, r16
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_set_4bit+0x250>
     38a:	8f 01       	movw	r16, r30
     38c:	1c 8f       	std	Y+28, r17	; 0x1c
     38e:	0b 8f       	std	Y+27, r16	; 0x1b

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     390:	88 e2       	ldi	r24, 0x28	; 40
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	28 e2       	ldi	r18, 0x28	; 40
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2b 7f       	andi	r18, 0xFB	; 251
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e8       	ldi	r26, 0x80	; 128
     3a8:	bf e3       	ldi	r27, 0x3F	; 63
     3aa:	8d 8f       	std	Y+29, r24	; 0x1d
     3ac:	9e 8f       	std	Y+30, r25	; 0x1e
     3ae:	af 8f       	std	Y+31, r26	; 0x1f
     3b0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3b4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b8:	98 a1       	lds	r25, 0x48
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	46 e6       	ldi	r20, 0x66	; 102
     3c0:	55 e4       	ldi	r21, 0x45	; 69
     3c2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	89 a3       	lds	r24, 0x59
     3cc:	9a a3       	lds	r25, 0x5a
     3ce:	ab a3       	lds	r26, 0x5b
     3d0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 a1       	lds	r22, 0x49
     3d6:	7a a1       	lds	r23, 0x4a
     3d8:	8b a1       	lds	r24, 0x4b
     3da:	9c a1       	lds	r25, 0x4c
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5f e3       	ldi	r21, 0x3F	; 63
     3e4:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <lcd_set_4bit+0x2b8>
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	11 23       	and	r17, r17
     3f0:	29 f0       	breq	.+10     	; 0x3fc <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9e a3       	lds	r25, 0x5e
     3f8:	8d a3       	lds	r24, 0x5d
     3fa:	46 c0       	rjmp	.+140    	; 0x488 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3fc:	11 e0       	ldi	r17, 0x01	; 1
     3fe:	69 a1       	lds	r22, 0x49
     400:	7a a1       	lds	r23, 0x4a
     402:	8b a1       	lds	r24, 0x4b
     404:	9c a1       	lds	r25, 0x4c
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	0c f0       	brlt	.+2      	; 0x418 <lcd_set_4bit+0x2e2>
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	11 23       	and	r17, r17
     41a:	61 f1       	breq	.+88     	; 0x474 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     41e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     420:	8f 8d       	ldd	r24, Y+31	; 0x1f
     422:	98 a1       	lds	r25, 0x48
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e2       	ldi	r20, 0x20	; 32
     42a:	51 e4       	ldi	r21, 0x41	; 65
     42c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	9e a3       	lds	r25, 0x5e
     442:	8d a3       	lds	r24, 0x5d
     444:	12 c0       	rjmp	.+36     	; 0x46a <lcd_set_4bit+0x334>
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 a7       	lds	r25, 0x78
     44c:	8f a3       	lds	r24, 0x5f
     44e:	8f a1       	lds	r24, 0x4f
     450:	98 a5       	lds	r25, 0x68
     452:	8c 01       	movw	r16, r24
     454:	c8 01       	movw	r24, r16
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_set_4bit+0x320>
     45a:	8c 01       	movw	r16, r24
     45c:	18 a7       	lds	r17, 0x78
     45e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	8d a1       	lds	r24, 0x4d
     462:	9e a1       	lds	r25, 0x4e
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	9e a3       	lds	r25, 0x5e
     468:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	8d a1       	lds	r24, 0x4d
     46c:	9e a1       	lds	r25, 0x4e
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	51 f7       	brne	.-44     	; 0x446 <lcd_set_4bit+0x310>
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     474:	69 a1       	lds	r22, 0x49
     476:	7a a1       	lds	r23, 0x4a
     478:	8b a1       	lds	r24, 0x4b
     47a:	9c a1       	lds	r25, 0x4c
     47c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9e a3       	lds	r25, 0x5e
     486:	8d a3       	lds	r24, 0x5d
     488:	8d a1       	lds	r24, 0x4d
     48a:	9e a1       	lds	r25, 0x4e
     48c:	9a a7       	lds	r25, 0x7a
     48e:	89 a7       	lds	r24, 0x79
     490:	89 a5       	lds	r24, 0x69
     492:	9a a5       	lds	r25, 0x6a
     494:	8c 01       	movw	r16, r24
     496:	f8 01       	movw	r30, r16
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_set_4bit+0x362>
     49c:	8f 01       	movw	r16, r30
     49e:	1a a7       	lds	r17, 0x7a
     4a0:	09 a7       	lds	r16, 0x79

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	28 e2       	ldi	r18, 0x28	; 40
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2e 7f       	andi	r18, 0xFE	; 254
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4b4:	88 e2       	ldi	r24, 0x28	; 40
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 e2       	ldi	r18, 0x28	; 40
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2d 7f       	andi	r18, 0xFD	; 253
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	20 e3       	ldi	r18, 0x30	; 48
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     4d0:	88 e2       	ldi	r24, 0x28	; 40
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 e2       	ldi	r18, 0x28	; 40
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	24 60       	ori	r18, 0x04	; 4
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 ea       	ldi	r26, 0xA0	; 160
     4e8:	b0 e4       	ldi	r27, 0x40	; 64
     4ea:	8b a7       	lds	r24, 0x7b
     4ec:	9c a7       	lds	r25, 0x7c
     4ee:	ad a7       	lds	r26, 0x7d
     4f0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f2:	6b a5       	lds	r22, 0x6b
     4f4:	7c a5       	lds	r23, 0x6c
     4f6:	8d a5       	lds	r24, 0x6d
     4f8:	9e a5       	lds	r25, 0x6e
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 e6       	ldi	r20, 0x66	; 102
     500:	55 e4       	ldi	r21, 0x45	; 69
     502:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	8f a7       	lds	r24, 0x7f
     50c:	98 ab       	sts	0x58, r25
     50e:	a9 ab       	sts	0x59, r26
     510:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     512:	11 e0       	ldi	r17, 0x01	; 1
     514:	6f a5       	lds	r22, 0x6f
     516:	78 a9       	sts	0x48, r23
     518:	89 a9       	sts	0x49, r24
     51a:	9a a9       	sts	0x4a, r25
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	0c f0       	brlt	.+2      	; 0x52e <lcd_set_4bit+0x3f8>
     52c:	10 e0       	ldi	r17, 0x00	; 0
     52e:	11 23       	and	r17, r17
     530:	29 f0       	breq	.+10     	; 0x53c <lcd_set_4bit+0x406>
		__ticks = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9c ab       	sts	0x5c, r25
     538:	8b ab       	sts	0x5b, r24
     53a:	46 c0       	rjmp	.+140    	; 0x5c8 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	6f a5       	lds	r22, 0x6f
     540:	78 a9       	sts	0x48, r23
     542:	89 a9       	sts	0x49, r24
     544:	9a a9       	sts	0x4a, r25
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	3f ef       	ldi	r19, 0xFF	; 255
     54a:	4f e7       	ldi	r20, 0x7F	; 127
     54c:	57 e4       	ldi	r21, 0x47	; 71
     54e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <lcd_set_4bit+0x422>
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	11 23       	and	r17, r17
     55a:	61 f1       	breq	.+88     	; 0x5b4 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	6b a5       	lds	r22, 0x6b
     55e:	7c a5       	lds	r23, 0x6c
     560:	8d a5       	lds	r24, 0x6d
     562:	9e a5       	lds	r25, 0x6e
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c ab       	sts	0x5c, r25
     582:	8b ab       	sts	0x5b, r24
     584:	12 c0       	rjmp	.+36     	; 0x5aa <lcd_set_4bit+0x474>
     586:	80 e7       	ldi	r24, 0x70	; 112
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9e ab       	sts	0x5e, r25
     58c:	8d ab       	sts	0x5d, r24
     58e:	8d a9       	sts	0x4d, r24
     590:	9e a9       	sts	0x4e, r25
     592:	8c 01       	movw	r16, r24
     594:	c8 01       	movw	r24, r16
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_set_4bit+0x460>
     59a:	8c 01       	movw	r16, r24
     59c:	1e ab       	sts	0x5e, r17
     59e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	8b a9       	sts	0x4b, r24
     5a2:	9c a9       	sts	0x4c, r25
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9c ab       	sts	0x5c, r25
     5a8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	8b a9       	sts	0x4b, r24
     5ac:	9c a9       	sts	0x4c, r25
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	51 f7       	brne	.-44     	; 0x586 <lcd_set_4bit+0x450>
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6f a5       	lds	r22, 0x6f
     5b6:	78 a9       	sts	0x48, r23
     5b8:	89 a9       	sts	0x49, r24
     5ba:	9a a9       	sts	0x4a, r25
     5bc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9c ab       	sts	0x5c, r25
     5c6:	8b ab       	sts	0x5b, r24
     5c8:	8b a9       	sts	0x4b, r24
     5ca:	9c a9       	sts	0x4c, r25
     5cc:	98 af       	sts	0x78, r25
     5ce:	8f ab       	sts	0x5f, r24
     5d0:	8f a9       	sts	0x4f, r24
     5d2:	98 ad       	sts	0x68, r25
     5d4:	8c 01       	movw	r16, r24
     5d6:	f8 01       	movw	r30, r16
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_set_4bit+0x4a2>
     5dc:	8f 01       	movw	r16, r30
     5de:	18 af       	sts	0x78, r17
     5e0:	0f ab       	sts	0x5f, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	28 e2       	ldi	r18, 0x28	; 40
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	2b 7f       	andi	r18, 0xFB	; 251
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e8       	ldi	r26, 0x80	; 128
     5fa:	bf e3       	ldi	r27, 0x3F	; 63
     5fc:	89 af       	sts	0x79, r24
     5fe:	9a af       	sts	0x7a, r25
     600:	ab af       	sts	0x7b, r26
     602:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     604:	69 ad       	sts	0x69, r22
     606:	7a ad       	sts	0x6a, r23
     608:	8b ad       	sts	0x6b, r24
     60a:	9c ad       	sts	0x6c, r25
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e6       	ldi	r20, 0x66	; 102
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	9e 01       	movw	r18, r28
     61e:	23 5c       	subi	r18, 0xC3	; 195
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	cd 96       	adiw	r24, 0x3d	; 61
     632:	fc 01       	movw	r30, r24
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <lcd_set_4bit+0x518>
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 23       	and	r17, r17
     650:	49 f0       	breq	.+18     	; 0x664 <lcd_set_4bit+0x52e>
		__ticks = 1;
     652:	ce 01       	movw	r24, r28
     654:	8f 5b       	subi	r24, 0xBF	; 191
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	31 83       	std	Z+1, r19	; 0x01
     660:	20 83       	st	Z, r18
     662:	6e c0       	rjmp	.+220    	; 0x740 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     664:	11 e0       	ldi	r17, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	cd 96       	adiw	r24, 0x3d	; 61
     66a:	fc 01       	movw	r30, r24
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <lcd_set_4bit+0x550>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	11 23       	and	r17, r17
     688:	09 f4       	brne	.+2      	; 0x68c <lcd_set_4bit+0x556>
     68a:	49 c0       	rjmp	.+146    	; 0x71e <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	69 ad       	sts	0x69, r22
     68e:	7a ad       	sts	0x6a, r23
     690:	8b ad       	sts	0x6b, r24
     692:	9c ad       	sts	0x6c, r25
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e2       	ldi	r20, 0x20	; 32
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	8e 01       	movw	r16, r28
     6a6:	0f 5b       	subi	r16, 0xBF	; 191
     6a8:	1f 4f       	sbci	r17, 0xFF	; 255
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	f8 01       	movw	r30, r16
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	27 c0       	rjmp	.+78     	; 0x70c <lcd_set_4bit+0x5d6>
     6be:	ce 01       	movw	r24, r28
     6c0:	8d 5b       	subi	r24, 0xBD	; 189
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	20 e7       	ldi	r18, 0x70	; 112
     6c6:	31 e0       	ldi	r19, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
     6ce:	ce 01       	movw	r24, r28
     6d0:	8d 5b       	subi	r24, 0xBD	; 189
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	8c 01       	movw	r16, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_set_4bit+0x5a8>
     6e2:	8c 01       	movw	r16, r24
     6e4:	ce 01       	movw	r24, r28
     6e6:	8d 5b       	subi	r24, 0xBD	; 189
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	fc 01       	movw	r30, r24
     6ec:	11 83       	std	Z+1, r17	; 0x01
     6ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	ce 01       	movw	r24, r28
     6f2:	8f 5b       	subi	r24, 0xBF	; 191
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	9e 01       	movw	r18, r28
     6f8:	2f 5b       	subi	r18, 0xBF	; 191
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	31 81       	ldd	r19, Z+1	; 0x01
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	ce 01       	movw	r24, r28
     70e:	8f 5b       	subi	r24, 0xBF	; 191
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	89 f6       	brne	.-94     	; 0x6be <lcd_set_4bit+0x588>
     71c:	2e c0       	rjmp	.+92     	; 0x77a <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71e:	8e 01       	movw	r16, r28
     720:	0f 5b       	subi	r16, 0xBF	; 191
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	ce 01       	movw	r24, r28
     726:	cd 96       	adiw	r24, 0x3d	; 61
     728:	fc 01       	movw	r30, r24
     72a:	60 81       	ld	r22, Z
     72c:	71 81       	ldd	r23, Z+1	; 0x01
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	f8 01       	movw	r30, r16
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	ce 01       	movw	r24, r28
     742:	8b 5b       	subi	r24, 0xBB	; 187
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	9e 01       	movw	r18, r28
     748:	2f 5b       	subi	r18, 0xBF	; 191
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	fc 01       	movw	r30, r24
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	20 83       	st	Z, r18
     758:	ce 01       	movw	r24, r28
     75a:	8b 5b       	subi	r24, 0xBB	; 187
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	8c 01       	movw	r16, r24
     766:	c8 01       	movw	r24, r16
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <lcd_set_4bit+0x632>
     76c:	8c 01       	movw	r16, r24
     76e:	ce 01       	movw	r24, r28
     770:	8b 5b       	subi	r24, 0xBB	; 187
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	fc 01       	movw	r30, r24
     776:	11 83       	std	Z+1, r17	; 0x01
     778:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	28 e2       	ldi	r18, 0x28	; 40
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2e 7f       	andi	r18, 0xFE	; 254
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     78c:	88 e2       	ldi	r24, 0x28	; 40
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	28 e2       	ldi	r18, 0x28	; 40
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2d 7f       	andi	r18, 0xFD	; 253
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	20 e3       	ldi	r18, 0x30	; 48
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 e2       	ldi	r18, 0x28	; 40
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	24 60       	ori	r18, 0x04	; 4
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	9e 01       	movw	r18, r28
     7bc:	29 5b       	subi	r18, 0xB9	; 185
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 ea       	ldi	r26, 0xA0	; 160
     7c6:	b0 e4       	ldi	r27, 0x40	; 64
     7c8:	f9 01       	movw	r30, r18
     7ca:	80 83       	st	Z, r24
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	a2 83       	std	Z+2, r26	; 0x02
     7d0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	8e 01       	movw	r16, r28
     7d4:	05 5b       	subi	r16, 0xB5	; 181
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	60 81       	ld	r22, Z
     7e2:	71 81       	ldd	r23, Z+1	; 0x01
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	93 81       	ldd	r25, Z+3	; 0x03
     7e8:	26 e6       	ldi	r18, 0x66	; 102
     7ea:	36 e6       	ldi	r19, 0x66	; 102
     7ec:	46 e6       	ldi	r20, 0x66	; 102
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     802:	ce 01       	movw	r24, r28
     804:	85 5b       	subi	r24, 0xB5	; 181
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <lcd_set_4bit+0x6f0>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	11 23       	and	r17, r17
     828:	49 f0       	breq	.+18     	; 0x83c <lcd_set_4bit+0x706>
		__ticks = 1;
     82a:	ce 01       	movw	r24, r28
     82c:	81 5b       	subi	r24, 0xB1	; 177
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	74 c0       	rjmp	.+232    	; 0x924 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     83c:	ce 01       	movw	r24, r28
     83e:	85 5b       	subi	r24, 0xB5	; 181
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <lcd_set_4bit+0x72a>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	11 23       	and	r17, r17
     862:	09 f4       	brne	.+2      	; 0x866 <lcd_set_4bit+0x730>
     864:	4d c0       	rjmp	.+154    	; 0x900 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	ce 01       	movw	r24, r28
     868:	89 5b       	subi	r24, 0xB9	; 185
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	fc 01       	movw	r30, r24
     86e:	60 81       	ld	r22, Z
     870:	71 81       	ldd	r23, Z+1	; 0x01
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	93 81       	ldd	r25, Z+3	; 0x03
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8e 01       	movw	r16, r28
     888:	01 5b       	subi	r16, 0xB1	; 177
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	f8 01       	movw	r30, r16
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
     89e:	27 c0       	rjmp	.+78     	; 0x8ee <lcd_set_4bit+0x7b8>
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 5a       	subi	r24, 0xAF	; 175
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	20 e7       	ldi	r18, 0x70	; 112
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	ce 01       	movw	r24, r28
     8b2:	8f 5a       	subi	r24, 0xAF	; 175
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	8c 01       	movw	r16, r24
     8be:	c8 01       	movw	r24, r16
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_set_4bit+0x78a>
     8c4:	8c 01       	movw	r16, r24
     8c6:	ce 01       	movw	r24, r28
     8c8:	8f 5a       	subi	r24, 0xAF	; 175
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 83       	std	Z+1, r17	; 0x01
     8d0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	ce 01       	movw	r24, r28
     8d4:	81 5b       	subi	r24, 0xB1	; 177
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	9e 01       	movw	r18, r28
     8da:	21 5b       	subi	r18, 0xB1	; 177
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	30 40       	sbci	r19, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	ce 01       	movw	r24, r28
     8f0:	81 5b       	subi	r24, 0xB1	; 177
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	89 f6       	brne	.-94     	; 0x8a0 <lcd_set_4bit+0x76a>
     8fe:	2f c0       	rjmp	.+94     	; 0x95e <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     900:	8e 01       	movw	r16, r28
     902:	01 5b       	subi	r16, 0xB1	; 177
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	ce 01       	movw	r24, r28
     908:	85 5b       	subi	r24, 0xB5	; 181
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	ce 01       	movw	r24, r28
     926:	8d 5a       	subi	r24, 0xAD	; 173
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	9e 01       	movw	r18, r28
     92c:	21 5b       	subi	r18, 0xB1	; 177
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	20 83       	st	Z, r18
     93c:	ce 01       	movw	r24, r28
     93e:	8d 5a       	subi	r24, 0xAD	; 173
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	8c 01       	movw	r16, r24
     94a:	c8 01       	movw	r24, r16
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <lcd_set_4bit+0x816>
     950:	8c 01       	movw	r16, r24
     952:	ce 01       	movw	r24, r28
     954:	8d 5a       	subi	r24, 0xAD	; 173
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	fc 01       	movw	r30, r24
     95a:	11 83       	std	Z+1, r17	; 0x01
     95c:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 e2       	ldi	r18, 0x28	; 40
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2b 7f       	andi	r18, 0xFB	; 251
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	9e 01       	movw	r18, r28
     972:	2b 5a       	subi	r18, 0xAB	; 171
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e8       	ldi	r26, 0x80	; 128
     97c:	bf e3       	ldi	r27, 0x3F	; 63
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     988:	8e 01       	movw	r16, r28
     98a:	07 5a       	subi	r16, 0xA7	; 167
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	ce 01       	movw	r24, r28
     990:	8b 5a       	subi	r24, 0xAB	; 171
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 e6       	ldi	r20, 0x66	; 102
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	87 5a       	subi	r24, 0xA7	; 167
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	fc 01       	movw	r30, r24
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <lcd_set_4bit+0x8a6>
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	11 23       	and	r17, r17
     9de:	49 f0       	breq	.+18     	; 0x9f2 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9e0:	ce 01       	movw	r24, r28
     9e2:	83 5a       	subi	r24, 0xA3	; 163
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	74 c0       	rjmp	.+232    	; 0xada <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9f2:	ce 01       	movw	r24, r28
     9f4:	87 5a       	subi	r24, 0xA7	; 167
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	11 e0       	ldi	r17, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     a10:	18 16       	cp	r1, r24
     a12:	0c f0       	brlt	.+2      	; 0xa16 <lcd_set_4bit+0x8e0>
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	11 23       	and	r17, r17
     a18:	09 f4       	brne	.+2      	; 0xa1c <lcd_set_4bit+0x8e6>
     a1a:	4d c0       	rjmp	.+154    	; 0xab6 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1c:	ce 01       	movw	r24, r28
     a1e:	8b 5a       	subi	r24, 0xAB	; 171
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	8e 01       	movw	r16, r28
     a3e:	03 5a       	subi	r16, 0xA3	; 163
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	f8 01       	movw	r30, r16
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <lcd_set_4bit+0x96e>
     a56:	ce 01       	movw	r24, r28
     a58:	81 5a       	subi	r24, 0xA1	; 161
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	20 e7       	ldi	r18, 0x70	; 112
     a5e:	31 e0       	ldi	r19, 0x01	; 1
     a60:	fc 01       	movw	r30, r24
     a62:	31 83       	std	Z+1, r19	; 0x01
     a64:	20 83       	st	Z, r18
     a66:	ce 01       	movw	r24, r28
     a68:	81 5a       	subi	r24, 0xA1	; 161
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	8c 01       	movw	r16, r24
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <lcd_set_4bit+0x940>
     a7a:	8c 01       	movw	r16, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	81 5a       	subi	r24, 0xA1	; 161
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	11 83       	std	Z+1, r17	; 0x01
     a86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	ce 01       	movw	r24, r28
     a8a:	83 5a       	subi	r24, 0xA3	; 163
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9e 01       	movw	r18, r28
     a90:	23 5a       	subi	r18, 0xA3	; 163
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa4:	ce 01       	movw	r24, r28
     aa6:	83 5a       	subi	r24, 0xA3	; 163
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	89 f6       	brne	.-94     	; 0xa56 <lcd_set_4bit+0x920>
     ab4:	2f c0       	rjmp	.+94     	; 0xb14 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	8e 01       	movw	r16, r28
     ab8:	03 5a       	subi	r16, 0xA3	; 163
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	87 5a       	subi	r24, 0xA7	; 167
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	f8 01       	movw	r30, r16
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
     ada:	ce 01       	movw	r24, r28
     adc:	8f 59       	subi	r24, 0x9F	; 159
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	9e 01       	movw	r18, r28
     ae2:	23 5a       	subi	r18, 0xA3	; 163
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	31 83       	std	Z+1, r19	; 0x01
     af0:	20 83       	st	Z, r18
     af2:	ce 01       	movw	r24, r28
     af4:	8f 59       	subi	r24, 0x9F	; 159
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	8c 01       	movw	r16, r24
     b00:	c8 01       	movw	r24, r16
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <lcd_set_4bit+0x9cc>
     b06:	8c 01       	movw	r16, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	8f 59       	subi	r24, 0x9F	; 159
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	fc 01       	movw	r30, r24
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b14:	88 e2       	ldi	r24, 0x28	; 40
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	28 e2       	ldi	r18, 0x28	; 40
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	2e 7f       	andi	r18, 0xFE	; 254
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	28 e2       	ldi	r18, 0x28	; 40
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	2d 7f       	andi	r18, 0xFD	; 253
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18

	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b38:	88 e2       	ldi	r24, 0x28	; 40
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	20 e2       	ldi	r18, 0x20	; 32
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     b42:	88 e2       	ldi	r24, 0x28	; 40
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	28 e2       	ldi	r18, 0x28	; 40
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	24 60       	ori	r18, 0x04	; 4
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	9e 01       	movw	r18, r28
     b56:	2d 59       	subi	r18, 0x9D	; 157
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 ea       	ldi	r26, 0xA0	; 160
     b60:	b0 e4       	ldi	r27, 0x40	; 64
     b62:	f9 01       	movw	r30, r18
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	8e 01       	movw	r16, r28
     b6e:	09 59       	subi	r16, 0x99	; 153
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	ce 01       	movw	r24, r28
     b74:	8d 59       	subi	r24, 0x9D	; 157
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	fc 01       	movw	r30, r24
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	26 e6       	ldi	r18, 0x66	; 102
     b84:	36 e6       	ldi	r19, 0x66	; 102
     b86:	46 e6       	ldi	r20, 0x66	; 102
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	a2 83       	std	Z+2, r26	; 0x02
     b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	89 59       	subi	r24, 0x99	; 153
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     bba:	88 23       	and	r24, r24
     bbc:	0c f0       	brlt	.+2      	; 0xbc0 <lcd_set_4bit+0xa8a>
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	11 23       	and	r17, r17
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 59       	subi	r24, 0x95	; 149
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	74 c0       	rjmp	.+232    	; 0xcbe <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bd6:	ce 01       	movw	r24, r28
     bd8:	89 59       	subi	r24, 0x99	; 153
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	fc 01       	movw	r30, r24
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <lcd_set_4bit+0xac4>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	11 23       	and	r17, r17
     bfc:	09 f4       	brne	.+2      	; 0xc00 <lcd_set_4bit+0xaca>
     bfe:	4d c0       	rjmp	.+154    	; 0xc9a <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	ce 01       	movw	r24, r28
     c02:	8d 59       	subi	r24, 0x9D	; 157
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8e 01       	movw	r16, r28
     c22:	05 59       	subi	r16, 0x95	; 149
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	27 c0       	rjmp	.+78     	; 0xc88 <lcd_set_4bit+0xb52>
     c3a:	ce 01       	movw	r24, r28
     c3c:	83 59       	subi	r24, 0x93	; 147
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	31 83       	std	Z+1, r19	; 0x01
     c48:	20 83       	st	Z, r18
     c4a:	ce 01       	movw	r24, r28
     c4c:	83 59       	subi	r24, 0x93	; 147
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	8c 01       	movw	r16, r24
     c58:	c8 01       	movw	r24, r16
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_set_4bit+0xb24>
     c5e:	8c 01       	movw	r16, r24
     c60:	ce 01       	movw	r24, r28
     c62:	83 59       	subi	r24, 0x93	; 147
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	fc 01       	movw	r30, r24
     c68:	11 83       	std	Z+1, r17	; 0x01
     c6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	ce 01       	movw	r24, r28
     c6e:	85 59       	subi	r24, 0x95	; 149
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	9e 01       	movw	r18, r28
     c74:	25 59       	subi	r18, 0x95	; 149
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	ce 01       	movw	r24, r28
     c8a:	85 59       	subi	r24, 0x95	; 149
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	89 f6       	brne	.-94     	; 0xc3a <lcd_set_4bit+0xb04>
     c98:	2f c0       	rjmp	.+94     	; 0xcf8 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	8e 01       	movw	r16, r28
     c9c:	05 59       	subi	r16, 0x95	; 149
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	89 59       	subi	r24, 0x99	; 153
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	ce 01       	movw	r24, r28
     cc0:	81 59       	subi	r24, 0x91	; 145
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	9e 01       	movw	r18, r28
     cc6:	25 59       	subi	r18, 0x95	; 149
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 83       	std	Z+1, r19	; 0x01
     cd4:	20 83       	st	Z, r18
     cd6:	ce 01       	movw	r24, r28
     cd8:	81 59       	subi	r24, 0x91	; 145
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	8c 01       	movw	r16, r24
     ce4:	c8 01       	movw	r24, r16
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <lcd_set_4bit+0xbb0>
     cea:	8c 01       	movw	r16, r24
     cec:	ce 01       	movw	r24, r28
     cee:	81 59       	subi	r24, 0x91	; 145
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	fc 01       	movw	r30, r24
     cf4:	11 83       	std	Z+1, r17	; 0x01
     cf6:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	28 e2       	ldi	r18, 0x28	; 40
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	2b 7f       	andi	r18, 0xFB	; 251
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18



	

}
     d0a:	c0 59       	subi	r28, 0x90	; 144
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <lcd_init>:

/*****Function to Initialize LCD*****/

void lcd_init()

{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	2e 97       	sbiw	r28, 0x0e	; 14
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e8       	ldi	r26, 0x80	; 128
     d40:	bf e3       	ldi	r27, 0x3F	; 63
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	26 e6       	ldi	r18, 0x66	; 102
     d54:	36 e6       	ldi	r19, 0x66	; 102
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	af 83       	std	Y+7, r26	; 0x07
     d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d6a:	11 e0       	ldi	r17, 0x01	; 1
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	0c f0       	brlt	.+2      	; 0xd86 <lcd_init+0x64>
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	11 23       	and	r17, r17
     d88:	29 f0       	breq	.+10     	; 0xd94 <lcd_init+0x72>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	89 87       	std	Y+9, r24	; 0x09
     d92:	46 c0       	rjmp	.+140    	; 0xe20 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d94:	11 e0       	ldi	r17, 0x01	; 1
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     daa:	18 16       	cp	r1, r24
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <lcd_init+0x8e>
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	11 23       	and	r17, r17
     db2:	61 f1       	breq	.+88     	; 0xe0c <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	7a 81       	ldd	r23, Y+2	; 0x02
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9a 87       	std	Y+10, r25	; 0x0a
     dda:	89 87       	std	Y+9, r24	; 0x09
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <lcd_init+0xe0>
     dde:	80 e7       	ldi	r24, 0x70	; 112
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	8b 85       	ldd	r24, Y+11	; 0x0b
     de8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dea:	8c 01       	movw	r16, r24
     dec:	c8 01       	movw	r24, r16
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <lcd_init+0xcc>
     df2:	8c 01       	movw	r16, r24
     df4:	1c 87       	std	Y+12, r17	; 0x0c
     df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9a 87       	std	Y+10, r25	; 0x0a
     e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	51 f7       	brne	.-44     	; 0xdde <lcd_init+0xbc>
     e0a:	17 c0       	rjmp	.+46     	; 0xe3a <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a 87       	std	Y+10, r25	; 0x0a
     e1e:	89 87       	std	Y+9, r24	; 0x09
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	9e 87       	std	Y+14, r25	; 0x0e
     e26:	8d 87       	std	Y+13, r24	; 0x0d
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	8c 01       	movw	r16, r24
     e2e:	c8 01       	movw	r24, r16
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <lcd_init+0x10e>
     e34:	8c 01       	movw	r16, r24
     e36:	1e 87       	std	Y+14, r17	; 0x0e
     e38:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x01);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x06);
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x0E);
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x80);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	

}
     e58:	2e 96       	adiw	r28, 0x0e	; 14
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <lcd_wr_command>:

/*****Function to Write Command on LCD*****/

void lcd_wr_command(unsigned char cmd)

{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	6e 97       	sbiw	r28, 0x1e	; 30
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8e 8f       	std	Y+30, r24	; 0x1e

	unsigned char temp;

	temp = cmd;
     e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8a:	89 83       	std	Y+1, r24	; 0x01

	temp = temp & 0xF0;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 7f       	andi	r24, 0xF0	; 240
     e90:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
     e92:	88 e2       	ldi	r24, 0x28	; 40
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 e2       	ldi	r18, 0x28	; 40
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 70       	andi	r18, 0x0F	; 15
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18

	lcd_port |= temp;
     ea4:	88 e2       	ldi	r24, 0x28	; 40
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 e2       	ldi	r18, 0x28	; 40
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	f9 01       	movw	r30, r18
     eae:	30 81       	ld	r19, Z
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	23 2b       	or	r18, r19
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
     eb8:	88 e2       	ldi	r24, 0x28	; 40
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	28 e2       	ldi	r18, 0x28	; 40
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	2e 7f       	andi	r18, 0xFE	; 254
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 e2       	ldi	r18, 0x28	; 40
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	2d 7f       	andi	r18, 0xFD	; 253
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	28 e2       	ldi	r18, 0x28	; 40
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	24 60       	ori	r18, 0x04	; 4
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 ea       	ldi	r26, 0xA0	; 160
     ef4:	b0 e4       	ldi	r27, 0x40	; 64
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	ac 83       	std	Y+4, r26	; 0x04
     efc:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6a 81       	ldd	r22, Y+2	; 0x02
     f00:	7b 81       	ldd	r23, Y+3	; 0x03
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	26 e6       	ldi	r18, 0x66	; 102
     f08:	36 e6       	ldi	r19, 0x66	; 102
     f0a:	46 e6       	ldi	r20, 0x66	; 102
     f0c:	55 e4       	ldi	r21, 0x45	; 69
     f0e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	a8 87       	std	Y+8, r26	; 0x08
     f1c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	6e 81       	ldd	r22, Y+6	; 0x06
     f22:	7f 81       	ldd	r23, Y+7	; 0x07
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
     f34:	88 23       	and	r24, r24
     f36:	0c f0       	brlt	.+2      	; 0xf3a <lcd_wr_command+0xcc>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	11 23       	and	r17, r17
     f3c:	29 f0       	breq	.+10     	; 0xf48 <lcd_wr_command+0xda>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9b 87       	std	Y+11, r25	; 0x0b
     f44:	8a 87       	std	Y+10, r24	; 0x0a
     f46:	46 c0       	rjmp	.+140    	; 0xfd4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	6e 81       	ldd	r22, Y+6	; 0x06
     f4c:	7f 81       	ldd	r23, Y+7	; 0x07
     f4e:	88 85       	ldd	r24, Y+8	; 0x08
     f50:	99 85       	ldd	r25, Y+9	; 0x09
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	0c f0       	brlt	.+2      	; 0xf64 <lcd_wr_command+0xf6>
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	11 23       	and	r17, r17
     f66:	61 f1       	breq	.+88     	; 0xfc0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6a 81       	ldd	r22, Y+2	; 0x02
     f6a:	7b 81       	ldd	r23, Y+3	; 0x03
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9b 87       	std	Y+11, r25	; 0x0b
     f8e:	8a 87       	std	Y+10, r24	; 0x0a
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <lcd_wr_command+0x148>
     f92:	80 e7       	ldi	r24, 0x70	; 112
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	9d 87       	std	Y+13, r25	; 0x0d
     f98:	8c 87       	std	Y+12, r24	; 0x0c
     f9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9e:	8c 01       	movw	r16, r24
     fa0:	c8 01       	movw	r24, r16
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <lcd_wr_command+0x134>
     fa6:	8c 01       	movw	r16, r24
     fa8:	1d 87       	std	Y+13, r17	; 0x0d
     faa:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
     fb4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	51 f7       	brne	.-44     	; 0xf92 <lcd_wr_command+0x124>
     fbe:	17 c0       	rjmp	.+46     	; 0xfee <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6e 81       	ldd	r22, Y+6	; 0x06
     fc2:	7f 81       	ldd	r23, Y+7	; 0x07
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9b 87       	std	Y+11, r25	; 0x0b
     fd2:	8a 87       	std	Y+10, r24	; 0x0a
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd8:	9f 87       	std	Y+15, r25	; 0x0f
     fda:	8e 87       	std	Y+14, r24	; 0x0e
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	8c 01       	movw	r16, r24
     fe2:	f8 01       	movw	r30, r16
     fe4:	31 97       	sbiw	r30, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_wr_command+0x176>
     fe8:	8f 01       	movw	r16, r30
     fea:	1f 87       	std	Y+15, r17	; 0x0f
     fec:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
     fee:	88 e2       	ldi	r24, 0x28	; 40
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e2       	ldi	r18, 0x28	; 40
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	2b 7f       	andi	r18, 0xFB	; 251
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18

	

	cmd = cmd & 0x0F;
    1000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	8e 8f       	std	Y+30, r24	; 0x1e

	cmd = cmd<<4;
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	82 95       	swap	r24
    100a:	80 7f       	andi	r24, 0xF0	; 240
    100c:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	28 e2       	ldi	r18, 0x28	; 40
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	2f 70       	andi	r18, 0x0F	; 15
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18

	lcd_port |= cmd;
    1020:	88 e2       	ldi	r24, 0x28	; 40
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 e2       	ldi	r18, 0x28	; 40
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f9 01       	movw	r30, r18
    102a:	30 81       	ld	r19, Z
    102c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    102e:	23 2b       	or	r18, r19
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
    1034:	88 e2       	ldi	r24, 0x28	; 40
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	28 e2       	ldi	r18, 0x28	; 40
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2e 7f       	andi	r18, 0xFE	; 254
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	28 e2       	ldi	r18, 0x28	; 40
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	2d 7f       	andi	r18, 0xFD	; 253
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1058:	88 e2       	ldi	r24, 0x28	; 40
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 e2       	ldi	r18, 0x28	; 40
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 ea       	ldi	r26, 0xA0	; 160
    1070:	b0 e4       	ldi	r27, 0x40	; 64
    1072:	88 8b       	std	Y+16, r24	; 0x10
    1074:	99 8b       	std	Y+17, r25	; 0x11
    1076:	aa 8b       	std	Y+18, r26	; 0x12
    1078:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    107a:	68 89       	ldd	r22, Y+16	; 0x10
    107c:	79 89       	ldd	r23, Y+17	; 0x11
    107e:	8a 89       	ldd	r24, Y+18	; 0x12
    1080:	9b 89       	ldd	r25, Y+19	; 0x13
    1082:	26 e6       	ldi	r18, 0x66	; 102
    1084:	36 e6       	ldi	r19, 0x66	; 102
    1086:	46 e6       	ldi	r20, 0x66	; 102
    1088:	55 e4       	ldi	r21, 0x45	; 69
    108a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8c 8b       	std	Y+20, r24	; 0x14
    1094:	9d 8b       	std	Y+21, r25	; 0x15
    1096:	ae 8b       	std	Y+22, r26	; 0x16
    1098:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    109a:	11 e0       	ldi	r17, 0x01	; 1
    109c:	6c 89       	ldd	r22, Y+20	; 0x14
    109e:	7d 89       	ldd	r23, Y+21	; 0x15
    10a0:	8e 89       	ldd	r24, Y+22	; 0x16
    10a2:	9f 89       	ldd	r25, Y+23	; 0x17
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <lcd_wr_command+0x248>
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	11 23       	and	r17, r17
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <lcd_wr_command+0x256>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	99 8f       	std	Y+25, r25	; 0x19
    10c0:	88 8f       	std	Y+24, r24	; 0x18
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	6c 89       	ldd	r22, Y+20	; 0x14
    10c8:	7d 89       	ldd	r23, Y+21	; 0x15
    10ca:	8e 89       	ldd	r24, Y+22	; 0x16
    10cc:	9f 89       	ldd	r25, Y+23	; 0x17
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	0c f0       	brlt	.+2      	; 0x10e0 <lcd_wr_command+0x272>
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	11 23       	and	r17, r17
    10e2:	61 f1       	breq	.+88     	; 0x113c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	68 89       	ldd	r22, Y+16	; 0x10
    10e6:	79 89       	ldd	r23, Y+17	; 0x11
    10e8:	8a 89       	ldd	r24, Y+18	; 0x12
    10ea:	9b 89       	ldd	r25, Y+19	; 0x13
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	99 8f       	std	Y+25, r25	; 0x19
    110a:	88 8f       	std	Y+24, r24	; 0x18
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <lcd_wr_command+0x2c4>
    110e:	80 e7       	ldi	r24, 0x70	; 112
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9b 8f       	std	Y+27, r25	; 0x1b
    1114:	8a 8f       	std	Y+26, r24	; 0x1a
    1116:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    111a:	8c 01       	movw	r16, r24
    111c:	c8 01       	movw	r24, r16
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <lcd_wr_command+0x2b0>
    1122:	8c 01       	movw	r16, r24
    1124:	1b 8f       	std	Y+27, r17	; 0x1b
    1126:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	88 8d       	ldd	r24, Y+24	; 0x18
    112a:	99 8d       	ldd	r25, Y+25	; 0x19
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	99 8f       	std	Y+25, r25	; 0x19
    1130:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	88 8d       	ldd	r24, Y+24	; 0x18
    1134:	99 8d       	ldd	r25, Y+25	; 0x19
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	51 f7       	brne	.-44     	; 0x110e <lcd_wr_command+0x2a0>
    113a:	17 c0       	rjmp	.+46     	; 0x116a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6c 89       	ldd	r22, Y+20	; 0x14
    113e:	7d 89       	ldd	r23, Y+21	; 0x15
    1140:	8e 89       	ldd	r24, Y+22	; 0x16
    1142:	9f 89       	ldd	r25, Y+23	; 0x17
    1144:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	99 8f       	std	Y+25, r25	; 0x19
    114e:	88 8f       	std	Y+24, r24	; 0x18
    1150:	88 8d       	ldd	r24, Y+24	; 0x18
    1152:	99 8d       	ldd	r25, Y+25	; 0x19
    1154:	9d 8f       	std	Y+29, r25	; 0x1d
    1156:	8c 8f       	std	Y+28, r24	; 0x1c
    1158:	8c 8d       	ldd	r24, Y+28	; 0x1c
    115a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    115c:	8c 01       	movw	r16, r24
    115e:	f8 01       	movw	r30, r16
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <lcd_wr_command+0x2f2>
    1164:	8f 01       	movw	r16, r30
    1166:	1d 8f       	std	Y+29, r17	; 0x1d
    1168:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    116a:	88 e2       	ldi	r24, 0x28	; 40
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	28 e2       	ldi	r18, 0x28	; 40
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	2b 7f       	andi	r18, 0xFB	; 251
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18

}
    117c:	6e 96       	adiw	r28, 0x1e	; 30
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/

void lcd_wr_char(char letter)

{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	6e 97       	sbiw	r28, 0x1e	; 30
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8e 8f       	std	Y+30, r24	; 0x1e

	char temp;

	temp = letter;
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	89 83       	std	Y+1, r24	; 0x01

	temp = (temp & 0xF0);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
    11b6:	88 e2       	ldi	r24, 0x28	; 40
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	28 e2       	ldi	r18, 0x28	; 40
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	2f 70       	andi	r18, 0x0F	; 15
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18

	lcd_port |= temp;
    11c8:	88 e2       	ldi	r24, 0x28	; 40
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	28 e2       	ldi	r18, 0x28	; 40
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	30 81       	ld	r19, Z
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	23 2b       	or	r18, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    11dc:	88 e2       	ldi	r24, 0x28	; 40
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	28 e2       	ldi	r18, 0x28	; 40
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	21 60       	ori	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	28 e2       	ldi	r18, 0x28	; 40
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	2d 7f       	andi	r18, 0xFD	; 253
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1200:	88 e2       	ldi	r24, 0x28	; 40
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e2       	ldi	r18, 0x28	; 40
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	24 60       	ori	r18, 0x04	; 4
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 ea       	ldi	r26, 0xA0	; 160
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	ac 83       	std	Y+4, r26	; 0x04
    1220:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	7b 81       	ldd	r23, Y+3	; 0x03
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	26 e6       	ldi	r18, 0x66	; 102
    122c:	36 e6       	ldi	r19, 0x66	; 102
    122e:	46 e6       	ldi	r20, 0x66	; 102
    1230:	55 e4       	ldi	r21, 0x45	; 69
    1232:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	a8 87       	std	Y+8, r26	; 0x08
    1240:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1242:	11 e0       	ldi	r17, 0x01	; 1
    1244:	6e 81       	ldd	r22, Y+6	; 0x06
    1246:	7f 81       	ldd	r23, Y+7	; 0x07
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	0c f0       	brlt	.+2      	; 0x125e <lcd_wr_char+0xcc>
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	11 23       	and	r17, r17
    1260:	29 f0       	breq	.+10     	; 0x126c <lcd_wr_char+0xda>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9b 87       	std	Y+11, r25	; 0x0b
    1268:	8a 87       	std	Y+10, r24	; 0x0a
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    126c:	11 e0       	ldi	r17, 0x01	; 1
    126e:	6e 81       	ldd	r22, Y+6	; 0x06
    1270:	7f 81       	ldd	r23, Y+7	; 0x07
    1272:	88 85       	ldd	r24, Y+8	; 0x08
    1274:	99 85       	ldd	r25, Y+9	; 0x09
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	0c f0       	brlt	.+2      	; 0x1288 <lcd_wr_char+0xf6>
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	11 23       	and	r17, r17
    128a:	61 f1       	breq	.+88     	; 0x12e4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6a 81       	ldd	r22, Y+2	; 0x02
    128e:	7b 81       	ldd	r23, Y+3	; 0x03
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9b 87       	std	Y+11, r25	; 0x0b
    12b2:	8a 87       	std	Y+10, r24	; 0x0a
    12b4:	12 c0       	rjmp	.+36     	; 0x12da <lcd_wr_char+0x148>
    12b6:	80 e7       	ldi	r24, 0x70	; 112
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9d 87       	std	Y+13, r25	; 0x0d
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c2:	8c 01       	movw	r16, r24
    12c4:	c8 01       	movw	r24, r16
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <lcd_wr_char+0x134>
    12ca:	8c 01       	movw	r16, r24
    12cc:	1d 87       	std	Y+13, r17	; 0x0d
    12ce:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9b 87       	std	Y+11, r25	; 0x0b
    12d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	51 f7       	brne	.-44     	; 0x12b6 <lcd_wr_char+0x124>
    12e2:	17 c0       	rjmp	.+46     	; 0x1312 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6e 81       	ldd	r22, Y+6	; 0x06
    12e6:	7f 81       	ldd	r23, Y+7	; 0x07
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9b 87       	std	Y+11, r25	; 0x0b
    12f6:	8a 87       	std	Y+10, r24	; 0x0a
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	9f 87       	std	Y+15, r25	; 0x0f
    12fe:	8e 87       	std	Y+14, r24	; 0x0e
    1300:	8e 85       	ldd	r24, Y+14	; 0x0e
    1302:	9f 85       	ldd	r25, Y+15	; 0x0f
    1304:	8c 01       	movw	r16, r24
    1306:	f8 01       	movw	r30, r16
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <lcd_wr_char+0x176>
    130c:	8f 01       	movw	r16, r30
    130e:	1f 87       	std	Y+15, r17	; 0x0f
    1310:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
    1312:	88 e2       	ldi	r24, 0x28	; 40
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	28 e2       	ldi	r18, 0x28	; 40
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	2b 7f       	andi	r18, 0xFB	; 251
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18



	letter = letter & 0x0F;
    1324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	8e 8f       	std	Y+30, r24	; 0x1e

	letter = letter<<4;
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	82 95       	swap	r24
    132e:	80 7f       	andi	r24, 0xF0	; 240
    1330:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    1332:	88 e2       	ldi	r24, 0x28	; 40
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	28 e2       	ldi	r18, 0x28	; 40
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	20 81       	ld	r18, Z
    133e:	2f 70       	andi	r18, 0x0F	; 15
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18

	lcd_port |= letter;
    1344:	88 e2       	ldi	r24, 0x28	; 40
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	28 e2       	ldi	r18, 0x28	; 40
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	f9 01       	movw	r30, r18
    134e:	30 81       	ld	r19, Z
    1350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1352:	23 2b       	or	r18, r19
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    1358:	88 e2       	ldi	r24, 0x28	; 40
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	28 e2       	ldi	r18, 0x28	; 40
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	20 81       	ld	r18, Z
    1364:	21 60       	ori	r18, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	28 e2       	ldi	r18, 0x28	; 40
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	2d 7f       	andi	r18, 0xFD	; 253
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	28 e2       	ldi	r18, 0x28	; 40
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	24 60       	ori	r18, 0x04	; 4
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 ea       	ldi	r26, 0xA0	; 160
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	88 8b       	std	Y+16, r24	; 0x10
    1398:	99 8b       	std	Y+17, r25	; 0x11
    139a:	aa 8b       	std	Y+18, r26	; 0x12
    139c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    139e:	68 89       	ldd	r22, Y+16	; 0x10
    13a0:	79 89       	ldd	r23, Y+17	; 0x11
    13a2:	8a 89       	ldd	r24, Y+18	; 0x12
    13a4:	9b 89       	ldd	r25, Y+19	; 0x13
    13a6:	26 e6       	ldi	r18, 0x66	; 102
    13a8:	36 e6       	ldi	r19, 0x66	; 102
    13aa:	46 e6       	ldi	r20, 0x66	; 102
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8c 8b       	std	Y+20, r24	; 0x14
    13b8:	9d 8b       	std	Y+21, r25	; 0x15
    13ba:	ae 8b       	std	Y+22, r26	; 0x16
    13bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13be:	11 e0       	ldi	r17, 0x01	; 1
    13c0:	6c 89       	ldd	r22, Y+20	; 0x14
    13c2:	7d 89       	ldd	r23, Y+21	; 0x15
    13c4:	8e 89       	ldd	r24, Y+22	; 0x16
    13c6:	9f 89       	ldd	r25, Y+23	; 0x17
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	0c f0       	brlt	.+2      	; 0x13da <lcd_wr_char+0x248>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	11 23       	and	r17, r17
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <lcd_wr_char+0x256>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	99 8f       	std	Y+25, r25	; 0x19
    13e4:	88 8f       	std	Y+24, r24	; 0x18
    13e6:	46 c0       	rjmp	.+140    	; 0x1474 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	6c 89       	ldd	r22, Y+20	; 0x14
    13ec:	7d 89       	ldd	r23, Y+21	; 0x15
    13ee:	8e 89       	ldd	r24, Y+22	; 0x16
    13f0:	9f 89       	ldd	r25, Y+23	; 0x17
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <lcd_wr_char+0x272>
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	11 23       	and	r17, r17
    1406:	61 f1       	breq	.+88     	; 0x1460 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	68 89       	ldd	r22, Y+16	; 0x10
    140a:	79 89       	ldd	r23, Y+17	; 0x11
    140c:	8a 89       	ldd	r24, Y+18	; 0x12
    140e:	9b 89       	ldd	r25, Y+19	; 0x13
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	99 8f       	std	Y+25, r25	; 0x19
    142e:	88 8f       	std	Y+24, r24	; 0x18
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <lcd_wr_char+0x2c4>
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	9b 8f       	std	Y+27, r25	; 0x1b
    1438:	8a 8f       	std	Y+26, r24	; 0x1a
    143a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    143c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    143e:	8c 01       	movw	r16, r24
    1440:	c8 01       	movw	r24, r16
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <lcd_wr_char+0x2b0>
    1446:	8c 01       	movw	r16, r24
    1448:	1b 8f       	std	Y+27, r17	; 0x1b
    144a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	88 8d       	ldd	r24, Y+24	; 0x18
    144e:	99 8d       	ldd	r25, Y+25	; 0x19
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	99 8f       	std	Y+25, r25	; 0x19
    1454:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	88 8d       	ldd	r24, Y+24	; 0x18
    1458:	99 8d       	ldd	r25, Y+25	; 0x19
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	51 f7       	brne	.-44     	; 0x1432 <lcd_wr_char+0x2a0>
    145e:	17 c0       	rjmp	.+46     	; 0x148e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	6c 89       	ldd	r22, Y+20	; 0x14
    1462:	7d 89       	ldd	r23, Y+21	; 0x15
    1464:	8e 89       	ldd	r24, Y+22	; 0x16
    1466:	9f 89       	ldd	r25, Y+23	; 0x17
    1468:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	99 8f       	std	Y+25, r25	; 0x19
    1472:	88 8f       	std	Y+24, r24	; 0x18
    1474:	88 8d       	ldd	r24, Y+24	; 0x18
    1476:	99 8d       	ldd	r25, Y+25	; 0x19
    1478:	9d 8f       	std	Y+29, r25	; 0x1d
    147a:	8c 8f       	std	Y+28, r24	; 0x1c
    147c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    147e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1480:	8c 01       	movw	r16, r24
    1482:	f8 01       	movw	r30, r16
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <lcd_wr_char+0x2f2>
    1488:	8f 01       	movw	r16, r30
    148a:	1d 8f       	std	Y+29, r17	; 0x1d
    148c:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e2       	ldi	r18, 0x28	; 40
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	2b 7f       	andi	r18, 0xFB	; 251
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18

}
    14a0:	6e 96       	adiw	r28, 0x1e	; 30
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <lcd_home>:



void lcd_home()

{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62

	lcd_wr_command(0x80);
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <lcd_string>:

/*****Function to Print String on LCD*****/

void lcd_string(char *str)

{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	0f 92       	push	r0
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01

	while(*str != '\0')
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <lcd_string+0x28>

	{

		lcd_wr_char(*str);
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		str++;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01

void lcd_string(char *str)

{

	while(*str != '\0')
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	79 f7       	brne	.-34     	; 0x14dc <lcd_string+0x12>

		str++;

	}

}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <lcd_cursor>:



void lcd_cursor (char row, char column)

{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	0f 92       	push	r0
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02

	switch (row) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	99 f0       	breq	.+38     	; 0x154a <lcd_cursor+0x42>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	24 f4       	brge	.+8      	; 0x1532 <lcd_cursor+0x2a>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	41 f0       	breq	.+16     	; 0x1540 <lcd_cursor+0x38>
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <lcd_cursor+0x60>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	71 f0       	breq	.+28     	; 0x1554 <lcd_cursor+0x4c>
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <lcd_cursor+0x56>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <lcd_cursor+0x60>

		case 1: lcd_wr_command (0x80 + column - 1); break;
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 58       	subi	r24, 0x81	; 129
    1544:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1548:	10 c0       	rjmp	.+32     	; 0x156a <lcd_cursor+0x62>

		case 2: lcd_wr_command (0xc0 + column - 1); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	81 54       	subi	r24, 0x41	; 65
    154e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1552:	0b c0       	rjmp	.+22     	; 0x156a <lcd_cursor+0x62>

		case 3: lcd_wr_command (0x94 + column - 1); break;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	8d 56       	subi	r24, 0x6D	; 109
    1558:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    155c:	06 c0       	rjmp	.+12     	; 0x156a <lcd_cursor+0x62>

		case 4: lcd_wr_command (0xd4 + column - 1); break;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8d 52       	subi	r24, 0x2D	; 45
    1562:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1566:	01 c0       	rjmp	.+2      	; 0x156a <lcd_cursor+0x62>

		default: break;
    1568:	00 00       	nop

	}

}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/

void lcd_print (char row, char coloumn, unsigned int value, int digits)

{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
    158c:	5d 83       	std	Y+5, r21	; 0x05
    158e:	4c 83       	std	Y+4, r20	; 0x04
    1590:	3f 83       	std	Y+7, r19	; 0x07
    1592:	2e 83       	std	Y+6, r18	; 0x06

	unsigned char flag=0;
    1594:	19 82       	std	Y+1, r1	; 0x01

	if(row==0||coloumn==0)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <lcd_print+0x2e>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 23       	and	r24, r24
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <lcd_print+0x34>

	{

		lcd_home();
    15a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <lcd_home>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <lcd_print+0x3c>

	else

	{

		lcd_cursor(row,coloumn);
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	6b 81       	ldd	r22, Y+3	; 0x03
    15ac:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>

	}

	if(digits==5 || flag==1)
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <lcd_print+0x4c>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	b1 f4       	brne	.+44     	; 0x15ec <lcd_print+0x78>

	{

		million=value/10000+48;
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	20 e1       	ldi	r18, 0x10	; 16
    15c6:	37 e2       	ldi	r19, 0x27	; 39
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    15ce:	9b 01       	movw	r18, r22
    15d0:	c9 01       	movw	r24, r18
    15d2:	c0 96       	adiw	r24, 0x30	; 48
    15d4:	90 93 90 04 	sts	0x0490, r25
    15d8:	80 93 8f 04 	sts	0x048F, r24

		lcd_wr_char(million);
    15dc:	80 91 8f 04 	lds	r24, 0x048F
    15e0:	90 91 90 04 	lds	r25, 0x0490
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==4 || flag==1)
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	9f 81       	ldd	r25, Y+7	; 0x07
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <lcd_print+0x88>
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f5       	brne	.+70     	; 0x1642 <lcd_print+0xce>

	{

		temp = value/1000;
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	28 ee       	ldi	r18, 0xE8	; 232
    1602:	33 e0       	ldi	r19, 0x03	; 3
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    160a:	9b 01       	movw	r18, r22
    160c:	c9 01       	movw	r24, r18
    160e:	90 93 ad 04 	sts	0x04AD, r25
    1612:	80 93 ac 04 	sts	0x04AC, r24

		thousand = temp%10 + 48;
    1616:	80 91 ac 04 	lds	r24, 0x04AC
    161a:	90 91 ad 04 	lds	r25, 0x04AD
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	b9 01       	movw	r22, r18
    1624:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    1628:	c0 96       	adiw	r24, 0x30	; 48
    162a:	90 93 fd 04 	sts	0x04FD, r25
    162e:	80 93 fc 04 	sts	0x04FC, r24

		lcd_wr_char(thousand);
    1632:	80 91 fc 04 	lds	r24, 0x04FC
    1636:	90 91 fd 04 	lds	r25, 0x04FD
    163a:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==3 || flag==1)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	19 f0       	breq	.+6      	; 0x1652 <lcd_print+0xde>
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	19 f5       	brne	.+70     	; 0x1698 <lcd_print+0x124>

	{

		temp = value/100;
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	24 e6       	ldi	r18, 0x64	; 100
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    1660:	9b 01       	movw	r18, r22
    1662:	c9 01       	movw	r24, r18
    1664:	90 93 ad 04 	sts	0x04AD, r25
    1668:	80 93 ac 04 	sts	0x04AC, r24

		hundred = temp%10 + 48;
    166c:	80 91 ac 04 	lds	r24, 0x04AC
    1670:	90 91 ad 04 	lds	r25, 0x04AD
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 d1 04 	sts	0x04D1, r25
    1684:	80 93 d0 04 	sts	0x04D0, r24

		lcd_wr_char(hundred);
    1688:	80 91 d0 04 	lds	r24, 0x04D0
    168c:	90 91 d1 04 	lds	r25, 0x04D1
    1690:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==2 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x134>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	19 f5       	brne	.+70     	; 0x16ee <lcd_print+0x17a>

	{

		temp = value/10;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    16b6:	9b 01       	movw	r18, r22
    16b8:	c9 01       	movw	r24, r18
    16ba:	90 93 ad 04 	sts	0x04AD, r25
    16be:	80 93 ac 04 	sts	0x04AC, r24

		tens = temp%10 + 48;
    16c2:	80 91 ac 04 	lds	r24, 0x04AC
    16c6:	90 91 ad 04 	lds	r25, 0x04AD
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	b9 01       	movw	r22, r18
    16d0:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    16d4:	c0 96       	adiw	r24, 0x30	; 48
    16d6:	90 93 cb 04 	sts	0x04CB, r25
    16da:	80 93 ca 04 	sts	0x04CA, r24

		lcd_wr_char(tens);
    16de:	80 91 ca 04 	lds	r24, 0x04CA
    16e2:	90 91 cb 04 	lds	r25, 0x04CB
    16e6:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==1 || flag==1)
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	19 f0       	breq	.+6      	; 0x16fe <lcd_print+0x18a>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 f4       	brne	.+36     	; 0x1722 <lcd_print+0x1ae>

	{

		unit = value%10 + 48;
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	0e 94 9b 97 	call	0x12f36	; 0x12f36 <__udivmodhi4>
    170c:	c0 96       	adiw	r24, 0x30	; 48
    170e:	90 93 fb 04 	sts	0x04FB, r25
    1712:	80 93 fa 04 	sts	0x04FA, r24

		lcd_wr_char(unit);
    1716:	80 91 fa 04 	lds	r24, 0x04FA
    171a:	90 91 fb 04 	lds	r25, 0x04FB
    171e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	if(digits>5)
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	86 30       	cpi	r24, 0x06	; 6
    1728:	91 05       	cpc	r25, r1
    172a:	1c f0       	brlt	.+6      	; 0x1732 <lcd_print+0x1be>

	{

		lcd_wr_char('E');
    172c:	85 e4       	ldi	r24, 0x45	; 69
    172e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}
    1732:	27 96       	adiw	r28, 0x07	; 7
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <motion_pin_config>:

*/

void motion_pin_config(void)

 {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62

    DDRA = DDRA | 0x0F;
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	21 e2       	ldi	r18, 0x21	; 33
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 60       	ori	r18, 0x0F	; 15
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18

    PORTA = PORTA & 0xF0;
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	22 e2       	ldi	r18, 0x22	; 34
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	20 7f       	andi	r18, 0xF0	; 240
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18

    DDRL = DDRL | 0x18; //Setting PL3 and PL4 pins as output for PWM generation
    1770:	8a e0       	ldi	r24, 0x0A	; 10
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 61       	ori	r18, 0x18	; 24
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18

    PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1782:	8b e0       	ldi	r24, 0x0B	; 11
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	2b e0       	ldi	r18, 0x0B	; 11
    1788:	31 e0       	ldi	r19, 0x01	; 1
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	28 61       	ori	r18, 0x18	; 24
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <left_encoder_pin_config>:

*/

void left_encoder_pin_config (void)

{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2d e2       	ldi	r18, 0x2D	; 45
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	2f 7e       	andi	r18, 0xEF	; 239
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18

	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17b4:	8e e2       	ldi	r24, 0x2E	; 46
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2e e2       	ldi	r18, 0x2E	; 46
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	20 61       	ori	r18, 0x10	; 16
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18

}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <right_encoder_pin_config>:

*/

void right_encoder_pin_config (void)

{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    17d4:	8d e2       	ldi	r24, 0x2D	; 45
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2d e2       	ldi	r18, 0x2D	; 45
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	2f 7d       	andi	r18, 0xDF	; 223
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18

	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    17e6:	8e e2       	ldi	r24, 0x2E	; 46
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	2e e2       	ldi	r18, 0x2E	; 46
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	20 62       	ori	r18, 0x20	; 32
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18

}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <velocity>:

*/

void velocity(unsigned char left_motor, unsigned char right_motor) 

{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f 92       	push	r0
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02

    OCR5AL = (unsigned char) left_motor;
    180e:	88 e2       	ldi	r24, 0x28	; 40
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18

    OCR5BL = (unsigned char) right_motor;
    1818:	8a e2       	ldi	r24, 0x2A	; 42
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	2a 81       	ldd	r18, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18

}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <left_position_encoder_interrupt_init>:

*/

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable

{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    1834:	f8 94       	cli

	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1836:	8a e6       	ldi	r24, 0x6A	; 106
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a e6       	ldi	r18, 0x6A	; 106
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	22 60       	ori	r18, 0x02	; 2
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1848:	8d e3       	ldi	r24, 0x3D	; 61
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2d e3       	ldi	r18, 0x3D	; 61
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	20 61       	ori	r18, 0x10	; 16
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    185a:	78 94       	sei

}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <right_position_encoder_interrupt_init>:

*/

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable

{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    186a:	f8 94       	cli

	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    186c:	8a e6       	ldi	r24, 0x6A	; 106
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2a e6       	ldi	r18, 0x6A	; 106
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	f9 01       	movw	r30, r18
    1876:	20 81       	ld	r18, Z
    1878:	28 60       	ori	r18, 0x08	; 8
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2d e3       	ldi	r18, 0x3D	; 61
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	20 62       	ori	r18, 0x20	; 32
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    1890:	78 94       	sei

}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <__vector_6>:

*/

ISR(INT5_vect)

{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	ShaftCountRight++;  //increment right shaft position count
    18b2:	80 91 50 03 	lds	r24, 0x0350
    18b6:	90 91 51 03 	lds	r25, 0x0351
    18ba:	a0 91 52 03 	lds	r26, 0x0352
    18be:	b0 91 53 03 	lds	r27, 0x0353
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	80 93 50 03 	sts	0x0350, r24
    18cc:	90 93 51 03 	sts	0x0351, r25
    18d0:	a0 93 52 03 	sts	0x0352, r26
    18d4:	b0 93 53 03 	sts	0x0353, r27

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_5>:

*/

ISR(INT4_vect)

{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62

	ShaftCountLeft++;  //increment left shaft position count
    1908:	80 91 4c 03 	lds	r24, 0x034C
    190c:	90 91 4d 03 	lds	r25, 0x034D
    1910:	a0 91 4e 03 	lds	r26, 0x034E
    1914:	b0 91 4f 03 	lds	r27, 0x034F
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	80 93 4c 03 	sts	0x034C, r24
    1922:	90 93 4d 03 	sts	0x034D, r25
    1926:	a0 93 4e 03 	sts	0x034E, r26
    192a:	b0 93 4f 03 	sts	0x034F, r27

}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <motion_set>:

*/

void motion_set(unsigned char Direction)

 {
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	0f 92       	push	r0
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char PortARestore = 0;
    1952:	19 82       	std	Y+1, r1	; 0x01



    Direction &= 0x0F; // removing upper nibble for protection
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 70       	andi	r24, 0x0F	; 15
    1958:	8a 83       	std	Y+2, r24	; 0x02

    PortARestore = PORTA; // reading PORTA's original status
    195a:	82 e2       	ldi	r24, 0x22	; 34
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	80 81       	ld	r24, Z
    1962:	89 83       	std	Y+1, r24	; 0x01

    PortARestore &= 0xF0; // making lower direction nibble to 0
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	80 7f       	andi	r24, 0xF0	; 240
    1968:	89 83       	std	Y+1, r24	; 0x01

    PortARestore |= Direction; // adding lower nibble for forward command and restoring PORTA's status
    196a:	99 81       	ldd	r25, Y+1	; 0x01
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	89 2b       	or	r24, r25
    1970:	89 83       	std	Y+1, r24	; 0x01

    PORTA = PortARestore; // executing the command
    1972:	82 e2       	ldi	r24, 0x22	; 34
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	29 81       	ldd	r18, Y+1	; 0x01
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18

}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <forward>:

*/

void forward(void)

 {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

    motion_set(0x06);
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <back>:

*/

void back (void)

{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x09);
    19a2:	89 e0       	ldi	r24, 0x09	; 9
    19a4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <left>:

*/

void left (void)

{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x05);
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <right>:

*/

void right (void)

{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x0A);
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <soft_left>:

*/

void soft_left (void)

{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x04);
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <soft_right>:

*/

void soft_right (void) 

{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x02);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <soft_left_2>:

*/

void soft_left_2 (void) 

{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x01);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <soft_right_2>:

*/

void soft_right_2 (void)

{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x08);
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <stop>:

*/

void stop(void)

{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x00);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <angle_rotate>:

*/

void angle_rotate(unsigned int Degrees)

{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2a 97       	sbiw	r28, 0x0a	; 10
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	9a 87       	std	Y+10, r25	; 0x0a
    1a50:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	ab 83       	std	Y+3, r26	; 0x03
    1a5e:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1a60:	1d 82       	std	Y+5, r1	; 0x05
    1a62:	1e 82       	std	Y+6, r1	; 0x06
    1a64:	1f 82       	std	Y+7, r1	; 0x07
    1a66:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	cc 01       	movw	r24, r24
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 82 96 	call	0x12d04	; 0x12d04 <__floatunsisf>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	28 e4       	ldi	r18, 0x48	; 72
    1a84:	31 ee       	ldi	r19, 0xE1	; 225
    1a86:	42 e8       	ldi	r20, 0x82	; 130
    1a88:	50 e4       	ldi	r21, 0x40	; 64
    1a8a:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	ab 83       	std	Y+3, r26	; 0x03
    1a98:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	cc 01       	movw	r24, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	af 83       	std	Y+7, r26	; 0x07
    1ab6:	b8 87       	std	Y+8, r27	; 0x08

	ShaftCountRight = 0;
    1ab8:	10 92 50 03 	sts	0x0350, r1
    1abc:	10 92 51 03 	sts	0x0351, r1
    1ac0:	10 92 52 03 	sts	0x0352, r1
    1ac4:	10 92 53 03 	sts	0x0353, r1

	ShaftCountLeft = 0;
    1ac8:	10 92 4c 03 	sts	0x034C, r1
    1acc:	10 92 4d 03 	sts	0x034D, r1
    1ad0:	10 92 4e 03 	sts	0x034E, r1
    1ad4:	10 92 4f 03 	sts	0x034F, r1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <angle_rotate+0xa2>

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))

		break;

	}
    1ada:	00 00       	nop

	while (1)

	{

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1adc:	20 91 50 03 	lds	r18, 0x0350
    1ae0:	30 91 51 03 	lds	r19, 0x0351
    1ae4:	40 91 52 03 	lds	r20, 0x0352
    1ae8:	50 91 53 03 	lds	r21, 0x0353
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	af 81       	ldd	r26, Y+7	; 0x07
    1af4:	b8 85       	ldd	r27, Y+8	; 0x08
    1af6:	28 17       	cp	r18, r24
    1af8:	39 07       	cpc	r19, r25
    1afa:	4a 07       	cpc	r20, r26
    1afc:	5b 07       	cpc	r21, r27
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <angle_rotate+0xc8>
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	20 91 4c 03 	lds	r18, 0x034C
    1b06:	30 91 4d 03 	lds	r19, 0x034D
    1b0a:	40 91 4e 03 	lds	r20, 0x034E
    1b0e:	50 91 4f 03 	lds	r21, 0x034F
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	af 81       	ldd	r26, Y+7	; 0x07
    1b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <angle_rotate+0xee>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	87 2f       	mov	r24, r23
    1b2a:	86 2b       	or	r24, r22
    1b2c:	88 23       	and	r24, r24
    1b2e:	a9 f2       	breq	.-86     	; 0x1ada <angle_rotate+0xa0>

		break;
    1b30:	00 00       	nop

	}

	stop(); //Stop robot
    1b32:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1b36:	2a 96       	adiw	r28, 0x0a	; 10
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <linear_distance_mm>:

*/

void linear_distance_mm(unsigned int DistanceInMM)

{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	dc 01       	movw	r26, r24
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	ab 83       	std	Y+3, r26	; 0x03
    1b6c:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1b6e:	1d 82       	std	Y+5, r1	; 0x05
    1b70:	1e 82       	std	Y+6, r1	; 0x06
    1b72:	1f 82       	std	Y+7, r1	; 0x07
    1b74:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	cc 01       	movw	r24, r24
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 82 96 	call	0x12d04	; 0x12d04 <__floatunsisf>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	25 ee       	ldi	r18, 0xE5	; 229
    1b92:	30 ed       	ldi	r19, 0xD0	; 208
    1b94:	4a ea       	ldi	r20, 0xAA	; 170
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <__divsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	ab 83       	std	Y+3, r26	; 0x03
    1ba6:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08

	

	ShaftCountRight = 0;
    1bc0:	10 92 50 03 	sts	0x0350, r1
    1bc4:	10 92 51 03 	sts	0x0351, r1
    1bc8:	10 92 52 03 	sts	0x0352, r1
    1bcc:	10 92 53 03 	sts	0x0353, r1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <linear_distance_mm+0x8c>

			break;

		}

	}
    1bd2:	00 00       	nop

	while(1)

	{

		if(ShaftCountRight > ReqdShaftCountInt)
    1bd4:	20 91 50 03 	lds	r18, 0x0350
    1bd8:	30 91 51 03 	lds	r19, 0x0351
    1bdc:	40 91 52 03 	lds	r20, 0x0352
    1be0:	50 91 53 03 	lds	r21, 0x0353
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	af 81       	ldd	r26, Y+7	; 0x07
    1bea:	b8 85       	ldd	r27, Y+8	; 0x08
    1bec:	82 17       	cp	r24, r18
    1bee:	93 07       	cpc	r25, r19
    1bf0:	a4 07       	cpc	r26, r20
    1bf2:	b5 07       	cpc	r27, r21
    1bf4:	70 f7       	brcc	.-36     	; 0x1bd2 <linear_distance_mm+0x8a>

		{

			break;
    1bf6:	00 00       	nop

		}

	}

	stop(); //Stop robot
    1bf8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1bfc:	2a 96       	adiw	r28, 0x0a	; 10
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <forward_mm>:

*/

void forward_mm(unsigned int DistanceInMM)

{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	0f 92       	push	r0
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01

	forward();
    1c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

	linear_distance_mm(DistanceInMM);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <back_mm>:

*/

void back_mm(unsigned int DistanceInMM)

{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	0f 92       	push	r0
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01

	back();
    1c44:	0e 94 cd 0c 	call	0x199a	; 0x199a <back>

	linear_distance_mm(DistanceInMM);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <left_degrees>:

*/

void left_degrees(unsigned int Degrees)

{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	0f 92       	push	r0
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	left(); //Turn left
    1c6a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>

	angle_rotate(Degrees);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <right_degrees>:

*/

void right_degrees(unsigned int Degrees)

{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	0f 92       	push	r0
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	right(); //Turn right
    1c90:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>

	angle_rotate(Degrees);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <soft_left_degrees>:

*/

void soft_left_degrees(unsigned int Degrees)

{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	0f 92       	push	r0
    1cac:	0f 92       	push	r0
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left(); //Turn soft left
    1cb6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>

	Degrees=Degrees*2;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <soft_right_degrees>:

*/

void soft_right_degrees(unsigned int Degrees)

{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	0f 92       	push	r0
    1cde:	0f 92       	push	r0
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right();  //Turn soft right
    1ce8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>

	Degrees=Degrees*2;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <soft_left_2_degrees>:

*/

void soft_left_2_degrees(unsigned int Degrees)

{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	0f 92       	push	r0
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left_2(); //Turn reverse soft left
    1d1a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>

	Degrees=Degrees*2;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <soft_right_2_degrees>:

*/

void soft_right_2_degrees(unsigned int Degrees)

{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	0f 92       	push	r0
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right_2();  //Turn reverse soft right
    1d4c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>

	Degrees=Degrees*2;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <correct_right>:


*/

void correct_right()
{   
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6c 97       	sbiw	r28, 0x1c	; 28
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
	stop();
    1d86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d90:	b1 e4       	ldi	r27, 0x41	; 65
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	26 e6       	ldi	r18, 0x66	; 102
    1da4:	36 e6       	ldi	r19, 0x66	; 102
    1da6:	46 e6       	ldi	r20, 0x66	; 102
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	af 83       	std	Y+7, r26	; 0x07
    1db8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1dba:	11 e0       	ldi	r17, 0x01	; 1
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <correct_right+0x68>
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	11 23       	and	r17, r17
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <correct_right+0x76>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a 87       	std	Y+10, r25	; 0x0a
    1de0:	89 87       	std	Y+9, r24	; 0x09
    1de2:	46 c0       	rjmp	.+140    	; 0x1e70 <correct_right+0x102>
	else if (__tmp > 65535)
    1de4:	11 e0       	ldi	r17, 0x01	; 1
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <correct_right+0x92>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	11 23       	and	r17, r17
    1e02:	61 f1       	breq	.+88     	; 0x1e5c <correct_right+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	69 81       	ldd	r22, Y+1	; 0x01
    1e06:	7a 81       	ldd	r23, Y+2	; 0x02
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a 87       	std	Y+10, r25	; 0x0a
    1e2a:	89 87       	std	Y+9, r24	; 0x09
    1e2c:	12 c0       	rjmp	.+36     	; 0x1e52 <correct_right+0xe4>
    1e2e:	80 e7       	ldi	r24, 0x70	; 112
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <correct_right+0xd0>
    1e42:	8c 01       	movw	r16, r24
    1e44:	1c 87       	std	Y+12, r17	; 0x0c
    1e46:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a 87       	std	Y+10, r25	; 0x0a
    1e50:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	51 f7       	brne	.-44     	; 0x1e2e <correct_right+0xc0>
    1e5a:	17 c0       	rjmp	.+46     	; 0x1e8a <correct_right+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a 87       	std	Y+10, r25	; 0x0a
    1e6e:	89 87       	std	Y+9, r24	; 0x09
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	9e 87       	std	Y+14, r25	; 0x0e
    1e76:	8d 87       	std	Y+13, r24	; 0x0d
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	c8 01       	movw	r24, r16
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <correct_right+0x112>
    1e84:	8c 01       	movw	r16, r24
    1e86:	1e 87       	std	Y+14, r17	; 0x0e
    1e88:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_degrees(35);
    1e8a:	83 e2       	ldi	r24, 0x23	; 35
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <soft_right_degrees>
	soft_right();
    1e92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <correct_right+0x12c>
		{   
			stop();
			_delay_ms(50);
			break;
		}
	}
    1e98:	00 00       	nop
	_delay_ms(20);
	soft_right_degrees(35);
	soft_right();
	while(1)
	{
		read_line();    
    1e9a:	81 ea       	ldi	r24, 0xA1	; 161
    1e9c:	93 e3       	ldi	r25, 0x33	; 51
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	19 95       	eicall
		if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>70))
    1ea2:	80 91 55 03 	lds	r24, 0x0355
    1ea6:	8f 30       	cpi	r24, 0x0F	; 15
    1ea8:	20 f0       	brcs	.+8      	; 0x1eb2 <correct_right+0x144>
    1eaa:	80 91 54 03 	lds	r24, 0x0354
    1eae:	8f 30       	cpi	r24, 0x0F	; 15
    1eb0:	20 f4       	brcc	.+8      	; 0x1eba <correct_right+0x14c>
    1eb2:	80 91 55 03 	lds	r24, 0x0355
    1eb6:	87 34       	cpi	r24, 0x47	; 71
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <correct_right+0x12a>
		{   
			stop();
    1eba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	a9 8b       	std	Y+17, r26	; 0x11
    1ecc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ed0:	78 89       	ldd	r23, Y+16	; 0x10
    1ed2:	89 89       	ldd	r24, Y+17	; 0x11
    1ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed6:	26 e6       	ldi	r18, 0x66	; 102
    1ed8:	36 e6       	ldi	r19, 0x66	; 102
    1eda:	46 e6       	ldi	r20, 0x66	; 102
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	ad 8b       	std	Y+21, r26	; 0x15
    1eec:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1eee:	11 e0       	ldi	r17, 0x01	; 1
    1ef0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ef2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ef4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <correct_right+0x19c>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	11 23       	and	r17, r17
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <correct_right+0x1aa>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 8f       	std	Y+24, r25	; 0x18
    1f14:	8f 8b       	std	Y+23, r24	; 0x17
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <correct_right+0x236>
	else if (__tmp > 65535)
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    1f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    1f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <correct_right+0x1c6>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	11 23       	and	r17, r17
    1f36:	61 f1       	breq	.+88     	; 0x1f90 <correct_right+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f3a:	78 89       	ldd	r23, Y+16	; 0x10
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 8f       	std	Y+24, r25	; 0x18
    1f5e:	8f 8b       	std	Y+23, r24	; 0x17
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <correct_right+0x218>
    1f62:	80 e7       	ldi	r24, 0x70	; 112
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9a 8f       	std	Y+26, r25	; 0x1a
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f6e:	8c 01       	movw	r16, r24
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <correct_right+0x204>
    1f76:	8c 01       	movw	r16, r24
    1f78:	1a 8f       	std	Y+26, r17	; 0x1a
    1f7a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	98 8f       	std	Y+24, r25	; 0x18
    1f84:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	51 f7       	brne	.-44     	; 0x1f62 <correct_right+0x1f4>
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <correct_right+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6b 89       	ldd	r22, Y+19	; 0x13
    1f92:	7c 89       	ldd	r23, Y+20	; 0x14
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	9e 89       	ldd	r25, Y+22	; 0x16
    1f98:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	98 8f       	std	Y+24, r25	; 0x18
    1fa2:	8f 8b       	std	Y+23, r24	; 0x17
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <correct_right+0x246>
    1fb8:	8c 01       	movw	r16, r24
    1fba:	1c 8f       	std	Y+28, r17	; 0x1c
    1fbc:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <correct_right+0x254>
    1fc0:	00 00       	nop
		}
	}
}
    1fc2:	6c 96       	adiw	r28, 0x1c	; 28
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <correct_right2>:


*/

void correct_right2()
{   
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6c 97       	sbiw	r28, 0x1c	; 28
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
	stop();
    1ff0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2004:	69 81       	ldd	r22, Y+1	; 0x01
    2006:	7a 81       	ldd	r23, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	26 e6       	ldi	r18, 0x66	; 102
    200e:	36 e6       	ldi	r19, 0x66	; 102
    2010:	46 e6       	ldi	r20, 0x66	; 102
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	af 83       	std	Y+7, r26	; 0x07
    2022:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2024:	11 e0       	ldi	r17, 0x01	; 1
    2026:	6d 81       	ldd	r22, Y+5	; 0x05
    2028:	7e 81       	ldd	r23, Y+6	; 0x06
    202a:	8f 81       	ldd	r24, Y+7	; 0x07
    202c:	98 85       	ldd	r25, Y+8	; 0x08
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    203a:	88 23       	and	r24, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <correct_right2+0x68>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	11 23       	and	r17, r17
    2042:	29 f0       	breq	.+10     	; 0x204e <correct_right2+0x76>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 87       	std	Y+10, r25	; 0x0a
    204a:	89 87       	std	Y+9, r24	; 0x09
    204c:	46 c0       	rjmp	.+140    	; 0x20da <correct_right2+0x102>
	else if (__tmp > 65535)
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	6d 81       	ldd	r22, Y+5	; 0x05
    2052:	7e 81       	ldd	r23, Y+6	; 0x06
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <correct_right2+0x92>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	11 23       	and	r17, r17
    206c:	61 f1       	breq	.+88     	; 0x20c6 <correct_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	69 81       	ldd	r22, Y+1	; 0x01
    2070:	7a 81       	ldd	r23, Y+2	; 0x02
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a 87       	std	Y+10, r25	; 0x0a
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <correct_right2+0xe4>
    2098:	80 e7       	ldi	r24, 0x70	; 112
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a4:	8c 01       	movw	r16, r24
    20a6:	c8 01       	movw	r24, r16
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <correct_right2+0xd0>
    20ac:	8c 01       	movw	r16, r24
    20ae:	1c 87       	std	Y+12, r17	; 0x0c
    20b0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9a 87       	std	Y+10, r25	; 0x0a
    20ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	51 f7       	brne	.-44     	; 0x2098 <correct_right2+0xc0>
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <correct_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6d 81       	ldd	r22, Y+5	; 0x05
    20c8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9a 87       	std	Y+10, r25	; 0x0a
    20d8:	89 87       	std	Y+9, r24	; 0x09
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	9e 87       	std	Y+14, r25	; 0x0e
    20e0:	8d 87       	std	Y+13, r24	; 0x0d
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	8c 01       	movw	r16, r24
    20e8:	c8 01       	movw	r24, r16
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <correct_right2+0x112>
    20ee:	8c 01       	movw	r16, r24
    20f0:	1e 87       	std	Y+14, r17	; 0x0e
    20f2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	right_degrees(35);
    20f4:	83 e2       	ldi	r24, 0x23	; 35
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    20fc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <correct_right2+0x12c>
		{
			stop();
			_delay_ms(50);
			break;
		}
	}
    2102:	00 00       	nop
	_delay_ms(50);
	right_degrees(35);
	right();
	while(1)
	{
		read_line();
    2104:	81 ea       	ldi	r24, 0xA1	; 161
    2106:	93 e3       	ldi	r25, 0x33	; 51
    2108:	fc 01       	movw	r30, r24
    210a:	19 95       	eicall
		if(Center_white_line > 25)
    210c:	80 91 55 03 	lds	r24, 0x0355
    2110:	8a 31       	cpi	r24, 0x1A	; 26
    2112:	b8 f3       	brcs	.-18     	; 0x2102 <correct_right2+0x12a>
		{
			stop();
    2114:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a8 e4       	ldi	r26, 0x48	; 72
    211e:	b2 e4       	ldi	r27, 0x42	; 66
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	a9 8b       	std	Y+17, r26	; 0x11
    2126:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6f 85       	ldd	r22, Y+15	; 0x0f
    212a:	78 89       	ldd	r23, Y+16	; 0x10
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	26 e6       	ldi	r18, 0x66	; 102
    2132:	36 e6       	ldi	r19, 0x66	; 102
    2134:	46 e6       	ldi	r20, 0x66	; 102
    2136:	55 e4       	ldi	r21, 0x45	; 69
    2138:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	ad 8b       	std	Y+21, r26	; 0x15
    2146:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2148:	11 e0       	ldi	r17, 0x01	; 1
    214a:	6b 89       	ldd	r22, Y+19	; 0x13
    214c:	7c 89       	ldd	r23, Y+20	; 0x14
    214e:	8d 89       	ldd	r24, Y+21	; 0x15
    2150:	9e 89       	ldd	r25, Y+22	; 0x16
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <correct_right2+0x18c>
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	11 23       	and	r17, r17
    2166:	29 f0       	breq	.+10     	; 0x2172 <correct_right2+0x19a>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 8f       	std	Y+24, r25	; 0x18
    216e:	8f 8b       	std	Y+23, r24	; 0x17
    2170:	46 c0       	rjmp	.+140    	; 0x21fe <correct_right2+0x226>
	else if (__tmp > 65535)
    2172:	11 e0       	ldi	r17, 0x01	; 1
    2174:	6b 89       	ldd	r22, Y+19	; 0x13
    2176:	7c 89       	ldd	r23, Y+20	; 0x14
    2178:	8d 89       	ldd	r24, Y+21	; 0x15
    217a:	9e 89       	ldd	r25, Y+22	; 0x16
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <correct_right2+0x1b6>
    218c:	10 e0       	ldi	r17, 0x00	; 0
    218e:	11 23       	and	r17, r17
    2190:	61 f1       	breq	.+88     	; 0x21ea <correct_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6f 85       	ldd	r22, Y+15	; 0x0f
    2194:	78 89       	ldd	r23, Y+16	; 0x10
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	98 8f       	std	Y+24, r25	; 0x18
    21b8:	8f 8b       	std	Y+23, r24	; 0x17
    21ba:	12 c0       	rjmp	.+36     	; 0x21e0 <correct_right2+0x208>
    21bc:	80 e7       	ldi	r24, 0x70	; 112
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	89 8f       	std	Y+25, r24	; 0x19
    21c4:	89 8d       	ldd	r24, Y+25	; 0x19
    21c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21c8:	8c 01       	movw	r16, r24
    21ca:	c8 01       	movw	r24, r16
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <correct_right2+0x1f4>
    21d0:	8c 01       	movw	r16, r24
    21d2:	1a 8f       	std	Y+26, r17	; 0x1a
    21d4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 8f       	std	Y+24, r25	; 0x18
    21de:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	51 f7       	brne	.-44     	; 0x21bc <correct_right2+0x1e4>
    21e8:	18 c0       	rjmp	.+48     	; 0x221a <__stack+0x1b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6b 89       	ldd	r22, Y+19	; 0x13
    21ec:	7c 89       	ldd	r23, Y+20	; 0x14
    21ee:	8d 89       	ldd	r24, Y+21	; 0x15
    21f0:	9e 89       	ldd	r25, Y+22	; 0x16
    21f2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 8f       	std	Y+24, r25	; 0x18
    21fc:	8f 8b       	std	Y+23, r24	; 0x17
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	9c 8f       	std	Y+28, r25	; 0x1c
    2204:	8b 8f       	std	Y+27, r24	; 0x1b
    2206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220a:	8c 01       	movw	r16, r24
    220c:	c8 01       	movw	r24, r16
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <__stack+0xf>
    2212:	8c 01       	movw	r16, r24
    2214:	1c 8f       	std	Y+28, r17	; 0x1c
    2216:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	00 00       	nop
		}
	}
}
    221c:	6c 96       	adiw	r28, 0x1c	; 28
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <correct_left>:


*/

void correct_left()
{   
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	6c 97       	sbiw	r28, 0x1c	; 28
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
	stop();
    224a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ea       	ldi	r26, 0xA0	; 160
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	ab 83       	std	Y+3, r26	; 0x03
    225c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    225e:	69 81       	ldd	r22, Y+1	; 0x01
    2260:	7a 81       	ldd	r23, Y+2	; 0x02
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	26 e6       	ldi	r18, 0x66	; 102
    2268:	36 e6       	ldi	r19, 0x66	; 102
    226a:	46 e6       	ldi	r20, 0x66	; 102
    226c:	55 e4       	ldi	r21, 0x45	; 69
    226e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	af 83       	std	Y+7, r26	; 0x07
    227c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    227e:	11 e0       	ldi	r17, 0x01	; 1
    2280:	6d 81       	ldd	r22, Y+5	; 0x05
    2282:	7e 81       	ldd	r23, Y+6	; 0x06
    2284:	8f 81       	ldd	r24, Y+7	; 0x07
    2286:	98 85       	ldd	r25, Y+8	; 0x08
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2294:	88 23       	and	r24, r24
    2296:	0c f0       	brlt	.+2      	; 0x229a <correct_left+0x68>
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	11 23       	and	r17, r17
    229c:	29 f0       	breq	.+10     	; 0x22a8 <correct_left+0x76>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a 87       	std	Y+10, r25	; 0x0a
    22a4:	89 87       	std	Y+9, r24	; 0x09
    22a6:	46 c0       	rjmp	.+140    	; 0x2334 <correct_left+0x102>
	else if (__tmp > 65535)
    22a8:	11 e0       	ldi	r17, 0x01	; 1
    22aa:	6d 81       	ldd	r22, Y+5	; 0x05
    22ac:	7e 81       	ldd	r23, Y+6	; 0x06
    22ae:	8f 81       	ldd	r24, Y+7	; 0x07
    22b0:	98 85       	ldd	r25, Y+8	; 0x08
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    22be:	18 16       	cp	r1, r24
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <correct_left+0x92>
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	11 23       	and	r17, r17
    22c6:	61 f1       	breq	.+88     	; 0x2320 <correct_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9a 87       	std	Y+10, r25	; 0x0a
    22ee:	89 87       	std	Y+9, r24	; 0x09
    22f0:	12 c0       	rjmp	.+36     	; 0x2316 <correct_left+0xe4>
    22f2:	80 e7       	ldi	r24, 0x70	; 112
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fe:	8c 01       	movw	r16, r24
    2300:	c8 01       	movw	r24, r16
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <correct_left+0xd0>
    2306:	8c 01       	movw	r16, r24
    2308:	1c 87       	std	Y+12, r17	; 0x0c
    230a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9a 87       	std	Y+10, r25	; 0x0a
    2314:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	51 f7       	brne	.-44     	; 0x22f2 <correct_left+0xc0>
    231e:	17 c0       	rjmp	.+46     	; 0x234e <correct_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 81       	ldd	r22, Y+5	; 0x05
    2322:	7e 81       	ldd	r23, Y+6	; 0x06
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
    2326:	98 85       	ldd	r25, Y+8	; 0x08
    2328:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9a 87       	std	Y+10, r25	; 0x0a
    2332:	89 87       	std	Y+9, r24	; 0x09
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	8d 87       	std	Y+13, r24	; 0x0d
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	8c 01       	movw	r16, r24
    2342:	c8 01       	movw	r24, r16
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <correct_left+0x112>
    2348:	8c 01       	movw	r16, r24
    234a:	1e 87       	std	Y+14, r17	; 0x0e
    234c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_degrees(35);
    234e:	83 e2       	ldi	r24, 0x23	; 35
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <soft_left_degrees>
	soft_left();
    2356:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>
    235a:	01 c0       	rjmp	.+2      	; 0x235e <correct_left+0x12c>
		{
			stop();
			_delay_ms(50);
			break;
		}
	}
    235c:	00 00       	nop
	_delay_ms(20);
	soft_left_degrees(35);
	soft_left();
	while(1)
	{
		read_line();
    235e:	81 ea       	ldi	r24, 0xA1	; 161
    2360:	93 e3       	ldi	r25, 0x33	; 51
    2362:	fc 01       	movw	r30, r24
    2364:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 80))
    2366:	80 91 55 03 	lds	r24, 0x0355
    236a:	8f 30       	cpi	r24, 0x0F	; 15
    236c:	20 f0       	brcs	.+8      	; 0x2376 <correct_left+0x144>
    236e:	80 91 56 03 	lds	r24, 0x0356
    2372:	8f 30       	cpi	r24, 0x0F	; 15
    2374:	20 f4       	brcc	.+8      	; 0x237e <correct_left+0x14c>
    2376:	80 91 55 03 	lds	r24, 0x0355
    237a:	81 35       	cpi	r24, 0x51	; 81
    237c:	78 f3       	brcs	.-34     	; 0x235c <correct_left+0x12a>
		{
			stop();
    237e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 e4       	ldi	r26, 0x48	; 72
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	a9 8b       	std	Y+17, r26	; 0x11
    2390:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6f 85       	ldd	r22, Y+15	; 0x0f
    2394:	78 89       	ldd	r23, Y+16	; 0x10
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	26 e6       	ldi	r18, 0x66	; 102
    239c:	36 e6       	ldi	r19, 0x66	; 102
    239e:	46 e6       	ldi	r20, 0x66	; 102
    23a0:	55 e4       	ldi	r21, 0x45	; 69
    23a2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	ad 8b       	std	Y+21, r26	; 0x15
    23b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23b2:	11 e0       	ldi	r17, 0x01	; 1
    23b4:	6b 89       	ldd	r22, Y+19	; 0x13
    23b6:	7c 89       	ldd	r23, Y+20	; 0x14
    23b8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ba:	9e 89       	ldd	r25, Y+22	; 0x16
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	0c f0       	brlt	.+2      	; 0x23ce <correct_left+0x19c>
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	11 23       	and	r17, r17
    23d0:	29 f0       	breq	.+10     	; 0x23dc <correct_left+0x1aa>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	98 8f       	std	Y+24, r25	; 0x18
    23d8:	8f 8b       	std	Y+23, r24	; 0x17
    23da:	46 c0       	rjmp	.+140    	; 0x2468 <correct_left+0x236>
	else if (__tmp > 65535)
    23dc:	11 e0       	ldi	r17, 0x01	; 1
    23de:	6b 89       	ldd	r22, Y+19	; 0x13
    23e0:	7c 89       	ldd	r23, Y+20	; 0x14
    23e2:	8d 89       	ldd	r24, Y+21	; 0x15
    23e4:	9e 89       	ldd	r25, Y+22	; 0x16
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <correct_left+0x1c6>
    23f6:	10 e0       	ldi	r17, 0x00	; 0
    23f8:	11 23       	and	r17, r17
    23fa:	61 f1       	breq	.+88     	; 0x2454 <correct_left+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fe:	78 89       	ldd	r23, Y+16	; 0x10
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 8f       	std	Y+24, r25	; 0x18
    2422:	8f 8b       	std	Y+23, r24	; 0x17
    2424:	12 c0       	rjmp	.+36     	; 0x244a <correct_left+0x218>
    2426:	80 e7       	ldi	r24, 0x70	; 112
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	9a 8f       	std	Y+26, r25	; 0x1a
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	89 8d       	ldd	r24, Y+25	; 0x19
    2430:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2432:	8c 01       	movw	r16, r24
    2434:	c8 01       	movw	r24, r16
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <correct_left+0x204>
    243a:	8c 01       	movw	r16, r24
    243c:	1a 8f       	std	Y+26, r17	; 0x1a
    243e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	98 8f       	std	Y+24, r25	; 0x18
    2448:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	51 f7       	brne	.-44     	; 0x2426 <correct_left+0x1f4>
    2452:	18 c0       	rjmp	.+48     	; 0x2484 <correct_left+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	6b 89       	ldd	r22, Y+19	; 0x13
    2456:	7c 89       	ldd	r23, Y+20	; 0x14
    2458:	8d 89       	ldd	r24, Y+21	; 0x15
    245a:	9e 89       	ldd	r25, Y+22	; 0x16
    245c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	98 8f       	std	Y+24, r25	; 0x18
    2466:	8f 8b       	std	Y+23, r24	; 0x17
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	9c 8f       	std	Y+28, r25	; 0x1c
    246e:	8b 8f       	std	Y+27, r24	; 0x1b
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	8c 01       	movw	r16, r24
    2476:	c8 01       	movw	r24, r16
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <correct_left+0x246>
    247c:	8c 01       	movw	r16, r24
    247e:	1c 8f       	std	Y+28, r17	; 0x1c
    2480:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <correct_left+0x254>
    2484:	00 00       	nop
		}
	}
}
    2486:	6c 96       	adiw	r28, 0x1c	; 28
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <spl_left>:

void spl_left()
{
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	aa 97       	sbiw	r28, 0x2a	; 42
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
	stop();
    24b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 ea       	ldi	r26, 0xA0	; 160
    24be:	b1 e4       	ldi	r27, 0x41	; 65
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	69 81       	ldd	r22, Y+1	; 0x01
    24ca:	7a 81       	ldd	r23, Y+2	; 0x02
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	26 e6       	ldi	r18, 0x66	; 102
    24d2:	36 e6       	ldi	r19, 0x66	; 102
    24d4:	46 e6       	ldi	r20, 0x66	; 102
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	af 83       	std	Y+7, r26	; 0x07
    24e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24e8:	11 e0       	ldi	r17, 0x01	; 1
    24ea:	6d 81       	ldd	r22, Y+5	; 0x05
    24ec:	7e 81       	ldd	r23, Y+6	; 0x06
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	98 85       	ldd	r25, Y+8	; 0x08
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    24fe:	88 23       	and	r24, r24
    2500:	0c f0       	brlt	.+2      	; 0x2504 <spl_left+0x68>
    2502:	10 e0       	ldi	r17, 0x00	; 0
    2504:	11 23       	and	r17, r17
    2506:	29 f0       	breq	.+10     	; 0x2512 <spl_left+0x76>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9a 87       	std	Y+10, r25	; 0x0a
    250e:	89 87       	std	Y+9, r24	; 0x09
    2510:	46 c0       	rjmp	.+140    	; 0x259e <spl_left+0x102>
	else if (__tmp > 65535)
    2512:	11 e0       	ldi	r17, 0x01	; 1
    2514:	6d 81       	ldd	r22, Y+5	; 0x05
    2516:	7e 81       	ldd	r23, Y+6	; 0x06
    2518:	8f 81       	ldd	r24, Y+7	; 0x07
    251a:	98 85       	ldd	r25, Y+8	; 0x08
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2528:	18 16       	cp	r1, r24
    252a:	0c f0       	brlt	.+2      	; 0x252e <spl_left+0x92>
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	11 23       	and	r17, r17
    2530:	61 f1       	breq	.+88     	; 0x258a <spl_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	69 81       	ldd	r22, Y+1	; 0x01
    2534:	7a 81       	ldd	r23, Y+2	; 0x02
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9a 87       	std	Y+10, r25	; 0x0a
    2558:	89 87       	std	Y+9, r24	; 0x09
    255a:	12 c0       	rjmp	.+36     	; 0x2580 <spl_left+0xe4>
    255c:	80 e7       	ldi	r24, 0x70	; 112
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c 87       	std	Y+12, r25	; 0x0c
    2562:	8b 87       	std	Y+11, r24	; 0x0b
    2564:	8b 85       	ldd	r24, Y+11	; 0x0b
    2566:	9c 85       	ldd	r25, Y+12	; 0x0c
    2568:	8c 01       	movw	r16, r24
    256a:	c8 01       	movw	r24, r16
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <spl_left+0xd0>
    2570:	8c 01       	movw	r16, r24
    2572:	1c 87       	std	Y+12, r17	; 0x0c
    2574:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9a 87       	std	Y+10, r25	; 0x0a
    257e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	51 f7       	brne	.-44     	; 0x255c <spl_left+0xc0>
    2588:	17 c0       	rjmp	.+46     	; 0x25b8 <spl_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6d 81       	ldd	r22, Y+5	; 0x05
    258c:	7e 81       	ldd	r23, Y+6	; 0x06
    258e:	8f 81       	ldd	r24, Y+7	; 0x07
    2590:	98 85       	ldd	r25, Y+8	; 0x08
    2592:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a 87       	std	Y+10, r25	; 0x0a
    259c:	89 87       	std	Y+9, r24	; 0x09
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	9e 87       	std	Y+14, r25	; 0x0e
    25a4:	8d 87       	std	Y+13, r24	; 0x0d
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	8c 01       	movw	r16, r24
    25ac:	c8 01       	movw	r24, r16
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <spl_left+0x112>
    25b2:	8c 01       	movw	r16, r24
    25b4:	1e 87       	std	Y+14, r17	; 0x0e
    25b6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(35);
    25b8:	83 e2       	ldi	r24, 0x23	; 35
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    25c0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <spl_left+0x12c>
		{
		stop();
		_delay_ms(20);
		break;	
		}
	}
    25c6:	00 00       	nop
	_delay_ms(20);
	left_degrees(35);
	left();
	while(1)
	{
		read_line();
    25c8:	81 ea       	ldi	r24, 0xA1	; 161
    25ca:	93 e3       	ldi	r25, 0x33	; 51
    25cc:	fc 01       	movw	r30, r24
    25ce:	19 95       	eicall
		if(Center_white_line>=25)
    25d0:	80 91 55 03 	lds	r24, 0x0355
    25d4:	89 31       	cpi	r24, 0x19	; 25
    25d6:	b8 f3       	brcs	.-18     	; 0x25c6 <spl_left+0x12a>
		{
		stop();
    25d8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 ea       	ldi	r26, 0xA0	; 160
    25e2:	b1 e4       	ldi	r27, 0x41	; 65
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
    25e6:	98 8b       	std	Y+16, r25	; 0x10
    25e8:	a9 8b       	std	Y+17, r26	; 0x11
    25ea:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    25ee:	78 89       	ldd	r23, Y+16	; 0x10
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	26 e6       	ldi	r18, 0x66	; 102
    25f6:	36 e6       	ldi	r19, 0x66	; 102
    25f8:	46 e6       	ldi	r20, 0x66	; 102
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	ad 8b       	std	Y+21, r26	; 0x15
    260a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    260c:	11 e0       	ldi	r17, 0x01	; 1
    260e:	6b 89       	ldd	r22, Y+19	; 0x13
    2610:	7c 89       	ldd	r23, Y+20	; 0x14
    2612:	8d 89       	ldd	r24, Y+21	; 0x15
    2614:	9e 89       	ldd	r25, Y+22	; 0x16
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2622:	88 23       	and	r24, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <spl_left+0x18c>
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	11 23       	and	r17, r17
    262a:	29 f0       	breq	.+10     	; 0x2636 <spl_left+0x19a>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 8f       	std	Y+24, r25	; 0x18
    2632:	8f 8b       	std	Y+23, r24	; 0x17
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <spl_left+0x226>
	else if (__tmp > 65535)
    2636:	11 e0       	ldi	r17, 0x01	; 1
    2638:	6b 89       	ldd	r22, Y+19	; 0x13
    263a:	7c 89       	ldd	r23, Y+20	; 0x14
    263c:	8d 89       	ldd	r24, Y+21	; 0x15
    263e:	9e 89       	ldd	r25, Y+22	; 0x16
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    264c:	18 16       	cp	r1, r24
    264e:	0c f0       	brlt	.+2      	; 0x2652 <spl_left+0x1b6>
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	11 23       	and	r17, r17
    2654:	61 f1       	breq	.+88     	; 0x26ae <spl_left+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6f 85       	ldd	r22, Y+15	; 0x0f
    2658:	78 89       	ldd	r23, Y+16	; 0x10
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	98 8f       	std	Y+24, r25	; 0x18
    267c:	8f 8b       	std	Y+23, r24	; 0x17
    267e:	12 c0       	rjmp	.+36     	; 0x26a4 <spl_left+0x208>
    2680:	80 e7       	ldi	r24, 0x70	; 112
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	8c 01       	movw	r16, r24
    268e:	c8 01       	movw	r24, r16
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <spl_left+0x1f4>
    2694:	8c 01       	movw	r16, r24
    2696:	1a 8f       	std	Y+26, r17	; 0x1a
    2698:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	98 8f       	std	Y+24, r25	; 0x18
    26a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8f 89       	ldd	r24, Y+23	; 0x17
    26a6:	98 8d       	ldd	r25, Y+24	; 0x18
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	51 f7       	brne	.-44     	; 0x2680 <spl_left+0x1e4>
    26ac:	18 c0       	rjmp	.+48     	; 0x26de <spl_left+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6b 89       	ldd	r22, Y+19	; 0x13
    26b0:	7c 89       	ldd	r23, Y+20	; 0x14
    26b2:	8d 89       	ldd	r24, Y+21	; 0x15
    26b4:	9e 89       	ldd	r25, Y+22	; 0x16
    26b6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 8f       	std	Y+24, r25	; 0x18
    26c0:	8f 8b       	std	Y+23, r24	; 0x17
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	9c 8f       	std	Y+28, r25	; 0x1c
    26c8:	8b 8f       	std	Y+27, r24	; 0x1b
    26ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ce:	8c 01       	movw	r16, r24
    26d0:	c8 01       	movw	r24, r16
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <spl_left+0x236>
    26d6:	8c 01       	movw	r16, r24
    26d8:	1c 8f       	std	Y+28, r17	; 0x1c
    26da:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(20);
		break;	
    26dc:	00 c0       	rjmp	.+0      	; 0x26de <spl_left+0x242>
    26de:	00 00       	nop
		}
	}
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 ea       	ldi	r26, 0xA0	; 160
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ea:	9e 8f       	std	Y+30, r25	; 0x1e
    26ec:	af 8f       	std	Y+31, r26	; 0x1f
    26ee:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	lds	r25, 0x48
    26f8:	26 e6       	ldi	r18, 0x66	; 102
    26fa:	36 e6       	ldi	r19, 0x66	; 102
    26fc:	46 e6       	ldi	r20, 0x66	; 102
    26fe:	55 e4       	ldi	r21, 0x45	; 69
    2700:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	89 a3       	lds	r24, 0x59
    270a:	9a a3       	lds	r25, 0x5a
    270c:	ab a3       	lds	r26, 0x5b
    270e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2710:	11 e0       	ldi	r17, 0x01	; 1
    2712:	69 a1       	lds	r22, 0x49
    2714:	7a a1       	lds	r23, 0x4a
    2716:	8b a1       	lds	r24, 0x4b
    2718:	9c a1       	lds	r25, 0x4c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2726:	88 23       	and	r24, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <spl_left+0x290>
    272a:	10 e0       	ldi	r17, 0x00	; 0
    272c:	11 23       	and	r17, r17
    272e:	29 f0       	breq	.+10     	; 0x273a <spl_left+0x29e>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9e a3       	lds	r25, 0x5e
    2736:	8d a3       	lds	r24, 0x5d
    2738:	46 c0       	rjmp	.+140    	; 0x27c6 <spl_left+0x32a>
	else if (__tmp > 65535)
    273a:	11 e0       	ldi	r17, 0x01	; 1
    273c:	69 a1       	lds	r22, 0x49
    273e:	7a a1       	lds	r23, 0x4a
    2740:	8b a1       	lds	r24, 0x4b
    2742:	9c a1       	lds	r25, 0x4c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2750:	18 16       	cp	r1, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <spl_left+0x2ba>
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	11 23       	and	r17, r17
    2758:	61 f1       	breq	.+88     	; 0x27b2 <spl_left+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    275c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    275e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2760:	98 a1       	lds	r25, 0x48
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e a3       	lds	r25, 0x5e
    2780:	8d a3       	lds	r24, 0x5d
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <spl_left+0x30c>
    2784:	80 e7       	ldi	r24, 0x70	; 112
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	98 a7       	lds	r25, 0x78
    278a:	8f a3       	lds	r24, 0x5f
    278c:	8f a1       	lds	r24, 0x4f
    278e:	98 a5       	lds	r25, 0x68
    2790:	8c 01       	movw	r16, r24
    2792:	c8 01       	movw	r24, r16
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <spl_left+0x2f8>
    2798:	8c 01       	movw	r16, r24
    279a:	18 a7       	lds	r17, 0x78
    279c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d a1       	lds	r24, 0x4d
    27a0:	9e a1       	lds	r25, 0x4e
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e a3       	lds	r25, 0x5e
    27a6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d a1       	lds	r24, 0x4d
    27aa:	9e a1       	lds	r25, 0x4e
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	51 f7       	brne	.-44     	; 0x2784 <spl_left+0x2e8>
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <spl_left+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a1       	lds	r22, 0x49
    27b4:	7a a1       	lds	r23, 0x4a
    27b6:	8b a1       	lds	r24, 0x4b
    27b8:	9c a1       	lds	r25, 0x4c
    27ba:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e a3       	lds	r25, 0x5e
    27c4:	8d a3       	lds	r24, 0x5d
    27c6:	8d a1       	lds	r24, 0x4d
    27c8:	9e a1       	lds	r25, 0x4e
    27ca:	9a a7       	lds	r25, 0x7a
    27cc:	89 a7       	lds	r24, 0x79
    27ce:	89 a5       	lds	r24, 0x69
    27d0:	9a a5       	lds	r25, 0x6a
    27d2:	8c 01       	movw	r16, r24
    27d4:	c8 01       	movw	r24, r16
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <spl_left+0x33a>
    27da:	8c 01       	movw	r16, r24
    27dc:	1a a7       	lds	r17, 0x7a
    27de:	09 a7       	lds	r16, 0x79
	_delay_ms(20);
}
    27e0:	aa 96       	adiw	r28, 0x2a	; 42
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <spl_right>:

void spl_right()
{
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	6c 97       	sbiw	r28, 0x1c	; 28
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
	right_degrees(25);
    280e:	89 e1       	ldi	r24, 0x19	; 25
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    2816:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    281a:	01 c0       	rjmp	.+2      	; 0x281e <spl_right+0x28>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    281c:	00 00       	nop
{
	right_degrees(25);
	right();
	while(1)
	{
		read_line();
    281e:	81 ea       	ldi	r24, 0xA1	; 161
    2820:	93 e3       	ldi	r25, 0x33	; 51
    2822:	fc 01       	movw	r30, r24
    2824:	19 95       	eicall
		if(Center_white_line>=25)
    2826:	80 91 55 03 	lds	r24, 0x0355
    282a:	89 31       	cpi	r24, 0x19	; 25
    282c:	b8 f3       	brcs	.-18     	; 0x281c <spl_right+0x26>
		{
			stop();
    282e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 ea       	ldi	r26, 0xA0	; 160
    2838:	b1 e4       	ldi	r27, 0x41	; 65
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	ab 83       	std	Y+3, r26	; 0x03
    2840:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2842:	69 81       	ldd	r22, Y+1	; 0x01
    2844:	7a 81       	ldd	r23, Y+2	; 0x02
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	26 e6       	ldi	r18, 0x66	; 102
    284c:	36 e6       	ldi	r19, 0x66	; 102
    284e:	46 e6       	ldi	r20, 0x66	; 102
    2850:	55 e4       	ldi	r21, 0x45	; 69
    2852:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	af 83       	std	Y+7, r26	; 0x07
    2860:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2862:	11 e0       	ldi	r17, 0x01	; 1
    2864:	6d 81       	ldd	r22, Y+5	; 0x05
    2866:	7e 81       	ldd	r23, Y+6	; 0x06
    2868:	8f 81       	ldd	r24, Y+7	; 0x07
    286a:	98 85       	ldd	r25, Y+8	; 0x08
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2878:	88 23       	and	r24, r24
    287a:	0c f0       	brlt	.+2      	; 0x287e <spl_right+0x88>
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	11 23       	and	r17, r17
    2880:	29 f0       	breq	.+10     	; 0x288c <spl_right+0x96>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 87       	std	Y+10, r25	; 0x0a
    2888:	89 87       	std	Y+9, r24	; 0x09
    288a:	46 c0       	rjmp	.+140    	; 0x2918 <spl_right+0x122>
	else if (__tmp > 65535)
    288c:	11 e0       	ldi	r17, 0x01	; 1
    288e:	6d 81       	ldd	r22, Y+5	; 0x05
    2890:	7e 81       	ldd	r23, Y+6	; 0x06
    2892:	8f 81       	ldd	r24, Y+7	; 0x07
    2894:	98 85       	ldd	r25, Y+8	; 0x08
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <spl_right+0xb2>
    28a6:	10 e0       	ldi	r17, 0x00	; 0
    28a8:	11 23       	and	r17, r17
    28aa:	61 f1       	breq	.+88     	; 0x2904 <spl_right+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	69 81       	ldd	r22, Y+1	; 0x01
    28ae:	7a 81       	ldd	r23, Y+2	; 0x02
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a 87       	std	Y+10, r25	; 0x0a
    28d2:	89 87       	std	Y+9, r24	; 0x09
    28d4:	12 c0       	rjmp	.+36     	; 0x28fa <spl_right+0x104>
    28d6:	80 e7       	ldi	r24, 0x70	; 112
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	9c 87       	std	Y+12, r25	; 0x0c
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e2:	8c 01       	movw	r16, r24
    28e4:	c8 01       	movw	r24, r16
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <spl_right+0xf0>
    28ea:	8c 01       	movw	r16, r24
    28ec:	1c 87       	std	Y+12, r17	; 0x0c
    28ee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9a 87       	std	Y+10, r25	; 0x0a
    28f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	51 f7       	brne	.-44     	; 0x28d6 <spl_right+0xe0>
    2902:	18 c0       	rjmp	.+48     	; 0x2934 <spl_right+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6d 81       	ldd	r22, Y+5	; 0x05
    2906:	7e 81       	ldd	r23, Y+6	; 0x06
    2908:	8f 81       	ldd	r24, Y+7	; 0x07
    290a:	98 85       	ldd	r25, Y+8	; 0x08
    290c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9a 87       	std	Y+10, r25	; 0x0a
    2916:	89 87       	std	Y+9, r24	; 0x09
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	9e 87       	std	Y+14, r25	; 0x0e
    291e:	8d 87       	std	Y+13, r24	; 0x0d
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	8c 01       	movw	r16, r24
    2926:	c8 01       	movw	r24, r16
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <spl_right+0x132>
    292c:	8c 01       	movw	r16, r24
    292e:	1e 87       	std	Y+14, r17	; 0x0e
    2930:	0d 87       	std	Y+13, r16	; 0x0d
			_delay_ms(20);
			break;
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <spl_right+0x13e>
    2934:	00 00       	nop
		}
	}
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 ea       	ldi	r26, 0xA0	; 160
    293c:	b1 e4       	ldi	r27, 0x41	; 65
    293e:	8f 87       	std	Y+15, r24	; 0x0f
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	a9 8b       	std	Y+17, r26	; 0x11
    2944:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6f 85       	ldd	r22, Y+15	; 0x0f
    2948:	78 89       	ldd	r23, Y+16	; 0x10
    294a:	89 89       	ldd	r24, Y+17	; 0x11
    294c:	9a 89       	ldd	r25, Y+18	; 0x12
    294e:	26 e6       	ldi	r18, 0x66	; 102
    2950:	36 e6       	ldi	r19, 0x66	; 102
    2952:	46 e6       	ldi	r20, 0x66	; 102
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	ad 8b       	std	Y+21, r26	; 0x15
    2964:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2966:	11 e0       	ldi	r17, 0x01	; 1
    2968:	6b 89       	ldd	r22, Y+19	; 0x13
    296a:	7c 89       	ldd	r23, Y+20	; 0x14
    296c:	8d 89       	ldd	r24, Y+21	; 0x15
    296e:	9e 89       	ldd	r25, Y+22	; 0x16
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    297c:	88 23       	and	r24, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <spl_right+0x18c>
    2980:	10 e0       	ldi	r17, 0x00	; 0
    2982:	11 23       	and	r17, r17
    2984:	29 f0       	breq	.+10     	; 0x2990 <spl_right+0x19a>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	98 8f       	std	Y+24, r25	; 0x18
    298c:	8f 8b       	std	Y+23, r24	; 0x17
    298e:	46 c0       	rjmp	.+140    	; 0x2a1c <spl_right+0x226>
	else if (__tmp > 65535)
    2990:	11 e0       	ldi	r17, 0x01	; 1
    2992:	6b 89       	ldd	r22, Y+19	; 0x13
    2994:	7c 89       	ldd	r23, Y+20	; 0x14
    2996:	8d 89       	ldd	r24, Y+21	; 0x15
    2998:	9e 89       	ldd	r25, Y+22	; 0x16
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	0c f0       	brlt	.+2      	; 0x29ac <spl_right+0x1b6>
    29aa:	10 e0       	ldi	r17, 0x00	; 0
    29ac:	11 23       	and	r17, r17
    29ae:	61 f1       	breq	.+88     	; 0x2a08 <spl_right+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    29b2:	78 89       	ldd	r23, Y+16	; 0x10
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	9a 89       	ldd	r25, Y+18	; 0x12
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	98 8f       	std	Y+24, r25	; 0x18
    29d6:	8f 8b       	std	Y+23, r24	; 0x17
    29d8:	12 c0       	rjmp	.+36     	; 0x29fe <spl_right+0x208>
    29da:	80 e7       	ldi	r24, 0x70	; 112
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	9a 8f       	std	Y+26, r25	; 0x1a
    29e0:	89 8f       	std	Y+25, r24	; 0x19
    29e2:	89 8d       	ldd	r24, Y+25	; 0x19
    29e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29e6:	8c 01       	movw	r16, r24
    29e8:	c8 01       	movw	r24, r16
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <spl_right+0x1f4>
    29ee:	8c 01       	movw	r16, r24
    29f0:	1a 8f       	std	Y+26, r17	; 0x1a
    29f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	98 8f       	std	Y+24, r25	; 0x18
    29fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	51 f7       	brne	.-44     	; 0x29da <spl_right+0x1e4>
    2a06:	17 c0       	rjmp	.+46     	; 0x2a36 <spl_right+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6b 89       	ldd	r22, Y+19	; 0x13
    2a0a:	7c 89       	ldd	r23, Y+20	; 0x14
    2a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a0e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a10:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	98 8f       	std	Y+24, r25	; 0x18
    2a1a:	8f 8b       	std	Y+23, r24	; 0x17
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	9c 8f       	std	Y+28, r25	; 0x1c
    2a22:	8b 8f       	std	Y+27, r24	; 0x1b
    2a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a28:	8c 01       	movw	r16, r24
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <spl_right+0x236>
    2a30:	8c 01       	movw	r16, r24
    2a32:	1c 8f       	std	Y+28, r17	; 0x1c
    2a34:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(20);
}
    2a36:	6c 96       	adiw	r28, 0x1c	; 28
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <spl_left2>:



*/
void spl_left2()
{// FOR FRONT PICK FROM LEFT DIRECTION
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	6c 97       	sbiw	r28, 0x1c	; 28
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
	stop();
    2a64:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a6e:	b1 e4       	ldi	r27, 0x41	; 65
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	ab 83       	std	Y+3, r26	; 0x03
    2a76:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	69 81       	ldd	r22, Y+1	; 0x01
    2a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	26 e6       	ldi	r18, 0x66	; 102
    2a82:	36 e6       	ldi	r19, 0x66	; 102
    2a84:	46 e6       	ldi	r20, 0x66	; 102
    2a86:	55 e4       	ldi	r21, 0x45	; 69
    2a88:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	af 83       	std	Y+7, r26	; 0x07
    2a96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a98:	11 e0       	ldi	r17, 0x01	; 1
    2a9a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a9c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	98 85       	ldd	r25, Y+8	; 0x08
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	0c f0       	brlt	.+2      	; 0x2ab4 <spl_left2+0x68>
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	11 23       	and	r17, r17
    2ab6:	29 f0       	breq	.+10     	; 0x2ac2 <spl_left2+0x76>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a 87       	std	Y+10, r25	; 0x0a
    2abe:	89 87       	std	Y+9, r24	; 0x09
    2ac0:	46 c0       	rjmp	.+140    	; 0x2b4e <spl_left2+0x102>
	else if (__tmp > 65535)
    2ac2:	11 e0       	ldi	r17, 0x01	; 1
    2ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    2aca:	98 85       	ldd	r25, Y+8	; 0x08
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <spl_left2+0x92>
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	11 23       	and	r17, r17
    2ae0:	61 f1       	breq	.+88     	; 0x2b3a <spl_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	69 81       	ldd	r22, Y+1	; 0x01
    2ae4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a 87       	std	Y+10, r25	; 0x0a
    2b08:	89 87       	std	Y+9, r24	; 0x09
    2b0a:	12 c0       	rjmp	.+36     	; 0x2b30 <spl_left2+0xe4>
    2b0c:	80 e7       	ldi	r24, 0x70	; 112
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
    2b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b18:	8c 01       	movw	r16, r24
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <spl_left2+0xd0>
    2b20:	8c 01       	movw	r16, r24
    2b22:	1c 87       	std	Y+12, r17	; 0x0c
    2b24:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9a 87       	std	Y+10, r25	; 0x0a
    2b2e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	51 f7       	brne	.-44     	; 0x2b0c <spl_left2+0xc0>
    2b38:	17 c0       	rjmp	.+46     	; 0x2b68 <spl_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b3c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9a 87       	std	Y+10, r25	; 0x0a
    2b4c:	89 87       	std	Y+9, r24	; 0x09
    2b4e:	89 85       	ldd	r24, Y+9	; 0x09
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	9e 87       	std	Y+14, r25	; 0x0e
    2b54:	8d 87       	std	Y+13, r24	; 0x0d
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	8c 01       	movw	r16, r24
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <spl_left2+0x112>
    2b62:	8c 01       	movw	r16, r24
    2b64:	1e 87       	std	Y+14, r17	; 0x0e
    2b66:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_2_degrees(30);
    2b68:	8e e1       	ldi	r24, 0x1E	; 30
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <soft_left_2_degrees>
	soft_left_2();
    2b70:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <spl_left2+0x12c>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    2b76:	00 00       	nop
	_delay_ms(20);
	soft_left_2_degrees(30);
	soft_left_2();
	while(1)
	{
		read_line();
    2b78:	81 ea       	ldi	r24, 0xA1	; 161
    2b7a:	93 e3       	ldi	r25, 0x33	; 51
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	19 95       	eicall
		if(Center_white_line>25)
    2b80:	80 91 55 03 	lds	r24, 0x0355
    2b84:	8a 31       	cpi	r24, 0x1A	; 26
    2b86:	b8 f3       	brcs	.-18     	; 0x2b76 <spl_left2+0x12a>
		{
			stop();
    2b88:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 ea       	ldi	r26, 0xA0	; 160
    2b92:	b1 e4       	ldi	r27, 0x41	; 65
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
    2b96:	98 8b       	std	Y+16, r25	; 0x10
    2b98:	a9 8b       	std	Y+17, r26	; 0x11
    2b9a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b9e:	78 89       	ldd	r23, Y+16	; 0x10
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	26 e6       	ldi	r18, 0x66	; 102
    2ba6:	36 e6       	ldi	r19, 0x66	; 102
    2ba8:	46 e6       	ldi	r20, 0x66	; 102
    2baa:	55 e4       	ldi	r21, 0x45	; 69
    2bac:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	ad 8b       	std	Y+21, r26	; 0x15
    2bba:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2bbc:	11 e0       	ldi	r17, 0x01	; 1
    2bbe:	6b 89       	ldd	r22, Y+19	; 0x13
    2bc0:	7c 89       	ldd	r23, Y+20	; 0x14
    2bc2:	8d 89       	ldd	r24, Y+21	; 0x15
    2bc4:	9e 89       	ldd	r25, Y+22	; 0x16
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <spl_left2+0x18c>
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	11 23       	and	r17, r17
    2bda:	29 f0       	breq	.+10     	; 0x2be6 <spl_left2+0x19a>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 8f       	std	Y+24, r25	; 0x18
    2be2:	8f 8b       	std	Y+23, r24	; 0x17
    2be4:	46 c0       	rjmp	.+140    	; 0x2c72 <spl_left2+0x226>
	else if (__tmp > 65535)
    2be6:	11 e0       	ldi	r17, 0x01	; 1
    2be8:	6b 89       	ldd	r22, Y+19	; 0x13
    2bea:	7c 89       	ldd	r23, Y+20	; 0x14
    2bec:	8d 89       	ldd	r24, Y+21	; 0x15
    2bee:	9e 89       	ldd	r25, Y+22	; 0x16
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	3f ef       	ldi	r19, 0xFF	; 255
    2bf4:	4f e7       	ldi	r20, 0x7F	; 127
    2bf6:	57 e4       	ldi	r21, 0x47	; 71
    2bf8:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2bfc:	18 16       	cp	r1, r24
    2bfe:	0c f0       	brlt	.+2      	; 0x2c02 <spl_left2+0x1b6>
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	11 23       	and	r17, r17
    2c04:	61 f1       	breq	.+88     	; 0x2c5e <spl_left2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c08:	78 89       	ldd	r23, Y+16	; 0x10
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e2       	ldi	r20, 0x20	; 32
    2c14:	51 e4       	ldi	r21, 0x41	; 65
    2c16:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	98 8f       	std	Y+24, r25	; 0x18
    2c2c:	8f 8b       	std	Y+23, r24	; 0x17
    2c2e:	12 c0       	rjmp	.+36     	; 0x2c54 <spl_left2+0x208>
    2c30:	80 e7       	ldi	r24, 0x70	; 112
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	9a 8f       	std	Y+26, r25	; 0x1a
    2c36:	89 8f       	std	Y+25, r24	; 0x19
    2c38:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3c:	8c 01       	movw	r16, r24
    2c3e:	c8 01       	movw	r24, r16
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <spl_left2+0x1f4>
    2c44:	8c 01       	movw	r16, r24
    2c46:	1a 8f       	std	Y+26, r17	; 0x1a
    2c48:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	98 8f       	std	Y+24, r25	; 0x18
    2c52:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	51 f7       	brne	.-44     	; 0x2c30 <spl_left2+0x1e4>
    2c5c:	18 c0       	rjmp	.+48     	; 0x2c8e <spl_left2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6b 89       	ldd	r22, Y+19	; 0x13
    2c60:	7c 89       	ldd	r23, Y+20	; 0x14
    2c62:	8d 89       	ldd	r24, Y+21	; 0x15
    2c64:	9e 89       	ldd	r25, Y+22	; 0x16
    2c66:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	98 8f       	std	Y+24, r25	; 0x18
    2c70:	8f 8b       	std	Y+23, r24	; 0x17
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	9c 8f       	std	Y+28, r25	; 0x1c
    2c78:	8b 8f       	std	Y+27, r24	; 0x1b
    2c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7e:	8c 01       	movw	r16, r24
    2c80:	c8 01       	movw	r24, r16
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <spl_left2+0x236>
    2c86:	8c 01       	movw	r16, r24
    2c88:	1c 8f       	std	Y+28, r17	; 0x1c
    2c8a:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <spl_left2+0x244>
    2c8e:	00 00       	nop
		}
	}
}
    2c90:	6c 96       	adiw	r28, 0x1c	; 28
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <spl_right2>:

void spl_right2()
{//FOR FRONT WHEN BOT IS COMING FROM RIGHT
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	6c 97       	sbiw	r28, 0x1c	; 28
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
	stop();
    2cbe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cc8:	b1 e4       	ldi	r27, 0x41	; 65
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	ab 83       	std	Y+3, r26	; 0x03
    2cd0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	69 81       	ldd	r22, Y+1	; 0x01
    2cd4:	7a 81       	ldd	r23, Y+2	; 0x02
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	26 e6       	ldi	r18, 0x66	; 102
    2cdc:	36 e6       	ldi	r19, 0x66	; 102
    2cde:	46 e6       	ldi	r20, 0x66	; 102
    2ce0:	55 e4       	ldi	r21, 0x45	; 69
    2ce2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	af 83       	std	Y+7, r26	; 0x07
    2cf0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2cf2:	11 e0       	ldi	r17, 0x01	; 1
    2cf4:	6d 81       	ldd	r22, Y+5	; 0x05
    2cf6:	7e 81       	ldd	r23, Y+6	; 0x06
    2cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfa:	98 85       	ldd	r25, Y+8	; 0x08
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <spl_right2+0x68>
    2d0c:	10 e0       	ldi	r17, 0x00	; 0
    2d0e:	11 23       	and	r17, r17
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <spl_right2+0x76>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9a 87       	std	Y+10, r25	; 0x0a
    2d18:	89 87       	std	Y+9, r24	; 0x09
    2d1a:	46 c0       	rjmp	.+140    	; 0x2da8 <spl_right2+0x102>
	else if (__tmp > 65535)
    2d1c:	11 e0       	ldi	r17, 0x01	; 1
    2d1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d20:	7e 81       	ldd	r23, Y+6	; 0x06
    2d22:	8f 81       	ldd	r24, Y+7	; 0x07
    2d24:	98 85       	ldd	r25, Y+8	; 0x08
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <spl_right2+0x92>
    2d36:	10 e0       	ldi	r17, 0x00	; 0
    2d38:	11 23       	and	r17, r17
    2d3a:	61 f1       	breq	.+88     	; 0x2d94 <spl_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	69 81       	ldd	r22, Y+1	; 0x01
    2d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a 87       	std	Y+10, r25	; 0x0a
    2d62:	89 87       	std	Y+9, r24	; 0x09
    2d64:	12 c0       	rjmp	.+36     	; 0x2d8a <spl_right2+0xe4>
    2d66:	80 e7       	ldi	r24, 0x70	; 112
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	9c 87       	std	Y+12, r25	; 0x0c
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d72:	8c 01       	movw	r16, r24
    2d74:	c8 01       	movw	r24, r16
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <spl_right2+0xd0>
    2d7a:	8c 01       	movw	r16, r24
    2d7c:	1c 87       	std	Y+12, r17	; 0x0c
    2d7e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9a 87       	std	Y+10, r25	; 0x0a
    2d88:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	51 f7       	brne	.-44     	; 0x2d66 <spl_right2+0xc0>
    2d92:	17 c0       	rjmp	.+46     	; 0x2dc2 <spl_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6d 81       	ldd	r22, Y+5	; 0x05
    2d96:	7e 81       	ldd	r23, Y+6	; 0x06
    2d98:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9a:	98 85       	ldd	r25, Y+8	; 0x08
    2d9c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9a 87       	std	Y+10, r25	; 0x0a
    2da6:	89 87       	std	Y+9, r24	; 0x09
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	9e 87       	std	Y+14, r25	; 0x0e
    2dae:	8d 87       	std	Y+13, r24	; 0x0d
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	8c 01       	movw	r16, r24
    2db6:	c8 01       	movw	r24, r16
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <spl_right2+0x112>
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	1e 87       	std	Y+14, r17	; 0x0e
    2dc0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_2_degrees(30);
    2dc2:	8e e1       	ldi	r24, 0x1E	; 30
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <soft_right_2_degrees>
	soft_right_2();
    2dca:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <spl_right2+0x12c>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    2dd0:	00 00       	nop
	_delay_ms(20);
	soft_right_2_degrees(30);
	soft_right_2();
	while(1)
	{
		read_line();
    2dd2:	81 ea       	ldi	r24, 0xA1	; 161
    2dd4:	93 e3       	ldi	r25, 0x33	; 51
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	19 95       	eicall
		if(Center_white_line>25)
    2dda:	80 91 55 03 	lds	r24, 0x0355
    2dde:	8a 31       	cpi	r24, 0x1A	; 26
    2de0:	b8 f3       	brcs	.-18     	; 0x2dd0 <spl_right2+0x12a>
		{
			stop();
    2de2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 ea       	ldi	r26, 0xA0	; 160
    2dec:	b1 e4       	ldi	r27, 0x41	; 65
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    2df0:	98 8b       	std	Y+16, r25	; 0x10
    2df2:	a9 8b       	std	Y+17, r26	; 0x11
    2df4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2df8:	78 89       	ldd	r23, Y+16	; 0x10
    2dfa:	89 89       	ldd	r24, Y+17	; 0x11
    2dfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dfe:	26 e6       	ldi	r18, 0x66	; 102
    2e00:	36 e6       	ldi	r19, 0x66	; 102
    2e02:	46 e6       	ldi	r20, 0x66	; 102
    2e04:	55 e4       	ldi	r21, 0x45	; 69
    2e06:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8b 8b       	std	Y+19, r24	; 0x13
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	ad 8b       	std	Y+21, r26	; 0x15
    2e14:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2e16:	11 e0       	ldi	r17, 0x01	; 1
    2e18:	6b 89       	ldd	r22, Y+19	; 0x13
    2e1a:	7c 89       	ldd	r23, Y+20	; 0x14
    2e1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2e1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	0c f0       	brlt	.+2      	; 0x2e32 <spl_right2+0x18c>
    2e30:	10 e0       	ldi	r17, 0x00	; 0
    2e32:	11 23       	and	r17, r17
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <spl_right2+0x19a>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	98 8f       	std	Y+24, r25	; 0x18
    2e3c:	8f 8b       	std	Y+23, r24	; 0x17
    2e3e:	46 c0       	rjmp	.+140    	; 0x2ecc <spl_right2+0x226>
	else if (__tmp > 65535)
    2e40:	11 e0       	ldi	r17, 0x01	; 1
    2e42:	6b 89       	ldd	r22, Y+19	; 0x13
    2e44:	7c 89       	ldd	r23, Y+20	; 0x14
    2e46:	8d 89       	ldd	r24, Y+21	; 0x15
    2e48:	9e 89       	ldd	r25, Y+22	; 0x16
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <spl_right2+0x1b6>
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    2e5c:	11 23       	and	r17, r17
    2e5e:	61 f1       	breq	.+88     	; 0x2eb8 <spl_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e62:	78 89       	ldd	r23, Y+16	; 0x10
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	98 8f       	std	Y+24, r25	; 0x18
    2e86:	8f 8b       	std	Y+23, r24	; 0x17
    2e88:	12 c0       	rjmp	.+36     	; 0x2eae <spl_right2+0x208>
    2e8a:	80 e7       	ldi	r24, 0x70	; 112
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e90:	89 8f       	std	Y+25, r24	; 0x19
    2e92:	89 8d       	ldd	r24, Y+25	; 0x19
    2e94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e96:	8c 01       	movw	r16, r24
    2e98:	c8 01       	movw	r24, r16
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <spl_right2+0x1f4>
    2e9e:	8c 01       	movw	r16, r24
    2ea0:	1a 8f       	std	Y+26, r17	; 0x1a
    2ea2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	98 8f       	std	Y+24, r25	; 0x18
    2eac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	51 f7       	brne	.-44     	; 0x2e8a <spl_right2+0x1e4>
    2eb6:	18 c0       	rjmp	.+48     	; 0x2ee8 <spl_right2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6b 89       	ldd	r22, Y+19	; 0x13
    2eba:	7c 89       	ldd	r23, Y+20	; 0x14
    2ebc:	8d 89       	ldd	r24, Y+21	; 0x15
    2ebe:	9e 89       	ldd	r25, Y+22	; 0x16
    2ec0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	98 8f       	std	Y+24, r25	; 0x18
    2eca:	8f 8b       	std	Y+23, r24	; 0x17
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	9c 8f       	std	Y+28, r25	; 0x1c
    2ed2:	8b 8f       	std	Y+27, r24	; 0x1b
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	8c 01       	movw	r16, r24
    2eda:	c8 01       	movw	r24, r16
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <spl_right2+0x236>
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ee4:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <spl_right2+0x244>
    2ee8:	00 00       	nop
		}
	}
}
    2eea:	6c 96       	adiw	r28, 0x1c	; 28
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <correct_left2>:

void correct_left2()
{   
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	6c 97       	sbiw	r28, 0x1c	; 28
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    stop();
    2f18:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a8 e4       	ldi	r26, 0x48	; 72
    2f22:	b2 e4       	ldi	r27, 0x42	; 66
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	ab 83       	std	Y+3, r26	; 0x03
    2f2a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	69 81       	ldd	r22, Y+1	; 0x01
    2f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	26 e6       	ldi	r18, 0x66	; 102
    2f36:	36 e6       	ldi	r19, 0x66	; 102
    2f38:	46 e6       	ldi	r20, 0x66	; 102
    2f3a:	55 e4       	ldi	r21, 0x45	; 69
    2f3c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	af 83       	std	Y+7, r26	; 0x07
    2f4a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f4c:	11 e0       	ldi	r17, 0x01	; 1
    2f4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f50:	7e 81       	ldd	r23, Y+6	; 0x06
    2f52:	8f 81       	ldd	r24, Y+7	; 0x07
    2f54:	98 85       	ldd	r25, Y+8	; 0x08
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <correct_left2+0x68>
    2f66:	10 e0       	ldi	r17, 0x00	; 0
    2f68:	11 23       	and	r17, r17
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <correct_left2+0x76>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9a 87       	std	Y+10, r25	; 0x0a
    2f72:	89 87       	std	Y+9, r24	; 0x09
    2f74:	46 c0       	rjmp	.+140    	; 0x3002 <correct_left2+0x102>
	else if (__tmp > 65535)
    2f76:	11 e0       	ldi	r17, 0x01	; 1
    2f78:	6d 81       	ldd	r22, Y+5	; 0x05
    2f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7e:	98 85       	ldd	r25, Y+8	; 0x08
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <correct_left2+0x92>
    2f90:	10 e0       	ldi	r17, 0x00	; 0
    2f92:	11 23       	and	r17, r17
    2f94:	61 f1       	breq	.+88     	; 0x2fee <correct_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	69 81       	ldd	r22, Y+1	; 0x01
    2f98:	7a 81       	ldd	r23, Y+2	; 0x02
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9a 87       	std	Y+10, r25	; 0x0a
    2fbc:	89 87       	std	Y+9, r24	; 0x09
    2fbe:	12 c0       	rjmp	.+36     	; 0x2fe4 <correct_left2+0xe4>
    2fc0:	80 e7       	ldi	r24, 0x70	; 112
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fcc:	8c 01       	movw	r16, r24
    2fce:	c8 01       	movw	r24, r16
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <correct_left2+0xd0>
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	1c 87       	std	Y+12, r17	; 0x0c
    2fd8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9a 87       	std	Y+10, r25	; 0x0a
    2fe2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	51 f7       	brne	.-44     	; 0x2fc0 <correct_left2+0xc0>
    2fec:	17 c0       	rjmp	.+46     	; 0x301c <correct_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6d 81       	ldd	r22, Y+5	; 0x05
    2ff0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	98 85       	ldd	r25, Y+8	; 0x08
    2ff6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9a 87       	std	Y+10, r25	; 0x0a
    3000:	89 87       	std	Y+9, r24	; 0x09
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	9e 87       	std	Y+14, r25	; 0x0e
    3008:	8d 87       	std	Y+13, r24	; 0x0d
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	8c 01       	movw	r16, r24
    3010:	c8 01       	movw	r24, r16
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <correct_left2+0x112>
    3016:	8c 01       	movw	r16, r24
    3018:	1e 87       	std	Y+14, r17	; 0x0e
    301a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	left_degrees(35);
    301c:	83 e2       	ldi	r24, 0x23	; 35
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    3024:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    3028:	01 c0       	rjmp	.+2      	; 0x302c <correct_left2+0x12c>
		{
			stop();
			_delay_ms(50);
			break;
		}
	}
    302a:	00 00       	nop
	_delay_ms(50);
	left_degrees(35);
	left();
	while(1)
	{   
		read_line();
    302c:	81 ea       	ldi	r24, 0xA1	; 161
    302e:	93 e3       	ldi	r25, 0x33	; 51
    3030:	fc 01       	movw	r30, r24
    3032:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 70))
    3034:	80 91 55 03 	lds	r24, 0x0355
    3038:	8f 30       	cpi	r24, 0x0F	; 15
    303a:	20 f0       	brcs	.+8      	; 0x3044 <correct_left2+0x144>
    303c:	80 91 56 03 	lds	r24, 0x0356
    3040:	8f 30       	cpi	r24, 0x0F	; 15
    3042:	20 f4       	brcc	.+8      	; 0x304c <correct_left2+0x14c>
    3044:	80 91 55 03 	lds	r24, 0x0355
    3048:	87 34       	cpi	r24, 0x47	; 71
    304a:	78 f3       	brcs	.-34     	; 0x302a <correct_left2+0x12a>
		{
			stop();
    304c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a8 e4       	ldi	r26, 0x48	; 72
    3056:	b2 e4       	ldi	r27, 0x42	; 66
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	98 8b       	std	Y+16, r25	; 0x10
    305c:	a9 8b       	std	Y+17, r26	; 0x11
    305e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3060:	6f 85       	ldd	r22, Y+15	; 0x0f
    3062:	78 89       	ldd	r23, Y+16	; 0x10
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	26 e6       	ldi	r18, 0x66	; 102
    306a:	36 e6       	ldi	r19, 0x66	; 102
    306c:	46 e6       	ldi	r20, 0x66	; 102
    306e:	55 e4       	ldi	r21, 0x45	; 69
    3070:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8b 8b       	std	Y+19, r24	; 0x13
    307a:	9c 8b       	std	Y+20, r25	; 0x14
    307c:	ad 8b       	std	Y+21, r26	; 0x15
    307e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3080:	11 e0       	ldi	r17, 0x01	; 1
    3082:	6b 89       	ldd	r22, Y+19	; 0x13
    3084:	7c 89       	ldd	r23, Y+20	; 0x14
    3086:	8d 89       	ldd	r24, Y+21	; 0x15
    3088:	9e 89       	ldd	r25, Y+22	; 0x16
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    3096:	88 23       	and	r24, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <correct_left2+0x19c>
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	11 23       	and	r17, r17
    309e:	29 f0       	breq	.+10     	; 0x30aa <correct_left2+0x1aa>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	98 8f       	std	Y+24, r25	; 0x18
    30a6:	8f 8b       	std	Y+23, r24	; 0x17
    30a8:	46 c0       	rjmp	.+140    	; 0x3136 <correct_left2+0x236>
	else if (__tmp > 65535)
    30aa:	11 e0       	ldi	r17, 0x01	; 1
    30ac:	6b 89       	ldd	r22, Y+19	; 0x13
    30ae:	7c 89       	ldd	r23, Y+20	; 0x14
    30b0:	8d 89       	ldd	r24, Y+21	; 0x15
    30b2:	9e 89       	ldd	r25, Y+22	; 0x16
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <correct_left2+0x1c6>
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	11 23       	and	r17, r17
    30c8:	61 f1       	breq	.+88     	; 0x3122 <correct_left2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    30cc:	78 89       	ldd	r23, Y+16	; 0x10
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	9a 89       	ldd	r25, Y+18	; 0x12
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	98 8f       	std	Y+24, r25	; 0x18
    30f0:	8f 8b       	std	Y+23, r24	; 0x17
    30f2:	12 c0       	rjmp	.+36     	; 0x3118 <correct_left2+0x218>
    30f4:	80 e7       	ldi	r24, 0x70	; 112
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	9a 8f       	std	Y+26, r25	; 0x1a
    30fa:	89 8f       	std	Y+25, r24	; 0x19
    30fc:	89 8d       	ldd	r24, Y+25	; 0x19
    30fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3100:	8c 01       	movw	r16, r24
    3102:	c8 01       	movw	r24, r16
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <correct_left2+0x204>
    3108:	8c 01       	movw	r16, r24
    310a:	1a 8f       	std	Y+26, r17	; 0x1a
    310c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	98 8f       	std	Y+24, r25	; 0x18
    3116:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3118:	8f 89       	ldd	r24, Y+23	; 0x17
    311a:	98 8d       	ldd	r25, Y+24	; 0x18
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	51 f7       	brne	.-44     	; 0x30f4 <correct_left2+0x1f4>
    3120:	18 c0       	rjmp	.+48     	; 0x3152 <correct_left2+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3122:	6b 89       	ldd	r22, Y+19	; 0x13
    3124:	7c 89       	ldd	r23, Y+20	; 0x14
    3126:	8d 89       	ldd	r24, Y+21	; 0x15
    3128:	9e 89       	ldd	r25, Y+22	; 0x16
    312a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	98 8f       	std	Y+24, r25	; 0x18
    3134:	8f 8b       	std	Y+23, r24	; 0x17
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	9c 8f       	std	Y+28, r25	; 0x1c
    313c:	8b 8f       	std	Y+27, r24	; 0x1b
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	8c 01       	movw	r16, r24
    3144:	c8 01       	movw	r24, r16
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <correct_left2+0x246>
    314a:	8c 01       	movw	r16, r24
    314c:	1c 8f       	std	Y+28, r17	; 0x1c
    314e:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <correct_left2+0x254>
    3152:	00 00       	nop
		}
	}
}
    3154:	6c 96       	adiw	r28, 0x1c	; 28
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	08 95       	ret

0000316a <correct_right3>:

void correct_right3()
{   
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	6c 97       	sbiw	r28, 0x1c	; 28
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
	stop();
    3182:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 ea       	ldi	r26, 0xA0	; 160
    318c:	b1 e4       	ldi	r27, 0x41	; 65
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	ab 83       	std	Y+3, r26	; 0x03
    3194:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3196:	69 81       	ldd	r22, Y+1	; 0x01
    3198:	7a 81       	ldd	r23, Y+2	; 0x02
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	26 e6       	ldi	r18, 0x66	; 102
    31a0:	36 e6       	ldi	r19, 0x66	; 102
    31a2:	46 e6       	ldi	r20, 0x66	; 102
    31a4:	55 e4       	ldi	r21, 0x45	; 69
    31a6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	af 83       	std	Y+7, r26	; 0x07
    31b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    31b6:	11 e0       	ldi	r17, 0x01	; 1
    31b8:	6d 81       	ldd	r22, Y+5	; 0x05
    31ba:	7e 81       	ldd	r23, Y+6	; 0x06
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <correct_right3+0x68>
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	11 23       	and	r17, r17
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <correct_right3+0x76>
		__ticks = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9a 87       	std	Y+10, r25	; 0x0a
    31dc:	89 87       	std	Y+9, r24	; 0x09
    31de:	46 c0       	rjmp	.+140    	; 0x326c <correct_right3+0x102>
	else if (__tmp > 65535)
    31e0:	11 e0       	ldi	r17, 0x01	; 1
    31e2:	6d 81       	ldd	r22, Y+5	; 0x05
    31e4:	7e 81       	ldd	r23, Y+6	; 0x06
    31e6:	8f 81       	ldd	r24, Y+7	; 0x07
    31e8:	98 85       	ldd	r25, Y+8	; 0x08
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <correct_right3+0x92>
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	11 23       	and	r17, r17
    31fe:	61 f1       	breq	.+88     	; 0x3258 <correct_right3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3200:	69 81       	ldd	r22, Y+1	; 0x01
    3202:	7a 81       	ldd	r23, Y+2	; 0x02
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e2       	ldi	r20, 0x20	; 32
    320e:	51 e4       	ldi	r21, 0x41	; 65
    3210:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a 87       	std	Y+10, r25	; 0x0a
    3226:	89 87       	std	Y+9, r24	; 0x09
    3228:	12 c0       	rjmp	.+36     	; 0x324e <correct_right3+0xe4>
    322a:	80 e7       	ldi	r24, 0x70	; 112
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	9c 87       	std	Y+12, r25	; 0x0c
    3230:	8b 87       	std	Y+11, r24	; 0x0b
    3232:	8b 85       	ldd	r24, Y+11	; 0x0b
    3234:	9c 85       	ldd	r25, Y+12	; 0x0c
    3236:	8c 01       	movw	r16, r24
    3238:	c8 01       	movw	r24, r16
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <correct_right3+0xd0>
    323e:	8c 01       	movw	r16, r24
    3240:	1c 87       	std	Y+12, r17	; 0x0c
    3242:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9a 87       	std	Y+10, r25	; 0x0a
    324c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	51 f7       	brne	.-44     	; 0x322a <correct_right3+0xc0>
    3256:	17 c0       	rjmp	.+46     	; 0x3286 <correct_right3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 81       	ldd	r22, Y+5	; 0x05
    325a:	7e 81       	ldd	r23, Y+6	; 0x06
    325c:	8f 81       	ldd	r24, Y+7	; 0x07
    325e:	98 85       	ldd	r25, Y+8	; 0x08
    3260:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9a 87       	std	Y+10, r25	; 0x0a
    326a:	89 87       	std	Y+9, r24	; 0x09
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	9e 87       	std	Y+14, r25	; 0x0e
    3272:	8d 87       	std	Y+13, r24	; 0x0d
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	8c 01       	movw	r16, r24
    327a:	c8 01       	movw	r24, r16
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <correct_right3+0x112>
    3280:	8c 01       	movw	r16, r24
    3282:	1e 87       	std	Y+14, r17	; 0x0e
    3284:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	right_degrees(160);
    3286:	80 ea       	ldi	r24, 0xA0	; 160
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    328e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <correct_right3+0x12c>
		if(Center_white_line>25)
		{
			stop();
			break;
		}
	}
    3294:	00 00       	nop
	_delay_ms(20);
	right_degrees(160);
	right();
	while(1)
	{
		read_line();
    3296:	81 ea       	ldi	r24, 0xA1	; 161
    3298:	93 e3       	ldi	r25, 0x33	; 51
    329a:	fc 01       	movw	r30, r24
    329c:	19 95       	eicall
		if(Center_white_line>25)
    329e:	80 91 55 03 	lds	r24, 0x0355
    32a2:	8a 31       	cpi	r24, 0x1A	; 26
    32a4:	b8 f3       	brcs	.-18     	; 0x3294 <correct_right3+0x12a>
		{
			stop();
    32a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			break;
    32aa:	00 00       	nop
		}
	}
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 e2       	ldi	r26, 0x20	; 32
    32b2:	b2 e4       	ldi	r27, 0x42	; 66
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
    32b6:	98 8b       	std	Y+16, r25	; 0x10
    32b8:	a9 8b       	std	Y+17, r26	; 0x11
    32ba:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    32be:	78 89       	ldd	r23, Y+16	; 0x10
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	9a 89       	ldd	r25, Y+18	; 0x12
    32c4:	26 e6       	ldi	r18, 0x66	; 102
    32c6:	36 e6       	ldi	r19, 0x66	; 102
    32c8:	46 e6       	ldi	r20, 0x66	; 102
    32ca:	55 e4       	ldi	r21, 0x45	; 69
    32cc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	9c 8b       	std	Y+20, r25	; 0x14
    32d8:	ad 8b       	std	Y+21, r26	; 0x15
    32da:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    32dc:	11 e0       	ldi	r17, 0x01	; 1
    32de:	6b 89       	ldd	r22, Y+19	; 0x13
    32e0:	7c 89       	ldd	r23, Y+20	; 0x14
    32e2:	8d 89       	ldd	r24, Y+21	; 0x15
    32e4:	9e 89       	ldd	r25, Y+22	; 0x16
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    32f2:	88 23       	and	r24, r24
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <correct_right3+0x18e>
    32f6:	10 e0       	ldi	r17, 0x00	; 0
    32f8:	11 23       	and	r17, r17
    32fa:	29 f0       	breq	.+10     	; 0x3306 <correct_right3+0x19c>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	98 8f       	std	Y+24, r25	; 0x18
    3302:	8f 8b       	std	Y+23, r24	; 0x17
    3304:	46 c0       	rjmp	.+140    	; 0x3392 <correct_right3+0x228>
	else if (__tmp > 65535)
    3306:	11 e0       	ldi	r17, 0x01	; 1
    3308:	6b 89       	ldd	r22, Y+19	; 0x13
    330a:	7c 89       	ldd	r23, Y+20	; 0x14
    330c:	8d 89       	ldd	r24, Y+21	; 0x15
    330e:	9e 89       	ldd	r25, Y+22	; 0x16
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    331c:	18 16       	cp	r1, r24
    331e:	0c f0       	brlt	.+2      	; 0x3322 <correct_right3+0x1b8>
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	11 23       	and	r17, r17
    3324:	61 f1       	breq	.+88     	; 0x337e <correct_right3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	6f 85       	ldd	r22, Y+15	; 0x0f
    3328:	78 89       	ldd	r23, Y+16	; 0x10
    332a:	89 89       	ldd	r24, Y+17	; 0x11
    332c:	9a 89       	ldd	r25, Y+18	; 0x12
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	98 8f       	std	Y+24, r25	; 0x18
    334c:	8f 8b       	std	Y+23, r24	; 0x17
    334e:	12 c0       	rjmp	.+36     	; 0x3374 <correct_right3+0x20a>
    3350:	80 e7       	ldi	r24, 0x70	; 112
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	9a 8f       	std	Y+26, r25	; 0x1a
    3356:	89 8f       	std	Y+25, r24	; 0x19
    3358:	89 8d       	ldd	r24, Y+25	; 0x19
    335a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    335c:	8c 01       	movw	r16, r24
    335e:	c8 01       	movw	r24, r16
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <correct_right3+0x1f6>
    3364:	8c 01       	movw	r16, r24
    3366:	1a 8f       	std	Y+26, r17	; 0x1a
    3368:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	98 8f       	std	Y+24, r25	; 0x18
    3372:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	51 f7       	brne	.-44     	; 0x3350 <correct_right3+0x1e6>
    337c:	17 c0       	rjmp	.+46     	; 0x33ac <correct_right3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	6b 89       	ldd	r22, Y+19	; 0x13
    3380:	7c 89       	ldd	r23, Y+20	; 0x14
    3382:	8d 89       	ldd	r24, Y+21	; 0x15
    3384:	9e 89       	ldd	r25, Y+22	; 0x16
    3386:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	98 8f       	std	Y+24, r25	; 0x18
    3390:	8f 8b       	std	Y+23, r24	; 0x17
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	9c 8f       	std	Y+28, r25	; 0x1c
    3398:	8b 8f       	std	Y+27, r24	; 0x1b
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	8c 01       	movw	r16, r24
    33a0:	c8 01       	movw	r24, r16
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <correct_right3+0x238>
    33a6:	8c 01       	movw	r16, r24
    33a8:	1c 8f       	std	Y+28, r17	; 0x1c
    33aa:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    33ac:	88 e2       	ldi	r24, 0x28	; 40
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    33b4:	6c 96       	adiw	r28, 0x1c	; 28
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <correct_left3>:

void correct_left3()
{   
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	6c 97       	sbiw	r28, 0x1c	; 28
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
	stop();
    33e2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 ea       	ldi	r26, 0xA0	; 160
    33ec:	b1 e4       	ldi	r27, 0x41	; 65
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	ab 83       	std	Y+3, r26	; 0x03
    33f4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	69 81       	ldd	r22, Y+1	; 0x01
    33f8:	7a 81       	ldd	r23, Y+2	; 0x02
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	26 e6       	ldi	r18, 0x66	; 102
    3400:	36 e6       	ldi	r19, 0x66	; 102
    3402:	46 e6       	ldi	r20, 0x66	; 102
    3404:	55 e4       	ldi	r21, 0x45	; 69
    3406:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	af 83       	std	Y+7, r26	; 0x07
    3414:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3416:	11 e0       	ldi	r17, 0x01	; 1
    3418:	6d 81       	ldd	r22, Y+5	; 0x05
    341a:	7e 81       	ldd	r23, Y+6	; 0x06
    341c:	8f 81       	ldd	r24, Y+7	; 0x07
    341e:	98 85       	ldd	r25, Y+8	; 0x08
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e8       	ldi	r20, 0x80	; 128
    3426:	5f e3       	ldi	r21, 0x3F	; 63
    3428:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    342c:	88 23       	and	r24, r24
    342e:	0c f0       	brlt	.+2      	; 0x3432 <correct_left3+0x68>
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	11 23       	and	r17, r17
    3434:	29 f0       	breq	.+10     	; 0x3440 <correct_left3+0x76>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9a 87       	std	Y+10, r25	; 0x0a
    343c:	89 87       	std	Y+9, r24	; 0x09
    343e:	46 c0       	rjmp	.+140    	; 0x34cc <correct_left3+0x102>
	else if (__tmp > 65535)
    3440:	11 e0       	ldi	r17, 0x01	; 1
    3442:	6d 81       	ldd	r22, Y+5	; 0x05
    3444:	7e 81       	ldd	r23, Y+6	; 0x06
    3446:	8f 81       	ldd	r24, Y+7	; 0x07
    3448:	98 85       	ldd	r25, Y+8	; 0x08
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    3456:	18 16       	cp	r1, r24
    3458:	0c f0       	brlt	.+2      	; 0x345c <correct_left3+0x92>
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	11 23       	and	r17, r17
    345e:	61 f1       	breq	.+88     	; 0x34b8 <correct_left3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	69 81       	ldd	r22, Y+1	; 0x01
    3462:	7a 81       	ldd	r23, Y+2	; 0x02
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9a 87       	std	Y+10, r25	; 0x0a
    3486:	89 87       	std	Y+9, r24	; 0x09
    3488:	12 c0       	rjmp	.+36     	; 0x34ae <correct_left3+0xe4>
    348a:	80 e7       	ldi	r24, 0x70	; 112
    348c:	91 e0       	ldi	r25, 0x01	; 1
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	8b 87       	std	Y+11, r24	; 0x0b
    3492:	8b 85       	ldd	r24, Y+11	; 0x0b
    3494:	9c 85       	ldd	r25, Y+12	; 0x0c
    3496:	8c 01       	movw	r16, r24
    3498:	c8 01       	movw	r24, r16
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <correct_left3+0xd0>
    349e:	8c 01       	movw	r16, r24
    34a0:	1c 87       	std	Y+12, r17	; 0x0c
    34a2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9a 87       	std	Y+10, r25	; 0x0a
    34ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	51 f7       	brne	.-44     	; 0x348a <correct_left3+0xc0>
    34b6:	17 c0       	rjmp	.+46     	; 0x34e6 <correct_left3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6d 81       	ldd	r22, Y+5	; 0x05
    34ba:	7e 81       	ldd	r23, Y+6	; 0x06
    34bc:	8f 81       	ldd	r24, Y+7	; 0x07
    34be:	98 85       	ldd	r25, Y+8	; 0x08
    34c0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a 87       	std	Y+10, r25	; 0x0a
    34ca:	89 87       	std	Y+9, r24	; 0x09
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	9e 87       	std	Y+14, r25	; 0x0e
    34d2:	8d 87       	std	Y+13, r24	; 0x0d
    34d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d8:	8c 01       	movw	r16, r24
    34da:	c8 01       	movw	r24, r16
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <correct_left3+0x112>
    34e0:	8c 01       	movw	r16, r24
    34e2:	1e 87       	std	Y+14, r17	; 0x0e
    34e4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(160);
    34e6:	80 ea       	ldi	r24, 0xA0	; 160
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    34ee:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <correct_left3+0x12c>
		if(Center_white_line>25)
		{
			stop();
			break;
		}
	}
    34f4:	00 00       	nop
	_delay_ms(20);
	left_degrees(160);
	left();
	while(1)
	{
		read_line();
    34f6:	81 ea       	ldi	r24, 0xA1	; 161
    34f8:	93 e3       	ldi	r25, 0x33	; 51
    34fa:	fc 01       	movw	r30, r24
    34fc:	19 95       	eicall
		if(Center_white_line>25)
    34fe:	80 91 55 03 	lds	r24, 0x0355
    3502:	8a 31       	cpi	r24, 0x1A	; 26
    3504:	b8 f3       	brcs	.-18     	; 0x34f4 <correct_left3+0x12a>
		{
			stop();
    3506:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			break;
    350a:	00 00       	nop
		}
	}
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	a0 e2       	ldi	r26, 0x20	; 32
    3512:	b2 e4       	ldi	r27, 0x42	; 66
    3514:	8f 87       	std	Y+15, r24	; 0x0f
    3516:	98 8b       	std	Y+16, r25	; 0x10
    3518:	a9 8b       	std	Y+17, r26	; 0x11
    351a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    351c:	6f 85       	ldd	r22, Y+15	; 0x0f
    351e:	78 89       	ldd	r23, Y+16	; 0x10
    3520:	89 89       	ldd	r24, Y+17	; 0x11
    3522:	9a 89       	ldd	r25, Y+18	; 0x12
    3524:	26 e6       	ldi	r18, 0x66	; 102
    3526:	36 e6       	ldi	r19, 0x66	; 102
    3528:	46 e6       	ldi	r20, 0x66	; 102
    352a:	55 e4       	ldi	r21, 0x45	; 69
    352c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	8b 8b       	std	Y+19, r24	; 0x13
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	ad 8b       	std	Y+21, r26	; 0x15
    353a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    353c:	11 e0       	ldi	r17, 0x01	; 1
    353e:	6b 89       	ldd	r22, Y+19	; 0x13
    3540:	7c 89       	ldd	r23, Y+20	; 0x14
    3542:	8d 89       	ldd	r24, Y+21	; 0x15
    3544:	9e 89       	ldd	r25, Y+22	; 0x16
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    3552:	88 23       	and	r24, r24
    3554:	0c f0       	brlt	.+2      	; 0x3558 <correct_left3+0x18e>
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	11 23       	and	r17, r17
    355a:	29 f0       	breq	.+10     	; 0x3566 <correct_left3+0x19c>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	98 8f       	std	Y+24, r25	; 0x18
    3562:	8f 8b       	std	Y+23, r24	; 0x17
    3564:	46 c0       	rjmp	.+140    	; 0x35f2 <correct_left3+0x228>
	else if (__tmp > 65535)
    3566:	11 e0       	ldi	r17, 0x01	; 1
    3568:	6b 89       	ldd	r22, Y+19	; 0x13
    356a:	7c 89       	ldd	r23, Y+20	; 0x14
    356c:	8d 89       	ldd	r24, Y+21	; 0x15
    356e:	9e 89       	ldd	r25, Y+22	; 0x16
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    357c:	18 16       	cp	r1, r24
    357e:	0c f0       	brlt	.+2      	; 0x3582 <correct_left3+0x1b8>
    3580:	10 e0       	ldi	r17, 0x00	; 0
    3582:	11 23       	and	r17, r17
    3584:	61 f1       	breq	.+88     	; 0x35de <correct_left3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3586:	6f 85       	ldd	r22, Y+15	; 0x0f
    3588:	78 89       	ldd	r23, Y+16	; 0x10
    358a:	89 89       	ldd	r24, Y+17	; 0x11
    358c:	9a 89       	ldd	r25, Y+18	; 0x12
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	98 8f       	std	Y+24, r25	; 0x18
    35ac:	8f 8b       	std	Y+23, r24	; 0x17
    35ae:	12 c0       	rjmp	.+36     	; 0x35d4 <correct_left3+0x20a>
    35b0:	80 e7       	ldi	r24, 0x70	; 112
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	9a 8f       	std	Y+26, r25	; 0x1a
    35b6:	89 8f       	std	Y+25, r24	; 0x19
    35b8:	89 8d       	ldd	r24, Y+25	; 0x19
    35ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35bc:	8c 01       	movw	r16, r24
    35be:	c8 01       	movw	r24, r16
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <correct_left3+0x1f6>
    35c4:	8c 01       	movw	r16, r24
    35c6:	1a 8f       	std	Y+26, r17	; 0x1a
    35c8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ca:	8f 89       	ldd	r24, Y+23	; 0x17
    35cc:	98 8d       	ldd	r25, Y+24	; 0x18
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	98 8f       	std	Y+24, r25	; 0x18
    35d2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d4:	8f 89       	ldd	r24, Y+23	; 0x17
    35d6:	98 8d       	ldd	r25, Y+24	; 0x18
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	51 f7       	brne	.-44     	; 0x35b0 <correct_left3+0x1e6>
    35dc:	17 c0       	rjmp	.+46     	; 0x360c <correct_left3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35de:	6b 89       	ldd	r22, Y+19	; 0x13
    35e0:	7c 89       	ldd	r23, Y+20	; 0x14
    35e2:	8d 89       	ldd	r24, Y+21	; 0x15
    35e4:	9e 89       	ldd	r25, Y+22	; 0x16
    35e6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	98 8f       	std	Y+24, r25	; 0x18
    35f0:	8f 8b       	std	Y+23, r24	; 0x17
    35f2:	8f 89       	ldd	r24, Y+23	; 0x17
    35f4:	98 8d       	ldd	r25, Y+24	; 0x18
    35f6:	9c 8f       	std	Y+28, r25	; 0x1c
    35f8:	8b 8f       	std	Y+27, r24	; 0x1b
    35fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fe:	8c 01       	movw	r16, r24
    3600:	c8 01       	movw	r24, r16
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <correct_left3+0x238>
    3606:	8c 01       	movw	r16, r24
    3608:	1c 8f       	std	Y+28, r17	; 0x1c
    360a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    360c:	88 e2       	ldi	r24, 0x28	; 40
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    3614:	6c 96       	adiw	r28, 0x1c	; 28
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	08 95       	ret

0000362a <adc_pin_config>:

*/

void adc_pin_config(void)

{
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62

    DDRF = 0x00;
    3632:	80 e3       	ldi	r24, 0x30	; 48
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	fc 01       	movw	r30, r24
    3638:	10 82       	st	Z, r1

    PORTF = 0x00;
    363a:	81 e3       	ldi	r24, 0x31	; 49
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	fc 01       	movw	r30, r24
    3640:	10 82       	st	Z, r1

    DDRK = 0x00;
    3642:	87 e0       	ldi	r24, 0x07	; 7
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	fc 01       	movw	r30, r24
    3648:	10 82       	st	Z, r1

    PORTK = 0x00;
    364a:	88 e0       	ldi	r24, 0x08	; 8
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	fc 01       	movw	r30, r24
    3650:	10 82       	st	Z, r1

}
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	08 95       	ret

00003658 <adc_init>:

*/

void adc_init() 

{
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0x00;
    3660:	8a e7       	ldi	r24, 0x7A	; 122
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	fc 01       	movw	r30, r24
    3666:	10 82       	st	Z, r1

	ADCSRB = 0x00; //MUX5 = 0
    3668:	8b e7       	ldi	r24, 0x7B	; 123
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	fc 01       	movw	r30, r24
    366e:	10 82       	st	Z, r1

	ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    3670:	8c e7       	ldi	r24, 0x7C	; 124
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	20 e2       	ldi	r18, 0x20	; 32
    3676:	fc 01       	movw	r30, r24
    3678:	20 83       	st	Z, r18

	ACSR = 0x80;
    367a:	80 e5       	ldi	r24, 0x50	; 80
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	20 e8       	ldi	r18, 0x80	; 128
    3680:	fc 01       	movw	r30, r24
    3682:	20 83       	st	Z, r18

	ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    3684:	8a e7       	ldi	r24, 0x7A	; 122
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	26 e8       	ldi	r18, 0x86	; 134
    368a:	fc 01       	movw	r30, r24
    368c:	20 83       	st	Z, r18

}
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	08 95       	ret

00003694 <ADC_Conversion>:

*/

unsigned char ADC_Conversion(unsigned char Ch) 

{
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	0f 92       	push	r0
    369a:	0f 92       	push	r0
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	8a 83       	std	Y+2, r24	; 0x02

	unsigned char a;

	if (Ch > 7)
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	88 30       	cpi	r24, 0x08	; 8
    36a6:	28 f0       	brcs	.+10     	; 0x36b2 <ADC_Conversion+0x1e>

	{

		ADCSRB = 0x08;
    36a8:	8b e7       	ldi	r24, 0x7B	; 123
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	28 e0       	ldi	r18, 0x08	; 8
    36ae:	fc 01       	movw	r30, r24
    36b0:	20 83       	st	Z, r18

	}

	Ch = Ch & 0x07;
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	87 70       	andi	r24, 0x07	; 7
    36b6:	8a 83       	std	Y+2, r24	; 0x02

	ADMUX = 0x20 | Ch;
    36b8:	8c e7       	ldi	r24, 0x7C	; 124
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	2a 81       	ldd	r18, Y+2	; 0x02
    36be:	20 62       	ori	r18, 0x20	; 32
    36c0:	fc 01       	movw	r30, r24
    36c2:	20 83       	st	Z, r18

	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
    36c4:	8a e7       	ldi	r24, 0x7A	; 122
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	2a e7       	ldi	r18, 0x7A	; 122
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	f9 01       	movw	r30, r18
    36ce:	20 81       	ld	r18, Z
    36d0:	20 64       	ori	r18, 0x40	; 64
    36d2:	fc 01       	movw	r30, r24
    36d4:	20 83       	st	Z, r18

	while ((ADCSRA & 0x10) == 0); //Wait for conversion to complete
    36d6:	00 00       	nop
    36d8:	8a e7       	ldi	r24, 0x7A	; 122
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	80 81       	ld	r24, Z
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	80 71       	andi	r24, 0x10	; 16
    36e6:	90 70       	andi	r25, 0x00	; 0
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	b1 f3       	breq	.-20     	; 0x36d8 <ADC_Conversion+0x44>

	a = ADCH;
    36ec:	89 e7       	ldi	r24, 0x79	; 121
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	fc 01       	movw	r30, r24
    36f2:	80 81       	ld	r24, Z
    36f4:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA = ADCSRA | 0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    36f6:	8a e7       	ldi	r24, 0x7A	; 122
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	2a e7       	ldi	r18, 0x7A	; 122
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	f9 01       	movw	r30, r18
    3700:	20 81       	ld	r18, Z
    3702:	20 61       	ori	r18, 0x10	; 16
    3704:	fc 01       	movw	r30, r24
    3706:	20 83       	st	Z, r18

	ADCSRB = 0x00;
    3708:	8b e7       	ldi	r24, 0x7B	; 123
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	fc 01       	movw	r30, r24
    370e:	10 82       	st	Z, r1

	return a;
    3710:	89 81       	ldd	r24, Y+1	; 0x01

}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <print_sensor>:

*/

void print_sensor(char row, char coloumn, unsigned char channel)

 {
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	00 d0       	rcall	.+0      	; 0x3722 <print_sensor+0x6>
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	6a 83       	std	Y+2, r22	; 0x02
    372a:	4b 83       	std	Y+3, r20	; 0x03



	ADC_Value = ADC_Conversion(channel);
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    3732:	80 93 c7 04 	sts	0x04C7, r24

	lcd_print(row, coloumn, ADC_Value, 3);
    3736:	80 91 c7 04 	lds	r24, 0x04C7
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	6a 81       	ldd	r22, Y+2	; 0x02
    3742:	a9 01       	movw	r20, r18
    3744:	23 e0       	ldi	r18, 0x03	; 3
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <__vector_35>:

*/

ISR(TIMER3_OVF_vect)

{
    3758:	1f 92       	push	r1
    375a:	0f 92       	push	r0
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	0f 92       	push	r0
    3760:	00 90 5b 00 	lds	r0, 0x005B
    3764:	0f 92       	push	r0
    3766:	11 24       	eor	r1, r1
    3768:	2f 93       	push	r18
    376a:	3f 93       	push	r19
    376c:	4f 93       	push	r20
    376e:	5f 93       	push	r21
    3770:	6f 93       	push	r22
    3772:	7f 93       	push	r23
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	af 93       	push	r26
    377a:	bf 93       	push	r27
    377c:	ef 93       	push	r30
    377e:	ff 93       	push	r31
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62

    read_line();
    3788:	81 ea       	ldi	r24, 0xA1	; 161
    378a:	93 e3       	ldi	r25, 0x33	; 51
    378c:	fc 01       	movw	r30, r24
    378e:	19 95       	eicall

    line_conditions();
    3790:	89 e2       	ldi	r24, 0x29	; 41
    3792:	94 e3       	ldi	r25, 0x34	; 52
    3794:	fc 01       	movw	r30, r24
    3796:	19 95       	eicall

    TCNT3 = 0xFDC0;
    3798:	84 e9       	ldi	r24, 0x94	; 148
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	20 ec       	ldi	r18, 0xC0	; 192
    379e:	3d ef       	ldi	r19, 0xFD	; 253
    37a0:	fc 01       	movw	r30, r24
    37a2:	31 83       	std	Z+1, r19	; 0x01
    37a4:	20 83       	st	Z, r18

}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	ff 91       	pop	r31
    37ac:	ef 91       	pop	r30
    37ae:	bf 91       	pop	r27
    37b0:	af 91       	pop	r26
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	7f 91       	pop	r23
    37b8:	6f 91       	pop	r22
    37ba:	5f 91       	pop	r21
    37bc:	4f 91       	pop	r20
    37be:	3f 91       	pop	r19
    37c0:	2f 91       	pop	r18
    37c2:	0f 90       	pop	r0
    37c4:	00 92 5b 00 	sts	0x005B, r0
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_45>:

*/

ISR(TIMER4_OVF_vect)

{
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	00 90 5b 00 	lds	r0, 0x005B
    37de:	0f 92       	push	r0
    37e0:	11 24       	eor	r1, r1
    37e2:	2f 93       	push	r18
    37e4:	3f 93       	push	r19
    37e6:	4f 93       	push	r20
    37e8:	5f 93       	push	r21
    37ea:	6f 93       	push	r22
    37ec:	7f 93       	push	r23
    37ee:	8f 93       	push	r24
    37f0:	9f 93       	push	r25
    37f2:	af 93       	push	r26
    37f4:	bf 93       	push	r27
    37f6:	ef 93       	push	r30
    37f8:	ff 93       	push	r31
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62

    TCNT4 = 0xE980;
    3802:	84 ea       	ldi	r24, 0xA4	; 164
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	20 e8       	ldi	r18, 0x80	; 128
    3808:	39 ee       	ldi	r19, 0xE9	; 233
    380a:	fc 01       	movw	r30, r24
    380c:	31 83       	std	Z+1, r19	; 0x01
    380e:	20 83       	st	Z, r18

    t4_sec++; //Increment every 0.1 sec
    3810:	80 91 57 03 	lds	r24, 0x0357
    3814:	90 91 58 03 	lds	r25, 0x0358
    3818:	01 96       	adiw	r24, 0x01	; 1
    381a:	90 93 58 03 	sts	0x0358, r25
    381e:	80 93 57 03 	sts	0x0357, r24



    if (t4_sec == t4_count && t4_flag == 1)
    3822:	20 91 57 03 	lds	r18, 0x0357
    3826:	30 91 58 03 	lds	r19, 0x0358
    382a:	80 91 cc 04 	lds	r24, 0x04CC
    382e:	90 91 cd 04 	lds	r25, 0x04CD
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	59 f4       	brne	.+22     	; 0x384e <__vector_45+0x7c>
    3838:	80 91 59 03 	lds	r24, 0x0359
    383c:	90 91 5a 03 	lds	r25, 0x035A
    3840:	81 30       	cpi	r24, 0x01	; 1
    3842:	91 05       	cpc	r25, r1
    3844:	21 f4       	brne	.+8      	; 0x384e <__vector_45+0x7c>

        stop_timer4();
    3846:	80 e6       	ldi	r24, 0x60	; 96
    3848:	9c e1       	ldi	r25, 0x1C	; 28
    384a:	fc 01       	movw	r30, r24
    384c:	19 95       	eicall

}
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	ff 91       	pop	r31
    3854:	ef 91       	pop	r30
    3856:	bf 91       	pop	r27
    3858:	af 91       	pop	r26
    385a:	9f 91       	pop	r25
    385c:	8f 91       	pop	r24
    385e:	7f 91       	pop	r23
    3860:	6f 91       	pop	r22
    3862:	5f 91       	pop	r21
    3864:	4f 91       	pop	r20
    3866:	3f 91       	pop	r19
    3868:	2f 91       	pop	r18
    386a:	0f 90       	pop	r0
    386c:	00 92 5b 00 	sts	0x005B, r0
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <start_timer4>:

*/

void start_timer4(int count)

{
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	0f 92       	push	r0
    3880:	0f 92       	push	r0
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01

    t4_flag = 1; //Indicate timer 4 is enabled
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	90 93 5a 03 	sts	0x035A, r25
    3892:	80 93 59 03 	sts	0x0359, r24

    t4_sec = 0;
    3896:	10 92 58 03 	sts	0x0358, r1
    389a:	10 92 57 03 	sts	0x0357, r1

    t4_count = count + 1;
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	90 93 cd 04 	sts	0x04CD, r25
    38a8:	80 93 cc 04 	sts	0x04CC, r24

    TIMSK4 = 0x01; //Timer 4 overflow interrupt enable
    38ac:	82 e7       	ldi	r24, 0x72	; 114
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	21 e0       	ldi	r18, 0x01	; 1
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 83       	st	Z, r18

}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <stop_timer4>:

*/

void stop_timer4()

{
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62

	t4_flag = 0;
    38c8:	10 92 5a 03 	sts	0x035A, r1
    38cc:	10 92 59 03 	sts	0x0359, r1

	t4_sec = 0;
    38d0:	10 92 58 03 	sts	0x0358, r1
    38d4:	10 92 57 03 	sts	0x0357, r1

	TIMSK4 = 0x00; //Timer4 overflow interrupt disable
    38d8:	82 e7       	ldi	r24, 0x72	; 114
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	fc 01       	movw	r30, r24
    38de:	10 82       	st	Z, r1

}
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <servo1_pin_config>:
unsigned char ii = 0;
signed char jj = 0;

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    38ee:	84 e2       	ldi	r24, 0x24	; 36
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	24 e2       	ldi	r18, 0x24	; 36
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	f9 01       	movw	r30, r18
    38f8:	20 81       	ld	r18, Z
    38fa:	20 62       	ori	r18, 0x20	; 32
    38fc:	fc 01       	movw	r30, r24
    38fe:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    3900:	85 e2       	ldi	r24, 0x25	; 37
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	25 e2       	ldi	r18, 0x25	; 37
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	f9 01       	movw	r30, r18
    390a:	20 81       	ld	r18, Z
    390c:	20 62       	ori	r18, 0x20	; 32
    390e:	fc 01       	movw	r30, r24
    3910:	20 83       	st	Z, r18
}
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	08 95       	ret

00003918 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    3920:	84 e2       	ldi	r24, 0x24	; 36
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	24 e2       	ldi	r18, 0x24	; 36
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	f9 01       	movw	r30, r18
    392a:	20 81       	ld	r18, Z
    392c:	20 64       	ori	r18, 0x40	; 64
    392e:	fc 01       	movw	r30, r24
    3930:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    3932:	85 e2       	ldi	r24, 0x25	; 37
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	25 e2       	ldi	r18, 0x25	; 37
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	f9 01       	movw	r30, r18
    393c:	20 81       	ld	r18, Z
    393e:	20 64       	ori	r18, 0x40	; 64
    3940:	fc 01       	movw	r30, r24
    3942:	20 83       	st	Z, r18
}
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	08 95       	ret

0000394a <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    3952:	84 e2       	ldi	r24, 0x24	; 36
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	24 e2       	ldi	r18, 0x24	; 36
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	f9 01       	movw	r30, r18
    395c:	20 81       	ld	r18, Z
    395e:	20 68       	ori	r18, 0x80	; 128
    3960:	fc 01       	movw	r30, r24
    3962:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    3964:	85 e2       	ldi	r24, 0x25	; 37
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	25 e2       	ldi	r18, 0x25	; 37
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	f9 01       	movw	r30, r18
    396e:	20 81       	ld	r18, Z
    3970:	20 68       	ori	r18, 0x80	; 128
    3972:	fc 01       	movw	r30, r24
    3974:	20 83       	st	Z, r18
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	08 95       	ret

0000397c <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	00 d0       	rcall	.+0      	; 0x3986 <servo_1+0xa>
    3986:	0f 92       	push	r0
    3988:	0f 92       	push	r0
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	dc 01       	movw	r26, r24
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	9a 83       	std	Y+2, r25	; 0x02
    399a:	ab 83       	std	Y+3, r26	; 0x03
    399c:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees * 0.512) + 34.56;
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	a0 e0       	ldi	r26, 0x00	; 0
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 82 96 	call	0x12d04	; 0x12d04 <__floatunsisf>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	2f e6       	ldi	r18, 0x6F	; 111
    39ba:	32 e1       	ldi	r19, 0x12	; 18
    39bc:	43 e0       	ldi	r20, 0x03	; 3
    39be:	5f e3       	ldi	r21, 0x3F	; 63
    39c0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	21 e7       	ldi	r18, 0x71	; 113
    39ce:	3d e3       	ldi	r19, 0x3D	; 61
    39d0:	4a e0       	ldi	r20, 0x0A	; 10
    39d2:	52 e4       	ldi	r21, 0x42	; 66
    39d4:	0e 94 86 95 	call	0x12b0c	; 0x12b0c <__addsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	ab 83       	std	Y+3, r26	; 0x03
    39e2:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    39e4:	89 e8       	ldi	r24, 0x89	; 137
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	fc 01       	movw	r30, r24
    39ea:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    39ec:	08 e8       	ldi	r16, 0x88	; 136
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	69 81       	ldd	r22, Y+1	; 0x01
    39f2:	7a 81       	ldd	r23, Y+2	; 0x02
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	9c 81       	ldd	r25, Y+4	; 0x04
    39f8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	f8 01       	movw	r30, r16
    3a02:	80 83       	st	Z, r24
}
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <servo_2+0xa>
    3a22:	0f 92       	push	r0
    3a24:	0f 92       	push	r0
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	dc 01       	movw	r26, r24
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	ab 83       	std	Y+3, r26	; 0x03
    3a38:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees * 0.512) + 34.56;
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 82 96 	call	0x12d04	; 0x12d04 <__floatunsisf>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	2f e6       	ldi	r18, 0x6F	; 111
    3a56:	32 e1       	ldi	r19, 0x12	; 18
    3a58:	43 e0       	ldi	r20, 0x03	; 3
    3a5a:	5f e3       	ldi	r21, 0x3F	; 63
    3a5c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	21 e7       	ldi	r18, 0x71	; 113
    3a6a:	3d e3       	ldi	r19, 0x3D	; 61
    3a6c:	4a e0       	ldi	r20, 0x0A	; 10
    3a6e:	52 e4       	ldi	r21, 0x42	; 66
    3a70:	0e 94 86 95 	call	0x12b0c	; 0x12b0c <__addsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	ab 83       	std	Y+3, r26	; 0x03
    3a7e:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    3a80:	8b e8       	ldi	r24, 0x8B	; 139
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	fc 01       	movw	r30, r24
    3a86:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    3a88:	0a e8       	ldi	r16, 0x8A	; 138
    3a8a:	10 e0       	ldi	r17, 0x00	; 0
    3a8c:	69 81       	ldd	r22, Y+1	; 0x01
    3a8e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	80 83       	st	Z, r24
}
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	08 95       	ret

00003ab4 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <servo_3+0xa>
    3abe:	0f 92       	push	r0
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	dc 01       	movw	r26, r24
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	ab 83       	std	Y+3, r26	; 0x03
    3ad4:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees * 0.512) + 34.56;
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	a0 e0       	ldi	r26, 0x00	; 0
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 82 96 	call	0x12d04	; 0x12d04 <__floatunsisf>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	2f e6       	ldi	r18, 0x6F	; 111
    3af2:	32 e1       	ldi	r19, 0x12	; 18
    3af4:	43 e0       	ldi	r20, 0x03	; 3
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	bc 01       	movw	r22, r24
    3b02:	cd 01       	movw	r24, r26
    3b04:	21 e7       	ldi	r18, 0x71	; 113
    3b06:	3d e3       	ldi	r19, 0x3D	; 61
    3b08:	4a e0       	ldi	r20, 0x0A	; 10
    3b0a:	52 e4       	ldi	r21, 0x42	; 66
    3b0c:	0e 94 86 95 	call	0x12b0c	; 0x12b0c <__addsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	ab 83       	std	Y+3, r26	; 0x03
    3b1a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    3b1c:	8d e8       	ldi	r24, 0x8D	; 141
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	fc 01       	movw	r30, r24
    3b22:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    3b24:	0c e8       	ldi	r16, 0x8C	; 140
    3b26:	10 e0       	ldi	r17, 0x00	; 0
    3b28:	69 81       	ldd	r22, Y+1	; 0x01
    3b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
}
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    3b58:	89 e8       	ldi	r24, 0x89	; 137
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	23 e0       	ldi	r18, 0x03	; 3
    3b5e:	fc 01       	movw	r30, r24
    3b60:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    3b62:	88 e8       	ldi	r24, 0x88	; 136
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	2f ef       	ldi	r18, 0xFF	; 255
    3b68:	fc 01       	movw	r30, r24
    3b6a:	20 83       	st	Z, r18
}
    3b6c:	df 91       	pop	r29
    3b6e:	cf 91       	pop	r28
    3b70:	08 95       	ret

00003b72 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    3b7a:	8b e8       	ldi	r24, 0x8B	; 139
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	23 e0       	ldi	r18, 0x03	; 3
    3b80:	fc 01       	movw	r30, r24
    3b82:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    3b84:	8a e8       	ldi	r24, 0x8A	; 138
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	2f ef       	ldi	r18, 0xFF	; 255
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	20 83       	st	Z, r18
}
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    3b9c:	8d e8       	ldi	r24, 0x8D	; 141
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	23 e0       	ldi	r18, 0x03	; 3
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    3ba6:	8c e8       	ldi	r24, 0x8C	; 140
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	2f ef       	ldi	r18, 0xFF	; 255
    3bac:	fc 01       	movw	r30, r24
    3bae:	20 83       	st	Z, r18
} 
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <gripper_open>:
void gripper_open()
{
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	6c 97       	sbiw	r28, 0x1c	; 28
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
	for(jj=0;jj<55;jj++)
    3bce:	10 92 5c 03 	sts	0x035C, r1
    3bd2:	89 c0       	rjmp	.+274    	; 0x3ce6 <gripper_open+0x130>
	{
		servo_3(jj);
    3bd4:	80 91 5c 03 	lds	r24, 0x035C
    3bd8:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	a0 e2       	ldi	r26, 0x20	; 32
    3be2:	b1 e4       	ldi	r27, 0x41	; 65
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	ab 83       	std	Y+3, r26	; 0x03
    3bea:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bec:	69 81       	ldd	r22, Y+1	; 0x01
    3bee:	7a 81       	ldd	r23, Y+2	; 0x02
    3bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf4:	26 e6       	ldi	r18, 0x66	; 102
    3bf6:	36 e6       	ldi	r19, 0x66	; 102
    3bf8:	46 e6       	ldi	r20, 0x66	; 102
    3bfa:	55 e4       	ldi	r21, 0x45	; 69
    3bfc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	8d 83       	std	Y+5, r24	; 0x05
    3c06:	9e 83       	std	Y+6, r25	; 0x06
    3c08:	af 83       	std	Y+7, r26	; 0x07
    3c0a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3c0c:	11 e0       	ldi	r17, 0x01	; 1
    3c0e:	6d 81       	ldd	r22, Y+5	; 0x05
    3c10:	7e 81       	ldd	r23, Y+6	; 0x06
    3c12:	8f 81       	ldd	r24, Y+7	; 0x07
    3c14:	98 85       	ldd	r25, Y+8	; 0x08
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e8       	ldi	r20, 0x80	; 128
    3c1c:	5f e3       	ldi	r21, 0x3F	; 63
    3c1e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    3c22:	88 23       	and	r24, r24
    3c24:	0c f0       	brlt	.+2      	; 0x3c28 <gripper_open+0x72>
    3c26:	10 e0       	ldi	r17, 0x00	; 0
    3c28:	11 23       	and	r17, r17
    3c2a:	29 f0       	breq	.+10     	; 0x3c36 <gripper_open+0x80>
		__ticks = 1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	9a 87       	std	Y+10, r25	; 0x0a
    3c32:	89 87       	std	Y+9, r24	; 0x09
    3c34:	46 c0       	rjmp	.+140    	; 0x3cc2 <gripper_open+0x10c>
	else if (__tmp > 65535)
    3c36:	11 e0       	ldi	r17, 0x01	; 1
    3c38:	6d 81       	ldd	r22, Y+5	; 0x05
    3c3a:	7e 81       	ldd	r23, Y+6	; 0x06
    3c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c3e:	98 85       	ldd	r25, Y+8	; 0x08
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	0c f0       	brlt	.+2      	; 0x3c52 <gripper_open+0x9c>
    3c50:	10 e0       	ldi	r17, 0x00	; 0
    3c52:	11 23       	and	r17, r17
    3c54:	61 f1       	breq	.+88     	; 0x3cae <gripper_open+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c56:	69 81       	ldd	r22, Y+1	; 0x01
    3c58:	7a 81       	ldd	r23, Y+2	; 0x02
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	51 e4       	ldi	r21, 0x41	; 65
    3c66:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9a 87       	std	Y+10, r25	; 0x0a
    3c7c:	89 87       	std	Y+9, r24	; 0x09
    3c7e:	12 c0       	rjmp	.+36     	; 0x3ca4 <gripper_open+0xee>
    3c80:	80 e7       	ldi	r24, 0x70	; 112
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	9c 87       	std	Y+12, r25	; 0x0c
    3c86:	8b 87       	std	Y+11, r24	; 0x0b
    3c88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8c:	8c 01       	movw	r16, r24
    3c8e:	c8 01       	movw	r24, r16
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <gripper_open+0xda>
    3c94:	8c 01       	movw	r16, r24
    3c96:	1c 87       	std	Y+12, r17	; 0x0c
    3c98:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	9a 87       	std	Y+10, r25	; 0x0a
    3ca2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	51 f7       	brne	.-44     	; 0x3c80 <gripper_open+0xca>
    3cac:	17 c0       	rjmp	.+46     	; 0x3cdc <gripper_open+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cae:	6d 81       	ldd	r22, Y+5	; 0x05
    3cb0:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb4:	98 85       	ldd	r25, Y+8	; 0x08
    3cb6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	9a 87       	std	Y+10, r25	; 0x0a
    3cc0:	89 87       	std	Y+9, r24	; 0x09
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	9e 87       	std	Y+14, r25	; 0x0e
    3cc8:	8d 87       	std	Y+13, r24	; 0x0d
    3cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cce:	8c 01       	movw	r16, r24
    3cd0:	c8 01       	movw	r24, r16
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	f1 f7       	brne	.-4      	; 0x3cd2 <gripper_open+0x11c>
    3cd6:	8c 01       	movw	r16, r24
    3cd8:	1e 87       	std	Y+14, r17	; 0x0e
    3cda:	0d 87       	std	Y+13, r16	; 0x0d
 OCR1CH = 0x03;
 OCR1CL = 0xFF; //Servo 3 off
} 
void gripper_open()
{
	for(jj=0;jj<55;jj++)
    3cdc:	80 91 5c 03 	lds	r24, 0x035C
    3ce0:	8f 5f       	subi	r24, 0xFF	; 255
    3ce2:	80 93 5c 03 	sts	0x035C, r24
    3ce6:	80 91 5c 03 	lds	r24, 0x035C
    3cea:	87 33       	cpi	r24, 0x37	; 55
    3cec:	0c f4       	brge	.+2      	; 0x3cf0 <gripper_open+0x13a>
    3cee:	72 cf       	rjmp	.-284    	; 0x3bd4 <gripper_open+0x1e>
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	a8 e4       	ldi	r26, 0x48	; 72
    3cf6:	b3 e4       	ldi	r27, 0x43	; 67
    3cf8:	8f 87       	std	Y+15, r24	; 0x0f
    3cfa:	98 8b       	std	Y+16, r25	; 0x10
    3cfc:	a9 8b       	std	Y+17, r26	; 0x11
    3cfe:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d00:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d02:	78 89       	ldd	r23, Y+16	; 0x10
    3d04:	89 89       	ldd	r24, Y+17	; 0x11
    3d06:	9a 89       	ldd	r25, Y+18	; 0x12
    3d08:	26 e6       	ldi	r18, 0x66	; 102
    3d0a:	36 e6       	ldi	r19, 0x66	; 102
    3d0c:	46 e6       	ldi	r20, 0x66	; 102
    3d0e:	55 e4       	ldi	r21, 0x45	; 69
    3d10:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	8b 8b       	std	Y+19, r24	; 0x13
    3d1a:	9c 8b       	std	Y+20, r25	; 0x14
    3d1c:	ad 8b       	std	Y+21, r26	; 0x15
    3d1e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3d20:	11 e0       	ldi	r17, 0x01	; 1
    3d22:	6b 89       	ldd	r22, Y+19	; 0x13
    3d24:	7c 89       	ldd	r23, Y+20	; 0x14
    3d26:	8d 89       	ldd	r24, Y+21	; 0x15
    3d28:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	0c f0       	brlt	.+2      	; 0x3d3c <gripper_open+0x186>
    3d3a:	10 e0       	ldi	r17, 0x00	; 0
    3d3c:	11 23       	and	r17, r17
    3d3e:	29 f0       	breq	.+10     	; 0x3d4a <gripper_open+0x194>
		__ticks = 1;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	98 8f       	std	Y+24, r25	; 0x18
    3d46:	8f 8b       	std	Y+23, r24	; 0x17
    3d48:	46 c0       	rjmp	.+140    	; 0x3dd6 <gripper_open+0x220>
	else if (__tmp > 65535)
    3d4a:	11 e0       	ldi	r17, 0x01	; 1
    3d4c:	6b 89       	ldd	r22, Y+19	; 0x13
    3d4e:	7c 89       	ldd	r23, Y+20	; 0x14
    3d50:	8d 89       	ldd	r24, Y+21	; 0x15
    3d52:	9e 89       	ldd	r25, Y+22	; 0x16
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	3f ef       	ldi	r19, 0xFF	; 255
    3d58:	4f e7       	ldi	r20, 0x7F	; 127
    3d5a:	57 e4       	ldi	r21, 0x47	; 71
    3d5c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    3d60:	18 16       	cp	r1, r24
    3d62:	0c f0       	brlt	.+2      	; 0x3d66 <gripper_open+0x1b0>
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	11 23       	and	r17, r17
    3d68:	61 f1       	breq	.+88     	; 0x3dc2 <gripper_open+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d6c:	78 89       	ldd	r23, Y+16	; 0x10
    3d6e:	89 89       	ldd	r24, Y+17	; 0x11
    3d70:	9a 89       	ldd	r25, Y+18	; 0x12
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e2       	ldi	r20, 0x20	; 32
    3d78:	51 e4       	ldi	r21, 0x41	; 65
    3d7a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	bc 01       	movw	r22, r24
    3d84:	cd 01       	movw	r24, r26
    3d86:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	98 8f       	std	Y+24, r25	; 0x18
    3d90:	8f 8b       	std	Y+23, r24	; 0x17
    3d92:	12 c0       	rjmp	.+36     	; 0x3db8 <gripper_open+0x202>
    3d94:	80 e7       	ldi	r24, 0x70	; 112
    3d96:	91 e0       	ldi	r25, 0x01	; 1
    3d98:	9a 8f       	std	Y+26, r25	; 0x1a
    3d9a:	89 8f       	std	Y+25, r24	; 0x19
    3d9c:	89 8d       	ldd	r24, Y+25	; 0x19
    3d9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3da0:	8c 01       	movw	r16, r24
    3da2:	c8 01       	movw	r24, r16
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <gripper_open+0x1ee>
    3da8:	8c 01       	movw	r16, r24
    3daa:	1a 8f       	std	Y+26, r17	; 0x1a
    3dac:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	8f 89       	ldd	r24, Y+23	; 0x17
    3db0:	98 8d       	ldd	r25, Y+24	; 0x18
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	98 8f       	std	Y+24, r25	; 0x18
    3db6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dba:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	51 f7       	brne	.-44     	; 0x3d94 <gripper_open+0x1de>
    3dc0:	17 c0       	rjmp	.+46     	; 0x3df0 <gripper_open+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc2:	6b 89       	ldd	r22, Y+19	; 0x13
    3dc4:	7c 89       	ldd	r23, Y+20	; 0x14
    3dc6:	8d 89       	ldd	r24, Y+21	; 0x15
    3dc8:	9e 89       	ldd	r25, Y+22	; 0x16
    3dca:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	98 8f       	std	Y+24, r25	; 0x18
    3dd4:	8f 8b       	std	Y+23, r24	; 0x17
    3dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dda:	9c 8f       	std	Y+28, r25	; 0x1c
    3ddc:	8b 8f       	std	Y+27, r24	; 0x1b
    3dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3de2:	8c 01       	movw	r16, r24
    3de4:	c8 01       	movw	r24, r16
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <gripper_open+0x230>
    3dea:	8c 01       	movw	r16, r24
    3dec:	1c 8f       	std	Y+28, r17	; 0x1c
    3dee:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_3(jj);
		_delay_ms(10);
	}
	_delay_ms(200);
}
    3df0:	6c 96       	adiw	r28, 0x1c	; 28
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <gripper_close>:

void gripper_close()
{
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	6c 97       	sbiw	r28, 0x1c	; 28
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	de bf       	out	0x3e, r29	; 62
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	cd bf       	out	0x3d, r28	; 61
	for(ii=55;ii>0;ii--)
    3e1e:	87 e3       	ldi	r24, 0x37	; 55
    3e20:	80 93 5b 03 	sts	0x035B, r24
    3e24:	89 c0       	rjmp	.+274    	; 0x3f38 <gripper_close+0x132>
	{
		servo_3(ii);
    3e26:	80 91 5b 03 	lds	r24, 0x035B
    3e2a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	a0 e2       	ldi	r26, 0x20	; 32
    3e34:	b1 e4       	ldi	r27, 0x41	; 65
    3e36:	89 83       	std	Y+1, r24	; 0x01
    3e38:	9a 83       	std	Y+2, r25	; 0x02
    3e3a:	ab 83       	std	Y+3, r26	; 0x03
    3e3c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e3e:	69 81       	ldd	r22, Y+1	; 0x01
    3e40:	7a 81       	ldd	r23, Y+2	; 0x02
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	9c 81       	ldd	r25, Y+4	; 0x04
    3e46:	26 e6       	ldi	r18, 0x66	; 102
    3e48:	36 e6       	ldi	r19, 0x66	; 102
    3e4a:	46 e6       	ldi	r20, 0x66	; 102
    3e4c:	55 e4       	ldi	r21, 0x45	; 69
    3e4e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	8d 83       	std	Y+5, r24	; 0x05
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	af 83       	std	Y+7, r26	; 0x07
    3e5c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3e5e:	11 e0       	ldi	r17, 0x01	; 1
    3e60:	6d 81       	ldd	r22, Y+5	; 0x05
    3e62:	7e 81       	ldd	r23, Y+6	; 0x06
    3e64:	8f 81       	ldd	r24, Y+7	; 0x07
    3e66:	98 85       	ldd	r25, Y+8	; 0x08
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e8       	ldi	r20, 0x80	; 128
    3e6e:	5f e3       	ldi	r21, 0x3F	; 63
    3e70:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    3e74:	88 23       	and	r24, r24
    3e76:	0c f0       	brlt	.+2      	; 0x3e7a <gripper_close+0x74>
    3e78:	10 e0       	ldi	r17, 0x00	; 0
    3e7a:	11 23       	and	r17, r17
    3e7c:	29 f0       	breq	.+10     	; 0x3e88 <gripper_close+0x82>
		__ticks = 1;
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	9a 87       	std	Y+10, r25	; 0x0a
    3e84:	89 87       	std	Y+9, r24	; 0x09
    3e86:	46 c0       	rjmp	.+140    	; 0x3f14 <gripper_close+0x10e>
	else if (__tmp > 65535)
    3e88:	11 e0       	ldi	r17, 0x01	; 1
    3e8a:	6d 81       	ldd	r22, Y+5	; 0x05
    3e8c:	7e 81       	ldd	r23, Y+6	; 0x06
    3e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e90:	98 85       	ldd	r25, Y+8	; 0x08
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	3f ef       	ldi	r19, 0xFF	; 255
    3e96:	4f e7       	ldi	r20, 0x7F	; 127
    3e98:	57 e4       	ldi	r21, 0x47	; 71
    3e9a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    3e9e:	18 16       	cp	r1, r24
    3ea0:	0c f0       	brlt	.+2      	; 0x3ea4 <gripper_close+0x9e>
    3ea2:	10 e0       	ldi	r17, 0x00	; 0
    3ea4:	11 23       	and	r17, r17
    3ea6:	61 f1       	breq	.+88     	; 0x3f00 <gripper_close+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea8:	69 81       	ldd	r22, Y+1	; 0x01
    3eaa:	7a 81       	ldd	r23, Y+2	; 0x02
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	40 e2       	ldi	r20, 0x20	; 32
    3eb6:	51 e4       	ldi	r21, 0x41	; 65
    3eb8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	9a 87       	std	Y+10, r25	; 0x0a
    3ece:	89 87       	std	Y+9, r24	; 0x09
    3ed0:	12 c0       	rjmp	.+36     	; 0x3ef6 <gripper_close+0xf0>
    3ed2:	80 e7       	ldi	r24, 0x70	; 112
    3ed4:	91 e0       	ldi	r25, 0x01	; 1
    3ed6:	9c 87       	std	Y+12, r25	; 0x0c
    3ed8:	8b 87       	std	Y+11, r24	; 0x0b
    3eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    3edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ede:	8c 01       	movw	r16, r24
    3ee0:	c8 01       	movw	r24, r16
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	f1 f7       	brne	.-4      	; 0x3ee2 <gripper_close+0xdc>
    3ee6:	8c 01       	movw	r16, r24
    3ee8:	1c 87       	std	Y+12, r17	; 0x0c
    3eea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eec:	89 85       	ldd	r24, Y+9	; 0x09
    3eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	9a 87       	std	Y+10, r25	; 0x0a
    3ef4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef6:	89 85       	ldd	r24, Y+9	; 0x09
    3ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	51 f7       	brne	.-44     	; 0x3ed2 <gripper_close+0xcc>
    3efe:	17 c0       	rjmp	.+46     	; 0x3f2e <gripper_close+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f00:	6d 81       	ldd	r22, Y+5	; 0x05
    3f02:	7e 81       	ldd	r23, Y+6	; 0x06
    3f04:	8f 81       	ldd	r24, Y+7	; 0x07
    3f06:	98 85       	ldd	r25, Y+8	; 0x08
    3f08:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	9a 87       	std	Y+10, r25	; 0x0a
    3f12:	89 87       	std	Y+9, r24	; 0x09
    3f14:	89 85       	ldd	r24, Y+9	; 0x09
    3f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f18:	9e 87       	std	Y+14, r25	; 0x0e
    3f1a:	8d 87       	std	Y+13, r24	; 0x0d
    3f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f20:	8c 01       	movw	r16, r24
    3f22:	c8 01       	movw	r24, r16
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <gripper_close+0x11e>
    3f28:	8c 01       	movw	r16, r24
    3f2a:	1e 87       	std	Y+14, r17	; 0x0e
    3f2c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void gripper_close()
{
	for(ii=55;ii>0;ii--)
    3f2e:	80 91 5b 03 	lds	r24, 0x035B
    3f32:	81 50       	subi	r24, 0x01	; 1
    3f34:	80 93 5b 03 	sts	0x035B, r24
    3f38:	80 91 5b 03 	lds	r24, 0x035B
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <gripper_close+0x13c>
    3f40:	72 cf       	rjmp	.-284    	; 0x3e26 <gripper_close+0x20>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	a8 e4       	ldi	r26, 0x48	; 72
    3f48:	b3 e4       	ldi	r27, 0x43	; 67
    3f4a:	8f 87       	std	Y+15, r24	; 0x0f
    3f4c:	98 8b       	std	Y+16, r25	; 0x10
    3f4e:	a9 8b       	std	Y+17, r26	; 0x11
    3f50:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f52:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f54:	78 89       	ldd	r23, Y+16	; 0x10
    3f56:	89 89       	ldd	r24, Y+17	; 0x11
    3f58:	9a 89       	ldd	r25, Y+18	; 0x12
    3f5a:	26 e6       	ldi	r18, 0x66	; 102
    3f5c:	36 e6       	ldi	r19, 0x66	; 102
    3f5e:	46 e6       	ldi	r20, 0x66	; 102
    3f60:	55 e4       	ldi	r21, 0x45	; 69
    3f62:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	8b 8b       	std	Y+19, r24	; 0x13
    3f6c:	9c 8b       	std	Y+20, r25	; 0x14
    3f6e:	ad 8b       	std	Y+21, r26	; 0x15
    3f70:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3f72:	11 e0       	ldi	r17, 0x01	; 1
    3f74:	6b 89       	ldd	r22, Y+19	; 0x13
    3f76:	7c 89       	ldd	r23, Y+20	; 0x14
    3f78:	8d 89       	ldd	r24, Y+21	; 0x15
    3f7a:	9e 89       	ldd	r25, Y+22	; 0x16
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e8       	ldi	r20, 0x80	; 128
    3f82:	5f e3       	ldi	r21, 0x3F	; 63
    3f84:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    3f88:	88 23       	and	r24, r24
    3f8a:	0c f0       	brlt	.+2      	; 0x3f8e <gripper_close+0x188>
    3f8c:	10 e0       	ldi	r17, 0x00	; 0
    3f8e:	11 23       	and	r17, r17
    3f90:	29 f0       	breq	.+10     	; 0x3f9c <gripper_close+0x196>
		__ticks = 1;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	98 8f       	std	Y+24, r25	; 0x18
    3f98:	8f 8b       	std	Y+23, r24	; 0x17
    3f9a:	46 c0       	rjmp	.+140    	; 0x4028 <gripper_close+0x222>
	else if (__tmp > 65535)
    3f9c:	11 e0       	ldi	r17, 0x01	; 1
    3f9e:	6b 89       	ldd	r22, Y+19	; 0x13
    3fa0:	7c 89       	ldd	r23, Y+20	; 0x14
    3fa2:	8d 89       	ldd	r24, Y+21	; 0x15
    3fa4:	9e 89       	ldd	r25, Y+22	; 0x16
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	3f ef       	ldi	r19, 0xFF	; 255
    3faa:	4f e7       	ldi	r20, 0x7F	; 127
    3fac:	57 e4       	ldi	r21, 0x47	; 71
    3fae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    3fb2:	18 16       	cp	r1, r24
    3fb4:	0c f0       	brlt	.+2      	; 0x3fb8 <gripper_close+0x1b2>
    3fb6:	10 e0       	ldi	r17, 0x00	; 0
    3fb8:	11 23       	and	r17, r17
    3fba:	61 f1       	breq	.+88     	; 0x4014 <gripper_close+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbc:	6f 85       	ldd	r22, Y+15	; 0x0f
    3fbe:	78 89       	ldd	r23, Y+16	; 0x10
    3fc0:	89 89       	ldd	r24, Y+17	; 0x11
    3fc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e2       	ldi	r20, 0x20	; 32
    3fca:	51 e4       	ldi	r21, 0x41	; 65
    3fcc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	98 8f       	std	Y+24, r25	; 0x18
    3fe2:	8f 8b       	std	Y+23, r24	; 0x17
    3fe4:	12 c0       	rjmp	.+36     	; 0x400a <gripper_close+0x204>
    3fe6:	80 e7       	ldi	r24, 0x70	; 112
    3fe8:	91 e0       	ldi	r25, 0x01	; 1
    3fea:	9a 8f       	std	Y+26, r25	; 0x1a
    3fec:	89 8f       	std	Y+25, r24	; 0x19
    3fee:	89 8d       	ldd	r24, Y+25	; 0x19
    3ff0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ff2:	8c 01       	movw	r16, r24
    3ff4:	c8 01       	movw	r24, r16
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <gripper_close+0x1f0>
    3ffa:	8c 01       	movw	r16, r24
    3ffc:	1a 8f       	std	Y+26, r17	; 0x1a
    3ffe:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4000:	8f 89       	ldd	r24, Y+23	; 0x17
    4002:	98 8d       	ldd	r25, Y+24	; 0x18
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	98 8f       	std	Y+24, r25	; 0x18
    4008:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400a:	8f 89       	ldd	r24, Y+23	; 0x17
    400c:	98 8d       	ldd	r25, Y+24	; 0x18
    400e:	00 97       	sbiw	r24, 0x00	; 0
    4010:	51 f7       	brne	.-44     	; 0x3fe6 <gripper_close+0x1e0>
    4012:	17 c0       	rjmp	.+46     	; 0x4042 <gripper_close+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4014:	6b 89       	ldd	r22, Y+19	; 0x13
    4016:	7c 89       	ldd	r23, Y+20	; 0x14
    4018:	8d 89       	ldd	r24, Y+21	; 0x15
    401a:	9e 89       	ldd	r25, Y+22	; 0x16
    401c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	98 8f       	std	Y+24, r25	; 0x18
    4026:	8f 8b       	std	Y+23, r24	; 0x17
    4028:	8f 89       	ldd	r24, Y+23	; 0x17
    402a:	98 8d       	ldd	r25, Y+24	; 0x18
    402c:	9c 8f       	std	Y+28, r25	; 0x1c
    402e:	8b 8f       	std	Y+27, r24	; 0x1b
    4030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4034:	8c 01       	movw	r16, r24
    4036:	c8 01       	movw	r24, r16
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <gripper_close+0x232>
    403c:	8c 01       	movw	r16, r24
    403e:	1c 8f       	std	Y+28, r17	; 0x1c
    4040:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_3(ii);
		_delay_ms(10);
	}
	
	_delay_ms(200);
}
    4042:	6c 96       	adiw	r28, 0x1c	; 28
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	08 95       	ret

00004058 <arm_rotate_left>:

void arm_rotate_left()
{
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
    4064:	6c 97       	sbiw	r28, 0x1c	; 28
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    4070:	8a e5       	ldi	r24, 0x5A	; 90
    4072:	80 93 5b 03 	sts	0x035B, r24
    4076:	89 c0       	rjmp	.+274    	; 0x418a <arm_rotate_left+0x132>
	{
		servo_1(ii);
    4078:	80 91 5b 03 	lds	r24, 0x035B
    407c:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e2       	ldi	r26, 0x20	; 32
    4086:	b1 e4       	ldi	r27, 0x41	; 65
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	ab 83       	std	Y+3, r26	; 0x03
    408e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4090:	69 81       	ldd	r22, Y+1	; 0x01
    4092:	7a 81       	ldd	r23, Y+2	; 0x02
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	26 e6       	ldi	r18, 0x66	; 102
    409a:	36 e6       	ldi	r19, 0x66	; 102
    409c:	46 e6       	ldi	r20, 0x66	; 102
    409e:	55 e4       	ldi	r21, 0x45	; 69
    40a0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	8d 83       	std	Y+5, r24	; 0x05
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    40ac:	af 83       	std	Y+7, r26	; 0x07
    40ae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    40b0:	11 e0       	ldi	r17, 0x01	; 1
    40b2:	6d 81       	ldd	r22, Y+5	; 0x05
    40b4:	7e 81       	ldd	r23, Y+6	; 0x06
    40b6:	8f 81       	ldd	r24, Y+7	; 0x07
    40b8:	98 85       	ldd	r25, Y+8	; 0x08
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    40c6:	88 23       	and	r24, r24
    40c8:	0c f0       	brlt	.+2      	; 0x40cc <arm_rotate_left+0x74>
    40ca:	10 e0       	ldi	r17, 0x00	; 0
    40cc:	11 23       	and	r17, r17
    40ce:	29 f0       	breq	.+10     	; 0x40da <arm_rotate_left+0x82>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9a 87       	std	Y+10, r25	; 0x0a
    40d6:	89 87       	std	Y+9, r24	; 0x09
    40d8:	46 c0       	rjmp	.+140    	; 0x4166 <arm_rotate_left+0x10e>
	else if (__tmp > 65535)
    40da:	11 e0       	ldi	r17, 0x01	; 1
    40dc:	6d 81       	ldd	r22, Y+5	; 0x05
    40de:	7e 81       	ldd	r23, Y+6	; 0x06
    40e0:	8f 81       	ldd	r24, Y+7	; 0x07
    40e2:	98 85       	ldd	r25, Y+8	; 0x08
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	3f ef       	ldi	r19, 0xFF	; 255
    40e8:	4f e7       	ldi	r20, 0x7F	; 127
    40ea:	57 e4       	ldi	r21, 0x47	; 71
    40ec:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    40f0:	18 16       	cp	r1, r24
    40f2:	0c f0       	brlt	.+2      	; 0x40f6 <arm_rotate_left+0x9e>
    40f4:	10 e0       	ldi	r17, 0x00	; 0
    40f6:	11 23       	and	r17, r17
    40f8:	61 f1       	breq	.+88     	; 0x4152 <arm_rotate_left+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40fa:	69 81       	ldd	r22, Y+1	; 0x01
    40fc:	7a 81       	ldd	r23, Y+2	; 0x02
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	9c 81       	ldd	r25, Y+4	; 0x04
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e2       	ldi	r20, 0x20	; 32
    4108:	51 e4       	ldi	r21, 0x41	; 65
    410a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	9a 87       	std	Y+10, r25	; 0x0a
    4120:	89 87       	std	Y+9, r24	; 0x09
    4122:	12 c0       	rjmp	.+36     	; 0x4148 <arm_rotate_left+0xf0>
    4124:	80 e7       	ldi	r24, 0x70	; 112
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	9c 87       	std	Y+12, r25	; 0x0c
    412a:	8b 87       	std	Y+11, r24	; 0x0b
    412c:	8b 85       	ldd	r24, Y+11	; 0x0b
    412e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4130:	8c 01       	movw	r16, r24
    4132:	c8 01       	movw	r24, r16
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	f1 f7       	brne	.-4      	; 0x4134 <arm_rotate_left+0xdc>
    4138:	8c 01       	movw	r16, r24
    413a:	1c 87       	std	Y+12, r17	; 0x0c
    413c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    413e:	89 85       	ldd	r24, Y+9	; 0x09
    4140:	9a 85       	ldd	r25, Y+10	; 0x0a
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	9a 87       	std	Y+10, r25	; 0x0a
    4146:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4148:	89 85       	ldd	r24, Y+9	; 0x09
    414a:	9a 85       	ldd	r25, Y+10	; 0x0a
    414c:	00 97       	sbiw	r24, 0x00	; 0
    414e:	51 f7       	brne	.-44     	; 0x4124 <arm_rotate_left+0xcc>
    4150:	17 c0       	rjmp	.+46     	; 0x4180 <arm_rotate_left+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4152:	6d 81       	ldd	r22, Y+5	; 0x05
    4154:	7e 81       	ldd	r23, Y+6	; 0x06
    4156:	8f 81       	ldd	r24, Y+7	; 0x07
    4158:	98 85       	ldd	r25, Y+8	; 0x08
    415a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	9a 87       	std	Y+10, r25	; 0x0a
    4164:	89 87       	std	Y+9, r24	; 0x09
    4166:	89 85       	ldd	r24, Y+9	; 0x09
    4168:	9a 85       	ldd	r25, Y+10	; 0x0a
    416a:	9e 87       	std	Y+14, r25	; 0x0e
    416c:	8d 87       	std	Y+13, r24	; 0x0d
    416e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4170:	9e 85       	ldd	r25, Y+14	; 0x0e
    4172:	8c 01       	movw	r16, r24
    4174:	c8 01       	movw	r24, r16
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <arm_rotate_left+0x11e>
    417a:	8c 01       	movw	r16, r24
    417c:	1e 87       	std	Y+14, r17	; 0x0e
    417e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void arm_rotate_left()
{
	for(ii=90;ii>0;ii--)
    4180:	80 91 5b 03 	lds	r24, 0x035B
    4184:	81 50       	subi	r24, 0x01	; 1
    4186:	80 93 5b 03 	sts	0x035B, r24
    418a:	80 91 5b 03 	lds	r24, 0x035B
    418e:	88 23       	and	r24, r24
    4190:	09 f0       	breq	.+2      	; 0x4194 <arm_rotate_left+0x13c>
    4192:	72 cf       	rjmp	.-284    	; 0x4078 <arm_rotate_left+0x20>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	a6 e9       	ldi	r26, 0x96	; 150
    419a:	b3 e4       	ldi	r27, 0x43	; 67
    419c:	8f 87       	std	Y+15, r24	; 0x0f
    419e:	98 8b       	std	Y+16, r25	; 0x10
    41a0:	a9 8b       	std	Y+17, r26	; 0x11
    41a2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    41a6:	78 89       	ldd	r23, Y+16	; 0x10
    41a8:	89 89       	ldd	r24, Y+17	; 0x11
    41aa:	9a 89       	ldd	r25, Y+18	; 0x12
    41ac:	26 e6       	ldi	r18, 0x66	; 102
    41ae:	36 e6       	ldi	r19, 0x66	; 102
    41b0:	46 e6       	ldi	r20, 0x66	; 102
    41b2:	55 e4       	ldi	r21, 0x45	; 69
    41b4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	8b 8b       	std	Y+19, r24	; 0x13
    41be:	9c 8b       	std	Y+20, r25	; 0x14
    41c0:	ad 8b       	std	Y+21, r26	; 0x15
    41c2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    41c4:	11 e0       	ldi	r17, 0x01	; 1
    41c6:	6b 89       	ldd	r22, Y+19	; 0x13
    41c8:	7c 89       	ldd	r23, Y+20	; 0x14
    41ca:	8d 89       	ldd	r24, Y+21	; 0x15
    41cc:	9e 89       	ldd	r25, Y+22	; 0x16
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	40 e8       	ldi	r20, 0x80	; 128
    41d4:	5f e3       	ldi	r21, 0x3F	; 63
    41d6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    41da:	88 23       	and	r24, r24
    41dc:	0c f0       	brlt	.+2      	; 0x41e0 <arm_rotate_left+0x188>
    41de:	10 e0       	ldi	r17, 0x00	; 0
    41e0:	11 23       	and	r17, r17
    41e2:	29 f0       	breq	.+10     	; 0x41ee <arm_rotate_left+0x196>
		__ticks = 1;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	98 8f       	std	Y+24, r25	; 0x18
    41ea:	8f 8b       	std	Y+23, r24	; 0x17
    41ec:	46 c0       	rjmp	.+140    	; 0x427a <arm_rotate_left+0x222>
	else if (__tmp > 65535)
    41ee:	11 e0       	ldi	r17, 0x01	; 1
    41f0:	6b 89       	ldd	r22, Y+19	; 0x13
    41f2:	7c 89       	ldd	r23, Y+20	; 0x14
    41f4:	8d 89       	ldd	r24, Y+21	; 0x15
    41f6:	9e 89       	ldd	r25, Y+22	; 0x16
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	3f ef       	ldi	r19, 0xFF	; 255
    41fc:	4f e7       	ldi	r20, 0x7F	; 127
    41fe:	57 e4       	ldi	r21, 0x47	; 71
    4200:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4204:	18 16       	cp	r1, r24
    4206:	0c f0       	brlt	.+2      	; 0x420a <arm_rotate_left+0x1b2>
    4208:	10 e0       	ldi	r17, 0x00	; 0
    420a:	11 23       	and	r17, r17
    420c:	61 f1       	breq	.+88     	; 0x4266 <arm_rotate_left+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4210:	78 89       	ldd	r23, Y+16	; 0x10
    4212:	89 89       	ldd	r24, Y+17	; 0x11
    4214:	9a 89       	ldd	r25, Y+18	; 0x12
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e2       	ldi	r20, 0x20	; 32
    421c:	51 e4       	ldi	r21, 0x41	; 65
    421e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	bc 01       	movw	r22, r24
    4228:	cd 01       	movw	r24, r26
    422a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	98 8f       	std	Y+24, r25	; 0x18
    4234:	8f 8b       	std	Y+23, r24	; 0x17
    4236:	12 c0       	rjmp	.+36     	; 0x425c <arm_rotate_left+0x204>
    4238:	80 e7       	ldi	r24, 0x70	; 112
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	9a 8f       	std	Y+26, r25	; 0x1a
    423e:	89 8f       	std	Y+25, r24	; 0x19
    4240:	89 8d       	ldd	r24, Y+25	; 0x19
    4242:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4244:	8c 01       	movw	r16, r24
    4246:	c8 01       	movw	r24, r16
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	f1 f7       	brne	.-4      	; 0x4248 <arm_rotate_left+0x1f0>
    424c:	8c 01       	movw	r16, r24
    424e:	1a 8f       	std	Y+26, r17	; 0x1a
    4250:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4252:	8f 89       	ldd	r24, Y+23	; 0x17
    4254:	98 8d       	ldd	r25, Y+24	; 0x18
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	98 8f       	std	Y+24, r25	; 0x18
    425a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425c:	8f 89       	ldd	r24, Y+23	; 0x17
    425e:	98 8d       	ldd	r25, Y+24	; 0x18
    4260:	00 97       	sbiw	r24, 0x00	; 0
    4262:	51 f7       	brne	.-44     	; 0x4238 <arm_rotate_left+0x1e0>
    4264:	17 c0       	rjmp	.+46     	; 0x4294 <arm_rotate_left+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4266:	6b 89       	ldd	r22, Y+19	; 0x13
    4268:	7c 89       	ldd	r23, Y+20	; 0x14
    426a:	8d 89       	ldd	r24, Y+21	; 0x15
    426c:	9e 89       	ldd	r25, Y+22	; 0x16
    426e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	98 8f       	std	Y+24, r25	; 0x18
    4278:	8f 8b       	std	Y+23, r24	; 0x17
    427a:	8f 89       	ldd	r24, Y+23	; 0x17
    427c:	98 8d       	ldd	r25, Y+24	; 0x18
    427e:	9c 8f       	std	Y+28, r25	; 0x1c
    4280:	8b 8f       	std	Y+27, r24	; 0x1b
    4282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4286:	8c 01       	movw	r16, r24
    4288:	c8 01       	movw	r24, r16
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	f1 f7       	brne	.-4      	; 0x428a <arm_rotate_left+0x232>
    428e:	8c 01       	movw	r16, r24
    4290:	1c 8f       	std	Y+28, r17	; 0x1c
    4292:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4294:	6c 96       	adiw	r28, 0x1c	; 28
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	08 95       	ret

000042aa <arm_rotate_right>:

void arm_rotate_right()
{
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	6c 97       	sbiw	r28, 0x1c	; 28
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii<180;ii++)
    42c2:	8a e5       	ldi	r24, 0x5A	; 90
    42c4:	80 93 5b 03 	sts	0x035B, r24
    42c8:	89 c0       	rjmp	.+274    	; 0x43dc <arm_rotate_right+0x132>
	{
		servo_1(ii);
    42ca:	80 91 5b 03 	lds	r24, 0x035B
    42ce:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a0 e2       	ldi	r26, 0x20	; 32
    42d8:	b1 e4       	ldi	r27, 0x41	; 65
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	9a 83       	std	Y+2, r25	; 0x02
    42de:	ab 83       	std	Y+3, r26	; 0x03
    42e0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42e2:	69 81       	ldd	r22, Y+1	; 0x01
    42e4:	7a 81       	ldd	r23, Y+2	; 0x02
    42e6:	8b 81       	ldd	r24, Y+3	; 0x03
    42e8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ea:	26 e6       	ldi	r18, 0x66	; 102
    42ec:	36 e6       	ldi	r19, 0x66	; 102
    42ee:	46 e6       	ldi	r20, 0x66	; 102
    42f0:	55 e4       	ldi	r21, 0x45	; 69
    42f2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	8d 83       	std	Y+5, r24	; 0x05
    42fc:	9e 83       	std	Y+6, r25	; 0x06
    42fe:	af 83       	std	Y+7, r26	; 0x07
    4300:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4302:	11 e0       	ldi	r17, 0x01	; 1
    4304:	6d 81       	ldd	r22, Y+5	; 0x05
    4306:	7e 81       	ldd	r23, Y+6	; 0x06
    4308:	8f 81       	ldd	r24, Y+7	; 0x07
    430a:	98 85       	ldd	r25, Y+8	; 0x08
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e8       	ldi	r20, 0x80	; 128
    4312:	5f e3       	ldi	r21, 0x3F	; 63
    4314:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4318:	88 23       	and	r24, r24
    431a:	0c f0       	brlt	.+2      	; 0x431e <arm_rotate_right+0x74>
    431c:	10 e0       	ldi	r17, 0x00	; 0
    431e:	11 23       	and	r17, r17
    4320:	29 f0       	breq	.+10     	; 0x432c <arm_rotate_right+0x82>
		__ticks = 1;
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	9a 87       	std	Y+10, r25	; 0x0a
    4328:	89 87       	std	Y+9, r24	; 0x09
    432a:	46 c0       	rjmp	.+140    	; 0x43b8 <arm_rotate_right+0x10e>
	else if (__tmp > 65535)
    432c:	11 e0       	ldi	r17, 0x01	; 1
    432e:	6d 81       	ldd	r22, Y+5	; 0x05
    4330:	7e 81       	ldd	r23, Y+6	; 0x06
    4332:	8f 81       	ldd	r24, Y+7	; 0x07
    4334:	98 85       	ldd	r25, Y+8	; 0x08
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	3f ef       	ldi	r19, 0xFF	; 255
    433a:	4f e7       	ldi	r20, 0x7F	; 127
    433c:	57 e4       	ldi	r21, 0x47	; 71
    433e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4342:	18 16       	cp	r1, r24
    4344:	0c f0       	brlt	.+2      	; 0x4348 <arm_rotate_right+0x9e>
    4346:	10 e0       	ldi	r17, 0x00	; 0
    4348:	11 23       	and	r17, r17
    434a:	61 f1       	breq	.+88     	; 0x43a4 <arm_rotate_right+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434c:	69 81       	ldd	r22, Y+1	; 0x01
    434e:	7a 81       	ldd	r23, Y+2	; 0x02
    4350:	8b 81       	ldd	r24, Y+3	; 0x03
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e2       	ldi	r20, 0x20	; 32
    435a:	51 e4       	ldi	r21, 0x41	; 65
    435c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	bc 01       	movw	r22, r24
    4366:	cd 01       	movw	r24, r26
    4368:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	9a 87       	std	Y+10, r25	; 0x0a
    4372:	89 87       	std	Y+9, r24	; 0x09
    4374:	12 c0       	rjmp	.+36     	; 0x439a <arm_rotate_right+0xf0>
    4376:	80 e7       	ldi	r24, 0x70	; 112
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	9c 87       	std	Y+12, r25	; 0x0c
    437c:	8b 87       	std	Y+11, r24	; 0x0b
    437e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4380:	9c 85       	ldd	r25, Y+12	; 0x0c
    4382:	8c 01       	movw	r16, r24
    4384:	c8 01       	movw	r24, r16
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <arm_rotate_right+0xdc>
    438a:	8c 01       	movw	r16, r24
    438c:	1c 87       	std	Y+12, r17	; 0x0c
    438e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	9a 87       	std	Y+10, r25	; 0x0a
    4398:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439a:	89 85       	ldd	r24, Y+9	; 0x09
    439c:	9a 85       	ldd	r25, Y+10	; 0x0a
    439e:	00 97       	sbiw	r24, 0x00	; 0
    43a0:	51 f7       	brne	.-44     	; 0x4376 <arm_rotate_right+0xcc>
    43a2:	17 c0       	rjmp	.+46     	; 0x43d2 <arm_rotate_right+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a4:	6d 81       	ldd	r22, Y+5	; 0x05
    43a6:	7e 81       	ldd	r23, Y+6	; 0x06
    43a8:	8f 81       	ldd	r24, Y+7	; 0x07
    43aa:	98 85       	ldd	r25, Y+8	; 0x08
    43ac:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	9a 87       	std	Y+10, r25	; 0x0a
    43b6:	89 87       	std	Y+9, r24	; 0x09
    43b8:	89 85       	ldd	r24, Y+9	; 0x09
    43ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    43bc:	9e 87       	std	Y+14, r25	; 0x0e
    43be:	8d 87       	std	Y+13, r24	; 0x0d
    43c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c4:	8c 01       	movw	r16, r24
    43c6:	c8 01       	movw	r24, r16
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <arm_rotate_right+0x11e>
    43cc:	8c 01       	movw	r16, r24
    43ce:	1e 87       	std	Y+14, r17	; 0x0e
    43d0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_rotate_right()
{
	for(ii=90;ii<180;ii++)
    43d2:	80 91 5b 03 	lds	r24, 0x035B
    43d6:	8f 5f       	subi	r24, 0xFF	; 255
    43d8:	80 93 5b 03 	sts	0x035B, r24
    43dc:	80 91 5b 03 	lds	r24, 0x035B
    43e0:	84 3b       	cpi	r24, 0xB4	; 180
    43e2:	08 f4       	brcc	.+2      	; 0x43e6 <arm_rotate_right+0x13c>
    43e4:	72 cf       	rjmp	.-284    	; 0x42ca <arm_rotate_right+0x20>
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	a6 e9       	ldi	r26, 0x96	; 150
    43ec:	b3 e4       	ldi	r27, 0x43	; 67
    43ee:	8f 87       	std	Y+15, r24	; 0x0f
    43f0:	98 8b       	std	Y+16, r25	; 0x10
    43f2:	a9 8b       	std	Y+17, r26	; 0x11
    43f4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    43f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    43f8:	78 89       	ldd	r23, Y+16	; 0x10
    43fa:	89 89       	ldd	r24, Y+17	; 0x11
    43fc:	9a 89       	ldd	r25, Y+18	; 0x12
    43fe:	26 e6       	ldi	r18, 0x66	; 102
    4400:	36 e6       	ldi	r19, 0x66	; 102
    4402:	46 e6       	ldi	r20, 0x66	; 102
    4404:	55 e4       	ldi	r21, 0x45	; 69
    4406:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	8b 8b       	std	Y+19, r24	; 0x13
    4410:	9c 8b       	std	Y+20, r25	; 0x14
    4412:	ad 8b       	std	Y+21, r26	; 0x15
    4414:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4416:	11 e0       	ldi	r17, 0x01	; 1
    4418:	6b 89       	ldd	r22, Y+19	; 0x13
    441a:	7c 89       	ldd	r23, Y+20	; 0x14
    441c:	8d 89       	ldd	r24, Y+21	; 0x15
    441e:	9e 89       	ldd	r25, Y+22	; 0x16
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e8       	ldi	r20, 0x80	; 128
    4426:	5f e3       	ldi	r21, 0x3F	; 63
    4428:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    442c:	88 23       	and	r24, r24
    442e:	0c f0       	brlt	.+2      	; 0x4432 <arm_rotate_right+0x188>
    4430:	10 e0       	ldi	r17, 0x00	; 0
    4432:	11 23       	and	r17, r17
    4434:	29 f0       	breq	.+10     	; 0x4440 <arm_rotate_right+0x196>
		__ticks = 1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	98 8f       	std	Y+24, r25	; 0x18
    443c:	8f 8b       	std	Y+23, r24	; 0x17
    443e:	46 c0       	rjmp	.+140    	; 0x44cc <arm_rotate_right+0x222>
	else if (__tmp > 65535)
    4440:	11 e0       	ldi	r17, 0x01	; 1
    4442:	6b 89       	ldd	r22, Y+19	; 0x13
    4444:	7c 89       	ldd	r23, Y+20	; 0x14
    4446:	8d 89       	ldd	r24, Y+21	; 0x15
    4448:	9e 89       	ldd	r25, Y+22	; 0x16
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	3f ef       	ldi	r19, 0xFF	; 255
    444e:	4f e7       	ldi	r20, 0x7F	; 127
    4450:	57 e4       	ldi	r21, 0x47	; 71
    4452:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4456:	18 16       	cp	r1, r24
    4458:	0c f0       	brlt	.+2      	; 0x445c <arm_rotate_right+0x1b2>
    445a:	10 e0       	ldi	r17, 0x00	; 0
    445c:	11 23       	and	r17, r17
    445e:	61 f1       	breq	.+88     	; 0x44b8 <arm_rotate_right+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4460:	6f 85       	ldd	r22, Y+15	; 0x0f
    4462:	78 89       	ldd	r23, Y+16	; 0x10
    4464:	89 89       	ldd	r24, Y+17	; 0x11
    4466:	9a 89       	ldd	r25, Y+18	; 0x12
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	bc 01       	movw	r22, r24
    447a:	cd 01       	movw	r24, r26
    447c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	98 8f       	std	Y+24, r25	; 0x18
    4486:	8f 8b       	std	Y+23, r24	; 0x17
    4488:	12 c0       	rjmp	.+36     	; 0x44ae <arm_rotate_right+0x204>
    448a:	80 e7       	ldi	r24, 0x70	; 112
    448c:	91 e0       	ldi	r25, 0x01	; 1
    448e:	9a 8f       	std	Y+26, r25	; 0x1a
    4490:	89 8f       	std	Y+25, r24	; 0x19
    4492:	89 8d       	ldd	r24, Y+25	; 0x19
    4494:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4496:	8c 01       	movw	r16, r24
    4498:	c8 01       	movw	r24, r16
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <arm_rotate_right+0x1f0>
    449e:	8c 01       	movw	r16, r24
    44a0:	1a 8f       	std	Y+26, r17	; 0x1a
    44a2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a4:	8f 89       	ldd	r24, Y+23	; 0x17
    44a6:	98 8d       	ldd	r25, Y+24	; 0x18
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	98 8f       	std	Y+24, r25	; 0x18
    44ac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ae:	8f 89       	ldd	r24, Y+23	; 0x17
    44b0:	98 8d       	ldd	r25, Y+24	; 0x18
    44b2:	00 97       	sbiw	r24, 0x00	; 0
    44b4:	51 f7       	brne	.-44     	; 0x448a <arm_rotate_right+0x1e0>
    44b6:	17 c0       	rjmp	.+46     	; 0x44e6 <arm_rotate_right+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b8:	6b 89       	ldd	r22, Y+19	; 0x13
    44ba:	7c 89       	ldd	r23, Y+20	; 0x14
    44bc:	8d 89       	ldd	r24, Y+21	; 0x15
    44be:	9e 89       	ldd	r25, Y+22	; 0x16
    44c0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    44c4:	dc 01       	movw	r26, r24
    44c6:	cb 01       	movw	r24, r22
    44c8:	98 8f       	std	Y+24, r25	; 0x18
    44ca:	8f 8b       	std	Y+23, r24	; 0x17
    44cc:	8f 89       	ldd	r24, Y+23	; 0x17
    44ce:	98 8d       	ldd	r25, Y+24	; 0x18
    44d0:	9c 8f       	std	Y+28, r25	; 0x1c
    44d2:	8b 8f       	std	Y+27, r24	; 0x1b
    44d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d8:	8c 01       	movw	r16, r24
    44da:	c8 01       	movw	r24, r16
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	f1 f7       	brne	.-4      	; 0x44dc <arm_rotate_right+0x232>
    44e0:	8c 01       	movw	r16, r24
    44e2:	1c 8f       	std	Y+28, r17	; 0x1c
    44e4:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    44e6:	6c 96       	adiw	r28, 0x1c	; 28
    44e8:	0f b6       	in	r0, 0x3f	; 63
    44ea:	f8 94       	cli
    44ec:	de bf       	out	0x3e, r29	; 62
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	cd bf       	out	0x3d, r28	; 61
    44f2:	df 91       	pop	r29
    44f4:	cf 91       	pop	r28
    44f6:	1f 91       	pop	r17
    44f8:	0f 91       	pop	r16
    44fa:	08 95       	ret

000044fc <arm_straight>:
void arm_straight()
{
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
    4508:	6c 97       	sbiw	r28, 0x1c	; 28
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	f8 94       	cli
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    4514:	10 92 5b 03 	sts	0x035B, r1
    4518:	89 c0       	rjmp	.+274    	; 0x462c <arm_straight+0x130>
	{
		servo_1(ii);
    451a:	80 91 5b 03 	lds	r24, 0x035B
    451e:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	a0 e2       	ldi	r26, 0x20	; 32
    4528:	b1 e4       	ldi	r27, 0x41	; 65
    452a:	89 83       	std	Y+1, r24	; 0x01
    452c:	9a 83       	std	Y+2, r25	; 0x02
    452e:	ab 83       	std	Y+3, r26	; 0x03
    4530:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4532:	69 81       	ldd	r22, Y+1	; 0x01
    4534:	7a 81       	ldd	r23, Y+2	; 0x02
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	26 e6       	ldi	r18, 0x66	; 102
    453c:	36 e6       	ldi	r19, 0x66	; 102
    453e:	46 e6       	ldi	r20, 0x66	; 102
    4540:	55 e4       	ldi	r21, 0x45	; 69
    4542:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	9e 83       	std	Y+6, r25	; 0x06
    454e:	af 83       	std	Y+7, r26	; 0x07
    4550:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4552:	11 e0       	ldi	r17, 0x01	; 1
    4554:	6d 81       	ldd	r22, Y+5	; 0x05
    4556:	7e 81       	ldd	r23, Y+6	; 0x06
    4558:	8f 81       	ldd	r24, Y+7	; 0x07
    455a:	98 85       	ldd	r25, Y+8	; 0x08
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e8       	ldi	r20, 0x80	; 128
    4562:	5f e3       	ldi	r21, 0x3F	; 63
    4564:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4568:	88 23       	and	r24, r24
    456a:	0c f0       	brlt	.+2      	; 0x456e <arm_straight+0x72>
    456c:	10 e0       	ldi	r17, 0x00	; 0
    456e:	11 23       	and	r17, r17
    4570:	29 f0       	breq	.+10     	; 0x457c <arm_straight+0x80>
		__ticks = 1;
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	9a 87       	std	Y+10, r25	; 0x0a
    4578:	89 87       	std	Y+9, r24	; 0x09
    457a:	46 c0       	rjmp	.+140    	; 0x4608 <arm_straight+0x10c>
	else if (__tmp > 65535)
    457c:	11 e0       	ldi	r17, 0x01	; 1
    457e:	6d 81       	ldd	r22, Y+5	; 0x05
    4580:	7e 81       	ldd	r23, Y+6	; 0x06
    4582:	8f 81       	ldd	r24, Y+7	; 0x07
    4584:	98 85       	ldd	r25, Y+8	; 0x08
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	3f ef       	ldi	r19, 0xFF	; 255
    458a:	4f e7       	ldi	r20, 0x7F	; 127
    458c:	57 e4       	ldi	r21, 0x47	; 71
    458e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4592:	18 16       	cp	r1, r24
    4594:	0c f0       	brlt	.+2      	; 0x4598 <arm_straight+0x9c>
    4596:	10 e0       	ldi	r17, 0x00	; 0
    4598:	11 23       	and	r17, r17
    459a:	61 f1       	breq	.+88     	; 0x45f4 <arm_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459c:	69 81       	ldd	r22, Y+1	; 0x01
    459e:	7a 81       	ldd	r23, Y+2	; 0x02
    45a0:	8b 81       	ldd	r24, Y+3	; 0x03
    45a2:	9c 81       	ldd	r25, Y+4	; 0x04
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	9a 87       	std	Y+10, r25	; 0x0a
    45c2:	89 87       	std	Y+9, r24	; 0x09
    45c4:	12 c0       	rjmp	.+36     	; 0x45ea <arm_straight+0xee>
    45c6:	80 e7       	ldi	r24, 0x70	; 112
    45c8:	91 e0       	ldi	r25, 0x01	; 1
    45ca:	9c 87       	std	Y+12, r25	; 0x0c
    45cc:	8b 87       	std	Y+11, r24	; 0x0b
    45ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    45d2:	8c 01       	movw	r16, r24
    45d4:	c8 01       	movw	r24, r16
    45d6:	01 97       	sbiw	r24, 0x01	; 1
    45d8:	f1 f7       	brne	.-4      	; 0x45d6 <arm_straight+0xda>
    45da:	8c 01       	movw	r16, r24
    45dc:	1c 87       	std	Y+12, r17	; 0x0c
    45de:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e0:	89 85       	ldd	r24, Y+9	; 0x09
    45e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9a 87       	std	Y+10, r25	; 0x0a
    45e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	51 f7       	brne	.-44     	; 0x45c6 <arm_straight+0xca>
    45f2:	17 c0       	rjmp	.+46     	; 0x4622 <arm_straight+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	6d 81       	ldd	r22, Y+5	; 0x05
    45f6:	7e 81       	ldd	r23, Y+6	; 0x06
    45f8:	8f 81       	ldd	r24, Y+7	; 0x07
    45fa:	98 85       	ldd	r25, Y+8	; 0x08
    45fc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9a 87       	std	Y+10, r25	; 0x0a
    4606:	89 87       	std	Y+9, r24	; 0x09
    4608:	89 85       	ldd	r24, Y+9	; 0x09
    460a:	9a 85       	ldd	r25, Y+10	; 0x0a
    460c:	9e 87       	std	Y+14, r25	; 0x0e
    460e:	8d 87       	std	Y+13, r24	; 0x0d
    4610:	8d 85       	ldd	r24, Y+13	; 0x0d
    4612:	9e 85       	ldd	r25, Y+14	; 0x0e
    4614:	8c 01       	movw	r16, r24
    4616:	c8 01       	movw	r24, r16
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	f1 f7       	brne	.-4      	; 0x4618 <arm_straight+0x11c>
    461c:	8c 01       	movw	r16, r24
    461e:	1e 87       	std	Y+14, r17	; 0x0e
    4620:	0d 87       	std	Y+13, r16	; 0x0d
	}
	_delay_ms(300);
}
void arm_straight()
{
	for(ii=0;ii<90;ii++)
    4622:	80 91 5b 03 	lds	r24, 0x035B
    4626:	8f 5f       	subi	r24, 0xFF	; 255
    4628:	80 93 5b 03 	sts	0x035B, r24
    462c:	80 91 5b 03 	lds	r24, 0x035B
    4630:	8a 35       	cpi	r24, 0x5A	; 90
    4632:	08 f4       	brcc	.+2      	; 0x4636 <arm_straight+0x13a>
    4634:	72 cf       	rjmp	.-284    	; 0x451a <arm_straight+0x1e>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	a6 e9       	ldi	r26, 0x96	; 150
    463c:	b3 e4       	ldi	r27, 0x43	; 67
    463e:	8f 87       	std	Y+15, r24	; 0x0f
    4640:	98 8b       	std	Y+16, r25	; 0x10
    4642:	a9 8b       	std	Y+17, r26	; 0x11
    4644:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4646:	6f 85       	ldd	r22, Y+15	; 0x0f
    4648:	78 89       	ldd	r23, Y+16	; 0x10
    464a:	89 89       	ldd	r24, Y+17	; 0x11
    464c:	9a 89       	ldd	r25, Y+18	; 0x12
    464e:	26 e6       	ldi	r18, 0x66	; 102
    4650:	36 e6       	ldi	r19, 0x66	; 102
    4652:	46 e6       	ldi	r20, 0x66	; 102
    4654:	55 e4       	ldi	r21, 0x45	; 69
    4656:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	8b 8b       	std	Y+19, r24	; 0x13
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	ad 8b       	std	Y+21, r26	; 0x15
    4664:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4666:	11 e0       	ldi	r17, 0x01	; 1
    4668:	6b 89       	ldd	r22, Y+19	; 0x13
    466a:	7c 89       	ldd	r23, Y+20	; 0x14
    466c:	8d 89       	ldd	r24, Y+21	; 0x15
    466e:	9e 89       	ldd	r25, Y+22	; 0x16
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e8       	ldi	r20, 0x80	; 128
    4676:	5f e3       	ldi	r21, 0x3F	; 63
    4678:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    467c:	88 23       	and	r24, r24
    467e:	0c f0       	brlt	.+2      	; 0x4682 <arm_straight+0x186>
    4680:	10 e0       	ldi	r17, 0x00	; 0
    4682:	11 23       	and	r17, r17
    4684:	29 f0       	breq	.+10     	; 0x4690 <arm_straight+0x194>
		__ticks = 1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	98 8f       	std	Y+24, r25	; 0x18
    468c:	8f 8b       	std	Y+23, r24	; 0x17
    468e:	46 c0       	rjmp	.+140    	; 0x471c <arm_straight+0x220>
	else if (__tmp > 65535)
    4690:	11 e0       	ldi	r17, 0x01	; 1
    4692:	6b 89       	ldd	r22, Y+19	; 0x13
    4694:	7c 89       	ldd	r23, Y+20	; 0x14
    4696:	8d 89       	ldd	r24, Y+21	; 0x15
    4698:	9e 89       	ldd	r25, Y+22	; 0x16
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	3f ef       	ldi	r19, 0xFF	; 255
    469e:	4f e7       	ldi	r20, 0x7F	; 127
    46a0:	57 e4       	ldi	r21, 0x47	; 71
    46a2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    46a6:	18 16       	cp	r1, r24
    46a8:	0c f0       	brlt	.+2      	; 0x46ac <arm_straight+0x1b0>
    46aa:	10 e0       	ldi	r17, 0x00	; 0
    46ac:	11 23       	and	r17, r17
    46ae:	61 f1       	breq	.+88     	; 0x4708 <arm_straight+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    46b2:	78 89       	ldd	r23, Y+16	; 0x10
    46b4:	89 89       	ldd	r24, Y+17	; 0x11
    46b6:	9a 89       	ldd	r25, Y+18	; 0x12
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e2       	ldi	r20, 0x20	; 32
    46be:	51 e4       	ldi	r21, 0x41	; 65
    46c0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	bc 01       	movw	r22, r24
    46ca:	cd 01       	movw	r24, r26
    46cc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	98 8f       	std	Y+24, r25	; 0x18
    46d6:	8f 8b       	std	Y+23, r24	; 0x17
    46d8:	12 c0       	rjmp	.+36     	; 0x46fe <arm_straight+0x202>
    46da:	80 e7       	ldi	r24, 0x70	; 112
    46dc:	91 e0       	ldi	r25, 0x01	; 1
    46de:	9a 8f       	std	Y+26, r25	; 0x1a
    46e0:	89 8f       	std	Y+25, r24	; 0x19
    46e2:	89 8d       	ldd	r24, Y+25	; 0x19
    46e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46e6:	8c 01       	movw	r16, r24
    46e8:	c8 01       	movw	r24, r16
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <arm_straight+0x1ee>
    46ee:	8c 01       	movw	r16, r24
    46f0:	1a 8f       	std	Y+26, r17	; 0x1a
    46f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f4:	8f 89       	ldd	r24, Y+23	; 0x17
    46f6:	98 8d       	ldd	r25, Y+24	; 0x18
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	98 8f       	std	Y+24, r25	; 0x18
    46fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4700:	98 8d       	ldd	r25, Y+24	; 0x18
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	51 f7       	brne	.-44     	; 0x46da <arm_straight+0x1de>
    4706:	17 c0       	rjmp	.+46     	; 0x4736 <arm_straight+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	6b 89       	ldd	r22, Y+19	; 0x13
    470a:	7c 89       	ldd	r23, Y+20	; 0x14
    470c:	8d 89       	ldd	r24, Y+21	; 0x15
    470e:	9e 89       	ldd	r25, Y+22	; 0x16
    4710:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	98 8f       	std	Y+24, r25	; 0x18
    471a:	8f 8b       	std	Y+23, r24	; 0x17
    471c:	8f 89       	ldd	r24, Y+23	; 0x17
    471e:	98 8d       	ldd	r25, Y+24	; 0x18
    4720:	9c 8f       	std	Y+28, r25	; 0x1c
    4722:	8b 8f       	std	Y+27, r24	; 0x1b
    4724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4728:	8c 01       	movw	r16, r24
    472a:	c8 01       	movw	r24, r16
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <arm_straight+0x230>
    4730:	8c 01       	movw	r16, r24
    4732:	1c 8f       	std	Y+28, r17	; 0x1c
    4734:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4736:	6c 96       	adiw	r28, 0x1c	; 28
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	08 95       	ret

0000474c <arm_forward>:

void arm_forward()
{
    474c:	0f 93       	push	r16
    474e:	1f 93       	push	r17
    4750:	cf 93       	push	r28
    4752:	df 93       	push	r29
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	6c 97       	sbiw	r28, 0x1c	; 28
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    4764:	10 92 5b 03 	sts	0x035B, r1
    4768:	89 c0       	rjmp	.+274    	; 0x487c <arm_forward+0x130>
	{
		servo_2(ii);
    476a:	80 91 5b 03 	lds	r24, 0x035B
    476e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	a0 e2       	ldi	r26, 0x20	; 32
    4778:	b1 e4       	ldi	r27, 0x41	; 65
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	9a 83       	std	Y+2, r25	; 0x02
    477e:	ab 83       	std	Y+3, r26	; 0x03
    4780:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4782:	69 81       	ldd	r22, Y+1	; 0x01
    4784:	7a 81       	ldd	r23, Y+2	; 0x02
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	9c 81       	ldd	r25, Y+4	; 0x04
    478a:	26 e6       	ldi	r18, 0x66	; 102
    478c:	36 e6       	ldi	r19, 0x66	; 102
    478e:	46 e6       	ldi	r20, 0x66	; 102
    4790:	55 e4       	ldi	r21, 0x45	; 69
    4792:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	8d 83       	std	Y+5, r24	; 0x05
    479c:	9e 83       	std	Y+6, r25	; 0x06
    479e:	af 83       	std	Y+7, r26	; 0x07
    47a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    47a2:	11 e0       	ldi	r17, 0x01	; 1
    47a4:	6d 81       	ldd	r22, Y+5	; 0x05
    47a6:	7e 81       	ldd	r23, Y+6	; 0x06
    47a8:	8f 81       	ldd	r24, Y+7	; 0x07
    47aa:	98 85       	ldd	r25, Y+8	; 0x08
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e8       	ldi	r20, 0x80	; 128
    47b2:	5f e3       	ldi	r21, 0x3F	; 63
    47b4:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    47b8:	88 23       	and	r24, r24
    47ba:	0c f0       	brlt	.+2      	; 0x47be <arm_forward+0x72>
    47bc:	10 e0       	ldi	r17, 0x00	; 0
    47be:	11 23       	and	r17, r17
    47c0:	29 f0       	breq	.+10     	; 0x47cc <arm_forward+0x80>
		__ticks = 1;
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	9a 87       	std	Y+10, r25	; 0x0a
    47c8:	89 87       	std	Y+9, r24	; 0x09
    47ca:	46 c0       	rjmp	.+140    	; 0x4858 <arm_forward+0x10c>
	else if (__tmp > 65535)
    47cc:	11 e0       	ldi	r17, 0x01	; 1
    47ce:	6d 81       	ldd	r22, Y+5	; 0x05
    47d0:	7e 81       	ldd	r23, Y+6	; 0x06
    47d2:	8f 81       	ldd	r24, Y+7	; 0x07
    47d4:	98 85       	ldd	r25, Y+8	; 0x08
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	3f ef       	ldi	r19, 0xFF	; 255
    47da:	4f e7       	ldi	r20, 0x7F	; 127
    47dc:	57 e4       	ldi	r21, 0x47	; 71
    47de:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    47e2:	18 16       	cp	r1, r24
    47e4:	0c f0       	brlt	.+2      	; 0x47e8 <arm_forward+0x9c>
    47e6:	10 e0       	ldi	r17, 0x00	; 0
    47e8:	11 23       	and	r17, r17
    47ea:	61 f1       	breq	.+88     	; 0x4844 <arm_forward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ec:	69 81       	ldd	r22, Y+1	; 0x01
    47ee:	7a 81       	ldd	r23, Y+2	; 0x02
    47f0:	8b 81       	ldd	r24, Y+3	; 0x03
    47f2:	9c 81       	ldd	r25, Y+4	; 0x04
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e2       	ldi	r20, 0x20	; 32
    47fa:	51 e4       	ldi	r21, 0x41	; 65
    47fc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	bc 01       	movw	r22, r24
    4806:	cd 01       	movw	r24, r26
    4808:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	9a 87       	std	Y+10, r25	; 0x0a
    4812:	89 87       	std	Y+9, r24	; 0x09
    4814:	12 c0       	rjmp	.+36     	; 0x483a <arm_forward+0xee>
    4816:	80 e7       	ldi	r24, 0x70	; 112
    4818:	91 e0       	ldi	r25, 0x01	; 1
    481a:	9c 87       	std	Y+12, r25	; 0x0c
    481c:	8b 87       	std	Y+11, r24	; 0x0b
    481e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4820:	9c 85       	ldd	r25, Y+12	; 0x0c
    4822:	8c 01       	movw	r16, r24
    4824:	c8 01       	movw	r24, r16
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	f1 f7       	brne	.-4      	; 0x4826 <arm_forward+0xda>
    482a:	8c 01       	movw	r16, r24
    482c:	1c 87       	std	Y+12, r17	; 0x0c
    482e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4830:	89 85       	ldd	r24, Y+9	; 0x09
    4832:	9a 85       	ldd	r25, Y+10	; 0x0a
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	9a 87       	std	Y+10, r25	; 0x0a
    4838:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	89 85       	ldd	r24, Y+9	; 0x09
    483c:	9a 85       	ldd	r25, Y+10	; 0x0a
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	51 f7       	brne	.-44     	; 0x4816 <arm_forward+0xca>
    4842:	17 c0       	rjmp	.+46     	; 0x4872 <arm_forward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	6d 81       	ldd	r22, Y+5	; 0x05
    4846:	7e 81       	ldd	r23, Y+6	; 0x06
    4848:	8f 81       	ldd	r24, Y+7	; 0x07
    484a:	98 85       	ldd	r25, Y+8	; 0x08
    484c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9a 87       	std	Y+10, r25	; 0x0a
    4856:	89 87       	std	Y+9, r24	; 0x09
    4858:	89 85       	ldd	r24, Y+9	; 0x09
    485a:	9a 85       	ldd	r25, Y+10	; 0x0a
    485c:	9e 87       	std	Y+14, r25	; 0x0e
    485e:	8d 87       	std	Y+13, r24	; 0x0d
    4860:	8d 85       	ldd	r24, Y+13	; 0x0d
    4862:	9e 85       	ldd	r25, Y+14	; 0x0e
    4864:	8c 01       	movw	r16, r24
    4866:	c8 01       	movw	r24, r16
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <arm_forward+0x11c>
    486c:	8c 01       	movw	r16, r24
    486e:	1e 87       	std	Y+14, r17	; 0x0e
    4870:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_forward()
{
	for(ii=0;ii<90;ii++)
    4872:	80 91 5b 03 	lds	r24, 0x035B
    4876:	8f 5f       	subi	r24, 0xFF	; 255
    4878:	80 93 5b 03 	sts	0x035B, r24
    487c:	80 91 5b 03 	lds	r24, 0x035B
    4880:	8a 35       	cpi	r24, 0x5A	; 90
    4882:	08 f4       	brcc	.+2      	; 0x4886 <arm_forward+0x13a>
    4884:	72 cf       	rjmp	.-284    	; 0x476a <arm_forward+0x1e>
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	a6 e9       	ldi	r26, 0x96	; 150
    488c:	b3 e4       	ldi	r27, 0x43	; 67
    488e:	8f 87       	std	Y+15, r24	; 0x0f
    4890:	98 8b       	std	Y+16, r25	; 0x10
    4892:	a9 8b       	std	Y+17, r26	; 0x11
    4894:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4896:	6f 85       	ldd	r22, Y+15	; 0x0f
    4898:	78 89       	ldd	r23, Y+16	; 0x10
    489a:	89 89       	ldd	r24, Y+17	; 0x11
    489c:	9a 89       	ldd	r25, Y+18	; 0x12
    489e:	26 e6       	ldi	r18, 0x66	; 102
    48a0:	36 e6       	ldi	r19, 0x66	; 102
    48a2:	46 e6       	ldi	r20, 0x66	; 102
    48a4:	55 e4       	ldi	r21, 0x45	; 69
    48a6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	8b 8b       	std	Y+19, r24	; 0x13
    48b0:	9c 8b       	std	Y+20, r25	; 0x14
    48b2:	ad 8b       	std	Y+21, r26	; 0x15
    48b4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    48b6:	11 e0       	ldi	r17, 0x01	; 1
    48b8:	6b 89       	ldd	r22, Y+19	; 0x13
    48ba:	7c 89       	ldd	r23, Y+20	; 0x14
    48bc:	8d 89       	ldd	r24, Y+21	; 0x15
    48be:	9e 89       	ldd	r25, Y+22	; 0x16
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e8       	ldi	r20, 0x80	; 128
    48c6:	5f e3       	ldi	r21, 0x3F	; 63
    48c8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    48cc:	88 23       	and	r24, r24
    48ce:	0c f0       	brlt	.+2      	; 0x48d2 <arm_forward+0x186>
    48d0:	10 e0       	ldi	r17, 0x00	; 0
    48d2:	11 23       	and	r17, r17
    48d4:	29 f0       	breq	.+10     	; 0x48e0 <arm_forward+0x194>
		__ticks = 1;
    48d6:	81 e0       	ldi	r24, 0x01	; 1
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	98 8f       	std	Y+24, r25	; 0x18
    48dc:	8f 8b       	std	Y+23, r24	; 0x17
    48de:	46 c0       	rjmp	.+140    	; 0x496c <arm_forward+0x220>
	else if (__tmp > 65535)
    48e0:	11 e0       	ldi	r17, 0x01	; 1
    48e2:	6b 89       	ldd	r22, Y+19	; 0x13
    48e4:	7c 89       	ldd	r23, Y+20	; 0x14
    48e6:	8d 89       	ldd	r24, Y+21	; 0x15
    48e8:	9e 89       	ldd	r25, Y+22	; 0x16
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	0c f0       	brlt	.+2      	; 0x48fc <arm_forward+0x1b0>
    48fa:	10 e0       	ldi	r17, 0x00	; 0
    48fc:	11 23       	and	r17, r17
    48fe:	61 f1       	breq	.+88     	; 0x4958 <arm_forward+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4900:	6f 85       	ldd	r22, Y+15	; 0x0f
    4902:	78 89       	ldd	r23, Y+16	; 0x10
    4904:	89 89       	ldd	r24, Y+17	; 0x11
    4906:	9a 89       	ldd	r25, Y+18	; 0x12
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	40 e2       	ldi	r20, 0x20	; 32
    490e:	51 e4       	ldi	r21, 0x41	; 65
    4910:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	bc 01       	movw	r22, r24
    491a:	cd 01       	movw	r24, r26
    491c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	98 8f       	std	Y+24, r25	; 0x18
    4926:	8f 8b       	std	Y+23, r24	; 0x17
    4928:	12 c0       	rjmp	.+36     	; 0x494e <arm_forward+0x202>
    492a:	80 e7       	ldi	r24, 0x70	; 112
    492c:	91 e0       	ldi	r25, 0x01	; 1
    492e:	9a 8f       	std	Y+26, r25	; 0x1a
    4930:	89 8f       	std	Y+25, r24	; 0x19
    4932:	89 8d       	ldd	r24, Y+25	; 0x19
    4934:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4936:	8c 01       	movw	r16, r24
    4938:	c8 01       	movw	r24, r16
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	f1 f7       	brne	.-4      	; 0x493a <arm_forward+0x1ee>
    493e:	8c 01       	movw	r16, r24
    4940:	1a 8f       	std	Y+26, r17	; 0x1a
    4942:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4944:	8f 89       	ldd	r24, Y+23	; 0x17
    4946:	98 8d       	ldd	r25, Y+24	; 0x18
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	98 8f       	std	Y+24, r25	; 0x18
    494c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    494e:	8f 89       	ldd	r24, Y+23	; 0x17
    4950:	98 8d       	ldd	r25, Y+24	; 0x18
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	51 f7       	brne	.-44     	; 0x492a <arm_forward+0x1de>
    4956:	17 c0       	rjmp	.+46     	; 0x4986 <arm_forward+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4958:	6b 89       	ldd	r22, Y+19	; 0x13
    495a:	7c 89       	ldd	r23, Y+20	; 0x14
    495c:	8d 89       	ldd	r24, Y+21	; 0x15
    495e:	9e 89       	ldd	r25, Y+22	; 0x16
    4960:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	98 8f       	std	Y+24, r25	; 0x18
    496a:	8f 8b       	std	Y+23, r24	; 0x17
    496c:	8f 89       	ldd	r24, Y+23	; 0x17
    496e:	98 8d       	ldd	r25, Y+24	; 0x18
    4970:	9c 8f       	std	Y+28, r25	; 0x1c
    4972:	8b 8f       	std	Y+27, r24	; 0x1b
    4974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4978:	8c 01       	movw	r16, r24
    497a:	c8 01       	movw	r24, r16
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	f1 f7       	brne	.-4      	; 0x497c <arm_forward+0x230>
    4980:	8c 01       	movw	r16, r24
    4982:	1c 8f       	std	Y+28, r17	; 0x1c
    4984:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_2(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
	
}
    4986:	6c 96       	adiw	r28, 0x1c	; 28
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	08 95       	ret

0000499c <arm_backward>:

void arm_backward()
{
    499c:	0f 93       	push	r16
    499e:	1f 93       	push	r17
    49a0:	cf 93       	push	r28
    49a2:	df 93       	push	r29
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
    49a8:	2e 97       	sbiw	r28, 0x0e	; 14
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	f8 94       	cli
    49ae:	de bf       	out	0x3e, r29	; 62
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    49b4:	8a e5       	ldi	r24, 0x5A	; 90
    49b6:	80 93 5b 03 	sts	0x035B, r24
    49ba:	89 c0       	rjmp	.+274    	; 0x4ace <arm_backward+0x132>
	{
		servo_2(ii);
    49bc:	80 91 5b 03 	lds	r24, 0x035B
    49c0:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	a0 e2       	ldi	r26, 0x20	; 32
    49ca:	b1 e4       	ldi	r27, 0x41	; 65
    49cc:	89 83       	std	Y+1, r24	; 0x01
    49ce:	9a 83       	std	Y+2, r25	; 0x02
    49d0:	ab 83       	std	Y+3, r26	; 0x03
    49d2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49d4:	69 81       	ldd	r22, Y+1	; 0x01
    49d6:	7a 81       	ldd	r23, Y+2	; 0x02
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	9c 81       	ldd	r25, Y+4	; 0x04
    49dc:	26 e6       	ldi	r18, 0x66	; 102
    49de:	36 e6       	ldi	r19, 0x66	; 102
    49e0:	46 e6       	ldi	r20, 0x66	; 102
    49e2:	55 e4       	ldi	r21, 0x45	; 69
    49e4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	8d 83       	std	Y+5, r24	; 0x05
    49ee:	9e 83       	std	Y+6, r25	; 0x06
    49f0:	af 83       	std	Y+7, r26	; 0x07
    49f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    49f4:	11 e0       	ldi	r17, 0x01	; 1
    49f6:	6d 81       	ldd	r22, Y+5	; 0x05
    49f8:	7e 81       	ldd	r23, Y+6	; 0x06
    49fa:	8f 81       	ldd	r24, Y+7	; 0x07
    49fc:	98 85       	ldd	r25, Y+8	; 0x08
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	40 e8       	ldi	r20, 0x80	; 128
    4a04:	5f e3       	ldi	r21, 0x3F	; 63
    4a06:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4a0a:	88 23       	and	r24, r24
    4a0c:	0c f0       	brlt	.+2      	; 0x4a10 <arm_backward+0x74>
    4a0e:	10 e0       	ldi	r17, 0x00	; 0
    4a10:	11 23       	and	r17, r17
    4a12:	29 f0       	breq	.+10     	; 0x4a1e <arm_backward+0x82>
		__ticks = 1;
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	9a 87       	std	Y+10, r25	; 0x0a
    4a1a:	89 87       	std	Y+9, r24	; 0x09
    4a1c:	46 c0       	rjmp	.+140    	; 0x4aaa <arm_backward+0x10e>
	else if (__tmp > 65535)
    4a1e:	11 e0       	ldi	r17, 0x01	; 1
    4a20:	6d 81       	ldd	r22, Y+5	; 0x05
    4a22:	7e 81       	ldd	r23, Y+6	; 0x06
    4a24:	8f 81       	ldd	r24, Y+7	; 0x07
    4a26:	98 85       	ldd	r25, Y+8	; 0x08
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	3f ef       	ldi	r19, 0xFF	; 255
    4a2c:	4f e7       	ldi	r20, 0x7F	; 127
    4a2e:	57 e4       	ldi	r21, 0x47	; 71
    4a30:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4a34:	18 16       	cp	r1, r24
    4a36:	0c f0       	brlt	.+2      	; 0x4a3a <arm_backward+0x9e>
    4a38:	10 e0       	ldi	r17, 0x00	; 0
    4a3a:	11 23       	and	r17, r17
    4a3c:	61 f1       	breq	.+88     	; 0x4a96 <arm_backward+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3e:	69 81       	ldd	r22, Y+1	; 0x01
    4a40:	7a 81       	ldd	r23, Y+2	; 0x02
    4a42:	8b 81       	ldd	r24, Y+3	; 0x03
    4a44:	9c 81       	ldd	r25, Y+4	; 0x04
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	40 e2       	ldi	r20, 0x20	; 32
    4a4c:	51 e4       	ldi	r21, 0x41	; 65
    4a4e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	bc 01       	movw	r22, r24
    4a58:	cd 01       	movw	r24, r26
    4a5a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	9a 87       	std	Y+10, r25	; 0x0a
    4a64:	89 87       	std	Y+9, r24	; 0x09
    4a66:	12 c0       	rjmp	.+36     	; 0x4a8c <arm_backward+0xf0>
    4a68:	80 e7       	ldi	r24, 0x70	; 112
    4a6a:	91 e0       	ldi	r25, 0x01	; 1
    4a6c:	9c 87       	std	Y+12, r25	; 0x0c
    4a6e:	8b 87       	std	Y+11, r24	; 0x0b
    4a70:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a72:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a74:	8c 01       	movw	r16, r24
    4a76:	c8 01       	movw	r24, r16
    4a78:	01 97       	sbiw	r24, 0x01	; 1
    4a7a:	f1 f7       	brne	.-4      	; 0x4a78 <arm_backward+0xdc>
    4a7c:	8c 01       	movw	r16, r24
    4a7e:	1c 87       	std	Y+12, r17	; 0x0c
    4a80:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a86:	01 97       	sbiw	r24, 0x01	; 1
    4a88:	9a 87       	std	Y+10, r25	; 0x0a
    4a8a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8c:	89 85       	ldd	r24, Y+9	; 0x09
    4a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a90:	00 97       	sbiw	r24, 0x00	; 0
    4a92:	51 f7       	brne	.-44     	; 0x4a68 <arm_backward+0xcc>
    4a94:	17 c0       	rjmp	.+46     	; 0x4ac4 <arm_backward+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a96:	6d 81       	ldd	r22, Y+5	; 0x05
    4a98:	7e 81       	ldd	r23, Y+6	; 0x06
    4a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a9c:	98 85       	ldd	r25, Y+8	; 0x08
    4a9e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9a 87       	std	Y+10, r25	; 0x0a
    4aa8:	89 87       	std	Y+9, r24	; 0x09
    4aaa:	89 85       	ldd	r24, Y+9	; 0x09
    4aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aae:	9e 87       	std	Y+14, r25	; 0x0e
    4ab0:	8d 87       	std	Y+13, r24	; 0x0d
    4ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab6:	8c 01       	movw	r16, r24
    4ab8:	c8 01       	movw	r24, r16
    4aba:	01 97       	sbiw	r24, 0x01	; 1
    4abc:	f1 f7       	brne	.-4      	; 0x4aba <arm_backward+0x11e>
    4abe:	8c 01       	movw	r16, r24
    4ac0:	1e 87       	std	Y+14, r17	; 0x0e
    4ac2:	0d 87       	std	Y+13, r16	; 0x0d
	
}

void arm_backward()
{
	for(ii=90;ii>0;ii--)
    4ac4:	80 91 5b 03 	lds	r24, 0x035B
    4ac8:	81 50       	subi	r24, 0x01	; 1
    4aca:	80 93 5b 03 	sts	0x035B, r24
    4ace:	80 91 5b 03 	lds	r24, 0x035B
    4ad2:	88 23       	and	r24, r24
    4ad4:	09 f0       	breq	.+2      	; 0x4ad8 <arm_backward+0x13c>
    4ad6:	72 cf       	rjmp	.-284    	; 0x49bc <arm_backward+0x20>
	{
		servo_2(ii);
		_delay_ms(10);
	}
	
}
    4ad8:	2e 96       	adiw	r28, 0x0e	; 14
    4ada:	0f b6       	in	r0, 0x3f	; 63
    4adc:	f8 94       	cli
    4ade:	de bf       	out	0x3e, r29	; 62
    4ae0:	0f be       	out	0x3f, r0	; 63
    4ae2:	cd bf       	out	0x3d, r28	; 61
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	1f 91       	pop	r17
    4aea:	0f 91       	pop	r16
    4aec:	08 95       	ret

00004aee <reset>:

void reset()
{
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62
    4afa:	e8 97       	sbiw	r28, 0x38	; 56
    4afc:	0f b6       	in	r0, 0x3f	; 63
    4afe:	f8 94       	cli
    4b00:	de bf       	out	0x3e, r29	; 62
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	cd bf       	out	0x3d, r28	; 61
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	aa ef       	ldi	r26, 0xFA	; 250
    4b0c:	b3 e4       	ldi	r27, 0x43	; 67
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	9a 83       	std	Y+2, r25	; 0x02
    4b12:	ab 83       	std	Y+3, r26	; 0x03
    4b14:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4b16:	69 81       	ldd	r22, Y+1	; 0x01
    4b18:	7a 81       	ldd	r23, Y+2	; 0x02
    4b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1e:	26 e6       	ldi	r18, 0x66	; 102
    4b20:	36 e6       	ldi	r19, 0x66	; 102
    4b22:	46 e6       	ldi	r20, 0x66	; 102
    4b24:	55 e4       	ldi	r21, 0x45	; 69
    4b26:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	8d 83       	std	Y+5, r24	; 0x05
    4b30:	9e 83       	std	Y+6, r25	; 0x06
    4b32:	af 83       	std	Y+7, r26	; 0x07
    4b34:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4b36:	11 e0       	ldi	r17, 0x01	; 1
    4b38:	6d 81       	ldd	r22, Y+5	; 0x05
    4b3a:	7e 81       	ldd	r23, Y+6	; 0x06
    4b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b3e:	98 85       	ldd	r25, Y+8	; 0x08
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 e8       	ldi	r20, 0x80	; 128
    4b46:	5f e3       	ldi	r21, 0x3F	; 63
    4b48:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4b4c:	88 23       	and	r24, r24
    4b4e:	0c f0       	brlt	.+2      	; 0x4b52 <reset+0x64>
    4b50:	10 e0       	ldi	r17, 0x00	; 0
    4b52:	11 23       	and	r17, r17
    4b54:	29 f0       	breq	.+10     	; 0x4b60 <reset+0x72>
		__ticks = 1;
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	9a 87       	std	Y+10, r25	; 0x0a
    4b5c:	89 87       	std	Y+9, r24	; 0x09
    4b5e:	46 c0       	rjmp	.+140    	; 0x4bec <reset+0xfe>
	else if (__tmp > 65535)
    4b60:	11 e0       	ldi	r17, 0x01	; 1
    4b62:	6d 81       	ldd	r22, Y+5	; 0x05
    4b64:	7e 81       	ldd	r23, Y+6	; 0x06
    4b66:	8f 81       	ldd	r24, Y+7	; 0x07
    4b68:	98 85       	ldd	r25, Y+8	; 0x08
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	3f ef       	ldi	r19, 0xFF	; 255
    4b6e:	4f e7       	ldi	r20, 0x7F	; 127
    4b70:	57 e4       	ldi	r21, 0x47	; 71
    4b72:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4b76:	18 16       	cp	r1, r24
    4b78:	0c f0       	brlt	.+2      	; 0x4b7c <reset+0x8e>
    4b7a:	10 e0       	ldi	r17, 0x00	; 0
    4b7c:	11 23       	and	r17, r17
    4b7e:	61 f1       	breq	.+88     	; 0x4bd8 <reset+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b80:	69 81       	ldd	r22, Y+1	; 0x01
    4b82:	7a 81       	ldd	r23, Y+2	; 0x02
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	9c 81       	ldd	r25, Y+4	; 0x04
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	40 e2       	ldi	r20, 0x20	; 32
    4b8e:	51 e4       	ldi	r21, 0x41	; 65
    4b90:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	bc 01       	movw	r22, r24
    4b9a:	cd 01       	movw	r24, r26
    4b9c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	9a 87       	std	Y+10, r25	; 0x0a
    4ba6:	89 87       	std	Y+9, r24	; 0x09
    4ba8:	12 c0       	rjmp	.+36     	; 0x4bce <reset+0xe0>
    4baa:	80 e7       	ldi	r24, 0x70	; 112
    4bac:	91 e0       	ldi	r25, 0x01	; 1
    4bae:	9c 87       	std	Y+12, r25	; 0x0c
    4bb0:	8b 87       	std	Y+11, r24	; 0x0b
    4bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bb6:	8c 01       	movw	r16, r24
    4bb8:	c8 01       	movw	r24, r16
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	f1 f7       	brne	.-4      	; 0x4bba <reset+0xcc>
    4bbe:	8c 01       	movw	r16, r24
    4bc0:	1c 87       	std	Y+12, r17	; 0x0c
    4bc2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc4:	89 85       	ldd	r24, Y+9	; 0x09
    4bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	9a 87       	std	Y+10, r25	; 0x0a
    4bcc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bce:	89 85       	ldd	r24, Y+9	; 0x09
    4bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd2:	00 97       	sbiw	r24, 0x00	; 0
    4bd4:	51 f7       	brne	.-44     	; 0x4baa <reset+0xbc>
    4bd6:	17 c0       	rjmp	.+46     	; 0x4c06 <reset+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd8:	6d 81       	ldd	r22, Y+5	; 0x05
    4bda:	7e 81       	ldd	r23, Y+6	; 0x06
    4bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    4bde:	98 85       	ldd	r25, Y+8	; 0x08
    4be0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	9a 87       	std	Y+10, r25	; 0x0a
    4bea:	89 87       	std	Y+9, r24	; 0x09
    4bec:	89 85       	ldd	r24, Y+9	; 0x09
    4bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf0:	9e 87       	std	Y+14, r25	; 0x0e
    4bf2:	8d 87       	std	Y+13, r24	; 0x0d
    4bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf8:	8c 01       	movw	r16, r24
    4bfa:	c8 01       	movw	r24, r16
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	f1 f7       	brne	.-4      	; 0x4bfc <reset+0x10e>
    4c00:	8c 01       	movw	r16, r24
    4c02:	1e 87       	std	Y+14, r17	; 0x0e
    4c04:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	servo_1(0);
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	aa ef       	ldi	r26, 0xFA	; 250
    4c12:	b3 e4       	ldi	r27, 0x43	; 67
    4c14:	8f 87       	std	Y+15, r24	; 0x0f
    4c16:	98 8b       	std	Y+16, r25	; 0x10
    4c18:	a9 8b       	std	Y+17, r26	; 0x11
    4c1a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c1e:	78 89       	ldd	r23, Y+16	; 0x10
    4c20:	89 89       	ldd	r24, Y+17	; 0x11
    4c22:	9a 89       	ldd	r25, Y+18	; 0x12
    4c24:	26 e6       	ldi	r18, 0x66	; 102
    4c26:	36 e6       	ldi	r19, 0x66	; 102
    4c28:	46 e6       	ldi	r20, 0x66	; 102
    4c2a:	55 e4       	ldi	r21, 0x45	; 69
    4c2c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	8b 8b       	std	Y+19, r24	; 0x13
    4c36:	9c 8b       	std	Y+20, r25	; 0x14
    4c38:	ad 8b       	std	Y+21, r26	; 0x15
    4c3a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4c3c:	11 e0       	ldi	r17, 0x01	; 1
    4c3e:	6b 89       	ldd	r22, Y+19	; 0x13
    4c40:	7c 89       	ldd	r23, Y+20	; 0x14
    4c42:	8d 89       	ldd	r24, Y+21	; 0x15
    4c44:	9e 89       	ldd	r25, Y+22	; 0x16
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	40 e8       	ldi	r20, 0x80	; 128
    4c4c:	5f e3       	ldi	r21, 0x3F	; 63
    4c4e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4c52:	88 23       	and	r24, r24
    4c54:	0c f0       	brlt	.+2      	; 0x4c58 <reset+0x16a>
    4c56:	10 e0       	ldi	r17, 0x00	; 0
    4c58:	11 23       	and	r17, r17
    4c5a:	29 f0       	breq	.+10     	; 0x4c66 <reset+0x178>
		__ticks = 1;
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	98 8f       	std	Y+24, r25	; 0x18
    4c62:	8f 8b       	std	Y+23, r24	; 0x17
    4c64:	46 c0       	rjmp	.+140    	; 0x4cf2 <reset+0x204>
	else if (__tmp > 65535)
    4c66:	11 e0       	ldi	r17, 0x01	; 1
    4c68:	6b 89       	ldd	r22, Y+19	; 0x13
    4c6a:	7c 89       	ldd	r23, Y+20	; 0x14
    4c6c:	8d 89       	ldd	r24, Y+21	; 0x15
    4c6e:	9e 89       	ldd	r25, Y+22	; 0x16
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	3f ef       	ldi	r19, 0xFF	; 255
    4c74:	4f e7       	ldi	r20, 0x7F	; 127
    4c76:	57 e4       	ldi	r21, 0x47	; 71
    4c78:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4c7c:	18 16       	cp	r1, r24
    4c7e:	0c f0       	brlt	.+2      	; 0x4c82 <reset+0x194>
    4c80:	10 e0       	ldi	r17, 0x00	; 0
    4c82:	11 23       	and	r17, r17
    4c84:	61 f1       	breq	.+88     	; 0x4cde <reset+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c86:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c88:	78 89       	ldd	r23, Y+16	; 0x10
    4c8a:	89 89       	ldd	r24, Y+17	; 0x11
    4c8c:	9a 89       	ldd	r25, Y+18	; 0x12
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e2       	ldi	r20, 0x20	; 32
    4c94:	51 e4       	ldi	r21, 0x41	; 65
    4c96:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	cd 01       	movw	r24, r26
    4ca2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	98 8f       	std	Y+24, r25	; 0x18
    4cac:	8f 8b       	std	Y+23, r24	; 0x17
    4cae:	12 c0       	rjmp	.+36     	; 0x4cd4 <reset+0x1e6>
    4cb0:	80 e7       	ldi	r24, 0x70	; 112
    4cb2:	91 e0       	ldi	r25, 0x01	; 1
    4cb4:	9a 8f       	std	Y+26, r25	; 0x1a
    4cb6:	89 8f       	std	Y+25, r24	; 0x19
    4cb8:	89 8d       	ldd	r24, Y+25	; 0x19
    4cba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4cbc:	8c 01       	movw	r16, r24
    4cbe:	c8 01       	movw	r24, r16
    4cc0:	01 97       	sbiw	r24, 0x01	; 1
    4cc2:	f1 f7       	brne	.-4      	; 0x4cc0 <reset+0x1d2>
    4cc4:	8c 01       	movw	r16, r24
    4cc6:	1a 8f       	std	Y+26, r17	; 0x1a
    4cc8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cca:	8f 89       	ldd	r24, Y+23	; 0x17
    4ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	98 8f       	std	Y+24, r25	; 0x18
    4cd2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	51 f7       	brne	.-44     	; 0x4cb0 <reset+0x1c2>
    4cdc:	17 c0       	rjmp	.+46     	; 0x4d0c <reset+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cde:	6b 89       	ldd	r22, Y+19	; 0x13
    4ce0:	7c 89       	ldd	r23, Y+20	; 0x14
    4ce2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ce4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ce6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	98 8f       	std	Y+24, r25	; 0x18
    4cf0:	8f 8b       	std	Y+23, r24	; 0x17
    4cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    4cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    4cf6:	9c 8f       	std	Y+28, r25	; 0x1c
    4cf8:	8b 8f       	std	Y+27, r24	; 0x1b
    4cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cfe:	8c 01       	movw	r16, r24
    4d00:	c8 01       	movw	r24, r16
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <reset+0x214>
    4d06:	8c 01       	movw	r16, r24
    4d08:	1c 8f       	std	Y+28, r17	; 0x1c
    4d0a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(500);
	servo_2(0);
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	aa ef       	ldi	r26, 0xFA	; 250
    4d18:	b3 e4       	ldi	r27, 0x43	; 67
    4d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    4d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    4d1e:	af 8f       	std	Y+31, r26	; 0x1f
    4d20:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d22:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4d24:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4d26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d28:	98 a1       	lds	r25, 0x48
    4d2a:	26 e6       	ldi	r18, 0x66	; 102
    4d2c:	36 e6       	ldi	r19, 0x66	; 102
    4d2e:	46 e6       	ldi	r20, 0x66	; 102
    4d30:	55 e4       	ldi	r21, 0x45	; 69
    4d32:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	89 a3       	lds	r24, 0x59
    4d3c:	9a a3       	lds	r25, 0x5a
    4d3e:	ab a3       	lds	r26, 0x5b
    4d40:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    4d42:	11 e0       	ldi	r17, 0x01	; 1
    4d44:	69 a1       	lds	r22, 0x49
    4d46:	7a a1       	lds	r23, 0x4a
    4d48:	8b a1       	lds	r24, 0x4b
    4d4a:	9c a1       	lds	r25, 0x4c
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e8       	ldi	r20, 0x80	; 128
    4d52:	5f e3       	ldi	r21, 0x3F	; 63
    4d54:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4d58:	88 23       	and	r24, r24
    4d5a:	0c f0       	brlt	.+2      	; 0x4d5e <reset+0x270>
    4d5c:	10 e0       	ldi	r17, 0x00	; 0
    4d5e:	11 23       	and	r17, r17
    4d60:	29 f0       	breq	.+10     	; 0x4d6c <reset+0x27e>
		__ticks = 1;
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	9e a3       	lds	r25, 0x5e
    4d68:	8d a3       	lds	r24, 0x5d
    4d6a:	46 c0       	rjmp	.+140    	; 0x4df8 <reset+0x30a>
	else if (__tmp > 65535)
    4d6c:	11 e0       	ldi	r17, 0x01	; 1
    4d6e:	69 a1       	lds	r22, 0x49
    4d70:	7a a1       	lds	r23, 0x4a
    4d72:	8b a1       	lds	r24, 0x4b
    4d74:	9c a1       	lds	r25, 0x4c
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	3f ef       	ldi	r19, 0xFF	; 255
    4d7a:	4f e7       	ldi	r20, 0x7F	; 127
    4d7c:	57 e4       	ldi	r21, 0x47	; 71
    4d7e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4d82:	18 16       	cp	r1, r24
    4d84:	0c f0       	brlt	.+2      	; 0x4d88 <reset+0x29a>
    4d86:	10 e0       	ldi	r17, 0x00	; 0
    4d88:	11 23       	and	r17, r17
    4d8a:	61 f1       	breq	.+88     	; 0x4de4 <reset+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4d8e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d92:	98 a1       	lds	r25, 0x48
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e2       	ldi	r20, 0x20	; 32
    4d9a:	51 e4       	ldi	r21, 0x41	; 65
    4d9c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	bc 01       	movw	r22, r24
    4da6:	cd 01       	movw	r24, r26
    4da8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	9e a3       	lds	r25, 0x5e
    4db2:	8d a3       	lds	r24, 0x5d
    4db4:	12 c0       	rjmp	.+36     	; 0x4dda <reset+0x2ec>
    4db6:	80 e7       	ldi	r24, 0x70	; 112
    4db8:	91 e0       	ldi	r25, 0x01	; 1
    4dba:	98 a7       	lds	r25, 0x78
    4dbc:	8f a3       	lds	r24, 0x5f
    4dbe:	8f a1       	lds	r24, 0x4f
    4dc0:	98 a5       	lds	r25, 0x68
    4dc2:	8c 01       	movw	r16, r24
    4dc4:	c8 01       	movw	r24, r16
    4dc6:	01 97       	sbiw	r24, 0x01	; 1
    4dc8:	f1 f7       	brne	.-4      	; 0x4dc6 <reset+0x2d8>
    4dca:	8c 01       	movw	r16, r24
    4dcc:	18 a7       	lds	r17, 0x78
    4dce:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd0:	8d a1       	lds	r24, 0x4d
    4dd2:	9e a1       	lds	r25, 0x4e
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	9e a3       	lds	r25, 0x5e
    4dd8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dda:	8d a1       	lds	r24, 0x4d
    4ddc:	9e a1       	lds	r25, 0x4e
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	51 f7       	brne	.-44     	; 0x4db6 <reset+0x2c8>
    4de2:	17 c0       	rjmp	.+46     	; 0x4e12 <reset+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de4:	69 a1       	lds	r22, 0x49
    4de6:	7a a1       	lds	r23, 0x4a
    4de8:	8b a1       	lds	r24, 0x4b
    4dea:	9c a1       	lds	r25, 0x4c
    4dec:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	9e a3       	lds	r25, 0x5e
    4df6:	8d a3       	lds	r24, 0x5d
    4df8:	8d a1       	lds	r24, 0x4d
    4dfa:	9e a1       	lds	r25, 0x4e
    4dfc:	9a a7       	lds	r25, 0x7a
    4dfe:	89 a7       	lds	r24, 0x79
    4e00:	89 a5       	lds	r24, 0x69
    4e02:	9a a5       	lds	r25, 0x6a
    4e04:	8c 01       	movw	r16, r24
    4e06:	c8 01       	movw	r24, r16
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	f1 f7       	brne	.-4      	; 0x4e08 <reset+0x31a>
    4e0c:	8c 01       	movw	r16, r24
    4e0e:	1a a7       	lds	r17, 0x7a
    4e10:	09 a7       	lds	r16, 0x79
	_delay_ms(500);
	servo_3(0);
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	aa ef       	ldi	r26, 0xFA	; 250
    4e1e:	b3 e4       	ldi	r27, 0x43	; 67
    4e20:	8b a7       	lds	r24, 0x7b
    4e22:	9c a7       	lds	r25, 0x7c
    4e24:	ad a7       	lds	r26, 0x7d
    4e26:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4e28:	6b a5       	lds	r22, 0x6b
    4e2a:	7c a5       	lds	r23, 0x6c
    4e2c:	8d a5       	lds	r24, 0x6d
    4e2e:	9e a5       	lds	r25, 0x6e
    4e30:	26 e6       	ldi	r18, 0x66	; 102
    4e32:	36 e6       	ldi	r19, 0x66	; 102
    4e34:	46 e6       	ldi	r20, 0x66	; 102
    4e36:	55 e4       	ldi	r21, 0x45	; 69
    4e38:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	8f a7       	lds	r24, 0x7f
    4e42:	98 ab       	sts	0x58, r25
    4e44:	a9 ab       	sts	0x59, r26
    4e46:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    4e48:	11 e0       	ldi	r17, 0x01	; 1
    4e4a:	6f a5       	lds	r22, 0x6f
    4e4c:	78 a9       	sts	0x48, r23
    4e4e:	89 a9       	sts	0x49, r24
    4e50:	9a a9       	sts	0x4a, r25
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e8       	ldi	r20, 0x80	; 128
    4e58:	5f e3       	ldi	r21, 0x3F	; 63
    4e5a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4e5e:	88 23       	and	r24, r24
    4e60:	0c f0       	brlt	.+2      	; 0x4e64 <reset+0x376>
    4e62:	10 e0       	ldi	r17, 0x00	; 0
    4e64:	11 23       	and	r17, r17
    4e66:	29 f0       	breq	.+10     	; 0x4e72 <reset+0x384>
		__ticks = 1;
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	9c ab       	sts	0x5c, r25
    4e6e:	8b ab       	sts	0x5b, r24
    4e70:	46 c0       	rjmp	.+140    	; 0x4efe <reset+0x410>
	else if (__tmp > 65535)
    4e72:	11 e0       	ldi	r17, 0x01	; 1
    4e74:	6f a5       	lds	r22, 0x6f
    4e76:	78 a9       	sts	0x48, r23
    4e78:	89 a9       	sts	0x49, r24
    4e7a:	9a a9       	sts	0x4a, r25
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	3f ef       	ldi	r19, 0xFF	; 255
    4e80:	4f e7       	ldi	r20, 0x7F	; 127
    4e82:	57 e4       	ldi	r21, 0x47	; 71
    4e84:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4e88:	18 16       	cp	r1, r24
    4e8a:	0c f0       	brlt	.+2      	; 0x4e8e <reset+0x3a0>
    4e8c:	10 e0       	ldi	r17, 0x00	; 0
    4e8e:	11 23       	and	r17, r17
    4e90:	61 f1       	breq	.+88     	; 0x4eea <reset+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e92:	6b a5       	lds	r22, 0x6b
    4e94:	7c a5       	lds	r23, 0x6c
    4e96:	8d a5       	lds	r24, 0x6d
    4e98:	9e a5       	lds	r25, 0x6e
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	40 e2       	ldi	r20, 0x20	; 32
    4ea0:	51 e4       	ldi	r21, 0x41	; 65
    4ea2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	bc 01       	movw	r22, r24
    4eac:	cd 01       	movw	r24, r26
    4eae:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	9c ab       	sts	0x5c, r25
    4eb8:	8b ab       	sts	0x5b, r24
    4eba:	12 c0       	rjmp	.+36     	; 0x4ee0 <reset+0x3f2>
    4ebc:	80 e7       	ldi	r24, 0x70	; 112
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	9e ab       	sts	0x5e, r25
    4ec2:	8d ab       	sts	0x5d, r24
    4ec4:	8d a9       	sts	0x4d, r24
    4ec6:	9e a9       	sts	0x4e, r25
    4ec8:	8c 01       	movw	r16, r24
    4eca:	c8 01       	movw	r24, r16
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <reset+0x3de>
    4ed0:	8c 01       	movw	r16, r24
    4ed2:	1e ab       	sts	0x5e, r17
    4ed4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed6:	8b a9       	sts	0x4b, r24
    4ed8:	9c a9       	sts	0x4c, r25
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	9c ab       	sts	0x5c, r25
    4ede:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee0:	8b a9       	sts	0x4b, r24
    4ee2:	9c a9       	sts	0x4c, r25
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	51 f7       	brne	.-44     	; 0x4ebc <reset+0x3ce>
    4ee8:	17 c0       	rjmp	.+46     	; 0x4f18 <reset+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eea:	6f a5       	lds	r22, 0x6f
    4eec:	78 a9       	sts	0x48, r23
    4eee:	89 a9       	sts	0x49, r24
    4ef0:	9a a9       	sts	0x4a, r25
    4ef2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	9c ab       	sts	0x5c, r25
    4efc:	8b ab       	sts	0x5b, r24
    4efe:	8b a9       	sts	0x4b, r24
    4f00:	9c a9       	sts	0x4c, r25
    4f02:	98 af       	sts	0x78, r25
    4f04:	8f ab       	sts	0x5f, r24
    4f06:	8f a9       	sts	0x4f, r24
    4f08:	98 ad       	sts	0x68, r25
    4f0a:	8c 01       	movw	r16, r24
    4f0c:	c8 01       	movw	r24, r16
    4f0e:	01 97       	sbiw	r24, 0x01	; 1
    4f10:	f1 f7       	brne	.-4      	; 0x4f0e <reset+0x420>
    4f12:	8c 01       	movw	r16, r24
    4f14:	18 af       	sts	0x78, r17
    4f16:	0f ab       	sts	0x5f, r16
	_delay_ms(500);
}
    4f18:	e8 96       	adiw	r28, 0x38	; 56
    4f1a:	0f b6       	in	r0, 0x3f	; 63
    4f1c:	f8 94       	cli
    4f1e:	de bf       	out	0x3e, r29	; 62
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	cd bf       	out	0x3d, r28	; 61
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	08 95       	ret

00004f2e <reset1>:
void reset1()
{
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
	servo_1_free();
    4f36:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <servo_1_free>
	servo_2_free();
    4f3a:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <servo_2_free>
	servo_3_free();
    4f3e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <servo_3_free>
}
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	08 95       	ret

00004f48 <defaulty>:


void defaulty()
{
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	6c 97       	sbiw	r28, 0x1c	; 28
    4f56:	0f b6       	in	r0, 0x3f	; 63
    4f58:	f8 94       	cli
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	cd bf       	out	0x3d, r28	; 61
	servo_1(90);
    4f60:	8a e5       	ldi	r24, 0x5A	; 90
    4f62:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	a6 e9       	ldi	r26, 0x96	; 150
    4f6c:	b3 e4       	ldi	r27, 0x43	; 67
    4f6e:	89 83       	std	Y+1, r24	; 0x01
    4f70:	9a 83       	std	Y+2, r25	; 0x02
    4f72:	ab 83       	std	Y+3, r26	; 0x03
    4f74:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4f76:	69 81       	ldd	r22, Y+1	; 0x01
    4f78:	7a 81       	ldd	r23, Y+2	; 0x02
    4f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7e:	26 e6       	ldi	r18, 0x66	; 102
    4f80:	36 e6       	ldi	r19, 0x66	; 102
    4f82:	46 e6       	ldi	r20, 0x66	; 102
    4f84:	55 e4       	ldi	r21, 0x45	; 69
    4f86:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	8d 83       	std	Y+5, r24	; 0x05
    4f90:	9e 83       	std	Y+6, r25	; 0x06
    4f92:	af 83       	std	Y+7, r26	; 0x07
    4f94:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4f96:	11 e0       	ldi	r17, 0x01	; 1
    4f98:	6d 81       	ldd	r22, Y+5	; 0x05
    4f9a:	7e 81       	ldd	r23, Y+6	; 0x06
    4f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f9e:	98 85       	ldd	r25, Y+8	; 0x08
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e8       	ldi	r20, 0x80	; 128
    4fa6:	5f e3       	ldi	r21, 0x3F	; 63
    4fa8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    4fac:	88 23       	and	r24, r24
    4fae:	0c f0       	brlt	.+2      	; 0x4fb2 <defaulty+0x6a>
    4fb0:	10 e0       	ldi	r17, 0x00	; 0
    4fb2:	11 23       	and	r17, r17
    4fb4:	29 f0       	breq	.+10     	; 0x4fc0 <defaulty+0x78>
		__ticks = 1;
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	9a 87       	std	Y+10, r25	; 0x0a
    4fbc:	89 87       	std	Y+9, r24	; 0x09
    4fbe:	46 c0       	rjmp	.+140    	; 0x504c <defaulty+0x104>
	else if (__tmp > 65535)
    4fc0:	11 e0       	ldi	r17, 0x01	; 1
    4fc2:	6d 81       	ldd	r22, Y+5	; 0x05
    4fc4:	7e 81       	ldd	r23, Y+6	; 0x06
    4fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    4fc8:	98 85       	ldd	r25, Y+8	; 0x08
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	3f ef       	ldi	r19, 0xFF	; 255
    4fce:	4f e7       	ldi	r20, 0x7F	; 127
    4fd0:	57 e4       	ldi	r21, 0x47	; 71
    4fd2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    4fd6:	18 16       	cp	r1, r24
    4fd8:	0c f0       	brlt	.+2      	; 0x4fdc <defaulty+0x94>
    4fda:	10 e0       	ldi	r17, 0x00	; 0
    4fdc:	11 23       	and	r17, r17
    4fde:	61 f1       	breq	.+88     	; 0x5038 <defaulty+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe0:	69 81       	ldd	r22, Y+1	; 0x01
    4fe2:	7a 81       	ldd	r23, Y+2	; 0x02
    4fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	40 e2       	ldi	r20, 0x20	; 32
    4fee:	51 e4       	ldi	r21, 0x41	; 65
    4ff0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    4ff4:	dc 01       	movw	r26, r24
    4ff6:	cb 01       	movw	r24, r22
    4ff8:	bc 01       	movw	r22, r24
    4ffa:	cd 01       	movw	r24, r26
    4ffc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5000:	dc 01       	movw	r26, r24
    5002:	cb 01       	movw	r24, r22
    5004:	9a 87       	std	Y+10, r25	; 0x0a
    5006:	89 87       	std	Y+9, r24	; 0x09
    5008:	12 c0       	rjmp	.+36     	; 0x502e <defaulty+0xe6>
    500a:	80 e7       	ldi	r24, 0x70	; 112
    500c:	91 e0       	ldi	r25, 0x01	; 1
    500e:	9c 87       	std	Y+12, r25	; 0x0c
    5010:	8b 87       	std	Y+11, r24	; 0x0b
    5012:	8b 85       	ldd	r24, Y+11	; 0x0b
    5014:	9c 85       	ldd	r25, Y+12	; 0x0c
    5016:	8c 01       	movw	r16, r24
    5018:	c8 01       	movw	r24, r16
    501a:	01 97       	sbiw	r24, 0x01	; 1
    501c:	f1 f7       	brne	.-4      	; 0x501a <defaulty+0xd2>
    501e:	8c 01       	movw	r16, r24
    5020:	1c 87       	std	Y+12, r17	; 0x0c
    5022:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5024:	89 85       	ldd	r24, Y+9	; 0x09
    5026:	9a 85       	ldd	r25, Y+10	; 0x0a
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	9a 87       	std	Y+10, r25	; 0x0a
    502c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502e:	89 85       	ldd	r24, Y+9	; 0x09
    5030:	9a 85       	ldd	r25, Y+10	; 0x0a
    5032:	00 97       	sbiw	r24, 0x00	; 0
    5034:	51 f7       	brne	.-44     	; 0x500a <defaulty+0xc2>
    5036:	17 c0       	rjmp	.+46     	; 0x5066 <defaulty+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5038:	6d 81       	ldd	r22, Y+5	; 0x05
    503a:	7e 81       	ldd	r23, Y+6	; 0x06
    503c:	8f 81       	ldd	r24, Y+7	; 0x07
    503e:	98 85       	ldd	r25, Y+8	; 0x08
    5040:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	9a 87       	std	Y+10, r25	; 0x0a
    504a:	89 87       	std	Y+9, r24	; 0x09
    504c:	89 85       	ldd	r24, Y+9	; 0x09
    504e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5050:	9e 87       	std	Y+14, r25	; 0x0e
    5052:	8d 87       	std	Y+13, r24	; 0x0d
    5054:	8d 85       	ldd	r24, Y+13	; 0x0d
    5056:	9e 85       	ldd	r25, Y+14	; 0x0e
    5058:	8c 01       	movw	r16, r24
    505a:	c8 01       	movw	r24, r16
    505c:	01 97       	sbiw	r24, 0x01	; 1
    505e:	f1 f7       	brne	.-4      	; 0x505c <defaulty+0x114>
    5060:	8c 01       	movw	r16, r24
    5062:	1e 87       	std	Y+14, r17	; 0x0e
    5064:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	servo_2(0);
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	a6 e9       	ldi	r26, 0x96	; 150
    5072:	b3 e4       	ldi	r27, 0x43	; 67
    5074:	8f 87       	std	Y+15, r24	; 0x0f
    5076:	98 8b       	std	Y+16, r25	; 0x10
    5078:	a9 8b       	std	Y+17, r26	; 0x11
    507a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    507c:	6f 85       	ldd	r22, Y+15	; 0x0f
    507e:	78 89       	ldd	r23, Y+16	; 0x10
    5080:	89 89       	ldd	r24, Y+17	; 0x11
    5082:	9a 89       	ldd	r25, Y+18	; 0x12
    5084:	26 e6       	ldi	r18, 0x66	; 102
    5086:	36 e6       	ldi	r19, 0x66	; 102
    5088:	46 e6       	ldi	r20, 0x66	; 102
    508a:	55 e4       	ldi	r21, 0x45	; 69
    508c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	8b 8b       	std	Y+19, r24	; 0x13
    5096:	9c 8b       	std	Y+20, r25	; 0x14
    5098:	ad 8b       	std	Y+21, r26	; 0x15
    509a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    509c:	11 e0       	ldi	r17, 0x01	; 1
    509e:	6b 89       	ldd	r22, Y+19	; 0x13
    50a0:	7c 89       	ldd	r23, Y+20	; 0x14
    50a2:	8d 89       	ldd	r24, Y+21	; 0x15
    50a4:	9e 89       	ldd	r25, Y+22	; 0x16
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	40 e8       	ldi	r20, 0x80	; 128
    50ac:	5f e3       	ldi	r21, 0x3F	; 63
    50ae:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    50b2:	88 23       	and	r24, r24
    50b4:	0c f0       	brlt	.+2      	; 0x50b8 <defaulty+0x170>
    50b6:	10 e0       	ldi	r17, 0x00	; 0
    50b8:	11 23       	and	r17, r17
    50ba:	29 f0       	breq	.+10     	; 0x50c6 <defaulty+0x17e>
		__ticks = 1;
    50bc:	81 e0       	ldi	r24, 0x01	; 1
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	98 8f       	std	Y+24, r25	; 0x18
    50c2:	8f 8b       	std	Y+23, r24	; 0x17
    50c4:	46 c0       	rjmp	.+140    	; 0x5152 <defaulty+0x20a>
	else if (__tmp > 65535)
    50c6:	11 e0       	ldi	r17, 0x01	; 1
    50c8:	6b 89       	ldd	r22, Y+19	; 0x13
    50ca:	7c 89       	ldd	r23, Y+20	; 0x14
    50cc:	8d 89       	ldd	r24, Y+21	; 0x15
    50ce:	9e 89       	ldd	r25, Y+22	; 0x16
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	3f ef       	ldi	r19, 0xFF	; 255
    50d4:	4f e7       	ldi	r20, 0x7F	; 127
    50d6:	57 e4       	ldi	r21, 0x47	; 71
    50d8:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    50dc:	18 16       	cp	r1, r24
    50de:	0c f0       	brlt	.+2      	; 0x50e2 <defaulty+0x19a>
    50e0:	10 e0       	ldi	r17, 0x00	; 0
    50e2:	11 23       	and	r17, r17
    50e4:	61 f1       	breq	.+88     	; 0x513e <defaulty+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    50e8:	78 89       	ldd	r23, Y+16	; 0x10
    50ea:	89 89       	ldd	r24, Y+17	; 0x11
    50ec:	9a 89       	ldd	r25, Y+18	; 0x12
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e2       	ldi	r20, 0x20	; 32
    50f4:	51 e4       	ldi	r21, 0x41	; 65
    50f6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    50fa:	dc 01       	movw	r26, r24
    50fc:	cb 01       	movw	r24, r22
    50fe:	bc 01       	movw	r22, r24
    5100:	cd 01       	movw	r24, r26
    5102:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	98 8f       	std	Y+24, r25	; 0x18
    510c:	8f 8b       	std	Y+23, r24	; 0x17
    510e:	12 c0       	rjmp	.+36     	; 0x5134 <defaulty+0x1ec>
    5110:	80 e7       	ldi	r24, 0x70	; 112
    5112:	91 e0       	ldi	r25, 0x01	; 1
    5114:	9a 8f       	std	Y+26, r25	; 0x1a
    5116:	89 8f       	std	Y+25, r24	; 0x19
    5118:	89 8d       	ldd	r24, Y+25	; 0x19
    511a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    511c:	8c 01       	movw	r16, r24
    511e:	c8 01       	movw	r24, r16
    5120:	01 97       	sbiw	r24, 0x01	; 1
    5122:	f1 f7       	brne	.-4      	; 0x5120 <defaulty+0x1d8>
    5124:	8c 01       	movw	r16, r24
    5126:	1a 8f       	std	Y+26, r17	; 0x1a
    5128:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    512a:	8f 89       	ldd	r24, Y+23	; 0x17
    512c:	98 8d       	ldd	r25, Y+24	; 0x18
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	98 8f       	std	Y+24, r25	; 0x18
    5132:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5134:	8f 89       	ldd	r24, Y+23	; 0x17
    5136:	98 8d       	ldd	r25, Y+24	; 0x18
    5138:	00 97       	sbiw	r24, 0x00	; 0
    513a:	51 f7       	brne	.-44     	; 0x5110 <defaulty+0x1c8>
    513c:	17 c0       	rjmp	.+46     	; 0x516c <defaulty+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    513e:	6b 89       	ldd	r22, Y+19	; 0x13
    5140:	7c 89       	ldd	r23, Y+20	; 0x14
    5142:	8d 89       	ldd	r24, Y+21	; 0x15
    5144:	9e 89       	ldd	r25, Y+22	; 0x16
    5146:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	98 8f       	std	Y+24, r25	; 0x18
    5150:	8f 8b       	std	Y+23, r24	; 0x17
    5152:	8f 89       	ldd	r24, Y+23	; 0x17
    5154:	98 8d       	ldd	r25, Y+24	; 0x18
    5156:	9c 8f       	std	Y+28, r25	; 0x1c
    5158:	8b 8f       	std	Y+27, r24	; 0x1b
    515a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    515c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    515e:	8c 01       	movw	r16, r24
    5160:	c8 01       	movw	r24, r16
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	f1 f7       	brne	.-4      	; 0x5162 <defaulty+0x21a>
    5166:	8c 01       	movw	r16, r24
    5168:	1c 8f       	std	Y+28, r17	; 0x1c
    516a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
}
    516c:	6c 96       	adiw	r28, 0x1c	; 28
    516e:	0f b6       	in	r0, 0x3f	; 63
    5170:	f8 94       	cli
    5172:	de bf       	out	0x3e, r29	; 62
    5174:	0f be       	out	0x3f, r0	; 63
    5176:	cd bf       	out	0x3d, r28	; 61
    5178:	df 91       	pop	r29
    517a:	cf 91       	pop	r28
    517c:	1f 91       	pop	r17
    517e:	0f 91       	pop	r16
    5180:	08 95       	ret

00005182 <left_cycle>:
void left_cycle()
{
    5182:	0f 93       	push	r16
    5184:	1f 93       	push	r17
    5186:	cf 93       	push	r28
    5188:	df 93       	push	r29
    518a:	cd b7       	in	r28, 0x3d	; 61
    518c:	de b7       	in	r29, 0x3e	; 62
    518e:	c6 54       	subi	r28, 0x46	; 70
    5190:	d0 40       	sbci	r29, 0x00	; 0
    5192:	0f b6       	in	r0, 0x3f	; 63
    5194:	f8 94       	cli
    5196:	de bf       	out	0x3e, r29	; 62
    5198:	0f be       	out	0x3f, r0	; 63
    519a:	cd bf       	out	0x3d, r28	; 61
	
	gripper_open();
    519c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	a6 e9       	ldi	r26, 0x96	; 150
    51a6:	b3 e4       	ldi	r27, 0x43	; 67
    51a8:	89 83       	std	Y+1, r24	; 0x01
    51aa:	9a 83       	std	Y+2, r25	; 0x02
    51ac:	ab 83       	std	Y+3, r26	; 0x03
    51ae:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    51b0:	69 81       	ldd	r22, Y+1	; 0x01
    51b2:	7a 81       	ldd	r23, Y+2	; 0x02
    51b4:	8b 81       	ldd	r24, Y+3	; 0x03
    51b6:	9c 81       	ldd	r25, Y+4	; 0x04
    51b8:	26 e6       	ldi	r18, 0x66	; 102
    51ba:	36 e6       	ldi	r19, 0x66	; 102
    51bc:	46 e6       	ldi	r20, 0x66	; 102
    51be:	55 e4       	ldi	r21, 0x45	; 69
    51c0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	8d 83       	std	Y+5, r24	; 0x05
    51ca:	9e 83       	std	Y+6, r25	; 0x06
    51cc:	af 83       	std	Y+7, r26	; 0x07
    51ce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    51d0:	11 e0       	ldi	r17, 0x01	; 1
    51d2:	6d 81       	ldd	r22, Y+5	; 0x05
    51d4:	7e 81       	ldd	r23, Y+6	; 0x06
    51d6:	8f 81       	ldd	r24, Y+7	; 0x07
    51d8:	98 85       	ldd	r25, Y+8	; 0x08
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	40 e8       	ldi	r20, 0x80	; 128
    51e0:	5f e3       	ldi	r21, 0x3F	; 63
    51e2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    51e6:	88 23       	and	r24, r24
    51e8:	0c f0       	brlt	.+2      	; 0x51ec <left_cycle+0x6a>
    51ea:	10 e0       	ldi	r17, 0x00	; 0
    51ec:	11 23       	and	r17, r17
    51ee:	29 f0       	breq	.+10     	; 0x51fa <left_cycle+0x78>
		__ticks = 1;
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	9a 87       	std	Y+10, r25	; 0x0a
    51f6:	89 87       	std	Y+9, r24	; 0x09
    51f8:	46 c0       	rjmp	.+140    	; 0x5286 <left_cycle+0x104>
	else if (__tmp > 65535)
    51fa:	11 e0       	ldi	r17, 0x01	; 1
    51fc:	6d 81       	ldd	r22, Y+5	; 0x05
    51fe:	7e 81       	ldd	r23, Y+6	; 0x06
    5200:	8f 81       	ldd	r24, Y+7	; 0x07
    5202:	98 85       	ldd	r25, Y+8	; 0x08
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	3f ef       	ldi	r19, 0xFF	; 255
    5208:	4f e7       	ldi	r20, 0x7F	; 127
    520a:	57 e4       	ldi	r21, 0x47	; 71
    520c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5210:	18 16       	cp	r1, r24
    5212:	0c f0       	brlt	.+2      	; 0x5216 <left_cycle+0x94>
    5214:	10 e0       	ldi	r17, 0x00	; 0
    5216:	11 23       	and	r17, r17
    5218:	61 f1       	breq	.+88     	; 0x5272 <left_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    521a:	69 81       	ldd	r22, Y+1	; 0x01
    521c:	7a 81       	ldd	r23, Y+2	; 0x02
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	9c 81       	ldd	r25, Y+4	; 0x04
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	40 e2       	ldi	r20, 0x20	; 32
    5228:	51 e4       	ldi	r21, 0x41	; 65
    522a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	bc 01       	movw	r22, r24
    5234:	cd 01       	movw	r24, r26
    5236:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    523a:	dc 01       	movw	r26, r24
    523c:	cb 01       	movw	r24, r22
    523e:	9a 87       	std	Y+10, r25	; 0x0a
    5240:	89 87       	std	Y+9, r24	; 0x09
    5242:	12 c0       	rjmp	.+36     	; 0x5268 <left_cycle+0xe6>
    5244:	80 e7       	ldi	r24, 0x70	; 112
    5246:	91 e0       	ldi	r25, 0x01	; 1
    5248:	9c 87       	std	Y+12, r25	; 0x0c
    524a:	8b 87       	std	Y+11, r24	; 0x0b
    524c:	8b 85       	ldd	r24, Y+11	; 0x0b
    524e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5250:	8c 01       	movw	r16, r24
    5252:	c8 01       	movw	r24, r16
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	f1 f7       	brne	.-4      	; 0x5254 <left_cycle+0xd2>
    5258:	8c 01       	movw	r16, r24
    525a:	1c 87       	std	Y+12, r17	; 0x0c
    525c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    525e:	89 85       	ldd	r24, Y+9	; 0x09
    5260:	9a 85       	ldd	r25, Y+10	; 0x0a
    5262:	01 97       	sbiw	r24, 0x01	; 1
    5264:	9a 87       	std	Y+10, r25	; 0x0a
    5266:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	00 97       	sbiw	r24, 0x00	; 0
    526e:	51 f7       	brne	.-44     	; 0x5244 <left_cycle+0xc2>
    5270:	17 c0       	rjmp	.+46     	; 0x52a0 <left_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5272:	6d 81       	ldd	r22, Y+5	; 0x05
    5274:	7e 81       	ldd	r23, Y+6	; 0x06
    5276:	8f 81       	ldd	r24, Y+7	; 0x07
    5278:	98 85       	ldd	r25, Y+8	; 0x08
    527a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	9a 87       	std	Y+10, r25	; 0x0a
    5284:	89 87       	std	Y+9, r24	; 0x09
    5286:	89 85       	ldd	r24, Y+9	; 0x09
    5288:	9a 85       	ldd	r25, Y+10	; 0x0a
    528a:	9e 87       	std	Y+14, r25	; 0x0e
    528c:	8d 87       	std	Y+13, r24	; 0x0d
    528e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5290:	9e 85       	ldd	r25, Y+14	; 0x0e
    5292:	8c 01       	movw	r16, r24
    5294:	f8 01       	movw	r30, r16
    5296:	31 97       	sbiw	r30, 0x01	; 1
    5298:	f1 f7       	brne	.-4      	; 0x5296 <left_cycle+0x114>
    529a:	8f 01       	movw	r16, r30
    529c:	1e 87       	std	Y+14, r17	; 0x0e
    529e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_left();
    52a0:	0e 94 2c 20 	call	0x4058	; 0x4058 <arm_rotate_left>
    52a4:	80 e0       	ldi	r24, 0x00	; 0
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	a6 e9       	ldi	r26, 0x96	; 150
    52aa:	b3 e4       	ldi	r27, 0x43	; 67
    52ac:	8f 87       	std	Y+15, r24	; 0x0f
    52ae:	98 8b       	std	Y+16, r25	; 0x10
    52b0:	a9 8b       	std	Y+17, r26	; 0x11
    52b2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    52b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    52b6:	78 89       	ldd	r23, Y+16	; 0x10
    52b8:	89 89       	ldd	r24, Y+17	; 0x11
    52ba:	9a 89       	ldd	r25, Y+18	; 0x12
    52bc:	26 e6       	ldi	r18, 0x66	; 102
    52be:	36 e6       	ldi	r19, 0x66	; 102
    52c0:	46 e6       	ldi	r20, 0x66	; 102
    52c2:	55 e4       	ldi	r21, 0x45	; 69
    52c4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    52c8:	dc 01       	movw	r26, r24
    52ca:	cb 01       	movw	r24, r22
    52cc:	8b 8b       	std	Y+19, r24	; 0x13
    52ce:	9c 8b       	std	Y+20, r25	; 0x14
    52d0:	ad 8b       	std	Y+21, r26	; 0x15
    52d2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    52d4:	11 e0       	ldi	r17, 0x01	; 1
    52d6:	6b 89       	ldd	r22, Y+19	; 0x13
    52d8:	7c 89       	ldd	r23, Y+20	; 0x14
    52da:	8d 89       	ldd	r24, Y+21	; 0x15
    52dc:	9e 89       	ldd	r25, Y+22	; 0x16
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	40 e8       	ldi	r20, 0x80	; 128
    52e4:	5f e3       	ldi	r21, 0x3F	; 63
    52e6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    52ea:	88 23       	and	r24, r24
    52ec:	0c f0       	brlt	.+2      	; 0x52f0 <left_cycle+0x16e>
    52ee:	10 e0       	ldi	r17, 0x00	; 0
    52f0:	11 23       	and	r17, r17
    52f2:	29 f0       	breq	.+10     	; 0x52fe <left_cycle+0x17c>
		__ticks = 1;
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	98 8f       	std	Y+24, r25	; 0x18
    52fa:	8f 8b       	std	Y+23, r24	; 0x17
    52fc:	46 c0       	rjmp	.+140    	; 0x538a <left_cycle+0x208>
	else if (__tmp > 65535)
    52fe:	11 e0       	ldi	r17, 0x01	; 1
    5300:	6b 89       	ldd	r22, Y+19	; 0x13
    5302:	7c 89       	ldd	r23, Y+20	; 0x14
    5304:	8d 89       	ldd	r24, Y+21	; 0x15
    5306:	9e 89       	ldd	r25, Y+22	; 0x16
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	3f ef       	ldi	r19, 0xFF	; 255
    530c:	4f e7       	ldi	r20, 0x7F	; 127
    530e:	57 e4       	ldi	r21, 0x47	; 71
    5310:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5314:	18 16       	cp	r1, r24
    5316:	0c f0       	brlt	.+2      	; 0x531a <left_cycle+0x198>
    5318:	10 e0       	ldi	r17, 0x00	; 0
    531a:	11 23       	and	r17, r17
    531c:	61 f1       	breq	.+88     	; 0x5376 <left_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    531e:	6f 85       	ldd	r22, Y+15	; 0x0f
    5320:	78 89       	ldd	r23, Y+16	; 0x10
    5322:	89 89       	ldd	r24, Y+17	; 0x11
    5324:	9a 89       	ldd	r25, Y+18	; 0x12
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	40 e2       	ldi	r20, 0x20	; 32
    532c:	51 e4       	ldi	r21, 0x41	; 65
    532e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5332:	dc 01       	movw	r26, r24
    5334:	cb 01       	movw	r24, r22
    5336:	bc 01       	movw	r22, r24
    5338:	cd 01       	movw	r24, r26
    533a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    533e:	dc 01       	movw	r26, r24
    5340:	cb 01       	movw	r24, r22
    5342:	98 8f       	std	Y+24, r25	; 0x18
    5344:	8f 8b       	std	Y+23, r24	; 0x17
    5346:	12 c0       	rjmp	.+36     	; 0x536c <left_cycle+0x1ea>
    5348:	80 e7       	ldi	r24, 0x70	; 112
    534a:	91 e0       	ldi	r25, 0x01	; 1
    534c:	9a 8f       	std	Y+26, r25	; 0x1a
    534e:	89 8f       	std	Y+25, r24	; 0x19
    5350:	89 8d       	ldd	r24, Y+25	; 0x19
    5352:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5354:	8c 01       	movw	r16, r24
    5356:	c8 01       	movw	r24, r16
    5358:	01 97       	sbiw	r24, 0x01	; 1
    535a:	f1 f7       	brne	.-4      	; 0x5358 <left_cycle+0x1d6>
    535c:	8c 01       	movw	r16, r24
    535e:	1a 8f       	std	Y+26, r17	; 0x1a
    5360:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5362:	8f 89       	ldd	r24, Y+23	; 0x17
    5364:	98 8d       	ldd	r25, Y+24	; 0x18
    5366:	01 97       	sbiw	r24, 0x01	; 1
    5368:	98 8f       	std	Y+24, r25	; 0x18
    536a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    536c:	8f 89       	ldd	r24, Y+23	; 0x17
    536e:	98 8d       	ldd	r25, Y+24	; 0x18
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	51 f7       	brne	.-44     	; 0x5348 <left_cycle+0x1c6>
    5374:	17 c0       	rjmp	.+46     	; 0x53a4 <left_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5376:	6b 89       	ldd	r22, Y+19	; 0x13
    5378:	7c 89       	ldd	r23, Y+20	; 0x14
    537a:	8d 89       	ldd	r24, Y+21	; 0x15
    537c:	9e 89       	ldd	r25, Y+22	; 0x16
    537e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5382:	dc 01       	movw	r26, r24
    5384:	cb 01       	movw	r24, r22
    5386:	98 8f       	std	Y+24, r25	; 0x18
    5388:	8f 8b       	std	Y+23, r24	; 0x17
    538a:	8f 89       	ldd	r24, Y+23	; 0x17
    538c:	98 8d       	ldd	r25, Y+24	; 0x18
    538e:	9c 8f       	std	Y+28, r25	; 0x1c
    5390:	8b 8f       	std	Y+27, r24	; 0x1b
    5392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5396:	8c 01       	movw	r16, r24
    5398:	f8 01       	movw	r30, r16
    539a:	31 97       	sbiw	r30, 0x01	; 1
    539c:	f1 f7       	brne	.-4      	; 0x539a <left_cycle+0x218>
    539e:	8f 01       	movw	r16, r30
    53a0:	1c 8f       	std	Y+28, r17	; 0x1c
    53a2:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    53a4:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_forward>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a6 e9       	ldi	r26, 0x96	; 150
    53ae:	b3 e4       	ldi	r27, 0x43	; 67
    53b0:	8d 8f       	std	Y+29, r24	; 0x1d
    53b2:	9e 8f       	std	Y+30, r25	; 0x1e
    53b4:	af 8f       	std	Y+31, r26	; 0x1f
    53b6:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    53ba:	7e 8d       	ldd	r23, Y+30	; 0x1e
    53bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53be:	98 a1       	lds	r25, 0x48
    53c0:	26 e6       	ldi	r18, 0x66	; 102
    53c2:	36 e6       	ldi	r19, 0x66	; 102
    53c4:	46 e6       	ldi	r20, 0x66	; 102
    53c6:	55 e4       	ldi	r21, 0x45	; 69
    53c8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	89 a3       	lds	r24, 0x59
    53d2:	9a a3       	lds	r25, 0x5a
    53d4:	ab a3       	lds	r26, 0x5b
    53d6:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    53d8:	11 e0       	ldi	r17, 0x01	; 1
    53da:	69 a1       	lds	r22, 0x49
    53dc:	7a a1       	lds	r23, 0x4a
    53de:	8b a1       	lds	r24, 0x4b
    53e0:	9c a1       	lds	r25, 0x4c
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	40 e8       	ldi	r20, 0x80	; 128
    53e8:	5f e3       	ldi	r21, 0x3F	; 63
    53ea:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    53ee:	88 23       	and	r24, r24
    53f0:	0c f0       	brlt	.+2      	; 0x53f4 <left_cycle+0x272>
    53f2:	10 e0       	ldi	r17, 0x00	; 0
    53f4:	11 23       	and	r17, r17
    53f6:	29 f0       	breq	.+10     	; 0x5402 <left_cycle+0x280>
		__ticks = 1;
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	9e a3       	lds	r25, 0x5e
    53fe:	8d a3       	lds	r24, 0x5d
    5400:	46 c0       	rjmp	.+140    	; 0x548e <left_cycle+0x30c>
	else if (__tmp > 65535)
    5402:	11 e0       	ldi	r17, 0x01	; 1
    5404:	69 a1       	lds	r22, 0x49
    5406:	7a a1       	lds	r23, 0x4a
    5408:	8b a1       	lds	r24, 0x4b
    540a:	9c a1       	lds	r25, 0x4c
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	3f ef       	ldi	r19, 0xFF	; 255
    5410:	4f e7       	ldi	r20, 0x7F	; 127
    5412:	57 e4       	ldi	r21, 0x47	; 71
    5414:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5418:	18 16       	cp	r1, r24
    541a:	0c f0       	brlt	.+2      	; 0x541e <left_cycle+0x29c>
    541c:	10 e0       	ldi	r17, 0x00	; 0
    541e:	11 23       	and	r17, r17
    5420:	61 f1       	breq	.+88     	; 0x547a <left_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5422:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5424:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5428:	98 a1       	lds	r25, 0x48
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	40 e2       	ldi	r20, 0x20	; 32
    5430:	51 e4       	ldi	r21, 0x41	; 65
    5432:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	bc 01       	movw	r22, r24
    543c:	cd 01       	movw	r24, r26
    543e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	9e a3       	lds	r25, 0x5e
    5448:	8d a3       	lds	r24, 0x5d
    544a:	12 c0       	rjmp	.+36     	; 0x5470 <left_cycle+0x2ee>
    544c:	80 e7       	ldi	r24, 0x70	; 112
    544e:	91 e0       	ldi	r25, 0x01	; 1
    5450:	98 a7       	lds	r25, 0x78
    5452:	8f a3       	lds	r24, 0x5f
    5454:	8f a1       	lds	r24, 0x4f
    5456:	98 a5       	lds	r25, 0x68
    5458:	8c 01       	movw	r16, r24
    545a:	c8 01       	movw	r24, r16
    545c:	01 97       	sbiw	r24, 0x01	; 1
    545e:	f1 f7       	brne	.-4      	; 0x545c <left_cycle+0x2da>
    5460:	8c 01       	movw	r16, r24
    5462:	18 a7       	lds	r17, 0x78
    5464:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5466:	8d a1       	lds	r24, 0x4d
    5468:	9e a1       	lds	r25, 0x4e
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	9e a3       	lds	r25, 0x5e
    546e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5470:	8d a1       	lds	r24, 0x4d
    5472:	9e a1       	lds	r25, 0x4e
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	51 f7       	brne	.-44     	; 0x544c <left_cycle+0x2ca>
    5478:	17 c0       	rjmp	.+46     	; 0x54a8 <left_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547a:	69 a1       	lds	r22, 0x49
    547c:	7a a1       	lds	r23, 0x4a
    547e:	8b a1       	lds	r24, 0x4b
    5480:	9c a1       	lds	r25, 0x4c
    5482:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5486:	dc 01       	movw	r26, r24
    5488:	cb 01       	movw	r24, r22
    548a:	9e a3       	lds	r25, 0x5e
    548c:	8d a3       	lds	r24, 0x5d
    548e:	8d a1       	lds	r24, 0x4d
    5490:	9e a1       	lds	r25, 0x4e
    5492:	9a a7       	lds	r25, 0x7a
    5494:	89 a7       	lds	r24, 0x79
    5496:	89 a5       	lds	r24, 0x69
    5498:	9a a5       	lds	r25, 0x6a
    549a:	8c 01       	movw	r16, r24
    549c:	f8 01       	movw	r30, r16
    549e:	31 97       	sbiw	r30, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <left_cycle+0x31c>
    54a2:	8f 01       	movw	r16, r30
    54a4:	1a a7       	lds	r17, 0x7a
    54a6:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    54a8:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <gripper_close>
    54ac:	80 e0       	ldi	r24, 0x00	; 0
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	a6 e9       	ldi	r26, 0x96	; 150
    54b2:	b3 e4       	ldi	r27, 0x43	; 67
    54b4:	8b a7       	lds	r24, 0x7b
    54b6:	9c a7       	lds	r25, 0x7c
    54b8:	ad a7       	lds	r26, 0x7d
    54ba:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    54bc:	6b a5       	lds	r22, 0x6b
    54be:	7c a5       	lds	r23, 0x6c
    54c0:	8d a5       	lds	r24, 0x6d
    54c2:	9e a5       	lds	r25, 0x6e
    54c4:	26 e6       	ldi	r18, 0x66	; 102
    54c6:	36 e6       	ldi	r19, 0x66	; 102
    54c8:	46 e6       	ldi	r20, 0x66	; 102
    54ca:	55 e4       	ldi	r21, 0x45	; 69
    54cc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	8f a7       	lds	r24, 0x7f
    54d6:	98 ab       	sts	0x58, r25
    54d8:	a9 ab       	sts	0x59, r26
    54da:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    54dc:	11 e0       	ldi	r17, 0x01	; 1
    54de:	6f a5       	lds	r22, 0x6f
    54e0:	78 a9       	sts	0x48, r23
    54e2:	89 a9       	sts	0x49, r24
    54e4:	9a a9       	sts	0x4a, r25
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e8       	ldi	r20, 0x80	; 128
    54ec:	5f e3       	ldi	r21, 0x3F	; 63
    54ee:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    54f2:	88 23       	and	r24, r24
    54f4:	0c f0       	brlt	.+2      	; 0x54f8 <left_cycle+0x376>
    54f6:	10 e0       	ldi	r17, 0x00	; 0
    54f8:	11 23       	and	r17, r17
    54fa:	29 f0       	breq	.+10     	; 0x5506 <left_cycle+0x384>
		__ticks = 1;
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9c ab       	sts	0x5c, r25
    5502:	8b ab       	sts	0x5b, r24
    5504:	46 c0       	rjmp	.+140    	; 0x5592 <left_cycle+0x410>
	else if (__tmp > 65535)
    5506:	11 e0       	ldi	r17, 0x01	; 1
    5508:	6f a5       	lds	r22, 0x6f
    550a:	78 a9       	sts	0x48, r23
    550c:	89 a9       	sts	0x49, r24
    550e:	9a a9       	sts	0x4a, r25
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	3f ef       	ldi	r19, 0xFF	; 255
    5514:	4f e7       	ldi	r20, 0x7F	; 127
    5516:	57 e4       	ldi	r21, 0x47	; 71
    5518:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    551c:	18 16       	cp	r1, r24
    551e:	0c f0       	brlt	.+2      	; 0x5522 <left_cycle+0x3a0>
    5520:	10 e0       	ldi	r17, 0x00	; 0
    5522:	11 23       	and	r17, r17
    5524:	61 f1       	breq	.+88     	; 0x557e <left_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5526:	6b a5       	lds	r22, 0x6b
    5528:	7c a5       	lds	r23, 0x6c
    552a:	8d a5       	lds	r24, 0x6d
    552c:	9e a5       	lds	r25, 0x6e
    552e:	20 e0       	ldi	r18, 0x00	; 0
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	40 e2       	ldi	r20, 0x20	; 32
    5534:	51 e4       	ldi	r21, 0x41	; 65
    5536:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    553a:	dc 01       	movw	r26, r24
    553c:	cb 01       	movw	r24, r22
    553e:	bc 01       	movw	r22, r24
    5540:	cd 01       	movw	r24, r26
    5542:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5546:	dc 01       	movw	r26, r24
    5548:	cb 01       	movw	r24, r22
    554a:	9c ab       	sts	0x5c, r25
    554c:	8b ab       	sts	0x5b, r24
    554e:	12 c0       	rjmp	.+36     	; 0x5574 <left_cycle+0x3f2>
    5550:	80 e7       	ldi	r24, 0x70	; 112
    5552:	91 e0       	ldi	r25, 0x01	; 1
    5554:	9e ab       	sts	0x5e, r25
    5556:	8d ab       	sts	0x5d, r24
    5558:	8d a9       	sts	0x4d, r24
    555a:	9e a9       	sts	0x4e, r25
    555c:	8c 01       	movw	r16, r24
    555e:	c8 01       	movw	r24, r16
    5560:	01 97       	sbiw	r24, 0x01	; 1
    5562:	f1 f7       	brne	.-4      	; 0x5560 <left_cycle+0x3de>
    5564:	8c 01       	movw	r16, r24
    5566:	1e ab       	sts	0x5e, r17
    5568:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    556a:	8b a9       	sts	0x4b, r24
    556c:	9c a9       	sts	0x4c, r25
    556e:	01 97       	sbiw	r24, 0x01	; 1
    5570:	9c ab       	sts	0x5c, r25
    5572:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5574:	8b a9       	sts	0x4b, r24
    5576:	9c a9       	sts	0x4c, r25
    5578:	00 97       	sbiw	r24, 0x00	; 0
    557a:	51 f7       	brne	.-44     	; 0x5550 <left_cycle+0x3ce>
    557c:	17 c0       	rjmp	.+46     	; 0x55ac <left_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    557e:	6f a5       	lds	r22, 0x6f
    5580:	78 a9       	sts	0x48, r23
    5582:	89 a9       	sts	0x49, r24
    5584:	9a a9       	sts	0x4a, r25
    5586:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	9c ab       	sts	0x5c, r25
    5590:	8b ab       	sts	0x5b, r24
    5592:	8b a9       	sts	0x4b, r24
    5594:	9c a9       	sts	0x4c, r25
    5596:	98 af       	sts	0x78, r25
    5598:	8f ab       	sts	0x5f, r24
    559a:	8f a9       	sts	0x4f, r24
    559c:	98 ad       	sts	0x68, r25
    559e:	8c 01       	movw	r16, r24
    55a0:	f8 01       	movw	r30, r16
    55a2:	31 97       	sbiw	r30, 0x01	; 1
    55a4:	f1 f7       	brne	.-4      	; 0x55a2 <left_cycle+0x420>
    55a6:	8f 01       	movw	r16, r30
    55a8:	18 af       	sts	0x78, r17
    55aa:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    55ac:	0e 94 ce 24 	call	0x499c	; 0x499c <arm_backward>
    55b0:	80 e0       	ldi	r24, 0x00	; 0
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	a6 e9       	ldi	r26, 0x96	; 150
    55b6:	b3 e4       	ldi	r27, 0x43	; 67
    55b8:	89 af       	sts	0x79, r24
    55ba:	9a af       	sts	0x7a, r25
    55bc:	ab af       	sts	0x7b, r26
    55be:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    55c0:	69 ad       	sts	0x69, r22
    55c2:	7a ad       	sts	0x6a, r23
    55c4:	8b ad       	sts	0x6b, r24
    55c6:	9c ad       	sts	0x6c, r25
    55c8:	26 e6       	ldi	r18, 0x66	; 102
    55ca:	36 e6       	ldi	r19, 0x66	; 102
    55cc:	46 e6       	ldi	r20, 0x66	; 102
    55ce:	55 e4       	ldi	r21, 0x45	; 69
    55d0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	9e 01       	movw	r18, r28
    55da:	23 5c       	subi	r18, 0xC3	; 195
    55dc:	3f 4f       	sbci	r19, 0xFF	; 255
    55de:	f9 01       	movw	r30, r18
    55e0:	80 83       	st	Z, r24
    55e2:	91 83       	std	Z+1, r25	; 0x01
    55e4:	a2 83       	std	Z+2, r26	; 0x02
    55e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55e8:	11 e0       	ldi	r17, 0x01	; 1
    55ea:	ce 01       	movw	r24, r28
    55ec:	cd 96       	adiw	r24, 0x3d	; 61
    55ee:	fc 01       	movw	r30, r24
    55f0:	60 81       	ld	r22, Z
    55f2:	71 81       	ldd	r23, Z+1	; 0x01
    55f4:	82 81       	ldd	r24, Z+2	; 0x02
    55f6:	93 81       	ldd	r25, Z+3	; 0x03
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e8       	ldi	r20, 0x80	; 128
    55fe:	5f e3       	ldi	r21, 0x3F	; 63
    5600:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    5604:	88 23       	and	r24, r24
    5606:	0c f0       	brlt	.+2      	; 0x560a <left_cycle+0x488>
    5608:	10 e0       	ldi	r17, 0x00	; 0
    560a:	11 23       	and	r17, r17
    560c:	49 f0       	breq	.+18     	; 0x5620 <left_cycle+0x49e>
		__ticks = 1;
    560e:	ce 01       	movw	r24, r28
    5610:	8f 5b       	subi	r24, 0xBF	; 191
    5612:	9f 4f       	sbci	r25, 0xFF	; 255
    5614:	21 e0       	ldi	r18, 0x01	; 1
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	fc 01       	movw	r30, r24
    561a:	31 83       	std	Z+1, r19	; 0x01
    561c:	20 83       	st	Z, r18
    561e:	6e c0       	rjmp	.+220    	; 0x56fc <left_cycle+0x57a>
	else if (__tmp > 65535)
    5620:	11 e0       	ldi	r17, 0x01	; 1
    5622:	ce 01       	movw	r24, r28
    5624:	cd 96       	adiw	r24, 0x3d	; 61
    5626:	fc 01       	movw	r30, r24
    5628:	60 81       	ld	r22, Z
    562a:	71 81       	ldd	r23, Z+1	; 0x01
    562c:	82 81       	ldd	r24, Z+2	; 0x02
    562e:	93 81       	ldd	r25, Z+3	; 0x03
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	3f ef       	ldi	r19, 0xFF	; 255
    5634:	4f e7       	ldi	r20, 0x7F	; 127
    5636:	57 e4       	ldi	r21, 0x47	; 71
    5638:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    563c:	18 16       	cp	r1, r24
    563e:	0c f0       	brlt	.+2      	; 0x5642 <left_cycle+0x4c0>
    5640:	10 e0       	ldi	r17, 0x00	; 0
    5642:	11 23       	and	r17, r17
    5644:	09 f4       	brne	.+2      	; 0x5648 <left_cycle+0x4c6>
    5646:	49 c0       	rjmp	.+146    	; 0x56da <left_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5648:	69 ad       	sts	0x69, r22
    564a:	7a ad       	sts	0x6a, r23
    564c:	8b ad       	sts	0x6b, r24
    564e:	9c ad       	sts	0x6c, r25
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	40 e2       	ldi	r20, 0x20	; 32
    5656:	51 e4       	ldi	r21, 0x41	; 65
    5658:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	8e 01       	movw	r16, r28
    5662:	0f 5b       	subi	r16, 0xBF	; 191
    5664:	1f 4f       	sbci	r17, 0xFF	; 255
    5666:	bc 01       	movw	r22, r24
    5668:	cd 01       	movw	r24, r26
    566a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    566e:	dc 01       	movw	r26, r24
    5670:	cb 01       	movw	r24, r22
    5672:	f8 01       	movw	r30, r16
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	80 83       	st	Z, r24
    5678:	27 c0       	rjmp	.+78     	; 0x56c8 <left_cycle+0x546>
    567a:	ce 01       	movw	r24, r28
    567c:	8d 5b       	subi	r24, 0xBD	; 189
    567e:	9f 4f       	sbci	r25, 0xFF	; 255
    5680:	20 e7       	ldi	r18, 0x70	; 112
    5682:	31 e0       	ldi	r19, 0x01	; 1
    5684:	fc 01       	movw	r30, r24
    5686:	31 83       	std	Z+1, r19	; 0x01
    5688:	20 83       	st	Z, r18
    568a:	ce 01       	movw	r24, r28
    568c:	8d 5b       	subi	r24, 0xBD	; 189
    568e:	9f 4f       	sbci	r25, 0xFF	; 255
    5690:	fc 01       	movw	r30, r24
    5692:	80 81       	ld	r24, Z
    5694:	91 81       	ldd	r25, Z+1	; 0x01
    5696:	8c 01       	movw	r16, r24
    5698:	c8 01       	movw	r24, r16
    569a:	01 97       	sbiw	r24, 0x01	; 1
    569c:	f1 f7       	brne	.-4      	; 0x569a <left_cycle+0x518>
    569e:	8c 01       	movw	r16, r24
    56a0:	ce 01       	movw	r24, r28
    56a2:	8d 5b       	subi	r24, 0xBD	; 189
    56a4:	9f 4f       	sbci	r25, 0xFF	; 255
    56a6:	fc 01       	movw	r30, r24
    56a8:	11 83       	std	Z+1, r17	; 0x01
    56aa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ac:	ce 01       	movw	r24, r28
    56ae:	8f 5b       	subi	r24, 0xBF	; 191
    56b0:	9f 4f       	sbci	r25, 0xFF	; 255
    56b2:	9e 01       	movw	r18, r28
    56b4:	2f 5b       	subi	r18, 0xBF	; 191
    56b6:	3f 4f       	sbci	r19, 0xFF	; 255
    56b8:	f9 01       	movw	r30, r18
    56ba:	20 81       	ld	r18, Z
    56bc:	31 81       	ldd	r19, Z+1	; 0x01
    56be:	21 50       	subi	r18, 0x01	; 1
    56c0:	30 40       	sbci	r19, 0x00	; 0
    56c2:	fc 01       	movw	r30, r24
    56c4:	31 83       	std	Z+1, r19	; 0x01
    56c6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c8:	ce 01       	movw	r24, r28
    56ca:	8f 5b       	subi	r24, 0xBF	; 191
    56cc:	9f 4f       	sbci	r25, 0xFF	; 255
    56ce:	fc 01       	movw	r30, r24
    56d0:	80 81       	ld	r24, Z
    56d2:	91 81       	ldd	r25, Z+1	; 0x01
    56d4:	00 97       	sbiw	r24, 0x00	; 0
    56d6:	89 f6       	brne	.-94     	; 0x567a <left_cycle+0x4f8>
    56d8:	2e c0       	rjmp	.+92     	; 0x5736 <left_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56da:	8e 01       	movw	r16, r28
    56dc:	0f 5b       	subi	r16, 0xBF	; 191
    56de:	1f 4f       	sbci	r17, 0xFF	; 255
    56e0:	ce 01       	movw	r24, r28
    56e2:	cd 96       	adiw	r24, 0x3d	; 61
    56e4:	fc 01       	movw	r30, r24
    56e6:	60 81       	ld	r22, Z
    56e8:	71 81       	ldd	r23, Z+1	; 0x01
    56ea:	82 81       	ldd	r24, Z+2	; 0x02
    56ec:	93 81       	ldd	r25, Z+3	; 0x03
    56ee:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    56f2:	dc 01       	movw	r26, r24
    56f4:	cb 01       	movw	r24, r22
    56f6:	f8 01       	movw	r30, r16
    56f8:	91 83       	std	Z+1, r25	; 0x01
    56fa:	80 83       	st	Z, r24
    56fc:	ce 01       	movw	r24, r28
    56fe:	8b 5b       	subi	r24, 0xBB	; 187
    5700:	9f 4f       	sbci	r25, 0xFF	; 255
    5702:	9e 01       	movw	r18, r28
    5704:	2f 5b       	subi	r18, 0xBF	; 191
    5706:	3f 4f       	sbci	r19, 0xFF	; 255
    5708:	f9 01       	movw	r30, r18
    570a:	20 81       	ld	r18, Z
    570c:	31 81       	ldd	r19, Z+1	; 0x01
    570e:	fc 01       	movw	r30, r24
    5710:	31 83       	std	Z+1, r19	; 0x01
    5712:	20 83       	st	Z, r18
    5714:	ce 01       	movw	r24, r28
    5716:	8b 5b       	subi	r24, 0xBB	; 187
    5718:	9f 4f       	sbci	r25, 0xFF	; 255
    571a:	fc 01       	movw	r30, r24
    571c:	80 81       	ld	r24, Z
    571e:	91 81       	ldd	r25, Z+1	; 0x01
    5720:	8c 01       	movw	r16, r24
    5722:	c8 01       	movw	r24, r16
    5724:	01 97       	sbiw	r24, 0x01	; 1
    5726:	f1 f7       	brne	.-4      	; 0x5724 <left_cycle+0x5a2>
    5728:	8c 01       	movw	r16, r24
    572a:	ce 01       	movw	r24, r28
    572c:	8b 5b       	subi	r24, 0xBB	; 187
    572e:	9f 4f       	sbci	r25, 0xFF	; 255
    5730:	fc 01       	movw	r30, r24
    5732:	11 83       	std	Z+1, r17	; 0x01
    5734:	00 83       	st	Z, r16
	_delay_ms(300);

}
    5736:	ca 5b       	subi	r28, 0xBA	; 186
    5738:	df 4f       	sbci	r29, 0xFF	; 255
    573a:	0f b6       	in	r0, 0x3f	; 63
    573c:	f8 94       	cli
    573e:	de bf       	out	0x3e, r29	; 62
    5740:	0f be       	out	0x3f, r0	; 63
    5742:	cd bf       	out	0x3d, r28	; 61
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	08 95       	ret

0000574e <right_cycle>:

void right_cycle()
{
    574e:	0f 93       	push	r16
    5750:	1f 93       	push	r17
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	c6 54       	subi	r28, 0x46	; 70
    575c:	d0 40       	sbci	r29, 0x00	; 0
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	cd bf       	out	0x3d, r28	; 61

	gripper_open();
    5768:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	a6 e9       	ldi	r26, 0x96	; 150
    5772:	b3 e4       	ldi	r27, 0x43	; 67
    5774:	89 83       	std	Y+1, r24	; 0x01
    5776:	9a 83       	std	Y+2, r25	; 0x02
    5778:	ab 83       	std	Y+3, r26	; 0x03
    577a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    577c:	69 81       	ldd	r22, Y+1	; 0x01
    577e:	7a 81       	ldd	r23, Y+2	; 0x02
    5780:	8b 81       	ldd	r24, Y+3	; 0x03
    5782:	9c 81       	ldd	r25, Y+4	; 0x04
    5784:	26 e6       	ldi	r18, 0x66	; 102
    5786:	36 e6       	ldi	r19, 0x66	; 102
    5788:	46 e6       	ldi	r20, 0x66	; 102
    578a:	55 e4       	ldi	r21, 0x45	; 69
    578c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	8d 83       	std	Y+5, r24	; 0x05
    5796:	9e 83       	std	Y+6, r25	; 0x06
    5798:	af 83       	std	Y+7, r26	; 0x07
    579a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    579c:	11 e0       	ldi	r17, 0x01	; 1
    579e:	6d 81       	ldd	r22, Y+5	; 0x05
    57a0:	7e 81       	ldd	r23, Y+6	; 0x06
    57a2:	8f 81       	ldd	r24, Y+7	; 0x07
    57a4:	98 85       	ldd	r25, Y+8	; 0x08
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e8       	ldi	r20, 0x80	; 128
    57ac:	5f e3       	ldi	r21, 0x3F	; 63
    57ae:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    57b2:	88 23       	and	r24, r24
    57b4:	0c f0       	brlt	.+2      	; 0x57b8 <right_cycle+0x6a>
    57b6:	10 e0       	ldi	r17, 0x00	; 0
    57b8:	11 23       	and	r17, r17
    57ba:	29 f0       	breq	.+10     	; 0x57c6 <right_cycle+0x78>
		__ticks = 1;
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	9a 87       	std	Y+10, r25	; 0x0a
    57c2:	89 87       	std	Y+9, r24	; 0x09
    57c4:	46 c0       	rjmp	.+140    	; 0x5852 <right_cycle+0x104>
	else if (__tmp > 65535)
    57c6:	11 e0       	ldi	r17, 0x01	; 1
    57c8:	6d 81       	ldd	r22, Y+5	; 0x05
    57ca:	7e 81       	ldd	r23, Y+6	; 0x06
    57cc:	8f 81       	ldd	r24, Y+7	; 0x07
    57ce:	98 85       	ldd	r25, Y+8	; 0x08
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	3f ef       	ldi	r19, 0xFF	; 255
    57d4:	4f e7       	ldi	r20, 0x7F	; 127
    57d6:	57 e4       	ldi	r21, 0x47	; 71
    57d8:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    57dc:	18 16       	cp	r1, r24
    57de:	0c f0       	brlt	.+2      	; 0x57e2 <right_cycle+0x94>
    57e0:	10 e0       	ldi	r17, 0x00	; 0
    57e2:	11 23       	and	r17, r17
    57e4:	61 f1       	breq	.+88     	; 0x583e <right_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e6:	69 81       	ldd	r22, Y+1	; 0x01
    57e8:	7a 81       	ldd	r23, Y+2	; 0x02
    57ea:	8b 81       	ldd	r24, Y+3	; 0x03
    57ec:	9c 81       	ldd	r25, Y+4	; 0x04
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	40 e2       	ldi	r20, 0x20	; 32
    57f4:	51 e4       	ldi	r21, 0x41	; 65
    57f6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	bc 01       	movw	r22, r24
    5800:	cd 01       	movw	r24, r26
    5802:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	9a 87       	std	Y+10, r25	; 0x0a
    580c:	89 87       	std	Y+9, r24	; 0x09
    580e:	12 c0       	rjmp	.+36     	; 0x5834 <right_cycle+0xe6>
    5810:	80 e7       	ldi	r24, 0x70	; 112
    5812:	91 e0       	ldi	r25, 0x01	; 1
    5814:	9c 87       	std	Y+12, r25	; 0x0c
    5816:	8b 87       	std	Y+11, r24	; 0x0b
    5818:	8b 85       	ldd	r24, Y+11	; 0x0b
    581a:	9c 85       	ldd	r25, Y+12	; 0x0c
    581c:	8c 01       	movw	r16, r24
    581e:	c8 01       	movw	r24, r16
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <right_cycle+0xd2>
    5824:	8c 01       	movw	r16, r24
    5826:	1c 87       	std	Y+12, r17	; 0x0c
    5828:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582a:	89 85       	ldd	r24, Y+9	; 0x09
    582c:	9a 85       	ldd	r25, Y+10	; 0x0a
    582e:	01 97       	sbiw	r24, 0x01	; 1
    5830:	9a 87       	std	Y+10, r25	; 0x0a
    5832:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5834:	89 85       	ldd	r24, Y+9	; 0x09
    5836:	9a 85       	ldd	r25, Y+10	; 0x0a
    5838:	00 97       	sbiw	r24, 0x00	; 0
    583a:	51 f7       	brne	.-44     	; 0x5810 <right_cycle+0xc2>
    583c:	17 c0       	rjmp	.+46     	; 0x586c <right_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583e:	6d 81       	ldd	r22, Y+5	; 0x05
    5840:	7e 81       	ldd	r23, Y+6	; 0x06
    5842:	8f 81       	ldd	r24, Y+7	; 0x07
    5844:	98 85       	ldd	r25, Y+8	; 0x08
    5846:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    584a:	dc 01       	movw	r26, r24
    584c:	cb 01       	movw	r24, r22
    584e:	9a 87       	std	Y+10, r25	; 0x0a
    5850:	89 87       	std	Y+9, r24	; 0x09
    5852:	89 85       	ldd	r24, Y+9	; 0x09
    5854:	9a 85       	ldd	r25, Y+10	; 0x0a
    5856:	9e 87       	std	Y+14, r25	; 0x0e
    5858:	8d 87       	std	Y+13, r24	; 0x0d
    585a:	8d 85       	ldd	r24, Y+13	; 0x0d
    585c:	9e 85       	ldd	r25, Y+14	; 0x0e
    585e:	8c 01       	movw	r16, r24
    5860:	f8 01       	movw	r30, r16
    5862:	31 97       	sbiw	r30, 0x01	; 1
    5864:	f1 f7       	brne	.-4      	; 0x5862 <right_cycle+0x114>
    5866:	8f 01       	movw	r16, r30
    5868:	1e 87       	std	Y+14, r17	; 0x0e
    586a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_right();
    586c:	0e 94 55 21 	call	0x42aa	; 0x42aa <arm_rotate_right>
    5870:	80 e0       	ldi	r24, 0x00	; 0
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	a6 e9       	ldi	r26, 0x96	; 150
    5876:	b3 e4       	ldi	r27, 0x43	; 67
    5878:	8f 87       	std	Y+15, r24	; 0x0f
    587a:	98 8b       	std	Y+16, r25	; 0x10
    587c:	a9 8b       	std	Y+17, r26	; 0x11
    587e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5880:	6f 85       	ldd	r22, Y+15	; 0x0f
    5882:	78 89       	ldd	r23, Y+16	; 0x10
    5884:	89 89       	ldd	r24, Y+17	; 0x11
    5886:	9a 89       	ldd	r25, Y+18	; 0x12
    5888:	26 e6       	ldi	r18, 0x66	; 102
    588a:	36 e6       	ldi	r19, 0x66	; 102
    588c:	46 e6       	ldi	r20, 0x66	; 102
    588e:	55 e4       	ldi	r21, 0x45	; 69
    5890:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5894:	dc 01       	movw	r26, r24
    5896:	cb 01       	movw	r24, r22
    5898:	8b 8b       	std	Y+19, r24	; 0x13
    589a:	9c 8b       	std	Y+20, r25	; 0x14
    589c:	ad 8b       	std	Y+21, r26	; 0x15
    589e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    58a0:	11 e0       	ldi	r17, 0x01	; 1
    58a2:	6b 89       	ldd	r22, Y+19	; 0x13
    58a4:	7c 89       	ldd	r23, Y+20	; 0x14
    58a6:	8d 89       	ldd	r24, Y+21	; 0x15
    58a8:	9e 89       	ldd	r25, Y+22	; 0x16
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	40 e8       	ldi	r20, 0x80	; 128
    58b0:	5f e3       	ldi	r21, 0x3F	; 63
    58b2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    58b6:	88 23       	and	r24, r24
    58b8:	0c f0       	brlt	.+2      	; 0x58bc <right_cycle+0x16e>
    58ba:	10 e0       	ldi	r17, 0x00	; 0
    58bc:	11 23       	and	r17, r17
    58be:	29 f0       	breq	.+10     	; 0x58ca <right_cycle+0x17c>
		__ticks = 1;
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	98 8f       	std	Y+24, r25	; 0x18
    58c6:	8f 8b       	std	Y+23, r24	; 0x17
    58c8:	46 c0       	rjmp	.+140    	; 0x5956 <right_cycle+0x208>
	else if (__tmp > 65535)
    58ca:	11 e0       	ldi	r17, 0x01	; 1
    58cc:	6b 89       	ldd	r22, Y+19	; 0x13
    58ce:	7c 89       	ldd	r23, Y+20	; 0x14
    58d0:	8d 89       	ldd	r24, Y+21	; 0x15
    58d2:	9e 89       	ldd	r25, Y+22	; 0x16
    58d4:	20 e0       	ldi	r18, 0x00	; 0
    58d6:	3f ef       	ldi	r19, 0xFF	; 255
    58d8:	4f e7       	ldi	r20, 0x7F	; 127
    58da:	57 e4       	ldi	r21, 0x47	; 71
    58dc:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    58e0:	18 16       	cp	r1, r24
    58e2:	0c f0       	brlt	.+2      	; 0x58e6 <right_cycle+0x198>
    58e4:	10 e0       	ldi	r17, 0x00	; 0
    58e6:	11 23       	and	r17, r17
    58e8:	61 f1       	breq	.+88     	; 0x5942 <right_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    58ec:	78 89       	ldd	r23, Y+16	; 0x10
    58ee:	89 89       	ldd	r24, Y+17	; 0x11
    58f0:	9a 89       	ldd	r25, Y+18	; 0x12
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	40 e2       	ldi	r20, 0x20	; 32
    58f8:	51 e4       	ldi	r21, 0x41	; 65
    58fa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    58fe:	dc 01       	movw	r26, r24
    5900:	cb 01       	movw	r24, r22
    5902:	bc 01       	movw	r22, r24
    5904:	cd 01       	movw	r24, r26
    5906:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	98 8f       	std	Y+24, r25	; 0x18
    5910:	8f 8b       	std	Y+23, r24	; 0x17
    5912:	12 c0       	rjmp	.+36     	; 0x5938 <right_cycle+0x1ea>
    5914:	80 e7       	ldi	r24, 0x70	; 112
    5916:	91 e0       	ldi	r25, 0x01	; 1
    5918:	9a 8f       	std	Y+26, r25	; 0x1a
    591a:	89 8f       	std	Y+25, r24	; 0x19
    591c:	89 8d       	ldd	r24, Y+25	; 0x19
    591e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5920:	8c 01       	movw	r16, r24
    5922:	c8 01       	movw	r24, r16
    5924:	01 97       	sbiw	r24, 0x01	; 1
    5926:	f1 f7       	brne	.-4      	; 0x5924 <right_cycle+0x1d6>
    5928:	8c 01       	movw	r16, r24
    592a:	1a 8f       	std	Y+26, r17	; 0x1a
    592c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    592e:	8f 89       	ldd	r24, Y+23	; 0x17
    5930:	98 8d       	ldd	r25, Y+24	; 0x18
    5932:	01 97       	sbiw	r24, 0x01	; 1
    5934:	98 8f       	std	Y+24, r25	; 0x18
    5936:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5938:	8f 89       	ldd	r24, Y+23	; 0x17
    593a:	98 8d       	ldd	r25, Y+24	; 0x18
    593c:	00 97       	sbiw	r24, 0x00	; 0
    593e:	51 f7       	brne	.-44     	; 0x5914 <right_cycle+0x1c6>
    5940:	17 c0       	rjmp	.+46     	; 0x5970 <right_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5942:	6b 89       	ldd	r22, Y+19	; 0x13
    5944:	7c 89       	ldd	r23, Y+20	; 0x14
    5946:	8d 89       	ldd	r24, Y+21	; 0x15
    5948:	9e 89       	ldd	r25, Y+22	; 0x16
    594a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    594e:	dc 01       	movw	r26, r24
    5950:	cb 01       	movw	r24, r22
    5952:	98 8f       	std	Y+24, r25	; 0x18
    5954:	8f 8b       	std	Y+23, r24	; 0x17
    5956:	8f 89       	ldd	r24, Y+23	; 0x17
    5958:	98 8d       	ldd	r25, Y+24	; 0x18
    595a:	9c 8f       	std	Y+28, r25	; 0x1c
    595c:	8b 8f       	std	Y+27, r24	; 0x1b
    595e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5962:	8c 01       	movw	r16, r24
    5964:	f8 01       	movw	r30, r16
    5966:	31 97       	sbiw	r30, 0x01	; 1
    5968:	f1 f7       	brne	.-4      	; 0x5966 <right_cycle+0x218>
    596a:	8f 01       	movw	r16, r30
    596c:	1c 8f       	std	Y+28, r17	; 0x1c
    596e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    5970:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_forward>
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	a6 e9       	ldi	r26, 0x96	; 150
    597a:	b3 e4       	ldi	r27, 0x43	; 67
    597c:	8d 8f       	std	Y+29, r24	; 0x1d
    597e:	9e 8f       	std	Y+30, r25	; 0x1e
    5980:	af 8f       	std	Y+31, r26	; 0x1f
    5982:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5984:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5986:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5988:	8f 8d       	ldd	r24, Y+31	; 0x1f
    598a:	98 a1       	lds	r25, 0x48
    598c:	26 e6       	ldi	r18, 0x66	; 102
    598e:	36 e6       	ldi	r19, 0x66	; 102
    5990:	46 e6       	ldi	r20, 0x66	; 102
    5992:	55 e4       	ldi	r21, 0x45	; 69
    5994:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	89 a3       	lds	r24, 0x59
    599e:	9a a3       	lds	r25, 0x5a
    59a0:	ab a3       	lds	r26, 0x5b
    59a2:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    59a4:	11 e0       	ldi	r17, 0x01	; 1
    59a6:	69 a1       	lds	r22, 0x49
    59a8:	7a a1       	lds	r23, 0x4a
    59aa:	8b a1       	lds	r24, 0x4b
    59ac:	9c a1       	lds	r25, 0x4c
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	40 e8       	ldi	r20, 0x80	; 128
    59b4:	5f e3       	ldi	r21, 0x3F	; 63
    59b6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    59ba:	88 23       	and	r24, r24
    59bc:	0c f0       	brlt	.+2      	; 0x59c0 <right_cycle+0x272>
    59be:	10 e0       	ldi	r17, 0x00	; 0
    59c0:	11 23       	and	r17, r17
    59c2:	29 f0       	breq	.+10     	; 0x59ce <right_cycle+0x280>
		__ticks = 1;
    59c4:	81 e0       	ldi	r24, 0x01	; 1
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	9e a3       	lds	r25, 0x5e
    59ca:	8d a3       	lds	r24, 0x5d
    59cc:	46 c0       	rjmp	.+140    	; 0x5a5a <right_cycle+0x30c>
	else if (__tmp > 65535)
    59ce:	11 e0       	ldi	r17, 0x01	; 1
    59d0:	69 a1       	lds	r22, 0x49
    59d2:	7a a1       	lds	r23, 0x4a
    59d4:	8b a1       	lds	r24, 0x4b
    59d6:	9c a1       	lds	r25, 0x4c
    59d8:	20 e0       	ldi	r18, 0x00	; 0
    59da:	3f ef       	ldi	r19, 0xFF	; 255
    59dc:	4f e7       	ldi	r20, 0x7F	; 127
    59de:	57 e4       	ldi	r21, 0x47	; 71
    59e0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    59e4:	18 16       	cp	r1, r24
    59e6:	0c f0       	brlt	.+2      	; 0x59ea <right_cycle+0x29c>
    59e8:	10 e0       	ldi	r17, 0x00	; 0
    59ea:	11 23       	and	r17, r17
    59ec:	61 f1       	breq	.+88     	; 0x5a46 <right_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    59f0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    59f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59f4:	98 a1       	lds	r25, 0x48
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e2       	ldi	r20, 0x20	; 32
    59fc:	51 e4       	ldi	r21, 0x41	; 65
    59fe:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5a02:	dc 01       	movw	r26, r24
    5a04:	cb 01       	movw	r24, r22
    5a06:	bc 01       	movw	r22, r24
    5a08:	cd 01       	movw	r24, r26
    5a0a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5a0e:	dc 01       	movw	r26, r24
    5a10:	cb 01       	movw	r24, r22
    5a12:	9e a3       	lds	r25, 0x5e
    5a14:	8d a3       	lds	r24, 0x5d
    5a16:	12 c0       	rjmp	.+36     	; 0x5a3c <right_cycle+0x2ee>
    5a18:	80 e7       	ldi	r24, 0x70	; 112
    5a1a:	91 e0       	ldi	r25, 0x01	; 1
    5a1c:	98 a7       	lds	r25, 0x78
    5a1e:	8f a3       	lds	r24, 0x5f
    5a20:	8f a1       	lds	r24, 0x4f
    5a22:	98 a5       	lds	r25, 0x68
    5a24:	8c 01       	movw	r16, r24
    5a26:	c8 01       	movw	r24, r16
    5a28:	01 97       	sbiw	r24, 0x01	; 1
    5a2a:	f1 f7       	brne	.-4      	; 0x5a28 <right_cycle+0x2da>
    5a2c:	8c 01       	movw	r16, r24
    5a2e:	18 a7       	lds	r17, 0x78
    5a30:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a32:	8d a1       	lds	r24, 0x4d
    5a34:	9e a1       	lds	r25, 0x4e
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	9e a3       	lds	r25, 0x5e
    5a3a:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a3c:	8d a1       	lds	r24, 0x4d
    5a3e:	9e a1       	lds	r25, 0x4e
    5a40:	00 97       	sbiw	r24, 0x00	; 0
    5a42:	51 f7       	brne	.-44     	; 0x5a18 <right_cycle+0x2ca>
    5a44:	17 c0       	rjmp	.+46     	; 0x5a74 <right_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a46:	69 a1       	lds	r22, 0x49
    5a48:	7a a1       	lds	r23, 0x4a
    5a4a:	8b a1       	lds	r24, 0x4b
    5a4c:	9c a1       	lds	r25, 0x4c
    5a4e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	9e a3       	lds	r25, 0x5e
    5a58:	8d a3       	lds	r24, 0x5d
    5a5a:	8d a1       	lds	r24, 0x4d
    5a5c:	9e a1       	lds	r25, 0x4e
    5a5e:	9a a7       	lds	r25, 0x7a
    5a60:	89 a7       	lds	r24, 0x79
    5a62:	89 a5       	lds	r24, 0x69
    5a64:	9a a5       	lds	r25, 0x6a
    5a66:	8c 01       	movw	r16, r24
    5a68:	f8 01       	movw	r30, r16
    5a6a:	31 97       	sbiw	r30, 0x01	; 1
    5a6c:	f1 f7       	brne	.-4      	; 0x5a6a <right_cycle+0x31c>
    5a6e:	8f 01       	movw	r16, r30
    5a70:	1a a7       	lds	r17, 0x7a
    5a72:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    5a74:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <gripper_close>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	a6 e9       	ldi	r26, 0x96	; 150
    5a7e:	b3 e4       	ldi	r27, 0x43	; 67
    5a80:	8b a7       	lds	r24, 0x7b
    5a82:	9c a7       	lds	r25, 0x7c
    5a84:	ad a7       	lds	r26, 0x7d
    5a86:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5a88:	6b a5       	lds	r22, 0x6b
    5a8a:	7c a5       	lds	r23, 0x6c
    5a8c:	8d a5       	lds	r24, 0x6d
    5a8e:	9e a5       	lds	r25, 0x6e
    5a90:	26 e6       	ldi	r18, 0x66	; 102
    5a92:	36 e6       	ldi	r19, 0x66	; 102
    5a94:	46 e6       	ldi	r20, 0x66	; 102
    5a96:	55 e4       	ldi	r21, 0x45	; 69
    5a98:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	8f a7       	lds	r24, 0x7f
    5aa2:	98 ab       	sts	0x58, r25
    5aa4:	a9 ab       	sts	0x59, r26
    5aa6:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5aa8:	11 e0       	ldi	r17, 0x01	; 1
    5aaa:	6f a5       	lds	r22, 0x6f
    5aac:	78 a9       	sts	0x48, r23
    5aae:	89 a9       	sts	0x49, r24
    5ab0:	9a a9       	sts	0x4a, r25
    5ab2:	20 e0       	ldi	r18, 0x00	; 0
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	40 e8       	ldi	r20, 0x80	; 128
    5ab8:	5f e3       	ldi	r21, 0x3F	; 63
    5aba:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    5abe:	88 23       	and	r24, r24
    5ac0:	0c f0       	brlt	.+2      	; 0x5ac4 <right_cycle+0x376>
    5ac2:	10 e0       	ldi	r17, 0x00	; 0
    5ac4:	11 23       	and	r17, r17
    5ac6:	29 f0       	breq	.+10     	; 0x5ad2 <right_cycle+0x384>
		__ticks = 1;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	9c ab       	sts	0x5c, r25
    5ace:	8b ab       	sts	0x5b, r24
    5ad0:	46 c0       	rjmp	.+140    	; 0x5b5e <right_cycle+0x410>
	else if (__tmp > 65535)
    5ad2:	11 e0       	ldi	r17, 0x01	; 1
    5ad4:	6f a5       	lds	r22, 0x6f
    5ad6:	78 a9       	sts	0x48, r23
    5ad8:	89 a9       	sts	0x49, r24
    5ada:	9a a9       	sts	0x4a, r25
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	3f ef       	ldi	r19, 0xFF	; 255
    5ae0:	4f e7       	ldi	r20, 0x7F	; 127
    5ae2:	57 e4       	ldi	r21, 0x47	; 71
    5ae4:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5ae8:	18 16       	cp	r1, r24
    5aea:	0c f0       	brlt	.+2      	; 0x5aee <right_cycle+0x3a0>
    5aec:	10 e0       	ldi	r17, 0x00	; 0
    5aee:	11 23       	and	r17, r17
    5af0:	61 f1       	breq	.+88     	; 0x5b4a <right_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af2:	6b a5       	lds	r22, 0x6b
    5af4:	7c a5       	lds	r23, 0x6c
    5af6:	8d a5       	lds	r24, 0x6d
    5af8:	9e a5       	lds	r25, 0x6e
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	40 e2       	ldi	r20, 0x20	; 32
    5b00:	51 e4       	ldi	r21, 0x41	; 65
    5b02:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5b06:	dc 01       	movw	r26, r24
    5b08:	cb 01       	movw	r24, r22
    5b0a:	bc 01       	movw	r22, r24
    5b0c:	cd 01       	movw	r24, r26
    5b0e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5b12:	dc 01       	movw	r26, r24
    5b14:	cb 01       	movw	r24, r22
    5b16:	9c ab       	sts	0x5c, r25
    5b18:	8b ab       	sts	0x5b, r24
    5b1a:	12 c0       	rjmp	.+36     	; 0x5b40 <right_cycle+0x3f2>
    5b1c:	80 e7       	ldi	r24, 0x70	; 112
    5b1e:	91 e0       	ldi	r25, 0x01	; 1
    5b20:	9e ab       	sts	0x5e, r25
    5b22:	8d ab       	sts	0x5d, r24
    5b24:	8d a9       	sts	0x4d, r24
    5b26:	9e a9       	sts	0x4e, r25
    5b28:	8c 01       	movw	r16, r24
    5b2a:	c8 01       	movw	r24, r16
    5b2c:	01 97       	sbiw	r24, 0x01	; 1
    5b2e:	f1 f7       	brne	.-4      	; 0x5b2c <right_cycle+0x3de>
    5b30:	8c 01       	movw	r16, r24
    5b32:	1e ab       	sts	0x5e, r17
    5b34:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b36:	8b a9       	sts	0x4b, r24
    5b38:	9c a9       	sts	0x4c, r25
    5b3a:	01 97       	sbiw	r24, 0x01	; 1
    5b3c:	9c ab       	sts	0x5c, r25
    5b3e:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b40:	8b a9       	sts	0x4b, r24
    5b42:	9c a9       	sts	0x4c, r25
    5b44:	00 97       	sbiw	r24, 0x00	; 0
    5b46:	51 f7       	brne	.-44     	; 0x5b1c <right_cycle+0x3ce>
    5b48:	17 c0       	rjmp	.+46     	; 0x5b78 <right_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b4a:	6f a5       	lds	r22, 0x6f
    5b4c:	78 a9       	sts	0x48, r23
    5b4e:	89 a9       	sts	0x49, r24
    5b50:	9a a9       	sts	0x4a, r25
    5b52:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	9c ab       	sts	0x5c, r25
    5b5c:	8b ab       	sts	0x5b, r24
    5b5e:	8b a9       	sts	0x4b, r24
    5b60:	9c a9       	sts	0x4c, r25
    5b62:	98 af       	sts	0x78, r25
    5b64:	8f ab       	sts	0x5f, r24
    5b66:	8f a9       	sts	0x4f, r24
    5b68:	98 ad       	sts	0x68, r25
    5b6a:	8c 01       	movw	r16, r24
    5b6c:	f8 01       	movw	r30, r16
    5b6e:	31 97       	sbiw	r30, 0x01	; 1
    5b70:	f1 f7       	brne	.-4      	; 0x5b6e <right_cycle+0x420>
    5b72:	8f 01       	movw	r16, r30
    5b74:	18 af       	sts	0x78, r17
    5b76:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    5b78:	0e 94 ce 24 	call	0x499c	; 0x499c <arm_backward>
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	a6 e9       	ldi	r26, 0x96	; 150
    5b82:	b3 e4       	ldi	r27, 0x43	; 67
    5b84:	89 af       	sts	0x79, r24
    5b86:	9a af       	sts	0x7a, r25
    5b88:	ab af       	sts	0x7b, r26
    5b8a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5b8c:	69 ad       	sts	0x69, r22
    5b8e:	7a ad       	sts	0x6a, r23
    5b90:	8b ad       	sts	0x6b, r24
    5b92:	9c ad       	sts	0x6c, r25
    5b94:	26 e6       	ldi	r18, 0x66	; 102
    5b96:	36 e6       	ldi	r19, 0x66	; 102
    5b98:	46 e6       	ldi	r20, 0x66	; 102
    5b9a:	55 e4       	ldi	r21, 0x45	; 69
    5b9c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	cb 01       	movw	r24, r22
    5ba4:	9e 01       	movw	r18, r28
    5ba6:	23 5c       	subi	r18, 0xC3	; 195
    5ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    5baa:	f9 01       	movw	r30, r18
    5bac:	80 83       	st	Z, r24
    5bae:	91 83       	std	Z+1, r25	; 0x01
    5bb0:	a2 83       	std	Z+2, r26	; 0x02
    5bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bb4:	11 e0       	ldi	r17, 0x01	; 1
    5bb6:	ce 01       	movw	r24, r28
    5bb8:	cd 96       	adiw	r24, 0x3d	; 61
    5bba:	fc 01       	movw	r30, r24
    5bbc:	60 81       	ld	r22, Z
    5bbe:	71 81       	ldd	r23, Z+1	; 0x01
    5bc0:	82 81       	ldd	r24, Z+2	; 0x02
    5bc2:	93 81       	ldd	r25, Z+3	; 0x03
    5bc4:	20 e0       	ldi	r18, 0x00	; 0
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	40 e8       	ldi	r20, 0x80	; 128
    5bca:	5f e3       	ldi	r21, 0x3F	; 63
    5bcc:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    5bd0:	88 23       	and	r24, r24
    5bd2:	0c f0       	brlt	.+2      	; 0x5bd6 <right_cycle+0x488>
    5bd4:	10 e0       	ldi	r17, 0x00	; 0
    5bd6:	11 23       	and	r17, r17
    5bd8:	49 f0       	breq	.+18     	; 0x5bec <right_cycle+0x49e>
		__ticks = 1;
    5bda:	ce 01       	movw	r24, r28
    5bdc:	8f 5b       	subi	r24, 0xBF	; 191
    5bde:	9f 4f       	sbci	r25, 0xFF	; 255
    5be0:	21 e0       	ldi	r18, 0x01	; 1
    5be2:	30 e0       	ldi	r19, 0x00	; 0
    5be4:	fc 01       	movw	r30, r24
    5be6:	31 83       	std	Z+1, r19	; 0x01
    5be8:	20 83       	st	Z, r18
    5bea:	6e c0       	rjmp	.+220    	; 0x5cc8 <right_cycle+0x57a>
	else if (__tmp > 65535)
    5bec:	11 e0       	ldi	r17, 0x01	; 1
    5bee:	ce 01       	movw	r24, r28
    5bf0:	cd 96       	adiw	r24, 0x3d	; 61
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	60 81       	ld	r22, Z
    5bf6:	71 81       	ldd	r23, Z+1	; 0x01
    5bf8:	82 81       	ldd	r24, Z+2	; 0x02
    5bfa:	93 81       	ldd	r25, Z+3	; 0x03
    5bfc:	20 e0       	ldi	r18, 0x00	; 0
    5bfe:	3f ef       	ldi	r19, 0xFF	; 255
    5c00:	4f e7       	ldi	r20, 0x7F	; 127
    5c02:	57 e4       	ldi	r21, 0x47	; 71
    5c04:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5c08:	18 16       	cp	r1, r24
    5c0a:	0c f0       	brlt	.+2      	; 0x5c0e <right_cycle+0x4c0>
    5c0c:	10 e0       	ldi	r17, 0x00	; 0
    5c0e:	11 23       	and	r17, r17
    5c10:	09 f4       	brne	.+2      	; 0x5c14 <right_cycle+0x4c6>
    5c12:	49 c0       	rjmp	.+146    	; 0x5ca6 <right_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c14:	69 ad       	sts	0x69, r22
    5c16:	7a ad       	sts	0x6a, r23
    5c18:	8b ad       	sts	0x6b, r24
    5c1a:	9c ad       	sts	0x6c, r25
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	40 e2       	ldi	r20, 0x20	; 32
    5c22:	51 e4       	ldi	r21, 0x41	; 65
    5c24:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5c28:	dc 01       	movw	r26, r24
    5c2a:	cb 01       	movw	r24, r22
    5c2c:	8e 01       	movw	r16, r28
    5c2e:	0f 5b       	subi	r16, 0xBF	; 191
    5c30:	1f 4f       	sbci	r17, 0xFF	; 255
    5c32:	bc 01       	movw	r22, r24
    5c34:	cd 01       	movw	r24, r26
    5c36:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	f8 01       	movw	r30, r16
    5c40:	91 83       	std	Z+1, r25	; 0x01
    5c42:	80 83       	st	Z, r24
    5c44:	27 c0       	rjmp	.+78     	; 0x5c94 <right_cycle+0x546>
    5c46:	ce 01       	movw	r24, r28
    5c48:	8d 5b       	subi	r24, 0xBD	; 189
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	20 e7       	ldi	r18, 0x70	; 112
    5c4e:	31 e0       	ldi	r19, 0x01	; 1
    5c50:	fc 01       	movw	r30, r24
    5c52:	31 83       	std	Z+1, r19	; 0x01
    5c54:	20 83       	st	Z, r18
    5c56:	ce 01       	movw	r24, r28
    5c58:	8d 5b       	subi	r24, 0xBD	; 189
    5c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	80 81       	ld	r24, Z
    5c60:	91 81       	ldd	r25, Z+1	; 0x01
    5c62:	8c 01       	movw	r16, r24
    5c64:	c8 01       	movw	r24, r16
    5c66:	01 97       	sbiw	r24, 0x01	; 1
    5c68:	f1 f7       	brne	.-4      	; 0x5c66 <right_cycle+0x518>
    5c6a:	8c 01       	movw	r16, r24
    5c6c:	ce 01       	movw	r24, r28
    5c6e:	8d 5b       	subi	r24, 0xBD	; 189
    5c70:	9f 4f       	sbci	r25, 0xFF	; 255
    5c72:	fc 01       	movw	r30, r24
    5c74:	11 83       	std	Z+1, r17	; 0x01
    5c76:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c78:	ce 01       	movw	r24, r28
    5c7a:	8f 5b       	subi	r24, 0xBF	; 191
    5c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7e:	9e 01       	movw	r18, r28
    5c80:	2f 5b       	subi	r18, 0xBF	; 191
    5c82:	3f 4f       	sbci	r19, 0xFF	; 255
    5c84:	f9 01       	movw	r30, r18
    5c86:	20 81       	ld	r18, Z
    5c88:	31 81       	ldd	r19, Z+1	; 0x01
    5c8a:	21 50       	subi	r18, 0x01	; 1
    5c8c:	30 40       	sbci	r19, 0x00	; 0
    5c8e:	fc 01       	movw	r30, r24
    5c90:	31 83       	std	Z+1, r19	; 0x01
    5c92:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c94:	ce 01       	movw	r24, r28
    5c96:	8f 5b       	subi	r24, 0xBF	; 191
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	80 81       	ld	r24, Z
    5c9e:	91 81       	ldd	r25, Z+1	; 0x01
    5ca0:	00 97       	sbiw	r24, 0x00	; 0
    5ca2:	89 f6       	brne	.-94     	; 0x5c46 <right_cycle+0x4f8>
    5ca4:	2e c0       	rjmp	.+92     	; 0x5d02 <right_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ca6:	8e 01       	movw	r16, r28
    5ca8:	0f 5b       	subi	r16, 0xBF	; 191
    5caa:	1f 4f       	sbci	r17, 0xFF	; 255
    5cac:	ce 01       	movw	r24, r28
    5cae:	cd 96       	adiw	r24, 0x3d	; 61
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	60 81       	ld	r22, Z
    5cb4:	71 81       	ldd	r23, Z+1	; 0x01
    5cb6:	82 81       	ldd	r24, Z+2	; 0x02
    5cb8:	93 81       	ldd	r25, Z+3	; 0x03
    5cba:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	f8 01       	movw	r30, r16
    5cc4:	91 83       	std	Z+1, r25	; 0x01
    5cc6:	80 83       	st	Z, r24
    5cc8:	ce 01       	movw	r24, r28
    5cca:	8b 5b       	subi	r24, 0xBB	; 187
    5ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cce:	9e 01       	movw	r18, r28
    5cd0:	2f 5b       	subi	r18, 0xBF	; 191
    5cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd4:	f9 01       	movw	r30, r18
    5cd6:	20 81       	ld	r18, Z
    5cd8:	31 81       	ldd	r19, Z+1	; 0x01
    5cda:	fc 01       	movw	r30, r24
    5cdc:	31 83       	std	Z+1, r19	; 0x01
    5cde:	20 83       	st	Z, r18
    5ce0:	ce 01       	movw	r24, r28
    5ce2:	8b 5b       	subi	r24, 0xBB	; 187
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	80 81       	ld	r24, Z
    5cea:	91 81       	ldd	r25, Z+1	; 0x01
    5cec:	8c 01       	movw	r16, r24
    5cee:	c8 01       	movw	r24, r16
    5cf0:	01 97       	sbiw	r24, 0x01	; 1
    5cf2:	f1 f7       	brne	.-4      	; 0x5cf0 <right_cycle+0x5a2>
    5cf4:	8c 01       	movw	r16, r24
    5cf6:	ce 01       	movw	r24, r28
    5cf8:	8b 5b       	subi	r24, 0xBB	; 187
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	11 83       	std	Z+1, r17	; 0x01
    5d00:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    5d02:	ca 5b       	subi	r28, 0xBA	; 186
    5d04:	df 4f       	sbci	r29, 0xFF	; 255
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	f8 94       	cli
    5d0a:	de bf       	out	0x3e, r29	; 62
    5d0c:	0f be       	out	0x3f, r0	; 63
    5d0e:	cd bf       	out	0x3d, r28	; 61
    5d10:	df 91       	pop	r29
    5d12:	cf 91       	pop	r28
    5d14:	1f 91       	pop	r17
    5d16:	0f 91       	pop	r16
    5d18:	08 95       	ret

00005d1a <drop>:
void drop()
{
    5d1a:	0f 93       	push	r16
    5d1c:	1f 93       	push	r17
    5d1e:	cf 93       	push	r28
    5d20:	df 93       	push	r29
    5d22:	cd b7       	in	r28, 0x3d	; 61
    5d24:	de b7       	in	r29, 0x3e	; 62
    5d26:	c6 54       	subi	r28, 0x46	; 70
    5d28:	d0 40       	sbci	r29, 0x00	; 0
    5d2a:	0f b6       	in	r0, 0x3f	; 63
    5d2c:	f8 94       	cli
    5d2e:	de bf       	out	0x3e, r29	; 62
    5d30:	0f be       	out	0x3f, r0	; 63
    5d32:	cd bf       	out	0x3d, r28	; 61
	servo_1(150);
    5d34:	86 e9       	ldi	r24, 0x96	; 150
    5d36:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	a6 e9       	ldi	r26, 0x96	; 150
    5d40:	b3 e4       	ldi	r27, 0x43	; 67
    5d42:	89 83       	std	Y+1, r24	; 0x01
    5d44:	9a 83       	std	Y+2, r25	; 0x02
    5d46:	ab 83       	std	Y+3, r26	; 0x03
    5d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d4a:	69 81       	ldd	r22, Y+1	; 0x01
    5d4c:	7a 81       	ldd	r23, Y+2	; 0x02
    5d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d50:	9c 81       	ldd	r25, Y+4	; 0x04
    5d52:	26 e6       	ldi	r18, 0x66	; 102
    5d54:	36 e6       	ldi	r19, 0x66	; 102
    5d56:	46 e6       	ldi	r20, 0x66	; 102
    5d58:	55 e4       	ldi	r21, 0x45	; 69
    5d5a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5d5e:	dc 01       	movw	r26, r24
    5d60:	cb 01       	movw	r24, r22
    5d62:	8d 83       	std	Y+5, r24	; 0x05
    5d64:	9e 83       	std	Y+6, r25	; 0x06
    5d66:	af 83       	std	Y+7, r26	; 0x07
    5d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5d6a:	11 e0       	ldi	r17, 0x01	; 1
    5d6c:	6d 81       	ldd	r22, Y+5	; 0x05
    5d6e:	7e 81       	ldd	r23, Y+6	; 0x06
    5d70:	8f 81       	ldd	r24, Y+7	; 0x07
    5d72:	98 85       	ldd	r25, Y+8	; 0x08
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	40 e8       	ldi	r20, 0x80	; 128
    5d7a:	5f e3       	ldi	r21, 0x3F	; 63
    5d7c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    5d80:	88 23       	and	r24, r24
    5d82:	0c f0       	brlt	.+2      	; 0x5d86 <drop+0x6c>
    5d84:	10 e0       	ldi	r17, 0x00	; 0
    5d86:	11 23       	and	r17, r17
    5d88:	29 f0       	breq	.+10     	; 0x5d94 <drop+0x7a>
		__ticks = 1;
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	90 e0       	ldi	r25, 0x00	; 0
    5d8e:	9a 87       	std	Y+10, r25	; 0x0a
    5d90:	89 87       	std	Y+9, r24	; 0x09
    5d92:	46 c0       	rjmp	.+140    	; 0x5e20 <drop+0x106>
	else if (__tmp > 65535)
    5d94:	11 e0       	ldi	r17, 0x01	; 1
    5d96:	6d 81       	ldd	r22, Y+5	; 0x05
    5d98:	7e 81       	ldd	r23, Y+6	; 0x06
    5d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d9c:	98 85       	ldd	r25, Y+8	; 0x08
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	3f ef       	ldi	r19, 0xFF	; 255
    5da2:	4f e7       	ldi	r20, 0x7F	; 127
    5da4:	57 e4       	ldi	r21, 0x47	; 71
    5da6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5daa:	18 16       	cp	r1, r24
    5dac:	0c f0       	brlt	.+2      	; 0x5db0 <drop+0x96>
    5dae:	10 e0       	ldi	r17, 0x00	; 0
    5db0:	11 23       	and	r17, r17
    5db2:	61 f1       	breq	.+88     	; 0x5e0c <drop+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5db4:	69 81       	ldd	r22, Y+1	; 0x01
    5db6:	7a 81       	ldd	r23, Y+2	; 0x02
    5db8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dba:	9c 81       	ldd	r25, Y+4	; 0x04
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	40 e2       	ldi	r20, 0x20	; 32
    5dc2:	51 e4       	ldi	r21, 0x41	; 65
    5dc4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5dc8:	dc 01       	movw	r26, r24
    5dca:	cb 01       	movw	r24, r22
    5dcc:	bc 01       	movw	r22, r24
    5dce:	cd 01       	movw	r24, r26
    5dd0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5dd4:	dc 01       	movw	r26, r24
    5dd6:	cb 01       	movw	r24, r22
    5dd8:	9a 87       	std	Y+10, r25	; 0x0a
    5dda:	89 87       	std	Y+9, r24	; 0x09
    5ddc:	12 c0       	rjmp	.+36     	; 0x5e02 <drop+0xe8>
    5dde:	80 e7       	ldi	r24, 0x70	; 112
    5de0:	91 e0       	ldi	r25, 0x01	; 1
    5de2:	9c 87       	std	Y+12, r25	; 0x0c
    5de4:	8b 87       	std	Y+11, r24	; 0x0b
    5de6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5de8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dea:	8c 01       	movw	r16, r24
    5dec:	c8 01       	movw	r24, r16
    5dee:	01 97       	sbiw	r24, 0x01	; 1
    5df0:	f1 f7       	brne	.-4      	; 0x5dee <drop+0xd4>
    5df2:	8c 01       	movw	r16, r24
    5df4:	1c 87       	std	Y+12, r17	; 0x0c
    5df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df8:	89 85       	ldd	r24, Y+9	; 0x09
    5dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dfc:	01 97       	sbiw	r24, 0x01	; 1
    5dfe:	9a 87       	std	Y+10, r25	; 0x0a
    5e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e02:	89 85       	ldd	r24, Y+9	; 0x09
    5e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e06:	00 97       	sbiw	r24, 0x00	; 0
    5e08:	51 f7       	brne	.-44     	; 0x5dde <drop+0xc4>
    5e0a:	17 c0       	rjmp	.+46     	; 0x5e3a <drop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e0c:	6d 81       	ldd	r22, Y+5	; 0x05
    5e0e:	7e 81       	ldd	r23, Y+6	; 0x06
    5e10:	8f 81       	ldd	r24, Y+7	; 0x07
    5e12:	98 85       	ldd	r25, Y+8	; 0x08
    5e14:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22
    5e1c:	9a 87       	std	Y+10, r25	; 0x0a
    5e1e:	89 87       	std	Y+9, r24	; 0x09
    5e20:	89 85       	ldd	r24, Y+9	; 0x09
    5e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e24:	9e 87       	std	Y+14, r25	; 0x0e
    5e26:	8d 87       	std	Y+13, r24	; 0x0d
    5e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e2c:	8c 01       	movw	r16, r24
    5e2e:	f8 01       	movw	r30, r16
    5e30:	31 97       	sbiw	r30, 0x01	; 1
    5e32:	f1 f7       	brne	.-4      	; 0x5e30 <drop+0x116>
    5e34:	8f 01       	movw	r16, r30
    5e36:	1e 87       	std	Y+14, r17	; 0x0e
    5e38:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	
	for(ii=0;ii<75;ii++)
    5e3a:	10 92 5b 03 	sts	0x035B, r1
    5e3e:	89 c0       	rjmp	.+274    	; 0x5f52 <drop+0x238>
	{
		servo_2(ii);
    5e40:	80 91 5b 03 	lds	r24, 0x035B
    5e44:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    5e48:	80 e0       	ldi	r24, 0x00	; 0
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	a0 e2       	ldi	r26, 0x20	; 32
    5e4e:	b1 e4       	ldi	r27, 0x41	; 65
    5e50:	8f 87       	std	Y+15, r24	; 0x0f
    5e52:	98 8b       	std	Y+16, r25	; 0x10
    5e54:	a9 8b       	std	Y+17, r26	; 0x11
    5e56:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5e58:	6f 85       	ldd	r22, Y+15	; 0x0f
    5e5a:	78 89       	ldd	r23, Y+16	; 0x10
    5e5c:	89 89       	ldd	r24, Y+17	; 0x11
    5e5e:	9a 89       	ldd	r25, Y+18	; 0x12
    5e60:	26 e6       	ldi	r18, 0x66	; 102
    5e62:	36 e6       	ldi	r19, 0x66	; 102
    5e64:	46 e6       	ldi	r20, 0x66	; 102
    5e66:	55 e4       	ldi	r21, 0x45	; 69
    5e68:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5e6c:	dc 01       	movw	r26, r24
    5e6e:	cb 01       	movw	r24, r22
    5e70:	8b 8b       	std	Y+19, r24	; 0x13
    5e72:	9c 8b       	std	Y+20, r25	; 0x14
    5e74:	ad 8b       	std	Y+21, r26	; 0x15
    5e76:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5e78:	11 e0       	ldi	r17, 0x01	; 1
    5e7a:	6b 89       	ldd	r22, Y+19	; 0x13
    5e7c:	7c 89       	ldd	r23, Y+20	; 0x14
    5e7e:	8d 89       	ldd	r24, Y+21	; 0x15
    5e80:	9e 89       	ldd	r25, Y+22	; 0x16
    5e82:	20 e0       	ldi	r18, 0x00	; 0
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	40 e8       	ldi	r20, 0x80	; 128
    5e88:	5f e3       	ldi	r21, 0x3F	; 63
    5e8a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    5e8e:	88 23       	and	r24, r24
    5e90:	0c f0       	brlt	.+2      	; 0x5e94 <drop+0x17a>
    5e92:	10 e0       	ldi	r17, 0x00	; 0
    5e94:	11 23       	and	r17, r17
    5e96:	29 f0       	breq	.+10     	; 0x5ea2 <drop+0x188>
		__ticks = 1;
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	98 8f       	std	Y+24, r25	; 0x18
    5e9e:	8f 8b       	std	Y+23, r24	; 0x17
    5ea0:	46 c0       	rjmp	.+140    	; 0x5f2e <drop+0x214>
	else if (__tmp > 65535)
    5ea2:	11 e0       	ldi	r17, 0x01	; 1
    5ea4:	6b 89       	ldd	r22, Y+19	; 0x13
    5ea6:	7c 89       	ldd	r23, Y+20	; 0x14
    5ea8:	8d 89       	ldd	r24, Y+21	; 0x15
    5eaa:	9e 89       	ldd	r25, Y+22	; 0x16
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	3f ef       	ldi	r19, 0xFF	; 255
    5eb0:	4f e7       	ldi	r20, 0x7F	; 127
    5eb2:	57 e4       	ldi	r21, 0x47	; 71
    5eb4:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5eb8:	18 16       	cp	r1, r24
    5eba:	0c f0       	brlt	.+2      	; 0x5ebe <drop+0x1a4>
    5ebc:	10 e0       	ldi	r17, 0x00	; 0
    5ebe:	11 23       	and	r17, r17
    5ec0:	61 f1       	breq	.+88     	; 0x5f1a <drop+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ec2:	6f 85       	ldd	r22, Y+15	; 0x0f
    5ec4:	78 89       	ldd	r23, Y+16	; 0x10
    5ec6:	89 89       	ldd	r24, Y+17	; 0x11
    5ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    5eca:	20 e0       	ldi	r18, 0x00	; 0
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e2       	ldi	r20, 0x20	; 32
    5ed0:	51 e4       	ldi	r21, 0x41	; 65
    5ed2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5ed6:	dc 01       	movw	r26, r24
    5ed8:	cb 01       	movw	r24, r22
    5eda:	bc 01       	movw	r22, r24
    5edc:	cd 01       	movw	r24, r26
    5ede:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	98 8f       	std	Y+24, r25	; 0x18
    5ee8:	8f 8b       	std	Y+23, r24	; 0x17
    5eea:	12 c0       	rjmp	.+36     	; 0x5f10 <drop+0x1f6>
    5eec:	80 e7       	ldi	r24, 0x70	; 112
    5eee:	91 e0       	ldi	r25, 0x01	; 1
    5ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    5ef2:	89 8f       	std	Y+25, r24	; 0x19
    5ef4:	89 8d       	ldd	r24, Y+25	; 0x19
    5ef6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5ef8:	8c 01       	movw	r16, r24
    5efa:	c8 01       	movw	r24, r16
    5efc:	01 97       	sbiw	r24, 0x01	; 1
    5efe:	f1 f7       	brne	.-4      	; 0x5efc <drop+0x1e2>
    5f00:	8c 01       	movw	r16, r24
    5f02:	1a 8f       	std	Y+26, r17	; 0x1a
    5f04:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f06:	8f 89       	ldd	r24, Y+23	; 0x17
    5f08:	98 8d       	ldd	r25, Y+24	; 0x18
    5f0a:	01 97       	sbiw	r24, 0x01	; 1
    5f0c:	98 8f       	std	Y+24, r25	; 0x18
    5f0e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f10:	8f 89       	ldd	r24, Y+23	; 0x17
    5f12:	98 8d       	ldd	r25, Y+24	; 0x18
    5f14:	00 97       	sbiw	r24, 0x00	; 0
    5f16:	51 f7       	brne	.-44     	; 0x5eec <drop+0x1d2>
    5f18:	17 c0       	rjmp	.+46     	; 0x5f48 <drop+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    5f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    5f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    5f20:	9e 89       	ldd	r25, Y+22	; 0x16
    5f22:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	98 8f       	std	Y+24, r25	; 0x18
    5f2c:	8f 8b       	std	Y+23, r24	; 0x17
    5f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    5f30:	98 8d       	ldd	r25, Y+24	; 0x18
    5f32:	9c 8f       	std	Y+28, r25	; 0x1c
    5f34:	8b 8f       	std	Y+27, r24	; 0x1b
    5f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f3a:	8c 01       	movw	r16, r24
    5f3c:	f8 01       	movw	r30, r16
    5f3e:	31 97       	sbiw	r30, 0x01	; 1
    5f40:	f1 f7       	brne	.-4      	; 0x5f3e <drop+0x224>
    5f42:	8f 01       	movw	r16, r30
    5f44:	1c 8f       	std	Y+28, r17	; 0x1c
    5f46:	0b 8f       	std	Y+27, r16	; 0x1b
void drop()
{
	servo_1(150);
	_delay_ms(300);
	
	for(ii=0;ii<75;ii++)
    5f48:	80 91 5b 03 	lds	r24, 0x035B
    5f4c:	8f 5f       	subi	r24, 0xFF	; 255
    5f4e:	80 93 5b 03 	sts	0x035B, r24
    5f52:	80 91 5b 03 	lds	r24, 0x035B
    5f56:	8b 34       	cpi	r24, 0x4B	; 75
    5f58:	08 f4       	brcc	.+2      	; 0x5f5c <drop+0x242>
    5f5a:	72 cf       	rjmp	.-284    	; 0x5e40 <drop+0x126>
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	a6 e9       	ldi	r26, 0x96	; 150
    5f62:	b3 e4       	ldi	r27, 0x43	; 67
    5f64:	8d 8f       	std	Y+29, r24	; 0x1d
    5f66:	9e 8f       	std	Y+30, r25	; 0x1e
    5f68:	af 8f       	std	Y+31, r26	; 0x1f
    5f6a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5f6c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f6e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f72:	98 a1       	lds	r25, 0x48
    5f74:	26 e6       	ldi	r18, 0x66	; 102
    5f76:	36 e6       	ldi	r19, 0x66	; 102
    5f78:	46 e6       	ldi	r20, 0x66	; 102
    5f7a:	55 e4       	ldi	r21, 0x45	; 69
    5f7c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	89 a3       	lds	r24, 0x59
    5f86:	9a a3       	lds	r25, 0x5a
    5f88:	ab a3       	lds	r26, 0x5b
    5f8a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5f8c:	11 e0       	ldi	r17, 0x01	; 1
    5f8e:	69 a1       	lds	r22, 0x49
    5f90:	7a a1       	lds	r23, 0x4a
    5f92:	8b a1       	lds	r24, 0x4b
    5f94:	9c a1       	lds	r25, 0x4c
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	40 e8       	ldi	r20, 0x80	; 128
    5f9c:	5f e3       	ldi	r21, 0x3F	; 63
    5f9e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    5fa2:	88 23       	and	r24, r24
    5fa4:	0c f0       	brlt	.+2      	; 0x5fa8 <drop+0x28e>
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	11 23       	and	r17, r17
    5faa:	29 f0       	breq	.+10     	; 0x5fb6 <drop+0x29c>
		__ticks = 1;
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	9e a3       	lds	r25, 0x5e
    5fb2:	8d a3       	lds	r24, 0x5d
    5fb4:	46 c0       	rjmp	.+140    	; 0x6042 <drop+0x328>
	else if (__tmp > 65535)
    5fb6:	11 e0       	ldi	r17, 0x01	; 1
    5fb8:	69 a1       	lds	r22, 0x49
    5fba:	7a a1       	lds	r23, 0x4a
    5fbc:	8b a1       	lds	r24, 0x4b
    5fbe:	9c a1       	lds	r25, 0x4c
    5fc0:	20 e0       	ldi	r18, 0x00	; 0
    5fc2:	3f ef       	ldi	r19, 0xFF	; 255
    5fc4:	4f e7       	ldi	r20, 0x7F	; 127
    5fc6:	57 e4       	ldi	r21, 0x47	; 71
    5fc8:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    5fcc:	18 16       	cp	r1, r24
    5fce:	0c f0       	brlt	.+2      	; 0x5fd2 <drop+0x2b8>
    5fd0:	10 e0       	ldi	r17, 0x00	; 0
    5fd2:	11 23       	and	r17, r17
    5fd4:	61 f1       	breq	.+88     	; 0x602e <drop+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fd6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5fd8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5fda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5fdc:	98 a1       	lds	r25, 0x48
    5fde:	20 e0       	ldi	r18, 0x00	; 0
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	40 e2       	ldi	r20, 0x20	; 32
    5fe4:	51 e4       	ldi	r21, 0x41	; 65
    5fe6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    5fea:	dc 01       	movw	r26, r24
    5fec:	cb 01       	movw	r24, r22
    5fee:	bc 01       	movw	r22, r24
    5ff0:	cd 01       	movw	r24, r26
    5ff2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	9e a3       	lds	r25, 0x5e
    5ffc:	8d a3       	lds	r24, 0x5d
    5ffe:	12 c0       	rjmp	.+36     	; 0x6024 <drop+0x30a>
    6000:	80 e7       	ldi	r24, 0x70	; 112
    6002:	91 e0       	ldi	r25, 0x01	; 1
    6004:	98 a7       	lds	r25, 0x78
    6006:	8f a3       	lds	r24, 0x5f
    6008:	8f a1       	lds	r24, 0x4f
    600a:	98 a5       	lds	r25, 0x68
    600c:	8c 01       	movw	r16, r24
    600e:	c8 01       	movw	r24, r16
    6010:	01 97       	sbiw	r24, 0x01	; 1
    6012:	f1 f7       	brne	.-4      	; 0x6010 <drop+0x2f6>
    6014:	8c 01       	movw	r16, r24
    6016:	18 a7       	lds	r17, 0x78
    6018:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    601a:	8d a1       	lds	r24, 0x4d
    601c:	9e a1       	lds	r25, 0x4e
    601e:	01 97       	sbiw	r24, 0x01	; 1
    6020:	9e a3       	lds	r25, 0x5e
    6022:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6024:	8d a1       	lds	r24, 0x4d
    6026:	9e a1       	lds	r25, 0x4e
    6028:	00 97       	sbiw	r24, 0x00	; 0
    602a:	51 f7       	brne	.-44     	; 0x6000 <drop+0x2e6>
    602c:	17 c0       	rjmp	.+46     	; 0x605c <drop+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    602e:	69 a1       	lds	r22, 0x49
    6030:	7a a1       	lds	r23, 0x4a
    6032:	8b a1       	lds	r24, 0x4b
    6034:	9c a1       	lds	r25, 0x4c
    6036:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    603a:	dc 01       	movw	r26, r24
    603c:	cb 01       	movw	r24, r22
    603e:	9e a3       	lds	r25, 0x5e
    6040:	8d a3       	lds	r24, 0x5d
    6042:	8d a1       	lds	r24, 0x4d
    6044:	9e a1       	lds	r25, 0x4e
    6046:	9a a7       	lds	r25, 0x7a
    6048:	89 a7       	lds	r24, 0x79
    604a:	89 a5       	lds	r24, 0x69
    604c:	9a a5       	lds	r25, 0x6a
    604e:	8c 01       	movw	r16, r24
    6050:	f8 01       	movw	r30, r16
    6052:	31 97       	sbiw	r30, 0x01	; 1
    6054:	f1 f7       	brne	.-4      	; 0x6052 <drop+0x338>
    6056:	8f 01       	movw	r16, r30
    6058:	1a a7       	lds	r17, 0x7a
    605a:	09 a7       	lds	r16, 0x79
		servo_2(ii);
		_delay_ms(10);

	}
	_delay_ms(300);
	gripper_open();
    605c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    6060:	80 e0       	ldi	r24, 0x00	; 0
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	a6 e9       	ldi	r26, 0x96	; 150
    6066:	b3 e4       	ldi	r27, 0x43	; 67
    6068:	8b a7       	lds	r24, 0x7b
    606a:	9c a7       	lds	r25, 0x7c
    606c:	ad a7       	lds	r26, 0x7d
    606e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6070:	6b a5       	lds	r22, 0x6b
    6072:	7c a5       	lds	r23, 0x6c
    6074:	8d a5       	lds	r24, 0x6d
    6076:	9e a5       	lds	r25, 0x6e
    6078:	26 e6       	ldi	r18, 0x66	; 102
    607a:	36 e6       	ldi	r19, 0x66	; 102
    607c:	46 e6       	ldi	r20, 0x66	; 102
    607e:	55 e4       	ldi	r21, 0x45	; 69
    6080:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6084:	dc 01       	movw	r26, r24
    6086:	cb 01       	movw	r24, r22
    6088:	8f a7       	lds	r24, 0x7f
    608a:	98 ab       	sts	0x58, r25
    608c:	a9 ab       	sts	0x59, r26
    608e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    6090:	11 e0       	ldi	r17, 0x01	; 1
    6092:	6f a5       	lds	r22, 0x6f
    6094:	78 a9       	sts	0x48, r23
    6096:	89 a9       	sts	0x49, r24
    6098:	9a a9       	sts	0x4a, r25
    609a:	20 e0       	ldi	r18, 0x00	; 0
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	40 e8       	ldi	r20, 0x80	; 128
    60a0:	5f e3       	ldi	r21, 0x3F	; 63
    60a2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    60a6:	88 23       	and	r24, r24
    60a8:	0c f0       	brlt	.+2      	; 0x60ac <drop+0x392>
    60aa:	10 e0       	ldi	r17, 0x00	; 0
    60ac:	11 23       	and	r17, r17
    60ae:	29 f0       	breq	.+10     	; 0x60ba <drop+0x3a0>
		__ticks = 1;
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	9c ab       	sts	0x5c, r25
    60b6:	8b ab       	sts	0x5b, r24
    60b8:	46 c0       	rjmp	.+140    	; 0x6146 <drop+0x42c>
	else if (__tmp > 65535)
    60ba:	11 e0       	ldi	r17, 0x01	; 1
    60bc:	6f a5       	lds	r22, 0x6f
    60be:	78 a9       	sts	0x48, r23
    60c0:	89 a9       	sts	0x49, r24
    60c2:	9a a9       	sts	0x4a, r25
    60c4:	20 e0       	ldi	r18, 0x00	; 0
    60c6:	3f ef       	ldi	r19, 0xFF	; 255
    60c8:	4f e7       	ldi	r20, 0x7F	; 127
    60ca:	57 e4       	ldi	r21, 0x47	; 71
    60cc:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    60d0:	18 16       	cp	r1, r24
    60d2:	0c f0       	brlt	.+2      	; 0x60d6 <drop+0x3bc>
    60d4:	10 e0       	ldi	r17, 0x00	; 0
    60d6:	11 23       	and	r17, r17
    60d8:	61 f1       	breq	.+88     	; 0x6132 <drop+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60da:	6b a5       	lds	r22, 0x6b
    60dc:	7c a5       	lds	r23, 0x6c
    60de:	8d a5       	lds	r24, 0x6d
    60e0:	9e a5       	lds	r25, 0x6e
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	40 e2       	ldi	r20, 0x20	; 32
    60e8:	51 e4       	ldi	r21, 0x41	; 65
    60ea:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	bc 01       	movw	r22, r24
    60f4:	cd 01       	movw	r24, r26
    60f6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    60fa:	dc 01       	movw	r26, r24
    60fc:	cb 01       	movw	r24, r22
    60fe:	9c ab       	sts	0x5c, r25
    6100:	8b ab       	sts	0x5b, r24
    6102:	12 c0       	rjmp	.+36     	; 0x6128 <drop+0x40e>
    6104:	80 e7       	ldi	r24, 0x70	; 112
    6106:	91 e0       	ldi	r25, 0x01	; 1
    6108:	9e ab       	sts	0x5e, r25
    610a:	8d ab       	sts	0x5d, r24
    610c:	8d a9       	sts	0x4d, r24
    610e:	9e a9       	sts	0x4e, r25
    6110:	8c 01       	movw	r16, r24
    6112:	c8 01       	movw	r24, r16
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	f1 f7       	brne	.-4      	; 0x6114 <drop+0x3fa>
    6118:	8c 01       	movw	r16, r24
    611a:	1e ab       	sts	0x5e, r17
    611c:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    611e:	8b a9       	sts	0x4b, r24
    6120:	9c a9       	sts	0x4c, r25
    6122:	01 97       	sbiw	r24, 0x01	; 1
    6124:	9c ab       	sts	0x5c, r25
    6126:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6128:	8b a9       	sts	0x4b, r24
    612a:	9c a9       	sts	0x4c, r25
    612c:	00 97       	sbiw	r24, 0x00	; 0
    612e:	51 f7       	brne	.-44     	; 0x6104 <drop+0x3ea>
    6130:	17 c0       	rjmp	.+46     	; 0x6160 <drop+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6132:	6f a5       	lds	r22, 0x6f
    6134:	78 a9       	sts	0x48, r23
    6136:	89 a9       	sts	0x49, r24
    6138:	9a a9       	sts	0x4a, r25
    613a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    613e:	dc 01       	movw	r26, r24
    6140:	cb 01       	movw	r24, r22
    6142:	9c ab       	sts	0x5c, r25
    6144:	8b ab       	sts	0x5b, r24
    6146:	8b a9       	sts	0x4b, r24
    6148:	9c a9       	sts	0x4c, r25
    614a:	98 af       	sts	0x78, r25
    614c:	8f ab       	sts	0x5f, r24
    614e:	8f a9       	sts	0x4f, r24
    6150:	98 ad       	sts	0x68, r25
    6152:	8c 01       	movw	r16, r24
    6154:	f8 01       	movw	r30, r16
    6156:	31 97       	sbiw	r30, 0x01	; 1
    6158:	f1 f7       	brne	.-4      	; 0x6156 <drop+0x43c>
    615a:	8f 01       	movw	r16, r30
    615c:	18 af       	sts	0x78, r17
    615e:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	servo_2(0);
    6160:	80 e0       	ldi	r24, 0x00	; 0
    6162:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    6166:	80 e0       	ldi	r24, 0x00	; 0
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	a6 e9       	ldi	r26, 0x96	; 150
    616c:	b3 e4       	ldi	r27, 0x43	; 67
    616e:	89 af       	sts	0x79, r24
    6170:	9a af       	sts	0x7a, r25
    6172:	ab af       	sts	0x7b, r26
    6174:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6176:	69 ad       	sts	0x69, r22
    6178:	7a ad       	sts	0x6a, r23
    617a:	8b ad       	sts	0x6b, r24
    617c:	9c ad       	sts	0x6c, r25
    617e:	26 e6       	ldi	r18, 0x66	; 102
    6180:	36 e6       	ldi	r19, 0x66	; 102
    6182:	46 e6       	ldi	r20, 0x66	; 102
    6184:	55 e4       	ldi	r21, 0x45	; 69
    6186:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    618a:	dc 01       	movw	r26, r24
    618c:	cb 01       	movw	r24, r22
    618e:	9e 01       	movw	r18, r28
    6190:	23 5c       	subi	r18, 0xC3	; 195
    6192:	3f 4f       	sbci	r19, 0xFF	; 255
    6194:	f9 01       	movw	r30, r18
    6196:	80 83       	st	Z, r24
    6198:	91 83       	std	Z+1, r25	; 0x01
    619a:	a2 83       	std	Z+2, r26	; 0x02
    619c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    619e:	11 e0       	ldi	r17, 0x01	; 1
    61a0:	ce 01       	movw	r24, r28
    61a2:	cd 96       	adiw	r24, 0x3d	; 61
    61a4:	fc 01       	movw	r30, r24
    61a6:	60 81       	ld	r22, Z
    61a8:	71 81       	ldd	r23, Z+1	; 0x01
    61aa:	82 81       	ldd	r24, Z+2	; 0x02
    61ac:	93 81       	ldd	r25, Z+3	; 0x03
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	30 e0       	ldi	r19, 0x00	; 0
    61b2:	40 e8       	ldi	r20, 0x80	; 128
    61b4:	5f e3       	ldi	r21, 0x3F	; 63
    61b6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    61ba:	88 23       	and	r24, r24
    61bc:	0c f0       	brlt	.+2      	; 0x61c0 <drop+0x4a6>
    61be:	10 e0       	ldi	r17, 0x00	; 0
    61c0:	11 23       	and	r17, r17
    61c2:	49 f0       	breq	.+18     	; 0x61d6 <drop+0x4bc>
		__ticks = 1;
    61c4:	ce 01       	movw	r24, r28
    61c6:	8f 5b       	subi	r24, 0xBF	; 191
    61c8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	fc 01       	movw	r30, r24
    61d0:	31 83       	std	Z+1, r19	; 0x01
    61d2:	20 83       	st	Z, r18
    61d4:	6e c0       	rjmp	.+220    	; 0x62b2 <drop+0x598>
	else if (__tmp > 65535)
    61d6:	11 e0       	ldi	r17, 0x01	; 1
    61d8:	ce 01       	movw	r24, r28
    61da:	cd 96       	adiw	r24, 0x3d	; 61
    61dc:	fc 01       	movw	r30, r24
    61de:	60 81       	ld	r22, Z
    61e0:	71 81       	ldd	r23, Z+1	; 0x01
    61e2:	82 81       	ldd	r24, Z+2	; 0x02
    61e4:	93 81       	ldd	r25, Z+3	; 0x03
    61e6:	20 e0       	ldi	r18, 0x00	; 0
    61e8:	3f ef       	ldi	r19, 0xFF	; 255
    61ea:	4f e7       	ldi	r20, 0x7F	; 127
    61ec:	57 e4       	ldi	r21, 0x47	; 71
    61ee:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    61f2:	18 16       	cp	r1, r24
    61f4:	0c f0       	brlt	.+2      	; 0x61f8 <drop+0x4de>
    61f6:	10 e0       	ldi	r17, 0x00	; 0
    61f8:	11 23       	and	r17, r17
    61fa:	09 f4       	brne	.+2      	; 0x61fe <drop+0x4e4>
    61fc:	49 c0       	rjmp	.+146    	; 0x6290 <drop+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61fe:	69 ad       	sts	0x69, r22
    6200:	7a ad       	sts	0x6a, r23
    6202:	8b ad       	sts	0x6b, r24
    6204:	9c ad       	sts	0x6c, r25
    6206:	20 e0       	ldi	r18, 0x00	; 0
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	40 e2       	ldi	r20, 0x20	; 32
    620c:	51 e4       	ldi	r21, 0x41	; 65
    620e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6212:	dc 01       	movw	r26, r24
    6214:	cb 01       	movw	r24, r22
    6216:	8e 01       	movw	r16, r28
    6218:	0f 5b       	subi	r16, 0xBF	; 191
    621a:	1f 4f       	sbci	r17, 0xFF	; 255
    621c:	bc 01       	movw	r22, r24
    621e:	cd 01       	movw	r24, r26
    6220:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6224:	dc 01       	movw	r26, r24
    6226:	cb 01       	movw	r24, r22
    6228:	f8 01       	movw	r30, r16
    622a:	91 83       	std	Z+1, r25	; 0x01
    622c:	80 83       	st	Z, r24
    622e:	27 c0       	rjmp	.+78     	; 0x627e <drop+0x564>
    6230:	ce 01       	movw	r24, r28
    6232:	8d 5b       	subi	r24, 0xBD	; 189
    6234:	9f 4f       	sbci	r25, 0xFF	; 255
    6236:	20 e7       	ldi	r18, 0x70	; 112
    6238:	31 e0       	ldi	r19, 0x01	; 1
    623a:	fc 01       	movw	r30, r24
    623c:	31 83       	std	Z+1, r19	; 0x01
    623e:	20 83       	st	Z, r18
    6240:	ce 01       	movw	r24, r28
    6242:	8d 5b       	subi	r24, 0xBD	; 189
    6244:	9f 4f       	sbci	r25, 0xFF	; 255
    6246:	fc 01       	movw	r30, r24
    6248:	80 81       	ld	r24, Z
    624a:	91 81       	ldd	r25, Z+1	; 0x01
    624c:	8c 01       	movw	r16, r24
    624e:	c8 01       	movw	r24, r16
    6250:	01 97       	sbiw	r24, 0x01	; 1
    6252:	f1 f7       	brne	.-4      	; 0x6250 <drop+0x536>
    6254:	8c 01       	movw	r16, r24
    6256:	ce 01       	movw	r24, r28
    6258:	8d 5b       	subi	r24, 0xBD	; 189
    625a:	9f 4f       	sbci	r25, 0xFF	; 255
    625c:	fc 01       	movw	r30, r24
    625e:	11 83       	std	Z+1, r17	; 0x01
    6260:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6262:	ce 01       	movw	r24, r28
    6264:	8f 5b       	subi	r24, 0xBF	; 191
    6266:	9f 4f       	sbci	r25, 0xFF	; 255
    6268:	9e 01       	movw	r18, r28
    626a:	2f 5b       	subi	r18, 0xBF	; 191
    626c:	3f 4f       	sbci	r19, 0xFF	; 255
    626e:	f9 01       	movw	r30, r18
    6270:	20 81       	ld	r18, Z
    6272:	31 81       	ldd	r19, Z+1	; 0x01
    6274:	21 50       	subi	r18, 0x01	; 1
    6276:	30 40       	sbci	r19, 0x00	; 0
    6278:	fc 01       	movw	r30, r24
    627a:	31 83       	std	Z+1, r19	; 0x01
    627c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    627e:	ce 01       	movw	r24, r28
    6280:	8f 5b       	subi	r24, 0xBF	; 191
    6282:	9f 4f       	sbci	r25, 0xFF	; 255
    6284:	fc 01       	movw	r30, r24
    6286:	80 81       	ld	r24, Z
    6288:	91 81       	ldd	r25, Z+1	; 0x01
    628a:	00 97       	sbiw	r24, 0x00	; 0
    628c:	89 f6       	brne	.-94     	; 0x6230 <drop+0x516>
    628e:	2e c0       	rjmp	.+92     	; 0x62ec <drop+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6290:	8e 01       	movw	r16, r28
    6292:	0f 5b       	subi	r16, 0xBF	; 191
    6294:	1f 4f       	sbci	r17, 0xFF	; 255
    6296:	ce 01       	movw	r24, r28
    6298:	cd 96       	adiw	r24, 0x3d	; 61
    629a:	fc 01       	movw	r30, r24
    629c:	60 81       	ld	r22, Z
    629e:	71 81       	ldd	r23, Z+1	; 0x01
    62a0:	82 81       	ldd	r24, Z+2	; 0x02
    62a2:	93 81       	ldd	r25, Z+3	; 0x03
    62a4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    62a8:	dc 01       	movw	r26, r24
    62aa:	cb 01       	movw	r24, r22
    62ac:	f8 01       	movw	r30, r16
    62ae:	91 83       	std	Z+1, r25	; 0x01
    62b0:	80 83       	st	Z, r24
    62b2:	ce 01       	movw	r24, r28
    62b4:	8b 5b       	subi	r24, 0xBB	; 187
    62b6:	9f 4f       	sbci	r25, 0xFF	; 255
    62b8:	9e 01       	movw	r18, r28
    62ba:	2f 5b       	subi	r18, 0xBF	; 191
    62bc:	3f 4f       	sbci	r19, 0xFF	; 255
    62be:	f9 01       	movw	r30, r18
    62c0:	20 81       	ld	r18, Z
    62c2:	31 81       	ldd	r19, Z+1	; 0x01
    62c4:	fc 01       	movw	r30, r24
    62c6:	31 83       	std	Z+1, r19	; 0x01
    62c8:	20 83       	st	Z, r18
    62ca:	ce 01       	movw	r24, r28
    62cc:	8b 5b       	subi	r24, 0xBB	; 187
    62ce:	9f 4f       	sbci	r25, 0xFF	; 255
    62d0:	fc 01       	movw	r30, r24
    62d2:	80 81       	ld	r24, Z
    62d4:	91 81       	ldd	r25, Z+1	; 0x01
    62d6:	8c 01       	movw	r16, r24
    62d8:	c8 01       	movw	r24, r16
    62da:	01 97       	sbiw	r24, 0x01	; 1
    62dc:	f1 f7       	brne	.-4      	; 0x62da <drop+0x5c0>
    62de:	8c 01       	movw	r16, r24
    62e0:	ce 01       	movw	r24, r28
    62e2:	8b 5b       	subi	r24, 0xBB	; 187
    62e4:	9f 4f       	sbci	r25, 0xFF	; 255
    62e6:	fc 01       	movw	r30, r24
    62e8:	11 83       	std	Z+1, r17	; 0x01
    62ea:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    62ec:	ca 5b       	subi	r28, 0xBA	; 186
    62ee:	df 4f       	sbci	r29, 0xFF	; 255
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	f8 94       	cli
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	cd bf       	out	0x3d, r28	; 61
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	1f 91       	pop	r17
    6300:	0f 91       	pop	r16
    6302:	08 95       	ret

00006304 <front>:

void front()
{
    6304:	0f 93       	push	r16
    6306:	1f 93       	push	r17
    6308:	cf 93       	push	r28
    630a:	df 93       	push	r29
    630c:	cd b7       	in	r28, 0x3d	; 61
    630e:	de b7       	in	r29, 0x3e	; 62
    6310:	e8 97       	sbiw	r28, 0x38	; 56
    6312:	0f b6       	in	r0, 0x3f	; 63
    6314:	f8 94       	cli
    6316:	de bf       	out	0x3e, r29	; 62
    6318:	0f be       	out	0x3f, r0	; 63
    631a:	cd bf       	out	0x3d, r28	; 61
	gripper_open();
    631c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    6320:	80 e0       	ldi	r24, 0x00	; 0
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	a6 e9       	ldi	r26, 0x96	; 150
    6326:	b3 e4       	ldi	r27, 0x43	; 67
    6328:	89 83       	std	Y+1, r24	; 0x01
    632a:	9a 83       	std	Y+2, r25	; 0x02
    632c:	ab 83       	std	Y+3, r26	; 0x03
    632e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6330:	69 81       	ldd	r22, Y+1	; 0x01
    6332:	7a 81       	ldd	r23, Y+2	; 0x02
    6334:	8b 81       	ldd	r24, Y+3	; 0x03
    6336:	9c 81       	ldd	r25, Y+4	; 0x04
    6338:	26 e6       	ldi	r18, 0x66	; 102
    633a:	36 e6       	ldi	r19, 0x66	; 102
    633c:	46 e6       	ldi	r20, 0x66	; 102
    633e:	55 e4       	ldi	r21, 0x45	; 69
    6340:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	8d 83       	std	Y+5, r24	; 0x05
    634a:	9e 83       	std	Y+6, r25	; 0x06
    634c:	af 83       	std	Y+7, r26	; 0x07
    634e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6350:	11 e0       	ldi	r17, 0x01	; 1
    6352:	6d 81       	ldd	r22, Y+5	; 0x05
    6354:	7e 81       	ldd	r23, Y+6	; 0x06
    6356:	8f 81       	ldd	r24, Y+7	; 0x07
    6358:	98 85       	ldd	r25, Y+8	; 0x08
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	40 e8       	ldi	r20, 0x80	; 128
    6360:	5f e3       	ldi	r21, 0x3F	; 63
    6362:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6366:	88 23       	and	r24, r24
    6368:	0c f0       	brlt	.+2      	; 0x636c <front+0x68>
    636a:	10 e0       	ldi	r17, 0x00	; 0
    636c:	11 23       	and	r17, r17
    636e:	29 f0       	breq	.+10     	; 0x637a <front+0x76>
		__ticks = 1;
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	9a 87       	std	Y+10, r25	; 0x0a
    6376:	89 87       	std	Y+9, r24	; 0x09
    6378:	46 c0       	rjmp	.+140    	; 0x6406 <front+0x102>
	else if (__tmp > 65535)
    637a:	11 e0       	ldi	r17, 0x01	; 1
    637c:	6d 81       	ldd	r22, Y+5	; 0x05
    637e:	7e 81       	ldd	r23, Y+6	; 0x06
    6380:	8f 81       	ldd	r24, Y+7	; 0x07
    6382:	98 85       	ldd	r25, Y+8	; 0x08
    6384:	20 e0       	ldi	r18, 0x00	; 0
    6386:	3f ef       	ldi	r19, 0xFF	; 255
    6388:	4f e7       	ldi	r20, 0x7F	; 127
    638a:	57 e4       	ldi	r21, 0x47	; 71
    638c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6390:	18 16       	cp	r1, r24
    6392:	0c f0       	brlt	.+2      	; 0x6396 <front+0x92>
    6394:	10 e0       	ldi	r17, 0x00	; 0
    6396:	11 23       	and	r17, r17
    6398:	61 f1       	breq	.+88     	; 0x63f2 <front+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    639a:	69 81       	ldd	r22, Y+1	; 0x01
    639c:	7a 81       	ldd	r23, Y+2	; 0x02
    639e:	8b 81       	ldd	r24, Y+3	; 0x03
    63a0:	9c 81       	ldd	r25, Y+4	; 0x04
    63a2:	20 e0       	ldi	r18, 0x00	; 0
    63a4:	30 e0       	ldi	r19, 0x00	; 0
    63a6:	40 e2       	ldi	r20, 0x20	; 32
    63a8:	51 e4       	ldi	r21, 0x41	; 65
    63aa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    63ae:	dc 01       	movw	r26, r24
    63b0:	cb 01       	movw	r24, r22
    63b2:	bc 01       	movw	r22, r24
    63b4:	cd 01       	movw	r24, r26
    63b6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    63ba:	dc 01       	movw	r26, r24
    63bc:	cb 01       	movw	r24, r22
    63be:	9a 87       	std	Y+10, r25	; 0x0a
    63c0:	89 87       	std	Y+9, r24	; 0x09
    63c2:	12 c0       	rjmp	.+36     	; 0x63e8 <front+0xe4>
    63c4:	80 e7       	ldi	r24, 0x70	; 112
    63c6:	91 e0       	ldi	r25, 0x01	; 1
    63c8:	9c 87       	std	Y+12, r25	; 0x0c
    63ca:	8b 87       	std	Y+11, r24	; 0x0b
    63cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    63ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    63d0:	8c 01       	movw	r16, r24
    63d2:	c8 01       	movw	r24, r16
    63d4:	01 97       	sbiw	r24, 0x01	; 1
    63d6:	f1 f7       	brne	.-4      	; 0x63d4 <front+0xd0>
    63d8:	8c 01       	movw	r16, r24
    63da:	1c 87       	std	Y+12, r17	; 0x0c
    63dc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63de:	89 85       	ldd	r24, Y+9	; 0x09
    63e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    63e2:	01 97       	sbiw	r24, 0x01	; 1
    63e4:	9a 87       	std	Y+10, r25	; 0x0a
    63e6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63e8:	89 85       	ldd	r24, Y+9	; 0x09
    63ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ec:	00 97       	sbiw	r24, 0x00	; 0
    63ee:	51 f7       	brne	.-44     	; 0x63c4 <front+0xc0>
    63f0:	17 c0       	rjmp	.+46     	; 0x6420 <front+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63f2:	6d 81       	ldd	r22, Y+5	; 0x05
    63f4:	7e 81       	ldd	r23, Y+6	; 0x06
    63f6:	8f 81       	ldd	r24, Y+7	; 0x07
    63f8:	98 85       	ldd	r25, Y+8	; 0x08
    63fa:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    63fe:	dc 01       	movw	r26, r24
    6400:	cb 01       	movw	r24, r22
    6402:	9a 87       	std	Y+10, r25	; 0x0a
    6404:	89 87       	std	Y+9, r24	; 0x09
    6406:	89 85       	ldd	r24, Y+9	; 0x09
    6408:	9a 85       	ldd	r25, Y+10	; 0x0a
    640a:	9e 87       	std	Y+14, r25	; 0x0e
    640c:	8d 87       	std	Y+13, r24	; 0x0d
    640e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6410:	9e 85       	ldd	r25, Y+14	; 0x0e
    6412:	8c 01       	movw	r16, r24
    6414:	c8 01       	movw	r24, r16
    6416:	01 97       	sbiw	r24, 0x01	; 1
    6418:	f1 f7       	brne	.-4      	; 0x6416 <front+0x112>
    641a:	8c 01       	movw	r16, r24
    641c:	1e 87       	std	Y+14, r17	; 0x0e
    641e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_forward();
    6420:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_forward>
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	a6 e9       	ldi	r26, 0x96	; 150
    642a:	b3 e4       	ldi	r27, 0x43	; 67
    642c:	8f 87       	std	Y+15, r24	; 0x0f
    642e:	98 8b       	std	Y+16, r25	; 0x10
    6430:	a9 8b       	std	Y+17, r26	; 0x11
    6432:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6434:	6f 85       	ldd	r22, Y+15	; 0x0f
    6436:	78 89       	ldd	r23, Y+16	; 0x10
    6438:	89 89       	ldd	r24, Y+17	; 0x11
    643a:	9a 89       	ldd	r25, Y+18	; 0x12
    643c:	26 e6       	ldi	r18, 0x66	; 102
    643e:	36 e6       	ldi	r19, 0x66	; 102
    6440:	46 e6       	ldi	r20, 0x66	; 102
    6442:	55 e4       	ldi	r21, 0x45	; 69
    6444:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6448:	dc 01       	movw	r26, r24
    644a:	cb 01       	movw	r24, r22
    644c:	8b 8b       	std	Y+19, r24	; 0x13
    644e:	9c 8b       	std	Y+20, r25	; 0x14
    6450:	ad 8b       	std	Y+21, r26	; 0x15
    6452:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6454:	11 e0       	ldi	r17, 0x01	; 1
    6456:	6b 89       	ldd	r22, Y+19	; 0x13
    6458:	7c 89       	ldd	r23, Y+20	; 0x14
    645a:	8d 89       	ldd	r24, Y+21	; 0x15
    645c:	9e 89       	ldd	r25, Y+22	; 0x16
    645e:	20 e0       	ldi	r18, 0x00	; 0
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	40 e8       	ldi	r20, 0x80	; 128
    6464:	5f e3       	ldi	r21, 0x3F	; 63
    6466:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    646a:	88 23       	and	r24, r24
    646c:	0c f0       	brlt	.+2      	; 0x6470 <front+0x16c>
    646e:	10 e0       	ldi	r17, 0x00	; 0
    6470:	11 23       	and	r17, r17
    6472:	29 f0       	breq	.+10     	; 0x647e <front+0x17a>
		__ticks = 1;
    6474:	81 e0       	ldi	r24, 0x01	; 1
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	98 8f       	std	Y+24, r25	; 0x18
    647a:	8f 8b       	std	Y+23, r24	; 0x17
    647c:	46 c0       	rjmp	.+140    	; 0x650a <front+0x206>
	else if (__tmp > 65535)
    647e:	11 e0       	ldi	r17, 0x01	; 1
    6480:	6b 89       	ldd	r22, Y+19	; 0x13
    6482:	7c 89       	ldd	r23, Y+20	; 0x14
    6484:	8d 89       	ldd	r24, Y+21	; 0x15
    6486:	9e 89       	ldd	r25, Y+22	; 0x16
    6488:	20 e0       	ldi	r18, 0x00	; 0
    648a:	3f ef       	ldi	r19, 0xFF	; 255
    648c:	4f e7       	ldi	r20, 0x7F	; 127
    648e:	57 e4       	ldi	r21, 0x47	; 71
    6490:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6494:	18 16       	cp	r1, r24
    6496:	0c f0       	brlt	.+2      	; 0x649a <front+0x196>
    6498:	10 e0       	ldi	r17, 0x00	; 0
    649a:	11 23       	and	r17, r17
    649c:	61 f1       	breq	.+88     	; 0x64f6 <front+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    649e:	6f 85       	ldd	r22, Y+15	; 0x0f
    64a0:	78 89       	ldd	r23, Y+16	; 0x10
    64a2:	89 89       	ldd	r24, Y+17	; 0x11
    64a4:	9a 89       	ldd	r25, Y+18	; 0x12
    64a6:	20 e0       	ldi	r18, 0x00	; 0
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	40 e2       	ldi	r20, 0x20	; 32
    64ac:	51 e4       	ldi	r21, 0x41	; 65
    64ae:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	bc 01       	movw	r22, r24
    64b8:	cd 01       	movw	r24, r26
    64ba:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    64be:	dc 01       	movw	r26, r24
    64c0:	cb 01       	movw	r24, r22
    64c2:	98 8f       	std	Y+24, r25	; 0x18
    64c4:	8f 8b       	std	Y+23, r24	; 0x17
    64c6:	12 c0       	rjmp	.+36     	; 0x64ec <front+0x1e8>
    64c8:	80 e7       	ldi	r24, 0x70	; 112
    64ca:	91 e0       	ldi	r25, 0x01	; 1
    64cc:	9a 8f       	std	Y+26, r25	; 0x1a
    64ce:	89 8f       	std	Y+25, r24	; 0x19
    64d0:	89 8d       	ldd	r24, Y+25	; 0x19
    64d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    64d4:	8c 01       	movw	r16, r24
    64d6:	c8 01       	movw	r24, r16
    64d8:	01 97       	sbiw	r24, 0x01	; 1
    64da:	f1 f7       	brne	.-4      	; 0x64d8 <front+0x1d4>
    64dc:	8c 01       	movw	r16, r24
    64de:	1a 8f       	std	Y+26, r17	; 0x1a
    64e0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64e2:	8f 89       	ldd	r24, Y+23	; 0x17
    64e4:	98 8d       	ldd	r25, Y+24	; 0x18
    64e6:	01 97       	sbiw	r24, 0x01	; 1
    64e8:	98 8f       	std	Y+24, r25	; 0x18
    64ea:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64ec:	8f 89       	ldd	r24, Y+23	; 0x17
    64ee:	98 8d       	ldd	r25, Y+24	; 0x18
    64f0:	00 97       	sbiw	r24, 0x00	; 0
    64f2:	51 f7       	brne	.-44     	; 0x64c8 <front+0x1c4>
    64f4:	17 c0       	rjmp	.+46     	; 0x6524 <front+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64f6:	6b 89       	ldd	r22, Y+19	; 0x13
    64f8:	7c 89       	ldd	r23, Y+20	; 0x14
    64fa:	8d 89       	ldd	r24, Y+21	; 0x15
    64fc:	9e 89       	ldd	r25, Y+22	; 0x16
    64fe:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6502:	dc 01       	movw	r26, r24
    6504:	cb 01       	movw	r24, r22
    6506:	98 8f       	std	Y+24, r25	; 0x18
    6508:	8f 8b       	std	Y+23, r24	; 0x17
    650a:	8f 89       	ldd	r24, Y+23	; 0x17
    650c:	98 8d       	ldd	r25, Y+24	; 0x18
    650e:	9c 8f       	std	Y+28, r25	; 0x1c
    6510:	8b 8f       	std	Y+27, r24	; 0x1b
    6512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6516:	8c 01       	movw	r16, r24
    6518:	c8 01       	movw	r24, r16
    651a:	01 97       	sbiw	r24, 0x01	; 1
    651c:	f1 f7       	brne	.-4      	; 0x651a <front+0x216>
    651e:	8c 01       	movw	r16, r24
    6520:	1c 8f       	std	Y+28, r17	; 0x1c
    6522:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	gripper_close();
    6524:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <gripper_close>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	a6 e9       	ldi	r26, 0x96	; 150
    652e:	b3 e4       	ldi	r27, 0x43	; 67
    6530:	8d 8f       	std	Y+29, r24	; 0x1d
    6532:	9e 8f       	std	Y+30, r25	; 0x1e
    6534:	af 8f       	std	Y+31, r26	; 0x1f
    6536:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6538:	6d 8d       	ldd	r22, Y+29	; 0x1d
    653a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    653c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    653e:	98 a1       	lds	r25, 0x48
    6540:	26 e6       	ldi	r18, 0x66	; 102
    6542:	36 e6       	ldi	r19, 0x66	; 102
    6544:	46 e6       	ldi	r20, 0x66	; 102
    6546:	55 e4       	ldi	r21, 0x45	; 69
    6548:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    654c:	dc 01       	movw	r26, r24
    654e:	cb 01       	movw	r24, r22
    6550:	89 a3       	lds	r24, 0x59
    6552:	9a a3       	lds	r25, 0x5a
    6554:	ab a3       	lds	r26, 0x5b
    6556:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6558:	11 e0       	ldi	r17, 0x01	; 1
    655a:	69 a1       	lds	r22, 0x49
    655c:	7a a1       	lds	r23, 0x4a
    655e:	8b a1       	lds	r24, 0x4b
    6560:	9c a1       	lds	r25, 0x4c
    6562:	20 e0       	ldi	r18, 0x00	; 0
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	40 e8       	ldi	r20, 0x80	; 128
    6568:	5f e3       	ldi	r21, 0x3F	; 63
    656a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    656e:	88 23       	and	r24, r24
    6570:	0c f0       	brlt	.+2      	; 0x6574 <front+0x270>
    6572:	10 e0       	ldi	r17, 0x00	; 0
    6574:	11 23       	and	r17, r17
    6576:	29 f0       	breq	.+10     	; 0x6582 <front+0x27e>
		__ticks = 1;
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	9e a3       	lds	r25, 0x5e
    657e:	8d a3       	lds	r24, 0x5d
    6580:	46 c0       	rjmp	.+140    	; 0x660e <front+0x30a>
	else if (__tmp > 65535)
    6582:	11 e0       	ldi	r17, 0x01	; 1
    6584:	69 a1       	lds	r22, 0x49
    6586:	7a a1       	lds	r23, 0x4a
    6588:	8b a1       	lds	r24, 0x4b
    658a:	9c a1       	lds	r25, 0x4c
    658c:	20 e0       	ldi	r18, 0x00	; 0
    658e:	3f ef       	ldi	r19, 0xFF	; 255
    6590:	4f e7       	ldi	r20, 0x7F	; 127
    6592:	57 e4       	ldi	r21, 0x47	; 71
    6594:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6598:	18 16       	cp	r1, r24
    659a:	0c f0       	brlt	.+2      	; 0x659e <front+0x29a>
    659c:	10 e0       	ldi	r17, 0x00	; 0
    659e:	11 23       	and	r17, r17
    65a0:	61 f1       	breq	.+88     	; 0x65fa <front+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    65a4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    65a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    65a8:	98 a1       	lds	r25, 0x48
    65aa:	20 e0       	ldi	r18, 0x00	; 0
    65ac:	30 e0       	ldi	r19, 0x00	; 0
    65ae:	40 e2       	ldi	r20, 0x20	; 32
    65b0:	51 e4       	ldi	r21, 0x41	; 65
    65b2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    65b6:	dc 01       	movw	r26, r24
    65b8:	cb 01       	movw	r24, r22
    65ba:	bc 01       	movw	r22, r24
    65bc:	cd 01       	movw	r24, r26
    65be:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    65c2:	dc 01       	movw	r26, r24
    65c4:	cb 01       	movw	r24, r22
    65c6:	9e a3       	lds	r25, 0x5e
    65c8:	8d a3       	lds	r24, 0x5d
    65ca:	12 c0       	rjmp	.+36     	; 0x65f0 <front+0x2ec>
    65cc:	80 e7       	ldi	r24, 0x70	; 112
    65ce:	91 e0       	ldi	r25, 0x01	; 1
    65d0:	98 a7       	lds	r25, 0x78
    65d2:	8f a3       	lds	r24, 0x5f
    65d4:	8f a1       	lds	r24, 0x4f
    65d6:	98 a5       	lds	r25, 0x68
    65d8:	8c 01       	movw	r16, r24
    65da:	c8 01       	movw	r24, r16
    65dc:	01 97       	sbiw	r24, 0x01	; 1
    65de:	f1 f7       	brne	.-4      	; 0x65dc <front+0x2d8>
    65e0:	8c 01       	movw	r16, r24
    65e2:	18 a7       	lds	r17, 0x78
    65e4:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65e6:	8d a1       	lds	r24, 0x4d
    65e8:	9e a1       	lds	r25, 0x4e
    65ea:	01 97       	sbiw	r24, 0x01	; 1
    65ec:	9e a3       	lds	r25, 0x5e
    65ee:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65f0:	8d a1       	lds	r24, 0x4d
    65f2:	9e a1       	lds	r25, 0x4e
    65f4:	00 97       	sbiw	r24, 0x00	; 0
    65f6:	51 f7       	brne	.-44     	; 0x65cc <front+0x2c8>
    65f8:	17 c0       	rjmp	.+46     	; 0x6628 <front+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65fa:	69 a1       	lds	r22, 0x49
    65fc:	7a a1       	lds	r23, 0x4a
    65fe:	8b a1       	lds	r24, 0x4b
    6600:	9c a1       	lds	r25, 0x4c
    6602:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6606:	dc 01       	movw	r26, r24
    6608:	cb 01       	movw	r24, r22
    660a:	9e a3       	lds	r25, 0x5e
    660c:	8d a3       	lds	r24, 0x5d
    660e:	8d a1       	lds	r24, 0x4d
    6610:	9e a1       	lds	r25, 0x4e
    6612:	9a a7       	lds	r25, 0x7a
    6614:	89 a7       	lds	r24, 0x79
    6616:	89 a5       	lds	r24, 0x69
    6618:	9a a5       	lds	r25, 0x6a
    661a:	8c 01       	movw	r16, r24
    661c:	c8 01       	movw	r24, r16
    661e:	01 97       	sbiw	r24, 0x01	; 1
    6620:	f1 f7       	brne	.-4      	; 0x661e <front+0x31a>
    6622:	8c 01       	movw	r16, r24
    6624:	1a a7       	lds	r17, 0x7a
    6626:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	arm_backward();
    6628:	0e 94 ce 24 	call	0x499c	; 0x499c <arm_backward>
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	a6 e9       	ldi	r26, 0x96	; 150
    6632:	b3 e4       	ldi	r27, 0x43	; 67
    6634:	8b a7       	lds	r24, 0x7b
    6636:	9c a7       	lds	r25, 0x7c
    6638:	ad a7       	lds	r26, 0x7d
    663a:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    663c:	6b a5       	lds	r22, 0x6b
    663e:	7c a5       	lds	r23, 0x6c
    6640:	8d a5       	lds	r24, 0x6d
    6642:	9e a5       	lds	r25, 0x6e
    6644:	26 e6       	ldi	r18, 0x66	; 102
    6646:	36 e6       	ldi	r19, 0x66	; 102
    6648:	46 e6       	ldi	r20, 0x66	; 102
    664a:	55 e4       	ldi	r21, 0x45	; 69
    664c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6650:	dc 01       	movw	r26, r24
    6652:	cb 01       	movw	r24, r22
    6654:	8f a7       	lds	r24, 0x7f
    6656:	98 ab       	sts	0x58, r25
    6658:	a9 ab       	sts	0x59, r26
    665a:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    665c:	11 e0       	ldi	r17, 0x01	; 1
    665e:	6f a5       	lds	r22, 0x6f
    6660:	78 a9       	sts	0x48, r23
    6662:	89 a9       	sts	0x49, r24
    6664:	9a a9       	sts	0x4a, r25
    6666:	20 e0       	ldi	r18, 0x00	; 0
    6668:	30 e0       	ldi	r19, 0x00	; 0
    666a:	40 e8       	ldi	r20, 0x80	; 128
    666c:	5f e3       	ldi	r21, 0x3F	; 63
    666e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6672:	88 23       	and	r24, r24
    6674:	0c f0       	brlt	.+2      	; 0x6678 <front+0x374>
    6676:	10 e0       	ldi	r17, 0x00	; 0
    6678:	11 23       	and	r17, r17
    667a:	29 f0       	breq	.+10     	; 0x6686 <front+0x382>
		__ticks = 1;
    667c:	81 e0       	ldi	r24, 0x01	; 1
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	9c ab       	sts	0x5c, r25
    6682:	8b ab       	sts	0x5b, r24
    6684:	46 c0       	rjmp	.+140    	; 0x6712 <front+0x40e>
	else if (__tmp > 65535)
    6686:	11 e0       	ldi	r17, 0x01	; 1
    6688:	6f a5       	lds	r22, 0x6f
    668a:	78 a9       	sts	0x48, r23
    668c:	89 a9       	sts	0x49, r24
    668e:	9a a9       	sts	0x4a, r25
    6690:	20 e0       	ldi	r18, 0x00	; 0
    6692:	3f ef       	ldi	r19, 0xFF	; 255
    6694:	4f e7       	ldi	r20, 0x7F	; 127
    6696:	57 e4       	ldi	r21, 0x47	; 71
    6698:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    669c:	18 16       	cp	r1, r24
    669e:	0c f0       	brlt	.+2      	; 0x66a2 <front+0x39e>
    66a0:	10 e0       	ldi	r17, 0x00	; 0
    66a2:	11 23       	and	r17, r17
    66a4:	61 f1       	breq	.+88     	; 0x66fe <front+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a6:	6b a5       	lds	r22, 0x6b
    66a8:	7c a5       	lds	r23, 0x6c
    66aa:	8d a5       	lds	r24, 0x6d
    66ac:	9e a5       	lds	r25, 0x6e
    66ae:	20 e0       	ldi	r18, 0x00	; 0
    66b0:	30 e0       	ldi	r19, 0x00	; 0
    66b2:	40 e2       	ldi	r20, 0x20	; 32
    66b4:	51 e4       	ldi	r21, 0x41	; 65
    66b6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    66ba:	dc 01       	movw	r26, r24
    66bc:	cb 01       	movw	r24, r22
    66be:	bc 01       	movw	r22, r24
    66c0:	cd 01       	movw	r24, r26
    66c2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    66c6:	dc 01       	movw	r26, r24
    66c8:	cb 01       	movw	r24, r22
    66ca:	9c ab       	sts	0x5c, r25
    66cc:	8b ab       	sts	0x5b, r24
    66ce:	12 c0       	rjmp	.+36     	; 0x66f4 <front+0x3f0>
    66d0:	80 e7       	ldi	r24, 0x70	; 112
    66d2:	91 e0       	ldi	r25, 0x01	; 1
    66d4:	9e ab       	sts	0x5e, r25
    66d6:	8d ab       	sts	0x5d, r24
    66d8:	8d a9       	sts	0x4d, r24
    66da:	9e a9       	sts	0x4e, r25
    66dc:	8c 01       	movw	r16, r24
    66de:	c8 01       	movw	r24, r16
    66e0:	01 97       	sbiw	r24, 0x01	; 1
    66e2:	f1 f7       	brne	.-4      	; 0x66e0 <front+0x3dc>
    66e4:	8c 01       	movw	r16, r24
    66e6:	1e ab       	sts	0x5e, r17
    66e8:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ea:	8b a9       	sts	0x4b, r24
    66ec:	9c a9       	sts	0x4c, r25
    66ee:	01 97       	sbiw	r24, 0x01	; 1
    66f0:	9c ab       	sts	0x5c, r25
    66f2:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66f4:	8b a9       	sts	0x4b, r24
    66f6:	9c a9       	sts	0x4c, r25
    66f8:	00 97       	sbiw	r24, 0x00	; 0
    66fa:	51 f7       	brne	.-44     	; 0x66d0 <front+0x3cc>
    66fc:	17 c0       	rjmp	.+46     	; 0x672c <front+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66fe:	6f a5       	lds	r22, 0x6f
    6700:	78 a9       	sts	0x48, r23
    6702:	89 a9       	sts	0x49, r24
    6704:	9a a9       	sts	0x4a, r25
    6706:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    670a:	dc 01       	movw	r26, r24
    670c:	cb 01       	movw	r24, r22
    670e:	9c ab       	sts	0x5c, r25
    6710:	8b ab       	sts	0x5b, r24
    6712:	8b a9       	sts	0x4b, r24
    6714:	9c a9       	sts	0x4c, r25
    6716:	98 af       	sts	0x78, r25
    6718:	8f ab       	sts	0x5f, r24
    671a:	8f a9       	sts	0x4f, r24
    671c:	98 ad       	sts	0x68, r25
    671e:	8c 01       	movw	r16, r24
    6720:	c8 01       	movw	r24, r16
    6722:	01 97       	sbiw	r24, 0x01	; 1
    6724:	f1 f7       	brne	.-4      	; 0x6722 <front+0x41e>
    6726:	8c 01       	movw	r16, r24
    6728:	18 af       	sts	0x78, r17
    672a:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
    672c:	e8 96       	adiw	r28, 0x38	; 56
    672e:	0f b6       	in	r0, 0x3f	; 63
    6730:	f8 94       	cli
    6732:	de bf       	out	0x3e, r29	; 62
    6734:	0f be       	out	0x3f, r0	; 63
    6736:	cd bf       	out	0x3d, r28	; 61
    6738:	df 91       	pop	r29
    673a:	cf 91       	pop	r28
    673c:	1f 91       	pop	r17
    673e:	0f 91       	pop	r16
    6740:	08 95       	ret

00006742 <read_line>:

*/

void read_line()

{
    6742:	cf 93       	push	r28
    6744:	df 93       	push	r29
    6746:	cd b7       	in	r28, 0x3d	; 61
    6748:	de b7       	in	r29, 0x3e	; 62

    Left_white_line = (int) ADC_Conversion(3); //Getting data of Left WL Sensor
    674a:	83 e0       	ldi	r24, 0x03	; 3
    674c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    6750:	80 93 54 03 	sts	0x0354, r24

    Center_white_line = (int) ADC_Conversion(2); //Getting data of Center WL Sensor
    6754:	82 e0       	ldi	r24, 0x02	; 2
    6756:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    675a:	80 93 55 03 	sts	0x0355, r24

    Right_white_line = (int) ADC_Conversion(1); //Getting data of Right WL Sensor
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    6764:	80 93 56 03 	sts	0x0356, r24

}
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	08 95       	ret

0000676e <display_line>:

*/

void display_line()

 {
    676e:	cf 93       	push	r28
    6770:	df 93       	push	r29
    6772:	cd b7       	in	r28, 0x3d	; 61
    6774:	de b7       	in	r29, 0x3e	; 62

    lcd_print(1,1,Left_white_line,3);
    6776:	80 91 54 03 	lds	r24, 0x0354
    677a:	28 2f       	mov	r18, r24
    677c:	30 e0       	ldi	r19, 0x00	; 0
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	61 e0       	ldi	r22, 0x01	; 1
    6782:	a9 01       	movw	r20, r18
    6784:	23 e0       	ldi	r18, 0x03	; 3
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,5,Center_white_line,3);
    678c:	80 91 55 03 	lds	r24, 0x0355
    6790:	28 2f       	mov	r18, r24
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	65 e0       	ldi	r22, 0x05	; 5
    6798:	a9 01       	movw	r20, r18
    679a:	23 e0       	ldi	r18, 0x03	; 3
    679c:	30 e0       	ldi	r19, 0x00	; 0
    679e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,9,Right_white_line,3);
    67a2:	80 91 56 03 	lds	r24, 0x0356
    67a6:	28 2f       	mov	r18, r24
    67a8:	30 e0       	ldi	r19, 0x00	; 0
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	69 e0       	ldi	r22, 0x09	; 9
    67ae:	a9 01       	movw	r20, r18
    67b0:	23 e0       	ldi	r18, 0x03	; 3
    67b2:	30 e0       	ldi	r19, 0x00	; 0
    67b4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,1,line_cond,1);
    67b8:	80 91 5d 03 	lds	r24, 0x035D
    67bc:	90 91 5e 03 	lds	r25, 0x035E
    67c0:	9c 01       	movw	r18, r24
    67c2:	81 e0       	ldi	r24, 0x01	; 1
    67c4:	61 e0       	ldi	r22, 0x01	; 1
    67c6:	a9 01       	movw	r20, r18
    67c8:	21 e0       	ldi	r18, 0x01	; 1
    67ca:	30 e0       	ldi	r19, 0x00	; 0
    67cc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    67d0:	df 91       	pop	r29
    67d2:	cf 91       	pop	r28
    67d4:	08 95       	ret

000067d6 <clear_count>:

*/

void clear_count()

{
    67d6:	cf 93       	push	r28
    67d8:	df 93       	push	r29
    67da:	cd b7       	in	r28, 0x3d	; 61
    67dc:	de b7       	in	r29, 0x3e	; 62

    node = 0;
    67de:	10 92 72 03 	sts	0x0372, r1
    67e2:	10 92 71 03 	sts	0x0371, r1

    node_flag = 0;
    67e6:	10 92 92 04 	sts	0x0492, r1
    67ea:	10 92 91 04 	sts	0x0491, r1

    left_flag = 0;
    67ee:	10 92 64 03 	sts	0x0364, r1
    67f2:	10 92 63 03 	sts	0x0363, r1

    right_flag = 0;
    67f6:	10 92 66 03 	sts	0x0366, r1
    67fa:	10 92 65 03 	sts	0x0365, r1

}
    67fe:	df 91       	pop	r29
    6800:	cf 91       	pop	r28
    6802:	08 95       	ret

00006804 <enable_flags>:

*/

void enable_flags(int l_flag, int n_flag, int r_flag)

{
    6804:	cf 93       	push	r28
    6806:	df 93       	push	r29
    6808:	00 d0       	rcall	.+0      	; 0x680a <enable_flags+0x6>
    680a:	00 d0       	rcall	.+0      	; 0x680c <enable_flags+0x8>
    680c:	cd b7       	in	r28, 0x3d	; 61
    680e:	de b7       	in	r29, 0x3e	; 62
    6810:	9a 83       	std	Y+2, r25	; 0x02
    6812:	89 83       	std	Y+1, r24	; 0x01
    6814:	7c 83       	std	Y+4, r23	; 0x04
    6816:	6b 83       	std	Y+3, r22	; 0x03
    6818:	5e 83       	std	Y+6, r21	; 0x06
    681a:	4d 83       	std	Y+5, r20	; 0x05

    en_left = l_flag;
    681c:	89 81       	ldd	r24, Y+1	; 0x01
    681e:	9a 81       	ldd	r25, Y+2	; 0x02
    6820:	90 93 60 03 	sts	0x0360, r25
    6824:	80 93 5f 03 	sts	0x035F, r24

    en_right = r_flag;
    6828:	8d 81       	ldd	r24, Y+5	; 0x05
    682a:	9e 81       	ldd	r25, Y+6	; 0x06
    682c:	90 93 62 03 	sts	0x0362, r25
    6830:	80 93 61 03 	sts	0x0361, r24

    en_node = n_flag;
    6834:	8b 81       	ldd	r24, Y+3	; 0x03
    6836:	9c 81       	ldd	r25, Y+4	; 0x04
    6838:	90 93 01 02 	sts	0x0201, r25
    683c:	80 93 00 02 	sts	0x0200, r24

}
    6840:	26 96       	adiw	r28, 0x06	; 6
    6842:	0f b6       	in	r0, 0x3f	; 63
    6844:	f8 94       	cli
    6846:	de bf       	out	0x3e, r29	; 62
    6848:	0f be       	out	0x3f, r0	; 63
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	df 91       	pop	r29
    684e:	cf 91       	pop	r28
    6850:	08 95       	ret

00006852 <line_conditions>:


*/

void line_conditions()
{
    6852:	cf 93       	push	r28
    6854:	df 93       	push	r29
    6856:	cd b7       	in	r28, 0x3d	; 61
    6858:	de b7       	in	r29, 0x3e	; 62
	// Nodes Condition
	if (Center_white_line >= 115 || Left_white_line >= 120 || Right_white_line >= 115 || (Center_white_line >=120 && (Left_white_line >= 110 || Right_white_line >= 110))) // 1 1 1
    685a:	80 91 55 03 	lds	r24, 0x0355
    685e:	83 37       	cpi	r24, 0x73	; 115
    6860:	a0 f4       	brcc	.+40     	; 0x688a <line_conditions+0x38>
    6862:	80 91 54 03 	lds	r24, 0x0354
    6866:	88 37       	cpi	r24, 0x78	; 120
    6868:	80 f4       	brcc	.+32     	; 0x688a <line_conditions+0x38>
    686a:	80 91 56 03 	lds	r24, 0x0356
    686e:	83 37       	cpi	r24, 0x73	; 115
    6870:	60 f4       	brcc	.+24     	; 0x688a <line_conditions+0x38>
    6872:	80 91 55 03 	lds	r24, 0x0355
    6876:	88 37       	cpi	r24, 0x78	; 120
    6878:	a8 f0       	brcs	.+42     	; 0x68a4 <line_conditions+0x52>
    687a:	80 91 54 03 	lds	r24, 0x0354
    687e:	8e 36       	cpi	r24, 0x6E	; 110
    6880:	20 f4       	brcc	.+8      	; 0x688a <line_conditions+0x38>
    6882:	80 91 56 03 	lds	r24, 0x0356
    6886:	8e 36       	cpi	r24, 0x6E	; 110
    6888:	68 f0       	brcs	.+26     	; 0x68a4 <line_conditions+0x52>
	{
		line_cond = 1;
    688a:	81 e0       	ldi	r24, 0x01	; 1
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	90 93 5e 03 	sts	0x035E, r25
    6892:	80 93 5d 03 	sts	0x035D, r24
		node_flag = 1;
    6896:	81 e0       	ldi	r24, 0x01	; 1
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	90 93 92 04 	sts	0x0492, r25
    689e:	80 93 91 04 	sts	0x0491, r24
    68a2:	71 c0       	rjmp	.+226    	; 0x6986 <line_conditions+0x134>
	}
	
	//Straight Line Condition
	else if (Left_white_line < 11  && Center_white_line >= 14 && Right_white_line < 11) // 0 1 0
    68a4:	80 91 54 03 	lds	r24, 0x0354
    68a8:	8b 30       	cpi	r24, 0x0B	; 11
    68aa:	78 f4       	brcc	.+30     	; 0x68ca <line_conditions+0x78>
    68ac:	80 91 55 03 	lds	r24, 0x0355
    68b0:	8e 30       	cpi	r24, 0x0E	; 14
    68b2:	58 f0       	brcs	.+22     	; 0x68ca <line_conditions+0x78>
    68b4:	80 91 56 03 	lds	r24, 0x0356
    68b8:	8b 30       	cpi	r24, 0x0B	; 11
    68ba:	38 f4       	brcc	.+14     	; 0x68ca <line_conditions+0x78>
	{
		line_cond = 2;
    68bc:	82 e0       	ldi	r24, 0x02	; 2
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	90 93 5e 03 	sts	0x035E, r25
    68c4:	80 93 5d 03 	sts	0x035D, r24
    68c8:	5e c0       	rjmp	.+188    	; 0x6986 <line_conditions+0x134>
	}
	
	//Straight Line Condition (Robot moved slightly towards right)
	else if (Left_white_line > 20 && Center_white_line < 11 && Right_white_line < 11) // 1 0 0
    68ca:	80 91 54 03 	lds	r24, 0x0354
    68ce:	85 31       	cpi	r24, 0x15	; 21
    68d0:	78 f0       	brcs	.+30     	; 0x68f0 <line_conditions+0x9e>
    68d2:	80 91 55 03 	lds	r24, 0x0355
    68d6:	8b 30       	cpi	r24, 0x0B	; 11
    68d8:	58 f4       	brcc	.+22     	; 0x68f0 <line_conditions+0x9e>
    68da:	80 91 56 03 	lds	r24, 0x0356
    68de:	8b 30       	cpi	r24, 0x0B	; 11
    68e0:	38 f4       	brcc	.+14     	; 0x68f0 <line_conditions+0x9e>
	{
		line_cond = 3;
    68e2:	83 e0       	ldi	r24, 0x03	; 3
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	90 93 5e 03 	sts	0x035E, r25
    68ea:	80 93 5d 03 	sts	0x035D, r24
    68ee:	4b c0       	rjmp	.+150    	; 0x6986 <line_conditions+0x134>
	}

        else if (Left_white_line > 10 && Center_white_line > 10 && Right_white_line < 11) // 1 1 0
    68f0:	80 91 54 03 	lds	r24, 0x0354
    68f4:	8b 30       	cpi	r24, 0x0B	; 11
    68f6:	78 f0       	brcs	.+30     	; 0x6916 <line_conditions+0xc4>
    68f8:	80 91 55 03 	lds	r24, 0x0355
    68fc:	8b 30       	cpi	r24, 0x0B	; 11
    68fe:	58 f0       	brcs	.+22     	; 0x6916 <line_conditions+0xc4>
    6900:	80 91 56 03 	lds	r24, 0x0356
    6904:	8b 30       	cpi	r24, 0x0B	; 11
    6906:	38 f4       	brcc	.+14     	; 0x6916 <line_conditions+0xc4>
	{
		line_cond = 6;//slighty_L
    6908:	86 e0       	ldi	r24, 0x06	; 6
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	90 93 5e 03 	sts	0x035E, r25
    6910:	80 93 5d 03 	sts	0x035D, r24
    6914:	38 c0       	rjmp	.+112    	; 0x6986 <line_conditions+0x134>
	}

        
	//Straight Line Condition (Robot moved slightly towards left)
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line > 20) // 0 0 1
    6916:	80 91 54 03 	lds	r24, 0x0354
    691a:	8b 30       	cpi	r24, 0x0B	; 11
    691c:	78 f4       	brcc	.+30     	; 0x693c <line_conditions+0xea>
    691e:	80 91 55 03 	lds	r24, 0x0355
    6922:	8b 30       	cpi	r24, 0x0B	; 11
    6924:	58 f4       	brcc	.+22     	; 0x693c <line_conditions+0xea>
    6926:	80 91 56 03 	lds	r24, 0x0356
    692a:	85 31       	cpi	r24, 0x15	; 21
    692c:	38 f0       	brcs	.+14     	; 0x693c <line_conditions+0xea>
	{
		line_cond = 4;
    692e:	84 e0       	ldi	r24, 0x04	; 4
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	90 93 5e 03 	sts	0x035E, r25
    6936:	80 93 5d 03 	sts	0x035D, r24
    693a:	25 c0       	rjmp	.+74     	; 0x6986 <line_conditions+0x134>
	}

        else if (Left_white_line < 11 && Center_white_line > 11 && Right_white_line > 11) // 0 1 1
    693c:	80 91 54 03 	lds	r24, 0x0354
    6940:	8b 30       	cpi	r24, 0x0B	; 11
    6942:	78 f4       	brcc	.+30     	; 0x6962 <line_conditions+0x110>
    6944:	80 91 55 03 	lds	r24, 0x0355
    6948:	8c 30       	cpi	r24, 0x0C	; 12
    694a:	58 f0       	brcs	.+22     	; 0x6962 <line_conditions+0x110>
    694c:	80 91 56 03 	lds	r24, 0x0356
    6950:	8c 30       	cpi	r24, 0x0C	; 12
    6952:	38 f0       	brcs	.+14     	; 0x6962 <line_conditions+0x110>
	{
		line_cond = 7;//slighty_R
    6954:	87 e0       	ldi	r24, 0x07	; 7
    6956:	90 e0       	ldi	r25, 0x00	; 0
    6958:	90 93 5e 03 	sts	0x035E, r25
    695c:	80 93 5d 03 	sts	0x035D, r24
    6960:	12 c0       	rjmp	.+36     	; 0x6986 <line_conditions+0x134>
	}

	//No Line Condition
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line < 11) // 0 0 0
    6962:	80 91 54 03 	lds	r24, 0x0354
    6966:	8b 30       	cpi	r24, 0x0B	; 11
    6968:	70 f4       	brcc	.+28     	; 0x6986 <line_conditions+0x134>
    696a:	80 91 55 03 	lds	r24, 0x0355
    696e:	8b 30       	cpi	r24, 0x0B	; 11
    6970:	50 f4       	brcc	.+20     	; 0x6986 <line_conditions+0x134>
    6972:	80 91 56 03 	lds	r24, 0x0356
    6976:	8b 30       	cpi	r24, 0x0B	; 11
    6978:	30 f4       	brcc	.+12     	; 0x6986 <line_conditions+0x134>
	{
		line_cond = 5;
    697a:	85 e0       	ldi	r24, 0x05	; 5
    697c:	90 e0       	ldi	r25, 0x00	; 0
    697e:	90 93 5e 03 	sts	0x035E, r25
    6982:	80 93 5d 03 	sts	0x035D, r24
	}

}
    6986:	df 91       	pop	r29
    6988:	cf 91       	pop	r28
    698a:	08 95       	ret

0000698c <line_follow>:

*/

void line_follow() 

{
    698c:	0f 93       	push	r16
    698e:	1f 93       	push	r17
    6990:	cf 93       	push	r28
    6992:	df 93       	push	r29
    6994:	cd b7       	in	r28, 0x3d	; 61
    6996:	de b7       	in	r29, 0x3e	; 62
    6998:	e8 97       	sbiw	r28, 0x38	; 56
    699a:	0f b6       	in	r0, 0x3f	; 63
    699c:	f8 94       	cli
    699e:	de bf       	out	0x3e, r29	; 62
    69a0:	0f be       	out	0x3f, r0	; 63
    69a2:	cd bf       	out	0x3d, r28	; 61

    if (t4_flag == 1) 
    69a4:	80 91 59 03 	lds	r24, 0x0359
    69a8:	90 91 5a 03 	lds	r25, 0x035A
    69ac:	81 30       	cpi	r24, 0x01	; 1
    69ae:	91 05       	cpc	r25, r1
    69b0:	61 f4       	brne	.+24     	; 0x69ca <line_follow+0x3e>

	{

        node_flag = 0;
    69b2:	10 92 92 04 	sts	0x0492, r1
    69b6:	10 92 91 04 	sts	0x0491, r1

        left_flag = 0;
    69ba:	10 92 64 03 	sts	0x0364, r1
    69be:	10 92 63 03 	sts	0x0363, r1

        right_flag = 0;
    69c2:	10 92 66 03 	sts	0x0366, r1
    69c6:	10 92 65 03 	sts	0x0365, r1

    }



    if (node_flag == 1)
    69ca:	80 91 91 04 	lds	r24, 0x0491
    69ce:	90 91 92 04 	lds	r25, 0x0492
    69d2:	81 30       	cpi	r24, 0x01	; 1
    69d4:	91 05       	cpc	r25, r1
    69d6:	61 f5       	brne	.+88     	; 0x6a30 <line_follow+0xa4>

	 {

        start_timer4(10);
    69d8:	8a e0       	ldi	r24, 0x0A	; 10
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	0e 94 3d 1c 	call	0x387a	; 0x387a <start_timer4>

		buzz(50);
    69e0:	2f e0       	ldi	r18, 0x0F	; 15
    69e2:	37 e8       	ldi	r19, 0x87	; 135
    69e4:	82 e3       	ldi	r24, 0x32	; 50
    69e6:	90 e0       	ldi	r25, 0x00	; 0
    69e8:	f9 01       	movw	r30, r18
    69ea:	19 95       	eicall

		node++;		
    69ec:	80 91 71 03 	lds	r24, 0x0371
    69f0:	90 91 72 03 	lds	r25, 0x0372
    69f4:	01 96       	adiw	r24, 0x01	; 1
    69f6:	90 93 72 03 	sts	0x0372, r25
    69fa:	80 93 71 03 	sts	0x0371, r24

		forward();
    69fe:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

		velocity(255,255);
    6a02:	8f ef       	ldi	r24, 0xFF	; 255
    6a04:	6f ef       	ldi	r22, 0xFF	; 255
    6a06:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>

        node_flag = 0;
    6a0a:	10 92 92 04 	sts	0x0492, r1
    6a0e:	10 92 91 04 	sts	0x0491, r1

		travel_path(master_path[node]);
    6a12:	2f e3       	ldi	r18, 0x3F	; 63
    6a14:	3b e6       	ldi	r19, 0x6B	; 107
    6a16:	80 91 71 03 	lds	r24, 0x0371
    6a1a:	90 91 72 03 	lds	r25, 0x0372
    6a1e:	8b 58       	subi	r24, 0x8B	; 139
    6a20:	9c 4f       	sbci	r25, 0xFC	; 252
    6a22:	fc 01       	movw	r30, r24
    6a24:	80 81       	ld	r24, Z
    6a26:	88 2f       	mov	r24, r24
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	f9 01       	movw	r30, r18
    6a2c:	19 95       	eicall
    6a2e:	66 c2       	rjmp	.+1228   	; 0x6efc <line_follow+0x570>

	 }



    else if (line_cond == 2)
    6a30:	80 91 5d 03 	lds	r24, 0x035D
    6a34:	90 91 5e 03 	lds	r25, 0x035E
    6a38:	82 30       	cpi	r24, 0x02	; 2
    6a3a:	91 05       	cpc	r25, r1
    6a3c:	39 f4       	brne	.+14     	; 0x6a4c <line_follow+0xc0>

	{

        forward();
    6a3e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    6a42:	8f ef       	ldi	r24, 0xFF	; 255
    6a44:	6f ef       	ldi	r22, 0xFF	; 255
    6a46:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6a4a:	58 c2       	rjmp	.+1200   	; 0x6efc <line_follow+0x570>

    } 

	else if (line_cond == 3)
    6a4c:	80 91 5d 03 	lds	r24, 0x035D
    6a50:	90 91 5e 03 	lds	r25, 0x035E
    6a54:	83 30       	cpi	r24, 0x03	; 3
    6a56:	91 05       	cpc	r25, r1
    6a58:	09 f0       	breq	.+2      	; 0x6a5c <line_follow+0xd0>
    6a5a:	89 c0       	rjmp	.+274    	; 0x6b6e <line_follow+0x1e2>

	{

        stop();
    6a5c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6a60:	80 e0       	ldi	r24, 0x00	; 0
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	a0 e2       	ldi	r26, 0x20	; 32
    6a66:	b1 e4       	ldi	r27, 0x41	; 65
    6a68:	89 83       	std	Y+1, r24	; 0x01
    6a6a:	9a 83       	std	Y+2, r25	; 0x02
    6a6c:	ab 83       	std	Y+3, r26	; 0x03
    6a6e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6a70:	69 81       	ldd	r22, Y+1	; 0x01
    6a72:	7a 81       	ldd	r23, Y+2	; 0x02
    6a74:	8b 81       	ldd	r24, Y+3	; 0x03
    6a76:	9c 81       	ldd	r25, Y+4	; 0x04
    6a78:	26 e6       	ldi	r18, 0x66	; 102
    6a7a:	36 e6       	ldi	r19, 0x66	; 102
    6a7c:	46 e6       	ldi	r20, 0x66	; 102
    6a7e:	55 e4       	ldi	r21, 0x45	; 69
    6a80:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6a84:	dc 01       	movw	r26, r24
    6a86:	cb 01       	movw	r24, r22
    6a88:	8d 83       	std	Y+5, r24	; 0x05
    6a8a:	9e 83       	std	Y+6, r25	; 0x06
    6a8c:	af 83       	std	Y+7, r26	; 0x07
    6a8e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6a90:	11 e0       	ldi	r17, 0x01	; 1
    6a92:	6d 81       	ldd	r22, Y+5	; 0x05
    6a94:	7e 81       	ldd	r23, Y+6	; 0x06
    6a96:	8f 81       	ldd	r24, Y+7	; 0x07
    6a98:	98 85       	ldd	r25, Y+8	; 0x08
    6a9a:	20 e0       	ldi	r18, 0x00	; 0
    6a9c:	30 e0       	ldi	r19, 0x00	; 0
    6a9e:	40 e8       	ldi	r20, 0x80	; 128
    6aa0:	5f e3       	ldi	r21, 0x3F	; 63
    6aa2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6aa6:	88 23       	and	r24, r24
    6aa8:	0c f0       	brlt	.+2      	; 0x6aac <line_follow+0x120>
    6aaa:	10 e0       	ldi	r17, 0x00	; 0
    6aac:	11 23       	and	r17, r17
    6aae:	29 f0       	breq	.+10     	; 0x6aba <line_follow+0x12e>
		__ticks = 1;
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	9a 87       	std	Y+10, r25	; 0x0a
    6ab6:	89 87       	std	Y+9, r24	; 0x09
    6ab8:	46 c0       	rjmp	.+140    	; 0x6b46 <line_follow+0x1ba>
	else if (__tmp > 65535)
    6aba:	11 e0       	ldi	r17, 0x01	; 1
    6abc:	6d 81       	ldd	r22, Y+5	; 0x05
    6abe:	7e 81       	ldd	r23, Y+6	; 0x06
    6ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ac2:	98 85       	ldd	r25, Y+8	; 0x08
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	3f ef       	ldi	r19, 0xFF	; 255
    6ac8:	4f e7       	ldi	r20, 0x7F	; 127
    6aca:	57 e4       	ldi	r21, 0x47	; 71
    6acc:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6ad0:	18 16       	cp	r1, r24
    6ad2:	0c f0       	brlt	.+2      	; 0x6ad6 <line_follow+0x14a>
    6ad4:	10 e0       	ldi	r17, 0x00	; 0
    6ad6:	11 23       	and	r17, r17
    6ad8:	61 f1       	breq	.+88     	; 0x6b32 <line_follow+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ada:	69 81       	ldd	r22, Y+1	; 0x01
    6adc:	7a 81       	ldd	r23, Y+2	; 0x02
    6ade:	8b 81       	ldd	r24, Y+3	; 0x03
    6ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ae2:	20 e0       	ldi	r18, 0x00	; 0
    6ae4:	30 e0       	ldi	r19, 0x00	; 0
    6ae6:	40 e2       	ldi	r20, 0x20	; 32
    6ae8:	51 e4       	ldi	r21, 0x41	; 65
    6aea:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6aee:	dc 01       	movw	r26, r24
    6af0:	cb 01       	movw	r24, r22
    6af2:	bc 01       	movw	r22, r24
    6af4:	cd 01       	movw	r24, r26
    6af6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6afa:	dc 01       	movw	r26, r24
    6afc:	cb 01       	movw	r24, r22
    6afe:	9a 87       	std	Y+10, r25	; 0x0a
    6b00:	89 87       	std	Y+9, r24	; 0x09
    6b02:	12 c0       	rjmp	.+36     	; 0x6b28 <line_follow+0x19c>
    6b04:	80 e7       	ldi	r24, 0x70	; 112
    6b06:	91 e0       	ldi	r25, 0x01	; 1
    6b08:	9c 87       	std	Y+12, r25	; 0x0c
    6b0a:	8b 87       	std	Y+11, r24	; 0x0b
    6b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6b10:	8c 01       	movw	r16, r24
    6b12:	c8 01       	movw	r24, r16
    6b14:	01 97       	sbiw	r24, 0x01	; 1
    6b16:	f1 f7       	brne	.-4      	; 0x6b14 <line_follow+0x188>
    6b18:	8c 01       	movw	r16, r24
    6b1a:	1c 87       	std	Y+12, r17	; 0x0c
    6b1c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b1e:	89 85       	ldd	r24, Y+9	; 0x09
    6b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b22:	01 97       	sbiw	r24, 0x01	; 1
    6b24:	9a 87       	std	Y+10, r25	; 0x0a
    6b26:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b28:	89 85       	ldd	r24, Y+9	; 0x09
    6b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b2c:	00 97       	sbiw	r24, 0x00	; 0
    6b2e:	51 f7       	brne	.-44     	; 0x6b04 <line_follow+0x178>
    6b30:	17 c0       	rjmp	.+46     	; 0x6b60 <line_follow+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b32:	6d 81       	ldd	r22, Y+5	; 0x05
    6b34:	7e 81       	ldd	r23, Y+6	; 0x06
    6b36:	8f 81       	ldd	r24, Y+7	; 0x07
    6b38:	98 85       	ldd	r25, Y+8	; 0x08
    6b3a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6b3e:	dc 01       	movw	r26, r24
    6b40:	cb 01       	movw	r24, r22
    6b42:	9a 87       	std	Y+10, r25	; 0x0a
    6b44:	89 87       	std	Y+9, r24	; 0x09
    6b46:	89 85       	ldd	r24, Y+9	; 0x09
    6b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b4a:	9e 87       	std	Y+14, r25	; 0x0e
    6b4c:	8d 87       	std	Y+13, r24	; 0x0d
    6b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b52:	8c 01       	movw	r16, r24
    6b54:	f8 01       	movw	r30, r16
    6b56:	31 97       	sbiw	r30, 0x01	; 1
    6b58:	f1 f7       	brne	.-4      	; 0x6b56 <line_follow+0x1ca>
    6b5a:	8f 01       	movw	r16, r30
    6b5c:	1e 87       	std	Y+14, r17	; 0x0e
    6b5e:	0d 87       	std	Y+13, r16	; 0x0d

        _delay_ms(10);

        forward();
    6b60:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(180, 255);
    6b64:	84 eb       	ldi	r24, 0xB4	; 180
    6b66:	6f ef       	ldi	r22, 0xFF	; 255
    6b68:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6b6c:	c7 c1       	rjmp	.+910    	; 0x6efc <line_follow+0x570>

    } 

	else if (line_cond == 4)
    6b6e:	80 91 5d 03 	lds	r24, 0x035D
    6b72:	90 91 5e 03 	lds	r25, 0x035E
    6b76:	84 30       	cpi	r24, 0x04	; 4
    6b78:	91 05       	cpc	r25, r1
    6b7a:	09 f0       	breq	.+2      	; 0x6b7e <line_follow+0x1f2>
    6b7c:	89 c0       	rjmp	.+274    	; 0x6c90 <line_follow+0x304>

	{

        stop();
    6b7e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6b82:	80 e0       	ldi	r24, 0x00	; 0
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	a0 e2       	ldi	r26, 0x20	; 32
    6b88:	b1 e4       	ldi	r27, 0x41	; 65
    6b8a:	8f 87       	std	Y+15, r24	; 0x0f
    6b8c:	98 8b       	std	Y+16, r25	; 0x10
    6b8e:	a9 8b       	std	Y+17, r26	; 0x11
    6b90:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b92:	6f 85       	ldd	r22, Y+15	; 0x0f
    6b94:	78 89       	ldd	r23, Y+16	; 0x10
    6b96:	89 89       	ldd	r24, Y+17	; 0x11
    6b98:	9a 89       	ldd	r25, Y+18	; 0x12
    6b9a:	26 e6       	ldi	r18, 0x66	; 102
    6b9c:	36 e6       	ldi	r19, 0x66	; 102
    6b9e:	46 e6       	ldi	r20, 0x66	; 102
    6ba0:	55 e4       	ldi	r21, 0x45	; 69
    6ba2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	8b 8b       	std	Y+19, r24	; 0x13
    6bac:	9c 8b       	std	Y+20, r25	; 0x14
    6bae:	ad 8b       	std	Y+21, r26	; 0x15
    6bb0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6bb2:	11 e0       	ldi	r17, 0x01	; 1
    6bb4:	6b 89       	ldd	r22, Y+19	; 0x13
    6bb6:	7c 89       	ldd	r23, Y+20	; 0x14
    6bb8:	8d 89       	ldd	r24, Y+21	; 0x15
    6bba:	9e 89       	ldd	r25, Y+22	; 0x16
    6bbc:	20 e0       	ldi	r18, 0x00	; 0
    6bbe:	30 e0       	ldi	r19, 0x00	; 0
    6bc0:	40 e8       	ldi	r20, 0x80	; 128
    6bc2:	5f e3       	ldi	r21, 0x3F	; 63
    6bc4:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6bc8:	88 23       	and	r24, r24
    6bca:	0c f0       	brlt	.+2      	; 0x6bce <line_follow+0x242>
    6bcc:	10 e0       	ldi	r17, 0x00	; 0
    6bce:	11 23       	and	r17, r17
    6bd0:	29 f0       	breq	.+10     	; 0x6bdc <line_follow+0x250>
		__ticks = 1;
    6bd2:	81 e0       	ldi	r24, 0x01	; 1
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	98 8f       	std	Y+24, r25	; 0x18
    6bd8:	8f 8b       	std	Y+23, r24	; 0x17
    6bda:	46 c0       	rjmp	.+140    	; 0x6c68 <line_follow+0x2dc>
	else if (__tmp > 65535)
    6bdc:	11 e0       	ldi	r17, 0x01	; 1
    6bde:	6b 89       	ldd	r22, Y+19	; 0x13
    6be0:	7c 89       	ldd	r23, Y+20	; 0x14
    6be2:	8d 89       	ldd	r24, Y+21	; 0x15
    6be4:	9e 89       	ldd	r25, Y+22	; 0x16
    6be6:	20 e0       	ldi	r18, 0x00	; 0
    6be8:	3f ef       	ldi	r19, 0xFF	; 255
    6bea:	4f e7       	ldi	r20, 0x7F	; 127
    6bec:	57 e4       	ldi	r21, 0x47	; 71
    6bee:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6bf2:	18 16       	cp	r1, r24
    6bf4:	0c f0       	brlt	.+2      	; 0x6bf8 <line_follow+0x26c>
    6bf6:	10 e0       	ldi	r17, 0x00	; 0
    6bf8:	11 23       	and	r17, r17
    6bfa:	61 f1       	breq	.+88     	; 0x6c54 <line_follow+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bfc:	6f 85       	ldd	r22, Y+15	; 0x0f
    6bfe:	78 89       	ldd	r23, Y+16	; 0x10
    6c00:	89 89       	ldd	r24, Y+17	; 0x11
    6c02:	9a 89       	ldd	r25, Y+18	; 0x12
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	40 e2       	ldi	r20, 0x20	; 32
    6c0a:	51 e4       	ldi	r21, 0x41	; 65
    6c0c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6c10:	dc 01       	movw	r26, r24
    6c12:	cb 01       	movw	r24, r22
    6c14:	bc 01       	movw	r22, r24
    6c16:	cd 01       	movw	r24, r26
    6c18:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6c1c:	dc 01       	movw	r26, r24
    6c1e:	cb 01       	movw	r24, r22
    6c20:	98 8f       	std	Y+24, r25	; 0x18
    6c22:	8f 8b       	std	Y+23, r24	; 0x17
    6c24:	12 c0       	rjmp	.+36     	; 0x6c4a <line_follow+0x2be>
    6c26:	80 e7       	ldi	r24, 0x70	; 112
    6c28:	91 e0       	ldi	r25, 0x01	; 1
    6c2a:	9a 8f       	std	Y+26, r25	; 0x1a
    6c2c:	89 8f       	std	Y+25, r24	; 0x19
    6c2e:	89 8d       	ldd	r24, Y+25	; 0x19
    6c30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c32:	8c 01       	movw	r16, r24
    6c34:	c8 01       	movw	r24, r16
    6c36:	01 97       	sbiw	r24, 0x01	; 1
    6c38:	f1 f7       	brne	.-4      	; 0x6c36 <line_follow+0x2aa>
    6c3a:	8c 01       	movw	r16, r24
    6c3c:	1a 8f       	std	Y+26, r17	; 0x1a
    6c3e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c40:	8f 89       	ldd	r24, Y+23	; 0x17
    6c42:	98 8d       	ldd	r25, Y+24	; 0x18
    6c44:	01 97       	sbiw	r24, 0x01	; 1
    6c46:	98 8f       	std	Y+24, r25	; 0x18
    6c48:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    6c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    6c4e:	00 97       	sbiw	r24, 0x00	; 0
    6c50:	51 f7       	brne	.-44     	; 0x6c26 <line_follow+0x29a>
    6c52:	17 c0       	rjmp	.+46     	; 0x6c82 <line_follow+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c54:	6b 89       	ldd	r22, Y+19	; 0x13
    6c56:	7c 89       	ldd	r23, Y+20	; 0x14
    6c58:	8d 89       	ldd	r24, Y+21	; 0x15
    6c5a:	9e 89       	ldd	r25, Y+22	; 0x16
    6c5c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6c60:	dc 01       	movw	r26, r24
    6c62:	cb 01       	movw	r24, r22
    6c64:	98 8f       	std	Y+24, r25	; 0x18
    6c66:	8f 8b       	std	Y+23, r24	; 0x17
    6c68:	8f 89       	ldd	r24, Y+23	; 0x17
    6c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    6c6c:	9c 8f       	std	Y+28, r25	; 0x1c
    6c6e:	8b 8f       	std	Y+27, r24	; 0x1b
    6c70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c74:	8c 01       	movw	r16, r24
    6c76:	f8 01       	movw	r30, r16
    6c78:	31 97       	sbiw	r30, 0x01	; 1
    6c7a:	f1 f7       	brne	.-4      	; 0x6c78 <line_follow+0x2ec>
    6c7c:	8f 01       	movw	r16, r30
    6c7e:	1c 8f       	std	Y+28, r17	; 0x1c
    6c80:	0b 8f       	std	Y+27, r16	; 0x1b

        _delay_ms(10);

        forward();
    6c82:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 180);
    6c86:	8f ef       	ldi	r24, 0xFF	; 255
    6c88:	64 eb       	ldi	r22, 0xB4	; 180
    6c8a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6c8e:	36 c1       	rjmp	.+620    	; 0x6efc <line_follow+0x570>

    } 

	else if (line_cond == 5)
    6c90:	80 91 5d 03 	lds	r24, 0x035D
    6c94:	90 91 5e 03 	lds	r25, 0x035E
    6c98:	85 30       	cpi	r24, 0x05	; 5
    6c9a:	91 05       	cpc	r25, r1
    6c9c:	39 f4       	brne	.+14     	; 0x6cac <line_follow+0x320>

	{

        forward();
    6c9e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    6ca2:	8f ef       	ldi	r24, 0xFF	; 255
    6ca4:	6f ef       	ldi	r22, 0xFF	; 255
    6ca6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6caa:	28 c1       	rjmp	.+592    	; 0x6efc <line_follow+0x570>

        }

       else if (line_cond == 6)
    6cac:	80 91 5d 03 	lds	r24, 0x035D
    6cb0:	90 91 5e 03 	lds	r25, 0x035E
    6cb4:	86 30       	cpi	r24, 0x06	; 6
    6cb6:	91 05       	cpc	r25, r1
    6cb8:	09 f0       	breq	.+2      	; 0x6cbc <line_follow+0x330>
    6cba:	89 c0       	rjmp	.+274    	; 0x6dce <line_follow+0x442>

	{
        stop();_delay_ms(10);
    6cbc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6cc0:	80 e0       	ldi	r24, 0x00	; 0
    6cc2:	90 e0       	ldi	r25, 0x00	; 0
    6cc4:	a0 e2       	ldi	r26, 0x20	; 32
    6cc6:	b1 e4       	ldi	r27, 0x41	; 65
    6cc8:	8d 8f       	std	Y+29, r24	; 0x1d
    6cca:	9e 8f       	std	Y+30, r25	; 0x1e
    6ccc:	af 8f       	std	Y+31, r26	; 0x1f
    6cce:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6cd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6cd2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6cd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6cd6:	98 a1       	lds	r25, 0x48
    6cd8:	26 e6       	ldi	r18, 0x66	; 102
    6cda:	36 e6       	ldi	r19, 0x66	; 102
    6cdc:	46 e6       	ldi	r20, 0x66	; 102
    6cde:	55 e4       	ldi	r21, 0x45	; 69
    6ce0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6ce4:	dc 01       	movw	r26, r24
    6ce6:	cb 01       	movw	r24, r22
    6ce8:	89 a3       	lds	r24, 0x59
    6cea:	9a a3       	lds	r25, 0x5a
    6cec:	ab a3       	lds	r26, 0x5b
    6cee:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6cf0:	11 e0       	ldi	r17, 0x01	; 1
    6cf2:	69 a1       	lds	r22, 0x49
    6cf4:	7a a1       	lds	r23, 0x4a
    6cf6:	8b a1       	lds	r24, 0x4b
    6cf8:	9c a1       	lds	r25, 0x4c
    6cfa:	20 e0       	ldi	r18, 0x00	; 0
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	40 e8       	ldi	r20, 0x80	; 128
    6d00:	5f e3       	ldi	r21, 0x3F	; 63
    6d02:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6d06:	88 23       	and	r24, r24
    6d08:	0c f0       	brlt	.+2      	; 0x6d0c <line_follow+0x380>
    6d0a:	10 e0       	ldi	r17, 0x00	; 0
    6d0c:	11 23       	and	r17, r17
    6d0e:	29 f0       	breq	.+10     	; 0x6d1a <line_follow+0x38e>
		__ticks = 1;
    6d10:	81 e0       	ldi	r24, 0x01	; 1
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	9e a3       	lds	r25, 0x5e
    6d16:	8d a3       	lds	r24, 0x5d
    6d18:	46 c0       	rjmp	.+140    	; 0x6da6 <line_follow+0x41a>
	else if (__tmp > 65535)
    6d1a:	11 e0       	ldi	r17, 0x01	; 1
    6d1c:	69 a1       	lds	r22, 0x49
    6d1e:	7a a1       	lds	r23, 0x4a
    6d20:	8b a1       	lds	r24, 0x4b
    6d22:	9c a1       	lds	r25, 0x4c
    6d24:	20 e0       	ldi	r18, 0x00	; 0
    6d26:	3f ef       	ldi	r19, 0xFF	; 255
    6d28:	4f e7       	ldi	r20, 0x7F	; 127
    6d2a:	57 e4       	ldi	r21, 0x47	; 71
    6d2c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6d30:	18 16       	cp	r1, r24
    6d32:	0c f0       	brlt	.+2      	; 0x6d36 <line_follow+0x3aa>
    6d34:	10 e0       	ldi	r17, 0x00	; 0
    6d36:	11 23       	and	r17, r17
    6d38:	61 f1       	breq	.+88     	; 0x6d92 <line_follow+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d3a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6d3c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6d3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6d40:	98 a1       	lds	r25, 0x48
    6d42:	20 e0       	ldi	r18, 0x00	; 0
    6d44:	30 e0       	ldi	r19, 0x00	; 0
    6d46:	40 e2       	ldi	r20, 0x20	; 32
    6d48:	51 e4       	ldi	r21, 0x41	; 65
    6d4a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6d4e:	dc 01       	movw	r26, r24
    6d50:	cb 01       	movw	r24, r22
    6d52:	bc 01       	movw	r22, r24
    6d54:	cd 01       	movw	r24, r26
    6d56:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6d5a:	dc 01       	movw	r26, r24
    6d5c:	cb 01       	movw	r24, r22
    6d5e:	9e a3       	lds	r25, 0x5e
    6d60:	8d a3       	lds	r24, 0x5d
    6d62:	12 c0       	rjmp	.+36     	; 0x6d88 <line_follow+0x3fc>
    6d64:	80 e7       	ldi	r24, 0x70	; 112
    6d66:	91 e0       	ldi	r25, 0x01	; 1
    6d68:	98 a7       	lds	r25, 0x78
    6d6a:	8f a3       	lds	r24, 0x5f
    6d6c:	8f a1       	lds	r24, 0x4f
    6d6e:	98 a5       	lds	r25, 0x68
    6d70:	8c 01       	movw	r16, r24
    6d72:	c8 01       	movw	r24, r16
    6d74:	01 97       	sbiw	r24, 0x01	; 1
    6d76:	f1 f7       	brne	.-4      	; 0x6d74 <line_follow+0x3e8>
    6d78:	8c 01       	movw	r16, r24
    6d7a:	18 a7       	lds	r17, 0x78
    6d7c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d7e:	8d a1       	lds	r24, 0x4d
    6d80:	9e a1       	lds	r25, 0x4e
    6d82:	01 97       	sbiw	r24, 0x01	; 1
    6d84:	9e a3       	lds	r25, 0x5e
    6d86:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d88:	8d a1       	lds	r24, 0x4d
    6d8a:	9e a1       	lds	r25, 0x4e
    6d8c:	00 97       	sbiw	r24, 0x00	; 0
    6d8e:	51 f7       	brne	.-44     	; 0x6d64 <line_follow+0x3d8>
    6d90:	17 c0       	rjmp	.+46     	; 0x6dc0 <line_follow+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d92:	69 a1       	lds	r22, 0x49
    6d94:	7a a1       	lds	r23, 0x4a
    6d96:	8b a1       	lds	r24, 0x4b
    6d98:	9c a1       	lds	r25, 0x4c
    6d9a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6d9e:	dc 01       	movw	r26, r24
    6da0:	cb 01       	movw	r24, r22
    6da2:	9e a3       	lds	r25, 0x5e
    6da4:	8d a3       	lds	r24, 0x5d
    6da6:	8d a1       	lds	r24, 0x4d
    6da8:	9e a1       	lds	r25, 0x4e
    6daa:	9a a7       	lds	r25, 0x7a
    6dac:	89 a7       	lds	r24, 0x79
    6dae:	89 a5       	lds	r24, 0x69
    6db0:	9a a5       	lds	r25, 0x6a
    6db2:	8c 01       	movw	r16, r24
    6db4:	f8 01       	movw	r30, r16
    6db6:	31 97       	sbiw	r30, 0x01	; 1
    6db8:	f1 f7       	brne	.-4      	; 0x6db6 <line_follow+0x42a>
    6dba:	8f 01       	movw	r16, r30
    6dbc:	1a a7       	lds	r17, 0x7a
    6dbe:	09 a7       	lds	r16, 0x79

        forward();
    6dc0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(250, 255);
    6dc4:	8a ef       	ldi	r24, 0xFA	; 250
    6dc6:	6f ef       	ldi	r22, 0xFF	; 255
    6dc8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6dcc:	97 c0       	rjmp	.+302    	; 0x6efc <line_follow+0x570>

        }

        else if (line_cond == 7)
    6dce:	80 91 5d 03 	lds	r24, 0x035D
    6dd2:	90 91 5e 03 	lds	r25, 0x035E
    6dd6:	87 30       	cpi	r24, 0x07	; 7
    6dd8:	91 05       	cpc	r25, r1
    6dda:	09 f0       	breq	.+2      	; 0x6dde <line_follow+0x452>
    6ddc:	89 c0       	rjmp	.+274    	; 0x6ef0 <line_follow+0x564>

	{
        stop();
    6dde:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6de2:	80 e0       	ldi	r24, 0x00	; 0
    6de4:	90 e0       	ldi	r25, 0x00	; 0
    6de6:	a0 e2       	ldi	r26, 0x20	; 32
    6de8:	b1 e4       	ldi	r27, 0x41	; 65
    6dea:	8b a7       	lds	r24, 0x7b
    6dec:	9c a7       	lds	r25, 0x7c
    6dee:	ad a7       	lds	r26, 0x7d
    6df0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6df2:	6b a5       	lds	r22, 0x6b
    6df4:	7c a5       	lds	r23, 0x6c
    6df6:	8d a5       	lds	r24, 0x6d
    6df8:	9e a5       	lds	r25, 0x6e
    6dfa:	26 e6       	ldi	r18, 0x66	; 102
    6dfc:	36 e6       	ldi	r19, 0x66	; 102
    6dfe:	46 e6       	ldi	r20, 0x66	; 102
    6e00:	55 e4       	ldi	r21, 0x45	; 69
    6e02:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6e06:	dc 01       	movw	r26, r24
    6e08:	cb 01       	movw	r24, r22
    6e0a:	8f a7       	lds	r24, 0x7f
    6e0c:	98 ab       	sts	0x58, r25
    6e0e:	a9 ab       	sts	0x59, r26
    6e10:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    6e12:	11 e0       	ldi	r17, 0x01	; 1
    6e14:	6f a5       	lds	r22, 0x6f
    6e16:	78 a9       	sts	0x48, r23
    6e18:	89 a9       	sts	0x49, r24
    6e1a:	9a a9       	sts	0x4a, r25
    6e1c:	20 e0       	ldi	r18, 0x00	; 0
    6e1e:	30 e0       	ldi	r19, 0x00	; 0
    6e20:	40 e8       	ldi	r20, 0x80	; 128
    6e22:	5f e3       	ldi	r21, 0x3F	; 63
    6e24:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6e28:	88 23       	and	r24, r24
    6e2a:	0c f0       	brlt	.+2      	; 0x6e2e <line_follow+0x4a2>
    6e2c:	10 e0       	ldi	r17, 0x00	; 0
    6e2e:	11 23       	and	r17, r17
    6e30:	29 f0       	breq	.+10     	; 0x6e3c <line_follow+0x4b0>
		__ticks = 1;
    6e32:	81 e0       	ldi	r24, 0x01	; 1
    6e34:	90 e0       	ldi	r25, 0x00	; 0
    6e36:	9c ab       	sts	0x5c, r25
    6e38:	8b ab       	sts	0x5b, r24
    6e3a:	46 c0       	rjmp	.+140    	; 0x6ec8 <line_follow+0x53c>
	else if (__tmp > 65535)
    6e3c:	11 e0       	ldi	r17, 0x01	; 1
    6e3e:	6f a5       	lds	r22, 0x6f
    6e40:	78 a9       	sts	0x48, r23
    6e42:	89 a9       	sts	0x49, r24
    6e44:	9a a9       	sts	0x4a, r25
    6e46:	20 e0       	ldi	r18, 0x00	; 0
    6e48:	3f ef       	ldi	r19, 0xFF	; 255
    6e4a:	4f e7       	ldi	r20, 0x7F	; 127
    6e4c:	57 e4       	ldi	r21, 0x47	; 71
    6e4e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6e52:	18 16       	cp	r1, r24
    6e54:	0c f0       	brlt	.+2      	; 0x6e58 <line_follow+0x4cc>
    6e56:	10 e0       	ldi	r17, 0x00	; 0
    6e58:	11 23       	and	r17, r17
    6e5a:	61 f1       	breq	.+88     	; 0x6eb4 <line_follow+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e5c:	6b a5       	lds	r22, 0x6b
    6e5e:	7c a5       	lds	r23, 0x6c
    6e60:	8d a5       	lds	r24, 0x6d
    6e62:	9e a5       	lds	r25, 0x6e
    6e64:	20 e0       	ldi	r18, 0x00	; 0
    6e66:	30 e0       	ldi	r19, 0x00	; 0
    6e68:	40 e2       	ldi	r20, 0x20	; 32
    6e6a:	51 e4       	ldi	r21, 0x41	; 65
    6e6c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6e70:	dc 01       	movw	r26, r24
    6e72:	cb 01       	movw	r24, r22
    6e74:	bc 01       	movw	r22, r24
    6e76:	cd 01       	movw	r24, r26
    6e78:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6e7c:	dc 01       	movw	r26, r24
    6e7e:	cb 01       	movw	r24, r22
    6e80:	9c ab       	sts	0x5c, r25
    6e82:	8b ab       	sts	0x5b, r24
    6e84:	12 c0       	rjmp	.+36     	; 0x6eaa <line_follow+0x51e>
    6e86:	80 e7       	ldi	r24, 0x70	; 112
    6e88:	91 e0       	ldi	r25, 0x01	; 1
    6e8a:	9e ab       	sts	0x5e, r25
    6e8c:	8d ab       	sts	0x5d, r24
    6e8e:	8d a9       	sts	0x4d, r24
    6e90:	9e a9       	sts	0x4e, r25
    6e92:	8c 01       	movw	r16, r24
    6e94:	c8 01       	movw	r24, r16
    6e96:	01 97       	sbiw	r24, 0x01	; 1
    6e98:	f1 f7       	brne	.-4      	; 0x6e96 <line_follow+0x50a>
    6e9a:	8c 01       	movw	r16, r24
    6e9c:	1e ab       	sts	0x5e, r17
    6e9e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ea0:	8b a9       	sts	0x4b, r24
    6ea2:	9c a9       	sts	0x4c, r25
    6ea4:	01 97       	sbiw	r24, 0x01	; 1
    6ea6:	9c ab       	sts	0x5c, r25
    6ea8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6eaa:	8b a9       	sts	0x4b, r24
    6eac:	9c a9       	sts	0x4c, r25
    6eae:	00 97       	sbiw	r24, 0x00	; 0
    6eb0:	51 f7       	brne	.-44     	; 0x6e86 <line_follow+0x4fa>
    6eb2:	17 c0       	rjmp	.+46     	; 0x6ee2 <line_follow+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6eb4:	6f a5       	lds	r22, 0x6f
    6eb6:	78 a9       	sts	0x48, r23
    6eb8:	89 a9       	sts	0x49, r24
    6eba:	9a a9       	sts	0x4a, r25
    6ebc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6ec0:	dc 01       	movw	r26, r24
    6ec2:	cb 01       	movw	r24, r22
    6ec4:	9c ab       	sts	0x5c, r25
    6ec6:	8b ab       	sts	0x5b, r24
    6ec8:	8b a9       	sts	0x4b, r24
    6eca:	9c a9       	sts	0x4c, r25
    6ecc:	98 af       	sts	0x78, r25
    6ece:	8f ab       	sts	0x5f, r24
    6ed0:	8f a9       	sts	0x4f, r24
    6ed2:	98 ad       	sts	0x68, r25
    6ed4:	8c 01       	movw	r16, r24
    6ed6:	f8 01       	movw	r30, r16
    6ed8:	31 97       	sbiw	r30, 0x01	; 1
    6eda:	f1 f7       	brne	.-4      	; 0x6ed8 <line_follow+0x54c>
    6edc:	8f 01       	movw	r16, r30
    6ede:	18 af       	sts	0x78, r17
    6ee0:	0f ab       	sts	0x5f, r16
		_delay_ms(10);

        forward();
    6ee2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 250);
    6ee6:	8f ef       	ldi	r24, 0xFF	; 255
    6ee8:	6a ef       	ldi	r22, 0xFA	; 250
    6eea:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6eee:	06 c0       	rjmp	.+12     	; 0x6efc <line_follow+0x570>

        }
	else
	{
		forward();
    6ef0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
		velocity(254,255);
    6ef4:	8e ef       	ldi	r24, 0xFE	; 254
    6ef6:	6f ef       	ldi	r22, 0xFF	; 255
    6ef8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
	}
}
    6efc:	e8 96       	adiw	r28, 0x38	; 56
    6efe:	0f b6       	in	r0, 0x3f	; 63
    6f00:	f8 94       	cli
    6f02:	de bf       	out	0x3e, r29	; 62
    6f04:	0f be       	out	0x3f, r0	; 63
    6f06:	cd bf       	out	0x3d, r28	; 61
    6f08:	df 91       	pop	r29
    6f0a:	cf 91       	pop	r28
    6f0c:	1f 91       	pop	r17
    6f0e:	0f 91       	pop	r16
    6f10:	08 95       	ret

00006f12 <pick_drop>:


void pick_drop(char pd)
{
    6f12:	0f 93       	push	r16
    6f14:	1f 93       	push	r17
    6f16:	cf 93       	push	r28
    6f18:	df 93       	push	r29
    6f1a:	cd b7       	in	r28, 0x3d	; 61
    6f1c:	de b7       	in	r29, 0x3e	; 62
    6f1e:	c7 56       	subi	r28, 0x67	; 103
    6f20:	d3 40       	sbci	r29, 0x03	; 3
    6f22:	0f b6       	in	r0, 0x3f	; 63
    6f24:	f8 94       	cli
    6f26:	de bf       	out	0x3e, r29	; 62
    6f28:	0f be       	out	0x3f, r0	; 63
    6f2a:	cd bf       	out	0x3d, r28	; 61
    6f2c:	9e 01       	movw	r18, r28
    6f2e:	29 59       	subi	r18, 0x99	; 153
    6f30:	3c 4f       	sbci	r19, 0xFC	; 252
    6f32:	f9 01       	movw	r30, r18
    6f34:	80 83       	st	Z, r24
	int pdback=125;
    6f36:	8d e7       	ldi	r24, 0x7D	; 125
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	9a 83       	std	Y+2, r25	; 0x02
    6f3c:	89 83       	std	Y+1, r24	; 0x01
	defaulty();
    6f3e:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <defaulty>
	stop();
    6f42:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6f46:	80 e0       	ldi	r24, 0x00	; 0
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	a0 ea       	ldi	r26, 0xA0	; 160
    6f4c:	b1 e4       	ldi	r27, 0x41	; 65
    6f4e:	8b 83       	std	Y+3, r24	; 0x03
    6f50:	9c 83       	std	Y+4, r25	; 0x04
    6f52:	ad 83       	std	Y+5, r26	; 0x05
    6f54:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6f56:	6b 81       	ldd	r22, Y+3	; 0x03
    6f58:	7c 81       	ldd	r23, Y+4	; 0x04
    6f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    6f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    6f5e:	26 e6       	ldi	r18, 0x66	; 102
    6f60:	36 e6       	ldi	r19, 0x66	; 102
    6f62:	46 e6       	ldi	r20, 0x66	; 102
    6f64:	55 e4       	ldi	r21, 0x45	; 69
    6f66:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6f6a:	dc 01       	movw	r26, r24
    6f6c:	cb 01       	movw	r24, r22
    6f6e:	8f 83       	std	Y+7, r24	; 0x07
    6f70:	98 87       	std	Y+8, r25	; 0x08
    6f72:	a9 87       	std	Y+9, r26	; 0x09
    6f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f76:	11 e0       	ldi	r17, 0x01	; 1
    6f78:	6f 81       	ldd	r22, Y+7	; 0x07
    6f7a:	78 85       	ldd	r23, Y+8	; 0x08
    6f7c:	89 85       	ldd	r24, Y+9	; 0x09
    6f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f80:	20 e0       	ldi	r18, 0x00	; 0
    6f82:	30 e0       	ldi	r19, 0x00	; 0
    6f84:	40 e8       	ldi	r20, 0x80	; 128
    6f86:	5f e3       	ldi	r21, 0x3F	; 63
    6f88:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    6f8c:	88 23       	and	r24, r24
    6f8e:	0c f0       	brlt	.+2      	; 0x6f92 <pick_drop+0x80>
    6f90:	10 e0       	ldi	r17, 0x00	; 0
    6f92:	11 23       	and	r17, r17
    6f94:	29 f0       	breq	.+10     	; 0x6fa0 <pick_drop+0x8e>
		__ticks = 1;
    6f96:	81 e0       	ldi	r24, 0x01	; 1
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	9c 87       	std	Y+12, r25	; 0x0c
    6f9c:	8b 87       	std	Y+11, r24	; 0x0b
    6f9e:	46 c0       	rjmp	.+140    	; 0x702c <pick_drop+0x11a>
	else if (__tmp > 65535)
    6fa0:	11 e0       	ldi	r17, 0x01	; 1
    6fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    6fa4:	78 85       	ldd	r23, Y+8	; 0x08
    6fa6:	89 85       	ldd	r24, Y+9	; 0x09
    6fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6faa:	20 e0       	ldi	r18, 0x00	; 0
    6fac:	3f ef       	ldi	r19, 0xFF	; 255
    6fae:	4f e7       	ldi	r20, 0x7F	; 127
    6fb0:	57 e4       	ldi	r21, 0x47	; 71
    6fb2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    6fb6:	18 16       	cp	r1, r24
    6fb8:	0c f0       	brlt	.+2      	; 0x6fbc <pick_drop+0xaa>
    6fba:	10 e0       	ldi	r17, 0x00	; 0
    6fbc:	11 23       	and	r17, r17
    6fbe:	61 f1       	breq	.+88     	; 0x7018 <pick_drop+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fc0:	6b 81       	ldd	r22, Y+3	; 0x03
    6fc2:	7c 81       	ldd	r23, Y+4	; 0x04
    6fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    6fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    6fc8:	20 e0       	ldi	r18, 0x00	; 0
    6fca:	30 e0       	ldi	r19, 0x00	; 0
    6fcc:	40 e2       	ldi	r20, 0x20	; 32
    6fce:	51 e4       	ldi	r21, 0x41	; 65
    6fd0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    6fd4:	dc 01       	movw	r26, r24
    6fd6:	cb 01       	movw	r24, r22
    6fd8:	bc 01       	movw	r22, r24
    6fda:	cd 01       	movw	r24, r26
    6fdc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    6fe0:	dc 01       	movw	r26, r24
    6fe2:	cb 01       	movw	r24, r22
    6fe4:	9c 87       	std	Y+12, r25	; 0x0c
    6fe6:	8b 87       	std	Y+11, r24	; 0x0b
    6fe8:	12 c0       	rjmp	.+36     	; 0x700e <pick_drop+0xfc>
    6fea:	80 e7       	ldi	r24, 0x70	; 112
    6fec:	91 e0       	ldi	r25, 0x01	; 1
    6fee:	9e 87       	std	Y+14, r25	; 0x0e
    6ff0:	8d 87       	std	Y+13, r24	; 0x0d
    6ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ff6:	8c 01       	movw	r16, r24
    6ff8:	c8 01       	movw	r24, r16
    6ffa:	01 97       	sbiw	r24, 0x01	; 1
    6ffc:	f1 f7       	brne	.-4      	; 0x6ffa <pick_drop+0xe8>
    6ffe:	8c 01       	movw	r16, r24
    7000:	1e 87       	std	Y+14, r17	; 0x0e
    7002:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7004:	8b 85       	ldd	r24, Y+11	; 0x0b
    7006:	9c 85       	ldd	r25, Y+12	; 0x0c
    7008:	01 97       	sbiw	r24, 0x01	; 1
    700a:	9c 87       	std	Y+12, r25	; 0x0c
    700c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    700e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7010:	9c 85       	ldd	r25, Y+12	; 0x0c
    7012:	00 97       	sbiw	r24, 0x00	; 0
    7014:	51 f7       	brne	.-44     	; 0x6fea <pick_drop+0xd8>
    7016:	17 c0       	rjmp	.+46     	; 0x7046 <pick_drop+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7018:	6f 81       	ldd	r22, Y+7	; 0x07
    701a:	78 85       	ldd	r23, Y+8	; 0x08
    701c:	89 85       	ldd	r24, Y+9	; 0x09
    701e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7020:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7024:	dc 01       	movw	r26, r24
    7026:	cb 01       	movw	r24, r22
    7028:	9c 87       	std	Y+12, r25	; 0x0c
    702a:	8b 87       	std	Y+11, r24	; 0x0b
    702c:	8b 85       	ldd	r24, Y+11	; 0x0b
    702e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7030:	98 8b       	std	Y+16, r25	; 0x10
    7032:	8f 87       	std	Y+15, r24	; 0x0f
    7034:	8f 85       	ldd	r24, Y+15	; 0x0f
    7036:	98 89       	ldd	r25, Y+16	; 0x10
    7038:	8c 01       	movw	r16, r24
    703a:	f8 01       	movw	r30, r16
    703c:	31 97       	sbiw	r30, 0x01	; 1
    703e:	f1 f7       	brne	.-4      	; 0x703c <pick_drop+0x12a>
    7040:	8f 01       	movw	r16, r30
    7042:	18 8b       	std	Y+16, r17	; 0x10
    7044:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(20);
	if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    7046:	80 91 71 03 	lds	r24, 0x0371
    704a:	90 91 72 03 	lds	r25, 0x0372
    704e:	01 97       	sbiw	r24, 0x01	; 1
    7050:	8b 58       	subi	r24, 0x8B	; 139
    7052:	9c 4f       	sbci	r25, 0xFC	; 252
    7054:	fc 01       	movw	r30, r24
    7056:	80 81       	ld	r24, Z
    7058:	8c 34       	cpi	r24, 0x4C	; 76
    705a:	b9 f0       	breq	.+46     	; 0x708a <pick_drop+0x178>
    705c:	80 91 71 03 	lds	r24, 0x0371
    7060:	90 91 72 03 	lds	r25, 0x0372
    7064:	01 97       	sbiw	r24, 0x01	; 1
    7066:	8b 58       	subi	r24, 0x8B	; 139
    7068:	9c 4f       	sbci	r25, 0xFC	; 252
    706a:	fc 01       	movw	r30, r24
    706c:	80 81       	ld	r24, Z
    706e:	82 35       	cpi	r24, 0x52	; 82
    7070:	61 f0       	breq	.+24     	; 0x708a <pick_drop+0x178>
    7072:	80 91 71 03 	lds	r24, 0x0371
    7076:	90 91 72 03 	lds	r25, 0x0372
    707a:	01 97       	sbiw	r24, 0x01	; 1
    707c:	8b 58       	subi	r24, 0x8B	; 139
    707e:	9c 4f       	sbci	r25, 0xFC	; 252
    7080:	fc 01       	movw	r30, r24
    7082:	80 81       	ld	r24, Z
    7084:	85 35       	cpi	r24, 0x55	; 85
    7086:	09 f0       	breq	.+2      	; 0x708a <pick_drop+0x178>
    7088:	93 c0       	rjmp	.+294    	; 0x71b0 <pick_drop+0x29e>
	{
	if(pd=='7'||pd=='6')
    708a:	ce 01       	movw	r24, r28
    708c:	89 59       	subi	r24, 0x99	; 153
    708e:	9c 4f       	sbci	r25, 0xFC	; 252
    7090:	fc 01       	movw	r30, r24
    7092:	80 81       	ld	r24, Z
    7094:	87 33       	cpi	r24, 0x37	; 55
    7096:	41 f0       	breq	.+16     	; 0x70a8 <pick_drop+0x196>
    7098:	ce 01       	movw	r24, r28
    709a:	89 59       	subi	r24, 0x99	; 153
    709c:	9c 4f       	sbci	r25, 0xFC	; 252
    709e:	fc 01       	movw	r30, r24
    70a0:	80 81       	ld	r24, Z
    70a2:	86 33       	cpi	r24, 0x36	; 54
    70a4:	09 f0       	breq	.+2      	; 0x70a8 <pick_drop+0x196>
    70a6:	84 c0       	rjmp	.+264    	; 0x71b0 <pick_drop+0x29e>
	{
		back_mm(30);//mod
    70a8:	8e e1       	ldi	r24, 0x1E	; 30
    70aa:	90 e0       	ldi	r25, 0x00	; 0
    70ac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    70b0:	80 e0       	ldi	r24, 0x00	; 0
    70b2:	90 e0       	ldi	r25, 0x00	; 0
    70b4:	a0 ea       	ldi	r26, 0xA0	; 160
    70b6:	b1 e4       	ldi	r27, 0x41	; 65
    70b8:	89 8b       	std	Y+17, r24	; 0x11
    70ba:	9a 8b       	std	Y+18, r25	; 0x12
    70bc:	ab 8b       	std	Y+19, r26	; 0x13
    70be:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    70c0:	69 89       	ldd	r22, Y+17	; 0x11
    70c2:	7a 89       	ldd	r23, Y+18	; 0x12
    70c4:	8b 89       	ldd	r24, Y+19	; 0x13
    70c6:	9c 89       	ldd	r25, Y+20	; 0x14
    70c8:	26 e6       	ldi	r18, 0x66	; 102
    70ca:	36 e6       	ldi	r19, 0x66	; 102
    70cc:	46 e6       	ldi	r20, 0x66	; 102
    70ce:	55 e4       	ldi	r21, 0x45	; 69
    70d0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    70d4:	dc 01       	movw	r26, r24
    70d6:	cb 01       	movw	r24, r22
    70d8:	8d 8b       	std	Y+21, r24	; 0x15
    70da:	9e 8b       	std	Y+22, r25	; 0x16
    70dc:	af 8b       	std	Y+23, r26	; 0x17
    70de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    70e0:	11 e0       	ldi	r17, 0x01	; 1
    70e2:	6d 89       	ldd	r22, Y+21	; 0x15
    70e4:	7e 89       	ldd	r23, Y+22	; 0x16
    70e6:	8f 89       	ldd	r24, Y+23	; 0x17
    70e8:	98 8d       	ldd	r25, Y+24	; 0x18
    70ea:	20 e0       	ldi	r18, 0x00	; 0
    70ec:	30 e0       	ldi	r19, 0x00	; 0
    70ee:	40 e8       	ldi	r20, 0x80	; 128
    70f0:	5f e3       	ldi	r21, 0x3F	; 63
    70f2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    70f6:	88 23       	and	r24, r24
    70f8:	0c f0       	brlt	.+2      	; 0x70fc <pick_drop+0x1ea>
    70fa:	10 e0       	ldi	r17, 0x00	; 0
    70fc:	11 23       	and	r17, r17
    70fe:	29 f0       	breq	.+10     	; 0x710a <pick_drop+0x1f8>
		__ticks = 1;
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	9a 8f       	std	Y+26, r25	; 0x1a
    7106:	89 8f       	std	Y+25, r24	; 0x19
    7108:	46 c0       	rjmp	.+140    	; 0x7196 <pick_drop+0x284>
	else if (__tmp > 65535)
    710a:	11 e0       	ldi	r17, 0x01	; 1
    710c:	6d 89       	ldd	r22, Y+21	; 0x15
    710e:	7e 89       	ldd	r23, Y+22	; 0x16
    7110:	8f 89       	ldd	r24, Y+23	; 0x17
    7112:	98 8d       	ldd	r25, Y+24	; 0x18
    7114:	20 e0       	ldi	r18, 0x00	; 0
    7116:	3f ef       	ldi	r19, 0xFF	; 255
    7118:	4f e7       	ldi	r20, 0x7F	; 127
    711a:	57 e4       	ldi	r21, 0x47	; 71
    711c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7120:	18 16       	cp	r1, r24
    7122:	0c f0       	brlt	.+2      	; 0x7126 <pick_drop+0x214>
    7124:	10 e0       	ldi	r17, 0x00	; 0
    7126:	11 23       	and	r17, r17
    7128:	61 f1       	breq	.+88     	; 0x7182 <pick_drop+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    712a:	69 89       	ldd	r22, Y+17	; 0x11
    712c:	7a 89       	ldd	r23, Y+18	; 0x12
    712e:	8b 89       	ldd	r24, Y+19	; 0x13
    7130:	9c 89       	ldd	r25, Y+20	; 0x14
    7132:	20 e0       	ldi	r18, 0x00	; 0
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	40 e2       	ldi	r20, 0x20	; 32
    7138:	51 e4       	ldi	r21, 0x41	; 65
    713a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    713e:	dc 01       	movw	r26, r24
    7140:	cb 01       	movw	r24, r22
    7142:	bc 01       	movw	r22, r24
    7144:	cd 01       	movw	r24, r26
    7146:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    714a:	dc 01       	movw	r26, r24
    714c:	cb 01       	movw	r24, r22
    714e:	9a 8f       	std	Y+26, r25	; 0x1a
    7150:	89 8f       	std	Y+25, r24	; 0x19
    7152:	12 c0       	rjmp	.+36     	; 0x7178 <pick_drop+0x266>
    7154:	80 e7       	ldi	r24, 0x70	; 112
    7156:	91 e0       	ldi	r25, 0x01	; 1
    7158:	9c 8f       	std	Y+28, r25	; 0x1c
    715a:	8b 8f       	std	Y+27, r24	; 0x1b
    715c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    715e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7160:	8c 01       	movw	r16, r24
    7162:	c8 01       	movw	r24, r16
    7164:	01 97       	sbiw	r24, 0x01	; 1
    7166:	f1 f7       	brne	.-4      	; 0x7164 <pick_drop+0x252>
    7168:	8c 01       	movw	r16, r24
    716a:	1c 8f       	std	Y+28, r17	; 0x1c
    716c:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    716e:	89 8d       	ldd	r24, Y+25	; 0x19
    7170:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7172:	01 97       	sbiw	r24, 0x01	; 1
    7174:	9a 8f       	std	Y+26, r25	; 0x1a
    7176:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7178:	89 8d       	ldd	r24, Y+25	; 0x19
    717a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    717c:	00 97       	sbiw	r24, 0x00	; 0
    717e:	51 f7       	brne	.-44     	; 0x7154 <pick_drop+0x242>
    7180:	17 c0       	rjmp	.+46     	; 0x71b0 <pick_drop+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7182:	6d 89       	ldd	r22, Y+21	; 0x15
    7184:	7e 89       	ldd	r23, Y+22	; 0x16
    7186:	8f 89       	ldd	r24, Y+23	; 0x17
    7188:	98 8d       	ldd	r25, Y+24	; 0x18
    718a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    718e:	dc 01       	movw	r26, r24
    7190:	cb 01       	movw	r24, r22
    7192:	9a 8f       	std	Y+26, r25	; 0x1a
    7194:	89 8f       	std	Y+25, r24	; 0x19
    7196:	89 8d       	ldd	r24, Y+25	; 0x19
    7198:	9a 8d       	ldd	r25, Y+26	; 0x1a
    719a:	9e 8f       	std	Y+30, r25	; 0x1e
    719c:	8d 8f       	std	Y+29, r24	; 0x1d
    719e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    71a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    71a2:	8c 01       	movw	r16, r24
    71a4:	f8 01       	movw	r30, r16
    71a6:	31 97       	sbiw	r30, 0x01	; 1
    71a8:	f1 f7       	brne	.-4      	; 0x71a6 <pick_drop+0x294>
    71aa:	8f 01       	movw	r16, r30
    71ac:	1e 8f       	std	Y+30, r17	; 0x1e
    71ae:	0d 8f       	std	Y+29, r16	; 0x1d
		_delay_ms(20);//mod
	}
	}
	
	if(pd=='D'){
    71b0:	ce 01       	movw	r24, r28
    71b2:	89 59       	subi	r24, 0x99	; 153
    71b4:	9c 4f       	sbci	r25, 0xFC	; 252
    71b6:	fc 01       	movw	r30, r24
    71b8:	80 81       	ld	r24, Z
    71ba:	84 34       	cpi	r24, 0x44	; 68
    71bc:	09 f0       	breq	.+2      	; 0x71c0 <pick_drop+0x2ae>
    71be:	12 c1       	rjmp	.+548    	; 0x73e4 <pick_drop+0x4d2>
		if(master_path[node-1]!='N'){
    71c0:	80 91 71 03 	lds	r24, 0x0371
    71c4:	90 91 72 03 	lds	r25, 0x0372
    71c8:	01 97       	sbiw	r24, 0x01	; 1
    71ca:	8b 58       	subi	r24, 0x8B	; 139
    71cc:	9c 4f       	sbci	r25, 0xFC	; 252
    71ce:	fc 01       	movw	r30, r24
    71d0:	80 81       	ld	r24, Z
    71d2:	8e 34       	cpi	r24, 0x4E	; 78
    71d4:	09 f4       	brne	.+2      	; 0x71d8 <pick_drop+0x2c6>
    71d6:	84 c0       	rjmp	.+264    	; 0x72e0 <pick_drop+0x3ce>
		back_mm(70);
    71d8:	86 e4       	ldi	r24, 0x46	; 70
    71da:	90 e0       	ldi	r25, 0x00	; 0
    71dc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    71e0:	80 e0       	ldi	r24, 0x00	; 0
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	a0 ea       	ldi	r26, 0xA0	; 160
    71e6:	b1 e4       	ldi	r27, 0x41	; 65
    71e8:	8f 8f       	std	Y+31, r24	; 0x1f
    71ea:	98 a3       	lds	r25, 0x58
    71ec:	a9 a3       	lds	r26, 0x59
    71ee:	ba a3       	lds	r27, 0x5a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    71f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    71f2:	78 a1       	lds	r23, 0x48
    71f4:	89 a1       	lds	r24, 0x49
    71f6:	9a a1       	lds	r25, 0x4a
    71f8:	26 e6       	ldi	r18, 0x66	; 102
    71fa:	36 e6       	ldi	r19, 0x66	; 102
    71fc:	46 e6       	ldi	r20, 0x66	; 102
    71fe:	55 e4       	ldi	r21, 0x45	; 69
    7200:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7204:	dc 01       	movw	r26, r24
    7206:	cb 01       	movw	r24, r22
    7208:	8b a3       	lds	r24, 0x5b
    720a:	9c a3       	lds	r25, 0x5c
    720c:	ad a3       	lds	r26, 0x5d
    720e:	be a3       	lds	r27, 0x5e
	if (__tmp < 1.0)
    7210:	11 e0       	ldi	r17, 0x01	; 1
    7212:	6b a1       	lds	r22, 0x4b
    7214:	7c a1       	lds	r23, 0x4c
    7216:	8d a1       	lds	r24, 0x4d
    7218:	9e a1       	lds	r25, 0x4e
    721a:	20 e0       	ldi	r18, 0x00	; 0
    721c:	30 e0       	ldi	r19, 0x00	; 0
    721e:	40 e8       	ldi	r20, 0x80	; 128
    7220:	5f e3       	ldi	r21, 0x3F	; 63
    7222:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    7226:	88 23       	and	r24, r24
    7228:	0c f0       	brlt	.+2      	; 0x722c <pick_drop+0x31a>
    722a:	10 e0       	ldi	r17, 0x00	; 0
    722c:	11 23       	and	r17, r17
    722e:	29 f0       	breq	.+10     	; 0x723a <pick_drop+0x328>
		__ticks = 1;
    7230:	81 e0       	ldi	r24, 0x01	; 1
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	98 a7       	lds	r25, 0x78
    7236:	8f a3       	lds	r24, 0x5f
    7238:	46 c0       	rjmp	.+140    	; 0x72c6 <pick_drop+0x3b4>
	else if (__tmp > 65535)
    723a:	11 e0       	ldi	r17, 0x01	; 1
    723c:	6b a1       	lds	r22, 0x4b
    723e:	7c a1       	lds	r23, 0x4c
    7240:	8d a1       	lds	r24, 0x4d
    7242:	9e a1       	lds	r25, 0x4e
    7244:	20 e0       	ldi	r18, 0x00	; 0
    7246:	3f ef       	ldi	r19, 0xFF	; 255
    7248:	4f e7       	ldi	r20, 0x7F	; 127
    724a:	57 e4       	ldi	r21, 0x47	; 71
    724c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7250:	18 16       	cp	r1, r24
    7252:	0c f0       	brlt	.+2      	; 0x7256 <pick_drop+0x344>
    7254:	10 e0       	ldi	r17, 0x00	; 0
    7256:	11 23       	and	r17, r17
    7258:	61 f1       	breq	.+88     	; 0x72b2 <pick_drop+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    725a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    725c:	78 a1       	lds	r23, 0x48
    725e:	89 a1       	lds	r24, 0x49
    7260:	9a a1       	lds	r25, 0x4a
    7262:	20 e0       	ldi	r18, 0x00	; 0
    7264:	30 e0       	ldi	r19, 0x00	; 0
    7266:	40 e2       	ldi	r20, 0x20	; 32
    7268:	51 e4       	ldi	r21, 0x41	; 65
    726a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    726e:	dc 01       	movw	r26, r24
    7270:	cb 01       	movw	r24, r22
    7272:	bc 01       	movw	r22, r24
    7274:	cd 01       	movw	r24, r26
    7276:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    727a:	dc 01       	movw	r26, r24
    727c:	cb 01       	movw	r24, r22
    727e:	98 a7       	lds	r25, 0x78
    7280:	8f a3       	lds	r24, 0x5f
    7282:	12 c0       	rjmp	.+36     	; 0x72a8 <pick_drop+0x396>
    7284:	80 e7       	ldi	r24, 0x70	; 112
    7286:	91 e0       	ldi	r25, 0x01	; 1
    7288:	9a a7       	lds	r25, 0x7a
    728a:	89 a7       	lds	r24, 0x79
    728c:	89 a5       	lds	r24, 0x69
    728e:	9a a5       	lds	r25, 0x6a
    7290:	8c 01       	movw	r16, r24
    7292:	c8 01       	movw	r24, r16
    7294:	01 97       	sbiw	r24, 0x01	; 1
    7296:	f1 f7       	brne	.-4      	; 0x7294 <pick_drop+0x382>
    7298:	8c 01       	movw	r16, r24
    729a:	1a a7       	lds	r17, 0x7a
    729c:	09 a7       	lds	r16, 0x79
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    729e:	8f a1       	lds	r24, 0x4f
    72a0:	98 a5       	lds	r25, 0x68
    72a2:	01 97       	sbiw	r24, 0x01	; 1
    72a4:	98 a7       	lds	r25, 0x78
    72a6:	8f a3       	lds	r24, 0x5f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72a8:	8f a1       	lds	r24, 0x4f
    72aa:	98 a5       	lds	r25, 0x68
    72ac:	00 97       	sbiw	r24, 0x00	; 0
    72ae:	51 f7       	brne	.-44     	; 0x7284 <pick_drop+0x372>
    72b0:	17 c0       	rjmp	.+46     	; 0x72e0 <pick_drop+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72b2:	6b a1       	lds	r22, 0x4b
    72b4:	7c a1       	lds	r23, 0x4c
    72b6:	8d a1       	lds	r24, 0x4d
    72b8:	9e a1       	lds	r25, 0x4e
    72ba:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    72be:	dc 01       	movw	r26, r24
    72c0:	cb 01       	movw	r24, r22
    72c2:	98 a7       	lds	r25, 0x78
    72c4:	8f a3       	lds	r24, 0x5f
    72c6:	8f a1       	lds	r24, 0x4f
    72c8:	98 a5       	lds	r25, 0x68
    72ca:	9c a7       	lds	r25, 0x7c
    72cc:	8b a7       	lds	r24, 0x7b
    72ce:	8b a5       	lds	r24, 0x6b
    72d0:	9c a5       	lds	r25, 0x6c
    72d2:	8c 01       	movw	r16, r24
    72d4:	f8 01       	movw	r30, r16
    72d6:	31 97       	sbiw	r30, 0x01	; 1
    72d8:	f1 f7       	brne	.-4      	; 0x72d6 <pick_drop+0x3c4>
    72da:	8f 01       	movw	r16, r30
    72dc:	1c a7       	lds	r17, 0x7c
    72de:	0b a7       	lds	r16, 0x7b
		_delay_ms(20);}
		drop();
    72e0:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <drop>
    72e4:	80 e0       	ldi	r24, 0x00	; 0
    72e6:	90 e0       	ldi	r25, 0x00	; 0
    72e8:	a8 ec       	ldi	r26, 0xC8	; 200
    72ea:	b2 e4       	ldi	r27, 0x42	; 66
    72ec:	8d a7       	lds	r24, 0x7d
    72ee:	9e a7       	lds	r25, 0x7e
    72f0:	af a7       	lds	r26, 0x7f
    72f2:	b8 ab       	sts	0x58, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    72f4:	6d a5       	lds	r22, 0x6d
    72f6:	7e a5       	lds	r23, 0x6e
    72f8:	8f a5       	lds	r24, 0x6f
    72fa:	98 a9       	sts	0x48, r25
    72fc:	26 e6       	ldi	r18, 0x66	; 102
    72fe:	36 e6       	ldi	r19, 0x66	; 102
    7300:	46 e6       	ldi	r20, 0x66	; 102
    7302:	55 e4       	ldi	r21, 0x45	; 69
    7304:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7308:	dc 01       	movw	r26, r24
    730a:	cb 01       	movw	r24, r22
    730c:	89 ab       	sts	0x59, r24
    730e:	9a ab       	sts	0x5a, r25
    7310:	ab ab       	sts	0x5b, r26
    7312:	bc ab       	sts	0x5c, r27
	if (__tmp < 1.0)
    7314:	11 e0       	ldi	r17, 0x01	; 1
    7316:	69 a9       	sts	0x49, r22
    7318:	7a a9       	sts	0x4a, r23
    731a:	8b a9       	sts	0x4b, r24
    731c:	9c a9       	sts	0x4c, r25
    731e:	20 e0       	ldi	r18, 0x00	; 0
    7320:	30 e0       	ldi	r19, 0x00	; 0
    7322:	40 e8       	ldi	r20, 0x80	; 128
    7324:	5f e3       	ldi	r21, 0x3F	; 63
    7326:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    732a:	88 23       	and	r24, r24
    732c:	0c f0       	brlt	.+2      	; 0x7330 <pick_drop+0x41e>
    732e:	10 e0       	ldi	r17, 0x00	; 0
    7330:	11 23       	and	r17, r17
    7332:	29 f0       	breq	.+10     	; 0x733e <pick_drop+0x42c>
		__ticks = 1;
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	90 e0       	ldi	r25, 0x00	; 0
    7338:	9e ab       	sts	0x5e, r25
    733a:	8d ab       	sts	0x5d, r24
    733c:	46 c0       	rjmp	.+140    	; 0x73ca <pick_drop+0x4b8>
	else if (__tmp > 65535)
    733e:	11 e0       	ldi	r17, 0x01	; 1
    7340:	69 a9       	sts	0x49, r22
    7342:	7a a9       	sts	0x4a, r23
    7344:	8b a9       	sts	0x4b, r24
    7346:	9c a9       	sts	0x4c, r25
    7348:	20 e0       	ldi	r18, 0x00	; 0
    734a:	3f ef       	ldi	r19, 0xFF	; 255
    734c:	4f e7       	ldi	r20, 0x7F	; 127
    734e:	57 e4       	ldi	r21, 0x47	; 71
    7350:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7354:	18 16       	cp	r1, r24
    7356:	0c f0       	brlt	.+2      	; 0x735a <pick_drop+0x448>
    7358:	10 e0       	ldi	r17, 0x00	; 0
    735a:	11 23       	and	r17, r17
    735c:	61 f1       	breq	.+88     	; 0x73b6 <pick_drop+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    735e:	6d a5       	lds	r22, 0x6d
    7360:	7e a5       	lds	r23, 0x6e
    7362:	8f a5       	lds	r24, 0x6f
    7364:	98 a9       	sts	0x48, r25
    7366:	20 e0       	ldi	r18, 0x00	; 0
    7368:	30 e0       	ldi	r19, 0x00	; 0
    736a:	40 e2       	ldi	r20, 0x20	; 32
    736c:	51 e4       	ldi	r21, 0x41	; 65
    736e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7372:	dc 01       	movw	r26, r24
    7374:	cb 01       	movw	r24, r22
    7376:	bc 01       	movw	r22, r24
    7378:	cd 01       	movw	r24, r26
    737a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    737e:	dc 01       	movw	r26, r24
    7380:	cb 01       	movw	r24, r22
    7382:	9e ab       	sts	0x5e, r25
    7384:	8d ab       	sts	0x5d, r24
    7386:	12 c0       	rjmp	.+36     	; 0x73ac <pick_drop+0x49a>
    7388:	80 e7       	ldi	r24, 0x70	; 112
    738a:	91 e0       	ldi	r25, 0x01	; 1
    738c:	98 af       	sts	0x78, r25
    738e:	8f ab       	sts	0x5f, r24
    7390:	8f a9       	sts	0x4f, r24
    7392:	98 ad       	sts	0x68, r25
    7394:	8c 01       	movw	r16, r24
    7396:	c8 01       	movw	r24, r16
    7398:	01 97       	sbiw	r24, 0x01	; 1
    739a:	f1 f7       	brne	.-4      	; 0x7398 <pick_drop+0x486>
    739c:	8c 01       	movw	r16, r24
    739e:	18 af       	sts	0x78, r17
    73a0:	0f ab       	sts	0x5f, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73a2:	8d a9       	sts	0x4d, r24
    73a4:	9e a9       	sts	0x4e, r25
    73a6:	01 97       	sbiw	r24, 0x01	; 1
    73a8:	9e ab       	sts	0x5e, r25
    73aa:	8d ab       	sts	0x5d, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73ac:	8d a9       	sts	0x4d, r24
    73ae:	9e a9       	sts	0x4e, r25
    73b0:	00 97       	sbiw	r24, 0x00	; 0
    73b2:	51 f7       	brne	.-44     	; 0x7388 <pick_drop+0x476>
    73b4:	17 c0       	rjmp	.+46     	; 0x73e4 <pick_drop+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73b6:	69 a9       	sts	0x49, r22
    73b8:	7a a9       	sts	0x4a, r23
    73ba:	8b a9       	sts	0x4b, r24
    73bc:	9c a9       	sts	0x4c, r25
    73be:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    73c2:	dc 01       	movw	r26, r24
    73c4:	cb 01       	movw	r24, r22
    73c6:	9e ab       	sts	0x5e, r25
    73c8:	8d ab       	sts	0x5d, r24
    73ca:	8d a9       	sts	0x4d, r24
    73cc:	9e a9       	sts	0x4e, r25
    73ce:	9a af       	sts	0x7a, r25
    73d0:	89 af       	sts	0x79, r24
    73d2:	89 ad       	sts	0x69, r24
    73d4:	9a ad       	sts	0x6a, r25
    73d6:	8c 01       	movw	r16, r24
    73d8:	f8 01       	movw	r30, r16
    73da:	31 97       	sbiw	r30, 0x01	; 1
    73dc:	f1 f7       	brne	.-4      	; 0x73da <pick_drop+0x4c8>
    73de:	8f 01       	movw	r16, r30
    73e0:	1a af       	sts	0x7a, r17
    73e2:	09 af       	sts	0x79, r16
		_delay_ms(100);
	}
		if(pd == '1' )//left animals
    73e4:	ce 01       	movw	r24, r28
    73e6:	89 59       	subi	r24, 0x99	; 153
    73e8:	9c 4f       	sbci	r25, 0xFC	; 252
    73ea:	fc 01       	movw	r30, r24
    73ec:	80 81       	ld	r24, Z
    73ee:	81 33       	cpi	r24, 0x31	; 49
    73f0:	11 f0       	breq	.+4      	; 0x73f6 <pick_drop+0x4e4>
    73f2:	0c 94 3c 43 	jmp	0x8678	; 0x8678 <pick_drop+0x1766>
		{
			if(master_path[node-1]=='U'){
    73f6:	80 91 71 03 	lds	r24, 0x0371
    73fa:	90 91 72 03 	lds	r25, 0x0372
    73fe:	01 97       	sbiw	r24, 0x01	; 1
    7400:	8b 58       	subi	r24, 0x8B	; 139
    7402:	9c 4f       	sbci	r25, 0xFC	; 252
    7404:	fc 01       	movw	r30, r24
    7406:	80 81       	ld	r24, Z
    7408:	85 35       	cpi	r24, 0x55	; 85
    740a:	09 f0       	breq	.+2      	; 0x740e <pick_drop+0x4fc>
    740c:	48 c3       	rjmp	.+1680   	; 0x7a9e <pick_drop+0xb8c>
			forward_mm(40);
    740e:	88 e2       	ldi	r24, 0x28	; 40
    7410:	90 e0       	ldi	r25, 0x00	; 0
    7412:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7416:	80 e0       	ldi	r24, 0x00	; 0
    7418:	90 e0       	ldi	r25, 0x00	; 0
    741a:	a0 ea       	ldi	r26, 0xA0	; 160
    741c:	b1 e4       	ldi	r27, 0x41	; 65
    741e:	8b af       	sts	0x7b, r24
    7420:	9c af       	sts	0x7c, r25
    7422:	ad af       	sts	0x7d, r26
    7424:	be af       	sts	0x7e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7426:	8e 01       	movw	r16, r28
    7428:	01 5c       	subi	r16, 0xC1	; 193
    742a:	1f 4f       	sbci	r17, 0xFF	; 255
    742c:	6b ad       	sts	0x6b, r22
    742e:	7c ad       	sts	0x6c, r23
    7430:	8d ad       	sts	0x6d, r24
    7432:	9e ad       	sts	0x6e, r25
    7434:	26 e6       	ldi	r18, 0x66	; 102
    7436:	36 e6       	ldi	r19, 0x66	; 102
    7438:	46 e6       	ldi	r20, 0x66	; 102
    743a:	55 e4       	ldi	r21, 0x45	; 69
    743c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7440:	dc 01       	movw	r26, r24
    7442:	cb 01       	movw	r24, r22
    7444:	f8 01       	movw	r30, r16
    7446:	80 83       	st	Z, r24
    7448:	91 83       	std	Z+1, r25	; 0x01
    744a:	a2 83       	std	Z+2, r26	; 0x02
    744c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    744e:	ce 01       	movw	r24, r28
    7450:	cf 96       	adiw	r24, 0x3f	; 63
    7452:	11 e0       	ldi	r17, 0x01	; 1
    7454:	fc 01       	movw	r30, r24
    7456:	60 81       	ld	r22, Z
    7458:	71 81       	ldd	r23, Z+1	; 0x01
    745a:	82 81       	ldd	r24, Z+2	; 0x02
    745c:	93 81       	ldd	r25, Z+3	; 0x03
    745e:	20 e0       	ldi	r18, 0x00	; 0
    7460:	30 e0       	ldi	r19, 0x00	; 0
    7462:	40 e8       	ldi	r20, 0x80	; 128
    7464:	5f e3       	ldi	r21, 0x3F	; 63
    7466:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    746a:	88 23       	and	r24, r24
    746c:	0c f0       	brlt	.+2      	; 0x7470 <pick_drop+0x55e>
    746e:	10 e0       	ldi	r17, 0x00	; 0
    7470:	11 23       	and	r17, r17
    7472:	49 f0       	breq	.+18     	; 0x7486 <pick_drop+0x574>
		__ticks = 1;
    7474:	ce 01       	movw	r24, r28
    7476:	8d 5b       	subi	r24, 0xBD	; 189
    7478:	9f 4f       	sbci	r25, 0xFF	; 255
    747a:	21 e0       	ldi	r18, 0x01	; 1
    747c:	30 e0       	ldi	r19, 0x00	; 0
    747e:	fc 01       	movw	r30, r24
    7480:	31 83       	std	Z+1, r19	; 0x01
    7482:	20 83       	st	Z, r18
    7484:	6e c0       	rjmp	.+220    	; 0x7562 <pick_drop+0x650>
	else if (__tmp > 65535)
    7486:	ce 01       	movw	r24, r28
    7488:	cf 96       	adiw	r24, 0x3f	; 63
    748a:	11 e0       	ldi	r17, 0x01	; 1
    748c:	fc 01       	movw	r30, r24
    748e:	60 81       	ld	r22, Z
    7490:	71 81       	ldd	r23, Z+1	; 0x01
    7492:	82 81       	ldd	r24, Z+2	; 0x02
    7494:	93 81       	ldd	r25, Z+3	; 0x03
    7496:	20 e0       	ldi	r18, 0x00	; 0
    7498:	3f ef       	ldi	r19, 0xFF	; 255
    749a:	4f e7       	ldi	r20, 0x7F	; 127
    749c:	57 e4       	ldi	r21, 0x47	; 71
    749e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    74a2:	18 16       	cp	r1, r24
    74a4:	0c f0       	brlt	.+2      	; 0x74a8 <pick_drop+0x596>
    74a6:	10 e0       	ldi	r17, 0x00	; 0
    74a8:	11 23       	and	r17, r17
    74aa:	09 f4       	brne	.+2      	; 0x74ae <pick_drop+0x59c>
    74ac:	49 c0       	rjmp	.+146    	; 0x7540 <pick_drop+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74ae:	6b ad       	sts	0x6b, r22
    74b0:	7c ad       	sts	0x6c, r23
    74b2:	8d ad       	sts	0x6d, r24
    74b4:	9e ad       	sts	0x6e, r25
    74b6:	20 e0       	ldi	r18, 0x00	; 0
    74b8:	30 e0       	ldi	r19, 0x00	; 0
    74ba:	40 e2       	ldi	r20, 0x20	; 32
    74bc:	51 e4       	ldi	r21, 0x41	; 65
    74be:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    74c2:	dc 01       	movw	r26, r24
    74c4:	cb 01       	movw	r24, r22
    74c6:	8e 01       	movw	r16, r28
    74c8:	0d 5b       	subi	r16, 0xBD	; 189
    74ca:	1f 4f       	sbci	r17, 0xFF	; 255
    74cc:	bc 01       	movw	r22, r24
    74ce:	cd 01       	movw	r24, r26
    74d0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    74d4:	dc 01       	movw	r26, r24
    74d6:	cb 01       	movw	r24, r22
    74d8:	f8 01       	movw	r30, r16
    74da:	91 83       	std	Z+1, r25	; 0x01
    74dc:	80 83       	st	Z, r24
    74de:	27 c0       	rjmp	.+78     	; 0x752e <pick_drop+0x61c>
    74e0:	ce 01       	movw	r24, r28
    74e2:	8b 5b       	subi	r24, 0xBB	; 187
    74e4:	9f 4f       	sbci	r25, 0xFF	; 255
    74e6:	20 e7       	ldi	r18, 0x70	; 112
    74e8:	31 e0       	ldi	r19, 0x01	; 1
    74ea:	fc 01       	movw	r30, r24
    74ec:	31 83       	std	Z+1, r19	; 0x01
    74ee:	20 83       	st	Z, r18
    74f0:	ce 01       	movw	r24, r28
    74f2:	8b 5b       	subi	r24, 0xBB	; 187
    74f4:	9f 4f       	sbci	r25, 0xFF	; 255
    74f6:	fc 01       	movw	r30, r24
    74f8:	80 81       	ld	r24, Z
    74fa:	91 81       	ldd	r25, Z+1	; 0x01
    74fc:	8c 01       	movw	r16, r24
    74fe:	c8 01       	movw	r24, r16
    7500:	01 97       	sbiw	r24, 0x01	; 1
    7502:	f1 f7       	brne	.-4      	; 0x7500 <pick_drop+0x5ee>
    7504:	8c 01       	movw	r16, r24
    7506:	ce 01       	movw	r24, r28
    7508:	8b 5b       	subi	r24, 0xBB	; 187
    750a:	9f 4f       	sbci	r25, 0xFF	; 255
    750c:	fc 01       	movw	r30, r24
    750e:	11 83       	std	Z+1, r17	; 0x01
    7510:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7512:	ce 01       	movw	r24, r28
    7514:	8d 5b       	subi	r24, 0xBD	; 189
    7516:	9f 4f       	sbci	r25, 0xFF	; 255
    7518:	9e 01       	movw	r18, r28
    751a:	2d 5b       	subi	r18, 0xBD	; 189
    751c:	3f 4f       	sbci	r19, 0xFF	; 255
    751e:	f9 01       	movw	r30, r18
    7520:	20 81       	ld	r18, Z
    7522:	31 81       	ldd	r19, Z+1	; 0x01
    7524:	21 50       	subi	r18, 0x01	; 1
    7526:	30 40       	sbci	r19, 0x00	; 0
    7528:	fc 01       	movw	r30, r24
    752a:	31 83       	std	Z+1, r19	; 0x01
    752c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    752e:	ce 01       	movw	r24, r28
    7530:	8d 5b       	subi	r24, 0xBD	; 189
    7532:	9f 4f       	sbci	r25, 0xFF	; 255
    7534:	fc 01       	movw	r30, r24
    7536:	80 81       	ld	r24, Z
    7538:	91 81       	ldd	r25, Z+1	; 0x01
    753a:	00 97       	sbiw	r24, 0x00	; 0
    753c:	89 f6       	brne	.-94     	; 0x74e0 <pick_drop+0x5ce>
    753e:	2e c0       	rjmp	.+92     	; 0x759c <pick_drop+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7540:	8e 01       	movw	r16, r28
    7542:	0d 5b       	subi	r16, 0xBD	; 189
    7544:	1f 4f       	sbci	r17, 0xFF	; 255
    7546:	ce 01       	movw	r24, r28
    7548:	cf 96       	adiw	r24, 0x3f	; 63
    754a:	fc 01       	movw	r30, r24
    754c:	60 81       	ld	r22, Z
    754e:	71 81       	ldd	r23, Z+1	; 0x01
    7550:	82 81       	ldd	r24, Z+2	; 0x02
    7552:	93 81       	ldd	r25, Z+3	; 0x03
    7554:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7558:	dc 01       	movw	r26, r24
    755a:	cb 01       	movw	r24, r22
    755c:	f8 01       	movw	r30, r16
    755e:	91 83       	std	Z+1, r25	; 0x01
    7560:	80 83       	st	Z, r24
    7562:	ce 01       	movw	r24, r28
    7564:	89 5b       	subi	r24, 0xB9	; 185
    7566:	9f 4f       	sbci	r25, 0xFF	; 255
    7568:	9e 01       	movw	r18, r28
    756a:	2d 5b       	subi	r18, 0xBD	; 189
    756c:	3f 4f       	sbci	r19, 0xFF	; 255
    756e:	f9 01       	movw	r30, r18
    7570:	20 81       	ld	r18, Z
    7572:	31 81       	ldd	r19, Z+1	; 0x01
    7574:	fc 01       	movw	r30, r24
    7576:	31 83       	std	Z+1, r19	; 0x01
    7578:	20 83       	st	Z, r18
    757a:	ce 01       	movw	r24, r28
    757c:	89 5b       	subi	r24, 0xB9	; 185
    757e:	9f 4f       	sbci	r25, 0xFF	; 255
    7580:	fc 01       	movw	r30, r24
    7582:	80 81       	ld	r24, Z
    7584:	91 81       	ldd	r25, Z+1	; 0x01
    7586:	8c 01       	movw	r16, r24
    7588:	c8 01       	movw	r24, r16
    758a:	01 97       	sbiw	r24, 0x01	; 1
    758c:	f1 f7       	brne	.-4      	; 0x758a <pick_drop+0x678>
    758e:	8c 01       	movw	r16, r24
    7590:	ce 01       	movw	r24, r28
    7592:	89 5b       	subi	r24, 0xB9	; 185
    7594:	9f 4f       	sbci	r25, 0xFF	; 255
    7596:	fc 01       	movw	r30, r24
    7598:	11 83       	std	Z+1, r17	; 0x01
    759a:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left2();
    759c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    75a0:	9e 01       	movw	r18, r28
    75a2:	27 5b       	subi	r18, 0xB7	; 183
    75a4:	3f 4f       	sbci	r19, 0xFF	; 255
    75a6:	80 e0       	ldi	r24, 0x00	; 0
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	a8 e4       	ldi	r26, 0x48	; 72
    75ac:	b2 e4       	ldi	r27, 0x42	; 66
    75ae:	f9 01       	movw	r30, r18
    75b0:	80 83       	st	Z, r24
    75b2:	91 83       	std	Z+1, r25	; 0x01
    75b4:	a2 83       	std	Z+2, r26	; 0x02
    75b6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    75b8:	8e 01       	movw	r16, r28
    75ba:	03 5b       	subi	r16, 0xB3	; 179
    75bc:	1f 4f       	sbci	r17, 0xFF	; 255
    75be:	ce 01       	movw	r24, r28
    75c0:	87 5b       	subi	r24, 0xB7	; 183
    75c2:	9f 4f       	sbci	r25, 0xFF	; 255
    75c4:	fc 01       	movw	r30, r24
    75c6:	60 81       	ld	r22, Z
    75c8:	71 81       	ldd	r23, Z+1	; 0x01
    75ca:	82 81       	ldd	r24, Z+2	; 0x02
    75cc:	93 81       	ldd	r25, Z+3	; 0x03
    75ce:	26 e6       	ldi	r18, 0x66	; 102
    75d0:	36 e6       	ldi	r19, 0x66	; 102
    75d2:	46 e6       	ldi	r20, 0x66	; 102
    75d4:	55 e4       	ldi	r21, 0x45	; 69
    75d6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    75da:	dc 01       	movw	r26, r24
    75dc:	cb 01       	movw	r24, r22
    75de:	f8 01       	movw	r30, r16
    75e0:	80 83       	st	Z, r24
    75e2:	91 83       	std	Z+1, r25	; 0x01
    75e4:	a2 83       	std	Z+2, r26	; 0x02
    75e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    75e8:	ce 01       	movw	r24, r28
    75ea:	83 5b       	subi	r24, 0xB3	; 179
    75ec:	9f 4f       	sbci	r25, 0xFF	; 255
    75ee:	11 e0       	ldi	r17, 0x01	; 1
    75f0:	fc 01       	movw	r30, r24
    75f2:	60 81       	ld	r22, Z
    75f4:	71 81       	ldd	r23, Z+1	; 0x01
    75f6:	82 81       	ldd	r24, Z+2	; 0x02
    75f8:	93 81       	ldd	r25, Z+3	; 0x03
    75fa:	20 e0       	ldi	r18, 0x00	; 0
    75fc:	30 e0       	ldi	r19, 0x00	; 0
    75fe:	40 e8       	ldi	r20, 0x80	; 128
    7600:	5f e3       	ldi	r21, 0x3F	; 63
    7602:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    7606:	88 23       	and	r24, r24
    7608:	0c f0       	brlt	.+2      	; 0x760c <pick_drop+0x6fa>
    760a:	10 e0       	ldi	r17, 0x00	; 0
    760c:	11 23       	and	r17, r17
    760e:	49 f0       	breq	.+18     	; 0x7622 <pick_drop+0x710>
		__ticks = 1;
    7610:	ce 01       	movw	r24, r28
    7612:	8f 5a       	subi	r24, 0xAF	; 175
    7614:	9f 4f       	sbci	r25, 0xFF	; 255
    7616:	21 e0       	ldi	r18, 0x01	; 1
    7618:	30 e0       	ldi	r19, 0x00	; 0
    761a:	fc 01       	movw	r30, r24
    761c:	31 83       	std	Z+1, r19	; 0x01
    761e:	20 83       	st	Z, r18
    7620:	74 c0       	rjmp	.+232    	; 0x770a <pick_drop+0x7f8>
	else if (__tmp > 65535)
    7622:	ce 01       	movw	r24, r28
    7624:	83 5b       	subi	r24, 0xB3	; 179
    7626:	9f 4f       	sbci	r25, 0xFF	; 255
    7628:	11 e0       	ldi	r17, 0x01	; 1
    762a:	fc 01       	movw	r30, r24
    762c:	60 81       	ld	r22, Z
    762e:	71 81       	ldd	r23, Z+1	; 0x01
    7630:	82 81       	ldd	r24, Z+2	; 0x02
    7632:	93 81       	ldd	r25, Z+3	; 0x03
    7634:	20 e0       	ldi	r18, 0x00	; 0
    7636:	3f ef       	ldi	r19, 0xFF	; 255
    7638:	4f e7       	ldi	r20, 0x7F	; 127
    763a:	57 e4       	ldi	r21, 0x47	; 71
    763c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7640:	18 16       	cp	r1, r24
    7642:	0c f0       	brlt	.+2      	; 0x7646 <pick_drop+0x734>
    7644:	10 e0       	ldi	r17, 0x00	; 0
    7646:	11 23       	and	r17, r17
    7648:	09 f4       	brne	.+2      	; 0x764c <pick_drop+0x73a>
    764a:	4d c0       	rjmp	.+154    	; 0x76e6 <pick_drop+0x7d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    764c:	ce 01       	movw	r24, r28
    764e:	87 5b       	subi	r24, 0xB7	; 183
    7650:	9f 4f       	sbci	r25, 0xFF	; 255
    7652:	fc 01       	movw	r30, r24
    7654:	60 81       	ld	r22, Z
    7656:	71 81       	ldd	r23, Z+1	; 0x01
    7658:	82 81       	ldd	r24, Z+2	; 0x02
    765a:	93 81       	ldd	r25, Z+3	; 0x03
    765c:	20 e0       	ldi	r18, 0x00	; 0
    765e:	30 e0       	ldi	r19, 0x00	; 0
    7660:	40 e2       	ldi	r20, 0x20	; 32
    7662:	51 e4       	ldi	r21, 0x41	; 65
    7664:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7668:	dc 01       	movw	r26, r24
    766a:	cb 01       	movw	r24, r22
    766c:	8e 01       	movw	r16, r28
    766e:	0f 5a       	subi	r16, 0xAF	; 175
    7670:	1f 4f       	sbci	r17, 0xFF	; 255
    7672:	bc 01       	movw	r22, r24
    7674:	cd 01       	movw	r24, r26
    7676:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    767a:	dc 01       	movw	r26, r24
    767c:	cb 01       	movw	r24, r22
    767e:	f8 01       	movw	r30, r16
    7680:	91 83       	std	Z+1, r25	; 0x01
    7682:	80 83       	st	Z, r24
    7684:	27 c0       	rjmp	.+78     	; 0x76d4 <pick_drop+0x7c2>
    7686:	ce 01       	movw	r24, r28
    7688:	8d 5a       	subi	r24, 0xAD	; 173
    768a:	9f 4f       	sbci	r25, 0xFF	; 255
    768c:	20 e7       	ldi	r18, 0x70	; 112
    768e:	31 e0       	ldi	r19, 0x01	; 1
    7690:	fc 01       	movw	r30, r24
    7692:	31 83       	std	Z+1, r19	; 0x01
    7694:	20 83       	st	Z, r18
    7696:	ce 01       	movw	r24, r28
    7698:	8d 5a       	subi	r24, 0xAD	; 173
    769a:	9f 4f       	sbci	r25, 0xFF	; 255
    769c:	fc 01       	movw	r30, r24
    769e:	80 81       	ld	r24, Z
    76a0:	91 81       	ldd	r25, Z+1	; 0x01
    76a2:	8c 01       	movw	r16, r24
    76a4:	c8 01       	movw	r24, r16
    76a6:	01 97       	sbiw	r24, 0x01	; 1
    76a8:	f1 f7       	brne	.-4      	; 0x76a6 <pick_drop+0x794>
    76aa:	8c 01       	movw	r16, r24
    76ac:	ce 01       	movw	r24, r28
    76ae:	8d 5a       	subi	r24, 0xAD	; 173
    76b0:	9f 4f       	sbci	r25, 0xFF	; 255
    76b2:	fc 01       	movw	r30, r24
    76b4:	11 83       	std	Z+1, r17	; 0x01
    76b6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b8:	ce 01       	movw	r24, r28
    76ba:	8f 5a       	subi	r24, 0xAF	; 175
    76bc:	9f 4f       	sbci	r25, 0xFF	; 255
    76be:	9e 01       	movw	r18, r28
    76c0:	2f 5a       	subi	r18, 0xAF	; 175
    76c2:	3f 4f       	sbci	r19, 0xFF	; 255
    76c4:	f9 01       	movw	r30, r18
    76c6:	20 81       	ld	r18, Z
    76c8:	31 81       	ldd	r19, Z+1	; 0x01
    76ca:	21 50       	subi	r18, 0x01	; 1
    76cc:	30 40       	sbci	r19, 0x00	; 0
    76ce:	fc 01       	movw	r30, r24
    76d0:	31 83       	std	Z+1, r19	; 0x01
    76d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76d4:	ce 01       	movw	r24, r28
    76d6:	8f 5a       	subi	r24, 0xAF	; 175
    76d8:	9f 4f       	sbci	r25, 0xFF	; 255
    76da:	fc 01       	movw	r30, r24
    76dc:	80 81       	ld	r24, Z
    76de:	91 81       	ldd	r25, Z+1	; 0x01
    76e0:	00 97       	sbiw	r24, 0x00	; 0
    76e2:	89 f6       	brne	.-94     	; 0x7686 <pick_drop+0x774>
    76e4:	2f c0       	rjmp	.+94     	; 0x7744 <pick_drop+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76e6:	8e 01       	movw	r16, r28
    76e8:	0f 5a       	subi	r16, 0xAF	; 175
    76ea:	1f 4f       	sbci	r17, 0xFF	; 255
    76ec:	ce 01       	movw	r24, r28
    76ee:	83 5b       	subi	r24, 0xB3	; 179
    76f0:	9f 4f       	sbci	r25, 0xFF	; 255
    76f2:	fc 01       	movw	r30, r24
    76f4:	60 81       	ld	r22, Z
    76f6:	71 81       	ldd	r23, Z+1	; 0x01
    76f8:	82 81       	ldd	r24, Z+2	; 0x02
    76fa:	93 81       	ldd	r25, Z+3	; 0x03
    76fc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7700:	dc 01       	movw	r26, r24
    7702:	cb 01       	movw	r24, r22
    7704:	f8 01       	movw	r30, r16
    7706:	91 83       	std	Z+1, r25	; 0x01
    7708:	80 83       	st	Z, r24
    770a:	ce 01       	movw	r24, r28
    770c:	8b 5a       	subi	r24, 0xAB	; 171
    770e:	9f 4f       	sbci	r25, 0xFF	; 255
    7710:	9e 01       	movw	r18, r28
    7712:	2f 5a       	subi	r18, 0xAF	; 175
    7714:	3f 4f       	sbci	r19, 0xFF	; 255
    7716:	f9 01       	movw	r30, r18
    7718:	20 81       	ld	r18, Z
    771a:	31 81       	ldd	r19, Z+1	; 0x01
    771c:	fc 01       	movw	r30, r24
    771e:	31 83       	std	Z+1, r19	; 0x01
    7720:	20 83       	st	Z, r18
    7722:	ce 01       	movw	r24, r28
    7724:	8b 5a       	subi	r24, 0xAB	; 171
    7726:	9f 4f       	sbci	r25, 0xFF	; 255
    7728:	fc 01       	movw	r30, r24
    772a:	80 81       	ld	r24, Z
    772c:	91 81       	ldd	r25, Z+1	; 0x01
    772e:	8c 01       	movw	r16, r24
    7730:	c8 01       	movw	r24, r16
    7732:	01 97       	sbiw	r24, 0x01	; 1
    7734:	f1 f7       	brne	.-4      	; 0x7732 <pick_drop+0x820>
    7736:	8c 01       	movw	r16, r24
    7738:	ce 01       	movw	r24, r28
    773a:	8b 5a       	subi	r24, 0xAB	; 171
    773c:	9f 4f       	sbci	r25, 0xFF	; 255
    773e:	fc 01       	movw	r30, r24
    7740:	11 83       	std	Z+1, r17	; 0x01
    7742:	00 83       	st	Z, r16
			_delay_ms(50);
			front();
    7744:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    7748:	9e 01       	movw	r18, r28
    774a:	29 5a       	subi	r18, 0xA9	; 169
    774c:	3f 4f       	sbci	r19, 0xFF	; 255
    774e:	80 e0       	ldi	r24, 0x00	; 0
    7750:	90 e0       	ldi	r25, 0x00	; 0
    7752:	a8 ec       	ldi	r26, 0xC8	; 200
    7754:	b2 e4       	ldi	r27, 0x42	; 66
    7756:	f9 01       	movw	r30, r18
    7758:	80 83       	st	Z, r24
    775a:	91 83       	std	Z+1, r25	; 0x01
    775c:	a2 83       	std	Z+2, r26	; 0x02
    775e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7760:	8e 01       	movw	r16, r28
    7762:	05 5a       	subi	r16, 0xA5	; 165
    7764:	1f 4f       	sbci	r17, 0xFF	; 255
    7766:	ce 01       	movw	r24, r28
    7768:	89 5a       	subi	r24, 0xA9	; 169
    776a:	9f 4f       	sbci	r25, 0xFF	; 255
    776c:	fc 01       	movw	r30, r24
    776e:	60 81       	ld	r22, Z
    7770:	71 81       	ldd	r23, Z+1	; 0x01
    7772:	82 81       	ldd	r24, Z+2	; 0x02
    7774:	93 81       	ldd	r25, Z+3	; 0x03
    7776:	26 e6       	ldi	r18, 0x66	; 102
    7778:	36 e6       	ldi	r19, 0x66	; 102
    777a:	46 e6       	ldi	r20, 0x66	; 102
    777c:	55 e4       	ldi	r21, 0x45	; 69
    777e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7782:	dc 01       	movw	r26, r24
    7784:	cb 01       	movw	r24, r22
    7786:	f8 01       	movw	r30, r16
    7788:	80 83       	st	Z, r24
    778a:	91 83       	std	Z+1, r25	; 0x01
    778c:	a2 83       	std	Z+2, r26	; 0x02
    778e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7790:	ce 01       	movw	r24, r28
    7792:	85 5a       	subi	r24, 0xA5	; 165
    7794:	9f 4f       	sbci	r25, 0xFF	; 255
    7796:	11 e0       	ldi	r17, 0x01	; 1
    7798:	fc 01       	movw	r30, r24
    779a:	60 81       	ld	r22, Z
    779c:	71 81       	ldd	r23, Z+1	; 0x01
    779e:	82 81       	ldd	r24, Z+2	; 0x02
    77a0:	93 81       	ldd	r25, Z+3	; 0x03
    77a2:	20 e0       	ldi	r18, 0x00	; 0
    77a4:	30 e0       	ldi	r19, 0x00	; 0
    77a6:	40 e8       	ldi	r20, 0x80	; 128
    77a8:	5f e3       	ldi	r21, 0x3F	; 63
    77aa:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    77ae:	88 23       	and	r24, r24
    77b0:	0c f0       	brlt	.+2      	; 0x77b4 <pick_drop+0x8a2>
    77b2:	10 e0       	ldi	r17, 0x00	; 0
    77b4:	11 23       	and	r17, r17
    77b6:	49 f0       	breq	.+18     	; 0x77ca <pick_drop+0x8b8>
		__ticks = 1;
    77b8:	ce 01       	movw	r24, r28
    77ba:	81 5a       	subi	r24, 0xA1	; 161
    77bc:	9f 4f       	sbci	r25, 0xFF	; 255
    77be:	21 e0       	ldi	r18, 0x01	; 1
    77c0:	30 e0       	ldi	r19, 0x00	; 0
    77c2:	fc 01       	movw	r30, r24
    77c4:	31 83       	std	Z+1, r19	; 0x01
    77c6:	20 83       	st	Z, r18
    77c8:	74 c0       	rjmp	.+232    	; 0x78b2 <pick_drop+0x9a0>
	else if (__tmp > 65535)
    77ca:	ce 01       	movw	r24, r28
    77cc:	85 5a       	subi	r24, 0xA5	; 165
    77ce:	9f 4f       	sbci	r25, 0xFF	; 255
    77d0:	11 e0       	ldi	r17, 0x01	; 1
    77d2:	fc 01       	movw	r30, r24
    77d4:	60 81       	ld	r22, Z
    77d6:	71 81       	ldd	r23, Z+1	; 0x01
    77d8:	82 81       	ldd	r24, Z+2	; 0x02
    77da:	93 81       	ldd	r25, Z+3	; 0x03
    77dc:	20 e0       	ldi	r18, 0x00	; 0
    77de:	3f ef       	ldi	r19, 0xFF	; 255
    77e0:	4f e7       	ldi	r20, 0x7F	; 127
    77e2:	57 e4       	ldi	r21, 0x47	; 71
    77e4:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    77e8:	18 16       	cp	r1, r24
    77ea:	0c f0       	brlt	.+2      	; 0x77ee <pick_drop+0x8dc>
    77ec:	10 e0       	ldi	r17, 0x00	; 0
    77ee:	11 23       	and	r17, r17
    77f0:	09 f4       	brne	.+2      	; 0x77f4 <pick_drop+0x8e2>
    77f2:	4d c0       	rjmp	.+154    	; 0x788e <pick_drop+0x97c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77f4:	ce 01       	movw	r24, r28
    77f6:	89 5a       	subi	r24, 0xA9	; 169
    77f8:	9f 4f       	sbci	r25, 0xFF	; 255
    77fa:	fc 01       	movw	r30, r24
    77fc:	60 81       	ld	r22, Z
    77fe:	71 81       	ldd	r23, Z+1	; 0x01
    7800:	82 81       	ldd	r24, Z+2	; 0x02
    7802:	93 81       	ldd	r25, Z+3	; 0x03
    7804:	20 e0       	ldi	r18, 0x00	; 0
    7806:	30 e0       	ldi	r19, 0x00	; 0
    7808:	40 e2       	ldi	r20, 0x20	; 32
    780a:	51 e4       	ldi	r21, 0x41	; 65
    780c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7810:	dc 01       	movw	r26, r24
    7812:	cb 01       	movw	r24, r22
    7814:	8e 01       	movw	r16, r28
    7816:	01 5a       	subi	r16, 0xA1	; 161
    7818:	1f 4f       	sbci	r17, 0xFF	; 255
    781a:	bc 01       	movw	r22, r24
    781c:	cd 01       	movw	r24, r26
    781e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7822:	dc 01       	movw	r26, r24
    7824:	cb 01       	movw	r24, r22
    7826:	f8 01       	movw	r30, r16
    7828:	91 83       	std	Z+1, r25	; 0x01
    782a:	80 83       	st	Z, r24
    782c:	27 c0       	rjmp	.+78     	; 0x787c <pick_drop+0x96a>
    782e:	ce 01       	movw	r24, r28
    7830:	8f 59       	subi	r24, 0x9F	; 159
    7832:	9f 4f       	sbci	r25, 0xFF	; 255
    7834:	20 e7       	ldi	r18, 0x70	; 112
    7836:	31 e0       	ldi	r19, 0x01	; 1
    7838:	fc 01       	movw	r30, r24
    783a:	31 83       	std	Z+1, r19	; 0x01
    783c:	20 83       	st	Z, r18
    783e:	ce 01       	movw	r24, r28
    7840:	8f 59       	subi	r24, 0x9F	; 159
    7842:	9f 4f       	sbci	r25, 0xFF	; 255
    7844:	fc 01       	movw	r30, r24
    7846:	80 81       	ld	r24, Z
    7848:	91 81       	ldd	r25, Z+1	; 0x01
    784a:	8c 01       	movw	r16, r24
    784c:	c8 01       	movw	r24, r16
    784e:	01 97       	sbiw	r24, 0x01	; 1
    7850:	f1 f7       	brne	.-4      	; 0x784e <pick_drop+0x93c>
    7852:	8c 01       	movw	r16, r24
    7854:	ce 01       	movw	r24, r28
    7856:	8f 59       	subi	r24, 0x9F	; 159
    7858:	9f 4f       	sbci	r25, 0xFF	; 255
    785a:	fc 01       	movw	r30, r24
    785c:	11 83       	std	Z+1, r17	; 0x01
    785e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7860:	ce 01       	movw	r24, r28
    7862:	81 5a       	subi	r24, 0xA1	; 161
    7864:	9f 4f       	sbci	r25, 0xFF	; 255
    7866:	9e 01       	movw	r18, r28
    7868:	21 5a       	subi	r18, 0xA1	; 161
    786a:	3f 4f       	sbci	r19, 0xFF	; 255
    786c:	f9 01       	movw	r30, r18
    786e:	20 81       	ld	r18, Z
    7870:	31 81       	ldd	r19, Z+1	; 0x01
    7872:	21 50       	subi	r18, 0x01	; 1
    7874:	30 40       	sbci	r19, 0x00	; 0
    7876:	fc 01       	movw	r30, r24
    7878:	31 83       	std	Z+1, r19	; 0x01
    787a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    787c:	ce 01       	movw	r24, r28
    787e:	81 5a       	subi	r24, 0xA1	; 161
    7880:	9f 4f       	sbci	r25, 0xFF	; 255
    7882:	fc 01       	movw	r30, r24
    7884:	80 81       	ld	r24, Z
    7886:	91 81       	ldd	r25, Z+1	; 0x01
    7888:	00 97       	sbiw	r24, 0x00	; 0
    788a:	89 f6       	brne	.-94     	; 0x782e <pick_drop+0x91c>
    788c:	2f c0       	rjmp	.+94     	; 0x78ec <pick_drop+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    788e:	8e 01       	movw	r16, r28
    7890:	01 5a       	subi	r16, 0xA1	; 161
    7892:	1f 4f       	sbci	r17, 0xFF	; 255
    7894:	ce 01       	movw	r24, r28
    7896:	85 5a       	subi	r24, 0xA5	; 165
    7898:	9f 4f       	sbci	r25, 0xFF	; 255
    789a:	fc 01       	movw	r30, r24
    789c:	60 81       	ld	r22, Z
    789e:	71 81       	ldd	r23, Z+1	; 0x01
    78a0:	82 81       	ldd	r24, Z+2	; 0x02
    78a2:	93 81       	ldd	r25, Z+3	; 0x03
    78a4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    78a8:	dc 01       	movw	r26, r24
    78aa:	cb 01       	movw	r24, r22
    78ac:	f8 01       	movw	r30, r16
    78ae:	91 83       	std	Z+1, r25	; 0x01
    78b0:	80 83       	st	Z, r24
    78b2:	ce 01       	movw	r24, r28
    78b4:	8d 59       	subi	r24, 0x9D	; 157
    78b6:	9f 4f       	sbci	r25, 0xFF	; 255
    78b8:	9e 01       	movw	r18, r28
    78ba:	21 5a       	subi	r18, 0xA1	; 161
    78bc:	3f 4f       	sbci	r19, 0xFF	; 255
    78be:	f9 01       	movw	r30, r18
    78c0:	20 81       	ld	r18, Z
    78c2:	31 81       	ldd	r19, Z+1	; 0x01
    78c4:	fc 01       	movw	r30, r24
    78c6:	31 83       	std	Z+1, r19	; 0x01
    78c8:	20 83       	st	Z, r18
    78ca:	ce 01       	movw	r24, r28
    78cc:	8d 59       	subi	r24, 0x9D	; 157
    78ce:	9f 4f       	sbci	r25, 0xFF	; 255
    78d0:	fc 01       	movw	r30, r24
    78d2:	80 81       	ld	r24, Z
    78d4:	91 81       	ldd	r25, Z+1	; 0x01
    78d6:	8c 01       	movw	r16, r24
    78d8:	c8 01       	movw	r24, r16
    78da:	01 97       	sbiw	r24, 0x01	; 1
    78dc:	f1 f7       	brne	.-4      	; 0x78da <pick_drop+0x9c8>
    78de:	8c 01       	movw	r16, r24
    78e0:	ce 01       	movw	r24, r28
    78e2:	8d 59       	subi	r24, 0x9D	; 157
    78e4:	9f 4f       	sbci	r25, 0xFF	; 255
    78e6:	fc 01       	movw	r30, r24
    78e8:	11 83       	std	Z+1, r17	; 0x01
    78ea:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_right();
    78ec:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			back_mm(pdback);
    78f0:	89 81       	ldd	r24, Y+1	; 0x01
    78f2:	9a 81       	ldd	r25, Y+2	; 0x02
    78f4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    78f8:	9e 01       	movw	r18, r28
    78fa:	2b 59       	subi	r18, 0x9B	; 155
    78fc:	3f 4f       	sbci	r19, 0xFF	; 255
    78fe:	80 e0       	ldi	r24, 0x00	; 0
    7900:	90 e0       	ldi	r25, 0x00	; 0
    7902:	a0 ea       	ldi	r26, 0xA0	; 160
    7904:	b1 e4       	ldi	r27, 0x41	; 65
    7906:	f9 01       	movw	r30, r18
    7908:	80 83       	st	Z, r24
    790a:	91 83       	std	Z+1, r25	; 0x01
    790c:	a2 83       	std	Z+2, r26	; 0x02
    790e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7910:	8e 01       	movw	r16, r28
    7912:	07 59       	subi	r16, 0x97	; 151
    7914:	1f 4f       	sbci	r17, 0xFF	; 255
    7916:	ce 01       	movw	r24, r28
    7918:	8b 59       	subi	r24, 0x9B	; 155
    791a:	9f 4f       	sbci	r25, 0xFF	; 255
    791c:	fc 01       	movw	r30, r24
    791e:	60 81       	ld	r22, Z
    7920:	71 81       	ldd	r23, Z+1	; 0x01
    7922:	82 81       	ldd	r24, Z+2	; 0x02
    7924:	93 81       	ldd	r25, Z+3	; 0x03
    7926:	26 e6       	ldi	r18, 0x66	; 102
    7928:	36 e6       	ldi	r19, 0x66	; 102
    792a:	46 e6       	ldi	r20, 0x66	; 102
    792c:	55 e4       	ldi	r21, 0x45	; 69
    792e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7932:	dc 01       	movw	r26, r24
    7934:	cb 01       	movw	r24, r22
    7936:	f8 01       	movw	r30, r16
    7938:	80 83       	st	Z, r24
    793a:	91 83       	std	Z+1, r25	; 0x01
    793c:	a2 83       	std	Z+2, r26	; 0x02
    793e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7940:	ce 01       	movw	r24, r28
    7942:	87 59       	subi	r24, 0x97	; 151
    7944:	9f 4f       	sbci	r25, 0xFF	; 255
    7946:	11 e0       	ldi	r17, 0x01	; 1
    7948:	fc 01       	movw	r30, r24
    794a:	60 81       	ld	r22, Z
    794c:	71 81       	ldd	r23, Z+1	; 0x01
    794e:	82 81       	ldd	r24, Z+2	; 0x02
    7950:	93 81       	ldd	r25, Z+3	; 0x03
    7952:	20 e0       	ldi	r18, 0x00	; 0
    7954:	30 e0       	ldi	r19, 0x00	; 0
    7956:	40 e8       	ldi	r20, 0x80	; 128
    7958:	5f e3       	ldi	r21, 0x3F	; 63
    795a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    795e:	88 23       	and	r24, r24
    7960:	0c f0       	brlt	.+2      	; 0x7964 <pick_drop+0xa52>
    7962:	10 e0       	ldi	r17, 0x00	; 0
    7964:	11 23       	and	r17, r17
    7966:	49 f0       	breq	.+18     	; 0x797a <pick_drop+0xa68>
		__ticks = 1;
    7968:	ce 01       	movw	r24, r28
    796a:	83 59       	subi	r24, 0x93	; 147
    796c:	9f 4f       	sbci	r25, 0xFF	; 255
    796e:	21 e0       	ldi	r18, 0x01	; 1
    7970:	30 e0       	ldi	r19, 0x00	; 0
    7972:	fc 01       	movw	r30, r24
    7974:	31 83       	std	Z+1, r19	; 0x01
    7976:	20 83       	st	Z, r18
    7978:	74 c0       	rjmp	.+232    	; 0x7a62 <pick_drop+0xb50>
	else if (__tmp > 65535)
    797a:	ce 01       	movw	r24, r28
    797c:	87 59       	subi	r24, 0x97	; 151
    797e:	9f 4f       	sbci	r25, 0xFF	; 255
    7980:	11 e0       	ldi	r17, 0x01	; 1
    7982:	fc 01       	movw	r30, r24
    7984:	60 81       	ld	r22, Z
    7986:	71 81       	ldd	r23, Z+1	; 0x01
    7988:	82 81       	ldd	r24, Z+2	; 0x02
    798a:	93 81       	ldd	r25, Z+3	; 0x03
    798c:	20 e0       	ldi	r18, 0x00	; 0
    798e:	3f ef       	ldi	r19, 0xFF	; 255
    7990:	4f e7       	ldi	r20, 0x7F	; 127
    7992:	57 e4       	ldi	r21, 0x47	; 71
    7994:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7998:	18 16       	cp	r1, r24
    799a:	0c f0       	brlt	.+2      	; 0x799e <pick_drop+0xa8c>
    799c:	10 e0       	ldi	r17, 0x00	; 0
    799e:	11 23       	and	r17, r17
    79a0:	09 f4       	brne	.+2      	; 0x79a4 <pick_drop+0xa92>
    79a2:	4d c0       	rjmp	.+154    	; 0x7a3e <pick_drop+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    79a4:	ce 01       	movw	r24, r28
    79a6:	8b 59       	subi	r24, 0x9B	; 155
    79a8:	9f 4f       	sbci	r25, 0xFF	; 255
    79aa:	fc 01       	movw	r30, r24
    79ac:	60 81       	ld	r22, Z
    79ae:	71 81       	ldd	r23, Z+1	; 0x01
    79b0:	82 81       	ldd	r24, Z+2	; 0x02
    79b2:	93 81       	ldd	r25, Z+3	; 0x03
    79b4:	20 e0       	ldi	r18, 0x00	; 0
    79b6:	30 e0       	ldi	r19, 0x00	; 0
    79b8:	40 e2       	ldi	r20, 0x20	; 32
    79ba:	51 e4       	ldi	r21, 0x41	; 65
    79bc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    79c0:	dc 01       	movw	r26, r24
    79c2:	cb 01       	movw	r24, r22
    79c4:	8e 01       	movw	r16, r28
    79c6:	03 59       	subi	r16, 0x93	; 147
    79c8:	1f 4f       	sbci	r17, 0xFF	; 255
    79ca:	bc 01       	movw	r22, r24
    79cc:	cd 01       	movw	r24, r26
    79ce:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    79d2:	dc 01       	movw	r26, r24
    79d4:	cb 01       	movw	r24, r22
    79d6:	f8 01       	movw	r30, r16
    79d8:	91 83       	std	Z+1, r25	; 0x01
    79da:	80 83       	st	Z, r24
    79dc:	27 c0       	rjmp	.+78     	; 0x7a2c <pick_drop+0xb1a>
    79de:	ce 01       	movw	r24, r28
    79e0:	81 59       	subi	r24, 0x91	; 145
    79e2:	9f 4f       	sbci	r25, 0xFF	; 255
    79e4:	20 e7       	ldi	r18, 0x70	; 112
    79e6:	31 e0       	ldi	r19, 0x01	; 1
    79e8:	fc 01       	movw	r30, r24
    79ea:	31 83       	std	Z+1, r19	; 0x01
    79ec:	20 83       	st	Z, r18
    79ee:	ce 01       	movw	r24, r28
    79f0:	81 59       	subi	r24, 0x91	; 145
    79f2:	9f 4f       	sbci	r25, 0xFF	; 255
    79f4:	fc 01       	movw	r30, r24
    79f6:	80 81       	ld	r24, Z
    79f8:	91 81       	ldd	r25, Z+1	; 0x01
    79fa:	8c 01       	movw	r16, r24
    79fc:	c8 01       	movw	r24, r16
    79fe:	01 97       	sbiw	r24, 0x01	; 1
    7a00:	f1 f7       	brne	.-4      	; 0x79fe <pick_drop+0xaec>
    7a02:	8c 01       	movw	r16, r24
    7a04:	ce 01       	movw	r24, r28
    7a06:	81 59       	subi	r24, 0x91	; 145
    7a08:	9f 4f       	sbci	r25, 0xFF	; 255
    7a0a:	fc 01       	movw	r30, r24
    7a0c:	11 83       	std	Z+1, r17	; 0x01
    7a0e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7a10:	ce 01       	movw	r24, r28
    7a12:	83 59       	subi	r24, 0x93	; 147
    7a14:	9f 4f       	sbci	r25, 0xFF	; 255
    7a16:	9e 01       	movw	r18, r28
    7a18:	23 59       	subi	r18, 0x93	; 147
    7a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a1c:	f9 01       	movw	r30, r18
    7a1e:	20 81       	ld	r18, Z
    7a20:	31 81       	ldd	r19, Z+1	; 0x01
    7a22:	21 50       	subi	r18, 0x01	; 1
    7a24:	30 40       	sbci	r19, 0x00	; 0
    7a26:	fc 01       	movw	r30, r24
    7a28:	31 83       	std	Z+1, r19	; 0x01
    7a2a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a2c:	ce 01       	movw	r24, r28
    7a2e:	83 59       	subi	r24, 0x93	; 147
    7a30:	9f 4f       	sbci	r25, 0xFF	; 255
    7a32:	fc 01       	movw	r30, r24
    7a34:	80 81       	ld	r24, Z
    7a36:	91 81       	ldd	r25, Z+1	; 0x01
    7a38:	00 97       	sbiw	r24, 0x00	; 0
    7a3a:	89 f6       	brne	.-94     	; 0x79de <pick_drop+0xacc>
    7a3c:	1d c6       	rjmp	.+3130   	; 0x8678 <pick_drop+0x1766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a3e:	8e 01       	movw	r16, r28
    7a40:	03 59       	subi	r16, 0x93	; 147
    7a42:	1f 4f       	sbci	r17, 0xFF	; 255
    7a44:	ce 01       	movw	r24, r28
    7a46:	87 59       	subi	r24, 0x97	; 151
    7a48:	9f 4f       	sbci	r25, 0xFF	; 255
    7a4a:	fc 01       	movw	r30, r24
    7a4c:	60 81       	ld	r22, Z
    7a4e:	71 81       	ldd	r23, Z+1	; 0x01
    7a50:	82 81       	ldd	r24, Z+2	; 0x02
    7a52:	93 81       	ldd	r25, Z+3	; 0x03
    7a54:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7a58:	dc 01       	movw	r26, r24
    7a5a:	cb 01       	movw	r24, r22
    7a5c:	f8 01       	movw	r30, r16
    7a5e:	91 83       	std	Z+1, r25	; 0x01
    7a60:	80 83       	st	Z, r24
    7a62:	ce 01       	movw	r24, r28
    7a64:	8f 58       	subi	r24, 0x8F	; 143
    7a66:	9f 4f       	sbci	r25, 0xFF	; 255
    7a68:	9e 01       	movw	r18, r28
    7a6a:	23 59       	subi	r18, 0x93	; 147
    7a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a6e:	f9 01       	movw	r30, r18
    7a70:	20 81       	ld	r18, Z
    7a72:	31 81       	ldd	r19, Z+1	; 0x01
    7a74:	fc 01       	movw	r30, r24
    7a76:	31 83       	std	Z+1, r19	; 0x01
    7a78:	20 83       	st	Z, r18
    7a7a:	ce 01       	movw	r24, r28
    7a7c:	8f 58       	subi	r24, 0x8F	; 143
    7a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    7a80:	fc 01       	movw	r30, r24
    7a82:	80 81       	ld	r24, Z
    7a84:	91 81       	ldd	r25, Z+1	; 0x01
    7a86:	8c 01       	movw	r16, r24
    7a88:	c8 01       	movw	r24, r16
    7a8a:	01 97       	sbiw	r24, 0x01	; 1
    7a8c:	f1 f7       	brne	.-4      	; 0x7a8a <pick_drop+0xb78>
    7a8e:	8c 01       	movw	r16, r24
    7a90:	ce 01       	movw	r24, r28
    7a92:	8f 58       	subi	r24, 0x8F	; 143
    7a94:	9f 4f       	sbci	r25, 0xFF	; 255
    7a96:	fc 01       	movw	r30, r24
    7a98:	11 83       	std	Z+1, r17	; 0x01
    7a9a:	00 83       	st	Z, r16
    7a9c:	ed c5       	rjmp	.+3034   	; 0x8678 <pick_drop+0x1766>
			_delay_ms(20);
			}
			else if(master_path[node-1] == 'N')
    7a9e:	80 91 71 03 	lds	r24, 0x0371
    7aa2:	90 91 72 03 	lds	r25, 0x0372
    7aa6:	01 97       	sbiw	r24, 0x01	; 1
    7aa8:	8b 58       	subi	r24, 0x8B	; 139
    7aaa:	9c 4f       	sbci	r25, 0xFC	; 252
    7aac:	fc 01       	movw	r30, r24
    7aae:	80 81       	ld	r24, Z
    7ab0:	8e 34       	cpi	r24, 0x4E	; 78
    7ab2:	09 f0       	breq	.+2      	; 0x7ab6 <pick_drop+0xba4>
    7ab4:	57 c3       	rjmp	.+1710   	; 0x8164 <pick_drop+0x1252>
			{
					//left_cycle();
					forward_mm(140);
    7ab6:	8c e8       	ldi	r24, 0x8C	; 140
    7ab8:	90 e0       	ldi	r25, 0x00	; 0
    7aba:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7abe:	9e 01       	movw	r18, r28
    7ac0:	2d 58       	subi	r18, 0x8D	; 141
    7ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ac4:	80 e0       	ldi	r24, 0x00	; 0
    7ac6:	90 e0       	ldi	r25, 0x00	; 0
    7ac8:	a0 ea       	ldi	r26, 0xA0	; 160
    7aca:	b1 e4       	ldi	r27, 0x41	; 65
    7acc:	f9 01       	movw	r30, r18
    7ace:	80 83       	st	Z, r24
    7ad0:	91 83       	std	Z+1, r25	; 0x01
    7ad2:	a2 83       	std	Z+2, r26	; 0x02
    7ad4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7ad6:	8e 01       	movw	r16, r28
    7ad8:	09 58       	subi	r16, 0x89	; 137
    7ada:	1f 4f       	sbci	r17, 0xFF	; 255
    7adc:	ce 01       	movw	r24, r28
    7ade:	8d 58       	subi	r24, 0x8D	; 141
    7ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    7ae2:	fc 01       	movw	r30, r24
    7ae4:	60 81       	ld	r22, Z
    7ae6:	71 81       	ldd	r23, Z+1	; 0x01
    7ae8:	82 81       	ldd	r24, Z+2	; 0x02
    7aea:	93 81       	ldd	r25, Z+3	; 0x03
    7aec:	26 e6       	ldi	r18, 0x66	; 102
    7aee:	36 e6       	ldi	r19, 0x66	; 102
    7af0:	46 e6       	ldi	r20, 0x66	; 102
    7af2:	55 e4       	ldi	r21, 0x45	; 69
    7af4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7af8:	dc 01       	movw	r26, r24
    7afa:	cb 01       	movw	r24, r22
    7afc:	f8 01       	movw	r30, r16
    7afe:	80 83       	st	Z, r24
    7b00:	91 83       	std	Z+1, r25	; 0x01
    7b02:	a2 83       	std	Z+2, r26	; 0x02
    7b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7b06:	ce 01       	movw	r24, r28
    7b08:	89 58       	subi	r24, 0x89	; 137
    7b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b0c:	11 e0       	ldi	r17, 0x01	; 1
    7b0e:	fc 01       	movw	r30, r24
    7b10:	60 81       	ld	r22, Z
    7b12:	71 81       	ldd	r23, Z+1	; 0x01
    7b14:	82 81       	ldd	r24, Z+2	; 0x02
    7b16:	93 81       	ldd	r25, Z+3	; 0x03
    7b18:	20 e0       	ldi	r18, 0x00	; 0
    7b1a:	30 e0       	ldi	r19, 0x00	; 0
    7b1c:	40 e8       	ldi	r20, 0x80	; 128
    7b1e:	5f e3       	ldi	r21, 0x3F	; 63
    7b20:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    7b24:	88 23       	and	r24, r24
    7b26:	0c f0       	brlt	.+2      	; 0x7b2a <pick_drop+0xc18>
    7b28:	10 e0       	ldi	r17, 0x00	; 0
    7b2a:	11 23       	and	r17, r17
    7b2c:	49 f0       	breq	.+18     	; 0x7b40 <pick_drop+0xc2e>
		__ticks = 1;
    7b2e:	ce 01       	movw	r24, r28
    7b30:	85 58       	subi	r24, 0x85	; 133
    7b32:	9f 4f       	sbci	r25, 0xFF	; 255
    7b34:	21 e0       	ldi	r18, 0x01	; 1
    7b36:	30 e0       	ldi	r19, 0x00	; 0
    7b38:	fc 01       	movw	r30, r24
    7b3a:	31 83       	std	Z+1, r19	; 0x01
    7b3c:	20 83       	st	Z, r18
    7b3e:	74 c0       	rjmp	.+232    	; 0x7c28 <pick_drop+0xd16>
	else if (__tmp > 65535)
    7b40:	ce 01       	movw	r24, r28
    7b42:	89 58       	subi	r24, 0x89	; 137
    7b44:	9f 4f       	sbci	r25, 0xFF	; 255
    7b46:	11 e0       	ldi	r17, 0x01	; 1
    7b48:	fc 01       	movw	r30, r24
    7b4a:	60 81       	ld	r22, Z
    7b4c:	71 81       	ldd	r23, Z+1	; 0x01
    7b4e:	82 81       	ldd	r24, Z+2	; 0x02
    7b50:	93 81       	ldd	r25, Z+3	; 0x03
    7b52:	20 e0       	ldi	r18, 0x00	; 0
    7b54:	3f ef       	ldi	r19, 0xFF	; 255
    7b56:	4f e7       	ldi	r20, 0x7F	; 127
    7b58:	57 e4       	ldi	r21, 0x47	; 71
    7b5a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7b5e:	18 16       	cp	r1, r24
    7b60:	0c f0       	brlt	.+2      	; 0x7b64 <pick_drop+0xc52>
    7b62:	10 e0       	ldi	r17, 0x00	; 0
    7b64:	11 23       	and	r17, r17
    7b66:	09 f4       	brne	.+2      	; 0x7b6a <pick_drop+0xc58>
    7b68:	4d c0       	rjmp	.+154    	; 0x7c04 <pick_drop+0xcf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b6a:	ce 01       	movw	r24, r28
    7b6c:	8d 58       	subi	r24, 0x8D	; 141
    7b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b70:	fc 01       	movw	r30, r24
    7b72:	60 81       	ld	r22, Z
    7b74:	71 81       	ldd	r23, Z+1	; 0x01
    7b76:	82 81       	ldd	r24, Z+2	; 0x02
    7b78:	93 81       	ldd	r25, Z+3	; 0x03
    7b7a:	20 e0       	ldi	r18, 0x00	; 0
    7b7c:	30 e0       	ldi	r19, 0x00	; 0
    7b7e:	40 e2       	ldi	r20, 0x20	; 32
    7b80:	51 e4       	ldi	r21, 0x41	; 65
    7b82:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7b86:	dc 01       	movw	r26, r24
    7b88:	cb 01       	movw	r24, r22
    7b8a:	8e 01       	movw	r16, r28
    7b8c:	05 58       	subi	r16, 0x85	; 133
    7b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    7b90:	bc 01       	movw	r22, r24
    7b92:	cd 01       	movw	r24, r26
    7b94:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7b98:	dc 01       	movw	r26, r24
    7b9a:	cb 01       	movw	r24, r22
    7b9c:	f8 01       	movw	r30, r16
    7b9e:	91 83       	std	Z+1, r25	; 0x01
    7ba0:	80 83       	st	Z, r24
    7ba2:	27 c0       	rjmp	.+78     	; 0x7bf2 <pick_drop+0xce0>
    7ba4:	ce 01       	movw	r24, r28
    7ba6:	83 58       	subi	r24, 0x83	; 131
    7ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    7baa:	20 e7       	ldi	r18, 0x70	; 112
    7bac:	31 e0       	ldi	r19, 0x01	; 1
    7bae:	fc 01       	movw	r30, r24
    7bb0:	31 83       	std	Z+1, r19	; 0x01
    7bb2:	20 83       	st	Z, r18
    7bb4:	ce 01       	movw	r24, r28
    7bb6:	83 58       	subi	r24, 0x83	; 131
    7bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bba:	fc 01       	movw	r30, r24
    7bbc:	80 81       	ld	r24, Z
    7bbe:	91 81       	ldd	r25, Z+1	; 0x01
    7bc0:	8c 01       	movw	r16, r24
    7bc2:	c8 01       	movw	r24, r16
    7bc4:	01 97       	sbiw	r24, 0x01	; 1
    7bc6:	f1 f7       	brne	.-4      	; 0x7bc4 <pick_drop+0xcb2>
    7bc8:	8c 01       	movw	r16, r24
    7bca:	ce 01       	movw	r24, r28
    7bcc:	83 58       	subi	r24, 0x83	; 131
    7bce:	9f 4f       	sbci	r25, 0xFF	; 255
    7bd0:	fc 01       	movw	r30, r24
    7bd2:	11 83       	std	Z+1, r17	; 0x01
    7bd4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bd6:	ce 01       	movw	r24, r28
    7bd8:	85 58       	subi	r24, 0x85	; 133
    7bda:	9f 4f       	sbci	r25, 0xFF	; 255
    7bdc:	9e 01       	movw	r18, r28
    7bde:	25 58       	subi	r18, 0x85	; 133
    7be0:	3f 4f       	sbci	r19, 0xFF	; 255
    7be2:	f9 01       	movw	r30, r18
    7be4:	20 81       	ld	r18, Z
    7be6:	31 81       	ldd	r19, Z+1	; 0x01
    7be8:	21 50       	subi	r18, 0x01	; 1
    7bea:	30 40       	sbci	r19, 0x00	; 0
    7bec:	fc 01       	movw	r30, r24
    7bee:	31 83       	std	Z+1, r19	; 0x01
    7bf0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7bf2:	ce 01       	movw	r24, r28
    7bf4:	85 58       	subi	r24, 0x85	; 133
    7bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    7bf8:	fc 01       	movw	r30, r24
    7bfa:	80 81       	ld	r24, Z
    7bfc:	91 81       	ldd	r25, Z+1	; 0x01
    7bfe:	00 97       	sbiw	r24, 0x00	; 0
    7c00:	89 f6       	brne	.-94     	; 0x7ba4 <pick_drop+0xc92>
    7c02:	2f c0       	rjmp	.+94     	; 0x7c62 <pick_drop+0xd50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c04:	8e 01       	movw	r16, r28
    7c06:	05 58       	subi	r16, 0x85	; 133
    7c08:	1f 4f       	sbci	r17, 0xFF	; 255
    7c0a:	ce 01       	movw	r24, r28
    7c0c:	89 58       	subi	r24, 0x89	; 137
    7c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c10:	fc 01       	movw	r30, r24
    7c12:	60 81       	ld	r22, Z
    7c14:	71 81       	ldd	r23, Z+1	; 0x01
    7c16:	82 81       	ldd	r24, Z+2	; 0x02
    7c18:	93 81       	ldd	r25, Z+3	; 0x03
    7c1a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7c1e:	dc 01       	movw	r26, r24
    7c20:	cb 01       	movw	r24, r22
    7c22:	f8 01       	movw	r30, r16
    7c24:	91 83       	std	Z+1, r25	; 0x01
    7c26:	80 83       	st	Z, r24
    7c28:	ce 01       	movw	r24, r28
    7c2a:	81 58       	subi	r24, 0x81	; 129
    7c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c2e:	9e 01       	movw	r18, r28
    7c30:	25 58       	subi	r18, 0x85	; 133
    7c32:	3f 4f       	sbci	r19, 0xFF	; 255
    7c34:	f9 01       	movw	r30, r18
    7c36:	20 81       	ld	r18, Z
    7c38:	31 81       	ldd	r19, Z+1	; 0x01
    7c3a:	fc 01       	movw	r30, r24
    7c3c:	31 83       	std	Z+1, r19	; 0x01
    7c3e:	20 83       	st	Z, r18
    7c40:	ce 01       	movw	r24, r28
    7c42:	81 58       	subi	r24, 0x81	; 129
    7c44:	9f 4f       	sbci	r25, 0xFF	; 255
    7c46:	fc 01       	movw	r30, r24
    7c48:	80 81       	ld	r24, Z
    7c4a:	91 81       	ldd	r25, Z+1	; 0x01
    7c4c:	8c 01       	movw	r16, r24
    7c4e:	c8 01       	movw	r24, r16
    7c50:	01 97       	sbiw	r24, 0x01	; 1
    7c52:	f1 f7       	brne	.-4      	; 0x7c50 <pick_drop+0xd3e>
    7c54:	8c 01       	movw	r16, r24
    7c56:	ce 01       	movw	r24, r28
    7c58:	81 58       	subi	r24, 0x81	; 129
    7c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c5c:	fc 01       	movw	r30, r24
    7c5e:	11 83       	std	Z+1, r17	; 0x01
    7c60:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_left2();
    7c62:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    7c66:	9e 01       	movw	r18, r28
    7c68:	2f 57       	subi	r18, 0x7F	; 127
    7c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c6c:	80 e0       	ldi	r24, 0x00	; 0
    7c6e:	90 e0       	ldi	r25, 0x00	; 0
    7c70:	a8 e4       	ldi	r26, 0x48	; 72
    7c72:	b2 e4       	ldi	r27, 0x42	; 66
    7c74:	f9 01       	movw	r30, r18
    7c76:	80 83       	st	Z, r24
    7c78:	91 83       	std	Z+1, r25	; 0x01
    7c7a:	a2 83       	std	Z+2, r26	; 0x02
    7c7c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7c7e:	8e 01       	movw	r16, r28
    7c80:	0b 57       	subi	r16, 0x7B	; 123
    7c82:	1f 4f       	sbci	r17, 0xFF	; 255
    7c84:	ce 01       	movw	r24, r28
    7c86:	8f 57       	subi	r24, 0x7F	; 127
    7c88:	9f 4f       	sbci	r25, 0xFF	; 255
    7c8a:	fc 01       	movw	r30, r24
    7c8c:	60 81       	ld	r22, Z
    7c8e:	71 81       	ldd	r23, Z+1	; 0x01
    7c90:	82 81       	ldd	r24, Z+2	; 0x02
    7c92:	93 81       	ldd	r25, Z+3	; 0x03
    7c94:	26 e6       	ldi	r18, 0x66	; 102
    7c96:	36 e6       	ldi	r19, 0x66	; 102
    7c98:	46 e6       	ldi	r20, 0x66	; 102
    7c9a:	55 e4       	ldi	r21, 0x45	; 69
    7c9c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7ca0:	dc 01       	movw	r26, r24
    7ca2:	cb 01       	movw	r24, r22
    7ca4:	f8 01       	movw	r30, r16
    7ca6:	80 83       	st	Z, r24
    7ca8:	91 83       	std	Z+1, r25	; 0x01
    7caa:	a2 83       	std	Z+2, r26	; 0x02
    7cac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7cae:	ce 01       	movw	r24, r28
    7cb0:	8b 57       	subi	r24, 0x7B	; 123
    7cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb4:	11 e0       	ldi	r17, 0x01	; 1
    7cb6:	fc 01       	movw	r30, r24
    7cb8:	60 81       	ld	r22, Z
    7cba:	71 81       	ldd	r23, Z+1	; 0x01
    7cbc:	82 81       	ldd	r24, Z+2	; 0x02
    7cbe:	93 81       	ldd	r25, Z+3	; 0x03
    7cc0:	20 e0       	ldi	r18, 0x00	; 0
    7cc2:	30 e0       	ldi	r19, 0x00	; 0
    7cc4:	40 e8       	ldi	r20, 0x80	; 128
    7cc6:	5f e3       	ldi	r21, 0x3F	; 63
    7cc8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    7ccc:	88 23       	and	r24, r24
    7cce:	0c f0       	brlt	.+2      	; 0x7cd2 <pick_drop+0xdc0>
    7cd0:	10 e0       	ldi	r17, 0x00	; 0
    7cd2:	11 23       	and	r17, r17
    7cd4:	49 f0       	breq	.+18     	; 0x7ce8 <pick_drop+0xdd6>
		__ticks = 1;
    7cd6:	ce 01       	movw	r24, r28
    7cd8:	87 57       	subi	r24, 0x77	; 119
    7cda:	9f 4f       	sbci	r25, 0xFF	; 255
    7cdc:	21 e0       	ldi	r18, 0x01	; 1
    7cde:	30 e0       	ldi	r19, 0x00	; 0
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	31 83       	std	Z+1, r19	; 0x01
    7ce4:	20 83       	st	Z, r18
    7ce6:	74 c0       	rjmp	.+232    	; 0x7dd0 <pick_drop+0xebe>
	else if (__tmp > 65535)
    7ce8:	ce 01       	movw	r24, r28
    7cea:	8b 57       	subi	r24, 0x7B	; 123
    7cec:	9f 4f       	sbci	r25, 0xFF	; 255
    7cee:	11 e0       	ldi	r17, 0x01	; 1
    7cf0:	fc 01       	movw	r30, r24
    7cf2:	60 81       	ld	r22, Z
    7cf4:	71 81       	ldd	r23, Z+1	; 0x01
    7cf6:	82 81       	ldd	r24, Z+2	; 0x02
    7cf8:	93 81       	ldd	r25, Z+3	; 0x03
    7cfa:	20 e0       	ldi	r18, 0x00	; 0
    7cfc:	3f ef       	ldi	r19, 0xFF	; 255
    7cfe:	4f e7       	ldi	r20, 0x7F	; 127
    7d00:	57 e4       	ldi	r21, 0x47	; 71
    7d02:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7d06:	18 16       	cp	r1, r24
    7d08:	0c f0       	brlt	.+2      	; 0x7d0c <pick_drop+0xdfa>
    7d0a:	10 e0       	ldi	r17, 0x00	; 0
    7d0c:	11 23       	and	r17, r17
    7d0e:	09 f4       	brne	.+2      	; 0x7d12 <pick_drop+0xe00>
    7d10:	4d c0       	rjmp	.+154    	; 0x7dac <pick_drop+0xe9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d12:	ce 01       	movw	r24, r28
    7d14:	8f 57       	subi	r24, 0x7F	; 127
    7d16:	9f 4f       	sbci	r25, 0xFF	; 255
    7d18:	fc 01       	movw	r30, r24
    7d1a:	60 81       	ld	r22, Z
    7d1c:	71 81       	ldd	r23, Z+1	; 0x01
    7d1e:	82 81       	ldd	r24, Z+2	; 0x02
    7d20:	93 81       	ldd	r25, Z+3	; 0x03
    7d22:	20 e0       	ldi	r18, 0x00	; 0
    7d24:	30 e0       	ldi	r19, 0x00	; 0
    7d26:	40 e2       	ldi	r20, 0x20	; 32
    7d28:	51 e4       	ldi	r21, 0x41	; 65
    7d2a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7d2e:	dc 01       	movw	r26, r24
    7d30:	cb 01       	movw	r24, r22
    7d32:	8e 01       	movw	r16, r28
    7d34:	07 57       	subi	r16, 0x77	; 119
    7d36:	1f 4f       	sbci	r17, 0xFF	; 255
    7d38:	bc 01       	movw	r22, r24
    7d3a:	cd 01       	movw	r24, r26
    7d3c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7d40:	dc 01       	movw	r26, r24
    7d42:	cb 01       	movw	r24, r22
    7d44:	f8 01       	movw	r30, r16
    7d46:	91 83       	std	Z+1, r25	; 0x01
    7d48:	80 83       	st	Z, r24
    7d4a:	27 c0       	rjmp	.+78     	; 0x7d9a <pick_drop+0xe88>
    7d4c:	ce 01       	movw	r24, r28
    7d4e:	85 57       	subi	r24, 0x75	; 117
    7d50:	9f 4f       	sbci	r25, 0xFF	; 255
    7d52:	20 e7       	ldi	r18, 0x70	; 112
    7d54:	31 e0       	ldi	r19, 0x01	; 1
    7d56:	fc 01       	movw	r30, r24
    7d58:	31 83       	std	Z+1, r19	; 0x01
    7d5a:	20 83       	st	Z, r18
    7d5c:	ce 01       	movw	r24, r28
    7d5e:	85 57       	subi	r24, 0x75	; 117
    7d60:	9f 4f       	sbci	r25, 0xFF	; 255
    7d62:	fc 01       	movw	r30, r24
    7d64:	80 81       	ld	r24, Z
    7d66:	91 81       	ldd	r25, Z+1	; 0x01
    7d68:	8c 01       	movw	r16, r24
    7d6a:	c8 01       	movw	r24, r16
    7d6c:	01 97       	sbiw	r24, 0x01	; 1
    7d6e:	f1 f7       	brne	.-4      	; 0x7d6c <pick_drop+0xe5a>
    7d70:	8c 01       	movw	r16, r24
    7d72:	ce 01       	movw	r24, r28
    7d74:	85 57       	subi	r24, 0x75	; 117
    7d76:	9f 4f       	sbci	r25, 0xFF	; 255
    7d78:	fc 01       	movw	r30, r24
    7d7a:	11 83       	std	Z+1, r17	; 0x01
    7d7c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d7e:	ce 01       	movw	r24, r28
    7d80:	87 57       	subi	r24, 0x77	; 119
    7d82:	9f 4f       	sbci	r25, 0xFF	; 255
    7d84:	9e 01       	movw	r18, r28
    7d86:	27 57       	subi	r18, 0x77	; 119
    7d88:	3f 4f       	sbci	r19, 0xFF	; 255
    7d8a:	f9 01       	movw	r30, r18
    7d8c:	20 81       	ld	r18, Z
    7d8e:	31 81       	ldd	r19, Z+1	; 0x01
    7d90:	21 50       	subi	r18, 0x01	; 1
    7d92:	30 40       	sbci	r19, 0x00	; 0
    7d94:	fc 01       	movw	r30, r24
    7d96:	31 83       	std	Z+1, r19	; 0x01
    7d98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d9a:	ce 01       	movw	r24, r28
    7d9c:	87 57       	subi	r24, 0x77	; 119
    7d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    7da0:	fc 01       	movw	r30, r24
    7da2:	80 81       	ld	r24, Z
    7da4:	91 81       	ldd	r25, Z+1	; 0x01
    7da6:	00 97       	sbiw	r24, 0x00	; 0
    7da8:	89 f6       	brne	.-94     	; 0x7d4c <pick_drop+0xe3a>
    7daa:	2f c0       	rjmp	.+94     	; 0x7e0a <pick_drop+0xef8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7dac:	8e 01       	movw	r16, r28
    7dae:	07 57       	subi	r16, 0x77	; 119
    7db0:	1f 4f       	sbci	r17, 0xFF	; 255
    7db2:	ce 01       	movw	r24, r28
    7db4:	8b 57       	subi	r24, 0x7B	; 123
    7db6:	9f 4f       	sbci	r25, 0xFF	; 255
    7db8:	fc 01       	movw	r30, r24
    7dba:	60 81       	ld	r22, Z
    7dbc:	71 81       	ldd	r23, Z+1	; 0x01
    7dbe:	82 81       	ldd	r24, Z+2	; 0x02
    7dc0:	93 81       	ldd	r25, Z+3	; 0x03
    7dc2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7dc6:	dc 01       	movw	r26, r24
    7dc8:	cb 01       	movw	r24, r22
    7dca:	f8 01       	movw	r30, r16
    7dcc:	91 83       	std	Z+1, r25	; 0x01
    7dce:	80 83       	st	Z, r24
    7dd0:	ce 01       	movw	r24, r28
    7dd2:	83 57       	subi	r24, 0x73	; 115
    7dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    7dd6:	9e 01       	movw	r18, r28
    7dd8:	27 57       	subi	r18, 0x77	; 119
    7dda:	3f 4f       	sbci	r19, 0xFF	; 255
    7ddc:	f9 01       	movw	r30, r18
    7dde:	20 81       	ld	r18, Z
    7de0:	31 81       	ldd	r19, Z+1	; 0x01
    7de2:	fc 01       	movw	r30, r24
    7de4:	31 83       	std	Z+1, r19	; 0x01
    7de6:	20 83       	st	Z, r18
    7de8:	ce 01       	movw	r24, r28
    7dea:	83 57       	subi	r24, 0x73	; 115
    7dec:	9f 4f       	sbci	r25, 0xFF	; 255
    7dee:	fc 01       	movw	r30, r24
    7df0:	80 81       	ld	r24, Z
    7df2:	91 81       	ldd	r25, Z+1	; 0x01
    7df4:	8c 01       	movw	r16, r24
    7df6:	c8 01       	movw	r24, r16
    7df8:	01 97       	sbiw	r24, 0x01	; 1
    7dfa:	f1 f7       	brne	.-4      	; 0x7df8 <pick_drop+0xee6>
    7dfc:	8c 01       	movw	r16, r24
    7dfe:	ce 01       	movw	r24, r28
    7e00:	83 57       	subi	r24, 0x73	; 115
    7e02:	9f 4f       	sbci	r25, 0xFF	; 255
    7e04:	fc 01       	movw	r30, r24
    7e06:	11 83       	std	Z+1, r17	; 0x01
    7e08:	00 83       	st	Z, r16
					_delay_ms(50);
					front();
    7e0a:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    7e0e:	9e 01       	movw	r18, r28
    7e10:	21 57       	subi	r18, 0x71	; 113
    7e12:	3f 4f       	sbci	r19, 0xFF	; 255
    7e14:	80 e0       	ldi	r24, 0x00	; 0
    7e16:	90 e0       	ldi	r25, 0x00	; 0
    7e18:	a8 ec       	ldi	r26, 0xC8	; 200
    7e1a:	b2 e4       	ldi	r27, 0x42	; 66
    7e1c:	f9 01       	movw	r30, r18
    7e1e:	80 83       	st	Z, r24
    7e20:	91 83       	std	Z+1, r25	; 0x01
    7e22:	a2 83       	std	Z+2, r26	; 0x02
    7e24:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7e26:	8e 01       	movw	r16, r28
    7e28:	0d 56       	subi	r16, 0x6D	; 109
    7e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e2c:	ce 01       	movw	r24, r28
    7e2e:	81 57       	subi	r24, 0x71	; 113
    7e30:	9f 4f       	sbci	r25, 0xFF	; 255
    7e32:	fc 01       	movw	r30, r24
    7e34:	60 81       	ld	r22, Z
    7e36:	71 81       	ldd	r23, Z+1	; 0x01
    7e38:	82 81       	ldd	r24, Z+2	; 0x02
    7e3a:	93 81       	ldd	r25, Z+3	; 0x03
    7e3c:	26 e6       	ldi	r18, 0x66	; 102
    7e3e:	36 e6       	ldi	r19, 0x66	; 102
    7e40:	46 e6       	ldi	r20, 0x66	; 102
    7e42:	55 e4       	ldi	r21, 0x45	; 69
    7e44:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7e48:	dc 01       	movw	r26, r24
    7e4a:	cb 01       	movw	r24, r22
    7e4c:	f8 01       	movw	r30, r16
    7e4e:	80 83       	st	Z, r24
    7e50:	91 83       	std	Z+1, r25	; 0x01
    7e52:	a2 83       	std	Z+2, r26	; 0x02
    7e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7e56:	ce 01       	movw	r24, r28
    7e58:	8d 56       	subi	r24, 0x6D	; 109
    7e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    7e5c:	11 e0       	ldi	r17, 0x01	; 1
    7e5e:	fc 01       	movw	r30, r24
    7e60:	60 81       	ld	r22, Z
    7e62:	71 81       	ldd	r23, Z+1	; 0x01
    7e64:	82 81       	ldd	r24, Z+2	; 0x02
    7e66:	93 81       	ldd	r25, Z+3	; 0x03
    7e68:	20 e0       	ldi	r18, 0x00	; 0
    7e6a:	30 e0       	ldi	r19, 0x00	; 0
    7e6c:	40 e8       	ldi	r20, 0x80	; 128
    7e6e:	5f e3       	ldi	r21, 0x3F	; 63
    7e70:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    7e74:	88 23       	and	r24, r24
    7e76:	0c f0       	brlt	.+2      	; 0x7e7a <pick_drop+0xf68>
    7e78:	10 e0       	ldi	r17, 0x00	; 0
    7e7a:	11 23       	and	r17, r17
    7e7c:	49 f0       	breq	.+18     	; 0x7e90 <pick_drop+0xf7e>
		__ticks = 1;
    7e7e:	ce 01       	movw	r24, r28
    7e80:	89 56       	subi	r24, 0x69	; 105
    7e82:	9f 4f       	sbci	r25, 0xFF	; 255
    7e84:	21 e0       	ldi	r18, 0x01	; 1
    7e86:	30 e0       	ldi	r19, 0x00	; 0
    7e88:	fc 01       	movw	r30, r24
    7e8a:	31 83       	std	Z+1, r19	; 0x01
    7e8c:	20 83       	st	Z, r18
    7e8e:	74 c0       	rjmp	.+232    	; 0x7f78 <pick_drop+0x1066>
	else if (__tmp > 65535)
    7e90:	ce 01       	movw	r24, r28
    7e92:	8d 56       	subi	r24, 0x6D	; 109
    7e94:	9f 4f       	sbci	r25, 0xFF	; 255
    7e96:	11 e0       	ldi	r17, 0x01	; 1
    7e98:	fc 01       	movw	r30, r24
    7e9a:	60 81       	ld	r22, Z
    7e9c:	71 81       	ldd	r23, Z+1	; 0x01
    7e9e:	82 81       	ldd	r24, Z+2	; 0x02
    7ea0:	93 81       	ldd	r25, Z+3	; 0x03
    7ea2:	20 e0       	ldi	r18, 0x00	; 0
    7ea4:	3f ef       	ldi	r19, 0xFF	; 255
    7ea6:	4f e7       	ldi	r20, 0x7F	; 127
    7ea8:	57 e4       	ldi	r21, 0x47	; 71
    7eaa:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    7eae:	18 16       	cp	r1, r24
    7eb0:	0c f0       	brlt	.+2      	; 0x7eb4 <pick_drop+0xfa2>
    7eb2:	10 e0       	ldi	r17, 0x00	; 0
    7eb4:	11 23       	and	r17, r17
    7eb6:	09 f4       	brne	.+2      	; 0x7eba <pick_drop+0xfa8>
    7eb8:	4d c0       	rjmp	.+154    	; 0x7f54 <pick_drop+0x1042>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7eba:	ce 01       	movw	r24, r28
    7ebc:	81 57       	subi	r24, 0x71	; 113
    7ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    7ec0:	fc 01       	movw	r30, r24
    7ec2:	60 81       	ld	r22, Z
    7ec4:	71 81       	ldd	r23, Z+1	; 0x01
    7ec6:	82 81       	ldd	r24, Z+2	; 0x02
    7ec8:	93 81       	ldd	r25, Z+3	; 0x03
    7eca:	20 e0       	ldi	r18, 0x00	; 0
    7ecc:	30 e0       	ldi	r19, 0x00	; 0
    7ece:	40 e2       	ldi	r20, 0x20	; 32
    7ed0:	51 e4       	ldi	r21, 0x41	; 65
    7ed2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7ed6:	dc 01       	movw	r26, r24
    7ed8:	cb 01       	movw	r24, r22
    7eda:	8e 01       	movw	r16, r28
    7edc:	09 56       	subi	r16, 0x69	; 105
    7ede:	1f 4f       	sbci	r17, 0xFF	; 255
    7ee0:	bc 01       	movw	r22, r24
    7ee2:	cd 01       	movw	r24, r26
    7ee4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7ee8:	dc 01       	movw	r26, r24
    7eea:	cb 01       	movw	r24, r22
    7eec:	f8 01       	movw	r30, r16
    7eee:	91 83       	std	Z+1, r25	; 0x01
    7ef0:	80 83       	st	Z, r24
    7ef2:	27 c0       	rjmp	.+78     	; 0x7f42 <pick_drop+0x1030>
    7ef4:	ce 01       	movw	r24, r28
    7ef6:	87 56       	subi	r24, 0x67	; 103
    7ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    7efa:	20 e7       	ldi	r18, 0x70	; 112
    7efc:	31 e0       	ldi	r19, 0x01	; 1
    7efe:	fc 01       	movw	r30, r24
    7f00:	31 83       	std	Z+1, r19	; 0x01
    7f02:	20 83       	st	Z, r18
    7f04:	ce 01       	movw	r24, r28
    7f06:	87 56       	subi	r24, 0x67	; 103
    7f08:	9f 4f       	sbci	r25, 0xFF	; 255
    7f0a:	fc 01       	movw	r30, r24
    7f0c:	80 81       	ld	r24, Z
    7f0e:	91 81       	ldd	r25, Z+1	; 0x01
    7f10:	8c 01       	movw	r16, r24
    7f12:	c8 01       	movw	r24, r16
    7f14:	01 97       	sbiw	r24, 0x01	; 1
    7f16:	f1 f7       	brne	.-4      	; 0x7f14 <pick_drop+0x1002>
    7f18:	8c 01       	movw	r16, r24
    7f1a:	ce 01       	movw	r24, r28
    7f1c:	87 56       	subi	r24, 0x67	; 103
    7f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f20:	fc 01       	movw	r30, r24
    7f22:	11 83       	std	Z+1, r17	; 0x01
    7f24:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f26:	ce 01       	movw	r24, r28
    7f28:	89 56       	subi	r24, 0x69	; 105
    7f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7f2c:	9e 01       	movw	r18, r28
    7f2e:	29 56       	subi	r18, 0x69	; 105
    7f30:	3f 4f       	sbci	r19, 0xFF	; 255
    7f32:	f9 01       	movw	r30, r18
    7f34:	20 81       	ld	r18, Z
    7f36:	31 81       	ldd	r19, Z+1	; 0x01
    7f38:	21 50       	subi	r18, 0x01	; 1
    7f3a:	30 40       	sbci	r19, 0x00	; 0
    7f3c:	fc 01       	movw	r30, r24
    7f3e:	31 83       	std	Z+1, r19	; 0x01
    7f40:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f42:	ce 01       	movw	r24, r28
    7f44:	89 56       	subi	r24, 0x69	; 105
    7f46:	9f 4f       	sbci	r25, 0xFF	; 255
    7f48:	fc 01       	movw	r30, r24
    7f4a:	80 81       	ld	r24, Z
    7f4c:	91 81       	ldd	r25, Z+1	; 0x01
    7f4e:	00 97       	sbiw	r24, 0x00	; 0
    7f50:	89 f6       	brne	.-94     	; 0x7ef4 <pick_drop+0xfe2>
    7f52:	2f c0       	rjmp	.+94     	; 0x7fb2 <pick_drop+0x10a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f54:	8e 01       	movw	r16, r28
    7f56:	09 56       	subi	r16, 0x69	; 105
    7f58:	1f 4f       	sbci	r17, 0xFF	; 255
    7f5a:	ce 01       	movw	r24, r28
    7f5c:	8d 56       	subi	r24, 0x6D	; 109
    7f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f60:	fc 01       	movw	r30, r24
    7f62:	60 81       	ld	r22, Z
    7f64:	71 81       	ldd	r23, Z+1	; 0x01
    7f66:	82 81       	ldd	r24, Z+2	; 0x02
    7f68:	93 81       	ldd	r25, Z+3	; 0x03
    7f6a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    7f6e:	dc 01       	movw	r26, r24
    7f70:	cb 01       	movw	r24, r22
    7f72:	f8 01       	movw	r30, r16
    7f74:	91 83       	std	Z+1, r25	; 0x01
    7f76:	80 83       	st	Z, r24
    7f78:	ce 01       	movw	r24, r28
    7f7a:	85 56       	subi	r24, 0x65	; 101
    7f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f7e:	9e 01       	movw	r18, r28
    7f80:	29 56       	subi	r18, 0x69	; 105
    7f82:	3f 4f       	sbci	r19, 0xFF	; 255
    7f84:	f9 01       	movw	r30, r18
    7f86:	20 81       	ld	r18, Z
    7f88:	31 81       	ldd	r19, Z+1	; 0x01
    7f8a:	fc 01       	movw	r30, r24
    7f8c:	31 83       	std	Z+1, r19	; 0x01
    7f8e:	20 83       	st	Z, r18
    7f90:	ce 01       	movw	r24, r28
    7f92:	85 56       	subi	r24, 0x65	; 101
    7f94:	9f 4f       	sbci	r25, 0xFF	; 255
    7f96:	fc 01       	movw	r30, r24
    7f98:	80 81       	ld	r24, Z
    7f9a:	91 81       	ldd	r25, Z+1	; 0x01
    7f9c:	8c 01       	movw	r16, r24
    7f9e:	c8 01       	movw	r24, r16
    7fa0:	01 97       	sbiw	r24, 0x01	; 1
    7fa2:	f1 f7       	brne	.-4      	; 0x7fa0 <pick_drop+0x108e>
    7fa4:	8c 01       	movw	r16, r24
    7fa6:	ce 01       	movw	r24, r28
    7fa8:	85 56       	subi	r24, 0x65	; 101
    7faa:	9f 4f       	sbci	r25, 0xFF	; 255
    7fac:	fc 01       	movw	r30, r24
    7fae:	11 83       	std	Z+1, r17	; 0x01
    7fb0:	00 83       	st	Z, r16
					_delay_ms(100);
					correct_right();
    7fb2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
					back_mm(pdback);
    7fb6:	89 81       	ldd	r24, Y+1	; 0x01
    7fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    7fba:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    7fbe:	9e 01       	movw	r18, r28
    7fc0:	23 56       	subi	r18, 0x63	; 99
    7fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fc4:	80 e0       	ldi	r24, 0x00	; 0
    7fc6:	90 e0       	ldi	r25, 0x00	; 0
    7fc8:	a0 ea       	ldi	r26, 0xA0	; 160
    7fca:	b1 e4       	ldi	r27, 0x41	; 65
    7fcc:	f9 01       	movw	r30, r18
    7fce:	80 83       	st	Z, r24
    7fd0:	91 83       	std	Z+1, r25	; 0x01
    7fd2:	a2 83       	std	Z+2, r26	; 0x02
    7fd4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7fd6:	8e 01       	movw	r16, r28
    7fd8:	0f 55       	subi	r16, 0x5F	; 95
    7fda:	1f 4f       	sbci	r17, 0xFF	; 255
    7fdc:	ce 01       	movw	r24, r28
    7fde:	83 56       	subi	r24, 0x63	; 99
    7fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    7fe2:	fc 01       	movw	r30, r24
    7fe4:	60 81       	ld	r22, Z
    7fe6:	71 81       	ldd	r23, Z+1	; 0x01
    7fe8:	82 81       	ldd	r24, Z+2	; 0x02
    7fea:	93 81       	ldd	r25, Z+3	; 0x03
    7fec:	26 e6       	ldi	r18, 0x66	; 102
    7fee:	36 e6       	ldi	r19, 0x66	; 102
    7ff0:	46 e6       	ldi	r20, 0x66	; 102
    7ff2:	55 e4       	ldi	r21, 0x45	; 69
    7ff4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    7ff8:	dc 01       	movw	r26, r24
    7ffa:	cb 01       	movw	r24, r22
    7ffc:	f8 01       	movw	r30, r16
    7ffe:	80 83       	st	Z, r24
    8000:	91 83       	std	Z+1, r25	; 0x01
    8002:	a2 83       	std	Z+2, r26	; 0x02
    8004:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8006:	ce 01       	movw	r24, r28
    8008:	8f 55       	subi	r24, 0x5F	; 95
    800a:	9f 4f       	sbci	r25, 0xFF	; 255
    800c:	11 e0       	ldi	r17, 0x01	; 1
    800e:	fc 01       	movw	r30, r24
    8010:	60 81       	ld	r22, Z
    8012:	71 81       	ldd	r23, Z+1	; 0x01
    8014:	82 81       	ldd	r24, Z+2	; 0x02
    8016:	93 81       	ldd	r25, Z+3	; 0x03
    8018:	20 e0       	ldi	r18, 0x00	; 0
    801a:	30 e0       	ldi	r19, 0x00	; 0
    801c:	40 e8       	ldi	r20, 0x80	; 128
    801e:	5f e3       	ldi	r21, 0x3F	; 63
    8020:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    8024:	88 23       	and	r24, r24
    8026:	0c f0       	brlt	.+2      	; 0x802a <pick_drop+0x1118>
    8028:	10 e0       	ldi	r17, 0x00	; 0
    802a:	11 23       	and	r17, r17
    802c:	49 f0       	breq	.+18     	; 0x8040 <pick_drop+0x112e>
		__ticks = 1;
    802e:	ce 01       	movw	r24, r28
    8030:	8b 55       	subi	r24, 0x5B	; 91
    8032:	9f 4f       	sbci	r25, 0xFF	; 255
    8034:	21 e0       	ldi	r18, 0x01	; 1
    8036:	30 e0       	ldi	r19, 0x00	; 0
    8038:	fc 01       	movw	r30, r24
    803a:	31 83       	std	Z+1, r19	; 0x01
    803c:	20 83       	st	Z, r18
    803e:	74 c0       	rjmp	.+232    	; 0x8128 <pick_drop+0x1216>
	else if (__tmp > 65535)
    8040:	ce 01       	movw	r24, r28
    8042:	8f 55       	subi	r24, 0x5F	; 95
    8044:	9f 4f       	sbci	r25, 0xFF	; 255
    8046:	11 e0       	ldi	r17, 0x01	; 1
    8048:	fc 01       	movw	r30, r24
    804a:	60 81       	ld	r22, Z
    804c:	71 81       	ldd	r23, Z+1	; 0x01
    804e:	82 81       	ldd	r24, Z+2	; 0x02
    8050:	93 81       	ldd	r25, Z+3	; 0x03
    8052:	20 e0       	ldi	r18, 0x00	; 0
    8054:	3f ef       	ldi	r19, 0xFF	; 255
    8056:	4f e7       	ldi	r20, 0x7F	; 127
    8058:	57 e4       	ldi	r21, 0x47	; 71
    805a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    805e:	18 16       	cp	r1, r24
    8060:	0c f0       	brlt	.+2      	; 0x8064 <pick_drop+0x1152>
    8062:	10 e0       	ldi	r17, 0x00	; 0
    8064:	11 23       	and	r17, r17
    8066:	09 f4       	brne	.+2      	; 0x806a <pick_drop+0x1158>
    8068:	4d c0       	rjmp	.+154    	; 0x8104 <pick_drop+0x11f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    806a:	ce 01       	movw	r24, r28
    806c:	83 56       	subi	r24, 0x63	; 99
    806e:	9f 4f       	sbci	r25, 0xFF	; 255
    8070:	fc 01       	movw	r30, r24
    8072:	60 81       	ld	r22, Z
    8074:	71 81       	ldd	r23, Z+1	; 0x01
    8076:	82 81       	ldd	r24, Z+2	; 0x02
    8078:	93 81       	ldd	r25, Z+3	; 0x03
    807a:	20 e0       	ldi	r18, 0x00	; 0
    807c:	30 e0       	ldi	r19, 0x00	; 0
    807e:	40 e2       	ldi	r20, 0x20	; 32
    8080:	51 e4       	ldi	r21, 0x41	; 65
    8082:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8086:	dc 01       	movw	r26, r24
    8088:	cb 01       	movw	r24, r22
    808a:	8e 01       	movw	r16, r28
    808c:	0b 55       	subi	r16, 0x5B	; 91
    808e:	1f 4f       	sbci	r17, 0xFF	; 255
    8090:	bc 01       	movw	r22, r24
    8092:	cd 01       	movw	r24, r26
    8094:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8098:	dc 01       	movw	r26, r24
    809a:	cb 01       	movw	r24, r22
    809c:	f8 01       	movw	r30, r16
    809e:	91 83       	std	Z+1, r25	; 0x01
    80a0:	80 83       	st	Z, r24
    80a2:	27 c0       	rjmp	.+78     	; 0x80f2 <pick_drop+0x11e0>
    80a4:	ce 01       	movw	r24, r28
    80a6:	89 55       	subi	r24, 0x59	; 89
    80a8:	9f 4f       	sbci	r25, 0xFF	; 255
    80aa:	20 e7       	ldi	r18, 0x70	; 112
    80ac:	31 e0       	ldi	r19, 0x01	; 1
    80ae:	fc 01       	movw	r30, r24
    80b0:	31 83       	std	Z+1, r19	; 0x01
    80b2:	20 83       	st	Z, r18
    80b4:	ce 01       	movw	r24, r28
    80b6:	89 55       	subi	r24, 0x59	; 89
    80b8:	9f 4f       	sbci	r25, 0xFF	; 255
    80ba:	fc 01       	movw	r30, r24
    80bc:	80 81       	ld	r24, Z
    80be:	91 81       	ldd	r25, Z+1	; 0x01
    80c0:	8c 01       	movw	r16, r24
    80c2:	c8 01       	movw	r24, r16
    80c4:	01 97       	sbiw	r24, 0x01	; 1
    80c6:	f1 f7       	brne	.-4      	; 0x80c4 <pick_drop+0x11b2>
    80c8:	8c 01       	movw	r16, r24
    80ca:	ce 01       	movw	r24, r28
    80cc:	89 55       	subi	r24, 0x59	; 89
    80ce:	9f 4f       	sbci	r25, 0xFF	; 255
    80d0:	fc 01       	movw	r30, r24
    80d2:	11 83       	std	Z+1, r17	; 0x01
    80d4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80d6:	ce 01       	movw	r24, r28
    80d8:	8b 55       	subi	r24, 0x5B	; 91
    80da:	9f 4f       	sbci	r25, 0xFF	; 255
    80dc:	9e 01       	movw	r18, r28
    80de:	2b 55       	subi	r18, 0x5B	; 91
    80e0:	3f 4f       	sbci	r19, 0xFF	; 255
    80e2:	f9 01       	movw	r30, r18
    80e4:	20 81       	ld	r18, Z
    80e6:	31 81       	ldd	r19, Z+1	; 0x01
    80e8:	21 50       	subi	r18, 0x01	; 1
    80ea:	30 40       	sbci	r19, 0x00	; 0
    80ec:	fc 01       	movw	r30, r24
    80ee:	31 83       	std	Z+1, r19	; 0x01
    80f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80f2:	ce 01       	movw	r24, r28
    80f4:	8b 55       	subi	r24, 0x5B	; 91
    80f6:	9f 4f       	sbci	r25, 0xFF	; 255
    80f8:	fc 01       	movw	r30, r24
    80fa:	80 81       	ld	r24, Z
    80fc:	91 81       	ldd	r25, Z+1	; 0x01
    80fe:	00 97       	sbiw	r24, 0x00	; 0
    8100:	89 f6       	brne	.-94     	; 0x80a4 <pick_drop+0x1192>
    8102:	ba c2       	rjmp	.+1396   	; 0x8678 <pick_drop+0x1766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8104:	8e 01       	movw	r16, r28
    8106:	0b 55       	subi	r16, 0x5B	; 91
    8108:	1f 4f       	sbci	r17, 0xFF	; 255
    810a:	ce 01       	movw	r24, r28
    810c:	8f 55       	subi	r24, 0x5F	; 95
    810e:	9f 4f       	sbci	r25, 0xFF	; 255
    8110:	fc 01       	movw	r30, r24
    8112:	60 81       	ld	r22, Z
    8114:	71 81       	ldd	r23, Z+1	; 0x01
    8116:	82 81       	ldd	r24, Z+2	; 0x02
    8118:	93 81       	ldd	r25, Z+3	; 0x03
    811a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    811e:	dc 01       	movw	r26, r24
    8120:	cb 01       	movw	r24, r22
    8122:	f8 01       	movw	r30, r16
    8124:	91 83       	std	Z+1, r25	; 0x01
    8126:	80 83       	st	Z, r24
    8128:	ce 01       	movw	r24, r28
    812a:	87 55       	subi	r24, 0x57	; 87
    812c:	9f 4f       	sbci	r25, 0xFF	; 255
    812e:	9e 01       	movw	r18, r28
    8130:	2b 55       	subi	r18, 0x5B	; 91
    8132:	3f 4f       	sbci	r19, 0xFF	; 255
    8134:	f9 01       	movw	r30, r18
    8136:	20 81       	ld	r18, Z
    8138:	31 81       	ldd	r19, Z+1	; 0x01
    813a:	fc 01       	movw	r30, r24
    813c:	31 83       	std	Z+1, r19	; 0x01
    813e:	20 83       	st	Z, r18
    8140:	ce 01       	movw	r24, r28
    8142:	87 55       	subi	r24, 0x57	; 87
    8144:	9f 4f       	sbci	r25, 0xFF	; 255
    8146:	fc 01       	movw	r30, r24
    8148:	80 81       	ld	r24, Z
    814a:	91 81       	ldd	r25, Z+1	; 0x01
    814c:	8c 01       	movw	r16, r24
    814e:	c8 01       	movw	r24, r16
    8150:	01 97       	sbiw	r24, 0x01	; 1
    8152:	f1 f7       	brne	.-4      	; 0x8150 <pick_drop+0x123e>
    8154:	8c 01       	movw	r16, r24
    8156:	ce 01       	movw	r24, r28
    8158:	87 55       	subi	r24, 0x57	; 87
    815a:	9f 4f       	sbci	r25, 0xFF	; 255
    815c:	fc 01       	movw	r30, r24
    815e:	11 83       	std	Z+1, r17	; 0x01
    8160:	00 83       	st	Z, r16
    8162:	8a c2       	rjmp	.+1300   	; 0x8678 <pick_drop+0x1766>
					_delay_ms(20);
				}
				else if(master_path[node-1] == 'R')
    8164:	80 91 71 03 	lds	r24, 0x0371
    8168:	90 91 72 03 	lds	r25, 0x0372
    816c:	01 97       	sbiw	r24, 0x01	; 1
    816e:	8b 58       	subi	r24, 0x8B	; 139
    8170:	9c 4f       	sbci	r25, 0xFC	; 252
    8172:	fc 01       	movw	r30, r24
    8174:	80 81       	ld	r24, Z
    8176:	82 35       	cpi	r24, 0x52	; 82
    8178:	09 f0       	breq	.+2      	; 0x817c <pick_drop+0x126a>
    817a:	7e c2       	rjmp	.+1276   	; 0x8678 <pick_drop+0x1766>
    817c:	9e 01       	movw	r18, r28
    817e:	25 55       	subi	r18, 0x55	; 85
    8180:	3f 4f       	sbci	r19, 0xFF	; 255
    8182:	80 e0       	ldi	r24, 0x00	; 0
    8184:	90 e0       	ldi	r25, 0x00	; 0
    8186:	a8 e4       	ldi	r26, 0x48	; 72
    8188:	b2 e4       	ldi	r27, 0x42	; 66
    818a:	f9 01       	movw	r30, r18
    818c:	80 83       	st	Z, r24
    818e:	91 83       	std	Z+1, r25	; 0x01
    8190:	a2 83       	std	Z+2, r26	; 0x02
    8192:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8194:	8e 01       	movw	r16, r28
    8196:	01 55       	subi	r16, 0x51	; 81
    8198:	1f 4f       	sbci	r17, 0xFF	; 255
    819a:	ce 01       	movw	r24, r28
    819c:	85 55       	subi	r24, 0x55	; 85
    819e:	9f 4f       	sbci	r25, 0xFF	; 255
    81a0:	fc 01       	movw	r30, r24
    81a2:	60 81       	ld	r22, Z
    81a4:	71 81       	ldd	r23, Z+1	; 0x01
    81a6:	82 81       	ldd	r24, Z+2	; 0x02
    81a8:	93 81       	ldd	r25, Z+3	; 0x03
    81aa:	26 e6       	ldi	r18, 0x66	; 102
    81ac:	36 e6       	ldi	r19, 0x66	; 102
    81ae:	46 e6       	ldi	r20, 0x66	; 102
    81b0:	55 e4       	ldi	r21, 0x45	; 69
    81b2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    81b6:	dc 01       	movw	r26, r24
    81b8:	cb 01       	movw	r24, r22
    81ba:	f8 01       	movw	r30, r16
    81bc:	80 83       	st	Z, r24
    81be:	91 83       	std	Z+1, r25	; 0x01
    81c0:	a2 83       	std	Z+2, r26	; 0x02
    81c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    81c4:	ce 01       	movw	r24, r28
    81c6:	81 55       	subi	r24, 0x51	; 81
    81c8:	9f 4f       	sbci	r25, 0xFF	; 255
    81ca:	11 e0       	ldi	r17, 0x01	; 1
    81cc:	fc 01       	movw	r30, r24
    81ce:	60 81       	ld	r22, Z
    81d0:	71 81       	ldd	r23, Z+1	; 0x01
    81d2:	82 81       	ldd	r24, Z+2	; 0x02
    81d4:	93 81       	ldd	r25, Z+3	; 0x03
    81d6:	20 e0       	ldi	r18, 0x00	; 0
    81d8:	30 e0       	ldi	r19, 0x00	; 0
    81da:	40 e8       	ldi	r20, 0x80	; 128
    81dc:	5f e3       	ldi	r21, 0x3F	; 63
    81de:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    81e2:	88 23       	and	r24, r24
    81e4:	0c f0       	brlt	.+2      	; 0x81e8 <pick_drop+0x12d6>
    81e6:	10 e0       	ldi	r17, 0x00	; 0
    81e8:	11 23       	and	r17, r17
    81ea:	49 f0       	breq	.+18     	; 0x81fe <pick_drop+0x12ec>
		__ticks = 1;
    81ec:	ce 01       	movw	r24, r28
    81ee:	8d 54       	subi	r24, 0x4D	; 77
    81f0:	9f 4f       	sbci	r25, 0xFF	; 255
    81f2:	21 e0       	ldi	r18, 0x01	; 1
    81f4:	30 e0       	ldi	r19, 0x00	; 0
    81f6:	fc 01       	movw	r30, r24
    81f8:	31 83       	std	Z+1, r19	; 0x01
    81fa:	20 83       	st	Z, r18
    81fc:	74 c0       	rjmp	.+232    	; 0x82e6 <pick_drop+0x13d4>
	else if (__tmp > 65535)
    81fe:	ce 01       	movw	r24, r28
    8200:	81 55       	subi	r24, 0x51	; 81
    8202:	9f 4f       	sbci	r25, 0xFF	; 255
    8204:	11 e0       	ldi	r17, 0x01	; 1
    8206:	fc 01       	movw	r30, r24
    8208:	60 81       	ld	r22, Z
    820a:	71 81       	ldd	r23, Z+1	; 0x01
    820c:	82 81       	ldd	r24, Z+2	; 0x02
    820e:	93 81       	ldd	r25, Z+3	; 0x03
    8210:	20 e0       	ldi	r18, 0x00	; 0
    8212:	3f ef       	ldi	r19, 0xFF	; 255
    8214:	4f e7       	ldi	r20, 0x7F	; 127
    8216:	57 e4       	ldi	r21, 0x47	; 71
    8218:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    821c:	18 16       	cp	r1, r24
    821e:	0c f0       	brlt	.+2      	; 0x8222 <pick_drop+0x1310>
    8220:	10 e0       	ldi	r17, 0x00	; 0
    8222:	11 23       	and	r17, r17
    8224:	09 f4       	brne	.+2      	; 0x8228 <pick_drop+0x1316>
    8226:	4d c0       	rjmp	.+154    	; 0x82c2 <pick_drop+0x13b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8228:	ce 01       	movw	r24, r28
    822a:	85 55       	subi	r24, 0x55	; 85
    822c:	9f 4f       	sbci	r25, 0xFF	; 255
    822e:	fc 01       	movw	r30, r24
    8230:	60 81       	ld	r22, Z
    8232:	71 81       	ldd	r23, Z+1	; 0x01
    8234:	82 81       	ldd	r24, Z+2	; 0x02
    8236:	93 81       	ldd	r25, Z+3	; 0x03
    8238:	20 e0       	ldi	r18, 0x00	; 0
    823a:	30 e0       	ldi	r19, 0x00	; 0
    823c:	40 e2       	ldi	r20, 0x20	; 32
    823e:	51 e4       	ldi	r21, 0x41	; 65
    8240:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8244:	dc 01       	movw	r26, r24
    8246:	cb 01       	movw	r24, r22
    8248:	8e 01       	movw	r16, r28
    824a:	0d 54       	subi	r16, 0x4D	; 77
    824c:	1f 4f       	sbci	r17, 0xFF	; 255
    824e:	bc 01       	movw	r22, r24
    8250:	cd 01       	movw	r24, r26
    8252:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8256:	dc 01       	movw	r26, r24
    8258:	cb 01       	movw	r24, r22
    825a:	f8 01       	movw	r30, r16
    825c:	91 83       	std	Z+1, r25	; 0x01
    825e:	80 83       	st	Z, r24
    8260:	27 c0       	rjmp	.+78     	; 0x82b0 <pick_drop+0x139e>
    8262:	ce 01       	movw	r24, r28
    8264:	8b 54       	subi	r24, 0x4B	; 75
    8266:	9f 4f       	sbci	r25, 0xFF	; 255
    8268:	20 e7       	ldi	r18, 0x70	; 112
    826a:	31 e0       	ldi	r19, 0x01	; 1
    826c:	fc 01       	movw	r30, r24
    826e:	31 83       	std	Z+1, r19	; 0x01
    8270:	20 83       	st	Z, r18
    8272:	ce 01       	movw	r24, r28
    8274:	8b 54       	subi	r24, 0x4B	; 75
    8276:	9f 4f       	sbci	r25, 0xFF	; 255
    8278:	fc 01       	movw	r30, r24
    827a:	80 81       	ld	r24, Z
    827c:	91 81       	ldd	r25, Z+1	; 0x01
    827e:	8c 01       	movw	r16, r24
    8280:	c8 01       	movw	r24, r16
    8282:	01 97       	sbiw	r24, 0x01	; 1
    8284:	f1 f7       	brne	.-4      	; 0x8282 <pick_drop+0x1370>
    8286:	8c 01       	movw	r16, r24
    8288:	ce 01       	movw	r24, r28
    828a:	8b 54       	subi	r24, 0x4B	; 75
    828c:	9f 4f       	sbci	r25, 0xFF	; 255
    828e:	fc 01       	movw	r30, r24
    8290:	11 83       	std	Z+1, r17	; 0x01
    8292:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8294:	ce 01       	movw	r24, r28
    8296:	8d 54       	subi	r24, 0x4D	; 77
    8298:	9f 4f       	sbci	r25, 0xFF	; 255
    829a:	9e 01       	movw	r18, r28
    829c:	2d 54       	subi	r18, 0x4D	; 77
    829e:	3f 4f       	sbci	r19, 0xFF	; 255
    82a0:	f9 01       	movw	r30, r18
    82a2:	20 81       	ld	r18, Z
    82a4:	31 81       	ldd	r19, Z+1	; 0x01
    82a6:	21 50       	subi	r18, 0x01	; 1
    82a8:	30 40       	sbci	r19, 0x00	; 0
    82aa:	fc 01       	movw	r30, r24
    82ac:	31 83       	std	Z+1, r19	; 0x01
    82ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    82b0:	ce 01       	movw	r24, r28
    82b2:	8d 54       	subi	r24, 0x4D	; 77
    82b4:	9f 4f       	sbci	r25, 0xFF	; 255
    82b6:	fc 01       	movw	r30, r24
    82b8:	80 81       	ld	r24, Z
    82ba:	91 81       	ldd	r25, Z+1	; 0x01
    82bc:	00 97       	sbiw	r24, 0x00	; 0
    82be:	89 f6       	brne	.-94     	; 0x8262 <pick_drop+0x1350>
    82c0:	2f c0       	rjmp	.+94     	; 0x8320 <pick_drop+0x140e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    82c2:	8e 01       	movw	r16, r28
    82c4:	0d 54       	subi	r16, 0x4D	; 77
    82c6:	1f 4f       	sbci	r17, 0xFF	; 255
    82c8:	ce 01       	movw	r24, r28
    82ca:	81 55       	subi	r24, 0x51	; 81
    82cc:	9f 4f       	sbci	r25, 0xFF	; 255
    82ce:	fc 01       	movw	r30, r24
    82d0:	60 81       	ld	r22, Z
    82d2:	71 81       	ldd	r23, Z+1	; 0x01
    82d4:	82 81       	ldd	r24, Z+2	; 0x02
    82d6:	93 81       	ldd	r25, Z+3	; 0x03
    82d8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    82dc:	dc 01       	movw	r26, r24
    82de:	cb 01       	movw	r24, r22
    82e0:	f8 01       	movw	r30, r16
    82e2:	91 83       	std	Z+1, r25	; 0x01
    82e4:	80 83       	st	Z, r24
    82e6:	ce 01       	movw	r24, r28
    82e8:	89 54       	subi	r24, 0x49	; 73
    82ea:	9f 4f       	sbci	r25, 0xFF	; 255
    82ec:	9e 01       	movw	r18, r28
    82ee:	2d 54       	subi	r18, 0x4D	; 77
    82f0:	3f 4f       	sbci	r19, 0xFF	; 255
    82f2:	f9 01       	movw	r30, r18
    82f4:	20 81       	ld	r18, Z
    82f6:	31 81       	ldd	r19, Z+1	; 0x01
    82f8:	fc 01       	movw	r30, r24
    82fa:	31 83       	std	Z+1, r19	; 0x01
    82fc:	20 83       	st	Z, r18
    82fe:	ce 01       	movw	r24, r28
    8300:	89 54       	subi	r24, 0x49	; 73
    8302:	9f 4f       	sbci	r25, 0xFF	; 255
    8304:	fc 01       	movw	r30, r24
    8306:	80 81       	ld	r24, Z
    8308:	91 81       	ldd	r25, Z+1	; 0x01
    830a:	8c 01       	movw	r16, r24
    830c:	c8 01       	movw	r24, r16
    830e:	01 97       	sbiw	r24, 0x01	; 1
    8310:	f1 f7       	brne	.-4      	; 0x830e <pick_drop+0x13fc>
    8312:	8c 01       	movw	r16, r24
    8314:	ce 01       	movw	r24, r28
    8316:	89 54       	subi	r24, 0x49	; 73
    8318:	9f 4f       	sbci	r25, 0xFF	; 255
    831a:	fc 01       	movw	r30, r24
    831c:	11 83       	std	Z+1, r17	; 0x01
    831e:	00 83       	st	Z, r16
				{
					//spl_left2();
					_delay_ms(50);
					front();
    8320:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    8324:	9e 01       	movw	r18, r28
    8326:	27 54       	subi	r18, 0x47	; 71
    8328:	3f 4f       	sbci	r19, 0xFF	; 255
    832a:	80 e0       	ldi	r24, 0x00	; 0
    832c:	90 e0       	ldi	r25, 0x00	; 0
    832e:	a8 ec       	ldi	r26, 0xC8	; 200
    8330:	b2 e4       	ldi	r27, 0x42	; 66
    8332:	f9 01       	movw	r30, r18
    8334:	80 83       	st	Z, r24
    8336:	91 83       	std	Z+1, r25	; 0x01
    8338:	a2 83       	std	Z+2, r26	; 0x02
    833a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    833c:	8e 01       	movw	r16, r28
    833e:	03 54       	subi	r16, 0x43	; 67
    8340:	1f 4f       	sbci	r17, 0xFF	; 255
    8342:	ce 01       	movw	r24, r28
    8344:	87 54       	subi	r24, 0x47	; 71
    8346:	9f 4f       	sbci	r25, 0xFF	; 255
    8348:	fc 01       	movw	r30, r24
    834a:	60 81       	ld	r22, Z
    834c:	71 81       	ldd	r23, Z+1	; 0x01
    834e:	82 81       	ldd	r24, Z+2	; 0x02
    8350:	93 81       	ldd	r25, Z+3	; 0x03
    8352:	26 e6       	ldi	r18, 0x66	; 102
    8354:	36 e6       	ldi	r19, 0x66	; 102
    8356:	46 e6       	ldi	r20, 0x66	; 102
    8358:	55 e4       	ldi	r21, 0x45	; 69
    835a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    835e:	dc 01       	movw	r26, r24
    8360:	cb 01       	movw	r24, r22
    8362:	f8 01       	movw	r30, r16
    8364:	80 83       	st	Z, r24
    8366:	91 83       	std	Z+1, r25	; 0x01
    8368:	a2 83       	std	Z+2, r26	; 0x02
    836a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    836c:	ce 01       	movw	r24, r28
    836e:	83 54       	subi	r24, 0x43	; 67
    8370:	9f 4f       	sbci	r25, 0xFF	; 255
    8372:	11 e0       	ldi	r17, 0x01	; 1
    8374:	fc 01       	movw	r30, r24
    8376:	60 81       	ld	r22, Z
    8378:	71 81       	ldd	r23, Z+1	; 0x01
    837a:	82 81       	ldd	r24, Z+2	; 0x02
    837c:	93 81       	ldd	r25, Z+3	; 0x03
    837e:	20 e0       	ldi	r18, 0x00	; 0
    8380:	30 e0       	ldi	r19, 0x00	; 0
    8382:	40 e8       	ldi	r20, 0x80	; 128
    8384:	5f e3       	ldi	r21, 0x3F	; 63
    8386:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    838a:	88 23       	and	r24, r24
    838c:	0c f0       	brlt	.+2      	; 0x8390 <pick_drop+0x147e>
    838e:	10 e0       	ldi	r17, 0x00	; 0
    8390:	11 23       	and	r17, r17
    8392:	49 f0       	breq	.+18     	; 0x83a6 <pick_drop+0x1494>
		__ticks = 1;
    8394:	ce 01       	movw	r24, r28
    8396:	8f 53       	subi	r24, 0x3F	; 63
    8398:	9f 4f       	sbci	r25, 0xFF	; 255
    839a:	21 e0       	ldi	r18, 0x01	; 1
    839c:	30 e0       	ldi	r19, 0x00	; 0
    839e:	fc 01       	movw	r30, r24
    83a0:	31 83       	std	Z+1, r19	; 0x01
    83a2:	20 83       	st	Z, r18
    83a4:	74 c0       	rjmp	.+232    	; 0x848e <pick_drop+0x157c>
	else if (__tmp > 65535)
    83a6:	ce 01       	movw	r24, r28
    83a8:	83 54       	subi	r24, 0x43	; 67
    83aa:	9f 4f       	sbci	r25, 0xFF	; 255
    83ac:	11 e0       	ldi	r17, 0x01	; 1
    83ae:	fc 01       	movw	r30, r24
    83b0:	60 81       	ld	r22, Z
    83b2:	71 81       	ldd	r23, Z+1	; 0x01
    83b4:	82 81       	ldd	r24, Z+2	; 0x02
    83b6:	93 81       	ldd	r25, Z+3	; 0x03
    83b8:	20 e0       	ldi	r18, 0x00	; 0
    83ba:	3f ef       	ldi	r19, 0xFF	; 255
    83bc:	4f e7       	ldi	r20, 0x7F	; 127
    83be:	57 e4       	ldi	r21, 0x47	; 71
    83c0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    83c4:	18 16       	cp	r1, r24
    83c6:	0c f0       	brlt	.+2      	; 0x83ca <pick_drop+0x14b8>
    83c8:	10 e0       	ldi	r17, 0x00	; 0
    83ca:	11 23       	and	r17, r17
    83cc:	09 f4       	brne	.+2      	; 0x83d0 <pick_drop+0x14be>
    83ce:	4d c0       	rjmp	.+154    	; 0x846a <pick_drop+0x1558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    83d0:	ce 01       	movw	r24, r28
    83d2:	87 54       	subi	r24, 0x47	; 71
    83d4:	9f 4f       	sbci	r25, 0xFF	; 255
    83d6:	fc 01       	movw	r30, r24
    83d8:	60 81       	ld	r22, Z
    83da:	71 81       	ldd	r23, Z+1	; 0x01
    83dc:	82 81       	ldd	r24, Z+2	; 0x02
    83de:	93 81       	ldd	r25, Z+3	; 0x03
    83e0:	20 e0       	ldi	r18, 0x00	; 0
    83e2:	30 e0       	ldi	r19, 0x00	; 0
    83e4:	40 e2       	ldi	r20, 0x20	; 32
    83e6:	51 e4       	ldi	r21, 0x41	; 65
    83e8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    83ec:	dc 01       	movw	r26, r24
    83ee:	cb 01       	movw	r24, r22
    83f0:	8e 01       	movw	r16, r28
    83f2:	0f 53       	subi	r16, 0x3F	; 63
    83f4:	1f 4f       	sbci	r17, 0xFF	; 255
    83f6:	bc 01       	movw	r22, r24
    83f8:	cd 01       	movw	r24, r26
    83fa:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    83fe:	dc 01       	movw	r26, r24
    8400:	cb 01       	movw	r24, r22
    8402:	f8 01       	movw	r30, r16
    8404:	91 83       	std	Z+1, r25	; 0x01
    8406:	80 83       	st	Z, r24
    8408:	27 c0       	rjmp	.+78     	; 0x8458 <pick_drop+0x1546>
    840a:	ce 01       	movw	r24, r28
    840c:	8d 53       	subi	r24, 0x3D	; 61
    840e:	9f 4f       	sbci	r25, 0xFF	; 255
    8410:	20 e7       	ldi	r18, 0x70	; 112
    8412:	31 e0       	ldi	r19, 0x01	; 1
    8414:	fc 01       	movw	r30, r24
    8416:	31 83       	std	Z+1, r19	; 0x01
    8418:	20 83       	st	Z, r18
    841a:	ce 01       	movw	r24, r28
    841c:	8d 53       	subi	r24, 0x3D	; 61
    841e:	9f 4f       	sbci	r25, 0xFF	; 255
    8420:	fc 01       	movw	r30, r24
    8422:	80 81       	ld	r24, Z
    8424:	91 81       	ldd	r25, Z+1	; 0x01
    8426:	8c 01       	movw	r16, r24
    8428:	c8 01       	movw	r24, r16
    842a:	01 97       	sbiw	r24, 0x01	; 1
    842c:	f1 f7       	brne	.-4      	; 0x842a <pick_drop+0x1518>
    842e:	8c 01       	movw	r16, r24
    8430:	ce 01       	movw	r24, r28
    8432:	8d 53       	subi	r24, 0x3D	; 61
    8434:	9f 4f       	sbci	r25, 0xFF	; 255
    8436:	fc 01       	movw	r30, r24
    8438:	11 83       	std	Z+1, r17	; 0x01
    843a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    843c:	ce 01       	movw	r24, r28
    843e:	8f 53       	subi	r24, 0x3F	; 63
    8440:	9f 4f       	sbci	r25, 0xFF	; 255
    8442:	9e 01       	movw	r18, r28
    8444:	2f 53       	subi	r18, 0x3F	; 63
    8446:	3f 4f       	sbci	r19, 0xFF	; 255
    8448:	f9 01       	movw	r30, r18
    844a:	20 81       	ld	r18, Z
    844c:	31 81       	ldd	r19, Z+1	; 0x01
    844e:	21 50       	subi	r18, 0x01	; 1
    8450:	30 40       	sbci	r19, 0x00	; 0
    8452:	fc 01       	movw	r30, r24
    8454:	31 83       	std	Z+1, r19	; 0x01
    8456:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8458:	ce 01       	movw	r24, r28
    845a:	8f 53       	subi	r24, 0x3F	; 63
    845c:	9f 4f       	sbci	r25, 0xFF	; 255
    845e:	fc 01       	movw	r30, r24
    8460:	80 81       	ld	r24, Z
    8462:	91 81       	ldd	r25, Z+1	; 0x01
    8464:	00 97       	sbiw	r24, 0x00	; 0
    8466:	89 f6       	brne	.-94     	; 0x840a <pick_drop+0x14f8>
    8468:	2f c0       	rjmp	.+94     	; 0x84c8 <pick_drop+0x15b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    846a:	8e 01       	movw	r16, r28
    846c:	0f 53       	subi	r16, 0x3F	; 63
    846e:	1f 4f       	sbci	r17, 0xFF	; 255
    8470:	ce 01       	movw	r24, r28
    8472:	83 54       	subi	r24, 0x43	; 67
    8474:	9f 4f       	sbci	r25, 0xFF	; 255
    8476:	fc 01       	movw	r30, r24
    8478:	60 81       	ld	r22, Z
    847a:	71 81       	ldd	r23, Z+1	; 0x01
    847c:	82 81       	ldd	r24, Z+2	; 0x02
    847e:	93 81       	ldd	r25, Z+3	; 0x03
    8480:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8484:	dc 01       	movw	r26, r24
    8486:	cb 01       	movw	r24, r22
    8488:	f8 01       	movw	r30, r16
    848a:	91 83       	std	Z+1, r25	; 0x01
    848c:	80 83       	st	Z, r24
    848e:	ce 01       	movw	r24, r28
    8490:	8b 53       	subi	r24, 0x3B	; 59
    8492:	9f 4f       	sbci	r25, 0xFF	; 255
    8494:	9e 01       	movw	r18, r28
    8496:	2f 53       	subi	r18, 0x3F	; 63
    8498:	3f 4f       	sbci	r19, 0xFF	; 255
    849a:	f9 01       	movw	r30, r18
    849c:	20 81       	ld	r18, Z
    849e:	31 81       	ldd	r19, Z+1	; 0x01
    84a0:	fc 01       	movw	r30, r24
    84a2:	31 83       	std	Z+1, r19	; 0x01
    84a4:	20 83       	st	Z, r18
    84a6:	ce 01       	movw	r24, r28
    84a8:	8b 53       	subi	r24, 0x3B	; 59
    84aa:	9f 4f       	sbci	r25, 0xFF	; 255
    84ac:	fc 01       	movw	r30, r24
    84ae:	80 81       	ld	r24, Z
    84b0:	91 81       	ldd	r25, Z+1	; 0x01
    84b2:	8c 01       	movw	r16, r24
    84b4:	c8 01       	movw	r24, r16
    84b6:	01 97       	sbiw	r24, 0x01	; 1
    84b8:	f1 f7       	brne	.-4      	; 0x84b6 <pick_drop+0x15a4>
    84ba:	8c 01       	movw	r16, r24
    84bc:	ce 01       	movw	r24, r28
    84be:	8b 53       	subi	r24, 0x3B	; 59
    84c0:	9f 4f       	sbci	r25, 0xFF	; 255
    84c2:	fc 01       	movw	r30, r24
    84c4:	11 83       	std	Z+1, r17	; 0x01
    84c6:	00 83       	st	Z, r16
					_delay_ms(100);
					correct_right();
    84c8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
					back_mm(70);
    84cc:	86 e4       	ldi	r24, 0x46	; 70
    84ce:	90 e0       	ldi	r25, 0x00	; 0
    84d0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    84d4:	9e 01       	movw	r18, r28
    84d6:	29 53       	subi	r18, 0x39	; 57
    84d8:	3f 4f       	sbci	r19, 0xFF	; 255
    84da:	80 e0       	ldi	r24, 0x00	; 0
    84dc:	90 e0       	ldi	r25, 0x00	; 0
    84de:	a0 ea       	ldi	r26, 0xA0	; 160
    84e0:	b1 e4       	ldi	r27, 0x41	; 65
    84e2:	f9 01       	movw	r30, r18
    84e4:	80 83       	st	Z, r24
    84e6:	91 83       	std	Z+1, r25	; 0x01
    84e8:	a2 83       	std	Z+2, r26	; 0x02
    84ea:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    84ec:	8e 01       	movw	r16, r28
    84ee:	05 53       	subi	r16, 0x35	; 53
    84f0:	1f 4f       	sbci	r17, 0xFF	; 255
    84f2:	ce 01       	movw	r24, r28
    84f4:	89 53       	subi	r24, 0x39	; 57
    84f6:	9f 4f       	sbci	r25, 0xFF	; 255
    84f8:	fc 01       	movw	r30, r24
    84fa:	60 81       	ld	r22, Z
    84fc:	71 81       	ldd	r23, Z+1	; 0x01
    84fe:	82 81       	ldd	r24, Z+2	; 0x02
    8500:	93 81       	ldd	r25, Z+3	; 0x03
    8502:	26 e6       	ldi	r18, 0x66	; 102
    8504:	36 e6       	ldi	r19, 0x66	; 102
    8506:	46 e6       	ldi	r20, 0x66	; 102
    8508:	55 e4       	ldi	r21, 0x45	; 69
    850a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    850e:	dc 01       	movw	r26, r24
    8510:	cb 01       	movw	r24, r22
    8512:	f8 01       	movw	r30, r16
    8514:	80 83       	st	Z, r24
    8516:	91 83       	std	Z+1, r25	; 0x01
    8518:	a2 83       	std	Z+2, r26	; 0x02
    851a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    851c:	ce 01       	movw	r24, r28
    851e:	85 53       	subi	r24, 0x35	; 53
    8520:	9f 4f       	sbci	r25, 0xFF	; 255
    8522:	11 e0       	ldi	r17, 0x01	; 1
    8524:	fc 01       	movw	r30, r24
    8526:	60 81       	ld	r22, Z
    8528:	71 81       	ldd	r23, Z+1	; 0x01
    852a:	82 81       	ldd	r24, Z+2	; 0x02
    852c:	93 81       	ldd	r25, Z+3	; 0x03
    852e:	20 e0       	ldi	r18, 0x00	; 0
    8530:	30 e0       	ldi	r19, 0x00	; 0
    8532:	40 e8       	ldi	r20, 0x80	; 128
    8534:	5f e3       	ldi	r21, 0x3F	; 63
    8536:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    853a:	88 23       	and	r24, r24
    853c:	0c f0       	brlt	.+2      	; 0x8540 <pick_drop+0x162e>
    853e:	10 e0       	ldi	r17, 0x00	; 0
    8540:	11 23       	and	r17, r17
    8542:	49 f0       	breq	.+18     	; 0x8556 <pick_drop+0x1644>
		__ticks = 1;
    8544:	ce 01       	movw	r24, r28
    8546:	81 53       	subi	r24, 0x31	; 49
    8548:	9f 4f       	sbci	r25, 0xFF	; 255
    854a:	21 e0       	ldi	r18, 0x01	; 1
    854c:	30 e0       	ldi	r19, 0x00	; 0
    854e:	fc 01       	movw	r30, r24
    8550:	31 83       	std	Z+1, r19	; 0x01
    8552:	20 83       	st	Z, r18
    8554:	74 c0       	rjmp	.+232    	; 0x863e <pick_drop+0x172c>
	else if (__tmp > 65535)
    8556:	ce 01       	movw	r24, r28
    8558:	85 53       	subi	r24, 0x35	; 53
    855a:	9f 4f       	sbci	r25, 0xFF	; 255
    855c:	11 e0       	ldi	r17, 0x01	; 1
    855e:	fc 01       	movw	r30, r24
    8560:	60 81       	ld	r22, Z
    8562:	71 81       	ldd	r23, Z+1	; 0x01
    8564:	82 81       	ldd	r24, Z+2	; 0x02
    8566:	93 81       	ldd	r25, Z+3	; 0x03
    8568:	20 e0       	ldi	r18, 0x00	; 0
    856a:	3f ef       	ldi	r19, 0xFF	; 255
    856c:	4f e7       	ldi	r20, 0x7F	; 127
    856e:	57 e4       	ldi	r21, 0x47	; 71
    8570:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    8574:	18 16       	cp	r1, r24
    8576:	0c f0       	brlt	.+2      	; 0x857a <pick_drop+0x1668>
    8578:	10 e0       	ldi	r17, 0x00	; 0
    857a:	11 23       	and	r17, r17
    857c:	09 f4       	brne	.+2      	; 0x8580 <pick_drop+0x166e>
    857e:	4d c0       	rjmp	.+154    	; 0x861a <pick_drop+0x1708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8580:	ce 01       	movw	r24, r28
    8582:	89 53       	subi	r24, 0x39	; 57
    8584:	9f 4f       	sbci	r25, 0xFF	; 255
    8586:	fc 01       	movw	r30, r24
    8588:	60 81       	ld	r22, Z
    858a:	71 81       	ldd	r23, Z+1	; 0x01
    858c:	82 81       	ldd	r24, Z+2	; 0x02
    858e:	93 81       	ldd	r25, Z+3	; 0x03
    8590:	20 e0       	ldi	r18, 0x00	; 0
    8592:	30 e0       	ldi	r19, 0x00	; 0
    8594:	40 e2       	ldi	r20, 0x20	; 32
    8596:	51 e4       	ldi	r21, 0x41	; 65
    8598:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    859c:	dc 01       	movw	r26, r24
    859e:	cb 01       	movw	r24, r22
    85a0:	8e 01       	movw	r16, r28
    85a2:	01 53       	subi	r16, 0x31	; 49
    85a4:	1f 4f       	sbci	r17, 0xFF	; 255
    85a6:	bc 01       	movw	r22, r24
    85a8:	cd 01       	movw	r24, r26
    85aa:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    85ae:	dc 01       	movw	r26, r24
    85b0:	cb 01       	movw	r24, r22
    85b2:	f8 01       	movw	r30, r16
    85b4:	91 83       	std	Z+1, r25	; 0x01
    85b6:	80 83       	st	Z, r24
    85b8:	27 c0       	rjmp	.+78     	; 0x8608 <pick_drop+0x16f6>
    85ba:	ce 01       	movw	r24, r28
    85bc:	8f 52       	subi	r24, 0x2F	; 47
    85be:	9f 4f       	sbci	r25, 0xFF	; 255
    85c0:	20 e7       	ldi	r18, 0x70	; 112
    85c2:	31 e0       	ldi	r19, 0x01	; 1
    85c4:	fc 01       	movw	r30, r24
    85c6:	31 83       	std	Z+1, r19	; 0x01
    85c8:	20 83       	st	Z, r18
    85ca:	ce 01       	movw	r24, r28
    85cc:	8f 52       	subi	r24, 0x2F	; 47
    85ce:	9f 4f       	sbci	r25, 0xFF	; 255
    85d0:	fc 01       	movw	r30, r24
    85d2:	80 81       	ld	r24, Z
    85d4:	91 81       	ldd	r25, Z+1	; 0x01
    85d6:	8c 01       	movw	r16, r24
    85d8:	c8 01       	movw	r24, r16
    85da:	01 97       	sbiw	r24, 0x01	; 1
    85dc:	f1 f7       	brne	.-4      	; 0x85da <pick_drop+0x16c8>
    85de:	8c 01       	movw	r16, r24
    85e0:	ce 01       	movw	r24, r28
    85e2:	8f 52       	subi	r24, 0x2F	; 47
    85e4:	9f 4f       	sbci	r25, 0xFF	; 255
    85e6:	fc 01       	movw	r30, r24
    85e8:	11 83       	std	Z+1, r17	; 0x01
    85ea:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    85ec:	ce 01       	movw	r24, r28
    85ee:	81 53       	subi	r24, 0x31	; 49
    85f0:	9f 4f       	sbci	r25, 0xFF	; 255
    85f2:	9e 01       	movw	r18, r28
    85f4:	21 53       	subi	r18, 0x31	; 49
    85f6:	3f 4f       	sbci	r19, 0xFF	; 255
    85f8:	f9 01       	movw	r30, r18
    85fa:	20 81       	ld	r18, Z
    85fc:	31 81       	ldd	r19, Z+1	; 0x01
    85fe:	21 50       	subi	r18, 0x01	; 1
    8600:	30 40       	sbci	r19, 0x00	; 0
    8602:	fc 01       	movw	r30, r24
    8604:	31 83       	std	Z+1, r19	; 0x01
    8606:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8608:	ce 01       	movw	r24, r28
    860a:	81 53       	subi	r24, 0x31	; 49
    860c:	9f 4f       	sbci	r25, 0xFF	; 255
    860e:	fc 01       	movw	r30, r24
    8610:	80 81       	ld	r24, Z
    8612:	91 81       	ldd	r25, Z+1	; 0x01
    8614:	00 97       	sbiw	r24, 0x00	; 0
    8616:	89 f6       	brne	.-94     	; 0x85ba <pick_drop+0x16a8>
    8618:	2f c0       	rjmp	.+94     	; 0x8678 <pick_drop+0x1766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    861a:	8e 01       	movw	r16, r28
    861c:	01 53       	subi	r16, 0x31	; 49
    861e:	1f 4f       	sbci	r17, 0xFF	; 255
    8620:	ce 01       	movw	r24, r28
    8622:	85 53       	subi	r24, 0x35	; 53
    8624:	9f 4f       	sbci	r25, 0xFF	; 255
    8626:	fc 01       	movw	r30, r24
    8628:	60 81       	ld	r22, Z
    862a:	71 81       	ldd	r23, Z+1	; 0x01
    862c:	82 81       	ldd	r24, Z+2	; 0x02
    862e:	93 81       	ldd	r25, Z+3	; 0x03
    8630:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8634:	dc 01       	movw	r26, r24
    8636:	cb 01       	movw	r24, r22
    8638:	f8 01       	movw	r30, r16
    863a:	91 83       	std	Z+1, r25	; 0x01
    863c:	80 83       	st	Z, r24
    863e:	ce 01       	movw	r24, r28
    8640:	8d 52       	subi	r24, 0x2D	; 45
    8642:	9f 4f       	sbci	r25, 0xFF	; 255
    8644:	9e 01       	movw	r18, r28
    8646:	21 53       	subi	r18, 0x31	; 49
    8648:	3f 4f       	sbci	r19, 0xFF	; 255
    864a:	f9 01       	movw	r30, r18
    864c:	20 81       	ld	r18, Z
    864e:	31 81       	ldd	r19, Z+1	; 0x01
    8650:	fc 01       	movw	r30, r24
    8652:	31 83       	std	Z+1, r19	; 0x01
    8654:	20 83       	st	Z, r18
    8656:	ce 01       	movw	r24, r28
    8658:	8d 52       	subi	r24, 0x2D	; 45
    865a:	9f 4f       	sbci	r25, 0xFF	; 255
    865c:	fc 01       	movw	r30, r24
    865e:	80 81       	ld	r24, Z
    8660:	91 81       	ldd	r25, Z+1	; 0x01
    8662:	8c 01       	movw	r16, r24
    8664:	c8 01       	movw	r24, r16
    8666:	01 97       	sbiw	r24, 0x01	; 1
    8668:	f1 f7       	brne	.-4      	; 0x8666 <pick_drop+0x1754>
    866a:	8c 01       	movw	r16, r24
    866c:	ce 01       	movw	r24, r28
    866e:	8d 52       	subi	r24, 0x2D	; 45
    8670:	9f 4f       	sbci	r25, 0xFF	; 255
    8672:	fc 01       	movw	r30, r24
    8674:	11 83       	std	Z+1, r17	; 0x01
    8676:	00 83       	st	Z, r16
					_delay_ms(20);
				}
		}
		if(pd == '2')//right animals
    8678:	ce 01       	movw	r24, r28
    867a:	89 59       	subi	r24, 0x99	; 153
    867c:	9c 4f       	sbci	r25, 0xFC	; 252
    867e:	fc 01       	movw	r30, r24
    8680:	80 81       	ld	r24, Z
    8682:	82 33       	cpi	r24, 0x32	; 50
    8684:	11 f0       	breq	.+4      	; 0x868a <pick_drop+0x1778>
    8686:	0c 94 9d 4c 	jmp	0x993a	; 0x993a <pick_drop+0x2a28>
		{
			if(master_path[node-1]=='U')
    868a:	80 91 71 03 	lds	r24, 0x0371
    868e:	90 91 72 03 	lds	r25, 0x0372
    8692:	01 97       	sbiw	r24, 0x01	; 1
    8694:	8b 58       	subi	r24, 0x8B	; 139
    8696:	9c 4f       	sbci	r25, 0xFC	; 252
    8698:	fc 01       	movw	r30, r24
    869a:	80 81       	ld	r24, Z
    869c:	85 35       	cpi	r24, 0x55	; 85
    869e:	09 f0       	breq	.+2      	; 0x86a2 <pick_drop+0x1790>
    86a0:	59 c3       	rjmp	.+1714   	; 0x8d54 <pick_drop+0x1e42>
			{
			forward_mm(40);
    86a2:	88 e2       	ldi	r24, 0x28	; 40
    86a4:	90 e0       	ldi	r25, 0x00	; 0
    86a6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    86aa:	9e 01       	movw	r18, r28
    86ac:	2b 52       	subi	r18, 0x2B	; 43
    86ae:	3f 4f       	sbci	r19, 0xFF	; 255
    86b0:	80 e0       	ldi	r24, 0x00	; 0
    86b2:	90 e0       	ldi	r25, 0x00	; 0
    86b4:	a0 ea       	ldi	r26, 0xA0	; 160
    86b6:	b1 e4       	ldi	r27, 0x41	; 65
    86b8:	f9 01       	movw	r30, r18
    86ba:	80 83       	st	Z, r24
    86bc:	91 83       	std	Z+1, r25	; 0x01
    86be:	a2 83       	std	Z+2, r26	; 0x02
    86c0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    86c2:	8e 01       	movw	r16, r28
    86c4:	07 52       	subi	r16, 0x27	; 39
    86c6:	1f 4f       	sbci	r17, 0xFF	; 255
    86c8:	ce 01       	movw	r24, r28
    86ca:	8b 52       	subi	r24, 0x2B	; 43
    86cc:	9f 4f       	sbci	r25, 0xFF	; 255
    86ce:	fc 01       	movw	r30, r24
    86d0:	60 81       	ld	r22, Z
    86d2:	71 81       	ldd	r23, Z+1	; 0x01
    86d4:	82 81       	ldd	r24, Z+2	; 0x02
    86d6:	93 81       	ldd	r25, Z+3	; 0x03
    86d8:	26 e6       	ldi	r18, 0x66	; 102
    86da:	36 e6       	ldi	r19, 0x66	; 102
    86dc:	46 e6       	ldi	r20, 0x66	; 102
    86de:	55 e4       	ldi	r21, 0x45	; 69
    86e0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    86e4:	dc 01       	movw	r26, r24
    86e6:	cb 01       	movw	r24, r22
    86e8:	f8 01       	movw	r30, r16
    86ea:	80 83       	st	Z, r24
    86ec:	91 83       	std	Z+1, r25	; 0x01
    86ee:	a2 83       	std	Z+2, r26	; 0x02
    86f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    86f2:	ce 01       	movw	r24, r28
    86f4:	87 52       	subi	r24, 0x27	; 39
    86f6:	9f 4f       	sbci	r25, 0xFF	; 255
    86f8:	11 e0       	ldi	r17, 0x01	; 1
    86fa:	fc 01       	movw	r30, r24
    86fc:	60 81       	ld	r22, Z
    86fe:	71 81       	ldd	r23, Z+1	; 0x01
    8700:	82 81       	ldd	r24, Z+2	; 0x02
    8702:	93 81       	ldd	r25, Z+3	; 0x03
    8704:	20 e0       	ldi	r18, 0x00	; 0
    8706:	30 e0       	ldi	r19, 0x00	; 0
    8708:	40 e8       	ldi	r20, 0x80	; 128
    870a:	5f e3       	ldi	r21, 0x3F	; 63
    870c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    8710:	88 23       	and	r24, r24
    8712:	0c f0       	brlt	.+2      	; 0x8716 <pick_drop+0x1804>
    8714:	10 e0       	ldi	r17, 0x00	; 0
    8716:	11 23       	and	r17, r17
    8718:	49 f0       	breq	.+18     	; 0x872c <pick_drop+0x181a>
		__ticks = 1;
    871a:	ce 01       	movw	r24, r28
    871c:	83 52       	subi	r24, 0x23	; 35
    871e:	9f 4f       	sbci	r25, 0xFF	; 255
    8720:	21 e0       	ldi	r18, 0x01	; 1
    8722:	30 e0       	ldi	r19, 0x00	; 0
    8724:	fc 01       	movw	r30, r24
    8726:	31 83       	std	Z+1, r19	; 0x01
    8728:	20 83       	st	Z, r18
    872a:	74 c0       	rjmp	.+232    	; 0x8814 <pick_drop+0x1902>
	else if (__tmp > 65535)
    872c:	ce 01       	movw	r24, r28
    872e:	87 52       	subi	r24, 0x27	; 39
    8730:	9f 4f       	sbci	r25, 0xFF	; 255
    8732:	11 e0       	ldi	r17, 0x01	; 1
    8734:	fc 01       	movw	r30, r24
    8736:	60 81       	ld	r22, Z
    8738:	71 81       	ldd	r23, Z+1	; 0x01
    873a:	82 81       	ldd	r24, Z+2	; 0x02
    873c:	93 81       	ldd	r25, Z+3	; 0x03
    873e:	20 e0       	ldi	r18, 0x00	; 0
    8740:	3f ef       	ldi	r19, 0xFF	; 255
    8742:	4f e7       	ldi	r20, 0x7F	; 127
    8744:	57 e4       	ldi	r21, 0x47	; 71
    8746:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    874a:	18 16       	cp	r1, r24
    874c:	0c f0       	brlt	.+2      	; 0x8750 <pick_drop+0x183e>
    874e:	10 e0       	ldi	r17, 0x00	; 0
    8750:	11 23       	and	r17, r17
    8752:	09 f4       	brne	.+2      	; 0x8756 <pick_drop+0x1844>
    8754:	4d c0       	rjmp	.+154    	; 0x87f0 <pick_drop+0x18de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8756:	ce 01       	movw	r24, r28
    8758:	8b 52       	subi	r24, 0x2B	; 43
    875a:	9f 4f       	sbci	r25, 0xFF	; 255
    875c:	fc 01       	movw	r30, r24
    875e:	60 81       	ld	r22, Z
    8760:	71 81       	ldd	r23, Z+1	; 0x01
    8762:	82 81       	ldd	r24, Z+2	; 0x02
    8764:	93 81       	ldd	r25, Z+3	; 0x03
    8766:	20 e0       	ldi	r18, 0x00	; 0
    8768:	30 e0       	ldi	r19, 0x00	; 0
    876a:	40 e2       	ldi	r20, 0x20	; 32
    876c:	51 e4       	ldi	r21, 0x41	; 65
    876e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8772:	dc 01       	movw	r26, r24
    8774:	cb 01       	movw	r24, r22
    8776:	8e 01       	movw	r16, r28
    8778:	03 52       	subi	r16, 0x23	; 35
    877a:	1f 4f       	sbci	r17, 0xFF	; 255
    877c:	bc 01       	movw	r22, r24
    877e:	cd 01       	movw	r24, r26
    8780:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8784:	dc 01       	movw	r26, r24
    8786:	cb 01       	movw	r24, r22
    8788:	f8 01       	movw	r30, r16
    878a:	91 83       	std	Z+1, r25	; 0x01
    878c:	80 83       	st	Z, r24
    878e:	27 c0       	rjmp	.+78     	; 0x87de <pick_drop+0x18cc>
    8790:	ce 01       	movw	r24, r28
    8792:	81 52       	subi	r24, 0x21	; 33
    8794:	9f 4f       	sbci	r25, 0xFF	; 255
    8796:	20 e7       	ldi	r18, 0x70	; 112
    8798:	31 e0       	ldi	r19, 0x01	; 1
    879a:	fc 01       	movw	r30, r24
    879c:	31 83       	std	Z+1, r19	; 0x01
    879e:	20 83       	st	Z, r18
    87a0:	ce 01       	movw	r24, r28
    87a2:	81 52       	subi	r24, 0x21	; 33
    87a4:	9f 4f       	sbci	r25, 0xFF	; 255
    87a6:	fc 01       	movw	r30, r24
    87a8:	80 81       	ld	r24, Z
    87aa:	91 81       	ldd	r25, Z+1	; 0x01
    87ac:	8c 01       	movw	r16, r24
    87ae:	c8 01       	movw	r24, r16
    87b0:	01 97       	sbiw	r24, 0x01	; 1
    87b2:	f1 f7       	brne	.-4      	; 0x87b0 <pick_drop+0x189e>
    87b4:	8c 01       	movw	r16, r24
    87b6:	ce 01       	movw	r24, r28
    87b8:	81 52       	subi	r24, 0x21	; 33
    87ba:	9f 4f       	sbci	r25, 0xFF	; 255
    87bc:	fc 01       	movw	r30, r24
    87be:	11 83       	std	Z+1, r17	; 0x01
    87c0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    87c2:	ce 01       	movw	r24, r28
    87c4:	83 52       	subi	r24, 0x23	; 35
    87c6:	9f 4f       	sbci	r25, 0xFF	; 255
    87c8:	9e 01       	movw	r18, r28
    87ca:	23 52       	subi	r18, 0x23	; 35
    87cc:	3f 4f       	sbci	r19, 0xFF	; 255
    87ce:	f9 01       	movw	r30, r18
    87d0:	20 81       	ld	r18, Z
    87d2:	31 81       	ldd	r19, Z+1	; 0x01
    87d4:	21 50       	subi	r18, 0x01	; 1
    87d6:	30 40       	sbci	r19, 0x00	; 0
    87d8:	fc 01       	movw	r30, r24
    87da:	31 83       	std	Z+1, r19	; 0x01
    87dc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    87de:	ce 01       	movw	r24, r28
    87e0:	83 52       	subi	r24, 0x23	; 35
    87e2:	9f 4f       	sbci	r25, 0xFF	; 255
    87e4:	fc 01       	movw	r30, r24
    87e6:	80 81       	ld	r24, Z
    87e8:	91 81       	ldd	r25, Z+1	; 0x01
    87ea:	00 97       	sbiw	r24, 0x00	; 0
    87ec:	89 f6       	brne	.-94     	; 0x8790 <pick_drop+0x187e>
    87ee:	2f c0       	rjmp	.+94     	; 0x884e <pick_drop+0x193c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    87f0:	8e 01       	movw	r16, r28
    87f2:	03 52       	subi	r16, 0x23	; 35
    87f4:	1f 4f       	sbci	r17, 0xFF	; 255
    87f6:	ce 01       	movw	r24, r28
    87f8:	87 52       	subi	r24, 0x27	; 39
    87fa:	9f 4f       	sbci	r25, 0xFF	; 255
    87fc:	fc 01       	movw	r30, r24
    87fe:	60 81       	ld	r22, Z
    8800:	71 81       	ldd	r23, Z+1	; 0x01
    8802:	82 81       	ldd	r24, Z+2	; 0x02
    8804:	93 81       	ldd	r25, Z+3	; 0x03
    8806:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    880a:	dc 01       	movw	r26, r24
    880c:	cb 01       	movw	r24, r22
    880e:	f8 01       	movw	r30, r16
    8810:	91 83       	std	Z+1, r25	; 0x01
    8812:	80 83       	st	Z, r24
    8814:	ce 01       	movw	r24, r28
    8816:	8f 51       	subi	r24, 0x1F	; 31
    8818:	9f 4f       	sbci	r25, 0xFF	; 255
    881a:	9e 01       	movw	r18, r28
    881c:	23 52       	subi	r18, 0x23	; 35
    881e:	3f 4f       	sbci	r19, 0xFF	; 255
    8820:	f9 01       	movw	r30, r18
    8822:	20 81       	ld	r18, Z
    8824:	31 81       	ldd	r19, Z+1	; 0x01
    8826:	fc 01       	movw	r30, r24
    8828:	31 83       	std	Z+1, r19	; 0x01
    882a:	20 83       	st	Z, r18
    882c:	ce 01       	movw	r24, r28
    882e:	8f 51       	subi	r24, 0x1F	; 31
    8830:	9f 4f       	sbci	r25, 0xFF	; 255
    8832:	fc 01       	movw	r30, r24
    8834:	80 81       	ld	r24, Z
    8836:	91 81       	ldd	r25, Z+1	; 0x01
    8838:	8c 01       	movw	r16, r24
    883a:	c8 01       	movw	r24, r16
    883c:	01 97       	sbiw	r24, 0x01	; 1
    883e:	f1 f7       	brne	.-4      	; 0x883c <pick_drop+0x192a>
    8840:	8c 01       	movw	r16, r24
    8842:	ce 01       	movw	r24, r28
    8844:	8f 51       	subi	r24, 0x1F	; 31
    8846:	9f 4f       	sbci	r25, 0xFF	; 255
    8848:	fc 01       	movw	r30, r24
    884a:	11 83       	std	Z+1, r17	; 0x01
    884c:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right2();
    884e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    8852:	9e 01       	movw	r18, r28
    8854:	2d 51       	subi	r18, 0x1D	; 29
    8856:	3f 4f       	sbci	r19, 0xFF	; 255
    8858:	80 e0       	ldi	r24, 0x00	; 0
    885a:	90 e0       	ldi	r25, 0x00	; 0
    885c:	a8 e4       	ldi	r26, 0x48	; 72
    885e:	b2 e4       	ldi	r27, 0x42	; 66
    8860:	f9 01       	movw	r30, r18
    8862:	80 83       	st	Z, r24
    8864:	91 83       	std	Z+1, r25	; 0x01
    8866:	a2 83       	std	Z+2, r26	; 0x02
    8868:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    886a:	8e 01       	movw	r16, r28
    886c:	09 51       	subi	r16, 0x19	; 25
    886e:	1f 4f       	sbci	r17, 0xFF	; 255
    8870:	ce 01       	movw	r24, r28
    8872:	8d 51       	subi	r24, 0x1D	; 29
    8874:	9f 4f       	sbci	r25, 0xFF	; 255
    8876:	fc 01       	movw	r30, r24
    8878:	60 81       	ld	r22, Z
    887a:	71 81       	ldd	r23, Z+1	; 0x01
    887c:	82 81       	ldd	r24, Z+2	; 0x02
    887e:	93 81       	ldd	r25, Z+3	; 0x03
    8880:	26 e6       	ldi	r18, 0x66	; 102
    8882:	36 e6       	ldi	r19, 0x66	; 102
    8884:	46 e6       	ldi	r20, 0x66	; 102
    8886:	55 e4       	ldi	r21, 0x45	; 69
    8888:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    888c:	dc 01       	movw	r26, r24
    888e:	cb 01       	movw	r24, r22
    8890:	f8 01       	movw	r30, r16
    8892:	80 83       	st	Z, r24
    8894:	91 83       	std	Z+1, r25	; 0x01
    8896:	a2 83       	std	Z+2, r26	; 0x02
    8898:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    889a:	ce 01       	movw	r24, r28
    889c:	89 51       	subi	r24, 0x19	; 25
    889e:	9f 4f       	sbci	r25, 0xFF	; 255
    88a0:	11 e0       	ldi	r17, 0x01	; 1
    88a2:	fc 01       	movw	r30, r24
    88a4:	60 81       	ld	r22, Z
    88a6:	71 81       	ldd	r23, Z+1	; 0x01
    88a8:	82 81       	ldd	r24, Z+2	; 0x02
    88aa:	93 81       	ldd	r25, Z+3	; 0x03
    88ac:	20 e0       	ldi	r18, 0x00	; 0
    88ae:	30 e0       	ldi	r19, 0x00	; 0
    88b0:	40 e8       	ldi	r20, 0x80	; 128
    88b2:	5f e3       	ldi	r21, 0x3F	; 63
    88b4:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    88b8:	88 23       	and	r24, r24
    88ba:	0c f0       	brlt	.+2      	; 0x88be <pick_drop+0x19ac>
    88bc:	10 e0       	ldi	r17, 0x00	; 0
    88be:	11 23       	and	r17, r17
    88c0:	49 f0       	breq	.+18     	; 0x88d4 <pick_drop+0x19c2>
		__ticks = 1;
    88c2:	ce 01       	movw	r24, r28
    88c4:	85 51       	subi	r24, 0x15	; 21
    88c6:	9f 4f       	sbci	r25, 0xFF	; 255
    88c8:	21 e0       	ldi	r18, 0x01	; 1
    88ca:	30 e0       	ldi	r19, 0x00	; 0
    88cc:	fc 01       	movw	r30, r24
    88ce:	31 83       	std	Z+1, r19	; 0x01
    88d0:	20 83       	st	Z, r18
    88d2:	74 c0       	rjmp	.+232    	; 0x89bc <pick_drop+0x1aaa>
	else if (__tmp > 65535)
    88d4:	ce 01       	movw	r24, r28
    88d6:	89 51       	subi	r24, 0x19	; 25
    88d8:	9f 4f       	sbci	r25, 0xFF	; 255
    88da:	11 e0       	ldi	r17, 0x01	; 1
    88dc:	fc 01       	movw	r30, r24
    88de:	60 81       	ld	r22, Z
    88e0:	71 81       	ldd	r23, Z+1	; 0x01
    88e2:	82 81       	ldd	r24, Z+2	; 0x02
    88e4:	93 81       	ldd	r25, Z+3	; 0x03
    88e6:	20 e0       	ldi	r18, 0x00	; 0
    88e8:	3f ef       	ldi	r19, 0xFF	; 255
    88ea:	4f e7       	ldi	r20, 0x7F	; 127
    88ec:	57 e4       	ldi	r21, 0x47	; 71
    88ee:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    88f2:	18 16       	cp	r1, r24
    88f4:	0c f0       	brlt	.+2      	; 0x88f8 <pick_drop+0x19e6>
    88f6:	10 e0       	ldi	r17, 0x00	; 0
    88f8:	11 23       	and	r17, r17
    88fa:	09 f4       	brne	.+2      	; 0x88fe <pick_drop+0x19ec>
    88fc:	4d c0       	rjmp	.+154    	; 0x8998 <pick_drop+0x1a86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    88fe:	ce 01       	movw	r24, r28
    8900:	8d 51       	subi	r24, 0x1D	; 29
    8902:	9f 4f       	sbci	r25, 0xFF	; 255
    8904:	fc 01       	movw	r30, r24
    8906:	60 81       	ld	r22, Z
    8908:	71 81       	ldd	r23, Z+1	; 0x01
    890a:	82 81       	ldd	r24, Z+2	; 0x02
    890c:	93 81       	ldd	r25, Z+3	; 0x03
    890e:	20 e0       	ldi	r18, 0x00	; 0
    8910:	30 e0       	ldi	r19, 0x00	; 0
    8912:	40 e2       	ldi	r20, 0x20	; 32
    8914:	51 e4       	ldi	r21, 0x41	; 65
    8916:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    891a:	dc 01       	movw	r26, r24
    891c:	cb 01       	movw	r24, r22
    891e:	8e 01       	movw	r16, r28
    8920:	05 51       	subi	r16, 0x15	; 21
    8922:	1f 4f       	sbci	r17, 0xFF	; 255
    8924:	bc 01       	movw	r22, r24
    8926:	cd 01       	movw	r24, r26
    8928:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    892c:	dc 01       	movw	r26, r24
    892e:	cb 01       	movw	r24, r22
    8930:	f8 01       	movw	r30, r16
    8932:	91 83       	std	Z+1, r25	; 0x01
    8934:	80 83       	st	Z, r24
    8936:	27 c0       	rjmp	.+78     	; 0x8986 <pick_drop+0x1a74>
    8938:	ce 01       	movw	r24, r28
    893a:	83 51       	subi	r24, 0x13	; 19
    893c:	9f 4f       	sbci	r25, 0xFF	; 255
    893e:	20 e7       	ldi	r18, 0x70	; 112
    8940:	31 e0       	ldi	r19, 0x01	; 1
    8942:	fc 01       	movw	r30, r24
    8944:	31 83       	std	Z+1, r19	; 0x01
    8946:	20 83       	st	Z, r18
    8948:	ce 01       	movw	r24, r28
    894a:	83 51       	subi	r24, 0x13	; 19
    894c:	9f 4f       	sbci	r25, 0xFF	; 255
    894e:	fc 01       	movw	r30, r24
    8950:	80 81       	ld	r24, Z
    8952:	91 81       	ldd	r25, Z+1	; 0x01
    8954:	8c 01       	movw	r16, r24
    8956:	c8 01       	movw	r24, r16
    8958:	01 97       	sbiw	r24, 0x01	; 1
    895a:	f1 f7       	brne	.-4      	; 0x8958 <pick_drop+0x1a46>
    895c:	8c 01       	movw	r16, r24
    895e:	ce 01       	movw	r24, r28
    8960:	83 51       	subi	r24, 0x13	; 19
    8962:	9f 4f       	sbci	r25, 0xFF	; 255
    8964:	fc 01       	movw	r30, r24
    8966:	11 83       	std	Z+1, r17	; 0x01
    8968:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    896a:	ce 01       	movw	r24, r28
    896c:	85 51       	subi	r24, 0x15	; 21
    896e:	9f 4f       	sbci	r25, 0xFF	; 255
    8970:	9e 01       	movw	r18, r28
    8972:	25 51       	subi	r18, 0x15	; 21
    8974:	3f 4f       	sbci	r19, 0xFF	; 255
    8976:	f9 01       	movw	r30, r18
    8978:	20 81       	ld	r18, Z
    897a:	31 81       	ldd	r19, Z+1	; 0x01
    897c:	21 50       	subi	r18, 0x01	; 1
    897e:	30 40       	sbci	r19, 0x00	; 0
    8980:	fc 01       	movw	r30, r24
    8982:	31 83       	std	Z+1, r19	; 0x01
    8984:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8986:	ce 01       	movw	r24, r28
    8988:	85 51       	subi	r24, 0x15	; 21
    898a:	9f 4f       	sbci	r25, 0xFF	; 255
    898c:	fc 01       	movw	r30, r24
    898e:	80 81       	ld	r24, Z
    8990:	91 81       	ldd	r25, Z+1	; 0x01
    8992:	00 97       	sbiw	r24, 0x00	; 0
    8994:	89 f6       	brne	.-94     	; 0x8938 <pick_drop+0x1a26>
    8996:	2f c0       	rjmp	.+94     	; 0x89f6 <pick_drop+0x1ae4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8998:	8e 01       	movw	r16, r28
    899a:	05 51       	subi	r16, 0x15	; 21
    899c:	1f 4f       	sbci	r17, 0xFF	; 255
    899e:	ce 01       	movw	r24, r28
    89a0:	89 51       	subi	r24, 0x19	; 25
    89a2:	9f 4f       	sbci	r25, 0xFF	; 255
    89a4:	fc 01       	movw	r30, r24
    89a6:	60 81       	ld	r22, Z
    89a8:	71 81       	ldd	r23, Z+1	; 0x01
    89aa:	82 81       	ldd	r24, Z+2	; 0x02
    89ac:	93 81       	ldd	r25, Z+3	; 0x03
    89ae:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    89b2:	dc 01       	movw	r26, r24
    89b4:	cb 01       	movw	r24, r22
    89b6:	f8 01       	movw	r30, r16
    89b8:	91 83       	std	Z+1, r25	; 0x01
    89ba:	80 83       	st	Z, r24
    89bc:	ce 01       	movw	r24, r28
    89be:	81 51       	subi	r24, 0x11	; 17
    89c0:	9f 4f       	sbci	r25, 0xFF	; 255
    89c2:	9e 01       	movw	r18, r28
    89c4:	25 51       	subi	r18, 0x15	; 21
    89c6:	3f 4f       	sbci	r19, 0xFF	; 255
    89c8:	f9 01       	movw	r30, r18
    89ca:	20 81       	ld	r18, Z
    89cc:	31 81       	ldd	r19, Z+1	; 0x01
    89ce:	fc 01       	movw	r30, r24
    89d0:	31 83       	std	Z+1, r19	; 0x01
    89d2:	20 83       	st	Z, r18
    89d4:	ce 01       	movw	r24, r28
    89d6:	81 51       	subi	r24, 0x11	; 17
    89d8:	9f 4f       	sbci	r25, 0xFF	; 255
    89da:	fc 01       	movw	r30, r24
    89dc:	80 81       	ld	r24, Z
    89de:	91 81       	ldd	r25, Z+1	; 0x01
    89e0:	8c 01       	movw	r16, r24
    89e2:	c8 01       	movw	r24, r16
    89e4:	01 97       	sbiw	r24, 0x01	; 1
    89e6:	f1 f7       	brne	.-4      	; 0x89e4 <pick_drop+0x1ad2>
    89e8:	8c 01       	movw	r16, r24
    89ea:	ce 01       	movw	r24, r28
    89ec:	81 51       	subi	r24, 0x11	; 17
    89ee:	9f 4f       	sbci	r25, 0xFF	; 255
    89f0:	fc 01       	movw	r30, r24
    89f2:	11 83       	std	Z+1, r17	; 0x01
    89f4:	00 83       	st	Z, r16
			_delay_ms(50);
			front();
    89f6:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    89fa:	9e 01       	movw	r18, r28
    89fc:	2f 50       	subi	r18, 0x0F	; 15
    89fe:	3f 4f       	sbci	r19, 0xFF	; 255
    8a00:	80 e0       	ldi	r24, 0x00	; 0
    8a02:	90 e0       	ldi	r25, 0x00	; 0
    8a04:	a8 ec       	ldi	r26, 0xC8	; 200
    8a06:	b2 e4       	ldi	r27, 0x42	; 66
    8a08:	f9 01       	movw	r30, r18
    8a0a:	80 83       	st	Z, r24
    8a0c:	91 83       	std	Z+1, r25	; 0x01
    8a0e:	a2 83       	std	Z+2, r26	; 0x02
    8a10:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8a12:	8e 01       	movw	r16, r28
    8a14:	0b 50       	subi	r16, 0x0B	; 11
    8a16:	1f 4f       	sbci	r17, 0xFF	; 255
    8a18:	ce 01       	movw	r24, r28
    8a1a:	8f 50       	subi	r24, 0x0F	; 15
    8a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a1e:	fc 01       	movw	r30, r24
    8a20:	60 81       	ld	r22, Z
    8a22:	71 81       	ldd	r23, Z+1	; 0x01
    8a24:	82 81       	ldd	r24, Z+2	; 0x02
    8a26:	93 81       	ldd	r25, Z+3	; 0x03
    8a28:	26 e6       	ldi	r18, 0x66	; 102
    8a2a:	36 e6       	ldi	r19, 0x66	; 102
    8a2c:	46 e6       	ldi	r20, 0x66	; 102
    8a2e:	55 e4       	ldi	r21, 0x45	; 69
    8a30:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8a34:	dc 01       	movw	r26, r24
    8a36:	cb 01       	movw	r24, r22
    8a38:	f8 01       	movw	r30, r16
    8a3a:	80 83       	st	Z, r24
    8a3c:	91 83       	std	Z+1, r25	; 0x01
    8a3e:	a2 83       	std	Z+2, r26	; 0x02
    8a40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8a42:	ce 01       	movw	r24, r28
    8a44:	8b 50       	subi	r24, 0x0B	; 11
    8a46:	9f 4f       	sbci	r25, 0xFF	; 255
    8a48:	11 e0       	ldi	r17, 0x01	; 1
    8a4a:	fc 01       	movw	r30, r24
    8a4c:	60 81       	ld	r22, Z
    8a4e:	71 81       	ldd	r23, Z+1	; 0x01
    8a50:	82 81       	ldd	r24, Z+2	; 0x02
    8a52:	93 81       	ldd	r25, Z+3	; 0x03
    8a54:	20 e0       	ldi	r18, 0x00	; 0
    8a56:	30 e0       	ldi	r19, 0x00	; 0
    8a58:	40 e8       	ldi	r20, 0x80	; 128
    8a5a:	5f e3       	ldi	r21, 0x3F	; 63
    8a5c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    8a60:	88 23       	and	r24, r24
    8a62:	0c f0       	brlt	.+2      	; 0x8a66 <pick_drop+0x1b54>
    8a64:	10 e0       	ldi	r17, 0x00	; 0
    8a66:	11 23       	and	r17, r17
    8a68:	49 f0       	breq	.+18     	; 0x8a7c <pick_drop+0x1b6a>
		__ticks = 1;
    8a6a:	ce 01       	movw	r24, r28
    8a6c:	87 50       	subi	r24, 0x07	; 7
    8a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    8a70:	21 e0       	ldi	r18, 0x01	; 1
    8a72:	30 e0       	ldi	r19, 0x00	; 0
    8a74:	fc 01       	movw	r30, r24
    8a76:	31 83       	std	Z+1, r19	; 0x01
    8a78:	20 83       	st	Z, r18
    8a7a:	74 c0       	rjmp	.+232    	; 0x8b64 <pick_drop+0x1c52>
	else if (__tmp > 65535)
    8a7c:	ce 01       	movw	r24, r28
    8a7e:	8b 50       	subi	r24, 0x0B	; 11
    8a80:	9f 4f       	sbci	r25, 0xFF	; 255
    8a82:	11 e0       	ldi	r17, 0x01	; 1
    8a84:	fc 01       	movw	r30, r24
    8a86:	60 81       	ld	r22, Z
    8a88:	71 81       	ldd	r23, Z+1	; 0x01
    8a8a:	82 81       	ldd	r24, Z+2	; 0x02
    8a8c:	93 81       	ldd	r25, Z+3	; 0x03
    8a8e:	20 e0       	ldi	r18, 0x00	; 0
    8a90:	3f ef       	ldi	r19, 0xFF	; 255
    8a92:	4f e7       	ldi	r20, 0x7F	; 127
    8a94:	57 e4       	ldi	r21, 0x47	; 71
    8a96:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    8a9a:	18 16       	cp	r1, r24
    8a9c:	0c f0       	brlt	.+2      	; 0x8aa0 <pick_drop+0x1b8e>
    8a9e:	10 e0       	ldi	r17, 0x00	; 0
    8aa0:	11 23       	and	r17, r17
    8aa2:	09 f4       	brne	.+2      	; 0x8aa6 <pick_drop+0x1b94>
    8aa4:	4d c0       	rjmp	.+154    	; 0x8b40 <pick_drop+0x1c2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8aa6:	ce 01       	movw	r24, r28
    8aa8:	8f 50       	subi	r24, 0x0F	; 15
    8aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    8aac:	fc 01       	movw	r30, r24
    8aae:	60 81       	ld	r22, Z
    8ab0:	71 81       	ldd	r23, Z+1	; 0x01
    8ab2:	82 81       	ldd	r24, Z+2	; 0x02
    8ab4:	93 81       	ldd	r25, Z+3	; 0x03
    8ab6:	20 e0       	ldi	r18, 0x00	; 0
    8ab8:	30 e0       	ldi	r19, 0x00	; 0
    8aba:	40 e2       	ldi	r20, 0x20	; 32
    8abc:	51 e4       	ldi	r21, 0x41	; 65
    8abe:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8ac2:	dc 01       	movw	r26, r24
    8ac4:	cb 01       	movw	r24, r22
    8ac6:	8e 01       	movw	r16, r28
    8ac8:	07 50       	subi	r16, 0x07	; 7
    8aca:	1f 4f       	sbci	r17, 0xFF	; 255
    8acc:	bc 01       	movw	r22, r24
    8ace:	cd 01       	movw	r24, r26
    8ad0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8ad4:	dc 01       	movw	r26, r24
    8ad6:	cb 01       	movw	r24, r22
    8ad8:	f8 01       	movw	r30, r16
    8ada:	91 83       	std	Z+1, r25	; 0x01
    8adc:	80 83       	st	Z, r24
    8ade:	27 c0       	rjmp	.+78     	; 0x8b2e <pick_drop+0x1c1c>
    8ae0:	ce 01       	movw	r24, r28
    8ae2:	85 50       	subi	r24, 0x05	; 5
    8ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae6:	20 e7       	ldi	r18, 0x70	; 112
    8ae8:	31 e0       	ldi	r19, 0x01	; 1
    8aea:	fc 01       	movw	r30, r24
    8aec:	31 83       	std	Z+1, r19	; 0x01
    8aee:	20 83       	st	Z, r18
    8af0:	ce 01       	movw	r24, r28
    8af2:	85 50       	subi	r24, 0x05	; 5
    8af4:	9f 4f       	sbci	r25, 0xFF	; 255
    8af6:	fc 01       	movw	r30, r24
    8af8:	80 81       	ld	r24, Z
    8afa:	91 81       	ldd	r25, Z+1	; 0x01
    8afc:	8c 01       	movw	r16, r24
    8afe:	c8 01       	movw	r24, r16
    8b00:	01 97       	sbiw	r24, 0x01	; 1
    8b02:	f1 f7       	brne	.-4      	; 0x8b00 <pick_drop+0x1bee>
    8b04:	8c 01       	movw	r16, r24
    8b06:	ce 01       	movw	r24, r28
    8b08:	85 50       	subi	r24, 0x05	; 5
    8b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    8b0c:	fc 01       	movw	r30, r24
    8b0e:	11 83       	std	Z+1, r17	; 0x01
    8b10:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b12:	ce 01       	movw	r24, r28
    8b14:	87 50       	subi	r24, 0x07	; 7
    8b16:	9f 4f       	sbci	r25, 0xFF	; 255
    8b18:	9e 01       	movw	r18, r28
    8b1a:	27 50       	subi	r18, 0x07	; 7
    8b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b1e:	f9 01       	movw	r30, r18
    8b20:	20 81       	ld	r18, Z
    8b22:	31 81       	ldd	r19, Z+1	; 0x01
    8b24:	21 50       	subi	r18, 0x01	; 1
    8b26:	30 40       	sbci	r19, 0x00	; 0
    8b28:	fc 01       	movw	r30, r24
    8b2a:	31 83       	std	Z+1, r19	; 0x01
    8b2c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b2e:	ce 01       	movw	r24, r28
    8b30:	87 50       	subi	r24, 0x07	; 7
    8b32:	9f 4f       	sbci	r25, 0xFF	; 255
    8b34:	fc 01       	movw	r30, r24
    8b36:	80 81       	ld	r24, Z
    8b38:	91 81       	ldd	r25, Z+1	; 0x01
    8b3a:	00 97       	sbiw	r24, 0x00	; 0
    8b3c:	89 f6       	brne	.-94     	; 0x8ae0 <pick_drop+0x1bce>
    8b3e:	2f c0       	rjmp	.+94     	; 0x8b9e <pick_drop+0x1c8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8b40:	8e 01       	movw	r16, r28
    8b42:	07 50       	subi	r16, 0x07	; 7
    8b44:	1f 4f       	sbci	r17, 0xFF	; 255
    8b46:	ce 01       	movw	r24, r28
    8b48:	8b 50       	subi	r24, 0x0B	; 11
    8b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    8b4c:	fc 01       	movw	r30, r24
    8b4e:	60 81       	ld	r22, Z
    8b50:	71 81       	ldd	r23, Z+1	; 0x01
    8b52:	82 81       	ldd	r24, Z+2	; 0x02
    8b54:	93 81       	ldd	r25, Z+3	; 0x03
    8b56:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8b5a:	dc 01       	movw	r26, r24
    8b5c:	cb 01       	movw	r24, r22
    8b5e:	f8 01       	movw	r30, r16
    8b60:	91 83       	std	Z+1, r25	; 0x01
    8b62:	80 83       	st	Z, r24
    8b64:	ce 01       	movw	r24, r28
    8b66:	83 50       	subi	r24, 0x03	; 3
    8b68:	9f 4f       	sbci	r25, 0xFF	; 255
    8b6a:	9e 01       	movw	r18, r28
    8b6c:	27 50       	subi	r18, 0x07	; 7
    8b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b70:	f9 01       	movw	r30, r18
    8b72:	20 81       	ld	r18, Z
    8b74:	31 81       	ldd	r19, Z+1	; 0x01
    8b76:	fc 01       	movw	r30, r24
    8b78:	31 83       	std	Z+1, r19	; 0x01
    8b7a:	20 83       	st	Z, r18
    8b7c:	ce 01       	movw	r24, r28
    8b7e:	83 50       	subi	r24, 0x03	; 3
    8b80:	9f 4f       	sbci	r25, 0xFF	; 255
    8b82:	fc 01       	movw	r30, r24
    8b84:	80 81       	ld	r24, Z
    8b86:	91 81       	ldd	r25, Z+1	; 0x01
    8b88:	8c 01       	movw	r16, r24
    8b8a:	c8 01       	movw	r24, r16
    8b8c:	01 97       	sbiw	r24, 0x01	; 1
    8b8e:	f1 f7       	brne	.-4      	; 0x8b8c <pick_drop+0x1c7a>
    8b90:	8c 01       	movw	r16, r24
    8b92:	ce 01       	movw	r24, r28
    8b94:	83 50       	subi	r24, 0x03	; 3
    8b96:	9f 4f       	sbci	r25, 0xFF	; 255
    8b98:	fc 01       	movw	r30, r24
    8b9a:	11 83       	std	Z+1, r17	; 0x01
    8b9c:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_left();
    8b9e:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
			back_mm(pdback);
    8ba2:	89 81       	ldd	r24, Y+1	; 0x01
    8ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ba6:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8baa:	9e 01       	movw	r18, r28
    8bac:	21 50       	subi	r18, 0x01	; 1
    8bae:	3f 4f       	sbci	r19, 0xFF	; 255
    8bb0:	80 e0       	ldi	r24, 0x00	; 0
    8bb2:	90 e0       	ldi	r25, 0x00	; 0
    8bb4:	a0 ea       	ldi	r26, 0xA0	; 160
    8bb6:	b1 e4       	ldi	r27, 0x41	; 65
    8bb8:	f9 01       	movw	r30, r18
    8bba:	80 83       	st	Z, r24
    8bbc:	91 83       	std	Z+1, r25	; 0x01
    8bbe:	a2 83       	std	Z+2, r26	; 0x02
    8bc0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8bc2:	8e 01       	movw	r16, r28
    8bc4:	0d 5f       	subi	r16, 0xFD	; 253
    8bc6:	1e 4f       	sbci	r17, 0xFE	; 254
    8bc8:	ce 01       	movw	r24, r28
    8bca:	81 50       	subi	r24, 0x01	; 1
    8bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    8bce:	fc 01       	movw	r30, r24
    8bd0:	60 81       	ld	r22, Z
    8bd2:	71 81       	ldd	r23, Z+1	; 0x01
    8bd4:	82 81       	ldd	r24, Z+2	; 0x02
    8bd6:	93 81       	ldd	r25, Z+3	; 0x03
    8bd8:	26 e6       	ldi	r18, 0x66	; 102
    8bda:	36 e6       	ldi	r19, 0x66	; 102
    8bdc:	46 e6       	ldi	r20, 0x66	; 102
    8bde:	55 e4       	ldi	r21, 0x45	; 69
    8be0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8be4:	dc 01       	movw	r26, r24
    8be6:	cb 01       	movw	r24, r22
    8be8:	f8 01       	movw	r30, r16
    8bea:	80 83       	st	Z, r24
    8bec:	91 83       	std	Z+1, r25	; 0x01
    8bee:	a2 83       	std	Z+2, r26	; 0x02
    8bf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8bf2:	ce 01       	movw	r24, r28
    8bf4:	8d 5f       	subi	r24, 0xFD	; 253
    8bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    8bf8:	11 e0       	ldi	r17, 0x01	; 1
    8bfa:	fc 01       	movw	r30, r24
    8bfc:	60 81       	ld	r22, Z
    8bfe:	71 81       	ldd	r23, Z+1	; 0x01
    8c00:	82 81       	ldd	r24, Z+2	; 0x02
    8c02:	93 81       	ldd	r25, Z+3	; 0x03
    8c04:	20 e0       	ldi	r18, 0x00	; 0
    8c06:	30 e0       	ldi	r19, 0x00	; 0
    8c08:	40 e8       	ldi	r20, 0x80	; 128
    8c0a:	5f e3       	ldi	r21, 0x3F	; 63
    8c0c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    8c10:	88 23       	and	r24, r24
    8c12:	0c f0       	brlt	.+2      	; 0x8c16 <pick_drop+0x1d04>
    8c14:	10 e0       	ldi	r17, 0x00	; 0
    8c16:	11 23       	and	r17, r17
    8c18:	49 f0       	breq	.+18     	; 0x8c2c <pick_drop+0x1d1a>
		__ticks = 1;
    8c1a:	ce 01       	movw	r24, r28
    8c1c:	89 5f       	subi	r24, 0xF9	; 249
    8c1e:	9e 4f       	sbci	r25, 0xFE	; 254
    8c20:	21 e0       	ldi	r18, 0x01	; 1
    8c22:	30 e0       	ldi	r19, 0x00	; 0
    8c24:	fc 01       	movw	r30, r24
    8c26:	31 83       	std	Z+1, r19	; 0x01
    8c28:	20 83       	st	Z, r18
    8c2a:	75 c0       	rjmp	.+234    	; 0x8d16 <pick_drop+0x1e04>
	else if (__tmp > 65535)
    8c2c:	ce 01       	movw	r24, r28
    8c2e:	8d 5f       	subi	r24, 0xFD	; 253
    8c30:	9e 4f       	sbci	r25, 0xFE	; 254
    8c32:	11 e0       	ldi	r17, 0x01	; 1
    8c34:	fc 01       	movw	r30, r24
    8c36:	60 81       	ld	r22, Z
    8c38:	71 81       	ldd	r23, Z+1	; 0x01
    8c3a:	82 81       	ldd	r24, Z+2	; 0x02
    8c3c:	93 81       	ldd	r25, Z+3	; 0x03
    8c3e:	20 e0       	ldi	r18, 0x00	; 0
    8c40:	3f ef       	ldi	r19, 0xFF	; 255
    8c42:	4f e7       	ldi	r20, 0x7F	; 127
    8c44:	57 e4       	ldi	r21, 0x47	; 71
    8c46:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    8c4a:	18 16       	cp	r1, r24
    8c4c:	0c f0       	brlt	.+2      	; 0x8c50 <pick_drop+0x1d3e>
    8c4e:	10 e0       	ldi	r17, 0x00	; 0
    8c50:	11 23       	and	r17, r17
    8c52:	09 f4       	brne	.+2      	; 0x8c56 <pick_drop+0x1d44>
    8c54:	4e c0       	rjmp	.+156    	; 0x8cf2 <pick_drop+0x1de0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8c56:	ce 01       	movw	r24, r28
    8c58:	81 50       	subi	r24, 0x01	; 1
    8c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c5c:	fc 01       	movw	r30, r24
    8c5e:	60 81       	ld	r22, Z
    8c60:	71 81       	ldd	r23, Z+1	; 0x01
    8c62:	82 81       	ldd	r24, Z+2	; 0x02
    8c64:	93 81       	ldd	r25, Z+3	; 0x03
    8c66:	20 e0       	ldi	r18, 0x00	; 0
    8c68:	30 e0       	ldi	r19, 0x00	; 0
    8c6a:	40 e2       	ldi	r20, 0x20	; 32
    8c6c:	51 e4       	ldi	r21, 0x41	; 65
    8c6e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8c72:	dc 01       	movw	r26, r24
    8c74:	cb 01       	movw	r24, r22
    8c76:	8e 01       	movw	r16, r28
    8c78:	09 5f       	subi	r16, 0xF9	; 249
    8c7a:	1e 4f       	sbci	r17, 0xFE	; 254
    8c7c:	bc 01       	movw	r22, r24
    8c7e:	cd 01       	movw	r24, r26
    8c80:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8c84:	dc 01       	movw	r26, r24
    8c86:	cb 01       	movw	r24, r22
    8c88:	f8 01       	movw	r30, r16
    8c8a:	91 83       	std	Z+1, r25	; 0x01
    8c8c:	80 83       	st	Z, r24
    8c8e:	27 c0       	rjmp	.+78     	; 0x8cde <pick_drop+0x1dcc>
    8c90:	ce 01       	movw	r24, r28
    8c92:	87 5f       	subi	r24, 0xF7	; 247
    8c94:	9e 4f       	sbci	r25, 0xFE	; 254
    8c96:	20 e7       	ldi	r18, 0x70	; 112
    8c98:	31 e0       	ldi	r19, 0x01	; 1
    8c9a:	fc 01       	movw	r30, r24
    8c9c:	31 83       	std	Z+1, r19	; 0x01
    8c9e:	20 83       	st	Z, r18
    8ca0:	ce 01       	movw	r24, r28
    8ca2:	87 5f       	subi	r24, 0xF7	; 247
    8ca4:	9e 4f       	sbci	r25, 0xFE	; 254
    8ca6:	fc 01       	movw	r30, r24
    8ca8:	80 81       	ld	r24, Z
    8caa:	91 81       	ldd	r25, Z+1	; 0x01
    8cac:	8c 01       	movw	r16, r24
    8cae:	c8 01       	movw	r24, r16
    8cb0:	01 97       	sbiw	r24, 0x01	; 1
    8cb2:	f1 f7       	brne	.-4      	; 0x8cb0 <pick_drop+0x1d9e>
    8cb4:	8c 01       	movw	r16, r24
    8cb6:	ce 01       	movw	r24, r28
    8cb8:	87 5f       	subi	r24, 0xF7	; 247
    8cba:	9e 4f       	sbci	r25, 0xFE	; 254
    8cbc:	fc 01       	movw	r30, r24
    8cbe:	11 83       	std	Z+1, r17	; 0x01
    8cc0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8cc2:	ce 01       	movw	r24, r28
    8cc4:	89 5f       	subi	r24, 0xF9	; 249
    8cc6:	9e 4f       	sbci	r25, 0xFE	; 254
    8cc8:	9e 01       	movw	r18, r28
    8cca:	29 5f       	subi	r18, 0xF9	; 249
    8ccc:	3e 4f       	sbci	r19, 0xFE	; 254
    8cce:	f9 01       	movw	r30, r18
    8cd0:	20 81       	ld	r18, Z
    8cd2:	31 81       	ldd	r19, Z+1	; 0x01
    8cd4:	21 50       	subi	r18, 0x01	; 1
    8cd6:	30 40       	sbci	r19, 0x00	; 0
    8cd8:	fc 01       	movw	r30, r24
    8cda:	31 83       	std	Z+1, r19	; 0x01
    8cdc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8cde:	ce 01       	movw	r24, r28
    8ce0:	89 5f       	subi	r24, 0xF9	; 249
    8ce2:	9e 4f       	sbci	r25, 0xFE	; 254
    8ce4:	fc 01       	movw	r30, r24
    8ce6:	80 81       	ld	r24, Z
    8ce8:	91 81       	ldd	r25, Z+1	; 0x01
    8cea:	00 97       	sbiw	r24, 0x00	; 0
    8cec:	89 f6       	brne	.-94     	; 0x8c90 <pick_drop+0x1d7e>
    8cee:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8cf2:	8e 01       	movw	r16, r28
    8cf4:	09 5f       	subi	r16, 0xF9	; 249
    8cf6:	1e 4f       	sbci	r17, 0xFE	; 254
    8cf8:	ce 01       	movw	r24, r28
    8cfa:	8d 5f       	subi	r24, 0xFD	; 253
    8cfc:	9e 4f       	sbci	r25, 0xFE	; 254
    8cfe:	fc 01       	movw	r30, r24
    8d00:	60 81       	ld	r22, Z
    8d02:	71 81       	ldd	r23, Z+1	; 0x01
    8d04:	82 81       	ldd	r24, Z+2	; 0x02
    8d06:	93 81       	ldd	r25, Z+3	; 0x03
    8d08:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8d0c:	dc 01       	movw	r26, r24
    8d0e:	cb 01       	movw	r24, r22
    8d10:	f8 01       	movw	r30, r16
    8d12:	91 83       	std	Z+1, r25	; 0x01
    8d14:	80 83       	st	Z, r24
    8d16:	ce 01       	movw	r24, r28
    8d18:	85 5f       	subi	r24, 0xF5	; 245
    8d1a:	9e 4f       	sbci	r25, 0xFE	; 254
    8d1c:	9e 01       	movw	r18, r28
    8d1e:	29 5f       	subi	r18, 0xF9	; 249
    8d20:	3e 4f       	sbci	r19, 0xFE	; 254
    8d22:	f9 01       	movw	r30, r18
    8d24:	20 81       	ld	r18, Z
    8d26:	31 81       	ldd	r19, Z+1	; 0x01
    8d28:	fc 01       	movw	r30, r24
    8d2a:	31 83       	std	Z+1, r19	; 0x01
    8d2c:	20 83       	st	Z, r18
    8d2e:	ce 01       	movw	r24, r28
    8d30:	85 5f       	subi	r24, 0xF5	; 245
    8d32:	9e 4f       	sbci	r25, 0xFE	; 254
    8d34:	fc 01       	movw	r30, r24
    8d36:	80 81       	ld	r24, Z
    8d38:	91 81       	ldd	r25, Z+1	; 0x01
    8d3a:	8c 01       	movw	r16, r24
    8d3c:	c8 01       	movw	r24, r16
    8d3e:	01 97       	sbiw	r24, 0x01	; 1
    8d40:	f1 f7       	brne	.-4      	; 0x8d3e <pick_drop+0x1e2c>
    8d42:	8c 01       	movw	r16, r24
    8d44:	ce 01       	movw	r24, r28
    8d46:	85 5f       	subi	r24, 0xF5	; 245
    8d48:	9e 4f       	sbci	r25, 0xFE	; 254
    8d4a:	fc 01       	movw	r30, r24
    8d4c:	11 83       	std	Z+1, r17	; 0x01
    8d4e:	00 83       	st	Z, r16
    8d50:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			_delay_ms(20);
			}
			else if(master_path[node-1] == 'N')
    8d54:	80 91 71 03 	lds	r24, 0x0371
    8d58:	90 91 72 03 	lds	r25, 0x0372
    8d5c:	01 97       	sbiw	r24, 0x01	; 1
    8d5e:	8b 58       	subi	r24, 0x8B	; 139
    8d60:	9c 4f       	sbci	r25, 0xFC	; 252
    8d62:	fc 01       	movw	r30, r24
    8d64:	80 81       	ld	r24, Z
    8d66:	8e 34       	cpi	r24, 0x4E	; 78
    8d68:	09 f0       	breq	.+2      	; 0x8d6c <pick_drop+0x1e5a>
    8d6a:	59 c3       	rjmp	.+1714   	; 0x941e <pick_drop+0x250c>
			{
				//right_cycle();
				forward_mm(140);
    8d6c:	8c e8       	ldi	r24, 0x8C	; 140
    8d6e:	90 e0       	ldi	r25, 0x00	; 0
    8d70:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    8d74:	9e 01       	movw	r18, r28
    8d76:	23 5f       	subi	r18, 0xF3	; 243
    8d78:	3e 4f       	sbci	r19, 0xFE	; 254
    8d7a:	80 e0       	ldi	r24, 0x00	; 0
    8d7c:	90 e0       	ldi	r25, 0x00	; 0
    8d7e:	a0 ea       	ldi	r26, 0xA0	; 160
    8d80:	b1 e4       	ldi	r27, 0x41	; 65
    8d82:	f9 01       	movw	r30, r18
    8d84:	80 83       	st	Z, r24
    8d86:	91 83       	std	Z+1, r25	; 0x01
    8d88:	a2 83       	std	Z+2, r26	; 0x02
    8d8a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8d8c:	8e 01       	movw	r16, r28
    8d8e:	0f 5e       	subi	r16, 0xEF	; 239
    8d90:	1e 4f       	sbci	r17, 0xFE	; 254
    8d92:	ce 01       	movw	r24, r28
    8d94:	83 5f       	subi	r24, 0xF3	; 243
    8d96:	9e 4f       	sbci	r25, 0xFE	; 254
    8d98:	fc 01       	movw	r30, r24
    8d9a:	60 81       	ld	r22, Z
    8d9c:	71 81       	ldd	r23, Z+1	; 0x01
    8d9e:	82 81       	ldd	r24, Z+2	; 0x02
    8da0:	93 81       	ldd	r25, Z+3	; 0x03
    8da2:	26 e6       	ldi	r18, 0x66	; 102
    8da4:	36 e6       	ldi	r19, 0x66	; 102
    8da6:	46 e6       	ldi	r20, 0x66	; 102
    8da8:	55 e4       	ldi	r21, 0x45	; 69
    8daa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8dae:	dc 01       	movw	r26, r24
    8db0:	cb 01       	movw	r24, r22
    8db2:	f8 01       	movw	r30, r16
    8db4:	80 83       	st	Z, r24
    8db6:	91 83       	std	Z+1, r25	; 0x01
    8db8:	a2 83       	std	Z+2, r26	; 0x02
    8dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8dbc:	ce 01       	movw	r24, r28
    8dbe:	8f 5e       	subi	r24, 0xEF	; 239
    8dc0:	9e 4f       	sbci	r25, 0xFE	; 254
    8dc2:	11 e0       	ldi	r17, 0x01	; 1
    8dc4:	fc 01       	movw	r30, r24
    8dc6:	60 81       	ld	r22, Z
    8dc8:	71 81       	ldd	r23, Z+1	; 0x01
    8dca:	82 81       	ldd	r24, Z+2	; 0x02
    8dcc:	93 81       	ldd	r25, Z+3	; 0x03
    8dce:	20 e0       	ldi	r18, 0x00	; 0
    8dd0:	30 e0       	ldi	r19, 0x00	; 0
    8dd2:	40 e8       	ldi	r20, 0x80	; 128
    8dd4:	5f e3       	ldi	r21, 0x3F	; 63
    8dd6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    8dda:	88 23       	and	r24, r24
    8ddc:	0c f0       	brlt	.+2      	; 0x8de0 <pick_drop+0x1ece>
    8dde:	10 e0       	ldi	r17, 0x00	; 0
    8de0:	11 23       	and	r17, r17
    8de2:	49 f0       	breq	.+18     	; 0x8df6 <pick_drop+0x1ee4>
		__ticks = 1;
    8de4:	ce 01       	movw	r24, r28
    8de6:	8b 5e       	subi	r24, 0xEB	; 235
    8de8:	9e 4f       	sbci	r25, 0xFE	; 254
    8dea:	21 e0       	ldi	r18, 0x01	; 1
    8dec:	30 e0       	ldi	r19, 0x00	; 0
    8dee:	fc 01       	movw	r30, r24
    8df0:	31 83       	std	Z+1, r19	; 0x01
    8df2:	20 83       	st	Z, r18
    8df4:	74 c0       	rjmp	.+232    	; 0x8ede <pick_drop+0x1fcc>
	else if (__tmp > 65535)
    8df6:	ce 01       	movw	r24, r28
    8df8:	8f 5e       	subi	r24, 0xEF	; 239
    8dfa:	9e 4f       	sbci	r25, 0xFE	; 254
    8dfc:	11 e0       	ldi	r17, 0x01	; 1
    8dfe:	fc 01       	movw	r30, r24
    8e00:	60 81       	ld	r22, Z
    8e02:	71 81       	ldd	r23, Z+1	; 0x01
    8e04:	82 81       	ldd	r24, Z+2	; 0x02
    8e06:	93 81       	ldd	r25, Z+3	; 0x03
    8e08:	20 e0       	ldi	r18, 0x00	; 0
    8e0a:	3f ef       	ldi	r19, 0xFF	; 255
    8e0c:	4f e7       	ldi	r20, 0x7F	; 127
    8e0e:	57 e4       	ldi	r21, 0x47	; 71
    8e10:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    8e14:	18 16       	cp	r1, r24
    8e16:	0c f0       	brlt	.+2      	; 0x8e1a <pick_drop+0x1f08>
    8e18:	10 e0       	ldi	r17, 0x00	; 0
    8e1a:	11 23       	and	r17, r17
    8e1c:	09 f4       	brne	.+2      	; 0x8e20 <pick_drop+0x1f0e>
    8e1e:	4d c0       	rjmp	.+154    	; 0x8eba <pick_drop+0x1fa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8e20:	ce 01       	movw	r24, r28
    8e22:	83 5f       	subi	r24, 0xF3	; 243
    8e24:	9e 4f       	sbci	r25, 0xFE	; 254
    8e26:	fc 01       	movw	r30, r24
    8e28:	60 81       	ld	r22, Z
    8e2a:	71 81       	ldd	r23, Z+1	; 0x01
    8e2c:	82 81       	ldd	r24, Z+2	; 0x02
    8e2e:	93 81       	ldd	r25, Z+3	; 0x03
    8e30:	20 e0       	ldi	r18, 0x00	; 0
    8e32:	30 e0       	ldi	r19, 0x00	; 0
    8e34:	40 e2       	ldi	r20, 0x20	; 32
    8e36:	51 e4       	ldi	r21, 0x41	; 65
    8e38:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8e3c:	dc 01       	movw	r26, r24
    8e3e:	cb 01       	movw	r24, r22
    8e40:	8e 01       	movw	r16, r28
    8e42:	0b 5e       	subi	r16, 0xEB	; 235
    8e44:	1e 4f       	sbci	r17, 0xFE	; 254
    8e46:	bc 01       	movw	r22, r24
    8e48:	cd 01       	movw	r24, r26
    8e4a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8e4e:	dc 01       	movw	r26, r24
    8e50:	cb 01       	movw	r24, r22
    8e52:	f8 01       	movw	r30, r16
    8e54:	91 83       	std	Z+1, r25	; 0x01
    8e56:	80 83       	st	Z, r24
    8e58:	27 c0       	rjmp	.+78     	; 0x8ea8 <pick_drop+0x1f96>
    8e5a:	ce 01       	movw	r24, r28
    8e5c:	89 5e       	subi	r24, 0xE9	; 233
    8e5e:	9e 4f       	sbci	r25, 0xFE	; 254
    8e60:	20 e7       	ldi	r18, 0x70	; 112
    8e62:	31 e0       	ldi	r19, 0x01	; 1
    8e64:	fc 01       	movw	r30, r24
    8e66:	31 83       	std	Z+1, r19	; 0x01
    8e68:	20 83       	st	Z, r18
    8e6a:	ce 01       	movw	r24, r28
    8e6c:	89 5e       	subi	r24, 0xE9	; 233
    8e6e:	9e 4f       	sbci	r25, 0xFE	; 254
    8e70:	fc 01       	movw	r30, r24
    8e72:	80 81       	ld	r24, Z
    8e74:	91 81       	ldd	r25, Z+1	; 0x01
    8e76:	8c 01       	movw	r16, r24
    8e78:	c8 01       	movw	r24, r16
    8e7a:	01 97       	sbiw	r24, 0x01	; 1
    8e7c:	f1 f7       	brne	.-4      	; 0x8e7a <pick_drop+0x1f68>
    8e7e:	8c 01       	movw	r16, r24
    8e80:	ce 01       	movw	r24, r28
    8e82:	89 5e       	subi	r24, 0xE9	; 233
    8e84:	9e 4f       	sbci	r25, 0xFE	; 254
    8e86:	fc 01       	movw	r30, r24
    8e88:	11 83       	std	Z+1, r17	; 0x01
    8e8a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8e8c:	ce 01       	movw	r24, r28
    8e8e:	8b 5e       	subi	r24, 0xEB	; 235
    8e90:	9e 4f       	sbci	r25, 0xFE	; 254
    8e92:	9e 01       	movw	r18, r28
    8e94:	2b 5e       	subi	r18, 0xEB	; 235
    8e96:	3e 4f       	sbci	r19, 0xFE	; 254
    8e98:	f9 01       	movw	r30, r18
    8e9a:	20 81       	ld	r18, Z
    8e9c:	31 81       	ldd	r19, Z+1	; 0x01
    8e9e:	21 50       	subi	r18, 0x01	; 1
    8ea0:	30 40       	sbci	r19, 0x00	; 0
    8ea2:	fc 01       	movw	r30, r24
    8ea4:	31 83       	std	Z+1, r19	; 0x01
    8ea6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8ea8:	ce 01       	movw	r24, r28
    8eaa:	8b 5e       	subi	r24, 0xEB	; 235
    8eac:	9e 4f       	sbci	r25, 0xFE	; 254
    8eae:	fc 01       	movw	r30, r24
    8eb0:	80 81       	ld	r24, Z
    8eb2:	91 81       	ldd	r25, Z+1	; 0x01
    8eb4:	00 97       	sbiw	r24, 0x00	; 0
    8eb6:	89 f6       	brne	.-94     	; 0x8e5a <pick_drop+0x1f48>
    8eb8:	2f c0       	rjmp	.+94     	; 0x8f18 <pick_drop+0x2006>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8eba:	8e 01       	movw	r16, r28
    8ebc:	0b 5e       	subi	r16, 0xEB	; 235
    8ebe:	1e 4f       	sbci	r17, 0xFE	; 254
    8ec0:	ce 01       	movw	r24, r28
    8ec2:	8f 5e       	subi	r24, 0xEF	; 239
    8ec4:	9e 4f       	sbci	r25, 0xFE	; 254
    8ec6:	fc 01       	movw	r30, r24
    8ec8:	60 81       	ld	r22, Z
    8eca:	71 81       	ldd	r23, Z+1	; 0x01
    8ecc:	82 81       	ldd	r24, Z+2	; 0x02
    8ece:	93 81       	ldd	r25, Z+3	; 0x03
    8ed0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8ed4:	dc 01       	movw	r26, r24
    8ed6:	cb 01       	movw	r24, r22
    8ed8:	f8 01       	movw	r30, r16
    8eda:	91 83       	std	Z+1, r25	; 0x01
    8edc:	80 83       	st	Z, r24
    8ede:	ce 01       	movw	r24, r28
    8ee0:	87 5e       	subi	r24, 0xE7	; 231
    8ee2:	9e 4f       	sbci	r25, 0xFE	; 254
    8ee4:	9e 01       	movw	r18, r28
    8ee6:	2b 5e       	subi	r18, 0xEB	; 235
    8ee8:	3e 4f       	sbci	r19, 0xFE	; 254
    8eea:	f9 01       	movw	r30, r18
    8eec:	20 81       	ld	r18, Z
    8eee:	31 81       	ldd	r19, Z+1	; 0x01
    8ef0:	fc 01       	movw	r30, r24
    8ef2:	31 83       	std	Z+1, r19	; 0x01
    8ef4:	20 83       	st	Z, r18
    8ef6:	ce 01       	movw	r24, r28
    8ef8:	87 5e       	subi	r24, 0xE7	; 231
    8efa:	9e 4f       	sbci	r25, 0xFE	; 254
    8efc:	fc 01       	movw	r30, r24
    8efe:	80 81       	ld	r24, Z
    8f00:	91 81       	ldd	r25, Z+1	; 0x01
    8f02:	8c 01       	movw	r16, r24
    8f04:	c8 01       	movw	r24, r16
    8f06:	01 97       	sbiw	r24, 0x01	; 1
    8f08:	f1 f7       	brne	.-4      	; 0x8f06 <pick_drop+0x1ff4>
    8f0a:	8c 01       	movw	r16, r24
    8f0c:	ce 01       	movw	r24, r28
    8f0e:	87 5e       	subi	r24, 0xE7	; 231
    8f10:	9e 4f       	sbci	r25, 0xFE	; 254
    8f12:	fc 01       	movw	r30, r24
    8f14:	11 83       	std	Z+1, r17	; 0x01
    8f16:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_right2();
    8f18:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    8f1c:	9e 01       	movw	r18, r28
    8f1e:	25 5e       	subi	r18, 0xE5	; 229
    8f20:	3e 4f       	sbci	r19, 0xFE	; 254
    8f22:	80 e0       	ldi	r24, 0x00	; 0
    8f24:	90 e0       	ldi	r25, 0x00	; 0
    8f26:	a8 e4       	ldi	r26, 0x48	; 72
    8f28:	b2 e4       	ldi	r27, 0x42	; 66
    8f2a:	f9 01       	movw	r30, r18
    8f2c:	80 83       	st	Z, r24
    8f2e:	91 83       	std	Z+1, r25	; 0x01
    8f30:	a2 83       	std	Z+2, r26	; 0x02
    8f32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8f34:	8e 01       	movw	r16, r28
    8f36:	01 5e       	subi	r16, 0xE1	; 225
    8f38:	1e 4f       	sbci	r17, 0xFE	; 254
    8f3a:	ce 01       	movw	r24, r28
    8f3c:	85 5e       	subi	r24, 0xE5	; 229
    8f3e:	9e 4f       	sbci	r25, 0xFE	; 254
    8f40:	fc 01       	movw	r30, r24
    8f42:	60 81       	ld	r22, Z
    8f44:	71 81       	ldd	r23, Z+1	; 0x01
    8f46:	82 81       	ldd	r24, Z+2	; 0x02
    8f48:	93 81       	ldd	r25, Z+3	; 0x03
    8f4a:	26 e6       	ldi	r18, 0x66	; 102
    8f4c:	36 e6       	ldi	r19, 0x66	; 102
    8f4e:	46 e6       	ldi	r20, 0x66	; 102
    8f50:	55 e4       	ldi	r21, 0x45	; 69
    8f52:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8f56:	dc 01       	movw	r26, r24
    8f58:	cb 01       	movw	r24, r22
    8f5a:	f8 01       	movw	r30, r16
    8f5c:	80 83       	st	Z, r24
    8f5e:	91 83       	std	Z+1, r25	; 0x01
    8f60:	a2 83       	std	Z+2, r26	; 0x02
    8f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8f64:	ce 01       	movw	r24, r28
    8f66:	81 5e       	subi	r24, 0xE1	; 225
    8f68:	9e 4f       	sbci	r25, 0xFE	; 254
    8f6a:	11 e0       	ldi	r17, 0x01	; 1
    8f6c:	fc 01       	movw	r30, r24
    8f6e:	60 81       	ld	r22, Z
    8f70:	71 81       	ldd	r23, Z+1	; 0x01
    8f72:	82 81       	ldd	r24, Z+2	; 0x02
    8f74:	93 81       	ldd	r25, Z+3	; 0x03
    8f76:	20 e0       	ldi	r18, 0x00	; 0
    8f78:	30 e0       	ldi	r19, 0x00	; 0
    8f7a:	40 e8       	ldi	r20, 0x80	; 128
    8f7c:	5f e3       	ldi	r21, 0x3F	; 63
    8f7e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    8f82:	88 23       	and	r24, r24
    8f84:	0c f0       	brlt	.+2      	; 0x8f88 <pick_drop+0x2076>
    8f86:	10 e0       	ldi	r17, 0x00	; 0
    8f88:	11 23       	and	r17, r17
    8f8a:	49 f0       	breq	.+18     	; 0x8f9e <pick_drop+0x208c>
		__ticks = 1;
    8f8c:	ce 01       	movw	r24, r28
    8f8e:	8d 5d       	subi	r24, 0xDD	; 221
    8f90:	9e 4f       	sbci	r25, 0xFE	; 254
    8f92:	21 e0       	ldi	r18, 0x01	; 1
    8f94:	30 e0       	ldi	r19, 0x00	; 0
    8f96:	fc 01       	movw	r30, r24
    8f98:	31 83       	std	Z+1, r19	; 0x01
    8f9a:	20 83       	st	Z, r18
    8f9c:	74 c0       	rjmp	.+232    	; 0x9086 <pick_drop+0x2174>
	else if (__tmp > 65535)
    8f9e:	ce 01       	movw	r24, r28
    8fa0:	81 5e       	subi	r24, 0xE1	; 225
    8fa2:	9e 4f       	sbci	r25, 0xFE	; 254
    8fa4:	11 e0       	ldi	r17, 0x01	; 1
    8fa6:	fc 01       	movw	r30, r24
    8fa8:	60 81       	ld	r22, Z
    8faa:	71 81       	ldd	r23, Z+1	; 0x01
    8fac:	82 81       	ldd	r24, Z+2	; 0x02
    8fae:	93 81       	ldd	r25, Z+3	; 0x03
    8fb0:	20 e0       	ldi	r18, 0x00	; 0
    8fb2:	3f ef       	ldi	r19, 0xFF	; 255
    8fb4:	4f e7       	ldi	r20, 0x7F	; 127
    8fb6:	57 e4       	ldi	r21, 0x47	; 71
    8fb8:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    8fbc:	18 16       	cp	r1, r24
    8fbe:	0c f0       	brlt	.+2      	; 0x8fc2 <pick_drop+0x20b0>
    8fc0:	10 e0       	ldi	r17, 0x00	; 0
    8fc2:	11 23       	and	r17, r17
    8fc4:	09 f4       	brne	.+2      	; 0x8fc8 <pick_drop+0x20b6>
    8fc6:	4d c0       	rjmp	.+154    	; 0x9062 <pick_drop+0x2150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8fc8:	ce 01       	movw	r24, r28
    8fca:	85 5e       	subi	r24, 0xE5	; 229
    8fcc:	9e 4f       	sbci	r25, 0xFE	; 254
    8fce:	fc 01       	movw	r30, r24
    8fd0:	60 81       	ld	r22, Z
    8fd2:	71 81       	ldd	r23, Z+1	; 0x01
    8fd4:	82 81       	ldd	r24, Z+2	; 0x02
    8fd6:	93 81       	ldd	r25, Z+3	; 0x03
    8fd8:	20 e0       	ldi	r18, 0x00	; 0
    8fda:	30 e0       	ldi	r19, 0x00	; 0
    8fdc:	40 e2       	ldi	r20, 0x20	; 32
    8fde:	51 e4       	ldi	r21, 0x41	; 65
    8fe0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    8fe4:	dc 01       	movw	r26, r24
    8fe6:	cb 01       	movw	r24, r22
    8fe8:	8e 01       	movw	r16, r28
    8fea:	0d 5d       	subi	r16, 0xDD	; 221
    8fec:	1e 4f       	sbci	r17, 0xFE	; 254
    8fee:	bc 01       	movw	r22, r24
    8ff0:	cd 01       	movw	r24, r26
    8ff2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    8ff6:	dc 01       	movw	r26, r24
    8ff8:	cb 01       	movw	r24, r22
    8ffa:	f8 01       	movw	r30, r16
    8ffc:	91 83       	std	Z+1, r25	; 0x01
    8ffe:	80 83       	st	Z, r24
    9000:	27 c0       	rjmp	.+78     	; 0x9050 <pick_drop+0x213e>
    9002:	ce 01       	movw	r24, r28
    9004:	8b 5d       	subi	r24, 0xDB	; 219
    9006:	9e 4f       	sbci	r25, 0xFE	; 254
    9008:	20 e7       	ldi	r18, 0x70	; 112
    900a:	31 e0       	ldi	r19, 0x01	; 1
    900c:	fc 01       	movw	r30, r24
    900e:	31 83       	std	Z+1, r19	; 0x01
    9010:	20 83       	st	Z, r18
    9012:	ce 01       	movw	r24, r28
    9014:	8b 5d       	subi	r24, 0xDB	; 219
    9016:	9e 4f       	sbci	r25, 0xFE	; 254
    9018:	fc 01       	movw	r30, r24
    901a:	80 81       	ld	r24, Z
    901c:	91 81       	ldd	r25, Z+1	; 0x01
    901e:	8c 01       	movw	r16, r24
    9020:	c8 01       	movw	r24, r16
    9022:	01 97       	sbiw	r24, 0x01	; 1
    9024:	f1 f7       	brne	.-4      	; 0x9022 <pick_drop+0x2110>
    9026:	8c 01       	movw	r16, r24
    9028:	ce 01       	movw	r24, r28
    902a:	8b 5d       	subi	r24, 0xDB	; 219
    902c:	9e 4f       	sbci	r25, 0xFE	; 254
    902e:	fc 01       	movw	r30, r24
    9030:	11 83       	std	Z+1, r17	; 0x01
    9032:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9034:	ce 01       	movw	r24, r28
    9036:	8d 5d       	subi	r24, 0xDD	; 221
    9038:	9e 4f       	sbci	r25, 0xFE	; 254
    903a:	9e 01       	movw	r18, r28
    903c:	2d 5d       	subi	r18, 0xDD	; 221
    903e:	3e 4f       	sbci	r19, 0xFE	; 254
    9040:	f9 01       	movw	r30, r18
    9042:	20 81       	ld	r18, Z
    9044:	31 81       	ldd	r19, Z+1	; 0x01
    9046:	21 50       	subi	r18, 0x01	; 1
    9048:	30 40       	sbci	r19, 0x00	; 0
    904a:	fc 01       	movw	r30, r24
    904c:	31 83       	std	Z+1, r19	; 0x01
    904e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9050:	ce 01       	movw	r24, r28
    9052:	8d 5d       	subi	r24, 0xDD	; 221
    9054:	9e 4f       	sbci	r25, 0xFE	; 254
    9056:	fc 01       	movw	r30, r24
    9058:	80 81       	ld	r24, Z
    905a:	91 81       	ldd	r25, Z+1	; 0x01
    905c:	00 97       	sbiw	r24, 0x00	; 0
    905e:	89 f6       	brne	.-94     	; 0x9002 <pick_drop+0x20f0>
    9060:	2f c0       	rjmp	.+94     	; 0x90c0 <pick_drop+0x21ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9062:	8e 01       	movw	r16, r28
    9064:	0d 5d       	subi	r16, 0xDD	; 221
    9066:	1e 4f       	sbci	r17, 0xFE	; 254
    9068:	ce 01       	movw	r24, r28
    906a:	81 5e       	subi	r24, 0xE1	; 225
    906c:	9e 4f       	sbci	r25, 0xFE	; 254
    906e:	fc 01       	movw	r30, r24
    9070:	60 81       	ld	r22, Z
    9072:	71 81       	ldd	r23, Z+1	; 0x01
    9074:	82 81       	ldd	r24, Z+2	; 0x02
    9076:	93 81       	ldd	r25, Z+3	; 0x03
    9078:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    907c:	dc 01       	movw	r26, r24
    907e:	cb 01       	movw	r24, r22
    9080:	f8 01       	movw	r30, r16
    9082:	91 83       	std	Z+1, r25	; 0x01
    9084:	80 83       	st	Z, r24
    9086:	ce 01       	movw	r24, r28
    9088:	89 5d       	subi	r24, 0xD9	; 217
    908a:	9e 4f       	sbci	r25, 0xFE	; 254
    908c:	9e 01       	movw	r18, r28
    908e:	2d 5d       	subi	r18, 0xDD	; 221
    9090:	3e 4f       	sbci	r19, 0xFE	; 254
    9092:	f9 01       	movw	r30, r18
    9094:	20 81       	ld	r18, Z
    9096:	31 81       	ldd	r19, Z+1	; 0x01
    9098:	fc 01       	movw	r30, r24
    909a:	31 83       	std	Z+1, r19	; 0x01
    909c:	20 83       	st	Z, r18
    909e:	ce 01       	movw	r24, r28
    90a0:	89 5d       	subi	r24, 0xD9	; 217
    90a2:	9e 4f       	sbci	r25, 0xFE	; 254
    90a4:	fc 01       	movw	r30, r24
    90a6:	80 81       	ld	r24, Z
    90a8:	91 81       	ldd	r25, Z+1	; 0x01
    90aa:	8c 01       	movw	r16, r24
    90ac:	c8 01       	movw	r24, r16
    90ae:	01 97       	sbiw	r24, 0x01	; 1
    90b0:	f1 f7       	brne	.-4      	; 0x90ae <pick_drop+0x219c>
    90b2:	8c 01       	movw	r16, r24
    90b4:	ce 01       	movw	r24, r28
    90b6:	89 5d       	subi	r24, 0xD9	; 217
    90b8:	9e 4f       	sbci	r25, 0xFE	; 254
    90ba:	fc 01       	movw	r30, r24
    90bc:	11 83       	std	Z+1, r17	; 0x01
    90be:	00 83       	st	Z, r16
				_delay_ms(50);
				front();
    90c0:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    90c4:	9e 01       	movw	r18, r28
    90c6:	27 5d       	subi	r18, 0xD7	; 215
    90c8:	3e 4f       	sbci	r19, 0xFE	; 254
    90ca:	80 e0       	ldi	r24, 0x00	; 0
    90cc:	90 e0       	ldi	r25, 0x00	; 0
    90ce:	a8 ec       	ldi	r26, 0xC8	; 200
    90d0:	b2 e4       	ldi	r27, 0x42	; 66
    90d2:	f9 01       	movw	r30, r18
    90d4:	80 83       	st	Z, r24
    90d6:	91 83       	std	Z+1, r25	; 0x01
    90d8:	a2 83       	std	Z+2, r26	; 0x02
    90da:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    90dc:	8e 01       	movw	r16, r28
    90de:	03 5d       	subi	r16, 0xD3	; 211
    90e0:	1e 4f       	sbci	r17, 0xFE	; 254
    90e2:	ce 01       	movw	r24, r28
    90e4:	87 5d       	subi	r24, 0xD7	; 215
    90e6:	9e 4f       	sbci	r25, 0xFE	; 254
    90e8:	fc 01       	movw	r30, r24
    90ea:	60 81       	ld	r22, Z
    90ec:	71 81       	ldd	r23, Z+1	; 0x01
    90ee:	82 81       	ldd	r24, Z+2	; 0x02
    90f0:	93 81       	ldd	r25, Z+3	; 0x03
    90f2:	26 e6       	ldi	r18, 0x66	; 102
    90f4:	36 e6       	ldi	r19, 0x66	; 102
    90f6:	46 e6       	ldi	r20, 0x66	; 102
    90f8:	55 e4       	ldi	r21, 0x45	; 69
    90fa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    90fe:	dc 01       	movw	r26, r24
    9100:	cb 01       	movw	r24, r22
    9102:	f8 01       	movw	r30, r16
    9104:	80 83       	st	Z, r24
    9106:	91 83       	std	Z+1, r25	; 0x01
    9108:	a2 83       	std	Z+2, r26	; 0x02
    910a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    910c:	ce 01       	movw	r24, r28
    910e:	83 5d       	subi	r24, 0xD3	; 211
    9110:	9e 4f       	sbci	r25, 0xFE	; 254
    9112:	11 e0       	ldi	r17, 0x01	; 1
    9114:	fc 01       	movw	r30, r24
    9116:	60 81       	ld	r22, Z
    9118:	71 81       	ldd	r23, Z+1	; 0x01
    911a:	82 81       	ldd	r24, Z+2	; 0x02
    911c:	93 81       	ldd	r25, Z+3	; 0x03
    911e:	20 e0       	ldi	r18, 0x00	; 0
    9120:	30 e0       	ldi	r19, 0x00	; 0
    9122:	40 e8       	ldi	r20, 0x80	; 128
    9124:	5f e3       	ldi	r21, 0x3F	; 63
    9126:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    912a:	88 23       	and	r24, r24
    912c:	0c f0       	brlt	.+2      	; 0x9130 <pick_drop+0x221e>
    912e:	10 e0       	ldi	r17, 0x00	; 0
    9130:	11 23       	and	r17, r17
    9132:	49 f0       	breq	.+18     	; 0x9146 <pick_drop+0x2234>
		__ticks = 1;
    9134:	ce 01       	movw	r24, r28
    9136:	8f 5c       	subi	r24, 0xCF	; 207
    9138:	9e 4f       	sbci	r25, 0xFE	; 254
    913a:	21 e0       	ldi	r18, 0x01	; 1
    913c:	30 e0       	ldi	r19, 0x00	; 0
    913e:	fc 01       	movw	r30, r24
    9140:	31 83       	std	Z+1, r19	; 0x01
    9142:	20 83       	st	Z, r18
    9144:	74 c0       	rjmp	.+232    	; 0x922e <pick_drop+0x231c>
	else if (__tmp > 65535)
    9146:	ce 01       	movw	r24, r28
    9148:	83 5d       	subi	r24, 0xD3	; 211
    914a:	9e 4f       	sbci	r25, 0xFE	; 254
    914c:	11 e0       	ldi	r17, 0x01	; 1
    914e:	fc 01       	movw	r30, r24
    9150:	60 81       	ld	r22, Z
    9152:	71 81       	ldd	r23, Z+1	; 0x01
    9154:	82 81       	ldd	r24, Z+2	; 0x02
    9156:	93 81       	ldd	r25, Z+3	; 0x03
    9158:	20 e0       	ldi	r18, 0x00	; 0
    915a:	3f ef       	ldi	r19, 0xFF	; 255
    915c:	4f e7       	ldi	r20, 0x7F	; 127
    915e:	57 e4       	ldi	r21, 0x47	; 71
    9160:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9164:	18 16       	cp	r1, r24
    9166:	0c f0       	brlt	.+2      	; 0x916a <pick_drop+0x2258>
    9168:	10 e0       	ldi	r17, 0x00	; 0
    916a:	11 23       	and	r17, r17
    916c:	09 f4       	brne	.+2      	; 0x9170 <pick_drop+0x225e>
    916e:	4d c0       	rjmp	.+154    	; 0x920a <pick_drop+0x22f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9170:	ce 01       	movw	r24, r28
    9172:	87 5d       	subi	r24, 0xD7	; 215
    9174:	9e 4f       	sbci	r25, 0xFE	; 254
    9176:	fc 01       	movw	r30, r24
    9178:	60 81       	ld	r22, Z
    917a:	71 81       	ldd	r23, Z+1	; 0x01
    917c:	82 81       	ldd	r24, Z+2	; 0x02
    917e:	93 81       	ldd	r25, Z+3	; 0x03
    9180:	20 e0       	ldi	r18, 0x00	; 0
    9182:	30 e0       	ldi	r19, 0x00	; 0
    9184:	40 e2       	ldi	r20, 0x20	; 32
    9186:	51 e4       	ldi	r21, 0x41	; 65
    9188:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    918c:	dc 01       	movw	r26, r24
    918e:	cb 01       	movw	r24, r22
    9190:	8e 01       	movw	r16, r28
    9192:	0f 5c       	subi	r16, 0xCF	; 207
    9194:	1e 4f       	sbci	r17, 0xFE	; 254
    9196:	bc 01       	movw	r22, r24
    9198:	cd 01       	movw	r24, r26
    919a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    919e:	dc 01       	movw	r26, r24
    91a0:	cb 01       	movw	r24, r22
    91a2:	f8 01       	movw	r30, r16
    91a4:	91 83       	std	Z+1, r25	; 0x01
    91a6:	80 83       	st	Z, r24
    91a8:	27 c0       	rjmp	.+78     	; 0x91f8 <pick_drop+0x22e6>
    91aa:	ce 01       	movw	r24, r28
    91ac:	8d 5c       	subi	r24, 0xCD	; 205
    91ae:	9e 4f       	sbci	r25, 0xFE	; 254
    91b0:	20 e7       	ldi	r18, 0x70	; 112
    91b2:	31 e0       	ldi	r19, 0x01	; 1
    91b4:	fc 01       	movw	r30, r24
    91b6:	31 83       	std	Z+1, r19	; 0x01
    91b8:	20 83       	st	Z, r18
    91ba:	ce 01       	movw	r24, r28
    91bc:	8d 5c       	subi	r24, 0xCD	; 205
    91be:	9e 4f       	sbci	r25, 0xFE	; 254
    91c0:	fc 01       	movw	r30, r24
    91c2:	80 81       	ld	r24, Z
    91c4:	91 81       	ldd	r25, Z+1	; 0x01
    91c6:	8c 01       	movw	r16, r24
    91c8:	c8 01       	movw	r24, r16
    91ca:	01 97       	sbiw	r24, 0x01	; 1
    91cc:	f1 f7       	brne	.-4      	; 0x91ca <pick_drop+0x22b8>
    91ce:	8c 01       	movw	r16, r24
    91d0:	ce 01       	movw	r24, r28
    91d2:	8d 5c       	subi	r24, 0xCD	; 205
    91d4:	9e 4f       	sbci	r25, 0xFE	; 254
    91d6:	fc 01       	movw	r30, r24
    91d8:	11 83       	std	Z+1, r17	; 0x01
    91da:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    91dc:	ce 01       	movw	r24, r28
    91de:	8f 5c       	subi	r24, 0xCF	; 207
    91e0:	9e 4f       	sbci	r25, 0xFE	; 254
    91e2:	9e 01       	movw	r18, r28
    91e4:	2f 5c       	subi	r18, 0xCF	; 207
    91e6:	3e 4f       	sbci	r19, 0xFE	; 254
    91e8:	f9 01       	movw	r30, r18
    91ea:	20 81       	ld	r18, Z
    91ec:	31 81       	ldd	r19, Z+1	; 0x01
    91ee:	21 50       	subi	r18, 0x01	; 1
    91f0:	30 40       	sbci	r19, 0x00	; 0
    91f2:	fc 01       	movw	r30, r24
    91f4:	31 83       	std	Z+1, r19	; 0x01
    91f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    91f8:	ce 01       	movw	r24, r28
    91fa:	8f 5c       	subi	r24, 0xCF	; 207
    91fc:	9e 4f       	sbci	r25, 0xFE	; 254
    91fe:	fc 01       	movw	r30, r24
    9200:	80 81       	ld	r24, Z
    9202:	91 81       	ldd	r25, Z+1	; 0x01
    9204:	00 97       	sbiw	r24, 0x00	; 0
    9206:	89 f6       	brne	.-94     	; 0x91aa <pick_drop+0x2298>
    9208:	2f c0       	rjmp	.+94     	; 0x9268 <pick_drop+0x2356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    920a:	8e 01       	movw	r16, r28
    920c:	0f 5c       	subi	r16, 0xCF	; 207
    920e:	1e 4f       	sbci	r17, 0xFE	; 254
    9210:	ce 01       	movw	r24, r28
    9212:	83 5d       	subi	r24, 0xD3	; 211
    9214:	9e 4f       	sbci	r25, 0xFE	; 254
    9216:	fc 01       	movw	r30, r24
    9218:	60 81       	ld	r22, Z
    921a:	71 81       	ldd	r23, Z+1	; 0x01
    921c:	82 81       	ldd	r24, Z+2	; 0x02
    921e:	93 81       	ldd	r25, Z+3	; 0x03
    9220:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9224:	dc 01       	movw	r26, r24
    9226:	cb 01       	movw	r24, r22
    9228:	f8 01       	movw	r30, r16
    922a:	91 83       	std	Z+1, r25	; 0x01
    922c:	80 83       	st	Z, r24
    922e:	ce 01       	movw	r24, r28
    9230:	8b 5c       	subi	r24, 0xCB	; 203
    9232:	9e 4f       	sbci	r25, 0xFE	; 254
    9234:	9e 01       	movw	r18, r28
    9236:	2f 5c       	subi	r18, 0xCF	; 207
    9238:	3e 4f       	sbci	r19, 0xFE	; 254
    923a:	f9 01       	movw	r30, r18
    923c:	20 81       	ld	r18, Z
    923e:	31 81       	ldd	r19, Z+1	; 0x01
    9240:	fc 01       	movw	r30, r24
    9242:	31 83       	std	Z+1, r19	; 0x01
    9244:	20 83       	st	Z, r18
    9246:	ce 01       	movw	r24, r28
    9248:	8b 5c       	subi	r24, 0xCB	; 203
    924a:	9e 4f       	sbci	r25, 0xFE	; 254
    924c:	fc 01       	movw	r30, r24
    924e:	80 81       	ld	r24, Z
    9250:	91 81       	ldd	r25, Z+1	; 0x01
    9252:	8c 01       	movw	r16, r24
    9254:	c8 01       	movw	r24, r16
    9256:	01 97       	sbiw	r24, 0x01	; 1
    9258:	f1 f7       	brne	.-4      	; 0x9256 <pick_drop+0x2344>
    925a:	8c 01       	movw	r16, r24
    925c:	ce 01       	movw	r24, r28
    925e:	8b 5c       	subi	r24, 0xCB	; 203
    9260:	9e 4f       	sbci	r25, 0xFE	; 254
    9262:	fc 01       	movw	r30, r24
    9264:	11 83       	std	Z+1, r17	; 0x01
    9266:	00 83       	st	Z, r16
				_delay_ms(100);
				correct_left();
    9268:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				back_mm(pdback);
    926c:	89 81       	ldd	r24, Y+1	; 0x01
    926e:	9a 81       	ldd	r25, Y+2	; 0x02
    9270:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    9274:	9e 01       	movw	r18, r28
    9276:	29 5c       	subi	r18, 0xC9	; 201
    9278:	3e 4f       	sbci	r19, 0xFE	; 254
    927a:	80 e0       	ldi	r24, 0x00	; 0
    927c:	90 e0       	ldi	r25, 0x00	; 0
    927e:	a0 ea       	ldi	r26, 0xA0	; 160
    9280:	b1 e4       	ldi	r27, 0x41	; 65
    9282:	f9 01       	movw	r30, r18
    9284:	80 83       	st	Z, r24
    9286:	91 83       	std	Z+1, r25	; 0x01
    9288:	a2 83       	std	Z+2, r26	; 0x02
    928a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    928c:	8e 01       	movw	r16, r28
    928e:	05 5c       	subi	r16, 0xC5	; 197
    9290:	1e 4f       	sbci	r17, 0xFE	; 254
    9292:	ce 01       	movw	r24, r28
    9294:	89 5c       	subi	r24, 0xC9	; 201
    9296:	9e 4f       	sbci	r25, 0xFE	; 254
    9298:	fc 01       	movw	r30, r24
    929a:	60 81       	ld	r22, Z
    929c:	71 81       	ldd	r23, Z+1	; 0x01
    929e:	82 81       	ldd	r24, Z+2	; 0x02
    92a0:	93 81       	ldd	r25, Z+3	; 0x03
    92a2:	26 e6       	ldi	r18, 0x66	; 102
    92a4:	36 e6       	ldi	r19, 0x66	; 102
    92a6:	46 e6       	ldi	r20, 0x66	; 102
    92a8:	55 e4       	ldi	r21, 0x45	; 69
    92aa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    92ae:	dc 01       	movw	r26, r24
    92b0:	cb 01       	movw	r24, r22
    92b2:	f8 01       	movw	r30, r16
    92b4:	80 83       	st	Z, r24
    92b6:	91 83       	std	Z+1, r25	; 0x01
    92b8:	a2 83       	std	Z+2, r26	; 0x02
    92ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    92bc:	ce 01       	movw	r24, r28
    92be:	85 5c       	subi	r24, 0xC5	; 197
    92c0:	9e 4f       	sbci	r25, 0xFE	; 254
    92c2:	11 e0       	ldi	r17, 0x01	; 1
    92c4:	fc 01       	movw	r30, r24
    92c6:	60 81       	ld	r22, Z
    92c8:	71 81       	ldd	r23, Z+1	; 0x01
    92ca:	82 81       	ldd	r24, Z+2	; 0x02
    92cc:	93 81       	ldd	r25, Z+3	; 0x03
    92ce:	20 e0       	ldi	r18, 0x00	; 0
    92d0:	30 e0       	ldi	r19, 0x00	; 0
    92d2:	40 e8       	ldi	r20, 0x80	; 128
    92d4:	5f e3       	ldi	r21, 0x3F	; 63
    92d6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    92da:	88 23       	and	r24, r24
    92dc:	0c f0       	brlt	.+2      	; 0x92e0 <pick_drop+0x23ce>
    92de:	10 e0       	ldi	r17, 0x00	; 0
    92e0:	11 23       	and	r17, r17
    92e2:	49 f0       	breq	.+18     	; 0x92f6 <pick_drop+0x23e4>
		__ticks = 1;
    92e4:	ce 01       	movw	r24, r28
    92e6:	81 5c       	subi	r24, 0xC1	; 193
    92e8:	9e 4f       	sbci	r25, 0xFE	; 254
    92ea:	21 e0       	ldi	r18, 0x01	; 1
    92ec:	30 e0       	ldi	r19, 0x00	; 0
    92ee:	fc 01       	movw	r30, r24
    92f0:	31 83       	std	Z+1, r19	; 0x01
    92f2:	20 83       	st	Z, r18
    92f4:	75 c0       	rjmp	.+234    	; 0x93e0 <pick_drop+0x24ce>
	else if (__tmp > 65535)
    92f6:	ce 01       	movw	r24, r28
    92f8:	85 5c       	subi	r24, 0xC5	; 197
    92fa:	9e 4f       	sbci	r25, 0xFE	; 254
    92fc:	11 e0       	ldi	r17, 0x01	; 1
    92fe:	fc 01       	movw	r30, r24
    9300:	60 81       	ld	r22, Z
    9302:	71 81       	ldd	r23, Z+1	; 0x01
    9304:	82 81       	ldd	r24, Z+2	; 0x02
    9306:	93 81       	ldd	r25, Z+3	; 0x03
    9308:	20 e0       	ldi	r18, 0x00	; 0
    930a:	3f ef       	ldi	r19, 0xFF	; 255
    930c:	4f e7       	ldi	r20, 0x7F	; 127
    930e:	57 e4       	ldi	r21, 0x47	; 71
    9310:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9314:	18 16       	cp	r1, r24
    9316:	0c f0       	brlt	.+2      	; 0x931a <pick_drop+0x2408>
    9318:	10 e0       	ldi	r17, 0x00	; 0
    931a:	11 23       	and	r17, r17
    931c:	09 f4       	brne	.+2      	; 0x9320 <pick_drop+0x240e>
    931e:	4e c0       	rjmp	.+156    	; 0x93bc <pick_drop+0x24aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9320:	ce 01       	movw	r24, r28
    9322:	89 5c       	subi	r24, 0xC9	; 201
    9324:	9e 4f       	sbci	r25, 0xFE	; 254
    9326:	fc 01       	movw	r30, r24
    9328:	60 81       	ld	r22, Z
    932a:	71 81       	ldd	r23, Z+1	; 0x01
    932c:	82 81       	ldd	r24, Z+2	; 0x02
    932e:	93 81       	ldd	r25, Z+3	; 0x03
    9330:	20 e0       	ldi	r18, 0x00	; 0
    9332:	30 e0       	ldi	r19, 0x00	; 0
    9334:	40 e2       	ldi	r20, 0x20	; 32
    9336:	51 e4       	ldi	r21, 0x41	; 65
    9338:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    933c:	dc 01       	movw	r26, r24
    933e:	cb 01       	movw	r24, r22
    9340:	8e 01       	movw	r16, r28
    9342:	01 5c       	subi	r16, 0xC1	; 193
    9344:	1e 4f       	sbci	r17, 0xFE	; 254
    9346:	bc 01       	movw	r22, r24
    9348:	cd 01       	movw	r24, r26
    934a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    934e:	dc 01       	movw	r26, r24
    9350:	cb 01       	movw	r24, r22
    9352:	f8 01       	movw	r30, r16
    9354:	91 83       	std	Z+1, r25	; 0x01
    9356:	80 83       	st	Z, r24
    9358:	27 c0       	rjmp	.+78     	; 0x93a8 <pick_drop+0x2496>
    935a:	ce 01       	movw	r24, r28
    935c:	8f 5b       	subi	r24, 0xBF	; 191
    935e:	9e 4f       	sbci	r25, 0xFE	; 254
    9360:	20 e7       	ldi	r18, 0x70	; 112
    9362:	31 e0       	ldi	r19, 0x01	; 1
    9364:	fc 01       	movw	r30, r24
    9366:	31 83       	std	Z+1, r19	; 0x01
    9368:	20 83       	st	Z, r18
    936a:	ce 01       	movw	r24, r28
    936c:	8f 5b       	subi	r24, 0xBF	; 191
    936e:	9e 4f       	sbci	r25, 0xFE	; 254
    9370:	fc 01       	movw	r30, r24
    9372:	80 81       	ld	r24, Z
    9374:	91 81       	ldd	r25, Z+1	; 0x01
    9376:	8c 01       	movw	r16, r24
    9378:	c8 01       	movw	r24, r16
    937a:	01 97       	sbiw	r24, 0x01	; 1
    937c:	f1 f7       	brne	.-4      	; 0x937a <pick_drop+0x2468>
    937e:	8c 01       	movw	r16, r24
    9380:	ce 01       	movw	r24, r28
    9382:	8f 5b       	subi	r24, 0xBF	; 191
    9384:	9e 4f       	sbci	r25, 0xFE	; 254
    9386:	fc 01       	movw	r30, r24
    9388:	11 83       	std	Z+1, r17	; 0x01
    938a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    938c:	ce 01       	movw	r24, r28
    938e:	81 5c       	subi	r24, 0xC1	; 193
    9390:	9e 4f       	sbci	r25, 0xFE	; 254
    9392:	9e 01       	movw	r18, r28
    9394:	21 5c       	subi	r18, 0xC1	; 193
    9396:	3e 4f       	sbci	r19, 0xFE	; 254
    9398:	f9 01       	movw	r30, r18
    939a:	20 81       	ld	r18, Z
    939c:	31 81       	ldd	r19, Z+1	; 0x01
    939e:	21 50       	subi	r18, 0x01	; 1
    93a0:	30 40       	sbci	r19, 0x00	; 0
    93a2:	fc 01       	movw	r30, r24
    93a4:	31 83       	std	Z+1, r19	; 0x01
    93a6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    93a8:	ce 01       	movw	r24, r28
    93aa:	81 5c       	subi	r24, 0xC1	; 193
    93ac:	9e 4f       	sbci	r25, 0xFE	; 254
    93ae:	fc 01       	movw	r30, r24
    93b0:	80 81       	ld	r24, Z
    93b2:	91 81       	ldd	r25, Z+1	; 0x01
    93b4:	00 97       	sbiw	r24, 0x00	; 0
    93b6:	89 f6       	brne	.-94     	; 0x935a <pick_drop+0x2448>
    93b8:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    93bc:	8e 01       	movw	r16, r28
    93be:	01 5c       	subi	r16, 0xC1	; 193
    93c0:	1e 4f       	sbci	r17, 0xFE	; 254
    93c2:	ce 01       	movw	r24, r28
    93c4:	85 5c       	subi	r24, 0xC5	; 197
    93c6:	9e 4f       	sbci	r25, 0xFE	; 254
    93c8:	fc 01       	movw	r30, r24
    93ca:	60 81       	ld	r22, Z
    93cc:	71 81       	ldd	r23, Z+1	; 0x01
    93ce:	82 81       	ldd	r24, Z+2	; 0x02
    93d0:	93 81       	ldd	r25, Z+3	; 0x03
    93d2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    93d6:	dc 01       	movw	r26, r24
    93d8:	cb 01       	movw	r24, r22
    93da:	f8 01       	movw	r30, r16
    93dc:	91 83       	std	Z+1, r25	; 0x01
    93de:	80 83       	st	Z, r24
    93e0:	ce 01       	movw	r24, r28
    93e2:	8d 5b       	subi	r24, 0xBD	; 189
    93e4:	9e 4f       	sbci	r25, 0xFE	; 254
    93e6:	9e 01       	movw	r18, r28
    93e8:	21 5c       	subi	r18, 0xC1	; 193
    93ea:	3e 4f       	sbci	r19, 0xFE	; 254
    93ec:	f9 01       	movw	r30, r18
    93ee:	20 81       	ld	r18, Z
    93f0:	31 81       	ldd	r19, Z+1	; 0x01
    93f2:	fc 01       	movw	r30, r24
    93f4:	31 83       	std	Z+1, r19	; 0x01
    93f6:	20 83       	st	Z, r18
    93f8:	ce 01       	movw	r24, r28
    93fa:	8d 5b       	subi	r24, 0xBD	; 189
    93fc:	9e 4f       	sbci	r25, 0xFE	; 254
    93fe:	fc 01       	movw	r30, r24
    9400:	80 81       	ld	r24, Z
    9402:	91 81       	ldd	r25, Z+1	; 0x01
    9404:	8c 01       	movw	r16, r24
    9406:	c8 01       	movw	r24, r16
    9408:	01 97       	sbiw	r24, 0x01	; 1
    940a:	f1 f7       	brne	.-4      	; 0x9408 <pick_drop+0x24f6>
    940c:	8c 01       	movw	r16, r24
    940e:	ce 01       	movw	r24, r28
    9410:	8d 5b       	subi	r24, 0xBD	; 189
    9412:	9e 4f       	sbci	r25, 0xFE	; 254
    9414:	fc 01       	movw	r30, r24
    9416:	11 83       	std	Z+1, r17	; 0x01
    9418:	00 83       	st	Z, r16
    941a:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
				_delay_ms(20);
			}
			
			else if(master_path[node-1] == 'L')
    941e:	80 91 71 03 	lds	r24, 0x0371
    9422:	90 91 72 03 	lds	r25, 0x0372
    9426:	01 97       	sbiw	r24, 0x01	; 1
    9428:	8b 58       	subi	r24, 0x8B	; 139
    942a:	9c 4f       	sbci	r25, 0xFC	; 252
    942c:	fc 01       	movw	r30, r24
    942e:	80 81       	ld	r24, Z
    9430:	8c 34       	cpi	r24, 0x4C	; 76
    9432:	11 f0       	breq	.+4      	; 0x9438 <pick_drop+0x2526>
    9434:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
    9438:	9e 01       	movw	r18, r28
    943a:	2b 5b       	subi	r18, 0xBB	; 187
    943c:	3e 4f       	sbci	r19, 0xFE	; 254
    943e:	80 e0       	ldi	r24, 0x00	; 0
    9440:	90 e0       	ldi	r25, 0x00	; 0
    9442:	a8 e4       	ldi	r26, 0x48	; 72
    9444:	b2 e4       	ldi	r27, 0x42	; 66
    9446:	f9 01       	movw	r30, r18
    9448:	80 83       	st	Z, r24
    944a:	91 83       	std	Z+1, r25	; 0x01
    944c:	a2 83       	std	Z+2, r26	; 0x02
    944e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9450:	8e 01       	movw	r16, r28
    9452:	07 5b       	subi	r16, 0xB7	; 183
    9454:	1e 4f       	sbci	r17, 0xFE	; 254
    9456:	ce 01       	movw	r24, r28
    9458:	8b 5b       	subi	r24, 0xBB	; 187
    945a:	9e 4f       	sbci	r25, 0xFE	; 254
    945c:	fc 01       	movw	r30, r24
    945e:	60 81       	ld	r22, Z
    9460:	71 81       	ldd	r23, Z+1	; 0x01
    9462:	82 81       	ldd	r24, Z+2	; 0x02
    9464:	93 81       	ldd	r25, Z+3	; 0x03
    9466:	26 e6       	ldi	r18, 0x66	; 102
    9468:	36 e6       	ldi	r19, 0x66	; 102
    946a:	46 e6       	ldi	r20, 0x66	; 102
    946c:	55 e4       	ldi	r21, 0x45	; 69
    946e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9472:	dc 01       	movw	r26, r24
    9474:	cb 01       	movw	r24, r22
    9476:	f8 01       	movw	r30, r16
    9478:	80 83       	st	Z, r24
    947a:	91 83       	std	Z+1, r25	; 0x01
    947c:	a2 83       	std	Z+2, r26	; 0x02
    947e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9480:	ce 01       	movw	r24, r28
    9482:	87 5b       	subi	r24, 0xB7	; 183
    9484:	9e 4f       	sbci	r25, 0xFE	; 254
    9486:	11 e0       	ldi	r17, 0x01	; 1
    9488:	fc 01       	movw	r30, r24
    948a:	60 81       	ld	r22, Z
    948c:	71 81       	ldd	r23, Z+1	; 0x01
    948e:	82 81       	ldd	r24, Z+2	; 0x02
    9490:	93 81       	ldd	r25, Z+3	; 0x03
    9492:	20 e0       	ldi	r18, 0x00	; 0
    9494:	30 e0       	ldi	r19, 0x00	; 0
    9496:	40 e8       	ldi	r20, 0x80	; 128
    9498:	5f e3       	ldi	r21, 0x3F	; 63
    949a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    949e:	88 23       	and	r24, r24
    94a0:	0c f0       	brlt	.+2      	; 0x94a4 <pick_drop+0x2592>
    94a2:	10 e0       	ldi	r17, 0x00	; 0
    94a4:	11 23       	and	r17, r17
    94a6:	49 f0       	breq	.+18     	; 0x94ba <pick_drop+0x25a8>
		__ticks = 1;
    94a8:	ce 01       	movw	r24, r28
    94aa:	83 5b       	subi	r24, 0xB3	; 179
    94ac:	9e 4f       	sbci	r25, 0xFE	; 254
    94ae:	21 e0       	ldi	r18, 0x01	; 1
    94b0:	30 e0       	ldi	r19, 0x00	; 0
    94b2:	fc 01       	movw	r30, r24
    94b4:	31 83       	std	Z+1, r19	; 0x01
    94b6:	20 83       	st	Z, r18
    94b8:	74 c0       	rjmp	.+232    	; 0x95a2 <pick_drop+0x2690>
	else if (__tmp > 65535)
    94ba:	ce 01       	movw	r24, r28
    94bc:	87 5b       	subi	r24, 0xB7	; 183
    94be:	9e 4f       	sbci	r25, 0xFE	; 254
    94c0:	11 e0       	ldi	r17, 0x01	; 1
    94c2:	fc 01       	movw	r30, r24
    94c4:	60 81       	ld	r22, Z
    94c6:	71 81       	ldd	r23, Z+1	; 0x01
    94c8:	82 81       	ldd	r24, Z+2	; 0x02
    94ca:	93 81       	ldd	r25, Z+3	; 0x03
    94cc:	20 e0       	ldi	r18, 0x00	; 0
    94ce:	3f ef       	ldi	r19, 0xFF	; 255
    94d0:	4f e7       	ldi	r20, 0x7F	; 127
    94d2:	57 e4       	ldi	r21, 0x47	; 71
    94d4:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    94d8:	18 16       	cp	r1, r24
    94da:	0c f0       	brlt	.+2      	; 0x94de <pick_drop+0x25cc>
    94dc:	10 e0       	ldi	r17, 0x00	; 0
    94de:	11 23       	and	r17, r17
    94e0:	09 f4       	brne	.+2      	; 0x94e4 <pick_drop+0x25d2>
    94e2:	4d c0       	rjmp	.+154    	; 0x957e <pick_drop+0x266c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    94e4:	ce 01       	movw	r24, r28
    94e6:	8b 5b       	subi	r24, 0xBB	; 187
    94e8:	9e 4f       	sbci	r25, 0xFE	; 254
    94ea:	fc 01       	movw	r30, r24
    94ec:	60 81       	ld	r22, Z
    94ee:	71 81       	ldd	r23, Z+1	; 0x01
    94f0:	82 81       	ldd	r24, Z+2	; 0x02
    94f2:	93 81       	ldd	r25, Z+3	; 0x03
    94f4:	20 e0       	ldi	r18, 0x00	; 0
    94f6:	30 e0       	ldi	r19, 0x00	; 0
    94f8:	40 e2       	ldi	r20, 0x20	; 32
    94fa:	51 e4       	ldi	r21, 0x41	; 65
    94fc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9500:	dc 01       	movw	r26, r24
    9502:	cb 01       	movw	r24, r22
    9504:	8e 01       	movw	r16, r28
    9506:	03 5b       	subi	r16, 0xB3	; 179
    9508:	1e 4f       	sbci	r17, 0xFE	; 254
    950a:	bc 01       	movw	r22, r24
    950c:	cd 01       	movw	r24, r26
    950e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9512:	dc 01       	movw	r26, r24
    9514:	cb 01       	movw	r24, r22
    9516:	f8 01       	movw	r30, r16
    9518:	91 83       	std	Z+1, r25	; 0x01
    951a:	80 83       	st	Z, r24
    951c:	27 c0       	rjmp	.+78     	; 0x956c <pick_drop+0x265a>
    951e:	ce 01       	movw	r24, r28
    9520:	81 5b       	subi	r24, 0xB1	; 177
    9522:	9e 4f       	sbci	r25, 0xFE	; 254
    9524:	20 e7       	ldi	r18, 0x70	; 112
    9526:	31 e0       	ldi	r19, 0x01	; 1
    9528:	fc 01       	movw	r30, r24
    952a:	31 83       	std	Z+1, r19	; 0x01
    952c:	20 83       	st	Z, r18
    952e:	ce 01       	movw	r24, r28
    9530:	81 5b       	subi	r24, 0xB1	; 177
    9532:	9e 4f       	sbci	r25, 0xFE	; 254
    9534:	fc 01       	movw	r30, r24
    9536:	80 81       	ld	r24, Z
    9538:	91 81       	ldd	r25, Z+1	; 0x01
    953a:	8c 01       	movw	r16, r24
    953c:	c8 01       	movw	r24, r16
    953e:	01 97       	sbiw	r24, 0x01	; 1
    9540:	f1 f7       	brne	.-4      	; 0x953e <pick_drop+0x262c>
    9542:	8c 01       	movw	r16, r24
    9544:	ce 01       	movw	r24, r28
    9546:	81 5b       	subi	r24, 0xB1	; 177
    9548:	9e 4f       	sbci	r25, 0xFE	; 254
    954a:	fc 01       	movw	r30, r24
    954c:	11 83       	std	Z+1, r17	; 0x01
    954e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9550:	ce 01       	movw	r24, r28
    9552:	83 5b       	subi	r24, 0xB3	; 179
    9554:	9e 4f       	sbci	r25, 0xFE	; 254
    9556:	9e 01       	movw	r18, r28
    9558:	23 5b       	subi	r18, 0xB3	; 179
    955a:	3e 4f       	sbci	r19, 0xFE	; 254
    955c:	f9 01       	movw	r30, r18
    955e:	20 81       	ld	r18, Z
    9560:	31 81       	ldd	r19, Z+1	; 0x01
    9562:	21 50       	subi	r18, 0x01	; 1
    9564:	30 40       	sbci	r19, 0x00	; 0
    9566:	fc 01       	movw	r30, r24
    9568:	31 83       	std	Z+1, r19	; 0x01
    956a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    956c:	ce 01       	movw	r24, r28
    956e:	83 5b       	subi	r24, 0xB3	; 179
    9570:	9e 4f       	sbci	r25, 0xFE	; 254
    9572:	fc 01       	movw	r30, r24
    9574:	80 81       	ld	r24, Z
    9576:	91 81       	ldd	r25, Z+1	; 0x01
    9578:	00 97       	sbiw	r24, 0x00	; 0
    957a:	89 f6       	brne	.-94     	; 0x951e <pick_drop+0x260c>
    957c:	2f c0       	rjmp	.+94     	; 0x95dc <pick_drop+0x26ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    957e:	8e 01       	movw	r16, r28
    9580:	03 5b       	subi	r16, 0xB3	; 179
    9582:	1e 4f       	sbci	r17, 0xFE	; 254
    9584:	ce 01       	movw	r24, r28
    9586:	87 5b       	subi	r24, 0xB7	; 183
    9588:	9e 4f       	sbci	r25, 0xFE	; 254
    958a:	fc 01       	movw	r30, r24
    958c:	60 81       	ld	r22, Z
    958e:	71 81       	ldd	r23, Z+1	; 0x01
    9590:	82 81       	ldd	r24, Z+2	; 0x02
    9592:	93 81       	ldd	r25, Z+3	; 0x03
    9594:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9598:	dc 01       	movw	r26, r24
    959a:	cb 01       	movw	r24, r22
    959c:	f8 01       	movw	r30, r16
    959e:	91 83       	std	Z+1, r25	; 0x01
    95a0:	80 83       	st	Z, r24
    95a2:	ce 01       	movw	r24, r28
    95a4:	8f 5a       	subi	r24, 0xAF	; 175
    95a6:	9e 4f       	sbci	r25, 0xFE	; 254
    95a8:	9e 01       	movw	r18, r28
    95aa:	23 5b       	subi	r18, 0xB3	; 179
    95ac:	3e 4f       	sbci	r19, 0xFE	; 254
    95ae:	f9 01       	movw	r30, r18
    95b0:	20 81       	ld	r18, Z
    95b2:	31 81       	ldd	r19, Z+1	; 0x01
    95b4:	fc 01       	movw	r30, r24
    95b6:	31 83       	std	Z+1, r19	; 0x01
    95b8:	20 83       	st	Z, r18
    95ba:	ce 01       	movw	r24, r28
    95bc:	8f 5a       	subi	r24, 0xAF	; 175
    95be:	9e 4f       	sbci	r25, 0xFE	; 254
    95c0:	fc 01       	movw	r30, r24
    95c2:	80 81       	ld	r24, Z
    95c4:	91 81       	ldd	r25, Z+1	; 0x01
    95c6:	8c 01       	movw	r16, r24
    95c8:	c8 01       	movw	r24, r16
    95ca:	01 97       	sbiw	r24, 0x01	; 1
    95cc:	f1 f7       	brne	.-4      	; 0x95ca <pick_drop+0x26b8>
    95ce:	8c 01       	movw	r16, r24
    95d0:	ce 01       	movw	r24, r28
    95d2:	8f 5a       	subi	r24, 0xAF	; 175
    95d4:	9e 4f       	sbci	r25, 0xFE	; 254
    95d6:	fc 01       	movw	r30, r24
    95d8:	11 83       	std	Z+1, r17	; 0x01
    95da:	00 83       	st	Z, r16
			{
				//spl_right2();
				_delay_ms(50);
				front();
    95dc:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    95e0:	9e 01       	movw	r18, r28
    95e2:	2d 5a       	subi	r18, 0xAD	; 173
    95e4:	3e 4f       	sbci	r19, 0xFE	; 254
    95e6:	80 e0       	ldi	r24, 0x00	; 0
    95e8:	90 e0       	ldi	r25, 0x00	; 0
    95ea:	a8 ec       	ldi	r26, 0xC8	; 200
    95ec:	b2 e4       	ldi	r27, 0x42	; 66
    95ee:	f9 01       	movw	r30, r18
    95f0:	80 83       	st	Z, r24
    95f2:	91 83       	std	Z+1, r25	; 0x01
    95f4:	a2 83       	std	Z+2, r26	; 0x02
    95f6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    95f8:	8e 01       	movw	r16, r28
    95fa:	09 5a       	subi	r16, 0xA9	; 169
    95fc:	1e 4f       	sbci	r17, 0xFE	; 254
    95fe:	ce 01       	movw	r24, r28
    9600:	8d 5a       	subi	r24, 0xAD	; 173
    9602:	9e 4f       	sbci	r25, 0xFE	; 254
    9604:	fc 01       	movw	r30, r24
    9606:	60 81       	ld	r22, Z
    9608:	71 81       	ldd	r23, Z+1	; 0x01
    960a:	82 81       	ldd	r24, Z+2	; 0x02
    960c:	93 81       	ldd	r25, Z+3	; 0x03
    960e:	26 e6       	ldi	r18, 0x66	; 102
    9610:	36 e6       	ldi	r19, 0x66	; 102
    9612:	46 e6       	ldi	r20, 0x66	; 102
    9614:	55 e4       	ldi	r21, 0x45	; 69
    9616:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    961a:	dc 01       	movw	r26, r24
    961c:	cb 01       	movw	r24, r22
    961e:	f8 01       	movw	r30, r16
    9620:	80 83       	st	Z, r24
    9622:	91 83       	std	Z+1, r25	; 0x01
    9624:	a2 83       	std	Z+2, r26	; 0x02
    9626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9628:	ce 01       	movw	r24, r28
    962a:	89 5a       	subi	r24, 0xA9	; 169
    962c:	9e 4f       	sbci	r25, 0xFE	; 254
    962e:	11 e0       	ldi	r17, 0x01	; 1
    9630:	fc 01       	movw	r30, r24
    9632:	60 81       	ld	r22, Z
    9634:	71 81       	ldd	r23, Z+1	; 0x01
    9636:	82 81       	ldd	r24, Z+2	; 0x02
    9638:	93 81       	ldd	r25, Z+3	; 0x03
    963a:	20 e0       	ldi	r18, 0x00	; 0
    963c:	30 e0       	ldi	r19, 0x00	; 0
    963e:	40 e8       	ldi	r20, 0x80	; 128
    9640:	5f e3       	ldi	r21, 0x3F	; 63
    9642:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    9646:	88 23       	and	r24, r24
    9648:	0c f0       	brlt	.+2      	; 0x964c <pick_drop+0x273a>
    964a:	10 e0       	ldi	r17, 0x00	; 0
    964c:	11 23       	and	r17, r17
    964e:	49 f0       	breq	.+18     	; 0x9662 <pick_drop+0x2750>
		__ticks = 1;
    9650:	ce 01       	movw	r24, r28
    9652:	85 5a       	subi	r24, 0xA5	; 165
    9654:	9e 4f       	sbci	r25, 0xFE	; 254
    9656:	21 e0       	ldi	r18, 0x01	; 1
    9658:	30 e0       	ldi	r19, 0x00	; 0
    965a:	fc 01       	movw	r30, r24
    965c:	31 83       	std	Z+1, r19	; 0x01
    965e:	20 83       	st	Z, r18
    9660:	74 c0       	rjmp	.+232    	; 0x974a <pick_drop+0x2838>
	else if (__tmp > 65535)
    9662:	ce 01       	movw	r24, r28
    9664:	89 5a       	subi	r24, 0xA9	; 169
    9666:	9e 4f       	sbci	r25, 0xFE	; 254
    9668:	11 e0       	ldi	r17, 0x01	; 1
    966a:	fc 01       	movw	r30, r24
    966c:	60 81       	ld	r22, Z
    966e:	71 81       	ldd	r23, Z+1	; 0x01
    9670:	82 81       	ldd	r24, Z+2	; 0x02
    9672:	93 81       	ldd	r25, Z+3	; 0x03
    9674:	20 e0       	ldi	r18, 0x00	; 0
    9676:	3f ef       	ldi	r19, 0xFF	; 255
    9678:	4f e7       	ldi	r20, 0x7F	; 127
    967a:	57 e4       	ldi	r21, 0x47	; 71
    967c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9680:	18 16       	cp	r1, r24
    9682:	0c f0       	brlt	.+2      	; 0x9686 <pick_drop+0x2774>
    9684:	10 e0       	ldi	r17, 0x00	; 0
    9686:	11 23       	and	r17, r17
    9688:	09 f4       	brne	.+2      	; 0x968c <pick_drop+0x277a>
    968a:	4d c0       	rjmp	.+154    	; 0x9726 <pick_drop+0x2814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    968c:	ce 01       	movw	r24, r28
    968e:	8d 5a       	subi	r24, 0xAD	; 173
    9690:	9e 4f       	sbci	r25, 0xFE	; 254
    9692:	fc 01       	movw	r30, r24
    9694:	60 81       	ld	r22, Z
    9696:	71 81       	ldd	r23, Z+1	; 0x01
    9698:	82 81       	ldd	r24, Z+2	; 0x02
    969a:	93 81       	ldd	r25, Z+3	; 0x03
    969c:	20 e0       	ldi	r18, 0x00	; 0
    969e:	30 e0       	ldi	r19, 0x00	; 0
    96a0:	40 e2       	ldi	r20, 0x20	; 32
    96a2:	51 e4       	ldi	r21, 0x41	; 65
    96a4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    96a8:	dc 01       	movw	r26, r24
    96aa:	cb 01       	movw	r24, r22
    96ac:	8e 01       	movw	r16, r28
    96ae:	05 5a       	subi	r16, 0xA5	; 165
    96b0:	1e 4f       	sbci	r17, 0xFE	; 254
    96b2:	bc 01       	movw	r22, r24
    96b4:	cd 01       	movw	r24, r26
    96b6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    96ba:	dc 01       	movw	r26, r24
    96bc:	cb 01       	movw	r24, r22
    96be:	f8 01       	movw	r30, r16
    96c0:	91 83       	std	Z+1, r25	; 0x01
    96c2:	80 83       	st	Z, r24
    96c4:	27 c0       	rjmp	.+78     	; 0x9714 <pick_drop+0x2802>
    96c6:	ce 01       	movw	r24, r28
    96c8:	83 5a       	subi	r24, 0xA3	; 163
    96ca:	9e 4f       	sbci	r25, 0xFE	; 254
    96cc:	20 e7       	ldi	r18, 0x70	; 112
    96ce:	31 e0       	ldi	r19, 0x01	; 1
    96d0:	fc 01       	movw	r30, r24
    96d2:	31 83       	std	Z+1, r19	; 0x01
    96d4:	20 83       	st	Z, r18
    96d6:	ce 01       	movw	r24, r28
    96d8:	83 5a       	subi	r24, 0xA3	; 163
    96da:	9e 4f       	sbci	r25, 0xFE	; 254
    96dc:	fc 01       	movw	r30, r24
    96de:	80 81       	ld	r24, Z
    96e0:	91 81       	ldd	r25, Z+1	; 0x01
    96e2:	8c 01       	movw	r16, r24
    96e4:	c8 01       	movw	r24, r16
    96e6:	01 97       	sbiw	r24, 0x01	; 1
    96e8:	f1 f7       	brne	.-4      	; 0x96e6 <pick_drop+0x27d4>
    96ea:	8c 01       	movw	r16, r24
    96ec:	ce 01       	movw	r24, r28
    96ee:	83 5a       	subi	r24, 0xA3	; 163
    96f0:	9e 4f       	sbci	r25, 0xFE	; 254
    96f2:	fc 01       	movw	r30, r24
    96f4:	11 83       	std	Z+1, r17	; 0x01
    96f6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    96f8:	ce 01       	movw	r24, r28
    96fa:	85 5a       	subi	r24, 0xA5	; 165
    96fc:	9e 4f       	sbci	r25, 0xFE	; 254
    96fe:	9e 01       	movw	r18, r28
    9700:	25 5a       	subi	r18, 0xA5	; 165
    9702:	3e 4f       	sbci	r19, 0xFE	; 254
    9704:	f9 01       	movw	r30, r18
    9706:	20 81       	ld	r18, Z
    9708:	31 81       	ldd	r19, Z+1	; 0x01
    970a:	21 50       	subi	r18, 0x01	; 1
    970c:	30 40       	sbci	r19, 0x00	; 0
    970e:	fc 01       	movw	r30, r24
    9710:	31 83       	std	Z+1, r19	; 0x01
    9712:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9714:	ce 01       	movw	r24, r28
    9716:	85 5a       	subi	r24, 0xA5	; 165
    9718:	9e 4f       	sbci	r25, 0xFE	; 254
    971a:	fc 01       	movw	r30, r24
    971c:	80 81       	ld	r24, Z
    971e:	91 81       	ldd	r25, Z+1	; 0x01
    9720:	00 97       	sbiw	r24, 0x00	; 0
    9722:	89 f6       	brne	.-94     	; 0x96c6 <pick_drop+0x27b4>
    9724:	2f c0       	rjmp	.+94     	; 0x9784 <pick_drop+0x2872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9726:	8e 01       	movw	r16, r28
    9728:	05 5a       	subi	r16, 0xA5	; 165
    972a:	1e 4f       	sbci	r17, 0xFE	; 254
    972c:	ce 01       	movw	r24, r28
    972e:	89 5a       	subi	r24, 0xA9	; 169
    9730:	9e 4f       	sbci	r25, 0xFE	; 254
    9732:	fc 01       	movw	r30, r24
    9734:	60 81       	ld	r22, Z
    9736:	71 81       	ldd	r23, Z+1	; 0x01
    9738:	82 81       	ldd	r24, Z+2	; 0x02
    973a:	93 81       	ldd	r25, Z+3	; 0x03
    973c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9740:	dc 01       	movw	r26, r24
    9742:	cb 01       	movw	r24, r22
    9744:	f8 01       	movw	r30, r16
    9746:	91 83       	std	Z+1, r25	; 0x01
    9748:	80 83       	st	Z, r24
    974a:	ce 01       	movw	r24, r28
    974c:	81 5a       	subi	r24, 0xA1	; 161
    974e:	9e 4f       	sbci	r25, 0xFE	; 254
    9750:	9e 01       	movw	r18, r28
    9752:	25 5a       	subi	r18, 0xA5	; 165
    9754:	3e 4f       	sbci	r19, 0xFE	; 254
    9756:	f9 01       	movw	r30, r18
    9758:	20 81       	ld	r18, Z
    975a:	31 81       	ldd	r19, Z+1	; 0x01
    975c:	fc 01       	movw	r30, r24
    975e:	31 83       	std	Z+1, r19	; 0x01
    9760:	20 83       	st	Z, r18
    9762:	ce 01       	movw	r24, r28
    9764:	81 5a       	subi	r24, 0xA1	; 161
    9766:	9e 4f       	sbci	r25, 0xFE	; 254
    9768:	fc 01       	movw	r30, r24
    976a:	80 81       	ld	r24, Z
    976c:	91 81       	ldd	r25, Z+1	; 0x01
    976e:	8c 01       	movw	r16, r24
    9770:	c8 01       	movw	r24, r16
    9772:	01 97       	sbiw	r24, 0x01	; 1
    9774:	f1 f7       	brne	.-4      	; 0x9772 <pick_drop+0x2860>
    9776:	8c 01       	movw	r16, r24
    9778:	ce 01       	movw	r24, r28
    977a:	81 5a       	subi	r24, 0xA1	; 161
    977c:	9e 4f       	sbci	r25, 0xFE	; 254
    977e:	fc 01       	movw	r30, r24
    9780:	11 83       	std	Z+1, r17	; 0x01
    9782:	00 83       	st	Z, r16
				_delay_ms(100);
				correct_left();
    9784:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				back_mm(70);
    9788:	86 e4       	ldi	r24, 0x46	; 70
    978a:	90 e0       	ldi	r25, 0x00	; 0
    978c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    9790:	9e 01       	movw	r18, r28
    9792:	2f 59       	subi	r18, 0x9F	; 159
    9794:	3e 4f       	sbci	r19, 0xFE	; 254
    9796:	80 e0       	ldi	r24, 0x00	; 0
    9798:	90 e0       	ldi	r25, 0x00	; 0
    979a:	a0 ea       	ldi	r26, 0xA0	; 160
    979c:	b1 e4       	ldi	r27, 0x41	; 65
    979e:	f9 01       	movw	r30, r18
    97a0:	80 83       	st	Z, r24
    97a2:	91 83       	std	Z+1, r25	; 0x01
    97a4:	a2 83       	std	Z+2, r26	; 0x02
    97a6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    97a8:	8e 01       	movw	r16, r28
    97aa:	0b 59       	subi	r16, 0x9B	; 155
    97ac:	1e 4f       	sbci	r17, 0xFE	; 254
    97ae:	ce 01       	movw	r24, r28
    97b0:	8f 59       	subi	r24, 0x9F	; 159
    97b2:	9e 4f       	sbci	r25, 0xFE	; 254
    97b4:	fc 01       	movw	r30, r24
    97b6:	60 81       	ld	r22, Z
    97b8:	71 81       	ldd	r23, Z+1	; 0x01
    97ba:	82 81       	ldd	r24, Z+2	; 0x02
    97bc:	93 81       	ldd	r25, Z+3	; 0x03
    97be:	26 e6       	ldi	r18, 0x66	; 102
    97c0:	36 e6       	ldi	r19, 0x66	; 102
    97c2:	46 e6       	ldi	r20, 0x66	; 102
    97c4:	55 e4       	ldi	r21, 0x45	; 69
    97c6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    97ca:	dc 01       	movw	r26, r24
    97cc:	cb 01       	movw	r24, r22
    97ce:	f8 01       	movw	r30, r16
    97d0:	80 83       	st	Z, r24
    97d2:	91 83       	std	Z+1, r25	; 0x01
    97d4:	a2 83       	std	Z+2, r26	; 0x02
    97d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    97d8:	ce 01       	movw	r24, r28
    97da:	8b 59       	subi	r24, 0x9B	; 155
    97dc:	9e 4f       	sbci	r25, 0xFE	; 254
    97de:	11 e0       	ldi	r17, 0x01	; 1
    97e0:	fc 01       	movw	r30, r24
    97e2:	60 81       	ld	r22, Z
    97e4:	71 81       	ldd	r23, Z+1	; 0x01
    97e6:	82 81       	ldd	r24, Z+2	; 0x02
    97e8:	93 81       	ldd	r25, Z+3	; 0x03
    97ea:	20 e0       	ldi	r18, 0x00	; 0
    97ec:	30 e0       	ldi	r19, 0x00	; 0
    97ee:	40 e8       	ldi	r20, 0x80	; 128
    97f0:	5f e3       	ldi	r21, 0x3F	; 63
    97f2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    97f6:	88 23       	and	r24, r24
    97f8:	0c f0       	brlt	.+2      	; 0x97fc <pick_drop+0x28ea>
    97fa:	10 e0       	ldi	r17, 0x00	; 0
    97fc:	11 23       	and	r17, r17
    97fe:	49 f0       	breq	.+18     	; 0x9812 <pick_drop+0x2900>
		__ticks = 1;
    9800:	ce 01       	movw	r24, r28
    9802:	87 59       	subi	r24, 0x97	; 151
    9804:	9e 4f       	sbci	r25, 0xFE	; 254
    9806:	21 e0       	ldi	r18, 0x01	; 1
    9808:	30 e0       	ldi	r19, 0x00	; 0
    980a:	fc 01       	movw	r30, r24
    980c:	31 83       	std	Z+1, r19	; 0x01
    980e:	20 83       	st	Z, r18
    9810:	75 c0       	rjmp	.+234    	; 0x98fc <pick_drop+0x29ea>
	else if (__tmp > 65535)
    9812:	ce 01       	movw	r24, r28
    9814:	8b 59       	subi	r24, 0x9B	; 155
    9816:	9e 4f       	sbci	r25, 0xFE	; 254
    9818:	11 e0       	ldi	r17, 0x01	; 1
    981a:	fc 01       	movw	r30, r24
    981c:	60 81       	ld	r22, Z
    981e:	71 81       	ldd	r23, Z+1	; 0x01
    9820:	82 81       	ldd	r24, Z+2	; 0x02
    9822:	93 81       	ldd	r25, Z+3	; 0x03
    9824:	20 e0       	ldi	r18, 0x00	; 0
    9826:	3f ef       	ldi	r19, 0xFF	; 255
    9828:	4f e7       	ldi	r20, 0x7F	; 127
    982a:	57 e4       	ldi	r21, 0x47	; 71
    982c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9830:	18 16       	cp	r1, r24
    9832:	0c f0       	brlt	.+2      	; 0x9836 <pick_drop+0x2924>
    9834:	10 e0       	ldi	r17, 0x00	; 0
    9836:	11 23       	and	r17, r17
    9838:	09 f4       	brne	.+2      	; 0x983c <pick_drop+0x292a>
    983a:	4e c0       	rjmp	.+156    	; 0x98d8 <pick_drop+0x29c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    983c:	ce 01       	movw	r24, r28
    983e:	8f 59       	subi	r24, 0x9F	; 159
    9840:	9e 4f       	sbci	r25, 0xFE	; 254
    9842:	fc 01       	movw	r30, r24
    9844:	60 81       	ld	r22, Z
    9846:	71 81       	ldd	r23, Z+1	; 0x01
    9848:	82 81       	ldd	r24, Z+2	; 0x02
    984a:	93 81       	ldd	r25, Z+3	; 0x03
    984c:	20 e0       	ldi	r18, 0x00	; 0
    984e:	30 e0       	ldi	r19, 0x00	; 0
    9850:	40 e2       	ldi	r20, 0x20	; 32
    9852:	51 e4       	ldi	r21, 0x41	; 65
    9854:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9858:	dc 01       	movw	r26, r24
    985a:	cb 01       	movw	r24, r22
    985c:	8e 01       	movw	r16, r28
    985e:	07 59       	subi	r16, 0x97	; 151
    9860:	1e 4f       	sbci	r17, 0xFE	; 254
    9862:	bc 01       	movw	r22, r24
    9864:	cd 01       	movw	r24, r26
    9866:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    986a:	dc 01       	movw	r26, r24
    986c:	cb 01       	movw	r24, r22
    986e:	f8 01       	movw	r30, r16
    9870:	91 83       	std	Z+1, r25	; 0x01
    9872:	80 83       	st	Z, r24
    9874:	27 c0       	rjmp	.+78     	; 0x98c4 <pick_drop+0x29b2>
    9876:	ce 01       	movw	r24, r28
    9878:	85 59       	subi	r24, 0x95	; 149
    987a:	9e 4f       	sbci	r25, 0xFE	; 254
    987c:	20 e7       	ldi	r18, 0x70	; 112
    987e:	31 e0       	ldi	r19, 0x01	; 1
    9880:	fc 01       	movw	r30, r24
    9882:	31 83       	std	Z+1, r19	; 0x01
    9884:	20 83       	st	Z, r18
    9886:	ce 01       	movw	r24, r28
    9888:	85 59       	subi	r24, 0x95	; 149
    988a:	9e 4f       	sbci	r25, 0xFE	; 254
    988c:	fc 01       	movw	r30, r24
    988e:	80 81       	ld	r24, Z
    9890:	91 81       	ldd	r25, Z+1	; 0x01
    9892:	8c 01       	movw	r16, r24
    9894:	c8 01       	movw	r24, r16
    9896:	01 97       	sbiw	r24, 0x01	; 1
    9898:	f1 f7       	brne	.-4      	; 0x9896 <pick_drop+0x2984>
    989a:	8c 01       	movw	r16, r24
    989c:	ce 01       	movw	r24, r28
    989e:	85 59       	subi	r24, 0x95	; 149
    98a0:	9e 4f       	sbci	r25, 0xFE	; 254
    98a2:	fc 01       	movw	r30, r24
    98a4:	11 83       	std	Z+1, r17	; 0x01
    98a6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    98a8:	ce 01       	movw	r24, r28
    98aa:	87 59       	subi	r24, 0x97	; 151
    98ac:	9e 4f       	sbci	r25, 0xFE	; 254
    98ae:	9e 01       	movw	r18, r28
    98b0:	27 59       	subi	r18, 0x97	; 151
    98b2:	3e 4f       	sbci	r19, 0xFE	; 254
    98b4:	f9 01       	movw	r30, r18
    98b6:	20 81       	ld	r18, Z
    98b8:	31 81       	ldd	r19, Z+1	; 0x01
    98ba:	21 50       	subi	r18, 0x01	; 1
    98bc:	30 40       	sbci	r19, 0x00	; 0
    98be:	fc 01       	movw	r30, r24
    98c0:	31 83       	std	Z+1, r19	; 0x01
    98c2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    98c4:	ce 01       	movw	r24, r28
    98c6:	87 59       	subi	r24, 0x97	; 151
    98c8:	9e 4f       	sbci	r25, 0xFE	; 254
    98ca:	fc 01       	movw	r30, r24
    98cc:	80 81       	ld	r24, Z
    98ce:	91 81       	ldd	r25, Z+1	; 0x01
    98d0:	00 97       	sbiw	r24, 0x00	; 0
    98d2:	89 f6       	brne	.-94     	; 0x9876 <pick_drop+0x2964>
    98d4:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    98d8:	8e 01       	movw	r16, r28
    98da:	07 59       	subi	r16, 0x97	; 151
    98dc:	1e 4f       	sbci	r17, 0xFE	; 254
    98de:	ce 01       	movw	r24, r28
    98e0:	8b 59       	subi	r24, 0x9B	; 155
    98e2:	9e 4f       	sbci	r25, 0xFE	; 254
    98e4:	fc 01       	movw	r30, r24
    98e6:	60 81       	ld	r22, Z
    98e8:	71 81       	ldd	r23, Z+1	; 0x01
    98ea:	82 81       	ldd	r24, Z+2	; 0x02
    98ec:	93 81       	ldd	r25, Z+3	; 0x03
    98ee:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    98f2:	dc 01       	movw	r26, r24
    98f4:	cb 01       	movw	r24, r22
    98f6:	f8 01       	movw	r30, r16
    98f8:	91 83       	std	Z+1, r25	; 0x01
    98fa:	80 83       	st	Z, r24
    98fc:	ce 01       	movw	r24, r28
    98fe:	83 59       	subi	r24, 0x93	; 147
    9900:	9e 4f       	sbci	r25, 0xFE	; 254
    9902:	9e 01       	movw	r18, r28
    9904:	27 59       	subi	r18, 0x97	; 151
    9906:	3e 4f       	sbci	r19, 0xFE	; 254
    9908:	f9 01       	movw	r30, r18
    990a:	20 81       	ld	r18, Z
    990c:	31 81       	ldd	r19, Z+1	; 0x01
    990e:	fc 01       	movw	r30, r24
    9910:	31 83       	std	Z+1, r19	; 0x01
    9912:	20 83       	st	Z, r18
    9914:	ce 01       	movw	r24, r28
    9916:	83 59       	subi	r24, 0x93	; 147
    9918:	9e 4f       	sbci	r25, 0xFE	; 254
    991a:	fc 01       	movw	r30, r24
    991c:	80 81       	ld	r24, Z
    991e:	91 81       	ldd	r25, Z+1	; 0x01
    9920:	8c 01       	movw	r16, r24
    9922:	c8 01       	movw	r24, r16
    9924:	01 97       	sbiw	r24, 0x01	; 1
    9926:	f1 f7       	brne	.-4      	; 0x9924 <pick_drop+0x2a12>
    9928:	8c 01       	movw	r16, r24
    992a:	ce 01       	movw	r24, r28
    992c:	83 59       	subi	r24, 0x93	; 147
    992e:	9e 4f       	sbci	r25, 0xFE	; 254
    9930:	fc 01       	movw	r30, r24
    9932:	11 83       	std	Z+1, r17	; 0x01
    9934:	00 83       	st	Z, r16
    9936:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
				_delay_ms(20);
			}
		}
					
	else if(pd=='3')
    993a:	ce 01       	movw	r24, r28
    993c:	89 59       	subi	r24, 0x99	; 153
    993e:	9c 4f       	sbci	r25, 0xFC	; 252
    9940:	fc 01       	movw	r30, r24
    9942:	80 81       	ld	r24, Z
    9944:	83 33       	cpi	r24, 0x33	; 51
    9946:	09 f0       	breq	.+2      	; 0x994a <pick_drop+0x2a38>
    9948:	ff c4       	rjmp	.+2558   	; 0xa348 <pick_drop+0x3436>
	{//back array
		stop();
    994a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    994e:	9e 01       	movw	r18, r28
    9950:	21 59       	subi	r18, 0x91	; 145
    9952:	3e 4f       	sbci	r19, 0xFE	; 254
    9954:	80 e0       	ldi	r24, 0x00	; 0
    9956:	90 e0       	ldi	r25, 0x00	; 0
    9958:	a0 ea       	ldi	r26, 0xA0	; 160
    995a:	b1 e4       	ldi	r27, 0x41	; 65
    995c:	f9 01       	movw	r30, r18
    995e:	80 83       	st	Z, r24
    9960:	91 83       	std	Z+1, r25	; 0x01
    9962:	a2 83       	std	Z+2, r26	; 0x02
    9964:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9966:	8e 01       	movw	r16, r28
    9968:	0d 58       	subi	r16, 0x8D	; 141
    996a:	1e 4f       	sbci	r17, 0xFE	; 254
    996c:	ce 01       	movw	r24, r28
    996e:	81 59       	subi	r24, 0x91	; 145
    9970:	9e 4f       	sbci	r25, 0xFE	; 254
    9972:	fc 01       	movw	r30, r24
    9974:	60 81       	ld	r22, Z
    9976:	71 81       	ldd	r23, Z+1	; 0x01
    9978:	82 81       	ldd	r24, Z+2	; 0x02
    997a:	93 81       	ldd	r25, Z+3	; 0x03
    997c:	26 e6       	ldi	r18, 0x66	; 102
    997e:	36 e6       	ldi	r19, 0x66	; 102
    9980:	46 e6       	ldi	r20, 0x66	; 102
    9982:	55 e4       	ldi	r21, 0x45	; 69
    9984:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9988:	dc 01       	movw	r26, r24
    998a:	cb 01       	movw	r24, r22
    998c:	f8 01       	movw	r30, r16
    998e:	80 83       	st	Z, r24
    9990:	91 83       	std	Z+1, r25	; 0x01
    9992:	a2 83       	std	Z+2, r26	; 0x02
    9994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9996:	ce 01       	movw	r24, r28
    9998:	8d 58       	subi	r24, 0x8D	; 141
    999a:	9e 4f       	sbci	r25, 0xFE	; 254
    999c:	11 e0       	ldi	r17, 0x01	; 1
    999e:	fc 01       	movw	r30, r24
    99a0:	60 81       	ld	r22, Z
    99a2:	71 81       	ldd	r23, Z+1	; 0x01
    99a4:	82 81       	ldd	r24, Z+2	; 0x02
    99a6:	93 81       	ldd	r25, Z+3	; 0x03
    99a8:	20 e0       	ldi	r18, 0x00	; 0
    99aa:	30 e0       	ldi	r19, 0x00	; 0
    99ac:	40 e8       	ldi	r20, 0x80	; 128
    99ae:	5f e3       	ldi	r21, 0x3F	; 63
    99b0:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    99b4:	88 23       	and	r24, r24
    99b6:	0c f0       	brlt	.+2      	; 0x99ba <pick_drop+0x2aa8>
    99b8:	10 e0       	ldi	r17, 0x00	; 0
    99ba:	11 23       	and	r17, r17
    99bc:	49 f0       	breq	.+18     	; 0x99d0 <pick_drop+0x2abe>
		__ticks = 1;
    99be:	ce 01       	movw	r24, r28
    99c0:	89 58       	subi	r24, 0x89	; 137
    99c2:	9e 4f       	sbci	r25, 0xFE	; 254
    99c4:	21 e0       	ldi	r18, 0x01	; 1
    99c6:	30 e0       	ldi	r19, 0x00	; 0
    99c8:	fc 01       	movw	r30, r24
    99ca:	31 83       	std	Z+1, r19	; 0x01
    99cc:	20 83       	st	Z, r18
    99ce:	74 c0       	rjmp	.+232    	; 0x9ab8 <pick_drop+0x2ba6>
	else if (__tmp > 65535)
    99d0:	ce 01       	movw	r24, r28
    99d2:	8d 58       	subi	r24, 0x8D	; 141
    99d4:	9e 4f       	sbci	r25, 0xFE	; 254
    99d6:	11 e0       	ldi	r17, 0x01	; 1
    99d8:	fc 01       	movw	r30, r24
    99da:	60 81       	ld	r22, Z
    99dc:	71 81       	ldd	r23, Z+1	; 0x01
    99de:	82 81       	ldd	r24, Z+2	; 0x02
    99e0:	93 81       	ldd	r25, Z+3	; 0x03
    99e2:	20 e0       	ldi	r18, 0x00	; 0
    99e4:	3f ef       	ldi	r19, 0xFF	; 255
    99e6:	4f e7       	ldi	r20, 0x7F	; 127
    99e8:	57 e4       	ldi	r21, 0x47	; 71
    99ea:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    99ee:	18 16       	cp	r1, r24
    99f0:	0c f0       	brlt	.+2      	; 0x99f4 <pick_drop+0x2ae2>
    99f2:	10 e0       	ldi	r17, 0x00	; 0
    99f4:	11 23       	and	r17, r17
    99f6:	09 f4       	brne	.+2      	; 0x99fa <pick_drop+0x2ae8>
    99f8:	4d c0       	rjmp	.+154    	; 0x9a94 <pick_drop+0x2b82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    99fa:	ce 01       	movw	r24, r28
    99fc:	81 59       	subi	r24, 0x91	; 145
    99fe:	9e 4f       	sbci	r25, 0xFE	; 254
    9a00:	fc 01       	movw	r30, r24
    9a02:	60 81       	ld	r22, Z
    9a04:	71 81       	ldd	r23, Z+1	; 0x01
    9a06:	82 81       	ldd	r24, Z+2	; 0x02
    9a08:	93 81       	ldd	r25, Z+3	; 0x03
    9a0a:	20 e0       	ldi	r18, 0x00	; 0
    9a0c:	30 e0       	ldi	r19, 0x00	; 0
    9a0e:	40 e2       	ldi	r20, 0x20	; 32
    9a10:	51 e4       	ldi	r21, 0x41	; 65
    9a12:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9a16:	dc 01       	movw	r26, r24
    9a18:	cb 01       	movw	r24, r22
    9a1a:	8e 01       	movw	r16, r28
    9a1c:	09 58       	subi	r16, 0x89	; 137
    9a1e:	1e 4f       	sbci	r17, 0xFE	; 254
    9a20:	bc 01       	movw	r22, r24
    9a22:	cd 01       	movw	r24, r26
    9a24:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9a28:	dc 01       	movw	r26, r24
    9a2a:	cb 01       	movw	r24, r22
    9a2c:	f8 01       	movw	r30, r16
    9a2e:	91 83       	std	Z+1, r25	; 0x01
    9a30:	80 83       	st	Z, r24
    9a32:	27 c0       	rjmp	.+78     	; 0x9a82 <pick_drop+0x2b70>
    9a34:	ce 01       	movw	r24, r28
    9a36:	87 58       	subi	r24, 0x87	; 135
    9a38:	9e 4f       	sbci	r25, 0xFE	; 254
    9a3a:	20 e7       	ldi	r18, 0x70	; 112
    9a3c:	31 e0       	ldi	r19, 0x01	; 1
    9a3e:	fc 01       	movw	r30, r24
    9a40:	31 83       	std	Z+1, r19	; 0x01
    9a42:	20 83       	st	Z, r18
    9a44:	ce 01       	movw	r24, r28
    9a46:	87 58       	subi	r24, 0x87	; 135
    9a48:	9e 4f       	sbci	r25, 0xFE	; 254
    9a4a:	fc 01       	movw	r30, r24
    9a4c:	80 81       	ld	r24, Z
    9a4e:	91 81       	ldd	r25, Z+1	; 0x01
    9a50:	8c 01       	movw	r16, r24
    9a52:	c8 01       	movw	r24, r16
    9a54:	01 97       	sbiw	r24, 0x01	; 1
    9a56:	f1 f7       	brne	.-4      	; 0x9a54 <pick_drop+0x2b42>
    9a58:	8c 01       	movw	r16, r24
    9a5a:	ce 01       	movw	r24, r28
    9a5c:	87 58       	subi	r24, 0x87	; 135
    9a5e:	9e 4f       	sbci	r25, 0xFE	; 254
    9a60:	fc 01       	movw	r30, r24
    9a62:	11 83       	std	Z+1, r17	; 0x01
    9a64:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a66:	ce 01       	movw	r24, r28
    9a68:	89 58       	subi	r24, 0x89	; 137
    9a6a:	9e 4f       	sbci	r25, 0xFE	; 254
    9a6c:	9e 01       	movw	r18, r28
    9a6e:	29 58       	subi	r18, 0x89	; 137
    9a70:	3e 4f       	sbci	r19, 0xFE	; 254
    9a72:	f9 01       	movw	r30, r18
    9a74:	20 81       	ld	r18, Z
    9a76:	31 81       	ldd	r19, Z+1	; 0x01
    9a78:	21 50       	subi	r18, 0x01	; 1
    9a7a:	30 40       	sbci	r19, 0x00	; 0
    9a7c:	fc 01       	movw	r30, r24
    9a7e:	31 83       	std	Z+1, r19	; 0x01
    9a80:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a82:	ce 01       	movw	r24, r28
    9a84:	89 58       	subi	r24, 0x89	; 137
    9a86:	9e 4f       	sbci	r25, 0xFE	; 254
    9a88:	fc 01       	movw	r30, r24
    9a8a:	80 81       	ld	r24, Z
    9a8c:	91 81       	ldd	r25, Z+1	; 0x01
    9a8e:	00 97       	sbiw	r24, 0x00	; 0
    9a90:	89 f6       	brne	.-94     	; 0x9a34 <pick_drop+0x2b22>
    9a92:	2f c0       	rjmp	.+94     	; 0x9af2 <pick_drop+0x2be0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a94:	8e 01       	movw	r16, r28
    9a96:	09 58       	subi	r16, 0x89	; 137
    9a98:	1e 4f       	sbci	r17, 0xFE	; 254
    9a9a:	ce 01       	movw	r24, r28
    9a9c:	8d 58       	subi	r24, 0x8D	; 141
    9a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    9aa0:	fc 01       	movw	r30, r24
    9aa2:	60 81       	ld	r22, Z
    9aa4:	71 81       	ldd	r23, Z+1	; 0x01
    9aa6:	82 81       	ldd	r24, Z+2	; 0x02
    9aa8:	93 81       	ldd	r25, Z+3	; 0x03
    9aaa:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9aae:	dc 01       	movw	r26, r24
    9ab0:	cb 01       	movw	r24, r22
    9ab2:	f8 01       	movw	r30, r16
    9ab4:	91 83       	std	Z+1, r25	; 0x01
    9ab6:	80 83       	st	Z, r24
    9ab8:	ce 01       	movw	r24, r28
    9aba:	85 58       	subi	r24, 0x85	; 133
    9abc:	9e 4f       	sbci	r25, 0xFE	; 254
    9abe:	9e 01       	movw	r18, r28
    9ac0:	29 58       	subi	r18, 0x89	; 137
    9ac2:	3e 4f       	sbci	r19, 0xFE	; 254
    9ac4:	f9 01       	movw	r30, r18
    9ac6:	20 81       	ld	r18, Z
    9ac8:	31 81       	ldd	r19, Z+1	; 0x01
    9aca:	fc 01       	movw	r30, r24
    9acc:	31 83       	std	Z+1, r19	; 0x01
    9ace:	20 83       	st	Z, r18
    9ad0:	ce 01       	movw	r24, r28
    9ad2:	85 58       	subi	r24, 0x85	; 133
    9ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    9ad6:	fc 01       	movw	r30, r24
    9ad8:	80 81       	ld	r24, Z
    9ada:	91 81       	ldd	r25, Z+1	; 0x01
    9adc:	8c 01       	movw	r16, r24
    9ade:	c8 01       	movw	r24, r16
    9ae0:	01 97       	sbiw	r24, 0x01	; 1
    9ae2:	f1 f7       	brne	.-4      	; 0x9ae0 <pick_drop+0x2bce>
    9ae4:	8c 01       	movw	r16, r24
    9ae6:	ce 01       	movw	r24, r28
    9ae8:	85 58       	subi	r24, 0x85	; 133
    9aea:	9e 4f       	sbci	r25, 0xFE	; 254
    9aec:	fc 01       	movw	r30, r24
    9aee:	11 83       	std	Z+1, r17	; 0x01
    9af0:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    9af2:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    9af6:	9e 01       	movw	r18, r28
    9af8:	23 58       	subi	r18, 0x83	; 131
    9afa:	3e 4f       	sbci	r19, 0xFE	; 254
    9afc:	80 e0       	ldi	r24, 0x00	; 0
    9afe:	90 e0       	ldi	r25, 0x00	; 0
    9b00:	a8 e4       	ldi	r26, 0x48	; 72
    9b02:	b3 e4       	ldi	r27, 0x43	; 67
    9b04:	f9 01       	movw	r30, r18
    9b06:	80 83       	st	Z, r24
    9b08:	91 83       	std	Z+1, r25	; 0x01
    9b0a:	a2 83       	std	Z+2, r26	; 0x02
    9b0c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9b0e:	8e 01       	movw	r16, r28
    9b10:	0f 57       	subi	r16, 0x7F	; 127
    9b12:	1e 4f       	sbci	r17, 0xFE	; 254
    9b14:	ce 01       	movw	r24, r28
    9b16:	83 58       	subi	r24, 0x83	; 131
    9b18:	9e 4f       	sbci	r25, 0xFE	; 254
    9b1a:	fc 01       	movw	r30, r24
    9b1c:	60 81       	ld	r22, Z
    9b1e:	71 81       	ldd	r23, Z+1	; 0x01
    9b20:	82 81       	ldd	r24, Z+2	; 0x02
    9b22:	93 81       	ldd	r25, Z+3	; 0x03
    9b24:	26 e6       	ldi	r18, 0x66	; 102
    9b26:	36 e6       	ldi	r19, 0x66	; 102
    9b28:	46 e6       	ldi	r20, 0x66	; 102
    9b2a:	55 e4       	ldi	r21, 0x45	; 69
    9b2c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9b30:	dc 01       	movw	r26, r24
    9b32:	cb 01       	movw	r24, r22
    9b34:	f8 01       	movw	r30, r16
    9b36:	80 83       	st	Z, r24
    9b38:	91 83       	std	Z+1, r25	; 0x01
    9b3a:	a2 83       	std	Z+2, r26	; 0x02
    9b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9b3e:	ce 01       	movw	r24, r28
    9b40:	8f 57       	subi	r24, 0x7F	; 127
    9b42:	9e 4f       	sbci	r25, 0xFE	; 254
    9b44:	11 e0       	ldi	r17, 0x01	; 1
    9b46:	fc 01       	movw	r30, r24
    9b48:	60 81       	ld	r22, Z
    9b4a:	71 81       	ldd	r23, Z+1	; 0x01
    9b4c:	82 81       	ldd	r24, Z+2	; 0x02
    9b4e:	93 81       	ldd	r25, Z+3	; 0x03
    9b50:	20 e0       	ldi	r18, 0x00	; 0
    9b52:	30 e0       	ldi	r19, 0x00	; 0
    9b54:	40 e8       	ldi	r20, 0x80	; 128
    9b56:	5f e3       	ldi	r21, 0x3F	; 63
    9b58:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    9b5c:	88 23       	and	r24, r24
    9b5e:	0c f0       	brlt	.+2      	; 0x9b62 <pick_drop+0x2c50>
    9b60:	10 e0       	ldi	r17, 0x00	; 0
    9b62:	11 23       	and	r17, r17
    9b64:	49 f0       	breq	.+18     	; 0x9b78 <pick_drop+0x2c66>
		__ticks = 1;
    9b66:	ce 01       	movw	r24, r28
    9b68:	8b 57       	subi	r24, 0x7B	; 123
    9b6a:	9e 4f       	sbci	r25, 0xFE	; 254
    9b6c:	21 e0       	ldi	r18, 0x01	; 1
    9b6e:	30 e0       	ldi	r19, 0x00	; 0
    9b70:	fc 01       	movw	r30, r24
    9b72:	31 83       	std	Z+1, r19	; 0x01
    9b74:	20 83       	st	Z, r18
    9b76:	74 c0       	rjmp	.+232    	; 0x9c60 <pick_drop+0x2d4e>
	else if (__tmp > 65535)
    9b78:	ce 01       	movw	r24, r28
    9b7a:	8f 57       	subi	r24, 0x7F	; 127
    9b7c:	9e 4f       	sbci	r25, 0xFE	; 254
    9b7e:	11 e0       	ldi	r17, 0x01	; 1
    9b80:	fc 01       	movw	r30, r24
    9b82:	60 81       	ld	r22, Z
    9b84:	71 81       	ldd	r23, Z+1	; 0x01
    9b86:	82 81       	ldd	r24, Z+2	; 0x02
    9b88:	93 81       	ldd	r25, Z+3	; 0x03
    9b8a:	20 e0       	ldi	r18, 0x00	; 0
    9b8c:	3f ef       	ldi	r19, 0xFF	; 255
    9b8e:	4f e7       	ldi	r20, 0x7F	; 127
    9b90:	57 e4       	ldi	r21, 0x47	; 71
    9b92:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9b96:	18 16       	cp	r1, r24
    9b98:	0c f0       	brlt	.+2      	; 0x9b9c <pick_drop+0x2c8a>
    9b9a:	10 e0       	ldi	r17, 0x00	; 0
    9b9c:	11 23       	and	r17, r17
    9b9e:	09 f4       	brne	.+2      	; 0x9ba2 <pick_drop+0x2c90>
    9ba0:	4d c0       	rjmp	.+154    	; 0x9c3c <pick_drop+0x2d2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9ba2:	ce 01       	movw	r24, r28
    9ba4:	83 58       	subi	r24, 0x83	; 131
    9ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    9ba8:	fc 01       	movw	r30, r24
    9baa:	60 81       	ld	r22, Z
    9bac:	71 81       	ldd	r23, Z+1	; 0x01
    9bae:	82 81       	ldd	r24, Z+2	; 0x02
    9bb0:	93 81       	ldd	r25, Z+3	; 0x03
    9bb2:	20 e0       	ldi	r18, 0x00	; 0
    9bb4:	30 e0       	ldi	r19, 0x00	; 0
    9bb6:	40 e2       	ldi	r20, 0x20	; 32
    9bb8:	51 e4       	ldi	r21, 0x41	; 65
    9bba:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9bbe:	dc 01       	movw	r26, r24
    9bc0:	cb 01       	movw	r24, r22
    9bc2:	8e 01       	movw	r16, r28
    9bc4:	0b 57       	subi	r16, 0x7B	; 123
    9bc6:	1e 4f       	sbci	r17, 0xFE	; 254
    9bc8:	bc 01       	movw	r22, r24
    9bca:	cd 01       	movw	r24, r26
    9bcc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9bd0:	dc 01       	movw	r26, r24
    9bd2:	cb 01       	movw	r24, r22
    9bd4:	f8 01       	movw	r30, r16
    9bd6:	91 83       	std	Z+1, r25	; 0x01
    9bd8:	80 83       	st	Z, r24
    9bda:	27 c0       	rjmp	.+78     	; 0x9c2a <pick_drop+0x2d18>
    9bdc:	ce 01       	movw	r24, r28
    9bde:	89 57       	subi	r24, 0x79	; 121
    9be0:	9e 4f       	sbci	r25, 0xFE	; 254
    9be2:	20 e7       	ldi	r18, 0x70	; 112
    9be4:	31 e0       	ldi	r19, 0x01	; 1
    9be6:	fc 01       	movw	r30, r24
    9be8:	31 83       	std	Z+1, r19	; 0x01
    9bea:	20 83       	st	Z, r18
    9bec:	ce 01       	movw	r24, r28
    9bee:	89 57       	subi	r24, 0x79	; 121
    9bf0:	9e 4f       	sbci	r25, 0xFE	; 254
    9bf2:	fc 01       	movw	r30, r24
    9bf4:	80 81       	ld	r24, Z
    9bf6:	91 81       	ldd	r25, Z+1	; 0x01
    9bf8:	8c 01       	movw	r16, r24
    9bfa:	c8 01       	movw	r24, r16
    9bfc:	01 97       	sbiw	r24, 0x01	; 1
    9bfe:	f1 f7       	brne	.-4      	; 0x9bfc <pick_drop+0x2cea>
    9c00:	8c 01       	movw	r16, r24
    9c02:	ce 01       	movw	r24, r28
    9c04:	89 57       	subi	r24, 0x79	; 121
    9c06:	9e 4f       	sbci	r25, 0xFE	; 254
    9c08:	fc 01       	movw	r30, r24
    9c0a:	11 83       	std	Z+1, r17	; 0x01
    9c0c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9c0e:	ce 01       	movw	r24, r28
    9c10:	8b 57       	subi	r24, 0x7B	; 123
    9c12:	9e 4f       	sbci	r25, 0xFE	; 254
    9c14:	9e 01       	movw	r18, r28
    9c16:	2b 57       	subi	r18, 0x7B	; 123
    9c18:	3e 4f       	sbci	r19, 0xFE	; 254
    9c1a:	f9 01       	movw	r30, r18
    9c1c:	20 81       	ld	r18, Z
    9c1e:	31 81       	ldd	r19, Z+1	; 0x01
    9c20:	21 50       	subi	r18, 0x01	; 1
    9c22:	30 40       	sbci	r19, 0x00	; 0
    9c24:	fc 01       	movw	r30, r24
    9c26:	31 83       	std	Z+1, r19	; 0x01
    9c28:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9c2a:	ce 01       	movw	r24, r28
    9c2c:	8b 57       	subi	r24, 0x7B	; 123
    9c2e:	9e 4f       	sbci	r25, 0xFE	; 254
    9c30:	fc 01       	movw	r30, r24
    9c32:	80 81       	ld	r24, Z
    9c34:	91 81       	ldd	r25, Z+1	; 0x01
    9c36:	00 97       	sbiw	r24, 0x00	; 0
    9c38:	89 f6       	brne	.-94     	; 0x9bdc <pick_drop+0x2cca>
    9c3a:	2f c0       	rjmp	.+94     	; 0x9c9a <pick_drop+0x2d88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9c3c:	8e 01       	movw	r16, r28
    9c3e:	0b 57       	subi	r16, 0x7B	; 123
    9c40:	1e 4f       	sbci	r17, 0xFE	; 254
    9c42:	ce 01       	movw	r24, r28
    9c44:	8f 57       	subi	r24, 0x7F	; 127
    9c46:	9e 4f       	sbci	r25, 0xFE	; 254
    9c48:	fc 01       	movw	r30, r24
    9c4a:	60 81       	ld	r22, Z
    9c4c:	71 81       	ldd	r23, Z+1	; 0x01
    9c4e:	82 81       	ldd	r24, Z+2	; 0x02
    9c50:	93 81       	ldd	r25, Z+3	; 0x03
    9c52:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9c56:	dc 01       	movw	r26, r24
    9c58:	cb 01       	movw	r24, r22
    9c5a:	f8 01       	movw	r30, r16
    9c5c:	91 83       	std	Z+1, r25	; 0x01
    9c5e:	80 83       	st	Z, r24
    9c60:	ce 01       	movw	r24, r28
    9c62:	87 57       	subi	r24, 0x77	; 119
    9c64:	9e 4f       	sbci	r25, 0xFE	; 254
    9c66:	9e 01       	movw	r18, r28
    9c68:	2b 57       	subi	r18, 0x7B	; 123
    9c6a:	3e 4f       	sbci	r19, 0xFE	; 254
    9c6c:	f9 01       	movw	r30, r18
    9c6e:	20 81       	ld	r18, Z
    9c70:	31 81       	ldd	r19, Z+1	; 0x01
    9c72:	fc 01       	movw	r30, r24
    9c74:	31 83       	std	Z+1, r19	; 0x01
    9c76:	20 83       	st	Z, r18
    9c78:	ce 01       	movw	r24, r28
    9c7a:	87 57       	subi	r24, 0x77	; 119
    9c7c:	9e 4f       	sbci	r25, 0xFE	; 254
    9c7e:	fc 01       	movw	r30, r24
    9c80:	80 81       	ld	r24, Z
    9c82:	91 81       	ldd	r25, Z+1	; 0x01
    9c84:	8c 01       	movw	r16, r24
    9c86:	c8 01       	movw	r24, r16
    9c88:	01 97       	sbiw	r24, 0x01	; 1
    9c8a:	f1 f7       	brne	.-4      	; 0x9c88 <pick_drop+0x2d76>
    9c8c:	8c 01       	movw	r16, r24
    9c8e:	ce 01       	movw	r24, r28
    9c90:	87 57       	subi	r24, 0x77	; 119
    9c92:	9e 4f       	sbci	r25, 0xFE	; 254
    9c94:	fc 01       	movw	r30, r24
    9c96:	11 83       	std	Z+1, r17	; 0x01
    9c98:	00 83       	st	Z, r16
		_delay_ms(200);
		forward_mm(60);
    9c9a:	8c e3       	ldi	r24, 0x3C	; 60
    9c9c:	90 e0       	ldi	r25, 0x00	; 0
    9c9e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    9ca2:	9e 01       	movw	r18, r28
    9ca4:	25 57       	subi	r18, 0x75	; 117
    9ca6:	3e 4f       	sbci	r19, 0xFE	; 254
    9ca8:	80 e0       	ldi	r24, 0x00	; 0
    9caa:	90 e0       	ldi	r25, 0x00	; 0
    9cac:	a0 ea       	ldi	r26, 0xA0	; 160
    9cae:	b1 e4       	ldi	r27, 0x41	; 65
    9cb0:	f9 01       	movw	r30, r18
    9cb2:	80 83       	st	Z, r24
    9cb4:	91 83       	std	Z+1, r25	; 0x01
    9cb6:	a2 83       	std	Z+2, r26	; 0x02
    9cb8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9cba:	8e 01       	movw	r16, r28
    9cbc:	01 57       	subi	r16, 0x71	; 113
    9cbe:	1e 4f       	sbci	r17, 0xFE	; 254
    9cc0:	ce 01       	movw	r24, r28
    9cc2:	85 57       	subi	r24, 0x75	; 117
    9cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    9cc6:	fc 01       	movw	r30, r24
    9cc8:	60 81       	ld	r22, Z
    9cca:	71 81       	ldd	r23, Z+1	; 0x01
    9ccc:	82 81       	ldd	r24, Z+2	; 0x02
    9cce:	93 81       	ldd	r25, Z+3	; 0x03
    9cd0:	26 e6       	ldi	r18, 0x66	; 102
    9cd2:	36 e6       	ldi	r19, 0x66	; 102
    9cd4:	46 e6       	ldi	r20, 0x66	; 102
    9cd6:	55 e4       	ldi	r21, 0x45	; 69
    9cd8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9cdc:	dc 01       	movw	r26, r24
    9cde:	cb 01       	movw	r24, r22
    9ce0:	f8 01       	movw	r30, r16
    9ce2:	80 83       	st	Z, r24
    9ce4:	91 83       	std	Z+1, r25	; 0x01
    9ce6:	a2 83       	std	Z+2, r26	; 0x02
    9ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9cea:	ce 01       	movw	r24, r28
    9cec:	81 57       	subi	r24, 0x71	; 113
    9cee:	9e 4f       	sbci	r25, 0xFE	; 254
    9cf0:	11 e0       	ldi	r17, 0x01	; 1
    9cf2:	fc 01       	movw	r30, r24
    9cf4:	60 81       	ld	r22, Z
    9cf6:	71 81       	ldd	r23, Z+1	; 0x01
    9cf8:	82 81       	ldd	r24, Z+2	; 0x02
    9cfa:	93 81       	ldd	r25, Z+3	; 0x03
    9cfc:	20 e0       	ldi	r18, 0x00	; 0
    9cfe:	30 e0       	ldi	r19, 0x00	; 0
    9d00:	40 e8       	ldi	r20, 0x80	; 128
    9d02:	5f e3       	ldi	r21, 0x3F	; 63
    9d04:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    9d08:	88 23       	and	r24, r24
    9d0a:	0c f0       	brlt	.+2      	; 0x9d0e <pick_drop+0x2dfc>
    9d0c:	10 e0       	ldi	r17, 0x00	; 0
    9d0e:	11 23       	and	r17, r17
    9d10:	49 f0       	breq	.+18     	; 0x9d24 <pick_drop+0x2e12>
		__ticks = 1;
    9d12:	ce 01       	movw	r24, r28
    9d14:	8d 56       	subi	r24, 0x6D	; 109
    9d16:	9e 4f       	sbci	r25, 0xFE	; 254
    9d18:	21 e0       	ldi	r18, 0x01	; 1
    9d1a:	30 e0       	ldi	r19, 0x00	; 0
    9d1c:	fc 01       	movw	r30, r24
    9d1e:	31 83       	std	Z+1, r19	; 0x01
    9d20:	20 83       	st	Z, r18
    9d22:	74 c0       	rjmp	.+232    	; 0x9e0c <pick_drop+0x2efa>
	else if (__tmp > 65535)
    9d24:	ce 01       	movw	r24, r28
    9d26:	81 57       	subi	r24, 0x71	; 113
    9d28:	9e 4f       	sbci	r25, 0xFE	; 254
    9d2a:	11 e0       	ldi	r17, 0x01	; 1
    9d2c:	fc 01       	movw	r30, r24
    9d2e:	60 81       	ld	r22, Z
    9d30:	71 81       	ldd	r23, Z+1	; 0x01
    9d32:	82 81       	ldd	r24, Z+2	; 0x02
    9d34:	93 81       	ldd	r25, Z+3	; 0x03
    9d36:	20 e0       	ldi	r18, 0x00	; 0
    9d38:	3f ef       	ldi	r19, 0xFF	; 255
    9d3a:	4f e7       	ldi	r20, 0x7F	; 127
    9d3c:	57 e4       	ldi	r21, 0x47	; 71
    9d3e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9d42:	18 16       	cp	r1, r24
    9d44:	0c f0       	brlt	.+2      	; 0x9d48 <pick_drop+0x2e36>
    9d46:	10 e0       	ldi	r17, 0x00	; 0
    9d48:	11 23       	and	r17, r17
    9d4a:	09 f4       	brne	.+2      	; 0x9d4e <pick_drop+0x2e3c>
    9d4c:	4d c0       	rjmp	.+154    	; 0x9de8 <pick_drop+0x2ed6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9d4e:	ce 01       	movw	r24, r28
    9d50:	85 57       	subi	r24, 0x75	; 117
    9d52:	9e 4f       	sbci	r25, 0xFE	; 254
    9d54:	fc 01       	movw	r30, r24
    9d56:	60 81       	ld	r22, Z
    9d58:	71 81       	ldd	r23, Z+1	; 0x01
    9d5a:	82 81       	ldd	r24, Z+2	; 0x02
    9d5c:	93 81       	ldd	r25, Z+3	; 0x03
    9d5e:	20 e0       	ldi	r18, 0x00	; 0
    9d60:	30 e0       	ldi	r19, 0x00	; 0
    9d62:	40 e2       	ldi	r20, 0x20	; 32
    9d64:	51 e4       	ldi	r21, 0x41	; 65
    9d66:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9d6a:	dc 01       	movw	r26, r24
    9d6c:	cb 01       	movw	r24, r22
    9d6e:	8e 01       	movw	r16, r28
    9d70:	0d 56       	subi	r16, 0x6D	; 109
    9d72:	1e 4f       	sbci	r17, 0xFE	; 254
    9d74:	bc 01       	movw	r22, r24
    9d76:	cd 01       	movw	r24, r26
    9d78:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9d7c:	dc 01       	movw	r26, r24
    9d7e:	cb 01       	movw	r24, r22
    9d80:	f8 01       	movw	r30, r16
    9d82:	91 83       	std	Z+1, r25	; 0x01
    9d84:	80 83       	st	Z, r24
    9d86:	27 c0       	rjmp	.+78     	; 0x9dd6 <pick_drop+0x2ec4>
    9d88:	ce 01       	movw	r24, r28
    9d8a:	8b 56       	subi	r24, 0x6B	; 107
    9d8c:	9e 4f       	sbci	r25, 0xFE	; 254
    9d8e:	20 e7       	ldi	r18, 0x70	; 112
    9d90:	31 e0       	ldi	r19, 0x01	; 1
    9d92:	fc 01       	movw	r30, r24
    9d94:	31 83       	std	Z+1, r19	; 0x01
    9d96:	20 83       	st	Z, r18
    9d98:	ce 01       	movw	r24, r28
    9d9a:	8b 56       	subi	r24, 0x6B	; 107
    9d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    9d9e:	fc 01       	movw	r30, r24
    9da0:	80 81       	ld	r24, Z
    9da2:	91 81       	ldd	r25, Z+1	; 0x01
    9da4:	8c 01       	movw	r16, r24
    9da6:	c8 01       	movw	r24, r16
    9da8:	01 97       	sbiw	r24, 0x01	; 1
    9daa:	f1 f7       	brne	.-4      	; 0x9da8 <pick_drop+0x2e96>
    9dac:	8c 01       	movw	r16, r24
    9dae:	ce 01       	movw	r24, r28
    9db0:	8b 56       	subi	r24, 0x6B	; 107
    9db2:	9e 4f       	sbci	r25, 0xFE	; 254
    9db4:	fc 01       	movw	r30, r24
    9db6:	11 83       	std	Z+1, r17	; 0x01
    9db8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9dba:	ce 01       	movw	r24, r28
    9dbc:	8d 56       	subi	r24, 0x6D	; 109
    9dbe:	9e 4f       	sbci	r25, 0xFE	; 254
    9dc0:	9e 01       	movw	r18, r28
    9dc2:	2d 56       	subi	r18, 0x6D	; 109
    9dc4:	3e 4f       	sbci	r19, 0xFE	; 254
    9dc6:	f9 01       	movw	r30, r18
    9dc8:	20 81       	ld	r18, Z
    9dca:	31 81       	ldd	r19, Z+1	; 0x01
    9dcc:	21 50       	subi	r18, 0x01	; 1
    9dce:	30 40       	sbci	r19, 0x00	; 0
    9dd0:	fc 01       	movw	r30, r24
    9dd2:	31 83       	std	Z+1, r19	; 0x01
    9dd4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9dd6:	ce 01       	movw	r24, r28
    9dd8:	8d 56       	subi	r24, 0x6D	; 109
    9dda:	9e 4f       	sbci	r25, 0xFE	; 254
    9ddc:	fc 01       	movw	r30, r24
    9dde:	80 81       	ld	r24, Z
    9de0:	91 81       	ldd	r25, Z+1	; 0x01
    9de2:	00 97       	sbiw	r24, 0x00	; 0
    9de4:	89 f6       	brne	.-94     	; 0x9d88 <pick_drop+0x2e76>
    9de6:	2f c0       	rjmp	.+94     	; 0x9e46 <pick_drop+0x2f34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9de8:	8e 01       	movw	r16, r28
    9dea:	0d 56       	subi	r16, 0x6D	; 109
    9dec:	1e 4f       	sbci	r17, 0xFE	; 254
    9dee:	ce 01       	movw	r24, r28
    9df0:	81 57       	subi	r24, 0x71	; 113
    9df2:	9e 4f       	sbci	r25, 0xFE	; 254
    9df4:	fc 01       	movw	r30, r24
    9df6:	60 81       	ld	r22, Z
    9df8:	71 81       	ldd	r23, Z+1	; 0x01
    9dfa:	82 81       	ldd	r24, Z+2	; 0x02
    9dfc:	93 81       	ldd	r25, Z+3	; 0x03
    9dfe:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9e02:	dc 01       	movw	r26, r24
    9e04:	cb 01       	movw	r24, r22
    9e06:	f8 01       	movw	r30, r16
    9e08:	91 83       	std	Z+1, r25	; 0x01
    9e0a:	80 83       	st	Z, r24
    9e0c:	ce 01       	movw	r24, r28
    9e0e:	89 56       	subi	r24, 0x69	; 105
    9e10:	9e 4f       	sbci	r25, 0xFE	; 254
    9e12:	9e 01       	movw	r18, r28
    9e14:	2d 56       	subi	r18, 0x6D	; 109
    9e16:	3e 4f       	sbci	r19, 0xFE	; 254
    9e18:	f9 01       	movw	r30, r18
    9e1a:	20 81       	ld	r18, Z
    9e1c:	31 81       	ldd	r19, Z+1	; 0x01
    9e1e:	fc 01       	movw	r30, r24
    9e20:	31 83       	std	Z+1, r19	; 0x01
    9e22:	20 83       	st	Z, r18
    9e24:	ce 01       	movw	r24, r28
    9e26:	89 56       	subi	r24, 0x69	; 105
    9e28:	9e 4f       	sbci	r25, 0xFE	; 254
    9e2a:	fc 01       	movw	r30, r24
    9e2c:	80 81       	ld	r24, Z
    9e2e:	91 81       	ldd	r25, Z+1	; 0x01
    9e30:	8c 01       	movw	r16, r24
    9e32:	c8 01       	movw	r24, r16
    9e34:	01 97       	sbiw	r24, 0x01	; 1
    9e36:	f1 f7       	brne	.-4      	; 0x9e34 <pick_drop+0x2f22>
    9e38:	8c 01       	movw	r16, r24
    9e3a:	ce 01       	movw	r24, r28
    9e3c:	89 56       	subi	r24, 0x69	; 105
    9e3e:	9e 4f       	sbci	r25, 0xFE	; 254
    9e40:	fc 01       	movw	r30, r24
    9e42:	11 83       	std	Z+1, r17	; 0x01
    9e44:	00 83       	st	Z, r16
		_delay_ms(20);
		correct_right3();
    9e46:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    9e4a:	9e 01       	movw	r18, r28
    9e4c:	27 56       	subi	r18, 0x67	; 103
    9e4e:	3e 4f       	sbci	r19, 0xFE	; 254
    9e50:	80 e0       	ldi	r24, 0x00	; 0
    9e52:	90 e0       	ldi	r25, 0x00	; 0
    9e54:	a0 ea       	ldi	r26, 0xA0	; 160
    9e56:	b1 e4       	ldi	r27, 0x41	; 65
    9e58:	f9 01       	movw	r30, r18
    9e5a:	80 83       	st	Z, r24
    9e5c:	91 83       	std	Z+1, r25	; 0x01
    9e5e:	a2 83       	std	Z+2, r26	; 0x02
    9e60:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9e62:	8e 01       	movw	r16, r28
    9e64:	03 56       	subi	r16, 0x63	; 99
    9e66:	1e 4f       	sbci	r17, 0xFE	; 254
    9e68:	ce 01       	movw	r24, r28
    9e6a:	87 56       	subi	r24, 0x67	; 103
    9e6c:	9e 4f       	sbci	r25, 0xFE	; 254
    9e6e:	fc 01       	movw	r30, r24
    9e70:	60 81       	ld	r22, Z
    9e72:	71 81       	ldd	r23, Z+1	; 0x01
    9e74:	82 81       	ldd	r24, Z+2	; 0x02
    9e76:	93 81       	ldd	r25, Z+3	; 0x03
    9e78:	26 e6       	ldi	r18, 0x66	; 102
    9e7a:	36 e6       	ldi	r19, 0x66	; 102
    9e7c:	46 e6       	ldi	r20, 0x66	; 102
    9e7e:	55 e4       	ldi	r21, 0x45	; 69
    9e80:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9e84:	dc 01       	movw	r26, r24
    9e86:	cb 01       	movw	r24, r22
    9e88:	f8 01       	movw	r30, r16
    9e8a:	80 83       	st	Z, r24
    9e8c:	91 83       	std	Z+1, r25	; 0x01
    9e8e:	a2 83       	std	Z+2, r26	; 0x02
    9e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9e92:	ce 01       	movw	r24, r28
    9e94:	83 56       	subi	r24, 0x63	; 99
    9e96:	9e 4f       	sbci	r25, 0xFE	; 254
    9e98:	11 e0       	ldi	r17, 0x01	; 1
    9e9a:	fc 01       	movw	r30, r24
    9e9c:	60 81       	ld	r22, Z
    9e9e:	71 81       	ldd	r23, Z+1	; 0x01
    9ea0:	82 81       	ldd	r24, Z+2	; 0x02
    9ea2:	93 81       	ldd	r25, Z+3	; 0x03
    9ea4:	20 e0       	ldi	r18, 0x00	; 0
    9ea6:	30 e0       	ldi	r19, 0x00	; 0
    9ea8:	40 e8       	ldi	r20, 0x80	; 128
    9eaa:	5f e3       	ldi	r21, 0x3F	; 63
    9eac:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    9eb0:	88 23       	and	r24, r24
    9eb2:	0c f0       	brlt	.+2      	; 0x9eb6 <pick_drop+0x2fa4>
    9eb4:	10 e0       	ldi	r17, 0x00	; 0
    9eb6:	11 23       	and	r17, r17
    9eb8:	49 f0       	breq	.+18     	; 0x9ecc <pick_drop+0x2fba>
		__ticks = 1;
    9eba:	ce 01       	movw	r24, r28
    9ebc:	8f 55       	subi	r24, 0x5F	; 95
    9ebe:	9e 4f       	sbci	r25, 0xFE	; 254
    9ec0:	21 e0       	ldi	r18, 0x01	; 1
    9ec2:	30 e0       	ldi	r19, 0x00	; 0
    9ec4:	fc 01       	movw	r30, r24
    9ec6:	31 83       	std	Z+1, r19	; 0x01
    9ec8:	20 83       	st	Z, r18
    9eca:	74 c0       	rjmp	.+232    	; 0x9fb4 <pick_drop+0x30a2>
	else if (__tmp > 65535)
    9ecc:	ce 01       	movw	r24, r28
    9ece:	83 56       	subi	r24, 0x63	; 99
    9ed0:	9e 4f       	sbci	r25, 0xFE	; 254
    9ed2:	11 e0       	ldi	r17, 0x01	; 1
    9ed4:	fc 01       	movw	r30, r24
    9ed6:	60 81       	ld	r22, Z
    9ed8:	71 81       	ldd	r23, Z+1	; 0x01
    9eda:	82 81       	ldd	r24, Z+2	; 0x02
    9edc:	93 81       	ldd	r25, Z+3	; 0x03
    9ede:	20 e0       	ldi	r18, 0x00	; 0
    9ee0:	3f ef       	ldi	r19, 0xFF	; 255
    9ee2:	4f e7       	ldi	r20, 0x7F	; 127
    9ee4:	57 e4       	ldi	r21, 0x47	; 71
    9ee6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    9eea:	18 16       	cp	r1, r24
    9eec:	0c f0       	brlt	.+2      	; 0x9ef0 <pick_drop+0x2fde>
    9eee:	10 e0       	ldi	r17, 0x00	; 0
    9ef0:	11 23       	and	r17, r17
    9ef2:	09 f4       	brne	.+2      	; 0x9ef6 <pick_drop+0x2fe4>
    9ef4:	4d c0       	rjmp	.+154    	; 0x9f90 <pick_drop+0x307e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9ef6:	ce 01       	movw	r24, r28
    9ef8:	87 56       	subi	r24, 0x67	; 103
    9efa:	9e 4f       	sbci	r25, 0xFE	; 254
    9efc:	fc 01       	movw	r30, r24
    9efe:	60 81       	ld	r22, Z
    9f00:	71 81       	ldd	r23, Z+1	; 0x01
    9f02:	82 81       	ldd	r24, Z+2	; 0x02
    9f04:	93 81       	ldd	r25, Z+3	; 0x03
    9f06:	20 e0       	ldi	r18, 0x00	; 0
    9f08:	30 e0       	ldi	r19, 0x00	; 0
    9f0a:	40 e2       	ldi	r20, 0x20	; 32
    9f0c:	51 e4       	ldi	r21, 0x41	; 65
    9f0e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    9f12:	dc 01       	movw	r26, r24
    9f14:	cb 01       	movw	r24, r22
    9f16:	8e 01       	movw	r16, r28
    9f18:	0f 55       	subi	r16, 0x5F	; 95
    9f1a:	1e 4f       	sbci	r17, 0xFE	; 254
    9f1c:	bc 01       	movw	r22, r24
    9f1e:	cd 01       	movw	r24, r26
    9f20:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9f24:	dc 01       	movw	r26, r24
    9f26:	cb 01       	movw	r24, r22
    9f28:	f8 01       	movw	r30, r16
    9f2a:	91 83       	std	Z+1, r25	; 0x01
    9f2c:	80 83       	st	Z, r24
    9f2e:	27 c0       	rjmp	.+78     	; 0x9f7e <pick_drop+0x306c>
    9f30:	ce 01       	movw	r24, r28
    9f32:	8d 55       	subi	r24, 0x5D	; 93
    9f34:	9e 4f       	sbci	r25, 0xFE	; 254
    9f36:	20 e7       	ldi	r18, 0x70	; 112
    9f38:	31 e0       	ldi	r19, 0x01	; 1
    9f3a:	fc 01       	movw	r30, r24
    9f3c:	31 83       	std	Z+1, r19	; 0x01
    9f3e:	20 83       	st	Z, r18
    9f40:	ce 01       	movw	r24, r28
    9f42:	8d 55       	subi	r24, 0x5D	; 93
    9f44:	9e 4f       	sbci	r25, 0xFE	; 254
    9f46:	fc 01       	movw	r30, r24
    9f48:	80 81       	ld	r24, Z
    9f4a:	91 81       	ldd	r25, Z+1	; 0x01
    9f4c:	8c 01       	movw	r16, r24
    9f4e:	c8 01       	movw	r24, r16
    9f50:	01 97       	sbiw	r24, 0x01	; 1
    9f52:	f1 f7       	brne	.-4      	; 0x9f50 <pick_drop+0x303e>
    9f54:	8c 01       	movw	r16, r24
    9f56:	ce 01       	movw	r24, r28
    9f58:	8d 55       	subi	r24, 0x5D	; 93
    9f5a:	9e 4f       	sbci	r25, 0xFE	; 254
    9f5c:	fc 01       	movw	r30, r24
    9f5e:	11 83       	std	Z+1, r17	; 0x01
    9f60:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f62:	ce 01       	movw	r24, r28
    9f64:	8f 55       	subi	r24, 0x5F	; 95
    9f66:	9e 4f       	sbci	r25, 0xFE	; 254
    9f68:	9e 01       	movw	r18, r28
    9f6a:	2f 55       	subi	r18, 0x5F	; 95
    9f6c:	3e 4f       	sbci	r19, 0xFE	; 254
    9f6e:	f9 01       	movw	r30, r18
    9f70:	20 81       	ld	r18, Z
    9f72:	31 81       	ldd	r19, Z+1	; 0x01
    9f74:	21 50       	subi	r18, 0x01	; 1
    9f76:	30 40       	sbci	r19, 0x00	; 0
    9f78:	fc 01       	movw	r30, r24
    9f7a:	31 83       	std	Z+1, r19	; 0x01
    9f7c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f7e:	ce 01       	movw	r24, r28
    9f80:	8f 55       	subi	r24, 0x5F	; 95
    9f82:	9e 4f       	sbci	r25, 0xFE	; 254
    9f84:	fc 01       	movw	r30, r24
    9f86:	80 81       	ld	r24, Z
    9f88:	91 81       	ldd	r25, Z+1	; 0x01
    9f8a:	00 97       	sbiw	r24, 0x00	; 0
    9f8c:	89 f6       	brne	.-94     	; 0x9f30 <pick_drop+0x301e>
    9f8e:	2f c0       	rjmp	.+94     	; 0x9fee <pick_drop+0x30dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9f90:	8e 01       	movw	r16, r28
    9f92:	0f 55       	subi	r16, 0x5F	; 95
    9f94:	1e 4f       	sbci	r17, 0xFE	; 254
    9f96:	ce 01       	movw	r24, r28
    9f98:	83 56       	subi	r24, 0x63	; 99
    9f9a:	9e 4f       	sbci	r25, 0xFE	; 254
    9f9c:	fc 01       	movw	r30, r24
    9f9e:	60 81       	ld	r22, Z
    9fa0:	71 81       	ldd	r23, Z+1	; 0x01
    9fa2:	82 81       	ldd	r24, Z+2	; 0x02
    9fa4:	93 81       	ldd	r25, Z+3	; 0x03
    9fa6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    9faa:	dc 01       	movw	r26, r24
    9fac:	cb 01       	movw	r24, r22
    9fae:	f8 01       	movw	r30, r16
    9fb0:	91 83       	std	Z+1, r25	; 0x01
    9fb2:	80 83       	st	Z, r24
    9fb4:	ce 01       	movw	r24, r28
    9fb6:	8b 55       	subi	r24, 0x5B	; 91
    9fb8:	9e 4f       	sbci	r25, 0xFE	; 254
    9fba:	9e 01       	movw	r18, r28
    9fbc:	2f 55       	subi	r18, 0x5F	; 95
    9fbe:	3e 4f       	sbci	r19, 0xFE	; 254
    9fc0:	f9 01       	movw	r30, r18
    9fc2:	20 81       	ld	r18, Z
    9fc4:	31 81       	ldd	r19, Z+1	; 0x01
    9fc6:	fc 01       	movw	r30, r24
    9fc8:	31 83       	std	Z+1, r19	; 0x01
    9fca:	20 83       	st	Z, r18
    9fcc:	ce 01       	movw	r24, r28
    9fce:	8b 55       	subi	r24, 0x5B	; 91
    9fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    9fd2:	fc 01       	movw	r30, r24
    9fd4:	80 81       	ld	r24, Z
    9fd6:	91 81       	ldd	r25, Z+1	; 0x01
    9fd8:	8c 01       	movw	r16, r24
    9fda:	c8 01       	movw	r24, r16
    9fdc:	01 97       	sbiw	r24, 0x01	; 1
    9fde:	f1 f7       	brne	.-4      	; 0x9fdc <pick_drop+0x30ca>
    9fe0:	8c 01       	movw	r16, r24
    9fe2:	ce 01       	movw	r24, r28
    9fe4:	8b 55       	subi	r24, 0x5B	; 91
    9fe6:	9e 4f       	sbci	r25, 0xFE	; 254
    9fe8:	fc 01       	movw	r30, r24
    9fea:	11 83       	std	Z+1, r17	; 0x01
    9fec:	00 83       	st	Z, r16
		_delay_ms(20);
		stop();
    9fee:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    9ff2:	9e 01       	movw	r18, r28
    9ff4:	29 55       	subi	r18, 0x59	; 89
    9ff6:	3e 4f       	sbci	r19, 0xFE	; 254
    9ff8:	80 e0       	ldi	r24, 0x00	; 0
    9ffa:	90 e0       	ldi	r25, 0x00	; 0
    9ffc:	a0 ea       	ldi	r26, 0xA0	; 160
    9ffe:	b1 e4       	ldi	r27, 0x41	; 65
    a000:	f9 01       	movw	r30, r18
    a002:	80 83       	st	Z, r24
    a004:	91 83       	std	Z+1, r25	; 0x01
    a006:	a2 83       	std	Z+2, r26	; 0x02
    a008:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a00a:	8e 01       	movw	r16, r28
    a00c:	05 55       	subi	r16, 0x55	; 85
    a00e:	1e 4f       	sbci	r17, 0xFE	; 254
    a010:	ce 01       	movw	r24, r28
    a012:	89 55       	subi	r24, 0x59	; 89
    a014:	9e 4f       	sbci	r25, 0xFE	; 254
    a016:	fc 01       	movw	r30, r24
    a018:	60 81       	ld	r22, Z
    a01a:	71 81       	ldd	r23, Z+1	; 0x01
    a01c:	82 81       	ldd	r24, Z+2	; 0x02
    a01e:	93 81       	ldd	r25, Z+3	; 0x03
    a020:	26 e6       	ldi	r18, 0x66	; 102
    a022:	36 e6       	ldi	r19, 0x66	; 102
    a024:	46 e6       	ldi	r20, 0x66	; 102
    a026:	55 e4       	ldi	r21, 0x45	; 69
    a028:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a02c:	dc 01       	movw	r26, r24
    a02e:	cb 01       	movw	r24, r22
    a030:	f8 01       	movw	r30, r16
    a032:	80 83       	st	Z, r24
    a034:	91 83       	std	Z+1, r25	; 0x01
    a036:	a2 83       	std	Z+2, r26	; 0x02
    a038:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a03a:	ce 01       	movw	r24, r28
    a03c:	85 55       	subi	r24, 0x55	; 85
    a03e:	9e 4f       	sbci	r25, 0xFE	; 254
    a040:	11 e0       	ldi	r17, 0x01	; 1
    a042:	fc 01       	movw	r30, r24
    a044:	60 81       	ld	r22, Z
    a046:	71 81       	ldd	r23, Z+1	; 0x01
    a048:	82 81       	ldd	r24, Z+2	; 0x02
    a04a:	93 81       	ldd	r25, Z+3	; 0x03
    a04c:	20 e0       	ldi	r18, 0x00	; 0
    a04e:	30 e0       	ldi	r19, 0x00	; 0
    a050:	40 e8       	ldi	r20, 0x80	; 128
    a052:	5f e3       	ldi	r21, 0x3F	; 63
    a054:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    a058:	88 23       	and	r24, r24
    a05a:	0c f0       	brlt	.+2      	; 0xa05e <pick_drop+0x314c>
    a05c:	10 e0       	ldi	r17, 0x00	; 0
    a05e:	11 23       	and	r17, r17
    a060:	49 f0       	breq	.+18     	; 0xa074 <pick_drop+0x3162>
		__ticks = 1;
    a062:	ce 01       	movw	r24, r28
    a064:	81 55       	subi	r24, 0x51	; 81
    a066:	9e 4f       	sbci	r25, 0xFE	; 254
    a068:	21 e0       	ldi	r18, 0x01	; 1
    a06a:	30 e0       	ldi	r19, 0x00	; 0
    a06c:	fc 01       	movw	r30, r24
    a06e:	31 83       	std	Z+1, r19	; 0x01
    a070:	20 83       	st	Z, r18
    a072:	74 c0       	rjmp	.+232    	; 0xa15c <pick_drop+0x324a>
	else if (__tmp > 65535)
    a074:	ce 01       	movw	r24, r28
    a076:	85 55       	subi	r24, 0x55	; 85
    a078:	9e 4f       	sbci	r25, 0xFE	; 254
    a07a:	11 e0       	ldi	r17, 0x01	; 1
    a07c:	fc 01       	movw	r30, r24
    a07e:	60 81       	ld	r22, Z
    a080:	71 81       	ldd	r23, Z+1	; 0x01
    a082:	82 81       	ldd	r24, Z+2	; 0x02
    a084:	93 81       	ldd	r25, Z+3	; 0x03
    a086:	20 e0       	ldi	r18, 0x00	; 0
    a088:	3f ef       	ldi	r19, 0xFF	; 255
    a08a:	4f e7       	ldi	r20, 0x7F	; 127
    a08c:	57 e4       	ldi	r21, 0x47	; 71
    a08e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    a092:	18 16       	cp	r1, r24
    a094:	0c f0       	brlt	.+2      	; 0xa098 <pick_drop+0x3186>
    a096:	10 e0       	ldi	r17, 0x00	; 0
    a098:	11 23       	and	r17, r17
    a09a:	09 f4       	brne	.+2      	; 0xa09e <pick_drop+0x318c>
    a09c:	4d c0       	rjmp	.+154    	; 0xa138 <pick_drop+0x3226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a09e:	ce 01       	movw	r24, r28
    a0a0:	89 55       	subi	r24, 0x59	; 89
    a0a2:	9e 4f       	sbci	r25, 0xFE	; 254
    a0a4:	fc 01       	movw	r30, r24
    a0a6:	60 81       	ld	r22, Z
    a0a8:	71 81       	ldd	r23, Z+1	; 0x01
    a0aa:	82 81       	ldd	r24, Z+2	; 0x02
    a0ac:	93 81       	ldd	r25, Z+3	; 0x03
    a0ae:	20 e0       	ldi	r18, 0x00	; 0
    a0b0:	30 e0       	ldi	r19, 0x00	; 0
    a0b2:	40 e2       	ldi	r20, 0x20	; 32
    a0b4:	51 e4       	ldi	r21, 0x41	; 65
    a0b6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a0ba:	dc 01       	movw	r26, r24
    a0bc:	cb 01       	movw	r24, r22
    a0be:	8e 01       	movw	r16, r28
    a0c0:	01 55       	subi	r16, 0x51	; 81
    a0c2:	1e 4f       	sbci	r17, 0xFE	; 254
    a0c4:	bc 01       	movw	r22, r24
    a0c6:	cd 01       	movw	r24, r26
    a0c8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a0cc:	dc 01       	movw	r26, r24
    a0ce:	cb 01       	movw	r24, r22
    a0d0:	f8 01       	movw	r30, r16
    a0d2:	91 83       	std	Z+1, r25	; 0x01
    a0d4:	80 83       	st	Z, r24
    a0d6:	27 c0       	rjmp	.+78     	; 0xa126 <pick_drop+0x3214>
    a0d8:	ce 01       	movw	r24, r28
    a0da:	8f 54       	subi	r24, 0x4F	; 79
    a0dc:	9e 4f       	sbci	r25, 0xFE	; 254
    a0de:	20 e7       	ldi	r18, 0x70	; 112
    a0e0:	31 e0       	ldi	r19, 0x01	; 1
    a0e2:	fc 01       	movw	r30, r24
    a0e4:	31 83       	std	Z+1, r19	; 0x01
    a0e6:	20 83       	st	Z, r18
    a0e8:	ce 01       	movw	r24, r28
    a0ea:	8f 54       	subi	r24, 0x4F	; 79
    a0ec:	9e 4f       	sbci	r25, 0xFE	; 254
    a0ee:	fc 01       	movw	r30, r24
    a0f0:	80 81       	ld	r24, Z
    a0f2:	91 81       	ldd	r25, Z+1	; 0x01
    a0f4:	8c 01       	movw	r16, r24
    a0f6:	c8 01       	movw	r24, r16
    a0f8:	01 97       	sbiw	r24, 0x01	; 1
    a0fa:	f1 f7       	brne	.-4      	; 0xa0f8 <pick_drop+0x31e6>
    a0fc:	8c 01       	movw	r16, r24
    a0fe:	ce 01       	movw	r24, r28
    a100:	8f 54       	subi	r24, 0x4F	; 79
    a102:	9e 4f       	sbci	r25, 0xFE	; 254
    a104:	fc 01       	movw	r30, r24
    a106:	11 83       	std	Z+1, r17	; 0x01
    a108:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a10a:	ce 01       	movw	r24, r28
    a10c:	81 55       	subi	r24, 0x51	; 81
    a10e:	9e 4f       	sbci	r25, 0xFE	; 254
    a110:	9e 01       	movw	r18, r28
    a112:	21 55       	subi	r18, 0x51	; 81
    a114:	3e 4f       	sbci	r19, 0xFE	; 254
    a116:	f9 01       	movw	r30, r18
    a118:	20 81       	ld	r18, Z
    a11a:	31 81       	ldd	r19, Z+1	; 0x01
    a11c:	21 50       	subi	r18, 0x01	; 1
    a11e:	30 40       	sbci	r19, 0x00	; 0
    a120:	fc 01       	movw	r30, r24
    a122:	31 83       	std	Z+1, r19	; 0x01
    a124:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a126:	ce 01       	movw	r24, r28
    a128:	81 55       	subi	r24, 0x51	; 81
    a12a:	9e 4f       	sbci	r25, 0xFE	; 254
    a12c:	fc 01       	movw	r30, r24
    a12e:	80 81       	ld	r24, Z
    a130:	91 81       	ldd	r25, Z+1	; 0x01
    a132:	00 97       	sbiw	r24, 0x00	; 0
    a134:	89 f6       	brne	.-94     	; 0xa0d8 <pick_drop+0x31c6>
    a136:	2f c0       	rjmp	.+94     	; 0xa196 <pick_drop+0x3284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a138:	8e 01       	movw	r16, r28
    a13a:	01 55       	subi	r16, 0x51	; 81
    a13c:	1e 4f       	sbci	r17, 0xFE	; 254
    a13e:	ce 01       	movw	r24, r28
    a140:	85 55       	subi	r24, 0x55	; 85
    a142:	9e 4f       	sbci	r25, 0xFE	; 254
    a144:	fc 01       	movw	r30, r24
    a146:	60 81       	ld	r22, Z
    a148:	71 81       	ldd	r23, Z+1	; 0x01
    a14a:	82 81       	ldd	r24, Z+2	; 0x02
    a14c:	93 81       	ldd	r25, Z+3	; 0x03
    a14e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a152:	dc 01       	movw	r26, r24
    a154:	cb 01       	movw	r24, r22
    a156:	f8 01       	movw	r30, r16
    a158:	91 83       	std	Z+1, r25	; 0x01
    a15a:	80 83       	st	Z, r24
    a15c:	ce 01       	movw	r24, r28
    a15e:	8d 54       	subi	r24, 0x4D	; 77
    a160:	9e 4f       	sbci	r25, 0xFE	; 254
    a162:	9e 01       	movw	r18, r28
    a164:	21 55       	subi	r18, 0x51	; 81
    a166:	3e 4f       	sbci	r19, 0xFE	; 254
    a168:	f9 01       	movw	r30, r18
    a16a:	20 81       	ld	r18, Z
    a16c:	31 81       	ldd	r19, Z+1	; 0x01
    a16e:	fc 01       	movw	r30, r24
    a170:	31 83       	std	Z+1, r19	; 0x01
    a172:	20 83       	st	Z, r18
    a174:	ce 01       	movw	r24, r28
    a176:	8d 54       	subi	r24, 0x4D	; 77
    a178:	9e 4f       	sbci	r25, 0xFE	; 254
    a17a:	fc 01       	movw	r30, r24
    a17c:	80 81       	ld	r24, Z
    a17e:	91 81       	ldd	r25, Z+1	; 0x01
    a180:	8c 01       	movw	r16, r24
    a182:	c8 01       	movw	r24, r16
    a184:	01 97       	sbiw	r24, 0x01	; 1
    a186:	f1 f7       	brne	.-4      	; 0xa184 <pick_drop+0x3272>
    a188:	8c 01       	movw	r16, r24
    a18a:	ce 01       	movw	r24, r28
    a18c:	8d 54       	subi	r24, 0x4D	; 77
    a18e:	9e 4f       	sbci	r25, 0xFE	; 254
    a190:	fc 01       	movw	r30, r24
    a192:	11 83       	std	Z+1, r17	; 0x01
    a194:	00 83       	st	Z, r16
		_delay_ms(20);
		forward_mm(20);
    a196:	84 e1       	ldi	r24, 0x14	; 20
    a198:	90 e0       	ldi	r25, 0x00	; 0
    a19a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a19e:	9e 01       	movw	r18, r28
    a1a0:	2b 54       	subi	r18, 0x4B	; 75
    a1a2:	3e 4f       	sbci	r19, 0xFE	; 254
    a1a4:	80 e0       	ldi	r24, 0x00	; 0
    a1a6:	90 e0       	ldi	r25, 0x00	; 0
    a1a8:	a0 ea       	ldi	r26, 0xA0	; 160
    a1aa:	b1 e4       	ldi	r27, 0x41	; 65
    a1ac:	f9 01       	movw	r30, r18
    a1ae:	80 83       	st	Z, r24
    a1b0:	91 83       	std	Z+1, r25	; 0x01
    a1b2:	a2 83       	std	Z+2, r26	; 0x02
    a1b4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a1b6:	8e 01       	movw	r16, r28
    a1b8:	07 54       	subi	r16, 0x47	; 71
    a1ba:	1e 4f       	sbci	r17, 0xFE	; 254
    a1bc:	ce 01       	movw	r24, r28
    a1be:	8b 54       	subi	r24, 0x4B	; 75
    a1c0:	9e 4f       	sbci	r25, 0xFE	; 254
    a1c2:	fc 01       	movw	r30, r24
    a1c4:	60 81       	ld	r22, Z
    a1c6:	71 81       	ldd	r23, Z+1	; 0x01
    a1c8:	82 81       	ldd	r24, Z+2	; 0x02
    a1ca:	93 81       	ldd	r25, Z+3	; 0x03
    a1cc:	26 e6       	ldi	r18, 0x66	; 102
    a1ce:	36 e6       	ldi	r19, 0x66	; 102
    a1d0:	46 e6       	ldi	r20, 0x66	; 102
    a1d2:	55 e4       	ldi	r21, 0x45	; 69
    a1d4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a1d8:	dc 01       	movw	r26, r24
    a1da:	cb 01       	movw	r24, r22
    a1dc:	f8 01       	movw	r30, r16
    a1de:	80 83       	st	Z, r24
    a1e0:	91 83       	std	Z+1, r25	; 0x01
    a1e2:	a2 83       	std	Z+2, r26	; 0x02
    a1e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a1e6:	ce 01       	movw	r24, r28
    a1e8:	87 54       	subi	r24, 0x47	; 71
    a1ea:	9e 4f       	sbci	r25, 0xFE	; 254
    a1ec:	11 e0       	ldi	r17, 0x01	; 1
    a1ee:	fc 01       	movw	r30, r24
    a1f0:	60 81       	ld	r22, Z
    a1f2:	71 81       	ldd	r23, Z+1	; 0x01
    a1f4:	82 81       	ldd	r24, Z+2	; 0x02
    a1f6:	93 81       	ldd	r25, Z+3	; 0x03
    a1f8:	20 e0       	ldi	r18, 0x00	; 0
    a1fa:	30 e0       	ldi	r19, 0x00	; 0
    a1fc:	40 e8       	ldi	r20, 0x80	; 128
    a1fe:	5f e3       	ldi	r21, 0x3F	; 63
    a200:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    a204:	88 23       	and	r24, r24
    a206:	0c f0       	brlt	.+2      	; 0xa20a <pick_drop+0x32f8>
    a208:	10 e0       	ldi	r17, 0x00	; 0
    a20a:	11 23       	and	r17, r17
    a20c:	49 f0       	breq	.+18     	; 0xa220 <pick_drop+0x330e>
		__ticks = 1;
    a20e:	ce 01       	movw	r24, r28
    a210:	83 54       	subi	r24, 0x43	; 67
    a212:	9e 4f       	sbci	r25, 0xFE	; 254
    a214:	21 e0       	ldi	r18, 0x01	; 1
    a216:	30 e0       	ldi	r19, 0x00	; 0
    a218:	fc 01       	movw	r30, r24
    a21a:	31 83       	std	Z+1, r19	; 0x01
    a21c:	20 83       	st	Z, r18
    a21e:	75 c0       	rjmp	.+234    	; 0xa30a <pick_drop+0x33f8>
	else if (__tmp > 65535)
    a220:	ce 01       	movw	r24, r28
    a222:	87 54       	subi	r24, 0x47	; 71
    a224:	9e 4f       	sbci	r25, 0xFE	; 254
    a226:	11 e0       	ldi	r17, 0x01	; 1
    a228:	fc 01       	movw	r30, r24
    a22a:	60 81       	ld	r22, Z
    a22c:	71 81       	ldd	r23, Z+1	; 0x01
    a22e:	82 81       	ldd	r24, Z+2	; 0x02
    a230:	93 81       	ldd	r25, Z+3	; 0x03
    a232:	20 e0       	ldi	r18, 0x00	; 0
    a234:	3f ef       	ldi	r19, 0xFF	; 255
    a236:	4f e7       	ldi	r20, 0x7F	; 127
    a238:	57 e4       	ldi	r21, 0x47	; 71
    a23a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    a23e:	18 16       	cp	r1, r24
    a240:	0c f0       	brlt	.+2      	; 0xa244 <pick_drop+0x3332>
    a242:	10 e0       	ldi	r17, 0x00	; 0
    a244:	11 23       	and	r17, r17
    a246:	09 f4       	brne	.+2      	; 0xa24a <pick_drop+0x3338>
    a248:	4e c0       	rjmp	.+156    	; 0xa2e6 <pick_drop+0x33d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a24a:	ce 01       	movw	r24, r28
    a24c:	8b 54       	subi	r24, 0x4B	; 75
    a24e:	9e 4f       	sbci	r25, 0xFE	; 254
    a250:	fc 01       	movw	r30, r24
    a252:	60 81       	ld	r22, Z
    a254:	71 81       	ldd	r23, Z+1	; 0x01
    a256:	82 81       	ldd	r24, Z+2	; 0x02
    a258:	93 81       	ldd	r25, Z+3	; 0x03
    a25a:	20 e0       	ldi	r18, 0x00	; 0
    a25c:	30 e0       	ldi	r19, 0x00	; 0
    a25e:	40 e2       	ldi	r20, 0x20	; 32
    a260:	51 e4       	ldi	r21, 0x41	; 65
    a262:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a266:	dc 01       	movw	r26, r24
    a268:	cb 01       	movw	r24, r22
    a26a:	8e 01       	movw	r16, r28
    a26c:	03 54       	subi	r16, 0x43	; 67
    a26e:	1e 4f       	sbci	r17, 0xFE	; 254
    a270:	bc 01       	movw	r22, r24
    a272:	cd 01       	movw	r24, r26
    a274:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a278:	dc 01       	movw	r26, r24
    a27a:	cb 01       	movw	r24, r22
    a27c:	f8 01       	movw	r30, r16
    a27e:	91 83       	std	Z+1, r25	; 0x01
    a280:	80 83       	st	Z, r24
    a282:	27 c0       	rjmp	.+78     	; 0xa2d2 <pick_drop+0x33c0>
    a284:	ce 01       	movw	r24, r28
    a286:	81 54       	subi	r24, 0x41	; 65
    a288:	9e 4f       	sbci	r25, 0xFE	; 254
    a28a:	20 e7       	ldi	r18, 0x70	; 112
    a28c:	31 e0       	ldi	r19, 0x01	; 1
    a28e:	fc 01       	movw	r30, r24
    a290:	31 83       	std	Z+1, r19	; 0x01
    a292:	20 83       	st	Z, r18
    a294:	ce 01       	movw	r24, r28
    a296:	81 54       	subi	r24, 0x41	; 65
    a298:	9e 4f       	sbci	r25, 0xFE	; 254
    a29a:	fc 01       	movw	r30, r24
    a29c:	80 81       	ld	r24, Z
    a29e:	91 81       	ldd	r25, Z+1	; 0x01
    a2a0:	8c 01       	movw	r16, r24
    a2a2:	c8 01       	movw	r24, r16
    a2a4:	01 97       	sbiw	r24, 0x01	; 1
    a2a6:	f1 f7       	brne	.-4      	; 0xa2a4 <pick_drop+0x3392>
    a2a8:	8c 01       	movw	r16, r24
    a2aa:	ce 01       	movw	r24, r28
    a2ac:	81 54       	subi	r24, 0x41	; 65
    a2ae:	9e 4f       	sbci	r25, 0xFE	; 254
    a2b0:	fc 01       	movw	r30, r24
    a2b2:	11 83       	std	Z+1, r17	; 0x01
    a2b4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a2b6:	ce 01       	movw	r24, r28
    a2b8:	83 54       	subi	r24, 0x43	; 67
    a2ba:	9e 4f       	sbci	r25, 0xFE	; 254
    a2bc:	9e 01       	movw	r18, r28
    a2be:	23 54       	subi	r18, 0x43	; 67
    a2c0:	3e 4f       	sbci	r19, 0xFE	; 254
    a2c2:	f9 01       	movw	r30, r18
    a2c4:	20 81       	ld	r18, Z
    a2c6:	31 81       	ldd	r19, Z+1	; 0x01
    a2c8:	21 50       	subi	r18, 0x01	; 1
    a2ca:	30 40       	sbci	r19, 0x00	; 0
    a2cc:	fc 01       	movw	r30, r24
    a2ce:	31 83       	std	Z+1, r19	; 0x01
    a2d0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a2d2:	ce 01       	movw	r24, r28
    a2d4:	83 54       	subi	r24, 0x43	; 67
    a2d6:	9e 4f       	sbci	r25, 0xFE	; 254
    a2d8:	fc 01       	movw	r30, r24
    a2da:	80 81       	ld	r24, Z
    a2dc:	91 81       	ldd	r25, Z+1	; 0x01
    a2de:	00 97       	sbiw	r24, 0x00	; 0
    a2e0:	89 f6       	brne	.-94     	; 0xa284 <pick_drop+0x3372>
    a2e2:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a2e6:	8e 01       	movw	r16, r28
    a2e8:	03 54       	subi	r16, 0x43	; 67
    a2ea:	1e 4f       	sbci	r17, 0xFE	; 254
    a2ec:	ce 01       	movw	r24, r28
    a2ee:	87 54       	subi	r24, 0x47	; 71
    a2f0:	9e 4f       	sbci	r25, 0xFE	; 254
    a2f2:	fc 01       	movw	r30, r24
    a2f4:	60 81       	ld	r22, Z
    a2f6:	71 81       	ldd	r23, Z+1	; 0x01
    a2f8:	82 81       	ldd	r24, Z+2	; 0x02
    a2fa:	93 81       	ldd	r25, Z+3	; 0x03
    a2fc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a300:	dc 01       	movw	r26, r24
    a302:	cb 01       	movw	r24, r22
    a304:	f8 01       	movw	r30, r16
    a306:	91 83       	std	Z+1, r25	; 0x01
    a308:	80 83       	st	Z, r24
    a30a:	ce 01       	movw	r24, r28
    a30c:	8f 53       	subi	r24, 0x3F	; 63
    a30e:	9e 4f       	sbci	r25, 0xFE	; 254
    a310:	9e 01       	movw	r18, r28
    a312:	23 54       	subi	r18, 0x43	; 67
    a314:	3e 4f       	sbci	r19, 0xFE	; 254
    a316:	f9 01       	movw	r30, r18
    a318:	20 81       	ld	r18, Z
    a31a:	31 81       	ldd	r19, Z+1	; 0x01
    a31c:	fc 01       	movw	r30, r24
    a31e:	31 83       	std	Z+1, r19	; 0x01
    a320:	20 83       	st	Z, r18
    a322:	ce 01       	movw	r24, r28
    a324:	8f 53       	subi	r24, 0x3F	; 63
    a326:	9e 4f       	sbci	r25, 0xFE	; 254
    a328:	fc 01       	movw	r30, r24
    a32a:	80 81       	ld	r24, Z
    a32c:	91 81       	ldd	r25, Z+1	; 0x01
    a32e:	8c 01       	movw	r16, r24
    a330:	c8 01       	movw	r24, r16
    a332:	01 97       	sbiw	r24, 0x01	; 1
    a334:	f1 f7       	brne	.-4      	; 0xa332 <pick_drop+0x3420>
    a336:	8c 01       	movw	r16, r24
    a338:	ce 01       	movw	r24, r28
    a33a:	8f 53       	subi	r24, 0x3F	; 63
    a33c:	9e 4f       	sbci	r25, 0xFE	; 254
    a33e:	fc 01       	movw	r30, r24
    a340:	11 83       	std	Z+1, r17	; 0x01
    a342:	00 83       	st	Z, r16
    a344:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
		_delay_ms(20);
	}
	else if(pd=='4')
    a348:	ce 01       	movw	r24, r28
    a34a:	89 59       	subi	r24, 0x99	; 153
    a34c:	9c 4f       	sbci	r25, 0xFC	; 252
    a34e:	fc 01       	movw	r30, r24
    a350:	80 81       	ld	r24, Z
    a352:	84 33       	cpi	r24, 0x34	; 52
    a354:	09 f0       	breq	.+2      	; 0xa358 <pick_drop+0x3446>
    a356:	6e c3       	rjmp	.+1756   	; 0xaa34 <pick_drop+0x3b22>
	{	// first node
		if(master_path[node-1]=='N'){
    a358:	80 91 71 03 	lds	r24, 0x0371
    a35c:	90 91 72 03 	lds	r25, 0x0372
    a360:	01 97       	sbiw	r24, 0x01	; 1
    a362:	8b 58       	subi	r24, 0x8B	; 139
    a364:	9c 4f       	sbci	r25, 0xFC	; 252
    a366:	fc 01       	movw	r30, r24
    a368:	80 81       	ld	r24, Z
    a36a:	8e 34       	cpi	r24, 0x4E	; 78
    a36c:	11 f0       	breq	.+4      	; 0xa372 <pick_drop+0x3460>
    a36e:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
		forward_mm(35);
    a372:	83 e2       	ldi	r24, 0x23	; 35
    a374:	90 e0       	ldi	r25, 0x00	; 0
    a376:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		spl_left();
    a37a:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
		back_mm(50);
    a37e:	82 e3       	ldi	r24, 0x32	; 50
    a380:	90 e0       	ldi	r25, 0x00	; 0
    a382:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    a386:	9e 01       	movw	r18, r28
    a388:	2d 53       	subi	r18, 0x3D	; 61
    a38a:	3e 4f       	sbci	r19, 0xFE	; 254
    a38c:	80 e0       	ldi	r24, 0x00	; 0
    a38e:	90 e0       	ldi	r25, 0x00	; 0
    a390:	a0 ea       	ldi	r26, 0xA0	; 160
    a392:	b1 e4       	ldi	r27, 0x41	; 65
    a394:	f9 01       	movw	r30, r18
    a396:	80 83       	st	Z, r24
    a398:	91 83       	std	Z+1, r25	; 0x01
    a39a:	a2 83       	std	Z+2, r26	; 0x02
    a39c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a39e:	8e 01       	movw	r16, r28
    a3a0:	09 53       	subi	r16, 0x39	; 57
    a3a2:	1e 4f       	sbci	r17, 0xFE	; 254
    a3a4:	ce 01       	movw	r24, r28
    a3a6:	8d 53       	subi	r24, 0x3D	; 61
    a3a8:	9e 4f       	sbci	r25, 0xFE	; 254
    a3aa:	fc 01       	movw	r30, r24
    a3ac:	60 81       	ld	r22, Z
    a3ae:	71 81       	ldd	r23, Z+1	; 0x01
    a3b0:	82 81       	ldd	r24, Z+2	; 0x02
    a3b2:	93 81       	ldd	r25, Z+3	; 0x03
    a3b4:	26 e6       	ldi	r18, 0x66	; 102
    a3b6:	36 e6       	ldi	r19, 0x66	; 102
    a3b8:	46 e6       	ldi	r20, 0x66	; 102
    a3ba:	55 e4       	ldi	r21, 0x45	; 69
    a3bc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a3c0:	dc 01       	movw	r26, r24
    a3c2:	cb 01       	movw	r24, r22
    a3c4:	f8 01       	movw	r30, r16
    a3c6:	80 83       	st	Z, r24
    a3c8:	91 83       	std	Z+1, r25	; 0x01
    a3ca:	a2 83       	std	Z+2, r26	; 0x02
    a3cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a3ce:	ce 01       	movw	r24, r28
    a3d0:	89 53       	subi	r24, 0x39	; 57
    a3d2:	9e 4f       	sbci	r25, 0xFE	; 254
    a3d4:	11 e0       	ldi	r17, 0x01	; 1
    a3d6:	fc 01       	movw	r30, r24
    a3d8:	60 81       	ld	r22, Z
    a3da:	71 81       	ldd	r23, Z+1	; 0x01
    a3dc:	82 81       	ldd	r24, Z+2	; 0x02
    a3de:	93 81       	ldd	r25, Z+3	; 0x03
    a3e0:	20 e0       	ldi	r18, 0x00	; 0
    a3e2:	30 e0       	ldi	r19, 0x00	; 0
    a3e4:	40 e8       	ldi	r20, 0x80	; 128
    a3e6:	5f e3       	ldi	r21, 0x3F	; 63
    a3e8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    a3ec:	88 23       	and	r24, r24
    a3ee:	0c f0       	brlt	.+2      	; 0xa3f2 <pick_drop+0x34e0>
    a3f0:	10 e0       	ldi	r17, 0x00	; 0
    a3f2:	11 23       	and	r17, r17
    a3f4:	49 f0       	breq	.+18     	; 0xa408 <pick_drop+0x34f6>
		__ticks = 1;
    a3f6:	ce 01       	movw	r24, r28
    a3f8:	85 53       	subi	r24, 0x35	; 53
    a3fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a3fc:	21 e0       	ldi	r18, 0x01	; 1
    a3fe:	30 e0       	ldi	r19, 0x00	; 0
    a400:	fc 01       	movw	r30, r24
    a402:	31 83       	std	Z+1, r19	; 0x01
    a404:	20 83       	st	Z, r18
    a406:	74 c0       	rjmp	.+232    	; 0xa4f0 <pick_drop+0x35de>
	else if (__tmp > 65535)
    a408:	ce 01       	movw	r24, r28
    a40a:	89 53       	subi	r24, 0x39	; 57
    a40c:	9e 4f       	sbci	r25, 0xFE	; 254
    a40e:	11 e0       	ldi	r17, 0x01	; 1
    a410:	fc 01       	movw	r30, r24
    a412:	60 81       	ld	r22, Z
    a414:	71 81       	ldd	r23, Z+1	; 0x01
    a416:	82 81       	ldd	r24, Z+2	; 0x02
    a418:	93 81       	ldd	r25, Z+3	; 0x03
    a41a:	20 e0       	ldi	r18, 0x00	; 0
    a41c:	3f ef       	ldi	r19, 0xFF	; 255
    a41e:	4f e7       	ldi	r20, 0x7F	; 127
    a420:	57 e4       	ldi	r21, 0x47	; 71
    a422:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    a426:	18 16       	cp	r1, r24
    a428:	0c f0       	brlt	.+2      	; 0xa42c <pick_drop+0x351a>
    a42a:	10 e0       	ldi	r17, 0x00	; 0
    a42c:	11 23       	and	r17, r17
    a42e:	09 f4       	brne	.+2      	; 0xa432 <pick_drop+0x3520>
    a430:	4d c0       	rjmp	.+154    	; 0xa4cc <pick_drop+0x35ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a432:	ce 01       	movw	r24, r28
    a434:	8d 53       	subi	r24, 0x3D	; 61
    a436:	9e 4f       	sbci	r25, 0xFE	; 254
    a438:	fc 01       	movw	r30, r24
    a43a:	60 81       	ld	r22, Z
    a43c:	71 81       	ldd	r23, Z+1	; 0x01
    a43e:	82 81       	ldd	r24, Z+2	; 0x02
    a440:	93 81       	ldd	r25, Z+3	; 0x03
    a442:	20 e0       	ldi	r18, 0x00	; 0
    a444:	30 e0       	ldi	r19, 0x00	; 0
    a446:	40 e2       	ldi	r20, 0x20	; 32
    a448:	51 e4       	ldi	r21, 0x41	; 65
    a44a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a44e:	dc 01       	movw	r26, r24
    a450:	cb 01       	movw	r24, r22
    a452:	8e 01       	movw	r16, r28
    a454:	05 53       	subi	r16, 0x35	; 53
    a456:	1e 4f       	sbci	r17, 0xFE	; 254
    a458:	bc 01       	movw	r22, r24
    a45a:	cd 01       	movw	r24, r26
    a45c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a460:	dc 01       	movw	r26, r24
    a462:	cb 01       	movw	r24, r22
    a464:	f8 01       	movw	r30, r16
    a466:	91 83       	std	Z+1, r25	; 0x01
    a468:	80 83       	st	Z, r24
    a46a:	27 c0       	rjmp	.+78     	; 0xa4ba <pick_drop+0x35a8>
    a46c:	ce 01       	movw	r24, r28
    a46e:	83 53       	subi	r24, 0x33	; 51
    a470:	9e 4f       	sbci	r25, 0xFE	; 254
    a472:	20 e7       	ldi	r18, 0x70	; 112
    a474:	31 e0       	ldi	r19, 0x01	; 1
    a476:	fc 01       	movw	r30, r24
    a478:	31 83       	std	Z+1, r19	; 0x01
    a47a:	20 83       	st	Z, r18
    a47c:	ce 01       	movw	r24, r28
    a47e:	83 53       	subi	r24, 0x33	; 51
    a480:	9e 4f       	sbci	r25, 0xFE	; 254
    a482:	fc 01       	movw	r30, r24
    a484:	80 81       	ld	r24, Z
    a486:	91 81       	ldd	r25, Z+1	; 0x01
    a488:	8c 01       	movw	r16, r24
    a48a:	c8 01       	movw	r24, r16
    a48c:	01 97       	sbiw	r24, 0x01	; 1
    a48e:	f1 f7       	brne	.-4      	; 0xa48c <pick_drop+0x357a>
    a490:	8c 01       	movw	r16, r24
    a492:	ce 01       	movw	r24, r28
    a494:	83 53       	subi	r24, 0x33	; 51
    a496:	9e 4f       	sbci	r25, 0xFE	; 254
    a498:	fc 01       	movw	r30, r24
    a49a:	11 83       	std	Z+1, r17	; 0x01
    a49c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a49e:	ce 01       	movw	r24, r28
    a4a0:	85 53       	subi	r24, 0x35	; 53
    a4a2:	9e 4f       	sbci	r25, 0xFE	; 254
    a4a4:	9e 01       	movw	r18, r28
    a4a6:	25 53       	subi	r18, 0x35	; 53
    a4a8:	3e 4f       	sbci	r19, 0xFE	; 254
    a4aa:	f9 01       	movw	r30, r18
    a4ac:	20 81       	ld	r18, Z
    a4ae:	31 81       	ldd	r19, Z+1	; 0x01
    a4b0:	21 50       	subi	r18, 0x01	; 1
    a4b2:	30 40       	sbci	r19, 0x00	; 0
    a4b4:	fc 01       	movw	r30, r24
    a4b6:	31 83       	std	Z+1, r19	; 0x01
    a4b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a4ba:	ce 01       	movw	r24, r28
    a4bc:	85 53       	subi	r24, 0x35	; 53
    a4be:	9e 4f       	sbci	r25, 0xFE	; 254
    a4c0:	fc 01       	movw	r30, r24
    a4c2:	80 81       	ld	r24, Z
    a4c4:	91 81       	ldd	r25, Z+1	; 0x01
    a4c6:	00 97       	sbiw	r24, 0x00	; 0
    a4c8:	89 f6       	brne	.-94     	; 0xa46c <pick_drop+0x355a>
    a4ca:	2f c0       	rjmp	.+94     	; 0xa52a <pick_drop+0x3618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a4cc:	8e 01       	movw	r16, r28
    a4ce:	05 53       	subi	r16, 0x35	; 53
    a4d0:	1e 4f       	sbci	r17, 0xFE	; 254
    a4d2:	ce 01       	movw	r24, r28
    a4d4:	89 53       	subi	r24, 0x39	; 57
    a4d6:	9e 4f       	sbci	r25, 0xFE	; 254
    a4d8:	fc 01       	movw	r30, r24
    a4da:	60 81       	ld	r22, Z
    a4dc:	71 81       	ldd	r23, Z+1	; 0x01
    a4de:	82 81       	ldd	r24, Z+2	; 0x02
    a4e0:	93 81       	ldd	r25, Z+3	; 0x03
    a4e2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a4e6:	dc 01       	movw	r26, r24
    a4e8:	cb 01       	movw	r24, r22
    a4ea:	f8 01       	movw	r30, r16
    a4ec:	91 83       	std	Z+1, r25	; 0x01
    a4ee:	80 83       	st	Z, r24
    a4f0:	ce 01       	movw	r24, r28
    a4f2:	81 53       	subi	r24, 0x31	; 49
    a4f4:	9e 4f       	sbci	r25, 0xFE	; 254
    a4f6:	9e 01       	movw	r18, r28
    a4f8:	25 53       	subi	r18, 0x35	; 53
    a4fa:	3e 4f       	sbci	r19, 0xFE	; 254
    a4fc:	f9 01       	movw	r30, r18
    a4fe:	20 81       	ld	r18, Z
    a500:	31 81       	ldd	r19, Z+1	; 0x01
    a502:	fc 01       	movw	r30, r24
    a504:	31 83       	std	Z+1, r19	; 0x01
    a506:	20 83       	st	Z, r18
    a508:	ce 01       	movw	r24, r28
    a50a:	81 53       	subi	r24, 0x31	; 49
    a50c:	9e 4f       	sbci	r25, 0xFE	; 254
    a50e:	fc 01       	movw	r30, r24
    a510:	80 81       	ld	r24, Z
    a512:	91 81       	ldd	r25, Z+1	; 0x01
    a514:	8c 01       	movw	r16, r24
    a516:	c8 01       	movw	r24, r16
    a518:	01 97       	sbiw	r24, 0x01	; 1
    a51a:	f1 f7       	brne	.-4      	; 0xa518 <pick_drop+0x3606>
    a51c:	8c 01       	movw	r16, r24
    a51e:	ce 01       	movw	r24, r28
    a520:	81 53       	subi	r24, 0x31	; 49
    a522:	9e 4f       	sbci	r25, 0xFE	; 254
    a524:	fc 01       	movw	r30, r24
    a526:	11 83       	std	Z+1, r17	; 0x01
    a528:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    a52a:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
		forward_mm(50);
    a52e:	82 e3       	ldi	r24, 0x32	; 50
    a530:	90 e0       	ldi	r25, 0x00	; 0
    a532:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a536:	9e 01       	movw	r18, r28
    a538:	2f 52       	subi	r18, 0x2F	; 47
    a53a:	3e 4f       	sbci	r19, 0xFE	; 254
    a53c:	80 e0       	ldi	r24, 0x00	; 0
    a53e:	90 e0       	ldi	r25, 0x00	; 0
    a540:	a0 ea       	ldi	r26, 0xA0	; 160
    a542:	b1 e4       	ldi	r27, 0x41	; 65
    a544:	f9 01       	movw	r30, r18
    a546:	80 83       	st	Z, r24
    a548:	91 83       	std	Z+1, r25	; 0x01
    a54a:	a2 83       	std	Z+2, r26	; 0x02
    a54c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a54e:	8e 01       	movw	r16, r28
    a550:	0b 52       	subi	r16, 0x2B	; 43
    a552:	1e 4f       	sbci	r17, 0xFE	; 254
    a554:	ce 01       	movw	r24, r28
    a556:	8f 52       	subi	r24, 0x2F	; 47
    a558:	9e 4f       	sbci	r25, 0xFE	; 254
    a55a:	fc 01       	movw	r30, r24
    a55c:	60 81       	ld	r22, Z
    a55e:	71 81       	ldd	r23, Z+1	; 0x01
    a560:	82 81       	ldd	r24, Z+2	; 0x02
    a562:	93 81       	ldd	r25, Z+3	; 0x03
    a564:	26 e6       	ldi	r18, 0x66	; 102
    a566:	36 e6       	ldi	r19, 0x66	; 102
    a568:	46 e6       	ldi	r20, 0x66	; 102
    a56a:	55 e4       	ldi	r21, 0x45	; 69
    a56c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a570:	dc 01       	movw	r26, r24
    a572:	cb 01       	movw	r24, r22
    a574:	f8 01       	movw	r30, r16
    a576:	80 83       	st	Z, r24
    a578:	91 83       	std	Z+1, r25	; 0x01
    a57a:	a2 83       	std	Z+2, r26	; 0x02
    a57c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a57e:	ce 01       	movw	r24, r28
    a580:	8b 52       	subi	r24, 0x2B	; 43
    a582:	9e 4f       	sbci	r25, 0xFE	; 254
    a584:	11 e0       	ldi	r17, 0x01	; 1
    a586:	fc 01       	movw	r30, r24
    a588:	60 81       	ld	r22, Z
    a58a:	71 81       	ldd	r23, Z+1	; 0x01
    a58c:	82 81       	ldd	r24, Z+2	; 0x02
    a58e:	93 81       	ldd	r25, Z+3	; 0x03
    a590:	20 e0       	ldi	r18, 0x00	; 0
    a592:	30 e0       	ldi	r19, 0x00	; 0
    a594:	40 e8       	ldi	r20, 0x80	; 128
    a596:	5f e3       	ldi	r21, 0x3F	; 63
    a598:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    a59c:	88 23       	and	r24, r24
    a59e:	0c f0       	brlt	.+2      	; 0xa5a2 <pick_drop+0x3690>
    a5a0:	10 e0       	ldi	r17, 0x00	; 0
    a5a2:	11 23       	and	r17, r17
    a5a4:	49 f0       	breq	.+18     	; 0xa5b8 <pick_drop+0x36a6>
		__ticks = 1;
    a5a6:	ce 01       	movw	r24, r28
    a5a8:	87 52       	subi	r24, 0x27	; 39
    a5aa:	9e 4f       	sbci	r25, 0xFE	; 254
    a5ac:	21 e0       	ldi	r18, 0x01	; 1
    a5ae:	30 e0       	ldi	r19, 0x00	; 0
    a5b0:	fc 01       	movw	r30, r24
    a5b2:	31 83       	std	Z+1, r19	; 0x01
    a5b4:	20 83       	st	Z, r18
    a5b6:	74 c0       	rjmp	.+232    	; 0xa6a0 <pick_drop+0x378e>
	else if (__tmp > 65535)
    a5b8:	ce 01       	movw	r24, r28
    a5ba:	8b 52       	subi	r24, 0x2B	; 43
    a5bc:	9e 4f       	sbci	r25, 0xFE	; 254
    a5be:	11 e0       	ldi	r17, 0x01	; 1
    a5c0:	fc 01       	movw	r30, r24
    a5c2:	60 81       	ld	r22, Z
    a5c4:	71 81       	ldd	r23, Z+1	; 0x01
    a5c6:	82 81       	ldd	r24, Z+2	; 0x02
    a5c8:	93 81       	ldd	r25, Z+3	; 0x03
    a5ca:	20 e0       	ldi	r18, 0x00	; 0
    a5cc:	3f ef       	ldi	r19, 0xFF	; 255
    a5ce:	4f e7       	ldi	r20, 0x7F	; 127
    a5d0:	57 e4       	ldi	r21, 0x47	; 71
    a5d2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    a5d6:	18 16       	cp	r1, r24
    a5d8:	0c f0       	brlt	.+2      	; 0xa5dc <pick_drop+0x36ca>
    a5da:	10 e0       	ldi	r17, 0x00	; 0
    a5dc:	11 23       	and	r17, r17
    a5de:	09 f4       	brne	.+2      	; 0xa5e2 <pick_drop+0x36d0>
    a5e0:	4d c0       	rjmp	.+154    	; 0xa67c <pick_drop+0x376a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a5e2:	ce 01       	movw	r24, r28
    a5e4:	8f 52       	subi	r24, 0x2F	; 47
    a5e6:	9e 4f       	sbci	r25, 0xFE	; 254
    a5e8:	fc 01       	movw	r30, r24
    a5ea:	60 81       	ld	r22, Z
    a5ec:	71 81       	ldd	r23, Z+1	; 0x01
    a5ee:	82 81       	ldd	r24, Z+2	; 0x02
    a5f0:	93 81       	ldd	r25, Z+3	; 0x03
    a5f2:	20 e0       	ldi	r18, 0x00	; 0
    a5f4:	30 e0       	ldi	r19, 0x00	; 0
    a5f6:	40 e2       	ldi	r20, 0x20	; 32
    a5f8:	51 e4       	ldi	r21, 0x41	; 65
    a5fa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a5fe:	dc 01       	movw	r26, r24
    a600:	cb 01       	movw	r24, r22
    a602:	8e 01       	movw	r16, r28
    a604:	07 52       	subi	r16, 0x27	; 39
    a606:	1e 4f       	sbci	r17, 0xFE	; 254
    a608:	bc 01       	movw	r22, r24
    a60a:	cd 01       	movw	r24, r26
    a60c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a610:	dc 01       	movw	r26, r24
    a612:	cb 01       	movw	r24, r22
    a614:	f8 01       	movw	r30, r16
    a616:	91 83       	std	Z+1, r25	; 0x01
    a618:	80 83       	st	Z, r24
    a61a:	27 c0       	rjmp	.+78     	; 0xa66a <pick_drop+0x3758>
    a61c:	ce 01       	movw	r24, r28
    a61e:	85 52       	subi	r24, 0x25	; 37
    a620:	9e 4f       	sbci	r25, 0xFE	; 254
    a622:	20 e7       	ldi	r18, 0x70	; 112
    a624:	31 e0       	ldi	r19, 0x01	; 1
    a626:	fc 01       	movw	r30, r24
    a628:	31 83       	std	Z+1, r19	; 0x01
    a62a:	20 83       	st	Z, r18
    a62c:	ce 01       	movw	r24, r28
    a62e:	85 52       	subi	r24, 0x25	; 37
    a630:	9e 4f       	sbci	r25, 0xFE	; 254
    a632:	fc 01       	movw	r30, r24
    a634:	80 81       	ld	r24, Z
    a636:	91 81       	ldd	r25, Z+1	; 0x01
    a638:	8c 01       	movw	r16, r24
    a63a:	c8 01       	movw	r24, r16
    a63c:	01 97       	sbiw	r24, 0x01	; 1
    a63e:	f1 f7       	brne	.-4      	; 0xa63c <pick_drop+0x372a>
    a640:	8c 01       	movw	r16, r24
    a642:	ce 01       	movw	r24, r28
    a644:	85 52       	subi	r24, 0x25	; 37
    a646:	9e 4f       	sbci	r25, 0xFE	; 254
    a648:	fc 01       	movw	r30, r24
    a64a:	11 83       	std	Z+1, r17	; 0x01
    a64c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a64e:	ce 01       	movw	r24, r28
    a650:	87 52       	subi	r24, 0x27	; 39
    a652:	9e 4f       	sbci	r25, 0xFE	; 254
    a654:	9e 01       	movw	r18, r28
    a656:	27 52       	subi	r18, 0x27	; 39
    a658:	3e 4f       	sbci	r19, 0xFE	; 254
    a65a:	f9 01       	movw	r30, r18
    a65c:	20 81       	ld	r18, Z
    a65e:	31 81       	ldd	r19, Z+1	; 0x01
    a660:	21 50       	subi	r18, 0x01	; 1
    a662:	30 40       	sbci	r19, 0x00	; 0
    a664:	fc 01       	movw	r30, r24
    a666:	31 83       	std	Z+1, r19	; 0x01
    a668:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a66a:	ce 01       	movw	r24, r28
    a66c:	87 52       	subi	r24, 0x27	; 39
    a66e:	9e 4f       	sbci	r25, 0xFE	; 254
    a670:	fc 01       	movw	r30, r24
    a672:	80 81       	ld	r24, Z
    a674:	91 81       	ldd	r25, Z+1	; 0x01
    a676:	00 97       	sbiw	r24, 0x00	; 0
    a678:	89 f6       	brne	.-94     	; 0xa61c <pick_drop+0x370a>
    a67a:	2f c0       	rjmp	.+94     	; 0xa6da <pick_drop+0x37c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a67c:	8e 01       	movw	r16, r28
    a67e:	07 52       	subi	r16, 0x27	; 39
    a680:	1e 4f       	sbci	r17, 0xFE	; 254
    a682:	ce 01       	movw	r24, r28
    a684:	8b 52       	subi	r24, 0x2B	; 43
    a686:	9e 4f       	sbci	r25, 0xFE	; 254
    a688:	fc 01       	movw	r30, r24
    a68a:	60 81       	ld	r22, Z
    a68c:	71 81       	ldd	r23, Z+1	; 0x01
    a68e:	82 81       	ldd	r24, Z+2	; 0x02
    a690:	93 81       	ldd	r25, Z+3	; 0x03
    a692:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a696:	dc 01       	movw	r26, r24
    a698:	cb 01       	movw	r24, r22
    a69a:	f8 01       	movw	r30, r16
    a69c:	91 83       	std	Z+1, r25	; 0x01
    a69e:	80 83       	st	Z, r24
    a6a0:	ce 01       	movw	r24, r28
    a6a2:	83 52       	subi	r24, 0x23	; 35
    a6a4:	9e 4f       	sbci	r25, 0xFE	; 254
    a6a6:	9e 01       	movw	r18, r28
    a6a8:	27 52       	subi	r18, 0x27	; 39
    a6aa:	3e 4f       	sbci	r19, 0xFE	; 254
    a6ac:	f9 01       	movw	r30, r18
    a6ae:	20 81       	ld	r18, Z
    a6b0:	31 81       	ldd	r19, Z+1	; 0x01
    a6b2:	fc 01       	movw	r30, r24
    a6b4:	31 83       	std	Z+1, r19	; 0x01
    a6b6:	20 83       	st	Z, r18
    a6b8:	ce 01       	movw	r24, r28
    a6ba:	83 52       	subi	r24, 0x23	; 35
    a6bc:	9e 4f       	sbci	r25, 0xFE	; 254
    a6be:	fc 01       	movw	r30, r24
    a6c0:	80 81       	ld	r24, Z
    a6c2:	91 81       	ldd	r25, Z+1	; 0x01
    a6c4:	8c 01       	movw	r16, r24
    a6c6:	c8 01       	movw	r24, r16
    a6c8:	01 97       	sbiw	r24, 0x01	; 1
    a6ca:	f1 f7       	brne	.-4      	; 0xa6c8 <pick_drop+0x37b6>
    a6cc:	8c 01       	movw	r16, r24
    a6ce:	ce 01       	movw	r24, r28
    a6d0:	83 52       	subi	r24, 0x23	; 35
    a6d2:	9e 4f       	sbci	r25, 0xFE	; 254
    a6d4:	fc 01       	movw	r30, r24
    a6d6:	11 83       	std	Z+1, r17	; 0x01
    a6d8:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_right();
    a6da:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
    a6de:	9e 01       	movw	r18, r28
    a6e0:	21 52       	subi	r18, 0x21	; 33
    a6e2:	3e 4f       	sbci	r19, 0xFE	; 254
    a6e4:	80 e0       	ldi	r24, 0x00	; 0
    a6e6:	90 e0       	ldi	r25, 0x00	; 0
    a6e8:	a0 ea       	ldi	r26, 0xA0	; 160
    a6ea:	b1 e4       	ldi	r27, 0x41	; 65
    a6ec:	f9 01       	movw	r30, r18
    a6ee:	80 83       	st	Z, r24
    a6f0:	91 83       	std	Z+1, r25	; 0x01
    a6f2:	a2 83       	std	Z+2, r26	; 0x02
    a6f4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a6f6:	8e 01       	movw	r16, r28
    a6f8:	0d 51       	subi	r16, 0x1D	; 29
    a6fa:	1e 4f       	sbci	r17, 0xFE	; 254
    a6fc:	ce 01       	movw	r24, r28
    a6fe:	81 52       	subi	r24, 0x21	; 33
    a700:	9e 4f       	sbci	r25, 0xFE	; 254
    a702:	fc 01       	movw	r30, r24
    a704:	60 81       	ld	r22, Z
    a706:	71 81       	ldd	r23, Z+1	; 0x01
    a708:	82 81       	ldd	r24, Z+2	; 0x02
    a70a:	93 81       	ldd	r25, Z+3	; 0x03
    a70c:	26 e6       	ldi	r18, 0x66	; 102
    a70e:	36 e6       	ldi	r19, 0x66	; 102
    a710:	46 e6       	ldi	r20, 0x66	; 102
    a712:	55 e4       	ldi	r21, 0x45	; 69
    a714:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a718:	dc 01       	movw	r26, r24
    a71a:	cb 01       	movw	r24, r22
    a71c:	f8 01       	movw	r30, r16
    a71e:	80 83       	st	Z, r24
    a720:	91 83       	std	Z+1, r25	; 0x01
    a722:	a2 83       	std	Z+2, r26	; 0x02
    a724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a726:	ce 01       	movw	r24, r28
    a728:	8d 51       	subi	r24, 0x1D	; 29
    a72a:	9e 4f       	sbci	r25, 0xFE	; 254
    a72c:	11 e0       	ldi	r17, 0x01	; 1
    a72e:	fc 01       	movw	r30, r24
    a730:	60 81       	ld	r22, Z
    a732:	71 81       	ldd	r23, Z+1	; 0x01
    a734:	82 81       	ldd	r24, Z+2	; 0x02
    a736:	93 81       	ldd	r25, Z+3	; 0x03
    a738:	20 e0       	ldi	r18, 0x00	; 0
    a73a:	30 e0       	ldi	r19, 0x00	; 0
    a73c:	40 e8       	ldi	r20, 0x80	; 128
    a73e:	5f e3       	ldi	r21, 0x3F	; 63
    a740:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    a744:	88 23       	and	r24, r24
    a746:	0c f0       	brlt	.+2      	; 0xa74a <pick_drop+0x3838>
    a748:	10 e0       	ldi	r17, 0x00	; 0
    a74a:	11 23       	and	r17, r17
    a74c:	49 f0       	breq	.+18     	; 0xa760 <pick_drop+0x384e>
		__ticks = 1;
    a74e:	ce 01       	movw	r24, r28
    a750:	89 51       	subi	r24, 0x19	; 25
    a752:	9e 4f       	sbci	r25, 0xFE	; 254
    a754:	21 e0       	ldi	r18, 0x01	; 1
    a756:	30 e0       	ldi	r19, 0x00	; 0
    a758:	fc 01       	movw	r30, r24
    a75a:	31 83       	std	Z+1, r19	; 0x01
    a75c:	20 83       	st	Z, r18
    a75e:	74 c0       	rjmp	.+232    	; 0xa848 <pick_drop+0x3936>
	else if (__tmp > 65535)
    a760:	ce 01       	movw	r24, r28
    a762:	8d 51       	subi	r24, 0x1D	; 29
    a764:	9e 4f       	sbci	r25, 0xFE	; 254
    a766:	11 e0       	ldi	r17, 0x01	; 1
    a768:	fc 01       	movw	r30, r24
    a76a:	60 81       	ld	r22, Z
    a76c:	71 81       	ldd	r23, Z+1	; 0x01
    a76e:	82 81       	ldd	r24, Z+2	; 0x02
    a770:	93 81       	ldd	r25, Z+3	; 0x03
    a772:	20 e0       	ldi	r18, 0x00	; 0
    a774:	3f ef       	ldi	r19, 0xFF	; 255
    a776:	4f e7       	ldi	r20, 0x7F	; 127
    a778:	57 e4       	ldi	r21, 0x47	; 71
    a77a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    a77e:	18 16       	cp	r1, r24
    a780:	0c f0       	brlt	.+2      	; 0xa784 <pick_drop+0x3872>
    a782:	10 e0       	ldi	r17, 0x00	; 0
    a784:	11 23       	and	r17, r17
    a786:	09 f4       	brne	.+2      	; 0xa78a <pick_drop+0x3878>
    a788:	4d c0       	rjmp	.+154    	; 0xa824 <pick_drop+0x3912>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a78a:	ce 01       	movw	r24, r28
    a78c:	81 52       	subi	r24, 0x21	; 33
    a78e:	9e 4f       	sbci	r25, 0xFE	; 254
    a790:	fc 01       	movw	r30, r24
    a792:	60 81       	ld	r22, Z
    a794:	71 81       	ldd	r23, Z+1	; 0x01
    a796:	82 81       	ldd	r24, Z+2	; 0x02
    a798:	93 81       	ldd	r25, Z+3	; 0x03
    a79a:	20 e0       	ldi	r18, 0x00	; 0
    a79c:	30 e0       	ldi	r19, 0x00	; 0
    a79e:	40 e2       	ldi	r20, 0x20	; 32
    a7a0:	51 e4       	ldi	r21, 0x41	; 65
    a7a2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a7a6:	dc 01       	movw	r26, r24
    a7a8:	cb 01       	movw	r24, r22
    a7aa:	8e 01       	movw	r16, r28
    a7ac:	09 51       	subi	r16, 0x19	; 25
    a7ae:	1e 4f       	sbci	r17, 0xFE	; 254
    a7b0:	bc 01       	movw	r22, r24
    a7b2:	cd 01       	movw	r24, r26
    a7b4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a7b8:	dc 01       	movw	r26, r24
    a7ba:	cb 01       	movw	r24, r22
    a7bc:	f8 01       	movw	r30, r16
    a7be:	91 83       	std	Z+1, r25	; 0x01
    a7c0:	80 83       	st	Z, r24
    a7c2:	27 c0       	rjmp	.+78     	; 0xa812 <pick_drop+0x3900>
    a7c4:	ce 01       	movw	r24, r28
    a7c6:	87 51       	subi	r24, 0x17	; 23
    a7c8:	9e 4f       	sbci	r25, 0xFE	; 254
    a7ca:	20 e7       	ldi	r18, 0x70	; 112
    a7cc:	31 e0       	ldi	r19, 0x01	; 1
    a7ce:	fc 01       	movw	r30, r24
    a7d0:	31 83       	std	Z+1, r19	; 0x01
    a7d2:	20 83       	st	Z, r18
    a7d4:	ce 01       	movw	r24, r28
    a7d6:	87 51       	subi	r24, 0x17	; 23
    a7d8:	9e 4f       	sbci	r25, 0xFE	; 254
    a7da:	fc 01       	movw	r30, r24
    a7dc:	80 81       	ld	r24, Z
    a7de:	91 81       	ldd	r25, Z+1	; 0x01
    a7e0:	8c 01       	movw	r16, r24
    a7e2:	c8 01       	movw	r24, r16
    a7e4:	01 97       	sbiw	r24, 0x01	; 1
    a7e6:	f1 f7       	brne	.-4      	; 0xa7e4 <pick_drop+0x38d2>
    a7e8:	8c 01       	movw	r16, r24
    a7ea:	ce 01       	movw	r24, r28
    a7ec:	87 51       	subi	r24, 0x17	; 23
    a7ee:	9e 4f       	sbci	r25, 0xFE	; 254
    a7f0:	fc 01       	movw	r30, r24
    a7f2:	11 83       	std	Z+1, r17	; 0x01
    a7f4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7f6:	ce 01       	movw	r24, r28
    a7f8:	89 51       	subi	r24, 0x19	; 25
    a7fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a7fc:	9e 01       	movw	r18, r28
    a7fe:	29 51       	subi	r18, 0x19	; 25
    a800:	3e 4f       	sbci	r19, 0xFE	; 254
    a802:	f9 01       	movw	r30, r18
    a804:	20 81       	ld	r18, Z
    a806:	31 81       	ldd	r19, Z+1	; 0x01
    a808:	21 50       	subi	r18, 0x01	; 1
    a80a:	30 40       	sbci	r19, 0x00	; 0
    a80c:	fc 01       	movw	r30, r24
    a80e:	31 83       	std	Z+1, r19	; 0x01
    a810:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a812:	ce 01       	movw	r24, r28
    a814:	89 51       	subi	r24, 0x19	; 25
    a816:	9e 4f       	sbci	r25, 0xFE	; 254
    a818:	fc 01       	movw	r30, r24
    a81a:	80 81       	ld	r24, Z
    a81c:	91 81       	ldd	r25, Z+1	; 0x01
    a81e:	00 97       	sbiw	r24, 0x00	; 0
    a820:	89 f6       	brne	.-94     	; 0xa7c4 <pick_drop+0x38b2>
    a822:	2f c0       	rjmp	.+94     	; 0xa882 <pick_drop+0x3970>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a824:	8e 01       	movw	r16, r28
    a826:	09 51       	subi	r16, 0x19	; 25
    a828:	1e 4f       	sbci	r17, 0xFE	; 254
    a82a:	ce 01       	movw	r24, r28
    a82c:	8d 51       	subi	r24, 0x1D	; 29
    a82e:	9e 4f       	sbci	r25, 0xFE	; 254
    a830:	fc 01       	movw	r30, r24
    a832:	60 81       	ld	r22, Z
    a834:	71 81       	ldd	r23, Z+1	; 0x01
    a836:	82 81       	ldd	r24, Z+2	; 0x02
    a838:	93 81       	ldd	r25, Z+3	; 0x03
    a83a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a83e:	dc 01       	movw	r26, r24
    a840:	cb 01       	movw	r24, r22
    a842:	f8 01       	movw	r30, r16
    a844:	91 83       	std	Z+1, r25	; 0x01
    a846:	80 83       	st	Z, r24
    a848:	ce 01       	movw	r24, r28
    a84a:	85 51       	subi	r24, 0x15	; 21
    a84c:	9e 4f       	sbci	r25, 0xFE	; 254
    a84e:	9e 01       	movw	r18, r28
    a850:	29 51       	subi	r18, 0x19	; 25
    a852:	3e 4f       	sbci	r19, 0xFE	; 254
    a854:	f9 01       	movw	r30, r18
    a856:	20 81       	ld	r18, Z
    a858:	31 81       	ldd	r19, Z+1	; 0x01
    a85a:	fc 01       	movw	r30, r24
    a85c:	31 83       	std	Z+1, r19	; 0x01
    a85e:	20 83       	st	Z, r18
    a860:	ce 01       	movw	r24, r28
    a862:	85 51       	subi	r24, 0x15	; 21
    a864:	9e 4f       	sbci	r25, 0xFE	; 254
    a866:	fc 01       	movw	r30, r24
    a868:	80 81       	ld	r24, Z
    a86a:	91 81       	ldd	r25, Z+1	; 0x01
    a86c:	8c 01       	movw	r16, r24
    a86e:	c8 01       	movw	r24, r16
    a870:	01 97       	sbiw	r24, 0x01	; 1
    a872:	f1 f7       	brne	.-4      	; 0xa870 <pick_drop+0x395e>
    a874:	8c 01       	movw	r16, r24
    a876:	ce 01       	movw	r24, r28
    a878:	85 51       	subi	r24, 0x15	; 21
    a87a:	9e 4f       	sbci	r25, 0xFE	; 254
    a87c:	fc 01       	movw	r30, r24
    a87e:	11 83       	std	Z+1, r17	; 0x01
    a880:	00 83       	st	Z, r16
		_delay_ms(20);
		back_mm(25);
    a882:	89 e1       	ldi	r24, 0x19	; 25
    a884:	90 e0       	ldi	r25, 0x00	; 0
    a886:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    a88a:	9e 01       	movw	r18, r28
    a88c:	23 51       	subi	r18, 0x13	; 19
    a88e:	3e 4f       	sbci	r19, 0xFE	; 254
    a890:	80 e0       	ldi	r24, 0x00	; 0
    a892:	90 e0       	ldi	r25, 0x00	; 0
    a894:	a6 e9       	ldi	r26, 0x96	; 150
    a896:	b3 e4       	ldi	r27, 0x43	; 67
    a898:	f9 01       	movw	r30, r18
    a89a:	80 83       	st	Z, r24
    a89c:	91 83       	std	Z+1, r25	; 0x01
    a89e:	a2 83       	std	Z+2, r26	; 0x02
    a8a0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a8a2:	8e 01       	movw	r16, r28
    a8a4:	0f 50       	subi	r16, 0x0F	; 15
    a8a6:	1e 4f       	sbci	r17, 0xFE	; 254
    a8a8:	ce 01       	movw	r24, r28
    a8aa:	83 51       	subi	r24, 0x13	; 19
    a8ac:	9e 4f       	sbci	r25, 0xFE	; 254
    a8ae:	fc 01       	movw	r30, r24
    a8b0:	60 81       	ld	r22, Z
    a8b2:	71 81       	ldd	r23, Z+1	; 0x01
    a8b4:	82 81       	ldd	r24, Z+2	; 0x02
    a8b6:	93 81       	ldd	r25, Z+3	; 0x03
    a8b8:	26 e6       	ldi	r18, 0x66	; 102
    a8ba:	36 e6       	ldi	r19, 0x66	; 102
    a8bc:	46 e6       	ldi	r20, 0x66	; 102
    a8be:	55 e4       	ldi	r21, 0x45	; 69
    a8c0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a8c4:	dc 01       	movw	r26, r24
    a8c6:	cb 01       	movw	r24, r22
    a8c8:	f8 01       	movw	r30, r16
    a8ca:	80 83       	st	Z, r24
    a8cc:	91 83       	std	Z+1, r25	; 0x01
    a8ce:	a2 83       	std	Z+2, r26	; 0x02
    a8d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a8d2:	ce 01       	movw	r24, r28
    a8d4:	8f 50       	subi	r24, 0x0F	; 15
    a8d6:	9e 4f       	sbci	r25, 0xFE	; 254
    a8d8:	11 e0       	ldi	r17, 0x01	; 1
    a8da:	fc 01       	movw	r30, r24
    a8dc:	60 81       	ld	r22, Z
    a8de:	71 81       	ldd	r23, Z+1	; 0x01
    a8e0:	82 81       	ldd	r24, Z+2	; 0x02
    a8e2:	93 81       	ldd	r25, Z+3	; 0x03
    a8e4:	20 e0       	ldi	r18, 0x00	; 0
    a8e6:	30 e0       	ldi	r19, 0x00	; 0
    a8e8:	40 e8       	ldi	r20, 0x80	; 128
    a8ea:	5f e3       	ldi	r21, 0x3F	; 63
    a8ec:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    a8f0:	88 23       	and	r24, r24
    a8f2:	0c f0       	brlt	.+2      	; 0xa8f6 <pick_drop+0x39e4>
    a8f4:	10 e0       	ldi	r17, 0x00	; 0
    a8f6:	11 23       	and	r17, r17
    a8f8:	49 f0       	breq	.+18     	; 0xa90c <pick_drop+0x39fa>
		__ticks = 1;
    a8fa:	ce 01       	movw	r24, r28
    a8fc:	8b 50       	subi	r24, 0x0B	; 11
    a8fe:	9e 4f       	sbci	r25, 0xFE	; 254
    a900:	21 e0       	ldi	r18, 0x01	; 1
    a902:	30 e0       	ldi	r19, 0x00	; 0
    a904:	fc 01       	movw	r30, r24
    a906:	31 83       	std	Z+1, r19	; 0x01
    a908:	20 83       	st	Z, r18
    a90a:	75 c0       	rjmp	.+234    	; 0xa9f6 <pick_drop+0x3ae4>
	else if (__tmp > 65535)
    a90c:	ce 01       	movw	r24, r28
    a90e:	8f 50       	subi	r24, 0x0F	; 15
    a910:	9e 4f       	sbci	r25, 0xFE	; 254
    a912:	11 e0       	ldi	r17, 0x01	; 1
    a914:	fc 01       	movw	r30, r24
    a916:	60 81       	ld	r22, Z
    a918:	71 81       	ldd	r23, Z+1	; 0x01
    a91a:	82 81       	ldd	r24, Z+2	; 0x02
    a91c:	93 81       	ldd	r25, Z+3	; 0x03
    a91e:	20 e0       	ldi	r18, 0x00	; 0
    a920:	3f ef       	ldi	r19, 0xFF	; 255
    a922:	4f e7       	ldi	r20, 0x7F	; 127
    a924:	57 e4       	ldi	r21, 0x47	; 71
    a926:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    a92a:	18 16       	cp	r1, r24
    a92c:	0c f0       	brlt	.+2      	; 0xa930 <pick_drop+0x3a1e>
    a92e:	10 e0       	ldi	r17, 0x00	; 0
    a930:	11 23       	and	r17, r17
    a932:	09 f4       	brne	.+2      	; 0xa936 <pick_drop+0x3a24>
    a934:	4e c0       	rjmp	.+156    	; 0xa9d2 <pick_drop+0x3ac0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a936:	ce 01       	movw	r24, r28
    a938:	83 51       	subi	r24, 0x13	; 19
    a93a:	9e 4f       	sbci	r25, 0xFE	; 254
    a93c:	fc 01       	movw	r30, r24
    a93e:	60 81       	ld	r22, Z
    a940:	71 81       	ldd	r23, Z+1	; 0x01
    a942:	82 81       	ldd	r24, Z+2	; 0x02
    a944:	93 81       	ldd	r25, Z+3	; 0x03
    a946:	20 e0       	ldi	r18, 0x00	; 0
    a948:	30 e0       	ldi	r19, 0x00	; 0
    a94a:	40 e2       	ldi	r20, 0x20	; 32
    a94c:	51 e4       	ldi	r21, 0x41	; 65
    a94e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    a952:	dc 01       	movw	r26, r24
    a954:	cb 01       	movw	r24, r22
    a956:	8e 01       	movw	r16, r28
    a958:	0b 50       	subi	r16, 0x0B	; 11
    a95a:	1e 4f       	sbci	r17, 0xFE	; 254
    a95c:	bc 01       	movw	r22, r24
    a95e:	cd 01       	movw	r24, r26
    a960:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a964:	dc 01       	movw	r26, r24
    a966:	cb 01       	movw	r24, r22
    a968:	f8 01       	movw	r30, r16
    a96a:	91 83       	std	Z+1, r25	; 0x01
    a96c:	80 83       	st	Z, r24
    a96e:	27 c0       	rjmp	.+78     	; 0xa9be <pick_drop+0x3aac>
    a970:	ce 01       	movw	r24, r28
    a972:	89 50       	subi	r24, 0x09	; 9
    a974:	9e 4f       	sbci	r25, 0xFE	; 254
    a976:	20 e7       	ldi	r18, 0x70	; 112
    a978:	31 e0       	ldi	r19, 0x01	; 1
    a97a:	fc 01       	movw	r30, r24
    a97c:	31 83       	std	Z+1, r19	; 0x01
    a97e:	20 83       	st	Z, r18
    a980:	ce 01       	movw	r24, r28
    a982:	89 50       	subi	r24, 0x09	; 9
    a984:	9e 4f       	sbci	r25, 0xFE	; 254
    a986:	fc 01       	movw	r30, r24
    a988:	80 81       	ld	r24, Z
    a98a:	91 81       	ldd	r25, Z+1	; 0x01
    a98c:	8c 01       	movw	r16, r24
    a98e:	c8 01       	movw	r24, r16
    a990:	01 97       	sbiw	r24, 0x01	; 1
    a992:	f1 f7       	brne	.-4      	; 0xa990 <pick_drop+0x3a7e>
    a994:	8c 01       	movw	r16, r24
    a996:	ce 01       	movw	r24, r28
    a998:	89 50       	subi	r24, 0x09	; 9
    a99a:	9e 4f       	sbci	r25, 0xFE	; 254
    a99c:	fc 01       	movw	r30, r24
    a99e:	11 83       	std	Z+1, r17	; 0x01
    a9a0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a9a2:	ce 01       	movw	r24, r28
    a9a4:	8b 50       	subi	r24, 0x0B	; 11
    a9a6:	9e 4f       	sbci	r25, 0xFE	; 254
    a9a8:	9e 01       	movw	r18, r28
    a9aa:	2b 50       	subi	r18, 0x0B	; 11
    a9ac:	3e 4f       	sbci	r19, 0xFE	; 254
    a9ae:	f9 01       	movw	r30, r18
    a9b0:	20 81       	ld	r18, Z
    a9b2:	31 81       	ldd	r19, Z+1	; 0x01
    a9b4:	21 50       	subi	r18, 0x01	; 1
    a9b6:	30 40       	sbci	r19, 0x00	; 0
    a9b8:	fc 01       	movw	r30, r24
    a9ba:	31 83       	std	Z+1, r19	; 0x01
    a9bc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a9be:	ce 01       	movw	r24, r28
    a9c0:	8b 50       	subi	r24, 0x0B	; 11
    a9c2:	9e 4f       	sbci	r25, 0xFE	; 254
    a9c4:	fc 01       	movw	r30, r24
    a9c6:	80 81       	ld	r24, Z
    a9c8:	91 81       	ldd	r25, Z+1	; 0x01
    a9ca:	00 97       	sbiw	r24, 0x00	; 0
    a9cc:	89 f6       	brne	.-94     	; 0xa970 <pick_drop+0x3a5e>
    a9ce:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a9d2:	8e 01       	movw	r16, r28
    a9d4:	0b 50       	subi	r16, 0x0B	; 11
    a9d6:	1e 4f       	sbci	r17, 0xFE	; 254
    a9d8:	ce 01       	movw	r24, r28
    a9da:	8f 50       	subi	r24, 0x0F	; 15
    a9dc:	9e 4f       	sbci	r25, 0xFE	; 254
    a9de:	fc 01       	movw	r30, r24
    a9e0:	60 81       	ld	r22, Z
    a9e2:	71 81       	ldd	r23, Z+1	; 0x01
    a9e4:	82 81       	ldd	r24, Z+2	; 0x02
    a9e6:	93 81       	ldd	r25, Z+3	; 0x03
    a9e8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    a9ec:	dc 01       	movw	r26, r24
    a9ee:	cb 01       	movw	r24, r22
    a9f0:	f8 01       	movw	r30, r16
    a9f2:	91 83       	std	Z+1, r25	; 0x01
    a9f4:	80 83       	st	Z, r24
    a9f6:	ce 01       	movw	r24, r28
    a9f8:	87 50       	subi	r24, 0x07	; 7
    a9fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a9fc:	9e 01       	movw	r18, r28
    a9fe:	2b 50       	subi	r18, 0x0B	; 11
    aa00:	3e 4f       	sbci	r19, 0xFE	; 254
    aa02:	f9 01       	movw	r30, r18
    aa04:	20 81       	ld	r18, Z
    aa06:	31 81       	ldd	r19, Z+1	; 0x01
    aa08:	fc 01       	movw	r30, r24
    aa0a:	31 83       	std	Z+1, r19	; 0x01
    aa0c:	20 83       	st	Z, r18
    aa0e:	ce 01       	movw	r24, r28
    aa10:	87 50       	subi	r24, 0x07	; 7
    aa12:	9e 4f       	sbci	r25, 0xFE	; 254
    aa14:	fc 01       	movw	r30, r24
    aa16:	80 81       	ld	r24, Z
    aa18:	91 81       	ldd	r25, Z+1	; 0x01
    aa1a:	8c 01       	movw	r16, r24
    aa1c:	c8 01       	movw	r24, r16
    aa1e:	01 97       	sbiw	r24, 0x01	; 1
    aa20:	f1 f7       	brne	.-4      	; 0xaa1e <pick_drop+0x3b0c>
    aa22:	8c 01       	movw	r16, r24
    aa24:	ce 01       	movw	r24, r28
    aa26:	87 50       	subi	r24, 0x07	; 7
    aa28:	9e 4f       	sbci	r25, 0xFE	; 254
    aa2a:	fc 01       	movw	r30, r24
    aa2c:	11 83       	std	Z+1, r17	; 0x01
    aa2e:	00 83       	st	Z, r16
    aa30:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
		_delay_ms(300);
		}		
	}
	else if(pd=='5')//F1
    aa34:	ce 01       	movw	r24, r28
    aa36:	89 59       	subi	r24, 0x99	; 153
    aa38:	9c 4f       	sbci	r25, 0xFC	; 252
    aa3a:	fc 01       	movw	r30, r24
    aa3c:	80 81       	ld	r24, Z
    aa3e:	85 33       	cpi	r24, 0x35	; 53
    aa40:	11 f0       	breq	.+4      	; 0xaa46 <pick_drop+0x3b34>
    aa42:	0c 94 63 5e 	jmp	0xbcc6	; 0xbcc6 <pick_drop+0x4db4>
	{// 1X6 
			if(master_path[node-1]=='U')
    aa46:	80 91 71 03 	lds	r24, 0x0371
    aa4a:	90 91 72 03 	lds	r25, 0x0372
    aa4e:	01 97       	sbiw	r24, 0x01	; 1
    aa50:	8b 58       	subi	r24, 0x8B	; 139
    aa52:	9c 4f       	sbci	r25, 0xFC	; 252
    aa54:	fc 01       	movw	r30, r24
    aa56:	80 81       	ld	r24, Z
    aa58:	85 35       	cpi	r24, 0x55	; 85
    aa5a:	09 f0       	breq	.+2      	; 0xaa5e <pick_drop+0x3b4c>
    aa5c:	30 c4       	rjmp	.+2144   	; 0xb2be <pick_drop+0x43ac>
			{
			back_mm(20);
    aa5e:	84 e1       	ldi	r24, 0x14	; 20
    aa60:	90 e0       	ldi	r25, 0x00	; 0
    aa62:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    aa66:	9e 01       	movw	r18, r28
    aa68:	25 50       	subi	r18, 0x05	; 5
    aa6a:	3e 4f       	sbci	r19, 0xFE	; 254
    aa6c:	80 e0       	ldi	r24, 0x00	; 0
    aa6e:	90 e0       	ldi	r25, 0x00	; 0
    aa70:	a0 ea       	ldi	r26, 0xA0	; 160
    aa72:	b1 e4       	ldi	r27, 0x41	; 65
    aa74:	f9 01       	movw	r30, r18
    aa76:	80 83       	st	Z, r24
    aa78:	91 83       	std	Z+1, r25	; 0x01
    aa7a:	a2 83       	std	Z+2, r26	; 0x02
    aa7c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    aa7e:	8e 01       	movw	r16, r28
    aa80:	01 50       	subi	r16, 0x01	; 1
    aa82:	1e 4f       	sbci	r17, 0xFE	; 254
    aa84:	ce 01       	movw	r24, r28
    aa86:	85 50       	subi	r24, 0x05	; 5
    aa88:	9e 4f       	sbci	r25, 0xFE	; 254
    aa8a:	fc 01       	movw	r30, r24
    aa8c:	60 81       	ld	r22, Z
    aa8e:	71 81       	ldd	r23, Z+1	; 0x01
    aa90:	82 81       	ldd	r24, Z+2	; 0x02
    aa92:	93 81       	ldd	r25, Z+3	; 0x03
    aa94:	26 e6       	ldi	r18, 0x66	; 102
    aa96:	36 e6       	ldi	r19, 0x66	; 102
    aa98:	46 e6       	ldi	r20, 0x66	; 102
    aa9a:	55 e4       	ldi	r21, 0x45	; 69
    aa9c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    aaa0:	dc 01       	movw	r26, r24
    aaa2:	cb 01       	movw	r24, r22
    aaa4:	f8 01       	movw	r30, r16
    aaa6:	80 83       	st	Z, r24
    aaa8:	91 83       	std	Z+1, r25	; 0x01
    aaaa:	a2 83       	std	Z+2, r26	; 0x02
    aaac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    aaae:	ce 01       	movw	r24, r28
    aab0:	81 50       	subi	r24, 0x01	; 1
    aab2:	9e 4f       	sbci	r25, 0xFE	; 254
    aab4:	11 e0       	ldi	r17, 0x01	; 1
    aab6:	fc 01       	movw	r30, r24
    aab8:	60 81       	ld	r22, Z
    aaba:	71 81       	ldd	r23, Z+1	; 0x01
    aabc:	82 81       	ldd	r24, Z+2	; 0x02
    aabe:	93 81       	ldd	r25, Z+3	; 0x03
    aac0:	20 e0       	ldi	r18, 0x00	; 0
    aac2:	30 e0       	ldi	r19, 0x00	; 0
    aac4:	40 e8       	ldi	r20, 0x80	; 128
    aac6:	5f e3       	ldi	r21, 0x3F	; 63
    aac8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    aacc:	88 23       	and	r24, r24
    aace:	0c f0       	brlt	.+2      	; 0xaad2 <pick_drop+0x3bc0>
    aad0:	10 e0       	ldi	r17, 0x00	; 0
    aad2:	11 23       	and	r17, r17
    aad4:	49 f0       	breq	.+18     	; 0xaae8 <pick_drop+0x3bd6>
		__ticks = 1;
    aad6:	ce 01       	movw	r24, r28
    aad8:	8d 5f       	subi	r24, 0xFD	; 253
    aada:	9d 4f       	sbci	r25, 0xFD	; 253
    aadc:	21 e0       	ldi	r18, 0x01	; 1
    aade:	30 e0       	ldi	r19, 0x00	; 0
    aae0:	fc 01       	movw	r30, r24
    aae2:	31 83       	std	Z+1, r19	; 0x01
    aae4:	20 83       	st	Z, r18
    aae6:	74 c0       	rjmp	.+232    	; 0xabd0 <pick_drop+0x3cbe>
	else if (__tmp > 65535)
    aae8:	ce 01       	movw	r24, r28
    aaea:	81 50       	subi	r24, 0x01	; 1
    aaec:	9e 4f       	sbci	r25, 0xFE	; 254
    aaee:	11 e0       	ldi	r17, 0x01	; 1
    aaf0:	fc 01       	movw	r30, r24
    aaf2:	60 81       	ld	r22, Z
    aaf4:	71 81       	ldd	r23, Z+1	; 0x01
    aaf6:	82 81       	ldd	r24, Z+2	; 0x02
    aaf8:	93 81       	ldd	r25, Z+3	; 0x03
    aafa:	20 e0       	ldi	r18, 0x00	; 0
    aafc:	3f ef       	ldi	r19, 0xFF	; 255
    aafe:	4f e7       	ldi	r20, 0x7F	; 127
    ab00:	57 e4       	ldi	r21, 0x47	; 71
    ab02:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ab06:	18 16       	cp	r1, r24
    ab08:	0c f0       	brlt	.+2      	; 0xab0c <pick_drop+0x3bfa>
    ab0a:	10 e0       	ldi	r17, 0x00	; 0
    ab0c:	11 23       	and	r17, r17
    ab0e:	09 f4       	brne	.+2      	; 0xab12 <pick_drop+0x3c00>
    ab10:	4d c0       	rjmp	.+154    	; 0xabac <pick_drop+0x3c9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ab12:	ce 01       	movw	r24, r28
    ab14:	85 50       	subi	r24, 0x05	; 5
    ab16:	9e 4f       	sbci	r25, 0xFE	; 254
    ab18:	fc 01       	movw	r30, r24
    ab1a:	60 81       	ld	r22, Z
    ab1c:	71 81       	ldd	r23, Z+1	; 0x01
    ab1e:	82 81       	ldd	r24, Z+2	; 0x02
    ab20:	93 81       	ldd	r25, Z+3	; 0x03
    ab22:	20 e0       	ldi	r18, 0x00	; 0
    ab24:	30 e0       	ldi	r19, 0x00	; 0
    ab26:	40 e2       	ldi	r20, 0x20	; 32
    ab28:	51 e4       	ldi	r21, 0x41	; 65
    ab2a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ab2e:	dc 01       	movw	r26, r24
    ab30:	cb 01       	movw	r24, r22
    ab32:	8e 01       	movw	r16, r28
    ab34:	0d 5f       	subi	r16, 0xFD	; 253
    ab36:	1d 4f       	sbci	r17, 0xFD	; 253
    ab38:	bc 01       	movw	r22, r24
    ab3a:	cd 01       	movw	r24, r26
    ab3c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ab40:	dc 01       	movw	r26, r24
    ab42:	cb 01       	movw	r24, r22
    ab44:	f8 01       	movw	r30, r16
    ab46:	91 83       	std	Z+1, r25	; 0x01
    ab48:	80 83       	st	Z, r24
    ab4a:	27 c0       	rjmp	.+78     	; 0xab9a <pick_drop+0x3c88>
    ab4c:	ce 01       	movw	r24, r28
    ab4e:	8b 5f       	subi	r24, 0xFB	; 251
    ab50:	9d 4f       	sbci	r25, 0xFD	; 253
    ab52:	20 e7       	ldi	r18, 0x70	; 112
    ab54:	31 e0       	ldi	r19, 0x01	; 1
    ab56:	fc 01       	movw	r30, r24
    ab58:	31 83       	std	Z+1, r19	; 0x01
    ab5a:	20 83       	st	Z, r18
    ab5c:	ce 01       	movw	r24, r28
    ab5e:	8b 5f       	subi	r24, 0xFB	; 251
    ab60:	9d 4f       	sbci	r25, 0xFD	; 253
    ab62:	fc 01       	movw	r30, r24
    ab64:	80 81       	ld	r24, Z
    ab66:	91 81       	ldd	r25, Z+1	; 0x01
    ab68:	8c 01       	movw	r16, r24
    ab6a:	c8 01       	movw	r24, r16
    ab6c:	01 97       	sbiw	r24, 0x01	; 1
    ab6e:	f1 f7       	brne	.-4      	; 0xab6c <pick_drop+0x3c5a>
    ab70:	8c 01       	movw	r16, r24
    ab72:	ce 01       	movw	r24, r28
    ab74:	8b 5f       	subi	r24, 0xFB	; 251
    ab76:	9d 4f       	sbci	r25, 0xFD	; 253
    ab78:	fc 01       	movw	r30, r24
    ab7a:	11 83       	std	Z+1, r17	; 0x01
    ab7c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ab7e:	ce 01       	movw	r24, r28
    ab80:	8d 5f       	subi	r24, 0xFD	; 253
    ab82:	9d 4f       	sbci	r25, 0xFD	; 253
    ab84:	9e 01       	movw	r18, r28
    ab86:	2d 5f       	subi	r18, 0xFD	; 253
    ab88:	3d 4f       	sbci	r19, 0xFD	; 253
    ab8a:	f9 01       	movw	r30, r18
    ab8c:	20 81       	ld	r18, Z
    ab8e:	31 81       	ldd	r19, Z+1	; 0x01
    ab90:	21 50       	subi	r18, 0x01	; 1
    ab92:	30 40       	sbci	r19, 0x00	; 0
    ab94:	fc 01       	movw	r30, r24
    ab96:	31 83       	std	Z+1, r19	; 0x01
    ab98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab9a:	ce 01       	movw	r24, r28
    ab9c:	8d 5f       	subi	r24, 0xFD	; 253
    ab9e:	9d 4f       	sbci	r25, 0xFD	; 253
    aba0:	fc 01       	movw	r30, r24
    aba2:	80 81       	ld	r24, Z
    aba4:	91 81       	ldd	r25, Z+1	; 0x01
    aba6:	00 97       	sbiw	r24, 0x00	; 0
    aba8:	89 f6       	brne	.-94     	; 0xab4c <pick_drop+0x3c3a>
    abaa:	2f c0       	rjmp	.+94     	; 0xac0a <pick_drop+0x3cf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    abac:	8e 01       	movw	r16, r28
    abae:	0d 5f       	subi	r16, 0xFD	; 253
    abb0:	1d 4f       	sbci	r17, 0xFD	; 253
    abb2:	ce 01       	movw	r24, r28
    abb4:	81 50       	subi	r24, 0x01	; 1
    abb6:	9e 4f       	sbci	r25, 0xFE	; 254
    abb8:	fc 01       	movw	r30, r24
    abba:	60 81       	ld	r22, Z
    abbc:	71 81       	ldd	r23, Z+1	; 0x01
    abbe:	82 81       	ldd	r24, Z+2	; 0x02
    abc0:	93 81       	ldd	r25, Z+3	; 0x03
    abc2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    abc6:	dc 01       	movw	r26, r24
    abc8:	cb 01       	movw	r24, r22
    abca:	f8 01       	movw	r30, r16
    abcc:	91 83       	std	Z+1, r25	; 0x01
    abce:	80 83       	st	Z, r24
    abd0:	ce 01       	movw	r24, r28
    abd2:	89 5f       	subi	r24, 0xF9	; 249
    abd4:	9d 4f       	sbci	r25, 0xFD	; 253
    abd6:	9e 01       	movw	r18, r28
    abd8:	2d 5f       	subi	r18, 0xFD	; 253
    abda:	3d 4f       	sbci	r19, 0xFD	; 253
    abdc:	f9 01       	movw	r30, r18
    abde:	20 81       	ld	r18, Z
    abe0:	31 81       	ldd	r19, Z+1	; 0x01
    abe2:	fc 01       	movw	r30, r24
    abe4:	31 83       	std	Z+1, r19	; 0x01
    abe6:	20 83       	st	Z, r18
    abe8:	ce 01       	movw	r24, r28
    abea:	89 5f       	subi	r24, 0xF9	; 249
    abec:	9d 4f       	sbci	r25, 0xFD	; 253
    abee:	fc 01       	movw	r30, r24
    abf0:	80 81       	ld	r24, Z
    abf2:	91 81       	ldd	r25, Z+1	; 0x01
    abf4:	8c 01       	movw	r16, r24
    abf6:	c8 01       	movw	r24, r16
    abf8:	01 97       	sbiw	r24, 0x01	; 1
    abfa:	f1 f7       	brne	.-4      	; 0xabf8 <pick_drop+0x3ce6>
    abfc:	8c 01       	movw	r16, r24
    abfe:	ce 01       	movw	r24, r28
    ac00:	89 5f       	subi	r24, 0xF9	; 249
    ac02:	9d 4f       	sbci	r25, 0xFD	; 253
    ac04:	fc 01       	movw	r30, r24
    ac06:	11 83       	std	Z+1, r17	; 0x01
    ac08:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right();
    ac0a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
			stop();
    ac0e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ac12:	9e 01       	movw	r18, r28
    ac14:	27 5f       	subi	r18, 0xF7	; 247
    ac16:	3d 4f       	sbci	r19, 0xFD	; 253
    ac18:	80 e0       	ldi	r24, 0x00	; 0
    ac1a:	90 e0       	ldi	r25, 0x00	; 0
    ac1c:	a0 ea       	ldi	r26, 0xA0	; 160
    ac1e:	b1 e4       	ldi	r27, 0x41	; 65
    ac20:	f9 01       	movw	r30, r18
    ac22:	80 83       	st	Z, r24
    ac24:	91 83       	std	Z+1, r25	; 0x01
    ac26:	a2 83       	std	Z+2, r26	; 0x02
    ac28:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ac2a:	8e 01       	movw	r16, r28
    ac2c:	03 5f       	subi	r16, 0xF3	; 243
    ac2e:	1d 4f       	sbci	r17, 0xFD	; 253
    ac30:	ce 01       	movw	r24, r28
    ac32:	87 5f       	subi	r24, 0xF7	; 247
    ac34:	9d 4f       	sbci	r25, 0xFD	; 253
    ac36:	fc 01       	movw	r30, r24
    ac38:	60 81       	ld	r22, Z
    ac3a:	71 81       	ldd	r23, Z+1	; 0x01
    ac3c:	82 81       	ldd	r24, Z+2	; 0x02
    ac3e:	93 81       	ldd	r25, Z+3	; 0x03
    ac40:	26 e6       	ldi	r18, 0x66	; 102
    ac42:	36 e6       	ldi	r19, 0x66	; 102
    ac44:	46 e6       	ldi	r20, 0x66	; 102
    ac46:	55 e4       	ldi	r21, 0x45	; 69
    ac48:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ac4c:	dc 01       	movw	r26, r24
    ac4e:	cb 01       	movw	r24, r22
    ac50:	f8 01       	movw	r30, r16
    ac52:	80 83       	st	Z, r24
    ac54:	91 83       	std	Z+1, r25	; 0x01
    ac56:	a2 83       	std	Z+2, r26	; 0x02
    ac58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ac5a:	ce 01       	movw	r24, r28
    ac5c:	83 5f       	subi	r24, 0xF3	; 243
    ac5e:	9d 4f       	sbci	r25, 0xFD	; 253
    ac60:	11 e0       	ldi	r17, 0x01	; 1
    ac62:	fc 01       	movw	r30, r24
    ac64:	60 81       	ld	r22, Z
    ac66:	71 81       	ldd	r23, Z+1	; 0x01
    ac68:	82 81       	ldd	r24, Z+2	; 0x02
    ac6a:	93 81       	ldd	r25, Z+3	; 0x03
    ac6c:	20 e0       	ldi	r18, 0x00	; 0
    ac6e:	30 e0       	ldi	r19, 0x00	; 0
    ac70:	40 e8       	ldi	r20, 0x80	; 128
    ac72:	5f e3       	ldi	r21, 0x3F	; 63
    ac74:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ac78:	88 23       	and	r24, r24
    ac7a:	0c f0       	brlt	.+2      	; 0xac7e <pick_drop+0x3d6c>
    ac7c:	10 e0       	ldi	r17, 0x00	; 0
    ac7e:	11 23       	and	r17, r17
    ac80:	49 f0       	breq	.+18     	; 0xac94 <pick_drop+0x3d82>
		__ticks = 1;
    ac82:	ce 01       	movw	r24, r28
    ac84:	8f 5e       	subi	r24, 0xEF	; 239
    ac86:	9d 4f       	sbci	r25, 0xFD	; 253
    ac88:	21 e0       	ldi	r18, 0x01	; 1
    ac8a:	30 e0       	ldi	r19, 0x00	; 0
    ac8c:	fc 01       	movw	r30, r24
    ac8e:	31 83       	std	Z+1, r19	; 0x01
    ac90:	20 83       	st	Z, r18
    ac92:	74 c0       	rjmp	.+232    	; 0xad7c <pick_drop+0x3e6a>
	else if (__tmp > 65535)
    ac94:	ce 01       	movw	r24, r28
    ac96:	83 5f       	subi	r24, 0xF3	; 243
    ac98:	9d 4f       	sbci	r25, 0xFD	; 253
    ac9a:	11 e0       	ldi	r17, 0x01	; 1
    ac9c:	fc 01       	movw	r30, r24
    ac9e:	60 81       	ld	r22, Z
    aca0:	71 81       	ldd	r23, Z+1	; 0x01
    aca2:	82 81       	ldd	r24, Z+2	; 0x02
    aca4:	93 81       	ldd	r25, Z+3	; 0x03
    aca6:	20 e0       	ldi	r18, 0x00	; 0
    aca8:	3f ef       	ldi	r19, 0xFF	; 255
    acaa:	4f e7       	ldi	r20, 0x7F	; 127
    acac:	57 e4       	ldi	r21, 0x47	; 71
    acae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    acb2:	18 16       	cp	r1, r24
    acb4:	0c f0       	brlt	.+2      	; 0xacb8 <pick_drop+0x3da6>
    acb6:	10 e0       	ldi	r17, 0x00	; 0
    acb8:	11 23       	and	r17, r17
    acba:	09 f4       	brne	.+2      	; 0xacbe <pick_drop+0x3dac>
    acbc:	4d c0       	rjmp	.+154    	; 0xad58 <pick_drop+0x3e46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    acbe:	ce 01       	movw	r24, r28
    acc0:	87 5f       	subi	r24, 0xF7	; 247
    acc2:	9d 4f       	sbci	r25, 0xFD	; 253
    acc4:	fc 01       	movw	r30, r24
    acc6:	60 81       	ld	r22, Z
    acc8:	71 81       	ldd	r23, Z+1	; 0x01
    acca:	82 81       	ldd	r24, Z+2	; 0x02
    accc:	93 81       	ldd	r25, Z+3	; 0x03
    acce:	20 e0       	ldi	r18, 0x00	; 0
    acd0:	30 e0       	ldi	r19, 0x00	; 0
    acd2:	40 e2       	ldi	r20, 0x20	; 32
    acd4:	51 e4       	ldi	r21, 0x41	; 65
    acd6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    acda:	dc 01       	movw	r26, r24
    acdc:	cb 01       	movw	r24, r22
    acde:	8e 01       	movw	r16, r28
    ace0:	0f 5e       	subi	r16, 0xEF	; 239
    ace2:	1d 4f       	sbci	r17, 0xFD	; 253
    ace4:	bc 01       	movw	r22, r24
    ace6:	cd 01       	movw	r24, r26
    ace8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    acec:	dc 01       	movw	r26, r24
    acee:	cb 01       	movw	r24, r22
    acf0:	f8 01       	movw	r30, r16
    acf2:	91 83       	std	Z+1, r25	; 0x01
    acf4:	80 83       	st	Z, r24
    acf6:	27 c0       	rjmp	.+78     	; 0xad46 <pick_drop+0x3e34>
    acf8:	ce 01       	movw	r24, r28
    acfa:	8d 5e       	subi	r24, 0xED	; 237
    acfc:	9d 4f       	sbci	r25, 0xFD	; 253
    acfe:	20 e7       	ldi	r18, 0x70	; 112
    ad00:	31 e0       	ldi	r19, 0x01	; 1
    ad02:	fc 01       	movw	r30, r24
    ad04:	31 83       	std	Z+1, r19	; 0x01
    ad06:	20 83       	st	Z, r18
    ad08:	ce 01       	movw	r24, r28
    ad0a:	8d 5e       	subi	r24, 0xED	; 237
    ad0c:	9d 4f       	sbci	r25, 0xFD	; 253
    ad0e:	fc 01       	movw	r30, r24
    ad10:	80 81       	ld	r24, Z
    ad12:	91 81       	ldd	r25, Z+1	; 0x01
    ad14:	8c 01       	movw	r16, r24
    ad16:	c8 01       	movw	r24, r16
    ad18:	01 97       	sbiw	r24, 0x01	; 1
    ad1a:	f1 f7       	brne	.-4      	; 0xad18 <pick_drop+0x3e06>
    ad1c:	8c 01       	movw	r16, r24
    ad1e:	ce 01       	movw	r24, r28
    ad20:	8d 5e       	subi	r24, 0xED	; 237
    ad22:	9d 4f       	sbci	r25, 0xFD	; 253
    ad24:	fc 01       	movw	r30, r24
    ad26:	11 83       	std	Z+1, r17	; 0x01
    ad28:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad2a:	ce 01       	movw	r24, r28
    ad2c:	8f 5e       	subi	r24, 0xEF	; 239
    ad2e:	9d 4f       	sbci	r25, 0xFD	; 253
    ad30:	9e 01       	movw	r18, r28
    ad32:	2f 5e       	subi	r18, 0xEF	; 239
    ad34:	3d 4f       	sbci	r19, 0xFD	; 253
    ad36:	f9 01       	movw	r30, r18
    ad38:	20 81       	ld	r18, Z
    ad3a:	31 81       	ldd	r19, Z+1	; 0x01
    ad3c:	21 50       	subi	r18, 0x01	; 1
    ad3e:	30 40       	sbci	r19, 0x00	; 0
    ad40:	fc 01       	movw	r30, r24
    ad42:	31 83       	std	Z+1, r19	; 0x01
    ad44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad46:	ce 01       	movw	r24, r28
    ad48:	8f 5e       	subi	r24, 0xEF	; 239
    ad4a:	9d 4f       	sbci	r25, 0xFD	; 253
    ad4c:	fc 01       	movw	r30, r24
    ad4e:	80 81       	ld	r24, Z
    ad50:	91 81       	ldd	r25, Z+1	; 0x01
    ad52:	00 97       	sbiw	r24, 0x00	; 0
    ad54:	89 f6       	brne	.-94     	; 0xacf8 <pick_drop+0x3de6>
    ad56:	2f c0       	rjmp	.+94     	; 0xadb6 <pick_drop+0x3ea4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ad58:	8e 01       	movw	r16, r28
    ad5a:	0f 5e       	subi	r16, 0xEF	; 239
    ad5c:	1d 4f       	sbci	r17, 0xFD	; 253
    ad5e:	ce 01       	movw	r24, r28
    ad60:	83 5f       	subi	r24, 0xF3	; 243
    ad62:	9d 4f       	sbci	r25, 0xFD	; 253
    ad64:	fc 01       	movw	r30, r24
    ad66:	60 81       	ld	r22, Z
    ad68:	71 81       	ldd	r23, Z+1	; 0x01
    ad6a:	82 81       	ldd	r24, Z+2	; 0x02
    ad6c:	93 81       	ldd	r25, Z+3	; 0x03
    ad6e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ad72:	dc 01       	movw	r26, r24
    ad74:	cb 01       	movw	r24, r22
    ad76:	f8 01       	movw	r30, r16
    ad78:	91 83       	std	Z+1, r25	; 0x01
    ad7a:	80 83       	st	Z, r24
    ad7c:	ce 01       	movw	r24, r28
    ad7e:	8b 5e       	subi	r24, 0xEB	; 235
    ad80:	9d 4f       	sbci	r25, 0xFD	; 253
    ad82:	9e 01       	movw	r18, r28
    ad84:	2f 5e       	subi	r18, 0xEF	; 239
    ad86:	3d 4f       	sbci	r19, 0xFD	; 253
    ad88:	f9 01       	movw	r30, r18
    ad8a:	20 81       	ld	r18, Z
    ad8c:	31 81       	ldd	r19, Z+1	; 0x01
    ad8e:	fc 01       	movw	r30, r24
    ad90:	31 83       	std	Z+1, r19	; 0x01
    ad92:	20 83       	st	Z, r18
    ad94:	ce 01       	movw	r24, r28
    ad96:	8b 5e       	subi	r24, 0xEB	; 235
    ad98:	9d 4f       	sbci	r25, 0xFD	; 253
    ad9a:	fc 01       	movw	r30, r24
    ad9c:	80 81       	ld	r24, Z
    ad9e:	91 81       	ldd	r25, Z+1	; 0x01
    ada0:	8c 01       	movw	r16, r24
    ada2:	c8 01       	movw	r24, r16
    ada4:	01 97       	sbiw	r24, 0x01	; 1
    ada6:	f1 f7       	brne	.-4      	; 0xada4 <pick_drop+0x3e92>
    ada8:	8c 01       	movw	r16, r24
    adaa:	ce 01       	movw	r24, r28
    adac:	8b 5e       	subi	r24, 0xEB	; 235
    adae:	9d 4f       	sbci	r25, 0xFD	; 253
    adb0:	fc 01       	movw	r30, r24
    adb2:	11 83       	std	Z+1, r17	; 0x01
    adb4:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(50);
    adb6:	82 e3       	ldi	r24, 0x32	; 50
    adb8:	90 e0       	ldi	r25, 0x00	; 0
    adba:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    adbe:	9e 01       	movw	r18, r28
    adc0:	29 5e       	subi	r18, 0xE9	; 233
    adc2:	3d 4f       	sbci	r19, 0xFD	; 253
    adc4:	80 e0       	ldi	r24, 0x00	; 0
    adc6:	90 e0       	ldi	r25, 0x00	; 0
    adc8:	a0 ea       	ldi	r26, 0xA0	; 160
    adca:	b1 e4       	ldi	r27, 0x41	; 65
    adcc:	f9 01       	movw	r30, r18
    adce:	80 83       	st	Z, r24
    add0:	91 83       	std	Z+1, r25	; 0x01
    add2:	a2 83       	std	Z+2, r26	; 0x02
    add4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    add6:	8e 01       	movw	r16, r28
    add8:	05 5e       	subi	r16, 0xE5	; 229
    adda:	1d 4f       	sbci	r17, 0xFD	; 253
    addc:	ce 01       	movw	r24, r28
    adde:	89 5e       	subi	r24, 0xE9	; 233
    ade0:	9d 4f       	sbci	r25, 0xFD	; 253
    ade2:	fc 01       	movw	r30, r24
    ade4:	60 81       	ld	r22, Z
    ade6:	71 81       	ldd	r23, Z+1	; 0x01
    ade8:	82 81       	ldd	r24, Z+2	; 0x02
    adea:	93 81       	ldd	r25, Z+3	; 0x03
    adec:	26 e6       	ldi	r18, 0x66	; 102
    adee:	36 e6       	ldi	r19, 0x66	; 102
    adf0:	46 e6       	ldi	r20, 0x66	; 102
    adf2:	55 e4       	ldi	r21, 0x45	; 69
    adf4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    adf8:	dc 01       	movw	r26, r24
    adfa:	cb 01       	movw	r24, r22
    adfc:	f8 01       	movw	r30, r16
    adfe:	80 83       	st	Z, r24
    ae00:	91 83       	std	Z+1, r25	; 0x01
    ae02:	a2 83       	std	Z+2, r26	; 0x02
    ae04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ae06:	ce 01       	movw	r24, r28
    ae08:	85 5e       	subi	r24, 0xE5	; 229
    ae0a:	9d 4f       	sbci	r25, 0xFD	; 253
    ae0c:	11 e0       	ldi	r17, 0x01	; 1
    ae0e:	fc 01       	movw	r30, r24
    ae10:	60 81       	ld	r22, Z
    ae12:	71 81       	ldd	r23, Z+1	; 0x01
    ae14:	82 81       	ldd	r24, Z+2	; 0x02
    ae16:	93 81       	ldd	r25, Z+3	; 0x03
    ae18:	20 e0       	ldi	r18, 0x00	; 0
    ae1a:	30 e0       	ldi	r19, 0x00	; 0
    ae1c:	40 e8       	ldi	r20, 0x80	; 128
    ae1e:	5f e3       	ldi	r21, 0x3F	; 63
    ae20:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ae24:	88 23       	and	r24, r24
    ae26:	0c f0       	brlt	.+2      	; 0xae2a <pick_drop+0x3f18>
    ae28:	10 e0       	ldi	r17, 0x00	; 0
    ae2a:	11 23       	and	r17, r17
    ae2c:	49 f0       	breq	.+18     	; 0xae40 <pick_drop+0x3f2e>
		__ticks = 1;
    ae2e:	ce 01       	movw	r24, r28
    ae30:	81 5e       	subi	r24, 0xE1	; 225
    ae32:	9d 4f       	sbci	r25, 0xFD	; 253
    ae34:	21 e0       	ldi	r18, 0x01	; 1
    ae36:	30 e0       	ldi	r19, 0x00	; 0
    ae38:	fc 01       	movw	r30, r24
    ae3a:	31 83       	std	Z+1, r19	; 0x01
    ae3c:	20 83       	st	Z, r18
    ae3e:	74 c0       	rjmp	.+232    	; 0xaf28 <pick_drop+0x4016>
	else if (__tmp > 65535)
    ae40:	ce 01       	movw	r24, r28
    ae42:	85 5e       	subi	r24, 0xE5	; 229
    ae44:	9d 4f       	sbci	r25, 0xFD	; 253
    ae46:	11 e0       	ldi	r17, 0x01	; 1
    ae48:	fc 01       	movw	r30, r24
    ae4a:	60 81       	ld	r22, Z
    ae4c:	71 81       	ldd	r23, Z+1	; 0x01
    ae4e:	82 81       	ldd	r24, Z+2	; 0x02
    ae50:	93 81       	ldd	r25, Z+3	; 0x03
    ae52:	20 e0       	ldi	r18, 0x00	; 0
    ae54:	3f ef       	ldi	r19, 0xFF	; 255
    ae56:	4f e7       	ldi	r20, 0x7F	; 127
    ae58:	57 e4       	ldi	r21, 0x47	; 71
    ae5a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ae5e:	18 16       	cp	r1, r24
    ae60:	0c f0       	brlt	.+2      	; 0xae64 <pick_drop+0x3f52>
    ae62:	10 e0       	ldi	r17, 0x00	; 0
    ae64:	11 23       	and	r17, r17
    ae66:	09 f4       	brne	.+2      	; 0xae6a <pick_drop+0x3f58>
    ae68:	4d c0       	rjmp	.+154    	; 0xaf04 <pick_drop+0x3ff2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ae6a:	ce 01       	movw	r24, r28
    ae6c:	89 5e       	subi	r24, 0xE9	; 233
    ae6e:	9d 4f       	sbci	r25, 0xFD	; 253
    ae70:	fc 01       	movw	r30, r24
    ae72:	60 81       	ld	r22, Z
    ae74:	71 81       	ldd	r23, Z+1	; 0x01
    ae76:	82 81       	ldd	r24, Z+2	; 0x02
    ae78:	93 81       	ldd	r25, Z+3	; 0x03
    ae7a:	20 e0       	ldi	r18, 0x00	; 0
    ae7c:	30 e0       	ldi	r19, 0x00	; 0
    ae7e:	40 e2       	ldi	r20, 0x20	; 32
    ae80:	51 e4       	ldi	r21, 0x41	; 65
    ae82:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ae86:	dc 01       	movw	r26, r24
    ae88:	cb 01       	movw	r24, r22
    ae8a:	8e 01       	movw	r16, r28
    ae8c:	01 5e       	subi	r16, 0xE1	; 225
    ae8e:	1d 4f       	sbci	r17, 0xFD	; 253
    ae90:	bc 01       	movw	r22, r24
    ae92:	cd 01       	movw	r24, r26
    ae94:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ae98:	dc 01       	movw	r26, r24
    ae9a:	cb 01       	movw	r24, r22
    ae9c:	f8 01       	movw	r30, r16
    ae9e:	91 83       	std	Z+1, r25	; 0x01
    aea0:	80 83       	st	Z, r24
    aea2:	27 c0       	rjmp	.+78     	; 0xaef2 <pick_drop+0x3fe0>
    aea4:	ce 01       	movw	r24, r28
    aea6:	8f 5d       	subi	r24, 0xDF	; 223
    aea8:	9d 4f       	sbci	r25, 0xFD	; 253
    aeaa:	20 e7       	ldi	r18, 0x70	; 112
    aeac:	31 e0       	ldi	r19, 0x01	; 1
    aeae:	fc 01       	movw	r30, r24
    aeb0:	31 83       	std	Z+1, r19	; 0x01
    aeb2:	20 83       	st	Z, r18
    aeb4:	ce 01       	movw	r24, r28
    aeb6:	8f 5d       	subi	r24, 0xDF	; 223
    aeb8:	9d 4f       	sbci	r25, 0xFD	; 253
    aeba:	fc 01       	movw	r30, r24
    aebc:	80 81       	ld	r24, Z
    aebe:	91 81       	ldd	r25, Z+1	; 0x01
    aec0:	8c 01       	movw	r16, r24
    aec2:	c8 01       	movw	r24, r16
    aec4:	01 97       	sbiw	r24, 0x01	; 1
    aec6:	f1 f7       	brne	.-4      	; 0xaec4 <pick_drop+0x3fb2>
    aec8:	8c 01       	movw	r16, r24
    aeca:	ce 01       	movw	r24, r28
    aecc:	8f 5d       	subi	r24, 0xDF	; 223
    aece:	9d 4f       	sbci	r25, 0xFD	; 253
    aed0:	fc 01       	movw	r30, r24
    aed2:	11 83       	std	Z+1, r17	; 0x01
    aed4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aed6:	ce 01       	movw	r24, r28
    aed8:	81 5e       	subi	r24, 0xE1	; 225
    aeda:	9d 4f       	sbci	r25, 0xFD	; 253
    aedc:	9e 01       	movw	r18, r28
    aede:	21 5e       	subi	r18, 0xE1	; 225
    aee0:	3d 4f       	sbci	r19, 0xFD	; 253
    aee2:	f9 01       	movw	r30, r18
    aee4:	20 81       	ld	r18, Z
    aee6:	31 81       	ldd	r19, Z+1	; 0x01
    aee8:	21 50       	subi	r18, 0x01	; 1
    aeea:	30 40       	sbci	r19, 0x00	; 0
    aeec:	fc 01       	movw	r30, r24
    aeee:	31 83       	std	Z+1, r19	; 0x01
    aef0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aef2:	ce 01       	movw	r24, r28
    aef4:	81 5e       	subi	r24, 0xE1	; 225
    aef6:	9d 4f       	sbci	r25, 0xFD	; 253
    aef8:	fc 01       	movw	r30, r24
    aefa:	80 81       	ld	r24, Z
    aefc:	91 81       	ldd	r25, Z+1	; 0x01
    aefe:	00 97       	sbiw	r24, 0x00	; 0
    af00:	89 f6       	brne	.-94     	; 0xaea4 <pick_drop+0x3f92>
    af02:	2f c0       	rjmp	.+94     	; 0xaf62 <pick_drop+0x4050>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    af04:	8e 01       	movw	r16, r28
    af06:	01 5e       	subi	r16, 0xE1	; 225
    af08:	1d 4f       	sbci	r17, 0xFD	; 253
    af0a:	ce 01       	movw	r24, r28
    af0c:	85 5e       	subi	r24, 0xE5	; 229
    af0e:	9d 4f       	sbci	r25, 0xFD	; 253
    af10:	fc 01       	movw	r30, r24
    af12:	60 81       	ld	r22, Z
    af14:	71 81       	ldd	r23, Z+1	; 0x01
    af16:	82 81       	ldd	r24, Z+2	; 0x02
    af18:	93 81       	ldd	r25, Z+3	; 0x03
    af1a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    af1e:	dc 01       	movw	r26, r24
    af20:	cb 01       	movw	r24, r22
    af22:	f8 01       	movw	r30, r16
    af24:	91 83       	std	Z+1, r25	; 0x01
    af26:	80 83       	st	Z, r24
    af28:	ce 01       	movw	r24, r28
    af2a:	8d 5d       	subi	r24, 0xDD	; 221
    af2c:	9d 4f       	sbci	r25, 0xFD	; 253
    af2e:	9e 01       	movw	r18, r28
    af30:	21 5e       	subi	r18, 0xE1	; 225
    af32:	3d 4f       	sbci	r19, 0xFD	; 253
    af34:	f9 01       	movw	r30, r18
    af36:	20 81       	ld	r18, Z
    af38:	31 81       	ldd	r19, Z+1	; 0x01
    af3a:	fc 01       	movw	r30, r24
    af3c:	31 83       	std	Z+1, r19	; 0x01
    af3e:	20 83       	st	Z, r18
    af40:	ce 01       	movw	r24, r28
    af42:	8d 5d       	subi	r24, 0xDD	; 221
    af44:	9d 4f       	sbci	r25, 0xFD	; 253
    af46:	fc 01       	movw	r30, r24
    af48:	80 81       	ld	r24, Z
    af4a:	91 81       	ldd	r25, Z+1	; 0x01
    af4c:	8c 01       	movw	r16, r24
    af4e:	c8 01       	movw	r24, r16
    af50:	01 97       	sbiw	r24, 0x01	; 1
    af52:	f1 f7       	brne	.-4      	; 0xaf50 <pick_drop+0x403e>
    af54:	8c 01       	movw	r16, r24
    af56:	ce 01       	movw	r24, r28
    af58:	8d 5d       	subi	r24, 0xDD	; 221
    af5a:	9d 4f       	sbci	r25, 0xFD	; 253
    af5c:	fc 01       	movw	r30, r24
    af5e:	11 83       	std	Z+1, r17	; 0x01
    af60:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    af62:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    af66:	9e 01       	movw	r18, r28
    af68:	2b 5d       	subi	r18, 0xDB	; 219
    af6a:	3d 4f       	sbci	r19, 0xFD	; 253
    af6c:	80 e0       	ldi	r24, 0x00	; 0
    af6e:	90 e0       	ldi	r25, 0x00	; 0
    af70:	a8 ec       	ldi	r26, 0xC8	; 200
    af72:	b2 e4       	ldi	r27, 0x42	; 66
    af74:	f9 01       	movw	r30, r18
    af76:	80 83       	st	Z, r24
    af78:	91 83       	std	Z+1, r25	; 0x01
    af7a:	a2 83       	std	Z+2, r26	; 0x02
    af7c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    af7e:	8e 01       	movw	r16, r28
    af80:	07 5d       	subi	r16, 0xD7	; 215
    af82:	1d 4f       	sbci	r17, 0xFD	; 253
    af84:	ce 01       	movw	r24, r28
    af86:	8b 5d       	subi	r24, 0xDB	; 219
    af88:	9d 4f       	sbci	r25, 0xFD	; 253
    af8a:	fc 01       	movw	r30, r24
    af8c:	60 81       	ld	r22, Z
    af8e:	71 81       	ldd	r23, Z+1	; 0x01
    af90:	82 81       	ldd	r24, Z+2	; 0x02
    af92:	93 81       	ldd	r25, Z+3	; 0x03
    af94:	26 e6       	ldi	r18, 0x66	; 102
    af96:	36 e6       	ldi	r19, 0x66	; 102
    af98:	46 e6       	ldi	r20, 0x66	; 102
    af9a:	55 e4       	ldi	r21, 0x45	; 69
    af9c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    afa0:	dc 01       	movw	r26, r24
    afa2:	cb 01       	movw	r24, r22
    afa4:	f8 01       	movw	r30, r16
    afa6:	80 83       	st	Z, r24
    afa8:	91 83       	std	Z+1, r25	; 0x01
    afaa:	a2 83       	std	Z+2, r26	; 0x02
    afac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    afae:	ce 01       	movw	r24, r28
    afb0:	87 5d       	subi	r24, 0xD7	; 215
    afb2:	9d 4f       	sbci	r25, 0xFD	; 253
    afb4:	11 e0       	ldi	r17, 0x01	; 1
    afb6:	fc 01       	movw	r30, r24
    afb8:	60 81       	ld	r22, Z
    afba:	71 81       	ldd	r23, Z+1	; 0x01
    afbc:	82 81       	ldd	r24, Z+2	; 0x02
    afbe:	93 81       	ldd	r25, Z+3	; 0x03
    afc0:	20 e0       	ldi	r18, 0x00	; 0
    afc2:	30 e0       	ldi	r19, 0x00	; 0
    afc4:	40 e8       	ldi	r20, 0x80	; 128
    afc6:	5f e3       	ldi	r21, 0x3F	; 63
    afc8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    afcc:	88 23       	and	r24, r24
    afce:	0c f0       	brlt	.+2      	; 0xafd2 <pick_drop+0x40c0>
    afd0:	10 e0       	ldi	r17, 0x00	; 0
    afd2:	11 23       	and	r17, r17
    afd4:	49 f0       	breq	.+18     	; 0xafe8 <pick_drop+0x40d6>
		__ticks = 1;
    afd6:	ce 01       	movw	r24, r28
    afd8:	83 5d       	subi	r24, 0xD3	; 211
    afda:	9d 4f       	sbci	r25, 0xFD	; 253
    afdc:	21 e0       	ldi	r18, 0x01	; 1
    afde:	30 e0       	ldi	r19, 0x00	; 0
    afe0:	fc 01       	movw	r30, r24
    afe2:	31 83       	std	Z+1, r19	; 0x01
    afe4:	20 83       	st	Z, r18
    afe6:	74 c0       	rjmp	.+232    	; 0xb0d0 <pick_drop+0x41be>
	else if (__tmp > 65535)
    afe8:	ce 01       	movw	r24, r28
    afea:	87 5d       	subi	r24, 0xD7	; 215
    afec:	9d 4f       	sbci	r25, 0xFD	; 253
    afee:	11 e0       	ldi	r17, 0x01	; 1
    aff0:	fc 01       	movw	r30, r24
    aff2:	60 81       	ld	r22, Z
    aff4:	71 81       	ldd	r23, Z+1	; 0x01
    aff6:	82 81       	ldd	r24, Z+2	; 0x02
    aff8:	93 81       	ldd	r25, Z+3	; 0x03
    affa:	20 e0       	ldi	r18, 0x00	; 0
    affc:	3f ef       	ldi	r19, 0xFF	; 255
    affe:	4f e7       	ldi	r20, 0x7F	; 127
    b000:	57 e4       	ldi	r21, 0x47	; 71
    b002:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    b006:	18 16       	cp	r1, r24
    b008:	0c f0       	brlt	.+2      	; 0xb00c <pick_drop+0x40fa>
    b00a:	10 e0       	ldi	r17, 0x00	; 0
    b00c:	11 23       	and	r17, r17
    b00e:	09 f4       	brne	.+2      	; 0xb012 <pick_drop+0x4100>
    b010:	4d c0       	rjmp	.+154    	; 0xb0ac <pick_drop+0x419a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b012:	ce 01       	movw	r24, r28
    b014:	8b 5d       	subi	r24, 0xDB	; 219
    b016:	9d 4f       	sbci	r25, 0xFD	; 253
    b018:	fc 01       	movw	r30, r24
    b01a:	60 81       	ld	r22, Z
    b01c:	71 81       	ldd	r23, Z+1	; 0x01
    b01e:	82 81       	ldd	r24, Z+2	; 0x02
    b020:	93 81       	ldd	r25, Z+3	; 0x03
    b022:	20 e0       	ldi	r18, 0x00	; 0
    b024:	30 e0       	ldi	r19, 0x00	; 0
    b026:	40 e2       	ldi	r20, 0x20	; 32
    b028:	51 e4       	ldi	r21, 0x41	; 65
    b02a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b02e:	dc 01       	movw	r26, r24
    b030:	cb 01       	movw	r24, r22
    b032:	8e 01       	movw	r16, r28
    b034:	03 5d       	subi	r16, 0xD3	; 211
    b036:	1d 4f       	sbci	r17, 0xFD	; 253
    b038:	bc 01       	movw	r22, r24
    b03a:	cd 01       	movw	r24, r26
    b03c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b040:	dc 01       	movw	r26, r24
    b042:	cb 01       	movw	r24, r22
    b044:	f8 01       	movw	r30, r16
    b046:	91 83       	std	Z+1, r25	; 0x01
    b048:	80 83       	st	Z, r24
    b04a:	27 c0       	rjmp	.+78     	; 0xb09a <pick_drop+0x4188>
    b04c:	ce 01       	movw	r24, r28
    b04e:	81 5d       	subi	r24, 0xD1	; 209
    b050:	9d 4f       	sbci	r25, 0xFD	; 253
    b052:	20 e7       	ldi	r18, 0x70	; 112
    b054:	31 e0       	ldi	r19, 0x01	; 1
    b056:	fc 01       	movw	r30, r24
    b058:	31 83       	std	Z+1, r19	; 0x01
    b05a:	20 83       	st	Z, r18
    b05c:	ce 01       	movw	r24, r28
    b05e:	81 5d       	subi	r24, 0xD1	; 209
    b060:	9d 4f       	sbci	r25, 0xFD	; 253
    b062:	fc 01       	movw	r30, r24
    b064:	80 81       	ld	r24, Z
    b066:	91 81       	ldd	r25, Z+1	; 0x01
    b068:	8c 01       	movw	r16, r24
    b06a:	c8 01       	movw	r24, r16
    b06c:	01 97       	sbiw	r24, 0x01	; 1
    b06e:	f1 f7       	brne	.-4      	; 0xb06c <pick_drop+0x415a>
    b070:	8c 01       	movw	r16, r24
    b072:	ce 01       	movw	r24, r28
    b074:	81 5d       	subi	r24, 0xD1	; 209
    b076:	9d 4f       	sbci	r25, 0xFD	; 253
    b078:	fc 01       	movw	r30, r24
    b07a:	11 83       	std	Z+1, r17	; 0x01
    b07c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b07e:	ce 01       	movw	r24, r28
    b080:	83 5d       	subi	r24, 0xD3	; 211
    b082:	9d 4f       	sbci	r25, 0xFD	; 253
    b084:	9e 01       	movw	r18, r28
    b086:	23 5d       	subi	r18, 0xD3	; 211
    b088:	3d 4f       	sbci	r19, 0xFD	; 253
    b08a:	f9 01       	movw	r30, r18
    b08c:	20 81       	ld	r18, Z
    b08e:	31 81       	ldd	r19, Z+1	; 0x01
    b090:	21 50       	subi	r18, 0x01	; 1
    b092:	30 40       	sbci	r19, 0x00	; 0
    b094:	fc 01       	movw	r30, r24
    b096:	31 83       	std	Z+1, r19	; 0x01
    b098:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b09a:	ce 01       	movw	r24, r28
    b09c:	83 5d       	subi	r24, 0xD3	; 211
    b09e:	9d 4f       	sbci	r25, 0xFD	; 253
    b0a0:	fc 01       	movw	r30, r24
    b0a2:	80 81       	ld	r24, Z
    b0a4:	91 81       	ldd	r25, Z+1	; 0x01
    b0a6:	00 97       	sbiw	r24, 0x00	; 0
    b0a8:	89 f6       	brne	.-94     	; 0xb04c <pick_drop+0x413a>
    b0aa:	2f c0       	rjmp	.+94     	; 0xb10a <pick_drop+0x41f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b0ac:	8e 01       	movw	r16, r28
    b0ae:	03 5d       	subi	r16, 0xD3	; 211
    b0b0:	1d 4f       	sbci	r17, 0xFD	; 253
    b0b2:	ce 01       	movw	r24, r28
    b0b4:	87 5d       	subi	r24, 0xD7	; 215
    b0b6:	9d 4f       	sbci	r25, 0xFD	; 253
    b0b8:	fc 01       	movw	r30, r24
    b0ba:	60 81       	ld	r22, Z
    b0bc:	71 81       	ldd	r23, Z+1	; 0x01
    b0be:	82 81       	ldd	r24, Z+2	; 0x02
    b0c0:	93 81       	ldd	r25, Z+3	; 0x03
    b0c2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b0c6:	dc 01       	movw	r26, r24
    b0c8:	cb 01       	movw	r24, r22
    b0ca:	f8 01       	movw	r30, r16
    b0cc:	91 83       	std	Z+1, r25	; 0x01
    b0ce:	80 83       	st	Z, r24
    b0d0:	ce 01       	movw	r24, r28
    b0d2:	8f 5c       	subi	r24, 0xCF	; 207
    b0d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b0d6:	9e 01       	movw	r18, r28
    b0d8:	23 5d       	subi	r18, 0xD3	; 211
    b0da:	3d 4f       	sbci	r19, 0xFD	; 253
    b0dc:	f9 01       	movw	r30, r18
    b0de:	20 81       	ld	r18, Z
    b0e0:	31 81       	ldd	r19, Z+1	; 0x01
    b0e2:	fc 01       	movw	r30, r24
    b0e4:	31 83       	std	Z+1, r19	; 0x01
    b0e6:	20 83       	st	Z, r18
    b0e8:	ce 01       	movw	r24, r28
    b0ea:	8f 5c       	subi	r24, 0xCF	; 207
    b0ec:	9d 4f       	sbci	r25, 0xFD	; 253
    b0ee:	fc 01       	movw	r30, r24
    b0f0:	80 81       	ld	r24, Z
    b0f2:	91 81       	ldd	r25, Z+1	; 0x01
    b0f4:	8c 01       	movw	r16, r24
    b0f6:	c8 01       	movw	r24, r16
    b0f8:	01 97       	sbiw	r24, 0x01	; 1
    b0fa:	f1 f7       	brne	.-4      	; 0xb0f8 <pick_drop+0x41e6>
    b0fc:	8c 01       	movw	r16, r24
    b0fe:	ce 01       	movw	r24, r28
    b100:	8f 5c       	subi	r24, 0xCF	; 207
    b102:	9d 4f       	sbci	r25, 0xFD	; 253
    b104:	fc 01       	movw	r30, r24
    b106:	11 83       	std	Z+1, r17	; 0x01
    b108:	00 83       	st	Z, r16
			_delay_ms(100);
			forward_mm(50);
    b10a:	82 e3       	ldi	r24, 0x32	; 50
    b10c:	90 e0       	ldi	r25, 0x00	; 0
    b10e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b112:	9e 01       	movw	r18, r28
    b114:	2d 5c       	subi	r18, 0xCD	; 205
    b116:	3d 4f       	sbci	r19, 0xFD	; 253
    b118:	80 e0       	ldi	r24, 0x00	; 0
    b11a:	90 e0       	ldi	r25, 0x00	; 0
    b11c:	a0 ea       	ldi	r26, 0xA0	; 160
    b11e:	b1 e4       	ldi	r27, 0x41	; 65
    b120:	f9 01       	movw	r30, r18
    b122:	80 83       	st	Z, r24
    b124:	91 83       	std	Z+1, r25	; 0x01
    b126:	a2 83       	std	Z+2, r26	; 0x02
    b128:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b12a:	8e 01       	movw	r16, r28
    b12c:	09 5c       	subi	r16, 0xC9	; 201
    b12e:	1d 4f       	sbci	r17, 0xFD	; 253
    b130:	ce 01       	movw	r24, r28
    b132:	8d 5c       	subi	r24, 0xCD	; 205
    b134:	9d 4f       	sbci	r25, 0xFD	; 253
    b136:	fc 01       	movw	r30, r24
    b138:	60 81       	ld	r22, Z
    b13a:	71 81       	ldd	r23, Z+1	; 0x01
    b13c:	82 81       	ldd	r24, Z+2	; 0x02
    b13e:	93 81       	ldd	r25, Z+3	; 0x03
    b140:	26 e6       	ldi	r18, 0x66	; 102
    b142:	36 e6       	ldi	r19, 0x66	; 102
    b144:	46 e6       	ldi	r20, 0x66	; 102
    b146:	55 e4       	ldi	r21, 0x45	; 69
    b148:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b14c:	dc 01       	movw	r26, r24
    b14e:	cb 01       	movw	r24, r22
    b150:	f8 01       	movw	r30, r16
    b152:	80 83       	st	Z, r24
    b154:	91 83       	std	Z+1, r25	; 0x01
    b156:	a2 83       	std	Z+2, r26	; 0x02
    b158:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b15a:	ce 01       	movw	r24, r28
    b15c:	89 5c       	subi	r24, 0xC9	; 201
    b15e:	9d 4f       	sbci	r25, 0xFD	; 253
    b160:	11 e0       	ldi	r17, 0x01	; 1
    b162:	fc 01       	movw	r30, r24
    b164:	60 81       	ld	r22, Z
    b166:	71 81       	ldd	r23, Z+1	; 0x01
    b168:	82 81       	ldd	r24, Z+2	; 0x02
    b16a:	93 81       	ldd	r25, Z+3	; 0x03
    b16c:	20 e0       	ldi	r18, 0x00	; 0
    b16e:	30 e0       	ldi	r19, 0x00	; 0
    b170:	40 e8       	ldi	r20, 0x80	; 128
    b172:	5f e3       	ldi	r21, 0x3F	; 63
    b174:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    b178:	88 23       	and	r24, r24
    b17a:	0c f0       	brlt	.+2      	; 0xb17e <pick_drop+0x426c>
    b17c:	10 e0       	ldi	r17, 0x00	; 0
    b17e:	11 23       	and	r17, r17
    b180:	49 f0       	breq	.+18     	; 0xb194 <pick_drop+0x4282>
		__ticks = 1;
    b182:	ce 01       	movw	r24, r28
    b184:	85 5c       	subi	r24, 0xC5	; 197
    b186:	9d 4f       	sbci	r25, 0xFD	; 253
    b188:	21 e0       	ldi	r18, 0x01	; 1
    b18a:	30 e0       	ldi	r19, 0x00	; 0
    b18c:	fc 01       	movw	r30, r24
    b18e:	31 83       	std	Z+1, r19	; 0x01
    b190:	20 83       	st	Z, r18
    b192:	74 c0       	rjmp	.+232    	; 0xb27c <pick_drop+0x436a>
	else if (__tmp > 65535)
    b194:	ce 01       	movw	r24, r28
    b196:	89 5c       	subi	r24, 0xC9	; 201
    b198:	9d 4f       	sbci	r25, 0xFD	; 253
    b19a:	11 e0       	ldi	r17, 0x01	; 1
    b19c:	fc 01       	movw	r30, r24
    b19e:	60 81       	ld	r22, Z
    b1a0:	71 81       	ldd	r23, Z+1	; 0x01
    b1a2:	82 81       	ldd	r24, Z+2	; 0x02
    b1a4:	93 81       	ldd	r25, Z+3	; 0x03
    b1a6:	20 e0       	ldi	r18, 0x00	; 0
    b1a8:	3f ef       	ldi	r19, 0xFF	; 255
    b1aa:	4f e7       	ldi	r20, 0x7F	; 127
    b1ac:	57 e4       	ldi	r21, 0x47	; 71
    b1ae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    b1b2:	18 16       	cp	r1, r24
    b1b4:	0c f0       	brlt	.+2      	; 0xb1b8 <pick_drop+0x42a6>
    b1b6:	10 e0       	ldi	r17, 0x00	; 0
    b1b8:	11 23       	and	r17, r17
    b1ba:	09 f4       	brne	.+2      	; 0xb1be <pick_drop+0x42ac>
    b1bc:	4d c0       	rjmp	.+154    	; 0xb258 <pick_drop+0x4346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b1be:	ce 01       	movw	r24, r28
    b1c0:	8d 5c       	subi	r24, 0xCD	; 205
    b1c2:	9d 4f       	sbci	r25, 0xFD	; 253
    b1c4:	fc 01       	movw	r30, r24
    b1c6:	60 81       	ld	r22, Z
    b1c8:	71 81       	ldd	r23, Z+1	; 0x01
    b1ca:	82 81       	ldd	r24, Z+2	; 0x02
    b1cc:	93 81       	ldd	r25, Z+3	; 0x03
    b1ce:	20 e0       	ldi	r18, 0x00	; 0
    b1d0:	30 e0       	ldi	r19, 0x00	; 0
    b1d2:	40 e2       	ldi	r20, 0x20	; 32
    b1d4:	51 e4       	ldi	r21, 0x41	; 65
    b1d6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b1da:	dc 01       	movw	r26, r24
    b1dc:	cb 01       	movw	r24, r22
    b1de:	8e 01       	movw	r16, r28
    b1e0:	05 5c       	subi	r16, 0xC5	; 197
    b1e2:	1d 4f       	sbci	r17, 0xFD	; 253
    b1e4:	bc 01       	movw	r22, r24
    b1e6:	cd 01       	movw	r24, r26
    b1e8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b1ec:	dc 01       	movw	r26, r24
    b1ee:	cb 01       	movw	r24, r22
    b1f0:	f8 01       	movw	r30, r16
    b1f2:	91 83       	std	Z+1, r25	; 0x01
    b1f4:	80 83       	st	Z, r24
    b1f6:	27 c0       	rjmp	.+78     	; 0xb246 <pick_drop+0x4334>
    b1f8:	ce 01       	movw	r24, r28
    b1fa:	83 5c       	subi	r24, 0xC3	; 195
    b1fc:	9d 4f       	sbci	r25, 0xFD	; 253
    b1fe:	20 e7       	ldi	r18, 0x70	; 112
    b200:	31 e0       	ldi	r19, 0x01	; 1
    b202:	fc 01       	movw	r30, r24
    b204:	31 83       	std	Z+1, r19	; 0x01
    b206:	20 83       	st	Z, r18
    b208:	ce 01       	movw	r24, r28
    b20a:	83 5c       	subi	r24, 0xC3	; 195
    b20c:	9d 4f       	sbci	r25, 0xFD	; 253
    b20e:	fc 01       	movw	r30, r24
    b210:	80 81       	ld	r24, Z
    b212:	91 81       	ldd	r25, Z+1	; 0x01
    b214:	8c 01       	movw	r16, r24
    b216:	c8 01       	movw	r24, r16
    b218:	01 97       	sbiw	r24, 0x01	; 1
    b21a:	f1 f7       	brne	.-4      	; 0xb218 <pick_drop+0x4306>
    b21c:	8c 01       	movw	r16, r24
    b21e:	ce 01       	movw	r24, r28
    b220:	83 5c       	subi	r24, 0xC3	; 195
    b222:	9d 4f       	sbci	r25, 0xFD	; 253
    b224:	fc 01       	movw	r30, r24
    b226:	11 83       	std	Z+1, r17	; 0x01
    b228:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b22a:	ce 01       	movw	r24, r28
    b22c:	85 5c       	subi	r24, 0xC5	; 197
    b22e:	9d 4f       	sbci	r25, 0xFD	; 253
    b230:	9e 01       	movw	r18, r28
    b232:	25 5c       	subi	r18, 0xC5	; 197
    b234:	3d 4f       	sbci	r19, 0xFD	; 253
    b236:	f9 01       	movw	r30, r18
    b238:	20 81       	ld	r18, Z
    b23a:	31 81       	ldd	r19, Z+1	; 0x01
    b23c:	21 50       	subi	r18, 0x01	; 1
    b23e:	30 40       	sbci	r19, 0x00	; 0
    b240:	fc 01       	movw	r30, r24
    b242:	31 83       	std	Z+1, r19	; 0x01
    b244:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b246:	ce 01       	movw	r24, r28
    b248:	85 5c       	subi	r24, 0xC5	; 197
    b24a:	9d 4f       	sbci	r25, 0xFD	; 253
    b24c:	fc 01       	movw	r30, r24
    b24e:	80 81       	ld	r24, Z
    b250:	91 81       	ldd	r25, Z+1	; 0x01
    b252:	00 97       	sbiw	r24, 0x00	; 0
    b254:	89 f6       	brne	.-94     	; 0xb1f8 <pick_drop+0x42e6>
    b256:	2f c0       	rjmp	.+94     	; 0xb2b6 <pick_drop+0x43a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b258:	8e 01       	movw	r16, r28
    b25a:	05 5c       	subi	r16, 0xC5	; 197
    b25c:	1d 4f       	sbci	r17, 0xFD	; 253
    b25e:	ce 01       	movw	r24, r28
    b260:	89 5c       	subi	r24, 0xC9	; 201
    b262:	9d 4f       	sbci	r25, 0xFD	; 253
    b264:	fc 01       	movw	r30, r24
    b266:	60 81       	ld	r22, Z
    b268:	71 81       	ldd	r23, Z+1	; 0x01
    b26a:	82 81       	ldd	r24, Z+2	; 0x02
    b26c:	93 81       	ldd	r25, Z+3	; 0x03
    b26e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b272:	dc 01       	movw	r26, r24
    b274:	cb 01       	movw	r24, r22
    b276:	f8 01       	movw	r30, r16
    b278:	91 83       	std	Z+1, r25	; 0x01
    b27a:	80 83       	st	Z, r24
    b27c:	ce 01       	movw	r24, r28
    b27e:	81 5c       	subi	r24, 0xC1	; 193
    b280:	9d 4f       	sbci	r25, 0xFD	; 253
    b282:	9e 01       	movw	r18, r28
    b284:	25 5c       	subi	r18, 0xC5	; 197
    b286:	3d 4f       	sbci	r19, 0xFD	; 253
    b288:	f9 01       	movw	r30, r18
    b28a:	20 81       	ld	r18, Z
    b28c:	31 81       	ldd	r19, Z+1	; 0x01
    b28e:	fc 01       	movw	r30, r24
    b290:	31 83       	std	Z+1, r19	; 0x01
    b292:	20 83       	st	Z, r18
    b294:	ce 01       	movw	r24, r28
    b296:	81 5c       	subi	r24, 0xC1	; 193
    b298:	9d 4f       	sbci	r25, 0xFD	; 253
    b29a:	fc 01       	movw	r30, r24
    b29c:	80 81       	ld	r24, Z
    b29e:	91 81       	ldd	r25, Z+1	; 0x01
    b2a0:	8c 01       	movw	r16, r24
    b2a2:	c8 01       	movw	r24, r16
    b2a4:	01 97       	sbiw	r24, 0x01	; 1
    b2a6:	f1 f7       	brne	.-4      	; 0xb2a4 <pick_drop+0x4392>
    b2a8:	8c 01       	movw	r16, r24
    b2aa:	ce 01       	movw	r24, r28
    b2ac:	81 5c       	subi	r24, 0xC1	; 193
    b2ae:	9d 4f       	sbci	r25, 0xFD	; 253
    b2b0:	fc 01       	movw	r30, r24
    b2b2:	11 83       	std	Z+1, r17	; 0x01
    b2b4:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    b2b6:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    b2ba:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
    b2be:	9e 01       	movw	r18, r28
    b2c0:	2f 5b       	subi	r18, 0xBF	; 191
    b2c2:	3d 4f       	sbci	r19, 0xFD	; 253
    b2c4:	80 e0       	ldi	r24, 0x00	; 0
    b2c6:	90 e0       	ldi	r25, 0x00	; 0
    b2c8:	a0 ea       	ldi	r26, 0xA0	; 160
    b2ca:	b1 e4       	ldi	r27, 0x41	; 65
    b2cc:	f9 01       	movw	r30, r18
    b2ce:	80 83       	st	Z, r24
    b2d0:	91 83       	std	Z+1, r25	; 0x01
    b2d2:	a2 83       	std	Z+2, r26	; 0x02
    b2d4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b2d6:	8e 01       	movw	r16, r28
    b2d8:	0b 5b       	subi	r16, 0xBB	; 187
    b2da:	1d 4f       	sbci	r17, 0xFD	; 253
    b2dc:	ce 01       	movw	r24, r28
    b2de:	8f 5b       	subi	r24, 0xBF	; 191
    b2e0:	9d 4f       	sbci	r25, 0xFD	; 253
    b2e2:	fc 01       	movw	r30, r24
    b2e4:	60 81       	ld	r22, Z
    b2e6:	71 81       	ldd	r23, Z+1	; 0x01
    b2e8:	82 81       	ldd	r24, Z+2	; 0x02
    b2ea:	93 81       	ldd	r25, Z+3	; 0x03
    b2ec:	26 e6       	ldi	r18, 0x66	; 102
    b2ee:	36 e6       	ldi	r19, 0x66	; 102
    b2f0:	46 e6       	ldi	r20, 0x66	; 102
    b2f2:	55 e4       	ldi	r21, 0x45	; 69
    b2f4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b2f8:	dc 01       	movw	r26, r24
    b2fa:	cb 01       	movw	r24, r22
    b2fc:	f8 01       	movw	r30, r16
    b2fe:	80 83       	st	Z, r24
    b300:	91 83       	std	Z+1, r25	; 0x01
    b302:	a2 83       	std	Z+2, r26	; 0x02
    b304:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b306:	ce 01       	movw	r24, r28
    b308:	8b 5b       	subi	r24, 0xBB	; 187
    b30a:	9d 4f       	sbci	r25, 0xFD	; 253
    b30c:	11 e0       	ldi	r17, 0x01	; 1
    b30e:	fc 01       	movw	r30, r24
    b310:	60 81       	ld	r22, Z
    b312:	71 81       	ldd	r23, Z+1	; 0x01
    b314:	82 81       	ldd	r24, Z+2	; 0x02
    b316:	93 81       	ldd	r25, Z+3	; 0x03
    b318:	20 e0       	ldi	r18, 0x00	; 0
    b31a:	30 e0       	ldi	r19, 0x00	; 0
    b31c:	40 e8       	ldi	r20, 0x80	; 128
    b31e:	5f e3       	ldi	r21, 0x3F	; 63
    b320:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    b324:	88 23       	and	r24, r24
    b326:	0c f0       	brlt	.+2      	; 0xb32a <pick_drop+0x4418>
    b328:	10 e0       	ldi	r17, 0x00	; 0
    b32a:	11 23       	and	r17, r17
    b32c:	49 f0       	breq	.+18     	; 0xb340 <pick_drop+0x442e>
		__ticks = 1;
    b32e:	ce 01       	movw	r24, r28
    b330:	87 5b       	subi	r24, 0xB7	; 183
    b332:	9d 4f       	sbci	r25, 0xFD	; 253
    b334:	21 e0       	ldi	r18, 0x01	; 1
    b336:	30 e0       	ldi	r19, 0x00	; 0
    b338:	fc 01       	movw	r30, r24
    b33a:	31 83       	std	Z+1, r19	; 0x01
    b33c:	20 83       	st	Z, r18
    b33e:	74 c0       	rjmp	.+232    	; 0xb428 <pick_drop+0x4516>
	else if (__tmp > 65535)
    b340:	ce 01       	movw	r24, r28
    b342:	8b 5b       	subi	r24, 0xBB	; 187
    b344:	9d 4f       	sbci	r25, 0xFD	; 253
    b346:	11 e0       	ldi	r17, 0x01	; 1
    b348:	fc 01       	movw	r30, r24
    b34a:	60 81       	ld	r22, Z
    b34c:	71 81       	ldd	r23, Z+1	; 0x01
    b34e:	82 81       	ldd	r24, Z+2	; 0x02
    b350:	93 81       	ldd	r25, Z+3	; 0x03
    b352:	20 e0       	ldi	r18, 0x00	; 0
    b354:	3f ef       	ldi	r19, 0xFF	; 255
    b356:	4f e7       	ldi	r20, 0x7F	; 127
    b358:	57 e4       	ldi	r21, 0x47	; 71
    b35a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    b35e:	18 16       	cp	r1, r24
    b360:	0c f0       	brlt	.+2      	; 0xb364 <pick_drop+0x4452>
    b362:	10 e0       	ldi	r17, 0x00	; 0
    b364:	11 23       	and	r17, r17
    b366:	09 f4       	brne	.+2      	; 0xb36a <pick_drop+0x4458>
    b368:	4d c0       	rjmp	.+154    	; 0xb404 <pick_drop+0x44f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b36a:	ce 01       	movw	r24, r28
    b36c:	8f 5b       	subi	r24, 0xBF	; 191
    b36e:	9d 4f       	sbci	r25, 0xFD	; 253
    b370:	fc 01       	movw	r30, r24
    b372:	60 81       	ld	r22, Z
    b374:	71 81       	ldd	r23, Z+1	; 0x01
    b376:	82 81       	ldd	r24, Z+2	; 0x02
    b378:	93 81       	ldd	r25, Z+3	; 0x03
    b37a:	20 e0       	ldi	r18, 0x00	; 0
    b37c:	30 e0       	ldi	r19, 0x00	; 0
    b37e:	40 e2       	ldi	r20, 0x20	; 32
    b380:	51 e4       	ldi	r21, 0x41	; 65
    b382:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b386:	dc 01       	movw	r26, r24
    b388:	cb 01       	movw	r24, r22
    b38a:	8e 01       	movw	r16, r28
    b38c:	07 5b       	subi	r16, 0xB7	; 183
    b38e:	1d 4f       	sbci	r17, 0xFD	; 253
    b390:	bc 01       	movw	r22, r24
    b392:	cd 01       	movw	r24, r26
    b394:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b398:	dc 01       	movw	r26, r24
    b39a:	cb 01       	movw	r24, r22
    b39c:	f8 01       	movw	r30, r16
    b39e:	91 83       	std	Z+1, r25	; 0x01
    b3a0:	80 83       	st	Z, r24
    b3a2:	27 c0       	rjmp	.+78     	; 0xb3f2 <pick_drop+0x44e0>
    b3a4:	ce 01       	movw	r24, r28
    b3a6:	85 5b       	subi	r24, 0xB5	; 181
    b3a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b3aa:	20 e7       	ldi	r18, 0x70	; 112
    b3ac:	31 e0       	ldi	r19, 0x01	; 1
    b3ae:	fc 01       	movw	r30, r24
    b3b0:	31 83       	std	Z+1, r19	; 0x01
    b3b2:	20 83       	st	Z, r18
    b3b4:	ce 01       	movw	r24, r28
    b3b6:	85 5b       	subi	r24, 0xB5	; 181
    b3b8:	9d 4f       	sbci	r25, 0xFD	; 253
    b3ba:	fc 01       	movw	r30, r24
    b3bc:	80 81       	ld	r24, Z
    b3be:	91 81       	ldd	r25, Z+1	; 0x01
    b3c0:	8c 01       	movw	r16, r24
    b3c2:	c8 01       	movw	r24, r16
    b3c4:	01 97       	sbiw	r24, 0x01	; 1
    b3c6:	f1 f7       	brne	.-4      	; 0xb3c4 <pick_drop+0x44b2>
    b3c8:	8c 01       	movw	r16, r24
    b3ca:	ce 01       	movw	r24, r28
    b3cc:	85 5b       	subi	r24, 0xB5	; 181
    b3ce:	9d 4f       	sbci	r25, 0xFD	; 253
    b3d0:	fc 01       	movw	r30, r24
    b3d2:	11 83       	std	Z+1, r17	; 0x01
    b3d4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b3d6:	ce 01       	movw	r24, r28
    b3d8:	87 5b       	subi	r24, 0xB7	; 183
    b3da:	9d 4f       	sbci	r25, 0xFD	; 253
    b3dc:	9e 01       	movw	r18, r28
    b3de:	27 5b       	subi	r18, 0xB7	; 183
    b3e0:	3d 4f       	sbci	r19, 0xFD	; 253
    b3e2:	f9 01       	movw	r30, r18
    b3e4:	20 81       	ld	r18, Z
    b3e6:	31 81       	ldd	r19, Z+1	; 0x01
    b3e8:	21 50       	subi	r18, 0x01	; 1
    b3ea:	30 40       	sbci	r19, 0x00	; 0
    b3ec:	fc 01       	movw	r30, r24
    b3ee:	31 83       	std	Z+1, r19	; 0x01
    b3f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b3f2:	ce 01       	movw	r24, r28
    b3f4:	87 5b       	subi	r24, 0xB7	; 183
    b3f6:	9d 4f       	sbci	r25, 0xFD	; 253
    b3f8:	fc 01       	movw	r30, r24
    b3fa:	80 81       	ld	r24, Z
    b3fc:	91 81       	ldd	r25, Z+1	; 0x01
    b3fe:	00 97       	sbiw	r24, 0x00	; 0
    b400:	89 f6       	brne	.-94     	; 0xb3a4 <pick_drop+0x4492>
    b402:	2f c0       	rjmp	.+94     	; 0xb462 <pick_drop+0x4550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b404:	8e 01       	movw	r16, r28
    b406:	07 5b       	subi	r16, 0xB7	; 183
    b408:	1d 4f       	sbci	r17, 0xFD	; 253
    b40a:	ce 01       	movw	r24, r28
    b40c:	8b 5b       	subi	r24, 0xBB	; 187
    b40e:	9d 4f       	sbci	r25, 0xFD	; 253
    b410:	fc 01       	movw	r30, r24
    b412:	60 81       	ld	r22, Z
    b414:	71 81       	ldd	r23, Z+1	; 0x01
    b416:	82 81       	ldd	r24, Z+2	; 0x02
    b418:	93 81       	ldd	r25, Z+3	; 0x03
    b41a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b41e:	dc 01       	movw	r26, r24
    b420:	cb 01       	movw	r24, r22
    b422:	f8 01       	movw	r30, r16
    b424:	91 83       	std	Z+1, r25	; 0x01
    b426:	80 83       	st	Z, r24
    b428:	ce 01       	movw	r24, r28
    b42a:	83 5b       	subi	r24, 0xB3	; 179
    b42c:	9d 4f       	sbci	r25, 0xFD	; 253
    b42e:	9e 01       	movw	r18, r28
    b430:	27 5b       	subi	r18, 0xB7	; 183
    b432:	3d 4f       	sbci	r19, 0xFD	; 253
    b434:	f9 01       	movw	r30, r18
    b436:	20 81       	ld	r18, Z
    b438:	31 81       	ldd	r19, Z+1	; 0x01
    b43a:	fc 01       	movw	r30, r24
    b43c:	31 83       	std	Z+1, r19	; 0x01
    b43e:	20 83       	st	Z, r18
    b440:	ce 01       	movw	r24, r28
    b442:	83 5b       	subi	r24, 0xB3	; 179
    b444:	9d 4f       	sbci	r25, 0xFD	; 253
    b446:	fc 01       	movw	r30, r24
    b448:	80 81       	ld	r24, Z
    b44a:	91 81       	ldd	r25, Z+1	; 0x01
    b44c:	8c 01       	movw	r16, r24
    b44e:	c8 01       	movw	r24, r16
    b450:	01 97       	sbiw	r24, 0x01	; 1
    b452:	f1 f7       	brne	.-4      	; 0xb450 <pick_drop+0x453e>
    b454:	8c 01       	movw	r16, r24
    b456:	ce 01       	movw	r24, r28
    b458:	83 5b       	subi	r24, 0xB3	; 179
    b45a:	9d 4f       	sbci	r25, 0xFD	; 253
    b45c:	fc 01       	movw	r30, r24
    b45e:	11 83       	std	Z+1, r17	; 0x01
    b460:	00 83       	st	Z, r16
			}
			else
			{
				_delay_ms(20);
				forward_mm(55);
    b462:	87 e3       	ldi	r24, 0x37	; 55
    b464:	90 e0       	ldi	r25, 0x00	; 0
    b466:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b46a:	9e 01       	movw	r18, r28
    b46c:	21 5b       	subi	r18, 0xB1	; 177
    b46e:	3d 4f       	sbci	r19, 0xFD	; 253
    b470:	80 e0       	ldi	r24, 0x00	; 0
    b472:	90 e0       	ldi	r25, 0x00	; 0
    b474:	a0 ea       	ldi	r26, 0xA0	; 160
    b476:	b1 e4       	ldi	r27, 0x41	; 65
    b478:	f9 01       	movw	r30, r18
    b47a:	80 83       	st	Z, r24
    b47c:	91 83       	std	Z+1, r25	; 0x01
    b47e:	a2 83       	std	Z+2, r26	; 0x02
    b480:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b482:	8e 01       	movw	r16, r28
    b484:	0d 5a       	subi	r16, 0xAD	; 173
    b486:	1d 4f       	sbci	r17, 0xFD	; 253
    b488:	ce 01       	movw	r24, r28
    b48a:	81 5b       	subi	r24, 0xB1	; 177
    b48c:	9d 4f       	sbci	r25, 0xFD	; 253
    b48e:	fc 01       	movw	r30, r24
    b490:	60 81       	ld	r22, Z
    b492:	71 81       	ldd	r23, Z+1	; 0x01
    b494:	82 81       	ldd	r24, Z+2	; 0x02
    b496:	93 81       	ldd	r25, Z+3	; 0x03
    b498:	26 e6       	ldi	r18, 0x66	; 102
    b49a:	36 e6       	ldi	r19, 0x66	; 102
    b49c:	46 e6       	ldi	r20, 0x66	; 102
    b49e:	55 e4       	ldi	r21, 0x45	; 69
    b4a0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b4a4:	dc 01       	movw	r26, r24
    b4a6:	cb 01       	movw	r24, r22
    b4a8:	f8 01       	movw	r30, r16
    b4aa:	80 83       	st	Z, r24
    b4ac:	91 83       	std	Z+1, r25	; 0x01
    b4ae:	a2 83       	std	Z+2, r26	; 0x02
    b4b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b4b2:	ce 01       	movw	r24, r28
    b4b4:	8d 5a       	subi	r24, 0xAD	; 173
    b4b6:	9d 4f       	sbci	r25, 0xFD	; 253
    b4b8:	11 e0       	ldi	r17, 0x01	; 1
    b4ba:	fc 01       	movw	r30, r24
    b4bc:	60 81       	ld	r22, Z
    b4be:	71 81       	ldd	r23, Z+1	; 0x01
    b4c0:	82 81       	ldd	r24, Z+2	; 0x02
    b4c2:	93 81       	ldd	r25, Z+3	; 0x03
    b4c4:	20 e0       	ldi	r18, 0x00	; 0
    b4c6:	30 e0       	ldi	r19, 0x00	; 0
    b4c8:	40 e8       	ldi	r20, 0x80	; 128
    b4ca:	5f e3       	ldi	r21, 0x3F	; 63
    b4cc:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    b4d0:	88 23       	and	r24, r24
    b4d2:	0c f0       	brlt	.+2      	; 0xb4d6 <pick_drop+0x45c4>
    b4d4:	10 e0       	ldi	r17, 0x00	; 0
    b4d6:	11 23       	and	r17, r17
    b4d8:	49 f0       	breq	.+18     	; 0xb4ec <pick_drop+0x45da>
		__ticks = 1;
    b4da:	ce 01       	movw	r24, r28
    b4dc:	89 5a       	subi	r24, 0xA9	; 169
    b4de:	9d 4f       	sbci	r25, 0xFD	; 253
    b4e0:	21 e0       	ldi	r18, 0x01	; 1
    b4e2:	30 e0       	ldi	r19, 0x00	; 0
    b4e4:	fc 01       	movw	r30, r24
    b4e6:	31 83       	std	Z+1, r19	; 0x01
    b4e8:	20 83       	st	Z, r18
    b4ea:	74 c0       	rjmp	.+232    	; 0xb5d4 <pick_drop+0x46c2>
	else if (__tmp > 65535)
    b4ec:	ce 01       	movw	r24, r28
    b4ee:	8d 5a       	subi	r24, 0xAD	; 173
    b4f0:	9d 4f       	sbci	r25, 0xFD	; 253
    b4f2:	11 e0       	ldi	r17, 0x01	; 1
    b4f4:	fc 01       	movw	r30, r24
    b4f6:	60 81       	ld	r22, Z
    b4f8:	71 81       	ldd	r23, Z+1	; 0x01
    b4fa:	82 81       	ldd	r24, Z+2	; 0x02
    b4fc:	93 81       	ldd	r25, Z+3	; 0x03
    b4fe:	20 e0       	ldi	r18, 0x00	; 0
    b500:	3f ef       	ldi	r19, 0xFF	; 255
    b502:	4f e7       	ldi	r20, 0x7F	; 127
    b504:	57 e4       	ldi	r21, 0x47	; 71
    b506:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    b50a:	18 16       	cp	r1, r24
    b50c:	0c f0       	brlt	.+2      	; 0xb510 <pick_drop+0x45fe>
    b50e:	10 e0       	ldi	r17, 0x00	; 0
    b510:	11 23       	and	r17, r17
    b512:	09 f4       	brne	.+2      	; 0xb516 <pick_drop+0x4604>
    b514:	4d c0       	rjmp	.+154    	; 0xb5b0 <pick_drop+0x469e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b516:	ce 01       	movw	r24, r28
    b518:	81 5b       	subi	r24, 0xB1	; 177
    b51a:	9d 4f       	sbci	r25, 0xFD	; 253
    b51c:	fc 01       	movw	r30, r24
    b51e:	60 81       	ld	r22, Z
    b520:	71 81       	ldd	r23, Z+1	; 0x01
    b522:	82 81       	ldd	r24, Z+2	; 0x02
    b524:	93 81       	ldd	r25, Z+3	; 0x03
    b526:	20 e0       	ldi	r18, 0x00	; 0
    b528:	30 e0       	ldi	r19, 0x00	; 0
    b52a:	40 e2       	ldi	r20, 0x20	; 32
    b52c:	51 e4       	ldi	r21, 0x41	; 65
    b52e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b532:	dc 01       	movw	r26, r24
    b534:	cb 01       	movw	r24, r22
    b536:	8e 01       	movw	r16, r28
    b538:	09 5a       	subi	r16, 0xA9	; 169
    b53a:	1d 4f       	sbci	r17, 0xFD	; 253
    b53c:	bc 01       	movw	r22, r24
    b53e:	cd 01       	movw	r24, r26
    b540:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b544:	dc 01       	movw	r26, r24
    b546:	cb 01       	movw	r24, r22
    b548:	f8 01       	movw	r30, r16
    b54a:	91 83       	std	Z+1, r25	; 0x01
    b54c:	80 83       	st	Z, r24
    b54e:	27 c0       	rjmp	.+78     	; 0xb59e <pick_drop+0x468c>
    b550:	ce 01       	movw	r24, r28
    b552:	87 5a       	subi	r24, 0xA7	; 167
    b554:	9d 4f       	sbci	r25, 0xFD	; 253
    b556:	20 e7       	ldi	r18, 0x70	; 112
    b558:	31 e0       	ldi	r19, 0x01	; 1
    b55a:	fc 01       	movw	r30, r24
    b55c:	31 83       	std	Z+1, r19	; 0x01
    b55e:	20 83       	st	Z, r18
    b560:	ce 01       	movw	r24, r28
    b562:	87 5a       	subi	r24, 0xA7	; 167
    b564:	9d 4f       	sbci	r25, 0xFD	; 253
    b566:	fc 01       	movw	r30, r24
    b568:	80 81       	ld	r24, Z
    b56a:	91 81       	ldd	r25, Z+1	; 0x01
    b56c:	8c 01       	movw	r16, r24
    b56e:	c8 01       	movw	r24, r16
    b570:	01 97       	sbiw	r24, 0x01	; 1
    b572:	f1 f7       	brne	.-4      	; 0xb570 <pick_drop+0x465e>
    b574:	8c 01       	movw	r16, r24
    b576:	ce 01       	movw	r24, r28
    b578:	87 5a       	subi	r24, 0xA7	; 167
    b57a:	9d 4f       	sbci	r25, 0xFD	; 253
    b57c:	fc 01       	movw	r30, r24
    b57e:	11 83       	std	Z+1, r17	; 0x01
    b580:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b582:	ce 01       	movw	r24, r28
    b584:	89 5a       	subi	r24, 0xA9	; 169
    b586:	9d 4f       	sbci	r25, 0xFD	; 253
    b588:	9e 01       	movw	r18, r28
    b58a:	29 5a       	subi	r18, 0xA9	; 169
    b58c:	3d 4f       	sbci	r19, 0xFD	; 253
    b58e:	f9 01       	movw	r30, r18
    b590:	20 81       	ld	r18, Z
    b592:	31 81       	ldd	r19, Z+1	; 0x01
    b594:	21 50       	subi	r18, 0x01	; 1
    b596:	30 40       	sbci	r19, 0x00	; 0
    b598:	fc 01       	movw	r30, r24
    b59a:	31 83       	std	Z+1, r19	; 0x01
    b59c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b59e:	ce 01       	movw	r24, r28
    b5a0:	89 5a       	subi	r24, 0xA9	; 169
    b5a2:	9d 4f       	sbci	r25, 0xFD	; 253
    b5a4:	fc 01       	movw	r30, r24
    b5a6:	80 81       	ld	r24, Z
    b5a8:	91 81       	ldd	r25, Z+1	; 0x01
    b5aa:	00 97       	sbiw	r24, 0x00	; 0
    b5ac:	89 f6       	brne	.-94     	; 0xb550 <pick_drop+0x463e>
    b5ae:	2f c0       	rjmp	.+94     	; 0xb60e <pick_drop+0x46fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b5b0:	8e 01       	movw	r16, r28
    b5b2:	09 5a       	subi	r16, 0xA9	; 169
    b5b4:	1d 4f       	sbci	r17, 0xFD	; 253
    b5b6:	ce 01       	movw	r24, r28
    b5b8:	8d 5a       	subi	r24, 0xAD	; 173
    b5ba:	9d 4f       	sbci	r25, 0xFD	; 253
    b5bc:	fc 01       	movw	r30, r24
    b5be:	60 81       	ld	r22, Z
    b5c0:	71 81       	ldd	r23, Z+1	; 0x01
    b5c2:	82 81       	ldd	r24, Z+2	; 0x02
    b5c4:	93 81       	ldd	r25, Z+3	; 0x03
    b5c6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b5ca:	dc 01       	movw	r26, r24
    b5cc:	cb 01       	movw	r24, r22
    b5ce:	f8 01       	movw	r30, r16
    b5d0:	91 83       	std	Z+1, r25	; 0x01
    b5d2:	80 83       	st	Z, r24
    b5d4:	ce 01       	movw	r24, r28
    b5d6:	85 5a       	subi	r24, 0xA5	; 165
    b5d8:	9d 4f       	sbci	r25, 0xFD	; 253
    b5da:	9e 01       	movw	r18, r28
    b5dc:	29 5a       	subi	r18, 0xA9	; 169
    b5de:	3d 4f       	sbci	r19, 0xFD	; 253
    b5e0:	f9 01       	movw	r30, r18
    b5e2:	20 81       	ld	r18, Z
    b5e4:	31 81       	ldd	r19, Z+1	; 0x01
    b5e6:	fc 01       	movw	r30, r24
    b5e8:	31 83       	std	Z+1, r19	; 0x01
    b5ea:	20 83       	st	Z, r18
    b5ec:	ce 01       	movw	r24, r28
    b5ee:	85 5a       	subi	r24, 0xA5	; 165
    b5f0:	9d 4f       	sbci	r25, 0xFD	; 253
    b5f2:	fc 01       	movw	r30, r24
    b5f4:	80 81       	ld	r24, Z
    b5f6:	91 81       	ldd	r25, Z+1	; 0x01
    b5f8:	8c 01       	movw	r16, r24
    b5fa:	c8 01       	movw	r24, r16
    b5fc:	01 97       	sbiw	r24, 0x01	; 1
    b5fe:	f1 f7       	brne	.-4      	; 0xb5fc <pick_drop+0x46ea>
    b600:	8c 01       	movw	r16, r24
    b602:	ce 01       	movw	r24, r28
    b604:	85 5a       	subi	r24, 0xA5	; 165
    b606:	9d 4f       	sbci	r25, 0xFD	; 253
    b608:	fc 01       	movw	r30, r24
    b60a:	11 83       	std	Z+1, r17	; 0x01
    b60c:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_right();
    b60e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
    b612:	9e 01       	movw	r18, r28
    b614:	23 5a       	subi	r18, 0xA3	; 163
    b616:	3d 4f       	sbci	r19, 0xFD	; 253
    b618:	80 e0       	ldi	r24, 0x00	; 0
    b61a:	90 e0       	ldi	r25, 0x00	; 0
    b61c:	a0 ea       	ldi	r26, 0xA0	; 160
    b61e:	b1 e4       	ldi	r27, 0x41	; 65
    b620:	f9 01       	movw	r30, r18
    b622:	80 83       	st	Z, r24
    b624:	91 83       	std	Z+1, r25	; 0x01
    b626:	a2 83       	std	Z+2, r26	; 0x02
    b628:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b62a:	8e 01       	movw	r16, r28
    b62c:	0f 59       	subi	r16, 0x9F	; 159
    b62e:	1d 4f       	sbci	r17, 0xFD	; 253
    b630:	ce 01       	movw	r24, r28
    b632:	83 5a       	subi	r24, 0xA3	; 163
    b634:	9d 4f       	sbci	r25, 0xFD	; 253
    b636:	fc 01       	movw	r30, r24
    b638:	60 81       	ld	r22, Z
    b63a:	71 81       	ldd	r23, Z+1	; 0x01
    b63c:	82 81       	ldd	r24, Z+2	; 0x02
    b63e:	93 81       	ldd	r25, Z+3	; 0x03
    b640:	26 e6       	ldi	r18, 0x66	; 102
    b642:	36 e6       	ldi	r19, 0x66	; 102
    b644:	46 e6       	ldi	r20, 0x66	; 102
    b646:	55 e4       	ldi	r21, 0x45	; 69
    b648:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b64c:	dc 01       	movw	r26, r24
    b64e:	cb 01       	movw	r24, r22
    b650:	f8 01       	movw	r30, r16
    b652:	80 83       	st	Z, r24
    b654:	91 83       	std	Z+1, r25	; 0x01
    b656:	a2 83       	std	Z+2, r26	; 0x02
    b658:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b65a:	ce 01       	movw	r24, r28
    b65c:	8f 59       	subi	r24, 0x9F	; 159
    b65e:	9d 4f       	sbci	r25, 0xFD	; 253
    b660:	11 e0       	ldi	r17, 0x01	; 1
    b662:	fc 01       	movw	r30, r24
    b664:	60 81       	ld	r22, Z
    b666:	71 81       	ldd	r23, Z+1	; 0x01
    b668:	82 81       	ldd	r24, Z+2	; 0x02
    b66a:	93 81       	ldd	r25, Z+3	; 0x03
    b66c:	20 e0       	ldi	r18, 0x00	; 0
    b66e:	30 e0       	ldi	r19, 0x00	; 0
    b670:	40 e8       	ldi	r20, 0x80	; 128
    b672:	5f e3       	ldi	r21, 0x3F	; 63
    b674:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    b678:	88 23       	and	r24, r24
    b67a:	0c f0       	brlt	.+2      	; 0xb67e <pick_drop+0x476c>
    b67c:	10 e0       	ldi	r17, 0x00	; 0
    b67e:	11 23       	and	r17, r17
    b680:	49 f0       	breq	.+18     	; 0xb694 <pick_drop+0x4782>
		__ticks = 1;
    b682:	ce 01       	movw	r24, r28
    b684:	8b 59       	subi	r24, 0x9B	; 155
    b686:	9d 4f       	sbci	r25, 0xFD	; 253
    b688:	21 e0       	ldi	r18, 0x01	; 1
    b68a:	30 e0       	ldi	r19, 0x00	; 0
    b68c:	fc 01       	movw	r30, r24
    b68e:	31 83       	std	Z+1, r19	; 0x01
    b690:	20 83       	st	Z, r18
    b692:	74 c0       	rjmp	.+232    	; 0xb77c <pick_drop+0x486a>
	else if (__tmp > 65535)
    b694:	ce 01       	movw	r24, r28
    b696:	8f 59       	subi	r24, 0x9F	; 159
    b698:	9d 4f       	sbci	r25, 0xFD	; 253
    b69a:	11 e0       	ldi	r17, 0x01	; 1
    b69c:	fc 01       	movw	r30, r24
    b69e:	60 81       	ld	r22, Z
    b6a0:	71 81       	ldd	r23, Z+1	; 0x01
    b6a2:	82 81       	ldd	r24, Z+2	; 0x02
    b6a4:	93 81       	ldd	r25, Z+3	; 0x03
    b6a6:	20 e0       	ldi	r18, 0x00	; 0
    b6a8:	3f ef       	ldi	r19, 0xFF	; 255
    b6aa:	4f e7       	ldi	r20, 0x7F	; 127
    b6ac:	57 e4       	ldi	r21, 0x47	; 71
    b6ae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    b6b2:	18 16       	cp	r1, r24
    b6b4:	0c f0       	brlt	.+2      	; 0xb6b8 <pick_drop+0x47a6>
    b6b6:	10 e0       	ldi	r17, 0x00	; 0
    b6b8:	11 23       	and	r17, r17
    b6ba:	09 f4       	brne	.+2      	; 0xb6be <pick_drop+0x47ac>
    b6bc:	4d c0       	rjmp	.+154    	; 0xb758 <pick_drop+0x4846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b6be:	ce 01       	movw	r24, r28
    b6c0:	83 5a       	subi	r24, 0xA3	; 163
    b6c2:	9d 4f       	sbci	r25, 0xFD	; 253
    b6c4:	fc 01       	movw	r30, r24
    b6c6:	60 81       	ld	r22, Z
    b6c8:	71 81       	ldd	r23, Z+1	; 0x01
    b6ca:	82 81       	ldd	r24, Z+2	; 0x02
    b6cc:	93 81       	ldd	r25, Z+3	; 0x03
    b6ce:	20 e0       	ldi	r18, 0x00	; 0
    b6d0:	30 e0       	ldi	r19, 0x00	; 0
    b6d2:	40 e2       	ldi	r20, 0x20	; 32
    b6d4:	51 e4       	ldi	r21, 0x41	; 65
    b6d6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b6da:	dc 01       	movw	r26, r24
    b6dc:	cb 01       	movw	r24, r22
    b6de:	8e 01       	movw	r16, r28
    b6e0:	0b 59       	subi	r16, 0x9B	; 155
    b6e2:	1d 4f       	sbci	r17, 0xFD	; 253
    b6e4:	bc 01       	movw	r22, r24
    b6e6:	cd 01       	movw	r24, r26
    b6e8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b6ec:	dc 01       	movw	r26, r24
    b6ee:	cb 01       	movw	r24, r22
    b6f0:	f8 01       	movw	r30, r16
    b6f2:	91 83       	std	Z+1, r25	; 0x01
    b6f4:	80 83       	st	Z, r24
    b6f6:	27 c0       	rjmp	.+78     	; 0xb746 <pick_drop+0x4834>
    b6f8:	ce 01       	movw	r24, r28
    b6fa:	89 59       	subi	r24, 0x99	; 153
    b6fc:	9d 4f       	sbci	r25, 0xFD	; 253
    b6fe:	20 e7       	ldi	r18, 0x70	; 112
    b700:	31 e0       	ldi	r19, 0x01	; 1
    b702:	fc 01       	movw	r30, r24
    b704:	31 83       	std	Z+1, r19	; 0x01
    b706:	20 83       	st	Z, r18
    b708:	ce 01       	movw	r24, r28
    b70a:	89 59       	subi	r24, 0x99	; 153
    b70c:	9d 4f       	sbci	r25, 0xFD	; 253
    b70e:	fc 01       	movw	r30, r24
    b710:	80 81       	ld	r24, Z
    b712:	91 81       	ldd	r25, Z+1	; 0x01
    b714:	8c 01       	movw	r16, r24
    b716:	c8 01       	movw	r24, r16
    b718:	01 97       	sbiw	r24, 0x01	; 1
    b71a:	f1 f7       	brne	.-4      	; 0xb718 <pick_drop+0x4806>
    b71c:	8c 01       	movw	r16, r24
    b71e:	ce 01       	movw	r24, r28
    b720:	89 59       	subi	r24, 0x99	; 153
    b722:	9d 4f       	sbci	r25, 0xFD	; 253
    b724:	fc 01       	movw	r30, r24
    b726:	11 83       	std	Z+1, r17	; 0x01
    b728:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b72a:	ce 01       	movw	r24, r28
    b72c:	8b 59       	subi	r24, 0x9B	; 155
    b72e:	9d 4f       	sbci	r25, 0xFD	; 253
    b730:	9e 01       	movw	r18, r28
    b732:	2b 59       	subi	r18, 0x9B	; 155
    b734:	3d 4f       	sbci	r19, 0xFD	; 253
    b736:	f9 01       	movw	r30, r18
    b738:	20 81       	ld	r18, Z
    b73a:	31 81       	ldd	r19, Z+1	; 0x01
    b73c:	21 50       	subi	r18, 0x01	; 1
    b73e:	30 40       	sbci	r19, 0x00	; 0
    b740:	fc 01       	movw	r30, r24
    b742:	31 83       	std	Z+1, r19	; 0x01
    b744:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b746:	ce 01       	movw	r24, r28
    b748:	8b 59       	subi	r24, 0x9B	; 155
    b74a:	9d 4f       	sbci	r25, 0xFD	; 253
    b74c:	fc 01       	movw	r30, r24
    b74e:	80 81       	ld	r24, Z
    b750:	91 81       	ldd	r25, Z+1	; 0x01
    b752:	00 97       	sbiw	r24, 0x00	; 0
    b754:	89 f6       	brne	.-94     	; 0xb6f8 <pick_drop+0x47e6>
    b756:	2f c0       	rjmp	.+94     	; 0xb7b6 <pick_drop+0x48a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b758:	8e 01       	movw	r16, r28
    b75a:	0b 59       	subi	r16, 0x9B	; 155
    b75c:	1d 4f       	sbci	r17, 0xFD	; 253
    b75e:	ce 01       	movw	r24, r28
    b760:	8f 59       	subi	r24, 0x9F	; 159
    b762:	9d 4f       	sbci	r25, 0xFD	; 253
    b764:	fc 01       	movw	r30, r24
    b766:	60 81       	ld	r22, Z
    b768:	71 81       	ldd	r23, Z+1	; 0x01
    b76a:	82 81       	ldd	r24, Z+2	; 0x02
    b76c:	93 81       	ldd	r25, Z+3	; 0x03
    b76e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b772:	dc 01       	movw	r26, r24
    b774:	cb 01       	movw	r24, r22
    b776:	f8 01       	movw	r30, r16
    b778:	91 83       	std	Z+1, r25	; 0x01
    b77a:	80 83       	st	Z, r24
    b77c:	ce 01       	movw	r24, r28
    b77e:	87 59       	subi	r24, 0x97	; 151
    b780:	9d 4f       	sbci	r25, 0xFD	; 253
    b782:	9e 01       	movw	r18, r28
    b784:	2b 59       	subi	r18, 0x9B	; 155
    b786:	3d 4f       	sbci	r19, 0xFD	; 253
    b788:	f9 01       	movw	r30, r18
    b78a:	20 81       	ld	r18, Z
    b78c:	31 81       	ldd	r19, Z+1	; 0x01
    b78e:	fc 01       	movw	r30, r24
    b790:	31 83       	std	Z+1, r19	; 0x01
    b792:	20 83       	st	Z, r18
    b794:	ce 01       	movw	r24, r28
    b796:	87 59       	subi	r24, 0x97	; 151
    b798:	9d 4f       	sbci	r25, 0xFD	; 253
    b79a:	fc 01       	movw	r30, r24
    b79c:	80 81       	ld	r24, Z
    b79e:	91 81       	ldd	r25, Z+1	; 0x01
    b7a0:	8c 01       	movw	r16, r24
    b7a2:	c8 01       	movw	r24, r16
    b7a4:	01 97       	sbiw	r24, 0x01	; 1
    b7a6:	f1 f7       	brne	.-4      	; 0xb7a4 <pick_drop+0x4892>
    b7a8:	8c 01       	movw	r16, r24
    b7aa:	ce 01       	movw	r24, r28
    b7ac:	87 59       	subi	r24, 0x97	; 151
    b7ae:	9d 4f       	sbci	r25, 0xFD	; 253
    b7b0:	fc 01       	movw	r30, r24
    b7b2:	11 83       	std	Z+1, r17	; 0x01
    b7b4:	00 83       	st	Z, r16
				_delay_ms(20);
				back_mm(20);
    b7b6:	84 e1       	ldi	r24, 0x14	; 20
    b7b8:	90 e0       	ldi	r25, 0x00	; 0
    b7ba:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    b7be:	9e 01       	movw	r18, r28
    b7c0:	25 59       	subi	r18, 0x95	; 149
    b7c2:	3d 4f       	sbci	r19, 0xFD	; 253
    b7c4:	80 e0       	ldi	r24, 0x00	; 0
    b7c6:	90 e0       	ldi	r25, 0x00	; 0
    b7c8:	a0 ea       	ldi	r26, 0xA0	; 160
    b7ca:	b1 e4       	ldi	r27, 0x41	; 65
    b7cc:	f9 01       	movw	r30, r18
    b7ce:	80 83       	st	Z, r24
    b7d0:	91 83       	std	Z+1, r25	; 0x01
    b7d2:	a2 83       	std	Z+2, r26	; 0x02
    b7d4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b7d6:	8e 01       	movw	r16, r28
    b7d8:	01 59       	subi	r16, 0x91	; 145
    b7da:	1d 4f       	sbci	r17, 0xFD	; 253
    b7dc:	ce 01       	movw	r24, r28
    b7de:	85 59       	subi	r24, 0x95	; 149
    b7e0:	9d 4f       	sbci	r25, 0xFD	; 253
    b7e2:	fc 01       	movw	r30, r24
    b7e4:	60 81       	ld	r22, Z
    b7e6:	71 81       	ldd	r23, Z+1	; 0x01
    b7e8:	82 81       	ldd	r24, Z+2	; 0x02
    b7ea:	93 81       	ldd	r25, Z+3	; 0x03
    b7ec:	26 e6       	ldi	r18, 0x66	; 102
    b7ee:	36 e6       	ldi	r19, 0x66	; 102
    b7f0:	46 e6       	ldi	r20, 0x66	; 102
    b7f2:	55 e4       	ldi	r21, 0x45	; 69
    b7f4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b7f8:	dc 01       	movw	r26, r24
    b7fa:	cb 01       	movw	r24, r22
    b7fc:	f8 01       	movw	r30, r16
    b7fe:	80 83       	st	Z, r24
    b800:	91 83       	std	Z+1, r25	; 0x01
    b802:	a2 83       	std	Z+2, r26	; 0x02
    b804:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b806:	ce 01       	movw	r24, r28
    b808:	81 59       	subi	r24, 0x91	; 145
    b80a:	9d 4f       	sbci	r25, 0xFD	; 253
    b80c:	11 e0       	ldi	r17, 0x01	; 1
    b80e:	fc 01       	movw	r30, r24
    b810:	60 81       	ld	r22, Z
    b812:	71 81       	ldd	r23, Z+1	; 0x01
    b814:	82 81       	ldd	r24, Z+2	; 0x02
    b816:	93 81       	ldd	r25, Z+3	; 0x03
    b818:	20 e0       	ldi	r18, 0x00	; 0
    b81a:	30 e0       	ldi	r19, 0x00	; 0
    b81c:	40 e8       	ldi	r20, 0x80	; 128
    b81e:	5f e3       	ldi	r21, 0x3F	; 63
    b820:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    b824:	88 23       	and	r24, r24
    b826:	0c f0       	brlt	.+2      	; 0xb82a <pick_drop+0x4918>
    b828:	10 e0       	ldi	r17, 0x00	; 0
    b82a:	11 23       	and	r17, r17
    b82c:	49 f0       	breq	.+18     	; 0xb840 <pick_drop+0x492e>
		__ticks = 1;
    b82e:	ce 01       	movw	r24, r28
    b830:	8d 58       	subi	r24, 0x8D	; 141
    b832:	9d 4f       	sbci	r25, 0xFD	; 253
    b834:	21 e0       	ldi	r18, 0x01	; 1
    b836:	30 e0       	ldi	r19, 0x00	; 0
    b838:	fc 01       	movw	r30, r24
    b83a:	31 83       	std	Z+1, r19	; 0x01
    b83c:	20 83       	st	Z, r18
    b83e:	74 c0       	rjmp	.+232    	; 0xb928 <pick_drop+0x4a16>
	else if (__tmp > 65535)
    b840:	ce 01       	movw	r24, r28
    b842:	81 59       	subi	r24, 0x91	; 145
    b844:	9d 4f       	sbci	r25, 0xFD	; 253
    b846:	11 e0       	ldi	r17, 0x01	; 1
    b848:	fc 01       	movw	r30, r24
    b84a:	60 81       	ld	r22, Z
    b84c:	71 81       	ldd	r23, Z+1	; 0x01
    b84e:	82 81       	ldd	r24, Z+2	; 0x02
    b850:	93 81       	ldd	r25, Z+3	; 0x03
    b852:	20 e0       	ldi	r18, 0x00	; 0
    b854:	3f ef       	ldi	r19, 0xFF	; 255
    b856:	4f e7       	ldi	r20, 0x7F	; 127
    b858:	57 e4       	ldi	r21, 0x47	; 71
    b85a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    b85e:	18 16       	cp	r1, r24
    b860:	0c f0       	brlt	.+2      	; 0xb864 <pick_drop+0x4952>
    b862:	10 e0       	ldi	r17, 0x00	; 0
    b864:	11 23       	and	r17, r17
    b866:	09 f4       	brne	.+2      	; 0xb86a <pick_drop+0x4958>
    b868:	4d c0       	rjmp	.+154    	; 0xb904 <pick_drop+0x49f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b86a:	ce 01       	movw	r24, r28
    b86c:	85 59       	subi	r24, 0x95	; 149
    b86e:	9d 4f       	sbci	r25, 0xFD	; 253
    b870:	fc 01       	movw	r30, r24
    b872:	60 81       	ld	r22, Z
    b874:	71 81       	ldd	r23, Z+1	; 0x01
    b876:	82 81       	ldd	r24, Z+2	; 0x02
    b878:	93 81       	ldd	r25, Z+3	; 0x03
    b87a:	20 e0       	ldi	r18, 0x00	; 0
    b87c:	30 e0       	ldi	r19, 0x00	; 0
    b87e:	40 e2       	ldi	r20, 0x20	; 32
    b880:	51 e4       	ldi	r21, 0x41	; 65
    b882:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b886:	dc 01       	movw	r26, r24
    b888:	cb 01       	movw	r24, r22
    b88a:	8e 01       	movw	r16, r28
    b88c:	0d 58       	subi	r16, 0x8D	; 141
    b88e:	1d 4f       	sbci	r17, 0xFD	; 253
    b890:	bc 01       	movw	r22, r24
    b892:	cd 01       	movw	r24, r26
    b894:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b898:	dc 01       	movw	r26, r24
    b89a:	cb 01       	movw	r24, r22
    b89c:	f8 01       	movw	r30, r16
    b89e:	91 83       	std	Z+1, r25	; 0x01
    b8a0:	80 83       	st	Z, r24
    b8a2:	27 c0       	rjmp	.+78     	; 0xb8f2 <pick_drop+0x49e0>
    b8a4:	ce 01       	movw	r24, r28
    b8a6:	8b 58       	subi	r24, 0x8B	; 139
    b8a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b8aa:	20 e7       	ldi	r18, 0x70	; 112
    b8ac:	31 e0       	ldi	r19, 0x01	; 1
    b8ae:	fc 01       	movw	r30, r24
    b8b0:	31 83       	std	Z+1, r19	; 0x01
    b8b2:	20 83       	st	Z, r18
    b8b4:	ce 01       	movw	r24, r28
    b8b6:	8b 58       	subi	r24, 0x8B	; 139
    b8b8:	9d 4f       	sbci	r25, 0xFD	; 253
    b8ba:	fc 01       	movw	r30, r24
    b8bc:	80 81       	ld	r24, Z
    b8be:	91 81       	ldd	r25, Z+1	; 0x01
    b8c0:	8c 01       	movw	r16, r24
    b8c2:	c8 01       	movw	r24, r16
    b8c4:	01 97       	sbiw	r24, 0x01	; 1
    b8c6:	f1 f7       	brne	.-4      	; 0xb8c4 <pick_drop+0x49b2>
    b8c8:	8c 01       	movw	r16, r24
    b8ca:	ce 01       	movw	r24, r28
    b8cc:	8b 58       	subi	r24, 0x8B	; 139
    b8ce:	9d 4f       	sbci	r25, 0xFD	; 253
    b8d0:	fc 01       	movw	r30, r24
    b8d2:	11 83       	std	Z+1, r17	; 0x01
    b8d4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b8d6:	ce 01       	movw	r24, r28
    b8d8:	8d 58       	subi	r24, 0x8D	; 141
    b8da:	9d 4f       	sbci	r25, 0xFD	; 253
    b8dc:	9e 01       	movw	r18, r28
    b8de:	2d 58       	subi	r18, 0x8D	; 141
    b8e0:	3d 4f       	sbci	r19, 0xFD	; 253
    b8e2:	f9 01       	movw	r30, r18
    b8e4:	20 81       	ld	r18, Z
    b8e6:	31 81       	ldd	r19, Z+1	; 0x01
    b8e8:	21 50       	subi	r18, 0x01	; 1
    b8ea:	30 40       	sbci	r19, 0x00	; 0
    b8ec:	fc 01       	movw	r30, r24
    b8ee:	31 83       	std	Z+1, r19	; 0x01
    b8f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b8f2:	ce 01       	movw	r24, r28
    b8f4:	8d 58       	subi	r24, 0x8D	; 141
    b8f6:	9d 4f       	sbci	r25, 0xFD	; 253
    b8f8:	fc 01       	movw	r30, r24
    b8fa:	80 81       	ld	r24, Z
    b8fc:	91 81       	ldd	r25, Z+1	; 0x01
    b8fe:	00 97       	sbiw	r24, 0x00	; 0
    b900:	89 f6       	brne	.-94     	; 0xb8a4 <pick_drop+0x4992>
    b902:	2f c0       	rjmp	.+94     	; 0xb962 <pick_drop+0x4a50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b904:	8e 01       	movw	r16, r28
    b906:	0d 58       	subi	r16, 0x8D	; 141
    b908:	1d 4f       	sbci	r17, 0xFD	; 253
    b90a:	ce 01       	movw	r24, r28
    b90c:	81 59       	subi	r24, 0x91	; 145
    b90e:	9d 4f       	sbci	r25, 0xFD	; 253
    b910:	fc 01       	movw	r30, r24
    b912:	60 81       	ld	r22, Z
    b914:	71 81       	ldd	r23, Z+1	; 0x01
    b916:	82 81       	ldd	r24, Z+2	; 0x02
    b918:	93 81       	ldd	r25, Z+3	; 0x03
    b91a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    b91e:	dc 01       	movw	r26, r24
    b920:	cb 01       	movw	r24, r22
    b922:	f8 01       	movw	r30, r16
    b924:	91 83       	std	Z+1, r25	; 0x01
    b926:	80 83       	st	Z, r24
    b928:	ce 01       	movw	r24, r28
    b92a:	89 58       	subi	r24, 0x89	; 137
    b92c:	9d 4f       	sbci	r25, 0xFD	; 253
    b92e:	9e 01       	movw	r18, r28
    b930:	2d 58       	subi	r18, 0x8D	; 141
    b932:	3d 4f       	sbci	r19, 0xFD	; 253
    b934:	f9 01       	movw	r30, r18
    b936:	20 81       	ld	r18, Z
    b938:	31 81       	ldd	r19, Z+1	; 0x01
    b93a:	fc 01       	movw	r30, r24
    b93c:	31 83       	std	Z+1, r19	; 0x01
    b93e:	20 83       	st	Z, r18
    b940:	ce 01       	movw	r24, r28
    b942:	89 58       	subi	r24, 0x89	; 137
    b944:	9d 4f       	sbci	r25, 0xFD	; 253
    b946:	fc 01       	movw	r30, r24
    b948:	80 81       	ld	r24, Z
    b94a:	91 81       	ldd	r25, Z+1	; 0x01
    b94c:	8c 01       	movw	r16, r24
    b94e:	c8 01       	movw	r24, r16
    b950:	01 97       	sbiw	r24, 0x01	; 1
    b952:	f1 f7       	brne	.-4      	; 0xb950 <pick_drop+0x4a3e>
    b954:	8c 01       	movw	r16, r24
    b956:	ce 01       	movw	r24, r28
    b958:	89 58       	subi	r24, 0x89	; 137
    b95a:	9d 4f       	sbci	r25, 0xFD	; 253
    b95c:	fc 01       	movw	r30, r24
    b95e:	11 83       	std	Z+1, r17	; 0x01
    b960:	00 83       	st	Z, r16
				_delay_ms(20);
				front();
    b962:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    b966:	9e 01       	movw	r18, r28
    b968:	27 58       	subi	r18, 0x87	; 135
    b96a:	3d 4f       	sbci	r19, 0xFD	; 253
    b96c:	80 e0       	ldi	r24, 0x00	; 0
    b96e:	90 e0       	ldi	r25, 0x00	; 0
    b970:	a8 ec       	ldi	r26, 0xC8	; 200
    b972:	b2 e4       	ldi	r27, 0x42	; 66
    b974:	f9 01       	movw	r30, r18
    b976:	80 83       	st	Z, r24
    b978:	91 83       	std	Z+1, r25	; 0x01
    b97a:	a2 83       	std	Z+2, r26	; 0x02
    b97c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b97e:	8e 01       	movw	r16, r28
    b980:	03 58       	subi	r16, 0x83	; 131
    b982:	1d 4f       	sbci	r17, 0xFD	; 253
    b984:	ce 01       	movw	r24, r28
    b986:	87 58       	subi	r24, 0x87	; 135
    b988:	9d 4f       	sbci	r25, 0xFD	; 253
    b98a:	fc 01       	movw	r30, r24
    b98c:	60 81       	ld	r22, Z
    b98e:	71 81       	ldd	r23, Z+1	; 0x01
    b990:	82 81       	ldd	r24, Z+2	; 0x02
    b992:	93 81       	ldd	r25, Z+3	; 0x03
    b994:	26 e6       	ldi	r18, 0x66	; 102
    b996:	36 e6       	ldi	r19, 0x66	; 102
    b998:	46 e6       	ldi	r20, 0x66	; 102
    b99a:	55 e4       	ldi	r21, 0x45	; 69
    b99c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    b9a0:	dc 01       	movw	r26, r24
    b9a2:	cb 01       	movw	r24, r22
    b9a4:	f8 01       	movw	r30, r16
    b9a6:	80 83       	st	Z, r24
    b9a8:	91 83       	std	Z+1, r25	; 0x01
    b9aa:	a2 83       	std	Z+2, r26	; 0x02
    b9ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b9ae:	ce 01       	movw	r24, r28
    b9b0:	83 58       	subi	r24, 0x83	; 131
    b9b2:	9d 4f       	sbci	r25, 0xFD	; 253
    b9b4:	11 e0       	ldi	r17, 0x01	; 1
    b9b6:	fc 01       	movw	r30, r24
    b9b8:	60 81       	ld	r22, Z
    b9ba:	71 81       	ldd	r23, Z+1	; 0x01
    b9bc:	82 81       	ldd	r24, Z+2	; 0x02
    b9be:	93 81       	ldd	r25, Z+3	; 0x03
    b9c0:	20 e0       	ldi	r18, 0x00	; 0
    b9c2:	30 e0       	ldi	r19, 0x00	; 0
    b9c4:	40 e8       	ldi	r20, 0x80	; 128
    b9c6:	5f e3       	ldi	r21, 0x3F	; 63
    b9c8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    b9cc:	88 23       	and	r24, r24
    b9ce:	0c f0       	brlt	.+2      	; 0xb9d2 <pick_drop+0x4ac0>
    b9d0:	10 e0       	ldi	r17, 0x00	; 0
    b9d2:	11 23       	and	r17, r17
    b9d4:	49 f0       	breq	.+18     	; 0xb9e8 <pick_drop+0x4ad6>
		__ticks = 1;
    b9d6:	ce 01       	movw	r24, r28
    b9d8:	8f 57       	subi	r24, 0x7F	; 127
    b9da:	9d 4f       	sbci	r25, 0xFD	; 253
    b9dc:	21 e0       	ldi	r18, 0x01	; 1
    b9de:	30 e0       	ldi	r19, 0x00	; 0
    b9e0:	fc 01       	movw	r30, r24
    b9e2:	31 83       	std	Z+1, r19	; 0x01
    b9e4:	20 83       	st	Z, r18
    b9e6:	74 c0       	rjmp	.+232    	; 0xbad0 <pick_drop+0x4bbe>
	else if (__tmp > 65535)
    b9e8:	ce 01       	movw	r24, r28
    b9ea:	83 58       	subi	r24, 0x83	; 131
    b9ec:	9d 4f       	sbci	r25, 0xFD	; 253
    b9ee:	11 e0       	ldi	r17, 0x01	; 1
    b9f0:	fc 01       	movw	r30, r24
    b9f2:	60 81       	ld	r22, Z
    b9f4:	71 81       	ldd	r23, Z+1	; 0x01
    b9f6:	82 81       	ldd	r24, Z+2	; 0x02
    b9f8:	93 81       	ldd	r25, Z+3	; 0x03
    b9fa:	20 e0       	ldi	r18, 0x00	; 0
    b9fc:	3f ef       	ldi	r19, 0xFF	; 255
    b9fe:	4f e7       	ldi	r20, 0x7F	; 127
    ba00:	57 e4       	ldi	r21, 0x47	; 71
    ba02:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ba06:	18 16       	cp	r1, r24
    ba08:	0c f0       	brlt	.+2      	; 0xba0c <pick_drop+0x4afa>
    ba0a:	10 e0       	ldi	r17, 0x00	; 0
    ba0c:	11 23       	and	r17, r17
    ba0e:	09 f4       	brne	.+2      	; 0xba12 <pick_drop+0x4b00>
    ba10:	4d c0       	rjmp	.+154    	; 0xbaac <pick_drop+0x4b9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ba12:	ce 01       	movw	r24, r28
    ba14:	87 58       	subi	r24, 0x87	; 135
    ba16:	9d 4f       	sbci	r25, 0xFD	; 253
    ba18:	fc 01       	movw	r30, r24
    ba1a:	60 81       	ld	r22, Z
    ba1c:	71 81       	ldd	r23, Z+1	; 0x01
    ba1e:	82 81       	ldd	r24, Z+2	; 0x02
    ba20:	93 81       	ldd	r25, Z+3	; 0x03
    ba22:	20 e0       	ldi	r18, 0x00	; 0
    ba24:	30 e0       	ldi	r19, 0x00	; 0
    ba26:	40 e2       	ldi	r20, 0x20	; 32
    ba28:	51 e4       	ldi	r21, 0x41	; 65
    ba2a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ba2e:	dc 01       	movw	r26, r24
    ba30:	cb 01       	movw	r24, r22
    ba32:	8e 01       	movw	r16, r28
    ba34:	0f 57       	subi	r16, 0x7F	; 127
    ba36:	1d 4f       	sbci	r17, 0xFD	; 253
    ba38:	bc 01       	movw	r22, r24
    ba3a:	cd 01       	movw	r24, r26
    ba3c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ba40:	dc 01       	movw	r26, r24
    ba42:	cb 01       	movw	r24, r22
    ba44:	f8 01       	movw	r30, r16
    ba46:	91 83       	std	Z+1, r25	; 0x01
    ba48:	80 83       	st	Z, r24
    ba4a:	27 c0       	rjmp	.+78     	; 0xba9a <pick_drop+0x4b88>
    ba4c:	ce 01       	movw	r24, r28
    ba4e:	8d 57       	subi	r24, 0x7D	; 125
    ba50:	9d 4f       	sbci	r25, 0xFD	; 253
    ba52:	20 e7       	ldi	r18, 0x70	; 112
    ba54:	31 e0       	ldi	r19, 0x01	; 1
    ba56:	fc 01       	movw	r30, r24
    ba58:	31 83       	std	Z+1, r19	; 0x01
    ba5a:	20 83       	st	Z, r18
    ba5c:	ce 01       	movw	r24, r28
    ba5e:	8d 57       	subi	r24, 0x7D	; 125
    ba60:	9d 4f       	sbci	r25, 0xFD	; 253
    ba62:	fc 01       	movw	r30, r24
    ba64:	80 81       	ld	r24, Z
    ba66:	91 81       	ldd	r25, Z+1	; 0x01
    ba68:	8c 01       	movw	r16, r24
    ba6a:	c8 01       	movw	r24, r16
    ba6c:	01 97       	sbiw	r24, 0x01	; 1
    ba6e:	f1 f7       	brne	.-4      	; 0xba6c <pick_drop+0x4b5a>
    ba70:	8c 01       	movw	r16, r24
    ba72:	ce 01       	movw	r24, r28
    ba74:	8d 57       	subi	r24, 0x7D	; 125
    ba76:	9d 4f       	sbci	r25, 0xFD	; 253
    ba78:	fc 01       	movw	r30, r24
    ba7a:	11 83       	std	Z+1, r17	; 0x01
    ba7c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ba7e:	ce 01       	movw	r24, r28
    ba80:	8f 57       	subi	r24, 0x7F	; 127
    ba82:	9d 4f       	sbci	r25, 0xFD	; 253
    ba84:	9e 01       	movw	r18, r28
    ba86:	2f 57       	subi	r18, 0x7F	; 127
    ba88:	3d 4f       	sbci	r19, 0xFD	; 253
    ba8a:	f9 01       	movw	r30, r18
    ba8c:	20 81       	ld	r18, Z
    ba8e:	31 81       	ldd	r19, Z+1	; 0x01
    ba90:	21 50       	subi	r18, 0x01	; 1
    ba92:	30 40       	sbci	r19, 0x00	; 0
    ba94:	fc 01       	movw	r30, r24
    ba96:	31 83       	std	Z+1, r19	; 0x01
    ba98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ba9a:	ce 01       	movw	r24, r28
    ba9c:	8f 57       	subi	r24, 0x7F	; 127
    ba9e:	9d 4f       	sbci	r25, 0xFD	; 253
    baa0:	fc 01       	movw	r30, r24
    baa2:	80 81       	ld	r24, Z
    baa4:	91 81       	ldd	r25, Z+1	; 0x01
    baa6:	00 97       	sbiw	r24, 0x00	; 0
    baa8:	89 f6       	brne	.-94     	; 0xba4c <pick_drop+0x4b3a>
    baaa:	2f c0       	rjmp	.+94     	; 0xbb0a <pick_drop+0x4bf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    baac:	8e 01       	movw	r16, r28
    baae:	0f 57       	subi	r16, 0x7F	; 127
    bab0:	1d 4f       	sbci	r17, 0xFD	; 253
    bab2:	ce 01       	movw	r24, r28
    bab4:	83 58       	subi	r24, 0x83	; 131
    bab6:	9d 4f       	sbci	r25, 0xFD	; 253
    bab8:	fc 01       	movw	r30, r24
    baba:	60 81       	ld	r22, Z
    babc:	71 81       	ldd	r23, Z+1	; 0x01
    babe:	82 81       	ldd	r24, Z+2	; 0x02
    bac0:	93 81       	ldd	r25, Z+3	; 0x03
    bac2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    bac6:	dc 01       	movw	r26, r24
    bac8:	cb 01       	movw	r24, r22
    baca:	f8 01       	movw	r30, r16
    bacc:	91 83       	std	Z+1, r25	; 0x01
    bace:	80 83       	st	Z, r24
    bad0:	ce 01       	movw	r24, r28
    bad2:	8b 57       	subi	r24, 0x7B	; 123
    bad4:	9d 4f       	sbci	r25, 0xFD	; 253
    bad6:	9e 01       	movw	r18, r28
    bad8:	2f 57       	subi	r18, 0x7F	; 127
    bada:	3d 4f       	sbci	r19, 0xFD	; 253
    badc:	f9 01       	movw	r30, r18
    bade:	20 81       	ld	r18, Z
    bae0:	31 81       	ldd	r19, Z+1	; 0x01
    bae2:	fc 01       	movw	r30, r24
    bae4:	31 83       	std	Z+1, r19	; 0x01
    bae6:	20 83       	st	Z, r18
    bae8:	ce 01       	movw	r24, r28
    baea:	8b 57       	subi	r24, 0x7B	; 123
    baec:	9d 4f       	sbci	r25, 0xFD	; 253
    baee:	fc 01       	movw	r30, r24
    baf0:	80 81       	ld	r24, Z
    baf2:	91 81       	ldd	r25, Z+1	; 0x01
    baf4:	8c 01       	movw	r16, r24
    baf6:	c8 01       	movw	r24, r16
    baf8:	01 97       	sbiw	r24, 0x01	; 1
    bafa:	f1 f7       	brne	.-4      	; 0xbaf8 <pick_drop+0x4be6>
    bafc:	8c 01       	movw	r16, r24
    bafe:	ce 01       	movw	r24, r28
    bb00:	8b 57       	subi	r24, 0x7B	; 123
    bb02:	9d 4f       	sbci	r25, 0xFD	; 253
    bb04:	fc 01       	movw	r30, r24
    bb06:	11 83       	std	Z+1, r17	; 0x01
    bb08:	00 83       	st	Z, r16
				_delay_ms(100);
				forward_mm(20);
    bb0a:	84 e1       	ldi	r24, 0x14	; 20
    bb0c:	90 e0       	ldi	r25, 0x00	; 0
    bb0e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    bb12:	9e 01       	movw	r18, r28
    bb14:	29 57       	subi	r18, 0x79	; 121
    bb16:	3d 4f       	sbci	r19, 0xFD	; 253
    bb18:	80 e0       	ldi	r24, 0x00	; 0
    bb1a:	90 e0       	ldi	r25, 0x00	; 0
    bb1c:	a0 ea       	ldi	r26, 0xA0	; 160
    bb1e:	b1 e4       	ldi	r27, 0x41	; 65
    bb20:	f9 01       	movw	r30, r18
    bb22:	80 83       	st	Z, r24
    bb24:	91 83       	std	Z+1, r25	; 0x01
    bb26:	a2 83       	std	Z+2, r26	; 0x02
    bb28:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bb2a:	8e 01       	movw	r16, r28
    bb2c:	05 57       	subi	r16, 0x75	; 117
    bb2e:	1d 4f       	sbci	r17, 0xFD	; 253
    bb30:	ce 01       	movw	r24, r28
    bb32:	89 57       	subi	r24, 0x79	; 121
    bb34:	9d 4f       	sbci	r25, 0xFD	; 253
    bb36:	fc 01       	movw	r30, r24
    bb38:	60 81       	ld	r22, Z
    bb3a:	71 81       	ldd	r23, Z+1	; 0x01
    bb3c:	82 81       	ldd	r24, Z+2	; 0x02
    bb3e:	93 81       	ldd	r25, Z+3	; 0x03
    bb40:	26 e6       	ldi	r18, 0x66	; 102
    bb42:	36 e6       	ldi	r19, 0x66	; 102
    bb44:	46 e6       	ldi	r20, 0x66	; 102
    bb46:	55 e4       	ldi	r21, 0x45	; 69
    bb48:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    bb4c:	dc 01       	movw	r26, r24
    bb4e:	cb 01       	movw	r24, r22
    bb50:	f8 01       	movw	r30, r16
    bb52:	80 83       	st	Z, r24
    bb54:	91 83       	std	Z+1, r25	; 0x01
    bb56:	a2 83       	std	Z+2, r26	; 0x02
    bb58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bb5a:	ce 01       	movw	r24, r28
    bb5c:	85 57       	subi	r24, 0x75	; 117
    bb5e:	9d 4f       	sbci	r25, 0xFD	; 253
    bb60:	11 e0       	ldi	r17, 0x01	; 1
    bb62:	fc 01       	movw	r30, r24
    bb64:	60 81       	ld	r22, Z
    bb66:	71 81       	ldd	r23, Z+1	; 0x01
    bb68:	82 81       	ldd	r24, Z+2	; 0x02
    bb6a:	93 81       	ldd	r25, Z+3	; 0x03
    bb6c:	20 e0       	ldi	r18, 0x00	; 0
    bb6e:	30 e0       	ldi	r19, 0x00	; 0
    bb70:	40 e8       	ldi	r20, 0x80	; 128
    bb72:	5f e3       	ldi	r21, 0x3F	; 63
    bb74:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    bb78:	88 23       	and	r24, r24
    bb7a:	0c f0       	brlt	.+2      	; 0xbb7e <pick_drop+0x4c6c>
    bb7c:	10 e0       	ldi	r17, 0x00	; 0
    bb7e:	11 23       	and	r17, r17
    bb80:	49 f0       	breq	.+18     	; 0xbb94 <pick_drop+0x4c82>
		__ticks = 1;
    bb82:	ce 01       	movw	r24, r28
    bb84:	81 57       	subi	r24, 0x71	; 113
    bb86:	9d 4f       	sbci	r25, 0xFD	; 253
    bb88:	21 e0       	ldi	r18, 0x01	; 1
    bb8a:	30 e0       	ldi	r19, 0x00	; 0
    bb8c:	fc 01       	movw	r30, r24
    bb8e:	31 83       	std	Z+1, r19	; 0x01
    bb90:	20 83       	st	Z, r18
    bb92:	74 c0       	rjmp	.+232    	; 0xbc7c <pick_drop+0x4d6a>
	else if (__tmp > 65535)
    bb94:	ce 01       	movw	r24, r28
    bb96:	85 57       	subi	r24, 0x75	; 117
    bb98:	9d 4f       	sbci	r25, 0xFD	; 253
    bb9a:	11 e0       	ldi	r17, 0x01	; 1
    bb9c:	fc 01       	movw	r30, r24
    bb9e:	60 81       	ld	r22, Z
    bba0:	71 81       	ldd	r23, Z+1	; 0x01
    bba2:	82 81       	ldd	r24, Z+2	; 0x02
    bba4:	93 81       	ldd	r25, Z+3	; 0x03
    bba6:	20 e0       	ldi	r18, 0x00	; 0
    bba8:	3f ef       	ldi	r19, 0xFF	; 255
    bbaa:	4f e7       	ldi	r20, 0x7F	; 127
    bbac:	57 e4       	ldi	r21, 0x47	; 71
    bbae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    bbb2:	18 16       	cp	r1, r24
    bbb4:	0c f0       	brlt	.+2      	; 0xbbb8 <pick_drop+0x4ca6>
    bbb6:	10 e0       	ldi	r17, 0x00	; 0
    bbb8:	11 23       	and	r17, r17
    bbba:	09 f4       	brne	.+2      	; 0xbbbe <pick_drop+0x4cac>
    bbbc:	4d c0       	rjmp	.+154    	; 0xbc58 <pick_drop+0x4d46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bbbe:	ce 01       	movw	r24, r28
    bbc0:	89 57       	subi	r24, 0x79	; 121
    bbc2:	9d 4f       	sbci	r25, 0xFD	; 253
    bbc4:	fc 01       	movw	r30, r24
    bbc6:	60 81       	ld	r22, Z
    bbc8:	71 81       	ldd	r23, Z+1	; 0x01
    bbca:	82 81       	ldd	r24, Z+2	; 0x02
    bbcc:	93 81       	ldd	r25, Z+3	; 0x03
    bbce:	20 e0       	ldi	r18, 0x00	; 0
    bbd0:	30 e0       	ldi	r19, 0x00	; 0
    bbd2:	40 e2       	ldi	r20, 0x20	; 32
    bbd4:	51 e4       	ldi	r21, 0x41	; 65
    bbd6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    bbda:	dc 01       	movw	r26, r24
    bbdc:	cb 01       	movw	r24, r22
    bbde:	8e 01       	movw	r16, r28
    bbe0:	01 57       	subi	r16, 0x71	; 113
    bbe2:	1d 4f       	sbci	r17, 0xFD	; 253
    bbe4:	bc 01       	movw	r22, r24
    bbe6:	cd 01       	movw	r24, r26
    bbe8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    bbec:	dc 01       	movw	r26, r24
    bbee:	cb 01       	movw	r24, r22
    bbf0:	f8 01       	movw	r30, r16
    bbf2:	91 83       	std	Z+1, r25	; 0x01
    bbf4:	80 83       	st	Z, r24
    bbf6:	27 c0       	rjmp	.+78     	; 0xbc46 <pick_drop+0x4d34>
    bbf8:	ce 01       	movw	r24, r28
    bbfa:	8f 56       	subi	r24, 0x6F	; 111
    bbfc:	9d 4f       	sbci	r25, 0xFD	; 253
    bbfe:	20 e7       	ldi	r18, 0x70	; 112
    bc00:	31 e0       	ldi	r19, 0x01	; 1
    bc02:	fc 01       	movw	r30, r24
    bc04:	31 83       	std	Z+1, r19	; 0x01
    bc06:	20 83       	st	Z, r18
    bc08:	ce 01       	movw	r24, r28
    bc0a:	8f 56       	subi	r24, 0x6F	; 111
    bc0c:	9d 4f       	sbci	r25, 0xFD	; 253
    bc0e:	fc 01       	movw	r30, r24
    bc10:	80 81       	ld	r24, Z
    bc12:	91 81       	ldd	r25, Z+1	; 0x01
    bc14:	8c 01       	movw	r16, r24
    bc16:	c8 01       	movw	r24, r16
    bc18:	01 97       	sbiw	r24, 0x01	; 1
    bc1a:	f1 f7       	brne	.-4      	; 0xbc18 <pick_drop+0x4d06>
    bc1c:	8c 01       	movw	r16, r24
    bc1e:	ce 01       	movw	r24, r28
    bc20:	8f 56       	subi	r24, 0x6F	; 111
    bc22:	9d 4f       	sbci	r25, 0xFD	; 253
    bc24:	fc 01       	movw	r30, r24
    bc26:	11 83       	std	Z+1, r17	; 0x01
    bc28:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bc2a:	ce 01       	movw	r24, r28
    bc2c:	81 57       	subi	r24, 0x71	; 113
    bc2e:	9d 4f       	sbci	r25, 0xFD	; 253
    bc30:	9e 01       	movw	r18, r28
    bc32:	21 57       	subi	r18, 0x71	; 113
    bc34:	3d 4f       	sbci	r19, 0xFD	; 253
    bc36:	f9 01       	movw	r30, r18
    bc38:	20 81       	ld	r18, Z
    bc3a:	31 81       	ldd	r19, Z+1	; 0x01
    bc3c:	21 50       	subi	r18, 0x01	; 1
    bc3e:	30 40       	sbci	r19, 0x00	; 0
    bc40:	fc 01       	movw	r30, r24
    bc42:	31 83       	std	Z+1, r19	; 0x01
    bc44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bc46:	ce 01       	movw	r24, r28
    bc48:	81 57       	subi	r24, 0x71	; 113
    bc4a:	9d 4f       	sbci	r25, 0xFD	; 253
    bc4c:	fc 01       	movw	r30, r24
    bc4e:	80 81       	ld	r24, Z
    bc50:	91 81       	ldd	r25, Z+1	; 0x01
    bc52:	00 97       	sbiw	r24, 0x00	; 0
    bc54:	89 f6       	brne	.-94     	; 0xbbf8 <pick_drop+0x4ce6>
    bc56:	2f c0       	rjmp	.+94     	; 0xbcb6 <pick_drop+0x4da4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bc58:	8e 01       	movw	r16, r28
    bc5a:	01 57       	subi	r16, 0x71	; 113
    bc5c:	1d 4f       	sbci	r17, 0xFD	; 253
    bc5e:	ce 01       	movw	r24, r28
    bc60:	85 57       	subi	r24, 0x75	; 117
    bc62:	9d 4f       	sbci	r25, 0xFD	; 253
    bc64:	fc 01       	movw	r30, r24
    bc66:	60 81       	ld	r22, Z
    bc68:	71 81       	ldd	r23, Z+1	; 0x01
    bc6a:	82 81       	ldd	r24, Z+2	; 0x02
    bc6c:	93 81       	ldd	r25, Z+3	; 0x03
    bc6e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    bc72:	dc 01       	movw	r26, r24
    bc74:	cb 01       	movw	r24, r22
    bc76:	f8 01       	movw	r30, r16
    bc78:	91 83       	std	Z+1, r25	; 0x01
    bc7a:	80 83       	st	Z, r24
    bc7c:	ce 01       	movw	r24, r28
    bc7e:	8d 56       	subi	r24, 0x6D	; 109
    bc80:	9d 4f       	sbci	r25, 0xFD	; 253
    bc82:	9e 01       	movw	r18, r28
    bc84:	21 57       	subi	r18, 0x71	; 113
    bc86:	3d 4f       	sbci	r19, 0xFD	; 253
    bc88:	f9 01       	movw	r30, r18
    bc8a:	20 81       	ld	r18, Z
    bc8c:	31 81       	ldd	r19, Z+1	; 0x01
    bc8e:	fc 01       	movw	r30, r24
    bc90:	31 83       	std	Z+1, r19	; 0x01
    bc92:	20 83       	st	Z, r18
    bc94:	ce 01       	movw	r24, r28
    bc96:	8d 56       	subi	r24, 0x6D	; 109
    bc98:	9d 4f       	sbci	r25, 0xFD	; 253
    bc9a:	fc 01       	movw	r30, r24
    bc9c:	80 81       	ld	r24, Z
    bc9e:	91 81       	ldd	r25, Z+1	; 0x01
    bca0:	8c 01       	movw	r16, r24
    bca2:	c8 01       	movw	r24, r16
    bca4:	01 97       	sbiw	r24, 0x01	; 1
    bca6:	f1 f7       	brne	.-4      	; 0xbca4 <pick_drop+0x4d92>
    bca8:	8c 01       	movw	r16, r24
    bcaa:	ce 01       	movw	r24, r28
    bcac:	8d 56       	subi	r24, 0x6D	; 109
    bcae:	9d 4f       	sbci	r25, 0xFD	; 253
    bcb0:	fc 01       	movw	r30, r24
    bcb2:	11 83       	std	Z+1, r17	; 0x01
    bcb4:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_left();
    bcb6:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
				back_mm(20);
    bcba:	84 e1       	ldi	r24, 0x14	; 20
    bcbc:	90 e0       	ldi	r25, 0x00	; 0
    bcbe:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    bcc2:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
			}			
	}
	else if(pd=='6'){// 6X1 A6
    bcc6:	ce 01       	movw	r24, r28
    bcc8:	89 59       	subi	r24, 0x99	; 153
    bcca:	9c 4f       	sbci	r25, 0xFC	; 252
    bccc:	fc 01       	movw	r30, r24
    bcce:	80 81       	ld	r24, Z
    bcd0:	86 33       	cpi	r24, 0x36	; 54
    bcd2:	09 f0       	breq	.+2      	; 0xbcd6 <pick_drop+0x4dc4>
    bcd4:	f2 c5       	rjmp	.+3044   	; 0xc8ba <pick_drop+0x59a8>
		if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    bcd6:	80 91 71 03 	lds	r24, 0x0371
    bcda:	90 91 72 03 	lds	r25, 0x0372
    bcde:	01 97       	sbiw	r24, 0x01	; 1
    bce0:	8b 58       	subi	r24, 0x8B	; 139
    bce2:	9c 4f       	sbci	r25, 0xFC	; 252
    bce4:	fc 01       	movw	r30, r24
    bce6:	80 81       	ld	r24, Z
    bce8:	8c 34       	cpi	r24, 0x4C	; 76
    bcea:	61 f0       	breq	.+24     	; 0xbd04 <pick_drop+0x4df2>
    bcec:	80 91 71 03 	lds	r24, 0x0371
    bcf0:	90 91 72 03 	lds	r25, 0x0372
    bcf4:	01 97       	sbiw	r24, 0x01	; 1
    bcf6:	8b 58       	subi	r24, 0x8B	; 139
    bcf8:	9c 4f       	sbci	r25, 0xFC	; 252
    bcfa:	fc 01       	movw	r30, r24
    bcfc:	80 81       	ld	r24, Z
    bcfe:	82 35       	cpi	r24, 0x52	; 82
    bd00:	09 f0       	breq	.+2      	; 0xbd04 <pick_drop+0x4df2>
    bd02:	b0 c1       	rjmp	.+864    	; 0xc064 <pick_drop+0x5152>
			forward_mm(20);
    bd04:	84 e1       	ldi	r24, 0x14	; 20
    bd06:	90 e0       	ldi	r25, 0x00	; 0
    bd08:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    bd0c:	9e 01       	movw	r18, r28
    bd0e:	2b 56       	subi	r18, 0x6B	; 107
    bd10:	3d 4f       	sbci	r19, 0xFD	; 253
    bd12:	80 e0       	ldi	r24, 0x00	; 0
    bd14:	90 e0       	ldi	r25, 0x00	; 0
    bd16:	a0 ea       	ldi	r26, 0xA0	; 160
    bd18:	b1 e4       	ldi	r27, 0x41	; 65
    bd1a:	f9 01       	movw	r30, r18
    bd1c:	80 83       	st	Z, r24
    bd1e:	91 83       	std	Z+1, r25	; 0x01
    bd20:	a2 83       	std	Z+2, r26	; 0x02
    bd22:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bd24:	8e 01       	movw	r16, r28
    bd26:	07 56       	subi	r16, 0x67	; 103
    bd28:	1d 4f       	sbci	r17, 0xFD	; 253
    bd2a:	ce 01       	movw	r24, r28
    bd2c:	8b 56       	subi	r24, 0x6B	; 107
    bd2e:	9d 4f       	sbci	r25, 0xFD	; 253
    bd30:	fc 01       	movw	r30, r24
    bd32:	60 81       	ld	r22, Z
    bd34:	71 81       	ldd	r23, Z+1	; 0x01
    bd36:	82 81       	ldd	r24, Z+2	; 0x02
    bd38:	93 81       	ldd	r25, Z+3	; 0x03
    bd3a:	26 e6       	ldi	r18, 0x66	; 102
    bd3c:	36 e6       	ldi	r19, 0x66	; 102
    bd3e:	46 e6       	ldi	r20, 0x66	; 102
    bd40:	55 e4       	ldi	r21, 0x45	; 69
    bd42:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    bd46:	dc 01       	movw	r26, r24
    bd48:	cb 01       	movw	r24, r22
    bd4a:	f8 01       	movw	r30, r16
    bd4c:	80 83       	st	Z, r24
    bd4e:	91 83       	std	Z+1, r25	; 0x01
    bd50:	a2 83       	std	Z+2, r26	; 0x02
    bd52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bd54:	ce 01       	movw	r24, r28
    bd56:	87 56       	subi	r24, 0x67	; 103
    bd58:	9d 4f       	sbci	r25, 0xFD	; 253
    bd5a:	11 e0       	ldi	r17, 0x01	; 1
    bd5c:	fc 01       	movw	r30, r24
    bd5e:	60 81       	ld	r22, Z
    bd60:	71 81       	ldd	r23, Z+1	; 0x01
    bd62:	82 81       	ldd	r24, Z+2	; 0x02
    bd64:	93 81       	ldd	r25, Z+3	; 0x03
    bd66:	20 e0       	ldi	r18, 0x00	; 0
    bd68:	30 e0       	ldi	r19, 0x00	; 0
    bd6a:	40 e8       	ldi	r20, 0x80	; 128
    bd6c:	5f e3       	ldi	r21, 0x3F	; 63
    bd6e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    bd72:	88 23       	and	r24, r24
    bd74:	0c f0       	brlt	.+2      	; 0xbd78 <pick_drop+0x4e66>
    bd76:	10 e0       	ldi	r17, 0x00	; 0
    bd78:	11 23       	and	r17, r17
    bd7a:	49 f0       	breq	.+18     	; 0xbd8e <pick_drop+0x4e7c>
		__ticks = 1;
    bd7c:	ce 01       	movw	r24, r28
    bd7e:	83 56       	subi	r24, 0x63	; 99
    bd80:	9d 4f       	sbci	r25, 0xFD	; 253
    bd82:	21 e0       	ldi	r18, 0x01	; 1
    bd84:	30 e0       	ldi	r19, 0x00	; 0
    bd86:	fc 01       	movw	r30, r24
    bd88:	31 83       	std	Z+1, r19	; 0x01
    bd8a:	20 83       	st	Z, r18
    bd8c:	74 c0       	rjmp	.+232    	; 0xbe76 <pick_drop+0x4f64>
	else if (__tmp > 65535)
    bd8e:	ce 01       	movw	r24, r28
    bd90:	87 56       	subi	r24, 0x67	; 103
    bd92:	9d 4f       	sbci	r25, 0xFD	; 253
    bd94:	11 e0       	ldi	r17, 0x01	; 1
    bd96:	fc 01       	movw	r30, r24
    bd98:	60 81       	ld	r22, Z
    bd9a:	71 81       	ldd	r23, Z+1	; 0x01
    bd9c:	82 81       	ldd	r24, Z+2	; 0x02
    bd9e:	93 81       	ldd	r25, Z+3	; 0x03
    bda0:	20 e0       	ldi	r18, 0x00	; 0
    bda2:	3f ef       	ldi	r19, 0xFF	; 255
    bda4:	4f e7       	ldi	r20, 0x7F	; 127
    bda6:	57 e4       	ldi	r21, 0x47	; 71
    bda8:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    bdac:	18 16       	cp	r1, r24
    bdae:	0c f0       	brlt	.+2      	; 0xbdb2 <pick_drop+0x4ea0>
    bdb0:	10 e0       	ldi	r17, 0x00	; 0
    bdb2:	11 23       	and	r17, r17
    bdb4:	09 f4       	brne	.+2      	; 0xbdb8 <pick_drop+0x4ea6>
    bdb6:	4d c0       	rjmp	.+154    	; 0xbe52 <pick_drop+0x4f40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bdb8:	ce 01       	movw	r24, r28
    bdba:	8b 56       	subi	r24, 0x6B	; 107
    bdbc:	9d 4f       	sbci	r25, 0xFD	; 253
    bdbe:	fc 01       	movw	r30, r24
    bdc0:	60 81       	ld	r22, Z
    bdc2:	71 81       	ldd	r23, Z+1	; 0x01
    bdc4:	82 81       	ldd	r24, Z+2	; 0x02
    bdc6:	93 81       	ldd	r25, Z+3	; 0x03
    bdc8:	20 e0       	ldi	r18, 0x00	; 0
    bdca:	30 e0       	ldi	r19, 0x00	; 0
    bdcc:	40 e2       	ldi	r20, 0x20	; 32
    bdce:	51 e4       	ldi	r21, 0x41	; 65
    bdd0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    bdd4:	dc 01       	movw	r26, r24
    bdd6:	cb 01       	movw	r24, r22
    bdd8:	8e 01       	movw	r16, r28
    bdda:	03 56       	subi	r16, 0x63	; 99
    bddc:	1d 4f       	sbci	r17, 0xFD	; 253
    bdde:	bc 01       	movw	r22, r24
    bde0:	cd 01       	movw	r24, r26
    bde2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    bde6:	dc 01       	movw	r26, r24
    bde8:	cb 01       	movw	r24, r22
    bdea:	f8 01       	movw	r30, r16
    bdec:	91 83       	std	Z+1, r25	; 0x01
    bdee:	80 83       	st	Z, r24
    bdf0:	27 c0       	rjmp	.+78     	; 0xbe40 <pick_drop+0x4f2e>
    bdf2:	ce 01       	movw	r24, r28
    bdf4:	81 56       	subi	r24, 0x61	; 97
    bdf6:	9d 4f       	sbci	r25, 0xFD	; 253
    bdf8:	20 e7       	ldi	r18, 0x70	; 112
    bdfa:	31 e0       	ldi	r19, 0x01	; 1
    bdfc:	fc 01       	movw	r30, r24
    bdfe:	31 83       	std	Z+1, r19	; 0x01
    be00:	20 83       	st	Z, r18
    be02:	ce 01       	movw	r24, r28
    be04:	81 56       	subi	r24, 0x61	; 97
    be06:	9d 4f       	sbci	r25, 0xFD	; 253
    be08:	fc 01       	movw	r30, r24
    be0a:	80 81       	ld	r24, Z
    be0c:	91 81       	ldd	r25, Z+1	; 0x01
    be0e:	8c 01       	movw	r16, r24
    be10:	c8 01       	movw	r24, r16
    be12:	01 97       	sbiw	r24, 0x01	; 1
    be14:	f1 f7       	brne	.-4      	; 0xbe12 <pick_drop+0x4f00>
    be16:	8c 01       	movw	r16, r24
    be18:	ce 01       	movw	r24, r28
    be1a:	81 56       	subi	r24, 0x61	; 97
    be1c:	9d 4f       	sbci	r25, 0xFD	; 253
    be1e:	fc 01       	movw	r30, r24
    be20:	11 83       	std	Z+1, r17	; 0x01
    be22:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    be24:	ce 01       	movw	r24, r28
    be26:	83 56       	subi	r24, 0x63	; 99
    be28:	9d 4f       	sbci	r25, 0xFD	; 253
    be2a:	9e 01       	movw	r18, r28
    be2c:	23 56       	subi	r18, 0x63	; 99
    be2e:	3d 4f       	sbci	r19, 0xFD	; 253
    be30:	f9 01       	movw	r30, r18
    be32:	20 81       	ld	r18, Z
    be34:	31 81       	ldd	r19, Z+1	; 0x01
    be36:	21 50       	subi	r18, 0x01	; 1
    be38:	30 40       	sbci	r19, 0x00	; 0
    be3a:	fc 01       	movw	r30, r24
    be3c:	31 83       	std	Z+1, r19	; 0x01
    be3e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    be40:	ce 01       	movw	r24, r28
    be42:	83 56       	subi	r24, 0x63	; 99
    be44:	9d 4f       	sbci	r25, 0xFD	; 253
    be46:	fc 01       	movw	r30, r24
    be48:	80 81       	ld	r24, Z
    be4a:	91 81       	ldd	r25, Z+1	; 0x01
    be4c:	00 97       	sbiw	r24, 0x00	; 0
    be4e:	89 f6       	brne	.-94     	; 0xbdf2 <pick_drop+0x4ee0>
    be50:	2f c0       	rjmp	.+94     	; 0xbeb0 <pick_drop+0x4f9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    be52:	8e 01       	movw	r16, r28
    be54:	03 56       	subi	r16, 0x63	; 99
    be56:	1d 4f       	sbci	r17, 0xFD	; 253
    be58:	ce 01       	movw	r24, r28
    be5a:	87 56       	subi	r24, 0x67	; 103
    be5c:	9d 4f       	sbci	r25, 0xFD	; 253
    be5e:	fc 01       	movw	r30, r24
    be60:	60 81       	ld	r22, Z
    be62:	71 81       	ldd	r23, Z+1	; 0x01
    be64:	82 81       	ldd	r24, Z+2	; 0x02
    be66:	93 81       	ldd	r25, Z+3	; 0x03
    be68:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    be6c:	dc 01       	movw	r26, r24
    be6e:	cb 01       	movw	r24, r22
    be70:	f8 01       	movw	r30, r16
    be72:	91 83       	std	Z+1, r25	; 0x01
    be74:	80 83       	st	Z, r24
    be76:	ce 01       	movw	r24, r28
    be78:	8f 55       	subi	r24, 0x5F	; 95
    be7a:	9d 4f       	sbci	r25, 0xFD	; 253
    be7c:	9e 01       	movw	r18, r28
    be7e:	23 56       	subi	r18, 0x63	; 99
    be80:	3d 4f       	sbci	r19, 0xFD	; 253
    be82:	f9 01       	movw	r30, r18
    be84:	20 81       	ld	r18, Z
    be86:	31 81       	ldd	r19, Z+1	; 0x01
    be88:	fc 01       	movw	r30, r24
    be8a:	31 83       	std	Z+1, r19	; 0x01
    be8c:	20 83       	st	Z, r18
    be8e:	ce 01       	movw	r24, r28
    be90:	8f 55       	subi	r24, 0x5F	; 95
    be92:	9d 4f       	sbci	r25, 0xFD	; 253
    be94:	fc 01       	movw	r30, r24
    be96:	80 81       	ld	r24, Z
    be98:	91 81       	ldd	r25, Z+1	; 0x01
    be9a:	8c 01       	movw	r16, r24
    be9c:	c8 01       	movw	r24, r16
    be9e:	01 97       	sbiw	r24, 0x01	; 1
    bea0:	f1 f7       	brne	.-4      	; 0xbe9e <pick_drop+0x4f8c>
    bea2:	8c 01       	movw	r16, r24
    bea4:	ce 01       	movw	r24, r28
    bea6:	8f 55       	subi	r24, 0x5F	; 95
    bea8:	9d 4f       	sbci	r25, 0xFD	; 253
    beaa:	fc 01       	movw	r30, r24
    beac:	11 83       	std	Z+1, r17	; 0x01
    beae:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    beb0:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    beb4:	9e 01       	movw	r18, r28
    beb6:	2d 55       	subi	r18, 0x5D	; 93
    beb8:	3d 4f       	sbci	r19, 0xFD	; 253
    beba:	80 e0       	ldi	r24, 0x00	; 0
    bebc:	90 e0       	ldi	r25, 0x00	; 0
    bebe:	a0 e2       	ldi	r26, 0x20	; 32
    bec0:	b1 e4       	ldi	r27, 0x41	; 65
    bec2:	f9 01       	movw	r30, r18
    bec4:	80 83       	st	Z, r24
    bec6:	91 83       	std	Z+1, r25	; 0x01
    bec8:	a2 83       	std	Z+2, r26	; 0x02
    beca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    becc:	8e 01       	movw	r16, r28
    bece:	09 55       	subi	r16, 0x59	; 89
    bed0:	1d 4f       	sbci	r17, 0xFD	; 253
    bed2:	ce 01       	movw	r24, r28
    bed4:	8d 55       	subi	r24, 0x5D	; 93
    bed6:	9d 4f       	sbci	r25, 0xFD	; 253
    bed8:	fc 01       	movw	r30, r24
    beda:	60 81       	ld	r22, Z
    bedc:	71 81       	ldd	r23, Z+1	; 0x01
    bede:	82 81       	ldd	r24, Z+2	; 0x02
    bee0:	93 81       	ldd	r25, Z+3	; 0x03
    bee2:	26 e6       	ldi	r18, 0x66	; 102
    bee4:	36 e6       	ldi	r19, 0x66	; 102
    bee6:	46 e6       	ldi	r20, 0x66	; 102
    bee8:	55 e4       	ldi	r21, 0x45	; 69
    beea:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    beee:	dc 01       	movw	r26, r24
    bef0:	cb 01       	movw	r24, r22
    bef2:	f8 01       	movw	r30, r16
    bef4:	80 83       	st	Z, r24
    bef6:	91 83       	std	Z+1, r25	; 0x01
    bef8:	a2 83       	std	Z+2, r26	; 0x02
    befa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    befc:	ce 01       	movw	r24, r28
    befe:	89 55       	subi	r24, 0x59	; 89
    bf00:	9d 4f       	sbci	r25, 0xFD	; 253
    bf02:	11 e0       	ldi	r17, 0x01	; 1
    bf04:	fc 01       	movw	r30, r24
    bf06:	60 81       	ld	r22, Z
    bf08:	71 81       	ldd	r23, Z+1	; 0x01
    bf0a:	82 81       	ldd	r24, Z+2	; 0x02
    bf0c:	93 81       	ldd	r25, Z+3	; 0x03
    bf0e:	20 e0       	ldi	r18, 0x00	; 0
    bf10:	30 e0       	ldi	r19, 0x00	; 0
    bf12:	40 e8       	ldi	r20, 0x80	; 128
    bf14:	5f e3       	ldi	r21, 0x3F	; 63
    bf16:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    bf1a:	88 23       	and	r24, r24
    bf1c:	0c f0       	brlt	.+2      	; 0xbf20 <pick_drop+0x500e>
    bf1e:	10 e0       	ldi	r17, 0x00	; 0
    bf20:	11 23       	and	r17, r17
    bf22:	49 f0       	breq	.+18     	; 0xbf36 <pick_drop+0x5024>
		__ticks = 1;
    bf24:	ce 01       	movw	r24, r28
    bf26:	85 55       	subi	r24, 0x55	; 85
    bf28:	9d 4f       	sbci	r25, 0xFD	; 253
    bf2a:	21 e0       	ldi	r18, 0x01	; 1
    bf2c:	30 e0       	ldi	r19, 0x00	; 0
    bf2e:	fc 01       	movw	r30, r24
    bf30:	31 83       	std	Z+1, r19	; 0x01
    bf32:	20 83       	st	Z, r18
    bf34:	74 c0       	rjmp	.+232    	; 0xc01e <pick_drop+0x510c>
	else if (__tmp > 65535)
    bf36:	ce 01       	movw	r24, r28
    bf38:	89 55       	subi	r24, 0x59	; 89
    bf3a:	9d 4f       	sbci	r25, 0xFD	; 253
    bf3c:	11 e0       	ldi	r17, 0x01	; 1
    bf3e:	fc 01       	movw	r30, r24
    bf40:	60 81       	ld	r22, Z
    bf42:	71 81       	ldd	r23, Z+1	; 0x01
    bf44:	82 81       	ldd	r24, Z+2	; 0x02
    bf46:	93 81       	ldd	r25, Z+3	; 0x03
    bf48:	20 e0       	ldi	r18, 0x00	; 0
    bf4a:	3f ef       	ldi	r19, 0xFF	; 255
    bf4c:	4f e7       	ldi	r20, 0x7F	; 127
    bf4e:	57 e4       	ldi	r21, 0x47	; 71
    bf50:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    bf54:	18 16       	cp	r1, r24
    bf56:	0c f0       	brlt	.+2      	; 0xbf5a <pick_drop+0x5048>
    bf58:	10 e0       	ldi	r17, 0x00	; 0
    bf5a:	11 23       	and	r17, r17
    bf5c:	09 f4       	brne	.+2      	; 0xbf60 <pick_drop+0x504e>
    bf5e:	4d c0       	rjmp	.+154    	; 0xbffa <pick_drop+0x50e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bf60:	ce 01       	movw	r24, r28
    bf62:	8d 55       	subi	r24, 0x5D	; 93
    bf64:	9d 4f       	sbci	r25, 0xFD	; 253
    bf66:	fc 01       	movw	r30, r24
    bf68:	60 81       	ld	r22, Z
    bf6a:	71 81       	ldd	r23, Z+1	; 0x01
    bf6c:	82 81       	ldd	r24, Z+2	; 0x02
    bf6e:	93 81       	ldd	r25, Z+3	; 0x03
    bf70:	20 e0       	ldi	r18, 0x00	; 0
    bf72:	30 e0       	ldi	r19, 0x00	; 0
    bf74:	40 e2       	ldi	r20, 0x20	; 32
    bf76:	51 e4       	ldi	r21, 0x41	; 65
    bf78:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    bf7c:	dc 01       	movw	r26, r24
    bf7e:	cb 01       	movw	r24, r22
    bf80:	8e 01       	movw	r16, r28
    bf82:	05 55       	subi	r16, 0x55	; 85
    bf84:	1d 4f       	sbci	r17, 0xFD	; 253
    bf86:	bc 01       	movw	r22, r24
    bf88:	cd 01       	movw	r24, r26
    bf8a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    bf8e:	dc 01       	movw	r26, r24
    bf90:	cb 01       	movw	r24, r22
    bf92:	f8 01       	movw	r30, r16
    bf94:	91 83       	std	Z+1, r25	; 0x01
    bf96:	80 83       	st	Z, r24
    bf98:	27 c0       	rjmp	.+78     	; 0xbfe8 <pick_drop+0x50d6>
    bf9a:	ce 01       	movw	r24, r28
    bf9c:	83 55       	subi	r24, 0x53	; 83
    bf9e:	9d 4f       	sbci	r25, 0xFD	; 253
    bfa0:	20 e7       	ldi	r18, 0x70	; 112
    bfa2:	31 e0       	ldi	r19, 0x01	; 1
    bfa4:	fc 01       	movw	r30, r24
    bfa6:	31 83       	std	Z+1, r19	; 0x01
    bfa8:	20 83       	st	Z, r18
    bfaa:	ce 01       	movw	r24, r28
    bfac:	83 55       	subi	r24, 0x53	; 83
    bfae:	9d 4f       	sbci	r25, 0xFD	; 253
    bfb0:	fc 01       	movw	r30, r24
    bfb2:	80 81       	ld	r24, Z
    bfb4:	91 81       	ldd	r25, Z+1	; 0x01
    bfb6:	8c 01       	movw	r16, r24
    bfb8:	c8 01       	movw	r24, r16
    bfba:	01 97       	sbiw	r24, 0x01	; 1
    bfbc:	f1 f7       	brne	.-4      	; 0xbfba <pick_drop+0x50a8>
    bfbe:	8c 01       	movw	r16, r24
    bfc0:	ce 01       	movw	r24, r28
    bfc2:	83 55       	subi	r24, 0x53	; 83
    bfc4:	9d 4f       	sbci	r25, 0xFD	; 253
    bfc6:	fc 01       	movw	r30, r24
    bfc8:	11 83       	std	Z+1, r17	; 0x01
    bfca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bfcc:	ce 01       	movw	r24, r28
    bfce:	85 55       	subi	r24, 0x55	; 85
    bfd0:	9d 4f       	sbci	r25, 0xFD	; 253
    bfd2:	9e 01       	movw	r18, r28
    bfd4:	25 55       	subi	r18, 0x55	; 85
    bfd6:	3d 4f       	sbci	r19, 0xFD	; 253
    bfd8:	f9 01       	movw	r30, r18
    bfda:	20 81       	ld	r18, Z
    bfdc:	31 81       	ldd	r19, Z+1	; 0x01
    bfde:	21 50       	subi	r18, 0x01	; 1
    bfe0:	30 40       	sbci	r19, 0x00	; 0
    bfe2:	fc 01       	movw	r30, r24
    bfe4:	31 83       	std	Z+1, r19	; 0x01
    bfe6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bfe8:	ce 01       	movw	r24, r28
    bfea:	85 55       	subi	r24, 0x55	; 85
    bfec:	9d 4f       	sbci	r25, 0xFD	; 253
    bfee:	fc 01       	movw	r30, r24
    bff0:	80 81       	ld	r24, Z
    bff2:	91 81       	ldd	r25, Z+1	; 0x01
    bff4:	00 97       	sbiw	r24, 0x00	; 0
    bff6:	89 f6       	brne	.-94     	; 0xbf9a <pick_drop+0x5088>
    bff8:	2f c0       	rjmp	.+94     	; 0xc058 <pick_drop+0x5146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bffa:	8e 01       	movw	r16, r28
    bffc:	05 55       	subi	r16, 0x55	; 85
    bffe:	1d 4f       	sbci	r17, 0xFD	; 253
    c000:	ce 01       	movw	r24, r28
    c002:	89 55       	subi	r24, 0x59	; 89
    c004:	9d 4f       	sbci	r25, 0xFD	; 253
    c006:	fc 01       	movw	r30, r24
    c008:	60 81       	ld	r22, Z
    c00a:	71 81       	ldd	r23, Z+1	; 0x01
    c00c:	82 81       	ldd	r24, Z+2	; 0x02
    c00e:	93 81       	ldd	r25, Z+3	; 0x03
    c010:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c014:	dc 01       	movw	r26, r24
    c016:	cb 01       	movw	r24, r22
    c018:	f8 01       	movw	r30, r16
    c01a:	91 83       	std	Z+1, r25	; 0x01
    c01c:	80 83       	st	Z, r24
    c01e:	ce 01       	movw	r24, r28
    c020:	81 55       	subi	r24, 0x51	; 81
    c022:	9d 4f       	sbci	r25, 0xFD	; 253
    c024:	9e 01       	movw	r18, r28
    c026:	25 55       	subi	r18, 0x55	; 85
    c028:	3d 4f       	sbci	r19, 0xFD	; 253
    c02a:	f9 01       	movw	r30, r18
    c02c:	20 81       	ld	r18, Z
    c02e:	31 81       	ldd	r19, Z+1	; 0x01
    c030:	fc 01       	movw	r30, r24
    c032:	31 83       	std	Z+1, r19	; 0x01
    c034:	20 83       	st	Z, r18
    c036:	ce 01       	movw	r24, r28
    c038:	81 55       	subi	r24, 0x51	; 81
    c03a:	9d 4f       	sbci	r25, 0xFD	; 253
    c03c:	fc 01       	movw	r30, r24
    c03e:	80 81       	ld	r24, Z
    c040:	91 81       	ldd	r25, Z+1	; 0x01
    c042:	8c 01       	movw	r16, r24
    c044:	c8 01       	movw	r24, r16
    c046:	01 97       	sbiw	r24, 0x01	; 1
    c048:	f1 f7       	brne	.-4      	; 0xc046 <pick_drop+0x5134>
    c04a:	8c 01       	movw	r16, r24
    c04c:	ce 01       	movw	r24, r28
    c04e:	81 55       	subi	r24, 0x51	; 81
    c050:	9d 4f       	sbci	r25, 0xFD	; 253
    c052:	fc 01       	movw	r30, r24
    c054:	11 83       	std	Z+1, r17	; 0x01
    c056:	00 83       	st	Z, r16
			_delay_ms(10);
			back_mm(20);
    c058:	84 e1       	ldi	r24, 0x14	; 20
    c05a:	90 e0       	ldi	r25, 0x00	; 0
    c05c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    c060:	0c 94 31 6b 	jmp	0xd662	; 0xd662 <pick_drop+0x6750>
		} 
		else{
			forward_mm(35);
    c064:	83 e2       	ldi	r24, 0x23	; 35
    c066:	90 e0       	ldi	r25, 0x00	; 0
    c068:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    c06c:	9e 01       	movw	r18, r28
    c06e:	2f 54       	subi	r18, 0x4F	; 79
    c070:	3d 4f       	sbci	r19, 0xFD	; 253
    c072:	80 e0       	ldi	r24, 0x00	; 0
    c074:	90 e0       	ldi	r25, 0x00	; 0
    c076:	a0 ea       	ldi	r26, 0xA0	; 160
    c078:	b1 e4       	ldi	r27, 0x41	; 65
    c07a:	f9 01       	movw	r30, r18
    c07c:	80 83       	st	Z, r24
    c07e:	91 83       	std	Z+1, r25	; 0x01
    c080:	a2 83       	std	Z+2, r26	; 0x02
    c082:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c084:	8e 01       	movw	r16, r28
    c086:	0b 54       	subi	r16, 0x4B	; 75
    c088:	1d 4f       	sbci	r17, 0xFD	; 253
    c08a:	ce 01       	movw	r24, r28
    c08c:	8f 54       	subi	r24, 0x4F	; 79
    c08e:	9d 4f       	sbci	r25, 0xFD	; 253
    c090:	fc 01       	movw	r30, r24
    c092:	60 81       	ld	r22, Z
    c094:	71 81       	ldd	r23, Z+1	; 0x01
    c096:	82 81       	ldd	r24, Z+2	; 0x02
    c098:	93 81       	ldd	r25, Z+3	; 0x03
    c09a:	26 e6       	ldi	r18, 0x66	; 102
    c09c:	36 e6       	ldi	r19, 0x66	; 102
    c09e:	46 e6       	ldi	r20, 0x66	; 102
    c0a0:	55 e4       	ldi	r21, 0x45	; 69
    c0a2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c0a6:	dc 01       	movw	r26, r24
    c0a8:	cb 01       	movw	r24, r22
    c0aa:	f8 01       	movw	r30, r16
    c0ac:	80 83       	st	Z, r24
    c0ae:	91 83       	std	Z+1, r25	; 0x01
    c0b0:	a2 83       	std	Z+2, r26	; 0x02
    c0b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c0b4:	ce 01       	movw	r24, r28
    c0b6:	8b 54       	subi	r24, 0x4B	; 75
    c0b8:	9d 4f       	sbci	r25, 0xFD	; 253
    c0ba:	11 e0       	ldi	r17, 0x01	; 1
    c0bc:	fc 01       	movw	r30, r24
    c0be:	60 81       	ld	r22, Z
    c0c0:	71 81       	ldd	r23, Z+1	; 0x01
    c0c2:	82 81       	ldd	r24, Z+2	; 0x02
    c0c4:	93 81       	ldd	r25, Z+3	; 0x03
    c0c6:	20 e0       	ldi	r18, 0x00	; 0
    c0c8:	30 e0       	ldi	r19, 0x00	; 0
    c0ca:	40 e8       	ldi	r20, 0x80	; 128
    c0cc:	5f e3       	ldi	r21, 0x3F	; 63
    c0ce:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    c0d2:	88 23       	and	r24, r24
    c0d4:	0c f0       	brlt	.+2      	; 0xc0d8 <pick_drop+0x51c6>
    c0d6:	10 e0       	ldi	r17, 0x00	; 0
    c0d8:	11 23       	and	r17, r17
    c0da:	49 f0       	breq	.+18     	; 0xc0ee <pick_drop+0x51dc>
		__ticks = 1;
    c0dc:	ce 01       	movw	r24, r28
    c0de:	87 54       	subi	r24, 0x47	; 71
    c0e0:	9d 4f       	sbci	r25, 0xFD	; 253
    c0e2:	21 e0       	ldi	r18, 0x01	; 1
    c0e4:	30 e0       	ldi	r19, 0x00	; 0
    c0e6:	fc 01       	movw	r30, r24
    c0e8:	31 83       	std	Z+1, r19	; 0x01
    c0ea:	20 83       	st	Z, r18
    c0ec:	74 c0       	rjmp	.+232    	; 0xc1d6 <pick_drop+0x52c4>
	else if (__tmp > 65535)
    c0ee:	ce 01       	movw	r24, r28
    c0f0:	8b 54       	subi	r24, 0x4B	; 75
    c0f2:	9d 4f       	sbci	r25, 0xFD	; 253
    c0f4:	11 e0       	ldi	r17, 0x01	; 1
    c0f6:	fc 01       	movw	r30, r24
    c0f8:	60 81       	ld	r22, Z
    c0fa:	71 81       	ldd	r23, Z+1	; 0x01
    c0fc:	82 81       	ldd	r24, Z+2	; 0x02
    c0fe:	93 81       	ldd	r25, Z+3	; 0x03
    c100:	20 e0       	ldi	r18, 0x00	; 0
    c102:	3f ef       	ldi	r19, 0xFF	; 255
    c104:	4f e7       	ldi	r20, 0x7F	; 127
    c106:	57 e4       	ldi	r21, 0x47	; 71
    c108:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    c10c:	18 16       	cp	r1, r24
    c10e:	0c f0       	brlt	.+2      	; 0xc112 <pick_drop+0x5200>
    c110:	10 e0       	ldi	r17, 0x00	; 0
    c112:	11 23       	and	r17, r17
    c114:	09 f4       	brne	.+2      	; 0xc118 <pick_drop+0x5206>
    c116:	4d c0       	rjmp	.+154    	; 0xc1b2 <pick_drop+0x52a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c118:	ce 01       	movw	r24, r28
    c11a:	8f 54       	subi	r24, 0x4F	; 79
    c11c:	9d 4f       	sbci	r25, 0xFD	; 253
    c11e:	fc 01       	movw	r30, r24
    c120:	60 81       	ld	r22, Z
    c122:	71 81       	ldd	r23, Z+1	; 0x01
    c124:	82 81       	ldd	r24, Z+2	; 0x02
    c126:	93 81       	ldd	r25, Z+3	; 0x03
    c128:	20 e0       	ldi	r18, 0x00	; 0
    c12a:	30 e0       	ldi	r19, 0x00	; 0
    c12c:	40 e2       	ldi	r20, 0x20	; 32
    c12e:	51 e4       	ldi	r21, 0x41	; 65
    c130:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c134:	dc 01       	movw	r26, r24
    c136:	cb 01       	movw	r24, r22
    c138:	8e 01       	movw	r16, r28
    c13a:	07 54       	subi	r16, 0x47	; 71
    c13c:	1d 4f       	sbci	r17, 0xFD	; 253
    c13e:	bc 01       	movw	r22, r24
    c140:	cd 01       	movw	r24, r26
    c142:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c146:	dc 01       	movw	r26, r24
    c148:	cb 01       	movw	r24, r22
    c14a:	f8 01       	movw	r30, r16
    c14c:	91 83       	std	Z+1, r25	; 0x01
    c14e:	80 83       	st	Z, r24
    c150:	27 c0       	rjmp	.+78     	; 0xc1a0 <pick_drop+0x528e>
    c152:	ce 01       	movw	r24, r28
    c154:	85 54       	subi	r24, 0x45	; 69
    c156:	9d 4f       	sbci	r25, 0xFD	; 253
    c158:	20 e7       	ldi	r18, 0x70	; 112
    c15a:	31 e0       	ldi	r19, 0x01	; 1
    c15c:	fc 01       	movw	r30, r24
    c15e:	31 83       	std	Z+1, r19	; 0x01
    c160:	20 83       	st	Z, r18
    c162:	ce 01       	movw	r24, r28
    c164:	85 54       	subi	r24, 0x45	; 69
    c166:	9d 4f       	sbci	r25, 0xFD	; 253
    c168:	fc 01       	movw	r30, r24
    c16a:	80 81       	ld	r24, Z
    c16c:	91 81       	ldd	r25, Z+1	; 0x01
    c16e:	8c 01       	movw	r16, r24
    c170:	c8 01       	movw	r24, r16
    c172:	01 97       	sbiw	r24, 0x01	; 1
    c174:	f1 f7       	brne	.-4      	; 0xc172 <pick_drop+0x5260>
    c176:	8c 01       	movw	r16, r24
    c178:	ce 01       	movw	r24, r28
    c17a:	85 54       	subi	r24, 0x45	; 69
    c17c:	9d 4f       	sbci	r25, 0xFD	; 253
    c17e:	fc 01       	movw	r30, r24
    c180:	11 83       	std	Z+1, r17	; 0x01
    c182:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c184:	ce 01       	movw	r24, r28
    c186:	87 54       	subi	r24, 0x47	; 71
    c188:	9d 4f       	sbci	r25, 0xFD	; 253
    c18a:	9e 01       	movw	r18, r28
    c18c:	27 54       	subi	r18, 0x47	; 71
    c18e:	3d 4f       	sbci	r19, 0xFD	; 253
    c190:	f9 01       	movw	r30, r18
    c192:	20 81       	ld	r18, Z
    c194:	31 81       	ldd	r19, Z+1	; 0x01
    c196:	21 50       	subi	r18, 0x01	; 1
    c198:	30 40       	sbci	r19, 0x00	; 0
    c19a:	fc 01       	movw	r30, r24
    c19c:	31 83       	std	Z+1, r19	; 0x01
    c19e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c1a0:	ce 01       	movw	r24, r28
    c1a2:	87 54       	subi	r24, 0x47	; 71
    c1a4:	9d 4f       	sbci	r25, 0xFD	; 253
    c1a6:	fc 01       	movw	r30, r24
    c1a8:	80 81       	ld	r24, Z
    c1aa:	91 81       	ldd	r25, Z+1	; 0x01
    c1ac:	00 97       	sbiw	r24, 0x00	; 0
    c1ae:	89 f6       	brne	.-94     	; 0xc152 <pick_drop+0x5240>
    c1b0:	2f c0       	rjmp	.+94     	; 0xc210 <pick_drop+0x52fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c1b2:	8e 01       	movw	r16, r28
    c1b4:	07 54       	subi	r16, 0x47	; 71
    c1b6:	1d 4f       	sbci	r17, 0xFD	; 253
    c1b8:	ce 01       	movw	r24, r28
    c1ba:	8b 54       	subi	r24, 0x4B	; 75
    c1bc:	9d 4f       	sbci	r25, 0xFD	; 253
    c1be:	fc 01       	movw	r30, r24
    c1c0:	60 81       	ld	r22, Z
    c1c2:	71 81       	ldd	r23, Z+1	; 0x01
    c1c4:	82 81       	ldd	r24, Z+2	; 0x02
    c1c6:	93 81       	ldd	r25, Z+3	; 0x03
    c1c8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c1cc:	dc 01       	movw	r26, r24
    c1ce:	cb 01       	movw	r24, r22
    c1d0:	f8 01       	movw	r30, r16
    c1d2:	91 83       	std	Z+1, r25	; 0x01
    c1d4:	80 83       	st	Z, r24
    c1d6:	ce 01       	movw	r24, r28
    c1d8:	83 54       	subi	r24, 0x43	; 67
    c1da:	9d 4f       	sbci	r25, 0xFD	; 253
    c1dc:	9e 01       	movw	r18, r28
    c1de:	27 54       	subi	r18, 0x47	; 71
    c1e0:	3d 4f       	sbci	r19, 0xFD	; 253
    c1e2:	f9 01       	movw	r30, r18
    c1e4:	20 81       	ld	r18, Z
    c1e6:	31 81       	ldd	r19, Z+1	; 0x01
    c1e8:	fc 01       	movw	r30, r24
    c1ea:	31 83       	std	Z+1, r19	; 0x01
    c1ec:	20 83       	st	Z, r18
    c1ee:	ce 01       	movw	r24, r28
    c1f0:	83 54       	subi	r24, 0x43	; 67
    c1f2:	9d 4f       	sbci	r25, 0xFD	; 253
    c1f4:	fc 01       	movw	r30, r24
    c1f6:	80 81       	ld	r24, Z
    c1f8:	91 81       	ldd	r25, Z+1	; 0x01
    c1fa:	8c 01       	movw	r16, r24
    c1fc:	c8 01       	movw	r24, r16
    c1fe:	01 97       	sbiw	r24, 0x01	; 1
    c200:	f1 f7       	brne	.-4      	; 0xc1fe <pick_drop+0x52ec>
    c202:	8c 01       	movw	r16, r24
    c204:	ce 01       	movw	r24, r28
    c206:	83 54       	subi	r24, 0x43	; 67
    c208:	9d 4f       	sbci	r25, 0xFD	; 253
    c20a:	fc 01       	movw	r30, r24
    c20c:	11 83       	std	Z+1, r17	; 0x01
    c20e:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    c210:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    c214:	9e 01       	movw	r18, r28
    c216:	21 54       	subi	r18, 0x41	; 65
    c218:	3d 4f       	sbci	r19, 0xFD	; 253
    c21a:	80 e0       	ldi	r24, 0x00	; 0
    c21c:	90 e0       	ldi	r25, 0x00	; 0
    c21e:	a0 ea       	ldi	r26, 0xA0	; 160
    c220:	b1 e4       	ldi	r27, 0x41	; 65
    c222:	f9 01       	movw	r30, r18
    c224:	80 83       	st	Z, r24
    c226:	91 83       	std	Z+1, r25	; 0x01
    c228:	a2 83       	std	Z+2, r26	; 0x02
    c22a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c22c:	8e 01       	movw	r16, r28
    c22e:	0d 53       	subi	r16, 0x3D	; 61
    c230:	1d 4f       	sbci	r17, 0xFD	; 253
    c232:	ce 01       	movw	r24, r28
    c234:	81 54       	subi	r24, 0x41	; 65
    c236:	9d 4f       	sbci	r25, 0xFD	; 253
    c238:	fc 01       	movw	r30, r24
    c23a:	60 81       	ld	r22, Z
    c23c:	71 81       	ldd	r23, Z+1	; 0x01
    c23e:	82 81       	ldd	r24, Z+2	; 0x02
    c240:	93 81       	ldd	r25, Z+3	; 0x03
    c242:	26 e6       	ldi	r18, 0x66	; 102
    c244:	36 e6       	ldi	r19, 0x66	; 102
    c246:	46 e6       	ldi	r20, 0x66	; 102
    c248:	55 e4       	ldi	r21, 0x45	; 69
    c24a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c24e:	dc 01       	movw	r26, r24
    c250:	cb 01       	movw	r24, r22
    c252:	f8 01       	movw	r30, r16
    c254:	80 83       	st	Z, r24
    c256:	91 83       	std	Z+1, r25	; 0x01
    c258:	a2 83       	std	Z+2, r26	; 0x02
    c25a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c25c:	ce 01       	movw	r24, r28
    c25e:	8d 53       	subi	r24, 0x3D	; 61
    c260:	9d 4f       	sbci	r25, 0xFD	; 253
    c262:	11 e0       	ldi	r17, 0x01	; 1
    c264:	fc 01       	movw	r30, r24
    c266:	60 81       	ld	r22, Z
    c268:	71 81       	ldd	r23, Z+1	; 0x01
    c26a:	82 81       	ldd	r24, Z+2	; 0x02
    c26c:	93 81       	ldd	r25, Z+3	; 0x03
    c26e:	20 e0       	ldi	r18, 0x00	; 0
    c270:	30 e0       	ldi	r19, 0x00	; 0
    c272:	40 e8       	ldi	r20, 0x80	; 128
    c274:	5f e3       	ldi	r21, 0x3F	; 63
    c276:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    c27a:	88 23       	and	r24, r24
    c27c:	0c f0       	brlt	.+2      	; 0xc280 <pick_drop+0x536e>
    c27e:	10 e0       	ldi	r17, 0x00	; 0
    c280:	11 23       	and	r17, r17
    c282:	49 f0       	breq	.+18     	; 0xc296 <pick_drop+0x5384>
		__ticks = 1;
    c284:	ce 01       	movw	r24, r28
    c286:	89 53       	subi	r24, 0x39	; 57
    c288:	9d 4f       	sbci	r25, 0xFD	; 253
    c28a:	21 e0       	ldi	r18, 0x01	; 1
    c28c:	30 e0       	ldi	r19, 0x00	; 0
    c28e:	fc 01       	movw	r30, r24
    c290:	31 83       	std	Z+1, r19	; 0x01
    c292:	20 83       	st	Z, r18
    c294:	74 c0       	rjmp	.+232    	; 0xc37e <pick_drop+0x546c>
	else if (__tmp > 65535)
    c296:	ce 01       	movw	r24, r28
    c298:	8d 53       	subi	r24, 0x3D	; 61
    c29a:	9d 4f       	sbci	r25, 0xFD	; 253
    c29c:	11 e0       	ldi	r17, 0x01	; 1
    c29e:	fc 01       	movw	r30, r24
    c2a0:	60 81       	ld	r22, Z
    c2a2:	71 81       	ldd	r23, Z+1	; 0x01
    c2a4:	82 81       	ldd	r24, Z+2	; 0x02
    c2a6:	93 81       	ldd	r25, Z+3	; 0x03
    c2a8:	20 e0       	ldi	r18, 0x00	; 0
    c2aa:	3f ef       	ldi	r19, 0xFF	; 255
    c2ac:	4f e7       	ldi	r20, 0x7F	; 127
    c2ae:	57 e4       	ldi	r21, 0x47	; 71
    c2b0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    c2b4:	18 16       	cp	r1, r24
    c2b6:	0c f0       	brlt	.+2      	; 0xc2ba <pick_drop+0x53a8>
    c2b8:	10 e0       	ldi	r17, 0x00	; 0
    c2ba:	11 23       	and	r17, r17
    c2bc:	09 f4       	brne	.+2      	; 0xc2c0 <pick_drop+0x53ae>
    c2be:	4d c0       	rjmp	.+154    	; 0xc35a <pick_drop+0x5448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c2c0:	ce 01       	movw	r24, r28
    c2c2:	81 54       	subi	r24, 0x41	; 65
    c2c4:	9d 4f       	sbci	r25, 0xFD	; 253
    c2c6:	fc 01       	movw	r30, r24
    c2c8:	60 81       	ld	r22, Z
    c2ca:	71 81       	ldd	r23, Z+1	; 0x01
    c2cc:	82 81       	ldd	r24, Z+2	; 0x02
    c2ce:	93 81       	ldd	r25, Z+3	; 0x03
    c2d0:	20 e0       	ldi	r18, 0x00	; 0
    c2d2:	30 e0       	ldi	r19, 0x00	; 0
    c2d4:	40 e2       	ldi	r20, 0x20	; 32
    c2d6:	51 e4       	ldi	r21, 0x41	; 65
    c2d8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c2dc:	dc 01       	movw	r26, r24
    c2de:	cb 01       	movw	r24, r22
    c2e0:	8e 01       	movw	r16, r28
    c2e2:	09 53       	subi	r16, 0x39	; 57
    c2e4:	1d 4f       	sbci	r17, 0xFD	; 253
    c2e6:	bc 01       	movw	r22, r24
    c2e8:	cd 01       	movw	r24, r26
    c2ea:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c2ee:	dc 01       	movw	r26, r24
    c2f0:	cb 01       	movw	r24, r22
    c2f2:	f8 01       	movw	r30, r16
    c2f4:	91 83       	std	Z+1, r25	; 0x01
    c2f6:	80 83       	st	Z, r24
    c2f8:	27 c0       	rjmp	.+78     	; 0xc348 <pick_drop+0x5436>
    c2fa:	ce 01       	movw	r24, r28
    c2fc:	87 53       	subi	r24, 0x37	; 55
    c2fe:	9d 4f       	sbci	r25, 0xFD	; 253
    c300:	20 e7       	ldi	r18, 0x70	; 112
    c302:	31 e0       	ldi	r19, 0x01	; 1
    c304:	fc 01       	movw	r30, r24
    c306:	31 83       	std	Z+1, r19	; 0x01
    c308:	20 83       	st	Z, r18
    c30a:	ce 01       	movw	r24, r28
    c30c:	87 53       	subi	r24, 0x37	; 55
    c30e:	9d 4f       	sbci	r25, 0xFD	; 253
    c310:	fc 01       	movw	r30, r24
    c312:	80 81       	ld	r24, Z
    c314:	91 81       	ldd	r25, Z+1	; 0x01
    c316:	8c 01       	movw	r16, r24
    c318:	c8 01       	movw	r24, r16
    c31a:	01 97       	sbiw	r24, 0x01	; 1
    c31c:	f1 f7       	brne	.-4      	; 0xc31a <pick_drop+0x5408>
    c31e:	8c 01       	movw	r16, r24
    c320:	ce 01       	movw	r24, r28
    c322:	87 53       	subi	r24, 0x37	; 55
    c324:	9d 4f       	sbci	r25, 0xFD	; 253
    c326:	fc 01       	movw	r30, r24
    c328:	11 83       	std	Z+1, r17	; 0x01
    c32a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c32c:	ce 01       	movw	r24, r28
    c32e:	89 53       	subi	r24, 0x39	; 57
    c330:	9d 4f       	sbci	r25, 0xFD	; 253
    c332:	9e 01       	movw	r18, r28
    c334:	29 53       	subi	r18, 0x39	; 57
    c336:	3d 4f       	sbci	r19, 0xFD	; 253
    c338:	f9 01       	movw	r30, r18
    c33a:	20 81       	ld	r18, Z
    c33c:	31 81       	ldd	r19, Z+1	; 0x01
    c33e:	21 50       	subi	r18, 0x01	; 1
    c340:	30 40       	sbci	r19, 0x00	; 0
    c342:	fc 01       	movw	r30, r24
    c344:	31 83       	std	Z+1, r19	; 0x01
    c346:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c348:	ce 01       	movw	r24, r28
    c34a:	89 53       	subi	r24, 0x39	; 57
    c34c:	9d 4f       	sbci	r25, 0xFD	; 253
    c34e:	fc 01       	movw	r30, r24
    c350:	80 81       	ld	r24, Z
    c352:	91 81       	ldd	r25, Z+1	; 0x01
    c354:	00 97       	sbiw	r24, 0x00	; 0
    c356:	89 f6       	brne	.-94     	; 0xc2fa <pick_drop+0x53e8>
    c358:	2f c0       	rjmp	.+94     	; 0xc3b8 <pick_drop+0x54a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c35a:	8e 01       	movw	r16, r28
    c35c:	09 53       	subi	r16, 0x39	; 57
    c35e:	1d 4f       	sbci	r17, 0xFD	; 253
    c360:	ce 01       	movw	r24, r28
    c362:	8d 53       	subi	r24, 0x3D	; 61
    c364:	9d 4f       	sbci	r25, 0xFD	; 253
    c366:	fc 01       	movw	r30, r24
    c368:	60 81       	ld	r22, Z
    c36a:	71 81       	ldd	r23, Z+1	; 0x01
    c36c:	82 81       	ldd	r24, Z+2	; 0x02
    c36e:	93 81       	ldd	r25, Z+3	; 0x03
    c370:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c374:	dc 01       	movw	r26, r24
    c376:	cb 01       	movw	r24, r22
    c378:	f8 01       	movw	r30, r16
    c37a:	91 83       	std	Z+1, r25	; 0x01
    c37c:	80 83       	st	Z, r24
    c37e:	ce 01       	movw	r24, r28
    c380:	85 53       	subi	r24, 0x35	; 53
    c382:	9d 4f       	sbci	r25, 0xFD	; 253
    c384:	9e 01       	movw	r18, r28
    c386:	29 53       	subi	r18, 0x39	; 57
    c388:	3d 4f       	sbci	r19, 0xFD	; 253
    c38a:	f9 01       	movw	r30, r18
    c38c:	20 81       	ld	r18, Z
    c38e:	31 81       	ldd	r19, Z+1	; 0x01
    c390:	fc 01       	movw	r30, r24
    c392:	31 83       	std	Z+1, r19	; 0x01
    c394:	20 83       	st	Z, r18
    c396:	ce 01       	movw	r24, r28
    c398:	85 53       	subi	r24, 0x35	; 53
    c39a:	9d 4f       	sbci	r25, 0xFD	; 253
    c39c:	fc 01       	movw	r30, r24
    c39e:	80 81       	ld	r24, Z
    c3a0:	91 81       	ldd	r25, Z+1	; 0x01
    c3a2:	8c 01       	movw	r16, r24
    c3a4:	c8 01       	movw	r24, r16
    c3a6:	01 97       	sbiw	r24, 0x01	; 1
    c3a8:	f1 f7       	brne	.-4      	; 0xc3a6 <pick_drop+0x5494>
    c3aa:	8c 01       	movw	r16, r24
    c3ac:	ce 01       	movw	r24, r28
    c3ae:	85 53       	subi	r24, 0x35	; 53
    c3b0:	9d 4f       	sbci	r25, 0xFD	; 253
    c3b2:	fc 01       	movw	r30, r24
    c3b4:	11 83       	std	Z+1, r17	; 0x01
    c3b6:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    c3b8:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    c3bc:	9e 01       	movw	r18, r28
    c3be:	23 53       	subi	r18, 0x33	; 51
    c3c0:	3d 4f       	sbci	r19, 0xFD	; 253
    c3c2:	80 e0       	ldi	r24, 0x00	; 0
    c3c4:	90 e0       	ldi	r25, 0x00	; 0
    c3c6:	a8 ec       	ldi	r26, 0xC8	; 200
    c3c8:	b2 e4       	ldi	r27, 0x42	; 66
    c3ca:	f9 01       	movw	r30, r18
    c3cc:	80 83       	st	Z, r24
    c3ce:	91 83       	std	Z+1, r25	; 0x01
    c3d0:	a2 83       	std	Z+2, r26	; 0x02
    c3d2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c3d4:	8e 01       	movw	r16, r28
    c3d6:	0f 52       	subi	r16, 0x2F	; 47
    c3d8:	1d 4f       	sbci	r17, 0xFD	; 253
    c3da:	ce 01       	movw	r24, r28
    c3dc:	83 53       	subi	r24, 0x33	; 51
    c3de:	9d 4f       	sbci	r25, 0xFD	; 253
    c3e0:	fc 01       	movw	r30, r24
    c3e2:	60 81       	ld	r22, Z
    c3e4:	71 81       	ldd	r23, Z+1	; 0x01
    c3e6:	82 81       	ldd	r24, Z+2	; 0x02
    c3e8:	93 81       	ldd	r25, Z+3	; 0x03
    c3ea:	26 e6       	ldi	r18, 0x66	; 102
    c3ec:	36 e6       	ldi	r19, 0x66	; 102
    c3ee:	46 e6       	ldi	r20, 0x66	; 102
    c3f0:	55 e4       	ldi	r21, 0x45	; 69
    c3f2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c3f6:	dc 01       	movw	r26, r24
    c3f8:	cb 01       	movw	r24, r22
    c3fa:	f8 01       	movw	r30, r16
    c3fc:	80 83       	st	Z, r24
    c3fe:	91 83       	std	Z+1, r25	; 0x01
    c400:	a2 83       	std	Z+2, r26	; 0x02
    c402:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c404:	ce 01       	movw	r24, r28
    c406:	8f 52       	subi	r24, 0x2F	; 47
    c408:	9d 4f       	sbci	r25, 0xFD	; 253
    c40a:	11 e0       	ldi	r17, 0x01	; 1
    c40c:	fc 01       	movw	r30, r24
    c40e:	60 81       	ld	r22, Z
    c410:	71 81       	ldd	r23, Z+1	; 0x01
    c412:	82 81       	ldd	r24, Z+2	; 0x02
    c414:	93 81       	ldd	r25, Z+3	; 0x03
    c416:	20 e0       	ldi	r18, 0x00	; 0
    c418:	30 e0       	ldi	r19, 0x00	; 0
    c41a:	40 e8       	ldi	r20, 0x80	; 128
    c41c:	5f e3       	ldi	r21, 0x3F	; 63
    c41e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    c422:	88 23       	and	r24, r24
    c424:	0c f0       	brlt	.+2      	; 0xc428 <pick_drop+0x5516>
    c426:	10 e0       	ldi	r17, 0x00	; 0
    c428:	11 23       	and	r17, r17
    c42a:	49 f0       	breq	.+18     	; 0xc43e <pick_drop+0x552c>
		__ticks = 1;
    c42c:	ce 01       	movw	r24, r28
    c42e:	8b 52       	subi	r24, 0x2B	; 43
    c430:	9d 4f       	sbci	r25, 0xFD	; 253
    c432:	21 e0       	ldi	r18, 0x01	; 1
    c434:	30 e0       	ldi	r19, 0x00	; 0
    c436:	fc 01       	movw	r30, r24
    c438:	31 83       	std	Z+1, r19	; 0x01
    c43a:	20 83       	st	Z, r18
    c43c:	74 c0       	rjmp	.+232    	; 0xc526 <pick_drop+0x5614>
	else if (__tmp > 65535)
    c43e:	ce 01       	movw	r24, r28
    c440:	8f 52       	subi	r24, 0x2F	; 47
    c442:	9d 4f       	sbci	r25, 0xFD	; 253
    c444:	11 e0       	ldi	r17, 0x01	; 1
    c446:	fc 01       	movw	r30, r24
    c448:	60 81       	ld	r22, Z
    c44a:	71 81       	ldd	r23, Z+1	; 0x01
    c44c:	82 81       	ldd	r24, Z+2	; 0x02
    c44e:	93 81       	ldd	r25, Z+3	; 0x03
    c450:	20 e0       	ldi	r18, 0x00	; 0
    c452:	3f ef       	ldi	r19, 0xFF	; 255
    c454:	4f e7       	ldi	r20, 0x7F	; 127
    c456:	57 e4       	ldi	r21, 0x47	; 71
    c458:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    c45c:	18 16       	cp	r1, r24
    c45e:	0c f0       	brlt	.+2      	; 0xc462 <pick_drop+0x5550>
    c460:	10 e0       	ldi	r17, 0x00	; 0
    c462:	11 23       	and	r17, r17
    c464:	09 f4       	brne	.+2      	; 0xc468 <pick_drop+0x5556>
    c466:	4d c0       	rjmp	.+154    	; 0xc502 <pick_drop+0x55f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c468:	ce 01       	movw	r24, r28
    c46a:	83 53       	subi	r24, 0x33	; 51
    c46c:	9d 4f       	sbci	r25, 0xFD	; 253
    c46e:	fc 01       	movw	r30, r24
    c470:	60 81       	ld	r22, Z
    c472:	71 81       	ldd	r23, Z+1	; 0x01
    c474:	82 81       	ldd	r24, Z+2	; 0x02
    c476:	93 81       	ldd	r25, Z+3	; 0x03
    c478:	20 e0       	ldi	r18, 0x00	; 0
    c47a:	30 e0       	ldi	r19, 0x00	; 0
    c47c:	40 e2       	ldi	r20, 0x20	; 32
    c47e:	51 e4       	ldi	r21, 0x41	; 65
    c480:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c484:	dc 01       	movw	r26, r24
    c486:	cb 01       	movw	r24, r22
    c488:	8e 01       	movw	r16, r28
    c48a:	0b 52       	subi	r16, 0x2B	; 43
    c48c:	1d 4f       	sbci	r17, 0xFD	; 253
    c48e:	bc 01       	movw	r22, r24
    c490:	cd 01       	movw	r24, r26
    c492:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c496:	dc 01       	movw	r26, r24
    c498:	cb 01       	movw	r24, r22
    c49a:	f8 01       	movw	r30, r16
    c49c:	91 83       	std	Z+1, r25	; 0x01
    c49e:	80 83       	st	Z, r24
    c4a0:	27 c0       	rjmp	.+78     	; 0xc4f0 <pick_drop+0x55de>
    c4a2:	ce 01       	movw	r24, r28
    c4a4:	89 52       	subi	r24, 0x29	; 41
    c4a6:	9d 4f       	sbci	r25, 0xFD	; 253
    c4a8:	20 e7       	ldi	r18, 0x70	; 112
    c4aa:	31 e0       	ldi	r19, 0x01	; 1
    c4ac:	fc 01       	movw	r30, r24
    c4ae:	31 83       	std	Z+1, r19	; 0x01
    c4b0:	20 83       	st	Z, r18
    c4b2:	ce 01       	movw	r24, r28
    c4b4:	89 52       	subi	r24, 0x29	; 41
    c4b6:	9d 4f       	sbci	r25, 0xFD	; 253
    c4b8:	fc 01       	movw	r30, r24
    c4ba:	80 81       	ld	r24, Z
    c4bc:	91 81       	ldd	r25, Z+1	; 0x01
    c4be:	8c 01       	movw	r16, r24
    c4c0:	c8 01       	movw	r24, r16
    c4c2:	01 97       	sbiw	r24, 0x01	; 1
    c4c4:	f1 f7       	brne	.-4      	; 0xc4c2 <pick_drop+0x55b0>
    c4c6:	8c 01       	movw	r16, r24
    c4c8:	ce 01       	movw	r24, r28
    c4ca:	89 52       	subi	r24, 0x29	; 41
    c4cc:	9d 4f       	sbci	r25, 0xFD	; 253
    c4ce:	fc 01       	movw	r30, r24
    c4d0:	11 83       	std	Z+1, r17	; 0x01
    c4d2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c4d4:	ce 01       	movw	r24, r28
    c4d6:	8b 52       	subi	r24, 0x2B	; 43
    c4d8:	9d 4f       	sbci	r25, 0xFD	; 253
    c4da:	9e 01       	movw	r18, r28
    c4dc:	2b 52       	subi	r18, 0x2B	; 43
    c4de:	3d 4f       	sbci	r19, 0xFD	; 253
    c4e0:	f9 01       	movw	r30, r18
    c4e2:	20 81       	ld	r18, Z
    c4e4:	31 81       	ldd	r19, Z+1	; 0x01
    c4e6:	21 50       	subi	r18, 0x01	; 1
    c4e8:	30 40       	sbci	r19, 0x00	; 0
    c4ea:	fc 01       	movw	r30, r24
    c4ec:	31 83       	std	Z+1, r19	; 0x01
    c4ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c4f0:	ce 01       	movw	r24, r28
    c4f2:	8b 52       	subi	r24, 0x2B	; 43
    c4f4:	9d 4f       	sbci	r25, 0xFD	; 253
    c4f6:	fc 01       	movw	r30, r24
    c4f8:	80 81       	ld	r24, Z
    c4fa:	91 81       	ldd	r25, Z+1	; 0x01
    c4fc:	00 97       	sbiw	r24, 0x00	; 0
    c4fe:	89 f6       	brne	.-94     	; 0xc4a2 <pick_drop+0x5590>
    c500:	2f c0       	rjmp	.+94     	; 0xc560 <pick_drop+0x564e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c502:	8e 01       	movw	r16, r28
    c504:	0b 52       	subi	r16, 0x2B	; 43
    c506:	1d 4f       	sbci	r17, 0xFD	; 253
    c508:	ce 01       	movw	r24, r28
    c50a:	8f 52       	subi	r24, 0x2F	; 47
    c50c:	9d 4f       	sbci	r25, 0xFD	; 253
    c50e:	fc 01       	movw	r30, r24
    c510:	60 81       	ld	r22, Z
    c512:	71 81       	ldd	r23, Z+1	; 0x01
    c514:	82 81       	ldd	r24, Z+2	; 0x02
    c516:	93 81       	ldd	r25, Z+3	; 0x03
    c518:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c51c:	dc 01       	movw	r26, r24
    c51e:	cb 01       	movw	r24, r22
    c520:	f8 01       	movw	r30, r16
    c522:	91 83       	std	Z+1, r25	; 0x01
    c524:	80 83       	st	Z, r24
    c526:	ce 01       	movw	r24, r28
    c528:	87 52       	subi	r24, 0x27	; 39
    c52a:	9d 4f       	sbci	r25, 0xFD	; 253
    c52c:	9e 01       	movw	r18, r28
    c52e:	2b 52       	subi	r18, 0x2B	; 43
    c530:	3d 4f       	sbci	r19, 0xFD	; 253
    c532:	f9 01       	movw	r30, r18
    c534:	20 81       	ld	r18, Z
    c536:	31 81       	ldd	r19, Z+1	; 0x01
    c538:	fc 01       	movw	r30, r24
    c53a:	31 83       	std	Z+1, r19	; 0x01
    c53c:	20 83       	st	Z, r18
    c53e:	ce 01       	movw	r24, r28
    c540:	87 52       	subi	r24, 0x27	; 39
    c542:	9d 4f       	sbci	r25, 0xFD	; 253
    c544:	fc 01       	movw	r30, r24
    c546:	80 81       	ld	r24, Z
    c548:	91 81       	ldd	r25, Z+1	; 0x01
    c54a:	8c 01       	movw	r16, r24
    c54c:	c8 01       	movw	r24, r16
    c54e:	01 97       	sbiw	r24, 0x01	; 1
    c550:	f1 f7       	brne	.-4      	; 0xc54e <pick_drop+0x563c>
    c552:	8c 01       	movw	r16, r24
    c554:	ce 01       	movw	r24, r28
    c556:	87 52       	subi	r24, 0x27	; 39
    c558:	9d 4f       	sbci	r25, 0xFD	; 253
    c55a:	fc 01       	movw	r30, r24
    c55c:	11 83       	std	Z+1, r17	; 0x01
    c55e:	00 83       	st	Z, r16
			_delay_ms(100);
			right_degrees(50);
    c560:	82 e3       	ldi	r24, 0x32	; 50
    c562:	90 e0       	ldi	r25, 0x00	; 0
    c564:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
    c568:	9e 01       	movw	r18, r28
    c56a:	25 52       	subi	r18, 0x25	; 37
    c56c:	3d 4f       	sbci	r19, 0xFD	; 253
    c56e:	80 e0       	ldi	r24, 0x00	; 0
    c570:	90 e0       	ldi	r25, 0x00	; 0
    c572:	a0 ea       	ldi	r26, 0xA0	; 160
    c574:	b1 e4       	ldi	r27, 0x41	; 65
    c576:	f9 01       	movw	r30, r18
    c578:	80 83       	st	Z, r24
    c57a:	91 83       	std	Z+1, r25	; 0x01
    c57c:	a2 83       	std	Z+2, r26	; 0x02
    c57e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c580:	8e 01       	movw	r16, r28
    c582:	01 52       	subi	r16, 0x21	; 33
    c584:	1d 4f       	sbci	r17, 0xFD	; 253
    c586:	ce 01       	movw	r24, r28
    c588:	85 52       	subi	r24, 0x25	; 37
    c58a:	9d 4f       	sbci	r25, 0xFD	; 253
    c58c:	fc 01       	movw	r30, r24
    c58e:	60 81       	ld	r22, Z
    c590:	71 81       	ldd	r23, Z+1	; 0x01
    c592:	82 81       	ldd	r24, Z+2	; 0x02
    c594:	93 81       	ldd	r25, Z+3	; 0x03
    c596:	26 e6       	ldi	r18, 0x66	; 102
    c598:	36 e6       	ldi	r19, 0x66	; 102
    c59a:	46 e6       	ldi	r20, 0x66	; 102
    c59c:	55 e4       	ldi	r21, 0x45	; 69
    c59e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c5a2:	dc 01       	movw	r26, r24
    c5a4:	cb 01       	movw	r24, r22
    c5a6:	f8 01       	movw	r30, r16
    c5a8:	80 83       	st	Z, r24
    c5aa:	91 83       	std	Z+1, r25	; 0x01
    c5ac:	a2 83       	std	Z+2, r26	; 0x02
    c5ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c5b0:	ce 01       	movw	r24, r28
    c5b2:	81 52       	subi	r24, 0x21	; 33
    c5b4:	9d 4f       	sbci	r25, 0xFD	; 253
    c5b6:	11 e0       	ldi	r17, 0x01	; 1
    c5b8:	fc 01       	movw	r30, r24
    c5ba:	60 81       	ld	r22, Z
    c5bc:	71 81       	ldd	r23, Z+1	; 0x01
    c5be:	82 81       	ldd	r24, Z+2	; 0x02
    c5c0:	93 81       	ldd	r25, Z+3	; 0x03
    c5c2:	20 e0       	ldi	r18, 0x00	; 0
    c5c4:	30 e0       	ldi	r19, 0x00	; 0
    c5c6:	40 e8       	ldi	r20, 0x80	; 128
    c5c8:	5f e3       	ldi	r21, 0x3F	; 63
    c5ca:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    c5ce:	88 23       	and	r24, r24
    c5d0:	0c f0       	brlt	.+2      	; 0xc5d4 <pick_drop+0x56c2>
    c5d2:	10 e0       	ldi	r17, 0x00	; 0
    c5d4:	11 23       	and	r17, r17
    c5d6:	49 f0       	breq	.+18     	; 0xc5ea <pick_drop+0x56d8>
		__ticks = 1;
    c5d8:	ce 01       	movw	r24, r28
    c5da:	8d 51       	subi	r24, 0x1D	; 29
    c5dc:	9d 4f       	sbci	r25, 0xFD	; 253
    c5de:	21 e0       	ldi	r18, 0x01	; 1
    c5e0:	30 e0       	ldi	r19, 0x00	; 0
    c5e2:	fc 01       	movw	r30, r24
    c5e4:	31 83       	std	Z+1, r19	; 0x01
    c5e6:	20 83       	st	Z, r18
    c5e8:	74 c0       	rjmp	.+232    	; 0xc6d2 <pick_drop+0x57c0>
	else if (__tmp > 65535)
    c5ea:	ce 01       	movw	r24, r28
    c5ec:	81 52       	subi	r24, 0x21	; 33
    c5ee:	9d 4f       	sbci	r25, 0xFD	; 253
    c5f0:	11 e0       	ldi	r17, 0x01	; 1
    c5f2:	fc 01       	movw	r30, r24
    c5f4:	60 81       	ld	r22, Z
    c5f6:	71 81       	ldd	r23, Z+1	; 0x01
    c5f8:	82 81       	ldd	r24, Z+2	; 0x02
    c5fa:	93 81       	ldd	r25, Z+3	; 0x03
    c5fc:	20 e0       	ldi	r18, 0x00	; 0
    c5fe:	3f ef       	ldi	r19, 0xFF	; 255
    c600:	4f e7       	ldi	r20, 0x7F	; 127
    c602:	57 e4       	ldi	r21, 0x47	; 71
    c604:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    c608:	18 16       	cp	r1, r24
    c60a:	0c f0       	brlt	.+2      	; 0xc60e <pick_drop+0x56fc>
    c60c:	10 e0       	ldi	r17, 0x00	; 0
    c60e:	11 23       	and	r17, r17
    c610:	09 f4       	brne	.+2      	; 0xc614 <pick_drop+0x5702>
    c612:	4d c0       	rjmp	.+154    	; 0xc6ae <pick_drop+0x579c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c614:	ce 01       	movw	r24, r28
    c616:	85 52       	subi	r24, 0x25	; 37
    c618:	9d 4f       	sbci	r25, 0xFD	; 253
    c61a:	fc 01       	movw	r30, r24
    c61c:	60 81       	ld	r22, Z
    c61e:	71 81       	ldd	r23, Z+1	; 0x01
    c620:	82 81       	ldd	r24, Z+2	; 0x02
    c622:	93 81       	ldd	r25, Z+3	; 0x03
    c624:	20 e0       	ldi	r18, 0x00	; 0
    c626:	30 e0       	ldi	r19, 0x00	; 0
    c628:	40 e2       	ldi	r20, 0x20	; 32
    c62a:	51 e4       	ldi	r21, 0x41	; 65
    c62c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c630:	dc 01       	movw	r26, r24
    c632:	cb 01       	movw	r24, r22
    c634:	8e 01       	movw	r16, r28
    c636:	0d 51       	subi	r16, 0x1D	; 29
    c638:	1d 4f       	sbci	r17, 0xFD	; 253
    c63a:	bc 01       	movw	r22, r24
    c63c:	cd 01       	movw	r24, r26
    c63e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c642:	dc 01       	movw	r26, r24
    c644:	cb 01       	movw	r24, r22
    c646:	f8 01       	movw	r30, r16
    c648:	91 83       	std	Z+1, r25	; 0x01
    c64a:	80 83       	st	Z, r24
    c64c:	27 c0       	rjmp	.+78     	; 0xc69c <pick_drop+0x578a>
    c64e:	ce 01       	movw	r24, r28
    c650:	8b 51       	subi	r24, 0x1B	; 27
    c652:	9d 4f       	sbci	r25, 0xFD	; 253
    c654:	20 e7       	ldi	r18, 0x70	; 112
    c656:	31 e0       	ldi	r19, 0x01	; 1
    c658:	fc 01       	movw	r30, r24
    c65a:	31 83       	std	Z+1, r19	; 0x01
    c65c:	20 83       	st	Z, r18
    c65e:	ce 01       	movw	r24, r28
    c660:	8b 51       	subi	r24, 0x1B	; 27
    c662:	9d 4f       	sbci	r25, 0xFD	; 253
    c664:	fc 01       	movw	r30, r24
    c666:	80 81       	ld	r24, Z
    c668:	91 81       	ldd	r25, Z+1	; 0x01
    c66a:	8c 01       	movw	r16, r24
    c66c:	c8 01       	movw	r24, r16
    c66e:	01 97       	sbiw	r24, 0x01	; 1
    c670:	f1 f7       	brne	.-4      	; 0xc66e <pick_drop+0x575c>
    c672:	8c 01       	movw	r16, r24
    c674:	ce 01       	movw	r24, r28
    c676:	8b 51       	subi	r24, 0x1B	; 27
    c678:	9d 4f       	sbci	r25, 0xFD	; 253
    c67a:	fc 01       	movw	r30, r24
    c67c:	11 83       	std	Z+1, r17	; 0x01
    c67e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c680:	ce 01       	movw	r24, r28
    c682:	8d 51       	subi	r24, 0x1D	; 29
    c684:	9d 4f       	sbci	r25, 0xFD	; 253
    c686:	9e 01       	movw	r18, r28
    c688:	2d 51       	subi	r18, 0x1D	; 29
    c68a:	3d 4f       	sbci	r19, 0xFD	; 253
    c68c:	f9 01       	movw	r30, r18
    c68e:	20 81       	ld	r18, Z
    c690:	31 81       	ldd	r19, Z+1	; 0x01
    c692:	21 50       	subi	r18, 0x01	; 1
    c694:	30 40       	sbci	r19, 0x00	; 0
    c696:	fc 01       	movw	r30, r24
    c698:	31 83       	std	Z+1, r19	; 0x01
    c69a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c69c:	ce 01       	movw	r24, r28
    c69e:	8d 51       	subi	r24, 0x1D	; 29
    c6a0:	9d 4f       	sbci	r25, 0xFD	; 253
    c6a2:	fc 01       	movw	r30, r24
    c6a4:	80 81       	ld	r24, Z
    c6a6:	91 81       	ldd	r25, Z+1	; 0x01
    c6a8:	00 97       	sbiw	r24, 0x00	; 0
    c6aa:	89 f6       	brne	.-94     	; 0xc64e <pick_drop+0x573c>
    c6ac:	2f c0       	rjmp	.+94     	; 0xc70c <pick_drop+0x57fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c6ae:	8e 01       	movw	r16, r28
    c6b0:	0d 51       	subi	r16, 0x1D	; 29
    c6b2:	1d 4f       	sbci	r17, 0xFD	; 253
    c6b4:	ce 01       	movw	r24, r28
    c6b6:	81 52       	subi	r24, 0x21	; 33
    c6b8:	9d 4f       	sbci	r25, 0xFD	; 253
    c6ba:	fc 01       	movw	r30, r24
    c6bc:	60 81       	ld	r22, Z
    c6be:	71 81       	ldd	r23, Z+1	; 0x01
    c6c0:	82 81       	ldd	r24, Z+2	; 0x02
    c6c2:	93 81       	ldd	r25, Z+3	; 0x03
    c6c4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c6c8:	dc 01       	movw	r26, r24
    c6ca:	cb 01       	movw	r24, r22
    c6cc:	f8 01       	movw	r30, r16
    c6ce:	91 83       	std	Z+1, r25	; 0x01
    c6d0:	80 83       	st	Z, r24
    c6d2:	ce 01       	movw	r24, r28
    c6d4:	89 51       	subi	r24, 0x19	; 25
    c6d6:	9d 4f       	sbci	r25, 0xFD	; 253
    c6d8:	9e 01       	movw	r18, r28
    c6da:	2d 51       	subi	r18, 0x1D	; 29
    c6dc:	3d 4f       	sbci	r19, 0xFD	; 253
    c6de:	f9 01       	movw	r30, r18
    c6e0:	20 81       	ld	r18, Z
    c6e2:	31 81       	ldd	r19, Z+1	; 0x01
    c6e4:	fc 01       	movw	r30, r24
    c6e6:	31 83       	std	Z+1, r19	; 0x01
    c6e8:	20 83       	st	Z, r18
    c6ea:	ce 01       	movw	r24, r28
    c6ec:	89 51       	subi	r24, 0x19	; 25
    c6ee:	9d 4f       	sbci	r25, 0xFD	; 253
    c6f0:	fc 01       	movw	r30, r24
    c6f2:	80 81       	ld	r24, Z
    c6f4:	91 81       	ldd	r25, Z+1	; 0x01
    c6f6:	8c 01       	movw	r16, r24
    c6f8:	c8 01       	movw	r24, r16
    c6fa:	01 97       	sbiw	r24, 0x01	; 1
    c6fc:	f1 f7       	brne	.-4      	; 0xc6fa <pick_drop+0x57e8>
    c6fe:	8c 01       	movw	r16, r24
    c700:	ce 01       	movw	r24, r28
    c702:	89 51       	subi	r24, 0x19	; 25
    c704:	9d 4f       	sbci	r25, 0xFD	; 253
    c706:	fc 01       	movw	r30, r24
    c708:	11 83       	std	Z+1, r17	; 0x01
    c70a:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(55);
    c70c:	87 e3       	ldi	r24, 0x37	; 55
    c70e:	90 e0       	ldi	r25, 0x00	; 0
    c710:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    c714:	9e 01       	movw	r18, r28
    c716:	27 51       	subi	r18, 0x17	; 23
    c718:	3d 4f       	sbci	r19, 0xFD	; 253
    c71a:	80 e0       	ldi	r24, 0x00	; 0
    c71c:	90 e0       	ldi	r25, 0x00	; 0
    c71e:	a0 ea       	ldi	r26, 0xA0	; 160
    c720:	b1 e4       	ldi	r27, 0x41	; 65
    c722:	f9 01       	movw	r30, r18
    c724:	80 83       	st	Z, r24
    c726:	91 83       	std	Z+1, r25	; 0x01
    c728:	a2 83       	std	Z+2, r26	; 0x02
    c72a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c72c:	8e 01       	movw	r16, r28
    c72e:	03 51       	subi	r16, 0x13	; 19
    c730:	1d 4f       	sbci	r17, 0xFD	; 253
    c732:	ce 01       	movw	r24, r28
    c734:	87 51       	subi	r24, 0x17	; 23
    c736:	9d 4f       	sbci	r25, 0xFD	; 253
    c738:	fc 01       	movw	r30, r24
    c73a:	60 81       	ld	r22, Z
    c73c:	71 81       	ldd	r23, Z+1	; 0x01
    c73e:	82 81       	ldd	r24, Z+2	; 0x02
    c740:	93 81       	ldd	r25, Z+3	; 0x03
    c742:	26 e6       	ldi	r18, 0x66	; 102
    c744:	36 e6       	ldi	r19, 0x66	; 102
    c746:	46 e6       	ldi	r20, 0x66	; 102
    c748:	55 e4       	ldi	r21, 0x45	; 69
    c74a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c74e:	dc 01       	movw	r26, r24
    c750:	cb 01       	movw	r24, r22
    c752:	f8 01       	movw	r30, r16
    c754:	80 83       	st	Z, r24
    c756:	91 83       	std	Z+1, r25	; 0x01
    c758:	a2 83       	std	Z+2, r26	; 0x02
    c75a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c75c:	ce 01       	movw	r24, r28
    c75e:	83 51       	subi	r24, 0x13	; 19
    c760:	9d 4f       	sbci	r25, 0xFD	; 253
    c762:	11 e0       	ldi	r17, 0x01	; 1
    c764:	fc 01       	movw	r30, r24
    c766:	60 81       	ld	r22, Z
    c768:	71 81       	ldd	r23, Z+1	; 0x01
    c76a:	82 81       	ldd	r24, Z+2	; 0x02
    c76c:	93 81       	ldd	r25, Z+3	; 0x03
    c76e:	20 e0       	ldi	r18, 0x00	; 0
    c770:	30 e0       	ldi	r19, 0x00	; 0
    c772:	40 e8       	ldi	r20, 0x80	; 128
    c774:	5f e3       	ldi	r21, 0x3F	; 63
    c776:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    c77a:	88 23       	and	r24, r24
    c77c:	0c f0       	brlt	.+2      	; 0xc780 <pick_drop+0x586e>
    c77e:	10 e0       	ldi	r17, 0x00	; 0
    c780:	11 23       	and	r17, r17
    c782:	49 f0       	breq	.+18     	; 0xc796 <pick_drop+0x5884>
		__ticks = 1;
    c784:	ce 01       	movw	r24, r28
    c786:	8f 50       	subi	r24, 0x0F	; 15
    c788:	9d 4f       	sbci	r25, 0xFD	; 253
    c78a:	21 e0       	ldi	r18, 0x01	; 1
    c78c:	30 e0       	ldi	r19, 0x00	; 0
    c78e:	fc 01       	movw	r30, r24
    c790:	31 83       	std	Z+1, r19	; 0x01
    c792:	20 83       	st	Z, r18
    c794:	74 c0       	rjmp	.+232    	; 0xc87e <pick_drop+0x596c>
	else if (__tmp > 65535)
    c796:	ce 01       	movw	r24, r28
    c798:	83 51       	subi	r24, 0x13	; 19
    c79a:	9d 4f       	sbci	r25, 0xFD	; 253
    c79c:	11 e0       	ldi	r17, 0x01	; 1
    c79e:	fc 01       	movw	r30, r24
    c7a0:	60 81       	ld	r22, Z
    c7a2:	71 81       	ldd	r23, Z+1	; 0x01
    c7a4:	82 81       	ldd	r24, Z+2	; 0x02
    c7a6:	93 81       	ldd	r25, Z+3	; 0x03
    c7a8:	20 e0       	ldi	r18, 0x00	; 0
    c7aa:	3f ef       	ldi	r19, 0xFF	; 255
    c7ac:	4f e7       	ldi	r20, 0x7F	; 127
    c7ae:	57 e4       	ldi	r21, 0x47	; 71
    c7b0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    c7b4:	18 16       	cp	r1, r24
    c7b6:	0c f0       	brlt	.+2      	; 0xc7ba <pick_drop+0x58a8>
    c7b8:	10 e0       	ldi	r17, 0x00	; 0
    c7ba:	11 23       	and	r17, r17
    c7bc:	09 f4       	brne	.+2      	; 0xc7c0 <pick_drop+0x58ae>
    c7be:	4d c0       	rjmp	.+154    	; 0xc85a <pick_drop+0x5948>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c7c0:	ce 01       	movw	r24, r28
    c7c2:	87 51       	subi	r24, 0x17	; 23
    c7c4:	9d 4f       	sbci	r25, 0xFD	; 253
    c7c6:	fc 01       	movw	r30, r24
    c7c8:	60 81       	ld	r22, Z
    c7ca:	71 81       	ldd	r23, Z+1	; 0x01
    c7cc:	82 81       	ldd	r24, Z+2	; 0x02
    c7ce:	93 81       	ldd	r25, Z+3	; 0x03
    c7d0:	20 e0       	ldi	r18, 0x00	; 0
    c7d2:	30 e0       	ldi	r19, 0x00	; 0
    c7d4:	40 e2       	ldi	r20, 0x20	; 32
    c7d6:	51 e4       	ldi	r21, 0x41	; 65
    c7d8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c7dc:	dc 01       	movw	r26, r24
    c7de:	cb 01       	movw	r24, r22
    c7e0:	8e 01       	movw	r16, r28
    c7e2:	0f 50       	subi	r16, 0x0F	; 15
    c7e4:	1d 4f       	sbci	r17, 0xFD	; 253
    c7e6:	bc 01       	movw	r22, r24
    c7e8:	cd 01       	movw	r24, r26
    c7ea:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c7ee:	dc 01       	movw	r26, r24
    c7f0:	cb 01       	movw	r24, r22
    c7f2:	f8 01       	movw	r30, r16
    c7f4:	91 83       	std	Z+1, r25	; 0x01
    c7f6:	80 83       	st	Z, r24
    c7f8:	27 c0       	rjmp	.+78     	; 0xc848 <pick_drop+0x5936>
    c7fa:	ce 01       	movw	r24, r28
    c7fc:	8d 50       	subi	r24, 0x0D	; 13
    c7fe:	9d 4f       	sbci	r25, 0xFD	; 253
    c800:	20 e7       	ldi	r18, 0x70	; 112
    c802:	31 e0       	ldi	r19, 0x01	; 1
    c804:	fc 01       	movw	r30, r24
    c806:	31 83       	std	Z+1, r19	; 0x01
    c808:	20 83       	st	Z, r18
    c80a:	ce 01       	movw	r24, r28
    c80c:	8d 50       	subi	r24, 0x0D	; 13
    c80e:	9d 4f       	sbci	r25, 0xFD	; 253
    c810:	fc 01       	movw	r30, r24
    c812:	80 81       	ld	r24, Z
    c814:	91 81       	ldd	r25, Z+1	; 0x01
    c816:	8c 01       	movw	r16, r24
    c818:	c8 01       	movw	r24, r16
    c81a:	01 97       	sbiw	r24, 0x01	; 1
    c81c:	f1 f7       	brne	.-4      	; 0xc81a <pick_drop+0x5908>
    c81e:	8c 01       	movw	r16, r24
    c820:	ce 01       	movw	r24, r28
    c822:	8d 50       	subi	r24, 0x0D	; 13
    c824:	9d 4f       	sbci	r25, 0xFD	; 253
    c826:	fc 01       	movw	r30, r24
    c828:	11 83       	std	Z+1, r17	; 0x01
    c82a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c82c:	ce 01       	movw	r24, r28
    c82e:	8f 50       	subi	r24, 0x0F	; 15
    c830:	9d 4f       	sbci	r25, 0xFD	; 253
    c832:	9e 01       	movw	r18, r28
    c834:	2f 50       	subi	r18, 0x0F	; 15
    c836:	3d 4f       	sbci	r19, 0xFD	; 253
    c838:	f9 01       	movw	r30, r18
    c83a:	20 81       	ld	r18, Z
    c83c:	31 81       	ldd	r19, Z+1	; 0x01
    c83e:	21 50       	subi	r18, 0x01	; 1
    c840:	30 40       	sbci	r19, 0x00	; 0
    c842:	fc 01       	movw	r30, r24
    c844:	31 83       	std	Z+1, r19	; 0x01
    c846:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c848:	ce 01       	movw	r24, r28
    c84a:	8f 50       	subi	r24, 0x0F	; 15
    c84c:	9d 4f       	sbci	r25, 0xFD	; 253
    c84e:	fc 01       	movw	r30, r24
    c850:	80 81       	ld	r24, Z
    c852:	91 81       	ldd	r25, Z+1	; 0x01
    c854:	00 97       	sbiw	r24, 0x00	; 0
    c856:	89 f6       	brne	.-94     	; 0xc7fa <pick_drop+0x58e8>
    c858:	04 c7       	rjmp	.+3592   	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c85a:	8e 01       	movw	r16, r28
    c85c:	0f 50       	subi	r16, 0x0F	; 15
    c85e:	1d 4f       	sbci	r17, 0xFD	; 253
    c860:	ce 01       	movw	r24, r28
    c862:	83 51       	subi	r24, 0x13	; 19
    c864:	9d 4f       	sbci	r25, 0xFD	; 253
    c866:	fc 01       	movw	r30, r24
    c868:	60 81       	ld	r22, Z
    c86a:	71 81       	ldd	r23, Z+1	; 0x01
    c86c:	82 81       	ldd	r24, Z+2	; 0x02
    c86e:	93 81       	ldd	r25, Z+3	; 0x03
    c870:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c874:	dc 01       	movw	r26, r24
    c876:	cb 01       	movw	r24, r22
    c878:	f8 01       	movw	r30, r16
    c87a:	91 83       	std	Z+1, r25	; 0x01
    c87c:	80 83       	st	Z, r24
    c87e:	ce 01       	movw	r24, r28
    c880:	8b 50       	subi	r24, 0x0B	; 11
    c882:	9d 4f       	sbci	r25, 0xFD	; 253
    c884:	9e 01       	movw	r18, r28
    c886:	2f 50       	subi	r18, 0x0F	; 15
    c888:	3d 4f       	sbci	r19, 0xFD	; 253
    c88a:	f9 01       	movw	r30, r18
    c88c:	20 81       	ld	r18, Z
    c88e:	31 81       	ldd	r19, Z+1	; 0x01
    c890:	fc 01       	movw	r30, r24
    c892:	31 83       	std	Z+1, r19	; 0x01
    c894:	20 83       	st	Z, r18
    c896:	ce 01       	movw	r24, r28
    c898:	8b 50       	subi	r24, 0x0B	; 11
    c89a:	9d 4f       	sbci	r25, 0xFD	; 253
    c89c:	fc 01       	movw	r30, r24
    c89e:	80 81       	ld	r24, Z
    c8a0:	91 81       	ldd	r25, Z+1	; 0x01
    c8a2:	8c 01       	movw	r16, r24
    c8a4:	c8 01       	movw	r24, r16
    c8a6:	01 97       	sbiw	r24, 0x01	; 1
    c8a8:	f1 f7       	brne	.-4      	; 0xc8a6 <pick_drop+0x5994>
    c8aa:	8c 01       	movw	r16, r24
    c8ac:	ce 01       	movw	r24, r28
    c8ae:	8b 50       	subi	r24, 0x0B	; 11
    c8b0:	9d 4f       	sbci	r25, 0xFD	; 253
    c8b2:	fc 01       	movw	r30, r24
    c8b4:	11 83       	std	Z+1, r17	; 0x01
    c8b6:	00 83       	st	Z, r16
    c8b8:	d4 c6       	rjmp	.+3496   	; 0xd662 <pick_drop+0x6750>
			_delay_ms(20);
		}       
	}
		else if(pd=='7'){//6X6 F6
    c8ba:	ce 01       	movw	r24, r28
    c8bc:	89 59       	subi	r24, 0x99	; 153
    c8be:	9c 4f       	sbci	r25, 0xFC	; 252
    c8c0:	fc 01       	movw	r30, r24
    c8c2:	80 81       	ld	r24, Z
    c8c4:	87 33       	cpi	r24, 0x37	; 55
    c8c6:	09 f0       	breq	.+2      	; 0xc8ca <pick_drop+0x59b8>
    c8c8:	1a c5       	rjmp	.+2612   	; 0xd2fe <pick_drop+0x63ec>
				if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    c8ca:	80 91 71 03 	lds	r24, 0x0371
    c8ce:	90 91 72 03 	lds	r25, 0x0372
    c8d2:	01 97       	sbiw	r24, 0x01	; 1
    c8d4:	8b 58       	subi	r24, 0x8B	; 139
    c8d6:	9c 4f       	sbci	r25, 0xFC	; 252
    c8d8:	fc 01       	movw	r30, r24
    c8da:	80 81       	ld	r24, Z
    c8dc:	8c 34       	cpi	r24, 0x4C	; 76
    c8de:	61 f0       	breq	.+24     	; 0xc8f8 <pick_drop+0x59e6>
    c8e0:	80 91 71 03 	lds	r24, 0x0371
    c8e4:	90 91 72 03 	lds	r25, 0x0372
    c8e8:	01 97       	sbiw	r24, 0x01	; 1
    c8ea:	8b 58       	subi	r24, 0x8B	; 139
    c8ec:	9c 4f       	sbci	r25, 0xFC	; 252
    c8ee:	fc 01       	movw	r30, r24
    c8f0:	80 81       	ld	r24, Z
    c8f2:	82 35       	cpi	r24, 0x52	; 82
    c8f4:	09 f0       	breq	.+2      	; 0xc8f8 <pick_drop+0x59e6>
    c8f6:	aa c1       	rjmp	.+852    	; 0xcc4c <pick_drop+0x5d3a>
					stop();
    c8f8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    c8fc:	9e 01       	movw	r18, r28
    c8fe:	29 50       	subi	r18, 0x09	; 9
    c900:	3d 4f       	sbci	r19, 0xFD	; 253
    c902:	80 e0       	ldi	r24, 0x00	; 0
    c904:	90 e0       	ldi	r25, 0x00	; 0
    c906:	a0 ea       	ldi	r26, 0xA0	; 160
    c908:	b1 e4       	ldi	r27, 0x41	; 65
    c90a:	f9 01       	movw	r30, r18
    c90c:	80 83       	st	Z, r24
    c90e:	91 83       	std	Z+1, r25	; 0x01
    c910:	a2 83       	std	Z+2, r26	; 0x02
    c912:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c914:	8e 01       	movw	r16, r28
    c916:	05 50       	subi	r16, 0x05	; 5
    c918:	1d 4f       	sbci	r17, 0xFD	; 253
    c91a:	ce 01       	movw	r24, r28
    c91c:	89 50       	subi	r24, 0x09	; 9
    c91e:	9d 4f       	sbci	r25, 0xFD	; 253
    c920:	fc 01       	movw	r30, r24
    c922:	60 81       	ld	r22, Z
    c924:	71 81       	ldd	r23, Z+1	; 0x01
    c926:	82 81       	ldd	r24, Z+2	; 0x02
    c928:	93 81       	ldd	r25, Z+3	; 0x03
    c92a:	26 e6       	ldi	r18, 0x66	; 102
    c92c:	36 e6       	ldi	r19, 0x66	; 102
    c92e:	46 e6       	ldi	r20, 0x66	; 102
    c930:	55 e4       	ldi	r21, 0x45	; 69
    c932:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c936:	dc 01       	movw	r26, r24
    c938:	cb 01       	movw	r24, r22
    c93a:	f8 01       	movw	r30, r16
    c93c:	80 83       	st	Z, r24
    c93e:	91 83       	std	Z+1, r25	; 0x01
    c940:	a2 83       	std	Z+2, r26	; 0x02
    c942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c944:	ce 01       	movw	r24, r28
    c946:	85 50       	subi	r24, 0x05	; 5
    c948:	9d 4f       	sbci	r25, 0xFD	; 253
    c94a:	11 e0       	ldi	r17, 0x01	; 1
    c94c:	fc 01       	movw	r30, r24
    c94e:	60 81       	ld	r22, Z
    c950:	71 81       	ldd	r23, Z+1	; 0x01
    c952:	82 81       	ldd	r24, Z+2	; 0x02
    c954:	93 81       	ldd	r25, Z+3	; 0x03
    c956:	20 e0       	ldi	r18, 0x00	; 0
    c958:	30 e0       	ldi	r19, 0x00	; 0
    c95a:	40 e8       	ldi	r20, 0x80	; 128
    c95c:	5f e3       	ldi	r21, 0x3F	; 63
    c95e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    c962:	88 23       	and	r24, r24
    c964:	0c f0       	brlt	.+2      	; 0xc968 <pick_drop+0x5a56>
    c966:	10 e0       	ldi	r17, 0x00	; 0
    c968:	11 23       	and	r17, r17
    c96a:	49 f0       	breq	.+18     	; 0xc97e <pick_drop+0x5a6c>
		__ticks = 1;
    c96c:	ce 01       	movw	r24, r28
    c96e:	81 50       	subi	r24, 0x01	; 1
    c970:	9d 4f       	sbci	r25, 0xFD	; 253
    c972:	21 e0       	ldi	r18, 0x01	; 1
    c974:	30 e0       	ldi	r19, 0x00	; 0
    c976:	fc 01       	movw	r30, r24
    c978:	31 83       	std	Z+1, r19	; 0x01
    c97a:	20 83       	st	Z, r18
    c97c:	74 c0       	rjmp	.+232    	; 0xca66 <pick_drop+0x5b54>
	else if (__tmp > 65535)
    c97e:	ce 01       	movw	r24, r28
    c980:	85 50       	subi	r24, 0x05	; 5
    c982:	9d 4f       	sbci	r25, 0xFD	; 253
    c984:	11 e0       	ldi	r17, 0x01	; 1
    c986:	fc 01       	movw	r30, r24
    c988:	60 81       	ld	r22, Z
    c98a:	71 81       	ldd	r23, Z+1	; 0x01
    c98c:	82 81       	ldd	r24, Z+2	; 0x02
    c98e:	93 81       	ldd	r25, Z+3	; 0x03
    c990:	20 e0       	ldi	r18, 0x00	; 0
    c992:	3f ef       	ldi	r19, 0xFF	; 255
    c994:	4f e7       	ldi	r20, 0x7F	; 127
    c996:	57 e4       	ldi	r21, 0x47	; 71
    c998:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    c99c:	18 16       	cp	r1, r24
    c99e:	0c f0       	brlt	.+2      	; 0xc9a2 <pick_drop+0x5a90>
    c9a0:	10 e0       	ldi	r17, 0x00	; 0
    c9a2:	11 23       	and	r17, r17
    c9a4:	09 f4       	brne	.+2      	; 0xc9a8 <pick_drop+0x5a96>
    c9a6:	4d c0       	rjmp	.+154    	; 0xca42 <pick_drop+0x5b30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c9a8:	ce 01       	movw	r24, r28
    c9aa:	89 50       	subi	r24, 0x09	; 9
    c9ac:	9d 4f       	sbci	r25, 0xFD	; 253
    c9ae:	fc 01       	movw	r30, r24
    c9b0:	60 81       	ld	r22, Z
    c9b2:	71 81       	ldd	r23, Z+1	; 0x01
    c9b4:	82 81       	ldd	r24, Z+2	; 0x02
    c9b6:	93 81       	ldd	r25, Z+3	; 0x03
    c9b8:	20 e0       	ldi	r18, 0x00	; 0
    c9ba:	30 e0       	ldi	r19, 0x00	; 0
    c9bc:	40 e2       	ldi	r20, 0x20	; 32
    c9be:	51 e4       	ldi	r21, 0x41	; 65
    c9c0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    c9c4:	dc 01       	movw	r26, r24
    c9c6:	cb 01       	movw	r24, r22
    c9c8:	8e 01       	movw	r16, r28
    c9ca:	01 50       	subi	r16, 0x01	; 1
    c9cc:	1d 4f       	sbci	r17, 0xFD	; 253
    c9ce:	bc 01       	movw	r22, r24
    c9d0:	cd 01       	movw	r24, r26
    c9d2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    c9d6:	dc 01       	movw	r26, r24
    c9d8:	cb 01       	movw	r24, r22
    c9da:	f8 01       	movw	r30, r16
    c9dc:	91 83       	std	Z+1, r25	; 0x01
    c9de:	80 83       	st	Z, r24
    c9e0:	27 c0       	rjmp	.+78     	; 0xca30 <pick_drop+0x5b1e>
    c9e2:	ce 01       	movw	r24, r28
    c9e4:	8f 5f       	subi	r24, 0xFF	; 255
    c9e6:	9c 4f       	sbci	r25, 0xFC	; 252
    c9e8:	20 e7       	ldi	r18, 0x70	; 112
    c9ea:	31 e0       	ldi	r19, 0x01	; 1
    c9ec:	fc 01       	movw	r30, r24
    c9ee:	31 83       	std	Z+1, r19	; 0x01
    c9f0:	20 83       	st	Z, r18
    c9f2:	ce 01       	movw	r24, r28
    c9f4:	8f 5f       	subi	r24, 0xFF	; 255
    c9f6:	9c 4f       	sbci	r25, 0xFC	; 252
    c9f8:	fc 01       	movw	r30, r24
    c9fa:	80 81       	ld	r24, Z
    c9fc:	91 81       	ldd	r25, Z+1	; 0x01
    c9fe:	8c 01       	movw	r16, r24
    ca00:	c8 01       	movw	r24, r16
    ca02:	01 97       	sbiw	r24, 0x01	; 1
    ca04:	f1 f7       	brne	.-4      	; 0xca02 <pick_drop+0x5af0>
    ca06:	8c 01       	movw	r16, r24
    ca08:	ce 01       	movw	r24, r28
    ca0a:	8f 5f       	subi	r24, 0xFF	; 255
    ca0c:	9c 4f       	sbci	r25, 0xFC	; 252
    ca0e:	fc 01       	movw	r30, r24
    ca10:	11 83       	std	Z+1, r17	; 0x01
    ca12:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ca14:	ce 01       	movw	r24, r28
    ca16:	81 50       	subi	r24, 0x01	; 1
    ca18:	9d 4f       	sbci	r25, 0xFD	; 253
    ca1a:	9e 01       	movw	r18, r28
    ca1c:	21 50       	subi	r18, 0x01	; 1
    ca1e:	3d 4f       	sbci	r19, 0xFD	; 253
    ca20:	f9 01       	movw	r30, r18
    ca22:	20 81       	ld	r18, Z
    ca24:	31 81       	ldd	r19, Z+1	; 0x01
    ca26:	21 50       	subi	r18, 0x01	; 1
    ca28:	30 40       	sbci	r19, 0x00	; 0
    ca2a:	fc 01       	movw	r30, r24
    ca2c:	31 83       	std	Z+1, r19	; 0x01
    ca2e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ca30:	ce 01       	movw	r24, r28
    ca32:	81 50       	subi	r24, 0x01	; 1
    ca34:	9d 4f       	sbci	r25, 0xFD	; 253
    ca36:	fc 01       	movw	r30, r24
    ca38:	80 81       	ld	r24, Z
    ca3a:	91 81       	ldd	r25, Z+1	; 0x01
    ca3c:	00 97       	sbiw	r24, 0x00	; 0
    ca3e:	89 f6       	brne	.-94     	; 0xc9e2 <pick_drop+0x5ad0>
    ca40:	2f c0       	rjmp	.+94     	; 0xcaa0 <pick_drop+0x5b8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ca42:	8e 01       	movw	r16, r28
    ca44:	01 50       	subi	r16, 0x01	; 1
    ca46:	1d 4f       	sbci	r17, 0xFD	; 253
    ca48:	ce 01       	movw	r24, r28
    ca4a:	85 50       	subi	r24, 0x05	; 5
    ca4c:	9d 4f       	sbci	r25, 0xFD	; 253
    ca4e:	fc 01       	movw	r30, r24
    ca50:	60 81       	ld	r22, Z
    ca52:	71 81       	ldd	r23, Z+1	; 0x01
    ca54:	82 81       	ldd	r24, Z+2	; 0x02
    ca56:	93 81       	ldd	r25, Z+3	; 0x03
    ca58:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ca5c:	dc 01       	movw	r26, r24
    ca5e:	cb 01       	movw	r24, r22
    ca60:	f8 01       	movw	r30, r16
    ca62:	91 83       	std	Z+1, r25	; 0x01
    ca64:	80 83       	st	Z, r24
    ca66:	ce 01       	movw	r24, r28
    ca68:	8d 5f       	subi	r24, 0xFD	; 253
    ca6a:	9c 4f       	sbci	r25, 0xFC	; 252
    ca6c:	9e 01       	movw	r18, r28
    ca6e:	21 50       	subi	r18, 0x01	; 1
    ca70:	3d 4f       	sbci	r19, 0xFD	; 253
    ca72:	f9 01       	movw	r30, r18
    ca74:	20 81       	ld	r18, Z
    ca76:	31 81       	ldd	r19, Z+1	; 0x01
    ca78:	fc 01       	movw	r30, r24
    ca7a:	31 83       	std	Z+1, r19	; 0x01
    ca7c:	20 83       	st	Z, r18
    ca7e:	ce 01       	movw	r24, r28
    ca80:	8d 5f       	subi	r24, 0xFD	; 253
    ca82:	9c 4f       	sbci	r25, 0xFC	; 252
    ca84:	fc 01       	movw	r30, r24
    ca86:	80 81       	ld	r24, Z
    ca88:	91 81       	ldd	r25, Z+1	; 0x01
    ca8a:	8c 01       	movw	r16, r24
    ca8c:	c8 01       	movw	r24, r16
    ca8e:	01 97       	sbiw	r24, 0x01	; 1
    ca90:	f1 f7       	brne	.-4      	; 0xca8e <pick_drop+0x5b7c>
    ca92:	8c 01       	movw	r16, r24
    ca94:	ce 01       	movw	r24, r28
    ca96:	8d 5f       	subi	r24, 0xFD	; 253
    ca98:	9c 4f       	sbci	r25, 0xFC	; 252
    ca9a:	fc 01       	movw	r30, r24
    ca9c:	11 83       	std	Z+1, r17	; 0x01
    ca9e:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    caa0:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    caa4:	9e 01       	movw	r18, r28
    caa6:	2b 5f       	subi	r18, 0xFB	; 251
    caa8:	3c 4f       	sbci	r19, 0xFC	; 252
    caaa:	80 e0       	ldi	r24, 0x00	; 0
    caac:	90 e0       	ldi	r25, 0x00	; 0
    caae:	a8 ec       	ldi	r26, 0xC8	; 200
    cab0:	b2 e4       	ldi	r27, 0x42	; 66
    cab2:	f9 01       	movw	r30, r18
    cab4:	80 83       	st	Z, r24
    cab6:	91 83       	std	Z+1, r25	; 0x01
    cab8:	a2 83       	std	Z+2, r26	; 0x02
    caba:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cabc:	8e 01       	movw	r16, r28
    cabe:	07 5f       	subi	r16, 0xF7	; 247
    cac0:	1c 4f       	sbci	r17, 0xFC	; 252
    cac2:	ce 01       	movw	r24, r28
    cac4:	8b 5f       	subi	r24, 0xFB	; 251
    cac6:	9c 4f       	sbci	r25, 0xFC	; 252
    cac8:	fc 01       	movw	r30, r24
    caca:	60 81       	ld	r22, Z
    cacc:	71 81       	ldd	r23, Z+1	; 0x01
    cace:	82 81       	ldd	r24, Z+2	; 0x02
    cad0:	93 81       	ldd	r25, Z+3	; 0x03
    cad2:	26 e6       	ldi	r18, 0x66	; 102
    cad4:	36 e6       	ldi	r19, 0x66	; 102
    cad6:	46 e6       	ldi	r20, 0x66	; 102
    cad8:	55 e4       	ldi	r21, 0x45	; 69
    cada:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    cade:	dc 01       	movw	r26, r24
    cae0:	cb 01       	movw	r24, r22
    cae2:	f8 01       	movw	r30, r16
    cae4:	80 83       	st	Z, r24
    cae6:	91 83       	std	Z+1, r25	; 0x01
    cae8:	a2 83       	std	Z+2, r26	; 0x02
    caea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    caec:	ce 01       	movw	r24, r28
    caee:	87 5f       	subi	r24, 0xF7	; 247
    caf0:	9c 4f       	sbci	r25, 0xFC	; 252
    caf2:	11 e0       	ldi	r17, 0x01	; 1
    caf4:	fc 01       	movw	r30, r24
    caf6:	60 81       	ld	r22, Z
    caf8:	71 81       	ldd	r23, Z+1	; 0x01
    cafa:	82 81       	ldd	r24, Z+2	; 0x02
    cafc:	93 81       	ldd	r25, Z+3	; 0x03
    cafe:	20 e0       	ldi	r18, 0x00	; 0
    cb00:	30 e0       	ldi	r19, 0x00	; 0
    cb02:	40 e8       	ldi	r20, 0x80	; 128
    cb04:	5f e3       	ldi	r21, 0x3F	; 63
    cb06:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    cb0a:	88 23       	and	r24, r24
    cb0c:	0c f0       	brlt	.+2      	; 0xcb10 <pick_drop+0x5bfe>
    cb0e:	10 e0       	ldi	r17, 0x00	; 0
    cb10:	11 23       	and	r17, r17
    cb12:	49 f0       	breq	.+18     	; 0xcb26 <pick_drop+0x5c14>
		__ticks = 1;
    cb14:	ce 01       	movw	r24, r28
    cb16:	83 5f       	subi	r24, 0xF3	; 243
    cb18:	9c 4f       	sbci	r25, 0xFC	; 252
    cb1a:	21 e0       	ldi	r18, 0x01	; 1
    cb1c:	30 e0       	ldi	r19, 0x00	; 0
    cb1e:	fc 01       	movw	r30, r24
    cb20:	31 83       	std	Z+1, r19	; 0x01
    cb22:	20 83       	st	Z, r18
    cb24:	74 c0       	rjmp	.+232    	; 0xcc0e <pick_drop+0x5cfc>
	else if (__tmp > 65535)
    cb26:	ce 01       	movw	r24, r28
    cb28:	87 5f       	subi	r24, 0xF7	; 247
    cb2a:	9c 4f       	sbci	r25, 0xFC	; 252
    cb2c:	11 e0       	ldi	r17, 0x01	; 1
    cb2e:	fc 01       	movw	r30, r24
    cb30:	60 81       	ld	r22, Z
    cb32:	71 81       	ldd	r23, Z+1	; 0x01
    cb34:	82 81       	ldd	r24, Z+2	; 0x02
    cb36:	93 81       	ldd	r25, Z+3	; 0x03
    cb38:	20 e0       	ldi	r18, 0x00	; 0
    cb3a:	3f ef       	ldi	r19, 0xFF	; 255
    cb3c:	4f e7       	ldi	r20, 0x7F	; 127
    cb3e:	57 e4       	ldi	r21, 0x47	; 71
    cb40:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    cb44:	18 16       	cp	r1, r24
    cb46:	0c f0       	brlt	.+2      	; 0xcb4a <pick_drop+0x5c38>
    cb48:	10 e0       	ldi	r17, 0x00	; 0
    cb4a:	11 23       	and	r17, r17
    cb4c:	09 f4       	brne	.+2      	; 0xcb50 <pick_drop+0x5c3e>
    cb4e:	4d c0       	rjmp	.+154    	; 0xcbea <pick_drop+0x5cd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cb50:	ce 01       	movw	r24, r28
    cb52:	8b 5f       	subi	r24, 0xFB	; 251
    cb54:	9c 4f       	sbci	r25, 0xFC	; 252
    cb56:	fc 01       	movw	r30, r24
    cb58:	60 81       	ld	r22, Z
    cb5a:	71 81       	ldd	r23, Z+1	; 0x01
    cb5c:	82 81       	ldd	r24, Z+2	; 0x02
    cb5e:	93 81       	ldd	r25, Z+3	; 0x03
    cb60:	20 e0       	ldi	r18, 0x00	; 0
    cb62:	30 e0       	ldi	r19, 0x00	; 0
    cb64:	40 e2       	ldi	r20, 0x20	; 32
    cb66:	51 e4       	ldi	r21, 0x41	; 65
    cb68:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    cb6c:	dc 01       	movw	r26, r24
    cb6e:	cb 01       	movw	r24, r22
    cb70:	8e 01       	movw	r16, r28
    cb72:	03 5f       	subi	r16, 0xF3	; 243
    cb74:	1c 4f       	sbci	r17, 0xFC	; 252
    cb76:	bc 01       	movw	r22, r24
    cb78:	cd 01       	movw	r24, r26
    cb7a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    cb7e:	dc 01       	movw	r26, r24
    cb80:	cb 01       	movw	r24, r22
    cb82:	f8 01       	movw	r30, r16
    cb84:	91 83       	std	Z+1, r25	; 0x01
    cb86:	80 83       	st	Z, r24
    cb88:	27 c0       	rjmp	.+78     	; 0xcbd8 <pick_drop+0x5cc6>
    cb8a:	ce 01       	movw	r24, r28
    cb8c:	81 5f       	subi	r24, 0xF1	; 241
    cb8e:	9c 4f       	sbci	r25, 0xFC	; 252
    cb90:	20 e7       	ldi	r18, 0x70	; 112
    cb92:	31 e0       	ldi	r19, 0x01	; 1
    cb94:	fc 01       	movw	r30, r24
    cb96:	31 83       	std	Z+1, r19	; 0x01
    cb98:	20 83       	st	Z, r18
    cb9a:	ce 01       	movw	r24, r28
    cb9c:	81 5f       	subi	r24, 0xF1	; 241
    cb9e:	9c 4f       	sbci	r25, 0xFC	; 252
    cba0:	fc 01       	movw	r30, r24
    cba2:	80 81       	ld	r24, Z
    cba4:	91 81       	ldd	r25, Z+1	; 0x01
    cba6:	8c 01       	movw	r16, r24
    cba8:	c8 01       	movw	r24, r16
    cbaa:	01 97       	sbiw	r24, 0x01	; 1
    cbac:	f1 f7       	brne	.-4      	; 0xcbaa <pick_drop+0x5c98>
    cbae:	8c 01       	movw	r16, r24
    cbb0:	ce 01       	movw	r24, r28
    cbb2:	81 5f       	subi	r24, 0xF1	; 241
    cbb4:	9c 4f       	sbci	r25, 0xFC	; 252
    cbb6:	fc 01       	movw	r30, r24
    cbb8:	11 83       	std	Z+1, r17	; 0x01
    cbba:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cbbc:	ce 01       	movw	r24, r28
    cbbe:	83 5f       	subi	r24, 0xF3	; 243
    cbc0:	9c 4f       	sbci	r25, 0xFC	; 252
    cbc2:	9e 01       	movw	r18, r28
    cbc4:	23 5f       	subi	r18, 0xF3	; 243
    cbc6:	3c 4f       	sbci	r19, 0xFC	; 252
    cbc8:	f9 01       	movw	r30, r18
    cbca:	20 81       	ld	r18, Z
    cbcc:	31 81       	ldd	r19, Z+1	; 0x01
    cbce:	21 50       	subi	r18, 0x01	; 1
    cbd0:	30 40       	sbci	r19, 0x00	; 0
    cbd2:	fc 01       	movw	r30, r24
    cbd4:	31 83       	std	Z+1, r19	; 0x01
    cbd6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cbd8:	ce 01       	movw	r24, r28
    cbda:	83 5f       	subi	r24, 0xF3	; 243
    cbdc:	9c 4f       	sbci	r25, 0xFC	; 252
    cbde:	fc 01       	movw	r30, r24
    cbe0:	80 81       	ld	r24, Z
    cbe2:	91 81       	ldd	r25, Z+1	; 0x01
    cbe4:	00 97       	sbiw	r24, 0x00	; 0
    cbe6:	89 f6       	brne	.-94     	; 0xcb8a <pick_drop+0x5c78>
    cbe8:	30 c0       	rjmp	.+96     	; 0xcc4a <pick_drop+0x5d38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cbea:	8e 01       	movw	r16, r28
    cbec:	03 5f       	subi	r16, 0xF3	; 243
    cbee:	1c 4f       	sbci	r17, 0xFC	; 252
    cbf0:	ce 01       	movw	r24, r28
    cbf2:	87 5f       	subi	r24, 0xF7	; 247
    cbf4:	9c 4f       	sbci	r25, 0xFC	; 252
    cbf6:	fc 01       	movw	r30, r24
    cbf8:	60 81       	ld	r22, Z
    cbfa:	71 81       	ldd	r23, Z+1	; 0x01
    cbfc:	82 81       	ldd	r24, Z+2	; 0x02
    cbfe:	93 81       	ldd	r25, Z+3	; 0x03
    cc00:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    cc04:	dc 01       	movw	r26, r24
    cc06:	cb 01       	movw	r24, r22
    cc08:	f8 01       	movw	r30, r16
    cc0a:	91 83       	std	Z+1, r25	; 0x01
    cc0c:	80 83       	st	Z, r24
    cc0e:	ce 01       	movw	r24, r28
    cc10:	8f 5e       	subi	r24, 0xEF	; 239
    cc12:	9c 4f       	sbci	r25, 0xFC	; 252
    cc14:	9e 01       	movw	r18, r28
    cc16:	23 5f       	subi	r18, 0xF3	; 243
    cc18:	3c 4f       	sbci	r19, 0xFC	; 252
    cc1a:	f9 01       	movw	r30, r18
    cc1c:	20 81       	ld	r18, Z
    cc1e:	31 81       	ldd	r19, Z+1	; 0x01
    cc20:	fc 01       	movw	r30, r24
    cc22:	31 83       	std	Z+1, r19	; 0x01
    cc24:	20 83       	st	Z, r18
    cc26:	ce 01       	movw	r24, r28
    cc28:	8f 5e       	subi	r24, 0xEF	; 239
    cc2a:	9c 4f       	sbci	r25, 0xFC	; 252
    cc2c:	fc 01       	movw	r30, r24
    cc2e:	80 81       	ld	r24, Z
    cc30:	91 81       	ldd	r25, Z+1	; 0x01
    cc32:	8c 01       	movw	r16, r24
    cc34:	c8 01       	movw	r24, r16
    cc36:	01 97       	sbiw	r24, 0x01	; 1
    cc38:	f1 f7       	brne	.-4      	; 0xcc36 <pick_drop+0x5d24>
    cc3a:	8c 01       	movw	r16, r24
    cc3c:	ce 01       	movw	r24, r28
    cc3e:	8f 5e       	subi	r24, 0xEF	; 239
    cc40:	9c 4f       	sbci	r25, 0xFC	; 252
    cc42:	fc 01       	movw	r30, r24
    cc44:	11 83       	std	Z+1, r17	; 0x01
    cc46:	00 83       	st	Z, r16
					_delay_ms(100);
    cc48:	0c c5       	rjmp	.+2584   	; 0xd662 <pick_drop+0x6750>
    cc4a:	0b c5       	rjmp	.+2582   	; 0xd662 <pick_drop+0x6750>
				}
				else{
					forward_mm(35);
    cc4c:	83 e2       	ldi	r24, 0x23	; 35
    cc4e:	90 e0       	ldi	r25, 0x00	; 0
    cc50:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    cc54:	9e 01       	movw	r18, r28
    cc56:	2d 5e       	subi	r18, 0xED	; 237
    cc58:	3c 4f       	sbci	r19, 0xFC	; 252
    cc5a:	80 e0       	ldi	r24, 0x00	; 0
    cc5c:	90 e0       	ldi	r25, 0x00	; 0
    cc5e:	a0 ea       	ldi	r26, 0xA0	; 160
    cc60:	b1 e4       	ldi	r27, 0x41	; 65
    cc62:	f9 01       	movw	r30, r18
    cc64:	80 83       	st	Z, r24
    cc66:	91 83       	std	Z+1, r25	; 0x01
    cc68:	a2 83       	std	Z+2, r26	; 0x02
    cc6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cc6c:	8e 01       	movw	r16, r28
    cc6e:	09 5e       	subi	r16, 0xE9	; 233
    cc70:	1c 4f       	sbci	r17, 0xFC	; 252
    cc72:	ce 01       	movw	r24, r28
    cc74:	8d 5e       	subi	r24, 0xED	; 237
    cc76:	9c 4f       	sbci	r25, 0xFC	; 252
    cc78:	fc 01       	movw	r30, r24
    cc7a:	60 81       	ld	r22, Z
    cc7c:	71 81       	ldd	r23, Z+1	; 0x01
    cc7e:	82 81       	ldd	r24, Z+2	; 0x02
    cc80:	93 81       	ldd	r25, Z+3	; 0x03
    cc82:	26 e6       	ldi	r18, 0x66	; 102
    cc84:	36 e6       	ldi	r19, 0x66	; 102
    cc86:	46 e6       	ldi	r20, 0x66	; 102
    cc88:	55 e4       	ldi	r21, 0x45	; 69
    cc8a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    cc8e:	dc 01       	movw	r26, r24
    cc90:	cb 01       	movw	r24, r22
    cc92:	f8 01       	movw	r30, r16
    cc94:	80 83       	st	Z, r24
    cc96:	91 83       	std	Z+1, r25	; 0x01
    cc98:	a2 83       	std	Z+2, r26	; 0x02
    cc9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cc9c:	ce 01       	movw	r24, r28
    cc9e:	89 5e       	subi	r24, 0xE9	; 233
    cca0:	9c 4f       	sbci	r25, 0xFC	; 252
    cca2:	11 e0       	ldi	r17, 0x01	; 1
    cca4:	fc 01       	movw	r30, r24
    cca6:	60 81       	ld	r22, Z
    cca8:	71 81       	ldd	r23, Z+1	; 0x01
    ccaa:	82 81       	ldd	r24, Z+2	; 0x02
    ccac:	93 81       	ldd	r25, Z+3	; 0x03
    ccae:	20 e0       	ldi	r18, 0x00	; 0
    ccb0:	30 e0       	ldi	r19, 0x00	; 0
    ccb2:	40 e8       	ldi	r20, 0x80	; 128
    ccb4:	5f e3       	ldi	r21, 0x3F	; 63
    ccb6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ccba:	88 23       	and	r24, r24
    ccbc:	0c f0       	brlt	.+2      	; 0xccc0 <pick_drop+0x5dae>
    ccbe:	10 e0       	ldi	r17, 0x00	; 0
    ccc0:	11 23       	and	r17, r17
    ccc2:	49 f0       	breq	.+18     	; 0xccd6 <pick_drop+0x5dc4>
		__ticks = 1;
    ccc4:	ce 01       	movw	r24, r28
    ccc6:	85 5e       	subi	r24, 0xE5	; 229
    ccc8:	9c 4f       	sbci	r25, 0xFC	; 252
    ccca:	21 e0       	ldi	r18, 0x01	; 1
    cccc:	30 e0       	ldi	r19, 0x00	; 0
    ccce:	fc 01       	movw	r30, r24
    ccd0:	31 83       	std	Z+1, r19	; 0x01
    ccd2:	20 83       	st	Z, r18
    ccd4:	74 c0       	rjmp	.+232    	; 0xcdbe <pick_drop+0x5eac>
	else if (__tmp > 65535)
    ccd6:	ce 01       	movw	r24, r28
    ccd8:	89 5e       	subi	r24, 0xE9	; 233
    ccda:	9c 4f       	sbci	r25, 0xFC	; 252
    ccdc:	11 e0       	ldi	r17, 0x01	; 1
    ccde:	fc 01       	movw	r30, r24
    cce0:	60 81       	ld	r22, Z
    cce2:	71 81       	ldd	r23, Z+1	; 0x01
    cce4:	82 81       	ldd	r24, Z+2	; 0x02
    cce6:	93 81       	ldd	r25, Z+3	; 0x03
    cce8:	20 e0       	ldi	r18, 0x00	; 0
    ccea:	3f ef       	ldi	r19, 0xFF	; 255
    ccec:	4f e7       	ldi	r20, 0x7F	; 127
    ccee:	57 e4       	ldi	r21, 0x47	; 71
    ccf0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ccf4:	18 16       	cp	r1, r24
    ccf6:	0c f0       	brlt	.+2      	; 0xccfa <pick_drop+0x5de8>
    ccf8:	10 e0       	ldi	r17, 0x00	; 0
    ccfa:	11 23       	and	r17, r17
    ccfc:	09 f4       	brne	.+2      	; 0xcd00 <pick_drop+0x5dee>
    ccfe:	4d c0       	rjmp	.+154    	; 0xcd9a <pick_drop+0x5e88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cd00:	ce 01       	movw	r24, r28
    cd02:	8d 5e       	subi	r24, 0xED	; 237
    cd04:	9c 4f       	sbci	r25, 0xFC	; 252
    cd06:	fc 01       	movw	r30, r24
    cd08:	60 81       	ld	r22, Z
    cd0a:	71 81       	ldd	r23, Z+1	; 0x01
    cd0c:	82 81       	ldd	r24, Z+2	; 0x02
    cd0e:	93 81       	ldd	r25, Z+3	; 0x03
    cd10:	20 e0       	ldi	r18, 0x00	; 0
    cd12:	30 e0       	ldi	r19, 0x00	; 0
    cd14:	40 e2       	ldi	r20, 0x20	; 32
    cd16:	51 e4       	ldi	r21, 0x41	; 65
    cd18:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    cd1c:	dc 01       	movw	r26, r24
    cd1e:	cb 01       	movw	r24, r22
    cd20:	8e 01       	movw	r16, r28
    cd22:	05 5e       	subi	r16, 0xE5	; 229
    cd24:	1c 4f       	sbci	r17, 0xFC	; 252
    cd26:	bc 01       	movw	r22, r24
    cd28:	cd 01       	movw	r24, r26
    cd2a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    cd2e:	dc 01       	movw	r26, r24
    cd30:	cb 01       	movw	r24, r22
    cd32:	f8 01       	movw	r30, r16
    cd34:	91 83       	std	Z+1, r25	; 0x01
    cd36:	80 83       	st	Z, r24
    cd38:	27 c0       	rjmp	.+78     	; 0xcd88 <pick_drop+0x5e76>
    cd3a:	ce 01       	movw	r24, r28
    cd3c:	83 5e       	subi	r24, 0xE3	; 227
    cd3e:	9c 4f       	sbci	r25, 0xFC	; 252
    cd40:	20 e7       	ldi	r18, 0x70	; 112
    cd42:	31 e0       	ldi	r19, 0x01	; 1
    cd44:	fc 01       	movw	r30, r24
    cd46:	31 83       	std	Z+1, r19	; 0x01
    cd48:	20 83       	st	Z, r18
    cd4a:	ce 01       	movw	r24, r28
    cd4c:	83 5e       	subi	r24, 0xE3	; 227
    cd4e:	9c 4f       	sbci	r25, 0xFC	; 252
    cd50:	fc 01       	movw	r30, r24
    cd52:	80 81       	ld	r24, Z
    cd54:	91 81       	ldd	r25, Z+1	; 0x01
    cd56:	8c 01       	movw	r16, r24
    cd58:	c8 01       	movw	r24, r16
    cd5a:	01 97       	sbiw	r24, 0x01	; 1
    cd5c:	f1 f7       	brne	.-4      	; 0xcd5a <pick_drop+0x5e48>
    cd5e:	8c 01       	movw	r16, r24
    cd60:	ce 01       	movw	r24, r28
    cd62:	83 5e       	subi	r24, 0xE3	; 227
    cd64:	9c 4f       	sbci	r25, 0xFC	; 252
    cd66:	fc 01       	movw	r30, r24
    cd68:	11 83       	std	Z+1, r17	; 0x01
    cd6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cd6c:	ce 01       	movw	r24, r28
    cd6e:	85 5e       	subi	r24, 0xE5	; 229
    cd70:	9c 4f       	sbci	r25, 0xFC	; 252
    cd72:	9e 01       	movw	r18, r28
    cd74:	25 5e       	subi	r18, 0xE5	; 229
    cd76:	3c 4f       	sbci	r19, 0xFC	; 252
    cd78:	f9 01       	movw	r30, r18
    cd7a:	20 81       	ld	r18, Z
    cd7c:	31 81       	ldd	r19, Z+1	; 0x01
    cd7e:	21 50       	subi	r18, 0x01	; 1
    cd80:	30 40       	sbci	r19, 0x00	; 0
    cd82:	fc 01       	movw	r30, r24
    cd84:	31 83       	std	Z+1, r19	; 0x01
    cd86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cd88:	ce 01       	movw	r24, r28
    cd8a:	85 5e       	subi	r24, 0xE5	; 229
    cd8c:	9c 4f       	sbci	r25, 0xFC	; 252
    cd8e:	fc 01       	movw	r30, r24
    cd90:	80 81       	ld	r24, Z
    cd92:	91 81       	ldd	r25, Z+1	; 0x01
    cd94:	00 97       	sbiw	r24, 0x00	; 0
    cd96:	89 f6       	brne	.-94     	; 0xcd3a <pick_drop+0x5e28>
    cd98:	2f c0       	rjmp	.+94     	; 0xcdf8 <pick_drop+0x5ee6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cd9a:	8e 01       	movw	r16, r28
    cd9c:	05 5e       	subi	r16, 0xE5	; 229
    cd9e:	1c 4f       	sbci	r17, 0xFC	; 252
    cda0:	ce 01       	movw	r24, r28
    cda2:	89 5e       	subi	r24, 0xE9	; 233
    cda4:	9c 4f       	sbci	r25, 0xFC	; 252
    cda6:	fc 01       	movw	r30, r24
    cda8:	60 81       	ld	r22, Z
    cdaa:	71 81       	ldd	r23, Z+1	; 0x01
    cdac:	82 81       	ldd	r24, Z+2	; 0x02
    cdae:	93 81       	ldd	r25, Z+3	; 0x03
    cdb0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    cdb4:	dc 01       	movw	r26, r24
    cdb6:	cb 01       	movw	r24, r22
    cdb8:	f8 01       	movw	r30, r16
    cdba:	91 83       	std	Z+1, r25	; 0x01
    cdbc:	80 83       	st	Z, r24
    cdbe:	ce 01       	movw	r24, r28
    cdc0:	81 5e       	subi	r24, 0xE1	; 225
    cdc2:	9c 4f       	sbci	r25, 0xFC	; 252
    cdc4:	9e 01       	movw	r18, r28
    cdc6:	25 5e       	subi	r18, 0xE5	; 229
    cdc8:	3c 4f       	sbci	r19, 0xFC	; 252
    cdca:	f9 01       	movw	r30, r18
    cdcc:	20 81       	ld	r18, Z
    cdce:	31 81       	ldd	r19, Z+1	; 0x01
    cdd0:	fc 01       	movw	r30, r24
    cdd2:	31 83       	std	Z+1, r19	; 0x01
    cdd4:	20 83       	st	Z, r18
    cdd6:	ce 01       	movw	r24, r28
    cdd8:	81 5e       	subi	r24, 0xE1	; 225
    cdda:	9c 4f       	sbci	r25, 0xFC	; 252
    cddc:	fc 01       	movw	r30, r24
    cdde:	80 81       	ld	r24, Z
    cde0:	91 81       	ldd	r25, Z+1	; 0x01
    cde2:	8c 01       	movw	r16, r24
    cde4:	c8 01       	movw	r24, r16
    cde6:	01 97       	sbiw	r24, 0x01	; 1
    cde8:	f1 f7       	brne	.-4      	; 0xcde6 <pick_drop+0x5ed4>
    cdea:	8c 01       	movw	r16, r24
    cdec:	ce 01       	movw	r24, r28
    cdee:	81 5e       	subi	r24, 0xE1	; 225
    cdf0:	9c 4f       	sbci	r25, 0xFC	; 252
    cdf2:	fc 01       	movw	r30, r24
    cdf4:	11 83       	std	Z+1, r17	; 0x01
    cdf6:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_right();
    cdf8:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
					front();
    cdfc:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    ce00:	9e 01       	movw	r18, r28
    ce02:	2f 5d       	subi	r18, 0xDF	; 223
    ce04:	3c 4f       	sbci	r19, 0xFC	; 252
    ce06:	80 e0       	ldi	r24, 0x00	; 0
    ce08:	90 e0       	ldi	r25, 0x00	; 0
    ce0a:	a8 ec       	ldi	r26, 0xC8	; 200
    ce0c:	b2 e4       	ldi	r27, 0x42	; 66
    ce0e:	f9 01       	movw	r30, r18
    ce10:	80 83       	st	Z, r24
    ce12:	91 83       	std	Z+1, r25	; 0x01
    ce14:	a2 83       	std	Z+2, r26	; 0x02
    ce16:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ce18:	8e 01       	movw	r16, r28
    ce1a:	0b 5d       	subi	r16, 0xDB	; 219
    ce1c:	1c 4f       	sbci	r17, 0xFC	; 252
    ce1e:	ce 01       	movw	r24, r28
    ce20:	8f 5d       	subi	r24, 0xDF	; 223
    ce22:	9c 4f       	sbci	r25, 0xFC	; 252
    ce24:	fc 01       	movw	r30, r24
    ce26:	60 81       	ld	r22, Z
    ce28:	71 81       	ldd	r23, Z+1	; 0x01
    ce2a:	82 81       	ldd	r24, Z+2	; 0x02
    ce2c:	93 81       	ldd	r25, Z+3	; 0x03
    ce2e:	26 e6       	ldi	r18, 0x66	; 102
    ce30:	36 e6       	ldi	r19, 0x66	; 102
    ce32:	46 e6       	ldi	r20, 0x66	; 102
    ce34:	55 e4       	ldi	r21, 0x45	; 69
    ce36:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ce3a:	dc 01       	movw	r26, r24
    ce3c:	cb 01       	movw	r24, r22
    ce3e:	f8 01       	movw	r30, r16
    ce40:	80 83       	st	Z, r24
    ce42:	91 83       	std	Z+1, r25	; 0x01
    ce44:	a2 83       	std	Z+2, r26	; 0x02
    ce46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ce48:	ce 01       	movw	r24, r28
    ce4a:	8b 5d       	subi	r24, 0xDB	; 219
    ce4c:	9c 4f       	sbci	r25, 0xFC	; 252
    ce4e:	11 e0       	ldi	r17, 0x01	; 1
    ce50:	fc 01       	movw	r30, r24
    ce52:	60 81       	ld	r22, Z
    ce54:	71 81       	ldd	r23, Z+1	; 0x01
    ce56:	82 81       	ldd	r24, Z+2	; 0x02
    ce58:	93 81       	ldd	r25, Z+3	; 0x03
    ce5a:	20 e0       	ldi	r18, 0x00	; 0
    ce5c:	30 e0       	ldi	r19, 0x00	; 0
    ce5e:	40 e8       	ldi	r20, 0x80	; 128
    ce60:	5f e3       	ldi	r21, 0x3F	; 63
    ce62:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ce66:	88 23       	and	r24, r24
    ce68:	0c f0       	brlt	.+2      	; 0xce6c <pick_drop+0x5f5a>
    ce6a:	10 e0       	ldi	r17, 0x00	; 0
    ce6c:	11 23       	and	r17, r17
    ce6e:	49 f0       	breq	.+18     	; 0xce82 <pick_drop+0x5f70>
		__ticks = 1;
    ce70:	ce 01       	movw	r24, r28
    ce72:	87 5d       	subi	r24, 0xD7	; 215
    ce74:	9c 4f       	sbci	r25, 0xFC	; 252
    ce76:	21 e0       	ldi	r18, 0x01	; 1
    ce78:	30 e0       	ldi	r19, 0x00	; 0
    ce7a:	fc 01       	movw	r30, r24
    ce7c:	31 83       	std	Z+1, r19	; 0x01
    ce7e:	20 83       	st	Z, r18
    ce80:	74 c0       	rjmp	.+232    	; 0xcf6a <pick_drop+0x6058>
	else if (__tmp > 65535)
    ce82:	ce 01       	movw	r24, r28
    ce84:	8b 5d       	subi	r24, 0xDB	; 219
    ce86:	9c 4f       	sbci	r25, 0xFC	; 252
    ce88:	11 e0       	ldi	r17, 0x01	; 1
    ce8a:	fc 01       	movw	r30, r24
    ce8c:	60 81       	ld	r22, Z
    ce8e:	71 81       	ldd	r23, Z+1	; 0x01
    ce90:	82 81       	ldd	r24, Z+2	; 0x02
    ce92:	93 81       	ldd	r25, Z+3	; 0x03
    ce94:	20 e0       	ldi	r18, 0x00	; 0
    ce96:	3f ef       	ldi	r19, 0xFF	; 255
    ce98:	4f e7       	ldi	r20, 0x7F	; 127
    ce9a:	57 e4       	ldi	r21, 0x47	; 71
    ce9c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    cea0:	18 16       	cp	r1, r24
    cea2:	0c f0       	brlt	.+2      	; 0xcea6 <pick_drop+0x5f94>
    cea4:	10 e0       	ldi	r17, 0x00	; 0
    cea6:	11 23       	and	r17, r17
    cea8:	09 f4       	brne	.+2      	; 0xceac <pick_drop+0x5f9a>
    ceaa:	4d c0       	rjmp	.+154    	; 0xcf46 <pick_drop+0x6034>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ceac:	ce 01       	movw	r24, r28
    ceae:	8f 5d       	subi	r24, 0xDF	; 223
    ceb0:	9c 4f       	sbci	r25, 0xFC	; 252
    ceb2:	fc 01       	movw	r30, r24
    ceb4:	60 81       	ld	r22, Z
    ceb6:	71 81       	ldd	r23, Z+1	; 0x01
    ceb8:	82 81       	ldd	r24, Z+2	; 0x02
    ceba:	93 81       	ldd	r25, Z+3	; 0x03
    cebc:	20 e0       	ldi	r18, 0x00	; 0
    cebe:	30 e0       	ldi	r19, 0x00	; 0
    cec0:	40 e2       	ldi	r20, 0x20	; 32
    cec2:	51 e4       	ldi	r21, 0x41	; 65
    cec4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    cec8:	dc 01       	movw	r26, r24
    ceca:	cb 01       	movw	r24, r22
    cecc:	8e 01       	movw	r16, r28
    cece:	07 5d       	subi	r16, 0xD7	; 215
    ced0:	1c 4f       	sbci	r17, 0xFC	; 252
    ced2:	bc 01       	movw	r22, r24
    ced4:	cd 01       	movw	r24, r26
    ced6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ceda:	dc 01       	movw	r26, r24
    cedc:	cb 01       	movw	r24, r22
    cede:	f8 01       	movw	r30, r16
    cee0:	91 83       	std	Z+1, r25	; 0x01
    cee2:	80 83       	st	Z, r24
    cee4:	27 c0       	rjmp	.+78     	; 0xcf34 <pick_drop+0x6022>
    cee6:	ce 01       	movw	r24, r28
    cee8:	85 5d       	subi	r24, 0xD5	; 213
    ceea:	9c 4f       	sbci	r25, 0xFC	; 252
    ceec:	20 e7       	ldi	r18, 0x70	; 112
    ceee:	31 e0       	ldi	r19, 0x01	; 1
    cef0:	fc 01       	movw	r30, r24
    cef2:	31 83       	std	Z+1, r19	; 0x01
    cef4:	20 83       	st	Z, r18
    cef6:	ce 01       	movw	r24, r28
    cef8:	85 5d       	subi	r24, 0xD5	; 213
    cefa:	9c 4f       	sbci	r25, 0xFC	; 252
    cefc:	fc 01       	movw	r30, r24
    cefe:	80 81       	ld	r24, Z
    cf00:	91 81       	ldd	r25, Z+1	; 0x01
    cf02:	8c 01       	movw	r16, r24
    cf04:	c8 01       	movw	r24, r16
    cf06:	01 97       	sbiw	r24, 0x01	; 1
    cf08:	f1 f7       	brne	.-4      	; 0xcf06 <pick_drop+0x5ff4>
    cf0a:	8c 01       	movw	r16, r24
    cf0c:	ce 01       	movw	r24, r28
    cf0e:	85 5d       	subi	r24, 0xD5	; 213
    cf10:	9c 4f       	sbci	r25, 0xFC	; 252
    cf12:	fc 01       	movw	r30, r24
    cf14:	11 83       	std	Z+1, r17	; 0x01
    cf16:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    cf18:	ce 01       	movw	r24, r28
    cf1a:	87 5d       	subi	r24, 0xD7	; 215
    cf1c:	9c 4f       	sbci	r25, 0xFC	; 252
    cf1e:	9e 01       	movw	r18, r28
    cf20:	27 5d       	subi	r18, 0xD7	; 215
    cf22:	3c 4f       	sbci	r19, 0xFC	; 252
    cf24:	f9 01       	movw	r30, r18
    cf26:	20 81       	ld	r18, Z
    cf28:	31 81       	ldd	r19, Z+1	; 0x01
    cf2a:	21 50       	subi	r18, 0x01	; 1
    cf2c:	30 40       	sbci	r19, 0x00	; 0
    cf2e:	fc 01       	movw	r30, r24
    cf30:	31 83       	std	Z+1, r19	; 0x01
    cf32:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cf34:	ce 01       	movw	r24, r28
    cf36:	87 5d       	subi	r24, 0xD7	; 215
    cf38:	9c 4f       	sbci	r25, 0xFC	; 252
    cf3a:	fc 01       	movw	r30, r24
    cf3c:	80 81       	ld	r24, Z
    cf3e:	91 81       	ldd	r25, Z+1	; 0x01
    cf40:	00 97       	sbiw	r24, 0x00	; 0
    cf42:	89 f6       	brne	.-94     	; 0xcee6 <pick_drop+0x5fd4>
    cf44:	2f c0       	rjmp	.+94     	; 0xcfa4 <pick_drop+0x6092>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cf46:	8e 01       	movw	r16, r28
    cf48:	07 5d       	subi	r16, 0xD7	; 215
    cf4a:	1c 4f       	sbci	r17, 0xFC	; 252
    cf4c:	ce 01       	movw	r24, r28
    cf4e:	8b 5d       	subi	r24, 0xDB	; 219
    cf50:	9c 4f       	sbci	r25, 0xFC	; 252
    cf52:	fc 01       	movw	r30, r24
    cf54:	60 81       	ld	r22, Z
    cf56:	71 81       	ldd	r23, Z+1	; 0x01
    cf58:	82 81       	ldd	r24, Z+2	; 0x02
    cf5a:	93 81       	ldd	r25, Z+3	; 0x03
    cf5c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    cf60:	dc 01       	movw	r26, r24
    cf62:	cb 01       	movw	r24, r22
    cf64:	f8 01       	movw	r30, r16
    cf66:	91 83       	std	Z+1, r25	; 0x01
    cf68:	80 83       	st	Z, r24
    cf6a:	ce 01       	movw	r24, r28
    cf6c:	83 5d       	subi	r24, 0xD3	; 211
    cf6e:	9c 4f       	sbci	r25, 0xFC	; 252
    cf70:	9e 01       	movw	r18, r28
    cf72:	27 5d       	subi	r18, 0xD7	; 215
    cf74:	3c 4f       	sbci	r19, 0xFC	; 252
    cf76:	f9 01       	movw	r30, r18
    cf78:	20 81       	ld	r18, Z
    cf7a:	31 81       	ldd	r19, Z+1	; 0x01
    cf7c:	fc 01       	movw	r30, r24
    cf7e:	31 83       	std	Z+1, r19	; 0x01
    cf80:	20 83       	st	Z, r18
    cf82:	ce 01       	movw	r24, r28
    cf84:	83 5d       	subi	r24, 0xD3	; 211
    cf86:	9c 4f       	sbci	r25, 0xFC	; 252
    cf88:	fc 01       	movw	r30, r24
    cf8a:	80 81       	ld	r24, Z
    cf8c:	91 81       	ldd	r25, Z+1	; 0x01
    cf8e:	8c 01       	movw	r16, r24
    cf90:	c8 01       	movw	r24, r16
    cf92:	01 97       	sbiw	r24, 0x01	; 1
    cf94:	f1 f7       	brne	.-4      	; 0xcf92 <pick_drop+0x6080>
    cf96:	8c 01       	movw	r16, r24
    cf98:	ce 01       	movw	r24, r28
    cf9a:	83 5d       	subi	r24, 0xD3	; 211
    cf9c:	9c 4f       	sbci	r25, 0xFC	; 252
    cf9e:	fc 01       	movw	r30, r24
    cfa0:	11 83       	std	Z+1, r17	; 0x01
    cfa2:	00 83       	st	Z, r16
					_delay_ms(100);
					left_degrees(50);
    cfa4:	82 e3       	ldi	r24, 0x32	; 50
    cfa6:	90 e0       	ldi	r25, 0x00	; 0
    cfa8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
    cfac:	9e 01       	movw	r18, r28
    cfae:	21 5d       	subi	r18, 0xD1	; 209
    cfb0:	3c 4f       	sbci	r19, 0xFC	; 252
    cfb2:	80 e0       	ldi	r24, 0x00	; 0
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	a0 ea       	ldi	r26, 0xA0	; 160
    cfb8:	b1 e4       	ldi	r27, 0x41	; 65
    cfba:	f9 01       	movw	r30, r18
    cfbc:	80 83       	st	Z, r24
    cfbe:	91 83       	std	Z+1, r25	; 0x01
    cfc0:	a2 83       	std	Z+2, r26	; 0x02
    cfc2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cfc4:	8e 01       	movw	r16, r28
    cfc6:	0d 5c       	subi	r16, 0xCD	; 205
    cfc8:	1c 4f       	sbci	r17, 0xFC	; 252
    cfca:	ce 01       	movw	r24, r28
    cfcc:	81 5d       	subi	r24, 0xD1	; 209
    cfce:	9c 4f       	sbci	r25, 0xFC	; 252
    cfd0:	fc 01       	movw	r30, r24
    cfd2:	60 81       	ld	r22, Z
    cfd4:	71 81       	ldd	r23, Z+1	; 0x01
    cfd6:	82 81       	ldd	r24, Z+2	; 0x02
    cfd8:	93 81       	ldd	r25, Z+3	; 0x03
    cfda:	26 e6       	ldi	r18, 0x66	; 102
    cfdc:	36 e6       	ldi	r19, 0x66	; 102
    cfde:	46 e6       	ldi	r20, 0x66	; 102
    cfe0:	55 e4       	ldi	r21, 0x45	; 69
    cfe2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    cfe6:	dc 01       	movw	r26, r24
    cfe8:	cb 01       	movw	r24, r22
    cfea:	f8 01       	movw	r30, r16
    cfec:	80 83       	st	Z, r24
    cfee:	91 83       	std	Z+1, r25	; 0x01
    cff0:	a2 83       	std	Z+2, r26	; 0x02
    cff2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cff4:	ce 01       	movw	r24, r28
    cff6:	8d 5c       	subi	r24, 0xCD	; 205
    cff8:	9c 4f       	sbci	r25, 0xFC	; 252
    cffa:	11 e0       	ldi	r17, 0x01	; 1
    cffc:	fc 01       	movw	r30, r24
    cffe:	60 81       	ld	r22, Z
    d000:	71 81       	ldd	r23, Z+1	; 0x01
    d002:	82 81       	ldd	r24, Z+2	; 0x02
    d004:	93 81       	ldd	r25, Z+3	; 0x03
    d006:	20 e0       	ldi	r18, 0x00	; 0
    d008:	30 e0       	ldi	r19, 0x00	; 0
    d00a:	40 e8       	ldi	r20, 0x80	; 128
    d00c:	5f e3       	ldi	r21, 0x3F	; 63
    d00e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    d012:	88 23       	and	r24, r24
    d014:	0c f0       	brlt	.+2      	; 0xd018 <pick_drop+0x6106>
    d016:	10 e0       	ldi	r17, 0x00	; 0
    d018:	11 23       	and	r17, r17
    d01a:	49 f0       	breq	.+18     	; 0xd02e <pick_drop+0x611c>
		__ticks = 1;
    d01c:	ce 01       	movw	r24, r28
    d01e:	89 5c       	subi	r24, 0xC9	; 201
    d020:	9c 4f       	sbci	r25, 0xFC	; 252
    d022:	21 e0       	ldi	r18, 0x01	; 1
    d024:	30 e0       	ldi	r19, 0x00	; 0
    d026:	fc 01       	movw	r30, r24
    d028:	31 83       	std	Z+1, r19	; 0x01
    d02a:	20 83       	st	Z, r18
    d02c:	74 c0       	rjmp	.+232    	; 0xd116 <pick_drop+0x6204>
	else if (__tmp > 65535)
    d02e:	ce 01       	movw	r24, r28
    d030:	8d 5c       	subi	r24, 0xCD	; 205
    d032:	9c 4f       	sbci	r25, 0xFC	; 252
    d034:	11 e0       	ldi	r17, 0x01	; 1
    d036:	fc 01       	movw	r30, r24
    d038:	60 81       	ld	r22, Z
    d03a:	71 81       	ldd	r23, Z+1	; 0x01
    d03c:	82 81       	ldd	r24, Z+2	; 0x02
    d03e:	93 81       	ldd	r25, Z+3	; 0x03
    d040:	20 e0       	ldi	r18, 0x00	; 0
    d042:	3f ef       	ldi	r19, 0xFF	; 255
    d044:	4f e7       	ldi	r20, 0x7F	; 127
    d046:	57 e4       	ldi	r21, 0x47	; 71
    d048:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    d04c:	18 16       	cp	r1, r24
    d04e:	0c f0       	brlt	.+2      	; 0xd052 <pick_drop+0x6140>
    d050:	10 e0       	ldi	r17, 0x00	; 0
    d052:	11 23       	and	r17, r17
    d054:	09 f4       	brne	.+2      	; 0xd058 <pick_drop+0x6146>
    d056:	4d c0       	rjmp	.+154    	; 0xd0f2 <pick_drop+0x61e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d058:	ce 01       	movw	r24, r28
    d05a:	81 5d       	subi	r24, 0xD1	; 209
    d05c:	9c 4f       	sbci	r25, 0xFC	; 252
    d05e:	fc 01       	movw	r30, r24
    d060:	60 81       	ld	r22, Z
    d062:	71 81       	ldd	r23, Z+1	; 0x01
    d064:	82 81       	ldd	r24, Z+2	; 0x02
    d066:	93 81       	ldd	r25, Z+3	; 0x03
    d068:	20 e0       	ldi	r18, 0x00	; 0
    d06a:	30 e0       	ldi	r19, 0x00	; 0
    d06c:	40 e2       	ldi	r20, 0x20	; 32
    d06e:	51 e4       	ldi	r21, 0x41	; 65
    d070:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d074:	dc 01       	movw	r26, r24
    d076:	cb 01       	movw	r24, r22
    d078:	8e 01       	movw	r16, r28
    d07a:	09 5c       	subi	r16, 0xC9	; 201
    d07c:	1c 4f       	sbci	r17, 0xFC	; 252
    d07e:	bc 01       	movw	r22, r24
    d080:	cd 01       	movw	r24, r26
    d082:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d086:	dc 01       	movw	r26, r24
    d088:	cb 01       	movw	r24, r22
    d08a:	f8 01       	movw	r30, r16
    d08c:	91 83       	std	Z+1, r25	; 0x01
    d08e:	80 83       	st	Z, r24
    d090:	27 c0       	rjmp	.+78     	; 0xd0e0 <pick_drop+0x61ce>
    d092:	ce 01       	movw	r24, r28
    d094:	87 5c       	subi	r24, 0xC7	; 199
    d096:	9c 4f       	sbci	r25, 0xFC	; 252
    d098:	20 e7       	ldi	r18, 0x70	; 112
    d09a:	31 e0       	ldi	r19, 0x01	; 1
    d09c:	fc 01       	movw	r30, r24
    d09e:	31 83       	std	Z+1, r19	; 0x01
    d0a0:	20 83       	st	Z, r18
    d0a2:	ce 01       	movw	r24, r28
    d0a4:	87 5c       	subi	r24, 0xC7	; 199
    d0a6:	9c 4f       	sbci	r25, 0xFC	; 252
    d0a8:	fc 01       	movw	r30, r24
    d0aa:	80 81       	ld	r24, Z
    d0ac:	91 81       	ldd	r25, Z+1	; 0x01
    d0ae:	8c 01       	movw	r16, r24
    d0b0:	c8 01       	movw	r24, r16
    d0b2:	01 97       	sbiw	r24, 0x01	; 1
    d0b4:	f1 f7       	brne	.-4      	; 0xd0b2 <pick_drop+0x61a0>
    d0b6:	8c 01       	movw	r16, r24
    d0b8:	ce 01       	movw	r24, r28
    d0ba:	87 5c       	subi	r24, 0xC7	; 199
    d0bc:	9c 4f       	sbci	r25, 0xFC	; 252
    d0be:	fc 01       	movw	r30, r24
    d0c0:	11 83       	std	Z+1, r17	; 0x01
    d0c2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d0c4:	ce 01       	movw	r24, r28
    d0c6:	89 5c       	subi	r24, 0xC9	; 201
    d0c8:	9c 4f       	sbci	r25, 0xFC	; 252
    d0ca:	9e 01       	movw	r18, r28
    d0cc:	29 5c       	subi	r18, 0xC9	; 201
    d0ce:	3c 4f       	sbci	r19, 0xFC	; 252
    d0d0:	f9 01       	movw	r30, r18
    d0d2:	20 81       	ld	r18, Z
    d0d4:	31 81       	ldd	r19, Z+1	; 0x01
    d0d6:	21 50       	subi	r18, 0x01	; 1
    d0d8:	30 40       	sbci	r19, 0x00	; 0
    d0da:	fc 01       	movw	r30, r24
    d0dc:	31 83       	std	Z+1, r19	; 0x01
    d0de:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d0e0:	ce 01       	movw	r24, r28
    d0e2:	89 5c       	subi	r24, 0xC9	; 201
    d0e4:	9c 4f       	sbci	r25, 0xFC	; 252
    d0e6:	fc 01       	movw	r30, r24
    d0e8:	80 81       	ld	r24, Z
    d0ea:	91 81       	ldd	r25, Z+1	; 0x01
    d0ec:	00 97       	sbiw	r24, 0x00	; 0
    d0ee:	89 f6       	brne	.-94     	; 0xd092 <pick_drop+0x6180>
    d0f0:	2f c0       	rjmp	.+94     	; 0xd150 <pick_drop+0x623e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d0f2:	8e 01       	movw	r16, r28
    d0f4:	09 5c       	subi	r16, 0xC9	; 201
    d0f6:	1c 4f       	sbci	r17, 0xFC	; 252
    d0f8:	ce 01       	movw	r24, r28
    d0fa:	8d 5c       	subi	r24, 0xCD	; 205
    d0fc:	9c 4f       	sbci	r25, 0xFC	; 252
    d0fe:	fc 01       	movw	r30, r24
    d100:	60 81       	ld	r22, Z
    d102:	71 81       	ldd	r23, Z+1	; 0x01
    d104:	82 81       	ldd	r24, Z+2	; 0x02
    d106:	93 81       	ldd	r25, Z+3	; 0x03
    d108:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d10c:	dc 01       	movw	r26, r24
    d10e:	cb 01       	movw	r24, r22
    d110:	f8 01       	movw	r30, r16
    d112:	91 83       	std	Z+1, r25	; 0x01
    d114:	80 83       	st	Z, r24
    d116:	ce 01       	movw	r24, r28
    d118:	85 5c       	subi	r24, 0xC5	; 197
    d11a:	9c 4f       	sbci	r25, 0xFC	; 252
    d11c:	9e 01       	movw	r18, r28
    d11e:	29 5c       	subi	r18, 0xC9	; 201
    d120:	3c 4f       	sbci	r19, 0xFC	; 252
    d122:	f9 01       	movw	r30, r18
    d124:	20 81       	ld	r18, Z
    d126:	31 81       	ldd	r19, Z+1	; 0x01
    d128:	fc 01       	movw	r30, r24
    d12a:	31 83       	std	Z+1, r19	; 0x01
    d12c:	20 83       	st	Z, r18
    d12e:	ce 01       	movw	r24, r28
    d130:	85 5c       	subi	r24, 0xC5	; 197
    d132:	9c 4f       	sbci	r25, 0xFC	; 252
    d134:	fc 01       	movw	r30, r24
    d136:	80 81       	ld	r24, Z
    d138:	91 81       	ldd	r25, Z+1	; 0x01
    d13a:	8c 01       	movw	r16, r24
    d13c:	c8 01       	movw	r24, r16
    d13e:	01 97       	sbiw	r24, 0x01	; 1
    d140:	f1 f7       	brne	.-4      	; 0xd13e <pick_drop+0x622c>
    d142:	8c 01       	movw	r16, r24
    d144:	ce 01       	movw	r24, r28
    d146:	85 5c       	subi	r24, 0xC5	; 197
    d148:	9c 4f       	sbci	r25, 0xFC	; 252
    d14a:	fc 01       	movw	r30, r24
    d14c:	11 83       	std	Z+1, r17	; 0x01
    d14e:	00 83       	st	Z, r16
					_delay_ms(20);
					back_mm(55);
    d150:	87 e3       	ldi	r24, 0x37	; 55
    d152:	90 e0       	ldi	r25, 0x00	; 0
    d154:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    d158:	9e 01       	movw	r18, r28
    d15a:	23 5c       	subi	r18, 0xC3	; 195
    d15c:	3c 4f       	sbci	r19, 0xFC	; 252
    d15e:	80 e0       	ldi	r24, 0x00	; 0
    d160:	90 e0       	ldi	r25, 0x00	; 0
    d162:	a0 ea       	ldi	r26, 0xA0	; 160
    d164:	b1 e4       	ldi	r27, 0x41	; 65
    d166:	f9 01       	movw	r30, r18
    d168:	80 83       	st	Z, r24
    d16a:	91 83       	std	Z+1, r25	; 0x01
    d16c:	a2 83       	std	Z+2, r26	; 0x02
    d16e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d170:	8e 01       	movw	r16, r28
    d172:	0f 5b       	subi	r16, 0xBF	; 191
    d174:	1c 4f       	sbci	r17, 0xFC	; 252
    d176:	ce 01       	movw	r24, r28
    d178:	83 5c       	subi	r24, 0xC3	; 195
    d17a:	9c 4f       	sbci	r25, 0xFC	; 252
    d17c:	fc 01       	movw	r30, r24
    d17e:	60 81       	ld	r22, Z
    d180:	71 81       	ldd	r23, Z+1	; 0x01
    d182:	82 81       	ldd	r24, Z+2	; 0x02
    d184:	93 81       	ldd	r25, Z+3	; 0x03
    d186:	26 e6       	ldi	r18, 0x66	; 102
    d188:	36 e6       	ldi	r19, 0x66	; 102
    d18a:	46 e6       	ldi	r20, 0x66	; 102
    d18c:	55 e4       	ldi	r21, 0x45	; 69
    d18e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d192:	dc 01       	movw	r26, r24
    d194:	cb 01       	movw	r24, r22
    d196:	f8 01       	movw	r30, r16
    d198:	80 83       	st	Z, r24
    d19a:	91 83       	std	Z+1, r25	; 0x01
    d19c:	a2 83       	std	Z+2, r26	; 0x02
    d19e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d1a0:	ce 01       	movw	r24, r28
    d1a2:	8f 5b       	subi	r24, 0xBF	; 191
    d1a4:	9c 4f       	sbci	r25, 0xFC	; 252
    d1a6:	11 e0       	ldi	r17, 0x01	; 1
    d1a8:	fc 01       	movw	r30, r24
    d1aa:	60 81       	ld	r22, Z
    d1ac:	71 81       	ldd	r23, Z+1	; 0x01
    d1ae:	82 81       	ldd	r24, Z+2	; 0x02
    d1b0:	93 81       	ldd	r25, Z+3	; 0x03
    d1b2:	20 e0       	ldi	r18, 0x00	; 0
    d1b4:	30 e0       	ldi	r19, 0x00	; 0
    d1b6:	40 e8       	ldi	r20, 0x80	; 128
    d1b8:	5f e3       	ldi	r21, 0x3F	; 63
    d1ba:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    d1be:	88 23       	and	r24, r24
    d1c0:	0c f0       	brlt	.+2      	; 0xd1c4 <pick_drop+0x62b2>
    d1c2:	10 e0       	ldi	r17, 0x00	; 0
    d1c4:	11 23       	and	r17, r17
    d1c6:	49 f0       	breq	.+18     	; 0xd1da <pick_drop+0x62c8>
		__ticks = 1;
    d1c8:	ce 01       	movw	r24, r28
    d1ca:	8b 5b       	subi	r24, 0xBB	; 187
    d1cc:	9c 4f       	sbci	r25, 0xFC	; 252
    d1ce:	21 e0       	ldi	r18, 0x01	; 1
    d1d0:	30 e0       	ldi	r19, 0x00	; 0
    d1d2:	fc 01       	movw	r30, r24
    d1d4:	31 83       	std	Z+1, r19	; 0x01
    d1d6:	20 83       	st	Z, r18
    d1d8:	74 c0       	rjmp	.+232    	; 0xd2c2 <pick_drop+0x63b0>
	else if (__tmp > 65535)
    d1da:	ce 01       	movw	r24, r28
    d1dc:	8f 5b       	subi	r24, 0xBF	; 191
    d1de:	9c 4f       	sbci	r25, 0xFC	; 252
    d1e0:	11 e0       	ldi	r17, 0x01	; 1
    d1e2:	fc 01       	movw	r30, r24
    d1e4:	60 81       	ld	r22, Z
    d1e6:	71 81       	ldd	r23, Z+1	; 0x01
    d1e8:	82 81       	ldd	r24, Z+2	; 0x02
    d1ea:	93 81       	ldd	r25, Z+3	; 0x03
    d1ec:	20 e0       	ldi	r18, 0x00	; 0
    d1ee:	3f ef       	ldi	r19, 0xFF	; 255
    d1f0:	4f e7       	ldi	r20, 0x7F	; 127
    d1f2:	57 e4       	ldi	r21, 0x47	; 71
    d1f4:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    d1f8:	18 16       	cp	r1, r24
    d1fa:	0c f0       	brlt	.+2      	; 0xd1fe <pick_drop+0x62ec>
    d1fc:	10 e0       	ldi	r17, 0x00	; 0
    d1fe:	11 23       	and	r17, r17
    d200:	09 f4       	brne	.+2      	; 0xd204 <pick_drop+0x62f2>
    d202:	4d c0       	rjmp	.+154    	; 0xd29e <pick_drop+0x638c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d204:	ce 01       	movw	r24, r28
    d206:	83 5c       	subi	r24, 0xC3	; 195
    d208:	9c 4f       	sbci	r25, 0xFC	; 252
    d20a:	fc 01       	movw	r30, r24
    d20c:	60 81       	ld	r22, Z
    d20e:	71 81       	ldd	r23, Z+1	; 0x01
    d210:	82 81       	ldd	r24, Z+2	; 0x02
    d212:	93 81       	ldd	r25, Z+3	; 0x03
    d214:	20 e0       	ldi	r18, 0x00	; 0
    d216:	30 e0       	ldi	r19, 0x00	; 0
    d218:	40 e2       	ldi	r20, 0x20	; 32
    d21a:	51 e4       	ldi	r21, 0x41	; 65
    d21c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d220:	dc 01       	movw	r26, r24
    d222:	cb 01       	movw	r24, r22
    d224:	8e 01       	movw	r16, r28
    d226:	0b 5b       	subi	r16, 0xBB	; 187
    d228:	1c 4f       	sbci	r17, 0xFC	; 252
    d22a:	bc 01       	movw	r22, r24
    d22c:	cd 01       	movw	r24, r26
    d22e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d232:	dc 01       	movw	r26, r24
    d234:	cb 01       	movw	r24, r22
    d236:	f8 01       	movw	r30, r16
    d238:	91 83       	std	Z+1, r25	; 0x01
    d23a:	80 83       	st	Z, r24
    d23c:	27 c0       	rjmp	.+78     	; 0xd28c <pick_drop+0x637a>
    d23e:	ce 01       	movw	r24, r28
    d240:	89 5b       	subi	r24, 0xB9	; 185
    d242:	9c 4f       	sbci	r25, 0xFC	; 252
    d244:	20 e7       	ldi	r18, 0x70	; 112
    d246:	31 e0       	ldi	r19, 0x01	; 1
    d248:	fc 01       	movw	r30, r24
    d24a:	31 83       	std	Z+1, r19	; 0x01
    d24c:	20 83       	st	Z, r18
    d24e:	ce 01       	movw	r24, r28
    d250:	89 5b       	subi	r24, 0xB9	; 185
    d252:	9c 4f       	sbci	r25, 0xFC	; 252
    d254:	fc 01       	movw	r30, r24
    d256:	80 81       	ld	r24, Z
    d258:	91 81       	ldd	r25, Z+1	; 0x01
    d25a:	8c 01       	movw	r16, r24
    d25c:	c8 01       	movw	r24, r16
    d25e:	01 97       	sbiw	r24, 0x01	; 1
    d260:	f1 f7       	brne	.-4      	; 0xd25e <pick_drop+0x634c>
    d262:	8c 01       	movw	r16, r24
    d264:	ce 01       	movw	r24, r28
    d266:	89 5b       	subi	r24, 0xB9	; 185
    d268:	9c 4f       	sbci	r25, 0xFC	; 252
    d26a:	fc 01       	movw	r30, r24
    d26c:	11 83       	std	Z+1, r17	; 0x01
    d26e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d270:	ce 01       	movw	r24, r28
    d272:	8b 5b       	subi	r24, 0xBB	; 187
    d274:	9c 4f       	sbci	r25, 0xFC	; 252
    d276:	9e 01       	movw	r18, r28
    d278:	2b 5b       	subi	r18, 0xBB	; 187
    d27a:	3c 4f       	sbci	r19, 0xFC	; 252
    d27c:	f9 01       	movw	r30, r18
    d27e:	20 81       	ld	r18, Z
    d280:	31 81       	ldd	r19, Z+1	; 0x01
    d282:	21 50       	subi	r18, 0x01	; 1
    d284:	30 40       	sbci	r19, 0x00	; 0
    d286:	fc 01       	movw	r30, r24
    d288:	31 83       	std	Z+1, r19	; 0x01
    d28a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d28c:	ce 01       	movw	r24, r28
    d28e:	8b 5b       	subi	r24, 0xBB	; 187
    d290:	9c 4f       	sbci	r25, 0xFC	; 252
    d292:	fc 01       	movw	r30, r24
    d294:	80 81       	ld	r24, Z
    d296:	91 81       	ldd	r25, Z+1	; 0x01
    d298:	00 97       	sbiw	r24, 0x00	; 0
    d29a:	89 f6       	brne	.-94     	; 0xd23e <pick_drop+0x632c>
    d29c:	e2 c1       	rjmp	.+964    	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d29e:	8e 01       	movw	r16, r28
    d2a0:	0b 5b       	subi	r16, 0xBB	; 187
    d2a2:	1c 4f       	sbci	r17, 0xFC	; 252
    d2a4:	ce 01       	movw	r24, r28
    d2a6:	8f 5b       	subi	r24, 0xBF	; 191
    d2a8:	9c 4f       	sbci	r25, 0xFC	; 252
    d2aa:	fc 01       	movw	r30, r24
    d2ac:	60 81       	ld	r22, Z
    d2ae:	71 81       	ldd	r23, Z+1	; 0x01
    d2b0:	82 81       	ldd	r24, Z+2	; 0x02
    d2b2:	93 81       	ldd	r25, Z+3	; 0x03
    d2b4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d2b8:	dc 01       	movw	r26, r24
    d2ba:	cb 01       	movw	r24, r22
    d2bc:	f8 01       	movw	r30, r16
    d2be:	91 83       	std	Z+1, r25	; 0x01
    d2c0:	80 83       	st	Z, r24
    d2c2:	ce 01       	movw	r24, r28
    d2c4:	87 5b       	subi	r24, 0xB7	; 183
    d2c6:	9c 4f       	sbci	r25, 0xFC	; 252
    d2c8:	9e 01       	movw	r18, r28
    d2ca:	2b 5b       	subi	r18, 0xBB	; 187
    d2cc:	3c 4f       	sbci	r19, 0xFC	; 252
    d2ce:	f9 01       	movw	r30, r18
    d2d0:	20 81       	ld	r18, Z
    d2d2:	31 81       	ldd	r19, Z+1	; 0x01
    d2d4:	fc 01       	movw	r30, r24
    d2d6:	31 83       	std	Z+1, r19	; 0x01
    d2d8:	20 83       	st	Z, r18
    d2da:	ce 01       	movw	r24, r28
    d2dc:	87 5b       	subi	r24, 0xB7	; 183
    d2de:	9c 4f       	sbci	r25, 0xFC	; 252
    d2e0:	fc 01       	movw	r30, r24
    d2e2:	80 81       	ld	r24, Z
    d2e4:	91 81       	ldd	r25, Z+1	; 0x01
    d2e6:	8c 01       	movw	r16, r24
    d2e8:	c8 01       	movw	r24, r16
    d2ea:	01 97       	sbiw	r24, 0x01	; 1
    d2ec:	f1 f7       	brne	.-4      	; 0xd2ea <pick_drop+0x63d8>
    d2ee:	8c 01       	movw	r16, r24
    d2f0:	ce 01       	movw	r24, r28
    d2f2:	87 5b       	subi	r24, 0xB7	; 183
    d2f4:	9c 4f       	sbci	r25, 0xFC	; 252
    d2f6:	fc 01       	movw	r30, r24
    d2f8:	11 83       	std	Z+1, r17	; 0x01
    d2fa:	00 83       	st	Z, r16
    d2fc:	b2 c1       	rjmp	.+868    	; 0xd662 <pick_drop+0x6750>
					_delay_ms(20);
				}
		}
			else if(pd=='8'){
    d2fe:	ce 01       	movw	r24, r28
    d300:	89 59       	subi	r24, 0x99	; 153
    d302:	9c 4f       	sbci	r25, 0xFC	; 252
    d304:	fc 01       	movw	r30, r24
    d306:	80 81       	ld	r24, Z
    d308:	88 33       	cpi	r24, 0x38	; 56
    d30a:	09 f0       	breq	.+2      	; 0xd30e <pick_drop+0x63fc>
    d30c:	aa c1       	rjmp	.+852    	; 0xd662 <pick_drop+0x6750>
				front();
    d30e:	0e 94 82 31 	call	0x6304	; 0x6304 <front>
    d312:	9e 01       	movw	r18, r28
    d314:	25 5b       	subi	r18, 0xB5	; 181
    d316:	3c 4f       	sbci	r19, 0xFC	; 252
    d318:	80 e0       	ldi	r24, 0x00	; 0
    d31a:	90 e0       	ldi	r25, 0x00	; 0
    d31c:	a8 ec       	ldi	r26, 0xC8	; 200
    d31e:	b2 e4       	ldi	r27, 0x42	; 66
    d320:	f9 01       	movw	r30, r18
    d322:	80 83       	st	Z, r24
    d324:	91 83       	std	Z+1, r25	; 0x01
    d326:	a2 83       	std	Z+2, r26	; 0x02
    d328:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d32a:	8e 01       	movw	r16, r28
    d32c:	01 5b       	subi	r16, 0xB1	; 177
    d32e:	1c 4f       	sbci	r17, 0xFC	; 252
    d330:	ce 01       	movw	r24, r28
    d332:	85 5b       	subi	r24, 0xB5	; 181
    d334:	9c 4f       	sbci	r25, 0xFC	; 252
    d336:	fc 01       	movw	r30, r24
    d338:	60 81       	ld	r22, Z
    d33a:	71 81       	ldd	r23, Z+1	; 0x01
    d33c:	82 81       	ldd	r24, Z+2	; 0x02
    d33e:	93 81       	ldd	r25, Z+3	; 0x03
    d340:	26 e6       	ldi	r18, 0x66	; 102
    d342:	36 e6       	ldi	r19, 0x66	; 102
    d344:	46 e6       	ldi	r20, 0x66	; 102
    d346:	55 e4       	ldi	r21, 0x45	; 69
    d348:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d34c:	dc 01       	movw	r26, r24
    d34e:	cb 01       	movw	r24, r22
    d350:	f8 01       	movw	r30, r16
    d352:	80 83       	st	Z, r24
    d354:	91 83       	std	Z+1, r25	; 0x01
    d356:	a2 83       	std	Z+2, r26	; 0x02
    d358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d35a:	ce 01       	movw	r24, r28
    d35c:	81 5b       	subi	r24, 0xB1	; 177
    d35e:	9c 4f       	sbci	r25, 0xFC	; 252
    d360:	11 e0       	ldi	r17, 0x01	; 1
    d362:	fc 01       	movw	r30, r24
    d364:	60 81       	ld	r22, Z
    d366:	71 81       	ldd	r23, Z+1	; 0x01
    d368:	82 81       	ldd	r24, Z+2	; 0x02
    d36a:	93 81       	ldd	r25, Z+3	; 0x03
    d36c:	20 e0       	ldi	r18, 0x00	; 0
    d36e:	30 e0       	ldi	r19, 0x00	; 0
    d370:	40 e8       	ldi	r20, 0x80	; 128
    d372:	5f e3       	ldi	r21, 0x3F	; 63
    d374:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    d378:	88 23       	and	r24, r24
    d37a:	0c f0       	brlt	.+2      	; 0xd37e <pick_drop+0x646c>
    d37c:	10 e0       	ldi	r17, 0x00	; 0
    d37e:	11 23       	and	r17, r17
    d380:	49 f0       	breq	.+18     	; 0xd394 <pick_drop+0x6482>
		__ticks = 1;
    d382:	ce 01       	movw	r24, r28
    d384:	8d 5a       	subi	r24, 0xAD	; 173
    d386:	9c 4f       	sbci	r25, 0xFC	; 252
    d388:	21 e0       	ldi	r18, 0x01	; 1
    d38a:	30 e0       	ldi	r19, 0x00	; 0
    d38c:	fc 01       	movw	r30, r24
    d38e:	31 83       	std	Z+1, r19	; 0x01
    d390:	20 83       	st	Z, r18
    d392:	74 c0       	rjmp	.+232    	; 0xd47c <pick_drop+0x656a>
	else if (__tmp > 65535)
    d394:	ce 01       	movw	r24, r28
    d396:	81 5b       	subi	r24, 0xB1	; 177
    d398:	9c 4f       	sbci	r25, 0xFC	; 252
    d39a:	11 e0       	ldi	r17, 0x01	; 1
    d39c:	fc 01       	movw	r30, r24
    d39e:	60 81       	ld	r22, Z
    d3a0:	71 81       	ldd	r23, Z+1	; 0x01
    d3a2:	82 81       	ldd	r24, Z+2	; 0x02
    d3a4:	93 81       	ldd	r25, Z+3	; 0x03
    d3a6:	20 e0       	ldi	r18, 0x00	; 0
    d3a8:	3f ef       	ldi	r19, 0xFF	; 255
    d3aa:	4f e7       	ldi	r20, 0x7F	; 127
    d3ac:	57 e4       	ldi	r21, 0x47	; 71
    d3ae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    d3b2:	18 16       	cp	r1, r24
    d3b4:	0c f0       	brlt	.+2      	; 0xd3b8 <pick_drop+0x64a6>
    d3b6:	10 e0       	ldi	r17, 0x00	; 0
    d3b8:	11 23       	and	r17, r17
    d3ba:	09 f4       	brne	.+2      	; 0xd3be <pick_drop+0x64ac>
    d3bc:	4d c0       	rjmp	.+154    	; 0xd458 <pick_drop+0x6546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d3be:	ce 01       	movw	r24, r28
    d3c0:	85 5b       	subi	r24, 0xB5	; 181
    d3c2:	9c 4f       	sbci	r25, 0xFC	; 252
    d3c4:	fc 01       	movw	r30, r24
    d3c6:	60 81       	ld	r22, Z
    d3c8:	71 81       	ldd	r23, Z+1	; 0x01
    d3ca:	82 81       	ldd	r24, Z+2	; 0x02
    d3cc:	93 81       	ldd	r25, Z+3	; 0x03
    d3ce:	20 e0       	ldi	r18, 0x00	; 0
    d3d0:	30 e0       	ldi	r19, 0x00	; 0
    d3d2:	40 e2       	ldi	r20, 0x20	; 32
    d3d4:	51 e4       	ldi	r21, 0x41	; 65
    d3d6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d3da:	dc 01       	movw	r26, r24
    d3dc:	cb 01       	movw	r24, r22
    d3de:	8e 01       	movw	r16, r28
    d3e0:	0d 5a       	subi	r16, 0xAD	; 173
    d3e2:	1c 4f       	sbci	r17, 0xFC	; 252
    d3e4:	bc 01       	movw	r22, r24
    d3e6:	cd 01       	movw	r24, r26
    d3e8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d3ec:	dc 01       	movw	r26, r24
    d3ee:	cb 01       	movw	r24, r22
    d3f0:	f8 01       	movw	r30, r16
    d3f2:	91 83       	std	Z+1, r25	; 0x01
    d3f4:	80 83       	st	Z, r24
    d3f6:	27 c0       	rjmp	.+78     	; 0xd446 <pick_drop+0x6534>
    d3f8:	ce 01       	movw	r24, r28
    d3fa:	8b 5a       	subi	r24, 0xAB	; 171
    d3fc:	9c 4f       	sbci	r25, 0xFC	; 252
    d3fe:	20 e7       	ldi	r18, 0x70	; 112
    d400:	31 e0       	ldi	r19, 0x01	; 1
    d402:	fc 01       	movw	r30, r24
    d404:	31 83       	std	Z+1, r19	; 0x01
    d406:	20 83       	st	Z, r18
    d408:	ce 01       	movw	r24, r28
    d40a:	8b 5a       	subi	r24, 0xAB	; 171
    d40c:	9c 4f       	sbci	r25, 0xFC	; 252
    d40e:	fc 01       	movw	r30, r24
    d410:	80 81       	ld	r24, Z
    d412:	91 81       	ldd	r25, Z+1	; 0x01
    d414:	8c 01       	movw	r16, r24
    d416:	c8 01       	movw	r24, r16
    d418:	01 97       	sbiw	r24, 0x01	; 1
    d41a:	f1 f7       	brne	.-4      	; 0xd418 <pick_drop+0x6506>
    d41c:	8c 01       	movw	r16, r24
    d41e:	ce 01       	movw	r24, r28
    d420:	8b 5a       	subi	r24, 0xAB	; 171
    d422:	9c 4f       	sbci	r25, 0xFC	; 252
    d424:	fc 01       	movw	r30, r24
    d426:	11 83       	std	Z+1, r17	; 0x01
    d428:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d42a:	ce 01       	movw	r24, r28
    d42c:	8d 5a       	subi	r24, 0xAD	; 173
    d42e:	9c 4f       	sbci	r25, 0xFC	; 252
    d430:	9e 01       	movw	r18, r28
    d432:	2d 5a       	subi	r18, 0xAD	; 173
    d434:	3c 4f       	sbci	r19, 0xFC	; 252
    d436:	f9 01       	movw	r30, r18
    d438:	20 81       	ld	r18, Z
    d43a:	31 81       	ldd	r19, Z+1	; 0x01
    d43c:	21 50       	subi	r18, 0x01	; 1
    d43e:	30 40       	sbci	r19, 0x00	; 0
    d440:	fc 01       	movw	r30, r24
    d442:	31 83       	std	Z+1, r19	; 0x01
    d444:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d446:	ce 01       	movw	r24, r28
    d448:	8d 5a       	subi	r24, 0xAD	; 173
    d44a:	9c 4f       	sbci	r25, 0xFC	; 252
    d44c:	fc 01       	movw	r30, r24
    d44e:	80 81       	ld	r24, Z
    d450:	91 81       	ldd	r25, Z+1	; 0x01
    d452:	00 97       	sbiw	r24, 0x00	; 0
    d454:	89 f6       	brne	.-94     	; 0xd3f8 <pick_drop+0x64e6>
    d456:	2f c0       	rjmp	.+94     	; 0xd4b6 <pick_drop+0x65a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d458:	8e 01       	movw	r16, r28
    d45a:	0d 5a       	subi	r16, 0xAD	; 173
    d45c:	1c 4f       	sbci	r17, 0xFC	; 252
    d45e:	ce 01       	movw	r24, r28
    d460:	81 5b       	subi	r24, 0xB1	; 177
    d462:	9c 4f       	sbci	r25, 0xFC	; 252
    d464:	fc 01       	movw	r30, r24
    d466:	60 81       	ld	r22, Z
    d468:	71 81       	ldd	r23, Z+1	; 0x01
    d46a:	82 81       	ldd	r24, Z+2	; 0x02
    d46c:	93 81       	ldd	r25, Z+3	; 0x03
    d46e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d472:	dc 01       	movw	r26, r24
    d474:	cb 01       	movw	r24, r22
    d476:	f8 01       	movw	r30, r16
    d478:	91 83       	std	Z+1, r25	; 0x01
    d47a:	80 83       	st	Z, r24
    d47c:	ce 01       	movw	r24, r28
    d47e:	89 5a       	subi	r24, 0xA9	; 169
    d480:	9c 4f       	sbci	r25, 0xFC	; 252
    d482:	9e 01       	movw	r18, r28
    d484:	2d 5a       	subi	r18, 0xAD	; 173
    d486:	3c 4f       	sbci	r19, 0xFC	; 252
    d488:	f9 01       	movw	r30, r18
    d48a:	20 81       	ld	r18, Z
    d48c:	31 81       	ldd	r19, Z+1	; 0x01
    d48e:	fc 01       	movw	r30, r24
    d490:	31 83       	std	Z+1, r19	; 0x01
    d492:	20 83       	st	Z, r18
    d494:	ce 01       	movw	r24, r28
    d496:	89 5a       	subi	r24, 0xA9	; 169
    d498:	9c 4f       	sbci	r25, 0xFC	; 252
    d49a:	fc 01       	movw	r30, r24
    d49c:	80 81       	ld	r24, Z
    d49e:	91 81       	ldd	r25, Z+1	; 0x01
    d4a0:	8c 01       	movw	r16, r24
    d4a2:	c8 01       	movw	r24, r16
    d4a4:	01 97       	sbiw	r24, 0x01	; 1
    d4a6:	f1 f7       	brne	.-4      	; 0xd4a4 <pick_drop+0x6592>
    d4a8:	8c 01       	movw	r16, r24
    d4aa:	ce 01       	movw	r24, r28
    d4ac:	89 5a       	subi	r24, 0xA9	; 169
    d4ae:	9c 4f       	sbci	r25, 0xFC	; 252
    d4b0:	fc 01       	movw	r30, r24
    d4b2:	11 83       	std	Z+1, r17	; 0x01
    d4b4:	00 83       	st	Z, r16
				_delay_ms(100);
				forward_mm(60);
    d4b6:	8c e3       	ldi	r24, 0x3C	; 60
    d4b8:	90 e0       	ldi	r25, 0x00	; 0
    d4ba:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d4be:	9e 01       	movw	r18, r28
    d4c0:	27 5a       	subi	r18, 0xA7	; 167
    d4c2:	3c 4f       	sbci	r19, 0xFC	; 252
    d4c4:	80 e0       	ldi	r24, 0x00	; 0
    d4c6:	90 e0       	ldi	r25, 0x00	; 0
    d4c8:	a0 ea       	ldi	r26, 0xA0	; 160
    d4ca:	b1 e4       	ldi	r27, 0x41	; 65
    d4cc:	f9 01       	movw	r30, r18
    d4ce:	80 83       	st	Z, r24
    d4d0:	91 83       	std	Z+1, r25	; 0x01
    d4d2:	a2 83       	std	Z+2, r26	; 0x02
    d4d4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d4d6:	8e 01       	movw	r16, r28
    d4d8:	03 5a       	subi	r16, 0xA3	; 163
    d4da:	1c 4f       	sbci	r17, 0xFC	; 252
    d4dc:	ce 01       	movw	r24, r28
    d4de:	87 5a       	subi	r24, 0xA7	; 167
    d4e0:	9c 4f       	sbci	r25, 0xFC	; 252
    d4e2:	fc 01       	movw	r30, r24
    d4e4:	60 81       	ld	r22, Z
    d4e6:	71 81       	ldd	r23, Z+1	; 0x01
    d4e8:	82 81       	ldd	r24, Z+2	; 0x02
    d4ea:	93 81       	ldd	r25, Z+3	; 0x03
    d4ec:	26 e6       	ldi	r18, 0x66	; 102
    d4ee:	36 e6       	ldi	r19, 0x66	; 102
    d4f0:	46 e6       	ldi	r20, 0x66	; 102
    d4f2:	55 e4       	ldi	r21, 0x45	; 69
    d4f4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d4f8:	dc 01       	movw	r26, r24
    d4fa:	cb 01       	movw	r24, r22
    d4fc:	f8 01       	movw	r30, r16
    d4fe:	80 83       	st	Z, r24
    d500:	91 83       	std	Z+1, r25	; 0x01
    d502:	a2 83       	std	Z+2, r26	; 0x02
    d504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d506:	ce 01       	movw	r24, r28
    d508:	83 5a       	subi	r24, 0xA3	; 163
    d50a:	9c 4f       	sbci	r25, 0xFC	; 252
    d50c:	11 e0       	ldi	r17, 0x01	; 1
    d50e:	fc 01       	movw	r30, r24
    d510:	60 81       	ld	r22, Z
    d512:	71 81       	ldd	r23, Z+1	; 0x01
    d514:	82 81       	ldd	r24, Z+2	; 0x02
    d516:	93 81       	ldd	r25, Z+3	; 0x03
    d518:	20 e0       	ldi	r18, 0x00	; 0
    d51a:	30 e0       	ldi	r19, 0x00	; 0
    d51c:	40 e8       	ldi	r20, 0x80	; 128
    d51e:	5f e3       	ldi	r21, 0x3F	; 63
    d520:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    d524:	88 23       	and	r24, r24
    d526:	0c f0       	brlt	.+2      	; 0xd52a <pick_drop+0x6618>
    d528:	10 e0       	ldi	r17, 0x00	; 0
    d52a:	11 23       	and	r17, r17
    d52c:	49 f0       	breq	.+18     	; 0xd540 <pick_drop+0x662e>
		__ticks = 1;
    d52e:	ce 01       	movw	r24, r28
    d530:	8f 59       	subi	r24, 0x9F	; 159
    d532:	9c 4f       	sbci	r25, 0xFC	; 252
    d534:	21 e0       	ldi	r18, 0x01	; 1
    d536:	30 e0       	ldi	r19, 0x00	; 0
    d538:	fc 01       	movw	r30, r24
    d53a:	31 83       	std	Z+1, r19	; 0x01
    d53c:	20 83       	st	Z, r18
    d53e:	74 c0       	rjmp	.+232    	; 0xd628 <pick_drop+0x6716>
	else if (__tmp > 65535)
    d540:	ce 01       	movw	r24, r28
    d542:	83 5a       	subi	r24, 0xA3	; 163
    d544:	9c 4f       	sbci	r25, 0xFC	; 252
    d546:	11 e0       	ldi	r17, 0x01	; 1
    d548:	fc 01       	movw	r30, r24
    d54a:	60 81       	ld	r22, Z
    d54c:	71 81       	ldd	r23, Z+1	; 0x01
    d54e:	82 81       	ldd	r24, Z+2	; 0x02
    d550:	93 81       	ldd	r25, Z+3	; 0x03
    d552:	20 e0       	ldi	r18, 0x00	; 0
    d554:	3f ef       	ldi	r19, 0xFF	; 255
    d556:	4f e7       	ldi	r20, 0x7F	; 127
    d558:	57 e4       	ldi	r21, 0x47	; 71
    d55a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    d55e:	18 16       	cp	r1, r24
    d560:	0c f0       	brlt	.+2      	; 0xd564 <pick_drop+0x6652>
    d562:	10 e0       	ldi	r17, 0x00	; 0
    d564:	11 23       	and	r17, r17
    d566:	09 f4       	brne	.+2      	; 0xd56a <pick_drop+0x6658>
    d568:	4d c0       	rjmp	.+154    	; 0xd604 <pick_drop+0x66f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d56a:	ce 01       	movw	r24, r28
    d56c:	87 5a       	subi	r24, 0xA7	; 167
    d56e:	9c 4f       	sbci	r25, 0xFC	; 252
    d570:	fc 01       	movw	r30, r24
    d572:	60 81       	ld	r22, Z
    d574:	71 81       	ldd	r23, Z+1	; 0x01
    d576:	82 81       	ldd	r24, Z+2	; 0x02
    d578:	93 81       	ldd	r25, Z+3	; 0x03
    d57a:	20 e0       	ldi	r18, 0x00	; 0
    d57c:	30 e0       	ldi	r19, 0x00	; 0
    d57e:	40 e2       	ldi	r20, 0x20	; 32
    d580:	51 e4       	ldi	r21, 0x41	; 65
    d582:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d586:	dc 01       	movw	r26, r24
    d588:	cb 01       	movw	r24, r22
    d58a:	8e 01       	movw	r16, r28
    d58c:	0f 59       	subi	r16, 0x9F	; 159
    d58e:	1c 4f       	sbci	r17, 0xFC	; 252
    d590:	bc 01       	movw	r22, r24
    d592:	cd 01       	movw	r24, r26
    d594:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d598:	dc 01       	movw	r26, r24
    d59a:	cb 01       	movw	r24, r22
    d59c:	f8 01       	movw	r30, r16
    d59e:	91 83       	std	Z+1, r25	; 0x01
    d5a0:	80 83       	st	Z, r24
    d5a2:	27 c0       	rjmp	.+78     	; 0xd5f2 <pick_drop+0x66e0>
    d5a4:	ce 01       	movw	r24, r28
    d5a6:	8d 59       	subi	r24, 0x9D	; 157
    d5a8:	9c 4f       	sbci	r25, 0xFC	; 252
    d5aa:	20 e7       	ldi	r18, 0x70	; 112
    d5ac:	31 e0       	ldi	r19, 0x01	; 1
    d5ae:	fc 01       	movw	r30, r24
    d5b0:	31 83       	std	Z+1, r19	; 0x01
    d5b2:	20 83       	st	Z, r18
    d5b4:	ce 01       	movw	r24, r28
    d5b6:	8d 59       	subi	r24, 0x9D	; 157
    d5b8:	9c 4f       	sbci	r25, 0xFC	; 252
    d5ba:	fc 01       	movw	r30, r24
    d5bc:	80 81       	ld	r24, Z
    d5be:	91 81       	ldd	r25, Z+1	; 0x01
    d5c0:	8c 01       	movw	r16, r24
    d5c2:	c8 01       	movw	r24, r16
    d5c4:	01 97       	sbiw	r24, 0x01	; 1
    d5c6:	f1 f7       	brne	.-4      	; 0xd5c4 <pick_drop+0x66b2>
    d5c8:	8c 01       	movw	r16, r24
    d5ca:	ce 01       	movw	r24, r28
    d5cc:	8d 59       	subi	r24, 0x9D	; 157
    d5ce:	9c 4f       	sbci	r25, 0xFC	; 252
    d5d0:	fc 01       	movw	r30, r24
    d5d2:	11 83       	std	Z+1, r17	; 0x01
    d5d4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d5d6:	ce 01       	movw	r24, r28
    d5d8:	8f 59       	subi	r24, 0x9F	; 159
    d5da:	9c 4f       	sbci	r25, 0xFC	; 252
    d5dc:	9e 01       	movw	r18, r28
    d5de:	2f 59       	subi	r18, 0x9F	; 159
    d5e0:	3c 4f       	sbci	r19, 0xFC	; 252
    d5e2:	f9 01       	movw	r30, r18
    d5e4:	20 81       	ld	r18, Z
    d5e6:	31 81       	ldd	r19, Z+1	; 0x01
    d5e8:	21 50       	subi	r18, 0x01	; 1
    d5ea:	30 40       	sbci	r19, 0x00	; 0
    d5ec:	fc 01       	movw	r30, r24
    d5ee:	31 83       	std	Z+1, r19	; 0x01
    d5f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d5f2:	ce 01       	movw	r24, r28
    d5f4:	8f 59       	subi	r24, 0x9F	; 159
    d5f6:	9c 4f       	sbci	r25, 0xFC	; 252
    d5f8:	fc 01       	movw	r30, r24
    d5fa:	80 81       	ld	r24, Z
    d5fc:	91 81       	ldd	r25, Z+1	; 0x01
    d5fe:	00 97       	sbiw	r24, 0x00	; 0
    d600:	89 f6       	brne	.-94     	; 0xd5a4 <pick_drop+0x6692>
    d602:	2f c0       	rjmp	.+94     	; 0xd662 <pick_drop+0x6750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d604:	8e 01       	movw	r16, r28
    d606:	0f 59       	subi	r16, 0x9F	; 159
    d608:	1c 4f       	sbci	r17, 0xFC	; 252
    d60a:	ce 01       	movw	r24, r28
    d60c:	83 5a       	subi	r24, 0xA3	; 163
    d60e:	9c 4f       	sbci	r25, 0xFC	; 252
    d610:	fc 01       	movw	r30, r24
    d612:	60 81       	ld	r22, Z
    d614:	71 81       	ldd	r23, Z+1	; 0x01
    d616:	82 81       	ldd	r24, Z+2	; 0x02
    d618:	93 81       	ldd	r25, Z+3	; 0x03
    d61a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d61e:	dc 01       	movw	r26, r24
    d620:	cb 01       	movw	r24, r22
    d622:	f8 01       	movw	r30, r16
    d624:	91 83       	std	Z+1, r25	; 0x01
    d626:	80 83       	st	Z, r24
    d628:	ce 01       	movw	r24, r28
    d62a:	8b 59       	subi	r24, 0x9B	; 155
    d62c:	9c 4f       	sbci	r25, 0xFC	; 252
    d62e:	9e 01       	movw	r18, r28
    d630:	2f 59       	subi	r18, 0x9F	; 159
    d632:	3c 4f       	sbci	r19, 0xFC	; 252
    d634:	f9 01       	movw	r30, r18
    d636:	20 81       	ld	r18, Z
    d638:	31 81       	ldd	r19, Z+1	; 0x01
    d63a:	fc 01       	movw	r30, r24
    d63c:	31 83       	std	Z+1, r19	; 0x01
    d63e:	20 83       	st	Z, r18
    d640:	ce 01       	movw	r24, r28
    d642:	8b 59       	subi	r24, 0x9B	; 155
    d644:	9c 4f       	sbci	r25, 0xFC	; 252
    d646:	fc 01       	movw	r30, r24
    d648:	80 81       	ld	r24, Z
    d64a:	91 81       	ldd	r25, Z+1	; 0x01
    d64c:	8c 01       	movw	r16, r24
    d64e:	c8 01       	movw	r24, r16
    d650:	01 97       	sbiw	r24, 0x01	; 1
    d652:	f1 f7       	brne	.-4      	; 0xd650 <pick_drop+0x673e>
    d654:	8c 01       	movw	r16, r24
    d656:	ce 01       	movw	r24, r28
    d658:	8b 59       	subi	r24, 0x9B	; 155
    d65a:	9c 4f       	sbci	r25, 0xFC	; 252
    d65c:	fc 01       	movw	r30, r24
    d65e:	11 83       	std	Z+1, r17	; 0x01
    d660:	00 83       	st	Z, r16
				_delay_ms(20);
			}
defaulty();
    d662:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <defaulty>
}
    d666:	c9 59       	subi	r28, 0x99	; 153
    d668:	dc 4f       	sbci	r29, 0xFC	; 252
    d66a:	0f b6       	in	r0, 0x3f	; 63
    d66c:	f8 94       	cli
    d66e:	de bf       	out	0x3e, r29	; 62
    d670:	0f be       	out	0x3f, r0	; 63
    d672:	cd bf       	out	0x3d, r28	; 61
    d674:	df 91       	pop	r29
    d676:	cf 91       	pop	r28
    d678:	1f 91       	pop	r17
    d67a:	0f 91       	pop	r16
    d67c:	08 95       	ret

0000d67e <travel_path>:
void travel_path(char pos_val)
{   TIMSK3=0;
    d67e:	0f 93       	push	r16
    d680:	1f 93       	push	r17
    d682:	cf 93       	push	r28
    d684:	df 93       	push	r29
    d686:	cd b7       	in	r28, 0x3d	; 61
    d688:	de b7       	in	r29, 0x3e	; 62
    d68a:	c9 58       	subi	r28, 0x89	; 137
    d68c:	d1 40       	sbci	r29, 0x01	; 1
    d68e:	0f b6       	in	r0, 0x3f	; 63
    d690:	f8 94       	cli
    d692:	de bf       	out	0x3e, r29	; 62
    d694:	0f be       	out	0x3f, r0	; 63
    d696:	cd bf       	out	0x3d, r28	; 61
    d698:	9e 01       	movw	r18, r28
    d69a:	27 57       	subi	r18, 0x77	; 119
    d69c:	3e 4f       	sbci	r19, 0xFE	; 254
    d69e:	f9 01       	movw	r30, r18
    d6a0:	80 83       	st	Z, r24
    d6a2:	81 e7       	ldi	r24, 0x71	; 113
    d6a4:	90 e0       	ldi	r25, 0x00	; 0
    d6a6:	fc 01       	movw	r30, r24
    d6a8:	10 82       	st	Z, r1
	halt=1;
    d6aa:	81 e0       	ldi	r24, 0x01	; 1
    d6ac:	90 e0       	ldi	r25, 0x00	; 0
    d6ae:	90 93 74 03 	sts	0x0374, r25
    d6b2:	80 93 73 03 	sts	0x0373, r24
	stop();
    d6b6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    d6ba:	80 e0       	ldi	r24, 0x00	; 0
    d6bc:	90 e0       	ldi	r25, 0x00	; 0
    d6be:	a0 ea       	ldi	r26, 0xA0	; 160
    d6c0:	b1 e4       	ldi	r27, 0x41	; 65
    d6c2:	89 83       	std	Y+1, r24	; 0x01
    d6c4:	9a 83       	std	Y+2, r25	; 0x02
    d6c6:	ab 83       	std	Y+3, r26	; 0x03
    d6c8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d6ca:	69 81       	ldd	r22, Y+1	; 0x01
    d6cc:	7a 81       	ldd	r23, Y+2	; 0x02
    d6ce:	8b 81       	ldd	r24, Y+3	; 0x03
    d6d0:	9c 81       	ldd	r25, Y+4	; 0x04
    d6d2:	26 e6       	ldi	r18, 0x66	; 102
    d6d4:	36 e6       	ldi	r19, 0x66	; 102
    d6d6:	46 e6       	ldi	r20, 0x66	; 102
    d6d8:	55 e4       	ldi	r21, 0x45	; 69
    d6da:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d6de:	dc 01       	movw	r26, r24
    d6e0:	cb 01       	movw	r24, r22
    d6e2:	8d 83       	std	Y+5, r24	; 0x05
    d6e4:	9e 83       	std	Y+6, r25	; 0x06
    d6e6:	af 83       	std	Y+7, r26	; 0x07
    d6e8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    d6ea:	11 e0       	ldi	r17, 0x01	; 1
    d6ec:	6d 81       	ldd	r22, Y+5	; 0x05
    d6ee:	7e 81       	ldd	r23, Y+6	; 0x06
    d6f0:	8f 81       	ldd	r24, Y+7	; 0x07
    d6f2:	98 85       	ldd	r25, Y+8	; 0x08
    d6f4:	20 e0       	ldi	r18, 0x00	; 0
    d6f6:	30 e0       	ldi	r19, 0x00	; 0
    d6f8:	40 e8       	ldi	r20, 0x80	; 128
    d6fa:	5f e3       	ldi	r21, 0x3F	; 63
    d6fc:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    d700:	88 23       	and	r24, r24
    d702:	0c f0       	brlt	.+2      	; 0xd706 <travel_path+0x88>
    d704:	10 e0       	ldi	r17, 0x00	; 0
    d706:	11 23       	and	r17, r17
    d708:	29 f0       	breq	.+10     	; 0xd714 <travel_path+0x96>
		__ticks = 1;
    d70a:	81 e0       	ldi	r24, 0x01	; 1
    d70c:	90 e0       	ldi	r25, 0x00	; 0
    d70e:	9a 87       	std	Y+10, r25	; 0x0a
    d710:	89 87       	std	Y+9, r24	; 0x09
    d712:	46 c0       	rjmp	.+140    	; 0xd7a0 <travel_path+0x122>
	else if (__tmp > 65535)
    d714:	11 e0       	ldi	r17, 0x01	; 1
    d716:	6d 81       	ldd	r22, Y+5	; 0x05
    d718:	7e 81       	ldd	r23, Y+6	; 0x06
    d71a:	8f 81       	ldd	r24, Y+7	; 0x07
    d71c:	98 85       	ldd	r25, Y+8	; 0x08
    d71e:	20 e0       	ldi	r18, 0x00	; 0
    d720:	3f ef       	ldi	r19, 0xFF	; 255
    d722:	4f e7       	ldi	r20, 0x7F	; 127
    d724:	57 e4       	ldi	r21, 0x47	; 71
    d726:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    d72a:	18 16       	cp	r1, r24
    d72c:	0c f0       	brlt	.+2      	; 0xd730 <travel_path+0xb2>
    d72e:	10 e0       	ldi	r17, 0x00	; 0
    d730:	11 23       	and	r17, r17
    d732:	61 f1       	breq	.+88     	; 0xd78c <travel_path+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d734:	69 81       	ldd	r22, Y+1	; 0x01
    d736:	7a 81       	ldd	r23, Y+2	; 0x02
    d738:	8b 81       	ldd	r24, Y+3	; 0x03
    d73a:	9c 81       	ldd	r25, Y+4	; 0x04
    d73c:	20 e0       	ldi	r18, 0x00	; 0
    d73e:	30 e0       	ldi	r19, 0x00	; 0
    d740:	40 e2       	ldi	r20, 0x20	; 32
    d742:	51 e4       	ldi	r21, 0x41	; 65
    d744:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d748:	dc 01       	movw	r26, r24
    d74a:	cb 01       	movw	r24, r22
    d74c:	bc 01       	movw	r22, r24
    d74e:	cd 01       	movw	r24, r26
    d750:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d754:	dc 01       	movw	r26, r24
    d756:	cb 01       	movw	r24, r22
    d758:	9a 87       	std	Y+10, r25	; 0x0a
    d75a:	89 87       	std	Y+9, r24	; 0x09
    d75c:	12 c0       	rjmp	.+36     	; 0xd782 <travel_path+0x104>
    d75e:	80 e7       	ldi	r24, 0x70	; 112
    d760:	91 e0       	ldi	r25, 0x01	; 1
    d762:	9c 87       	std	Y+12, r25	; 0x0c
    d764:	8b 87       	std	Y+11, r24	; 0x0b
    d766:	8b 85       	ldd	r24, Y+11	; 0x0b
    d768:	9c 85       	ldd	r25, Y+12	; 0x0c
    d76a:	8c 01       	movw	r16, r24
    d76c:	c8 01       	movw	r24, r16
    d76e:	01 97       	sbiw	r24, 0x01	; 1
    d770:	f1 f7       	brne	.-4      	; 0xd76e <travel_path+0xf0>
    d772:	8c 01       	movw	r16, r24
    d774:	1c 87       	std	Y+12, r17	; 0x0c
    d776:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d778:	89 85       	ldd	r24, Y+9	; 0x09
    d77a:	9a 85       	ldd	r25, Y+10	; 0x0a
    d77c:	01 97       	sbiw	r24, 0x01	; 1
    d77e:	9a 87       	std	Y+10, r25	; 0x0a
    d780:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d782:	89 85       	ldd	r24, Y+9	; 0x09
    d784:	9a 85       	ldd	r25, Y+10	; 0x0a
    d786:	00 97       	sbiw	r24, 0x00	; 0
    d788:	51 f7       	brne	.-44     	; 0xd75e <travel_path+0xe0>
    d78a:	17 c0       	rjmp	.+46     	; 0xd7ba <travel_path+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d78c:	6d 81       	ldd	r22, Y+5	; 0x05
    d78e:	7e 81       	ldd	r23, Y+6	; 0x06
    d790:	8f 81       	ldd	r24, Y+7	; 0x07
    d792:	98 85       	ldd	r25, Y+8	; 0x08
    d794:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d798:	dc 01       	movw	r26, r24
    d79a:	cb 01       	movw	r24, r22
    d79c:	9a 87       	std	Y+10, r25	; 0x0a
    d79e:	89 87       	std	Y+9, r24	; 0x09
    d7a0:	89 85       	ldd	r24, Y+9	; 0x09
    d7a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    d7a4:	9e 87       	std	Y+14, r25	; 0x0e
    d7a6:	8d 87       	std	Y+13, r24	; 0x0d
    d7a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    d7aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    d7ac:	8c 01       	movw	r16, r24
    d7ae:	f8 01       	movw	r30, r16
    d7b0:	31 97       	sbiw	r30, 0x01	; 1
    d7b2:	f1 f7       	brne	.-4      	; 0xd7b0 <travel_path+0x132>
    d7b4:	8f 01       	movw	r16, r30
    d7b6:	1e 87       	std	Y+14, r17	; 0x0e
    d7b8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(pos_val=='n'){
    d7ba:	ce 01       	movw	r24, r28
    d7bc:	87 57       	subi	r24, 0x77	; 119
    d7be:	9e 4f       	sbci	r25, 0xFE	; 254
    d7c0:	fc 01       	movw	r30, r24
    d7c2:	80 81       	ld	r24, Z
    d7c4:	8e 36       	cpi	r24, 0x6E	; 110
    d7c6:	21 f4       	brne	.+8      	; 0xd7d0 <travel_path+0x152>
	forward();
    d7c8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    d7cc:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
	}
	else if(pos_val=='r')
    d7d0:	ce 01       	movw	r24, r28
    d7d2:	87 57       	subi	r24, 0x77	; 119
    d7d4:	9e 4f       	sbci	r25, 0xFE	; 254
    d7d6:	fc 01       	movw	r30, r24
    d7d8:	80 81       	ld	r24, Z
    d7da:	82 37       	cpi	r24, 0x72	; 114
    d7dc:	21 f4       	brne	.+8      	; 0xd7e6 <travel_path+0x168>
	correct_right();
    d7de:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    d7e2:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
	else if(pos_val=='l')
    d7e6:	ce 01       	movw	r24, r28
    d7e8:	87 57       	subi	r24, 0x77	; 119
    d7ea:	9e 4f       	sbci	r25, 0xFE	; 254
    d7ec:	fc 01       	movw	r30, r24
    d7ee:	80 81       	ld	r24, Z
    d7f0:	8c 36       	cpi	r24, 0x6C	; 108
    d7f2:	21 f4       	brne	.+8      	; 0xd7fc <travel_path+0x17e>
	correct_left();
    d7f4:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    d7f8:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
	else if(pos_val=='R')
    d7fc:	ce 01       	movw	r24, r28
    d7fe:	87 57       	subi	r24, 0x77	; 119
    d800:	9e 4f       	sbci	r25, 0xFE	; 254
    d802:	fc 01       	movw	r30, r24
    d804:	80 81       	ld	r24, Z
    d806:	82 35       	cpi	r24, 0x52	; 82
    d808:	09 f0       	breq	.+2      	; 0xd80c <travel_path+0x18e>
    d80a:	a6 c7       	rjmp	.+3916   	; 0xe758 <travel_path+0x10da>
	{
		if(node==0)
    d80c:	80 91 71 03 	lds	r24, 0x0371
    d810:	90 91 72 03 	lds	r25, 0x0372
    d814:	00 97       	sbiw	r24, 0x00	; 0
    d816:	21 f4       	brne	.+8      	; 0xd820 <travel_path+0x1a2>
		correct_right();
    d818:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    d81c:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
	correct_left();
	else if(pos_val=='R')
	{
		if(node==0)
		correct_right();
		else if(master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    d820:	80 91 71 03 	lds	r24, 0x0371
    d824:	90 91 72 03 	lds	r25, 0x0372
    d828:	01 96       	adiw	r24, 0x01	; 1
    d82a:	8b 58       	subi	r24, 0x8B	; 139
    d82c:	9c 4f       	sbci	r25, 0xFC	; 252
    d82e:	fc 01       	movw	r30, r24
    d830:	80 81       	ld	r24, Z
    d832:	81 33       	cpi	r24, 0x31	; 49
    d834:	09 f4       	brne	.+2      	; 0xd838 <travel_path+0x1ba>
    d836:	4f c0       	rjmp	.+158    	; 0xd8d6 <travel_path+0x258>
    d838:	80 91 71 03 	lds	r24, 0x0371
    d83c:	90 91 72 03 	lds	r25, 0x0372
    d840:	01 96       	adiw	r24, 0x01	; 1
    d842:	8b 58       	subi	r24, 0x8B	; 139
    d844:	9c 4f       	sbci	r25, 0xFC	; 252
    d846:	fc 01       	movw	r30, r24
    d848:	80 81       	ld	r24, Z
    d84a:	82 33       	cpi	r24, 0x32	; 50
    d84c:	09 f4       	brne	.+2      	; 0xd850 <travel_path+0x1d2>
    d84e:	43 c0       	rjmp	.+134    	; 0xd8d6 <travel_path+0x258>
    d850:	80 91 71 03 	lds	r24, 0x0371
    d854:	90 91 72 03 	lds	r25, 0x0372
    d858:	01 96       	adiw	r24, 0x01	; 1
    d85a:	8b 58       	subi	r24, 0x8B	; 139
    d85c:	9c 4f       	sbci	r25, 0xFC	; 252
    d85e:	fc 01       	movw	r30, r24
    d860:	80 81       	ld	r24, Z
    d862:	83 33       	cpi	r24, 0x33	; 51
    d864:	c1 f1       	breq	.+112    	; 0xd8d6 <travel_path+0x258>
    d866:	80 91 71 03 	lds	r24, 0x0371
    d86a:	90 91 72 03 	lds	r25, 0x0372
    d86e:	01 96       	adiw	r24, 0x01	; 1
    d870:	8b 58       	subi	r24, 0x8B	; 139
    d872:	9c 4f       	sbci	r25, 0xFC	; 252
    d874:	fc 01       	movw	r30, r24
    d876:	80 81       	ld	r24, Z
    d878:	84 33       	cpi	r24, 0x34	; 52
    d87a:	69 f1       	breq	.+90     	; 0xd8d6 <travel_path+0x258>
    d87c:	80 91 71 03 	lds	r24, 0x0371
    d880:	90 91 72 03 	lds	r25, 0x0372
    d884:	01 96       	adiw	r24, 0x01	; 1
    d886:	8b 58       	subi	r24, 0x8B	; 139
    d888:	9c 4f       	sbci	r25, 0xFC	; 252
    d88a:	fc 01       	movw	r30, r24
    d88c:	80 81       	ld	r24, Z
    d88e:	85 33       	cpi	r24, 0x35	; 53
    d890:	11 f1       	breq	.+68     	; 0xd8d6 <travel_path+0x258>
    d892:	80 91 71 03 	lds	r24, 0x0371
    d896:	90 91 72 03 	lds	r25, 0x0372
    d89a:	01 96       	adiw	r24, 0x01	; 1
    d89c:	8b 58       	subi	r24, 0x8B	; 139
    d89e:	9c 4f       	sbci	r25, 0xFC	; 252
    d8a0:	fc 01       	movw	r30, r24
    d8a2:	80 81       	ld	r24, Z
    d8a4:	86 33       	cpi	r24, 0x36	; 54
    d8a6:	b9 f0       	breq	.+46     	; 0xd8d6 <travel_path+0x258>
    d8a8:	80 91 71 03 	lds	r24, 0x0371
    d8ac:	90 91 72 03 	lds	r25, 0x0372
    d8b0:	01 96       	adiw	r24, 0x01	; 1
    d8b2:	8b 58       	subi	r24, 0x8B	; 139
    d8b4:	9c 4f       	sbci	r25, 0xFC	; 252
    d8b6:	fc 01       	movw	r30, r24
    d8b8:	80 81       	ld	r24, Z
    d8ba:	87 33       	cpi	r24, 0x37	; 55
    d8bc:	61 f0       	breq	.+24     	; 0xd8d6 <travel_path+0x258>
    d8be:	80 91 71 03 	lds	r24, 0x0371
    d8c2:	90 91 72 03 	lds	r25, 0x0372
    d8c6:	01 96       	adiw	r24, 0x01	; 1
    d8c8:	8b 58       	subi	r24, 0x8B	; 139
    d8ca:	9c 4f       	sbci	r25, 0xFC	; 252
    d8cc:	fc 01       	movw	r30, r24
    d8ce:	80 81       	ld	r24, Z
    d8d0:	88 33       	cpi	r24, 0x38	; 56
    d8d2:	09 f0       	breq	.+2      	; 0xd8d6 <travel_path+0x258>
    d8d4:	ff c5       	rjmp	.+3070   	; 0xe4d4 <travel_path+0xe56>
		{
			stop();
    d8d6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			if(master_path[node+1]=='7'||master_path[node+1]=='6')// TO ALIGN TO NORTH SLANT LINE ONLY
    d8da:	80 91 71 03 	lds	r24, 0x0371
    d8de:	90 91 72 03 	lds	r25, 0x0372
    d8e2:	01 96       	adiw	r24, 0x01	; 1
    d8e4:	8b 58       	subi	r24, 0x8B	; 139
    d8e6:	9c 4f       	sbci	r25, 0xFC	; 252
    d8e8:	fc 01       	movw	r30, r24
    d8ea:	80 81       	ld	r24, Z
    d8ec:	87 33       	cpi	r24, 0x37	; 55
    d8ee:	61 f0       	breq	.+24     	; 0xd908 <travel_path+0x28a>
    d8f0:	80 91 71 03 	lds	r24, 0x0371
    d8f4:	90 91 72 03 	lds	r25, 0x0372
    d8f8:	01 96       	adiw	r24, 0x01	; 1
    d8fa:	8b 58       	subi	r24, 0x8B	; 139
    d8fc:	9c 4f       	sbci	r25, 0xFC	; 252
    d8fe:	fc 01       	movw	r30, r24
    d900:	80 81       	ld	r24, Z
    d902:	86 33       	cpi	r24, 0x36	; 54
    d904:	09 f0       	breq	.+2      	; 0xd908 <travel_path+0x28a>
    d906:	87 c0       	rjmp	.+270    	; 0xda16 <travel_path+0x398>
			{
				forward_mm(25);
    d908:	89 e1       	ldi	r24, 0x19	; 25
    d90a:	90 e0       	ldi	r25, 0x00	; 0
    d90c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d910:	80 e0       	ldi	r24, 0x00	; 0
    d912:	90 e0       	ldi	r25, 0x00	; 0
    d914:	a0 ea       	ldi	r26, 0xA0	; 160
    d916:	b1 e4       	ldi	r27, 0x41	; 65
    d918:	8f 87       	std	Y+15, r24	; 0x0f
    d91a:	98 8b       	std	Y+16, r25	; 0x10
    d91c:	a9 8b       	std	Y+17, r26	; 0x11
    d91e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d920:	6f 85       	ldd	r22, Y+15	; 0x0f
    d922:	78 89       	ldd	r23, Y+16	; 0x10
    d924:	89 89       	ldd	r24, Y+17	; 0x11
    d926:	9a 89       	ldd	r25, Y+18	; 0x12
    d928:	26 e6       	ldi	r18, 0x66	; 102
    d92a:	36 e6       	ldi	r19, 0x66	; 102
    d92c:	46 e6       	ldi	r20, 0x66	; 102
    d92e:	55 e4       	ldi	r21, 0x45	; 69
    d930:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d934:	dc 01       	movw	r26, r24
    d936:	cb 01       	movw	r24, r22
    d938:	8b 8b       	std	Y+19, r24	; 0x13
    d93a:	9c 8b       	std	Y+20, r25	; 0x14
    d93c:	ad 8b       	std	Y+21, r26	; 0x15
    d93e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    d940:	11 e0       	ldi	r17, 0x01	; 1
    d942:	6b 89       	ldd	r22, Y+19	; 0x13
    d944:	7c 89       	ldd	r23, Y+20	; 0x14
    d946:	8d 89       	ldd	r24, Y+21	; 0x15
    d948:	9e 89       	ldd	r25, Y+22	; 0x16
    d94a:	20 e0       	ldi	r18, 0x00	; 0
    d94c:	30 e0       	ldi	r19, 0x00	; 0
    d94e:	40 e8       	ldi	r20, 0x80	; 128
    d950:	5f e3       	ldi	r21, 0x3F	; 63
    d952:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    d956:	88 23       	and	r24, r24
    d958:	0c f0       	brlt	.+2      	; 0xd95c <travel_path+0x2de>
    d95a:	10 e0       	ldi	r17, 0x00	; 0
    d95c:	11 23       	and	r17, r17
    d95e:	29 f0       	breq	.+10     	; 0xd96a <travel_path+0x2ec>
		__ticks = 1;
    d960:	81 e0       	ldi	r24, 0x01	; 1
    d962:	90 e0       	ldi	r25, 0x00	; 0
    d964:	98 8f       	std	Y+24, r25	; 0x18
    d966:	8f 8b       	std	Y+23, r24	; 0x17
    d968:	46 c0       	rjmp	.+140    	; 0xd9f6 <travel_path+0x378>
	else if (__tmp > 65535)
    d96a:	11 e0       	ldi	r17, 0x01	; 1
    d96c:	6b 89       	ldd	r22, Y+19	; 0x13
    d96e:	7c 89       	ldd	r23, Y+20	; 0x14
    d970:	8d 89       	ldd	r24, Y+21	; 0x15
    d972:	9e 89       	ldd	r25, Y+22	; 0x16
    d974:	20 e0       	ldi	r18, 0x00	; 0
    d976:	3f ef       	ldi	r19, 0xFF	; 255
    d978:	4f e7       	ldi	r20, 0x7F	; 127
    d97a:	57 e4       	ldi	r21, 0x47	; 71
    d97c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    d980:	18 16       	cp	r1, r24
    d982:	0c f0       	brlt	.+2      	; 0xd986 <travel_path+0x308>
    d984:	10 e0       	ldi	r17, 0x00	; 0
    d986:	11 23       	and	r17, r17
    d988:	61 f1       	breq	.+88     	; 0xd9e2 <travel_path+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d98a:	6f 85       	ldd	r22, Y+15	; 0x0f
    d98c:	78 89       	ldd	r23, Y+16	; 0x10
    d98e:	89 89       	ldd	r24, Y+17	; 0x11
    d990:	9a 89       	ldd	r25, Y+18	; 0x12
    d992:	20 e0       	ldi	r18, 0x00	; 0
    d994:	30 e0       	ldi	r19, 0x00	; 0
    d996:	40 e2       	ldi	r20, 0x20	; 32
    d998:	51 e4       	ldi	r21, 0x41	; 65
    d99a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    d99e:	dc 01       	movw	r26, r24
    d9a0:	cb 01       	movw	r24, r22
    d9a2:	bc 01       	movw	r22, r24
    d9a4:	cd 01       	movw	r24, r26
    d9a6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d9aa:	dc 01       	movw	r26, r24
    d9ac:	cb 01       	movw	r24, r22
    d9ae:	98 8f       	std	Y+24, r25	; 0x18
    d9b0:	8f 8b       	std	Y+23, r24	; 0x17
    d9b2:	12 c0       	rjmp	.+36     	; 0xd9d8 <travel_path+0x35a>
    d9b4:	80 e7       	ldi	r24, 0x70	; 112
    d9b6:	91 e0       	ldi	r25, 0x01	; 1
    d9b8:	9a 8f       	std	Y+26, r25	; 0x1a
    d9ba:	89 8f       	std	Y+25, r24	; 0x19
    d9bc:	89 8d       	ldd	r24, Y+25	; 0x19
    d9be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d9c0:	8c 01       	movw	r16, r24
    d9c2:	c8 01       	movw	r24, r16
    d9c4:	01 97       	sbiw	r24, 0x01	; 1
    d9c6:	f1 f7       	brne	.-4      	; 0xd9c4 <travel_path+0x346>
    d9c8:	8c 01       	movw	r16, r24
    d9ca:	1a 8f       	std	Y+26, r17	; 0x1a
    d9cc:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d9ce:	8f 89       	ldd	r24, Y+23	; 0x17
    d9d0:	98 8d       	ldd	r25, Y+24	; 0x18
    d9d2:	01 97       	sbiw	r24, 0x01	; 1
    d9d4:	98 8f       	std	Y+24, r25	; 0x18
    d9d6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d9d8:	8f 89       	ldd	r24, Y+23	; 0x17
    d9da:	98 8d       	ldd	r25, Y+24	; 0x18
    d9dc:	00 97       	sbiw	r24, 0x00	; 0
    d9de:	51 f7       	brne	.-44     	; 0xd9b4 <travel_path+0x336>
    d9e0:	17 c0       	rjmp	.+46     	; 0xda10 <travel_path+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d9e2:	6b 89       	ldd	r22, Y+19	; 0x13
    d9e4:	7c 89       	ldd	r23, Y+20	; 0x14
    d9e6:	8d 89       	ldd	r24, Y+21	; 0x15
    d9e8:	9e 89       	ldd	r25, Y+22	; 0x16
    d9ea:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    d9ee:	dc 01       	movw	r26, r24
    d9f0:	cb 01       	movw	r24, r22
    d9f2:	98 8f       	std	Y+24, r25	; 0x18
    d9f4:	8f 8b       	std	Y+23, r24	; 0x17
    d9f6:	8f 89       	ldd	r24, Y+23	; 0x17
    d9f8:	98 8d       	ldd	r25, Y+24	; 0x18
    d9fa:	9c 8f       	std	Y+28, r25	; 0x1c
    d9fc:	8b 8f       	std	Y+27, r24	; 0x1b
    d9fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    da00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    da02:	8c 01       	movw	r16, r24
    da04:	f8 01       	movw	r30, r16
    da06:	31 97       	sbiw	r30, 0x01	; 1
    da08:	f1 f7       	brne	.-4      	; 0xda06 <travel_path+0x388>
    da0a:	8f 01       	movw	r16, r30
    da0c:	1c 8f       	std	Y+28, r17	; 0x1c
    da0e:	0b 8f       	std	Y+27, r16	; 0x1b
				_delay_ms(20);
				correct_right();
    da10:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    da14:	37 c5       	rjmp	.+2670   	; 0xe484 <travel_path+0xe06>
			}
			else if(master_path[node+1]=='8'){//if bot comes from right
    da16:	80 91 71 03 	lds	r24, 0x0371
    da1a:	90 91 72 03 	lds	r25, 0x0372
    da1e:	01 96       	adiw	r24, 0x01	; 1
    da20:	8b 58       	subi	r24, 0x8B	; 139
    da22:	9c 4f       	sbci	r25, 0xFC	; 252
    da24:	fc 01       	movw	r30, r24
    da26:	80 81       	ld	r24, Z
    da28:	88 33       	cpi	r24, 0x38	; 56
    da2a:	09 f0       	breq	.+2      	; 0xda2e <travel_path+0x3b0>
    da2c:	cc c1       	rjmp	.+920    	; 0xddc6 <travel_path+0x748>
				stop();
    da2e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    da32:	80 e0       	ldi	r24, 0x00	; 0
    da34:	90 e0       	ldi	r25, 0x00	; 0
    da36:	a0 ea       	ldi	r26, 0xA0	; 160
    da38:	b1 e4       	ldi	r27, 0x41	; 65
    da3a:	8d 8f       	std	Y+29, r24	; 0x1d
    da3c:	9e 8f       	std	Y+30, r25	; 0x1e
    da3e:	af 8f       	std	Y+31, r26	; 0x1f
    da40:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    da42:	6d 8d       	ldd	r22, Y+29	; 0x1d
    da44:	7e 8d       	ldd	r23, Y+30	; 0x1e
    da46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    da48:	98 a1       	lds	r25, 0x48
    da4a:	26 e6       	ldi	r18, 0x66	; 102
    da4c:	36 e6       	ldi	r19, 0x66	; 102
    da4e:	46 e6       	ldi	r20, 0x66	; 102
    da50:	55 e4       	ldi	r21, 0x45	; 69
    da52:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    da56:	dc 01       	movw	r26, r24
    da58:	cb 01       	movw	r24, r22
    da5a:	89 a3       	lds	r24, 0x59
    da5c:	9a a3       	lds	r25, 0x5a
    da5e:	ab a3       	lds	r26, 0x5b
    da60:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    da62:	11 e0       	ldi	r17, 0x01	; 1
    da64:	69 a1       	lds	r22, 0x49
    da66:	7a a1       	lds	r23, 0x4a
    da68:	8b a1       	lds	r24, 0x4b
    da6a:	9c a1       	lds	r25, 0x4c
    da6c:	20 e0       	ldi	r18, 0x00	; 0
    da6e:	30 e0       	ldi	r19, 0x00	; 0
    da70:	40 e8       	ldi	r20, 0x80	; 128
    da72:	5f e3       	ldi	r21, 0x3F	; 63
    da74:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    da78:	88 23       	and	r24, r24
    da7a:	0c f0       	brlt	.+2      	; 0xda7e <travel_path+0x400>
    da7c:	10 e0       	ldi	r17, 0x00	; 0
    da7e:	11 23       	and	r17, r17
    da80:	29 f0       	breq	.+10     	; 0xda8c <travel_path+0x40e>
		__ticks = 1;
    da82:	81 e0       	ldi	r24, 0x01	; 1
    da84:	90 e0       	ldi	r25, 0x00	; 0
    da86:	9e a3       	lds	r25, 0x5e
    da88:	8d a3       	lds	r24, 0x5d
    da8a:	46 c0       	rjmp	.+140    	; 0xdb18 <travel_path+0x49a>
	else if (__tmp > 65535)
    da8c:	11 e0       	ldi	r17, 0x01	; 1
    da8e:	69 a1       	lds	r22, 0x49
    da90:	7a a1       	lds	r23, 0x4a
    da92:	8b a1       	lds	r24, 0x4b
    da94:	9c a1       	lds	r25, 0x4c
    da96:	20 e0       	ldi	r18, 0x00	; 0
    da98:	3f ef       	ldi	r19, 0xFF	; 255
    da9a:	4f e7       	ldi	r20, 0x7F	; 127
    da9c:	57 e4       	ldi	r21, 0x47	; 71
    da9e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    daa2:	18 16       	cp	r1, r24
    daa4:	0c f0       	brlt	.+2      	; 0xdaa8 <travel_path+0x42a>
    daa6:	10 e0       	ldi	r17, 0x00	; 0
    daa8:	11 23       	and	r17, r17
    daaa:	61 f1       	breq	.+88     	; 0xdb04 <travel_path+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    daac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    daae:	7e 8d       	ldd	r23, Y+30	; 0x1e
    dab0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    dab2:	98 a1       	lds	r25, 0x48
    dab4:	20 e0       	ldi	r18, 0x00	; 0
    dab6:	30 e0       	ldi	r19, 0x00	; 0
    dab8:	40 e2       	ldi	r20, 0x20	; 32
    daba:	51 e4       	ldi	r21, 0x41	; 65
    dabc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    dac0:	dc 01       	movw	r26, r24
    dac2:	cb 01       	movw	r24, r22
    dac4:	bc 01       	movw	r22, r24
    dac6:	cd 01       	movw	r24, r26
    dac8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    dacc:	dc 01       	movw	r26, r24
    dace:	cb 01       	movw	r24, r22
    dad0:	9e a3       	lds	r25, 0x5e
    dad2:	8d a3       	lds	r24, 0x5d
    dad4:	12 c0       	rjmp	.+36     	; 0xdafa <travel_path+0x47c>
    dad6:	80 e7       	ldi	r24, 0x70	; 112
    dad8:	91 e0       	ldi	r25, 0x01	; 1
    dada:	98 a7       	lds	r25, 0x78
    dadc:	8f a3       	lds	r24, 0x5f
    dade:	8f a1       	lds	r24, 0x4f
    dae0:	98 a5       	lds	r25, 0x68
    dae2:	8c 01       	movw	r16, r24
    dae4:	c8 01       	movw	r24, r16
    dae6:	01 97       	sbiw	r24, 0x01	; 1
    dae8:	f1 f7       	brne	.-4      	; 0xdae6 <travel_path+0x468>
    daea:	8c 01       	movw	r16, r24
    daec:	18 a7       	lds	r17, 0x78
    daee:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    daf0:	8d a1       	lds	r24, 0x4d
    daf2:	9e a1       	lds	r25, 0x4e
    daf4:	01 97       	sbiw	r24, 0x01	; 1
    daf6:	9e a3       	lds	r25, 0x5e
    daf8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dafa:	8d a1       	lds	r24, 0x4d
    dafc:	9e a1       	lds	r25, 0x4e
    dafe:	00 97       	sbiw	r24, 0x00	; 0
    db00:	51 f7       	brne	.-44     	; 0xdad6 <travel_path+0x458>
    db02:	17 c0       	rjmp	.+46     	; 0xdb32 <travel_path+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    db04:	69 a1       	lds	r22, 0x49
    db06:	7a a1       	lds	r23, 0x4a
    db08:	8b a1       	lds	r24, 0x4b
    db0a:	9c a1       	lds	r25, 0x4c
    db0c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    db10:	dc 01       	movw	r26, r24
    db12:	cb 01       	movw	r24, r22
    db14:	9e a3       	lds	r25, 0x5e
    db16:	8d a3       	lds	r24, 0x5d
    db18:	8d a1       	lds	r24, 0x4d
    db1a:	9e a1       	lds	r25, 0x4e
    db1c:	9a a7       	lds	r25, 0x7a
    db1e:	89 a7       	lds	r24, 0x79
    db20:	89 a5       	lds	r24, 0x69
    db22:	9a a5       	lds	r25, 0x6a
    db24:	8c 01       	movw	r16, r24
    db26:	f8 01       	movw	r30, r16
    db28:	31 97       	sbiw	r30, 0x01	; 1
    db2a:	f1 f7       	brne	.-4      	; 0xdb28 <travel_path+0x4aa>
    db2c:	8f 01       	movw	r16, r30
    db2e:	1a a7       	lds	r17, 0x7a
    db30:	09 a7       	lds	r16, 0x79
				_delay_ms(20);
				forward_mm(160);
    db32:	80 ea       	ldi	r24, 0xA0	; 160
    db34:	90 e0       	ldi	r25, 0x00	; 0
    db36:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    db3a:	80 e0       	ldi	r24, 0x00	; 0
    db3c:	90 e0       	ldi	r25, 0x00	; 0
    db3e:	a0 ea       	ldi	r26, 0xA0	; 160
    db40:	b1 e4       	ldi	r27, 0x41	; 65
    db42:	8b a7       	lds	r24, 0x7b
    db44:	9c a7       	lds	r25, 0x7c
    db46:	ad a7       	lds	r26, 0x7d
    db48:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    db4a:	6b a5       	lds	r22, 0x6b
    db4c:	7c a5       	lds	r23, 0x6c
    db4e:	8d a5       	lds	r24, 0x6d
    db50:	9e a5       	lds	r25, 0x6e
    db52:	26 e6       	ldi	r18, 0x66	; 102
    db54:	36 e6       	ldi	r19, 0x66	; 102
    db56:	46 e6       	ldi	r20, 0x66	; 102
    db58:	55 e4       	ldi	r21, 0x45	; 69
    db5a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    db5e:	dc 01       	movw	r26, r24
    db60:	cb 01       	movw	r24, r22
    db62:	8f a7       	lds	r24, 0x7f
    db64:	98 ab       	sts	0x58, r25
    db66:	a9 ab       	sts	0x59, r26
    db68:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    db6a:	11 e0       	ldi	r17, 0x01	; 1
    db6c:	6f a5       	lds	r22, 0x6f
    db6e:	78 a9       	sts	0x48, r23
    db70:	89 a9       	sts	0x49, r24
    db72:	9a a9       	sts	0x4a, r25
    db74:	20 e0       	ldi	r18, 0x00	; 0
    db76:	30 e0       	ldi	r19, 0x00	; 0
    db78:	40 e8       	ldi	r20, 0x80	; 128
    db7a:	5f e3       	ldi	r21, 0x3F	; 63
    db7c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    db80:	88 23       	and	r24, r24
    db82:	0c f0       	brlt	.+2      	; 0xdb86 <travel_path+0x508>
    db84:	10 e0       	ldi	r17, 0x00	; 0
    db86:	11 23       	and	r17, r17
    db88:	29 f0       	breq	.+10     	; 0xdb94 <travel_path+0x516>
		__ticks = 1;
    db8a:	81 e0       	ldi	r24, 0x01	; 1
    db8c:	90 e0       	ldi	r25, 0x00	; 0
    db8e:	9c ab       	sts	0x5c, r25
    db90:	8b ab       	sts	0x5b, r24
    db92:	46 c0       	rjmp	.+140    	; 0xdc20 <travel_path+0x5a2>
	else if (__tmp > 65535)
    db94:	11 e0       	ldi	r17, 0x01	; 1
    db96:	6f a5       	lds	r22, 0x6f
    db98:	78 a9       	sts	0x48, r23
    db9a:	89 a9       	sts	0x49, r24
    db9c:	9a a9       	sts	0x4a, r25
    db9e:	20 e0       	ldi	r18, 0x00	; 0
    dba0:	3f ef       	ldi	r19, 0xFF	; 255
    dba2:	4f e7       	ldi	r20, 0x7F	; 127
    dba4:	57 e4       	ldi	r21, 0x47	; 71
    dba6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    dbaa:	18 16       	cp	r1, r24
    dbac:	0c f0       	brlt	.+2      	; 0xdbb0 <travel_path+0x532>
    dbae:	10 e0       	ldi	r17, 0x00	; 0
    dbb0:	11 23       	and	r17, r17
    dbb2:	61 f1       	breq	.+88     	; 0xdc0c <travel_path+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    dbb4:	6b a5       	lds	r22, 0x6b
    dbb6:	7c a5       	lds	r23, 0x6c
    dbb8:	8d a5       	lds	r24, 0x6d
    dbba:	9e a5       	lds	r25, 0x6e
    dbbc:	20 e0       	ldi	r18, 0x00	; 0
    dbbe:	30 e0       	ldi	r19, 0x00	; 0
    dbc0:	40 e2       	ldi	r20, 0x20	; 32
    dbc2:	51 e4       	ldi	r21, 0x41	; 65
    dbc4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    dbc8:	dc 01       	movw	r26, r24
    dbca:	cb 01       	movw	r24, r22
    dbcc:	bc 01       	movw	r22, r24
    dbce:	cd 01       	movw	r24, r26
    dbd0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    dbd4:	dc 01       	movw	r26, r24
    dbd6:	cb 01       	movw	r24, r22
    dbd8:	9c ab       	sts	0x5c, r25
    dbda:	8b ab       	sts	0x5b, r24
    dbdc:	12 c0       	rjmp	.+36     	; 0xdc02 <travel_path+0x584>
    dbde:	80 e7       	ldi	r24, 0x70	; 112
    dbe0:	91 e0       	ldi	r25, 0x01	; 1
    dbe2:	9e ab       	sts	0x5e, r25
    dbe4:	8d ab       	sts	0x5d, r24
    dbe6:	8d a9       	sts	0x4d, r24
    dbe8:	9e a9       	sts	0x4e, r25
    dbea:	8c 01       	movw	r16, r24
    dbec:	c8 01       	movw	r24, r16
    dbee:	01 97       	sbiw	r24, 0x01	; 1
    dbf0:	f1 f7       	brne	.-4      	; 0xdbee <travel_path+0x570>
    dbf2:	8c 01       	movw	r16, r24
    dbf4:	1e ab       	sts	0x5e, r17
    dbf6:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    dbf8:	8b a9       	sts	0x4b, r24
    dbfa:	9c a9       	sts	0x4c, r25
    dbfc:	01 97       	sbiw	r24, 0x01	; 1
    dbfe:	9c ab       	sts	0x5c, r25
    dc00:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dc02:	8b a9       	sts	0x4b, r24
    dc04:	9c a9       	sts	0x4c, r25
    dc06:	00 97       	sbiw	r24, 0x00	; 0
    dc08:	51 f7       	brne	.-44     	; 0xdbde <travel_path+0x560>
    dc0a:	17 c0       	rjmp	.+46     	; 0xdc3a <travel_path+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dc0c:	6f a5       	lds	r22, 0x6f
    dc0e:	78 a9       	sts	0x48, r23
    dc10:	89 a9       	sts	0x49, r24
    dc12:	9a a9       	sts	0x4a, r25
    dc14:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    dc18:	dc 01       	movw	r26, r24
    dc1a:	cb 01       	movw	r24, r22
    dc1c:	9c ab       	sts	0x5c, r25
    dc1e:	8b ab       	sts	0x5b, r24
    dc20:	8b a9       	sts	0x4b, r24
    dc22:	9c a9       	sts	0x4c, r25
    dc24:	98 af       	sts	0x78, r25
    dc26:	8f ab       	sts	0x5f, r24
    dc28:	8f a9       	sts	0x4f, r24
    dc2a:	98 ad       	sts	0x68, r25
    dc2c:	8c 01       	movw	r16, r24
    dc2e:	f8 01       	movw	r30, r16
    dc30:	31 97       	sbiw	r30, 0x01	; 1
    dc32:	f1 f7       	brne	.-4      	; 0xdc30 <travel_path+0x5b2>
    dc34:	8f 01       	movw	r16, r30
    dc36:	18 af       	sts	0x78, r17
    dc38:	0f ab       	sts	0x5f, r16
				_delay_ms(20);
				 spl_right2();
    dc3a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    dc3e:	80 e0       	ldi	r24, 0x00	; 0
    dc40:	90 e0       	ldi	r25, 0x00	; 0
    dc42:	a0 ea       	ldi	r26, 0xA0	; 160
    dc44:	b1 e4       	ldi	r27, 0x41	; 65
    dc46:	89 af       	sts	0x79, r24
    dc48:	9a af       	sts	0x7a, r25
    dc4a:	ab af       	sts	0x7b, r26
    dc4c:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    dc4e:	69 ad       	sts	0x69, r22
    dc50:	7a ad       	sts	0x6a, r23
    dc52:	8b ad       	sts	0x6b, r24
    dc54:	9c ad       	sts	0x6c, r25
    dc56:	26 e6       	ldi	r18, 0x66	; 102
    dc58:	36 e6       	ldi	r19, 0x66	; 102
    dc5a:	46 e6       	ldi	r20, 0x66	; 102
    dc5c:	55 e4       	ldi	r21, 0x45	; 69
    dc5e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    dc62:	dc 01       	movw	r26, r24
    dc64:	cb 01       	movw	r24, r22
    dc66:	9e 01       	movw	r18, r28
    dc68:	23 5c       	subi	r18, 0xC3	; 195
    dc6a:	3f 4f       	sbci	r19, 0xFF	; 255
    dc6c:	f9 01       	movw	r30, r18
    dc6e:	80 83       	st	Z, r24
    dc70:	91 83       	std	Z+1, r25	; 0x01
    dc72:	a2 83       	std	Z+2, r26	; 0x02
    dc74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    dc76:	11 e0       	ldi	r17, 0x01	; 1
    dc78:	ce 01       	movw	r24, r28
    dc7a:	cd 96       	adiw	r24, 0x3d	; 61
    dc7c:	fc 01       	movw	r30, r24
    dc7e:	60 81       	ld	r22, Z
    dc80:	71 81       	ldd	r23, Z+1	; 0x01
    dc82:	82 81       	ldd	r24, Z+2	; 0x02
    dc84:	93 81       	ldd	r25, Z+3	; 0x03
    dc86:	20 e0       	ldi	r18, 0x00	; 0
    dc88:	30 e0       	ldi	r19, 0x00	; 0
    dc8a:	40 e8       	ldi	r20, 0x80	; 128
    dc8c:	5f e3       	ldi	r21, 0x3F	; 63
    dc8e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    dc92:	88 23       	and	r24, r24
    dc94:	0c f0       	brlt	.+2      	; 0xdc98 <travel_path+0x61a>
    dc96:	10 e0       	ldi	r17, 0x00	; 0
    dc98:	11 23       	and	r17, r17
    dc9a:	49 f0       	breq	.+18     	; 0xdcae <travel_path+0x630>
		__ticks = 1;
    dc9c:	ce 01       	movw	r24, r28
    dc9e:	8f 5b       	subi	r24, 0xBF	; 191
    dca0:	9f 4f       	sbci	r25, 0xFF	; 255
    dca2:	21 e0       	ldi	r18, 0x01	; 1
    dca4:	30 e0       	ldi	r19, 0x00	; 0
    dca6:	fc 01       	movw	r30, r24
    dca8:	31 83       	std	Z+1, r19	; 0x01
    dcaa:	20 83       	st	Z, r18
    dcac:	6e c0       	rjmp	.+220    	; 0xdd8a <travel_path+0x70c>
	else if (__tmp > 65535)
    dcae:	11 e0       	ldi	r17, 0x01	; 1
    dcb0:	ce 01       	movw	r24, r28
    dcb2:	cd 96       	adiw	r24, 0x3d	; 61
    dcb4:	fc 01       	movw	r30, r24
    dcb6:	60 81       	ld	r22, Z
    dcb8:	71 81       	ldd	r23, Z+1	; 0x01
    dcba:	82 81       	ldd	r24, Z+2	; 0x02
    dcbc:	93 81       	ldd	r25, Z+3	; 0x03
    dcbe:	20 e0       	ldi	r18, 0x00	; 0
    dcc0:	3f ef       	ldi	r19, 0xFF	; 255
    dcc2:	4f e7       	ldi	r20, 0x7F	; 127
    dcc4:	57 e4       	ldi	r21, 0x47	; 71
    dcc6:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    dcca:	18 16       	cp	r1, r24
    dccc:	0c f0       	brlt	.+2      	; 0xdcd0 <travel_path+0x652>
    dcce:	10 e0       	ldi	r17, 0x00	; 0
    dcd0:	11 23       	and	r17, r17
    dcd2:	09 f4       	brne	.+2      	; 0xdcd6 <travel_path+0x658>
    dcd4:	49 c0       	rjmp	.+146    	; 0xdd68 <travel_path+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    dcd6:	69 ad       	sts	0x69, r22
    dcd8:	7a ad       	sts	0x6a, r23
    dcda:	8b ad       	sts	0x6b, r24
    dcdc:	9c ad       	sts	0x6c, r25
    dcde:	20 e0       	ldi	r18, 0x00	; 0
    dce0:	30 e0       	ldi	r19, 0x00	; 0
    dce2:	40 e2       	ldi	r20, 0x20	; 32
    dce4:	51 e4       	ldi	r21, 0x41	; 65
    dce6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    dcea:	dc 01       	movw	r26, r24
    dcec:	cb 01       	movw	r24, r22
    dcee:	8e 01       	movw	r16, r28
    dcf0:	0f 5b       	subi	r16, 0xBF	; 191
    dcf2:	1f 4f       	sbci	r17, 0xFF	; 255
    dcf4:	bc 01       	movw	r22, r24
    dcf6:	cd 01       	movw	r24, r26
    dcf8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    dcfc:	dc 01       	movw	r26, r24
    dcfe:	cb 01       	movw	r24, r22
    dd00:	f8 01       	movw	r30, r16
    dd02:	91 83       	std	Z+1, r25	; 0x01
    dd04:	80 83       	st	Z, r24
    dd06:	27 c0       	rjmp	.+78     	; 0xdd56 <travel_path+0x6d8>
    dd08:	ce 01       	movw	r24, r28
    dd0a:	8d 5b       	subi	r24, 0xBD	; 189
    dd0c:	9f 4f       	sbci	r25, 0xFF	; 255
    dd0e:	20 e7       	ldi	r18, 0x70	; 112
    dd10:	31 e0       	ldi	r19, 0x01	; 1
    dd12:	fc 01       	movw	r30, r24
    dd14:	31 83       	std	Z+1, r19	; 0x01
    dd16:	20 83       	st	Z, r18
    dd18:	ce 01       	movw	r24, r28
    dd1a:	8d 5b       	subi	r24, 0xBD	; 189
    dd1c:	9f 4f       	sbci	r25, 0xFF	; 255
    dd1e:	fc 01       	movw	r30, r24
    dd20:	80 81       	ld	r24, Z
    dd22:	91 81       	ldd	r25, Z+1	; 0x01
    dd24:	8c 01       	movw	r16, r24
    dd26:	c8 01       	movw	r24, r16
    dd28:	01 97       	sbiw	r24, 0x01	; 1
    dd2a:	f1 f7       	brne	.-4      	; 0xdd28 <travel_path+0x6aa>
    dd2c:	8c 01       	movw	r16, r24
    dd2e:	ce 01       	movw	r24, r28
    dd30:	8d 5b       	subi	r24, 0xBD	; 189
    dd32:	9f 4f       	sbci	r25, 0xFF	; 255
    dd34:	fc 01       	movw	r30, r24
    dd36:	11 83       	std	Z+1, r17	; 0x01
    dd38:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    dd3a:	ce 01       	movw	r24, r28
    dd3c:	8f 5b       	subi	r24, 0xBF	; 191
    dd3e:	9f 4f       	sbci	r25, 0xFF	; 255
    dd40:	9e 01       	movw	r18, r28
    dd42:	2f 5b       	subi	r18, 0xBF	; 191
    dd44:	3f 4f       	sbci	r19, 0xFF	; 255
    dd46:	f9 01       	movw	r30, r18
    dd48:	20 81       	ld	r18, Z
    dd4a:	31 81       	ldd	r19, Z+1	; 0x01
    dd4c:	21 50       	subi	r18, 0x01	; 1
    dd4e:	30 40       	sbci	r19, 0x00	; 0
    dd50:	fc 01       	movw	r30, r24
    dd52:	31 83       	std	Z+1, r19	; 0x01
    dd54:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dd56:	ce 01       	movw	r24, r28
    dd58:	8f 5b       	subi	r24, 0xBF	; 191
    dd5a:	9f 4f       	sbci	r25, 0xFF	; 255
    dd5c:	fc 01       	movw	r30, r24
    dd5e:	80 81       	ld	r24, Z
    dd60:	91 81       	ldd	r25, Z+1	; 0x01
    dd62:	00 97       	sbiw	r24, 0x00	; 0
    dd64:	89 f6       	brne	.-94     	; 0xdd08 <travel_path+0x68a>
    dd66:	8e c3       	rjmp	.+1820   	; 0xe484 <travel_path+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dd68:	8e 01       	movw	r16, r28
    dd6a:	0f 5b       	subi	r16, 0xBF	; 191
    dd6c:	1f 4f       	sbci	r17, 0xFF	; 255
    dd6e:	ce 01       	movw	r24, r28
    dd70:	cd 96       	adiw	r24, 0x3d	; 61
    dd72:	fc 01       	movw	r30, r24
    dd74:	60 81       	ld	r22, Z
    dd76:	71 81       	ldd	r23, Z+1	; 0x01
    dd78:	82 81       	ldd	r24, Z+2	; 0x02
    dd7a:	93 81       	ldd	r25, Z+3	; 0x03
    dd7c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    dd80:	dc 01       	movw	r26, r24
    dd82:	cb 01       	movw	r24, r22
    dd84:	f8 01       	movw	r30, r16
    dd86:	91 83       	std	Z+1, r25	; 0x01
    dd88:	80 83       	st	Z, r24
    dd8a:	ce 01       	movw	r24, r28
    dd8c:	8b 5b       	subi	r24, 0xBB	; 187
    dd8e:	9f 4f       	sbci	r25, 0xFF	; 255
    dd90:	9e 01       	movw	r18, r28
    dd92:	2f 5b       	subi	r18, 0xBF	; 191
    dd94:	3f 4f       	sbci	r19, 0xFF	; 255
    dd96:	f9 01       	movw	r30, r18
    dd98:	20 81       	ld	r18, Z
    dd9a:	31 81       	ldd	r19, Z+1	; 0x01
    dd9c:	fc 01       	movw	r30, r24
    dd9e:	31 83       	std	Z+1, r19	; 0x01
    dda0:	20 83       	st	Z, r18
    dda2:	ce 01       	movw	r24, r28
    dda4:	8b 5b       	subi	r24, 0xBB	; 187
    dda6:	9f 4f       	sbci	r25, 0xFF	; 255
    dda8:	fc 01       	movw	r30, r24
    ddaa:	80 81       	ld	r24, Z
    ddac:	91 81       	ldd	r25, Z+1	; 0x01
    ddae:	8c 01       	movw	r16, r24
    ddb0:	c8 01       	movw	r24, r16
    ddb2:	01 97       	sbiw	r24, 0x01	; 1
    ddb4:	f1 f7       	brne	.-4      	; 0xddb2 <travel_path+0x734>
    ddb6:	8c 01       	movw	r16, r24
    ddb8:	ce 01       	movw	r24, r28
    ddba:	8b 5b       	subi	r24, 0xBB	; 187
    ddbc:	9f 4f       	sbci	r25, 0xFF	; 255
    ddbe:	fc 01       	movw	r30, r24
    ddc0:	11 83       	std	Z+1, r17	; 0x01
    ddc2:	00 83       	st	Z, r16
    ddc4:	5f c3       	rjmp	.+1726   	; 0xe484 <travel_path+0xe06>
				_delay_ms(20);
			}
			else if(master_path[node+1] == '3')
    ddc6:	80 91 71 03 	lds	r24, 0x0371
    ddca:	90 91 72 03 	lds	r25, 0x0372
    ddce:	01 96       	adiw	r24, 0x01	; 1
    ddd0:	8b 58       	subi	r24, 0x8B	; 139
    ddd2:	9c 4f       	sbci	r25, 0xFC	; 252
    ddd4:	fc 01       	movw	r30, r24
    ddd6:	80 81       	ld	r24, Z
    ddd8:	83 33       	cpi	r24, 0x33	; 51
    ddda:	09 f0       	breq	.+2      	; 0xddde <travel_path+0x760>
    dddc:	7f c2       	rjmp	.+1278   	; 0xe2dc <travel_path+0xc5e>
			{
				stop();
    ddde:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    dde2:	9e 01       	movw	r18, r28
    dde4:	29 5b       	subi	r18, 0xB9	; 185
    dde6:	3f 4f       	sbci	r19, 0xFF	; 255
    dde8:	80 e0       	ldi	r24, 0x00	; 0
    ddea:	90 e0       	ldi	r25, 0x00	; 0
    ddec:	a0 ea       	ldi	r26, 0xA0	; 160
    ddee:	b1 e4       	ldi	r27, 0x41	; 65
    ddf0:	f9 01       	movw	r30, r18
    ddf2:	80 83       	st	Z, r24
    ddf4:	91 83       	std	Z+1, r25	; 0x01
    ddf6:	a2 83       	std	Z+2, r26	; 0x02
    ddf8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ddfa:	8e 01       	movw	r16, r28
    ddfc:	05 5b       	subi	r16, 0xB5	; 181
    ddfe:	1f 4f       	sbci	r17, 0xFF	; 255
    de00:	ce 01       	movw	r24, r28
    de02:	89 5b       	subi	r24, 0xB9	; 185
    de04:	9f 4f       	sbci	r25, 0xFF	; 255
    de06:	fc 01       	movw	r30, r24
    de08:	60 81       	ld	r22, Z
    de0a:	71 81       	ldd	r23, Z+1	; 0x01
    de0c:	82 81       	ldd	r24, Z+2	; 0x02
    de0e:	93 81       	ldd	r25, Z+3	; 0x03
    de10:	26 e6       	ldi	r18, 0x66	; 102
    de12:	36 e6       	ldi	r19, 0x66	; 102
    de14:	46 e6       	ldi	r20, 0x66	; 102
    de16:	55 e4       	ldi	r21, 0x45	; 69
    de18:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    de1c:	dc 01       	movw	r26, r24
    de1e:	cb 01       	movw	r24, r22
    de20:	f8 01       	movw	r30, r16
    de22:	80 83       	st	Z, r24
    de24:	91 83       	std	Z+1, r25	; 0x01
    de26:	a2 83       	std	Z+2, r26	; 0x02
    de28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    de2a:	ce 01       	movw	r24, r28
    de2c:	85 5b       	subi	r24, 0xB5	; 181
    de2e:	9f 4f       	sbci	r25, 0xFF	; 255
    de30:	11 e0       	ldi	r17, 0x01	; 1
    de32:	fc 01       	movw	r30, r24
    de34:	60 81       	ld	r22, Z
    de36:	71 81       	ldd	r23, Z+1	; 0x01
    de38:	82 81       	ldd	r24, Z+2	; 0x02
    de3a:	93 81       	ldd	r25, Z+3	; 0x03
    de3c:	20 e0       	ldi	r18, 0x00	; 0
    de3e:	30 e0       	ldi	r19, 0x00	; 0
    de40:	40 e8       	ldi	r20, 0x80	; 128
    de42:	5f e3       	ldi	r21, 0x3F	; 63
    de44:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    de48:	88 23       	and	r24, r24
    de4a:	0c f0       	brlt	.+2      	; 0xde4e <travel_path+0x7d0>
    de4c:	10 e0       	ldi	r17, 0x00	; 0
    de4e:	11 23       	and	r17, r17
    de50:	49 f0       	breq	.+18     	; 0xde64 <travel_path+0x7e6>
		__ticks = 1;
    de52:	ce 01       	movw	r24, r28
    de54:	81 5b       	subi	r24, 0xB1	; 177
    de56:	9f 4f       	sbci	r25, 0xFF	; 255
    de58:	21 e0       	ldi	r18, 0x01	; 1
    de5a:	30 e0       	ldi	r19, 0x00	; 0
    de5c:	fc 01       	movw	r30, r24
    de5e:	31 83       	std	Z+1, r19	; 0x01
    de60:	20 83       	st	Z, r18
    de62:	74 c0       	rjmp	.+232    	; 0xdf4c <travel_path+0x8ce>
	else if (__tmp > 65535)
    de64:	ce 01       	movw	r24, r28
    de66:	85 5b       	subi	r24, 0xB5	; 181
    de68:	9f 4f       	sbci	r25, 0xFF	; 255
    de6a:	11 e0       	ldi	r17, 0x01	; 1
    de6c:	fc 01       	movw	r30, r24
    de6e:	60 81       	ld	r22, Z
    de70:	71 81       	ldd	r23, Z+1	; 0x01
    de72:	82 81       	ldd	r24, Z+2	; 0x02
    de74:	93 81       	ldd	r25, Z+3	; 0x03
    de76:	20 e0       	ldi	r18, 0x00	; 0
    de78:	3f ef       	ldi	r19, 0xFF	; 255
    de7a:	4f e7       	ldi	r20, 0x7F	; 127
    de7c:	57 e4       	ldi	r21, 0x47	; 71
    de7e:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    de82:	18 16       	cp	r1, r24
    de84:	0c f0       	brlt	.+2      	; 0xde88 <travel_path+0x80a>
    de86:	10 e0       	ldi	r17, 0x00	; 0
    de88:	11 23       	and	r17, r17
    de8a:	09 f4       	brne	.+2      	; 0xde8e <travel_path+0x810>
    de8c:	4d c0       	rjmp	.+154    	; 0xdf28 <travel_path+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    de8e:	ce 01       	movw	r24, r28
    de90:	89 5b       	subi	r24, 0xB9	; 185
    de92:	9f 4f       	sbci	r25, 0xFF	; 255
    de94:	fc 01       	movw	r30, r24
    de96:	60 81       	ld	r22, Z
    de98:	71 81       	ldd	r23, Z+1	; 0x01
    de9a:	82 81       	ldd	r24, Z+2	; 0x02
    de9c:	93 81       	ldd	r25, Z+3	; 0x03
    de9e:	20 e0       	ldi	r18, 0x00	; 0
    dea0:	30 e0       	ldi	r19, 0x00	; 0
    dea2:	40 e2       	ldi	r20, 0x20	; 32
    dea4:	51 e4       	ldi	r21, 0x41	; 65
    dea6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    deaa:	dc 01       	movw	r26, r24
    deac:	cb 01       	movw	r24, r22
    deae:	8e 01       	movw	r16, r28
    deb0:	01 5b       	subi	r16, 0xB1	; 177
    deb2:	1f 4f       	sbci	r17, 0xFF	; 255
    deb4:	bc 01       	movw	r22, r24
    deb6:	cd 01       	movw	r24, r26
    deb8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    debc:	dc 01       	movw	r26, r24
    debe:	cb 01       	movw	r24, r22
    dec0:	f8 01       	movw	r30, r16
    dec2:	91 83       	std	Z+1, r25	; 0x01
    dec4:	80 83       	st	Z, r24
    dec6:	27 c0       	rjmp	.+78     	; 0xdf16 <travel_path+0x898>
    dec8:	ce 01       	movw	r24, r28
    deca:	8f 5a       	subi	r24, 0xAF	; 175
    decc:	9f 4f       	sbci	r25, 0xFF	; 255
    dece:	20 e7       	ldi	r18, 0x70	; 112
    ded0:	31 e0       	ldi	r19, 0x01	; 1
    ded2:	fc 01       	movw	r30, r24
    ded4:	31 83       	std	Z+1, r19	; 0x01
    ded6:	20 83       	st	Z, r18
    ded8:	ce 01       	movw	r24, r28
    deda:	8f 5a       	subi	r24, 0xAF	; 175
    dedc:	9f 4f       	sbci	r25, 0xFF	; 255
    dede:	fc 01       	movw	r30, r24
    dee0:	80 81       	ld	r24, Z
    dee2:	91 81       	ldd	r25, Z+1	; 0x01
    dee4:	8c 01       	movw	r16, r24
    dee6:	c8 01       	movw	r24, r16
    dee8:	01 97       	sbiw	r24, 0x01	; 1
    deea:	f1 f7       	brne	.-4      	; 0xdee8 <travel_path+0x86a>
    deec:	8c 01       	movw	r16, r24
    deee:	ce 01       	movw	r24, r28
    def0:	8f 5a       	subi	r24, 0xAF	; 175
    def2:	9f 4f       	sbci	r25, 0xFF	; 255
    def4:	fc 01       	movw	r30, r24
    def6:	11 83       	std	Z+1, r17	; 0x01
    def8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    defa:	ce 01       	movw	r24, r28
    defc:	81 5b       	subi	r24, 0xB1	; 177
    defe:	9f 4f       	sbci	r25, 0xFF	; 255
    df00:	9e 01       	movw	r18, r28
    df02:	21 5b       	subi	r18, 0xB1	; 177
    df04:	3f 4f       	sbci	r19, 0xFF	; 255
    df06:	f9 01       	movw	r30, r18
    df08:	20 81       	ld	r18, Z
    df0a:	31 81       	ldd	r19, Z+1	; 0x01
    df0c:	21 50       	subi	r18, 0x01	; 1
    df0e:	30 40       	sbci	r19, 0x00	; 0
    df10:	fc 01       	movw	r30, r24
    df12:	31 83       	std	Z+1, r19	; 0x01
    df14:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    df16:	ce 01       	movw	r24, r28
    df18:	81 5b       	subi	r24, 0xB1	; 177
    df1a:	9f 4f       	sbci	r25, 0xFF	; 255
    df1c:	fc 01       	movw	r30, r24
    df1e:	80 81       	ld	r24, Z
    df20:	91 81       	ldd	r25, Z+1	; 0x01
    df22:	00 97       	sbiw	r24, 0x00	; 0
    df24:	89 f6       	brne	.-94     	; 0xdec8 <travel_path+0x84a>
    df26:	2f c0       	rjmp	.+94     	; 0xdf86 <travel_path+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    df28:	8e 01       	movw	r16, r28
    df2a:	01 5b       	subi	r16, 0xB1	; 177
    df2c:	1f 4f       	sbci	r17, 0xFF	; 255
    df2e:	ce 01       	movw	r24, r28
    df30:	85 5b       	subi	r24, 0xB5	; 181
    df32:	9f 4f       	sbci	r25, 0xFF	; 255
    df34:	fc 01       	movw	r30, r24
    df36:	60 81       	ld	r22, Z
    df38:	71 81       	ldd	r23, Z+1	; 0x01
    df3a:	82 81       	ldd	r24, Z+2	; 0x02
    df3c:	93 81       	ldd	r25, Z+3	; 0x03
    df3e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    df42:	dc 01       	movw	r26, r24
    df44:	cb 01       	movw	r24, r22
    df46:	f8 01       	movw	r30, r16
    df48:	91 83       	std	Z+1, r25	; 0x01
    df4a:	80 83       	st	Z, r24
    df4c:	ce 01       	movw	r24, r28
    df4e:	8d 5a       	subi	r24, 0xAD	; 173
    df50:	9f 4f       	sbci	r25, 0xFF	; 255
    df52:	9e 01       	movw	r18, r28
    df54:	21 5b       	subi	r18, 0xB1	; 177
    df56:	3f 4f       	sbci	r19, 0xFF	; 255
    df58:	f9 01       	movw	r30, r18
    df5a:	20 81       	ld	r18, Z
    df5c:	31 81       	ldd	r19, Z+1	; 0x01
    df5e:	fc 01       	movw	r30, r24
    df60:	31 83       	std	Z+1, r19	; 0x01
    df62:	20 83       	st	Z, r18
    df64:	ce 01       	movw	r24, r28
    df66:	8d 5a       	subi	r24, 0xAD	; 173
    df68:	9f 4f       	sbci	r25, 0xFF	; 255
    df6a:	fc 01       	movw	r30, r24
    df6c:	80 81       	ld	r24, Z
    df6e:	91 81       	ldd	r25, Z+1	; 0x01
    df70:	8c 01       	movw	r16, r24
    df72:	c8 01       	movw	r24, r16
    df74:	01 97       	sbiw	r24, 0x01	; 1
    df76:	f1 f7       	brne	.-4      	; 0xdf74 <travel_path+0x8f6>
    df78:	8c 01       	movw	r16, r24
    df7a:	ce 01       	movw	r24, r28
    df7c:	8d 5a       	subi	r24, 0xAD	; 173
    df7e:	9f 4f       	sbci	r25, 0xFF	; 255
    df80:	fc 01       	movw	r30, r24
    df82:	11 83       	std	Z+1, r17	; 0x01
    df84:	00 83       	st	Z, r16
				_delay_ms(20);
				forward_mm(160);
    df86:	80 ea       	ldi	r24, 0xA0	; 160
    df88:	90 e0       	ldi	r25, 0x00	; 0
    df8a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    df8e:	9e 01       	movw	r18, r28
    df90:	2b 5a       	subi	r18, 0xAB	; 171
    df92:	3f 4f       	sbci	r19, 0xFF	; 255
    df94:	80 e0       	ldi	r24, 0x00	; 0
    df96:	90 e0       	ldi	r25, 0x00	; 0
    df98:	a0 ea       	ldi	r26, 0xA0	; 160
    df9a:	b1 e4       	ldi	r27, 0x41	; 65
    df9c:	f9 01       	movw	r30, r18
    df9e:	80 83       	st	Z, r24
    dfa0:	91 83       	std	Z+1, r25	; 0x01
    dfa2:	a2 83       	std	Z+2, r26	; 0x02
    dfa4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    dfa6:	8e 01       	movw	r16, r28
    dfa8:	07 5a       	subi	r16, 0xA7	; 167
    dfaa:	1f 4f       	sbci	r17, 0xFF	; 255
    dfac:	ce 01       	movw	r24, r28
    dfae:	8b 5a       	subi	r24, 0xAB	; 171
    dfb0:	9f 4f       	sbci	r25, 0xFF	; 255
    dfb2:	fc 01       	movw	r30, r24
    dfb4:	60 81       	ld	r22, Z
    dfb6:	71 81       	ldd	r23, Z+1	; 0x01
    dfb8:	82 81       	ldd	r24, Z+2	; 0x02
    dfba:	93 81       	ldd	r25, Z+3	; 0x03
    dfbc:	26 e6       	ldi	r18, 0x66	; 102
    dfbe:	36 e6       	ldi	r19, 0x66	; 102
    dfc0:	46 e6       	ldi	r20, 0x66	; 102
    dfc2:	55 e4       	ldi	r21, 0x45	; 69
    dfc4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    dfc8:	dc 01       	movw	r26, r24
    dfca:	cb 01       	movw	r24, r22
    dfcc:	f8 01       	movw	r30, r16
    dfce:	80 83       	st	Z, r24
    dfd0:	91 83       	std	Z+1, r25	; 0x01
    dfd2:	a2 83       	std	Z+2, r26	; 0x02
    dfd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    dfd6:	ce 01       	movw	r24, r28
    dfd8:	87 5a       	subi	r24, 0xA7	; 167
    dfda:	9f 4f       	sbci	r25, 0xFF	; 255
    dfdc:	11 e0       	ldi	r17, 0x01	; 1
    dfde:	fc 01       	movw	r30, r24
    dfe0:	60 81       	ld	r22, Z
    dfe2:	71 81       	ldd	r23, Z+1	; 0x01
    dfe4:	82 81       	ldd	r24, Z+2	; 0x02
    dfe6:	93 81       	ldd	r25, Z+3	; 0x03
    dfe8:	20 e0       	ldi	r18, 0x00	; 0
    dfea:	30 e0       	ldi	r19, 0x00	; 0
    dfec:	40 e8       	ldi	r20, 0x80	; 128
    dfee:	5f e3       	ldi	r21, 0x3F	; 63
    dff0:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    dff4:	88 23       	and	r24, r24
    dff6:	0c f0       	brlt	.+2      	; 0xdffa <travel_path+0x97c>
    dff8:	10 e0       	ldi	r17, 0x00	; 0
    dffa:	11 23       	and	r17, r17
    dffc:	49 f0       	breq	.+18     	; 0xe010 <travel_path+0x992>
		__ticks = 1;
    dffe:	ce 01       	movw	r24, r28
    e000:	83 5a       	subi	r24, 0xA3	; 163
    e002:	9f 4f       	sbci	r25, 0xFF	; 255
    e004:	21 e0       	ldi	r18, 0x01	; 1
    e006:	30 e0       	ldi	r19, 0x00	; 0
    e008:	fc 01       	movw	r30, r24
    e00a:	31 83       	std	Z+1, r19	; 0x01
    e00c:	20 83       	st	Z, r18
    e00e:	74 c0       	rjmp	.+232    	; 0xe0f8 <travel_path+0xa7a>
	else if (__tmp > 65535)
    e010:	ce 01       	movw	r24, r28
    e012:	87 5a       	subi	r24, 0xA7	; 167
    e014:	9f 4f       	sbci	r25, 0xFF	; 255
    e016:	11 e0       	ldi	r17, 0x01	; 1
    e018:	fc 01       	movw	r30, r24
    e01a:	60 81       	ld	r22, Z
    e01c:	71 81       	ldd	r23, Z+1	; 0x01
    e01e:	82 81       	ldd	r24, Z+2	; 0x02
    e020:	93 81       	ldd	r25, Z+3	; 0x03
    e022:	20 e0       	ldi	r18, 0x00	; 0
    e024:	3f ef       	ldi	r19, 0xFF	; 255
    e026:	4f e7       	ldi	r20, 0x7F	; 127
    e028:	57 e4       	ldi	r21, 0x47	; 71
    e02a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    e02e:	18 16       	cp	r1, r24
    e030:	0c f0       	brlt	.+2      	; 0xe034 <travel_path+0x9b6>
    e032:	10 e0       	ldi	r17, 0x00	; 0
    e034:	11 23       	and	r17, r17
    e036:	09 f4       	brne	.+2      	; 0xe03a <travel_path+0x9bc>
    e038:	4d c0       	rjmp	.+154    	; 0xe0d4 <travel_path+0xa56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e03a:	ce 01       	movw	r24, r28
    e03c:	8b 5a       	subi	r24, 0xAB	; 171
    e03e:	9f 4f       	sbci	r25, 0xFF	; 255
    e040:	fc 01       	movw	r30, r24
    e042:	60 81       	ld	r22, Z
    e044:	71 81       	ldd	r23, Z+1	; 0x01
    e046:	82 81       	ldd	r24, Z+2	; 0x02
    e048:	93 81       	ldd	r25, Z+3	; 0x03
    e04a:	20 e0       	ldi	r18, 0x00	; 0
    e04c:	30 e0       	ldi	r19, 0x00	; 0
    e04e:	40 e2       	ldi	r20, 0x20	; 32
    e050:	51 e4       	ldi	r21, 0x41	; 65
    e052:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e056:	dc 01       	movw	r26, r24
    e058:	cb 01       	movw	r24, r22
    e05a:	8e 01       	movw	r16, r28
    e05c:	03 5a       	subi	r16, 0xA3	; 163
    e05e:	1f 4f       	sbci	r17, 0xFF	; 255
    e060:	bc 01       	movw	r22, r24
    e062:	cd 01       	movw	r24, r26
    e064:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e068:	dc 01       	movw	r26, r24
    e06a:	cb 01       	movw	r24, r22
    e06c:	f8 01       	movw	r30, r16
    e06e:	91 83       	std	Z+1, r25	; 0x01
    e070:	80 83       	st	Z, r24
    e072:	27 c0       	rjmp	.+78     	; 0xe0c2 <travel_path+0xa44>
    e074:	ce 01       	movw	r24, r28
    e076:	81 5a       	subi	r24, 0xA1	; 161
    e078:	9f 4f       	sbci	r25, 0xFF	; 255
    e07a:	20 e7       	ldi	r18, 0x70	; 112
    e07c:	31 e0       	ldi	r19, 0x01	; 1
    e07e:	fc 01       	movw	r30, r24
    e080:	31 83       	std	Z+1, r19	; 0x01
    e082:	20 83       	st	Z, r18
    e084:	ce 01       	movw	r24, r28
    e086:	81 5a       	subi	r24, 0xA1	; 161
    e088:	9f 4f       	sbci	r25, 0xFF	; 255
    e08a:	fc 01       	movw	r30, r24
    e08c:	80 81       	ld	r24, Z
    e08e:	91 81       	ldd	r25, Z+1	; 0x01
    e090:	8c 01       	movw	r16, r24
    e092:	c8 01       	movw	r24, r16
    e094:	01 97       	sbiw	r24, 0x01	; 1
    e096:	f1 f7       	brne	.-4      	; 0xe094 <travel_path+0xa16>
    e098:	8c 01       	movw	r16, r24
    e09a:	ce 01       	movw	r24, r28
    e09c:	81 5a       	subi	r24, 0xA1	; 161
    e09e:	9f 4f       	sbci	r25, 0xFF	; 255
    e0a0:	fc 01       	movw	r30, r24
    e0a2:	11 83       	std	Z+1, r17	; 0x01
    e0a4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e0a6:	ce 01       	movw	r24, r28
    e0a8:	83 5a       	subi	r24, 0xA3	; 163
    e0aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e0ac:	9e 01       	movw	r18, r28
    e0ae:	23 5a       	subi	r18, 0xA3	; 163
    e0b0:	3f 4f       	sbci	r19, 0xFF	; 255
    e0b2:	f9 01       	movw	r30, r18
    e0b4:	20 81       	ld	r18, Z
    e0b6:	31 81       	ldd	r19, Z+1	; 0x01
    e0b8:	21 50       	subi	r18, 0x01	; 1
    e0ba:	30 40       	sbci	r19, 0x00	; 0
    e0bc:	fc 01       	movw	r30, r24
    e0be:	31 83       	std	Z+1, r19	; 0x01
    e0c0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e0c2:	ce 01       	movw	r24, r28
    e0c4:	83 5a       	subi	r24, 0xA3	; 163
    e0c6:	9f 4f       	sbci	r25, 0xFF	; 255
    e0c8:	fc 01       	movw	r30, r24
    e0ca:	80 81       	ld	r24, Z
    e0cc:	91 81       	ldd	r25, Z+1	; 0x01
    e0ce:	00 97       	sbiw	r24, 0x00	; 0
    e0d0:	89 f6       	brne	.-94     	; 0xe074 <travel_path+0x9f6>
    e0d2:	2f c0       	rjmp	.+94     	; 0xe132 <travel_path+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e0d4:	8e 01       	movw	r16, r28
    e0d6:	03 5a       	subi	r16, 0xA3	; 163
    e0d8:	1f 4f       	sbci	r17, 0xFF	; 255
    e0da:	ce 01       	movw	r24, r28
    e0dc:	87 5a       	subi	r24, 0xA7	; 167
    e0de:	9f 4f       	sbci	r25, 0xFF	; 255
    e0e0:	fc 01       	movw	r30, r24
    e0e2:	60 81       	ld	r22, Z
    e0e4:	71 81       	ldd	r23, Z+1	; 0x01
    e0e6:	82 81       	ldd	r24, Z+2	; 0x02
    e0e8:	93 81       	ldd	r25, Z+3	; 0x03
    e0ea:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e0ee:	dc 01       	movw	r26, r24
    e0f0:	cb 01       	movw	r24, r22
    e0f2:	f8 01       	movw	r30, r16
    e0f4:	91 83       	std	Z+1, r25	; 0x01
    e0f6:	80 83       	st	Z, r24
    e0f8:	ce 01       	movw	r24, r28
    e0fa:	8f 59       	subi	r24, 0x9F	; 159
    e0fc:	9f 4f       	sbci	r25, 0xFF	; 255
    e0fe:	9e 01       	movw	r18, r28
    e100:	23 5a       	subi	r18, 0xA3	; 163
    e102:	3f 4f       	sbci	r19, 0xFF	; 255
    e104:	f9 01       	movw	r30, r18
    e106:	20 81       	ld	r18, Z
    e108:	31 81       	ldd	r19, Z+1	; 0x01
    e10a:	fc 01       	movw	r30, r24
    e10c:	31 83       	std	Z+1, r19	; 0x01
    e10e:	20 83       	st	Z, r18
    e110:	ce 01       	movw	r24, r28
    e112:	8f 59       	subi	r24, 0x9F	; 159
    e114:	9f 4f       	sbci	r25, 0xFF	; 255
    e116:	fc 01       	movw	r30, r24
    e118:	80 81       	ld	r24, Z
    e11a:	91 81       	ldd	r25, Z+1	; 0x01
    e11c:	8c 01       	movw	r16, r24
    e11e:	c8 01       	movw	r24, r16
    e120:	01 97       	sbiw	r24, 0x01	; 1
    e122:	f1 f7       	brne	.-4      	; 0xe120 <travel_path+0xaa2>
    e124:	8c 01       	movw	r16, r24
    e126:	ce 01       	movw	r24, r28
    e128:	8f 59       	subi	r24, 0x9F	; 159
    e12a:	9f 4f       	sbci	r25, 0xFF	; 255
    e12c:	fc 01       	movw	r30, r24
    e12e:	11 83       	std	Z+1, r17	; 0x01
    e130:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_left2();
    e132:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    e136:	9e 01       	movw	r18, r28
    e138:	2d 59       	subi	r18, 0x9D	; 157
    e13a:	3f 4f       	sbci	r19, 0xFF	; 255
    e13c:	80 e0       	ldi	r24, 0x00	; 0
    e13e:	90 e0       	ldi	r25, 0x00	; 0
    e140:	a0 ea       	ldi	r26, 0xA0	; 160
    e142:	b1 e4       	ldi	r27, 0x41	; 65
    e144:	f9 01       	movw	r30, r18
    e146:	80 83       	st	Z, r24
    e148:	91 83       	std	Z+1, r25	; 0x01
    e14a:	a2 83       	std	Z+2, r26	; 0x02
    e14c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e14e:	8e 01       	movw	r16, r28
    e150:	09 59       	subi	r16, 0x99	; 153
    e152:	1f 4f       	sbci	r17, 0xFF	; 255
    e154:	ce 01       	movw	r24, r28
    e156:	8d 59       	subi	r24, 0x9D	; 157
    e158:	9f 4f       	sbci	r25, 0xFF	; 255
    e15a:	fc 01       	movw	r30, r24
    e15c:	60 81       	ld	r22, Z
    e15e:	71 81       	ldd	r23, Z+1	; 0x01
    e160:	82 81       	ldd	r24, Z+2	; 0x02
    e162:	93 81       	ldd	r25, Z+3	; 0x03
    e164:	26 e6       	ldi	r18, 0x66	; 102
    e166:	36 e6       	ldi	r19, 0x66	; 102
    e168:	46 e6       	ldi	r20, 0x66	; 102
    e16a:	55 e4       	ldi	r21, 0x45	; 69
    e16c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e170:	dc 01       	movw	r26, r24
    e172:	cb 01       	movw	r24, r22
    e174:	f8 01       	movw	r30, r16
    e176:	80 83       	st	Z, r24
    e178:	91 83       	std	Z+1, r25	; 0x01
    e17a:	a2 83       	std	Z+2, r26	; 0x02
    e17c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e17e:	ce 01       	movw	r24, r28
    e180:	89 59       	subi	r24, 0x99	; 153
    e182:	9f 4f       	sbci	r25, 0xFF	; 255
    e184:	11 e0       	ldi	r17, 0x01	; 1
    e186:	fc 01       	movw	r30, r24
    e188:	60 81       	ld	r22, Z
    e18a:	71 81       	ldd	r23, Z+1	; 0x01
    e18c:	82 81       	ldd	r24, Z+2	; 0x02
    e18e:	93 81       	ldd	r25, Z+3	; 0x03
    e190:	20 e0       	ldi	r18, 0x00	; 0
    e192:	30 e0       	ldi	r19, 0x00	; 0
    e194:	40 e8       	ldi	r20, 0x80	; 128
    e196:	5f e3       	ldi	r21, 0x3F	; 63
    e198:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    e19c:	88 23       	and	r24, r24
    e19e:	0c f0       	brlt	.+2      	; 0xe1a2 <travel_path+0xb24>
    e1a0:	10 e0       	ldi	r17, 0x00	; 0
    e1a2:	11 23       	and	r17, r17
    e1a4:	49 f0       	breq	.+18     	; 0xe1b8 <travel_path+0xb3a>
		__ticks = 1;
    e1a6:	ce 01       	movw	r24, r28
    e1a8:	85 59       	subi	r24, 0x95	; 149
    e1aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e1ac:	21 e0       	ldi	r18, 0x01	; 1
    e1ae:	30 e0       	ldi	r19, 0x00	; 0
    e1b0:	fc 01       	movw	r30, r24
    e1b2:	31 83       	std	Z+1, r19	; 0x01
    e1b4:	20 83       	st	Z, r18
    e1b6:	74 c0       	rjmp	.+232    	; 0xe2a0 <travel_path+0xc22>
	else if (__tmp > 65535)
    e1b8:	ce 01       	movw	r24, r28
    e1ba:	89 59       	subi	r24, 0x99	; 153
    e1bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e1be:	11 e0       	ldi	r17, 0x01	; 1
    e1c0:	fc 01       	movw	r30, r24
    e1c2:	60 81       	ld	r22, Z
    e1c4:	71 81       	ldd	r23, Z+1	; 0x01
    e1c6:	82 81       	ldd	r24, Z+2	; 0x02
    e1c8:	93 81       	ldd	r25, Z+3	; 0x03
    e1ca:	20 e0       	ldi	r18, 0x00	; 0
    e1cc:	3f ef       	ldi	r19, 0xFF	; 255
    e1ce:	4f e7       	ldi	r20, 0x7F	; 127
    e1d0:	57 e4       	ldi	r21, 0x47	; 71
    e1d2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    e1d6:	18 16       	cp	r1, r24
    e1d8:	0c f0       	brlt	.+2      	; 0xe1dc <travel_path+0xb5e>
    e1da:	10 e0       	ldi	r17, 0x00	; 0
    e1dc:	11 23       	and	r17, r17
    e1de:	09 f4       	brne	.+2      	; 0xe1e2 <travel_path+0xb64>
    e1e0:	4d c0       	rjmp	.+154    	; 0xe27c <travel_path+0xbfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e1e2:	ce 01       	movw	r24, r28
    e1e4:	8d 59       	subi	r24, 0x9D	; 157
    e1e6:	9f 4f       	sbci	r25, 0xFF	; 255
    e1e8:	fc 01       	movw	r30, r24
    e1ea:	60 81       	ld	r22, Z
    e1ec:	71 81       	ldd	r23, Z+1	; 0x01
    e1ee:	82 81       	ldd	r24, Z+2	; 0x02
    e1f0:	93 81       	ldd	r25, Z+3	; 0x03
    e1f2:	20 e0       	ldi	r18, 0x00	; 0
    e1f4:	30 e0       	ldi	r19, 0x00	; 0
    e1f6:	40 e2       	ldi	r20, 0x20	; 32
    e1f8:	51 e4       	ldi	r21, 0x41	; 65
    e1fa:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e1fe:	dc 01       	movw	r26, r24
    e200:	cb 01       	movw	r24, r22
    e202:	8e 01       	movw	r16, r28
    e204:	05 59       	subi	r16, 0x95	; 149
    e206:	1f 4f       	sbci	r17, 0xFF	; 255
    e208:	bc 01       	movw	r22, r24
    e20a:	cd 01       	movw	r24, r26
    e20c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e210:	dc 01       	movw	r26, r24
    e212:	cb 01       	movw	r24, r22
    e214:	f8 01       	movw	r30, r16
    e216:	91 83       	std	Z+1, r25	; 0x01
    e218:	80 83       	st	Z, r24
    e21a:	27 c0       	rjmp	.+78     	; 0xe26a <travel_path+0xbec>
    e21c:	ce 01       	movw	r24, r28
    e21e:	83 59       	subi	r24, 0x93	; 147
    e220:	9f 4f       	sbci	r25, 0xFF	; 255
    e222:	20 e7       	ldi	r18, 0x70	; 112
    e224:	31 e0       	ldi	r19, 0x01	; 1
    e226:	fc 01       	movw	r30, r24
    e228:	31 83       	std	Z+1, r19	; 0x01
    e22a:	20 83       	st	Z, r18
    e22c:	ce 01       	movw	r24, r28
    e22e:	83 59       	subi	r24, 0x93	; 147
    e230:	9f 4f       	sbci	r25, 0xFF	; 255
    e232:	fc 01       	movw	r30, r24
    e234:	80 81       	ld	r24, Z
    e236:	91 81       	ldd	r25, Z+1	; 0x01
    e238:	8c 01       	movw	r16, r24
    e23a:	c8 01       	movw	r24, r16
    e23c:	01 97       	sbiw	r24, 0x01	; 1
    e23e:	f1 f7       	brne	.-4      	; 0xe23c <travel_path+0xbbe>
    e240:	8c 01       	movw	r16, r24
    e242:	ce 01       	movw	r24, r28
    e244:	83 59       	subi	r24, 0x93	; 147
    e246:	9f 4f       	sbci	r25, 0xFF	; 255
    e248:	fc 01       	movw	r30, r24
    e24a:	11 83       	std	Z+1, r17	; 0x01
    e24c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e24e:	ce 01       	movw	r24, r28
    e250:	85 59       	subi	r24, 0x95	; 149
    e252:	9f 4f       	sbci	r25, 0xFF	; 255
    e254:	9e 01       	movw	r18, r28
    e256:	25 59       	subi	r18, 0x95	; 149
    e258:	3f 4f       	sbci	r19, 0xFF	; 255
    e25a:	f9 01       	movw	r30, r18
    e25c:	20 81       	ld	r18, Z
    e25e:	31 81       	ldd	r19, Z+1	; 0x01
    e260:	21 50       	subi	r18, 0x01	; 1
    e262:	30 40       	sbci	r19, 0x00	; 0
    e264:	fc 01       	movw	r30, r24
    e266:	31 83       	std	Z+1, r19	; 0x01
    e268:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e26a:	ce 01       	movw	r24, r28
    e26c:	85 59       	subi	r24, 0x95	; 149
    e26e:	9f 4f       	sbci	r25, 0xFF	; 255
    e270:	fc 01       	movw	r30, r24
    e272:	80 81       	ld	r24, Z
    e274:	91 81       	ldd	r25, Z+1	; 0x01
    e276:	00 97       	sbiw	r24, 0x00	; 0
    e278:	89 f6       	brne	.-94     	; 0xe21c <travel_path+0xb9e>
    e27a:	04 c1       	rjmp	.+520    	; 0xe484 <travel_path+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e27c:	8e 01       	movw	r16, r28
    e27e:	05 59       	subi	r16, 0x95	; 149
    e280:	1f 4f       	sbci	r17, 0xFF	; 255
    e282:	ce 01       	movw	r24, r28
    e284:	89 59       	subi	r24, 0x99	; 153
    e286:	9f 4f       	sbci	r25, 0xFF	; 255
    e288:	fc 01       	movw	r30, r24
    e28a:	60 81       	ld	r22, Z
    e28c:	71 81       	ldd	r23, Z+1	; 0x01
    e28e:	82 81       	ldd	r24, Z+2	; 0x02
    e290:	93 81       	ldd	r25, Z+3	; 0x03
    e292:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e296:	dc 01       	movw	r26, r24
    e298:	cb 01       	movw	r24, r22
    e29a:	f8 01       	movw	r30, r16
    e29c:	91 83       	std	Z+1, r25	; 0x01
    e29e:	80 83       	st	Z, r24
    e2a0:	ce 01       	movw	r24, r28
    e2a2:	81 59       	subi	r24, 0x91	; 145
    e2a4:	9f 4f       	sbci	r25, 0xFF	; 255
    e2a6:	9e 01       	movw	r18, r28
    e2a8:	25 59       	subi	r18, 0x95	; 149
    e2aa:	3f 4f       	sbci	r19, 0xFF	; 255
    e2ac:	f9 01       	movw	r30, r18
    e2ae:	20 81       	ld	r18, Z
    e2b0:	31 81       	ldd	r19, Z+1	; 0x01
    e2b2:	fc 01       	movw	r30, r24
    e2b4:	31 83       	std	Z+1, r19	; 0x01
    e2b6:	20 83       	st	Z, r18
    e2b8:	ce 01       	movw	r24, r28
    e2ba:	81 59       	subi	r24, 0x91	; 145
    e2bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e2be:	fc 01       	movw	r30, r24
    e2c0:	80 81       	ld	r24, Z
    e2c2:	91 81       	ldd	r25, Z+1	; 0x01
    e2c4:	8c 01       	movw	r16, r24
    e2c6:	c8 01       	movw	r24, r16
    e2c8:	01 97       	sbiw	r24, 0x01	; 1
    e2ca:	f1 f7       	brne	.-4      	; 0xe2c8 <travel_path+0xc4a>
    e2cc:	8c 01       	movw	r16, r24
    e2ce:	ce 01       	movw	r24, r28
    e2d0:	81 59       	subi	r24, 0x91	; 145
    e2d2:	9f 4f       	sbci	r25, 0xFF	; 255
    e2d4:	fc 01       	movw	r30, r24
    e2d6:	11 83       	std	Z+1, r17	; 0x01
    e2d8:	00 83       	st	Z, r16
    e2da:	d4 c0       	rjmp	.+424    	; 0xe484 <travel_path+0xe06>
				_delay_ms(20);
			}

			else
			{
				stop();
    e2dc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    e2e0:	9e 01       	movw	r18, r28
    e2e2:	2f 58       	subi	r18, 0x8F	; 143
    e2e4:	3f 4f       	sbci	r19, 0xFF	; 255
    e2e6:	80 e0       	ldi	r24, 0x00	; 0
    e2e8:	90 e0       	ldi	r25, 0x00	; 0
    e2ea:	a0 ea       	ldi	r26, 0xA0	; 160
    e2ec:	b1 e4       	ldi	r27, 0x41	; 65
    e2ee:	f9 01       	movw	r30, r18
    e2f0:	80 83       	st	Z, r24
    e2f2:	91 83       	std	Z+1, r25	; 0x01
    e2f4:	a2 83       	std	Z+2, r26	; 0x02
    e2f6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e2f8:	8e 01       	movw	r16, r28
    e2fa:	0b 58       	subi	r16, 0x8B	; 139
    e2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    e2fe:	ce 01       	movw	r24, r28
    e300:	8f 58       	subi	r24, 0x8F	; 143
    e302:	9f 4f       	sbci	r25, 0xFF	; 255
    e304:	fc 01       	movw	r30, r24
    e306:	60 81       	ld	r22, Z
    e308:	71 81       	ldd	r23, Z+1	; 0x01
    e30a:	82 81       	ldd	r24, Z+2	; 0x02
    e30c:	93 81       	ldd	r25, Z+3	; 0x03
    e30e:	26 e6       	ldi	r18, 0x66	; 102
    e310:	36 e6       	ldi	r19, 0x66	; 102
    e312:	46 e6       	ldi	r20, 0x66	; 102
    e314:	55 e4       	ldi	r21, 0x45	; 69
    e316:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e31a:	dc 01       	movw	r26, r24
    e31c:	cb 01       	movw	r24, r22
    e31e:	f8 01       	movw	r30, r16
    e320:	80 83       	st	Z, r24
    e322:	91 83       	std	Z+1, r25	; 0x01
    e324:	a2 83       	std	Z+2, r26	; 0x02
    e326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e328:	ce 01       	movw	r24, r28
    e32a:	8b 58       	subi	r24, 0x8B	; 139
    e32c:	9f 4f       	sbci	r25, 0xFF	; 255
    e32e:	11 e0       	ldi	r17, 0x01	; 1
    e330:	fc 01       	movw	r30, r24
    e332:	60 81       	ld	r22, Z
    e334:	71 81       	ldd	r23, Z+1	; 0x01
    e336:	82 81       	ldd	r24, Z+2	; 0x02
    e338:	93 81       	ldd	r25, Z+3	; 0x03
    e33a:	20 e0       	ldi	r18, 0x00	; 0
    e33c:	30 e0       	ldi	r19, 0x00	; 0
    e33e:	40 e8       	ldi	r20, 0x80	; 128
    e340:	5f e3       	ldi	r21, 0x3F	; 63
    e342:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    e346:	88 23       	and	r24, r24
    e348:	0c f0       	brlt	.+2      	; 0xe34c <travel_path+0xcce>
    e34a:	10 e0       	ldi	r17, 0x00	; 0
    e34c:	11 23       	and	r17, r17
    e34e:	49 f0       	breq	.+18     	; 0xe362 <travel_path+0xce4>
		__ticks = 1;
    e350:	ce 01       	movw	r24, r28
    e352:	87 58       	subi	r24, 0x87	; 135
    e354:	9f 4f       	sbci	r25, 0xFF	; 255
    e356:	21 e0       	ldi	r18, 0x01	; 1
    e358:	30 e0       	ldi	r19, 0x00	; 0
    e35a:	fc 01       	movw	r30, r24
    e35c:	31 83       	std	Z+1, r19	; 0x01
    e35e:	20 83       	st	Z, r18
    e360:	74 c0       	rjmp	.+232    	; 0xe44a <travel_path+0xdcc>
	else if (__tmp > 65535)
    e362:	ce 01       	movw	r24, r28
    e364:	8b 58       	subi	r24, 0x8B	; 139
    e366:	9f 4f       	sbci	r25, 0xFF	; 255
    e368:	11 e0       	ldi	r17, 0x01	; 1
    e36a:	fc 01       	movw	r30, r24
    e36c:	60 81       	ld	r22, Z
    e36e:	71 81       	ldd	r23, Z+1	; 0x01
    e370:	82 81       	ldd	r24, Z+2	; 0x02
    e372:	93 81       	ldd	r25, Z+3	; 0x03
    e374:	20 e0       	ldi	r18, 0x00	; 0
    e376:	3f ef       	ldi	r19, 0xFF	; 255
    e378:	4f e7       	ldi	r20, 0x7F	; 127
    e37a:	57 e4       	ldi	r21, 0x47	; 71
    e37c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    e380:	18 16       	cp	r1, r24
    e382:	0c f0       	brlt	.+2      	; 0xe386 <travel_path+0xd08>
    e384:	10 e0       	ldi	r17, 0x00	; 0
    e386:	11 23       	and	r17, r17
    e388:	09 f4       	brne	.+2      	; 0xe38c <travel_path+0xd0e>
    e38a:	4d c0       	rjmp	.+154    	; 0xe426 <travel_path+0xda8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e38c:	ce 01       	movw	r24, r28
    e38e:	8f 58       	subi	r24, 0x8F	; 143
    e390:	9f 4f       	sbci	r25, 0xFF	; 255
    e392:	fc 01       	movw	r30, r24
    e394:	60 81       	ld	r22, Z
    e396:	71 81       	ldd	r23, Z+1	; 0x01
    e398:	82 81       	ldd	r24, Z+2	; 0x02
    e39a:	93 81       	ldd	r25, Z+3	; 0x03
    e39c:	20 e0       	ldi	r18, 0x00	; 0
    e39e:	30 e0       	ldi	r19, 0x00	; 0
    e3a0:	40 e2       	ldi	r20, 0x20	; 32
    e3a2:	51 e4       	ldi	r21, 0x41	; 65
    e3a4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e3a8:	dc 01       	movw	r26, r24
    e3aa:	cb 01       	movw	r24, r22
    e3ac:	8e 01       	movw	r16, r28
    e3ae:	07 58       	subi	r16, 0x87	; 135
    e3b0:	1f 4f       	sbci	r17, 0xFF	; 255
    e3b2:	bc 01       	movw	r22, r24
    e3b4:	cd 01       	movw	r24, r26
    e3b6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e3ba:	dc 01       	movw	r26, r24
    e3bc:	cb 01       	movw	r24, r22
    e3be:	f8 01       	movw	r30, r16
    e3c0:	91 83       	std	Z+1, r25	; 0x01
    e3c2:	80 83       	st	Z, r24
    e3c4:	27 c0       	rjmp	.+78     	; 0xe414 <travel_path+0xd96>
    e3c6:	ce 01       	movw	r24, r28
    e3c8:	85 58       	subi	r24, 0x85	; 133
    e3ca:	9f 4f       	sbci	r25, 0xFF	; 255
    e3cc:	20 e7       	ldi	r18, 0x70	; 112
    e3ce:	31 e0       	ldi	r19, 0x01	; 1
    e3d0:	fc 01       	movw	r30, r24
    e3d2:	31 83       	std	Z+1, r19	; 0x01
    e3d4:	20 83       	st	Z, r18
    e3d6:	ce 01       	movw	r24, r28
    e3d8:	85 58       	subi	r24, 0x85	; 133
    e3da:	9f 4f       	sbci	r25, 0xFF	; 255
    e3dc:	fc 01       	movw	r30, r24
    e3de:	80 81       	ld	r24, Z
    e3e0:	91 81       	ldd	r25, Z+1	; 0x01
    e3e2:	8c 01       	movw	r16, r24
    e3e4:	c8 01       	movw	r24, r16
    e3e6:	01 97       	sbiw	r24, 0x01	; 1
    e3e8:	f1 f7       	brne	.-4      	; 0xe3e6 <travel_path+0xd68>
    e3ea:	8c 01       	movw	r16, r24
    e3ec:	ce 01       	movw	r24, r28
    e3ee:	85 58       	subi	r24, 0x85	; 133
    e3f0:	9f 4f       	sbci	r25, 0xFF	; 255
    e3f2:	fc 01       	movw	r30, r24
    e3f4:	11 83       	std	Z+1, r17	; 0x01
    e3f6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e3f8:	ce 01       	movw	r24, r28
    e3fa:	87 58       	subi	r24, 0x87	; 135
    e3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    e3fe:	9e 01       	movw	r18, r28
    e400:	27 58       	subi	r18, 0x87	; 135
    e402:	3f 4f       	sbci	r19, 0xFF	; 255
    e404:	f9 01       	movw	r30, r18
    e406:	20 81       	ld	r18, Z
    e408:	31 81       	ldd	r19, Z+1	; 0x01
    e40a:	21 50       	subi	r18, 0x01	; 1
    e40c:	30 40       	sbci	r19, 0x00	; 0
    e40e:	fc 01       	movw	r30, r24
    e410:	31 83       	std	Z+1, r19	; 0x01
    e412:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e414:	ce 01       	movw	r24, r28
    e416:	87 58       	subi	r24, 0x87	; 135
    e418:	9f 4f       	sbci	r25, 0xFF	; 255
    e41a:	fc 01       	movw	r30, r24
    e41c:	80 81       	ld	r24, Z
    e41e:	91 81       	ldd	r25, Z+1	; 0x01
    e420:	00 97       	sbiw	r24, 0x00	; 0
    e422:	89 f6       	brne	.-94     	; 0xe3c6 <travel_path+0xd48>
    e424:	2f c0       	rjmp	.+94     	; 0xe484 <travel_path+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e426:	8e 01       	movw	r16, r28
    e428:	07 58       	subi	r16, 0x87	; 135
    e42a:	1f 4f       	sbci	r17, 0xFF	; 255
    e42c:	ce 01       	movw	r24, r28
    e42e:	8b 58       	subi	r24, 0x8B	; 139
    e430:	9f 4f       	sbci	r25, 0xFF	; 255
    e432:	fc 01       	movw	r30, r24
    e434:	60 81       	ld	r22, Z
    e436:	71 81       	ldd	r23, Z+1	; 0x01
    e438:	82 81       	ldd	r24, Z+2	; 0x02
    e43a:	93 81       	ldd	r25, Z+3	; 0x03
    e43c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e440:	dc 01       	movw	r26, r24
    e442:	cb 01       	movw	r24, r22
    e444:	f8 01       	movw	r30, r16
    e446:	91 83       	std	Z+1, r25	; 0x01
    e448:	80 83       	st	Z, r24
    e44a:	ce 01       	movw	r24, r28
    e44c:	83 58       	subi	r24, 0x83	; 131
    e44e:	9f 4f       	sbci	r25, 0xFF	; 255
    e450:	9e 01       	movw	r18, r28
    e452:	27 58       	subi	r18, 0x87	; 135
    e454:	3f 4f       	sbci	r19, 0xFF	; 255
    e456:	f9 01       	movw	r30, r18
    e458:	20 81       	ld	r18, Z
    e45a:	31 81       	ldd	r19, Z+1	; 0x01
    e45c:	fc 01       	movw	r30, r24
    e45e:	31 83       	std	Z+1, r19	; 0x01
    e460:	20 83       	st	Z, r18
    e462:	ce 01       	movw	r24, r28
    e464:	83 58       	subi	r24, 0x83	; 131
    e466:	9f 4f       	sbci	r25, 0xFF	; 255
    e468:	fc 01       	movw	r30, r24
    e46a:	80 81       	ld	r24, Z
    e46c:	91 81       	ldd	r25, Z+1	; 0x01
    e46e:	8c 01       	movw	r16, r24
    e470:	c8 01       	movw	r24, r16
    e472:	01 97       	sbiw	r24, 0x01	; 1
    e474:	f1 f7       	brne	.-4      	; 0xe472 <travel_path+0xdf4>
    e476:	8c 01       	movw	r16, r24
    e478:	ce 01       	movw	r24, r28
    e47a:	83 58       	subi	r24, 0x83	; 131
    e47c:	9f 4f       	sbci	r25, 0xFF	; 255
    e47e:	fc 01       	movw	r30, r24
    e480:	11 83       	std	Z+1, r17	; 0x01
    e482:	00 83       	st	Z, r16
				_delay_ms(20);
			}
			node++;
    e484:	80 91 71 03 	lds	r24, 0x0371
    e488:	90 91 72 03 	lds	r25, 0x0372
    e48c:	01 96       	adiw	r24, 0x01	; 1
    e48e:	90 93 72 03 	sts	0x0372, r25
    e492:	80 93 71 03 	sts	0x0371, r24
			pick_drop(master_path[node]);
    e496:	80 91 71 03 	lds	r24, 0x0371
    e49a:	90 91 72 03 	lds	r25, 0x0372
    e49e:	8b 58       	subi	r24, 0x8B	; 139
    e4a0:	9c 4f       	sbci	r25, 0xFC	; 252
    e4a2:	fc 01       	movw	r30, r24
    e4a4:	80 81       	ld	r24, Z
    e4a6:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    e4aa:	80 91 71 03 	lds	r24, 0x0371
    e4ae:	90 91 72 03 	lds	r25, 0x0372
    e4b2:	01 96       	adiw	r24, 0x01	; 1
    e4b4:	90 93 72 03 	sts	0x0372, r25
    e4b8:	80 93 71 03 	sts	0x0371, r24
			travel_path(master_path[node]);
    e4bc:	80 91 71 03 	lds	r24, 0x0371
    e4c0:	90 91 72 03 	lds	r25, 0x0372
    e4c4:	8b 58       	subi	r24, 0x8B	; 139
    e4c6:	9c 4f       	sbci	r25, 0xFC	; 252
    e4c8:	fc 01       	movw	r30, r24
    e4ca:	80 81       	ld	r24, Z
    e4cc:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
    e4d0:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
		}
		else if(master_path[node+1]=='D')//mod
    e4d4:	80 91 71 03 	lds	r24, 0x0371
    e4d8:	90 91 72 03 	lds	r25, 0x0372
    e4dc:	01 96       	adiw	r24, 0x01	; 1
    e4de:	8b 58       	subi	r24, 0x8B	; 139
    e4e0:	9c 4f       	sbci	r25, 0xFC	; 252
    e4e2:	fc 01       	movw	r30, r24
    e4e4:	80 81       	ld	r24, Z
    e4e6:	84 34       	cpi	r24, 0x44	; 68
    e4e8:	09 f0       	breq	.+2      	; 0xe4ec <travel_path+0xe6e>
    e4ea:	fc c0       	rjmp	.+504    	; 0xe6e4 <travel_path+0x1066>
		{
			correct_right();
    e4ec:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    e4f0:	9e 01       	movw	r18, r28
    e4f2:	21 58       	subi	r18, 0x81	; 129
    e4f4:	3f 4f       	sbci	r19, 0xFF	; 255
    e4f6:	80 e0       	ldi	r24, 0x00	; 0
    e4f8:	90 e0       	ldi	r25, 0x00	; 0
    e4fa:	a0 ea       	ldi	r26, 0xA0	; 160
    e4fc:	b1 e4       	ldi	r27, 0x41	; 65
    e4fe:	f9 01       	movw	r30, r18
    e500:	80 83       	st	Z, r24
    e502:	91 83       	std	Z+1, r25	; 0x01
    e504:	a2 83       	std	Z+2, r26	; 0x02
    e506:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e508:	8e 01       	movw	r16, r28
    e50a:	0d 57       	subi	r16, 0x7D	; 125
    e50c:	1f 4f       	sbci	r17, 0xFF	; 255
    e50e:	ce 01       	movw	r24, r28
    e510:	81 58       	subi	r24, 0x81	; 129
    e512:	9f 4f       	sbci	r25, 0xFF	; 255
    e514:	fc 01       	movw	r30, r24
    e516:	60 81       	ld	r22, Z
    e518:	71 81       	ldd	r23, Z+1	; 0x01
    e51a:	82 81       	ldd	r24, Z+2	; 0x02
    e51c:	93 81       	ldd	r25, Z+3	; 0x03
    e51e:	26 e6       	ldi	r18, 0x66	; 102
    e520:	36 e6       	ldi	r19, 0x66	; 102
    e522:	46 e6       	ldi	r20, 0x66	; 102
    e524:	55 e4       	ldi	r21, 0x45	; 69
    e526:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e52a:	dc 01       	movw	r26, r24
    e52c:	cb 01       	movw	r24, r22
    e52e:	f8 01       	movw	r30, r16
    e530:	80 83       	st	Z, r24
    e532:	91 83       	std	Z+1, r25	; 0x01
    e534:	a2 83       	std	Z+2, r26	; 0x02
    e536:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e538:	ce 01       	movw	r24, r28
    e53a:	8d 57       	subi	r24, 0x7D	; 125
    e53c:	9f 4f       	sbci	r25, 0xFF	; 255
    e53e:	11 e0       	ldi	r17, 0x01	; 1
    e540:	fc 01       	movw	r30, r24
    e542:	60 81       	ld	r22, Z
    e544:	71 81       	ldd	r23, Z+1	; 0x01
    e546:	82 81       	ldd	r24, Z+2	; 0x02
    e548:	93 81       	ldd	r25, Z+3	; 0x03
    e54a:	20 e0       	ldi	r18, 0x00	; 0
    e54c:	30 e0       	ldi	r19, 0x00	; 0
    e54e:	40 e8       	ldi	r20, 0x80	; 128
    e550:	5f e3       	ldi	r21, 0x3F	; 63
    e552:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    e556:	88 23       	and	r24, r24
    e558:	0c f0       	brlt	.+2      	; 0xe55c <travel_path+0xede>
    e55a:	10 e0       	ldi	r17, 0x00	; 0
    e55c:	11 23       	and	r17, r17
    e55e:	49 f0       	breq	.+18     	; 0xe572 <travel_path+0xef4>
		__ticks = 1;
    e560:	ce 01       	movw	r24, r28
    e562:	89 57       	subi	r24, 0x79	; 121
    e564:	9f 4f       	sbci	r25, 0xFF	; 255
    e566:	21 e0       	ldi	r18, 0x01	; 1
    e568:	30 e0       	ldi	r19, 0x00	; 0
    e56a:	fc 01       	movw	r30, r24
    e56c:	31 83       	std	Z+1, r19	; 0x01
    e56e:	20 83       	st	Z, r18
    e570:	74 c0       	rjmp	.+232    	; 0xe65a <travel_path+0xfdc>
	else if (__tmp > 65535)
    e572:	ce 01       	movw	r24, r28
    e574:	8d 57       	subi	r24, 0x7D	; 125
    e576:	9f 4f       	sbci	r25, 0xFF	; 255
    e578:	11 e0       	ldi	r17, 0x01	; 1
    e57a:	fc 01       	movw	r30, r24
    e57c:	60 81       	ld	r22, Z
    e57e:	71 81       	ldd	r23, Z+1	; 0x01
    e580:	82 81       	ldd	r24, Z+2	; 0x02
    e582:	93 81       	ldd	r25, Z+3	; 0x03
    e584:	20 e0       	ldi	r18, 0x00	; 0
    e586:	3f ef       	ldi	r19, 0xFF	; 255
    e588:	4f e7       	ldi	r20, 0x7F	; 127
    e58a:	57 e4       	ldi	r21, 0x47	; 71
    e58c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    e590:	18 16       	cp	r1, r24
    e592:	0c f0       	brlt	.+2      	; 0xe596 <travel_path+0xf18>
    e594:	10 e0       	ldi	r17, 0x00	; 0
    e596:	11 23       	and	r17, r17
    e598:	09 f4       	brne	.+2      	; 0xe59c <travel_path+0xf1e>
    e59a:	4d c0       	rjmp	.+154    	; 0xe636 <travel_path+0xfb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e59c:	ce 01       	movw	r24, r28
    e59e:	81 58       	subi	r24, 0x81	; 129
    e5a0:	9f 4f       	sbci	r25, 0xFF	; 255
    e5a2:	fc 01       	movw	r30, r24
    e5a4:	60 81       	ld	r22, Z
    e5a6:	71 81       	ldd	r23, Z+1	; 0x01
    e5a8:	82 81       	ldd	r24, Z+2	; 0x02
    e5aa:	93 81       	ldd	r25, Z+3	; 0x03
    e5ac:	20 e0       	ldi	r18, 0x00	; 0
    e5ae:	30 e0       	ldi	r19, 0x00	; 0
    e5b0:	40 e2       	ldi	r20, 0x20	; 32
    e5b2:	51 e4       	ldi	r21, 0x41	; 65
    e5b4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e5b8:	dc 01       	movw	r26, r24
    e5ba:	cb 01       	movw	r24, r22
    e5bc:	8e 01       	movw	r16, r28
    e5be:	09 57       	subi	r16, 0x79	; 121
    e5c0:	1f 4f       	sbci	r17, 0xFF	; 255
    e5c2:	bc 01       	movw	r22, r24
    e5c4:	cd 01       	movw	r24, r26
    e5c6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e5ca:	dc 01       	movw	r26, r24
    e5cc:	cb 01       	movw	r24, r22
    e5ce:	f8 01       	movw	r30, r16
    e5d0:	91 83       	std	Z+1, r25	; 0x01
    e5d2:	80 83       	st	Z, r24
    e5d4:	27 c0       	rjmp	.+78     	; 0xe624 <travel_path+0xfa6>
    e5d6:	ce 01       	movw	r24, r28
    e5d8:	87 57       	subi	r24, 0x77	; 119
    e5da:	9f 4f       	sbci	r25, 0xFF	; 255
    e5dc:	20 e7       	ldi	r18, 0x70	; 112
    e5de:	31 e0       	ldi	r19, 0x01	; 1
    e5e0:	fc 01       	movw	r30, r24
    e5e2:	31 83       	std	Z+1, r19	; 0x01
    e5e4:	20 83       	st	Z, r18
    e5e6:	ce 01       	movw	r24, r28
    e5e8:	87 57       	subi	r24, 0x77	; 119
    e5ea:	9f 4f       	sbci	r25, 0xFF	; 255
    e5ec:	fc 01       	movw	r30, r24
    e5ee:	80 81       	ld	r24, Z
    e5f0:	91 81       	ldd	r25, Z+1	; 0x01
    e5f2:	8c 01       	movw	r16, r24
    e5f4:	c8 01       	movw	r24, r16
    e5f6:	01 97       	sbiw	r24, 0x01	; 1
    e5f8:	f1 f7       	brne	.-4      	; 0xe5f6 <travel_path+0xf78>
    e5fa:	8c 01       	movw	r16, r24
    e5fc:	ce 01       	movw	r24, r28
    e5fe:	87 57       	subi	r24, 0x77	; 119
    e600:	9f 4f       	sbci	r25, 0xFF	; 255
    e602:	fc 01       	movw	r30, r24
    e604:	11 83       	std	Z+1, r17	; 0x01
    e606:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e608:	ce 01       	movw	r24, r28
    e60a:	89 57       	subi	r24, 0x79	; 121
    e60c:	9f 4f       	sbci	r25, 0xFF	; 255
    e60e:	9e 01       	movw	r18, r28
    e610:	29 57       	subi	r18, 0x79	; 121
    e612:	3f 4f       	sbci	r19, 0xFF	; 255
    e614:	f9 01       	movw	r30, r18
    e616:	20 81       	ld	r18, Z
    e618:	31 81       	ldd	r19, Z+1	; 0x01
    e61a:	21 50       	subi	r18, 0x01	; 1
    e61c:	30 40       	sbci	r19, 0x00	; 0
    e61e:	fc 01       	movw	r30, r24
    e620:	31 83       	std	Z+1, r19	; 0x01
    e622:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e624:	ce 01       	movw	r24, r28
    e626:	89 57       	subi	r24, 0x79	; 121
    e628:	9f 4f       	sbci	r25, 0xFF	; 255
    e62a:	fc 01       	movw	r30, r24
    e62c:	80 81       	ld	r24, Z
    e62e:	91 81       	ldd	r25, Z+1	; 0x01
    e630:	00 97       	sbiw	r24, 0x00	; 0
    e632:	89 f6       	brne	.-94     	; 0xe5d6 <travel_path+0xf58>
    e634:	2f c0       	rjmp	.+94     	; 0xe694 <travel_path+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e636:	8e 01       	movw	r16, r28
    e638:	09 57       	subi	r16, 0x79	; 121
    e63a:	1f 4f       	sbci	r17, 0xFF	; 255
    e63c:	ce 01       	movw	r24, r28
    e63e:	8d 57       	subi	r24, 0x7D	; 125
    e640:	9f 4f       	sbci	r25, 0xFF	; 255
    e642:	fc 01       	movw	r30, r24
    e644:	60 81       	ld	r22, Z
    e646:	71 81       	ldd	r23, Z+1	; 0x01
    e648:	82 81       	ldd	r24, Z+2	; 0x02
    e64a:	93 81       	ldd	r25, Z+3	; 0x03
    e64c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e650:	dc 01       	movw	r26, r24
    e652:	cb 01       	movw	r24, r22
    e654:	f8 01       	movw	r30, r16
    e656:	91 83       	std	Z+1, r25	; 0x01
    e658:	80 83       	st	Z, r24
    e65a:	ce 01       	movw	r24, r28
    e65c:	85 57       	subi	r24, 0x75	; 117
    e65e:	9f 4f       	sbci	r25, 0xFF	; 255
    e660:	9e 01       	movw	r18, r28
    e662:	29 57       	subi	r18, 0x79	; 121
    e664:	3f 4f       	sbci	r19, 0xFF	; 255
    e666:	f9 01       	movw	r30, r18
    e668:	20 81       	ld	r18, Z
    e66a:	31 81       	ldd	r19, Z+1	; 0x01
    e66c:	fc 01       	movw	r30, r24
    e66e:	31 83       	std	Z+1, r19	; 0x01
    e670:	20 83       	st	Z, r18
    e672:	ce 01       	movw	r24, r28
    e674:	85 57       	subi	r24, 0x75	; 117
    e676:	9f 4f       	sbci	r25, 0xFF	; 255
    e678:	fc 01       	movw	r30, r24
    e67a:	80 81       	ld	r24, Z
    e67c:	91 81       	ldd	r25, Z+1	; 0x01
    e67e:	8c 01       	movw	r16, r24
    e680:	c8 01       	movw	r24, r16
    e682:	01 97       	sbiw	r24, 0x01	; 1
    e684:	f1 f7       	brne	.-4      	; 0xe682 <travel_path+0x1004>
    e686:	8c 01       	movw	r16, r24
    e688:	ce 01       	movw	r24, r28
    e68a:	85 57       	subi	r24, 0x75	; 117
    e68c:	9f 4f       	sbci	r25, 0xFF	; 255
    e68e:	fc 01       	movw	r30, r24
    e690:	11 83       	std	Z+1, r17	; 0x01
    e692:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
    e694:	80 91 71 03 	lds	r24, 0x0371
    e698:	90 91 72 03 	lds	r25, 0x0372
    e69c:	01 96       	adiw	r24, 0x01	; 1
    e69e:	90 93 72 03 	sts	0x0372, r25
    e6a2:	80 93 71 03 	sts	0x0371, r24
			pick_drop(master_path[node]);
    e6a6:	80 91 71 03 	lds	r24, 0x0371
    e6aa:	90 91 72 03 	lds	r25, 0x0372
    e6ae:	8b 58       	subi	r24, 0x8B	; 139
    e6b0:	9c 4f       	sbci	r25, 0xFC	; 252
    e6b2:	fc 01       	movw	r30, r24
    e6b4:	80 81       	ld	r24, Z
    e6b6:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
    e6ba:	80 91 71 03 	lds	r24, 0x0371
    e6be:	90 91 72 03 	lds	r25, 0x0372
    e6c2:	01 96       	adiw	r24, 0x01	; 1
    e6c4:	90 93 72 03 	sts	0x0372, r25
    e6c8:	80 93 71 03 	sts	0x0371, r24
			travel_path(master_path[node]);
    e6cc:	80 91 71 03 	lds	r24, 0x0371
    e6d0:	90 91 72 03 	lds	r25, 0x0372
    e6d4:	8b 58       	subi	r24, 0x8B	; 139
    e6d6:	9c 4f       	sbci	r25, 0xFC	; 252
    e6d8:	fc 01       	movw	r30, r24
    e6da:	80 81       	ld	r24, Z
    e6dc:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    e6e0:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
			node++;
			travel_path(master_path[node]);
		}

		else{
			node--;
    e6e4:	80 91 71 03 	lds	r24, 0x0371
    e6e8:	90 91 72 03 	lds	r25, 0x0372
    e6ec:	01 97       	sbiw	r24, 0x01	; 1
    e6ee:	90 93 72 03 	sts	0x0372, r25
    e6f2:	80 93 71 03 	sts	0x0371, r24
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    e6f6:	80 91 71 03 	lds	r24, 0x0371
    e6fa:	90 91 72 03 	lds	r25, 0x0372
    e6fe:	01 97       	sbiw	r24, 0x01	; 1
    e700:	8b 58       	subi	r24, 0x8B	; 139
    e702:	9c 4f       	sbci	r25, 0xFC	; 252
    e704:	fc 01       	movw	r30, r24
    e706:	80 81       	ld	r24, Z
    e708:	8c 34       	cpi	r24, 0x4C	; 76
    e70a:	b1 f0       	breq	.+44     	; 0xe738 <travel_path+0x10ba>
    e70c:	80 91 71 03 	lds	r24, 0x0371
    e710:	90 91 72 03 	lds	r25, 0x0372
    e714:	01 97       	sbiw	r24, 0x01	; 1
    e716:	8b 58       	subi	r24, 0x8B	; 139
    e718:	9c 4f       	sbci	r25, 0xFC	; 252
    e71a:	fc 01       	movw	r30, r24
    e71c:	80 81       	ld	r24, Z
    e71e:	82 35       	cpi	r24, 0x52	; 82
    e720:	59 f0       	breq	.+22     	; 0xe738 <travel_path+0x10ba>
    e722:	80 91 71 03 	lds	r24, 0x0371
    e726:	90 91 72 03 	lds	r25, 0x0372
    e72a:	01 97       	sbiw	r24, 0x01	; 1
    e72c:	8b 58       	subi	r24, 0x8B	; 139
    e72e:	9c 4f       	sbci	r25, 0xFC	; 252
    e730:	fc 01       	movw	r30, r24
    e732:	80 81       	ld	r24, Z
    e734:	85 35       	cpi	r24, 0x55	; 85
    e736:	19 f4       	brne	.+6      	; 0xe73e <travel_path+0x10c0>
			correct_right2();
    e738:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <correct_right2>
    e73c:	02 c0       	rjmp	.+4      	; 0xe742 <travel_path+0x10c4>
			else 
			correct_right();
    e73e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;		
    e742:	80 91 71 03 	lds	r24, 0x0371
    e746:	90 91 72 03 	lds	r25, 0x0372
    e74a:	01 96       	adiw	r24, 0x01	; 1
    e74c:	90 93 72 03 	sts	0x0372, r25
    e750:	80 93 71 03 	sts	0x0371, r24
    e754:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
		}
	}
		else if(pos_val=='L')
    e758:	ce 01       	movw	r24, r28
    e75a:	87 57       	subi	r24, 0x77	; 119
    e75c:	9e 4f       	sbci	r25, 0xFE	; 254
    e75e:	fc 01       	movw	r30, r24
    e760:	80 81       	ld	r24, Z
    e762:	8c 34       	cpi	r24, 0x4C	; 76
    e764:	11 f0       	breq	.+4      	; 0xe76a <travel_path+0x10ec>
    e766:	0c 94 30 7d 	jmp	0xfa60	; 0xfa60 <travel_path+0x23e2>
		{
			if(node==0)
    e76a:	80 91 71 03 	lds	r24, 0x0371
    e76e:	90 91 72 03 	lds	r25, 0x0372
    e772:	00 97       	sbiw	r24, 0x00	; 0
    e774:	21 f4       	brne	.+8      	; 0xe77e <travel_path+0x1100>
			correct_left();
    e776:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    e77a:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
	}
		else if(pos_val=='L')
		{
			if(node==0)
			correct_left();
			else if(master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    e77e:	80 91 71 03 	lds	r24, 0x0371
    e782:	90 91 72 03 	lds	r25, 0x0372
    e786:	01 96       	adiw	r24, 0x01	; 1
    e788:	8b 58       	subi	r24, 0x8B	; 139
    e78a:	9c 4f       	sbci	r25, 0xFC	; 252
    e78c:	fc 01       	movw	r30, r24
    e78e:	80 81       	ld	r24, Z
    e790:	81 33       	cpi	r24, 0x31	; 49
    e792:	09 f4       	brne	.+2      	; 0xe796 <travel_path+0x1118>
    e794:	50 c0       	rjmp	.+160    	; 0xe836 <travel_path+0x11b8>
    e796:	80 91 71 03 	lds	r24, 0x0371
    e79a:	90 91 72 03 	lds	r25, 0x0372
    e79e:	01 96       	adiw	r24, 0x01	; 1
    e7a0:	8b 58       	subi	r24, 0x8B	; 139
    e7a2:	9c 4f       	sbci	r25, 0xFC	; 252
    e7a4:	fc 01       	movw	r30, r24
    e7a6:	80 81       	ld	r24, Z
    e7a8:	82 33       	cpi	r24, 0x32	; 50
    e7aa:	09 f4       	brne	.+2      	; 0xe7ae <travel_path+0x1130>
    e7ac:	44 c0       	rjmp	.+136    	; 0xe836 <travel_path+0x11b8>
    e7ae:	80 91 71 03 	lds	r24, 0x0371
    e7b2:	90 91 72 03 	lds	r25, 0x0372
    e7b6:	01 96       	adiw	r24, 0x01	; 1
    e7b8:	8b 58       	subi	r24, 0x8B	; 139
    e7ba:	9c 4f       	sbci	r25, 0xFC	; 252
    e7bc:	fc 01       	movw	r30, r24
    e7be:	80 81       	ld	r24, Z
    e7c0:	83 33       	cpi	r24, 0x33	; 51
    e7c2:	c9 f1       	breq	.+114    	; 0xe836 <travel_path+0x11b8>
    e7c4:	80 91 71 03 	lds	r24, 0x0371
    e7c8:	90 91 72 03 	lds	r25, 0x0372
    e7cc:	01 96       	adiw	r24, 0x01	; 1
    e7ce:	8b 58       	subi	r24, 0x8B	; 139
    e7d0:	9c 4f       	sbci	r25, 0xFC	; 252
    e7d2:	fc 01       	movw	r30, r24
    e7d4:	80 81       	ld	r24, Z
    e7d6:	84 33       	cpi	r24, 0x34	; 52
    e7d8:	71 f1       	breq	.+92     	; 0xe836 <travel_path+0x11b8>
    e7da:	80 91 71 03 	lds	r24, 0x0371
    e7de:	90 91 72 03 	lds	r25, 0x0372
    e7e2:	01 96       	adiw	r24, 0x01	; 1
    e7e4:	8b 58       	subi	r24, 0x8B	; 139
    e7e6:	9c 4f       	sbci	r25, 0xFC	; 252
    e7e8:	fc 01       	movw	r30, r24
    e7ea:	80 81       	ld	r24, Z
    e7ec:	85 33       	cpi	r24, 0x35	; 53
    e7ee:	19 f1       	breq	.+70     	; 0xe836 <travel_path+0x11b8>
    e7f0:	80 91 71 03 	lds	r24, 0x0371
    e7f4:	90 91 72 03 	lds	r25, 0x0372
    e7f8:	01 96       	adiw	r24, 0x01	; 1
    e7fa:	8b 58       	subi	r24, 0x8B	; 139
    e7fc:	9c 4f       	sbci	r25, 0xFC	; 252
    e7fe:	fc 01       	movw	r30, r24
    e800:	80 81       	ld	r24, Z
    e802:	86 33       	cpi	r24, 0x36	; 54
    e804:	c1 f0       	breq	.+48     	; 0xe836 <travel_path+0x11b8>
    e806:	80 91 71 03 	lds	r24, 0x0371
    e80a:	90 91 72 03 	lds	r25, 0x0372
    e80e:	01 96       	adiw	r24, 0x01	; 1
    e810:	8b 58       	subi	r24, 0x8B	; 139
    e812:	9c 4f       	sbci	r25, 0xFC	; 252
    e814:	fc 01       	movw	r30, r24
    e816:	80 81       	ld	r24, Z
    e818:	87 33       	cpi	r24, 0x37	; 55
    e81a:	69 f0       	breq	.+26     	; 0xe836 <travel_path+0x11b8>
    e81c:	80 91 71 03 	lds	r24, 0x0371
    e820:	90 91 72 03 	lds	r25, 0x0372
    e824:	01 96       	adiw	r24, 0x01	; 1
    e826:	8b 58       	subi	r24, 0x8B	; 139
    e828:	9c 4f       	sbci	r25, 0xFC	; 252
    e82a:	fc 01       	movw	r30, r24
    e82c:	80 81       	ld	r24, Z
    e82e:	88 33       	cpi	r24, 0x38	; 56
    e830:	11 f0       	breq	.+4      	; 0xe836 <travel_path+0x11b8>
    e832:	0c 94 f1 7b 	jmp	0xf7e2	; 0xf7e2 <travel_path+0x2164>
			{
				if(master_path[node+1]=='7'||master_path[node+1]=='6')
    e836:	80 91 71 03 	lds	r24, 0x0371
    e83a:	90 91 72 03 	lds	r25, 0x0372
    e83e:	01 96       	adiw	r24, 0x01	; 1
    e840:	8b 58       	subi	r24, 0x8B	; 139
    e842:	9c 4f       	sbci	r25, 0xFC	; 252
    e844:	fc 01       	movw	r30, r24
    e846:	80 81       	ld	r24, Z
    e848:	87 33       	cpi	r24, 0x37	; 55
    e84a:	61 f0       	breq	.+24     	; 0xe864 <travel_path+0x11e6>
    e84c:	80 91 71 03 	lds	r24, 0x0371
    e850:	90 91 72 03 	lds	r25, 0x0372
    e854:	01 96       	adiw	r24, 0x01	; 1
    e856:	8b 58       	subi	r24, 0x8B	; 139
    e858:	9c 4f       	sbci	r25, 0xFC	; 252
    e85a:	fc 01       	movw	r30, r24
    e85c:	80 81       	ld	r24, Z
    e85e:	86 33       	cpi	r24, 0x36	; 54
    e860:	09 f0       	breq	.+2      	; 0xe864 <travel_path+0x11e6>
    e862:	ad c1       	rjmp	.+858    	; 0xebbe <travel_path+0x1540>
				{
					forward_mm(25);
    e864:	89 e1       	ldi	r24, 0x19	; 25
    e866:	90 e0       	ldi	r25, 0x00	; 0
    e868:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    e86c:	9e 01       	movw	r18, r28
    e86e:	23 57       	subi	r18, 0x73	; 115
    e870:	3f 4f       	sbci	r19, 0xFF	; 255
    e872:	80 e0       	ldi	r24, 0x00	; 0
    e874:	90 e0       	ldi	r25, 0x00	; 0
    e876:	a0 ea       	ldi	r26, 0xA0	; 160
    e878:	b1 e4       	ldi	r27, 0x41	; 65
    e87a:	f9 01       	movw	r30, r18
    e87c:	80 83       	st	Z, r24
    e87e:	91 83       	std	Z+1, r25	; 0x01
    e880:	a2 83       	std	Z+2, r26	; 0x02
    e882:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e884:	8e 01       	movw	r16, r28
    e886:	0f 56       	subi	r16, 0x6F	; 111
    e888:	1f 4f       	sbci	r17, 0xFF	; 255
    e88a:	ce 01       	movw	r24, r28
    e88c:	83 57       	subi	r24, 0x73	; 115
    e88e:	9f 4f       	sbci	r25, 0xFF	; 255
    e890:	fc 01       	movw	r30, r24
    e892:	60 81       	ld	r22, Z
    e894:	71 81       	ldd	r23, Z+1	; 0x01
    e896:	82 81       	ldd	r24, Z+2	; 0x02
    e898:	93 81       	ldd	r25, Z+3	; 0x03
    e89a:	26 e6       	ldi	r18, 0x66	; 102
    e89c:	36 e6       	ldi	r19, 0x66	; 102
    e89e:	46 e6       	ldi	r20, 0x66	; 102
    e8a0:	55 e4       	ldi	r21, 0x45	; 69
    e8a2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e8a6:	dc 01       	movw	r26, r24
    e8a8:	cb 01       	movw	r24, r22
    e8aa:	f8 01       	movw	r30, r16
    e8ac:	80 83       	st	Z, r24
    e8ae:	91 83       	std	Z+1, r25	; 0x01
    e8b0:	a2 83       	std	Z+2, r26	; 0x02
    e8b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e8b4:	ce 01       	movw	r24, r28
    e8b6:	8f 56       	subi	r24, 0x6F	; 111
    e8b8:	9f 4f       	sbci	r25, 0xFF	; 255
    e8ba:	11 e0       	ldi	r17, 0x01	; 1
    e8bc:	fc 01       	movw	r30, r24
    e8be:	60 81       	ld	r22, Z
    e8c0:	71 81       	ldd	r23, Z+1	; 0x01
    e8c2:	82 81       	ldd	r24, Z+2	; 0x02
    e8c4:	93 81       	ldd	r25, Z+3	; 0x03
    e8c6:	20 e0       	ldi	r18, 0x00	; 0
    e8c8:	30 e0       	ldi	r19, 0x00	; 0
    e8ca:	40 e8       	ldi	r20, 0x80	; 128
    e8cc:	5f e3       	ldi	r21, 0x3F	; 63
    e8ce:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    e8d2:	88 23       	and	r24, r24
    e8d4:	0c f0       	brlt	.+2      	; 0xe8d8 <travel_path+0x125a>
    e8d6:	10 e0       	ldi	r17, 0x00	; 0
    e8d8:	11 23       	and	r17, r17
    e8da:	49 f0       	breq	.+18     	; 0xe8ee <travel_path+0x1270>
		__ticks = 1;
    e8dc:	ce 01       	movw	r24, r28
    e8de:	8b 56       	subi	r24, 0x6B	; 107
    e8e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e8e2:	21 e0       	ldi	r18, 0x01	; 1
    e8e4:	30 e0       	ldi	r19, 0x00	; 0
    e8e6:	fc 01       	movw	r30, r24
    e8e8:	31 83       	std	Z+1, r19	; 0x01
    e8ea:	20 83       	st	Z, r18
    e8ec:	74 c0       	rjmp	.+232    	; 0xe9d6 <travel_path+0x1358>
	else if (__tmp > 65535)
    e8ee:	ce 01       	movw	r24, r28
    e8f0:	8f 56       	subi	r24, 0x6F	; 111
    e8f2:	9f 4f       	sbci	r25, 0xFF	; 255
    e8f4:	11 e0       	ldi	r17, 0x01	; 1
    e8f6:	fc 01       	movw	r30, r24
    e8f8:	60 81       	ld	r22, Z
    e8fa:	71 81       	ldd	r23, Z+1	; 0x01
    e8fc:	82 81       	ldd	r24, Z+2	; 0x02
    e8fe:	93 81       	ldd	r25, Z+3	; 0x03
    e900:	20 e0       	ldi	r18, 0x00	; 0
    e902:	3f ef       	ldi	r19, 0xFF	; 255
    e904:	4f e7       	ldi	r20, 0x7F	; 127
    e906:	57 e4       	ldi	r21, 0x47	; 71
    e908:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    e90c:	18 16       	cp	r1, r24
    e90e:	0c f0       	brlt	.+2      	; 0xe912 <travel_path+0x1294>
    e910:	10 e0       	ldi	r17, 0x00	; 0
    e912:	11 23       	and	r17, r17
    e914:	09 f4       	brne	.+2      	; 0xe918 <travel_path+0x129a>
    e916:	4d c0       	rjmp	.+154    	; 0xe9b2 <travel_path+0x1334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e918:	ce 01       	movw	r24, r28
    e91a:	83 57       	subi	r24, 0x73	; 115
    e91c:	9f 4f       	sbci	r25, 0xFF	; 255
    e91e:	fc 01       	movw	r30, r24
    e920:	60 81       	ld	r22, Z
    e922:	71 81       	ldd	r23, Z+1	; 0x01
    e924:	82 81       	ldd	r24, Z+2	; 0x02
    e926:	93 81       	ldd	r25, Z+3	; 0x03
    e928:	20 e0       	ldi	r18, 0x00	; 0
    e92a:	30 e0       	ldi	r19, 0x00	; 0
    e92c:	40 e2       	ldi	r20, 0x20	; 32
    e92e:	51 e4       	ldi	r21, 0x41	; 65
    e930:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    e934:	dc 01       	movw	r26, r24
    e936:	cb 01       	movw	r24, r22
    e938:	8e 01       	movw	r16, r28
    e93a:	0b 56       	subi	r16, 0x6B	; 107
    e93c:	1f 4f       	sbci	r17, 0xFF	; 255
    e93e:	bc 01       	movw	r22, r24
    e940:	cd 01       	movw	r24, r26
    e942:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e946:	dc 01       	movw	r26, r24
    e948:	cb 01       	movw	r24, r22
    e94a:	f8 01       	movw	r30, r16
    e94c:	91 83       	std	Z+1, r25	; 0x01
    e94e:	80 83       	st	Z, r24
    e950:	27 c0       	rjmp	.+78     	; 0xe9a0 <travel_path+0x1322>
    e952:	ce 01       	movw	r24, r28
    e954:	89 56       	subi	r24, 0x69	; 105
    e956:	9f 4f       	sbci	r25, 0xFF	; 255
    e958:	20 e7       	ldi	r18, 0x70	; 112
    e95a:	31 e0       	ldi	r19, 0x01	; 1
    e95c:	fc 01       	movw	r30, r24
    e95e:	31 83       	std	Z+1, r19	; 0x01
    e960:	20 83       	st	Z, r18
    e962:	ce 01       	movw	r24, r28
    e964:	89 56       	subi	r24, 0x69	; 105
    e966:	9f 4f       	sbci	r25, 0xFF	; 255
    e968:	fc 01       	movw	r30, r24
    e96a:	80 81       	ld	r24, Z
    e96c:	91 81       	ldd	r25, Z+1	; 0x01
    e96e:	8c 01       	movw	r16, r24
    e970:	c8 01       	movw	r24, r16
    e972:	01 97       	sbiw	r24, 0x01	; 1
    e974:	f1 f7       	brne	.-4      	; 0xe972 <travel_path+0x12f4>
    e976:	8c 01       	movw	r16, r24
    e978:	ce 01       	movw	r24, r28
    e97a:	89 56       	subi	r24, 0x69	; 105
    e97c:	9f 4f       	sbci	r25, 0xFF	; 255
    e97e:	fc 01       	movw	r30, r24
    e980:	11 83       	std	Z+1, r17	; 0x01
    e982:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e984:	ce 01       	movw	r24, r28
    e986:	8b 56       	subi	r24, 0x6B	; 107
    e988:	9f 4f       	sbci	r25, 0xFF	; 255
    e98a:	9e 01       	movw	r18, r28
    e98c:	2b 56       	subi	r18, 0x6B	; 107
    e98e:	3f 4f       	sbci	r19, 0xFF	; 255
    e990:	f9 01       	movw	r30, r18
    e992:	20 81       	ld	r18, Z
    e994:	31 81       	ldd	r19, Z+1	; 0x01
    e996:	21 50       	subi	r18, 0x01	; 1
    e998:	30 40       	sbci	r19, 0x00	; 0
    e99a:	fc 01       	movw	r30, r24
    e99c:	31 83       	std	Z+1, r19	; 0x01
    e99e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e9a0:	ce 01       	movw	r24, r28
    e9a2:	8b 56       	subi	r24, 0x6B	; 107
    e9a4:	9f 4f       	sbci	r25, 0xFF	; 255
    e9a6:	fc 01       	movw	r30, r24
    e9a8:	80 81       	ld	r24, Z
    e9aa:	91 81       	ldd	r25, Z+1	; 0x01
    e9ac:	00 97       	sbiw	r24, 0x00	; 0
    e9ae:	89 f6       	brne	.-94     	; 0xe952 <travel_path+0x12d4>
    e9b0:	2f c0       	rjmp	.+94     	; 0xea10 <travel_path+0x1392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e9b2:	8e 01       	movw	r16, r28
    e9b4:	0b 56       	subi	r16, 0x6B	; 107
    e9b6:	1f 4f       	sbci	r17, 0xFF	; 255
    e9b8:	ce 01       	movw	r24, r28
    e9ba:	8f 56       	subi	r24, 0x6F	; 111
    e9bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e9be:	fc 01       	movw	r30, r24
    e9c0:	60 81       	ld	r22, Z
    e9c2:	71 81       	ldd	r23, Z+1	; 0x01
    e9c4:	82 81       	ldd	r24, Z+2	; 0x02
    e9c6:	93 81       	ldd	r25, Z+3	; 0x03
    e9c8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    e9cc:	dc 01       	movw	r26, r24
    e9ce:	cb 01       	movw	r24, r22
    e9d0:	f8 01       	movw	r30, r16
    e9d2:	91 83       	std	Z+1, r25	; 0x01
    e9d4:	80 83       	st	Z, r24
    e9d6:	ce 01       	movw	r24, r28
    e9d8:	87 56       	subi	r24, 0x67	; 103
    e9da:	9f 4f       	sbci	r25, 0xFF	; 255
    e9dc:	9e 01       	movw	r18, r28
    e9de:	2b 56       	subi	r18, 0x6B	; 107
    e9e0:	3f 4f       	sbci	r19, 0xFF	; 255
    e9e2:	f9 01       	movw	r30, r18
    e9e4:	20 81       	ld	r18, Z
    e9e6:	31 81       	ldd	r19, Z+1	; 0x01
    e9e8:	fc 01       	movw	r30, r24
    e9ea:	31 83       	std	Z+1, r19	; 0x01
    e9ec:	20 83       	st	Z, r18
    e9ee:	ce 01       	movw	r24, r28
    e9f0:	87 56       	subi	r24, 0x67	; 103
    e9f2:	9f 4f       	sbci	r25, 0xFF	; 255
    e9f4:	fc 01       	movw	r30, r24
    e9f6:	80 81       	ld	r24, Z
    e9f8:	91 81       	ldd	r25, Z+1	; 0x01
    e9fa:	8c 01       	movw	r16, r24
    e9fc:	c8 01       	movw	r24, r16
    e9fe:	01 97       	sbiw	r24, 0x01	; 1
    ea00:	f1 f7       	brne	.-4      	; 0xe9fe <travel_path+0x1380>
    ea02:	8c 01       	movw	r16, r24
    ea04:	ce 01       	movw	r24, r28
    ea06:	87 56       	subi	r24, 0x67	; 103
    ea08:	9f 4f       	sbci	r25, 0xFF	; 255
    ea0a:	fc 01       	movw	r30, r24
    ea0c:	11 83       	std	Z+1, r17	; 0x01
    ea0e:	00 83       	st	Z, r16
					_delay_ms(20);
					stop();
    ea10:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ea14:	9e 01       	movw	r18, r28
    ea16:	25 56       	subi	r18, 0x65	; 101
    ea18:	3f 4f       	sbci	r19, 0xFF	; 255
    ea1a:	80 e0       	ldi	r24, 0x00	; 0
    ea1c:	90 e0       	ldi	r25, 0x00	; 0
    ea1e:	a8 ec       	ldi	r26, 0xC8	; 200
    ea20:	b1 e4       	ldi	r27, 0x41	; 65
    ea22:	f9 01       	movw	r30, r18
    ea24:	80 83       	st	Z, r24
    ea26:	91 83       	std	Z+1, r25	; 0x01
    ea28:	a2 83       	std	Z+2, r26	; 0x02
    ea2a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ea2c:	8e 01       	movw	r16, r28
    ea2e:	01 56       	subi	r16, 0x61	; 97
    ea30:	1f 4f       	sbci	r17, 0xFF	; 255
    ea32:	ce 01       	movw	r24, r28
    ea34:	85 56       	subi	r24, 0x65	; 101
    ea36:	9f 4f       	sbci	r25, 0xFF	; 255
    ea38:	fc 01       	movw	r30, r24
    ea3a:	60 81       	ld	r22, Z
    ea3c:	71 81       	ldd	r23, Z+1	; 0x01
    ea3e:	82 81       	ldd	r24, Z+2	; 0x02
    ea40:	93 81       	ldd	r25, Z+3	; 0x03
    ea42:	26 e6       	ldi	r18, 0x66	; 102
    ea44:	36 e6       	ldi	r19, 0x66	; 102
    ea46:	46 e6       	ldi	r20, 0x66	; 102
    ea48:	55 e4       	ldi	r21, 0x45	; 69
    ea4a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ea4e:	dc 01       	movw	r26, r24
    ea50:	cb 01       	movw	r24, r22
    ea52:	f8 01       	movw	r30, r16
    ea54:	80 83       	st	Z, r24
    ea56:	91 83       	std	Z+1, r25	; 0x01
    ea58:	a2 83       	std	Z+2, r26	; 0x02
    ea5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ea5c:	ce 01       	movw	r24, r28
    ea5e:	81 56       	subi	r24, 0x61	; 97
    ea60:	9f 4f       	sbci	r25, 0xFF	; 255
    ea62:	11 e0       	ldi	r17, 0x01	; 1
    ea64:	fc 01       	movw	r30, r24
    ea66:	60 81       	ld	r22, Z
    ea68:	71 81       	ldd	r23, Z+1	; 0x01
    ea6a:	82 81       	ldd	r24, Z+2	; 0x02
    ea6c:	93 81       	ldd	r25, Z+3	; 0x03
    ea6e:	20 e0       	ldi	r18, 0x00	; 0
    ea70:	30 e0       	ldi	r19, 0x00	; 0
    ea72:	40 e8       	ldi	r20, 0x80	; 128
    ea74:	5f e3       	ldi	r21, 0x3F	; 63
    ea76:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ea7a:	88 23       	and	r24, r24
    ea7c:	0c f0       	brlt	.+2      	; 0xea80 <travel_path+0x1402>
    ea7e:	10 e0       	ldi	r17, 0x00	; 0
    ea80:	11 23       	and	r17, r17
    ea82:	49 f0       	breq	.+18     	; 0xea96 <travel_path+0x1418>
		__ticks = 1;
    ea84:	ce 01       	movw	r24, r28
    ea86:	8d 55       	subi	r24, 0x5D	; 93
    ea88:	9f 4f       	sbci	r25, 0xFF	; 255
    ea8a:	21 e0       	ldi	r18, 0x01	; 1
    ea8c:	30 e0       	ldi	r19, 0x00	; 0
    ea8e:	fc 01       	movw	r30, r24
    ea90:	31 83       	std	Z+1, r19	; 0x01
    ea92:	20 83       	st	Z, r18
    ea94:	74 c0       	rjmp	.+232    	; 0xeb7e <travel_path+0x1500>
	else if (__tmp > 65535)
    ea96:	ce 01       	movw	r24, r28
    ea98:	81 56       	subi	r24, 0x61	; 97
    ea9a:	9f 4f       	sbci	r25, 0xFF	; 255
    ea9c:	11 e0       	ldi	r17, 0x01	; 1
    ea9e:	fc 01       	movw	r30, r24
    eaa0:	60 81       	ld	r22, Z
    eaa2:	71 81       	ldd	r23, Z+1	; 0x01
    eaa4:	82 81       	ldd	r24, Z+2	; 0x02
    eaa6:	93 81       	ldd	r25, Z+3	; 0x03
    eaa8:	20 e0       	ldi	r18, 0x00	; 0
    eaaa:	3f ef       	ldi	r19, 0xFF	; 255
    eaac:	4f e7       	ldi	r20, 0x7F	; 127
    eaae:	57 e4       	ldi	r21, 0x47	; 71
    eab0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    eab4:	18 16       	cp	r1, r24
    eab6:	0c f0       	brlt	.+2      	; 0xeaba <travel_path+0x143c>
    eab8:	10 e0       	ldi	r17, 0x00	; 0
    eaba:	11 23       	and	r17, r17
    eabc:	09 f4       	brne	.+2      	; 0xeac0 <travel_path+0x1442>
    eabe:	4d c0       	rjmp	.+154    	; 0xeb5a <travel_path+0x14dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    eac0:	ce 01       	movw	r24, r28
    eac2:	85 56       	subi	r24, 0x65	; 101
    eac4:	9f 4f       	sbci	r25, 0xFF	; 255
    eac6:	fc 01       	movw	r30, r24
    eac8:	60 81       	ld	r22, Z
    eaca:	71 81       	ldd	r23, Z+1	; 0x01
    eacc:	82 81       	ldd	r24, Z+2	; 0x02
    eace:	93 81       	ldd	r25, Z+3	; 0x03
    ead0:	20 e0       	ldi	r18, 0x00	; 0
    ead2:	30 e0       	ldi	r19, 0x00	; 0
    ead4:	40 e2       	ldi	r20, 0x20	; 32
    ead6:	51 e4       	ldi	r21, 0x41	; 65
    ead8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    eadc:	dc 01       	movw	r26, r24
    eade:	cb 01       	movw	r24, r22
    eae0:	8e 01       	movw	r16, r28
    eae2:	0d 55       	subi	r16, 0x5D	; 93
    eae4:	1f 4f       	sbci	r17, 0xFF	; 255
    eae6:	bc 01       	movw	r22, r24
    eae8:	cd 01       	movw	r24, r26
    eaea:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    eaee:	dc 01       	movw	r26, r24
    eaf0:	cb 01       	movw	r24, r22
    eaf2:	f8 01       	movw	r30, r16
    eaf4:	91 83       	std	Z+1, r25	; 0x01
    eaf6:	80 83       	st	Z, r24
    eaf8:	27 c0       	rjmp	.+78     	; 0xeb48 <travel_path+0x14ca>
    eafa:	ce 01       	movw	r24, r28
    eafc:	8b 55       	subi	r24, 0x5B	; 91
    eafe:	9f 4f       	sbci	r25, 0xFF	; 255
    eb00:	20 e7       	ldi	r18, 0x70	; 112
    eb02:	31 e0       	ldi	r19, 0x01	; 1
    eb04:	fc 01       	movw	r30, r24
    eb06:	31 83       	std	Z+1, r19	; 0x01
    eb08:	20 83       	st	Z, r18
    eb0a:	ce 01       	movw	r24, r28
    eb0c:	8b 55       	subi	r24, 0x5B	; 91
    eb0e:	9f 4f       	sbci	r25, 0xFF	; 255
    eb10:	fc 01       	movw	r30, r24
    eb12:	80 81       	ld	r24, Z
    eb14:	91 81       	ldd	r25, Z+1	; 0x01
    eb16:	8c 01       	movw	r16, r24
    eb18:	c8 01       	movw	r24, r16
    eb1a:	01 97       	sbiw	r24, 0x01	; 1
    eb1c:	f1 f7       	brne	.-4      	; 0xeb1a <travel_path+0x149c>
    eb1e:	8c 01       	movw	r16, r24
    eb20:	ce 01       	movw	r24, r28
    eb22:	8b 55       	subi	r24, 0x5B	; 91
    eb24:	9f 4f       	sbci	r25, 0xFF	; 255
    eb26:	fc 01       	movw	r30, r24
    eb28:	11 83       	std	Z+1, r17	; 0x01
    eb2a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    eb2c:	ce 01       	movw	r24, r28
    eb2e:	8d 55       	subi	r24, 0x5D	; 93
    eb30:	9f 4f       	sbci	r25, 0xFF	; 255
    eb32:	9e 01       	movw	r18, r28
    eb34:	2d 55       	subi	r18, 0x5D	; 93
    eb36:	3f 4f       	sbci	r19, 0xFF	; 255
    eb38:	f9 01       	movw	r30, r18
    eb3a:	20 81       	ld	r18, Z
    eb3c:	31 81       	ldd	r19, Z+1	; 0x01
    eb3e:	21 50       	subi	r18, 0x01	; 1
    eb40:	30 40       	sbci	r19, 0x00	; 0
    eb42:	fc 01       	movw	r30, r24
    eb44:	31 83       	std	Z+1, r19	; 0x01
    eb46:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    eb48:	ce 01       	movw	r24, r28
    eb4a:	8d 55       	subi	r24, 0x5D	; 93
    eb4c:	9f 4f       	sbci	r25, 0xFF	; 255
    eb4e:	fc 01       	movw	r30, r24
    eb50:	80 81       	ld	r24, Z
    eb52:	91 81       	ldd	r25, Z+1	; 0x01
    eb54:	00 97       	sbiw	r24, 0x00	; 0
    eb56:	89 f6       	brne	.-94     	; 0xeafa <travel_path+0x147c>
    eb58:	2f c0       	rjmp	.+94     	; 0xebb8 <travel_path+0x153a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    eb5a:	8e 01       	movw	r16, r28
    eb5c:	0d 55       	subi	r16, 0x5D	; 93
    eb5e:	1f 4f       	sbci	r17, 0xFF	; 255
    eb60:	ce 01       	movw	r24, r28
    eb62:	81 56       	subi	r24, 0x61	; 97
    eb64:	9f 4f       	sbci	r25, 0xFF	; 255
    eb66:	fc 01       	movw	r30, r24
    eb68:	60 81       	ld	r22, Z
    eb6a:	71 81       	ldd	r23, Z+1	; 0x01
    eb6c:	82 81       	ldd	r24, Z+2	; 0x02
    eb6e:	93 81       	ldd	r25, Z+3	; 0x03
    eb70:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    eb74:	dc 01       	movw	r26, r24
    eb76:	cb 01       	movw	r24, r22
    eb78:	f8 01       	movw	r30, r16
    eb7a:	91 83       	std	Z+1, r25	; 0x01
    eb7c:	80 83       	st	Z, r24
    eb7e:	ce 01       	movw	r24, r28
    eb80:	89 55       	subi	r24, 0x59	; 89
    eb82:	9f 4f       	sbci	r25, 0xFF	; 255
    eb84:	9e 01       	movw	r18, r28
    eb86:	2d 55       	subi	r18, 0x5D	; 93
    eb88:	3f 4f       	sbci	r19, 0xFF	; 255
    eb8a:	f9 01       	movw	r30, r18
    eb8c:	20 81       	ld	r18, Z
    eb8e:	31 81       	ldd	r19, Z+1	; 0x01
    eb90:	fc 01       	movw	r30, r24
    eb92:	31 83       	std	Z+1, r19	; 0x01
    eb94:	20 83       	st	Z, r18
    eb96:	ce 01       	movw	r24, r28
    eb98:	89 55       	subi	r24, 0x59	; 89
    eb9a:	9f 4f       	sbci	r25, 0xFF	; 255
    eb9c:	fc 01       	movw	r30, r24
    eb9e:	80 81       	ld	r24, Z
    eba0:	91 81       	ldd	r25, Z+1	; 0x01
    eba2:	8c 01       	movw	r16, r24
    eba4:	c8 01       	movw	r24, r16
    eba6:	01 97       	sbiw	r24, 0x01	; 1
    eba8:	f1 f7       	brne	.-4      	; 0xeba6 <travel_path+0x1528>
    ebaa:	8c 01       	movw	r16, r24
    ebac:	ce 01       	movw	r24, r28
    ebae:	89 55       	subi	r24, 0x59	; 89
    ebb0:	9f 4f       	sbci	r25, 0xFF	; 255
    ebb2:	fc 01       	movw	r30, r24
    ebb4:	11 83       	std	Z+1, r17	; 0x01
    ebb6:	00 83       	st	Z, r16
					_delay_ms(25);
					correct_left();
    ebb8:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    ebbc:	ea c5       	rjmp	.+3028   	; 0xf792 <travel_path+0x2114>
				}
						else if(master_path[node+1]=='8'){
    ebbe:	80 91 71 03 	lds	r24, 0x0371
    ebc2:	90 91 72 03 	lds	r25, 0x0372
    ebc6:	01 96       	adiw	r24, 0x01	; 1
    ebc8:	8b 58       	subi	r24, 0x8B	; 139
    ebca:	9c 4f       	sbci	r25, 0xFC	; 252
    ebcc:	fc 01       	movw	r30, r24
    ebce:	80 81       	ld	r24, Z
    ebd0:	88 33       	cpi	r24, 0x38	; 56
    ebd2:	09 f0       	breq	.+2      	; 0xebd6 <travel_path+0x1558>
    ebd4:	7f c2       	rjmp	.+1278   	; 0xf0d4 <travel_path+0x1a56>
							stop();
    ebd6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ebda:	9e 01       	movw	r18, r28
    ebdc:	27 55       	subi	r18, 0x57	; 87
    ebde:	3f 4f       	sbci	r19, 0xFF	; 255
    ebe0:	80 e0       	ldi	r24, 0x00	; 0
    ebe2:	90 e0       	ldi	r25, 0x00	; 0
    ebe4:	a0 ea       	ldi	r26, 0xA0	; 160
    ebe6:	b1 e4       	ldi	r27, 0x41	; 65
    ebe8:	f9 01       	movw	r30, r18
    ebea:	80 83       	st	Z, r24
    ebec:	91 83       	std	Z+1, r25	; 0x01
    ebee:	a2 83       	std	Z+2, r26	; 0x02
    ebf0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ebf2:	8e 01       	movw	r16, r28
    ebf4:	03 55       	subi	r16, 0x53	; 83
    ebf6:	1f 4f       	sbci	r17, 0xFF	; 255
    ebf8:	ce 01       	movw	r24, r28
    ebfa:	87 55       	subi	r24, 0x57	; 87
    ebfc:	9f 4f       	sbci	r25, 0xFF	; 255
    ebfe:	fc 01       	movw	r30, r24
    ec00:	60 81       	ld	r22, Z
    ec02:	71 81       	ldd	r23, Z+1	; 0x01
    ec04:	82 81       	ldd	r24, Z+2	; 0x02
    ec06:	93 81       	ldd	r25, Z+3	; 0x03
    ec08:	26 e6       	ldi	r18, 0x66	; 102
    ec0a:	36 e6       	ldi	r19, 0x66	; 102
    ec0c:	46 e6       	ldi	r20, 0x66	; 102
    ec0e:	55 e4       	ldi	r21, 0x45	; 69
    ec10:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ec14:	dc 01       	movw	r26, r24
    ec16:	cb 01       	movw	r24, r22
    ec18:	f8 01       	movw	r30, r16
    ec1a:	80 83       	st	Z, r24
    ec1c:	91 83       	std	Z+1, r25	; 0x01
    ec1e:	a2 83       	std	Z+2, r26	; 0x02
    ec20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ec22:	ce 01       	movw	r24, r28
    ec24:	83 55       	subi	r24, 0x53	; 83
    ec26:	9f 4f       	sbci	r25, 0xFF	; 255
    ec28:	11 e0       	ldi	r17, 0x01	; 1
    ec2a:	fc 01       	movw	r30, r24
    ec2c:	60 81       	ld	r22, Z
    ec2e:	71 81       	ldd	r23, Z+1	; 0x01
    ec30:	82 81       	ldd	r24, Z+2	; 0x02
    ec32:	93 81       	ldd	r25, Z+3	; 0x03
    ec34:	20 e0       	ldi	r18, 0x00	; 0
    ec36:	30 e0       	ldi	r19, 0x00	; 0
    ec38:	40 e8       	ldi	r20, 0x80	; 128
    ec3a:	5f e3       	ldi	r21, 0x3F	; 63
    ec3c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ec40:	88 23       	and	r24, r24
    ec42:	0c f0       	brlt	.+2      	; 0xec46 <travel_path+0x15c8>
    ec44:	10 e0       	ldi	r17, 0x00	; 0
    ec46:	11 23       	and	r17, r17
    ec48:	49 f0       	breq	.+18     	; 0xec5c <travel_path+0x15de>
		__ticks = 1;
    ec4a:	ce 01       	movw	r24, r28
    ec4c:	8f 54       	subi	r24, 0x4F	; 79
    ec4e:	9f 4f       	sbci	r25, 0xFF	; 255
    ec50:	21 e0       	ldi	r18, 0x01	; 1
    ec52:	30 e0       	ldi	r19, 0x00	; 0
    ec54:	fc 01       	movw	r30, r24
    ec56:	31 83       	std	Z+1, r19	; 0x01
    ec58:	20 83       	st	Z, r18
    ec5a:	74 c0       	rjmp	.+232    	; 0xed44 <travel_path+0x16c6>
	else if (__tmp > 65535)
    ec5c:	ce 01       	movw	r24, r28
    ec5e:	83 55       	subi	r24, 0x53	; 83
    ec60:	9f 4f       	sbci	r25, 0xFF	; 255
    ec62:	11 e0       	ldi	r17, 0x01	; 1
    ec64:	fc 01       	movw	r30, r24
    ec66:	60 81       	ld	r22, Z
    ec68:	71 81       	ldd	r23, Z+1	; 0x01
    ec6a:	82 81       	ldd	r24, Z+2	; 0x02
    ec6c:	93 81       	ldd	r25, Z+3	; 0x03
    ec6e:	20 e0       	ldi	r18, 0x00	; 0
    ec70:	3f ef       	ldi	r19, 0xFF	; 255
    ec72:	4f e7       	ldi	r20, 0x7F	; 127
    ec74:	57 e4       	ldi	r21, 0x47	; 71
    ec76:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ec7a:	18 16       	cp	r1, r24
    ec7c:	0c f0       	brlt	.+2      	; 0xec80 <travel_path+0x1602>
    ec7e:	10 e0       	ldi	r17, 0x00	; 0
    ec80:	11 23       	and	r17, r17
    ec82:	09 f4       	brne	.+2      	; 0xec86 <travel_path+0x1608>
    ec84:	4d c0       	rjmp	.+154    	; 0xed20 <travel_path+0x16a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ec86:	ce 01       	movw	r24, r28
    ec88:	87 55       	subi	r24, 0x57	; 87
    ec8a:	9f 4f       	sbci	r25, 0xFF	; 255
    ec8c:	fc 01       	movw	r30, r24
    ec8e:	60 81       	ld	r22, Z
    ec90:	71 81       	ldd	r23, Z+1	; 0x01
    ec92:	82 81       	ldd	r24, Z+2	; 0x02
    ec94:	93 81       	ldd	r25, Z+3	; 0x03
    ec96:	20 e0       	ldi	r18, 0x00	; 0
    ec98:	30 e0       	ldi	r19, 0x00	; 0
    ec9a:	40 e2       	ldi	r20, 0x20	; 32
    ec9c:	51 e4       	ldi	r21, 0x41	; 65
    ec9e:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    eca2:	dc 01       	movw	r26, r24
    eca4:	cb 01       	movw	r24, r22
    eca6:	8e 01       	movw	r16, r28
    eca8:	0f 54       	subi	r16, 0x4F	; 79
    ecaa:	1f 4f       	sbci	r17, 0xFF	; 255
    ecac:	bc 01       	movw	r22, r24
    ecae:	cd 01       	movw	r24, r26
    ecb0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ecb4:	dc 01       	movw	r26, r24
    ecb6:	cb 01       	movw	r24, r22
    ecb8:	f8 01       	movw	r30, r16
    ecba:	91 83       	std	Z+1, r25	; 0x01
    ecbc:	80 83       	st	Z, r24
    ecbe:	27 c0       	rjmp	.+78     	; 0xed0e <travel_path+0x1690>
    ecc0:	ce 01       	movw	r24, r28
    ecc2:	8d 54       	subi	r24, 0x4D	; 77
    ecc4:	9f 4f       	sbci	r25, 0xFF	; 255
    ecc6:	20 e7       	ldi	r18, 0x70	; 112
    ecc8:	31 e0       	ldi	r19, 0x01	; 1
    ecca:	fc 01       	movw	r30, r24
    eccc:	31 83       	std	Z+1, r19	; 0x01
    ecce:	20 83       	st	Z, r18
    ecd0:	ce 01       	movw	r24, r28
    ecd2:	8d 54       	subi	r24, 0x4D	; 77
    ecd4:	9f 4f       	sbci	r25, 0xFF	; 255
    ecd6:	fc 01       	movw	r30, r24
    ecd8:	80 81       	ld	r24, Z
    ecda:	91 81       	ldd	r25, Z+1	; 0x01
    ecdc:	8c 01       	movw	r16, r24
    ecde:	c8 01       	movw	r24, r16
    ece0:	01 97       	sbiw	r24, 0x01	; 1
    ece2:	f1 f7       	brne	.-4      	; 0xece0 <travel_path+0x1662>
    ece4:	8c 01       	movw	r16, r24
    ece6:	ce 01       	movw	r24, r28
    ece8:	8d 54       	subi	r24, 0x4D	; 77
    ecea:	9f 4f       	sbci	r25, 0xFF	; 255
    ecec:	fc 01       	movw	r30, r24
    ecee:	11 83       	std	Z+1, r17	; 0x01
    ecf0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ecf2:	ce 01       	movw	r24, r28
    ecf4:	8f 54       	subi	r24, 0x4F	; 79
    ecf6:	9f 4f       	sbci	r25, 0xFF	; 255
    ecf8:	9e 01       	movw	r18, r28
    ecfa:	2f 54       	subi	r18, 0x4F	; 79
    ecfc:	3f 4f       	sbci	r19, 0xFF	; 255
    ecfe:	f9 01       	movw	r30, r18
    ed00:	20 81       	ld	r18, Z
    ed02:	31 81       	ldd	r19, Z+1	; 0x01
    ed04:	21 50       	subi	r18, 0x01	; 1
    ed06:	30 40       	sbci	r19, 0x00	; 0
    ed08:	fc 01       	movw	r30, r24
    ed0a:	31 83       	std	Z+1, r19	; 0x01
    ed0c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ed0e:	ce 01       	movw	r24, r28
    ed10:	8f 54       	subi	r24, 0x4F	; 79
    ed12:	9f 4f       	sbci	r25, 0xFF	; 255
    ed14:	fc 01       	movw	r30, r24
    ed16:	80 81       	ld	r24, Z
    ed18:	91 81       	ldd	r25, Z+1	; 0x01
    ed1a:	00 97       	sbiw	r24, 0x00	; 0
    ed1c:	89 f6       	brne	.-94     	; 0xecc0 <travel_path+0x1642>
    ed1e:	2f c0       	rjmp	.+94     	; 0xed7e <travel_path+0x1700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ed20:	8e 01       	movw	r16, r28
    ed22:	0f 54       	subi	r16, 0x4F	; 79
    ed24:	1f 4f       	sbci	r17, 0xFF	; 255
    ed26:	ce 01       	movw	r24, r28
    ed28:	83 55       	subi	r24, 0x53	; 83
    ed2a:	9f 4f       	sbci	r25, 0xFF	; 255
    ed2c:	fc 01       	movw	r30, r24
    ed2e:	60 81       	ld	r22, Z
    ed30:	71 81       	ldd	r23, Z+1	; 0x01
    ed32:	82 81       	ldd	r24, Z+2	; 0x02
    ed34:	93 81       	ldd	r25, Z+3	; 0x03
    ed36:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ed3a:	dc 01       	movw	r26, r24
    ed3c:	cb 01       	movw	r24, r22
    ed3e:	f8 01       	movw	r30, r16
    ed40:	91 83       	std	Z+1, r25	; 0x01
    ed42:	80 83       	st	Z, r24
    ed44:	ce 01       	movw	r24, r28
    ed46:	8b 54       	subi	r24, 0x4B	; 75
    ed48:	9f 4f       	sbci	r25, 0xFF	; 255
    ed4a:	9e 01       	movw	r18, r28
    ed4c:	2f 54       	subi	r18, 0x4F	; 79
    ed4e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed50:	f9 01       	movw	r30, r18
    ed52:	20 81       	ld	r18, Z
    ed54:	31 81       	ldd	r19, Z+1	; 0x01
    ed56:	fc 01       	movw	r30, r24
    ed58:	31 83       	std	Z+1, r19	; 0x01
    ed5a:	20 83       	st	Z, r18
    ed5c:	ce 01       	movw	r24, r28
    ed5e:	8b 54       	subi	r24, 0x4B	; 75
    ed60:	9f 4f       	sbci	r25, 0xFF	; 255
    ed62:	fc 01       	movw	r30, r24
    ed64:	80 81       	ld	r24, Z
    ed66:	91 81       	ldd	r25, Z+1	; 0x01
    ed68:	8c 01       	movw	r16, r24
    ed6a:	c8 01       	movw	r24, r16
    ed6c:	01 97       	sbiw	r24, 0x01	; 1
    ed6e:	f1 f7       	brne	.-4      	; 0xed6c <travel_path+0x16ee>
    ed70:	8c 01       	movw	r16, r24
    ed72:	ce 01       	movw	r24, r28
    ed74:	8b 54       	subi	r24, 0x4B	; 75
    ed76:	9f 4f       	sbci	r25, 0xFF	; 255
    ed78:	fc 01       	movw	r30, r24
    ed7a:	11 83       	std	Z+1, r17	; 0x01
    ed7c:	00 83       	st	Z, r16
							_delay_ms(20);
							forward_mm(160);
    ed7e:	80 ea       	ldi	r24, 0xA0	; 160
    ed80:	90 e0       	ldi	r25, 0x00	; 0
    ed82:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    ed86:	9e 01       	movw	r18, r28
    ed88:	29 54       	subi	r18, 0x49	; 73
    ed8a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed8c:	80 e0       	ldi	r24, 0x00	; 0
    ed8e:	90 e0       	ldi	r25, 0x00	; 0
    ed90:	a0 ea       	ldi	r26, 0xA0	; 160
    ed92:	b1 e4       	ldi	r27, 0x41	; 65
    ed94:	f9 01       	movw	r30, r18
    ed96:	80 83       	st	Z, r24
    ed98:	91 83       	std	Z+1, r25	; 0x01
    ed9a:	a2 83       	std	Z+2, r26	; 0x02
    ed9c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ed9e:	8e 01       	movw	r16, r28
    eda0:	05 54       	subi	r16, 0x45	; 69
    eda2:	1f 4f       	sbci	r17, 0xFF	; 255
    eda4:	ce 01       	movw	r24, r28
    eda6:	89 54       	subi	r24, 0x49	; 73
    eda8:	9f 4f       	sbci	r25, 0xFF	; 255
    edaa:	fc 01       	movw	r30, r24
    edac:	60 81       	ld	r22, Z
    edae:	71 81       	ldd	r23, Z+1	; 0x01
    edb0:	82 81       	ldd	r24, Z+2	; 0x02
    edb2:	93 81       	ldd	r25, Z+3	; 0x03
    edb4:	26 e6       	ldi	r18, 0x66	; 102
    edb6:	36 e6       	ldi	r19, 0x66	; 102
    edb8:	46 e6       	ldi	r20, 0x66	; 102
    edba:	55 e4       	ldi	r21, 0x45	; 69
    edbc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    edc0:	dc 01       	movw	r26, r24
    edc2:	cb 01       	movw	r24, r22
    edc4:	f8 01       	movw	r30, r16
    edc6:	80 83       	st	Z, r24
    edc8:	91 83       	std	Z+1, r25	; 0x01
    edca:	a2 83       	std	Z+2, r26	; 0x02
    edcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    edce:	ce 01       	movw	r24, r28
    edd0:	85 54       	subi	r24, 0x45	; 69
    edd2:	9f 4f       	sbci	r25, 0xFF	; 255
    edd4:	11 e0       	ldi	r17, 0x01	; 1
    edd6:	fc 01       	movw	r30, r24
    edd8:	60 81       	ld	r22, Z
    edda:	71 81       	ldd	r23, Z+1	; 0x01
    eddc:	82 81       	ldd	r24, Z+2	; 0x02
    edde:	93 81       	ldd	r25, Z+3	; 0x03
    ede0:	20 e0       	ldi	r18, 0x00	; 0
    ede2:	30 e0       	ldi	r19, 0x00	; 0
    ede4:	40 e8       	ldi	r20, 0x80	; 128
    ede6:	5f e3       	ldi	r21, 0x3F	; 63
    ede8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    edec:	88 23       	and	r24, r24
    edee:	0c f0       	brlt	.+2      	; 0xedf2 <travel_path+0x1774>
    edf0:	10 e0       	ldi	r17, 0x00	; 0
    edf2:	11 23       	and	r17, r17
    edf4:	49 f0       	breq	.+18     	; 0xee08 <travel_path+0x178a>
		__ticks = 1;
    edf6:	ce 01       	movw	r24, r28
    edf8:	81 54       	subi	r24, 0x41	; 65
    edfa:	9f 4f       	sbci	r25, 0xFF	; 255
    edfc:	21 e0       	ldi	r18, 0x01	; 1
    edfe:	30 e0       	ldi	r19, 0x00	; 0
    ee00:	fc 01       	movw	r30, r24
    ee02:	31 83       	std	Z+1, r19	; 0x01
    ee04:	20 83       	st	Z, r18
    ee06:	74 c0       	rjmp	.+232    	; 0xeef0 <travel_path+0x1872>
	else if (__tmp > 65535)
    ee08:	ce 01       	movw	r24, r28
    ee0a:	85 54       	subi	r24, 0x45	; 69
    ee0c:	9f 4f       	sbci	r25, 0xFF	; 255
    ee0e:	11 e0       	ldi	r17, 0x01	; 1
    ee10:	fc 01       	movw	r30, r24
    ee12:	60 81       	ld	r22, Z
    ee14:	71 81       	ldd	r23, Z+1	; 0x01
    ee16:	82 81       	ldd	r24, Z+2	; 0x02
    ee18:	93 81       	ldd	r25, Z+3	; 0x03
    ee1a:	20 e0       	ldi	r18, 0x00	; 0
    ee1c:	3f ef       	ldi	r19, 0xFF	; 255
    ee1e:	4f e7       	ldi	r20, 0x7F	; 127
    ee20:	57 e4       	ldi	r21, 0x47	; 71
    ee22:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ee26:	18 16       	cp	r1, r24
    ee28:	0c f0       	brlt	.+2      	; 0xee2c <travel_path+0x17ae>
    ee2a:	10 e0       	ldi	r17, 0x00	; 0
    ee2c:	11 23       	and	r17, r17
    ee2e:	09 f4       	brne	.+2      	; 0xee32 <travel_path+0x17b4>
    ee30:	4d c0       	rjmp	.+154    	; 0xeecc <travel_path+0x184e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ee32:	ce 01       	movw	r24, r28
    ee34:	89 54       	subi	r24, 0x49	; 73
    ee36:	9f 4f       	sbci	r25, 0xFF	; 255
    ee38:	fc 01       	movw	r30, r24
    ee3a:	60 81       	ld	r22, Z
    ee3c:	71 81       	ldd	r23, Z+1	; 0x01
    ee3e:	82 81       	ldd	r24, Z+2	; 0x02
    ee40:	93 81       	ldd	r25, Z+3	; 0x03
    ee42:	20 e0       	ldi	r18, 0x00	; 0
    ee44:	30 e0       	ldi	r19, 0x00	; 0
    ee46:	40 e2       	ldi	r20, 0x20	; 32
    ee48:	51 e4       	ldi	r21, 0x41	; 65
    ee4a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ee4e:	dc 01       	movw	r26, r24
    ee50:	cb 01       	movw	r24, r22
    ee52:	8e 01       	movw	r16, r28
    ee54:	01 54       	subi	r16, 0x41	; 65
    ee56:	1f 4f       	sbci	r17, 0xFF	; 255
    ee58:	bc 01       	movw	r22, r24
    ee5a:	cd 01       	movw	r24, r26
    ee5c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ee60:	dc 01       	movw	r26, r24
    ee62:	cb 01       	movw	r24, r22
    ee64:	f8 01       	movw	r30, r16
    ee66:	91 83       	std	Z+1, r25	; 0x01
    ee68:	80 83       	st	Z, r24
    ee6a:	27 c0       	rjmp	.+78     	; 0xeeba <travel_path+0x183c>
    ee6c:	ce 01       	movw	r24, r28
    ee6e:	8f 53       	subi	r24, 0x3F	; 63
    ee70:	9f 4f       	sbci	r25, 0xFF	; 255
    ee72:	20 e7       	ldi	r18, 0x70	; 112
    ee74:	31 e0       	ldi	r19, 0x01	; 1
    ee76:	fc 01       	movw	r30, r24
    ee78:	31 83       	std	Z+1, r19	; 0x01
    ee7a:	20 83       	st	Z, r18
    ee7c:	ce 01       	movw	r24, r28
    ee7e:	8f 53       	subi	r24, 0x3F	; 63
    ee80:	9f 4f       	sbci	r25, 0xFF	; 255
    ee82:	fc 01       	movw	r30, r24
    ee84:	80 81       	ld	r24, Z
    ee86:	91 81       	ldd	r25, Z+1	; 0x01
    ee88:	8c 01       	movw	r16, r24
    ee8a:	c8 01       	movw	r24, r16
    ee8c:	01 97       	sbiw	r24, 0x01	; 1
    ee8e:	f1 f7       	brne	.-4      	; 0xee8c <travel_path+0x180e>
    ee90:	8c 01       	movw	r16, r24
    ee92:	ce 01       	movw	r24, r28
    ee94:	8f 53       	subi	r24, 0x3F	; 63
    ee96:	9f 4f       	sbci	r25, 0xFF	; 255
    ee98:	fc 01       	movw	r30, r24
    ee9a:	11 83       	std	Z+1, r17	; 0x01
    ee9c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ee9e:	ce 01       	movw	r24, r28
    eea0:	81 54       	subi	r24, 0x41	; 65
    eea2:	9f 4f       	sbci	r25, 0xFF	; 255
    eea4:	9e 01       	movw	r18, r28
    eea6:	21 54       	subi	r18, 0x41	; 65
    eea8:	3f 4f       	sbci	r19, 0xFF	; 255
    eeaa:	f9 01       	movw	r30, r18
    eeac:	20 81       	ld	r18, Z
    eeae:	31 81       	ldd	r19, Z+1	; 0x01
    eeb0:	21 50       	subi	r18, 0x01	; 1
    eeb2:	30 40       	sbci	r19, 0x00	; 0
    eeb4:	fc 01       	movw	r30, r24
    eeb6:	31 83       	std	Z+1, r19	; 0x01
    eeb8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    eeba:	ce 01       	movw	r24, r28
    eebc:	81 54       	subi	r24, 0x41	; 65
    eebe:	9f 4f       	sbci	r25, 0xFF	; 255
    eec0:	fc 01       	movw	r30, r24
    eec2:	80 81       	ld	r24, Z
    eec4:	91 81       	ldd	r25, Z+1	; 0x01
    eec6:	00 97       	sbiw	r24, 0x00	; 0
    eec8:	89 f6       	brne	.-94     	; 0xee6c <travel_path+0x17ee>
    eeca:	2f c0       	rjmp	.+94     	; 0xef2a <travel_path+0x18ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    eecc:	8e 01       	movw	r16, r28
    eece:	01 54       	subi	r16, 0x41	; 65
    eed0:	1f 4f       	sbci	r17, 0xFF	; 255
    eed2:	ce 01       	movw	r24, r28
    eed4:	85 54       	subi	r24, 0x45	; 69
    eed6:	9f 4f       	sbci	r25, 0xFF	; 255
    eed8:	fc 01       	movw	r30, r24
    eeda:	60 81       	ld	r22, Z
    eedc:	71 81       	ldd	r23, Z+1	; 0x01
    eede:	82 81       	ldd	r24, Z+2	; 0x02
    eee0:	93 81       	ldd	r25, Z+3	; 0x03
    eee2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    eee6:	dc 01       	movw	r26, r24
    eee8:	cb 01       	movw	r24, r22
    eeea:	f8 01       	movw	r30, r16
    eeec:	91 83       	std	Z+1, r25	; 0x01
    eeee:	80 83       	st	Z, r24
    eef0:	ce 01       	movw	r24, r28
    eef2:	8d 53       	subi	r24, 0x3D	; 61
    eef4:	9f 4f       	sbci	r25, 0xFF	; 255
    eef6:	9e 01       	movw	r18, r28
    eef8:	21 54       	subi	r18, 0x41	; 65
    eefa:	3f 4f       	sbci	r19, 0xFF	; 255
    eefc:	f9 01       	movw	r30, r18
    eefe:	20 81       	ld	r18, Z
    ef00:	31 81       	ldd	r19, Z+1	; 0x01
    ef02:	fc 01       	movw	r30, r24
    ef04:	31 83       	std	Z+1, r19	; 0x01
    ef06:	20 83       	st	Z, r18
    ef08:	ce 01       	movw	r24, r28
    ef0a:	8d 53       	subi	r24, 0x3D	; 61
    ef0c:	9f 4f       	sbci	r25, 0xFF	; 255
    ef0e:	fc 01       	movw	r30, r24
    ef10:	80 81       	ld	r24, Z
    ef12:	91 81       	ldd	r25, Z+1	; 0x01
    ef14:	8c 01       	movw	r16, r24
    ef16:	c8 01       	movw	r24, r16
    ef18:	01 97       	sbiw	r24, 0x01	; 1
    ef1a:	f1 f7       	brne	.-4      	; 0xef18 <travel_path+0x189a>
    ef1c:	8c 01       	movw	r16, r24
    ef1e:	ce 01       	movw	r24, r28
    ef20:	8d 53       	subi	r24, 0x3D	; 61
    ef22:	9f 4f       	sbci	r25, 0xFF	; 255
    ef24:	fc 01       	movw	r30, r24
    ef26:	11 83       	std	Z+1, r17	; 0x01
    ef28:	00 83       	st	Z, r16
							_delay_ms(20);
							spl_left2();
    ef2a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    ef2e:	9e 01       	movw	r18, r28
    ef30:	2b 53       	subi	r18, 0x3B	; 59
    ef32:	3f 4f       	sbci	r19, 0xFF	; 255
    ef34:	80 e0       	ldi	r24, 0x00	; 0
    ef36:	90 e0       	ldi	r25, 0x00	; 0
    ef38:	a0 ea       	ldi	r26, 0xA0	; 160
    ef3a:	b1 e4       	ldi	r27, 0x41	; 65
    ef3c:	f9 01       	movw	r30, r18
    ef3e:	80 83       	st	Z, r24
    ef40:	91 83       	std	Z+1, r25	; 0x01
    ef42:	a2 83       	std	Z+2, r26	; 0x02
    ef44:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ef46:	8e 01       	movw	r16, r28
    ef48:	07 53       	subi	r16, 0x37	; 55
    ef4a:	1f 4f       	sbci	r17, 0xFF	; 255
    ef4c:	ce 01       	movw	r24, r28
    ef4e:	8b 53       	subi	r24, 0x3B	; 59
    ef50:	9f 4f       	sbci	r25, 0xFF	; 255
    ef52:	fc 01       	movw	r30, r24
    ef54:	60 81       	ld	r22, Z
    ef56:	71 81       	ldd	r23, Z+1	; 0x01
    ef58:	82 81       	ldd	r24, Z+2	; 0x02
    ef5a:	93 81       	ldd	r25, Z+3	; 0x03
    ef5c:	26 e6       	ldi	r18, 0x66	; 102
    ef5e:	36 e6       	ldi	r19, 0x66	; 102
    ef60:	46 e6       	ldi	r20, 0x66	; 102
    ef62:	55 e4       	ldi	r21, 0x45	; 69
    ef64:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ef68:	dc 01       	movw	r26, r24
    ef6a:	cb 01       	movw	r24, r22
    ef6c:	f8 01       	movw	r30, r16
    ef6e:	80 83       	st	Z, r24
    ef70:	91 83       	std	Z+1, r25	; 0x01
    ef72:	a2 83       	std	Z+2, r26	; 0x02
    ef74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ef76:	ce 01       	movw	r24, r28
    ef78:	87 53       	subi	r24, 0x37	; 55
    ef7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ef7c:	11 e0       	ldi	r17, 0x01	; 1
    ef7e:	fc 01       	movw	r30, r24
    ef80:	60 81       	ld	r22, Z
    ef82:	71 81       	ldd	r23, Z+1	; 0x01
    ef84:	82 81       	ldd	r24, Z+2	; 0x02
    ef86:	93 81       	ldd	r25, Z+3	; 0x03
    ef88:	20 e0       	ldi	r18, 0x00	; 0
    ef8a:	30 e0       	ldi	r19, 0x00	; 0
    ef8c:	40 e8       	ldi	r20, 0x80	; 128
    ef8e:	5f e3       	ldi	r21, 0x3F	; 63
    ef90:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ef94:	88 23       	and	r24, r24
    ef96:	0c f0       	brlt	.+2      	; 0xef9a <travel_path+0x191c>
    ef98:	10 e0       	ldi	r17, 0x00	; 0
    ef9a:	11 23       	and	r17, r17
    ef9c:	49 f0       	breq	.+18     	; 0xefb0 <travel_path+0x1932>
		__ticks = 1;
    ef9e:	ce 01       	movw	r24, r28
    efa0:	83 53       	subi	r24, 0x33	; 51
    efa2:	9f 4f       	sbci	r25, 0xFF	; 255
    efa4:	21 e0       	ldi	r18, 0x01	; 1
    efa6:	30 e0       	ldi	r19, 0x00	; 0
    efa8:	fc 01       	movw	r30, r24
    efaa:	31 83       	std	Z+1, r19	; 0x01
    efac:	20 83       	st	Z, r18
    efae:	74 c0       	rjmp	.+232    	; 0xf098 <travel_path+0x1a1a>
	else if (__tmp > 65535)
    efb0:	ce 01       	movw	r24, r28
    efb2:	87 53       	subi	r24, 0x37	; 55
    efb4:	9f 4f       	sbci	r25, 0xFF	; 255
    efb6:	11 e0       	ldi	r17, 0x01	; 1
    efb8:	fc 01       	movw	r30, r24
    efba:	60 81       	ld	r22, Z
    efbc:	71 81       	ldd	r23, Z+1	; 0x01
    efbe:	82 81       	ldd	r24, Z+2	; 0x02
    efc0:	93 81       	ldd	r25, Z+3	; 0x03
    efc2:	20 e0       	ldi	r18, 0x00	; 0
    efc4:	3f ef       	ldi	r19, 0xFF	; 255
    efc6:	4f e7       	ldi	r20, 0x7F	; 127
    efc8:	57 e4       	ldi	r21, 0x47	; 71
    efca:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    efce:	18 16       	cp	r1, r24
    efd0:	0c f0       	brlt	.+2      	; 0xefd4 <travel_path+0x1956>
    efd2:	10 e0       	ldi	r17, 0x00	; 0
    efd4:	11 23       	and	r17, r17
    efd6:	09 f4       	brne	.+2      	; 0xefda <travel_path+0x195c>
    efd8:	4d c0       	rjmp	.+154    	; 0xf074 <travel_path+0x19f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    efda:	ce 01       	movw	r24, r28
    efdc:	8b 53       	subi	r24, 0x3B	; 59
    efde:	9f 4f       	sbci	r25, 0xFF	; 255
    efe0:	fc 01       	movw	r30, r24
    efe2:	60 81       	ld	r22, Z
    efe4:	71 81       	ldd	r23, Z+1	; 0x01
    efe6:	82 81       	ldd	r24, Z+2	; 0x02
    efe8:	93 81       	ldd	r25, Z+3	; 0x03
    efea:	20 e0       	ldi	r18, 0x00	; 0
    efec:	30 e0       	ldi	r19, 0x00	; 0
    efee:	40 e2       	ldi	r20, 0x20	; 32
    eff0:	51 e4       	ldi	r21, 0x41	; 65
    eff2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    eff6:	dc 01       	movw	r26, r24
    eff8:	cb 01       	movw	r24, r22
    effa:	8e 01       	movw	r16, r28
    effc:	03 53       	subi	r16, 0x33	; 51
    effe:	1f 4f       	sbci	r17, 0xFF	; 255
    f000:	bc 01       	movw	r22, r24
    f002:	cd 01       	movw	r24, r26
    f004:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f008:	dc 01       	movw	r26, r24
    f00a:	cb 01       	movw	r24, r22
    f00c:	f8 01       	movw	r30, r16
    f00e:	91 83       	std	Z+1, r25	; 0x01
    f010:	80 83       	st	Z, r24
    f012:	27 c0       	rjmp	.+78     	; 0xf062 <travel_path+0x19e4>
    f014:	ce 01       	movw	r24, r28
    f016:	81 53       	subi	r24, 0x31	; 49
    f018:	9f 4f       	sbci	r25, 0xFF	; 255
    f01a:	20 e7       	ldi	r18, 0x70	; 112
    f01c:	31 e0       	ldi	r19, 0x01	; 1
    f01e:	fc 01       	movw	r30, r24
    f020:	31 83       	std	Z+1, r19	; 0x01
    f022:	20 83       	st	Z, r18
    f024:	ce 01       	movw	r24, r28
    f026:	81 53       	subi	r24, 0x31	; 49
    f028:	9f 4f       	sbci	r25, 0xFF	; 255
    f02a:	fc 01       	movw	r30, r24
    f02c:	80 81       	ld	r24, Z
    f02e:	91 81       	ldd	r25, Z+1	; 0x01
    f030:	8c 01       	movw	r16, r24
    f032:	c8 01       	movw	r24, r16
    f034:	01 97       	sbiw	r24, 0x01	; 1
    f036:	f1 f7       	brne	.-4      	; 0xf034 <travel_path+0x19b6>
    f038:	8c 01       	movw	r16, r24
    f03a:	ce 01       	movw	r24, r28
    f03c:	81 53       	subi	r24, 0x31	; 49
    f03e:	9f 4f       	sbci	r25, 0xFF	; 255
    f040:	fc 01       	movw	r30, r24
    f042:	11 83       	std	Z+1, r17	; 0x01
    f044:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f046:	ce 01       	movw	r24, r28
    f048:	83 53       	subi	r24, 0x33	; 51
    f04a:	9f 4f       	sbci	r25, 0xFF	; 255
    f04c:	9e 01       	movw	r18, r28
    f04e:	23 53       	subi	r18, 0x33	; 51
    f050:	3f 4f       	sbci	r19, 0xFF	; 255
    f052:	f9 01       	movw	r30, r18
    f054:	20 81       	ld	r18, Z
    f056:	31 81       	ldd	r19, Z+1	; 0x01
    f058:	21 50       	subi	r18, 0x01	; 1
    f05a:	30 40       	sbci	r19, 0x00	; 0
    f05c:	fc 01       	movw	r30, r24
    f05e:	31 83       	std	Z+1, r19	; 0x01
    f060:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f062:	ce 01       	movw	r24, r28
    f064:	83 53       	subi	r24, 0x33	; 51
    f066:	9f 4f       	sbci	r25, 0xFF	; 255
    f068:	fc 01       	movw	r30, r24
    f06a:	80 81       	ld	r24, Z
    f06c:	91 81       	ldd	r25, Z+1	; 0x01
    f06e:	00 97       	sbiw	r24, 0x00	; 0
    f070:	89 f6       	brne	.-94     	; 0xf014 <travel_path+0x1996>
    f072:	8f c3       	rjmp	.+1822   	; 0xf792 <travel_path+0x2114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f074:	8e 01       	movw	r16, r28
    f076:	03 53       	subi	r16, 0x33	; 51
    f078:	1f 4f       	sbci	r17, 0xFF	; 255
    f07a:	ce 01       	movw	r24, r28
    f07c:	87 53       	subi	r24, 0x37	; 55
    f07e:	9f 4f       	sbci	r25, 0xFF	; 255
    f080:	fc 01       	movw	r30, r24
    f082:	60 81       	ld	r22, Z
    f084:	71 81       	ldd	r23, Z+1	; 0x01
    f086:	82 81       	ldd	r24, Z+2	; 0x02
    f088:	93 81       	ldd	r25, Z+3	; 0x03
    f08a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f08e:	dc 01       	movw	r26, r24
    f090:	cb 01       	movw	r24, r22
    f092:	f8 01       	movw	r30, r16
    f094:	91 83       	std	Z+1, r25	; 0x01
    f096:	80 83       	st	Z, r24
    f098:	ce 01       	movw	r24, r28
    f09a:	8f 52       	subi	r24, 0x2F	; 47
    f09c:	9f 4f       	sbci	r25, 0xFF	; 255
    f09e:	9e 01       	movw	r18, r28
    f0a0:	23 53       	subi	r18, 0x33	; 51
    f0a2:	3f 4f       	sbci	r19, 0xFF	; 255
    f0a4:	f9 01       	movw	r30, r18
    f0a6:	20 81       	ld	r18, Z
    f0a8:	31 81       	ldd	r19, Z+1	; 0x01
    f0aa:	fc 01       	movw	r30, r24
    f0ac:	31 83       	std	Z+1, r19	; 0x01
    f0ae:	20 83       	st	Z, r18
    f0b0:	ce 01       	movw	r24, r28
    f0b2:	8f 52       	subi	r24, 0x2F	; 47
    f0b4:	9f 4f       	sbci	r25, 0xFF	; 255
    f0b6:	fc 01       	movw	r30, r24
    f0b8:	80 81       	ld	r24, Z
    f0ba:	91 81       	ldd	r25, Z+1	; 0x01
    f0bc:	8c 01       	movw	r16, r24
    f0be:	c8 01       	movw	r24, r16
    f0c0:	01 97       	sbiw	r24, 0x01	; 1
    f0c2:	f1 f7       	brne	.-4      	; 0xf0c0 <travel_path+0x1a42>
    f0c4:	8c 01       	movw	r16, r24
    f0c6:	ce 01       	movw	r24, r28
    f0c8:	8f 52       	subi	r24, 0x2F	; 47
    f0ca:	9f 4f       	sbci	r25, 0xFF	; 255
    f0cc:	fc 01       	movw	r30, r24
    f0ce:	11 83       	std	Z+1, r17	; 0x01
    f0d0:	00 83       	st	Z, r16
    f0d2:	5f c3       	rjmp	.+1726   	; 0xf792 <travel_path+0x2114>
							_delay_ms(20);
						}
						else if(master_path[node+1]=='3')
    f0d4:	80 91 71 03 	lds	r24, 0x0371
    f0d8:	90 91 72 03 	lds	r25, 0x0372
    f0dc:	01 96       	adiw	r24, 0x01	; 1
    f0de:	8b 58       	subi	r24, 0x8B	; 139
    f0e0:	9c 4f       	sbci	r25, 0xFC	; 252
    f0e2:	fc 01       	movw	r30, r24
    f0e4:	80 81       	ld	r24, Z
    f0e6:	83 33       	cpi	r24, 0x33	; 51
    f0e8:	09 f0       	breq	.+2      	; 0xf0ec <travel_path+0x1a6e>
    f0ea:	7f c2       	rjmp	.+1278   	; 0xf5ea <travel_path+0x1f6c>
						{
						stop();
    f0ec:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f0f0:	9e 01       	movw	r18, r28
    f0f2:	2d 52       	subi	r18, 0x2D	; 45
    f0f4:	3f 4f       	sbci	r19, 0xFF	; 255
    f0f6:	80 e0       	ldi	r24, 0x00	; 0
    f0f8:	90 e0       	ldi	r25, 0x00	; 0
    f0fa:	a0 ea       	ldi	r26, 0xA0	; 160
    f0fc:	b1 e4       	ldi	r27, 0x41	; 65
    f0fe:	f9 01       	movw	r30, r18
    f100:	80 83       	st	Z, r24
    f102:	91 83       	std	Z+1, r25	; 0x01
    f104:	a2 83       	std	Z+2, r26	; 0x02
    f106:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f108:	8e 01       	movw	r16, r28
    f10a:	09 52       	subi	r16, 0x29	; 41
    f10c:	1f 4f       	sbci	r17, 0xFF	; 255
    f10e:	ce 01       	movw	r24, r28
    f110:	8d 52       	subi	r24, 0x2D	; 45
    f112:	9f 4f       	sbci	r25, 0xFF	; 255
    f114:	fc 01       	movw	r30, r24
    f116:	60 81       	ld	r22, Z
    f118:	71 81       	ldd	r23, Z+1	; 0x01
    f11a:	82 81       	ldd	r24, Z+2	; 0x02
    f11c:	93 81       	ldd	r25, Z+3	; 0x03
    f11e:	26 e6       	ldi	r18, 0x66	; 102
    f120:	36 e6       	ldi	r19, 0x66	; 102
    f122:	46 e6       	ldi	r20, 0x66	; 102
    f124:	55 e4       	ldi	r21, 0x45	; 69
    f126:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f12a:	dc 01       	movw	r26, r24
    f12c:	cb 01       	movw	r24, r22
    f12e:	f8 01       	movw	r30, r16
    f130:	80 83       	st	Z, r24
    f132:	91 83       	std	Z+1, r25	; 0x01
    f134:	a2 83       	std	Z+2, r26	; 0x02
    f136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f138:	ce 01       	movw	r24, r28
    f13a:	89 52       	subi	r24, 0x29	; 41
    f13c:	9f 4f       	sbci	r25, 0xFF	; 255
    f13e:	11 e0       	ldi	r17, 0x01	; 1
    f140:	fc 01       	movw	r30, r24
    f142:	60 81       	ld	r22, Z
    f144:	71 81       	ldd	r23, Z+1	; 0x01
    f146:	82 81       	ldd	r24, Z+2	; 0x02
    f148:	93 81       	ldd	r25, Z+3	; 0x03
    f14a:	20 e0       	ldi	r18, 0x00	; 0
    f14c:	30 e0       	ldi	r19, 0x00	; 0
    f14e:	40 e8       	ldi	r20, 0x80	; 128
    f150:	5f e3       	ldi	r21, 0x3F	; 63
    f152:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    f156:	88 23       	and	r24, r24
    f158:	0c f0       	brlt	.+2      	; 0xf15c <travel_path+0x1ade>
    f15a:	10 e0       	ldi	r17, 0x00	; 0
    f15c:	11 23       	and	r17, r17
    f15e:	49 f0       	breq	.+18     	; 0xf172 <travel_path+0x1af4>
		__ticks = 1;
    f160:	ce 01       	movw	r24, r28
    f162:	85 52       	subi	r24, 0x25	; 37
    f164:	9f 4f       	sbci	r25, 0xFF	; 255
    f166:	21 e0       	ldi	r18, 0x01	; 1
    f168:	30 e0       	ldi	r19, 0x00	; 0
    f16a:	fc 01       	movw	r30, r24
    f16c:	31 83       	std	Z+1, r19	; 0x01
    f16e:	20 83       	st	Z, r18
    f170:	74 c0       	rjmp	.+232    	; 0xf25a <travel_path+0x1bdc>
	else if (__tmp > 65535)
    f172:	ce 01       	movw	r24, r28
    f174:	89 52       	subi	r24, 0x29	; 41
    f176:	9f 4f       	sbci	r25, 0xFF	; 255
    f178:	11 e0       	ldi	r17, 0x01	; 1
    f17a:	fc 01       	movw	r30, r24
    f17c:	60 81       	ld	r22, Z
    f17e:	71 81       	ldd	r23, Z+1	; 0x01
    f180:	82 81       	ldd	r24, Z+2	; 0x02
    f182:	93 81       	ldd	r25, Z+3	; 0x03
    f184:	20 e0       	ldi	r18, 0x00	; 0
    f186:	3f ef       	ldi	r19, 0xFF	; 255
    f188:	4f e7       	ldi	r20, 0x7F	; 127
    f18a:	57 e4       	ldi	r21, 0x47	; 71
    f18c:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    f190:	18 16       	cp	r1, r24
    f192:	0c f0       	brlt	.+2      	; 0xf196 <travel_path+0x1b18>
    f194:	10 e0       	ldi	r17, 0x00	; 0
    f196:	11 23       	and	r17, r17
    f198:	09 f4       	brne	.+2      	; 0xf19c <travel_path+0x1b1e>
    f19a:	4d c0       	rjmp	.+154    	; 0xf236 <travel_path+0x1bb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f19c:	ce 01       	movw	r24, r28
    f19e:	8d 52       	subi	r24, 0x2D	; 45
    f1a0:	9f 4f       	sbci	r25, 0xFF	; 255
    f1a2:	fc 01       	movw	r30, r24
    f1a4:	60 81       	ld	r22, Z
    f1a6:	71 81       	ldd	r23, Z+1	; 0x01
    f1a8:	82 81       	ldd	r24, Z+2	; 0x02
    f1aa:	93 81       	ldd	r25, Z+3	; 0x03
    f1ac:	20 e0       	ldi	r18, 0x00	; 0
    f1ae:	30 e0       	ldi	r19, 0x00	; 0
    f1b0:	40 e2       	ldi	r20, 0x20	; 32
    f1b2:	51 e4       	ldi	r21, 0x41	; 65
    f1b4:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f1b8:	dc 01       	movw	r26, r24
    f1ba:	cb 01       	movw	r24, r22
    f1bc:	8e 01       	movw	r16, r28
    f1be:	05 52       	subi	r16, 0x25	; 37
    f1c0:	1f 4f       	sbci	r17, 0xFF	; 255
    f1c2:	bc 01       	movw	r22, r24
    f1c4:	cd 01       	movw	r24, r26
    f1c6:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f1ca:	dc 01       	movw	r26, r24
    f1cc:	cb 01       	movw	r24, r22
    f1ce:	f8 01       	movw	r30, r16
    f1d0:	91 83       	std	Z+1, r25	; 0x01
    f1d2:	80 83       	st	Z, r24
    f1d4:	27 c0       	rjmp	.+78     	; 0xf224 <travel_path+0x1ba6>
    f1d6:	ce 01       	movw	r24, r28
    f1d8:	83 52       	subi	r24, 0x23	; 35
    f1da:	9f 4f       	sbci	r25, 0xFF	; 255
    f1dc:	20 e7       	ldi	r18, 0x70	; 112
    f1de:	31 e0       	ldi	r19, 0x01	; 1
    f1e0:	fc 01       	movw	r30, r24
    f1e2:	31 83       	std	Z+1, r19	; 0x01
    f1e4:	20 83       	st	Z, r18
    f1e6:	ce 01       	movw	r24, r28
    f1e8:	83 52       	subi	r24, 0x23	; 35
    f1ea:	9f 4f       	sbci	r25, 0xFF	; 255
    f1ec:	fc 01       	movw	r30, r24
    f1ee:	80 81       	ld	r24, Z
    f1f0:	91 81       	ldd	r25, Z+1	; 0x01
    f1f2:	8c 01       	movw	r16, r24
    f1f4:	c8 01       	movw	r24, r16
    f1f6:	01 97       	sbiw	r24, 0x01	; 1
    f1f8:	f1 f7       	brne	.-4      	; 0xf1f6 <travel_path+0x1b78>
    f1fa:	8c 01       	movw	r16, r24
    f1fc:	ce 01       	movw	r24, r28
    f1fe:	83 52       	subi	r24, 0x23	; 35
    f200:	9f 4f       	sbci	r25, 0xFF	; 255
    f202:	fc 01       	movw	r30, r24
    f204:	11 83       	std	Z+1, r17	; 0x01
    f206:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f208:	ce 01       	movw	r24, r28
    f20a:	85 52       	subi	r24, 0x25	; 37
    f20c:	9f 4f       	sbci	r25, 0xFF	; 255
    f20e:	9e 01       	movw	r18, r28
    f210:	25 52       	subi	r18, 0x25	; 37
    f212:	3f 4f       	sbci	r19, 0xFF	; 255
    f214:	f9 01       	movw	r30, r18
    f216:	20 81       	ld	r18, Z
    f218:	31 81       	ldd	r19, Z+1	; 0x01
    f21a:	21 50       	subi	r18, 0x01	; 1
    f21c:	30 40       	sbci	r19, 0x00	; 0
    f21e:	fc 01       	movw	r30, r24
    f220:	31 83       	std	Z+1, r19	; 0x01
    f222:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f224:	ce 01       	movw	r24, r28
    f226:	85 52       	subi	r24, 0x25	; 37
    f228:	9f 4f       	sbci	r25, 0xFF	; 255
    f22a:	fc 01       	movw	r30, r24
    f22c:	80 81       	ld	r24, Z
    f22e:	91 81       	ldd	r25, Z+1	; 0x01
    f230:	00 97       	sbiw	r24, 0x00	; 0
    f232:	89 f6       	brne	.-94     	; 0xf1d6 <travel_path+0x1b58>
    f234:	2f c0       	rjmp	.+94     	; 0xf294 <travel_path+0x1c16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f236:	8e 01       	movw	r16, r28
    f238:	05 52       	subi	r16, 0x25	; 37
    f23a:	1f 4f       	sbci	r17, 0xFF	; 255
    f23c:	ce 01       	movw	r24, r28
    f23e:	89 52       	subi	r24, 0x29	; 41
    f240:	9f 4f       	sbci	r25, 0xFF	; 255
    f242:	fc 01       	movw	r30, r24
    f244:	60 81       	ld	r22, Z
    f246:	71 81       	ldd	r23, Z+1	; 0x01
    f248:	82 81       	ldd	r24, Z+2	; 0x02
    f24a:	93 81       	ldd	r25, Z+3	; 0x03
    f24c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f250:	dc 01       	movw	r26, r24
    f252:	cb 01       	movw	r24, r22
    f254:	f8 01       	movw	r30, r16
    f256:	91 83       	std	Z+1, r25	; 0x01
    f258:	80 83       	st	Z, r24
    f25a:	ce 01       	movw	r24, r28
    f25c:	81 52       	subi	r24, 0x21	; 33
    f25e:	9f 4f       	sbci	r25, 0xFF	; 255
    f260:	9e 01       	movw	r18, r28
    f262:	25 52       	subi	r18, 0x25	; 37
    f264:	3f 4f       	sbci	r19, 0xFF	; 255
    f266:	f9 01       	movw	r30, r18
    f268:	20 81       	ld	r18, Z
    f26a:	31 81       	ldd	r19, Z+1	; 0x01
    f26c:	fc 01       	movw	r30, r24
    f26e:	31 83       	std	Z+1, r19	; 0x01
    f270:	20 83       	st	Z, r18
    f272:	ce 01       	movw	r24, r28
    f274:	81 52       	subi	r24, 0x21	; 33
    f276:	9f 4f       	sbci	r25, 0xFF	; 255
    f278:	fc 01       	movw	r30, r24
    f27a:	80 81       	ld	r24, Z
    f27c:	91 81       	ldd	r25, Z+1	; 0x01
    f27e:	8c 01       	movw	r16, r24
    f280:	c8 01       	movw	r24, r16
    f282:	01 97       	sbiw	r24, 0x01	; 1
    f284:	f1 f7       	brne	.-4      	; 0xf282 <travel_path+0x1c04>
    f286:	8c 01       	movw	r16, r24
    f288:	ce 01       	movw	r24, r28
    f28a:	81 52       	subi	r24, 0x21	; 33
    f28c:	9f 4f       	sbci	r25, 0xFF	; 255
    f28e:	fc 01       	movw	r30, r24
    f290:	11 83       	std	Z+1, r17	; 0x01
    f292:	00 83       	st	Z, r16
						_delay_ms(20);
						forward_mm(160);
    f294:	80 ea       	ldi	r24, 0xA0	; 160
    f296:	90 e0       	ldi	r25, 0x00	; 0
    f298:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    f29c:	9e 01       	movw	r18, r28
    f29e:	2f 51       	subi	r18, 0x1F	; 31
    f2a0:	3f 4f       	sbci	r19, 0xFF	; 255
    f2a2:	80 e0       	ldi	r24, 0x00	; 0
    f2a4:	90 e0       	ldi	r25, 0x00	; 0
    f2a6:	a0 ea       	ldi	r26, 0xA0	; 160
    f2a8:	b1 e4       	ldi	r27, 0x41	; 65
    f2aa:	f9 01       	movw	r30, r18
    f2ac:	80 83       	st	Z, r24
    f2ae:	91 83       	std	Z+1, r25	; 0x01
    f2b0:	a2 83       	std	Z+2, r26	; 0x02
    f2b2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f2b4:	8e 01       	movw	r16, r28
    f2b6:	0b 51       	subi	r16, 0x1B	; 27
    f2b8:	1f 4f       	sbci	r17, 0xFF	; 255
    f2ba:	ce 01       	movw	r24, r28
    f2bc:	8f 51       	subi	r24, 0x1F	; 31
    f2be:	9f 4f       	sbci	r25, 0xFF	; 255
    f2c0:	fc 01       	movw	r30, r24
    f2c2:	60 81       	ld	r22, Z
    f2c4:	71 81       	ldd	r23, Z+1	; 0x01
    f2c6:	82 81       	ldd	r24, Z+2	; 0x02
    f2c8:	93 81       	ldd	r25, Z+3	; 0x03
    f2ca:	26 e6       	ldi	r18, 0x66	; 102
    f2cc:	36 e6       	ldi	r19, 0x66	; 102
    f2ce:	46 e6       	ldi	r20, 0x66	; 102
    f2d0:	55 e4       	ldi	r21, 0x45	; 69
    f2d2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f2d6:	dc 01       	movw	r26, r24
    f2d8:	cb 01       	movw	r24, r22
    f2da:	f8 01       	movw	r30, r16
    f2dc:	80 83       	st	Z, r24
    f2de:	91 83       	std	Z+1, r25	; 0x01
    f2e0:	a2 83       	std	Z+2, r26	; 0x02
    f2e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f2e4:	ce 01       	movw	r24, r28
    f2e6:	8b 51       	subi	r24, 0x1B	; 27
    f2e8:	9f 4f       	sbci	r25, 0xFF	; 255
    f2ea:	11 e0       	ldi	r17, 0x01	; 1
    f2ec:	fc 01       	movw	r30, r24
    f2ee:	60 81       	ld	r22, Z
    f2f0:	71 81       	ldd	r23, Z+1	; 0x01
    f2f2:	82 81       	ldd	r24, Z+2	; 0x02
    f2f4:	93 81       	ldd	r25, Z+3	; 0x03
    f2f6:	20 e0       	ldi	r18, 0x00	; 0
    f2f8:	30 e0       	ldi	r19, 0x00	; 0
    f2fa:	40 e8       	ldi	r20, 0x80	; 128
    f2fc:	5f e3       	ldi	r21, 0x3F	; 63
    f2fe:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    f302:	88 23       	and	r24, r24
    f304:	0c f0       	brlt	.+2      	; 0xf308 <travel_path+0x1c8a>
    f306:	10 e0       	ldi	r17, 0x00	; 0
    f308:	11 23       	and	r17, r17
    f30a:	49 f0       	breq	.+18     	; 0xf31e <travel_path+0x1ca0>
		__ticks = 1;
    f30c:	ce 01       	movw	r24, r28
    f30e:	87 51       	subi	r24, 0x17	; 23
    f310:	9f 4f       	sbci	r25, 0xFF	; 255
    f312:	21 e0       	ldi	r18, 0x01	; 1
    f314:	30 e0       	ldi	r19, 0x00	; 0
    f316:	fc 01       	movw	r30, r24
    f318:	31 83       	std	Z+1, r19	; 0x01
    f31a:	20 83       	st	Z, r18
    f31c:	74 c0       	rjmp	.+232    	; 0xf406 <travel_path+0x1d88>
	else if (__tmp > 65535)
    f31e:	ce 01       	movw	r24, r28
    f320:	8b 51       	subi	r24, 0x1B	; 27
    f322:	9f 4f       	sbci	r25, 0xFF	; 255
    f324:	11 e0       	ldi	r17, 0x01	; 1
    f326:	fc 01       	movw	r30, r24
    f328:	60 81       	ld	r22, Z
    f32a:	71 81       	ldd	r23, Z+1	; 0x01
    f32c:	82 81       	ldd	r24, Z+2	; 0x02
    f32e:	93 81       	ldd	r25, Z+3	; 0x03
    f330:	20 e0       	ldi	r18, 0x00	; 0
    f332:	3f ef       	ldi	r19, 0xFF	; 255
    f334:	4f e7       	ldi	r20, 0x7F	; 127
    f336:	57 e4       	ldi	r21, 0x47	; 71
    f338:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    f33c:	18 16       	cp	r1, r24
    f33e:	0c f0       	brlt	.+2      	; 0xf342 <travel_path+0x1cc4>
    f340:	10 e0       	ldi	r17, 0x00	; 0
    f342:	11 23       	and	r17, r17
    f344:	09 f4       	brne	.+2      	; 0xf348 <travel_path+0x1cca>
    f346:	4d c0       	rjmp	.+154    	; 0xf3e2 <travel_path+0x1d64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f348:	ce 01       	movw	r24, r28
    f34a:	8f 51       	subi	r24, 0x1F	; 31
    f34c:	9f 4f       	sbci	r25, 0xFF	; 255
    f34e:	fc 01       	movw	r30, r24
    f350:	60 81       	ld	r22, Z
    f352:	71 81       	ldd	r23, Z+1	; 0x01
    f354:	82 81       	ldd	r24, Z+2	; 0x02
    f356:	93 81       	ldd	r25, Z+3	; 0x03
    f358:	20 e0       	ldi	r18, 0x00	; 0
    f35a:	30 e0       	ldi	r19, 0x00	; 0
    f35c:	40 e2       	ldi	r20, 0x20	; 32
    f35e:	51 e4       	ldi	r21, 0x41	; 65
    f360:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f364:	dc 01       	movw	r26, r24
    f366:	cb 01       	movw	r24, r22
    f368:	8e 01       	movw	r16, r28
    f36a:	07 51       	subi	r16, 0x17	; 23
    f36c:	1f 4f       	sbci	r17, 0xFF	; 255
    f36e:	bc 01       	movw	r22, r24
    f370:	cd 01       	movw	r24, r26
    f372:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f376:	dc 01       	movw	r26, r24
    f378:	cb 01       	movw	r24, r22
    f37a:	f8 01       	movw	r30, r16
    f37c:	91 83       	std	Z+1, r25	; 0x01
    f37e:	80 83       	st	Z, r24
    f380:	27 c0       	rjmp	.+78     	; 0xf3d0 <travel_path+0x1d52>
    f382:	ce 01       	movw	r24, r28
    f384:	85 51       	subi	r24, 0x15	; 21
    f386:	9f 4f       	sbci	r25, 0xFF	; 255
    f388:	20 e7       	ldi	r18, 0x70	; 112
    f38a:	31 e0       	ldi	r19, 0x01	; 1
    f38c:	fc 01       	movw	r30, r24
    f38e:	31 83       	std	Z+1, r19	; 0x01
    f390:	20 83       	st	Z, r18
    f392:	ce 01       	movw	r24, r28
    f394:	85 51       	subi	r24, 0x15	; 21
    f396:	9f 4f       	sbci	r25, 0xFF	; 255
    f398:	fc 01       	movw	r30, r24
    f39a:	80 81       	ld	r24, Z
    f39c:	91 81       	ldd	r25, Z+1	; 0x01
    f39e:	8c 01       	movw	r16, r24
    f3a0:	c8 01       	movw	r24, r16
    f3a2:	01 97       	sbiw	r24, 0x01	; 1
    f3a4:	f1 f7       	brne	.-4      	; 0xf3a2 <travel_path+0x1d24>
    f3a6:	8c 01       	movw	r16, r24
    f3a8:	ce 01       	movw	r24, r28
    f3aa:	85 51       	subi	r24, 0x15	; 21
    f3ac:	9f 4f       	sbci	r25, 0xFF	; 255
    f3ae:	fc 01       	movw	r30, r24
    f3b0:	11 83       	std	Z+1, r17	; 0x01
    f3b2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f3b4:	ce 01       	movw	r24, r28
    f3b6:	87 51       	subi	r24, 0x17	; 23
    f3b8:	9f 4f       	sbci	r25, 0xFF	; 255
    f3ba:	9e 01       	movw	r18, r28
    f3bc:	27 51       	subi	r18, 0x17	; 23
    f3be:	3f 4f       	sbci	r19, 0xFF	; 255
    f3c0:	f9 01       	movw	r30, r18
    f3c2:	20 81       	ld	r18, Z
    f3c4:	31 81       	ldd	r19, Z+1	; 0x01
    f3c6:	21 50       	subi	r18, 0x01	; 1
    f3c8:	30 40       	sbci	r19, 0x00	; 0
    f3ca:	fc 01       	movw	r30, r24
    f3cc:	31 83       	std	Z+1, r19	; 0x01
    f3ce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f3d0:	ce 01       	movw	r24, r28
    f3d2:	87 51       	subi	r24, 0x17	; 23
    f3d4:	9f 4f       	sbci	r25, 0xFF	; 255
    f3d6:	fc 01       	movw	r30, r24
    f3d8:	80 81       	ld	r24, Z
    f3da:	91 81       	ldd	r25, Z+1	; 0x01
    f3dc:	00 97       	sbiw	r24, 0x00	; 0
    f3de:	89 f6       	brne	.-94     	; 0xf382 <travel_path+0x1d04>
    f3e0:	2f c0       	rjmp	.+94     	; 0xf440 <travel_path+0x1dc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f3e2:	8e 01       	movw	r16, r28
    f3e4:	07 51       	subi	r16, 0x17	; 23
    f3e6:	1f 4f       	sbci	r17, 0xFF	; 255
    f3e8:	ce 01       	movw	r24, r28
    f3ea:	8b 51       	subi	r24, 0x1B	; 27
    f3ec:	9f 4f       	sbci	r25, 0xFF	; 255
    f3ee:	fc 01       	movw	r30, r24
    f3f0:	60 81       	ld	r22, Z
    f3f2:	71 81       	ldd	r23, Z+1	; 0x01
    f3f4:	82 81       	ldd	r24, Z+2	; 0x02
    f3f6:	93 81       	ldd	r25, Z+3	; 0x03
    f3f8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f3fc:	dc 01       	movw	r26, r24
    f3fe:	cb 01       	movw	r24, r22
    f400:	f8 01       	movw	r30, r16
    f402:	91 83       	std	Z+1, r25	; 0x01
    f404:	80 83       	st	Z, r24
    f406:	ce 01       	movw	r24, r28
    f408:	83 51       	subi	r24, 0x13	; 19
    f40a:	9f 4f       	sbci	r25, 0xFF	; 255
    f40c:	9e 01       	movw	r18, r28
    f40e:	27 51       	subi	r18, 0x17	; 23
    f410:	3f 4f       	sbci	r19, 0xFF	; 255
    f412:	f9 01       	movw	r30, r18
    f414:	20 81       	ld	r18, Z
    f416:	31 81       	ldd	r19, Z+1	; 0x01
    f418:	fc 01       	movw	r30, r24
    f41a:	31 83       	std	Z+1, r19	; 0x01
    f41c:	20 83       	st	Z, r18
    f41e:	ce 01       	movw	r24, r28
    f420:	83 51       	subi	r24, 0x13	; 19
    f422:	9f 4f       	sbci	r25, 0xFF	; 255
    f424:	fc 01       	movw	r30, r24
    f426:	80 81       	ld	r24, Z
    f428:	91 81       	ldd	r25, Z+1	; 0x01
    f42a:	8c 01       	movw	r16, r24
    f42c:	c8 01       	movw	r24, r16
    f42e:	01 97       	sbiw	r24, 0x01	; 1
    f430:	f1 f7       	brne	.-4      	; 0xf42e <travel_path+0x1db0>
    f432:	8c 01       	movw	r16, r24
    f434:	ce 01       	movw	r24, r28
    f436:	83 51       	subi	r24, 0x13	; 19
    f438:	9f 4f       	sbci	r25, 0xFF	; 255
    f43a:	fc 01       	movw	r30, r24
    f43c:	11 83       	std	Z+1, r17	; 0x01
    f43e:	00 83       	st	Z, r16
						_delay_ms(20);
						spl_right2();
    f440:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    f444:	9e 01       	movw	r18, r28
    f446:	21 51       	subi	r18, 0x11	; 17
    f448:	3f 4f       	sbci	r19, 0xFF	; 255
    f44a:	80 e0       	ldi	r24, 0x00	; 0
    f44c:	90 e0       	ldi	r25, 0x00	; 0
    f44e:	a0 ea       	ldi	r26, 0xA0	; 160
    f450:	b1 e4       	ldi	r27, 0x41	; 65
    f452:	f9 01       	movw	r30, r18
    f454:	80 83       	st	Z, r24
    f456:	91 83       	std	Z+1, r25	; 0x01
    f458:	a2 83       	std	Z+2, r26	; 0x02
    f45a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f45c:	8e 01       	movw	r16, r28
    f45e:	0d 50       	subi	r16, 0x0D	; 13
    f460:	1f 4f       	sbci	r17, 0xFF	; 255
    f462:	ce 01       	movw	r24, r28
    f464:	81 51       	subi	r24, 0x11	; 17
    f466:	9f 4f       	sbci	r25, 0xFF	; 255
    f468:	fc 01       	movw	r30, r24
    f46a:	60 81       	ld	r22, Z
    f46c:	71 81       	ldd	r23, Z+1	; 0x01
    f46e:	82 81       	ldd	r24, Z+2	; 0x02
    f470:	93 81       	ldd	r25, Z+3	; 0x03
    f472:	26 e6       	ldi	r18, 0x66	; 102
    f474:	36 e6       	ldi	r19, 0x66	; 102
    f476:	46 e6       	ldi	r20, 0x66	; 102
    f478:	55 e4       	ldi	r21, 0x45	; 69
    f47a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f47e:	dc 01       	movw	r26, r24
    f480:	cb 01       	movw	r24, r22
    f482:	f8 01       	movw	r30, r16
    f484:	80 83       	st	Z, r24
    f486:	91 83       	std	Z+1, r25	; 0x01
    f488:	a2 83       	std	Z+2, r26	; 0x02
    f48a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f48c:	ce 01       	movw	r24, r28
    f48e:	8d 50       	subi	r24, 0x0D	; 13
    f490:	9f 4f       	sbci	r25, 0xFF	; 255
    f492:	11 e0       	ldi	r17, 0x01	; 1
    f494:	fc 01       	movw	r30, r24
    f496:	60 81       	ld	r22, Z
    f498:	71 81       	ldd	r23, Z+1	; 0x01
    f49a:	82 81       	ldd	r24, Z+2	; 0x02
    f49c:	93 81       	ldd	r25, Z+3	; 0x03
    f49e:	20 e0       	ldi	r18, 0x00	; 0
    f4a0:	30 e0       	ldi	r19, 0x00	; 0
    f4a2:	40 e8       	ldi	r20, 0x80	; 128
    f4a4:	5f e3       	ldi	r21, 0x3F	; 63
    f4a6:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    f4aa:	88 23       	and	r24, r24
    f4ac:	0c f0       	brlt	.+2      	; 0xf4b0 <travel_path+0x1e32>
    f4ae:	10 e0       	ldi	r17, 0x00	; 0
    f4b0:	11 23       	and	r17, r17
    f4b2:	49 f0       	breq	.+18     	; 0xf4c6 <travel_path+0x1e48>
		__ticks = 1;
    f4b4:	ce 01       	movw	r24, r28
    f4b6:	89 50       	subi	r24, 0x09	; 9
    f4b8:	9f 4f       	sbci	r25, 0xFF	; 255
    f4ba:	21 e0       	ldi	r18, 0x01	; 1
    f4bc:	30 e0       	ldi	r19, 0x00	; 0
    f4be:	fc 01       	movw	r30, r24
    f4c0:	31 83       	std	Z+1, r19	; 0x01
    f4c2:	20 83       	st	Z, r18
    f4c4:	74 c0       	rjmp	.+232    	; 0xf5ae <travel_path+0x1f30>
	else if (__tmp > 65535)
    f4c6:	ce 01       	movw	r24, r28
    f4c8:	8d 50       	subi	r24, 0x0D	; 13
    f4ca:	9f 4f       	sbci	r25, 0xFF	; 255
    f4cc:	11 e0       	ldi	r17, 0x01	; 1
    f4ce:	fc 01       	movw	r30, r24
    f4d0:	60 81       	ld	r22, Z
    f4d2:	71 81       	ldd	r23, Z+1	; 0x01
    f4d4:	82 81       	ldd	r24, Z+2	; 0x02
    f4d6:	93 81       	ldd	r25, Z+3	; 0x03
    f4d8:	20 e0       	ldi	r18, 0x00	; 0
    f4da:	3f ef       	ldi	r19, 0xFF	; 255
    f4dc:	4f e7       	ldi	r20, 0x7F	; 127
    f4de:	57 e4       	ldi	r21, 0x47	; 71
    f4e0:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    f4e4:	18 16       	cp	r1, r24
    f4e6:	0c f0       	brlt	.+2      	; 0xf4ea <travel_path+0x1e6c>
    f4e8:	10 e0       	ldi	r17, 0x00	; 0
    f4ea:	11 23       	and	r17, r17
    f4ec:	09 f4       	brne	.+2      	; 0xf4f0 <travel_path+0x1e72>
    f4ee:	4d c0       	rjmp	.+154    	; 0xf58a <travel_path+0x1f0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f4f0:	ce 01       	movw	r24, r28
    f4f2:	81 51       	subi	r24, 0x11	; 17
    f4f4:	9f 4f       	sbci	r25, 0xFF	; 255
    f4f6:	fc 01       	movw	r30, r24
    f4f8:	60 81       	ld	r22, Z
    f4fa:	71 81       	ldd	r23, Z+1	; 0x01
    f4fc:	82 81       	ldd	r24, Z+2	; 0x02
    f4fe:	93 81       	ldd	r25, Z+3	; 0x03
    f500:	20 e0       	ldi	r18, 0x00	; 0
    f502:	30 e0       	ldi	r19, 0x00	; 0
    f504:	40 e2       	ldi	r20, 0x20	; 32
    f506:	51 e4       	ldi	r21, 0x41	; 65
    f508:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f50c:	dc 01       	movw	r26, r24
    f50e:	cb 01       	movw	r24, r22
    f510:	8e 01       	movw	r16, r28
    f512:	09 50       	subi	r16, 0x09	; 9
    f514:	1f 4f       	sbci	r17, 0xFF	; 255
    f516:	bc 01       	movw	r22, r24
    f518:	cd 01       	movw	r24, r26
    f51a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f51e:	dc 01       	movw	r26, r24
    f520:	cb 01       	movw	r24, r22
    f522:	f8 01       	movw	r30, r16
    f524:	91 83       	std	Z+1, r25	; 0x01
    f526:	80 83       	st	Z, r24
    f528:	27 c0       	rjmp	.+78     	; 0xf578 <travel_path+0x1efa>
    f52a:	ce 01       	movw	r24, r28
    f52c:	87 50       	subi	r24, 0x07	; 7
    f52e:	9f 4f       	sbci	r25, 0xFF	; 255
    f530:	20 e7       	ldi	r18, 0x70	; 112
    f532:	31 e0       	ldi	r19, 0x01	; 1
    f534:	fc 01       	movw	r30, r24
    f536:	31 83       	std	Z+1, r19	; 0x01
    f538:	20 83       	st	Z, r18
    f53a:	ce 01       	movw	r24, r28
    f53c:	87 50       	subi	r24, 0x07	; 7
    f53e:	9f 4f       	sbci	r25, 0xFF	; 255
    f540:	fc 01       	movw	r30, r24
    f542:	80 81       	ld	r24, Z
    f544:	91 81       	ldd	r25, Z+1	; 0x01
    f546:	8c 01       	movw	r16, r24
    f548:	c8 01       	movw	r24, r16
    f54a:	01 97       	sbiw	r24, 0x01	; 1
    f54c:	f1 f7       	brne	.-4      	; 0xf54a <travel_path+0x1ecc>
    f54e:	8c 01       	movw	r16, r24
    f550:	ce 01       	movw	r24, r28
    f552:	87 50       	subi	r24, 0x07	; 7
    f554:	9f 4f       	sbci	r25, 0xFF	; 255
    f556:	fc 01       	movw	r30, r24
    f558:	11 83       	std	Z+1, r17	; 0x01
    f55a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f55c:	ce 01       	movw	r24, r28
    f55e:	89 50       	subi	r24, 0x09	; 9
    f560:	9f 4f       	sbci	r25, 0xFF	; 255
    f562:	9e 01       	movw	r18, r28
    f564:	29 50       	subi	r18, 0x09	; 9
    f566:	3f 4f       	sbci	r19, 0xFF	; 255
    f568:	f9 01       	movw	r30, r18
    f56a:	20 81       	ld	r18, Z
    f56c:	31 81       	ldd	r19, Z+1	; 0x01
    f56e:	21 50       	subi	r18, 0x01	; 1
    f570:	30 40       	sbci	r19, 0x00	; 0
    f572:	fc 01       	movw	r30, r24
    f574:	31 83       	std	Z+1, r19	; 0x01
    f576:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f578:	ce 01       	movw	r24, r28
    f57a:	89 50       	subi	r24, 0x09	; 9
    f57c:	9f 4f       	sbci	r25, 0xFF	; 255
    f57e:	fc 01       	movw	r30, r24
    f580:	80 81       	ld	r24, Z
    f582:	91 81       	ldd	r25, Z+1	; 0x01
    f584:	00 97       	sbiw	r24, 0x00	; 0
    f586:	89 f6       	brne	.-94     	; 0xf52a <travel_path+0x1eac>
    f588:	04 c1       	rjmp	.+520    	; 0xf792 <travel_path+0x2114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f58a:	8e 01       	movw	r16, r28
    f58c:	09 50       	subi	r16, 0x09	; 9
    f58e:	1f 4f       	sbci	r17, 0xFF	; 255
    f590:	ce 01       	movw	r24, r28
    f592:	8d 50       	subi	r24, 0x0D	; 13
    f594:	9f 4f       	sbci	r25, 0xFF	; 255
    f596:	fc 01       	movw	r30, r24
    f598:	60 81       	ld	r22, Z
    f59a:	71 81       	ldd	r23, Z+1	; 0x01
    f59c:	82 81       	ldd	r24, Z+2	; 0x02
    f59e:	93 81       	ldd	r25, Z+3	; 0x03
    f5a0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f5a4:	dc 01       	movw	r26, r24
    f5a6:	cb 01       	movw	r24, r22
    f5a8:	f8 01       	movw	r30, r16
    f5aa:	91 83       	std	Z+1, r25	; 0x01
    f5ac:	80 83       	st	Z, r24
    f5ae:	ce 01       	movw	r24, r28
    f5b0:	85 50       	subi	r24, 0x05	; 5
    f5b2:	9f 4f       	sbci	r25, 0xFF	; 255
    f5b4:	9e 01       	movw	r18, r28
    f5b6:	29 50       	subi	r18, 0x09	; 9
    f5b8:	3f 4f       	sbci	r19, 0xFF	; 255
    f5ba:	f9 01       	movw	r30, r18
    f5bc:	20 81       	ld	r18, Z
    f5be:	31 81       	ldd	r19, Z+1	; 0x01
    f5c0:	fc 01       	movw	r30, r24
    f5c2:	31 83       	std	Z+1, r19	; 0x01
    f5c4:	20 83       	st	Z, r18
    f5c6:	ce 01       	movw	r24, r28
    f5c8:	85 50       	subi	r24, 0x05	; 5
    f5ca:	9f 4f       	sbci	r25, 0xFF	; 255
    f5cc:	fc 01       	movw	r30, r24
    f5ce:	80 81       	ld	r24, Z
    f5d0:	91 81       	ldd	r25, Z+1	; 0x01
    f5d2:	8c 01       	movw	r16, r24
    f5d4:	c8 01       	movw	r24, r16
    f5d6:	01 97       	sbiw	r24, 0x01	; 1
    f5d8:	f1 f7       	brne	.-4      	; 0xf5d6 <travel_path+0x1f58>
    f5da:	8c 01       	movw	r16, r24
    f5dc:	ce 01       	movw	r24, r28
    f5de:	85 50       	subi	r24, 0x05	; 5
    f5e0:	9f 4f       	sbci	r25, 0xFF	; 255
    f5e2:	fc 01       	movw	r30, r24
    f5e4:	11 83       	std	Z+1, r17	; 0x01
    f5e6:	00 83       	st	Z, r16
    f5e8:	d4 c0       	rjmp	.+424    	; 0xf792 <travel_path+0x2114>
						_delay_ms(20);
						}						
				else
				{
					stop();
    f5ea:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f5ee:	9e 01       	movw	r18, r28
    f5f0:	23 50       	subi	r18, 0x03	; 3
    f5f2:	3f 4f       	sbci	r19, 0xFF	; 255
    f5f4:	80 e0       	ldi	r24, 0x00	; 0
    f5f6:	90 e0       	ldi	r25, 0x00	; 0
    f5f8:	a0 ea       	ldi	r26, 0xA0	; 160
    f5fa:	b1 e4       	ldi	r27, 0x41	; 65
    f5fc:	f9 01       	movw	r30, r18
    f5fe:	80 83       	st	Z, r24
    f600:	91 83       	std	Z+1, r25	; 0x01
    f602:	a2 83       	std	Z+2, r26	; 0x02
    f604:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f606:	8e 01       	movw	r16, r28
    f608:	0f 5f       	subi	r16, 0xFF	; 255
    f60a:	1e 4f       	sbci	r17, 0xFE	; 254
    f60c:	ce 01       	movw	r24, r28
    f60e:	83 50       	subi	r24, 0x03	; 3
    f610:	9f 4f       	sbci	r25, 0xFF	; 255
    f612:	fc 01       	movw	r30, r24
    f614:	60 81       	ld	r22, Z
    f616:	71 81       	ldd	r23, Z+1	; 0x01
    f618:	82 81       	ldd	r24, Z+2	; 0x02
    f61a:	93 81       	ldd	r25, Z+3	; 0x03
    f61c:	26 e6       	ldi	r18, 0x66	; 102
    f61e:	36 e6       	ldi	r19, 0x66	; 102
    f620:	46 e6       	ldi	r20, 0x66	; 102
    f622:	55 e4       	ldi	r21, 0x45	; 69
    f624:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f628:	dc 01       	movw	r26, r24
    f62a:	cb 01       	movw	r24, r22
    f62c:	f8 01       	movw	r30, r16
    f62e:	80 83       	st	Z, r24
    f630:	91 83       	std	Z+1, r25	; 0x01
    f632:	a2 83       	std	Z+2, r26	; 0x02
    f634:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f636:	ce 01       	movw	r24, r28
    f638:	8f 5f       	subi	r24, 0xFF	; 255
    f63a:	9e 4f       	sbci	r25, 0xFE	; 254
    f63c:	11 e0       	ldi	r17, 0x01	; 1
    f63e:	fc 01       	movw	r30, r24
    f640:	60 81       	ld	r22, Z
    f642:	71 81       	ldd	r23, Z+1	; 0x01
    f644:	82 81       	ldd	r24, Z+2	; 0x02
    f646:	93 81       	ldd	r25, Z+3	; 0x03
    f648:	20 e0       	ldi	r18, 0x00	; 0
    f64a:	30 e0       	ldi	r19, 0x00	; 0
    f64c:	40 e8       	ldi	r20, 0x80	; 128
    f64e:	5f e3       	ldi	r21, 0x3F	; 63
    f650:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    f654:	88 23       	and	r24, r24
    f656:	0c f0       	brlt	.+2      	; 0xf65a <travel_path+0x1fdc>
    f658:	10 e0       	ldi	r17, 0x00	; 0
    f65a:	11 23       	and	r17, r17
    f65c:	49 f0       	breq	.+18     	; 0xf670 <travel_path+0x1ff2>
		__ticks = 1;
    f65e:	ce 01       	movw	r24, r28
    f660:	8b 5f       	subi	r24, 0xFB	; 251
    f662:	9e 4f       	sbci	r25, 0xFE	; 254
    f664:	21 e0       	ldi	r18, 0x01	; 1
    f666:	30 e0       	ldi	r19, 0x00	; 0
    f668:	fc 01       	movw	r30, r24
    f66a:	31 83       	std	Z+1, r19	; 0x01
    f66c:	20 83       	st	Z, r18
    f66e:	74 c0       	rjmp	.+232    	; 0xf758 <travel_path+0x20da>
	else if (__tmp > 65535)
    f670:	ce 01       	movw	r24, r28
    f672:	8f 5f       	subi	r24, 0xFF	; 255
    f674:	9e 4f       	sbci	r25, 0xFE	; 254
    f676:	11 e0       	ldi	r17, 0x01	; 1
    f678:	fc 01       	movw	r30, r24
    f67a:	60 81       	ld	r22, Z
    f67c:	71 81       	ldd	r23, Z+1	; 0x01
    f67e:	82 81       	ldd	r24, Z+2	; 0x02
    f680:	93 81       	ldd	r25, Z+3	; 0x03
    f682:	20 e0       	ldi	r18, 0x00	; 0
    f684:	3f ef       	ldi	r19, 0xFF	; 255
    f686:	4f e7       	ldi	r20, 0x7F	; 127
    f688:	57 e4       	ldi	r21, 0x47	; 71
    f68a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    f68e:	18 16       	cp	r1, r24
    f690:	0c f0       	brlt	.+2      	; 0xf694 <travel_path+0x2016>
    f692:	10 e0       	ldi	r17, 0x00	; 0
    f694:	11 23       	and	r17, r17
    f696:	09 f4       	brne	.+2      	; 0xf69a <travel_path+0x201c>
    f698:	4d c0       	rjmp	.+154    	; 0xf734 <travel_path+0x20b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f69a:	ce 01       	movw	r24, r28
    f69c:	83 50       	subi	r24, 0x03	; 3
    f69e:	9f 4f       	sbci	r25, 0xFF	; 255
    f6a0:	fc 01       	movw	r30, r24
    f6a2:	60 81       	ld	r22, Z
    f6a4:	71 81       	ldd	r23, Z+1	; 0x01
    f6a6:	82 81       	ldd	r24, Z+2	; 0x02
    f6a8:	93 81       	ldd	r25, Z+3	; 0x03
    f6aa:	20 e0       	ldi	r18, 0x00	; 0
    f6ac:	30 e0       	ldi	r19, 0x00	; 0
    f6ae:	40 e2       	ldi	r20, 0x20	; 32
    f6b0:	51 e4       	ldi	r21, 0x41	; 65
    f6b2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f6b6:	dc 01       	movw	r26, r24
    f6b8:	cb 01       	movw	r24, r22
    f6ba:	8e 01       	movw	r16, r28
    f6bc:	0b 5f       	subi	r16, 0xFB	; 251
    f6be:	1e 4f       	sbci	r17, 0xFE	; 254
    f6c0:	bc 01       	movw	r22, r24
    f6c2:	cd 01       	movw	r24, r26
    f6c4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f6c8:	dc 01       	movw	r26, r24
    f6ca:	cb 01       	movw	r24, r22
    f6cc:	f8 01       	movw	r30, r16
    f6ce:	91 83       	std	Z+1, r25	; 0x01
    f6d0:	80 83       	st	Z, r24
    f6d2:	27 c0       	rjmp	.+78     	; 0xf722 <travel_path+0x20a4>
    f6d4:	ce 01       	movw	r24, r28
    f6d6:	89 5f       	subi	r24, 0xF9	; 249
    f6d8:	9e 4f       	sbci	r25, 0xFE	; 254
    f6da:	20 e7       	ldi	r18, 0x70	; 112
    f6dc:	31 e0       	ldi	r19, 0x01	; 1
    f6de:	fc 01       	movw	r30, r24
    f6e0:	31 83       	std	Z+1, r19	; 0x01
    f6e2:	20 83       	st	Z, r18
    f6e4:	ce 01       	movw	r24, r28
    f6e6:	89 5f       	subi	r24, 0xF9	; 249
    f6e8:	9e 4f       	sbci	r25, 0xFE	; 254
    f6ea:	fc 01       	movw	r30, r24
    f6ec:	80 81       	ld	r24, Z
    f6ee:	91 81       	ldd	r25, Z+1	; 0x01
    f6f0:	8c 01       	movw	r16, r24
    f6f2:	c8 01       	movw	r24, r16
    f6f4:	01 97       	sbiw	r24, 0x01	; 1
    f6f6:	f1 f7       	brne	.-4      	; 0xf6f4 <travel_path+0x2076>
    f6f8:	8c 01       	movw	r16, r24
    f6fa:	ce 01       	movw	r24, r28
    f6fc:	89 5f       	subi	r24, 0xF9	; 249
    f6fe:	9e 4f       	sbci	r25, 0xFE	; 254
    f700:	fc 01       	movw	r30, r24
    f702:	11 83       	std	Z+1, r17	; 0x01
    f704:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f706:	ce 01       	movw	r24, r28
    f708:	8b 5f       	subi	r24, 0xFB	; 251
    f70a:	9e 4f       	sbci	r25, 0xFE	; 254
    f70c:	9e 01       	movw	r18, r28
    f70e:	2b 5f       	subi	r18, 0xFB	; 251
    f710:	3e 4f       	sbci	r19, 0xFE	; 254
    f712:	f9 01       	movw	r30, r18
    f714:	20 81       	ld	r18, Z
    f716:	31 81       	ldd	r19, Z+1	; 0x01
    f718:	21 50       	subi	r18, 0x01	; 1
    f71a:	30 40       	sbci	r19, 0x00	; 0
    f71c:	fc 01       	movw	r30, r24
    f71e:	31 83       	std	Z+1, r19	; 0x01
    f720:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f722:	ce 01       	movw	r24, r28
    f724:	8b 5f       	subi	r24, 0xFB	; 251
    f726:	9e 4f       	sbci	r25, 0xFE	; 254
    f728:	fc 01       	movw	r30, r24
    f72a:	80 81       	ld	r24, Z
    f72c:	91 81       	ldd	r25, Z+1	; 0x01
    f72e:	00 97       	sbiw	r24, 0x00	; 0
    f730:	89 f6       	brne	.-94     	; 0xf6d4 <travel_path+0x2056>
    f732:	2f c0       	rjmp	.+94     	; 0xf792 <travel_path+0x2114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f734:	8e 01       	movw	r16, r28
    f736:	0b 5f       	subi	r16, 0xFB	; 251
    f738:	1e 4f       	sbci	r17, 0xFE	; 254
    f73a:	ce 01       	movw	r24, r28
    f73c:	8f 5f       	subi	r24, 0xFF	; 255
    f73e:	9e 4f       	sbci	r25, 0xFE	; 254
    f740:	fc 01       	movw	r30, r24
    f742:	60 81       	ld	r22, Z
    f744:	71 81       	ldd	r23, Z+1	; 0x01
    f746:	82 81       	ldd	r24, Z+2	; 0x02
    f748:	93 81       	ldd	r25, Z+3	; 0x03
    f74a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f74e:	dc 01       	movw	r26, r24
    f750:	cb 01       	movw	r24, r22
    f752:	f8 01       	movw	r30, r16
    f754:	91 83       	std	Z+1, r25	; 0x01
    f756:	80 83       	st	Z, r24
    f758:	ce 01       	movw	r24, r28
    f75a:	87 5f       	subi	r24, 0xF7	; 247
    f75c:	9e 4f       	sbci	r25, 0xFE	; 254
    f75e:	9e 01       	movw	r18, r28
    f760:	2b 5f       	subi	r18, 0xFB	; 251
    f762:	3e 4f       	sbci	r19, 0xFE	; 254
    f764:	f9 01       	movw	r30, r18
    f766:	20 81       	ld	r18, Z
    f768:	31 81       	ldd	r19, Z+1	; 0x01
    f76a:	fc 01       	movw	r30, r24
    f76c:	31 83       	std	Z+1, r19	; 0x01
    f76e:	20 83       	st	Z, r18
    f770:	ce 01       	movw	r24, r28
    f772:	87 5f       	subi	r24, 0xF7	; 247
    f774:	9e 4f       	sbci	r25, 0xFE	; 254
    f776:	fc 01       	movw	r30, r24
    f778:	80 81       	ld	r24, Z
    f77a:	91 81       	ldd	r25, Z+1	; 0x01
    f77c:	8c 01       	movw	r16, r24
    f77e:	c8 01       	movw	r24, r16
    f780:	01 97       	sbiw	r24, 0x01	; 1
    f782:	f1 f7       	brne	.-4      	; 0xf780 <travel_path+0x2102>
    f784:	8c 01       	movw	r16, r24
    f786:	ce 01       	movw	r24, r28
    f788:	87 5f       	subi	r24, 0xF7	; 247
    f78a:	9e 4f       	sbci	r25, 0xFE	; 254
    f78c:	fc 01       	movw	r30, r24
    f78e:	11 83       	std	Z+1, r17	; 0x01
    f790:	00 83       	st	Z, r16
					_delay_ms(20);
				}					
				node++;
    f792:	80 91 71 03 	lds	r24, 0x0371
    f796:	90 91 72 03 	lds	r25, 0x0372
    f79a:	01 96       	adiw	r24, 0x01	; 1
    f79c:	90 93 72 03 	sts	0x0372, r25
    f7a0:	80 93 71 03 	sts	0x0371, r24
				pick_drop(master_path[node]);
    f7a4:	80 91 71 03 	lds	r24, 0x0371
    f7a8:	90 91 72 03 	lds	r25, 0x0372
    f7ac:	8b 58       	subi	r24, 0x8B	; 139
    f7ae:	9c 4f       	sbci	r25, 0xFC	; 252
    f7b0:	fc 01       	movw	r30, r24
    f7b2:	80 81       	ld	r24, Z
    f7b4:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
				node++;
    f7b8:	80 91 71 03 	lds	r24, 0x0371
    f7bc:	90 91 72 03 	lds	r25, 0x0372
    f7c0:	01 96       	adiw	r24, 0x01	; 1
    f7c2:	90 93 72 03 	sts	0x0372, r25
    f7c6:	80 93 71 03 	sts	0x0371, r24
				travel_path(master_path[node]);
    f7ca:	80 91 71 03 	lds	r24, 0x0371
    f7ce:	90 91 72 03 	lds	r25, 0x0372
    f7d2:	8b 58       	subi	r24, 0x8B	; 139
    f7d4:	9c 4f       	sbci	r25, 0xFC	; 252
    f7d6:	fc 01       	movw	r30, r24
    f7d8:	80 81       	ld	r24, Z
    f7da:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
    f7de:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
			}
			else if(master_path[node+1]=='D')//mod
    f7e2:	80 91 71 03 	lds	r24, 0x0371
    f7e6:	90 91 72 03 	lds	r25, 0x0372
    f7ea:	01 96       	adiw	r24, 0x01	; 1
    f7ec:	8b 58       	subi	r24, 0x8B	; 139
    f7ee:	9c 4f       	sbci	r25, 0xFC	; 252
    f7f0:	fc 01       	movw	r30, r24
    f7f2:	80 81       	ld	r24, Z
    f7f4:	84 34       	cpi	r24, 0x44	; 68
    f7f6:	09 f0       	breq	.+2      	; 0xf7fa <travel_path+0x217c>
    f7f8:	fc c0       	rjmp	.+504    	; 0xf9f2 <travel_path+0x2374>
			{
				correct_left();
    f7fa:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    f7fe:	9e 01       	movw	r18, r28
    f800:	25 5f       	subi	r18, 0xF5	; 245
    f802:	3e 4f       	sbci	r19, 0xFE	; 254
    f804:	80 e0       	ldi	r24, 0x00	; 0
    f806:	90 e0       	ldi	r25, 0x00	; 0
    f808:	a0 ea       	ldi	r26, 0xA0	; 160
    f80a:	b1 e4       	ldi	r27, 0x41	; 65
    f80c:	f9 01       	movw	r30, r18
    f80e:	80 83       	st	Z, r24
    f810:	91 83       	std	Z+1, r25	; 0x01
    f812:	a2 83       	std	Z+2, r26	; 0x02
    f814:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f816:	8e 01       	movw	r16, r28
    f818:	01 5f       	subi	r16, 0xF1	; 241
    f81a:	1e 4f       	sbci	r17, 0xFE	; 254
    f81c:	ce 01       	movw	r24, r28
    f81e:	85 5f       	subi	r24, 0xF5	; 245
    f820:	9e 4f       	sbci	r25, 0xFE	; 254
    f822:	fc 01       	movw	r30, r24
    f824:	60 81       	ld	r22, Z
    f826:	71 81       	ldd	r23, Z+1	; 0x01
    f828:	82 81       	ldd	r24, Z+2	; 0x02
    f82a:	93 81       	ldd	r25, Z+3	; 0x03
    f82c:	26 e6       	ldi	r18, 0x66	; 102
    f82e:	36 e6       	ldi	r19, 0x66	; 102
    f830:	46 e6       	ldi	r20, 0x66	; 102
    f832:	55 e4       	ldi	r21, 0x45	; 69
    f834:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f838:	dc 01       	movw	r26, r24
    f83a:	cb 01       	movw	r24, r22
    f83c:	f8 01       	movw	r30, r16
    f83e:	80 83       	st	Z, r24
    f840:	91 83       	std	Z+1, r25	; 0x01
    f842:	a2 83       	std	Z+2, r26	; 0x02
    f844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f846:	ce 01       	movw	r24, r28
    f848:	81 5f       	subi	r24, 0xF1	; 241
    f84a:	9e 4f       	sbci	r25, 0xFE	; 254
    f84c:	11 e0       	ldi	r17, 0x01	; 1
    f84e:	fc 01       	movw	r30, r24
    f850:	60 81       	ld	r22, Z
    f852:	71 81       	ldd	r23, Z+1	; 0x01
    f854:	82 81       	ldd	r24, Z+2	; 0x02
    f856:	93 81       	ldd	r25, Z+3	; 0x03
    f858:	20 e0       	ldi	r18, 0x00	; 0
    f85a:	30 e0       	ldi	r19, 0x00	; 0
    f85c:	40 e8       	ldi	r20, 0x80	; 128
    f85e:	5f e3       	ldi	r21, 0x3F	; 63
    f860:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    f864:	88 23       	and	r24, r24
    f866:	0c f0       	brlt	.+2      	; 0xf86a <travel_path+0x21ec>
    f868:	10 e0       	ldi	r17, 0x00	; 0
    f86a:	11 23       	and	r17, r17
    f86c:	49 f0       	breq	.+18     	; 0xf880 <travel_path+0x2202>
		__ticks = 1;
    f86e:	ce 01       	movw	r24, r28
    f870:	8d 5e       	subi	r24, 0xED	; 237
    f872:	9e 4f       	sbci	r25, 0xFE	; 254
    f874:	21 e0       	ldi	r18, 0x01	; 1
    f876:	30 e0       	ldi	r19, 0x00	; 0
    f878:	fc 01       	movw	r30, r24
    f87a:	31 83       	std	Z+1, r19	; 0x01
    f87c:	20 83       	st	Z, r18
    f87e:	74 c0       	rjmp	.+232    	; 0xf968 <travel_path+0x22ea>
	else if (__tmp > 65535)
    f880:	ce 01       	movw	r24, r28
    f882:	81 5f       	subi	r24, 0xF1	; 241
    f884:	9e 4f       	sbci	r25, 0xFE	; 254
    f886:	11 e0       	ldi	r17, 0x01	; 1
    f888:	fc 01       	movw	r30, r24
    f88a:	60 81       	ld	r22, Z
    f88c:	71 81       	ldd	r23, Z+1	; 0x01
    f88e:	82 81       	ldd	r24, Z+2	; 0x02
    f890:	93 81       	ldd	r25, Z+3	; 0x03
    f892:	20 e0       	ldi	r18, 0x00	; 0
    f894:	3f ef       	ldi	r19, 0xFF	; 255
    f896:	4f e7       	ldi	r20, 0x7F	; 127
    f898:	57 e4       	ldi	r21, 0x47	; 71
    f89a:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    f89e:	18 16       	cp	r1, r24
    f8a0:	0c f0       	brlt	.+2      	; 0xf8a4 <travel_path+0x2226>
    f8a2:	10 e0       	ldi	r17, 0x00	; 0
    f8a4:	11 23       	and	r17, r17
    f8a6:	09 f4       	brne	.+2      	; 0xf8aa <travel_path+0x222c>
    f8a8:	4d c0       	rjmp	.+154    	; 0xf944 <travel_path+0x22c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f8aa:	ce 01       	movw	r24, r28
    f8ac:	85 5f       	subi	r24, 0xF5	; 245
    f8ae:	9e 4f       	sbci	r25, 0xFE	; 254
    f8b0:	fc 01       	movw	r30, r24
    f8b2:	60 81       	ld	r22, Z
    f8b4:	71 81       	ldd	r23, Z+1	; 0x01
    f8b6:	82 81       	ldd	r24, Z+2	; 0x02
    f8b8:	93 81       	ldd	r25, Z+3	; 0x03
    f8ba:	20 e0       	ldi	r18, 0x00	; 0
    f8bc:	30 e0       	ldi	r19, 0x00	; 0
    f8be:	40 e2       	ldi	r20, 0x20	; 32
    f8c0:	51 e4       	ldi	r21, 0x41	; 65
    f8c2:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    f8c6:	dc 01       	movw	r26, r24
    f8c8:	cb 01       	movw	r24, r22
    f8ca:	8e 01       	movw	r16, r28
    f8cc:	0d 5e       	subi	r16, 0xED	; 237
    f8ce:	1e 4f       	sbci	r17, 0xFE	; 254
    f8d0:	bc 01       	movw	r22, r24
    f8d2:	cd 01       	movw	r24, r26
    f8d4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f8d8:	dc 01       	movw	r26, r24
    f8da:	cb 01       	movw	r24, r22
    f8dc:	f8 01       	movw	r30, r16
    f8de:	91 83       	std	Z+1, r25	; 0x01
    f8e0:	80 83       	st	Z, r24
    f8e2:	27 c0       	rjmp	.+78     	; 0xf932 <travel_path+0x22b4>
    f8e4:	ce 01       	movw	r24, r28
    f8e6:	8b 5e       	subi	r24, 0xEB	; 235
    f8e8:	9e 4f       	sbci	r25, 0xFE	; 254
    f8ea:	20 e7       	ldi	r18, 0x70	; 112
    f8ec:	31 e0       	ldi	r19, 0x01	; 1
    f8ee:	fc 01       	movw	r30, r24
    f8f0:	31 83       	std	Z+1, r19	; 0x01
    f8f2:	20 83       	st	Z, r18
    f8f4:	ce 01       	movw	r24, r28
    f8f6:	8b 5e       	subi	r24, 0xEB	; 235
    f8f8:	9e 4f       	sbci	r25, 0xFE	; 254
    f8fa:	fc 01       	movw	r30, r24
    f8fc:	80 81       	ld	r24, Z
    f8fe:	91 81       	ldd	r25, Z+1	; 0x01
    f900:	8c 01       	movw	r16, r24
    f902:	c8 01       	movw	r24, r16
    f904:	01 97       	sbiw	r24, 0x01	; 1
    f906:	f1 f7       	brne	.-4      	; 0xf904 <travel_path+0x2286>
    f908:	8c 01       	movw	r16, r24
    f90a:	ce 01       	movw	r24, r28
    f90c:	8b 5e       	subi	r24, 0xEB	; 235
    f90e:	9e 4f       	sbci	r25, 0xFE	; 254
    f910:	fc 01       	movw	r30, r24
    f912:	11 83       	std	Z+1, r17	; 0x01
    f914:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f916:	ce 01       	movw	r24, r28
    f918:	8d 5e       	subi	r24, 0xED	; 237
    f91a:	9e 4f       	sbci	r25, 0xFE	; 254
    f91c:	9e 01       	movw	r18, r28
    f91e:	2d 5e       	subi	r18, 0xED	; 237
    f920:	3e 4f       	sbci	r19, 0xFE	; 254
    f922:	f9 01       	movw	r30, r18
    f924:	20 81       	ld	r18, Z
    f926:	31 81       	ldd	r19, Z+1	; 0x01
    f928:	21 50       	subi	r18, 0x01	; 1
    f92a:	30 40       	sbci	r19, 0x00	; 0
    f92c:	fc 01       	movw	r30, r24
    f92e:	31 83       	std	Z+1, r19	; 0x01
    f930:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f932:	ce 01       	movw	r24, r28
    f934:	8d 5e       	subi	r24, 0xED	; 237
    f936:	9e 4f       	sbci	r25, 0xFE	; 254
    f938:	fc 01       	movw	r30, r24
    f93a:	80 81       	ld	r24, Z
    f93c:	91 81       	ldd	r25, Z+1	; 0x01
    f93e:	00 97       	sbiw	r24, 0x00	; 0
    f940:	89 f6       	brne	.-94     	; 0xf8e4 <travel_path+0x2266>
    f942:	2f c0       	rjmp	.+94     	; 0xf9a2 <travel_path+0x2324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f944:	8e 01       	movw	r16, r28
    f946:	0d 5e       	subi	r16, 0xED	; 237
    f948:	1e 4f       	sbci	r17, 0xFE	; 254
    f94a:	ce 01       	movw	r24, r28
    f94c:	81 5f       	subi	r24, 0xF1	; 241
    f94e:	9e 4f       	sbci	r25, 0xFE	; 254
    f950:	fc 01       	movw	r30, r24
    f952:	60 81       	ld	r22, Z
    f954:	71 81       	ldd	r23, Z+1	; 0x01
    f956:	82 81       	ldd	r24, Z+2	; 0x02
    f958:	93 81       	ldd	r25, Z+3	; 0x03
    f95a:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    f95e:	dc 01       	movw	r26, r24
    f960:	cb 01       	movw	r24, r22
    f962:	f8 01       	movw	r30, r16
    f964:	91 83       	std	Z+1, r25	; 0x01
    f966:	80 83       	st	Z, r24
    f968:	ce 01       	movw	r24, r28
    f96a:	89 5e       	subi	r24, 0xE9	; 233
    f96c:	9e 4f       	sbci	r25, 0xFE	; 254
    f96e:	9e 01       	movw	r18, r28
    f970:	2d 5e       	subi	r18, 0xED	; 237
    f972:	3e 4f       	sbci	r19, 0xFE	; 254
    f974:	f9 01       	movw	r30, r18
    f976:	20 81       	ld	r18, Z
    f978:	31 81       	ldd	r19, Z+1	; 0x01
    f97a:	fc 01       	movw	r30, r24
    f97c:	31 83       	std	Z+1, r19	; 0x01
    f97e:	20 83       	st	Z, r18
    f980:	ce 01       	movw	r24, r28
    f982:	89 5e       	subi	r24, 0xE9	; 233
    f984:	9e 4f       	sbci	r25, 0xFE	; 254
    f986:	fc 01       	movw	r30, r24
    f988:	80 81       	ld	r24, Z
    f98a:	91 81       	ldd	r25, Z+1	; 0x01
    f98c:	8c 01       	movw	r16, r24
    f98e:	c8 01       	movw	r24, r16
    f990:	01 97       	sbiw	r24, 0x01	; 1
    f992:	f1 f7       	brne	.-4      	; 0xf990 <travel_path+0x2312>
    f994:	8c 01       	movw	r16, r24
    f996:	ce 01       	movw	r24, r28
    f998:	89 5e       	subi	r24, 0xE9	; 233
    f99a:	9e 4f       	sbci	r25, 0xFE	; 254
    f99c:	fc 01       	movw	r30, r24
    f99e:	11 83       	std	Z+1, r17	; 0x01
    f9a0:	00 83       	st	Z, r16
				_delay_ms(20);
				node++;
    f9a2:	80 91 71 03 	lds	r24, 0x0371
    f9a6:	90 91 72 03 	lds	r25, 0x0372
    f9aa:	01 96       	adiw	r24, 0x01	; 1
    f9ac:	90 93 72 03 	sts	0x0372, r25
    f9b0:	80 93 71 03 	sts	0x0371, r24
				pick_drop(master_path[node]);
    f9b4:	80 91 71 03 	lds	r24, 0x0371
    f9b8:	90 91 72 03 	lds	r25, 0x0372
    f9bc:	8b 58       	subi	r24, 0x8B	; 139
    f9be:	9c 4f       	sbci	r25, 0xFC	; 252
    f9c0:	fc 01       	movw	r30, r24
    f9c2:	80 81       	ld	r24, Z
    f9c4:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
				node++;
    f9c8:	80 91 71 03 	lds	r24, 0x0371
    f9cc:	90 91 72 03 	lds	r25, 0x0372
    f9d0:	01 96       	adiw	r24, 0x01	; 1
    f9d2:	90 93 72 03 	sts	0x0372, r25
    f9d6:	80 93 71 03 	sts	0x0371, r24
				travel_path(master_path[node]);
    f9da:	80 91 71 03 	lds	r24, 0x0371
    f9de:	90 91 72 03 	lds	r25, 0x0372
    f9e2:	8b 58       	subi	r24, 0x8B	; 139
    f9e4:	9c 4f       	sbci	r25, 0xFC	; 252
    f9e6:	fc 01       	movw	r30, r24
    f9e8:	80 81       	ld	r24, Z
    f9ea:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    f9ee:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
				pick_drop(master_path[node]);
				node++;
				travel_path(master_path[node]);
			}
			else{
				node=node-2;
    f9f2:	80 91 71 03 	lds	r24, 0x0371
    f9f6:	90 91 72 03 	lds	r25, 0x0372
    f9fa:	02 97       	sbiw	r24, 0x02	; 2
    f9fc:	90 93 72 03 	sts	0x0372, r25
    fa00:	80 93 71 03 	sts	0x0371, r24
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
    fa04:	80 91 71 03 	lds	r24, 0x0371
    fa08:	90 91 72 03 	lds	r25, 0x0372
    fa0c:	8b 58       	subi	r24, 0x8B	; 139
    fa0e:	9c 4f       	sbci	r25, 0xFC	; 252
    fa10:	fc 01       	movw	r30, r24
    fa12:	80 81       	ld	r24, Z
    fa14:	82 35       	cpi	r24, 0x52	; 82
    fa16:	a1 f0       	breq	.+40     	; 0xfa40 <travel_path+0x23c2>
    fa18:	80 91 71 03 	lds	r24, 0x0371
    fa1c:	90 91 72 03 	lds	r25, 0x0372
    fa20:	8b 58       	subi	r24, 0x8B	; 139
    fa22:	9c 4f       	sbci	r25, 0xFC	; 252
    fa24:	fc 01       	movw	r30, r24
    fa26:	80 81       	ld	r24, Z
    fa28:	8c 34       	cpi	r24, 0x4C	; 76
    fa2a:	51 f0       	breq	.+20     	; 0xfa40 <travel_path+0x23c2>
    fa2c:	80 91 71 03 	lds	r24, 0x0371
    fa30:	90 91 72 03 	lds	r25, 0x0372
    fa34:	8b 58       	subi	r24, 0x8B	; 139
    fa36:	9c 4f       	sbci	r25, 0xFC	; 252
    fa38:	fc 01       	movw	r30, r24
    fa3a:	80 81       	ld	r24, Z
    fa3c:	85 35       	cpi	r24, 0x55	; 85
    fa3e:	19 f4       	brne	.+6      	; 0xfa46 <travel_path+0x23c8>
				correct_left2();
    fa40:	0e 94 80 17 	call	0x2f00	; 0x2f00 <correct_left2>
    fa44:	02 c0       	rjmp	.+4      	; 0xfa4a <travel_path+0x23cc>
				else
				correct_left();
    fa46:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node+2;
    fa4a:	80 91 71 03 	lds	r24, 0x0371
    fa4e:	90 91 72 03 	lds	r25, 0x0372
    fa52:	02 96       	adiw	r24, 0x02	; 2
    fa54:	90 93 72 03 	sts	0x0372, r25
    fa58:	80 93 71 03 	sts	0x0371, r24
    fa5c:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
			}
		}
		else if(pos_val=='N'){
    fa60:	ce 01       	movw	r24, r28
    fa62:	87 57       	subi	r24, 0x77	; 119
    fa64:	9e 4f       	sbci	r25, 0xFE	; 254
    fa66:	fc 01       	movw	r30, r24
    fa68:	80 81       	ld	r24, Z
    fa6a:	8e 34       	cpi	r24, 0x4E	; 78
    fa6c:	09 f0       	breq	.+2      	; 0xfa70 <travel_path+0x23f2>
    fa6e:	3a c4       	rjmp	.+2164   	; 0x102e4 <travel_path+0x2c66>
		if(node==0){
    fa70:	80 91 71 03 	lds	r24, 0x0371
    fa74:	90 91 72 03 	lds	r25, 0x0372
    fa78:	00 97       	sbiw	r24, 0x00	; 0
    fa7a:	09 f0       	breq	.+2      	; 0xfa7e <travel_path+0x2400>
    fa7c:	67 c1       	rjmp	.+718    	; 0xfd4c <travel_path+0x26ce>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    fa7e:	80 91 71 03 	lds	r24, 0x0371
    fa82:	90 91 72 03 	lds	r25, 0x0372
    fa86:	01 96       	adiw	r24, 0x01	; 1
    fa88:	8b 58       	subi	r24, 0x8B	; 139
    fa8a:	9c 4f       	sbci	r25, 0xFC	; 252
    fa8c:	fc 01       	movw	r30, r24
    fa8e:	80 81       	ld	r24, Z
    fa90:	84 34       	cpi	r24, 0x44	; 68
    fa92:	09 f4       	brne	.+2      	; 0xfa96 <travel_path+0x2418>
    fa94:	5b c0       	rjmp	.+182    	; 0xfb4c <travel_path+0x24ce>
    fa96:	80 91 71 03 	lds	r24, 0x0371
    fa9a:	90 91 72 03 	lds	r25, 0x0372
    fa9e:	01 96       	adiw	r24, 0x01	; 1
    faa0:	8b 58       	subi	r24, 0x8B	; 139
    faa2:	9c 4f       	sbci	r25, 0xFC	; 252
    faa4:	fc 01       	movw	r30, r24
    faa6:	80 81       	ld	r24, Z
    faa8:	81 33       	cpi	r24, 0x31	; 49
    faaa:	09 f4       	brne	.+2      	; 0xfaae <travel_path+0x2430>
    faac:	4f c0       	rjmp	.+158    	; 0xfb4c <travel_path+0x24ce>
    faae:	80 91 71 03 	lds	r24, 0x0371
    fab2:	90 91 72 03 	lds	r25, 0x0372
    fab6:	01 96       	adiw	r24, 0x01	; 1
    fab8:	8b 58       	subi	r24, 0x8B	; 139
    faba:	9c 4f       	sbci	r25, 0xFC	; 252
    fabc:	fc 01       	movw	r30, r24
    fabe:	80 81       	ld	r24, Z
    fac0:	82 33       	cpi	r24, 0x32	; 50
    fac2:	09 f4       	brne	.+2      	; 0xfac6 <travel_path+0x2448>
    fac4:	43 c0       	rjmp	.+134    	; 0xfb4c <travel_path+0x24ce>
    fac6:	80 91 71 03 	lds	r24, 0x0371
    faca:	90 91 72 03 	lds	r25, 0x0372
    face:	01 96       	adiw	r24, 0x01	; 1
    fad0:	8b 58       	subi	r24, 0x8B	; 139
    fad2:	9c 4f       	sbci	r25, 0xFC	; 252
    fad4:	fc 01       	movw	r30, r24
    fad6:	80 81       	ld	r24, Z
    fad8:	83 33       	cpi	r24, 0x33	; 51
    fada:	c1 f1       	breq	.+112    	; 0xfb4c <travel_path+0x24ce>
    fadc:	80 91 71 03 	lds	r24, 0x0371
    fae0:	90 91 72 03 	lds	r25, 0x0372
    fae4:	01 96       	adiw	r24, 0x01	; 1
    fae6:	8b 58       	subi	r24, 0x8B	; 139
    fae8:	9c 4f       	sbci	r25, 0xFC	; 252
    faea:	fc 01       	movw	r30, r24
    faec:	80 81       	ld	r24, Z
    faee:	84 33       	cpi	r24, 0x34	; 52
    faf0:	69 f1       	breq	.+90     	; 0xfb4c <travel_path+0x24ce>
    faf2:	80 91 71 03 	lds	r24, 0x0371
    faf6:	90 91 72 03 	lds	r25, 0x0372
    fafa:	01 96       	adiw	r24, 0x01	; 1
    fafc:	8b 58       	subi	r24, 0x8B	; 139
    fafe:	9c 4f       	sbci	r25, 0xFC	; 252
    fb00:	fc 01       	movw	r30, r24
    fb02:	80 81       	ld	r24, Z
    fb04:	85 33       	cpi	r24, 0x35	; 53
    fb06:	11 f1       	breq	.+68     	; 0xfb4c <travel_path+0x24ce>
    fb08:	80 91 71 03 	lds	r24, 0x0371
    fb0c:	90 91 72 03 	lds	r25, 0x0372
    fb10:	01 96       	adiw	r24, 0x01	; 1
    fb12:	8b 58       	subi	r24, 0x8B	; 139
    fb14:	9c 4f       	sbci	r25, 0xFC	; 252
    fb16:	fc 01       	movw	r30, r24
    fb18:	80 81       	ld	r24, Z
    fb1a:	86 33       	cpi	r24, 0x36	; 54
    fb1c:	b9 f0       	breq	.+46     	; 0xfb4c <travel_path+0x24ce>
    fb1e:	80 91 71 03 	lds	r24, 0x0371
    fb22:	90 91 72 03 	lds	r25, 0x0372
    fb26:	01 96       	adiw	r24, 0x01	; 1
    fb28:	8b 58       	subi	r24, 0x8B	; 139
    fb2a:	9c 4f       	sbci	r25, 0xFC	; 252
    fb2c:	fc 01       	movw	r30, r24
    fb2e:	80 81       	ld	r24, Z
    fb30:	87 33       	cpi	r24, 0x37	; 55
    fb32:	61 f0       	breq	.+24     	; 0xfb4c <travel_path+0x24ce>
    fb34:	80 91 71 03 	lds	r24, 0x0371
    fb38:	90 91 72 03 	lds	r25, 0x0372
    fb3c:	01 96       	adiw	r24, 0x01	; 1
    fb3e:	8b 58       	subi	r24, 0x8B	; 139
    fb40:	9c 4f       	sbci	r25, 0xFC	; 252
    fb42:	fc 01       	movw	r30, r24
    fb44:	80 81       	ld	r24, Z
    fb46:	88 33       	cpi	r24, 0x38	; 56
    fb48:	09 f0       	breq	.+2      	; 0xfb4c <travel_path+0x24ce>
    fb4a:	fc c0       	rjmp	.+504    	; 0xfd44 <travel_path+0x26c6>
		{
						stop();
    fb4c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    fb50:	9e 01       	movw	r18, r28
    fb52:	27 5e       	subi	r18, 0xE7	; 231
    fb54:	3e 4f       	sbci	r19, 0xFE	; 254
    fb56:	80 e0       	ldi	r24, 0x00	; 0
    fb58:	90 e0       	ldi	r25, 0x00	; 0
    fb5a:	a0 ea       	ldi	r26, 0xA0	; 160
    fb5c:	b1 e4       	ldi	r27, 0x41	; 65
    fb5e:	f9 01       	movw	r30, r18
    fb60:	80 83       	st	Z, r24
    fb62:	91 83       	std	Z+1, r25	; 0x01
    fb64:	a2 83       	std	Z+2, r26	; 0x02
    fb66:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fb68:	8e 01       	movw	r16, r28
    fb6a:	03 5e       	subi	r16, 0xE3	; 227
    fb6c:	1e 4f       	sbci	r17, 0xFE	; 254
    fb6e:	ce 01       	movw	r24, r28
    fb70:	87 5e       	subi	r24, 0xE7	; 231
    fb72:	9e 4f       	sbci	r25, 0xFE	; 254
    fb74:	fc 01       	movw	r30, r24
    fb76:	60 81       	ld	r22, Z
    fb78:	71 81       	ldd	r23, Z+1	; 0x01
    fb7a:	82 81       	ldd	r24, Z+2	; 0x02
    fb7c:	93 81       	ldd	r25, Z+3	; 0x03
    fb7e:	26 e6       	ldi	r18, 0x66	; 102
    fb80:	36 e6       	ldi	r19, 0x66	; 102
    fb82:	46 e6       	ldi	r20, 0x66	; 102
    fb84:	55 e4       	ldi	r21, 0x45	; 69
    fb86:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    fb8a:	dc 01       	movw	r26, r24
    fb8c:	cb 01       	movw	r24, r22
    fb8e:	f8 01       	movw	r30, r16
    fb90:	80 83       	st	Z, r24
    fb92:	91 83       	std	Z+1, r25	; 0x01
    fb94:	a2 83       	std	Z+2, r26	; 0x02
    fb96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    fb98:	ce 01       	movw	r24, r28
    fb9a:	83 5e       	subi	r24, 0xE3	; 227
    fb9c:	9e 4f       	sbci	r25, 0xFE	; 254
    fb9e:	11 e0       	ldi	r17, 0x01	; 1
    fba0:	fc 01       	movw	r30, r24
    fba2:	60 81       	ld	r22, Z
    fba4:	71 81       	ldd	r23, Z+1	; 0x01
    fba6:	82 81       	ldd	r24, Z+2	; 0x02
    fba8:	93 81       	ldd	r25, Z+3	; 0x03
    fbaa:	20 e0       	ldi	r18, 0x00	; 0
    fbac:	30 e0       	ldi	r19, 0x00	; 0
    fbae:	40 e8       	ldi	r20, 0x80	; 128
    fbb0:	5f e3       	ldi	r21, 0x3F	; 63
    fbb2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    fbb6:	88 23       	and	r24, r24
    fbb8:	0c f0       	brlt	.+2      	; 0xfbbc <travel_path+0x253e>
    fbba:	10 e0       	ldi	r17, 0x00	; 0
    fbbc:	11 23       	and	r17, r17
    fbbe:	49 f0       	breq	.+18     	; 0xfbd2 <travel_path+0x2554>
		__ticks = 1;
    fbc0:	ce 01       	movw	r24, r28
    fbc2:	8f 5d       	subi	r24, 0xDF	; 223
    fbc4:	9e 4f       	sbci	r25, 0xFE	; 254
    fbc6:	21 e0       	ldi	r18, 0x01	; 1
    fbc8:	30 e0       	ldi	r19, 0x00	; 0
    fbca:	fc 01       	movw	r30, r24
    fbcc:	31 83       	std	Z+1, r19	; 0x01
    fbce:	20 83       	st	Z, r18
    fbd0:	74 c0       	rjmp	.+232    	; 0xfcba <travel_path+0x263c>
	else if (__tmp > 65535)
    fbd2:	ce 01       	movw	r24, r28
    fbd4:	83 5e       	subi	r24, 0xE3	; 227
    fbd6:	9e 4f       	sbci	r25, 0xFE	; 254
    fbd8:	11 e0       	ldi	r17, 0x01	; 1
    fbda:	fc 01       	movw	r30, r24
    fbdc:	60 81       	ld	r22, Z
    fbde:	71 81       	ldd	r23, Z+1	; 0x01
    fbe0:	82 81       	ldd	r24, Z+2	; 0x02
    fbe2:	93 81       	ldd	r25, Z+3	; 0x03
    fbe4:	20 e0       	ldi	r18, 0x00	; 0
    fbe6:	3f ef       	ldi	r19, 0xFF	; 255
    fbe8:	4f e7       	ldi	r20, 0x7F	; 127
    fbea:	57 e4       	ldi	r21, 0x47	; 71
    fbec:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    fbf0:	18 16       	cp	r1, r24
    fbf2:	0c f0       	brlt	.+2      	; 0xfbf6 <travel_path+0x2578>
    fbf4:	10 e0       	ldi	r17, 0x00	; 0
    fbf6:	11 23       	and	r17, r17
    fbf8:	09 f4       	brne	.+2      	; 0xfbfc <travel_path+0x257e>
    fbfa:	4d c0       	rjmp	.+154    	; 0xfc96 <travel_path+0x2618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fbfc:	ce 01       	movw	r24, r28
    fbfe:	87 5e       	subi	r24, 0xE7	; 231
    fc00:	9e 4f       	sbci	r25, 0xFE	; 254
    fc02:	fc 01       	movw	r30, r24
    fc04:	60 81       	ld	r22, Z
    fc06:	71 81       	ldd	r23, Z+1	; 0x01
    fc08:	82 81       	ldd	r24, Z+2	; 0x02
    fc0a:	93 81       	ldd	r25, Z+3	; 0x03
    fc0c:	20 e0       	ldi	r18, 0x00	; 0
    fc0e:	30 e0       	ldi	r19, 0x00	; 0
    fc10:	40 e2       	ldi	r20, 0x20	; 32
    fc12:	51 e4       	ldi	r21, 0x41	; 65
    fc14:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    fc18:	dc 01       	movw	r26, r24
    fc1a:	cb 01       	movw	r24, r22
    fc1c:	8e 01       	movw	r16, r28
    fc1e:	0f 5d       	subi	r16, 0xDF	; 223
    fc20:	1e 4f       	sbci	r17, 0xFE	; 254
    fc22:	bc 01       	movw	r22, r24
    fc24:	cd 01       	movw	r24, r26
    fc26:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    fc2a:	dc 01       	movw	r26, r24
    fc2c:	cb 01       	movw	r24, r22
    fc2e:	f8 01       	movw	r30, r16
    fc30:	91 83       	std	Z+1, r25	; 0x01
    fc32:	80 83       	st	Z, r24
    fc34:	27 c0       	rjmp	.+78     	; 0xfc84 <travel_path+0x2606>
    fc36:	ce 01       	movw	r24, r28
    fc38:	8d 5d       	subi	r24, 0xDD	; 221
    fc3a:	9e 4f       	sbci	r25, 0xFE	; 254
    fc3c:	20 e7       	ldi	r18, 0x70	; 112
    fc3e:	31 e0       	ldi	r19, 0x01	; 1
    fc40:	fc 01       	movw	r30, r24
    fc42:	31 83       	std	Z+1, r19	; 0x01
    fc44:	20 83       	st	Z, r18
    fc46:	ce 01       	movw	r24, r28
    fc48:	8d 5d       	subi	r24, 0xDD	; 221
    fc4a:	9e 4f       	sbci	r25, 0xFE	; 254
    fc4c:	fc 01       	movw	r30, r24
    fc4e:	80 81       	ld	r24, Z
    fc50:	91 81       	ldd	r25, Z+1	; 0x01
    fc52:	8c 01       	movw	r16, r24
    fc54:	c8 01       	movw	r24, r16
    fc56:	01 97       	sbiw	r24, 0x01	; 1
    fc58:	f1 f7       	brne	.-4      	; 0xfc56 <travel_path+0x25d8>
    fc5a:	8c 01       	movw	r16, r24
    fc5c:	ce 01       	movw	r24, r28
    fc5e:	8d 5d       	subi	r24, 0xDD	; 221
    fc60:	9e 4f       	sbci	r25, 0xFE	; 254
    fc62:	fc 01       	movw	r30, r24
    fc64:	11 83       	std	Z+1, r17	; 0x01
    fc66:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fc68:	ce 01       	movw	r24, r28
    fc6a:	8f 5d       	subi	r24, 0xDF	; 223
    fc6c:	9e 4f       	sbci	r25, 0xFE	; 254
    fc6e:	9e 01       	movw	r18, r28
    fc70:	2f 5d       	subi	r18, 0xDF	; 223
    fc72:	3e 4f       	sbci	r19, 0xFE	; 254
    fc74:	f9 01       	movw	r30, r18
    fc76:	20 81       	ld	r18, Z
    fc78:	31 81       	ldd	r19, Z+1	; 0x01
    fc7a:	21 50       	subi	r18, 0x01	; 1
    fc7c:	30 40       	sbci	r19, 0x00	; 0
    fc7e:	fc 01       	movw	r30, r24
    fc80:	31 83       	std	Z+1, r19	; 0x01
    fc82:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fc84:	ce 01       	movw	r24, r28
    fc86:	8f 5d       	subi	r24, 0xDF	; 223
    fc88:	9e 4f       	sbci	r25, 0xFE	; 254
    fc8a:	fc 01       	movw	r30, r24
    fc8c:	80 81       	ld	r24, Z
    fc8e:	91 81       	ldd	r25, Z+1	; 0x01
    fc90:	00 97       	sbiw	r24, 0x00	; 0
    fc92:	89 f6       	brne	.-94     	; 0xfc36 <travel_path+0x25b8>
    fc94:	2f c0       	rjmp	.+94     	; 0xfcf4 <travel_path+0x2676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fc96:	8e 01       	movw	r16, r28
    fc98:	0f 5d       	subi	r16, 0xDF	; 223
    fc9a:	1e 4f       	sbci	r17, 0xFE	; 254
    fc9c:	ce 01       	movw	r24, r28
    fc9e:	83 5e       	subi	r24, 0xE3	; 227
    fca0:	9e 4f       	sbci	r25, 0xFE	; 254
    fca2:	fc 01       	movw	r30, r24
    fca4:	60 81       	ld	r22, Z
    fca6:	71 81       	ldd	r23, Z+1	; 0x01
    fca8:	82 81       	ldd	r24, Z+2	; 0x02
    fcaa:	93 81       	ldd	r25, Z+3	; 0x03
    fcac:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    fcb0:	dc 01       	movw	r26, r24
    fcb2:	cb 01       	movw	r24, r22
    fcb4:	f8 01       	movw	r30, r16
    fcb6:	91 83       	std	Z+1, r25	; 0x01
    fcb8:	80 83       	st	Z, r24
    fcba:	ce 01       	movw	r24, r28
    fcbc:	8b 5d       	subi	r24, 0xDB	; 219
    fcbe:	9e 4f       	sbci	r25, 0xFE	; 254
    fcc0:	9e 01       	movw	r18, r28
    fcc2:	2f 5d       	subi	r18, 0xDF	; 223
    fcc4:	3e 4f       	sbci	r19, 0xFE	; 254
    fcc6:	f9 01       	movw	r30, r18
    fcc8:	20 81       	ld	r18, Z
    fcca:	31 81       	ldd	r19, Z+1	; 0x01
    fccc:	fc 01       	movw	r30, r24
    fcce:	31 83       	std	Z+1, r19	; 0x01
    fcd0:	20 83       	st	Z, r18
    fcd2:	ce 01       	movw	r24, r28
    fcd4:	8b 5d       	subi	r24, 0xDB	; 219
    fcd6:	9e 4f       	sbci	r25, 0xFE	; 254
    fcd8:	fc 01       	movw	r30, r24
    fcda:	80 81       	ld	r24, Z
    fcdc:	91 81       	ldd	r25, Z+1	; 0x01
    fcde:	8c 01       	movw	r16, r24
    fce0:	c8 01       	movw	r24, r16
    fce2:	01 97       	sbiw	r24, 0x01	; 1
    fce4:	f1 f7       	brne	.-4      	; 0xfce2 <travel_path+0x2664>
    fce6:	8c 01       	movw	r16, r24
    fce8:	ce 01       	movw	r24, r28
    fcea:	8b 5d       	subi	r24, 0xDB	; 219
    fcec:	9e 4f       	sbci	r25, 0xFE	; 254
    fcee:	fc 01       	movw	r30, r24
    fcf0:	11 83       	std	Z+1, r17	; 0x01
    fcf2:	00 83       	st	Z, r16
						_delay_ms(20);
						node++;
    fcf4:	80 91 71 03 	lds	r24, 0x0371
    fcf8:	90 91 72 03 	lds	r25, 0x0372
    fcfc:	01 96       	adiw	r24, 0x01	; 1
    fcfe:	90 93 72 03 	sts	0x0372, r25
    fd02:	80 93 71 03 	sts	0x0371, r24
						pick_drop(master_path[node]);
    fd06:	80 91 71 03 	lds	r24, 0x0371
    fd0a:	90 91 72 03 	lds	r25, 0x0372
    fd0e:	8b 58       	subi	r24, 0x8B	; 139
    fd10:	9c 4f       	sbci	r25, 0xFC	; 252
    fd12:	fc 01       	movw	r30, r24
    fd14:	80 81       	ld	r24, Z
    fd16:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
						node++;
    fd1a:	80 91 71 03 	lds	r24, 0x0371
    fd1e:	90 91 72 03 	lds	r25, 0x0372
    fd22:	01 96       	adiw	r24, 0x01	; 1
    fd24:	90 93 72 03 	sts	0x0372, r25
    fd28:	80 93 71 03 	sts	0x0371, r24
						travel_path(master_path[node]);
    fd2c:	80 91 71 03 	lds	r24, 0x0371
    fd30:	90 91 72 03 	lds	r25, 0x0372
    fd34:	8b 58       	subi	r24, 0x8B	; 139
    fd36:	9c 4f       	sbci	r25, 0xFC	; 252
    fd38:	fc 01       	movw	r30, r24
    fd3a:	80 81       	ld	r24, Z
    fd3c:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
			_delay_ms(20);
			forward_mm(30);
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
    fd40:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
						pick_drop(master_path[node]);
						node++;
						travel_path(master_path[node]);
		}
		else
		forward();
    fd44:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    fd48:	0c 94 8e 86 	jmp	0x10d1c	; 0x10d1c <travel_path+0x369e>
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
    fd4c:	80 91 71 03 	lds	r24, 0x0371
    fd50:	90 91 72 03 	lds	r25, 0x0372
    fd54:	01 97       	sbiw	r24, 0x01	; 1
    fd56:	8b 58       	subi	r24, 0x8B	; 139
    fd58:	9c 4f       	sbci	r25, 0xFC	; 252
    fd5a:	fc 01       	movw	r30, r24
    fd5c:	80 81       	ld	r24, Z
    fd5e:	84 34       	cpi	r24, 0x44	; 68
    fd60:	09 f4       	brne	.+2      	; 0xfd64 <travel_path+0x26e6>
    fd62:	5b c0       	rjmp	.+182    	; 0xfe1a <travel_path+0x279c>
    fd64:	80 91 71 03 	lds	r24, 0x0371
    fd68:	90 91 72 03 	lds	r25, 0x0372
    fd6c:	01 97       	sbiw	r24, 0x01	; 1
    fd6e:	8b 58       	subi	r24, 0x8B	; 139
    fd70:	9c 4f       	sbci	r25, 0xFC	; 252
    fd72:	fc 01       	movw	r30, r24
    fd74:	80 81       	ld	r24, Z
    fd76:	81 33       	cpi	r24, 0x31	; 49
    fd78:	09 f4       	brne	.+2      	; 0xfd7c <travel_path+0x26fe>
    fd7a:	4f c0       	rjmp	.+158    	; 0xfe1a <travel_path+0x279c>
    fd7c:	80 91 71 03 	lds	r24, 0x0371
    fd80:	90 91 72 03 	lds	r25, 0x0372
    fd84:	01 97       	sbiw	r24, 0x01	; 1
    fd86:	8b 58       	subi	r24, 0x8B	; 139
    fd88:	9c 4f       	sbci	r25, 0xFC	; 252
    fd8a:	fc 01       	movw	r30, r24
    fd8c:	80 81       	ld	r24, Z
    fd8e:	82 33       	cpi	r24, 0x32	; 50
    fd90:	09 f4       	brne	.+2      	; 0xfd94 <travel_path+0x2716>
    fd92:	43 c0       	rjmp	.+134    	; 0xfe1a <travel_path+0x279c>
    fd94:	80 91 71 03 	lds	r24, 0x0371
    fd98:	90 91 72 03 	lds	r25, 0x0372
    fd9c:	01 97       	sbiw	r24, 0x01	; 1
    fd9e:	8b 58       	subi	r24, 0x8B	; 139
    fda0:	9c 4f       	sbci	r25, 0xFC	; 252
    fda2:	fc 01       	movw	r30, r24
    fda4:	80 81       	ld	r24, Z
    fda6:	83 33       	cpi	r24, 0x33	; 51
    fda8:	c1 f1       	breq	.+112    	; 0xfe1a <travel_path+0x279c>
    fdaa:	80 91 71 03 	lds	r24, 0x0371
    fdae:	90 91 72 03 	lds	r25, 0x0372
    fdb2:	01 97       	sbiw	r24, 0x01	; 1
    fdb4:	8b 58       	subi	r24, 0x8B	; 139
    fdb6:	9c 4f       	sbci	r25, 0xFC	; 252
    fdb8:	fc 01       	movw	r30, r24
    fdba:	80 81       	ld	r24, Z
    fdbc:	84 33       	cpi	r24, 0x34	; 52
    fdbe:	69 f1       	breq	.+90     	; 0xfe1a <travel_path+0x279c>
    fdc0:	80 91 71 03 	lds	r24, 0x0371
    fdc4:	90 91 72 03 	lds	r25, 0x0372
    fdc8:	01 97       	sbiw	r24, 0x01	; 1
    fdca:	8b 58       	subi	r24, 0x8B	; 139
    fdcc:	9c 4f       	sbci	r25, 0xFC	; 252
    fdce:	fc 01       	movw	r30, r24
    fdd0:	80 81       	ld	r24, Z
    fdd2:	85 33       	cpi	r24, 0x35	; 53
    fdd4:	11 f1       	breq	.+68     	; 0xfe1a <travel_path+0x279c>
    fdd6:	80 91 71 03 	lds	r24, 0x0371
    fdda:	90 91 72 03 	lds	r25, 0x0372
    fdde:	01 97       	sbiw	r24, 0x01	; 1
    fde0:	8b 58       	subi	r24, 0x8B	; 139
    fde2:	9c 4f       	sbci	r25, 0xFC	; 252
    fde4:	fc 01       	movw	r30, r24
    fde6:	80 81       	ld	r24, Z
    fde8:	86 33       	cpi	r24, 0x36	; 54
    fdea:	b9 f0       	breq	.+46     	; 0xfe1a <travel_path+0x279c>
    fdec:	80 91 71 03 	lds	r24, 0x0371
    fdf0:	90 91 72 03 	lds	r25, 0x0372
    fdf4:	01 97       	sbiw	r24, 0x01	; 1
    fdf6:	8b 58       	subi	r24, 0x8B	; 139
    fdf8:	9c 4f       	sbci	r25, 0xFC	; 252
    fdfa:	fc 01       	movw	r30, r24
    fdfc:	80 81       	ld	r24, Z
    fdfe:	87 33       	cpi	r24, 0x37	; 55
    fe00:	61 f0       	breq	.+24     	; 0xfe1a <travel_path+0x279c>
    fe02:	80 91 71 03 	lds	r24, 0x0371
    fe06:	90 91 72 03 	lds	r25, 0x0372
    fe0a:	01 97       	sbiw	r24, 0x01	; 1
    fe0c:	8b 58       	subi	r24, 0x8B	; 139
    fe0e:	9c 4f       	sbci	r25, 0xFC	; 252
    fe10:	fc 01       	movw	r30, r24
    fe12:	80 81       	ld	r24, Z
    fe14:	88 33       	cpi	r24, 0x38	; 56
    fe16:	09 f0       	breq	.+2      	; 0xfe1a <travel_path+0x279c>
    fe18:	66 c1       	rjmp	.+716    	; 0x100e6 <travel_path+0x2a68>
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    fe1a:	80 91 71 03 	lds	r24, 0x0371
    fe1e:	90 91 72 03 	lds	r25, 0x0372
    fe22:	01 96       	adiw	r24, 0x01	; 1
    fe24:	8b 58       	subi	r24, 0x8B	; 139
    fe26:	9c 4f       	sbci	r25, 0xFC	; 252
    fe28:	fc 01       	movw	r30, r24
    fe2a:	80 81       	ld	r24, Z
    fe2c:	84 34       	cpi	r24, 0x44	; 68
    fe2e:	09 f4       	brne	.+2      	; 0xfe32 <travel_path+0x27b4>
    fe30:	5b c0       	rjmp	.+182    	; 0xfee8 <travel_path+0x286a>
    fe32:	80 91 71 03 	lds	r24, 0x0371
    fe36:	90 91 72 03 	lds	r25, 0x0372
    fe3a:	01 96       	adiw	r24, 0x01	; 1
    fe3c:	8b 58       	subi	r24, 0x8B	; 139
    fe3e:	9c 4f       	sbci	r25, 0xFC	; 252
    fe40:	fc 01       	movw	r30, r24
    fe42:	80 81       	ld	r24, Z
    fe44:	81 33       	cpi	r24, 0x31	; 49
    fe46:	09 f4       	brne	.+2      	; 0xfe4a <travel_path+0x27cc>
    fe48:	4f c0       	rjmp	.+158    	; 0xfee8 <travel_path+0x286a>
    fe4a:	80 91 71 03 	lds	r24, 0x0371
    fe4e:	90 91 72 03 	lds	r25, 0x0372
    fe52:	01 96       	adiw	r24, 0x01	; 1
    fe54:	8b 58       	subi	r24, 0x8B	; 139
    fe56:	9c 4f       	sbci	r25, 0xFC	; 252
    fe58:	fc 01       	movw	r30, r24
    fe5a:	80 81       	ld	r24, Z
    fe5c:	82 33       	cpi	r24, 0x32	; 50
    fe5e:	09 f4       	brne	.+2      	; 0xfe62 <travel_path+0x27e4>
    fe60:	43 c0       	rjmp	.+134    	; 0xfee8 <travel_path+0x286a>
    fe62:	80 91 71 03 	lds	r24, 0x0371
    fe66:	90 91 72 03 	lds	r25, 0x0372
    fe6a:	01 96       	adiw	r24, 0x01	; 1
    fe6c:	8b 58       	subi	r24, 0x8B	; 139
    fe6e:	9c 4f       	sbci	r25, 0xFC	; 252
    fe70:	fc 01       	movw	r30, r24
    fe72:	80 81       	ld	r24, Z
    fe74:	83 33       	cpi	r24, 0x33	; 51
    fe76:	c1 f1       	breq	.+112    	; 0xfee8 <travel_path+0x286a>
    fe78:	80 91 71 03 	lds	r24, 0x0371
    fe7c:	90 91 72 03 	lds	r25, 0x0372
    fe80:	01 96       	adiw	r24, 0x01	; 1
    fe82:	8b 58       	subi	r24, 0x8B	; 139
    fe84:	9c 4f       	sbci	r25, 0xFC	; 252
    fe86:	fc 01       	movw	r30, r24
    fe88:	80 81       	ld	r24, Z
    fe8a:	84 33       	cpi	r24, 0x34	; 52
    fe8c:	69 f1       	breq	.+90     	; 0xfee8 <travel_path+0x286a>
    fe8e:	80 91 71 03 	lds	r24, 0x0371
    fe92:	90 91 72 03 	lds	r25, 0x0372
    fe96:	01 96       	adiw	r24, 0x01	; 1
    fe98:	8b 58       	subi	r24, 0x8B	; 139
    fe9a:	9c 4f       	sbci	r25, 0xFC	; 252
    fe9c:	fc 01       	movw	r30, r24
    fe9e:	80 81       	ld	r24, Z
    fea0:	85 33       	cpi	r24, 0x35	; 53
    fea2:	11 f1       	breq	.+68     	; 0xfee8 <travel_path+0x286a>
    fea4:	80 91 71 03 	lds	r24, 0x0371
    fea8:	90 91 72 03 	lds	r25, 0x0372
    feac:	01 96       	adiw	r24, 0x01	; 1
    feae:	8b 58       	subi	r24, 0x8B	; 139
    feb0:	9c 4f       	sbci	r25, 0xFC	; 252
    feb2:	fc 01       	movw	r30, r24
    feb4:	80 81       	ld	r24, Z
    feb6:	86 33       	cpi	r24, 0x36	; 54
    feb8:	b9 f0       	breq	.+46     	; 0xfee8 <travel_path+0x286a>
    feba:	80 91 71 03 	lds	r24, 0x0371
    febe:	90 91 72 03 	lds	r25, 0x0372
    fec2:	01 96       	adiw	r24, 0x01	; 1
    fec4:	8b 58       	subi	r24, 0x8B	; 139
    fec6:	9c 4f       	sbci	r25, 0xFC	; 252
    fec8:	fc 01       	movw	r30, r24
    feca:	80 81       	ld	r24, Z
    fecc:	87 33       	cpi	r24, 0x37	; 55
    fece:	61 f0       	breq	.+24     	; 0xfee8 <travel_path+0x286a>
    fed0:	80 91 71 03 	lds	r24, 0x0371
    fed4:	90 91 72 03 	lds	r25, 0x0372
    fed8:	01 96       	adiw	r24, 0x01	; 1
    feda:	8b 58       	subi	r24, 0x8B	; 139
    fedc:	9c 4f       	sbci	r25, 0xFC	; 252
    fede:	fc 01       	movw	r30, r24
    fee0:	80 81       	ld	r24, Z
    fee2:	88 33       	cpi	r24, 0x38	; 56
    fee4:	09 f0       	breq	.+2      	; 0xfee8 <travel_path+0x286a>
    fee6:	fb c0       	rjmp	.+502    	; 0x100de <travel_path+0x2a60>
			{
				stop();
    fee8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    feec:	9e 01       	movw	r18, r28
    feee:	29 5d       	subi	r18, 0xD9	; 217
    fef0:	3e 4f       	sbci	r19, 0xFE	; 254
    fef2:	80 e0       	ldi	r24, 0x00	; 0
    fef4:	90 e0       	ldi	r25, 0x00	; 0
    fef6:	a0 ea       	ldi	r26, 0xA0	; 160
    fef8:	b1 e4       	ldi	r27, 0x41	; 65
    fefa:	f9 01       	movw	r30, r18
    fefc:	80 83       	st	Z, r24
    fefe:	91 83       	std	Z+1, r25	; 0x01
    ff00:	a2 83       	std	Z+2, r26	; 0x02
    ff02:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ff04:	8e 01       	movw	r16, r28
    ff06:	05 5d       	subi	r16, 0xD5	; 213
    ff08:	1e 4f       	sbci	r17, 0xFE	; 254
    ff0a:	ce 01       	movw	r24, r28
    ff0c:	89 5d       	subi	r24, 0xD9	; 217
    ff0e:	9e 4f       	sbci	r25, 0xFE	; 254
    ff10:	fc 01       	movw	r30, r24
    ff12:	60 81       	ld	r22, Z
    ff14:	71 81       	ldd	r23, Z+1	; 0x01
    ff16:	82 81       	ldd	r24, Z+2	; 0x02
    ff18:	93 81       	ldd	r25, Z+3	; 0x03
    ff1a:	26 e6       	ldi	r18, 0x66	; 102
    ff1c:	36 e6       	ldi	r19, 0x66	; 102
    ff1e:	46 e6       	ldi	r20, 0x66	; 102
    ff20:	55 e4       	ldi	r21, 0x45	; 69
    ff22:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ff26:	dc 01       	movw	r26, r24
    ff28:	cb 01       	movw	r24, r22
    ff2a:	f8 01       	movw	r30, r16
    ff2c:	80 83       	st	Z, r24
    ff2e:	91 83       	std	Z+1, r25	; 0x01
    ff30:	a2 83       	std	Z+2, r26	; 0x02
    ff32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ff34:	ce 01       	movw	r24, r28
    ff36:	85 5d       	subi	r24, 0xD5	; 213
    ff38:	9e 4f       	sbci	r25, 0xFE	; 254
    ff3a:	11 e0       	ldi	r17, 0x01	; 1
    ff3c:	fc 01       	movw	r30, r24
    ff3e:	60 81       	ld	r22, Z
    ff40:	71 81       	ldd	r23, Z+1	; 0x01
    ff42:	82 81       	ldd	r24, Z+2	; 0x02
    ff44:	93 81       	ldd	r25, Z+3	; 0x03
    ff46:	20 e0       	ldi	r18, 0x00	; 0
    ff48:	30 e0       	ldi	r19, 0x00	; 0
    ff4a:	40 e8       	ldi	r20, 0x80	; 128
    ff4c:	5f e3       	ldi	r21, 0x3F	; 63
    ff4e:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
    ff52:	88 23       	and	r24, r24
    ff54:	0c f0       	brlt	.+2      	; 0xff58 <travel_path+0x28da>
    ff56:	10 e0       	ldi	r17, 0x00	; 0
    ff58:	11 23       	and	r17, r17
    ff5a:	49 f0       	breq	.+18     	; 0xff6e <travel_path+0x28f0>
		__ticks = 1;
    ff5c:	ce 01       	movw	r24, r28
    ff5e:	81 5d       	subi	r24, 0xD1	; 209
    ff60:	9e 4f       	sbci	r25, 0xFE	; 254
    ff62:	21 e0       	ldi	r18, 0x01	; 1
    ff64:	30 e0       	ldi	r19, 0x00	; 0
    ff66:	fc 01       	movw	r30, r24
    ff68:	31 83       	std	Z+1, r19	; 0x01
    ff6a:	20 83       	st	Z, r18
    ff6c:	74 c0       	rjmp	.+232    	; 0x10056 <travel_path+0x29d8>
	else if (__tmp > 65535)
    ff6e:	ce 01       	movw	r24, r28
    ff70:	85 5d       	subi	r24, 0xD5	; 213
    ff72:	9e 4f       	sbci	r25, 0xFE	; 254
    ff74:	11 e0       	ldi	r17, 0x01	; 1
    ff76:	fc 01       	movw	r30, r24
    ff78:	60 81       	ld	r22, Z
    ff7a:	71 81       	ldd	r23, Z+1	; 0x01
    ff7c:	82 81       	ldd	r24, Z+2	; 0x02
    ff7e:	93 81       	ldd	r25, Z+3	; 0x03
    ff80:	20 e0       	ldi	r18, 0x00	; 0
    ff82:	3f ef       	ldi	r19, 0xFF	; 255
    ff84:	4f e7       	ldi	r20, 0x7F	; 127
    ff86:	57 e4       	ldi	r21, 0x47	; 71
    ff88:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
    ff8c:	18 16       	cp	r1, r24
    ff8e:	0c f0       	brlt	.+2      	; 0xff92 <travel_path+0x2914>
    ff90:	10 e0       	ldi	r17, 0x00	; 0
    ff92:	11 23       	and	r17, r17
    ff94:	09 f4       	brne	.+2      	; 0xff98 <travel_path+0x291a>
    ff96:	4d c0       	rjmp	.+154    	; 0x10032 <travel_path+0x29b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ff98:	ce 01       	movw	r24, r28
    ff9a:	89 5d       	subi	r24, 0xD9	; 217
    ff9c:	9e 4f       	sbci	r25, 0xFE	; 254
    ff9e:	fc 01       	movw	r30, r24
    ffa0:	60 81       	ld	r22, Z
    ffa2:	71 81       	ldd	r23, Z+1	; 0x01
    ffa4:	82 81       	ldd	r24, Z+2	; 0x02
    ffa6:	93 81       	ldd	r25, Z+3	; 0x03
    ffa8:	20 e0       	ldi	r18, 0x00	; 0
    ffaa:	30 e0       	ldi	r19, 0x00	; 0
    ffac:	40 e2       	ldi	r20, 0x20	; 32
    ffae:	51 e4       	ldi	r21, 0x41	; 65
    ffb0:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
    ffb4:	dc 01       	movw	r26, r24
    ffb6:	cb 01       	movw	r24, r22
    ffb8:	8e 01       	movw	r16, r28
    ffba:	01 5d       	subi	r16, 0xD1	; 209
    ffbc:	1e 4f       	sbci	r17, 0xFE	; 254
    ffbe:	bc 01       	movw	r22, r24
    ffc0:	cd 01       	movw	r24, r26
    ffc2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
    ffc6:	dc 01       	movw	r26, r24
    ffc8:	cb 01       	movw	r24, r22
    ffca:	f8 01       	movw	r30, r16
    ffcc:	91 83       	std	Z+1, r25	; 0x01
    ffce:	80 83       	st	Z, r24
    ffd0:	27 c0       	rjmp	.+78     	; 0x10020 <travel_path+0x29a2>
    ffd2:	ce 01       	movw	r24, r28
    ffd4:	8f 5c       	subi	r24, 0xCF	; 207
    ffd6:	9e 4f       	sbci	r25, 0xFE	; 254
    ffd8:	20 e7       	ldi	r18, 0x70	; 112
    ffda:	31 e0       	ldi	r19, 0x01	; 1
    ffdc:	fc 01       	movw	r30, r24
    ffde:	31 83       	std	Z+1, r19	; 0x01
    ffe0:	20 83       	st	Z, r18
    ffe2:	ce 01       	movw	r24, r28
    ffe4:	8f 5c       	subi	r24, 0xCF	; 207
    ffe6:	9e 4f       	sbci	r25, 0xFE	; 254
    ffe8:	fc 01       	movw	r30, r24
    ffea:	80 81       	ld	r24, Z
    ffec:	91 81       	ldd	r25, Z+1	; 0x01
    ffee:	8c 01       	movw	r16, r24
    fff0:	c8 01       	movw	r24, r16
    fff2:	01 97       	sbiw	r24, 0x01	; 1
    fff4:	f1 f7       	brne	.-4      	; 0xfff2 <travel_path+0x2974>
    fff6:	8c 01       	movw	r16, r24
    fff8:	ce 01       	movw	r24, r28
    fffa:	8f 5c       	subi	r24, 0xCF	; 207
    fffc:	9e 4f       	sbci	r25, 0xFE	; 254
    fffe:	fc 01       	movw	r30, r24
   10000:	11 83       	std	Z+1, r17	; 0x01
   10002:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10004:	ce 01       	movw	r24, r28
   10006:	81 5d       	subi	r24, 0xD1	; 209
   10008:	9e 4f       	sbci	r25, 0xFE	; 254
   1000a:	9e 01       	movw	r18, r28
   1000c:	21 5d       	subi	r18, 0xD1	; 209
   1000e:	3e 4f       	sbci	r19, 0xFE	; 254
   10010:	f9 01       	movw	r30, r18
   10012:	20 81       	ld	r18, Z
   10014:	31 81       	ldd	r19, Z+1	; 0x01
   10016:	21 50       	subi	r18, 0x01	; 1
   10018:	30 40       	sbci	r19, 0x00	; 0
   1001a:	fc 01       	movw	r30, r24
   1001c:	31 83       	std	Z+1, r19	; 0x01
   1001e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10020:	ce 01       	movw	r24, r28
   10022:	81 5d       	subi	r24, 0xD1	; 209
   10024:	9e 4f       	sbci	r25, 0xFE	; 254
   10026:	fc 01       	movw	r30, r24
   10028:	80 81       	ld	r24, Z
   1002a:	91 81       	ldd	r25, Z+1	; 0x01
   1002c:	00 97       	sbiw	r24, 0x00	; 0
   1002e:	89 f6       	brne	.-94     	; 0xffd2 <travel_path+0x2954>
   10030:	2f c0       	rjmp	.+94     	; 0x10090 <travel_path+0x2a12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10032:	8e 01       	movw	r16, r28
   10034:	01 5d       	subi	r16, 0xD1	; 209
   10036:	1e 4f       	sbci	r17, 0xFE	; 254
   10038:	ce 01       	movw	r24, r28
   1003a:	85 5d       	subi	r24, 0xD5	; 213
   1003c:	9e 4f       	sbci	r25, 0xFE	; 254
   1003e:	fc 01       	movw	r30, r24
   10040:	60 81       	ld	r22, Z
   10042:	71 81       	ldd	r23, Z+1	; 0x01
   10044:	82 81       	ldd	r24, Z+2	; 0x02
   10046:	93 81       	ldd	r25, Z+3	; 0x03
   10048:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   1004c:	dc 01       	movw	r26, r24
   1004e:	cb 01       	movw	r24, r22
   10050:	f8 01       	movw	r30, r16
   10052:	91 83       	std	Z+1, r25	; 0x01
   10054:	80 83       	st	Z, r24
   10056:	ce 01       	movw	r24, r28
   10058:	8d 5c       	subi	r24, 0xCD	; 205
   1005a:	9e 4f       	sbci	r25, 0xFE	; 254
   1005c:	9e 01       	movw	r18, r28
   1005e:	21 5d       	subi	r18, 0xD1	; 209
   10060:	3e 4f       	sbci	r19, 0xFE	; 254
   10062:	f9 01       	movw	r30, r18
   10064:	20 81       	ld	r18, Z
   10066:	31 81       	ldd	r19, Z+1	; 0x01
   10068:	fc 01       	movw	r30, r24
   1006a:	31 83       	std	Z+1, r19	; 0x01
   1006c:	20 83       	st	Z, r18
   1006e:	ce 01       	movw	r24, r28
   10070:	8d 5c       	subi	r24, 0xCD	; 205
   10072:	9e 4f       	sbci	r25, 0xFE	; 254
   10074:	fc 01       	movw	r30, r24
   10076:	80 81       	ld	r24, Z
   10078:	91 81       	ldd	r25, Z+1	; 0x01
   1007a:	8c 01       	movw	r16, r24
   1007c:	c8 01       	movw	r24, r16
   1007e:	01 97       	sbiw	r24, 0x01	; 1
   10080:	f1 f7       	brne	.-4      	; 0x1007e <travel_path+0x2a00>
   10082:	8c 01       	movw	r16, r24
   10084:	ce 01       	movw	r24, r28
   10086:	8d 5c       	subi	r24, 0xCD	; 205
   10088:	9e 4f       	sbci	r25, 0xFE	; 254
   1008a:	fc 01       	movw	r30, r24
   1008c:	11 83       	std	Z+1, r17	; 0x01
   1008e:	00 83       	st	Z, r16
				_delay_ms(20);
				node++;
   10090:	80 91 71 03 	lds	r24, 0x0371
   10094:	90 91 72 03 	lds	r25, 0x0372
   10098:	01 96       	adiw	r24, 0x01	; 1
   1009a:	90 93 72 03 	sts	0x0372, r25
   1009e:	80 93 71 03 	sts	0x0371, r24
				pick_drop(master_path[node]);
   100a2:	80 91 71 03 	lds	r24, 0x0371
   100a6:	90 91 72 03 	lds	r25, 0x0372
   100aa:	8b 58       	subi	r24, 0x8B	; 139
   100ac:	9c 4f       	sbci	r25, 0xFC	; 252
   100ae:	fc 01       	movw	r30, r24
   100b0:	80 81       	ld	r24, Z
   100b2:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
				node++;
   100b6:	80 91 71 03 	lds	r24, 0x0371
   100ba:	90 91 72 03 	lds	r25, 0x0372
   100be:	01 96       	adiw	r24, 0x01	; 1
   100c0:	90 93 72 03 	sts	0x0372, r25
   100c4:	80 93 71 03 	sts	0x0371, r24
				travel_path(master_path[node]);
   100c8:	80 91 71 03 	lds	r24, 0x0371
   100cc:	90 91 72 03 	lds	r25, 0x0372
   100d0:	8b 58       	subi	r24, 0x8B	; 139
   100d2:	9c 4f       	sbci	r25, 0xFC	; 252
   100d4:	fc 01       	movw	r30, r24
   100d6:	80 81       	ld	r24, Z
   100d8:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
		}
		else
		forward();
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   100dc:	1f c6       	rjmp	.+3134   	; 0x10d1c <travel_path+0x369e>
				pick_drop(master_path[node]);
				node++;
				travel_path(master_path[node]);
			}
			else
			 forward();
   100de:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
		}
		else
		forward();
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   100e2:	00 00       	nop
   100e4:	1b c6       	rjmp	.+3126   	; 0x10d1c <travel_path+0x369e>
			else
			 forward();
		}
		else
		{
			stop();
   100e6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   100ea:	9e 01       	movw	r18, r28
   100ec:	2b 5c       	subi	r18, 0xCB	; 203
   100ee:	3e 4f       	sbci	r19, 0xFE	; 254
   100f0:	80 e0       	ldi	r24, 0x00	; 0
   100f2:	90 e0       	ldi	r25, 0x00	; 0
   100f4:	a0 ea       	ldi	r26, 0xA0	; 160
   100f6:	b1 e4       	ldi	r27, 0x41	; 65
   100f8:	f9 01       	movw	r30, r18
   100fa:	80 83       	st	Z, r24
   100fc:	91 83       	std	Z+1, r25	; 0x01
   100fe:	a2 83       	std	Z+2, r26	; 0x02
   10100:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10102:	8e 01       	movw	r16, r28
   10104:	07 5c       	subi	r16, 0xC7	; 199
   10106:	1e 4f       	sbci	r17, 0xFE	; 254
   10108:	ce 01       	movw	r24, r28
   1010a:	8b 5c       	subi	r24, 0xCB	; 203
   1010c:	9e 4f       	sbci	r25, 0xFE	; 254
   1010e:	fc 01       	movw	r30, r24
   10110:	60 81       	ld	r22, Z
   10112:	71 81       	ldd	r23, Z+1	; 0x01
   10114:	82 81       	ldd	r24, Z+2	; 0x02
   10116:	93 81       	ldd	r25, Z+3	; 0x03
   10118:	26 e6       	ldi	r18, 0x66	; 102
   1011a:	36 e6       	ldi	r19, 0x66	; 102
   1011c:	46 e6       	ldi	r20, 0x66	; 102
   1011e:	55 e4       	ldi	r21, 0x45	; 69
   10120:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10124:	dc 01       	movw	r26, r24
   10126:	cb 01       	movw	r24, r22
   10128:	f8 01       	movw	r30, r16
   1012a:	80 83       	st	Z, r24
   1012c:	91 83       	std	Z+1, r25	; 0x01
   1012e:	a2 83       	std	Z+2, r26	; 0x02
   10130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10132:	ce 01       	movw	r24, r28
   10134:	87 5c       	subi	r24, 0xC7	; 199
   10136:	9e 4f       	sbci	r25, 0xFE	; 254
   10138:	11 e0       	ldi	r17, 0x01	; 1
   1013a:	fc 01       	movw	r30, r24
   1013c:	60 81       	ld	r22, Z
   1013e:	71 81       	ldd	r23, Z+1	; 0x01
   10140:	82 81       	ldd	r24, Z+2	; 0x02
   10142:	93 81       	ldd	r25, Z+3	; 0x03
   10144:	20 e0       	ldi	r18, 0x00	; 0
   10146:	30 e0       	ldi	r19, 0x00	; 0
   10148:	40 e8       	ldi	r20, 0x80	; 128
   1014a:	5f e3       	ldi	r21, 0x3F	; 63
   1014c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   10150:	88 23       	and	r24, r24
   10152:	0c f0       	brlt	.+2      	; 0x10156 <travel_path+0x2ad8>
   10154:	10 e0       	ldi	r17, 0x00	; 0
   10156:	11 23       	and	r17, r17
   10158:	49 f0       	breq	.+18     	; 0x1016c <travel_path+0x2aee>
		__ticks = 1;
   1015a:	ce 01       	movw	r24, r28
   1015c:	83 5c       	subi	r24, 0xC3	; 195
   1015e:	9e 4f       	sbci	r25, 0xFE	; 254
   10160:	21 e0       	ldi	r18, 0x01	; 1
   10162:	30 e0       	ldi	r19, 0x00	; 0
   10164:	fc 01       	movw	r30, r24
   10166:	31 83       	std	Z+1, r19	; 0x01
   10168:	20 83       	st	Z, r18
   1016a:	74 c0       	rjmp	.+232    	; 0x10254 <travel_path+0x2bd6>
	else if (__tmp > 65535)
   1016c:	ce 01       	movw	r24, r28
   1016e:	87 5c       	subi	r24, 0xC7	; 199
   10170:	9e 4f       	sbci	r25, 0xFE	; 254
   10172:	11 e0       	ldi	r17, 0x01	; 1
   10174:	fc 01       	movw	r30, r24
   10176:	60 81       	ld	r22, Z
   10178:	71 81       	ldd	r23, Z+1	; 0x01
   1017a:	82 81       	ldd	r24, Z+2	; 0x02
   1017c:	93 81       	ldd	r25, Z+3	; 0x03
   1017e:	20 e0       	ldi	r18, 0x00	; 0
   10180:	3f ef       	ldi	r19, 0xFF	; 255
   10182:	4f e7       	ldi	r20, 0x7F	; 127
   10184:	57 e4       	ldi	r21, 0x47	; 71
   10186:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   1018a:	18 16       	cp	r1, r24
   1018c:	0c f0       	brlt	.+2      	; 0x10190 <travel_path+0x2b12>
   1018e:	10 e0       	ldi	r17, 0x00	; 0
   10190:	11 23       	and	r17, r17
   10192:	09 f4       	brne	.+2      	; 0x10196 <travel_path+0x2b18>
   10194:	4d c0       	rjmp	.+154    	; 0x10230 <travel_path+0x2bb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10196:	ce 01       	movw	r24, r28
   10198:	8b 5c       	subi	r24, 0xCB	; 203
   1019a:	9e 4f       	sbci	r25, 0xFE	; 254
   1019c:	fc 01       	movw	r30, r24
   1019e:	60 81       	ld	r22, Z
   101a0:	71 81       	ldd	r23, Z+1	; 0x01
   101a2:	82 81       	ldd	r24, Z+2	; 0x02
   101a4:	93 81       	ldd	r25, Z+3	; 0x03
   101a6:	20 e0       	ldi	r18, 0x00	; 0
   101a8:	30 e0       	ldi	r19, 0x00	; 0
   101aa:	40 e2       	ldi	r20, 0x20	; 32
   101ac:	51 e4       	ldi	r21, 0x41	; 65
   101ae:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   101b2:	dc 01       	movw	r26, r24
   101b4:	cb 01       	movw	r24, r22
   101b6:	8e 01       	movw	r16, r28
   101b8:	03 5c       	subi	r16, 0xC3	; 195
   101ba:	1e 4f       	sbci	r17, 0xFE	; 254
   101bc:	bc 01       	movw	r22, r24
   101be:	cd 01       	movw	r24, r26
   101c0:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   101c4:	dc 01       	movw	r26, r24
   101c6:	cb 01       	movw	r24, r22
   101c8:	f8 01       	movw	r30, r16
   101ca:	91 83       	std	Z+1, r25	; 0x01
   101cc:	80 83       	st	Z, r24
   101ce:	27 c0       	rjmp	.+78     	; 0x1021e <travel_path+0x2ba0>
   101d0:	ce 01       	movw	r24, r28
   101d2:	81 5c       	subi	r24, 0xC1	; 193
   101d4:	9e 4f       	sbci	r25, 0xFE	; 254
   101d6:	20 e7       	ldi	r18, 0x70	; 112
   101d8:	31 e0       	ldi	r19, 0x01	; 1
   101da:	fc 01       	movw	r30, r24
   101dc:	31 83       	std	Z+1, r19	; 0x01
   101de:	20 83       	st	Z, r18
   101e0:	ce 01       	movw	r24, r28
   101e2:	81 5c       	subi	r24, 0xC1	; 193
   101e4:	9e 4f       	sbci	r25, 0xFE	; 254
   101e6:	fc 01       	movw	r30, r24
   101e8:	80 81       	ld	r24, Z
   101ea:	91 81       	ldd	r25, Z+1	; 0x01
   101ec:	8c 01       	movw	r16, r24
   101ee:	c8 01       	movw	r24, r16
   101f0:	01 97       	sbiw	r24, 0x01	; 1
   101f2:	f1 f7       	brne	.-4      	; 0x101f0 <travel_path+0x2b72>
   101f4:	8c 01       	movw	r16, r24
   101f6:	ce 01       	movw	r24, r28
   101f8:	81 5c       	subi	r24, 0xC1	; 193
   101fa:	9e 4f       	sbci	r25, 0xFE	; 254
   101fc:	fc 01       	movw	r30, r24
   101fe:	11 83       	std	Z+1, r17	; 0x01
   10200:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10202:	ce 01       	movw	r24, r28
   10204:	83 5c       	subi	r24, 0xC3	; 195
   10206:	9e 4f       	sbci	r25, 0xFE	; 254
   10208:	9e 01       	movw	r18, r28
   1020a:	23 5c       	subi	r18, 0xC3	; 195
   1020c:	3e 4f       	sbci	r19, 0xFE	; 254
   1020e:	f9 01       	movw	r30, r18
   10210:	20 81       	ld	r18, Z
   10212:	31 81       	ldd	r19, Z+1	; 0x01
   10214:	21 50       	subi	r18, 0x01	; 1
   10216:	30 40       	sbci	r19, 0x00	; 0
   10218:	fc 01       	movw	r30, r24
   1021a:	31 83       	std	Z+1, r19	; 0x01
   1021c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1021e:	ce 01       	movw	r24, r28
   10220:	83 5c       	subi	r24, 0xC3	; 195
   10222:	9e 4f       	sbci	r25, 0xFE	; 254
   10224:	fc 01       	movw	r30, r24
   10226:	80 81       	ld	r24, Z
   10228:	91 81       	ldd	r25, Z+1	; 0x01
   1022a:	00 97       	sbiw	r24, 0x00	; 0
   1022c:	89 f6       	brne	.-94     	; 0x101d0 <travel_path+0x2b52>
   1022e:	2f c0       	rjmp	.+94     	; 0x1028e <travel_path+0x2c10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10230:	8e 01       	movw	r16, r28
   10232:	03 5c       	subi	r16, 0xC3	; 195
   10234:	1e 4f       	sbci	r17, 0xFE	; 254
   10236:	ce 01       	movw	r24, r28
   10238:	87 5c       	subi	r24, 0xC7	; 199
   1023a:	9e 4f       	sbci	r25, 0xFE	; 254
   1023c:	fc 01       	movw	r30, r24
   1023e:	60 81       	ld	r22, Z
   10240:	71 81       	ldd	r23, Z+1	; 0x01
   10242:	82 81       	ldd	r24, Z+2	; 0x02
   10244:	93 81       	ldd	r25, Z+3	; 0x03
   10246:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   1024a:	dc 01       	movw	r26, r24
   1024c:	cb 01       	movw	r24, r22
   1024e:	f8 01       	movw	r30, r16
   10250:	91 83       	std	Z+1, r25	; 0x01
   10252:	80 83       	st	Z, r24
   10254:	ce 01       	movw	r24, r28
   10256:	8f 5b       	subi	r24, 0xBF	; 191
   10258:	9e 4f       	sbci	r25, 0xFE	; 254
   1025a:	9e 01       	movw	r18, r28
   1025c:	23 5c       	subi	r18, 0xC3	; 195
   1025e:	3e 4f       	sbci	r19, 0xFE	; 254
   10260:	f9 01       	movw	r30, r18
   10262:	20 81       	ld	r18, Z
   10264:	31 81       	ldd	r19, Z+1	; 0x01
   10266:	fc 01       	movw	r30, r24
   10268:	31 83       	std	Z+1, r19	; 0x01
   1026a:	20 83       	st	Z, r18
   1026c:	ce 01       	movw	r24, r28
   1026e:	8f 5b       	subi	r24, 0xBF	; 191
   10270:	9e 4f       	sbci	r25, 0xFE	; 254
   10272:	fc 01       	movw	r30, r24
   10274:	80 81       	ld	r24, Z
   10276:	91 81       	ldd	r25, Z+1	; 0x01
   10278:	8c 01       	movw	r16, r24
   1027a:	c8 01       	movw	r24, r16
   1027c:	01 97       	sbiw	r24, 0x01	; 1
   1027e:	f1 f7       	brne	.-4      	; 0x1027c <travel_path+0x2bfe>
   10280:	8c 01       	movw	r16, r24
   10282:	ce 01       	movw	r24, r28
   10284:	8f 5b       	subi	r24, 0xBF	; 191
   10286:	9e 4f       	sbci	r25, 0xFE	; 254
   10288:	fc 01       	movw	r30, r24
   1028a:	11 83       	std	Z+1, r17	; 0x01
   1028c:	00 83       	st	Z, r16
			_delay_ms(20);
			forward_mm(30);
   1028e:	8e e1       	ldi	r24, 0x1E	; 30
   10290:	90 e0       	ldi	r25, 0x00	; 0
   10292:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
			node++;
   10296:	80 91 71 03 	lds	r24, 0x0371
   1029a:	90 91 72 03 	lds	r25, 0x0372
   1029e:	01 96       	adiw	r24, 0x01	; 1
   102a0:	90 93 72 03 	sts	0x0372, r25
   102a4:	80 93 71 03 	sts	0x0371, r24
			pick_drop(master_path[node]);
   102a8:	80 91 71 03 	lds	r24, 0x0371
   102ac:	90 91 72 03 	lds	r25, 0x0372
   102b0:	8b 58       	subi	r24, 0x8B	; 139
   102b2:	9c 4f       	sbci	r25, 0xFC	; 252
   102b4:	fc 01       	movw	r30, r24
   102b6:	80 81       	ld	r24, Z
   102b8:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
   102bc:	80 91 71 03 	lds	r24, 0x0371
   102c0:	90 91 72 03 	lds	r25, 0x0372
   102c4:	01 96       	adiw	r24, 0x01	; 1
   102c6:	90 93 72 03 	sts	0x0372, r25
   102ca:	80 93 71 03 	sts	0x0371, r24
			travel_path(master_path[node]);
   102ce:	80 91 71 03 	lds	r24, 0x0371
   102d2:	90 91 72 03 	lds	r25, 0x0372
   102d6:	8b 58       	subi	r24, 0x8B	; 139
   102d8:	9c 4f       	sbci	r25, 0xFC	; 252
   102da:	fc 01       	movw	r30, r24
   102dc:	80 81       	ld	r24, Z
   102de:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
   102e2:	1c c5       	rjmp	.+2616   	; 0x10d1c <travel_path+0x369e>
		}
		}
	else if(pos_val=='U'){
   102e4:	ce 01       	movw	r24, r28
   102e6:	87 57       	subi	r24, 0x77	; 119
   102e8:	9e 4f       	sbci	r25, 0xFE	; 254
   102ea:	fc 01       	movw	r30, r24
   102ec:	80 81       	ld	r24, Z
   102ee:	85 35       	cpi	r24, 0x55	; 85
   102f0:	09 f0       	breq	.+2      	; 0x102f4 <travel_path+0x2c76>
   102f2:	05 c5       	rjmp	.+2570   	; 0x10cfe <travel_path+0x3680>
		if(master_path[node+1]=='D'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   102f4:	80 91 71 03 	lds	r24, 0x0371
   102f8:	90 91 72 03 	lds	r25, 0x0372
   102fc:	01 96       	adiw	r24, 0x01	; 1
   102fe:	8b 58       	subi	r24, 0x8B	; 139
   10300:	9c 4f       	sbci	r25, 0xFC	; 252
   10302:	fc 01       	movw	r30, r24
   10304:	80 81       	ld	r24, Z
   10306:	84 34       	cpi	r24, 0x44	; 68
   10308:	09 f4       	brne	.+2      	; 0x1030c <travel_path+0x2c8e>
   1030a:	43 c0       	rjmp	.+134    	; 0x10392 <travel_path+0x2d14>
   1030c:	80 91 71 03 	lds	r24, 0x0371
   10310:	90 91 72 03 	lds	r25, 0x0372
   10314:	01 96       	adiw	r24, 0x01	; 1
   10316:	8b 58       	subi	r24, 0x8B	; 139
   10318:	9c 4f       	sbci	r25, 0xFC	; 252
   1031a:	fc 01       	movw	r30, r24
   1031c:	80 81       	ld	r24, Z
   1031e:	83 33       	cpi	r24, 0x33	; 51
   10320:	c1 f1       	breq	.+112    	; 0x10392 <travel_path+0x2d14>
   10322:	80 91 71 03 	lds	r24, 0x0371
   10326:	90 91 72 03 	lds	r25, 0x0372
   1032a:	01 96       	adiw	r24, 0x01	; 1
   1032c:	8b 58       	subi	r24, 0x8B	; 139
   1032e:	9c 4f       	sbci	r25, 0xFC	; 252
   10330:	fc 01       	movw	r30, r24
   10332:	80 81       	ld	r24, Z
   10334:	84 33       	cpi	r24, 0x34	; 52
   10336:	69 f1       	breq	.+90     	; 0x10392 <travel_path+0x2d14>
   10338:	80 91 71 03 	lds	r24, 0x0371
   1033c:	90 91 72 03 	lds	r25, 0x0372
   10340:	01 96       	adiw	r24, 0x01	; 1
   10342:	8b 58       	subi	r24, 0x8B	; 139
   10344:	9c 4f       	sbci	r25, 0xFC	; 252
   10346:	fc 01       	movw	r30, r24
   10348:	80 81       	ld	r24, Z
   1034a:	85 33       	cpi	r24, 0x35	; 53
   1034c:	11 f1       	breq	.+68     	; 0x10392 <travel_path+0x2d14>
   1034e:	80 91 71 03 	lds	r24, 0x0371
   10352:	90 91 72 03 	lds	r25, 0x0372
   10356:	01 96       	adiw	r24, 0x01	; 1
   10358:	8b 58       	subi	r24, 0x8B	; 139
   1035a:	9c 4f       	sbci	r25, 0xFC	; 252
   1035c:	fc 01       	movw	r30, r24
   1035e:	80 81       	ld	r24, Z
   10360:	86 33       	cpi	r24, 0x36	; 54
   10362:	b9 f0       	breq	.+46     	; 0x10392 <travel_path+0x2d14>
   10364:	80 91 71 03 	lds	r24, 0x0371
   10368:	90 91 72 03 	lds	r25, 0x0372
   1036c:	01 96       	adiw	r24, 0x01	; 1
   1036e:	8b 58       	subi	r24, 0x8B	; 139
   10370:	9c 4f       	sbci	r25, 0xFC	; 252
   10372:	fc 01       	movw	r30, r24
   10374:	80 81       	ld	r24, Z
   10376:	87 33       	cpi	r24, 0x37	; 55
   10378:	61 f0       	breq	.+24     	; 0x10392 <travel_path+0x2d14>
   1037a:	80 91 71 03 	lds	r24, 0x0371
   1037e:	90 91 72 03 	lds	r25, 0x0372
   10382:	01 96       	adiw	r24, 0x01	; 1
   10384:	8b 58       	subi	r24, 0x8B	; 139
   10386:	9c 4f       	sbci	r25, 0xFC	; 252
   10388:	fc 01       	movw	r30, r24
   1038a:	80 81       	ld	r24, Z
   1038c:	88 33       	cpi	r24, 0x38	; 56
   1038e:	09 f0       	breq	.+2      	; 0x10392 <travel_path+0x2d14>
   10390:	fd c0       	rjmp	.+506    	; 0x1058c <travel_path+0x2f0e>
		{
			stop();
   10392:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   10396:	9e 01       	movw	r18, r28
   10398:	2d 5b       	subi	r18, 0xBD	; 189
   1039a:	3e 4f       	sbci	r19, 0xFE	; 254
   1039c:	80 e0       	ldi	r24, 0x00	; 0
   1039e:	90 e0       	ldi	r25, 0x00	; 0
   103a0:	a0 ea       	ldi	r26, 0xA0	; 160
   103a2:	b1 e4       	ldi	r27, 0x41	; 65
   103a4:	f9 01       	movw	r30, r18
   103a6:	80 83       	st	Z, r24
   103a8:	91 83       	std	Z+1, r25	; 0x01
   103aa:	a2 83       	std	Z+2, r26	; 0x02
   103ac:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   103ae:	8e 01       	movw	r16, r28
   103b0:	09 5b       	subi	r16, 0xB9	; 185
   103b2:	1e 4f       	sbci	r17, 0xFE	; 254
   103b4:	ce 01       	movw	r24, r28
   103b6:	8d 5b       	subi	r24, 0xBD	; 189
   103b8:	9e 4f       	sbci	r25, 0xFE	; 254
   103ba:	fc 01       	movw	r30, r24
   103bc:	60 81       	ld	r22, Z
   103be:	71 81       	ldd	r23, Z+1	; 0x01
   103c0:	82 81       	ldd	r24, Z+2	; 0x02
   103c2:	93 81       	ldd	r25, Z+3	; 0x03
   103c4:	26 e6       	ldi	r18, 0x66	; 102
   103c6:	36 e6       	ldi	r19, 0x66	; 102
   103c8:	46 e6       	ldi	r20, 0x66	; 102
   103ca:	55 e4       	ldi	r21, 0x45	; 69
   103cc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   103d0:	dc 01       	movw	r26, r24
   103d2:	cb 01       	movw	r24, r22
   103d4:	f8 01       	movw	r30, r16
   103d6:	80 83       	st	Z, r24
   103d8:	91 83       	std	Z+1, r25	; 0x01
   103da:	a2 83       	std	Z+2, r26	; 0x02
   103dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   103de:	ce 01       	movw	r24, r28
   103e0:	89 5b       	subi	r24, 0xB9	; 185
   103e2:	9e 4f       	sbci	r25, 0xFE	; 254
   103e4:	11 e0       	ldi	r17, 0x01	; 1
   103e6:	fc 01       	movw	r30, r24
   103e8:	60 81       	ld	r22, Z
   103ea:	71 81       	ldd	r23, Z+1	; 0x01
   103ec:	82 81       	ldd	r24, Z+2	; 0x02
   103ee:	93 81       	ldd	r25, Z+3	; 0x03
   103f0:	20 e0       	ldi	r18, 0x00	; 0
   103f2:	30 e0       	ldi	r19, 0x00	; 0
   103f4:	40 e8       	ldi	r20, 0x80	; 128
   103f6:	5f e3       	ldi	r21, 0x3F	; 63
   103f8:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   103fc:	88 23       	and	r24, r24
   103fe:	0c f0       	brlt	.+2      	; 0x10402 <travel_path+0x2d84>
   10400:	10 e0       	ldi	r17, 0x00	; 0
   10402:	11 23       	and	r17, r17
   10404:	49 f0       	breq	.+18     	; 0x10418 <travel_path+0x2d9a>
		__ticks = 1;
   10406:	ce 01       	movw	r24, r28
   10408:	85 5b       	subi	r24, 0xB5	; 181
   1040a:	9e 4f       	sbci	r25, 0xFE	; 254
   1040c:	21 e0       	ldi	r18, 0x01	; 1
   1040e:	30 e0       	ldi	r19, 0x00	; 0
   10410:	fc 01       	movw	r30, r24
   10412:	31 83       	std	Z+1, r19	; 0x01
   10414:	20 83       	st	Z, r18
   10416:	74 c0       	rjmp	.+232    	; 0x10500 <travel_path+0x2e82>
	else if (__tmp > 65535)
   10418:	ce 01       	movw	r24, r28
   1041a:	89 5b       	subi	r24, 0xB9	; 185
   1041c:	9e 4f       	sbci	r25, 0xFE	; 254
   1041e:	11 e0       	ldi	r17, 0x01	; 1
   10420:	fc 01       	movw	r30, r24
   10422:	60 81       	ld	r22, Z
   10424:	71 81       	ldd	r23, Z+1	; 0x01
   10426:	82 81       	ldd	r24, Z+2	; 0x02
   10428:	93 81       	ldd	r25, Z+3	; 0x03
   1042a:	20 e0       	ldi	r18, 0x00	; 0
   1042c:	3f ef       	ldi	r19, 0xFF	; 255
   1042e:	4f e7       	ldi	r20, 0x7F	; 127
   10430:	57 e4       	ldi	r21, 0x47	; 71
   10432:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   10436:	18 16       	cp	r1, r24
   10438:	0c f0       	brlt	.+2      	; 0x1043c <travel_path+0x2dbe>
   1043a:	10 e0       	ldi	r17, 0x00	; 0
   1043c:	11 23       	and	r17, r17
   1043e:	09 f4       	brne	.+2      	; 0x10442 <travel_path+0x2dc4>
   10440:	4d c0       	rjmp	.+154    	; 0x104dc <travel_path+0x2e5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10442:	ce 01       	movw	r24, r28
   10444:	8d 5b       	subi	r24, 0xBD	; 189
   10446:	9e 4f       	sbci	r25, 0xFE	; 254
   10448:	fc 01       	movw	r30, r24
   1044a:	60 81       	ld	r22, Z
   1044c:	71 81       	ldd	r23, Z+1	; 0x01
   1044e:	82 81       	ldd	r24, Z+2	; 0x02
   10450:	93 81       	ldd	r25, Z+3	; 0x03
   10452:	20 e0       	ldi	r18, 0x00	; 0
   10454:	30 e0       	ldi	r19, 0x00	; 0
   10456:	40 e2       	ldi	r20, 0x20	; 32
   10458:	51 e4       	ldi	r21, 0x41	; 65
   1045a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   1045e:	dc 01       	movw	r26, r24
   10460:	cb 01       	movw	r24, r22
   10462:	8e 01       	movw	r16, r28
   10464:	05 5b       	subi	r16, 0xB5	; 181
   10466:	1e 4f       	sbci	r17, 0xFE	; 254
   10468:	bc 01       	movw	r22, r24
   1046a:	cd 01       	movw	r24, r26
   1046c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10470:	dc 01       	movw	r26, r24
   10472:	cb 01       	movw	r24, r22
   10474:	f8 01       	movw	r30, r16
   10476:	91 83       	std	Z+1, r25	; 0x01
   10478:	80 83       	st	Z, r24
   1047a:	27 c0       	rjmp	.+78     	; 0x104ca <travel_path+0x2e4c>
   1047c:	ce 01       	movw	r24, r28
   1047e:	83 5b       	subi	r24, 0xB3	; 179
   10480:	9e 4f       	sbci	r25, 0xFE	; 254
   10482:	20 e7       	ldi	r18, 0x70	; 112
   10484:	31 e0       	ldi	r19, 0x01	; 1
   10486:	fc 01       	movw	r30, r24
   10488:	31 83       	std	Z+1, r19	; 0x01
   1048a:	20 83       	st	Z, r18
   1048c:	ce 01       	movw	r24, r28
   1048e:	83 5b       	subi	r24, 0xB3	; 179
   10490:	9e 4f       	sbci	r25, 0xFE	; 254
   10492:	fc 01       	movw	r30, r24
   10494:	80 81       	ld	r24, Z
   10496:	91 81       	ldd	r25, Z+1	; 0x01
   10498:	8c 01       	movw	r16, r24
   1049a:	c8 01       	movw	r24, r16
   1049c:	01 97       	sbiw	r24, 0x01	; 1
   1049e:	f1 f7       	brne	.-4      	; 0x1049c <travel_path+0x2e1e>
   104a0:	8c 01       	movw	r16, r24
   104a2:	ce 01       	movw	r24, r28
   104a4:	83 5b       	subi	r24, 0xB3	; 179
   104a6:	9e 4f       	sbci	r25, 0xFE	; 254
   104a8:	fc 01       	movw	r30, r24
   104aa:	11 83       	std	Z+1, r17	; 0x01
   104ac:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   104ae:	ce 01       	movw	r24, r28
   104b0:	85 5b       	subi	r24, 0xB5	; 181
   104b2:	9e 4f       	sbci	r25, 0xFE	; 254
   104b4:	9e 01       	movw	r18, r28
   104b6:	25 5b       	subi	r18, 0xB5	; 181
   104b8:	3e 4f       	sbci	r19, 0xFE	; 254
   104ba:	f9 01       	movw	r30, r18
   104bc:	20 81       	ld	r18, Z
   104be:	31 81       	ldd	r19, Z+1	; 0x01
   104c0:	21 50       	subi	r18, 0x01	; 1
   104c2:	30 40       	sbci	r19, 0x00	; 0
   104c4:	fc 01       	movw	r30, r24
   104c6:	31 83       	std	Z+1, r19	; 0x01
   104c8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   104ca:	ce 01       	movw	r24, r28
   104cc:	85 5b       	subi	r24, 0xB5	; 181
   104ce:	9e 4f       	sbci	r25, 0xFE	; 254
   104d0:	fc 01       	movw	r30, r24
   104d2:	80 81       	ld	r24, Z
   104d4:	91 81       	ldd	r25, Z+1	; 0x01
   104d6:	00 97       	sbiw	r24, 0x00	; 0
   104d8:	89 f6       	brne	.-94     	; 0x1047c <travel_path+0x2dfe>
   104da:	2f c0       	rjmp	.+94     	; 0x1053a <travel_path+0x2ebc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   104dc:	8e 01       	movw	r16, r28
   104de:	05 5b       	subi	r16, 0xB5	; 181
   104e0:	1e 4f       	sbci	r17, 0xFE	; 254
   104e2:	ce 01       	movw	r24, r28
   104e4:	89 5b       	subi	r24, 0xB9	; 185
   104e6:	9e 4f       	sbci	r25, 0xFE	; 254
   104e8:	fc 01       	movw	r30, r24
   104ea:	60 81       	ld	r22, Z
   104ec:	71 81       	ldd	r23, Z+1	; 0x01
   104ee:	82 81       	ldd	r24, Z+2	; 0x02
   104f0:	93 81       	ldd	r25, Z+3	; 0x03
   104f2:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   104f6:	dc 01       	movw	r26, r24
   104f8:	cb 01       	movw	r24, r22
   104fa:	f8 01       	movw	r30, r16
   104fc:	91 83       	std	Z+1, r25	; 0x01
   104fe:	80 83       	st	Z, r24
   10500:	ce 01       	movw	r24, r28
   10502:	81 5b       	subi	r24, 0xB1	; 177
   10504:	9e 4f       	sbci	r25, 0xFE	; 254
   10506:	9e 01       	movw	r18, r28
   10508:	25 5b       	subi	r18, 0xB5	; 181
   1050a:	3e 4f       	sbci	r19, 0xFE	; 254
   1050c:	f9 01       	movw	r30, r18
   1050e:	20 81       	ld	r18, Z
   10510:	31 81       	ldd	r19, Z+1	; 0x01
   10512:	fc 01       	movw	r30, r24
   10514:	31 83       	std	Z+1, r19	; 0x01
   10516:	20 83       	st	Z, r18
   10518:	ce 01       	movw	r24, r28
   1051a:	81 5b       	subi	r24, 0xB1	; 177
   1051c:	9e 4f       	sbci	r25, 0xFE	; 254
   1051e:	fc 01       	movw	r30, r24
   10520:	80 81       	ld	r24, Z
   10522:	91 81       	ldd	r25, Z+1	; 0x01
   10524:	8c 01       	movw	r16, r24
   10526:	c8 01       	movw	r24, r16
   10528:	01 97       	sbiw	r24, 0x01	; 1
   1052a:	f1 f7       	brne	.-4      	; 0x10528 <travel_path+0x2eaa>
   1052c:	8c 01       	movw	r16, r24
   1052e:	ce 01       	movw	r24, r28
   10530:	81 5b       	subi	r24, 0xB1	; 177
   10532:	9e 4f       	sbci	r25, 0xFE	; 254
   10534:	fc 01       	movw	r30, r24
   10536:	11 83       	std	Z+1, r17	; 0x01
   10538:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
   1053a:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
			node++;
   1053e:	80 91 71 03 	lds	r24, 0x0371
   10542:	90 91 72 03 	lds	r25, 0x0372
   10546:	01 96       	adiw	r24, 0x01	; 1
   10548:	90 93 72 03 	sts	0x0372, r25
   1054c:	80 93 71 03 	sts	0x0371, r24
			pick_drop(master_path[node]);
   10550:	80 91 71 03 	lds	r24, 0x0371
   10554:	90 91 72 03 	lds	r25, 0x0372
   10558:	8b 58       	subi	r24, 0x8B	; 139
   1055a:	9c 4f       	sbci	r25, 0xFC	; 252
   1055c:	fc 01       	movw	r30, r24
   1055e:	80 81       	ld	r24, Z
   10560:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
   10564:	80 91 71 03 	lds	r24, 0x0371
   10568:	90 91 72 03 	lds	r25, 0x0372
   1056c:	01 96       	adiw	r24, 0x01	; 1
   1056e:	90 93 72 03 	sts	0x0372, r25
   10572:	80 93 71 03 	sts	0x0371, r24
			travel_path(master_path[node]);
   10576:	80 91 71 03 	lds	r24, 0x0371
   1057a:	90 91 72 03 	lds	r25, 0x0372
   1057e:	8b 58       	subi	r24, 0x8B	; 139
   10580:	9c 4f       	sbci	r25, 0xFC	; 252
   10582:	fc 01       	movw	r30, r24
   10584:	80 81       	ld	r24, Z
   10586:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
   1058a:	c8 c3       	rjmp	.+1936   	; 0x10d1c <travel_path+0x369e>
		}
		else if(master_path[node+1]=='1')
   1058c:	80 91 71 03 	lds	r24, 0x0371
   10590:	90 91 72 03 	lds	r25, 0x0372
   10594:	01 96       	adiw	r24, 0x01	; 1
   10596:	8b 58       	subi	r24, 0x8B	; 139
   10598:	9c 4f       	sbci	r25, 0xFC	; 252
   1059a:	fc 01       	movw	r30, r24
   1059c:	80 81       	ld	r24, Z
   1059e:	81 33       	cpi	r24, 0x31	; 49
   105a0:	09 f0       	breq	.+2      	; 0x105a4 <travel_path+0x2f26>
   105a2:	cf c1       	rjmp	.+926    	; 0x10942 <travel_path+0x32c4>
		{
			stop();
   105a4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   105a8:	9e 01       	movw	r18, r28
   105aa:	2f 5a       	subi	r18, 0xAF	; 175
   105ac:	3e 4f       	sbci	r19, 0xFE	; 254
   105ae:	80 e0       	ldi	r24, 0x00	; 0
   105b0:	90 e0       	ldi	r25, 0x00	; 0
   105b2:	a0 ea       	ldi	r26, 0xA0	; 160
   105b4:	b1 e4       	ldi	r27, 0x41	; 65
   105b6:	f9 01       	movw	r30, r18
   105b8:	80 83       	st	Z, r24
   105ba:	91 83       	std	Z+1, r25	; 0x01
   105bc:	a2 83       	std	Z+2, r26	; 0x02
   105be:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   105c0:	8e 01       	movw	r16, r28
   105c2:	0b 5a       	subi	r16, 0xAB	; 171
   105c4:	1e 4f       	sbci	r17, 0xFE	; 254
   105c6:	ce 01       	movw	r24, r28
   105c8:	8f 5a       	subi	r24, 0xAF	; 175
   105ca:	9e 4f       	sbci	r25, 0xFE	; 254
   105cc:	fc 01       	movw	r30, r24
   105ce:	60 81       	ld	r22, Z
   105d0:	71 81       	ldd	r23, Z+1	; 0x01
   105d2:	82 81       	ldd	r24, Z+2	; 0x02
   105d4:	93 81       	ldd	r25, Z+3	; 0x03
   105d6:	26 e6       	ldi	r18, 0x66	; 102
   105d8:	36 e6       	ldi	r19, 0x66	; 102
   105da:	46 e6       	ldi	r20, 0x66	; 102
   105dc:	55 e4       	ldi	r21, 0x45	; 69
   105de:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   105e2:	dc 01       	movw	r26, r24
   105e4:	cb 01       	movw	r24, r22
   105e6:	f8 01       	movw	r30, r16
   105e8:	80 83       	st	Z, r24
   105ea:	91 83       	std	Z+1, r25	; 0x01
   105ec:	a2 83       	std	Z+2, r26	; 0x02
   105ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   105f0:	ce 01       	movw	r24, r28
   105f2:	8b 5a       	subi	r24, 0xAB	; 171
   105f4:	9e 4f       	sbci	r25, 0xFE	; 254
   105f6:	11 e0       	ldi	r17, 0x01	; 1
   105f8:	fc 01       	movw	r30, r24
   105fa:	60 81       	ld	r22, Z
   105fc:	71 81       	ldd	r23, Z+1	; 0x01
   105fe:	82 81       	ldd	r24, Z+2	; 0x02
   10600:	93 81       	ldd	r25, Z+3	; 0x03
   10602:	20 e0       	ldi	r18, 0x00	; 0
   10604:	30 e0       	ldi	r19, 0x00	; 0
   10606:	40 e8       	ldi	r20, 0x80	; 128
   10608:	5f e3       	ldi	r21, 0x3F	; 63
   1060a:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   1060e:	88 23       	and	r24, r24
   10610:	0c f0       	brlt	.+2      	; 0x10614 <travel_path+0x2f96>
   10612:	10 e0       	ldi	r17, 0x00	; 0
   10614:	11 23       	and	r17, r17
   10616:	49 f0       	breq	.+18     	; 0x1062a <travel_path+0x2fac>
		__ticks = 1;
   10618:	ce 01       	movw	r24, r28
   1061a:	87 5a       	subi	r24, 0xA7	; 167
   1061c:	9e 4f       	sbci	r25, 0xFE	; 254
   1061e:	21 e0       	ldi	r18, 0x01	; 1
   10620:	30 e0       	ldi	r19, 0x00	; 0
   10622:	fc 01       	movw	r30, r24
   10624:	31 83       	std	Z+1, r19	; 0x01
   10626:	20 83       	st	Z, r18
   10628:	74 c0       	rjmp	.+232    	; 0x10712 <travel_path+0x3094>
	else if (__tmp > 65535)
   1062a:	ce 01       	movw	r24, r28
   1062c:	8b 5a       	subi	r24, 0xAB	; 171
   1062e:	9e 4f       	sbci	r25, 0xFE	; 254
   10630:	11 e0       	ldi	r17, 0x01	; 1
   10632:	fc 01       	movw	r30, r24
   10634:	60 81       	ld	r22, Z
   10636:	71 81       	ldd	r23, Z+1	; 0x01
   10638:	82 81       	ldd	r24, Z+2	; 0x02
   1063a:	93 81       	ldd	r25, Z+3	; 0x03
   1063c:	20 e0       	ldi	r18, 0x00	; 0
   1063e:	3f ef       	ldi	r19, 0xFF	; 255
   10640:	4f e7       	ldi	r20, 0x7F	; 127
   10642:	57 e4       	ldi	r21, 0x47	; 71
   10644:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   10648:	18 16       	cp	r1, r24
   1064a:	0c f0       	brlt	.+2      	; 0x1064e <travel_path+0x2fd0>
   1064c:	10 e0       	ldi	r17, 0x00	; 0
   1064e:	11 23       	and	r17, r17
   10650:	09 f4       	brne	.+2      	; 0x10654 <travel_path+0x2fd6>
   10652:	4d c0       	rjmp	.+154    	; 0x106ee <travel_path+0x3070>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10654:	ce 01       	movw	r24, r28
   10656:	8f 5a       	subi	r24, 0xAF	; 175
   10658:	9e 4f       	sbci	r25, 0xFE	; 254
   1065a:	fc 01       	movw	r30, r24
   1065c:	60 81       	ld	r22, Z
   1065e:	71 81       	ldd	r23, Z+1	; 0x01
   10660:	82 81       	ldd	r24, Z+2	; 0x02
   10662:	93 81       	ldd	r25, Z+3	; 0x03
   10664:	20 e0       	ldi	r18, 0x00	; 0
   10666:	30 e0       	ldi	r19, 0x00	; 0
   10668:	40 e2       	ldi	r20, 0x20	; 32
   1066a:	51 e4       	ldi	r21, 0x41	; 65
   1066c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10670:	dc 01       	movw	r26, r24
   10672:	cb 01       	movw	r24, r22
   10674:	8e 01       	movw	r16, r28
   10676:	07 5a       	subi	r16, 0xA7	; 167
   10678:	1e 4f       	sbci	r17, 0xFE	; 254
   1067a:	bc 01       	movw	r22, r24
   1067c:	cd 01       	movw	r24, r26
   1067e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10682:	dc 01       	movw	r26, r24
   10684:	cb 01       	movw	r24, r22
   10686:	f8 01       	movw	r30, r16
   10688:	91 83       	std	Z+1, r25	; 0x01
   1068a:	80 83       	st	Z, r24
   1068c:	27 c0       	rjmp	.+78     	; 0x106dc <travel_path+0x305e>
   1068e:	ce 01       	movw	r24, r28
   10690:	85 5a       	subi	r24, 0xA5	; 165
   10692:	9e 4f       	sbci	r25, 0xFE	; 254
   10694:	20 e7       	ldi	r18, 0x70	; 112
   10696:	31 e0       	ldi	r19, 0x01	; 1
   10698:	fc 01       	movw	r30, r24
   1069a:	31 83       	std	Z+1, r19	; 0x01
   1069c:	20 83       	st	Z, r18
   1069e:	ce 01       	movw	r24, r28
   106a0:	85 5a       	subi	r24, 0xA5	; 165
   106a2:	9e 4f       	sbci	r25, 0xFE	; 254
   106a4:	fc 01       	movw	r30, r24
   106a6:	80 81       	ld	r24, Z
   106a8:	91 81       	ldd	r25, Z+1	; 0x01
   106aa:	8c 01       	movw	r16, r24
   106ac:	c8 01       	movw	r24, r16
   106ae:	01 97       	sbiw	r24, 0x01	; 1
   106b0:	f1 f7       	brne	.-4      	; 0x106ae <travel_path+0x3030>
   106b2:	8c 01       	movw	r16, r24
   106b4:	ce 01       	movw	r24, r28
   106b6:	85 5a       	subi	r24, 0xA5	; 165
   106b8:	9e 4f       	sbci	r25, 0xFE	; 254
   106ba:	fc 01       	movw	r30, r24
   106bc:	11 83       	std	Z+1, r17	; 0x01
   106be:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   106c0:	ce 01       	movw	r24, r28
   106c2:	87 5a       	subi	r24, 0xA7	; 167
   106c4:	9e 4f       	sbci	r25, 0xFE	; 254
   106c6:	9e 01       	movw	r18, r28
   106c8:	27 5a       	subi	r18, 0xA7	; 167
   106ca:	3e 4f       	sbci	r19, 0xFE	; 254
   106cc:	f9 01       	movw	r30, r18
   106ce:	20 81       	ld	r18, Z
   106d0:	31 81       	ldd	r19, Z+1	; 0x01
   106d2:	21 50       	subi	r18, 0x01	; 1
   106d4:	30 40       	sbci	r19, 0x00	; 0
   106d6:	fc 01       	movw	r30, r24
   106d8:	31 83       	std	Z+1, r19	; 0x01
   106da:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   106dc:	ce 01       	movw	r24, r28
   106de:	87 5a       	subi	r24, 0xA7	; 167
   106e0:	9e 4f       	sbci	r25, 0xFE	; 254
   106e2:	fc 01       	movw	r30, r24
   106e4:	80 81       	ld	r24, Z
   106e6:	91 81       	ldd	r25, Z+1	; 0x01
   106e8:	00 97       	sbiw	r24, 0x00	; 0
   106ea:	89 f6       	brne	.-94     	; 0x1068e <travel_path+0x3010>
   106ec:	2f c0       	rjmp	.+94     	; 0x1074c <travel_path+0x30ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   106ee:	8e 01       	movw	r16, r28
   106f0:	07 5a       	subi	r16, 0xA7	; 167
   106f2:	1e 4f       	sbci	r17, 0xFE	; 254
   106f4:	ce 01       	movw	r24, r28
   106f6:	8b 5a       	subi	r24, 0xAB	; 171
   106f8:	9e 4f       	sbci	r25, 0xFE	; 254
   106fa:	fc 01       	movw	r30, r24
   106fc:	60 81       	ld	r22, Z
   106fe:	71 81       	ldd	r23, Z+1	; 0x01
   10700:	82 81       	ldd	r24, Z+2	; 0x02
   10702:	93 81       	ldd	r25, Z+3	; 0x03
   10704:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10708:	dc 01       	movw	r26, r24
   1070a:	cb 01       	movw	r24, r22
   1070c:	f8 01       	movw	r30, r16
   1070e:	91 83       	std	Z+1, r25	; 0x01
   10710:	80 83       	st	Z, r24
   10712:	ce 01       	movw	r24, r28
   10714:	83 5a       	subi	r24, 0xA3	; 163
   10716:	9e 4f       	sbci	r25, 0xFE	; 254
   10718:	9e 01       	movw	r18, r28
   1071a:	27 5a       	subi	r18, 0xA7	; 167
   1071c:	3e 4f       	sbci	r19, 0xFE	; 254
   1071e:	f9 01       	movw	r30, r18
   10720:	20 81       	ld	r18, Z
   10722:	31 81       	ldd	r19, Z+1	; 0x01
   10724:	fc 01       	movw	r30, r24
   10726:	31 83       	std	Z+1, r19	; 0x01
   10728:	20 83       	st	Z, r18
   1072a:	ce 01       	movw	r24, r28
   1072c:	83 5a       	subi	r24, 0xA3	; 163
   1072e:	9e 4f       	sbci	r25, 0xFE	; 254
   10730:	fc 01       	movw	r30, r24
   10732:	80 81       	ld	r24, Z
   10734:	91 81       	ldd	r25, Z+1	; 0x01
   10736:	8c 01       	movw	r16, r24
   10738:	c8 01       	movw	r24, r16
   1073a:	01 97       	sbiw	r24, 0x01	; 1
   1073c:	f1 f7       	brne	.-4      	; 0x1073a <travel_path+0x30bc>
   1073e:	8c 01       	movw	r16, r24
   10740:	ce 01       	movw	r24, r28
   10742:	83 5a       	subi	r24, 0xA3	; 163
   10744:	9e 4f       	sbci	r25, 0xFE	; 254
   10746:	fc 01       	movw	r30, r24
   10748:	11 83       	std	Z+1, r17	; 0x01
   1074a:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_left3();
   1074c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <correct_left3>
   10750:	9e 01       	movw	r18, r28
   10752:	21 5a       	subi	r18, 0xA1	; 161
   10754:	3e 4f       	sbci	r19, 0xFE	; 254
   10756:	80 e0       	ldi	r24, 0x00	; 0
   10758:	90 e0       	ldi	r25, 0x00	; 0
   1075a:	a0 ea       	ldi	r26, 0xA0	; 160
   1075c:	b1 e4       	ldi	r27, 0x41	; 65
   1075e:	f9 01       	movw	r30, r18
   10760:	80 83       	st	Z, r24
   10762:	91 83       	std	Z+1, r25	; 0x01
   10764:	a2 83       	std	Z+2, r26	; 0x02
   10766:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10768:	8e 01       	movw	r16, r28
   1076a:	0d 59       	subi	r16, 0x9D	; 157
   1076c:	1e 4f       	sbci	r17, 0xFE	; 254
   1076e:	ce 01       	movw	r24, r28
   10770:	81 5a       	subi	r24, 0xA1	; 161
   10772:	9e 4f       	sbci	r25, 0xFE	; 254
   10774:	fc 01       	movw	r30, r24
   10776:	60 81       	ld	r22, Z
   10778:	71 81       	ldd	r23, Z+1	; 0x01
   1077a:	82 81       	ldd	r24, Z+2	; 0x02
   1077c:	93 81       	ldd	r25, Z+3	; 0x03
   1077e:	26 e6       	ldi	r18, 0x66	; 102
   10780:	36 e6       	ldi	r19, 0x66	; 102
   10782:	46 e6       	ldi	r20, 0x66	; 102
   10784:	55 e4       	ldi	r21, 0x45	; 69
   10786:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   1078a:	dc 01       	movw	r26, r24
   1078c:	cb 01       	movw	r24, r22
   1078e:	f8 01       	movw	r30, r16
   10790:	80 83       	st	Z, r24
   10792:	91 83       	std	Z+1, r25	; 0x01
   10794:	a2 83       	std	Z+2, r26	; 0x02
   10796:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10798:	ce 01       	movw	r24, r28
   1079a:	8d 59       	subi	r24, 0x9D	; 157
   1079c:	9e 4f       	sbci	r25, 0xFE	; 254
   1079e:	11 e0       	ldi	r17, 0x01	; 1
   107a0:	fc 01       	movw	r30, r24
   107a2:	60 81       	ld	r22, Z
   107a4:	71 81       	ldd	r23, Z+1	; 0x01
   107a6:	82 81       	ldd	r24, Z+2	; 0x02
   107a8:	93 81       	ldd	r25, Z+3	; 0x03
   107aa:	20 e0       	ldi	r18, 0x00	; 0
   107ac:	30 e0       	ldi	r19, 0x00	; 0
   107ae:	40 e8       	ldi	r20, 0x80	; 128
   107b0:	5f e3       	ldi	r21, 0x3F	; 63
   107b2:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   107b6:	88 23       	and	r24, r24
   107b8:	0c f0       	brlt	.+2      	; 0x107bc <travel_path+0x313e>
   107ba:	10 e0       	ldi	r17, 0x00	; 0
   107bc:	11 23       	and	r17, r17
   107be:	49 f0       	breq	.+18     	; 0x107d2 <travel_path+0x3154>
		__ticks = 1;
   107c0:	ce 01       	movw	r24, r28
   107c2:	89 59       	subi	r24, 0x99	; 153
   107c4:	9e 4f       	sbci	r25, 0xFE	; 254
   107c6:	21 e0       	ldi	r18, 0x01	; 1
   107c8:	30 e0       	ldi	r19, 0x00	; 0
   107ca:	fc 01       	movw	r30, r24
   107cc:	31 83       	std	Z+1, r19	; 0x01
   107ce:	20 83       	st	Z, r18
   107d0:	74 c0       	rjmp	.+232    	; 0x108ba <travel_path+0x323c>
	else if (__tmp > 65535)
   107d2:	ce 01       	movw	r24, r28
   107d4:	8d 59       	subi	r24, 0x9D	; 157
   107d6:	9e 4f       	sbci	r25, 0xFE	; 254
   107d8:	11 e0       	ldi	r17, 0x01	; 1
   107da:	fc 01       	movw	r30, r24
   107dc:	60 81       	ld	r22, Z
   107de:	71 81       	ldd	r23, Z+1	; 0x01
   107e0:	82 81       	ldd	r24, Z+2	; 0x02
   107e2:	93 81       	ldd	r25, Z+3	; 0x03
   107e4:	20 e0       	ldi	r18, 0x00	; 0
   107e6:	3f ef       	ldi	r19, 0xFF	; 255
   107e8:	4f e7       	ldi	r20, 0x7F	; 127
   107ea:	57 e4       	ldi	r21, 0x47	; 71
   107ec:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   107f0:	18 16       	cp	r1, r24
   107f2:	0c f0       	brlt	.+2      	; 0x107f6 <travel_path+0x3178>
   107f4:	10 e0       	ldi	r17, 0x00	; 0
   107f6:	11 23       	and	r17, r17
   107f8:	09 f4       	brne	.+2      	; 0x107fc <travel_path+0x317e>
   107fa:	4d c0       	rjmp	.+154    	; 0x10896 <travel_path+0x3218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   107fc:	ce 01       	movw	r24, r28
   107fe:	81 5a       	subi	r24, 0xA1	; 161
   10800:	9e 4f       	sbci	r25, 0xFE	; 254
   10802:	fc 01       	movw	r30, r24
   10804:	60 81       	ld	r22, Z
   10806:	71 81       	ldd	r23, Z+1	; 0x01
   10808:	82 81       	ldd	r24, Z+2	; 0x02
   1080a:	93 81       	ldd	r25, Z+3	; 0x03
   1080c:	20 e0       	ldi	r18, 0x00	; 0
   1080e:	30 e0       	ldi	r19, 0x00	; 0
   10810:	40 e2       	ldi	r20, 0x20	; 32
   10812:	51 e4       	ldi	r21, 0x41	; 65
   10814:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10818:	dc 01       	movw	r26, r24
   1081a:	cb 01       	movw	r24, r22
   1081c:	8e 01       	movw	r16, r28
   1081e:	09 59       	subi	r16, 0x99	; 153
   10820:	1e 4f       	sbci	r17, 0xFE	; 254
   10822:	bc 01       	movw	r22, r24
   10824:	cd 01       	movw	r24, r26
   10826:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   1082a:	dc 01       	movw	r26, r24
   1082c:	cb 01       	movw	r24, r22
   1082e:	f8 01       	movw	r30, r16
   10830:	91 83       	std	Z+1, r25	; 0x01
   10832:	80 83       	st	Z, r24
   10834:	27 c0       	rjmp	.+78     	; 0x10884 <travel_path+0x3206>
   10836:	ce 01       	movw	r24, r28
   10838:	87 59       	subi	r24, 0x97	; 151
   1083a:	9e 4f       	sbci	r25, 0xFE	; 254
   1083c:	20 e7       	ldi	r18, 0x70	; 112
   1083e:	31 e0       	ldi	r19, 0x01	; 1
   10840:	fc 01       	movw	r30, r24
   10842:	31 83       	std	Z+1, r19	; 0x01
   10844:	20 83       	st	Z, r18
   10846:	ce 01       	movw	r24, r28
   10848:	87 59       	subi	r24, 0x97	; 151
   1084a:	9e 4f       	sbci	r25, 0xFE	; 254
   1084c:	fc 01       	movw	r30, r24
   1084e:	80 81       	ld	r24, Z
   10850:	91 81       	ldd	r25, Z+1	; 0x01
   10852:	8c 01       	movw	r16, r24
   10854:	c8 01       	movw	r24, r16
   10856:	01 97       	sbiw	r24, 0x01	; 1
   10858:	f1 f7       	brne	.-4      	; 0x10856 <travel_path+0x31d8>
   1085a:	8c 01       	movw	r16, r24
   1085c:	ce 01       	movw	r24, r28
   1085e:	87 59       	subi	r24, 0x97	; 151
   10860:	9e 4f       	sbci	r25, 0xFE	; 254
   10862:	fc 01       	movw	r30, r24
   10864:	11 83       	std	Z+1, r17	; 0x01
   10866:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10868:	ce 01       	movw	r24, r28
   1086a:	89 59       	subi	r24, 0x99	; 153
   1086c:	9e 4f       	sbci	r25, 0xFE	; 254
   1086e:	9e 01       	movw	r18, r28
   10870:	29 59       	subi	r18, 0x99	; 153
   10872:	3e 4f       	sbci	r19, 0xFE	; 254
   10874:	f9 01       	movw	r30, r18
   10876:	20 81       	ld	r18, Z
   10878:	31 81       	ldd	r19, Z+1	; 0x01
   1087a:	21 50       	subi	r18, 0x01	; 1
   1087c:	30 40       	sbci	r19, 0x00	; 0
   1087e:	fc 01       	movw	r30, r24
   10880:	31 83       	std	Z+1, r19	; 0x01
   10882:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10884:	ce 01       	movw	r24, r28
   10886:	89 59       	subi	r24, 0x99	; 153
   10888:	9e 4f       	sbci	r25, 0xFE	; 254
   1088a:	fc 01       	movw	r30, r24
   1088c:	80 81       	ld	r24, Z
   1088e:	91 81       	ldd	r25, Z+1	; 0x01
   10890:	00 97       	sbiw	r24, 0x00	; 0
   10892:	89 f6       	brne	.-94     	; 0x10836 <travel_path+0x31b8>
   10894:	2f c0       	rjmp	.+94     	; 0x108f4 <travel_path+0x3276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10896:	8e 01       	movw	r16, r28
   10898:	09 59       	subi	r16, 0x99	; 153
   1089a:	1e 4f       	sbci	r17, 0xFE	; 254
   1089c:	ce 01       	movw	r24, r28
   1089e:	8d 59       	subi	r24, 0x9D	; 157
   108a0:	9e 4f       	sbci	r25, 0xFE	; 254
   108a2:	fc 01       	movw	r30, r24
   108a4:	60 81       	ld	r22, Z
   108a6:	71 81       	ldd	r23, Z+1	; 0x01
   108a8:	82 81       	ldd	r24, Z+2	; 0x02
   108aa:	93 81       	ldd	r25, Z+3	; 0x03
   108ac:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   108b0:	dc 01       	movw	r26, r24
   108b2:	cb 01       	movw	r24, r22
   108b4:	f8 01       	movw	r30, r16
   108b6:	91 83       	std	Z+1, r25	; 0x01
   108b8:	80 83       	st	Z, r24
   108ba:	ce 01       	movw	r24, r28
   108bc:	85 59       	subi	r24, 0x95	; 149
   108be:	9e 4f       	sbci	r25, 0xFE	; 254
   108c0:	9e 01       	movw	r18, r28
   108c2:	29 59       	subi	r18, 0x99	; 153
   108c4:	3e 4f       	sbci	r19, 0xFE	; 254
   108c6:	f9 01       	movw	r30, r18
   108c8:	20 81       	ld	r18, Z
   108ca:	31 81       	ldd	r19, Z+1	; 0x01
   108cc:	fc 01       	movw	r30, r24
   108ce:	31 83       	std	Z+1, r19	; 0x01
   108d0:	20 83       	st	Z, r18
   108d2:	ce 01       	movw	r24, r28
   108d4:	85 59       	subi	r24, 0x95	; 149
   108d6:	9e 4f       	sbci	r25, 0xFE	; 254
   108d8:	fc 01       	movw	r30, r24
   108da:	80 81       	ld	r24, Z
   108dc:	91 81       	ldd	r25, Z+1	; 0x01
   108de:	8c 01       	movw	r16, r24
   108e0:	c8 01       	movw	r24, r16
   108e2:	01 97       	sbiw	r24, 0x01	; 1
   108e4:	f1 f7       	brne	.-4      	; 0x108e2 <travel_path+0x3264>
   108e6:	8c 01       	movw	r16, r24
   108e8:	ce 01       	movw	r24, r28
   108ea:	85 59       	subi	r24, 0x95	; 149
   108ec:	9e 4f       	sbci	r25, 0xFE	; 254
   108ee:	fc 01       	movw	r30, r24
   108f0:	11 83       	std	Z+1, r17	; 0x01
   108f2:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
   108f4:	80 91 71 03 	lds	r24, 0x0371
   108f8:	90 91 72 03 	lds	r25, 0x0372
   108fc:	01 96       	adiw	r24, 0x01	; 1
   108fe:	90 93 72 03 	sts	0x0372, r25
   10902:	80 93 71 03 	sts	0x0371, r24
			pick_drop(master_path[node]);
   10906:	80 91 71 03 	lds	r24, 0x0371
   1090a:	90 91 72 03 	lds	r25, 0x0372
   1090e:	8b 58       	subi	r24, 0x8B	; 139
   10910:	9c 4f       	sbci	r25, 0xFC	; 252
   10912:	fc 01       	movw	r30, r24
   10914:	80 81       	ld	r24, Z
   10916:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
   1091a:	80 91 71 03 	lds	r24, 0x0371
   1091e:	90 91 72 03 	lds	r25, 0x0372
   10922:	01 96       	adiw	r24, 0x01	; 1
   10924:	90 93 72 03 	sts	0x0372, r25
   10928:	80 93 71 03 	sts	0x0371, r24
			travel_path(master_path[node]);
   1092c:	80 91 71 03 	lds	r24, 0x0371
   10930:	90 91 72 03 	lds	r25, 0x0372
   10934:	8b 58       	subi	r24, 0x8B	; 139
   10936:	9c 4f       	sbci	r25, 0xFC	; 252
   10938:	fc 01       	movw	r30, r24
   1093a:	80 81       	ld	r24, Z
   1093c:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else
		correct_right3();
   10940:	ed c1       	rjmp	.+986    	; 0x10d1c <travel_path+0x369e>
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else if(master_path[node+1]=='2')
   10942:	80 91 71 03 	lds	r24, 0x0371
   10946:	90 91 72 03 	lds	r25, 0x0372
   1094a:	01 96       	adiw	r24, 0x01	; 1
   1094c:	8b 58       	subi	r24, 0x8B	; 139
   1094e:	9c 4f       	sbci	r25, 0xFC	; 252
   10950:	fc 01       	movw	r30, r24
   10952:	80 81       	ld	r24, Z
   10954:	82 33       	cpi	r24, 0x32	; 50
   10956:	09 f0       	breq	.+2      	; 0x1095a <travel_path+0x32dc>
   10958:	cf c1       	rjmp	.+926    	; 0x10cf8 <travel_path+0x367a>
		{
			stop();
   1095a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   1095e:	9e 01       	movw	r18, r28
   10960:	23 59       	subi	r18, 0x93	; 147
   10962:	3e 4f       	sbci	r19, 0xFE	; 254
   10964:	80 e0       	ldi	r24, 0x00	; 0
   10966:	90 e0       	ldi	r25, 0x00	; 0
   10968:	a0 ea       	ldi	r26, 0xA0	; 160
   1096a:	b1 e4       	ldi	r27, 0x41	; 65
   1096c:	f9 01       	movw	r30, r18
   1096e:	80 83       	st	Z, r24
   10970:	91 83       	std	Z+1, r25	; 0x01
   10972:	a2 83       	std	Z+2, r26	; 0x02
   10974:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10976:	8e 01       	movw	r16, r28
   10978:	0f 58       	subi	r16, 0x8F	; 143
   1097a:	1e 4f       	sbci	r17, 0xFE	; 254
   1097c:	ce 01       	movw	r24, r28
   1097e:	83 59       	subi	r24, 0x93	; 147
   10980:	9e 4f       	sbci	r25, 0xFE	; 254
   10982:	fc 01       	movw	r30, r24
   10984:	60 81       	ld	r22, Z
   10986:	71 81       	ldd	r23, Z+1	; 0x01
   10988:	82 81       	ldd	r24, Z+2	; 0x02
   1098a:	93 81       	ldd	r25, Z+3	; 0x03
   1098c:	26 e6       	ldi	r18, 0x66	; 102
   1098e:	36 e6       	ldi	r19, 0x66	; 102
   10990:	46 e6       	ldi	r20, 0x66	; 102
   10992:	55 e4       	ldi	r21, 0x45	; 69
   10994:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10998:	dc 01       	movw	r26, r24
   1099a:	cb 01       	movw	r24, r22
   1099c:	f8 01       	movw	r30, r16
   1099e:	80 83       	st	Z, r24
   109a0:	91 83       	std	Z+1, r25	; 0x01
   109a2:	a2 83       	std	Z+2, r26	; 0x02
   109a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   109a6:	ce 01       	movw	r24, r28
   109a8:	8f 58       	subi	r24, 0x8F	; 143
   109aa:	9e 4f       	sbci	r25, 0xFE	; 254
   109ac:	11 e0       	ldi	r17, 0x01	; 1
   109ae:	fc 01       	movw	r30, r24
   109b0:	60 81       	ld	r22, Z
   109b2:	71 81       	ldd	r23, Z+1	; 0x01
   109b4:	82 81       	ldd	r24, Z+2	; 0x02
   109b6:	93 81       	ldd	r25, Z+3	; 0x03
   109b8:	20 e0       	ldi	r18, 0x00	; 0
   109ba:	30 e0       	ldi	r19, 0x00	; 0
   109bc:	40 e8       	ldi	r20, 0x80	; 128
   109be:	5f e3       	ldi	r21, 0x3F	; 63
   109c0:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   109c4:	88 23       	and	r24, r24
   109c6:	0c f0       	brlt	.+2      	; 0x109ca <travel_path+0x334c>
   109c8:	10 e0       	ldi	r17, 0x00	; 0
   109ca:	11 23       	and	r17, r17
   109cc:	49 f0       	breq	.+18     	; 0x109e0 <travel_path+0x3362>
		__ticks = 1;
   109ce:	ce 01       	movw	r24, r28
   109d0:	8b 58       	subi	r24, 0x8B	; 139
   109d2:	9e 4f       	sbci	r25, 0xFE	; 254
   109d4:	21 e0       	ldi	r18, 0x01	; 1
   109d6:	30 e0       	ldi	r19, 0x00	; 0
   109d8:	fc 01       	movw	r30, r24
   109da:	31 83       	std	Z+1, r19	; 0x01
   109dc:	20 83       	st	Z, r18
   109de:	74 c0       	rjmp	.+232    	; 0x10ac8 <travel_path+0x344a>
	else if (__tmp > 65535)
   109e0:	ce 01       	movw	r24, r28
   109e2:	8f 58       	subi	r24, 0x8F	; 143
   109e4:	9e 4f       	sbci	r25, 0xFE	; 254
   109e6:	11 e0       	ldi	r17, 0x01	; 1
   109e8:	fc 01       	movw	r30, r24
   109ea:	60 81       	ld	r22, Z
   109ec:	71 81       	ldd	r23, Z+1	; 0x01
   109ee:	82 81       	ldd	r24, Z+2	; 0x02
   109f0:	93 81       	ldd	r25, Z+3	; 0x03
   109f2:	20 e0       	ldi	r18, 0x00	; 0
   109f4:	3f ef       	ldi	r19, 0xFF	; 255
   109f6:	4f e7       	ldi	r20, 0x7F	; 127
   109f8:	57 e4       	ldi	r21, 0x47	; 71
   109fa:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   109fe:	18 16       	cp	r1, r24
   10a00:	0c f0       	brlt	.+2      	; 0x10a04 <travel_path+0x3386>
   10a02:	10 e0       	ldi	r17, 0x00	; 0
   10a04:	11 23       	and	r17, r17
   10a06:	09 f4       	brne	.+2      	; 0x10a0a <travel_path+0x338c>
   10a08:	4d c0       	rjmp	.+154    	; 0x10aa4 <travel_path+0x3426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10a0a:	ce 01       	movw	r24, r28
   10a0c:	83 59       	subi	r24, 0x93	; 147
   10a0e:	9e 4f       	sbci	r25, 0xFE	; 254
   10a10:	fc 01       	movw	r30, r24
   10a12:	60 81       	ld	r22, Z
   10a14:	71 81       	ldd	r23, Z+1	; 0x01
   10a16:	82 81       	ldd	r24, Z+2	; 0x02
   10a18:	93 81       	ldd	r25, Z+3	; 0x03
   10a1a:	20 e0       	ldi	r18, 0x00	; 0
   10a1c:	30 e0       	ldi	r19, 0x00	; 0
   10a1e:	40 e2       	ldi	r20, 0x20	; 32
   10a20:	51 e4       	ldi	r21, 0x41	; 65
   10a22:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10a26:	dc 01       	movw	r26, r24
   10a28:	cb 01       	movw	r24, r22
   10a2a:	8e 01       	movw	r16, r28
   10a2c:	0b 58       	subi	r16, 0x8B	; 139
   10a2e:	1e 4f       	sbci	r17, 0xFE	; 254
   10a30:	bc 01       	movw	r22, r24
   10a32:	cd 01       	movw	r24, r26
   10a34:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10a38:	dc 01       	movw	r26, r24
   10a3a:	cb 01       	movw	r24, r22
   10a3c:	f8 01       	movw	r30, r16
   10a3e:	91 83       	std	Z+1, r25	; 0x01
   10a40:	80 83       	st	Z, r24
   10a42:	27 c0       	rjmp	.+78     	; 0x10a92 <travel_path+0x3414>
   10a44:	ce 01       	movw	r24, r28
   10a46:	89 58       	subi	r24, 0x89	; 137
   10a48:	9e 4f       	sbci	r25, 0xFE	; 254
   10a4a:	20 e7       	ldi	r18, 0x70	; 112
   10a4c:	31 e0       	ldi	r19, 0x01	; 1
   10a4e:	fc 01       	movw	r30, r24
   10a50:	31 83       	std	Z+1, r19	; 0x01
   10a52:	20 83       	st	Z, r18
   10a54:	ce 01       	movw	r24, r28
   10a56:	89 58       	subi	r24, 0x89	; 137
   10a58:	9e 4f       	sbci	r25, 0xFE	; 254
   10a5a:	fc 01       	movw	r30, r24
   10a5c:	80 81       	ld	r24, Z
   10a5e:	91 81       	ldd	r25, Z+1	; 0x01
   10a60:	8c 01       	movw	r16, r24
   10a62:	c8 01       	movw	r24, r16
   10a64:	01 97       	sbiw	r24, 0x01	; 1
   10a66:	f1 f7       	brne	.-4      	; 0x10a64 <travel_path+0x33e6>
   10a68:	8c 01       	movw	r16, r24
   10a6a:	ce 01       	movw	r24, r28
   10a6c:	89 58       	subi	r24, 0x89	; 137
   10a6e:	9e 4f       	sbci	r25, 0xFE	; 254
   10a70:	fc 01       	movw	r30, r24
   10a72:	11 83       	std	Z+1, r17	; 0x01
   10a74:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10a76:	ce 01       	movw	r24, r28
   10a78:	8b 58       	subi	r24, 0x8B	; 139
   10a7a:	9e 4f       	sbci	r25, 0xFE	; 254
   10a7c:	9e 01       	movw	r18, r28
   10a7e:	2b 58       	subi	r18, 0x8B	; 139
   10a80:	3e 4f       	sbci	r19, 0xFE	; 254
   10a82:	f9 01       	movw	r30, r18
   10a84:	20 81       	ld	r18, Z
   10a86:	31 81       	ldd	r19, Z+1	; 0x01
   10a88:	21 50       	subi	r18, 0x01	; 1
   10a8a:	30 40       	sbci	r19, 0x00	; 0
   10a8c:	fc 01       	movw	r30, r24
   10a8e:	31 83       	std	Z+1, r19	; 0x01
   10a90:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10a92:	ce 01       	movw	r24, r28
   10a94:	8b 58       	subi	r24, 0x8B	; 139
   10a96:	9e 4f       	sbci	r25, 0xFE	; 254
   10a98:	fc 01       	movw	r30, r24
   10a9a:	80 81       	ld	r24, Z
   10a9c:	91 81       	ldd	r25, Z+1	; 0x01
   10a9e:	00 97       	sbiw	r24, 0x00	; 0
   10aa0:	89 f6       	brne	.-94     	; 0x10a44 <travel_path+0x33c6>
   10aa2:	2f c0       	rjmp	.+94     	; 0x10b02 <travel_path+0x3484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10aa4:	8e 01       	movw	r16, r28
   10aa6:	0b 58       	subi	r16, 0x8B	; 139
   10aa8:	1e 4f       	sbci	r17, 0xFE	; 254
   10aaa:	ce 01       	movw	r24, r28
   10aac:	8f 58       	subi	r24, 0x8F	; 143
   10aae:	9e 4f       	sbci	r25, 0xFE	; 254
   10ab0:	fc 01       	movw	r30, r24
   10ab2:	60 81       	ld	r22, Z
   10ab4:	71 81       	ldd	r23, Z+1	; 0x01
   10ab6:	82 81       	ldd	r24, Z+2	; 0x02
   10ab8:	93 81       	ldd	r25, Z+3	; 0x03
   10aba:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10abe:	dc 01       	movw	r26, r24
   10ac0:	cb 01       	movw	r24, r22
   10ac2:	f8 01       	movw	r30, r16
   10ac4:	91 83       	std	Z+1, r25	; 0x01
   10ac6:	80 83       	st	Z, r24
   10ac8:	ce 01       	movw	r24, r28
   10aca:	87 58       	subi	r24, 0x87	; 135
   10acc:	9e 4f       	sbci	r25, 0xFE	; 254
   10ace:	9e 01       	movw	r18, r28
   10ad0:	2b 58       	subi	r18, 0x8B	; 139
   10ad2:	3e 4f       	sbci	r19, 0xFE	; 254
   10ad4:	f9 01       	movw	r30, r18
   10ad6:	20 81       	ld	r18, Z
   10ad8:	31 81       	ldd	r19, Z+1	; 0x01
   10ada:	fc 01       	movw	r30, r24
   10adc:	31 83       	std	Z+1, r19	; 0x01
   10ade:	20 83       	st	Z, r18
   10ae0:	ce 01       	movw	r24, r28
   10ae2:	87 58       	subi	r24, 0x87	; 135
   10ae4:	9e 4f       	sbci	r25, 0xFE	; 254
   10ae6:	fc 01       	movw	r30, r24
   10ae8:	80 81       	ld	r24, Z
   10aea:	91 81       	ldd	r25, Z+1	; 0x01
   10aec:	8c 01       	movw	r16, r24
   10aee:	c8 01       	movw	r24, r16
   10af0:	01 97       	sbiw	r24, 0x01	; 1
   10af2:	f1 f7       	brne	.-4      	; 0x10af0 <travel_path+0x3472>
   10af4:	8c 01       	movw	r16, r24
   10af6:	ce 01       	movw	r24, r28
   10af8:	87 58       	subi	r24, 0x87	; 135
   10afa:	9e 4f       	sbci	r25, 0xFE	; 254
   10afc:	fc 01       	movw	r30, r24
   10afe:	11 83       	std	Z+1, r17	; 0x01
   10b00:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
   10b02:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
   10b06:	9e 01       	movw	r18, r28
   10b08:	25 58       	subi	r18, 0x85	; 133
   10b0a:	3e 4f       	sbci	r19, 0xFE	; 254
   10b0c:	80 e0       	ldi	r24, 0x00	; 0
   10b0e:	90 e0       	ldi	r25, 0x00	; 0
   10b10:	a0 ea       	ldi	r26, 0xA0	; 160
   10b12:	b1 e4       	ldi	r27, 0x41	; 65
   10b14:	f9 01       	movw	r30, r18
   10b16:	80 83       	st	Z, r24
   10b18:	91 83       	std	Z+1, r25	; 0x01
   10b1a:	a2 83       	std	Z+2, r26	; 0x02
   10b1c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10b1e:	8e 01       	movw	r16, r28
   10b20:	01 58       	subi	r16, 0x81	; 129
   10b22:	1e 4f       	sbci	r17, 0xFE	; 254
   10b24:	ce 01       	movw	r24, r28
   10b26:	85 58       	subi	r24, 0x85	; 133
   10b28:	9e 4f       	sbci	r25, 0xFE	; 254
   10b2a:	fc 01       	movw	r30, r24
   10b2c:	60 81       	ld	r22, Z
   10b2e:	71 81       	ldd	r23, Z+1	; 0x01
   10b30:	82 81       	ldd	r24, Z+2	; 0x02
   10b32:	93 81       	ldd	r25, Z+3	; 0x03
   10b34:	26 e6       	ldi	r18, 0x66	; 102
   10b36:	36 e6       	ldi	r19, 0x66	; 102
   10b38:	46 e6       	ldi	r20, 0x66	; 102
   10b3a:	55 e4       	ldi	r21, 0x45	; 69
   10b3c:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10b40:	dc 01       	movw	r26, r24
   10b42:	cb 01       	movw	r24, r22
   10b44:	f8 01       	movw	r30, r16
   10b46:	80 83       	st	Z, r24
   10b48:	91 83       	std	Z+1, r25	; 0x01
   10b4a:	a2 83       	std	Z+2, r26	; 0x02
   10b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10b4e:	ce 01       	movw	r24, r28
   10b50:	81 58       	subi	r24, 0x81	; 129
   10b52:	9e 4f       	sbci	r25, 0xFE	; 254
   10b54:	11 e0       	ldi	r17, 0x01	; 1
   10b56:	fc 01       	movw	r30, r24
   10b58:	60 81       	ld	r22, Z
   10b5a:	71 81       	ldd	r23, Z+1	; 0x01
   10b5c:	82 81       	ldd	r24, Z+2	; 0x02
   10b5e:	93 81       	ldd	r25, Z+3	; 0x03
   10b60:	20 e0       	ldi	r18, 0x00	; 0
   10b62:	30 e0       	ldi	r19, 0x00	; 0
   10b64:	40 e8       	ldi	r20, 0x80	; 128
   10b66:	5f e3       	ldi	r21, 0x3F	; 63
   10b68:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   10b6c:	88 23       	and	r24, r24
   10b6e:	0c f0       	brlt	.+2      	; 0x10b72 <travel_path+0x34f4>
   10b70:	10 e0       	ldi	r17, 0x00	; 0
   10b72:	11 23       	and	r17, r17
   10b74:	49 f0       	breq	.+18     	; 0x10b88 <travel_path+0x350a>
		__ticks = 1;
   10b76:	ce 01       	movw	r24, r28
   10b78:	8d 57       	subi	r24, 0x7D	; 125
   10b7a:	9e 4f       	sbci	r25, 0xFE	; 254
   10b7c:	21 e0       	ldi	r18, 0x01	; 1
   10b7e:	30 e0       	ldi	r19, 0x00	; 0
   10b80:	fc 01       	movw	r30, r24
   10b82:	31 83       	std	Z+1, r19	; 0x01
   10b84:	20 83       	st	Z, r18
   10b86:	74 c0       	rjmp	.+232    	; 0x10c70 <travel_path+0x35f2>
	else if (__tmp > 65535)
   10b88:	ce 01       	movw	r24, r28
   10b8a:	81 58       	subi	r24, 0x81	; 129
   10b8c:	9e 4f       	sbci	r25, 0xFE	; 254
   10b8e:	11 e0       	ldi	r17, 0x01	; 1
   10b90:	fc 01       	movw	r30, r24
   10b92:	60 81       	ld	r22, Z
   10b94:	71 81       	ldd	r23, Z+1	; 0x01
   10b96:	82 81       	ldd	r24, Z+2	; 0x02
   10b98:	93 81       	ldd	r25, Z+3	; 0x03
   10b9a:	20 e0       	ldi	r18, 0x00	; 0
   10b9c:	3f ef       	ldi	r19, 0xFF	; 255
   10b9e:	4f e7       	ldi	r20, 0x7F	; 127
   10ba0:	57 e4       	ldi	r21, 0x47	; 71
   10ba2:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   10ba6:	18 16       	cp	r1, r24
   10ba8:	0c f0       	brlt	.+2      	; 0x10bac <travel_path+0x352e>
   10baa:	10 e0       	ldi	r17, 0x00	; 0
   10bac:	11 23       	and	r17, r17
   10bae:	09 f4       	brne	.+2      	; 0x10bb2 <travel_path+0x3534>
   10bb0:	4d c0       	rjmp	.+154    	; 0x10c4c <travel_path+0x35ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10bb2:	ce 01       	movw	r24, r28
   10bb4:	85 58       	subi	r24, 0x85	; 133
   10bb6:	9e 4f       	sbci	r25, 0xFE	; 254
   10bb8:	fc 01       	movw	r30, r24
   10bba:	60 81       	ld	r22, Z
   10bbc:	71 81       	ldd	r23, Z+1	; 0x01
   10bbe:	82 81       	ldd	r24, Z+2	; 0x02
   10bc0:	93 81       	ldd	r25, Z+3	; 0x03
   10bc2:	20 e0       	ldi	r18, 0x00	; 0
   10bc4:	30 e0       	ldi	r19, 0x00	; 0
   10bc6:	40 e2       	ldi	r20, 0x20	; 32
   10bc8:	51 e4       	ldi	r21, 0x41	; 65
   10bca:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10bce:	dc 01       	movw	r26, r24
   10bd0:	cb 01       	movw	r24, r22
   10bd2:	8e 01       	movw	r16, r28
   10bd4:	0d 57       	subi	r16, 0x7D	; 125
   10bd6:	1e 4f       	sbci	r17, 0xFE	; 254
   10bd8:	bc 01       	movw	r22, r24
   10bda:	cd 01       	movw	r24, r26
   10bdc:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10be0:	dc 01       	movw	r26, r24
   10be2:	cb 01       	movw	r24, r22
   10be4:	f8 01       	movw	r30, r16
   10be6:	91 83       	std	Z+1, r25	; 0x01
   10be8:	80 83       	st	Z, r24
   10bea:	27 c0       	rjmp	.+78     	; 0x10c3a <travel_path+0x35bc>
   10bec:	ce 01       	movw	r24, r28
   10bee:	8b 57       	subi	r24, 0x7B	; 123
   10bf0:	9e 4f       	sbci	r25, 0xFE	; 254
   10bf2:	20 e7       	ldi	r18, 0x70	; 112
   10bf4:	31 e0       	ldi	r19, 0x01	; 1
   10bf6:	fc 01       	movw	r30, r24
   10bf8:	31 83       	std	Z+1, r19	; 0x01
   10bfa:	20 83       	st	Z, r18
   10bfc:	ce 01       	movw	r24, r28
   10bfe:	8b 57       	subi	r24, 0x7B	; 123
   10c00:	9e 4f       	sbci	r25, 0xFE	; 254
   10c02:	fc 01       	movw	r30, r24
   10c04:	80 81       	ld	r24, Z
   10c06:	91 81       	ldd	r25, Z+1	; 0x01
   10c08:	8c 01       	movw	r16, r24
   10c0a:	c8 01       	movw	r24, r16
   10c0c:	01 97       	sbiw	r24, 0x01	; 1
   10c0e:	f1 f7       	brne	.-4      	; 0x10c0c <travel_path+0x358e>
   10c10:	8c 01       	movw	r16, r24
   10c12:	ce 01       	movw	r24, r28
   10c14:	8b 57       	subi	r24, 0x7B	; 123
   10c16:	9e 4f       	sbci	r25, 0xFE	; 254
   10c18:	fc 01       	movw	r30, r24
   10c1a:	11 83       	std	Z+1, r17	; 0x01
   10c1c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10c1e:	ce 01       	movw	r24, r28
   10c20:	8d 57       	subi	r24, 0x7D	; 125
   10c22:	9e 4f       	sbci	r25, 0xFE	; 254
   10c24:	9e 01       	movw	r18, r28
   10c26:	2d 57       	subi	r18, 0x7D	; 125
   10c28:	3e 4f       	sbci	r19, 0xFE	; 254
   10c2a:	f9 01       	movw	r30, r18
   10c2c:	20 81       	ld	r18, Z
   10c2e:	31 81       	ldd	r19, Z+1	; 0x01
   10c30:	21 50       	subi	r18, 0x01	; 1
   10c32:	30 40       	sbci	r19, 0x00	; 0
   10c34:	fc 01       	movw	r30, r24
   10c36:	31 83       	std	Z+1, r19	; 0x01
   10c38:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10c3a:	ce 01       	movw	r24, r28
   10c3c:	8d 57       	subi	r24, 0x7D	; 125
   10c3e:	9e 4f       	sbci	r25, 0xFE	; 254
   10c40:	fc 01       	movw	r30, r24
   10c42:	80 81       	ld	r24, Z
   10c44:	91 81       	ldd	r25, Z+1	; 0x01
   10c46:	00 97       	sbiw	r24, 0x00	; 0
   10c48:	89 f6       	brne	.-94     	; 0x10bec <travel_path+0x356e>
   10c4a:	2f c0       	rjmp	.+94     	; 0x10caa <travel_path+0x362c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10c4c:	8e 01       	movw	r16, r28
   10c4e:	0d 57       	subi	r16, 0x7D	; 125
   10c50:	1e 4f       	sbci	r17, 0xFE	; 254
   10c52:	ce 01       	movw	r24, r28
   10c54:	81 58       	subi	r24, 0x81	; 129
   10c56:	9e 4f       	sbci	r25, 0xFE	; 254
   10c58:	fc 01       	movw	r30, r24
   10c5a:	60 81       	ld	r22, Z
   10c5c:	71 81       	ldd	r23, Z+1	; 0x01
   10c5e:	82 81       	ldd	r24, Z+2	; 0x02
   10c60:	93 81       	ldd	r25, Z+3	; 0x03
   10c62:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10c66:	dc 01       	movw	r26, r24
   10c68:	cb 01       	movw	r24, r22
   10c6a:	f8 01       	movw	r30, r16
   10c6c:	91 83       	std	Z+1, r25	; 0x01
   10c6e:	80 83       	st	Z, r24
   10c70:	ce 01       	movw	r24, r28
   10c72:	89 57       	subi	r24, 0x79	; 121
   10c74:	9e 4f       	sbci	r25, 0xFE	; 254
   10c76:	9e 01       	movw	r18, r28
   10c78:	2d 57       	subi	r18, 0x7D	; 125
   10c7a:	3e 4f       	sbci	r19, 0xFE	; 254
   10c7c:	f9 01       	movw	r30, r18
   10c7e:	20 81       	ld	r18, Z
   10c80:	31 81       	ldd	r19, Z+1	; 0x01
   10c82:	fc 01       	movw	r30, r24
   10c84:	31 83       	std	Z+1, r19	; 0x01
   10c86:	20 83       	st	Z, r18
   10c88:	ce 01       	movw	r24, r28
   10c8a:	89 57       	subi	r24, 0x79	; 121
   10c8c:	9e 4f       	sbci	r25, 0xFE	; 254
   10c8e:	fc 01       	movw	r30, r24
   10c90:	80 81       	ld	r24, Z
   10c92:	91 81       	ldd	r25, Z+1	; 0x01
   10c94:	8c 01       	movw	r16, r24
   10c96:	c8 01       	movw	r24, r16
   10c98:	01 97       	sbiw	r24, 0x01	; 1
   10c9a:	f1 f7       	brne	.-4      	; 0x10c98 <travel_path+0x361a>
   10c9c:	8c 01       	movw	r16, r24
   10c9e:	ce 01       	movw	r24, r28
   10ca0:	89 57       	subi	r24, 0x79	; 121
   10ca2:	9e 4f       	sbci	r25, 0xFE	; 254
   10ca4:	fc 01       	movw	r30, r24
   10ca6:	11 83       	std	Z+1, r17	; 0x01
   10ca8:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
   10caa:	80 91 71 03 	lds	r24, 0x0371
   10cae:	90 91 72 03 	lds	r25, 0x0372
   10cb2:	01 96       	adiw	r24, 0x01	; 1
   10cb4:	90 93 72 03 	sts	0x0372, r25
   10cb8:	80 93 71 03 	sts	0x0371, r24
			pick_drop(master_path[node]);
   10cbc:	80 91 71 03 	lds	r24, 0x0371
   10cc0:	90 91 72 03 	lds	r25, 0x0372
   10cc4:	8b 58       	subi	r24, 0x8B	; 139
   10cc6:	9c 4f       	sbci	r25, 0xFC	; 252
   10cc8:	fc 01       	movw	r30, r24
   10cca:	80 81       	ld	r24, Z
   10ccc:	0e 94 89 37 	call	0x6f12	; 0x6f12 <pick_drop>
			node++;
   10cd0:	80 91 71 03 	lds	r24, 0x0371
   10cd4:	90 91 72 03 	lds	r25, 0x0372
   10cd8:	01 96       	adiw	r24, 0x01	; 1
   10cda:	90 93 72 03 	sts	0x0372, r25
   10cde:	80 93 71 03 	sts	0x0371, r24
			travel_path(master_path[node]);
   10ce2:	80 91 71 03 	lds	r24, 0x0371
   10ce6:	90 91 72 03 	lds	r25, 0x0372
   10cea:	8b 58       	subi	r24, 0x8B	; 139
   10cec:	9c 4f       	sbci	r25, 0xFC	; 252
   10cee:	fc 01       	movw	r30, r24
   10cf0:	80 81       	ld	r24, Z
   10cf2:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
		}
		else
		correct_right3();
   10cf6:	12 c0       	rjmp	.+36     	; 0x10d1c <travel_path+0x369e>
   10cf8:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
   10cfc:	0f c0       	rjmp	.+30     	; 0x10d1c <travel_path+0x369e>
	}
	else if(pos_val=='o')
   10cfe:	ce 01       	movw	r24, r28
   10d00:	87 57       	subi	r24, 0x77	; 119
   10d02:	9e 4f       	sbci	r25, 0xFE	; 254
   10d04:	fc 01       	movw	r30, r24
   10d06:	80 81       	ld	r24, Z
   10d08:	8f 36       	cpi	r24, 0x6F	; 111
   10d0a:	41 f4       	brne	.+16     	; 0x10d1c <travel_path+0x369e>
	{
		stop();
   10d0c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		path_fin=1;
   10d10:	81 e0       	ldi	r24, 0x01	; 1
   10d12:	90 e0       	ldi	r25, 0x00	; 0
   10d14:	90 93 3e 04 	sts	0x043E, r25
   10d18:	80 93 3d 04 	sts	0x043D, r24
	}
halt=0;	
   10d1c:	10 92 74 03 	sts	0x0374, r1
   10d20:	10 92 73 03 	sts	0x0373, r1
TIMSK3=1;
   10d24:	81 e7       	ldi	r24, 0x71	; 113
   10d26:	90 e0       	ldi	r25, 0x00	; 0
   10d28:	21 e0       	ldi	r18, 0x01	; 1
   10d2a:	fc 01       	movw	r30, r24
   10d2c:	20 83       	st	Z, r18
}
   10d2e:	c7 57       	subi	r28, 0x77	; 119
   10d30:	de 4f       	sbci	r29, 0xFE	; 254
   10d32:	0f b6       	in	r0, 0x3f	; 63
   10d34:	f8 94       	cli
   10d36:	de bf       	out	0x3e, r29	; 62
   10d38:	0f be       	out	0x3f, r0	; 63
   10d3a:	cd bf       	out	0x3d, r28	; 61
   10d3c:	df 91       	pop	r29
   10d3e:	cf 91       	pop	r28
   10d40:	1f 91       	pop	r17
   10d42:	0f 91       	pop	r16
   10d44:	08 95       	ret

00010d46 <line_following>:
* Example Call:		line_following();
*/

void line_following()

{
   10d46:	cf 93       	push	r28
   10d48:	df 93       	push	r29
   10d4a:	cd b7       	in	r28, 0x3d	; 61
   10d4c:	de b7       	in	r29, 0x3e	; 62

	TIMSK3 = 0x01;
   10d4e:	81 e7       	ldi	r24, 0x71	; 113
   10d50:	90 e0       	ldi	r25, 0x00	; 0
   10d52:	21 e0       	ldi	r18, 0x01	; 1
   10d54:	fc 01       	movw	r30, r24
   10d56:	20 83       	st	Z, r18

}
   10d58:	df 91       	pop	r29
   10d5a:	cf 91       	pop	r28
   10d5c:	08 95       	ret

00010d5e <lcd_port_config>:

*/

void lcd_port_config(void)

{
   10d5e:	cf 93       	push	r28
   10d60:	df 93       	push	r29
   10d62:	cd b7       	in	r28, 0x3d	; 61
   10d64:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
   10d66:	87 e2       	ldi	r24, 0x27	; 39
   10d68:	90 e0       	ldi	r25, 0x00	; 0
   10d6a:	27 e2       	ldi	r18, 0x27	; 39
   10d6c:	30 e0       	ldi	r19, 0x00	; 0
   10d6e:	f9 01       	movw	r30, r18
   10d70:	20 81       	ld	r18, Z
   10d72:	27 6f       	ori	r18, 0xF7	; 247
   10d74:	fc 01       	movw	r30, r24
   10d76:	20 83       	st	Z, r18

	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
   10d78:	88 e2       	ldi	r24, 0x28	; 40
   10d7a:	90 e0       	ldi	r25, 0x00	; 0
   10d7c:	28 e2       	ldi	r18, 0x28	; 40
   10d7e:	30 e0       	ldi	r19, 0x00	; 0
   10d80:	f9 01       	movw	r30, r18
   10d82:	20 81       	ld	r18, Z
   10d84:	20 78       	andi	r18, 0x80	; 128
   10d86:	fc 01       	movw	r30, r24
   10d88:	20 83       	st	Z, r18

}
   10d8a:	df 91       	pop	r29
   10d8c:	cf 91       	pop	r28
   10d8e:	08 95       	ret

00010d90 <buzzer_pin_config>:

*/

void buzzer_pin_config(void)

{
   10d90:	cf 93       	push	r28
   10d92:	df 93       	push	r29
   10d94:	cd b7       	in	r28, 0x3d	; 61
   10d96:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0x08; //Setting PORTC 3 as output
   10d98:	87 e2       	ldi	r24, 0x27	; 39
   10d9a:	90 e0       	ldi	r25, 0x00	; 0
   10d9c:	27 e2       	ldi	r18, 0x27	; 39
   10d9e:	30 e0       	ldi	r19, 0x00	; 0
   10da0:	f9 01       	movw	r30, r18
   10da2:	20 81       	ld	r18, Z
   10da4:	28 60       	ori	r18, 0x08	; 8
   10da6:	fc 01       	movw	r30, r24
   10da8:	20 83       	st	Z, r18

	PORTC = PORTC & 0xF7; //Setting PORTC 3 logic low to turnoff buzzer
   10daa:	88 e2       	ldi	r24, 0x28	; 40
   10dac:	90 e0       	ldi	r25, 0x00	; 0
   10dae:	28 e2       	ldi	r18, 0x28	; 40
   10db0:	30 e0       	ldi	r19, 0x00	; 0
   10db2:	f9 01       	movw	r30, r18
   10db4:	20 81       	ld	r18, Z
   10db6:	27 7f       	andi	r18, 0xF7	; 247
   10db8:	fc 01       	movw	r30, r24
   10dba:	20 83       	st	Z, r18

}
   10dbc:	df 91       	pop	r29
   10dbe:	cf 91       	pop	r28
   10dc0:	08 95       	ret

00010dc2 <buzzer_on>:

*/

void buzzer_on(void)

{
   10dc2:	cf 93       	push	r28
   10dc4:	df 93       	push	r29
   10dc6:	0f 92       	push	r0
   10dc8:	cd b7       	in	r28, 0x3d	; 61
   10dca:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
   10dcc:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
   10dce:	86 e2       	ldi	r24, 0x26	; 38
   10dd0:	90 e0       	ldi	r25, 0x00	; 0
   10dd2:	fc 01       	movw	r30, r24
   10dd4:	80 81       	ld	r24, Z
   10dd6:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore | 0x08;
   10dd8:	89 81       	ldd	r24, Y+1	; 0x01
   10dda:	88 60       	ori	r24, 0x08	; 8
   10ddc:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
   10dde:	88 e2       	ldi	r24, 0x28	; 40
   10de0:	90 e0       	ldi	r25, 0x00	; 0
   10de2:	29 81       	ldd	r18, Y+1	; 0x01
   10de4:	fc 01       	movw	r30, r24
   10de6:	20 83       	st	Z, r18

}
   10de8:	0f 90       	pop	r0
   10dea:	df 91       	pop	r29
   10dec:	cf 91       	pop	r28
   10dee:	08 95       	ret

00010df0 <buzzer_off>:

*/

void buzzer_off(void)

{
   10df0:	cf 93       	push	r28
   10df2:	df 93       	push	r29
   10df4:	0f 92       	push	r0
   10df6:	cd b7       	in	r28, 0x3d	; 61
   10df8:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
   10dfa:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
   10dfc:	86 e2       	ldi	r24, 0x26	; 38
   10dfe:	90 e0       	ldi	r25, 0x00	; 0
   10e00:	fc 01       	movw	r30, r24
   10e02:	80 81       	ld	r24, Z
   10e04:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore & 0xF7;
   10e06:	89 81       	ldd	r24, Y+1	; 0x01
   10e08:	87 7f       	andi	r24, 0xF7	; 247
   10e0a:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
   10e0c:	88 e2       	ldi	r24, 0x28	; 40
   10e0e:	90 e0       	ldi	r25, 0x00	; 0
   10e10:	29 81       	ldd	r18, Y+1	; 0x01
   10e12:	fc 01       	movw	r30, r24
   10e14:	20 83       	st	Z, r18

}
   10e16:	0f 90       	pop	r0
   10e18:	df 91       	pop	r29
   10e1a:	cf 91       	pop	r28
   10e1c:	08 95       	ret

00010e1e <buzz>:

*/

void buzz(unsigned long mst)

{
   10e1e:	0f 93       	push	r16
   10e20:	1f 93       	push	r17
   10e22:	cf 93       	push	r28
   10e24:	df 93       	push	r29
   10e26:	cd b7       	in	r28, 0x3d	; 61
   10e28:	de b7       	in	r29, 0x3e	; 62
   10e2a:	62 97       	sbiw	r28, 0x12	; 18
   10e2c:	0f b6       	in	r0, 0x3f	; 63
   10e2e:	f8 94       	cli
   10e30:	de bf       	out	0x3e, r29	; 62
   10e32:	0f be       	out	0x3f, r0	; 63
   10e34:	cd bf       	out	0x3d, r28	; 61
   10e36:	6f 87       	std	Y+15, r22	; 0x0f
   10e38:	78 8b       	std	Y+16, r23	; 0x10
   10e3a:	89 8b       	std	Y+17, r24	; 0x11
   10e3c:	9a 8b       	std	Y+18, r25	; 0x12

	buzzer_on();
   10e3e:	0e 94 e1 86 	call	0x10dc2	; 0x10dc2 <buzzer_on>
   10e42:	80 e0       	ldi	r24, 0x00	; 0
   10e44:	90 e0       	ldi	r25, 0x00	; 0
   10e46:	a8 e4       	ldi	r26, 0x48	; 72
   10e48:	b2 e4       	ldi	r27, 0x42	; 66
   10e4a:	89 83       	std	Y+1, r24	; 0x01
   10e4c:	9a 83       	std	Y+2, r25	; 0x02
   10e4e:	ab 83       	std	Y+3, r26	; 0x03
   10e50:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10e52:	69 81       	ldd	r22, Y+1	; 0x01
   10e54:	7a 81       	ldd	r23, Y+2	; 0x02
   10e56:	8b 81       	ldd	r24, Y+3	; 0x03
   10e58:	9c 81       	ldd	r25, Y+4	; 0x04
   10e5a:	26 e6       	ldi	r18, 0x66	; 102
   10e5c:	36 e6       	ldi	r19, 0x66	; 102
   10e5e:	46 e6       	ldi	r20, 0x66	; 102
   10e60:	55 e4       	ldi	r21, 0x45	; 69
   10e62:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10e66:	dc 01       	movw	r26, r24
   10e68:	cb 01       	movw	r24, r22
   10e6a:	8d 83       	std	Y+5, r24	; 0x05
   10e6c:	9e 83       	std	Y+6, r25	; 0x06
   10e6e:	af 83       	std	Y+7, r26	; 0x07
   10e70:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
   10e72:	11 e0       	ldi	r17, 0x01	; 1
   10e74:	6d 81       	ldd	r22, Y+5	; 0x05
   10e76:	7e 81       	ldd	r23, Y+6	; 0x06
   10e78:	8f 81       	ldd	r24, Y+7	; 0x07
   10e7a:	98 85       	ldd	r25, Y+8	; 0x08
   10e7c:	20 e0       	ldi	r18, 0x00	; 0
   10e7e:	30 e0       	ldi	r19, 0x00	; 0
   10e80:	40 e8       	ldi	r20, 0x80	; 128
   10e82:	5f e3       	ldi	r21, 0x3F	; 63
   10e84:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   10e88:	88 23       	and	r24, r24
   10e8a:	0c f0       	brlt	.+2      	; 0x10e8e <buzz+0x70>
   10e8c:	10 e0       	ldi	r17, 0x00	; 0
   10e8e:	11 23       	and	r17, r17
   10e90:	29 f0       	breq	.+10     	; 0x10e9c <buzz+0x7e>
		__ticks = 1;
   10e92:	81 e0       	ldi	r24, 0x01	; 1
   10e94:	90 e0       	ldi	r25, 0x00	; 0
   10e96:	9a 87       	std	Y+10, r25	; 0x0a
   10e98:	89 87       	std	Y+9, r24	; 0x09
   10e9a:	46 c0       	rjmp	.+140    	; 0x10f28 <buzz+0x10a>
	else if (__tmp > 65535)
   10e9c:	11 e0       	ldi	r17, 0x01	; 1
   10e9e:	6d 81       	ldd	r22, Y+5	; 0x05
   10ea0:	7e 81       	ldd	r23, Y+6	; 0x06
   10ea2:	8f 81       	ldd	r24, Y+7	; 0x07
   10ea4:	98 85       	ldd	r25, Y+8	; 0x08
   10ea6:	20 e0       	ldi	r18, 0x00	; 0
   10ea8:	3f ef       	ldi	r19, 0xFF	; 255
   10eaa:	4f e7       	ldi	r20, 0x7F	; 127
   10eac:	57 e4       	ldi	r21, 0x47	; 71
   10eae:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   10eb2:	18 16       	cp	r1, r24
   10eb4:	0c f0       	brlt	.+2      	; 0x10eb8 <buzz+0x9a>
   10eb6:	10 e0       	ldi	r17, 0x00	; 0
   10eb8:	11 23       	and	r17, r17
   10eba:	61 f1       	breq	.+88     	; 0x10f14 <buzz+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10ebc:	69 81       	ldd	r22, Y+1	; 0x01
   10ebe:	7a 81       	ldd	r23, Y+2	; 0x02
   10ec0:	8b 81       	ldd	r24, Y+3	; 0x03
   10ec2:	9c 81       	ldd	r25, Y+4	; 0x04
   10ec4:	20 e0       	ldi	r18, 0x00	; 0
   10ec6:	30 e0       	ldi	r19, 0x00	; 0
   10ec8:	40 e2       	ldi	r20, 0x20	; 32
   10eca:	51 e4       	ldi	r21, 0x41	; 65
   10ecc:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   10ed0:	dc 01       	movw	r26, r24
   10ed2:	cb 01       	movw	r24, r22
   10ed4:	bc 01       	movw	r22, r24
   10ed6:	cd 01       	movw	r24, r26
   10ed8:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10edc:	dc 01       	movw	r26, r24
   10ede:	cb 01       	movw	r24, r22
   10ee0:	9a 87       	std	Y+10, r25	; 0x0a
   10ee2:	89 87       	std	Y+9, r24	; 0x09
   10ee4:	12 c0       	rjmp	.+36     	; 0x10f0a <buzz+0xec>
   10ee6:	80 e7       	ldi	r24, 0x70	; 112
   10ee8:	91 e0       	ldi	r25, 0x01	; 1
   10eea:	9c 87       	std	Y+12, r25	; 0x0c
   10eec:	8b 87       	std	Y+11, r24	; 0x0b
   10eee:	8b 85       	ldd	r24, Y+11	; 0x0b
   10ef0:	9c 85       	ldd	r25, Y+12	; 0x0c
   10ef2:	8c 01       	movw	r16, r24
   10ef4:	c8 01       	movw	r24, r16
   10ef6:	01 97       	sbiw	r24, 0x01	; 1
   10ef8:	f1 f7       	brne	.-4      	; 0x10ef6 <buzz+0xd8>
   10efa:	8c 01       	movw	r16, r24
   10efc:	1c 87       	std	Y+12, r17	; 0x0c
   10efe:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10f00:	89 85       	ldd	r24, Y+9	; 0x09
   10f02:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f04:	01 97       	sbiw	r24, 0x01	; 1
   10f06:	9a 87       	std	Y+10, r25	; 0x0a
   10f08:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10f0a:	89 85       	ldd	r24, Y+9	; 0x09
   10f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f0e:	00 97       	sbiw	r24, 0x00	; 0
   10f10:	51 f7       	brne	.-44     	; 0x10ee6 <buzz+0xc8>
   10f12:	17 c0       	rjmp	.+46     	; 0x10f42 <buzz+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10f14:	6d 81       	ldd	r22, Y+5	; 0x05
   10f16:	7e 81       	ldd	r23, Y+6	; 0x06
   10f18:	8f 81       	ldd	r24, Y+7	; 0x07
   10f1a:	98 85       	ldd	r25, Y+8	; 0x08
   10f1c:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   10f20:	dc 01       	movw	r26, r24
   10f22:	cb 01       	movw	r24, r22
   10f24:	9a 87       	std	Y+10, r25	; 0x0a
   10f26:	89 87       	std	Y+9, r24	; 0x09
   10f28:	89 85       	ldd	r24, Y+9	; 0x09
   10f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f2c:	9e 87       	std	Y+14, r25	; 0x0e
   10f2e:	8d 87       	std	Y+13, r24	; 0x0d
   10f30:	8d 85       	ldd	r24, Y+13	; 0x0d
   10f32:	9e 85       	ldd	r25, Y+14	; 0x0e
   10f34:	8c 01       	movw	r16, r24
   10f36:	c8 01       	movw	r24, r16
   10f38:	01 97       	sbiw	r24, 0x01	; 1
   10f3a:	f1 f7       	brne	.-4      	; 0x10f38 <buzz+0x11a>
   10f3c:	8c 01       	movw	r16, r24
   10f3e:	1e 87       	std	Y+14, r17	; 0x0e
   10f40:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(50);

	buzzer_off();
   10f42:	0e 94 f8 86 	call	0x10df0	; 0x10df0 <buzzer_off>

}
   10f46:	62 96       	adiw	r28, 0x12	; 18
   10f48:	0f b6       	in	r0, 0x3f	; 63
   10f4a:	f8 94       	cli
   10f4c:	de bf       	out	0x3e, r29	; 62
   10f4e:	0f be       	out	0x3f, r0	; 63
   10f50:	cd bf       	out	0x3d, r28	; 61
   10f52:	df 91       	pop	r29
   10f54:	cf 91       	pop	r28
   10f56:	1f 91       	pop	r17
   10f58:	0f 91       	pop	r16
   10f5a:	08 95       	ret

00010f5c <timer1_init>:

*/

void timer1_init()

{
   10f5c:	cf 93       	push	r28
   10f5e:	df 93       	push	r29
   10f60:	cd b7       	in	r28, 0x3d	; 61
   10f62:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0X00;
   10f64:	80 e8       	ldi	r24, 0x80	; 128
   10f66:	90 e0       	ldi	r25, 0x00	; 0
   10f68:	fc 01       	movw	r30, r24
   10f6a:	10 82       	st	Z, r1

	ICR1 = 1023;
   10f6c:	86 e8       	ldi	r24, 0x86	; 134
   10f6e:	90 e0       	ldi	r25, 0x00	; 0
   10f70:	2f ef       	ldi	r18, 0xFF	; 255
   10f72:	33 e0       	ldi	r19, 0x03	; 3
   10f74:	fc 01       	movw	r30, r24
   10f76:	31 83       	std	Z+1, r19	; 0x01
   10f78:	20 83       	st	Z, r18

	TCNT1H = 0XFC;
   10f7a:	85 e8       	ldi	r24, 0x85	; 133
   10f7c:	90 e0       	ldi	r25, 0x00	; 0
   10f7e:	2c ef       	ldi	r18, 0xFC	; 252
   10f80:	fc 01       	movw	r30, r24
   10f82:	20 83       	st	Z, r18

	TCNT1L = 0X01;
   10f84:	84 e8       	ldi	r24, 0x84	; 132
   10f86:	90 e0       	ldi	r25, 0x00	; 0
   10f88:	21 e0       	ldi	r18, 0x01	; 1
   10f8a:	fc 01       	movw	r30, r24
   10f8c:	20 83       	st	Z, r18

	OCR1AH = 0x03;	//Output compare Register high value for servo 1
   10f8e:	89 e8       	ldi	r24, 0x89	; 137
   10f90:	90 e0       	ldi	r25, 0x00	; 0
   10f92:	23 e0       	ldi	r18, 0x03	; 3
   10f94:	fc 01       	movw	r30, r24
   10f96:	20 83       	st	Z, r18

	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
   10f98:	88 e8       	ldi	r24, 0x88	; 136
   10f9a:	90 e0       	ldi	r25, 0x00	; 0
   10f9c:	2f ef       	ldi	r18, 0xFF	; 255
   10f9e:	fc 01       	movw	r30, r24
   10fa0:	20 83       	st	Z, r18

	OCR1BH = 0x03;	//Output compare Register high value for servo 2
   10fa2:	8b e8       	ldi	r24, 0x8B	; 139
   10fa4:	90 e0       	ldi	r25, 0x00	; 0
   10fa6:	23 e0       	ldi	r18, 0x03	; 3
   10fa8:	fc 01       	movw	r30, r24
   10faa:	20 83       	st	Z, r18

	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
   10fac:	8a e8       	ldi	r24, 0x8A	; 138
   10fae:	90 e0       	ldi	r25, 0x00	; 0
   10fb0:	2f ef       	ldi	r18, 0xFF	; 255
   10fb2:	fc 01       	movw	r30, r24
   10fb4:	20 83       	st	Z, r18

	OCR1CH = 0x03;	//Output compare Register high value for servo 3
   10fb6:	8d e8       	ldi	r24, 0x8D	; 141
   10fb8:	90 e0       	ldi	r25, 0x00	; 0
   10fba:	23 e0       	ldi	r18, 0x03	; 3
   10fbc:	fc 01       	movw	r30, r24
   10fbe:	20 83       	st	Z, r18

	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
   10fc0:	8c e8       	ldi	r24, 0x8C	; 140
   10fc2:	90 e0       	ldi	r25, 0x00	; 0
   10fc4:	2f ef       	ldi	r18, 0xFF	; 255
   10fc6:	fc 01       	movw	r30, r24
   10fc8:	20 83       	st	Z, r18

	ICR1H  = 0x03;
   10fca:	87 e8       	ldi	r24, 0x87	; 135
   10fcc:	90 e0       	ldi	r25, 0x00	; 0
   10fce:	23 e0       	ldi	r18, 0x03	; 3
   10fd0:	fc 01       	movw	r30, r24
   10fd2:	20 83       	st	Z, r18

	ICR1L  = 0xFF;
   10fd4:	86 e8       	ldi	r24, 0x86	; 134
   10fd6:	90 e0       	ldi	r25, 0x00	; 0
   10fd8:	2f ef       	ldi	r18, 0xFF	; 255
   10fda:	fc 01       	movw	r30, r24
   10fdc:	20 83       	st	Z, r18

	TCCR1A = 0XAB;
   10fde:	80 e8       	ldi	r24, 0x80	; 128
   10fe0:	90 e0       	ldi	r25, 0x00	; 0
   10fe2:	2b ea       	ldi	r18, 0xAB	; 171
   10fe4:	fc 01       	movw	r30, r24
   10fe6:	20 83       	st	Z, r18

	TCCR1B = 0X0C;
   10fe8:	81 e8       	ldi	r24, 0x81	; 129
   10fea:	90 e0       	ldi	r25, 0x00	; 0
   10fec:	2c e0       	ldi	r18, 0x0C	; 12
   10fee:	fc 01       	movw	r30, r24
   10ff0:	20 83       	st	Z, r18

	TCCR1C = 0x00;
   10ff2:	82 e8       	ldi	r24, 0x82	; 130
   10ff4:	90 e0       	ldi	r25, 0x00	; 0
   10ff6:	fc 01       	movw	r30, r24
   10ff8:	10 82       	st	Z, r1

}
   10ffa:	df 91       	pop	r29
   10ffc:	cf 91       	pop	r28
   10ffe:	08 95       	ret

00011000 <timer3_init>:

*/

void timer3_init(void)

{
   11000:	cf 93       	push	r28
   11002:	df 93       	push	r29
   11004:	cd b7       	in	r28, 0x3d	; 61
   11006:	de b7       	in	r29, 0x3e	; 62

	TCCR3B = 0x00; //stop
   11008:	81 e9       	ldi	r24, 0x91	; 145
   1100a:	90 e0       	ldi	r25, 0x00	; 0
   1100c:	fc 01       	movw	r30, r24
   1100e:	10 82       	st	Z, r1

	TCNT3 = 0xFDC0; // 0.01s
   11010:	84 e9       	ldi	r24, 0x94	; 148
   11012:	90 e0       	ldi	r25, 0x00	; 0
   11014:	20 ec       	ldi	r18, 0xC0	; 192
   11016:	3d ef       	ldi	r19, 0xFD	; 253
   11018:	fc 01       	movw	r30, r24
   1101a:	31 83       	std	Z+1, r19	; 0x01
   1101c:	20 83       	st	Z, r18

	OCR3AH = 0x00; //Output Compare Register (OCR)- Not used
   1101e:	89 e9       	ldi	r24, 0x99	; 153
   11020:	90 e0       	ldi	r25, 0x00	; 0
   11022:	fc 01       	movw	r30, r24
   11024:	10 82       	st	Z, r1

	OCR3AL = 0x00; //Output Compare Register (OCR)- Not used
   11026:	88 e9       	ldi	r24, 0x98	; 152
   11028:	90 e0       	ldi	r25, 0x00	; 0
   1102a:	fc 01       	movw	r30, r24
   1102c:	10 82       	st	Z, r1

	OCR3BH = 0x00; //Output Compare Register (OCR)- Not used
   1102e:	8b e9       	ldi	r24, 0x9B	; 155
   11030:	90 e0       	ldi	r25, 0x00	; 0
   11032:	fc 01       	movw	r30, r24
   11034:	10 82       	st	Z, r1

	OCR3BL = 0x00; //Output Compare Register (OCR)- Not used
   11036:	8a e9       	ldi	r24, 0x9A	; 154
   11038:	90 e0       	ldi	r25, 0x00	; 0
   1103a:	fc 01       	movw	r30, r24
   1103c:	10 82       	st	Z, r1

	OCR3CH = 0x00; //Output Compare Register (OCR)- Not used
   1103e:	8d e9       	ldi	r24, 0x9D	; 157
   11040:	90 e0       	ldi	r25, 0x00	; 0
   11042:	fc 01       	movw	r30, r24
   11044:	10 82       	st	Z, r1

	OCR3CL = 0x00; //Output Compare Register (OCR)- Not used
   11046:	8c e9       	ldi	r24, 0x9C	; 156
   11048:	90 e0       	ldi	r25, 0x00	; 0
   1104a:	fc 01       	movw	r30, r24
   1104c:	10 82       	st	Z, r1

	ICR3H = 0x00; //Input Capture Register (ICR)- Not used
   1104e:	87 e9       	ldi	r24, 0x97	; 151
   11050:	90 e0       	ldi	r25, 0x00	; 0
   11052:	fc 01       	movw	r30, r24
   11054:	10 82       	st	Z, r1

	ICR3L = 0x00; //Input Capture Register (ICR)- Not used
   11056:	86 e9       	ldi	r24, 0x96	; 150
   11058:	90 e0       	ldi	r25, 0x00	; 0
   1105a:	fc 01       	movw	r30, r24
   1105c:	10 82       	st	Z, r1

	TCCR3A = 0x00;
   1105e:	80 e9       	ldi	r24, 0x90	; 144
   11060:	90 e0       	ldi	r25, 0x00	; 0
   11062:	fc 01       	movw	r30, r24
   11064:	10 82       	st	Z, r1

	TCCR3C = 0x00;
   11066:	82 e9       	ldi	r24, 0x92	; 146
   11068:	90 e0       	ldi	r25, 0x00	; 0
   1106a:	fc 01       	movw	r30, r24
   1106c:	10 82       	st	Z, r1

	TCCR3B = 0x04; //Pre-scaler 256 1-0-0
   1106e:	81 e9       	ldi	r24, 0x91	; 145
   11070:	90 e0       	ldi	r25, 0x00	; 0
   11072:	24 e0       	ldi	r18, 0x04	; 4
   11074:	fc 01       	movw	r30, r24
   11076:	20 83       	st	Z, r18

}
   11078:	df 91       	pop	r29
   1107a:	cf 91       	pop	r28
   1107c:	08 95       	ret

0001107e <timer4_init>:

*/

void timer4_init(void) 

{
   1107e:	cf 93       	push	r28
   11080:	df 93       	push	r29
   11082:	cd b7       	in	r28, 0x3d	; 61
   11084:	de b7       	in	r29, 0x3e	; 62

	TCCR4B = 0x00; //stop
   11086:	81 ea       	ldi	r24, 0xA1	; 161
   11088:	90 e0       	ldi	r25, 0x00	; 0
   1108a:	fc 01       	movw	r30, r24
   1108c:	10 82       	st	Z, r1

	TCNT4 = 0xE980; // 0.1s
   1108e:	84 ea       	ldi	r24, 0xA4	; 164
   11090:	90 e0       	ldi	r25, 0x00	; 0
   11092:	20 e8       	ldi	r18, 0x80	; 128
   11094:	39 ee       	ldi	r19, 0xE9	; 233
   11096:	fc 01       	movw	r30, r24
   11098:	31 83       	std	Z+1, r19	; 0x01
   1109a:	20 83       	st	Z, r18

	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
   1109c:	89 ea       	ldi	r24, 0xA9	; 169
   1109e:	90 e0       	ldi	r25, 0x00	; 0
   110a0:	fc 01       	movw	r30, r24
   110a2:	10 82       	st	Z, r1

	OCR4AL = 0x00; //Output Compare Register (OCR)- Not used
   110a4:	88 ea       	ldi	r24, 0xA8	; 168
   110a6:	90 e0       	ldi	r25, 0x00	; 0
   110a8:	fc 01       	movw	r30, r24
   110aa:	10 82       	st	Z, r1

	OCR4BH = 0x00; //Output Compare Register (OCR)- Not used
   110ac:	8b ea       	ldi	r24, 0xAB	; 171
   110ae:	90 e0       	ldi	r25, 0x00	; 0
   110b0:	fc 01       	movw	r30, r24
   110b2:	10 82       	st	Z, r1

	OCR4BL = 0x00; //Output Compare Register (OCR)- Not used
   110b4:	8a ea       	ldi	r24, 0xAA	; 170
   110b6:	90 e0       	ldi	r25, 0x00	; 0
   110b8:	fc 01       	movw	r30, r24
   110ba:	10 82       	st	Z, r1

	OCR4CH = 0x00; //Output Compare Register (OCR)- Not used
   110bc:	8d ea       	ldi	r24, 0xAD	; 173
   110be:	90 e0       	ldi	r25, 0x00	; 0
   110c0:	fc 01       	movw	r30, r24
   110c2:	10 82       	st	Z, r1

	OCR4CL = 0x00; //Output Compare Register (OCR)- Not used
   110c4:	8c ea       	ldi	r24, 0xAC	; 172
   110c6:	90 e0       	ldi	r25, 0x00	; 0
   110c8:	fc 01       	movw	r30, r24
   110ca:	10 82       	st	Z, r1

	ICR4H = 0x00; //Input Capture Register (ICR)- Not used
   110cc:	87 ea       	ldi	r24, 0xA7	; 167
   110ce:	90 e0       	ldi	r25, 0x00	; 0
   110d0:	fc 01       	movw	r30, r24
   110d2:	10 82       	st	Z, r1

	ICR4L = 0x00; //Input Capture Register (ICR)- Not used
   110d4:	86 ea       	ldi	r24, 0xA6	; 166
   110d6:	90 e0       	ldi	r25, 0x00	; 0
   110d8:	fc 01       	movw	r30, r24
   110da:	10 82       	st	Z, r1

	TCCR4A = 0x00;
   110dc:	80 ea       	ldi	r24, 0xA0	; 160
   110de:	90 e0       	ldi	r25, 0x00	; 0
   110e0:	fc 01       	movw	r30, r24
   110e2:	10 82       	st	Z, r1

	TCCR4C = 0x00;
   110e4:	82 ea       	ldi	r24, 0xA2	; 162
   110e6:	90 e0       	ldi	r25, 0x00	; 0
   110e8:	fc 01       	movw	r30, r24
   110ea:	10 82       	st	Z, r1

	TCCR4B = 0x04; //Pre-scaler 256 1-0-0
   110ec:	81 ea       	ldi	r24, 0xA1	; 161
   110ee:	90 e0       	ldi	r25, 0x00	; 0
   110f0:	24 e0       	ldi	r18, 0x04	; 4
   110f2:	fc 01       	movw	r30, r24
   110f4:	20 83       	st	Z, r18

}
   110f6:	df 91       	pop	r29
   110f8:	cf 91       	pop	r28
   110fa:	08 95       	ret

000110fc <timer5_init>:

*/

void timer5_init()

{
   110fc:	cf 93       	push	r28
   110fe:	df 93       	push	r29
   11100:	cd b7       	in	r28, 0x3d	; 61
   11102:	de b7       	in	r29, 0x3e	; 62

    TCCR5B = 0x00; //Stop
   11104:	81 e2       	ldi	r24, 0x21	; 33
   11106:	91 e0       	ldi	r25, 0x01	; 1
   11108:	fc 01       	movw	r30, r24
   1110a:	10 82       	st	Z, r1

    TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
   1110c:	85 e2       	ldi	r24, 0x25	; 37
   1110e:	91 e0       	ldi	r25, 0x01	; 1
   11110:	2f ef       	ldi	r18, 0xFF	; 255
   11112:	fc 01       	movw	r30, r24
   11114:	20 83       	st	Z, r18

    TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
   11116:	84 e2       	ldi	r24, 0x24	; 36
   11118:	91 e0       	ldi	r25, 0x01	; 1
   1111a:	21 e0       	ldi	r18, 0x01	; 1
   1111c:	fc 01       	movw	r30, r24
   1111e:	20 83       	st	Z, r18

    OCR5AH = 0x00; //Output compare register high value for Left Motor
   11120:	89 e2       	ldi	r24, 0x29	; 41
   11122:	91 e0       	ldi	r25, 0x01	; 1
   11124:	fc 01       	movw	r30, r24
   11126:	10 82       	st	Z, r1

    OCR5AL = 0xFF; //Output compare register low value for Left Motor
   11128:	88 e2       	ldi	r24, 0x28	; 40
   1112a:	91 e0       	ldi	r25, 0x01	; 1
   1112c:	2f ef       	ldi	r18, 0xFF	; 255
   1112e:	fc 01       	movw	r30, r24
   11130:	20 83       	st	Z, r18

    OCR5BH = 0x00; //Output compare register high value for Right Motor
   11132:	8b e2       	ldi	r24, 0x2B	; 43
   11134:	91 e0       	ldi	r25, 0x01	; 1
   11136:	fc 01       	movw	r30, r24
   11138:	10 82       	st	Z, r1

    OCR5BL = 0xFF; //Output compare register low value for Right Motor
   1113a:	8a e2       	ldi	r24, 0x2A	; 42
   1113c:	91 e0       	ldi	r25, 0x01	; 1
   1113e:	2f ef       	ldi	r18, 0xFF	; 255
   11140:	fc 01       	movw	r30, r24
   11142:	20 83       	st	Z, r18

    OCR5CH = 0x00; //Output compare register high value for Motor C1
   11144:	8d e2       	ldi	r24, 0x2D	; 45
   11146:	91 e0       	ldi	r25, 0x01	; 1
   11148:	fc 01       	movw	r30, r24
   1114a:	10 82       	st	Z, r1

    OCR5CL = 0xFF; //Output compare register low value for Motor C1
   1114c:	8c e2       	ldi	r24, 0x2C	; 44
   1114e:	91 e0       	ldi	r25, 0x01	; 1
   11150:	2f ef       	ldi	r18, 0xFF	; 255
   11152:	fc 01       	movw	r30, r24
   11154:	20 83       	st	Z, r18

    TCCR5A = 0xA9;
   11156:	80 e2       	ldi	r24, 0x20	; 32
   11158:	91 e0       	ldi	r25, 0x01	; 1
   1115a:	29 ea       	ldi	r18, 0xA9	; 169
   1115c:	fc 01       	movw	r30, r24
   1115e:	20 83       	st	Z, r18

				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/



    TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
   11160:	81 e2       	ldi	r24, 0x21	; 33
   11162:	91 e0       	ldi	r25, 0x01	; 1
   11164:	2b e0       	ldi	r18, 0x0B	; 11
   11166:	fc 01       	movw	r30, r24
   11168:	20 83       	st	Z, r18

}
   1116a:	df 91       	pop	r29
   1116c:	cf 91       	pop	r28
   1116e:	08 95       	ret

00011170 <port_init>:

*/

void port_init()

{   DDRJ= DDRJ | 0xF7;
   11170:	cf 93       	push	r28
   11172:	df 93       	push	r29
   11174:	cd b7       	in	r28, 0x3d	; 61
   11176:	de b7       	in	r29, 0x3e	; 62
   11178:	84 e0       	ldi	r24, 0x04	; 4
   1117a:	91 e0       	ldi	r25, 0x01	; 1
   1117c:	24 e0       	ldi	r18, 0x04	; 4
   1117e:	31 e0       	ldi	r19, 0x01	; 1
   11180:	f9 01       	movw	r30, r18
   11182:	20 81       	ld	r18, Z
   11184:	27 6f       	ori	r18, 0xF7	; 247
   11186:	fc 01       	movw	r30, r24
   11188:	20 83       	st	Z, r18

	PORTJ=0xFF;
   1118a:	85 e0       	ldi	r24, 0x05	; 5
   1118c:	91 e0       	ldi	r25, 0x01	; 1
   1118e:	2f ef       	ldi	r18, 0xFF	; 255
   11190:	fc 01       	movw	r30, r24
   11192:	20 83       	st	Z, r18

	buzzer_pin_config(); //Buzzer pin configuration
   11194:	0e 94 c8 86 	call	0x10d90	; 0x10d90 <buzzer_pin_config>

	lcd_port_config();  //LCD pin configuration
   11198:	0e 94 af 86 	call	0x10d5e	; 0x10d5e <lcd_port_config>

	

	adc_pin_config();  //ADC pin configuration
   1119c:	0e 94 15 1b 	call	0x362a	; 0x362a <adc_pin_config>

	motion_pin_config(); //Motion pin configuration
   111a0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <motion_pin_config>

	left_encoder_pin_config(); //Left Encoder pin configuration
   111a4:	0e 94 cd 0b 	call	0x179a	; 0x179a <left_encoder_pin_config>

	right_encoder_pin_config(); //Right Encoder pin configuration
   111a8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <right_encoder_pin_config>
	
	servo1_pin_config(); //Servo 1 pin configuration
   111ac:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <servo1_pin_config>
	
	servo2_pin_config(); //Servo 2 pin configuration
   111b0:	0e 94 8c 1c 	call	0x3918	; 0x3918 <servo2_pin_config>
	
	servo3_pin_config(); //Servo 3 pin configuration
   111b4:	0e 94 a5 1c 	call	0x394a	; 0x394a <servo3_pin_config>

}
   111b8:	df 91       	pop	r29
   111ba:	cf 91       	pop	r28
   111bc:	08 95       	ret

000111be <init_devices>:

*/

void init_devices(void)

{
   111be:	cf 93       	push	r28
   111c0:	df 93       	push	r29
   111c2:	cd b7       	in	r28, 0x3d	; 61
   111c4:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupts
   111c6:	f8 94       	cli

	

	port_init(); //Initiate all ports
   111c8:	0e 94 b8 88 	call	0x11170	; 0x11170 <port_init>

	adc_init(); //Initiate ADC registers
   111cc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <adc_init>
	
	uart2_init();
   111d0:	82 ed       	ldi	r24, 0xD2	; 210
   111d2:	90 e9       	ldi	r25, 0x90	; 144
   111d4:	fc 01       	movw	r30, r24
   111d6:	19 95       	eicall


	//Initiate timers

	timer1_init(); //Initiate Timer 1
   111d8:	0e 94 ae 87 	call	0x10f5c	; 0x10f5c <timer1_init>

	timer5_init(); //Initiate Timer 5
   111dc:	0e 94 7e 88 	call	0x110fc	; 0x110fc <timer5_init>

	timer3_init(); //Initiate Timer 3
   111e0:	0e 94 00 88 	call	0x11000	; 0x11000 <timer3_init>

	timer4_init(); //Initiate Timer 4
   111e4:	0e 94 3f 88 	call	0x1107e	; 0x1107e <timer4_init>

	

	//Initiate position encoder interrupts

	left_position_encoder_interrupt_init();
   111e8:	0e 94 16 0c 	call	0x182c	; 0x182c <left_position_encoder_interrupt_init>

	right_position_encoder_interrupt_init();
   111ec:	0e 94 31 0c 	call	0x1862	; 0x1862 <right_position_encoder_interrupt_init>

	

	sei(); //Enables the global interrupts
   111f0:	78 94       	sei

}
   111f2:	df 91       	pop	r29
   111f4:	cf 91       	pop	r28
   111f6:	08 95       	ret

000111f8 <adjacent>:
int transf[37]={99,30,31,32,33,34,35,24,25,26,27,28,29,18,19,20,21,22,23,12,13,14,15,16,17,6,7,8,9,10,11,0,1,2,3,4,5};
int p_nx=0,p_ny=0,n_nx=0,n_ny=0;


void adjacent(int x1,int y1,int adj[4][2])
{
   111f8:	cf 93       	push	r28
   111fa:	df 93       	push	r29
   111fc:	cd b7       	in	r28, 0x3d	; 61
   111fe:	de b7       	in	r29, 0x3e	; 62
   11200:	6c 97       	sbiw	r28, 0x1c	; 28
   11202:	0f b6       	in	r0, 0x3f	; 63
   11204:	f8 94       	cli
   11206:	de bf       	out	0x3e, r29	; 62
   11208:	0f be       	out	0x3f, r0	; 63
   1120a:	cd bf       	out	0x3d, r28	; 61
   1120c:	98 8f       	std	Y+24, r25	; 0x18
   1120e:	8f 8b       	std	Y+23, r24	; 0x17
   11210:	7a 8f       	std	Y+26, r23	; 0x1a
   11212:	69 8f       	std	Y+25, r22	; 0x19
   11214:	5c 8f       	std	Y+28, r21	; 0x1c
   11216:	4b 8f       	std	Y+27, r20	; 0x1b
    int i=0,x=0,y=0;
   11218:	1a 82       	std	Y+2, r1	; 0x02
   1121a:	19 82       	std	Y+1, r1	; 0x01
   1121c:	1c 82       	std	Y+4, r1	; 0x04
   1121e:	1b 82       	std	Y+3, r1	; 0x03
   11220:	1e 82       	std	Y+6, r1	; 0x06
   11222:	1d 82       	std	Y+5, r1	; 0x05
    int key_x[4]={-1,0,1,0};//N E S W
   11224:	ce 01       	movw	r24, r28
   11226:	07 96       	adiw	r24, 0x07	; 7
   11228:	24 e9       	ldi	r18, 0x94	; 148
   1122a:	32 e0       	ldi	r19, 0x02	; 2
   1122c:	48 e0       	ldi	r20, 0x08	; 8
   1122e:	f9 01       	movw	r30, r18
   11230:	00 80       	ld	r0, Z
   11232:	2f 5f       	subi	r18, 0xFF	; 255
   11234:	3f 4f       	sbci	r19, 0xFF	; 255
   11236:	fc 01       	movw	r30, r24
   11238:	00 82       	st	Z, r0
   1123a:	01 96       	adiw	r24, 0x01	; 1
   1123c:	41 50       	subi	r20, 0x01	; 1
   1123e:	44 23       	and	r20, r20
   11240:	b1 f7       	brne	.-20     	; 0x1122e <adjacent+0x36>
    int key_y[4]={0,1,0,-1};
   11242:	ce 01       	movw	r24, r28
   11244:	0f 96       	adiw	r24, 0x0f	; 15
   11246:	2c e9       	ldi	r18, 0x9C	; 156
   11248:	32 e0       	ldi	r19, 0x02	; 2
   1124a:	48 e0       	ldi	r20, 0x08	; 8
   1124c:	f9 01       	movw	r30, r18
   1124e:	00 80       	ld	r0, Z
   11250:	2f 5f       	subi	r18, 0xFF	; 255
   11252:	3f 4f       	sbci	r19, 0xFF	; 255
   11254:	fc 01       	movw	r30, r24
   11256:	00 82       	st	Z, r0
   11258:	01 96       	adiw	r24, 0x01	; 1
   1125a:	41 50       	subi	r20, 0x01	; 1
   1125c:	44 23       	and	r20, r20
   1125e:	b1 f7       	brne	.-20     	; 0x1124c <adjacent+0x54>
    for(i=0;i<4;i++)
   11260:	1a 82       	std	Y+2, r1	; 0x02
   11262:	19 82       	std	Y+1, r1	; 0x01
   11264:	79 c0       	rjmp	.+242    	; 0x11358 <adjacent+0x160>
	{
        adj[i][0]=-1;
   11266:	89 81       	ldd	r24, Y+1	; 0x01
   11268:	9a 81       	ldd	r25, Y+2	; 0x02
   1126a:	88 0f       	add	r24, r24
   1126c:	99 1f       	adc	r25, r25
   1126e:	88 0f       	add	r24, r24
   11270:	99 1f       	adc	r25, r25
   11272:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11274:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11276:	82 0f       	add	r24, r18
   11278:	93 1f       	adc	r25, r19
   1127a:	2f ef       	ldi	r18, 0xFF	; 255
   1127c:	3f ef       	ldi	r19, 0xFF	; 255
   1127e:	fc 01       	movw	r30, r24
   11280:	31 83       	std	Z+1, r19	; 0x01
   11282:	20 83       	st	Z, r18
        adj[i][1]=-1;
   11284:	89 81       	ldd	r24, Y+1	; 0x01
   11286:	9a 81       	ldd	r25, Y+2	; 0x02
   11288:	88 0f       	add	r24, r24
   1128a:	99 1f       	adc	r25, r25
   1128c:	88 0f       	add	r24, r24
   1128e:	99 1f       	adc	r25, r25
   11290:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11292:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11294:	82 0f       	add	r24, r18
   11296:	93 1f       	adc	r25, r19
   11298:	2f ef       	ldi	r18, 0xFF	; 255
   1129a:	3f ef       	ldi	r19, 0xFF	; 255
   1129c:	fc 01       	movw	r30, r24
   1129e:	33 83       	std	Z+3, r19	; 0x03
   112a0:	22 83       	std	Z+2, r18	; 0x02
        x=x1+key_x[i];
   112a2:	89 81       	ldd	r24, Y+1	; 0x01
   112a4:	9a 81       	ldd	r25, Y+2	; 0x02
   112a6:	88 0f       	add	r24, r24
   112a8:	99 1f       	adc	r25, r25
   112aa:	9e 01       	movw	r18, r28
   112ac:	2f 5f       	subi	r18, 0xFF	; 255
   112ae:	3f 4f       	sbci	r19, 0xFF	; 255
   112b0:	82 0f       	add	r24, r18
   112b2:	93 1f       	adc	r25, r19
   112b4:	06 96       	adiw	r24, 0x06	; 6
   112b6:	fc 01       	movw	r30, r24
   112b8:	20 81       	ld	r18, Z
   112ba:	31 81       	ldd	r19, Z+1	; 0x01
   112bc:	8f 89       	ldd	r24, Y+23	; 0x17
   112be:	98 8d       	ldd	r25, Y+24	; 0x18
   112c0:	82 0f       	add	r24, r18
   112c2:	93 1f       	adc	r25, r19
   112c4:	9c 83       	std	Y+4, r25	; 0x04
   112c6:	8b 83       	std	Y+3, r24	; 0x03
        y=y1+key_y[i];
   112c8:	89 81       	ldd	r24, Y+1	; 0x01
   112ca:	9a 81       	ldd	r25, Y+2	; 0x02
   112cc:	88 0f       	add	r24, r24
   112ce:	99 1f       	adc	r25, r25
   112d0:	9e 01       	movw	r18, r28
   112d2:	2f 5f       	subi	r18, 0xFF	; 255
   112d4:	3f 4f       	sbci	r19, 0xFF	; 255
   112d6:	82 0f       	add	r24, r18
   112d8:	93 1f       	adc	r25, r19
   112da:	0e 96       	adiw	r24, 0x0e	; 14
   112dc:	fc 01       	movw	r30, r24
   112de:	20 81       	ld	r18, Z
   112e0:	31 81       	ldd	r19, Z+1	; 0x01
   112e2:	89 8d       	ldd	r24, Y+25	; 0x19
   112e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
   112e6:	82 0f       	add	r24, r18
   112e8:	93 1f       	adc	r25, r19
   112ea:	9e 83       	std	Y+6, r25	; 0x06
   112ec:	8d 83       	std	Y+5, r24	; 0x05
        if(x>-1 && y>-1 && x<6 && y<6)
   112ee:	8b 81       	ldd	r24, Y+3	; 0x03
   112f0:	9c 81       	ldd	r25, Y+4	; 0x04
   112f2:	99 23       	and	r25, r25
   112f4:	64 f1       	brlt	.+88     	; 0x1134e <adjacent+0x156>
   112f6:	8d 81       	ldd	r24, Y+5	; 0x05
   112f8:	9e 81       	ldd	r25, Y+6	; 0x06
   112fa:	99 23       	and	r25, r25
   112fc:	44 f1       	brlt	.+80     	; 0x1134e <adjacent+0x156>
   112fe:	8b 81       	ldd	r24, Y+3	; 0x03
   11300:	9c 81       	ldd	r25, Y+4	; 0x04
   11302:	86 30       	cpi	r24, 0x06	; 6
   11304:	91 05       	cpc	r25, r1
   11306:	1c f5       	brge	.+70     	; 0x1134e <adjacent+0x156>
   11308:	8d 81       	ldd	r24, Y+5	; 0x05
   1130a:	9e 81       	ldd	r25, Y+6	; 0x06
   1130c:	86 30       	cpi	r24, 0x06	; 6
   1130e:	91 05       	cpc	r25, r1
   11310:	f4 f4       	brge	.+60     	; 0x1134e <adjacent+0x156>
		{
            adj[i][0]=x;
   11312:	89 81       	ldd	r24, Y+1	; 0x01
   11314:	9a 81       	ldd	r25, Y+2	; 0x02
   11316:	88 0f       	add	r24, r24
   11318:	99 1f       	adc	r25, r25
   1131a:	88 0f       	add	r24, r24
   1131c:	99 1f       	adc	r25, r25
   1131e:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11320:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11322:	82 0f       	add	r24, r18
   11324:	93 1f       	adc	r25, r19
   11326:	2b 81       	ldd	r18, Y+3	; 0x03
   11328:	3c 81       	ldd	r19, Y+4	; 0x04
   1132a:	fc 01       	movw	r30, r24
   1132c:	31 83       	std	Z+1, r19	; 0x01
   1132e:	20 83       	st	Z, r18
            adj[i][1]=y;
   11330:	89 81       	ldd	r24, Y+1	; 0x01
   11332:	9a 81       	ldd	r25, Y+2	; 0x02
   11334:	88 0f       	add	r24, r24
   11336:	99 1f       	adc	r25, r25
   11338:	88 0f       	add	r24, r24
   1133a:	99 1f       	adc	r25, r25
   1133c:	2b 8d       	ldd	r18, Y+27	; 0x1b
   1133e:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11340:	82 0f       	add	r24, r18
   11342:	93 1f       	adc	r25, r19
   11344:	2d 81       	ldd	r18, Y+5	; 0x05
   11346:	3e 81       	ldd	r19, Y+6	; 0x06
   11348:	fc 01       	movw	r30, r24
   1134a:	33 83       	std	Z+3, r19	; 0x03
   1134c:	22 83       	std	Z+2, r18	; 0x02
void adjacent(int x1,int y1,int adj[4][2])
{
    int i=0,x=0,y=0;
    int key_x[4]={-1,0,1,0};//N E S W
    int key_y[4]={0,1,0,-1};
    for(i=0;i<4;i++)
   1134e:	89 81       	ldd	r24, Y+1	; 0x01
   11350:	9a 81       	ldd	r25, Y+2	; 0x02
   11352:	01 96       	adiw	r24, 0x01	; 1
   11354:	9a 83       	std	Y+2, r25	; 0x02
   11356:	89 83       	std	Y+1, r24	; 0x01
   11358:	89 81       	ldd	r24, Y+1	; 0x01
   1135a:	9a 81       	ldd	r25, Y+2	; 0x02
   1135c:	84 30       	cpi	r24, 0x04	; 4
   1135e:	91 05       	cpc	r25, r1
   11360:	0c f4       	brge	.+2      	; 0x11364 <adjacent+0x16c>
   11362:	81 cf       	rjmp	.-254    	; 0x11266 <adjacent+0x6e>
		{
            adj[i][0]=x;
            adj[i][1]=y;
        }
    }
}
   11364:	6c 96       	adiw	r28, 0x1c	; 28
   11366:	0f b6       	in	r0, 0x3f	; 63
   11368:	f8 94       	cli
   1136a:	de bf       	out	0x3e, r29	; 62
   1136c:	0f be       	out	0x3f, r0	; 63
   1136e:	cd bf       	out	0x3d, r28	; 61
   11370:	df 91       	pop	r29
   11372:	cf 91       	pop	r28
   11374:	08 95       	ret

00011376 <min_dis>:

int min_dis(int dist[], int included[])
{
   11376:	cf 93       	push	r28
   11378:	df 93       	push	r29
   1137a:	cd b7       	in	r28, 0x3d	; 61
   1137c:	de b7       	in	r29, 0x3e	; 62
   1137e:	2a 97       	sbiw	r28, 0x0a	; 10
   11380:	0f b6       	in	r0, 0x3f	; 63
   11382:	f8 94       	cli
   11384:	de bf       	out	0x3e, r29	; 62
   11386:	0f be       	out	0x3f, r0	; 63
   11388:	cd bf       	out	0x3d, r28	; 61
   1138a:	98 87       	std	Y+8, r25	; 0x08
   1138c:	8f 83       	std	Y+7, r24	; 0x07
   1138e:	7a 87       	std	Y+10, r23	; 0x0a
   11390:	69 87       	std	Y+9, r22	; 0x09
    int min=INF,min_index=0,i=0;
   11392:	87 ee       	ldi	r24, 0xE7	; 231
   11394:	93 e0       	ldi	r25, 0x03	; 3
   11396:	9a 83       	std	Y+2, r25	; 0x02
   11398:	89 83       	std	Y+1, r24	; 0x01
   1139a:	1c 82       	std	Y+4, r1	; 0x04
   1139c:	1b 82       	std	Y+3, r1	; 0x03
   1139e:	1e 82       	std	Y+6, r1	; 0x06
   113a0:	1d 82       	std	Y+5, r1	; 0x05
    for(i=0;i<36;i++)
   113a2:	1e 82       	std	Y+6, r1	; 0x06
   113a4:	1d 82       	std	Y+5, r1	; 0x05
   113a6:	33 c0       	rjmp	.+102    	; 0x1140e <min_dis+0x98>
    {
        if((included[i]==FALSE)&&dist[i]<min)
   113a8:	8d 81       	ldd	r24, Y+5	; 0x05
   113aa:	9e 81       	ldd	r25, Y+6	; 0x06
   113ac:	88 0f       	add	r24, r24
   113ae:	99 1f       	adc	r25, r25
   113b0:	29 85       	ldd	r18, Y+9	; 0x09
   113b2:	3a 85       	ldd	r19, Y+10	; 0x0a
   113b4:	82 0f       	add	r24, r18
   113b6:	93 1f       	adc	r25, r19
   113b8:	fc 01       	movw	r30, r24
   113ba:	80 81       	ld	r24, Z
   113bc:	91 81       	ldd	r25, Z+1	; 0x01
   113be:	00 97       	sbiw	r24, 0x00	; 0
   113c0:	09 f5       	brne	.+66     	; 0x11404 <min_dis+0x8e>
   113c2:	8d 81       	ldd	r24, Y+5	; 0x05
   113c4:	9e 81       	ldd	r25, Y+6	; 0x06
   113c6:	88 0f       	add	r24, r24
   113c8:	99 1f       	adc	r25, r25
   113ca:	2f 81       	ldd	r18, Y+7	; 0x07
   113cc:	38 85       	ldd	r19, Y+8	; 0x08
   113ce:	82 0f       	add	r24, r18
   113d0:	93 1f       	adc	r25, r19
   113d2:	fc 01       	movw	r30, r24
   113d4:	20 81       	ld	r18, Z
   113d6:	31 81       	ldd	r19, Z+1	; 0x01
   113d8:	89 81       	ldd	r24, Y+1	; 0x01
   113da:	9a 81       	ldd	r25, Y+2	; 0x02
   113dc:	28 17       	cp	r18, r24
   113de:	39 07       	cpc	r19, r25
   113e0:	8c f4       	brge	.+34     	; 0x11404 <min_dis+0x8e>
        {
            min=dist[i];
   113e2:	8d 81       	ldd	r24, Y+5	; 0x05
   113e4:	9e 81       	ldd	r25, Y+6	; 0x06
   113e6:	88 0f       	add	r24, r24
   113e8:	99 1f       	adc	r25, r25
   113ea:	2f 81       	ldd	r18, Y+7	; 0x07
   113ec:	38 85       	ldd	r19, Y+8	; 0x08
   113ee:	82 0f       	add	r24, r18
   113f0:	93 1f       	adc	r25, r19
   113f2:	fc 01       	movw	r30, r24
   113f4:	80 81       	ld	r24, Z
   113f6:	91 81       	ldd	r25, Z+1	; 0x01
   113f8:	9a 83       	std	Y+2, r25	; 0x02
   113fa:	89 83       	std	Y+1, r24	; 0x01
            min_index=i;
   113fc:	8d 81       	ldd	r24, Y+5	; 0x05
   113fe:	9e 81       	ldd	r25, Y+6	; 0x06
   11400:	9c 83       	std	Y+4, r25	; 0x04
   11402:	8b 83       	std	Y+3, r24	; 0x03
}

int min_dis(int dist[], int included[])
{
    int min=INF,min_index=0,i=0;
    for(i=0;i<36;i++)
   11404:	8d 81       	ldd	r24, Y+5	; 0x05
   11406:	9e 81       	ldd	r25, Y+6	; 0x06
   11408:	01 96       	adiw	r24, 0x01	; 1
   1140a:	9e 83       	std	Y+6, r25	; 0x06
   1140c:	8d 83       	std	Y+5, r24	; 0x05
   1140e:	8d 81       	ldd	r24, Y+5	; 0x05
   11410:	9e 81       	ldd	r25, Y+6	; 0x06
   11412:	84 32       	cpi	r24, 0x24	; 36
   11414:	91 05       	cpc	r25, r1
   11416:	44 f2       	brlt	.-112    	; 0x113a8 <min_dis+0x32>
        {
            min=dist[i];
            min_index=i;
        }
    }
    return min_index;
   11418:	8b 81       	ldd	r24, Y+3	; 0x03
   1141a:	9c 81       	ldd	r25, Y+4	; 0x04
}
   1141c:	2a 96       	adiw	r28, 0x0a	; 10
   1141e:	0f b6       	in	r0, 0x3f	; 63
   11420:	f8 94       	cli
   11422:	de bf       	out	0x3e, r29	; 62
   11424:	0f be       	out	0x3f, r0	; 63
   11426:	cd bf       	out	0x3d, r28	; 61
   11428:	df 91       	pop	r29
   1142a:	cf 91       	pop	r28
   1142c:	08 95       	ret

0001142e <align>:

char align(int turn_count)
{
   1142e:	cf 93       	push	r28
   11430:	df 93       	push	r29
   11432:	0f 92       	push	r0
   11434:	0f 92       	push	r0
   11436:	cd b7       	in	r28, 0x3d	; 61
   11438:	de b7       	in	r29, 0x3e	; 62
   1143a:	9a 83       	std	Y+2, r25	; 0x02
   1143c:	89 83       	std	Y+1, r24	; 0x01
turn_count=turn_count%3;
   1143e:	89 81       	ldd	r24, Y+1	; 0x01
   11440:	9a 81       	ldd	r25, Y+2	; 0x02
   11442:	23 e0       	ldi	r18, 0x03	; 3
   11444:	30 e0       	ldi	r19, 0x00	; 0
   11446:	b9 01       	movw	r22, r18
   11448:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   1144c:	9a 83       	std	Y+2, r25	; 0x02
   1144e:	89 83       	std	Y+1, r24	; 0x01
if(turn_count==2||turn_count==-2)
   11450:	89 81       	ldd	r24, Y+1	; 0x01
   11452:	9a 81       	ldd	r25, Y+2	; 0x02
   11454:	82 30       	cpi	r24, 0x02	; 2
   11456:	91 05       	cpc	r25, r1
   11458:	31 f0       	breq	.+12     	; 0x11466 <align+0x38>
   1145a:	89 81       	ldd	r24, Y+1	; 0x01
   1145c:	9a 81       	ldd	r25, Y+2	; 0x02
   1145e:	2f ef       	ldi	r18, 0xFF	; 255
   11460:	8e 3f       	cpi	r24, 0xFE	; 254
   11462:	92 07       	cpc	r25, r18
   11464:	11 f4       	brne	.+4      	; 0x1146a <align+0x3c>
	return 'U';
   11466:	85 e5       	ldi	r24, 0x55	; 85
   11468:	1b c0       	rjmp	.+54     	; 0x114a0 <align+0x72>
else if(turn_count==1||turn_count==-3)
   1146a:	89 81       	ldd	r24, Y+1	; 0x01
   1146c:	9a 81       	ldd	r25, Y+2	; 0x02
   1146e:	81 30       	cpi	r24, 0x01	; 1
   11470:	91 05       	cpc	r25, r1
   11472:	31 f0       	breq	.+12     	; 0x11480 <align+0x52>
   11474:	89 81       	ldd	r24, Y+1	; 0x01
   11476:	9a 81       	ldd	r25, Y+2	; 0x02
   11478:	2f ef       	ldi	r18, 0xFF	; 255
   1147a:	8d 3f       	cpi	r24, 0xFD	; 253
   1147c:	92 07       	cpc	r25, r18
   1147e:	11 f4       	brne	.+4      	; 0x11484 <align+0x56>
	return 'L';
   11480:	8c e4       	ldi	r24, 0x4C	; 76
   11482:	0e c0       	rjmp	.+28     	; 0x114a0 <align+0x72>
else if(turn_count==-1||turn_count==3)
   11484:	89 81       	ldd	r24, Y+1	; 0x01
   11486:	9a 81       	ldd	r25, Y+2	; 0x02
   11488:	2f ef       	ldi	r18, 0xFF	; 255
   1148a:	8f 3f       	cpi	r24, 0xFF	; 255
   1148c:	92 07       	cpc	r25, r18
   1148e:	29 f0       	breq	.+10     	; 0x1149a <align+0x6c>
   11490:	89 81       	ldd	r24, Y+1	; 0x01
   11492:	9a 81       	ldd	r25, Y+2	; 0x02
   11494:	83 30       	cpi	r24, 0x03	; 3
   11496:	91 05       	cpc	r25, r1
   11498:	11 f4       	brne	.+4      	; 0x1149e <align+0x70>
	return 'R';
   1149a:	82 e5       	ldi	r24, 0x52	; 82
   1149c:	01 c0       	rjmp	.+2      	; 0x114a0 <align+0x72>
else
	return 'N';
   1149e:	8e e4       	ldi	r24, 0x4E	; 78
}
   114a0:	0f 90       	pop	r0
   114a2:	0f 90       	pop	r0
   114a4:	df 91       	pop	r29
   114a6:	cf 91       	pop	r28
   114a8:	08 95       	ret

000114aa <rotate>:

char rotate(int current,int next,int *turn_count)
{
   114aa:	cf 93       	push	r28
   114ac:	df 93       	push	r29
   114ae:	cd b7       	in	r28, 0x3d	; 61
   114b0:	de b7       	in	r29, 0x3e	; 62
   114b2:	2a 97       	sbiw	r28, 0x0a	; 10
   114b4:	0f b6       	in	r0, 0x3f	; 63
   114b6:	f8 94       	cli
   114b8:	de bf       	out	0x3e, r29	; 62
   114ba:	0f be       	out	0x3f, r0	; 63
   114bc:	cd bf       	out	0x3d, r28	; 61
   114be:	9e 83       	std	Y+6, r25	; 0x06
   114c0:	8d 83       	std	Y+5, r24	; 0x05
   114c2:	78 87       	std	Y+8, r23	; 0x08
   114c4:	6f 83       	std	Y+7, r22	; 0x07
   114c6:	5a 87       	std	Y+10, r21	; 0x0a
   114c8:	49 87       	std	Y+9, r20	; 0x09
     int dir_x,dir_y;
     dir_x=(current/6)-(next/6);
   114ca:	8d 81       	ldd	r24, Y+5	; 0x05
   114cc:	9e 81       	ldd	r25, Y+6	; 0x06
   114ce:	26 e0       	ldi	r18, 0x06	; 6
   114d0:	30 e0       	ldi	r19, 0x00	; 0
   114d2:	b9 01       	movw	r22, r18
   114d4:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   114d8:	9b 01       	movw	r18, r22
   114da:	8f 81       	ldd	r24, Y+7	; 0x07
   114dc:	98 85       	ldd	r25, Y+8	; 0x08
   114de:	46 e0       	ldi	r20, 0x06	; 6
   114e0:	50 e0       	ldi	r21, 0x00	; 0
   114e2:	ba 01       	movw	r22, r20
   114e4:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   114e8:	ab 01       	movw	r20, r22
   114ea:	ca 01       	movw	r24, r20
   114ec:	a9 01       	movw	r20, r18
   114ee:	48 1b       	sub	r20, r24
   114f0:	59 0b       	sbc	r21, r25
   114f2:	ca 01       	movw	r24, r20
   114f4:	9a 83       	std	Y+2, r25	; 0x02
   114f6:	89 83       	std	Y+1, r24	; 0x01
     dir_y=(current%6)-(next%6);
   114f8:	8d 81       	ldd	r24, Y+5	; 0x05
   114fa:	9e 81       	ldd	r25, Y+6	; 0x06
   114fc:	26 e0       	ldi	r18, 0x06	; 6
   114fe:	30 e0       	ldi	r19, 0x00	; 0
   11500:	b9 01       	movw	r22, r18
   11502:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   11506:	9c 01       	movw	r18, r24
   11508:	8f 81       	ldd	r24, Y+7	; 0x07
   1150a:	98 85       	ldd	r25, Y+8	; 0x08
   1150c:	46 e0       	ldi	r20, 0x06	; 6
   1150e:	50 e0       	ldi	r21, 0x00	; 0
   11510:	ba 01       	movw	r22, r20
   11512:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   11516:	f9 01       	movw	r30, r18
   11518:	e8 1b       	sub	r30, r24
   1151a:	f9 0b       	sbc	r31, r25
   1151c:	cf 01       	movw	r24, r30
   1151e:	9c 83       	std	Y+4, r25	; 0x04
   11520:	8b 83       	std	Y+3, r24	; 0x03
     if(dir_y==0)
   11522:	8b 81       	ldd	r24, Y+3	; 0x03
   11524:	9c 81       	ldd	r25, Y+4	; 0x04
   11526:	00 97       	sbiw	r24, 0x00	; 0
   11528:	a9 f4       	brne	.+42     	; 0x11554 <rotate+0xaa>
	 {
        if(dir_x<0)
   1152a:	89 81       	ldd	r24, Y+1	; 0x01
   1152c:	9a 81       	ldd	r25, Y+2	; 0x02
   1152e:	99 23       	and	r25, r25
   11530:	7c f4       	brge	.+30     	; 0x11550 <rotate+0xa6>
		{
		// printf("Uturn\n");
			*turn_count+=2;
   11532:	89 85       	ldd	r24, Y+9	; 0x09
   11534:	9a 85       	ldd	r25, Y+10	; 0x0a
   11536:	fc 01       	movw	r30, r24
   11538:	80 81       	ld	r24, Z
   1153a:	91 81       	ldd	r25, Z+1	; 0x01
   1153c:	9c 01       	movw	r18, r24
   1153e:	2e 5f       	subi	r18, 0xFE	; 254
   11540:	3f 4f       	sbci	r19, 0xFF	; 255
   11542:	89 85       	ldd	r24, Y+9	; 0x09
   11544:	9a 85       	ldd	r25, Y+10	; 0x0a
   11546:	fc 01       	movw	r30, r24
   11548:	31 83       	std	Z+1, r19	; 0x01
   1154a:	20 83       	st	Z, r18
			return 'U';
   1154c:	85 e5       	ldi	r24, 0x55	; 85
   1154e:	3d c0       	rjmp	.+122    	; 0x115ca <rotate+0x120>
			p_ny=0;
        }
        else
        {
        //printf("NC\n");
			return 'N';
   11550:	8e e4       	ldi	r24, 0x4E	; 78
   11552:	3b c0       	rjmp	.+118    	; 0x115ca <rotate+0x120>
        }
     }
     else if(dir_x==0)
   11554:	89 81       	ldd	r24, Y+1	; 0x01
   11556:	9a 81       	ldd	r25, Y+2	; 0x02
   11558:	00 97       	sbiw	r24, 0x00	; 0
   1155a:	b1 f5       	brne	.+108    	; 0x115c8 <rotate+0x11e>
     {
      if(dir_y<0)
   1155c:	8b 81       	ldd	r24, Y+3	; 0x03
   1155e:	9c 81       	ldd	r25, Y+4	; 0x04
   11560:	99 23       	and	r25, r25
   11562:	cc f4       	brge	.+50     	; 0x11596 <rotate+0xec>
	  {
      //printf("Right\n");
		*turn_count=*turn_count+1;
   11564:	89 85       	ldd	r24, Y+9	; 0x09
   11566:	9a 85       	ldd	r25, Y+10	; 0x0a
   11568:	fc 01       	movw	r30, r24
   1156a:	80 81       	ld	r24, Z
   1156c:	91 81       	ldd	r25, Z+1	; 0x01
   1156e:	9c 01       	movw	r18, r24
   11570:	2f 5f       	subi	r18, 0xFF	; 255
   11572:	3f 4f       	sbci	r19, 0xFF	; 255
   11574:	89 85       	ldd	r24, Y+9	; 0x09
   11576:	9a 85       	ldd	r25, Y+10	; 0x0a
   11578:	fc 01       	movw	r30, r24
   1157a:	31 83       	std	Z+1, r19	; 0x01
   1157c:	20 83       	st	Z, r18
		p_nx=0;
   1157e:	10 92 40 04 	sts	0x0440, r1
   11582:	10 92 3f 04 	sts	0x043F, r1
		p_ny=1;
   11586:	81 e0       	ldi	r24, 0x01	; 1
   11588:	90 e0       	ldi	r25, 0x00	; 0
   1158a:	90 93 42 04 	sts	0x0442, r25
   1158e:	80 93 41 04 	sts	0x0441, r24
		return 'R';
   11592:	82 e5       	ldi	r24, 0x52	; 82
   11594:	1a c0       	rjmp	.+52     	; 0x115ca <rotate+0x120>
      }
      else
	  {
      //printf("Left\n");
		p_nx=0;
   11596:	10 92 40 04 	sts	0x0440, r1
   1159a:	10 92 3f 04 	sts	0x043F, r1
		p_ny=-1;
   1159e:	8f ef       	ldi	r24, 0xFF	; 255
   115a0:	9f ef       	ldi	r25, 0xFF	; 255
   115a2:	90 93 42 04 	sts	0x0442, r25
   115a6:	80 93 41 04 	sts	0x0441, r24
		*turn_count=*turn_count-1;
   115aa:	89 85       	ldd	r24, Y+9	; 0x09
   115ac:	9a 85       	ldd	r25, Y+10	; 0x0a
   115ae:	fc 01       	movw	r30, r24
   115b0:	80 81       	ld	r24, Z
   115b2:	91 81       	ldd	r25, Z+1	; 0x01
   115b4:	9c 01       	movw	r18, r24
   115b6:	21 50       	subi	r18, 0x01	; 1
   115b8:	30 40       	sbci	r19, 0x00	; 0
   115ba:	89 85       	ldd	r24, Y+9	; 0x09
   115bc:	9a 85       	ldd	r25, Y+10	; 0x0a
   115be:	fc 01       	movw	r30, r24
   115c0:	31 83       	std	Z+1, r19	; 0x01
   115c2:	20 83       	st	Z, r18
		return 'L';
   115c4:	8c e4       	ldi	r24, 0x4C	; 76
   115c6:	01 c0       	rjmp	.+2      	; 0x115ca <rotate+0x120>
   115c8:	00 c0       	rjmp	.+0      	; 0x115ca <rotate+0x120>
      }
    }
}
   115ca:	2a 96       	adiw	r28, 0x0a	; 10
   115cc:	0f b6       	in	r0, 0x3f	; 63
   115ce:	f8 94       	cli
   115d0:	de bf       	out	0x3e, r29	; 62
   115d2:	0f be       	out	0x3f, r0	; 63
   115d4:	cd bf       	out	0x3d, r28	; 61
   115d6:	df 91       	pop	r29
   115d8:	cf 91       	pop	r28
   115da:	08 95       	ret

000115dc <direction>:

char direction(int current,int next,int *turn_count)
{
   115dc:	cf 93       	push	r28
   115de:	df 93       	push	r29
   115e0:	cd b7       	in	r28, 0x3d	; 61
   115e2:	de b7       	in	r29, 0x3e	; 62
   115e4:	27 97       	sbiw	r28, 0x07	; 7
   115e6:	0f b6       	in	r0, 0x3f	; 63
   115e8:	f8 94       	cli
   115ea:	de bf       	out	0x3e, r29	; 62
   115ec:	0f be       	out	0x3f, r0	; 63
   115ee:	cd bf       	out	0x3d, r28	; 61
   115f0:	9b 83       	std	Y+3, r25	; 0x03
   115f2:	8a 83       	std	Y+2, r24	; 0x02
   115f4:	7d 83       	std	Y+5, r23	; 0x05
   115f6:	6c 83       	std	Y+4, r22	; 0x04
   115f8:	5f 83       	std	Y+7, r21	; 0x07
   115fa:	4e 83       	std	Y+6, r20	; 0x06
     n_nx=(next/6)-(current/6);
   115fc:	8c 81       	ldd	r24, Y+4	; 0x04
   115fe:	9d 81       	ldd	r25, Y+5	; 0x05
   11600:	26 e0       	ldi	r18, 0x06	; 6
   11602:	30 e0       	ldi	r19, 0x00	; 0
   11604:	b9 01       	movw	r22, r18
   11606:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   1160a:	9b 01       	movw	r18, r22
   1160c:	8a 81       	ldd	r24, Y+2	; 0x02
   1160e:	9b 81       	ldd	r25, Y+3	; 0x03
   11610:	46 e0       	ldi	r20, 0x06	; 6
   11612:	50 e0       	ldi	r21, 0x00	; 0
   11614:	ba 01       	movw	r22, r20
   11616:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   1161a:	ab 01       	movw	r20, r22
   1161c:	ca 01       	movw	r24, r20
   1161e:	a9 01       	movw	r20, r18
   11620:	48 1b       	sub	r20, r24
   11622:	59 0b       	sbc	r21, r25
   11624:	ca 01       	movw	r24, r20
   11626:	90 93 44 04 	sts	0x0444, r25
   1162a:	80 93 43 04 	sts	0x0443, r24
     n_ny=(next%6)-(current%6);
   1162e:	8c 81       	ldd	r24, Y+4	; 0x04
   11630:	9d 81       	ldd	r25, Y+5	; 0x05
   11632:	26 e0       	ldi	r18, 0x06	; 6
   11634:	30 e0       	ldi	r19, 0x00	; 0
   11636:	b9 01       	movw	r22, r18
   11638:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   1163c:	9c 01       	movw	r18, r24
   1163e:	8a 81       	ldd	r24, Y+2	; 0x02
   11640:	9b 81       	ldd	r25, Y+3	; 0x03
   11642:	46 e0       	ldi	r20, 0x06	; 6
   11644:	50 e0       	ldi	r21, 0x00	; 0
   11646:	ba 01       	movw	r22, r20
   11648:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   1164c:	f9 01       	movw	r30, r18
   1164e:	e8 1b       	sub	r30, r24
   11650:	f9 0b       	sbc	r31, r25
   11652:	cf 01       	movw	r24, r30
   11654:	90 93 46 04 	sts	0x0446, r25
   11658:	80 93 45 04 	sts	0x0445, r24
     char out='o';
   1165c:	8f e6       	ldi	r24, 0x6F	; 111
   1165e:	89 83       	std	Y+1, r24	; 0x01
     if(n_nx==p_nx && n_ny==p_ny)
   11660:	20 91 43 04 	lds	r18, 0x0443
   11664:	30 91 44 04 	lds	r19, 0x0444
   11668:	80 91 3f 04 	lds	r24, 0x043F
   1166c:	90 91 40 04 	lds	r25, 0x0440
   11670:	28 17       	cp	r18, r24
   11672:	39 07       	cpc	r19, r25
   11674:	71 f4       	brne	.+28     	; 0x11692 <direction+0xb6>
   11676:	20 91 45 04 	lds	r18, 0x0445
   1167a:	30 91 46 04 	lds	r19, 0x0446
   1167e:	80 91 41 04 	lds	r24, 0x0441
   11682:	90 91 42 04 	lds	r25, 0x0442
   11686:	28 17       	cp	r18, r24
   11688:	39 07       	cpc	r19, r25
   1168a:	19 f4       	brne	.+6      	; 0x11692 <direction+0xb6>
	 {
		out='n';
   1168c:	8e e6       	ldi	r24, 0x6E	; 110
   1168e:	89 83       	std	Y+1, r24	; 0x01
   11690:	82 c0       	rjmp	.+260    	; 0x11796 <direction+0x1ba>
     }
     else if(n_nx==(-p_nx) && n_ny==(-p_ny))
   11692:	80 91 3f 04 	lds	r24, 0x043F
   11696:	90 91 40 04 	lds	r25, 0x0440
   1169a:	22 27       	eor	r18, r18
   1169c:	33 27       	eor	r19, r19
   1169e:	28 1b       	sub	r18, r24
   116a0:	39 0b       	sbc	r19, r25
   116a2:	80 91 43 04 	lds	r24, 0x0443
   116a6:	90 91 44 04 	lds	r25, 0x0444
   116aa:	28 17       	cp	r18, r24
   116ac:	39 07       	cpc	r19, r25
   116ae:	91 f4       	brne	.+36     	; 0x116d4 <direction+0xf8>
   116b0:	80 91 41 04 	lds	r24, 0x0441
   116b4:	90 91 42 04 	lds	r25, 0x0442
   116b8:	22 27       	eor	r18, r18
   116ba:	33 27       	eor	r19, r19
   116bc:	28 1b       	sub	r18, r24
   116be:	39 0b       	sbc	r19, r25
   116c0:	80 91 45 04 	lds	r24, 0x0445
   116c4:	90 91 46 04 	lds	r25, 0x0446
   116c8:	28 17       	cp	r18, r24
   116ca:	39 07       	cpc	r19, r25
   116cc:	19 f4       	brne	.+6      	; 0x116d4 <direction+0xf8>
	 {
		//*turn_count+=2;
		out='n';
   116ce:	8e e6       	ldi	r24, 0x6E	; 110
   116d0:	89 83       	std	Y+1, r24	; 0x01
   116d2:	61 c0       	rjmp	.+194    	; 0x11796 <direction+0x1ba>
     }
     else if(p_nx!=0)
   116d4:	80 91 3f 04 	lds	r24, 0x043F
   116d8:	90 91 40 04 	lds	r25, 0x0440
   116dc:	00 97       	sbiw	r24, 0x00	; 0
   116de:	59 f1       	breq	.+86     	; 0x11736 <direction+0x15a>
	 {
		if((p_nx==n_ny ))
   116e0:	20 91 3f 04 	lds	r18, 0x043F
   116e4:	30 91 40 04 	lds	r19, 0x0440
   116e8:	80 91 45 04 	lds	r24, 0x0445
   116ec:	90 91 46 04 	lds	r25, 0x0446
   116f0:	28 17       	cp	r18, r24
   116f2:	39 07       	cpc	r19, r25
   116f4:	81 f4       	brne	.+32     	; 0x11716 <direction+0x13a>
		{
			*turn_count+=-1;
   116f6:	8e 81       	ldd	r24, Y+6	; 0x06
   116f8:	9f 81       	ldd	r25, Y+7	; 0x07
   116fa:	fc 01       	movw	r30, r24
   116fc:	80 81       	ld	r24, Z
   116fe:	91 81       	ldd	r25, Z+1	; 0x01
   11700:	9c 01       	movw	r18, r24
   11702:	21 50       	subi	r18, 0x01	; 1
   11704:	30 40       	sbci	r19, 0x00	; 0
   11706:	8e 81       	ldd	r24, Y+6	; 0x06
   11708:	9f 81       	ldd	r25, Y+7	; 0x07
   1170a:	fc 01       	movw	r30, r24
   1170c:	31 83       	std	Z+1, r19	; 0x01
   1170e:	20 83       	st	Z, r18
			out= 'l';
   11710:	8c e6       	ldi	r24, 0x6C	; 108
   11712:	89 83       	std	Y+1, r24	; 0x01
   11714:	40 c0       	rjmp	.+128    	; 0x11796 <direction+0x1ba>
		}
		else
		{
			*turn_count+=1;
   11716:	8e 81       	ldd	r24, Y+6	; 0x06
   11718:	9f 81       	ldd	r25, Y+7	; 0x07
   1171a:	fc 01       	movw	r30, r24
   1171c:	80 81       	ld	r24, Z
   1171e:	91 81       	ldd	r25, Z+1	; 0x01
   11720:	9c 01       	movw	r18, r24
   11722:	2f 5f       	subi	r18, 0xFF	; 255
   11724:	3f 4f       	sbci	r19, 0xFF	; 255
   11726:	8e 81       	ldd	r24, Y+6	; 0x06
   11728:	9f 81       	ldd	r25, Y+7	; 0x07
   1172a:	fc 01       	movw	r30, r24
   1172c:	31 83       	std	Z+1, r19	; 0x01
   1172e:	20 83       	st	Z, r18
			out= 'r';
   11730:	82 e7       	ldi	r24, 0x72	; 114
   11732:	89 83       	std	Y+1, r24	; 0x01
   11734:	30 c0       	rjmp	.+96     	; 0x11796 <direction+0x1ba>
		}
    }
    else if(p_ny!=0)
   11736:	80 91 41 04 	lds	r24, 0x0441
   1173a:	90 91 42 04 	lds	r25, 0x0442
   1173e:	00 97       	sbiw	r24, 0x00	; 0
   11740:	51 f1       	breq	.+84     	; 0x11796 <direction+0x1ba>
	{
		if(p_ny==n_nx)
   11742:	20 91 41 04 	lds	r18, 0x0441
   11746:	30 91 42 04 	lds	r19, 0x0442
   1174a:	80 91 43 04 	lds	r24, 0x0443
   1174e:	90 91 44 04 	lds	r25, 0x0444
   11752:	28 17       	cp	r18, r24
   11754:	39 07       	cpc	r19, r25
   11756:	81 f4       	brne	.+32     	; 0x11778 <direction+0x19c>
		{
			*turn_count+=1;
   11758:	8e 81       	ldd	r24, Y+6	; 0x06
   1175a:	9f 81       	ldd	r25, Y+7	; 0x07
   1175c:	fc 01       	movw	r30, r24
   1175e:	80 81       	ld	r24, Z
   11760:	91 81       	ldd	r25, Z+1	; 0x01
   11762:	9c 01       	movw	r18, r24
   11764:	2f 5f       	subi	r18, 0xFF	; 255
   11766:	3f 4f       	sbci	r19, 0xFF	; 255
   11768:	8e 81       	ldd	r24, Y+6	; 0x06
   1176a:	9f 81       	ldd	r25, Y+7	; 0x07
   1176c:	fc 01       	movw	r30, r24
   1176e:	31 83       	std	Z+1, r19	; 0x01
   11770:	20 83       	st	Z, r18
			out= 'r';
   11772:	82 e7       	ldi	r24, 0x72	; 114
   11774:	89 83       	std	Y+1, r24	; 0x01
   11776:	0f c0       	rjmp	.+30     	; 0x11796 <direction+0x1ba>
		}
		else
		{
		*turn_count-=1;
   11778:	8e 81       	ldd	r24, Y+6	; 0x06
   1177a:	9f 81       	ldd	r25, Y+7	; 0x07
   1177c:	fc 01       	movw	r30, r24
   1177e:	80 81       	ld	r24, Z
   11780:	91 81       	ldd	r25, Z+1	; 0x01
   11782:	9c 01       	movw	r18, r24
   11784:	21 50       	subi	r18, 0x01	; 1
   11786:	30 40       	sbci	r19, 0x00	; 0
   11788:	8e 81       	ldd	r24, Y+6	; 0x06
   1178a:	9f 81       	ldd	r25, Y+7	; 0x07
   1178c:	fc 01       	movw	r30, r24
   1178e:	31 83       	std	Z+1, r19	; 0x01
   11790:	20 83       	st	Z, r18
		out= 'l';
   11792:	8c e6       	ldi	r24, 0x6C	; 108
   11794:	89 83       	std	Y+1, r24	; 0x01
		}
    }
    p_nx=n_nx;
   11796:	80 91 43 04 	lds	r24, 0x0443
   1179a:	90 91 44 04 	lds	r25, 0x0444
   1179e:	90 93 40 04 	sts	0x0440, r25
   117a2:	80 93 3f 04 	sts	0x043F, r24
    p_ny=n_ny;
   117a6:	80 91 45 04 	lds	r24, 0x0445
   117aa:	90 91 46 04 	lds	r25, 0x0446
   117ae:	90 93 42 04 	sts	0x0442, r25
   117b2:	80 93 41 04 	sts	0x0441, r24
    return out;
   117b6:	89 81       	ldd	r24, Y+1	; 0x01
}
   117b8:	27 96       	adiw	r28, 0x07	; 7
   117ba:	0f b6       	in	r0, 0x3f	; 63
   117bc:	f8 94       	cli
   117be:	de bf       	out	0x3e, r29	; 62
   117c0:	0f be       	out	0x3f, r0	; 63
   117c2:	cd bf       	out	0x3d, r28	; 61
   117c4:	df 91       	pop	r29
   117c6:	cf 91       	pop	r28
   117c8:	08 95       	ret

000117ca <sh_path>:

char* sh_path(int start, int end,int *count1)
{
   117ca:	0f 93       	push	r16
   117cc:	1f 93       	push	r17
   117ce:	cf 93       	push	r28
   117d0:	df 93       	push	r29
   117d2:	cd b7       	in	r28, 0x3d	; 61
   117d4:	de b7       	in	r29, 0x3e	; 62
   117d6:	c5 50       	subi	r28, 0x05	; 5
   117d8:	d1 40       	sbci	r29, 0x01	; 1
   117da:	0f b6       	in	r0, 0x3f	; 63
   117dc:	f8 94       	cli
   117de:	de bf       	out	0x3e, r29	; 62
   117e0:	0f be       	out	0x3f, r0	; 63
   117e2:	cd bf       	out	0x3d, r28	; 61
   117e4:	9e 01       	movw	r18, r28
   117e6:	20 50       	subi	r18, 0x00	; 0
   117e8:	3f 4f       	sbci	r19, 0xFF	; 255
   117ea:	f9 01       	movw	r30, r18
   117ec:	91 83       	std	Z+1, r25	; 0x01
   117ee:	80 83       	st	Z, r24
   117f0:	ce 01       	movw	r24, r28
   117f2:	8e 5f       	subi	r24, 0xFE	; 254
   117f4:	9e 4f       	sbci	r25, 0xFE	; 254
   117f6:	fc 01       	movw	r30, r24
   117f8:	71 83       	std	Z+1, r23	; 0x01
   117fa:	60 83       	st	Z, r22
   117fc:	ce 01       	movw	r24, r28
   117fe:	8c 5f       	subi	r24, 0xFC	; 252
   11800:	9e 4f       	sbci	r25, 0xFE	; 254
   11802:	fc 01       	movw	r30, r24
   11804:	51 83       	std	Z+1, r21	; 0x01
   11806:	40 83       	st	Z, r20
    int dist[36],parent[36];
    int count=0,turn_count=0,current=0,length=0,weight=1,u=0,v=0,i=0,j=0;
   11808:	1c 86       	std	Y+12, r1	; 0x0c
   1180a:	1b 86       	std	Y+11, r1	; 0x0b
   1180c:	ce 01       	movw	r24, r28
   1180e:	8a 55       	subi	r24, 0x5A	; 90
   11810:	9f 4f       	sbci	r25, 0xFF	; 255
   11812:	fc 01       	movw	r30, r24
   11814:	11 82       	std	Z+1, r1	; 0x01
   11816:	10 82       	st	Z, r1
   11818:	1a 82       	std	Y+2, r1	; 0x02
   1181a:	19 82       	std	Y+1, r1	; 0x01
   1181c:	1c 82       	std	Y+4, r1	; 0x04
   1181e:	1b 82       	std	Y+3, r1	; 0x03
   11820:	81 e0       	ldi	r24, 0x01	; 1
   11822:	90 e0       	ldi	r25, 0x00	; 0
   11824:	9e 87       	std	Y+14, r25	; 0x0e
   11826:	8d 87       	std	Y+13, r24	; 0x0d
   11828:	18 8a       	std	Y+16, r1	; 0x10
   1182a:	1f 86       	std	Y+15, r1	; 0x0f
   1182c:	1a 8a       	std	Y+18, r1	; 0x12
   1182e:	19 8a       	std	Y+17, r1	; 0x11
   11830:	1e 82       	std	Y+6, r1	; 0x06
   11832:	1d 82       	std	Y+5, r1	; 0x05
   11834:	18 86       	std	Y+8, r1	; 0x08
   11836:	1f 82       	std	Y+7, r1	; 0x07
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
   11838:	ce 01       	movw	r24, r28
   1183a:	80 51       	subi	r24, 0x10	; 16
   1183c:	9f 4f       	sbci	r25, 0xFF	; 255
   1183e:	20 e1       	ldi	r18, 0x10	; 16
   11840:	fc 01       	movw	r30, r24
   11842:	32 2f       	mov	r19, r18
   11844:	11 92       	st	Z+, r1
   11846:	3a 95       	dec	r19
   11848:	e9 f7       	brne	.-6      	; 0x11844 <sh_path+0x7a>
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
   1184a:	10 92 40 04 	sts	0x0440, r1
   1184e:	10 92 3f 04 	sts	0x043F, r1
   11852:	10 92 42 04 	sts	0x0442, r1
   11856:	10 92 41 04 	sts	0x0441, r1
   1185a:	10 92 44 04 	sts	0x0444, r1
   1185e:	10 92 43 04 	sts	0x0443, r1
   11862:	10 92 46 04 	sts	0x0446, r1
   11866:	10 92 45 04 	sts	0x0445, r1
    for(i=0;i<36;i++)
   1186a:	1e 82       	std	Y+6, r1	; 0x06
   1186c:	1d 82       	std	Y+5, r1	; 0x05
   1186e:	2e c0       	rjmp	.+92     	; 0x118cc <sh_path+0x102>
	{
        dist[i]=INF;
   11870:	8d 81       	ldd	r24, Y+5	; 0x05
   11872:	9e 81       	ldd	r25, Y+6	; 0x06
   11874:	88 0f       	add	r24, r24
   11876:	99 1f       	adc	r25, r25
   11878:	9e 01       	movw	r18, r28
   1187a:	2f 5f       	subi	r18, 0xFF	; 255
   1187c:	3f 4f       	sbci	r19, 0xFF	; 255
   1187e:	82 0f       	add	r24, r18
   11880:	93 1f       	adc	r25, r19
   11882:	45 96       	adiw	r24, 0x15	; 21
   11884:	27 ee       	ldi	r18, 0xE7	; 231
   11886:	33 e0       	ldi	r19, 0x03	; 3
   11888:	fc 01       	movw	r30, r24
   1188a:	31 83       	std	Z+1, r19	; 0x01
   1188c:	20 83       	st	Z, r18
        included[i]=FALSE;
   1188e:	9e 01       	movw	r18, r28
   11890:	28 55       	subi	r18, 0x58	; 88
   11892:	3f 4f       	sbci	r19, 0xFF	; 255
   11894:	8d 81       	ldd	r24, Y+5	; 0x05
   11896:	9e 81       	ldd	r25, Y+6	; 0x06
   11898:	88 0f       	add	r24, r24
   1189a:	99 1f       	adc	r25, r25
   1189c:	82 0f       	add	r24, r18
   1189e:	93 1f       	adc	r25, r19
   118a0:	fc 01       	movw	r30, r24
   118a2:	11 82       	std	Z+1, r1	; 0x01
   118a4:	10 82       	st	Z, r1
        parent[i]=INF;
   118a6:	9e 01       	movw	r18, r28
   118a8:	22 5a       	subi	r18, 0xA2	; 162
   118aa:	3f 4f       	sbci	r19, 0xFF	; 255
   118ac:	8d 81       	ldd	r24, Y+5	; 0x05
   118ae:	9e 81       	ldd	r25, Y+6	; 0x06
   118b0:	88 0f       	add	r24, r24
   118b2:	99 1f       	adc	r25, r25
   118b4:	82 0f       	add	r24, r18
   118b6:	93 1f       	adc	r25, r19
   118b8:	27 ee       	ldi	r18, 0xE7	; 231
   118ba:	33 e0       	ldi	r19, 0x03	; 3
   118bc:	fc 01       	movw	r30, r24
   118be:	31 83       	std	Z+1, r19	; 0x01
   118c0:	20 83       	st	Z, r18
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    for(i=0;i<36;i++)
   118c2:	8d 81       	ldd	r24, Y+5	; 0x05
   118c4:	9e 81       	ldd	r25, Y+6	; 0x06
   118c6:	01 96       	adiw	r24, 0x01	; 1
   118c8:	9e 83       	std	Y+6, r25	; 0x06
   118ca:	8d 83       	std	Y+5, r24	; 0x05
   118cc:	8d 81       	ldd	r24, Y+5	; 0x05
   118ce:	9e 81       	ldd	r25, Y+6	; 0x06
   118d0:	84 32       	cpi	r24, 0x24	; 36
   118d2:	91 05       	cpc	r25, r1
   118d4:	6c f2       	brlt	.-102    	; 0x11870 <sh_path+0xa6>
	{
        dist[i]=INF;
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
   118d6:	ce 01       	movw	r24, r28
   118d8:	80 50       	subi	r24, 0x00	; 0
   118da:	9f 4f       	sbci	r25, 0xFF	; 255
   118dc:	fc 01       	movw	r30, r24
   118de:	80 81       	ld	r24, Z
   118e0:	91 81       	ldd	r25, Z+1	; 0x01
   118e2:	88 0f       	add	r24, r24
   118e4:	99 1f       	adc	r25, r25
   118e6:	9e 01       	movw	r18, r28
   118e8:	2f 5f       	subi	r18, 0xFF	; 255
   118ea:	3f 4f       	sbci	r19, 0xFF	; 255
   118ec:	82 0f       	add	r24, r18
   118ee:	93 1f       	adc	r25, r19
   118f0:	45 96       	adiw	r24, 0x15	; 21
   118f2:	fc 01       	movw	r30, r24
   118f4:	11 82       	std	Z+1, r1	; 0x01
   118f6:	10 82       	st	Z, r1
    parent[start]=start;
   118f8:	9e 01       	movw	r18, r28
   118fa:	22 5a       	subi	r18, 0xA2	; 162
   118fc:	3f 4f       	sbci	r19, 0xFF	; 255
   118fe:	ce 01       	movw	r24, r28
   11900:	80 50       	subi	r24, 0x00	; 0
   11902:	9f 4f       	sbci	r25, 0xFF	; 255
   11904:	fc 01       	movw	r30, r24
   11906:	80 81       	ld	r24, Z
   11908:	91 81       	ldd	r25, Z+1	; 0x01
   1190a:	88 0f       	add	r24, r24
   1190c:	99 1f       	adc	r25, r25
   1190e:	82 0f       	add	r24, r18
   11910:	93 1f       	adc	r25, r19
   11912:	9e 01       	movw	r18, r28
   11914:	20 50       	subi	r18, 0x00	; 0
   11916:	3f 4f       	sbci	r19, 0xFF	; 255
   11918:	f9 01       	movw	r30, r18
   1191a:	20 81       	ld	r18, Z
   1191c:	31 81       	ldd	r19, Z+1	; 0x01
   1191e:	fc 01       	movw	r30, r24
   11920:	31 83       	std	Z+1, r19	; 0x01
   11922:	20 83       	st	Z, r18
    for(i=0;i<35;i++)
   11924:	1e 82       	std	Y+6, r1	; 0x06
   11926:	1d 82       	std	Y+5, r1	; 0x05
   11928:	01 c1       	rjmp	.+514    	; 0x11b2c <sh_path+0x362>
	{
        u=min_dis(dist,included);
   1192a:	ce 01       	movw	r24, r28
   1192c:	46 96       	adiw	r24, 0x16	; 22
   1192e:	9e 01       	movw	r18, r28
   11930:	28 55       	subi	r18, 0x58	; 88
   11932:	3f 4f       	sbci	r19, 0xFF	; 255
   11934:	b9 01       	movw	r22, r18
   11936:	0e 94 bb 89 	call	0x11376	; 0x11376 <min_dis>
   1193a:	98 8b       	std	Y+16, r25	; 0x10
   1193c:	8f 87       	std	Y+15, r24	; 0x0f
    //    printf("%d\n",u);
        included[u]=TRUE;
   1193e:	9e 01       	movw	r18, r28
   11940:	28 55       	subi	r18, 0x58	; 88
   11942:	3f 4f       	sbci	r19, 0xFF	; 255
   11944:	8f 85       	ldd	r24, Y+15	; 0x0f
   11946:	98 89       	ldd	r25, Y+16	; 0x10
   11948:	88 0f       	add	r24, r24
   1194a:	99 1f       	adc	r25, r25
   1194c:	82 0f       	add	r24, r18
   1194e:	93 1f       	adc	r25, r19
   11950:	21 e0       	ldi	r18, 0x01	; 1
   11952:	30 e0       	ldi	r19, 0x00	; 0
   11954:	fc 01       	movw	r30, r24
   11956:	31 83       	std	Z+1, r19	; 0x01
   11958:	20 83       	st	Z, r18
        p_nx=u/6;
   1195a:	8f 85       	ldd	r24, Y+15	; 0x0f
   1195c:	98 89       	ldd	r25, Y+16	; 0x10
   1195e:	26 e0       	ldi	r18, 0x06	; 6
   11960:	30 e0       	ldi	r19, 0x00	; 0
   11962:	b9 01       	movw	r22, r18
   11964:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   11968:	9b 01       	movw	r18, r22
   1196a:	c9 01       	movw	r24, r18
   1196c:	90 93 40 04 	sts	0x0440, r25
   11970:	80 93 3f 04 	sts	0x043F, r24
        p_ny=u%6;
   11974:	8f 85       	ldd	r24, Y+15	; 0x0f
   11976:	98 89       	ldd	r25, Y+16	; 0x10
   11978:	26 e0       	ldi	r18, 0x06	; 6
   1197a:	30 e0       	ldi	r19, 0x00	; 0
   1197c:	b9 01       	movw	r22, r18
   1197e:	0e 94 af 97 	call	0x12f5e	; 0x12f5e <__divmodhi4>
   11982:	90 93 42 04 	sts	0x0442, r25
   11986:	80 93 41 04 	sts	0x0441, r24
        adjacent(p_nx,p_ny,adj);
   1198a:	80 91 3f 04 	lds	r24, 0x043F
   1198e:	90 91 40 04 	lds	r25, 0x0440
   11992:	40 91 41 04 	lds	r20, 0x0441
   11996:	50 91 42 04 	lds	r21, 0x0442
   1199a:	9e 01       	movw	r18, r28
   1199c:	20 51       	subi	r18, 0x10	; 16
   1199e:	3f 4f       	sbci	r19, 0xFF	; 255
   119a0:	ba 01       	movw	r22, r20
   119a2:	a9 01       	movw	r20, r18
   119a4:	0e 94 fc 88 	call	0x111f8	; 0x111f8 <adjacent>
        for(j=0;j<4;j++)
   119a8:	18 86       	std	Y+8, r1	; 0x08
   119aa:	1f 82       	std	Y+7, r1	; 0x07
   119ac:	b4 c0       	rjmp	.+360    	; 0x11b16 <sh_path+0x34c>
		{
            if(adj[j][0]!=-1)
   119ae:	9e 01       	movw	r18, r28
   119b0:	20 51       	subi	r18, 0x10	; 16
   119b2:	3f 4f       	sbci	r19, 0xFF	; 255
   119b4:	8f 81       	ldd	r24, Y+7	; 0x07
   119b6:	98 85       	ldd	r25, Y+8	; 0x08
   119b8:	88 0f       	add	r24, r24
   119ba:	99 1f       	adc	r25, r25
   119bc:	88 0f       	add	r24, r24
   119be:	99 1f       	adc	r25, r25
   119c0:	82 0f       	add	r24, r18
   119c2:	93 1f       	adc	r25, r19
   119c4:	fc 01       	movw	r30, r24
   119c6:	80 81       	ld	r24, Z
   119c8:	91 81       	ldd	r25, Z+1	; 0x01
   119ca:	ff ef       	ldi	r31, 0xFF	; 255
   119cc:	8f 3f       	cpi	r24, 0xFF	; 255
   119ce:	9f 07       	cpc	r25, r31
   119d0:	09 f4       	brne	.+2      	; 0x119d4 <sh_path+0x20a>
   119d2:	9c c0       	rjmp	.+312    	; 0x11b0c <sh_path+0x342>
			{

                n_nx=adj[j][0];
   119d4:	9e 01       	movw	r18, r28
   119d6:	20 51       	subi	r18, 0x10	; 16
   119d8:	3f 4f       	sbci	r19, 0xFF	; 255
   119da:	8f 81       	ldd	r24, Y+7	; 0x07
   119dc:	98 85       	ldd	r25, Y+8	; 0x08
   119de:	88 0f       	add	r24, r24
   119e0:	99 1f       	adc	r25, r25
   119e2:	88 0f       	add	r24, r24
   119e4:	99 1f       	adc	r25, r25
   119e6:	82 0f       	add	r24, r18
   119e8:	93 1f       	adc	r25, r19
   119ea:	fc 01       	movw	r30, r24
   119ec:	80 81       	ld	r24, Z
   119ee:	91 81       	ldd	r25, Z+1	; 0x01
   119f0:	90 93 44 04 	sts	0x0444, r25
   119f4:	80 93 43 04 	sts	0x0443, r24
                n_ny=adj[j][1];
   119f8:	9e 01       	movw	r18, r28
   119fa:	20 51       	subi	r18, 0x10	; 16
   119fc:	3f 4f       	sbci	r19, 0xFF	; 255
   119fe:	8f 81       	ldd	r24, Y+7	; 0x07
   11a00:	98 85       	ldd	r25, Y+8	; 0x08
   11a02:	88 0f       	add	r24, r24
   11a04:	99 1f       	adc	r25, r25
   11a06:	88 0f       	add	r24, r24
   11a08:	99 1f       	adc	r25, r25
   11a0a:	82 0f       	add	r24, r18
   11a0c:	93 1f       	adc	r25, r19
   11a0e:	02 96       	adiw	r24, 0x02	; 2
   11a10:	fc 01       	movw	r30, r24
   11a12:	80 81       	ld	r24, Z
   11a14:	91 81       	ldd	r25, Z+1	; 0x01
   11a16:	90 93 46 04 	sts	0x0446, r25
   11a1a:	80 93 45 04 	sts	0x0445, r24
                v=grid[n_nx][n_ny]-1;
   11a1e:	20 91 43 04 	lds	r18, 0x0443
   11a22:	30 91 44 04 	lds	r19, 0x0444
   11a26:	40 91 45 04 	lds	r20, 0x0445
   11a2a:	50 91 46 04 	lds	r21, 0x0446
   11a2e:	c9 01       	movw	r24, r18
   11a30:	88 0f       	add	r24, r24
   11a32:	99 1f       	adc	r25, r25
   11a34:	82 0f       	add	r24, r18
   11a36:	93 1f       	adc	r25, r19
   11a38:	88 0f       	add	r24, r24
   11a3a:	99 1f       	adc	r25, r25
   11a3c:	84 0f       	add	r24, r20
   11a3e:	95 1f       	adc	r25, r21
   11a40:	88 0f       	add	r24, r24
   11a42:	99 1f       	adc	r25, r25
   11a44:	8e 5f       	subi	r24, 0xFE	; 254
   11a46:	9d 4f       	sbci	r25, 0xFD	; 253
   11a48:	fc 01       	movw	r30, r24
   11a4a:	80 81       	ld	r24, Z
   11a4c:	91 81       	ldd	r25, Z+1	; 0x01
   11a4e:	01 97       	sbiw	r24, 0x01	; 1
   11a50:	9a 8b       	std	Y+18, r25	; 0x12
   11a52:	89 8b       	std	Y+17, r24	; 0x11
                //printf("%d  %d\n",n_nx,n_ny);
                if((included[v]==FALSE)&&(dist[v]>(dist[u]+weight)))   // d[u,v] > d[u,i]+d[i,v] here d[i,v] is always 1 for a grid
   11a54:	9e 01       	movw	r18, r28
   11a56:	28 55       	subi	r18, 0x58	; 88
   11a58:	3f 4f       	sbci	r19, 0xFF	; 255
   11a5a:	89 89       	ldd	r24, Y+17	; 0x11
   11a5c:	9a 89       	ldd	r25, Y+18	; 0x12
   11a5e:	88 0f       	add	r24, r24
   11a60:	99 1f       	adc	r25, r25
   11a62:	82 0f       	add	r24, r18
   11a64:	93 1f       	adc	r25, r19
   11a66:	fc 01       	movw	r30, r24
   11a68:	80 81       	ld	r24, Z
   11a6a:	91 81       	ldd	r25, Z+1	; 0x01
   11a6c:	00 97       	sbiw	r24, 0x00	; 0
   11a6e:	09 f0       	breq	.+2      	; 0x11a72 <sh_path+0x2a8>
   11a70:	4d c0       	rjmp	.+154    	; 0x11b0c <sh_path+0x342>
   11a72:	89 89       	ldd	r24, Y+17	; 0x11
   11a74:	9a 89       	ldd	r25, Y+18	; 0x12
   11a76:	88 0f       	add	r24, r24
   11a78:	99 1f       	adc	r25, r25
   11a7a:	9e 01       	movw	r18, r28
   11a7c:	2f 5f       	subi	r18, 0xFF	; 255
   11a7e:	3f 4f       	sbci	r19, 0xFF	; 255
   11a80:	82 0f       	add	r24, r18
   11a82:	93 1f       	adc	r25, r19
   11a84:	45 96       	adiw	r24, 0x15	; 21
   11a86:	fc 01       	movw	r30, r24
   11a88:	20 81       	ld	r18, Z
   11a8a:	31 81       	ldd	r19, Z+1	; 0x01
   11a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
   11a8e:	98 89       	ldd	r25, Y+16	; 0x10
   11a90:	88 0f       	add	r24, r24
   11a92:	99 1f       	adc	r25, r25
   11a94:	ae 01       	movw	r20, r28
   11a96:	4f 5f       	subi	r20, 0xFF	; 255
   11a98:	5f 4f       	sbci	r21, 0xFF	; 255
   11a9a:	84 0f       	add	r24, r20
   11a9c:	95 1f       	adc	r25, r21
   11a9e:	45 96       	adiw	r24, 0x15	; 21
   11aa0:	fc 01       	movw	r30, r24
   11aa2:	40 81       	ld	r20, Z
   11aa4:	51 81       	ldd	r21, Z+1	; 0x01
   11aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
   11aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
   11aaa:	84 0f       	add	r24, r20
   11aac:	95 1f       	adc	r25, r21
   11aae:	82 17       	cp	r24, r18
   11ab0:	93 07       	cpc	r25, r19
   11ab2:	64 f5       	brge	.+88     	; 0x11b0c <sh_path+0x342>
                    {
						dist[v]=dist[u]+weight;
   11ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
   11ab6:	98 89       	ldd	r25, Y+16	; 0x10
   11ab8:	88 0f       	add	r24, r24
   11aba:	99 1f       	adc	r25, r25
   11abc:	9e 01       	movw	r18, r28
   11abe:	2f 5f       	subi	r18, 0xFF	; 255
   11ac0:	3f 4f       	sbci	r19, 0xFF	; 255
   11ac2:	82 0f       	add	r24, r18
   11ac4:	93 1f       	adc	r25, r19
   11ac6:	45 96       	adiw	r24, 0x15	; 21
   11ac8:	fc 01       	movw	r30, r24
   11aca:	20 81       	ld	r18, Z
   11acc:	31 81       	ldd	r19, Z+1	; 0x01
   11ace:	8d 85       	ldd	r24, Y+13	; 0x0d
   11ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
   11ad2:	28 0f       	add	r18, r24
   11ad4:	39 1f       	adc	r19, r25
   11ad6:	89 89       	ldd	r24, Y+17	; 0x11
   11ad8:	9a 89       	ldd	r25, Y+18	; 0x12
   11ada:	88 0f       	add	r24, r24
   11adc:	99 1f       	adc	r25, r25
   11ade:	ae 01       	movw	r20, r28
   11ae0:	4f 5f       	subi	r20, 0xFF	; 255
   11ae2:	5f 4f       	sbci	r21, 0xFF	; 255
   11ae4:	84 0f       	add	r24, r20
   11ae6:	95 1f       	adc	r25, r21
   11ae8:	45 96       	adiw	r24, 0x15	; 21
   11aea:	fc 01       	movw	r30, r24
   11aec:	31 83       	std	Z+1, r19	; 0x01
   11aee:	20 83       	st	Z, r18
						parent[v]=u;
   11af0:	9e 01       	movw	r18, r28
   11af2:	22 5a       	subi	r18, 0xA2	; 162
   11af4:	3f 4f       	sbci	r19, 0xFF	; 255
   11af6:	89 89       	ldd	r24, Y+17	; 0x11
   11af8:	9a 89       	ldd	r25, Y+18	; 0x12
   11afa:	88 0f       	add	r24, r24
   11afc:	99 1f       	adc	r25, r25
   11afe:	82 0f       	add	r24, r18
   11b00:	93 1f       	adc	r25, r19
   11b02:	2f 85       	ldd	r18, Y+15	; 0x0f
   11b04:	38 89       	ldd	r19, Y+16	; 0x10
   11b06:	fc 01       	movw	r30, r24
   11b08:	31 83       	std	Z+1, r19	; 0x01
   11b0a:	20 83       	st	Z, r18
    //    printf("%d\n",u);
        included[u]=TRUE;
        p_nx=u/6;
        p_ny=u%6;
        adjacent(p_nx,p_ny,adj);
        for(j=0;j<4;j++)
   11b0c:	8f 81       	ldd	r24, Y+7	; 0x07
   11b0e:	98 85       	ldd	r25, Y+8	; 0x08
   11b10:	01 96       	adiw	r24, 0x01	; 1
   11b12:	98 87       	std	Y+8, r25	; 0x08
   11b14:	8f 83       	std	Y+7, r24	; 0x07
   11b16:	8f 81       	ldd	r24, Y+7	; 0x07
   11b18:	98 85       	ldd	r25, Y+8	; 0x08
   11b1a:	84 30       	cpi	r24, 0x04	; 4
   11b1c:	91 05       	cpc	r25, r1
   11b1e:	0c f4       	brge	.+2      	; 0x11b22 <sh_path+0x358>
   11b20:	46 cf       	rjmp	.-372    	; 0x119ae <sh_path+0x1e4>
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    parent[start]=start;
    for(i=0;i<35;i++)
   11b22:	8d 81       	ldd	r24, Y+5	; 0x05
   11b24:	9e 81       	ldd	r25, Y+6	; 0x06
   11b26:	01 96       	adiw	r24, 0x01	; 1
   11b28:	9e 83       	std	Y+6, r25	; 0x06
   11b2a:	8d 83       	std	Y+5, r24	; 0x05
   11b2c:	8d 81       	ldd	r24, Y+5	; 0x05
   11b2e:	9e 81       	ldd	r25, Y+6	; 0x06
   11b30:	83 32       	cpi	r24, 0x23	; 35
   11b32:	91 05       	cpc	r25, r1
   11b34:	0c f4       	brge	.+2      	; 0x11b38 <sh_path+0x36e>
   11b36:	f9 ce       	rjmp	.-526    	; 0x1192a <sh_path+0x160>
                    }
            }
        }
    }

    p=(int*)malloc(sizeof(int));
   11b38:	82 e0       	ldi	r24, 0x02	; 2
   11b3a:	90 e0       	ldi	r25, 0x00	; 0
   11b3c:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <malloc>
   11b40:	9a 87       	std	Y+10, r25	; 0x0a
   11b42:	89 87       	std	Y+9, r24	; 0x09
    current=end;
   11b44:	ce 01       	movw	r24, r28
   11b46:	8e 5f       	subi	r24, 0xFE	; 254
   11b48:	9e 4f       	sbci	r25, 0xFE	; 254
   11b4a:	fc 01       	movw	r30, r24
   11b4c:	80 81       	ld	r24, Z
   11b4e:	91 81       	ldd	r25, Z+1	; 0x01
   11b50:	9a 83       	std	Y+2, r25	; 0x02
   11b52:	89 83       	std	Y+1, r24	; 0x01
    p[0]=current;
   11b54:	89 85       	ldd	r24, Y+9	; 0x09
   11b56:	9a 85       	ldd	r25, Y+10	; 0x0a
   11b58:	29 81       	ldd	r18, Y+1	; 0x01
   11b5a:	3a 81       	ldd	r19, Y+2	; 0x02
   11b5c:	fc 01       	movw	r30, r24
   11b5e:	31 83       	std	Z+1, r19	; 0x01
   11b60:	20 83       	st	Z, r18
    while(current!=start)
   11b62:	2d c0       	rjmp	.+90     	; 0x11bbe <sh_path+0x3f4>
	{
		length++;
   11b64:	8b 81       	ldd	r24, Y+3	; 0x03
   11b66:	9c 81       	ldd	r25, Y+4	; 0x04
   11b68:	01 96       	adiw	r24, 0x01	; 1
   11b6a:	9c 83       	std	Y+4, r25	; 0x04
   11b6c:	8b 83       	std	Y+3, r24	; 0x03
		current=parent[current];
   11b6e:	9e 01       	movw	r18, r28
   11b70:	22 5a       	subi	r18, 0xA2	; 162
   11b72:	3f 4f       	sbci	r19, 0xFF	; 255
   11b74:	89 81       	ldd	r24, Y+1	; 0x01
   11b76:	9a 81       	ldd	r25, Y+2	; 0x02
   11b78:	88 0f       	add	r24, r24
   11b7a:	99 1f       	adc	r25, r25
   11b7c:	82 0f       	add	r24, r18
   11b7e:	93 1f       	adc	r25, r19
   11b80:	fc 01       	movw	r30, r24
   11b82:	80 81       	ld	r24, Z
   11b84:	91 81       	ldd	r25, Z+1	; 0x01
   11b86:	9a 83       	std	Y+2, r25	; 0x02
   11b88:	89 83       	std	Y+1, r24	; 0x01
		p=(int*)realloc(p,((length+1)*sizeof(int)));
   11b8a:	8b 81       	ldd	r24, Y+3	; 0x03
   11b8c:	9c 81       	ldd	r25, Y+4	; 0x04
   11b8e:	01 96       	adiw	r24, 0x01	; 1
   11b90:	88 0f       	add	r24, r24
   11b92:	99 1f       	adc	r25, r25
   11b94:	9c 01       	movw	r18, r24
   11b96:	89 85       	ldd	r24, Y+9	; 0x09
   11b98:	9a 85       	ldd	r25, Y+10	; 0x0a
   11b9a:	b9 01       	movw	r22, r18
   11b9c:	0e 94 f1 98 	call	0x131e2	; 0x131e2 <realloc>
   11ba0:	9a 87       	std	Y+10, r25	; 0x0a
   11ba2:	89 87       	std	Y+9, r24	; 0x09
		p[length]=current;
   11ba4:	8b 81       	ldd	r24, Y+3	; 0x03
   11ba6:	9c 81       	ldd	r25, Y+4	; 0x04
   11ba8:	88 0f       	add	r24, r24
   11baa:	99 1f       	adc	r25, r25
   11bac:	29 85       	ldd	r18, Y+9	; 0x09
   11bae:	3a 85       	ldd	r19, Y+10	; 0x0a
   11bb0:	82 0f       	add	r24, r18
   11bb2:	93 1f       	adc	r25, r19
   11bb4:	29 81       	ldd	r18, Y+1	; 0x01
   11bb6:	3a 81       	ldd	r19, Y+2	; 0x02
   11bb8:	fc 01       	movw	r30, r24
   11bba:	31 83       	std	Z+1, r19	; 0x01
   11bbc:	20 83       	st	Z, r18
    }

    p=(int*)malloc(sizeof(int));
    current=end;
    p[0]=current;
    while(current!=start)
   11bbe:	ce 01       	movw	r24, r28
   11bc0:	80 50       	subi	r24, 0x00	; 0
   11bc2:	9f 4f       	sbci	r25, 0xFF	; 255
   11bc4:	29 81       	ldd	r18, Y+1	; 0x01
   11bc6:	3a 81       	ldd	r19, Y+2	; 0x02
   11bc8:	fc 01       	movw	r30, r24
   11bca:	80 81       	ld	r24, Z
   11bcc:	91 81       	ldd	r25, Z+1	; 0x01
   11bce:	28 17       	cp	r18, r24
   11bd0:	39 07       	cpc	r19, r25
   11bd2:	41 f6       	brne	.-112    	; 0x11b64 <sh_path+0x39a>
		p=(int*)realloc(p,((length+1)*sizeof(int)));
		p[length]=current;
    }


    p_nx=-1,p_ny=0,n_nx=0,n_ny=0;// Starting with facing north
   11bd4:	8f ef       	ldi	r24, 0xFF	; 255
   11bd6:	9f ef       	ldi	r25, 0xFF	; 255
   11bd8:	90 93 40 04 	sts	0x0440, r25
   11bdc:	80 93 3f 04 	sts	0x043F, r24
   11be0:	10 92 42 04 	sts	0x0442, r1
   11be4:	10 92 41 04 	sts	0x0441, r1
   11be8:	10 92 44 04 	sts	0x0444, r1
   11bec:	10 92 43 04 	sts	0x0443, r1
   11bf0:	10 92 46 04 	sts	0x0446, r1
   11bf4:	10 92 45 04 	sts	0x0445, r1

    dir=rotate(p[length],p[length-1],&turn_count);
   11bf8:	8b 81       	ldd	r24, Y+3	; 0x03
   11bfa:	9c 81       	ldd	r25, Y+4	; 0x04
   11bfc:	88 0f       	add	r24, r24
   11bfe:	99 1f       	adc	r25, r25
   11c00:	29 85       	ldd	r18, Y+9	; 0x09
   11c02:	3a 85       	ldd	r19, Y+10	; 0x0a
   11c04:	82 0f       	add	r24, r18
   11c06:	93 1f       	adc	r25, r19
   11c08:	fc 01       	movw	r30, r24
   11c0a:	80 81       	ld	r24, Z
   11c0c:	91 81       	ldd	r25, Z+1	; 0x01
   11c0e:	2b 81       	ldd	r18, Y+3	; 0x03
   11c10:	3c 81       	ldd	r19, Y+4	; 0x04
   11c12:	21 50       	subi	r18, 0x01	; 1
   11c14:	30 40       	sbci	r19, 0x00	; 0
   11c16:	22 0f       	add	r18, r18
   11c18:	33 1f       	adc	r19, r19
   11c1a:	49 85       	ldd	r20, Y+9	; 0x09
   11c1c:	5a 85       	ldd	r21, Y+10	; 0x0a
   11c1e:	24 0f       	add	r18, r20
   11c20:	35 1f       	adc	r19, r21
   11c22:	f9 01       	movw	r30, r18
   11c24:	40 81       	ld	r20, Z
   11c26:	51 81       	ldd	r21, Z+1	; 0x01
   11c28:	9e 01       	movw	r18, r28
   11c2a:	2a 55       	subi	r18, 0x5A	; 90
   11c2c:	3f 4f       	sbci	r19, 0xFF	; 255
   11c2e:	ba 01       	movw	r22, r20
   11c30:	a9 01       	movw	r20, r18
   11c32:	0e 94 55 8a 	call	0x114aa	; 0x114aa <rotate>
   11c36:	8b 8b       	std	Y+19, r24	; 0x13

    path=(char*)malloc((length+1)*sizeof(char *));
   11c38:	8b 81       	ldd	r24, Y+3	; 0x03
   11c3a:	9c 81       	ldd	r25, Y+4	; 0x04
   11c3c:	01 96       	adiw	r24, 0x01	; 1
   11c3e:	88 0f       	add	r24, r24
   11c40:	99 1f       	adc	r25, r25
   11c42:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <malloc>
   11c46:	9d 8b       	std	Y+21, r25	; 0x15
   11c48:	8c 8b       	std	Y+20, r24	; 0x14
    path[0]=dir;
   11c4a:	8c 89       	ldd	r24, Y+20	; 0x14
   11c4c:	9d 89       	ldd	r25, Y+21	; 0x15
   11c4e:	2b 89       	ldd	r18, Y+19	; 0x13
   11c50:	fc 01       	movw	r30, r24
   11c52:	20 83       	st	Z, r18
    *count1=0;
   11c54:	ce 01       	movw	r24, r28
   11c56:	8c 5f       	subi	r24, 0xFC	; 252
   11c58:	9e 4f       	sbci	r25, 0xFE	; 254
   11c5a:	fc 01       	movw	r30, r24
   11c5c:	80 81       	ld	r24, Z
   11c5e:	91 81       	ldd	r25, Z+1	; 0x01
   11c60:	fc 01       	movw	r30, r24
   11c62:	11 82       	std	Z+1, r1	; 0x01
   11c64:	10 82       	st	Z, r1
    for(i=length-1;i>0;i--)
   11c66:	8b 81       	ldd	r24, Y+3	; 0x03
   11c68:	9c 81       	ldd	r25, Y+4	; 0x04
   11c6a:	01 97       	sbiw	r24, 0x01	; 1
   11c6c:	9e 83       	std	Y+6, r25	; 0x06
   11c6e:	8d 83       	std	Y+5, r24	; 0x05
   11c70:	4a c0       	rjmp	.+148    	; 0x11d06 <sh_path+0x53c>
	{
		*count1+=1;
   11c72:	ce 01       	movw	r24, r28
   11c74:	8c 5f       	subi	r24, 0xFC	; 252
   11c76:	9e 4f       	sbci	r25, 0xFE	; 254
   11c78:	fc 01       	movw	r30, r24
   11c7a:	80 81       	ld	r24, Z
   11c7c:	91 81       	ldd	r25, Z+1	; 0x01
   11c7e:	fc 01       	movw	r30, r24
   11c80:	80 81       	ld	r24, Z
   11c82:	91 81       	ldd	r25, Z+1	; 0x01
   11c84:	9c 01       	movw	r18, r24
   11c86:	2f 5f       	subi	r18, 0xFF	; 255
   11c88:	3f 4f       	sbci	r19, 0xFF	; 255
   11c8a:	ce 01       	movw	r24, r28
   11c8c:	8c 5f       	subi	r24, 0xFC	; 252
   11c8e:	9e 4f       	sbci	r25, 0xFE	; 254
   11c90:	fc 01       	movw	r30, r24
   11c92:	80 81       	ld	r24, Z
   11c94:	91 81       	ldd	r25, Z+1	; 0x01
   11c96:	fc 01       	movw	r30, r24
   11c98:	31 83       	std	Z+1, r19	; 0x01
   11c9a:	20 83       	st	Z, r18
		dir=direction(p[i],p[i-1],&turn_count);
   11c9c:	8d 81       	ldd	r24, Y+5	; 0x05
   11c9e:	9e 81       	ldd	r25, Y+6	; 0x06
   11ca0:	88 0f       	add	r24, r24
   11ca2:	99 1f       	adc	r25, r25
   11ca4:	29 85       	ldd	r18, Y+9	; 0x09
   11ca6:	3a 85       	ldd	r19, Y+10	; 0x0a
   11ca8:	82 0f       	add	r24, r18
   11caa:	93 1f       	adc	r25, r19
   11cac:	fc 01       	movw	r30, r24
   11cae:	80 81       	ld	r24, Z
   11cb0:	91 81       	ldd	r25, Z+1	; 0x01
   11cb2:	2d 81       	ldd	r18, Y+5	; 0x05
   11cb4:	3e 81       	ldd	r19, Y+6	; 0x06
   11cb6:	21 50       	subi	r18, 0x01	; 1
   11cb8:	30 40       	sbci	r19, 0x00	; 0
   11cba:	22 0f       	add	r18, r18
   11cbc:	33 1f       	adc	r19, r19
   11cbe:	49 85       	ldd	r20, Y+9	; 0x09
   11cc0:	5a 85       	ldd	r21, Y+10	; 0x0a
   11cc2:	24 0f       	add	r18, r20
   11cc4:	35 1f       	adc	r19, r21
   11cc6:	f9 01       	movw	r30, r18
   11cc8:	40 81       	ld	r20, Z
   11cca:	51 81       	ldd	r21, Z+1	; 0x01
   11ccc:	9e 01       	movw	r18, r28
   11cce:	2a 55       	subi	r18, 0x5A	; 90
   11cd0:	3f 4f       	sbci	r19, 0xFF	; 255
   11cd2:	ba 01       	movw	r22, r20
   11cd4:	a9 01       	movw	r20, r18
   11cd6:	0e 94 ee 8a 	call	0x115dc	; 0x115dc <direction>
   11cda:	8b 8b       	std	Y+19, r24	; 0x13
		path[*count1]=dir;
   11cdc:	ce 01       	movw	r24, r28
   11cde:	8c 5f       	subi	r24, 0xFC	; 252
   11ce0:	9e 4f       	sbci	r25, 0xFE	; 254
   11ce2:	fc 01       	movw	r30, r24
   11ce4:	80 81       	ld	r24, Z
   11ce6:	91 81       	ldd	r25, Z+1	; 0x01
   11ce8:	fc 01       	movw	r30, r24
   11cea:	80 81       	ld	r24, Z
   11cec:	91 81       	ldd	r25, Z+1	; 0x01
   11cee:	2c 89       	ldd	r18, Y+20	; 0x14
   11cf0:	3d 89       	ldd	r19, Y+21	; 0x15
   11cf2:	82 0f       	add	r24, r18
   11cf4:	93 1f       	adc	r25, r19
   11cf6:	2b 89       	ldd	r18, Y+19	; 0x13
   11cf8:	fc 01       	movw	r30, r24
   11cfa:	20 83       	st	Z, r18
    dir=rotate(p[length],p[length-1],&turn_count);

    path=(char*)malloc((length+1)*sizeof(char *));
    path[0]=dir;
    *count1=0;
    for(i=length-1;i>0;i--)
   11cfc:	8d 81       	ldd	r24, Y+5	; 0x05
   11cfe:	9e 81       	ldd	r25, Y+6	; 0x06
   11d00:	01 97       	sbiw	r24, 0x01	; 1
   11d02:	9e 83       	std	Y+6, r25	; 0x06
   11d04:	8d 83       	std	Y+5, r24	; 0x05
   11d06:	8d 81       	ldd	r24, Y+5	; 0x05
   11d08:	9e 81       	ldd	r25, Y+6	; 0x06
   11d0a:	18 16       	cp	r1, r24
   11d0c:	19 06       	cpc	r1, r25
   11d0e:	0c f4       	brge	.+2      	; 0x11d12 <sh_path+0x548>
   11d10:	b0 cf       	rjmp	.-160    	; 0x11c72 <sh_path+0x4a8>
	{
		*count1+=1;
		dir=direction(p[i],p[i-1],&turn_count);
		path[*count1]=dir;
    }
    *count1+=1;
   11d12:	ce 01       	movw	r24, r28
   11d14:	8c 5f       	subi	r24, 0xFC	; 252
   11d16:	9e 4f       	sbci	r25, 0xFE	; 254
   11d18:	fc 01       	movw	r30, r24
   11d1a:	80 81       	ld	r24, Z
   11d1c:	91 81       	ldd	r25, Z+1	; 0x01
   11d1e:	fc 01       	movw	r30, r24
   11d20:	80 81       	ld	r24, Z
   11d22:	91 81       	ldd	r25, Z+1	; 0x01
   11d24:	9c 01       	movw	r18, r24
   11d26:	2f 5f       	subi	r18, 0xFF	; 255
   11d28:	3f 4f       	sbci	r19, 0xFF	; 255
   11d2a:	ce 01       	movw	r24, r28
   11d2c:	8c 5f       	subi	r24, 0xFC	; 252
   11d2e:	9e 4f       	sbci	r25, 0xFE	; 254
   11d30:	fc 01       	movw	r30, r24
   11d32:	80 81       	ld	r24, Z
   11d34:	91 81       	ldd	r25, Z+1	; 0x01
   11d36:	fc 01       	movw	r30, r24
   11d38:	31 83       	std	Z+1, r19	; 0x01
   11d3a:	20 83       	st	Z, r18
    path[*count1]=align(turn_count);
   11d3c:	ce 01       	movw	r24, r28
   11d3e:	8c 5f       	subi	r24, 0xFC	; 252
   11d40:	9e 4f       	sbci	r25, 0xFE	; 254
   11d42:	fc 01       	movw	r30, r24
   11d44:	80 81       	ld	r24, Z
   11d46:	91 81       	ldd	r25, Z+1	; 0x01
   11d48:	fc 01       	movw	r30, r24
   11d4a:	80 81       	ld	r24, Z
   11d4c:	91 81       	ldd	r25, Z+1	; 0x01
   11d4e:	2c 89       	ldd	r18, Y+20	; 0x14
   11d50:	3d 89       	ldd	r19, Y+21	; 0x15
   11d52:	89 01       	movw	r16, r18
   11d54:	08 0f       	add	r16, r24
   11d56:	19 1f       	adc	r17, r25
   11d58:	ce 01       	movw	r24, r28
   11d5a:	8a 55       	subi	r24, 0x5A	; 90
   11d5c:	9f 4f       	sbci	r25, 0xFF	; 255
   11d5e:	fc 01       	movw	r30, r24
   11d60:	80 81       	ld	r24, Z
   11d62:	91 81       	ldd	r25, Z+1	; 0x01
   11d64:	0e 94 17 8a 	call	0x1142e	; 0x1142e <align>
   11d68:	f8 01       	movw	r30, r16
   11d6a:	80 83       	st	Z, r24
	*count1+=1;
   11d6c:	ce 01       	movw	r24, r28
   11d6e:	8c 5f       	subi	r24, 0xFC	; 252
   11d70:	9e 4f       	sbci	r25, 0xFE	; 254
   11d72:	fc 01       	movw	r30, r24
   11d74:	80 81       	ld	r24, Z
   11d76:	91 81       	ldd	r25, Z+1	; 0x01
   11d78:	fc 01       	movw	r30, r24
   11d7a:	80 81       	ld	r24, Z
   11d7c:	91 81       	ldd	r25, Z+1	; 0x01
   11d7e:	9c 01       	movw	r18, r24
   11d80:	2f 5f       	subi	r18, 0xFF	; 255
   11d82:	3f 4f       	sbci	r19, 0xFF	; 255
   11d84:	ce 01       	movw	r24, r28
   11d86:	8c 5f       	subi	r24, 0xFC	; 252
   11d88:	9e 4f       	sbci	r25, 0xFE	; 254
   11d8a:	fc 01       	movw	r30, r24
   11d8c:	80 81       	ld	r24, Z
   11d8e:	91 81       	ldd	r25, Z+1	; 0x01
   11d90:	fc 01       	movw	r30, r24
   11d92:	31 83       	std	Z+1, r19	; 0x01
   11d94:	20 83       	st	Z, r18
	path[*count1]='\0';
   11d96:	ce 01       	movw	r24, r28
   11d98:	8c 5f       	subi	r24, 0xFC	; 252
   11d9a:	9e 4f       	sbci	r25, 0xFE	; 254
   11d9c:	fc 01       	movw	r30, r24
   11d9e:	80 81       	ld	r24, Z
   11da0:	91 81       	ldd	r25, Z+1	; 0x01
   11da2:	fc 01       	movw	r30, r24
   11da4:	80 81       	ld	r24, Z
   11da6:	91 81       	ldd	r25, Z+1	; 0x01
   11da8:	2c 89       	ldd	r18, Y+20	; 0x14
   11daa:	3d 89       	ldd	r19, Y+21	; 0x15
   11dac:	82 0f       	add	r24, r18
   11dae:	93 1f       	adc	r25, r19
   11db0:	fc 01       	movw	r30, r24
   11db2:	10 82       	st	Z, r1
    free(p);
   11db4:	89 85       	ldd	r24, Y+9	; 0x09
   11db6:	9a 85       	ldd	r25, Y+10	; 0x0a
   11db8:	0e 94 58 98 	call	0x130b0	; 0x130b0 <free>
    return path;
   11dbc:	8c 89       	ldd	r24, Y+20	; 0x14
   11dbe:	9d 89       	ldd	r25, Y+21	; 0x15
}
   11dc0:	cb 5f       	subi	r28, 0xFB	; 251
   11dc2:	de 4f       	sbci	r29, 0xFE	; 254
   11dc4:	0f b6       	in	r0, 0x3f	; 63
   11dc6:	f8 94       	cli
   11dc8:	de bf       	out	0x3e, r29	; 62
   11dca:	0f be       	out	0x3f, r0	; 63
   11dcc:	cd bf       	out	0x3d, r28	; 61
   11dce:	df 91       	pop	r29
   11dd0:	cf 91       	pop	r28
   11dd2:	1f 91       	pop	r17
   11dd4:	0f 91       	pop	r16
   11dd6:	08 95       	ret

00011dd8 <dijkstra>:
//printf("%c\n",path[i]);
//return 0;
//}

char* dijkstra(int start,int end,int *count)
{
   11dd8:	cf 93       	push	r28
   11dda:	df 93       	push	r29
   11ddc:	cd b7       	in	r28, 0x3d	; 61
   11dde:	de b7       	in	r29, 0x3e	; 62
   11de0:	2e 97       	sbiw	r28, 0x0e	; 14
   11de2:	0f b6       	in	r0, 0x3f	; 63
   11de4:	f8 94       	cli
   11de6:	de bf       	out	0x3e, r29	; 62
   11de8:	0f be       	out	0x3f, r0	; 63
   11dea:	cd bf       	out	0x3d, r28	; 61
   11dec:	9a 87       	std	Y+10, r25	; 0x0a
   11dee:	89 87       	std	Y+9, r24	; 0x09
   11df0:	7c 87       	std	Y+12, r23	; 0x0c
   11df2:	6b 87       	std	Y+11, r22	; 0x0b
   11df4:	5e 87       	std	Y+14, r21	; 0x0e
   11df6:	4d 87       	std	Y+13, r20	; 0x0d
	char *path;
	int i=0,j=0,m=31;
   11df8:	1c 82       	std	Y+4, r1	; 0x04
   11dfa:	1b 82       	std	Y+3, r1	; 0x03
   11dfc:	1e 82       	std	Y+6, r1	; 0x06
   11dfe:	1d 82       	std	Y+5, r1	; 0x05
   11e00:	8f e1       	ldi	r24, 0x1F	; 31
   11e02:	90 e0       	ldi	r25, 0x00	; 0
   11e04:	98 87       	std	Y+8, r25	; 0x08
   11e06:	8f 83       	std	Y+7, r24	; 0x07
		if(start==end)
   11e08:	29 85       	ldd	r18, Y+9	; 0x09
   11e0a:	3a 85       	ldd	r19, Y+10	; 0x0a
   11e0c:	8b 85       	ldd	r24, Y+11	; 0x0b
   11e0e:	9c 85       	ldd	r25, Y+12	; 0x0c
   11e10:	28 17       	cp	r18, r24
   11e12:	39 07       	cpc	r19, r25
   11e14:	89 f4       	brne	.+34     	; 0x11e38 <dijkstra+0x60>
    {
        path=(char*)malloc(2*sizeof(char));
   11e16:	82 e0       	ldi	r24, 0x02	; 2
   11e18:	90 e0       	ldi	r25, 0x00	; 0
   11e1a:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <malloc>
   11e1e:	9a 83       	std	Y+2, r25	; 0x02
   11e20:	89 83       	std	Y+1, r24	; 0x01
        path[0]='N';
   11e22:	89 81       	ldd	r24, Y+1	; 0x01
   11e24:	9a 81       	ldd	r25, Y+2	; 0x02
   11e26:	2e e4       	ldi	r18, 0x4E	; 78
   11e28:	fc 01       	movw	r30, r24
   11e2a:	20 83       	st	Z, r18
        path[1]='\0';
   11e2c:	89 81       	ldd	r24, Y+1	; 0x01
   11e2e:	9a 81       	ldd	r25, Y+2	; 0x02
   11e30:	01 96       	adiw	r24, 0x01	; 1
   11e32:	fc 01       	movw	r30, r24
   11e34:	10 82       	st	Z, r1
   11e36:	22 c0       	rjmp	.+68     	; 0x11e7c <dijkstra+0xa4>
    }
    else{
	start=transf[start];
   11e38:	89 85       	ldd	r24, Y+9	; 0x09
   11e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
   11e3c:	88 0f       	add	r24, r24
   11e3e:	99 1f       	adc	r25, r25
   11e40:	86 5b       	subi	r24, 0xB6	; 182
   11e42:	9d 4f       	sbci	r25, 0xFD	; 253
   11e44:	fc 01       	movw	r30, r24
   11e46:	80 81       	ld	r24, Z
   11e48:	91 81       	ldd	r25, Z+1	; 0x01
   11e4a:	9a 87       	std	Y+10, r25	; 0x0a
   11e4c:	89 87       	std	Y+9, r24	; 0x09
	end=transf[end];
   11e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
   11e50:	9c 85       	ldd	r25, Y+12	; 0x0c
   11e52:	88 0f       	add	r24, r24
   11e54:	99 1f       	adc	r25, r25
   11e56:	86 5b       	subi	r24, 0xB6	; 182
   11e58:	9d 4f       	sbci	r25, 0xFD	; 253
   11e5a:	fc 01       	movw	r30, r24
   11e5c:	80 81       	ld	r24, Z
   11e5e:	91 81       	ldd	r25, Z+1	; 0x01
   11e60:	9c 87       	std	Y+12, r25	; 0x0c
   11e62:	8b 87       	std	Y+11, r24	; 0x0b
	path=sh_path(start,end,count);}
   11e64:	89 85       	ldd	r24, Y+9	; 0x09
   11e66:	9a 85       	ldd	r25, Y+10	; 0x0a
   11e68:	4b 85       	ldd	r20, Y+11	; 0x0b
   11e6a:	5c 85       	ldd	r21, Y+12	; 0x0c
   11e6c:	2d 85       	ldd	r18, Y+13	; 0x0d
   11e6e:	3e 85       	ldd	r19, Y+14	; 0x0e
   11e70:	ba 01       	movw	r22, r20
   11e72:	a9 01       	movw	r20, r18
   11e74:	0e 94 e5 8b 	call	0x117ca	; 0x117ca <sh_path>
   11e78:	9a 83       	std	Y+2, r25	; 0x02
   11e7a:	89 83       	std	Y+1, r24	; 0x01
	return path;
   11e7c:	89 81       	ldd	r24, Y+1	; 0x01
   11e7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
   11e80:	2e 96       	adiw	r28, 0x0e	; 14
   11e82:	0f b6       	in	r0, 0x3f	; 63
   11e84:	f8 94       	cli
   11e86:	de bf       	out	0x3e, r29	; 62
   11e88:	0f be       	out	0x3f, r0	; 63
   11e8a:	cd bf       	out	0x3d, r28	; 61
   11e8c:	df 91       	pop	r29
   11e8e:	cf 91       	pop	r28
   11e90:	08 95       	ret

00011e92 <animals>:
{31,32,33,34,35,36}};

	int aniloc[20];
	int habloc[20];

	int animals(char a[2]){
   11e92:	cf 93       	push	r28
   11e94:	df 93       	push	r29
   11e96:	cd b7       	in	r28, 0x3d	; 61
   11e98:	de b7       	in	r29, 0x3e	; 62
   11e9a:	28 97       	sbiw	r28, 0x08	; 8
   11e9c:	0f b6       	in	r0, 0x3f	; 63
   11e9e:	f8 94       	cli
   11ea0:	de bf       	out	0x3e, r29	; 62
   11ea2:	0f be       	out	0x3f, r0	; 63
   11ea4:	cd bf       	out	0x3d, r28	; 61
   11ea6:	98 87       	std	Y+8, r25	; 0x08
   11ea8:	8f 83       	std	Y+7, r24	; 0x07
		//printf("-----%s\n",a);
		int animal=0,number=0,letter=0;
   11eaa:	1e 82       	std	Y+6, r1	; 0x06
   11eac:	1d 82       	std	Y+5, r1	; 0x05
   11eae:	1a 82       	std	Y+2, r1	; 0x02
   11eb0:	19 82       	std	Y+1, r1	; 0x01
   11eb2:	1c 82       	std	Y+4, r1	; 0x04
   11eb4:	1b 82       	std	Y+3, r1	; 0x03
		if(a[0] >= 'A' && a[0] <= 'F')
   11eb6:	8f 81       	ldd	r24, Y+7	; 0x07
   11eb8:	98 85       	ldd	r25, Y+8	; 0x08
   11eba:	fc 01       	movw	r30, r24
   11ebc:	80 81       	ld	r24, Z
   11ebe:	81 34       	cpi	r24, 0x41	; 65
   11ec0:	80 f0       	brcs	.+32     	; 0x11ee2 <animals+0x50>
   11ec2:	8f 81       	ldd	r24, Y+7	; 0x07
   11ec4:	98 85       	ldd	r25, Y+8	; 0x08
   11ec6:	fc 01       	movw	r30, r24
   11ec8:	80 81       	ld	r24, Z
   11eca:	87 34       	cpi	r24, 0x47	; 71
   11ecc:	50 f4       	brcc	.+20     	; 0x11ee2 <animals+0x50>
		letter = a[0]+1 - 'A';
   11ece:	8f 81       	ldd	r24, Y+7	; 0x07
   11ed0:	98 85       	ldd	r25, Y+8	; 0x08
   11ed2:	fc 01       	movw	r30, r24
   11ed4:	80 81       	ld	r24, Z
   11ed6:	88 2f       	mov	r24, r24
   11ed8:	90 e0       	ldi	r25, 0x00	; 0
   11eda:	80 54       	subi	r24, 0x40	; 64
   11edc:	90 40       	sbci	r25, 0x00	; 0
   11ede:	9c 83       	std	Y+4, r25	; 0x04
   11ee0:	8b 83       	std	Y+3, r24	; 0x03
		if(a[1] >='1' && a[1] <= '6')
   11ee2:	8f 81       	ldd	r24, Y+7	; 0x07
   11ee4:	98 85       	ldd	r25, Y+8	; 0x08
   11ee6:	01 96       	adiw	r24, 0x01	; 1
   11ee8:	fc 01       	movw	r30, r24
   11eea:	80 81       	ld	r24, Z
   11eec:	81 33       	cpi	r24, 0x31	; 49
   11eee:	88 f0       	brcs	.+34     	; 0x11f12 <animals+0x80>
   11ef0:	8f 81       	ldd	r24, Y+7	; 0x07
   11ef2:	98 85       	ldd	r25, Y+8	; 0x08
   11ef4:	01 96       	adiw	r24, 0x01	; 1
   11ef6:	fc 01       	movw	r30, r24
   11ef8:	80 81       	ld	r24, Z
   11efa:	87 33       	cpi	r24, 0x37	; 55
   11efc:	50 f4       	brcc	.+20     	; 0x11f12 <animals+0x80>
		number = a[1] - '0';
   11efe:	8f 81       	ldd	r24, Y+7	; 0x07
   11f00:	98 85       	ldd	r25, Y+8	; 0x08
   11f02:	01 96       	adiw	r24, 0x01	; 1
   11f04:	fc 01       	movw	r30, r24
   11f06:	80 81       	ld	r24, Z
   11f08:	88 2f       	mov	r24, r24
   11f0a:	90 e0       	ldi	r25, 0x00	; 0
   11f0c:	c0 97       	sbiw	r24, 0x30	; 48
   11f0e:	9a 83       	std	Y+2, r25	; 0x02
   11f10:	89 83       	std	Y+1, r24	; 0x01

		animal = graph[number-1][letter-1];
   11f12:	89 81       	ldd	r24, Y+1	; 0x01
   11f14:	9a 81       	ldd	r25, Y+2	; 0x02
   11f16:	9c 01       	movw	r18, r24
   11f18:	21 50       	subi	r18, 0x01	; 1
   11f1a:	30 40       	sbci	r19, 0x00	; 0
   11f1c:	8b 81       	ldd	r24, Y+3	; 0x03
   11f1e:	9c 81       	ldd	r25, Y+4	; 0x04
   11f20:	ac 01       	movw	r20, r24
   11f22:	41 50       	subi	r20, 0x01	; 1
   11f24:	50 40       	sbci	r21, 0x00	; 0
   11f26:	c9 01       	movw	r24, r18
   11f28:	88 0f       	add	r24, r24
   11f2a:	99 1f       	adc	r25, r25
   11f2c:	82 0f       	add	r24, r18
   11f2e:	93 1f       	adc	r25, r19
   11f30:	88 0f       	add	r24, r24
   11f32:	99 1f       	adc	r25, r25
   11f34:	84 0f       	add	r24, r20
   11f36:	95 1f       	adc	r25, r21
   11f38:	88 0f       	add	r24, r24
   11f3a:	99 1f       	adc	r25, r25
   11f3c:	8c 55       	subi	r24, 0x5C	; 92
   11f3e:	9d 4f       	sbci	r25, 0xFD	; 253
   11f40:	fc 01       	movw	r30, r24
   11f42:	80 81       	ld	r24, Z
   11f44:	91 81       	ldd	r25, Z+1	; 0x01
   11f46:	9e 83       	std	Y+6, r25	; 0x06
   11f48:	8d 83       	std	Y+5, r24	; 0x05
		// if(strcmp("A1",a)==0)
		// animal++;
		return animal;
   11f4a:	8d 81       	ldd	r24, Y+5	; 0x05
   11f4c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
   11f4e:	28 96       	adiw	r28, 0x08	; 8
   11f50:	0f b6       	in	r0, 0x3f	; 63
   11f52:	f8 94       	cli
   11f54:	de bf       	out	0x3e, r29	; 62
   11f56:	0f be       	out	0x3f, r0	; 63
   11f58:	cd bf       	out	0x3d, r28	; 61
   11f5a:	df 91       	pop	r29
   11f5c:	cf 91       	pop	r28
   11f5e:	08 95       	ret

00011f60 <habitats>:

	int habitats(char h[2]){
   11f60:	cf 93       	push	r28
   11f62:	df 93       	push	r29
   11f64:	cd b7       	in	r28, 0x3d	; 61
   11f66:	de b7       	in	r29, 0x3e	; 62
   11f68:	28 97       	sbiw	r28, 0x08	; 8
   11f6a:	0f b6       	in	r0, 0x3f	; 63
   11f6c:	f8 94       	cli
   11f6e:	de bf       	out	0x3e, r29	; 62
   11f70:	0f be       	out	0x3f, r0	; 63
   11f72:	cd bf       	out	0x3d, r28	; 61
   11f74:	98 87       	std	Y+8, r25	; 0x08
   11f76:	8f 83       	std	Y+7, r24	; 0x07
		int i=0,m=0,habitat=0;
   11f78:	1a 82       	std	Y+2, r1	; 0x02
   11f7a:	19 82       	std	Y+1, r1	; 0x01
   11f7c:	1c 82       	std	Y+4, r1	; 0x04
   11f7e:	1b 82       	std	Y+3, r1	; 0x03
   11f80:	1e 82       	std	Y+6, r1	; 0x06
   11f82:	1d 82       	std	Y+5, r1	; 0x05
		for ( i = 0; h[i] != '\0'; i++)
   11f84:	1a 82       	std	Y+2, r1	; 0x02
   11f86:	19 82       	std	Y+1, r1	; 0x01
   11f88:	1f c0       	rjmp	.+62     	; 0x11fc8 <habitats+0x68>
		m = m * 10 + h[i] - '0';
   11f8a:	8b 81       	ldd	r24, Y+3	; 0x03
   11f8c:	9c 81       	ldd	r25, Y+4	; 0x04
   11f8e:	88 0f       	add	r24, r24
   11f90:	99 1f       	adc	r25, r25
   11f92:	9c 01       	movw	r18, r24
   11f94:	22 0f       	add	r18, r18
   11f96:	33 1f       	adc	r19, r19
   11f98:	22 0f       	add	r18, r18
   11f9a:	33 1f       	adc	r19, r19
   11f9c:	28 0f       	add	r18, r24
   11f9e:	39 1f       	adc	r19, r25
   11fa0:	89 81       	ldd	r24, Y+1	; 0x01
   11fa2:	9a 81       	ldd	r25, Y+2	; 0x02
   11fa4:	4f 81       	ldd	r20, Y+7	; 0x07
   11fa6:	58 85       	ldd	r21, Y+8	; 0x08
   11fa8:	84 0f       	add	r24, r20
   11faa:	95 1f       	adc	r25, r21
   11fac:	fc 01       	movw	r30, r24
   11fae:	80 81       	ld	r24, Z
   11fb0:	88 2f       	mov	r24, r24
   11fb2:	90 e0       	ldi	r25, 0x00	; 0
   11fb4:	82 0f       	add	r24, r18
   11fb6:	93 1f       	adc	r25, r19
   11fb8:	c0 97       	sbiw	r24, 0x30	; 48
   11fba:	9c 83       	std	Y+4, r25	; 0x04
   11fbc:	8b 83       	std	Y+3, r24	; 0x03
		return animal;
	}

	int habitats(char h[2]){
		int i=0,m=0,habitat=0;
		for ( i = 0; h[i] != '\0'; i++)
   11fbe:	89 81       	ldd	r24, Y+1	; 0x01
   11fc0:	9a 81       	ldd	r25, Y+2	; 0x02
   11fc2:	01 96       	adiw	r24, 0x01	; 1
   11fc4:	9a 83       	std	Y+2, r25	; 0x02
   11fc6:	89 83       	std	Y+1, r24	; 0x01
   11fc8:	89 81       	ldd	r24, Y+1	; 0x01
   11fca:	9a 81       	ldd	r25, Y+2	; 0x02
   11fcc:	2f 81       	ldd	r18, Y+7	; 0x07
   11fce:	38 85       	ldd	r19, Y+8	; 0x08
   11fd0:	82 0f       	add	r24, r18
   11fd2:	93 1f       	adc	r25, r19
   11fd4:	fc 01       	movw	r30, r24
   11fd6:	80 81       	ld	r24, Z
   11fd8:	88 23       	and	r24, r24
   11fda:	b9 f6       	brne	.-82     	; 0x11f8a <habitats+0x2a>
		m = m * 10 + h[i] - '0';

		if(m<=5)
   11fdc:	8b 81       	ldd	r24, Y+3	; 0x03
   11fde:	9c 81       	ldd	r25, Y+4	; 0x04
   11fe0:	86 30       	cpi	r24, 0x06	; 6
   11fe2:	91 05       	cpc	r25, r1
   11fe4:	2c f4       	brge	.+10     	; 0x11ff0 <habitats+0x90>
		habitat = 1 + (m-1);
   11fe6:	8b 81       	ldd	r24, Y+3	; 0x03
   11fe8:	9c 81       	ldd	r25, Y+4	; 0x04
   11fea:	9e 83       	std	Y+6, r25	; 0x06
   11fec:	8d 83       	std	Y+5, r24	; 0x05
   11fee:	3f c0       	rjmp	.+126    	; 0x1206e <habitats+0x10e>
		else if(m>=6 && m<=10)
   11ff0:	8b 81       	ldd	r24, Y+3	; 0x03
   11ff2:	9c 81       	ldd	r25, Y+4	; 0x04
   11ff4:	86 30       	cpi	r24, 0x06	; 6
   11ff6:	91 05       	cpc	r25, r1
   11ff8:	5c f0       	brlt	.+22     	; 0x12010 <habitats+0xb0>
   11ffa:	8b 81       	ldd	r24, Y+3	; 0x03
   11ffc:	9c 81       	ldd	r25, Y+4	; 0x04
   11ffe:	8b 30       	cpi	r24, 0x0B	; 11
   12000:	91 05       	cpc	r25, r1
   12002:	34 f4       	brge	.+12     	; 0x12010 <habitats+0xb0>
		habitat = 2 + (m-1);
   12004:	8b 81       	ldd	r24, Y+3	; 0x03
   12006:	9c 81       	ldd	r25, Y+4	; 0x04
   12008:	01 96       	adiw	r24, 0x01	; 1
   1200a:	9e 83       	std	Y+6, r25	; 0x06
   1200c:	8d 83       	std	Y+5, r24	; 0x05
   1200e:	2f c0       	rjmp	.+94     	; 0x1206e <habitats+0x10e>
		else if(m>=11 && m<=15)
   12010:	8b 81       	ldd	r24, Y+3	; 0x03
   12012:	9c 81       	ldd	r25, Y+4	; 0x04
   12014:	8b 30       	cpi	r24, 0x0B	; 11
   12016:	91 05       	cpc	r25, r1
   12018:	5c f0       	brlt	.+22     	; 0x12030 <habitats+0xd0>
   1201a:	8b 81       	ldd	r24, Y+3	; 0x03
   1201c:	9c 81       	ldd	r25, Y+4	; 0x04
   1201e:	80 31       	cpi	r24, 0x10	; 16
   12020:	91 05       	cpc	r25, r1
   12022:	34 f4       	brge	.+12     	; 0x12030 <habitats+0xd0>
		habitat = 3 + (m-1);
   12024:	8b 81       	ldd	r24, Y+3	; 0x03
   12026:	9c 81       	ldd	r25, Y+4	; 0x04
   12028:	02 96       	adiw	r24, 0x02	; 2
   1202a:	9e 83       	std	Y+6, r25	; 0x06
   1202c:	8d 83       	std	Y+5, r24	; 0x05
   1202e:	1f c0       	rjmp	.+62     	; 0x1206e <habitats+0x10e>
		else if(m>=16 && m<=20)
   12030:	8b 81       	ldd	r24, Y+3	; 0x03
   12032:	9c 81       	ldd	r25, Y+4	; 0x04
   12034:	80 31       	cpi	r24, 0x10	; 16
   12036:	91 05       	cpc	r25, r1
   12038:	5c f0       	brlt	.+22     	; 0x12050 <habitats+0xf0>
   1203a:	8b 81       	ldd	r24, Y+3	; 0x03
   1203c:	9c 81       	ldd	r25, Y+4	; 0x04
   1203e:	85 31       	cpi	r24, 0x15	; 21
   12040:	91 05       	cpc	r25, r1
   12042:	34 f4       	brge	.+12     	; 0x12050 <habitats+0xf0>
		habitat = 4 + (m-1);
   12044:	8b 81       	ldd	r24, Y+3	; 0x03
   12046:	9c 81       	ldd	r25, Y+4	; 0x04
   12048:	03 96       	adiw	r24, 0x03	; 3
   1204a:	9e 83       	std	Y+6, r25	; 0x06
   1204c:	8d 83       	std	Y+5, r24	; 0x05
   1204e:	0f c0       	rjmp	.+30     	; 0x1206e <habitats+0x10e>
		else if(m>=21 && m<=25)
   12050:	8b 81       	ldd	r24, Y+3	; 0x03
   12052:	9c 81       	ldd	r25, Y+4	; 0x04
   12054:	85 31       	cpi	r24, 0x15	; 21
   12056:	91 05       	cpc	r25, r1
   12058:	54 f0       	brlt	.+20     	; 0x1206e <habitats+0x10e>
   1205a:	8b 81       	ldd	r24, Y+3	; 0x03
   1205c:	9c 81       	ldd	r25, Y+4	; 0x04
   1205e:	8a 31       	cpi	r24, 0x1A	; 26
   12060:	91 05       	cpc	r25, r1
   12062:	2c f4       	brge	.+10     	; 0x1206e <habitats+0x10e>
		habitat = 5 + (m-1);
   12064:	8b 81       	ldd	r24, Y+3	; 0x03
   12066:	9c 81       	ldd	r25, Y+4	; 0x04
   12068:	04 96       	adiw	r24, 0x04	; 4
   1206a:	9e 83       	std	Y+6, r25	; 0x06
   1206c:	8d 83       	std	Y+5, r24	; 0x05
		return habitat;
   1206e:	8d 81       	ldd	r24, Y+5	; 0x05
   12070:	9e 81       	ldd	r25, Y+6	; 0x06
	}
   12072:	28 96       	adiw	r28, 0x08	; 8
   12074:	0f b6       	in	r0, 0x3f	; 63
   12076:	f8 94       	cli
   12078:	de bf       	out	0x3e, r29	; 62
   1207a:	0f be       	out	0x3f, r0	; 63
   1207c:	cd bf       	out	0x3d, r28	; 61
   1207e:	df 91       	pop	r29
   12080:	cf 91       	pop	r28
   12082:	08 95       	ret

00012084 <node_map>:

	void node_map(char *tokenstring,int type, int *len)
	{
   12084:	cf 93       	push	r28
   12086:	df 93       	push	r29
   12088:	cd b7       	in	r28, 0x3d	; 61
   1208a:	de b7       	in	r29, 0x3e	; 62
   1208c:	63 97       	sbiw	r28, 0x13	; 19
   1208e:	0f b6       	in	r0, 0x3f	; 63
   12090:	f8 94       	cli
   12092:	de bf       	out	0x3e, r29	; 62
   12094:	0f be       	out	0x3f, r0	; 63
   12096:	cd bf       	out	0x3d, r28	; 61
   12098:	9f 87       	std	Y+15, r25	; 0x0f
   1209a:	8e 87       	std	Y+14, r24	; 0x0e
   1209c:	79 8b       	std	Y+17, r23	; 0x11
   1209e:	68 8b       	std	Y+16, r22	; 0x10
   120a0:	5b 8b       	std	Y+19, r21	; 0x13
   120a2:	4a 8b       	std	Y+18, r20	; 0x12
		char a[2];
		char h[2];
		char seps[] = ", ";
   120a4:	ce 01       	movw	r24, r28
   120a6:	09 96       	adiw	r24, 0x09	; 9
   120a8:	2f ee       	ldi	r18, 0xEF	; 239
   120aa:	32 e0       	ldi	r19, 0x02	; 2
   120ac:	43 e0       	ldi	r20, 0x03	; 3
   120ae:	f9 01       	movw	r30, r18
   120b0:	00 80       	ld	r0, Z
   120b2:	2f 5f       	subi	r18, 0xFF	; 255
   120b4:	3f 4f       	sbci	r19, 0xFF	; 255
   120b6:	fc 01       	movw	r30, r24
   120b8:	00 82       	st	Z, r0
   120ba:	01 96       	adiw	r24, 0x01	; 1
   120bc:	41 50       	subi	r20, 0x01	; 1
   120be:	44 23       	and	r20, r20
   120c0:	b1 f7       	brne	.-20     	; 0x120ae <node_map+0x2a>
		char* token;
		int var;
		int i = 0;
   120c2:	1c 82       	std	Y+4, r1	; 0x04
   120c4:	1b 82       	std	Y+3, r1	; 0x03
		token = strtok (tokenstring, seps);
   120c6:	8e 85       	ldd	r24, Y+14	; 0x0e
   120c8:	9f 85       	ldd	r25, Y+15	; 0x0f
   120ca:	9e 01       	movw	r18, r28
   120cc:	27 5f       	subi	r18, 0xF7	; 247
   120ce:	3f 4f       	sbci	r19, 0xFF	; 255
   120d0:	b9 01       	movw	r22, r18
   120d2:	0e 94 d1 99 	call	0x133a2	; 0x133a2 <strtok>
   120d6:	9a 83       	std	Y+2, r25	; 0x02
   120d8:	89 83       	std	Y+1, r24	; 0x01
		while (token != NULL)
   120da:	4f c0       	rjmp	.+158    	; 0x1217a <node_map+0xf6>
		{
			if(type==0)
   120dc:	88 89       	ldd	r24, Y+16	; 0x10
   120de:	99 89       	ldd	r25, Y+17	; 0x11
   120e0:	00 97       	sbiw	r24, 0x00	; 0
   120e2:	79 f4       	brne	.+30     	; 0x12102 <node_map+0x7e>
			{//Animal
				aniloc[i]=animals(token);
   120e4:	89 81       	ldd	r24, Y+1	; 0x01
   120e6:	9a 81       	ldd	r25, Y+2	; 0x02
   120e8:	0e 94 49 8f 	call	0x11e92	; 0x11e92 <animals>
   120ec:	9c 01       	movw	r18, r24
   120ee:	8b 81       	ldd	r24, Y+3	; 0x03
   120f0:	9c 81       	ldd	r25, Y+4	; 0x04
   120f2:	88 0f       	add	r24, r24
   120f4:	99 1f       	adc	r25, r25
   120f6:	8e 52       	subi	r24, 0x2E	; 46
   120f8:	9b 4f       	sbci	r25, 0xFB	; 251
   120fa:	fc 01       	movw	r30, r24
   120fc:	31 83       	std	Z+1, r19	; 0x01
   120fe:	20 83       	st	Z, r18
   12100:	0e c0       	rjmp	.+28     	; 0x1211e <node_map+0x9a>
			}
			else
			{
				habloc[i]=habitats(token);
   12102:	89 81       	ldd	r24, Y+1	; 0x01
   12104:	9a 81       	ldd	r25, Y+2	; 0x02
   12106:	0e 94 b0 8f 	call	0x11f60	; 0x11f60 <habitats>
   1210a:	9c 01       	movw	r18, r24
   1210c:	8b 81       	ldd	r24, Y+3	; 0x03
   1210e:	9c 81       	ldd	r25, Y+4	; 0x04
   12110:	88 0f       	add	r24, r24
   12112:	99 1f       	adc	r25, r25
   12114:	89 59       	subi	r24, 0x99	; 153
   12116:	9b 4f       	sbci	r25, 0xFB	; 251
   12118:	fc 01       	movw	r30, r24
   1211a:	31 83       	std	Z+1, r19	; 0x01
   1211c:	20 83       	st	Z, r18
			}
			sscanf (token, "%d", &var);
   1211e:	00 d0       	rcall	.+0      	; 0x12120 <node_map+0x9c>
   12120:	00 d0       	rcall	.+0      	; 0x12122 <node_map+0x9e>
   12122:	8d b7       	in	r24, 0x3d	; 61
   12124:	9e b7       	in	r25, 0x3e	; 62
   12126:	01 96       	adiw	r24, 0x01	; 1
   12128:	29 81       	ldd	r18, Y+1	; 0x01
   1212a:	3a 81       	ldd	r19, Y+2	; 0x02
   1212c:	fc 01       	movw	r30, r24
   1212e:	31 83       	std	Z+1, r19	; 0x01
   12130:	20 83       	st	Z, r18
   12132:	2c ee       	ldi	r18, 0xEC	; 236
   12134:	32 e0       	ldi	r19, 0x02	; 2
   12136:	fc 01       	movw	r30, r24
   12138:	33 83       	std	Z+3, r19	; 0x03
   1213a:	22 83       	std	Z+2, r18	; 0x02
   1213c:	9e 01       	movw	r18, r28
   1213e:	24 5f       	subi	r18, 0xF4	; 244
   12140:	3f 4f       	sbci	r19, 0xFF	; 255
   12142:	fc 01       	movw	r30, r24
   12144:	35 83       	std	Z+5, r19	; 0x05
   12146:	24 83       	std	Z+4, r18	; 0x04
   12148:	0e 94 18 9a 	call	0x13430	; 0x13430 <sscanf>
   1214c:	8d b7       	in	r24, 0x3d	; 61
   1214e:	9e b7       	in	r25, 0x3e	; 62
   12150:	06 96       	adiw	r24, 0x06	; 6
   12152:	0f b6       	in	r0, 0x3f	; 63
   12154:	f8 94       	cli
   12156:	9e bf       	out	0x3e, r25	; 62
   12158:	0f be       	out	0x3f, r0	; 63
   1215a:	8d bf       	out	0x3d, r24	; 61
			i++;
   1215c:	8b 81       	ldd	r24, Y+3	; 0x03
   1215e:	9c 81       	ldd	r25, Y+4	; 0x04
   12160:	01 96       	adiw	r24, 0x01	; 1
   12162:	9c 83       	std	Y+4, r25	; 0x04
   12164:	8b 83       	std	Y+3, r24	; 0x03
			token = strtok (NULL, seps);
   12166:	9e 01       	movw	r18, r28
   12168:	27 5f       	subi	r18, 0xF7	; 247
   1216a:	3f 4f       	sbci	r19, 0xFF	; 255
   1216c:	80 e0       	ldi	r24, 0x00	; 0
   1216e:	90 e0       	ldi	r25, 0x00	; 0
   12170:	b9 01       	movw	r22, r18
   12172:	0e 94 d1 99 	call	0x133a2	; 0x133a2 <strtok>
   12176:	9a 83       	std	Y+2, r25	; 0x02
   12178:	89 83       	std	Y+1, r24	; 0x01
		char seps[] = ", ";
		char* token;
		int var;
		int i = 0;
		token = strtok (tokenstring, seps);
		while (token != NULL)
   1217a:	89 81       	ldd	r24, Y+1	; 0x01
   1217c:	9a 81       	ldd	r25, Y+2	; 0x02
   1217e:	00 97       	sbiw	r24, 0x00	; 0
   12180:	09 f0       	breq	.+2      	; 0x12184 <node_map+0x100>
   12182:	ac cf       	rjmp	.-168    	; 0x120dc <node_map+0x58>
			}
			sscanf (token, "%d", &var);
			i++;
			token = strtok (NULL, seps);
		}
		*len=i;
   12184:	8a 89       	ldd	r24, Y+18	; 0x12
   12186:	9b 89       	ldd	r25, Y+19	; 0x13
   12188:	2b 81       	ldd	r18, Y+3	; 0x03
   1218a:	3c 81       	ldd	r19, Y+4	; 0x04
   1218c:	fc 01       	movw	r30, r24
   1218e:	31 83       	std	Z+1, r19	; 0x01
   12190:	20 83       	st	Z, r18
	}
   12192:	63 96       	adiw	r28, 0x13	; 19
   12194:	0f b6       	in	r0, 0x3f	; 63
   12196:	f8 94       	cli
   12198:	de bf       	out	0x3e, r29	; 62
   1219a:	0f be       	out	0x3f, r0	; 63
   1219c:	cd bf       	out	0x3d, r28	; 61
   1219e:	df 91       	pop	r29
   121a0:	cf 91       	pop	r28
   121a2:	08 95       	ret

000121a4 <uart2_init>:

unsigned char a = 0;
unsigned char h = 0;

void uart2_init(void)
{
   121a4:	cf 93       	push	r28
   121a6:	df 93       	push	r29
   121a8:	cd b7       	in	r28, 0x3d	; 61
   121aa:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
   121ac:	81 ed       	ldi	r24, 0xD1	; 209
   121ae:	90 e0       	ldi	r25, 0x00	; 0
   121b0:	fc 01       	movw	r30, r24
   121b2:	10 82       	st	Z, r1
	UCSR2A = 0x00;
   121b4:	80 ed       	ldi	r24, 0xD0	; 208
   121b6:	90 e0       	ldi	r25, 0x00	; 0
   121b8:	fc 01       	movw	r30, r24
   121ba:	10 82       	st	Z, r1
	UCSR2C = 0x06;
   121bc:	82 ed       	ldi	r24, 0xD2	; 210
   121be:	90 e0       	ldi	r25, 0x00	; 0
   121c0:	26 e0       	ldi	r18, 0x06	; 6
   121c2:	fc 01       	movw	r30, r24
   121c4:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
   121c6:	84 ed       	ldi	r24, 0xD4	; 212
   121c8:	90 e0       	ldi	r25, 0x00	; 0
   121ca:	2f e5       	ldi	r18, 0x5F	; 95
   121cc:	fc 01       	movw	r30, r24
   121ce:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
   121d0:	85 ed       	ldi	r24, 0xD5	; 213
   121d2:	90 e0       	ldi	r25, 0x00	; 0
   121d4:	fc 01       	movw	r30, r24
   121d6:	10 82       	st	Z, r1
	UCSR2B = 0x98;
   121d8:	81 ed       	ldi	r24, 0xD1	; 209
   121da:	90 e0       	ldi	r25, 0x00	; 0
   121dc:	28 e9       	ldi	r18, 0x98	; 152
   121de:	fc 01       	movw	r30, r24
   121e0:	20 83       	st	Z, r18
}
   121e2:	df 91       	pop	r29
   121e4:	cf 91       	pop	r28
   121e6:	08 95       	ret

000121e8 <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{
   121e8:	1f 92       	push	r1
   121ea:	0f 92       	push	r0
   121ec:	0f b6       	in	r0, 0x3f	; 63
   121ee:	0f 92       	push	r0
   121f0:	00 90 5b 00 	lds	r0, 0x005B
   121f4:	0f 92       	push	r0
   121f6:	11 24       	eor	r1, r1
   121f8:	2f 93       	push	r18
   121fa:	3f 93       	push	r19
   121fc:	4f 93       	push	r20
   121fe:	5f 93       	push	r21
   12200:	6f 93       	push	r22
   12202:	7f 93       	push	r23
   12204:	8f 93       	push	r24
   12206:	9f 93       	push	r25
   12208:	af 93       	push	r26
   1220a:	bf 93       	push	r27
   1220c:	ef 93       	push	r30
   1220e:	ff 93       	push	r31
   12210:	cf 93       	push	r28
   12212:	df 93       	push	r29
   12214:	cd b7       	in	r28, 0x3d	; 61
   12216:	de b7       	in	r29, 0x3e	; 62
	data= UDR2;
   12218:	86 ed       	ldi	r24, 0xD6	; 214
   1221a:	90 e0       	ldi	r25, 0x00	; 0
   1221c:	fc 01       	movw	r30, r24
   1221e:	80 81       	ld	r24, Z
   12220:	80 93 ce 04 	sts	0x04CE, r24
	if(data == 0x0A)
   12224:	80 91 ce 04 	lds	r24, 0x04CE
   12228:	8a 30       	cpi	r24, 0x0A	; 10
   1222a:	61 f4       	brne	.+24     	; 0x12244 <__vector_51+0x5c>
	{
		pos = count;
   1222c:	80 91 47 04 	lds	r24, 0x0447
   12230:	80 93 f2 02 	sts	0x02F2, r24
		count++;
   12234:	80 91 47 04 	lds	r24, 0x0447
   12238:	8f 5f       	subi	r24, 0xFF	; 255
   1223a:	80 93 47 04 	sts	0x0447, r24
		flag = FALSE;
   1223e:	10 92 f3 02 	sts	0x02F3, r1
   12242:	52 c0       	rjmp	.+164    	; 0x122e8 <__vector_51+0x100>
	}
	else if(data == 0x23)
   12244:	80 91 ce 04 	lds	r24, 0x04CE
   12248:	83 32       	cpi	r24, 0x23	; 35
   1224a:	91 f4       	brne	.+36     	; 0x12270 <__vector_51+0x88>
	{
		flag = 2;
   1224c:	82 e0       	ldi	r24, 0x02	; 2
   1224e:	80 93 f3 02 	sts	0x02F3, r24
		strcpy(hab, tmp1);
   12252:	83 e9       	ldi	r24, 0x93	; 147
   12254:	94 e0       	ldi	r25, 0x04	; 4
   12256:	2e ef       	ldi	r18, 0xFE	; 254
   12258:	34 e0       	ldi	r19, 0x04	; 4
   1225a:	b9 01       	movw	r22, r18
   1225c:	0e 94 ea 99 	call	0x133d4	; 0x133d4 <strcpy>
		strcpy(ani, tmp2);
   12260:	8c e4       	ldi	r24, 0x4C	; 76
   12262:	94 e0       	ldi	r25, 0x04	; 4
   12264:	2e ea       	ldi	r18, 0xAE	; 174
   12266:	34 e0       	ldi	r19, 0x04	; 4
   12268:	b9 01       	movw	r22, r18
   1226a:	0e 94 ea 99 	call	0x133d4	; 0x133d4 <strcpy>
   1226e:	3c c0       	rjmp	.+120    	; 0x122e8 <__vector_51+0x100>
	}
	else if(count > pos && flag == FALSE)
   12270:	90 91 47 04 	lds	r25, 0x0447
   12274:	80 91 f2 02 	lds	r24, 0x02F2
   12278:	89 17       	cp	r24, r25
   1227a:	d8 f4       	brcc	.+54     	; 0x122b2 <__vector_51+0xca>
   1227c:	80 91 f3 02 	lds	r24, 0x02F3
   12280:	88 23       	and	r24, r24
   12282:	b9 f4       	brne	.+46     	; 0x122b2 <__vector_51+0xca>
	{
		tmp2[a]=data;
   12284:	80 91 48 04 	lds	r24, 0x0448
   12288:	88 2f       	mov	r24, r24
   1228a:	90 e0       	ldi	r25, 0x00	; 0
   1228c:	20 91 ce 04 	lds	r18, 0x04CE
   12290:	82 55       	subi	r24, 0x52	; 82
   12292:	9b 4f       	sbci	r25, 0xFB	; 251
   12294:	fc 01       	movw	r30, r24
   12296:	20 83       	st	Z, r18
		a++;
   12298:	80 91 48 04 	lds	r24, 0x0448
   1229c:	8f 5f       	subi	r24, 0xFF	; 255
   1229e:	80 93 48 04 	sts	0x0448, r24
		count++;
   122a2:	80 91 47 04 	lds	r24, 0x0447
   122a6:	8f 5f       	subi	r24, 0xFF	; 255
   122a8:	80 93 47 04 	sts	0x0447, r24
		flag = FALSE;
   122ac:	10 92 f3 02 	sts	0x02F3, r1
   122b0:	1b c0       	rjmp	.+54     	; 0x122e8 <__vector_51+0x100>
	}
	else if(flag==TRUE)
   122b2:	80 91 f3 02 	lds	r24, 0x02F3
   122b6:	81 30       	cpi	r24, 0x01	; 1
   122b8:	b9 f4       	brne	.+46     	; 0x122e8 <__vector_51+0x100>
	{
		tmp1[h]=data;
   122ba:	80 91 49 04 	lds	r24, 0x0449
   122be:	88 2f       	mov	r24, r24
   122c0:	90 e0       	ldi	r25, 0x00	; 0
   122c2:	20 91 ce 04 	lds	r18, 0x04CE
   122c6:	82 50       	subi	r24, 0x02	; 2
   122c8:	9b 4f       	sbci	r25, 0xFB	; 251
   122ca:	fc 01       	movw	r30, r24
   122cc:	20 83       	st	Z, r18
		h++;
   122ce:	80 91 49 04 	lds	r24, 0x0449
   122d2:	8f 5f       	subi	r24, 0xFF	; 255
   122d4:	80 93 49 04 	sts	0x0449, r24
		count++;
   122d8:	80 91 47 04 	lds	r24, 0x0447
   122dc:	8f 5f       	subi	r24, 0xFF	; 255
   122de:	80 93 47 04 	sts	0x0447, r24
		flag = TRUE;
   122e2:	81 e0       	ldi	r24, 0x01	; 1
   122e4:	80 93 f3 02 	sts	0x02F3, r24
	}
}
   122e8:	df 91       	pop	r29
   122ea:	cf 91       	pop	r28
   122ec:	ff 91       	pop	r31
   122ee:	ef 91       	pop	r30
   122f0:	bf 91       	pop	r27
   122f2:	af 91       	pop	r26
   122f4:	9f 91       	pop	r25
   122f6:	8f 91       	pop	r24
   122f8:	7f 91       	pop	r23
   122fa:	6f 91       	pop	r22
   122fc:	5f 91       	pop	r21
   122fe:	4f 91       	pop	r20
   12300:	3f 91       	pop	r19
   12302:	2f 91       	pop	r18
   12304:	0f 90       	pop	r0
   12306:	00 92 5b 00 	sts	0x005B, r0
   1230a:	0f 90       	pop	r0
   1230c:	0f be       	out	0x3f, r0	; 63
   1230e:	0f 90       	pop	r0
   12310:	1f 90       	pop	r1
   12312:	18 95       	reti

00012314 <interrupt_switch_config>:
#include "node.c"
#include "uart.c"

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
   12314:	cf 93       	push	r28
   12316:	df 93       	push	r29
   12318:	cd b7       	in	r28, 0x3d	; 61
   1231a:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
   1231c:	8d e2       	ldi	r24, 0x2D	; 45
   1231e:	90 e0       	ldi	r25, 0x00	; 0
   12320:	2d e2       	ldi	r18, 0x2D	; 45
   12322:	30 e0       	ldi	r19, 0x00	; 0
   12324:	f9 01       	movw	r30, r18
   12326:	20 81       	ld	r18, Z
   12328:	2f 77       	andi	r18, 0x7F	; 127
   1232a:	fc 01       	movw	r30, r24
   1232c:	20 83       	st	Z, r18
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
   1232e:	8e e2       	ldi	r24, 0x2E	; 46
   12330:	90 e0       	ldi	r25, 0x00	; 0
   12332:	2e e2       	ldi	r18, 0x2E	; 46
   12334:	30 e0       	ldi	r19, 0x00	; 0
   12336:	f9 01       	movw	r30, r18
   12338:	20 81       	ld	r18, Z
   1233a:	20 68       	ori	r18, 0x80	; 128
   1233c:	fc 01       	movw	r30, r24
   1233e:	20 83       	st	Z, r18
}
   12340:	df 91       	pop	r29
   12342:	cf 91       	pop	r28
   12344:	08 95       	ret

00012346 <pick_assign>:

void pick_assign(int nxt_node)
{
   12346:	cf 93       	push	r28
   12348:	df 93       	push	r29
   1234a:	cd b7       	in	r28, 0x3d	; 61
   1234c:	de b7       	in	r29, 0x3e	; 62
   1234e:	e4 97       	sbiw	r28, 0x34	; 52
   12350:	0f b6       	in	r0, 0x3f	; 63
   12352:	f8 94       	cli
   12354:	de bf       	out	0x3e, r29	; 62
   12356:	0f be       	out	0x3f, r0	; 63
   12358:	cd bf       	out	0x3d, r28	; 61
   1235a:	9c ab       	sts	0x5c, r25
   1235c:	8b ab       	sts	0x5b, r24
	int left[6]={7,13,19,25,99,99};
   1235e:	ce 01       	movw	r24, r28
   12360:	03 96       	adiw	r24, 0x03	; 3
   12362:	24 ef       	ldi	r18, 0xF4	; 244
   12364:	32 e0       	ldi	r19, 0x02	; 2
   12366:	4c e0       	ldi	r20, 0x0C	; 12
   12368:	f9 01       	movw	r30, r18
   1236a:	00 80       	ld	r0, Z
   1236c:	2f 5f       	subi	r18, 0xFF	; 255
   1236e:	3f 4f       	sbci	r19, 0xFF	; 255
   12370:	fc 01       	movw	r30, r24
   12372:	00 82       	st	Z, r0
   12374:	01 96       	adiw	r24, 0x01	; 1
   12376:	41 50       	subi	r20, 0x01	; 1
   12378:	44 23       	and	r20, r20
   1237a:	b1 f7       	brne	.-20     	; 0x12368 <pick_assign+0x22>
	int right[6]={12,18,24,30,99,99};
   1237c:	ce 01       	movw	r24, r28
   1237e:	0f 96       	adiw	r24, 0x0f	; 15
   12380:	20 e0       	ldi	r18, 0x00	; 0
   12382:	33 e0       	ldi	r19, 0x03	; 3
   12384:	4c e0       	ldi	r20, 0x0C	; 12
   12386:	f9 01       	movw	r30, r18
   12388:	00 80       	ld	r0, Z
   1238a:	2f 5f       	subi	r18, 0xFF	; 255
   1238c:	3f 4f       	sbci	r19, 0xFF	; 255
   1238e:	fc 01       	movw	r30, r24
   12390:	00 82       	st	Z, r0
   12392:	01 96       	adiw	r24, 0x01	; 1
   12394:	41 50       	subi	r20, 0x01	; 1
   12396:	44 23       	and	r20, r20
   12398:	b1 f7       	brne	.-20     	; 0x12386 <pick_assign+0x40>
	int back[6]={2,3,4,5,99,99};
   1239a:	ce 01       	movw	r24, r28
   1239c:	4b 96       	adiw	r24, 0x1b	; 27
   1239e:	2c e0       	ldi	r18, 0x0C	; 12
   123a0:	33 e0       	ldi	r19, 0x03	; 3
   123a2:	4c e0       	ldi	r20, 0x0C	; 12
   123a4:	f9 01       	movw	r30, r18
   123a6:	00 80       	ld	r0, Z
   123a8:	2f 5f       	subi	r18, 0xFF	; 255
   123aa:	3f 4f       	sbci	r19, 0xFF	; 255
   123ac:	fc 01       	movw	r30, r24
   123ae:	00 82       	st	Z, r0
   123b0:	01 96       	adiw	r24, 0x01	; 1
   123b2:	41 50       	subi	r20, 0x01	; 1
   123b4:	44 23       	and	r20, r20
   123b6:	b1 f7       	brne	.-20     	; 0x123a4 <pick_assign+0x5e>
	int front[6]={32,33,34,35,99,99};
   123b8:	ce 01       	movw	r24, r28
   123ba:	87 96       	adiw	r24, 0x27	; 39
   123bc:	28 e1       	ldi	r18, 0x18	; 24
   123be:	33 e0       	ldi	r19, 0x03	; 3
   123c0:	4c e0       	ldi	r20, 0x0C	; 12
   123c2:	f9 01       	movw	r30, r18
   123c4:	00 80       	ld	r0, Z
   123c6:	2f 5f       	subi	r18, 0xFF	; 255
   123c8:	3f 4f       	sbci	r19, 0xFF	; 255
   123ca:	fc 01       	movw	r30, r24
   123cc:	00 82       	st	Z, r0
   123ce:	01 96       	adiw	r24, 0x01	; 1
   123d0:	41 50       	subi	r20, 0x01	; 1
   123d2:	44 23       	and	r20, r20
   123d4:	b1 f7       	brne	.-20     	; 0x123c2 <pick_assign+0x7c>
	int temp_var=0;
   123d6:	1a 82       	std	Y+2, r1	; 0x02
   123d8:	19 82       	std	Y+1, r1	; 0x01
	for(temp_var=0;temp_var<6;temp_var++)
   123da:	1a 82       	std	Y+2, r1	; 0x02
   123dc:	19 82       	std	Y+1, r1	; 0x01
   123de:	f9 c0       	rjmp	.+498    	; 0x125d2 <pick_assign+0x28c>
	{
		if(left[temp_var]==nxt_node)
   123e0:	89 81       	ldd	r24, Y+1	; 0x01
   123e2:	9a 81       	ldd	r25, Y+2	; 0x02
   123e4:	88 0f       	add	r24, r24
   123e6:	99 1f       	adc	r25, r25
   123e8:	9e 01       	movw	r18, r28
   123ea:	2f 5f       	subi	r18, 0xFF	; 255
   123ec:	3f 4f       	sbci	r19, 0xFF	; 255
   123ee:	82 0f       	add	r24, r18
   123f0:	93 1f       	adc	r25, r19
   123f2:	02 96       	adiw	r24, 0x02	; 2
   123f4:	fc 01       	movw	r30, r24
   123f6:	20 81       	ld	r18, Z
   123f8:	31 81       	ldd	r19, Z+1	; 0x01
   123fa:	8b a9       	sts	0x4b, r24
   123fc:	9c a9       	sts	0x4c, r25
   123fe:	28 17       	cp	r18, r24
   12400:	39 07       	cpc	r19, r25
   12402:	99 f4       	brne	.+38     	; 0x1242a <pick_assign+0xe4>
        {
			strcat(master_path,"1");
   12404:	85 e7       	ldi	r24, 0x75	; 117
   12406:	93 e0       	ldi	r25, 0x03	; 3
   12408:	9c 01       	movw	r18, r24
   1240a:	f9 01       	movw	r30, r18
   1240c:	01 90       	ld	r0, Z+
   1240e:	00 20       	and	r0, r0
   12410:	e9 f7       	brne	.-6      	; 0x1240c <pick_assign+0xc6>
   12412:	cf 01       	movw	r24, r30
   12414:	01 97       	sbiw	r24, 0x01	; 1
   12416:	82 1b       	sub	r24, r18
   12418:	93 0b       	sbc	r25, r19
   1241a:	8b 58       	subi	r24, 0x8B	; 139
   1241c:	9c 4f       	sbci	r25, 0xFC	; 252
   1241e:	21 e3       	ldi	r18, 0x31	; 49
   12420:	30 e0       	ldi	r19, 0x00	; 0
   12422:	fc 01       	movw	r30, r24
   12424:	31 83       	std	Z+1, r19	; 0x01
   12426:	20 83       	st	Z, r18
			return;
   12428:	da c0       	rjmp	.+436    	; 0x125de <pick_assign+0x298>
		}
		else if(right[temp_var]==nxt_node)
   1242a:	89 81       	ldd	r24, Y+1	; 0x01
   1242c:	9a 81       	ldd	r25, Y+2	; 0x02
   1242e:	88 0f       	add	r24, r24
   12430:	99 1f       	adc	r25, r25
   12432:	9e 01       	movw	r18, r28
   12434:	2f 5f       	subi	r18, 0xFF	; 255
   12436:	3f 4f       	sbci	r19, 0xFF	; 255
   12438:	82 0f       	add	r24, r18
   1243a:	93 1f       	adc	r25, r19
   1243c:	0e 96       	adiw	r24, 0x0e	; 14
   1243e:	fc 01       	movw	r30, r24
   12440:	20 81       	ld	r18, Z
   12442:	31 81       	ldd	r19, Z+1	; 0x01
   12444:	8b a9       	sts	0x4b, r24
   12446:	9c a9       	sts	0x4c, r25
   12448:	28 17       	cp	r18, r24
   1244a:	39 07       	cpc	r19, r25
   1244c:	99 f4       	brne	.+38     	; 0x12474 <pick_assign+0x12e>
       {
			strcat(master_path,"2");
   1244e:	85 e7       	ldi	r24, 0x75	; 117
   12450:	93 e0       	ldi	r25, 0x03	; 3
   12452:	9c 01       	movw	r18, r24
   12454:	f9 01       	movw	r30, r18
   12456:	01 90       	ld	r0, Z+
   12458:	00 20       	and	r0, r0
   1245a:	e9 f7       	brne	.-6      	; 0x12456 <pick_assign+0x110>
   1245c:	cf 01       	movw	r24, r30
   1245e:	01 97       	sbiw	r24, 0x01	; 1
   12460:	82 1b       	sub	r24, r18
   12462:	93 0b       	sbc	r25, r19
   12464:	8b 58       	subi	r24, 0x8B	; 139
   12466:	9c 4f       	sbci	r25, 0xFC	; 252
   12468:	22 e3       	ldi	r18, 0x32	; 50
   1246a:	30 e0       	ldi	r19, 0x00	; 0
   1246c:	fc 01       	movw	r30, r24
   1246e:	31 83       	std	Z+1, r19	; 0x01
   12470:	20 83       	st	Z, r18
			return;
   12472:	b5 c0       	rjmp	.+362    	; 0x125de <pick_assign+0x298>
	   }
		else if(back[temp_var]==nxt_node)
   12474:	89 81       	ldd	r24, Y+1	; 0x01
   12476:	9a 81       	ldd	r25, Y+2	; 0x02
   12478:	88 0f       	add	r24, r24
   1247a:	99 1f       	adc	r25, r25
   1247c:	9e 01       	movw	r18, r28
   1247e:	2f 5f       	subi	r18, 0xFF	; 255
   12480:	3f 4f       	sbci	r19, 0xFF	; 255
   12482:	82 0f       	add	r24, r18
   12484:	93 1f       	adc	r25, r19
   12486:	4a 96       	adiw	r24, 0x1a	; 26
   12488:	fc 01       	movw	r30, r24
   1248a:	20 81       	ld	r18, Z
   1248c:	31 81       	ldd	r19, Z+1	; 0x01
   1248e:	8b a9       	sts	0x4b, r24
   12490:	9c a9       	sts	0x4c, r25
   12492:	28 17       	cp	r18, r24
   12494:	39 07       	cpc	r19, r25
   12496:	99 f4       	brne	.+38     	; 0x124be <pick_assign+0x178>
       {
			strcat(master_path,"3");
   12498:	85 e7       	ldi	r24, 0x75	; 117
   1249a:	93 e0       	ldi	r25, 0x03	; 3
   1249c:	9c 01       	movw	r18, r24
   1249e:	f9 01       	movw	r30, r18
   124a0:	01 90       	ld	r0, Z+
   124a2:	00 20       	and	r0, r0
   124a4:	e9 f7       	brne	.-6      	; 0x124a0 <pick_assign+0x15a>
   124a6:	cf 01       	movw	r24, r30
   124a8:	01 97       	sbiw	r24, 0x01	; 1
   124aa:	82 1b       	sub	r24, r18
   124ac:	93 0b       	sbc	r25, r19
   124ae:	8b 58       	subi	r24, 0x8B	; 139
   124b0:	9c 4f       	sbci	r25, 0xFC	; 252
   124b2:	23 e3       	ldi	r18, 0x33	; 51
   124b4:	30 e0       	ldi	r19, 0x00	; 0
   124b6:	fc 01       	movw	r30, r24
   124b8:	31 83       	std	Z+1, r19	; 0x01
   124ba:	20 83       	st	Z, r18
			return;
   124bc:	90 c0       	rjmp	.+288    	; 0x125de <pick_assign+0x298>
	   }
		else if(nxt_node==1)
   124be:	8b a9       	sts	0x4b, r24
   124c0:	9c a9       	sts	0x4c, r25
   124c2:	81 30       	cpi	r24, 0x01	; 1
   124c4:	91 05       	cpc	r25, r1
   124c6:	99 f4       	brne	.+38     	; 0x124ee <pick_assign+0x1a8>
        {
			strcat(master_path,"4");// first node
   124c8:	85 e7       	ldi	r24, 0x75	; 117
   124ca:	93 e0       	ldi	r25, 0x03	; 3
   124cc:	9c 01       	movw	r18, r24
   124ce:	f9 01       	movw	r30, r18
   124d0:	01 90       	ld	r0, Z+
   124d2:	00 20       	and	r0, r0
   124d4:	e9 f7       	brne	.-6      	; 0x124d0 <pick_assign+0x18a>
   124d6:	cf 01       	movw	r24, r30
   124d8:	01 97       	sbiw	r24, 0x01	; 1
   124da:	82 1b       	sub	r24, r18
   124dc:	93 0b       	sbc	r25, r19
   124de:	8b 58       	subi	r24, 0x8B	; 139
   124e0:	9c 4f       	sbci	r25, 0xFC	; 252
   124e2:	24 e3       	ldi	r18, 0x34	; 52
   124e4:	30 e0       	ldi	r19, 0x00	; 0
   124e6:	fc 01       	movw	r30, r24
   124e8:	31 83       	std	Z+1, r19	; 0x01
   124ea:	20 83       	st	Z, r18
			return;
   124ec:	78 c0       	rjmp	.+240    	; 0x125de <pick_assign+0x298>
		}
		else if(nxt_node==6)
   124ee:	8b a9       	sts	0x4b, r24
   124f0:	9c a9       	sts	0x4c, r25
   124f2:	86 30       	cpi	r24, 0x06	; 6
   124f4:	91 05       	cpc	r25, r1
   124f6:	99 f4       	brne	.+38     	; 0x1251e <pick_assign+0x1d8>
        {
			strcat(master_path,"5");// first row last col
   124f8:	85 e7       	ldi	r24, 0x75	; 117
   124fa:	93 e0       	ldi	r25, 0x03	; 3
   124fc:	9c 01       	movw	r18, r24
   124fe:	f9 01       	movw	r30, r18
   12500:	01 90       	ld	r0, Z+
   12502:	00 20       	and	r0, r0
   12504:	e9 f7       	brne	.-6      	; 0x12500 <pick_assign+0x1ba>
   12506:	cf 01       	movw	r24, r30
   12508:	01 97       	sbiw	r24, 0x01	; 1
   1250a:	82 1b       	sub	r24, r18
   1250c:	93 0b       	sbc	r25, r19
   1250e:	8b 58       	subi	r24, 0x8B	; 139
   12510:	9c 4f       	sbci	r25, 0xFC	; 252
   12512:	25 e3       	ldi	r18, 0x35	; 53
   12514:	30 e0       	ldi	r19, 0x00	; 0
   12516:	fc 01       	movw	r30, r24
   12518:	31 83       	std	Z+1, r19	; 0x01
   1251a:	20 83       	st	Z, r18
			return;
   1251c:	60 c0       	rjmp	.+192    	; 0x125de <pick_assign+0x298>
		}
		else if(nxt_node==31)//
   1251e:	8b a9       	sts	0x4b, r24
   12520:	9c a9       	sts	0x4c, r25
   12522:	8f 31       	cpi	r24, 0x1F	; 31
   12524:	91 05       	cpc	r25, r1
   12526:	99 f4       	brne	.+38     	; 0x1254e <pick_assign+0x208>
		{
			strcat(master_path,"6");//last row first col
   12528:	85 e7       	ldi	r24, 0x75	; 117
   1252a:	93 e0       	ldi	r25, 0x03	; 3
   1252c:	9c 01       	movw	r18, r24
   1252e:	f9 01       	movw	r30, r18
   12530:	01 90       	ld	r0, Z+
   12532:	00 20       	and	r0, r0
   12534:	e9 f7       	brne	.-6      	; 0x12530 <pick_assign+0x1ea>
   12536:	cf 01       	movw	r24, r30
   12538:	01 97       	sbiw	r24, 0x01	; 1
   1253a:	82 1b       	sub	r24, r18
   1253c:	93 0b       	sbc	r25, r19
   1253e:	8b 58       	subi	r24, 0x8B	; 139
   12540:	9c 4f       	sbci	r25, 0xFC	; 252
   12542:	26 e3       	ldi	r18, 0x36	; 54
   12544:	30 e0       	ldi	r19, 0x00	; 0
   12546:	fc 01       	movw	r30, r24
   12548:	31 83       	std	Z+1, r19	; 0x01
   1254a:	20 83       	st	Z, r18
			return;
   1254c:	48 c0       	rjmp	.+144    	; 0x125de <pick_assign+0x298>
		}
		else if(nxt_node==36)
   1254e:	8b a9       	sts	0x4b, r24
   12550:	9c a9       	sts	0x4c, r25
   12552:	84 32       	cpi	r24, 0x24	; 36
   12554:	91 05       	cpc	r25, r1
   12556:	99 f4       	brne	.+38     	; 0x1257e <pick_assign+0x238>
		{
			strcat(master_path,"7");//last row last col
   12558:	85 e7       	ldi	r24, 0x75	; 117
   1255a:	93 e0       	ldi	r25, 0x03	; 3
   1255c:	9c 01       	movw	r18, r24
   1255e:	f9 01       	movw	r30, r18
   12560:	01 90       	ld	r0, Z+
   12562:	00 20       	and	r0, r0
   12564:	e9 f7       	brne	.-6      	; 0x12560 <pick_assign+0x21a>
   12566:	cf 01       	movw	r24, r30
   12568:	01 97       	sbiw	r24, 0x01	; 1
   1256a:	82 1b       	sub	r24, r18
   1256c:	93 0b       	sbc	r25, r19
   1256e:	8b 58       	subi	r24, 0x8B	; 139
   12570:	9c 4f       	sbci	r25, 0xFC	; 252
   12572:	27 e3       	ldi	r18, 0x37	; 55
   12574:	30 e0       	ldi	r19, 0x00	; 0
   12576:	fc 01       	movw	r30, r24
   12578:	31 83       	std	Z+1, r19	; 0x01
   1257a:	20 83       	st	Z, r18
			return;
   1257c:	30 c0       	rjmp	.+96     	; 0x125de <pick_assign+0x298>
		}
		else if(front[temp_var]==nxt_node)
   1257e:	89 81       	ldd	r24, Y+1	; 0x01
   12580:	9a 81       	ldd	r25, Y+2	; 0x02
   12582:	88 0f       	add	r24, r24
   12584:	99 1f       	adc	r25, r25
   12586:	9e 01       	movw	r18, r28
   12588:	2f 5f       	subi	r18, 0xFF	; 255
   1258a:	3f 4f       	sbci	r19, 0xFF	; 255
   1258c:	82 0f       	add	r24, r18
   1258e:	93 1f       	adc	r25, r19
   12590:	86 96       	adiw	r24, 0x26	; 38
   12592:	fc 01       	movw	r30, r24
   12594:	20 81       	ld	r18, Z
   12596:	31 81       	ldd	r19, Z+1	; 0x01
   12598:	8b a9       	sts	0x4b, r24
   1259a:	9c a9       	sts	0x4c, r25
   1259c:	28 17       	cp	r18, r24
   1259e:	39 07       	cpc	r19, r25
   125a0:	99 f4       	brne	.+38     	; 0x125c8 <pick_assign+0x282>
		{
			strcat(master_path,"8");
   125a2:	85 e7       	ldi	r24, 0x75	; 117
   125a4:	93 e0       	ldi	r25, 0x03	; 3
   125a6:	9c 01       	movw	r18, r24
   125a8:	f9 01       	movw	r30, r18
   125aa:	01 90       	ld	r0, Z+
   125ac:	00 20       	and	r0, r0
   125ae:	e9 f7       	brne	.-6      	; 0x125aa <pick_assign+0x264>
   125b0:	cf 01       	movw	r24, r30
   125b2:	01 97       	sbiw	r24, 0x01	; 1
   125b4:	82 1b       	sub	r24, r18
   125b6:	93 0b       	sbc	r25, r19
   125b8:	8b 58       	subi	r24, 0x8B	; 139
   125ba:	9c 4f       	sbci	r25, 0xFC	; 252
   125bc:	28 e3       	ldi	r18, 0x38	; 56
   125be:	30 e0       	ldi	r19, 0x00	; 0
   125c0:	fc 01       	movw	r30, r24
   125c2:	31 83       	std	Z+1, r19	; 0x01
   125c4:	20 83       	st	Z, r18
			return;
   125c6:	0b c0       	rjmp	.+22     	; 0x125de <pick_assign+0x298>
	int left[6]={7,13,19,25,99,99};
	int right[6]={12,18,24,30,99,99};
	int back[6]={2,3,4,5,99,99};
	int front[6]={32,33,34,35,99,99};
	int temp_var=0;
	for(temp_var=0;temp_var<6;temp_var++)
   125c8:	89 81       	ldd	r24, Y+1	; 0x01
   125ca:	9a 81       	ldd	r25, Y+2	; 0x02
   125cc:	01 96       	adiw	r24, 0x01	; 1
   125ce:	9a 83       	std	Y+2, r25	; 0x02
   125d0:	89 83       	std	Y+1, r24	; 0x01
   125d2:	89 81       	ldd	r24, Y+1	; 0x01
   125d4:	9a 81       	ldd	r25, Y+2	; 0x02
   125d6:	86 30       	cpi	r24, 0x06	; 6
   125d8:	91 05       	cpc	r25, r1
   125da:	0c f4       	brge	.+2      	; 0x125de <pick_assign+0x298>
   125dc:	01 cf       	rjmp	.-510    	; 0x123e0 <pick_assign+0x9a>
		{
			strcat(master_path,"8");
			return;
		}
	}
}
   125de:	e4 96       	adiw	r28, 0x34	; 52
   125e0:	0f b6       	in	r0, 0x3f	; 63
   125e2:	f8 94       	cli
   125e4:	de bf       	out	0x3e, r29	; 62
   125e6:	0f be       	out	0x3f, r0	; 63
   125e8:	cd bf       	out	0x3d, r28	; 61
   125ea:	df 91       	pop	r29
   125ec:	cf 91       	pop	r28
   125ee:	08 95       	ret

000125f0 <main>:

int main()
{
   125f0:	0f 93       	push	r16
   125f2:	1f 93       	push	r17
   125f4:	cf 93       	push	r28
   125f6:	df 93       	push	r29
   125f8:	cd b7       	in	r28, 0x3d	; 61
   125fa:	de b7       	in	r29, 0x3e	; 62
   125fc:	c9 55       	subi	r28, 0x59	; 89
   125fe:	d0 40       	sbci	r29, 0x00	; 0
   12600:	0f b6       	in	r0, 0x3f	; 63
   12602:	f8 94       	cli
   12604:	de bf       	out	0x3e, r29	; 62
   12606:	0f be       	out	0x3f, r0	; 63
   12608:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
   1260a:	0e 94 af 86 	call	0x10d5e	; 0x10d5e <lcd_port_config>
	init_devices();
   1260e:	0e 94 df 88 	call	0x111be	; 0x111be <init_devices>
	lcd_set_4bit();
   12612:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_set_4bit>
	lcd_init();
   12616:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_init>
	int lena,lenb,lenp;
	int present_node=0, next_node=0,t_count=0;
   1261a:	1a 82       	std	Y+2, r1	; 0x02
   1261c:	19 82       	std	Y+1, r1	; 0x01
   1261e:	1c 82       	std	Y+4, r1	; 0x04
   12620:	1b 82       	std	Y+3, r1	; 0x03
   12622:	1a 8a       	std	Y+18, r1	; 0x12
   12624:	19 8a       	std	Y+17, r1	; 0x11
	int switch_pressed = 0, mapped=0,size=0,an_count=0,hab_count=0,var=0,complete=0;
   12626:	1e 82       	std	Y+6, r1	; 0x06
   12628:	1d 82       	std	Y+5, r1	; 0x05
   1262a:	18 86       	std	Y+8, r1	; 0x08
   1262c:	1f 82       	std	Y+7, r1	; 0x07
   1262e:	1c 8a       	std	Y+20, r1	; 0x14
   12630:	1b 8a       	std	Y+19, r1	; 0x13
   12632:	1a 86       	std	Y+10, r1	; 0x0a
   12634:	19 86       	std	Y+9, r1	; 0x09
   12636:	1c 86       	std	Y+12, r1	; 0x0c
   12638:	1b 86       	std	Y+11, r1	; 0x0b
   1263a:	1e 86       	std	Y+14, r1	; 0x0e
   1263c:	1d 86       	std	Y+13, r1	; 0x0d
   1263e:	18 8a       	std	Y+16, r1	; 0x10
   12640:	1f 86       	std	Y+15, r1	; 0x0f
	char *p;
	char animal[]="A1, F1, F3, F5, A5";
   12642:	ce 01       	movw	r24, r28
   12644:	c9 96       	adiw	r24, 0x39	; 57
   12646:	24 e2       	ldi	r18, 0x24	; 36
   12648:	33 e0       	ldi	r19, 0x03	; 3
   1264a:	43 e1       	ldi	r20, 0x13	; 19
   1264c:	f9 01       	movw	r30, r18
   1264e:	00 80       	ld	r0, Z
   12650:	2f 5f       	subi	r18, 0xFF	; 255
   12652:	3f 4f       	sbci	r19, 0xFF	; 255
   12654:	fc 01       	movw	r30, r24
   12656:	00 82       	st	Z, r0
   12658:	01 96       	adiw	r24, 0x01	; 1
   1265a:	41 50       	subi	r20, 0x01	; 1
   1265c:	44 23       	and	r20, r20
   1265e:	b1 f7       	brne	.-20     	; 0x1264c <main+0x5c>
	char habit[]="4, 7, 4, 7, 1";
   12660:	ce 01       	movw	r24, r28
   12662:	84 5b       	subi	r24, 0xB4	; 180
   12664:	9f 4f       	sbci	r25, 0xFF	; 255
   12666:	27 e3       	ldi	r18, 0x37	; 55
   12668:	33 e0       	ldi	r19, 0x03	; 3
   1266a:	4e e0       	ldi	r20, 0x0E	; 14
   1266c:	f9 01       	movw	r30, r18
   1266e:	00 80       	ld	r0, Z
   12670:	2f 5f       	subi	r18, 0xFF	; 255
   12672:	3f 4f       	sbci	r19, 0xFF	; 255
   12674:	fc 01       	movw	r30, r24
   12676:	00 82       	st	Z, r0
   12678:	01 96       	adiw	r24, 0x01	; 1
   1267a:	41 50       	subi	r20, 0x01	; 1
   1267c:	44 23       	and	r20, r20
   1267e:	b1 f7       	brne	.-20     	; 0x1266c <main+0x7c>
	path_fin=0;
   12680:	10 92 3e 04 	sts	0x043E, r1
   12684:	10 92 3d 04 	sts	0x043D, r1
	halt=0;
   12688:	10 92 74 03 	sts	0x0374, r1
   1268c:	10 92 73 03 	sts	0x0373, r1
	defaulty();
   12690:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <defaulty>
	while(!complete)
   12694:	a3 c1       	rjmp	.+838    	; 0x129dc <main+0x3ec>
	{	
		if((PINE & 0x80) == 0x80) //when BOOT switch is not pressed
   12696:	8c e2       	ldi	r24, 0x2C	; 44
   12698:	90 e0       	ldi	r25, 0x00	; 0
   1269a:	fc 01       	movw	r30, r24
   1269c:	80 81       	ld	r24, Z
   1269e:	88 23       	and	r24, r24
   126a0:	0c f0       	brlt	.+2      	; 0x126a4 <main+0xb4>
   126a2:	88 c1       	rjmp	.+784    	; 0x129b4 <main+0x3c4>
		{	
			if(switch_pressed==1)//after press
   126a4:	8d 81       	ldd	r24, Y+5	; 0x05
   126a6:	9e 81       	ldd	r25, Y+6	; 0x06
   126a8:	81 30       	cpi	r24, 0x01	; 1
   126aa:	91 05       	cpc	r25, r1
   126ac:	09 f0       	breq	.+2      	; 0x126b0 <main+0xc0>
   126ae:	96 c1       	rjmp	.+812    	; 0x129dc <main+0x3ec>
			{
				if(!mapped)
   126b0:	8f 81       	ldd	r24, Y+7	; 0x07
   126b2:	98 85       	ldd	r25, Y+8	; 0x08
   126b4:	00 97       	sbiw	r24, 0x00	; 0
   126b6:	09 f0       	breq	.+2      	; 0x126ba <main+0xca>
   126b8:	dc c0       	rjmp	.+440    	; 0x12872 <main+0x282>
				{	
					mapped=1;
   126ba:	81 e0       	ldi	r24, 0x01	; 1
   126bc:	90 e0       	ldi	r25, 0x00	; 0
   126be:	98 87       	std	Y+8, r25	; 0x08
   126c0:	8f 83       	std	Y+7, r24	; 0x07
					node=0;
   126c2:	10 92 72 03 	sts	0x0372, r1
   126c6:	10 92 71 03 	sts	0x0371, r1
					node_map(ani,0,&lena);
   126ca:	8c e4       	ldi	r24, 0x4C	; 76
   126cc:	94 e0       	ldi	r25, 0x04	; 4
   126ce:	9e 01       	movw	r18, r28
   126d0:	2d 5c       	subi	r18, 0xCD	; 205
   126d2:	3f 4f       	sbci	r19, 0xFF	; 255
   126d4:	60 e0       	ldi	r22, 0x00	; 0
   126d6:	70 e0       	ldi	r23, 0x00	; 0
   126d8:	a9 01       	movw	r20, r18
   126da:	0e 94 42 90 	call	0x12084	; 0x12084 <node_map>
					node_map(hab,1,&lenb);
   126de:	83 e9       	ldi	r24, 0x93	; 147
   126e0:	94 e0       	ldi	r25, 0x04	; 4
   126e2:	9e 01       	movw	r18, r28
   126e4:	2b 5c       	subi	r18, 0xCB	; 203
   126e6:	3f 4f       	sbci	r19, 0xFF	; 255
   126e8:	61 e0       	ldi	r22, 0x01	; 1
   126ea:	70 e0       	ldi	r23, 0x00	; 0
   126ec:	a9 01       	movw	r20, r18
   126ee:	0e 94 42 90 	call	0x12084	; 0x12084 <node_map>
					size=lena;
   126f2:	8b a9       	sts	0x4b, r24
   126f4:	9c a9       	sts	0x4c, r25
   126f6:	9c 8b       	std	Y+20, r25	; 0x14
   126f8:	8b 8b       	std	Y+19, r24	; 0x13
					size=size*2-1;
   126fa:	8b 89       	ldd	r24, Y+19	; 0x13
   126fc:	9c 89       	ldd	r25, Y+20	; 0x14
   126fe:	88 0f       	add	r24, r24
   12700:	99 1f       	adc	r25, r25
   12702:	01 97       	sbiw	r24, 0x01	; 1
   12704:	9c 8b       	std	Y+20, r25	; 0x14
   12706:	8b 8b       	std	Y+19, r24	; 0x13
					p= dijkstra(1,aniloc[0],&lenp);
   12708:	40 91 d2 04 	lds	r20, 0x04D2
   1270c:	50 91 d3 04 	lds	r21, 0x04D3
   12710:	9e 01       	movw	r18, r28
   12712:	29 5c       	subi	r18, 0xC9	; 201
   12714:	3f 4f       	sbci	r19, 0xFF	; 255
   12716:	81 e0       	ldi	r24, 0x01	; 1
   12718:	90 e0       	ldi	r25, 0x00	; 0
   1271a:	ba 01       	movw	r22, r20
   1271c:	a9 01       	movw	r20, r18
   1271e:	0e 94 ec 8e 	call	0x11dd8	; 0x11dd8 <dijkstra>
   12722:	9e 8b       	std	Y+22, r25	; 0x16
   12724:	8d 8b       	std	Y+21, r24	; 0x15
					strcat(master_path,p);
   12726:	85 e7       	ldi	r24, 0x75	; 117
   12728:	93 e0       	ldi	r25, 0x03	; 3
   1272a:	2d 89       	ldd	r18, Y+21	; 0x15
   1272c:	3e 89       	ldd	r19, Y+22	; 0x16
   1272e:	b9 01       	movw	r22, r18
   12730:	0e 94 df 99 	call	0x133be	; 0x133be <strcat>
					pick_assign(aniloc[0]);
   12734:	80 91 d2 04 	lds	r24, 0x04D2
   12738:	90 91 d3 04 	lds	r25, 0x04D3
   1273c:	0e 94 a3 91 	call	0x12346	; 0x12346 <pick_assign>
					free(p);
   12740:	8d 89       	ldd	r24, Y+21	; 0x15
   12742:	9e 89       	ldd	r25, Y+22	; 0x16
   12744:	0e 94 58 98 	call	0x130b0	; 0x130b0 <free>
					for(var=0;var<size;var++)
   12748:	1e 86       	std	Y+14, r1	; 0x0e
   1274a:	1d 86       	std	Y+13, r1	; 0x0d
   1274c:	78 c0       	rjmp	.+240    	; 0x1283e <main+0x24e>
					{
						if(var%2==0)
   1274e:	8d 85       	ldd	r24, Y+13	; 0x0d
   12750:	9e 85       	ldd	r25, Y+14	; 0x0e
   12752:	81 70       	andi	r24, 0x01	; 1
   12754:	90 70       	andi	r25, 0x00	; 0
   12756:	00 97       	sbiw	r24, 0x00	; 0
   12758:	09 f5       	brne	.+66     	; 0x1279c <main+0x1ac>
						{
							present_node=aniloc[an_count];
   1275a:	89 85       	ldd	r24, Y+9	; 0x09
   1275c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1275e:	88 0f       	add	r24, r24
   12760:	99 1f       	adc	r25, r25
   12762:	8e 52       	subi	r24, 0x2E	; 46
   12764:	9b 4f       	sbci	r25, 0xFB	; 251
   12766:	fc 01       	movw	r30, r24
   12768:	80 81       	ld	r24, Z
   1276a:	91 81       	ldd	r25, Z+1	; 0x01
   1276c:	9a 83       	std	Y+2, r25	; 0x02
   1276e:	89 83       	std	Y+1, r24	; 0x01
							next_node=habloc[hab_count];
   12770:	8b 85       	ldd	r24, Y+11	; 0x0b
   12772:	9c 85       	ldd	r25, Y+12	; 0x0c
   12774:	88 0f       	add	r24, r24
   12776:	99 1f       	adc	r25, r25
   12778:	89 59       	subi	r24, 0x99	; 153
   1277a:	9b 4f       	sbci	r25, 0xFB	; 251
   1277c:	fc 01       	movw	r30, r24
   1277e:	80 81       	ld	r24, Z
   12780:	91 81       	ldd	r25, Z+1	; 0x01
   12782:	9c 83       	std	Y+4, r25	; 0x04
   12784:	8b 83       	std	Y+3, r24	; 0x03
							an_count++;
   12786:	89 85       	ldd	r24, Y+9	; 0x09
   12788:	9a 85       	ldd	r25, Y+10	; 0x0a
   1278a:	01 96       	adiw	r24, 0x01	; 1
   1278c:	9a 87       	std	Y+10, r25	; 0x0a
   1278e:	89 87       	std	Y+9, r24	; 0x09
							hab_count++;
   12790:	8b 85       	ldd	r24, Y+11	; 0x0b
   12792:	9c 85       	ldd	r25, Y+12	; 0x0c
   12794:	01 96       	adiw	r24, 0x01	; 1
   12796:	9c 87       	std	Y+12, r25	; 0x0c
   12798:	8b 87       	std	Y+11, r24	; 0x0b
   1279a:	17 c0       	rjmp	.+46     	; 0x127ca <main+0x1da>
						}
						else
						{
							present_node=habloc[hab_count-1];
   1279c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1279e:	9c 85       	ldd	r25, Y+12	; 0x0c
   127a0:	01 97       	sbiw	r24, 0x01	; 1
   127a2:	88 0f       	add	r24, r24
   127a4:	99 1f       	adc	r25, r25
   127a6:	89 59       	subi	r24, 0x99	; 153
   127a8:	9b 4f       	sbci	r25, 0xFB	; 251
   127aa:	fc 01       	movw	r30, r24
   127ac:	80 81       	ld	r24, Z
   127ae:	91 81       	ldd	r25, Z+1	; 0x01
   127b0:	9a 83       	std	Y+2, r25	; 0x02
   127b2:	89 83       	std	Y+1, r24	; 0x01
							next_node=aniloc[an_count];
   127b4:	89 85       	ldd	r24, Y+9	; 0x09
   127b6:	9a 85       	ldd	r25, Y+10	; 0x0a
   127b8:	88 0f       	add	r24, r24
   127ba:	99 1f       	adc	r25, r25
   127bc:	8e 52       	subi	r24, 0x2E	; 46
   127be:	9b 4f       	sbci	r25, 0xFB	; 251
   127c0:	fc 01       	movw	r30, r24
   127c2:	80 81       	ld	r24, Z
   127c4:	91 81       	ldd	r25, Z+1	; 0x01
   127c6:	9c 83       	std	Y+4, r25	; 0x04
   127c8:	8b 83       	std	Y+3, r24	; 0x03
						}
						p=dijkstra(present_node,next_node,&lenp);
   127ca:	89 81       	ldd	r24, Y+1	; 0x01
   127cc:	9a 81       	ldd	r25, Y+2	; 0x02
   127ce:	4b 81       	ldd	r20, Y+3	; 0x03
   127d0:	5c 81       	ldd	r21, Y+4	; 0x04
   127d2:	9e 01       	movw	r18, r28
   127d4:	29 5c       	subi	r18, 0xC9	; 201
   127d6:	3f 4f       	sbci	r19, 0xFF	; 255
   127d8:	ba 01       	movw	r22, r20
   127da:	a9 01       	movw	r20, r18
   127dc:	0e 94 ec 8e 	call	0x11dd8	; 0x11dd8 <dijkstra>
   127e0:	9e 8b       	std	Y+22, r25	; 0x16
   127e2:	8d 8b       	std	Y+21, r24	; 0x15
						strcat(master_path,p);
   127e4:	85 e7       	ldi	r24, 0x75	; 117
   127e6:	93 e0       	ldi	r25, 0x03	; 3
   127e8:	2d 89       	ldd	r18, Y+21	; 0x15
   127ea:	3e 89       	ldd	r19, Y+22	; 0x16
   127ec:	b9 01       	movw	r22, r18
   127ee:	0e 94 df 99 	call	0x133be	; 0x133be <strcat>
						free(p);
   127f2:	8d 89       	ldd	r24, Y+21	; 0x15
   127f4:	9e 89       	ldd	r25, Y+22	; 0x16
   127f6:	0e 94 58 98 	call	0x130b0	; 0x130b0 <free>
						if(var%2==0)
   127fa:	8d 85       	ldd	r24, Y+13	; 0x0d
   127fc:	9e 85       	ldd	r25, Y+14	; 0x0e
   127fe:	81 70       	andi	r24, 0x01	; 1
   12800:	90 70       	andi	r25, 0x00	; 0
   12802:	00 97       	sbiw	r24, 0x00	; 0
   12804:	99 f4       	brne	.+38     	; 0x1282c <main+0x23c>
						strcat(master_path,"D");
   12806:	85 e7       	ldi	r24, 0x75	; 117
   12808:	93 e0       	ldi	r25, 0x03	; 3
   1280a:	9c 01       	movw	r18, r24
   1280c:	f9 01       	movw	r30, r18
   1280e:	01 90       	ld	r0, Z+
   12810:	00 20       	and	r0, r0
   12812:	e9 f7       	brne	.-6      	; 0x1280e <main+0x21e>
   12814:	cf 01       	movw	r24, r30
   12816:	01 97       	sbiw	r24, 0x01	; 1
   12818:	82 1b       	sub	r24, r18
   1281a:	93 0b       	sbc	r25, r19
   1281c:	8b 58       	subi	r24, 0x8B	; 139
   1281e:	9c 4f       	sbci	r25, 0xFC	; 252
   12820:	24 e4       	ldi	r18, 0x44	; 68
   12822:	30 e0       	ldi	r19, 0x00	; 0
   12824:	fc 01       	movw	r30, r24
   12826:	31 83       	std	Z+1, r19	; 0x01
   12828:	20 83       	st	Z, r18
   1282a:	04 c0       	rjmp	.+8      	; 0x12834 <main+0x244>
						else
						{
							pick_assign(next_node);
   1282c:	8b 81       	ldd	r24, Y+3	; 0x03
   1282e:	9c 81       	ldd	r25, Y+4	; 0x04
   12830:	0e 94 a3 91 	call	0x12346	; 0x12346 <pick_assign>
					size=size*2-1;
					p= dijkstra(1,aniloc[0],&lenp);
					strcat(master_path,p);
					pick_assign(aniloc[0]);
					free(p);
					for(var=0;var<size;var++)
   12834:	8d 85       	ldd	r24, Y+13	; 0x0d
   12836:	9e 85       	ldd	r25, Y+14	; 0x0e
   12838:	01 96       	adiw	r24, 0x01	; 1
   1283a:	9e 87       	std	Y+14, r25	; 0x0e
   1283c:	8d 87       	std	Y+13, r24	; 0x0d
   1283e:	2d 85       	ldd	r18, Y+13	; 0x0d
   12840:	3e 85       	ldd	r19, Y+14	; 0x0e
   12842:	8b 89       	ldd	r24, Y+19	; 0x13
   12844:	9c 89       	ldd	r25, Y+20	; 0x14
   12846:	28 17       	cp	r18, r24
   12848:	39 07       	cpc	r19, r25
   1284a:	0c f4       	brge	.+2      	; 0x1284e <main+0x25e>
   1284c:	80 cf       	rjmp	.-256    	; 0x1274e <main+0x15e>
						else
						{
							pick_assign(next_node);
						}
					}
					strcat(master_path,"o");
   1284e:	85 e7       	ldi	r24, 0x75	; 117
   12850:	93 e0       	ldi	r25, 0x03	; 3
   12852:	9c 01       	movw	r18, r24
   12854:	f9 01       	movw	r30, r18
   12856:	01 90       	ld	r0, Z+
   12858:	00 20       	and	r0, r0
   1285a:	e9 f7       	brne	.-6      	; 0x12856 <main+0x266>
   1285c:	cf 01       	movw	r24, r30
   1285e:	01 97       	sbiw	r24, 0x01	; 1
   12860:	82 1b       	sub	r24, r18
   12862:	93 0b       	sbc	r25, r19
   12864:	8b 58       	subi	r24, 0x8B	; 139
   12866:	9c 4f       	sbci	r25, 0xFC	; 252
   12868:	2f e6       	ldi	r18, 0x6F	; 111
   1286a:	30 e0       	ldi	r19, 0x00	; 0
   1286c:	fc 01       	movw	r30, r24
   1286e:	31 83       	std	Z+1, r19	; 0x01
   12870:	20 83       	st	Z, r18
				}//end of mapping
				
				travel_path(master_path[0]);
   12872:	80 91 75 03 	lds	r24, 0x0375
   12876:	0e 94 3f 6b 	call	0xd67e	; 0xd67e <travel_path>
				TIMSK3=1;
   1287a:	81 e7       	ldi	r24, 0x71	; 113
   1287c:	90 e0       	ldi	r25, 0x00	; 0
   1287e:	21 e0       	ldi	r18, 0x01	; 1
   12880:	fc 01       	movw	r30, r24
   12882:	20 83       	st	Z, r18
				while(!path_fin)
   12884:	89 c0       	rjmp	.+274    	; 0x12998 <main+0x3a8>
				{
					if(!halt)
   12886:	80 91 73 03 	lds	r24, 0x0373
   1288a:	90 91 74 03 	lds	r25, 0x0374
   1288e:	00 97       	sbiw	r24, 0x00	; 0
   12890:	09 f0       	breq	.+2      	; 0x12894 <main+0x2a4>
   12892:	82 c0       	rjmp	.+260    	; 0x12998 <main+0x3a8>
					{
						line_follow();
   12894:	0e 94 c6 34 	call	0x698c	; 0x698c <line_follow>
   12898:	80 e0       	ldi	r24, 0x00	; 0
   1289a:	90 e0       	ldi	r25, 0x00	; 0
   1289c:	a8 e4       	ldi	r26, 0x48	; 72
   1289e:	b2 e4       	ldi	r27, 0x42	; 66
   128a0:	8f 8b       	std	Y+23, r24	; 0x17
   128a2:	98 8f       	std	Y+24, r25	; 0x18
   128a4:	a9 8f       	std	Y+25, r26	; 0x19
   128a6:	ba 8f       	std	Y+26, r27	; 0x1a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   128a8:	6f 89       	ldd	r22, Y+23	; 0x17
   128aa:	78 8d       	ldd	r23, Y+24	; 0x18
   128ac:	89 8d       	ldd	r24, Y+25	; 0x19
   128ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
   128b0:	26 e6       	ldi	r18, 0x66	; 102
   128b2:	36 e6       	ldi	r19, 0x66	; 102
   128b4:	46 e6       	ldi	r20, 0x66	; 102
   128b6:	55 e4       	ldi	r21, 0x45	; 69
   128b8:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   128bc:	dc 01       	movw	r26, r24
   128be:	cb 01       	movw	r24, r22
   128c0:	8b 8f       	std	Y+27, r24	; 0x1b
   128c2:	9c 8f       	std	Y+28, r25	; 0x1c
   128c4:	ad 8f       	std	Y+29, r26	; 0x1d
   128c6:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
   128c8:	11 e0       	ldi	r17, 0x01	; 1
   128ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
   128cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
   128ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
   128d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
   128d2:	20 e0       	ldi	r18, 0x00	; 0
   128d4:	30 e0       	ldi	r19, 0x00	; 0
   128d6:	40 e8       	ldi	r20, 0x80	; 128
   128d8:	5f e3       	ldi	r21, 0x3F	; 63
   128da:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   128de:	88 23       	and	r24, r24
   128e0:	0c f0       	brlt	.+2      	; 0x128e4 <main+0x2f4>
   128e2:	10 e0       	ldi	r17, 0x00	; 0
   128e4:	11 23       	and	r17, r17
   128e6:	29 f0       	breq	.+10     	; 0x128f2 <main+0x302>
		__ticks = 1;
   128e8:	81 e0       	ldi	r24, 0x01	; 1
   128ea:	90 e0       	ldi	r25, 0x00	; 0
   128ec:	98 a3       	lds	r25, 0x58
   128ee:	8f 8f       	std	Y+31, r24	; 0x1f
   128f0:	46 c0       	rjmp	.+140    	; 0x1297e <main+0x38e>
	else if (__tmp > 65535)
   128f2:	11 e0       	ldi	r17, 0x01	; 1
   128f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
   128f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
   128f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
   128fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
   128fc:	20 e0       	ldi	r18, 0x00	; 0
   128fe:	3f ef       	ldi	r19, 0xFF	; 255
   12900:	4f e7       	ldi	r20, 0x7F	; 127
   12902:	57 e4       	ldi	r21, 0x47	; 71
   12904:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   12908:	18 16       	cp	r1, r24
   1290a:	0c f0       	brlt	.+2      	; 0x1290e <main+0x31e>
   1290c:	10 e0       	ldi	r17, 0x00	; 0
   1290e:	11 23       	and	r17, r17
   12910:	61 f1       	breq	.+88     	; 0x1296a <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   12912:	6f 89       	ldd	r22, Y+23	; 0x17
   12914:	78 8d       	ldd	r23, Y+24	; 0x18
   12916:	89 8d       	ldd	r24, Y+25	; 0x19
   12918:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1291a:	20 e0       	ldi	r18, 0x00	; 0
   1291c:	30 e0       	ldi	r19, 0x00	; 0
   1291e:	40 e2       	ldi	r20, 0x20	; 32
   12920:	51 e4       	ldi	r21, 0x41	; 65
   12922:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   12926:	dc 01       	movw	r26, r24
   12928:	cb 01       	movw	r24, r22
   1292a:	bc 01       	movw	r22, r24
   1292c:	cd 01       	movw	r24, r26
   1292e:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   12932:	dc 01       	movw	r26, r24
   12934:	cb 01       	movw	r24, r22
   12936:	98 a3       	lds	r25, 0x58
   12938:	8f 8f       	std	Y+31, r24	; 0x1f
   1293a:	12 c0       	rjmp	.+36     	; 0x12960 <main+0x370>
   1293c:	80 e7       	ldi	r24, 0x70	; 112
   1293e:	91 e0       	ldi	r25, 0x01	; 1
   12940:	9a a3       	lds	r25, 0x5a
   12942:	89 a3       	lds	r24, 0x59
   12944:	89 a1       	lds	r24, 0x49
   12946:	9a a1       	lds	r25, 0x4a
   12948:	8c 01       	movw	r16, r24
   1294a:	c8 01       	movw	r24, r16
   1294c:	01 97       	sbiw	r24, 0x01	; 1
   1294e:	f1 f7       	brne	.-4      	; 0x1294c <main+0x35c>
   12950:	8c 01       	movw	r16, r24
   12952:	1a a3       	lds	r17, 0x5a
   12954:	09 a3       	lds	r16, 0x59
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   12956:	8f 8d       	ldd	r24, Y+31	; 0x1f
   12958:	98 a1       	lds	r25, 0x48
   1295a:	01 97       	sbiw	r24, 0x01	; 1
   1295c:	98 a3       	lds	r25, 0x58
   1295e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   12960:	8f 8d       	ldd	r24, Y+31	; 0x1f
   12962:	98 a1       	lds	r25, 0x48
   12964:	00 97       	sbiw	r24, 0x00	; 0
   12966:	51 f7       	brne	.-44     	; 0x1293c <main+0x34c>
   12968:	17 c0       	rjmp	.+46     	; 0x12998 <main+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1296a:	6b 8d       	ldd	r22, Y+27	; 0x1b
   1296c:	7c 8d       	ldd	r23, Y+28	; 0x1c
   1296e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   12970:	9e 8d       	ldd	r25, Y+30	; 0x1e
   12972:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   12976:	dc 01       	movw	r26, r24
   12978:	cb 01       	movw	r24, r22
   1297a:	98 a3       	lds	r25, 0x58
   1297c:	8f 8f       	std	Y+31, r24	; 0x1f
   1297e:	8f 8d       	ldd	r24, Y+31	; 0x1f
   12980:	98 a1       	lds	r25, 0x48
   12982:	9c a3       	lds	r25, 0x5c
   12984:	8b a3       	lds	r24, 0x5b
   12986:	8b a1       	lds	r24, 0x4b
   12988:	9c a1       	lds	r25, 0x4c
   1298a:	8c 01       	movw	r16, r24
   1298c:	f8 01       	movw	r30, r16
   1298e:	31 97       	sbiw	r30, 0x01	; 1
   12990:	f1 f7       	brne	.-4      	; 0x1298e <main+0x39e>
   12992:	8f 01       	movw	r16, r30
   12994:	1c a3       	lds	r17, 0x5c
   12996:	0b a3       	lds	r16, 0x5b
					strcat(master_path,"o");
				}//end of mapping
				
				travel_path(master_path[0]);
				TIMSK3=1;
				while(!path_fin)
   12998:	80 91 3d 04 	lds	r24, 0x043D
   1299c:	90 91 3e 04 	lds	r25, 0x043E
   129a0:	00 97       	sbiw	r24, 0x00	; 0
   129a2:	09 f4       	brne	.+2      	; 0x129a6 <main+0x3b6>
   129a4:	70 cf       	rjmp	.-288    	; 0x12886 <main+0x296>
					{
						line_follow();
						_delay_ms(50);
					}
				}
			stop();
   129a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			complete=1;
   129aa:	81 e0       	ldi	r24, 0x01	; 1
   129ac:	90 e0       	ldi	r25, 0x00	; 0
   129ae:	98 8b       	std	Y+16, r25	; 0x10
   129b0:	8f 87       	std	Y+15, r24	; 0x0f
   129b2:	14 c0       	rjmp	.+40     	; 0x129dc <main+0x3ec>
			}
		}							  	
		else//BOOT switch is pressed
		{
			lcd_cursor(1,1);
   129b4:	81 e0       	ldi	r24, 0x01	; 1
   129b6:	61 e0       	ldi	r22, 0x01	; 1
   129b8:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(ani);
   129bc:	8c e4       	ldi	r24, 0x4C	; 76
   129be:	94 e0       	ldi	r25, 0x04	; 4
   129c0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			lcd_cursor(2,1);
   129c4:	82 e0       	ldi	r24, 0x02	; 2
   129c6:	61 e0       	ldi	r22, 0x01	; 1
   129c8:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(hab);
   129cc:	83 e9       	ldi	r24, 0x93	; 147
   129ce:	94 e0       	ldi	r25, 0x04	; 4
   129d0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			switch_pressed=1;
   129d4:	81 e0       	ldi	r24, 0x01	; 1
   129d6:	90 e0       	ldi	r25, 0x00	; 0
   129d8:	9e 83       	std	Y+6, r25	; 0x06
   129da:	8d 83       	std	Y+5, r24	; 0x05
	char animal[]="A1, F1, F3, F5, A5";
	char habit[]="4, 7, 4, 7, 1";
	path_fin=0;
	halt=0;
	defaulty();
	while(!complete)
   129dc:	8f 85       	ldd	r24, Y+15	; 0x0f
   129de:	98 89       	ldd	r25, Y+16	; 0x10
   129e0:	00 97       	sbiw	r24, 0x00	; 0
   129e2:	09 f4       	brne	.+2      	; 0x129e6 <main+0x3f6>
   129e4:	58 ce       	rjmp	.-848    	; 0x12696 <main+0xa6>
			lcd_cursor(2,1);
			lcd_string(hab);
			switch_pressed=1;
		}
	}
	buzzer_on();
   129e6:	0e 94 e1 86 	call	0x10dc2	; 0x10dc2 <buzzer_on>
   129ea:	80 e0       	ldi	r24, 0x00	; 0
   129ec:	90 e4       	ldi	r25, 0x40	; 64
   129ee:	ac e9       	ldi	r26, 0x9C	; 156
   129f0:	b5 e4       	ldi	r27, 0x45	; 69
   129f2:	8d a3       	lds	r24, 0x5d
   129f4:	9e a3       	lds	r25, 0x5e
   129f6:	af a3       	lds	r26, 0x5f
   129f8:	b8 a7       	lds	r27, 0x78
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   129fa:	6d a1       	lds	r22, 0x4d
   129fc:	7e a1       	lds	r23, 0x4e
   129fe:	8f a1       	lds	r24, 0x4f
   12a00:	98 a5       	lds	r25, 0x68
   12a02:	26 e6       	ldi	r18, 0x66	; 102
   12a04:	36 e6       	ldi	r19, 0x66	; 102
   12a06:	46 e6       	ldi	r20, 0x66	; 102
   12a08:	55 e4       	ldi	r21, 0x45	; 69
   12a0a:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   12a0e:	dc 01       	movw	r26, r24
   12a10:	cb 01       	movw	r24, r22
   12a12:	89 a7       	lds	r24, 0x79
   12a14:	9a a7       	lds	r25, 0x7a
   12a16:	ab a7       	lds	r26, 0x7b
   12a18:	bc a7       	lds	r27, 0x7c
	if (__tmp < 1.0)
   12a1a:	11 e0       	ldi	r17, 0x01	; 1
   12a1c:	69 a5       	lds	r22, 0x69
   12a1e:	7a a5       	lds	r23, 0x6a
   12a20:	8b a5       	lds	r24, 0x6b
   12a22:	9c a5       	lds	r25, 0x6c
   12a24:	20 e0       	ldi	r18, 0x00	; 0
   12a26:	30 e0       	ldi	r19, 0x00	; 0
   12a28:	40 e8       	ldi	r20, 0x80	; 128
   12a2a:	5f e3       	ldi	r21, 0x3F	; 63
   12a2c:	0e 94 ea 95 	call	0x12bd4	; 0x12bd4 <__cmpsf2>
   12a30:	88 23       	and	r24, r24
   12a32:	0c f0       	brlt	.+2      	; 0x12a36 <main+0x446>
   12a34:	10 e0       	ldi	r17, 0x00	; 0
   12a36:	11 23       	and	r17, r17
   12a38:	29 f0       	breq	.+10     	; 0x12a44 <main+0x454>
		__ticks = 1;
   12a3a:	81 e0       	ldi	r24, 0x01	; 1
   12a3c:	90 e0       	ldi	r25, 0x00	; 0
   12a3e:	9e a7       	lds	r25, 0x7e
   12a40:	8d a7       	lds	r24, 0x7d
   12a42:	46 c0       	rjmp	.+140    	; 0x12ad0 <main+0x4e0>
	else if (__tmp > 65535)
   12a44:	11 e0       	ldi	r17, 0x01	; 1
   12a46:	69 a5       	lds	r22, 0x69
   12a48:	7a a5       	lds	r23, 0x6a
   12a4a:	8b a5       	lds	r24, 0x6b
   12a4c:	9c a5       	lds	r25, 0x6c
   12a4e:	20 e0       	ldi	r18, 0x00	; 0
   12a50:	3f ef       	ldi	r19, 0xFF	; 255
   12a52:	4f e7       	ldi	r20, 0x7F	; 127
   12a54:	57 e4       	ldi	r21, 0x47	; 71
   12a56:	0e 94 34 97 	call	0x12e68	; 0x12e68 <__gesf2>
   12a5a:	18 16       	cp	r1, r24
   12a5c:	0c f0       	brlt	.+2      	; 0x12a60 <main+0x470>
   12a5e:	10 e0       	ldi	r17, 0x00	; 0
   12a60:	11 23       	and	r17, r17
   12a62:	61 f1       	breq	.+88     	; 0x12abc <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   12a64:	6d a1       	lds	r22, 0x4d
   12a66:	7e a1       	lds	r23, 0x4e
   12a68:	8f a1       	lds	r24, 0x4f
   12a6a:	98 a5       	lds	r25, 0x68
   12a6c:	20 e0       	ldi	r18, 0x00	; 0
   12a6e:	30 e0       	ldi	r19, 0x00	; 0
   12a70:	40 e2       	ldi	r20, 0x20	; 32
   12a72:	51 e4       	ldi	r21, 0x41	; 65
   12a74:	0e 94 38 97 	call	0x12e70	; 0x12e70 <__mulsf3>
   12a78:	dc 01       	movw	r26, r24
   12a7a:	cb 01       	movw	r24, r22
   12a7c:	bc 01       	movw	r22, r24
   12a7e:	cd 01       	movw	r24, r26
   12a80:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   12a84:	dc 01       	movw	r26, r24
   12a86:	cb 01       	movw	r24, r22
   12a88:	9e a7       	lds	r25, 0x7e
   12a8a:	8d a7       	lds	r24, 0x7d
   12a8c:	12 c0       	rjmp	.+36     	; 0x12ab2 <main+0x4c2>
   12a8e:	80 e7       	ldi	r24, 0x70	; 112
   12a90:	91 e0       	ldi	r25, 0x01	; 1
   12a92:	98 ab       	sts	0x58, r25
   12a94:	8f a7       	lds	r24, 0x7f
   12a96:	8f a5       	lds	r24, 0x6f
   12a98:	98 a9       	sts	0x48, r25
   12a9a:	8c 01       	movw	r16, r24
   12a9c:	c8 01       	movw	r24, r16
   12a9e:	01 97       	sbiw	r24, 0x01	; 1
   12aa0:	f1 f7       	brne	.-4      	; 0x12a9e <main+0x4ae>
   12aa2:	8c 01       	movw	r16, r24
   12aa4:	18 ab       	sts	0x58, r17
   12aa6:	0f a7       	lds	r16, 0x7f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   12aa8:	8d a5       	lds	r24, 0x6d
   12aaa:	9e a5       	lds	r25, 0x6e
   12aac:	01 97       	sbiw	r24, 0x01	; 1
   12aae:	9e a7       	lds	r25, 0x7e
   12ab0:	8d a7       	lds	r24, 0x7d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   12ab2:	8d a5       	lds	r24, 0x6d
   12ab4:	9e a5       	lds	r25, 0x6e
   12ab6:	00 97       	sbiw	r24, 0x00	; 0
   12ab8:	51 f7       	brne	.-44     	; 0x12a8e <main+0x49e>
   12aba:	17 c0       	rjmp	.+46     	; 0x12aea <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   12abc:	69 a5       	lds	r22, 0x69
   12abe:	7a a5       	lds	r23, 0x6a
   12ac0:	8b a5       	lds	r24, 0x6b
   12ac2:	9c a5       	lds	r25, 0x6c
   12ac4:	0e 94 56 96 	call	0x12cac	; 0x12cac <__fixunssfsi>
   12ac8:	dc 01       	movw	r26, r24
   12aca:	cb 01       	movw	r24, r22
   12acc:	9e a7       	lds	r25, 0x7e
   12ace:	8d a7       	lds	r24, 0x7d
   12ad0:	8d a5       	lds	r24, 0x6d
   12ad2:	9e a5       	lds	r25, 0x6e
   12ad4:	9a ab       	sts	0x5a, r25
   12ad6:	89 ab       	sts	0x59, r24
   12ad8:	89 a9       	sts	0x49, r24
   12ada:	9a a9       	sts	0x4a, r25
   12adc:	8c 01       	movw	r16, r24
   12ade:	f8 01       	movw	r30, r16
   12ae0:	31 97       	sbiw	r30, 0x01	; 1
   12ae2:	f1 f7       	brne	.-4      	; 0x12ae0 <main+0x4f0>
   12ae4:	8f 01       	movw	r16, r30
   12ae6:	1a ab       	sts	0x5a, r17
   12ae8:	09 ab       	sts	0x59, r16
	_delay_ms(5000);
	buzzer_off();
   12aea:	0e 94 f8 86 	call	0x10df0	; 0x10df0 <buzzer_off>
   12aee:	80 e0       	ldi	r24, 0x00	; 0
   12af0:	90 e0       	ldi	r25, 0x00	; 0
   12af2:	c7 5a       	subi	r28, 0xA7	; 167
   12af4:	df 4f       	sbci	r29, 0xFF	; 255
   12af6:	0f b6       	in	r0, 0x3f	; 63
   12af8:	f8 94       	cli
   12afa:	de bf       	out	0x3e, r29	; 62
   12afc:	0f be       	out	0x3f, r0	; 63
   12afe:	cd bf       	out	0x3d, r28	; 61
   12b00:	df 91       	pop	r29
   12b02:	cf 91       	pop	r28
   12b04:	1f 91       	pop	r17
   12b06:	0f 91       	pop	r16
   12b08:	08 95       	ret

00012b0a <__subsf3>:
   12b0a:	50 58       	subi	r21, 0x80	; 128

00012b0c <__addsf3>:
   12b0c:	bb 27       	eor	r27, r27
   12b0e:	aa 27       	eor	r26, r26
   12b10:	0e d0       	rcall	.+28     	; 0x12b2e <__addsf3x>
   12b12:	70 c1       	rjmp	.+736    	; 0x12df4 <__fp_round>
   12b14:	61 d1       	rcall	.+706    	; 0x12dd8 <__fp_pscA>
   12b16:	30 f0       	brcs	.+12     	; 0x12b24 <__addsf3+0x18>
   12b18:	66 d1       	rcall	.+716    	; 0x12de6 <__fp_pscB>
   12b1a:	20 f0       	brcs	.+8      	; 0x12b24 <__addsf3+0x18>
   12b1c:	31 f4       	brne	.+12     	; 0x12b2a <__addsf3+0x1e>
   12b1e:	9f 3f       	cpi	r25, 0xFF	; 255
   12b20:	11 f4       	brne	.+4      	; 0x12b26 <__addsf3+0x1a>
   12b22:	1e f4       	brtc	.+6      	; 0x12b2a <__addsf3+0x1e>
   12b24:	56 c1       	rjmp	.+684    	; 0x12dd2 <__fp_nan>
   12b26:	0e f4       	brtc	.+2      	; 0x12b2a <__addsf3+0x1e>
   12b28:	e0 95       	com	r30
   12b2a:	e7 fb       	bst	r30, 7
   12b2c:	4c c1       	rjmp	.+664    	; 0x12dc6 <__fp_inf>

00012b2e <__addsf3x>:
   12b2e:	e9 2f       	mov	r30, r25
   12b30:	72 d1       	rcall	.+740    	; 0x12e16 <__fp_split3>
   12b32:	80 f3       	brcs	.-32     	; 0x12b14 <__addsf3+0x8>
   12b34:	ba 17       	cp	r27, r26
   12b36:	62 07       	cpc	r22, r18
   12b38:	73 07       	cpc	r23, r19
   12b3a:	84 07       	cpc	r24, r20
   12b3c:	95 07       	cpc	r25, r21
   12b3e:	18 f0       	brcs	.+6      	; 0x12b46 <__addsf3x+0x18>
   12b40:	71 f4       	brne	.+28     	; 0x12b5e <__addsf3x+0x30>
   12b42:	9e f5       	brtc	.+102    	; 0x12baa <__addsf3x+0x7c>
   12b44:	8a c1       	rjmp	.+788    	; 0x12e5a <__fp_zero>
   12b46:	0e f4       	brtc	.+2      	; 0x12b4a <__addsf3x+0x1c>
   12b48:	e0 95       	com	r30
   12b4a:	0b 2e       	mov	r0, r27
   12b4c:	ba 2f       	mov	r27, r26
   12b4e:	a0 2d       	mov	r26, r0
   12b50:	0b 01       	movw	r0, r22
   12b52:	b9 01       	movw	r22, r18
   12b54:	90 01       	movw	r18, r0
   12b56:	0c 01       	movw	r0, r24
   12b58:	ca 01       	movw	r24, r20
   12b5a:	a0 01       	movw	r20, r0
   12b5c:	11 24       	eor	r1, r1
   12b5e:	ff 27       	eor	r31, r31
   12b60:	59 1b       	sub	r21, r25
   12b62:	99 f0       	breq	.+38     	; 0x12b8a <__addsf3x+0x5c>
   12b64:	59 3f       	cpi	r21, 0xF9	; 249
   12b66:	50 f4       	brcc	.+20     	; 0x12b7c <__addsf3x+0x4e>
   12b68:	50 3e       	cpi	r21, 0xE0	; 224
   12b6a:	68 f1       	brcs	.+90     	; 0x12bc6 <__addsf3x+0x98>
   12b6c:	1a 16       	cp	r1, r26
   12b6e:	f0 40       	sbci	r31, 0x00	; 0
   12b70:	a2 2f       	mov	r26, r18
   12b72:	23 2f       	mov	r18, r19
   12b74:	34 2f       	mov	r19, r20
   12b76:	44 27       	eor	r20, r20
   12b78:	58 5f       	subi	r21, 0xF8	; 248
   12b7a:	f3 cf       	rjmp	.-26     	; 0x12b62 <__addsf3x+0x34>
   12b7c:	46 95       	lsr	r20
   12b7e:	37 95       	ror	r19
   12b80:	27 95       	ror	r18
   12b82:	a7 95       	ror	r26
   12b84:	f0 40       	sbci	r31, 0x00	; 0
   12b86:	53 95       	inc	r21
   12b88:	c9 f7       	brne	.-14     	; 0x12b7c <__addsf3x+0x4e>
   12b8a:	7e f4       	brtc	.+30     	; 0x12baa <__addsf3x+0x7c>
   12b8c:	1f 16       	cp	r1, r31
   12b8e:	ba 0b       	sbc	r27, r26
   12b90:	62 0b       	sbc	r22, r18
   12b92:	73 0b       	sbc	r23, r19
   12b94:	84 0b       	sbc	r24, r20
   12b96:	ba f0       	brmi	.+46     	; 0x12bc6 <__addsf3x+0x98>
   12b98:	91 50       	subi	r25, 0x01	; 1
   12b9a:	a1 f0       	breq	.+40     	; 0x12bc4 <__addsf3x+0x96>
   12b9c:	ff 0f       	add	r31, r31
   12b9e:	bb 1f       	adc	r27, r27
   12ba0:	66 1f       	adc	r22, r22
   12ba2:	77 1f       	adc	r23, r23
   12ba4:	88 1f       	adc	r24, r24
   12ba6:	c2 f7       	brpl	.-16     	; 0x12b98 <__addsf3x+0x6a>
   12ba8:	0e c0       	rjmp	.+28     	; 0x12bc6 <__addsf3x+0x98>
   12baa:	ba 0f       	add	r27, r26
   12bac:	62 1f       	adc	r22, r18
   12bae:	73 1f       	adc	r23, r19
   12bb0:	84 1f       	adc	r24, r20
   12bb2:	48 f4       	brcc	.+18     	; 0x12bc6 <__addsf3x+0x98>
   12bb4:	87 95       	ror	r24
   12bb6:	77 95       	ror	r23
   12bb8:	67 95       	ror	r22
   12bba:	b7 95       	ror	r27
   12bbc:	f7 95       	ror	r31
   12bbe:	9e 3f       	cpi	r25, 0xFE	; 254
   12bc0:	08 f0       	brcs	.+2      	; 0x12bc4 <__addsf3x+0x96>
   12bc2:	b3 cf       	rjmp	.-154    	; 0x12b2a <__addsf3+0x1e>
   12bc4:	93 95       	inc	r25
   12bc6:	88 0f       	add	r24, r24
   12bc8:	08 f0       	brcs	.+2      	; 0x12bcc <__addsf3x+0x9e>
   12bca:	99 27       	eor	r25, r25
   12bcc:	ee 0f       	add	r30, r30
   12bce:	97 95       	ror	r25
   12bd0:	87 95       	ror	r24
   12bd2:	08 95       	ret

00012bd4 <__cmpsf2>:
   12bd4:	d4 d0       	rcall	.+424    	; 0x12d7e <__fp_cmp>
   12bd6:	08 f4       	brcc	.+2      	; 0x12bda <__cmpsf2+0x6>
   12bd8:	81 e0       	ldi	r24, 0x01	; 1
   12bda:	08 95       	ret

00012bdc <__divsf3>:
   12bdc:	0c d0       	rcall	.+24     	; 0x12bf6 <__divsf3x>
   12bde:	0a c1       	rjmp	.+532    	; 0x12df4 <__fp_round>
   12be0:	02 d1       	rcall	.+516    	; 0x12de6 <__fp_pscB>
   12be2:	40 f0       	brcs	.+16     	; 0x12bf4 <__divsf3+0x18>
   12be4:	f9 d0       	rcall	.+498    	; 0x12dd8 <__fp_pscA>
   12be6:	30 f0       	brcs	.+12     	; 0x12bf4 <__divsf3+0x18>
   12be8:	21 f4       	brne	.+8      	; 0x12bf2 <__divsf3+0x16>
   12bea:	5f 3f       	cpi	r21, 0xFF	; 255
   12bec:	19 f0       	breq	.+6      	; 0x12bf4 <__divsf3+0x18>
   12bee:	eb c0       	rjmp	.+470    	; 0x12dc6 <__fp_inf>
   12bf0:	51 11       	cpse	r21, r1
   12bf2:	34 c1       	rjmp	.+616    	; 0x12e5c <__fp_szero>
   12bf4:	ee c0       	rjmp	.+476    	; 0x12dd2 <__fp_nan>

00012bf6 <__divsf3x>:
   12bf6:	0f d1       	rcall	.+542    	; 0x12e16 <__fp_split3>
   12bf8:	98 f3       	brcs	.-26     	; 0x12be0 <__divsf3+0x4>

00012bfa <__divsf3_pse>:
   12bfa:	99 23       	and	r25, r25
   12bfc:	c9 f3       	breq	.-14     	; 0x12bf0 <__divsf3+0x14>
   12bfe:	55 23       	and	r21, r21
   12c00:	b1 f3       	breq	.-20     	; 0x12bee <__divsf3+0x12>
   12c02:	95 1b       	sub	r25, r21
   12c04:	55 0b       	sbc	r21, r21
   12c06:	bb 27       	eor	r27, r27
   12c08:	aa 27       	eor	r26, r26
   12c0a:	62 17       	cp	r22, r18
   12c0c:	73 07       	cpc	r23, r19
   12c0e:	84 07       	cpc	r24, r20
   12c10:	38 f0       	brcs	.+14     	; 0x12c20 <__divsf3_pse+0x26>
   12c12:	9f 5f       	subi	r25, 0xFF	; 255
   12c14:	5f 4f       	sbci	r21, 0xFF	; 255
   12c16:	22 0f       	add	r18, r18
   12c18:	33 1f       	adc	r19, r19
   12c1a:	44 1f       	adc	r20, r20
   12c1c:	aa 1f       	adc	r26, r26
   12c1e:	a9 f3       	breq	.-22     	; 0x12c0a <__divsf3_pse+0x10>
   12c20:	33 d0       	rcall	.+102    	; 0x12c88 <__divsf3_pse+0x8e>
   12c22:	0e 2e       	mov	r0, r30
   12c24:	3a f0       	brmi	.+14     	; 0x12c34 <__divsf3_pse+0x3a>
   12c26:	e0 e8       	ldi	r30, 0x80	; 128
   12c28:	30 d0       	rcall	.+96     	; 0x12c8a <__divsf3_pse+0x90>
   12c2a:	91 50       	subi	r25, 0x01	; 1
   12c2c:	50 40       	sbci	r21, 0x00	; 0
   12c2e:	e6 95       	lsr	r30
   12c30:	00 1c       	adc	r0, r0
   12c32:	ca f7       	brpl	.-14     	; 0x12c26 <__divsf3_pse+0x2c>
   12c34:	29 d0       	rcall	.+82     	; 0x12c88 <__divsf3_pse+0x8e>
   12c36:	fe 2f       	mov	r31, r30
   12c38:	27 d0       	rcall	.+78     	; 0x12c88 <__divsf3_pse+0x8e>
   12c3a:	66 0f       	add	r22, r22
   12c3c:	77 1f       	adc	r23, r23
   12c3e:	88 1f       	adc	r24, r24
   12c40:	bb 1f       	adc	r27, r27
   12c42:	26 17       	cp	r18, r22
   12c44:	37 07       	cpc	r19, r23
   12c46:	48 07       	cpc	r20, r24
   12c48:	ab 07       	cpc	r26, r27
   12c4a:	b0 e8       	ldi	r27, 0x80	; 128
   12c4c:	09 f0       	breq	.+2      	; 0x12c50 <__divsf3_pse+0x56>
   12c4e:	bb 0b       	sbc	r27, r27
   12c50:	80 2d       	mov	r24, r0
   12c52:	bf 01       	movw	r22, r30
   12c54:	ff 27       	eor	r31, r31
   12c56:	93 58       	subi	r25, 0x83	; 131
   12c58:	5f 4f       	sbci	r21, 0xFF	; 255
   12c5a:	2a f0       	brmi	.+10     	; 0x12c66 <__divsf3_pse+0x6c>
   12c5c:	9e 3f       	cpi	r25, 0xFE	; 254
   12c5e:	51 05       	cpc	r21, r1
   12c60:	68 f0       	brcs	.+26     	; 0x12c7c <__divsf3_pse+0x82>
   12c62:	b1 c0       	rjmp	.+354    	; 0x12dc6 <__fp_inf>
   12c64:	fb c0       	rjmp	.+502    	; 0x12e5c <__fp_szero>
   12c66:	5f 3f       	cpi	r21, 0xFF	; 255
   12c68:	ec f3       	brlt	.-6      	; 0x12c64 <__divsf3_pse+0x6a>
   12c6a:	98 3e       	cpi	r25, 0xE8	; 232
   12c6c:	dc f3       	brlt	.-10     	; 0x12c64 <__divsf3_pse+0x6a>
   12c6e:	86 95       	lsr	r24
   12c70:	77 95       	ror	r23
   12c72:	67 95       	ror	r22
   12c74:	b7 95       	ror	r27
   12c76:	f7 95       	ror	r31
   12c78:	9f 5f       	subi	r25, 0xFF	; 255
   12c7a:	c9 f7       	brne	.-14     	; 0x12c6e <__divsf3_pse+0x74>
   12c7c:	88 0f       	add	r24, r24
   12c7e:	91 1d       	adc	r25, r1
   12c80:	96 95       	lsr	r25
   12c82:	87 95       	ror	r24
   12c84:	97 f9       	bld	r25, 7
   12c86:	08 95       	ret
   12c88:	e1 e0       	ldi	r30, 0x01	; 1
   12c8a:	66 0f       	add	r22, r22
   12c8c:	77 1f       	adc	r23, r23
   12c8e:	88 1f       	adc	r24, r24
   12c90:	bb 1f       	adc	r27, r27
   12c92:	62 17       	cp	r22, r18
   12c94:	73 07       	cpc	r23, r19
   12c96:	84 07       	cpc	r24, r20
   12c98:	ba 07       	cpc	r27, r26
   12c9a:	20 f0       	brcs	.+8      	; 0x12ca4 <__divsf3_pse+0xaa>
   12c9c:	62 1b       	sub	r22, r18
   12c9e:	73 0b       	sbc	r23, r19
   12ca0:	84 0b       	sbc	r24, r20
   12ca2:	ba 0b       	sbc	r27, r26
   12ca4:	ee 1f       	adc	r30, r30
   12ca6:	88 f7       	brcc	.-30     	; 0x12c8a <__divsf3_pse+0x90>
   12ca8:	e0 95       	com	r30
   12caa:	08 95       	ret

00012cac <__fixunssfsi>:
   12cac:	bc d0       	rcall	.+376    	; 0x12e26 <__fp_splitA>
   12cae:	88 f0       	brcs	.+34     	; 0x12cd2 <__fixunssfsi+0x26>
   12cb0:	9f 57       	subi	r25, 0x7F	; 127
   12cb2:	90 f0       	brcs	.+36     	; 0x12cd8 <__fixunssfsi+0x2c>
   12cb4:	b9 2f       	mov	r27, r25
   12cb6:	99 27       	eor	r25, r25
   12cb8:	b7 51       	subi	r27, 0x17	; 23
   12cba:	a0 f0       	brcs	.+40     	; 0x12ce4 <__fixunssfsi+0x38>
   12cbc:	d1 f0       	breq	.+52     	; 0x12cf2 <__fixunssfsi+0x46>
   12cbe:	66 0f       	add	r22, r22
   12cc0:	77 1f       	adc	r23, r23
   12cc2:	88 1f       	adc	r24, r24
   12cc4:	99 1f       	adc	r25, r25
   12cc6:	1a f0       	brmi	.+6      	; 0x12cce <__fixunssfsi+0x22>
   12cc8:	ba 95       	dec	r27
   12cca:	c9 f7       	brne	.-14     	; 0x12cbe <__fixunssfsi+0x12>
   12ccc:	12 c0       	rjmp	.+36     	; 0x12cf2 <__fixunssfsi+0x46>
   12cce:	b1 30       	cpi	r27, 0x01	; 1
   12cd0:	81 f0       	breq	.+32     	; 0x12cf2 <__fixunssfsi+0x46>
   12cd2:	c3 d0       	rcall	.+390    	; 0x12e5a <__fp_zero>
   12cd4:	b1 e0       	ldi	r27, 0x01	; 1
   12cd6:	08 95       	ret
   12cd8:	c0 c0       	rjmp	.+384    	; 0x12e5a <__fp_zero>
   12cda:	67 2f       	mov	r22, r23
   12cdc:	78 2f       	mov	r23, r24
   12cde:	88 27       	eor	r24, r24
   12ce0:	b8 5f       	subi	r27, 0xF8	; 248
   12ce2:	39 f0       	breq	.+14     	; 0x12cf2 <__fixunssfsi+0x46>
   12ce4:	b9 3f       	cpi	r27, 0xF9	; 249
   12ce6:	cc f3       	brlt	.-14     	; 0x12cda <__fixunssfsi+0x2e>
   12ce8:	86 95       	lsr	r24
   12cea:	77 95       	ror	r23
   12cec:	67 95       	ror	r22
   12cee:	b3 95       	inc	r27
   12cf0:	d9 f7       	brne	.-10     	; 0x12ce8 <__fixunssfsi+0x3c>
   12cf2:	3e f4       	brtc	.+14     	; 0x12d02 <__fixunssfsi+0x56>
   12cf4:	90 95       	com	r25
   12cf6:	80 95       	com	r24
   12cf8:	70 95       	com	r23
   12cfa:	61 95       	neg	r22
   12cfc:	7f 4f       	sbci	r23, 0xFF	; 255
   12cfe:	8f 4f       	sbci	r24, 0xFF	; 255
   12d00:	9f 4f       	sbci	r25, 0xFF	; 255
   12d02:	08 95       	ret

00012d04 <__floatunsisf>:
   12d04:	e8 94       	clt
   12d06:	09 c0       	rjmp	.+18     	; 0x12d1a <__floatsisf+0x12>

00012d08 <__floatsisf>:
   12d08:	97 fb       	bst	r25, 7
   12d0a:	3e f4       	brtc	.+14     	; 0x12d1a <__floatsisf+0x12>
   12d0c:	90 95       	com	r25
   12d0e:	80 95       	com	r24
   12d10:	70 95       	com	r23
   12d12:	61 95       	neg	r22
   12d14:	7f 4f       	sbci	r23, 0xFF	; 255
   12d16:	8f 4f       	sbci	r24, 0xFF	; 255
   12d18:	9f 4f       	sbci	r25, 0xFF	; 255
   12d1a:	99 23       	and	r25, r25
   12d1c:	a9 f0       	breq	.+42     	; 0x12d48 <__floatsisf+0x40>
   12d1e:	f9 2f       	mov	r31, r25
   12d20:	96 e9       	ldi	r25, 0x96	; 150
   12d22:	bb 27       	eor	r27, r27
   12d24:	93 95       	inc	r25
   12d26:	f6 95       	lsr	r31
   12d28:	87 95       	ror	r24
   12d2a:	77 95       	ror	r23
   12d2c:	67 95       	ror	r22
   12d2e:	b7 95       	ror	r27
   12d30:	f1 11       	cpse	r31, r1
   12d32:	f8 cf       	rjmp	.-16     	; 0x12d24 <__floatsisf+0x1c>
   12d34:	fa f4       	brpl	.+62     	; 0x12d74 <__floatsisf+0x6c>
   12d36:	bb 0f       	add	r27, r27
   12d38:	11 f4       	brne	.+4      	; 0x12d3e <__floatsisf+0x36>
   12d3a:	60 ff       	sbrs	r22, 0
   12d3c:	1b c0       	rjmp	.+54     	; 0x12d74 <__floatsisf+0x6c>
   12d3e:	6f 5f       	subi	r22, 0xFF	; 255
   12d40:	7f 4f       	sbci	r23, 0xFF	; 255
   12d42:	8f 4f       	sbci	r24, 0xFF	; 255
   12d44:	9f 4f       	sbci	r25, 0xFF	; 255
   12d46:	16 c0       	rjmp	.+44     	; 0x12d74 <__floatsisf+0x6c>
   12d48:	88 23       	and	r24, r24
   12d4a:	11 f0       	breq	.+4      	; 0x12d50 <__floatsisf+0x48>
   12d4c:	96 e9       	ldi	r25, 0x96	; 150
   12d4e:	11 c0       	rjmp	.+34     	; 0x12d72 <__floatsisf+0x6a>
   12d50:	77 23       	and	r23, r23
   12d52:	21 f0       	breq	.+8      	; 0x12d5c <__floatsisf+0x54>
   12d54:	9e e8       	ldi	r25, 0x8E	; 142
   12d56:	87 2f       	mov	r24, r23
   12d58:	76 2f       	mov	r23, r22
   12d5a:	05 c0       	rjmp	.+10     	; 0x12d66 <__floatsisf+0x5e>
   12d5c:	66 23       	and	r22, r22
   12d5e:	71 f0       	breq	.+28     	; 0x12d7c <__floatsisf+0x74>
   12d60:	96 e8       	ldi	r25, 0x86	; 134
   12d62:	86 2f       	mov	r24, r22
   12d64:	70 e0       	ldi	r23, 0x00	; 0
   12d66:	60 e0       	ldi	r22, 0x00	; 0
   12d68:	2a f0       	brmi	.+10     	; 0x12d74 <__floatsisf+0x6c>
   12d6a:	9a 95       	dec	r25
   12d6c:	66 0f       	add	r22, r22
   12d6e:	77 1f       	adc	r23, r23
   12d70:	88 1f       	adc	r24, r24
   12d72:	da f7       	brpl	.-10     	; 0x12d6a <__floatsisf+0x62>
   12d74:	88 0f       	add	r24, r24
   12d76:	96 95       	lsr	r25
   12d78:	87 95       	ror	r24
   12d7a:	97 f9       	bld	r25, 7
   12d7c:	08 95       	ret

00012d7e <__fp_cmp>:
   12d7e:	99 0f       	add	r25, r25
   12d80:	00 08       	sbc	r0, r0
   12d82:	55 0f       	add	r21, r21
   12d84:	aa 0b       	sbc	r26, r26
   12d86:	e0 e8       	ldi	r30, 0x80	; 128
   12d88:	fe ef       	ldi	r31, 0xFE	; 254
   12d8a:	16 16       	cp	r1, r22
   12d8c:	17 06       	cpc	r1, r23
   12d8e:	e8 07       	cpc	r30, r24
   12d90:	f9 07       	cpc	r31, r25
   12d92:	c0 f0       	brcs	.+48     	; 0x12dc4 <__fp_cmp+0x46>
   12d94:	12 16       	cp	r1, r18
   12d96:	13 06       	cpc	r1, r19
   12d98:	e4 07       	cpc	r30, r20
   12d9a:	f5 07       	cpc	r31, r21
   12d9c:	98 f0       	brcs	.+38     	; 0x12dc4 <__fp_cmp+0x46>
   12d9e:	62 1b       	sub	r22, r18
   12da0:	73 0b       	sbc	r23, r19
   12da2:	84 0b       	sbc	r24, r20
   12da4:	95 0b       	sbc	r25, r21
   12da6:	39 f4       	brne	.+14     	; 0x12db6 <__fp_cmp+0x38>
   12da8:	0a 26       	eor	r0, r26
   12daa:	61 f0       	breq	.+24     	; 0x12dc4 <__fp_cmp+0x46>
   12dac:	23 2b       	or	r18, r19
   12dae:	24 2b       	or	r18, r20
   12db0:	25 2b       	or	r18, r21
   12db2:	21 f4       	brne	.+8      	; 0x12dbc <__fp_cmp+0x3e>
   12db4:	08 95       	ret
   12db6:	0a 26       	eor	r0, r26
   12db8:	09 f4       	brne	.+2      	; 0x12dbc <__fp_cmp+0x3e>
   12dba:	a1 40       	sbci	r26, 0x01	; 1
   12dbc:	a6 95       	lsr	r26
   12dbe:	8f ef       	ldi	r24, 0xFF	; 255
   12dc0:	81 1d       	adc	r24, r1
   12dc2:	81 1d       	adc	r24, r1
   12dc4:	08 95       	ret

00012dc6 <__fp_inf>:
   12dc6:	97 f9       	bld	r25, 7
   12dc8:	9f 67       	ori	r25, 0x7F	; 127
   12dca:	80 e8       	ldi	r24, 0x80	; 128
   12dcc:	70 e0       	ldi	r23, 0x00	; 0
   12dce:	60 e0       	ldi	r22, 0x00	; 0
   12dd0:	08 95       	ret

00012dd2 <__fp_nan>:
   12dd2:	9f ef       	ldi	r25, 0xFF	; 255
   12dd4:	80 ec       	ldi	r24, 0xC0	; 192
   12dd6:	08 95       	ret

00012dd8 <__fp_pscA>:
   12dd8:	00 24       	eor	r0, r0
   12dda:	0a 94       	dec	r0
   12ddc:	16 16       	cp	r1, r22
   12dde:	17 06       	cpc	r1, r23
   12de0:	18 06       	cpc	r1, r24
   12de2:	09 06       	cpc	r0, r25
   12de4:	08 95       	ret

00012de6 <__fp_pscB>:
   12de6:	00 24       	eor	r0, r0
   12de8:	0a 94       	dec	r0
   12dea:	12 16       	cp	r1, r18
   12dec:	13 06       	cpc	r1, r19
   12dee:	14 06       	cpc	r1, r20
   12df0:	05 06       	cpc	r0, r21
   12df2:	08 95       	ret

00012df4 <__fp_round>:
   12df4:	09 2e       	mov	r0, r25
   12df6:	03 94       	inc	r0
   12df8:	00 0c       	add	r0, r0
   12dfa:	11 f4       	brne	.+4      	; 0x12e00 <__fp_round+0xc>
   12dfc:	88 23       	and	r24, r24
   12dfe:	52 f0       	brmi	.+20     	; 0x12e14 <__fp_round+0x20>
   12e00:	bb 0f       	add	r27, r27
   12e02:	40 f4       	brcc	.+16     	; 0x12e14 <__fp_round+0x20>
   12e04:	bf 2b       	or	r27, r31
   12e06:	11 f4       	brne	.+4      	; 0x12e0c <__fp_round+0x18>
   12e08:	60 ff       	sbrs	r22, 0
   12e0a:	04 c0       	rjmp	.+8      	; 0x12e14 <__fp_round+0x20>
   12e0c:	6f 5f       	subi	r22, 0xFF	; 255
   12e0e:	7f 4f       	sbci	r23, 0xFF	; 255
   12e10:	8f 4f       	sbci	r24, 0xFF	; 255
   12e12:	9f 4f       	sbci	r25, 0xFF	; 255
   12e14:	08 95       	ret

00012e16 <__fp_split3>:
   12e16:	57 fd       	sbrc	r21, 7
   12e18:	90 58       	subi	r25, 0x80	; 128
   12e1a:	44 0f       	add	r20, r20
   12e1c:	55 1f       	adc	r21, r21
   12e1e:	59 f0       	breq	.+22     	; 0x12e36 <__fp_splitA+0x10>
   12e20:	5f 3f       	cpi	r21, 0xFF	; 255
   12e22:	71 f0       	breq	.+28     	; 0x12e40 <__fp_splitA+0x1a>
   12e24:	47 95       	ror	r20

00012e26 <__fp_splitA>:
   12e26:	88 0f       	add	r24, r24
   12e28:	97 fb       	bst	r25, 7
   12e2a:	99 1f       	adc	r25, r25
   12e2c:	61 f0       	breq	.+24     	; 0x12e46 <__fp_splitA+0x20>
   12e2e:	9f 3f       	cpi	r25, 0xFF	; 255
   12e30:	79 f0       	breq	.+30     	; 0x12e50 <__fp_splitA+0x2a>
   12e32:	87 95       	ror	r24
   12e34:	08 95       	ret
   12e36:	12 16       	cp	r1, r18
   12e38:	13 06       	cpc	r1, r19
   12e3a:	14 06       	cpc	r1, r20
   12e3c:	55 1f       	adc	r21, r21
   12e3e:	f2 cf       	rjmp	.-28     	; 0x12e24 <__fp_split3+0xe>
   12e40:	46 95       	lsr	r20
   12e42:	f1 df       	rcall	.-30     	; 0x12e26 <__fp_splitA>
   12e44:	08 c0       	rjmp	.+16     	; 0x12e56 <__fp_splitA+0x30>
   12e46:	16 16       	cp	r1, r22
   12e48:	17 06       	cpc	r1, r23
   12e4a:	18 06       	cpc	r1, r24
   12e4c:	99 1f       	adc	r25, r25
   12e4e:	f1 cf       	rjmp	.-30     	; 0x12e32 <__fp_splitA+0xc>
   12e50:	86 95       	lsr	r24
   12e52:	71 05       	cpc	r23, r1
   12e54:	61 05       	cpc	r22, r1
   12e56:	08 94       	sec
   12e58:	08 95       	ret

00012e5a <__fp_zero>:
   12e5a:	e8 94       	clt

00012e5c <__fp_szero>:
   12e5c:	bb 27       	eor	r27, r27
   12e5e:	66 27       	eor	r22, r22
   12e60:	77 27       	eor	r23, r23
   12e62:	cb 01       	movw	r24, r22
   12e64:	97 f9       	bld	r25, 7
   12e66:	08 95       	ret

00012e68 <__gesf2>:
   12e68:	8a df       	rcall	.-236    	; 0x12d7e <__fp_cmp>
   12e6a:	08 f4       	brcc	.+2      	; 0x12e6e <__gesf2+0x6>
   12e6c:	8f ef       	ldi	r24, 0xFF	; 255
   12e6e:	08 95       	ret

00012e70 <__mulsf3>:
   12e70:	0b d0       	rcall	.+22     	; 0x12e88 <__mulsf3x>
   12e72:	c0 cf       	rjmp	.-128    	; 0x12df4 <__fp_round>
   12e74:	b1 df       	rcall	.-158    	; 0x12dd8 <__fp_pscA>
   12e76:	28 f0       	brcs	.+10     	; 0x12e82 <__mulsf3+0x12>
   12e78:	b6 df       	rcall	.-148    	; 0x12de6 <__fp_pscB>
   12e7a:	18 f0       	brcs	.+6      	; 0x12e82 <__mulsf3+0x12>
   12e7c:	95 23       	and	r25, r21
   12e7e:	09 f0       	breq	.+2      	; 0x12e82 <__mulsf3+0x12>
   12e80:	a2 cf       	rjmp	.-188    	; 0x12dc6 <__fp_inf>
   12e82:	a7 cf       	rjmp	.-178    	; 0x12dd2 <__fp_nan>
   12e84:	11 24       	eor	r1, r1
   12e86:	ea cf       	rjmp	.-44     	; 0x12e5c <__fp_szero>

00012e88 <__mulsf3x>:
   12e88:	c6 df       	rcall	.-116    	; 0x12e16 <__fp_split3>
   12e8a:	a0 f3       	brcs	.-24     	; 0x12e74 <__mulsf3+0x4>

00012e8c <__mulsf3_pse>:
   12e8c:	95 9f       	mul	r25, r21
   12e8e:	d1 f3       	breq	.-12     	; 0x12e84 <__mulsf3+0x14>
   12e90:	95 0f       	add	r25, r21
   12e92:	50 e0       	ldi	r21, 0x00	; 0
   12e94:	55 1f       	adc	r21, r21
   12e96:	62 9f       	mul	r22, r18
   12e98:	f0 01       	movw	r30, r0
   12e9a:	72 9f       	mul	r23, r18
   12e9c:	bb 27       	eor	r27, r27
   12e9e:	f0 0d       	add	r31, r0
   12ea0:	b1 1d       	adc	r27, r1
   12ea2:	63 9f       	mul	r22, r19
   12ea4:	aa 27       	eor	r26, r26
   12ea6:	f0 0d       	add	r31, r0
   12ea8:	b1 1d       	adc	r27, r1
   12eaa:	aa 1f       	adc	r26, r26
   12eac:	64 9f       	mul	r22, r20
   12eae:	66 27       	eor	r22, r22
   12eb0:	b0 0d       	add	r27, r0
   12eb2:	a1 1d       	adc	r26, r1
   12eb4:	66 1f       	adc	r22, r22
   12eb6:	82 9f       	mul	r24, r18
   12eb8:	22 27       	eor	r18, r18
   12eba:	b0 0d       	add	r27, r0
   12ebc:	a1 1d       	adc	r26, r1
   12ebe:	62 1f       	adc	r22, r18
   12ec0:	73 9f       	mul	r23, r19
   12ec2:	b0 0d       	add	r27, r0
   12ec4:	a1 1d       	adc	r26, r1
   12ec6:	62 1f       	adc	r22, r18
   12ec8:	83 9f       	mul	r24, r19
   12eca:	a0 0d       	add	r26, r0
   12ecc:	61 1d       	adc	r22, r1
   12ece:	22 1f       	adc	r18, r18
   12ed0:	74 9f       	mul	r23, r20
   12ed2:	33 27       	eor	r19, r19
   12ed4:	a0 0d       	add	r26, r0
   12ed6:	61 1d       	adc	r22, r1
   12ed8:	23 1f       	adc	r18, r19
   12eda:	84 9f       	mul	r24, r20
   12edc:	60 0d       	add	r22, r0
   12ede:	21 1d       	adc	r18, r1
   12ee0:	82 2f       	mov	r24, r18
   12ee2:	76 2f       	mov	r23, r22
   12ee4:	6a 2f       	mov	r22, r26
   12ee6:	11 24       	eor	r1, r1
   12ee8:	9f 57       	subi	r25, 0x7F	; 127
   12eea:	50 40       	sbci	r21, 0x00	; 0
   12eec:	8a f0       	brmi	.+34     	; 0x12f10 <__mulsf3_pse+0x84>
   12eee:	e1 f0       	breq	.+56     	; 0x12f28 <__mulsf3_pse+0x9c>
   12ef0:	88 23       	and	r24, r24
   12ef2:	4a f0       	brmi	.+18     	; 0x12f06 <__mulsf3_pse+0x7a>
   12ef4:	ee 0f       	add	r30, r30
   12ef6:	ff 1f       	adc	r31, r31
   12ef8:	bb 1f       	adc	r27, r27
   12efa:	66 1f       	adc	r22, r22
   12efc:	77 1f       	adc	r23, r23
   12efe:	88 1f       	adc	r24, r24
   12f00:	91 50       	subi	r25, 0x01	; 1
   12f02:	50 40       	sbci	r21, 0x00	; 0
   12f04:	a9 f7       	brne	.-22     	; 0x12ef0 <__mulsf3_pse+0x64>
   12f06:	9e 3f       	cpi	r25, 0xFE	; 254
   12f08:	51 05       	cpc	r21, r1
   12f0a:	70 f0       	brcs	.+28     	; 0x12f28 <__mulsf3_pse+0x9c>
   12f0c:	5c cf       	rjmp	.-328    	; 0x12dc6 <__fp_inf>
   12f0e:	a6 cf       	rjmp	.-180    	; 0x12e5c <__fp_szero>
   12f10:	5f 3f       	cpi	r21, 0xFF	; 255
   12f12:	ec f3       	brlt	.-6      	; 0x12f0e <__mulsf3_pse+0x82>
   12f14:	98 3e       	cpi	r25, 0xE8	; 232
   12f16:	dc f3       	brlt	.-10     	; 0x12f0e <__mulsf3_pse+0x82>
   12f18:	86 95       	lsr	r24
   12f1a:	77 95       	ror	r23
   12f1c:	67 95       	ror	r22
   12f1e:	b7 95       	ror	r27
   12f20:	f7 95       	ror	r31
   12f22:	e7 95       	ror	r30
   12f24:	9f 5f       	subi	r25, 0xFF	; 255
   12f26:	c1 f7       	brne	.-16     	; 0x12f18 <__mulsf3_pse+0x8c>
   12f28:	fe 2b       	or	r31, r30
   12f2a:	88 0f       	add	r24, r24
   12f2c:	91 1d       	adc	r25, r1
   12f2e:	96 95       	lsr	r25
   12f30:	87 95       	ror	r24
   12f32:	97 f9       	bld	r25, 7
   12f34:	08 95       	ret

00012f36 <__udivmodhi4>:
   12f36:	aa 1b       	sub	r26, r26
   12f38:	bb 1b       	sub	r27, r27
   12f3a:	51 e1       	ldi	r21, 0x11	; 17
   12f3c:	07 c0       	rjmp	.+14     	; 0x12f4c <__udivmodhi4_ep>

00012f3e <__udivmodhi4_loop>:
   12f3e:	aa 1f       	adc	r26, r26
   12f40:	bb 1f       	adc	r27, r27
   12f42:	a6 17       	cp	r26, r22
   12f44:	b7 07       	cpc	r27, r23
   12f46:	10 f0       	brcs	.+4      	; 0x12f4c <__udivmodhi4_ep>
   12f48:	a6 1b       	sub	r26, r22
   12f4a:	b7 0b       	sbc	r27, r23

00012f4c <__udivmodhi4_ep>:
   12f4c:	88 1f       	adc	r24, r24
   12f4e:	99 1f       	adc	r25, r25
   12f50:	5a 95       	dec	r21
   12f52:	a9 f7       	brne	.-22     	; 0x12f3e <__udivmodhi4_loop>
   12f54:	80 95       	com	r24
   12f56:	90 95       	com	r25
   12f58:	bc 01       	movw	r22, r24
   12f5a:	cd 01       	movw	r24, r26
   12f5c:	08 95       	ret

00012f5e <__divmodhi4>:
   12f5e:	97 fb       	bst	r25, 7
   12f60:	09 2e       	mov	r0, r25
   12f62:	07 26       	eor	r0, r23
   12f64:	0a d0       	rcall	.+20     	; 0x12f7a <__divmodhi4_neg1>
   12f66:	77 fd       	sbrc	r23, 7
   12f68:	04 d0       	rcall	.+8      	; 0x12f72 <__divmodhi4_neg2>
   12f6a:	e5 df       	rcall	.-54     	; 0x12f36 <__udivmodhi4>
   12f6c:	06 d0       	rcall	.+12     	; 0x12f7a <__divmodhi4_neg1>
   12f6e:	00 20       	and	r0, r0
   12f70:	1a f4       	brpl	.+6      	; 0x12f78 <__divmodhi4_exit>

00012f72 <__divmodhi4_neg2>:
   12f72:	70 95       	com	r23
   12f74:	61 95       	neg	r22
   12f76:	7f 4f       	sbci	r23, 0xFF	; 255

00012f78 <__divmodhi4_exit>:
   12f78:	08 95       	ret

00012f7a <__divmodhi4_neg1>:
   12f7a:	f6 f7       	brtc	.-4      	; 0x12f78 <__divmodhi4_exit>
   12f7c:	90 95       	com	r25
   12f7e:	81 95       	neg	r24
   12f80:	9f 4f       	sbci	r25, 0xFF	; 255
   12f82:	08 95       	ret

00012f84 <malloc>:
   12f84:	cf 93       	push	r28
   12f86:	df 93       	push	r29
   12f88:	ac 01       	movw	r20, r24
   12f8a:	82 30       	cpi	r24, 0x02	; 2
   12f8c:	91 05       	cpc	r25, r1
   12f8e:	10 f4       	brcc	.+4      	; 0x12f94 <malloc+0x10>
   12f90:	42 e0       	ldi	r20, 0x02	; 2
   12f92:	50 e0       	ldi	r21, 0x00	; 0
   12f94:	e0 91 19 05 	lds	r30, 0x0519
   12f98:	f0 91 1a 05 	lds	r31, 0x051A
   12f9c:	20 e0       	ldi	r18, 0x00	; 0
   12f9e:	30 e0       	ldi	r19, 0x00	; 0
   12fa0:	a0 e0       	ldi	r26, 0x00	; 0
   12fa2:	b0 e0       	ldi	r27, 0x00	; 0
   12fa4:	24 c0       	rjmp	.+72     	; 0x12fee <malloc+0x6a>
   12fa6:	80 81       	ld	r24, Z
   12fa8:	91 81       	ldd	r25, Z+1	; 0x01
   12faa:	84 17       	cp	r24, r20
   12fac:	95 07       	cpc	r25, r21
   12fae:	d0 f0       	brcs	.+52     	; 0x12fe4 <malloc+0x60>
   12fb0:	84 17       	cp	r24, r20
   12fb2:	95 07       	cpc	r25, r21
   12fb4:	71 f4       	brne	.+28     	; 0x12fd2 <malloc+0x4e>
   12fb6:	82 81       	ldd	r24, Z+2	; 0x02
   12fb8:	93 81       	ldd	r25, Z+3	; 0x03
   12fba:	10 97       	sbiw	r26, 0x00	; 0
   12fbc:	29 f0       	breq	.+10     	; 0x12fc8 <malloc+0x44>
   12fbe:	13 96       	adiw	r26, 0x03	; 3
   12fc0:	9c 93       	st	X, r25
   12fc2:	8e 93       	st	-X, r24
   12fc4:	12 97       	sbiw	r26, 0x02	; 2
   12fc6:	2c c0       	rjmp	.+88     	; 0x13020 <malloc+0x9c>
   12fc8:	90 93 1a 05 	sts	0x051A, r25
   12fcc:	80 93 19 05 	sts	0x0519, r24
   12fd0:	27 c0       	rjmp	.+78     	; 0x13020 <malloc+0x9c>
   12fd2:	21 15       	cp	r18, r1
   12fd4:	31 05       	cpc	r19, r1
   12fd6:	19 f0       	breq	.+6      	; 0x12fde <malloc+0x5a>
   12fd8:	82 17       	cp	r24, r18
   12fda:	93 07       	cpc	r25, r19
   12fdc:	18 f4       	brcc	.+6      	; 0x12fe4 <malloc+0x60>
   12fde:	9c 01       	movw	r18, r24
   12fe0:	bd 01       	movw	r22, r26
   12fe2:	ef 01       	movw	r28, r30
   12fe4:	92 81       	ldd	r25, Z+2	; 0x02
   12fe6:	83 81       	ldd	r24, Z+3	; 0x03
   12fe8:	df 01       	movw	r26, r30
   12fea:	e9 2f       	mov	r30, r25
   12fec:	f8 2f       	mov	r31, r24
   12fee:	30 97       	sbiw	r30, 0x00	; 0
   12ff0:	d1 f6       	brne	.-76     	; 0x12fa6 <malloc+0x22>
   12ff2:	21 15       	cp	r18, r1
   12ff4:	31 05       	cpc	r19, r1
   12ff6:	f9 f0       	breq	.+62     	; 0x13036 <malloc+0xb2>
   12ff8:	c9 01       	movw	r24, r18
   12ffa:	84 1b       	sub	r24, r20
   12ffc:	95 0b       	sbc	r25, r21
   12ffe:	84 30       	cpi	r24, 0x04	; 4
   13000:	91 05       	cpc	r25, r1
   13002:	80 f4       	brcc	.+32     	; 0x13024 <malloc+0xa0>
   13004:	8a 81       	ldd	r24, Y+2	; 0x02
   13006:	9b 81       	ldd	r25, Y+3	; 0x03
   13008:	61 15       	cp	r22, r1
   1300a:	71 05       	cpc	r23, r1
   1300c:	21 f0       	breq	.+8      	; 0x13016 <malloc+0x92>
   1300e:	fb 01       	movw	r30, r22
   13010:	93 83       	std	Z+3, r25	; 0x03
   13012:	82 83       	std	Z+2, r24	; 0x02
   13014:	04 c0       	rjmp	.+8      	; 0x1301e <malloc+0x9a>
   13016:	90 93 1a 05 	sts	0x051A, r25
   1301a:	80 93 19 05 	sts	0x0519, r24
   1301e:	fe 01       	movw	r30, r28
   13020:	32 96       	adiw	r30, 0x02	; 2
   13022:	42 c0       	rjmp	.+132    	; 0x130a8 <malloc+0x124>
   13024:	fe 01       	movw	r30, r28
   13026:	e8 0f       	add	r30, r24
   13028:	f9 1f       	adc	r31, r25
   1302a:	41 93       	st	Z+, r20
   1302c:	51 93       	st	Z+, r21
   1302e:	02 97       	sbiw	r24, 0x02	; 2
   13030:	99 83       	std	Y+1, r25	; 0x01
   13032:	88 83       	st	Y, r24
   13034:	39 c0       	rjmp	.+114    	; 0x130a8 <malloc+0x124>
   13036:	80 91 17 05 	lds	r24, 0x0517
   1303a:	90 91 18 05 	lds	r25, 0x0518
   1303e:	00 97       	sbiw	r24, 0x00	; 0
   13040:	41 f4       	brne	.+16     	; 0x13052 <malloc+0xce>
   13042:	80 91 47 03 	lds	r24, 0x0347
   13046:	90 91 48 03 	lds	r25, 0x0348
   1304a:	90 93 18 05 	sts	0x0518, r25
   1304e:	80 93 17 05 	sts	0x0517, r24
   13052:	20 91 45 03 	lds	r18, 0x0345
   13056:	30 91 46 03 	lds	r19, 0x0346
   1305a:	21 15       	cp	r18, r1
   1305c:	31 05       	cpc	r19, r1
   1305e:	41 f4       	brne	.+16     	; 0x13070 <malloc+0xec>
   13060:	2d b7       	in	r18, 0x3d	; 61
   13062:	3e b7       	in	r19, 0x3e	; 62
   13064:	80 91 49 03 	lds	r24, 0x0349
   13068:	90 91 4a 03 	lds	r25, 0x034A
   1306c:	28 1b       	sub	r18, r24
   1306e:	39 0b       	sbc	r19, r25
   13070:	e0 91 17 05 	lds	r30, 0x0517
   13074:	f0 91 18 05 	lds	r31, 0x0518
   13078:	e2 17       	cp	r30, r18
   1307a:	f3 07       	cpc	r31, r19
   1307c:	98 f4       	brcc	.+38     	; 0x130a4 <malloc+0x120>
   1307e:	2e 1b       	sub	r18, r30
   13080:	3f 0b       	sbc	r19, r31
   13082:	24 17       	cp	r18, r20
   13084:	35 07       	cpc	r19, r21
   13086:	70 f0       	brcs	.+28     	; 0x130a4 <malloc+0x120>
   13088:	ca 01       	movw	r24, r20
   1308a:	02 96       	adiw	r24, 0x02	; 2
   1308c:	28 17       	cp	r18, r24
   1308e:	39 07       	cpc	r19, r25
   13090:	48 f0       	brcs	.+18     	; 0x130a4 <malloc+0x120>
   13092:	8e 0f       	add	r24, r30
   13094:	9f 1f       	adc	r25, r31
   13096:	90 93 18 05 	sts	0x0518, r25
   1309a:	80 93 17 05 	sts	0x0517, r24
   1309e:	41 93       	st	Z+, r20
   130a0:	51 93       	st	Z+, r21
   130a2:	02 c0       	rjmp	.+4      	; 0x130a8 <malloc+0x124>
   130a4:	e0 e0       	ldi	r30, 0x00	; 0
   130a6:	f0 e0       	ldi	r31, 0x00	; 0
   130a8:	cf 01       	movw	r24, r30
   130aa:	df 91       	pop	r29
   130ac:	cf 91       	pop	r28
   130ae:	08 95       	ret

000130b0 <free>:
   130b0:	0f 93       	push	r16
   130b2:	1f 93       	push	r17
   130b4:	cf 93       	push	r28
   130b6:	df 93       	push	r29
   130b8:	9c 01       	movw	r18, r24
   130ba:	00 97       	sbiw	r24, 0x00	; 0
   130bc:	09 f4       	brne	.+2      	; 0x130c0 <free+0x10>
   130be:	8c c0       	rjmp	.+280    	; 0x131d8 <free+0x128>
   130c0:	dc 01       	movw	r26, r24
   130c2:	12 97       	sbiw	r26, 0x02	; 2
   130c4:	13 96       	adiw	r26, 0x03	; 3
   130c6:	1c 92       	st	X, r1
   130c8:	1e 92       	st	-X, r1
   130ca:	12 97       	sbiw	r26, 0x02	; 2
   130cc:	60 91 19 05 	lds	r22, 0x0519
   130d0:	70 91 1a 05 	lds	r23, 0x051A
   130d4:	61 15       	cp	r22, r1
   130d6:	71 05       	cpc	r23, r1
   130d8:	89 f4       	brne	.+34     	; 0x130fc <free+0x4c>
   130da:	8d 91       	ld	r24, X+
   130dc:	9c 91       	ld	r25, X
   130de:	11 97       	sbiw	r26, 0x01	; 1
   130e0:	82 0f       	add	r24, r18
   130e2:	93 1f       	adc	r25, r19
   130e4:	20 91 17 05 	lds	r18, 0x0517
   130e8:	30 91 18 05 	lds	r19, 0x0518
   130ec:	28 17       	cp	r18, r24
   130ee:	39 07       	cpc	r19, r25
   130f0:	69 f5       	brne	.+90     	; 0x1314c <free+0x9c>
   130f2:	b0 93 18 05 	sts	0x0518, r27
   130f6:	a0 93 17 05 	sts	0x0517, r26
   130fa:	6e c0       	rjmp	.+220    	; 0x131d8 <free+0x128>
   130fc:	fb 01       	movw	r30, r22
   130fe:	40 e0       	ldi	r20, 0x00	; 0
   13100:	50 e0       	ldi	r21, 0x00	; 0
   13102:	01 c0       	rjmp	.+2      	; 0x13106 <free+0x56>
   13104:	fc 01       	movw	r30, r24
   13106:	ea 17       	cp	r30, r26
   13108:	fb 07       	cpc	r31, r27
   1310a:	30 f4       	brcc	.+12     	; 0x13118 <free+0x68>
   1310c:	82 81       	ldd	r24, Z+2	; 0x02
   1310e:	93 81       	ldd	r25, Z+3	; 0x03
   13110:	af 01       	movw	r20, r30
   13112:	00 97       	sbiw	r24, 0x00	; 0
   13114:	b9 f7       	brne	.-18     	; 0x13104 <free+0x54>
   13116:	1f c0       	rjmp	.+62     	; 0x13156 <free+0xa6>
   13118:	e9 01       	movw	r28, r18
   1311a:	22 97       	sbiw	r28, 0x02	; 2
   1311c:	fb 83       	std	Y+3, r31	; 0x03
   1311e:	ea 83       	std	Y+2, r30	; 0x02
   13120:	08 81       	ld	r16, Y
   13122:	19 81       	ldd	r17, Y+1	; 0x01
   13124:	c9 01       	movw	r24, r18
   13126:	80 0f       	add	r24, r16
   13128:	91 1f       	adc	r25, r17
   1312a:	8e 17       	cp	r24, r30
   1312c:	9f 07       	cpc	r25, r31
   1312e:	59 f4       	brne	.+22     	; 0x13146 <free+0x96>
   13130:	80 81       	ld	r24, Z
   13132:	91 81       	ldd	r25, Z+1	; 0x01
   13134:	80 0f       	add	r24, r16
   13136:	91 1f       	adc	r25, r17
   13138:	02 96       	adiw	r24, 0x02	; 2
   1313a:	99 83       	std	Y+1, r25	; 0x01
   1313c:	88 83       	st	Y, r24
   1313e:	82 81       	ldd	r24, Z+2	; 0x02
   13140:	93 81       	ldd	r25, Z+3	; 0x03
   13142:	9b 83       	std	Y+3, r25	; 0x03
   13144:	8a 83       	std	Y+2, r24	; 0x02
   13146:	41 15       	cp	r20, r1
   13148:	51 05       	cpc	r21, r1
   1314a:	29 f4       	brne	.+10     	; 0x13156 <free+0xa6>
   1314c:	b0 93 1a 05 	sts	0x051A, r27
   13150:	a0 93 19 05 	sts	0x0519, r26
   13154:	41 c0       	rjmp	.+130    	; 0x131d8 <free+0x128>
   13156:	fa 01       	movw	r30, r20
   13158:	b3 83       	std	Z+3, r27	; 0x03
   1315a:	a2 83       	std	Z+2, r26	; 0x02
   1315c:	c1 91       	ld	r28, Z+
   1315e:	d1 91       	ld	r29, Z+
   13160:	ec 0f       	add	r30, r28
   13162:	fd 1f       	adc	r31, r29
   13164:	ae 17       	cp	r26, r30
   13166:	bf 07       	cpc	r27, r31
   13168:	81 f4       	brne	.+32     	; 0x1318a <free+0xda>
   1316a:	f9 01       	movw	r30, r18
   1316c:	92 91       	ld	r25, -Z
   1316e:	82 91       	ld	r24, -Z
   13170:	8c 0f       	add	r24, r28
   13172:	9d 1f       	adc	r25, r29
   13174:	02 96       	adiw	r24, 0x02	; 2
   13176:	da 01       	movw	r26, r20
   13178:	11 96       	adiw	r26, 0x01	; 1
   1317a:	9c 93       	st	X, r25
   1317c:	8e 93       	st	-X, r24
   1317e:	82 81       	ldd	r24, Z+2	; 0x02
   13180:	93 81       	ldd	r25, Z+3	; 0x03
   13182:	13 96       	adiw	r26, 0x03	; 3
   13184:	9c 93       	st	X, r25
   13186:	8e 93       	st	-X, r24
   13188:	12 97       	sbiw	r26, 0x02	; 2
   1318a:	e0 e0       	ldi	r30, 0x00	; 0
   1318c:	f0 e0       	ldi	r31, 0x00	; 0
   1318e:	02 c0       	rjmp	.+4      	; 0x13194 <free+0xe4>
   13190:	fb 01       	movw	r30, r22
   13192:	bc 01       	movw	r22, r24
   13194:	db 01       	movw	r26, r22
   13196:	12 96       	adiw	r26, 0x02	; 2
   13198:	8d 91       	ld	r24, X+
   1319a:	9c 91       	ld	r25, X
   1319c:	13 97       	sbiw	r26, 0x03	; 3
   1319e:	00 97       	sbiw	r24, 0x00	; 0
   131a0:	b9 f7       	brne	.-18     	; 0x13190 <free+0xe0>
   131a2:	cb 01       	movw	r24, r22
   131a4:	02 96       	adiw	r24, 0x02	; 2
   131a6:	2d 91       	ld	r18, X+
   131a8:	3c 91       	ld	r19, X
   131aa:	11 97       	sbiw	r26, 0x01	; 1
   131ac:	82 0f       	add	r24, r18
   131ae:	93 1f       	adc	r25, r19
   131b0:	20 91 17 05 	lds	r18, 0x0517
   131b4:	30 91 18 05 	lds	r19, 0x0518
   131b8:	28 17       	cp	r18, r24
   131ba:	39 07       	cpc	r19, r25
   131bc:	69 f4       	brne	.+26     	; 0x131d8 <free+0x128>
   131be:	30 97       	sbiw	r30, 0x00	; 0
   131c0:	29 f4       	brne	.+10     	; 0x131cc <free+0x11c>
   131c2:	10 92 1a 05 	sts	0x051A, r1
   131c6:	10 92 19 05 	sts	0x0519, r1
   131ca:	02 c0       	rjmp	.+4      	; 0x131d0 <free+0x120>
   131cc:	13 82       	std	Z+3, r1	; 0x03
   131ce:	12 82       	std	Z+2, r1	; 0x02
   131d0:	70 93 18 05 	sts	0x0518, r23
   131d4:	60 93 17 05 	sts	0x0517, r22
   131d8:	df 91       	pop	r29
   131da:	cf 91       	pop	r28
   131dc:	1f 91       	pop	r17
   131de:	0f 91       	pop	r16
   131e0:	08 95       	ret

000131e2 <realloc>:
   131e2:	8f 92       	push	r8
   131e4:	9f 92       	push	r9
   131e6:	af 92       	push	r10
   131e8:	bf 92       	push	r11
   131ea:	cf 92       	push	r12
   131ec:	df 92       	push	r13
   131ee:	ef 92       	push	r14
   131f0:	ff 92       	push	r15
   131f2:	0f 93       	push	r16
   131f4:	1f 93       	push	r17
   131f6:	cf 93       	push	r28
   131f8:	df 93       	push	r29
   131fa:	0f 92       	push	r0
   131fc:	0f 92       	push	r0
   131fe:	cd b7       	in	r28, 0x3d	; 61
   13200:	de b7       	in	r29, 0x3e	; 62
   13202:	8c 01       	movw	r16, r24
   13204:	00 97       	sbiw	r24, 0x00	; 0
   13206:	29 f4       	brne	.+10     	; 0x13212 <realloc+0x30>
   13208:	cb 01       	movw	r24, r22
   1320a:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <malloc>
   1320e:	8c 01       	movw	r16, r24
   13210:	b8 c0       	rjmp	.+368    	; 0x13382 <realloc+0x1a0>
   13212:	dc 01       	movw	r26, r24
   13214:	a6 0f       	add	r26, r22
   13216:	b7 1f       	adc	r27, r23
   13218:	fc 01       	movw	r30, r24
   1321a:	32 97       	sbiw	r30, 0x02	; 2
   1321c:	ae 17       	cp	r26, r30
   1321e:	bf 07       	cpc	r27, r31
   13220:	08 f4       	brcc	.+2      	; 0x13224 <realloc+0x42>
   13222:	ad c0       	rjmp	.+346    	; 0x1337e <realloc+0x19c>
   13224:	20 81       	ld	r18, Z
   13226:	31 81       	ldd	r19, Z+1	; 0x01
   13228:	26 17       	cp	r18, r22
   1322a:	37 07       	cpc	r19, r23
   1322c:	b0 f0       	brcs	.+44     	; 0x1325a <realloc+0x78>
   1322e:	25 30       	cpi	r18, 0x05	; 5
   13230:	31 05       	cpc	r19, r1
   13232:	08 f4       	brcc	.+2      	; 0x13236 <realloc+0x54>
   13234:	a6 c0       	rjmp	.+332    	; 0x13382 <realloc+0x1a0>
   13236:	c9 01       	movw	r24, r18
   13238:	04 97       	sbiw	r24, 0x04	; 4
   1323a:	86 17       	cp	r24, r22
   1323c:	97 07       	cpc	r25, r23
   1323e:	08 f4       	brcc	.+2      	; 0x13242 <realloc+0x60>
   13240:	a0 c0       	rjmp	.+320    	; 0x13382 <realloc+0x1a0>
   13242:	22 50       	subi	r18, 0x02	; 2
   13244:	30 40       	sbci	r19, 0x00	; 0
   13246:	26 1b       	sub	r18, r22
   13248:	37 0b       	sbc	r19, r23
   1324a:	2d 93       	st	X+, r18
   1324c:	3d 93       	st	X+, r19
   1324e:	cd 01       	movw	r24, r26
   13250:	71 83       	std	Z+1, r23	; 0x01
   13252:	60 83       	st	Z, r22
   13254:	0e 94 58 98 	call	0x130b0	; 0x130b0 <free>
   13258:	94 c0       	rjmp	.+296    	; 0x13382 <realloc+0x1a0>
   1325a:	6b 01       	movw	r12, r22
   1325c:	c2 1a       	sub	r12, r18
   1325e:	d3 0a       	sbc	r13, r19
   13260:	5c 01       	movw	r10, r24
   13262:	a2 0e       	add	r10, r18
   13264:	b3 1e       	adc	r11, r19
   13266:	e0 91 19 05 	lds	r30, 0x0519
   1326a:	f0 91 1a 05 	lds	r31, 0x051A
   1326e:	40 e0       	ldi	r20, 0x00	; 0
   13270:	50 e0       	ldi	r21, 0x00	; 0
   13272:	88 24       	eor	r8, r8
   13274:	99 24       	eor	r9, r9
   13276:	49 c0       	rjmp	.+146    	; 0x1330a <realloc+0x128>
   13278:	ea 15       	cp	r30, r10
   1327a:	fb 05       	cpc	r31, r11
   1327c:	e1 f5       	brne	.+120    	; 0x132f6 <realloc+0x114>
   1327e:	e0 80       	ld	r14, Z
   13280:	f1 80       	ldd	r15, Z+1	; 0x01
   13282:	c7 01       	movw	r24, r14
   13284:	02 96       	adiw	r24, 0x02	; 2
   13286:	8c 15       	cp	r24, r12
   13288:	9d 05       	cpc	r25, r13
   1328a:	a8 f1       	brcs	.+106    	; 0x132f6 <realloc+0x114>
   1328c:	a7 01       	movw	r20, r14
   1328e:	4c 19       	sub	r20, r12
   13290:	5d 09       	sbc	r21, r13
   13292:	ca 01       	movw	r24, r20
   13294:	02 96       	adiw	r24, 0x02	; 2
   13296:	0f 2e       	mov	r0, r31
   13298:	fe ef       	ldi	r31, 0xFE	; 254
   1329a:	cf 2e       	mov	r12, r31
   1329c:	ff ef       	ldi	r31, 0xFF	; 255
   1329e:	df 2e       	mov	r13, r31
   132a0:	f0 2d       	mov	r31, r0
   132a2:	c0 0e       	add	r12, r16
   132a4:	d1 1e       	adc	r13, r17
   132a6:	85 30       	cpi	r24, 0x05	; 5
   132a8:	91 05       	cpc	r25, r1
   132aa:	78 f0       	brcs	.+30     	; 0x132ca <realloc+0xe8>
   132ac:	82 81       	ldd	r24, Z+2	; 0x02
   132ae:	93 81       	ldd	r25, Z+3	; 0x03
   132b0:	13 96       	adiw	r26, 0x03	; 3
   132b2:	9c 93       	st	X, r25
   132b4:	8e 93       	st	-X, r24
   132b6:	12 97       	sbiw	r26, 0x02	; 2
   132b8:	11 96       	adiw	r26, 0x01	; 1
   132ba:	5c 93       	st	X, r21
   132bc:	4e 93       	st	-X, r20
   132be:	f6 01       	movw	r30, r12
   132c0:	71 83       	std	Z+1, r23	; 0x01
   132c2:	60 83       	st	Z, r22
   132c4:	9a 2f       	mov	r25, r26
   132c6:	8b 2f       	mov	r24, r27
   132c8:	0a c0       	rjmp	.+20     	; 0x132de <realloc+0xfc>
   132ca:	c9 01       	movw	r24, r18
   132cc:	02 96       	adiw	r24, 0x02	; 2
   132ce:	8e 0d       	add	r24, r14
   132d0:	9f 1d       	adc	r25, r15
   132d2:	d6 01       	movw	r26, r12
   132d4:	11 96       	adiw	r26, 0x01	; 1
   132d6:	9c 93       	st	X, r25
   132d8:	8e 93       	st	-X, r24
   132da:	92 81       	ldd	r25, Z+2	; 0x02
   132dc:	83 81       	ldd	r24, Z+3	; 0x03
   132de:	81 14       	cp	r8, r1
   132e0:	91 04       	cpc	r9, r1
   132e2:	21 f0       	breq	.+8      	; 0x132ec <realloc+0x10a>
   132e4:	f4 01       	movw	r30, r8
   132e6:	92 83       	std	Z+2, r25	; 0x02
   132e8:	83 83       	std	Z+3, r24	; 0x03
   132ea:	4b c0       	rjmp	.+150    	; 0x13382 <realloc+0x1a0>
   132ec:	90 93 19 05 	sts	0x0519, r25
   132f0:	80 93 1a 05 	sts	0x051A, r24
   132f4:	46 c0       	rjmp	.+140    	; 0x13382 <realloc+0x1a0>
   132f6:	80 81       	ld	r24, Z
   132f8:	91 81       	ldd	r25, Z+1	; 0x01
   132fa:	48 17       	cp	r20, r24
   132fc:	59 07       	cpc	r21, r25
   132fe:	08 f4       	brcc	.+2      	; 0x13302 <realloc+0x120>
   13300:	ac 01       	movw	r20, r24
   13302:	82 81       	ldd	r24, Z+2	; 0x02
   13304:	93 81       	ldd	r25, Z+3	; 0x03
   13306:	4f 01       	movw	r8, r30
   13308:	fc 01       	movw	r30, r24
   1330a:	30 97       	sbiw	r30, 0x00	; 0
   1330c:	09 f0       	breq	.+2      	; 0x13310 <realloc+0x12e>
   1330e:	b4 cf       	rjmp	.-152    	; 0x13278 <realloc+0x96>
   13310:	80 91 17 05 	lds	r24, 0x0517
   13314:	90 91 18 05 	lds	r25, 0x0518
   13318:	8a 15       	cp	r24, r10
   1331a:	9b 05       	cpc	r25, r11
   1331c:	e9 f4       	brne	.+58     	; 0x13358 <realloc+0x176>
   1331e:	46 17       	cp	r20, r22
   13320:	57 07       	cpc	r21, r23
   13322:	d0 f4       	brcc	.+52     	; 0x13358 <realloc+0x176>
   13324:	80 91 45 03 	lds	r24, 0x0345
   13328:	90 91 46 03 	lds	r25, 0x0346
   1332c:	00 97       	sbiw	r24, 0x00	; 0
   1332e:	41 f4       	brne	.+16     	; 0x13340 <realloc+0x15e>
   13330:	8d b7       	in	r24, 0x3d	; 61
   13332:	9e b7       	in	r25, 0x3e	; 62
   13334:	20 91 49 03 	lds	r18, 0x0349
   13338:	30 91 4a 03 	lds	r19, 0x034A
   1333c:	82 1b       	sub	r24, r18
   1333e:	93 0b       	sbc	r25, r19
   13340:	a8 17       	cp	r26, r24
   13342:	b9 07       	cpc	r27, r25
   13344:	e0 f4       	brcc	.+56     	; 0x1337e <realloc+0x19c>
   13346:	b0 93 18 05 	sts	0x0518, r27
   1334a:	a0 93 17 05 	sts	0x0517, r26
   1334e:	f8 01       	movw	r30, r16
   13350:	32 97       	sbiw	r30, 0x02	; 2
   13352:	71 83       	std	Z+1, r23	; 0x01
   13354:	60 83       	st	Z, r22
   13356:	15 c0       	rjmp	.+42     	; 0x13382 <realloc+0x1a0>
   13358:	cb 01       	movw	r24, r22
   1335a:	29 83       	std	Y+1, r18	; 0x01
   1335c:	3a 83       	std	Y+2, r19	; 0x02
   1335e:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <malloc>
   13362:	7c 01       	movw	r14, r24
   13364:	29 81       	ldd	r18, Y+1	; 0x01
   13366:	3a 81       	ldd	r19, Y+2	; 0x02
   13368:	00 97       	sbiw	r24, 0x00	; 0
   1336a:	49 f0       	breq	.+18     	; 0x1337e <realloc+0x19c>
   1336c:	b8 01       	movw	r22, r16
   1336e:	a9 01       	movw	r20, r18
   13370:	0e 94 d6 99 	call	0x133ac	; 0x133ac <memcpy>
   13374:	c8 01       	movw	r24, r16
   13376:	0e 94 58 98 	call	0x130b0	; 0x130b0 <free>
   1337a:	87 01       	movw	r16, r14
   1337c:	02 c0       	rjmp	.+4      	; 0x13382 <realloc+0x1a0>
   1337e:	00 e0       	ldi	r16, 0x00	; 0
   13380:	10 e0       	ldi	r17, 0x00	; 0
   13382:	c8 01       	movw	r24, r16
   13384:	0f 90       	pop	r0
   13386:	0f 90       	pop	r0
   13388:	df 91       	pop	r29
   1338a:	cf 91       	pop	r28
   1338c:	1f 91       	pop	r17
   1338e:	0f 91       	pop	r16
   13390:	ff 90       	pop	r15
   13392:	ef 90       	pop	r14
   13394:	df 90       	pop	r13
   13396:	cf 90       	pop	r12
   13398:	bf 90       	pop	r11
   1339a:	af 90       	pop	r10
   1339c:	9f 90       	pop	r9
   1339e:	8f 90       	pop	r8
   133a0:	08 95       	ret

000133a2 <strtok>:
   133a2:	4a e4       	ldi	r20, 0x4A	; 74
   133a4:	54 e0       	ldi	r21, 0x04	; 4
   133a6:	0e 94 f1 99 	call	0x133e2	; 0x133e2 <strtok_r>
   133aa:	08 95       	ret

000133ac <memcpy>:
   133ac:	fb 01       	movw	r30, r22
   133ae:	dc 01       	movw	r26, r24
   133b0:	02 c0       	rjmp	.+4      	; 0x133b6 <memcpy+0xa>
   133b2:	01 90       	ld	r0, Z+
   133b4:	0d 92       	st	X+, r0
   133b6:	41 50       	subi	r20, 0x01	; 1
   133b8:	50 40       	sbci	r21, 0x00	; 0
   133ba:	d8 f7       	brcc	.-10     	; 0x133b2 <memcpy+0x6>
   133bc:	08 95       	ret

000133be <strcat>:
   133be:	fb 01       	movw	r30, r22
   133c0:	dc 01       	movw	r26, r24
   133c2:	0d 90       	ld	r0, X+
   133c4:	00 20       	and	r0, r0
   133c6:	e9 f7       	brne	.-6      	; 0x133c2 <strcat+0x4>
   133c8:	11 97       	sbiw	r26, 0x01	; 1
   133ca:	01 90       	ld	r0, Z+
   133cc:	0d 92       	st	X+, r0
   133ce:	00 20       	and	r0, r0
   133d0:	e1 f7       	brne	.-8      	; 0x133ca <strcat+0xc>
   133d2:	08 95       	ret

000133d4 <strcpy>:
   133d4:	fb 01       	movw	r30, r22
   133d6:	dc 01       	movw	r26, r24
   133d8:	01 90       	ld	r0, Z+
   133da:	0d 92       	st	X+, r0
   133dc:	00 20       	and	r0, r0
   133de:	e1 f7       	brne	.-8      	; 0x133d8 <strcpy+0x4>
   133e0:	08 95       	ret

000133e2 <strtok_r>:
   133e2:	fa 01       	movw	r30, r20
   133e4:	a1 91       	ld	r26, Z+
   133e6:	b0 81       	ld	r27, Z
   133e8:	00 97       	sbiw	r24, 0x00	; 0
   133ea:	19 f4       	brne	.+6      	; 0x133f2 <strtok_r+0x10>
   133ec:	10 97       	sbiw	r26, 0x00	; 0
   133ee:	e1 f0       	breq	.+56     	; 0x13428 <strtok_r+0x46>
   133f0:	cd 01       	movw	r24, r26
   133f2:	dc 01       	movw	r26, r24
   133f4:	cd 01       	movw	r24, r26
   133f6:	0d 90       	ld	r0, X+
   133f8:	00 20       	and	r0, r0
   133fa:	11 f4       	brne	.+4      	; 0x13400 <strtok_r+0x1e>
   133fc:	c0 01       	movw	r24, r0
   133fe:	13 c0       	rjmp	.+38     	; 0x13426 <strtok_r+0x44>
   13400:	fb 01       	movw	r30, r22
   13402:	21 91       	ld	r18, Z+
   13404:	22 23       	and	r18, r18
   13406:	19 f0       	breq	.+6      	; 0x1340e <strtok_r+0x2c>
   13408:	20 15       	cp	r18, r0
   1340a:	d9 f7       	brne	.-10     	; 0x13402 <strtok_r+0x20>
   1340c:	f3 cf       	rjmp	.-26     	; 0x133f4 <strtok_r+0x12>
   1340e:	fb 01       	movw	r30, r22
   13410:	21 91       	ld	r18, Z+
   13412:	20 15       	cp	r18, r0
   13414:	19 f4       	brne	.+6      	; 0x1341c <strtok_r+0x3a>
   13416:	1e 92       	st	-X, r1
   13418:	11 96       	adiw	r26, 0x01	; 1
   1341a:	06 c0       	rjmp	.+12     	; 0x13428 <strtok_r+0x46>
   1341c:	22 23       	and	r18, r18
   1341e:	c1 f7       	brne	.-16     	; 0x13410 <strtok_r+0x2e>
   13420:	0d 90       	ld	r0, X+
   13422:	00 20       	and	r0, r0
   13424:	a1 f7       	brne	.-24     	; 0x1340e <strtok_r+0x2c>
   13426:	d0 01       	movw	r26, r0
   13428:	fa 01       	movw	r30, r20
   1342a:	a1 93       	st	Z+, r26
   1342c:	b0 83       	st	Z, r27
   1342e:	08 95       	ret

00013430 <sscanf>:
   13430:	cf 93       	push	r28
   13432:	df 93       	push	r29
   13434:	cd b7       	in	r28, 0x3d	; 61
   13436:	de b7       	in	r29, 0x3e	; 62
   13438:	2e 97       	sbiw	r28, 0x0e	; 14
   1343a:	0f b6       	in	r0, 0x3f	; 63
   1343c:	f8 94       	cli
   1343e:	de bf       	out	0x3e, r29	; 62
   13440:	0f be       	out	0x3f, r0	; 63
   13442:	cd bf       	out	0x3d, r28	; 61
   13444:	85 e0       	ldi	r24, 0x05	; 5
   13446:	8c 83       	std	Y+4, r24	; 0x04
   13448:	8c 89       	ldd	r24, Y+20	; 0x14
   1344a:	9d 89       	ldd	r25, Y+21	; 0x15
   1344c:	9a 83       	std	Y+2, r25	; 0x02
   1344e:	89 83       	std	Y+1, r24	; 0x01
   13450:	ae 01       	movw	r20, r28
   13452:	48 5e       	subi	r20, 0xE8	; 232
   13454:	5f 4f       	sbci	r21, 0xFF	; 255
   13456:	ce 01       	movw	r24, r28
   13458:	01 96       	adiw	r24, 0x01	; 1
   1345a:	6e 89       	ldd	r22, Y+22	; 0x16
   1345c:	7f 89       	ldd	r23, Y+23	; 0x17
   1345e:	0e 94 de 9b 	call	0x137bc	; 0x137bc <vfscanf>
   13462:	2e 96       	adiw	r28, 0x0e	; 14
   13464:	0f b6       	in	r0, 0x3f	; 63
   13466:	f8 94       	cli
   13468:	de bf       	out	0x3e, r29	; 62
   1346a:	0f be       	out	0x3f, r0	; 63
   1346c:	cd bf       	out	0x3d, r28	; 61
   1346e:	df 91       	pop	r29
   13470:	cf 91       	pop	r28
   13472:	08 95       	ret

00013474 <putval>:
   13474:	20 fd       	sbrc	r18, 0
   13476:	09 c0       	rjmp	.+18     	; 0x1348a <putval+0x16>
   13478:	fc 01       	movw	r30, r24
   1347a:	23 fd       	sbrc	r18, 3
   1347c:	05 c0       	rjmp	.+10     	; 0x13488 <putval+0x14>
   1347e:	22 ff       	sbrs	r18, 2
   13480:	02 c0       	rjmp	.+4      	; 0x13486 <putval+0x12>
   13482:	73 83       	std	Z+3, r23	; 0x03
   13484:	62 83       	std	Z+2, r22	; 0x02
   13486:	51 83       	std	Z+1, r21	; 0x01
   13488:	40 83       	st	Z, r20
   1348a:	08 95       	ret

0001348c <mulacc>:
   1348c:	cf 92       	push	r12
   1348e:	df 92       	push	r13
   13490:	ef 92       	push	r14
   13492:	ff 92       	push	r15
   13494:	6b 01       	movw	r12, r22
   13496:	7c 01       	movw	r14, r24
   13498:	44 fd       	sbrc	r20, 4
   1349a:	10 c0       	rjmp	.+32     	; 0x134bc <mulacc+0x30>
   1349c:	46 fd       	sbrc	r20, 6
   1349e:	10 c0       	rjmp	.+32     	; 0x134c0 <mulacc+0x34>
   134a0:	d6 01       	movw	r26, r12
   134a2:	f7 01       	movw	r30, r14
   134a4:	aa 0f       	add	r26, r26
   134a6:	bb 1f       	adc	r27, r27
   134a8:	ee 1f       	adc	r30, r30
   134aa:	ff 1f       	adc	r31, r31
   134ac:	10 94       	com	r1
   134ae:	d1 f7       	brne	.-12     	; 0x134a4 <mulacc+0x18>
   134b0:	ca 0e       	add	r12, r26
   134b2:	db 1e       	adc	r13, r27
   134b4:	ee 1e       	adc	r14, r30
   134b6:	ff 1e       	adc	r15, r31
   134b8:	81 e0       	ldi	r24, 0x01	; 1
   134ba:	03 c0       	rjmp	.+6      	; 0x134c2 <mulacc+0x36>
   134bc:	83 e0       	ldi	r24, 0x03	; 3
   134be:	01 c0       	rjmp	.+2      	; 0x134c2 <mulacc+0x36>
   134c0:	84 e0       	ldi	r24, 0x04	; 4
   134c2:	cc 0c       	add	r12, r12
   134c4:	dd 1c       	adc	r13, r13
   134c6:	ee 1c       	adc	r14, r14
   134c8:	ff 1c       	adc	r15, r15
   134ca:	81 50       	subi	r24, 0x01	; 1
   134cc:	d1 f7       	brne	.-12     	; 0x134c2 <mulacc+0x36>
   134ce:	c2 0e       	add	r12, r18
   134d0:	d1 1c       	adc	r13, r1
   134d2:	e1 1c       	adc	r14, r1
   134d4:	f1 1c       	adc	r15, r1
   134d6:	b6 01       	movw	r22, r12
   134d8:	c7 01       	movw	r24, r14
   134da:	ff 90       	pop	r15
   134dc:	ef 90       	pop	r14
   134de:	df 90       	pop	r13
   134e0:	cf 90       	pop	r12
   134e2:	08 95       	ret

000134e4 <skip_spaces>:
   134e4:	0f 93       	push	r16
   134e6:	1f 93       	push	r17
   134e8:	cf 93       	push	r28
   134ea:	df 93       	push	r29
   134ec:	8c 01       	movw	r16, r24
   134ee:	c8 01       	movw	r24, r16
   134f0:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   134f4:	ec 01       	movw	r28, r24
   134f6:	97 fd       	sbrc	r25, 7
   134f8:	08 c0       	rjmp	.+16     	; 0x1350a <skip_spaces+0x26>
   134fa:	0e 94 0b 9d 	call	0x13a16	; 0x13a16 <isspace>
   134fe:	00 97       	sbiw	r24, 0x00	; 0
   13500:	b1 f7       	brne	.-20     	; 0x134ee <skip_spaces+0xa>
   13502:	ce 01       	movw	r24, r28
   13504:	b8 01       	movw	r22, r16
   13506:	0e 94 5e 9d 	call	0x13abc	; 0x13abc <ungetc>
   1350a:	ce 01       	movw	r24, r28
   1350c:	df 91       	pop	r29
   1350e:	cf 91       	pop	r28
   13510:	1f 91       	pop	r17
   13512:	0f 91       	pop	r16
   13514:	08 95       	ret

00013516 <conv_int>:
   13516:	af 92       	push	r10
   13518:	bf 92       	push	r11
   1351a:	cf 92       	push	r12
   1351c:	df 92       	push	r13
   1351e:	ef 92       	push	r14
   13520:	ff 92       	push	r15
   13522:	0f 93       	push	r16
   13524:	1f 93       	push	r17
   13526:	cf 93       	push	r28
   13528:	df 93       	push	r29
   1352a:	8c 01       	movw	r16, r24
   1352c:	d6 2f       	mov	r29, r22
   1352e:	5a 01       	movw	r10, r20
   13530:	c2 2f       	mov	r28, r18
   13532:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   13536:	8b 32       	cpi	r24, 0x2B	; 43
   13538:	19 f0       	breq	.+6      	; 0x13540 <conv_int+0x2a>
   1353a:	8d 32       	cpi	r24, 0x2D	; 45
   1353c:	49 f4       	brne	.+18     	; 0x13550 <conv_int+0x3a>
   1353e:	c0 68       	ori	r28, 0x80	; 128
   13540:	d1 50       	subi	r29, 0x01	; 1
   13542:	09 f4       	brne	.+2      	; 0x13546 <conv_int+0x30>
   13544:	61 c0       	rjmp	.+194    	; 0x13608 <conv_int+0xf2>
   13546:	c8 01       	movw	r24, r16
   13548:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   1354c:	97 fd       	sbrc	r25, 7
   1354e:	5c c0       	rjmp	.+184    	; 0x13608 <conv_int+0xf2>
   13550:	cd 7f       	andi	r28, 0xFD	; 253
   13552:	2c 2f       	mov	r18, r28
   13554:	20 73       	andi	r18, 0x30	; 48
   13556:	d1 f4       	brne	.+52     	; 0x1358c <conv_int+0x76>
   13558:	80 33       	cpi	r24, 0x30	; 48
   1355a:	c1 f4       	brne	.+48     	; 0x1358c <conv_int+0x76>
   1355c:	d1 50       	subi	r29, 0x01	; 1
   1355e:	09 f4       	brne	.+2      	; 0x13562 <conv_int+0x4c>
   13560:	3e c0       	rjmp	.+124    	; 0x135de <conv_int+0xc8>
   13562:	c8 01       	movw	r24, r16
   13564:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   13568:	97 fd       	sbrc	r25, 7
   1356a:	39 c0       	rjmp	.+114    	; 0x135de <conv_int+0xc8>
   1356c:	c2 60       	ori	r28, 0x02	; 2
   1356e:	88 37       	cpi	r24, 0x78	; 120
   13570:	11 f0       	breq	.+4      	; 0x13576 <conv_int+0x60>
   13572:	88 35       	cpi	r24, 0x58	; 88
   13574:	49 f4       	brne	.+18     	; 0x13588 <conv_int+0x72>
   13576:	c0 64       	ori	r28, 0x40	; 64
   13578:	d1 50       	subi	r29, 0x01	; 1
   1357a:	89 f1       	breq	.+98     	; 0x135de <conv_int+0xc8>
   1357c:	c8 01       	movw	r24, r16
   1357e:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   13582:	97 ff       	sbrs	r25, 7
   13584:	03 c0       	rjmp	.+6      	; 0x1358c <conv_int+0x76>
   13586:	2b c0       	rjmp	.+86     	; 0x135de <conv_int+0xc8>
   13588:	c6 ff       	sbrs	r28, 6
   1358a:	c0 61       	ori	r28, 0x10	; 16
   1358c:	cc 24       	eor	r12, r12
   1358e:	dd 24       	eor	r13, r13
   13590:	76 01       	movw	r14, r12
   13592:	28 2f       	mov	r18, r24
   13594:	20 53       	subi	r18, 0x30	; 48
   13596:	28 30       	cpi	r18, 0x08	; 8
   13598:	80 f0       	brcs	.+32     	; 0x135ba <conv_int+0xa4>
   1359a:	c4 fd       	sbrc	r28, 4
   1359c:	09 c0       	rjmp	.+18     	; 0x135b0 <conv_int+0x9a>
   1359e:	2a 30       	cpi	r18, 0x0A	; 10
   135a0:	60 f0       	brcs	.+24     	; 0x135ba <conv_int+0xa4>
   135a2:	c6 ff       	sbrs	r28, 6
   135a4:	05 c0       	rjmp	.+10     	; 0x135b0 <conv_int+0x9a>
   135a6:	2f 7d       	andi	r18, 0xDF	; 223
   135a8:	32 2f       	mov	r19, r18
   135aa:	31 51       	subi	r19, 0x11	; 17
   135ac:	36 30       	cpi	r19, 0x06	; 6
   135ae:	20 f0       	brcs	.+8      	; 0x135b8 <conv_int+0xa2>
   135b0:	b8 01       	movw	r22, r16
   135b2:	0e 94 5e 9d 	call	0x13abc	; 0x13abc <ungetc>
   135b6:	10 c0       	rjmp	.+32     	; 0x135d8 <conv_int+0xc2>
   135b8:	27 50       	subi	r18, 0x07	; 7
   135ba:	c7 01       	movw	r24, r14
   135bc:	b6 01       	movw	r22, r12
   135be:	4c 2f       	mov	r20, r28
   135c0:	0e 94 46 9a 	call	0x1348c	; 0x1348c <mulacc>
   135c4:	6b 01       	movw	r12, r22
   135c6:	7c 01       	movw	r14, r24
   135c8:	c2 60       	ori	r28, 0x02	; 2
   135ca:	d1 50       	subi	r29, 0x01	; 1
   135cc:	59 f0       	breq	.+22     	; 0x135e4 <conv_int+0xce>
   135ce:	c8 01       	movw	r24, r16
   135d0:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   135d4:	97 ff       	sbrs	r25, 7
   135d6:	dd cf       	rjmp	.-70     	; 0x13592 <conv_int+0x7c>
   135d8:	c1 fd       	sbrc	r28, 1
   135da:	04 c0       	rjmp	.+8      	; 0x135e4 <conv_int+0xce>
   135dc:	15 c0       	rjmp	.+42     	; 0x13608 <conv_int+0xf2>
   135de:	cc 24       	eor	r12, r12
   135e0:	dd 24       	eor	r13, r13
   135e2:	76 01       	movw	r14, r12
   135e4:	c7 ff       	sbrs	r28, 7
   135e6:	08 c0       	rjmp	.+16     	; 0x135f8 <conv_int+0xe2>
   135e8:	f0 94       	com	r15
   135ea:	e0 94       	com	r14
   135ec:	d0 94       	com	r13
   135ee:	c0 94       	com	r12
   135f0:	c1 1c       	adc	r12, r1
   135f2:	d1 1c       	adc	r13, r1
   135f4:	e1 1c       	adc	r14, r1
   135f6:	f1 1c       	adc	r15, r1
   135f8:	c5 01       	movw	r24, r10
   135fa:	b7 01       	movw	r22, r14
   135fc:	a6 01       	movw	r20, r12
   135fe:	2c 2f       	mov	r18, r28
   13600:	0e 94 3a 9a 	call	0x13474	; 0x13474 <putval>
   13604:	81 e0       	ldi	r24, 0x01	; 1
   13606:	01 c0       	rjmp	.+2      	; 0x1360a <conv_int+0xf4>
   13608:	80 e0       	ldi	r24, 0x00	; 0
   1360a:	df 91       	pop	r29
   1360c:	cf 91       	pop	r28
   1360e:	1f 91       	pop	r17
   13610:	0f 91       	pop	r16
   13612:	ff 90       	pop	r15
   13614:	ef 90       	pop	r14
   13616:	df 90       	pop	r13
   13618:	cf 90       	pop	r12
   1361a:	bf 90       	pop	r11
   1361c:	af 90       	pop	r10
   1361e:	08 95       	ret

00013620 <conv_brk>:
   13620:	4f 92       	push	r4
   13622:	5f 92       	push	r5
   13624:	6f 92       	push	r6
   13626:	7f 92       	push	r7
   13628:	8f 92       	push	r8
   1362a:	9f 92       	push	r9
   1362c:	af 92       	push	r10
   1362e:	bf 92       	push	r11
   13630:	cf 92       	push	r12
   13632:	df 92       	push	r13
   13634:	ef 92       	push	r14
   13636:	ff 92       	push	r15
   13638:	0f 93       	push	r16
   1363a:	1f 93       	push	r17
   1363c:	cf 93       	push	r28
   1363e:	df 93       	push	r29
   13640:	cd b7       	in	r28, 0x3d	; 61
   13642:	de b7       	in	r29, 0x3e	; 62
   13644:	a0 97       	sbiw	r28, 0x20	; 32
   13646:	0f b6       	in	r0, 0x3f	; 63
   13648:	f8 94       	cli
   1364a:	de bf       	out	0x3e, r29	; 62
   1364c:	0f be       	out	0x3f, r0	; 63
   1364e:	cd bf       	out	0x3d, r28	; 61
   13650:	5c 01       	movw	r10, r24
   13652:	06 2f       	mov	r16, r22
   13654:	7a 01       	movw	r14, r20
   13656:	69 01       	movw	r12, r18
   13658:	fe 01       	movw	r30, r28
   1365a:	31 96       	adiw	r30, 0x01	; 1
   1365c:	80 e2       	ldi	r24, 0x20	; 32
   1365e:	df 01       	movw	r26, r30
   13660:	1d 92       	st	X+, r1
   13662:	8a 95       	dec	r24
   13664:	e9 f7       	brne	.-6      	; 0x13660 <conv_brk+0x40>
   13666:	d5 01       	movw	r26, r10
   13668:	13 96       	adiw	r26, 0x03	; 3
   1366a:	1c 91       	ld	r17, X
   1366c:	13 97       	sbiw	r26, 0x03	; 3
   1366e:	60 e0       	ldi	r22, 0x00	; 0
   13670:	70 e0       	ldi	r23, 0x00	; 0
   13672:	20 e0       	ldi	r18, 0x00	; 0
   13674:	40 e0       	ldi	r20, 0x00	; 0
   13676:	30 e0       	ldi	r19, 0x00	; 0
   13678:	4f 01       	movw	r8, r30
   1367a:	81 e0       	ldi	r24, 0x01	; 1
   1367c:	68 2e       	mov	r6, r24
   1367e:	71 2c       	mov	r7, r1
   13680:	f6 01       	movw	r30, r12
   13682:	13 fd       	sbrc	r17, 3
   13684:	55 91       	lpm	r21, Z+
   13686:	13 ff       	sbrs	r17, 3
   13688:	51 91       	ld	r21, Z+
   1368a:	6f 01       	movw	r12, r30
   1368c:	55 23       	and	r21, r21
   1368e:	09 f4       	brne	.+2      	; 0x13692 <conv_brk+0x72>
   13690:	7b c0       	rjmp	.+246    	; 0x13788 <conv_brk+0x168>
   13692:	5e 35       	cpi	r21, 0x5E	; 94
   13694:	19 f4       	brne	.+6      	; 0x1369c <conv_brk+0x7c>
   13696:	61 15       	cp	r22, r1
   13698:	71 05       	cpc	r23, r1
   1369a:	49 f1       	breq	.+82     	; 0x136ee <conv_brk+0xce>
   1369c:	83 2f       	mov	r24, r19
   1369e:	90 e0       	ldi	r25, 0x00	; 0
   136a0:	86 17       	cp	r24, r22
   136a2:	97 07       	cpc	r25, r23
   136a4:	3c f4       	brge	.+14     	; 0x136b4 <conv_brk+0x94>
   136a6:	5d 35       	cpi	r21, 0x5D	; 93
   136a8:	51 f1       	breq	.+84     	; 0x136fe <conv_brk+0xde>
   136aa:	5d 32       	cpi	r21, 0x2D	; 45
   136ac:	19 f4       	brne	.+6      	; 0x136b4 <conv_brk+0x94>
   136ae:	44 23       	and	r20, r20
   136b0:	01 f1       	breq	.+64     	; 0x136f2 <conv_brk+0xd2>
   136b2:	03 c0       	rjmp	.+6      	; 0x136ba <conv_brk+0x9a>
   136b4:	44 23       	and	r20, r20
   136b6:	09 f4       	brne	.+2      	; 0x136ba <conv_brk+0x9a>
   136b8:	25 2f       	mov	r18, r21
   136ba:	85 2f       	mov	r24, r21
   136bc:	86 95       	lsr	r24
   136be:	86 95       	lsr	r24
   136c0:	86 95       	lsr	r24
   136c2:	f4 01       	movw	r30, r8
   136c4:	e8 0f       	add	r30, r24
   136c6:	f1 1d       	adc	r31, r1
   136c8:	85 2f       	mov	r24, r21
   136ca:	87 70       	andi	r24, 0x07	; 7
   136cc:	23 01       	movw	r4, r6
   136ce:	02 c0       	rjmp	.+4      	; 0x136d4 <conv_brk+0xb4>
   136d0:	44 0c       	add	r4, r4
   136d2:	55 1c       	adc	r5, r5
   136d4:	8a 95       	dec	r24
   136d6:	e2 f7       	brpl	.-8      	; 0x136d0 <conv_brk+0xb0>
   136d8:	80 81       	ld	r24, Z
   136da:	84 29       	or	r24, r4
   136dc:	80 83       	st	Z, r24
   136de:	52 17       	cp	r21, r18
   136e0:	51 f0       	breq	.+20     	; 0x136f6 <conv_brk+0xd6>
   136e2:	52 17       	cp	r21, r18
   136e4:	10 f4       	brcc	.+4      	; 0x136ea <conv_brk+0xca>
   136e6:	5f 5f       	subi	r21, 0xFF	; 255
   136e8:	e8 cf       	rjmp	.-48     	; 0x136ba <conv_brk+0x9a>
   136ea:	51 50       	subi	r21, 0x01	; 1
   136ec:	e6 cf       	rjmp	.-52     	; 0x136ba <conv_brk+0x9a>
   136ee:	31 e0       	ldi	r19, 0x01	; 1
   136f0:	03 c0       	rjmp	.+6      	; 0x136f8 <conv_brk+0xd8>
   136f2:	41 e0       	ldi	r20, 0x01	; 1
   136f4:	01 c0       	rjmp	.+2      	; 0x136f8 <conv_brk+0xd8>
   136f6:	40 e0       	ldi	r20, 0x00	; 0
   136f8:	6f 5f       	subi	r22, 0xFF	; 255
   136fa:	7f 4f       	sbci	r23, 0xFF	; 255
   136fc:	c1 cf       	rjmp	.-126    	; 0x13680 <conv_brk+0x60>
   136fe:	44 23       	and	r20, r20
   13700:	19 f0       	breq	.+6      	; 0x13708 <conv_brk+0xe8>
   13702:	8e 81       	ldd	r24, Y+6	; 0x06
   13704:	80 62       	ori	r24, 0x20	; 32
   13706:	8e 83       	std	Y+6, r24	; 0x06
   13708:	33 23       	and	r19, r19
   1370a:	51 f0       	breq	.+20     	; 0x13720 <conv_brk+0x100>
   1370c:	fe 01       	movw	r30, r28
   1370e:	31 96       	adiw	r30, 0x01	; 1
   13710:	ce 01       	movw	r24, r28
   13712:	81 96       	adiw	r24, 0x21	; 33
   13714:	20 81       	ld	r18, Z
   13716:	20 95       	com	r18
   13718:	21 93       	st	Z+, r18
   1371a:	e8 17       	cp	r30, r24
   1371c:	f9 07       	cpc	r31, r25
   1371e:	d1 f7       	brne	.-12     	; 0x13714 <conv_brk+0xf4>
   13720:	11 e0       	ldi	r17, 0x01	; 1
   13722:	01 c0       	rjmp	.+2      	; 0x13726 <conv_brk+0x106>
   13724:	10 e0       	ldi	r17, 0x00	; 0
   13726:	c5 01       	movw	r24, r10
   13728:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   1372c:	9c 01       	movw	r18, r24
   1372e:	97 fd       	sbrc	r25, 7
   13730:	23 c0       	rjmp	.+70     	; 0x13778 <conv_brk+0x158>
   13732:	86 95       	lsr	r24
   13734:	86 95       	lsr	r24
   13736:	86 95       	lsr	r24
   13738:	e1 e0       	ldi	r30, 0x01	; 1
   1373a:	f0 e0       	ldi	r31, 0x00	; 0
   1373c:	ec 0f       	add	r30, r28
   1373e:	fd 1f       	adc	r31, r29
   13740:	e8 0f       	add	r30, r24
   13742:	f1 1d       	adc	r31, r1
   13744:	40 81       	ld	r20, Z
   13746:	50 e0       	ldi	r21, 0x00	; 0
   13748:	c9 01       	movw	r24, r18
   1374a:	87 70       	andi	r24, 0x07	; 7
   1374c:	90 70       	andi	r25, 0x00	; 0
   1374e:	02 c0       	rjmp	.+4      	; 0x13754 <conv_brk+0x134>
   13750:	55 95       	asr	r21
   13752:	47 95       	ror	r20
   13754:	8a 95       	dec	r24
   13756:	e2 f7       	brpl	.-8      	; 0x13750 <conv_brk+0x130>
   13758:	40 fd       	sbrc	r20, 0
   1375a:	05 c0       	rjmp	.+10     	; 0x13766 <conv_brk+0x146>
   1375c:	c9 01       	movw	r24, r18
   1375e:	b5 01       	movw	r22, r10
   13760:	0e 94 5e 9d 	call	0x13abc	; 0x13abc <ungetc>
   13764:	09 c0       	rjmp	.+18     	; 0x13778 <conv_brk+0x158>
   13766:	e1 14       	cp	r14, r1
   13768:	f1 04       	cpc	r15, r1
   1376a:	19 f0       	breq	.+6      	; 0x13772 <conv_brk+0x152>
   1376c:	d7 01       	movw	r26, r14
   1376e:	2d 93       	st	X+, r18
   13770:	7d 01       	movw	r14, r26
   13772:	01 50       	subi	r16, 0x01	; 1
   13774:	b9 f6       	brne	.-82     	; 0x13724 <conv_brk+0x104>
   13776:	02 c0       	rjmp	.+4      	; 0x1377c <conv_brk+0x15c>
   13778:	11 23       	and	r17, r17
   1377a:	31 f4       	brne	.+12     	; 0x13788 <conv_brk+0x168>
   1377c:	e1 14       	cp	r14, r1
   1377e:	f1 04       	cpc	r15, r1
   13780:	29 f0       	breq	.+10     	; 0x1378c <conv_brk+0x16c>
   13782:	f7 01       	movw	r30, r14
   13784:	10 82       	st	Z, r1
   13786:	02 c0       	rjmp	.+4      	; 0x1378c <conv_brk+0x16c>
   13788:	cc 24       	eor	r12, r12
   1378a:	dd 24       	eor	r13, r13
   1378c:	c6 01       	movw	r24, r12
   1378e:	a0 96       	adiw	r28, 0x20	; 32
   13790:	0f b6       	in	r0, 0x3f	; 63
   13792:	f8 94       	cli
   13794:	de bf       	out	0x3e, r29	; 62
   13796:	0f be       	out	0x3f, r0	; 63
   13798:	cd bf       	out	0x3d, r28	; 61
   1379a:	df 91       	pop	r29
   1379c:	cf 91       	pop	r28
   1379e:	1f 91       	pop	r17
   137a0:	0f 91       	pop	r16
   137a2:	ff 90       	pop	r15
   137a4:	ef 90       	pop	r14
   137a6:	df 90       	pop	r13
   137a8:	cf 90       	pop	r12
   137aa:	bf 90       	pop	r11
   137ac:	af 90       	pop	r10
   137ae:	9f 90       	pop	r9
   137b0:	8f 90       	pop	r8
   137b2:	7f 90       	pop	r7
   137b4:	6f 90       	pop	r6
   137b6:	5f 90       	pop	r5
   137b8:	4f 90       	pop	r4
   137ba:	08 95       	ret

000137bc <vfscanf>:
   137bc:	5f 92       	push	r5
   137be:	6f 92       	push	r6
   137c0:	7f 92       	push	r7
   137c2:	8f 92       	push	r8
   137c4:	9f 92       	push	r9
   137c6:	af 92       	push	r10
   137c8:	bf 92       	push	r11
   137ca:	cf 92       	push	r12
   137cc:	df 92       	push	r13
   137ce:	ef 92       	push	r14
   137d0:	ff 92       	push	r15
   137d2:	0f 93       	push	r16
   137d4:	1f 93       	push	r17
   137d6:	cf 93       	push	r28
   137d8:	df 93       	push	r29
   137da:	0f 92       	push	r0
   137dc:	cd b7       	in	r28, 0x3d	; 61
   137de:	de b7       	in	r29, 0x3e	; 62
   137e0:	7c 01       	movw	r14, r24
   137e2:	5b 01       	movw	r10, r22
   137e4:	3a 01       	movw	r6, r20
   137e6:	fc 01       	movw	r30, r24
   137e8:	17 82       	std	Z+7, r1	; 0x07
   137ea:	16 82       	std	Z+6, r1	; 0x06
   137ec:	99 24       	eor	r9, r9
   137ee:	ef c0       	rjmp	.+478    	; 0x139ce <vfscanf+0x212>
   137f0:	81 2f       	mov	r24, r17
   137f2:	90 e0       	ldi	r25, 0x00	; 0
   137f4:	0e 94 0b 9d 	call	0x13a16	; 0x13a16 <isspace>
   137f8:	00 97       	sbiw	r24, 0x00	; 0
   137fa:	21 f0       	breq	.+8      	; 0x13804 <vfscanf+0x48>
   137fc:	c7 01       	movw	r24, r14
   137fe:	0e 94 72 9a 	call	0x134e4	; 0x134e4 <skip_spaces>
   13802:	e5 c0       	rjmp	.+458    	; 0x139ce <vfscanf+0x212>
   13804:	15 32       	cpi	r17, 0x25	; 37
   13806:	41 f4       	brne	.+16     	; 0x13818 <vfscanf+0x5c>
   13808:	f5 01       	movw	r30, r10
   1380a:	03 fd       	sbrc	r16, 3
   1380c:	35 91       	lpm	r19, Z+
   1380e:	03 ff       	sbrs	r16, 3
   13810:	31 91       	ld	r19, Z+
   13812:	5f 01       	movw	r10, r30
   13814:	35 32       	cpi	r19, 0x25	; 37
   13816:	61 f4       	brne	.+24     	; 0x13830 <vfscanf+0x74>
   13818:	c7 01       	movw	r24, r14
   1381a:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   1381e:	97 fd       	sbrc	r25, 7
   13820:	e2 c0       	rjmp	.+452    	; 0x139e6 <vfscanf+0x22a>
   13822:	18 17       	cp	r17, r24
   13824:	09 f4       	brne	.+2      	; 0x13828 <vfscanf+0x6c>
   13826:	d3 c0       	rjmp	.+422    	; 0x139ce <vfscanf+0x212>
   13828:	b7 01       	movw	r22, r14
   1382a:	0e 94 5e 9d 	call	0x13abc	; 0x13abc <ungetc>
   1382e:	dd c0       	rjmp	.+442    	; 0x139ea <vfscanf+0x22e>
   13830:	3a 32       	cpi	r19, 0x2A	; 42
   13832:	41 f4       	brne	.+16     	; 0x13844 <vfscanf+0x88>
   13834:	03 fd       	sbrc	r16, 3
   13836:	35 91       	lpm	r19, Z+
   13838:	03 ff       	sbrs	r16, 3
   1383a:	31 91       	ld	r19, Z+
   1383c:	5f 01       	movw	r10, r30
   1383e:	55 24       	eor	r5, r5
   13840:	53 94       	inc	r5
   13842:	01 c0       	rjmp	.+2      	; 0x13846 <vfscanf+0x8a>
   13844:	55 24       	eor	r5, r5
   13846:	88 24       	eor	r8, r8
   13848:	10 c0       	rjmp	.+32     	; 0x1386a <vfscanf+0xae>
   1384a:	f2 e0       	ldi	r31, 0x02	; 2
   1384c:	5f 2a       	or	r5, r31
   1384e:	68 2d       	mov	r22, r8
   13850:	70 e0       	ldi	r23, 0x00	; 0
   13852:	80 e0       	ldi	r24, 0x00	; 0
   13854:	90 e0       	ldi	r25, 0x00	; 0
   13856:	40 e2       	ldi	r20, 0x20	; 32
   13858:	0e 94 46 9a 	call	0x1348c	; 0x1348c <mulacc>
   1385c:	86 2e       	mov	r8, r22
   1385e:	f5 01       	movw	r30, r10
   13860:	03 fd       	sbrc	r16, 3
   13862:	35 91       	lpm	r19, Z+
   13864:	03 ff       	sbrs	r16, 3
   13866:	31 91       	ld	r19, Z+
   13868:	5f 01       	movw	r10, r30
   1386a:	23 2f       	mov	r18, r19
   1386c:	20 53       	subi	r18, 0x30	; 48
   1386e:	2a 30       	cpi	r18, 0x0A	; 10
   13870:	60 f3       	brcs	.-40     	; 0x1384a <vfscanf+0x8e>
   13872:	51 fe       	sbrs	r5, 1
   13874:	03 c0       	rjmp	.+6      	; 0x1387c <vfscanf+0xc0>
   13876:	88 20       	and	r8, r8
   13878:	19 f4       	brne	.+6      	; 0x13880 <vfscanf+0xc4>
   1387a:	b7 c0       	rjmp	.+366    	; 0x139ea <vfscanf+0x22e>
   1387c:	88 24       	eor	r8, r8
   1387e:	8a 94       	dec	r8
   13880:	38 36       	cpi	r19, 0x68	; 104
   13882:	19 f0       	breq	.+6      	; 0x1388a <vfscanf+0xce>
   13884:	3c 36       	cpi	r19, 0x6C	; 108
   13886:	99 f4       	brne	.+38     	; 0x138ae <vfscanf+0xf2>
   13888:	0a c0       	rjmp	.+20     	; 0x1389e <vfscanf+0xe2>
   1388a:	f5 01       	movw	r30, r10
   1388c:	03 fd       	sbrc	r16, 3
   1388e:	35 91       	lpm	r19, Z+
   13890:	03 ff       	sbrs	r16, 3
   13892:	31 91       	ld	r19, Z+
   13894:	5f 01       	movw	r10, r30
   13896:	38 36       	cpi	r19, 0x68	; 104
   13898:	51 f4       	brne	.+20     	; 0x138ae <vfscanf+0xf2>
   1389a:	f8 e0       	ldi	r31, 0x08	; 8
   1389c:	5f 2a       	or	r5, r31
   1389e:	44 e0       	ldi	r20, 0x04	; 4
   138a0:	54 2a       	or	r5, r20
   138a2:	f5 01       	movw	r30, r10
   138a4:	03 fd       	sbrc	r16, 3
   138a6:	35 91       	lpm	r19, Z+
   138a8:	03 ff       	sbrs	r16, 3
   138aa:	31 91       	ld	r19, Z+
   138ac:	5f 01       	movw	r10, r30
   138ae:	33 23       	and	r19, r19
   138b0:	09 f4       	brne	.+2      	; 0x138b4 <vfscanf+0xf8>
   138b2:	9b c0       	rjmp	.+310    	; 0x139ea <vfscanf+0x22e>
   138b4:	84 ee       	ldi	r24, 0xE4	; 228
   138b6:	90 e0       	ldi	r25, 0x00	; 0
   138b8:	63 2f       	mov	r22, r19
   138ba:	70 e0       	ldi	r23, 0x00	; 0
   138bc:	39 83       	std	Y+1, r19	; 0x01
   138be:	0e 94 13 9d 	call	0x13a26	; 0x13a26 <strchr_P>
   138c2:	39 81       	ldd	r19, Y+1	; 0x01
   138c4:	00 97       	sbiw	r24, 0x00	; 0
   138c6:	09 f4       	brne	.+2      	; 0x138ca <vfscanf+0x10e>
   138c8:	90 c0       	rjmp	.+288    	; 0x139ea <vfscanf+0x22e>
   138ca:	85 2d       	mov	r24, r5
   138cc:	50 fc       	sbrc	r5, 0
   138ce:	08 c0       	rjmp	.+16     	; 0x138e0 <vfscanf+0x124>
   138d0:	f3 01       	movw	r30, r6
   138d2:	00 81       	ld	r16, Z
   138d4:	11 81       	ldd	r17, Z+1	; 0x01
   138d6:	42 e0       	ldi	r20, 0x02	; 2
   138d8:	50 e0       	ldi	r21, 0x00	; 0
   138da:	64 0e       	add	r6, r20
   138dc:	75 1e       	adc	r7, r21
   138de:	02 c0       	rjmp	.+4      	; 0x138e4 <vfscanf+0x128>
   138e0:	00 e0       	ldi	r16, 0x00	; 0
   138e2:	10 e0       	ldi	r17, 0x00	; 0
   138e4:	3e 36       	cpi	r19, 0x6E	; 110
   138e6:	51 f4       	brne	.+20     	; 0x138fc <vfscanf+0x140>
   138e8:	f7 01       	movw	r30, r14
   138ea:	46 81       	ldd	r20, Z+6	; 0x06
   138ec:	57 81       	ldd	r21, Z+7	; 0x07
   138ee:	60 e0       	ldi	r22, 0x00	; 0
   138f0:	70 e0       	ldi	r23, 0x00	; 0
   138f2:	c8 01       	movw	r24, r16
   138f4:	25 2d       	mov	r18, r5
   138f6:	0e 94 3a 9a 	call	0x13474	; 0x13474 <putval>
   138fa:	69 c0       	rjmp	.+210    	; 0x139ce <vfscanf+0x212>
   138fc:	33 36       	cpi	r19, 0x63	; 99
   138fe:	91 f4       	brne	.+36     	; 0x13924 <vfscanf+0x168>
   13900:	81 fd       	sbrc	r24, 1
   13902:	02 c0       	rjmp	.+4      	; 0x13908 <vfscanf+0x14c>
   13904:	88 24       	eor	r8, r8
   13906:	83 94       	inc	r8
   13908:	c7 01       	movw	r24, r14
   1390a:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   1390e:	97 fd       	sbrc	r25, 7
   13910:	6a c0       	rjmp	.+212    	; 0x139e6 <vfscanf+0x22a>
   13912:	01 15       	cp	r16, r1
   13914:	11 05       	cpc	r17, r1
   13916:	19 f0       	breq	.+6      	; 0x1391e <vfscanf+0x162>
   13918:	f8 01       	movw	r30, r16
   1391a:	81 93       	st	Z+, r24
   1391c:	8f 01       	movw	r16, r30
   1391e:	8a 94       	dec	r8
   13920:	99 f7       	brne	.-26     	; 0x13908 <vfscanf+0x14c>
   13922:	53 c0       	rjmp	.+166    	; 0x139ca <vfscanf+0x20e>
   13924:	c7 01       	movw	r24, r14
   13926:	3b 35       	cpi	r19, 0x5B	; 91
   13928:	51 f4       	brne	.+20     	; 0x1393e <vfscanf+0x182>
   1392a:	68 2d       	mov	r22, r8
   1392c:	a8 01       	movw	r20, r16
   1392e:	95 01       	movw	r18, r10
   13930:	0e 94 10 9b 	call	0x13620	; 0x13620 <conv_brk>
   13934:	5c 01       	movw	r10, r24
   13936:	00 97       	sbiw	r24, 0x00	; 0
   13938:	09 f0       	breq	.+2      	; 0x1393c <vfscanf+0x180>
   1393a:	47 c0       	rjmp	.+142    	; 0x139ca <vfscanf+0x20e>
   1393c:	41 c0       	rjmp	.+130    	; 0x139c0 <vfscanf+0x204>
   1393e:	39 83       	std	Y+1, r19	; 0x01
   13940:	0e 94 72 9a 	call	0x134e4	; 0x134e4 <skip_spaces>
   13944:	39 81       	ldd	r19, Y+1	; 0x01
   13946:	97 fd       	sbrc	r25, 7
   13948:	4e c0       	rjmp	.+156    	; 0x139e6 <vfscanf+0x22a>
   1394a:	3f 36       	cpi	r19, 0x6F	; 111
   1394c:	61 f1       	breq	.+88     	; 0x139a6 <vfscanf+0x1ea>
   1394e:	30 37       	cpi	r19, 0x70	; 112
   13950:	28 f4       	brcc	.+10     	; 0x1395c <vfscanf+0x1a0>
   13952:	34 36       	cpi	r19, 0x64	; 100
   13954:	29 f1       	breq	.+74     	; 0x139a0 <vfscanf+0x1e4>
   13956:	39 36       	cpi	r19, 0x69	; 105
   13958:	49 f5       	brne	.+82     	; 0x139ac <vfscanf+0x1f0>
   1395a:	2a c0       	rjmp	.+84     	; 0x139b0 <vfscanf+0x1f4>
   1395c:	33 37       	cpi	r19, 0x73	; 115
   1395e:	19 f0       	breq	.+6      	; 0x13966 <vfscanf+0x1aa>
   13960:	35 37       	cpi	r19, 0x75	; 117
   13962:	21 f5       	brne	.+72     	; 0x139ac <vfscanf+0x1f0>
   13964:	1d c0       	rjmp	.+58     	; 0x139a0 <vfscanf+0x1e4>
   13966:	c7 01       	movw	r24, r14
   13968:	0e 94 1e 9d 	call	0x13a3c	; 0x13a3c <fgetc>
   1396c:	6c 01       	movw	r12, r24
   1396e:	97 fd       	sbrc	r25, 7
   13970:	11 c0       	rjmp	.+34     	; 0x13994 <vfscanf+0x1d8>
   13972:	0e 94 0b 9d 	call	0x13a16	; 0x13a16 <isspace>
   13976:	00 97       	sbiw	r24, 0x00	; 0
   13978:	29 f0       	breq	.+10     	; 0x13984 <vfscanf+0x1c8>
   1397a:	c6 01       	movw	r24, r12
   1397c:	b7 01       	movw	r22, r14
   1397e:	0e 94 5e 9d 	call	0x13abc	; 0x13abc <ungetc>
   13982:	08 c0       	rjmp	.+16     	; 0x13994 <vfscanf+0x1d8>
   13984:	01 15       	cp	r16, r1
   13986:	11 05       	cpc	r17, r1
   13988:	19 f0       	breq	.+6      	; 0x13990 <vfscanf+0x1d4>
   1398a:	f8 01       	movw	r30, r16
   1398c:	c1 92       	st	Z+, r12
   1398e:	8f 01       	movw	r16, r30
   13990:	8a 94       	dec	r8
   13992:	49 f7       	brne	.-46     	; 0x13966 <vfscanf+0x1aa>
   13994:	01 15       	cp	r16, r1
   13996:	11 05       	cpc	r17, r1
   13998:	c1 f0       	breq	.+48     	; 0x139ca <vfscanf+0x20e>
   1399a:	f8 01       	movw	r30, r16
   1399c:	10 82       	st	Z, r1
   1399e:	15 c0       	rjmp	.+42     	; 0x139ca <vfscanf+0x20e>
   139a0:	f0 e2       	ldi	r31, 0x20	; 32
   139a2:	5f 2a       	or	r5, r31
   139a4:	05 c0       	rjmp	.+10     	; 0x139b0 <vfscanf+0x1f4>
   139a6:	40 e1       	ldi	r20, 0x10	; 16
   139a8:	54 2a       	or	r5, r20
   139aa:	02 c0       	rjmp	.+4      	; 0x139b0 <vfscanf+0x1f4>
   139ac:	50 e4       	ldi	r21, 0x40	; 64
   139ae:	55 2a       	or	r5, r21
   139b0:	c7 01       	movw	r24, r14
   139b2:	68 2d       	mov	r22, r8
   139b4:	a8 01       	movw	r20, r16
   139b6:	25 2d       	mov	r18, r5
   139b8:	0e 94 8b 9a 	call	0x13516	; 0x13516 <conv_int>
   139bc:	88 23       	and	r24, r24
   139be:	29 f4       	brne	.+10     	; 0x139ca <vfscanf+0x20e>
   139c0:	f7 01       	movw	r30, r14
   139c2:	83 81       	ldd	r24, Z+3	; 0x03
   139c4:	80 73       	andi	r24, 0x30	; 48
   139c6:	79 f4       	brne	.+30     	; 0x139e6 <vfscanf+0x22a>
   139c8:	10 c0       	rjmp	.+32     	; 0x139ea <vfscanf+0x22e>
   139ca:	50 fe       	sbrs	r5, 0
   139cc:	93 94       	inc	r9
   139ce:	f7 01       	movw	r30, r14
   139d0:	03 81       	ldd	r16, Z+3	; 0x03
   139d2:	f5 01       	movw	r30, r10
   139d4:	03 fd       	sbrc	r16, 3
   139d6:	15 91       	lpm	r17, Z+
   139d8:	03 ff       	sbrs	r16, 3
   139da:	11 91       	ld	r17, Z+
   139dc:	5f 01       	movw	r10, r30
   139de:	11 23       	and	r17, r17
   139e0:	09 f0       	breq	.+2      	; 0x139e4 <vfscanf+0x228>
   139e2:	06 cf       	rjmp	.-500    	; 0x137f0 <vfscanf+0x34>
   139e4:	02 c0       	rjmp	.+4      	; 0x139ea <vfscanf+0x22e>
   139e6:	99 20       	and	r9, r9
   139e8:	19 f0       	breq	.+6      	; 0x139f0 <vfscanf+0x234>
   139ea:	89 2d       	mov	r24, r9
   139ec:	90 e0       	ldi	r25, 0x00	; 0
   139ee:	02 c0       	rjmp	.+4      	; 0x139f4 <vfscanf+0x238>
   139f0:	8f ef       	ldi	r24, 0xFF	; 255
   139f2:	9f ef       	ldi	r25, 0xFF	; 255
   139f4:	0f 90       	pop	r0
   139f6:	df 91       	pop	r29
   139f8:	cf 91       	pop	r28
   139fa:	1f 91       	pop	r17
   139fc:	0f 91       	pop	r16
   139fe:	ff 90       	pop	r15
   13a00:	ef 90       	pop	r14
   13a02:	df 90       	pop	r13
   13a04:	cf 90       	pop	r12
   13a06:	bf 90       	pop	r11
   13a08:	af 90       	pop	r10
   13a0a:	9f 90       	pop	r9
   13a0c:	8f 90       	pop	r8
   13a0e:	7f 90       	pop	r7
   13a10:	6f 90       	pop	r6
   13a12:	5f 90       	pop	r5
   13a14:	08 95       	ret

00013a16 <isspace>:
   13a16:	91 11       	cpse	r25, r1
   13a18:	6e c0       	rjmp	.+220    	; 0x13af6 <__ctype_isfalse>
   13a1a:	80 32       	cpi	r24, 0x20	; 32
   13a1c:	19 f0       	breq	.+6      	; 0x13a24 <isspace+0xe>
   13a1e:	89 50       	subi	r24, 0x09	; 9
   13a20:	85 50       	subi	r24, 0x05	; 5
   13a22:	d0 f7       	brcc	.-12     	; 0x13a18 <isspace+0x2>
   13a24:	08 95       	ret

00013a26 <strchr_P>:
   13a26:	fc 01       	movw	r30, r24
   13a28:	05 90       	lpm	r0, Z+
   13a2a:	06 16       	cp	r0, r22
   13a2c:	21 f0       	breq	.+8      	; 0x13a36 <strchr_P+0x10>
   13a2e:	00 20       	and	r0, r0
   13a30:	d9 f7       	brne	.-10     	; 0x13a28 <strchr_P+0x2>
   13a32:	c0 01       	movw	r24, r0
   13a34:	08 95       	ret
   13a36:	31 97       	sbiw	r30, 0x01	; 1
   13a38:	cf 01       	movw	r24, r30
   13a3a:	08 95       	ret

00013a3c <fgetc>:
   13a3c:	cf 93       	push	r28
   13a3e:	df 93       	push	r29
   13a40:	ec 01       	movw	r28, r24
   13a42:	2b 81       	ldd	r18, Y+3	; 0x03
   13a44:	20 ff       	sbrs	r18, 0
   13a46:	35 c0       	rjmp	.+106    	; 0x13ab2 <fgetc+0x76>
   13a48:	26 ff       	sbrs	r18, 6
   13a4a:	09 c0       	rjmp	.+18     	; 0x13a5e <fgetc+0x22>
   13a4c:	2f 7b       	andi	r18, 0xBF	; 191
   13a4e:	2b 83       	std	Y+3, r18	; 0x03
   13a50:	8e 81       	ldd	r24, Y+6	; 0x06
   13a52:	9f 81       	ldd	r25, Y+7	; 0x07
   13a54:	01 96       	adiw	r24, 0x01	; 1
   13a56:	9f 83       	std	Y+7, r25	; 0x07
   13a58:	8e 83       	std	Y+6, r24	; 0x06
   13a5a:	8a 81       	ldd	r24, Y+2	; 0x02
   13a5c:	28 c0       	rjmp	.+80     	; 0x13aae <fgetc+0x72>
   13a5e:	22 ff       	sbrs	r18, 2
   13a60:	0f c0       	rjmp	.+30     	; 0x13a80 <fgetc+0x44>
   13a62:	e8 81       	ld	r30, Y
   13a64:	f9 81       	ldd	r31, Y+1	; 0x01
   13a66:	80 81       	ld	r24, Z
   13a68:	99 27       	eor	r25, r25
   13a6a:	87 fd       	sbrc	r24, 7
   13a6c:	90 95       	com	r25
   13a6e:	00 97       	sbiw	r24, 0x00	; 0
   13a70:	19 f4       	brne	.+6      	; 0x13a78 <fgetc+0x3c>
   13a72:	20 62       	ori	r18, 0x20	; 32
   13a74:	2b 83       	std	Y+3, r18	; 0x03
   13a76:	1d c0       	rjmp	.+58     	; 0x13ab2 <fgetc+0x76>
   13a78:	31 96       	adiw	r30, 0x01	; 1
   13a7a:	f9 83       	std	Y+1, r31	; 0x01
   13a7c:	e8 83       	st	Y, r30
   13a7e:	11 c0       	rjmp	.+34     	; 0x13aa2 <fgetc+0x66>
   13a80:	ea 85       	ldd	r30, Y+10	; 0x0a
   13a82:	fb 85       	ldd	r31, Y+11	; 0x0b
   13a84:	ce 01       	movw	r24, r28
   13a86:	19 95       	eicall
   13a88:	97 ff       	sbrs	r25, 7
   13a8a:	0b c0       	rjmp	.+22     	; 0x13aa2 <fgetc+0x66>
   13a8c:	2b 81       	ldd	r18, Y+3	; 0x03
   13a8e:	3f ef       	ldi	r19, 0xFF	; 255
   13a90:	8f 3f       	cpi	r24, 0xFF	; 255
   13a92:	93 07       	cpc	r25, r19
   13a94:	11 f4       	brne	.+4      	; 0x13a9a <fgetc+0x5e>
   13a96:	80 e1       	ldi	r24, 0x10	; 16
   13a98:	01 c0       	rjmp	.+2      	; 0x13a9c <fgetc+0x60>
   13a9a:	80 e2       	ldi	r24, 0x20	; 32
   13a9c:	82 2b       	or	r24, r18
   13a9e:	8b 83       	std	Y+3, r24	; 0x03
   13aa0:	08 c0       	rjmp	.+16     	; 0x13ab2 <fgetc+0x76>
   13aa2:	2e 81       	ldd	r18, Y+6	; 0x06
   13aa4:	3f 81       	ldd	r19, Y+7	; 0x07
   13aa6:	2f 5f       	subi	r18, 0xFF	; 255
   13aa8:	3f 4f       	sbci	r19, 0xFF	; 255
   13aaa:	3f 83       	std	Y+7, r19	; 0x07
   13aac:	2e 83       	std	Y+6, r18	; 0x06
   13aae:	90 e0       	ldi	r25, 0x00	; 0
   13ab0:	02 c0       	rjmp	.+4      	; 0x13ab6 <fgetc+0x7a>
   13ab2:	8f ef       	ldi	r24, 0xFF	; 255
   13ab4:	9f ef       	ldi	r25, 0xFF	; 255
   13ab6:	df 91       	pop	r29
   13ab8:	cf 91       	pop	r28
   13aba:	08 95       	ret

00013abc <ungetc>:
   13abc:	fb 01       	movw	r30, r22
   13abe:	23 81       	ldd	r18, Z+3	; 0x03
   13ac0:	20 ff       	sbrs	r18, 0
   13ac2:	13 c0       	rjmp	.+38     	; 0x13aea <ungetc+0x2e>
   13ac4:	26 fd       	sbrc	r18, 6
   13ac6:	11 c0       	rjmp	.+34     	; 0x13aea <ungetc+0x2e>
   13ac8:	3f ef       	ldi	r19, 0xFF	; 255
   13aca:	8f 3f       	cpi	r24, 0xFF	; 255
   13acc:	93 07       	cpc	r25, r19
   13ace:	81 f0       	breq	.+32     	; 0x13af0 <ungetc+0x34>
   13ad0:	82 83       	std	Z+2, r24	; 0x02
   13ad2:	92 2f       	mov	r25, r18
   13ad4:	90 64       	ori	r25, 0x40	; 64
   13ad6:	9f 7d       	andi	r25, 0xDF	; 223
   13ad8:	93 83       	std	Z+3, r25	; 0x03
   13ada:	26 81       	ldd	r18, Z+6	; 0x06
   13adc:	37 81       	ldd	r19, Z+7	; 0x07
   13ade:	21 50       	subi	r18, 0x01	; 1
   13ae0:	30 40       	sbci	r19, 0x00	; 0
   13ae2:	37 83       	std	Z+7, r19	; 0x07
   13ae4:	26 83       	std	Z+6, r18	; 0x06
   13ae6:	90 e0       	ldi	r25, 0x00	; 0
   13ae8:	08 95       	ret
   13aea:	8f ef       	ldi	r24, 0xFF	; 255
   13aec:	9f ef       	ldi	r25, 0xFF	; 255
   13aee:	08 95       	ret
   13af0:	8f ef       	ldi	r24, 0xFF	; 255
   13af2:	9f ef       	ldi	r25, 0xFF	; 255
   13af4:	08 95       	ret

00013af6 <__ctype_isfalse>:
   13af6:	99 27       	eor	r25, r25
   13af8:	88 27       	eor	r24, r24

00013afa <__ctype_istrue>:
   13afa:	08 95       	ret

00013afc <_exit>:
   13afc:	f8 94       	cli

00013afe <__stop_program>:
   13afe:	ff cf       	rjmp	.-2      	; 0x13afe <__stop_program>
