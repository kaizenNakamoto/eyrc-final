
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800200  0000ea1c  0000eab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ea1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  00800340  00800340  0000ebf0  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  0000ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009e7  00000000  00000000  0001150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001d0  00000000  00000000  00011ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000626b  00000000  00000000  000120c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  00018333  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029ee  00000000  00000000  00018d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001310  00000000  00000000  0001b718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d07  00000000  00000000  0001ca28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000358e  00000000  00000000  0001d72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00020cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_5>
      18:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_6>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__vector_35>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__vector_45>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 ea 67 	jmp	0xcfd4	; 0xcfd4 <__vector_51>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ec e1       	ldi	r30, 0x1C	; 28
     108:	fa ee       	ldi	r31, 0xEA	; 234
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 34       	cpi	r26, 0x40	; 64
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	15 e0       	ldi	r17, 0x05	; 5
     11c:	a0 e4       	ldi	r26, 0x40	; 64
     11e:	b3 e0       	ldi	r27, 0x03	; 3
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	af 30       	cpi	r26, 0x0F	; 15
     126:	b1 07       	cpc	r27, r17
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 ee 69 	call	0xd3dc	; 0xd3dc <main>
     12e:	0c 94 0c 75 	jmp	0xea18	; 0xea18 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <lcd_set_4bit>:

/*****Function to Reset LCD*****/

void lcd_set_4bit()

{
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	c0 57       	subi	r28, 0x70	; 112
     144:	d0 40       	sbci	r29, 0x00	; 0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e8       	ldi	r26, 0x80	; 128
     156:	bf e3       	ldi	r27, 0x3F	; 63
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	ab 83       	std	Y+3, r26	; 0x03
     15e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	26 e6       	ldi	r18, 0x66	; 102
     16a:	36 e6       	ldi	r19, 0x66	; 102
     16c:	46 e6       	ldi	r20, 0x66	; 102
     16e:	55 e4       	ldi	r21, 0x45	; 69
     170:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	8d 83       	std	Y+5, r24	; 0x05
     17a:	9e 83       	std	Y+6, r25	; 0x06
     17c:	af 83       	std	Y+7, r26	; 0x07
     17e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e8       	ldi	r20, 0x80	; 128
     190:	5f e3       	ldi	r21, 0x3F	; 63
     192:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <lcd_set_4bit+0x66>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	29 f0       	breq	.+10     	; 0x1aa <lcd_set_4bit+0x74>
		__ticks = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	3f ef       	ldi	r19, 0xFF	; 255
     1b8:	4f e7       	ldi	r20, 0x7F	; 127
     1ba:	57 e4       	ldi	r21, 0x47	; 71
     1bc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     1c0:	18 16       	cp	r1, r24
     1c2:	0c f0       	brlt	.+2      	; 0x1c6 <lcd_set_4bit+0x90>
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	11 23       	and	r17, r17
     1c8:	61 f1       	breq	.+88     	; 0x222 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ca:	69 81       	ldd	r22, Y+1	; 0x01
     1cc:	7a 81       	ldd	r23, Y+2	; 0x02
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	89 87       	std	Y+9, r24	; 0x09
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <lcd_set_4bit+0xe2>
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	8c 01       	movw	r16, r24
     202:	c8 01       	movw	r24, r16
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0xce>
     208:	8c 01       	movw	r16, r24
     20a:	1c 87       	std	Y+12, r17	; 0x0c
     20c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	9a 85       	ldd	r25, Y+10	; 0x0a
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	51 f7       	brne	.-44     	; 0x1f4 <lcd_set_4bit+0xbe>
     220:	17 c0       	rjmp	.+46     	; 0x250 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	6d 81       	ldd	r22, Y+5	; 0x05
     224:	7e 81       	ldd	r23, Y+6	; 0x06
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	9e 87       	std	Y+14, r25	; 0x0e
     23c:	8d 87       	std	Y+13, r24	; 0x0d
     23e:	8d 85       	ldd	r24, Y+13	; 0x0d
     240:	9e 85       	ldd	r25, Y+14	; 0x0e
     242:	8c 01       	movw	r16, r24
     244:	f8 01       	movw	r30, r16
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_set_4bit+0x110>
     24a:	8f 01       	movw	r16, r30
     24c:	1e 87       	std	Y+14, r17	; 0x0e
     24e:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	28 e2       	ldi	r18, 0x28	; 40
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2e 7f       	andi	r18, 0xFE	; 254
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     262:	88 e2       	ldi	r24, 0x28	; 40
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	28 e2       	ldi	r18, 0x28	; 40
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	20 e3       	ldi	r18, 0x30	; 48
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 e2       	ldi	r18, 0x28	; 40
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	24 60       	ori	r18, 0x04	; 4
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 ea       	ldi	r26, 0xA0	; 160
     296:	b0 e4       	ldi	r27, 0x40	; 64
     298:	8f 87       	std	Y+15, r24	; 0x0f
     29a:	98 8b       	std	Y+16, r25	; 0x10
     29c:	a9 8b       	std	Y+17, r26	; 0x11
     29e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a2:	78 89       	ldd	r23, Y+16	; 0x10
     2a4:	89 89       	ldd	r24, Y+17	; 0x11
     2a6:	9a 89       	ldd	r25, Y+18	; 0x12
     2a8:	26 e6       	ldi	r18, 0x66	; 102
     2aa:	36 e6       	ldi	r19, 0x66	; 102
     2ac:	46 e6       	ldi	r20, 0x66	; 102
     2ae:	55 e4       	ldi	r21, 0x45	; 69
     2b0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	8b 8b       	std	Y+19, r24	; 0x13
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	ad 8b       	std	Y+21, r26	; 0x15
     2be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	6b 89       	ldd	r22, Y+19	; 0x13
     2c4:	7c 89       	ldd	r23, Y+20	; 0x14
     2c6:	8d 89       	ldd	r24, Y+21	; 0x15
     2c8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <lcd_set_4bit+0x1a6>
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	11 23       	and	r17, r17
     2de:	29 f0       	breq	.+10     	; 0x2ea <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 8f       	std	Y+24, r25	; 0x18
     2e6:	8f 8b       	std	Y+23, r24	; 0x17
     2e8:	46 c0       	rjmp	.+140    	; 0x376 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	6b 89       	ldd	r22, Y+19	; 0x13
     2ee:	7c 89       	ldd	r23, Y+20	; 0x14
     2f0:	8d 89       	ldd	r24, Y+21	; 0x15
     2f2:	9e 89       	ldd	r25, Y+22	; 0x16
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	3f ef       	ldi	r19, 0xFF	; 255
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	57 e4       	ldi	r21, 0x47	; 71
     2fc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     300:	18 16       	cp	r1, r24
     302:	0c f0       	brlt	.+2      	; 0x306 <lcd_set_4bit+0x1d0>
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	11 23       	and	r17, r17
     308:	61 f1       	breq	.+88     	; 0x362 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     30a:	6f 85       	ldd	r22, Y+15	; 0x0f
     30c:	78 89       	ldd	r23, Y+16	; 0x10
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	9a 89       	ldd	r25, Y+18	; 0x12
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	98 8f       	std	Y+24, r25	; 0x18
     330:	8f 8b       	std	Y+23, r24	; 0x17
     332:	12 c0       	rjmp	.+36     	; 0x358 <lcd_set_4bit+0x222>
     334:	80 e7       	ldi	r24, 0x70	; 112
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	9a 8f       	std	Y+26, r25	; 0x1a
     33a:	89 8f       	std	Y+25, r24	; 0x19
     33c:	89 8d       	ldd	r24, Y+25	; 0x19
     33e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     340:	8c 01       	movw	r16, r24
     342:	c8 01       	movw	r24, r16
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_set_4bit+0x20e>
     348:	8c 01       	movw	r16, r24
     34a:	1a 8f       	std	Y+26, r17	; 0x1a
     34c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34e:	8f 89       	ldd	r24, Y+23	; 0x17
     350:	98 8d       	ldd	r25, Y+24	; 0x18
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	98 8f       	std	Y+24, r25	; 0x18
     356:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     358:	8f 89       	ldd	r24, Y+23	; 0x17
     35a:	98 8d       	ldd	r25, Y+24	; 0x18
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	51 f7       	brne	.-44     	; 0x334 <lcd_set_4bit+0x1fe>
     360:	17 c0       	rjmp	.+46     	; 0x390 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	6b 89       	ldd	r22, Y+19	; 0x13
     364:	7c 89       	ldd	r23, Y+20	; 0x14
     366:	8d 89       	ldd	r24, Y+21	; 0x15
     368:	9e 89       	ldd	r25, Y+22	; 0x16
     36a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	98 8f       	std	Y+24, r25	; 0x18
     374:	8f 8b       	std	Y+23, r24	; 0x17
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	9c 8f       	std	Y+28, r25	; 0x1c
     37c:	8b 8f       	std	Y+27, r24	; 0x1b
     37e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     380:	9c 8d       	ldd	r25, Y+28	; 0x1c
     382:	8c 01       	movw	r16, r24
     384:	f8 01       	movw	r30, r16
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_set_4bit+0x250>
     38a:	8f 01       	movw	r16, r30
     38c:	1c 8f       	std	Y+28, r17	; 0x1c
     38e:	0b 8f       	std	Y+27, r16	; 0x1b

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     390:	88 e2       	ldi	r24, 0x28	; 40
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	28 e2       	ldi	r18, 0x28	; 40
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2b 7f       	andi	r18, 0xFB	; 251
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e8       	ldi	r26, 0x80	; 128
     3a8:	bf e3       	ldi	r27, 0x3F	; 63
     3aa:	8d 8f       	std	Y+29, r24	; 0x1d
     3ac:	9e 8f       	std	Y+30, r25	; 0x1e
     3ae:	af 8f       	std	Y+31, r26	; 0x1f
     3b0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3b4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b8:	98 a1       	lds	r25, 0x48
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	46 e6       	ldi	r20, 0x66	; 102
     3c0:	55 e4       	ldi	r21, 0x45	; 69
     3c2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	89 a3       	lds	r24, 0x59
     3cc:	9a a3       	lds	r25, 0x5a
     3ce:	ab a3       	lds	r26, 0x5b
     3d0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 a1       	lds	r22, 0x49
     3d6:	7a a1       	lds	r23, 0x4a
     3d8:	8b a1       	lds	r24, 0x4b
     3da:	9c a1       	lds	r25, 0x4c
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5f e3       	ldi	r21, 0x3F	; 63
     3e4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <lcd_set_4bit+0x2b8>
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	11 23       	and	r17, r17
     3f0:	29 f0       	breq	.+10     	; 0x3fc <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9e a3       	lds	r25, 0x5e
     3f8:	8d a3       	lds	r24, 0x5d
     3fa:	46 c0       	rjmp	.+140    	; 0x488 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3fc:	11 e0       	ldi	r17, 0x01	; 1
     3fe:	69 a1       	lds	r22, 0x49
     400:	7a a1       	lds	r23, 0x4a
     402:	8b a1       	lds	r24, 0x4b
     404:	9c a1       	lds	r25, 0x4c
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	0c f0       	brlt	.+2      	; 0x418 <lcd_set_4bit+0x2e2>
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	11 23       	and	r17, r17
     41a:	61 f1       	breq	.+88     	; 0x474 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     41e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     420:	8f 8d       	ldd	r24, Y+31	; 0x1f
     422:	98 a1       	lds	r25, 0x48
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e2       	ldi	r20, 0x20	; 32
     42a:	51 e4       	ldi	r21, 0x41	; 65
     42c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	9e a3       	lds	r25, 0x5e
     442:	8d a3       	lds	r24, 0x5d
     444:	12 c0       	rjmp	.+36     	; 0x46a <lcd_set_4bit+0x334>
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 a7       	lds	r25, 0x78
     44c:	8f a3       	lds	r24, 0x5f
     44e:	8f a1       	lds	r24, 0x4f
     450:	98 a5       	lds	r25, 0x68
     452:	8c 01       	movw	r16, r24
     454:	c8 01       	movw	r24, r16
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_set_4bit+0x320>
     45a:	8c 01       	movw	r16, r24
     45c:	18 a7       	lds	r17, 0x78
     45e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	8d a1       	lds	r24, 0x4d
     462:	9e a1       	lds	r25, 0x4e
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	9e a3       	lds	r25, 0x5e
     468:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	8d a1       	lds	r24, 0x4d
     46c:	9e a1       	lds	r25, 0x4e
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	51 f7       	brne	.-44     	; 0x446 <lcd_set_4bit+0x310>
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     474:	69 a1       	lds	r22, 0x49
     476:	7a a1       	lds	r23, 0x4a
     478:	8b a1       	lds	r24, 0x4b
     47a:	9c a1       	lds	r25, 0x4c
     47c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9e a3       	lds	r25, 0x5e
     486:	8d a3       	lds	r24, 0x5d
     488:	8d a1       	lds	r24, 0x4d
     48a:	9e a1       	lds	r25, 0x4e
     48c:	9a a7       	lds	r25, 0x7a
     48e:	89 a7       	lds	r24, 0x79
     490:	89 a5       	lds	r24, 0x69
     492:	9a a5       	lds	r25, 0x6a
     494:	8c 01       	movw	r16, r24
     496:	f8 01       	movw	r30, r16
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_set_4bit+0x362>
     49c:	8f 01       	movw	r16, r30
     49e:	1a a7       	lds	r17, 0x7a
     4a0:	09 a7       	lds	r16, 0x79

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	28 e2       	ldi	r18, 0x28	; 40
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2e 7f       	andi	r18, 0xFE	; 254
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4b4:	88 e2       	ldi	r24, 0x28	; 40
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 e2       	ldi	r18, 0x28	; 40
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2d 7f       	andi	r18, 0xFD	; 253
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	20 e3       	ldi	r18, 0x30	; 48
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     4d0:	88 e2       	ldi	r24, 0x28	; 40
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 e2       	ldi	r18, 0x28	; 40
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	24 60       	ori	r18, 0x04	; 4
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 ea       	ldi	r26, 0xA0	; 160
     4e8:	b0 e4       	ldi	r27, 0x40	; 64
     4ea:	8b a7       	lds	r24, 0x7b
     4ec:	9c a7       	lds	r25, 0x7c
     4ee:	ad a7       	lds	r26, 0x7d
     4f0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f2:	6b a5       	lds	r22, 0x6b
     4f4:	7c a5       	lds	r23, 0x6c
     4f6:	8d a5       	lds	r24, 0x6d
     4f8:	9e a5       	lds	r25, 0x6e
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 e6       	ldi	r20, 0x66	; 102
     500:	55 e4       	ldi	r21, 0x45	; 69
     502:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	8f a7       	lds	r24, 0x7f
     50c:	98 ab       	sts	0x58, r25
     50e:	a9 ab       	sts	0x59, r26
     510:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     512:	11 e0       	ldi	r17, 0x01	; 1
     514:	6f a5       	lds	r22, 0x6f
     516:	78 a9       	sts	0x48, r23
     518:	89 a9       	sts	0x49, r24
     51a:	9a a9       	sts	0x4a, r25
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	0c f0       	brlt	.+2      	; 0x52e <lcd_set_4bit+0x3f8>
     52c:	10 e0       	ldi	r17, 0x00	; 0
     52e:	11 23       	and	r17, r17
     530:	29 f0       	breq	.+10     	; 0x53c <lcd_set_4bit+0x406>
		__ticks = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9c ab       	sts	0x5c, r25
     538:	8b ab       	sts	0x5b, r24
     53a:	46 c0       	rjmp	.+140    	; 0x5c8 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	6f a5       	lds	r22, 0x6f
     540:	78 a9       	sts	0x48, r23
     542:	89 a9       	sts	0x49, r24
     544:	9a a9       	sts	0x4a, r25
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	3f ef       	ldi	r19, 0xFF	; 255
     54a:	4f e7       	ldi	r20, 0x7F	; 127
     54c:	57 e4       	ldi	r21, 0x47	; 71
     54e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <lcd_set_4bit+0x422>
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	11 23       	and	r17, r17
     55a:	61 f1       	breq	.+88     	; 0x5b4 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	6b a5       	lds	r22, 0x6b
     55e:	7c a5       	lds	r23, 0x6c
     560:	8d a5       	lds	r24, 0x6d
     562:	9e a5       	lds	r25, 0x6e
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c ab       	sts	0x5c, r25
     582:	8b ab       	sts	0x5b, r24
     584:	12 c0       	rjmp	.+36     	; 0x5aa <lcd_set_4bit+0x474>
     586:	80 e7       	ldi	r24, 0x70	; 112
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9e ab       	sts	0x5e, r25
     58c:	8d ab       	sts	0x5d, r24
     58e:	8d a9       	sts	0x4d, r24
     590:	9e a9       	sts	0x4e, r25
     592:	8c 01       	movw	r16, r24
     594:	c8 01       	movw	r24, r16
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_set_4bit+0x460>
     59a:	8c 01       	movw	r16, r24
     59c:	1e ab       	sts	0x5e, r17
     59e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	8b a9       	sts	0x4b, r24
     5a2:	9c a9       	sts	0x4c, r25
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9c ab       	sts	0x5c, r25
     5a8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	8b a9       	sts	0x4b, r24
     5ac:	9c a9       	sts	0x4c, r25
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	51 f7       	brne	.-44     	; 0x586 <lcd_set_4bit+0x450>
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6f a5       	lds	r22, 0x6f
     5b6:	78 a9       	sts	0x48, r23
     5b8:	89 a9       	sts	0x49, r24
     5ba:	9a a9       	sts	0x4a, r25
     5bc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9c ab       	sts	0x5c, r25
     5c6:	8b ab       	sts	0x5b, r24
     5c8:	8b a9       	sts	0x4b, r24
     5ca:	9c a9       	sts	0x4c, r25
     5cc:	98 af       	sts	0x78, r25
     5ce:	8f ab       	sts	0x5f, r24
     5d0:	8f a9       	sts	0x4f, r24
     5d2:	98 ad       	sts	0x68, r25
     5d4:	8c 01       	movw	r16, r24
     5d6:	f8 01       	movw	r30, r16
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_set_4bit+0x4a2>
     5dc:	8f 01       	movw	r16, r30
     5de:	18 af       	sts	0x78, r17
     5e0:	0f ab       	sts	0x5f, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	28 e2       	ldi	r18, 0x28	; 40
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	2b 7f       	andi	r18, 0xFB	; 251
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e8       	ldi	r26, 0x80	; 128
     5fa:	bf e3       	ldi	r27, 0x3F	; 63
     5fc:	89 af       	sts	0x79, r24
     5fe:	9a af       	sts	0x7a, r25
     600:	ab af       	sts	0x7b, r26
     602:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     604:	69 ad       	sts	0x69, r22
     606:	7a ad       	sts	0x6a, r23
     608:	8b ad       	sts	0x6b, r24
     60a:	9c ad       	sts	0x6c, r25
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e6       	ldi	r20, 0x66	; 102
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	9e 01       	movw	r18, r28
     61e:	23 5c       	subi	r18, 0xC3	; 195
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	cd 96       	adiw	r24, 0x3d	; 61
     632:	fc 01       	movw	r30, r24
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <lcd_set_4bit+0x518>
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 23       	and	r17, r17
     650:	49 f0       	breq	.+18     	; 0x664 <lcd_set_4bit+0x52e>
		__ticks = 1;
     652:	ce 01       	movw	r24, r28
     654:	8f 5b       	subi	r24, 0xBF	; 191
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	31 83       	std	Z+1, r19	; 0x01
     660:	20 83       	st	Z, r18
     662:	6e c0       	rjmp	.+220    	; 0x740 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     664:	11 e0       	ldi	r17, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	cd 96       	adiw	r24, 0x3d	; 61
     66a:	fc 01       	movw	r30, r24
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <lcd_set_4bit+0x550>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	11 23       	and	r17, r17
     688:	09 f4       	brne	.+2      	; 0x68c <lcd_set_4bit+0x556>
     68a:	49 c0       	rjmp	.+146    	; 0x71e <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	69 ad       	sts	0x69, r22
     68e:	7a ad       	sts	0x6a, r23
     690:	8b ad       	sts	0x6b, r24
     692:	9c ad       	sts	0x6c, r25
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e2       	ldi	r20, 0x20	; 32
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	8e 01       	movw	r16, r28
     6a6:	0f 5b       	subi	r16, 0xBF	; 191
     6a8:	1f 4f       	sbci	r17, 0xFF	; 255
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	f8 01       	movw	r30, r16
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	27 c0       	rjmp	.+78     	; 0x70c <lcd_set_4bit+0x5d6>
     6be:	ce 01       	movw	r24, r28
     6c0:	8d 5b       	subi	r24, 0xBD	; 189
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	20 e7       	ldi	r18, 0x70	; 112
     6c6:	31 e0       	ldi	r19, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
     6ce:	ce 01       	movw	r24, r28
     6d0:	8d 5b       	subi	r24, 0xBD	; 189
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	8c 01       	movw	r16, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_set_4bit+0x5a8>
     6e2:	8c 01       	movw	r16, r24
     6e4:	ce 01       	movw	r24, r28
     6e6:	8d 5b       	subi	r24, 0xBD	; 189
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	fc 01       	movw	r30, r24
     6ec:	11 83       	std	Z+1, r17	; 0x01
     6ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	ce 01       	movw	r24, r28
     6f2:	8f 5b       	subi	r24, 0xBF	; 191
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	9e 01       	movw	r18, r28
     6f8:	2f 5b       	subi	r18, 0xBF	; 191
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	31 81       	ldd	r19, Z+1	; 0x01
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	ce 01       	movw	r24, r28
     70e:	8f 5b       	subi	r24, 0xBF	; 191
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	89 f6       	brne	.-94     	; 0x6be <lcd_set_4bit+0x588>
     71c:	2e c0       	rjmp	.+92     	; 0x77a <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71e:	8e 01       	movw	r16, r28
     720:	0f 5b       	subi	r16, 0xBF	; 191
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	ce 01       	movw	r24, r28
     726:	cd 96       	adiw	r24, 0x3d	; 61
     728:	fc 01       	movw	r30, r24
     72a:	60 81       	ld	r22, Z
     72c:	71 81       	ldd	r23, Z+1	; 0x01
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	f8 01       	movw	r30, r16
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	ce 01       	movw	r24, r28
     742:	8b 5b       	subi	r24, 0xBB	; 187
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	9e 01       	movw	r18, r28
     748:	2f 5b       	subi	r18, 0xBF	; 191
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	fc 01       	movw	r30, r24
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	20 83       	st	Z, r18
     758:	ce 01       	movw	r24, r28
     75a:	8b 5b       	subi	r24, 0xBB	; 187
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	8c 01       	movw	r16, r24
     766:	c8 01       	movw	r24, r16
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <lcd_set_4bit+0x632>
     76c:	8c 01       	movw	r16, r24
     76e:	ce 01       	movw	r24, r28
     770:	8b 5b       	subi	r24, 0xBB	; 187
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	fc 01       	movw	r30, r24
     776:	11 83       	std	Z+1, r17	; 0x01
     778:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	28 e2       	ldi	r18, 0x28	; 40
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2e 7f       	andi	r18, 0xFE	; 254
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     78c:	88 e2       	ldi	r24, 0x28	; 40
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	28 e2       	ldi	r18, 0x28	; 40
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2d 7f       	andi	r18, 0xFD	; 253
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	20 e3       	ldi	r18, 0x30	; 48
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 e2       	ldi	r18, 0x28	; 40
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	24 60       	ori	r18, 0x04	; 4
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	9e 01       	movw	r18, r28
     7bc:	29 5b       	subi	r18, 0xB9	; 185
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 ea       	ldi	r26, 0xA0	; 160
     7c6:	b0 e4       	ldi	r27, 0x40	; 64
     7c8:	f9 01       	movw	r30, r18
     7ca:	80 83       	st	Z, r24
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	a2 83       	std	Z+2, r26	; 0x02
     7d0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	8e 01       	movw	r16, r28
     7d4:	05 5b       	subi	r16, 0xB5	; 181
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	60 81       	ld	r22, Z
     7e2:	71 81       	ldd	r23, Z+1	; 0x01
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	93 81       	ldd	r25, Z+3	; 0x03
     7e8:	26 e6       	ldi	r18, 0x66	; 102
     7ea:	36 e6       	ldi	r19, 0x66	; 102
     7ec:	46 e6       	ldi	r20, 0x66	; 102
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     802:	ce 01       	movw	r24, r28
     804:	85 5b       	subi	r24, 0xB5	; 181
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <lcd_set_4bit+0x6f0>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	11 23       	and	r17, r17
     828:	49 f0       	breq	.+18     	; 0x83c <lcd_set_4bit+0x706>
		__ticks = 1;
     82a:	ce 01       	movw	r24, r28
     82c:	81 5b       	subi	r24, 0xB1	; 177
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	74 c0       	rjmp	.+232    	; 0x924 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     83c:	ce 01       	movw	r24, r28
     83e:	85 5b       	subi	r24, 0xB5	; 181
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <lcd_set_4bit+0x72a>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	11 23       	and	r17, r17
     862:	09 f4       	brne	.+2      	; 0x866 <lcd_set_4bit+0x730>
     864:	4d c0       	rjmp	.+154    	; 0x900 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	ce 01       	movw	r24, r28
     868:	89 5b       	subi	r24, 0xB9	; 185
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	fc 01       	movw	r30, r24
     86e:	60 81       	ld	r22, Z
     870:	71 81       	ldd	r23, Z+1	; 0x01
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	93 81       	ldd	r25, Z+3	; 0x03
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8e 01       	movw	r16, r28
     888:	01 5b       	subi	r16, 0xB1	; 177
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	f8 01       	movw	r30, r16
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
     89e:	27 c0       	rjmp	.+78     	; 0x8ee <lcd_set_4bit+0x7b8>
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 5a       	subi	r24, 0xAF	; 175
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	20 e7       	ldi	r18, 0x70	; 112
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	ce 01       	movw	r24, r28
     8b2:	8f 5a       	subi	r24, 0xAF	; 175
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	8c 01       	movw	r16, r24
     8be:	c8 01       	movw	r24, r16
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_set_4bit+0x78a>
     8c4:	8c 01       	movw	r16, r24
     8c6:	ce 01       	movw	r24, r28
     8c8:	8f 5a       	subi	r24, 0xAF	; 175
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 83       	std	Z+1, r17	; 0x01
     8d0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	ce 01       	movw	r24, r28
     8d4:	81 5b       	subi	r24, 0xB1	; 177
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	9e 01       	movw	r18, r28
     8da:	21 5b       	subi	r18, 0xB1	; 177
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	30 40       	sbci	r19, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	ce 01       	movw	r24, r28
     8f0:	81 5b       	subi	r24, 0xB1	; 177
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	89 f6       	brne	.-94     	; 0x8a0 <lcd_set_4bit+0x76a>
     8fe:	2f c0       	rjmp	.+94     	; 0x95e <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     900:	8e 01       	movw	r16, r28
     902:	01 5b       	subi	r16, 0xB1	; 177
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	ce 01       	movw	r24, r28
     908:	85 5b       	subi	r24, 0xB5	; 181
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	ce 01       	movw	r24, r28
     926:	8d 5a       	subi	r24, 0xAD	; 173
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	9e 01       	movw	r18, r28
     92c:	21 5b       	subi	r18, 0xB1	; 177
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	20 83       	st	Z, r18
     93c:	ce 01       	movw	r24, r28
     93e:	8d 5a       	subi	r24, 0xAD	; 173
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	8c 01       	movw	r16, r24
     94a:	c8 01       	movw	r24, r16
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <lcd_set_4bit+0x816>
     950:	8c 01       	movw	r16, r24
     952:	ce 01       	movw	r24, r28
     954:	8d 5a       	subi	r24, 0xAD	; 173
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	fc 01       	movw	r30, r24
     95a:	11 83       	std	Z+1, r17	; 0x01
     95c:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 e2       	ldi	r18, 0x28	; 40
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2b 7f       	andi	r18, 0xFB	; 251
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	9e 01       	movw	r18, r28
     972:	2b 5a       	subi	r18, 0xAB	; 171
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e8       	ldi	r26, 0x80	; 128
     97c:	bf e3       	ldi	r27, 0x3F	; 63
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     988:	8e 01       	movw	r16, r28
     98a:	07 5a       	subi	r16, 0xA7	; 167
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	ce 01       	movw	r24, r28
     990:	8b 5a       	subi	r24, 0xAB	; 171
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 e6       	ldi	r20, 0x66	; 102
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	87 5a       	subi	r24, 0xA7	; 167
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	fc 01       	movw	r30, r24
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <lcd_set_4bit+0x8a6>
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	11 23       	and	r17, r17
     9de:	49 f0       	breq	.+18     	; 0x9f2 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9e0:	ce 01       	movw	r24, r28
     9e2:	83 5a       	subi	r24, 0xA3	; 163
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	74 c0       	rjmp	.+232    	; 0xada <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9f2:	ce 01       	movw	r24, r28
     9f4:	87 5a       	subi	r24, 0xA7	; 167
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	11 e0       	ldi	r17, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     a10:	18 16       	cp	r1, r24
     a12:	0c f0       	brlt	.+2      	; 0xa16 <lcd_set_4bit+0x8e0>
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	11 23       	and	r17, r17
     a18:	09 f4       	brne	.+2      	; 0xa1c <lcd_set_4bit+0x8e6>
     a1a:	4d c0       	rjmp	.+154    	; 0xab6 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1c:	ce 01       	movw	r24, r28
     a1e:	8b 5a       	subi	r24, 0xAB	; 171
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	8e 01       	movw	r16, r28
     a3e:	03 5a       	subi	r16, 0xA3	; 163
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	f8 01       	movw	r30, r16
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <lcd_set_4bit+0x96e>
     a56:	ce 01       	movw	r24, r28
     a58:	81 5a       	subi	r24, 0xA1	; 161
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	20 e7       	ldi	r18, 0x70	; 112
     a5e:	31 e0       	ldi	r19, 0x01	; 1
     a60:	fc 01       	movw	r30, r24
     a62:	31 83       	std	Z+1, r19	; 0x01
     a64:	20 83       	st	Z, r18
     a66:	ce 01       	movw	r24, r28
     a68:	81 5a       	subi	r24, 0xA1	; 161
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	8c 01       	movw	r16, r24
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <lcd_set_4bit+0x940>
     a7a:	8c 01       	movw	r16, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	81 5a       	subi	r24, 0xA1	; 161
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	11 83       	std	Z+1, r17	; 0x01
     a86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	ce 01       	movw	r24, r28
     a8a:	83 5a       	subi	r24, 0xA3	; 163
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9e 01       	movw	r18, r28
     a90:	23 5a       	subi	r18, 0xA3	; 163
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa4:	ce 01       	movw	r24, r28
     aa6:	83 5a       	subi	r24, 0xA3	; 163
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	89 f6       	brne	.-94     	; 0xa56 <lcd_set_4bit+0x920>
     ab4:	2f c0       	rjmp	.+94     	; 0xb14 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	8e 01       	movw	r16, r28
     ab8:	03 5a       	subi	r16, 0xA3	; 163
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	87 5a       	subi	r24, 0xA7	; 167
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	f8 01       	movw	r30, r16
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
     ada:	ce 01       	movw	r24, r28
     adc:	8f 59       	subi	r24, 0x9F	; 159
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	9e 01       	movw	r18, r28
     ae2:	23 5a       	subi	r18, 0xA3	; 163
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	31 83       	std	Z+1, r19	; 0x01
     af0:	20 83       	st	Z, r18
     af2:	ce 01       	movw	r24, r28
     af4:	8f 59       	subi	r24, 0x9F	; 159
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	8c 01       	movw	r16, r24
     b00:	c8 01       	movw	r24, r16
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <lcd_set_4bit+0x9cc>
     b06:	8c 01       	movw	r16, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	8f 59       	subi	r24, 0x9F	; 159
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	fc 01       	movw	r30, r24
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b14:	88 e2       	ldi	r24, 0x28	; 40
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	28 e2       	ldi	r18, 0x28	; 40
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	2e 7f       	andi	r18, 0xFE	; 254
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	28 e2       	ldi	r18, 0x28	; 40
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	2d 7f       	andi	r18, 0xFD	; 253
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18

	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b38:	88 e2       	ldi	r24, 0x28	; 40
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	20 e2       	ldi	r18, 0x20	; 32
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     b42:	88 e2       	ldi	r24, 0x28	; 40
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	28 e2       	ldi	r18, 0x28	; 40
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	24 60       	ori	r18, 0x04	; 4
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	9e 01       	movw	r18, r28
     b56:	2d 59       	subi	r18, 0x9D	; 157
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 ea       	ldi	r26, 0xA0	; 160
     b60:	b0 e4       	ldi	r27, 0x40	; 64
     b62:	f9 01       	movw	r30, r18
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	8e 01       	movw	r16, r28
     b6e:	09 59       	subi	r16, 0x99	; 153
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	ce 01       	movw	r24, r28
     b74:	8d 59       	subi	r24, 0x9D	; 157
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	fc 01       	movw	r30, r24
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	26 e6       	ldi	r18, 0x66	; 102
     b84:	36 e6       	ldi	r19, 0x66	; 102
     b86:	46 e6       	ldi	r20, 0x66	; 102
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	a2 83       	std	Z+2, r26	; 0x02
     b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	89 59       	subi	r24, 0x99	; 153
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     bba:	88 23       	and	r24, r24
     bbc:	0c f0       	brlt	.+2      	; 0xbc0 <lcd_set_4bit+0xa8a>
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	11 23       	and	r17, r17
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 59       	subi	r24, 0x95	; 149
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	74 c0       	rjmp	.+232    	; 0xcbe <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bd6:	ce 01       	movw	r24, r28
     bd8:	89 59       	subi	r24, 0x99	; 153
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	fc 01       	movw	r30, r24
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <lcd_set_4bit+0xac4>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	11 23       	and	r17, r17
     bfc:	09 f4       	brne	.+2      	; 0xc00 <lcd_set_4bit+0xaca>
     bfe:	4d c0       	rjmp	.+154    	; 0xc9a <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	ce 01       	movw	r24, r28
     c02:	8d 59       	subi	r24, 0x9D	; 157
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8e 01       	movw	r16, r28
     c22:	05 59       	subi	r16, 0x95	; 149
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	27 c0       	rjmp	.+78     	; 0xc88 <lcd_set_4bit+0xb52>
     c3a:	ce 01       	movw	r24, r28
     c3c:	83 59       	subi	r24, 0x93	; 147
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	31 83       	std	Z+1, r19	; 0x01
     c48:	20 83       	st	Z, r18
     c4a:	ce 01       	movw	r24, r28
     c4c:	83 59       	subi	r24, 0x93	; 147
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	8c 01       	movw	r16, r24
     c58:	c8 01       	movw	r24, r16
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_set_4bit+0xb24>
     c5e:	8c 01       	movw	r16, r24
     c60:	ce 01       	movw	r24, r28
     c62:	83 59       	subi	r24, 0x93	; 147
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	fc 01       	movw	r30, r24
     c68:	11 83       	std	Z+1, r17	; 0x01
     c6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	ce 01       	movw	r24, r28
     c6e:	85 59       	subi	r24, 0x95	; 149
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	9e 01       	movw	r18, r28
     c74:	25 59       	subi	r18, 0x95	; 149
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	ce 01       	movw	r24, r28
     c8a:	85 59       	subi	r24, 0x95	; 149
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	89 f6       	brne	.-94     	; 0xc3a <lcd_set_4bit+0xb04>
     c98:	2f c0       	rjmp	.+94     	; 0xcf8 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	8e 01       	movw	r16, r28
     c9c:	05 59       	subi	r16, 0x95	; 149
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	89 59       	subi	r24, 0x99	; 153
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	ce 01       	movw	r24, r28
     cc0:	81 59       	subi	r24, 0x91	; 145
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	9e 01       	movw	r18, r28
     cc6:	25 59       	subi	r18, 0x95	; 149
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 83       	std	Z+1, r19	; 0x01
     cd4:	20 83       	st	Z, r18
     cd6:	ce 01       	movw	r24, r28
     cd8:	81 59       	subi	r24, 0x91	; 145
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	8c 01       	movw	r16, r24
     ce4:	c8 01       	movw	r24, r16
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <lcd_set_4bit+0xbb0>
     cea:	8c 01       	movw	r16, r24
     cec:	ce 01       	movw	r24, r28
     cee:	81 59       	subi	r24, 0x91	; 145
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	fc 01       	movw	r30, r24
     cf4:	11 83       	std	Z+1, r17	; 0x01
     cf6:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	28 e2       	ldi	r18, 0x28	; 40
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	2b 7f       	andi	r18, 0xFB	; 251
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18



	

}
     d0a:	c0 59       	subi	r28, 0x90	; 144
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <lcd_init>:

/*****Function to Initialize LCD*****/

void lcd_init()

{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	2e 97       	sbiw	r28, 0x0e	; 14
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e8       	ldi	r26, 0x80	; 128
     d40:	bf e3       	ldi	r27, 0x3F	; 63
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	26 e6       	ldi	r18, 0x66	; 102
     d54:	36 e6       	ldi	r19, 0x66	; 102
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	af 83       	std	Y+7, r26	; 0x07
     d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d6a:	11 e0       	ldi	r17, 0x01	; 1
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	0c f0       	brlt	.+2      	; 0xd86 <lcd_init+0x64>
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	11 23       	and	r17, r17
     d88:	29 f0       	breq	.+10     	; 0xd94 <lcd_init+0x72>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	89 87       	std	Y+9, r24	; 0x09
     d92:	46 c0       	rjmp	.+140    	; 0xe20 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d94:	11 e0       	ldi	r17, 0x01	; 1
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     daa:	18 16       	cp	r1, r24
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <lcd_init+0x8e>
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	11 23       	and	r17, r17
     db2:	61 f1       	breq	.+88     	; 0xe0c <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	7a 81       	ldd	r23, Y+2	; 0x02
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9a 87       	std	Y+10, r25	; 0x0a
     dda:	89 87       	std	Y+9, r24	; 0x09
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <lcd_init+0xe0>
     dde:	80 e7       	ldi	r24, 0x70	; 112
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	8b 85       	ldd	r24, Y+11	; 0x0b
     de8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dea:	8c 01       	movw	r16, r24
     dec:	c8 01       	movw	r24, r16
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <lcd_init+0xcc>
     df2:	8c 01       	movw	r16, r24
     df4:	1c 87       	std	Y+12, r17	; 0x0c
     df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9a 87       	std	Y+10, r25	; 0x0a
     e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	51 f7       	brne	.-44     	; 0xdde <lcd_init+0xbc>
     e0a:	17 c0       	rjmp	.+46     	; 0xe3a <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a 87       	std	Y+10, r25	; 0x0a
     e1e:	89 87       	std	Y+9, r24	; 0x09
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	9e 87       	std	Y+14, r25	; 0x0e
     e26:	8d 87       	std	Y+13, r24	; 0x0d
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	8c 01       	movw	r16, r24
     e2e:	c8 01       	movw	r24, r16
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <lcd_init+0x10e>
     e34:	8c 01       	movw	r16, r24
     e36:	1e 87       	std	Y+14, r17	; 0x0e
     e38:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x01);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x06);
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x0E);
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x80);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	

}
     e58:	2e 96       	adiw	r28, 0x0e	; 14
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <lcd_wr_command>:

/*****Function to Write Command on LCD*****/

void lcd_wr_command(unsigned char cmd)

{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	6e 97       	sbiw	r28, 0x1e	; 30
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8e 8f       	std	Y+30, r24	; 0x1e

	unsigned char temp;

	temp = cmd;
     e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8a:	89 83       	std	Y+1, r24	; 0x01

	temp = temp & 0xF0;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 7f       	andi	r24, 0xF0	; 240
     e90:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
     e92:	88 e2       	ldi	r24, 0x28	; 40
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 e2       	ldi	r18, 0x28	; 40
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 70       	andi	r18, 0x0F	; 15
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18

	lcd_port |= temp;
     ea4:	88 e2       	ldi	r24, 0x28	; 40
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 e2       	ldi	r18, 0x28	; 40
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	f9 01       	movw	r30, r18
     eae:	30 81       	ld	r19, Z
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	23 2b       	or	r18, r19
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
     eb8:	88 e2       	ldi	r24, 0x28	; 40
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	28 e2       	ldi	r18, 0x28	; 40
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	2e 7f       	andi	r18, 0xFE	; 254
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 e2       	ldi	r18, 0x28	; 40
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	2d 7f       	andi	r18, 0xFD	; 253
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	28 e2       	ldi	r18, 0x28	; 40
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	24 60       	ori	r18, 0x04	; 4
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 ea       	ldi	r26, 0xA0	; 160
     ef4:	b0 e4       	ldi	r27, 0x40	; 64
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	ac 83       	std	Y+4, r26	; 0x04
     efc:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6a 81       	ldd	r22, Y+2	; 0x02
     f00:	7b 81       	ldd	r23, Y+3	; 0x03
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	26 e6       	ldi	r18, 0x66	; 102
     f08:	36 e6       	ldi	r19, 0x66	; 102
     f0a:	46 e6       	ldi	r20, 0x66	; 102
     f0c:	55 e4       	ldi	r21, 0x45	; 69
     f0e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	a8 87       	std	Y+8, r26	; 0x08
     f1c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	6e 81       	ldd	r22, Y+6	; 0x06
     f22:	7f 81       	ldd	r23, Y+7	; 0x07
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
     f34:	88 23       	and	r24, r24
     f36:	0c f0       	brlt	.+2      	; 0xf3a <lcd_wr_command+0xcc>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	11 23       	and	r17, r17
     f3c:	29 f0       	breq	.+10     	; 0xf48 <lcd_wr_command+0xda>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9b 87       	std	Y+11, r25	; 0x0b
     f44:	8a 87       	std	Y+10, r24	; 0x0a
     f46:	46 c0       	rjmp	.+140    	; 0xfd4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	6e 81       	ldd	r22, Y+6	; 0x06
     f4c:	7f 81       	ldd	r23, Y+7	; 0x07
     f4e:	88 85       	ldd	r24, Y+8	; 0x08
     f50:	99 85       	ldd	r25, Y+9	; 0x09
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	0c f0       	brlt	.+2      	; 0xf64 <lcd_wr_command+0xf6>
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	11 23       	and	r17, r17
     f66:	61 f1       	breq	.+88     	; 0xfc0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6a 81       	ldd	r22, Y+2	; 0x02
     f6a:	7b 81       	ldd	r23, Y+3	; 0x03
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9b 87       	std	Y+11, r25	; 0x0b
     f8e:	8a 87       	std	Y+10, r24	; 0x0a
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <lcd_wr_command+0x148>
     f92:	80 e7       	ldi	r24, 0x70	; 112
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	9d 87       	std	Y+13, r25	; 0x0d
     f98:	8c 87       	std	Y+12, r24	; 0x0c
     f9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9e:	8c 01       	movw	r16, r24
     fa0:	c8 01       	movw	r24, r16
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <lcd_wr_command+0x134>
     fa6:	8c 01       	movw	r16, r24
     fa8:	1d 87       	std	Y+13, r17	; 0x0d
     faa:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
     fb4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	51 f7       	brne	.-44     	; 0xf92 <lcd_wr_command+0x124>
     fbe:	17 c0       	rjmp	.+46     	; 0xfee <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6e 81       	ldd	r22, Y+6	; 0x06
     fc2:	7f 81       	ldd	r23, Y+7	; 0x07
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9b 87       	std	Y+11, r25	; 0x0b
     fd2:	8a 87       	std	Y+10, r24	; 0x0a
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd8:	9f 87       	std	Y+15, r25	; 0x0f
     fda:	8e 87       	std	Y+14, r24	; 0x0e
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	8c 01       	movw	r16, r24
     fe2:	f8 01       	movw	r30, r16
     fe4:	31 97       	sbiw	r30, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_wr_command+0x176>
     fe8:	8f 01       	movw	r16, r30
     fea:	1f 87       	std	Y+15, r17	; 0x0f
     fec:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
     fee:	88 e2       	ldi	r24, 0x28	; 40
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e2       	ldi	r18, 0x28	; 40
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	2b 7f       	andi	r18, 0xFB	; 251
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18

	

	cmd = cmd & 0x0F;
    1000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	8e 8f       	std	Y+30, r24	; 0x1e

	cmd = cmd<<4;
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	82 95       	swap	r24
    100a:	80 7f       	andi	r24, 0xF0	; 240
    100c:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	28 e2       	ldi	r18, 0x28	; 40
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	2f 70       	andi	r18, 0x0F	; 15
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18

	lcd_port |= cmd;
    1020:	88 e2       	ldi	r24, 0x28	; 40
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 e2       	ldi	r18, 0x28	; 40
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f9 01       	movw	r30, r18
    102a:	30 81       	ld	r19, Z
    102c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    102e:	23 2b       	or	r18, r19
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
    1034:	88 e2       	ldi	r24, 0x28	; 40
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	28 e2       	ldi	r18, 0x28	; 40
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2e 7f       	andi	r18, 0xFE	; 254
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	28 e2       	ldi	r18, 0x28	; 40
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	2d 7f       	andi	r18, 0xFD	; 253
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1058:	88 e2       	ldi	r24, 0x28	; 40
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 e2       	ldi	r18, 0x28	; 40
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 ea       	ldi	r26, 0xA0	; 160
    1070:	b0 e4       	ldi	r27, 0x40	; 64
    1072:	88 8b       	std	Y+16, r24	; 0x10
    1074:	99 8b       	std	Y+17, r25	; 0x11
    1076:	aa 8b       	std	Y+18, r26	; 0x12
    1078:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    107a:	68 89       	ldd	r22, Y+16	; 0x10
    107c:	79 89       	ldd	r23, Y+17	; 0x11
    107e:	8a 89       	ldd	r24, Y+18	; 0x12
    1080:	9b 89       	ldd	r25, Y+19	; 0x13
    1082:	26 e6       	ldi	r18, 0x66	; 102
    1084:	36 e6       	ldi	r19, 0x66	; 102
    1086:	46 e6       	ldi	r20, 0x66	; 102
    1088:	55 e4       	ldi	r21, 0x45	; 69
    108a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8c 8b       	std	Y+20, r24	; 0x14
    1094:	9d 8b       	std	Y+21, r25	; 0x15
    1096:	ae 8b       	std	Y+22, r26	; 0x16
    1098:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    109a:	11 e0       	ldi	r17, 0x01	; 1
    109c:	6c 89       	ldd	r22, Y+20	; 0x14
    109e:	7d 89       	ldd	r23, Y+21	; 0x15
    10a0:	8e 89       	ldd	r24, Y+22	; 0x16
    10a2:	9f 89       	ldd	r25, Y+23	; 0x17
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <lcd_wr_command+0x248>
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	11 23       	and	r17, r17
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <lcd_wr_command+0x256>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	99 8f       	std	Y+25, r25	; 0x19
    10c0:	88 8f       	std	Y+24, r24	; 0x18
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	6c 89       	ldd	r22, Y+20	; 0x14
    10c8:	7d 89       	ldd	r23, Y+21	; 0x15
    10ca:	8e 89       	ldd	r24, Y+22	; 0x16
    10cc:	9f 89       	ldd	r25, Y+23	; 0x17
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	0c f0       	brlt	.+2      	; 0x10e0 <lcd_wr_command+0x272>
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	11 23       	and	r17, r17
    10e2:	61 f1       	breq	.+88     	; 0x113c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	68 89       	ldd	r22, Y+16	; 0x10
    10e6:	79 89       	ldd	r23, Y+17	; 0x11
    10e8:	8a 89       	ldd	r24, Y+18	; 0x12
    10ea:	9b 89       	ldd	r25, Y+19	; 0x13
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	99 8f       	std	Y+25, r25	; 0x19
    110a:	88 8f       	std	Y+24, r24	; 0x18
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <lcd_wr_command+0x2c4>
    110e:	80 e7       	ldi	r24, 0x70	; 112
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9b 8f       	std	Y+27, r25	; 0x1b
    1114:	8a 8f       	std	Y+26, r24	; 0x1a
    1116:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    111a:	8c 01       	movw	r16, r24
    111c:	c8 01       	movw	r24, r16
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <lcd_wr_command+0x2b0>
    1122:	8c 01       	movw	r16, r24
    1124:	1b 8f       	std	Y+27, r17	; 0x1b
    1126:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	88 8d       	ldd	r24, Y+24	; 0x18
    112a:	99 8d       	ldd	r25, Y+25	; 0x19
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	99 8f       	std	Y+25, r25	; 0x19
    1130:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	88 8d       	ldd	r24, Y+24	; 0x18
    1134:	99 8d       	ldd	r25, Y+25	; 0x19
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	51 f7       	brne	.-44     	; 0x110e <lcd_wr_command+0x2a0>
    113a:	17 c0       	rjmp	.+46     	; 0x116a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6c 89       	ldd	r22, Y+20	; 0x14
    113e:	7d 89       	ldd	r23, Y+21	; 0x15
    1140:	8e 89       	ldd	r24, Y+22	; 0x16
    1142:	9f 89       	ldd	r25, Y+23	; 0x17
    1144:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	99 8f       	std	Y+25, r25	; 0x19
    114e:	88 8f       	std	Y+24, r24	; 0x18
    1150:	88 8d       	ldd	r24, Y+24	; 0x18
    1152:	99 8d       	ldd	r25, Y+25	; 0x19
    1154:	9d 8f       	std	Y+29, r25	; 0x1d
    1156:	8c 8f       	std	Y+28, r24	; 0x1c
    1158:	8c 8d       	ldd	r24, Y+28	; 0x1c
    115a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    115c:	8c 01       	movw	r16, r24
    115e:	f8 01       	movw	r30, r16
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <lcd_wr_command+0x2f2>
    1164:	8f 01       	movw	r16, r30
    1166:	1d 8f       	std	Y+29, r17	; 0x1d
    1168:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    116a:	88 e2       	ldi	r24, 0x28	; 40
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	28 e2       	ldi	r18, 0x28	; 40
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	2b 7f       	andi	r18, 0xFB	; 251
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18

}
    117c:	6e 96       	adiw	r28, 0x1e	; 30
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/

void lcd_wr_char(char letter)

{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	6e 97       	sbiw	r28, 0x1e	; 30
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8e 8f       	std	Y+30, r24	; 0x1e

	char temp;

	temp = letter;
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	89 83       	std	Y+1, r24	; 0x01

	temp = (temp & 0xF0);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
    11b6:	88 e2       	ldi	r24, 0x28	; 40
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	28 e2       	ldi	r18, 0x28	; 40
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	2f 70       	andi	r18, 0x0F	; 15
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18

	lcd_port |= temp;
    11c8:	88 e2       	ldi	r24, 0x28	; 40
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	28 e2       	ldi	r18, 0x28	; 40
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	30 81       	ld	r19, Z
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	23 2b       	or	r18, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    11dc:	88 e2       	ldi	r24, 0x28	; 40
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	28 e2       	ldi	r18, 0x28	; 40
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	21 60       	ori	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	28 e2       	ldi	r18, 0x28	; 40
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	2d 7f       	andi	r18, 0xFD	; 253
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1200:	88 e2       	ldi	r24, 0x28	; 40
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e2       	ldi	r18, 0x28	; 40
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	24 60       	ori	r18, 0x04	; 4
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 ea       	ldi	r26, 0xA0	; 160
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	ac 83       	std	Y+4, r26	; 0x04
    1220:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	7b 81       	ldd	r23, Y+3	; 0x03
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	26 e6       	ldi	r18, 0x66	; 102
    122c:	36 e6       	ldi	r19, 0x66	; 102
    122e:	46 e6       	ldi	r20, 0x66	; 102
    1230:	55 e4       	ldi	r21, 0x45	; 69
    1232:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	a8 87       	std	Y+8, r26	; 0x08
    1240:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1242:	11 e0       	ldi	r17, 0x01	; 1
    1244:	6e 81       	ldd	r22, Y+6	; 0x06
    1246:	7f 81       	ldd	r23, Y+7	; 0x07
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	0c f0       	brlt	.+2      	; 0x125e <lcd_wr_char+0xcc>
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	11 23       	and	r17, r17
    1260:	29 f0       	breq	.+10     	; 0x126c <lcd_wr_char+0xda>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9b 87       	std	Y+11, r25	; 0x0b
    1268:	8a 87       	std	Y+10, r24	; 0x0a
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    126c:	11 e0       	ldi	r17, 0x01	; 1
    126e:	6e 81       	ldd	r22, Y+6	; 0x06
    1270:	7f 81       	ldd	r23, Y+7	; 0x07
    1272:	88 85       	ldd	r24, Y+8	; 0x08
    1274:	99 85       	ldd	r25, Y+9	; 0x09
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	0c f0       	brlt	.+2      	; 0x1288 <lcd_wr_char+0xf6>
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	11 23       	and	r17, r17
    128a:	61 f1       	breq	.+88     	; 0x12e4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6a 81       	ldd	r22, Y+2	; 0x02
    128e:	7b 81       	ldd	r23, Y+3	; 0x03
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9b 87       	std	Y+11, r25	; 0x0b
    12b2:	8a 87       	std	Y+10, r24	; 0x0a
    12b4:	12 c0       	rjmp	.+36     	; 0x12da <lcd_wr_char+0x148>
    12b6:	80 e7       	ldi	r24, 0x70	; 112
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9d 87       	std	Y+13, r25	; 0x0d
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c2:	8c 01       	movw	r16, r24
    12c4:	c8 01       	movw	r24, r16
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <lcd_wr_char+0x134>
    12ca:	8c 01       	movw	r16, r24
    12cc:	1d 87       	std	Y+13, r17	; 0x0d
    12ce:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9b 87       	std	Y+11, r25	; 0x0b
    12d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	51 f7       	brne	.-44     	; 0x12b6 <lcd_wr_char+0x124>
    12e2:	17 c0       	rjmp	.+46     	; 0x1312 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6e 81       	ldd	r22, Y+6	; 0x06
    12e6:	7f 81       	ldd	r23, Y+7	; 0x07
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9b 87       	std	Y+11, r25	; 0x0b
    12f6:	8a 87       	std	Y+10, r24	; 0x0a
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	9f 87       	std	Y+15, r25	; 0x0f
    12fe:	8e 87       	std	Y+14, r24	; 0x0e
    1300:	8e 85       	ldd	r24, Y+14	; 0x0e
    1302:	9f 85       	ldd	r25, Y+15	; 0x0f
    1304:	8c 01       	movw	r16, r24
    1306:	f8 01       	movw	r30, r16
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <lcd_wr_char+0x176>
    130c:	8f 01       	movw	r16, r30
    130e:	1f 87       	std	Y+15, r17	; 0x0f
    1310:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
    1312:	88 e2       	ldi	r24, 0x28	; 40
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	28 e2       	ldi	r18, 0x28	; 40
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	2b 7f       	andi	r18, 0xFB	; 251
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18



	letter = letter & 0x0F;
    1324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	8e 8f       	std	Y+30, r24	; 0x1e

	letter = letter<<4;
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	82 95       	swap	r24
    132e:	80 7f       	andi	r24, 0xF0	; 240
    1330:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    1332:	88 e2       	ldi	r24, 0x28	; 40
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	28 e2       	ldi	r18, 0x28	; 40
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	20 81       	ld	r18, Z
    133e:	2f 70       	andi	r18, 0x0F	; 15
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18

	lcd_port |= letter;
    1344:	88 e2       	ldi	r24, 0x28	; 40
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	28 e2       	ldi	r18, 0x28	; 40
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	f9 01       	movw	r30, r18
    134e:	30 81       	ld	r19, Z
    1350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1352:	23 2b       	or	r18, r19
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    1358:	88 e2       	ldi	r24, 0x28	; 40
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	28 e2       	ldi	r18, 0x28	; 40
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	20 81       	ld	r18, Z
    1364:	21 60       	ori	r18, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	28 e2       	ldi	r18, 0x28	; 40
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	2d 7f       	andi	r18, 0xFD	; 253
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	28 e2       	ldi	r18, 0x28	; 40
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	24 60       	ori	r18, 0x04	; 4
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 ea       	ldi	r26, 0xA0	; 160
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	88 8b       	std	Y+16, r24	; 0x10
    1398:	99 8b       	std	Y+17, r25	; 0x11
    139a:	aa 8b       	std	Y+18, r26	; 0x12
    139c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    139e:	68 89       	ldd	r22, Y+16	; 0x10
    13a0:	79 89       	ldd	r23, Y+17	; 0x11
    13a2:	8a 89       	ldd	r24, Y+18	; 0x12
    13a4:	9b 89       	ldd	r25, Y+19	; 0x13
    13a6:	26 e6       	ldi	r18, 0x66	; 102
    13a8:	36 e6       	ldi	r19, 0x66	; 102
    13aa:	46 e6       	ldi	r20, 0x66	; 102
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8c 8b       	std	Y+20, r24	; 0x14
    13b8:	9d 8b       	std	Y+21, r25	; 0x15
    13ba:	ae 8b       	std	Y+22, r26	; 0x16
    13bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13be:	11 e0       	ldi	r17, 0x01	; 1
    13c0:	6c 89       	ldd	r22, Y+20	; 0x14
    13c2:	7d 89       	ldd	r23, Y+21	; 0x15
    13c4:	8e 89       	ldd	r24, Y+22	; 0x16
    13c6:	9f 89       	ldd	r25, Y+23	; 0x17
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	0c f0       	brlt	.+2      	; 0x13da <lcd_wr_char+0x248>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	11 23       	and	r17, r17
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <lcd_wr_char+0x256>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	99 8f       	std	Y+25, r25	; 0x19
    13e4:	88 8f       	std	Y+24, r24	; 0x18
    13e6:	46 c0       	rjmp	.+140    	; 0x1474 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	6c 89       	ldd	r22, Y+20	; 0x14
    13ec:	7d 89       	ldd	r23, Y+21	; 0x15
    13ee:	8e 89       	ldd	r24, Y+22	; 0x16
    13f0:	9f 89       	ldd	r25, Y+23	; 0x17
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <lcd_wr_char+0x272>
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	11 23       	and	r17, r17
    1406:	61 f1       	breq	.+88     	; 0x1460 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	68 89       	ldd	r22, Y+16	; 0x10
    140a:	79 89       	ldd	r23, Y+17	; 0x11
    140c:	8a 89       	ldd	r24, Y+18	; 0x12
    140e:	9b 89       	ldd	r25, Y+19	; 0x13
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	99 8f       	std	Y+25, r25	; 0x19
    142e:	88 8f       	std	Y+24, r24	; 0x18
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <lcd_wr_char+0x2c4>
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	9b 8f       	std	Y+27, r25	; 0x1b
    1438:	8a 8f       	std	Y+26, r24	; 0x1a
    143a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    143c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    143e:	8c 01       	movw	r16, r24
    1440:	c8 01       	movw	r24, r16
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <lcd_wr_char+0x2b0>
    1446:	8c 01       	movw	r16, r24
    1448:	1b 8f       	std	Y+27, r17	; 0x1b
    144a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	88 8d       	ldd	r24, Y+24	; 0x18
    144e:	99 8d       	ldd	r25, Y+25	; 0x19
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	99 8f       	std	Y+25, r25	; 0x19
    1454:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	88 8d       	ldd	r24, Y+24	; 0x18
    1458:	99 8d       	ldd	r25, Y+25	; 0x19
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	51 f7       	brne	.-44     	; 0x1432 <lcd_wr_char+0x2a0>
    145e:	17 c0       	rjmp	.+46     	; 0x148e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	6c 89       	ldd	r22, Y+20	; 0x14
    1462:	7d 89       	ldd	r23, Y+21	; 0x15
    1464:	8e 89       	ldd	r24, Y+22	; 0x16
    1466:	9f 89       	ldd	r25, Y+23	; 0x17
    1468:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	99 8f       	std	Y+25, r25	; 0x19
    1472:	88 8f       	std	Y+24, r24	; 0x18
    1474:	88 8d       	ldd	r24, Y+24	; 0x18
    1476:	99 8d       	ldd	r25, Y+25	; 0x19
    1478:	9d 8f       	std	Y+29, r25	; 0x1d
    147a:	8c 8f       	std	Y+28, r24	; 0x1c
    147c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    147e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1480:	8c 01       	movw	r16, r24
    1482:	f8 01       	movw	r30, r16
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <lcd_wr_char+0x2f2>
    1488:	8f 01       	movw	r16, r30
    148a:	1d 8f       	std	Y+29, r17	; 0x1d
    148c:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e2       	ldi	r18, 0x28	; 40
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	2b 7f       	andi	r18, 0xFB	; 251
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18

}
    14a0:	6e 96       	adiw	r28, 0x1e	; 30
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <lcd_home>:



void lcd_home()

{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62

	lcd_wr_command(0x80);
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <lcd_string>:

/*****Function to Print String on LCD*****/

void lcd_string(char *str)

{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	0f 92       	push	r0
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01

	while(*str != '\0')
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <lcd_string+0x28>

	{

		lcd_wr_char(*str);
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		str++;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01

void lcd_string(char *str)

{

	while(*str != '\0')
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	79 f7       	brne	.-34     	; 0x14dc <lcd_string+0x12>

		str++;

	}

}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <lcd_cursor>:



void lcd_cursor (char row, char column)

{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	0f 92       	push	r0
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02

	switch (row) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	99 f0       	breq	.+38     	; 0x154a <lcd_cursor+0x42>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	24 f4       	brge	.+8      	; 0x1532 <lcd_cursor+0x2a>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	41 f0       	breq	.+16     	; 0x1540 <lcd_cursor+0x38>
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <lcd_cursor+0x60>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	71 f0       	breq	.+28     	; 0x1554 <lcd_cursor+0x4c>
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <lcd_cursor+0x56>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <lcd_cursor+0x60>

		case 1: lcd_wr_command (0x80 + column - 1); break;
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 58       	subi	r24, 0x81	; 129
    1544:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1548:	10 c0       	rjmp	.+32     	; 0x156a <lcd_cursor+0x62>

		case 2: lcd_wr_command (0xc0 + column - 1); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	81 54       	subi	r24, 0x41	; 65
    154e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1552:	0b c0       	rjmp	.+22     	; 0x156a <lcd_cursor+0x62>

		case 3: lcd_wr_command (0x94 + column - 1); break;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	8d 56       	subi	r24, 0x6D	; 109
    1558:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    155c:	06 c0       	rjmp	.+12     	; 0x156a <lcd_cursor+0x62>

		case 4: lcd_wr_command (0xd4 + column - 1); break;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8d 52       	subi	r24, 0x2D	; 45
    1562:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1566:	01 c0       	rjmp	.+2      	; 0x156a <lcd_cursor+0x62>

		default: break;
    1568:	00 00       	nop

	}

}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/

void lcd_print (char row, char coloumn, unsigned int value, int digits)

{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
    158c:	5d 83       	std	Y+5, r21	; 0x05
    158e:	4c 83       	std	Y+4, r20	; 0x04
    1590:	3f 83       	std	Y+7, r19	; 0x07
    1592:	2e 83       	std	Y+6, r18	; 0x06

	unsigned char flag=0;
    1594:	19 82       	std	Y+1, r1	; 0x01

	if(row==0||coloumn==0)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <lcd_print+0x2e>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 23       	and	r24, r24
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <lcd_print+0x34>

	{

		lcd_home();
    15a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <lcd_home>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <lcd_print+0x3c>

	else

	{

		lcd_cursor(row,coloumn);
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	6b 81       	ldd	r22, Y+3	; 0x03
    15ac:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>

	}

	if(digits==5 || flag==1)
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <lcd_print+0x4c>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	b1 f4       	brne	.+44     	; 0x15ec <lcd_print+0x78>

	{

		million=value/10000+48;
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	20 e1       	ldi	r18, 0x10	; 16
    15c6:	37 e2       	ldi	r19, 0x27	; 39
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    15ce:	9b 01       	movw	r18, r22
    15d0:	c9 01       	movw	r24, r18
    15d2:	c0 96       	adiw	r24, 0x30	; 48
    15d4:	90 93 84 04 	sts	0x0484, r25
    15d8:	80 93 83 04 	sts	0x0483, r24

		lcd_wr_char(million);
    15dc:	80 91 83 04 	lds	r24, 0x0483
    15e0:	90 91 84 04 	lds	r25, 0x0484
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==4 || flag==1)
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	9f 81       	ldd	r25, Y+7	; 0x07
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <lcd_print+0x88>
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f5       	brne	.+70     	; 0x1642 <lcd_print+0xce>

	{

		temp = value/1000;
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	28 ee       	ldi	r18, 0xE8	; 232
    1602:	33 e0       	ldi	r19, 0x03	; 3
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    160a:	9b 01       	movw	r18, r22
    160c:	c9 01       	movw	r24, r18
    160e:	90 93 a1 04 	sts	0x04A1, r25
    1612:	80 93 a0 04 	sts	0x04A0, r24

		thousand = temp%10 + 48;
    1616:	80 91 a0 04 	lds	r24, 0x04A0
    161a:	90 91 a1 04 	lds	r25, 0x04A1
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	b9 01       	movw	r22, r18
    1624:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    1628:	c0 96       	adiw	r24, 0x30	; 48
    162a:	90 93 f1 04 	sts	0x04F1, r25
    162e:	80 93 f0 04 	sts	0x04F0, r24

		lcd_wr_char(thousand);
    1632:	80 91 f0 04 	lds	r24, 0x04F0
    1636:	90 91 f1 04 	lds	r25, 0x04F1
    163a:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==3 || flag==1)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	19 f0       	breq	.+6      	; 0x1652 <lcd_print+0xde>
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	19 f5       	brne	.+70     	; 0x1698 <lcd_print+0x124>

	{

		temp = value/100;
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	24 e6       	ldi	r18, 0x64	; 100
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    1660:	9b 01       	movw	r18, r22
    1662:	c9 01       	movw	r24, r18
    1664:	90 93 a1 04 	sts	0x04A1, r25
    1668:	80 93 a0 04 	sts	0x04A0, r24

		hundred = temp%10 + 48;
    166c:	80 91 a0 04 	lds	r24, 0x04A0
    1670:	90 91 a1 04 	lds	r25, 0x04A1
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 c5 04 	sts	0x04C5, r25
    1684:	80 93 c4 04 	sts	0x04C4, r24

		lcd_wr_char(hundred);
    1688:	80 91 c4 04 	lds	r24, 0x04C4
    168c:	90 91 c5 04 	lds	r25, 0x04C5
    1690:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==2 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x134>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	19 f5       	brne	.+70     	; 0x16ee <lcd_print+0x17a>

	{

		temp = value/10;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    16b6:	9b 01       	movw	r18, r22
    16b8:	c9 01       	movw	r24, r18
    16ba:	90 93 a1 04 	sts	0x04A1, r25
    16be:	80 93 a0 04 	sts	0x04A0, r24

		tens = temp%10 + 48;
    16c2:	80 91 a0 04 	lds	r24, 0x04A0
    16c6:	90 91 a1 04 	lds	r25, 0x04A1
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	b9 01       	movw	r22, r18
    16d0:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    16d4:	c0 96       	adiw	r24, 0x30	; 48
    16d6:	90 93 bf 04 	sts	0x04BF, r25
    16da:	80 93 be 04 	sts	0x04BE, r24

		lcd_wr_char(tens);
    16de:	80 91 be 04 	lds	r24, 0x04BE
    16e2:	90 91 bf 04 	lds	r25, 0x04BF
    16e6:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==1 || flag==1)
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	19 f0       	breq	.+6      	; 0x16fe <lcd_print+0x18a>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 f4       	brne	.+36     	; 0x1722 <lcd_print+0x1ae>

	{

		unit = value%10 + 48;
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	0e 94 29 6f 	call	0xde52	; 0xde52 <__udivmodhi4>
    170c:	c0 96       	adiw	r24, 0x30	; 48
    170e:	90 93 ef 04 	sts	0x04EF, r25
    1712:	80 93 ee 04 	sts	0x04EE, r24

		lcd_wr_char(unit);
    1716:	80 91 ee 04 	lds	r24, 0x04EE
    171a:	90 91 ef 04 	lds	r25, 0x04EF
    171e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	if(digits>5)
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	86 30       	cpi	r24, 0x06	; 6
    1728:	91 05       	cpc	r25, r1
    172a:	1c f0       	brlt	.+6      	; 0x1732 <lcd_print+0x1be>

	{

		lcd_wr_char('E');
    172c:	85 e4       	ldi	r24, 0x45	; 69
    172e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	

    1732:	27 96       	adiw	r28, 0x07	; 7
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <motion_pin_config>:

*/

void motion_pin_config(void)

 {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62

    DDRA = DDRA | 0x0F;
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	21 e2       	ldi	r18, 0x21	; 33
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 60       	ori	r18, 0x0F	; 15
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18

    PORTA = PORTA & 0xF0;
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	22 e2       	ldi	r18, 0x22	; 34
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	20 7f       	andi	r18, 0xF0	; 240
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18

    DDRL = DDRL | 0x18; //Setting PL3 and PL4 pins as output for PWM generation
    1770:	8a e0       	ldi	r24, 0x0A	; 10
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 61       	ori	r18, 0x18	; 24
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18

    PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1782:	8b e0       	ldi	r24, 0x0B	; 11
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	2b e0       	ldi	r18, 0x0B	; 11
    1788:	31 e0       	ldi	r19, 0x01	; 1
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	28 61       	ori	r18, 0x18	; 24
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <left_encoder_pin_config>:

*/

void left_encoder_pin_config (void)

{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2d e2       	ldi	r18, 0x2D	; 45
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	2f 7e       	andi	r18, 0xEF	; 239
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18

	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17b4:	8e e2       	ldi	r24, 0x2E	; 46
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2e e2       	ldi	r18, 0x2E	; 46
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	20 61       	ori	r18, 0x10	; 16
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18

}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <right_encoder_pin_config>:

*/

void right_encoder_pin_config (void)

{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    17d4:	8d e2       	ldi	r24, 0x2D	; 45
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2d e2       	ldi	r18, 0x2D	; 45
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	2f 7d       	andi	r18, 0xDF	; 223
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18

	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    17e6:	8e e2       	ldi	r24, 0x2E	; 46
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	2e e2       	ldi	r18, 0x2E	; 46
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	20 62       	ori	r18, 0x20	; 32
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18

}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <velocity>:

*/

void velocity(unsigned char left_motor, unsigned char right_motor) 

{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f 92       	push	r0
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02

    OCR5AL = (unsigned char) left_motor;
    180e:	88 e2       	ldi	r24, 0x28	; 40
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18

    OCR5BL = (unsigned char) right_motor;
    1818:	8a e2       	ldi	r24, 0x2A	; 42
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	2a 81       	ldd	r18, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18

}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <left_position_encoder_interrupt_init>:

*/

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable

{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    1834:	f8 94       	cli

	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1836:	8a e6       	ldi	r24, 0x6A	; 106
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a e6       	ldi	r18, 0x6A	; 106
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	22 60       	ori	r18, 0x02	; 2
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1848:	8d e3       	ldi	r24, 0x3D	; 61
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2d e3       	ldi	r18, 0x3D	; 61
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	20 61       	ori	r18, 0x10	; 16
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    185a:	78 94       	sei

}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <right_position_encoder_interrupt_init>:

*/

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable

{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    186a:	f8 94       	cli

	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    186c:	8a e6       	ldi	r24, 0x6A	; 106
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2a e6       	ldi	r18, 0x6A	; 106
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	f9 01       	movw	r30, r18
    1876:	20 81       	ld	r18, Z
    1878:	28 60       	ori	r18, 0x08	; 8
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2d e3       	ldi	r18, 0x3D	; 61
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	20 62       	ori	r18, 0x20	; 32
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    1890:	78 94       	sei

}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <__vector_6>:

*/

ISR(INT5_vect)

{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	ShaftCountRight++;  //increment right shaft position count
    18b2:	80 91 44 03 	lds	r24, 0x0344
    18b6:	90 91 45 03 	lds	r25, 0x0345
    18ba:	a0 91 46 03 	lds	r26, 0x0346
    18be:	b0 91 47 03 	lds	r27, 0x0347
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	80 93 44 03 	sts	0x0344, r24
    18cc:	90 93 45 03 	sts	0x0345, r25
    18d0:	a0 93 46 03 	sts	0x0346, r26
    18d4:	b0 93 47 03 	sts	0x0347, r27

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_5>:

*/

ISR(INT4_vect)

{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62

	ShaftCountLeft++;  //increment left shaft position count
    1908:	80 91 40 03 	lds	r24, 0x0340
    190c:	90 91 41 03 	lds	r25, 0x0341
    1910:	a0 91 42 03 	lds	r26, 0x0342
    1914:	b0 91 43 03 	lds	r27, 0x0343
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	80 93 40 03 	sts	0x0340, r24
    1922:	90 93 41 03 	sts	0x0341, r25
    1926:	a0 93 42 03 	sts	0x0342, r26
    192a:	b0 93 43 03 	sts	0x0343, r27

}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <motion_set>:

*/

void motion_set(unsigned char Direction)

 {
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	0f 92       	push	r0
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char PortARestore = 0;
    1952:	19 82       	std	Y+1, r1	; 0x01



    Direction &= 0x0F; // removing upper nibble for protection
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 70       	andi	r24, 0x0F	; 15
    1958:	8a 83       	std	Y+2, r24	; 0x02

    PortARestore = PORTA; // reading PORTA's original status
    195a:	82 e2       	ldi	r24, 0x22	; 34
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	80 81       	ld	r24, Z
    1962:	89 83       	std	Y+1, r24	; 0x01

    PortARestore &= 0xF0; // making lower direction nibble to 0
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	80 7f       	andi	r24, 0xF0	; 240
    1968:	89 83       	std	Y+1, r24	; 0x01

    PortARestore |= Direction; // adding lower nibble for forward command and restoring PORTA's status
    196a:	99 81       	ldd	r25, Y+1	; 0x01
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	89 2b       	or	r24, r25
    1970:	89 83       	std	Y+1, r24	; 0x01

    PORTA = PortARestore; // executing the command
    1972:	82 e2       	ldi	r24, 0x22	; 34
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	29 81       	ldd	r18, Y+1	; 0x01
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18

}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <forward>:

*/

void forward(void)

 {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

    motion_set(0x06);
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <back>:

*/

void back (void)

{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x09);
    19a2:	89 e0       	ldi	r24, 0x09	; 9
    19a4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <left>:

*/

void left (void)

{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x05);
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <right>:

*/

void right (void)

{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x0A);
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <soft_left>:

*/

void soft_left (void)

{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x04);
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <soft_right>:

*/

void soft_right (void) 

{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x02);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <soft_left_2>:

*/

void soft_left_2 (void) 

{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x01);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <soft_right_2>:

*/

void soft_right_2 (void)

{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x08);
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <stop>:

*/

void stop(void)

{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x00);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <angle_rotate>:

*/

void angle_rotate(unsigned int Degrees)

{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2a 97       	sbiw	r28, 0x0a	; 10
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	9a 87       	std	Y+10, r25	; 0x0a
    1a50:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	ab 83       	std	Y+3, r26	; 0x03
    1a5e:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1a60:	1d 82       	std	Y+5, r1	; 0x05
    1a62:	1e 82       	std	Y+6, r1	; 0x06
    1a64:	1f 82       	std	Y+7, r1	; 0x07
    1a66:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	cc 01       	movw	r24, r24
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <__floatunsisf>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	28 e4       	ldi	r18, 0x48	; 72
    1a84:	31 ee       	ldi	r19, 0xE1	; 225
    1a86:	42 e8       	ldi	r20, 0x82	; 130
    1a88:	50 e4       	ldi	r21, 0x40	; 64
    1a8a:	0e 94 7c 6d 	call	0xdaf8	; 0xdaf8 <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	ab 83       	std	Y+3, r26	; 0x03
    1a98:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	cc 01       	movw	r24, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	af 83       	std	Y+7, r26	; 0x07
    1ab6:	b8 87       	std	Y+8, r27	; 0x08

	ShaftCountRight = 0;
    1ab8:	10 92 44 03 	sts	0x0344, r1
    1abc:	10 92 45 03 	sts	0x0345, r1
    1ac0:	10 92 46 03 	sts	0x0346, r1
    1ac4:	10 92 47 03 	sts	0x0347, r1

	ShaftCountLeft = 0;
    1ac8:	10 92 40 03 	sts	0x0340, r1
    1acc:	10 92 41 03 	sts	0x0341, r1
    1ad0:	10 92 42 03 	sts	0x0342, r1
    1ad4:	10 92 43 03 	sts	0x0343, r1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <angle_rotate+0xa2>

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))

		break;

	}
    1ada:	00 00       	nop

	while (1)

	{

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1adc:	20 91 44 03 	lds	r18, 0x0344
    1ae0:	30 91 45 03 	lds	r19, 0x0345
    1ae4:	40 91 46 03 	lds	r20, 0x0346
    1ae8:	50 91 47 03 	lds	r21, 0x0347
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	af 81       	ldd	r26, Y+7	; 0x07
    1af4:	b8 85       	ldd	r27, Y+8	; 0x08
    1af6:	28 17       	cp	r18, r24
    1af8:	39 07       	cpc	r19, r25
    1afa:	4a 07       	cpc	r20, r26
    1afc:	5b 07       	cpc	r21, r27
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <angle_rotate+0xc8>
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	20 91 40 03 	lds	r18, 0x0340
    1b06:	30 91 41 03 	lds	r19, 0x0341
    1b0a:	40 91 42 03 	lds	r20, 0x0342
    1b0e:	50 91 43 03 	lds	r21, 0x0343
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	af 81       	ldd	r26, Y+7	; 0x07
    1b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <angle_rotate+0xee>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	87 2f       	mov	r24, r23
    1b2a:	86 2b       	or	r24, r22
    1b2c:	88 23       	and	r24, r24
    1b2e:	a9 f2       	breq	.-86     	; 0x1ada <angle_rotate+0xa0>

		break;
    1b30:	00 00       	nop

	}

	stop(); //Stop robot
    1b32:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1b36:	2a 96       	adiw	r28, 0x0a	; 10
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <linear_distance_mm>:

*/

void linear_distance_mm(unsigned int DistanceInMM)

{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	dc 01       	movw	r26, r24
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	ab 83       	std	Y+3, r26	; 0x03
    1b6c:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1b6e:	1d 82       	std	Y+5, r1	; 0x05
    1b70:	1e 82       	std	Y+6, r1	; 0x06
    1b72:	1f 82       	std	Y+7, r1	; 0x07
    1b74:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	cc 01       	movw	r24, r24
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <__floatunsisf>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	25 ee       	ldi	r18, 0xE5	; 229
    1b92:	30 ed       	ldi	r19, 0xD0	; 208
    1b94:	4a ea       	ldi	r20, 0xAA	; 170
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 7c 6d 	call	0xdaf8	; 0xdaf8 <__divsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	ab 83       	std	Y+3, r26	; 0x03
    1ba6:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08

	

	ShaftCountRight = 0;
    1bc0:	10 92 44 03 	sts	0x0344, r1
    1bc4:	10 92 45 03 	sts	0x0345, r1
    1bc8:	10 92 46 03 	sts	0x0346, r1
    1bcc:	10 92 47 03 	sts	0x0347, r1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <linear_distance_mm+0x8c>

			break;

		}

	}
    1bd2:	00 00       	nop

	while(1)

	{

		if(ShaftCountRight > ReqdShaftCountInt)
    1bd4:	20 91 44 03 	lds	r18, 0x0344
    1bd8:	30 91 45 03 	lds	r19, 0x0345
    1bdc:	40 91 46 03 	lds	r20, 0x0346
    1be0:	50 91 47 03 	lds	r21, 0x0347
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	af 81       	ldd	r26, Y+7	; 0x07
    1bea:	b8 85       	ldd	r27, Y+8	; 0x08
    1bec:	82 17       	cp	r24, r18
    1bee:	93 07       	cpc	r25, r19
    1bf0:	a4 07       	cpc	r26, r20
    1bf2:	b5 07       	cpc	r27, r21
    1bf4:	70 f7       	brcc	.-36     	; 0x1bd2 <linear_distance_mm+0x8a>

		{

			break;
    1bf6:	00 00       	nop

		}

	}

	stop(); //Stop robot
    1bf8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1bfc:	2a 96       	adiw	r28, 0x0a	; 10
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <forward_mm>:

*/

void forward_mm(unsigned int DistanceInMM)

{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	0f 92       	push	r0
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01

	forward();
    1c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

	linear_distance_mm(DistanceInMM);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <back_mm>:

*/

void back_mm(unsigned int DistanceInMM)

{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	0f 92       	push	r0
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01

	back();
    1c44:	0e 94 cd 0c 	call	0x199a	; 0x199a <back>

	linear_distance_mm(DistanceInMM);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <left_degrees>:

*/

void left_degrees(unsigned int Degrees)

{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	0f 92       	push	r0
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	left(); //Turn left
    1c6a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>

	angle_rotate(Degrees);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <right_degrees>:

*/

void right_degrees(unsigned int Degrees)

{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	0f 92       	push	r0
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	right(); //Turn right
    1c90:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>

	angle_rotate(Degrees);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <soft_left_degrees>:

*/

void soft_left_degrees(unsigned int Degrees)

{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	0f 92       	push	r0
    1cac:	0f 92       	push	r0
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left(); //Turn soft left
    1cb6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>

	Degrees=Degrees*2;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <soft_right_degrees>:

*/

void soft_right_degrees(unsigned int Degrees)

{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	0f 92       	push	r0
    1cde:	0f 92       	push	r0
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right();  //Turn soft right
    1ce8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>

	Degrees=Degrees*2;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <soft_left_2_degrees>:

*/

void soft_left_2_degrees(unsigned int Degrees)

{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	0f 92       	push	r0
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left_2(); //Turn reverse soft left
    1d1a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>

	Degrees=Degrees*2;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <soft_right_2_degrees>:

*/

void soft_right_2_degrees(unsigned int Degrees)

{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	0f 92       	push	r0
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right_2();  //Turn reverse soft right
    1d4c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>

	Degrees=Degrees*2;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <correct_right>:

*/

void correct_right()

{   stop();
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6c 97       	sbiw	r28, 0x1c	; 28
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d90:	b1 e4       	ldi	r27, 0x41	; 65
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	26 e6       	ldi	r18, 0x66	; 102
    1da4:	36 e6       	ldi	r19, 0x66	; 102
    1da6:	46 e6       	ldi	r20, 0x66	; 102
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	af 83       	std	Y+7, r26	; 0x07
    1db8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1dba:	11 e0       	ldi	r17, 0x01	; 1
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <correct_right+0x68>
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	11 23       	and	r17, r17
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <correct_right+0x76>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a 87       	std	Y+10, r25	; 0x0a
    1de0:	89 87       	std	Y+9, r24	; 0x09
    1de2:	46 c0       	rjmp	.+140    	; 0x1e70 <correct_right+0x102>
	else if (__tmp > 65535)
    1de4:	11 e0       	ldi	r17, 0x01	; 1
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <correct_right+0x92>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	11 23       	and	r17, r17
    1e02:	61 f1       	breq	.+88     	; 0x1e5c <correct_right+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	69 81       	ldd	r22, Y+1	; 0x01
    1e06:	7a 81       	ldd	r23, Y+2	; 0x02
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a 87       	std	Y+10, r25	; 0x0a
    1e2a:	89 87       	std	Y+9, r24	; 0x09
    1e2c:	12 c0       	rjmp	.+36     	; 0x1e52 <correct_right+0xe4>
    1e2e:	80 e7       	ldi	r24, 0x70	; 112
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <correct_right+0xd0>
    1e42:	8c 01       	movw	r16, r24
    1e44:	1c 87       	std	Y+12, r17	; 0x0c
    1e46:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a 87       	std	Y+10, r25	; 0x0a
    1e50:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	51 f7       	brne	.-44     	; 0x1e2e <correct_right+0xc0>
    1e5a:	17 c0       	rjmp	.+46     	; 0x1e8a <correct_right+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a 87       	std	Y+10, r25	; 0x0a
    1e6e:	89 87       	std	Y+9, r24	; 0x09
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	9e 87       	std	Y+14, r25	; 0x0e
    1e76:	8d 87       	std	Y+13, r24	; 0x0d
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	c8 01       	movw	r24, r16
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <correct_right+0x112>
    1e84:	8c 01       	movw	r16, r24
    1e86:	1e 87       	std	Y+14, r17	; 0x0e
    1e88:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_degrees(35);
    1e8a:	83 e2       	ldi	r24, 0x23	; 35
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <soft_right_degrees>
	soft_right();
    1e92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <correct_right+0x12c>
		{   
			stop();
			_delay_ms(50);
			break;
		}
	}
    1e98:	00 00       	nop
	_delay_ms(20);
	soft_right_degrees(35);
	soft_right();
	while(1)
	{
		read_line();    
    1e9a:	89 e7       	ldi	r24, 0x79	; 121
    1e9c:	92 e3       	ldi	r25, 0x32	; 50
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	19 95       	eicall
		if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>70))
    1ea2:	80 91 49 03 	lds	r24, 0x0349
    1ea6:	8f 30       	cpi	r24, 0x0F	; 15
    1ea8:	20 f0       	brcs	.+8      	; 0x1eb2 <correct_right+0x144>
    1eaa:	80 91 48 03 	lds	r24, 0x0348
    1eae:	8f 30       	cpi	r24, 0x0F	; 15
    1eb0:	20 f4       	brcc	.+8      	; 0x1eba <correct_right+0x14c>
    1eb2:	80 91 49 03 	lds	r24, 0x0349
    1eb6:	87 34       	cpi	r24, 0x47	; 71
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <correct_right+0x12a>
		{   
			stop();
    1eba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	a9 8b       	std	Y+17, r26	; 0x11
    1ecc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ed0:	78 89       	ldd	r23, Y+16	; 0x10
    1ed2:	89 89       	ldd	r24, Y+17	; 0x11
    1ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed6:	26 e6       	ldi	r18, 0x66	; 102
    1ed8:	36 e6       	ldi	r19, 0x66	; 102
    1eda:	46 e6       	ldi	r20, 0x66	; 102
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	ad 8b       	std	Y+21, r26	; 0x15
    1eec:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1eee:	11 e0       	ldi	r17, 0x01	; 1
    1ef0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ef2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ef4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <correct_right+0x19c>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	11 23       	and	r17, r17
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <correct_right+0x1aa>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 8f       	std	Y+24, r25	; 0x18
    1f14:	8f 8b       	std	Y+23, r24	; 0x17
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <correct_right+0x236>
	else if (__tmp > 65535)
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    1f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    1f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <correct_right+0x1c6>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	11 23       	and	r17, r17
    1f36:	61 f1       	breq	.+88     	; 0x1f90 <correct_right+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f3a:	78 89       	ldd	r23, Y+16	; 0x10
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 8f       	std	Y+24, r25	; 0x18
    1f5e:	8f 8b       	std	Y+23, r24	; 0x17
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <correct_right+0x218>
    1f62:	80 e7       	ldi	r24, 0x70	; 112
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9a 8f       	std	Y+26, r25	; 0x1a
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f6e:	8c 01       	movw	r16, r24
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <correct_right+0x204>
    1f76:	8c 01       	movw	r16, r24
    1f78:	1a 8f       	std	Y+26, r17	; 0x1a
    1f7a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	98 8f       	std	Y+24, r25	; 0x18
    1f84:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	51 f7       	brne	.-44     	; 0x1f62 <correct_right+0x1f4>
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <correct_right+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6b 89       	ldd	r22, Y+19	; 0x13
    1f92:	7c 89       	ldd	r23, Y+20	; 0x14
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	9e 89       	ldd	r25, Y+22	; 0x16
    1f98:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	98 8f       	std	Y+24, r25	; 0x18
    1fa2:	8f 8b       	std	Y+23, r24	; 0x17
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <correct_right+0x246>
    1fb8:	8c 01       	movw	r16, r24
    1fba:	1c 8f       	std	Y+28, r17	; 0x1c
    1fbc:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <correct_right+0x254>
    1fc0:	00 00       	nop
		}
	}

}
    1fc2:	6c 96       	adiw	r28, 0x1c	; 28
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <correct_right2>:

*/

void correct_right2()

{   stop();
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6c 97       	sbiw	r28, 0x1c	; 28
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2004:	69 81       	ldd	r22, Y+1	; 0x01
    2006:	7a 81       	ldd	r23, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	26 e6       	ldi	r18, 0x66	; 102
    200e:	36 e6       	ldi	r19, 0x66	; 102
    2010:	46 e6       	ldi	r20, 0x66	; 102
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	af 83       	std	Y+7, r26	; 0x07
    2022:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2024:	11 e0       	ldi	r17, 0x01	; 1
    2026:	6d 81       	ldd	r22, Y+5	; 0x05
    2028:	7e 81       	ldd	r23, Y+6	; 0x06
    202a:	8f 81       	ldd	r24, Y+7	; 0x07
    202c:	98 85       	ldd	r25, Y+8	; 0x08
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    203a:	88 23       	and	r24, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <correct_right2+0x68>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	11 23       	and	r17, r17
    2042:	29 f0       	breq	.+10     	; 0x204e <correct_right2+0x76>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 87       	std	Y+10, r25	; 0x0a
    204a:	89 87       	std	Y+9, r24	; 0x09
    204c:	46 c0       	rjmp	.+140    	; 0x20da <correct_right2+0x102>
	else if (__tmp > 65535)
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	6d 81       	ldd	r22, Y+5	; 0x05
    2052:	7e 81       	ldd	r23, Y+6	; 0x06
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <correct_right2+0x92>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	11 23       	and	r17, r17
    206c:	61 f1       	breq	.+88     	; 0x20c6 <correct_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	69 81       	ldd	r22, Y+1	; 0x01
    2070:	7a 81       	ldd	r23, Y+2	; 0x02
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a 87       	std	Y+10, r25	; 0x0a
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <correct_right2+0xe4>
    2098:	80 e7       	ldi	r24, 0x70	; 112
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a4:	8c 01       	movw	r16, r24
    20a6:	c8 01       	movw	r24, r16
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <correct_right2+0xd0>
    20ac:	8c 01       	movw	r16, r24
    20ae:	1c 87       	std	Y+12, r17	; 0x0c
    20b0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9a 87       	std	Y+10, r25	; 0x0a
    20ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	51 f7       	brne	.-44     	; 0x2098 <correct_right2+0xc0>
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <correct_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6d 81       	ldd	r22, Y+5	; 0x05
    20c8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9a 87       	std	Y+10, r25	; 0x0a
    20d8:	89 87       	std	Y+9, r24	; 0x09
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	9e 87       	std	Y+14, r25	; 0x0e
    20e0:	8d 87       	std	Y+13, r24	; 0x0d
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	8c 01       	movw	r16, r24
    20e8:	c8 01       	movw	r24, r16
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <correct_right2+0x112>
    20ee:	8c 01       	movw	r16, r24
    20f0:	1e 87       	std	Y+14, r17	; 0x0e
    20f2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	right_degrees(35);
    20f4:	83 e2       	ldi	r24, 0x23	; 35
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    20fc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <correct_right2+0x12c>

			break;

		}

	}
    2102:	00 00       	nop
	right();
	while(1)

	{

		read_line();
    2104:	89 e7       	ldi	r24, 0x79	; 121
    2106:	92 e3       	ldi	r25, 0x32	; 50
    2108:	fc 01       	movw	r30, r24
    210a:	19 95       	eicall

		if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>71))
    210c:	80 91 49 03 	lds	r24, 0x0349
    2110:	8f 30       	cpi	r24, 0x0F	; 15
    2112:	20 f0       	brcs	.+8      	; 0x211c <correct_right2+0x144>
    2114:	80 91 48 03 	lds	r24, 0x0348
    2118:	8f 30       	cpi	r24, 0x0F	; 15
    211a:	20 f4       	brcc	.+8      	; 0x2124 <correct_right2+0x14c>
    211c:	80 91 49 03 	lds	r24, 0x0349
    2120:	88 34       	cpi	r24, 0x48	; 72
    2122:	78 f3       	brcs	.-34     	; 0x2102 <correct_right2+0x12a>

		{

			stop();
    2124:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a8 e4       	ldi	r26, 0x48	; 72
    212e:	b2 e4       	ldi	r27, 0x42	; 66
    2130:	8f 87       	std	Y+15, r24	; 0x0f
    2132:	98 8b       	std	Y+16, r25	; 0x10
    2134:	a9 8b       	std	Y+17, r26	; 0x11
    2136:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6f 85       	ldd	r22, Y+15	; 0x0f
    213a:	78 89       	ldd	r23, Y+16	; 0x10
    213c:	89 89       	ldd	r24, Y+17	; 0x11
    213e:	9a 89       	ldd	r25, Y+18	; 0x12
    2140:	26 e6       	ldi	r18, 0x66	; 102
    2142:	36 e6       	ldi	r19, 0x66	; 102
    2144:	46 e6       	ldi	r20, 0x66	; 102
    2146:	55 e4       	ldi	r21, 0x45	; 69
    2148:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	ad 8b       	std	Y+21, r26	; 0x15
    2156:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2158:	11 e0       	ldi	r17, 0x01	; 1
    215a:	6b 89       	ldd	r22, Y+19	; 0x13
    215c:	7c 89       	ldd	r23, Y+20	; 0x14
    215e:	8d 89       	ldd	r24, Y+21	; 0x15
    2160:	9e 89       	ldd	r25, Y+22	; 0x16
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    216e:	88 23       	and	r24, r24
    2170:	0c f0       	brlt	.+2      	; 0x2174 <correct_right2+0x19c>
    2172:	10 e0       	ldi	r17, 0x00	; 0
    2174:	11 23       	and	r17, r17
    2176:	29 f0       	breq	.+10     	; 0x2182 <correct_right2+0x1aa>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	98 8f       	std	Y+24, r25	; 0x18
    217e:	8f 8b       	std	Y+23, r24	; 0x17
    2180:	46 c0       	rjmp	.+140    	; 0x220e <__stack+0xf>
	else if (__tmp > 65535)
    2182:	11 e0       	ldi	r17, 0x01	; 1
    2184:	6b 89       	ldd	r22, Y+19	; 0x13
    2186:	7c 89       	ldd	r23, Y+20	; 0x14
    2188:	8d 89       	ldd	r24, Y+21	; 0x15
    218a:	9e 89       	ldd	r25, Y+22	; 0x16
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2198:	18 16       	cp	r1, r24
    219a:	0c f0       	brlt	.+2      	; 0x219e <correct_right2+0x1c6>
    219c:	10 e0       	ldi	r17, 0x00	; 0
    219e:	11 23       	and	r17, r17
    21a0:	61 f1       	breq	.+88     	; 0x21fa <correct_right2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    21a4:	78 89       	ldd	r23, Y+16	; 0x10
    21a6:	89 89       	ldd	r24, Y+17	; 0x11
    21a8:	9a 89       	ldd	r25, Y+18	; 0x12
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	98 8f       	std	Y+24, r25	; 0x18
    21c8:	8f 8b       	std	Y+23, r24	; 0x17
    21ca:	12 c0       	rjmp	.+36     	; 0x21f0 <correct_right2+0x218>
    21cc:	80 e7       	ldi	r24, 0x70	; 112
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	9a 8f       	std	Y+26, r25	; 0x1a
    21d2:	89 8f       	std	Y+25, r24	; 0x19
    21d4:	89 8d       	ldd	r24, Y+25	; 0x19
    21d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21d8:	8c 01       	movw	r16, r24
    21da:	c8 01       	movw	r24, r16
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <correct_right2+0x204>
    21e0:	8c 01       	movw	r16, r24
    21e2:	1a 8f       	std	Y+26, r17	; 0x1a
    21e4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	98 8f       	std	Y+24, r25	; 0x18
    21ee:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8f 89       	ldd	r24, Y+23	; 0x17
    21f2:	98 8d       	ldd	r25, Y+24	; 0x18
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	51 f7       	brne	.-44     	; 0x21cc <correct_right2+0x1f4>
    21f8:	18 c0       	rjmp	.+48     	; 0x222a <__stack+0x2b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6b 89       	ldd	r22, Y+19	; 0x13
    21fc:	7c 89       	ldd	r23, Y+20	; 0x14
    21fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2200:	9e 89       	ldd	r25, Y+22	; 0x16
    2202:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	98 8f       	std	Y+24, r25	; 0x18
    220c:	8f 8b       	std	Y+23, r24	; 0x17
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	9c 8f       	std	Y+28, r25	; 0x1c
    2214:	8b 8f       	std	Y+27, r24	; 0x1b
    2216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221a:	8c 01       	movw	r16, r24
    221c:	c8 01       	movw	r24, r16
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <__stack+0x1f>
    2222:	8c 01       	movw	r16, r24
    2224:	1c 8f       	std	Y+28, r17	; 0x1c
    2226:	0b 8f       	std	Y+27, r16	; 0x1b

			_delay_ms(50);

			break;
    2228:	01 c0       	rjmp	.+2      	; 0x222c <__stack+0x2d>
    222a:	00 00       	nop

		}

	}
}
    222c:	6c 96       	adiw	r28, 0x1c	; 28
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	08 95       	ret

00002242 <correct_left>:

*/

void correct_left()

{   
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	6c 97       	sbiw	r28, 0x1c	; 28
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
	     stop();
    225a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 ea       	ldi	r26, 0xA0	; 160
    2264:	b1 e4       	ldi	r27, 0x41	; 65
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	ab 83       	std	Y+3, r26	; 0x03
    226c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    226e:	69 81       	ldd	r22, Y+1	; 0x01
    2270:	7a 81       	ldd	r23, Y+2	; 0x02
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	26 e6       	ldi	r18, 0x66	; 102
    2278:	36 e6       	ldi	r19, 0x66	; 102
    227a:	46 e6       	ldi	r20, 0x66	; 102
    227c:	55 e4       	ldi	r21, 0x45	; 69
    227e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	af 83       	std	Y+7, r26	; 0x07
    228c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    228e:	11 e0       	ldi	r17, 0x01	; 1
    2290:	6d 81       	ldd	r22, Y+5	; 0x05
    2292:	7e 81       	ldd	r23, Y+6	; 0x06
    2294:	8f 81       	ldd	r24, Y+7	; 0x07
    2296:	98 85       	ldd	r25, Y+8	; 0x08
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	0c f0       	brlt	.+2      	; 0x22aa <correct_left+0x68>
    22a8:	10 e0       	ldi	r17, 0x00	; 0
    22aa:	11 23       	and	r17, r17
    22ac:	29 f0       	breq	.+10     	; 0x22b8 <correct_left+0x76>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9a 87       	std	Y+10, r25	; 0x0a
    22b4:	89 87       	std	Y+9, r24	; 0x09
    22b6:	46 c0       	rjmp	.+140    	; 0x2344 <correct_left+0x102>
	else if (__tmp > 65535)
    22b8:	11 e0       	ldi	r17, 0x01	; 1
    22ba:	6d 81       	ldd	r22, Y+5	; 0x05
    22bc:	7e 81       	ldd	r23, Y+6	; 0x06
    22be:	8f 81       	ldd	r24, Y+7	; 0x07
    22c0:	98 85       	ldd	r25, Y+8	; 0x08
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	0c f0       	brlt	.+2      	; 0x22d4 <correct_left+0x92>
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	11 23       	and	r17, r17
    22d6:	61 f1       	breq	.+88     	; 0x2330 <correct_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	69 81       	ldd	r22, Y+1	; 0x01
    22da:	7a 81       	ldd	r23, Y+2	; 0x02
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9a 87       	std	Y+10, r25	; 0x0a
    22fe:	89 87       	std	Y+9, r24	; 0x09
    2300:	12 c0       	rjmp	.+36     	; 0x2326 <correct_left+0xe4>
    2302:	80 e7       	ldi	r24, 0x70	; 112
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	9c 87       	std	Y+12, r25	; 0x0c
    2308:	8b 87       	std	Y+11, r24	; 0x0b
    230a:	8b 85       	ldd	r24, Y+11	; 0x0b
    230c:	9c 85       	ldd	r25, Y+12	; 0x0c
    230e:	8c 01       	movw	r16, r24
    2310:	c8 01       	movw	r24, r16
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <correct_left+0xd0>
    2316:	8c 01       	movw	r16, r24
    2318:	1c 87       	std	Y+12, r17	; 0x0c
    231a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9a 87       	std	Y+10, r25	; 0x0a
    2324:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	51 f7       	brne	.-44     	; 0x2302 <correct_left+0xc0>
    232e:	17 c0       	rjmp	.+46     	; 0x235e <correct_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6d 81       	ldd	r22, Y+5	; 0x05
    2332:	7e 81       	ldd	r23, Y+6	; 0x06
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	98 85       	ldd	r25, Y+8	; 0x08
    2338:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9a 87       	std	Y+10, r25	; 0x0a
    2342:	89 87       	std	Y+9, r24	; 0x09
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	9e 87       	std	Y+14, r25	; 0x0e
    234a:	8d 87       	std	Y+13, r24	; 0x0d
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	8c 01       	movw	r16, r24
    2352:	c8 01       	movw	r24, r16
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <correct_left+0x112>
    2358:	8c 01       	movw	r16, r24
    235a:	1e 87       	std	Y+14, r17	; 0x0e
    235c:	0d 87       	std	Y+13, r16	; 0x0d
		 _delay_ms(20);
	     soft_left_degrees(35);
    235e:	83 e2       	ldi	r24, 0x23	; 35
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <soft_left_degrees>
		 soft_left();
    2366:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>
    236a:	01 c0       	rjmp	.+2      	; 0x236e <correct_left+0x12c>
		     {
			     stop();
			     _delay_ms(50);
			     break;
		     }
	     }
    236c:	00 00       	nop
		 _delay_ms(20);
	     soft_left_degrees(35);
		 soft_left();
	     while(1)
	     {
		     read_line();
    236e:	89 e7       	ldi	r24, 0x79	; 121
    2370:	92 e3       	ldi	r25, 0x32	; 50
    2372:	fc 01       	movw	r30, r24
    2374:	19 95       	eicall
			 if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 80))
    2376:	80 91 49 03 	lds	r24, 0x0349
    237a:	8f 30       	cpi	r24, 0x0F	; 15
    237c:	20 f0       	brcs	.+8      	; 0x2386 <correct_left+0x144>
    237e:	80 91 4a 03 	lds	r24, 0x034A
    2382:	8f 30       	cpi	r24, 0x0F	; 15
    2384:	20 f4       	brcc	.+8      	; 0x238e <correct_left+0x14c>
    2386:	80 91 49 03 	lds	r24, 0x0349
    238a:	81 35       	cpi	r24, 0x51	; 81
    238c:	78 f3       	brcs	.-34     	; 0x236c <correct_left+0x12a>
		     {
			     stop();
    238e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a8 e4       	ldi	r26, 0x48	; 72
    2398:	b2 e4       	ldi	r27, 0x42	; 66
    239a:	8f 87       	std	Y+15, r24	; 0x0f
    239c:	98 8b       	std	Y+16, r25	; 0x10
    239e:	a9 8b       	std	Y+17, r26	; 0x11
    23a0:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    23a4:	78 89       	ldd	r23, Y+16	; 0x10
    23a6:	89 89       	ldd	r24, Y+17	; 0x11
    23a8:	9a 89       	ldd	r25, Y+18	; 0x12
    23aa:	26 e6       	ldi	r18, 0x66	; 102
    23ac:	36 e6       	ldi	r19, 0x66	; 102
    23ae:	46 e6       	ldi	r20, 0x66	; 102
    23b0:	55 e4       	ldi	r21, 0x45	; 69
    23b2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8b 8b       	std	Y+19, r24	; 0x13
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	ad 8b       	std	Y+21, r26	; 0x15
    23c0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23c2:	11 e0       	ldi	r17, 0x01	; 1
    23c4:	6b 89       	ldd	r22, Y+19	; 0x13
    23c6:	7c 89       	ldd	r23, Y+20	; 0x14
    23c8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ca:	9e 89       	ldd	r25, Y+22	; 0x16
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    23d8:	88 23       	and	r24, r24
    23da:	0c f0       	brlt	.+2      	; 0x23de <correct_left+0x19c>
    23dc:	10 e0       	ldi	r17, 0x00	; 0
    23de:	11 23       	and	r17, r17
    23e0:	29 f0       	breq	.+10     	; 0x23ec <correct_left+0x1aa>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	98 8f       	std	Y+24, r25	; 0x18
    23e8:	8f 8b       	std	Y+23, r24	; 0x17
    23ea:	46 c0       	rjmp	.+140    	; 0x2478 <correct_left+0x236>
	else if (__tmp > 65535)
    23ec:	11 e0       	ldi	r17, 0x01	; 1
    23ee:	6b 89       	ldd	r22, Y+19	; 0x13
    23f0:	7c 89       	ldd	r23, Y+20	; 0x14
    23f2:	8d 89       	ldd	r24, Y+21	; 0x15
    23f4:	9e 89       	ldd	r25, Y+22	; 0x16
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2402:	18 16       	cp	r1, r24
    2404:	0c f0       	brlt	.+2      	; 0x2408 <correct_left+0x1c6>
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	11 23       	and	r17, r17
    240a:	61 f1       	breq	.+88     	; 0x2464 <correct_left+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6f 85       	ldd	r22, Y+15	; 0x0f
    240e:	78 89       	ldd	r23, Y+16	; 0x10
    2410:	89 89       	ldd	r24, Y+17	; 0x11
    2412:	9a 89       	ldd	r25, Y+18	; 0x12
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	98 8f       	std	Y+24, r25	; 0x18
    2432:	8f 8b       	std	Y+23, r24	; 0x17
    2434:	12 c0       	rjmp	.+36     	; 0x245a <correct_left+0x218>
    2436:	80 e7       	ldi	r24, 0x70	; 112
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	9a 8f       	std	Y+26, r25	; 0x1a
    243c:	89 8f       	std	Y+25, r24	; 0x19
    243e:	89 8d       	ldd	r24, Y+25	; 0x19
    2440:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2442:	8c 01       	movw	r16, r24
    2444:	c8 01       	movw	r24, r16
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <correct_left+0x204>
    244a:	8c 01       	movw	r16, r24
    244c:	1a 8f       	std	Y+26, r17	; 0x1a
    244e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	98 8f       	std	Y+24, r25	; 0x18
    2458:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	51 f7       	brne	.-44     	; 0x2436 <correct_left+0x1f4>
    2462:	18 c0       	rjmp	.+48     	; 0x2494 <correct_left+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6b 89       	ldd	r22, Y+19	; 0x13
    2466:	7c 89       	ldd	r23, Y+20	; 0x14
    2468:	8d 89       	ldd	r24, Y+21	; 0x15
    246a:	9e 89       	ldd	r25, Y+22	; 0x16
    246c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	98 8f       	std	Y+24, r25	; 0x18
    2476:	8f 8b       	std	Y+23, r24	; 0x17
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	9c 8f       	std	Y+28, r25	; 0x1c
    247e:	8b 8f       	std	Y+27, r24	; 0x1b
    2480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2484:	8c 01       	movw	r16, r24
    2486:	c8 01       	movw	r24, r16
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <correct_left+0x246>
    248c:	8c 01       	movw	r16, r24
    248e:	1c 8f       	std	Y+28, r17	; 0x1c
    2490:	0b 8f       	std	Y+27, r16	; 0x1b
			     _delay_ms(50);
			     break;
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <correct_left+0x254>
    2494:	00 00       	nop
		     }
	     }
}
    2496:	6c 96       	adiw	r28, 0x1c	; 28
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	08 95       	ret

000024ac <spl_left>:

void spl_left(){
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	aa 97       	sbiw	r28, 0x2a	; 42
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
	stop();
    24c4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 ea       	ldi	r26, 0xA0	; 160
    24ce:	b1 e4       	ldi	r27, 0x41	; 65
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	ab 83       	std	Y+3, r26	; 0x03
    24d6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	69 81       	ldd	r22, Y+1	; 0x01
    24da:	7a 81       	ldd	r23, Y+2	; 0x02
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	26 e6       	ldi	r18, 0x66	; 102
    24e2:	36 e6       	ldi	r19, 0x66	; 102
    24e4:	46 e6       	ldi	r20, 0x66	; 102
    24e6:	55 e4       	ldi	r21, 0x45	; 69
    24e8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	af 83       	std	Y+7, r26	; 0x07
    24f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24f8:	11 e0       	ldi	r17, 0x01	; 1
    24fa:	6d 81       	ldd	r22, Y+5	; 0x05
    24fc:	7e 81       	ldd	r23, Y+6	; 0x06
    24fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2500:	98 85       	ldd	r25, Y+8	; 0x08
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    250e:	88 23       	and	r24, r24
    2510:	0c f0       	brlt	.+2      	; 0x2514 <spl_left+0x68>
    2512:	10 e0       	ldi	r17, 0x00	; 0
    2514:	11 23       	and	r17, r17
    2516:	29 f0       	breq	.+10     	; 0x2522 <spl_left+0x76>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9a 87       	std	Y+10, r25	; 0x0a
    251e:	89 87       	std	Y+9, r24	; 0x09
    2520:	46 c0       	rjmp	.+140    	; 0x25ae <spl_left+0x102>
	else if (__tmp > 65535)
    2522:	11 e0       	ldi	r17, 0x01	; 1
    2524:	6d 81       	ldd	r22, Y+5	; 0x05
    2526:	7e 81       	ldd	r23, Y+6	; 0x06
    2528:	8f 81       	ldd	r24, Y+7	; 0x07
    252a:	98 85       	ldd	r25, Y+8	; 0x08
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	3f ef       	ldi	r19, 0xFF	; 255
    2530:	4f e7       	ldi	r20, 0x7F	; 127
    2532:	57 e4       	ldi	r21, 0x47	; 71
    2534:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2538:	18 16       	cp	r1, r24
    253a:	0c f0       	brlt	.+2      	; 0x253e <spl_left+0x92>
    253c:	10 e0       	ldi	r17, 0x00	; 0
    253e:	11 23       	and	r17, r17
    2540:	61 f1       	breq	.+88     	; 0x259a <spl_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2542:	69 81       	ldd	r22, Y+1	; 0x01
    2544:	7a 81       	ldd	r23, Y+2	; 0x02
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e2       	ldi	r20, 0x20	; 32
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9a 87       	std	Y+10, r25	; 0x0a
    2568:	89 87       	std	Y+9, r24	; 0x09
    256a:	12 c0       	rjmp	.+36     	; 0x2590 <spl_left+0xe4>
    256c:	80 e7       	ldi	r24, 0x70	; 112
    256e:	91 e0       	ldi	r25, 0x01	; 1
    2570:	9c 87       	std	Y+12, r25	; 0x0c
    2572:	8b 87       	std	Y+11, r24	; 0x0b
    2574:	8b 85       	ldd	r24, Y+11	; 0x0b
    2576:	9c 85       	ldd	r25, Y+12	; 0x0c
    2578:	8c 01       	movw	r16, r24
    257a:	c8 01       	movw	r24, r16
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <spl_left+0xd0>
    2580:	8c 01       	movw	r16, r24
    2582:	1c 87       	std	Y+12, r17	; 0x0c
    2584:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9a 87       	std	Y+10, r25	; 0x0a
    258e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	51 f7       	brne	.-44     	; 0x256c <spl_left+0xc0>
    2598:	17 c0       	rjmp	.+46     	; 0x25c8 <spl_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	6d 81       	ldd	r22, Y+5	; 0x05
    259c:	7e 81       	ldd	r23, Y+6	; 0x06
    259e:	8f 81       	ldd	r24, Y+7	; 0x07
    25a0:	98 85       	ldd	r25, Y+8	; 0x08
    25a2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9a 87       	std	Y+10, r25	; 0x0a
    25ac:	89 87       	std	Y+9, r24	; 0x09
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	9e 87       	std	Y+14, r25	; 0x0e
    25b4:	8d 87       	std	Y+13, r24	; 0x0d
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	8c 01       	movw	r16, r24
    25bc:	c8 01       	movw	r24, r16
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <spl_left+0x112>
    25c2:	8c 01       	movw	r16, r24
    25c4:	1e 87       	std	Y+14, r17	; 0x0e
    25c6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(35);
    25c8:	83 e2       	ldi	r24, 0x23	; 35
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    25d0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    25d4:	01 c0       	rjmp	.+2      	; 0x25d8 <spl_left+0x12c>
		{
		stop();
		_delay_ms(20);
		break;	
		}
	}
    25d6:	00 00       	nop
	stop();
	_delay_ms(20);
	left_degrees(35);
	left();
	while(1){
		read_line();
    25d8:	89 e7       	ldi	r24, 0x79	; 121
    25da:	92 e3       	ldi	r25, 0x32	; 50
    25dc:	fc 01       	movw	r30, r24
    25de:	19 95       	eicall
		if(Center_white_line>=25)
    25e0:	80 91 49 03 	lds	r24, 0x0349
    25e4:	89 31       	cpi	r24, 0x19	; 25
    25e6:	b8 f3       	brcs	.-18     	; 0x25d6 <spl_left+0x12a>
		{
		stop();
    25e8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a0 ea       	ldi	r26, 0xA0	; 160
    25f2:	b1 e4       	ldi	r27, 0x41	; 65
    25f4:	8f 87       	std	Y+15, r24	; 0x0f
    25f6:	98 8b       	std	Y+16, r25	; 0x10
    25f8:	a9 8b       	std	Y+17, r26	; 0x11
    25fa:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    25fe:	78 89       	ldd	r23, Y+16	; 0x10
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	26 e6       	ldi	r18, 0x66	; 102
    2606:	36 e6       	ldi	r19, 0x66	; 102
    2608:	46 e6       	ldi	r20, 0x66	; 102
    260a:	55 e4       	ldi	r21, 0x45	; 69
    260c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	9c 8b       	std	Y+20, r25	; 0x14
    2618:	ad 8b       	std	Y+21, r26	; 0x15
    261a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    261c:	11 e0       	ldi	r17, 0x01	; 1
    261e:	6b 89       	ldd	r22, Y+19	; 0x13
    2620:	7c 89       	ldd	r23, Y+20	; 0x14
    2622:	8d 89       	ldd	r24, Y+21	; 0x15
    2624:	9e 89       	ldd	r25, Y+22	; 0x16
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2632:	88 23       	and	r24, r24
    2634:	0c f0       	brlt	.+2      	; 0x2638 <spl_left+0x18c>
    2636:	10 e0       	ldi	r17, 0x00	; 0
    2638:	11 23       	and	r17, r17
    263a:	29 f0       	breq	.+10     	; 0x2646 <spl_left+0x19a>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	98 8f       	std	Y+24, r25	; 0x18
    2642:	8f 8b       	std	Y+23, r24	; 0x17
    2644:	46 c0       	rjmp	.+140    	; 0x26d2 <spl_left+0x226>
	else if (__tmp > 65535)
    2646:	11 e0       	ldi	r17, 0x01	; 1
    2648:	6b 89       	ldd	r22, Y+19	; 0x13
    264a:	7c 89       	ldd	r23, Y+20	; 0x14
    264c:	8d 89       	ldd	r24, Y+21	; 0x15
    264e:	9e 89       	ldd	r25, Y+22	; 0x16
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    265c:	18 16       	cp	r1, r24
    265e:	0c f0       	brlt	.+2      	; 0x2662 <spl_left+0x1b6>
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	11 23       	and	r17, r17
    2664:	61 f1       	breq	.+88     	; 0x26be <spl_left+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2666:	6f 85       	ldd	r22, Y+15	; 0x0f
    2668:	78 89       	ldd	r23, Y+16	; 0x10
    266a:	89 89       	ldd	r24, Y+17	; 0x11
    266c:	9a 89       	ldd	r25, Y+18	; 0x12
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e2       	ldi	r20, 0x20	; 32
    2674:	51 e4       	ldi	r21, 0x41	; 65
    2676:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	bc 01       	movw	r22, r24
    2680:	cd 01       	movw	r24, r26
    2682:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	98 8f       	std	Y+24, r25	; 0x18
    268c:	8f 8b       	std	Y+23, r24	; 0x17
    268e:	12 c0       	rjmp	.+36     	; 0x26b4 <spl_left+0x208>
    2690:	80 e7       	ldi	r24, 0x70	; 112
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	9a 8f       	std	Y+26, r25	; 0x1a
    2696:	89 8f       	std	Y+25, r24	; 0x19
    2698:	89 8d       	ldd	r24, Y+25	; 0x19
    269a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    269c:	8c 01       	movw	r16, r24
    269e:	c8 01       	movw	r24, r16
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <spl_left+0x1f4>
    26a4:	8c 01       	movw	r16, r24
    26a6:	1a 8f       	std	Y+26, r17	; 0x1a
    26a8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	98 8f       	std	Y+24, r25	; 0x18
    26b2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8f 89       	ldd	r24, Y+23	; 0x17
    26b6:	98 8d       	ldd	r25, Y+24	; 0x18
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	51 f7       	brne	.-44     	; 0x2690 <spl_left+0x1e4>
    26bc:	18 c0       	rjmp	.+48     	; 0x26ee <spl_left+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	6b 89       	ldd	r22, Y+19	; 0x13
    26c0:	7c 89       	ldd	r23, Y+20	; 0x14
    26c2:	8d 89       	ldd	r24, Y+21	; 0x15
    26c4:	9e 89       	ldd	r25, Y+22	; 0x16
    26c6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	98 8f       	std	Y+24, r25	; 0x18
    26d0:	8f 8b       	std	Y+23, r24	; 0x17
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	9c 8f       	std	Y+28, r25	; 0x1c
    26d8:	8b 8f       	std	Y+27, r24	; 0x1b
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	8c 01       	movw	r16, r24
    26e0:	c8 01       	movw	r24, r16
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <spl_left+0x236>
    26e6:	8c 01       	movw	r16, r24
    26e8:	1c 8f       	std	Y+28, r17	; 0x1c
    26ea:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(20);
		break;	
    26ec:	00 c0       	rjmp	.+0      	; 0x26ee <spl_left+0x242>
    26ee:	00 00       	nop
		}
	}
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 ea       	ldi	r26, 0xA0	; 160
    26f6:	b1 e4       	ldi	r27, 0x41	; 65
    26f8:	8d 8f       	std	Y+29, r24	; 0x1d
    26fa:	9e 8f       	std	Y+30, r25	; 0x1e
    26fc:	af 8f       	std	Y+31, r26	; 0x1f
    26fe:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2702:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2704:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2706:	98 a1       	lds	r25, 0x48
    2708:	26 e6       	ldi	r18, 0x66	; 102
    270a:	36 e6       	ldi	r19, 0x66	; 102
    270c:	46 e6       	ldi	r20, 0x66	; 102
    270e:	55 e4       	ldi	r21, 0x45	; 69
    2710:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	89 a3       	lds	r24, 0x59
    271a:	9a a3       	lds	r25, 0x5a
    271c:	ab a3       	lds	r26, 0x5b
    271e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2720:	11 e0       	ldi	r17, 0x01	; 1
    2722:	69 a1       	lds	r22, 0x49
    2724:	7a a1       	lds	r23, 0x4a
    2726:	8b a1       	lds	r24, 0x4b
    2728:	9c a1       	lds	r25, 0x4c
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2736:	88 23       	and	r24, r24
    2738:	0c f0       	brlt	.+2      	; 0x273c <spl_left+0x290>
    273a:	10 e0       	ldi	r17, 0x00	; 0
    273c:	11 23       	and	r17, r17
    273e:	29 f0       	breq	.+10     	; 0x274a <spl_left+0x29e>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9e a3       	lds	r25, 0x5e
    2746:	8d a3       	lds	r24, 0x5d
    2748:	46 c0       	rjmp	.+140    	; 0x27d6 <spl_left+0x32a>
	else if (__tmp > 65535)
    274a:	11 e0       	ldi	r17, 0x01	; 1
    274c:	69 a1       	lds	r22, 0x49
    274e:	7a a1       	lds	r23, 0x4a
    2750:	8b a1       	lds	r24, 0x4b
    2752:	9c a1       	lds	r25, 0x4c
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	3f ef       	ldi	r19, 0xFF	; 255
    2758:	4f e7       	ldi	r20, 0x7F	; 127
    275a:	57 e4       	ldi	r21, 0x47	; 71
    275c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2760:	18 16       	cp	r1, r24
    2762:	0c f0       	brlt	.+2      	; 0x2766 <spl_left+0x2ba>
    2764:	10 e0       	ldi	r17, 0x00	; 0
    2766:	11 23       	and	r17, r17
    2768:	61 f1       	breq	.+88     	; 0x27c2 <spl_left+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    276c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    276e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2770:	98 a1       	lds	r25, 0x48
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e a3       	lds	r25, 0x5e
    2790:	8d a3       	lds	r24, 0x5d
    2792:	12 c0       	rjmp	.+36     	; 0x27b8 <spl_left+0x30c>
    2794:	80 e7       	ldi	r24, 0x70	; 112
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	98 a7       	lds	r25, 0x78
    279a:	8f a3       	lds	r24, 0x5f
    279c:	8f a1       	lds	r24, 0x4f
    279e:	98 a5       	lds	r25, 0x68
    27a0:	8c 01       	movw	r16, r24
    27a2:	c8 01       	movw	r24, r16
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <spl_left+0x2f8>
    27a8:	8c 01       	movw	r16, r24
    27aa:	18 a7       	lds	r17, 0x78
    27ac:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	8d a1       	lds	r24, 0x4d
    27b0:	9e a1       	lds	r25, 0x4e
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9e a3       	lds	r25, 0x5e
    27b6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	8d a1       	lds	r24, 0x4d
    27ba:	9e a1       	lds	r25, 0x4e
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	51 f7       	brne	.-44     	; 0x2794 <spl_left+0x2e8>
    27c0:	17 c0       	rjmp	.+46     	; 0x27f0 <spl_left+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	69 a1       	lds	r22, 0x49
    27c4:	7a a1       	lds	r23, 0x4a
    27c6:	8b a1       	lds	r24, 0x4b
    27c8:	9c a1       	lds	r25, 0x4c
    27ca:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e a3       	lds	r25, 0x5e
    27d4:	8d a3       	lds	r24, 0x5d
    27d6:	8d a1       	lds	r24, 0x4d
    27d8:	9e a1       	lds	r25, 0x4e
    27da:	9a a7       	lds	r25, 0x7a
    27dc:	89 a7       	lds	r24, 0x79
    27de:	89 a5       	lds	r24, 0x69
    27e0:	9a a5       	lds	r25, 0x6a
    27e2:	8c 01       	movw	r16, r24
    27e4:	c8 01       	movw	r24, r16
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <spl_left+0x33a>
    27ea:	8c 01       	movw	r16, r24
    27ec:	1a a7       	lds	r17, 0x7a
    27ee:	09 a7       	lds	r16, 0x79
	_delay_ms(20);
}
    27f0:	aa 96       	adiw	r28, 0x2a	; 42
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	08 95       	ret

00002806 <spl_right>:
void spl_right(){
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	6c 97       	sbiw	r28, 0x1c	; 28
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
	right_degrees(25);
    281e:	89 e1       	ldi	r24, 0x19	; 25
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    2826:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    282a:	01 c0       	rjmp	.+2      	; 0x282e <spl_right+0x28>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    282c:	00 00       	nop
}
void spl_right(){
	right_degrees(25);
	right();
	while(1){
		read_line();
    282e:	89 e7       	ldi	r24, 0x79	; 121
    2830:	92 e3       	ldi	r25, 0x32	; 50
    2832:	fc 01       	movw	r30, r24
    2834:	19 95       	eicall
		if(Center_white_line>=25)
    2836:	80 91 49 03 	lds	r24, 0x0349
    283a:	89 31       	cpi	r24, 0x19	; 25
    283c:	b8 f3       	brcs	.-18     	; 0x282c <spl_right+0x26>
		{
			stop();
    283e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a0 ea       	ldi	r26, 0xA0	; 160
    2848:	b1 e4       	ldi	r27, 0x41	; 65
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	ab 83       	std	Y+3, r26	; 0x03
    2850:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2852:	69 81       	ldd	r22, Y+1	; 0x01
    2854:	7a 81       	ldd	r23, Y+2	; 0x02
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	26 e6       	ldi	r18, 0x66	; 102
    285c:	36 e6       	ldi	r19, 0x66	; 102
    285e:	46 e6       	ldi	r20, 0x66	; 102
    2860:	55 e4       	ldi	r21, 0x45	; 69
    2862:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	af 83       	std	Y+7, r26	; 0x07
    2870:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2872:	11 e0       	ldi	r17, 0x01	; 1
    2874:	6d 81       	ldd	r22, Y+5	; 0x05
    2876:	7e 81       	ldd	r23, Y+6	; 0x06
    2878:	8f 81       	ldd	r24, Y+7	; 0x07
    287a:	98 85       	ldd	r25, Y+8	; 0x08
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2888:	88 23       	and	r24, r24
    288a:	0c f0       	brlt	.+2      	; 0x288e <spl_right+0x88>
    288c:	10 e0       	ldi	r17, 0x00	; 0
    288e:	11 23       	and	r17, r17
    2890:	29 f0       	breq	.+10     	; 0x289c <spl_right+0x96>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9a 87       	std	Y+10, r25	; 0x0a
    2898:	89 87       	std	Y+9, r24	; 0x09
    289a:	46 c0       	rjmp	.+140    	; 0x2928 <spl_right+0x122>
	else if (__tmp > 65535)
    289c:	11 e0       	ldi	r17, 0x01	; 1
    289e:	6d 81       	ldd	r22, Y+5	; 0x05
    28a0:	7e 81       	ldd	r23, Y+6	; 0x06
    28a2:	8f 81       	ldd	r24, Y+7	; 0x07
    28a4:	98 85       	ldd	r25, Y+8	; 0x08
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	0c f0       	brlt	.+2      	; 0x28b8 <spl_right+0xb2>
    28b6:	10 e0       	ldi	r17, 0x00	; 0
    28b8:	11 23       	and	r17, r17
    28ba:	61 f1       	breq	.+88     	; 0x2914 <spl_right+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	69 81       	ldd	r22, Y+1	; 0x01
    28be:	7a 81       	ldd	r23, Y+2	; 0x02
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9a 87       	std	Y+10, r25	; 0x0a
    28e2:	89 87       	std	Y+9, r24	; 0x09
    28e4:	12 c0       	rjmp	.+36     	; 0x290a <spl_right+0x104>
    28e6:	80 e7       	ldi	r24, 0x70	; 112
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	9c 87       	std	Y+12, r25	; 0x0c
    28ec:	8b 87       	std	Y+11, r24	; 0x0b
    28ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    28f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28f2:	8c 01       	movw	r16, r24
    28f4:	c8 01       	movw	r24, r16
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <spl_right+0xf0>
    28fa:	8c 01       	movw	r16, r24
    28fc:	1c 87       	std	Y+12, r17	; 0x0c
    28fe:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9a 87       	std	Y+10, r25	; 0x0a
    2908:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	51 f7       	brne	.-44     	; 0x28e6 <spl_right+0xe0>
    2912:	18 c0       	rjmp	.+48     	; 0x2944 <spl_right+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6d 81       	ldd	r22, Y+5	; 0x05
    2916:	7e 81       	ldd	r23, Y+6	; 0x06
    2918:	8f 81       	ldd	r24, Y+7	; 0x07
    291a:	98 85       	ldd	r25, Y+8	; 0x08
    291c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9a 87       	std	Y+10, r25	; 0x0a
    2926:	89 87       	std	Y+9, r24	; 0x09
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	9e 87       	std	Y+14, r25	; 0x0e
    292e:	8d 87       	std	Y+13, r24	; 0x0d
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	9e 85       	ldd	r25, Y+14	; 0x0e
    2934:	8c 01       	movw	r16, r24
    2936:	c8 01       	movw	r24, r16
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <spl_right+0x132>
    293c:	8c 01       	movw	r16, r24
    293e:	1e 87       	std	Y+14, r17	; 0x0e
    2940:	0d 87       	std	Y+13, r16	; 0x0d
			_delay_ms(20);
			break;
    2942:	00 c0       	rjmp	.+0      	; 0x2944 <spl_right+0x13e>
    2944:	00 00       	nop
		}
	}
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a0 ea       	ldi	r26, 0xA0	; 160
    294c:	b1 e4       	ldi	r27, 0x41	; 65
    294e:	8f 87       	std	Y+15, r24	; 0x0f
    2950:	98 8b       	std	Y+16, r25	; 0x10
    2952:	a9 8b       	std	Y+17, r26	; 0x11
    2954:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2956:	6f 85       	ldd	r22, Y+15	; 0x0f
    2958:	78 89       	ldd	r23, Y+16	; 0x10
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	9a 89       	ldd	r25, Y+18	; 0x12
    295e:	26 e6       	ldi	r18, 0x66	; 102
    2960:	36 e6       	ldi	r19, 0x66	; 102
    2962:	46 e6       	ldi	r20, 0x66	; 102
    2964:	55 e4       	ldi	r21, 0x45	; 69
    2966:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	8b 8b       	std	Y+19, r24	; 0x13
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	ad 8b       	std	Y+21, r26	; 0x15
    2974:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2976:	11 e0       	ldi	r17, 0x01	; 1
    2978:	6b 89       	ldd	r22, Y+19	; 0x13
    297a:	7c 89       	ldd	r23, Y+20	; 0x14
    297c:	8d 89       	ldd	r24, Y+21	; 0x15
    297e:	9e 89       	ldd	r25, Y+22	; 0x16
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    298c:	88 23       	and	r24, r24
    298e:	0c f0       	brlt	.+2      	; 0x2992 <spl_right+0x18c>
    2990:	10 e0       	ldi	r17, 0x00	; 0
    2992:	11 23       	and	r17, r17
    2994:	29 f0       	breq	.+10     	; 0x29a0 <spl_right+0x19a>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	98 8f       	std	Y+24, r25	; 0x18
    299c:	8f 8b       	std	Y+23, r24	; 0x17
    299e:	46 c0       	rjmp	.+140    	; 0x2a2c <spl_right+0x226>
	else if (__tmp > 65535)
    29a0:	11 e0       	ldi	r17, 0x01	; 1
    29a2:	6b 89       	ldd	r22, Y+19	; 0x13
    29a4:	7c 89       	ldd	r23, Y+20	; 0x14
    29a6:	8d 89       	ldd	r24, Y+21	; 0x15
    29a8:	9e 89       	ldd	r25, Y+22	; 0x16
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <spl_right+0x1b6>
    29ba:	10 e0       	ldi	r17, 0x00	; 0
    29bc:	11 23       	and	r17, r17
    29be:	61 f1       	breq	.+88     	; 0x2a18 <spl_right+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    29c2:	78 89       	ldd	r23, Y+16	; 0x10
    29c4:	89 89       	ldd	r24, Y+17	; 0x11
    29c6:	9a 89       	ldd	r25, Y+18	; 0x12
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	98 8f       	std	Y+24, r25	; 0x18
    29e6:	8f 8b       	std	Y+23, r24	; 0x17
    29e8:	12 c0       	rjmp	.+36     	; 0x2a0e <spl_right+0x208>
    29ea:	80 e7       	ldi	r24, 0x70	; 112
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	9a 8f       	std	Y+26, r25	; 0x1a
    29f0:	89 8f       	std	Y+25, r24	; 0x19
    29f2:	89 8d       	ldd	r24, Y+25	; 0x19
    29f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29f6:	8c 01       	movw	r16, r24
    29f8:	c8 01       	movw	r24, r16
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <spl_right+0x1f4>
    29fe:	8c 01       	movw	r16, r24
    2a00:	1a 8f       	std	Y+26, r17	; 0x1a
    2a02:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8f 89       	ldd	r24, Y+23	; 0x17
    2a06:	98 8d       	ldd	r25, Y+24	; 0x18
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	98 8f       	std	Y+24, r25	; 0x18
    2a0c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	51 f7       	brne	.-44     	; 0x29ea <spl_right+0x1e4>
    2a16:	17 c0       	rjmp	.+46     	; 0x2a46 <spl_right+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	6b 89       	ldd	r22, Y+19	; 0x13
    2a1a:	7c 89       	ldd	r23, Y+20	; 0x14
    2a1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a20:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	98 8f       	std	Y+24, r25	; 0x18
    2a2a:	8f 8b       	std	Y+23, r24	; 0x17
    2a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a30:	9c 8f       	std	Y+28, r25	; 0x1c
    2a32:	8b 8f       	std	Y+27, r24	; 0x1b
    2a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a38:	8c 01       	movw	r16, r24
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <spl_right+0x236>
    2a40:	8c 01       	movw	r16, r24
    2a42:	1c 8f       	std	Y+28, r17	; 0x1c
    2a44:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(20);
}
    2a46:	6c 96       	adiw	r28, 0x1c	; 28
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	08 95       	ret

00002a5c <spl_left2>:
* Example Call:		correct_left2();



*/
void spl_left2(){// FOR FRONT PICK FROM LEFT DIRECTION
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	6c 97       	sbiw	r28, 0x1c	; 28
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
	stop();
    2a74:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a7e:	b1 e4       	ldi	r27, 0x41	; 65
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	ab 83       	std	Y+3, r26	; 0x03
    2a86:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	69 81       	ldd	r22, Y+1	; 0x01
    2a8a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	26 e6       	ldi	r18, 0x66	; 102
    2a92:	36 e6       	ldi	r19, 0x66	; 102
    2a94:	46 e6       	ldi	r20, 0x66	; 102
    2a96:	55 e4       	ldi	r21, 0x45	; 69
    2a98:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	af 83       	std	Y+7, r26	; 0x07
    2aa6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2aa8:	11 e0       	ldi	r17, 0x01	; 1
    2aaa:	6d 81       	ldd	r22, Y+5	; 0x05
    2aac:	7e 81       	ldd	r23, Y+6	; 0x06
    2aae:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab0:	98 85       	ldd	r25, Y+8	; 0x08
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	0c f0       	brlt	.+2      	; 0x2ac4 <spl_left2+0x68>
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	11 23       	and	r17, r17
    2ac6:	29 f0       	breq	.+10     	; 0x2ad2 <spl_left2+0x76>
		__ticks = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9a 87       	std	Y+10, r25	; 0x0a
    2ace:	89 87       	std	Y+9, r24	; 0x09
    2ad0:	46 c0       	rjmp	.+140    	; 0x2b5e <spl_left2+0x102>
	else if (__tmp > 65535)
    2ad2:	11 e0       	ldi	r17, 0x01	; 1
    2ad4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ad6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    2ada:	98 85       	ldd	r25, Y+8	; 0x08
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <spl_left2+0x92>
    2aec:	10 e0       	ldi	r17, 0x00	; 0
    2aee:	11 23       	and	r17, r17
    2af0:	61 f1       	breq	.+88     	; 0x2b4a <spl_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	69 81       	ldd	r22, Y+1	; 0x01
    2af4:	7a 81       	ldd	r23, Y+2	; 0x02
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9a 87       	std	Y+10, r25	; 0x0a
    2b18:	89 87       	std	Y+9, r24	; 0x09
    2b1a:	12 c0       	rjmp	.+36     	; 0x2b40 <spl_left2+0xe4>
    2b1c:	80 e7       	ldi	r24, 0x70	; 112
    2b1e:	91 e0       	ldi	r25, 0x01	; 1
    2b20:	9c 87       	std	Y+12, r25	; 0x0c
    2b22:	8b 87       	std	Y+11, r24	; 0x0b
    2b24:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b26:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b28:	8c 01       	movw	r16, r24
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <spl_left2+0xd0>
    2b30:	8c 01       	movw	r16, r24
    2b32:	1c 87       	std	Y+12, r17	; 0x0c
    2b34:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	9a 87       	std	Y+10, r25	; 0x0a
    2b3e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	51 f7       	brne	.-44     	; 0x2b1c <spl_left2+0xc0>
    2b48:	17 c0       	rjmp	.+46     	; 0x2b78 <spl_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b4c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b50:	98 85       	ldd	r25, Y+8	; 0x08
    2b52:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9a 87       	std	Y+10, r25	; 0x0a
    2b5c:	89 87       	std	Y+9, r24	; 0x09
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	9e 87       	std	Y+14, r25	; 0x0e
    2b64:	8d 87       	std	Y+13, r24	; 0x0d
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	8c 01       	movw	r16, r24
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <spl_left2+0x112>
    2b72:	8c 01       	movw	r16, r24
    2b74:	1e 87       	std	Y+14, r17	; 0x0e
    2b76:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_2_degrees(30);
    2b78:	8e e1       	ldi	r24, 0x1E	; 30
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <soft_left_2_degrees>
	soft_left_2();
    2b80:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <spl_left2+0x12c>
		if(Center_white_line>25){
			stop();
			_delay_ms(20);
			break;
		}
	}
    2b86:	00 00       	nop
	stop();
	_delay_ms(20);
	soft_left_2_degrees(30);
	soft_left_2();
	while(1){
		read_line();
    2b88:	89 e7       	ldi	r24, 0x79	; 121
    2b8a:	92 e3       	ldi	r25, 0x32	; 50
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	19 95       	eicall
		if(Center_white_line>25){
    2b90:	80 91 49 03 	lds	r24, 0x0349
    2b94:	8a 31       	cpi	r24, 0x1A	; 26
    2b96:	b8 f3       	brcs	.-18     	; 0x2b86 <spl_left2+0x12a>
			stop();
    2b98:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 ea       	ldi	r26, 0xA0	; 160
    2ba2:	b1 e4       	ldi	r27, 0x41	; 65
    2ba4:	8f 87       	std	Y+15, r24	; 0x0f
    2ba6:	98 8b       	std	Y+16, r25	; 0x10
    2ba8:	a9 8b       	std	Y+17, r26	; 0x11
    2baa:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2bac:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bae:	78 89       	ldd	r23, Y+16	; 0x10
    2bb0:	89 89       	ldd	r24, Y+17	; 0x11
    2bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb4:	26 e6       	ldi	r18, 0x66	; 102
    2bb6:	36 e6       	ldi	r19, 0x66	; 102
    2bb8:	46 e6       	ldi	r20, 0x66	; 102
    2bba:	55 e4       	ldi	r21, 0x45	; 69
    2bbc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
    2bc6:	9c 8b       	std	Y+20, r25	; 0x14
    2bc8:	ad 8b       	std	Y+21, r26	; 0x15
    2bca:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2bcc:	11 e0       	ldi	r17, 0x01	; 1
    2bce:	6b 89       	ldd	r22, Y+19	; 0x13
    2bd0:	7c 89       	ldd	r23, Y+20	; 0x14
    2bd2:	8d 89       	ldd	r24, Y+21	; 0x15
    2bd4:	9e 89       	ldd	r25, Y+22	; 0x16
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e8       	ldi	r20, 0x80	; 128
    2bdc:	5f e3       	ldi	r21, 0x3F	; 63
    2bde:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2be2:	88 23       	and	r24, r24
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <spl_left2+0x18c>
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    2be8:	11 23       	and	r17, r17
    2bea:	29 f0       	breq	.+10     	; 0x2bf6 <spl_left2+0x19a>
		__ticks = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	98 8f       	std	Y+24, r25	; 0x18
    2bf2:	8f 8b       	std	Y+23, r24	; 0x17
    2bf4:	46 c0       	rjmp	.+140    	; 0x2c82 <spl_left2+0x226>
	else if (__tmp > 65535)
    2bf6:	11 e0       	ldi	r17, 0x01	; 1
    2bf8:	6b 89       	ldd	r22, Y+19	; 0x13
    2bfa:	7c 89       	ldd	r23, Y+20	; 0x14
    2bfc:	8d 89       	ldd	r24, Y+21	; 0x15
    2bfe:	9e 89       	ldd	r25, Y+22	; 0x16
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	3f ef       	ldi	r19, 0xFF	; 255
    2c04:	4f e7       	ldi	r20, 0x7F	; 127
    2c06:	57 e4       	ldi	r21, 0x47	; 71
    2c08:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2c0c:	18 16       	cp	r1, r24
    2c0e:	0c f0       	brlt	.+2      	; 0x2c12 <spl_left2+0x1b6>
    2c10:	10 e0       	ldi	r17, 0x00	; 0
    2c12:	11 23       	and	r17, r17
    2c14:	61 f1       	breq	.+88     	; 0x2c6e <spl_left2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c18:	78 89       	ldd	r23, Y+16	; 0x10
    2c1a:	89 89       	ldd	r24, Y+17	; 0x11
    2c1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	98 8f       	std	Y+24, r25	; 0x18
    2c3c:	8f 8b       	std	Y+23, r24	; 0x17
    2c3e:	12 c0       	rjmp	.+36     	; 0x2c64 <spl_left2+0x208>
    2c40:	80 e7       	ldi	r24, 0x70	; 112
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	9a 8f       	std	Y+26, r25	; 0x1a
    2c46:	89 8f       	std	Y+25, r24	; 0x19
    2c48:	89 8d       	ldd	r24, Y+25	; 0x19
    2c4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c4c:	8c 01       	movw	r16, r24
    2c4e:	c8 01       	movw	r24, r16
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <spl_left2+0x1f4>
    2c54:	8c 01       	movw	r16, r24
    2c56:	1a 8f       	std	Y+26, r17	; 0x1a
    2c58:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	98 8f       	std	Y+24, r25	; 0x18
    2c62:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	8f 89       	ldd	r24, Y+23	; 0x17
    2c66:	98 8d       	ldd	r25, Y+24	; 0x18
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	51 f7       	brne	.-44     	; 0x2c40 <spl_left2+0x1e4>
    2c6c:	18 c0       	rjmp	.+48     	; 0x2c9e <spl_left2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6b 89       	ldd	r22, Y+19	; 0x13
    2c70:	7c 89       	ldd	r23, Y+20	; 0x14
    2c72:	8d 89       	ldd	r24, Y+21	; 0x15
    2c74:	9e 89       	ldd	r25, Y+22	; 0x16
    2c76:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	98 8f       	std	Y+24, r25	; 0x18
    2c80:	8f 8b       	std	Y+23, r24	; 0x17
    2c82:	8f 89       	ldd	r24, Y+23	; 0x17
    2c84:	98 8d       	ldd	r25, Y+24	; 0x18
    2c86:	9c 8f       	std	Y+28, r25	; 0x1c
    2c88:	8b 8f       	std	Y+27, r24	; 0x1b
    2c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8e:	8c 01       	movw	r16, r24
    2c90:	c8 01       	movw	r24, r16
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <spl_left2+0x236>
    2c96:	8c 01       	movw	r16, r24
    2c98:	1c 8f       	std	Y+28, r17	; 0x1c
    2c9a:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <spl_left2+0x244>
    2c9e:	00 00       	nop
		}
	}
}
    2ca0:	6c 96       	adiw	r28, 0x1c	; 28
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <spl_right2>:
void spl_right2(){//FOR FRONT WHEN BOT IS COMING FROM RIGHT
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	6c 97       	sbiw	r28, 0x1c	; 28
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
	stop();
    2cce:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cd8:	b1 e4       	ldi	r27, 0x41	; 65
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	ab 83       	std	Y+3, r26	; 0x03
    2ce0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	69 81       	ldd	r22, Y+1	; 0x01
    2ce4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	26 e6       	ldi	r18, 0x66	; 102
    2cec:	36 e6       	ldi	r19, 0x66	; 102
    2cee:	46 e6       	ldi	r20, 0x66	; 102
    2cf0:	55 e4       	ldi	r21, 0x45	; 69
    2cf2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	af 83       	std	Y+7, r26	; 0x07
    2d00:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2d02:	11 e0       	ldi	r17, 0x01	; 1
    2d04:	6d 81       	ldd	r22, Y+5	; 0x05
    2d06:	7e 81       	ldd	r23, Y+6	; 0x06
    2d08:	8f 81       	ldd	r24, Y+7	; 0x07
    2d0a:	98 85       	ldd	r25, Y+8	; 0x08
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	0c f0       	brlt	.+2      	; 0x2d1e <spl_right2+0x68>
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	11 23       	and	r17, r17
    2d20:	29 f0       	breq	.+10     	; 0x2d2c <spl_right2+0x76>
		__ticks = 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9a 87       	std	Y+10, r25	; 0x0a
    2d28:	89 87       	std	Y+9, r24	; 0x09
    2d2a:	46 c0       	rjmp	.+140    	; 0x2db8 <spl_right2+0x102>
	else if (__tmp > 65535)
    2d2c:	11 e0       	ldi	r17, 0x01	; 1
    2d2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d30:	7e 81       	ldd	r23, Y+6	; 0x06
    2d32:	8f 81       	ldd	r24, Y+7	; 0x07
    2d34:	98 85       	ldd	r25, Y+8	; 0x08
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	0c f0       	brlt	.+2      	; 0x2d48 <spl_right2+0x92>
    2d46:	10 e0       	ldi	r17, 0x00	; 0
    2d48:	11 23       	and	r17, r17
    2d4a:	61 f1       	breq	.+88     	; 0x2da4 <spl_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4c:	69 81       	ldd	r22, Y+1	; 0x01
    2d4e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e2       	ldi	r20, 0x20	; 32
    2d5a:	51 e4       	ldi	r21, 0x41	; 65
    2d5c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	bc 01       	movw	r22, r24
    2d66:	cd 01       	movw	r24, r26
    2d68:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9a 87       	std	Y+10, r25	; 0x0a
    2d72:	89 87       	std	Y+9, r24	; 0x09
    2d74:	12 c0       	rjmp	.+36     	; 0x2d9a <spl_right2+0xe4>
    2d76:	80 e7       	ldi	r24, 0x70	; 112
    2d78:	91 e0       	ldi	r25, 0x01	; 1
    2d7a:	9c 87       	std	Y+12, r25	; 0x0c
    2d7c:	8b 87       	std	Y+11, r24	; 0x0b
    2d7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d80:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d82:	8c 01       	movw	r16, r24
    2d84:	c8 01       	movw	r24, r16
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <spl_right2+0xd0>
    2d8a:	8c 01       	movw	r16, r24
    2d8c:	1c 87       	std	Y+12, r17	; 0x0c
    2d8e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d90:	89 85       	ldd	r24, Y+9	; 0x09
    2d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	9a 87       	std	Y+10, r25	; 0x0a
    2d98:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	51 f7       	brne	.-44     	; 0x2d76 <spl_right2+0xc0>
    2da2:	17 c0       	rjmp	.+46     	; 0x2dd2 <spl_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	6d 81       	ldd	r22, Y+5	; 0x05
    2da6:	7e 81       	ldd	r23, Y+6	; 0x06
    2da8:	8f 81       	ldd	r24, Y+7	; 0x07
    2daa:	98 85       	ldd	r25, Y+8	; 0x08
    2dac:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9a 87       	std	Y+10, r25	; 0x0a
    2db6:	89 87       	std	Y+9, r24	; 0x09
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	9e 87       	std	Y+14, r25	; 0x0e
    2dbe:	8d 87       	std	Y+13, r24	; 0x0d
    2dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc4:	8c 01       	movw	r16, r24
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <spl_right2+0x112>
    2dcc:	8c 01       	movw	r16, r24
    2dce:	1e 87       	std	Y+14, r17	; 0x0e
    2dd0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_2_degrees(30);
    2dd2:	8e e1       	ldi	r24, 0x1E	; 30
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <soft_right_2_degrees>
	soft_right_2();
    2dda:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <spl_right2+0x12c>
		if(Center_white_line>25){
			stop();
			_delay_ms(20);
			break;
		}
	}
    2de0:	00 00       	nop
	stop();
	_delay_ms(20);
	soft_right_2_degrees(30);
	soft_right_2();
	while(1){
		read_line();
    2de2:	89 e7       	ldi	r24, 0x79	; 121
    2de4:	92 e3       	ldi	r25, 0x32	; 50
    2de6:	fc 01       	movw	r30, r24
    2de8:	19 95       	eicall
		if(Center_white_line>25){
    2dea:	80 91 49 03 	lds	r24, 0x0349
    2dee:	8a 31       	cpi	r24, 0x1A	; 26
    2df0:	b8 f3       	brcs	.-18     	; 0x2de0 <spl_right2+0x12a>
			stop();
    2df2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	a0 ea       	ldi	r26, 0xA0	; 160
    2dfc:	b1 e4       	ldi	r27, 0x41	; 65
    2dfe:	8f 87       	std	Y+15, r24	; 0x0f
    2e00:	98 8b       	std	Y+16, r25	; 0x10
    2e02:	a9 8b       	std	Y+17, r26	; 0x11
    2e04:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e08:	78 89       	ldd	r23, Y+16	; 0x10
    2e0a:	89 89       	ldd	r24, Y+17	; 0x11
    2e0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e0e:	26 e6       	ldi	r18, 0x66	; 102
    2e10:	36 e6       	ldi	r19, 0x66	; 102
    2e12:	46 e6       	ldi	r20, 0x66	; 102
    2e14:	55 e4       	ldi	r21, 0x45	; 69
    2e16:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	8b 8b       	std	Y+19, r24	; 0x13
    2e20:	9c 8b       	std	Y+20, r25	; 0x14
    2e22:	ad 8b       	std	Y+21, r26	; 0x15
    2e24:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2e26:	11 e0       	ldi	r17, 0x01	; 1
    2e28:	6b 89       	ldd	r22, Y+19	; 0x13
    2e2a:	7c 89       	ldd	r23, Y+20	; 0x14
    2e2c:	8d 89       	ldd	r24, Y+21	; 0x15
    2e2e:	9e 89       	ldd	r25, Y+22	; 0x16
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	0c f0       	brlt	.+2      	; 0x2e42 <spl_right2+0x18c>
    2e40:	10 e0       	ldi	r17, 0x00	; 0
    2e42:	11 23       	and	r17, r17
    2e44:	29 f0       	breq	.+10     	; 0x2e50 <spl_right2+0x19a>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	98 8f       	std	Y+24, r25	; 0x18
    2e4c:	8f 8b       	std	Y+23, r24	; 0x17
    2e4e:	46 c0       	rjmp	.+140    	; 0x2edc <spl_right2+0x226>
	else if (__tmp > 65535)
    2e50:	11 e0       	ldi	r17, 0x01	; 1
    2e52:	6b 89       	ldd	r22, Y+19	; 0x13
    2e54:	7c 89       	ldd	r23, Y+20	; 0x14
    2e56:	8d 89       	ldd	r24, Y+21	; 0x15
    2e58:	9e 89       	ldd	r25, Y+22	; 0x16
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	3f ef       	ldi	r19, 0xFF	; 255
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	57 e4       	ldi	r21, 0x47	; 71
    2e62:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	0c f0       	brlt	.+2      	; 0x2e6c <spl_right2+0x1b6>
    2e6a:	10 e0       	ldi	r17, 0x00	; 0
    2e6c:	11 23       	and	r17, r17
    2e6e:	61 f1       	breq	.+88     	; 0x2ec8 <spl_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e70:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e72:	78 89       	ldd	r23, Y+16	; 0x10
    2e74:	89 89       	ldd	r24, Y+17	; 0x11
    2e76:	9a 89       	ldd	r25, Y+18	; 0x12
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e2       	ldi	r20, 0x20	; 32
    2e7e:	51 e4       	ldi	r21, 0x41	; 65
    2e80:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	98 8f       	std	Y+24, r25	; 0x18
    2e96:	8f 8b       	std	Y+23, r24	; 0x17
    2e98:	12 c0       	rjmp	.+36     	; 0x2ebe <spl_right2+0x208>
    2e9a:	80 e7       	ldi	r24, 0x70	; 112
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2ea0:	89 8f       	std	Y+25, r24	; 0x19
    2ea2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ea6:	8c 01       	movw	r16, r24
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <spl_right2+0x1f4>
    2eae:	8c 01       	movw	r16, r24
    2eb0:	1a 8f       	std	Y+26, r17	; 0x1a
    2eb2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	98 8f       	std	Y+24, r25	; 0x18
    2ebc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	51 f7       	brne	.-44     	; 0x2e9a <spl_right2+0x1e4>
    2ec6:	18 c0       	rjmp	.+48     	; 0x2ef8 <spl_right2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6b 89       	ldd	r22, Y+19	; 0x13
    2eca:	7c 89       	ldd	r23, Y+20	; 0x14
    2ecc:	8d 89       	ldd	r24, Y+21	; 0x15
    2ece:	9e 89       	ldd	r25, Y+22	; 0x16
    2ed0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	98 8f       	std	Y+24, r25	; 0x18
    2eda:	8f 8b       	std	Y+23, r24	; 0x17
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	9c 8f       	std	Y+28, r25	; 0x1c
    2ee2:	8b 8f       	std	Y+27, r24	; 0x1b
    2ee4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ee6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ee8:	8c 01       	movw	r16, r24
    2eea:	c8 01       	movw	r24, r16
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <spl_right2+0x236>
    2ef0:	8c 01       	movw	r16, r24
    2ef2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ef4:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2ef6:	01 c0       	rjmp	.+2      	; 0x2efa <spl_right2+0x244>
    2ef8:	00 00       	nop
		}
	}
}
    2efa:	6c 96       	adiw	r28, 0x1c	; 28
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	08 95       	ret

00002f10 <correct_left2>:
void correct_left2()

{   
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	6c 97       	sbiw	r28, 0x1c	; 28
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61

    stop();
    2f28:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	a8 e4       	ldi	r26, 0x48	; 72
    2f32:	b2 e4       	ldi	r27, 0x42	; 66
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	ab 83       	std	Y+3, r26	; 0x03
    2f3a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	69 81       	ldd	r22, Y+1	; 0x01
    2f3e:	7a 81       	ldd	r23, Y+2	; 0x02
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	9c 81       	ldd	r25, Y+4	; 0x04
    2f44:	26 e6       	ldi	r18, 0x66	; 102
    2f46:	36 e6       	ldi	r19, 0x66	; 102
    2f48:	46 e6       	ldi	r20, 0x66	; 102
    2f4a:	55 e4       	ldi	r21, 0x45	; 69
    2f4c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	af 83       	std	Y+7, r26	; 0x07
    2f5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f5c:	11 e0       	ldi	r17, 0x01	; 1
    2f5e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f60:	7e 81       	ldd	r23, Y+6	; 0x06
    2f62:	8f 81       	ldd	r24, Y+7	; 0x07
    2f64:	98 85       	ldd	r25, Y+8	; 0x08
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	0c f0       	brlt	.+2      	; 0x2f78 <correct_left2+0x68>
    2f76:	10 e0       	ldi	r17, 0x00	; 0
    2f78:	11 23       	and	r17, r17
    2f7a:	29 f0       	breq	.+10     	; 0x2f86 <correct_left2+0x76>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9a 87       	std	Y+10, r25	; 0x0a
    2f82:	89 87       	std	Y+9, r24	; 0x09
    2f84:	46 c0       	rjmp	.+140    	; 0x3012 <correct_left2+0x102>
	else if (__tmp > 65535)
    2f86:	11 e0       	ldi	r17, 0x01	; 1
    2f88:	6d 81       	ldd	r22, Y+5	; 0x05
    2f8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f8e:	98 85       	ldd	r25, Y+8	; 0x08
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	3f ef       	ldi	r19, 0xFF	; 255
    2f94:	4f e7       	ldi	r20, 0x7F	; 127
    2f96:	57 e4       	ldi	r21, 0x47	; 71
    2f98:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    2f9c:	18 16       	cp	r1, r24
    2f9e:	0c f0       	brlt	.+2      	; 0x2fa2 <correct_left2+0x92>
    2fa0:	10 e0       	ldi	r17, 0x00	; 0
    2fa2:	11 23       	and	r17, r17
    2fa4:	61 f1       	breq	.+88     	; 0x2ffe <correct_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	69 81       	ldd	r22, Y+1	; 0x01
    2fa8:	7a 81       	ldd	r23, Y+2	; 0x02
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e2       	ldi	r20, 0x20	; 32
    2fb4:	51 e4       	ldi	r21, 0x41	; 65
    2fb6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9a 87       	std	Y+10, r25	; 0x0a
    2fcc:	89 87       	std	Y+9, r24	; 0x09
    2fce:	12 c0       	rjmp	.+36     	; 0x2ff4 <correct_left2+0xe4>
    2fd0:	80 e7       	ldi	r24, 0x70	; 112
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	9c 87       	std	Y+12, r25	; 0x0c
    2fd6:	8b 87       	std	Y+11, r24	; 0x0b
    2fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fda:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fdc:	8c 01       	movw	r16, r24
    2fde:	c8 01       	movw	r24, r16
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <correct_left2+0xd0>
    2fe4:	8c 01       	movw	r16, r24
    2fe6:	1c 87       	std	Y+12, r17	; 0x0c
    2fe8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fea:	89 85       	ldd	r24, Y+9	; 0x09
    2fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	9a 87       	std	Y+10, r25	; 0x0a
    2ff2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	00 97       	sbiw	r24, 0x00	; 0
    2ffa:	51 f7       	brne	.-44     	; 0x2fd0 <correct_left2+0xc0>
    2ffc:	17 c0       	rjmp	.+46     	; 0x302c <correct_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffe:	6d 81       	ldd	r22, Y+5	; 0x05
    3000:	7e 81       	ldd	r23, Y+6	; 0x06
    3002:	8f 81       	ldd	r24, Y+7	; 0x07
    3004:	98 85       	ldd	r25, Y+8	; 0x08
    3006:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9a 87       	std	Y+10, r25	; 0x0a
    3010:	89 87       	std	Y+9, r24	; 0x09
    3012:	89 85       	ldd	r24, Y+9	; 0x09
    3014:	9a 85       	ldd	r25, Y+10	; 0x0a
    3016:	9e 87       	std	Y+14, r25	; 0x0e
    3018:	8d 87       	std	Y+13, r24	; 0x0d
    301a:	8d 85       	ldd	r24, Y+13	; 0x0d
    301c:	9e 85       	ldd	r25, Y+14	; 0x0e
    301e:	8c 01       	movw	r16, r24
    3020:	c8 01       	movw	r24, r16
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <correct_left2+0x112>
    3026:	8c 01       	movw	r16, r24
    3028:	1e 87       	std	Y+14, r17	; 0x0e
    302a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	left_degrees(35);
    302c:	83 e2       	ldi	r24, 0x23	; 35
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    3034:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    3038:	01 c0       	rjmp	.+2      	; 0x303c <correct_left2+0x12c>

			break;

		}

	}
    303a:	00 00       	nop
	left_degrees(35);
	left();
	while(1)

	{   
		read_line();
    303c:	89 e7       	ldi	r24, 0x79	; 121
    303e:	92 e3       	ldi	r25, 0x32	; 50
    3040:	fc 01       	movw	r30, r24
    3042:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 70))
    3044:	80 91 49 03 	lds	r24, 0x0349
    3048:	8f 30       	cpi	r24, 0x0F	; 15
    304a:	20 f0       	brcs	.+8      	; 0x3054 <correct_left2+0x144>
    304c:	80 91 4a 03 	lds	r24, 0x034A
    3050:	8f 30       	cpi	r24, 0x0F	; 15
    3052:	20 f4       	brcc	.+8      	; 0x305c <correct_left2+0x14c>
    3054:	80 91 49 03 	lds	r24, 0x0349
    3058:	87 34       	cpi	r24, 0x47	; 71
    305a:	78 f3       	brcs	.-34     	; 0x303a <correct_left2+0x12a>

		{

			stop();
    305c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	a8 e4       	ldi	r26, 0x48	; 72
    3066:	b2 e4       	ldi	r27, 0x42	; 66
    3068:	8f 87       	std	Y+15, r24	; 0x0f
    306a:	98 8b       	std	Y+16, r25	; 0x10
    306c:	a9 8b       	std	Y+17, r26	; 0x11
    306e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3070:	6f 85       	ldd	r22, Y+15	; 0x0f
    3072:	78 89       	ldd	r23, Y+16	; 0x10
    3074:	89 89       	ldd	r24, Y+17	; 0x11
    3076:	9a 89       	ldd	r25, Y+18	; 0x12
    3078:	26 e6       	ldi	r18, 0x66	; 102
    307a:	36 e6       	ldi	r19, 0x66	; 102
    307c:	46 e6       	ldi	r20, 0x66	; 102
    307e:	55 e4       	ldi	r21, 0x45	; 69
    3080:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8b 8b       	std	Y+19, r24	; 0x13
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	ad 8b       	std	Y+21, r26	; 0x15
    308e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3090:	11 e0       	ldi	r17, 0x01	; 1
    3092:	6b 89       	ldd	r22, Y+19	; 0x13
    3094:	7c 89       	ldd	r23, Y+20	; 0x14
    3096:	8d 89       	ldd	r24, Y+21	; 0x15
    3098:	9e 89       	ldd	r25, Y+22	; 0x16
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	0c f0       	brlt	.+2      	; 0x30ac <correct_left2+0x19c>
    30aa:	10 e0       	ldi	r17, 0x00	; 0
    30ac:	11 23       	and	r17, r17
    30ae:	29 f0       	breq	.+10     	; 0x30ba <correct_left2+0x1aa>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	98 8f       	std	Y+24, r25	; 0x18
    30b6:	8f 8b       	std	Y+23, r24	; 0x17
    30b8:	46 c0       	rjmp	.+140    	; 0x3146 <correct_left2+0x236>
	else if (__tmp > 65535)
    30ba:	11 e0       	ldi	r17, 0x01	; 1
    30bc:	6b 89       	ldd	r22, Y+19	; 0x13
    30be:	7c 89       	ldd	r23, Y+20	; 0x14
    30c0:	8d 89       	ldd	r24, Y+21	; 0x15
    30c2:	9e 89       	ldd	r25, Y+22	; 0x16
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	57 e4       	ldi	r21, 0x47	; 71
    30cc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	0c f0       	brlt	.+2      	; 0x30d6 <correct_left2+0x1c6>
    30d4:	10 e0       	ldi	r17, 0x00	; 0
    30d6:	11 23       	and	r17, r17
    30d8:	61 f1       	breq	.+88     	; 0x3132 <correct_left2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30da:	6f 85       	ldd	r22, Y+15	; 0x0f
    30dc:	78 89       	ldd	r23, Y+16	; 0x10
    30de:	89 89       	ldd	r24, Y+17	; 0x11
    30e0:	9a 89       	ldd	r25, Y+18	; 0x12
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e2       	ldi	r20, 0x20	; 32
    30e8:	51 e4       	ldi	r21, 0x41	; 65
    30ea:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	bc 01       	movw	r22, r24
    30f4:	cd 01       	movw	r24, r26
    30f6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	98 8f       	std	Y+24, r25	; 0x18
    3100:	8f 8b       	std	Y+23, r24	; 0x17
    3102:	12 c0       	rjmp	.+36     	; 0x3128 <correct_left2+0x218>
    3104:	80 e7       	ldi	r24, 0x70	; 112
    3106:	91 e0       	ldi	r25, 0x01	; 1
    3108:	9a 8f       	std	Y+26, r25	; 0x1a
    310a:	89 8f       	std	Y+25, r24	; 0x19
    310c:	89 8d       	ldd	r24, Y+25	; 0x19
    310e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3110:	8c 01       	movw	r16, r24
    3112:	c8 01       	movw	r24, r16
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <correct_left2+0x204>
    3118:	8c 01       	movw	r16, r24
    311a:	1a 8f       	std	Y+26, r17	; 0x1a
    311c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	8f 89       	ldd	r24, Y+23	; 0x17
    3120:	98 8d       	ldd	r25, Y+24	; 0x18
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	98 8f       	std	Y+24, r25	; 0x18
    3126:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	98 8d       	ldd	r25, Y+24	; 0x18
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	51 f7       	brne	.-44     	; 0x3104 <correct_left2+0x1f4>
    3130:	18 c0       	rjmp	.+48     	; 0x3162 <correct_left2+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3132:	6b 89       	ldd	r22, Y+19	; 0x13
    3134:	7c 89       	ldd	r23, Y+20	; 0x14
    3136:	8d 89       	ldd	r24, Y+21	; 0x15
    3138:	9e 89       	ldd	r25, Y+22	; 0x16
    313a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	98 8f       	std	Y+24, r25	; 0x18
    3144:	8f 8b       	std	Y+23, r24	; 0x17
    3146:	8f 89       	ldd	r24, Y+23	; 0x17
    3148:	98 8d       	ldd	r25, Y+24	; 0x18
    314a:	9c 8f       	std	Y+28, r25	; 0x1c
    314c:	8b 8f       	std	Y+27, r24	; 0x1b
    314e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3152:	8c 01       	movw	r16, r24
    3154:	c8 01       	movw	r24, r16
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <correct_left2+0x246>
    315a:	8c 01       	movw	r16, r24
    315c:	1c 8f       	std	Y+28, r17	; 0x1c
    315e:	0b 8f       	std	Y+27, r16	; 0x1b

			_delay_ms(50);

			break;
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <correct_left2+0x254>
    3162:	00 00       	nop
		}

	}


}
    3164:	6c 96       	adiw	r28, 0x1c	; 28
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <correct_right3>:

void correct_right3()

{   stop();
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	6c 97       	sbiw	r28, 0x1c	; 28
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a0 ea       	ldi	r26, 0xA0	; 160
    319c:	b1 e4       	ldi	r27, 0x41	; 65
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	ab 83       	std	Y+3, r26	; 0x03
    31a4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    31a6:	69 81       	ldd	r22, Y+1	; 0x01
    31a8:	7a 81       	ldd	r23, Y+2	; 0x02
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	26 e6       	ldi	r18, 0x66	; 102
    31b0:	36 e6       	ldi	r19, 0x66	; 102
    31b2:	46 e6       	ldi	r20, 0x66	; 102
    31b4:	55 e4       	ldi	r21, 0x45	; 69
    31b6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	8d 83       	std	Y+5, r24	; 0x05
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	af 83       	std	Y+7, r26	; 0x07
    31c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    31c6:	11 e0       	ldi	r17, 0x01	; 1
    31c8:	6d 81       	ldd	r22, Y+5	; 0x05
    31ca:	7e 81       	ldd	r23, Y+6	; 0x06
    31cc:	8f 81       	ldd	r24, Y+7	; 0x07
    31ce:	98 85       	ldd	r25, Y+8	; 0x08
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    31dc:	88 23       	and	r24, r24
    31de:	0c f0       	brlt	.+2      	; 0x31e2 <correct_right3+0x68>
    31e0:	10 e0       	ldi	r17, 0x00	; 0
    31e2:	11 23       	and	r17, r17
    31e4:	29 f0       	breq	.+10     	; 0x31f0 <correct_right3+0x76>
		__ticks = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9a 87       	std	Y+10, r25	; 0x0a
    31ec:	89 87       	std	Y+9, r24	; 0x09
    31ee:	46 c0       	rjmp	.+140    	; 0x327c <correct_right3+0x102>
	else if (__tmp > 65535)
    31f0:	11 e0       	ldi	r17, 0x01	; 1
    31f2:	6d 81       	ldd	r22, Y+5	; 0x05
    31f4:	7e 81       	ldd	r23, Y+6	; 0x06
    31f6:	8f 81       	ldd	r24, Y+7	; 0x07
    31f8:	98 85       	ldd	r25, Y+8	; 0x08
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	3f ef       	ldi	r19, 0xFF	; 255
    31fe:	4f e7       	ldi	r20, 0x7F	; 127
    3200:	57 e4       	ldi	r21, 0x47	; 71
    3202:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    3206:	18 16       	cp	r1, r24
    3208:	0c f0       	brlt	.+2      	; 0x320c <correct_right3+0x92>
    320a:	10 e0       	ldi	r17, 0x00	; 0
    320c:	11 23       	and	r17, r17
    320e:	61 f1       	breq	.+88     	; 0x3268 <correct_right3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	69 81       	ldd	r22, Y+1	; 0x01
    3212:	7a 81       	ldd	r23, Y+2	; 0x02
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	9c 81       	ldd	r25, Y+4	; 0x04
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9a 87       	std	Y+10, r25	; 0x0a
    3236:	89 87       	std	Y+9, r24	; 0x09
    3238:	12 c0       	rjmp	.+36     	; 0x325e <correct_right3+0xe4>
    323a:	80 e7       	ldi	r24, 0x70	; 112
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	9c 87       	std	Y+12, r25	; 0x0c
    3240:	8b 87       	std	Y+11, r24	; 0x0b
    3242:	8b 85       	ldd	r24, Y+11	; 0x0b
    3244:	9c 85       	ldd	r25, Y+12	; 0x0c
    3246:	8c 01       	movw	r16, r24
    3248:	c8 01       	movw	r24, r16
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <correct_right3+0xd0>
    324e:	8c 01       	movw	r16, r24
    3250:	1c 87       	std	Y+12, r17	; 0x0c
    3252:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3254:	89 85       	ldd	r24, Y+9	; 0x09
    3256:	9a 85       	ldd	r25, Y+10	; 0x0a
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	9a 87       	std	Y+10, r25	; 0x0a
    325c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	51 f7       	brne	.-44     	; 0x323a <correct_right3+0xc0>
    3266:	17 c0       	rjmp	.+46     	; 0x3296 <correct_right3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3268:	6d 81       	ldd	r22, Y+5	; 0x05
    326a:	7e 81       	ldd	r23, Y+6	; 0x06
    326c:	8f 81       	ldd	r24, Y+7	; 0x07
    326e:	98 85       	ldd	r25, Y+8	; 0x08
    3270:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	9a 87       	std	Y+10, r25	; 0x0a
    327a:	89 87       	std	Y+9, r24	; 0x09
    327c:	89 85       	ldd	r24, Y+9	; 0x09
    327e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3280:	9e 87       	std	Y+14, r25	; 0x0e
    3282:	8d 87       	std	Y+13, r24	; 0x0d
    3284:	8d 85       	ldd	r24, Y+13	; 0x0d
    3286:	9e 85       	ldd	r25, Y+14	; 0x0e
    3288:	8c 01       	movw	r16, r24
    328a:	c8 01       	movw	r24, r16
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <correct_right3+0x112>
    3290:	8c 01       	movw	r16, r24
    3292:	1e 87       	std	Y+14, r17	; 0x0e
    3294:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	right_degrees(160);
    3296:	80 ea       	ldi	r24, 0xA0	; 160
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    329e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    32a2:	01 c0       	rjmp	.+2      	; 0x32a6 <correct_right3+0x12c>
	while(1){
		read_line();
		if(Center_white_line>25){
			stop();
		break;}
	}
    32a4:	00 00       	nop
{   stop();
	_delay_ms(20);
	right_degrees(160);
	right();
	while(1){
		read_line();
    32a6:	89 e7       	ldi	r24, 0x79	; 121
    32a8:	92 e3       	ldi	r25, 0x32	; 50
    32aa:	fc 01       	movw	r30, r24
    32ac:	19 95       	eicall
		if(Center_white_line>25){
    32ae:	80 91 49 03 	lds	r24, 0x0349
    32b2:	8a 31       	cpi	r24, 0x1A	; 26
    32b4:	b8 f3       	brcs	.-18     	; 0x32a4 <correct_right3+0x12a>
			stop();
    32b6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		break;}
    32ba:	00 00       	nop
	}
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 e2       	ldi	r26, 0x20	; 32
    32c2:	b2 e4       	ldi	r27, 0x42	; 66
    32c4:	8f 87       	std	Y+15, r24	; 0x0f
    32c6:	98 8b       	std	Y+16, r25	; 0x10
    32c8:	a9 8b       	std	Y+17, r26	; 0x11
    32ca:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    32ce:	78 89       	ldd	r23, Y+16	; 0x10
    32d0:	89 89       	ldd	r24, Y+17	; 0x11
    32d2:	9a 89       	ldd	r25, Y+18	; 0x12
    32d4:	26 e6       	ldi	r18, 0x66	; 102
    32d6:	36 e6       	ldi	r19, 0x66	; 102
    32d8:	46 e6       	ldi	r20, 0x66	; 102
    32da:	55 e4       	ldi	r21, 0x45	; 69
    32dc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	8b 8b       	std	Y+19, r24	; 0x13
    32e6:	9c 8b       	std	Y+20, r25	; 0x14
    32e8:	ad 8b       	std	Y+21, r26	; 0x15
    32ea:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    32ec:	11 e0       	ldi	r17, 0x01	; 1
    32ee:	6b 89       	ldd	r22, Y+19	; 0x13
    32f0:	7c 89       	ldd	r23, Y+20	; 0x14
    32f2:	8d 89       	ldd	r24, Y+21	; 0x15
    32f4:	9e 89       	ldd	r25, Y+22	; 0x16
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    3302:	88 23       	and	r24, r24
    3304:	0c f0       	brlt	.+2      	; 0x3308 <correct_right3+0x18e>
    3306:	10 e0       	ldi	r17, 0x00	; 0
    3308:	11 23       	and	r17, r17
    330a:	29 f0       	breq	.+10     	; 0x3316 <correct_right3+0x19c>
		__ticks = 1;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	98 8f       	std	Y+24, r25	; 0x18
    3312:	8f 8b       	std	Y+23, r24	; 0x17
    3314:	46 c0       	rjmp	.+140    	; 0x33a2 <correct_right3+0x228>
	else if (__tmp > 65535)
    3316:	11 e0       	ldi	r17, 0x01	; 1
    3318:	6b 89       	ldd	r22, Y+19	; 0x13
    331a:	7c 89       	ldd	r23, Y+20	; 0x14
    331c:	8d 89       	ldd	r24, Y+21	; 0x15
    331e:	9e 89       	ldd	r25, Y+22	; 0x16
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	3f ef       	ldi	r19, 0xFF	; 255
    3324:	4f e7       	ldi	r20, 0x7F	; 127
    3326:	57 e4       	ldi	r21, 0x47	; 71
    3328:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    332c:	18 16       	cp	r1, r24
    332e:	0c f0       	brlt	.+2      	; 0x3332 <correct_right3+0x1b8>
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	11 23       	and	r17, r17
    3334:	61 f1       	breq	.+88     	; 0x338e <correct_right3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3336:	6f 85       	ldd	r22, Y+15	; 0x0f
    3338:	78 89       	ldd	r23, Y+16	; 0x10
    333a:	89 89       	ldd	r24, Y+17	; 0x11
    333c:	9a 89       	ldd	r25, Y+18	; 0x12
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e2       	ldi	r20, 0x20	; 32
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	98 8f       	std	Y+24, r25	; 0x18
    335c:	8f 8b       	std	Y+23, r24	; 0x17
    335e:	12 c0       	rjmp	.+36     	; 0x3384 <correct_right3+0x20a>
    3360:	80 e7       	ldi	r24, 0x70	; 112
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	9a 8f       	std	Y+26, r25	; 0x1a
    3366:	89 8f       	std	Y+25, r24	; 0x19
    3368:	89 8d       	ldd	r24, Y+25	; 0x19
    336a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    336c:	8c 01       	movw	r16, r24
    336e:	c8 01       	movw	r24, r16
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <correct_right3+0x1f6>
    3374:	8c 01       	movw	r16, r24
    3376:	1a 8f       	std	Y+26, r17	; 0x1a
    3378:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8f 89       	ldd	r24, Y+23	; 0x17
    337c:	98 8d       	ldd	r25, Y+24	; 0x18
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	98 8f       	std	Y+24, r25	; 0x18
    3382:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8f 89       	ldd	r24, Y+23	; 0x17
    3386:	98 8d       	ldd	r25, Y+24	; 0x18
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	51 f7       	brne	.-44     	; 0x3360 <correct_right3+0x1e6>
    338c:	17 c0       	rjmp	.+46     	; 0x33bc <correct_right3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6b 89       	ldd	r22, Y+19	; 0x13
    3390:	7c 89       	ldd	r23, Y+20	; 0x14
    3392:	8d 89       	ldd	r24, Y+21	; 0x15
    3394:	9e 89       	ldd	r25, Y+22	; 0x16
    3396:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	98 8f       	std	Y+24, r25	; 0x18
    33a0:	8f 8b       	std	Y+23, r24	; 0x17
    33a2:	8f 89       	ldd	r24, Y+23	; 0x17
    33a4:	98 8d       	ldd	r25, Y+24	; 0x18
    33a6:	9c 8f       	std	Y+28, r25	; 0x1c
    33a8:	8b 8f       	std	Y+27, r24	; 0x1b
    33aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ae:	8c 01       	movw	r16, r24
    33b0:	c8 01       	movw	r24, r16
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <correct_right3+0x238>
    33b6:	8c 01       	movw	r16, r24
    33b8:	1c 8f       	std	Y+28, r17	; 0x1c
    33ba:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    33bc:	88 e2       	ldi	r24, 0x28	; 40
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    33c4:	6c 96       	adiw	r28, 0x1c	; 28
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	08 95       	ret

000033da <adc_pin_config>:

*/

void adc_pin_config(void)

{
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62

    DDRF = 0x00;
    33e2:	80 e3       	ldi	r24, 0x30	; 48
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	fc 01       	movw	r30, r24
    33e8:	10 82       	st	Z, r1

    PORTF = 0x00;
    33ea:	81 e3       	ldi	r24, 0x31	; 49
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	fc 01       	movw	r30, r24
    33f0:	10 82       	st	Z, r1

    DDRK = 0x00;
    33f2:	87 e0       	ldi	r24, 0x07	; 7
    33f4:	91 e0       	ldi	r25, 0x01	; 1
    33f6:	fc 01       	movw	r30, r24
    33f8:	10 82       	st	Z, r1

    PORTK = 0x00;
    33fa:	88 e0       	ldi	r24, 0x08	; 8
    33fc:	91 e0       	ldi	r25, 0x01	; 1
    33fe:	fc 01       	movw	r30, r24
    3400:	10 82       	st	Z, r1

}
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	08 95       	ret

00003408 <adc_init>:

*/

void adc_init() 

{
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0x00;
    3410:	8a e7       	ldi	r24, 0x7A	; 122
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	fc 01       	movw	r30, r24
    3416:	10 82       	st	Z, r1

	ADCSRB = 0x00; //MUX5 = 0
    3418:	8b e7       	ldi	r24, 0x7B	; 123
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	fc 01       	movw	r30, r24
    341e:	10 82       	st	Z, r1

	ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    3420:	8c e7       	ldi	r24, 0x7C	; 124
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	20 e2       	ldi	r18, 0x20	; 32
    3426:	fc 01       	movw	r30, r24
    3428:	20 83       	st	Z, r18

	ACSR = 0x80;
    342a:	80 e5       	ldi	r24, 0x50	; 80
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	20 e8       	ldi	r18, 0x80	; 128
    3430:	fc 01       	movw	r30, r24
    3432:	20 83       	st	Z, r18

	ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    3434:	8a e7       	ldi	r24, 0x7A	; 122
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	26 e8       	ldi	r18, 0x86	; 134
    343a:	fc 01       	movw	r30, r24
    343c:	20 83       	st	Z, r18

}
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	08 95       	ret

00003444 <ADC_Conversion>:

*/

unsigned char ADC_Conversion(unsigned char Ch) 

{
    3444:	cf 93       	push	r28
    3446:	df 93       	push	r29
    3448:	0f 92       	push	r0
    344a:	0f 92       	push	r0
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	8a 83       	std	Y+2, r24	; 0x02

	unsigned char a;

	if (Ch > 7)
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	88 30       	cpi	r24, 0x08	; 8
    3456:	28 f0       	brcs	.+10     	; 0x3462 <ADC_Conversion+0x1e>

	{

		ADCSRB = 0x08;
    3458:	8b e7       	ldi	r24, 0x7B	; 123
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	28 e0       	ldi	r18, 0x08	; 8
    345e:	fc 01       	movw	r30, r24
    3460:	20 83       	st	Z, r18

	}

	Ch = Ch & 0x07;
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	87 70       	andi	r24, 0x07	; 7
    3466:	8a 83       	std	Y+2, r24	; 0x02

	ADMUX = 0x20 | Ch;
    3468:	8c e7       	ldi	r24, 0x7C	; 124
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	2a 81       	ldd	r18, Y+2	; 0x02
    346e:	20 62       	ori	r18, 0x20	; 32
    3470:	fc 01       	movw	r30, r24
    3472:	20 83       	st	Z, r18

	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
    3474:	8a e7       	ldi	r24, 0x7A	; 122
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	2a e7       	ldi	r18, 0x7A	; 122
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	f9 01       	movw	r30, r18
    347e:	20 81       	ld	r18, Z
    3480:	20 64       	ori	r18, 0x40	; 64
    3482:	fc 01       	movw	r30, r24
    3484:	20 83       	st	Z, r18

	while ((ADCSRA & 0x10) == 0); //Wait for conversion to complete
    3486:	00 00       	nop
    3488:	8a e7       	ldi	r24, 0x7A	; 122
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	fc 01       	movw	r30, r24
    348e:	80 81       	ld	r24, Z
    3490:	88 2f       	mov	r24, r24
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	80 71       	andi	r24, 0x10	; 16
    3496:	90 70       	andi	r25, 0x00	; 0
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	b1 f3       	breq	.-20     	; 0x3488 <ADC_Conversion+0x44>

	a = ADCH;
    349c:	89 e7       	ldi	r24, 0x79	; 121
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	fc 01       	movw	r30, r24
    34a2:	80 81       	ld	r24, Z
    34a4:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA = ADCSRA | 0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    34a6:	8a e7       	ldi	r24, 0x7A	; 122
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	2a e7       	ldi	r18, 0x7A	; 122
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	f9 01       	movw	r30, r18
    34b0:	20 81       	ld	r18, Z
    34b2:	20 61       	ori	r18, 0x10	; 16
    34b4:	fc 01       	movw	r30, r24
    34b6:	20 83       	st	Z, r18

	ADCSRB = 0x00;
    34b8:	8b e7       	ldi	r24, 0x7B	; 123
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	fc 01       	movw	r30, r24
    34be:	10 82       	st	Z, r1

	return a;
    34c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <print_sensor>:

*/

void print_sensor(char row, char coloumn, unsigned char channel)

 {
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	00 d0       	rcall	.+0      	; 0x34d2 <print_sensor+0x6>
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	6a 83       	std	Y+2, r22	; 0x02
    34da:	4b 83       	std	Y+3, r20	; 0x03



	ADC_Value = ADC_Conversion(channel);
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	0e 94 22 1a 	call	0x3444	; 0x3444 <ADC_Conversion>
    34e2:	80 93 bb 04 	sts	0x04BB, r24

	lcd_print(row, coloumn, ADC_Value, 3);
    34e6:	80 91 bb 04 	lds	r24, 0x04BB
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	6a 81       	ldd	r22, Y+2	; 0x02
    34f2:	a9 01       	movw	r20, r18
    34f4:	23 e0       	ldi	r18, 0x03	; 3
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	08 95       	ret

00003508 <__vector_35>:

*/

ISR(TIMER3_OVF_vect)

{
    3508:	1f 92       	push	r1
    350a:	0f 92       	push	r0
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	0f 92       	push	r0
    3510:	00 90 5b 00 	lds	r0, 0x005B
    3514:	0f 92       	push	r0
    3516:	11 24       	eor	r1, r1
    3518:	2f 93       	push	r18
    351a:	3f 93       	push	r19
    351c:	4f 93       	push	r20
    351e:	5f 93       	push	r21
    3520:	6f 93       	push	r22
    3522:	7f 93       	push	r23
    3524:	8f 93       	push	r24
    3526:	9f 93       	push	r25
    3528:	af 93       	push	r26
    352a:	bf 93       	push	r27
    352c:	ef 93       	push	r30
    352e:	ff 93       	push	r31
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62

    read_line();
    3538:	89 e7       	ldi	r24, 0x79	; 121
    353a:	92 e3       	ldi	r25, 0x32	; 50
    353c:	fc 01       	movw	r30, r24
    353e:	19 95       	eicall

    line_conditions();
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	93 e3       	ldi	r25, 0x33	; 51
    3544:	fc 01       	movw	r30, r24
    3546:	19 95       	eicall

    TCNT3 = 0xFDC0;
    3548:	84 e9       	ldi	r24, 0x94	; 148
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	20 ec       	ldi	r18, 0xC0	; 192
    354e:	3d ef       	ldi	r19, 0xFD	; 253
    3550:	fc 01       	movw	r30, r24
    3552:	31 83       	std	Z+1, r19	; 0x01
    3554:	20 83       	st	Z, r18

}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	ff 91       	pop	r31
    355c:	ef 91       	pop	r30
    355e:	bf 91       	pop	r27
    3560:	af 91       	pop	r26
    3562:	9f 91       	pop	r25
    3564:	8f 91       	pop	r24
    3566:	7f 91       	pop	r23
    3568:	6f 91       	pop	r22
    356a:	5f 91       	pop	r21
    356c:	4f 91       	pop	r20
    356e:	3f 91       	pop	r19
    3570:	2f 91       	pop	r18
    3572:	0f 90       	pop	r0
    3574:	00 92 5b 00 	sts	0x005B, r0
    3578:	0f 90       	pop	r0
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	0f 90       	pop	r0
    357e:	1f 90       	pop	r1
    3580:	18 95       	reti

00003582 <__vector_45>:

*/

ISR(TIMER4_OVF_vect)

{
    3582:	1f 92       	push	r1
    3584:	0f 92       	push	r0
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	0f 92       	push	r0
    358a:	00 90 5b 00 	lds	r0, 0x005B
    358e:	0f 92       	push	r0
    3590:	11 24       	eor	r1, r1
    3592:	2f 93       	push	r18
    3594:	3f 93       	push	r19
    3596:	4f 93       	push	r20
    3598:	5f 93       	push	r21
    359a:	6f 93       	push	r22
    359c:	7f 93       	push	r23
    359e:	8f 93       	push	r24
    35a0:	9f 93       	push	r25
    35a2:	af 93       	push	r26
    35a4:	bf 93       	push	r27
    35a6:	ef 93       	push	r30
    35a8:	ff 93       	push	r31
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62

    TCNT4 = 0xE980;
    35b2:	84 ea       	ldi	r24, 0xA4	; 164
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	20 e8       	ldi	r18, 0x80	; 128
    35b8:	39 ee       	ldi	r19, 0xE9	; 233
    35ba:	fc 01       	movw	r30, r24
    35bc:	31 83       	std	Z+1, r19	; 0x01
    35be:	20 83       	st	Z, r18

    t4_sec++; //Increment every 0.1 sec
    35c0:	80 91 4b 03 	lds	r24, 0x034B
    35c4:	90 91 4c 03 	lds	r25, 0x034C
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	90 93 4c 03 	sts	0x034C, r25
    35ce:	80 93 4b 03 	sts	0x034B, r24



    if (t4_sec == t4_count && t4_flag == 1)
    35d2:	20 91 4b 03 	lds	r18, 0x034B
    35d6:	30 91 4c 03 	lds	r19, 0x034C
    35da:	80 91 c0 04 	lds	r24, 0x04C0
    35de:	90 91 c1 04 	lds	r25, 0x04C1
    35e2:	28 17       	cp	r18, r24
    35e4:	39 07       	cpc	r19, r25
    35e6:	59 f4       	brne	.+22     	; 0x35fe <__vector_45+0x7c>
    35e8:	80 91 4d 03 	lds	r24, 0x034D
    35ec:	90 91 4e 03 	lds	r25, 0x034E
    35f0:	81 30       	cpi	r24, 0x01	; 1
    35f2:	91 05       	cpc	r25, r1
    35f4:	21 f4       	brne	.+8      	; 0x35fe <__vector_45+0x7c>

        stop_timer4();
    35f6:	88 e3       	ldi	r24, 0x38	; 56
    35f8:	9b e1       	ldi	r25, 0x1B	; 27
    35fa:	fc 01       	movw	r30, r24
    35fc:	19 95       	eicall

}
    35fe:	df 91       	pop	r29
    3600:	cf 91       	pop	r28
    3602:	ff 91       	pop	r31
    3604:	ef 91       	pop	r30
    3606:	bf 91       	pop	r27
    3608:	af 91       	pop	r26
    360a:	9f 91       	pop	r25
    360c:	8f 91       	pop	r24
    360e:	7f 91       	pop	r23
    3610:	6f 91       	pop	r22
    3612:	5f 91       	pop	r21
    3614:	4f 91       	pop	r20
    3616:	3f 91       	pop	r19
    3618:	2f 91       	pop	r18
    361a:	0f 90       	pop	r0
    361c:	00 92 5b 00 	sts	0x005B, r0
    3620:	0f 90       	pop	r0
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	0f 90       	pop	r0
    3626:	1f 90       	pop	r1
    3628:	18 95       	reti

0000362a <start_timer4>:

*/

void start_timer4(int count)

{
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	0f 92       	push	r0
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01

    t4_flag = 1; //Indicate timer 4 is enabled
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	90 93 4e 03 	sts	0x034E, r25
    3642:	80 93 4d 03 	sts	0x034D, r24

    t4_sec = 0;
    3646:	10 92 4c 03 	sts	0x034C, r1
    364a:	10 92 4b 03 	sts	0x034B, r1

    t4_count = count + 1;
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	01 96       	adiw	r24, 0x01	; 1
    3654:	90 93 c1 04 	sts	0x04C1, r25
    3658:	80 93 c0 04 	sts	0x04C0, r24

    TIMSK4 = 0x01; //Timer 4 overflow interrupt enable
    365c:	82 e7       	ldi	r24, 0x72	; 114
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	21 e0       	ldi	r18, 0x01	; 1
    3662:	fc 01       	movw	r30, r24
    3664:	20 83       	st	Z, r18

}
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	08 95       	ret

00003670 <stop_timer4>:

*/

void stop_timer4()

{
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62

	t4_flag = 0;
    3678:	10 92 4e 03 	sts	0x034E, r1
    367c:	10 92 4d 03 	sts	0x034D, r1

	t4_sec = 0;
    3680:	10 92 4c 03 	sts	0x034C, r1
    3684:	10 92 4b 03 	sts	0x034B, r1

	TIMSK4 = 0x00; //Timer4 overflow interrupt disable
    3688:	82 e7       	ldi	r24, 0x72	; 114
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	fc 01       	movw	r30, r24
    368e:	10 82       	st	Z, r1

}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	08 95       	ret

00003696 <servo1_pin_config>:
unsigned char ii = 0;
signed char jj = 0;

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    369e:	84 e2       	ldi	r24, 0x24	; 36
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	24 e2       	ldi	r18, 0x24	; 36
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	f9 01       	movw	r30, r18
    36a8:	20 81       	ld	r18, Z
    36aa:	20 62       	ori	r18, 0x20	; 32
    36ac:	fc 01       	movw	r30, r24
    36ae:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    36b0:	85 e2       	ldi	r24, 0x25	; 37
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	25 e2       	ldi	r18, 0x25	; 37
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	f9 01       	movw	r30, r18
    36ba:	20 81       	ld	r18, Z
    36bc:	20 62       	ori	r18, 0x20	; 32
    36be:	fc 01       	movw	r30, r24
    36c0:	20 83       	st	Z, r18
}
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	08 95       	ret

000036c8 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    36d0:	84 e2       	ldi	r24, 0x24	; 36
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	24 e2       	ldi	r18, 0x24	; 36
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	f9 01       	movw	r30, r18
    36da:	20 81       	ld	r18, Z
    36dc:	20 64       	ori	r18, 0x40	; 64
    36de:	fc 01       	movw	r30, r24
    36e0:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    36e2:	85 e2       	ldi	r24, 0x25	; 37
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	25 e2       	ldi	r18, 0x25	; 37
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	f9 01       	movw	r30, r18
    36ec:	20 81       	ld	r18, Z
    36ee:	20 64       	ori	r18, 0x40	; 64
    36f0:	fc 01       	movw	r30, r24
    36f2:	20 83       	st	Z, r18
}
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    36f8:	08 95       	ret

000036fa <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    3702:	84 e2       	ldi	r24, 0x24	; 36
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	24 e2       	ldi	r18, 0x24	; 36
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	f9 01       	movw	r30, r18
    370c:	20 81       	ld	r18, Z
    370e:	20 68       	ori	r18, 0x80	; 128
    3710:	fc 01       	movw	r30, r24
    3712:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    3714:	85 e2       	ldi	r24, 0x25	; 37
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	25 e2       	ldi	r18, 0x25	; 37
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	f9 01       	movw	r30, r18
    371e:	20 81       	ld	r18, Z
    3720:	20 68       	ori	r18, 0x80	; 128
    3722:	fc 01       	movw	r30, r24
    3724:	20 83       	st	Z, r18
}
    3726:	df 91       	pop	r29
    3728:	cf 91       	pop	r28
    372a:	08 95       	ret

0000372c <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	00 d0       	rcall	.+0      	; 0x3736 <servo_1+0xa>
    3736:	0f 92       	push	r0
    3738:	0f 92       	push	r0
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	dc 01       	movw	r26, r24
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	ab 83       	std	Y+3, r26	; 0x03
    374c:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees * 0.512) + 34.56;
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	88 2f       	mov	r24, r24
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	a0 e0       	ldi	r26, 0x00	; 0
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	bc 01       	movw	r22, r24
    375a:	cd 01       	movw	r24, r26
    375c:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <__floatunsisf>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	bc 01       	movw	r22, r24
    3766:	cd 01       	movw	r24, r26
    3768:	2f e6       	ldi	r18, 0x6F	; 111
    376a:	32 e1       	ldi	r19, 0x12	; 18
    376c:	43 e0       	ldi	r20, 0x03	; 3
    376e:	5f e3       	ldi	r21, 0x3F	; 63
    3770:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	21 e7       	ldi	r18, 0x71	; 113
    377e:	3d e3       	ldi	r19, 0x3D	; 61
    3780:	4a e0       	ldi	r20, 0x0A	; 10
    3782:	52 e4       	ldi	r21, 0x42	; 66
    3784:	0e 94 14 6d 	call	0xda28	; 0xda28 <__addsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	89 83       	std	Y+1, r24	; 0x01
    378e:	9a 83       	std	Y+2, r25	; 0x02
    3790:	ab 83       	std	Y+3, r26	; 0x03
    3792:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    3794:	89 e8       	ldi	r24, 0x89	; 137
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	fc 01       	movw	r30, r24
    379a:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    379c:	08 e8       	ldi	r16, 0x88	; 136
    379e:	10 e0       	ldi	r17, 0x00	; 0
    37a0:	69 81       	ldd	r22, Y+1	; 0x01
    37a2:	7a 81       	ldd	r23, Y+2	; 0x02
    37a4:	8b 81       	ldd	r24, Y+3	; 0x03
    37a6:	9c 81       	ldd	r25, Y+4	; 0x04
    37a8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 83       	st	Z, r24
}
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	08 95       	ret

000037c8 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
    37cc:	cf 93       	push	r28
    37ce:	df 93       	push	r29
    37d0:	00 d0       	rcall	.+0      	; 0x37d2 <servo_2+0xa>
    37d2:	0f 92       	push	r0
    37d4:	0f 92       	push	r0
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	dc 01       	movw	r26, r24
    37e2:	89 83       	std	Y+1, r24	; 0x01
    37e4:	9a 83       	std	Y+2, r25	; 0x02
    37e6:	ab 83       	std	Y+3, r26	; 0x03
    37e8:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees * 0.512) + 34.56;
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	88 2f       	mov	r24, r24
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	a0 e0       	ldi	r26, 0x00	; 0
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <__floatunsisf>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	2f e6       	ldi	r18, 0x6F	; 111
    3806:	32 e1       	ldi	r19, 0x12	; 18
    3808:	43 e0       	ldi	r20, 0x03	; 3
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	21 e7       	ldi	r18, 0x71	; 113
    381a:	3d e3       	ldi	r19, 0x3D	; 61
    381c:	4a e0       	ldi	r20, 0x0A	; 10
    381e:	52 e4       	ldi	r21, 0x42	; 66
    3820:	0e 94 14 6d 	call	0xda28	; 0xda28 <__addsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	9a 83       	std	Y+2, r25	; 0x02
    382c:	ab 83       	std	Y+3, r26	; 0x03
    382e:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    3830:	8b e8       	ldi	r24, 0x8B	; 139
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	fc 01       	movw	r30, r24
    3836:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    3838:	0a e8       	ldi	r16, 0x8A	; 138
    383a:	10 e0       	ldi	r17, 0x00	; 0
    383c:	69 81       	ldd	r22, Y+1	; 0x01
    383e:	7a 81       	ldd	r23, Y+2	; 0x02
    3840:	8b 81       	ldd	r24, Y+3	; 0x03
    3842:	9c 81       	ldd	r25, Y+4	; 0x04
    3844:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	f8 01       	movw	r30, r16
    384e:	80 83       	st	Z, r24
}
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	08 95       	ret

00003864 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    3864:	0f 93       	push	r16
    3866:	1f 93       	push	r17
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	00 d0       	rcall	.+0      	; 0x386e <servo_3+0xa>
    386e:	0f 92       	push	r0
    3870:	0f 92       	push	r0
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	dc 01       	movw	r26, r24
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	9a 83       	std	Y+2, r25	; 0x02
    3882:	ab 83       	std	Y+3, r26	; 0x03
    3884:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees * 0.512) + 34.56;
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	88 2f       	mov	r24, r24
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a0 e0       	ldi	r26, 0x00	; 0
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <__floatunsisf>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	bc 01       	movw	r22, r24
    389e:	cd 01       	movw	r24, r26
    38a0:	2f e6       	ldi	r18, 0x6F	; 111
    38a2:	32 e1       	ldi	r19, 0x12	; 18
    38a4:	43 e0       	ldi	r20, 0x03	; 3
    38a6:	5f e3       	ldi	r21, 0x3F	; 63
    38a8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	bc 01       	movw	r22, r24
    38b2:	cd 01       	movw	r24, r26
    38b4:	21 e7       	ldi	r18, 0x71	; 113
    38b6:	3d e3       	ldi	r19, 0x3D	; 61
    38b8:	4a e0       	ldi	r20, 0x0A	; 10
    38ba:	52 e4       	ldi	r21, 0x42	; 66
    38bc:	0e 94 14 6d 	call	0xda28	; 0xda28 <__addsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	ab 83       	std	Y+3, r26	; 0x03
    38ca:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    38cc:	8d e8       	ldi	r24, 0x8D	; 141
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	fc 01       	movw	r30, r24
    38d2:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    38d4:	0c e8       	ldi	r16, 0x8C	; 140
    38d6:	10 e0       	ldi	r17, 0x00	; 0
    38d8:	69 81       	ldd	r22, Y+1	; 0x01
    38da:	7a 81       	ldd	r23, Y+2	; 0x02
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	9c 81       	ldd	r25, Y+4	; 0x04
    38e0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	f8 01       	movw	r30, r16
    38ea:	80 83       	st	Z, r24
}
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	08 95       	ret

00003900 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    3908:	89 e8       	ldi	r24, 0x89	; 137
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	23 e0       	ldi	r18, 0x03	; 3
    390e:	fc 01       	movw	r30, r24
    3910:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    3912:	88 e8       	ldi	r24, 0x88	; 136
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	2f ef       	ldi	r18, 0xFF	; 255
    3918:	fc 01       	movw	r30, r24
    391a:	20 83       	st	Z, r18
}
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	08 95       	ret

00003922 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    392a:	8b e8       	ldi	r24, 0x8B	; 139
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	23 e0       	ldi	r18, 0x03	; 3
    3930:	fc 01       	movw	r30, r24
    3932:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    3934:	8a e8       	ldi	r24, 0x8A	; 138
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	2f ef       	ldi	r18, 0xFF	; 255
    393a:	fc 01       	movw	r30, r24
    393c:	20 83       	st	Z, r18
}
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    394c:	8d e8       	ldi	r24, 0x8D	; 141
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	23 e0       	ldi	r18, 0x03	; 3
    3952:	fc 01       	movw	r30, r24
    3954:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    3956:	8c e8       	ldi	r24, 0x8C	; 140
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	2f ef       	ldi	r18, 0xFF	; 255
    395c:	fc 01       	movw	r30, r24
    395e:	20 83       	st	Z, r18
} 
    3960:	df 91       	pop	r29
    3962:	cf 91       	pop	r28
    3964:	08 95       	ret

00003966 <gripper_open>:
void gripper_open()
{
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	6c 97       	sbiw	r28, 0x1c	; 28
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
	for(jj=0;jj<55;jj++)
    397e:	10 92 50 03 	sts	0x0350, r1
    3982:	89 c0       	rjmp	.+274    	; 0x3a96 <gripper_open+0x130>
	{
		servo_3(jj);
    3984:	80 91 50 03 	lds	r24, 0x0350
    3988:	0e 94 32 1c 	call	0x3864	; 0x3864 <servo_3>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	a0 e2       	ldi	r26, 0x20	; 32
    3992:	b1 e4       	ldi	r27, 0x41	; 65
    3994:	89 83       	std	Y+1, r24	; 0x01
    3996:	9a 83       	std	Y+2, r25	; 0x02
    3998:	ab 83       	std	Y+3, r26	; 0x03
    399a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    399c:	69 81       	ldd	r22, Y+1	; 0x01
    399e:	7a 81       	ldd	r23, Y+2	; 0x02
    39a0:	8b 81       	ldd	r24, Y+3	; 0x03
    39a2:	9c 81       	ldd	r25, Y+4	; 0x04
    39a4:	26 e6       	ldi	r18, 0x66	; 102
    39a6:	36 e6       	ldi	r19, 0x66	; 102
    39a8:	46 e6       	ldi	r20, 0x66	; 102
    39aa:	55 e4       	ldi	r21, 0x45	; 69
    39ac:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	8d 83       	std	Y+5, r24	; 0x05
    39b6:	9e 83       	std	Y+6, r25	; 0x06
    39b8:	af 83       	std	Y+7, r26	; 0x07
    39ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    39bc:	11 e0       	ldi	r17, 0x01	; 1
    39be:	6d 81       	ldd	r22, Y+5	; 0x05
    39c0:	7e 81       	ldd	r23, Y+6	; 0x06
    39c2:	8f 81       	ldd	r24, Y+7	; 0x07
    39c4:	98 85       	ldd	r25, Y+8	; 0x08
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e8       	ldi	r20, 0x80	; 128
    39cc:	5f e3       	ldi	r21, 0x3F	; 63
    39ce:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    39d2:	88 23       	and	r24, r24
    39d4:	0c f0       	brlt	.+2      	; 0x39d8 <gripper_open+0x72>
    39d6:	10 e0       	ldi	r17, 0x00	; 0
    39d8:	11 23       	and	r17, r17
    39da:	29 f0       	breq	.+10     	; 0x39e6 <gripper_open+0x80>
		__ticks = 1;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	9a 87       	std	Y+10, r25	; 0x0a
    39e2:	89 87       	std	Y+9, r24	; 0x09
    39e4:	46 c0       	rjmp	.+140    	; 0x3a72 <gripper_open+0x10c>
	else if (__tmp > 65535)
    39e6:	11 e0       	ldi	r17, 0x01	; 1
    39e8:	6d 81       	ldd	r22, Y+5	; 0x05
    39ea:	7e 81       	ldd	r23, Y+6	; 0x06
    39ec:	8f 81       	ldd	r24, Y+7	; 0x07
    39ee:	98 85       	ldd	r25, Y+8	; 0x08
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	0c f0       	brlt	.+2      	; 0x3a02 <gripper_open+0x9c>
    3a00:	10 e0       	ldi	r17, 0x00	; 0
    3a02:	11 23       	and	r17, r17
    3a04:	61 f1       	breq	.+88     	; 0x3a5e <gripper_open+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a06:	69 81       	ldd	r22, Y+1	; 0x01
    3a08:	7a 81       	ldd	r23, Y+2	; 0x02
    3a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	40 e2       	ldi	r20, 0x20	; 32
    3a14:	51 e4       	ldi	r21, 0x41	; 65
    3a16:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	bc 01       	movw	r22, r24
    3a20:	cd 01       	movw	r24, r26
    3a22:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	9a 87       	std	Y+10, r25	; 0x0a
    3a2c:	89 87       	std	Y+9, r24	; 0x09
    3a2e:	12 c0       	rjmp	.+36     	; 0x3a54 <gripper_open+0xee>
    3a30:	80 e7       	ldi	r24, 0x70	; 112
    3a32:	91 e0       	ldi	r25, 0x01	; 1
    3a34:	9c 87       	std	Y+12, r25	; 0x0c
    3a36:	8b 87       	std	Y+11, r24	; 0x0b
    3a38:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	c8 01       	movw	r24, r16
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <gripper_open+0xda>
    3a44:	8c 01       	movw	r16, r24
    3a46:	1c 87       	std	Y+12, r17	; 0x0c
    3a48:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	9a 87       	std	Y+10, r25	; 0x0a
    3a52:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a54:	89 85       	ldd	r24, Y+9	; 0x09
    3a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	51 f7       	brne	.-44     	; 0x3a30 <gripper_open+0xca>
    3a5c:	17 c0       	rjmp	.+46     	; 0x3a8c <gripper_open+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5e:	6d 81       	ldd	r22, Y+5	; 0x05
    3a60:	7e 81       	ldd	r23, Y+6	; 0x06
    3a62:	8f 81       	ldd	r24, Y+7	; 0x07
    3a64:	98 85       	ldd	r25, Y+8	; 0x08
    3a66:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9a 87       	std	Y+10, r25	; 0x0a
    3a70:	89 87       	std	Y+9, r24	; 0x09
    3a72:	89 85       	ldd	r24, Y+9	; 0x09
    3a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a76:	9e 87       	std	Y+14, r25	; 0x0e
    3a78:	8d 87       	std	Y+13, r24	; 0x0d
    3a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7e:	8c 01       	movw	r16, r24
    3a80:	c8 01       	movw	r24, r16
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	f1 f7       	brne	.-4      	; 0x3a82 <gripper_open+0x11c>
    3a86:	8c 01       	movw	r16, r24
    3a88:	1e 87       	std	Y+14, r17	; 0x0e
    3a8a:	0d 87       	std	Y+13, r16	; 0x0d
 OCR1CH = 0x03;
 OCR1CL = 0xFF; //Servo 3 off
} 
void gripper_open()
{
	for(jj=0;jj<55;jj++)
    3a8c:	80 91 50 03 	lds	r24, 0x0350
    3a90:	8f 5f       	subi	r24, 0xFF	; 255
    3a92:	80 93 50 03 	sts	0x0350, r24
    3a96:	80 91 50 03 	lds	r24, 0x0350
    3a9a:	87 33       	cpi	r24, 0x37	; 55
    3a9c:	0c f4       	brge	.+2      	; 0x3aa0 <gripper_open+0x13a>
    3a9e:	72 cf       	rjmp	.-284    	; 0x3984 <gripper_open+0x1e>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	a8 e4       	ldi	r26, 0x48	; 72
    3aa6:	b3 e4       	ldi	r27, 0x43	; 67
    3aa8:	8f 87       	std	Y+15, r24	; 0x0f
    3aaa:	98 8b       	std	Y+16, r25	; 0x10
    3aac:	a9 8b       	std	Y+17, r26	; 0x11
    3aae:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3ab0:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ab2:	78 89       	ldd	r23, Y+16	; 0x10
    3ab4:	89 89       	ldd	r24, Y+17	; 0x11
    3ab6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ab8:	26 e6       	ldi	r18, 0x66	; 102
    3aba:	36 e6       	ldi	r19, 0x66	; 102
    3abc:	46 e6       	ldi	r20, 0x66	; 102
    3abe:	55 e4       	ldi	r21, 0x45	; 69
    3ac0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	8b 8b       	std	Y+19, r24	; 0x13
    3aca:	9c 8b       	std	Y+20, r25	; 0x14
    3acc:	ad 8b       	std	Y+21, r26	; 0x15
    3ace:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3ad0:	11 e0       	ldi	r17, 0x01	; 1
    3ad2:	6b 89       	ldd	r22, Y+19	; 0x13
    3ad4:	7c 89       	ldd	r23, Y+20	; 0x14
    3ad6:	8d 89       	ldd	r24, Y+21	; 0x15
    3ad8:	9e 89       	ldd	r25, Y+22	; 0x16
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e8       	ldi	r20, 0x80	; 128
    3ae0:	5f e3       	ldi	r21, 0x3F	; 63
    3ae2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    3ae6:	88 23       	and	r24, r24
    3ae8:	0c f0       	brlt	.+2      	; 0x3aec <gripper_open+0x186>
    3aea:	10 e0       	ldi	r17, 0x00	; 0
    3aec:	11 23       	and	r17, r17
    3aee:	29 f0       	breq	.+10     	; 0x3afa <gripper_open+0x194>
		__ticks = 1;
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	98 8f       	std	Y+24, r25	; 0x18
    3af6:	8f 8b       	std	Y+23, r24	; 0x17
    3af8:	46 c0       	rjmp	.+140    	; 0x3b86 <gripper_open+0x220>
	else if (__tmp > 65535)
    3afa:	11 e0       	ldi	r17, 0x01	; 1
    3afc:	6b 89       	ldd	r22, Y+19	; 0x13
    3afe:	7c 89       	ldd	r23, Y+20	; 0x14
    3b00:	8d 89       	ldd	r24, Y+21	; 0x15
    3b02:	9e 89       	ldd	r25, Y+22	; 0x16
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	3f ef       	ldi	r19, 0xFF	; 255
    3b08:	4f e7       	ldi	r20, 0x7F	; 127
    3b0a:	57 e4       	ldi	r21, 0x47	; 71
    3b0c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    3b10:	18 16       	cp	r1, r24
    3b12:	0c f0       	brlt	.+2      	; 0x3b16 <gripper_open+0x1b0>
    3b14:	10 e0       	ldi	r17, 0x00	; 0
    3b16:	11 23       	and	r17, r17
    3b18:	61 f1       	breq	.+88     	; 0x3b72 <gripper_open+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3b1c:	78 89       	ldd	r23, Y+16	; 0x10
    3b1e:	89 89       	ldd	r24, Y+17	; 0x11
    3b20:	9a 89       	ldd	r25, Y+18	; 0x12
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e2       	ldi	r20, 0x20	; 32
    3b28:	51 e4       	ldi	r21, 0x41	; 65
    3b2a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	bc 01       	movw	r22, r24
    3b34:	cd 01       	movw	r24, r26
    3b36:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	98 8f       	std	Y+24, r25	; 0x18
    3b40:	8f 8b       	std	Y+23, r24	; 0x17
    3b42:	12 c0       	rjmp	.+36     	; 0x3b68 <gripper_open+0x202>
    3b44:	80 e7       	ldi	r24, 0x70	; 112
    3b46:	91 e0       	ldi	r25, 0x01	; 1
    3b48:	9a 8f       	std	Y+26, r25	; 0x1a
    3b4a:	89 8f       	std	Y+25, r24	; 0x19
    3b4c:	89 8d       	ldd	r24, Y+25	; 0x19
    3b4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b50:	8c 01       	movw	r16, r24
    3b52:	c8 01       	movw	r24, r16
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <gripper_open+0x1ee>
    3b58:	8c 01       	movw	r16, r24
    3b5a:	1a 8f       	std	Y+26, r17	; 0x1a
    3b5c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b60:	98 8d       	ldd	r25, Y+24	; 0x18
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	98 8f       	std	Y+24, r25	; 0x18
    3b66:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b68:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	51 f7       	brne	.-44     	; 0x3b44 <gripper_open+0x1de>
    3b70:	17 c0       	rjmp	.+46     	; 0x3ba0 <gripper_open+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b72:	6b 89       	ldd	r22, Y+19	; 0x13
    3b74:	7c 89       	ldd	r23, Y+20	; 0x14
    3b76:	8d 89       	ldd	r24, Y+21	; 0x15
    3b78:	9e 89       	ldd	r25, Y+22	; 0x16
    3b7a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	98 8f       	std	Y+24, r25	; 0x18
    3b84:	8f 8b       	std	Y+23, r24	; 0x17
    3b86:	8f 89       	ldd	r24, Y+23	; 0x17
    3b88:	98 8d       	ldd	r25, Y+24	; 0x18
    3b8a:	9c 8f       	std	Y+28, r25	; 0x1c
    3b8c:	8b 8f       	std	Y+27, r24	; 0x1b
    3b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b92:	8c 01       	movw	r16, r24
    3b94:	c8 01       	movw	r24, r16
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	f1 f7       	brne	.-4      	; 0x3b96 <gripper_open+0x230>
    3b9a:	8c 01       	movw	r16, r24
    3b9c:	1c 8f       	std	Y+28, r17	; 0x1c
    3b9e:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_3(jj);
		_delay_ms(10);
	}
	_delay_ms(200);
}
    3ba0:	6c 96       	adiw	r28, 0x1c	; 28
    3ba2:	0f b6       	in	r0, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	df 91       	pop	r29
    3bae:	cf 91       	pop	r28
    3bb0:	1f 91       	pop	r17
    3bb2:	0f 91       	pop	r16
    3bb4:	08 95       	ret

00003bb6 <gripper_close>:

void gripper_close()
{
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	6c 97       	sbiw	r28, 0x1c	; 28
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
	for(ii=55;ii>0;ii--)
    3bce:	87 e3       	ldi	r24, 0x37	; 55
    3bd0:	80 93 4f 03 	sts	0x034F, r24
    3bd4:	89 c0       	rjmp	.+274    	; 0x3ce8 <gripper_close+0x132>
	{
		servo_3(ii);
    3bd6:	80 91 4f 03 	lds	r24, 0x034F
    3bda:	0e 94 32 1c 	call	0x3864	; 0x3864 <servo_3>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	a0 e2       	ldi	r26, 0x20	; 32
    3be4:	b1 e4       	ldi	r27, 0x41	; 65
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	ab 83       	std	Y+3, r26	; 0x03
    3bec:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bee:	69 81       	ldd	r22, Y+1	; 0x01
    3bf0:	7a 81       	ldd	r23, Y+2	; 0x02
    3bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf6:	26 e6       	ldi	r18, 0x66	; 102
    3bf8:	36 e6       	ldi	r19, 0x66	; 102
    3bfa:	46 e6       	ldi	r20, 0x66	; 102
    3bfc:	55 e4       	ldi	r21, 0x45	; 69
    3bfe:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	8d 83       	std	Y+5, r24	; 0x05
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	af 83       	std	Y+7, r26	; 0x07
    3c0c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3c0e:	11 e0       	ldi	r17, 0x01	; 1
    3c10:	6d 81       	ldd	r22, Y+5	; 0x05
    3c12:	7e 81       	ldd	r23, Y+6	; 0x06
    3c14:	8f 81       	ldd	r24, Y+7	; 0x07
    3c16:	98 85       	ldd	r25, Y+8	; 0x08
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e8       	ldi	r20, 0x80	; 128
    3c1e:	5f e3       	ldi	r21, 0x3F	; 63
    3c20:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    3c24:	88 23       	and	r24, r24
    3c26:	0c f0       	brlt	.+2      	; 0x3c2a <gripper_close+0x74>
    3c28:	10 e0       	ldi	r17, 0x00	; 0
    3c2a:	11 23       	and	r17, r17
    3c2c:	29 f0       	breq	.+10     	; 0x3c38 <gripper_close+0x82>
		__ticks = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9a 87       	std	Y+10, r25	; 0x0a
    3c34:	89 87       	std	Y+9, r24	; 0x09
    3c36:	46 c0       	rjmp	.+140    	; 0x3cc4 <gripper_close+0x10e>
	else if (__tmp > 65535)
    3c38:	11 e0       	ldi	r17, 0x01	; 1
    3c3a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c3c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c40:	98 85       	ldd	r25, Y+8	; 0x08
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	3f ef       	ldi	r19, 0xFF	; 255
    3c46:	4f e7       	ldi	r20, 0x7F	; 127
    3c48:	57 e4       	ldi	r21, 0x47	; 71
    3c4a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    3c4e:	18 16       	cp	r1, r24
    3c50:	0c f0       	brlt	.+2      	; 0x3c54 <gripper_close+0x9e>
    3c52:	10 e0       	ldi	r17, 0x00	; 0
    3c54:	11 23       	and	r17, r17
    3c56:	61 f1       	breq	.+88     	; 0x3cb0 <gripper_close+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c58:	69 81       	ldd	r22, Y+1	; 0x01
    3c5a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e2       	ldi	r20, 0x20	; 32
    3c66:	51 e4       	ldi	r21, 0x41	; 65
    3c68:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9a 87       	std	Y+10, r25	; 0x0a
    3c7e:	89 87       	std	Y+9, r24	; 0x09
    3c80:	12 c0       	rjmp	.+36     	; 0x3ca6 <gripper_close+0xf0>
    3c82:	80 e7       	ldi	r24, 0x70	; 112
    3c84:	91 e0       	ldi	r25, 0x01	; 1
    3c86:	9c 87       	std	Y+12, r25	; 0x0c
    3c88:	8b 87       	std	Y+11, r24	; 0x0b
    3c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8e:	8c 01       	movw	r16, r24
    3c90:	c8 01       	movw	r24, r16
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <gripper_close+0xdc>
    3c96:	8c 01       	movw	r16, r24
    3c98:	1c 87       	std	Y+12, r17	; 0x0c
    3c9a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9c:	89 85       	ldd	r24, Y+9	; 0x09
    3c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	9a 87       	std	Y+10, r25	; 0x0a
    3ca4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	51 f7       	brne	.-44     	; 0x3c82 <gripper_close+0xcc>
    3cae:	17 c0       	rjmp	.+46     	; 0x3cde <gripper_close+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	6d 81       	ldd	r22, Y+5	; 0x05
    3cb2:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb6:	98 85       	ldd	r25, Y+8	; 0x08
    3cb8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9a 87       	std	Y+10, r25	; 0x0a
    3cc2:	89 87       	std	Y+9, r24	; 0x09
    3cc4:	89 85       	ldd	r24, Y+9	; 0x09
    3cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc8:	9e 87       	std	Y+14, r25	; 0x0e
    3cca:	8d 87       	std	Y+13, r24	; 0x0d
    3ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd0:	8c 01       	movw	r16, r24
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <gripper_close+0x11e>
    3cd8:	8c 01       	movw	r16, r24
    3cda:	1e 87       	std	Y+14, r17	; 0x0e
    3cdc:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void gripper_close()
{
	for(ii=55;ii>0;ii--)
    3cde:	80 91 4f 03 	lds	r24, 0x034F
    3ce2:	81 50       	subi	r24, 0x01	; 1
    3ce4:	80 93 4f 03 	sts	0x034F, r24
    3ce8:	80 91 4f 03 	lds	r24, 0x034F
    3cec:	88 23       	and	r24, r24
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <gripper_close+0x13c>
    3cf0:	72 cf       	rjmp	.-284    	; 0x3bd6 <gripper_close+0x20>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	a8 e4       	ldi	r26, 0x48	; 72
    3cf8:	b3 e4       	ldi	r27, 0x43	; 67
    3cfa:	8f 87       	std	Y+15, r24	; 0x0f
    3cfc:	98 8b       	std	Y+16, r25	; 0x10
    3cfe:	a9 8b       	std	Y+17, r26	; 0x11
    3d00:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d04:	78 89       	ldd	r23, Y+16	; 0x10
    3d06:	89 89       	ldd	r24, Y+17	; 0x11
    3d08:	9a 89       	ldd	r25, Y+18	; 0x12
    3d0a:	26 e6       	ldi	r18, 0x66	; 102
    3d0c:	36 e6       	ldi	r19, 0x66	; 102
    3d0e:	46 e6       	ldi	r20, 0x66	; 102
    3d10:	55 e4       	ldi	r21, 0x45	; 69
    3d12:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8b 8b       	std	Y+19, r24	; 0x13
    3d1c:	9c 8b       	std	Y+20, r25	; 0x14
    3d1e:	ad 8b       	std	Y+21, r26	; 0x15
    3d20:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3d22:	11 e0       	ldi	r17, 0x01	; 1
    3d24:	6b 89       	ldd	r22, Y+19	; 0x13
    3d26:	7c 89       	ldd	r23, Y+20	; 0x14
    3d28:	8d 89       	ldd	r24, Y+21	; 0x15
    3d2a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	40 e8       	ldi	r20, 0x80	; 128
    3d32:	5f e3       	ldi	r21, 0x3F	; 63
    3d34:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    3d38:	88 23       	and	r24, r24
    3d3a:	0c f0       	brlt	.+2      	; 0x3d3e <gripper_close+0x188>
    3d3c:	10 e0       	ldi	r17, 0x00	; 0
    3d3e:	11 23       	and	r17, r17
    3d40:	29 f0       	breq	.+10     	; 0x3d4c <gripper_close+0x196>
		__ticks = 1;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	98 8f       	std	Y+24, r25	; 0x18
    3d48:	8f 8b       	std	Y+23, r24	; 0x17
    3d4a:	46 c0       	rjmp	.+140    	; 0x3dd8 <gripper_close+0x222>
	else if (__tmp > 65535)
    3d4c:	11 e0       	ldi	r17, 0x01	; 1
    3d4e:	6b 89       	ldd	r22, Y+19	; 0x13
    3d50:	7c 89       	ldd	r23, Y+20	; 0x14
    3d52:	8d 89       	ldd	r24, Y+21	; 0x15
    3d54:	9e 89       	ldd	r25, Y+22	; 0x16
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	3f ef       	ldi	r19, 0xFF	; 255
    3d5a:	4f e7       	ldi	r20, 0x7F	; 127
    3d5c:	57 e4       	ldi	r21, 0x47	; 71
    3d5e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    3d62:	18 16       	cp	r1, r24
    3d64:	0c f0       	brlt	.+2      	; 0x3d68 <gripper_close+0x1b2>
    3d66:	10 e0       	ldi	r17, 0x00	; 0
    3d68:	11 23       	and	r17, r17
    3d6a:	61 f1       	breq	.+88     	; 0x3dc4 <gripper_close+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6c:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d6e:	78 89       	ldd	r23, Y+16	; 0x10
    3d70:	89 89       	ldd	r24, Y+17	; 0x11
    3d72:	9a 89       	ldd	r25, Y+18	; 0x12
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e2       	ldi	r20, 0x20	; 32
    3d7a:	51 e4       	ldi	r21, 0x41	; 65
    3d7c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	98 8f       	std	Y+24, r25	; 0x18
    3d92:	8f 8b       	std	Y+23, r24	; 0x17
    3d94:	12 c0       	rjmp	.+36     	; 0x3dba <gripper_close+0x204>
    3d96:	80 e7       	ldi	r24, 0x70	; 112
    3d98:	91 e0       	ldi	r25, 0x01	; 1
    3d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d9c:	89 8f       	std	Y+25, r24	; 0x19
    3d9e:	89 8d       	ldd	r24, Y+25	; 0x19
    3da0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3da2:	8c 01       	movw	r16, r24
    3da4:	c8 01       	movw	r24, r16
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <gripper_close+0x1f0>
    3daa:	8c 01       	movw	r16, r24
    3dac:	1a 8f       	std	Y+26, r17	; 0x1a
    3dae:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db0:	8f 89       	ldd	r24, Y+23	; 0x17
    3db2:	98 8d       	ldd	r25, Y+24	; 0x18
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	98 8f       	std	Y+24, r25	; 0x18
    3db8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dba:	8f 89       	ldd	r24, Y+23	; 0x17
    3dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	51 f7       	brne	.-44     	; 0x3d96 <gripper_close+0x1e0>
    3dc2:	17 c0       	rjmp	.+46     	; 0x3df2 <gripper_close+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc4:	6b 89       	ldd	r22, Y+19	; 0x13
    3dc6:	7c 89       	ldd	r23, Y+20	; 0x14
    3dc8:	8d 89       	ldd	r24, Y+21	; 0x15
    3dca:	9e 89       	ldd	r25, Y+22	; 0x16
    3dcc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	98 8f       	std	Y+24, r25	; 0x18
    3dd6:	8f 8b       	std	Y+23, r24	; 0x17
    3dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dda:	98 8d       	ldd	r25, Y+24	; 0x18
    3ddc:	9c 8f       	std	Y+28, r25	; 0x1c
    3dde:	8b 8f       	std	Y+27, r24	; 0x1b
    3de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3de4:	8c 01       	movw	r16, r24
    3de6:	c8 01       	movw	r24, r16
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <gripper_close+0x232>
    3dec:	8c 01       	movw	r16, r24
    3dee:	1c 8f       	std	Y+28, r17	; 0x1c
    3df0:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_3(ii);
		_delay_ms(10);
	}
	
	_delay_ms(200);
}
    3df2:	6c 96       	adiw	r28, 0x1c	; 28
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	df 91       	pop	r29
    3e00:	cf 91       	pop	r28
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	08 95       	ret

00003e08 <arm_rotate_left>:

void arm_rotate_left()
{
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	6c 97       	sbiw	r28, 0x1c	; 28
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii>0;ii--)
    3e20:	8a e5       	ldi	r24, 0x5A	; 90
    3e22:	80 93 4f 03 	sts	0x034F, r24
    3e26:	89 c0       	rjmp	.+274    	; 0x3f3a <arm_rotate_left+0x132>
	{
		servo_1(ii);
    3e28:	80 91 4f 03 	lds	r24, 0x034F
    3e2c:	0e 94 96 1b 	call	0x372c	; 0x372c <servo_1>
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	a0 e2       	ldi	r26, 0x20	; 32
    3e36:	b1 e4       	ldi	r27, 0x41	; 65
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	9a 83       	std	Y+2, r25	; 0x02
    3e3c:	ab 83       	std	Y+3, r26	; 0x03
    3e3e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e40:	69 81       	ldd	r22, Y+1	; 0x01
    3e42:	7a 81       	ldd	r23, Y+2	; 0x02
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	9c 81       	ldd	r25, Y+4	; 0x04
    3e48:	26 e6       	ldi	r18, 0x66	; 102
    3e4a:	36 e6       	ldi	r19, 0x66	; 102
    3e4c:	46 e6       	ldi	r20, 0x66	; 102
    3e4e:	55 e4       	ldi	r21, 0x45	; 69
    3e50:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	af 83       	std	Y+7, r26	; 0x07
    3e5e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3e60:	11 e0       	ldi	r17, 0x01	; 1
    3e62:	6d 81       	ldd	r22, Y+5	; 0x05
    3e64:	7e 81       	ldd	r23, Y+6	; 0x06
    3e66:	8f 81       	ldd	r24, Y+7	; 0x07
    3e68:	98 85       	ldd	r25, Y+8	; 0x08
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e8       	ldi	r20, 0x80	; 128
    3e70:	5f e3       	ldi	r21, 0x3F	; 63
    3e72:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    3e76:	88 23       	and	r24, r24
    3e78:	0c f0       	brlt	.+2      	; 0x3e7c <arm_rotate_left+0x74>
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
    3e7c:	11 23       	and	r17, r17
    3e7e:	29 f0       	breq	.+10     	; 0x3e8a <arm_rotate_left+0x82>
		__ticks = 1;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	9a 87       	std	Y+10, r25	; 0x0a
    3e86:	89 87       	std	Y+9, r24	; 0x09
    3e88:	46 c0       	rjmp	.+140    	; 0x3f16 <arm_rotate_left+0x10e>
	else if (__tmp > 65535)
    3e8a:	11 e0       	ldi	r17, 0x01	; 1
    3e8c:	6d 81       	ldd	r22, Y+5	; 0x05
    3e8e:	7e 81       	ldd	r23, Y+6	; 0x06
    3e90:	8f 81       	ldd	r24, Y+7	; 0x07
    3e92:	98 85       	ldd	r25, Y+8	; 0x08
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	3f ef       	ldi	r19, 0xFF	; 255
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	57 e4       	ldi	r21, 0x47	; 71
    3e9c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	0c f0       	brlt	.+2      	; 0x3ea6 <arm_rotate_left+0x9e>
    3ea4:	10 e0       	ldi	r17, 0x00	; 0
    3ea6:	11 23       	and	r17, r17
    3ea8:	61 f1       	breq	.+88     	; 0x3f02 <arm_rotate_left+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eaa:	69 81       	ldd	r22, Y+1	; 0x01
    3eac:	7a 81       	ldd	r23, Y+2	; 0x02
    3eae:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	40 e2       	ldi	r20, 0x20	; 32
    3eb8:	51 e4       	ldi	r21, 0x41	; 65
    3eba:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	bc 01       	movw	r22, r24
    3ec4:	cd 01       	movw	r24, r26
    3ec6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	9a 87       	std	Y+10, r25	; 0x0a
    3ed0:	89 87       	std	Y+9, r24	; 0x09
    3ed2:	12 c0       	rjmp	.+36     	; 0x3ef8 <arm_rotate_left+0xf0>
    3ed4:	80 e7       	ldi	r24, 0x70	; 112
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	9c 87       	std	Y+12, r25	; 0x0c
    3eda:	8b 87       	std	Y+11, r24	; 0x0b
    3edc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ede:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ee0:	8c 01       	movw	r16, r24
    3ee2:	c8 01       	movw	r24, r16
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <arm_rotate_left+0xdc>
    3ee8:	8c 01       	movw	r16, r24
    3eea:	1c 87       	std	Y+12, r17	; 0x0c
    3eec:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	89 85       	ldd	r24, Y+9	; 0x09
    3ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	9a 87       	std	Y+10, r25	; 0x0a
    3ef6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	89 85       	ldd	r24, Y+9	; 0x09
    3efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	51 f7       	brne	.-44     	; 0x3ed4 <arm_rotate_left+0xcc>
    3f00:	17 c0       	rjmp	.+46     	; 0x3f30 <arm_rotate_left+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	6d 81       	ldd	r22, Y+5	; 0x05
    3f04:	7e 81       	ldd	r23, Y+6	; 0x06
    3f06:	8f 81       	ldd	r24, Y+7	; 0x07
    3f08:	98 85       	ldd	r25, Y+8	; 0x08
    3f0a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	9a 87       	std	Y+10, r25	; 0x0a
    3f14:	89 87       	std	Y+9, r24	; 0x09
    3f16:	89 85       	ldd	r24, Y+9	; 0x09
    3f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1a:	9e 87       	std	Y+14, r25	; 0x0e
    3f1c:	8d 87       	std	Y+13, r24	; 0x0d
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	8c 01       	movw	r16, r24
    3f24:	c8 01       	movw	r24, r16
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <arm_rotate_left+0x11e>
    3f2a:	8c 01       	movw	r16, r24
    3f2c:	1e 87       	std	Y+14, r17	; 0x0e
    3f2e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);
}

void arm_rotate_left()
{
	for(ii=90;ii>0;ii--)
    3f30:	80 91 4f 03 	lds	r24, 0x034F
    3f34:	81 50       	subi	r24, 0x01	; 1
    3f36:	80 93 4f 03 	sts	0x034F, r24
    3f3a:	80 91 4f 03 	lds	r24, 0x034F
    3f3e:	88 23       	and	r24, r24
    3f40:	09 f0       	breq	.+2      	; 0x3f44 <arm_rotate_left+0x13c>
    3f42:	72 cf       	rjmp	.-284    	; 0x3e28 <arm_rotate_left+0x20>
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	a6 e9       	ldi	r26, 0x96	; 150
    3f4a:	b3 e4       	ldi	r27, 0x43	; 67
    3f4c:	8f 87       	std	Y+15, r24	; 0x0f
    3f4e:	98 8b       	std	Y+16, r25	; 0x10
    3f50:	a9 8b       	std	Y+17, r26	; 0x11
    3f52:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f54:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f56:	78 89       	ldd	r23, Y+16	; 0x10
    3f58:	89 89       	ldd	r24, Y+17	; 0x11
    3f5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f5c:	26 e6       	ldi	r18, 0x66	; 102
    3f5e:	36 e6       	ldi	r19, 0x66	; 102
    3f60:	46 e6       	ldi	r20, 0x66	; 102
    3f62:	55 e4       	ldi	r21, 0x45	; 69
    3f64:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	8b 8b       	std	Y+19, r24	; 0x13
    3f6e:	9c 8b       	std	Y+20, r25	; 0x14
    3f70:	ad 8b       	std	Y+21, r26	; 0x15
    3f72:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3f74:	11 e0       	ldi	r17, 0x01	; 1
    3f76:	6b 89       	ldd	r22, Y+19	; 0x13
    3f78:	7c 89       	ldd	r23, Y+20	; 0x14
    3f7a:	8d 89       	ldd	r24, Y+21	; 0x15
    3f7c:	9e 89       	ldd	r25, Y+22	; 0x16
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e8       	ldi	r20, 0x80	; 128
    3f84:	5f e3       	ldi	r21, 0x3F	; 63
    3f86:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	0c f0       	brlt	.+2      	; 0x3f90 <arm_rotate_left+0x188>
    3f8e:	10 e0       	ldi	r17, 0x00	; 0
    3f90:	11 23       	and	r17, r17
    3f92:	29 f0       	breq	.+10     	; 0x3f9e <arm_rotate_left+0x196>
		__ticks = 1;
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	98 8f       	std	Y+24, r25	; 0x18
    3f9a:	8f 8b       	std	Y+23, r24	; 0x17
    3f9c:	46 c0       	rjmp	.+140    	; 0x402a <arm_rotate_left+0x222>
	else if (__tmp > 65535)
    3f9e:	11 e0       	ldi	r17, 0x01	; 1
    3fa0:	6b 89       	ldd	r22, Y+19	; 0x13
    3fa2:	7c 89       	ldd	r23, Y+20	; 0x14
    3fa4:	8d 89       	ldd	r24, Y+21	; 0x15
    3fa6:	9e 89       	ldd	r25, Y+22	; 0x16
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	3f ef       	ldi	r19, 0xFF	; 255
    3fac:	4f e7       	ldi	r20, 0x7F	; 127
    3fae:	57 e4       	ldi	r21, 0x47	; 71
    3fb0:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    3fb4:	18 16       	cp	r1, r24
    3fb6:	0c f0       	brlt	.+2      	; 0x3fba <arm_rotate_left+0x1b2>
    3fb8:	10 e0       	ldi	r17, 0x00	; 0
    3fba:	11 23       	and	r17, r17
    3fbc:	61 f1       	breq	.+88     	; 0x4016 <arm_rotate_left+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    3fc0:	78 89       	ldd	r23, Y+16	; 0x10
    3fc2:	89 89       	ldd	r24, Y+17	; 0x11
    3fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	51 e4       	ldi	r21, 0x41	; 65
    3fce:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	98 8f       	std	Y+24, r25	; 0x18
    3fe4:	8f 8b       	std	Y+23, r24	; 0x17
    3fe6:	12 c0       	rjmp	.+36     	; 0x400c <arm_rotate_left+0x204>
    3fe8:	80 e7       	ldi	r24, 0x70	; 112
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	9a 8f       	std	Y+26, r25	; 0x1a
    3fee:	89 8f       	std	Y+25, r24	; 0x19
    3ff0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ff2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ff4:	8c 01       	movw	r16, r24
    3ff6:	c8 01       	movw	r24, r16
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <arm_rotate_left+0x1f0>
    3ffc:	8c 01       	movw	r16, r24
    3ffe:	1a 8f       	std	Y+26, r17	; 0x1a
    4000:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4002:	8f 89       	ldd	r24, Y+23	; 0x17
    4004:	98 8d       	ldd	r25, Y+24	; 0x18
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	98 8f       	std	Y+24, r25	; 0x18
    400a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400c:	8f 89       	ldd	r24, Y+23	; 0x17
    400e:	98 8d       	ldd	r25, Y+24	; 0x18
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	51 f7       	brne	.-44     	; 0x3fe8 <arm_rotate_left+0x1e0>
    4014:	17 c0       	rjmp	.+46     	; 0x4044 <arm_rotate_left+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	6b 89       	ldd	r22, Y+19	; 0x13
    4018:	7c 89       	ldd	r23, Y+20	; 0x14
    401a:	8d 89       	ldd	r24, Y+21	; 0x15
    401c:	9e 89       	ldd	r25, Y+22	; 0x16
    401e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	98 8f       	std	Y+24, r25	; 0x18
    4028:	8f 8b       	std	Y+23, r24	; 0x17
    402a:	8f 89       	ldd	r24, Y+23	; 0x17
    402c:	98 8d       	ldd	r25, Y+24	; 0x18
    402e:	9c 8f       	std	Y+28, r25	; 0x1c
    4030:	8b 8f       	std	Y+27, r24	; 0x1b
    4032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4036:	8c 01       	movw	r16, r24
    4038:	c8 01       	movw	r24, r16
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	f1 f7       	brne	.-4      	; 0x403a <arm_rotate_left+0x232>
    403e:	8c 01       	movw	r16, r24
    4040:	1c 8f       	std	Y+28, r17	; 0x1c
    4042:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4044:	6c 96       	adiw	r28, 0x1c	; 28
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	08 95       	ret

0000405a <arm_rotate_right>:

void arm_rotate_right()
{
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	6c 97       	sbiw	r28, 0x1c	; 28
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	f8 94       	cli
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	cd bf       	out	0x3d, r28	; 61
	for(ii=90;ii<180;ii++)
    4072:	8a e5       	ldi	r24, 0x5A	; 90
    4074:	80 93 4f 03 	sts	0x034F, r24
    4078:	89 c0       	rjmp	.+274    	; 0x418c <arm_rotate_right+0x132>
	{
		servo_1(ii);
    407a:	80 91 4f 03 	lds	r24, 0x034F
    407e:	0e 94 96 1b 	call	0x372c	; 0x372c <servo_1>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 e2       	ldi	r26, 0x20	; 32
    4088:	b1 e4       	ldi	r27, 0x41	; 65
    408a:	89 83       	std	Y+1, r24	; 0x01
    408c:	9a 83       	std	Y+2, r25	; 0x02
    408e:	ab 83       	std	Y+3, r26	; 0x03
    4090:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4092:	69 81       	ldd	r22, Y+1	; 0x01
    4094:	7a 81       	ldd	r23, Y+2	; 0x02
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	26 e6       	ldi	r18, 0x66	; 102
    409c:	36 e6       	ldi	r19, 0x66	; 102
    409e:	46 e6       	ldi	r20, 0x66	; 102
    40a0:	55 e4       	ldi	r21, 0x45	; 69
    40a2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	8d 83       	std	Y+5, r24	; 0x05
    40ac:	9e 83       	std	Y+6, r25	; 0x06
    40ae:	af 83       	std	Y+7, r26	; 0x07
    40b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    40b2:	11 e0       	ldi	r17, 0x01	; 1
    40b4:	6d 81       	ldd	r22, Y+5	; 0x05
    40b6:	7e 81       	ldd	r23, Y+6	; 0x06
    40b8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ba:	98 85       	ldd	r25, Y+8	; 0x08
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e8       	ldi	r20, 0x80	; 128
    40c2:	5f e3       	ldi	r21, 0x3F	; 63
    40c4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    40c8:	88 23       	and	r24, r24
    40ca:	0c f0       	brlt	.+2      	; 0x40ce <arm_rotate_right+0x74>
    40cc:	10 e0       	ldi	r17, 0x00	; 0
    40ce:	11 23       	and	r17, r17
    40d0:	29 f0       	breq	.+10     	; 0x40dc <arm_rotate_right+0x82>
		__ticks = 1;
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	9a 87       	std	Y+10, r25	; 0x0a
    40d8:	89 87       	std	Y+9, r24	; 0x09
    40da:	46 c0       	rjmp	.+140    	; 0x4168 <arm_rotate_right+0x10e>
	else if (__tmp > 65535)
    40dc:	11 e0       	ldi	r17, 0x01	; 1
    40de:	6d 81       	ldd	r22, Y+5	; 0x05
    40e0:	7e 81       	ldd	r23, Y+6	; 0x06
    40e2:	8f 81       	ldd	r24, Y+7	; 0x07
    40e4:	98 85       	ldd	r25, Y+8	; 0x08
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	3f ef       	ldi	r19, 0xFF	; 255
    40ea:	4f e7       	ldi	r20, 0x7F	; 127
    40ec:	57 e4       	ldi	r21, 0x47	; 71
    40ee:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    40f2:	18 16       	cp	r1, r24
    40f4:	0c f0       	brlt	.+2      	; 0x40f8 <arm_rotate_right+0x9e>
    40f6:	10 e0       	ldi	r17, 0x00	; 0
    40f8:	11 23       	and	r17, r17
    40fa:	61 f1       	breq	.+88     	; 0x4154 <arm_rotate_right+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40fc:	69 81       	ldd	r22, Y+1	; 0x01
    40fe:	7a 81       	ldd	r23, Y+2	; 0x02
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e2       	ldi	r20, 0x20	; 32
    410a:	51 e4       	ldi	r21, 0x41	; 65
    410c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	bc 01       	movw	r22, r24
    4116:	cd 01       	movw	r24, r26
    4118:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	9a 87       	std	Y+10, r25	; 0x0a
    4122:	89 87       	std	Y+9, r24	; 0x09
    4124:	12 c0       	rjmp	.+36     	; 0x414a <arm_rotate_right+0xf0>
    4126:	80 e7       	ldi	r24, 0x70	; 112
    4128:	91 e0       	ldi	r25, 0x01	; 1
    412a:	9c 87       	std	Y+12, r25	; 0x0c
    412c:	8b 87       	std	Y+11, r24	; 0x0b
    412e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4130:	9c 85       	ldd	r25, Y+12	; 0x0c
    4132:	8c 01       	movw	r16, r24
    4134:	c8 01       	movw	r24, r16
    4136:	01 97       	sbiw	r24, 0x01	; 1
    4138:	f1 f7       	brne	.-4      	; 0x4136 <arm_rotate_right+0xdc>
    413a:	8c 01       	movw	r16, r24
    413c:	1c 87       	std	Y+12, r17	; 0x0c
    413e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	89 85       	ldd	r24, Y+9	; 0x09
    4142:	9a 85       	ldd	r25, Y+10	; 0x0a
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	9a 87       	std	Y+10, r25	; 0x0a
    4148:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	89 85       	ldd	r24, Y+9	; 0x09
    414c:	9a 85       	ldd	r25, Y+10	; 0x0a
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	51 f7       	brne	.-44     	; 0x4126 <arm_rotate_right+0xcc>
    4152:	17 c0       	rjmp	.+46     	; 0x4182 <arm_rotate_right+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	6d 81       	ldd	r22, Y+5	; 0x05
    4156:	7e 81       	ldd	r23, Y+6	; 0x06
    4158:	8f 81       	ldd	r24, Y+7	; 0x07
    415a:	98 85       	ldd	r25, Y+8	; 0x08
    415c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9a 87       	std	Y+10, r25	; 0x0a
    4166:	89 87       	std	Y+9, r24	; 0x09
    4168:	89 85       	ldd	r24, Y+9	; 0x09
    416a:	9a 85       	ldd	r25, Y+10	; 0x0a
    416c:	9e 87       	std	Y+14, r25	; 0x0e
    416e:	8d 87       	std	Y+13, r24	; 0x0d
    4170:	8d 85       	ldd	r24, Y+13	; 0x0d
    4172:	9e 85       	ldd	r25, Y+14	; 0x0e
    4174:	8c 01       	movw	r16, r24
    4176:	c8 01       	movw	r24, r16
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	f1 f7       	brne	.-4      	; 0x4178 <arm_rotate_right+0x11e>
    417c:	8c 01       	movw	r16, r24
    417e:	1e 87       	std	Y+14, r17	; 0x0e
    4180:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_rotate_right()
{
	for(ii=90;ii<180;ii++)
    4182:	80 91 4f 03 	lds	r24, 0x034F
    4186:	8f 5f       	subi	r24, 0xFF	; 255
    4188:	80 93 4f 03 	sts	0x034F, r24
    418c:	80 91 4f 03 	lds	r24, 0x034F
    4190:	84 3b       	cpi	r24, 0xB4	; 180
    4192:	08 f4       	brcc	.+2      	; 0x4196 <arm_rotate_right+0x13c>
    4194:	72 cf       	rjmp	.-284    	; 0x407a <arm_rotate_right+0x20>
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	a6 e9       	ldi	r26, 0x96	; 150
    419c:	b3 e4       	ldi	r27, 0x43	; 67
    419e:	8f 87       	std	Y+15, r24	; 0x0f
    41a0:	98 8b       	std	Y+16, r25	; 0x10
    41a2:	a9 8b       	std	Y+17, r26	; 0x11
    41a4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    41a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    41a8:	78 89       	ldd	r23, Y+16	; 0x10
    41aa:	89 89       	ldd	r24, Y+17	; 0x11
    41ac:	9a 89       	ldd	r25, Y+18	; 0x12
    41ae:	26 e6       	ldi	r18, 0x66	; 102
    41b0:	36 e6       	ldi	r19, 0x66	; 102
    41b2:	46 e6       	ldi	r20, 0x66	; 102
    41b4:	55 e4       	ldi	r21, 0x45	; 69
    41b6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	8b 8b       	std	Y+19, r24	; 0x13
    41c0:	9c 8b       	std	Y+20, r25	; 0x14
    41c2:	ad 8b       	std	Y+21, r26	; 0x15
    41c4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    41c6:	11 e0       	ldi	r17, 0x01	; 1
    41c8:	6b 89       	ldd	r22, Y+19	; 0x13
    41ca:	7c 89       	ldd	r23, Y+20	; 0x14
    41cc:	8d 89       	ldd	r24, Y+21	; 0x15
    41ce:	9e 89       	ldd	r25, Y+22	; 0x16
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	40 e8       	ldi	r20, 0x80	; 128
    41d6:	5f e3       	ldi	r21, 0x3F	; 63
    41d8:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    41dc:	88 23       	and	r24, r24
    41de:	0c f0       	brlt	.+2      	; 0x41e2 <arm_rotate_right+0x188>
    41e0:	10 e0       	ldi	r17, 0x00	; 0
    41e2:	11 23       	and	r17, r17
    41e4:	29 f0       	breq	.+10     	; 0x41f0 <arm_rotate_right+0x196>
		__ticks = 1;
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	98 8f       	std	Y+24, r25	; 0x18
    41ec:	8f 8b       	std	Y+23, r24	; 0x17
    41ee:	46 c0       	rjmp	.+140    	; 0x427c <arm_rotate_right+0x222>
	else if (__tmp > 65535)
    41f0:	11 e0       	ldi	r17, 0x01	; 1
    41f2:	6b 89       	ldd	r22, Y+19	; 0x13
    41f4:	7c 89       	ldd	r23, Y+20	; 0x14
    41f6:	8d 89       	ldd	r24, Y+21	; 0x15
    41f8:	9e 89       	ldd	r25, Y+22	; 0x16
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	3f ef       	ldi	r19, 0xFF	; 255
    41fe:	4f e7       	ldi	r20, 0x7F	; 127
    4200:	57 e4       	ldi	r21, 0x47	; 71
    4202:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4206:	18 16       	cp	r1, r24
    4208:	0c f0       	brlt	.+2      	; 0x420c <arm_rotate_right+0x1b2>
    420a:	10 e0       	ldi	r17, 0x00	; 0
    420c:	11 23       	and	r17, r17
    420e:	61 f1       	breq	.+88     	; 0x4268 <arm_rotate_right+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4210:	6f 85       	ldd	r22, Y+15	; 0x0f
    4212:	78 89       	ldd	r23, Y+16	; 0x10
    4214:	89 89       	ldd	r24, Y+17	; 0x11
    4216:	9a 89       	ldd	r25, Y+18	; 0x12
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 e2       	ldi	r20, 0x20	; 32
    421e:	51 e4       	ldi	r21, 0x41	; 65
    4220:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	bc 01       	movw	r22, r24
    422a:	cd 01       	movw	r24, r26
    422c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	98 8f       	std	Y+24, r25	; 0x18
    4236:	8f 8b       	std	Y+23, r24	; 0x17
    4238:	12 c0       	rjmp	.+36     	; 0x425e <arm_rotate_right+0x204>
    423a:	80 e7       	ldi	r24, 0x70	; 112
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	9a 8f       	std	Y+26, r25	; 0x1a
    4240:	89 8f       	std	Y+25, r24	; 0x19
    4242:	89 8d       	ldd	r24, Y+25	; 0x19
    4244:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4246:	8c 01       	movw	r16, r24
    4248:	c8 01       	movw	r24, r16
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <arm_rotate_right+0x1f0>
    424e:	8c 01       	movw	r16, r24
    4250:	1a 8f       	std	Y+26, r17	; 0x1a
    4252:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	98 8f       	std	Y+24, r25	; 0x18
    425c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425e:	8f 89       	ldd	r24, Y+23	; 0x17
    4260:	98 8d       	ldd	r25, Y+24	; 0x18
    4262:	00 97       	sbiw	r24, 0x00	; 0
    4264:	51 f7       	brne	.-44     	; 0x423a <arm_rotate_right+0x1e0>
    4266:	17 c0       	rjmp	.+46     	; 0x4296 <arm_rotate_right+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4268:	6b 89       	ldd	r22, Y+19	; 0x13
    426a:	7c 89       	ldd	r23, Y+20	; 0x14
    426c:	8d 89       	ldd	r24, Y+21	; 0x15
    426e:	9e 89       	ldd	r25, Y+22	; 0x16
    4270:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	98 8f       	std	Y+24, r25	; 0x18
    427a:	8f 8b       	std	Y+23, r24	; 0x17
    427c:	8f 89       	ldd	r24, Y+23	; 0x17
    427e:	98 8d       	ldd	r25, Y+24	; 0x18
    4280:	9c 8f       	std	Y+28, r25	; 0x1c
    4282:	8b 8f       	std	Y+27, r24	; 0x1b
    4284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4288:	8c 01       	movw	r16, r24
    428a:	c8 01       	movw	r24, r16
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <arm_rotate_right+0x232>
    4290:	8c 01       	movw	r16, r24
    4292:	1c 8f       	std	Y+28, r17	; 0x1c
    4294:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4296:	6c 96       	adiw	r28, 0x1c	; 28
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	df 91       	pop	r29
    42a4:	cf 91       	pop	r28
    42a6:	1f 91       	pop	r17
    42a8:	0f 91       	pop	r16
    42aa:	08 95       	ret

000042ac <arm_straight>:
void arm_straight()
{
    42ac:	0f 93       	push	r16
    42ae:	1f 93       	push	r17
    42b0:	cf 93       	push	r28
    42b2:	df 93       	push	r29
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
    42b8:	6c 97       	sbiw	r28, 0x1c	; 28
    42ba:	0f b6       	in	r0, 0x3f	; 63
    42bc:	f8 94       	cli
    42be:	de bf       	out	0x3e, r29	; 62
    42c0:	0f be       	out	0x3f, r0	; 63
    42c2:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<90;ii++)
    42c4:	10 92 4f 03 	sts	0x034F, r1
    42c8:	89 c0       	rjmp	.+274    	; 0x43dc <arm_straight+0x130>
	{
		servo_1(ii);
    42ca:	80 91 4f 03 	lds	r24, 0x034F
    42ce:	0e 94 96 1b 	call	0x372c	; 0x372c <servo_1>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a0 e2       	ldi	r26, 0x20	; 32
    42d8:	b1 e4       	ldi	r27, 0x41	; 65
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	9a 83       	std	Y+2, r25	; 0x02
    42de:	ab 83       	std	Y+3, r26	; 0x03
    42e0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42e2:	69 81       	ldd	r22, Y+1	; 0x01
    42e4:	7a 81       	ldd	r23, Y+2	; 0x02
    42e6:	8b 81       	ldd	r24, Y+3	; 0x03
    42e8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ea:	26 e6       	ldi	r18, 0x66	; 102
    42ec:	36 e6       	ldi	r19, 0x66	; 102
    42ee:	46 e6       	ldi	r20, 0x66	; 102
    42f0:	55 e4       	ldi	r21, 0x45	; 69
    42f2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	8d 83       	std	Y+5, r24	; 0x05
    42fc:	9e 83       	std	Y+6, r25	; 0x06
    42fe:	af 83       	std	Y+7, r26	; 0x07
    4300:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4302:	11 e0       	ldi	r17, 0x01	; 1
    4304:	6d 81       	ldd	r22, Y+5	; 0x05
    4306:	7e 81       	ldd	r23, Y+6	; 0x06
    4308:	8f 81       	ldd	r24, Y+7	; 0x07
    430a:	98 85       	ldd	r25, Y+8	; 0x08
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e8       	ldi	r20, 0x80	; 128
    4312:	5f e3       	ldi	r21, 0x3F	; 63
    4314:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4318:	88 23       	and	r24, r24
    431a:	0c f0       	brlt	.+2      	; 0x431e <arm_straight+0x72>
    431c:	10 e0       	ldi	r17, 0x00	; 0
    431e:	11 23       	and	r17, r17
    4320:	29 f0       	breq	.+10     	; 0x432c <arm_straight+0x80>
		__ticks = 1;
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	9a 87       	std	Y+10, r25	; 0x0a
    4328:	89 87       	std	Y+9, r24	; 0x09
    432a:	46 c0       	rjmp	.+140    	; 0x43b8 <arm_straight+0x10c>
	else if (__tmp > 65535)
    432c:	11 e0       	ldi	r17, 0x01	; 1
    432e:	6d 81       	ldd	r22, Y+5	; 0x05
    4330:	7e 81       	ldd	r23, Y+6	; 0x06
    4332:	8f 81       	ldd	r24, Y+7	; 0x07
    4334:	98 85       	ldd	r25, Y+8	; 0x08
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	3f ef       	ldi	r19, 0xFF	; 255
    433a:	4f e7       	ldi	r20, 0x7F	; 127
    433c:	57 e4       	ldi	r21, 0x47	; 71
    433e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4342:	18 16       	cp	r1, r24
    4344:	0c f0       	brlt	.+2      	; 0x4348 <arm_straight+0x9c>
    4346:	10 e0       	ldi	r17, 0x00	; 0
    4348:	11 23       	and	r17, r17
    434a:	61 f1       	breq	.+88     	; 0x43a4 <arm_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434c:	69 81       	ldd	r22, Y+1	; 0x01
    434e:	7a 81       	ldd	r23, Y+2	; 0x02
    4350:	8b 81       	ldd	r24, Y+3	; 0x03
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e2       	ldi	r20, 0x20	; 32
    435a:	51 e4       	ldi	r21, 0x41	; 65
    435c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	bc 01       	movw	r22, r24
    4366:	cd 01       	movw	r24, r26
    4368:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	9a 87       	std	Y+10, r25	; 0x0a
    4372:	89 87       	std	Y+9, r24	; 0x09
    4374:	12 c0       	rjmp	.+36     	; 0x439a <arm_straight+0xee>
    4376:	80 e7       	ldi	r24, 0x70	; 112
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	9c 87       	std	Y+12, r25	; 0x0c
    437c:	8b 87       	std	Y+11, r24	; 0x0b
    437e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4380:	9c 85       	ldd	r25, Y+12	; 0x0c
    4382:	8c 01       	movw	r16, r24
    4384:	c8 01       	movw	r24, r16
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <arm_straight+0xda>
    438a:	8c 01       	movw	r16, r24
    438c:	1c 87       	std	Y+12, r17	; 0x0c
    438e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	9a 87       	std	Y+10, r25	; 0x0a
    4398:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439a:	89 85       	ldd	r24, Y+9	; 0x09
    439c:	9a 85       	ldd	r25, Y+10	; 0x0a
    439e:	00 97       	sbiw	r24, 0x00	; 0
    43a0:	51 f7       	brne	.-44     	; 0x4376 <arm_straight+0xca>
    43a2:	17 c0       	rjmp	.+46     	; 0x43d2 <arm_straight+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a4:	6d 81       	ldd	r22, Y+5	; 0x05
    43a6:	7e 81       	ldd	r23, Y+6	; 0x06
    43a8:	8f 81       	ldd	r24, Y+7	; 0x07
    43aa:	98 85       	ldd	r25, Y+8	; 0x08
    43ac:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	9a 87       	std	Y+10, r25	; 0x0a
    43b6:	89 87       	std	Y+9, r24	; 0x09
    43b8:	89 85       	ldd	r24, Y+9	; 0x09
    43ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    43bc:	9e 87       	std	Y+14, r25	; 0x0e
    43be:	8d 87       	std	Y+13, r24	; 0x0d
    43c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c4:	8c 01       	movw	r16, r24
    43c6:	c8 01       	movw	r24, r16
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <arm_straight+0x11c>
    43cc:	8c 01       	movw	r16, r24
    43ce:	1e 87       	std	Y+14, r17	; 0x0e
    43d0:	0d 87       	std	Y+13, r16	; 0x0d
	}
	_delay_ms(300);
}
void arm_straight()
{
	for(ii=0;ii<90;ii++)
    43d2:	80 91 4f 03 	lds	r24, 0x034F
    43d6:	8f 5f       	subi	r24, 0xFF	; 255
    43d8:	80 93 4f 03 	sts	0x034F, r24
    43dc:	80 91 4f 03 	lds	r24, 0x034F
    43e0:	8a 35       	cpi	r24, 0x5A	; 90
    43e2:	08 f4       	brcc	.+2      	; 0x43e6 <arm_straight+0x13a>
    43e4:	72 cf       	rjmp	.-284    	; 0x42ca <arm_straight+0x1e>
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	a6 e9       	ldi	r26, 0x96	; 150
    43ec:	b3 e4       	ldi	r27, 0x43	; 67
    43ee:	8f 87       	std	Y+15, r24	; 0x0f
    43f0:	98 8b       	std	Y+16, r25	; 0x10
    43f2:	a9 8b       	std	Y+17, r26	; 0x11
    43f4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    43f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    43f8:	78 89       	ldd	r23, Y+16	; 0x10
    43fa:	89 89       	ldd	r24, Y+17	; 0x11
    43fc:	9a 89       	ldd	r25, Y+18	; 0x12
    43fe:	26 e6       	ldi	r18, 0x66	; 102
    4400:	36 e6       	ldi	r19, 0x66	; 102
    4402:	46 e6       	ldi	r20, 0x66	; 102
    4404:	55 e4       	ldi	r21, 0x45	; 69
    4406:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	8b 8b       	std	Y+19, r24	; 0x13
    4410:	9c 8b       	std	Y+20, r25	; 0x14
    4412:	ad 8b       	std	Y+21, r26	; 0x15
    4414:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4416:	11 e0       	ldi	r17, 0x01	; 1
    4418:	6b 89       	ldd	r22, Y+19	; 0x13
    441a:	7c 89       	ldd	r23, Y+20	; 0x14
    441c:	8d 89       	ldd	r24, Y+21	; 0x15
    441e:	9e 89       	ldd	r25, Y+22	; 0x16
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e8       	ldi	r20, 0x80	; 128
    4426:	5f e3       	ldi	r21, 0x3F	; 63
    4428:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    442c:	88 23       	and	r24, r24
    442e:	0c f0       	brlt	.+2      	; 0x4432 <arm_straight+0x186>
    4430:	10 e0       	ldi	r17, 0x00	; 0
    4432:	11 23       	and	r17, r17
    4434:	29 f0       	breq	.+10     	; 0x4440 <arm_straight+0x194>
		__ticks = 1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	98 8f       	std	Y+24, r25	; 0x18
    443c:	8f 8b       	std	Y+23, r24	; 0x17
    443e:	46 c0       	rjmp	.+140    	; 0x44cc <arm_straight+0x220>
	else if (__tmp > 65535)
    4440:	11 e0       	ldi	r17, 0x01	; 1
    4442:	6b 89       	ldd	r22, Y+19	; 0x13
    4444:	7c 89       	ldd	r23, Y+20	; 0x14
    4446:	8d 89       	ldd	r24, Y+21	; 0x15
    4448:	9e 89       	ldd	r25, Y+22	; 0x16
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	3f ef       	ldi	r19, 0xFF	; 255
    444e:	4f e7       	ldi	r20, 0x7F	; 127
    4450:	57 e4       	ldi	r21, 0x47	; 71
    4452:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4456:	18 16       	cp	r1, r24
    4458:	0c f0       	brlt	.+2      	; 0x445c <arm_straight+0x1b0>
    445a:	10 e0       	ldi	r17, 0x00	; 0
    445c:	11 23       	and	r17, r17
    445e:	61 f1       	breq	.+88     	; 0x44b8 <arm_straight+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4460:	6f 85       	ldd	r22, Y+15	; 0x0f
    4462:	78 89       	ldd	r23, Y+16	; 0x10
    4464:	89 89       	ldd	r24, Y+17	; 0x11
    4466:	9a 89       	ldd	r25, Y+18	; 0x12
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	bc 01       	movw	r22, r24
    447a:	cd 01       	movw	r24, r26
    447c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	98 8f       	std	Y+24, r25	; 0x18
    4486:	8f 8b       	std	Y+23, r24	; 0x17
    4488:	12 c0       	rjmp	.+36     	; 0x44ae <arm_straight+0x202>
    448a:	80 e7       	ldi	r24, 0x70	; 112
    448c:	91 e0       	ldi	r25, 0x01	; 1
    448e:	9a 8f       	std	Y+26, r25	; 0x1a
    4490:	89 8f       	std	Y+25, r24	; 0x19
    4492:	89 8d       	ldd	r24, Y+25	; 0x19
    4494:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4496:	8c 01       	movw	r16, r24
    4498:	c8 01       	movw	r24, r16
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <arm_straight+0x1ee>
    449e:	8c 01       	movw	r16, r24
    44a0:	1a 8f       	std	Y+26, r17	; 0x1a
    44a2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a4:	8f 89       	ldd	r24, Y+23	; 0x17
    44a6:	98 8d       	ldd	r25, Y+24	; 0x18
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	98 8f       	std	Y+24, r25	; 0x18
    44ac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ae:	8f 89       	ldd	r24, Y+23	; 0x17
    44b0:	98 8d       	ldd	r25, Y+24	; 0x18
    44b2:	00 97       	sbiw	r24, 0x00	; 0
    44b4:	51 f7       	brne	.-44     	; 0x448a <arm_straight+0x1de>
    44b6:	17 c0       	rjmp	.+46     	; 0x44e6 <arm_straight+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b8:	6b 89       	ldd	r22, Y+19	; 0x13
    44ba:	7c 89       	ldd	r23, Y+20	; 0x14
    44bc:	8d 89       	ldd	r24, Y+21	; 0x15
    44be:	9e 89       	ldd	r25, Y+22	; 0x16
    44c0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    44c4:	dc 01       	movw	r26, r24
    44c6:	cb 01       	movw	r24, r22
    44c8:	98 8f       	std	Y+24, r25	; 0x18
    44ca:	8f 8b       	std	Y+23, r24	; 0x17
    44cc:	8f 89       	ldd	r24, Y+23	; 0x17
    44ce:	98 8d       	ldd	r25, Y+24	; 0x18
    44d0:	9c 8f       	std	Y+28, r25	; 0x1c
    44d2:	8b 8f       	std	Y+27, r24	; 0x1b
    44d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d8:	8c 01       	movw	r16, r24
    44da:	c8 01       	movw	r24, r16
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	f1 f7       	brne	.-4      	; 0x44dc <arm_straight+0x230>
    44e0:	8c 01       	movw	r16, r24
    44e2:	1c 8f       	std	Y+28, r17	; 0x1c
    44e4:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    44e6:	6c 96       	adiw	r28, 0x1c	; 28
    44e8:	0f b6       	in	r0, 0x3f	; 63
    44ea:	f8 94       	cli
    44ec:	de bf       	out	0x3e, r29	; 62
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	cd bf       	out	0x3d, r28	; 61
    44f2:	df 91       	pop	r29
    44f4:	cf 91       	pop	r28
    44f6:	1f 91       	pop	r17
    44f8:	0f 91       	pop	r16
    44fa:	08 95       	ret

000044fc <arm_forward>:

void arm_forward()
{
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
    4508:	6c 97       	sbiw	r28, 0x1c	; 28
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	f8 94       	cli
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<80;ii++)
    4514:	10 92 4f 03 	sts	0x034F, r1
    4518:	89 c0       	rjmp	.+274    	; 0x462c <arm_forward+0x130>
	{
		servo_2(ii);
    451a:	80 91 4f 03 	lds	r24, 0x034F
    451e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <servo_2>
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	a0 e2       	ldi	r26, 0x20	; 32
    4528:	b1 e4       	ldi	r27, 0x41	; 65
    452a:	89 83       	std	Y+1, r24	; 0x01
    452c:	9a 83       	std	Y+2, r25	; 0x02
    452e:	ab 83       	std	Y+3, r26	; 0x03
    4530:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4532:	69 81       	ldd	r22, Y+1	; 0x01
    4534:	7a 81       	ldd	r23, Y+2	; 0x02
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	26 e6       	ldi	r18, 0x66	; 102
    453c:	36 e6       	ldi	r19, 0x66	; 102
    453e:	46 e6       	ldi	r20, 0x66	; 102
    4540:	55 e4       	ldi	r21, 0x45	; 69
    4542:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	9e 83       	std	Y+6, r25	; 0x06
    454e:	af 83       	std	Y+7, r26	; 0x07
    4550:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4552:	11 e0       	ldi	r17, 0x01	; 1
    4554:	6d 81       	ldd	r22, Y+5	; 0x05
    4556:	7e 81       	ldd	r23, Y+6	; 0x06
    4558:	8f 81       	ldd	r24, Y+7	; 0x07
    455a:	98 85       	ldd	r25, Y+8	; 0x08
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e8       	ldi	r20, 0x80	; 128
    4562:	5f e3       	ldi	r21, 0x3F	; 63
    4564:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4568:	88 23       	and	r24, r24
    456a:	0c f0       	brlt	.+2      	; 0x456e <arm_forward+0x72>
    456c:	10 e0       	ldi	r17, 0x00	; 0
    456e:	11 23       	and	r17, r17
    4570:	29 f0       	breq	.+10     	; 0x457c <arm_forward+0x80>
		__ticks = 1;
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	9a 87       	std	Y+10, r25	; 0x0a
    4578:	89 87       	std	Y+9, r24	; 0x09
    457a:	46 c0       	rjmp	.+140    	; 0x4608 <arm_forward+0x10c>
	else if (__tmp > 65535)
    457c:	11 e0       	ldi	r17, 0x01	; 1
    457e:	6d 81       	ldd	r22, Y+5	; 0x05
    4580:	7e 81       	ldd	r23, Y+6	; 0x06
    4582:	8f 81       	ldd	r24, Y+7	; 0x07
    4584:	98 85       	ldd	r25, Y+8	; 0x08
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	3f ef       	ldi	r19, 0xFF	; 255
    458a:	4f e7       	ldi	r20, 0x7F	; 127
    458c:	57 e4       	ldi	r21, 0x47	; 71
    458e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4592:	18 16       	cp	r1, r24
    4594:	0c f0       	brlt	.+2      	; 0x4598 <arm_forward+0x9c>
    4596:	10 e0       	ldi	r17, 0x00	; 0
    4598:	11 23       	and	r17, r17
    459a:	61 f1       	breq	.+88     	; 0x45f4 <arm_forward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459c:	69 81       	ldd	r22, Y+1	; 0x01
    459e:	7a 81       	ldd	r23, Y+2	; 0x02
    45a0:	8b 81       	ldd	r24, Y+3	; 0x03
    45a2:	9c 81       	ldd	r25, Y+4	; 0x04
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	9a 87       	std	Y+10, r25	; 0x0a
    45c2:	89 87       	std	Y+9, r24	; 0x09
    45c4:	12 c0       	rjmp	.+36     	; 0x45ea <arm_forward+0xee>
    45c6:	80 e7       	ldi	r24, 0x70	; 112
    45c8:	91 e0       	ldi	r25, 0x01	; 1
    45ca:	9c 87       	std	Y+12, r25	; 0x0c
    45cc:	8b 87       	std	Y+11, r24	; 0x0b
    45ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    45d2:	8c 01       	movw	r16, r24
    45d4:	c8 01       	movw	r24, r16
    45d6:	01 97       	sbiw	r24, 0x01	; 1
    45d8:	f1 f7       	brne	.-4      	; 0x45d6 <arm_forward+0xda>
    45da:	8c 01       	movw	r16, r24
    45dc:	1c 87       	std	Y+12, r17	; 0x0c
    45de:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e0:	89 85       	ldd	r24, Y+9	; 0x09
    45e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9a 87       	std	Y+10, r25	; 0x0a
    45e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	51 f7       	brne	.-44     	; 0x45c6 <arm_forward+0xca>
    45f2:	17 c0       	rjmp	.+46     	; 0x4622 <arm_forward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	6d 81       	ldd	r22, Y+5	; 0x05
    45f6:	7e 81       	ldd	r23, Y+6	; 0x06
    45f8:	8f 81       	ldd	r24, Y+7	; 0x07
    45fa:	98 85       	ldd	r25, Y+8	; 0x08
    45fc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9a 87       	std	Y+10, r25	; 0x0a
    4606:	89 87       	std	Y+9, r24	; 0x09
    4608:	89 85       	ldd	r24, Y+9	; 0x09
    460a:	9a 85       	ldd	r25, Y+10	; 0x0a
    460c:	9e 87       	std	Y+14, r25	; 0x0e
    460e:	8d 87       	std	Y+13, r24	; 0x0d
    4610:	8d 85       	ldd	r24, Y+13	; 0x0d
    4612:	9e 85       	ldd	r25, Y+14	; 0x0e
    4614:	8c 01       	movw	r16, r24
    4616:	c8 01       	movw	r24, r16
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	f1 f7       	brne	.-4      	; 0x4618 <arm_forward+0x11c>
    461c:	8c 01       	movw	r16, r24
    461e:	1e 87       	std	Y+14, r17	; 0x0e
    4620:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
}

void arm_forward()
{
	for(ii=0;ii<80;ii++)
    4622:	80 91 4f 03 	lds	r24, 0x034F
    4626:	8f 5f       	subi	r24, 0xFF	; 255
    4628:	80 93 4f 03 	sts	0x034F, r24
    462c:	80 91 4f 03 	lds	r24, 0x034F
    4630:	80 35       	cpi	r24, 0x50	; 80
    4632:	08 f4       	brcc	.+2      	; 0x4636 <arm_forward+0x13a>
    4634:	72 cf       	rjmp	.-284    	; 0x451a <arm_forward+0x1e>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	a6 e9       	ldi	r26, 0x96	; 150
    463c:	b3 e4       	ldi	r27, 0x43	; 67
    463e:	8f 87       	std	Y+15, r24	; 0x0f
    4640:	98 8b       	std	Y+16, r25	; 0x10
    4642:	a9 8b       	std	Y+17, r26	; 0x11
    4644:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4646:	6f 85       	ldd	r22, Y+15	; 0x0f
    4648:	78 89       	ldd	r23, Y+16	; 0x10
    464a:	89 89       	ldd	r24, Y+17	; 0x11
    464c:	9a 89       	ldd	r25, Y+18	; 0x12
    464e:	26 e6       	ldi	r18, 0x66	; 102
    4650:	36 e6       	ldi	r19, 0x66	; 102
    4652:	46 e6       	ldi	r20, 0x66	; 102
    4654:	55 e4       	ldi	r21, 0x45	; 69
    4656:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	8b 8b       	std	Y+19, r24	; 0x13
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	ad 8b       	std	Y+21, r26	; 0x15
    4664:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4666:	11 e0       	ldi	r17, 0x01	; 1
    4668:	6b 89       	ldd	r22, Y+19	; 0x13
    466a:	7c 89       	ldd	r23, Y+20	; 0x14
    466c:	8d 89       	ldd	r24, Y+21	; 0x15
    466e:	9e 89       	ldd	r25, Y+22	; 0x16
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e8       	ldi	r20, 0x80	; 128
    4676:	5f e3       	ldi	r21, 0x3F	; 63
    4678:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    467c:	88 23       	and	r24, r24
    467e:	0c f0       	brlt	.+2      	; 0x4682 <arm_forward+0x186>
    4680:	10 e0       	ldi	r17, 0x00	; 0
    4682:	11 23       	and	r17, r17
    4684:	29 f0       	breq	.+10     	; 0x4690 <arm_forward+0x194>
		__ticks = 1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	98 8f       	std	Y+24, r25	; 0x18
    468c:	8f 8b       	std	Y+23, r24	; 0x17
    468e:	46 c0       	rjmp	.+140    	; 0x471c <arm_forward+0x220>
	else if (__tmp > 65535)
    4690:	11 e0       	ldi	r17, 0x01	; 1
    4692:	6b 89       	ldd	r22, Y+19	; 0x13
    4694:	7c 89       	ldd	r23, Y+20	; 0x14
    4696:	8d 89       	ldd	r24, Y+21	; 0x15
    4698:	9e 89       	ldd	r25, Y+22	; 0x16
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	3f ef       	ldi	r19, 0xFF	; 255
    469e:	4f e7       	ldi	r20, 0x7F	; 127
    46a0:	57 e4       	ldi	r21, 0x47	; 71
    46a2:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    46a6:	18 16       	cp	r1, r24
    46a8:	0c f0       	brlt	.+2      	; 0x46ac <arm_forward+0x1b0>
    46aa:	10 e0       	ldi	r17, 0x00	; 0
    46ac:	11 23       	and	r17, r17
    46ae:	61 f1       	breq	.+88     	; 0x4708 <arm_forward+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    46b2:	78 89       	ldd	r23, Y+16	; 0x10
    46b4:	89 89       	ldd	r24, Y+17	; 0x11
    46b6:	9a 89       	ldd	r25, Y+18	; 0x12
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e2       	ldi	r20, 0x20	; 32
    46be:	51 e4       	ldi	r21, 0x41	; 65
    46c0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	bc 01       	movw	r22, r24
    46ca:	cd 01       	movw	r24, r26
    46cc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	98 8f       	std	Y+24, r25	; 0x18
    46d6:	8f 8b       	std	Y+23, r24	; 0x17
    46d8:	12 c0       	rjmp	.+36     	; 0x46fe <arm_forward+0x202>
    46da:	80 e7       	ldi	r24, 0x70	; 112
    46dc:	91 e0       	ldi	r25, 0x01	; 1
    46de:	9a 8f       	std	Y+26, r25	; 0x1a
    46e0:	89 8f       	std	Y+25, r24	; 0x19
    46e2:	89 8d       	ldd	r24, Y+25	; 0x19
    46e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46e6:	8c 01       	movw	r16, r24
    46e8:	c8 01       	movw	r24, r16
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <arm_forward+0x1ee>
    46ee:	8c 01       	movw	r16, r24
    46f0:	1a 8f       	std	Y+26, r17	; 0x1a
    46f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f4:	8f 89       	ldd	r24, Y+23	; 0x17
    46f6:	98 8d       	ldd	r25, Y+24	; 0x18
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	98 8f       	std	Y+24, r25	; 0x18
    46fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4700:	98 8d       	ldd	r25, Y+24	; 0x18
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	51 f7       	brne	.-44     	; 0x46da <arm_forward+0x1de>
    4706:	17 c0       	rjmp	.+46     	; 0x4736 <arm_forward+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	6b 89       	ldd	r22, Y+19	; 0x13
    470a:	7c 89       	ldd	r23, Y+20	; 0x14
    470c:	8d 89       	ldd	r24, Y+21	; 0x15
    470e:	9e 89       	ldd	r25, Y+22	; 0x16
    4710:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	98 8f       	std	Y+24, r25	; 0x18
    471a:	8f 8b       	std	Y+23, r24	; 0x17
    471c:	8f 89       	ldd	r24, Y+23	; 0x17
    471e:	98 8d       	ldd	r25, Y+24	; 0x18
    4720:	9c 8f       	std	Y+28, r25	; 0x1c
    4722:	8b 8f       	std	Y+27, r24	; 0x1b
    4724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4728:	8c 01       	movw	r16, r24
    472a:	c8 01       	movw	r24, r16
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <arm_forward+0x230>
    4730:	8c 01       	movw	r16, r24
    4732:	1c 8f       	std	Y+28, r17	; 0x1c
    4734:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_2(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
	
}
    4736:	6c 96       	adiw	r28, 0x1c	; 28
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	08 95       	ret

0000474c <arm_backward>:

void arm_backward()
{
    474c:	0f 93       	push	r16
    474e:	1f 93       	push	r17
    4750:	cf 93       	push	r28
    4752:	df 93       	push	r29
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	2e 97       	sbiw	r28, 0x0e	; 14
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
	for(ii=80;ii>0;ii--)
    4764:	80 e5       	ldi	r24, 0x50	; 80
    4766:	80 93 4f 03 	sts	0x034F, r24
    476a:	89 c0       	rjmp	.+274    	; 0x487e <arm_backward+0x132>
	{
		servo_2(ii);
    476c:	80 91 4f 03 	lds	r24, 0x034F
    4770:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <servo_2>
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	a0 e2       	ldi	r26, 0x20	; 32
    477a:	b1 e4       	ldi	r27, 0x41	; 65
    477c:	89 83       	std	Y+1, r24	; 0x01
    477e:	9a 83       	std	Y+2, r25	; 0x02
    4780:	ab 83       	std	Y+3, r26	; 0x03
    4782:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4784:	69 81       	ldd	r22, Y+1	; 0x01
    4786:	7a 81       	ldd	r23, Y+2	; 0x02
    4788:	8b 81       	ldd	r24, Y+3	; 0x03
    478a:	9c 81       	ldd	r25, Y+4	; 0x04
    478c:	26 e6       	ldi	r18, 0x66	; 102
    478e:	36 e6       	ldi	r19, 0x66	; 102
    4790:	46 e6       	ldi	r20, 0x66	; 102
    4792:	55 e4       	ldi	r21, 0x45	; 69
    4794:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	8d 83       	std	Y+5, r24	; 0x05
    479e:	9e 83       	std	Y+6, r25	; 0x06
    47a0:	af 83       	std	Y+7, r26	; 0x07
    47a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    47a4:	11 e0       	ldi	r17, 0x01	; 1
    47a6:	6d 81       	ldd	r22, Y+5	; 0x05
    47a8:	7e 81       	ldd	r23, Y+6	; 0x06
    47aa:	8f 81       	ldd	r24, Y+7	; 0x07
    47ac:	98 85       	ldd	r25, Y+8	; 0x08
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	40 e8       	ldi	r20, 0x80	; 128
    47b4:	5f e3       	ldi	r21, 0x3F	; 63
    47b6:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    47ba:	88 23       	and	r24, r24
    47bc:	0c f0       	brlt	.+2      	; 0x47c0 <arm_backward+0x74>
    47be:	10 e0       	ldi	r17, 0x00	; 0
    47c0:	11 23       	and	r17, r17
    47c2:	29 f0       	breq	.+10     	; 0x47ce <arm_backward+0x82>
		__ticks = 1;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	9a 87       	std	Y+10, r25	; 0x0a
    47ca:	89 87       	std	Y+9, r24	; 0x09
    47cc:	46 c0       	rjmp	.+140    	; 0x485a <arm_backward+0x10e>
	else if (__tmp > 65535)
    47ce:	11 e0       	ldi	r17, 0x01	; 1
    47d0:	6d 81       	ldd	r22, Y+5	; 0x05
    47d2:	7e 81       	ldd	r23, Y+6	; 0x06
    47d4:	8f 81       	ldd	r24, Y+7	; 0x07
    47d6:	98 85       	ldd	r25, Y+8	; 0x08
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	4f e7       	ldi	r20, 0x7F	; 127
    47de:	57 e4       	ldi	r21, 0x47	; 71
    47e0:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	0c f0       	brlt	.+2      	; 0x47ea <arm_backward+0x9e>
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	11 23       	and	r17, r17
    47ec:	61 f1       	breq	.+88     	; 0x4846 <arm_backward+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ee:	69 81       	ldd	r22, Y+1	; 0x01
    47f0:	7a 81       	ldd	r23, Y+2	; 0x02
    47f2:	8b 81       	ldd	r24, Y+3	; 0x03
    47f4:	9c 81       	ldd	r25, Y+4	; 0x04
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	40 e2       	ldi	r20, 0x20	; 32
    47fc:	51 e4       	ldi	r21, 0x41	; 65
    47fe:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4802:	dc 01       	movw	r26, r24
    4804:	cb 01       	movw	r24, r22
    4806:	bc 01       	movw	r22, r24
    4808:	cd 01       	movw	r24, r26
    480a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    480e:	dc 01       	movw	r26, r24
    4810:	cb 01       	movw	r24, r22
    4812:	9a 87       	std	Y+10, r25	; 0x0a
    4814:	89 87       	std	Y+9, r24	; 0x09
    4816:	12 c0       	rjmp	.+36     	; 0x483c <arm_backward+0xf0>
    4818:	80 e7       	ldi	r24, 0x70	; 112
    481a:	91 e0       	ldi	r25, 0x01	; 1
    481c:	9c 87       	std	Y+12, r25	; 0x0c
    481e:	8b 87       	std	Y+11, r24	; 0x0b
    4820:	8b 85       	ldd	r24, Y+11	; 0x0b
    4822:	9c 85       	ldd	r25, Y+12	; 0x0c
    4824:	8c 01       	movw	r16, r24
    4826:	c8 01       	movw	r24, r16
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <arm_backward+0xdc>
    482c:	8c 01       	movw	r16, r24
    482e:	1c 87       	std	Y+12, r17	; 0x0c
    4830:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4832:	89 85       	ldd	r24, Y+9	; 0x09
    4834:	9a 85       	ldd	r25, Y+10	; 0x0a
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	9a 87       	std	Y+10, r25	; 0x0a
    483a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483c:	89 85       	ldd	r24, Y+9	; 0x09
    483e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	51 f7       	brne	.-44     	; 0x4818 <arm_backward+0xcc>
    4844:	17 c0       	rjmp	.+46     	; 0x4874 <arm_backward+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4846:	6d 81       	ldd	r22, Y+5	; 0x05
    4848:	7e 81       	ldd	r23, Y+6	; 0x06
    484a:	8f 81       	ldd	r24, Y+7	; 0x07
    484c:	98 85       	ldd	r25, Y+8	; 0x08
    484e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9a 87       	std	Y+10, r25	; 0x0a
    4858:	89 87       	std	Y+9, r24	; 0x09
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	9e 87       	std	Y+14, r25	; 0x0e
    4860:	8d 87       	std	Y+13, r24	; 0x0d
    4862:	8d 85       	ldd	r24, Y+13	; 0x0d
    4864:	9e 85       	ldd	r25, Y+14	; 0x0e
    4866:	8c 01       	movw	r16, r24
    4868:	c8 01       	movw	r24, r16
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	f1 f7       	brne	.-4      	; 0x486a <arm_backward+0x11e>
    486e:	8c 01       	movw	r16, r24
    4870:	1e 87       	std	Y+14, r17	; 0x0e
    4872:	0d 87       	std	Y+13, r16	; 0x0d
	
}

void arm_backward()
{
	for(ii=80;ii>0;ii--)
    4874:	80 91 4f 03 	lds	r24, 0x034F
    4878:	81 50       	subi	r24, 0x01	; 1
    487a:	80 93 4f 03 	sts	0x034F, r24
    487e:	80 91 4f 03 	lds	r24, 0x034F
    4882:	88 23       	and	r24, r24
    4884:	09 f0       	breq	.+2      	; 0x4888 <arm_backward+0x13c>
    4886:	72 cf       	rjmp	.-284    	; 0x476c <arm_backward+0x20>
	{
		servo_2(ii);
		_delay_ms(10);
	}
	
}
    4888:	2e 96       	adiw	r28, 0x0e	; 14
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	08 95       	ret

0000489e <reset>:

void reset()
{
    489e:	0f 93       	push	r16
    48a0:	1f 93       	push	r17
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	e8 97       	sbiw	r28, 0x38	; 56
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	f8 94       	cli
    48b0:	de bf       	out	0x3e, r29	; 62
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	aa ef       	ldi	r26, 0xFA	; 250
    48bc:	b3 e4       	ldi	r27, 0x43	; 67
    48be:	89 83       	std	Y+1, r24	; 0x01
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	ab 83       	std	Y+3, r26	; 0x03
    48c4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    48c6:	69 81       	ldd	r22, Y+1	; 0x01
    48c8:	7a 81       	ldd	r23, Y+2	; 0x02
    48ca:	8b 81       	ldd	r24, Y+3	; 0x03
    48cc:	9c 81       	ldd	r25, Y+4	; 0x04
    48ce:	26 e6       	ldi	r18, 0x66	; 102
    48d0:	36 e6       	ldi	r19, 0x66	; 102
    48d2:	46 e6       	ldi	r20, 0x66	; 102
    48d4:	55 e4       	ldi	r21, 0x45	; 69
    48d6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    48da:	dc 01       	movw	r26, r24
    48dc:	cb 01       	movw	r24, r22
    48de:	8d 83       	std	Y+5, r24	; 0x05
    48e0:	9e 83       	std	Y+6, r25	; 0x06
    48e2:	af 83       	std	Y+7, r26	; 0x07
    48e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    48e6:	11 e0       	ldi	r17, 0x01	; 1
    48e8:	6d 81       	ldd	r22, Y+5	; 0x05
    48ea:	7e 81       	ldd	r23, Y+6	; 0x06
    48ec:	8f 81       	ldd	r24, Y+7	; 0x07
    48ee:	98 85       	ldd	r25, Y+8	; 0x08
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	40 e8       	ldi	r20, 0x80	; 128
    48f6:	5f e3       	ldi	r21, 0x3F	; 63
    48f8:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    48fc:	88 23       	and	r24, r24
    48fe:	0c f0       	brlt	.+2      	; 0x4902 <reset+0x64>
    4900:	10 e0       	ldi	r17, 0x00	; 0
    4902:	11 23       	and	r17, r17
    4904:	29 f0       	breq	.+10     	; 0x4910 <reset+0x72>
		__ticks = 1;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	9a 87       	std	Y+10, r25	; 0x0a
    490c:	89 87       	std	Y+9, r24	; 0x09
    490e:	46 c0       	rjmp	.+140    	; 0x499c <reset+0xfe>
	else if (__tmp > 65535)
    4910:	11 e0       	ldi	r17, 0x01	; 1
    4912:	6d 81       	ldd	r22, Y+5	; 0x05
    4914:	7e 81       	ldd	r23, Y+6	; 0x06
    4916:	8f 81       	ldd	r24, Y+7	; 0x07
    4918:	98 85       	ldd	r25, Y+8	; 0x08
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	3f ef       	ldi	r19, 0xFF	; 255
    491e:	4f e7       	ldi	r20, 0x7F	; 127
    4920:	57 e4       	ldi	r21, 0x47	; 71
    4922:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4926:	18 16       	cp	r1, r24
    4928:	0c f0       	brlt	.+2      	; 0x492c <reset+0x8e>
    492a:	10 e0       	ldi	r17, 0x00	; 0
    492c:	11 23       	and	r17, r17
    492e:	61 f1       	breq	.+88     	; 0x4988 <reset+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4930:	69 81       	ldd	r22, Y+1	; 0x01
    4932:	7a 81       	ldd	r23, Y+2	; 0x02
    4934:	8b 81       	ldd	r24, Y+3	; 0x03
    4936:	9c 81       	ldd	r25, Y+4	; 0x04
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	40 e2       	ldi	r20, 0x20	; 32
    493e:	51 e4       	ldi	r21, 0x41	; 65
    4940:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	bc 01       	movw	r22, r24
    494a:	cd 01       	movw	r24, r26
    494c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	9a 87       	std	Y+10, r25	; 0x0a
    4956:	89 87       	std	Y+9, r24	; 0x09
    4958:	12 c0       	rjmp	.+36     	; 0x497e <reset+0xe0>
    495a:	80 e7       	ldi	r24, 0x70	; 112
    495c:	91 e0       	ldi	r25, 0x01	; 1
    495e:	9c 87       	std	Y+12, r25	; 0x0c
    4960:	8b 87       	std	Y+11, r24	; 0x0b
    4962:	8b 85       	ldd	r24, Y+11	; 0x0b
    4964:	9c 85       	ldd	r25, Y+12	; 0x0c
    4966:	8c 01       	movw	r16, r24
    4968:	c8 01       	movw	r24, r16
    496a:	01 97       	sbiw	r24, 0x01	; 1
    496c:	f1 f7       	brne	.-4      	; 0x496a <reset+0xcc>
    496e:	8c 01       	movw	r16, r24
    4970:	1c 87       	std	Y+12, r17	; 0x0c
    4972:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4974:	89 85       	ldd	r24, Y+9	; 0x09
    4976:	9a 85       	ldd	r25, Y+10	; 0x0a
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	9a 87       	std	Y+10, r25	; 0x0a
    497c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    497e:	89 85       	ldd	r24, Y+9	; 0x09
    4980:	9a 85       	ldd	r25, Y+10	; 0x0a
    4982:	00 97       	sbiw	r24, 0x00	; 0
    4984:	51 f7       	brne	.-44     	; 0x495a <reset+0xbc>
    4986:	17 c0       	rjmp	.+46     	; 0x49b6 <reset+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4988:	6d 81       	ldd	r22, Y+5	; 0x05
    498a:	7e 81       	ldd	r23, Y+6	; 0x06
    498c:	8f 81       	ldd	r24, Y+7	; 0x07
    498e:	98 85       	ldd	r25, Y+8	; 0x08
    4990:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	9a 87       	std	Y+10, r25	; 0x0a
    499a:	89 87       	std	Y+9, r24	; 0x09
    499c:	89 85       	ldd	r24, Y+9	; 0x09
    499e:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a0:	9e 87       	std	Y+14, r25	; 0x0e
    49a2:	8d 87       	std	Y+13, r24	; 0x0d
    49a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a8:	8c 01       	movw	r16, r24
    49aa:	c8 01       	movw	r24, r16
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	f1 f7       	brne	.-4      	; 0x49ac <reset+0x10e>
    49b0:	8c 01       	movw	r16, r24
    49b2:	1e 87       	std	Y+14, r17	; 0x0e
    49b4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	servo_1(0);
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	0e 94 96 1b 	call	0x372c	; 0x372c <servo_1>
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	aa ef       	ldi	r26, 0xFA	; 250
    49c2:	b3 e4       	ldi	r27, 0x43	; 67
    49c4:	8f 87       	std	Y+15, r24	; 0x0f
    49c6:	98 8b       	std	Y+16, r25	; 0x10
    49c8:	a9 8b       	std	Y+17, r26	; 0x11
    49ca:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    49ce:	78 89       	ldd	r23, Y+16	; 0x10
    49d0:	89 89       	ldd	r24, Y+17	; 0x11
    49d2:	9a 89       	ldd	r25, Y+18	; 0x12
    49d4:	26 e6       	ldi	r18, 0x66	; 102
    49d6:	36 e6       	ldi	r19, 0x66	; 102
    49d8:	46 e6       	ldi	r20, 0x66	; 102
    49da:	55 e4       	ldi	r21, 0x45	; 69
    49dc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    49e0:	dc 01       	movw	r26, r24
    49e2:	cb 01       	movw	r24, r22
    49e4:	8b 8b       	std	Y+19, r24	; 0x13
    49e6:	9c 8b       	std	Y+20, r25	; 0x14
    49e8:	ad 8b       	std	Y+21, r26	; 0x15
    49ea:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    49ec:	11 e0       	ldi	r17, 0x01	; 1
    49ee:	6b 89       	ldd	r22, Y+19	; 0x13
    49f0:	7c 89       	ldd	r23, Y+20	; 0x14
    49f2:	8d 89       	ldd	r24, Y+21	; 0x15
    49f4:	9e 89       	ldd	r25, Y+22	; 0x16
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e8       	ldi	r20, 0x80	; 128
    49fc:	5f e3       	ldi	r21, 0x3F	; 63
    49fe:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4a02:	88 23       	and	r24, r24
    4a04:	0c f0       	brlt	.+2      	; 0x4a08 <reset+0x16a>
    4a06:	10 e0       	ldi	r17, 0x00	; 0
    4a08:	11 23       	and	r17, r17
    4a0a:	29 f0       	breq	.+10     	; 0x4a16 <reset+0x178>
		__ticks = 1;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	98 8f       	std	Y+24, r25	; 0x18
    4a12:	8f 8b       	std	Y+23, r24	; 0x17
    4a14:	46 c0       	rjmp	.+140    	; 0x4aa2 <reset+0x204>
	else if (__tmp > 65535)
    4a16:	11 e0       	ldi	r17, 0x01	; 1
    4a18:	6b 89       	ldd	r22, Y+19	; 0x13
    4a1a:	7c 89       	ldd	r23, Y+20	; 0x14
    4a1c:	8d 89       	ldd	r24, Y+21	; 0x15
    4a1e:	9e 89       	ldd	r25, Y+22	; 0x16
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	3f ef       	ldi	r19, 0xFF	; 255
    4a24:	4f e7       	ldi	r20, 0x7F	; 127
    4a26:	57 e4       	ldi	r21, 0x47	; 71
    4a28:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4a2c:	18 16       	cp	r1, r24
    4a2e:	0c f0       	brlt	.+2      	; 0x4a32 <reset+0x194>
    4a30:	10 e0       	ldi	r17, 0x00	; 0
    4a32:	11 23       	and	r17, r17
    4a34:	61 f1       	breq	.+88     	; 0x4a8e <reset+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a36:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a38:	78 89       	ldd	r23, Y+16	; 0x10
    4a3a:	89 89       	ldd	r24, Y+17	; 0x11
    4a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	40 e2       	ldi	r20, 0x20	; 32
    4a44:	51 e4       	ldi	r21, 0x41	; 65
    4a46:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	bc 01       	movw	r22, r24
    4a50:	cd 01       	movw	r24, r26
    4a52:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4a56:	dc 01       	movw	r26, r24
    4a58:	cb 01       	movw	r24, r22
    4a5a:	98 8f       	std	Y+24, r25	; 0x18
    4a5c:	8f 8b       	std	Y+23, r24	; 0x17
    4a5e:	12 c0       	rjmp	.+36     	; 0x4a84 <reset+0x1e6>
    4a60:	80 e7       	ldi	r24, 0x70	; 112
    4a62:	91 e0       	ldi	r25, 0x01	; 1
    4a64:	9a 8f       	std	Y+26, r25	; 0x1a
    4a66:	89 8f       	std	Y+25, r24	; 0x19
    4a68:	89 8d       	ldd	r24, Y+25	; 0x19
    4a6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a6c:	8c 01       	movw	r16, r24
    4a6e:	c8 01       	movw	r24, r16
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	f1 f7       	brne	.-4      	; 0x4a70 <reset+0x1d2>
    4a74:	8c 01       	movw	r16, r24
    4a76:	1a 8f       	std	Y+26, r17	; 0x1a
    4a78:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	98 8f       	std	Y+24, r25	; 0x18
    4a82:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a84:	8f 89       	ldd	r24, Y+23	; 0x17
    4a86:	98 8d       	ldd	r25, Y+24	; 0x18
    4a88:	00 97       	sbiw	r24, 0x00	; 0
    4a8a:	51 f7       	brne	.-44     	; 0x4a60 <reset+0x1c2>
    4a8c:	17 c0       	rjmp	.+46     	; 0x4abc <reset+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a8e:	6b 89       	ldd	r22, Y+19	; 0x13
    4a90:	7c 89       	ldd	r23, Y+20	; 0x14
    4a92:	8d 89       	ldd	r24, Y+21	; 0x15
    4a94:	9e 89       	ldd	r25, Y+22	; 0x16
    4a96:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	98 8f       	std	Y+24, r25	; 0x18
    4aa0:	8f 8b       	std	Y+23, r24	; 0x17
    4aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa6:	9c 8f       	std	Y+28, r25	; 0x1c
    4aa8:	8b 8f       	std	Y+27, r24	; 0x1b
    4aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aae:	8c 01       	movw	r16, r24
    4ab0:	c8 01       	movw	r24, r16
    4ab2:	01 97       	sbiw	r24, 0x01	; 1
    4ab4:	f1 f7       	brne	.-4      	; 0x4ab2 <reset+0x214>
    4ab6:	8c 01       	movw	r16, r24
    4ab8:	1c 8f       	std	Y+28, r17	; 0x1c
    4aba:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(500);
	servo_2(0);
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <servo_2>
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	aa ef       	ldi	r26, 0xFA	; 250
    4ac8:	b3 e4       	ldi	r27, 0x43	; 67
    4aca:	8d 8f       	std	Y+29, r24	; 0x1d
    4acc:	9e 8f       	std	Y+30, r25	; 0x1e
    4ace:	af 8f       	std	Y+31, r26	; 0x1f
    4ad0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ad2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4ad4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ad8:	98 a1       	lds	r25, 0x48
    4ada:	26 e6       	ldi	r18, 0x66	; 102
    4adc:	36 e6       	ldi	r19, 0x66	; 102
    4ade:	46 e6       	ldi	r20, 0x66	; 102
    4ae0:	55 e4       	ldi	r21, 0x45	; 69
    4ae2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	89 a3       	lds	r24, 0x59
    4aec:	9a a3       	lds	r25, 0x5a
    4aee:	ab a3       	lds	r26, 0x5b
    4af0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    4af2:	11 e0       	ldi	r17, 0x01	; 1
    4af4:	69 a1       	lds	r22, 0x49
    4af6:	7a a1       	lds	r23, 0x4a
    4af8:	8b a1       	lds	r24, 0x4b
    4afa:	9c a1       	lds	r25, 0x4c
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	40 e8       	ldi	r20, 0x80	; 128
    4b02:	5f e3       	ldi	r21, 0x3F	; 63
    4b04:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4b08:	88 23       	and	r24, r24
    4b0a:	0c f0       	brlt	.+2      	; 0x4b0e <reset+0x270>
    4b0c:	10 e0       	ldi	r17, 0x00	; 0
    4b0e:	11 23       	and	r17, r17
    4b10:	29 f0       	breq	.+10     	; 0x4b1c <reset+0x27e>
		__ticks = 1;
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	9e a3       	lds	r25, 0x5e
    4b18:	8d a3       	lds	r24, 0x5d
    4b1a:	46 c0       	rjmp	.+140    	; 0x4ba8 <reset+0x30a>
	else if (__tmp > 65535)
    4b1c:	11 e0       	ldi	r17, 0x01	; 1
    4b1e:	69 a1       	lds	r22, 0x49
    4b20:	7a a1       	lds	r23, 0x4a
    4b22:	8b a1       	lds	r24, 0x4b
    4b24:	9c a1       	lds	r25, 0x4c
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	3f ef       	ldi	r19, 0xFF	; 255
    4b2a:	4f e7       	ldi	r20, 0x7F	; 127
    4b2c:	57 e4       	ldi	r21, 0x47	; 71
    4b2e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4b32:	18 16       	cp	r1, r24
    4b34:	0c f0       	brlt	.+2      	; 0x4b38 <reset+0x29a>
    4b36:	10 e0       	ldi	r17, 0x00	; 0
    4b38:	11 23       	and	r17, r17
    4b3a:	61 f1       	breq	.+88     	; 0x4b94 <reset+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4b3e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b42:	98 a1       	lds	r25, 0x48
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	40 e2       	ldi	r20, 0x20	; 32
    4b4a:	51 e4       	ldi	r21, 0x41	; 65
    4b4c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	bc 01       	movw	r22, r24
    4b56:	cd 01       	movw	r24, r26
    4b58:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	9e a3       	lds	r25, 0x5e
    4b62:	8d a3       	lds	r24, 0x5d
    4b64:	12 c0       	rjmp	.+36     	; 0x4b8a <reset+0x2ec>
    4b66:	80 e7       	ldi	r24, 0x70	; 112
    4b68:	91 e0       	ldi	r25, 0x01	; 1
    4b6a:	98 a7       	lds	r25, 0x78
    4b6c:	8f a3       	lds	r24, 0x5f
    4b6e:	8f a1       	lds	r24, 0x4f
    4b70:	98 a5       	lds	r25, 0x68
    4b72:	8c 01       	movw	r16, r24
    4b74:	c8 01       	movw	r24, r16
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	f1 f7       	brne	.-4      	; 0x4b76 <reset+0x2d8>
    4b7a:	8c 01       	movw	r16, r24
    4b7c:	18 a7       	lds	r17, 0x78
    4b7e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b80:	8d a1       	lds	r24, 0x4d
    4b82:	9e a1       	lds	r25, 0x4e
    4b84:	01 97       	sbiw	r24, 0x01	; 1
    4b86:	9e a3       	lds	r25, 0x5e
    4b88:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b8a:	8d a1       	lds	r24, 0x4d
    4b8c:	9e a1       	lds	r25, 0x4e
    4b8e:	00 97       	sbiw	r24, 0x00	; 0
    4b90:	51 f7       	brne	.-44     	; 0x4b66 <reset+0x2c8>
    4b92:	17 c0       	rjmp	.+46     	; 0x4bc2 <reset+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b94:	69 a1       	lds	r22, 0x49
    4b96:	7a a1       	lds	r23, 0x4a
    4b98:	8b a1       	lds	r24, 0x4b
    4b9a:	9c a1       	lds	r25, 0x4c
    4b9c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	9e a3       	lds	r25, 0x5e
    4ba6:	8d a3       	lds	r24, 0x5d
    4ba8:	8d a1       	lds	r24, 0x4d
    4baa:	9e a1       	lds	r25, 0x4e
    4bac:	9a a7       	lds	r25, 0x7a
    4bae:	89 a7       	lds	r24, 0x79
    4bb0:	89 a5       	lds	r24, 0x69
    4bb2:	9a a5       	lds	r25, 0x6a
    4bb4:	8c 01       	movw	r16, r24
    4bb6:	c8 01       	movw	r24, r16
    4bb8:	01 97       	sbiw	r24, 0x01	; 1
    4bba:	f1 f7       	brne	.-4      	; 0x4bb8 <reset+0x31a>
    4bbc:	8c 01       	movw	r16, r24
    4bbe:	1a a7       	lds	r17, 0x7a
    4bc0:	09 a7       	lds	r16, 0x79
	_delay_ms(500);
	servo_3(0);
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
    4bc4:	0e 94 32 1c 	call	0x3864	; 0x3864 <servo_3>
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	aa ef       	ldi	r26, 0xFA	; 250
    4bce:	b3 e4       	ldi	r27, 0x43	; 67
    4bd0:	8b a7       	lds	r24, 0x7b
    4bd2:	9c a7       	lds	r25, 0x7c
    4bd4:	ad a7       	lds	r26, 0x7d
    4bd6:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4bd8:	6b a5       	lds	r22, 0x6b
    4bda:	7c a5       	lds	r23, 0x6c
    4bdc:	8d a5       	lds	r24, 0x6d
    4bde:	9e a5       	lds	r25, 0x6e
    4be0:	26 e6       	ldi	r18, 0x66	; 102
    4be2:	36 e6       	ldi	r19, 0x66	; 102
    4be4:	46 e6       	ldi	r20, 0x66	; 102
    4be6:	55 e4       	ldi	r21, 0x45	; 69
    4be8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	8f a7       	lds	r24, 0x7f
    4bf2:	98 ab       	sts	0x58, r25
    4bf4:	a9 ab       	sts	0x59, r26
    4bf6:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    4bf8:	11 e0       	ldi	r17, 0x01	; 1
    4bfa:	6f a5       	lds	r22, 0x6f
    4bfc:	78 a9       	sts	0x48, r23
    4bfe:	89 a9       	sts	0x49, r24
    4c00:	9a a9       	sts	0x4a, r25
    4c02:	20 e0       	ldi	r18, 0x00	; 0
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	40 e8       	ldi	r20, 0x80	; 128
    4c08:	5f e3       	ldi	r21, 0x3F	; 63
    4c0a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4c0e:	88 23       	and	r24, r24
    4c10:	0c f0       	brlt	.+2      	; 0x4c14 <reset+0x376>
    4c12:	10 e0       	ldi	r17, 0x00	; 0
    4c14:	11 23       	and	r17, r17
    4c16:	29 f0       	breq	.+10     	; 0x4c22 <reset+0x384>
		__ticks = 1;
    4c18:	81 e0       	ldi	r24, 0x01	; 1
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	9c ab       	sts	0x5c, r25
    4c1e:	8b ab       	sts	0x5b, r24
    4c20:	46 c0       	rjmp	.+140    	; 0x4cae <reset+0x410>
	else if (__tmp > 65535)
    4c22:	11 e0       	ldi	r17, 0x01	; 1
    4c24:	6f a5       	lds	r22, 0x6f
    4c26:	78 a9       	sts	0x48, r23
    4c28:	89 a9       	sts	0x49, r24
    4c2a:	9a a9       	sts	0x4a, r25
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	3f ef       	ldi	r19, 0xFF	; 255
    4c30:	4f e7       	ldi	r20, 0x7F	; 127
    4c32:	57 e4       	ldi	r21, 0x47	; 71
    4c34:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4c38:	18 16       	cp	r1, r24
    4c3a:	0c f0       	brlt	.+2      	; 0x4c3e <reset+0x3a0>
    4c3c:	10 e0       	ldi	r17, 0x00	; 0
    4c3e:	11 23       	and	r17, r17
    4c40:	61 f1       	breq	.+88     	; 0x4c9a <reset+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c42:	6b a5       	lds	r22, 0x6b
    4c44:	7c a5       	lds	r23, 0x6c
    4c46:	8d a5       	lds	r24, 0x6d
    4c48:	9e a5       	lds	r25, 0x6e
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e2       	ldi	r20, 0x20	; 32
    4c50:	51 e4       	ldi	r21, 0x41	; 65
    4c52:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	cd 01       	movw	r24, r26
    4c5e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	9c ab       	sts	0x5c, r25
    4c68:	8b ab       	sts	0x5b, r24
    4c6a:	12 c0       	rjmp	.+36     	; 0x4c90 <reset+0x3f2>
    4c6c:	80 e7       	ldi	r24, 0x70	; 112
    4c6e:	91 e0       	ldi	r25, 0x01	; 1
    4c70:	9e ab       	sts	0x5e, r25
    4c72:	8d ab       	sts	0x5d, r24
    4c74:	8d a9       	sts	0x4d, r24
    4c76:	9e a9       	sts	0x4e, r25
    4c78:	8c 01       	movw	r16, r24
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	01 97       	sbiw	r24, 0x01	; 1
    4c7e:	f1 f7       	brne	.-4      	; 0x4c7c <reset+0x3de>
    4c80:	8c 01       	movw	r16, r24
    4c82:	1e ab       	sts	0x5e, r17
    4c84:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c86:	8b a9       	sts	0x4b, r24
    4c88:	9c a9       	sts	0x4c, r25
    4c8a:	01 97       	sbiw	r24, 0x01	; 1
    4c8c:	9c ab       	sts	0x5c, r25
    4c8e:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c90:	8b a9       	sts	0x4b, r24
    4c92:	9c a9       	sts	0x4c, r25
    4c94:	00 97       	sbiw	r24, 0x00	; 0
    4c96:	51 f7       	brne	.-44     	; 0x4c6c <reset+0x3ce>
    4c98:	17 c0       	rjmp	.+46     	; 0x4cc8 <reset+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9a:	6f a5       	lds	r22, 0x6f
    4c9c:	78 a9       	sts	0x48, r23
    4c9e:	89 a9       	sts	0x49, r24
    4ca0:	9a a9       	sts	0x4a, r25
    4ca2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	9c ab       	sts	0x5c, r25
    4cac:	8b ab       	sts	0x5b, r24
    4cae:	8b a9       	sts	0x4b, r24
    4cb0:	9c a9       	sts	0x4c, r25
    4cb2:	98 af       	sts	0x78, r25
    4cb4:	8f ab       	sts	0x5f, r24
    4cb6:	8f a9       	sts	0x4f, r24
    4cb8:	98 ad       	sts	0x68, r25
    4cba:	8c 01       	movw	r16, r24
    4cbc:	c8 01       	movw	r24, r16
    4cbe:	01 97       	sbiw	r24, 0x01	; 1
    4cc0:	f1 f7       	brne	.-4      	; 0x4cbe <reset+0x420>
    4cc2:	8c 01       	movw	r16, r24
    4cc4:	18 af       	sts	0x78, r17
    4cc6:	0f ab       	sts	0x5f, r16
	_delay_ms(500);
}
    4cc8:	e8 96       	adiw	r28, 0x38	; 56
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	f8 94       	cli
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	0f be       	out	0x3f, r0	; 63
    4cd2:	cd bf       	out	0x3d, r28	; 61
    4cd4:	df 91       	pop	r29
    4cd6:	cf 91       	pop	r28
    4cd8:	1f 91       	pop	r17
    4cda:	0f 91       	pop	r16
    4cdc:	08 95       	ret

00004cde <reset1>:
void reset1()
{
    4cde:	cf 93       	push	r28
    4ce0:	df 93       	push	r29
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
	servo_1_free();
    4ce6:	0e 94 80 1c 	call	0x3900	; 0x3900 <servo_1_free>
	servo_2_free();
    4cea:	0e 94 91 1c 	call	0x3922	; 0x3922 <servo_2_free>
	servo_3_free();
    4cee:	0e 94 a2 1c 	call	0x3944	; 0x3944 <servo_3_free>
}
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	08 95       	ret

00004cf8 <defaulty>:


void defaulty()
{
    4cf8:	0f 93       	push	r16
    4cfa:	1f 93       	push	r17
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
    4d04:	6c 97       	sbiw	r28, 0x1c	; 28
    4d06:	0f b6       	in	r0, 0x3f	; 63
    4d08:	f8 94       	cli
    4d0a:	de bf       	out	0x3e, r29	; 62
    4d0c:	0f be       	out	0x3f, r0	; 63
    4d0e:	cd bf       	out	0x3d, r28	; 61
	servo_1(90);
    4d10:	8a e5       	ldi	r24, 0x5A	; 90
    4d12:	0e 94 96 1b 	call	0x372c	; 0x372c <servo_1>
    4d16:	80 e0       	ldi	r24, 0x00	; 0
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	a6 e9       	ldi	r26, 0x96	; 150
    4d1c:	b3 e4       	ldi	r27, 0x43	; 67
    4d1e:	89 83       	std	Y+1, r24	; 0x01
    4d20:	9a 83       	std	Y+2, r25	; 0x02
    4d22:	ab 83       	std	Y+3, r26	; 0x03
    4d24:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d26:	69 81       	ldd	r22, Y+1	; 0x01
    4d28:	7a 81       	ldd	r23, Y+2	; 0x02
    4d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d2e:	26 e6       	ldi	r18, 0x66	; 102
    4d30:	36 e6       	ldi	r19, 0x66	; 102
    4d32:	46 e6       	ldi	r20, 0x66	; 102
    4d34:	55 e4       	ldi	r21, 0x45	; 69
    4d36:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	8d 83       	std	Y+5, r24	; 0x05
    4d40:	9e 83       	std	Y+6, r25	; 0x06
    4d42:	af 83       	std	Y+7, r26	; 0x07
    4d44:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4d46:	11 e0       	ldi	r17, 0x01	; 1
    4d48:	6d 81       	ldd	r22, Y+5	; 0x05
    4d4a:	7e 81       	ldd	r23, Y+6	; 0x06
    4d4c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d4e:	98 85       	ldd	r25, Y+8	; 0x08
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e8       	ldi	r20, 0x80	; 128
    4d56:	5f e3       	ldi	r21, 0x3F	; 63
    4d58:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4d5c:	88 23       	and	r24, r24
    4d5e:	0c f0       	brlt	.+2      	; 0x4d62 <defaulty+0x6a>
    4d60:	10 e0       	ldi	r17, 0x00	; 0
    4d62:	11 23       	and	r17, r17
    4d64:	29 f0       	breq	.+10     	; 0x4d70 <defaulty+0x78>
		__ticks = 1;
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	9a 87       	std	Y+10, r25	; 0x0a
    4d6c:	89 87       	std	Y+9, r24	; 0x09
    4d6e:	46 c0       	rjmp	.+140    	; 0x4dfc <defaulty+0x104>
	else if (__tmp > 65535)
    4d70:	11 e0       	ldi	r17, 0x01	; 1
    4d72:	6d 81       	ldd	r22, Y+5	; 0x05
    4d74:	7e 81       	ldd	r23, Y+6	; 0x06
    4d76:	8f 81       	ldd	r24, Y+7	; 0x07
    4d78:	98 85       	ldd	r25, Y+8	; 0x08
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	3f ef       	ldi	r19, 0xFF	; 255
    4d7e:	4f e7       	ldi	r20, 0x7F	; 127
    4d80:	57 e4       	ldi	r21, 0x47	; 71
    4d82:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4d86:	18 16       	cp	r1, r24
    4d88:	0c f0       	brlt	.+2      	; 0x4d8c <defaulty+0x94>
    4d8a:	10 e0       	ldi	r17, 0x00	; 0
    4d8c:	11 23       	and	r17, r17
    4d8e:	61 f1       	breq	.+88     	; 0x4de8 <defaulty+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d90:	69 81       	ldd	r22, Y+1	; 0x01
    4d92:	7a 81       	ldd	r23, Y+2	; 0x02
    4d94:	8b 81       	ldd	r24, Y+3	; 0x03
    4d96:	9c 81       	ldd	r25, Y+4	; 0x04
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	40 e2       	ldi	r20, 0x20	; 32
    4d9e:	51 e4       	ldi	r21, 0x41	; 65
    4da0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4da4:	dc 01       	movw	r26, r24
    4da6:	cb 01       	movw	r24, r22
    4da8:	bc 01       	movw	r22, r24
    4daa:	cd 01       	movw	r24, r26
    4dac:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	9a 87       	std	Y+10, r25	; 0x0a
    4db6:	89 87       	std	Y+9, r24	; 0x09
    4db8:	12 c0       	rjmp	.+36     	; 0x4dde <defaulty+0xe6>
    4dba:	80 e7       	ldi	r24, 0x70	; 112
    4dbc:	91 e0       	ldi	r25, 0x01	; 1
    4dbe:	9c 87       	std	Y+12, r25	; 0x0c
    4dc0:	8b 87       	std	Y+11, r24	; 0x0b
    4dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dc6:	8c 01       	movw	r16, r24
    4dc8:	c8 01       	movw	r24, r16
    4dca:	01 97       	sbiw	r24, 0x01	; 1
    4dcc:	f1 f7       	brne	.-4      	; 0x4dca <defaulty+0xd2>
    4dce:	8c 01       	movw	r16, r24
    4dd0:	1c 87       	std	Y+12, r17	; 0x0c
    4dd2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd4:	89 85       	ldd	r24, Y+9	; 0x09
    4dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	9a 87       	std	Y+10, r25	; 0x0a
    4ddc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dde:	89 85       	ldd	r24, Y+9	; 0x09
    4de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de2:	00 97       	sbiw	r24, 0x00	; 0
    4de4:	51 f7       	brne	.-44     	; 0x4dba <defaulty+0xc2>
    4de6:	17 c0       	rjmp	.+46     	; 0x4e16 <defaulty+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de8:	6d 81       	ldd	r22, Y+5	; 0x05
    4dea:	7e 81       	ldd	r23, Y+6	; 0x06
    4dec:	8f 81       	ldd	r24, Y+7	; 0x07
    4dee:	98 85       	ldd	r25, Y+8	; 0x08
    4df0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4df4:	dc 01       	movw	r26, r24
    4df6:	cb 01       	movw	r24, r22
    4df8:	9a 87       	std	Y+10, r25	; 0x0a
    4dfa:	89 87       	std	Y+9, r24	; 0x09
    4dfc:	89 85       	ldd	r24, Y+9	; 0x09
    4dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e00:	9e 87       	std	Y+14, r25	; 0x0e
    4e02:	8d 87       	std	Y+13, r24	; 0x0d
    4e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e08:	8c 01       	movw	r16, r24
    4e0a:	c8 01       	movw	r24, r16
    4e0c:	01 97       	sbiw	r24, 0x01	; 1
    4e0e:	f1 f7       	brne	.-4      	; 0x4e0c <defaulty+0x114>
    4e10:	8c 01       	movw	r16, r24
    4e12:	1e 87       	std	Y+14, r17	; 0x0e
    4e14:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	servo_2(0);
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <servo_2>
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	a6 e9       	ldi	r26, 0x96	; 150
    4e22:	b3 e4       	ldi	r27, 0x43	; 67
    4e24:	8f 87       	std	Y+15, r24	; 0x0f
    4e26:	98 8b       	std	Y+16, r25	; 0x10
    4e28:	a9 8b       	std	Y+17, r26	; 0x11
    4e2a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4e2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e2e:	78 89       	ldd	r23, Y+16	; 0x10
    4e30:	89 89       	ldd	r24, Y+17	; 0x11
    4e32:	9a 89       	ldd	r25, Y+18	; 0x12
    4e34:	26 e6       	ldi	r18, 0x66	; 102
    4e36:	36 e6       	ldi	r19, 0x66	; 102
    4e38:	46 e6       	ldi	r20, 0x66	; 102
    4e3a:	55 e4       	ldi	r21, 0x45	; 69
    4e3c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4e40:	dc 01       	movw	r26, r24
    4e42:	cb 01       	movw	r24, r22
    4e44:	8b 8b       	std	Y+19, r24	; 0x13
    4e46:	9c 8b       	std	Y+20, r25	; 0x14
    4e48:	ad 8b       	std	Y+21, r26	; 0x15
    4e4a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4e4c:	11 e0       	ldi	r17, 0x01	; 1
    4e4e:	6b 89       	ldd	r22, Y+19	; 0x13
    4e50:	7c 89       	ldd	r23, Y+20	; 0x14
    4e52:	8d 89       	ldd	r24, Y+21	; 0x15
    4e54:	9e 89       	ldd	r25, Y+22	; 0x16
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	40 e8       	ldi	r20, 0x80	; 128
    4e5c:	5f e3       	ldi	r21, 0x3F	; 63
    4e5e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4e62:	88 23       	and	r24, r24
    4e64:	0c f0       	brlt	.+2      	; 0x4e68 <defaulty+0x170>
    4e66:	10 e0       	ldi	r17, 0x00	; 0
    4e68:	11 23       	and	r17, r17
    4e6a:	29 f0       	breq	.+10     	; 0x4e76 <defaulty+0x17e>
		__ticks = 1;
    4e6c:	81 e0       	ldi	r24, 0x01	; 1
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	98 8f       	std	Y+24, r25	; 0x18
    4e72:	8f 8b       	std	Y+23, r24	; 0x17
    4e74:	46 c0       	rjmp	.+140    	; 0x4f02 <defaulty+0x20a>
	else if (__tmp > 65535)
    4e76:	11 e0       	ldi	r17, 0x01	; 1
    4e78:	6b 89       	ldd	r22, Y+19	; 0x13
    4e7a:	7c 89       	ldd	r23, Y+20	; 0x14
    4e7c:	8d 89       	ldd	r24, Y+21	; 0x15
    4e7e:	9e 89       	ldd	r25, Y+22	; 0x16
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	3f ef       	ldi	r19, 0xFF	; 255
    4e84:	4f e7       	ldi	r20, 0x7F	; 127
    4e86:	57 e4       	ldi	r21, 0x47	; 71
    4e88:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4e8c:	18 16       	cp	r1, r24
    4e8e:	0c f0       	brlt	.+2      	; 0x4e92 <defaulty+0x19a>
    4e90:	10 e0       	ldi	r17, 0x00	; 0
    4e92:	11 23       	and	r17, r17
    4e94:	61 f1       	breq	.+88     	; 0x4eee <defaulty+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e96:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e98:	78 89       	ldd	r23, Y+16	; 0x10
    4e9a:	89 89       	ldd	r24, Y+17	; 0x11
    4e9c:	9a 89       	ldd	r25, Y+18	; 0x12
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	40 e2       	ldi	r20, 0x20	; 32
    4ea4:	51 e4       	ldi	r21, 0x41	; 65
    4ea6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	bc 01       	movw	r22, r24
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	98 8f       	std	Y+24, r25	; 0x18
    4ebc:	8f 8b       	std	Y+23, r24	; 0x17
    4ebe:	12 c0       	rjmp	.+36     	; 0x4ee4 <defaulty+0x1ec>
    4ec0:	80 e7       	ldi	r24, 0x70	; 112
    4ec2:	91 e0       	ldi	r25, 0x01	; 1
    4ec4:	9a 8f       	std	Y+26, r25	; 0x1a
    4ec6:	89 8f       	std	Y+25, r24	; 0x19
    4ec8:	89 8d       	ldd	r24, Y+25	; 0x19
    4eca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ecc:	8c 01       	movw	r16, r24
    4ece:	c8 01       	movw	r24, r16
    4ed0:	01 97       	sbiw	r24, 0x01	; 1
    4ed2:	f1 f7       	brne	.-4      	; 0x4ed0 <defaulty+0x1d8>
    4ed4:	8c 01       	movw	r16, r24
    4ed6:	1a 8f       	std	Y+26, r17	; 0x1a
    4ed8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eda:	8f 89       	ldd	r24, Y+23	; 0x17
    4edc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ede:	01 97       	sbiw	r24, 0x01	; 1
    4ee0:	98 8f       	std	Y+24, r25	; 0x18
    4ee2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee8:	00 97       	sbiw	r24, 0x00	; 0
    4eea:	51 f7       	brne	.-44     	; 0x4ec0 <defaulty+0x1c8>
    4eec:	17 c0       	rjmp	.+46     	; 0x4f1c <defaulty+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eee:	6b 89       	ldd	r22, Y+19	; 0x13
    4ef0:	7c 89       	ldd	r23, Y+20	; 0x14
    4ef2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ef4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ef6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4efa:	dc 01       	movw	r26, r24
    4efc:	cb 01       	movw	r24, r22
    4efe:	98 8f       	std	Y+24, r25	; 0x18
    4f00:	8f 8b       	std	Y+23, r24	; 0x17
    4f02:	8f 89       	ldd	r24, Y+23	; 0x17
    4f04:	98 8d       	ldd	r25, Y+24	; 0x18
    4f06:	9c 8f       	std	Y+28, r25	; 0x1c
    4f08:	8b 8f       	std	Y+27, r24	; 0x1b
    4f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f0e:	8c 01       	movw	r16, r24
    4f10:	c8 01       	movw	r24, r16
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	f1 f7       	brne	.-4      	; 0x4f12 <defaulty+0x21a>
    4f16:	8c 01       	movw	r16, r24
    4f18:	1c 8f       	std	Y+28, r17	; 0x1c
    4f1a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
}
    4f1c:	6c 96       	adiw	r28, 0x1c	; 28
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	df 91       	pop	r29
    4f2a:	cf 91       	pop	r28
    4f2c:	1f 91       	pop	r17
    4f2e:	0f 91       	pop	r16
    4f30:	08 95       	ret

00004f32 <left_cycle>:
void left_cycle()
{
    4f32:	0f 93       	push	r16
    4f34:	1f 93       	push	r17
    4f36:	cf 93       	push	r28
    4f38:	df 93       	push	r29
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	c6 54       	subi	r28, 0x46	; 70
    4f40:	d0 40       	sbci	r29, 0x00	; 0
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
	
	gripper_open();
    4f4c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <gripper_open>
    4f50:	80 e0       	ldi	r24, 0x00	; 0
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	a6 e9       	ldi	r26, 0x96	; 150
    4f56:	b3 e4       	ldi	r27, 0x43	; 67
    4f58:	89 83       	std	Y+1, r24	; 0x01
    4f5a:	9a 83       	std	Y+2, r25	; 0x02
    4f5c:	ab 83       	std	Y+3, r26	; 0x03
    4f5e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4f60:	69 81       	ldd	r22, Y+1	; 0x01
    4f62:	7a 81       	ldd	r23, Y+2	; 0x02
    4f64:	8b 81       	ldd	r24, Y+3	; 0x03
    4f66:	9c 81       	ldd	r25, Y+4	; 0x04
    4f68:	26 e6       	ldi	r18, 0x66	; 102
    4f6a:	36 e6       	ldi	r19, 0x66	; 102
    4f6c:	46 e6       	ldi	r20, 0x66	; 102
    4f6e:	55 e4       	ldi	r21, 0x45	; 69
    4f70:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4f74:	dc 01       	movw	r26, r24
    4f76:	cb 01       	movw	r24, r22
    4f78:	8d 83       	std	Y+5, r24	; 0x05
    4f7a:	9e 83       	std	Y+6, r25	; 0x06
    4f7c:	af 83       	std	Y+7, r26	; 0x07
    4f7e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4f80:	11 e0       	ldi	r17, 0x01	; 1
    4f82:	6d 81       	ldd	r22, Y+5	; 0x05
    4f84:	7e 81       	ldd	r23, Y+6	; 0x06
    4f86:	8f 81       	ldd	r24, Y+7	; 0x07
    4f88:	98 85       	ldd	r25, Y+8	; 0x08
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	40 e8       	ldi	r20, 0x80	; 128
    4f90:	5f e3       	ldi	r21, 0x3F	; 63
    4f92:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    4f96:	88 23       	and	r24, r24
    4f98:	0c f0       	brlt	.+2      	; 0x4f9c <left_cycle+0x6a>
    4f9a:	10 e0       	ldi	r17, 0x00	; 0
    4f9c:	11 23       	and	r17, r17
    4f9e:	29 f0       	breq	.+10     	; 0x4faa <left_cycle+0x78>
		__ticks = 1;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9a 87       	std	Y+10, r25	; 0x0a
    4fa6:	89 87       	std	Y+9, r24	; 0x09
    4fa8:	46 c0       	rjmp	.+140    	; 0x5036 <left_cycle+0x104>
	else if (__tmp > 65535)
    4faa:	11 e0       	ldi	r17, 0x01	; 1
    4fac:	6d 81       	ldd	r22, Y+5	; 0x05
    4fae:	7e 81       	ldd	r23, Y+6	; 0x06
    4fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    4fb2:	98 85       	ldd	r25, Y+8	; 0x08
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	3f ef       	ldi	r19, 0xFF	; 255
    4fb8:	4f e7       	ldi	r20, 0x7F	; 127
    4fba:	57 e4       	ldi	r21, 0x47	; 71
    4fbc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    4fc0:	18 16       	cp	r1, r24
    4fc2:	0c f0       	brlt	.+2      	; 0x4fc6 <left_cycle+0x94>
    4fc4:	10 e0       	ldi	r17, 0x00	; 0
    4fc6:	11 23       	and	r17, r17
    4fc8:	61 f1       	breq	.+88     	; 0x5022 <left_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fca:	69 81       	ldd	r22, Y+1	; 0x01
    4fcc:	7a 81       	ldd	r23, Y+2	; 0x02
    4fce:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	40 e2       	ldi	r20, 0x20	; 32
    4fd8:	51 e4       	ldi	r21, 0x41	; 65
    4fda:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	bc 01       	movw	r22, r24
    4fe4:	cd 01       	movw	r24, r26
    4fe6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    4fea:	dc 01       	movw	r26, r24
    4fec:	cb 01       	movw	r24, r22
    4fee:	9a 87       	std	Y+10, r25	; 0x0a
    4ff0:	89 87       	std	Y+9, r24	; 0x09
    4ff2:	12 c0       	rjmp	.+36     	; 0x5018 <left_cycle+0xe6>
    4ff4:	80 e7       	ldi	r24, 0x70	; 112
    4ff6:	91 e0       	ldi	r25, 0x01	; 1
    4ff8:	9c 87       	std	Y+12, r25	; 0x0c
    4ffa:	8b 87       	std	Y+11, r24	; 0x0b
    4ffc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ffe:	9c 85       	ldd	r25, Y+12	; 0x0c
    5000:	8c 01       	movw	r16, r24
    5002:	c8 01       	movw	r24, r16
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	f1 f7       	brne	.-4      	; 0x5004 <left_cycle+0xd2>
    5008:	8c 01       	movw	r16, r24
    500a:	1c 87       	std	Y+12, r17	; 0x0c
    500c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    500e:	89 85       	ldd	r24, Y+9	; 0x09
    5010:	9a 85       	ldd	r25, Y+10	; 0x0a
    5012:	01 97       	sbiw	r24, 0x01	; 1
    5014:	9a 87       	std	Y+10, r25	; 0x0a
    5016:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5018:	89 85       	ldd	r24, Y+9	; 0x09
    501a:	9a 85       	ldd	r25, Y+10	; 0x0a
    501c:	00 97       	sbiw	r24, 0x00	; 0
    501e:	51 f7       	brne	.-44     	; 0x4ff4 <left_cycle+0xc2>
    5020:	17 c0       	rjmp	.+46     	; 0x5050 <left_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5022:	6d 81       	ldd	r22, Y+5	; 0x05
    5024:	7e 81       	ldd	r23, Y+6	; 0x06
    5026:	8f 81       	ldd	r24, Y+7	; 0x07
    5028:	98 85       	ldd	r25, Y+8	; 0x08
    502a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	9a 87       	std	Y+10, r25	; 0x0a
    5034:	89 87       	std	Y+9, r24	; 0x09
    5036:	89 85       	ldd	r24, Y+9	; 0x09
    5038:	9a 85       	ldd	r25, Y+10	; 0x0a
    503a:	9e 87       	std	Y+14, r25	; 0x0e
    503c:	8d 87       	std	Y+13, r24	; 0x0d
    503e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5040:	9e 85       	ldd	r25, Y+14	; 0x0e
    5042:	8c 01       	movw	r16, r24
    5044:	f8 01       	movw	r30, r16
    5046:	31 97       	sbiw	r30, 0x01	; 1
    5048:	f1 f7       	brne	.-4      	; 0x5046 <left_cycle+0x114>
    504a:	8f 01       	movw	r16, r30
    504c:	1e 87       	std	Y+14, r17	; 0x0e
    504e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_left();
    5050:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <arm_rotate_left>
    5054:	80 e0       	ldi	r24, 0x00	; 0
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	a6 e9       	ldi	r26, 0x96	; 150
    505a:	b3 e4       	ldi	r27, 0x43	; 67
    505c:	8f 87       	std	Y+15, r24	; 0x0f
    505e:	98 8b       	std	Y+16, r25	; 0x10
    5060:	a9 8b       	std	Y+17, r26	; 0x11
    5062:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5064:	6f 85       	ldd	r22, Y+15	; 0x0f
    5066:	78 89       	ldd	r23, Y+16	; 0x10
    5068:	89 89       	ldd	r24, Y+17	; 0x11
    506a:	9a 89       	ldd	r25, Y+18	; 0x12
    506c:	26 e6       	ldi	r18, 0x66	; 102
    506e:	36 e6       	ldi	r19, 0x66	; 102
    5070:	46 e6       	ldi	r20, 0x66	; 102
    5072:	55 e4       	ldi	r21, 0x45	; 69
    5074:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	8b 8b       	std	Y+19, r24	; 0x13
    507e:	9c 8b       	std	Y+20, r25	; 0x14
    5080:	ad 8b       	std	Y+21, r26	; 0x15
    5082:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5084:	11 e0       	ldi	r17, 0x01	; 1
    5086:	6b 89       	ldd	r22, Y+19	; 0x13
    5088:	7c 89       	ldd	r23, Y+20	; 0x14
    508a:	8d 89       	ldd	r24, Y+21	; 0x15
    508c:	9e 89       	ldd	r25, Y+22	; 0x16
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	40 e8       	ldi	r20, 0x80	; 128
    5094:	5f e3       	ldi	r21, 0x3F	; 63
    5096:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    509a:	88 23       	and	r24, r24
    509c:	0c f0       	brlt	.+2      	; 0x50a0 <left_cycle+0x16e>
    509e:	10 e0       	ldi	r17, 0x00	; 0
    50a0:	11 23       	and	r17, r17
    50a2:	29 f0       	breq	.+10     	; 0x50ae <left_cycle+0x17c>
		__ticks = 1;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	98 8f       	std	Y+24, r25	; 0x18
    50aa:	8f 8b       	std	Y+23, r24	; 0x17
    50ac:	46 c0       	rjmp	.+140    	; 0x513a <left_cycle+0x208>
	else if (__tmp > 65535)
    50ae:	11 e0       	ldi	r17, 0x01	; 1
    50b0:	6b 89       	ldd	r22, Y+19	; 0x13
    50b2:	7c 89       	ldd	r23, Y+20	; 0x14
    50b4:	8d 89       	ldd	r24, Y+21	; 0x15
    50b6:	9e 89       	ldd	r25, Y+22	; 0x16
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	3f ef       	ldi	r19, 0xFF	; 255
    50bc:	4f e7       	ldi	r20, 0x7F	; 127
    50be:	57 e4       	ldi	r21, 0x47	; 71
    50c0:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    50c4:	18 16       	cp	r1, r24
    50c6:	0c f0       	brlt	.+2      	; 0x50ca <left_cycle+0x198>
    50c8:	10 e0       	ldi	r17, 0x00	; 0
    50ca:	11 23       	and	r17, r17
    50cc:	61 f1       	breq	.+88     	; 0x5126 <left_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    50d0:	78 89       	ldd	r23, Y+16	; 0x10
    50d2:	89 89       	ldd	r24, Y+17	; 0x11
    50d4:	9a 89       	ldd	r25, Y+18	; 0x12
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	40 e2       	ldi	r20, 0x20	; 32
    50dc:	51 e4       	ldi	r21, 0x41	; 65
    50de:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	bc 01       	movw	r22, r24
    50e8:	cd 01       	movw	r24, r26
    50ea:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	98 8f       	std	Y+24, r25	; 0x18
    50f4:	8f 8b       	std	Y+23, r24	; 0x17
    50f6:	12 c0       	rjmp	.+36     	; 0x511c <left_cycle+0x1ea>
    50f8:	80 e7       	ldi	r24, 0x70	; 112
    50fa:	91 e0       	ldi	r25, 0x01	; 1
    50fc:	9a 8f       	std	Y+26, r25	; 0x1a
    50fe:	89 8f       	std	Y+25, r24	; 0x19
    5100:	89 8d       	ldd	r24, Y+25	; 0x19
    5102:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5104:	8c 01       	movw	r16, r24
    5106:	c8 01       	movw	r24, r16
    5108:	01 97       	sbiw	r24, 0x01	; 1
    510a:	f1 f7       	brne	.-4      	; 0x5108 <left_cycle+0x1d6>
    510c:	8c 01       	movw	r16, r24
    510e:	1a 8f       	std	Y+26, r17	; 0x1a
    5110:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5112:	8f 89       	ldd	r24, Y+23	; 0x17
    5114:	98 8d       	ldd	r25, Y+24	; 0x18
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	98 8f       	std	Y+24, r25	; 0x18
    511a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    511c:	8f 89       	ldd	r24, Y+23	; 0x17
    511e:	98 8d       	ldd	r25, Y+24	; 0x18
    5120:	00 97       	sbiw	r24, 0x00	; 0
    5122:	51 f7       	brne	.-44     	; 0x50f8 <left_cycle+0x1c6>
    5124:	17 c0       	rjmp	.+46     	; 0x5154 <left_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5126:	6b 89       	ldd	r22, Y+19	; 0x13
    5128:	7c 89       	ldd	r23, Y+20	; 0x14
    512a:	8d 89       	ldd	r24, Y+21	; 0x15
    512c:	9e 89       	ldd	r25, Y+22	; 0x16
    512e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	98 8f       	std	Y+24, r25	; 0x18
    5138:	8f 8b       	std	Y+23, r24	; 0x17
    513a:	8f 89       	ldd	r24, Y+23	; 0x17
    513c:	98 8d       	ldd	r25, Y+24	; 0x18
    513e:	9c 8f       	std	Y+28, r25	; 0x1c
    5140:	8b 8f       	std	Y+27, r24	; 0x1b
    5142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5146:	8c 01       	movw	r16, r24
    5148:	f8 01       	movw	r30, r16
    514a:	31 97       	sbiw	r30, 0x01	; 1
    514c:	f1 f7       	brne	.-4      	; 0x514a <left_cycle+0x218>
    514e:	8f 01       	movw	r16, r30
    5150:	1c 8f       	std	Y+28, r17	; 0x1c
    5152:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    5154:	0e 94 7e 22 	call	0x44fc	; 0x44fc <arm_forward>
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	a6 e9       	ldi	r26, 0x96	; 150
    515e:	b3 e4       	ldi	r27, 0x43	; 67
    5160:	8d 8f       	std	Y+29, r24	; 0x1d
    5162:	9e 8f       	std	Y+30, r25	; 0x1e
    5164:	af 8f       	std	Y+31, r26	; 0x1f
    5166:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5168:	6d 8d       	ldd	r22, Y+29	; 0x1d
    516a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    516c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    516e:	98 a1       	lds	r25, 0x48
    5170:	26 e6       	ldi	r18, 0x66	; 102
    5172:	36 e6       	ldi	r19, 0x66	; 102
    5174:	46 e6       	ldi	r20, 0x66	; 102
    5176:	55 e4       	ldi	r21, 0x45	; 69
    5178:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    517c:	dc 01       	movw	r26, r24
    517e:	cb 01       	movw	r24, r22
    5180:	89 a3       	lds	r24, 0x59
    5182:	9a a3       	lds	r25, 0x5a
    5184:	ab a3       	lds	r26, 0x5b
    5186:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5188:	11 e0       	ldi	r17, 0x01	; 1
    518a:	69 a1       	lds	r22, 0x49
    518c:	7a a1       	lds	r23, 0x4a
    518e:	8b a1       	lds	r24, 0x4b
    5190:	9c a1       	lds	r25, 0x4c
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e8       	ldi	r20, 0x80	; 128
    5198:	5f e3       	ldi	r21, 0x3F	; 63
    519a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    519e:	88 23       	and	r24, r24
    51a0:	0c f0       	brlt	.+2      	; 0x51a4 <left_cycle+0x272>
    51a2:	10 e0       	ldi	r17, 0x00	; 0
    51a4:	11 23       	and	r17, r17
    51a6:	29 f0       	breq	.+10     	; 0x51b2 <left_cycle+0x280>
		__ticks = 1;
    51a8:	81 e0       	ldi	r24, 0x01	; 1
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	9e a3       	lds	r25, 0x5e
    51ae:	8d a3       	lds	r24, 0x5d
    51b0:	46 c0       	rjmp	.+140    	; 0x523e <left_cycle+0x30c>
	else if (__tmp > 65535)
    51b2:	11 e0       	ldi	r17, 0x01	; 1
    51b4:	69 a1       	lds	r22, 0x49
    51b6:	7a a1       	lds	r23, 0x4a
    51b8:	8b a1       	lds	r24, 0x4b
    51ba:	9c a1       	lds	r25, 0x4c
    51bc:	20 e0       	ldi	r18, 0x00	; 0
    51be:	3f ef       	ldi	r19, 0xFF	; 255
    51c0:	4f e7       	ldi	r20, 0x7F	; 127
    51c2:	57 e4       	ldi	r21, 0x47	; 71
    51c4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    51c8:	18 16       	cp	r1, r24
    51ca:	0c f0       	brlt	.+2      	; 0x51ce <left_cycle+0x29c>
    51cc:	10 e0       	ldi	r17, 0x00	; 0
    51ce:	11 23       	and	r17, r17
    51d0:	61 f1       	breq	.+88     	; 0x522a <left_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    51d4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    51d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51d8:	98 a1       	lds	r25, 0x48
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	40 e2       	ldi	r20, 0x20	; 32
    51e0:	51 e4       	ldi	r21, 0x41	; 65
    51e2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    51e6:	dc 01       	movw	r26, r24
    51e8:	cb 01       	movw	r24, r22
    51ea:	bc 01       	movw	r22, r24
    51ec:	cd 01       	movw	r24, r26
    51ee:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	9e a3       	lds	r25, 0x5e
    51f8:	8d a3       	lds	r24, 0x5d
    51fa:	12 c0       	rjmp	.+36     	; 0x5220 <left_cycle+0x2ee>
    51fc:	80 e7       	ldi	r24, 0x70	; 112
    51fe:	91 e0       	ldi	r25, 0x01	; 1
    5200:	98 a7       	lds	r25, 0x78
    5202:	8f a3       	lds	r24, 0x5f
    5204:	8f a1       	lds	r24, 0x4f
    5206:	98 a5       	lds	r25, 0x68
    5208:	8c 01       	movw	r16, r24
    520a:	c8 01       	movw	r24, r16
    520c:	01 97       	sbiw	r24, 0x01	; 1
    520e:	f1 f7       	brne	.-4      	; 0x520c <left_cycle+0x2da>
    5210:	8c 01       	movw	r16, r24
    5212:	18 a7       	lds	r17, 0x78
    5214:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5216:	8d a1       	lds	r24, 0x4d
    5218:	9e a1       	lds	r25, 0x4e
    521a:	01 97       	sbiw	r24, 0x01	; 1
    521c:	9e a3       	lds	r25, 0x5e
    521e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5220:	8d a1       	lds	r24, 0x4d
    5222:	9e a1       	lds	r25, 0x4e
    5224:	00 97       	sbiw	r24, 0x00	; 0
    5226:	51 f7       	brne	.-44     	; 0x51fc <left_cycle+0x2ca>
    5228:	17 c0       	rjmp	.+46     	; 0x5258 <left_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    522a:	69 a1       	lds	r22, 0x49
    522c:	7a a1       	lds	r23, 0x4a
    522e:	8b a1       	lds	r24, 0x4b
    5230:	9c a1       	lds	r25, 0x4c
    5232:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5236:	dc 01       	movw	r26, r24
    5238:	cb 01       	movw	r24, r22
    523a:	9e a3       	lds	r25, 0x5e
    523c:	8d a3       	lds	r24, 0x5d
    523e:	8d a1       	lds	r24, 0x4d
    5240:	9e a1       	lds	r25, 0x4e
    5242:	9a a7       	lds	r25, 0x7a
    5244:	89 a7       	lds	r24, 0x79
    5246:	89 a5       	lds	r24, 0x69
    5248:	9a a5       	lds	r25, 0x6a
    524a:	8c 01       	movw	r16, r24
    524c:	f8 01       	movw	r30, r16
    524e:	31 97       	sbiw	r30, 0x01	; 1
    5250:	f1 f7       	brne	.-4      	; 0x524e <left_cycle+0x31c>
    5252:	8f 01       	movw	r16, r30
    5254:	1a a7       	lds	r17, 0x7a
    5256:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    5258:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_close>
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	a6 e9       	ldi	r26, 0x96	; 150
    5262:	b3 e4       	ldi	r27, 0x43	; 67
    5264:	8b a7       	lds	r24, 0x7b
    5266:	9c a7       	lds	r25, 0x7c
    5268:	ad a7       	lds	r26, 0x7d
    526a:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    526c:	6b a5       	lds	r22, 0x6b
    526e:	7c a5       	lds	r23, 0x6c
    5270:	8d a5       	lds	r24, 0x6d
    5272:	9e a5       	lds	r25, 0x6e
    5274:	26 e6       	ldi	r18, 0x66	; 102
    5276:	36 e6       	ldi	r19, 0x66	; 102
    5278:	46 e6       	ldi	r20, 0x66	; 102
    527a:	55 e4       	ldi	r21, 0x45	; 69
    527c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5280:	dc 01       	movw	r26, r24
    5282:	cb 01       	movw	r24, r22
    5284:	8f a7       	lds	r24, 0x7f
    5286:	98 ab       	sts	0x58, r25
    5288:	a9 ab       	sts	0x59, r26
    528a:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    528c:	11 e0       	ldi	r17, 0x01	; 1
    528e:	6f a5       	lds	r22, 0x6f
    5290:	78 a9       	sts	0x48, r23
    5292:	89 a9       	sts	0x49, r24
    5294:	9a a9       	sts	0x4a, r25
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	40 e8       	ldi	r20, 0x80	; 128
    529c:	5f e3       	ldi	r21, 0x3F	; 63
    529e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    52a2:	88 23       	and	r24, r24
    52a4:	0c f0       	brlt	.+2      	; 0x52a8 <left_cycle+0x376>
    52a6:	10 e0       	ldi	r17, 0x00	; 0
    52a8:	11 23       	and	r17, r17
    52aa:	29 f0       	breq	.+10     	; 0x52b6 <left_cycle+0x384>
		__ticks = 1;
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	9c ab       	sts	0x5c, r25
    52b2:	8b ab       	sts	0x5b, r24
    52b4:	46 c0       	rjmp	.+140    	; 0x5342 <left_cycle+0x410>
	else if (__tmp > 65535)
    52b6:	11 e0       	ldi	r17, 0x01	; 1
    52b8:	6f a5       	lds	r22, 0x6f
    52ba:	78 a9       	sts	0x48, r23
    52bc:	89 a9       	sts	0x49, r24
    52be:	9a a9       	sts	0x4a, r25
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	3f ef       	ldi	r19, 0xFF	; 255
    52c4:	4f e7       	ldi	r20, 0x7F	; 127
    52c6:	57 e4       	ldi	r21, 0x47	; 71
    52c8:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    52cc:	18 16       	cp	r1, r24
    52ce:	0c f0       	brlt	.+2      	; 0x52d2 <left_cycle+0x3a0>
    52d0:	10 e0       	ldi	r17, 0x00	; 0
    52d2:	11 23       	and	r17, r17
    52d4:	61 f1       	breq	.+88     	; 0x532e <left_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d6:	6b a5       	lds	r22, 0x6b
    52d8:	7c a5       	lds	r23, 0x6c
    52da:	8d a5       	lds	r24, 0x6d
    52dc:	9e a5       	lds	r25, 0x6e
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	40 e2       	ldi	r20, 0x20	; 32
    52e4:	51 e4       	ldi	r21, 0x41	; 65
    52e6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    52ea:	dc 01       	movw	r26, r24
    52ec:	cb 01       	movw	r24, r22
    52ee:	bc 01       	movw	r22, r24
    52f0:	cd 01       	movw	r24, r26
    52f2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	9c ab       	sts	0x5c, r25
    52fc:	8b ab       	sts	0x5b, r24
    52fe:	12 c0       	rjmp	.+36     	; 0x5324 <left_cycle+0x3f2>
    5300:	80 e7       	ldi	r24, 0x70	; 112
    5302:	91 e0       	ldi	r25, 0x01	; 1
    5304:	9e ab       	sts	0x5e, r25
    5306:	8d ab       	sts	0x5d, r24
    5308:	8d a9       	sts	0x4d, r24
    530a:	9e a9       	sts	0x4e, r25
    530c:	8c 01       	movw	r16, r24
    530e:	c8 01       	movw	r24, r16
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	f1 f7       	brne	.-4      	; 0x5310 <left_cycle+0x3de>
    5314:	8c 01       	movw	r16, r24
    5316:	1e ab       	sts	0x5e, r17
    5318:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    531a:	8b a9       	sts	0x4b, r24
    531c:	9c a9       	sts	0x4c, r25
    531e:	01 97       	sbiw	r24, 0x01	; 1
    5320:	9c ab       	sts	0x5c, r25
    5322:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5324:	8b a9       	sts	0x4b, r24
    5326:	9c a9       	sts	0x4c, r25
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	51 f7       	brne	.-44     	; 0x5300 <left_cycle+0x3ce>
    532c:	17 c0       	rjmp	.+46     	; 0x535c <left_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    532e:	6f a5       	lds	r22, 0x6f
    5330:	78 a9       	sts	0x48, r23
    5332:	89 a9       	sts	0x49, r24
    5334:	9a a9       	sts	0x4a, r25
    5336:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    533a:	dc 01       	movw	r26, r24
    533c:	cb 01       	movw	r24, r22
    533e:	9c ab       	sts	0x5c, r25
    5340:	8b ab       	sts	0x5b, r24
    5342:	8b a9       	sts	0x4b, r24
    5344:	9c a9       	sts	0x4c, r25
    5346:	98 af       	sts	0x78, r25
    5348:	8f ab       	sts	0x5f, r24
    534a:	8f a9       	sts	0x4f, r24
    534c:	98 ad       	sts	0x68, r25
    534e:	8c 01       	movw	r16, r24
    5350:	f8 01       	movw	r30, r16
    5352:	31 97       	sbiw	r30, 0x01	; 1
    5354:	f1 f7       	brne	.-4      	; 0x5352 <left_cycle+0x420>
    5356:	8f 01       	movw	r16, r30
    5358:	18 af       	sts	0x78, r17
    535a:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    535c:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_backward>
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	a6 e9       	ldi	r26, 0x96	; 150
    5366:	b3 e4       	ldi	r27, 0x43	; 67
    5368:	89 af       	sts	0x79, r24
    536a:	9a af       	sts	0x7a, r25
    536c:	ab af       	sts	0x7b, r26
    536e:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5370:	69 ad       	sts	0x69, r22
    5372:	7a ad       	sts	0x6a, r23
    5374:	8b ad       	sts	0x6b, r24
    5376:	9c ad       	sts	0x6c, r25
    5378:	26 e6       	ldi	r18, 0x66	; 102
    537a:	36 e6       	ldi	r19, 0x66	; 102
    537c:	46 e6       	ldi	r20, 0x66	; 102
    537e:	55 e4       	ldi	r21, 0x45	; 69
    5380:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5384:	dc 01       	movw	r26, r24
    5386:	cb 01       	movw	r24, r22
    5388:	9e 01       	movw	r18, r28
    538a:	23 5c       	subi	r18, 0xC3	; 195
    538c:	3f 4f       	sbci	r19, 0xFF	; 255
    538e:	f9 01       	movw	r30, r18
    5390:	80 83       	st	Z, r24
    5392:	91 83       	std	Z+1, r25	; 0x01
    5394:	a2 83       	std	Z+2, r26	; 0x02
    5396:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5398:	11 e0       	ldi	r17, 0x01	; 1
    539a:	ce 01       	movw	r24, r28
    539c:	cd 96       	adiw	r24, 0x3d	; 61
    539e:	fc 01       	movw	r30, r24
    53a0:	60 81       	ld	r22, Z
    53a2:	71 81       	ldd	r23, Z+1	; 0x01
    53a4:	82 81       	ldd	r24, Z+2	; 0x02
    53a6:	93 81       	ldd	r25, Z+3	; 0x03
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	40 e8       	ldi	r20, 0x80	; 128
    53ae:	5f e3       	ldi	r21, 0x3F	; 63
    53b0:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    53b4:	88 23       	and	r24, r24
    53b6:	0c f0       	brlt	.+2      	; 0x53ba <left_cycle+0x488>
    53b8:	10 e0       	ldi	r17, 0x00	; 0
    53ba:	11 23       	and	r17, r17
    53bc:	49 f0       	breq	.+18     	; 0x53d0 <left_cycle+0x49e>
		__ticks = 1;
    53be:	ce 01       	movw	r24, r28
    53c0:	8f 5b       	subi	r24, 0xBF	; 191
    53c2:	9f 4f       	sbci	r25, 0xFF	; 255
    53c4:	21 e0       	ldi	r18, 0x01	; 1
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	fc 01       	movw	r30, r24
    53ca:	31 83       	std	Z+1, r19	; 0x01
    53cc:	20 83       	st	Z, r18
    53ce:	6e c0       	rjmp	.+220    	; 0x54ac <left_cycle+0x57a>
	else if (__tmp > 65535)
    53d0:	11 e0       	ldi	r17, 0x01	; 1
    53d2:	ce 01       	movw	r24, r28
    53d4:	cd 96       	adiw	r24, 0x3d	; 61
    53d6:	fc 01       	movw	r30, r24
    53d8:	60 81       	ld	r22, Z
    53da:	71 81       	ldd	r23, Z+1	; 0x01
    53dc:	82 81       	ldd	r24, Z+2	; 0x02
    53de:	93 81       	ldd	r25, Z+3	; 0x03
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	3f ef       	ldi	r19, 0xFF	; 255
    53e4:	4f e7       	ldi	r20, 0x7F	; 127
    53e6:	57 e4       	ldi	r21, 0x47	; 71
    53e8:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    53ec:	18 16       	cp	r1, r24
    53ee:	0c f0       	brlt	.+2      	; 0x53f2 <left_cycle+0x4c0>
    53f0:	10 e0       	ldi	r17, 0x00	; 0
    53f2:	11 23       	and	r17, r17
    53f4:	09 f4       	brne	.+2      	; 0x53f8 <left_cycle+0x4c6>
    53f6:	49 c0       	rjmp	.+146    	; 0x548a <left_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f8:	69 ad       	sts	0x69, r22
    53fa:	7a ad       	sts	0x6a, r23
    53fc:	8b ad       	sts	0x6b, r24
    53fe:	9c ad       	sts	0x6c, r25
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	40 e2       	ldi	r20, 0x20	; 32
    5406:	51 e4       	ldi	r21, 0x41	; 65
    5408:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	8e 01       	movw	r16, r28
    5412:	0f 5b       	subi	r16, 0xBF	; 191
    5414:	1f 4f       	sbci	r17, 0xFF	; 255
    5416:	bc 01       	movw	r22, r24
    5418:	cd 01       	movw	r24, r26
    541a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	f8 01       	movw	r30, r16
    5424:	91 83       	std	Z+1, r25	; 0x01
    5426:	80 83       	st	Z, r24
    5428:	27 c0       	rjmp	.+78     	; 0x5478 <left_cycle+0x546>
    542a:	ce 01       	movw	r24, r28
    542c:	8d 5b       	subi	r24, 0xBD	; 189
    542e:	9f 4f       	sbci	r25, 0xFF	; 255
    5430:	20 e7       	ldi	r18, 0x70	; 112
    5432:	31 e0       	ldi	r19, 0x01	; 1
    5434:	fc 01       	movw	r30, r24
    5436:	31 83       	std	Z+1, r19	; 0x01
    5438:	20 83       	st	Z, r18
    543a:	ce 01       	movw	r24, r28
    543c:	8d 5b       	subi	r24, 0xBD	; 189
    543e:	9f 4f       	sbci	r25, 0xFF	; 255
    5440:	fc 01       	movw	r30, r24
    5442:	80 81       	ld	r24, Z
    5444:	91 81       	ldd	r25, Z+1	; 0x01
    5446:	8c 01       	movw	r16, r24
    5448:	c8 01       	movw	r24, r16
    544a:	01 97       	sbiw	r24, 0x01	; 1
    544c:	f1 f7       	brne	.-4      	; 0x544a <left_cycle+0x518>
    544e:	8c 01       	movw	r16, r24
    5450:	ce 01       	movw	r24, r28
    5452:	8d 5b       	subi	r24, 0xBD	; 189
    5454:	9f 4f       	sbci	r25, 0xFF	; 255
    5456:	fc 01       	movw	r30, r24
    5458:	11 83       	std	Z+1, r17	; 0x01
    545a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    545c:	ce 01       	movw	r24, r28
    545e:	8f 5b       	subi	r24, 0xBF	; 191
    5460:	9f 4f       	sbci	r25, 0xFF	; 255
    5462:	9e 01       	movw	r18, r28
    5464:	2f 5b       	subi	r18, 0xBF	; 191
    5466:	3f 4f       	sbci	r19, 0xFF	; 255
    5468:	f9 01       	movw	r30, r18
    546a:	20 81       	ld	r18, Z
    546c:	31 81       	ldd	r19, Z+1	; 0x01
    546e:	21 50       	subi	r18, 0x01	; 1
    5470:	30 40       	sbci	r19, 0x00	; 0
    5472:	fc 01       	movw	r30, r24
    5474:	31 83       	std	Z+1, r19	; 0x01
    5476:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5478:	ce 01       	movw	r24, r28
    547a:	8f 5b       	subi	r24, 0xBF	; 191
    547c:	9f 4f       	sbci	r25, 0xFF	; 255
    547e:	fc 01       	movw	r30, r24
    5480:	80 81       	ld	r24, Z
    5482:	91 81       	ldd	r25, Z+1	; 0x01
    5484:	00 97       	sbiw	r24, 0x00	; 0
    5486:	89 f6       	brne	.-94     	; 0x542a <left_cycle+0x4f8>
    5488:	2e c0       	rjmp	.+92     	; 0x54e6 <left_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    548a:	8e 01       	movw	r16, r28
    548c:	0f 5b       	subi	r16, 0xBF	; 191
    548e:	1f 4f       	sbci	r17, 0xFF	; 255
    5490:	ce 01       	movw	r24, r28
    5492:	cd 96       	adiw	r24, 0x3d	; 61
    5494:	fc 01       	movw	r30, r24
    5496:	60 81       	ld	r22, Z
    5498:	71 81       	ldd	r23, Z+1	; 0x01
    549a:	82 81       	ldd	r24, Z+2	; 0x02
    549c:	93 81       	ldd	r25, Z+3	; 0x03
    549e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	f8 01       	movw	r30, r16
    54a8:	91 83       	std	Z+1, r25	; 0x01
    54aa:	80 83       	st	Z, r24
    54ac:	ce 01       	movw	r24, r28
    54ae:	8b 5b       	subi	r24, 0xBB	; 187
    54b0:	9f 4f       	sbci	r25, 0xFF	; 255
    54b2:	9e 01       	movw	r18, r28
    54b4:	2f 5b       	subi	r18, 0xBF	; 191
    54b6:	3f 4f       	sbci	r19, 0xFF	; 255
    54b8:	f9 01       	movw	r30, r18
    54ba:	20 81       	ld	r18, Z
    54bc:	31 81       	ldd	r19, Z+1	; 0x01
    54be:	fc 01       	movw	r30, r24
    54c0:	31 83       	std	Z+1, r19	; 0x01
    54c2:	20 83       	st	Z, r18
    54c4:	ce 01       	movw	r24, r28
    54c6:	8b 5b       	subi	r24, 0xBB	; 187
    54c8:	9f 4f       	sbci	r25, 0xFF	; 255
    54ca:	fc 01       	movw	r30, r24
    54cc:	80 81       	ld	r24, Z
    54ce:	91 81       	ldd	r25, Z+1	; 0x01
    54d0:	8c 01       	movw	r16, r24
    54d2:	c8 01       	movw	r24, r16
    54d4:	01 97       	sbiw	r24, 0x01	; 1
    54d6:	f1 f7       	brne	.-4      	; 0x54d4 <left_cycle+0x5a2>
    54d8:	8c 01       	movw	r16, r24
    54da:	ce 01       	movw	r24, r28
    54dc:	8b 5b       	subi	r24, 0xBB	; 187
    54de:	9f 4f       	sbci	r25, 0xFF	; 255
    54e0:	fc 01       	movw	r30, r24
    54e2:	11 83       	std	Z+1, r17	; 0x01
    54e4:	00 83       	st	Z, r16
	_delay_ms(300);

}
    54e6:	ca 5b       	subi	r28, 0xBA	; 186
    54e8:	df 4f       	sbci	r29, 0xFF	; 255
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	f8 94       	cli
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	cd bf       	out	0x3d, r28	; 61
    54f4:	df 91       	pop	r29
    54f6:	cf 91       	pop	r28
    54f8:	1f 91       	pop	r17
    54fa:	0f 91       	pop	r16
    54fc:	08 95       	ret

000054fe <right_cycle>:

void right_cycle()
{
    54fe:	0f 93       	push	r16
    5500:	1f 93       	push	r17
    5502:	cf 93       	push	r28
    5504:	df 93       	push	r29
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62
    550a:	c6 54       	subi	r28, 0x46	; 70
    550c:	d0 40       	sbci	r29, 0x00	; 0
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	cd bf       	out	0x3d, r28	; 61

	gripper_open();
    5518:	0e 94 b3 1c 	call	0x3966	; 0x3966 <gripper_open>
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	a6 e9       	ldi	r26, 0x96	; 150
    5522:	b3 e4       	ldi	r27, 0x43	; 67
    5524:	89 83       	std	Y+1, r24	; 0x01
    5526:	9a 83       	std	Y+2, r25	; 0x02
    5528:	ab 83       	std	Y+3, r26	; 0x03
    552a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    552c:	69 81       	ldd	r22, Y+1	; 0x01
    552e:	7a 81       	ldd	r23, Y+2	; 0x02
    5530:	8b 81       	ldd	r24, Y+3	; 0x03
    5532:	9c 81       	ldd	r25, Y+4	; 0x04
    5534:	26 e6       	ldi	r18, 0x66	; 102
    5536:	36 e6       	ldi	r19, 0x66	; 102
    5538:	46 e6       	ldi	r20, 0x66	; 102
    553a:	55 e4       	ldi	r21, 0x45	; 69
    553c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	8d 83       	std	Y+5, r24	; 0x05
    5546:	9e 83       	std	Y+6, r25	; 0x06
    5548:	af 83       	std	Y+7, r26	; 0x07
    554a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    554c:	11 e0       	ldi	r17, 0x01	; 1
    554e:	6d 81       	ldd	r22, Y+5	; 0x05
    5550:	7e 81       	ldd	r23, Y+6	; 0x06
    5552:	8f 81       	ldd	r24, Y+7	; 0x07
    5554:	98 85       	ldd	r25, Y+8	; 0x08
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	40 e8       	ldi	r20, 0x80	; 128
    555c:	5f e3       	ldi	r21, 0x3F	; 63
    555e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5562:	88 23       	and	r24, r24
    5564:	0c f0       	brlt	.+2      	; 0x5568 <right_cycle+0x6a>
    5566:	10 e0       	ldi	r17, 0x00	; 0
    5568:	11 23       	and	r17, r17
    556a:	29 f0       	breq	.+10     	; 0x5576 <right_cycle+0x78>
		__ticks = 1;
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	9a 87       	std	Y+10, r25	; 0x0a
    5572:	89 87       	std	Y+9, r24	; 0x09
    5574:	46 c0       	rjmp	.+140    	; 0x5602 <right_cycle+0x104>
	else if (__tmp > 65535)
    5576:	11 e0       	ldi	r17, 0x01	; 1
    5578:	6d 81       	ldd	r22, Y+5	; 0x05
    557a:	7e 81       	ldd	r23, Y+6	; 0x06
    557c:	8f 81       	ldd	r24, Y+7	; 0x07
    557e:	98 85       	ldd	r25, Y+8	; 0x08
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	3f ef       	ldi	r19, 0xFF	; 255
    5584:	4f e7       	ldi	r20, 0x7F	; 127
    5586:	57 e4       	ldi	r21, 0x47	; 71
    5588:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    558c:	18 16       	cp	r1, r24
    558e:	0c f0       	brlt	.+2      	; 0x5592 <right_cycle+0x94>
    5590:	10 e0       	ldi	r17, 0x00	; 0
    5592:	11 23       	and	r17, r17
    5594:	61 f1       	breq	.+88     	; 0x55ee <right_cycle+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5596:	69 81       	ldd	r22, Y+1	; 0x01
    5598:	7a 81       	ldd	r23, Y+2	; 0x02
    559a:	8b 81       	ldd	r24, Y+3	; 0x03
    559c:	9c 81       	ldd	r25, Y+4	; 0x04
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e2       	ldi	r20, 0x20	; 32
    55a4:	51 e4       	ldi	r21, 0x41	; 65
    55a6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	bc 01       	movw	r22, r24
    55b0:	cd 01       	movw	r24, r26
    55b2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    55b6:	dc 01       	movw	r26, r24
    55b8:	cb 01       	movw	r24, r22
    55ba:	9a 87       	std	Y+10, r25	; 0x0a
    55bc:	89 87       	std	Y+9, r24	; 0x09
    55be:	12 c0       	rjmp	.+36     	; 0x55e4 <right_cycle+0xe6>
    55c0:	80 e7       	ldi	r24, 0x70	; 112
    55c2:	91 e0       	ldi	r25, 0x01	; 1
    55c4:	9c 87       	std	Y+12, r25	; 0x0c
    55c6:	8b 87       	std	Y+11, r24	; 0x0b
    55c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    55cc:	8c 01       	movw	r16, r24
    55ce:	c8 01       	movw	r24, r16
    55d0:	01 97       	sbiw	r24, 0x01	; 1
    55d2:	f1 f7       	brne	.-4      	; 0x55d0 <right_cycle+0xd2>
    55d4:	8c 01       	movw	r16, r24
    55d6:	1c 87       	std	Y+12, r17	; 0x0c
    55d8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55da:	89 85       	ldd	r24, Y+9	; 0x09
    55dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55de:	01 97       	sbiw	r24, 0x01	; 1
    55e0:	9a 87       	std	Y+10, r25	; 0x0a
    55e2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55e4:	89 85       	ldd	r24, Y+9	; 0x09
    55e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	51 f7       	brne	.-44     	; 0x55c0 <right_cycle+0xc2>
    55ec:	17 c0       	rjmp	.+46     	; 0x561c <right_cycle+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ee:	6d 81       	ldd	r22, Y+5	; 0x05
    55f0:	7e 81       	ldd	r23, Y+6	; 0x06
    55f2:	8f 81       	ldd	r24, Y+7	; 0x07
    55f4:	98 85       	ldd	r25, Y+8	; 0x08
    55f6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	9a 87       	std	Y+10, r25	; 0x0a
    5600:	89 87       	std	Y+9, r24	; 0x09
    5602:	89 85       	ldd	r24, Y+9	; 0x09
    5604:	9a 85       	ldd	r25, Y+10	; 0x0a
    5606:	9e 87       	std	Y+14, r25	; 0x0e
    5608:	8d 87       	std	Y+13, r24	; 0x0d
    560a:	8d 85       	ldd	r24, Y+13	; 0x0d
    560c:	9e 85       	ldd	r25, Y+14	; 0x0e
    560e:	8c 01       	movw	r16, r24
    5610:	f8 01       	movw	r30, r16
    5612:	31 97       	sbiw	r30, 0x01	; 1
    5614:	f1 f7       	brne	.-4      	; 0x5612 <right_cycle+0x114>
    5616:	8f 01       	movw	r16, r30
    5618:	1e 87       	std	Y+14, r17	; 0x0e
    561a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_rotate_right();
    561c:	0e 94 2d 20 	call	0x405a	; 0x405a <arm_rotate_right>
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	a6 e9       	ldi	r26, 0x96	; 150
    5626:	b3 e4       	ldi	r27, 0x43	; 67
    5628:	8f 87       	std	Y+15, r24	; 0x0f
    562a:	98 8b       	std	Y+16, r25	; 0x10
    562c:	a9 8b       	std	Y+17, r26	; 0x11
    562e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5630:	6f 85       	ldd	r22, Y+15	; 0x0f
    5632:	78 89       	ldd	r23, Y+16	; 0x10
    5634:	89 89       	ldd	r24, Y+17	; 0x11
    5636:	9a 89       	ldd	r25, Y+18	; 0x12
    5638:	26 e6       	ldi	r18, 0x66	; 102
    563a:	36 e6       	ldi	r19, 0x66	; 102
    563c:	46 e6       	ldi	r20, 0x66	; 102
    563e:	55 e4       	ldi	r21, 0x45	; 69
    5640:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5644:	dc 01       	movw	r26, r24
    5646:	cb 01       	movw	r24, r22
    5648:	8b 8b       	std	Y+19, r24	; 0x13
    564a:	9c 8b       	std	Y+20, r25	; 0x14
    564c:	ad 8b       	std	Y+21, r26	; 0x15
    564e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5650:	11 e0       	ldi	r17, 0x01	; 1
    5652:	6b 89       	ldd	r22, Y+19	; 0x13
    5654:	7c 89       	ldd	r23, Y+20	; 0x14
    5656:	8d 89       	ldd	r24, Y+21	; 0x15
    5658:	9e 89       	ldd	r25, Y+22	; 0x16
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	40 e8       	ldi	r20, 0x80	; 128
    5660:	5f e3       	ldi	r21, 0x3F	; 63
    5662:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5666:	88 23       	and	r24, r24
    5668:	0c f0       	brlt	.+2      	; 0x566c <right_cycle+0x16e>
    566a:	10 e0       	ldi	r17, 0x00	; 0
    566c:	11 23       	and	r17, r17
    566e:	29 f0       	breq	.+10     	; 0x567a <right_cycle+0x17c>
		__ticks = 1;
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	98 8f       	std	Y+24, r25	; 0x18
    5676:	8f 8b       	std	Y+23, r24	; 0x17
    5678:	46 c0       	rjmp	.+140    	; 0x5706 <right_cycle+0x208>
	else if (__tmp > 65535)
    567a:	11 e0       	ldi	r17, 0x01	; 1
    567c:	6b 89       	ldd	r22, Y+19	; 0x13
    567e:	7c 89       	ldd	r23, Y+20	; 0x14
    5680:	8d 89       	ldd	r24, Y+21	; 0x15
    5682:	9e 89       	ldd	r25, Y+22	; 0x16
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	3f ef       	ldi	r19, 0xFF	; 255
    5688:	4f e7       	ldi	r20, 0x7F	; 127
    568a:	57 e4       	ldi	r21, 0x47	; 71
    568c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5690:	18 16       	cp	r1, r24
    5692:	0c f0       	brlt	.+2      	; 0x5696 <right_cycle+0x198>
    5694:	10 e0       	ldi	r17, 0x00	; 0
    5696:	11 23       	and	r17, r17
    5698:	61 f1       	breq	.+88     	; 0x56f2 <right_cycle+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    569a:	6f 85       	ldd	r22, Y+15	; 0x0f
    569c:	78 89       	ldd	r23, Y+16	; 0x10
    569e:	89 89       	ldd	r24, Y+17	; 0x11
    56a0:	9a 89       	ldd	r25, Y+18	; 0x12
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e2       	ldi	r20, 0x20	; 32
    56a8:	51 e4       	ldi	r21, 0x41	; 65
    56aa:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	bc 01       	movw	r22, r24
    56b4:	cd 01       	movw	r24, r26
    56b6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	98 8f       	std	Y+24, r25	; 0x18
    56c0:	8f 8b       	std	Y+23, r24	; 0x17
    56c2:	12 c0       	rjmp	.+36     	; 0x56e8 <right_cycle+0x1ea>
    56c4:	80 e7       	ldi	r24, 0x70	; 112
    56c6:	91 e0       	ldi	r25, 0x01	; 1
    56c8:	9a 8f       	std	Y+26, r25	; 0x1a
    56ca:	89 8f       	std	Y+25, r24	; 0x19
    56cc:	89 8d       	ldd	r24, Y+25	; 0x19
    56ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56d0:	8c 01       	movw	r16, r24
    56d2:	c8 01       	movw	r24, r16
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	f1 f7       	brne	.-4      	; 0x56d4 <right_cycle+0x1d6>
    56d8:	8c 01       	movw	r16, r24
    56da:	1a 8f       	std	Y+26, r17	; 0x1a
    56dc:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56de:	8f 89       	ldd	r24, Y+23	; 0x17
    56e0:	98 8d       	ldd	r25, Y+24	; 0x18
    56e2:	01 97       	sbiw	r24, 0x01	; 1
    56e4:	98 8f       	std	Y+24, r25	; 0x18
    56e6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e8:	8f 89       	ldd	r24, Y+23	; 0x17
    56ea:	98 8d       	ldd	r25, Y+24	; 0x18
    56ec:	00 97       	sbiw	r24, 0x00	; 0
    56ee:	51 f7       	brne	.-44     	; 0x56c4 <right_cycle+0x1c6>
    56f0:	17 c0       	rjmp	.+46     	; 0x5720 <right_cycle+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56f2:	6b 89       	ldd	r22, Y+19	; 0x13
    56f4:	7c 89       	ldd	r23, Y+20	; 0x14
    56f6:	8d 89       	ldd	r24, Y+21	; 0x15
    56f8:	9e 89       	ldd	r25, Y+22	; 0x16
    56fa:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    56fe:	dc 01       	movw	r26, r24
    5700:	cb 01       	movw	r24, r22
    5702:	98 8f       	std	Y+24, r25	; 0x18
    5704:	8f 8b       	std	Y+23, r24	; 0x17
    5706:	8f 89       	ldd	r24, Y+23	; 0x17
    5708:	98 8d       	ldd	r25, Y+24	; 0x18
    570a:	9c 8f       	std	Y+28, r25	; 0x1c
    570c:	8b 8f       	std	Y+27, r24	; 0x1b
    570e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5712:	8c 01       	movw	r16, r24
    5714:	f8 01       	movw	r30, r16
    5716:	31 97       	sbiw	r30, 0x01	; 1
    5718:	f1 f7       	brne	.-4      	; 0x5716 <right_cycle+0x218>
    571a:	8f 01       	movw	r16, r30
    571c:	1c 8f       	std	Y+28, r17	; 0x1c
    571e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	arm_forward();
    5720:	0e 94 7e 22 	call	0x44fc	; 0x44fc <arm_forward>
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	a6 e9       	ldi	r26, 0x96	; 150
    572a:	b3 e4       	ldi	r27, 0x43	; 67
    572c:	8d 8f       	std	Y+29, r24	; 0x1d
    572e:	9e 8f       	std	Y+30, r25	; 0x1e
    5730:	af 8f       	std	Y+31, r26	; 0x1f
    5732:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5734:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5736:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5738:	8f 8d       	ldd	r24, Y+31	; 0x1f
    573a:	98 a1       	lds	r25, 0x48
    573c:	26 e6       	ldi	r18, 0x66	; 102
    573e:	36 e6       	ldi	r19, 0x66	; 102
    5740:	46 e6       	ldi	r20, 0x66	; 102
    5742:	55 e4       	ldi	r21, 0x45	; 69
    5744:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5748:	dc 01       	movw	r26, r24
    574a:	cb 01       	movw	r24, r22
    574c:	89 a3       	lds	r24, 0x59
    574e:	9a a3       	lds	r25, 0x5a
    5750:	ab a3       	lds	r26, 0x5b
    5752:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5754:	11 e0       	ldi	r17, 0x01	; 1
    5756:	69 a1       	lds	r22, 0x49
    5758:	7a a1       	lds	r23, 0x4a
    575a:	8b a1       	lds	r24, 0x4b
    575c:	9c a1       	lds	r25, 0x4c
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e8       	ldi	r20, 0x80	; 128
    5764:	5f e3       	ldi	r21, 0x3F	; 63
    5766:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    576a:	88 23       	and	r24, r24
    576c:	0c f0       	brlt	.+2      	; 0x5770 <right_cycle+0x272>
    576e:	10 e0       	ldi	r17, 0x00	; 0
    5770:	11 23       	and	r17, r17
    5772:	29 f0       	breq	.+10     	; 0x577e <right_cycle+0x280>
		__ticks = 1;
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	9e a3       	lds	r25, 0x5e
    577a:	8d a3       	lds	r24, 0x5d
    577c:	46 c0       	rjmp	.+140    	; 0x580a <right_cycle+0x30c>
	else if (__tmp > 65535)
    577e:	11 e0       	ldi	r17, 0x01	; 1
    5780:	69 a1       	lds	r22, 0x49
    5782:	7a a1       	lds	r23, 0x4a
    5784:	8b a1       	lds	r24, 0x4b
    5786:	9c a1       	lds	r25, 0x4c
    5788:	20 e0       	ldi	r18, 0x00	; 0
    578a:	3f ef       	ldi	r19, 0xFF	; 255
    578c:	4f e7       	ldi	r20, 0x7F	; 127
    578e:	57 e4       	ldi	r21, 0x47	; 71
    5790:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5794:	18 16       	cp	r1, r24
    5796:	0c f0       	brlt	.+2      	; 0x579a <right_cycle+0x29c>
    5798:	10 e0       	ldi	r17, 0x00	; 0
    579a:	11 23       	and	r17, r17
    579c:	61 f1       	breq	.+88     	; 0x57f6 <right_cycle+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    579e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    57a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    57a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57a4:	98 a1       	lds	r25, 0x48
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e2       	ldi	r20, 0x20	; 32
    57ac:	51 e4       	ldi	r21, 0x41	; 65
    57ae:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	bc 01       	movw	r22, r24
    57b8:	cd 01       	movw	r24, r26
    57ba:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	9e a3       	lds	r25, 0x5e
    57c4:	8d a3       	lds	r24, 0x5d
    57c6:	12 c0       	rjmp	.+36     	; 0x57ec <right_cycle+0x2ee>
    57c8:	80 e7       	ldi	r24, 0x70	; 112
    57ca:	91 e0       	ldi	r25, 0x01	; 1
    57cc:	98 a7       	lds	r25, 0x78
    57ce:	8f a3       	lds	r24, 0x5f
    57d0:	8f a1       	lds	r24, 0x4f
    57d2:	98 a5       	lds	r25, 0x68
    57d4:	8c 01       	movw	r16, r24
    57d6:	c8 01       	movw	r24, r16
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	f1 f7       	brne	.-4      	; 0x57d8 <right_cycle+0x2da>
    57dc:	8c 01       	movw	r16, r24
    57de:	18 a7       	lds	r17, 0x78
    57e0:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57e2:	8d a1       	lds	r24, 0x4d
    57e4:	9e a1       	lds	r25, 0x4e
    57e6:	01 97       	sbiw	r24, 0x01	; 1
    57e8:	9e a3       	lds	r25, 0x5e
    57ea:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ec:	8d a1       	lds	r24, 0x4d
    57ee:	9e a1       	lds	r25, 0x4e
    57f0:	00 97       	sbiw	r24, 0x00	; 0
    57f2:	51 f7       	brne	.-44     	; 0x57c8 <right_cycle+0x2ca>
    57f4:	17 c0       	rjmp	.+46     	; 0x5824 <right_cycle+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57f6:	69 a1       	lds	r22, 0x49
    57f8:	7a a1       	lds	r23, 0x4a
    57fa:	8b a1       	lds	r24, 0x4b
    57fc:	9c a1       	lds	r25, 0x4c
    57fe:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5802:	dc 01       	movw	r26, r24
    5804:	cb 01       	movw	r24, r22
    5806:	9e a3       	lds	r25, 0x5e
    5808:	8d a3       	lds	r24, 0x5d
    580a:	8d a1       	lds	r24, 0x4d
    580c:	9e a1       	lds	r25, 0x4e
    580e:	9a a7       	lds	r25, 0x7a
    5810:	89 a7       	lds	r24, 0x79
    5812:	89 a5       	lds	r24, 0x69
    5814:	9a a5       	lds	r25, 0x6a
    5816:	8c 01       	movw	r16, r24
    5818:	f8 01       	movw	r30, r16
    581a:	31 97       	sbiw	r30, 0x01	; 1
    581c:	f1 f7       	brne	.-4      	; 0x581a <right_cycle+0x31c>
    581e:	8f 01       	movw	r16, r30
    5820:	1a a7       	lds	r17, 0x7a
    5822:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	gripper_close();
    5824:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_close>
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	a6 e9       	ldi	r26, 0x96	; 150
    582e:	b3 e4       	ldi	r27, 0x43	; 67
    5830:	8b a7       	lds	r24, 0x7b
    5832:	9c a7       	lds	r25, 0x7c
    5834:	ad a7       	lds	r26, 0x7d
    5836:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5838:	6b a5       	lds	r22, 0x6b
    583a:	7c a5       	lds	r23, 0x6c
    583c:	8d a5       	lds	r24, 0x6d
    583e:	9e a5       	lds	r25, 0x6e
    5840:	26 e6       	ldi	r18, 0x66	; 102
    5842:	36 e6       	ldi	r19, 0x66	; 102
    5844:	46 e6       	ldi	r20, 0x66	; 102
    5846:	55 e4       	ldi	r21, 0x45	; 69
    5848:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    584c:	dc 01       	movw	r26, r24
    584e:	cb 01       	movw	r24, r22
    5850:	8f a7       	lds	r24, 0x7f
    5852:	98 ab       	sts	0x58, r25
    5854:	a9 ab       	sts	0x59, r26
    5856:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5858:	11 e0       	ldi	r17, 0x01	; 1
    585a:	6f a5       	lds	r22, 0x6f
    585c:	78 a9       	sts	0x48, r23
    585e:	89 a9       	sts	0x49, r24
    5860:	9a a9       	sts	0x4a, r25
    5862:	20 e0       	ldi	r18, 0x00	; 0
    5864:	30 e0       	ldi	r19, 0x00	; 0
    5866:	40 e8       	ldi	r20, 0x80	; 128
    5868:	5f e3       	ldi	r21, 0x3F	; 63
    586a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    586e:	88 23       	and	r24, r24
    5870:	0c f0       	brlt	.+2      	; 0x5874 <right_cycle+0x376>
    5872:	10 e0       	ldi	r17, 0x00	; 0
    5874:	11 23       	and	r17, r17
    5876:	29 f0       	breq	.+10     	; 0x5882 <right_cycle+0x384>
		__ticks = 1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	9c ab       	sts	0x5c, r25
    587e:	8b ab       	sts	0x5b, r24
    5880:	46 c0       	rjmp	.+140    	; 0x590e <right_cycle+0x410>
	else if (__tmp > 65535)
    5882:	11 e0       	ldi	r17, 0x01	; 1
    5884:	6f a5       	lds	r22, 0x6f
    5886:	78 a9       	sts	0x48, r23
    5888:	89 a9       	sts	0x49, r24
    588a:	9a a9       	sts	0x4a, r25
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	3f ef       	ldi	r19, 0xFF	; 255
    5890:	4f e7       	ldi	r20, 0x7F	; 127
    5892:	57 e4       	ldi	r21, 0x47	; 71
    5894:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5898:	18 16       	cp	r1, r24
    589a:	0c f0       	brlt	.+2      	; 0x589e <right_cycle+0x3a0>
    589c:	10 e0       	ldi	r17, 0x00	; 0
    589e:	11 23       	and	r17, r17
    58a0:	61 f1       	breq	.+88     	; 0x58fa <right_cycle+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58a2:	6b a5       	lds	r22, 0x6b
    58a4:	7c a5       	lds	r23, 0x6c
    58a6:	8d a5       	lds	r24, 0x6d
    58a8:	9e a5       	lds	r25, 0x6e
    58aa:	20 e0       	ldi	r18, 0x00	; 0
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	40 e2       	ldi	r20, 0x20	; 32
    58b0:	51 e4       	ldi	r21, 0x41	; 65
    58b2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    58b6:	dc 01       	movw	r26, r24
    58b8:	cb 01       	movw	r24, r22
    58ba:	bc 01       	movw	r22, r24
    58bc:	cd 01       	movw	r24, r26
    58be:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    58c2:	dc 01       	movw	r26, r24
    58c4:	cb 01       	movw	r24, r22
    58c6:	9c ab       	sts	0x5c, r25
    58c8:	8b ab       	sts	0x5b, r24
    58ca:	12 c0       	rjmp	.+36     	; 0x58f0 <right_cycle+0x3f2>
    58cc:	80 e7       	ldi	r24, 0x70	; 112
    58ce:	91 e0       	ldi	r25, 0x01	; 1
    58d0:	9e ab       	sts	0x5e, r25
    58d2:	8d ab       	sts	0x5d, r24
    58d4:	8d a9       	sts	0x4d, r24
    58d6:	9e a9       	sts	0x4e, r25
    58d8:	8c 01       	movw	r16, r24
    58da:	c8 01       	movw	r24, r16
    58dc:	01 97       	sbiw	r24, 0x01	; 1
    58de:	f1 f7       	brne	.-4      	; 0x58dc <right_cycle+0x3de>
    58e0:	8c 01       	movw	r16, r24
    58e2:	1e ab       	sts	0x5e, r17
    58e4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58e6:	8b a9       	sts	0x4b, r24
    58e8:	9c a9       	sts	0x4c, r25
    58ea:	01 97       	sbiw	r24, 0x01	; 1
    58ec:	9c ab       	sts	0x5c, r25
    58ee:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58f0:	8b a9       	sts	0x4b, r24
    58f2:	9c a9       	sts	0x4c, r25
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	51 f7       	brne	.-44     	; 0x58cc <right_cycle+0x3ce>
    58f8:	17 c0       	rjmp	.+46     	; 0x5928 <right_cycle+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58fa:	6f a5       	lds	r22, 0x6f
    58fc:	78 a9       	sts	0x48, r23
    58fe:	89 a9       	sts	0x49, r24
    5900:	9a a9       	sts	0x4a, r25
    5902:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5906:	dc 01       	movw	r26, r24
    5908:	cb 01       	movw	r24, r22
    590a:	9c ab       	sts	0x5c, r25
    590c:	8b ab       	sts	0x5b, r24
    590e:	8b a9       	sts	0x4b, r24
    5910:	9c a9       	sts	0x4c, r25
    5912:	98 af       	sts	0x78, r25
    5914:	8f ab       	sts	0x5f, r24
    5916:	8f a9       	sts	0x4f, r24
    5918:	98 ad       	sts	0x68, r25
    591a:	8c 01       	movw	r16, r24
    591c:	f8 01       	movw	r30, r16
    591e:	31 97       	sbiw	r30, 0x01	; 1
    5920:	f1 f7       	brne	.-4      	; 0x591e <right_cycle+0x420>
    5922:	8f 01       	movw	r16, r30
    5924:	18 af       	sts	0x78, r17
    5926:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	arm_backward();
    5928:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_backward>
    592c:	80 e0       	ldi	r24, 0x00	; 0
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	a6 e9       	ldi	r26, 0x96	; 150
    5932:	b3 e4       	ldi	r27, 0x43	; 67
    5934:	89 af       	sts	0x79, r24
    5936:	9a af       	sts	0x7a, r25
    5938:	ab af       	sts	0x7b, r26
    593a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    593c:	69 ad       	sts	0x69, r22
    593e:	7a ad       	sts	0x6a, r23
    5940:	8b ad       	sts	0x6b, r24
    5942:	9c ad       	sts	0x6c, r25
    5944:	26 e6       	ldi	r18, 0x66	; 102
    5946:	36 e6       	ldi	r19, 0x66	; 102
    5948:	46 e6       	ldi	r20, 0x66	; 102
    594a:	55 e4       	ldi	r21, 0x45	; 69
    594c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5950:	dc 01       	movw	r26, r24
    5952:	cb 01       	movw	r24, r22
    5954:	9e 01       	movw	r18, r28
    5956:	23 5c       	subi	r18, 0xC3	; 195
    5958:	3f 4f       	sbci	r19, 0xFF	; 255
    595a:	f9 01       	movw	r30, r18
    595c:	80 83       	st	Z, r24
    595e:	91 83       	std	Z+1, r25	; 0x01
    5960:	a2 83       	std	Z+2, r26	; 0x02
    5962:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5964:	11 e0       	ldi	r17, 0x01	; 1
    5966:	ce 01       	movw	r24, r28
    5968:	cd 96       	adiw	r24, 0x3d	; 61
    596a:	fc 01       	movw	r30, r24
    596c:	60 81       	ld	r22, Z
    596e:	71 81       	ldd	r23, Z+1	; 0x01
    5970:	82 81       	ldd	r24, Z+2	; 0x02
    5972:	93 81       	ldd	r25, Z+3	; 0x03
    5974:	20 e0       	ldi	r18, 0x00	; 0
    5976:	30 e0       	ldi	r19, 0x00	; 0
    5978:	40 e8       	ldi	r20, 0x80	; 128
    597a:	5f e3       	ldi	r21, 0x3F	; 63
    597c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5980:	88 23       	and	r24, r24
    5982:	0c f0       	brlt	.+2      	; 0x5986 <right_cycle+0x488>
    5984:	10 e0       	ldi	r17, 0x00	; 0
    5986:	11 23       	and	r17, r17
    5988:	49 f0       	breq	.+18     	; 0x599c <right_cycle+0x49e>
		__ticks = 1;
    598a:	ce 01       	movw	r24, r28
    598c:	8f 5b       	subi	r24, 0xBF	; 191
    598e:	9f 4f       	sbci	r25, 0xFF	; 255
    5990:	21 e0       	ldi	r18, 0x01	; 1
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	fc 01       	movw	r30, r24
    5996:	31 83       	std	Z+1, r19	; 0x01
    5998:	20 83       	st	Z, r18
    599a:	6e c0       	rjmp	.+220    	; 0x5a78 <right_cycle+0x57a>
	else if (__tmp > 65535)
    599c:	11 e0       	ldi	r17, 0x01	; 1
    599e:	ce 01       	movw	r24, r28
    59a0:	cd 96       	adiw	r24, 0x3d	; 61
    59a2:	fc 01       	movw	r30, r24
    59a4:	60 81       	ld	r22, Z
    59a6:	71 81       	ldd	r23, Z+1	; 0x01
    59a8:	82 81       	ldd	r24, Z+2	; 0x02
    59aa:	93 81       	ldd	r25, Z+3	; 0x03
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	3f ef       	ldi	r19, 0xFF	; 255
    59b0:	4f e7       	ldi	r20, 0x7F	; 127
    59b2:	57 e4       	ldi	r21, 0x47	; 71
    59b4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    59b8:	18 16       	cp	r1, r24
    59ba:	0c f0       	brlt	.+2      	; 0x59be <right_cycle+0x4c0>
    59bc:	10 e0       	ldi	r17, 0x00	; 0
    59be:	11 23       	and	r17, r17
    59c0:	09 f4       	brne	.+2      	; 0x59c4 <right_cycle+0x4c6>
    59c2:	49 c0       	rjmp	.+146    	; 0x5a56 <right_cycle+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59c4:	69 ad       	sts	0x69, r22
    59c6:	7a ad       	sts	0x6a, r23
    59c8:	8b ad       	sts	0x6b, r24
    59ca:	9c ad       	sts	0x6c, r25
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	40 e2       	ldi	r20, 0x20	; 32
    59d2:	51 e4       	ldi	r21, 0x41	; 65
    59d4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    59d8:	dc 01       	movw	r26, r24
    59da:	cb 01       	movw	r24, r22
    59dc:	8e 01       	movw	r16, r28
    59de:	0f 5b       	subi	r16, 0xBF	; 191
    59e0:	1f 4f       	sbci	r17, 0xFF	; 255
    59e2:	bc 01       	movw	r22, r24
    59e4:	cd 01       	movw	r24, r26
    59e6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    59ea:	dc 01       	movw	r26, r24
    59ec:	cb 01       	movw	r24, r22
    59ee:	f8 01       	movw	r30, r16
    59f0:	91 83       	std	Z+1, r25	; 0x01
    59f2:	80 83       	st	Z, r24
    59f4:	27 c0       	rjmp	.+78     	; 0x5a44 <right_cycle+0x546>
    59f6:	ce 01       	movw	r24, r28
    59f8:	8d 5b       	subi	r24, 0xBD	; 189
    59fa:	9f 4f       	sbci	r25, 0xFF	; 255
    59fc:	20 e7       	ldi	r18, 0x70	; 112
    59fe:	31 e0       	ldi	r19, 0x01	; 1
    5a00:	fc 01       	movw	r30, r24
    5a02:	31 83       	std	Z+1, r19	; 0x01
    5a04:	20 83       	st	Z, r18
    5a06:	ce 01       	movw	r24, r28
    5a08:	8d 5b       	subi	r24, 0xBD	; 189
    5a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0c:	fc 01       	movw	r30, r24
    5a0e:	80 81       	ld	r24, Z
    5a10:	91 81       	ldd	r25, Z+1	; 0x01
    5a12:	8c 01       	movw	r16, r24
    5a14:	c8 01       	movw	r24, r16
    5a16:	01 97       	sbiw	r24, 0x01	; 1
    5a18:	f1 f7       	brne	.-4      	; 0x5a16 <right_cycle+0x518>
    5a1a:	8c 01       	movw	r16, r24
    5a1c:	ce 01       	movw	r24, r28
    5a1e:	8d 5b       	subi	r24, 0xBD	; 189
    5a20:	9f 4f       	sbci	r25, 0xFF	; 255
    5a22:	fc 01       	movw	r30, r24
    5a24:	11 83       	std	Z+1, r17	; 0x01
    5a26:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a28:	ce 01       	movw	r24, r28
    5a2a:	8f 5b       	subi	r24, 0xBF	; 191
    5a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2e:	9e 01       	movw	r18, r28
    5a30:	2f 5b       	subi	r18, 0xBF	; 191
    5a32:	3f 4f       	sbci	r19, 0xFF	; 255
    5a34:	f9 01       	movw	r30, r18
    5a36:	20 81       	ld	r18, Z
    5a38:	31 81       	ldd	r19, Z+1	; 0x01
    5a3a:	21 50       	subi	r18, 0x01	; 1
    5a3c:	30 40       	sbci	r19, 0x00	; 0
    5a3e:	fc 01       	movw	r30, r24
    5a40:	31 83       	std	Z+1, r19	; 0x01
    5a42:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a44:	ce 01       	movw	r24, r28
    5a46:	8f 5b       	subi	r24, 0xBF	; 191
    5a48:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4a:	fc 01       	movw	r30, r24
    5a4c:	80 81       	ld	r24, Z
    5a4e:	91 81       	ldd	r25, Z+1	; 0x01
    5a50:	00 97       	sbiw	r24, 0x00	; 0
    5a52:	89 f6       	brne	.-94     	; 0x59f6 <right_cycle+0x4f8>
    5a54:	2e c0       	rjmp	.+92     	; 0x5ab2 <right_cycle+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a56:	8e 01       	movw	r16, r28
    5a58:	0f 5b       	subi	r16, 0xBF	; 191
    5a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a5c:	ce 01       	movw	r24, r28
    5a5e:	cd 96       	adiw	r24, 0x3d	; 61
    5a60:	fc 01       	movw	r30, r24
    5a62:	60 81       	ld	r22, Z
    5a64:	71 81       	ldd	r23, Z+1	; 0x01
    5a66:	82 81       	ldd	r24, Z+2	; 0x02
    5a68:	93 81       	ldd	r25, Z+3	; 0x03
    5a6a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5a6e:	dc 01       	movw	r26, r24
    5a70:	cb 01       	movw	r24, r22
    5a72:	f8 01       	movw	r30, r16
    5a74:	91 83       	std	Z+1, r25	; 0x01
    5a76:	80 83       	st	Z, r24
    5a78:	ce 01       	movw	r24, r28
    5a7a:	8b 5b       	subi	r24, 0xBB	; 187
    5a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a7e:	9e 01       	movw	r18, r28
    5a80:	2f 5b       	subi	r18, 0xBF	; 191
    5a82:	3f 4f       	sbci	r19, 0xFF	; 255
    5a84:	f9 01       	movw	r30, r18
    5a86:	20 81       	ld	r18, Z
    5a88:	31 81       	ldd	r19, Z+1	; 0x01
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	31 83       	std	Z+1, r19	; 0x01
    5a8e:	20 83       	st	Z, r18
    5a90:	ce 01       	movw	r24, r28
    5a92:	8b 5b       	subi	r24, 0xBB	; 187
    5a94:	9f 4f       	sbci	r25, 0xFF	; 255
    5a96:	fc 01       	movw	r30, r24
    5a98:	80 81       	ld	r24, Z
    5a9a:	91 81       	ldd	r25, Z+1	; 0x01
    5a9c:	8c 01       	movw	r16, r24
    5a9e:	c8 01       	movw	r24, r16
    5aa0:	01 97       	sbiw	r24, 0x01	; 1
    5aa2:	f1 f7       	brne	.-4      	; 0x5aa0 <right_cycle+0x5a2>
    5aa4:	8c 01       	movw	r16, r24
    5aa6:	ce 01       	movw	r24, r28
    5aa8:	8b 5b       	subi	r24, 0xBB	; 187
    5aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    5aac:	fc 01       	movw	r30, r24
    5aae:	11 83       	std	Z+1, r17	; 0x01
    5ab0:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    5ab2:	ca 5b       	subi	r28, 0xBA	; 186
    5ab4:	df 4f       	sbci	r29, 0xFF	; 255
    5ab6:	0f b6       	in	r0, 0x3f	; 63
    5ab8:	f8 94       	cli
    5aba:	de bf       	out	0x3e, r29	; 62
    5abc:	0f be       	out	0x3f, r0	; 63
    5abe:	cd bf       	out	0x3d, r28	; 61
    5ac0:	df 91       	pop	r29
    5ac2:	cf 91       	pop	r28
    5ac4:	1f 91       	pop	r17
    5ac6:	0f 91       	pop	r16
    5ac8:	08 95       	ret

00005aca <drop>:
void drop()
{
    5aca:	0f 93       	push	r16
    5acc:	1f 93       	push	r17
    5ace:	cf 93       	push	r28
    5ad0:	df 93       	push	r29
    5ad2:	cd b7       	in	r28, 0x3d	; 61
    5ad4:	de b7       	in	r29, 0x3e	; 62
    5ad6:	c6 54       	subi	r28, 0x46	; 70
    5ad8:	d0 40       	sbci	r29, 0x00	; 0
    5ada:	0f b6       	in	r0, 0x3f	; 63
    5adc:	f8 94       	cli
    5ade:	de bf       	out	0x3e, r29	; 62
    5ae0:	0f be       	out	0x3f, r0	; 63
    5ae2:	cd bf       	out	0x3d, r28	; 61
	servo_1(150);
    5ae4:	86 e9       	ldi	r24, 0x96	; 150
    5ae6:	0e 94 96 1b 	call	0x372c	; 0x372c <servo_1>
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	a6 e9       	ldi	r26, 0x96	; 150
    5af0:	b3 e4       	ldi	r27, 0x43	; 67
    5af2:	89 83       	std	Y+1, r24	; 0x01
    5af4:	9a 83       	std	Y+2, r25	; 0x02
    5af6:	ab 83       	std	Y+3, r26	; 0x03
    5af8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5afa:	69 81       	ldd	r22, Y+1	; 0x01
    5afc:	7a 81       	ldd	r23, Y+2	; 0x02
    5afe:	8b 81       	ldd	r24, Y+3	; 0x03
    5b00:	9c 81       	ldd	r25, Y+4	; 0x04
    5b02:	26 e6       	ldi	r18, 0x66	; 102
    5b04:	36 e6       	ldi	r19, 0x66	; 102
    5b06:	46 e6       	ldi	r20, 0x66	; 102
    5b08:	55 e4       	ldi	r21, 0x45	; 69
    5b0a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	8d 83       	std	Y+5, r24	; 0x05
    5b14:	9e 83       	std	Y+6, r25	; 0x06
    5b16:	af 83       	std	Y+7, r26	; 0x07
    5b18:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5b1a:	11 e0       	ldi	r17, 0x01	; 1
    5b1c:	6d 81       	ldd	r22, Y+5	; 0x05
    5b1e:	7e 81       	ldd	r23, Y+6	; 0x06
    5b20:	8f 81       	ldd	r24, Y+7	; 0x07
    5b22:	98 85       	ldd	r25, Y+8	; 0x08
    5b24:	20 e0       	ldi	r18, 0x00	; 0
    5b26:	30 e0       	ldi	r19, 0x00	; 0
    5b28:	40 e8       	ldi	r20, 0x80	; 128
    5b2a:	5f e3       	ldi	r21, 0x3F	; 63
    5b2c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5b30:	88 23       	and	r24, r24
    5b32:	0c f0       	brlt	.+2      	; 0x5b36 <drop+0x6c>
    5b34:	10 e0       	ldi	r17, 0x00	; 0
    5b36:	11 23       	and	r17, r17
    5b38:	29 f0       	breq	.+10     	; 0x5b44 <drop+0x7a>
		__ticks = 1;
    5b3a:	81 e0       	ldi	r24, 0x01	; 1
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	9a 87       	std	Y+10, r25	; 0x0a
    5b40:	89 87       	std	Y+9, r24	; 0x09
    5b42:	46 c0       	rjmp	.+140    	; 0x5bd0 <drop+0x106>
	else if (__tmp > 65535)
    5b44:	11 e0       	ldi	r17, 0x01	; 1
    5b46:	6d 81       	ldd	r22, Y+5	; 0x05
    5b48:	7e 81       	ldd	r23, Y+6	; 0x06
    5b4a:	8f 81       	ldd	r24, Y+7	; 0x07
    5b4c:	98 85       	ldd	r25, Y+8	; 0x08
    5b4e:	20 e0       	ldi	r18, 0x00	; 0
    5b50:	3f ef       	ldi	r19, 0xFF	; 255
    5b52:	4f e7       	ldi	r20, 0x7F	; 127
    5b54:	57 e4       	ldi	r21, 0x47	; 71
    5b56:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5b5a:	18 16       	cp	r1, r24
    5b5c:	0c f0       	brlt	.+2      	; 0x5b60 <drop+0x96>
    5b5e:	10 e0       	ldi	r17, 0x00	; 0
    5b60:	11 23       	and	r17, r17
    5b62:	61 f1       	breq	.+88     	; 0x5bbc <drop+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b64:	69 81       	ldd	r22, Y+1	; 0x01
    5b66:	7a 81       	ldd	r23, Y+2	; 0x02
    5b68:	8b 81       	ldd	r24, Y+3	; 0x03
    5b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b6c:	20 e0       	ldi	r18, 0x00	; 0
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	40 e2       	ldi	r20, 0x20	; 32
    5b72:	51 e4       	ldi	r21, 0x41	; 65
    5b74:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	bc 01       	movw	r22, r24
    5b7e:	cd 01       	movw	r24, r26
    5b80:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	9a 87       	std	Y+10, r25	; 0x0a
    5b8a:	89 87       	std	Y+9, r24	; 0x09
    5b8c:	12 c0       	rjmp	.+36     	; 0x5bb2 <drop+0xe8>
    5b8e:	80 e7       	ldi	r24, 0x70	; 112
    5b90:	91 e0       	ldi	r25, 0x01	; 1
    5b92:	9c 87       	std	Y+12, r25	; 0x0c
    5b94:	8b 87       	std	Y+11, r24	; 0x0b
    5b96:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b98:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b9a:	8c 01       	movw	r16, r24
    5b9c:	c8 01       	movw	r24, r16
    5b9e:	01 97       	sbiw	r24, 0x01	; 1
    5ba0:	f1 f7       	brne	.-4      	; 0x5b9e <drop+0xd4>
    5ba2:	8c 01       	movw	r16, r24
    5ba4:	1c 87       	std	Y+12, r17	; 0x0c
    5ba6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ba8:	89 85       	ldd	r24, Y+9	; 0x09
    5baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bac:	01 97       	sbiw	r24, 0x01	; 1
    5bae:	9a 87       	std	Y+10, r25	; 0x0a
    5bb0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bb2:	89 85       	ldd	r24, Y+9	; 0x09
    5bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bb6:	00 97       	sbiw	r24, 0x00	; 0
    5bb8:	51 f7       	brne	.-44     	; 0x5b8e <drop+0xc4>
    5bba:	17 c0       	rjmp	.+46     	; 0x5bea <drop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bbc:	6d 81       	ldd	r22, Y+5	; 0x05
    5bbe:	7e 81       	ldd	r23, Y+6	; 0x06
    5bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    5bc2:	98 85       	ldd	r25, Y+8	; 0x08
    5bc4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	9a 87       	std	Y+10, r25	; 0x0a
    5bce:	89 87       	std	Y+9, r24	; 0x09
    5bd0:	89 85       	ldd	r24, Y+9	; 0x09
    5bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bd4:	9e 87       	std	Y+14, r25	; 0x0e
    5bd6:	8d 87       	std	Y+13, r24	; 0x0d
    5bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bdc:	8c 01       	movw	r16, r24
    5bde:	f8 01       	movw	r30, r16
    5be0:	31 97       	sbiw	r30, 0x01	; 1
    5be2:	f1 f7       	brne	.-4      	; 0x5be0 <drop+0x116>
    5be4:	8f 01       	movw	r16, r30
    5be6:	1e 87       	std	Y+14, r17	; 0x0e
    5be8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	
	for(ii=0;ii<65;ii++)
    5bea:	10 92 4f 03 	sts	0x034F, r1
    5bee:	89 c0       	rjmp	.+274    	; 0x5d02 <drop+0x238>
	{
		servo_2(ii);
    5bf0:	80 91 4f 03 	lds	r24, 0x034F
    5bf4:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <servo_2>
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	a0 e2       	ldi	r26, 0x20	; 32
    5bfe:	b1 e4       	ldi	r27, 0x41	; 65
    5c00:	8f 87       	std	Y+15, r24	; 0x0f
    5c02:	98 8b       	std	Y+16, r25	; 0x10
    5c04:	a9 8b       	std	Y+17, r26	; 0x11
    5c06:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5c08:	6f 85       	ldd	r22, Y+15	; 0x0f
    5c0a:	78 89       	ldd	r23, Y+16	; 0x10
    5c0c:	89 89       	ldd	r24, Y+17	; 0x11
    5c0e:	9a 89       	ldd	r25, Y+18	; 0x12
    5c10:	26 e6       	ldi	r18, 0x66	; 102
    5c12:	36 e6       	ldi	r19, 0x66	; 102
    5c14:	46 e6       	ldi	r20, 0x66	; 102
    5c16:	55 e4       	ldi	r21, 0x45	; 69
    5c18:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	cb 01       	movw	r24, r22
    5c20:	8b 8b       	std	Y+19, r24	; 0x13
    5c22:	9c 8b       	std	Y+20, r25	; 0x14
    5c24:	ad 8b       	std	Y+21, r26	; 0x15
    5c26:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5c28:	11 e0       	ldi	r17, 0x01	; 1
    5c2a:	6b 89       	ldd	r22, Y+19	; 0x13
    5c2c:	7c 89       	ldd	r23, Y+20	; 0x14
    5c2e:	8d 89       	ldd	r24, Y+21	; 0x15
    5c30:	9e 89       	ldd	r25, Y+22	; 0x16
    5c32:	20 e0       	ldi	r18, 0x00	; 0
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	40 e8       	ldi	r20, 0x80	; 128
    5c38:	5f e3       	ldi	r21, 0x3F	; 63
    5c3a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5c3e:	88 23       	and	r24, r24
    5c40:	0c f0       	brlt	.+2      	; 0x5c44 <drop+0x17a>
    5c42:	10 e0       	ldi	r17, 0x00	; 0
    5c44:	11 23       	and	r17, r17
    5c46:	29 f0       	breq	.+10     	; 0x5c52 <drop+0x188>
		__ticks = 1;
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	98 8f       	std	Y+24, r25	; 0x18
    5c4e:	8f 8b       	std	Y+23, r24	; 0x17
    5c50:	46 c0       	rjmp	.+140    	; 0x5cde <drop+0x214>
	else if (__tmp > 65535)
    5c52:	11 e0       	ldi	r17, 0x01	; 1
    5c54:	6b 89       	ldd	r22, Y+19	; 0x13
    5c56:	7c 89       	ldd	r23, Y+20	; 0x14
    5c58:	8d 89       	ldd	r24, Y+21	; 0x15
    5c5a:	9e 89       	ldd	r25, Y+22	; 0x16
    5c5c:	20 e0       	ldi	r18, 0x00	; 0
    5c5e:	3f ef       	ldi	r19, 0xFF	; 255
    5c60:	4f e7       	ldi	r20, 0x7F	; 127
    5c62:	57 e4       	ldi	r21, 0x47	; 71
    5c64:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5c68:	18 16       	cp	r1, r24
    5c6a:	0c f0       	brlt	.+2      	; 0x5c6e <drop+0x1a4>
    5c6c:	10 e0       	ldi	r17, 0x00	; 0
    5c6e:	11 23       	and	r17, r17
    5c70:	61 f1       	breq	.+88     	; 0x5cca <drop+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c72:	6f 85       	ldd	r22, Y+15	; 0x0f
    5c74:	78 89       	ldd	r23, Y+16	; 0x10
    5c76:	89 89       	ldd	r24, Y+17	; 0x11
    5c78:	9a 89       	ldd	r25, Y+18	; 0x12
    5c7a:	20 e0       	ldi	r18, 0x00	; 0
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	40 e2       	ldi	r20, 0x20	; 32
    5c80:	51 e4       	ldi	r21, 0x41	; 65
    5c82:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5c86:	dc 01       	movw	r26, r24
    5c88:	cb 01       	movw	r24, r22
    5c8a:	bc 01       	movw	r22, r24
    5c8c:	cd 01       	movw	r24, r26
    5c8e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	98 8f       	std	Y+24, r25	; 0x18
    5c98:	8f 8b       	std	Y+23, r24	; 0x17
    5c9a:	12 c0       	rjmp	.+36     	; 0x5cc0 <drop+0x1f6>
    5c9c:	80 e7       	ldi	r24, 0x70	; 112
    5c9e:	91 e0       	ldi	r25, 0x01	; 1
    5ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    5ca2:	89 8f       	std	Y+25, r24	; 0x19
    5ca4:	89 8d       	ldd	r24, Y+25	; 0x19
    5ca6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5ca8:	8c 01       	movw	r16, r24
    5caa:	c8 01       	movw	r24, r16
    5cac:	01 97       	sbiw	r24, 0x01	; 1
    5cae:	f1 f7       	brne	.-4      	; 0x5cac <drop+0x1e2>
    5cb0:	8c 01       	movw	r16, r24
    5cb2:	1a 8f       	std	Y+26, r17	; 0x1a
    5cb4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    5cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    5cba:	01 97       	sbiw	r24, 0x01	; 1
    5cbc:	98 8f       	std	Y+24, r25	; 0x18
    5cbe:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    5cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    5cc4:	00 97       	sbiw	r24, 0x00	; 0
    5cc6:	51 f7       	brne	.-44     	; 0x5c9c <drop+0x1d2>
    5cc8:	17 c0       	rjmp	.+46     	; 0x5cf8 <drop+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cca:	6b 89       	ldd	r22, Y+19	; 0x13
    5ccc:	7c 89       	ldd	r23, Y+20	; 0x14
    5cce:	8d 89       	ldd	r24, Y+21	; 0x15
    5cd0:	9e 89       	ldd	r25, Y+22	; 0x16
    5cd2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	98 8f       	std	Y+24, r25	; 0x18
    5cdc:	8f 8b       	std	Y+23, r24	; 0x17
    5cde:	8f 89       	ldd	r24, Y+23	; 0x17
    5ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ce2:	9c 8f       	std	Y+28, r25	; 0x1c
    5ce4:	8b 8f       	std	Y+27, r24	; 0x1b
    5ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cea:	8c 01       	movw	r16, r24
    5cec:	f8 01       	movw	r30, r16
    5cee:	31 97       	sbiw	r30, 0x01	; 1
    5cf0:	f1 f7       	brne	.-4      	; 0x5cee <drop+0x224>
    5cf2:	8f 01       	movw	r16, r30
    5cf4:	1c 8f       	std	Y+28, r17	; 0x1c
    5cf6:	0b 8f       	std	Y+27, r16	; 0x1b
void drop()
{
	servo_1(150);
	_delay_ms(300);
	
	for(ii=0;ii<65;ii++)
    5cf8:	80 91 4f 03 	lds	r24, 0x034F
    5cfc:	8f 5f       	subi	r24, 0xFF	; 255
    5cfe:	80 93 4f 03 	sts	0x034F, r24
    5d02:	80 91 4f 03 	lds	r24, 0x034F
    5d06:	81 34       	cpi	r24, 0x41	; 65
    5d08:	08 f4       	brcc	.+2      	; 0x5d0c <drop+0x242>
    5d0a:	72 cf       	rjmp	.-284    	; 0x5bf0 <drop+0x126>
    5d0c:	80 e0       	ldi	r24, 0x00	; 0
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	a6 e9       	ldi	r26, 0x96	; 150
    5d12:	b3 e4       	ldi	r27, 0x43	; 67
    5d14:	8d 8f       	std	Y+29, r24	; 0x1d
    5d16:	9e 8f       	std	Y+30, r25	; 0x1e
    5d18:	af 8f       	std	Y+31, r26	; 0x1f
    5d1a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d1c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5d1e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5d20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d22:	98 a1       	lds	r25, 0x48
    5d24:	26 e6       	ldi	r18, 0x66	; 102
    5d26:	36 e6       	ldi	r19, 0x66	; 102
    5d28:	46 e6       	ldi	r20, 0x66	; 102
    5d2a:	55 e4       	ldi	r21, 0x45	; 69
    5d2c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	89 a3       	lds	r24, 0x59
    5d36:	9a a3       	lds	r25, 0x5a
    5d38:	ab a3       	lds	r26, 0x5b
    5d3a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5d3c:	11 e0       	ldi	r17, 0x01	; 1
    5d3e:	69 a1       	lds	r22, 0x49
    5d40:	7a a1       	lds	r23, 0x4a
    5d42:	8b a1       	lds	r24, 0x4b
    5d44:	9c a1       	lds	r25, 0x4c
    5d46:	20 e0       	ldi	r18, 0x00	; 0
    5d48:	30 e0       	ldi	r19, 0x00	; 0
    5d4a:	40 e8       	ldi	r20, 0x80	; 128
    5d4c:	5f e3       	ldi	r21, 0x3F	; 63
    5d4e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5d52:	88 23       	and	r24, r24
    5d54:	0c f0       	brlt	.+2      	; 0x5d58 <drop+0x28e>
    5d56:	10 e0       	ldi	r17, 0x00	; 0
    5d58:	11 23       	and	r17, r17
    5d5a:	29 f0       	breq	.+10     	; 0x5d66 <drop+0x29c>
		__ticks = 1;
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	9e a3       	lds	r25, 0x5e
    5d62:	8d a3       	lds	r24, 0x5d
    5d64:	46 c0       	rjmp	.+140    	; 0x5df2 <drop+0x328>
	else if (__tmp > 65535)
    5d66:	11 e0       	ldi	r17, 0x01	; 1
    5d68:	69 a1       	lds	r22, 0x49
    5d6a:	7a a1       	lds	r23, 0x4a
    5d6c:	8b a1       	lds	r24, 0x4b
    5d6e:	9c a1       	lds	r25, 0x4c
    5d70:	20 e0       	ldi	r18, 0x00	; 0
    5d72:	3f ef       	ldi	r19, 0xFF	; 255
    5d74:	4f e7       	ldi	r20, 0x7F	; 127
    5d76:	57 e4       	ldi	r21, 0x47	; 71
    5d78:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5d7c:	18 16       	cp	r1, r24
    5d7e:	0c f0       	brlt	.+2      	; 0x5d82 <drop+0x2b8>
    5d80:	10 e0       	ldi	r17, 0x00	; 0
    5d82:	11 23       	and	r17, r17
    5d84:	61 f1       	breq	.+88     	; 0x5dde <drop+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5d88:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5d8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d8c:	98 a1       	lds	r25, 0x48
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	40 e2       	ldi	r20, 0x20	; 32
    5d94:	51 e4       	ldi	r21, 0x41	; 65
    5d96:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	cb 01       	movw	r24, r22
    5d9e:	bc 01       	movw	r22, r24
    5da0:	cd 01       	movw	r24, r26
    5da2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5da6:	dc 01       	movw	r26, r24
    5da8:	cb 01       	movw	r24, r22
    5daa:	9e a3       	lds	r25, 0x5e
    5dac:	8d a3       	lds	r24, 0x5d
    5dae:	12 c0       	rjmp	.+36     	; 0x5dd4 <drop+0x30a>
    5db0:	80 e7       	ldi	r24, 0x70	; 112
    5db2:	91 e0       	ldi	r25, 0x01	; 1
    5db4:	98 a7       	lds	r25, 0x78
    5db6:	8f a3       	lds	r24, 0x5f
    5db8:	8f a1       	lds	r24, 0x4f
    5dba:	98 a5       	lds	r25, 0x68
    5dbc:	8c 01       	movw	r16, r24
    5dbe:	c8 01       	movw	r24, r16
    5dc0:	01 97       	sbiw	r24, 0x01	; 1
    5dc2:	f1 f7       	brne	.-4      	; 0x5dc0 <drop+0x2f6>
    5dc4:	8c 01       	movw	r16, r24
    5dc6:	18 a7       	lds	r17, 0x78
    5dc8:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dca:	8d a1       	lds	r24, 0x4d
    5dcc:	9e a1       	lds	r25, 0x4e
    5dce:	01 97       	sbiw	r24, 0x01	; 1
    5dd0:	9e a3       	lds	r25, 0x5e
    5dd2:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dd4:	8d a1       	lds	r24, 0x4d
    5dd6:	9e a1       	lds	r25, 0x4e
    5dd8:	00 97       	sbiw	r24, 0x00	; 0
    5dda:	51 f7       	brne	.-44     	; 0x5db0 <drop+0x2e6>
    5ddc:	17 c0       	rjmp	.+46     	; 0x5e0c <drop+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dde:	69 a1       	lds	r22, 0x49
    5de0:	7a a1       	lds	r23, 0x4a
    5de2:	8b a1       	lds	r24, 0x4b
    5de4:	9c a1       	lds	r25, 0x4c
    5de6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5dea:	dc 01       	movw	r26, r24
    5dec:	cb 01       	movw	r24, r22
    5dee:	9e a3       	lds	r25, 0x5e
    5df0:	8d a3       	lds	r24, 0x5d
    5df2:	8d a1       	lds	r24, 0x4d
    5df4:	9e a1       	lds	r25, 0x4e
    5df6:	9a a7       	lds	r25, 0x7a
    5df8:	89 a7       	lds	r24, 0x79
    5dfa:	89 a5       	lds	r24, 0x69
    5dfc:	9a a5       	lds	r25, 0x6a
    5dfe:	8c 01       	movw	r16, r24
    5e00:	f8 01       	movw	r30, r16
    5e02:	31 97       	sbiw	r30, 0x01	; 1
    5e04:	f1 f7       	brne	.-4      	; 0x5e02 <drop+0x338>
    5e06:	8f 01       	movw	r16, r30
    5e08:	1a a7       	lds	r17, 0x7a
    5e0a:	09 a7       	lds	r16, 0x79
		servo_2(ii);
		_delay_ms(10);

	}
	_delay_ms(300);
	gripper_open();
    5e0c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <gripper_open>
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	a6 e9       	ldi	r26, 0x96	; 150
    5e16:	b3 e4       	ldi	r27, 0x43	; 67
    5e18:	8b a7       	lds	r24, 0x7b
    5e1a:	9c a7       	lds	r25, 0x7c
    5e1c:	ad a7       	lds	r26, 0x7d
    5e1e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5e20:	6b a5       	lds	r22, 0x6b
    5e22:	7c a5       	lds	r23, 0x6c
    5e24:	8d a5       	lds	r24, 0x6d
    5e26:	9e a5       	lds	r25, 0x6e
    5e28:	26 e6       	ldi	r18, 0x66	; 102
    5e2a:	36 e6       	ldi	r19, 0x66	; 102
    5e2c:	46 e6       	ldi	r20, 0x66	; 102
    5e2e:	55 e4       	ldi	r21, 0x45	; 69
    5e30:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5e34:	dc 01       	movw	r26, r24
    5e36:	cb 01       	movw	r24, r22
    5e38:	8f a7       	lds	r24, 0x7f
    5e3a:	98 ab       	sts	0x58, r25
    5e3c:	a9 ab       	sts	0x59, r26
    5e3e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5e40:	11 e0       	ldi	r17, 0x01	; 1
    5e42:	6f a5       	lds	r22, 0x6f
    5e44:	78 a9       	sts	0x48, r23
    5e46:	89 a9       	sts	0x49, r24
    5e48:	9a a9       	sts	0x4a, r25
    5e4a:	20 e0       	ldi	r18, 0x00	; 0
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	40 e8       	ldi	r20, 0x80	; 128
    5e50:	5f e3       	ldi	r21, 0x3F	; 63
    5e52:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5e56:	88 23       	and	r24, r24
    5e58:	0c f0       	brlt	.+2      	; 0x5e5c <drop+0x392>
    5e5a:	10 e0       	ldi	r17, 0x00	; 0
    5e5c:	11 23       	and	r17, r17
    5e5e:	29 f0       	breq	.+10     	; 0x5e6a <drop+0x3a0>
		__ticks = 1;
    5e60:	81 e0       	ldi	r24, 0x01	; 1
    5e62:	90 e0       	ldi	r25, 0x00	; 0
    5e64:	9c ab       	sts	0x5c, r25
    5e66:	8b ab       	sts	0x5b, r24
    5e68:	46 c0       	rjmp	.+140    	; 0x5ef6 <drop+0x42c>
	else if (__tmp > 65535)
    5e6a:	11 e0       	ldi	r17, 0x01	; 1
    5e6c:	6f a5       	lds	r22, 0x6f
    5e6e:	78 a9       	sts	0x48, r23
    5e70:	89 a9       	sts	0x49, r24
    5e72:	9a a9       	sts	0x4a, r25
    5e74:	20 e0       	ldi	r18, 0x00	; 0
    5e76:	3f ef       	ldi	r19, 0xFF	; 255
    5e78:	4f e7       	ldi	r20, 0x7F	; 127
    5e7a:	57 e4       	ldi	r21, 0x47	; 71
    5e7c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5e80:	18 16       	cp	r1, r24
    5e82:	0c f0       	brlt	.+2      	; 0x5e86 <drop+0x3bc>
    5e84:	10 e0       	ldi	r17, 0x00	; 0
    5e86:	11 23       	and	r17, r17
    5e88:	61 f1       	breq	.+88     	; 0x5ee2 <drop+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e8a:	6b a5       	lds	r22, 0x6b
    5e8c:	7c a5       	lds	r23, 0x6c
    5e8e:	8d a5       	lds	r24, 0x6d
    5e90:	9e a5       	lds	r25, 0x6e
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	40 e2       	ldi	r20, 0x20	; 32
    5e98:	51 e4       	ldi	r21, 0x41	; 65
    5e9a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	bc 01       	movw	r22, r24
    5ea4:	cd 01       	movw	r24, r26
    5ea6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5eaa:	dc 01       	movw	r26, r24
    5eac:	cb 01       	movw	r24, r22
    5eae:	9c ab       	sts	0x5c, r25
    5eb0:	8b ab       	sts	0x5b, r24
    5eb2:	12 c0       	rjmp	.+36     	; 0x5ed8 <drop+0x40e>
    5eb4:	80 e7       	ldi	r24, 0x70	; 112
    5eb6:	91 e0       	ldi	r25, 0x01	; 1
    5eb8:	9e ab       	sts	0x5e, r25
    5eba:	8d ab       	sts	0x5d, r24
    5ebc:	8d a9       	sts	0x4d, r24
    5ebe:	9e a9       	sts	0x4e, r25
    5ec0:	8c 01       	movw	r16, r24
    5ec2:	c8 01       	movw	r24, r16
    5ec4:	01 97       	sbiw	r24, 0x01	; 1
    5ec6:	f1 f7       	brne	.-4      	; 0x5ec4 <drop+0x3fa>
    5ec8:	8c 01       	movw	r16, r24
    5eca:	1e ab       	sts	0x5e, r17
    5ecc:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ece:	8b a9       	sts	0x4b, r24
    5ed0:	9c a9       	sts	0x4c, r25
    5ed2:	01 97       	sbiw	r24, 0x01	; 1
    5ed4:	9c ab       	sts	0x5c, r25
    5ed6:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ed8:	8b a9       	sts	0x4b, r24
    5eda:	9c a9       	sts	0x4c, r25
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	51 f7       	brne	.-44     	; 0x5eb4 <drop+0x3ea>
    5ee0:	17 c0       	rjmp	.+46     	; 0x5f10 <drop+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ee2:	6f a5       	lds	r22, 0x6f
    5ee4:	78 a9       	sts	0x48, r23
    5ee6:	89 a9       	sts	0x49, r24
    5ee8:	9a a9       	sts	0x4a, r25
    5eea:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5eee:	dc 01       	movw	r26, r24
    5ef0:	cb 01       	movw	r24, r22
    5ef2:	9c ab       	sts	0x5c, r25
    5ef4:	8b ab       	sts	0x5b, r24
    5ef6:	8b a9       	sts	0x4b, r24
    5ef8:	9c a9       	sts	0x4c, r25
    5efa:	98 af       	sts	0x78, r25
    5efc:	8f ab       	sts	0x5f, r24
    5efe:	8f a9       	sts	0x4f, r24
    5f00:	98 ad       	sts	0x68, r25
    5f02:	8c 01       	movw	r16, r24
    5f04:	f8 01       	movw	r30, r16
    5f06:	31 97       	sbiw	r30, 0x01	; 1
    5f08:	f1 f7       	brne	.-4      	; 0x5f06 <drop+0x43c>
    5f0a:	8f 01       	movw	r16, r30
    5f0c:	18 af       	sts	0x78, r17
    5f0e:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	servo_2(0);
    5f10:	80 e0       	ldi	r24, 0x00	; 0
    5f12:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <servo_2>
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	a6 e9       	ldi	r26, 0x96	; 150
    5f1c:	b3 e4       	ldi	r27, 0x43	; 67
    5f1e:	89 af       	sts	0x79, r24
    5f20:	9a af       	sts	0x7a, r25
    5f22:	ab af       	sts	0x7b, r26
    5f24:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5f26:	69 ad       	sts	0x69, r22
    5f28:	7a ad       	sts	0x6a, r23
    5f2a:	8b ad       	sts	0x6b, r24
    5f2c:	9c ad       	sts	0x6c, r25
    5f2e:	26 e6       	ldi	r18, 0x66	; 102
    5f30:	36 e6       	ldi	r19, 0x66	; 102
    5f32:	46 e6       	ldi	r20, 0x66	; 102
    5f34:	55 e4       	ldi	r21, 0x45	; 69
    5f36:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	cb 01       	movw	r24, r22
    5f3e:	9e 01       	movw	r18, r28
    5f40:	23 5c       	subi	r18, 0xC3	; 195
    5f42:	3f 4f       	sbci	r19, 0xFF	; 255
    5f44:	f9 01       	movw	r30, r18
    5f46:	80 83       	st	Z, r24
    5f48:	91 83       	std	Z+1, r25	; 0x01
    5f4a:	a2 83       	std	Z+2, r26	; 0x02
    5f4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f4e:	11 e0       	ldi	r17, 0x01	; 1
    5f50:	ce 01       	movw	r24, r28
    5f52:	cd 96       	adiw	r24, 0x3d	; 61
    5f54:	fc 01       	movw	r30, r24
    5f56:	60 81       	ld	r22, Z
    5f58:	71 81       	ldd	r23, Z+1	; 0x01
    5f5a:	82 81       	ldd	r24, Z+2	; 0x02
    5f5c:	93 81       	ldd	r25, Z+3	; 0x03
    5f5e:	20 e0       	ldi	r18, 0x00	; 0
    5f60:	30 e0       	ldi	r19, 0x00	; 0
    5f62:	40 e8       	ldi	r20, 0x80	; 128
    5f64:	5f e3       	ldi	r21, 0x3F	; 63
    5f66:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    5f6a:	88 23       	and	r24, r24
    5f6c:	0c f0       	brlt	.+2      	; 0x5f70 <drop+0x4a6>
    5f6e:	10 e0       	ldi	r17, 0x00	; 0
    5f70:	11 23       	and	r17, r17
    5f72:	49 f0       	breq	.+18     	; 0x5f86 <drop+0x4bc>
		__ticks = 1;
    5f74:	ce 01       	movw	r24, r28
    5f76:	8f 5b       	subi	r24, 0xBF	; 191
    5f78:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7a:	21 e0       	ldi	r18, 0x01	; 1
    5f7c:	30 e0       	ldi	r19, 0x00	; 0
    5f7e:	fc 01       	movw	r30, r24
    5f80:	31 83       	std	Z+1, r19	; 0x01
    5f82:	20 83       	st	Z, r18
    5f84:	6e c0       	rjmp	.+220    	; 0x6062 <drop+0x598>
	else if (__tmp > 65535)
    5f86:	11 e0       	ldi	r17, 0x01	; 1
    5f88:	ce 01       	movw	r24, r28
    5f8a:	cd 96       	adiw	r24, 0x3d	; 61
    5f8c:	fc 01       	movw	r30, r24
    5f8e:	60 81       	ld	r22, Z
    5f90:	71 81       	ldd	r23, Z+1	; 0x01
    5f92:	82 81       	ldd	r24, Z+2	; 0x02
    5f94:	93 81       	ldd	r25, Z+3	; 0x03
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	3f ef       	ldi	r19, 0xFF	; 255
    5f9a:	4f e7       	ldi	r20, 0x7F	; 127
    5f9c:	57 e4       	ldi	r21, 0x47	; 71
    5f9e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    5fa2:	18 16       	cp	r1, r24
    5fa4:	0c f0       	brlt	.+2      	; 0x5fa8 <drop+0x4de>
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	11 23       	and	r17, r17
    5faa:	09 f4       	brne	.+2      	; 0x5fae <drop+0x4e4>
    5fac:	49 c0       	rjmp	.+146    	; 0x6040 <drop+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fae:	69 ad       	sts	0x69, r22
    5fb0:	7a ad       	sts	0x6a, r23
    5fb2:	8b ad       	sts	0x6b, r24
    5fb4:	9c ad       	sts	0x6c, r25
    5fb6:	20 e0       	ldi	r18, 0x00	; 0
    5fb8:	30 e0       	ldi	r19, 0x00	; 0
    5fba:	40 e2       	ldi	r20, 0x20	; 32
    5fbc:	51 e4       	ldi	r21, 0x41	; 65
    5fbe:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	cb 01       	movw	r24, r22
    5fc6:	8e 01       	movw	r16, r28
    5fc8:	0f 5b       	subi	r16, 0xBF	; 191
    5fca:	1f 4f       	sbci	r17, 0xFF	; 255
    5fcc:	bc 01       	movw	r22, r24
    5fce:	cd 01       	movw	r24, r26
    5fd0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    5fd4:	dc 01       	movw	r26, r24
    5fd6:	cb 01       	movw	r24, r22
    5fd8:	f8 01       	movw	r30, r16
    5fda:	91 83       	std	Z+1, r25	; 0x01
    5fdc:	80 83       	st	Z, r24
    5fde:	27 c0       	rjmp	.+78     	; 0x602e <drop+0x564>
    5fe0:	ce 01       	movw	r24, r28
    5fe2:	8d 5b       	subi	r24, 0xBD	; 189
    5fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe6:	20 e7       	ldi	r18, 0x70	; 112
    5fe8:	31 e0       	ldi	r19, 0x01	; 1
    5fea:	fc 01       	movw	r30, r24
    5fec:	31 83       	std	Z+1, r19	; 0x01
    5fee:	20 83       	st	Z, r18
    5ff0:	ce 01       	movw	r24, r28
    5ff2:	8d 5b       	subi	r24, 0xBD	; 189
    5ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff6:	fc 01       	movw	r30, r24
    5ff8:	80 81       	ld	r24, Z
    5ffa:	91 81       	ldd	r25, Z+1	; 0x01
    5ffc:	8c 01       	movw	r16, r24
    5ffe:	c8 01       	movw	r24, r16
    6000:	01 97       	sbiw	r24, 0x01	; 1
    6002:	f1 f7       	brne	.-4      	; 0x6000 <drop+0x536>
    6004:	8c 01       	movw	r16, r24
    6006:	ce 01       	movw	r24, r28
    6008:	8d 5b       	subi	r24, 0xBD	; 189
    600a:	9f 4f       	sbci	r25, 0xFF	; 255
    600c:	fc 01       	movw	r30, r24
    600e:	11 83       	std	Z+1, r17	; 0x01
    6010:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6012:	ce 01       	movw	r24, r28
    6014:	8f 5b       	subi	r24, 0xBF	; 191
    6016:	9f 4f       	sbci	r25, 0xFF	; 255
    6018:	9e 01       	movw	r18, r28
    601a:	2f 5b       	subi	r18, 0xBF	; 191
    601c:	3f 4f       	sbci	r19, 0xFF	; 255
    601e:	f9 01       	movw	r30, r18
    6020:	20 81       	ld	r18, Z
    6022:	31 81       	ldd	r19, Z+1	; 0x01
    6024:	21 50       	subi	r18, 0x01	; 1
    6026:	30 40       	sbci	r19, 0x00	; 0
    6028:	fc 01       	movw	r30, r24
    602a:	31 83       	std	Z+1, r19	; 0x01
    602c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    602e:	ce 01       	movw	r24, r28
    6030:	8f 5b       	subi	r24, 0xBF	; 191
    6032:	9f 4f       	sbci	r25, 0xFF	; 255
    6034:	fc 01       	movw	r30, r24
    6036:	80 81       	ld	r24, Z
    6038:	91 81       	ldd	r25, Z+1	; 0x01
    603a:	00 97       	sbiw	r24, 0x00	; 0
    603c:	89 f6       	brne	.-94     	; 0x5fe0 <drop+0x516>
    603e:	2e c0       	rjmp	.+92     	; 0x609c <drop+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6040:	8e 01       	movw	r16, r28
    6042:	0f 5b       	subi	r16, 0xBF	; 191
    6044:	1f 4f       	sbci	r17, 0xFF	; 255
    6046:	ce 01       	movw	r24, r28
    6048:	cd 96       	adiw	r24, 0x3d	; 61
    604a:	fc 01       	movw	r30, r24
    604c:	60 81       	ld	r22, Z
    604e:	71 81       	ldd	r23, Z+1	; 0x01
    6050:	82 81       	ldd	r24, Z+2	; 0x02
    6052:	93 81       	ldd	r25, Z+3	; 0x03
    6054:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6058:	dc 01       	movw	r26, r24
    605a:	cb 01       	movw	r24, r22
    605c:	f8 01       	movw	r30, r16
    605e:	91 83       	std	Z+1, r25	; 0x01
    6060:	80 83       	st	Z, r24
    6062:	ce 01       	movw	r24, r28
    6064:	8b 5b       	subi	r24, 0xBB	; 187
    6066:	9f 4f       	sbci	r25, 0xFF	; 255
    6068:	9e 01       	movw	r18, r28
    606a:	2f 5b       	subi	r18, 0xBF	; 191
    606c:	3f 4f       	sbci	r19, 0xFF	; 255
    606e:	f9 01       	movw	r30, r18
    6070:	20 81       	ld	r18, Z
    6072:	31 81       	ldd	r19, Z+1	; 0x01
    6074:	fc 01       	movw	r30, r24
    6076:	31 83       	std	Z+1, r19	; 0x01
    6078:	20 83       	st	Z, r18
    607a:	ce 01       	movw	r24, r28
    607c:	8b 5b       	subi	r24, 0xBB	; 187
    607e:	9f 4f       	sbci	r25, 0xFF	; 255
    6080:	fc 01       	movw	r30, r24
    6082:	80 81       	ld	r24, Z
    6084:	91 81       	ldd	r25, Z+1	; 0x01
    6086:	8c 01       	movw	r16, r24
    6088:	c8 01       	movw	r24, r16
    608a:	01 97       	sbiw	r24, 0x01	; 1
    608c:	f1 f7       	brne	.-4      	; 0x608a <drop+0x5c0>
    608e:	8c 01       	movw	r16, r24
    6090:	ce 01       	movw	r24, r28
    6092:	8b 5b       	subi	r24, 0xBB	; 187
    6094:	9f 4f       	sbci	r25, 0xFF	; 255
    6096:	fc 01       	movw	r30, r24
    6098:	11 83       	std	Z+1, r17	; 0x01
    609a:	00 83       	st	Z, r16
	_delay_ms(300);
	
}
    609c:	ca 5b       	subi	r28, 0xBA	; 186
    609e:	df 4f       	sbci	r29, 0xFF	; 255
    60a0:	0f b6       	in	r0, 0x3f	; 63
    60a2:	f8 94       	cli
    60a4:	de bf       	out	0x3e, r29	; 62
    60a6:	0f be       	out	0x3f, r0	; 63
    60a8:	cd bf       	out	0x3d, r28	; 61
    60aa:	df 91       	pop	r29
    60ac:	cf 91       	pop	r28
    60ae:	1f 91       	pop	r17
    60b0:	0f 91       	pop	r16
    60b2:	08 95       	ret

000060b4 <front>:

void front()
{
    60b4:	0f 93       	push	r16
    60b6:	1f 93       	push	r17
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
    60bc:	cd b7       	in	r28, 0x3d	; 61
    60be:	de b7       	in	r29, 0x3e	; 62
    60c0:	e8 97       	sbiw	r28, 0x38	; 56
    60c2:	0f b6       	in	r0, 0x3f	; 63
    60c4:	f8 94       	cli
    60c6:	de bf       	out	0x3e, r29	; 62
    60c8:	0f be       	out	0x3f, r0	; 63
    60ca:	cd bf       	out	0x3d, r28	; 61
	gripper_open();
    60cc:	0e 94 b3 1c 	call	0x3966	; 0x3966 <gripper_open>
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	a6 e9       	ldi	r26, 0x96	; 150
    60d6:	b3 e4       	ldi	r27, 0x43	; 67
    60d8:	89 83       	std	Y+1, r24	; 0x01
    60da:	9a 83       	std	Y+2, r25	; 0x02
    60dc:	ab 83       	std	Y+3, r26	; 0x03
    60de:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    60e0:	69 81       	ldd	r22, Y+1	; 0x01
    60e2:	7a 81       	ldd	r23, Y+2	; 0x02
    60e4:	8b 81       	ldd	r24, Y+3	; 0x03
    60e6:	9c 81       	ldd	r25, Y+4	; 0x04
    60e8:	26 e6       	ldi	r18, 0x66	; 102
    60ea:	36 e6       	ldi	r19, 0x66	; 102
    60ec:	46 e6       	ldi	r20, 0x66	; 102
    60ee:	55 e4       	ldi	r21, 0x45	; 69
    60f0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    60f4:	dc 01       	movw	r26, r24
    60f6:	cb 01       	movw	r24, r22
    60f8:	8d 83       	std	Y+5, r24	; 0x05
    60fa:	9e 83       	std	Y+6, r25	; 0x06
    60fc:	af 83       	std	Y+7, r26	; 0x07
    60fe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6100:	11 e0       	ldi	r17, 0x01	; 1
    6102:	6d 81       	ldd	r22, Y+5	; 0x05
    6104:	7e 81       	ldd	r23, Y+6	; 0x06
    6106:	8f 81       	ldd	r24, Y+7	; 0x07
    6108:	98 85       	ldd	r25, Y+8	; 0x08
    610a:	20 e0       	ldi	r18, 0x00	; 0
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	40 e8       	ldi	r20, 0x80	; 128
    6110:	5f e3       	ldi	r21, 0x3F	; 63
    6112:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6116:	88 23       	and	r24, r24
    6118:	0c f0       	brlt	.+2      	; 0x611c <front+0x68>
    611a:	10 e0       	ldi	r17, 0x00	; 0
    611c:	11 23       	and	r17, r17
    611e:	29 f0       	breq	.+10     	; 0x612a <front+0x76>
		__ticks = 1;
    6120:	81 e0       	ldi	r24, 0x01	; 1
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	9a 87       	std	Y+10, r25	; 0x0a
    6126:	89 87       	std	Y+9, r24	; 0x09
    6128:	46 c0       	rjmp	.+140    	; 0x61b6 <front+0x102>
	else if (__tmp > 65535)
    612a:	11 e0       	ldi	r17, 0x01	; 1
    612c:	6d 81       	ldd	r22, Y+5	; 0x05
    612e:	7e 81       	ldd	r23, Y+6	; 0x06
    6130:	8f 81       	ldd	r24, Y+7	; 0x07
    6132:	98 85       	ldd	r25, Y+8	; 0x08
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	3f ef       	ldi	r19, 0xFF	; 255
    6138:	4f e7       	ldi	r20, 0x7F	; 127
    613a:	57 e4       	ldi	r21, 0x47	; 71
    613c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6140:	18 16       	cp	r1, r24
    6142:	0c f0       	brlt	.+2      	; 0x6146 <front+0x92>
    6144:	10 e0       	ldi	r17, 0x00	; 0
    6146:	11 23       	and	r17, r17
    6148:	61 f1       	breq	.+88     	; 0x61a2 <front+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    614a:	69 81       	ldd	r22, Y+1	; 0x01
    614c:	7a 81       	ldd	r23, Y+2	; 0x02
    614e:	8b 81       	ldd	r24, Y+3	; 0x03
    6150:	9c 81       	ldd	r25, Y+4	; 0x04
    6152:	20 e0       	ldi	r18, 0x00	; 0
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	40 e2       	ldi	r20, 0x20	; 32
    6158:	51 e4       	ldi	r21, 0x41	; 65
    615a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    615e:	dc 01       	movw	r26, r24
    6160:	cb 01       	movw	r24, r22
    6162:	bc 01       	movw	r22, r24
    6164:	cd 01       	movw	r24, r26
    6166:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    616a:	dc 01       	movw	r26, r24
    616c:	cb 01       	movw	r24, r22
    616e:	9a 87       	std	Y+10, r25	; 0x0a
    6170:	89 87       	std	Y+9, r24	; 0x09
    6172:	12 c0       	rjmp	.+36     	; 0x6198 <front+0xe4>
    6174:	80 e7       	ldi	r24, 0x70	; 112
    6176:	91 e0       	ldi	r25, 0x01	; 1
    6178:	9c 87       	std	Y+12, r25	; 0x0c
    617a:	8b 87       	std	Y+11, r24	; 0x0b
    617c:	8b 85       	ldd	r24, Y+11	; 0x0b
    617e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6180:	8c 01       	movw	r16, r24
    6182:	c8 01       	movw	r24, r16
    6184:	01 97       	sbiw	r24, 0x01	; 1
    6186:	f1 f7       	brne	.-4      	; 0x6184 <front+0xd0>
    6188:	8c 01       	movw	r16, r24
    618a:	1c 87       	std	Y+12, r17	; 0x0c
    618c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    618e:	89 85       	ldd	r24, Y+9	; 0x09
    6190:	9a 85       	ldd	r25, Y+10	; 0x0a
    6192:	01 97       	sbiw	r24, 0x01	; 1
    6194:	9a 87       	std	Y+10, r25	; 0x0a
    6196:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6198:	89 85       	ldd	r24, Y+9	; 0x09
    619a:	9a 85       	ldd	r25, Y+10	; 0x0a
    619c:	00 97       	sbiw	r24, 0x00	; 0
    619e:	51 f7       	brne	.-44     	; 0x6174 <front+0xc0>
    61a0:	17 c0       	rjmp	.+46     	; 0x61d0 <front+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61a2:	6d 81       	ldd	r22, Y+5	; 0x05
    61a4:	7e 81       	ldd	r23, Y+6	; 0x06
    61a6:	8f 81       	ldd	r24, Y+7	; 0x07
    61a8:	98 85       	ldd	r25, Y+8	; 0x08
    61aa:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    61ae:	dc 01       	movw	r26, r24
    61b0:	cb 01       	movw	r24, r22
    61b2:	9a 87       	std	Y+10, r25	; 0x0a
    61b4:	89 87       	std	Y+9, r24	; 0x09
    61b6:	89 85       	ldd	r24, Y+9	; 0x09
    61b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ba:	9e 87       	std	Y+14, r25	; 0x0e
    61bc:	8d 87       	std	Y+13, r24	; 0x0d
    61be:	8d 85       	ldd	r24, Y+13	; 0x0d
    61c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    61c2:	8c 01       	movw	r16, r24
    61c4:	c8 01       	movw	r24, r16
    61c6:	01 97       	sbiw	r24, 0x01	; 1
    61c8:	f1 f7       	brne	.-4      	; 0x61c6 <front+0x112>
    61ca:	8c 01       	movw	r16, r24
    61cc:	1e 87       	std	Y+14, r17	; 0x0e
    61ce:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_forward();
    61d0:	0e 94 7e 22 	call	0x44fc	; 0x44fc <arm_forward>
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	a6 e9       	ldi	r26, 0x96	; 150
    61da:	b3 e4       	ldi	r27, 0x43	; 67
    61dc:	8f 87       	std	Y+15, r24	; 0x0f
    61de:	98 8b       	std	Y+16, r25	; 0x10
    61e0:	a9 8b       	std	Y+17, r26	; 0x11
    61e2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    61e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    61e6:	78 89       	ldd	r23, Y+16	; 0x10
    61e8:	89 89       	ldd	r24, Y+17	; 0x11
    61ea:	9a 89       	ldd	r25, Y+18	; 0x12
    61ec:	26 e6       	ldi	r18, 0x66	; 102
    61ee:	36 e6       	ldi	r19, 0x66	; 102
    61f0:	46 e6       	ldi	r20, 0x66	; 102
    61f2:	55 e4       	ldi	r21, 0x45	; 69
    61f4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    61f8:	dc 01       	movw	r26, r24
    61fa:	cb 01       	movw	r24, r22
    61fc:	8b 8b       	std	Y+19, r24	; 0x13
    61fe:	9c 8b       	std	Y+20, r25	; 0x14
    6200:	ad 8b       	std	Y+21, r26	; 0x15
    6202:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6204:	11 e0       	ldi	r17, 0x01	; 1
    6206:	6b 89       	ldd	r22, Y+19	; 0x13
    6208:	7c 89       	ldd	r23, Y+20	; 0x14
    620a:	8d 89       	ldd	r24, Y+21	; 0x15
    620c:	9e 89       	ldd	r25, Y+22	; 0x16
    620e:	20 e0       	ldi	r18, 0x00	; 0
    6210:	30 e0       	ldi	r19, 0x00	; 0
    6212:	40 e8       	ldi	r20, 0x80	; 128
    6214:	5f e3       	ldi	r21, 0x3F	; 63
    6216:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    621a:	88 23       	and	r24, r24
    621c:	0c f0       	brlt	.+2      	; 0x6220 <front+0x16c>
    621e:	10 e0       	ldi	r17, 0x00	; 0
    6220:	11 23       	and	r17, r17
    6222:	29 f0       	breq	.+10     	; 0x622e <front+0x17a>
		__ticks = 1;
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	98 8f       	std	Y+24, r25	; 0x18
    622a:	8f 8b       	std	Y+23, r24	; 0x17
    622c:	46 c0       	rjmp	.+140    	; 0x62ba <front+0x206>
	else if (__tmp > 65535)
    622e:	11 e0       	ldi	r17, 0x01	; 1
    6230:	6b 89       	ldd	r22, Y+19	; 0x13
    6232:	7c 89       	ldd	r23, Y+20	; 0x14
    6234:	8d 89       	ldd	r24, Y+21	; 0x15
    6236:	9e 89       	ldd	r25, Y+22	; 0x16
    6238:	20 e0       	ldi	r18, 0x00	; 0
    623a:	3f ef       	ldi	r19, 0xFF	; 255
    623c:	4f e7       	ldi	r20, 0x7F	; 127
    623e:	57 e4       	ldi	r21, 0x47	; 71
    6240:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6244:	18 16       	cp	r1, r24
    6246:	0c f0       	brlt	.+2      	; 0x624a <front+0x196>
    6248:	10 e0       	ldi	r17, 0x00	; 0
    624a:	11 23       	and	r17, r17
    624c:	61 f1       	breq	.+88     	; 0x62a6 <front+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    624e:	6f 85       	ldd	r22, Y+15	; 0x0f
    6250:	78 89       	ldd	r23, Y+16	; 0x10
    6252:	89 89       	ldd	r24, Y+17	; 0x11
    6254:	9a 89       	ldd	r25, Y+18	; 0x12
    6256:	20 e0       	ldi	r18, 0x00	; 0
    6258:	30 e0       	ldi	r19, 0x00	; 0
    625a:	40 e2       	ldi	r20, 0x20	; 32
    625c:	51 e4       	ldi	r21, 0x41	; 65
    625e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6262:	dc 01       	movw	r26, r24
    6264:	cb 01       	movw	r24, r22
    6266:	bc 01       	movw	r22, r24
    6268:	cd 01       	movw	r24, r26
    626a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    626e:	dc 01       	movw	r26, r24
    6270:	cb 01       	movw	r24, r22
    6272:	98 8f       	std	Y+24, r25	; 0x18
    6274:	8f 8b       	std	Y+23, r24	; 0x17
    6276:	12 c0       	rjmp	.+36     	; 0x629c <front+0x1e8>
    6278:	80 e7       	ldi	r24, 0x70	; 112
    627a:	91 e0       	ldi	r25, 0x01	; 1
    627c:	9a 8f       	std	Y+26, r25	; 0x1a
    627e:	89 8f       	std	Y+25, r24	; 0x19
    6280:	89 8d       	ldd	r24, Y+25	; 0x19
    6282:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6284:	8c 01       	movw	r16, r24
    6286:	c8 01       	movw	r24, r16
    6288:	01 97       	sbiw	r24, 0x01	; 1
    628a:	f1 f7       	brne	.-4      	; 0x6288 <front+0x1d4>
    628c:	8c 01       	movw	r16, r24
    628e:	1a 8f       	std	Y+26, r17	; 0x1a
    6290:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6292:	8f 89       	ldd	r24, Y+23	; 0x17
    6294:	98 8d       	ldd	r25, Y+24	; 0x18
    6296:	01 97       	sbiw	r24, 0x01	; 1
    6298:	98 8f       	std	Y+24, r25	; 0x18
    629a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    629c:	8f 89       	ldd	r24, Y+23	; 0x17
    629e:	98 8d       	ldd	r25, Y+24	; 0x18
    62a0:	00 97       	sbiw	r24, 0x00	; 0
    62a2:	51 f7       	brne	.-44     	; 0x6278 <front+0x1c4>
    62a4:	17 c0       	rjmp	.+46     	; 0x62d4 <front+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62a6:	6b 89       	ldd	r22, Y+19	; 0x13
    62a8:	7c 89       	ldd	r23, Y+20	; 0x14
    62aa:	8d 89       	ldd	r24, Y+21	; 0x15
    62ac:	9e 89       	ldd	r25, Y+22	; 0x16
    62ae:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	98 8f       	std	Y+24, r25	; 0x18
    62b8:	8f 8b       	std	Y+23, r24	; 0x17
    62ba:	8f 89       	ldd	r24, Y+23	; 0x17
    62bc:	98 8d       	ldd	r25, Y+24	; 0x18
    62be:	9c 8f       	std	Y+28, r25	; 0x1c
    62c0:	8b 8f       	std	Y+27, r24	; 0x1b
    62c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62c6:	8c 01       	movw	r16, r24
    62c8:	c8 01       	movw	r24, r16
    62ca:	01 97       	sbiw	r24, 0x01	; 1
    62cc:	f1 f7       	brne	.-4      	; 0x62ca <front+0x216>
    62ce:	8c 01       	movw	r16, r24
    62d0:	1c 8f       	std	Y+28, r17	; 0x1c
    62d2:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	gripper_close();
    62d4:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_close>
    62d8:	80 e0       	ldi	r24, 0x00	; 0
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	a6 e9       	ldi	r26, 0x96	; 150
    62de:	b3 e4       	ldi	r27, 0x43	; 67
    62e0:	8d 8f       	std	Y+29, r24	; 0x1d
    62e2:	9e 8f       	std	Y+30, r25	; 0x1e
    62e4:	af 8f       	std	Y+31, r26	; 0x1f
    62e6:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    62e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    62ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
    62ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    62ee:	98 a1       	lds	r25, 0x48
    62f0:	26 e6       	ldi	r18, 0x66	; 102
    62f2:	36 e6       	ldi	r19, 0x66	; 102
    62f4:	46 e6       	ldi	r20, 0x66	; 102
    62f6:	55 e4       	ldi	r21, 0x45	; 69
    62f8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    62fc:	dc 01       	movw	r26, r24
    62fe:	cb 01       	movw	r24, r22
    6300:	89 a3       	lds	r24, 0x59
    6302:	9a a3       	lds	r25, 0x5a
    6304:	ab a3       	lds	r26, 0x5b
    6306:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6308:	11 e0       	ldi	r17, 0x01	; 1
    630a:	69 a1       	lds	r22, 0x49
    630c:	7a a1       	lds	r23, 0x4a
    630e:	8b a1       	lds	r24, 0x4b
    6310:	9c a1       	lds	r25, 0x4c
    6312:	20 e0       	ldi	r18, 0x00	; 0
    6314:	30 e0       	ldi	r19, 0x00	; 0
    6316:	40 e8       	ldi	r20, 0x80	; 128
    6318:	5f e3       	ldi	r21, 0x3F	; 63
    631a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    631e:	88 23       	and	r24, r24
    6320:	0c f0       	brlt	.+2      	; 0x6324 <front+0x270>
    6322:	10 e0       	ldi	r17, 0x00	; 0
    6324:	11 23       	and	r17, r17
    6326:	29 f0       	breq	.+10     	; 0x6332 <front+0x27e>
		__ticks = 1;
    6328:	81 e0       	ldi	r24, 0x01	; 1
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	9e a3       	lds	r25, 0x5e
    632e:	8d a3       	lds	r24, 0x5d
    6330:	46 c0       	rjmp	.+140    	; 0x63be <front+0x30a>
	else if (__tmp > 65535)
    6332:	11 e0       	ldi	r17, 0x01	; 1
    6334:	69 a1       	lds	r22, 0x49
    6336:	7a a1       	lds	r23, 0x4a
    6338:	8b a1       	lds	r24, 0x4b
    633a:	9c a1       	lds	r25, 0x4c
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	3f ef       	ldi	r19, 0xFF	; 255
    6340:	4f e7       	ldi	r20, 0x7F	; 127
    6342:	57 e4       	ldi	r21, 0x47	; 71
    6344:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6348:	18 16       	cp	r1, r24
    634a:	0c f0       	brlt	.+2      	; 0x634e <front+0x29a>
    634c:	10 e0       	ldi	r17, 0x00	; 0
    634e:	11 23       	and	r17, r17
    6350:	61 f1       	breq	.+88     	; 0x63aa <front+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6352:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6354:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6358:	98 a1       	lds	r25, 0x48
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	40 e2       	ldi	r20, 0x20	; 32
    6360:	51 e4       	ldi	r21, 0x41	; 65
    6362:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6366:	dc 01       	movw	r26, r24
    6368:	cb 01       	movw	r24, r22
    636a:	bc 01       	movw	r22, r24
    636c:	cd 01       	movw	r24, r26
    636e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	9e a3       	lds	r25, 0x5e
    6378:	8d a3       	lds	r24, 0x5d
    637a:	12 c0       	rjmp	.+36     	; 0x63a0 <front+0x2ec>
    637c:	80 e7       	ldi	r24, 0x70	; 112
    637e:	91 e0       	ldi	r25, 0x01	; 1
    6380:	98 a7       	lds	r25, 0x78
    6382:	8f a3       	lds	r24, 0x5f
    6384:	8f a1       	lds	r24, 0x4f
    6386:	98 a5       	lds	r25, 0x68
    6388:	8c 01       	movw	r16, r24
    638a:	c8 01       	movw	r24, r16
    638c:	01 97       	sbiw	r24, 0x01	; 1
    638e:	f1 f7       	brne	.-4      	; 0x638c <front+0x2d8>
    6390:	8c 01       	movw	r16, r24
    6392:	18 a7       	lds	r17, 0x78
    6394:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6396:	8d a1       	lds	r24, 0x4d
    6398:	9e a1       	lds	r25, 0x4e
    639a:	01 97       	sbiw	r24, 0x01	; 1
    639c:	9e a3       	lds	r25, 0x5e
    639e:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63a0:	8d a1       	lds	r24, 0x4d
    63a2:	9e a1       	lds	r25, 0x4e
    63a4:	00 97       	sbiw	r24, 0x00	; 0
    63a6:	51 f7       	brne	.-44     	; 0x637c <front+0x2c8>
    63a8:	17 c0       	rjmp	.+46     	; 0x63d8 <front+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63aa:	69 a1       	lds	r22, 0x49
    63ac:	7a a1       	lds	r23, 0x4a
    63ae:	8b a1       	lds	r24, 0x4b
    63b0:	9c a1       	lds	r25, 0x4c
    63b2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    63b6:	dc 01       	movw	r26, r24
    63b8:	cb 01       	movw	r24, r22
    63ba:	9e a3       	lds	r25, 0x5e
    63bc:	8d a3       	lds	r24, 0x5d
    63be:	8d a1       	lds	r24, 0x4d
    63c0:	9e a1       	lds	r25, 0x4e
    63c2:	9a a7       	lds	r25, 0x7a
    63c4:	89 a7       	lds	r24, 0x79
    63c6:	89 a5       	lds	r24, 0x69
    63c8:	9a a5       	lds	r25, 0x6a
    63ca:	8c 01       	movw	r16, r24
    63cc:	c8 01       	movw	r24, r16
    63ce:	01 97       	sbiw	r24, 0x01	; 1
    63d0:	f1 f7       	brne	.-4      	; 0x63ce <front+0x31a>
    63d2:	8c 01       	movw	r16, r24
    63d4:	1a a7       	lds	r17, 0x7a
    63d6:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	arm_backward();
    63d8:	0e 94 a6 23 	call	0x474c	; 0x474c <arm_backward>
    63dc:	80 e0       	ldi	r24, 0x00	; 0
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	a6 e9       	ldi	r26, 0x96	; 150
    63e2:	b3 e4       	ldi	r27, 0x43	; 67
    63e4:	8b a7       	lds	r24, 0x7b
    63e6:	9c a7       	lds	r25, 0x7c
    63e8:	ad a7       	lds	r26, 0x7d
    63ea:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    63ec:	6b a5       	lds	r22, 0x6b
    63ee:	7c a5       	lds	r23, 0x6c
    63f0:	8d a5       	lds	r24, 0x6d
    63f2:	9e a5       	lds	r25, 0x6e
    63f4:	26 e6       	ldi	r18, 0x66	; 102
    63f6:	36 e6       	ldi	r19, 0x66	; 102
    63f8:	46 e6       	ldi	r20, 0x66	; 102
    63fa:	55 e4       	ldi	r21, 0x45	; 69
    63fc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6400:	dc 01       	movw	r26, r24
    6402:	cb 01       	movw	r24, r22
    6404:	8f a7       	lds	r24, 0x7f
    6406:	98 ab       	sts	0x58, r25
    6408:	a9 ab       	sts	0x59, r26
    640a:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    640c:	11 e0       	ldi	r17, 0x01	; 1
    640e:	6f a5       	lds	r22, 0x6f
    6410:	78 a9       	sts	0x48, r23
    6412:	89 a9       	sts	0x49, r24
    6414:	9a a9       	sts	0x4a, r25
    6416:	20 e0       	ldi	r18, 0x00	; 0
    6418:	30 e0       	ldi	r19, 0x00	; 0
    641a:	40 e8       	ldi	r20, 0x80	; 128
    641c:	5f e3       	ldi	r21, 0x3F	; 63
    641e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6422:	88 23       	and	r24, r24
    6424:	0c f0       	brlt	.+2      	; 0x6428 <front+0x374>
    6426:	10 e0       	ldi	r17, 0x00	; 0
    6428:	11 23       	and	r17, r17
    642a:	29 f0       	breq	.+10     	; 0x6436 <front+0x382>
		__ticks = 1;
    642c:	81 e0       	ldi	r24, 0x01	; 1
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	9c ab       	sts	0x5c, r25
    6432:	8b ab       	sts	0x5b, r24
    6434:	46 c0       	rjmp	.+140    	; 0x64c2 <front+0x40e>
	else if (__tmp > 65535)
    6436:	11 e0       	ldi	r17, 0x01	; 1
    6438:	6f a5       	lds	r22, 0x6f
    643a:	78 a9       	sts	0x48, r23
    643c:	89 a9       	sts	0x49, r24
    643e:	9a a9       	sts	0x4a, r25
    6440:	20 e0       	ldi	r18, 0x00	; 0
    6442:	3f ef       	ldi	r19, 0xFF	; 255
    6444:	4f e7       	ldi	r20, 0x7F	; 127
    6446:	57 e4       	ldi	r21, 0x47	; 71
    6448:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    644c:	18 16       	cp	r1, r24
    644e:	0c f0       	brlt	.+2      	; 0x6452 <front+0x39e>
    6450:	10 e0       	ldi	r17, 0x00	; 0
    6452:	11 23       	and	r17, r17
    6454:	61 f1       	breq	.+88     	; 0x64ae <front+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6456:	6b a5       	lds	r22, 0x6b
    6458:	7c a5       	lds	r23, 0x6c
    645a:	8d a5       	lds	r24, 0x6d
    645c:	9e a5       	lds	r25, 0x6e
    645e:	20 e0       	ldi	r18, 0x00	; 0
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	40 e2       	ldi	r20, 0x20	; 32
    6464:	51 e4       	ldi	r21, 0x41	; 65
    6466:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    646a:	dc 01       	movw	r26, r24
    646c:	cb 01       	movw	r24, r22
    646e:	bc 01       	movw	r22, r24
    6470:	cd 01       	movw	r24, r26
    6472:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6476:	dc 01       	movw	r26, r24
    6478:	cb 01       	movw	r24, r22
    647a:	9c ab       	sts	0x5c, r25
    647c:	8b ab       	sts	0x5b, r24
    647e:	12 c0       	rjmp	.+36     	; 0x64a4 <front+0x3f0>
    6480:	80 e7       	ldi	r24, 0x70	; 112
    6482:	91 e0       	ldi	r25, 0x01	; 1
    6484:	9e ab       	sts	0x5e, r25
    6486:	8d ab       	sts	0x5d, r24
    6488:	8d a9       	sts	0x4d, r24
    648a:	9e a9       	sts	0x4e, r25
    648c:	8c 01       	movw	r16, r24
    648e:	c8 01       	movw	r24, r16
    6490:	01 97       	sbiw	r24, 0x01	; 1
    6492:	f1 f7       	brne	.-4      	; 0x6490 <front+0x3dc>
    6494:	8c 01       	movw	r16, r24
    6496:	1e ab       	sts	0x5e, r17
    6498:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    649a:	8b a9       	sts	0x4b, r24
    649c:	9c a9       	sts	0x4c, r25
    649e:	01 97       	sbiw	r24, 0x01	; 1
    64a0:	9c ab       	sts	0x5c, r25
    64a2:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64a4:	8b a9       	sts	0x4b, r24
    64a6:	9c a9       	sts	0x4c, r25
    64a8:	00 97       	sbiw	r24, 0x00	; 0
    64aa:	51 f7       	brne	.-44     	; 0x6480 <front+0x3cc>
    64ac:	17 c0       	rjmp	.+46     	; 0x64dc <front+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64ae:	6f a5       	lds	r22, 0x6f
    64b0:	78 a9       	sts	0x48, r23
    64b2:	89 a9       	sts	0x49, r24
    64b4:	9a a9       	sts	0x4a, r25
    64b6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    64ba:	dc 01       	movw	r26, r24
    64bc:	cb 01       	movw	r24, r22
    64be:	9c ab       	sts	0x5c, r25
    64c0:	8b ab       	sts	0x5b, r24
    64c2:	8b a9       	sts	0x4b, r24
    64c4:	9c a9       	sts	0x4c, r25
    64c6:	98 af       	sts	0x78, r25
    64c8:	8f ab       	sts	0x5f, r24
    64ca:	8f a9       	sts	0x4f, r24
    64cc:	98 ad       	sts	0x68, r25
    64ce:	8c 01       	movw	r16, r24
    64d0:	c8 01       	movw	r24, r16
    64d2:	01 97       	sbiw	r24, 0x01	; 1
    64d4:	f1 f7       	brne	.-4      	; 0x64d2 <front+0x41e>
    64d6:	8c 01       	movw	r16, r24
    64d8:	18 af       	sts	0x78, r17
    64da:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
    64dc:	e8 96       	adiw	r28, 0x38	; 56
    64de:	0f b6       	in	r0, 0x3f	; 63
    64e0:	f8 94       	cli
    64e2:	de bf       	out	0x3e, r29	; 62
    64e4:	0f be       	out	0x3f, r0	; 63
    64e6:	cd bf       	out	0x3d, r28	; 61
    64e8:	df 91       	pop	r29
    64ea:	cf 91       	pop	r28
    64ec:	1f 91       	pop	r17
    64ee:	0f 91       	pop	r16
    64f0:	08 95       	ret

000064f2 <read_line>:

*/

void read_line()

{
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62

    Left_white_line = (int) ADC_Conversion(3); //Getting data of Left WL Sensor
    64fa:	83 e0       	ldi	r24, 0x03	; 3
    64fc:	0e 94 22 1a 	call	0x3444	; 0x3444 <ADC_Conversion>
    6500:	80 93 48 03 	sts	0x0348, r24

    Center_white_line = (int) ADC_Conversion(2); //Getting data of Center WL Sensor
    6504:	82 e0       	ldi	r24, 0x02	; 2
    6506:	0e 94 22 1a 	call	0x3444	; 0x3444 <ADC_Conversion>
    650a:	80 93 49 03 	sts	0x0349, r24

    Right_white_line = (int) ADC_Conversion(1); //Getting data of Right WL Sensor
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	0e 94 22 1a 	call	0x3444	; 0x3444 <ADC_Conversion>
    6514:	80 93 4a 03 	sts	0x034A, r24

}
    6518:	df 91       	pop	r29
    651a:	cf 91       	pop	r28
    651c:	08 95       	ret

0000651e <display_line>:

*/

void display_line()

 {
    651e:	cf 93       	push	r28
    6520:	df 93       	push	r29
    6522:	cd b7       	in	r28, 0x3d	; 61
    6524:	de b7       	in	r29, 0x3e	; 62

    lcd_print(1,1,Left_white_line,3);
    6526:	80 91 48 03 	lds	r24, 0x0348
    652a:	28 2f       	mov	r18, r24
    652c:	30 e0       	ldi	r19, 0x00	; 0
    652e:	81 e0       	ldi	r24, 0x01	; 1
    6530:	61 e0       	ldi	r22, 0x01	; 1
    6532:	a9 01       	movw	r20, r18
    6534:	23 e0       	ldi	r18, 0x03	; 3
    6536:	30 e0       	ldi	r19, 0x00	; 0
    6538:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,5,Center_white_line,3);
    653c:	80 91 49 03 	lds	r24, 0x0349
    6540:	28 2f       	mov	r18, r24
    6542:	30 e0       	ldi	r19, 0x00	; 0
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	65 e0       	ldi	r22, 0x05	; 5
    6548:	a9 01       	movw	r20, r18
    654a:	23 e0       	ldi	r18, 0x03	; 3
    654c:	30 e0       	ldi	r19, 0x00	; 0
    654e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,9,Right_white_line,3);
    6552:	80 91 4a 03 	lds	r24, 0x034A
    6556:	28 2f       	mov	r18, r24
    6558:	30 e0       	ldi	r19, 0x00	; 0
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	69 e0       	ldi	r22, 0x09	; 9
    655e:	a9 01       	movw	r20, r18
    6560:	23 e0       	ldi	r18, 0x03	; 3
    6562:	30 e0       	ldi	r19, 0x00	; 0
    6564:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,1,line_cond,1);
    6568:	80 91 51 03 	lds	r24, 0x0351
    656c:	90 91 52 03 	lds	r25, 0x0352
    6570:	9c 01       	movw	r18, r24
    6572:	81 e0       	ldi	r24, 0x01	; 1
    6574:	61 e0       	ldi	r22, 0x01	; 1
    6576:	a9 01       	movw	r20, r18
    6578:	21 e0       	ldi	r18, 0x01	; 1
    657a:	30 e0       	ldi	r19, 0x00	; 0
    657c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    6580:	df 91       	pop	r29
    6582:	cf 91       	pop	r28
    6584:	08 95       	ret

00006586 <clear_count>:

*/

void clear_count()

{
    6586:	cf 93       	push	r28
    6588:	df 93       	push	r29
    658a:	cd b7       	in	r28, 0x3d	; 61
    658c:	de b7       	in	r29, 0x3e	; 62

    node = 0;
    658e:	10 92 66 03 	sts	0x0366, r1
    6592:	10 92 65 03 	sts	0x0365, r1

    node_flag = 0;
    6596:	10 92 86 04 	sts	0x0486, r1
    659a:	10 92 85 04 	sts	0x0485, r1

    left_flag = 0;
    659e:	10 92 58 03 	sts	0x0358, r1
    65a2:	10 92 57 03 	sts	0x0357, r1

    right_flag = 0;
    65a6:	10 92 5a 03 	sts	0x035A, r1
    65aa:	10 92 59 03 	sts	0x0359, r1

}
    65ae:	df 91       	pop	r29
    65b0:	cf 91       	pop	r28
    65b2:	08 95       	ret

000065b4 <enable_flags>:

*/

void enable_flags(int l_flag, int n_flag, int r_flag)

{
    65b4:	cf 93       	push	r28
    65b6:	df 93       	push	r29
    65b8:	00 d0       	rcall	.+0      	; 0x65ba <enable_flags+0x6>
    65ba:	00 d0       	rcall	.+0      	; 0x65bc <enable_flags+0x8>
    65bc:	cd b7       	in	r28, 0x3d	; 61
    65be:	de b7       	in	r29, 0x3e	; 62
    65c0:	9a 83       	std	Y+2, r25	; 0x02
    65c2:	89 83       	std	Y+1, r24	; 0x01
    65c4:	7c 83       	std	Y+4, r23	; 0x04
    65c6:	6b 83       	std	Y+3, r22	; 0x03
    65c8:	5e 83       	std	Y+6, r21	; 0x06
    65ca:	4d 83       	std	Y+5, r20	; 0x05

    en_left = l_flag;
    65cc:	89 81       	ldd	r24, Y+1	; 0x01
    65ce:	9a 81       	ldd	r25, Y+2	; 0x02
    65d0:	90 93 54 03 	sts	0x0354, r25
    65d4:	80 93 53 03 	sts	0x0353, r24

    en_right = r_flag;
    65d8:	8d 81       	ldd	r24, Y+5	; 0x05
    65da:	9e 81       	ldd	r25, Y+6	; 0x06
    65dc:	90 93 56 03 	sts	0x0356, r25
    65e0:	80 93 55 03 	sts	0x0355, r24

    en_node = n_flag;
    65e4:	8b 81       	ldd	r24, Y+3	; 0x03
    65e6:	9c 81       	ldd	r25, Y+4	; 0x04
    65e8:	90 93 01 02 	sts	0x0201, r25
    65ec:	80 93 00 02 	sts	0x0200, r24

}
    65f0:	26 96       	adiw	r28, 0x06	; 6
    65f2:	0f b6       	in	r0, 0x3f	; 63
    65f4:	f8 94       	cli
    65f6:	de bf       	out	0x3e, r29	; 62
    65f8:	0f be       	out	0x3f, r0	; 63
    65fa:	cd bf       	out	0x3d, r28	; 61
    65fc:	df 91       	pop	r29
    65fe:	cf 91       	pop	r28
    6600:	08 95       	ret

00006602 <line_conditions>:


*/

void line_conditions()
{
    6602:	cf 93       	push	r28
    6604:	df 93       	push	r29
    6606:	cd b7       	in	r28, 0x3d	; 61
    6608:	de b7       	in	r29, 0x3e	; 62
	// Nodes Condition
	if (Center_white_line >= 115 || Left_white_line >= 120 || Right_white_line >= 115 || (Center_white_line >=120 && (Left_white_line >= 110 || Right_white_line >= 110))) // 1 1 1
    660a:	80 91 49 03 	lds	r24, 0x0349
    660e:	83 37       	cpi	r24, 0x73	; 115
    6610:	a0 f4       	brcc	.+40     	; 0x663a <line_conditions+0x38>
    6612:	80 91 48 03 	lds	r24, 0x0348
    6616:	88 37       	cpi	r24, 0x78	; 120
    6618:	80 f4       	brcc	.+32     	; 0x663a <line_conditions+0x38>
    661a:	80 91 4a 03 	lds	r24, 0x034A
    661e:	83 37       	cpi	r24, 0x73	; 115
    6620:	60 f4       	brcc	.+24     	; 0x663a <line_conditions+0x38>
    6622:	80 91 49 03 	lds	r24, 0x0349
    6626:	88 37       	cpi	r24, 0x78	; 120
    6628:	a8 f0       	brcs	.+42     	; 0x6654 <line_conditions+0x52>
    662a:	80 91 48 03 	lds	r24, 0x0348
    662e:	8e 36       	cpi	r24, 0x6E	; 110
    6630:	20 f4       	brcc	.+8      	; 0x663a <line_conditions+0x38>
    6632:	80 91 4a 03 	lds	r24, 0x034A
    6636:	8e 36       	cpi	r24, 0x6E	; 110
    6638:	68 f0       	brcs	.+26     	; 0x6654 <line_conditions+0x52>
	{
		line_cond = 1;
    663a:	81 e0       	ldi	r24, 0x01	; 1
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	90 93 52 03 	sts	0x0352, r25
    6642:	80 93 51 03 	sts	0x0351, r24
		node_flag = 1;
    6646:	81 e0       	ldi	r24, 0x01	; 1
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	90 93 86 04 	sts	0x0486, r25
    664e:	80 93 85 04 	sts	0x0485, r24
    6652:	71 c0       	rjmp	.+226    	; 0x6736 <line_conditions+0x134>
	}
	
	//Straight Line Condition
	else if (Left_white_line < 11  && Center_white_line >= 14 && Right_white_line < 11) // 0 1 0
    6654:	80 91 48 03 	lds	r24, 0x0348
    6658:	8b 30       	cpi	r24, 0x0B	; 11
    665a:	78 f4       	brcc	.+30     	; 0x667a <line_conditions+0x78>
    665c:	80 91 49 03 	lds	r24, 0x0349
    6660:	8e 30       	cpi	r24, 0x0E	; 14
    6662:	58 f0       	brcs	.+22     	; 0x667a <line_conditions+0x78>
    6664:	80 91 4a 03 	lds	r24, 0x034A
    6668:	8b 30       	cpi	r24, 0x0B	; 11
    666a:	38 f4       	brcc	.+14     	; 0x667a <line_conditions+0x78>
	{
		line_cond = 2;
    666c:	82 e0       	ldi	r24, 0x02	; 2
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	90 93 52 03 	sts	0x0352, r25
    6674:	80 93 51 03 	sts	0x0351, r24
    6678:	5e c0       	rjmp	.+188    	; 0x6736 <line_conditions+0x134>
	}
	
	//Straight Line Condition (Robot moved slightly towards right)
	else if (Left_white_line > 20 && Center_white_line < 11 && Right_white_line < 11) // 1 0 0
    667a:	80 91 48 03 	lds	r24, 0x0348
    667e:	85 31       	cpi	r24, 0x15	; 21
    6680:	78 f0       	brcs	.+30     	; 0x66a0 <line_conditions+0x9e>
    6682:	80 91 49 03 	lds	r24, 0x0349
    6686:	8b 30       	cpi	r24, 0x0B	; 11
    6688:	58 f4       	brcc	.+22     	; 0x66a0 <line_conditions+0x9e>
    668a:	80 91 4a 03 	lds	r24, 0x034A
    668e:	8b 30       	cpi	r24, 0x0B	; 11
    6690:	38 f4       	brcc	.+14     	; 0x66a0 <line_conditions+0x9e>
	{
		line_cond = 3;
    6692:	83 e0       	ldi	r24, 0x03	; 3
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	90 93 52 03 	sts	0x0352, r25
    669a:	80 93 51 03 	sts	0x0351, r24
    669e:	4b c0       	rjmp	.+150    	; 0x6736 <line_conditions+0x134>
	}

        else if (Left_white_line > 10 && Center_white_line > 10 && Right_white_line < 11) // 1 1 0
    66a0:	80 91 48 03 	lds	r24, 0x0348
    66a4:	8b 30       	cpi	r24, 0x0B	; 11
    66a6:	78 f0       	brcs	.+30     	; 0x66c6 <line_conditions+0xc4>
    66a8:	80 91 49 03 	lds	r24, 0x0349
    66ac:	8b 30       	cpi	r24, 0x0B	; 11
    66ae:	58 f0       	brcs	.+22     	; 0x66c6 <line_conditions+0xc4>
    66b0:	80 91 4a 03 	lds	r24, 0x034A
    66b4:	8b 30       	cpi	r24, 0x0B	; 11
    66b6:	38 f4       	brcc	.+14     	; 0x66c6 <line_conditions+0xc4>
	{
		line_cond = 6;//slighty_L
    66b8:	86 e0       	ldi	r24, 0x06	; 6
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	90 93 52 03 	sts	0x0352, r25
    66c0:	80 93 51 03 	sts	0x0351, r24
    66c4:	38 c0       	rjmp	.+112    	; 0x6736 <line_conditions+0x134>
	}

        
	//Straight Line Condition (Robot moved slightly towards left)
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line > 20) // 0 0 1
    66c6:	80 91 48 03 	lds	r24, 0x0348
    66ca:	8b 30       	cpi	r24, 0x0B	; 11
    66cc:	78 f4       	brcc	.+30     	; 0x66ec <line_conditions+0xea>
    66ce:	80 91 49 03 	lds	r24, 0x0349
    66d2:	8b 30       	cpi	r24, 0x0B	; 11
    66d4:	58 f4       	brcc	.+22     	; 0x66ec <line_conditions+0xea>
    66d6:	80 91 4a 03 	lds	r24, 0x034A
    66da:	85 31       	cpi	r24, 0x15	; 21
    66dc:	38 f0       	brcs	.+14     	; 0x66ec <line_conditions+0xea>
	{
		line_cond = 4;
    66de:	84 e0       	ldi	r24, 0x04	; 4
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	90 93 52 03 	sts	0x0352, r25
    66e6:	80 93 51 03 	sts	0x0351, r24
    66ea:	25 c0       	rjmp	.+74     	; 0x6736 <line_conditions+0x134>
	}

        else if (Left_white_line < 11 && Center_white_line > 11 && Right_white_line > 11) // 0 1 1
    66ec:	80 91 48 03 	lds	r24, 0x0348
    66f0:	8b 30       	cpi	r24, 0x0B	; 11
    66f2:	78 f4       	brcc	.+30     	; 0x6712 <line_conditions+0x110>
    66f4:	80 91 49 03 	lds	r24, 0x0349
    66f8:	8c 30       	cpi	r24, 0x0C	; 12
    66fa:	58 f0       	brcs	.+22     	; 0x6712 <line_conditions+0x110>
    66fc:	80 91 4a 03 	lds	r24, 0x034A
    6700:	8c 30       	cpi	r24, 0x0C	; 12
    6702:	38 f0       	brcs	.+14     	; 0x6712 <line_conditions+0x110>
	{
		line_cond = 7;//slighty_R
    6704:	87 e0       	ldi	r24, 0x07	; 7
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	90 93 52 03 	sts	0x0352, r25
    670c:	80 93 51 03 	sts	0x0351, r24
    6710:	12 c0       	rjmp	.+36     	; 0x6736 <line_conditions+0x134>
	}

	//No Line Condition
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line < 11) // 0 0 0
    6712:	80 91 48 03 	lds	r24, 0x0348
    6716:	8b 30       	cpi	r24, 0x0B	; 11
    6718:	70 f4       	brcc	.+28     	; 0x6736 <line_conditions+0x134>
    671a:	80 91 49 03 	lds	r24, 0x0349
    671e:	8b 30       	cpi	r24, 0x0B	; 11
    6720:	50 f4       	brcc	.+20     	; 0x6736 <line_conditions+0x134>
    6722:	80 91 4a 03 	lds	r24, 0x034A
    6726:	8b 30       	cpi	r24, 0x0B	; 11
    6728:	30 f4       	brcc	.+12     	; 0x6736 <line_conditions+0x134>
	{
		line_cond = 5;
    672a:	85 e0       	ldi	r24, 0x05	; 5
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	90 93 52 03 	sts	0x0352, r25
    6732:	80 93 51 03 	sts	0x0351, r24
	}

}
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	08 95       	ret

0000673c <line_follow>:

*/

void line_follow() 

{
    673c:	0f 93       	push	r16
    673e:	1f 93       	push	r17
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
    6744:	cd b7       	in	r28, 0x3d	; 61
    6746:	de b7       	in	r29, 0x3e	; 62
    6748:	e8 97       	sbiw	r28, 0x38	; 56
    674a:	0f b6       	in	r0, 0x3f	; 63
    674c:	f8 94       	cli
    674e:	de bf       	out	0x3e, r29	; 62
    6750:	0f be       	out	0x3f, r0	; 63
    6752:	cd bf       	out	0x3d, r28	; 61

    if (t4_flag == 1) 
    6754:	80 91 4d 03 	lds	r24, 0x034D
    6758:	90 91 4e 03 	lds	r25, 0x034E
    675c:	81 30       	cpi	r24, 0x01	; 1
    675e:	91 05       	cpc	r25, r1
    6760:	61 f4       	brne	.+24     	; 0x677a <line_follow+0x3e>

	{

        node_flag = 0;
    6762:	10 92 86 04 	sts	0x0486, r1
    6766:	10 92 85 04 	sts	0x0485, r1

        left_flag = 0;
    676a:	10 92 58 03 	sts	0x0358, r1
    676e:	10 92 57 03 	sts	0x0357, r1

        right_flag = 0;
    6772:	10 92 5a 03 	sts	0x035A, r1
    6776:	10 92 59 03 	sts	0x0359, r1

    }



    if (node_flag == 1)
    677a:	80 91 85 04 	lds	r24, 0x0485
    677e:	90 91 86 04 	lds	r25, 0x0486
    6782:	81 30       	cpi	r24, 0x01	; 1
    6784:	91 05       	cpc	r25, r1
    6786:	61 f5       	brne	.+88     	; 0x67e0 <line_follow+0xa4>

	 {

        start_timer4(10);
    6788:	8a e0       	ldi	r24, 0x0A	; 10
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	0e 94 15 1b 	call	0x362a	; 0x362a <start_timer4>

		buzz(50);
    6790:	25 e0       	ldi	r18, 0x05	; 5
    6792:	3e e5       	ldi	r19, 0x5E	; 94
    6794:	82 e3       	ldi	r24, 0x32	; 50
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	f9 01       	movw	r30, r18
    679a:	19 95       	eicall

		node++;		
    679c:	80 91 65 03 	lds	r24, 0x0365
    67a0:	90 91 66 03 	lds	r25, 0x0366
    67a4:	01 96       	adiw	r24, 0x01	; 1
    67a6:	90 93 66 03 	sts	0x0366, r25
    67aa:	80 93 65 03 	sts	0x0365, r24

		forward();
    67ae:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

		velocity(255,254);
    67b2:	8f ef       	ldi	r24, 0xFF	; 255
    67b4:	6e ef       	ldi	r22, 0xFE	; 254
    67b6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>

        node_flag = 0;
    67ba:	10 92 86 04 	sts	0x0486, r1
    67be:	10 92 85 04 	sts	0x0485, r1

		travel_path(master_path[node]);
    67c2:	2f ee       	ldi	r18, 0xEF	; 239
    67c4:	3f e4       	ldi	r19, 0x4F	; 79
    67c6:	80 91 65 03 	lds	r24, 0x0365
    67ca:	90 91 66 03 	lds	r25, 0x0366
    67ce:	87 59       	subi	r24, 0x97	; 151
    67d0:	9c 4f       	sbci	r25, 0xFC	; 252
    67d2:	fc 01       	movw	r30, r24
    67d4:	80 81       	ld	r24, Z
    67d6:	88 2f       	mov	r24, r24
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	f9 01       	movw	r30, r18
    67dc:	19 95       	eicall
    67de:	66 c2       	rjmp	.+1228   	; 0x6cac <line_follow+0x570>

	 }



    else if (line_cond == 2)
    67e0:	80 91 51 03 	lds	r24, 0x0351
    67e4:	90 91 52 03 	lds	r25, 0x0352
    67e8:	82 30       	cpi	r24, 0x02	; 2
    67ea:	91 05       	cpc	r25, r1
    67ec:	39 f4       	brne	.+14     	; 0x67fc <line_follow+0xc0>

	{

        forward();
    67ee:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 254);
    67f2:	8f ef       	ldi	r24, 0xFF	; 255
    67f4:	6e ef       	ldi	r22, 0xFE	; 254
    67f6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    67fa:	58 c2       	rjmp	.+1200   	; 0x6cac <line_follow+0x570>

    } 

	else if (line_cond == 3)
    67fc:	80 91 51 03 	lds	r24, 0x0351
    6800:	90 91 52 03 	lds	r25, 0x0352
    6804:	83 30       	cpi	r24, 0x03	; 3
    6806:	91 05       	cpc	r25, r1
    6808:	09 f0       	breq	.+2      	; 0x680c <line_follow+0xd0>
    680a:	89 c0       	rjmp	.+274    	; 0x691e <line_follow+0x1e2>

	{

        stop();
    680c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6810:	80 e0       	ldi	r24, 0x00	; 0
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	a0 e2       	ldi	r26, 0x20	; 32
    6816:	b1 e4       	ldi	r27, 0x41	; 65
    6818:	89 83       	std	Y+1, r24	; 0x01
    681a:	9a 83       	std	Y+2, r25	; 0x02
    681c:	ab 83       	std	Y+3, r26	; 0x03
    681e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6820:	69 81       	ldd	r22, Y+1	; 0x01
    6822:	7a 81       	ldd	r23, Y+2	; 0x02
    6824:	8b 81       	ldd	r24, Y+3	; 0x03
    6826:	9c 81       	ldd	r25, Y+4	; 0x04
    6828:	26 e6       	ldi	r18, 0x66	; 102
    682a:	36 e6       	ldi	r19, 0x66	; 102
    682c:	46 e6       	ldi	r20, 0x66	; 102
    682e:	55 e4       	ldi	r21, 0x45	; 69
    6830:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6834:	dc 01       	movw	r26, r24
    6836:	cb 01       	movw	r24, r22
    6838:	8d 83       	std	Y+5, r24	; 0x05
    683a:	9e 83       	std	Y+6, r25	; 0x06
    683c:	af 83       	std	Y+7, r26	; 0x07
    683e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6840:	11 e0       	ldi	r17, 0x01	; 1
    6842:	6d 81       	ldd	r22, Y+5	; 0x05
    6844:	7e 81       	ldd	r23, Y+6	; 0x06
    6846:	8f 81       	ldd	r24, Y+7	; 0x07
    6848:	98 85       	ldd	r25, Y+8	; 0x08
    684a:	20 e0       	ldi	r18, 0x00	; 0
    684c:	30 e0       	ldi	r19, 0x00	; 0
    684e:	40 e8       	ldi	r20, 0x80	; 128
    6850:	5f e3       	ldi	r21, 0x3F	; 63
    6852:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6856:	88 23       	and	r24, r24
    6858:	0c f0       	brlt	.+2      	; 0x685c <line_follow+0x120>
    685a:	10 e0       	ldi	r17, 0x00	; 0
    685c:	11 23       	and	r17, r17
    685e:	29 f0       	breq	.+10     	; 0x686a <line_follow+0x12e>
		__ticks = 1;
    6860:	81 e0       	ldi	r24, 0x01	; 1
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	9a 87       	std	Y+10, r25	; 0x0a
    6866:	89 87       	std	Y+9, r24	; 0x09
    6868:	46 c0       	rjmp	.+140    	; 0x68f6 <line_follow+0x1ba>
	else if (__tmp > 65535)
    686a:	11 e0       	ldi	r17, 0x01	; 1
    686c:	6d 81       	ldd	r22, Y+5	; 0x05
    686e:	7e 81       	ldd	r23, Y+6	; 0x06
    6870:	8f 81       	ldd	r24, Y+7	; 0x07
    6872:	98 85       	ldd	r25, Y+8	; 0x08
    6874:	20 e0       	ldi	r18, 0x00	; 0
    6876:	3f ef       	ldi	r19, 0xFF	; 255
    6878:	4f e7       	ldi	r20, 0x7F	; 127
    687a:	57 e4       	ldi	r21, 0x47	; 71
    687c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6880:	18 16       	cp	r1, r24
    6882:	0c f0       	brlt	.+2      	; 0x6886 <line_follow+0x14a>
    6884:	10 e0       	ldi	r17, 0x00	; 0
    6886:	11 23       	and	r17, r17
    6888:	61 f1       	breq	.+88     	; 0x68e2 <line_follow+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    688a:	69 81       	ldd	r22, Y+1	; 0x01
    688c:	7a 81       	ldd	r23, Y+2	; 0x02
    688e:	8b 81       	ldd	r24, Y+3	; 0x03
    6890:	9c 81       	ldd	r25, Y+4	; 0x04
    6892:	20 e0       	ldi	r18, 0x00	; 0
    6894:	30 e0       	ldi	r19, 0x00	; 0
    6896:	40 e2       	ldi	r20, 0x20	; 32
    6898:	51 e4       	ldi	r21, 0x41	; 65
    689a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    689e:	dc 01       	movw	r26, r24
    68a0:	cb 01       	movw	r24, r22
    68a2:	bc 01       	movw	r22, r24
    68a4:	cd 01       	movw	r24, r26
    68a6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    68aa:	dc 01       	movw	r26, r24
    68ac:	cb 01       	movw	r24, r22
    68ae:	9a 87       	std	Y+10, r25	; 0x0a
    68b0:	89 87       	std	Y+9, r24	; 0x09
    68b2:	12 c0       	rjmp	.+36     	; 0x68d8 <line_follow+0x19c>
    68b4:	80 e7       	ldi	r24, 0x70	; 112
    68b6:	91 e0       	ldi	r25, 0x01	; 1
    68b8:	9c 87       	std	Y+12, r25	; 0x0c
    68ba:	8b 87       	std	Y+11, r24	; 0x0b
    68bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    68be:	9c 85       	ldd	r25, Y+12	; 0x0c
    68c0:	8c 01       	movw	r16, r24
    68c2:	c8 01       	movw	r24, r16
    68c4:	01 97       	sbiw	r24, 0x01	; 1
    68c6:	f1 f7       	brne	.-4      	; 0x68c4 <line_follow+0x188>
    68c8:	8c 01       	movw	r16, r24
    68ca:	1c 87       	std	Y+12, r17	; 0x0c
    68cc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68ce:	89 85       	ldd	r24, Y+9	; 0x09
    68d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    68d2:	01 97       	sbiw	r24, 0x01	; 1
    68d4:	9a 87       	std	Y+10, r25	; 0x0a
    68d6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68d8:	89 85       	ldd	r24, Y+9	; 0x09
    68da:	9a 85       	ldd	r25, Y+10	; 0x0a
    68dc:	00 97       	sbiw	r24, 0x00	; 0
    68de:	51 f7       	brne	.-44     	; 0x68b4 <line_follow+0x178>
    68e0:	17 c0       	rjmp	.+46     	; 0x6910 <line_follow+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68e2:	6d 81       	ldd	r22, Y+5	; 0x05
    68e4:	7e 81       	ldd	r23, Y+6	; 0x06
    68e6:	8f 81       	ldd	r24, Y+7	; 0x07
    68e8:	98 85       	ldd	r25, Y+8	; 0x08
    68ea:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    68ee:	dc 01       	movw	r26, r24
    68f0:	cb 01       	movw	r24, r22
    68f2:	9a 87       	std	Y+10, r25	; 0x0a
    68f4:	89 87       	std	Y+9, r24	; 0x09
    68f6:	89 85       	ldd	r24, Y+9	; 0x09
    68f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    68fa:	9e 87       	std	Y+14, r25	; 0x0e
    68fc:	8d 87       	std	Y+13, r24	; 0x0d
    68fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6900:	9e 85       	ldd	r25, Y+14	; 0x0e
    6902:	8c 01       	movw	r16, r24
    6904:	f8 01       	movw	r30, r16
    6906:	31 97       	sbiw	r30, 0x01	; 1
    6908:	f1 f7       	brne	.-4      	; 0x6906 <line_follow+0x1ca>
    690a:	8f 01       	movw	r16, r30
    690c:	1e 87       	std	Y+14, r17	; 0x0e
    690e:	0d 87       	std	Y+13, r16	; 0x0d

        _delay_ms(10);

        forward();
    6910:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(190, 255);
    6914:	8e eb       	ldi	r24, 0xBE	; 190
    6916:	6f ef       	ldi	r22, 0xFF	; 255
    6918:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    691c:	c7 c1       	rjmp	.+910    	; 0x6cac <line_follow+0x570>

    } 

	else if (line_cond == 4)
    691e:	80 91 51 03 	lds	r24, 0x0351
    6922:	90 91 52 03 	lds	r25, 0x0352
    6926:	84 30       	cpi	r24, 0x04	; 4
    6928:	91 05       	cpc	r25, r1
    692a:	09 f0       	breq	.+2      	; 0x692e <line_follow+0x1f2>
    692c:	89 c0       	rjmp	.+274    	; 0x6a40 <line_follow+0x304>

	{

        stop();
    692e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6932:	80 e0       	ldi	r24, 0x00	; 0
    6934:	90 e0       	ldi	r25, 0x00	; 0
    6936:	a0 e2       	ldi	r26, 0x20	; 32
    6938:	b1 e4       	ldi	r27, 0x41	; 65
    693a:	8f 87       	std	Y+15, r24	; 0x0f
    693c:	98 8b       	std	Y+16, r25	; 0x10
    693e:	a9 8b       	std	Y+17, r26	; 0x11
    6940:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6942:	6f 85       	ldd	r22, Y+15	; 0x0f
    6944:	78 89       	ldd	r23, Y+16	; 0x10
    6946:	89 89       	ldd	r24, Y+17	; 0x11
    6948:	9a 89       	ldd	r25, Y+18	; 0x12
    694a:	26 e6       	ldi	r18, 0x66	; 102
    694c:	36 e6       	ldi	r19, 0x66	; 102
    694e:	46 e6       	ldi	r20, 0x66	; 102
    6950:	55 e4       	ldi	r21, 0x45	; 69
    6952:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6956:	dc 01       	movw	r26, r24
    6958:	cb 01       	movw	r24, r22
    695a:	8b 8b       	std	Y+19, r24	; 0x13
    695c:	9c 8b       	std	Y+20, r25	; 0x14
    695e:	ad 8b       	std	Y+21, r26	; 0x15
    6960:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6962:	11 e0       	ldi	r17, 0x01	; 1
    6964:	6b 89       	ldd	r22, Y+19	; 0x13
    6966:	7c 89       	ldd	r23, Y+20	; 0x14
    6968:	8d 89       	ldd	r24, Y+21	; 0x15
    696a:	9e 89       	ldd	r25, Y+22	; 0x16
    696c:	20 e0       	ldi	r18, 0x00	; 0
    696e:	30 e0       	ldi	r19, 0x00	; 0
    6970:	40 e8       	ldi	r20, 0x80	; 128
    6972:	5f e3       	ldi	r21, 0x3F	; 63
    6974:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6978:	88 23       	and	r24, r24
    697a:	0c f0       	brlt	.+2      	; 0x697e <line_follow+0x242>
    697c:	10 e0       	ldi	r17, 0x00	; 0
    697e:	11 23       	and	r17, r17
    6980:	29 f0       	breq	.+10     	; 0x698c <line_follow+0x250>
		__ticks = 1;
    6982:	81 e0       	ldi	r24, 0x01	; 1
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	98 8f       	std	Y+24, r25	; 0x18
    6988:	8f 8b       	std	Y+23, r24	; 0x17
    698a:	46 c0       	rjmp	.+140    	; 0x6a18 <line_follow+0x2dc>
	else if (__tmp > 65535)
    698c:	11 e0       	ldi	r17, 0x01	; 1
    698e:	6b 89       	ldd	r22, Y+19	; 0x13
    6990:	7c 89       	ldd	r23, Y+20	; 0x14
    6992:	8d 89       	ldd	r24, Y+21	; 0x15
    6994:	9e 89       	ldd	r25, Y+22	; 0x16
    6996:	20 e0       	ldi	r18, 0x00	; 0
    6998:	3f ef       	ldi	r19, 0xFF	; 255
    699a:	4f e7       	ldi	r20, 0x7F	; 127
    699c:	57 e4       	ldi	r21, 0x47	; 71
    699e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    69a2:	18 16       	cp	r1, r24
    69a4:	0c f0       	brlt	.+2      	; 0x69a8 <line_follow+0x26c>
    69a6:	10 e0       	ldi	r17, 0x00	; 0
    69a8:	11 23       	and	r17, r17
    69aa:	61 f1       	breq	.+88     	; 0x6a04 <line_follow+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    69ae:	78 89       	ldd	r23, Y+16	; 0x10
    69b0:	89 89       	ldd	r24, Y+17	; 0x11
    69b2:	9a 89       	ldd	r25, Y+18	; 0x12
    69b4:	20 e0       	ldi	r18, 0x00	; 0
    69b6:	30 e0       	ldi	r19, 0x00	; 0
    69b8:	40 e2       	ldi	r20, 0x20	; 32
    69ba:	51 e4       	ldi	r21, 0x41	; 65
    69bc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    69c0:	dc 01       	movw	r26, r24
    69c2:	cb 01       	movw	r24, r22
    69c4:	bc 01       	movw	r22, r24
    69c6:	cd 01       	movw	r24, r26
    69c8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    69cc:	dc 01       	movw	r26, r24
    69ce:	cb 01       	movw	r24, r22
    69d0:	98 8f       	std	Y+24, r25	; 0x18
    69d2:	8f 8b       	std	Y+23, r24	; 0x17
    69d4:	12 c0       	rjmp	.+36     	; 0x69fa <line_follow+0x2be>
    69d6:	80 e7       	ldi	r24, 0x70	; 112
    69d8:	91 e0       	ldi	r25, 0x01	; 1
    69da:	9a 8f       	std	Y+26, r25	; 0x1a
    69dc:	89 8f       	std	Y+25, r24	; 0x19
    69de:	89 8d       	ldd	r24, Y+25	; 0x19
    69e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    69e2:	8c 01       	movw	r16, r24
    69e4:	c8 01       	movw	r24, r16
    69e6:	01 97       	sbiw	r24, 0x01	; 1
    69e8:	f1 f7       	brne	.-4      	; 0x69e6 <line_follow+0x2aa>
    69ea:	8c 01       	movw	r16, r24
    69ec:	1a 8f       	std	Y+26, r17	; 0x1a
    69ee:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69f0:	8f 89       	ldd	r24, Y+23	; 0x17
    69f2:	98 8d       	ldd	r25, Y+24	; 0x18
    69f4:	01 97       	sbiw	r24, 0x01	; 1
    69f6:	98 8f       	std	Y+24, r25	; 0x18
    69f8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69fa:	8f 89       	ldd	r24, Y+23	; 0x17
    69fc:	98 8d       	ldd	r25, Y+24	; 0x18
    69fe:	00 97       	sbiw	r24, 0x00	; 0
    6a00:	51 f7       	brne	.-44     	; 0x69d6 <line_follow+0x29a>
    6a02:	17 c0       	rjmp	.+46     	; 0x6a32 <line_follow+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a04:	6b 89       	ldd	r22, Y+19	; 0x13
    6a06:	7c 89       	ldd	r23, Y+20	; 0x14
    6a08:	8d 89       	ldd	r24, Y+21	; 0x15
    6a0a:	9e 89       	ldd	r25, Y+22	; 0x16
    6a0c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6a10:	dc 01       	movw	r26, r24
    6a12:	cb 01       	movw	r24, r22
    6a14:	98 8f       	std	Y+24, r25	; 0x18
    6a16:	8f 8b       	std	Y+23, r24	; 0x17
    6a18:	8f 89       	ldd	r24, Y+23	; 0x17
    6a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    6a1c:	9c 8f       	std	Y+28, r25	; 0x1c
    6a1e:	8b 8f       	std	Y+27, r24	; 0x1b
    6a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a24:	8c 01       	movw	r16, r24
    6a26:	f8 01       	movw	r30, r16
    6a28:	31 97       	sbiw	r30, 0x01	; 1
    6a2a:	f1 f7       	brne	.-4      	; 0x6a28 <line_follow+0x2ec>
    6a2c:	8f 01       	movw	r16, r30
    6a2e:	1c 8f       	std	Y+28, r17	; 0x1c
    6a30:	0b 8f       	std	Y+27, r16	; 0x1b

        _delay_ms(10);

        forward();
    6a32:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 190);
    6a36:	8f ef       	ldi	r24, 0xFF	; 255
    6a38:	6e eb       	ldi	r22, 0xBE	; 190
    6a3a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6a3e:	36 c1       	rjmp	.+620    	; 0x6cac <line_follow+0x570>

    } 

	else if (line_cond == 5)
    6a40:	80 91 51 03 	lds	r24, 0x0351
    6a44:	90 91 52 03 	lds	r25, 0x0352
    6a48:	85 30       	cpi	r24, 0x05	; 5
    6a4a:	91 05       	cpc	r25, r1
    6a4c:	39 f4       	brne	.+14     	; 0x6a5c <line_follow+0x320>

	{

        forward();
    6a4e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 255);
    6a52:	8f ef       	ldi	r24, 0xFF	; 255
    6a54:	6f ef       	ldi	r22, 0xFF	; 255
    6a56:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6a5a:	28 c1       	rjmp	.+592    	; 0x6cac <line_follow+0x570>

        }

       else if (line_cond == 6)
    6a5c:	80 91 51 03 	lds	r24, 0x0351
    6a60:	90 91 52 03 	lds	r25, 0x0352
    6a64:	86 30       	cpi	r24, 0x06	; 6
    6a66:	91 05       	cpc	r25, r1
    6a68:	09 f0       	breq	.+2      	; 0x6a6c <line_follow+0x330>
    6a6a:	89 c0       	rjmp	.+274    	; 0x6b7e <line_follow+0x442>

	{
        stop();_delay_ms(10);
    6a6c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6a70:	80 e0       	ldi	r24, 0x00	; 0
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	a0 e2       	ldi	r26, 0x20	; 32
    6a76:	b1 e4       	ldi	r27, 0x41	; 65
    6a78:	8d 8f       	std	Y+29, r24	; 0x1d
    6a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    6a7c:	af 8f       	std	Y+31, r26	; 0x1f
    6a7e:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6a80:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6a82:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a86:	98 a1       	lds	r25, 0x48
    6a88:	26 e6       	ldi	r18, 0x66	; 102
    6a8a:	36 e6       	ldi	r19, 0x66	; 102
    6a8c:	46 e6       	ldi	r20, 0x66	; 102
    6a8e:	55 e4       	ldi	r21, 0x45	; 69
    6a90:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6a94:	dc 01       	movw	r26, r24
    6a96:	cb 01       	movw	r24, r22
    6a98:	89 a3       	lds	r24, 0x59
    6a9a:	9a a3       	lds	r25, 0x5a
    6a9c:	ab a3       	lds	r26, 0x5b
    6a9e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6aa0:	11 e0       	ldi	r17, 0x01	; 1
    6aa2:	69 a1       	lds	r22, 0x49
    6aa4:	7a a1       	lds	r23, 0x4a
    6aa6:	8b a1       	lds	r24, 0x4b
    6aa8:	9c a1       	lds	r25, 0x4c
    6aaa:	20 e0       	ldi	r18, 0x00	; 0
    6aac:	30 e0       	ldi	r19, 0x00	; 0
    6aae:	40 e8       	ldi	r20, 0x80	; 128
    6ab0:	5f e3       	ldi	r21, 0x3F	; 63
    6ab2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6ab6:	88 23       	and	r24, r24
    6ab8:	0c f0       	brlt	.+2      	; 0x6abc <line_follow+0x380>
    6aba:	10 e0       	ldi	r17, 0x00	; 0
    6abc:	11 23       	and	r17, r17
    6abe:	29 f0       	breq	.+10     	; 0x6aca <line_follow+0x38e>
		__ticks = 1;
    6ac0:	81 e0       	ldi	r24, 0x01	; 1
    6ac2:	90 e0       	ldi	r25, 0x00	; 0
    6ac4:	9e a3       	lds	r25, 0x5e
    6ac6:	8d a3       	lds	r24, 0x5d
    6ac8:	46 c0       	rjmp	.+140    	; 0x6b56 <line_follow+0x41a>
	else if (__tmp > 65535)
    6aca:	11 e0       	ldi	r17, 0x01	; 1
    6acc:	69 a1       	lds	r22, 0x49
    6ace:	7a a1       	lds	r23, 0x4a
    6ad0:	8b a1       	lds	r24, 0x4b
    6ad2:	9c a1       	lds	r25, 0x4c
    6ad4:	20 e0       	ldi	r18, 0x00	; 0
    6ad6:	3f ef       	ldi	r19, 0xFF	; 255
    6ad8:	4f e7       	ldi	r20, 0x7F	; 127
    6ada:	57 e4       	ldi	r21, 0x47	; 71
    6adc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6ae0:	18 16       	cp	r1, r24
    6ae2:	0c f0       	brlt	.+2      	; 0x6ae6 <line_follow+0x3aa>
    6ae4:	10 e0       	ldi	r17, 0x00	; 0
    6ae6:	11 23       	and	r17, r17
    6ae8:	61 f1       	breq	.+88     	; 0x6b42 <line_follow+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6aea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6aec:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6af0:	98 a1       	lds	r25, 0x48
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	40 e2       	ldi	r20, 0x20	; 32
    6af8:	51 e4       	ldi	r21, 0x41	; 65
    6afa:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6afe:	dc 01       	movw	r26, r24
    6b00:	cb 01       	movw	r24, r22
    6b02:	bc 01       	movw	r22, r24
    6b04:	cd 01       	movw	r24, r26
    6b06:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6b0a:	dc 01       	movw	r26, r24
    6b0c:	cb 01       	movw	r24, r22
    6b0e:	9e a3       	lds	r25, 0x5e
    6b10:	8d a3       	lds	r24, 0x5d
    6b12:	12 c0       	rjmp	.+36     	; 0x6b38 <line_follow+0x3fc>
    6b14:	80 e7       	ldi	r24, 0x70	; 112
    6b16:	91 e0       	ldi	r25, 0x01	; 1
    6b18:	98 a7       	lds	r25, 0x78
    6b1a:	8f a3       	lds	r24, 0x5f
    6b1c:	8f a1       	lds	r24, 0x4f
    6b1e:	98 a5       	lds	r25, 0x68
    6b20:	8c 01       	movw	r16, r24
    6b22:	c8 01       	movw	r24, r16
    6b24:	01 97       	sbiw	r24, 0x01	; 1
    6b26:	f1 f7       	brne	.-4      	; 0x6b24 <line_follow+0x3e8>
    6b28:	8c 01       	movw	r16, r24
    6b2a:	18 a7       	lds	r17, 0x78
    6b2c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b2e:	8d a1       	lds	r24, 0x4d
    6b30:	9e a1       	lds	r25, 0x4e
    6b32:	01 97       	sbiw	r24, 0x01	; 1
    6b34:	9e a3       	lds	r25, 0x5e
    6b36:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b38:	8d a1       	lds	r24, 0x4d
    6b3a:	9e a1       	lds	r25, 0x4e
    6b3c:	00 97       	sbiw	r24, 0x00	; 0
    6b3e:	51 f7       	brne	.-44     	; 0x6b14 <line_follow+0x3d8>
    6b40:	17 c0       	rjmp	.+46     	; 0x6b70 <line_follow+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b42:	69 a1       	lds	r22, 0x49
    6b44:	7a a1       	lds	r23, 0x4a
    6b46:	8b a1       	lds	r24, 0x4b
    6b48:	9c a1       	lds	r25, 0x4c
    6b4a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6b4e:	dc 01       	movw	r26, r24
    6b50:	cb 01       	movw	r24, r22
    6b52:	9e a3       	lds	r25, 0x5e
    6b54:	8d a3       	lds	r24, 0x5d
    6b56:	8d a1       	lds	r24, 0x4d
    6b58:	9e a1       	lds	r25, 0x4e
    6b5a:	9a a7       	lds	r25, 0x7a
    6b5c:	89 a7       	lds	r24, 0x79
    6b5e:	89 a5       	lds	r24, 0x69
    6b60:	9a a5       	lds	r25, 0x6a
    6b62:	8c 01       	movw	r16, r24
    6b64:	f8 01       	movw	r30, r16
    6b66:	31 97       	sbiw	r30, 0x01	; 1
    6b68:	f1 f7       	brne	.-4      	; 0x6b66 <line_follow+0x42a>
    6b6a:	8f 01       	movw	r16, r30
    6b6c:	1a a7       	lds	r17, 0x7a
    6b6e:	09 a7       	lds	r16, 0x79

        forward();
    6b70:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(250, 255);
    6b74:	8a ef       	ldi	r24, 0xFA	; 250
    6b76:	6f ef       	ldi	r22, 0xFF	; 255
    6b78:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6b7c:	97 c0       	rjmp	.+302    	; 0x6cac <line_follow+0x570>

        }

        else if (line_cond == 7)
    6b7e:	80 91 51 03 	lds	r24, 0x0351
    6b82:	90 91 52 03 	lds	r25, 0x0352
    6b86:	87 30       	cpi	r24, 0x07	; 7
    6b88:	91 05       	cpc	r25, r1
    6b8a:	09 f0       	breq	.+2      	; 0x6b8e <line_follow+0x452>
    6b8c:	89 c0       	rjmp	.+274    	; 0x6ca0 <line_follow+0x564>

	{
        stop();_delay_ms(10);
    6b8e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6b92:	80 e0       	ldi	r24, 0x00	; 0
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	a0 e2       	ldi	r26, 0x20	; 32
    6b98:	b1 e4       	ldi	r27, 0x41	; 65
    6b9a:	8b a7       	lds	r24, 0x7b
    6b9c:	9c a7       	lds	r25, 0x7c
    6b9e:	ad a7       	lds	r26, 0x7d
    6ba0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6ba2:	6b a5       	lds	r22, 0x6b
    6ba4:	7c a5       	lds	r23, 0x6c
    6ba6:	8d a5       	lds	r24, 0x6d
    6ba8:	9e a5       	lds	r25, 0x6e
    6baa:	26 e6       	ldi	r18, 0x66	; 102
    6bac:	36 e6       	ldi	r19, 0x66	; 102
    6bae:	46 e6       	ldi	r20, 0x66	; 102
    6bb0:	55 e4       	ldi	r21, 0x45	; 69
    6bb2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	cb 01       	movw	r24, r22
    6bba:	8f a7       	lds	r24, 0x7f
    6bbc:	98 ab       	sts	0x58, r25
    6bbe:	a9 ab       	sts	0x59, r26
    6bc0:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    6bc2:	11 e0       	ldi	r17, 0x01	; 1
    6bc4:	6f a5       	lds	r22, 0x6f
    6bc6:	78 a9       	sts	0x48, r23
    6bc8:	89 a9       	sts	0x49, r24
    6bca:	9a a9       	sts	0x4a, r25
    6bcc:	20 e0       	ldi	r18, 0x00	; 0
    6bce:	30 e0       	ldi	r19, 0x00	; 0
    6bd0:	40 e8       	ldi	r20, 0x80	; 128
    6bd2:	5f e3       	ldi	r21, 0x3F	; 63
    6bd4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6bd8:	88 23       	and	r24, r24
    6bda:	0c f0       	brlt	.+2      	; 0x6bde <line_follow+0x4a2>
    6bdc:	10 e0       	ldi	r17, 0x00	; 0
    6bde:	11 23       	and	r17, r17
    6be0:	29 f0       	breq	.+10     	; 0x6bec <line_follow+0x4b0>
		__ticks = 1;
    6be2:	81 e0       	ldi	r24, 0x01	; 1
    6be4:	90 e0       	ldi	r25, 0x00	; 0
    6be6:	9c ab       	sts	0x5c, r25
    6be8:	8b ab       	sts	0x5b, r24
    6bea:	46 c0       	rjmp	.+140    	; 0x6c78 <line_follow+0x53c>
	else if (__tmp > 65535)
    6bec:	11 e0       	ldi	r17, 0x01	; 1
    6bee:	6f a5       	lds	r22, 0x6f
    6bf0:	78 a9       	sts	0x48, r23
    6bf2:	89 a9       	sts	0x49, r24
    6bf4:	9a a9       	sts	0x4a, r25
    6bf6:	20 e0       	ldi	r18, 0x00	; 0
    6bf8:	3f ef       	ldi	r19, 0xFF	; 255
    6bfa:	4f e7       	ldi	r20, 0x7F	; 127
    6bfc:	57 e4       	ldi	r21, 0x47	; 71
    6bfe:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6c02:	18 16       	cp	r1, r24
    6c04:	0c f0       	brlt	.+2      	; 0x6c08 <line_follow+0x4cc>
    6c06:	10 e0       	ldi	r17, 0x00	; 0
    6c08:	11 23       	and	r17, r17
    6c0a:	61 f1       	breq	.+88     	; 0x6c64 <line_follow+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c0c:	6b a5       	lds	r22, 0x6b
    6c0e:	7c a5       	lds	r23, 0x6c
    6c10:	8d a5       	lds	r24, 0x6d
    6c12:	9e a5       	lds	r25, 0x6e
    6c14:	20 e0       	ldi	r18, 0x00	; 0
    6c16:	30 e0       	ldi	r19, 0x00	; 0
    6c18:	40 e2       	ldi	r20, 0x20	; 32
    6c1a:	51 e4       	ldi	r21, 0x41	; 65
    6c1c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6c20:	dc 01       	movw	r26, r24
    6c22:	cb 01       	movw	r24, r22
    6c24:	bc 01       	movw	r22, r24
    6c26:	cd 01       	movw	r24, r26
    6c28:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6c2c:	dc 01       	movw	r26, r24
    6c2e:	cb 01       	movw	r24, r22
    6c30:	9c ab       	sts	0x5c, r25
    6c32:	8b ab       	sts	0x5b, r24
    6c34:	12 c0       	rjmp	.+36     	; 0x6c5a <line_follow+0x51e>
    6c36:	80 e7       	ldi	r24, 0x70	; 112
    6c38:	91 e0       	ldi	r25, 0x01	; 1
    6c3a:	9e ab       	sts	0x5e, r25
    6c3c:	8d ab       	sts	0x5d, r24
    6c3e:	8d a9       	sts	0x4d, r24
    6c40:	9e a9       	sts	0x4e, r25
    6c42:	8c 01       	movw	r16, r24
    6c44:	c8 01       	movw	r24, r16
    6c46:	01 97       	sbiw	r24, 0x01	; 1
    6c48:	f1 f7       	brne	.-4      	; 0x6c46 <line_follow+0x50a>
    6c4a:	8c 01       	movw	r16, r24
    6c4c:	1e ab       	sts	0x5e, r17
    6c4e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c50:	8b a9       	sts	0x4b, r24
    6c52:	9c a9       	sts	0x4c, r25
    6c54:	01 97       	sbiw	r24, 0x01	; 1
    6c56:	9c ab       	sts	0x5c, r25
    6c58:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c5a:	8b a9       	sts	0x4b, r24
    6c5c:	9c a9       	sts	0x4c, r25
    6c5e:	00 97       	sbiw	r24, 0x00	; 0
    6c60:	51 f7       	brne	.-44     	; 0x6c36 <line_follow+0x4fa>
    6c62:	17 c0       	rjmp	.+46     	; 0x6c92 <line_follow+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c64:	6f a5       	lds	r22, 0x6f
    6c66:	78 a9       	sts	0x48, r23
    6c68:	89 a9       	sts	0x49, r24
    6c6a:	9a a9       	sts	0x4a, r25
    6c6c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6c70:	dc 01       	movw	r26, r24
    6c72:	cb 01       	movw	r24, r22
    6c74:	9c ab       	sts	0x5c, r25
    6c76:	8b ab       	sts	0x5b, r24
    6c78:	8b a9       	sts	0x4b, r24
    6c7a:	9c a9       	sts	0x4c, r25
    6c7c:	98 af       	sts	0x78, r25
    6c7e:	8f ab       	sts	0x5f, r24
    6c80:	8f a9       	sts	0x4f, r24
    6c82:	98 ad       	sts	0x68, r25
    6c84:	8c 01       	movw	r16, r24
    6c86:	f8 01       	movw	r30, r16
    6c88:	31 97       	sbiw	r30, 0x01	; 1
    6c8a:	f1 f7       	brne	.-4      	; 0x6c88 <line_follow+0x54c>
    6c8c:	8f 01       	movw	r16, r30
    6c8e:	18 af       	sts	0x78, r17
    6c90:	0f ab       	sts	0x5f, r16

        forward();
    6c92:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(255, 250);
    6c96:	8f ef       	ldi	r24, 0xFF	; 255
    6c98:	6a ef       	ldi	r22, 0xFA	; 250
    6c9a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    6c9e:	06 c0       	rjmp	.+12     	; 0x6cac <line_follow+0x570>

        }
	else
	{
forward();
    6ca0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
velocity(255,254); }
    6ca4:	8f ef       	ldi	r24, 0xFF	; 255
    6ca6:	6e ef       	ldi	r22, 0xFE	; 254
    6ca8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>


}
    6cac:	e8 96       	adiw	r28, 0x38	; 56
    6cae:	0f b6       	in	r0, 0x3f	; 63
    6cb0:	f8 94       	cli
    6cb2:	de bf       	out	0x3e, r29	; 62
    6cb4:	0f be       	out	0x3f, r0	; 63
    6cb6:	cd bf       	out	0x3d, r28	; 61
    6cb8:	df 91       	pop	r29
    6cba:	cf 91       	pop	r28
    6cbc:	1f 91       	pop	r17
    6cbe:	0f 91       	pop	r16
    6cc0:	08 95       	ret

00006cc2 <pick_drop>:
//_delay_ms(1000);
//starting_pos();
//}


void pick_drop(char pd){
    6cc2:	0f 93       	push	r16
    6cc4:	1f 93       	push	r17
    6cc6:	cf 93       	push	r28
    6cc8:	df 93       	push	r29
    6cca:	cd b7       	in	r28, 0x3d	; 61
    6ccc:	de b7       	in	r29, 0x3e	; 62
    6cce:	c3 5b       	subi	r28, 0xB3	; 179
    6cd0:	d1 40       	sbci	r29, 0x01	; 1
    6cd2:	0f b6       	in	r0, 0x3f	; 63
    6cd4:	f8 94       	cli
    6cd6:	de bf       	out	0x3e, r29	; 62
    6cd8:	0f be       	out	0x3f, r0	; 63
    6cda:	cd bf       	out	0x3d, r28	; 61
    6cdc:	9e 01       	movw	r18, r28
    6cde:	2d 54       	subi	r18, 0x4D	; 77
    6ce0:	3e 4f       	sbci	r19, 0xFE	; 254
    6ce2:	f9 01       	movw	r30, r18
    6ce4:	80 83       	st	Z, r24
	defaulty();
    6ce6:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <defaulty>
	stop();
    6cea:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6cee:	80 e0       	ldi	r24, 0x00	; 0
    6cf0:	90 e0       	ldi	r25, 0x00	; 0
    6cf2:	a0 ea       	ldi	r26, 0xA0	; 160
    6cf4:	b1 e4       	ldi	r27, 0x41	; 65
    6cf6:	89 83       	std	Y+1, r24	; 0x01
    6cf8:	9a 83       	std	Y+2, r25	; 0x02
    6cfa:	ab 83       	std	Y+3, r26	; 0x03
    6cfc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6cfe:	69 81       	ldd	r22, Y+1	; 0x01
    6d00:	7a 81       	ldd	r23, Y+2	; 0x02
    6d02:	8b 81       	ldd	r24, Y+3	; 0x03
    6d04:	9c 81       	ldd	r25, Y+4	; 0x04
    6d06:	26 e6       	ldi	r18, 0x66	; 102
    6d08:	36 e6       	ldi	r19, 0x66	; 102
    6d0a:	46 e6       	ldi	r20, 0x66	; 102
    6d0c:	55 e4       	ldi	r21, 0x45	; 69
    6d0e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6d12:	dc 01       	movw	r26, r24
    6d14:	cb 01       	movw	r24, r22
    6d16:	8d 83       	std	Y+5, r24	; 0x05
    6d18:	9e 83       	std	Y+6, r25	; 0x06
    6d1a:	af 83       	std	Y+7, r26	; 0x07
    6d1c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6d1e:	11 e0       	ldi	r17, 0x01	; 1
    6d20:	6d 81       	ldd	r22, Y+5	; 0x05
    6d22:	7e 81       	ldd	r23, Y+6	; 0x06
    6d24:	8f 81       	ldd	r24, Y+7	; 0x07
    6d26:	98 85       	ldd	r25, Y+8	; 0x08
    6d28:	20 e0       	ldi	r18, 0x00	; 0
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
    6d2c:	40 e8       	ldi	r20, 0x80	; 128
    6d2e:	5f e3       	ldi	r21, 0x3F	; 63
    6d30:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6d34:	88 23       	and	r24, r24
    6d36:	0c f0       	brlt	.+2      	; 0x6d3a <pick_drop+0x78>
    6d38:	10 e0       	ldi	r17, 0x00	; 0
    6d3a:	11 23       	and	r17, r17
    6d3c:	29 f0       	breq	.+10     	; 0x6d48 <pick_drop+0x86>
		__ticks = 1;
    6d3e:	81 e0       	ldi	r24, 0x01	; 1
    6d40:	90 e0       	ldi	r25, 0x00	; 0
    6d42:	9a 87       	std	Y+10, r25	; 0x0a
    6d44:	89 87       	std	Y+9, r24	; 0x09
    6d46:	46 c0       	rjmp	.+140    	; 0x6dd4 <pick_drop+0x112>
	else if (__tmp > 65535)
    6d48:	11 e0       	ldi	r17, 0x01	; 1
    6d4a:	6d 81       	ldd	r22, Y+5	; 0x05
    6d4c:	7e 81       	ldd	r23, Y+6	; 0x06
    6d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    6d50:	98 85       	ldd	r25, Y+8	; 0x08
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	3f ef       	ldi	r19, 0xFF	; 255
    6d56:	4f e7       	ldi	r20, 0x7F	; 127
    6d58:	57 e4       	ldi	r21, 0x47	; 71
    6d5a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6d5e:	18 16       	cp	r1, r24
    6d60:	0c f0       	brlt	.+2      	; 0x6d64 <pick_drop+0xa2>
    6d62:	10 e0       	ldi	r17, 0x00	; 0
    6d64:	11 23       	and	r17, r17
    6d66:	61 f1       	breq	.+88     	; 0x6dc0 <pick_drop+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d68:	69 81       	ldd	r22, Y+1	; 0x01
    6d6a:	7a 81       	ldd	r23, Y+2	; 0x02
    6d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    6d70:	20 e0       	ldi	r18, 0x00	; 0
    6d72:	30 e0       	ldi	r19, 0x00	; 0
    6d74:	40 e2       	ldi	r20, 0x20	; 32
    6d76:	51 e4       	ldi	r21, 0x41	; 65
    6d78:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6d7c:	dc 01       	movw	r26, r24
    6d7e:	cb 01       	movw	r24, r22
    6d80:	bc 01       	movw	r22, r24
    6d82:	cd 01       	movw	r24, r26
    6d84:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6d88:	dc 01       	movw	r26, r24
    6d8a:	cb 01       	movw	r24, r22
    6d8c:	9a 87       	std	Y+10, r25	; 0x0a
    6d8e:	89 87       	std	Y+9, r24	; 0x09
    6d90:	12 c0       	rjmp	.+36     	; 0x6db6 <pick_drop+0xf4>
    6d92:	80 e7       	ldi	r24, 0x70	; 112
    6d94:	91 e0       	ldi	r25, 0x01	; 1
    6d96:	9c 87       	std	Y+12, r25	; 0x0c
    6d98:	8b 87       	std	Y+11, r24	; 0x0b
    6d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d9e:	8c 01       	movw	r16, r24
    6da0:	c8 01       	movw	r24, r16
    6da2:	01 97       	sbiw	r24, 0x01	; 1
    6da4:	f1 f7       	brne	.-4      	; 0x6da2 <pick_drop+0xe0>
    6da6:	8c 01       	movw	r16, r24
    6da8:	1c 87       	std	Y+12, r17	; 0x0c
    6daa:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dac:	89 85       	ldd	r24, Y+9	; 0x09
    6dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    6db0:	01 97       	sbiw	r24, 0x01	; 1
    6db2:	9a 87       	std	Y+10, r25	; 0x0a
    6db4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6db6:	89 85       	ldd	r24, Y+9	; 0x09
    6db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dba:	00 97       	sbiw	r24, 0x00	; 0
    6dbc:	51 f7       	brne	.-44     	; 0x6d92 <pick_drop+0xd0>
    6dbe:	17 c0       	rjmp	.+46     	; 0x6dee <pick_drop+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dc0:	6d 81       	ldd	r22, Y+5	; 0x05
    6dc2:	7e 81       	ldd	r23, Y+6	; 0x06
    6dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    6dc6:	98 85       	ldd	r25, Y+8	; 0x08
    6dc8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6dcc:	dc 01       	movw	r26, r24
    6dce:	cb 01       	movw	r24, r22
    6dd0:	9a 87       	std	Y+10, r25	; 0x0a
    6dd2:	89 87       	std	Y+9, r24	; 0x09
    6dd4:	89 85       	ldd	r24, Y+9	; 0x09
    6dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dd8:	9e 87       	std	Y+14, r25	; 0x0e
    6dda:	8d 87       	std	Y+13, r24	; 0x0d
    6ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    6de0:	8c 01       	movw	r16, r24
    6de2:	f8 01       	movw	r30, r16
    6de4:	31 97       	sbiw	r30, 0x01	; 1
    6de6:	f1 f7       	brne	.-4      	; 0x6de4 <pick_drop+0x122>
    6de8:	8f 01       	movw	r16, r30
    6dea:	1e 87       	std	Y+14, r17	; 0x0e
    6dec:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U'){
    6dee:	80 91 65 03 	lds	r24, 0x0365
    6df2:	90 91 66 03 	lds	r25, 0x0366
    6df6:	01 97       	sbiw	r24, 0x01	; 1
    6df8:	87 59       	subi	r24, 0x97	; 151
    6dfa:	9c 4f       	sbci	r25, 0xFC	; 252
    6dfc:	fc 01       	movw	r30, r24
    6dfe:	80 81       	ld	r24, Z
    6e00:	8c 34       	cpi	r24, 0x4C	; 76
    6e02:	b1 f0       	breq	.+44     	; 0x6e30 <pick_drop+0x16e>
    6e04:	80 91 65 03 	lds	r24, 0x0365
    6e08:	90 91 66 03 	lds	r25, 0x0366
    6e0c:	01 97       	sbiw	r24, 0x01	; 1
    6e0e:	87 59       	subi	r24, 0x97	; 151
    6e10:	9c 4f       	sbci	r25, 0xFC	; 252
    6e12:	fc 01       	movw	r30, r24
    6e14:	80 81       	ld	r24, Z
    6e16:	82 35       	cpi	r24, 0x52	; 82
    6e18:	59 f0       	breq	.+22     	; 0x6e30 <pick_drop+0x16e>
    6e1a:	80 91 65 03 	lds	r24, 0x0365
    6e1e:	90 91 66 03 	lds	r25, 0x0366
    6e22:	01 97       	sbiw	r24, 0x01	; 1
    6e24:	87 59       	subi	r24, 0x97	; 151
    6e26:	9c 4f       	sbci	r25, 0xFC	; 252
    6e28:	fc 01       	movw	r30, r24
    6e2a:	80 81       	ld	r24, Z
    6e2c:	85 35       	cpi	r24, 0x55	; 85
    6e2e:	51 f5       	brne	.+84     	; 0x6e84 <pick_drop+0x1c2>
	if(pd=='7'||pd=='6'||pd=='5')
    6e30:	ce 01       	movw	r24, r28
    6e32:	8d 54       	subi	r24, 0x4D	; 77
    6e34:	9e 4f       	sbci	r25, 0xFE	; 254
    6e36:	fc 01       	movw	r30, r24
    6e38:	80 81       	ld	r24, Z
    6e3a:	87 33       	cpi	r24, 0x37	; 55
    6e3c:	71 f0       	breq	.+28     	; 0x6e5a <pick_drop+0x198>
    6e3e:	ce 01       	movw	r24, r28
    6e40:	8d 54       	subi	r24, 0x4D	; 77
    6e42:	9e 4f       	sbci	r25, 0xFE	; 254
    6e44:	fc 01       	movw	r30, r24
    6e46:	80 81       	ld	r24, Z
    6e48:	86 33       	cpi	r24, 0x36	; 54
    6e4a:	39 f0       	breq	.+14     	; 0x6e5a <pick_drop+0x198>
    6e4c:	ce 01       	movw	r24, r28
    6e4e:	8d 54       	subi	r24, 0x4D	; 77
    6e50:	9e 4f       	sbci	r25, 0xFE	; 254
    6e52:	fc 01       	movw	r30, r24
    6e54:	80 81       	ld	r24, Z
    6e56:	85 33       	cpi	r24, 0x35	; 53
    6e58:	29 f4       	brne	.+10     	; 0x6e64 <pick_drop+0x1a2>
	back_mm(50);
    6e5a:	82 e3       	ldi	r24, 0x32	; 50
    6e5c:	90 e0       	ldi	r25, 0x00	; 0
    6e5e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    6e62:	10 c0       	rjmp	.+32     	; 0x6e84 <pick_drop+0x1c2>
	else if(pd=='8')// To prevent too much back for front weird picks(soft left2)
    6e64:	ce 01       	movw	r24, r28
    6e66:	8d 54       	subi	r24, 0x4D	; 77
    6e68:	9e 4f       	sbci	r25, 0xFE	; 254
    6e6a:	fc 01       	movw	r30, r24
    6e6c:	80 81       	ld	r24, Z
    6e6e:	88 33       	cpi	r24, 0x38	; 56
    6e70:	29 f4       	brne	.+10     	; 0x6e7c <pick_drop+0x1ba>
	{
		back_mm(10);
    6e72:	8a e0       	ldi	r24, 0x0A	; 10
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    6e7a:	04 c0       	rjmp	.+8      	; 0x6e84 <pick_drop+0x1c2>
	}
	else
	back_mm(70);}
    6e7c:	86 e4       	ldi	r24, 0x46	; 70
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
	if(pd=='D'){
    6e84:	ce 01       	movw	r24, r28
    6e86:	8d 54       	subi	r24, 0x4D	; 77
    6e88:	9e 4f       	sbci	r25, 0xFE	; 254
    6e8a:	fc 01       	movw	r30, r24
    6e8c:	80 81       	ld	r24, Z
    6e8e:	84 34       	cpi	r24, 0x44	; 68
    6e90:	09 f0       	breq	.+2      	; 0x6e94 <pick_drop+0x1d2>
    6e92:	85 c0       	rjmp	.+266    	; 0x6f9e <pick_drop+0x2dc>
		drop();
    6e94:	0e 94 65 2d 	call	0x5aca	; 0x5aca <drop>
    6e98:	80 e0       	ldi	r24, 0x00	; 0
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	a6 e9       	ldi	r26, 0x96	; 150
    6e9e:	b3 e4       	ldi	r27, 0x43	; 67
    6ea0:	8f 87       	std	Y+15, r24	; 0x0f
    6ea2:	98 8b       	std	Y+16, r25	; 0x10
    6ea4:	a9 8b       	std	Y+17, r26	; 0x11
    6ea6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6ea8:	6f 85       	ldd	r22, Y+15	; 0x0f
    6eaa:	78 89       	ldd	r23, Y+16	; 0x10
    6eac:	89 89       	ldd	r24, Y+17	; 0x11
    6eae:	9a 89       	ldd	r25, Y+18	; 0x12
    6eb0:	26 e6       	ldi	r18, 0x66	; 102
    6eb2:	36 e6       	ldi	r19, 0x66	; 102
    6eb4:	46 e6       	ldi	r20, 0x66	; 102
    6eb6:	55 e4       	ldi	r21, 0x45	; 69
    6eb8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6ebc:	dc 01       	movw	r26, r24
    6ebe:	cb 01       	movw	r24, r22
    6ec0:	8b 8b       	std	Y+19, r24	; 0x13
    6ec2:	9c 8b       	std	Y+20, r25	; 0x14
    6ec4:	ad 8b       	std	Y+21, r26	; 0x15
    6ec6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    6ec8:	11 e0       	ldi	r17, 0x01	; 1
    6eca:	6b 89       	ldd	r22, Y+19	; 0x13
    6ecc:	7c 89       	ldd	r23, Y+20	; 0x14
    6ece:	8d 89       	ldd	r24, Y+21	; 0x15
    6ed0:	9e 89       	ldd	r25, Y+22	; 0x16
    6ed2:	20 e0       	ldi	r18, 0x00	; 0
    6ed4:	30 e0       	ldi	r19, 0x00	; 0
    6ed6:	40 e8       	ldi	r20, 0x80	; 128
    6ed8:	5f e3       	ldi	r21, 0x3F	; 63
    6eda:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6ede:	88 23       	and	r24, r24
    6ee0:	0c f0       	brlt	.+2      	; 0x6ee4 <pick_drop+0x222>
    6ee2:	10 e0       	ldi	r17, 0x00	; 0
    6ee4:	11 23       	and	r17, r17
    6ee6:	29 f0       	breq	.+10     	; 0x6ef2 <pick_drop+0x230>
		__ticks = 1;
    6ee8:	81 e0       	ldi	r24, 0x01	; 1
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	98 8f       	std	Y+24, r25	; 0x18
    6eee:	8f 8b       	std	Y+23, r24	; 0x17
    6ef0:	47 c0       	rjmp	.+142    	; 0x6f80 <pick_drop+0x2be>
	else if (__tmp > 65535)
    6ef2:	11 e0       	ldi	r17, 0x01	; 1
    6ef4:	6b 89       	ldd	r22, Y+19	; 0x13
    6ef6:	7c 89       	ldd	r23, Y+20	; 0x14
    6ef8:	8d 89       	ldd	r24, Y+21	; 0x15
    6efa:	9e 89       	ldd	r25, Y+22	; 0x16
    6efc:	20 e0       	ldi	r18, 0x00	; 0
    6efe:	3f ef       	ldi	r19, 0xFF	; 255
    6f00:	4f e7       	ldi	r20, 0x7F	; 127
    6f02:	57 e4       	ldi	r21, 0x47	; 71
    6f04:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    6f08:	18 16       	cp	r1, r24
    6f0a:	0c f0       	brlt	.+2      	; 0x6f0e <pick_drop+0x24c>
    6f0c:	10 e0       	ldi	r17, 0x00	; 0
    6f0e:	11 23       	and	r17, r17
    6f10:	69 f1       	breq	.+90     	; 0x6f6c <pick_drop+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f12:	6f 85       	ldd	r22, Y+15	; 0x0f
    6f14:	78 89       	ldd	r23, Y+16	; 0x10
    6f16:	89 89       	ldd	r24, Y+17	; 0x11
    6f18:	9a 89       	ldd	r25, Y+18	; 0x12
    6f1a:	20 e0       	ldi	r18, 0x00	; 0
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	40 e2       	ldi	r20, 0x20	; 32
    6f20:	51 e4       	ldi	r21, 0x41	; 65
    6f22:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6f26:	dc 01       	movw	r26, r24
    6f28:	cb 01       	movw	r24, r22
    6f2a:	bc 01       	movw	r22, r24
    6f2c:	cd 01       	movw	r24, r26
    6f2e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6f32:	dc 01       	movw	r26, r24
    6f34:	cb 01       	movw	r24, r22
    6f36:	98 8f       	std	Y+24, r25	; 0x18
    6f38:	8f 8b       	std	Y+23, r24	; 0x17
    6f3a:	12 c0       	rjmp	.+36     	; 0x6f60 <pick_drop+0x29e>
    6f3c:	80 e7       	ldi	r24, 0x70	; 112
    6f3e:	91 e0       	ldi	r25, 0x01	; 1
    6f40:	9a 8f       	std	Y+26, r25	; 0x1a
    6f42:	89 8f       	std	Y+25, r24	; 0x19
    6f44:	89 8d       	ldd	r24, Y+25	; 0x19
    6f46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6f48:	8c 01       	movw	r16, r24
    6f4a:	c8 01       	movw	r24, r16
    6f4c:	01 97       	sbiw	r24, 0x01	; 1
    6f4e:	f1 f7       	brne	.-4      	; 0x6f4c <pick_drop+0x28a>
    6f50:	8c 01       	movw	r16, r24
    6f52:	1a 8f       	std	Y+26, r17	; 0x1a
    6f54:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f56:	8f 89       	ldd	r24, Y+23	; 0x17
    6f58:	98 8d       	ldd	r25, Y+24	; 0x18
    6f5a:	01 97       	sbiw	r24, 0x01	; 1
    6f5c:	98 8f       	std	Y+24, r25	; 0x18
    6f5e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f60:	8f 89       	ldd	r24, Y+23	; 0x17
    6f62:	98 8d       	ldd	r25, Y+24	; 0x18
    6f64:	00 97       	sbiw	r24, 0x00	; 0
    6f66:	51 f7       	brne	.-44     	; 0x6f3c <pick_drop+0x27a>
    6f68:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f6c:	6b 89       	ldd	r22, Y+19	; 0x13
    6f6e:	7c 89       	ldd	r23, Y+20	; 0x14
    6f70:	8d 89       	ldd	r24, Y+21	; 0x15
    6f72:	9e 89       	ldd	r25, Y+22	; 0x16
    6f74:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    6f78:	dc 01       	movw	r26, r24
    6f7a:	cb 01       	movw	r24, r22
    6f7c:	98 8f       	std	Y+24, r25	; 0x18
    6f7e:	8f 8b       	std	Y+23, r24	; 0x17
    6f80:	8f 89       	ldd	r24, Y+23	; 0x17
    6f82:	98 8d       	ldd	r25, Y+24	; 0x18
    6f84:	9c 8f       	std	Y+28, r25	; 0x1c
    6f86:	8b 8f       	std	Y+27, r24	; 0x1b
    6f88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f8c:	8c 01       	movw	r16, r24
    6f8e:	f8 01       	movw	r30, r16
    6f90:	31 97       	sbiw	r30, 0x01	; 1
    6f92:	f1 f7       	brne	.-4      	; 0x6f90 <pick_drop+0x2ce>
    6f94:	8f 01       	movw	r16, r30
    6f96:	1c 8f       	std	Y+28, r17	; 0x1c
    6f98:	0b 8f       	std	Y+27, r16	; 0x1b
    6f9a:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
		_delay_ms(300);
	}
	else if(pd=='1'){
    6f9e:	ce 01       	movw	r24, r28
    6fa0:	8d 54       	subi	r24, 0x4D	; 77
    6fa2:	9e 4f       	sbci	r25, 0xFE	; 254
    6fa4:	fc 01       	movw	r30, r24
    6fa6:	80 81       	ld	r24, Z
    6fa8:	81 33       	cpi	r24, 0x31	; 49
    6faa:	09 f0       	breq	.+2      	; 0x6fae <pick_drop+0x2ec>
    6fac:	85 c0       	rjmp	.+266    	; 0x70b8 <pick_drop+0x3f6>
		left_cycle();
    6fae:	0e 94 99 27 	call	0x4f32	; 0x4f32 <left_cycle>
    6fb2:	80 e0       	ldi	r24, 0x00	; 0
    6fb4:	90 e0       	ldi	r25, 0x00	; 0
    6fb6:	a6 e9       	ldi	r26, 0x96	; 150
    6fb8:	b3 e4       	ldi	r27, 0x43	; 67
    6fba:	8d 8f       	std	Y+29, r24	; 0x1d
    6fbc:	9e 8f       	std	Y+30, r25	; 0x1e
    6fbe:	af 8f       	std	Y+31, r26	; 0x1f
    6fc0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6fc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6fc4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6fc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6fc8:	98 a1       	lds	r25, 0x48
    6fca:	26 e6       	ldi	r18, 0x66	; 102
    6fcc:	36 e6       	ldi	r19, 0x66	; 102
    6fce:	46 e6       	ldi	r20, 0x66	; 102
    6fd0:	55 e4       	ldi	r21, 0x45	; 69
    6fd2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    6fd6:	dc 01       	movw	r26, r24
    6fd8:	cb 01       	movw	r24, r22
    6fda:	89 a3       	lds	r24, 0x59
    6fdc:	9a a3       	lds	r25, 0x5a
    6fde:	ab a3       	lds	r26, 0x5b
    6fe0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    6fe2:	11 e0       	ldi	r17, 0x01	; 1
    6fe4:	69 a1       	lds	r22, 0x49
    6fe6:	7a a1       	lds	r23, 0x4a
    6fe8:	8b a1       	lds	r24, 0x4b
    6fea:	9c a1       	lds	r25, 0x4c
    6fec:	20 e0       	ldi	r18, 0x00	; 0
    6fee:	30 e0       	ldi	r19, 0x00	; 0
    6ff0:	40 e8       	ldi	r20, 0x80	; 128
    6ff2:	5f e3       	ldi	r21, 0x3F	; 63
    6ff4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    6ff8:	88 23       	and	r24, r24
    6ffa:	0c f0       	brlt	.+2      	; 0x6ffe <pick_drop+0x33c>
    6ffc:	10 e0       	ldi	r17, 0x00	; 0
    6ffe:	11 23       	and	r17, r17
    7000:	29 f0       	breq	.+10     	; 0x700c <pick_drop+0x34a>
		__ticks = 1;
    7002:	81 e0       	ldi	r24, 0x01	; 1
    7004:	90 e0       	ldi	r25, 0x00	; 0
    7006:	9e a3       	lds	r25, 0x5e
    7008:	8d a3       	lds	r24, 0x5d
    700a:	47 c0       	rjmp	.+142    	; 0x709a <pick_drop+0x3d8>
	else if (__tmp > 65535)
    700c:	11 e0       	ldi	r17, 0x01	; 1
    700e:	69 a1       	lds	r22, 0x49
    7010:	7a a1       	lds	r23, 0x4a
    7012:	8b a1       	lds	r24, 0x4b
    7014:	9c a1       	lds	r25, 0x4c
    7016:	20 e0       	ldi	r18, 0x00	; 0
    7018:	3f ef       	ldi	r19, 0xFF	; 255
    701a:	4f e7       	ldi	r20, 0x7F	; 127
    701c:	57 e4       	ldi	r21, 0x47	; 71
    701e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7022:	18 16       	cp	r1, r24
    7024:	0c f0       	brlt	.+2      	; 0x7028 <pick_drop+0x366>
    7026:	10 e0       	ldi	r17, 0x00	; 0
    7028:	11 23       	and	r17, r17
    702a:	69 f1       	breq	.+90     	; 0x7086 <pick_drop+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    702c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    702e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    7030:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7032:	98 a1       	lds	r25, 0x48
    7034:	20 e0       	ldi	r18, 0x00	; 0
    7036:	30 e0       	ldi	r19, 0x00	; 0
    7038:	40 e2       	ldi	r20, 0x20	; 32
    703a:	51 e4       	ldi	r21, 0x41	; 65
    703c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7040:	dc 01       	movw	r26, r24
    7042:	cb 01       	movw	r24, r22
    7044:	bc 01       	movw	r22, r24
    7046:	cd 01       	movw	r24, r26
    7048:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    704c:	dc 01       	movw	r26, r24
    704e:	cb 01       	movw	r24, r22
    7050:	9e a3       	lds	r25, 0x5e
    7052:	8d a3       	lds	r24, 0x5d
    7054:	12 c0       	rjmp	.+36     	; 0x707a <pick_drop+0x3b8>
    7056:	80 e7       	ldi	r24, 0x70	; 112
    7058:	91 e0       	ldi	r25, 0x01	; 1
    705a:	98 a7       	lds	r25, 0x78
    705c:	8f a3       	lds	r24, 0x5f
    705e:	8f a1       	lds	r24, 0x4f
    7060:	98 a5       	lds	r25, 0x68
    7062:	8c 01       	movw	r16, r24
    7064:	c8 01       	movw	r24, r16
    7066:	01 97       	sbiw	r24, 0x01	; 1
    7068:	f1 f7       	brne	.-4      	; 0x7066 <pick_drop+0x3a4>
    706a:	8c 01       	movw	r16, r24
    706c:	18 a7       	lds	r17, 0x78
    706e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7070:	8d a1       	lds	r24, 0x4d
    7072:	9e a1       	lds	r25, 0x4e
    7074:	01 97       	sbiw	r24, 0x01	; 1
    7076:	9e a3       	lds	r25, 0x5e
    7078:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    707a:	8d a1       	lds	r24, 0x4d
    707c:	9e a1       	lds	r25, 0x4e
    707e:	00 97       	sbiw	r24, 0x00	; 0
    7080:	51 f7       	brne	.-44     	; 0x7056 <pick_drop+0x394>
    7082:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7086:	69 a1       	lds	r22, 0x49
    7088:	7a a1       	lds	r23, 0x4a
    708a:	8b a1       	lds	r24, 0x4b
    708c:	9c a1       	lds	r25, 0x4c
    708e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7092:	dc 01       	movw	r26, r24
    7094:	cb 01       	movw	r24, r22
    7096:	9e a3       	lds	r25, 0x5e
    7098:	8d a3       	lds	r24, 0x5d
    709a:	8d a1       	lds	r24, 0x4d
    709c:	9e a1       	lds	r25, 0x4e
    709e:	9a a7       	lds	r25, 0x7a
    70a0:	89 a7       	lds	r24, 0x79
    70a2:	89 a5       	lds	r24, 0x69
    70a4:	9a a5       	lds	r25, 0x6a
    70a6:	8c 01       	movw	r16, r24
    70a8:	f8 01       	movw	r30, r16
    70aa:	31 97       	sbiw	r30, 0x01	; 1
    70ac:	f1 f7       	brne	.-4      	; 0x70aa <pick_drop+0x3e8>
    70ae:	8f 01       	movw	r16, r30
    70b0:	1a a7       	lds	r17, 0x7a
    70b2:	09 a7       	lds	r16, 0x79
    70b4:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
		_delay_ms(300);
	}
	else if(pd=='2'){
    70b8:	ce 01       	movw	r24, r28
    70ba:	8d 54       	subi	r24, 0x4D	; 77
    70bc:	9e 4f       	sbci	r25, 0xFE	; 254
    70be:	fc 01       	movw	r30, r24
    70c0:	80 81       	ld	r24, Z
    70c2:	82 33       	cpi	r24, 0x32	; 50
    70c4:	09 f0       	breq	.+2      	; 0x70c8 <pick_drop+0x406>
    70c6:	85 c0       	rjmp	.+266    	; 0x71d2 <pick_drop+0x510>
		right_cycle();
    70c8:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <right_cycle>
    70cc:	80 e0       	ldi	r24, 0x00	; 0
    70ce:	90 e0       	ldi	r25, 0x00	; 0
    70d0:	a6 e9       	ldi	r26, 0x96	; 150
    70d2:	b3 e4       	ldi	r27, 0x43	; 67
    70d4:	8b a7       	lds	r24, 0x7b
    70d6:	9c a7       	lds	r25, 0x7c
    70d8:	ad a7       	lds	r26, 0x7d
    70da:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    70dc:	6b a5       	lds	r22, 0x6b
    70de:	7c a5       	lds	r23, 0x6c
    70e0:	8d a5       	lds	r24, 0x6d
    70e2:	9e a5       	lds	r25, 0x6e
    70e4:	26 e6       	ldi	r18, 0x66	; 102
    70e6:	36 e6       	ldi	r19, 0x66	; 102
    70e8:	46 e6       	ldi	r20, 0x66	; 102
    70ea:	55 e4       	ldi	r21, 0x45	; 69
    70ec:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    70f0:	dc 01       	movw	r26, r24
    70f2:	cb 01       	movw	r24, r22
    70f4:	8f a7       	lds	r24, 0x7f
    70f6:	98 ab       	sts	0x58, r25
    70f8:	a9 ab       	sts	0x59, r26
    70fa:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    70fc:	11 e0       	ldi	r17, 0x01	; 1
    70fe:	6f a5       	lds	r22, 0x6f
    7100:	78 a9       	sts	0x48, r23
    7102:	89 a9       	sts	0x49, r24
    7104:	9a a9       	sts	0x4a, r25
    7106:	20 e0       	ldi	r18, 0x00	; 0
    7108:	30 e0       	ldi	r19, 0x00	; 0
    710a:	40 e8       	ldi	r20, 0x80	; 128
    710c:	5f e3       	ldi	r21, 0x3F	; 63
    710e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    7112:	88 23       	and	r24, r24
    7114:	0c f0       	brlt	.+2      	; 0x7118 <pick_drop+0x456>
    7116:	10 e0       	ldi	r17, 0x00	; 0
    7118:	11 23       	and	r17, r17
    711a:	29 f0       	breq	.+10     	; 0x7126 <pick_drop+0x464>
		__ticks = 1;
    711c:	81 e0       	ldi	r24, 0x01	; 1
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	9c ab       	sts	0x5c, r25
    7122:	8b ab       	sts	0x5b, r24
    7124:	47 c0       	rjmp	.+142    	; 0x71b4 <pick_drop+0x4f2>
	else if (__tmp > 65535)
    7126:	11 e0       	ldi	r17, 0x01	; 1
    7128:	6f a5       	lds	r22, 0x6f
    712a:	78 a9       	sts	0x48, r23
    712c:	89 a9       	sts	0x49, r24
    712e:	9a a9       	sts	0x4a, r25
    7130:	20 e0       	ldi	r18, 0x00	; 0
    7132:	3f ef       	ldi	r19, 0xFF	; 255
    7134:	4f e7       	ldi	r20, 0x7F	; 127
    7136:	57 e4       	ldi	r21, 0x47	; 71
    7138:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    713c:	18 16       	cp	r1, r24
    713e:	0c f0       	brlt	.+2      	; 0x7142 <pick_drop+0x480>
    7140:	10 e0       	ldi	r17, 0x00	; 0
    7142:	11 23       	and	r17, r17
    7144:	69 f1       	breq	.+90     	; 0x71a0 <pick_drop+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7146:	6b a5       	lds	r22, 0x6b
    7148:	7c a5       	lds	r23, 0x6c
    714a:	8d a5       	lds	r24, 0x6d
    714c:	9e a5       	lds	r25, 0x6e
    714e:	20 e0       	ldi	r18, 0x00	; 0
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	40 e2       	ldi	r20, 0x20	; 32
    7154:	51 e4       	ldi	r21, 0x41	; 65
    7156:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    715a:	dc 01       	movw	r26, r24
    715c:	cb 01       	movw	r24, r22
    715e:	bc 01       	movw	r22, r24
    7160:	cd 01       	movw	r24, r26
    7162:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7166:	dc 01       	movw	r26, r24
    7168:	cb 01       	movw	r24, r22
    716a:	9c ab       	sts	0x5c, r25
    716c:	8b ab       	sts	0x5b, r24
    716e:	12 c0       	rjmp	.+36     	; 0x7194 <pick_drop+0x4d2>
    7170:	80 e7       	ldi	r24, 0x70	; 112
    7172:	91 e0       	ldi	r25, 0x01	; 1
    7174:	9e ab       	sts	0x5e, r25
    7176:	8d ab       	sts	0x5d, r24
    7178:	8d a9       	sts	0x4d, r24
    717a:	9e a9       	sts	0x4e, r25
    717c:	8c 01       	movw	r16, r24
    717e:	c8 01       	movw	r24, r16
    7180:	01 97       	sbiw	r24, 0x01	; 1
    7182:	f1 f7       	brne	.-4      	; 0x7180 <pick_drop+0x4be>
    7184:	8c 01       	movw	r16, r24
    7186:	1e ab       	sts	0x5e, r17
    7188:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    718a:	8b a9       	sts	0x4b, r24
    718c:	9c a9       	sts	0x4c, r25
    718e:	01 97       	sbiw	r24, 0x01	; 1
    7190:	9c ab       	sts	0x5c, r25
    7192:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7194:	8b a9       	sts	0x4b, r24
    7196:	9c a9       	sts	0x4c, r25
    7198:	00 97       	sbiw	r24, 0x00	; 0
    719a:	51 f7       	brne	.-44     	; 0x7170 <pick_drop+0x4ae>
    719c:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71a0:	6f a5       	lds	r22, 0x6f
    71a2:	78 a9       	sts	0x48, r23
    71a4:	89 a9       	sts	0x49, r24
    71a6:	9a a9       	sts	0x4a, r25
    71a8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    71ac:	dc 01       	movw	r26, r24
    71ae:	cb 01       	movw	r24, r22
    71b0:	9c ab       	sts	0x5c, r25
    71b2:	8b ab       	sts	0x5b, r24
    71b4:	8b a9       	sts	0x4b, r24
    71b6:	9c a9       	sts	0x4c, r25
    71b8:	98 af       	sts	0x78, r25
    71ba:	8f ab       	sts	0x5f, r24
    71bc:	8f a9       	sts	0x4f, r24
    71be:	98 ad       	sts	0x68, r25
    71c0:	8c 01       	movw	r16, r24
    71c2:	f8 01       	movw	r30, r16
    71c4:	31 97       	sbiw	r30, 0x01	; 1
    71c6:	f1 f7       	brne	.-4      	; 0x71c4 <pick_drop+0x502>
    71c8:	8f 01       	movw	r16, r30
    71ca:	18 af       	sts	0x78, r17
    71cc:	0f ab       	sts	0x5f, r16
    71ce:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
		_delay_ms(300);
	}
	else if(pd=='3'){
    71d2:	ce 01       	movw	r24, r28
    71d4:	8d 54       	subi	r24, 0x4D	; 77
    71d6:	9e 4f       	sbci	r25, 0xFE	; 254
    71d8:	fc 01       	movw	r30, r24
    71da:	80 81       	ld	r24, Z
    71dc:	83 33       	cpi	r24, 0x33	; 51
    71de:	09 f0       	breq	.+2      	; 0x71e2 <pick_drop+0x520>
    71e0:	1c c4       	rjmp	.+2104   	; 0x7a1a <pick_drop+0xd58>
		stop();
    71e2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    71e6:	80 e0       	ldi	r24, 0x00	; 0
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	a0 ea       	ldi	r26, 0xA0	; 160
    71ec:	b1 e4       	ldi	r27, 0x41	; 65
    71ee:	89 af       	sts	0x79, r24
    71f0:	9a af       	sts	0x7a, r25
    71f2:	ab af       	sts	0x7b, r26
    71f4:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    71f6:	69 ad       	sts	0x69, r22
    71f8:	7a ad       	sts	0x6a, r23
    71fa:	8b ad       	sts	0x6b, r24
    71fc:	9c ad       	sts	0x6c, r25
    71fe:	26 e6       	ldi	r18, 0x66	; 102
    7200:	36 e6       	ldi	r19, 0x66	; 102
    7202:	46 e6       	ldi	r20, 0x66	; 102
    7204:	55 e4       	ldi	r21, 0x45	; 69
    7206:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    720a:	dc 01       	movw	r26, r24
    720c:	cb 01       	movw	r24, r22
    720e:	9e 01       	movw	r18, r28
    7210:	23 5c       	subi	r18, 0xC3	; 195
    7212:	3f 4f       	sbci	r19, 0xFF	; 255
    7214:	f9 01       	movw	r30, r18
    7216:	80 83       	st	Z, r24
    7218:	91 83       	std	Z+1, r25	; 0x01
    721a:	a2 83       	std	Z+2, r26	; 0x02
    721c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    721e:	11 e0       	ldi	r17, 0x01	; 1
    7220:	ce 01       	movw	r24, r28
    7222:	cd 96       	adiw	r24, 0x3d	; 61
    7224:	fc 01       	movw	r30, r24
    7226:	60 81       	ld	r22, Z
    7228:	71 81       	ldd	r23, Z+1	; 0x01
    722a:	82 81       	ldd	r24, Z+2	; 0x02
    722c:	93 81       	ldd	r25, Z+3	; 0x03
    722e:	20 e0       	ldi	r18, 0x00	; 0
    7230:	30 e0       	ldi	r19, 0x00	; 0
    7232:	40 e8       	ldi	r20, 0x80	; 128
    7234:	5f e3       	ldi	r21, 0x3F	; 63
    7236:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    723a:	88 23       	and	r24, r24
    723c:	0c f0       	brlt	.+2      	; 0x7240 <pick_drop+0x57e>
    723e:	10 e0       	ldi	r17, 0x00	; 0
    7240:	11 23       	and	r17, r17
    7242:	49 f0       	breq	.+18     	; 0x7256 <pick_drop+0x594>
		__ticks = 1;
    7244:	ce 01       	movw	r24, r28
    7246:	8f 5b       	subi	r24, 0xBF	; 191
    7248:	9f 4f       	sbci	r25, 0xFF	; 255
    724a:	21 e0       	ldi	r18, 0x01	; 1
    724c:	30 e0       	ldi	r19, 0x00	; 0
    724e:	fc 01       	movw	r30, r24
    7250:	31 83       	std	Z+1, r19	; 0x01
    7252:	20 83       	st	Z, r18
    7254:	6e c0       	rjmp	.+220    	; 0x7332 <pick_drop+0x670>
	else if (__tmp > 65535)
    7256:	11 e0       	ldi	r17, 0x01	; 1
    7258:	ce 01       	movw	r24, r28
    725a:	cd 96       	adiw	r24, 0x3d	; 61
    725c:	fc 01       	movw	r30, r24
    725e:	60 81       	ld	r22, Z
    7260:	71 81       	ldd	r23, Z+1	; 0x01
    7262:	82 81       	ldd	r24, Z+2	; 0x02
    7264:	93 81       	ldd	r25, Z+3	; 0x03
    7266:	20 e0       	ldi	r18, 0x00	; 0
    7268:	3f ef       	ldi	r19, 0xFF	; 255
    726a:	4f e7       	ldi	r20, 0x7F	; 127
    726c:	57 e4       	ldi	r21, 0x47	; 71
    726e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7272:	18 16       	cp	r1, r24
    7274:	0c f0       	brlt	.+2      	; 0x7278 <pick_drop+0x5b6>
    7276:	10 e0       	ldi	r17, 0x00	; 0
    7278:	11 23       	and	r17, r17
    727a:	09 f4       	brne	.+2      	; 0x727e <pick_drop+0x5bc>
    727c:	49 c0       	rjmp	.+146    	; 0x7310 <pick_drop+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    727e:	69 ad       	sts	0x69, r22
    7280:	7a ad       	sts	0x6a, r23
    7282:	8b ad       	sts	0x6b, r24
    7284:	9c ad       	sts	0x6c, r25
    7286:	20 e0       	ldi	r18, 0x00	; 0
    7288:	30 e0       	ldi	r19, 0x00	; 0
    728a:	40 e2       	ldi	r20, 0x20	; 32
    728c:	51 e4       	ldi	r21, 0x41	; 65
    728e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7292:	dc 01       	movw	r26, r24
    7294:	cb 01       	movw	r24, r22
    7296:	8e 01       	movw	r16, r28
    7298:	0f 5b       	subi	r16, 0xBF	; 191
    729a:	1f 4f       	sbci	r17, 0xFF	; 255
    729c:	bc 01       	movw	r22, r24
    729e:	cd 01       	movw	r24, r26
    72a0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    72a4:	dc 01       	movw	r26, r24
    72a6:	cb 01       	movw	r24, r22
    72a8:	f8 01       	movw	r30, r16
    72aa:	91 83       	std	Z+1, r25	; 0x01
    72ac:	80 83       	st	Z, r24
    72ae:	27 c0       	rjmp	.+78     	; 0x72fe <pick_drop+0x63c>
    72b0:	ce 01       	movw	r24, r28
    72b2:	8d 5b       	subi	r24, 0xBD	; 189
    72b4:	9f 4f       	sbci	r25, 0xFF	; 255
    72b6:	20 e7       	ldi	r18, 0x70	; 112
    72b8:	31 e0       	ldi	r19, 0x01	; 1
    72ba:	fc 01       	movw	r30, r24
    72bc:	31 83       	std	Z+1, r19	; 0x01
    72be:	20 83       	st	Z, r18
    72c0:	ce 01       	movw	r24, r28
    72c2:	8d 5b       	subi	r24, 0xBD	; 189
    72c4:	9f 4f       	sbci	r25, 0xFF	; 255
    72c6:	fc 01       	movw	r30, r24
    72c8:	80 81       	ld	r24, Z
    72ca:	91 81       	ldd	r25, Z+1	; 0x01
    72cc:	8c 01       	movw	r16, r24
    72ce:	c8 01       	movw	r24, r16
    72d0:	01 97       	sbiw	r24, 0x01	; 1
    72d2:	f1 f7       	brne	.-4      	; 0x72d0 <pick_drop+0x60e>
    72d4:	8c 01       	movw	r16, r24
    72d6:	ce 01       	movw	r24, r28
    72d8:	8d 5b       	subi	r24, 0xBD	; 189
    72da:	9f 4f       	sbci	r25, 0xFF	; 255
    72dc:	fc 01       	movw	r30, r24
    72de:	11 83       	std	Z+1, r17	; 0x01
    72e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72e2:	ce 01       	movw	r24, r28
    72e4:	8f 5b       	subi	r24, 0xBF	; 191
    72e6:	9f 4f       	sbci	r25, 0xFF	; 255
    72e8:	9e 01       	movw	r18, r28
    72ea:	2f 5b       	subi	r18, 0xBF	; 191
    72ec:	3f 4f       	sbci	r19, 0xFF	; 255
    72ee:	f9 01       	movw	r30, r18
    72f0:	20 81       	ld	r18, Z
    72f2:	31 81       	ldd	r19, Z+1	; 0x01
    72f4:	21 50       	subi	r18, 0x01	; 1
    72f6:	30 40       	sbci	r19, 0x00	; 0
    72f8:	fc 01       	movw	r30, r24
    72fa:	31 83       	std	Z+1, r19	; 0x01
    72fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72fe:	ce 01       	movw	r24, r28
    7300:	8f 5b       	subi	r24, 0xBF	; 191
    7302:	9f 4f       	sbci	r25, 0xFF	; 255
    7304:	fc 01       	movw	r30, r24
    7306:	80 81       	ld	r24, Z
    7308:	91 81       	ldd	r25, Z+1	; 0x01
    730a:	00 97       	sbiw	r24, 0x00	; 0
    730c:	89 f6       	brne	.-94     	; 0x72b0 <pick_drop+0x5ee>
    730e:	2e c0       	rjmp	.+92     	; 0x736c <pick_drop+0x6aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7310:	8e 01       	movw	r16, r28
    7312:	0f 5b       	subi	r16, 0xBF	; 191
    7314:	1f 4f       	sbci	r17, 0xFF	; 255
    7316:	ce 01       	movw	r24, r28
    7318:	cd 96       	adiw	r24, 0x3d	; 61
    731a:	fc 01       	movw	r30, r24
    731c:	60 81       	ld	r22, Z
    731e:	71 81       	ldd	r23, Z+1	; 0x01
    7320:	82 81       	ldd	r24, Z+2	; 0x02
    7322:	93 81       	ldd	r25, Z+3	; 0x03
    7324:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7328:	dc 01       	movw	r26, r24
    732a:	cb 01       	movw	r24, r22
    732c:	f8 01       	movw	r30, r16
    732e:	91 83       	std	Z+1, r25	; 0x01
    7330:	80 83       	st	Z, r24
    7332:	ce 01       	movw	r24, r28
    7334:	8b 5b       	subi	r24, 0xBB	; 187
    7336:	9f 4f       	sbci	r25, 0xFF	; 255
    7338:	9e 01       	movw	r18, r28
    733a:	2f 5b       	subi	r18, 0xBF	; 191
    733c:	3f 4f       	sbci	r19, 0xFF	; 255
    733e:	f9 01       	movw	r30, r18
    7340:	20 81       	ld	r18, Z
    7342:	31 81       	ldd	r19, Z+1	; 0x01
    7344:	fc 01       	movw	r30, r24
    7346:	31 83       	std	Z+1, r19	; 0x01
    7348:	20 83       	st	Z, r18
    734a:	ce 01       	movw	r24, r28
    734c:	8b 5b       	subi	r24, 0xBB	; 187
    734e:	9f 4f       	sbci	r25, 0xFF	; 255
    7350:	fc 01       	movw	r30, r24
    7352:	80 81       	ld	r24, Z
    7354:	91 81       	ldd	r25, Z+1	; 0x01
    7356:	8c 01       	movw	r16, r24
    7358:	c8 01       	movw	r24, r16
    735a:	01 97       	sbiw	r24, 0x01	; 1
    735c:	f1 f7       	brne	.-4      	; 0x735a <pick_drop+0x698>
    735e:	8c 01       	movw	r16, r24
    7360:	ce 01       	movw	r24, r28
    7362:	8b 5b       	subi	r24, 0xBB	; 187
    7364:	9f 4f       	sbci	r25, 0xFF	; 255
    7366:	fc 01       	movw	r30, r24
    7368:	11 83       	std	Z+1, r17	; 0x01
    736a:	00 83       	st	Z, r16
		_delay_ms(20);
		forward_mm(70);
    736c:	86 e4       	ldi	r24, 0x46	; 70
    736e:	90 e0       	ldi	r25, 0x00	; 0
    7370:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		correct_right3();
    7374:	0e 94 bd 18 	call	0x317a	; 0x317a <correct_right3>
    7378:	9e 01       	movw	r18, r28
    737a:	29 5b       	subi	r18, 0xB9	; 185
    737c:	3f 4f       	sbci	r19, 0xFF	; 255
    737e:	80 e0       	ldi	r24, 0x00	; 0
    7380:	90 e0       	ldi	r25, 0x00	; 0
    7382:	a8 e4       	ldi	r26, 0x48	; 72
    7384:	b3 e4       	ldi	r27, 0x43	; 67
    7386:	f9 01       	movw	r30, r18
    7388:	80 83       	st	Z, r24
    738a:	91 83       	std	Z+1, r25	; 0x01
    738c:	a2 83       	std	Z+2, r26	; 0x02
    738e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7390:	8e 01       	movw	r16, r28
    7392:	05 5b       	subi	r16, 0xB5	; 181
    7394:	1f 4f       	sbci	r17, 0xFF	; 255
    7396:	ce 01       	movw	r24, r28
    7398:	89 5b       	subi	r24, 0xB9	; 185
    739a:	9f 4f       	sbci	r25, 0xFF	; 255
    739c:	fc 01       	movw	r30, r24
    739e:	60 81       	ld	r22, Z
    73a0:	71 81       	ldd	r23, Z+1	; 0x01
    73a2:	82 81       	ldd	r24, Z+2	; 0x02
    73a4:	93 81       	ldd	r25, Z+3	; 0x03
    73a6:	26 e6       	ldi	r18, 0x66	; 102
    73a8:	36 e6       	ldi	r19, 0x66	; 102
    73aa:	46 e6       	ldi	r20, 0x66	; 102
    73ac:	55 e4       	ldi	r21, 0x45	; 69
    73ae:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    73b2:	dc 01       	movw	r26, r24
    73b4:	cb 01       	movw	r24, r22
    73b6:	f8 01       	movw	r30, r16
    73b8:	80 83       	st	Z, r24
    73ba:	91 83       	std	Z+1, r25	; 0x01
    73bc:	a2 83       	std	Z+2, r26	; 0x02
    73be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    73c0:	ce 01       	movw	r24, r28
    73c2:	85 5b       	subi	r24, 0xB5	; 181
    73c4:	9f 4f       	sbci	r25, 0xFF	; 255
    73c6:	11 e0       	ldi	r17, 0x01	; 1
    73c8:	fc 01       	movw	r30, r24
    73ca:	60 81       	ld	r22, Z
    73cc:	71 81       	ldd	r23, Z+1	; 0x01
    73ce:	82 81       	ldd	r24, Z+2	; 0x02
    73d0:	93 81       	ldd	r25, Z+3	; 0x03
    73d2:	20 e0       	ldi	r18, 0x00	; 0
    73d4:	30 e0       	ldi	r19, 0x00	; 0
    73d6:	40 e8       	ldi	r20, 0x80	; 128
    73d8:	5f e3       	ldi	r21, 0x3F	; 63
    73da:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    73de:	88 23       	and	r24, r24
    73e0:	0c f0       	brlt	.+2      	; 0x73e4 <pick_drop+0x722>
    73e2:	10 e0       	ldi	r17, 0x00	; 0
    73e4:	11 23       	and	r17, r17
    73e6:	49 f0       	breq	.+18     	; 0x73fa <pick_drop+0x738>
		__ticks = 1;
    73e8:	ce 01       	movw	r24, r28
    73ea:	81 5b       	subi	r24, 0xB1	; 177
    73ec:	9f 4f       	sbci	r25, 0xFF	; 255
    73ee:	21 e0       	ldi	r18, 0x01	; 1
    73f0:	30 e0       	ldi	r19, 0x00	; 0
    73f2:	fc 01       	movw	r30, r24
    73f4:	31 83       	std	Z+1, r19	; 0x01
    73f6:	20 83       	st	Z, r18
    73f8:	74 c0       	rjmp	.+232    	; 0x74e2 <pick_drop+0x820>
	else if (__tmp > 65535)
    73fa:	ce 01       	movw	r24, r28
    73fc:	85 5b       	subi	r24, 0xB5	; 181
    73fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7400:	11 e0       	ldi	r17, 0x01	; 1
    7402:	fc 01       	movw	r30, r24
    7404:	60 81       	ld	r22, Z
    7406:	71 81       	ldd	r23, Z+1	; 0x01
    7408:	82 81       	ldd	r24, Z+2	; 0x02
    740a:	93 81       	ldd	r25, Z+3	; 0x03
    740c:	20 e0       	ldi	r18, 0x00	; 0
    740e:	3f ef       	ldi	r19, 0xFF	; 255
    7410:	4f e7       	ldi	r20, 0x7F	; 127
    7412:	57 e4       	ldi	r21, 0x47	; 71
    7414:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7418:	18 16       	cp	r1, r24
    741a:	0c f0       	brlt	.+2      	; 0x741e <pick_drop+0x75c>
    741c:	10 e0       	ldi	r17, 0x00	; 0
    741e:	11 23       	and	r17, r17
    7420:	09 f4       	brne	.+2      	; 0x7424 <pick_drop+0x762>
    7422:	4d c0       	rjmp	.+154    	; 0x74be <pick_drop+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7424:	ce 01       	movw	r24, r28
    7426:	89 5b       	subi	r24, 0xB9	; 185
    7428:	9f 4f       	sbci	r25, 0xFF	; 255
    742a:	fc 01       	movw	r30, r24
    742c:	60 81       	ld	r22, Z
    742e:	71 81       	ldd	r23, Z+1	; 0x01
    7430:	82 81       	ldd	r24, Z+2	; 0x02
    7432:	93 81       	ldd	r25, Z+3	; 0x03
    7434:	20 e0       	ldi	r18, 0x00	; 0
    7436:	30 e0       	ldi	r19, 0x00	; 0
    7438:	40 e2       	ldi	r20, 0x20	; 32
    743a:	51 e4       	ldi	r21, 0x41	; 65
    743c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7440:	dc 01       	movw	r26, r24
    7442:	cb 01       	movw	r24, r22
    7444:	8e 01       	movw	r16, r28
    7446:	01 5b       	subi	r16, 0xB1	; 177
    7448:	1f 4f       	sbci	r17, 0xFF	; 255
    744a:	bc 01       	movw	r22, r24
    744c:	cd 01       	movw	r24, r26
    744e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7452:	dc 01       	movw	r26, r24
    7454:	cb 01       	movw	r24, r22
    7456:	f8 01       	movw	r30, r16
    7458:	91 83       	std	Z+1, r25	; 0x01
    745a:	80 83       	st	Z, r24
    745c:	27 c0       	rjmp	.+78     	; 0x74ac <pick_drop+0x7ea>
    745e:	ce 01       	movw	r24, r28
    7460:	8f 5a       	subi	r24, 0xAF	; 175
    7462:	9f 4f       	sbci	r25, 0xFF	; 255
    7464:	20 e7       	ldi	r18, 0x70	; 112
    7466:	31 e0       	ldi	r19, 0x01	; 1
    7468:	fc 01       	movw	r30, r24
    746a:	31 83       	std	Z+1, r19	; 0x01
    746c:	20 83       	st	Z, r18
    746e:	ce 01       	movw	r24, r28
    7470:	8f 5a       	subi	r24, 0xAF	; 175
    7472:	9f 4f       	sbci	r25, 0xFF	; 255
    7474:	fc 01       	movw	r30, r24
    7476:	80 81       	ld	r24, Z
    7478:	91 81       	ldd	r25, Z+1	; 0x01
    747a:	8c 01       	movw	r16, r24
    747c:	c8 01       	movw	r24, r16
    747e:	01 97       	sbiw	r24, 0x01	; 1
    7480:	f1 f7       	brne	.-4      	; 0x747e <pick_drop+0x7bc>
    7482:	8c 01       	movw	r16, r24
    7484:	ce 01       	movw	r24, r28
    7486:	8f 5a       	subi	r24, 0xAF	; 175
    7488:	9f 4f       	sbci	r25, 0xFF	; 255
    748a:	fc 01       	movw	r30, r24
    748c:	11 83       	std	Z+1, r17	; 0x01
    748e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7490:	ce 01       	movw	r24, r28
    7492:	81 5b       	subi	r24, 0xB1	; 177
    7494:	9f 4f       	sbci	r25, 0xFF	; 255
    7496:	9e 01       	movw	r18, r28
    7498:	21 5b       	subi	r18, 0xB1	; 177
    749a:	3f 4f       	sbci	r19, 0xFF	; 255
    749c:	f9 01       	movw	r30, r18
    749e:	20 81       	ld	r18, Z
    74a0:	31 81       	ldd	r19, Z+1	; 0x01
    74a2:	21 50       	subi	r18, 0x01	; 1
    74a4:	30 40       	sbci	r19, 0x00	; 0
    74a6:	fc 01       	movw	r30, r24
    74a8:	31 83       	std	Z+1, r19	; 0x01
    74aa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74ac:	ce 01       	movw	r24, r28
    74ae:	81 5b       	subi	r24, 0xB1	; 177
    74b0:	9f 4f       	sbci	r25, 0xFF	; 255
    74b2:	fc 01       	movw	r30, r24
    74b4:	80 81       	ld	r24, Z
    74b6:	91 81       	ldd	r25, Z+1	; 0x01
    74b8:	00 97       	sbiw	r24, 0x00	; 0
    74ba:	89 f6       	brne	.-94     	; 0x745e <pick_drop+0x79c>
    74bc:	2f c0       	rjmp	.+94     	; 0x751c <pick_drop+0x85a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74be:	8e 01       	movw	r16, r28
    74c0:	01 5b       	subi	r16, 0xB1	; 177
    74c2:	1f 4f       	sbci	r17, 0xFF	; 255
    74c4:	ce 01       	movw	r24, r28
    74c6:	85 5b       	subi	r24, 0xB5	; 181
    74c8:	9f 4f       	sbci	r25, 0xFF	; 255
    74ca:	fc 01       	movw	r30, r24
    74cc:	60 81       	ld	r22, Z
    74ce:	71 81       	ldd	r23, Z+1	; 0x01
    74d0:	82 81       	ldd	r24, Z+2	; 0x02
    74d2:	93 81       	ldd	r25, Z+3	; 0x03
    74d4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    74d8:	dc 01       	movw	r26, r24
    74da:	cb 01       	movw	r24, r22
    74dc:	f8 01       	movw	r30, r16
    74de:	91 83       	std	Z+1, r25	; 0x01
    74e0:	80 83       	st	Z, r24
    74e2:	ce 01       	movw	r24, r28
    74e4:	8d 5a       	subi	r24, 0xAD	; 173
    74e6:	9f 4f       	sbci	r25, 0xFF	; 255
    74e8:	9e 01       	movw	r18, r28
    74ea:	21 5b       	subi	r18, 0xB1	; 177
    74ec:	3f 4f       	sbci	r19, 0xFF	; 255
    74ee:	f9 01       	movw	r30, r18
    74f0:	20 81       	ld	r18, Z
    74f2:	31 81       	ldd	r19, Z+1	; 0x01
    74f4:	fc 01       	movw	r30, r24
    74f6:	31 83       	std	Z+1, r19	; 0x01
    74f8:	20 83       	st	Z, r18
    74fa:	ce 01       	movw	r24, r28
    74fc:	8d 5a       	subi	r24, 0xAD	; 173
    74fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7500:	fc 01       	movw	r30, r24
    7502:	80 81       	ld	r24, Z
    7504:	91 81       	ldd	r25, Z+1	; 0x01
    7506:	8c 01       	movw	r16, r24
    7508:	c8 01       	movw	r24, r16
    750a:	01 97       	sbiw	r24, 0x01	; 1
    750c:	f1 f7       	brne	.-4      	; 0x750a <pick_drop+0x848>
    750e:	8c 01       	movw	r16, r24
    7510:	ce 01       	movw	r24, r28
    7512:	8d 5a       	subi	r24, 0xAD	; 173
    7514:	9f 4f       	sbci	r25, 0xFF	; 255
    7516:	fc 01       	movw	r30, r24
    7518:	11 83       	std	Z+1, r17	; 0x01
    751a:	00 83       	st	Z, r16
		_delay_ms(200);
		stop();
    751c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    7520:	9e 01       	movw	r18, r28
    7522:	2b 5a       	subi	r18, 0xAB	; 171
    7524:	3f 4f       	sbci	r19, 0xFF	; 255
    7526:	80 e0       	ldi	r24, 0x00	; 0
    7528:	90 e0       	ldi	r25, 0x00	; 0
    752a:	a0 ea       	ldi	r26, 0xA0	; 160
    752c:	b1 e4       	ldi	r27, 0x41	; 65
    752e:	f9 01       	movw	r30, r18
    7530:	80 83       	st	Z, r24
    7532:	91 83       	std	Z+1, r25	; 0x01
    7534:	a2 83       	std	Z+2, r26	; 0x02
    7536:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7538:	8e 01       	movw	r16, r28
    753a:	07 5a       	subi	r16, 0xA7	; 167
    753c:	1f 4f       	sbci	r17, 0xFF	; 255
    753e:	ce 01       	movw	r24, r28
    7540:	8b 5a       	subi	r24, 0xAB	; 171
    7542:	9f 4f       	sbci	r25, 0xFF	; 255
    7544:	fc 01       	movw	r30, r24
    7546:	60 81       	ld	r22, Z
    7548:	71 81       	ldd	r23, Z+1	; 0x01
    754a:	82 81       	ldd	r24, Z+2	; 0x02
    754c:	93 81       	ldd	r25, Z+3	; 0x03
    754e:	26 e6       	ldi	r18, 0x66	; 102
    7550:	36 e6       	ldi	r19, 0x66	; 102
    7552:	46 e6       	ldi	r20, 0x66	; 102
    7554:	55 e4       	ldi	r21, 0x45	; 69
    7556:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    755a:	dc 01       	movw	r26, r24
    755c:	cb 01       	movw	r24, r22
    755e:	f8 01       	movw	r30, r16
    7560:	80 83       	st	Z, r24
    7562:	91 83       	std	Z+1, r25	; 0x01
    7564:	a2 83       	std	Z+2, r26	; 0x02
    7566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7568:	ce 01       	movw	r24, r28
    756a:	87 5a       	subi	r24, 0xA7	; 167
    756c:	9f 4f       	sbci	r25, 0xFF	; 255
    756e:	11 e0       	ldi	r17, 0x01	; 1
    7570:	fc 01       	movw	r30, r24
    7572:	60 81       	ld	r22, Z
    7574:	71 81       	ldd	r23, Z+1	; 0x01
    7576:	82 81       	ldd	r24, Z+2	; 0x02
    7578:	93 81       	ldd	r25, Z+3	; 0x03
    757a:	20 e0       	ldi	r18, 0x00	; 0
    757c:	30 e0       	ldi	r19, 0x00	; 0
    757e:	40 e8       	ldi	r20, 0x80	; 128
    7580:	5f e3       	ldi	r21, 0x3F	; 63
    7582:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    7586:	88 23       	and	r24, r24
    7588:	0c f0       	brlt	.+2      	; 0x758c <pick_drop+0x8ca>
    758a:	10 e0       	ldi	r17, 0x00	; 0
    758c:	11 23       	and	r17, r17
    758e:	49 f0       	breq	.+18     	; 0x75a2 <pick_drop+0x8e0>
		__ticks = 1;
    7590:	ce 01       	movw	r24, r28
    7592:	83 5a       	subi	r24, 0xA3	; 163
    7594:	9f 4f       	sbci	r25, 0xFF	; 255
    7596:	21 e0       	ldi	r18, 0x01	; 1
    7598:	30 e0       	ldi	r19, 0x00	; 0
    759a:	fc 01       	movw	r30, r24
    759c:	31 83       	std	Z+1, r19	; 0x01
    759e:	20 83       	st	Z, r18
    75a0:	74 c0       	rjmp	.+232    	; 0x768a <pick_drop+0x9c8>
	else if (__tmp > 65535)
    75a2:	ce 01       	movw	r24, r28
    75a4:	87 5a       	subi	r24, 0xA7	; 167
    75a6:	9f 4f       	sbci	r25, 0xFF	; 255
    75a8:	11 e0       	ldi	r17, 0x01	; 1
    75aa:	fc 01       	movw	r30, r24
    75ac:	60 81       	ld	r22, Z
    75ae:	71 81       	ldd	r23, Z+1	; 0x01
    75b0:	82 81       	ldd	r24, Z+2	; 0x02
    75b2:	93 81       	ldd	r25, Z+3	; 0x03
    75b4:	20 e0       	ldi	r18, 0x00	; 0
    75b6:	3f ef       	ldi	r19, 0xFF	; 255
    75b8:	4f e7       	ldi	r20, 0x7F	; 127
    75ba:	57 e4       	ldi	r21, 0x47	; 71
    75bc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    75c0:	18 16       	cp	r1, r24
    75c2:	0c f0       	brlt	.+2      	; 0x75c6 <pick_drop+0x904>
    75c4:	10 e0       	ldi	r17, 0x00	; 0
    75c6:	11 23       	and	r17, r17
    75c8:	09 f4       	brne	.+2      	; 0x75cc <pick_drop+0x90a>
    75ca:	4d c0       	rjmp	.+154    	; 0x7666 <pick_drop+0x9a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75cc:	ce 01       	movw	r24, r28
    75ce:	8b 5a       	subi	r24, 0xAB	; 171
    75d0:	9f 4f       	sbci	r25, 0xFF	; 255
    75d2:	fc 01       	movw	r30, r24
    75d4:	60 81       	ld	r22, Z
    75d6:	71 81       	ldd	r23, Z+1	; 0x01
    75d8:	82 81       	ldd	r24, Z+2	; 0x02
    75da:	93 81       	ldd	r25, Z+3	; 0x03
    75dc:	20 e0       	ldi	r18, 0x00	; 0
    75de:	30 e0       	ldi	r19, 0x00	; 0
    75e0:	40 e2       	ldi	r20, 0x20	; 32
    75e2:	51 e4       	ldi	r21, 0x41	; 65
    75e4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    75e8:	dc 01       	movw	r26, r24
    75ea:	cb 01       	movw	r24, r22
    75ec:	8e 01       	movw	r16, r28
    75ee:	03 5a       	subi	r16, 0xA3	; 163
    75f0:	1f 4f       	sbci	r17, 0xFF	; 255
    75f2:	bc 01       	movw	r22, r24
    75f4:	cd 01       	movw	r24, r26
    75f6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    75fa:	dc 01       	movw	r26, r24
    75fc:	cb 01       	movw	r24, r22
    75fe:	f8 01       	movw	r30, r16
    7600:	91 83       	std	Z+1, r25	; 0x01
    7602:	80 83       	st	Z, r24
    7604:	27 c0       	rjmp	.+78     	; 0x7654 <pick_drop+0x992>
    7606:	ce 01       	movw	r24, r28
    7608:	81 5a       	subi	r24, 0xA1	; 161
    760a:	9f 4f       	sbci	r25, 0xFF	; 255
    760c:	20 e7       	ldi	r18, 0x70	; 112
    760e:	31 e0       	ldi	r19, 0x01	; 1
    7610:	fc 01       	movw	r30, r24
    7612:	31 83       	std	Z+1, r19	; 0x01
    7614:	20 83       	st	Z, r18
    7616:	ce 01       	movw	r24, r28
    7618:	81 5a       	subi	r24, 0xA1	; 161
    761a:	9f 4f       	sbci	r25, 0xFF	; 255
    761c:	fc 01       	movw	r30, r24
    761e:	80 81       	ld	r24, Z
    7620:	91 81       	ldd	r25, Z+1	; 0x01
    7622:	8c 01       	movw	r16, r24
    7624:	c8 01       	movw	r24, r16
    7626:	01 97       	sbiw	r24, 0x01	; 1
    7628:	f1 f7       	brne	.-4      	; 0x7626 <pick_drop+0x964>
    762a:	8c 01       	movw	r16, r24
    762c:	ce 01       	movw	r24, r28
    762e:	81 5a       	subi	r24, 0xA1	; 161
    7630:	9f 4f       	sbci	r25, 0xFF	; 255
    7632:	fc 01       	movw	r30, r24
    7634:	11 83       	std	Z+1, r17	; 0x01
    7636:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7638:	ce 01       	movw	r24, r28
    763a:	83 5a       	subi	r24, 0xA3	; 163
    763c:	9f 4f       	sbci	r25, 0xFF	; 255
    763e:	9e 01       	movw	r18, r28
    7640:	23 5a       	subi	r18, 0xA3	; 163
    7642:	3f 4f       	sbci	r19, 0xFF	; 255
    7644:	f9 01       	movw	r30, r18
    7646:	20 81       	ld	r18, Z
    7648:	31 81       	ldd	r19, Z+1	; 0x01
    764a:	21 50       	subi	r18, 0x01	; 1
    764c:	30 40       	sbci	r19, 0x00	; 0
    764e:	fc 01       	movw	r30, r24
    7650:	31 83       	std	Z+1, r19	; 0x01
    7652:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7654:	ce 01       	movw	r24, r28
    7656:	83 5a       	subi	r24, 0xA3	; 163
    7658:	9f 4f       	sbci	r25, 0xFF	; 255
    765a:	fc 01       	movw	r30, r24
    765c:	80 81       	ld	r24, Z
    765e:	91 81       	ldd	r25, Z+1	; 0x01
    7660:	00 97       	sbiw	r24, 0x00	; 0
    7662:	89 f6       	brne	.-94     	; 0x7606 <pick_drop+0x944>
    7664:	2f c0       	rjmp	.+94     	; 0x76c4 <pick_drop+0xa02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7666:	8e 01       	movw	r16, r28
    7668:	03 5a       	subi	r16, 0xA3	; 163
    766a:	1f 4f       	sbci	r17, 0xFF	; 255
    766c:	ce 01       	movw	r24, r28
    766e:	87 5a       	subi	r24, 0xA7	; 167
    7670:	9f 4f       	sbci	r25, 0xFF	; 255
    7672:	fc 01       	movw	r30, r24
    7674:	60 81       	ld	r22, Z
    7676:	71 81       	ldd	r23, Z+1	; 0x01
    7678:	82 81       	ldd	r24, Z+2	; 0x02
    767a:	93 81       	ldd	r25, Z+3	; 0x03
    767c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7680:	dc 01       	movw	r26, r24
    7682:	cb 01       	movw	r24, r22
    7684:	f8 01       	movw	r30, r16
    7686:	91 83       	std	Z+1, r25	; 0x01
    7688:	80 83       	st	Z, r24
    768a:	ce 01       	movw	r24, r28
    768c:	8f 59       	subi	r24, 0x9F	; 159
    768e:	9f 4f       	sbci	r25, 0xFF	; 255
    7690:	9e 01       	movw	r18, r28
    7692:	23 5a       	subi	r18, 0xA3	; 163
    7694:	3f 4f       	sbci	r19, 0xFF	; 255
    7696:	f9 01       	movw	r30, r18
    7698:	20 81       	ld	r18, Z
    769a:	31 81       	ldd	r19, Z+1	; 0x01
    769c:	fc 01       	movw	r30, r24
    769e:	31 83       	std	Z+1, r19	; 0x01
    76a0:	20 83       	st	Z, r18
    76a2:	ce 01       	movw	r24, r28
    76a4:	8f 59       	subi	r24, 0x9F	; 159
    76a6:	9f 4f       	sbci	r25, 0xFF	; 255
    76a8:	fc 01       	movw	r30, r24
    76aa:	80 81       	ld	r24, Z
    76ac:	91 81       	ldd	r25, Z+1	; 0x01
    76ae:	8c 01       	movw	r16, r24
    76b0:	c8 01       	movw	r24, r16
    76b2:	01 97       	sbiw	r24, 0x01	; 1
    76b4:	f1 f7       	brne	.-4      	; 0x76b2 <pick_drop+0x9f0>
    76b6:	8c 01       	movw	r16, r24
    76b8:	ce 01       	movw	r24, r28
    76ba:	8f 59       	subi	r24, 0x9F	; 159
    76bc:	9f 4f       	sbci	r25, 0xFF	; 255
    76be:	fc 01       	movw	r30, r24
    76c0:	11 83       	std	Z+1, r17	; 0x01
    76c2:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    76c4:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    76c8:	9e 01       	movw	r18, r28
    76ca:	2d 59       	subi	r18, 0x9D	; 157
    76cc:	3f 4f       	sbci	r19, 0xFF	; 255
    76ce:	80 e0       	ldi	r24, 0x00	; 0
    76d0:	90 e0       	ldi	r25, 0x00	; 0
    76d2:	a0 ea       	ldi	r26, 0xA0	; 160
    76d4:	b1 e4       	ldi	r27, 0x41	; 65
    76d6:	f9 01       	movw	r30, r18
    76d8:	80 83       	st	Z, r24
    76da:	91 83       	std	Z+1, r25	; 0x01
    76dc:	a2 83       	std	Z+2, r26	; 0x02
    76de:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    76e0:	8e 01       	movw	r16, r28
    76e2:	09 59       	subi	r16, 0x99	; 153
    76e4:	1f 4f       	sbci	r17, 0xFF	; 255
    76e6:	ce 01       	movw	r24, r28
    76e8:	8d 59       	subi	r24, 0x9D	; 157
    76ea:	9f 4f       	sbci	r25, 0xFF	; 255
    76ec:	fc 01       	movw	r30, r24
    76ee:	60 81       	ld	r22, Z
    76f0:	71 81       	ldd	r23, Z+1	; 0x01
    76f2:	82 81       	ldd	r24, Z+2	; 0x02
    76f4:	93 81       	ldd	r25, Z+3	; 0x03
    76f6:	26 e6       	ldi	r18, 0x66	; 102
    76f8:	36 e6       	ldi	r19, 0x66	; 102
    76fa:	46 e6       	ldi	r20, 0x66	; 102
    76fc:	55 e4       	ldi	r21, 0x45	; 69
    76fe:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7702:	dc 01       	movw	r26, r24
    7704:	cb 01       	movw	r24, r22
    7706:	f8 01       	movw	r30, r16
    7708:	80 83       	st	Z, r24
    770a:	91 83       	std	Z+1, r25	; 0x01
    770c:	a2 83       	std	Z+2, r26	; 0x02
    770e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7710:	ce 01       	movw	r24, r28
    7712:	89 59       	subi	r24, 0x99	; 153
    7714:	9f 4f       	sbci	r25, 0xFF	; 255
    7716:	11 e0       	ldi	r17, 0x01	; 1
    7718:	fc 01       	movw	r30, r24
    771a:	60 81       	ld	r22, Z
    771c:	71 81       	ldd	r23, Z+1	; 0x01
    771e:	82 81       	ldd	r24, Z+2	; 0x02
    7720:	93 81       	ldd	r25, Z+3	; 0x03
    7722:	20 e0       	ldi	r18, 0x00	; 0
    7724:	30 e0       	ldi	r19, 0x00	; 0
    7726:	40 e8       	ldi	r20, 0x80	; 128
    7728:	5f e3       	ldi	r21, 0x3F	; 63
    772a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    772e:	88 23       	and	r24, r24
    7730:	0c f0       	brlt	.+2      	; 0x7734 <pick_drop+0xa72>
    7732:	10 e0       	ldi	r17, 0x00	; 0
    7734:	11 23       	and	r17, r17
    7736:	49 f0       	breq	.+18     	; 0x774a <pick_drop+0xa88>
		__ticks = 1;
    7738:	ce 01       	movw	r24, r28
    773a:	85 59       	subi	r24, 0x95	; 149
    773c:	9f 4f       	sbci	r25, 0xFF	; 255
    773e:	21 e0       	ldi	r18, 0x01	; 1
    7740:	30 e0       	ldi	r19, 0x00	; 0
    7742:	fc 01       	movw	r30, r24
    7744:	31 83       	std	Z+1, r19	; 0x01
    7746:	20 83       	st	Z, r18
    7748:	74 c0       	rjmp	.+232    	; 0x7832 <pick_drop+0xb70>
	else if (__tmp > 65535)
    774a:	ce 01       	movw	r24, r28
    774c:	89 59       	subi	r24, 0x99	; 153
    774e:	9f 4f       	sbci	r25, 0xFF	; 255
    7750:	11 e0       	ldi	r17, 0x01	; 1
    7752:	fc 01       	movw	r30, r24
    7754:	60 81       	ld	r22, Z
    7756:	71 81       	ldd	r23, Z+1	; 0x01
    7758:	82 81       	ldd	r24, Z+2	; 0x02
    775a:	93 81       	ldd	r25, Z+3	; 0x03
    775c:	20 e0       	ldi	r18, 0x00	; 0
    775e:	3f ef       	ldi	r19, 0xFF	; 255
    7760:	4f e7       	ldi	r20, 0x7F	; 127
    7762:	57 e4       	ldi	r21, 0x47	; 71
    7764:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7768:	18 16       	cp	r1, r24
    776a:	0c f0       	brlt	.+2      	; 0x776e <pick_drop+0xaac>
    776c:	10 e0       	ldi	r17, 0x00	; 0
    776e:	11 23       	and	r17, r17
    7770:	09 f4       	brne	.+2      	; 0x7774 <pick_drop+0xab2>
    7772:	4d c0       	rjmp	.+154    	; 0x780e <pick_drop+0xb4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7774:	ce 01       	movw	r24, r28
    7776:	8d 59       	subi	r24, 0x9D	; 157
    7778:	9f 4f       	sbci	r25, 0xFF	; 255
    777a:	fc 01       	movw	r30, r24
    777c:	60 81       	ld	r22, Z
    777e:	71 81       	ldd	r23, Z+1	; 0x01
    7780:	82 81       	ldd	r24, Z+2	; 0x02
    7782:	93 81       	ldd	r25, Z+3	; 0x03
    7784:	20 e0       	ldi	r18, 0x00	; 0
    7786:	30 e0       	ldi	r19, 0x00	; 0
    7788:	40 e2       	ldi	r20, 0x20	; 32
    778a:	51 e4       	ldi	r21, 0x41	; 65
    778c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7790:	dc 01       	movw	r26, r24
    7792:	cb 01       	movw	r24, r22
    7794:	8e 01       	movw	r16, r28
    7796:	05 59       	subi	r16, 0x95	; 149
    7798:	1f 4f       	sbci	r17, 0xFF	; 255
    779a:	bc 01       	movw	r22, r24
    779c:	cd 01       	movw	r24, r26
    779e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    77a2:	dc 01       	movw	r26, r24
    77a4:	cb 01       	movw	r24, r22
    77a6:	f8 01       	movw	r30, r16
    77a8:	91 83       	std	Z+1, r25	; 0x01
    77aa:	80 83       	st	Z, r24
    77ac:	27 c0       	rjmp	.+78     	; 0x77fc <pick_drop+0xb3a>
    77ae:	ce 01       	movw	r24, r28
    77b0:	83 59       	subi	r24, 0x93	; 147
    77b2:	9f 4f       	sbci	r25, 0xFF	; 255
    77b4:	20 e7       	ldi	r18, 0x70	; 112
    77b6:	31 e0       	ldi	r19, 0x01	; 1
    77b8:	fc 01       	movw	r30, r24
    77ba:	31 83       	std	Z+1, r19	; 0x01
    77bc:	20 83       	st	Z, r18
    77be:	ce 01       	movw	r24, r28
    77c0:	83 59       	subi	r24, 0x93	; 147
    77c2:	9f 4f       	sbci	r25, 0xFF	; 255
    77c4:	fc 01       	movw	r30, r24
    77c6:	80 81       	ld	r24, Z
    77c8:	91 81       	ldd	r25, Z+1	; 0x01
    77ca:	8c 01       	movw	r16, r24
    77cc:	c8 01       	movw	r24, r16
    77ce:	01 97       	sbiw	r24, 0x01	; 1
    77d0:	f1 f7       	brne	.-4      	; 0x77ce <pick_drop+0xb0c>
    77d2:	8c 01       	movw	r16, r24
    77d4:	ce 01       	movw	r24, r28
    77d6:	83 59       	subi	r24, 0x93	; 147
    77d8:	9f 4f       	sbci	r25, 0xFF	; 255
    77da:	fc 01       	movw	r30, r24
    77dc:	11 83       	std	Z+1, r17	; 0x01
    77de:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77e0:	ce 01       	movw	r24, r28
    77e2:	85 59       	subi	r24, 0x95	; 149
    77e4:	9f 4f       	sbci	r25, 0xFF	; 255
    77e6:	9e 01       	movw	r18, r28
    77e8:	25 59       	subi	r18, 0x95	; 149
    77ea:	3f 4f       	sbci	r19, 0xFF	; 255
    77ec:	f9 01       	movw	r30, r18
    77ee:	20 81       	ld	r18, Z
    77f0:	31 81       	ldd	r19, Z+1	; 0x01
    77f2:	21 50       	subi	r18, 0x01	; 1
    77f4:	30 40       	sbci	r19, 0x00	; 0
    77f6:	fc 01       	movw	r30, r24
    77f8:	31 83       	std	Z+1, r19	; 0x01
    77fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77fc:	ce 01       	movw	r24, r28
    77fe:	85 59       	subi	r24, 0x95	; 149
    7800:	9f 4f       	sbci	r25, 0xFF	; 255
    7802:	fc 01       	movw	r30, r24
    7804:	80 81       	ld	r24, Z
    7806:	91 81       	ldd	r25, Z+1	; 0x01
    7808:	00 97       	sbiw	r24, 0x00	; 0
    780a:	89 f6       	brne	.-94     	; 0x77ae <pick_drop+0xaec>
    780c:	2f c0       	rjmp	.+94     	; 0x786c <pick_drop+0xbaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    780e:	8e 01       	movw	r16, r28
    7810:	05 59       	subi	r16, 0x95	; 149
    7812:	1f 4f       	sbci	r17, 0xFF	; 255
    7814:	ce 01       	movw	r24, r28
    7816:	89 59       	subi	r24, 0x99	; 153
    7818:	9f 4f       	sbci	r25, 0xFF	; 255
    781a:	fc 01       	movw	r30, r24
    781c:	60 81       	ld	r22, Z
    781e:	71 81       	ldd	r23, Z+1	; 0x01
    7820:	82 81       	ldd	r24, Z+2	; 0x02
    7822:	93 81       	ldd	r25, Z+3	; 0x03
    7824:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7828:	dc 01       	movw	r26, r24
    782a:	cb 01       	movw	r24, r22
    782c:	f8 01       	movw	r30, r16
    782e:	91 83       	std	Z+1, r25	; 0x01
    7830:	80 83       	st	Z, r24
    7832:	ce 01       	movw	r24, r28
    7834:	81 59       	subi	r24, 0x91	; 145
    7836:	9f 4f       	sbci	r25, 0xFF	; 255
    7838:	9e 01       	movw	r18, r28
    783a:	25 59       	subi	r18, 0x95	; 149
    783c:	3f 4f       	sbci	r19, 0xFF	; 255
    783e:	f9 01       	movw	r30, r18
    7840:	20 81       	ld	r18, Z
    7842:	31 81       	ldd	r19, Z+1	; 0x01
    7844:	fc 01       	movw	r30, r24
    7846:	31 83       	std	Z+1, r19	; 0x01
    7848:	20 83       	st	Z, r18
    784a:	ce 01       	movw	r24, r28
    784c:	81 59       	subi	r24, 0x91	; 145
    784e:	9f 4f       	sbci	r25, 0xFF	; 255
    7850:	fc 01       	movw	r30, r24
    7852:	80 81       	ld	r24, Z
    7854:	91 81       	ldd	r25, Z+1	; 0x01
    7856:	8c 01       	movw	r16, r24
    7858:	c8 01       	movw	r24, r16
    785a:	01 97       	sbiw	r24, 0x01	; 1
    785c:	f1 f7       	brne	.-4      	; 0x785a <pick_drop+0xb98>
    785e:	8c 01       	movw	r16, r24
    7860:	ce 01       	movw	r24, r28
    7862:	81 59       	subi	r24, 0x91	; 145
    7864:	9f 4f       	sbci	r25, 0xFF	; 255
    7866:	fc 01       	movw	r30, r24
    7868:	11 83       	std	Z+1, r17	; 0x01
    786a:	00 83       	st	Z, r16
		_delay_ms(20);
		correct_right3();
    786c:	0e 94 bd 18 	call	0x317a	; 0x317a <correct_right3>
    7870:	9e 01       	movw	r18, r28
    7872:	2f 58       	subi	r18, 0x8F	; 143
    7874:	3f 4f       	sbci	r19, 0xFF	; 255
    7876:	80 e0       	ldi	r24, 0x00	; 0
    7878:	90 e0       	ldi	r25, 0x00	; 0
    787a:	a0 ef       	ldi	r26, 0xF0	; 240
    787c:	b1 e4       	ldi	r27, 0x41	; 65
    787e:	f9 01       	movw	r30, r18
    7880:	80 83       	st	Z, r24
    7882:	91 83       	std	Z+1, r25	; 0x01
    7884:	a2 83       	std	Z+2, r26	; 0x02
    7886:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7888:	8e 01       	movw	r16, r28
    788a:	0b 58       	subi	r16, 0x8B	; 139
    788c:	1f 4f       	sbci	r17, 0xFF	; 255
    788e:	ce 01       	movw	r24, r28
    7890:	8f 58       	subi	r24, 0x8F	; 143
    7892:	9f 4f       	sbci	r25, 0xFF	; 255
    7894:	fc 01       	movw	r30, r24
    7896:	60 81       	ld	r22, Z
    7898:	71 81       	ldd	r23, Z+1	; 0x01
    789a:	82 81       	ldd	r24, Z+2	; 0x02
    789c:	93 81       	ldd	r25, Z+3	; 0x03
    789e:	26 e6       	ldi	r18, 0x66	; 102
    78a0:	36 e6       	ldi	r19, 0x66	; 102
    78a2:	46 e6       	ldi	r20, 0x66	; 102
    78a4:	55 e4       	ldi	r21, 0x45	; 69
    78a6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    78aa:	dc 01       	movw	r26, r24
    78ac:	cb 01       	movw	r24, r22
    78ae:	f8 01       	movw	r30, r16
    78b0:	80 83       	st	Z, r24
    78b2:	91 83       	std	Z+1, r25	; 0x01
    78b4:	a2 83       	std	Z+2, r26	; 0x02
    78b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    78b8:	ce 01       	movw	r24, r28
    78ba:	8b 58       	subi	r24, 0x8B	; 139
    78bc:	9f 4f       	sbci	r25, 0xFF	; 255
    78be:	11 e0       	ldi	r17, 0x01	; 1
    78c0:	fc 01       	movw	r30, r24
    78c2:	60 81       	ld	r22, Z
    78c4:	71 81       	ldd	r23, Z+1	; 0x01
    78c6:	82 81       	ldd	r24, Z+2	; 0x02
    78c8:	93 81       	ldd	r25, Z+3	; 0x03
    78ca:	20 e0       	ldi	r18, 0x00	; 0
    78cc:	30 e0       	ldi	r19, 0x00	; 0
    78ce:	40 e8       	ldi	r20, 0x80	; 128
    78d0:	5f e3       	ldi	r21, 0x3F	; 63
    78d2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    78d6:	88 23       	and	r24, r24
    78d8:	0c f0       	brlt	.+2      	; 0x78dc <pick_drop+0xc1a>
    78da:	10 e0       	ldi	r17, 0x00	; 0
    78dc:	11 23       	and	r17, r17
    78de:	49 f0       	breq	.+18     	; 0x78f2 <pick_drop+0xc30>
		__ticks = 1;
    78e0:	ce 01       	movw	r24, r28
    78e2:	87 58       	subi	r24, 0x87	; 135
    78e4:	9f 4f       	sbci	r25, 0xFF	; 255
    78e6:	21 e0       	ldi	r18, 0x01	; 1
    78e8:	30 e0       	ldi	r19, 0x00	; 0
    78ea:	fc 01       	movw	r30, r24
    78ec:	31 83       	std	Z+1, r19	; 0x01
    78ee:	20 83       	st	Z, r18
    78f0:	75 c0       	rjmp	.+234    	; 0x79dc <pick_drop+0xd1a>
	else if (__tmp > 65535)
    78f2:	ce 01       	movw	r24, r28
    78f4:	8b 58       	subi	r24, 0x8B	; 139
    78f6:	9f 4f       	sbci	r25, 0xFF	; 255
    78f8:	11 e0       	ldi	r17, 0x01	; 1
    78fa:	fc 01       	movw	r30, r24
    78fc:	60 81       	ld	r22, Z
    78fe:	71 81       	ldd	r23, Z+1	; 0x01
    7900:	82 81       	ldd	r24, Z+2	; 0x02
    7902:	93 81       	ldd	r25, Z+3	; 0x03
    7904:	20 e0       	ldi	r18, 0x00	; 0
    7906:	3f ef       	ldi	r19, 0xFF	; 255
    7908:	4f e7       	ldi	r20, 0x7F	; 127
    790a:	57 e4       	ldi	r21, 0x47	; 71
    790c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7910:	18 16       	cp	r1, r24
    7912:	0c f0       	brlt	.+2      	; 0x7916 <pick_drop+0xc54>
    7914:	10 e0       	ldi	r17, 0x00	; 0
    7916:	11 23       	and	r17, r17
    7918:	09 f4       	brne	.+2      	; 0x791c <pick_drop+0xc5a>
    791a:	4e c0       	rjmp	.+156    	; 0x79b8 <pick_drop+0xcf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    791c:	ce 01       	movw	r24, r28
    791e:	8f 58       	subi	r24, 0x8F	; 143
    7920:	9f 4f       	sbci	r25, 0xFF	; 255
    7922:	fc 01       	movw	r30, r24
    7924:	60 81       	ld	r22, Z
    7926:	71 81       	ldd	r23, Z+1	; 0x01
    7928:	82 81       	ldd	r24, Z+2	; 0x02
    792a:	93 81       	ldd	r25, Z+3	; 0x03
    792c:	20 e0       	ldi	r18, 0x00	; 0
    792e:	30 e0       	ldi	r19, 0x00	; 0
    7930:	40 e2       	ldi	r20, 0x20	; 32
    7932:	51 e4       	ldi	r21, 0x41	; 65
    7934:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7938:	dc 01       	movw	r26, r24
    793a:	cb 01       	movw	r24, r22
    793c:	8e 01       	movw	r16, r28
    793e:	07 58       	subi	r16, 0x87	; 135
    7940:	1f 4f       	sbci	r17, 0xFF	; 255
    7942:	bc 01       	movw	r22, r24
    7944:	cd 01       	movw	r24, r26
    7946:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    794a:	dc 01       	movw	r26, r24
    794c:	cb 01       	movw	r24, r22
    794e:	f8 01       	movw	r30, r16
    7950:	91 83       	std	Z+1, r25	; 0x01
    7952:	80 83       	st	Z, r24
    7954:	27 c0       	rjmp	.+78     	; 0x79a4 <pick_drop+0xce2>
    7956:	ce 01       	movw	r24, r28
    7958:	85 58       	subi	r24, 0x85	; 133
    795a:	9f 4f       	sbci	r25, 0xFF	; 255
    795c:	20 e7       	ldi	r18, 0x70	; 112
    795e:	31 e0       	ldi	r19, 0x01	; 1
    7960:	fc 01       	movw	r30, r24
    7962:	31 83       	std	Z+1, r19	; 0x01
    7964:	20 83       	st	Z, r18
    7966:	ce 01       	movw	r24, r28
    7968:	85 58       	subi	r24, 0x85	; 133
    796a:	9f 4f       	sbci	r25, 0xFF	; 255
    796c:	fc 01       	movw	r30, r24
    796e:	80 81       	ld	r24, Z
    7970:	91 81       	ldd	r25, Z+1	; 0x01
    7972:	8c 01       	movw	r16, r24
    7974:	c8 01       	movw	r24, r16
    7976:	01 97       	sbiw	r24, 0x01	; 1
    7978:	f1 f7       	brne	.-4      	; 0x7976 <pick_drop+0xcb4>
    797a:	8c 01       	movw	r16, r24
    797c:	ce 01       	movw	r24, r28
    797e:	85 58       	subi	r24, 0x85	; 133
    7980:	9f 4f       	sbci	r25, 0xFF	; 255
    7982:	fc 01       	movw	r30, r24
    7984:	11 83       	std	Z+1, r17	; 0x01
    7986:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7988:	ce 01       	movw	r24, r28
    798a:	87 58       	subi	r24, 0x87	; 135
    798c:	9f 4f       	sbci	r25, 0xFF	; 255
    798e:	9e 01       	movw	r18, r28
    7990:	27 58       	subi	r18, 0x87	; 135
    7992:	3f 4f       	sbci	r19, 0xFF	; 255
    7994:	f9 01       	movw	r30, r18
    7996:	20 81       	ld	r18, Z
    7998:	31 81       	ldd	r19, Z+1	; 0x01
    799a:	21 50       	subi	r18, 0x01	; 1
    799c:	30 40       	sbci	r19, 0x00	; 0
    799e:	fc 01       	movw	r30, r24
    79a0:	31 83       	std	Z+1, r19	; 0x01
    79a2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79a4:	ce 01       	movw	r24, r28
    79a6:	87 58       	subi	r24, 0x87	; 135
    79a8:	9f 4f       	sbci	r25, 0xFF	; 255
    79aa:	fc 01       	movw	r30, r24
    79ac:	80 81       	ld	r24, Z
    79ae:	91 81       	ldd	r25, Z+1	; 0x01
    79b0:	00 97       	sbiw	r24, 0x00	; 0
    79b2:	89 f6       	brne	.-94     	; 0x7956 <pick_drop+0xc94>
    79b4:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    79b8:	8e 01       	movw	r16, r28
    79ba:	07 58       	subi	r16, 0x87	; 135
    79bc:	1f 4f       	sbci	r17, 0xFF	; 255
    79be:	ce 01       	movw	r24, r28
    79c0:	8b 58       	subi	r24, 0x8B	; 139
    79c2:	9f 4f       	sbci	r25, 0xFF	; 255
    79c4:	fc 01       	movw	r30, r24
    79c6:	60 81       	ld	r22, Z
    79c8:	71 81       	ldd	r23, Z+1	; 0x01
    79ca:	82 81       	ldd	r24, Z+2	; 0x02
    79cc:	93 81       	ldd	r25, Z+3	; 0x03
    79ce:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    79d2:	dc 01       	movw	r26, r24
    79d4:	cb 01       	movw	r24, r22
    79d6:	f8 01       	movw	r30, r16
    79d8:	91 83       	std	Z+1, r25	; 0x01
    79da:	80 83       	st	Z, r24
    79dc:	ce 01       	movw	r24, r28
    79de:	83 58       	subi	r24, 0x83	; 131
    79e0:	9f 4f       	sbci	r25, 0xFF	; 255
    79e2:	9e 01       	movw	r18, r28
    79e4:	27 58       	subi	r18, 0x87	; 135
    79e6:	3f 4f       	sbci	r19, 0xFF	; 255
    79e8:	f9 01       	movw	r30, r18
    79ea:	20 81       	ld	r18, Z
    79ec:	31 81       	ldd	r19, Z+1	; 0x01
    79ee:	fc 01       	movw	r30, r24
    79f0:	31 83       	std	Z+1, r19	; 0x01
    79f2:	20 83       	st	Z, r18
    79f4:	ce 01       	movw	r24, r28
    79f6:	83 58       	subi	r24, 0x83	; 131
    79f8:	9f 4f       	sbci	r25, 0xFF	; 255
    79fa:	fc 01       	movw	r30, r24
    79fc:	80 81       	ld	r24, Z
    79fe:	91 81       	ldd	r25, Z+1	; 0x01
    7a00:	8c 01       	movw	r16, r24
    7a02:	c8 01       	movw	r24, r16
    7a04:	01 97       	sbiw	r24, 0x01	; 1
    7a06:	f1 f7       	brne	.-4      	; 0x7a04 <pick_drop+0xd42>
    7a08:	8c 01       	movw	r16, r24
    7a0a:	ce 01       	movw	r24, r28
    7a0c:	83 58       	subi	r24, 0x83	; 131
    7a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    7a10:	fc 01       	movw	r30, r24
    7a12:	11 83       	std	Z+1, r17	; 0x01
    7a14:	00 83       	st	Z, r16
    7a16:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
		_delay_ms(30);
	}
	else if(pd=='4'){
    7a1a:	ce 01       	movw	r24, r28
    7a1c:	8d 54       	subi	r24, 0x4D	; 77
    7a1e:	9e 4f       	sbci	r25, 0xFE	; 254
    7a20:	fc 01       	movw	r30, r24
    7a22:	80 81       	ld	r24, Z
    7a24:	84 33       	cpi	r24, 0x34	; 52
    7a26:	09 f0       	breq	.+2      	; 0x7a2a <pick_drop+0xd68>
    7a28:	44 c4       	rjmp	.+2184   	; 0x82b2 <pick_drop+0x15f0>
		// first node
		if(master_path[node-1]=='N'){
    7a2a:	80 91 65 03 	lds	r24, 0x0365
    7a2e:	90 91 66 03 	lds	r25, 0x0366
    7a32:	01 97       	sbiw	r24, 0x01	; 1
    7a34:	87 59       	subi	r24, 0x97	; 151
    7a36:	9c 4f       	sbci	r25, 0xFC	; 252
    7a38:	fc 01       	movw	r30, r24
    7a3a:	80 81       	ld	r24, Z
    7a3c:	8e 34       	cpi	r24, 0x4E	; 78
    7a3e:	09 f0       	breq	.+2      	; 0x7a42 <pick_drop+0xd80>
    7a40:	61 c3       	rjmp	.+1730   	; 0x8104 <pick_drop+0x1442>
		forward_mm(35);
    7a42:	83 e2       	ldi	r24, 0x23	; 35
    7a44:	90 e0       	ldi	r25, 0x00	; 0
    7a46:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		spl_left();
    7a4a:	0e 94 56 12 	call	0x24ac	; 0x24ac <spl_left>
		back_mm(25);
    7a4e:	89 e1       	ldi	r24, 0x19	; 25
    7a50:	90 e0       	ldi	r25, 0x00	; 0
    7a52:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    7a56:	9e 01       	movw	r18, r28
    7a58:	21 58       	subi	r18, 0x81	; 129
    7a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a5c:	80 e0       	ldi	r24, 0x00	; 0
    7a5e:	90 e0       	ldi	r25, 0x00	; 0
    7a60:	a0 ea       	ldi	r26, 0xA0	; 160
    7a62:	b1 e4       	ldi	r27, 0x41	; 65
    7a64:	f9 01       	movw	r30, r18
    7a66:	80 83       	st	Z, r24
    7a68:	91 83       	std	Z+1, r25	; 0x01
    7a6a:	a2 83       	std	Z+2, r26	; 0x02
    7a6c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7a6e:	8e 01       	movw	r16, r28
    7a70:	0d 57       	subi	r16, 0x7D	; 125
    7a72:	1f 4f       	sbci	r17, 0xFF	; 255
    7a74:	ce 01       	movw	r24, r28
    7a76:	81 58       	subi	r24, 0x81	; 129
    7a78:	9f 4f       	sbci	r25, 0xFF	; 255
    7a7a:	fc 01       	movw	r30, r24
    7a7c:	60 81       	ld	r22, Z
    7a7e:	71 81       	ldd	r23, Z+1	; 0x01
    7a80:	82 81       	ldd	r24, Z+2	; 0x02
    7a82:	93 81       	ldd	r25, Z+3	; 0x03
    7a84:	26 e6       	ldi	r18, 0x66	; 102
    7a86:	36 e6       	ldi	r19, 0x66	; 102
    7a88:	46 e6       	ldi	r20, 0x66	; 102
    7a8a:	55 e4       	ldi	r21, 0x45	; 69
    7a8c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7a90:	dc 01       	movw	r26, r24
    7a92:	cb 01       	movw	r24, r22
    7a94:	f8 01       	movw	r30, r16
    7a96:	80 83       	st	Z, r24
    7a98:	91 83       	std	Z+1, r25	; 0x01
    7a9a:	a2 83       	std	Z+2, r26	; 0x02
    7a9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7a9e:	ce 01       	movw	r24, r28
    7aa0:	8d 57       	subi	r24, 0x7D	; 125
    7aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    7aa4:	11 e0       	ldi	r17, 0x01	; 1
    7aa6:	fc 01       	movw	r30, r24
    7aa8:	60 81       	ld	r22, Z
    7aaa:	71 81       	ldd	r23, Z+1	; 0x01
    7aac:	82 81       	ldd	r24, Z+2	; 0x02
    7aae:	93 81       	ldd	r25, Z+3	; 0x03
    7ab0:	20 e0       	ldi	r18, 0x00	; 0
    7ab2:	30 e0       	ldi	r19, 0x00	; 0
    7ab4:	40 e8       	ldi	r20, 0x80	; 128
    7ab6:	5f e3       	ldi	r21, 0x3F	; 63
    7ab8:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    7abc:	88 23       	and	r24, r24
    7abe:	0c f0       	brlt	.+2      	; 0x7ac2 <pick_drop+0xe00>
    7ac0:	10 e0       	ldi	r17, 0x00	; 0
    7ac2:	11 23       	and	r17, r17
    7ac4:	49 f0       	breq	.+18     	; 0x7ad8 <pick_drop+0xe16>
		__ticks = 1;
    7ac6:	ce 01       	movw	r24, r28
    7ac8:	89 57       	subi	r24, 0x79	; 121
    7aca:	9f 4f       	sbci	r25, 0xFF	; 255
    7acc:	21 e0       	ldi	r18, 0x01	; 1
    7ace:	30 e0       	ldi	r19, 0x00	; 0
    7ad0:	fc 01       	movw	r30, r24
    7ad2:	31 83       	std	Z+1, r19	; 0x01
    7ad4:	20 83       	st	Z, r18
    7ad6:	74 c0       	rjmp	.+232    	; 0x7bc0 <pick_drop+0xefe>
	else if (__tmp > 65535)
    7ad8:	ce 01       	movw	r24, r28
    7ada:	8d 57       	subi	r24, 0x7D	; 125
    7adc:	9f 4f       	sbci	r25, 0xFF	; 255
    7ade:	11 e0       	ldi	r17, 0x01	; 1
    7ae0:	fc 01       	movw	r30, r24
    7ae2:	60 81       	ld	r22, Z
    7ae4:	71 81       	ldd	r23, Z+1	; 0x01
    7ae6:	82 81       	ldd	r24, Z+2	; 0x02
    7ae8:	93 81       	ldd	r25, Z+3	; 0x03
    7aea:	20 e0       	ldi	r18, 0x00	; 0
    7aec:	3f ef       	ldi	r19, 0xFF	; 255
    7aee:	4f e7       	ldi	r20, 0x7F	; 127
    7af0:	57 e4       	ldi	r21, 0x47	; 71
    7af2:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7af6:	18 16       	cp	r1, r24
    7af8:	0c f0       	brlt	.+2      	; 0x7afc <pick_drop+0xe3a>
    7afa:	10 e0       	ldi	r17, 0x00	; 0
    7afc:	11 23       	and	r17, r17
    7afe:	09 f4       	brne	.+2      	; 0x7b02 <pick_drop+0xe40>
    7b00:	4d c0       	rjmp	.+154    	; 0x7b9c <pick_drop+0xeda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b02:	ce 01       	movw	r24, r28
    7b04:	81 58       	subi	r24, 0x81	; 129
    7b06:	9f 4f       	sbci	r25, 0xFF	; 255
    7b08:	fc 01       	movw	r30, r24
    7b0a:	60 81       	ld	r22, Z
    7b0c:	71 81       	ldd	r23, Z+1	; 0x01
    7b0e:	82 81       	ldd	r24, Z+2	; 0x02
    7b10:	93 81       	ldd	r25, Z+3	; 0x03
    7b12:	20 e0       	ldi	r18, 0x00	; 0
    7b14:	30 e0       	ldi	r19, 0x00	; 0
    7b16:	40 e2       	ldi	r20, 0x20	; 32
    7b18:	51 e4       	ldi	r21, 0x41	; 65
    7b1a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7b1e:	dc 01       	movw	r26, r24
    7b20:	cb 01       	movw	r24, r22
    7b22:	8e 01       	movw	r16, r28
    7b24:	09 57       	subi	r16, 0x79	; 121
    7b26:	1f 4f       	sbci	r17, 0xFF	; 255
    7b28:	bc 01       	movw	r22, r24
    7b2a:	cd 01       	movw	r24, r26
    7b2c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7b30:	dc 01       	movw	r26, r24
    7b32:	cb 01       	movw	r24, r22
    7b34:	f8 01       	movw	r30, r16
    7b36:	91 83       	std	Z+1, r25	; 0x01
    7b38:	80 83       	st	Z, r24
    7b3a:	27 c0       	rjmp	.+78     	; 0x7b8a <pick_drop+0xec8>
    7b3c:	ce 01       	movw	r24, r28
    7b3e:	87 57       	subi	r24, 0x77	; 119
    7b40:	9f 4f       	sbci	r25, 0xFF	; 255
    7b42:	20 e7       	ldi	r18, 0x70	; 112
    7b44:	31 e0       	ldi	r19, 0x01	; 1
    7b46:	fc 01       	movw	r30, r24
    7b48:	31 83       	std	Z+1, r19	; 0x01
    7b4a:	20 83       	st	Z, r18
    7b4c:	ce 01       	movw	r24, r28
    7b4e:	87 57       	subi	r24, 0x77	; 119
    7b50:	9f 4f       	sbci	r25, 0xFF	; 255
    7b52:	fc 01       	movw	r30, r24
    7b54:	80 81       	ld	r24, Z
    7b56:	91 81       	ldd	r25, Z+1	; 0x01
    7b58:	8c 01       	movw	r16, r24
    7b5a:	c8 01       	movw	r24, r16
    7b5c:	01 97       	sbiw	r24, 0x01	; 1
    7b5e:	f1 f7       	brne	.-4      	; 0x7b5c <pick_drop+0xe9a>
    7b60:	8c 01       	movw	r16, r24
    7b62:	ce 01       	movw	r24, r28
    7b64:	87 57       	subi	r24, 0x77	; 119
    7b66:	9f 4f       	sbci	r25, 0xFF	; 255
    7b68:	fc 01       	movw	r30, r24
    7b6a:	11 83       	std	Z+1, r17	; 0x01
    7b6c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b6e:	ce 01       	movw	r24, r28
    7b70:	89 57       	subi	r24, 0x79	; 121
    7b72:	9f 4f       	sbci	r25, 0xFF	; 255
    7b74:	9e 01       	movw	r18, r28
    7b76:	29 57       	subi	r18, 0x79	; 121
    7b78:	3f 4f       	sbci	r19, 0xFF	; 255
    7b7a:	f9 01       	movw	r30, r18
    7b7c:	20 81       	ld	r18, Z
    7b7e:	31 81       	ldd	r19, Z+1	; 0x01
    7b80:	21 50       	subi	r18, 0x01	; 1
    7b82:	30 40       	sbci	r19, 0x00	; 0
    7b84:	fc 01       	movw	r30, r24
    7b86:	31 83       	std	Z+1, r19	; 0x01
    7b88:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b8a:	ce 01       	movw	r24, r28
    7b8c:	89 57       	subi	r24, 0x79	; 121
    7b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b90:	fc 01       	movw	r30, r24
    7b92:	80 81       	ld	r24, Z
    7b94:	91 81       	ldd	r25, Z+1	; 0x01
    7b96:	00 97       	sbiw	r24, 0x00	; 0
    7b98:	89 f6       	brne	.-94     	; 0x7b3c <pick_drop+0xe7a>
    7b9a:	2f c0       	rjmp	.+94     	; 0x7bfa <pick_drop+0xf38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b9c:	8e 01       	movw	r16, r28
    7b9e:	09 57       	subi	r16, 0x79	; 121
    7ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ba2:	ce 01       	movw	r24, r28
    7ba4:	8d 57       	subi	r24, 0x7D	; 125
    7ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba8:	fc 01       	movw	r30, r24
    7baa:	60 81       	ld	r22, Z
    7bac:	71 81       	ldd	r23, Z+1	; 0x01
    7bae:	82 81       	ldd	r24, Z+2	; 0x02
    7bb0:	93 81       	ldd	r25, Z+3	; 0x03
    7bb2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7bb6:	dc 01       	movw	r26, r24
    7bb8:	cb 01       	movw	r24, r22
    7bba:	f8 01       	movw	r30, r16
    7bbc:	91 83       	std	Z+1, r25	; 0x01
    7bbe:	80 83       	st	Z, r24
    7bc0:	ce 01       	movw	r24, r28
    7bc2:	85 57       	subi	r24, 0x75	; 117
    7bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    7bc6:	9e 01       	movw	r18, r28
    7bc8:	29 57       	subi	r18, 0x79	; 121
    7bca:	3f 4f       	sbci	r19, 0xFF	; 255
    7bcc:	f9 01       	movw	r30, r18
    7bce:	20 81       	ld	r18, Z
    7bd0:	31 81       	ldd	r19, Z+1	; 0x01
    7bd2:	fc 01       	movw	r30, r24
    7bd4:	31 83       	std	Z+1, r19	; 0x01
    7bd6:	20 83       	st	Z, r18
    7bd8:	ce 01       	movw	r24, r28
    7bda:	85 57       	subi	r24, 0x75	; 117
    7bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    7bde:	fc 01       	movw	r30, r24
    7be0:	80 81       	ld	r24, Z
    7be2:	91 81       	ldd	r25, Z+1	; 0x01
    7be4:	8c 01       	movw	r16, r24
    7be6:	c8 01       	movw	r24, r16
    7be8:	01 97       	sbiw	r24, 0x01	; 1
    7bea:	f1 f7       	brne	.-4      	; 0x7be8 <pick_drop+0xf26>
    7bec:	8c 01       	movw	r16, r24
    7bee:	ce 01       	movw	r24, r28
    7bf0:	85 57       	subi	r24, 0x75	; 117
    7bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    7bf4:	fc 01       	movw	r30, r24
    7bf6:	11 83       	std	Z+1, r17	; 0x01
    7bf8:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    7bfa:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
		forward_mm(25);
    7bfe:	89 e1       	ldi	r24, 0x19	; 25
    7c00:	90 e0       	ldi	r25, 0x00	; 0
    7c02:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7c06:	9e 01       	movw	r18, r28
    7c08:	23 57       	subi	r18, 0x73	; 115
    7c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c0c:	80 e0       	ldi	r24, 0x00	; 0
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	a0 ea       	ldi	r26, 0xA0	; 160
    7c12:	b1 e4       	ldi	r27, 0x41	; 65
    7c14:	f9 01       	movw	r30, r18
    7c16:	80 83       	st	Z, r24
    7c18:	91 83       	std	Z+1, r25	; 0x01
    7c1a:	a2 83       	std	Z+2, r26	; 0x02
    7c1c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7c1e:	8e 01       	movw	r16, r28
    7c20:	0f 56       	subi	r16, 0x6F	; 111
    7c22:	1f 4f       	sbci	r17, 0xFF	; 255
    7c24:	ce 01       	movw	r24, r28
    7c26:	83 57       	subi	r24, 0x73	; 115
    7c28:	9f 4f       	sbci	r25, 0xFF	; 255
    7c2a:	fc 01       	movw	r30, r24
    7c2c:	60 81       	ld	r22, Z
    7c2e:	71 81       	ldd	r23, Z+1	; 0x01
    7c30:	82 81       	ldd	r24, Z+2	; 0x02
    7c32:	93 81       	ldd	r25, Z+3	; 0x03
    7c34:	26 e6       	ldi	r18, 0x66	; 102
    7c36:	36 e6       	ldi	r19, 0x66	; 102
    7c38:	46 e6       	ldi	r20, 0x66	; 102
    7c3a:	55 e4       	ldi	r21, 0x45	; 69
    7c3c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7c40:	dc 01       	movw	r26, r24
    7c42:	cb 01       	movw	r24, r22
    7c44:	f8 01       	movw	r30, r16
    7c46:	80 83       	st	Z, r24
    7c48:	91 83       	std	Z+1, r25	; 0x01
    7c4a:	a2 83       	std	Z+2, r26	; 0x02
    7c4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7c4e:	ce 01       	movw	r24, r28
    7c50:	8f 56       	subi	r24, 0x6F	; 111
    7c52:	9f 4f       	sbci	r25, 0xFF	; 255
    7c54:	11 e0       	ldi	r17, 0x01	; 1
    7c56:	fc 01       	movw	r30, r24
    7c58:	60 81       	ld	r22, Z
    7c5a:	71 81       	ldd	r23, Z+1	; 0x01
    7c5c:	82 81       	ldd	r24, Z+2	; 0x02
    7c5e:	93 81       	ldd	r25, Z+3	; 0x03
    7c60:	20 e0       	ldi	r18, 0x00	; 0
    7c62:	30 e0       	ldi	r19, 0x00	; 0
    7c64:	40 e8       	ldi	r20, 0x80	; 128
    7c66:	5f e3       	ldi	r21, 0x3F	; 63
    7c68:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    7c6c:	88 23       	and	r24, r24
    7c6e:	0c f0       	brlt	.+2      	; 0x7c72 <pick_drop+0xfb0>
    7c70:	10 e0       	ldi	r17, 0x00	; 0
    7c72:	11 23       	and	r17, r17
    7c74:	49 f0       	breq	.+18     	; 0x7c88 <pick_drop+0xfc6>
		__ticks = 1;
    7c76:	ce 01       	movw	r24, r28
    7c78:	8b 56       	subi	r24, 0x6B	; 107
    7c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c7c:	21 e0       	ldi	r18, 0x01	; 1
    7c7e:	30 e0       	ldi	r19, 0x00	; 0
    7c80:	fc 01       	movw	r30, r24
    7c82:	31 83       	std	Z+1, r19	; 0x01
    7c84:	20 83       	st	Z, r18
    7c86:	74 c0       	rjmp	.+232    	; 0x7d70 <pick_drop+0x10ae>
	else if (__tmp > 65535)
    7c88:	ce 01       	movw	r24, r28
    7c8a:	8f 56       	subi	r24, 0x6F	; 111
    7c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c8e:	11 e0       	ldi	r17, 0x01	; 1
    7c90:	fc 01       	movw	r30, r24
    7c92:	60 81       	ld	r22, Z
    7c94:	71 81       	ldd	r23, Z+1	; 0x01
    7c96:	82 81       	ldd	r24, Z+2	; 0x02
    7c98:	93 81       	ldd	r25, Z+3	; 0x03
    7c9a:	20 e0       	ldi	r18, 0x00	; 0
    7c9c:	3f ef       	ldi	r19, 0xFF	; 255
    7c9e:	4f e7       	ldi	r20, 0x7F	; 127
    7ca0:	57 e4       	ldi	r21, 0x47	; 71
    7ca2:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7ca6:	18 16       	cp	r1, r24
    7ca8:	0c f0       	brlt	.+2      	; 0x7cac <pick_drop+0xfea>
    7caa:	10 e0       	ldi	r17, 0x00	; 0
    7cac:	11 23       	and	r17, r17
    7cae:	09 f4       	brne	.+2      	; 0x7cb2 <pick_drop+0xff0>
    7cb0:	4d c0       	rjmp	.+154    	; 0x7d4c <pick_drop+0x108a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7cb2:	ce 01       	movw	r24, r28
    7cb4:	83 57       	subi	r24, 0x73	; 115
    7cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb8:	fc 01       	movw	r30, r24
    7cba:	60 81       	ld	r22, Z
    7cbc:	71 81       	ldd	r23, Z+1	; 0x01
    7cbe:	82 81       	ldd	r24, Z+2	; 0x02
    7cc0:	93 81       	ldd	r25, Z+3	; 0x03
    7cc2:	20 e0       	ldi	r18, 0x00	; 0
    7cc4:	30 e0       	ldi	r19, 0x00	; 0
    7cc6:	40 e2       	ldi	r20, 0x20	; 32
    7cc8:	51 e4       	ldi	r21, 0x41	; 65
    7cca:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7cce:	dc 01       	movw	r26, r24
    7cd0:	cb 01       	movw	r24, r22
    7cd2:	8e 01       	movw	r16, r28
    7cd4:	0b 56       	subi	r16, 0x6B	; 107
    7cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    7cd8:	bc 01       	movw	r22, r24
    7cda:	cd 01       	movw	r24, r26
    7cdc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7ce0:	dc 01       	movw	r26, r24
    7ce2:	cb 01       	movw	r24, r22
    7ce4:	f8 01       	movw	r30, r16
    7ce6:	91 83       	std	Z+1, r25	; 0x01
    7ce8:	80 83       	st	Z, r24
    7cea:	27 c0       	rjmp	.+78     	; 0x7d3a <pick_drop+0x1078>
    7cec:	ce 01       	movw	r24, r28
    7cee:	89 56       	subi	r24, 0x69	; 105
    7cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    7cf2:	20 e7       	ldi	r18, 0x70	; 112
    7cf4:	31 e0       	ldi	r19, 0x01	; 1
    7cf6:	fc 01       	movw	r30, r24
    7cf8:	31 83       	std	Z+1, r19	; 0x01
    7cfa:	20 83       	st	Z, r18
    7cfc:	ce 01       	movw	r24, r28
    7cfe:	89 56       	subi	r24, 0x69	; 105
    7d00:	9f 4f       	sbci	r25, 0xFF	; 255
    7d02:	fc 01       	movw	r30, r24
    7d04:	80 81       	ld	r24, Z
    7d06:	91 81       	ldd	r25, Z+1	; 0x01
    7d08:	8c 01       	movw	r16, r24
    7d0a:	c8 01       	movw	r24, r16
    7d0c:	01 97       	sbiw	r24, 0x01	; 1
    7d0e:	f1 f7       	brne	.-4      	; 0x7d0c <pick_drop+0x104a>
    7d10:	8c 01       	movw	r16, r24
    7d12:	ce 01       	movw	r24, r28
    7d14:	89 56       	subi	r24, 0x69	; 105
    7d16:	9f 4f       	sbci	r25, 0xFF	; 255
    7d18:	fc 01       	movw	r30, r24
    7d1a:	11 83       	std	Z+1, r17	; 0x01
    7d1c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d1e:	ce 01       	movw	r24, r28
    7d20:	8b 56       	subi	r24, 0x6B	; 107
    7d22:	9f 4f       	sbci	r25, 0xFF	; 255
    7d24:	9e 01       	movw	r18, r28
    7d26:	2b 56       	subi	r18, 0x6B	; 107
    7d28:	3f 4f       	sbci	r19, 0xFF	; 255
    7d2a:	f9 01       	movw	r30, r18
    7d2c:	20 81       	ld	r18, Z
    7d2e:	31 81       	ldd	r19, Z+1	; 0x01
    7d30:	21 50       	subi	r18, 0x01	; 1
    7d32:	30 40       	sbci	r19, 0x00	; 0
    7d34:	fc 01       	movw	r30, r24
    7d36:	31 83       	std	Z+1, r19	; 0x01
    7d38:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d3a:	ce 01       	movw	r24, r28
    7d3c:	8b 56       	subi	r24, 0x6B	; 107
    7d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d40:	fc 01       	movw	r30, r24
    7d42:	80 81       	ld	r24, Z
    7d44:	91 81       	ldd	r25, Z+1	; 0x01
    7d46:	00 97       	sbiw	r24, 0x00	; 0
    7d48:	89 f6       	brne	.-94     	; 0x7cec <pick_drop+0x102a>
    7d4a:	2f c0       	rjmp	.+94     	; 0x7daa <pick_drop+0x10e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d4c:	8e 01       	movw	r16, r28
    7d4e:	0b 56       	subi	r16, 0x6B	; 107
    7d50:	1f 4f       	sbci	r17, 0xFF	; 255
    7d52:	ce 01       	movw	r24, r28
    7d54:	8f 56       	subi	r24, 0x6F	; 111
    7d56:	9f 4f       	sbci	r25, 0xFF	; 255
    7d58:	fc 01       	movw	r30, r24
    7d5a:	60 81       	ld	r22, Z
    7d5c:	71 81       	ldd	r23, Z+1	; 0x01
    7d5e:	82 81       	ldd	r24, Z+2	; 0x02
    7d60:	93 81       	ldd	r25, Z+3	; 0x03
    7d62:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7d66:	dc 01       	movw	r26, r24
    7d68:	cb 01       	movw	r24, r22
    7d6a:	f8 01       	movw	r30, r16
    7d6c:	91 83       	std	Z+1, r25	; 0x01
    7d6e:	80 83       	st	Z, r24
    7d70:	ce 01       	movw	r24, r28
    7d72:	87 56       	subi	r24, 0x67	; 103
    7d74:	9f 4f       	sbci	r25, 0xFF	; 255
    7d76:	9e 01       	movw	r18, r28
    7d78:	2b 56       	subi	r18, 0x6B	; 107
    7d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d7c:	f9 01       	movw	r30, r18
    7d7e:	20 81       	ld	r18, Z
    7d80:	31 81       	ldd	r19, Z+1	; 0x01
    7d82:	fc 01       	movw	r30, r24
    7d84:	31 83       	std	Z+1, r19	; 0x01
    7d86:	20 83       	st	Z, r18
    7d88:	ce 01       	movw	r24, r28
    7d8a:	87 56       	subi	r24, 0x67	; 103
    7d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d8e:	fc 01       	movw	r30, r24
    7d90:	80 81       	ld	r24, Z
    7d92:	91 81       	ldd	r25, Z+1	; 0x01
    7d94:	8c 01       	movw	r16, r24
    7d96:	c8 01       	movw	r24, r16
    7d98:	01 97       	sbiw	r24, 0x01	; 1
    7d9a:	f1 f7       	brne	.-4      	; 0x7d98 <pick_drop+0x10d6>
    7d9c:	8c 01       	movw	r16, r24
    7d9e:	ce 01       	movw	r24, r28
    7da0:	87 56       	subi	r24, 0x67	; 103
    7da2:	9f 4f       	sbci	r25, 0xFF	; 255
    7da4:	fc 01       	movw	r30, r24
    7da6:	11 83       	std	Z+1, r17	; 0x01
    7da8:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_right();
    7daa:	0e 94 03 14 	call	0x2806	; 0x2806 <spl_right>
    7dae:	9e 01       	movw	r18, r28
    7db0:	25 56       	subi	r18, 0x65	; 101
    7db2:	3f 4f       	sbci	r19, 0xFF	; 255
    7db4:	80 e0       	ldi	r24, 0x00	; 0
    7db6:	90 e0       	ldi	r25, 0x00	; 0
    7db8:	a0 ea       	ldi	r26, 0xA0	; 160
    7dba:	b1 e4       	ldi	r27, 0x41	; 65
    7dbc:	f9 01       	movw	r30, r18
    7dbe:	80 83       	st	Z, r24
    7dc0:	91 83       	std	Z+1, r25	; 0x01
    7dc2:	a2 83       	std	Z+2, r26	; 0x02
    7dc4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7dc6:	8e 01       	movw	r16, r28
    7dc8:	01 56       	subi	r16, 0x61	; 97
    7dca:	1f 4f       	sbci	r17, 0xFF	; 255
    7dcc:	ce 01       	movw	r24, r28
    7dce:	85 56       	subi	r24, 0x65	; 101
    7dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    7dd2:	fc 01       	movw	r30, r24
    7dd4:	60 81       	ld	r22, Z
    7dd6:	71 81       	ldd	r23, Z+1	; 0x01
    7dd8:	82 81       	ldd	r24, Z+2	; 0x02
    7dda:	93 81       	ldd	r25, Z+3	; 0x03
    7ddc:	26 e6       	ldi	r18, 0x66	; 102
    7dde:	36 e6       	ldi	r19, 0x66	; 102
    7de0:	46 e6       	ldi	r20, 0x66	; 102
    7de2:	55 e4       	ldi	r21, 0x45	; 69
    7de4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7de8:	dc 01       	movw	r26, r24
    7dea:	cb 01       	movw	r24, r22
    7dec:	f8 01       	movw	r30, r16
    7dee:	80 83       	st	Z, r24
    7df0:	91 83       	std	Z+1, r25	; 0x01
    7df2:	a2 83       	std	Z+2, r26	; 0x02
    7df4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7df6:	ce 01       	movw	r24, r28
    7df8:	81 56       	subi	r24, 0x61	; 97
    7dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    7dfc:	11 e0       	ldi	r17, 0x01	; 1
    7dfe:	fc 01       	movw	r30, r24
    7e00:	60 81       	ld	r22, Z
    7e02:	71 81       	ldd	r23, Z+1	; 0x01
    7e04:	82 81       	ldd	r24, Z+2	; 0x02
    7e06:	93 81       	ldd	r25, Z+3	; 0x03
    7e08:	20 e0       	ldi	r18, 0x00	; 0
    7e0a:	30 e0       	ldi	r19, 0x00	; 0
    7e0c:	40 e8       	ldi	r20, 0x80	; 128
    7e0e:	5f e3       	ldi	r21, 0x3F	; 63
    7e10:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    7e14:	88 23       	and	r24, r24
    7e16:	0c f0       	brlt	.+2      	; 0x7e1a <pick_drop+0x1158>
    7e18:	10 e0       	ldi	r17, 0x00	; 0
    7e1a:	11 23       	and	r17, r17
    7e1c:	49 f0       	breq	.+18     	; 0x7e30 <pick_drop+0x116e>
		__ticks = 1;
    7e1e:	ce 01       	movw	r24, r28
    7e20:	8d 55       	subi	r24, 0x5D	; 93
    7e22:	9f 4f       	sbci	r25, 0xFF	; 255
    7e24:	21 e0       	ldi	r18, 0x01	; 1
    7e26:	30 e0       	ldi	r19, 0x00	; 0
    7e28:	fc 01       	movw	r30, r24
    7e2a:	31 83       	std	Z+1, r19	; 0x01
    7e2c:	20 83       	st	Z, r18
    7e2e:	74 c0       	rjmp	.+232    	; 0x7f18 <pick_drop+0x1256>
	else if (__tmp > 65535)
    7e30:	ce 01       	movw	r24, r28
    7e32:	81 56       	subi	r24, 0x61	; 97
    7e34:	9f 4f       	sbci	r25, 0xFF	; 255
    7e36:	11 e0       	ldi	r17, 0x01	; 1
    7e38:	fc 01       	movw	r30, r24
    7e3a:	60 81       	ld	r22, Z
    7e3c:	71 81       	ldd	r23, Z+1	; 0x01
    7e3e:	82 81       	ldd	r24, Z+2	; 0x02
    7e40:	93 81       	ldd	r25, Z+3	; 0x03
    7e42:	20 e0       	ldi	r18, 0x00	; 0
    7e44:	3f ef       	ldi	r19, 0xFF	; 255
    7e46:	4f e7       	ldi	r20, 0x7F	; 127
    7e48:	57 e4       	ldi	r21, 0x47	; 71
    7e4a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7e4e:	18 16       	cp	r1, r24
    7e50:	0c f0       	brlt	.+2      	; 0x7e54 <pick_drop+0x1192>
    7e52:	10 e0       	ldi	r17, 0x00	; 0
    7e54:	11 23       	and	r17, r17
    7e56:	09 f4       	brne	.+2      	; 0x7e5a <pick_drop+0x1198>
    7e58:	4d c0       	rjmp	.+154    	; 0x7ef4 <pick_drop+0x1232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e5a:	ce 01       	movw	r24, r28
    7e5c:	85 56       	subi	r24, 0x65	; 101
    7e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e60:	fc 01       	movw	r30, r24
    7e62:	60 81       	ld	r22, Z
    7e64:	71 81       	ldd	r23, Z+1	; 0x01
    7e66:	82 81       	ldd	r24, Z+2	; 0x02
    7e68:	93 81       	ldd	r25, Z+3	; 0x03
    7e6a:	20 e0       	ldi	r18, 0x00	; 0
    7e6c:	30 e0       	ldi	r19, 0x00	; 0
    7e6e:	40 e2       	ldi	r20, 0x20	; 32
    7e70:	51 e4       	ldi	r21, 0x41	; 65
    7e72:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7e76:	dc 01       	movw	r26, r24
    7e78:	cb 01       	movw	r24, r22
    7e7a:	8e 01       	movw	r16, r28
    7e7c:	0d 55       	subi	r16, 0x5D	; 93
    7e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    7e80:	bc 01       	movw	r22, r24
    7e82:	cd 01       	movw	r24, r26
    7e84:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7e88:	dc 01       	movw	r26, r24
    7e8a:	cb 01       	movw	r24, r22
    7e8c:	f8 01       	movw	r30, r16
    7e8e:	91 83       	std	Z+1, r25	; 0x01
    7e90:	80 83       	st	Z, r24
    7e92:	27 c0       	rjmp	.+78     	; 0x7ee2 <pick_drop+0x1220>
    7e94:	ce 01       	movw	r24, r28
    7e96:	8b 55       	subi	r24, 0x5B	; 91
    7e98:	9f 4f       	sbci	r25, 0xFF	; 255
    7e9a:	20 e7       	ldi	r18, 0x70	; 112
    7e9c:	31 e0       	ldi	r19, 0x01	; 1
    7e9e:	fc 01       	movw	r30, r24
    7ea0:	31 83       	std	Z+1, r19	; 0x01
    7ea2:	20 83       	st	Z, r18
    7ea4:	ce 01       	movw	r24, r28
    7ea6:	8b 55       	subi	r24, 0x5B	; 91
    7ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    7eaa:	fc 01       	movw	r30, r24
    7eac:	80 81       	ld	r24, Z
    7eae:	91 81       	ldd	r25, Z+1	; 0x01
    7eb0:	8c 01       	movw	r16, r24
    7eb2:	c8 01       	movw	r24, r16
    7eb4:	01 97       	sbiw	r24, 0x01	; 1
    7eb6:	f1 f7       	brne	.-4      	; 0x7eb4 <pick_drop+0x11f2>
    7eb8:	8c 01       	movw	r16, r24
    7eba:	ce 01       	movw	r24, r28
    7ebc:	8b 55       	subi	r24, 0x5B	; 91
    7ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    7ec0:	fc 01       	movw	r30, r24
    7ec2:	11 83       	std	Z+1, r17	; 0x01
    7ec4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7ec6:	ce 01       	movw	r24, r28
    7ec8:	8d 55       	subi	r24, 0x5D	; 93
    7eca:	9f 4f       	sbci	r25, 0xFF	; 255
    7ecc:	9e 01       	movw	r18, r28
    7ece:	2d 55       	subi	r18, 0x5D	; 93
    7ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ed2:	f9 01       	movw	r30, r18
    7ed4:	20 81       	ld	r18, Z
    7ed6:	31 81       	ldd	r19, Z+1	; 0x01
    7ed8:	21 50       	subi	r18, 0x01	; 1
    7eda:	30 40       	sbci	r19, 0x00	; 0
    7edc:	fc 01       	movw	r30, r24
    7ede:	31 83       	std	Z+1, r19	; 0x01
    7ee0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ee2:	ce 01       	movw	r24, r28
    7ee4:	8d 55       	subi	r24, 0x5D	; 93
    7ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ee8:	fc 01       	movw	r30, r24
    7eea:	80 81       	ld	r24, Z
    7eec:	91 81       	ldd	r25, Z+1	; 0x01
    7eee:	00 97       	sbiw	r24, 0x00	; 0
    7ef0:	89 f6       	brne	.-94     	; 0x7e94 <pick_drop+0x11d2>
    7ef2:	2f c0       	rjmp	.+94     	; 0x7f52 <pick_drop+0x1290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ef4:	8e 01       	movw	r16, r28
    7ef6:	0d 55       	subi	r16, 0x5D	; 93
    7ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    7efa:	ce 01       	movw	r24, r28
    7efc:	81 56       	subi	r24, 0x61	; 97
    7efe:	9f 4f       	sbci	r25, 0xFF	; 255
    7f00:	fc 01       	movw	r30, r24
    7f02:	60 81       	ld	r22, Z
    7f04:	71 81       	ldd	r23, Z+1	; 0x01
    7f06:	82 81       	ldd	r24, Z+2	; 0x02
    7f08:	93 81       	ldd	r25, Z+3	; 0x03
    7f0a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    7f0e:	dc 01       	movw	r26, r24
    7f10:	cb 01       	movw	r24, r22
    7f12:	f8 01       	movw	r30, r16
    7f14:	91 83       	std	Z+1, r25	; 0x01
    7f16:	80 83       	st	Z, r24
    7f18:	ce 01       	movw	r24, r28
    7f1a:	89 55       	subi	r24, 0x59	; 89
    7f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f1e:	9e 01       	movw	r18, r28
    7f20:	2d 55       	subi	r18, 0x5D	; 93
    7f22:	3f 4f       	sbci	r19, 0xFF	; 255
    7f24:	f9 01       	movw	r30, r18
    7f26:	20 81       	ld	r18, Z
    7f28:	31 81       	ldd	r19, Z+1	; 0x01
    7f2a:	fc 01       	movw	r30, r24
    7f2c:	31 83       	std	Z+1, r19	; 0x01
    7f2e:	20 83       	st	Z, r18
    7f30:	ce 01       	movw	r24, r28
    7f32:	89 55       	subi	r24, 0x59	; 89
    7f34:	9f 4f       	sbci	r25, 0xFF	; 255
    7f36:	fc 01       	movw	r30, r24
    7f38:	80 81       	ld	r24, Z
    7f3a:	91 81       	ldd	r25, Z+1	; 0x01
    7f3c:	8c 01       	movw	r16, r24
    7f3e:	c8 01       	movw	r24, r16
    7f40:	01 97       	sbiw	r24, 0x01	; 1
    7f42:	f1 f7       	brne	.-4      	; 0x7f40 <pick_drop+0x127e>
    7f44:	8c 01       	movw	r16, r24
    7f46:	ce 01       	movw	r24, r28
    7f48:	89 55       	subi	r24, 0x59	; 89
    7f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    7f4c:	fc 01       	movw	r30, r24
    7f4e:	11 83       	std	Z+1, r17	; 0x01
    7f50:	00 83       	st	Z, r16
		_delay_ms(20);
		back_mm(20);
    7f52:	84 e1       	ldi	r24, 0x14	; 20
    7f54:	90 e0       	ldi	r25, 0x00	; 0
    7f56:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    7f5a:	9e 01       	movw	r18, r28
    7f5c:	27 55       	subi	r18, 0x57	; 87
    7f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    7f60:	80 e0       	ldi	r24, 0x00	; 0
    7f62:	90 e0       	ldi	r25, 0x00	; 0
    7f64:	a6 e9       	ldi	r26, 0x96	; 150
    7f66:	b3 e4       	ldi	r27, 0x43	; 67
    7f68:	f9 01       	movw	r30, r18
    7f6a:	80 83       	st	Z, r24
    7f6c:	91 83       	std	Z+1, r25	; 0x01
    7f6e:	a2 83       	std	Z+2, r26	; 0x02
    7f70:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7f72:	8e 01       	movw	r16, r28
    7f74:	03 55       	subi	r16, 0x53	; 83
    7f76:	1f 4f       	sbci	r17, 0xFF	; 255
    7f78:	ce 01       	movw	r24, r28
    7f7a:	87 55       	subi	r24, 0x57	; 87
    7f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f7e:	fc 01       	movw	r30, r24
    7f80:	60 81       	ld	r22, Z
    7f82:	71 81       	ldd	r23, Z+1	; 0x01
    7f84:	82 81       	ldd	r24, Z+2	; 0x02
    7f86:	93 81       	ldd	r25, Z+3	; 0x03
    7f88:	26 e6       	ldi	r18, 0x66	; 102
    7f8a:	36 e6       	ldi	r19, 0x66	; 102
    7f8c:	46 e6       	ldi	r20, 0x66	; 102
    7f8e:	55 e4       	ldi	r21, 0x45	; 69
    7f90:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    7f94:	dc 01       	movw	r26, r24
    7f96:	cb 01       	movw	r24, r22
    7f98:	f8 01       	movw	r30, r16
    7f9a:	80 83       	st	Z, r24
    7f9c:	91 83       	std	Z+1, r25	; 0x01
    7f9e:	a2 83       	std	Z+2, r26	; 0x02
    7fa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7fa2:	ce 01       	movw	r24, r28
    7fa4:	83 55       	subi	r24, 0x53	; 83
    7fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    7fa8:	11 e0       	ldi	r17, 0x01	; 1
    7faa:	fc 01       	movw	r30, r24
    7fac:	60 81       	ld	r22, Z
    7fae:	71 81       	ldd	r23, Z+1	; 0x01
    7fb0:	82 81       	ldd	r24, Z+2	; 0x02
    7fb2:	93 81       	ldd	r25, Z+3	; 0x03
    7fb4:	20 e0       	ldi	r18, 0x00	; 0
    7fb6:	30 e0       	ldi	r19, 0x00	; 0
    7fb8:	40 e8       	ldi	r20, 0x80	; 128
    7fba:	5f e3       	ldi	r21, 0x3F	; 63
    7fbc:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    7fc0:	88 23       	and	r24, r24
    7fc2:	0c f0       	brlt	.+2      	; 0x7fc6 <pick_drop+0x1304>
    7fc4:	10 e0       	ldi	r17, 0x00	; 0
    7fc6:	11 23       	and	r17, r17
    7fc8:	49 f0       	breq	.+18     	; 0x7fdc <pick_drop+0x131a>
		__ticks = 1;
    7fca:	ce 01       	movw	r24, r28
    7fcc:	8f 54       	subi	r24, 0x4F	; 79
    7fce:	9f 4f       	sbci	r25, 0xFF	; 255
    7fd0:	21 e0       	ldi	r18, 0x01	; 1
    7fd2:	30 e0       	ldi	r19, 0x00	; 0
    7fd4:	fc 01       	movw	r30, r24
    7fd6:	31 83       	std	Z+1, r19	; 0x01
    7fd8:	20 83       	st	Z, r18
    7fda:	75 c0       	rjmp	.+234    	; 0x80c6 <pick_drop+0x1404>
	else if (__tmp > 65535)
    7fdc:	ce 01       	movw	r24, r28
    7fde:	83 55       	subi	r24, 0x53	; 83
    7fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    7fe2:	11 e0       	ldi	r17, 0x01	; 1
    7fe4:	fc 01       	movw	r30, r24
    7fe6:	60 81       	ld	r22, Z
    7fe8:	71 81       	ldd	r23, Z+1	; 0x01
    7fea:	82 81       	ldd	r24, Z+2	; 0x02
    7fec:	93 81       	ldd	r25, Z+3	; 0x03
    7fee:	20 e0       	ldi	r18, 0x00	; 0
    7ff0:	3f ef       	ldi	r19, 0xFF	; 255
    7ff2:	4f e7       	ldi	r20, 0x7F	; 127
    7ff4:	57 e4       	ldi	r21, 0x47	; 71
    7ff6:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    7ffa:	18 16       	cp	r1, r24
    7ffc:	0c f0       	brlt	.+2      	; 0x8000 <pick_drop+0x133e>
    7ffe:	10 e0       	ldi	r17, 0x00	; 0
    8000:	11 23       	and	r17, r17
    8002:	09 f4       	brne	.+2      	; 0x8006 <pick_drop+0x1344>
    8004:	4e c0       	rjmp	.+156    	; 0x80a2 <pick_drop+0x13e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8006:	ce 01       	movw	r24, r28
    8008:	87 55       	subi	r24, 0x57	; 87
    800a:	9f 4f       	sbci	r25, 0xFF	; 255
    800c:	fc 01       	movw	r30, r24
    800e:	60 81       	ld	r22, Z
    8010:	71 81       	ldd	r23, Z+1	; 0x01
    8012:	82 81       	ldd	r24, Z+2	; 0x02
    8014:	93 81       	ldd	r25, Z+3	; 0x03
    8016:	20 e0       	ldi	r18, 0x00	; 0
    8018:	30 e0       	ldi	r19, 0x00	; 0
    801a:	40 e2       	ldi	r20, 0x20	; 32
    801c:	51 e4       	ldi	r21, 0x41	; 65
    801e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8022:	dc 01       	movw	r26, r24
    8024:	cb 01       	movw	r24, r22
    8026:	8e 01       	movw	r16, r28
    8028:	0f 54       	subi	r16, 0x4F	; 79
    802a:	1f 4f       	sbci	r17, 0xFF	; 255
    802c:	bc 01       	movw	r22, r24
    802e:	cd 01       	movw	r24, r26
    8030:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8034:	dc 01       	movw	r26, r24
    8036:	cb 01       	movw	r24, r22
    8038:	f8 01       	movw	r30, r16
    803a:	91 83       	std	Z+1, r25	; 0x01
    803c:	80 83       	st	Z, r24
    803e:	27 c0       	rjmp	.+78     	; 0x808e <pick_drop+0x13cc>
    8040:	ce 01       	movw	r24, r28
    8042:	8d 54       	subi	r24, 0x4D	; 77
    8044:	9f 4f       	sbci	r25, 0xFF	; 255
    8046:	20 e7       	ldi	r18, 0x70	; 112
    8048:	31 e0       	ldi	r19, 0x01	; 1
    804a:	fc 01       	movw	r30, r24
    804c:	31 83       	std	Z+1, r19	; 0x01
    804e:	20 83       	st	Z, r18
    8050:	ce 01       	movw	r24, r28
    8052:	8d 54       	subi	r24, 0x4D	; 77
    8054:	9f 4f       	sbci	r25, 0xFF	; 255
    8056:	fc 01       	movw	r30, r24
    8058:	80 81       	ld	r24, Z
    805a:	91 81       	ldd	r25, Z+1	; 0x01
    805c:	8c 01       	movw	r16, r24
    805e:	c8 01       	movw	r24, r16
    8060:	01 97       	sbiw	r24, 0x01	; 1
    8062:	f1 f7       	brne	.-4      	; 0x8060 <pick_drop+0x139e>
    8064:	8c 01       	movw	r16, r24
    8066:	ce 01       	movw	r24, r28
    8068:	8d 54       	subi	r24, 0x4D	; 77
    806a:	9f 4f       	sbci	r25, 0xFF	; 255
    806c:	fc 01       	movw	r30, r24
    806e:	11 83       	std	Z+1, r17	; 0x01
    8070:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8072:	ce 01       	movw	r24, r28
    8074:	8f 54       	subi	r24, 0x4F	; 79
    8076:	9f 4f       	sbci	r25, 0xFF	; 255
    8078:	9e 01       	movw	r18, r28
    807a:	2f 54       	subi	r18, 0x4F	; 79
    807c:	3f 4f       	sbci	r19, 0xFF	; 255
    807e:	f9 01       	movw	r30, r18
    8080:	20 81       	ld	r18, Z
    8082:	31 81       	ldd	r19, Z+1	; 0x01
    8084:	21 50       	subi	r18, 0x01	; 1
    8086:	30 40       	sbci	r19, 0x00	; 0
    8088:	fc 01       	movw	r30, r24
    808a:	31 83       	std	Z+1, r19	; 0x01
    808c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    808e:	ce 01       	movw	r24, r28
    8090:	8f 54       	subi	r24, 0x4F	; 79
    8092:	9f 4f       	sbci	r25, 0xFF	; 255
    8094:	fc 01       	movw	r30, r24
    8096:	80 81       	ld	r24, Z
    8098:	91 81       	ldd	r25, Z+1	; 0x01
    809a:	00 97       	sbiw	r24, 0x00	; 0
    809c:	89 f6       	brne	.-94     	; 0x8040 <pick_drop+0x137e>
    809e:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    80a2:	8e 01       	movw	r16, r28
    80a4:	0f 54       	subi	r16, 0x4F	; 79
    80a6:	1f 4f       	sbci	r17, 0xFF	; 255
    80a8:	ce 01       	movw	r24, r28
    80aa:	83 55       	subi	r24, 0x53	; 83
    80ac:	9f 4f       	sbci	r25, 0xFF	; 255
    80ae:	fc 01       	movw	r30, r24
    80b0:	60 81       	ld	r22, Z
    80b2:	71 81       	ldd	r23, Z+1	; 0x01
    80b4:	82 81       	ldd	r24, Z+2	; 0x02
    80b6:	93 81       	ldd	r25, Z+3	; 0x03
    80b8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    80bc:	dc 01       	movw	r26, r24
    80be:	cb 01       	movw	r24, r22
    80c0:	f8 01       	movw	r30, r16
    80c2:	91 83       	std	Z+1, r25	; 0x01
    80c4:	80 83       	st	Z, r24
    80c6:	ce 01       	movw	r24, r28
    80c8:	8b 54       	subi	r24, 0x4B	; 75
    80ca:	9f 4f       	sbci	r25, 0xFF	; 255
    80cc:	9e 01       	movw	r18, r28
    80ce:	2f 54       	subi	r18, 0x4F	; 79
    80d0:	3f 4f       	sbci	r19, 0xFF	; 255
    80d2:	f9 01       	movw	r30, r18
    80d4:	20 81       	ld	r18, Z
    80d6:	31 81       	ldd	r19, Z+1	; 0x01
    80d8:	fc 01       	movw	r30, r24
    80da:	31 83       	std	Z+1, r19	; 0x01
    80dc:	20 83       	st	Z, r18
    80de:	ce 01       	movw	r24, r28
    80e0:	8b 54       	subi	r24, 0x4B	; 75
    80e2:	9f 4f       	sbci	r25, 0xFF	; 255
    80e4:	fc 01       	movw	r30, r24
    80e6:	80 81       	ld	r24, Z
    80e8:	91 81       	ldd	r25, Z+1	; 0x01
    80ea:	8c 01       	movw	r16, r24
    80ec:	c8 01       	movw	r24, r16
    80ee:	01 97       	sbiw	r24, 0x01	; 1
    80f0:	f1 f7       	brne	.-4      	; 0x80ee <pick_drop+0x142c>
    80f2:	8c 01       	movw	r16, r24
    80f4:	ce 01       	movw	r24, r28
    80f6:	8b 54       	subi	r24, 0x4B	; 75
    80f8:	9f 4f       	sbci	r25, 0xFF	; 255
    80fa:	fc 01       	movw	r30, r24
    80fc:	11 83       	std	Z+1, r17	; 0x01
    80fe:	00 83       	st	Z, r16
    8100:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
		_delay_ms(300);}
		else
		{
			front();
    8104:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    8108:	9e 01       	movw	r18, r28
    810a:	29 54       	subi	r18, 0x49	; 73
    810c:	3f 4f       	sbci	r19, 0xFF	; 255
    810e:	80 e0       	ldi	r24, 0x00	; 0
    8110:	90 e0       	ldi	r25, 0x00	; 0
    8112:	a6 e9       	ldi	r26, 0x96	; 150
    8114:	b3 e4       	ldi	r27, 0x43	; 67
    8116:	f9 01       	movw	r30, r18
    8118:	80 83       	st	Z, r24
    811a:	91 83       	std	Z+1, r25	; 0x01
    811c:	a2 83       	std	Z+2, r26	; 0x02
    811e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8120:	8e 01       	movw	r16, r28
    8122:	05 54       	subi	r16, 0x45	; 69
    8124:	1f 4f       	sbci	r17, 0xFF	; 255
    8126:	ce 01       	movw	r24, r28
    8128:	89 54       	subi	r24, 0x49	; 73
    812a:	9f 4f       	sbci	r25, 0xFF	; 255
    812c:	fc 01       	movw	r30, r24
    812e:	60 81       	ld	r22, Z
    8130:	71 81       	ldd	r23, Z+1	; 0x01
    8132:	82 81       	ldd	r24, Z+2	; 0x02
    8134:	93 81       	ldd	r25, Z+3	; 0x03
    8136:	26 e6       	ldi	r18, 0x66	; 102
    8138:	36 e6       	ldi	r19, 0x66	; 102
    813a:	46 e6       	ldi	r20, 0x66	; 102
    813c:	55 e4       	ldi	r21, 0x45	; 69
    813e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8142:	dc 01       	movw	r26, r24
    8144:	cb 01       	movw	r24, r22
    8146:	f8 01       	movw	r30, r16
    8148:	80 83       	st	Z, r24
    814a:	91 83       	std	Z+1, r25	; 0x01
    814c:	a2 83       	std	Z+2, r26	; 0x02
    814e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8150:	ce 01       	movw	r24, r28
    8152:	85 54       	subi	r24, 0x45	; 69
    8154:	9f 4f       	sbci	r25, 0xFF	; 255
    8156:	11 e0       	ldi	r17, 0x01	; 1
    8158:	fc 01       	movw	r30, r24
    815a:	60 81       	ld	r22, Z
    815c:	71 81       	ldd	r23, Z+1	; 0x01
    815e:	82 81       	ldd	r24, Z+2	; 0x02
    8160:	93 81       	ldd	r25, Z+3	; 0x03
    8162:	20 e0       	ldi	r18, 0x00	; 0
    8164:	30 e0       	ldi	r19, 0x00	; 0
    8166:	40 e8       	ldi	r20, 0x80	; 128
    8168:	5f e3       	ldi	r21, 0x3F	; 63
    816a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    816e:	88 23       	and	r24, r24
    8170:	0c f0       	brlt	.+2      	; 0x8174 <pick_drop+0x14b2>
    8172:	10 e0       	ldi	r17, 0x00	; 0
    8174:	11 23       	and	r17, r17
    8176:	49 f0       	breq	.+18     	; 0x818a <pick_drop+0x14c8>
		__ticks = 1;
    8178:	ce 01       	movw	r24, r28
    817a:	81 54       	subi	r24, 0x41	; 65
    817c:	9f 4f       	sbci	r25, 0xFF	; 255
    817e:	21 e0       	ldi	r18, 0x01	; 1
    8180:	30 e0       	ldi	r19, 0x00	; 0
    8182:	fc 01       	movw	r30, r24
    8184:	31 83       	std	Z+1, r19	; 0x01
    8186:	20 83       	st	Z, r18
    8188:	75 c0       	rjmp	.+234    	; 0x8274 <pick_drop+0x15b2>
	else if (__tmp > 65535)
    818a:	ce 01       	movw	r24, r28
    818c:	85 54       	subi	r24, 0x45	; 69
    818e:	9f 4f       	sbci	r25, 0xFF	; 255
    8190:	11 e0       	ldi	r17, 0x01	; 1
    8192:	fc 01       	movw	r30, r24
    8194:	60 81       	ld	r22, Z
    8196:	71 81       	ldd	r23, Z+1	; 0x01
    8198:	82 81       	ldd	r24, Z+2	; 0x02
    819a:	93 81       	ldd	r25, Z+3	; 0x03
    819c:	20 e0       	ldi	r18, 0x00	; 0
    819e:	3f ef       	ldi	r19, 0xFF	; 255
    81a0:	4f e7       	ldi	r20, 0x7F	; 127
    81a2:	57 e4       	ldi	r21, 0x47	; 71
    81a4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    81a8:	18 16       	cp	r1, r24
    81aa:	0c f0       	brlt	.+2      	; 0x81ae <pick_drop+0x14ec>
    81ac:	10 e0       	ldi	r17, 0x00	; 0
    81ae:	11 23       	and	r17, r17
    81b0:	09 f4       	brne	.+2      	; 0x81b4 <pick_drop+0x14f2>
    81b2:	4e c0       	rjmp	.+156    	; 0x8250 <pick_drop+0x158e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    81b4:	ce 01       	movw	r24, r28
    81b6:	89 54       	subi	r24, 0x49	; 73
    81b8:	9f 4f       	sbci	r25, 0xFF	; 255
    81ba:	fc 01       	movw	r30, r24
    81bc:	60 81       	ld	r22, Z
    81be:	71 81       	ldd	r23, Z+1	; 0x01
    81c0:	82 81       	ldd	r24, Z+2	; 0x02
    81c2:	93 81       	ldd	r25, Z+3	; 0x03
    81c4:	20 e0       	ldi	r18, 0x00	; 0
    81c6:	30 e0       	ldi	r19, 0x00	; 0
    81c8:	40 e2       	ldi	r20, 0x20	; 32
    81ca:	51 e4       	ldi	r21, 0x41	; 65
    81cc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    81d0:	dc 01       	movw	r26, r24
    81d2:	cb 01       	movw	r24, r22
    81d4:	8e 01       	movw	r16, r28
    81d6:	01 54       	subi	r16, 0x41	; 65
    81d8:	1f 4f       	sbci	r17, 0xFF	; 255
    81da:	bc 01       	movw	r22, r24
    81dc:	cd 01       	movw	r24, r26
    81de:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    81e2:	dc 01       	movw	r26, r24
    81e4:	cb 01       	movw	r24, r22
    81e6:	f8 01       	movw	r30, r16
    81e8:	91 83       	std	Z+1, r25	; 0x01
    81ea:	80 83       	st	Z, r24
    81ec:	27 c0       	rjmp	.+78     	; 0x823c <pick_drop+0x157a>
    81ee:	ce 01       	movw	r24, r28
    81f0:	8f 53       	subi	r24, 0x3F	; 63
    81f2:	9f 4f       	sbci	r25, 0xFF	; 255
    81f4:	20 e7       	ldi	r18, 0x70	; 112
    81f6:	31 e0       	ldi	r19, 0x01	; 1
    81f8:	fc 01       	movw	r30, r24
    81fa:	31 83       	std	Z+1, r19	; 0x01
    81fc:	20 83       	st	Z, r18
    81fe:	ce 01       	movw	r24, r28
    8200:	8f 53       	subi	r24, 0x3F	; 63
    8202:	9f 4f       	sbci	r25, 0xFF	; 255
    8204:	fc 01       	movw	r30, r24
    8206:	80 81       	ld	r24, Z
    8208:	91 81       	ldd	r25, Z+1	; 0x01
    820a:	8c 01       	movw	r16, r24
    820c:	c8 01       	movw	r24, r16
    820e:	01 97       	sbiw	r24, 0x01	; 1
    8210:	f1 f7       	brne	.-4      	; 0x820e <pick_drop+0x154c>
    8212:	8c 01       	movw	r16, r24
    8214:	ce 01       	movw	r24, r28
    8216:	8f 53       	subi	r24, 0x3F	; 63
    8218:	9f 4f       	sbci	r25, 0xFF	; 255
    821a:	fc 01       	movw	r30, r24
    821c:	11 83       	std	Z+1, r17	; 0x01
    821e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8220:	ce 01       	movw	r24, r28
    8222:	81 54       	subi	r24, 0x41	; 65
    8224:	9f 4f       	sbci	r25, 0xFF	; 255
    8226:	9e 01       	movw	r18, r28
    8228:	21 54       	subi	r18, 0x41	; 65
    822a:	3f 4f       	sbci	r19, 0xFF	; 255
    822c:	f9 01       	movw	r30, r18
    822e:	20 81       	ld	r18, Z
    8230:	31 81       	ldd	r19, Z+1	; 0x01
    8232:	21 50       	subi	r18, 0x01	; 1
    8234:	30 40       	sbci	r19, 0x00	; 0
    8236:	fc 01       	movw	r30, r24
    8238:	31 83       	std	Z+1, r19	; 0x01
    823a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    823c:	ce 01       	movw	r24, r28
    823e:	81 54       	subi	r24, 0x41	; 65
    8240:	9f 4f       	sbci	r25, 0xFF	; 255
    8242:	fc 01       	movw	r30, r24
    8244:	80 81       	ld	r24, Z
    8246:	91 81       	ldd	r25, Z+1	; 0x01
    8248:	00 97       	sbiw	r24, 0x00	; 0
    824a:	89 f6       	brne	.-94     	; 0x81ee <pick_drop+0x152c>
    824c:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8250:	8e 01       	movw	r16, r28
    8252:	01 54       	subi	r16, 0x41	; 65
    8254:	1f 4f       	sbci	r17, 0xFF	; 255
    8256:	ce 01       	movw	r24, r28
    8258:	85 54       	subi	r24, 0x45	; 69
    825a:	9f 4f       	sbci	r25, 0xFF	; 255
    825c:	fc 01       	movw	r30, r24
    825e:	60 81       	ld	r22, Z
    8260:	71 81       	ldd	r23, Z+1	; 0x01
    8262:	82 81       	ldd	r24, Z+2	; 0x02
    8264:	93 81       	ldd	r25, Z+3	; 0x03
    8266:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    826a:	dc 01       	movw	r26, r24
    826c:	cb 01       	movw	r24, r22
    826e:	f8 01       	movw	r30, r16
    8270:	91 83       	std	Z+1, r25	; 0x01
    8272:	80 83       	st	Z, r24
    8274:	ce 01       	movw	r24, r28
    8276:	8d 53       	subi	r24, 0x3D	; 61
    8278:	9f 4f       	sbci	r25, 0xFF	; 255
    827a:	9e 01       	movw	r18, r28
    827c:	21 54       	subi	r18, 0x41	; 65
    827e:	3f 4f       	sbci	r19, 0xFF	; 255
    8280:	f9 01       	movw	r30, r18
    8282:	20 81       	ld	r18, Z
    8284:	31 81       	ldd	r19, Z+1	; 0x01
    8286:	fc 01       	movw	r30, r24
    8288:	31 83       	std	Z+1, r19	; 0x01
    828a:	20 83       	st	Z, r18
    828c:	ce 01       	movw	r24, r28
    828e:	8d 53       	subi	r24, 0x3D	; 61
    8290:	9f 4f       	sbci	r25, 0xFF	; 255
    8292:	fc 01       	movw	r30, r24
    8294:	80 81       	ld	r24, Z
    8296:	91 81       	ldd	r25, Z+1	; 0x01
    8298:	8c 01       	movw	r16, r24
    829a:	c8 01       	movw	r24, r16
    829c:	01 97       	sbiw	r24, 0x01	; 1
    829e:	f1 f7       	brne	.-4      	; 0x829c <pick_drop+0x15da>
    82a0:	8c 01       	movw	r16, r24
    82a2:	ce 01       	movw	r24, r28
    82a4:	8d 53       	subi	r24, 0x3D	; 61
    82a6:	9f 4f       	sbci	r25, 0xFF	; 255
    82a8:	fc 01       	movw	r30, r24
    82aa:	11 83       	std	Z+1, r17	; 0x01
    82ac:	00 83       	st	Z, r16
    82ae:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
			_delay_ms(300);
		}
		
	}
	else if(pd=='5'){// 1X6
    82b2:	ce 01       	movw	r24, r28
    82b4:	8d 54       	subi	r24, 0x4D	; 77
    82b6:	9e 4f       	sbci	r25, 0xFE	; 254
    82b8:	fc 01       	movw	r30, r24
    82ba:	80 81       	ld	r24, Z
    82bc:	85 33       	cpi	r24, 0x35	; 53
    82be:	09 f0       	breq	.+2      	; 0x82c2 <pick_drop+0x1600>
    82c0:	5a c3       	rjmp	.+1716   	; 0x8976 <pick_drop+0x1cb4>
			spl_right();
    82c2:	0e 94 03 14 	call	0x2806	; 0x2806 <spl_right>
			stop();
    82c6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    82ca:	9e 01       	movw	r18, r28
    82cc:	2b 53       	subi	r18, 0x3B	; 59
    82ce:	3f 4f       	sbci	r19, 0xFF	; 255
    82d0:	80 e0       	ldi	r24, 0x00	; 0
    82d2:	90 e0       	ldi	r25, 0x00	; 0
    82d4:	a0 ea       	ldi	r26, 0xA0	; 160
    82d6:	b1 e4       	ldi	r27, 0x41	; 65
    82d8:	f9 01       	movw	r30, r18
    82da:	80 83       	st	Z, r24
    82dc:	91 83       	std	Z+1, r25	; 0x01
    82de:	a2 83       	std	Z+2, r26	; 0x02
    82e0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    82e2:	8e 01       	movw	r16, r28
    82e4:	07 53       	subi	r16, 0x37	; 55
    82e6:	1f 4f       	sbci	r17, 0xFF	; 255
    82e8:	ce 01       	movw	r24, r28
    82ea:	8b 53       	subi	r24, 0x3B	; 59
    82ec:	9f 4f       	sbci	r25, 0xFF	; 255
    82ee:	fc 01       	movw	r30, r24
    82f0:	60 81       	ld	r22, Z
    82f2:	71 81       	ldd	r23, Z+1	; 0x01
    82f4:	82 81       	ldd	r24, Z+2	; 0x02
    82f6:	93 81       	ldd	r25, Z+3	; 0x03
    82f8:	26 e6       	ldi	r18, 0x66	; 102
    82fa:	36 e6       	ldi	r19, 0x66	; 102
    82fc:	46 e6       	ldi	r20, 0x66	; 102
    82fe:	55 e4       	ldi	r21, 0x45	; 69
    8300:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8304:	dc 01       	movw	r26, r24
    8306:	cb 01       	movw	r24, r22
    8308:	f8 01       	movw	r30, r16
    830a:	80 83       	st	Z, r24
    830c:	91 83       	std	Z+1, r25	; 0x01
    830e:	a2 83       	std	Z+2, r26	; 0x02
    8310:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8312:	ce 01       	movw	r24, r28
    8314:	87 53       	subi	r24, 0x37	; 55
    8316:	9f 4f       	sbci	r25, 0xFF	; 255
    8318:	11 e0       	ldi	r17, 0x01	; 1
    831a:	fc 01       	movw	r30, r24
    831c:	60 81       	ld	r22, Z
    831e:	71 81       	ldd	r23, Z+1	; 0x01
    8320:	82 81       	ldd	r24, Z+2	; 0x02
    8322:	93 81       	ldd	r25, Z+3	; 0x03
    8324:	20 e0       	ldi	r18, 0x00	; 0
    8326:	30 e0       	ldi	r19, 0x00	; 0
    8328:	40 e8       	ldi	r20, 0x80	; 128
    832a:	5f e3       	ldi	r21, 0x3F	; 63
    832c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8330:	88 23       	and	r24, r24
    8332:	0c f0       	brlt	.+2      	; 0x8336 <pick_drop+0x1674>
    8334:	10 e0       	ldi	r17, 0x00	; 0
    8336:	11 23       	and	r17, r17
    8338:	49 f0       	breq	.+18     	; 0x834c <pick_drop+0x168a>
		__ticks = 1;
    833a:	ce 01       	movw	r24, r28
    833c:	83 53       	subi	r24, 0x33	; 51
    833e:	9f 4f       	sbci	r25, 0xFF	; 255
    8340:	21 e0       	ldi	r18, 0x01	; 1
    8342:	30 e0       	ldi	r19, 0x00	; 0
    8344:	fc 01       	movw	r30, r24
    8346:	31 83       	std	Z+1, r19	; 0x01
    8348:	20 83       	st	Z, r18
    834a:	74 c0       	rjmp	.+232    	; 0x8434 <pick_drop+0x1772>
	else if (__tmp > 65535)
    834c:	ce 01       	movw	r24, r28
    834e:	87 53       	subi	r24, 0x37	; 55
    8350:	9f 4f       	sbci	r25, 0xFF	; 255
    8352:	11 e0       	ldi	r17, 0x01	; 1
    8354:	fc 01       	movw	r30, r24
    8356:	60 81       	ld	r22, Z
    8358:	71 81       	ldd	r23, Z+1	; 0x01
    835a:	82 81       	ldd	r24, Z+2	; 0x02
    835c:	93 81       	ldd	r25, Z+3	; 0x03
    835e:	20 e0       	ldi	r18, 0x00	; 0
    8360:	3f ef       	ldi	r19, 0xFF	; 255
    8362:	4f e7       	ldi	r20, 0x7F	; 127
    8364:	57 e4       	ldi	r21, 0x47	; 71
    8366:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    836a:	18 16       	cp	r1, r24
    836c:	0c f0       	brlt	.+2      	; 0x8370 <pick_drop+0x16ae>
    836e:	10 e0       	ldi	r17, 0x00	; 0
    8370:	11 23       	and	r17, r17
    8372:	09 f4       	brne	.+2      	; 0x8376 <pick_drop+0x16b4>
    8374:	4d c0       	rjmp	.+154    	; 0x8410 <pick_drop+0x174e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8376:	ce 01       	movw	r24, r28
    8378:	8b 53       	subi	r24, 0x3B	; 59
    837a:	9f 4f       	sbci	r25, 0xFF	; 255
    837c:	fc 01       	movw	r30, r24
    837e:	60 81       	ld	r22, Z
    8380:	71 81       	ldd	r23, Z+1	; 0x01
    8382:	82 81       	ldd	r24, Z+2	; 0x02
    8384:	93 81       	ldd	r25, Z+3	; 0x03
    8386:	20 e0       	ldi	r18, 0x00	; 0
    8388:	30 e0       	ldi	r19, 0x00	; 0
    838a:	40 e2       	ldi	r20, 0x20	; 32
    838c:	51 e4       	ldi	r21, 0x41	; 65
    838e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8392:	dc 01       	movw	r26, r24
    8394:	cb 01       	movw	r24, r22
    8396:	8e 01       	movw	r16, r28
    8398:	03 53       	subi	r16, 0x33	; 51
    839a:	1f 4f       	sbci	r17, 0xFF	; 255
    839c:	bc 01       	movw	r22, r24
    839e:	cd 01       	movw	r24, r26
    83a0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    83a4:	dc 01       	movw	r26, r24
    83a6:	cb 01       	movw	r24, r22
    83a8:	f8 01       	movw	r30, r16
    83aa:	91 83       	std	Z+1, r25	; 0x01
    83ac:	80 83       	st	Z, r24
    83ae:	27 c0       	rjmp	.+78     	; 0x83fe <pick_drop+0x173c>
    83b0:	ce 01       	movw	r24, r28
    83b2:	81 53       	subi	r24, 0x31	; 49
    83b4:	9f 4f       	sbci	r25, 0xFF	; 255
    83b6:	20 e7       	ldi	r18, 0x70	; 112
    83b8:	31 e0       	ldi	r19, 0x01	; 1
    83ba:	fc 01       	movw	r30, r24
    83bc:	31 83       	std	Z+1, r19	; 0x01
    83be:	20 83       	st	Z, r18
    83c0:	ce 01       	movw	r24, r28
    83c2:	81 53       	subi	r24, 0x31	; 49
    83c4:	9f 4f       	sbci	r25, 0xFF	; 255
    83c6:	fc 01       	movw	r30, r24
    83c8:	80 81       	ld	r24, Z
    83ca:	91 81       	ldd	r25, Z+1	; 0x01
    83cc:	8c 01       	movw	r16, r24
    83ce:	c8 01       	movw	r24, r16
    83d0:	01 97       	sbiw	r24, 0x01	; 1
    83d2:	f1 f7       	brne	.-4      	; 0x83d0 <pick_drop+0x170e>
    83d4:	8c 01       	movw	r16, r24
    83d6:	ce 01       	movw	r24, r28
    83d8:	81 53       	subi	r24, 0x31	; 49
    83da:	9f 4f       	sbci	r25, 0xFF	; 255
    83dc:	fc 01       	movw	r30, r24
    83de:	11 83       	std	Z+1, r17	; 0x01
    83e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83e2:	ce 01       	movw	r24, r28
    83e4:	83 53       	subi	r24, 0x33	; 51
    83e6:	9f 4f       	sbci	r25, 0xFF	; 255
    83e8:	9e 01       	movw	r18, r28
    83ea:	23 53       	subi	r18, 0x33	; 51
    83ec:	3f 4f       	sbci	r19, 0xFF	; 255
    83ee:	f9 01       	movw	r30, r18
    83f0:	20 81       	ld	r18, Z
    83f2:	31 81       	ldd	r19, Z+1	; 0x01
    83f4:	21 50       	subi	r18, 0x01	; 1
    83f6:	30 40       	sbci	r19, 0x00	; 0
    83f8:	fc 01       	movw	r30, r24
    83fa:	31 83       	std	Z+1, r19	; 0x01
    83fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83fe:	ce 01       	movw	r24, r28
    8400:	83 53       	subi	r24, 0x33	; 51
    8402:	9f 4f       	sbci	r25, 0xFF	; 255
    8404:	fc 01       	movw	r30, r24
    8406:	80 81       	ld	r24, Z
    8408:	91 81       	ldd	r25, Z+1	; 0x01
    840a:	00 97       	sbiw	r24, 0x00	; 0
    840c:	89 f6       	brne	.-94     	; 0x83b0 <pick_drop+0x16ee>
    840e:	2f c0       	rjmp	.+94     	; 0x846e <pick_drop+0x17ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8410:	8e 01       	movw	r16, r28
    8412:	03 53       	subi	r16, 0x33	; 51
    8414:	1f 4f       	sbci	r17, 0xFF	; 255
    8416:	ce 01       	movw	r24, r28
    8418:	87 53       	subi	r24, 0x37	; 55
    841a:	9f 4f       	sbci	r25, 0xFF	; 255
    841c:	fc 01       	movw	r30, r24
    841e:	60 81       	ld	r22, Z
    8420:	71 81       	ldd	r23, Z+1	; 0x01
    8422:	82 81       	ldd	r24, Z+2	; 0x02
    8424:	93 81       	ldd	r25, Z+3	; 0x03
    8426:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    842a:	dc 01       	movw	r26, r24
    842c:	cb 01       	movw	r24, r22
    842e:	f8 01       	movw	r30, r16
    8430:	91 83       	std	Z+1, r25	; 0x01
    8432:	80 83       	st	Z, r24
    8434:	ce 01       	movw	r24, r28
    8436:	8f 52       	subi	r24, 0x2F	; 47
    8438:	9f 4f       	sbci	r25, 0xFF	; 255
    843a:	9e 01       	movw	r18, r28
    843c:	23 53       	subi	r18, 0x33	; 51
    843e:	3f 4f       	sbci	r19, 0xFF	; 255
    8440:	f9 01       	movw	r30, r18
    8442:	20 81       	ld	r18, Z
    8444:	31 81       	ldd	r19, Z+1	; 0x01
    8446:	fc 01       	movw	r30, r24
    8448:	31 83       	std	Z+1, r19	; 0x01
    844a:	20 83       	st	Z, r18
    844c:	ce 01       	movw	r24, r28
    844e:	8f 52       	subi	r24, 0x2F	; 47
    8450:	9f 4f       	sbci	r25, 0xFF	; 255
    8452:	fc 01       	movw	r30, r24
    8454:	80 81       	ld	r24, Z
    8456:	91 81       	ldd	r25, Z+1	; 0x01
    8458:	8c 01       	movw	r16, r24
    845a:	c8 01       	movw	r24, r16
    845c:	01 97       	sbiw	r24, 0x01	; 1
    845e:	f1 f7       	brne	.-4      	; 0x845c <pick_drop+0x179a>
    8460:	8c 01       	movw	r16, r24
    8462:	ce 01       	movw	r24, r28
    8464:	8f 52       	subi	r24, 0x2F	; 47
    8466:	9f 4f       	sbci	r25, 0xFF	; 255
    8468:	fc 01       	movw	r30, r24
    846a:	11 83       	std	Z+1, r17	; 0x01
    846c:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(25);
    846e:	89 e1       	ldi	r24, 0x19	; 25
    8470:	90 e0       	ldi	r25, 0x00	; 0
    8472:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8476:	9e 01       	movw	r18, r28
    8478:	2d 52       	subi	r18, 0x2D	; 45
    847a:	3f 4f       	sbci	r19, 0xFF	; 255
    847c:	80 e0       	ldi	r24, 0x00	; 0
    847e:	90 e0       	ldi	r25, 0x00	; 0
    8480:	a0 ea       	ldi	r26, 0xA0	; 160
    8482:	b1 e4       	ldi	r27, 0x41	; 65
    8484:	f9 01       	movw	r30, r18
    8486:	80 83       	st	Z, r24
    8488:	91 83       	std	Z+1, r25	; 0x01
    848a:	a2 83       	std	Z+2, r26	; 0x02
    848c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    848e:	8e 01       	movw	r16, r28
    8490:	09 52       	subi	r16, 0x29	; 41
    8492:	1f 4f       	sbci	r17, 0xFF	; 255
    8494:	ce 01       	movw	r24, r28
    8496:	8d 52       	subi	r24, 0x2D	; 45
    8498:	9f 4f       	sbci	r25, 0xFF	; 255
    849a:	fc 01       	movw	r30, r24
    849c:	60 81       	ld	r22, Z
    849e:	71 81       	ldd	r23, Z+1	; 0x01
    84a0:	82 81       	ldd	r24, Z+2	; 0x02
    84a2:	93 81       	ldd	r25, Z+3	; 0x03
    84a4:	26 e6       	ldi	r18, 0x66	; 102
    84a6:	36 e6       	ldi	r19, 0x66	; 102
    84a8:	46 e6       	ldi	r20, 0x66	; 102
    84aa:	55 e4       	ldi	r21, 0x45	; 69
    84ac:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    84b0:	dc 01       	movw	r26, r24
    84b2:	cb 01       	movw	r24, r22
    84b4:	f8 01       	movw	r30, r16
    84b6:	80 83       	st	Z, r24
    84b8:	91 83       	std	Z+1, r25	; 0x01
    84ba:	a2 83       	std	Z+2, r26	; 0x02
    84bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    84be:	ce 01       	movw	r24, r28
    84c0:	89 52       	subi	r24, 0x29	; 41
    84c2:	9f 4f       	sbci	r25, 0xFF	; 255
    84c4:	11 e0       	ldi	r17, 0x01	; 1
    84c6:	fc 01       	movw	r30, r24
    84c8:	60 81       	ld	r22, Z
    84ca:	71 81       	ldd	r23, Z+1	; 0x01
    84cc:	82 81       	ldd	r24, Z+2	; 0x02
    84ce:	93 81       	ldd	r25, Z+3	; 0x03
    84d0:	20 e0       	ldi	r18, 0x00	; 0
    84d2:	30 e0       	ldi	r19, 0x00	; 0
    84d4:	40 e8       	ldi	r20, 0x80	; 128
    84d6:	5f e3       	ldi	r21, 0x3F	; 63
    84d8:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    84dc:	88 23       	and	r24, r24
    84de:	0c f0       	brlt	.+2      	; 0x84e2 <pick_drop+0x1820>
    84e0:	10 e0       	ldi	r17, 0x00	; 0
    84e2:	11 23       	and	r17, r17
    84e4:	49 f0       	breq	.+18     	; 0x84f8 <pick_drop+0x1836>
		__ticks = 1;
    84e6:	ce 01       	movw	r24, r28
    84e8:	85 52       	subi	r24, 0x25	; 37
    84ea:	9f 4f       	sbci	r25, 0xFF	; 255
    84ec:	21 e0       	ldi	r18, 0x01	; 1
    84ee:	30 e0       	ldi	r19, 0x00	; 0
    84f0:	fc 01       	movw	r30, r24
    84f2:	31 83       	std	Z+1, r19	; 0x01
    84f4:	20 83       	st	Z, r18
    84f6:	74 c0       	rjmp	.+232    	; 0x85e0 <pick_drop+0x191e>
	else if (__tmp > 65535)
    84f8:	ce 01       	movw	r24, r28
    84fa:	89 52       	subi	r24, 0x29	; 41
    84fc:	9f 4f       	sbci	r25, 0xFF	; 255
    84fe:	11 e0       	ldi	r17, 0x01	; 1
    8500:	fc 01       	movw	r30, r24
    8502:	60 81       	ld	r22, Z
    8504:	71 81       	ldd	r23, Z+1	; 0x01
    8506:	82 81       	ldd	r24, Z+2	; 0x02
    8508:	93 81       	ldd	r25, Z+3	; 0x03
    850a:	20 e0       	ldi	r18, 0x00	; 0
    850c:	3f ef       	ldi	r19, 0xFF	; 255
    850e:	4f e7       	ldi	r20, 0x7F	; 127
    8510:	57 e4       	ldi	r21, 0x47	; 71
    8512:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    8516:	18 16       	cp	r1, r24
    8518:	0c f0       	brlt	.+2      	; 0x851c <pick_drop+0x185a>
    851a:	10 e0       	ldi	r17, 0x00	; 0
    851c:	11 23       	and	r17, r17
    851e:	09 f4       	brne	.+2      	; 0x8522 <pick_drop+0x1860>
    8520:	4d c0       	rjmp	.+154    	; 0x85bc <pick_drop+0x18fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8522:	ce 01       	movw	r24, r28
    8524:	8d 52       	subi	r24, 0x2D	; 45
    8526:	9f 4f       	sbci	r25, 0xFF	; 255
    8528:	fc 01       	movw	r30, r24
    852a:	60 81       	ld	r22, Z
    852c:	71 81       	ldd	r23, Z+1	; 0x01
    852e:	82 81       	ldd	r24, Z+2	; 0x02
    8530:	93 81       	ldd	r25, Z+3	; 0x03
    8532:	20 e0       	ldi	r18, 0x00	; 0
    8534:	30 e0       	ldi	r19, 0x00	; 0
    8536:	40 e2       	ldi	r20, 0x20	; 32
    8538:	51 e4       	ldi	r21, 0x41	; 65
    853a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    853e:	dc 01       	movw	r26, r24
    8540:	cb 01       	movw	r24, r22
    8542:	8e 01       	movw	r16, r28
    8544:	05 52       	subi	r16, 0x25	; 37
    8546:	1f 4f       	sbci	r17, 0xFF	; 255
    8548:	bc 01       	movw	r22, r24
    854a:	cd 01       	movw	r24, r26
    854c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8550:	dc 01       	movw	r26, r24
    8552:	cb 01       	movw	r24, r22
    8554:	f8 01       	movw	r30, r16
    8556:	91 83       	std	Z+1, r25	; 0x01
    8558:	80 83       	st	Z, r24
    855a:	27 c0       	rjmp	.+78     	; 0x85aa <pick_drop+0x18e8>
    855c:	ce 01       	movw	r24, r28
    855e:	83 52       	subi	r24, 0x23	; 35
    8560:	9f 4f       	sbci	r25, 0xFF	; 255
    8562:	20 e7       	ldi	r18, 0x70	; 112
    8564:	31 e0       	ldi	r19, 0x01	; 1
    8566:	fc 01       	movw	r30, r24
    8568:	31 83       	std	Z+1, r19	; 0x01
    856a:	20 83       	st	Z, r18
    856c:	ce 01       	movw	r24, r28
    856e:	83 52       	subi	r24, 0x23	; 35
    8570:	9f 4f       	sbci	r25, 0xFF	; 255
    8572:	fc 01       	movw	r30, r24
    8574:	80 81       	ld	r24, Z
    8576:	91 81       	ldd	r25, Z+1	; 0x01
    8578:	8c 01       	movw	r16, r24
    857a:	c8 01       	movw	r24, r16
    857c:	01 97       	sbiw	r24, 0x01	; 1
    857e:	f1 f7       	brne	.-4      	; 0x857c <pick_drop+0x18ba>
    8580:	8c 01       	movw	r16, r24
    8582:	ce 01       	movw	r24, r28
    8584:	83 52       	subi	r24, 0x23	; 35
    8586:	9f 4f       	sbci	r25, 0xFF	; 255
    8588:	fc 01       	movw	r30, r24
    858a:	11 83       	std	Z+1, r17	; 0x01
    858c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    858e:	ce 01       	movw	r24, r28
    8590:	85 52       	subi	r24, 0x25	; 37
    8592:	9f 4f       	sbci	r25, 0xFF	; 255
    8594:	9e 01       	movw	r18, r28
    8596:	25 52       	subi	r18, 0x25	; 37
    8598:	3f 4f       	sbci	r19, 0xFF	; 255
    859a:	f9 01       	movw	r30, r18
    859c:	20 81       	ld	r18, Z
    859e:	31 81       	ldd	r19, Z+1	; 0x01
    85a0:	21 50       	subi	r18, 0x01	; 1
    85a2:	30 40       	sbci	r19, 0x00	; 0
    85a4:	fc 01       	movw	r30, r24
    85a6:	31 83       	std	Z+1, r19	; 0x01
    85a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    85aa:	ce 01       	movw	r24, r28
    85ac:	85 52       	subi	r24, 0x25	; 37
    85ae:	9f 4f       	sbci	r25, 0xFF	; 255
    85b0:	fc 01       	movw	r30, r24
    85b2:	80 81       	ld	r24, Z
    85b4:	91 81       	ldd	r25, Z+1	; 0x01
    85b6:	00 97       	sbiw	r24, 0x00	; 0
    85b8:	89 f6       	brne	.-94     	; 0x855c <pick_drop+0x189a>
    85ba:	2f c0       	rjmp	.+94     	; 0x861a <pick_drop+0x1958>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    85bc:	8e 01       	movw	r16, r28
    85be:	05 52       	subi	r16, 0x25	; 37
    85c0:	1f 4f       	sbci	r17, 0xFF	; 255
    85c2:	ce 01       	movw	r24, r28
    85c4:	89 52       	subi	r24, 0x29	; 41
    85c6:	9f 4f       	sbci	r25, 0xFF	; 255
    85c8:	fc 01       	movw	r30, r24
    85ca:	60 81       	ld	r22, Z
    85cc:	71 81       	ldd	r23, Z+1	; 0x01
    85ce:	82 81       	ldd	r24, Z+2	; 0x02
    85d0:	93 81       	ldd	r25, Z+3	; 0x03
    85d2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    85d6:	dc 01       	movw	r26, r24
    85d8:	cb 01       	movw	r24, r22
    85da:	f8 01       	movw	r30, r16
    85dc:	91 83       	std	Z+1, r25	; 0x01
    85de:	80 83       	st	Z, r24
    85e0:	ce 01       	movw	r24, r28
    85e2:	81 52       	subi	r24, 0x21	; 33
    85e4:	9f 4f       	sbci	r25, 0xFF	; 255
    85e6:	9e 01       	movw	r18, r28
    85e8:	25 52       	subi	r18, 0x25	; 37
    85ea:	3f 4f       	sbci	r19, 0xFF	; 255
    85ec:	f9 01       	movw	r30, r18
    85ee:	20 81       	ld	r18, Z
    85f0:	31 81       	ldd	r19, Z+1	; 0x01
    85f2:	fc 01       	movw	r30, r24
    85f4:	31 83       	std	Z+1, r19	; 0x01
    85f6:	20 83       	st	Z, r18
    85f8:	ce 01       	movw	r24, r28
    85fa:	81 52       	subi	r24, 0x21	; 33
    85fc:	9f 4f       	sbci	r25, 0xFF	; 255
    85fe:	fc 01       	movw	r30, r24
    8600:	80 81       	ld	r24, Z
    8602:	91 81       	ldd	r25, Z+1	; 0x01
    8604:	8c 01       	movw	r16, r24
    8606:	c8 01       	movw	r24, r16
    8608:	01 97       	sbiw	r24, 0x01	; 1
    860a:	f1 f7       	brne	.-4      	; 0x8608 <pick_drop+0x1946>
    860c:	8c 01       	movw	r16, r24
    860e:	ce 01       	movw	r24, r28
    8610:	81 52       	subi	r24, 0x21	; 33
    8612:	9f 4f       	sbci	r25, 0xFF	; 255
    8614:	fc 01       	movw	r30, r24
    8616:	11 83       	std	Z+1, r17	; 0x01
    8618:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    861a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    861e:	9e 01       	movw	r18, r28
    8620:	2f 51       	subi	r18, 0x1F	; 31
    8622:	3f 4f       	sbci	r19, 0xFF	; 255
    8624:	80 e0       	ldi	r24, 0x00	; 0
    8626:	90 e0       	ldi	r25, 0x00	; 0
    8628:	a8 ec       	ldi	r26, 0xC8	; 200
    862a:	b2 e4       	ldi	r27, 0x42	; 66
    862c:	f9 01       	movw	r30, r18
    862e:	80 83       	st	Z, r24
    8630:	91 83       	std	Z+1, r25	; 0x01
    8632:	a2 83       	std	Z+2, r26	; 0x02
    8634:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8636:	8e 01       	movw	r16, r28
    8638:	0b 51       	subi	r16, 0x1B	; 27
    863a:	1f 4f       	sbci	r17, 0xFF	; 255
    863c:	ce 01       	movw	r24, r28
    863e:	8f 51       	subi	r24, 0x1F	; 31
    8640:	9f 4f       	sbci	r25, 0xFF	; 255
    8642:	fc 01       	movw	r30, r24
    8644:	60 81       	ld	r22, Z
    8646:	71 81       	ldd	r23, Z+1	; 0x01
    8648:	82 81       	ldd	r24, Z+2	; 0x02
    864a:	93 81       	ldd	r25, Z+3	; 0x03
    864c:	26 e6       	ldi	r18, 0x66	; 102
    864e:	36 e6       	ldi	r19, 0x66	; 102
    8650:	46 e6       	ldi	r20, 0x66	; 102
    8652:	55 e4       	ldi	r21, 0x45	; 69
    8654:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8658:	dc 01       	movw	r26, r24
    865a:	cb 01       	movw	r24, r22
    865c:	f8 01       	movw	r30, r16
    865e:	80 83       	st	Z, r24
    8660:	91 83       	std	Z+1, r25	; 0x01
    8662:	a2 83       	std	Z+2, r26	; 0x02
    8664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8666:	ce 01       	movw	r24, r28
    8668:	8b 51       	subi	r24, 0x1B	; 27
    866a:	9f 4f       	sbci	r25, 0xFF	; 255
    866c:	11 e0       	ldi	r17, 0x01	; 1
    866e:	fc 01       	movw	r30, r24
    8670:	60 81       	ld	r22, Z
    8672:	71 81       	ldd	r23, Z+1	; 0x01
    8674:	82 81       	ldd	r24, Z+2	; 0x02
    8676:	93 81       	ldd	r25, Z+3	; 0x03
    8678:	20 e0       	ldi	r18, 0x00	; 0
    867a:	30 e0       	ldi	r19, 0x00	; 0
    867c:	40 e8       	ldi	r20, 0x80	; 128
    867e:	5f e3       	ldi	r21, 0x3F	; 63
    8680:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8684:	88 23       	and	r24, r24
    8686:	0c f0       	brlt	.+2      	; 0x868a <pick_drop+0x19c8>
    8688:	10 e0       	ldi	r17, 0x00	; 0
    868a:	11 23       	and	r17, r17
    868c:	49 f0       	breq	.+18     	; 0x86a0 <pick_drop+0x19de>
		__ticks = 1;
    868e:	ce 01       	movw	r24, r28
    8690:	87 51       	subi	r24, 0x17	; 23
    8692:	9f 4f       	sbci	r25, 0xFF	; 255
    8694:	21 e0       	ldi	r18, 0x01	; 1
    8696:	30 e0       	ldi	r19, 0x00	; 0
    8698:	fc 01       	movw	r30, r24
    869a:	31 83       	std	Z+1, r19	; 0x01
    869c:	20 83       	st	Z, r18
    869e:	74 c0       	rjmp	.+232    	; 0x8788 <pick_drop+0x1ac6>
	else if (__tmp > 65535)
    86a0:	ce 01       	movw	r24, r28
    86a2:	8b 51       	subi	r24, 0x1B	; 27
    86a4:	9f 4f       	sbci	r25, 0xFF	; 255
    86a6:	11 e0       	ldi	r17, 0x01	; 1
    86a8:	fc 01       	movw	r30, r24
    86aa:	60 81       	ld	r22, Z
    86ac:	71 81       	ldd	r23, Z+1	; 0x01
    86ae:	82 81       	ldd	r24, Z+2	; 0x02
    86b0:	93 81       	ldd	r25, Z+3	; 0x03
    86b2:	20 e0       	ldi	r18, 0x00	; 0
    86b4:	3f ef       	ldi	r19, 0xFF	; 255
    86b6:	4f e7       	ldi	r20, 0x7F	; 127
    86b8:	57 e4       	ldi	r21, 0x47	; 71
    86ba:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    86be:	18 16       	cp	r1, r24
    86c0:	0c f0       	brlt	.+2      	; 0x86c4 <pick_drop+0x1a02>
    86c2:	10 e0       	ldi	r17, 0x00	; 0
    86c4:	11 23       	and	r17, r17
    86c6:	09 f4       	brne	.+2      	; 0x86ca <pick_drop+0x1a08>
    86c8:	4d c0       	rjmp	.+154    	; 0x8764 <pick_drop+0x1aa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    86ca:	ce 01       	movw	r24, r28
    86cc:	8f 51       	subi	r24, 0x1F	; 31
    86ce:	9f 4f       	sbci	r25, 0xFF	; 255
    86d0:	fc 01       	movw	r30, r24
    86d2:	60 81       	ld	r22, Z
    86d4:	71 81       	ldd	r23, Z+1	; 0x01
    86d6:	82 81       	ldd	r24, Z+2	; 0x02
    86d8:	93 81       	ldd	r25, Z+3	; 0x03
    86da:	20 e0       	ldi	r18, 0x00	; 0
    86dc:	30 e0       	ldi	r19, 0x00	; 0
    86de:	40 e2       	ldi	r20, 0x20	; 32
    86e0:	51 e4       	ldi	r21, 0x41	; 65
    86e2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    86e6:	dc 01       	movw	r26, r24
    86e8:	cb 01       	movw	r24, r22
    86ea:	8e 01       	movw	r16, r28
    86ec:	07 51       	subi	r16, 0x17	; 23
    86ee:	1f 4f       	sbci	r17, 0xFF	; 255
    86f0:	bc 01       	movw	r22, r24
    86f2:	cd 01       	movw	r24, r26
    86f4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    86f8:	dc 01       	movw	r26, r24
    86fa:	cb 01       	movw	r24, r22
    86fc:	f8 01       	movw	r30, r16
    86fe:	91 83       	std	Z+1, r25	; 0x01
    8700:	80 83       	st	Z, r24
    8702:	27 c0       	rjmp	.+78     	; 0x8752 <pick_drop+0x1a90>
    8704:	ce 01       	movw	r24, r28
    8706:	85 51       	subi	r24, 0x15	; 21
    8708:	9f 4f       	sbci	r25, 0xFF	; 255
    870a:	20 e7       	ldi	r18, 0x70	; 112
    870c:	31 e0       	ldi	r19, 0x01	; 1
    870e:	fc 01       	movw	r30, r24
    8710:	31 83       	std	Z+1, r19	; 0x01
    8712:	20 83       	st	Z, r18
    8714:	ce 01       	movw	r24, r28
    8716:	85 51       	subi	r24, 0x15	; 21
    8718:	9f 4f       	sbci	r25, 0xFF	; 255
    871a:	fc 01       	movw	r30, r24
    871c:	80 81       	ld	r24, Z
    871e:	91 81       	ldd	r25, Z+1	; 0x01
    8720:	8c 01       	movw	r16, r24
    8722:	c8 01       	movw	r24, r16
    8724:	01 97       	sbiw	r24, 0x01	; 1
    8726:	f1 f7       	brne	.-4      	; 0x8724 <pick_drop+0x1a62>
    8728:	8c 01       	movw	r16, r24
    872a:	ce 01       	movw	r24, r28
    872c:	85 51       	subi	r24, 0x15	; 21
    872e:	9f 4f       	sbci	r25, 0xFF	; 255
    8730:	fc 01       	movw	r30, r24
    8732:	11 83       	std	Z+1, r17	; 0x01
    8734:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8736:	ce 01       	movw	r24, r28
    8738:	87 51       	subi	r24, 0x17	; 23
    873a:	9f 4f       	sbci	r25, 0xFF	; 255
    873c:	9e 01       	movw	r18, r28
    873e:	27 51       	subi	r18, 0x17	; 23
    8740:	3f 4f       	sbci	r19, 0xFF	; 255
    8742:	f9 01       	movw	r30, r18
    8744:	20 81       	ld	r18, Z
    8746:	31 81       	ldd	r19, Z+1	; 0x01
    8748:	21 50       	subi	r18, 0x01	; 1
    874a:	30 40       	sbci	r19, 0x00	; 0
    874c:	fc 01       	movw	r30, r24
    874e:	31 83       	std	Z+1, r19	; 0x01
    8750:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8752:	ce 01       	movw	r24, r28
    8754:	87 51       	subi	r24, 0x17	; 23
    8756:	9f 4f       	sbci	r25, 0xFF	; 255
    8758:	fc 01       	movw	r30, r24
    875a:	80 81       	ld	r24, Z
    875c:	91 81       	ldd	r25, Z+1	; 0x01
    875e:	00 97       	sbiw	r24, 0x00	; 0
    8760:	89 f6       	brne	.-94     	; 0x8704 <pick_drop+0x1a42>
    8762:	2f c0       	rjmp	.+94     	; 0x87c2 <pick_drop+0x1b00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8764:	8e 01       	movw	r16, r28
    8766:	07 51       	subi	r16, 0x17	; 23
    8768:	1f 4f       	sbci	r17, 0xFF	; 255
    876a:	ce 01       	movw	r24, r28
    876c:	8b 51       	subi	r24, 0x1B	; 27
    876e:	9f 4f       	sbci	r25, 0xFF	; 255
    8770:	fc 01       	movw	r30, r24
    8772:	60 81       	ld	r22, Z
    8774:	71 81       	ldd	r23, Z+1	; 0x01
    8776:	82 81       	ldd	r24, Z+2	; 0x02
    8778:	93 81       	ldd	r25, Z+3	; 0x03
    877a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    877e:	dc 01       	movw	r26, r24
    8780:	cb 01       	movw	r24, r22
    8782:	f8 01       	movw	r30, r16
    8784:	91 83       	std	Z+1, r25	; 0x01
    8786:	80 83       	st	Z, r24
    8788:	ce 01       	movw	r24, r28
    878a:	83 51       	subi	r24, 0x13	; 19
    878c:	9f 4f       	sbci	r25, 0xFF	; 255
    878e:	9e 01       	movw	r18, r28
    8790:	27 51       	subi	r18, 0x17	; 23
    8792:	3f 4f       	sbci	r19, 0xFF	; 255
    8794:	f9 01       	movw	r30, r18
    8796:	20 81       	ld	r18, Z
    8798:	31 81       	ldd	r19, Z+1	; 0x01
    879a:	fc 01       	movw	r30, r24
    879c:	31 83       	std	Z+1, r19	; 0x01
    879e:	20 83       	st	Z, r18
    87a0:	ce 01       	movw	r24, r28
    87a2:	83 51       	subi	r24, 0x13	; 19
    87a4:	9f 4f       	sbci	r25, 0xFF	; 255
    87a6:	fc 01       	movw	r30, r24
    87a8:	80 81       	ld	r24, Z
    87aa:	91 81       	ldd	r25, Z+1	; 0x01
    87ac:	8c 01       	movw	r16, r24
    87ae:	c8 01       	movw	r24, r16
    87b0:	01 97       	sbiw	r24, 0x01	; 1
    87b2:	f1 f7       	brne	.-4      	; 0x87b0 <pick_drop+0x1aee>
    87b4:	8c 01       	movw	r16, r24
    87b6:	ce 01       	movw	r24, r28
    87b8:	83 51       	subi	r24, 0x13	; 19
    87ba:	9f 4f       	sbci	r25, 0xFF	; 255
    87bc:	fc 01       	movw	r30, r24
    87be:	11 83       	std	Z+1, r17	; 0x01
    87c0:	00 83       	st	Z, r16
			_delay_ms(100);
			forward_mm(25);
    87c2:	89 e1       	ldi	r24, 0x19	; 25
    87c4:	90 e0       	ldi	r25, 0x00	; 0
    87c6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    87ca:	9e 01       	movw	r18, r28
    87cc:	21 51       	subi	r18, 0x11	; 17
    87ce:	3f 4f       	sbci	r19, 0xFF	; 255
    87d0:	80 e0       	ldi	r24, 0x00	; 0
    87d2:	90 e0       	ldi	r25, 0x00	; 0
    87d4:	a0 ea       	ldi	r26, 0xA0	; 160
    87d6:	b1 e4       	ldi	r27, 0x41	; 65
    87d8:	f9 01       	movw	r30, r18
    87da:	80 83       	st	Z, r24
    87dc:	91 83       	std	Z+1, r25	; 0x01
    87de:	a2 83       	std	Z+2, r26	; 0x02
    87e0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    87e2:	8e 01       	movw	r16, r28
    87e4:	0d 50       	subi	r16, 0x0D	; 13
    87e6:	1f 4f       	sbci	r17, 0xFF	; 255
    87e8:	ce 01       	movw	r24, r28
    87ea:	81 51       	subi	r24, 0x11	; 17
    87ec:	9f 4f       	sbci	r25, 0xFF	; 255
    87ee:	fc 01       	movw	r30, r24
    87f0:	60 81       	ld	r22, Z
    87f2:	71 81       	ldd	r23, Z+1	; 0x01
    87f4:	82 81       	ldd	r24, Z+2	; 0x02
    87f6:	93 81       	ldd	r25, Z+3	; 0x03
    87f8:	26 e6       	ldi	r18, 0x66	; 102
    87fa:	36 e6       	ldi	r19, 0x66	; 102
    87fc:	46 e6       	ldi	r20, 0x66	; 102
    87fe:	55 e4       	ldi	r21, 0x45	; 69
    8800:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8804:	dc 01       	movw	r26, r24
    8806:	cb 01       	movw	r24, r22
    8808:	f8 01       	movw	r30, r16
    880a:	80 83       	st	Z, r24
    880c:	91 83       	std	Z+1, r25	; 0x01
    880e:	a2 83       	std	Z+2, r26	; 0x02
    8810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8812:	ce 01       	movw	r24, r28
    8814:	8d 50       	subi	r24, 0x0D	; 13
    8816:	9f 4f       	sbci	r25, 0xFF	; 255
    8818:	11 e0       	ldi	r17, 0x01	; 1
    881a:	fc 01       	movw	r30, r24
    881c:	60 81       	ld	r22, Z
    881e:	71 81       	ldd	r23, Z+1	; 0x01
    8820:	82 81       	ldd	r24, Z+2	; 0x02
    8822:	93 81       	ldd	r25, Z+3	; 0x03
    8824:	20 e0       	ldi	r18, 0x00	; 0
    8826:	30 e0       	ldi	r19, 0x00	; 0
    8828:	40 e8       	ldi	r20, 0x80	; 128
    882a:	5f e3       	ldi	r21, 0x3F	; 63
    882c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8830:	88 23       	and	r24, r24
    8832:	0c f0       	brlt	.+2      	; 0x8836 <pick_drop+0x1b74>
    8834:	10 e0       	ldi	r17, 0x00	; 0
    8836:	11 23       	and	r17, r17
    8838:	49 f0       	breq	.+18     	; 0x884c <pick_drop+0x1b8a>
		__ticks = 1;
    883a:	ce 01       	movw	r24, r28
    883c:	89 50       	subi	r24, 0x09	; 9
    883e:	9f 4f       	sbci	r25, 0xFF	; 255
    8840:	21 e0       	ldi	r18, 0x01	; 1
    8842:	30 e0       	ldi	r19, 0x00	; 0
    8844:	fc 01       	movw	r30, r24
    8846:	31 83       	std	Z+1, r19	; 0x01
    8848:	20 83       	st	Z, r18
    884a:	74 c0       	rjmp	.+232    	; 0x8934 <pick_drop+0x1c72>
	else if (__tmp > 65535)
    884c:	ce 01       	movw	r24, r28
    884e:	8d 50       	subi	r24, 0x0D	; 13
    8850:	9f 4f       	sbci	r25, 0xFF	; 255
    8852:	11 e0       	ldi	r17, 0x01	; 1
    8854:	fc 01       	movw	r30, r24
    8856:	60 81       	ld	r22, Z
    8858:	71 81       	ldd	r23, Z+1	; 0x01
    885a:	82 81       	ldd	r24, Z+2	; 0x02
    885c:	93 81       	ldd	r25, Z+3	; 0x03
    885e:	20 e0       	ldi	r18, 0x00	; 0
    8860:	3f ef       	ldi	r19, 0xFF	; 255
    8862:	4f e7       	ldi	r20, 0x7F	; 127
    8864:	57 e4       	ldi	r21, 0x47	; 71
    8866:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    886a:	18 16       	cp	r1, r24
    886c:	0c f0       	brlt	.+2      	; 0x8870 <pick_drop+0x1bae>
    886e:	10 e0       	ldi	r17, 0x00	; 0
    8870:	11 23       	and	r17, r17
    8872:	09 f4       	brne	.+2      	; 0x8876 <pick_drop+0x1bb4>
    8874:	4d c0       	rjmp	.+154    	; 0x8910 <pick_drop+0x1c4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8876:	ce 01       	movw	r24, r28
    8878:	81 51       	subi	r24, 0x11	; 17
    887a:	9f 4f       	sbci	r25, 0xFF	; 255
    887c:	fc 01       	movw	r30, r24
    887e:	60 81       	ld	r22, Z
    8880:	71 81       	ldd	r23, Z+1	; 0x01
    8882:	82 81       	ldd	r24, Z+2	; 0x02
    8884:	93 81       	ldd	r25, Z+3	; 0x03
    8886:	20 e0       	ldi	r18, 0x00	; 0
    8888:	30 e0       	ldi	r19, 0x00	; 0
    888a:	40 e2       	ldi	r20, 0x20	; 32
    888c:	51 e4       	ldi	r21, 0x41	; 65
    888e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8892:	dc 01       	movw	r26, r24
    8894:	cb 01       	movw	r24, r22
    8896:	8e 01       	movw	r16, r28
    8898:	09 50       	subi	r16, 0x09	; 9
    889a:	1f 4f       	sbci	r17, 0xFF	; 255
    889c:	bc 01       	movw	r22, r24
    889e:	cd 01       	movw	r24, r26
    88a0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    88a4:	dc 01       	movw	r26, r24
    88a6:	cb 01       	movw	r24, r22
    88a8:	f8 01       	movw	r30, r16
    88aa:	91 83       	std	Z+1, r25	; 0x01
    88ac:	80 83       	st	Z, r24
    88ae:	27 c0       	rjmp	.+78     	; 0x88fe <pick_drop+0x1c3c>
    88b0:	ce 01       	movw	r24, r28
    88b2:	87 50       	subi	r24, 0x07	; 7
    88b4:	9f 4f       	sbci	r25, 0xFF	; 255
    88b6:	20 e7       	ldi	r18, 0x70	; 112
    88b8:	31 e0       	ldi	r19, 0x01	; 1
    88ba:	fc 01       	movw	r30, r24
    88bc:	31 83       	std	Z+1, r19	; 0x01
    88be:	20 83       	st	Z, r18
    88c0:	ce 01       	movw	r24, r28
    88c2:	87 50       	subi	r24, 0x07	; 7
    88c4:	9f 4f       	sbci	r25, 0xFF	; 255
    88c6:	fc 01       	movw	r30, r24
    88c8:	80 81       	ld	r24, Z
    88ca:	91 81       	ldd	r25, Z+1	; 0x01
    88cc:	8c 01       	movw	r16, r24
    88ce:	c8 01       	movw	r24, r16
    88d0:	01 97       	sbiw	r24, 0x01	; 1
    88d2:	f1 f7       	brne	.-4      	; 0x88d0 <pick_drop+0x1c0e>
    88d4:	8c 01       	movw	r16, r24
    88d6:	ce 01       	movw	r24, r28
    88d8:	87 50       	subi	r24, 0x07	; 7
    88da:	9f 4f       	sbci	r25, 0xFF	; 255
    88dc:	fc 01       	movw	r30, r24
    88de:	11 83       	std	Z+1, r17	; 0x01
    88e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    88e2:	ce 01       	movw	r24, r28
    88e4:	89 50       	subi	r24, 0x09	; 9
    88e6:	9f 4f       	sbci	r25, 0xFF	; 255
    88e8:	9e 01       	movw	r18, r28
    88ea:	29 50       	subi	r18, 0x09	; 9
    88ec:	3f 4f       	sbci	r19, 0xFF	; 255
    88ee:	f9 01       	movw	r30, r18
    88f0:	20 81       	ld	r18, Z
    88f2:	31 81       	ldd	r19, Z+1	; 0x01
    88f4:	21 50       	subi	r18, 0x01	; 1
    88f6:	30 40       	sbci	r19, 0x00	; 0
    88f8:	fc 01       	movw	r30, r24
    88fa:	31 83       	std	Z+1, r19	; 0x01
    88fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    88fe:	ce 01       	movw	r24, r28
    8900:	89 50       	subi	r24, 0x09	; 9
    8902:	9f 4f       	sbci	r25, 0xFF	; 255
    8904:	fc 01       	movw	r30, r24
    8906:	80 81       	ld	r24, Z
    8908:	91 81       	ldd	r25, Z+1	; 0x01
    890a:	00 97       	sbiw	r24, 0x00	; 0
    890c:	89 f6       	brne	.-94     	; 0x88b0 <pick_drop+0x1bee>
    890e:	2f c0       	rjmp	.+94     	; 0x896e <pick_drop+0x1cac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8910:	8e 01       	movw	r16, r28
    8912:	09 50       	subi	r16, 0x09	; 9
    8914:	1f 4f       	sbci	r17, 0xFF	; 255
    8916:	ce 01       	movw	r24, r28
    8918:	8d 50       	subi	r24, 0x0D	; 13
    891a:	9f 4f       	sbci	r25, 0xFF	; 255
    891c:	fc 01       	movw	r30, r24
    891e:	60 81       	ld	r22, Z
    8920:	71 81       	ldd	r23, Z+1	; 0x01
    8922:	82 81       	ldd	r24, Z+2	; 0x02
    8924:	93 81       	ldd	r25, Z+3	; 0x03
    8926:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    892a:	dc 01       	movw	r26, r24
    892c:	cb 01       	movw	r24, r22
    892e:	f8 01       	movw	r30, r16
    8930:	91 83       	std	Z+1, r25	; 0x01
    8932:	80 83       	st	Z, r24
    8934:	ce 01       	movw	r24, r28
    8936:	85 50       	subi	r24, 0x05	; 5
    8938:	9f 4f       	sbci	r25, 0xFF	; 255
    893a:	9e 01       	movw	r18, r28
    893c:	29 50       	subi	r18, 0x09	; 9
    893e:	3f 4f       	sbci	r19, 0xFF	; 255
    8940:	f9 01       	movw	r30, r18
    8942:	20 81       	ld	r18, Z
    8944:	31 81       	ldd	r19, Z+1	; 0x01
    8946:	fc 01       	movw	r30, r24
    8948:	31 83       	std	Z+1, r19	; 0x01
    894a:	20 83       	st	Z, r18
    894c:	ce 01       	movw	r24, r28
    894e:	85 50       	subi	r24, 0x05	; 5
    8950:	9f 4f       	sbci	r25, 0xFF	; 255
    8952:	fc 01       	movw	r30, r24
    8954:	80 81       	ld	r24, Z
    8956:	91 81       	ldd	r25, Z+1	; 0x01
    8958:	8c 01       	movw	r16, r24
    895a:	c8 01       	movw	r24, r16
    895c:	01 97       	sbiw	r24, 0x01	; 1
    895e:	f1 f7       	brne	.-4      	; 0x895c <pick_drop+0x1c9a>
    8960:	8c 01       	movw	r16, r24
    8962:	ce 01       	movw	r24, r28
    8964:	85 50       	subi	r24, 0x05	; 5
    8966:	9f 4f       	sbci	r25, 0xFF	; 255
    8968:	fc 01       	movw	r30, r24
    896a:	11 83       	std	Z+1, r17	; 0x01
    896c:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    896e:	0e 94 56 12 	call	0x24ac	; 0x24ac <spl_left>
    8972:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
	}
	else if(pd=='6'){// 6X1
    8976:	ce 01       	movw	r24, r28
    8978:	8d 54       	subi	r24, 0x4D	; 77
    897a:	9e 4f       	sbci	r25, 0xFE	; 254
    897c:	fc 01       	movw	r30, r24
    897e:	80 81       	ld	r24, Z
    8980:	86 33       	cpi	r24, 0x36	; 54
    8982:	09 f0       	breq	.+2      	; 0x8986 <pick_drop+0x1cc4>
    8984:	20 c5       	rjmp	.+2624   	; 0x93c6 <pick_drop+0x2704>
		if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    8986:	80 91 65 03 	lds	r24, 0x0365
    898a:	90 91 66 03 	lds	r25, 0x0366
    898e:	01 97       	sbiw	r24, 0x01	; 1
    8990:	87 59       	subi	r24, 0x97	; 151
    8992:	9c 4f       	sbci	r25, 0xFC	; 252
    8994:	fc 01       	movw	r30, r24
    8996:	80 81       	ld	r24, Z
    8998:	8c 34       	cpi	r24, 0x4C	; 76
    899a:	61 f0       	breq	.+24     	; 0x89b4 <pick_drop+0x1cf2>
    899c:	80 91 65 03 	lds	r24, 0x0365
    89a0:	90 91 66 03 	lds	r25, 0x0366
    89a4:	01 97       	sbiw	r24, 0x01	; 1
    89a6:	87 59       	subi	r24, 0x97	; 151
    89a8:	9c 4f       	sbci	r25, 0xFC	; 252
    89aa:	fc 01       	movw	r30, r24
    89ac:	80 81       	ld	r24, Z
    89ae:	82 35       	cpi	r24, 0x52	; 82
    89b0:	09 f0       	breq	.+2      	; 0x89b4 <pick_drop+0x1cf2>
    89b2:	b0 c1       	rjmp	.+864    	; 0x8d14 <pick_drop+0x2052>
			forward_mm(20);
    89b4:	84 e1       	ldi	r24, 0x14	; 20
    89b6:	90 e0       	ldi	r25, 0x00	; 0
    89b8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    89bc:	9e 01       	movw	r18, r28
    89be:	23 50       	subi	r18, 0x03	; 3
    89c0:	3f 4f       	sbci	r19, 0xFF	; 255
    89c2:	80 e0       	ldi	r24, 0x00	; 0
    89c4:	90 e0       	ldi	r25, 0x00	; 0
    89c6:	a0 ea       	ldi	r26, 0xA0	; 160
    89c8:	b1 e4       	ldi	r27, 0x41	; 65
    89ca:	f9 01       	movw	r30, r18
    89cc:	80 83       	st	Z, r24
    89ce:	91 83       	std	Z+1, r25	; 0x01
    89d0:	a2 83       	std	Z+2, r26	; 0x02
    89d2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    89d4:	8e 01       	movw	r16, r28
    89d6:	0f 5f       	subi	r16, 0xFF	; 255
    89d8:	1e 4f       	sbci	r17, 0xFE	; 254
    89da:	ce 01       	movw	r24, r28
    89dc:	83 50       	subi	r24, 0x03	; 3
    89de:	9f 4f       	sbci	r25, 0xFF	; 255
    89e0:	fc 01       	movw	r30, r24
    89e2:	60 81       	ld	r22, Z
    89e4:	71 81       	ldd	r23, Z+1	; 0x01
    89e6:	82 81       	ldd	r24, Z+2	; 0x02
    89e8:	93 81       	ldd	r25, Z+3	; 0x03
    89ea:	26 e6       	ldi	r18, 0x66	; 102
    89ec:	36 e6       	ldi	r19, 0x66	; 102
    89ee:	46 e6       	ldi	r20, 0x66	; 102
    89f0:	55 e4       	ldi	r21, 0x45	; 69
    89f2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    89f6:	dc 01       	movw	r26, r24
    89f8:	cb 01       	movw	r24, r22
    89fa:	f8 01       	movw	r30, r16
    89fc:	80 83       	st	Z, r24
    89fe:	91 83       	std	Z+1, r25	; 0x01
    8a00:	a2 83       	std	Z+2, r26	; 0x02
    8a02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8a04:	ce 01       	movw	r24, r28
    8a06:	8f 5f       	subi	r24, 0xFF	; 255
    8a08:	9e 4f       	sbci	r25, 0xFE	; 254
    8a0a:	11 e0       	ldi	r17, 0x01	; 1
    8a0c:	fc 01       	movw	r30, r24
    8a0e:	60 81       	ld	r22, Z
    8a10:	71 81       	ldd	r23, Z+1	; 0x01
    8a12:	82 81       	ldd	r24, Z+2	; 0x02
    8a14:	93 81       	ldd	r25, Z+3	; 0x03
    8a16:	20 e0       	ldi	r18, 0x00	; 0
    8a18:	30 e0       	ldi	r19, 0x00	; 0
    8a1a:	40 e8       	ldi	r20, 0x80	; 128
    8a1c:	5f e3       	ldi	r21, 0x3F	; 63
    8a1e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8a22:	88 23       	and	r24, r24
    8a24:	0c f0       	brlt	.+2      	; 0x8a28 <pick_drop+0x1d66>
    8a26:	10 e0       	ldi	r17, 0x00	; 0
    8a28:	11 23       	and	r17, r17
    8a2a:	49 f0       	breq	.+18     	; 0x8a3e <pick_drop+0x1d7c>
		__ticks = 1;
    8a2c:	ce 01       	movw	r24, r28
    8a2e:	8b 5f       	subi	r24, 0xFB	; 251
    8a30:	9e 4f       	sbci	r25, 0xFE	; 254
    8a32:	21 e0       	ldi	r18, 0x01	; 1
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	fc 01       	movw	r30, r24
    8a38:	31 83       	std	Z+1, r19	; 0x01
    8a3a:	20 83       	st	Z, r18
    8a3c:	74 c0       	rjmp	.+232    	; 0x8b26 <pick_drop+0x1e64>
	else if (__tmp > 65535)
    8a3e:	ce 01       	movw	r24, r28
    8a40:	8f 5f       	subi	r24, 0xFF	; 255
    8a42:	9e 4f       	sbci	r25, 0xFE	; 254
    8a44:	11 e0       	ldi	r17, 0x01	; 1
    8a46:	fc 01       	movw	r30, r24
    8a48:	60 81       	ld	r22, Z
    8a4a:	71 81       	ldd	r23, Z+1	; 0x01
    8a4c:	82 81       	ldd	r24, Z+2	; 0x02
    8a4e:	93 81       	ldd	r25, Z+3	; 0x03
    8a50:	20 e0       	ldi	r18, 0x00	; 0
    8a52:	3f ef       	ldi	r19, 0xFF	; 255
    8a54:	4f e7       	ldi	r20, 0x7F	; 127
    8a56:	57 e4       	ldi	r21, 0x47	; 71
    8a58:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    8a5c:	18 16       	cp	r1, r24
    8a5e:	0c f0       	brlt	.+2      	; 0x8a62 <pick_drop+0x1da0>
    8a60:	10 e0       	ldi	r17, 0x00	; 0
    8a62:	11 23       	and	r17, r17
    8a64:	09 f4       	brne	.+2      	; 0x8a68 <pick_drop+0x1da6>
    8a66:	4d c0       	rjmp	.+154    	; 0x8b02 <pick_drop+0x1e40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8a68:	ce 01       	movw	r24, r28
    8a6a:	83 50       	subi	r24, 0x03	; 3
    8a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a6e:	fc 01       	movw	r30, r24
    8a70:	60 81       	ld	r22, Z
    8a72:	71 81       	ldd	r23, Z+1	; 0x01
    8a74:	82 81       	ldd	r24, Z+2	; 0x02
    8a76:	93 81       	ldd	r25, Z+3	; 0x03
    8a78:	20 e0       	ldi	r18, 0x00	; 0
    8a7a:	30 e0       	ldi	r19, 0x00	; 0
    8a7c:	40 e2       	ldi	r20, 0x20	; 32
    8a7e:	51 e4       	ldi	r21, 0x41	; 65
    8a80:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8a84:	dc 01       	movw	r26, r24
    8a86:	cb 01       	movw	r24, r22
    8a88:	8e 01       	movw	r16, r28
    8a8a:	0b 5f       	subi	r16, 0xFB	; 251
    8a8c:	1e 4f       	sbci	r17, 0xFE	; 254
    8a8e:	bc 01       	movw	r22, r24
    8a90:	cd 01       	movw	r24, r26
    8a92:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8a96:	dc 01       	movw	r26, r24
    8a98:	cb 01       	movw	r24, r22
    8a9a:	f8 01       	movw	r30, r16
    8a9c:	91 83       	std	Z+1, r25	; 0x01
    8a9e:	80 83       	st	Z, r24
    8aa0:	27 c0       	rjmp	.+78     	; 0x8af0 <pick_drop+0x1e2e>
    8aa2:	ce 01       	movw	r24, r28
    8aa4:	89 5f       	subi	r24, 0xF9	; 249
    8aa6:	9e 4f       	sbci	r25, 0xFE	; 254
    8aa8:	20 e7       	ldi	r18, 0x70	; 112
    8aaa:	31 e0       	ldi	r19, 0x01	; 1
    8aac:	fc 01       	movw	r30, r24
    8aae:	31 83       	std	Z+1, r19	; 0x01
    8ab0:	20 83       	st	Z, r18
    8ab2:	ce 01       	movw	r24, r28
    8ab4:	89 5f       	subi	r24, 0xF9	; 249
    8ab6:	9e 4f       	sbci	r25, 0xFE	; 254
    8ab8:	fc 01       	movw	r30, r24
    8aba:	80 81       	ld	r24, Z
    8abc:	91 81       	ldd	r25, Z+1	; 0x01
    8abe:	8c 01       	movw	r16, r24
    8ac0:	c8 01       	movw	r24, r16
    8ac2:	01 97       	sbiw	r24, 0x01	; 1
    8ac4:	f1 f7       	brne	.-4      	; 0x8ac2 <pick_drop+0x1e00>
    8ac6:	8c 01       	movw	r16, r24
    8ac8:	ce 01       	movw	r24, r28
    8aca:	89 5f       	subi	r24, 0xF9	; 249
    8acc:	9e 4f       	sbci	r25, 0xFE	; 254
    8ace:	fc 01       	movw	r30, r24
    8ad0:	11 83       	std	Z+1, r17	; 0x01
    8ad2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8ad4:	ce 01       	movw	r24, r28
    8ad6:	8b 5f       	subi	r24, 0xFB	; 251
    8ad8:	9e 4f       	sbci	r25, 0xFE	; 254
    8ada:	9e 01       	movw	r18, r28
    8adc:	2b 5f       	subi	r18, 0xFB	; 251
    8ade:	3e 4f       	sbci	r19, 0xFE	; 254
    8ae0:	f9 01       	movw	r30, r18
    8ae2:	20 81       	ld	r18, Z
    8ae4:	31 81       	ldd	r19, Z+1	; 0x01
    8ae6:	21 50       	subi	r18, 0x01	; 1
    8ae8:	30 40       	sbci	r19, 0x00	; 0
    8aea:	fc 01       	movw	r30, r24
    8aec:	31 83       	std	Z+1, r19	; 0x01
    8aee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8af0:	ce 01       	movw	r24, r28
    8af2:	8b 5f       	subi	r24, 0xFB	; 251
    8af4:	9e 4f       	sbci	r25, 0xFE	; 254
    8af6:	fc 01       	movw	r30, r24
    8af8:	80 81       	ld	r24, Z
    8afa:	91 81       	ldd	r25, Z+1	; 0x01
    8afc:	00 97       	sbiw	r24, 0x00	; 0
    8afe:	89 f6       	brne	.-94     	; 0x8aa2 <pick_drop+0x1de0>
    8b00:	2f c0       	rjmp	.+94     	; 0x8b60 <pick_drop+0x1e9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8b02:	8e 01       	movw	r16, r28
    8b04:	0b 5f       	subi	r16, 0xFB	; 251
    8b06:	1e 4f       	sbci	r17, 0xFE	; 254
    8b08:	ce 01       	movw	r24, r28
    8b0a:	8f 5f       	subi	r24, 0xFF	; 255
    8b0c:	9e 4f       	sbci	r25, 0xFE	; 254
    8b0e:	fc 01       	movw	r30, r24
    8b10:	60 81       	ld	r22, Z
    8b12:	71 81       	ldd	r23, Z+1	; 0x01
    8b14:	82 81       	ldd	r24, Z+2	; 0x02
    8b16:	93 81       	ldd	r25, Z+3	; 0x03
    8b18:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8b1c:	dc 01       	movw	r26, r24
    8b1e:	cb 01       	movw	r24, r22
    8b20:	f8 01       	movw	r30, r16
    8b22:	91 83       	std	Z+1, r25	; 0x01
    8b24:	80 83       	st	Z, r24
    8b26:	ce 01       	movw	r24, r28
    8b28:	87 5f       	subi	r24, 0xF7	; 247
    8b2a:	9e 4f       	sbci	r25, 0xFE	; 254
    8b2c:	9e 01       	movw	r18, r28
    8b2e:	2b 5f       	subi	r18, 0xFB	; 251
    8b30:	3e 4f       	sbci	r19, 0xFE	; 254
    8b32:	f9 01       	movw	r30, r18
    8b34:	20 81       	ld	r18, Z
    8b36:	31 81       	ldd	r19, Z+1	; 0x01
    8b38:	fc 01       	movw	r30, r24
    8b3a:	31 83       	std	Z+1, r19	; 0x01
    8b3c:	20 83       	st	Z, r18
    8b3e:	ce 01       	movw	r24, r28
    8b40:	87 5f       	subi	r24, 0xF7	; 247
    8b42:	9e 4f       	sbci	r25, 0xFE	; 254
    8b44:	fc 01       	movw	r30, r24
    8b46:	80 81       	ld	r24, Z
    8b48:	91 81       	ldd	r25, Z+1	; 0x01
    8b4a:	8c 01       	movw	r16, r24
    8b4c:	c8 01       	movw	r24, r16
    8b4e:	01 97       	sbiw	r24, 0x01	; 1
    8b50:	f1 f7       	brne	.-4      	; 0x8b4e <pick_drop+0x1e8c>
    8b52:	8c 01       	movw	r16, r24
    8b54:	ce 01       	movw	r24, r28
    8b56:	87 5f       	subi	r24, 0xF7	; 247
    8b58:	9e 4f       	sbci	r25, 0xFE	; 254
    8b5a:	fc 01       	movw	r30, r24
    8b5c:	11 83       	std	Z+1, r17	; 0x01
    8b5e:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    8b60:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    8b64:	9e 01       	movw	r18, r28
    8b66:	25 5f       	subi	r18, 0xF5	; 245
    8b68:	3e 4f       	sbci	r19, 0xFE	; 254
    8b6a:	80 e0       	ldi	r24, 0x00	; 0
    8b6c:	90 e0       	ldi	r25, 0x00	; 0
    8b6e:	a0 e2       	ldi	r26, 0x20	; 32
    8b70:	b1 e4       	ldi	r27, 0x41	; 65
    8b72:	f9 01       	movw	r30, r18
    8b74:	80 83       	st	Z, r24
    8b76:	91 83       	std	Z+1, r25	; 0x01
    8b78:	a2 83       	std	Z+2, r26	; 0x02
    8b7a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8b7c:	8e 01       	movw	r16, r28
    8b7e:	01 5f       	subi	r16, 0xF1	; 241
    8b80:	1e 4f       	sbci	r17, 0xFE	; 254
    8b82:	ce 01       	movw	r24, r28
    8b84:	85 5f       	subi	r24, 0xF5	; 245
    8b86:	9e 4f       	sbci	r25, 0xFE	; 254
    8b88:	fc 01       	movw	r30, r24
    8b8a:	60 81       	ld	r22, Z
    8b8c:	71 81       	ldd	r23, Z+1	; 0x01
    8b8e:	82 81       	ldd	r24, Z+2	; 0x02
    8b90:	93 81       	ldd	r25, Z+3	; 0x03
    8b92:	26 e6       	ldi	r18, 0x66	; 102
    8b94:	36 e6       	ldi	r19, 0x66	; 102
    8b96:	46 e6       	ldi	r20, 0x66	; 102
    8b98:	55 e4       	ldi	r21, 0x45	; 69
    8b9a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8b9e:	dc 01       	movw	r26, r24
    8ba0:	cb 01       	movw	r24, r22
    8ba2:	f8 01       	movw	r30, r16
    8ba4:	80 83       	st	Z, r24
    8ba6:	91 83       	std	Z+1, r25	; 0x01
    8ba8:	a2 83       	std	Z+2, r26	; 0x02
    8baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8bac:	ce 01       	movw	r24, r28
    8bae:	81 5f       	subi	r24, 0xF1	; 241
    8bb0:	9e 4f       	sbci	r25, 0xFE	; 254
    8bb2:	11 e0       	ldi	r17, 0x01	; 1
    8bb4:	fc 01       	movw	r30, r24
    8bb6:	60 81       	ld	r22, Z
    8bb8:	71 81       	ldd	r23, Z+1	; 0x01
    8bba:	82 81       	ldd	r24, Z+2	; 0x02
    8bbc:	93 81       	ldd	r25, Z+3	; 0x03
    8bbe:	20 e0       	ldi	r18, 0x00	; 0
    8bc0:	30 e0       	ldi	r19, 0x00	; 0
    8bc2:	40 e8       	ldi	r20, 0x80	; 128
    8bc4:	5f e3       	ldi	r21, 0x3F	; 63
    8bc6:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8bca:	88 23       	and	r24, r24
    8bcc:	0c f0       	brlt	.+2      	; 0x8bd0 <pick_drop+0x1f0e>
    8bce:	10 e0       	ldi	r17, 0x00	; 0
    8bd0:	11 23       	and	r17, r17
    8bd2:	49 f0       	breq	.+18     	; 0x8be6 <pick_drop+0x1f24>
		__ticks = 1;
    8bd4:	ce 01       	movw	r24, r28
    8bd6:	8d 5e       	subi	r24, 0xED	; 237
    8bd8:	9e 4f       	sbci	r25, 0xFE	; 254
    8bda:	21 e0       	ldi	r18, 0x01	; 1
    8bdc:	30 e0       	ldi	r19, 0x00	; 0
    8bde:	fc 01       	movw	r30, r24
    8be0:	31 83       	std	Z+1, r19	; 0x01
    8be2:	20 83       	st	Z, r18
    8be4:	74 c0       	rjmp	.+232    	; 0x8cce <pick_drop+0x200c>
	else if (__tmp > 65535)
    8be6:	ce 01       	movw	r24, r28
    8be8:	81 5f       	subi	r24, 0xF1	; 241
    8bea:	9e 4f       	sbci	r25, 0xFE	; 254
    8bec:	11 e0       	ldi	r17, 0x01	; 1
    8bee:	fc 01       	movw	r30, r24
    8bf0:	60 81       	ld	r22, Z
    8bf2:	71 81       	ldd	r23, Z+1	; 0x01
    8bf4:	82 81       	ldd	r24, Z+2	; 0x02
    8bf6:	93 81       	ldd	r25, Z+3	; 0x03
    8bf8:	20 e0       	ldi	r18, 0x00	; 0
    8bfa:	3f ef       	ldi	r19, 0xFF	; 255
    8bfc:	4f e7       	ldi	r20, 0x7F	; 127
    8bfe:	57 e4       	ldi	r21, 0x47	; 71
    8c00:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    8c04:	18 16       	cp	r1, r24
    8c06:	0c f0       	brlt	.+2      	; 0x8c0a <pick_drop+0x1f48>
    8c08:	10 e0       	ldi	r17, 0x00	; 0
    8c0a:	11 23       	and	r17, r17
    8c0c:	09 f4       	brne	.+2      	; 0x8c10 <pick_drop+0x1f4e>
    8c0e:	4d c0       	rjmp	.+154    	; 0x8caa <pick_drop+0x1fe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8c10:	ce 01       	movw	r24, r28
    8c12:	85 5f       	subi	r24, 0xF5	; 245
    8c14:	9e 4f       	sbci	r25, 0xFE	; 254
    8c16:	fc 01       	movw	r30, r24
    8c18:	60 81       	ld	r22, Z
    8c1a:	71 81       	ldd	r23, Z+1	; 0x01
    8c1c:	82 81       	ldd	r24, Z+2	; 0x02
    8c1e:	93 81       	ldd	r25, Z+3	; 0x03
    8c20:	20 e0       	ldi	r18, 0x00	; 0
    8c22:	30 e0       	ldi	r19, 0x00	; 0
    8c24:	40 e2       	ldi	r20, 0x20	; 32
    8c26:	51 e4       	ldi	r21, 0x41	; 65
    8c28:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8c2c:	dc 01       	movw	r26, r24
    8c2e:	cb 01       	movw	r24, r22
    8c30:	8e 01       	movw	r16, r28
    8c32:	0d 5e       	subi	r16, 0xED	; 237
    8c34:	1e 4f       	sbci	r17, 0xFE	; 254
    8c36:	bc 01       	movw	r22, r24
    8c38:	cd 01       	movw	r24, r26
    8c3a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8c3e:	dc 01       	movw	r26, r24
    8c40:	cb 01       	movw	r24, r22
    8c42:	f8 01       	movw	r30, r16
    8c44:	91 83       	std	Z+1, r25	; 0x01
    8c46:	80 83       	st	Z, r24
    8c48:	27 c0       	rjmp	.+78     	; 0x8c98 <pick_drop+0x1fd6>
    8c4a:	ce 01       	movw	r24, r28
    8c4c:	8b 5e       	subi	r24, 0xEB	; 235
    8c4e:	9e 4f       	sbci	r25, 0xFE	; 254
    8c50:	20 e7       	ldi	r18, 0x70	; 112
    8c52:	31 e0       	ldi	r19, 0x01	; 1
    8c54:	fc 01       	movw	r30, r24
    8c56:	31 83       	std	Z+1, r19	; 0x01
    8c58:	20 83       	st	Z, r18
    8c5a:	ce 01       	movw	r24, r28
    8c5c:	8b 5e       	subi	r24, 0xEB	; 235
    8c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    8c60:	fc 01       	movw	r30, r24
    8c62:	80 81       	ld	r24, Z
    8c64:	91 81       	ldd	r25, Z+1	; 0x01
    8c66:	8c 01       	movw	r16, r24
    8c68:	c8 01       	movw	r24, r16
    8c6a:	01 97       	sbiw	r24, 0x01	; 1
    8c6c:	f1 f7       	brne	.-4      	; 0x8c6a <pick_drop+0x1fa8>
    8c6e:	8c 01       	movw	r16, r24
    8c70:	ce 01       	movw	r24, r28
    8c72:	8b 5e       	subi	r24, 0xEB	; 235
    8c74:	9e 4f       	sbci	r25, 0xFE	; 254
    8c76:	fc 01       	movw	r30, r24
    8c78:	11 83       	std	Z+1, r17	; 0x01
    8c7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8c7c:	ce 01       	movw	r24, r28
    8c7e:	8d 5e       	subi	r24, 0xED	; 237
    8c80:	9e 4f       	sbci	r25, 0xFE	; 254
    8c82:	9e 01       	movw	r18, r28
    8c84:	2d 5e       	subi	r18, 0xED	; 237
    8c86:	3e 4f       	sbci	r19, 0xFE	; 254
    8c88:	f9 01       	movw	r30, r18
    8c8a:	20 81       	ld	r18, Z
    8c8c:	31 81       	ldd	r19, Z+1	; 0x01
    8c8e:	21 50       	subi	r18, 0x01	; 1
    8c90:	30 40       	sbci	r19, 0x00	; 0
    8c92:	fc 01       	movw	r30, r24
    8c94:	31 83       	std	Z+1, r19	; 0x01
    8c96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8c98:	ce 01       	movw	r24, r28
    8c9a:	8d 5e       	subi	r24, 0xED	; 237
    8c9c:	9e 4f       	sbci	r25, 0xFE	; 254
    8c9e:	fc 01       	movw	r30, r24
    8ca0:	80 81       	ld	r24, Z
    8ca2:	91 81       	ldd	r25, Z+1	; 0x01
    8ca4:	00 97       	sbiw	r24, 0x00	; 0
    8ca6:	89 f6       	brne	.-94     	; 0x8c4a <pick_drop+0x1f88>
    8ca8:	2f c0       	rjmp	.+94     	; 0x8d08 <pick_drop+0x2046>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8caa:	8e 01       	movw	r16, r28
    8cac:	0d 5e       	subi	r16, 0xED	; 237
    8cae:	1e 4f       	sbci	r17, 0xFE	; 254
    8cb0:	ce 01       	movw	r24, r28
    8cb2:	81 5f       	subi	r24, 0xF1	; 241
    8cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    8cb6:	fc 01       	movw	r30, r24
    8cb8:	60 81       	ld	r22, Z
    8cba:	71 81       	ldd	r23, Z+1	; 0x01
    8cbc:	82 81       	ldd	r24, Z+2	; 0x02
    8cbe:	93 81       	ldd	r25, Z+3	; 0x03
    8cc0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8cc4:	dc 01       	movw	r26, r24
    8cc6:	cb 01       	movw	r24, r22
    8cc8:	f8 01       	movw	r30, r16
    8cca:	91 83       	std	Z+1, r25	; 0x01
    8ccc:	80 83       	st	Z, r24
    8cce:	ce 01       	movw	r24, r28
    8cd0:	89 5e       	subi	r24, 0xE9	; 233
    8cd2:	9e 4f       	sbci	r25, 0xFE	; 254
    8cd4:	9e 01       	movw	r18, r28
    8cd6:	2d 5e       	subi	r18, 0xED	; 237
    8cd8:	3e 4f       	sbci	r19, 0xFE	; 254
    8cda:	f9 01       	movw	r30, r18
    8cdc:	20 81       	ld	r18, Z
    8cde:	31 81       	ldd	r19, Z+1	; 0x01
    8ce0:	fc 01       	movw	r30, r24
    8ce2:	31 83       	std	Z+1, r19	; 0x01
    8ce4:	20 83       	st	Z, r18
    8ce6:	ce 01       	movw	r24, r28
    8ce8:	89 5e       	subi	r24, 0xE9	; 233
    8cea:	9e 4f       	sbci	r25, 0xFE	; 254
    8cec:	fc 01       	movw	r30, r24
    8cee:	80 81       	ld	r24, Z
    8cf0:	91 81       	ldd	r25, Z+1	; 0x01
    8cf2:	8c 01       	movw	r16, r24
    8cf4:	c8 01       	movw	r24, r16
    8cf6:	01 97       	sbiw	r24, 0x01	; 1
    8cf8:	f1 f7       	brne	.-4      	; 0x8cf6 <pick_drop+0x2034>
    8cfa:	8c 01       	movw	r16, r24
    8cfc:	ce 01       	movw	r24, r28
    8cfe:	89 5e       	subi	r24, 0xE9	; 233
    8d00:	9e 4f       	sbci	r25, 0xFE	; 254
    8d02:	fc 01       	movw	r30, r24
    8d04:	11 83       	std	Z+1, r17	; 0x01
    8d06:	00 83       	st	Z, r16
			_delay_ms(10);
			back_mm(20);
    8d08:	84 e1       	ldi	r24, 0x14	; 20
    8d0a:	90 e0       	ldi	r25, 0x00	; 0
    8d0c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8d10:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <pick_drop+0x3300>
		} 
		else{
			forward_mm(35);
    8d14:	83 e2       	ldi	r24, 0x23	; 35
    8d16:	90 e0       	ldi	r25, 0x00	; 0
    8d18:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    8d1c:	9e 01       	movw	r18, r28
    8d1e:	27 5e       	subi	r18, 0xE7	; 231
    8d20:	3e 4f       	sbci	r19, 0xFE	; 254
    8d22:	80 e0       	ldi	r24, 0x00	; 0
    8d24:	90 e0       	ldi	r25, 0x00	; 0
    8d26:	a0 ea       	ldi	r26, 0xA0	; 160
    8d28:	b1 e4       	ldi	r27, 0x41	; 65
    8d2a:	f9 01       	movw	r30, r18
    8d2c:	80 83       	st	Z, r24
    8d2e:	91 83       	std	Z+1, r25	; 0x01
    8d30:	a2 83       	std	Z+2, r26	; 0x02
    8d32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8d34:	8e 01       	movw	r16, r28
    8d36:	03 5e       	subi	r16, 0xE3	; 227
    8d38:	1e 4f       	sbci	r17, 0xFE	; 254
    8d3a:	ce 01       	movw	r24, r28
    8d3c:	87 5e       	subi	r24, 0xE7	; 231
    8d3e:	9e 4f       	sbci	r25, 0xFE	; 254
    8d40:	fc 01       	movw	r30, r24
    8d42:	60 81       	ld	r22, Z
    8d44:	71 81       	ldd	r23, Z+1	; 0x01
    8d46:	82 81       	ldd	r24, Z+2	; 0x02
    8d48:	93 81       	ldd	r25, Z+3	; 0x03
    8d4a:	26 e6       	ldi	r18, 0x66	; 102
    8d4c:	36 e6       	ldi	r19, 0x66	; 102
    8d4e:	46 e6       	ldi	r20, 0x66	; 102
    8d50:	55 e4       	ldi	r21, 0x45	; 69
    8d52:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8d56:	dc 01       	movw	r26, r24
    8d58:	cb 01       	movw	r24, r22
    8d5a:	f8 01       	movw	r30, r16
    8d5c:	80 83       	st	Z, r24
    8d5e:	91 83       	std	Z+1, r25	; 0x01
    8d60:	a2 83       	std	Z+2, r26	; 0x02
    8d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8d64:	ce 01       	movw	r24, r28
    8d66:	83 5e       	subi	r24, 0xE3	; 227
    8d68:	9e 4f       	sbci	r25, 0xFE	; 254
    8d6a:	11 e0       	ldi	r17, 0x01	; 1
    8d6c:	fc 01       	movw	r30, r24
    8d6e:	60 81       	ld	r22, Z
    8d70:	71 81       	ldd	r23, Z+1	; 0x01
    8d72:	82 81       	ldd	r24, Z+2	; 0x02
    8d74:	93 81       	ldd	r25, Z+3	; 0x03
    8d76:	20 e0       	ldi	r18, 0x00	; 0
    8d78:	30 e0       	ldi	r19, 0x00	; 0
    8d7a:	40 e8       	ldi	r20, 0x80	; 128
    8d7c:	5f e3       	ldi	r21, 0x3F	; 63
    8d7e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8d82:	88 23       	and	r24, r24
    8d84:	0c f0       	brlt	.+2      	; 0x8d88 <pick_drop+0x20c6>
    8d86:	10 e0       	ldi	r17, 0x00	; 0
    8d88:	11 23       	and	r17, r17
    8d8a:	49 f0       	breq	.+18     	; 0x8d9e <pick_drop+0x20dc>
		__ticks = 1;
    8d8c:	ce 01       	movw	r24, r28
    8d8e:	8f 5d       	subi	r24, 0xDF	; 223
    8d90:	9e 4f       	sbci	r25, 0xFE	; 254
    8d92:	21 e0       	ldi	r18, 0x01	; 1
    8d94:	30 e0       	ldi	r19, 0x00	; 0
    8d96:	fc 01       	movw	r30, r24
    8d98:	31 83       	std	Z+1, r19	; 0x01
    8d9a:	20 83       	st	Z, r18
    8d9c:	74 c0       	rjmp	.+232    	; 0x8e86 <pick_drop+0x21c4>
	else if (__tmp > 65535)
    8d9e:	ce 01       	movw	r24, r28
    8da0:	83 5e       	subi	r24, 0xE3	; 227
    8da2:	9e 4f       	sbci	r25, 0xFE	; 254
    8da4:	11 e0       	ldi	r17, 0x01	; 1
    8da6:	fc 01       	movw	r30, r24
    8da8:	60 81       	ld	r22, Z
    8daa:	71 81       	ldd	r23, Z+1	; 0x01
    8dac:	82 81       	ldd	r24, Z+2	; 0x02
    8dae:	93 81       	ldd	r25, Z+3	; 0x03
    8db0:	20 e0       	ldi	r18, 0x00	; 0
    8db2:	3f ef       	ldi	r19, 0xFF	; 255
    8db4:	4f e7       	ldi	r20, 0x7F	; 127
    8db6:	57 e4       	ldi	r21, 0x47	; 71
    8db8:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    8dbc:	18 16       	cp	r1, r24
    8dbe:	0c f0       	brlt	.+2      	; 0x8dc2 <pick_drop+0x2100>
    8dc0:	10 e0       	ldi	r17, 0x00	; 0
    8dc2:	11 23       	and	r17, r17
    8dc4:	09 f4       	brne	.+2      	; 0x8dc8 <pick_drop+0x2106>
    8dc6:	4d c0       	rjmp	.+154    	; 0x8e62 <pick_drop+0x21a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8dc8:	ce 01       	movw	r24, r28
    8dca:	87 5e       	subi	r24, 0xE7	; 231
    8dcc:	9e 4f       	sbci	r25, 0xFE	; 254
    8dce:	fc 01       	movw	r30, r24
    8dd0:	60 81       	ld	r22, Z
    8dd2:	71 81       	ldd	r23, Z+1	; 0x01
    8dd4:	82 81       	ldd	r24, Z+2	; 0x02
    8dd6:	93 81       	ldd	r25, Z+3	; 0x03
    8dd8:	20 e0       	ldi	r18, 0x00	; 0
    8dda:	30 e0       	ldi	r19, 0x00	; 0
    8ddc:	40 e2       	ldi	r20, 0x20	; 32
    8dde:	51 e4       	ldi	r21, 0x41	; 65
    8de0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8de4:	dc 01       	movw	r26, r24
    8de6:	cb 01       	movw	r24, r22
    8de8:	8e 01       	movw	r16, r28
    8dea:	0f 5d       	subi	r16, 0xDF	; 223
    8dec:	1e 4f       	sbci	r17, 0xFE	; 254
    8dee:	bc 01       	movw	r22, r24
    8df0:	cd 01       	movw	r24, r26
    8df2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8df6:	dc 01       	movw	r26, r24
    8df8:	cb 01       	movw	r24, r22
    8dfa:	f8 01       	movw	r30, r16
    8dfc:	91 83       	std	Z+1, r25	; 0x01
    8dfe:	80 83       	st	Z, r24
    8e00:	27 c0       	rjmp	.+78     	; 0x8e50 <pick_drop+0x218e>
    8e02:	ce 01       	movw	r24, r28
    8e04:	8d 5d       	subi	r24, 0xDD	; 221
    8e06:	9e 4f       	sbci	r25, 0xFE	; 254
    8e08:	20 e7       	ldi	r18, 0x70	; 112
    8e0a:	31 e0       	ldi	r19, 0x01	; 1
    8e0c:	fc 01       	movw	r30, r24
    8e0e:	31 83       	std	Z+1, r19	; 0x01
    8e10:	20 83       	st	Z, r18
    8e12:	ce 01       	movw	r24, r28
    8e14:	8d 5d       	subi	r24, 0xDD	; 221
    8e16:	9e 4f       	sbci	r25, 0xFE	; 254
    8e18:	fc 01       	movw	r30, r24
    8e1a:	80 81       	ld	r24, Z
    8e1c:	91 81       	ldd	r25, Z+1	; 0x01
    8e1e:	8c 01       	movw	r16, r24
    8e20:	c8 01       	movw	r24, r16
    8e22:	01 97       	sbiw	r24, 0x01	; 1
    8e24:	f1 f7       	brne	.-4      	; 0x8e22 <pick_drop+0x2160>
    8e26:	8c 01       	movw	r16, r24
    8e28:	ce 01       	movw	r24, r28
    8e2a:	8d 5d       	subi	r24, 0xDD	; 221
    8e2c:	9e 4f       	sbci	r25, 0xFE	; 254
    8e2e:	fc 01       	movw	r30, r24
    8e30:	11 83       	std	Z+1, r17	; 0x01
    8e32:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8e34:	ce 01       	movw	r24, r28
    8e36:	8f 5d       	subi	r24, 0xDF	; 223
    8e38:	9e 4f       	sbci	r25, 0xFE	; 254
    8e3a:	9e 01       	movw	r18, r28
    8e3c:	2f 5d       	subi	r18, 0xDF	; 223
    8e3e:	3e 4f       	sbci	r19, 0xFE	; 254
    8e40:	f9 01       	movw	r30, r18
    8e42:	20 81       	ld	r18, Z
    8e44:	31 81       	ldd	r19, Z+1	; 0x01
    8e46:	21 50       	subi	r18, 0x01	; 1
    8e48:	30 40       	sbci	r19, 0x00	; 0
    8e4a:	fc 01       	movw	r30, r24
    8e4c:	31 83       	std	Z+1, r19	; 0x01
    8e4e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8e50:	ce 01       	movw	r24, r28
    8e52:	8f 5d       	subi	r24, 0xDF	; 223
    8e54:	9e 4f       	sbci	r25, 0xFE	; 254
    8e56:	fc 01       	movw	r30, r24
    8e58:	80 81       	ld	r24, Z
    8e5a:	91 81       	ldd	r25, Z+1	; 0x01
    8e5c:	00 97       	sbiw	r24, 0x00	; 0
    8e5e:	89 f6       	brne	.-94     	; 0x8e02 <pick_drop+0x2140>
    8e60:	2f c0       	rjmp	.+94     	; 0x8ec0 <pick_drop+0x21fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8e62:	8e 01       	movw	r16, r28
    8e64:	0f 5d       	subi	r16, 0xDF	; 223
    8e66:	1e 4f       	sbci	r17, 0xFE	; 254
    8e68:	ce 01       	movw	r24, r28
    8e6a:	83 5e       	subi	r24, 0xE3	; 227
    8e6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8e6e:	fc 01       	movw	r30, r24
    8e70:	60 81       	ld	r22, Z
    8e72:	71 81       	ldd	r23, Z+1	; 0x01
    8e74:	82 81       	ldd	r24, Z+2	; 0x02
    8e76:	93 81       	ldd	r25, Z+3	; 0x03
    8e78:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8e7c:	dc 01       	movw	r26, r24
    8e7e:	cb 01       	movw	r24, r22
    8e80:	f8 01       	movw	r30, r16
    8e82:	91 83       	std	Z+1, r25	; 0x01
    8e84:	80 83       	st	Z, r24
    8e86:	ce 01       	movw	r24, r28
    8e88:	8b 5d       	subi	r24, 0xDB	; 219
    8e8a:	9e 4f       	sbci	r25, 0xFE	; 254
    8e8c:	9e 01       	movw	r18, r28
    8e8e:	2f 5d       	subi	r18, 0xDF	; 223
    8e90:	3e 4f       	sbci	r19, 0xFE	; 254
    8e92:	f9 01       	movw	r30, r18
    8e94:	20 81       	ld	r18, Z
    8e96:	31 81       	ldd	r19, Z+1	; 0x01
    8e98:	fc 01       	movw	r30, r24
    8e9a:	31 83       	std	Z+1, r19	; 0x01
    8e9c:	20 83       	st	Z, r18
    8e9e:	ce 01       	movw	r24, r28
    8ea0:	8b 5d       	subi	r24, 0xDB	; 219
    8ea2:	9e 4f       	sbci	r25, 0xFE	; 254
    8ea4:	fc 01       	movw	r30, r24
    8ea6:	80 81       	ld	r24, Z
    8ea8:	91 81       	ldd	r25, Z+1	; 0x01
    8eaa:	8c 01       	movw	r16, r24
    8eac:	c8 01       	movw	r24, r16
    8eae:	01 97       	sbiw	r24, 0x01	; 1
    8eb0:	f1 f7       	brne	.-4      	; 0x8eae <pick_drop+0x21ec>
    8eb2:	8c 01       	movw	r16, r24
    8eb4:	ce 01       	movw	r24, r28
    8eb6:	8b 5d       	subi	r24, 0xDB	; 219
    8eb8:	9e 4f       	sbci	r25, 0xFE	; 254
    8eba:	fc 01       	movw	r30, r24
    8ebc:	11 83       	std	Z+1, r17	; 0x01
    8ebe:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    8ec0:	0e 94 56 12 	call	0x24ac	; 0x24ac <spl_left>
			front();
    8ec4:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    8ec8:	9e 01       	movw	r18, r28
    8eca:	29 5d       	subi	r18, 0xD9	; 217
    8ecc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ece:	80 e0       	ldi	r24, 0x00	; 0
    8ed0:	90 e0       	ldi	r25, 0x00	; 0
    8ed2:	a8 ec       	ldi	r26, 0xC8	; 200
    8ed4:	b2 e4       	ldi	r27, 0x42	; 66
    8ed6:	f9 01       	movw	r30, r18
    8ed8:	80 83       	st	Z, r24
    8eda:	91 83       	std	Z+1, r25	; 0x01
    8edc:	a2 83       	std	Z+2, r26	; 0x02
    8ede:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8ee0:	8e 01       	movw	r16, r28
    8ee2:	05 5d       	subi	r16, 0xD5	; 213
    8ee4:	1e 4f       	sbci	r17, 0xFE	; 254
    8ee6:	ce 01       	movw	r24, r28
    8ee8:	89 5d       	subi	r24, 0xD9	; 217
    8eea:	9e 4f       	sbci	r25, 0xFE	; 254
    8eec:	fc 01       	movw	r30, r24
    8eee:	60 81       	ld	r22, Z
    8ef0:	71 81       	ldd	r23, Z+1	; 0x01
    8ef2:	82 81       	ldd	r24, Z+2	; 0x02
    8ef4:	93 81       	ldd	r25, Z+3	; 0x03
    8ef6:	26 e6       	ldi	r18, 0x66	; 102
    8ef8:	36 e6       	ldi	r19, 0x66	; 102
    8efa:	46 e6       	ldi	r20, 0x66	; 102
    8efc:	55 e4       	ldi	r21, 0x45	; 69
    8efe:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8f02:	dc 01       	movw	r26, r24
    8f04:	cb 01       	movw	r24, r22
    8f06:	f8 01       	movw	r30, r16
    8f08:	80 83       	st	Z, r24
    8f0a:	91 83       	std	Z+1, r25	; 0x01
    8f0c:	a2 83       	std	Z+2, r26	; 0x02
    8f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8f10:	ce 01       	movw	r24, r28
    8f12:	85 5d       	subi	r24, 0xD5	; 213
    8f14:	9e 4f       	sbci	r25, 0xFE	; 254
    8f16:	11 e0       	ldi	r17, 0x01	; 1
    8f18:	fc 01       	movw	r30, r24
    8f1a:	60 81       	ld	r22, Z
    8f1c:	71 81       	ldd	r23, Z+1	; 0x01
    8f1e:	82 81       	ldd	r24, Z+2	; 0x02
    8f20:	93 81       	ldd	r25, Z+3	; 0x03
    8f22:	20 e0       	ldi	r18, 0x00	; 0
    8f24:	30 e0       	ldi	r19, 0x00	; 0
    8f26:	40 e8       	ldi	r20, 0x80	; 128
    8f28:	5f e3       	ldi	r21, 0x3F	; 63
    8f2a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    8f2e:	88 23       	and	r24, r24
    8f30:	0c f0       	brlt	.+2      	; 0x8f34 <pick_drop+0x2272>
    8f32:	10 e0       	ldi	r17, 0x00	; 0
    8f34:	11 23       	and	r17, r17
    8f36:	49 f0       	breq	.+18     	; 0x8f4a <pick_drop+0x2288>
		__ticks = 1;
    8f38:	ce 01       	movw	r24, r28
    8f3a:	81 5d       	subi	r24, 0xD1	; 209
    8f3c:	9e 4f       	sbci	r25, 0xFE	; 254
    8f3e:	21 e0       	ldi	r18, 0x01	; 1
    8f40:	30 e0       	ldi	r19, 0x00	; 0
    8f42:	fc 01       	movw	r30, r24
    8f44:	31 83       	std	Z+1, r19	; 0x01
    8f46:	20 83       	st	Z, r18
    8f48:	74 c0       	rjmp	.+232    	; 0x9032 <pick_drop+0x2370>
	else if (__tmp > 65535)
    8f4a:	ce 01       	movw	r24, r28
    8f4c:	85 5d       	subi	r24, 0xD5	; 213
    8f4e:	9e 4f       	sbci	r25, 0xFE	; 254
    8f50:	11 e0       	ldi	r17, 0x01	; 1
    8f52:	fc 01       	movw	r30, r24
    8f54:	60 81       	ld	r22, Z
    8f56:	71 81       	ldd	r23, Z+1	; 0x01
    8f58:	82 81       	ldd	r24, Z+2	; 0x02
    8f5a:	93 81       	ldd	r25, Z+3	; 0x03
    8f5c:	20 e0       	ldi	r18, 0x00	; 0
    8f5e:	3f ef       	ldi	r19, 0xFF	; 255
    8f60:	4f e7       	ldi	r20, 0x7F	; 127
    8f62:	57 e4       	ldi	r21, 0x47	; 71
    8f64:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    8f68:	18 16       	cp	r1, r24
    8f6a:	0c f0       	brlt	.+2      	; 0x8f6e <pick_drop+0x22ac>
    8f6c:	10 e0       	ldi	r17, 0x00	; 0
    8f6e:	11 23       	and	r17, r17
    8f70:	09 f4       	brne	.+2      	; 0x8f74 <pick_drop+0x22b2>
    8f72:	4d c0       	rjmp	.+154    	; 0x900e <pick_drop+0x234c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8f74:	ce 01       	movw	r24, r28
    8f76:	89 5d       	subi	r24, 0xD9	; 217
    8f78:	9e 4f       	sbci	r25, 0xFE	; 254
    8f7a:	fc 01       	movw	r30, r24
    8f7c:	60 81       	ld	r22, Z
    8f7e:	71 81       	ldd	r23, Z+1	; 0x01
    8f80:	82 81       	ldd	r24, Z+2	; 0x02
    8f82:	93 81       	ldd	r25, Z+3	; 0x03
    8f84:	20 e0       	ldi	r18, 0x00	; 0
    8f86:	30 e0       	ldi	r19, 0x00	; 0
    8f88:	40 e2       	ldi	r20, 0x20	; 32
    8f8a:	51 e4       	ldi	r21, 0x41	; 65
    8f8c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    8f90:	dc 01       	movw	r26, r24
    8f92:	cb 01       	movw	r24, r22
    8f94:	8e 01       	movw	r16, r28
    8f96:	01 5d       	subi	r16, 0xD1	; 209
    8f98:	1e 4f       	sbci	r17, 0xFE	; 254
    8f9a:	bc 01       	movw	r22, r24
    8f9c:	cd 01       	movw	r24, r26
    8f9e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    8fa2:	dc 01       	movw	r26, r24
    8fa4:	cb 01       	movw	r24, r22
    8fa6:	f8 01       	movw	r30, r16
    8fa8:	91 83       	std	Z+1, r25	; 0x01
    8faa:	80 83       	st	Z, r24
    8fac:	27 c0       	rjmp	.+78     	; 0x8ffc <pick_drop+0x233a>
    8fae:	ce 01       	movw	r24, r28
    8fb0:	8f 5c       	subi	r24, 0xCF	; 207
    8fb2:	9e 4f       	sbci	r25, 0xFE	; 254
    8fb4:	20 e7       	ldi	r18, 0x70	; 112
    8fb6:	31 e0       	ldi	r19, 0x01	; 1
    8fb8:	fc 01       	movw	r30, r24
    8fba:	31 83       	std	Z+1, r19	; 0x01
    8fbc:	20 83       	st	Z, r18
    8fbe:	ce 01       	movw	r24, r28
    8fc0:	8f 5c       	subi	r24, 0xCF	; 207
    8fc2:	9e 4f       	sbci	r25, 0xFE	; 254
    8fc4:	fc 01       	movw	r30, r24
    8fc6:	80 81       	ld	r24, Z
    8fc8:	91 81       	ldd	r25, Z+1	; 0x01
    8fca:	8c 01       	movw	r16, r24
    8fcc:	c8 01       	movw	r24, r16
    8fce:	01 97       	sbiw	r24, 0x01	; 1
    8fd0:	f1 f7       	brne	.-4      	; 0x8fce <pick_drop+0x230c>
    8fd2:	8c 01       	movw	r16, r24
    8fd4:	ce 01       	movw	r24, r28
    8fd6:	8f 5c       	subi	r24, 0xCF	; 207
    8fd8:	9e 4f       	sbci	r25, 0xFE	; 254
    8fda:	fc 01       	movw	r30, r24
    8fdc:	11 83       	std	Z+1, r17	; 0x01
    8fde:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8fe0:	ce 01       	movw	r24, r28
    8fe2:	81 5d       	subi	r24, 0xD1	; 209
    8fe4:	9e 4f       	sbci	r25, 0xFE	; 254
    8fe6:	9e 01       	movw	r18, r28
    8fe8:	21 5d       	subi	r18, 0xD1	; 209
    8fea:	3e 4f       	sbci	r19, 0xFE	; 254
    8fec:	f9 01       	movw	r30, r18
    8fee:	20 81       	ld	r18, Z
    8ff0:	31 81       	ldd	r19, Z+1	; 0x01
    8ff2:	21 50       	subi	r18, 0x01	; 1
    8ff4:	30 40       	sbci	r19, 0x00	; 0
    8ff6:	fc 01       	movw	r30, r24
    8ff8:	31 83       	std	Z+1, r19	; 0x01
    8ffa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8ffc:	ce 01       	movw	r24, r28
    8ffe:	81 5d       	subi	r24, 0xD1	; 209
    9000:	9e 4f       	sbci	r25, 0xFE	; 254
    9002:	fc 01       	movw	r30, r24
    9004:	80 81       	ld	r24, Z
    9006:	91 81       	ldd	r25, Z+1	; 0x01
    9008:	00 97       	sbiw	r24, 0x00	; 0
    900a:	89 f6       	brne	.-94     	; 0x8fae <pick_drop+0x22ec>
    900c:	2f c0       	rjmp	.+94     	; 0x906c <pick_drop+0x23aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    900e:	8e 01       	movw	r16, r28
    9010:	01 5d       	subi	r16, 0xD1	; 209
    9012:	1e 4f       	sbci	r17, 0xFE	; 254
    9014:	ce 01       	movw	r24, r28
    9016:	85 5d       	subi	r24, 0xD5	; 213
    9018:	9e 4f       	sbci	r25, 0xFE	; 254
    901a:	fc 01       	movw	r30, r24
    901c:	60 81       	ld	r22, Z
    901e:	71 81       	ldd	r23, Z+1	; 0x01
    9020:	82 81       	ldd	r24, Z+2	; 0x02
    9022:	93 81       	ldd	r25, Z+3	; 0x03
    9024:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9028:	dc 01       	movw	r26, r24
    902a:	cb 01       	movw	r24, r22
    902c:	f8 01       	movw	r30, r16
    902e:	91 83       	std	Z+1, r25	; 0x01
    9030:	80 83       	st	Z, r24
    9032:	ce 01       	movw	r24, r28
    9034:	8d 5c       	subi	r24, 0xCD	; 205
    9036:	9e 4f       	sbci	r25, 0xFE	; 254
    9038:	9e 01       	movw	r18, r28
    903a:	21 5d       	subi	r18, 0xD1	; 209
    903c:	3e 4f       	sbci	r19, 0xFE	; 254
    903e:	f9 01       	movw	r30, r18
    9040:	20 81       	ld	r18, Z
    9042:	31 81       	ldd	r19, Z+1	; 0x01
    9044:	fc 01       	movw	r30, r24
    9046:	31 83       	std	Z+1, r19	; 0x01
    9048:	20 83       	st	Z, r18
    904a:	ce 01       	movw	r24, r28
    904c:	8d 5c       	subi	r24, 0xCD	; 205
    904e:	9e 4f       	sbci	r25, 0xFE	; 254
    9050:	fc 01       	movw	r30, r24
    9052:	80 81       	ld	r24, Z
    9054:	91 81       	ldd	r25, Z+1	; 0x01
    9056:	8c 01       	movw	r16, r24
    9058:	c8 01       	movw	r24, r16
    905a:	01 97       	sbiw	r24, 0x01	; 1
    905c:	f1 f7       	brne	.-4      	; 0x905a <pick_drop+0x2398>
    905e:	8c 01       	movw	r16, r24
    9060:	ce 01       	movw	r24, r28
    9062:	8d 5c       	subi	r24, 0xCD	; 205
    9064:	9e 4f       	sbci	r25, 0xFE	; 254
    9066:	fc 01       	movw	r30, r24
    9068:	11 83       	std	Z+1, r17	; 0x01
    906a:	00 83       	st	Z, r16
			_delay_ms(100);
			right_degrees(50);
    906c:	82 e3       	ldi	r24, 0x32	; 50
    906e:	90 e0       	ldi	r25, 0x00	; 0
    9070:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
    9074:	9e 01       	movw	r18, r28
    9076:	2b 5c       	subi	r18, 0xCB	; 203
    9078:	3e 4f       	sbci	r19, 0xFE	; 254
    907a:	80 e0       	ldi	r24, 0x00	; 0
    907c:	90 e0       	ldi	r25, 0x00	; 0
    907e:	a0 ea       	ldi	r26, 0xA0	; 160
    9080:	b1 e4       	ldi	r27, 0x41	; 65
    9082:	f9 01       	movw	r30, r18
    9084:	80 83       	st	Z, r24
    9086:	91 83       	std	Z+1, r25	; 0x01
    9088:	a2 83       	std	Z+2, r26	; 0x02
    908a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    908c:	8e 01       	movw	r16, r28
    908e:	07 5c       	subi	r16, 0xC7	; 199
    9090:	1e 4f       	sbci	r17, 0xFE	; 254
    9092:	ce 01       	movw	r24, r28
    9094:	8b 5c       	subi	r24, 0xCB	; 203
    9096:	9e 4f       	sbci	r25, 0xFE	; 254
    9098:	fc 01       	movw	r30, r24
    909a:	60 81       	ld	r22, Z
    909c:	71 81       	ldd	r23, Z+1	; 0x01
    909e:	82 81       	ldd	r24, Z+2	; 0x02
    90a0:	93 81       	ldd	r25, Z+3	; 0x03
    90a2:	26 e6       	ldi	r18, 0x66	; 102
    90a4:	36 e6       	ldi	r19, 0x66	; 102
    90a6:	46 e6       	ldi	r20, 0x66	; 102
    90a8:	55 e4       	ldi	r21, 0x45	; 69
    90aa:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    90ae:	dc 01       	movw	r26, r24
    90b0:	cb 01       	movw	r24, r22
    90b2:	f8 01       	movw	r30, r16
    90b4:	80 83       	st	Z, r24
    90b6:	91 83       	std	Z+1, r25	; 0x01
    90b8:	a2 83       	std	Z+2, r26	; 0x02
    90ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    90bc:	ce 01       	movw	r24, r28
    90be:	87 5c       	subi	r24, 0xC7	; 199
    90c0:	9e 4f       	sbci	r25, 0xFE	; 254
    90c2:	11 e0       	ldi	r17, 0x01	; 1
    90c4:	fc 01       	movw	r30, r24
    90c6:	60 81       	ld	r22, Z
    90c8:	71 81       	ldd	r23, Z+1	; 0x01
    90ca:	82 81       	ldd	r24, Z+2	; 0x02
    90cc:	93 81       	ldd	r25, Z+3	; 0x03
    90ce:	20 e0       	ldi	r18, 0x00	; 0
    90d0:	30 e0       	ldi	r19, 0x00	; 0
    90d2:	40 e8       	ldi	r20, 0x80	; 128
    90d4:	5f e3       	ldi	r21, 0x3F	; 63
    90d6:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    90da:	88 23       	and	r24, r24
    90dc:	0c f0       	brlt	.+2      	; 0x90e0 <pick_drop+0x241e>
    90de:	10 e0       	ldi	r17, 0x00	; 0
    90e0:	11 23       	and	r17, r17
    90e2:	49 f0       	breq	.+18     	; 0x90f6 <pick_drop+0x2434>
		__ticks = 1;
    90e4:	ce 01       	movw	r24, r28
    90e6:	83 5c       	subi	r24, 0xC3	; 195
    90e8:	9e 4f       	sbci	r25, 0xFE	; 254
    90ea:	21 e0       	ldi	r18, 0x01	; 1
    90ec:	30 e0       	ldi	r19, 0x00	; 0
    90ee:	fc 01       	movw	r30, r24
    90f0:	31 83       	std	Z+1, r19	; 0x01
    90f2:	20 83       	st	Z, r18
    90f4:	74 c0       	rjmp	.+232    	; 0x91de <pick_drop+0x251c>
	else if (__tmp > 65535)
    90f6:	ce 01       	movw	r24, r28
    90f8:	87 5c       	subi	r24, 0xC7	; 199
    90fa:	9e 4f       	sbci	r25, 0xFE	; 254
    90fc:	11 e0       	ldi	r17, 0x01	; 1
    90fe:	fc 01       	movw	r30, r24
    9100:	60 81       	ld	r22, Z
    9102:	71 81       	ldd	r23, Z+1	; 0x01
    9104:	82 81       	ldd	r24, Z+2	; 0x02
    9106:	93 81       	ldd	r25, Z+3	; 0x03
    9108:	20 e0       	ldi	r18, 0x00	; 0
    910a:	3f ef       	ldi	r19, 0xFF	; 255
    910c:	4f e7       	ldi	r20, 0x7F	; 127
    910e:	57 e4       	ldi	r21, 0x47	; 71
    9110:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    9114:	18 16       	cp	r1, r24
    9116:	0c f0       	brlt	.+2      	; 0x911a <pick_drop+0x2458>
    9118:	10 e0       	ldi	r17, 0x00	; 0
    911a:	11 23       	and	r17, r17
    911c:	09 f4       	brne	.+2      	; 0x9120 <pick_drop+0x245e>
    911e:	4d c0       	rjmp	.+154    	; 0x91ba <pick_drop+0x24f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9120:	ce 01       	movw	r24, r28
    9122:	8b 5c       	subi	r24, 0xCB	; 203
    9124:	9e 4f       	sbci	r25, 0xFE	; 254
    9126:	fc 01       	movw	r30, r24
    9128:	60 81       	ld	r22, Z
    912a:	71 81       	ldd	r23, Z+1	; 0x01
    912c:	82 81       	ldd	r24, Z+2	; 0x02
    912e:	93 81       	ldd	r25, Z+3	; 0x03
    9130:	20 e0       	ldi	r18, 0x00	; 0
    9132:	30 e0       	ldi	r19, 0x00	; 0
    9134:	40 e2       	ldi	r20, 0x20	; 32
    9136:	51 e4       	ldi	r21, 0x41	; 65
    9138:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    913c:	dc 01       	movw	r26, r24
    913e:	cb 01       	movw	r24, r22
    9140:	8e 01       	movw	r16, r28
    9142:	03 5c       	subi	r16, 0xC3	; 195
    9144:	1e 4f       	sbci	r17, 0xFE	; 254
    9146:	bc 01       	movw	r22, r24
    9148:	cd 01       	movw	r24, r26
    914a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    914e:	dc 01       	movw	r26, r24
    9150:	cb 01       	movw	r24, r22
    9152:	f8 01       	movw	r30, r16
    9154:	91 83       	std	Z+1, r25	; 0x01
    9156:	80 83       	st	Z, r24
    9158:	27 c0       	rjmp	.+78     	; 0x91a8 <pick_drop+0x24e6>
    915a:	ce 01       	movw	r24, r28
    915c:	81 5c       	subi	r24, 0xC1	; 193
    915e:	9e 4f       	sbci	r25, 0xFE	; 254
    9160:	20 e7       	ldi	r18, 0x70	; 112
    9162:	31 e0       	ldi	r19, 0x01	; 1
    9164:	fc 01       	movw	r30, r24
    9166:	31 83       	std	Z+1, r19	; 0x01
    9168:	20 83       	st	Z, r18
    916a:	ce 01       	movw	r24, r28
    916c:	81 5c       	subi	r24, 0xC1	; 193
    916e:	9e 4f       	sbci	r25, 0xFE	; 254
    9170:	fc 01       	movw	r30, r24
    9172:	80 81       	ld	r24, Z
    9174:	91 81       	ldd	r25, Z+1	; 0x01
    9176:	8c 01       	movw	r16, r24
    9178:	c8 01       	movw	r24, r16
    917a:	01 97       	sbiw	r24, 0x01	; 1
    917c:	f1 f7       	brne	.-4      	; 0x917a <pick_drop+0x24b8>
    917e:	8c 01       	movw	r16, r24
    9180:	ce 01       	movw	r24, r28
    9182:	81 5c       	subi	r24, 0xC1	; 193
    9184:	9e 4f       	sbci	r25, 0xFE	; 254
    9186:	fc 01       	movw	r30, r24
    9188:	11 83       	std	Z+1, r17	; 0x01
    918a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    918c:	ce 01       	movw	r24, r28
    918e:	83 5c       	subi	r24, 0xC3	; 195
    9190:	9e 4f       	sbci	r25, 0xFE	; 254
    9192:	9e 01       	movw	r18, r28
    9194:	23 5c       	subi	r18, 0xC3	; 195
    9196:	3e 4f       	sbci	r19, 0xFE	; 254
    9198:	f9 01       	movw	r30, r18
    919a:	20 81       	ld	r18, Z
    919c:	31 81       	ldd	r19, Z+1	; 0x01
    919e:	21 50       	subi	r18, 0x01	; 1
    91a0:	30 40       	sbci	r19, 0x00	; 0
    91a2:	fc 01       	movw	r30, r24
    91a4:	31 83       	std	Z+1, r19	; 0x01
    91a6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    91a8:	ce 01       	movw	r24, r28
    91aa:	83 5c       	subi	r24, 0xC3	; 195
    91ac:	9e 4f       	sbci	r25, 0xFE	; 254
    91ae:	fc 01       	movw	r30, r24
    91b0:	80 81       	ld	r24, Z
    91b2:	91 81       	ldd	r25, Z+1	; 0x01
    91b4:	00 97       	sbiw	r24, 0x00	; 0
    91b6:	89 f6       	brne	.-94     	; 0x915a <pick_drop+0x2498>
    91b8:	2f c0       	rjmp	.+94     	; 0x9218 <pick_drop+0x2556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    91ba:	8e 01       	movw	r16, r28
    91bc:	03 5c       	subi	r16, 0xC3	; 195
    91be:	1e 4f       	sbci	r17, 0xFE	; 254
    91c0:	ce 01       	movw	r24, r28
    91c2:	87 5c       	subi	r24, 0xC7	; 199
    91c4:	9e 4f       	sbci	r25, 0xFE	; 254
    91c6:	fc 01       	movw	r30, r24
    91c8:	60 81       	ld	r22, Z
    91ca:	71 81       	ldd	r23, Z+1	; 0x01
    91cc:	82 81       	ldd	r24, Z+2	; 0x02
    91ce:	93 81       	ldd	r25, Z+3	; 0x03
    91d0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    91d4:	dc 01       	movw	r26, r24
    91d6:	cb 01       	movw	r24, r22
    91d8:	f8 01       	movw	r30, r16
    91da:	91 83       	std	Z+1, r25	; 0x01
    91dc:	80 83       	st	Z, r24
    91de:	ce 01       	movw	r24, r28
    91e0:	8f 5b       	subi	r24, 0xBF	; 191
    91e2:	9e 4f       	sbci	r25, 0xFE	; 254
    91e4:	9e 01       	movw	r18, r28
    91e6:	23 5c       	subi	r18, 0xC3	; 195
    91e8:	3e 4f       	sbci	r19, 0xFE	; 254
    91ea:	f9 01       	movw	r30, r18
    91ec:	20 81       	ld	r18, Z
    91ee:	31 81       	ldd	r19, Z+1	; 0x01
    91f0:	fc 01       	movw	r30, r24
    91f2:	31 83       	std	Z+1, r19	; 0x01
    91f4:	20 83       	st	Z, r18
    91f6:	ce 01       	movw	r24, r28
    91f8:	8f 5b       	subi	r24, 0xBF	; 191
    91fa:	9e 4f       	sbci	r25, 0xFE	; 254
    91fc:	fc 01       	movw	r30, r24
    91fe:	80 81       	ld	r24, Z
    9200:	91 81       	ldd	r25, Z+1	; 0x01
    9202:	8c 01       	movw	r16, r24
    9204:	c8 01       	movw	r24, r16
    9206:	01 97       	sbiw	r24, 0x01	; 1
    9208:	f1 f7       	brne	.-4      	; 0x9206 <pick_drop+0x2544>
    920a:	8c 01       	movw	r16, r24
    920c:	ce 01       	movw	r24, r28
    920e:	8f 5b       	subi	r24, 0xBF	; 191
    9210:	9e 4f       	sbci	r25, 0xFE	; 254
    9212:	fc 01       	movw	r30, r24
    9214:	11 83       	std	Z+1, r17	; 0x01
    9216:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(55);
    9218:	87 e3       	ldi	r24, 0x37	; 55
    921a:	90 e0       	ldi	r25, 0x00	; 0
    921c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    9220:	9e 01       	movw	r18, r28
    9222:	2d 5b       	subi	r18, 0xBD	; 189
    9224:	3e 4f       	sbci	r19, 0xFE	; 254
    9226:	80 e0       	ldi	r24, 0x00	; 0
    9228:	90 e0       	ldi	r25, 0x00	; 0
    922a:	a0 ea       	ldi	r26, 0xA0	; 160
    922c:	b1 e4       	ldi	r27, 0x41	; 65
    922e:	f9 01       	movw	r30, r18
    9230:	80 83       	st	Z, r24
    9232:	91 83       	std	Z+1, r25	; 0x01
    9234:	a2 83       	std	Z+2, r26	; 0x02
    9236:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9238:	8e 01       	movw	r16, r28
    923a:	09 5b       	subi	r16, 0xB9	; 185
    923c:	1e 4f       	sbci	r17, 0xFE	; 254
    923e:	ce 01       	movw	r24, r28
    9240:	8d 5b       	subi	r24, 0xBD	; 189
    9242:	9e 4f       	sbci	r25, 0xFE	; 254
    9244:	fc 01       	movw	r30, r24
    9246:	60 81       	ld	r22, Z
    9248:	71 81       	ldd	r23, Z+1	; 0x01
    924a:	82 81       	ldd	r24, Z+2	; 0x02
    924c:	93 81       	ldd	r25, Z+3	; 0x03
    924e:	26 e6       	ldi	r18, 0x66	; 102
    9250:	36 e6       	ldi	r19, 0x66	; 102
    9252:	46 e6       	ldi	r20, 0x66	; 102
    9254:	55 e4       	ldi	r21, 0x45	; 69
    9256:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    925a:	dc 01       	movw	r26, r24
    925c:	cb 01       	movw	r24, r22
    925e:	f8 01       	movw	r30, r16
    9260:	80 83       	st	Z, r24
    9262:	91 83       	std	Z+1, r25	; 0x01
    9264:	a2 83       	std	Z+2, r26	; 0x02
    9266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9268:	ce 01       	movw	r24, r28
    926a:	89 5b       	subi	r24, 0xB9	; 185
    926c:	9e 4f       	sbci	r25, 0xFE	; 254
    926e:	11 e0       	ldi	r17, 0x01	; 1
    9270:	fc 01       	movw	r30, r24
    9272:	60 81       	ld	r22, Z
    9274:	71 81       	ldd	r23, Z+1	; 0x01
    9276:	82 81       	ldd	r24, Z+2	; 0x02
    9278:	93 81       	ldd	r25, Z+3	; 0x03
    927a:	20 e0       	ldi	r18, 0x00	; 0
    927c:	30 e0       	ldi	r19, 0x00	; 0
    927e:	40 e8       	ldi	r20, 0x80	; 128
    9280:	5f e3       	ldi	r21, 0x3F	; 63
    9282:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    9286:	88 23       	and	r24, r24
    9288:	0c f0       	brlt	.+2      	; 0x928c <pick_drop+0x25ca>
    928a:	10 e0       	ldi	r17, 0x00	; 0
    928c:	11 23       	and	r17, r17
    928e:	49 f0       	breq	.+18     	; 0x92a2 <pick_drop+0x25e0>
		__ticks = 1;
    9290:	ce 01       	movw	r24, r28
    9292:	85 5b       	subi	r24, 0xB5	; 181
    9294:	9e 4f       	sbci	r25, 0xFE	; 254
    9296:	21 e0       	ldi	r18, 0x01	; 1
    9298:	30 e0       	ldi	r19, 0x00	; 0
    929a:	fc 01       	movw	r30, r24
    929c:	31 83       	std	Z+1, r19	; 0x01
    929e:	20 83       	st	Z, r18
    92a0:	74 c0       	rjmp	.+232    	; 0x938a <pick_drop+0x26c8>
	else if (__tmp > 65535)
    92a2:	ce 01       	movw	r24, r28
    92a4:	89 5b       	subi	r24, 0xB9	; 185
    92a6:	9e 4f       	sbci	r25, 0xFE	; 254
    92a8:	11 e0       	ldi	r17, 0x01	; 1
    92aa:	fc 01       	movw	r30, r24
    92ac:	60 81       	ld	r22, Z
    92ae:	71 81       	ldd	r23, Z+1	; 0x01
    92b0:	82 81       	ldd	r24, Z+2	; 0x02
    92b2:	93 81       	ldd	r25, Z+3	; 0x03
    92b4:	20 e0       	ldi	r18, 0x00	; 0
    92b6:	3f ef       	ldi	r19, 0xFF	; 255
    92b8:	4f e7       	ldi	r20, 0x7F	; 127
    92ba:	57 e4       	ldi	r21, 0x47	; 71
    92bc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    92c0:	18 16       	cp	r1, r24
    92c2:	0c f0       	brlt	.+2      	; 0x92c6 <pick_drop+0x2604>
    92c4:	10 e0       	ldi	r17, 0x00	; 0
    92c6:	11 23       	and	r17, r17
    92c8:	09 f4       	brne	.+2      	; 0x92cc <pick_drop+0x260a>
    92ca:	4d c0       	rjmp	.+154    	; 0x9366 <pick_drop+0x26a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    92cc:	ce 01       	movw	r24, r28
    92ce:	8d 5b       	subi	r24, 0xBD	; 189
    92d0:	9e 4f       	sbci	r25, 0xFE	; 254
    92d2:	fc 01       	movw	r30, r24
    92d4:	60 81       	ld	r22, Z
    92d6:	71 81       	ldd	r23, Z+1	; 0x01
    92d8:	82 81       	ldd	r24, Z+2	; 0x02
    92da:	93 81       	ldd	r25, Z+3	; 0x03
    92dc:	20 e0       	ldi	r18, 0x00	; 0
    92de:	30 e0       	ldi	r19, 0x00	; 0
    92e0:	40 e2       	ldi	r20, 0x20	; 32
    92e2:	51 e4       	ldi	r21, 0x41	; 65
    92e4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    92e8:	dc 01       	movw	r26, r24
    92ea:	cb 01       	movw	r24, r22
    92ec:	8e 01       	movw	r16, r28
    92ee:	05 5b       	subi	r16, 0xB5	; 181
    92f0:	1e 4f       	sbci	r17, 0xFE	; 254
    92f2:	bc 01       	movw	r22, r24
    92f4:	cd 01       	movw	r24, r26
    92f6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    92fa:	dc 01       	movw	r26, r24
    92fc:	cb 01       	movw	r24, r22
    92fe:	f8 01       	movw	r30, r16
    9300:	91 83       	std	Z+1, r25	; 0x01
    9302:	80 83       	st	Z, r24
    9304:	27 c0       	rjmp	.+78     	; 0x9354 <pick_drop+0x2692>
    9306:	ce 01       	movw	r24, r28
    9308:	83 5b       	subi	r24, 0xB3	; 179
    930a:	9e 4f       	sbci	r25, 0xFE	; 254
    930c:	20 e7       	ldi	r18, 0x70	; 112
    930e:	31 e0       	ldi	r19, 0x01	; 1
    9310:	fc 01       	movw	r30, r24
    9312:	31 83       	std	Z+1, r19	; 0x01
    9314:	20 83       	st	Z, r18
    9316:	ce 01       	movw	r24, r28
    9318:	83 5b       	subi	r24, 0xB3	; 179
    931a:	9e 4f       	sbci	r25, 0xFE	; 254
    931c:	fc 01       	movw	r30, r24
    931e:	80 81       	ld	r24, Z
    9320:	91 81       	ldd	r25, Z+1	; 0x01
    9322:	8c 01       	movw	r16, r24
    9324:	c8 01       	movw	r24, r16
    9326:	01 97       	sbiw	r24, 0x01	; 1
    9328:	f1 f7       	brne	.-4      	; 0x9326 <pick_drop+0x2664>
    932a:	8c 01       	movw	r16, r24
    932c:	ce 01       	movw	r24, r28
    932e:	83 5b       	subi	r24, 0xB3	; 179
    9330:	9e 4f       	sbci	r25, 0xFE	; 254
    9332:	fc 01       	movw	r30, r24
    9334:	11 83       	std	Z+1, r17	; 0x01
    9336:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9338:	ce 01       	movw	r24, r28
    933a:	85 5b       	subi	r24, 0xB5	; 181
    933c:	9e 4f       	sbci	r25, 0xFE	; 254
    933e:	9e 01       	movw	r18, r28
    9340:	25 5b       	subi	r18, 0xB5	; 181
    9342:	3e 4f       	sbci	r19, 0xFE	; 254
    9344:	f9 01       	movw	r30, r18
    9346:	20 81       	ld	r18, Z
    9348:	31 81       	ldd	r19, Z+1	; 0x01
    934a:	21 50       	subi	r18, 0x01	; 1
    934c:	30 40       	sbci	r19, 0x00	; 0
    934e:	fc 01       	movw	r30, r24
    9350:	31 83       	std	Z+1, r19	; 0x01
    9352:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9354:	ce 01       	movw	r24, r28
    9356:	85 5b       	subi	r24, 0xB5	; 181
    9358:	9e 4f       	sbci	r25, 0xFE	; 254
    935a:	fc 01       	movw	r30, r24
    935c:	80 81       	ld	r24, Z
    935e:	91 81       	ldd	r25, Z+1	; 0x01
    9360:	00 97       	sbiw	r24, 0x00	; 0
    9362:	89 f6       	brne	.-94     	; 0x9306 <pick_drop+0x2644>
    9364:	2e c6       	rjmp	.+3164   	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9366:	8e 01       	movw	r16, r28
    9368:	05 5b       	subi	r16, 0xB5	; 181
    936a:	1e 4f       	sbci	r17, 0xFE	; 254
    936c:	ce 01       	movw	r24, r28
    936e:	89 5b       	subi	r24, 0xB9	; 185
    9370:	9e 4f       	sbci	r25, 0xFE	; 254
    9372:	fc 01       	movw	r30, r24
    9374:	60 81       	ld	r22, Z
    9376:	71 81       	ldd	r23, Z+1	; 0x01
    9378:	82 81       	ldd	r24, Z+2	; 0x02
    937a:	93 81       	ldd	r25, Z+3	; 0x03
    937c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9380:	dc 01       	movw	r26, r24
    9382:	cb 01       	movw	r24, r22
    9384:	f8 01       	movw	r30, r16
    9386:	91 83       	std	Z+1, r25	; 0x01
    9388:	80 83       	st	Z, r24
    938a:	ce 01       	movw	r24, r28
    938c:	81 5b       	subi	r24, 0xB1	; 177
    938e:	9e 4f       	sbci	r25, 0xFE	; 254
    9390:	9e 01       	movw	r18, r28
    9392:	25 5b       	subi	r18, 0xB5	; 181
    9394:	3e 4f       	sbci	r19, 0xFE	; 254
    9396:	f9 01       	movw	r30, r18
    9398:	20 81       	ld	r18, Z
    939a:	31 81       	ldd	r19, Z+1	; 0x01
    939c:	fc 01       	movw	r30, r24
    939e:	31 83       	std	Z+1, r19	; 0x01
    93a0:	20 83       	st	Z, r18
    93a2:	ce 01       	movw	r24, r28
    93a4:	81 5b       	subi	r24, 0xB1	; 177
    93a6:	9e 4f       	sbci	r25, 0xFE	; 254
    93a8:	fc 01       	movw	r30, r24
    93aa:	80 81       	ld	r24, Z
    93ac:	91 81       	ldd	r25, Z+1	; 0x01
    93ae:	8c 01       	movw	r16, r24
    93b0:	c8 01       	movw	r24, r16
    93b2:	01 97       	sbiw	r24, 0x01	; 1
    93b4:	f1 f7       	brne	.-4      	; 0x93b2 <pick_drop+0x26f0>
    93b6:	8c 01       	movw	r16, r24
    93b8:	ce 01       	movw	r24, r28
    93ba:	81 5b       	subi	r24, 0xB1	; 177
    93bc:	9e 4f       	sbci	r25, 0xFE	; 254
    93be:	fc 01       	movw	r30, r24
    93c0:	11 83       	std	Z+1, r17	; 0x01
    93c2:	00 83       	st	Z, r16
    93c4:	fe c5       	rjmp	.+3068   	; 0x9fc2 <pick_drop+0x3300>
			_delay_ms(20);
		}       
	}
		else if(pd=='7'){//6X6
    93c6:	ce 01       	movw	r24, r28
    93c8:	8d 54       	subi	r24, 0x4D	; 77
    93ca:	9e 4f       	sbci	r25, 0xFE	; 254
    93cc:	fc 01       	movw	r30, r24
    93ce:	80 81       	ld	r24, Z
    93d0:	87 33       	cpi	r24, 0x37	; 55
    93d2:	09 f0       	breq	.+2      	; 0x93d6 <pick_drop+0x2714>
    93d4:	1a c5       	rjmp	.+2612   	; 0x9e0a <pick_drop+0x3148>
				if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    93d6:	80 91 65 03 	lds	r24, 0x0365
    93da:	90 91 66 03 	lds	r25, 0x0366
    93de:	01 97       	sbiw	r24, 0x01	; 1
    93e0:	87 59       	subi	r24, 0x97	; 151
    93e2:	9c 4f       	sbci	r25, 0xFC	; 252
    93e4:	fc 01       	movw	r30, r24
    93e6:	80 81       	ld	r24, Z
    93e8:	8c 34       	cpi	r24, 0x4C	; 76
    93ea:	61 f0       	breq	.+24     	; 0x9404 <pick_drop+0x2742>
    93ec:	80 91 65 03 	lds	r24, 0x0365
    93f0:	90 91 66 03 	lds	r25, 0x0366
    93f4:	01 97       	sbiw	r24, 0x01	; 1
    93f6:	87 59       	subi	r24, 0x97	; 151
    93f8:	9c 4f       	sbci	r25, 0xFC	; 252
    93fa:	fc 01       	movw	r30, r24
    93fc:	80 81       	ld	r24, Z
    93fe:	82 35       	cpi	r24, 0x52	; 82
    9400:	09 f0       	breq	.+2      	; 0x9404 <pick_drop+0x2742>
    9402:	aa c1       	rjmp	.+852    	; 0x9758 <pick_drop+0x2a96>
					stop();
    9404:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    9408:	9e 01       	movw	r18, r28
    940a:	2f 5a       	subi	r18, 0xAF	; 175
    940c:	3e 4f       	sbci	r19, 0xFE	; 254
    940e:	80 e0       	ldi	r24, 0x00	; 0
    9410:	90 e0       	ldi	r25, 0x00	; 0
    9412:	a0 ea       	ldi	r26, 0xA0	; 160
    9414:	b1 e4       	ldi	r27, 0x41	; 65
    9416:	f9 01       	movw	r30, r18
    9418:	80 83       	st	Z, r24
    941a:	91 83       	std	Z+1, r25	; 0x01
    941c:	a2 83       	std	Z+2, r26	; 0x02
    941e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9420:	8e 01       	movw	r16, r28
    9422:	0b 5a       	subi	r16, 0xAB	; 171
    9424:	1e 4f       	sbci	r17, 0xFE	; 254
    9426:	ce 01       	movw	r24, r28
    9428:	8f 5a       	subi	r24, 0xAF	; 175
    942a:	9e 4f       	sbci	r25, 0xFE	; 254
    942c:	fc 01       	movw	r30, r24
    942e:	60 81       	ld	r22, Z
    9430:	71 81       	ldd	r23, Z+1	; 0x01
    9432:	82 81       	ldd	r24, Z+2	; 0x02
    9434:	93 81       	ldd	r25, Z+3	; 0x03
    9436:	26 e6       	ldi	r18, 0x66	; 102
    9438:	36 e6       	ldi	r19, 0x66	; 102
    943a:	46 e6       	ldi	r20, 0x66	; 102
    943c:	55 e4       	ldi	r21, 0x45	; 69
    943e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9442:	dc 01       	movw	r26, r24
    9444:	cb 01       	movw	r24, r22
    9446:	f8 01       	movw	r30, r16
    9448:	80 83       	st	Z, r24
    944a:	91 83       	std	Z+1, r25	; 0x01
    944c:	a2 83       	std	Z+2, r26	; 0x02
    944e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9450:	ce 01       	movw	r24, r28
    9452:	8b 5a       	subi	r24, 0xAB	; 171
    9454:	9e 4f       	sbci	r25, 0xFE	; 254
    9456:	11 e0       	ldi	r17, 0x01	; 1
    9458:	fc 01       	movw	r30, r24
    945a:	60 81       	ld	r22, Z
    945c:	71 81       	ldd	r23, Z+1	; 0x01
    945e:	82 81       	ldd	r24, Z+2	; 0x02
    9460:	93 81       	ldd	r25, Z+3	; 0x03
    9462:	20 e0       	ldi	r18, 0x00	; 0
    9464:	30 e0       	ldi	r19, 0x00	; 0
    9466:	40 e8       	ldi	r20, 0x80	; 128
    9468:	5f e3       	ldi	r21, 0x3F	; 63
    946a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    946e:	88 23       	and	r24, r24
    9470:	0c f0       	brlt	.+2      	; 0x9474 <pick_drop+0x27b2>
    9472:	10 e0       	ldi	r17, 0x00	; 0
    9474:	11 23       	and	r17, r17
    9476:	49 f0       	breq	.+18     	; 0x948a <pick_drop+0x27c8>
		__ticks = 1;
    9478:	ce 01       	movw	r24, r28
    947a:	87 5a       	subi	r24, 0xA7	; 167
    947c:	9e 4f       	sbci	r25, 0xFE	; 254
    947e:	21 e0       	ldi	r18, 0x01	; 1
    9480:	30 e0       	ldi	r19, 0x00	; 0
    9482:	fc 01       	movw	r30, r24
    9484:	31 83       	std	Z+1, r19	; 0x01
    9486:	20 83       	st	Z, r18
    9488:	74 c0       	rjmp	.+232    	; 0x9572 <pick_drop+0x28b0>
	else if (__tmp > 65535)
    948a:	ce 01       	movw	r24, r28
    948c:	8b 5a       	subi	r24, 0xAB	; 171
    948e:	9e 4f       	sbci	r25, 0xFE	; 254
    9490:	11 e0       	ldi	r17, 0x01	; 1
    9492:	fc 01       	movw	r30, r24
    9494:	60 81       	ld	r22, Z
    9496:	71 81       	ldd	r23, Z+1	; 0x01
    9498:	82 81       	ldd	r24, Z+2	; 0x02
    949a:	93 81       	ldd	r25, Z+3	; 0x03
    949c:	20 e0       	ldi	r18, 0x00	; 0
    949e:	3f ef       	ldi	r19, 0xFF	; 255
    94a0:	4f e7       	ldi	r20, 0x7F	; 127
    94a2:	57 e4       	ldi	r21, 0x47	; 71
    94a4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    94a8:	18 16       	cp	r1, r24
    94aa:	0c f0       	brlt	.+2      	; 0x94ae <pick_drop+0x27ec>
    94ac:	10 e0       	ldi	r17, 0x00	; 0
    94ae:	11 23       	and	r17, r17
    94b0:	09 f4       	brne	.+2      	; 0x94b4 <pick_drop+0x27f2>
    94b2:	4d c0       	rjmp	.+154    	; 0x954e <pick_drop+0x288c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    94b4:	ce 01       	movw	r24, r28
    94b6:	8f 5a       	subi	r24, 0xAF	; 175
    94b8:	9e 4f       	sbci	r25, 0xFE	; 254
    94ba:	fc 01       	movw	r30, r24
    94bc:	60 81       	ld	r22, Z
    94be:	71 81       	ldd	r23, Z+1	; 0x01
    94c0:	82 81       	ldd	r24, Z+2	; 0x02
    94c2:	93 81       	ldd	r25, Z+3	; 0x03
    94c4:	20 e0       	ldi	r18, 0x00	; 0
    94c6:	30 e0       	ldi	r19, 0x00	; 0
    94c8:	40 e2       	ldi	r20, 0x20	; 32
    94ca:	51 e4       	ldi	r21, 0x41	; 65
    94cc:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    94d0:	dc 01       	movw	r26, r24
    94d2:	cb 01       	movw	r24, r22
    94d4:	8e 01       	movw	r16, r28
    94d6:	07 5a       	subi	r16, 0xA7	; 167
    94d8:	1e 4f       	sbci	r17, 0xFE	; 254
    94da:	bc 01       	movw	r22, r24
    94dc:	cd 01       	movw	r24, r26
    94de:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    94e2:	dc 01       	movw	r26, r24
    94e4:	cb 01       	movw	r24, r22
    94e6:	f8 01       	movw	r30, r16
    94e8:	91 83       	std	Z+1, r25	; 0x01
    94ea:	80 83       	st	Z, r24
    94ec:	27 c0       	rjmp	.+78     	; 0x953c <pick_drop+0x287a>
    94ee:	ce 01       	movw	r24, r28
    94f0:	85 5a       	subi	r24, 0xA5	; 165
    94f2:	9e 4f       	sbci	r25, 0xFE	; 254
    94f4:	20 e7       	ldi	r18, 0x70	; 112
    94f6:	31 e0       	ldi	r19, 0x01	; 1
    94f8:	fc 01       	movw	r30, r24
    94fa:	31 83       	std	Z+1, r19	; 0x01
    94fc:	20 83       	st	Z, r18
    94fe:	ce 01       	movw	r24, r28
    9500:	85 5a       	subi	r24, 0xA5	; 165
    9502:	9e 4f       	sbci	r25, 0xFE	; 254
    9504:	fc 01       	movw	r30, r24
    9506:	80 81       	ld	r24, Z
    9508:	91 81       	ldd	r25, Z+1	; 0x01
    950a:	8c 01       	movw	r16, r24
    950c:	c8 01       	movw	r24, r16
    950e:	01 97       	sbiw	r24, 0x01	; 1
    9510:	f1 f7       	brne	.-4      	; 0x950e <pick_drop+0x284c>
    9512:	8c 01       	movw	r16, r24
    9514:	ce 01       	movw	r24, r28
    9516:	85 5a       	subi	r24, 0xA5	; 165
    9518:	9e 4f       	sbci	r25, 0xFE	; 254
    951a:	fc 01       	movw	r30, r24
    951c:	11 83       	std	Z+1, r17	; 0x01
    951e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9520:	ce 01       	movw	r24, r28
    9522:	87 5a       	subi	r24, 0xA7	; 167
    9524:	9e 4f       	sbci	r25, 0xFE	; 254
    9526:	9e 01       	movw	r18, r28
    9528:	27 5a       	subi	r18, 0xA7	; 167
    952a:	3e 4f       	sbci	r19, 0xFE	; 254
    952c:	f9 01       	movw	r30, r18
    952e:	20 81       	ld	r18, Z
    9530:	31 81       	ldd	r19, Z+1	; 0x01
    9532:	21 50       	subi	r18, 0x01	; 1
    9534:	30 40       	sbci	r19, 0x00	; 0
    9536:	fc 01       	movw	r30, r24
    9538:	31 83       	std	Z+1, r19	; 0x01
    953a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    953c:	ce 01       	movw	r24, r28
    953e:	87 5a       	subi	r24, 0xA7	; 167
    9540:	9e 4f       	sbci	r25, 0xFE	; 254
    9542:	fc 01       	movw	r30, r24
    9544:	80 81       	ld	r24, Z
    9546:	91 81       	ldd	r25, Z+1	; 0x01
    9548:	00 97       	sbiw	r24, 0x00	; 0
    954a:	89 f6       	brne	.-94     	; 0x94ee <pick_drop+0x282c>
    954c:	2f c0       	rjmp	.+94     	; 0x95ac <pick_drop+0x28ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    954e:	8e 01       	movw	r16, r28
    9550:	07 5a       	subi	r16, 0xA7	; 167
    9552:	1e 4f       	sbci	r17, 0xFE	; 254
    9554:	ce 01       	movw	r24, r28
    9556:	8b 5a       	subi	r24, 0xAB	; 171
    9558:	9e 4f       	sbci	r25, 0xFE	; 254
    955a:	fc 01       	movw	r30, r24
    955c:	60 81       	ld	r22, Z
    955e:	71 81       	ldd	r23, Z+1	; 0x01
    9560:	82 81       	ldd	r24, Z+2	; 0x02
    9562:	93 81       	ldd	r25, Z+3	; 0x03
    9564:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9568:	dc 01       	movw	r26, r24
    956a:	cb 01       	movw	r24, r22
    956c:	f8 01       	movw	r30, r16
    956e:	91 83       	std	Z+1, r25	; 0x01
    9570:	80 83       	st	Z, r24
    9572:	ce 01       	movw	r24, r28
    9574:	83 5a       	subi	r24, 0xA3	; 163
    9576:	9e 4f       	sbci	r25, 0xFE	; 254
    9578:	9e 01       	movw	r18, r28
    957a:	27 5a       	subi	r18, 0xA7	; 167
    957c:	3e 4f       	sbci	r19, 0xFE	; 254
    957e:	f9 01       	movw	r30, r18
    9580:	20 81       	ld	r18, Z
    9582:	31 81       	ldd	r19, Z+1	; 0x01
    9584:	fc 01       	movw	r30, r24
    9586:	31 83       	std	Z+1, r19	; 0x01
    9588:	20 83       	st	Z, r18
    958a:	ce 01       	movw	r24, r28
    958c:	83 5a       	subi	r24, 0xA3	; 163
    958e:	9e 4f       	sbci	r25, 0xFE	; 254
    9590:	fc 01       	movw	r30, r24
    9592:	80 81       	ld	r24, Z
    9594:	91 81       	ldd	r25, Z+1	; 0x01
    9596:	8c 01       	movw	r16, r24
    9598:	c8 01       	movw	r24, r16
    959a:	01 97       	sbiw	r24, 0x01	; 1
    959c:	f1 f7       	brne	.-4      	; 0x959a <pick_drop+0x28d8>
    959e:	8c 01       	movw	r16, r24
    95a0:	ce 01       	movw	r24, r28
    95a2:	83 5a       	subi	r24, 0xA3	; 163
    95a4:	9e 4f       	sbci	r25, 0xFE	; 254
    95a6:	fc 01       	movw	r30, r24
    95a8:	11 83       	std	Z+1, r17	; 0x01
    95aa:	00 83       	st	Z, r16
					_delay_ms(20);
					//forward_mm(20);
					//_delay_ms(20);
					front();
    95ac:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    95b0:	9e 01       	movw	r18, r28
    95b2:	21 5a       	subi	r18, 0xA1	; 161
    95b4:	3e 4f       	sbci	r19, 0xFE	; 254
    95b6:	80 e0       	ldi	r24, 0x00	; 0
    95b8:	90 e0       	ldi	r25, 0x00	; 0
    95ba:	a8 ec       	ldi	r26, 0xC8	; 200
    95bc:	b2 e4       	ldi	r27, 0x42	; 66
    95be:	f9 01       	movw	r30, r18
    95c0:	80 83       	st	Z, r24
    95c2:	91 83       	std	Z+1, r25	; 0x01
    95c4:	a2 83       	std	Z+2, r26	; 0x02
    95c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    95c8:	8e 01       	movw	r16, r28
    95ca:	0d 59       	subi	r16, 0x9D	; 157
    95cc:	1e 4f       	sbci	r17, 0xFE	; 254
    95ce:	ce 01       	movw	r24, r28
    95d0:	81 5a       	subi	r24, 0xA1	; 161
    95d2:	9e 4f       	sbci	r25, 0xFE	; 254
    95d4:	fc 01       	movw	r30, r24
    95d6:	60 81       	ld	r22, Z
    95d8:	71 81       	ldd	r23, Z+1	; 0x01
    95da:	82 81       	ldd	r24, Z+2	; 0x02
    95dc:	93 81       	ldd	r25, Z+3	; 0x03
    95de:	26 e6       	ldi	r18, 0x66	; 102
    95e0:	36 e6       	ldi	r19, 0x66	; 102
    95e2:	46 e6       	ldi	r20, 0x66	; 102
    95e4:	55 e4       	ldi	r21, 0x45	; 69
    95e6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    95ea:	dc 01       	movw	r26, r24
    95ec:	cb 01       	movw	r24, r22
    95ee:	f8 01       	movw	r30, r16
    95f0:	80 83       	st	Z, r24
    95f2:	91 83       	std	Z+1, r25	; 0x01
    95f4:	a2 83       	std	Z+2, r26	; 0x02
    95f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    95f8:	ce 01       	movw	r24, r28
    95fa:	8d 59       	subi	r24, 0x9D	; 157
    95fc:	9e 4f       	sbci	r25, 0xFE	; 254
    95fe:	11 e0       	ldi	r17, 0x01	; 1
    9600:	fc 01       	movw	r30, r24
    9602:	60 81       	ld	r22, Z
    9604:	71 81       	ldd	r23, Z+1	; 0x01
    9606:	82 81       	ldd	r24, Z+2	; 0x02
    9608:	93 81       	ldd	r25, Z+3	; 0x03
    960a:	20 e0       	ldi	r18, 0x00	; 0
    960c:	30 e0       	ldi	r19, 0x00	; 0
    960e:	40 e8       	ldi	r20, 0x80	; 128
    9610:	5f e3       	ldi	r21, 0x3F	; 63
    9612:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    9616:	88 23       	and	r24, r24
    9618:	0c f0       	brlt	.+2      	; 0x961c <pick_drop+0x295a>
    961a:	10 e0       	ldi	r17, 0x00	; 0
    961c:	11 23       	and	r17, r17
    961e:	49 f0       	breq	.+18     	; 0x9632 <pick_drop+0x2970>
		__ticks = 1;
    9620:	ce 01       	movw	r24, r28
    9622:	89 59       	subi	r24, 0x99	; 153
    9624:	9e 4f       	sbci	r25, 0xFE	; 254
    9626:	21 e0       	ldi	r18, 0x01	; 1
    9628:	30 e0       	ldi	r19, 0x00	; 0
    962a:	fc 01       	movw	r30, r24
    962c:	31 83       	std	Z+1, r19	; 0x01
    962e:	20 83       	st	Z, r18
    9630:	74 c0       	rjmp	.+232    	; 0x971a <pick_drop+0x2a58>
	else if (__tmp > 65535)
    9632:	ce 01       	movw	r24, r28
    9634:	8d 59       	subi	r24, 0x9D	; 157
    9636:	9e 4f       	sbci	r25, 0xFE	; 254
    9638:	11 e0       	ldi	r17, 0x01	; 1
    963a:	fc 01       	movw	r30, r24
    963c:	60 81       	ld	r22, Z
    963e:	71 81       	ldd	r23, Z+1	; 0x01
    9640:	82 81       	ldd	r24, Z+2	; 0x02
    9642:	93 81       	ldd	r25, Z+3	; 0x03
    9644:	20 e0       	ldi	r18, 0x00	; 0
    9646:	3f ef       	ldi	r19, 0xFF	; 255
    9648:	4f e7       	ldi	r20, 0x7F	; 127
    964a:	57 e4       	ldi	r21, 0x47	; 71
    964c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    9650:	18 16       	cp	r1, r24
    9652:	0c f0       	brlt	.+2      	; 0x9656 <pick_drop+0x2994>
    9654:	10 e0       	ldi	r17, 0x00	; 0
    9656:	11 23       	and	r17, r17
    9658:	09 f4       	brne	.+2      	; 0x965c <pick_drop+0x299a>
    965a:	4d c0       	rjmp	.+154    	; 0x96f6 <pick_drop+0x2a34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    965c:	ce 01       	movw	r24, r28
    965e:	81 5a       	subi	r24, 0xA1	; 161
    9660:	9e 4f       	sbci	r25, 0xFE	; 254
    9662:	fc 01       	movw	r30, r24
    9664:	60 81       	ld	r22, Z
    9666:	71 81       	ldd	r23, Z+1	; 0x01
    9668:	82 81       	ldd	r24, Z+2	; 0x02
    966a:	93 81       	ldd	r25, Z+3	; 0x03
    966c:	20 e0       	ldi	r18, 0x00	; 0
    966e:	30 e0       	ldi	r19, 0x00	; 0
    9670:	40 e2       	ldi	r20, 0x20	; 32
    9672:	51 e4       	ldi	r21, 0x41	; 65
    9674:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9678:	dc 01       	movw	r26, r24
    967a:	cb 01       	movw	r24, r22
    967c:	8e 01       	movw	r16, r28
    967e:	09 59       	subi	r16, 0x99	; 153
    9680:	1e 4f       	sbci	r17, 0xFE	; 254
    9682:	bc 01       	movw	r22, r24
    9684:	cd 01       	movw	r24, r26
    9686:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    968a:	dc 01       	movw	r26, r24
    968c:	cb 01       	movw	r24, r22
    968e:	f8 01       	movw	r30, r16
    9690:	91 83       	std	Z+1, r25	; 0x01
    9692:	80 83       	st	Z, r24
    9694:	27 c0       	rjmp	.+78     	; 0x96e4 <pick_drop+0x2a22>
    9696:	ce 01       	movw	r24, r28
    9698:	87 59       	subi	r24, 0x97	; 151
    969a:	9e 4f       	sbci	r25, 0xFE	; 254
    969c:	20 e7       	ldi	r18, 0x70	; 112
    969e:	31 e0       	ldi	r19, 0x01	; 1
    96a0:	fc 01       	movw	r30, r24
    96a2:	31 83       	std	Z+1, r19	; 0x01
    96a4:	20 83       	st	Z, r18
    96a6:	ce 01       	movw	r24, r28
    96a8:	87 59       	subi	r24, 0x97	; 151
    96aa:	9e 4f       	sbci	r25, 0xFE	; 254
    96ac:	fc 01       	movw	r30, r24
    96ae:	80 81       	ld	r24, Z
    96b0:	91 81       	ldd	r25, Z+1	; 0x01
    96b2:	8c 01       	movw	r16, r24
    96b4:	c8 01       	movw	r24, r16
    96b6:	01 97       	sbiw	r24, 0x01	; 1
    96b8:	f1 f7       	brne	.-4      	; 0x96b6 <pick_drop+0x29f4>
    96ba:	8c 01       	movw	r16, r24
    96bc:	ce 01       	movw	r24, r28
    96be:	87 59       	subi	r24, 0x97	; 151
    96c0:	9e 4f       	sbci	r25, 0xFE	; 254
    96c2:	fc 01       	movw	r30, r24
    96c4:	11 83       	std	Z+1, r17	; 0x01
    96c6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    96c8:	ce 01       	movw	r24, r28
    96ca:	89 59       	subi	r24, 0x99	; 153
    96cc:	9e 4f       	sbci	r25, 0xFE	; 254
    96ce:	9e 01       	movw	r18, r28
    96d0:	29 59       	subi	r18, 0x99	; 153
    96d2:	3e 4f       	sbci	r19, 0xFE	; 254
    96d4:	f9 01       	movw	r30, r18
    96d6:	20 81       	ld	r18, Z
    96d8:	31 81       	ldd	r19, Z+1	; 0x01
    96da:	21 50       	subi	r18, 0x01	; 1
    96dc:	30 40       	sbci	r19, 0x00	; 0
    96de:	fc 01       	movw	r30, r24
    96e0:	31 83       	std	Z+1, r19	; 0x01
    96e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    96e4:	ce 01       	movw	r24, r28
    96e6:	89 59       	subi	r24, 0x99	; 153
    96e8:	9e 4f       	sbci	r25, 0xFE	; 254
    96ea:	fc 01       	movw	r30, r24
    96ec:	80 81       	ld	r24, Z
    96ee:	91 81       	ldd	r25, Z+1	; 0x01
    96f0:	00 97       	sbiw	r24, 0x00	; 0
    96f2:	89 f6       	brne	.-94     	; 0x9696 <pick_drop+0x29d4>
    96f4:	30 c0       	rjmp	.+96     	; 0x9756 <pick_drop+0x2a94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    96f6:	8e 01       	movw	r16, r28
    96f8:	09 59       	subi	r16, 0x99	; 153
    96fa:	1e 4f       	sbci	r17, 0xFE	; 254
    96fc:	ce 01       	movw	r24, r28
    96fe:	8d 59       	subi	r24, 0x9D	; 157
    9700:	9e 4f       	sbci	r25, 0xFE	; 254
    9702:	fc 01       	movw	r30, r24
    9704:	60 81       	ld	r22, Z
    9706:	71 81       	ldd	r23, Z+1	; 0x01
    9708:	82 81       	ldd	r24, Z+2	; 0x02
    970a:	93 81       	ldd	r25, Z+3	; 0x03
    970c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9710:	dc 01       	movw	r26, r24
    9712:	cb 01       	movw	r24, r22
    9714:	f8 01       	movw	r30, r16
    9716:	91 83       	std	Z+1, r25	; 0x01
    9718:	80 83       	st	Z, r24
    971a:	ce 01       	movw	r24, r28
    971c:	85 59       	subi	r24, 0x95	; 149
    971e:	9e 4f       	sbci	r25, 0xFE	; 254
    9720:	9e 01       	movw	r18, r28
    9722:	29 59       	subi	r18, 0x99	; 153
    9724:	3e 4f       	sbci	r19, 0xFE	; 254
    9726:	f9 01       	movw	r30, r18
    9728:	20 81       	ld	r18, Z
    972a:	31 81       	ldd	r19, Z+1	; 0x01
    972c:	fc 01       	movw	r30, r24
    972e:	31 83       	std	Z+1, r19	; 0x01
    9730:	20 83       	st	Z, r18
    9732:	ce 01       	movw	r24, r28
    9734:	85 59       	subi	r24, 0x95	; 149
    9736:	9e 4f       	sbci	r25, 0xFE	; 254
    9738:	fc 01       	movw	r30, r24
    973a:	80 81       	ld	r24, Z
    973c:	91 81       	ldd	r25, Z+1	; 0x01
    973e:	8c 01       	movw	r16, r24
    9740:	c8 01       	movw	r24, r16
    9742:	01 97       	sbiw	r24, 0x01	; 1
    9744:	f1 f7       	brne	.-4      	; 0x9742 <pick_drop+0x2a80>
    9746:	8c 01       	movw	r16, r24
    9748:	ce 01       	movw	r24, r28
    974a:	85 59       	subi	r24, 0x95	; 149
    974c:	9e 4f       	sbci	r25, 0xFE	; 254
    974e:	fc 01       	movw	r30, r24
    9750:	11 83       	std	Z+1, r17	; 0x01
    9752:	00 83       	st	Z, r16
					_delay_ms(100);
    9754:	36 c4       	rjmp	.+2156   	; 0x9fc2 <pick_drop+0x3300>
    9756:	35 c4       	rjmp	.+2154   	; 0x9fc2 <pick_drop+0x3300>
					//_delay_ms(50);
				}
				else{
					forward_mm(35);
    9758:	83 e2       	ldi	r24, 0x23	; 35
    975a:	90 e0       	ldi	r25, 0x00	; 0
    975c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    9760:	9e 01       	movw	r18, r28
    9762:	23 59       	subi	r18, 0x93	; 147
    9764:	3e 4f       	sbci	r19, 0xFE	; 254
    9766:	80 e0       	ldi	r24, 0x00	; 0
    9768:	90 e0       	ldi	r25, 0x00	; 0
    976a:	a0 ea       	ldi	r26, 0xA0	; 160
    976c:	b1 e4       	ldi	r27, 0x41	; 65
    976e:	f9 01       	movw	r30, r18
    9770:	80 83       	st	Z, r24
    9772:	91 83       	std	Z+1, r25	; 0x01
    9774:	a2 83       	std	Z+2, r26	; 0x02
    9776:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9778:	8e 01       	movw	r16, r28
    977a:	0f 58       	subi	r16, 0x8F	; 143
    977c:	1e 4f       	sbci	r17, 0xFE	; 254
    977e:	ce 01       	movw	r24, r28
    9780:	83 59       	subi	r24, 0x93	; 147
    9782:	9e 4f       	sbci	r25, 0xFE	; 254
    9784:	fc 01       	movw	r30, r24
    9786:	60 81       	ld	r22, Z
    9788:	71 81       	ldd	r23, Z+1	; 0x01
    978a:	82 81       	ldd	r24, Z+2	; 0x02
    978c:	93 81       	ldd	r25, Z+3	; 0x03
    978e:	26 e6       	ldi	r18, 0x66	; 102
    9790:	36 e6       	ldi	r19, 0x66	; 102
    9792:	46 e6       	ldi	r20, 0x66	; 102
    9794:	55 e4       	ldi	r21, 0x45	; 69
    9796:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    979a:	dc 01       	movw	r26, r24
    979c:	cb 01       	movw	r24, r22
    979e:	f8 01       	movw	r30, r16
    97a0:	80 83       	st	Z, r24
    97a2:	91 83       	std	Z+1, r25	; 0x01
    97a4:	a2 83       	std	Z+2, r26	; 0x02
    97a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    97a8:	ce 01       	movw	r24, r28
    97aa:	8f 58       	subi	r24, 0x8F	; 143
    97ac:	9e 4f       	sbci	r25, 0xFE	; 254
    97ae:	11 e0       	ldi	r17, 0x01	; 1
    97b0:	fc 01       	movw	r30, r24
    97b2:	60 81       	ld	r22, Z
    97b4:	71 81       	ldd	r23, Z+1	; 0x01
    97b6:	82 81       	ldd	r24, Z+2	; 0x02
    97b8:	93 81       	ldd	r25, Z+3	; 0x03
    97ba:	20 e0       	ldi	r18, 0x00	; 0
    97bc:	30 e0       	ldi	r19, 0x00	; 0
    97be:	40 e8       	ldi	r20, 0x80	; 128
    97c0:	5f e3       	ldi	r21, 0x3F	; 63
    97c2:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    97c6:	88 23       	and	r24, r24
    97c8:	0c f0       	brlt	.+2      	; 0x97cc <pick_drop+0x2b0a>
    97ca:	10 e0       	ldi	r17, 0x00	; 0
    97cc:	11 23       	and	r17, r17
    97ce:	49 f0       	breq	.+18     	; 0x97e2 <pick_drop+0x2b20>
		__ticks = 1;
    97d0:	ce 01       	movw	r24, r28
    97d2:	8b 58       	subi	r24, 0x8B	; 139
    97d4:	9e 4f       	sbci	r25, 0xFE	; 254
    97d6:	21 e0       	ldi	r18, 0x01	; 1
    97d8:	30 e0       	ldi	r19, 0x00	; 0
    97da:	fc 01       	movw	r30, r24
    97dc:	31 83       	std	Z+1, r19	; 0x01
    97de:	20 83       	st	Z, r18
    97e0:	74 c0       	rjmp	.+232    	; 0x98ca <pick_drop+0x2c08>
	else if (__tmp > 65535)
    97e2:	ce 01       	movw	r24, r28
    97e4:	8f 58       	subi	r24, 0x8F	; 143
    97e6:	9e 4f       	sbci	r25, 0xFE	; 254
    97e8:	11 e0       	ldi	r17, 0x01	; 1
    97ea:	fc 01       	movw	r30, r24
    97ec:	60 81       	ld	r22, Z
    97ee:	71 81       	ldd	r23, Z+1	; 0x01
    97f0:	82 81       	ldd	r24, Z+2	; 0x02
    97f2:	93 81       	ldd	r25, Z+3	; 0x03
    97f4:	20 e0       	ldi	r18, 0x00	; 0
    97f6:	3f ef       	ldi	r19, 0xFF	; 255
    97f8:	4f e7       	ldi	r20, 0x7F	; 127
    97fa:	57 e4       	ldi	r21, 0x47	; 71
    97fc:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    9800:	18 16       	cp	r1, r24
    9802:	0c f0       	brlt	.+2      	; 0x9806 <pick_drop+0x2b44>
    9804:	10 e0       	ldi	r17, 0x00	; 0
    9806:	11 23       	and	r17, r17
    9808:	09 f4       	brne	.+2      	; 0x980c <pick_drop+0x2b4a>
    980a:	4d c0       	rjmp	.+154    	; 0x98a6 <pick_drop+0x2be4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    980c:	ce 01       	movw	r24, r28
    980e:	83 59       	subi	r24, 0x93	; 147
    9810:	9e 4f       	sbci	r25, 0xFE	; 254
    9812:	fc 01       	movw	r30, r24
    9814:	60 81       	ld	r22, Z
    9816:	71 81       	ldd	r23, Z+1	; 0x01
    9818:	82 81       	ldd	r24, Z+2	; 0x02
    981a:	93 81       	ldd	r25, Z+3	; 0x03
    981c:	20 e0       	ldi	r18, 0x00	; 0
    981e:	30 e0       	ldi	r19, 0x00	; 0
    9820:	40 e2       	ldi	r20, 0x20	; 32
    9822:	51 e4       	ldi	r21, 0x41	; 65
    9824:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9828:	dc 01       	movw	r26, r24
    982a:	cb 01       	movw	r24, r22
    982c:	8e 01       	movw	r16, r28
    982e:	0b 58       	subi	r16, 0x8B	; 139
    9830:	1e 4f       	sbci	r17, 0xFE	; 254
    9832:	bc 01       	movw	r22, r24
    9834:	cd 01       	movw	r24, r26
    9836:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    983a:	dc 01       	movw	r26, r24
    983c:	cb 01       	movw	r24, r22
    983e:	f8 01       	movw	r30, r16
    9840:	91 83       	std	Z+1, r25	; 0x01
    9842:	80 83       	st	Z, r24
    9844:	27 c0       	rjmp	.+78     	; 0x9894 <pick_drop+0x2bd2>
    9846:	ce 01       	movw	r24, r28
    9848:	89 58       	subi	r24, 0x89	; 137
    984a:	9e 4f       	sbci	r25, 0xFE	; 254
    984c:	20 e7       	ldi	r18, 0x70	; 112
    984e:	31 e0       	ldi	r19, 0x01	; 1
    9850:	fc 01       	movw	r30, r24
    9852:	31 83       	std	Z+1, r19	; 0x01
    9854:	20 83       	st	Z, r18
    9856:	ce 01       	movw	r24, r28
    9858:	89 58       	subi	r24, 0x89	; 137
    985a:	9e 4f       	sbci	r25, 0xFE	; 254
    985c:	fc 01       	movw	r30, r24
    985e:	80 81       	ld	r24, Z
    9860:	91 81       	ldd	r25, Z+1	; 0x01
    9862:	8c 01       	movw	r16, r24
    9864:	c8 01       	movw	r24, r16
    9866:	01 97       	sbiw	r24, 0x01	; 1
    9868:	f1 f7       	brne	.-4      	; 0x9866 <pick_drop+0x2ba4>
    986a:	8c 01       	movw	r16, r24
    986c:	ce 01       	movw	r24, r28
    986e:	89 58       	subi	r24, 0x89	; 137
    9870:	9e 4f       	sbci	r25, 0xFE	; 254
    9872:	fc 01       	movw	r30, r24
    9874:	11 83       	std	Z+1, r17	; 0x01
    9876:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9878:	ce 01       	movw	r24, r28
    987a:	8b 58       	subi	r24, 0x8B	; 139
    987c:	9e 4f       	sbci	r25, 0xFE	; 254
    987e:	9e 01       	movw	r18, r28
    9880:	2b 58       	subi	r18, 0x8B	; 139
    9882:	3e 4f       	sbci	r19, 0xFE	; 254
    9884:	f9 01       	movw	r30, r18
    9886:	20 81       	ld	r18, Z
    9888:	31 81       	ldd	r19, Z+1	; 0x01
    988a:	21 50       	subi	r18, 0x01	; 1
    988c:	30 40       	sbci	r19, 0x00	; 0
    988e:	fc 01       	movw	r30, r24
    9890:	31 83       	std	Z+1, r19	; 0x01
    9892:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9894:	ce 01       	movw	r24, r28
    9896:	8b 58       	subi	r24, 0x8B	; 139
    9898:	9e 4f       	sbci	r25, 0xFE	; 254
    989a:	fc 01       	movw	r30, r24
    989c:	80 81       	ld	r24, Z
    989e:	91 81       	ldd	r25, Z+1	; 0x01
    98a0:	00 97       	sbiw	r24, 0x00	; 0
    98a2:	89 f6       	brne	.-94     	; 0x9846 <pick_drop+0x2b84>
    98a4:	2f c0       	rjmp	.+94     	; 0x9904 <pick_drop+0x2c42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    98a6:	8e 01       	movw	r16, r28
    98a8:	0b 58       	subi	r16, 0x8B	; 139
    98aa:	1e 4f       	sbci	r17, 0xFE	; 254
    98ac:	ce 01       	movw	r24, r28
    98ae:	8f 58       	subi	r24, 0x8F	; 143
    98b0:	9e 4f       	sbci	r25, 0xFE	; 254
    98b2:	fc 01       	movw	r30, r24
    98b4:	60 81       	ld	r22, Z
    98b6:	71 81       	ldd	r23, Z+1	; 0x01
    98b8:	82 81       	ldd	r24, Z+2	; 0x02
    98ba:	93 81       	ldd	r25, Z+3	; 0x03
    98bc:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    98c0:	dc 01       	movw	r26, r24
    98c2:	cb 01       	movw	r24, r22
    98c4:	f8 01       	movw	r30, r16
    98c6:	91 83       	std	Z+1, r25	; 0x01
    98c8:	80 83       	st	Z, r24
    98ca:	ce 01       	movw	r24, r28
    98cc:	87 58       	subi	r24, 0x87	; 135
    98ce:	9e 4f       	sbci	r25, 0xFE	; 254
    98d0:	9e 01       	movw	r18, r28
    98d2:	2b 58       	subi	r18, 0x8B	; 139
    98d4:	3e 4f       	sbci	r19, 0xFE	; 254
    98d6:	f9 01       	movw	r30, r18
    98d8:	20 81       	ld	r18, Z
    98da:	31 81       	ldd	r19, Z+1	; 0x01
    98dc:	fc 01       	movw	r30, r24
    98de:	31 83       	std	Z+1, r19	; 0x01
    98e0:	20 83       	st	Z, r18
    98e2:	ce 01       	movw	r24, r28
    98e4:	87 58       	subi	r24, 0x87	; 135
    98e6:	9e 4f       	sbci	r25, 0xFE	; 254
    98e8:	fc 01       	movw	r30, r24
    98ea:	80 81       	ld	r24, Z
    98ec:	91 81       	ldd	r25, Z+1	; 0x01
    98ee:	8c 01       	movw	r16, r24
    98f0:	c8 01       	movw	r24, r16
    98f2:	01 97       	sbiw	r24, 0x01	; 1
    98f4:	f1 f7       	brne	.-4      	; 0x98f2 <pick_drop+0x2c30>
    98f6:	8c 01       	movw	r16, r24
    98f8:	ce 01       	movw	r24, r28
    98fa:	87 58       	subi	r24, 0x87	; 135
    98fc:	9e 4f       	sbci	r25, 0xFE	; 254
    98fe:	fc 01       	movw	r30, r24
    9900:	11 83       	std	Z+1, r17	; 0x01
    9902:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_right();
    9904:	0e 94 03 14 	call	0x2806	; 0x2806 <spl_right>
					front();
    9908:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    990c:	9e 01       	movw	r18, r28
    990e:	25 58       	subi	r18, 0x85	; 133
    9910:	3e 4f       	sbci	r19, 0xFE	; 254
    9912:	80 e0       	ldi	r24, 0x00	; 0
    9914:	90 e0       	ldi	r25, 0x00	; 0
    9916:	a8 ec       	ldi	r26, 0xC8	; 200
    9918:	b2 e4       	ldi	r27, 0x42	; 66
    991a:	f9 01       	movw	r30, r18
    991c:	80 83       	st	Z, r24
    991e:	91 83       	std	Z+1, r25	; 0x01
    9920:	a2 83       	std	Z+2, r26	; 0x02
    9922:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9924:	8e 01       	movw	r16, r28
    9926:	01 58       	subi	r16, 0x81	; 129
    9928:	1e 4f       	sbci	r17, 0xFE	; 254
    992a:	ce 01       	movw	r24, r28
    992c:	85 58       	subi	r24, 0x85	; 133
    992e:	9e 4f       	sbci	r25, 0xFE	; 254
    9930:	fc 01       	movw	r30, r24
    9932:	60 81       	ld	r22, Z
    9934:	71 81       	ldd	r23, Z+1	; 0x01
    9936:	82 81       	ldd	r24, Z+2	; 0x02
    9938:	93 81       	ldd	r25, Z+3	; 0x03
    993a:	26 e6       	ldi	r18, 0x66	; 102
    993c:	36 e6       	ldi	r19, 0x66	; 102
    993e:	46 e6       	ldi	r20, 0x66	; 102
    9940:	55 e4       	ldi	r21, 0x45	; 69
    9942:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9946:	dc 01       	movw	r26, r24
    9948:	cb 01       	movw	r24, r22
    994a:	f8 01       	movw	r30, r16
    994c:	80 83       	st	Z, r24
    994e:	91 83       	std	Z+1, r25	; 0x01
    9950:	a2 83       	std	Z+2, r26	; 0x02
    9952:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9954:	ce 01       	movw	r24, r28
    9956:	81 58       	subi	r24, 0x81	; 129
    9958:	9e 4f       	sbci	r25, 0xFE	; 254
    995a:	11 e0       	ldi	r17, 0x01	; 1
    995c:	fc 01       	movw	r30, r24
    995e:	60 81       	ld	r22, Z
    9960:	71 81       	ldd	r23, Z+1	; 0x01
    9962:	82 81       	ldd	r24, Z+2	; 0x02
    9964:	93 81       	ldd	r25, Z+3	; 0x03
    9966:	20 e0       	ldi	r18, 0x00	; 0
    9968:	30 e0       	ldi	r19, 0x00	; 0
    996a:	40 e8       	ldi	r20, 0x80	; 128
    996c:	5f e3       	ldi	r21, 0x3F	; 63
    996e:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    9972:	88 23       	and	r24, r24
    9974:	0c f0       	brlt	.+2      	; 0x9978 <pick_drop+0x2cb6>
    9976:	10 e0       	ldi	r17, 0x00	; 0
    9978:	11 23       	and	r17, r17
    997a:	49 f0       	breq	.+18     	; 0x998e <pick_drop+0x2ccc>
		__ticks = 1;
    997c:	ce 01       	movw	r24, r28
    997e:	8d 57       	subi	r24, 0x7D	; 125
    9980:	9e 4f       	sbci	r25, 0xFE	; 254
    9982:	21 e0       	ldi	r18, 0x01	; 1
    9984:	30 e0       	ldi	r19, 0x00	; 0
    9986:	fc 01       	movw	r30, r24
    9988:	31 83       	std	Z+1, r19	; 0x01
    998a:	20 83       	st	Z, r18
    998c:	74 c0       	rjmp	.+232    	; 0x9a76 <pick_drop+0x2db4>
	else if (__tmp > 65535)
    998e:	ce 01       	movw	r24, r28
    9990:	81 58       	subi	r24, 0x81	; 129
    9992:	9e 4f       	sbci	r25, 0xFE	; 254
    9994:	11 e0       	ldi	r17, 0x01	; 1
    9996:	fc 01       	movw	r30, r24
    9998:	60 81       	ld	r22, Z
    999a:	71 81       	ldd	r23, Z+1	; 0x01
    999c:	82 81       	ldd	r24, Z+2	; 0x02
    999e:	93 81       	ldd	r25, Z+3	; 0x03
    99a0:	20 e0       	ldi	r18, 0x00	; 0
    99a2:	3f ef       	ldi	r19, 0xFF	; 255
    99a4:	4f e7       	ldi	r20, 0x7F	; 127
    99a6:	57 e4       	ldi	r21, 0x47	; 71
    99a8:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    99ac:	18 16       	cp	r1, r24
    99ae:	0c f0       	brlt	.+2      	; 0x99b2 <pick_drop+0x2cf0>
    99b0:	10 e0       	ldi	r17, 0x00	; 0
    99b2:	11 23       	and	r17, r17
    99b4:	09 f4       	brne	.+2      	; 0x99b8 <pick_drop+0x2cf6>
    99b6:	4d c0       	rjmp	.+154    	; 0x9a52 <pick_drop+0x2d90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    99b8:	ce 01       	movw	r24, r28
    99ba:	85 58       	subi	r24, 0x85	; 133
    99bc:	9e 4f       	sbci	r25, 0xFE	; 254
    99be:	fc 01       	movw	r30, r24
    99c0:	60 81       	ld	r22, Z
    99c2:	71 81       	ldd	r23, Z+1	; 0x01
    99c4:	82 81       	ldd	r24, Z+2	; 0x02
    99c6:	93 81       	ldd	r25, Z+3	; 0x03
    99c8:	20 e0       	ldi	r18, 0x00	; 0
    99ca:	30 e0       	ldi	r19, 0x00	; 0
    99cc:	40 e2       	ldi	r20, 0x20	; 32
    99ce:	51 e4       	ldi	r21, 0x41	; 65
    99d0:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    99d4:	dc 01       	movw	r26, r24
    99d6:	cb 01       	movw	r24, r22
    99d8:	8e 01       	movw	r16, r28
    99da:	0d 57       	subi	r16, 0x7D	; 125
    99dc:	1e 4f       	sbci	r17, 0xFE	; 254
    99de:	bc 01       	movw	r22, r24
    99e0:	cd 01       	movw	r24, r26
    99e2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    99e6:	dc 01       	movw	r26, r24
    99e8:	cb 01       	movw	r24, r22
    99ea:	f8 01       	movw	r30, r16
    99ec:	91 83       	std	Z+1, r25	; 0x01
    99ee:	80 83       	st	Z, r24
    99f0:	27 c0       	rjmp	.+78     	; 0x9a40 <pick_drop+0x2d7e>
    99f2:	ce 01       	movw	r24, r28
    99f4:	8b 57       	subi	r24, 0x7B	; 123
    99f6:	9e 4f       	sbci	r25, 0xFE	; 254
    99f8:	20 e7       	ldi	r18, 0x70	; 112
    99fa:	31 e0       	ldi	r19, 0x01	; 1
    99fc:	fc 01       	movw	r30, r24
    99fe:	31 83       	std	Z+1, r19	; 0x01
    9a00:	20 83       	st	Z, r18
    9a02:	ce 01       	movw	r24, r28
    9a04:	8b 57       	subi	r24, 0x7B	; 123
    9a06:	9e 4f       	sbci	r25, 0xFE	; 254
    9a08:	fc 01       	movw	r30, r24
    9a0a:	80 81       	ld	r24, Z
    9a0c:	91 81       	ldd	r25, Z+1	; 0x01
    9a0e:	8c 01       	movw	r16, r24
    9a10:	c8 01       	movw	r24, r16
    9a12:	01 97       	sbiw	r24, 0x01	; 1
    9a14:	f1 f7       	brne	.-4      	; 0x9a12 <pick_drop+0x2d50>
    9a16:	8c 01       	movw	r16, r24
    9a18:	ce 01       	movw	r24, r28
    9a1a:	8b 57       	subi	r24, 0x7B	; 123
    9a1c:	9e 4f       	sbci	r25, 0xFE	; 254
    9a1e:	fc 01       	movw	r30, r24
    9a20:	11 83       	std	Z+1, r17	; 0x01
    9a22:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a24:	ce 01       	movw	r24, r28
    9a26:	8d 57       	subi	r24, 0x7D	; 125
    9a28:	9e 4f       	sbci	r25, 0xFE	; 254
    9a2a:	9e 01       	movw	r18, r28
    9a2c:	2d 57       	subi	r18, 0x7D	; 125
    9a2e:	3e 4f       	sbci	r19, 0xFE	; 254
    9a30:	f9 01       	movw	r30, r18
    9a32:	20 81       	ld	r18, Z
    9a34:	31 81       	ldd	r19, Z+1	; 0x01
    9a36:	21 50       	subi	r18, 0x01	; 1
    9a38:	30 40       	sbci	r19, 0x00	; 0
    9a3a:	fc 01       	movw	r30, r24
    9a3c:	31 83       	std	Z+1, r19	; 0x01
    9a3e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a40:	ce 01       	movw	r24, r28
    9a42:	8d 57       	subi	r24, 0x7D	; 125
    9a44:	9e 4f       	sbci	r25, 0xFE	; 254
    9a46:	fc 01       	movw	r30, r24
    9a48:	80 81       	ld	r24, Z
    9a4a:	91 81       	ldd	r25, Z+1	; 0x01
    9a4c:	00 97       	sbiw	r24, 0x00	; 0
    9a4e:	89 f6       	brne	.-94     	; 0x99f2 <pick_drop+0x2d30>
    9a50:	2f c0       	rjmp	.+94     	; 0x9ab0 <pick_drop+0x2dee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a52:	8e 01       	movw	r16, r28
    9a54:	0d 57       	subi	r16, 0x7D	; 125
    9a56:	1e 4f       	sbci	r17, 0xFE	; 254
    9a58:	ce 01       	movw	r24, r28
    9a5a:	81 58       	subi	r24, 0x81	; 129
    9a5c:	9e 4f       	sbci	r25, 0xFE	; 254
    9a5e:	fc 01       	movw	r30, r24
    9a60:	60 81       	ld	r22, Z
    9a62:	71 81       	ldd	r23, Z+1	; 0x01
    9a64:	82 81       	ldd	r24, Z+2	; 0x02
    9a66:	93 81       	ldd	r25, Z+3	; 0x03
    9a68:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9a6c:	dc 01       	movw	r26, r24
    9a6e:	cb 01       	movw	r24, r22
    9a70:	f8 01       	movw	r30, r16
    9a72:	91 83       	std	Z+1, r25	; 0x01
    9a74:	80 83       	st	Z, r24
    9a76:	ce 01       	movw	r24, r28
    9a78:	89 57       	subi	r24, 0x79	; 121
    9a7a:	9e 4f       	sbci	r25, 0xFE	; 254
    9a7c:	9e 01       	movw	r18, r28
    9a7e:	2d 57       	subi	r18, 0x7D	; 125
    9a80:	3e 4f       	sbci	r19, 0xFE	; 254
    9a82:	f9 01       	movw	r30, r18
    9a84:	20 81       	ld	r18, Z
    9a86:	31 81       	ldd	r19, Z+1	; 0x01
    9a88:	fc 01       	movw	r30, r24
    9a8a:	31 83       	std	Z+1, r19	; 0x01
    9a8c:	20 83       	st	Z, r18
    9a8e:	ce 01       	movw	r24, r28
    9a90:	89 57       	subi	r24, 0x79	; 121
    9a92:	9e 4f       	sbci	r25, 0xFE	; 254
    9a94:	fc 01       	movw	r30, r24
    9a96:	80 81       	ld	r24, Z
    9a98:	91 81       	ldd	r25, Z+1	; 0x01
    9a9a:	8c 01       	movw	r16, r24
    9a9c:	c8 01       	movw	r24, r16
    9a9e:	01 97       	sbiw	r24, 0x01	; 1
    9aa0:	f1 f7       	brne	.-4      	; 0x9a9e <pick_drop+0x2ddc>
    9aa2:	8c 01       	movw	r16, r24
    9aa4:	ce 01       	movw	r24, r28
    9aa6:	89 57       	subi	r24, 0x79	; 121
    9aa8:	9e 4f       	sbci	r25, 0xFE	; 254
    9aaa:	fc 01       	movw	r30, r24
    9aac:	11 83       	std	Z+1, r17	; 0x01
    9aae:	00 83       	st	Z, r16
					_delay_ms(100);
					left_degrees(50);
    9ab0:	82 e3       	ldi	r24, 0x32	; 50
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
    9ab8:	9e 01       	movw	r18, r28
    9aba:	27 57       	subi	r18, 0x77	; 119
    9abc:	3e 4f       	sbci	r19, 0xFE	; 254
    9abe:	80 e0       	ldi	r24, 0x00	; 0
    9ac0:	90 e0       	ldi	r25, 0x00	; 0
    9ac2:	a0 ea       	ldi	r26, 0xA0	; 160
    9ac4:	b1 e4       	ldi	r27, 0x41	; 65
    9ac6:	f9 01       	movw	r30, r18
    9ac8:	80 83       	st	Z, r24
    9aca:	91 83       	std	Z+1, r25	; 0x01
    9acc:	a2 83       	std	Z+2, r26	; 0x02
    9ace:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9ad0:	8e 01       	movw	r16, r28
    9ad2:	03 57       	subi	r16, 0x73	; 115
    9ad4:	1e 4f       	sbci	r17, 0xFE	; 254
    9ad6:	ce 01       	movw	r24, r28
    9ad8:	87 57       	subi	r24, 0x77	; 119
    9ada:	9e 4f       	sbci	r25, 0xFE	; 254
    9adc:	fc 01       	movw	r30, r24
    9ade:	60 81       	ld	r22, Z
    9ae0:	71 81       	ldd	r23, Z+1	; 0x01
    9ae2:	82 81       	ldd	r24, Z+2	; 0x02
    9ae4:	93 81       	ldd	r25, Z+3	; 0x03
    9ae6:	26 e6       	ldi	r18, 0x66	; 102
    9ae8:	36 e6       	ldi	r19, 0x66	; 102
    9aea:	46 e6       	ldi	r20, 0x66	; 102
    9aec:	55 e4       	ldi	r21, 0x45	; 69
    9aee:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9af2:	dc 01       	movw	r26, r24
    9af4:	cb 01       	movw	r24, r22
    9af6:	f8 01       	movw	r30, r16
    9af8:	80 83       	st	Z, r24
    9afa:	91 83       	std	Z+1, r25	; 0x01
    9afc:	a2 83       	std	Z+2, r26	; 0x02
    9afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9b00:	ce 01       	movw	r24, r28
    9b02:	83 57       	subi	r24, 0x73	; 115
    9b04:	9e 4f       	sbci	r25, 0xFE	; 254
    9b06:	11 e0       	ldi	r17, 0x01	; 1
    9b08:	fc 01       	movw	r30, r24
    9b0a:	60 81       	ld	r22, Z
    9b0c:	71 81       	ldd	r23, Z+1	; 0x01
    9b0e:	82 81       	ldd	r24, Z+2	; 0x02
    9b10:	93 81       	ldd	r25, Z+3	; 0x03
    9b12:	20 e0       	ldi	r18, 0x00	; 0
    9b14:	30 e0       	ldi	r19, 0x00	; 0
    9b16:	40 e8       	ldi	r20, 0x80	; 128
    9b18:	5f e3       	ldi	r21, 0x3F	; 63
    9b1a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    9b1e:	88 23       	and	r24, r24
    9b20:	0c f0       	brlt	.+2      	; 0x9b24 <pick_drop+0x2e62>
    9b22:	10 e0       	ldi	r17, 0x00	; 0
    9b24:	11 23       	and	r17, r17
    9b26:	49 f0       	breq	.+18     	; 0x9b3a <pick_drop+0x2e78>
		__ticks = 1;
    9b28:	ce 01       	movw	r24, r28
    9b2a:	8f 56       	subi	r24, 0x6F	; 111
    9b2c:	9e 4f       	sbci	r25, 0xFE	; 254
    9b2e:	21 e0       	ldi	r18, 0x01	; 1
    9b30:	30 e0       	ldi	r19, 0x00	; 0
    9b32:	fc 01       	movw	r30, r24
    9b34:	31 83       	std	Z+1, r19	; 0x01
    9b36:	20 83       	st	Z, r18
    9b38:	74 c0       	rjmp	.+232    	; 0x9c22 <pick_drop+0x2f60>
	else if (__tmp > 65535)
    9b3a:	ce 01       	movw	r24, r28
    9b3c:	83 57       	subi	r24, 0x73	; 115
    9b3e:	9e 4f       	sbci	r25, 0xFE	; 254
    9b40:	11 e0       	ldi	r17, 0x01	; 1
    9b42:	fc 01       	movw	r30, r24
    9b44:	60 81       	ld	r22, Z
    9b46:	71 81       	ldd	r23, Z+1	; 0x01
    9b48:	82 81       	ldd	r24, Z+2	; 0x02
    9b4a:	93 81       	ldd	r25, Z+3	; 0x03
    9b4c:	20 e0       	ldi	r18, 0x00	; 0
    9b4e:	3f ef       	ldi	r19, 0xFF	; 255
    9b50:	4f e7       	ldi	r20, 0x7F	; 127
    9b52:	57 e4       	ldi	r21, 0x47	; 71
    9b54:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    9b58:	18 16       	cp	r1, r24
    9b5a:	0c f0       	brlt	.+2      	; 0x9b5e <pick_drop+0x2e9c>
    9b5c:	10 e0       	ldi	r17, 0x00	; 0
    9b5e:	11 23       	and	r17, r17
    9b60:	09 f4       	brne	.+2      	; 0x9b64 <pick_drop+0x2ea2>
    9b62:	4d c0       	rjmp	.+154    	; 0x9bfe <pick_drop+0x2f3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9b64:	ce 01       	movw	r24, r28
    9b66:	87 57       	subi	r24, 0x77	; 119
    9b68:	9e 4f       	sbci	r25, 0xFE	; 254
    9b6a:	fc 01       	movw	r30, r24
    9b6c:	60 81       	ld	r22, Z
    9b6e:	71 81       	ldd	r23, Z+1	; 0x01
    9b70:	82 81       	ldd	r24, Z+2	; 0x02
    9b72:	93 81       	ldd	r25, Z+3	; 0x03
    9b74:	20 e0       	ldi	r18, 0x00	; 0
    9b76:	30 e0       	ldi	r19, 0x00	; 0
    9b78:	40 e2       	ldi	r20, 0x20	; 32
    9b7a:	51 e4       	ldi	r21, 0x41	; 65
    9b7c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9b80:	dc 01       	movw	r26, r24
    9b82:	cb 01       	movw	r24, r22
    9b84:	8e 01       	movw	r16, r28
    9b86:	0f 56       	subi	r16, 0x6F	; 111
    9b88:	1e 4f       	sbci	r17, 0xFE	; 254
    9b8a:	bc 01       	movw	r22, r24
    9b8c:	cd 01       	movw	r24, r26
    9b8e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9b92:	dc 01       	movw	r26, r24
    9b94:	cb 01       	movw	r24, r22
    9b96:	f8 01       	movw	r30, r16
    9b98:	91 83       	std	Z+1, r25	; 0x01
    9b9a:	80 83       	st	Z, r24
    9b9c:	27 c0       	rjmp	.+78     	; 0x9bec <pick_drop+0x2f2a>
    9b9e:	ce 01       	movw	r24, r28
    9ba0:	8d 56       	subi	r24, 0x6D	; 109
    9ba2:	9e 4f       	sbci	r25, 0xFE	; 254
    9ba4:	20 e7       	ldi	r18, 0x70	; 112
    9ba6:	31 e0       	ldi	r19, 0x01	; 1
    9ba8:	fc 01       	movw	r30, r24
    9baa:	31 83       	std	Z+1, r19	; 0x01
    9bac:	20 83       	st	Z, r18
    9bae:	ce 01       	movw	r24, r28
    9bb0:	8d 56       	subi	r24, 0x6D	; 109
    9bb2:	9e 4f       	sbci	r25, 0xFE	; 254
    9bb4:	fc 01       	movw	r30, r24
    9bb6:	80 81       	ld	r24, Z
    9bb8:	91 81       	ldd	r25, Z+1	; 0x01
    9bba:	8c 01       	movw	r16, r24
    9bbc:	c8 01       	movw	r24, r16
    9bbe:	01 97       	sbiw	r24, 0x01	; 1
    9bc0:	f1 f7       	brne	.-4      	; 0x9bbe <pick_drop+0x2efc>
    9bc2:	8c 01       	movw	r16, r24
    9bc4:	ce 01       	movw	r24, r28
    9bc6:	8d 56       	subi	r24, 0x6D	; 109
    9bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    9bca:	fc 01       	movw	r30, r24
    9bcc:	11 83       	std	Z+1, r17	; 0x01
    9bce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9bd0:	ce 01       	movw	r24, r28
    9bd2:	8f 56       	subi	r24, 0x6F	; 111
    9bd4:	9e 4f       	sbci	r25, 0xFE	; 254
    9bd6:	9e 01       	movw	r18, r28
    9bd8:	2f 56       	subi	r18, 0x6F	; 111
    9bda:	3e 4f       	sbci	r19, 0xFE	; 254
    9bdc:	f9 01       	movw	r30, r18
    9bde:	20 81       	ld	r18, Z
    9be0:	31 81       	ldd	r19, Z+1	; 0x01
    9be2:	21 50       	subi	r18, 0x01	; 1
    9be4:	30 40       	sbci	r19, 0x00	; 0
    9be6:	fc 01       	movw	r30, r24
    9be8:	31 83       	std	Z+1, r19	; 0x01
    9bea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9bec:	ce 01       	movw	r24, r28
    9bee:	8f 56       	subi	r24, 0x6F	; 111
    9bf0:	9e 4f       	sbci	r25, 0xFE	; 254
    9bf2:	fc 01       	movw	r30, r24
    9bf4:	80 81       	ld	r24, Z
    9bf6:	91 81       	ldd	r25, Z+1	; 0x01
    9bf8:	00 97       	sbiw	r24, 0x00	; 0
    9bfa:	89 f6       	brne	.-94     	; 0x9b9e <pick_drop+0x2edc>
    9bfc:	2f c0       	rjmp	.+94     	; 0x9c5c <pick_drop+0x2f9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9bfe:	8e 01       	movw	r16, r28
    9c00:	0f 56       	subi	r16, 0x6F	; 111
    9c02:	1e 4f       	sbci	r17, 0xFE	; 254
    9c04:	ce 01       	movw	r24, r28
    9c06:	83 57       	subi	r24, 0x73	; 115
    9c08:	9e 4f       	sbci	r25, 0xFE	; 254
    9c0a:	fc 01       	movw	r30, r24
    9c0c:	60 81       	ld	r22, Z
    9c0e:	71 81       	ldd	r23, Z+1	; 0x01
    9c10:	82 81       	ldd	r24, Z+2	; 0x02
    9c12:	93 81       	ldd	r25, Z+3	; 0x03
    9c14:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9c18:	dc 01       	movw	r26, r24
    9c1a:	cb 01       	movw	r24, r22
    9c1c:	f8 01       	movw	r30, r16
    9c1e:	91 83       	std	Z+1, r25	; 0x01
    9c20:	80 83       	st	Z, r24
    9c22:	ce 01       	movw	r24, r28
    9c24:	8b 56       	subi	r24, 0x6B	; 107
    9c26:	9e 4f       	sbci	r25, 0xFE	; 254
    9c28:	9e 01       	movw	r18, r28
    9c2a:	2f 56       	subi	r18, 0x6F	; 111
    9c2c:	3e 4f       	sbci	r19, 0xFE	; 254
    9c2e:	f9 01       	movw	r30, r18
    9c30:	20 81       	ld	r18, Z
    9c32:	31 81       	ldd	r19, Z+1	; 0x01
    9c34:	fc 01       	movw	r30, r24
    9c36:	31 83       	std	Z+1, r19	; 0x01
    9c38:	20 83       	st	Z, r18
    9c3a:	ce 01       	movw	r24, r28
    9c3c:	8b 56       	subi	r24, 0x6B	; 107
    9c3e:	9e 4f       	sbci	r25, 0xFE	; 254
    9c40:	fc 01       	movw	r30, r24
    9c42:	80 81       	ld	r24, Z
    9c44:	91 81       	ldd	r25, Z+1	; 0x01
    9c46:	8c 01       	movw	r16, r24
    9c48:	c8 01       	movw	r24, r16
    9c4a:	01 97       	sbiw	r24, 0x01	; 1
    9c4c:	f1 f7       	brne	.-4      	; 0x9c4a <pick_drop+0x2f88>
    9c4e:	8c 01       	movw	r16, r24
    9c50:	ce 01       	movw	r24, r28
    9c52:	8b 56       	subi	r24, 0x6B	; 107
    9c54:	9e 4f       	sbci	r25, 0xFE	; 254
    9c56:	fc 01       	movw	r30, r24
    9c58:	11 83       	std	Z+1, r17	; 0x01
    9c5a:	00 83       	st	Z, r16
					_delay_ms(20);
					back_mm(55);
    9c5c:	87 e3       	ldi	r24, 0x37	; 55
    9c5e:	90 e0       	ldi	r25, 0x00	; 0
    9c60:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    9c64:	9e 01       	movw	r18, r28
    9c66:	29 56       	subi	r18, 0x69	; 105
    9c68:	3e 4f       	sbci	r19, 0xFE	; 254
    9c6a:	80 e0       	ldi	r24, 0x00	; 0
    9c6c:	90 e0       	ldi	r25, 0x00	; 0
    9c6e:	a0 ea       	ldi	r26, 0xA0	; 160
    9c70:	b1 e4       	ldi	r27, 0x41	; 65
    9c72:	f9 01       	movw	r30, r18
    9c74:	80 83       	st	Z, r24
    9c76:	91 83       	std	Z+1, r25	; 0x01
    9c78:	a2 83       	std	Z+2, r26	; 0x02
    9c7a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9c7c:	8e 01       	movw	r16, r28
    9c7e:	05 56       	subi	r16, 0x65	; 101
    9c80:	1e 4f       	sbci	r17, 0xFE	; 254
    9c82:	ce 01       	movw	r24, r28
    9c84:	89 56       	subi	r24, 0x69	; 105
    9c86:	9e 4f       	sbci	r25, 0xFE	; 254
    9c88:	fc 01       	movw	r30, r24
    9c8a:	60 81       	ld	r22, Z
    9c8c:	71 81       	ldd	r23, Z+1	; 0x01
    9c8e:	82 81       	ldd	r24, Z+2	; 0x02
    9c90:	93 81       	ldd	r25, Z+3	; 0x03
    9c92:	26 e6       	ldi	r18, 0x66	; 102
    9c94:	36 e6       	ldi	r19, 0x66	; 102
    9c96:	46 e6       	ldi	r20, 0x66	; 102
    9c98:	55 e4       	ldi	r21, 0x45	; 69
    9c9a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9c9e:	dc 01       	movw	r26, r24
    9ca0:	cb 01       	movw	r24, r22
    9ca2:	f8 01       	movw	r30, r16
    9ca4:	80 83       	st	Z, r24
    9ca6:	91 83       	std	Z+1, r25	; 0x01
    9ca8:	a2 83       	std	Z+2, r26	; 0x02
    9caa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9cac:	ce 01       	movw	r24, r28
    9cae:	85 56       	subi	r24, 0x65	; 101
    9cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    9cb2:	11 e0       	ldi	r17, 0x01	; 1
    9cb4:	fc 01       	movw	r30, r24
    9cb6:	60 81       	ld	r22, Z
    9cb8:	71 81       	ldd	r23, Z+1	; 0x01
    9cba:	82 81       	ldd	r24, Z+2	; 0x02
    9cbc:	93 81       	ldd	r25, Z+3	; 0x03
    9cbe:	20 e0       	ldi	r18, 0x00	; 0
    9cc0:	30 e0       	ldi	r19, 0x00	; 0
    9cc2:	40 e8       	ldi	r20, 0x80	; 128
    9cc4:	5f e3       	ldi	r21, 0x3F	; 63
    9cc6:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    9cca:	88 23       	and	r24, r24
    9ccc:	0c f0       	brlt	.+2      	; 0x9cd0 <pick_drop+0x300e>
    9cce:	10 e0       	ldi	r17, 0x00	; 0
    9cd0:	11 23       	and	r17, r17
    9cd2:	49 f0       	breq	.+18     	; 0x9ce6 <pick_drop+0x3024>
		__ticks = 1;
    9cd4:	ce 01       	movw	r24, r28
    9cd6:	81 56       	subi	r24, 0x61	; 97
    9cd8:	9e 4f       	sbci	r25, 0xFE	; 254
    9cda:	21 e0       	ldi	r18, 0x01	; 1
    9cdc:	30 e0       	ldi	r19, 0x00	; 0
    9cde:	fc 01       	movw	r30, r24
    9ce0:	31 83       	std	Z+1, r19	; 0x01
    9ce2:	20 83       	st	Z, r18
    9ce4:	74 c0       	rjmp	.+232    	; 0x9dce <pick_drop+0x310c>
	else if (__tmp > 65535)
    9ce6:	ce 01       	movw	r24, r28
    9ce8:	85 56       	subi	r24, 0x65	; 101
    9cea:	9e 4f       	sbci	r25, 0xFE	; 254
    9cec:	11 e0       	ldi	r17, 0x01	; 1
    9cee:	fc 01       	movw	r30, r24
    9cf0:	60 81       	ld	r22, Z
    9cf2:	71 81       	ldd	r23, Z+1	; 0x01
    9cf4:	82 81       	ldd	r24, Z+2	; 0x02
    9cf6:	93 81       	ldd	r25, Z+3	; 0x03
    9cf8:	20 e0       	ldi	r18, 0x00	; 0
    9cfa:	3f ef       	ldi	r19, 0xFF	; 255
    9cfc:	4f e7       	ldi	r20, 0x7F	; 127
    9cfe:	57 e4       	ldi	r21, 0x47	; 71
    9d00:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    9d04:	18 16       	cp	r1, r24
    9d06:	0c f0       	brlt	.+2      	; 0x9d0a <pick_drop+0x3048>
    9d08:	10 e0       	ldi	r17, 0x00	; 0
    9d0a:	11 23       	and	r17, r17
    9d0c:	09 f4       	brne	.+2      	; 0x9d10 <pick_drop+0x304e>
    9d0e:	4d c0       	rjmp	.+154    	; 0x9daa <pick_drop+0x30e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9d10:	ce 01       	movw	r24, r28
    9d12:	89 56       	subi	r24, 0x69	; 105
    9d14:	9e 4f       	sbci	r25, 0xFE	; 254
    9d16:	fc 01       	movw	r30, r24
    9d18:	60 81       	ld	r22, Z
    9d1a:	71 81       	ldd	r23, Z+1	; 0x01
    9d1c:	82 81       	ldd	r24, Z+2	; 0x02
    9d1e:	93 81       	ldd	r25, Z+3	; 0x03
    9d20:	20 e0       	ldi	r18, 0x00	; 0
    9d22:	30 e0       	ldi	r19, 0x00	; 0
    9d24:	40 e2       	ldi	r20, 0x20	; 32
    9d26:	51 e4       	ldi	r21, 0x41	; 65
    9d28:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9d2c:	dc 01       	movw	r26, r24
    9d2e:	cb 01       	movw	r24, r22
    9d30:	8e 01       	movw	r16, r28
    9d32:	01 56       	subi	r16, 0x61	; 97
    9d34:	1e 4f       	sbci	r17, 0xFE	; 254
    9d36:	bc 01       	movw	r22, r24
    9d38:	cd 01       	movw	r24, r26
    9d3a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9d3e:	dc 01       	movw	r26, r24
    9d40:	cb 01       	movw	r24, r22
    9d42:	f8 01       	movw	r30, r16
    9d44:	91 83       	std	Z+1, r25	; 0x01
    9d46:	80 83       	st	Z, r24
    9d48:	27 c0       	rjmp	.+78     	; 0x9d98 <pick_drop+0x30d6>
    9d4a:	ce 01       	movw	r24, r28
    9d4c:	8f 55       	subi	r24, 0x5F	; 95
    9d4e:	9e 4f       	sbci	r25, 0xFE	; 254
    9d50:	20 e7       	ldi	r18, 0x70	; 112
    9d52:	31 e0       	ldi	r19, 0x01	; 1
    9d54:	fc 01       	movw	r30, r24
    9d56:	31 83       	std	Z+1, r19	; 0x01
    9d58:	20 83       	st	Z, r18
    9d5a:	ce 01       	movw	r24, r28
    9d5c:	8f 55       	subi	r24, 0x5F	; 95
    9d5e:	9e 4f       	sbci	r25, 0xFE	; 254
    9d60:	fc 01       	movw	r30, r24
    9d62:	80 81       	ld	r24, Z
    9d64:	91 81       	ldd	r25, Z+1	; 0x01
    9d66:	8c 01       	movw	r16, r24
    9d68:	c8 01       	movw	r24, r16
    9d6a:	01 97       	sbiw	r24, 0x01	; 1
    9d6c:	f1 f7       	brne	.-4      	; 0x9d6a <pick_drop+0x30a8>
    9d6e:	8c 01       	movw	r16, r24
    9d70:	ce 01       	movw	r24, r28
    9d72:	8f 55       	subi	r24, 0x5F	; 95
    9d74:	9e 4f       	sbci	r25, 0xFE	; 254
    9d76:	fc 01       	movw	r30, r24
    9d78:	11 83       	std	Z+1, r17	; 0x01
    9d7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d7c:	ce 01       	movw	r24, r28
    9d7e:	81 56       	subi	r24, 0x61	; 97
    9d80:	9e 4f       	sbci	r25, 0xFE	; 254
    9d82:	9e 01       	movw	r18, r28
    9d84:	21 56       	subi	r18, 0x61	; 97
    9d86:	3e 4f       	sbci	r19, 0xFE	; 254
    9d88:	f9 01       	movw	r30, r18
    9d8a:	20 81       	ld	r18, Z
    9d8c:	31 81       	ldd	r19, Z+1	; 0x01
    9d8e:	21 50       	subi	r18, 0x01	; 1
    9d90:	30 40       	sbci	r19, 0x00	; 0
    9d92:	fc 01       	movw	r30, r24
    9d94:	31 83       	std	Z+1, r19	; 0x01
    9d96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d98:	ce 01       	movw	r24, r28
    9d9a:	81 56       	subi	r24, 0x61	; 97
    9d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    9d9e:	fc 01       	movw	r30, r24
    9da0:	80 81       	ld	r24, Z
    9da2:	91 81       	ldd	r25, Z+1	; 0x01
    9da4:	00 97       	sbiw	r24, 0x00	; 0
    9da6:	89 f6       	brne	.-94     	; 0x9d4a <pick_drop+0x3088>
    9da8:	0c c1       	rjmp	.+536    	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9daa:	8e 01       	movw	r16, r28
    9dac:	01 56       	subi	r16, 0x61	; 97
    9dae:	1e 4f       	sbci	r17, 0xFE	; 254
    9db0:	ce 01       	movw	r24, r28
    9db2:	85 56       	subi	r24, 0x65	; 101
    9db4:	9e 4f       	sbci	r25, 0xFE	; 254
    9db6:	fc 01       	movw	r30, r24
    9db8:	60 81       	ld	r22, Z
    9dba:	71 81       	ldd	r23, Z+1	; 0x01
    9dbc:	82 81       	ldd	r24, Z+2	; 0x02
    9dbe:	93 81       	ldd	r25, Z+3	; 0x03
    9dc0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9dc4:	dc 01       	movw	r26, r24
    9dc6:	cb 01       	movw	r24, r22
    9dc8:	f8 01       	movw	r30, r16
    9dca:	91 83       	std	Z+1, r25	; 0x01
    9dcc:	80 83       	st	Z, r24
    9dce:	ce 01       	movw	r24, r28
    9dd0:	8d 55       	subi	r24, 0x5D	; 93
    9dd2:	9e 4f       	sbci	r25, 0xFE	; 254
    9dd4:	9e 01       	movw	r18, r28
    9dd6:	21 56       	subi	r18, 0x61	; 97
    9dd8:	3e 4f       	sbci	r19, 0xFE	; 254
    9dda:	f9 01       	movw	r30, r18
    9ddc:	20 81       	ld	r18, Z
    9dde:	31 81       	ldd	r19, Z+1	; 0x01
    9de0:	fc 01       	movw	r30, r24
    9de2:	31 83       	std	Z+1, r19	; 0x01
    9de4:	20 83       	st	Z, r18
    9de6:	ce 01       	movw	r24, r28
    9de8:	8d 55       	subi	r24, 0x5D	; 93
    9dea:	9e 4f       	sbci	r25, 0xFE	; 254
    9dec:	fc 01       	movw	r30, r24
    9dee:	80 81       	ld	r24, Z
    9df0:	91 81       	ldd	r25, Z+1	; 0x01
    9df2:	8c 01       	movw	r16, r24
    9df4:	c8 01       	movw	r24, r16
    9df6:	01 97       	sbiw	r24, 0x01	; 1
    9df8:	f1 f7       	brne	.-4      	; 0x9df6 <pick_drop+0x3134>
    9dfa:	8c 01       	movw	r16, r24
    9dfc:	ce 01       	movw	r24, r28
    9dfe:	8d 55       	subi	r24, 0x5D	; 93
    9e00:	9e 4f       	sbci	r25, 0xFE	; 254
    9e02:	fc 01       	movw	r30, r24
    9e04:	11 83       	std	Z+1, r17	; 0x01
    9e06:	00 83       	st	Z, r16
    9e08:	dc c0       	rjmp	.+440    	; 0x9fc2 <pick_drop+0x3300>
					_delay_ms(20);
				}
		}
			else if(pd=='8'){
    9e0a:	ce 01       	movw	r24, r28
    9e0c:	8d 54       	subi	r24, 0x4D	; 77
    9e0e:	9e 4f       	sbci	r25, 0xFE	; 254
    9e10:	fc 01       	movw	r30, r24
    9e12:	80 81       	ld	r24, Z
    9e14:	88 33       	cpi	r24, 0x38	; 56
    9e16:	09 f0       	breq	.+2      	; 0x9e1a <pick_drop+0x3158>
    9e18:	d4 c0       	rjmp	.+424    	; 0x9fc2 <pick_drop+0x3300>
				front();
    9e1a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <front>
    9e1e:	9e 01       	movw	r18, r28
    9e20:	2b 55       	subi	r18, 0x5B	; 91
    9e22:	3e 4f       	sbci	r19, 0xFE	; 254
    9e24:	80 e0       	ldi	r24, 0x00	; 0
    9e26:	90 e0       	ldi	r25, 0x00	; 0
    9e28:	a6 e9       	ldi	r26, 0x96	; 150
    9e2a:	b3 e4       	ldi	r27, 0x43	; 67
    9e2c:	f9 01       	movw	r30, r18
    9e2e:	80 83       	st	Z, r24
    9e30:	91 83       	std	Z+1, r25	; 0x01
    9e32:	a2 83       	std	Z+2, r26	; 0x02
    9e34:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9e36:	8e 01       	movw	r16, r28
    9e38:	07 55       	subi	r16, 0x57	; 87
    9e3a:	1e 4f       	sbci	r17, 0xFE	; 254
    9e3c:	ce 01       	movw	r24, r28
    9e3e:	8b 55       	subi	r24, 0x5B	; 91
    9e40:	9e 4f       	sbci	r25, 0xFE	; 254
    9e42:	fc 01       	movw	r30, r24
    9e44:	60 81       	ld	r22, Z
    9e46:	71 81       	ldd	r23, Z+1	; 0x01
    9e48:	82 81       	ldd	r24, Z+2	; 0x02
    9e4a:	93 81       	ldd	r25, Z+3	; 0x03
    9e4c:	26 e6       	ldi	r18, 0x66	; 102
    9e4e:	36 e6       	ldi	r19, 0x66	; 102
    9e50:	46 e6       	ldi	r20, 0x66	; 102
    9e52:	55 e4       	ldi	r21, 0x45	; 69
    9e54:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9e58:	dc 01       	movw	r26, r24
    9e5a:	cb 01       	movw	r24, r22
    9e5c:	f8 01       	movw	r30, r16
    9e5e:	80 83       	st	Z, r24
    9e60:	91 83       	std	Z+1, r25	; 0x01
    9e62:	a2 83       	std	Z+2, r26	; 0x02
    9e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9e66:	ce 01       	movw	r24, r28
    9e68:	87 55       	subi	r24, 0x57	; 87
    9e6a:	9e 4f       	sbci	r25, 0xFE	; 254
    9e6c:	11 e0       	ldi	r17, 0x01	; 1
    9e6e:	fc 01       	movw	r30, r24
    9e70:	60 81       	ld	r22, Z
    9e72:	71 81       	ldd	r23, Z+1	; 0x01
    9e74:	82 81       	ldd	r24, Z+2	; 0x02
    9e76:	93 81       	ldd	r25, Z+3	; 0x03
    9e78:	20 e0       	ldi	r18, 0x00	; 0
    9e7a:	30 e0       	ldi	r19, 0x00	; 0
    9e7c:	40 e8       	ldi	r20, 0x80	; 128
    9e7e:	5f e3       	ldi	r21, 0x3F	; 63
    9e80:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    9e84:	88 23       	and	r24, r24
    9e86:	0c f0       	brlt	.+2      	; 0x9e8a <pick_drop+0x31c8>
    9e88:	10 e0       	ldi	r17, 0x00	; 0
    9e8a:	11 23       	and	r17, r17
    9e8c:	49 f0       	breq	.+18     	; 0x9ea0 <pick_drop+0x31de>
		__ticks = 1;
    9e8e:	ce 01       	movw	r24, r28
    9e90:	83 55       	subi	r24, 0x53	; 83
    9e92:	9e 4f       	sbci	r25, 0xFE	; 254
    9e94:	21 e0       	ldi	r18, 0x01	; 1
    9e96:	30 e0       	ldi	r19, 0x00	; 0
    9e98:	fc 01       	movw	r30, r24
    9e9a:	31 83       	std	Z+1, r19	; 0x01
    9e9c:	20 83       	st	Z, r18
    9e9e:	74 c0       	rjmp	.+232    	; 0x9f88 <pick_drop+0x32c6>
	else if (__tmp > 65535)
    9ea0:	ce 01       	movw	r24, r28
    9ea2:	87 55       	subi	r24, 0x57	; 87
    9ea4:	9e 4f       	sbci	r25, 0xFE	; 254
    9ea6:	11 e0       	ldi	r17, 0x01	; 1
    9ea8:	fc 01       	movw	r30, r24
    9eaa:	60 81       	ld	r22, Z
    9eac:	71 81       	ldd	r23, Z+1	; 0x01
    9eae:	82 81       	ldd	r24, Z+2	; 0x02
    9eb0:	93 81       	ldd	r25, Z+3	; 0x03
    9eb2:	20 e0       	ldi	r18, 0x00	; 0
    9eb4:	3f ef       	ldi	r19, 0xFF	; 255
    9eb6:	4f e7       	ldi	r20, 0x7F	; 127
    9eb8:	57 e4       	ldi	r21, 0x47	; 71
    9eba:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    9ebe:	18 16       	cp	r1, r24
    9ec0:	0c f0       	brlt	.+2      	; 0x9ec4 <pick_drop+0x3202>
    9ec2:	10 e0       	ldi	r17, 0x00	; 0
    9ec4:	11 23       	and	r17, r17
    9ec6:	09 f4       	brne	.+2      	; 0x9eca <pick_drop+0x3208>
    9ec8:	4d c0       	rjmp	.+154    	; 0x9f64 <pick_drop+0x32a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9eca:	ce 01       	movw	r24, r28
    9ecc:	8b 55       	subi	r24, 0x5B	; 91
    9ece:	9e 4f       	sbci	r25, 0xFE	; 254
    9ed0:	fc 01       	movw	r30, r24
    9ed2:	60 81       	ld	r22, Z
    9ed4:	71 81       	ldd	r23, Z+1	; 0x01
    9ed6:	82 81       	ldd	r24, Z+2	; 0x02
    9ed8:	93 81       	ldd	r25, Z+3	; 0x03
    9eda:	20 e0       	ldi	r18, 0x00	; 0
    9edc:	30 e0       	ldi	r19, 0x00	; 0
    9ede:	40 e2       	ldi	r20, 0x20	; 32
    9ee0:	51 e4       	ldi	r21, 0x41	; 65
    9ee2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    9ee6:	dc 01       	movw	r26, r24
    9ee8:	cb 01       	movw	r24, r22
    9eea:	8e 01       	movw	r16, r28
    9eec:	03 55       	subi	r16, 0x53	; 83
    9eee:	1e 4f       	sbci	r17, 0xFE	; 254
    9ef0:	bc 01       	movw	r22, r24
    9ef2:	cd 01       	movw	r24, r26
    9ef4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9ef8:	dc 01       	movw	r26, r24
    9efa:	cb 01       	movw	r24, r22
    9efc:	f8 01       	movw	r30, r16
    9efe:	91 83       	std	Z+1, r25	; 0x01
    9f00:	80 83       	st	Z, r24
    9f02:	27 c0       	rjmp	.+78     	; 0x9f52 <pick_drop+0x3290>
    9f04:	ce 01       	movw	r24, r28
    9f06:	81 55       	subi	r24, 0x51	; 81
    9f08:	9e 4f       	sbci	r25, 0xFE	; 254
    9f0a:	20 e7       	ldi	r18, 0x70	; 112
    9f0c:	31 e0       	ldi	r19, 0x01	; 1
    9f0e:	fc 01       	movw	r30, r24
    9f10:	31 83       	std	Z+1, r19	; 0x01
    9f12:	20 83       	st	Z, r18
    9f14:	ce 01       	movw	r24, r28
    9f16:	81 55       	subi	r24, 0x51	; 81
    9f18:	9e 4f       	sbci	r25, 0xFE	; 254
    9f1a:	fc 01       	movw	r30, r24
    9f1c:	80 81       	ld	r24, Z
    9f1e:	91 81       	ldd	r25, Z+1	; 0x01
    9f20:	8c 01       	movw	r16, r24
    9f22:	c8 01       	movw	r24, r16
    9f24:	01 97       	sbiw	r24, 0x01	; 1
    9f26:	f1 f7       	brne	.-4      	; 0x9f24 <pick_drop+0x3262>
    9f28:	8c 01       	movw	r16, r24
    9f2a:	ce 01       	movw	r24, r28
    9f2c:	81 55       	subi	r24, 0x51	; 81
    9f2e:	9e 4f       	sbci	r25, 0xFE	; 254
    9f30:	fc 01       	movw	r30, r24
    9f32:	11 83       	std	Z+1, r17	; 0x01
    9f34:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f36:	ce 01       	movw	r24, r28
    9f38:	83 55       	subi	r24, 0x53	; 83
    9f3a:	9e 4f       	sbci	r25, 0xFE	; 254
    9f3c:	9e 01       	movw	r18, r28
    9f3e:	23 55       	subi	r18, 0x53	; 83
    9f40:	3e 4f       	sbci	r19, 0xFE	; 254
    9f42:	f9 01       	movw	r30, r18
    9f44:	20 81       	ld	r18, Z
    9f46:	31 81       	ldd	r19, Z+1	; 0x01
    9f48:	21 50       	subi	r18, 0x01	; 1
    9f4a:	30 40       	sbci	r19, 0x00	; 0
    9f4c:	fc 01       	movw	r30, r24
    9f4e:	31 83       	std	Z+1, r19	; 0x01
    9f50:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f52:	ce 01       	movw	r24, r28
    9f54:	83 55       	subi	r24, 0x53	; 83
    9f56:	9e 4f       	sbci	r25, 0xFE	; 254
    9f58:	fc 01       	movw	r30, r24
    9f5a:	80 81       	ld	r24, Z
    9f5c:	91 81       	ldd	r25, Z+1	; 0x01
    9f5e:	00 97       	sbiw	r24, 0x00	; 0
    9f60:	89 f6       	brne	.-94     	; 0x9f04 <pick_drop+0x3242>
    9f62:	2f c0       	rjmp	.+94     	; 0x9fc2 <pick_drop+0x3300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9f64:	8e 01       	movw	r16, r28
    9f66:	03 55       	subi	r16, 0x53	; 83
    9f68:	1e 4f       	sbci	r17, 0xFE	; 254
    9f6a:	ce 01       	movw	r24, r28
    9f6c:	87 55       	subi	r24, 0x57	; 87
    9f6e:	9e 4f       	sbci	r25, 0xFE	; 254
    9f70:	fc 01       	movw	r30, r24
    9f72:	60 81       	ld	r22, Z
    9f74:	71 81       	ldd	r23, Z+1	; 0x01
    9f76:	82 81       	ldd	r24, Z+2	; 0x02
    9f78:	93 81       	ldd	r25, Z+3	; 0x03
    9f7a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    9f7e:	dc 01       	movw	r26, r24
    9f80:	cb 01       	movw	r24, r22
    9f82:	f8 01       	movw	r30, r16
    9f84:	91 83       	std	Z+1, r25	; 0x01
    9f86:	80 83       	st	Z, r24
    9f88:	ce 01       	movw	r24, r28
    9f8a:	8f 54       	subi	r24, 0x4F	; 79
    9f8c:	9e 4f       	sbci	r25, 0xFE	; 254
    9f8e:	9e 01       	movw	r18, r28
    9f90:	23 55       	subi	r18, 0x53	; 83
    9f92:	3e 4f       	sbci	r19, 0xFE	; 254
    9f94:	f9 01       	movw	r30, r18
    9f96:	20 81       	ld	r18, Z
    9f98:	31 81       	ldd	r19, Z+1	; 0x01
    9f9a:	fc 01       	movw	r30, r24
    9f9c:	31 83       	std	Z+1, r19	; 0x01
    9f9e:	20 83       	st	Z, r18
    9fa0:	ce 01       	movw	r24, r28
    9fa2:	8f 54       	subi	r24, 0x4F	; 79
    9fa4:	9e 4f       	sbci	r25, 0xFE	; 254
    9fa6:	fc 01       	movw	r30, r24
    9fa8:	80 81       	ld	r24, Z
    9faa:	91 81       	ldd	r25, Z+1	; 0x01
    9fac:	8c 01       	movw	r16, r24
    9fae:	c8 01       	movw	r24, r16
    9fb0:	01 97       	sbiw	r24, 0x01	; 1
    9fb2:	f1 f7       	brne	.-4      	; 0x9fb0 <pick_drop+0x32ee>
    9fb4:	8c 01       	movw	r16, r24
    9fb6:	ce 01       	movw	r24, r28
    9fb8:	8f 54       	subi	r24, 0x4F	; 79
    9fba:	9e 4f       	sbci	r25, 0xFE	; 254
    9fbc:	fc 01       	movw	r30, r24
    9fbe:	11 83       	std	Z+1, r17	; 0x01
    9fc0:	00 83       	st	Z, r16
				_delay_ms(300);
			}
defaulty();
    9fc2:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <defaulty>
}
    9fc6:	cd 54       	subi	r28, 0x4D	; 77
    9fc8:	de 4f       	sbci	r29, 0xFE	; 254
    9fca:	0f b6       	in	r0, 0x3f	; 63
    9fcc:	f8 94       	cli
    9fce:	de bf       	out	0x3e, r29	; 62
    9fd0:	0f be       	out	0x3f, r0	; 63
    9fd2:	cd bf       	out	0x3d, r28	; 61
    9fd4:	df 91       	pop	r29
    9fd6:	cf 91       	pop	r28
    9fd8:	1f 91       	pop	r17
    9fda:	0f 91       	pop	r16
    9fdc:	08 95       	ret

00009fde <travel_path>:
void travel_path(char pos_val)
{   TIMSK3=0;
    9fde:	0f 93       	push	r16
    9fe0:	1f 93       	push	r17
    9fe2:	cf 93       	push	r28
    9fe4:	df 93       	push	r29
    9fe6:	cd b7       	in	r28, 0x3d	; 61
    9fe8:	de b7       	in	r29, 0x3e	; 62
    9fea:	c7 5b       	subi	r28, 0xB7	; 183
    9fec:	d0 40       	sbci	r29, 0x00	; 0
    9fee:	0f b6       	in	r0, 0x3f	; 63
    9ff0:	f8 94       	cli
    9ff2:	de bf       	out	0x3e, r29	; 62
    9ff4:	0f be       	out	0x3f, r0	; 63
    9ff6:	cd bf       	out	0x3d, r28	; 61
    9ff8:	9e 01       	movw	r18, r28
    9ffa:	29 54       	subi	r18, 0x49	; 73
    9ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    9ffe:	f9 01       	movw	r30, r18
    a000:	80 83       	st	Z, r24
    a002:	81 e7       	ldi	r24, 0x71	; 113
    a004:	90 e0       	ldi	r25, 0x00	; 0
    a006:	fc 01       	movw	r30, r24
    a008:	10 82       	st	Z, r1
	halt=1;
    a00a:	81 e0       	ldi	r24, 0x01	; 1
    a00c:	90 e0       	ldi	r25, 0x00	; 0
    a00e:	90 93 68 03 	sts	0x0368, r25
    a012:	80 93 67 03 	sts	0x0367, r24
	stop();
    a016:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    a01a:	80 e0       	ldi	r24, 0x00	; 0
    a01c:	90 e0       	ldi	r25, 0x00	; 0
    a01e:	a0 ea       	ldi	r26, 0xA0	; 160
    a020:	b1 e4       	ldi	r27, 0x41	; 65
    a022:	89 83       	std	Y+1, r24	; 0x01
    a024:	9a 83       	std	Y+2, r25	; 0x02
    a026:	ab 83       	std	Y+3, r26	; 0x03
    a028:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a02a:	69 81       	ldd	r22, Y+1	; 0x01
    a02c:	7a 81       	ldd	r23, Y+2	; 0x02
    a02e:	8b 81       	ldd	r24, Y+3	; 0x03
    a030:	9c 81       	ldd	r25, Y+4	; 0x04
    a032:	26 e6       	ldi	r18, 0x66	; 102
    a034:	36 e6       	ldi	r19, 0x66	; 102
    a036:	46 e6       	ldi	r20, 0x66	; 102
    a038:	55 e4       	ldi	r21, 0x45	; 69
    a03a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a03e:	dc 01       	movw	r26, r24
    a040:	cb 01       	movw	r24, r22
    a042:	8d 83       	std	Y+5, r24	; 0x05
    a044:	9e 83       	std	Y+6, r25	; 0x06
    a046:	af 83       	std	Y+7, r26	; 0x07
    a048:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    a04a:	11 e0       	ldi	r17, 0x01	; 1
    a04c:	6d 81       	ldd	r22, Y+5	; 0x05
    a04e:	7e 81       	ldd	r23, Y+6	; 0x06
    a050:	8f 81       	ldd	r24, Y+7	; 0x07
    a052:	98 85       	ldd	r25, Y+8	; 0x08
    a054:	20 e0       	ldi	r18, 0x00	; 0
    a056:	30 e0       	ldi	r19, 0x00	; 0
    a058:	40 e8       	ldi	r20, 0x80	; 128
    a05a:	5f e3       	ldi	r21, 0x3F	; 63
    a05c:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    a060:	88 23       	and	r24, r24
    a062:	0c f0       	brlt	.+2      	; 0xa066 <travel_path+0x88>
    a064:	10 e0       	ldi	r17, 0x00	; 0
    a066:	11 23       	and	r17, r17
    a068:	29 f0       	breq	.+10     	; 0xa074 <travel_path+0x96>
		__ticks = 1;
    a06a:	81 e0       	ldi	r24, 0x01	; 1
    a06c:	90 e0       	ldi	r25, 0x00	; 0
    a06e:	9a 87       	std	Y+10, r25	; 0x0a
    a070:	89 87       	std	Y+9, r24	; 0x09
    a072:	46 c0       	rjmp	.+140    	; 0xa100 <travel_path+0x122>
	else if (__tmp > 65535)
    a074:	11 e0       	ldi	r17, 0x01	; 1
    a076:	6d 81       	ldd	r22, Y+5	; 0x05
    a078:	7e 81       	ldd	r23, Y+6	; 0x06
    a07a:	8f 81       	ldd	r24, Y+7	; 0x07
    a07c:	98 85       	ldd	r25, Y+8	; 0x08
    a07e:	20 e0       	ldi	r18, 0x00	; 0
    a080:	3f ef       	ldi	r19, 0xFF	; 255
    a082:	4f e7       	ldi	r20, 0x7F	; 127
    a084:	57 e4       	ldi	r21, 0x47	; 71
    a086:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    a08a:	18 16       	cp	r1, r24
    a08c:	0c f0       	brlt	.+2      	; 0xa090 <travel_path+0xb2>
    a08e:	10 e0       	ldi	r17, 0x00	; 0
    a090:	11 23       	and	r17, r17
    a092:	61 f1       	breq	.+88     	; 0xa0ec <travel_path+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a094:	69 81       	ldd	r22, Y+1	; 0x01
    a096:	7a 81       	ldd	r23, Y+2	; 0x02
    a098:	8b 81       	ldd	r24, Y+3	; 0x03
    a09a:	9c 81       	ldd	r25, Y+4	; 0x04
    a09c:	20 e0       	ldi	r18, 0x00	; 0
    a09e:	30 e0       	ldi	r19, 0x00	; 0
    a0a0:	40 e2       	ldi	r20, 0x20	; 32
    a0a2:	51 e4       	ldi	r21, 0x41	; 65
    a0a4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a0a8:	dc 01       	movw	r26, r24
    a0aa:	cb 01       	movw	r24, r22
    a0ac:	bc 01       	movw	r22, r24
    a0ae:	cd 01       	movw	r24, r26
    a0b0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a0b4:	dc 01       	movw	r26, r24
    a0b6:	cb 01       	movw	r24, r22
    a0b8:	9a 87       	std	Y+10, r25	; 0x0a
    a0ba:	89 87       	std	Y+9, r24	; 0x09
    a0bc:	12 c0       	rjmp	.+36     	; 0xa0e2 <travel_path+0x104>
    a0be:	80 e7       	ldi	r24, 0x70	; 112
    a0c0:	91 e0       	ldi	r25, 0x01	; 1
    a0c2:	9c 87       	std	Y+12, r25	; 0x0c
    a0c4:	8b 87       	std	Y+11, r24	; 0x0b
    a0c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    a0c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    a0ca:	8c 01       	movw	r16, r24
    a0cc:	c8 01       	movw	r24, r16
    a0ce:	01 97       	sbiw	r24, 0x01	; 1
    a0d0:	f1 f7       	brne	.-4      	; 0xa0ce <travel_path+0xf0>
    a0d2:	8c 01       	movw	r16, r24
    a0d4:	1c 87       	std	Y+12, r17	; 0x0c
    a0d6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a0d8:	89 85       	ldd	r24, Y+9	; 0x09
    a0da:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0dc:	01 97       	sbiw	r24, 0x01	; 1
    a0de:	9a 87       	std	Y+10, r25	; 0x0a
    a0e0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0e2:	89 85       	ldd	r24, Y+9	; 0x09
    a0e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0e6:	00 97       	sbiw	r24, 0x00	; 0
    a0e8:	51 f7       	brne	.-44     	; 0xa0be <travel_path+0xe0>
    a0ea:	17 c0       	rjmp	.+46     	; 0xa11a <travel_path+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a0ec:	6d 81       	ldd	r22, Y+5	; 0x05
    a0ee:	7e 81       	ldd	r23, Y+6	; 0x06
    a0f0:	8f 81       	ldd	r24, Y+7	; 0x07
    a0f2:	98 85       	ldd	r25, Y+8	; 0x08
    a0f4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a0f8:	dc 01       	movw	r26, r24
    a0fa:	cb 01       	movw	r24, r22
    a0fc:	9a 87       	std	Y+10, r25	; 0x0a
    a0fe:	89 87       	std	Y+9, r24	; 0x09
    a100:	89 85       	ldd	r24, Y+9	; 0x09
    a102:	9a 85       	ldd	r25, Y+10	; 0x0a
    a104:	9e 87       	std	Y+14, r25	; 0x0e
    a106:	8d 87       	std	Y+13, r24	; 0x0d
    a108:	8d 85       	ldd	r24, Y+13	; 0x0d
    a10a:	9e 85       	ldd	r25, Y+14	; 0x0e
    a10c:	8c 01       	movw	r16, r24
    a10e:	f8 01       	movw	r30, r16
    a110:	31 97       	sbiw	r30, 0x01	; 1
    a112:	f1 f7       	brne	.-4      	; 0xa110 <travel_path+0x132>
    a114:	8f 01       	movw	r16, r30
    a116:	1e 87       	std	Y+14, r17	; 0x0e
    a118:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(pos_val=='n'){
    a11a:	ce 01       	movw	r24, r28
    a11c:	89 54       	subi	r24, 0x49	; 73
    a11e:	9f 4f       	sbci	r25, 0xFF	; 255
    a120:	fc 01       	movw	r30, r24
    a122:	80 81       	ld	r24, Z
    a124:	8e 36       	cpi	r24, 0x6E	; 110
    a126:	21 f4       	brne	.+8      	; 0xa130 <travel_path+0x152>
	forward();
    a128:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    a12c:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
	}
	else if(pos_val=='r')
    a130:	ce 01       	movw	r24, r28
    a132:	89 54       	subi	r24, 0x49	; 73
    a134:	9f 4f       	sbci	r25, 0xFF	; 255
    a136:	fc 01       	movw	r30, r24
    a138:	80 81       	ld	r24, Z
    a13a:	82 37       	cpi	r24, 0x72	; 114
    a13c:	21 f4       	brne	.+8      	; 0xa146 <travel_path+0x168>
	correct_right();
    a13e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    a142:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
	else if(pos_val=='l')
    a146:	ce 01       	movw	r24, r28
    a148:	89 54       	subi	r24, 0x49	; 73
    a14a:	9f 4f       	sbci	r25, 0xFF	; 255
    a14c:	fc 01       	movw	r30, r24
    a14e:	80 81       	ld	r24, Z
    a150:	8c 36       	cpi	r24, 0x6C	; 108
    a152:	21 f4       	brne	.+8      	; 0xa15c <travel_path+0x17e>
	correct_left();
    a154:	0e 94 21 11 	call	0x2242	; 0x2242 <correct_left>
    a158:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
	else if(pos_val=='R')
    a15c:	ce 01       	movw	r24, r28
    a15e:	89 54       	subi	r24, 0x49	; 73
    a160:	9f 4f       	sbci	r25, 0xFF	; 255
    a162:	fc 01       	movw	r30, r24
    a164:	80 81       	ld	r24, Z
    a166:	82 35       	cpi	r24, 0x52	; 82
    a168:	09 f0       	breq	.+2      	; 0xa16c <travel_path+0x18e>
    a16a:	4d c3       	rjmp	.+1690   	; 0xa806 <travel_path+0x828>
	{
		if(node==0)
    a16c:	80 91 65 03 	lds	r24, 0x0365
    a170:	90 91 66 03 	lds	r25, 0x0366
    a174:	00 97       	sbiw	r24, 0x00	; 0
    a176:	21 f4       	brne	.+8      	; 0xa180 <travel_path+0x1a2>
		correct_right();
    a178:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    a17c:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
	correct_left();
	else if(pos_val=='R')
	{
		if(node==0)
		correct_right();
		else if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    a180:	80 91 65 03 	lds	r24, 0x0365
    a184:	90 91 66 03 	lds	r25, 0x0366
    a188:	01 96       	adiw	r24, 0x01	; 1
    a18a:	87 59       	subi	r24, 0x97	; 151
    a18c:	9c 4f       	sbci	r25, 0xFC	; 252
    a18e:	fc 01       	movw	r30, r24
    a190:	80 81       	ld	r24, Z
    a192:	84 34       	cpi	r24, 0x44	; 68
    a194:	09 f4       	brne	.+2      	; 0xa198 <travel_path+0x1ba>
    a196:	5b c0       	rjmp	.+182    	; 0xa24e <travel_path+0x270>
    a198:	80 91 65 03 	lds	r24, 0x0365
    a19c:	90 91 66 03 	lds	r25, 0x0366
    a1a0:	01 96       	adiw	r24, 0x01	; 1
    a1a2:	87 59       	subi	r24, 0x97	; 151
    a1a4:	9c 4f       	sbci	r25, 0xFC	; 252
    a1a6:	fc 01       	movw	r30, r24
    a1a8:	80 81       	ld	r24, Z
    a1aa:	81 33       	cpi	r24, 0x31	; 49
    a1ac:	09 f4       	brne	.+2      	; 0xa1b0 <travel_path+0x1d2>
    a1ae:	4f c0       	rjmp	.+158    	; 0xa24e <travel_path+0x270>
    a1b0:	80 91 65 03 	lds	r24, 0x0365
    a1b4:	90 91 66 03 	lds	r25, 0x0366
    a1b8:	01 96       	adiw	r24, 0x01	; 1
    a1ba:	87 59       	subi	r24, 0x97	; 151
    a1bc:	9c 4f       	sbci	r25, 0xFC	; 252
    a1be:	fc 01       	movw	r30, r24
    a1c0:	80 81       	ld	r24, Z
    a1c2:	82 33       	cpi	r24, 0x32	; 50
    a1c4:	09 f4       	brne	.+2      	; 0xa1c8 <travel_path+0x1ea>
    a1c6:	43 c0       	rjmp	.+134    	; 0xa24e <travel_path+0x270>
    a1c8:	80 91 65 03 	lds	r24, 0x0365
    a1cc:	90 91 66 03 	lds	r25, 0x0366
    a1d0:	01 96       	adiw	r24, 0x01	; 1
    a1d2:	87 59       	subi	r24, 0x97	; 151
    a1d4:	9c 4f       	sbci	r25, 0xFC	; 252
    a1d6:	fc 01       	movw	r30, r24
    a1d8:	80 81       	ld	r24, Z
    a1da:	83 33       	cpi	r24, 0x33	; 51
    a1dc:	c1 f1       	breq	.+112    	; 0xa24e <travel_path+0x270>
    a1de:	80 91 65 03 	lds	r24, 0x0365
    a1e2:	90 91 66 03 	lds	r25, 0x0366
    a1e6:	01 96       	adiw	r24, 0x01	; 1
    a1e8:	87 59       	subi	r24, 0x97	; 151
    a1ea:	9c 4f       	sbci	r25, 0xFC	; 252
    a1ec:	fc 01       	movw	r30, r24
    a1ee:	80 81       	ld	r24, Z
    a1f0:	84 33       	cpi	r24, 0x34	; 52
    a1f2:	69 f1       	breq	.+90     	; 0xa24e <travel_path+0x270>
    a1f4:	80 91 65 03 	lds	r24, 0x0365
    a1f8:	90 91 66 03 	lds	r25, 0x0366
    a1fc:	01 96       	adiw	r24, 0x01	; 1
    a1fe:	87 59       	subi	r24, 0x97	; 151
    a200:	9c 4f       	sbci	r25, 0xFC	; 252
    a202:	fc 01       	movw	r30, r24
    a204:	80 81       	ld	r24, Z
    a206:	85 33       	cpi	r24, 0x35	; 53
    a208:	11 f1       	breq	.+68     	; 0xa24e <travel_path+0x270>
    a20a:	80 91 65 03 	lds	r24, 0x0365
    a20e:	90 91 66 03 	lds	r25, 0x0366
    a212:	01 96       	adiw	r24, 0x01	; 1
    a214:	87 59       	subi	r24, 0x97	; 151
    a216:	9c 4f       	sbci	r25, 0xFC	; 252
    a218:	fc 01       	movw	r30, r24
    a21a:	80 81       	ld	r24, Z
    a21c:	86 33       	cpi	r24, 0x36	; 54
    a21e:	b9 f0       	breq	.+46     	; 0xa24e <travel_path+0x270>
    a220:	80 91 65 03 	lds	r24, 0x0365
    a224:	90 91 66 03 	lds	r25, 0x0366
    a228:	01 96       	adiw	r24, 0x01	; 1
    a22a:	87 59       	subi	r24, 0x97	; 151
    a22c:	9c 4f       	sbci	r25, 0xFC	; 252
    a22e:	fc 01       	movw	r30, r24
    a230:	80 81       	ld	r24, Z
    a232:	87 33       	cpi	r24, 0x37	; 55
    a234:	61 f0       	breq	.+24     	; 0xa24e <travel_path+0x270>
    a236:	80 91 65 03 	lds	r24, 0x0365
    a23a:	90 91 66 03 	lds	r25, 0x0366
    a23e:	01 96       	adiw	r24, 0x01	; 1
    a240:	87 59       	subi	r24, 0x97	; 151
    a242:	9c 4f       	sbci	r25, 0xFC	; 252
    a244:	fc 01       	movw	r30, r24
    a246:	80 81       	ld	r24, Z
    a248:	88 33       	cpi	r24, 0x38	; 56
    a24a:	09 f0       	breq	.+2      	; 0xa24e <travel_path+0x270>
    a24c:	a2 c2       	rjmp	.+1348   	; 0xa792 <travel_path+0x7b4>
		{
			stop();
    a24e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			if(master_path[node+1]=='7'||master_path[node+1]=='6')// TO ALLIGN TO NORTH SLANT LINE ONLY
    a252:	80 91 65 03 	lds	r24, 0x0365
    a256:	90 91 66 03 	lds	r25, 0x0366
    a25a:	01 96       	adiw	r24, 0x01	; 1
    a25c:	87 59       	subi	r24, 0x97	; 151
    a25e:	9c 4f       	sbci	r25, 0xFC	; 252
    a260:	fc 01       	movw	r30, r24
    a262:	80 81       	ld	r24, Z
    a264:	87 33       	cpi	r24, 0x37	; 55
    a266:	61 f0       	breq	.+24     	; 0xa280 <travel_path+0x2a2>
    a268:	80 91 65 03 	lds	r24, 0x0365
    a26c:	90 91 66 03 	lds	r25, 0x0366
    a270:	01 96       	adiw	r24, 0x01	; 1
    a272:	87 59       	subi	r24, 0x97	; 151
    a274:	9c 4f       	sbci	r25, 0xFC	; 252
    a276:	fc 01       	movw	r30, r24
    a278:	80 81       	ld	r24, Z
    a27a:	86 33       	cpi	r24, 0x36	; 54
    a27c:	09 f0       	breq	.+2      	; 0xa280 <travel_path+0x2a2>
    a27e:	87 c0       	rjmp	.+270    	; 0xa38e <travel_path+0x3b0>
			{
				forward_mm(25);
    a280:	89 e1       	ldi	r24, 0x19	; 25
    a282:	90 e0       	ldi	r25, 0x00	; 0
    a284:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a288:	80 e0       	ldi	r24, 0x00	; 0
    a28a:	90 e0       	ldi	r25, 0x00	; 0
    a28c:	a0 ea       	ldi	r26, 0xA0	; 160
    a28e:	b1 e4       	ldi	r27, 0x41	; 65
    a290:	8f 87       	std	Y+15, r24	; 0x0f
    a292:	98 8b       	std	Y+16, r25	; 0x10
    a294:	a9 8b       	std	Y+17, r26	; 0x11
    a296:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a298:	6f 85       	ldd	r22, Y+15	; 0x0f
    a29a:	78 89       	ldd	r23, Y+16	; 0x10
    a29c:	89 89       	ldd	r24, Y+17	; 0x11
    a29e:	9a 89       	ldd	r25, Y+18	; 0x12
    a2a0:	26 e6       	ldi	r18, 0x66	; 102
    a2a2:	36 e6       	ldi	r19, 0x66	; 102
    a2a4:	46 e6       	ldi	r20, 0x66	; 102
    a2a6:	55 e4       	ldi	r21, 0x45	; 69
    a2a8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a2ac:	dc 01       	movw	r26, r24
    a2ae:	cb 01       	movw	r24, r22
    a2b0:	8b 8b       	std	Y+19, r24	; 0x13
    a2b2:	9c 8b       	std	Y+20, r25	; 0x14
    a2b4:	ad 8b       	std	Y+21, r26	; 0x15
    a2b6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    a2b8:	11 e0       	ldi	r17, 0x01	; 1
    a2ba:	6b 89       	ldd	r22, Y+19	; 0x13
    a2bc:	7c 89       	ldd	r23, Y+20	; 0x14
    a2be:	8d 89       	ldd	r24, Y+21	; 0x15
    a2c0:	9e 89       	ldd	r25, Y+22	; 0x16
    a2c2:	20 e0       	ldi	r18, 0x00	; 0
    a2c4:	30 e0       	ldi	r19, 0x00	; 0
    a2c6:	40 e8       	ldi	r20, 0x80	; 128
    a2c8:	5f e3       	ldi	r21, 0x3F	; 63
    a2ca:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    a2ce:	88 23       	and	r24, r24
    a2d0:	0c f0       	brlt	.+2      	; 0xa2d4 <travel_path+0x2f6>
    a2d2:	10 e0       	ldi	r17, 0x00	; 0
    a2d4:	11 23       	and	r17, r17
    a2d6:	29 f0       	breq	.+10     	; 0xa2e2 <travel_path+0x304>
		__ticks = 1;
    a2d8:	81 e0       	ldi	r24, 0x01	; 1
    a2da:	90 e0       	ldi	r25, 0x00	; 0
    a2dc:	98 8f       	std	Y+24, r25	; 0x18
    a2de:	8f 8b       	std	Y+23, r24	; 0x17
    a2e0:	46 c0       	rjmp	.+140    	; 0xa36e <travel_path+0x390>
	else if (__tmp > 65535)
    a2e2:	11 e0       	ldi	r17, 0x01	; 1
    a2e4:	6b 89       	ldd	r22, Y+19	; 0x13
    a2e6:	7c 89       	ldd	r23, Y+20	; 0x14
    a2e8:	8d 89       	ldd	r24, Y+21	; 0x15
    a2ea:	9e 89       	ldd	r25, Y+22	; 0x16
    a2ec:	20 e0       	ldi	r18, 0x00	; 0
    a2ee:	3f ef       	ldi	r19, 0xFF	; 255
    a2f0:	4f e7       	ldi	r20, 0x7F	; 127
    a2f2:	57 e4       	ldi	r21, 0x47	; 71
    a2f4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    a2f8:	18 16       	cp	r1, r24
    a2fa:	0c f0       	brlt	.+2      	; 0xa2fe <travel_path+0x320>
    a2fc:	10 e0       	ldi	r17, 0x00	; 0
    a2fe:	11 23       	and	r17, r17
    a300:	61 f1       	breq	.+88     	; 0xa35a <travel_path+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a302:	6f 85       	ldd	r22, Y+15	; 0x0f
    a304:	78 89       	ldd	r23, Y+16	; 0x10
    a306:	89 89       	ldd	r24, Y+17	; 0x11
    a308:	9a 89       	ldd	r25, Y+18	; 0x12
    a30a:	20 e0       	ldi	r18, 0x00	; 0
    a30c:	30 e0       	ldi	r19, 0x00	; 0
    a30e:	40 e2       	ldi	r20, 0x20	; 32
    a310:	51 e4       	ldi	r21, 0x41	; 65
    a312:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a316:	dc 01       	movw	r26, r24
    a318:	cb 01       	movw	r24, r22
    a31a:	bc 01       	movw	r22, r24
    a31c:	cd 01       	movw	r24, r26
    a31e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a322:	dc 01       	movw	r26, r24
    a324:	cb 01       	movw	r24, r22
    a326:	98 8f       	std	Y+24, r25	; 0x18
    a328:	8f 8b       	std	Y+23, r24	; 0x17
    a32a:	12 c0       	rjmp	.+36     	; 0xa350 <travel_path+0x372>
    a32c:	80 e7       	ldi	r24, 0x70	; 112
    a32e:	91 e0       	ldi	r25, 0x01	; 1
    a330:	9a 8f       	std	Y+26, r25	; 0x1a
    a332:	89 8f       	std	Y+25, r24	; 0x19
    a334:	89 8d       	ldd	r24, Y+25	; 0x19
    a336:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a338:	8c 01       	movw	r16, r24
    a33a:	c8 01       	movw	r24, r16
    a33c:	01 97       	sbiw	r24, 0x01	; 1
    a33e:	f1 f7       	brne	.-4      	; 0xa33c <travel_path+0x35e>
    a340:	8c 01       	movw	r16, r24
    a342:	1a 8f       	std	Y+26, r17	; 0x1a
    a344:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a346:	8f 89       	ldd	r24, Y+23	; 0x17
    a348:	98 8d       	ldd	r25, Y+24	; 0x18
    a34a:	01 97       	sbiw	r24, 0x01	; 1
    a34c:	98 8f       	std	Y+24, r25	; 0x18
    a34e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a350:	8f 89       	ldd	r24, Y+23	; 0x17
    a352:	98 8d       	ldd	r25, Y+24	; 0x18
    a354:	00 97       	sbiw	r24, 0x00	; 0
    a356:	51 f7       	brne	.-44     	; 0xa32c <travel_path+0x34e>
    a358:	17 c0       	rjmp	.+46     	; 0xa388 <travel_path+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a35a:	6b 89       	ldd	r22, Y+19	; 0x13
    a35c:	7c 89       	ldd	r23, Y+20	; 0x14
    a35e:	8d 89       	ldd	r24, Y+21	; 0x15
    a360:	9e 89       	ldd	r25, Y+22	; 0x16
    a362:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a366:	dc 01       	movw	r26, r24
    a368:	cb 01       	movw	r24, r22
    a36a:	98 8f       	std	Y+24, r25	; 0x18
    a36c:	8f 8b       	std	Y+23, r24	; 0x17
    a36e:	8f 89       	ldd	r24, Y+23	; 0x17
    a370:	98 8d       	ldd	r25, Y+24	; 0x18
    a372:	9c 8f       	std	Y+28, r25	; 0x1c
    a374:	8b 8f       	std	Y+27, r24	; 0x1b
    a376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a37a:	8c 01       	movw	r16, r24
    a37c:	f8 01       	movw	r30, r16
    a37e:	31 97       	sbiw	r30, 0x01	; 1
    a380:	f1 f7       	brne	.-4      	; 0xa37e <travel_path+0x3a0>
    a382:	8f 01       	movw	r16, r30
    a384:	1c 8f       	std	Y+28, r17	; 0x1c
    a386:	0b 8f       	std	Y+27, r16	; 0x1b
				_delay_ms(20);
				correct_right();
    a388:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    a38c:	da c1       	rjmp	.+948    	; 0xa742 <travel_path+0x764>
			}
			else if(master_path[node+1]=='8'){
    a38e:	80 91 65 03 	lds	r24, 0x0365
    a392:	90 91 66 03 	lds	r25, 0x0366
    a396:	01 96       	adiw	r24, 0x01	; 1
    a398:	87 59       	subi	r24, 0x97	; 151
    a39a:	9c 4f       	sbci	r25, 0xFC	; 252
    a39c:	fc 01       	movw	r30, r24
    a39e:	80 81       	ld	r24, Z
    a3a0:	88 33       	cpi	r24, 0x38	; 56
    a3a2:	09 f0       	breq	.+2      	; 0xa3a6 <travel_path+0x3c8>
    a3a4:	cc c1       	rjmp	.+920    	; 0xa73e <travel_path+0x760>
				stop();
    a3a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    a3aa:	80 e0       	ldi	r24, 0x00	; 0
    a3ac:	90 e0       	ldi	r25, 0x00	; 0
    a3ae:	a0 ea       	ldi	r26, 0xA0	; 160
    a3b0:	b1 e4       	ldi	r27, 0x41	; 65
    a3b2:	8d 8f       	std	Y+29, r24	; 0x1d
    a3b4:	9e 8f       	std	Y+30, r25	; 0x1e
    a3b6:	af 8f       	std	Y+31, r26	; 0x1f
    a3b8:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a3ba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    a3bc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    a3be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a3c0:	98 a1       	lds	r25, 0x48
    a3c2:	26 e6       	ldi	r18, 0x66	; 102
    a3c4:	36 e6       	ldi	r19, 0x66	; 102
    a3c6:	46 e6       	ldi	r20, 0x66	; 102
    a3c8:	55 e4       	ldi	r21, 0x45	; 69
    a3ca:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a3ce:	dc 01       	movw	r26, r24
    a3d0:	cb 01       	movw	r24, r22
    a3d2:	89 a3       	lds	r24, 0x59
    a3d4:	9a a3       	lds	r25, 0x5a
    a3d6:	ab a3       	lds	r26, 0x5b
    a3d8:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    a3da:	11 e0       	ldi	r17, 0x01	; 1
    a3dc:	69 a1       	lds	r22, 0x49
    a3de:	7a a1       	lds	r23, 0x4a
    a3e0:	8b a1       	lds	r24, 0x4b
    a3e2:	9c a1       	lds	r25, 0x4c
    a3e4:	20 e0       	ldi	r18, 0x00	; 0
    a3e6:	30 e0       	ldi	r19, 0x00	; 0
    a3e8:	40 e8       	ldi	r20, 0x80	; 128
    a3ea:	5f e3       	ldi	r21, 0x3F	; 63
    a3ec:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    a3f0:	88 23       	and	r24, r24
    a3f2:	0c f0       	brlt	.+2      	; 0xa3f6 <travel_path+0x418>
    a3f4:	10 e0       	ldi	r17, 0x00	; 0
    a3f6:	11 23       	and	r17, r17
    a3f8:	29 f0       	breq	.+10     	; 0xa404 <travel_path+0x426>
		__ticks = 1;
    a3fa:	81 e0       	ldi	r24, 0x01	; 1
    a3fc:	90 e0       	ldi	r25, 0x00	; 0
    a3fe:	9e a3       	lds	r25, 0x5e
    a400:	8d a3       	lds	r24, 0x5d
    a402:	46 c0       	rjmp	.+140    	; 0xa490 <travel_path+0x4b2>
	else if (__tmp > 65535)
    a404:	11 e0       	ldi	r17, 0x01	; 1
    a406:	69 a1       	lds	r22, 0x49
    a408:	7a a1       	lds	r23, 0x4a
    a40a:	8b a1       	lds	r24, 0x4b
    a40c:	9c a1       	lds	r25, 0x4c
    a40e:	20 e0       	ldi	r18, 0x00	; 0
    a410:	3f ef       	ldi	r19, 0xFF	; 255
    a412:	4f e7       	ldi	r20, 0x7F	; 127
    a414:	57 e4       	ldi	r21, 0x47	; 71
    a416:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    a41a:	18 16       	cp	r1, r24
    a41c:	0c f0       	brlt	.+2      	; 0xa420 <travel_path+0x442>
    a41e:	10 e0       	ldi	r17, 0x00	; 0
    a420:	11 23       	and	r17, r17
    a422:	61 f1       	breq	.+88     	; 0xa47c <travel_path+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a424:	6d 8d       	ldd	r22, Y+29	; 0x1d
    a426:	7e 8d       	ldd	r23, Y+30	; 0x1e
    a428:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a42a:	98 a1       	lds	r25, 0x48
    a42c:	20 e0       	ldi	r18, 0x00	; 0
    a42e:	30 e0       	ldi	r19, 0x00	; 0
    a430:	40 e2       	ldi	r20, 0x20	; 32
    a432:	51 e4       	ldi	r21, 0x41	; 65
    a434:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a438:	dc 01       	movw	r26, r24
    a43a:	cb 01       	movw	r24, r22
    a43c:	bc 01       	movw	r22, r24
    a43e:	cd 01       	movw	r24, r26
    a440:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a444:	dc 01       	movw	r26, r24
    a446:	cb 01       	movw	r24, r22
    a448:	9e a3       	lds	r25, 0x5e
    a44a:	8d a3       	lds	r24, 0x5d
    a44c:	12 c0       	rjmp	.+36     	; 0xa472 <travel_path+0x494>
    a44e:	80 e7       	ldi	r24, 0x70	; 112
    a450:	91 e0       	ldi	r25, 0x01	; 1
    a452:	98 a7       	lds	r25, 0x78
    a454:	8f a3       	lds	r24, 0x5f
    a456:	8f a1       	lds	r24, 0x4f
    a458:	98 a5       	lds	r25, 0x68
    a45a:	8c 01       	movw	r16, r24
    a45c:	c8 01       	movw	r24, r16
    a45e:	01 97       	sbiw	r24, 0x01	; 1
    a460:	f1 f7       	brne	.-4      	; 0xa45e <travel_path+0x480>
    a462:	8c 01       	movw	r16, r24
    a464:	18 a7       	lds	r17, 0x78
    a466:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a468:	8d a1       	lds	r24, 0x4d
    a46a:	9e a1       	lds	r25, 0x4e
    a46c:	01 97       	sbiw	r24, 0x01	; 1
    a46e:	9e a3       	lds	r25, 0x5e
    a470:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a472:	8d a1       	lds	r24, 0x4d
    a474:	9e a1       	lds	r25, 0x4e
    a476:	00 97       	sbiw	r24, 0x00	; 0
    a478:	51 f7       	brne	.-44     	; 0xa44e <travel_path+0x470>
    a47a:	17 c0       	rjmp	.+46     	; 0xa4aa <travel_path+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a47c:	69 a1       	lds	r22, 0x49
    a47e:	7a a1       	lds	r23, 0x4a
    a480:	8b a1       	lds	r24, 0x4b
    a482:	9c a1       	lds	r25, 0x4c
    a484:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a488:	dc 01       	movw	r26, r24
    a48a:	cb 01       	movw	r24, r22
    a48c:	9e a3       	lds	r25, 0x5e
    a48e:	8d a3       	lds	r24, 0x5d
    a490:	8d a1       	lds	r24, 0x4d
    a492:	9e a1       	lds	r25, 0x4e
    a494:	9a a7       	lds	r25, 0x7a
    a496:	89 a7       	lds	r24, 0x79
    a498:	89 a5       	lds	r24, 0x69
    a49a:	9a a5       	lds	r25, 0x6a
    a49c:	8c 01       	movw	r16, r24
    a49e:	f8 01       	movw	r30, r16
    a4a0:	31 97       	sbiw	r30, 0x01	; 1
    a4a2:	f1 f7       	brne	.-4      	; 0xa4a0 <travel_path+0x4c2>
    a4a4:	8f 01       	movw	r16, r30
    a4a6:	1a a7       	lds	r17, 0x7a
    a4a8:	09 a7       	lds	r16, 0x79
				_delay_ms(20);
				forward_mm(160);
    a4aa:	80 ea       	ldi	r24, 0xA0	; 160
    a4ac:	90 e0       	ldi	r25, 0x00	; 0
    a4ae:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a4b2:	80 e0       	ldi	r24, 0x00	; 0
    a4b4:	90 e0       	ldi	r25, 0x00	; 0
    a4b6:	a0 ea       	ldi	r26, 0xA0	; 160
    a4b8:	b1 e4       	ldi	r27, 0x41	; 65
    a4ba:	8b a7       	lds	r24, 0x7b
    a4bc:	9c a7       	lds	r25, 0x7c
    a4be:	ad a7       	lds	r26, 0x7d
    a4c0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a4c2:	6b a5       	lds	r22, 0x6b
    a4c4:	7c a5       	lds	r23, 0x6c
    a4c6:	8d a5       	lds	r24, 0x6d
    a4c8:	9e a5       	lds	r25, 0x6e
    a4ca:	26 e6       	ldi	r18, 0x66	; 102
    a4cc:	36 e6       	ldi	r19, 0x66	; 102
    a4ce:	46 e6       	ldi	r20, 0x66	; 102
    a4d0:	55 e4       	ldi	r21, 0x45	; 69
    a4d2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a4d6:	dc 01       	movw	r26, r24
    a4d8:	cb 01       	movw	r24, r22
    a4da:	8f a7       	lds	r24, 0x7f
    a4dc:	98 ab       	sts	0x58, r25
    a4de:	a9 ab       	sts	0x59, r26
    a4e0:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    a4e2:	11 e0       	ldi	r17, 0x01	; 1
    a4e4:	6f a5       	lds	r22, 0x6f
    a4e6:	78 a9       	sts	0x48, r23
    a4e8:	89 a9       	sts	0x49, r24
    a4ea:	9a a9       	sts	0x4a, r25
    a4ec:	20 e0       	ldi	r18, 0x00	; 0
    a4ee:	30 e0       	ldi	r19, 0x00	; 0
    a4f0:	40 e8       	ldi	r20, 0x80	; 128
    a4f2:	5f e3       	ldi	r21, 0x3F	; 63
    a4f4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    a4f8:	88 23       	and	r24, r24
    a4fa:	0c f0       	brlt	.+2      	; 0xa4fe <travel_path+0x520>
    a4fc:	10 e0       	ldi	r17, 0x00	; 0
    a4fe:	11 23       	and	r17, r17
    a500:	29 f0       	breq	.+10     	; 0xa50c <travel_path+0x52e>
		__ticks = 1;
    a502:	81 e0       	ldi	r24, 0x01	; 1
    a504:	90 e0       	ldi	r25, 0x00	; 0
    a506:	9c ab       	sts	0x5c, r25
    a508:	8b ab       	sts	0x5b, r24
    a50a:	46 c0       	rjmp	.+140    	; 0xa598 <travel_path+0x5ba>
	else if (__tmp > 65535)
    a50c:	11 e0       	ldi	r17, 0x01	; 1
    a50e:	6f a5       	lds	r22, 0x6f
    a510:	78 a9       	sts	0x48, r23
    a512:	89 a9       	sts	0x49, r24
    a514:	9a a9       	sts	0x4a, r25
    a516:	20 e0       	ldi	r18, 0x00	; 0
    a518:	3f ef       	ldi	r19, 0xFF	; 255
    a51a:	4f e7       	ldi	r20, 0x7F	; 127
    a51c:	57 e4       	ldi	r21, 0x47	; 71
    a51e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    a522:	18 16       	cp	r1, r24
    a524:	0c f0       	brlt	.+2      	; 0xa528 <travel_path+0x54a>
    a526:	10 e0       	ldi	r17, 0x00	; 0
    a528:	11 23       	and	r17, r17
    a52a:	61 f1       	breq	.+88     	; 0xa584 <travel_path+0x5a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a52c:	6b a5       	lds	r22, 0x6b
    a52e:	7c a5       	lds	r23, 0x6c
    a530:	8d a5       	lds	r24, 0x6d
    a532:	9e a5       	lds	r25, 0x6e
    a534:	20 e0       	ldi	r18, 0x00	; 0
    a536:	30 e0       	ldi	r19, 0x00	; 0
    a538:	40 e2       	ldi	r20, 0x20	; 32
    a53a:	51 e4       	ldi	r21, 0x41	; 65
    a53c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a540:	dc 01       	movw	r26, r24
    a542:	cb 01       	movw	r24, r22
    a544:	bc 01       	movw	r22, r24
    a546:	cd 01       	movw	r24, r26
    a548:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a54c:	dc 01       	movw	r26, r24
    a54e:	cb 01       	movw	r24, r22
    a550:	9c ab       	sts	0x5c, r25
    a552:	8b ab       	sts	0x5b, r24
    a554:	12 c0       	rjmp	.+36     	; 0xa57a <travel_path+0x59c>
    a556:	80 e7       	ldi	r24, 0x70	; 112
    a558:	91 e0       	ldi	r25, 0x01	; 1
    a55a:	9e ab       	sts	0x5e, r25
    a55c:	8d ab       	sts	0x5d, r24
    a55e:	8d a9       	sts	0x4d, r24
    a560:	9e a9       	sts	0x4e, r25
    a562:	8c 01       	movw	r16, r24
    a564:	c8 01       	movw	r24, r16
    a566:	01 97       	sbiw	r24, 0x01	; 1
    a568:	f1 f7       	brne	.-4      	; 0xa566 <travel_path+0x588>
    a56a:	8c 01       	movw	r16, r24
    a56c:	1e ab       	sts	0x5e, r17
    a56e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a570:	8b a9       	sts	0x4b, r24
    a572:	9c a9       	sts	0x4c, r25
    a574:	01 97       	sbiw	r24, 0x01	; 1
    a576:	9c ab       	sts	0x5c, r25
    a578:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a57a:	8b a9       	sts	0x4b, r24
    a57c:	9c a9       	sts	0x4c, r25
    a57e:	00 97       	sbiw	r24, 0x00	; 0
    a580:	51 f7       	brne	.-44     	; 0xa556 <travel_path+0x578>
    a582:	17 c0       	rjmp	.+46     	; 0xa5b2 <travel_path+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a584:	6f a5       	lds	r22, 0x6f
    a586:	78 a9       	sts	0x48, r23
    a588:	89 a9       	sts	0x49, r24
    a58a:	9a a9       	sts	0x4a, r25
    a58c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a590:	dc 01       	movw	r26, r24
    a592:	cb 01       	movw	r24, r22
    a594:	9c ab       	sts	0x5c, r25
    a596:	8b ab       	sts	0x5b, r24
    a598:	8b a9       	sts	0x4b, r24
    a59a:	9c a9       	sts	0x4c, r25
    a59c:	98 af       	sts	0x78, r25
    a59e:	8f ab       	sts	0x5f, r24
    a5a0:	8f a9       	sts	0x4f, r24
    a5a2:	98 ad       	sts	0x68, r25
    a5a4:	8c 01       	movw	r16, r24
    a5a6:	f8 01       	movw	r30, r16
    a5a8:	31 97       	sbiw	r30, 0x01	; 1
    a5aa:	f1 f7       	brne	.-4      	; 0xa5a8 <travel_path+0x5ca>
    a5ac:	8f 01       	movw	r16, r30
    a5ae:	18 af       	sts	0x78, r17
    a5b0:	0f ab       	sts	0x5f, r16
				_delay_ms(20);
				 spl_right2();
    a5b2:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <spl_right2>
    a5b6:	80 e0       	ldi	r24, 0x00	; 0
    a5b8:	90 e0       	ldi	r25, 0x00	; 0
    a5ba:	a0 ea       	ldi	r26, 0xA0	; 160
    a5bc:	b1 e4       	ldi	r27, 0x41	; 65
    a5be:	89 af       	sts	0x79, r24
    a5c0:	9a af       	sts	0x7a, r25
    a5c2:	ab af       	sts	0x7b, r26
    a5c4:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a5c6:	69 ad       	sts	0x69, r22
    a5c8:	7a ad       	sts	0x6a, r23
    a5ca:	8b ad       	sts	0x6b, r24
    a5cc:	9c ad       	sts	0x6c, r25
    a5ce:	26 e6       	ldi	r18, 0x66	; 102
    a5d0:	36 e6       	ldi	r19, 0x66	; 102
    a5d2:	46 e6       	ldi	r20, 0x66	; 102
    a5d4:	55 e4       	ldi	r21, 0x45	; 69
    a5d6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a5da:	dc 01       	movw	r26, r24
    a5dc:	cb 01       	movw	r24, r22
    a5de:	9e 01       	movw	r18, r28
    a5e0:	23 5c       	subi	r18, 0xC3	; 195
    a5e2:	3f 4f       	sbci	r19, 0xFF	; 255
    a5e4:	f9 01       	movw	r30, r18
    a5e6:	80 83       	st	Z, r24
    a5e8:	91 83       	std	Z+1, r25	; 0x01
    a5ea:	a2 83       	std	Z+2, r26	; 0x02
    a5ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a5ee:	11 e0       	ldi	r17, 0x01	; 1
    a5f0:	ce 01       	movw	r24, r28
    a5f2:	cd 96       	adiw	r24, 0x3d	; 61
    a5f4:	fc 01       	movw	r30, r24
    a5f6:	60 81       	ld	r22, Z
    a5f8:	71 81       	ldd	r23, Z+1	; 0x01
    a5fa:	82 81       	ldd	r24, Z+2	; 0x02
    a5fc:	93 81       	ldd	r25, Z+3	; 0x03
    a5fe:	20 e0       	ldi	r18, 0x00	; 0
    a600:	30 e0       	ldi	r19, 0x00	; 0
    a602:	40 e8       	ldi	r20, 0x80	; 128
    a604:	5f e3       	ldi	r21, 0x3F	; 63
    a606:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    a60a:	88 23       	and	r24, r24
    a60c:	0c f0       	brlt	.+2      	; 0xa610 <travel_path+0x632>
    a60e:	10 e0       	ldi	r17, 0x00	; 0
    a610:	11 23       	and	r17, r17
    a612:	49 f0       	breq	.+18     	; 0xa626 <travel_path+0x648>
		__ticks = 1;
    a614:	ce 01       	movw	r24, r28
    a616:	8f 5b       	subi	r24, 0xBF	; 191
    a618:	9f 4f       	sbci	r25, 0xFF	; 255
    a61a:	21 e0       	ldi	r18, 0x01	; 1
    a61c:	30 e0       	ldi	r19, 0x00	; 0
    a61e:	fc 01       	movw	r30, r24
    a620:	31 83       	std	Z+1, r19	; 0x01
    a622:	20 83       	st	Z, r18
    a624:	6e c0       	rjmp	.+220    	; 0xa702 <travel_path+0x724>
	else if (__tmp > 65535)
    a626:	11 e0       	ldi	r17, 0x01	; 1
    a628:	ce 01       	movw	r24, r28
    a62a:	cd 96       	adiw	r24, 0x3d	; 61
    a62c:	fc 01       	movw	r30, r24
    a62e:	60 81       	ld	r22, Z
    a630:	71 81       	ldd	r23, Z+1	; 0x01
    a632:	82 81       	ldd	r24, Z+2	; 0x02
    a634:	93 81       	ldd	r25, Z+3	; 0x03
    a636:	20 e0       	ldi	r18, 0x00	; 0
    a638:	3f ef       	ldi	r19, 0xFF	; 255
    a63a:	4f e7       	ldi	r20, 0x7F	; 127
    a63c:	57 e4       	ldi	r21, 0x47	; 71
    a63e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    a642:	18 16       	cp	r1, r24
    a644:	0c f0       	brlt	.+2      	; 0xa648 <travel_path+0x66a>
    a646:	10 e0       	ldi	r17, 0x00	; 0
    a648:	11 23       	and	r17, r17
    a64a:	09 f4       	brne	.+2      	; 0xa64e <travel_path+0x670>
    a64c:	49 c0       	rjmp	.+146    	; 0xa6e0 <travel_path+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a64e:	69 ad       	sts	0x69, r22
    a650:	7a ad       	sts	0x6a, r23
    a652:	8b ad       	sts	0x6b, r24
    a654:	9c ad       	sts	0x6c, r25
    a656:	20 e0       	ldi	r18, 0x00	; 0
    a658:	30 e0       	ldi	r19, 0x00	; 0
    a65a:	40 e2       	ldi	r20, 0x20	; 32
    a65c:	51 e4       	ldi	r21, 0x41	; 65
    a65e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a662:	dc 01       	movw	r26, r24
    a664:	cb 01       	movw	r24, r22
    a666:	8e 01       	movw	r16, r28
    a668:	0f 5b       	subi	r16, 0xBF	; 191
    a66a:	1f 4f       	sbci	r17, 0xFF	; 255
    a66c:	bc 01       	movw	r22, r24
    a66e:	cd 01       	movw	r24, r26
    a670:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a674:	dc 01       	movw	r26, r24
    a676:	cb 01       	movw	r24, r22
    a678:	f8 01       	movw	r30, r16
    a67a:	91 83       	std	Z+1, r25	; 0x01
    a67c:	80 83       	st	Z, r24
    a67e:	27 c0       	rjmp	.+78     	; 0xa6ce <travel_path+0x6f0>
    a680:	ce 01       	movw	r24, r28
    a682:	8d 5b       	subi	r24, 0xBD	; 189
    a684:	9f 4f       	sbci	r25, 0xFF	; 255
    a686:	20 e7       	ldi	r18, 0x70	; 112
    a688:	31 e0       	ldi	r19, 0x01	; 1
    a68a:	fc 01       	movw	r30, r24
    a68c:	31 83       	std	Z+1, r19	; 0x01
    a68e:	20 83       	st	Z, r18
    a690:	ce 01       	movw	r24, r28
    a692:	8d 5b       	subi	r24, 0xBD	; 189
    a694:	9f 4f       	sbci	r25, 0xFF	; 255
    a696:	fc 01       	movw	r30, r24
    a698:	80 81       	ld	r24, Z
    a69a:	91 81       	ldd	r25, Z+1	; 0x01
    a69c:	8c 01       	movw	r16, r24
    a69e:	c8 01       	movw	r24, r16
    a6a0:	01 97       	sbiw	r24, 0x01	; 1
    a6a2:	f1 f7       	brne	.-4      	; 0xa6a0 <travel_path+0x6c2>
    a6a4:	8c 01       	movw	r16, r24
    a6a6:	ce 01       	movw	r24, r28
    a6a8:	8d 5b       	subi	r24, 0xBD	; 189
    a6aa:	9f 4f       	sbci	r25, 0xFF	; 255
    a6ac:	fc 01       	movw	r30, r24
    a6ae:	11 83       	std	Z+1, r17	; 0x01
    a6b0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a6b2:	ce 01       	movw	r24, r28
    a6b4:	8f 5b       	subi	r24, 0xBF	; 191
    a6b6:	9f 4f       	sbci	r25, 0xFF	; 255
    a6b8:	9e 01       	movw	r18, r28
    a6ba:	2f 5b       	subi	r18, 0xBF	; 191
    a6bc:	3f 4f       	sbci	r19, 0xFF	; 255
    a6be:	f9 01       	movw	r30, r18
    a6c0:	20 81       	ld	r18, Z
    a6c2:	31 81       	ldd	r19, Z+1	; 0x01
    a6c4:	21 50       	subi	r18, 0x01	; 1
    a6c6:	30 40       	sbci	r19, 0x00	; 0
    a6c8:	fc 01       	movw	r30, r24
    a6ca:	31 83       	std	Z+1, r19	; 0x01
    a6cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a6ce:	ce 01       	movw	r24, r28
    a6d0:	8f 5b       	subi	r24, 0xBF	; 191
    a6d2:	9f 4f       	sbci	r25, 0xFF	; 255
    a6d4:	fc 01       	movw	r30, r24
    a6d6:	80 81       	ld	r24, Z
    a6d8:	91 81       	ldd	r25, Z+1	; 0x01
    a6da:	00 97       	sbiw	r24, 0x00	; 0
    a6dc:	89 f6       	brne	.-94     	; 0xa680 <travel_path+0x6a2>
    a6de:	31 c0       	rjmp	.+98     	; 0xa742 <travel_path+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a6e0:	8e 01       	movw	r16, r28
    a6e2:	0f 5b       	subi	r16, 0xBF	; 191
    a6e4:	1f 4f       	sbci	r17, 0xFF	; 255
    a6e6:	ce 01       	movw	r24, r28
    a6e8:	cd 96       	adiw	r24, 0x3d	; 61
    a6ea:	fc 01       	movw	r30, r24
    a6ec:	60 81       	ld	r22, Z
    a6ee:	71 81       	ldd	r23, Z+1	; 0x01
    a6f0:	82 81       	ldd	r24, Z+2	; 0x02
    a6f2:	93 81       	ldd	r25, Z+3	; 0x03
    a6f4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    a6f8:	dc 01       	movw	r26, r24
    a6fa:	cb 01       	movw	r24, r22
    a6fc:	f8 01       	movw	r30, r16
    a6fe:	91 83       	std	Z+1, r25	; 0x01
    a700:	80 83       	st	Z, r24
    a702:	ce 01       	movw	r24, r28
    a704:	8b 5b       	subi	r24, 0xBB	; 187
    a706:	9f 4f       	sbci	r25, 0xFF	; 255
    a708:	9e 01       	movw	r18, r28
    a70a:	2f 5b       	subi	r18, 0xBF	; 191
    a70c:	3f 4f       	sbci	r19, 0xFF	; 255
    a70e:	f9 01       	movw	r30, r18
    a710:	20 81       	ld	r18, Z
    a712:	31 81       	ldd	r19, Z+1	; 0x01
    a714:	fc 01       	movw	r30, r24
    a716:	31 83       	std	Z+1, r19	; 0x01
    a718:	20 83       	st	Z, r18
    a71a:	ce 01       	movw	r24, r28
    a71c:	8b 5b       	subi	r24, 0xBB	; 187
    a71e:	9f 4f       	sbci	r25, 0xFF	; 255
    a720:	fc 01       	movw	r30, r24
    a722:	80 81       	ld	r24, Z
    a724:	91 81       	ldd	r25, Z+1	; 0x01
    a726:	8c 01       	movw	r16, r24
    a728:	c8 01       	movw	r24, r16
    a72a:	01 97       	sbiw	r24, 0x01	; 1
    a72c:	f1 f7       	brne	.-4      	; 0xa72a <travel_path+0x74c>
    a72e:	8c 01       	movw	r16, r24
    a730:	ce 01       	movw	r24, r28
    a732:	8b 5b       	subi	r24, 0xBB	; 187
    a734:	9f 4f       	sbci	r25, 0xFF	; 255
    a736:	fc 01       	movw	r30, r24
    a738:	11 83       	std	Z+1, r17	; 0x01
    a73a:	00 83       	st	Z, r16
    a73c:	02 c0       	rjmp	.+4      	; 0xa742 <travel_path+0x764>
				_delay_ms(20);
			}

			else
			correct_right();
    a73e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;
    a742:	80 91 65 03 	lds	r24, 0x0365
    a746:	90 91 66 03 	lds	r25, 0x0366
    a74a:	01 96       	adiw	r24, 0x01	; 1
    a74c:	90 93 66 03 	sts	0x0366, r25
    a750:	80 93 65 03 	sts	0x0365, r24
			pick_drop(master_path[node]);
    a754:	80 91 65 03 	lds	r24, 0x0365
    a758:	90 91 66 03 	lds	r25, 0x0366
    a75c:	87 59       	subi	r24, 0x97	; 151
    a75e:	9c 4f       	sbci	r25, 0xFC	; 252
    a760:	fc 01       	movw	r30, r24
    a762:	80 81       	ld	r24, Z
    a764:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <pick_drop>
			node++;
    a768:	80 91 65 03 	lds	r24, 0x0365
    a76c:	90 91 66 03 	lds	r25, 0x0366
    a770:	01 96       	adiw	r24, 0x01	; 1
    a772:	90 93 66 03 	sts	0x0366, r25
    a776:	80 93 65 03 	sts	0x0365, r24
			travel_path(master_path[node]);
    a77a:	80 91 65 03 	lds	r24, 0x0365
    a77e:	90 91 66 03 	lds	r25, 0x0366
    a782:	87 59       	subi	r24, 0x97	; 151
    a784:	9c 4f       	sbci	r25, 0xFC	; 252
    a786:	fc 01       	movw	r30, r24
    a788:	80 81       	ld	r24, Z
    a78a:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <travel_path>
    a78e:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
		}

		else{
			node--;
    a792:	80 91 65 03 	lds	r24, 0x0365
    a796:	90 91 66 03 	lds	r25, 0x0366
    a79a:	01 97       	sbiw	r24, 0x01	; 1
    a79c:	90 93 66 03 	sts	0x0366, r25
    a7a0:	80 93 65 03 	sts	0x0365, r24
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    a7a4:	80 91 65 03 	lds	r24, 0x0365
    a7a8:	90 91 66 03 	lds	r25, 0x0366
    a7ac:	01 97       	sbiw	r24, 0x01	; 1
    a7ae:	87 59       	subi	r24, 0x97	; 151
    a7b0:	9c 4f       	sbci	r25, 0xFC	; 252
    a7b2:	fc 01       	movw	r30, r24
    a7b4:	80 81       	ld	r24, Z
    a7b6:	8c 34       	cpi	r24, 0x4C	; 76
    a7b8:	b1 f0       	breq	.+44     	; 0xa7e6 <travel_path+0x808>
    a7ba:	80 91 65 03 	lds	r24, 0x0365
    a7be:	90 91 66 03 	lds	r25, 0x0366
    a7c2:	01 97       	sbiw	r24, 0x01	; 1
    a7c4:	87 59       	subi	r24, 0x97	; 151
    a7c6:	9c 4f       	sbci	r25, 0xFC	; 252
    a7c8:	fc 01       	movw	r30, r24
    a7ca:	80 81       	ld	r24, Z
    a7cc:	82 35       	cpi	r24, 0x52	; 82
    a7ce:	59 f0       	breq	.+22     	; 0xa7e6 <travel_path+0x808>
    a7d0:	80 91 65 03 	lds	r24, 0x0365
    a7d4:	90 91 66 03 	lds	r25, 0x0366
    a7d8:	01 97       	sbiw	r24, 0x01	; 1
    a7da:	87 59       	subi	r24, 0x97	; 151
    a7dc:	9c 4f       	sbci	r25, 0xFC	; 252
    a7de:	fc 01       	movw	r30, r24
    a7e0:	80 81       	ld	r24, Z
    a7e2:	85 35       	cpi	r24, 0x55	; 85
    a7e4:	19 f4       	brne	.+6      	; 0xa7ec <travel_path+0x80e>
			correct_right2();
    a7e6:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <correct_right2>
    a7ea:	02 c0       	rjmp	.+4      	; 0xa7f0 <travel_path+0x812>
			else 
			correct_right();
    a7ec:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;		
    a7f0:	80 91 65 03 	lds	r24, 0x0365
    a7f4:	90 91 66 03 	lds	r25, 0x0366
    a7f8:	01 96       	adiw	r24, 0x01	; 1
    a7fa:	90 93 66 03 	sts	0x0366, r25
    a7fe:	80 93 65 03 	sts	0x0365, r24
    a802:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
		}
	}
		else if(pos_val=='L')
    a806:	ce 01       	movw	r24, r28
    a808:	89 54       	subi	r24, 0x49	; 73
    a80a:	9f 4f       	sbci	r25, 0xFF	; 255
    a80c:	fc 01       	movw	r30, r24
    a80e:	80 81       	ld	r24, Z
    a810:	8c 34       	cpi	r24, 0x4C	; 76
    a812:	09 f0       	breq	.+2      	; 0xa816 <travel_path+0x838>
    a814:	1f c5       	rjmp	.+2622   	; 0xb254 <travel_path+0x1276>
		{
			if(node==0)
    a816:	80 91 65 03 	lds	r24, 0x0365
    a81a:	90 91 66 03 	lds	r25, 0x0366
    a81e:	00 97       	sbiw	r24, 0x00	; 0
    a820:	21 f4       	brne	.+8      	; 0xa82a <travel_path+0x84c>
			correct_left();
    a822:	0e 94 21 11 	call	0x2242	; 0x2242 <correct_left>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    a826:	0c 94 84 5d 	jmp	0xbb08	; 0xbb08 <travel_path+0x1b2a>
	}
		else if(pos_val=='L')
		{
			if(node==0)
			correct_left();
			else if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    a82a:	80 91 65 03 	lds	r24, 0x0365
    a82e:	90 91 66 03 	lds	r25, 0x0366
    a832:	01 96       	adiw	r24, 0x01	; 1
    a834:	87 59       	subi	r24, 0x97	; 151
    a836:	9c 4f       	sbci	r25, 0xFC	; 252
    a838:	fc 01       	movw	r30, r24
    a83a:	80 81       	ld	r24, Z
    a83c:	84 34       	cpi	r24, 0x44	; 68
    a83e:	09 f4       	brne	.+2      	; 0xa842 <travel_path+0x864>
    a840:	5b c0       	rjmp	.+182    	; 0xa8f8 <travel_path+0x91a>
    a842:	80 91 65 03 	lds	r24, 0x0365
    a846:	90 91 66 03 	lds	r25, 0x0366
    a84a:	01 96       	adiw	r24, 0x01	; 1
    a84c:	87 59       	subi	r24, 0x97	; 151
    a84e:	9c 4f       	sbci	r25, 0xFC	; 252
    a850:	fc 01       	movw	r30, r24
    a852:	80 81       	ld	r24, Z
    a854:	81 33       	cpi	r24, 0x31	; 49
    a856:	09 f4       	brne	.+2      	; 0xa85a <travel_path+0x87c>
    a858:	4f c0       	rjmp	.+158    	; 0xa8f8 <travel_path+0x91a>
    a85a:	80 91 65 03 	lds	r24, 0x0365
    a85e:	90 91 66 03 	lds	r25, 0x0366
    a862:	01 96       	adiw	r24, 0x01	; 1
    a864:	87 59       	subi	r24, 0x97	; 151
    a866:	9c 4f       	sbci	r25, 0xFC	; 252
    a868:	fc 01       	movw	r30, r24
    a86a:	80 81       	ld	r24, Z
    a86c:	82 33       	cpi	r24, 0x32	; 50
    a86e:	09 f4       	brne	.+2      	; 0xa872 <travel_path+0x894>
    a870:	43 c0       	rjmp	.+134    	; 0xa8f8 <travel_path+0x91a>
    a872:	80 91 65 03 	lds	r24, 0x0365
    a876:	90 91 66 03 	lds	r25, 0x0366
    a87a:	01 96       	adiw	r24, 0x01	; 1
    a87c:	87 59       	subi	r24, 0x97	; 151
    a87e:	9c 4f       	sbci	r25, 0xFC	; 252
    a880:	fc 01       	movw	r30, r24
    a882:	80 81       	ld	r24, Z
    a884:	83 33       	cpi	r24, 0x33	; 51
    a886:	c1 f1       	breq	.+112    	; 0xa8f8 <travel_path+0x91a>
    a888:	80 91 65 03 	lds	r24, 0x0365
    a88c:	90 91 66 03 	lds	r25, 0x0366
    a890:	01 96       	adiw	r24, 0x01	; 1
    a892:	87 59       	subi	r24, 0x97	; 151
    a894:	9c 4f       	sbci	r25, 0xFC	; 252
    a896:	fc 01       	movw	r30, r24
    a898:	80 81       	ld	r24, Z
    a89a:	84 33       	cpi	r24, 0x34	; 52
    a89c:	69 f1       	breq	.+90     	; 0xa8f8 <travel_path+0x91a>
    a89e:	80 91 65 03 	lds	r24, 0x0365
    a8a2:	90 91 66 03 	lds	r25, 0x0366
    a8a6:	01 96       	adiw	r24, 0x01	; 1
    a8a8:	87 59       	subi	r24, 0x97	; 151
    a8aa:	9c 4f       	sbci	r25, 0xFC	; 252
    a8ac:	fc 01       	movw	r30, r24
    a8ae:	80 81       	ld	r24, Z
    a8b0:	85 33       	cpi	r24, 0x35	; 53
    a8b2:	11 f1       	breq	.+68     	; 0xa8f8 <travel_path+0x91a>
    a8b4:	80 91 65 03 	lds	r24, 0x0365
    a8b8:	90 91 66 03 	lds	r25, 0x0366
    a8bc:	01 96       	adiw	r24, 0x01	; 1
    a8be:	87 59       	subi	r24, 0x97	; 151
    a8c0:	9c 4f       	sbci	r25, 0xFC	; 252
    a8c2:	fc 01       	movw	r30, r24
    a8c4:	80 81       	ld	r24, Z
    a8c6:	86 33       	cpi	r24, 0x36	; 54
    a8c8:	b9 f0       	breq	.+46     	; 0xa8f8 <travel_path+0x91a>
    a8ca:	80 91 65 03 	lds	r24, 0x0365
    a8ce:	90 91 66 03 	lds	r25, 0x0366
    a8d2:	01 96       	adiw	r24, 0x01	; 1
    a8d4:	87 59       	subi	r24, 0x97	; 151
    a8d6:	9c 4f       	sbci	r25, 0xFC	; 252
    a8d8:	fc 01       	movw	r30, r24
    a8da:	80 81       	ld	r24, Z
    a8dc:	87 33       	cpi	r24, 0x37	; 55
    a8de:	61 f0       	breq	.+24     	; 0xa8f8 <travel_path+0x91a>
    a8e0:	80 91 65 03 	lds	r24, 0x0365
    a8e4:	90 91 66 03 	lds	r25, 0x0366
    a8e8:	01 96       	adiw	r24, 0x01	; 1
    a8ea:	87 59       	subi	r24, 0x97	; 151
    a8ec:	9c 4f       	sbci	r25, 0xFC	; 252
    a8ee:	fc 01       	movw	r30, r24
    a8f0:	80 81       	ld	r24, Z
    a8f2:	88 33       	cpi	r24, 0x38	; 56
    a8f4:	09 f0       	breq	.+2      	; 0xa8f8 <travel_path+0x91a>
    a8f6:	78 c4       	rjmp	.+2288   	; 0xb1e8 <travel_path+0x120a>
			{
				if(master_path[node+1]=='7'||master_path[node+1]=='6')
    a8f8:	80 91 65 03 	lds	r24, 0x0365
    a8fc:	90 91 66 03 	lds	r25, 0x0366
    a900:	01 96       	adiw	r24, 0x01	; 1
    a902:	87 59       	subi	r24, 0x97	; 151
    a904:	9c 4f       	sbci	r25, 0xFC	; 252
    a906:	fc 01       	movw	r30, r24
    a908:	80 81       	ld	r24, Z
    a90a:	87 33       	cpi	r24, 0x37	; 55
    a90c:	61 f0       	breq	.+24     	; 0xa926 <travel_path+0x948>
    a90e:	80 91 65 03 	lds	r24, 0x0365
    a912:	90 91 66 03 	lds	r25, 0x0366
    a916:	01 96       	adiw	r24, 0x01	; 1
    a918:	87 59       	subi	r24, 0x97	; 151
    a91a:	9c 4f       	sbci	r25, 0xFC	; 252
    a91c:	fc 01       	movw	r30, r24
    a91e:	80 81       	ld	r24, Z
    a920:	86 33       	cpi	r24, 0x36	; 54
    a922:	09 f0       	breq	.+2      	; 0xa926 <travel_path+0x948>
    a924:	ad c1       	rjmp	.+858    	; 0xac80 <travel_path+0xca2>
				{
					forward_mm(25);
    a926:	89 e1       	ldi	r24, 0x19	; 25
    a928:	90 e0       	ldi	r25, 0x00	; 0
    a92a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a92e:	9e 01       	movw	r18, r28
    a930:	29 5b       	subi	r18, 0xB9	; 185
    a932:	3f 4f       	sbci	r19, 0xFF	; 255
    a934:	80 e0       	ldi	r24, 0x00	; 0
    a936:	90 e0       	ldi	r25, 0x00	; 0
    a938:	a0 ea       	ldi	r26, 0xA0	; 160
    a93a:	b1 e4       	ldi	r27, 0x41	; 65
    a93c:	f9 01       	movw	r30, r18
    a93e:	80 83       	st	Z, r24
    a940:	91 83       	std	Z+1, r25	; 0x01
    a942:	a2 83       	std	Z+2, r26	; 0x02
    a944:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a946:	8e 01       	movw	r16, r28
    a948:	05 5b       	subi	r16, 0xB5	; 181
    a94a:	1f 4f       	sbci	r17, 0xFF	; 255
    a94c:	ce 01       	movw	r24, r28
    a94e:	89 5b       	subi	r24, 0xB9	; 185
    a950:	9f 4f       	sbci	r25, 0xFF	; 255
    a952:	fc 01       	movw	r30, r24
    a954:	60 81       	ld	r22, Z
    a956:	71 81       	ldd	r23, Z+1	; 0x01
    a958:	82 81       	ldd	r24, Z+2	; 0x02
    a95a:	93 81       	ldd	r25, Z+3	; 0x03
    a95c:	26 e6       	ldi	r18, 0x66	; 102
    a95e:	36 e6       	ldi	r19, 0x66	; 102
    a960:	46 e6       	ldi	r20, 0x66	; 102
    a962:	55 e4       	ldi	r21, 0x45	; 69
    a964:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a968:	dc 01       	movw	r26, r24
    a96a:	cb 01       	movw	r24, r22
    a96c:	f8 01       	movw	r30, r16
    a96e:	80 83       	st	Z, r24
    a970:	91 83       	std	Z+1, r25	; 0x01
    a972:	a2 83       	std	Z+2, r26	; 0x02
    a974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a976:	ce 01       	movw	r24, r28
    a978:	85 5b       	subi	r24, 0xB5	; 181
    a97a:	9f 4f       	sbci	r25, 0xFF	; 255
    a97c:	11 e0       	ldi	r17, 0x01	; 1
    a97e:	fc 01       	movw	r30, r24
    a980:	60 81       	ld	r22, Z
    a982:	71 81       	ldd	r23, Z+1	; 0x01
    a984:	82 81       	ldd	r24, Z+2	; 0x02
    a986:	93 81       	ldd	r25, Z+3	; 0x03
    a988:	20 e0       	ldi	r18, 0x00	; 0
    a98a:	30 e0       	ldi	r19, 0x00	; 0
    a98c:	40 e8       	ldi	r20, 0x80	; 128
    a98e:	5f e3       	ldi	r21, 0x3F	; 63
    a990:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    a994:	88 23       	and	r24, r24
    a996:	0c f0       	brlt	.+2      	; 0xa99a <travel_path+0x9bc>
    a998:	10 e0       	ldi	r17, 0x00	; 0
    a99a:	11 23       	and	r17, r17
    a99c:	49 f0       	breq	.+18     	; 0xa9b0 <travel_path+0x9d2>
		__ticks = 1;
    a99e:	ce 01       	movw	r24, r28
    a9a0:	81 5b       	subi	r24, 0xB1	; 177
    a9a2:	9f 4f       	sbci	r25, 0xFF	; 255
    a9a4:	21 e0       	ldi	r18, 0x01	; 1
    a9a6:	30 e0       	ldi	r19, 0x00	; 0
    a9a8:	fc 01       	movw	r30, r24
    a9aa:	31 83       	std	Z+1, r19	; 0x01
    a9ac:	20 83       	st	Z, r18
    a9ae:	74 c0       	rjmp	.+232    	; 0xaa98 <travel_path+0xaba>
	else if (__tmp > 65535)
    a9b0:	ce 01       	movw	r24, r28
    a9b2:	85 5b       	subi	r24, 0xB5	; 181
    a9b4:	9f 4f       	sbci	r25, 0xFF	; 255
    a9b6:	11 e0       	ldi	r17, 0x01	; 1
    a9b8:	fc 01       	movw	r30, r24
    a9ba:	60 81       	ld	r22, Z
    a9bc:	71 81       	ldd	r23, Z+1	; 0x01
    a9be:	82 81       	ldd	r24, Z+2	; 0x02
    a9c0:	93 81       	ldd	r25, Z+3	; 0x03
    a9c2:	20 e0       	ldi	r18, 0x00	; 0
    a9c4:	3f ef       	ldi	r19, 0xFF	; 255
    a9c6:	4f e7       	ldi	r20, 0x7F	; 127
    a9c8:	57 e4       	ldi	r21, 0x47	; 71
    a9ca:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    a9ce:	18 16       	cp	r1, r24
    a9d0:	0c f0       	brlt	.+2      	; 0xa9d4 <travel_path+0x9f6>
    a9d2:	10 e0       	ldi	r17, 0x00	; 0
    a9d4:	11 23       	and	r17, r17
    a9d6:	09 f4       	brne	.+2      	; 0xa9da <travel_path+0x9fc>
    a9d8:	4d c0       	rjmp	.+154    	; 0xaa74 <travel_path+0xa96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a9da:	ce 01       	movw	r24, r28
    a9dc:	89 5b       	subi	r24, 0xB9	; 185
    a9de:	9f 4f       	sbci	r25, 0xFF	; 255
    a9e0:	fc 01       	movw	r30, r24
    a9e2:	60 81       	ld	r22, Z
    a9e4:	71 81       	ldd	r23, Z+1	; 0x01
    a9e6:	82 81       	ldd	r24, Z+2	; 0x02
    a9e8:	93 81       	ldd	r25, Z+3	; 0x03
    a9ea:	20 e0       	ldi	r18, 0x00	; 0
    a9ec:	30 e0       	ldi	r19, 0x00	; 0
    a9ee:	40 e2       	ldi	r20, 0x20	; 32
    a9f0:	51 e4       	ldi	r21, 0x41	; 65
    a9f2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    a9f6:	dc 01       	movw	r26, r24
    a9f8:	cb 01       	movw	r24, r22
    a9fa:	8e 01       	movw	r16, r28
    a9fc:	01 5b       	subi	r16, 0xB1	; 177
    a9fe:	1f 4f       	sbci	r17, 0xFF	; 255
    aa00:	bc 01       	movw	r22, r24
    aa02:	cd 01       	movw	r24, r26
    aa04:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    aa08:	dc 01       	movw	r26, r24
    aa0a:	cb 01       	movw	r24, r22
    aa0c:	f8 01       	movw	r30, r16
    aa0e:	91 83       	std	Z+1, r25	; 0x01
    aa10:	80 83       	st	Z, r24
    aa12:	27 c0       	rjmp	.+78     	; 0xaa62 <travel_path+0xa84>
    aa14:	ce 01       	movw	r24, r28
    aa16:	8f 5a       	subi	r24, 0xAF	; 175
    aa18:	9f 4f       	sbci	r25, 0xFF	; 255
    aa1a:	20 e7       	ldi	r18, 0x70	; 112
    aa1c:	31 e0       	ldi	r19, 0x01	; 1
    aa1e:	fc 01       	movw	r30, r24
    aa20:	31 83       	std	Z+1, r19	; 0x01
    aa22:	20 83       	st	Z, r18
    aa24:	ce 01       	movw	r24, r28
    aa26:	8f 5a       	subi	r24, 0xAF	; 175
    aa28:	9f 4f       	sbci	r25, 0xFF	; 255
    aa2a:	fc 01       	movw	r30, r24
    aa2c:	80 81       	ld	r24, Z
    aa2e:	91 81       	ldd	r25, Z+1	; 0x01
    aa30:	8c 01       	movw	r16, r24
    aa32:	c8 01       	movw	r24, r16
    aa34:	01 97       	sbiw	r24, 0x01	; 1
    aa36:	f1 f7       	brne	.-4      	; 0xaa34 <travel_path+0xa56>
    aa38:	8c 01       	movw	r16, r24
    aa3a:	ce 01       	movw	r24, r28
    aa3c:	8f 5a       	subi	r24, 0xAF	; 175
    aa3e:	9f 4f       	sbci	r25, 0xFF	; 255
    aa40:	fc 01       	movw	r30, r24
    aa42:	11 83       	std	Z+1, r17	; 0x01
    aa44:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa46:	ce 01       	movw	r24, r28
    aa48:	81 5b       	subi	r24, 0xB1	; 177
    aa4a:	9f 4f       	sbci	r25, 0xFF	; 255
    aa4c:	9e 01       	movw	r18, r28
    aa4e:	21 5b       	subi	r18, 0xB1	; 177
    aa50:	3f 4f       	sbci	r19, 0xFF	; 255
    aa52:	f9 01       	movw	r30, r18
    aa54:	20 81       	ld	r18, Z
    aa56:	31 81       	ldd	r19, Z+1	; 0x01
    aa58:	21 50       	subi	r18, 0x01	; 1
    aa5a:	30 40       	sbci	r19, 0x00	; 0
    aa5c:	fc 01       	movw	r30, r24
    aa5e:	31 83       	std	Z+1, r19	; 0x01
    aa60:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa62:	ce 01       	movw	r24, r28
    aa64:	81 5b       	subi	r24, 0xB1	; 177
    aa66:	9f 4f       	sbci	r25, 0xFF	; 255
    aa68:	fc 01       	movw	r30, r24
    aa6a:	80 81       	ld	r24, Z
    aa6c:	91 81       	ldd	r25, Z+1	; 0x01
    aa6e:	00 97       	sbiw	r24, 0x00	; 0
    aa70:	89 f6       	brne	.-94     	; 0xaa14 <travel_path+0xa36>
    aa72:	2f c0       	rjmp	.+94     	; 0xaad2 <travel_path+0xaf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aa74:	8e 01       	movw	r16, r28
    aa76:	01 5b       	subi	r16, 0xB1	; 177
    aa78:	1f 4f       	sbci	r17, 0xFF	; 255
    aa7a:	ce 01       	movw	r24, r28
    aa7c:	85 5b       	subi	r24, 0xB5	; 181
    aa7e:	9f 4f       	sbci	r25, 0xFF	; 255
    aa80:	fc 01       	movw	r30, r24
    aa82:	60 81       	ld	r22, Z
    aa84:	71 81       	ldd	r23, Z+1	; 0x01
    aa86:	82 81       	ldd	r24, Z+2	; 0x02
    aa88:	93 81       	ldd	r25, Z+3	; 0x03
    aa8a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    aa8e:	dc 01       	movw	r26, r24
    aa90:	cb 01       	movw	r24, r22
    aa92:	f8 01       	movw	r30, r16
    aa94:	91 83       	std	Z+1, r25	; 0x01
    aa96:	80 83       	st	Z, r24
    aa98:	ce 01       	movw	r24, r28
    aa9a:	8d 5a       	subi	r24, 0xAD	; 173
    aa9c:	9f 4f       	sbci	r25, 0xFF	; 255
    aa9e:	9e 01       	movw	r18, r28
    aaa0:	21 5b       	subi	r18, 0xB1	; 177
    aaa2:	3f 4f       	sbci	r19, 0xFF	; 255
    aaa4:	f9 01       	movw	r30, r18
    aaa6:	20 81       	ld	r18, Z
    aaa8:	31 81       	ldd	r19, Z+1	; 0x01
    aaaa:	fc 01       	movw	r30, r24
    aaac:	31 83       	std	Z+1, r19	; 0x01
    aaae:	20 83       	st	Z, r18
    aab0:	ce 01       	movw	r24, r28
    aab2:	8d 5a       	subi	r24, 0xAD	; 173
    aab4:	9f 4f       	sbci	r25, 0xFF	; 255
    aab6:	fc 01       	movw	r30, r24
    aab8:	80 81       	ld	r24, Z
    aaba:	91 81       	ldd	r25, Z+1	; 0x01
    aabc:	8c 01       	movw	r16, r24
    aabe:	c8 01       	movw	r24, r16
    aac0:	01 97       	sbiw	r24, 0x01	; 1
    aac2:	f1 f7       	brne	.-4      	; 0xaac0 <travel_path+0xae2>
    aac4:	8c 01       	movw	r16, r24
    aac6:	ce 01       	movw	r24, r28
    aac8:	8d 5a       	subi	r24, 0xAD	; 173
    aaca:	9f 4f       	sbci	r25, 0xFF	; 255
    aacc:	fc 01       	movw	r30, r24
    aace:	11 83       	std	Z+1, r17	; 0x01
    aad0:	00 83       	st	Z, r16
					_delay_ms(20);
					stop();
    aad2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    aad6:	9e 01       	movw	r18, r28
    aad8:	2b 5a       	subi	r18, 0xAB	; 171
    aada:	3f 4f       	sbci	r19, 0xFF	; 255
    aadc:	80 e0       	ldi	r24, 0x00	; 0
    aade:	90 e0       	ldi	r25, 0x00	; 0
    aae0:	a8 ec       	ldi	r26, 0xC8	; 200
    aae2:	b1 e4       	ldi	r27, 0x41	; 65
    aae4:	f9 01       	movw	r30, r18
    aae6:	80 83       	st	Z, r24
    aae8:	91 83       	std	Z+1, r25	; 0x01
    aaea:	a2 83       	std	Z+2, r26	; 0x02
    aaec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    aaee:	8e 01       	movw	r16, r28
    aaf0:	07 5a       	subi	r16, 0xA7	; 167
    aaf2:	1f 4f       	sbci	r17, 0xFF	; 255
    aaf4:	ce 01       	movw	r24, r28
    aaf6:	8b 5a       	subi	r24, 0xAB	; 171
    aaf8:	9f 4f       	sbci	r25, 0xFF	; 255
    aafa:	fc 01       	movw	r30, r24
    aafc:	60 81       	ld	r22, Z
    aafe:	71 81       	ldd	r23, Z+1	; 0x01
    ab00:	82 81       	ldd	r24, Z+2	; 0x02
    ab02:	93 81       	ldd	r25, Z+3	; 0x03
    ab04:	26 e6       	ldi	r18, 0x66	; 102
    ab06:	36 e6       	ldi	r19, 0x66	; 102
    ab08:	46 e6       	ldi	r20, 0x66	; 102
    ab0a:	55 e4       	ldi	r21, 0x45	; 69
    ab0c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    ab10:	dc 01       	movw	r26, r24
    ab12:	cb 01       	movw	r24, r22
    ab14:	f8 01       	movw	r30, r16
    ab16:	80 83       	st	Z, r24
    ab18:	91 83       	std	Z+1, r25	; 0x01
    ab1a:	a2 83       	std	Z+2, r26	; 0x02
    ab1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ab1e:	ce 01       	movw	r24, r28
    ab20:	87 5a       	subi	r24, 0xA7	; 167
    ab22:	9f 4f       	sbci	r25, 0xFF	; 255
    ab24:	11 e0       	ldi	r17, 0x01	; 1
    ab26:	fc 01       	movw	r30, r24
    ab28:	60 81       	ld	r22, Z
    ab2a:	71 81       	ldd	r23, Z+1	; 0x01
    ab2c:	82 81       	ldd	r24, Z+2	; 0x02
    ab2e:	93 81       	ldd	r25, Z+3	; 0x03
    ab30:	20 e0       	ldi	r18, 0x00	; 0
    ab32:	30 e0       	ldi	r19, 0x00	; 0
    ab34:	40 e8       	ldi	r20, 0x80	; 128
    ab36:	5f e3       	ldi	r21, 0x3F	; 63
    ab38:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    ab3c:	88 23       	and	r24, r24
    ab3e:	0c f0       	brlt	.+2      	; 0xab42 <travel_path+0xb64>
    ab40:	10 e0       	ldi	r17, 0x00	; 0
    ab42:	11 23       	and	r17, r17
    ab44:	49 f0       	breq	.+18     	; 0xab58 <travel_path+0xb7a>
		__ticks = 1;
    ab46:	ce 01       	movw	r24, r28
    ab48:	83 5a       	subi	r24, 0xA3	; 163
    ab4a:	9f 4f       	sbci	r25, 0xFF	; 255
    ab4c:	21 e0       	ldi	r18, 0x01	; 1
    ab4e:	30 e0       	ldi	r19, 0x00	; 0
    ab50:	fc 01       	movw	r30, r24
    ab52:	31 83       	std	Z+1, r19	; 0x01
    ab54:	20 83       	st	Z, r18
    ab56:	74 c0       	rjmp	.+232    	; 0xac40 <travel_path+0xc62>
	else if (__tmp > 65535)
    ab58:	ce 01       	movw	r24, r28
    ab5a:	87 5a       	subi	r24, 0xA7	; 167
    ab5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab5e:	11 e0       	ldi	r17, 0x01	; 1
    ab60:	fc 01       	movw	r30, r24
    ab62:	60 81       	ld	r22, Z
    ab64:	71 81       	ldd	r23, Z+1	; 0x01
    ab66:	82 81       	ldd	r24, Z+2	; 0x02
    ab68:	93 81       	ldd	r25, Z+3	; 0x03
    ab6a:	20 e0       	ldi	r18, 0x00	; 0
    ab6c:	3f ef       	ldi	r19, 0xFF	; 255
    ab6e:	4f e7       	ldi	r20, 0x7F	; 127
    ab70:	57 e4       	ldi	r21, 0x47	; 71
    ab72:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    ab76:	18 16       	cp	r1, r24
    ab78:	0c f0       	brlt	.+2      	; 0xab7c <travel_path+0xb9e>
    ab7a:	10 e0       	ldi	r17, 0x00	; 0
    ab7c:	11 23       	and	r17, r17
    ab7e:	09 f4       	brne	.+2      	; 0xab82 <travel_path+0xba4>
    ab80:	4d c0       	rjmp	.+154    	; 0xac1c <travel_path+0xc3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ab82:	ce 01       	movw	r24, r28
    ab84:	8b 5a       	subi	r24, 0xAB	; 171
    ab86:	9f 4f       	sbci	r25, 0xFF	; 255
    ab88:	fc 01       	movw	r30, r24
    ab8a:	60 81       	ld	r22, Z
    ab8c:	71 81       	ldd	r23, Z+1	; 0x01
    ab8e:	82 81       	ldd	r24, Z+2	; 0x02
    ab90:	93 81       	ldd	r25, Z+3	; 0x03
    ab92:	20 e0       	ldi	r18, 0x00	; 0
    ab94:	30 e0       	ldi	r19, 0x00	; 0
    ab96:	40 e2       	ldi	r20, 0x20	; 32
    ab98:	51 e4       	ldi	r21, 0x41	; 65
    ab9a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    ab9e:	dc 01       	movw	r26, r24
    aba0:	cb 01       	movw	r24, r22
    aba2:	8e 01       	movw	r16, r28
    aba4:	03 5a       	subi	r16, 0xA3	; 163
    aba6:	1f 4f       	sbci	r17, 0xFF	; 255
    aba8:	bc 01       	movw	r22, r24
    abaa:	cd 01       	movw	r24, r26
    abac:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    abb0:	dc 01       	movw	r26, r24
    abb2:	cb 01       	movw	r24, r22
    abb4:	f8 01       	movw	r30, r16
    abb6:	91 83       	std	Z+1, r25	; 0x01
    abb8:	80 83       	st	Z, r24
    abba:	27 c0       	rjmp	.+78     	; 0xac0a <travel_path+0xc2c>
    abbc:	ce 01       	movw	r24, r28
    abbe:	81 5a       	subi	r24, 0xA1	; 161
    abc0:	9f 4f       	sbci	r25, 0xFF	; 255
    abc2:	20 e7       	ldi	r18, 0x70	; 112
    abc4:	31 e0       	ldi	r19, 0x01	; 1
    abc6:	fc 01       	movw	r30, r24
    abc8:	31 83       	std	Z+1, r19	; 0x01
    abca:	20 83       	st	Z, r18
    abcc:	ce 01       	movw	r24, r28
    abce:	81 5a       	subi	r24, 0xA1	; 161
    abd0:	9f 4f       	sbci	r25, 0xFF	; 255
    abd2:	fc 01       	movw	r30, r24
    abd4:	80 81       	ld	r24, Z
    abd6:	91 81       	ldd	r25, Z+1	; 0x01
    abd8:	8c 01       	movw	r16, r24
    abda:	c8 01       	movw	r24, r16
    abdc:	01 97       	sbiw	r24, 0x01	; 1
    abde:	f1 f7       	brne	.-4      	; 0xabdc <travel_path+0xbfe>
    abe0:	8c 01       	movw	r16, r24
    abe2:	ce 01       	movw	r24, r28
    abe4:	81 5a       	subi	r24, 0xA1	; 161
    abe6:	9f 4f       	sbci	r25, 0xFF	; 255
    abe8:	fc 01       	movw	r30, r24
    abea:	11 83       	std	Z+1, r17	; 0x01
    abec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    abee:	ce 01       	movw	r24, r28
    abf0:	83 5a       	subi	r24, 0xA3	; 163
    abf2:	9f 4f       	sbci	r25, 0xFF	; 255
    abf4:	9e 01       	movw	r18, r28
    abf6:	23 5a       	subi	r18, 0xA3	; 163
    abf8:	3f 4f       	sbci	r19, 0xFF	; 255
    abfa:	f9 01       	movw	r30, r18
    abfc:	20 81       	ld	r18, Z
    abfe:	31 81       	ldd	r19, Z+1	; 0x01
    ac00:	21 50       	subi	r18, 0x01	; 1
    ac02:	30 40       	sbci	r19, 0x00	; 0
    ac04:	fc 01       	movw	r30, r24
    ac06:	31 83       	std	Z+1, r19	; 0x01
    ac08:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac0a:	ce 01       	movw	r24, r28
    ac0c:	83 5a       	subi	r24, 0xA3	; 163
    ac0e:	9f 4f       	sbci	r25, 0xFF	; 255
    ac10:	fc 01       	movw	r30, r24
    ac12:	80 81       	ld	r24, Z
    ac14:	91 81       	ldd	r25, Z+1	; 0x01
    ac16:	00 97       	sbiw	r24, 0x00	; 0
    ac18:	89 f6       	brne	.-94     	; 0xabbc <travel_path+0xbde>
    ac1a:	2f c0       	rjmp	.+94     	; 0xac7a <travel_path+0xc9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ac1c:	8e 01       	movw	r16, r28
    ac1e:	03 5a       	subi	r16, 0xA3	; 163
    ac20:	1f 4f       	sbci	r17, 0xFF	; 255
    ac22:	ce 01       	movw	r24, r28
    ac24:	87 5a       	subi	r24, 0xA7	; 167
    ac26:	9f 4f       	sbci	r25, 0xFF	; 255
    ac28:	fc 01       	movw	r30, r24
    ac2a:	60 81       	ld	r22, Z
    ac2c:	71 81       	ldd	r23, Z+1	; 0x01
    ac2e:	82 81       	ldd	r24, Z+2	; 0x02
    ac30:	93 81       	ldd	r25, Z+3	; 0x03
    ac32:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    ac36:	dc 01       	movw	r26, r24
    ac38:	cb 01       	movw	r24, r22
    ac3a:	f8 01       	movw	r30, r16
    ac3c:	91 83       	std	Z+1, r25	; 0x01
    ac3e:	80 83       	st	Z, r24
    ac40:	ce 01       	movw	r24, r28
    ac42:	8f 59       	subi	r24, 0x9F	; 159
    ac44:	9f 4f       	sbci	r25, 0xFF	; 255
    ac46:	9e 01       	movw	r18, r28
    ac48:	23 5a       	subi	r18, 0xA3	; 163
    ac4a:	3f 4f       	sbci	r19, 0xFF	; 255
    ac4c:	f9 01       	movw	r30, r18
    ac4e:	20 81       	ld	r18, Z
    ac50:	31 81       	ldd	r19, Z+1	; 0x01
    ac52:	fc 01       	movw	r30, r24
    ac54:	31 83       	std	Z+1, r19	; 0x01
    ac56:	20 83       	st	Z, r18
    ac58:	ce 01       	movw	r24, r28
    ac5a:	8f 59       	subi	r24, 0x9F	; 159
    ac5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ac5e:	fc 01       	movw	r30, r24
    ac60:	80 81       	ld	r24, Z
    ac62:	91 81       	ldd	r25, Z+1	; 0x01
    ac64:	8c 01       	movw	r16, r24
    ac66:	c8 01       	movw	r24, r16
    ac68:	01 97       	sbiw	r24, 0x01	; 1
    ac6a:	f1 f7       	brne	.-4      	; 0xac68 <travel_path+0xc8a>
    ac6c:	8c 01       	movw	r16, r24
    ac6e:	ce 01       	movw	r24, r28
    ac70:	8f 59       	subi	r24, 0x9F	; 159
    ac72:	9f 4f       	sbci	r25, 0xFF	; 255
    ac74:	fc 01       	movw	r30, r24
    ac76:	11 83       	std	Z+1, r17	; 0x01
    ac78:	00 83       	st	Z, r16
					_delay_ms(25);
					correct_left();
    ac7a:	0e 94 21 11 	call	0x2242	; 0x2242 <correct_left>
    ac7e:	8d c2       	rjmp	.+1306   	; 0xb19a <travel_path+0x11bc>
				}
						else if(master_path[node+1]=='8'){
    ac80:	80 91 65 03 	lds	r24, 0x0365
    ac84:	90 91 66 03 	lds	r25, 0x0366
    ac88:	01 96       	adiw	r24, 0x01	; 1
    ac8a:	87 59       	subi	r24, 0x97	; 151
    ac8c:	9c 4f       	sbci	r25, 0xFC	; 252
    ac8e:	fc 01       	movw	r30, r24
    ac90:	80 81       	ld	r24, Z
    ac92:	88 33       	cpi	r24, 0x38	; 56
    ac94:	09 f0       	breq	.+2      	; 0xac98 <travel_path+0xcba>
    ac96:	7f c2       	rjmp	.+1278   	; 0xb196 <travel_path+0x11b8>
							stop();
    ac98:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ac9c:	9e 01       	movw	r18, r28
    ac9e:	2d 59       	subi	r18, 0x9D	; 157
    aca0:	3f 4f       	sbci	r19, 0xFF	; 255
    aca2:	80 e0       	ldi	r24, 0x00	; 0
    aca4:	90 e0       	ldi	r25, 0x00	; 0
    aca6:	a0 ea       	ldi	r26, 0xA0	; 160
    aca8:	b1 e4       	ldi	r27, 0x41	; 65
    acaa:	f9 01       	movw	r30, r18
    acac:	80 83       	st	Z, r24
    acae:	91 83       	std	Z+1, r25	; 0x01
    acb0:	a2 83       	std	Z+2, r26	; 0x02
    acb2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    acb4:	8e 01       	movw	r16, r28
    acb6:	09 59       	subi	r16, 0x99	; 153
    acb8:	1f 4f       	sbci	r17, 0xFF	; 255
    acba:	ce 01       	movw	r24, r28
    acbc:	8d 59       	subi	r24, 0x9D	; 157
    acbe:	9f 4f       	sbci	r25, 0xFF	; 255
    acc0:	fc 01       	movw	r30, r24
    acc2:	60 81       	ld	r22, Z
    acc4:	71 81       	ldd	r23, Z+1	; 0x01
    acc6:	82 81       	ldd	r24, Z+2	; 0x02
    acc8:	93 81       	ldd	r25, Z+3	; 0x03
    acca:	26 e6       	ldi	r18, 0x66	; 102
    accc:	36 e6       	ldi	r19, 0x66	; 102
    acce:	46 e6       	ldi	r20, 0x66	; 102
    acd0:	55 e4       	ldi	r21, 0x45	; 69
    acd2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    acd6:	dc 01       	movw	r26, r24
    acd8:	cb 01       	movw	r24, r22
    acda:	f8 01       	movw	r30, r16
    acdc:	80 83       	st	Z, r24
    acde:	91 83       	std	Z+1, r25	; 0x01
    ace0:	a2 83       	std	Z+2, r26	; 0x02
    ace2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ace4:	ce 01       	movw	r24, r28
    ace6:	89 59       	subi	r24, 0x99	; 153
    ace8:	9f 4f       	sbci	r25, 0xFF	; 255
    acea:	11 e0       	ldi	r17, 0x01	; 1
    acec:	fc 01       	movw	r30, r24
    acee:	60 81       	ld	r22, Z
    acf0:	71 81       	ldd	r23, Z+1	; 0x01
    acf2:	82 81       	ldd	r24, Z+2	; 0x02
    acf4:	93 81       	ldd	r25, Z+3	; 0x03
    acf6:	20 e0       	ldi	r18, 0x00	; 0
    acf8:	30 e0       	ldi	r19, 0x00	; 0
    acfa:	40 e8       	ldi	r20, 0x80	; 128
    acfc:	5f e3       	ldi	r21, 0x3F	; 63
    acfe:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    ad02:	88 23       	and	r24, r24
    ad04:	0c f0       	brlt	.+2      	; 0xad08 <travel_path+0xd2a>
    ad06:	10 e0       	ldi	r17, 0x00	; 0
    ad08:	11 23       	and	r17, r17
    ad0a:	49 f0       	breq	.+18     	; 0xad1e <travel_path+0xd40>
		__ticks = 1;
    ad0c:	ce 01       	movw	r24, r28
    ad0e:	85 59       	subi	r24, 0x95	; 149
    ad10:	9f 4f       	sbci	r25, 0xFF	; 255
    ad12:	21 e0       	ldi	r18, 0x01	; 1
    ad14:	30 e0       	ldi	r19, 0x00	; 0
    ad16:	fc 01       	movw	r30, r24
    ad18:	31 83       	std	Z+1, r19	; 0x01
    ad1a:	20 83       	st	Z, r18
    ad1c:	74 c0       	rjmp	.+232    	; 0xae06 <travel_path+0xe28>
	else if (__tmp > 65535)
    ad1e:	ce 01       	movw	r24, r28
    ad20:	89 59       	subi	r24, 0x99	; 153
    ad22:	9f 4f       	sbci	r25, 0xFF	; 255
    ad24:	11 e0       	ldi	r17, 0x01	; 1
    ad26:	fc 01       	movw	r30, r24
    ad28:	60 81       	ld	r22, Z
    ad2a:	71 81       	ldd	r23, Z+1	; 0x01
    ad2c:	82 81       	ldd	r24, Z+2	; 0x02
    ad2e:	93 81       	ldd	r25, Z+3	; 0x03
    ad30:	20 e0       	ldi	r18, 0x00	; 0
    ad32:	3f ef       	ldi	r19, 0xFF	; 255
    ad34:	4f e7       	ldi	r20, 0x7F	; 127
    ad36:	57 e4       	ldi	r21, 0x47	; 71
    ad38:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    ad3c:	18 16       	cp	r1, r24
    ad3e:	0c f0       	brlt	.+2      	; 0xad42 <travel_path+0xd64>
    ad40:	10 e0       	ldi	r17, 0x00	; 0
    ad42:	11 23       	and	r17, r17
    ad44:	09 f4       	brne	.+2      	; 0xad48 <travel_path+0xd6a>
    ad46:	4d c0       	rjmp	.+154    	; 0xade2 <travel_path+0xe04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ad48:	ce 01       	movw	r24, r28
    ad4a:	8d 59       	subi	r24, 0x9D	; 157
    ad4c:	9f 4f       	sbci	r25, 0xFF	; 255
    ad4e:	fc 01       	movw	r30, r24
    ad50:	60 81       	ld	r22, Z
    ad52:	71 81       	ldd	r23, Z+1	; 0x01
    ad54:	82 81       	ldd	r24, Z+2	; 0x02
    ad56:	93 81       	ldd	r25, Z+3	; 0x03
    ad58:	20 e0       	ldi	r18, 0x00	; 0
    ad5a:	30 e0       	ldi	r19, 0x00	; 0
    ad5c:	40 e2       	ldi	r20, 0x20	; 32
    ad5e:	51 e4       	ldi	r21, 0x41	; 65
    ad60:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    ad64:	dc 01       	movw	r26, r24
    ad66:	cb 01       	movw	r24, r22
    ad68:	8e 01       	movw	r16, r28
    ad6a:	05 59       	subi	r16, 0x95	; 149
    ad6c:	1f 4f       	sbci	r17, 0xFF	; 255
    ad6e:	bc 01       	movw	r22, r24
    ad70:	cd 01       	movw	r24, r26
    ad72:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    ad76:	dc 01       	movw	r26, r24
    ad78:	cb 01       	movw	r24, r22
    ad7a:	f8 01       	movw	r30, r16
    ad7c:	91 83       	std	Z+1, r25	; 0x01
    ad7e:	80 83       	st	Z, r24
    ad80:	27 c0       	rjmp	.+78     	; 0xadd0 <travel_path+0xdf2>
    ad82:	ce 01       	movw	r24, r28
    ad84:	83 59       	subi	r24, 0x93	; 147
    ad86:	9f 4f       	sbci	r25, 0xFF	; 255
    ad88:	20 e7       	ldi	r18, 0x70	; 112
    ad8a:	31 e0       	ldi	r19, 0x01	; 1
    ad8c:	fc 01       	movw	r30, r24
    ad8e:	31 83       	std	Z+1, r19	; 0x01
    ad90:	20 83       	st	Z, r18
    ad92:	ce 01       	movw	r24, r28
    ad94:	83 59       	subi	r24, 0x93	; 147
    ad96:	9f 4f       	sbci	r25, 0xFF	; 255
    ad98:	fc 01       	movw	r30, r24
    ad9a:	80 81       	ld	r24, Z
    ad9c:	91 81       	ldd	r25, Z+1	; 0x01
    ad9e:	8c 01       	movw	r16, r24
    ada0:	c8 01       	movw	r24, r16
    ada2:	01 97       	sbiw	r24, 0x01	; 1
    ada4:	f1 f7       	brne	.-4      	; 0xada2 <travel_path+0xdc4>
    ada6:	8c 01       	movw	r16, r24
    ada8:	ce 01       	movw	r24, r28
    adaa:	83 59       	subi	r24, 0x93	; 147
    adac:	9f 4f       	sbci	r25, 0xFF	; 255
    adae:	fc 01       	movw	r30, r24
    adb0:	11 83       	std	Z+1, r17	; 0x01
    adb2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    adb4:	ce 01       	movw	r24, r28
    adb6:	85 59       	subi	r24, 0x95	; 149
    adb8:	9f 4f       	sbci	r25, 0xFF	; 255
    adba:	9e 01       	movw	r18, r28
    adbc:	25 59       	subi	r18, 0x95	; 149
    adbe:	3f 4f       	sbci	r19, 0xFF	; 255
    adc0:	f9 01       	movw	r30, r18
    adc2:	20 81       	ld	r18, Z
    adc4:	31 81       	ldd	r19, Z+1	; 0x01
    adc6:	21 50       	subi	r18, 0x01	; 1
    adc8:	30 40       	sbci	r19, 0x00	; 0
    adca:	fc 01       	movw	r30, r24
    adcc:	31 83       	std	Z+1, r19	; 0x01
    adce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    add0:	ce 01       	movw	r24, r28
    add2:	85 59       	subi	r24, 0x95	; 149
    add4:	9f 4f       	sbci	r25, 0xFF	; 255
    add6:	fc 01       	movw	r30, r24
    add8:	80 81       	ld	r24, Z
    adda:	91 81       	ldd	r25, Z+1	; 0x01
    addc:	00 97       	sbiw	r24, 0x00	; 0
    adde:	89 f6       	brne	.-94     	; 0xad82 <travel_path+0xda4>
    ade0:	2f c0       	rjmp	.+94     	; 0xae40 <travel_path+0xe62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ade2:	8e 01       	movw	r16, r28
    ade4:	05 59       	subi	r16, 0x95	; 149
    ade6:	1f 4f       	sbci	r17, 0xFF	; 255
    ade8:	ce 01       	movw	r24, r28
    adea:	89 59       	subi	r24, 0x99	; 153
    adec:	9f 4f       	sbci	r25, 0xFF	; 255
    adee:	fc 01       	movw	r30, r24
    adf0:	60 81       	ld	r22, Z
    adf2:	71 81       	ldd	r23, Z+1	; 0x01
    adf4:	82 81       	ldd	r24, Z+2	; 0x02
    adf6:	93 81       	ldd	r25, Z+3	; 0x03
    adf8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    adfc:	dc 01       	movw	r26, r24
    adfe:	cb 01       	movw	r24, r22
    ae00:	f8 01       	movw	r30, r16
    ae02:	91 83       	std	Z+1, r25	; 0x01
    ae04:	80 83       	st	Z, r24
    ae06:	ce 01       	movw	r24, r28
    ae08:	81 59       	subi	r24, 0x91	; 145
    ae0a:	9f 4f       	sbci	r25, 0xFF	; 255
    ae0c:	9e 01       	movw	r18, r28
    ae0e:	25 59       	subi	r18, 0x95	; 149
    ae10:	3f 4f       	sbci	r19, 0xFF	; 255
    ae12:	f9 01       	movw	r30, r18
    ae14:	20 81       	ld	r18, Z
    ae16:	31 81       	ldd	r19, Z+1	; 0x01
    ae18:	fc 01       	movw	r30, r24
    ae1a:	31 83       	std	Z+1, r19	; 0x01
    ae1c:	20 83       	st	Z, r18
    ae1e:	ce 01       	movw	r24, r28
    ae20:	81 59       	subi	r24, 0x91	; 145
    ae22:	9f 4f       	sbci	r25, 0xFF	; 255
    ae24:	fc 01       	movw	r30, r24
    ae26:	80 81       	ld	r24, Z
    ae28:	91 81       	ldd	r25, Z+1	; 0x01
    ae2a:	8c 01       	movw	r16, r24
    ae2c:	c8 01       	movw	r24, r16
    ae2e:	01 97       	sbiw	r24, 0x01	; 1
    ae30:	f1 f7       	brne	.-4      	; 0xae2e <travel_path+0xe50>
    ae32:	8c 01       	movw	r16, r24
    ae34:	ce 01       	movw	r24, r28
    ae36:	81 59       	subi	r24, 0x91	; 145
    ae38:	9f 4f       	sbci	r25, 0xFF	; 255
    ae3a:	fc 01       	movw	r30, r24
    ae3c:	11 83       	std	Z+1, r17	; 0x01
    ae3e:	00 83       	st	Z, r16
							_delay_ms(20);
							forward_mm(160);
    ae40:	80 ea       	ldi	r24, 0xA0	; 160
    ae42:	90 e0       	ldi	r25, 0x00	; 0
    ae44:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    ae48:	9e 01       	movw	r18, r28
    ae4a:	2f 58       	subi	r18, 0x8F	; 143
    ae4c:	3f 4f       	sbci	r19, 0xFF	; 255
    ae4e:	80 e0       	ldi	r24, 0x00	; 0
    ae50:	90 e0       	ldi	r25, 0x00	; 0
    ae52:	a0 ea       	ldi	r26, 0xA0	; 160
    ae54:	b1 e4       	ldi	r27, 0x41	; 65
    ae56:	f9 01       	movw	r30, r18
    ae58:	80 83       	st	Z, r24
    ae5a:	91 83       	std	Z+1, r25	; 0x01
    ae5c:	a2 83       	std	Z+2, r26	; 0x02
    ae5e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ae60:	8e 01       	movw	r16, r28
    ae62:	0b 58       	subi	r16, 0x8B	; 139
    ae64:	1f 4f       	sbci	r17, 0xFF	; 255
    ae66:	ce 01       	movw	r24, r28
    ae68:	8f 58       	subi	r24, 0x8F	; 143
    ae6a:	9f 4f       	sbci	r25, 0xFF	; 255
    ae6c:	fc 01       	movw	r30, r24
    ae6e:	60 81       	ld	r22, Z
    ae70:	71 81       	ldd	r23, Z+1	; 0x01
    ae72:	82 81       	ldd	r24, Z+2	; 0x02
    ae74:	93 81       	ldd	r25, Z+3	; 0x03
    ae76:	26 e6       	ldi	r18, 0x66	; 102
    ae78:	36 e6       	ldi	r19, 0x66	; 102
    ae7a:	46 e6       	ldi	r20, 0x66	; 102
    ae7c:	55 e4       	ldi	r21, 0x45	; 69
    ae7e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    ae82:	dc 01       	movw	r26, r24
    ae84:	cb 01       	movw	r24, r22
    ae86:	f8 01       	movw	r30, r16
    ae88:	80 83       	st	Z, r24
    ae8a:	91 83       	std	Z+1, r25	; 0x01
    ae8c:	a2 83       	std	Z+2, r26	; 0x02
    ae8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ae90:	ce 01       	movw	r24, r28
    ae92:	8b 58       	subi	r24, 0x8B	; 139
    ae94:	9f 4f       	sbci	r25, 0xFF	; 255
    ae96:	11 e0       	ldi	r17, 0x01	; 1
    ae98:	fc 01       	movw	r30, r24
    ae9a:	60 81       	ld	r22, Z
    ae9c:	71 81       	ldd	r23, Z+1	; 0x01
    ae9e:	82 81       	ldd	r24, Z+2	; 0x02
    aea0:	93 81       	ldd	r25, Z+3	; 0x03
    aea2:	20 e0       	ldi	r18, 0x00	; 0
    aea4:	30 e0       	ldi	r19, 0x00	; 0
    aea6:	40 e8       	ldi	r20, 0x80	; 128
    aea8:	5f e3       	ldi	r21, 0x3F	; 63
    aeaa:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    aeae:	88 23       	and	r24, r24
    aeb0:	0c f0       	brlt	.+2      	; 0xaeb4 <travel_path+0xed6>
    aeb2:	10 e0       	ldi	r17, 0x00	; 0
    aeb4:	11 23       	and	r17, r17
    aeb6:	49 f0       	breq	.+18     	; 0xaeca <travel_path+0xeec>
		__ticks = 1;
    aeb8:	ce 01       	movw	r24, r28
    aeba:	87 58       	subi	r24, 0x87	; 135
    aebc:	9f 4f       	sbci	r25, 0xFF	; 255
    aebe:	21 e0       	ldi	r18, 0x01	; 1
    aec0:	30 e0       	ldi	r19, 0x00	; 0
    aec2:	fc 01       	movw	r30, r24
    aec4:	31 83       	std	Z+1, r19	; 0x01
    aec6:	20 83       	st	Z, r18
    aec8:	74 c0       	rjmp	.+232    	; 0xafb2 <travel_path+0xfd4>
	else if (__tmp > 65535)
    aeca:	ce 01       	movw	r24, r28
    aecc:	8b 58       	subi	r24, 0x8B	; 139
    aece:	9f 4f       	sbci	r25, 0xFF	; 255
    aed0:	11 e0       	ldi	r17, 0x01	; 1
    aed2:	fc 01       	movw	r30, r24
    aed4:	60 81       	ld	r22, Z
    aed6:	71 81       	ldd	r23, Z+1	; 0x01
    aed8:	82 81       	ldd	r24, Z+2	; 0x02
    aeda:	93 81       	ldd	r25, Z+3	; 0x03
    aedc:	20 e0       	ldi	r18, 0x00	; 0
    aede:	3f ef       	ldi	r19, 0xFF	; 255
    aee0:	4f e7       	ldi	r20, 0x7F	; 127
    aee2:	57 e4       	ldi	r21, 0x47	; 71
    aee4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    aee8:	18 16       	cp	r1, r24
    aeea:	0c f0       	brlt	.+2      	; 0xaeee <travel_path+0xf10>
    aeec:	10 e0       	ldi	r17, 0x00	; 0
    aeee:	11 23       	and	r17, r17
    aef0:	09 f4       	brne	.+2      	; 0xaef4 <travel_path+0xf16>
    aef2:	4d c0       	rjmp	.+154    	; 0xaf8e <travel_path+0xfb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aef4:	ce 01       	movw	r24, r28
    aef6:	8f 58       	subi	r24, 0x8F	; 143
    aef8:	9f 4f       	sbci	r25, 0xFF	; 255
    aefa:	fc 01       	movw	r30, r24
    aefc:	60 81       	ld	r22, Z
    aefe:	71 81       	ldd	r23, Z+1	; 0x01
    af00:	82 81       	ldd	r24, Z+2	; 0x02
    af02:	93 81       	ldd	r25, Z+3	; 0x03
    af04:	20 e0       	ldi	r18, 0x00	; 0
    af06:	30 e0       	ldi	r19, 0x00	; 0
    af08:	40 e2       	ldi	r20, 0x20	; 32
    af0a:	51 e4       	ldi	r21, 0x41	; 65
    af0c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    af10:	dc 01       	movw	r26, r24
    af12:	cb 01       	movw	r24, r22
    af14:	8e 01       	movw	r16, r28
    af16:	07 58       	subi	r16, 0x87	; 135
    af18:	1f 4f       	sbci	r17, 0xFF	; 255
    af1a:	bc 01       	movw	r22, r24
    af1c:	cd 01       	movw	r24, r26
    af1e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    af22:	dc 01       	movw	r26, r24
    af24:	cb 01       	movw	r24, r22
    af26:	f8 01       	movw	r30, r16
    af28:	91 83       	std	Z+1, r25	; 0x01
    af2a:	80 83       	st	Z, r24
    af2c:	27 c0       	rjmp	.+78     	; 0xaf7c <travel_path+0xf9e>
    af2e:	ce 01       	movw	r24, r28
    af30:	85 58       	subi	r24, 0x85	; 133
    af32:	9f 4f       	sbci	r25, 0xFF	; 255
    af34:	20 e7       	ldi	r18, 0x70	; 112
    af36:	31 e0       	ldi	r19, 0x01	; 1
    af38:	fc 01       	movw	r30, r24
    af3a:	31 83       	std	Z+1, r19	; 0x01
    af3c:	20 83       	st	Z, r18
    af3e:	ce 01       	movw	r24, r28
    af40:	85 58       	subi	r24, 0x85	; 133
    af42:	9f 4f       	sbci	r25, 0xFF	; 255
    af44:	fc 01       	movw	r30, r24
    af46:	80 81       	ld	r24, Z
    af48:	91 81       	ldd	r25, Z+1	; 0x01
    af4a:	8c 01       	movw	r16, r24
    af4c:	c8 01       	movw	r24, r16
    af4e:	01 97       	sbiw	r24, 0x01	; 1
    af50:	f1 f7       	brne	.-4      	; 0xaf4e <travel_path+0xf70>
    af52:	8c 01       	movw	r16, r24
    af54:	ce 01       	movw	r24, r28
    af56:	85 58       	subi	r24, 0x85	; 133
    af58:	9f 4f       	sbci	r25, 0xFF	; 255
    af5a:	fc 01       	movw	r30, r24
    af5c:	11 83       	std	Z+1, r17	; 0x01
    af5e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af60:	ce 01       	movw	r24, r28
    af62:	87 58       	subi	r24, 0x87	; 135
    af64:	9f 4f       	sbci	r25, 0xFF	; 255
    af66:	9e 01       	movw	r18, r28
    af68:	27 58       	subi	r18, 0x87	; 135
    af6a:	3f 4f       	sbci	r19, 0xFF	; 255
    af6c:	f9 01       	movw	r30, r18
    af6e:	20 81       	ld	r18, Z
    af70:	31 81       	ldd	r19, Z+1	; 0x01
    af72:	21 50       	subi	r18, 0x01	; 1
    af74:	30 40       	sbci	r19, 0x00	; 0
    af76:	fc 01       	movw	r30, r24
    af78:	31 83       	std	Z+1, r19	; 0x01
    af7a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af7c:	ce 01       	movw	r24, r28
    af7e:	87 58       	subi	r24, 0x87	; 135
    af80:	9f 4f       	sbci	r25, 0xFF	; 255
    af82:	fc 01       	movw	r30, r24
    af84:	80 81       	ld	r24, Z
    af86:	91 81       	ldd	r25, Z+1	; 0x01
    af88:	00 97       	sbiw	r24, 0x00	; 0
    af8a:	89 f6       	brne	.-94     	; 0xaf2e <travel_path+0xf50>
    af8c:	2f c0       	rjmp	.+94     	; 0xafec <travel_path+0x100e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    af8e:	8e 01       	movw	r16, r28
    af90:	07 58       	subi	r16, 0x87	; 135
    af92:	1f 4f       	sbci	r17, 0xFF	; 255
    af94:	ce 01       	movw	r24, r28
    af96:	8b 58       	subi	r24, 0x8B	; 139
    af98:	9f 4f       	sbci	r25, 0xFF	; 255
    af9a:	fc 01       	movw	r30, r24
    af9c:	60 81       	ld	r22, Z
    af9e:	71 81       	ldd	r23, Z+1	; 0x01
    afa0:	82 81       	ldd	r24, Z+2	; 0x02
    afa2:	93 81       	ldd	r25, Z+3	; 0x03
    afa4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    afa8:	dc 01       	movw	r26, r24
    afaa:	cb 01       	movw	r24, r22
    afac:	f8 01       	movw	r30, r16
    afae:	91 83       	std	Z+1, r25	; 0x01
    afb0:	80 83       	st	Z, r24
    afb2:	ce 01       	movw	r24, r28
    afb4:	83 58       	subi	r24, 0x83	; 131
    afb6:	9f 4f       	sbci	r25, 0xFF	; 255
    afb8:	9e 01       	movw	r18, r28
    afba:	27 58       	subi	r18, 0x87	; 135
    afbc:	3f 4f       	sbci	r19, 0xFF	; 255
    afbe:	f9 01       	movw	r30, r18
    afc0:	20 81       	ld	r18, Z
    afc2:	31 81       	ldd	r19, Z+1	; 0x01
    afc4:	fc 01       	movw	r30, r24
    afc6:	31 83       	std	Z+1, r19	; 0x01
    afc8:	20 83       	st	Z, r18
    afca:	ce 01       	movw	r24, r28
    afcc:	83 58       	subi	r24, 0x83	; 131
    afce:	9f 4f       	sbci	r25, 0xFF	; 255
    afd0:	fc 01       	movw	r30, r24
    afd2:	80 81       	ld	r24, Z
    afd4:	91 81       	ldd	r25, Z+1	; 0x01
    afd6:	8c 01       	movw	r16, r24
    afd8:	c8 01       	movw	r24, r16
    afda:	01 97       	sbiw	r24, 0x01	; 1
    afdc:	f1 f7       	brne	.-4      	; 0xafda <travel_path+0xffc>
    afde:	8c 01       	movw	r16, r24
    afe0:	ce 01       	movw	r24, r28
    afe2:	83 58       	subi	r24, 0x83	; 131
    afe4:	9f 4f       	sbci	r25, 0xFF	; 255
    afe6:	fc 01       	movw	r30, r24
    afe8:	11 83       	std	Z+1, r17	; 0x01
    afea:	00 83       	st	Z, r16
							_delay_ms(20);
							spl_left2();
    afec:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <spl_left2>
    aff0:	9e 01       	movw	r18, r28
    aff2:	21 58       	subi	r18, 0x81	; 129
    aff4:	3f 4f       	sbci	r19, 0xFF	; 255
    aff6:	80 e0       	ldi	r24, 0x00	; 0
    aff8:	90 e0       	ldi	r25, 0x00	; 0
    affa:	a0 ea       	ldi	r26, 0xA0	; 160
    affc:	b1 e4       	ldi	r27, 0x41	; 65
    affe:	f9 01       	movw	r30, r18
    b000:	80 83       	st	Z, r24
    b002:	91 83       	std	Z+1, r25	; 0x01
    b004:	a2 83       	std	Z+2, r26	; 0x02
    b006:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b008:	8e 01       	movw	r16, r28
    b00a:	0d 57       	subi	r16, 0x7D	; 125
    b00c:	1f 4f       	sbci	r17, 0xFF	; 255
    b00e:	ce 01       	movw	r24, r28
    b010:	81 58       	subi	r24, 0x81	; 129
    b012:	9f 4f       	sbci	r25, 0xFF	; 255
    b014:	fc 01       	movw	r30, r24
    b016:	60 81       	ld	r22, Z
    b018:	71 81       	ldd	r23, Z+1	; 0x01
    b01a:	82 81       	ldd	r24, Z+2	; 0x02
    b01c:	93 81       	ldd	r25, Z+3	; 0x03
    b01e:	26 e6       	ldi	r18, 0x66	; 102
    b020:	36 e6       	ldi	r19, 0x66	; 102
    b022:	46 e6       	ldi	r20, 0x66	; 102
    b024:	55 e4       	ldi	r21, 0x45	; 69
    b026:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b02a:	dc 01       	movw	r26, r24
    b02c:	cb 01       	movw	r24, r22
    b02e:	f8 01       	movw	r30, r16
    b030:	80 83       	st	Z, r24
    b032:	91 83       	std	Z+1, r25	; 0x01
    b034:	a2 83       	std	Z+2, r26	; 0x02
    b036:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b038:	ce 01       	movw	r24, r28
    b03a:	8d 57       	subi	r24, 0x7D	; 125
    b03c:	9f 4f       	sbci	r25, 0xFF	; 255
    b03e:	11 e0       	ldi	r17, 0x01	; 1
    b040:	fc 01       	movw	r30, r24
    b042:	60 81       	ld	r22, Z
    b044:	71 81       	ldd	r23, Z+1	; 0x01
    b046:	82 81       	ldd	r24, Z+2	; 0x02
    b048:	93 81       	ldd	r25, Z+3	; 0x03
    b04a:	20 e0       	ldi	r18, 0x00	; 0
    b04c:	30 e0       	ldi	r19, 0x00	; 0
    b04e:	40 e8       	ldi	r20, 0x80	; 128
    b050:	5f e3       	ldi	r21, 0x3F	; 63
    b052:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    b056:	88 23       	and	r24, r24
    b058:	0c f0       	brlt	.+2      	; 0xb05c <travel_path+0x107e>
    b05a:	10 e0       	ldi	r17, 0x00	; 0
    b05c:	11 23       	and	r17, r17
    b05e:	49 f0       	breq	.+18     	; 0xb072 <travel_path+0x1094>
		__ticks = 1;
    b060:	ce 01       	movw	r24, r28
    b062:	89 57       	subi	r24, 0x79	; 121
    b064:	9f 4f       	sbci	r25, 0xFF	; 255
    b066:	21 e0       	ldi	r18, 0x01	; 1
    b068:	30 e0       	ldi	r19, 0x00	; 0
    b06a:	fc 01       	movw	r30, r24
    b06c:	31 83       	std	Z+1, r19	; 0x01
    b06e:	20 83       	st	Z, r18
    b070:	74 c0       	rjmp	.+232    	; 0xb15a <travel_path+0x117c>
	else if (__tmp > 65535)
    b072:	ce 01       	movw	r24, r28
    b074:	8d 57       	subi	r24, 0x7D	; 125
    b076:	9f 4f       	sbci	r25, 0xFF	; 255
    b078:	11 e0       	ldi	r17, 0x01	; 1
    b07a:	fc 01       	movw	r30, r24
    b07c:	60 81       	ld	r22, Z
    b07e:	71 81       	ldd	r23, Z+1	; 0x01
    b080:	82 81       	ldd	r24, Z+2	; 0x02
    b082:	93 81       	ldd	r25, Z+3	; 0x03
    b084:	20 e0       	ldi	r18, 0x00	; 0
    b086:	3f ef       	ldi	r19, 0xFF	; 255
    b088:	4f e7       	ldi	r20, 0x7F	; 127
    b08a:	57 e4       	ldi	r21, 0x47	; 71
    b08c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    b090:	18 16       	cp	r1, r24
    b092:	0c f0       	brlt	.+2      	; 0xb096 <travel_path+0x10b8>
    b094:	10 e0       	ldi	r17, 0x00	; 0
    b096:	11 23       	and	r17, r17
    b098:	09 f4       	brne	.+2      	; 0xb09c <travel_path+0x10be>
    b09a:	4d c0       	rjmp	.+154    	; 0xb136 <travel_path+0x1158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b09c:	ce 01       	movw	r24, r28
    b09e:	81 58       	subi	r24, 0x81	; 129
    b0a0:	9f 4f       	sbci	r25, 0xFF	; 255
    b0a2:	fc 01       	movw	r30, r24
    b0a4:	60 81       	ld	r22, Z
    b0a6:	71 81       	ldd	r23, Z+1	; 0x01
    b0a8:	82 81       	ldd	r24, Z+2	; 0x02
    b0aa:	93 81       	ldd	r25, Z+3	; 0x03
    b0ac:	20 e0       	ldi	r18, 0x00	; 0
    b0ae:	30 e0       	ldi	r19, 0x00	; 0
    b0b0:	40 e2       	ldi	r20, 0x20	; 32
    b0b2:	51 e4       	ldi	r21, 0x41	; 65
    b0b4:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b0b8:	dc 01       	movw	r26, r24
    b0ba:	cb 01       	movw	r24, r22
    b0bc:	8e 01       	movw	r16, r28
    b0be:	09 57       	subi	r16, 0x79	; 121
    b0c0:	1f 4f       	sbci	r17, 0xFF	; 255
    b0c2:	bc 01       	movw	r22, r24
    b0c4:	cd 01       	movw	r24, r26
    b0c6:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b0ca:	dc 01       	movw	r26, r24
    b0cc:	cb 01       	movw	r24, r22
    b0ce:	f8 01       	movw	r30, r16
    b0d0:	91 83       	std	Z+1, r25	; 0x01
    b0d2:	80 83       	st	Z, r24
    b0d4:	27 c0       	rjmp	.+78     	; 0xb124 <travel_path+0x1146>
    b0d6:	ce 01       	movw	r24, r28
    b0d8:	87 57       	subi	r24, 0x77	; 119
    b0da:	9f 4f       	sbci	r25, 0xFF	; 255
    b0dc:	20 e7       	ldi	r18, 0x70	; 112
    b0de:	31 e0       	ldi	r19, 0x01	; 1
    b0e0:	fc 01       	movw	r30, r24
    b0e2:	31 83       	std	Z+1, r19	; 0x01
    b0e4:	20 83       	st	Z, r18
    b0e6:	ce 01       	movw	r24, r28
    b0e8:	87 57       	subi	r24, 0x77	; 119
    b0ea:	9f 4f       	sbci	r25, 0xFF	; 255
    b0ec:	fc 01       	movw	r30, r24
    b0ee:	80 81       	ld	r24, Z
    b0f0:	91 81       	ldd	r25, Z+1	; 0x01
    b0f2:	8c 01       	movw	r16, r24
    b0f4:	c8 01       	movw	r24, r16
    b0f6:	01 97       	sbiw	r24, 0x01	; 1
    b0f8:	f1 f7       	brne	.-4      	; 0xb0f6 <travel_path+0x1118>
    b0fa:	8c 01       	movw	r16, r24
    b0fc:	ce 01       	movw	r24, r28
    b0fe:	87 57       	subi	r24, 0x77	; 119
    b100:	9f 4f       	sbci	r25, 0xFF	; 255
    b102:	fc 01       	movw	r30, r24
    b104:	11 83       	std	Z+1, r17	; 0x01
    b106:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b108:	ce 01       	movw	r24, r28
    b10a:	89 57       	subi	r24, 0x79	; 121
    b10c:	9f 4f       	sbci	r25, 0xFF	; 255
    b10e:	9e 01       	movw	r18, r28
    b110:	29 57       	subi	r18, 0x79	; 121
    b112:	3f 4f       	sbci	r19, 0xFF	; 255
    b114:	f9 01       	movw	r30, r18
    b116:	20 81       	ld	r18, Z
    b118:	31 81       	ldd	r19, Z+1	; 0x01
    b11a:	21 50       	subi	r18, 0x01	; 1
    b11c:	30 40       	sbci	r19, 0x00	; 0
    b11e:	fc 01       	movw	r30, r24
    b120:	31 83       	std	Z+1, r19	; 0x01
    b122:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b124:	ce 01       	movw	r24, r28
    b126:	89 57       	subi	r24, 0x79	; 121
    b128:	9f 4f       	sbci	r25, 0xFF	; 255
    b12a:	fc 01       	movw	r30, r24
    b12c:	80 81       	ld	r24, Z
    b12e:	91 81       	ldd	r25, Z+1	; 0x01
    b130:	00 97       	sbiw	r24, 0x00	; 0
    b132:	89 f6       	brne	.-94     	; 0xb0d6 <travel_path+0x10f8>
    b134:	32 c0       	rjmp	.+100    	; 0xb19a <travel_path+0x11bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b136:	8e 01       	movw	r16, r28
    b138:	09 57       	subi	r16, 0x79	; 121
    b13a:	1f 4f       	sbci	r17, 0xFF	; 255
    b13c:	ce 01       	movw	r24, r28
    b13e:	8d 57       	subi	r24, 0x7D	; 125
    b140:	9f 4f       	sbci	r25, 0xFF	; 255
    b142:	fc 01       	movw	r30, r24
    b144:	60 81       	ld	r22, Z
    b146:	71 81       	ldd	r23, Z+1	; 0x01
    b148:	82 81       	ldd	r24, Z+2	; 0x02
    b14a:	93 81       	ldd	r25, Z+3	; 0x03
    b14c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b150:	dc 01       	movw	r26, r24
    b152:	cb 01       	movw	r24, r22
    b154:	f8 01       	movw	r30, r16
    b156:	91 83       	std	Z+1, r25	; 0x01
    b158:	80 83       	st	Z, r24
    b15a:	ce 01       	movw	r24, r28
    b15c:	85 57       	subi	r24, 0x75	; 117
    b15e:	9f 4f       	sbci	r25, 0xFF	; 255
    b160:	9e 01       	movw	r18, r28
    b162:	29 57       	subi	r18, 0x79	; 121
    b164:	3f 4f       	sbci	r19, 0xFF	; 255
    b166:	f9 01       	movw	r30, r18
    b168:	20 81       	ld	r18, Z
    b16a:	31 81       	ldd	r19, Z+1	; 0x01
    b16c:	fc 01       	movw	r30, r24
    b16e:	31 83       	std	Z+1, r19	; 0x01
    b170:	20 83       	st	Z, r18
    b172:	ce 01       	movw	r24, r28
    b174:	85 57       	subi	r24, 0x75	; 117
    b176:	9f 4f       	sbci	r25, 0xFF	; 255
    b178:	fc 01       	movw	r30, r24
    b17a:	80 81       	ld	r24, Z
    b17c:	91 81       	ldd	r25, Z+1	; 0x01
    b17e:	8c 01       	movw	r16, r24
    b180:	c8 01       	movw	r24, r16
    b182:	01 97       	sbiw	r24, 0x01	; 1
    b184:	f1 f7       	brne	.-4      	; 0xb182 <travel_path+0x11a4>
    b186:	8c 01       	movw	r16, r24
    b188:	ce 01       	movw	r24, r28
    b18a:	85 57       	subi	r24, 0x75	; 117
    b18c:	9f 4f       	sbci	r25, 0xFF	; 255
    b18e:	fc 01       	movw	r30, r24
    b190:	11 83       	std	Z+1, r17	; 0x01
    b192:	00 83       	st	Z, r16
    b194:	02 c0       	rjmp	.+4      	; 0xb19a <travel_path+0x11bc>
							_delay_ms(20);
						}
				else
				correct_left();
    b196:	0e 94 21 11 	call	0x2242	; 0x2242 <correct_left>
				node++;
    b19a:	80 91 65 03 	lds	r24, 0x0365
    b19e:	90 91 66 03 	lds	r25, 0x0366
    b1a2:	01 96       	adiw	r24, 0x01	; 1
    b1a4:	90 93 66 03 	sts	0x0366, r25
    b1a8:	80 93 65 03 	sts	0x0365, r24
				pick_drop(master_path[node]);
    b1ac:	80 91 65 03 	lds	r24, 0x0365
    b1b0:	90 91 66 03 	lds	r25, 0x0366
    b1b4:	87 59       	subi	r24, 0x97	; 151
    b1b6:	9c 4f       	sbci	r25, 0xFC	; 252
    b1b8:	fc 01       	movw	r30, r24
    b1ba:	80 81       	ld	r24, Z
    b1bc:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <pick_drop>
				node++;
    b1c0:	80 91 65 03 	lds	r24, 0x0365
    b1c4:	90 91 66 03 	lds	r25, 0x0366
    b1c8:	01 96       	adiw	r24, 0x01	; 1
    b1ca:	90 93 66 03 	sts	0x0366, r25
    b1ce:	80 93 65 03 	sts	0x0365, r24
				travel_path(master_path[node]);
    b1d2:	80 91 65 03 	lds	r24, 0x0365
    b1d6:	90 91 66 03 	lds	r25, 0x0366
    b1da:	87 59       	subi	r24, 0x97	; 151
    b1dc:	9c 4f       	sbci	r25, 0xFC	; 252
    b1de:	fc 01       	movw	r30, r24
    b1e0:	80 81       	ld	r24, Z
    b1e2:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <travel_path>
    b1e6:	90 c4       	rjmp	.+2336   	; 0xbb08 <travel_path+0x1b2a>
			}
			else{
				node=node-2;
    b1e8:	80 91 65 03 	lds	r24, 0x0365
    b1ec:	90 91 66 03 	lds	r25, 0x0366
    b1f0:	02 97       	sbiw	r24, 0x02	; 2
    b1f2:	90 93 66 03 	sts	0x0366, r25
    b1f6:	80 93 65 03 	sts	0x0365, r24
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
    b1fa:	80 91 65 03 	lds	r24, 0x0365
    b1fe:	90 91 66 03 	lds	r25, 0x0366
    b202:	87 59       	subi	r24, 0x97	; 151
    b204:	9c 4f       	sbci	r25, 0xFC	; 252
    b206:	fc 01       	movw	r30, r24
    b208:	80 81       	ld	r24, Z
    b20a:	82 35       	cpi	r24, 0x52	; 82
    b20c:	a1 f0       	breq	.+40     	; 0xb236 <travel_path+0x1258>
    b20e:	80 91 65 03 	lds	r24, 0x0365
    b212:	90 91 66 03 	lds	r25, 0x0366
    b216:	87 59       	subi	r24, 0x97	; 151
    b218:	9c 4f       	sbci	r25, 0xFC	; 252
    b21a:	fc 01       	movw	r30, r24
    b21c:	80 81       	ld	r24, Z
    b21e:	8c 34       	cpi	r24, 0x4C	; 76
    b220:	51 f0       	breq	.+20     	; 0xb236 <travel_path+0x1258>
    b222:	80 91 65 03 	lds	r24, 0x0365
    b226:	90 91 66 03 	lds	r25, 0x0366
    b22a:	87 59       	subi	r24, 0x97	; 151
    b22c:	9c 4f       	sbci	r25, 0xFC	; 252
    b22e:	fc 01       	movw	r30, r24
    b230:	80 81       	ld	r24, Z
    b232:	85 35       	cpi	r24, 0x55	; 85
    b234:	19 f4       	brne	.+6      	; 0xb23c <travel_path+0x125e>
				correct_left2();
    b236:	0e 94 88 17 	call	0x2f10	; 0x2f10 <correct_left2>
    b23a:	02 c0       	rjmp	.+4      	; 0xb240 <travel_path+0x1262>
				else
				correct_left();
    b23c:	0e 94 21 11 	call	0x2242	; 0x2242 <correct_left>
				node=node+2;
    b240:	80 91 65 03 	lds	r24, 0x0365
    b244:	90 91 66 03 	lds	r25, 0x0366
    b248:	02 96       	adiw	r24, 0x02	; 2
    b24a:	90 93 66 03 	sts	0x0366, r25
    b24e:	80 93 65 03 	sts	0x0365, r24
    b252:	5a c4       	rjmp	.+2228   	; 0xbb08 <travel_path+0x1b2a>
			}
		}
		else if(pos_val=='N'){
    b254:	ce 01       	movw	r24, r28
    b256:	89 54       	subi	r24, 0x49	; 73
    b258:	9f 4f       	sbci	r25, 0xFF	; 255
    b25a:	fc 01       	movw	r30, r24
    b25c:	80 81       	ld	r24, Z
    b25e:	8e 34       	cpi	r24, 0x4E	; 78
    b260:	09 f0       	breq	.+2      	; 0xb264 <travel_path+0x1286>
    b262:	d4 c2       	rjmp	.+1448   	; 0xb80c <travel_path+0x182e>
		if(node==0){
    b264:	80 91 65 03 	lds	r24, 0x0365
    b268:	90 91 66 03 	lds	r25, 0x0366
    b26c:	00 97       	sbiw	r24, 0x00	; 0
    b26e:	09 f0       	breq	.+2      	; 0xb272 <travel_path+0x1294>
    b270:	65 c1       	rjmp	.+714    	; 0xb53c <travel_path+0x155e>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    b272:	80 91 65 03 	lds	r24, 0x0365
    b276:	90 91 66 03 	lds	r25, 0x0366
    b27a:	01 96       	adiw	r24, 0x01	; 1
    b27c:	87 59       	subi	r24, 0x97	; 151
    b27e:	9c 4f       	sbci	r25, 0xFC	; 252
    b280:	fc 01       	movw	r30, r24
    b282:	80 81       	ld	r24, Z
    b284:	84 34       	cpi	r24, 0x44	; 68
    b286:	09 f4       	brne	.+2      	; 0xb28a <travel_path+0x12ac>
    b288:	5b c0       	rjmp	.+182    	; 0xb340 <travel_path+0x1362>
    b28a:	80 91 65 03 	lds	r24, 0x0365
    b28e:	90 91 66 03 	lds	r25, 0x0366
    b292:	01 96       	adiw	r24, 0x01	; 1
    b294:	87 59       	subi	r24, 0x97	; 151
    b296:	9c 4f       	sbci	r25, 0xFC	; 252
    b298:	fc 01       	movw	r30, r24
    b29a:	80 81       	ld	r24, Z
    b29c:	81 33       	cpi	r24, 0x31	; 49
    b29e:	09 f4       	brne	.+2      	; 0xb2a2 <travel_path+0x12c4>
    b2a0:	4f c0       	rjmp	.+158    	; 0xb340 <travel_path+0x1362>
    b2a2:	80 91 65 03 	lds	r24, 0x0365
    b2a6:	90 91 66 03 	lds	r25, 0x0366
    b2aa:	01 96       	adiw	r24, 0x01	; 1
    b2ac:	87 59       	subi	r24, 0x97	; 151
    b2ae:	9c 4f       	sbci	r25, 0xFC	; 252
    b2b0:	fc 01       	movw	r30, r24
    b2b2:	80 81       	ld	r24, Z
    b2b4:	82 33       	cpi	r24, 0x32	; 50
    b2b6:	09 f4       	brne	.+2      	; 0xb2ba <travel_path+0x12dc>
    b2b8:	43 c0       	rjmp	.+134    	; 0xb340 <travel_path+0x1362>
    b2ba:	80 91 65 03 	lds	r24, 0x0365
    b2be:	90 91 66 03 	lds	r25, 0x0366
    b2c2:	01 96       	adiw	r24, 0x01	; 1
    b2c4:	87 59       	subi	r24, 0x97	; 151
    b2c6:	9c 4f       	sbci	r25, 0xFC	; 252
    b2c8:	fc 01       	movw	r30, r24
    b2ca:	80 81       	ld	r24, Z
    b2cc:	83 33       	cpi	r24, 0x33	; 51
    b2ce:	c1 f1       	breq	.+112    	; 0xb340 <travel_path+0x1362>
    b2d0:	80 91 65 03 	lds	r24, 0x0365
    b2d4:	90 91 66 03 	lds	r25, 0x0366
    b2d8:	01 96       	adiw	r24, 0x01	; 1
    b2da:	87 59       	subi	r24, 0x97	; 151
    b2dc:	9c 4f       	sbci	r25, 0xFC	; 252
    b2de:	fc 01       	movw	r30, r24
    b2e0:	80 81       	ld	r24, Z
    b2e2:	84 33       	cpi	r24, 0x34	; 52
    b2e4:	69 f1       	breq	.+90     	; 0xb340 <travel_path+0x1362>
    b2e6:	80 91 65 03 	lds	r24, 0x0365
    b2ea:	90 91 66 03 	lds	r25, 0x0366
    b2ee:	01 96       	adiw	r24, 0x01	; 1
    b2f0:	87 59       	subi	r24, 0x97	; 151
    b2f2:	9c 4f       	sbci	r25, 0xFC	; 252
    b2f4:	fc 01       	movw	r30, r24
    b2f6:	80 81       	ld	r24, Z
    b2f8:	85 33       	cpi	r24, 0x35	; 53
    b2fa:	11 f1       	breq	.+68     	; 0xb340 <travel_path+0x1362>
    b2fc:	80 91 65 03 	lds	r24, 0x0365
    b300:	90 91 66 03 	lds	r25, 0x0366
    b304:	01 96       	adiw	r24, 0x01	; 1
    b306:	87 59       	subi	r24, 0x97	; 151
    b308:	9c 4f       	sbci	r25, 0xFC	; 252
    b30a:	fc 01       	movw	r30, r24
    b30c:	80 81       	ld	r24, Z
    b30e:	86 33       	cpi	r24, 0x36	; 54
    b310:	b9 f0       	breq	.+46     	; 0xb340 <travel_path+0x1362>
    b312:	80 91 65 03 	lds	r24, 0x0365
    b316:	90 91 66 03 	lds	r25, 0x0366
    b31a:	01 96       	adiw	r24, 0x01	; 1
    b31c:	87 59       	subi	r24, 0x97	; 151
    b31e:	9c 4f       	sbci	r25, 0xFC	; 252
    b320:	fc 01       	movw	r30, r24
    b322:	80 81       	ld	r24, Z
    b324:	87 33       	cpi	r24, 0x37	; 55
    b326:	61 f0       	breq	.+24     	; 0xb340 <travel_path+0x1362>
    b328:	80 91 65 03 	lds	r24, 0x0365
    b32c:	90 91 66 03 	lds	r25, 0x0366
    b330:	01 96       	adiw	r24, 0x01	; 1
    b332:	87 59       	subi	r24, 0x97	; 151
    b334:	9c 4f       	sbci	r25, 0xFC	; 252
    b336:	fc 01       	movw	r30, r24
    b338:	80 81       	ld	r24, Z
    b33a:	88 33       	cpi	r24, 0x38	; 56
    b33c:	09 f0       	breq	.+2      	; 0xb340 <travel_path+0x1362>
    b33e:	fb c0       	rjmp	.+502    	; 0xb536 <travel_path+0x1558>
		{
						stop();
    b340:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    b344:	9e 01       	movw	r18, r28
    b346:	23 57       	subi	r18, 0x73	; 115
    b348:	3f 4f       	sbci	r19, 0xFF	; 255
    b34a:	80 e0       	ldi	r24, 0x00	; 0
    b34c:	90 e0       	ldi	r25, 0x00	; 0
    b34e:	a0 ea       	ldi	r26, 0xA0	; 160
    b350:	b1 e4       	ldi	r27, 0x41	; 65
    b352:	f9 01       	movw	r30, r18
    b354:	80 83       	st	Z, r24
    b356:	91 83       	std	Z+1, r25	; 0x01
    b358:	a2 83       	std	Z+2, r26	; 0x02
    b35a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b35c:	8e 01       	movw	r16, r28
    b35e:	0f 56       	subi	r16, 0x6F	; 111
    b360:	1f 4f       	sbci	r17, 0xFF	; 255
    b362:	ce 01       	movw	r24, r28
    b364:	83 57       	subi	r24, 0x73	; 115
    b366:	9f 4f       	sbci	r25, 0xFF	; 255
    b368:	fc 01       	movw	r30, r24
    b36a:	60 81       	ld	r22, Z
    b36c:	71 81       	ldd	r23, Z+1	; 0x01
    b36e:	82 81       	ldd	r24, Z+2	; 0x02
    b370:	93 81       	ldd	r25, Z+3	; 0x03
    b372:	26 e6       	ldi	r18, 0x66	; 102
    b374:	36 e6       	ldi	r19, 0x66	; 102
    b376:	46 e6       	ldi	r20, 0x66	; 102
    b378:	55 e4       	ldi	r21, 0x45	; 69
    b37a:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b37e:	dc 01       	movw	r26, r24
    b380:	cb 01       	movw	r24, r22
    b382:	f8 01       	movw	r30, r16
    b384:	80 83       	st	Z, r24
    b386:	91 83       	std	Z+1, r25	; 0x01
    b388:	a2 83       	std	Z+2, r26	; 0x02
    b38a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b38c:	ce 01       	movw	r24, r28
    b38e:	8f 56       	subi	r24, 0x6F	; 111
    b390:	9f 4f       	sbci	r25, 0xFF	; 255
    b392:	11 e0       	ldi	r17, 0x01	; 1
    b394:	fc 01       	movw	r30, r24
    b396:	60 81       	ld	r22, Z
    b398:	71 81       	ldd	r23, Z+1	; 0x01
    b39a:	82 81       	ldd	r24, Z+2	; 0x02
    b39c:	93 81       	ldd	r25, Z+3	; 0x03
    b39e:	20 e0       	ldi	r18, 0x00	; 0
    b3a0:	30 e0       	ldi	r19, 0x00	; 0
    b3a2:	40 e8       	ldi	r20, 0x80	; 128
    b3a4:	5f e3       	ldi	r21, 0x3F	; 63
    b3a6:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    b3aa:	88 23       	and	r24, r24
    b3ac:	0c f0       	brlt	.+2      	; 0xb3b0 <travel_path+0x13d2>
    b3ae:	10 e0       	ldi	r17, 0x00	; 0
    b3b0:	11 23       	and	r17, r17
    b3b2:	49 f0       	breq	.+18     	; 0xb3c6 <travel_path+0x13e8>
		__ticks = 1;
    b3b4:	ce 01       	movw	r24, r28
    b3b6:	8b 56       	subi	r24, 0x6B	; 107
    b3b8:	9f 4f       	sbci	r25, 0xFF	; 255
    b3ba:	21 e0       	ldi	r18, 0x01	; 1
    b3bc:	30 e0       	ldi	r19, 0x00	; 0
    b3be:	fc 01       	movw	r30, r24
    b3c0:	31 83       	std	Z+1, r19	; 0x01
    b3c2:	20 83       	st	Z, r18
    b3c4:	74 c0       	rjmp	.+232    	; 0xb4ae <travel_path+0x14d0>
	else if (__tmp > 65535)
    b3c6:	ce 01       	movw	r24, r28
    b3c8:	8f 56       	subi	r24, 0x6F	; 111
    b3ca:	9f 4f       	sbci	r25, 0xFF	; 255
    b3cc:	11 e0       	ldi	r17, 0x01	; 1
    b3ce:	fc 01       	movw	r30, r24
    b3d0:	60 81       	ld	r22, Z
    b3d2:	71 81       	ldd	r23, Z+1	; 0x01
    b3d4:	82 81       	ldd	r24, Z+2	; 0x02
    b3d6:	93 81       	ldd	r25, Z+3	; 0x03
    b3d8:	20 e0       	ldi	r18, 0x00	; 0
    b3da:	3f ef       	ldi	r19, 0xFF	; 255
    b3dc:	4f e7       	ldi	r20, 0x7F	; 127
    b3de:	57 e4       	ldi	r21, 0x47	; 71
    b3e0:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    b3e4:	18 16       	cp	r1, r24
    b3e6:	0c f0       	brlt	.+2      	; 0xb3ea <travel_path+0x140c>
    b3e8:	10 e0       	ldi	r17, 0x00	; 0
    b3ea:	11 23       	and	r17, r17
    b3ec:	09 f4       	brne	.+2      	; 0xb3f0 <travel_path+0x1412>
    b3ee:	4d c0       	rjmp	.+154    	; 0xb48a <travel_path+0x14ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b3f0:	ce 01       	movw	r24, r28
    b3f2:	83 57       	subi	r24, 0x73	; 115
    b3f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b3f6:	fc 01       	movw	r30, r24
    b3f8:	60 81       	ld	r22, Z
    b3fa:	71 81       	ldd	r23, Z+1	; 0x01
    b3fc:	82 81       	ldd	r24, Z+2	; 0x02
    b3fe:	93 81       	ldd	r25, Z+3	; 0x03
    b400:	20 e0       	ldi	r18, 0x00	; 0
    b402:	30 e0       	ldi	r19, 0x00	; 0
    b404:	40 e2       	ldi	r20, 0x20	; 32
    b406:	51 e4       	ldi	r21, 0x41	; 65
    b408:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b40c:	dc 01       	movw	r26, r24
    b40e:	cb 01       	movw	r24, r22
    b410:	8e 01       	movw	r16, r28
    b412:	0b 56       	subi	r16, 0x6B	; 107
    b414:	1f 4f       	sbci	r17, 0xFF	; 255
    b416:	bc 01       	movw	r22, r24
    b418:	cd 01       	movw	r24, r26
    b41a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b41e:	dc 01       	movw	r26, r24
    b420:	cb 01       	movw	r24, r22
    b422:	f8 01       	movw	r30, r16
    b424:	91 83       	std	Z+1, r25	; 0x01
    b426:	80 83       	st	Z, r24
    b428:	27 c0       	rjmp	.+78     	; 0xb478 <travel_path+0x149a>
    b42a:	ce 01       	movw	r24, r28
    b42c:	89 56       	subi	r24, 0x69	; 105
    b42e:	9f 4f       	sbci	r25, 0xFF	; 255
    b430:	20 e7       	ldi	r18, 0x70	; 112
    b432:	31 e0       	ldi	r19, 0x01	; 1
    b434:	fc 01       	movw	r30, r24
    b436:	31 83       	std	Z+1, r19	; 0x01
    b438:	20 83       	st	Z, r18
    b43a:	ce 01       	movw	r24, r28
    b43c:	89 56       	subi	r24, 0x69	; 105
    b43e:	9f 4f       	sbci	r25, 0xFF	; 255
    b440:	fc 01       	movw	r30, r24
    b442:	80 81       	ld	r24, Z
    b444:	91 81       	ldd	r25, Z+1	; 0x01
    b446:	8c 01       	movw	r16, r24
    b448:	c8 01       	movw	r24, r16
    b44a:	01 97       	sbiw	r24, 0x01	; 1
    b44c:	f1 f7       	brne	.-4      	; 0xb44a <travel_path+0x146c>
    b44e:	8c 01       	movw	r16, r24
    b450:	ce 01       	movw	r24, r28
    b452:	89 56       	subi	r24, 0x69	; 105
    b454:	9f 4f       	sbci	r25, 0xFF	; 255
    b456:	fc 01       	movw	r30, r24
    b458:	11 83       	std	Z+1, r17	; 0x01
    b45a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b45c:	ce 01       	movw	r24, r28
    b45e:	8b 56       	subi	r24, 0x6B	; 107
    b460:	9f 4f       	sbci	r25, 0xFF	; 255
    b462:	9e 01       	movw	r18, r28
    b464:	2b 56       	subi	r18, 0x6B	; 107
    b466:	3f 4f       	sbci	r19, 0xFF	; 255
    b468:	f9 01       	movw	r30, r18
    b46a:	20 81       	ld	r18, Z
    b46c:	31 81       	ldd	r19, Z+1	; 0x01
    b46e:	21 50       	subi	r18, 0x01	; 1
    b470:	30 40       	sbci	r19, 0x00	; 0
    b472:	fc 01       	movw	r30, r24
    b474:	31 83       	std	Z+1, r19	; 0x01
    b476:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b478:	ce 01       	movw	r24, r28
    b47a:	8b 56       	subi	r24, 0x6B	; 107
    b47c:	9f 4f       	sbci	r25, 0xFF	; 255
    b47e:	fc 01       	movw	r30, r24
    b480:	80 81       	ld	r24, Z
    b482:	91 81       	ldd	r25, Z+1	; 0x01
    b484:	00 97       	sbiw	r24, 0x00	; 0
    b486:	89 f6       	brne	.-94     	; 0xb42a <travel_path+0x144c>
    b488:	2f c0       	rjmp	.+94     	; 0xb4e8 <travel_path+0x150a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b48a:	8e 01       	movw	r16, r28
    b48c:	0b 56       	subi	r16, 0x6B	; 107
    b48e:	1f 4f       	sbci	r17, 0xFF	; 255
    b490:	ce 01       	movw	r24, r28
    b492:	8f 56       	subi	r24, 0x6F	; 111
    b494:	9f 4f       	sbci	r25, 0xFF	; 255
    b496:	fc 01       	movw	r30, r24
    b498:	60 81       	ld	r22, Z
    b49a:	71 81       	ldd	r23, Z+1	; 0x01
    b49c:	82 81       	ldd	r24, Z+2	; 0x02
    b49e:	93 81       	ldd	r25, Z+3	; 0x03
    b4a0:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b4a4:	dc 01       	movw	r26, r24
    b4a6:	cb 01       	movw	r24, r22
    b4a8:	f8 01       	movw	r30, r16
    b4aa:	91 83       	std	Z+1, r25	; 0x01
    b4ac:	80 83       	st	Z, r24
    b4ae:	ce 01       	movw	r24, r28
    b4b0:	87 56       	subi	r24, 0x67	; 103
    b4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    b4b4:	9e 01       	movw	r18, r28
    b4b6:	2b 56       	subi	r18, 0x6B	; 107
    b4b8:	3f 4f       	sbci	r19, 0xFF	; 255
    b4ba:	f9 01       	movw	r30, r18
    b4bc:	20 81       	ld	r18, Z
    b4be:	31 81       	ldd	r19, Z+1	; 0x01
    b4c0:	fc 01       	movw	r30, r24
    b4c2:	31 83       	std	Z+1, r19	; 0x01
    b4c4:	20 83       	st	Z, r18
    b4c6:	ce 01       	movw	r24, r28
    b4c8:	87 56       	subi	r24, 0x67	; 103
    b4ca:	9f 4f       	sbci	r25, 0xFF	; 255
    b4cc:	fc 01       	movw	r30, r24
    b4ce:	80 81       	ld	r24, Z
    b4d0:	91 81       	ldd	r25, Z+1	; 0x01
    b4d2:	8c 01       	movw	r16, r24
    b4d4:	c8 01       	movw	r24, r16
    b4d6:	01 97       	sbiw	r24, 0x01	; 1
    b4d8:	f1 f7       	brne	.-4      	; 0xb4d6 <travel_path+0x14f8>
    b4da:	8c 01       	movw	r16, r24
    b4dc:	ce 01       	movw	r24, r28
    b4de:	87 56       	subi	r24, 0x67	; 103
    b4e0:	9f 4f       	sbci	r25, 0xFF	; 255
    b4e2:	fc 01       	movw	r30, r24
    b4e4:	11 83       	std	Z+1, r17	; 0x01
    b4e6:	00 83       	st	Z, r16
						_delay_ms(20);
						node++;
    b4e8:	80 91 65 03 	lds	r24, 0x0365
    b4ec:	90 91 66 03 	lds	r25, 0x0366
    b4f0:	01 96       	adiw	r24, 0x01	; 1
    b4f2:	90 93 66 03 	sts	0x0366, r25
    b4f6:	80 93 65 03 	sts	0x0365, r24
						pick_drop(master_path[node]);
    b4fa:	80 91 65 03 	lds	r24, 0x0365
    b4fe:	90 91 66 03 	lds	r25, 0x0366
    b502:	87 59       	subi	r24, 0x97	; 151
    b504:	9c 4f       	sbci	r25, 0xFC	; 252
    b506:	fc 01       	movw	r30, r24
    b508:	80 81       	ld	r24, Z
    b50a:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <pick_drop>
						node++;
    b50e:	80 91 65 03 	lds	r24, 0x0365
    b512:	90 91 66 03 	lds	r25, 0x0366
    b516:	01 96       	adiw	r24, 0x01	; 1
    b518:	90 93 66 03 	sts	0x0366, r25
    b51c:	80 93 65 03 	sts	0x0365, r24
						travel_path(master_path[node]);
    b520:	80 91 65 03 	lds	r24, 0x0365
    b524:	90 91 66 03 	lds	r25, 0x0366
    b528:	87 59       	subi	r24, 0x97	; 151
    b52a:	9c 4f       	sbci	r25, 0xFC	; 252
    b52c:	fc 01       	movw	r30, r24
    b52e:	80 81       	ld	r24, Z
    b530:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <travel_path>
			_delay_ms(20);
			forward_mm(30);
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
    b534:	e9 c2       	rjmp	.+1490   	; 0xbb08 <travel_path+0x1b2a>
						pick_drop(master_path[node]);
						node++;
						travel_path(master_path[node]);
		}
		else
		forward();
    b536:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    b53a:	e6 c2       	rjmp	.+1484   	; 0xbb08 <travel_path+0x1b2a>
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
    b53c:	80 91 65 03 	lds	r24, 0x0365
    b540:	90 91 66 03 	lds	r25, 0x0366
    b544:	01 97       	sbiw	r24, 0x01	; 1
    b546:	87 59       	subi	r24, 0x97	; 151
    b548:	9c 4f       	sbci	r25, 0xFC	; 252
    b54a:	fc 01       	movw	r30, r24
    b54c:	80 81       	ld	r24, Z
    b54e:	84 34       	cpi	r24, 0x44	; 68
    b550:	09 f4       	brne	.+2      	; 0xb554 <travel_path+0x1576>
    b552:	5a c0       	rjmp	.+180    	; 0xb608 <travel_path+0x162a>
    b554:	80 91 65 03 	lds	r24, 0x0365
    b558:	90 91 66 03 	lds	r25, 0x0366
    b55c:	01 97       	sbiw	r24, 0x01	; 1
    b55e:	87 59       	subi	r24, 0x97	; 151
    b560:	9c 4f       	sbci	r25, 0xFC	; 252
    b562:	fc 01       	movw	r30, r24
    b564:	80 81       	ld	r24, Z
    b566:	81 33       	cpi	r24, 0x31	; 49
    b568:	09 f4       	brne	.+2      	; 0xb56c <travel_path+0x158e>
    b56a:	4e c0       	rjmp	.+156    	; 0xb608 <travel_path+0x162a>
    b56c:	80 91 65 03 	lds	r24, 0x0365
    b570:	90 91 66 03 	lds	r25, 0x0366
    b574:	01 97       	sbiw	r24, 0x01	; 1
    b576:	87 59       	subi	r24, 0x97	; 151
    b578:	9c 4f       	sbci	r25, 0xFC	; 252
    b57a:	fc 01       	movw	r30, r24
    b57c:	80 81       	ld	r24, Z
    b57e:	82 33       	cpi	r24, 0x32	; 50
    b580:	09 f4       	brne	.+2      	; 0xb584 <travel_path+0x15a6>
    b582:	42 c0       	rjmp	.+132    	; 0xb608 <travel_path+0x162a>
    b584:	80 91 65 03 	lds	r24, 0x0365
    b588:	90 91 66 03 	lds	r25, 0x0366
    b58c:	01 97       	sbiw	r24, 0x01	; 1
    b58e:	87 59       	subi	r24, 0x97	; 151
    b590:	9c 4f       	sbci	r25, 0xFC	; 252
    b592:	fc 01       	movw	r30, r24
    b594:	80 81       	ld	r24, Z
    b596:	83 33       	cpi	r24, 0x33	; 51
    b598:	b9 f1       	breq	.+110    	; 0xb608 <travel_path+0x162a>
    b59a:	80 91 65 03 	lds	r24, 0x0365
    b59e:	90 91 66 03 	lds	r25, 0x0366
    b5a2:	01 97       	sbiw	r24, 0x01	; 1
    b5a4:	87 59       	subi	r24, 0x97	; 151
    b5a6:	9c 4f       	sbci	r25, 0xFC	; 252
    b5a8:	fc 01       	movw	r30, r24
    b5aa:	80 81       	ld	r24, Z
    b5ac:	84 33       	cpi	r24, 0x34	; 52
    b5ae:	61 f1       	breq	.+88     	; 0xb608 <travel_path+0x162a>
    b5b0:	80 91 65 03 	lds	r24, 0x0365
    b5b4:	90 91 66 03 	lds	r25, 0x0366
    b5b8:	01 97       	sbiw	r24, 0x01	; 1
    b5ba:	87 59       	subi	r24, 0x97	; 151
    b5bc:	9c 4f       	sbci	r25, 0xFC	; 252
    b5be:	fc 01       	movw	r30, r24
    b5c0:	80 81       	ld	r24, Z
    b5c2:	85 33       	cpi	r24, 0x35	; 53
    b5c4:	09 f1       	breq	.+66     	; 0xb608 <travel_path+0x162a>
    b5c6:	80 91 65 03 	lds	r24, 0x0365
    b5ca:	90 91 66 03 	lds	r25, 0x0366
    b5ce:	01 97       	sbiw	r24, 0x01	; 1
    b5d0:	87 59       	subi	r24, 0x97	; 151
    b5d2:	9c 4f       	sbci	r25, 0xFC	; 252
    b5d4:	fc 01       	movw	r30, r24
    b5d6:	80 81       	ld	r24, Z
    b5d8:	86 33       	cpi	r24, 0x36	; 54
    b5da:	b1 f0       	breq	.+44     	; 0xb608 <travel_path+0x162a>
    b5dc:	80 91 65 03 	lds	r24, 0x0365
    b5e0:	90 91 66 03 	lds	r25, 0x0366
    b5e4:	01 97       	sbiw	r24, 0x01	; 1
    b5e6:	87 59       	subi	r24, 0x97	; 151
    b5e8:	9c 4f       	sbci	r25, 0xFC	; 252
    b5ea:	fc 01       	movw	r30, r24
    b5ec:	80 81       	ld	r24, Z
    b5ee:	87 33       	cpi	r24, 0x37	; 55
    b5f0:	59 f0       	breq	.+22     	; 0xb608 <travel_path+0x162a>
    b5f2:	80 91 65 03 	lds	r24, 0x0365
    b5f6:	90 91 66 03 	lds	r25, 0x0366
    b5fa:	01 97       	sbiw	r24, 0x01	; 1
    b5fc:	87 59       	subi	r24, 0x97	; 151
    b5fe:	9c 4f       	sbci	r25, 0xFC	; 252
    b600:	fc 01       	movw	r30, r24
    b602:	80 81       	ld	r24, Z
    b604:	88 33       	cpi	r24, 0x38	; 56
    b606:	19 f4       	brne	.+6      	; 0xb60e <travel_path+0x1630>
		{   forward();
    b608:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    b60c:	7d c2       	rjmp	.+1274   	; 0xbb08 <travel_path+0x1b2a>
		}
		else
		{
			stop();
    b60e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    b612:	9e 01       	movw	r18, r28
    b614:	25 56       	subi	r18, 0x65	; 101
    b616:	3f 4f       	sbci	r19, 0xFF	; 255
    b618:	80 e0       	ldi	r24, 0x00	; 0
    b61a:	90 e0       	ldi	r25, 0x00	; 0
    b61c:	a0 ea       	ldi	r26, 0xA0	; 160
    b61e:	b1 e4       	ldi	r27, 0x41	; 65
    b620:	f9 01       	movw	r30, r18
    b622:	80 83       	st	Z, r24
    b624:	91 83       	std	Z+1, r25	; 0x01
    b626:	a2 83       	std	Z+2, r26	; 0x02
    b628:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b62a:	8e 01       	movw	r16, r28
    b62c:	01 56       	subi	r16, 0x61	; 97
    b62e:	1f 4f       	sbci	r17, 0xFF	; 255
    b630:	ce 01       	movw	r24, r28
    b632:	85 56       	subi	r24, 0x65	; 101
    b634:	9f 4f       	sbci	r25, 0xFF	; 255
    b636:	fc 01       	movw	r30, r24
    b638:	60 81       	ld	r22, Z
    b63a:	71 81       	ldd	r23, Z+1	; 0x01
    b63c:	82 81       	ldd	r24, Z+2	; 0x02
    b63e:	93 81       	ldd	r25, Z+3	; 0x03
    b640:	26 e6       	ldi	r18, 0x66	; 102
    b642:	36 e6       	ldi	r19, 0x66	; 102
    b644:	46 e6       	ldi	r20, 0x66	; 102
    b646:	55 e4       	ldi	r21, 0x45	; 69
    b648:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b64c:	dc 01       	movw	r26, r24
    b64e:	cb 01       	movw	r24, r22
    b650:	f8 01       	movw	r30, r16
    b652:	80 83       	st	Z, r24
    b654:	91 83       	std	Z+1, r25	; 0x01
    b656:	a2 83       	std	Z+2, r26	; 0x02
    b658:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b65a:	ce 01       	movw	r24, r28
    b65c:	81 56       	subi	r24, 0x61	; 97
    b65e:	9f 4f       	sbci	r25, 0xFF	; 255
    b660:	11 e0       	ldi	r17, 0x01	; 1
    b662:	fc 01       	movw	r30, r24
    b664:	60 81       	ld	r22, Z
    b666:	71 81       	ldd	r23, Z+1	; 0x01
    b668:	82 81       	ldd	r24, Z+2	; 0x02
    b66a:	93 81       	ldd	r25, Z+3	; 0x03
    b66c:	20 e0       	ldi	r18, 0x00	; 0
    b66e:	30 e0       	ldi	r19, 0x00	; 0
    b670:	40 e8       	ldi	r20, 0x80	; 128
    b672:	5f e3       	ldi	r21, 0x3F	; 63
    b674:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    b678:	88 23       	and	r24, r24
    b67a:	0c f0       	brlt	.+2      	; 0xb67e <travel_path+0x16a0>
    b67c:	10 e0       	ldi	r17, 0x00	; 0
    b67e:	11 23       	and	r17, r17
    b680:	49 f0       	breq	.+18     	; 0xb694 <travel_path+0x16b6>
		__ticks = 1;
    b682:	ce 01       	movw	r24, r28
    b684:	8d 55       	subi	r24, 0x5D	; 93
    b686:	9f 4f       	sbci	r25, 0xFF	; 255
    b688:	21 e0       	ldi	r18, 0x01	; 1
    b68a:	30 e0       	ldi	r19, 0x00	; 0
    b68c:	fc 01       	movw	r30, r24
    b68e:	31 83       	std	Z+1, r19	; 0x01
    b690:	20 83       	st	Z, r18
    b692:	74 c0       	rjmp	.+232    	; 0xb77c <travel_path+0x179e>
	else if (__tmp > 65535)
    b694:	ce 01       	movw	r24, r28
    b696:	81 56       	subi	r24, 0x61	; 97
    b698:	9f 4f       	sbci	r25, 0xFF	; 255
    b69a:	11 e0       	ldi	r17, 0x01	; 1
    b69c:	fc 01       	movw	r30, r24
    b69e:	60 81       	ld	r22, Z
    b6a0:	71 81       	ldd	r23, Z+1	; 0x01
    b6a2:	82 81       	ldd	r24, Z+2	; 0x02
    b6a4:	93 81       	ldd	r25, Z+3	; 0x03
    b6a6:	20 e0       	ldi	r18, 0x00	; 0
    b6a8:	3f ef       	ldi	r19, 0xFF	; 255
    b6aa:	4f e7       	ldi	r20, 0x7F	; 127
    b6ac:	57 e4       	ldi	r21, 0x47	; 71
    b6ae:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    b6b2:	18 16       	cp	r1, r24
    b6b4:	0c f0       	brlt	.+2      	; 0xb6b8 <travel_path+0x16da>
    b6b6:	10 e0       	ldi	r17, 0x00	; 0
    b6b8:	11 23       	and	r17, r17
    b6ba:	09 f4       	brne	.+2      	; 0xb6be <travel_path+0x16e0>
    b6bc:	4d c0       	rjmp	.+154    	; 0xb758 <travel_path+0x177a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b6be:	ce 01       	movw	r24, r28
    b6c0:	85 56       	subi	r24, 0x65	; 101
    b6c2:	9f 4f       	sbci	r25, 0xFF	; 255
    b6c4:	fc 01       	movw	r30, r24
    b6c6:	60 81       	ld	r22, Z
    b6c8:	71 81       	ldd	r23, Z+1	; 0x01
    b6ca:	82 81       	ldd	r24, Z+2	; 0x02
    b6cc:	93 81       	ldd	r25, Z+3	; 0x03
    b6ce:	20 e0       	ldi	r18, 0x00	; 0
    b6d0:	30 e0       	ldi	r19, 0x00	; 0
    b6d2:	40 e2       	ldi	r20, 0x20	; 32
    b6d4:	51 e4       	ldi	r21, 0x41	; 65
    b6d6:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b6da:	dc 01       	movw	r26, r24
    b6dc:	cb 01       	movw	r24, r22
    b6de:	8e 01       	movw	r16, r28
    b6e0:	0d 55       	subi	r16, 0x5D	; 93
    b6e2:	1f 4f       	sbci	r17, 0xFF	; 255
    b6e4:	bc 01       	movw	r22, r24
    b6e6:	cd 01       	movw	r24, r26
    b6e8:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b6ec:	dc 01       	movw	r26, r24
    b6ee:	cb 01       	movw	r24, r22
    b6f0:	f8 01       	movw	r30, r16
    b6f2:	91 83       	std	Z+1, r25	; 0x01
    b6f4:	80 83       	st	Z, r24
    b6f6:	27 c0       	rjmp	.+78     	; 0xb746 <travel_path+0x1768>
    b6f8:	ce 01       	movw	r24, r28
    b6fa:	8b 55       	subi	r24, 0x5B	; 91
    b6fc:	9f 4f       	sbci	r25, 0xFF	; 255
    b6fe:	20 e7       	ldi	r18, 0x70	; 112
    b700:	31 e0       	ldi	r19, 0x01	; 1
    b702:	fc 01       	movw	r30, r24
    b704:	31 83       	std	Z+1, r19	; 0x01
    b706:	20 83       	st	Z, r18
    b708:	ce 01       	movw	r24, r28
    b70a:	8b 55       	subi	r24, 0x5B	; 91
    b70c:	9f 4f       	sbci	r25, 0xFF	; 255
    b70e:	fc 01       	movw	r30, r24
    b710:	80 81       	ld	r24, Z
    b712:	91 81       	ldd	r25, Z+1	; 0x01
    b714:	8c 01       	movw	r16, r24
    b716:	c8 01       	movw	r24, r16
    b718:	01 97       	sbiw	r24, 0x01	; 1
    b71a:	f1 f7       	brne	.-4      	; 0xb718 <travel_path+0x173a>
    b71c:	8c 01       	movw	r16, r24
    b71e:	ce 01       	movw	r24, r28
    b720:	8b 55       	subi	r24, 0x5B	; 91
    b722:	9f 4f       	sbci	r25, 0xFF	; 255
    b724:	fc 01       	movw	r30, r24
    b726:	11 83       	std	Z+1, r17	; 0x01
    b728:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b72a:	ce 01       	movw	r24, r28
    b72c:	8d 55       	subi	r24, 0x5D	; 93
    b72e:	9f 4f       	sbci	r25, 0xFF	; 255
    b730:	9e 01       	movw	r18, r28
    b732:	2d 55       	subi	r18, 0x5D	; 93
    b734:	3f 4f       	sbci	r19, 0xFF	; 255
    b736:	f9 01       	movw	r30, r18
    b738:	20 81       	ld	r18, Z
    b73a:	31 81       	ldd	r19, Z+1	; 0x01
    b73c:	21 50       	subi	r18, 0x01	; 1
    b73e:	30 40       	sbci	r19, 0x00	; 0
    b740:	fc 01       	movw	r30, r24
    b742:	31 83       	std	Z+1, r19	; 0x01
    b744:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b746:	ce 01       	movw	r24, r28
    b748:	8d 55       	subi	r24, 0x5D	; 93
    b74a:	9f 4f       	sbci	r25, 0xFF	; 255
    b74c:	fc 01       	movw	r30, r24
    b74e:	80 81       	ld	r24, Z
    b750:	91 81       	ldd	r25, Z+1	; 0x01
    b752:	00 97       	sbiw	r24, 0x00	; 0
    b754:	89 f6       	brne	.-94     	; 0xb6f8 <travel_path+0x171a>
    b756:	2f c0       	rjmp	.+94     	; 0xb7b6 <travel_path+0x17d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b758:	8e 01       	movw	r16, r28
    b75a:	0d 55       	subi	r16, 0x5D	; 93
    b75c:	1f 4f       	sbci	r17, 0xFF	; 255
    b75e:	ce 01       	movw	r24, r28
    b760:	81 56       	subi	r24, 0x61	; 97
    b762:	9f 4f       	sbci	r25, 0xFF	; 255
    b764:	fc 01       	movw	r30, r24
    b766:	60 81       	ld	r22, Z
    b768:	71 81       	ldd	r23, Z+1	; 0x01
    b76a:	82 81       	ldd	r24, Z+2	; 0x02
    b76c:	93 81       	ldd	r25, Z+3	; 0x03
    b76e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b772:	dc 01       	movw	r26, r24
    b774:	cb 01       	movw	r24, r22
    b776:	f8 01       	movw	r30, r16
    b778:	91 83       	std	Z+1, r25	; 0x01
    b77a:	80 83       	st	Z, r24
    b77c:	ce 01       	movw	r24, r28
    b77e:	89 55       	subi	r24, 0x59	; 89
    b780:	9f 4f       	sbci	r25, 0xFF	; 255
    b782:	9e 01       	movw	r18, r28
    b784:	2d 55       	subi	r18, 0x5D	; 93
    b786:	3f 4f       	sbci	r19, 0xFF	; 255
    b788:	f9 01       	movw	r30, r18
    b78a:	20 81       	ld	r18, Z
    b78c:	31 81       	ldd	r19, Z+1	; 0x01
    b78e:	fc 01       	movw	r30, r24
    b790:	31 83       	std	Z+1, r19	; 0x01
    b792:	20 83       	st	Z, r18
    b794:	ce 01       	movw	r24, r28
    b796:	89 55       	subi	r24, 0x59	; 89
    b798:	9f 4f       	sbci	r25, 0xFF	; 255
    b79a:	fc 01       	movw	r30, r24
    b79c:	80 81       	ld	r24, Z
    b79e:	91 81       	ldd	r25, Z+1	; 0x01
    b7a0:	8c 01       	movw	r16, r24
    b7a2:	c8 01       	movw	r24, r16
    b7a4:	01 97       	sbiw	r24, 0x01	; 1
    b7a6:	f1 f7       	brne	.-4      	; 0xb7a4 <travel_path+0x17c6>
    b7a8:	8c 01       	movw	r16, r24
    b7aa:	ce 01       	movw	r24, r28
    b7ac:	89 55       	subi	r24, 0x59	; 89
    b7ae:	9f 4f       	sbci	r25, 0xFF	; 255
    b7b0:	fc 01       	movw	r30, r24
    b7b2:	11 83       	std	Z+1, r17	; 0x01
    b7b4:	00 83       	st	Z, r16
			_delay_ms(20);
			forward_mm(30);
    b7b6:	8e e1       	ldi	r24, 0x1E	; 30
    b7b8:	90 e0       	ldi	r25, 0x00	; 0
    b7ba:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
			node++;
    b7be:	80 91 65 03 	lds	r24, 0x0365
    b7c2:	90 91 66 03 	lds	r25, 0x0366
    b7c6:	01 96       	adiw	r24, 0x01	; 1
    b7c8:	90 93 66 03 	sts	0x0366, r25
    b7cc:	80 93 65 03 	sts	0x0365, r24
			pick_drop(master_path[node]);
    b7d0:	80 91 65 03 	lds	r24, 0x0365
    b7d4:	90 91 66 03 	lds	r25, 0x0366
    b7d8:	87 59       	subi	r24, 0x97	; 151
    b7da:	9c 4f       	sbci	r25, 0xFC	; 252
    b7dc:	fc 01       	movw	r30, r24
    b7de:	80 81       	ld	r24, Z
    b7e0:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <pick_drop>
			node++;
    b7e4:	80 91 65 03 	lds	r24, 0x0365
    b7e8:	90 91 66 03 	lds	r25, 0x0366
    b7ec:	01 96       	adiw	r24, 0x01	; 1
    b7ee:	90 93 66 03 	sts	0x0366, r25
    b7f2:	80 93 65 03 	sts	0x0365, r24
			travel_path(master_path[node]);
    b7f6:	80 91 65 03 	lds	r24, 0x0365
    b7fa:	90 91 66 03 	lds	r25, 0x0366
    b7fe:	87 59       	subi	r24, 0x97	; 151
    b800:	9c 4f       	sbci	r25, 0xFC	; 252
    b802:	fc 01       	movw	r30, r24
    b804:	80 81       	ld	r24, Z
    b806:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <travel_path>
    b80a:	7e c1       	rjmp	.+764    	; 0xbb08 <travel_path+0x1b2a>
		}
		}
	else if(pos_val=='U'){
    b80c:	ce 01       	movw	r24, r28
    b80e:	89 54       	subi	r24, 0x49	; 73
    b810:	9f 4f       	sbci	r25, 0xFF	; 255
    b812:	fc 01       	movw	r30, r24
    b814:	80 81       	ld	r24, Z
    b816:	85 35       	cpi	r24, 0x55	; 85
    b818:	09 f0       	breq	.+2      	; 0xb81c <travel_path+0x183e>
    b81a:	67 c1       	rjmp	.+718    	; 0xbaea <travel_path+0x1b0c>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    b81c:	80 91 65 03 	lds	r24, 0x0365
    b820:	90 91 66 03 	lds	r25, 0x0366
    b824:	01 96       	adiw	r24, 0x01	; 1
    b826:	87 59       	subi	r24, 0x97	; 151
    b828:	9c 4f       	sbci	r25, 0xFC	; 252
    b82a:	fc 01       	movw	r30, r24
    b82c:	80 81       	ld	r24, Z
    b82e:	84 34       	cpi	r24, 0x44	; 68
    b830:	09 f4       	brne	.+2      	; 0xb834 <travel_path+0x1856>
    b832:	5b c0       	rjmp	.+182    	; 0xb8ea <travel_path+0x190c>
    b834:	80 91 65 03 	lds	r24, 0x0365
    b838:	90 91 66 03 	lds	r25, 0x0366
    b83c:	01 96       	adiw	r24, 0x01	; 1
    b83e:	87 59       	subi	r24, 0x97	; 151
    b840:	9c 4f       	sbci	r25, 0xFC	; 252
    b842:	fc 01       	movw	r30, r24
    b844:	80 81       	ld	r24, Z
    b846:	81 33       	cpi	r24, 0x31	; 49
    b848:	09 f4       	brne	.+2      	; 0xb84c <travel_path+0x186e>
    b84a:	4f c0       	rjmp	.+158    	; 0xb8ea <travel_path+0x190c>
    b84c:	80 91 65 03 	lds	r24, 0x0365
    b850:	90 91 66 03 	lds	r25, 0x0366
    b854:	01 96       	adiw	r24, 0x01	; 1
    b856:	87 59       	subi	r24, 0x97	; 151
    b858:	9c 4f       	sbci	r25, 0xFC	; 252
    b85a:	fc 01       	movw	r30, r24
    b85c:	80 81       	ld	r24, Z
    b85e:	82 33       	cpi	r24, 0x32	; 50
    b860:	09 f4       	brne	.+2      	; 0xb864 <travel_path+0x1886>
    b862:	43 c0       	rjmp	.+134    	; 0xb8ea <travel_path+0x190c>
    b864:	80 91 65 03 	lds	r24, 0x0365
    b868:	90 91 66 03 	lds	r25, 0x0366
    b86c:	01 96       	adiw	r24, 0x01	; 1
    b86e:	87 59       	subi	r24, 0x97	; 151
    b870:	9c 4f       	sbci	r25, 0xFC	; 252
    b872:	fc 01       	movw	r30, r24
    b874:	80 81       	ld	r24, Z
    b876:	83 33       	cpi	r24, 0x33	; 51
    b878:	c1 f1       	breq	.+112    	; 0xb8ea <travel_path+0x190c>
    b87a:	80 91 65 03 	lds	r24, 0x0365
    b87e:	90 91 66 03 	lds	r25, 0x0366
    b882:	01 96       	adiw	r24, 0x01	; 1
    b884:	87 59       	subi	r24, 0x97	; 151
    b886:	9c 4f       	sbci	r25, 0xFC	; 252
    b888:	fc 01       	movw	r30, r24
    b88a:	80 81       	ld	r24, Z
    b88c:	84 33       	cpi	r24, 0x34	; 52
    b88e:	69 f1       	breq	.+90     	; 0xb8ea <travel_path+0x190c>
    b890:	80 91 65 03 	lds	r24, 0x0365
    b894:	90 91 66 03 	lds	r25, 0x0366
    b898:	01 96       	adiw	r24, 0x01	; 1
    b89a:	87 59       	subi	r24, 0x97	; 151
    b89c:	9c 4f       	sbci	r25, 0xFC	; 252
    b89e:	fc 01       	movw	r30, r24
    b8a0:	80 81       	ld	r24, Z
    b8a2:	85 33       	cpi	r24, 0x35	; 53
    b8a4:	11 f1       	breq	.+68     	; 0xb8ea <travel_path+0x190c>
    b8a6:	80 91 65 03 	lds	r24, 0x0365
    b8aa:	90 91 66 03 	lds	r25, 0x0366
    b8ae:	01 96       	adiw	r24, 0x01	; 1
    b8b0:	87 59       	subi	r24, 0x97	; 151
    b8b2:	9c 4f       	sbci	r25, 0xFC	; 252
    b8b4:	fc 01       	movw	r30, r24
    b8b6:	80 81       	ld	r24, Z
    b8b8:	86 33       	cpi	r24, 0x36	; 54
    b8ba:	b9 f0       	breq	.+46     	; 0xb8ea <travel_path+0x190c>
    b8bc:	80 91 65 03 	lds	r24, 0x0365
    b8c0:	90 91 66 03 	lds	r25, 0x0366
    b8c4:	01 96       	adiw	r24, 0x01	; 1
    b8c6:	87 59       	subi	r24, 0x97	; 151
    b8c8:	9c 4f       	sbci	r25, 0xFC	; 252
    b8ca:	fc 01       	movw	r30, r24
    b8cc:	80 81       	ld	r24, Z
    b8ce:	87 33       	cpi	r24, 0x37	; 55
    b8d0:	61 f0       	breq	.+24     	; 0xb8ea <travel_path+0x190c>
    b8d2:	80 91 65 03 	lds	r24, 0x0365
    b8d6:	90 91 66 03 	lds	r25, 0x0366
    b8da:	01 96       	adiw	r24, 0x01	; 1
    b8dc:	87 59       	subi	r24, 0x97	; 151
    b8de:	9c 4f       	sbci	r25, 0xFC	; 252
    b8e0:	fc 01       	movw	r30, r24
    b8e2:	80 81       	ld	r24, Z
    b8e4:	88 33       	cpi	r24, 0x38	; 56
    b8e6:	09 f0       	breq	.+2      	; 0xb8ea <travel_path+0x190c>
    b8e8:	fd c0       	rjmp	.+506    	; 0xbae4 <travel_path+0x1b06>
		{
			stop();
    b8ea:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    b8ee:	9e 01       	movw	r18, r28
    b8f0:	27 55       	subi	r18, 0x57	; 87
    b8f2:	3f 4f       	sbci	r19, 0xFF	; 255
    b8f4:	80 e0       	ldi	r24, 0x00	; 0
    b8f6:	90 e0       	ldi	r25, 0x00	; 0
    b8f8:	a0 ea       	ldi	r26, 0xA0	; 160
    b8fa:	b1 e4       	ldi	r27, 0x41	; 65
    b8fc:	f9 01       	movw	r30, r18
    b8fe:	80 83       	st	Z, r24
    b900:	91 83       	std	Z+1, r25	; 0x01
    b902:	a2 83       	std	Z+2, r26	; 0x02
    b904:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b906:	8e 01       	movw	r16, r28
    b908:	03 55       	subi	r16, 0x53	; 83
    b90a:	1f 4f       	sbci	r17, 0xFF	; 255
    b90c:	ce 01       	movw	r24, r28
    b90e:	87 55       	subi	r24, 0x57	; 87
    b910:	9f 4f       	sbci	r25, 0xFF	; 255
    b912:	fc 01       	movw	r30, r24
    b914:	60 81       	ld	r22, Z
    b916:	71 81       	ldd	r23, Z+1	; 0x01
    b918:	82 81       	ldd	r24, Z+2	; 0x02
    b91a:	93 81       	ldd	r25, Z+3	; 0x03
    b91c:	26 e6       	ldi	r18, 0x66	; 102
    b91e:	36 e6       	ldi	r19, 0x66	; 102
    b920:	46 e6       	ldi	r20, 0x66	; 102
    b922:	55 e4       	ldi	r21, 0x45	; 69
    b924:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b928:	dc 01       	movw	r26, r24
    b92a:	cb 01       	movw	r24, r22
    b92c:	f8 01       	movw	r30, r16
    b92e:	80 83       	st	Z, r24
    b930:	91 83       	std	Z+1, r25	; 0x01
    b932:	a2 83       	std	Z+2, r26	; 0x02
    b934:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b936:	ce 01       	movw	r24, r28
    b938:	83 55       	subi	r24, 0x53	; 83
    b93a:	9f 4f       	sbci	r25, 0xFF	; 255
    b93c:	11 e0       	ldi	r17, 0x01	; 1
    b93e:	fc 01       	movw	r30, r24
    b940:	60 81       	ld	r22, Z
    b942:	71 81       	ldd	r23, Z+1	; 0x01
    b944:	82 81       	ldd	r24, Z+2	; 0x02
    b946:	93 81       	ldd	r25, Z+3	; 0x03
    b948:	20 e0       	ldi	r18, 0x00	; 0
    b94a:	30 e0       	ldi	r19, 0x00	; 0
    b94c:	40 e8       	ldi	r20, 0x80	; 128
    b94e:	5f e3       	ldi	r21, 0x3F	; 63
    b950:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    b954:	88 23       	and	r24, r24
    b956:	0c f0       	brlt	.+2      	; 0xb95a <travel_path+0x197c>
    b958:	10 e0       	ldi	r17, 0x00	; 0
    b95a:	11 23       	and	r17, r17
    b95c:	49 f0       	breq	.+18     	; 0xb970 <travel_path+0x1992>
		__ticks = 1;
    b95e:	ce 01       	movw	r24, r28
    b960:	8f 54       	subi	r24, 0x4F	; 79
    b962:	9f 4f       	sbci	r25, 0xFF	; 255
    b964:	21 e0       	ldi	r18, 0x01	; 1
    b966:	30 e0       	ldi	r19, 0x00	; 0
    b968:	fc 01       	movw	r30, r24
    b96a:	31 83       	std	Z+1, r19	; 0x01
    b96c:	20 83       	st	Z, r18
    b96e:	74 c0       	rjmp	.+232    	; 0xba58 <travel_path+0x1a7a>
	else if (__tmp > 65535)
    b970:	ce 01       	movw	r24, r28
    b972:	83 55       	subi	r24, 0x53	; 83
    b974:	9f 4f       	sbci	r25, 0xFF	; 255
    b976:	11 e0       	ldi	r17, 0x01	; 1
    b978:	fc 01       	movw	r30, r24
    b97a:	60 81       	ld	r22, Z
    b97c:	71 81       	ldd	r23, Z+1	; 0x01
    b97e:	82 81       	ldd	r24, Z+2	; 0x02
    b980:	93 81       	ldd	r25, Z+3	; 0x03
    b982:	20 e0       	ldi	r18, 0x00	; 0
    b984:	3f ef       	ldi	r19, 0xFF	; 255
    b986:	4f e7       	ldi	r20, 0x7F	; 127
    b988:	57 e4       	ldi	r21, 0x47	; 71
    b98a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    b98e:	18 16       	cp	r1, r24
    b990:	0c f0       	brlt	.+2      	; 0xb994 <travel_path+0x19b6>
    b992:	10 e0       	ldi	r17, 0x00	; 0
    b994:	11 23       	and	r17, r17
    b996:	09 f4       	brne	.+2      	; 0xb99a <travel_path+0x19bc>
    b998:	4d c0       	rjmp	.+154    	; 0xba34 <travel_path+0x1a56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b99a:	ce 01       	movw	r24, r28
    b99c:	87 55       	subi	r24, 0x57	; 87
    b99e:	9f 4f       	sbci	r25, 0xFF	; 255
    b9a0:	fc 01       	movw	r30, r24
    b9a2:	60 81       	ld	r22, Z
    b9a4:	71 81       	ldd	r23, Z+1	; 0x01
    b9a6:	82 81       	ldd	r24, Z+2	; 0x02
    b9a8:	93 81       	ldd	r25, Z+3	; 0x03
    b9aa:	20 e0       	ldi	r18, 0x00	; 0
    b9ac:	30 e0       	ldi	r19, 0x00	; 0
    b9ae:	40 e2       	ldi	r20, 0x20	; 32
    b9b0:	51 e4       	ldi	r21, 0x41	; 65
    b9b2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    b9b6:	dc 01       	movw	r26, r24
    b9b8:	cb 01       	movw	r24, r22
    b9ba:	8e 01       	movw	r16, r28
    b9bc:	0f 54       	subi	r16, 0x4F	; 79
    b9be:	1f 4f       	sbci	r17, 0xFF	; 255
    b9c0:	bc 01       	movw	r22, r24
    b9c2:	cd 01       	movw	r24, r26
    b9c4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    b9c8:	dc 01       	movw	r26, r24
    b9ca:	cb 01       	movw	r24, r22
    b9cc:	f8 01       	movw	r30, r16
    b9ce:	91 83       	std	Z+1, r25	; 0x01
    b9d0:	80 83       	st	Z, r24
    b9d2:	27 c0       	rjmp	.+78     	; 0xba22 <travel_path+0x1a44>
    b9d4:	ce 01       	movw	r24, r28
    b9d6:	8d 54       	subi	r24, 0x4D	; 77
    b9d8:	9f 4f       	sbci	r25, 0xFF	; 255
    b9da:	20 e7       	ldi	r18, 0x70	; 112
    b9dc:	31 e0       	ldi	r19, 0x01	; 1
    b9de:	fc 01       	movw	r30, r24
    b9e0:	31 83       	std	Z+1, r19	; 0x01
    b9e2:	20 83       	st	Z, r18
    b9e4:	ce 01       	movw	r24, r28
    b9e6:	8d 54       	subi	r24, 0x4D	; 77
    b9e8:	9f 4f       	sbci	r25, 0xFF	; 255
    b9ea:	fc 01       	movw	r30, r24
    b9ec:	80 81       	ld	r24, Z
    b9ee:	91 81       	ldd	r25, Z+1	; 0x01
    b9f0:	8c 01       	movw	r16, r24
    b9f2:	c8 01       	movw	r24, r16
    b9f4:	01 97       	sbiw	r24, 0x01	; 1
    b9f6:	f1 f7       	brne	.-4      	; 0xb9f4 <travel_path+0x1a16>
    b9f8:	8c 01       	movw	r16, r24
    b9fa:	ce 01       	movw	r24, r28
    b9fc:	8d 54       	subi	r24, 0x4D	; 77
    b9fe:	9f 4f       	sbci	r25, 0xFF	; 255
    ba00:	fc 01       	movw	r30, r24
    ba02:	11 83       	std	Z+1, r17	; 0x01
    ba04:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ba06:	ce 01       	movw	r24, r28
    ba08:	8f 54       	subi	r24, 0x4F	; 79
    ba0a:	9f 4f       	sbci	r25, 0xFF	; 255
    ba0c:	9e 01       	movw	r18, r28
    ba0e:	2f 54       	subi	r18, 0x4F	; 79
    ba10:	3f 4f       	sbci	r19, 0xFF	; 255
    ba12:	f9 01       	movw	r30, r18
    ba14:	20 81       	ld	r18, Z
    ba16:	31 81       	ldd	r19, Z+1	; 0x01
    ba18:	21 50       	subi	r18, 0x01	; 1
    ba1a:	30 40       	sbci	r19, 0x00	; 0
    ba1c:	fc 01       	movw	r30, r24
    ba1e:	31 83       	std	Z+1, r19	; 0x01
    ba20:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ba22:	ce 01       	movw	r24, r28
    ba24:	8f 54       	subi	r24, 0x4F	; 79
    ba26:	9f 4f       	sbci	r25, 0xFF	; 255
    ba28:	fc 01       	movw	r30, r24
    ba2a:	80 81       	ld	r24, Z
    ba2c:	91 81       	ldd	r25, Z+1	; 0x01
    ba2e:	00 97       	sbiw	r24, 0x00	; 0
    ba30:	89 f6       	brne	.-94     	; 0xb9d4 <travel_path+0x19f6>
    ba32:	2f c0       	rjmp	.+94     	; 0xba92 <travel_path+0x1ab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ba34:	8e 01       	movw	r16, r28
    ba36:	0f 54       	subi	r16, 0x4F	; 79
    ba38:	1f 4f       	sbci	r17, 0xFF	; 255
    ba3a:	ce 01       	movw	r24, r28
    ba3c:	83 55       	subi	r24, 0x53	; 83
    ba3e:	9f 4f       	sbci	r25, 0xFF	; 255
    ba40:	fc 01       	movw	r30, r24
    ba42:	60 81       	ld	r22, Z
    ba44:	71 81       	ldd	r23, Z+1	; 0x01
    ba46:	82 81       	ldd	r24, Z+2	; 0x02
    ba48:	93 81       	ldd	r25, Z+3	; 0x03
    ba4a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    ba4e:	dc 01       	movw	r26, r24
    ba50:	cb 01       	movw	r24, r22
    ba52:	f8 01       	movw	r30, r16
    ba54:	91 83       	std	Z+1, r25	; 0x01
    ba56:	80 83       	st	Z, r24
    ba58:	ce 01       	movw	r24, r28
    ba5a:	8b 54       	subi	r24, 0x4B	; 75
    ba5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ba5e:	9e 01       	movw	r18, r28
    ba60:	2f 54       	subi	r18, 0x4F	; 79
    ba62:	3f 4f       	sbci	r19, 0xFF	; 255
    ba64:	f9 01       	movw	r30, r18
    ba66:	20 81       	ld	r18, Z
    ba68:	31 81       	ldd	r19, Z+1	; 0x01
    ba6a:	fc 01       	movw	r30, r24
    ba6c:	31 83       	std	Z+1, r19	; 0x01
    ba6e:	20 83       	st	Z, r18
    ba70:	ce 01       	movw	r24, r28
    ba72:	8b 54       	subi	r24, 0x4B	; 75
    ba74:	9f 4f       	sbci	r25, 0xFF	; 255
    ba76:	fc 01       	movw	r30, r24
    ba78:	80 81       	ld	r24, Z
    ba7a:	91 81       	ldd	r25, Z+1	; 0x01
    ba7c:	8c 01       	movw	r16, r24
    ba7e:	c8 01       	movw	r24, r16
    ba80:	01 97       	sbiw	r24, 0x01	; 1
    ba82:	f1 f7       	brne	.-4      	; 0xba80 <travel_path+0x1aa2>
    ba84:	8c 01       	movw	r16, r24
    ba86:	ce 01       	movw	r24, r28
    ba88:	8b 54       	subi	r24, 0x4B	; 75
    ba8a:	9f 4f       	sbci	r25, 0xFF	; 255
    ba8c:	fc 01       	movw	r30, r24
    ba8e:	11 83       	std	Z+1, r17	; 0x01
    ba90:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
    ba92:	0e 94 bd 18 	call	0x317a	; 0x317a <correct_right3>
			node++;
    ba96:	80 91 65 03 	lds	r24, 0x0365
    ba9a:	90 91 66 03 	lds	r25, 0x0366
    ba9e:	01 96       	adiw	r24, 0x01	; 1
    baa0:	90 93 66 03 	sts	0x0366, r25
    baa4:	80 93 65 03 	sts	0x0365, r24
			pick_drop(master_path[node]);
    baa8:	80 91 65 03 	lds	r24, 0x0365
    baac:	90 91 66 03 	lds	r25, 0x0366
    bab0:	87 59       	subi	r24, 0x97	; 151
    bab2:	9c 4f       	sbci	r25, 0xFC	; 252
    bab4:	fc 01       	movw	r30, r24
    bab6:	80 81       	ld	r24, Z
    bab8:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <pick_drop>
			node++;
    babc:	80 91 65 03 	lds	r24, 0x0365
    bac0:	90 91 66 03 	lds	r25, 0x0366
    bac4:	01 96       	adiw	r24, 0x01	; 1
    bac6:	90 93 66 03 	sts	0x0366, r25
    baca:	80 93 65 03 	sts	0x0365, r24
			travel_path(master_path[node]);
    bace:	80 91 65 03 	lds	r24, 0x0365
    bad2:	90 91 66 03 	lds	r25, 0x0366
    bad6:	87 59       	subi	r24, 0x97	; 151
    bad8:	9c 4f       	sbci	r25, 0xFC	; 252
    bada:	fc 01       	movw	r30, r24
    badc:	80 81       	ld	r24, Z
    bade:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <travel_path>
    bae2:	12 c0       	rjmp	.+36     	; 0xbb08 <travel_path+0x1b2a>
		}
		else
		correct_right3();
    bae4:	0e 94 bd 18 	call	0x317a	; 0x317a <correct_right3>
    bae8:	0f c0       	rjmp	.+30     	; 0xbb08 <travel_path+0x1b2a>
	}
	else if(pos_val=='o')
    baea:	ce 01       	movw	r24, r28
    baec:	89 54       	subi	r24, 0x49	; 73
    baee:	9f 4f       	sbci	r25, 0xFF	; 255
    baf0:	fc 01       	movw	r30, r24
    baf2:	80 81       	ld	r24, Z
    baf4:	8f 36       	cpi	r24, 0x6F	; 111
    baf6:	41 f4       	brne	.+16     	; 0xbb08 <travel_path+0x1b2a>
	{
		stop();
    baf8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		path_fin=1;
    bafc:	81 e0       	ldi	r24, 0x01	; 1
    bafe:	90 e0       	ldi	r25, 0x00	; 0
    bb00:	90 93 32 04 	sts	0x0432, r25
    bb04:	80 93 31 04 	sts	0x0431, r24
	}
halt=0;	
    bb08:	10 92 68 03 	sts	0x0368, r1
    bb0c:	10 92 67 03 	sts	0x0367, r1
TIMSK3=1;
    bb10:	81 e7       	ldi	r24, 0x71	; 113
    bb12:	90 e0       	ldi	r25, 0x00	; 0
    bb14:	21 e0       	ldi	r18, 0x01	; 1
    bb16:	fc 01       	movw	r30, r24
    bb18:	20 83       	st	Z, r18
}
    bb1a:	c9 54       	subi	r28, 0x49	; 73
    bb1c:	df 4f       	sbci	r29, 0xFF	; 255
    bb1e:	0f b6       	in	r0, 0x3f	; 63
    bb20:	f8 94       	cli
    bb22:	de bf       	out	0x3e, r29	; 62
    bb24:	0f be       	out	0x3f, r0	; 63
    bb26:	cd bf       	out	0x3d, r28	; 61
    bb28:	df 91       	pop	r29
    bb2a:	cf 91       	pop	r28
    bb2c:	1f 91       	pop	r17
    bb2e:	0f 91       	pop	r16
    bb30:	08 95       	ret

0000bb32 <line_following>:
* Example Call:		line_following();
*/

void line_following()

{
    bb32:	cf 93       	push	r28
    bb34:	df 93       	push	r29
    bb36:	cd b7       	in	r28, 0x3d	; 61
    bb38:	de b7       	in	r29, 0x3e	; 62

	TIMSK3 = 0x01;
    bb3a:	81 e7       	ldi	r24, 0x71	; 113
    bb3c:	90 e0       	ldi	r25, 0x00	; 0
    bb3e:	21 e0       	ldi	r18, 0x01	; 1
    bb40:	fc 01       	movw	r30, r24
    bb42:	20 83       	st	Z, r18

}
    bb44:	df 91       	pop	r29
    bb46:	cf 91       	pop	r28
    bb48:	08 95       	ret

0000bb4a <lcd_port_config>:

*/

void lcd_port_config(void)

{
    bb4a:	cf 93       	push	r28
    bb4c:	df 93       	push	r29
    bb4e:	cd b7       	in	r28, 0x3d	; 61
    bb50:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    bb52:	87 e2       	ldi	r24, 0x27	; 39
    bb54:	90 e0       	ldi	r25, 0x00	; 0
    bb56:	27 e2       	ldi	r18, 0x27	; 39
    bb58:	30 e0       	ldi	r19, 0x00	; 0
    bb5a:	f9 01       	movw	r30, r18
    bb5c:	20 81       	ld	r18, Z
    bb5e:	27 6f       	ori	r18, 0xF7	; 247
    bb60:	fc 01       	movw	r30, r24
    bb62:	20 83       	st	Z, r18

	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    bb64:	88 e2       	ldi	r24, 0x28	; 40
    bb66:	90 e0       	ldi	r25, 0x00	; 0
    bb68:	28 e2       	ldi	r18, 0x28	; 40
    bb6a:	30 e0       	ldi	r19, 0x00	; 0
    bb6c:	f9 01       	movw	r30, r18
    bb6e:	20 81       	ld	r18, Z
    bb70:	20 78       	andi	r18, 0x80	; 128
    bb72:	fc 01       	movw	r30, r24
    bb74:	20 83       	st	Z, r18

}
    bb76:	df 91       	pop	r29
    bb78:	cf 91       	pop	r28
    bb7a:	08 95       	ret

0000bb7c <buzzer_pin_config>:

*/

void buzzer_pin_config(void)

{
    bb7c:	cf 93       	push	r28
    bb7e:	df 93       	push	r29
    bb80:	cd b7       	in	r28, 0x3d	; 61
    bb82:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0x08; //Setting PORTC 3 as output
    bb84:	87 e2       	ldi	r24, 0x27	; 39
    bb86:	90 e0       	ldi	r25, 0x00	; 0
    bb88:	27 e2       	ldi	r18, 0x27	; 39
    bb8a:	30 e0       	ldi	r19, 0x00	; 0
    bb8c:	f9 01       	movw	r30, r18
    bb8e:	20 81       	ld	r18, Z
    bb90:	28 60       	ori	r18, 0x08	; 8
    bb92:	fc 01       	movw	r30, r24
    bb94:	20 83       	st	Z, r18

	PORTC = PORTC & 0xF7; //Setting PORTC 3 logic low to turnoff buzzer
    bb96:	88 e2       	ldi	r24, 0x28	; 40
    bb98:	90 e0       	ldi	r25, 0x00	; 0
    bb9a:	28 e2       	ldi	r18, 0x28	; 40
    bb9c:	30 e0       	ldi	r19, 0x00	; 0
    bb9e:	f9 01       	movw	r30, r18
    bba0:	20 81       	ld	r18, Z
    bba2:	27 7f       	andi	r18, 0xF7	; 247
    bba4:	fc 01       	movw	r30, r24
    bba6:	20 83       	st	Z, r18

}
    bba8:	df 91       	pop	r29
    bbaa:	cf 91       	pop	r28
    bbac:	08 95       	ret

0000bbae <buzzer_on>:

*/

void buzzer_on(void)

{
    bbae:	cf 93       	push	r28
    bbb0:	df 93       	push	r29
    bbb2:	0f 92       	push	r0
    bbb4:	cd b7       	in	r28, 0x3d	; 61
    bbb6:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
    bbb8:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
    bbba:	86 e2       	ldi	r24, 0x26	; 38
    bbbc:	90 e0       	ldi	r25, 0x00	; 0
    bbbe:	fc 01       	movw	r30, r24
    bbc0:	80 81       	ld	r24, Z
    bbc2:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore | 0x08;
    bbc4:	89 81       	ldd	r24, Y+1	; 0x01
    bbc6:	88 60       	ori	r24, 0x08	; 8
    bbc8:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
    bbca:	88 e2       	ldi	r24, 0x28	; 40
    bbcc:	90 e0       	ldi	r25, 0x00	; 0
    bbce:	29 81       	ldd	r18, Y+1	; 0x01
    bbd0:	fc 01       	movw	r30, r24
    bbd2:	20 83       	st	Z, r18

}
    bbd4:	0f 90       	pop	r0
    bbd6:	df 91       	pop	r29
    bbd8:	cf 91       	pop	r28
    bbda:	08 95       	ret

0000bbdc <buzzer_off>:

*/

void buzzer_off(void)

{
    bbdc:	cf 93       	push	r28
    bbde:	df 93       	push	r29
    bbe0:	0f 92       	push	r0
    bbe2:	cd b7       	in	r28, 0x3d	; 61
    bbe4:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
    bbe6:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
    bbe8:	86 e2       	ldi	r24, 0x26	; 38
    bbea:	90 e0       	ldi	r25, 0x00	; 0
    bbec:	fc 01       	movw	r30, r24
    bbee:	80 81       	ld	r24, Z
    bbf0:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore & 0xF7;
    bbf2:	89 81       	ldd	r24, Y+1	; 0x01
    bbf4:	87 7f       	andi	r24, 0xF7	; 247
    bbf6:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
    bbf8:	88 e2       	ldi	r24, 0x28	; 40
    bbfa:	90 e0       	ldi	r25, 0x00	; 0
    bbfc:	29 81       	ldd	r18, Y+1	; 0x01
    bbfe:	fc 01       	movw	r30, r24
    bc00:	20 83       	st	Z, r18

}
    bc02:	0f 90       	pop	r0
    bc04:	df 91       	pop	r29
    bc06:	cf 91       	pop	r28
    bc08:	08 95       	ret

0000bc0a <buzz>:

*/

void buzz(unsigned long mst)

{
    bc0a:	0f 93       	push	r16
    bc0c:	1f 93       	push	r17
    bc0e:	cf 93       	push	r28
    bc10:	df 93       	push	r29
    bc12:	cd b7       	in	r28, 0x3d	; 61
    bc14:	de b7       	in	r29, 0x3e	; 62
    bc16:	62 97       	sbiw	r28, 0x12	; 18
    bc18:	0f b6       	in	r0, 0x3f	; 63
    bc1a:	f8 94       	cli
    bc1c:	de bf       	out	0x3e, r29	; 62
    bc1e:	0f be       	out	0x3f, r0	; 63
    bc20:	cd bf       	out	0x3d, r28	; 61
    bc22:	6f 87       	std	Y+15, r22	; 0x0f
    bc24:	78 8b       	std	Y+16, r23	; 0x10
    bc26:	89 8b       	std	Y+17, r24	; 0x11
    bc28:	9a 8b       	std	Y+18, r25	; 0x12

	buzzer_on();
    bc2a:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <buzzer_on>
    bc2e:	80 e0       	ldi	r24, 0x00	; 0
    bc30:	90 e0       	ldi	r25, 0x00	; 0
    bc32:	a8 e4       	ldi	r26, 0x48	; 72
    bc34:	b2 e4       	ldi	r27, 0x42	; 66
    bc36:	89 83       	std	Y+1, r24	; 0x01
    bc38:	9a 83       	std	Y+2, r25	; 0x02
    bc3a:	ab 83       	std	Y+3, r26	; 0x03
    bc3c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bc3e:	69 81       	ldd	r22, Y+1	; 0x01
    bc40:	7a 81       	ldd	r23, Y+2	; 0x02
    bc42:	8b 81       	ldd	r24, Y+3	; 0x03
    bc44:	9c 81       	ldd	r25, Y+4	; 0x04
    bc46:	26 e6       	ldi	r18, 0x66	; 102
    bc48:	36 e6       	ldi	r19, 0x66	; 102
    bc4a:	46 e6       	ldi	r20, 0x66	; 102
    bc4c:	55 e4       	ldi	r21, 0x45	; 69
    bc4e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    bc52:	dc 01       	movw	r26, r24
    bc54:	cb 01       	movw	r24, r22
    bc56:	8d 83       	std	Y+5, r24	; 0x05
    bc58:	9e 83       	std	Y+6, r25	; 0x06
    bc5a:	af 83       	std	Y+7, r26	; 0x07
    bc5c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    bc5e:	11 e0       	ldi	r17, 0x01	; 1
    bc60:	6d 81       	ldd	r22, Y+5	; 0x05
    bc62:	7e 81       	ldd	r23, Y+6	; 0x06
    bc64:	8f 81       	ldd	r24, Y+7	; 0x07
    bc66:	98 85       	ldd	r25, Y+8	; 0x08
    bc68:	20 e0       	ldi	r18, 0x00	; 0
    bc6a:	30 e0       	ldi	r19, 0x00	; 0
    bc6c:	40 e8       	ldi	r20, 0x80	; 128
    bc6e:	5f e3       	ldi	r21, 0x3F	; 63
    bc70:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    bc74:	88 23       	and	r24, r24
    bc76:	0c f0       	brlt	.+2      	; 0xbc7a <buzz+0x70>
    bc78:	10 e0       	ldi	r17, 0x00	; 0
    bc7a:	11 23       	and	r17, r17
    bc7c:	29 f0       	breq	.+10     	; 0xbc88 <buzz+0x7e>
		__ticks = 1;
    bc7e:	81 e0       	ldi	r24, 0x01	; 1
    bc80:	90 e0       	ldi	r25, 0x00	; 0
    bc82:	9a 87       	std	Y+10, r25	; 0x0a
    bc84:	89 87       	std	Y+9, r24	; 0x09
    bc86:	46 c0       	rjmp	.+140    	; 0xbd14 <buzz+0x10a>
	else if (__tmp > 65535)
    bc88:	11 e0       	ldi	r17, 0x01	; 1
    bc8a:	6d 81       	ldd	r22, Y+5	; 0x05
    bc8c:	7e 81       	ldd	r23, Y+6	; 0x06
    bc8e:	8f 81       	ldd	r24, Y+7	; 0x07
    bc90:	98 85       	ldd	r25, Y+8	; 0x08
    bc92:	20 e0       	ldi	r18, 0x00	; 0
    bc94:	3f ef       	ldi	r19, 0xFF	; 255
    bc96:	4f e7       	ldi	r20, 0x7F	; 127
    bc98:	57 e4       	ldi	r21, 0x47	; 71
    bc9a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    bc9e:	18 16       	cp	r1, r24
    bca0:	0c f0       	brlt	.+2      	; 0xbca4 <buzz+0x9a>
    bca2:	10 e0       	ldi	r17, 0x00	; 0
    bca4:	11 23       	and	r17, r17
    bca6:	61 f1       	breq	.+88     	; 0xbd00 <buzz+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bca8:	69 81       	ldd	r22, Y+1	; 0x01
    bcaa:	7a 81       	ldd	r23, Y+2	; 0x02
    bcac:	8b 81       	ldd	r24, Y+3	; 0x03
    bcae:	9c 81       	ldd	r25, Y+4	; 0x04
    bcb0:	20 e0       	ldi	r18, 0x00	; 0
    bcb2:	30 e0       	ldi	r19, 0x00	; 0
    bcb4:	40 e2       	ldi	r20, 0x20	; 32
    bcb6:	51 e4       	ldi	r21, 0x41	; 65
    bcb8:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    bcbc:	dc 01       	movw	r26, r24
    bcbe:	cb 01       	movw	r24, r22
    bcc0:	bc 01       	movw	r22, r24
    bcc2:	cd 01       	movw	r24, r26
    bcc4:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    bcc8:	dc 01       	movw	r26, r24
    bcca:	cb 01       	movw	r24, r22
    bccc:	9a 87       	std	Y+10, r25	; 0x0a
    bcce:	89 87       	std	Y+9, r24	; 0x09
    bcd0:	12 c0       	rjmp	.+36     	; 0xbcf6 <buzz+0xec>
    bcd2:	80 e7       	ldi	r24, 0x70	; 112
    bcd4:	91 e0       	ldi	r25, 0x01	; 1
    bcd6:	9c 87       	std	Y+12, r25	; 0x0c
    bcd8:	8b 87       	std	Y+11, r24	; 0x0b
    bcda:	8b 85       	ldd	r24, Y+11	; 0x0b
    bcdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    bcde:	8c 01       	movw	r16, r24
    bce0:	c8 01       	movw	r24, r16
    bce2:	01 97       	sbiw	r24, 0x01	; 1
    bce4:	f1 f7       	brne	.-4      	; 0xbce2 <buzz+0xd8>
    bce6:	8c 01       	movw	r16, r24
    bce8:	1c 87       	std	Y+12, r17	; 0x0c
    bcea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bcec:	89 85       	ldd	r24, Y+9	; 0x09
    bcee:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcf0:	01 97       	sbiw	r24, 0x01	; 1
    bcf2:	9a 87       	std	Y+10, r25	; 0x0a
    bcf4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bcf6:	89 85       	ldd	r24, Y+9	; 0x09
    bcf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcfa:	00 97       	sbiw	r24, 0x00	; 0
    bcfc:	51 f7       	brne	.-44     	; 0xbcd2 <buzz+0xc8>
    bcfe:	17 c0       	rjmp	.+46     	; 0xbd2e <buzz+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bd00:	6d 81       	ldd	r22, Y+5	; 0x05
    bd02:	7e 81       	ldd	r23, Y+6	; 0x06
    bd04:	8f 81       	ldd	r24, Y+7	; 0x07
    bd06:	98 85       	ldd	r25, Y+8	; 0x08
    bd08:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    bd0c:	dc 01       	movw	r26, r24
    bd0e:	cb 01       	movw	r24, r22
    bd10:	9a 87       	std	Y+10, r25	; 0x0a
    bd12:	89 87       	std	Y+9, r24	; 0x09
    bd14:	89 85       	ldd	r24, Y+9	; 0x09
    bd16:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd18:	9e 87       	std	Y+14, r25	; 0x0e
    bd1a:	8d 87       	std	Y+13, r24	; 0x0d
    bd1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    bd1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    bd20:	8c 01       	movw	r16, r24
    bd22:	c8 01       	movw	r24, r16
    bd24:	01 97       	sbiw	r24, 0x01	; 1
    bd26:	f1 f7       	brne	.-4      	; 0xbd24 <buzz+0x11a>
    bd28:	8c 01       	movw	r16, r24
    bd2a:	1e 87       	std	Y+14, r17	; 0x0e
    bd2c:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(50);

	buzzer_off();
    bd2e:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <buzzer_off>

}
    bd32:	62 96       	adiw	r28, 0x12	; 18
    bd34:	0f b6       	in	r0, 0x3f	; 63
    bd36:	f8 94       	cli
    bd38:	de bf       	out	0x3e, r29	; 62
    bd3a:	0f be       	out	0x3f, r0	; 63
    bd3c:	cd bf       	out	0x3d, r28	; 61
    bd3e:	df 91       	pop	r29
    bd40:	cf 91       	pop	r28
    bd42:	1f 91       	pop	r17
    bd44:	0f 91       	pop	r16
    bd46:	08 95       	ret

0000bd48 <timer1_init>:

*/

void timer1_init()

{
    bd48:	cf 93       	push	r28
    bd4a:	df 93       	push	r29
    bd4c:	cd b7       	in	r28, 0x3d	; 61
    bd4e:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0X00;
    bd50:	80 e8       	ldi	r24, 0x80	; 128
    bd52:	90 e0       	ldi	r25, 0x00	; 0
    bd54:	fc 01       	movw	r30, r24
    bd56:	10 82       	st	Z, r1

	ICR1 = 1023;
    bd58:	86 e8       	ldi	r24, 0x86	; 134
    bd5a:	90 e0       	ldi	r25, 0x00	; 0
    bd5c:	2f ef       	ldi	r18, 0xFF	; 255
    bd5e:	33 e0       	ldi	r19, 0x03	; 3
    bd60:	fc 01       	movw	r30, r24
    bd62:	31 83       	std	Z+1, r19	; 0x01
    bd64:	20 83       	st	Z, r18

	TCNT1H = 0XFC;
    bd66:	85 e8       	ldi	r24, 0x85	; 133
    bd68:	90 e0       	ldi	r25, 0x00	; 0
    bd6a:	2c ef       	ldi	r18, 0xFC	; 252
    bd6c:	fc 01       	movw	r30, r24
    bd6e:	20 83       	st	Z, r18

	TCNT1L = 0X01;
    bd70:	84 e8       	ldi	r24, 0x84	; 132
    bd72:	90 e0       	ldi	r25, 0x00	; 0
    bd74:	21 e0       	ldi	r18, 0x01	; 1
    bd76:	fc 01       	movw	r30, r24
    bd78:	20 83       	st	Z, r18

	OCR1AH = 0x03;	//Output compare Register high value for servo 1
    bd7a:	89 e8       	ldi	r24, 0x89	; 137
    bd7c:	90 e0       	ldi	r25, 0x00	; 0
    bd7e:	23 e0       	ldi	r18, 0x03	; 3
    bd80:	fc 01       	movw	r30, r24
    bd82:	20 83       	st	Z, r18

	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    bd84:	88 e8       	ldi	r24, 0x88	; 136
    bd86:	90 e0       	ldi	r25, 0x00	; 0
    bd88:	2f ef       	ldi	r18, 0xFF	; 255
    bd8a:	fc 01       	movw	r30, r24
    bd8c:	20 83       	st	Z, r18

	OCR1BH = 0x03;	//Output compare Register high value for servo 2
    bd8e:	8b e8       	ldi	r24, 0x8B	; 139
    bd90:	90 e0       	ldi	r25, 0x00	; 0
    bd92:	23 e0       	ldi	r18, 0x03	; 3
    bd94:	fc 01       	movw	r30, r24
    bd96:	20 83       	st	Z, r18

	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    bd98:	8a e8       	ldi	r24, 0x8A	; 138
    bd9a:	90 e0       	ldi	r25, 0x00	; 0
    bd9c:	2f ef       	ldi	r18, 0xFF	; 255
    bd9e:	fc 01       	movw	r30, r24
    bda0:	20 83       	st	Z, r18

	OCR1CH = 0x03;	//Output compare Register high value for servo 3
    bda2:	8d e8       	ldi	r24, 0x8D	; 141
    bda4:	90 e0       	ldi	r25, 0x00	; 0
    bda6:	23 e0       	ldi	r18, 0x03	; 3
    bda8:	fc 01       	movw	r30, r24
    bdaa:	20 83       	st	Z, r18

	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    bdac:	8c e8       	ldi	r24, 0x8C	; 140
    bdae:	90 e0       	ldi	r25, 0x00	; 0
    bdb0:	2f ef       	ldi	r18, 0xFF	; 255
    bdb2:	fc 01       	movw	r30, r24
    bdb4:	20 83       	st	Z, r18

	ICR1H  = 0x03;
    bdb6:	87 e8       	ldi	r24, 0x87	; 135
    bdb8:	90 e0       	ldi	r25, 0x00	; 0
    bdba:	23 e0       	ldi	r18, 0x03	; 3
    bdbc:	fc 01       	movw	r30, r24
    bdbe:	20 83       	st	Z, r18

	ICR1L  = 0xFF;
    bdc0:	86 e8       	ldi	r24, 0x86	; 134
    bdc2:	90 e0       	ldi	r25, 0x00	; 0
    bdc4:	2f ef       	ldi	r18, 0xFF	; 255
    bdc6:	fc 01       	movw	r30, r24
    bdc8:	20 83       	st	Z, r18

	TCCR1A = 0XAB;
    bdca:	80 e8       	ldi	r24, 0x80	; 128
    bdcc:	90 e0       	ldi	r25, 0x00	; 0
    bdce:	2b ea       	ldi	r18, 0xAB	; 171
    bdd0:	fc 01       	movw	r30, r24
    bdd2:	20 83       	st	Z, r18

	TCCR1B = 0X0C;
    bdd4:	81 e8       	ldi	r24, 0x81	; 129
    bdd6:	90 e0       	ldi	r25, 0x00	; 0
    bdd8:	2c e0       	ldi	r18, 0x0C	; 12
    bdda:	fc 01       	movw	r30, r24
    bddc:	20 83       	st	Z, r18

	TCCR1C = 0x00;
    bdde:	82 e8       	ldi	r24, 0x82	; 130
    bde0:	90 e0       	ldi	r25, 0x00	; 0
    bde2:	fc 01       	movw	r30, r24
    bde4:	10 82       	st	Z, r1

}
    bde6:	df 91       	pop	r29
    bde8:	cf 91       	pop	r28
    bdea:	08 95       	ret

0000bdec <timer3_init>:

*/

void timer3_init(void)

{
    bdec:	cf 93       	push	r28
    bdee:	df 93       	push	r29
    bdf0:	cd b7       	in	r28, 0x3d	; 61
    bdf2:	de b7       	in	r29, 0x3e	; 62

	TCCR3B = 0x00; //stop
    bdf4:	81 e9       	ldi	r24, 0x91	; 145
    bdf6:	90 e0       	ldi	r25, 0x00	; 0
    bdf8:	fc 01       	movw	r30, r24
    bdfa:	10 82       	st	Z, r1

	TCNT3 = 0xFDC0; // 0.01s
    bdfc:	84 e9       	ldi	r24, 0x94	; 148
    bdfe:	90 e0       	ldi	r25, 0x00	; 0
    be00:	20 ec       	ldi	r18, 0xC0	; 192
    be02:	3d ef       	ldi	r19, 0xFD	; 253
    be04:	fc 01       	movw	r30, r24
    be06:	31 83       	std	Z+1, r19	; 0x01
    be08:	20 83       	st	Z, r18

	OCR3AH = 0x00; //Output Compare Register (OCR)- Not used
    be0a:	89 e9       	ldi	r24, 0x99	; 153
    be0c:	90 e0       	ldi	r25, 0x00	; 0
    be0e:	fc 01       	movw	r30, r24
    be10:	10 82       	st	Z, r1

	OCR3AL = 0x00; //Output Compare Register (OCR)- Not used
    be12:	88 e9       	ldi	r24, 0x98	; 152
    be14:	90 e0       	ldi	r25, 0x00	; 0
    be16:	fc 01       	movw	r30, r24
    be18:	10 82       	st	Z, r1

	OCR3BH = 0x00; //Output Compare Register (OCR)- Not used
    be1a:	8b e9       	ldi	r24, 0x9B	; 155
    be1c:	90 e0       	ldi	r25, 0x00	; 0
    be1e:	fc 01       	movw	r30, r24
    be20:	10 82       	st	Z, r1

	OCR3BL = 0x00; //Output Compare Register (OCR)- Not used
    be22:	8a e9       	ldi	r24, 0x9A	; 154
    be24:	90 e0       	ldi	r25, 0x00	; 0
    be26:	fc 01       	movw	r30, r24
    be28:	10 82       	st	Z, r1

	OCR3CH = 0x00; //Output Compare Register (OCR)- Not used
    be2a:	8d e9       	ldi	r24, 0x9D	; 157
    be2c:	90 e0       	ldi	r25, 0x00	; 0
    be2e:	fc 01       	movw	r30, r24
    be30:	10 82       	st	Z, r1

	OCR3CL = 0x00; //Output Compare Register (OCR)- Not used
    be32:	8c e9       	ldi	r24, 0x9C	; 156
    be34:	90 e0       	ldi	r25, 0x00	; 0
    be36:	fc 01       	movw	r30, r24
    be38:	10 82       	st	Z, r1

	ICR3H = 0x00; //Input Capture Register (ICR)- Not used
    be3a:	87 e9       	ldi	r24, 0x97	; 151
    be3c:	90 e0       	ldi	r25, 0x00	; 0
    be3e:	fc 01       	movw	r30, r24
    be40:	10 82       	st	Z, r1

	ICR3L = 0x00; //Input Capture Register (ICR)- Not used
    be42:	86 e9       	ldi	r24, 0x96	; 150
    be44:	90 e0       	ldi	r25, 0x00	; 0
    be46:	fc 01       	movw	r30, r24
    be48:	10 82       	st	Z, r1

	TCCR3A = 0x00;
    be4a:	80 e9       	ldi	r24, 0x90	; 144
    be4c:	90 e0       	ldi	r25, 0x00	; 0
    be4e:	fc 01       	movw	r30, r24
    be50:	10 82       	st	Z, r1

	TCCR3C = 0x00;
    be52:	82 e9       	ldi	r24, 0x92	; 146
    be54:	90 e0       	ldi	r25, 0x00	; 0
    be56:	fc 01       	movw	r30, r24
    be58:	10 82       	st	Z, r1

	TCCR3B = 0x04; //Pre-scaler 256 1-0-0
    be5a:	81 e9       	ldi	r24, 0x91	; 145
    be5c:	90 e0       	ldi	r25, 0x00	; 0
    be5e:	24 e0       	ldi	r18, 0x04	; 4
    be60:	fc 01       	movw	r30, r24
    be62:	20 83       	st	Z, r18

}
    be64:	df 91       	pop	r29
    be66:	cf 91       	pop	r28
    be68:	08 95       	ret

0000be6a <timer4_init>:

*/

void timer4_init(void) 

{
    be6a:	cf 93       	push	r28
    be6c:	df 93       	push	r29
    be6e:	cd b7       	in	r28, 0x3d	; 61
    be70:	de b7       	in	r29, 0x3e	; 62

	TCCR4B = 0x00; //stop
    be72:	81 ea       	ldi	r24, 0xA1	; 161
    be74:	90 e0       	ldi	r25, 0x00	; 0
    be76:	fc 01       	movw	r30, r24
    be78:	10 82       	st	Z, r1

	TCNT4 = 0xE980; // 0.1s
    be7a:	84 ea       	ldi	r24, 0xA4	; 164
    be7c:	90 e0       	ldi	r25, 0x00	; 0
    be7e:	20 e8       	ldi	r18, 0x80	; 128
    be80:	39 ee       	ldi	r19, 0xE9	; 233
    be82:	fc 01       	movw	r30, r24
    be84:	31 83       	std	Z+1, r19	; 0x01
    be86:	20 83       	st	Z, r18

	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
    be88:	89 ea       	ldi	r24, 0xA9	; 169
    be8a:	90 e0       	ldi	r25, 0x00	; 0
    be8c:	fc 01       	movw	r30, r24
    be8e:	10 82       	st	Z, r1

	OCR4AL = 0x00; //Output Compare Register (OCR)- Not used
    be90:	88 ea       	ldi	r24, 0xA8	; 168
    be92:	90 e0       	ldi	r25, 0x00	; 0
    be94:	fc 01       	movw	r30, r24
    be96:	10 82       	st	Z, r1

	OCR4BH = 0x00; //Output Compare Register (OCR)- Not used
    be98:	8b ea       	ldi	r24, 0xAB	; 171
    be9a:	90 e0       	ldi	r25, 0x00	; 0
    be9c:	fc 01       	movw	r30, r24
    be9e:	10 82       	st	Z, r1

	OCR4BL = 0x00; //Output Compare Register (OCR)- Not used
    bea0:	8a ea       	ldi	r24, 0xAA	; 170
    bea2:	90 e0       	ldi	r25, 0x00	; 0
    bea4:	fc 01       	movw	r30, r24
    bea6:	10 82       	st	Z, r1

	OCR4CH = 0x00; //Output Compare Register (OCR)- Not used
    bea8:	8d ea       	ldi	r24, 0xAD	; 173
    beaa:	90 e0       	ldi	r25, 0x00	; 0
    beac:	fc 01       	movw	r30, r24
    beae:	10 82       	st	Z, r1

	OCR4CL = 0x00; //Output Compare Register (OCR)- Not used
    beb0:	8c ea       	ldi	r24, 0xAC	; 172
    beb2:	90 e0       	ldi	r25, 0x00	; 0
    beb4:	fc 01       	movw	r30, r24
    beb6:	10 82       	st	Z, r1

	ICR4H = 0x00; //Input Capture Register (ICR)- Not used
    beb8:	87 ea       	ldi	r24, 0xA7	; 167
    beba:	90 e0       	ldi	r25, 0x00	; 0
    bebc:	fc 01       	movw	r30, r24
    bebe:	10 82       	st	Z, r1

	ICR4L = 0x00; //Input Capture Register (ICR)- Not used
    bec0:	86 ea       	ldi	r24, 0xA6	; 166
    bec2:	90 e0       	ldi	r25, 0x00	; 0
    bec4:	fc 01       	movw	r30, r24
    bec6:	10 82       	st	Z, r1

	TCCR4A = 0x00;
    bec8:	80 ea       	ldi	r24, 0xA0	; 160
    beca:	90 e0       	ldi	r25, 0x00	; 0
    becc:	fc 01       	movw	r30, r24
    bece:	10 82       	st	Z, r1

	TCCR4C = 0x00;
    bed0:	82 ea       	ldi	r24, 0xA2	; 162
    bed2:	90 e0       	ldi	r25, 0x00	; 0
    bed4:	fc 01       	movw	r30, r24
    bed6:	10 82       	st	Z, r1

	TCCR4B = 0x04; //Pre-scaler 256 1-0-0
    bed8:	81 ea       	ldi	r24, 0xA1	; 161
    beda:	90 e0       	ldi	r25, 0x00	; 0
    bedc:	24 e0       	ldi	r18, 0x04	; 4
    bede:	fc 01       	movw	r30, r24
    bee0:	20 83       	st	Z, r18

}
    bee2:	df 91       	pop	r29
    bee4:	cf 91       	pop	r28
    bee6:	08 95       	ret

0000bee8 <timer5_init>:

*/

void timer5_init()

{
    bee8:	cf 93       	push	r28
    beea:	df 93       	push	r29
    beec:	cd b7       	in	r28, 0x3d	; 61
    beee:	de b7       	in	r29, 0x3e	; 62

    TCCR5B = 0x00; //Stop
    bef0:	81 e2       	ldi	r24, 0x21	; 33
    bef2:	91 e0       	ldi	r25, 0x01	; 1
    bef4:	fc 01       	movw	r30, r24
    bef6:	10 82       	st	Z, r1

    TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
    bef8:	85 e2       	ldi	r24, 0x25	; 37
    befa:	91 e0       	ldi	r25, 0x01	; 1
    befc:	2f ef       	ldi	r18, 0xFF	; 255
    befe:	fc 01       	movw	r30, r24
    bf00:	20 83       	st	Z, r18

    TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
    bf02:	84 e2       	ldi	r24, 0x24	; 36
    bf04:	91 e0       	ldi	r25, 0x01	; 1
    bf06:	21 e0       	ldi	r18, 0x01	; 1
    bf08:	fc 01       	movw	r30, r24
    bf0a:	20 83       	st	Z, r18

    OCR5AH = 0x00; //Output compare register high value for Left Motor
    bf0c:	89 e2       	ldi	r24, 0x29	; 41
    bf0e:	91 e0       	ldi	r25, 0x01	; 1
    bf10:	fc 01       	movw	r30, r24
    bf12:	10 82       	st	Z, r1

    OCR5AL = 0xFF; //Output compare register low value for Left Motor
    bf14:	88 e2       	ldi	r24, 0x28	; 40
    bf16:	91 e0       	ldi	r25, 0x01	; 1
    bf18:	2f ef       	ldi	r18, 0xFF	; 255
    bf1a:	fc 01       	movw	r30, r24
    bf1c:	20 83       	st	Z, r18

    OCR5BH = 0x00; //Output compare register high value for Right Motor
    bf1e:	8b e2       	ldi	r24, 0x2B	; 43
    bf20:	91 e0       	ldi	r25, 0x01	; 1
    bf22:	fc 01       	movw	r30, r24
    bf24:	10 82       	st	Z, r1

    OCR5BL = 0xFF; //Output compare register low value for Right Motor
    bf26:	8a e2       	ldi	r24, 0x2A	; 42
    bf28:	91 e0       	ldi	r25, 0x01	; 1
    bf2a:	2f ef       	ldi	r18, 0xFF	; 255
    bf2c:	fc 01       	movw	r30, r24
    bf2e:	20 83       	st	Z, r18

    OCR5CH = 0x00; //Output compare register high value for Motor C1
    bf30:	8d e2       	ldi	r24, 0x2D	; 45
    bf32:	91 e0       	ldi	r25, 0x01	; 1
    bf34:	fc 01       	movw	r30, r24
    bf36:	10 82       	st	Z, r1

    OCR5CL = 0xFF; //Output compare register low value for Motor C1
    bf38:	8c e2       	ldi	r24, 0x2C	; 44
    bf3a:	91 e0       	ldi	r25, 0x01	; 1
    bf3c:	2f ef       	ldi	r18, 0xFF	; 255
    bf3e:	fc 01       	movw	r30, r24
    bf40:	20 83       	st	Z, r18

    TCCR5A = 0xA9;
    bf42:	80 e2       	ldi	r24, 0x20	; 32
    bf44:	91 e0       	ldi	r25, 0x01	; 1
    bf46:	29 ea       	ldi	r18, 0xA9	; 169
    bf48:	fc 01       	movw	r30, r24
    bf4a:	20 83       	st	Z, r18

				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/



    TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    bf4c:	81 e2       	ldi	r24, 0x21	; 33
    bf4e:	91 e0       	ldi	r25, 0x01	; 1
    bf50:	2b e0       	ldi	r18, 0x0B	; 11
    bf52:	fc 01       	movw	r30, r24
    bf54:	20 83       	st	Z, r18

}
    bf56:	df 91       	pop	r29
    bf58:	cf 91       	pop	r28
    bf5a:	08 95       	ret

0000bf5c <port_init>:

*/

void port_init()

{   DDRJ= DDRJ | 0xF7;
    bf5c:	cf 93       	push	r28
    bf5e:	df 93       	push	r29
    bf60:	cd b7       	in	r28, 0x3d	; 61
    bf62:	de b7       	in	r29, 0x3e	; 62
    bf64:	84 e0       	ldi	r24, 0x04	; 4
    bf66:	91 e0       	ldi	r25, 0x01	; 1
    bf68:	24 e0       	ldi	r18, 0x04	; 4
    bf6a:	31 e0       	ldi	r19, 0x01	; 1
    bf6c:	f9 01       	movw	r30, r18
    bf6e:	20 81       	ld	r18, Z
    bf70:	27 6f       	ori	r18, 0xF7	; 247
    bf72:	fc 01       	movw	r30, r24
    bf74:	20 83       	st	Z, r18

	PORTJ=0xFF;
    bf76:	85 e0       	ldi	r24, 0x05	; 5
    bf78:	91 e0       	ldi	r25, 0x01	; 1
    bf7a:	2f ef       	ldi	r18, 0xFF	; 255
    bf7c:	fc 01       	movw	r30, r24
    bf7e:	20 83       	st	Z, r18

	buzzer_pin_config(); //Buzzer pin configuration
    bf80:	0e 94 be 5d 	call	0xbb7c	; 0xbb7c <buzzer_pin_config>

	lcd_port_config();  //LCD pin configuration
    bf84:	0e 94 a5 5d 	call	0xbb4a	; 0xbb4a <lcd_port_config>

	

	adc_pin_config();  //ADC pin configuration
    bf88:	0e 94 ed 19 	call	0x33da	; 0x33da <adc_pin_config>

	motion_pin_config(); //Motion pin configuration
    bf8c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <motion_pin_config>

	left_encoder_pin_config(); //Left Encoder pin configuration
    bf90:	0e 94 cd 0b 	call	0x179a	; 0x179a <left_encoder_pin_config>

	right_encoder_pin_config(); //Right Encoder pin configuration
    bf94:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <right_encoder_pin_config>
	
	servo1_pin_config();
    bf98:	0e 94 4b 1b 	call	0x3696	; 0x3696 <servo1_pin_config>
	
	servo2_pin_config();
    bf9c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <servo2_pin_config>
	
	servo3_pin_config();
    bfa0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <servo3_pin_config>

}
    bfa4:	df 91       	pop	r29
    bfa6:	cf 91       	pop	r28
    bfa8:	08 95       	ret

0000bfaa <init_devices>:

*/

void init_devices(void)

{
    bfaa:	cf 93       	push	r28
    bfac:	df 93       	push	r29
    bfae:	cd b7       	in	r28, 0x3d	; 61
    bfb0:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupts
    bfb2:	f8 94       	cli

	

	port_init(); //Initiate all ports
    bfb4:	0e 94 ae 5f 	call	0xbf5c	; 0xbf5c <port_init>

	adc_init(); //Initiate ADC registers
    bfb8:	0e 94 04 1a 	call	0x3408	; 0x3408 <adc_init>
	
	uart2_init();
    bfbc:	88 ec       	ldi	r24, 0xC8	; 200
    bfbe:	97 e6       	ldi	r25, 0x67	; 103
    bfc0:	fc 01       	movw	r30, r24
    bfc2:	19 95       	eicall


	//Initiate timers

	timer1_init();
    bfc4:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <timer1_init>

	timer5_init();
    bfc8:	0e 94 74 5f 	call	0xbee8	; 0xbee8 <timer5_init>

	timer3_init();
    bfcc:	0e 94 f6 5e 	call	0xbdec	; 0xbdec <timer3_init>

	timer4_init();
    bfd0:	0e 94 35 5f 	call	0xbe6a	; 0xbe6a <timer4_init>

	

	//Initiate position encoder interrupts

	left_position_encoder_interrupt_init();
    bfd4:	0e 94 16 0c 	call	0x182c	; 0x182c <left_position_encoder_interrupt_init>

	right_position_encoder_interrupt_init();
    bfd8:	0e 94 31 0c 	call	0x1862	; 0x1862 <right_position_encoder_interrupt_init>

	

	sei(); //Enables the global interrupts
    bfdc:	78 94       	sei

}
    bfde:	df 91       	pop	r29
    bfe0:	cf 91       	pop	r28
    bfe2:	08 95       	ret

0000bfe4 <adjacent>:
int transf[37]={99,30,31,32,33,34,35,24,25,26,27,28,29,18,19,20,21,22,23,12,13,14,15,16,17,6,7,8,9,10,11,0,1,2,3,4,5};
int p_nx=0,p_ny=0,n_nx=0,n_ny=0;


void adjacent(int x1,int y1,int adj[4][2])
{
    bfe4:	cf 93       	push	r28
    bfe6:	df 93       	push	r29
    bfe8:	cd b7       	in	r28, 0x3d	; 61
    bfea:	de b7       	in	r29, 0x3e	; 62
    bfec:	6c 97       	sbiw	r28, 0x1c	; 28
    bfee:	0f b6       	in	r0, 0x3f	; 63
    bff0:	f8 94       	cli
    bff2:	de bf       	out	0x3e, r29	; 62
    bff4:	0f be       	out	0x3f, r0	; 63
    bff6:	cd bf       	out	0x3d, r28	; 61
    bff8:	98 8f       	std	Y+24, r25	; 0x18
    bffa:	8f 8b       	std	Y+23, r24	; 0x17
    bffc:	7a 8f       	std	Y+26, r23	; 0x1a
    bffe:	69 8f       	std	Y+25, r22	; 0x19
    c000:	5c 8f       	std	Y+28, r21	; 0x1c
    c002:	4b 8f       	std	Y+27, r20	; 0x1b
    int i=0,x=0,y=0;
    c004:	1a 82       	std	Y+2, r1	; 0x02
    c006:	19 82       	std	Y+1, r1	; 0x01
    c008:	1c 82       	std	Y+4, r1	; 0x04
    c00a:	1b 82       	std	Y+3, r1	; 0x03
    c00c:	1e 82       	std	Y+6, r1	; 0x06
    c00e:	1d 82       	std	Y+5, r1	; 0x05
    int key_x[4]={-1,0,1,0};//N E S W
    c010:	ce 01       	movw	r24, r28
    c012:	07 96       	adiw	r24, 0x07	; 7
    c014:	24 e9       	ldi	r18, 0x94	; 148
    c016:	32 e0       	ldi	r19, 0x02	; 2
    c018:	48 e0       	ldi	r20, 0x08	; 8
    c01a:	f9 01       	movw	r30, r18
    c01c:	00 80       	ld	r0, Z
    c01e:	2f 5f       	subi	r18, 0xFF	; 255
    c020:	3f 4f       	sbci	r19, 0xFF	; 255
    c022:	fc 01       	movw	r30, r24
    c024:	00 82       	st	Z, r0
    c026:	01 96       	adiw	r24, 0x01	; 1
    c028:	41 50       	subi	r20, 0x01	; 1
    c02a:	44 23       	and	r20, r20
    c02c:	b1 f7       	brne	.-20     	; 0xc01a <adjacent+0x36>
    int key_y[4]={0,1,0,-1};
    c02e:	ce 01       	movw	r24, r28
    c030:	0f 96       	adiw	r24, 0x0f	; 15
    c032:	2c e9       	ldi	r18, 0x9C	; 156
    c034:	32 e0       	ldi	r19, 0x02	; 2
    c036:	48 e0       	ldi	r20, 0x08	; 8
    c038:	f9 01       	movw	r30, r18
    c03a:	00 80       	ld	r0, Z
    c03c:	2f 5f       	subi	r18, 0xFF	; 255
    c03e:	3f 4f       	sbci	r19, 0xFF	; 255
    c040:	fc 01       	movw	r30, r24
    c042:	00 82       	st	Z, r0
    c044:	01 96       	adiw	r24, 0x01	; 1
    c046:	41 50       	subi	r20, 0x01	; 1
    c048:	44 23       	and	r20, r20
    c04a:	b1 f7       	brne	.-20     	; 0xc038 <adjacent+0x54>
    for(i=0;i<4;i++)
    c04c:	1a 82       	std	Y+2, r1	; 0x02
    c04e:	19 82       	std	Y+1, r1	; 0x01
    c050:	79 c0       	rjmp	.+242    	; 0xc144 <adjacent+0x160>
	{
        adj[i][0]=-1;
    c052:	89 81       	ldd	r24, Y+1	; 0x01
    c054:	9a 81       	ldd	r25, Y+2	; 0x02
    c056:	88 0f       	add	r24, r24
    c058:	99 1f       	adc	r25, r25
    c05a:	88 0f       	add	r24, r24
    c05c:	99 1f       	adc	r25, r25
    c05e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    c060:	3c 8d       	ldd	r19, Y+28	; 0x1c
    c062:	82 0f       	add	r24, r18
    c064:	93 1f       	adc	r25, r19
    c066:	2f ef       	ldi	r18, 0xFF	; 255
    c068:	3f ef       	ldi	r19, 0xFF	; 255
    c06a:	fc 01       	movw	r30, r24
    c06c:	31 83       	std	Z+1, r19	; 0x01
    c06e:	20 83       	st	Z, r18
        adj[i][1]=-1;
    c070:	89 81       	ldd	r24, Y+1	; 0x01
    c072:	9a 81       	ldd	r25, Y+2	; 0x02
    c074:	88 0f       	add	r24, r24
    c076:	99 1f       	adc	r25, r25
    c078:	88 0f       	add	r24, r24
    c07a:	99 1f       	adc	r25, r25
    c07c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    c07e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    c080:	82 0f       	add	r24, r18
    c082:	93 1f       	adc	r25, r19
    c084:	2f ef       	ldi	r18, 0xFF	; 255
    c086:	3f ef       	ldi	r19, 0xFF	; 255
    c088:	fc 01       	movw	r30, r24
    c08a:	33 83       	std	Z+3, r19	; 0x03
    c08c:	22 83       	std	Z+2, r18	; 0x02
        x=x1+key_x[i];
    c08e:	89 81       	ldd	r24, Y+1	; 0x01
    c090:	9a 81       	ldd	r25, Y+2	; 0x02
    c092:	88 0f       	add	r24, r24
    c094:	99 1f       	adc	r25, r25
    c096:	9e 01       	movw	r18, r28
    c098:	2f 5f       	subi	r18, 0xFF	; 255
    c09a:	3f 4f       	sbci	r19, 0xFF	; 255
    c09c:	82 0f       	add	r24, r18
    c09e:	93 1f       	adc	r25, r19
    c0a0:	06 96       	adiw	r24, 0x06	; 6
    c0a2:	fc 01       	movw	r30, r24
    c0a4:	20 81       	ld	r18, Z
    c0a6:	31 81       	ldd	r19, Z+1	; 0x01
    c0a8:	8f 89       	ldd	r24, Y+23	; 0x17
    c0aa:	98 8d       	ldd	r25, Y+24	; 0x18
    c0ac:	82 0f       	add	r24, r18
    c0ae:	93 1f       	adc	r25, r19
    c0b0:	9c 83       	std	Y+4, r25	; 0x04
    c0b2:	8b 83       	std	Y+3, r24	; 0x03
        y=y1+key_y[i];
    c0b4:	89 81       	ldd	r24, Y+1	; 0x01
    c0b6:	9a 81       	ldd	r25, Y+2	; 0x02
    c0b8:	88 0f       	add	r24, r24
    c0ba:	99 1f       	adc	r25, r25
    c0bc:	9e 01       	movw	r18, r28
    c0be:	2f 5f       	subi	r18, 0xFF	; 255
    c0c0:	3f 4f       	sbci	r19, 0xFF	; 255
    c0c2:	82 0f       	add	r24, r18
    c0c4:	93 1f       	adc	r25, r19
    c0c6:	0e 96       	adiw	r24, 0x0e	; 14
    c0c8:	fc 01       	movw	r30, r24
    c0ca:	20 81       	ld	r18, Z
    c0cc:	31 81       	ldd	r19, Z+1	; 0x01
    c0ce:	89 8d       	ldd	r24, Y+25	; 0x19
    c0d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    c0d2:	82 0f       	add	r24, r18
    c0d4:	93 1f       	adc	r25, r19
    c0d6:	9e 83       	std	Y+6, r25	; 0x06
    c0d8:	8d 83       	std	Y+5, r24	; 0x05
        if(x>-1 && y>-1 && x<6 && y<6)
    c0da:	8b 81       	ldd	r24, Y+3	; 0x03
    c0dc:	9c 81       	ldd	r25, Y+4	; 0x04
    c0de:	99 23       	and	r25, r25
    c0e0:	64 f1       	brlt	.+88     	; 0xc13a <adjacent+0x156>
    c0e2:	8d 81       	ldd	r24, Y+5	; 0x05
    c0e4:	9e 81       	ldd	r25, Y+6	; 0x06
    c0e6:	99 23       	and	r25, r25
    c0e8:	44 f1       	brlt	.+80     	; 0xc13a <adjacent+0x156>
    c0ea:	8b 81       	ldd	r24, Y+3	; 0x03
    c0ec:	9c 81       	ldd	r25, Y+4	; 0x04
    c0ee:	86 30       	cpi	r24, 0x06	; 6
    c0f0:	91 05       	cpc	r25, r1
    c0f2:	1c f5       	brge	.+70     	; 0xc13a <adjacent+0x156>
    c0f4:	8d 81       	ldd	r24, Y+5	; 0x05
    c0f6:	9e 81       	ldd	r25, Y+6	; 0x06
    c0f8:	86 30       	cpi	r24, 0x06	; 6
    c0fa:	91 05       	cpc	r25, r1
    c0fc:	f4 f4       	brge	.+60     	; 0xc13a <adjacent+0x156>
		{
            adj[i][0]=x;
    c0fe:	89 81       	ldd	r24, Y+1	; 0x01
    c100:	9a 81       	ldd	r25, Y+2	; 0x02
    c102:	88 0f       	add	r24, r24
    c104:	99 1f       	adc	r25, r25
    c106:	88 0f       	add	r24, r24
    c108:	99 1f       	adc	r25, r25
    c10a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    c10c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    c10e:	82 0f       	add	r24, r18
    c110:	93 1f       	adc	r25, r19
    c112:	2b 81       	ldd	r18, Y+3	; 0x03
    c114:	3c 81       	ldd	r19, Y+4	; 0x04
    c116:	fc 01       	movw	r30, r24
    c118:	31 83       	std	Z+1, r19	; 0x01
    c11a:	20 83       	st	Z, r18
            adj[i][1]=y;
    c11c:	89 81       	ldd	r24, Y+1	; 0x01
    c11e:	9a 81       	ldd	r25, Y+2	; 0x02
    c120:	88 0f       	add	r24, r24
    c122:	99 1f       	adc	r25, r25
    c124:	88 0f       	add	r24, r24
    c126:	99 1f       	adc	r25, r25
    c128:	2b 8d       	ldd	r18, Y+27	; 0x1b
    c12a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    c12c:	82 0f       	add	r24, r18
    c12e:	93 1f       	adc	r25, r19
    c130:	2d 81       	ldd	r18, Y+5	; 0x05
    c132:	3e 81       	ldd	r19, Y+6	; 0x06
    c134:	fc 01       	movw	r30, r24
    c136:	33 83       	std	Z+3, r19	; 0x03
    c138:	22 83       	std	Z+2, r18	; 0x02
void adjacent(int x1,int y1,int adj[4][2])
{
    int i=0,x=0,y=0;
    int key_x[4]={-1,0,1,0};//N E S W
    int key_y[4]={0,1,0,-1};
    for(i=0;i<4;i++)
    c13a:	89 81       	ldd	r24, Y+1	; 0x01
    c13c:	9a 81       	ldd	r25, Y+2	; 0x02
    c13e:	01 96       	adiw	r24, 0x01	; 1
    c140:	9a 83       	std	Y+2, r25	; 0x02
    c142:	89 83       	std	Y+1, r24	; 0x01
    c144:	89 81       	ldd	r24, Y+1	; 0x01
    c146:	9a 81       	ldd	r25, Y+2	; 0x02
    c148:	84 30       	cpi	r24, 0x04	; 4
    c14a:	91 05       	cpc	r25, r1
    c14c:	0c f4       	brge	.+2      	; 0xc150 <adjacent+0x16c>
    c14e:	81 cf       	rjmp	.-254    	; 0xc052 <adjacent+0x6e>
		{
            adj[i][0]=x;
            adj[i][1]=y;
        }
    }
}
    c150:	6c 96       	adiw	r28, 0x1c	; 28
    c152:	0f b6       	in	r0, 0x3f	; 63
    c154:	f8 94       	cli
    c156:	de bf       	out	0x3e, r29	; 62
    c158:	0f be       	out	0x3f, r0	; 63
    c15a:	cd bf       	out	0x3d, r28	; 61
    c15c:	df 91       	pop	r29
    c15e:	cf 91       	pop	r28
    c160:	08 95       	ret

0000c162 <min_dis>:

int min_dis(int dist[], int included[])
{
    c162:	cf 93       	push	r28
    c164:	df 93       	push	r29
    c166:	cd b7       	in	r28, 0x3d	; 61
    c168:	de b7       	in	r29, 0x3e	; 62
    c16a:	2a 97       	sbiw	r28, 0x0a	; 10
    c16c:	0f b6       	in	r0, 0x3f	; 63
    c16e:	f8 94       	cli
    c170:	de bf       	out	0x3e, r29	; 62
    c172:	0f be       	out	0x3f, r0	; 63
    c174:	cd bf       	out	0x3d, r28	; 61
    c176:	98 87       	std	Y+8, r25	; 0x08
    c178:	8f 83       	std	Y+7, r24	; 0x07
    c17a:	7a 87       	std	Y+10, r23	; 0x0a
    c17c:	69 87       	std	Y+9, r22	; 0x09
    int min=INF,min_index=0,i=0;
    c17e:	87 ee       	ldi	r24, 0xE7	; 231
    c180:	93 e0       	ldi	r25, 0x03	; 3
    c182:	9a 83       	std	Y+2, r25	; 0x02
    c184:	89 83       	std	Y+1, r24	; 0x01
    c186:	1c 82       	std	Y+4, r1	; 0x04
    c188:	1b 82       	std	Y+3, r1	; 0x03
    c18a:	1e 82       	std	Y+6, r1	; 0x06
    c18c:	1d 82       	std	Y+5, r1	; 0x05
    for(i=0;i<36;i++)
    c18e:	1e 82       	std	Y+6, r1	; 0x06
    c190:	1d 82       	std	Y+5, r1	; 0x05
    c192:	33 c0       	rjmp	.+102    	; 0xc1fa <min_dis+0x98>
    {
        if((included[i]==FALSE)&&dist[i]<min)
    c194:	8d 81       	ldd	r24, Y+5	; 0x05
    c196:	9e 81       	ldd	r25, Y+6	; 0x06
    c198:	88 0f       	add	r24, r24
    c19a:	99 1f       	adc	r25, r25
    c19c:	29 85       	ldd	r18, Y+9	; 0x09
    c19e:	3a 85       	ldd	r19, Y+10	; 0x0a
    c1a0:	82 0f       	add	r24, r18
    c1a2:	93 1f       	adc	r25, r19
    c1a4:	fc 01       	movw	r30, r24
    c1a6:	80 81       	ld	r24, Z
    c1a8:	91 81       	ldd	r25, Z+1	; 0x01
    c1aa:	00 97       	sbiw	r24, 0x00	; 0
    c1ac:	09 f5       	brne	.+66     	; 0xc1f0 <min_dis+0x8e>
    c1ae:	8d 81       	ldd	r24, Y+5	; 0x05
    c1b0:	9e 81       	ldd	r25, Y+6	; 0x06
    c1b2:	88 0f       	add	r24, r24
    c1b4:	99 1f       	adc	r25, r25
    c1b6:	2f 81       	ldd	r18, Y+7	; 0x07
    c1b8:	38 85       	ldd	r19, Y+8	; 0x08
    c1ba:	82 0f       	add	r24, r18
    c1bc:	93 1f       	adc	r25, r19
    c1be:	fc 01       	movw	r30, r24
    c1c0:	20 81       	ld	r18, Z
    c1c2:	31 81       	ldd	r19, Z+1	; 0x01
    c1c4:	89 81       	ldd	r24, Y+1	; 0x01
    c1c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c1c8:	28 17       	cp	r18, r24
    c1ca:	39 07       	cpc	r19, r25
    c1cc:	8c f4       	brge	.+34     	; 0xc1f0 <min_dis+0x8e>
        {
            min=dist[i];
    c1ce:	8d 81       	ldd	r24, Y+5	; 0x05
    c1d0:	9e 81       	ldd	r25, Y+6	; 0x06
    c1d2:	88 0f       	add	r24, r24
    c1d4:	99 1f       	adc	r25, r25
    c1d6:	2f 81       	ldd	r18, Y+7	; 0x07
    c1d8:	38 85       	ldd	r19, Y+8	; 0x08
    c1da:	82 0f       	add	r24, r18
    c1dc:	93 1f       	adc	r25, r19
    c1de:	fc 01       	movw	r30, r24
    c1e0:	80 81       	ld	r24, Z
    c1e2:	91 81       	ldd	r25, Z+1	; 0x01
    c1e4:	9a 83       	std	Y+2, r25	; 0x02
    c1e6:	89 83       	std	Y+1, r24	; 0x01
            min_index=i;
    c1e8:	8d 81       	ldd	r24, Y+5	; 0x05
    c1ea:	9e 81       	ldd	r25, Y+6	; 0x06
    c1ec:	9c 83       	std	Y+4, r25	; 0x04
    c1ee:	8b 83       	std	Y+3, r24	; 0x03
}

int min_dis(int dist[], int included[])
{
    int min=INF,min_index=0,i=0;
    for(i=0;i<36;i++)
    c1f0:	8d 81       	ldd	r24, Y+5	; 0x05
    c1f2:	9e 81       	ldd	r25, Y+6	; 0x06
    c1f4:	01 96       	adiw	r24, 0x01	; 1
    c1f6:	9e 83       	std	Y+6, r25	; 0x06
    c1f8:	8d 83       	std	Y+5, r24	; 0x05
    c1fa:	8d 81       	ldd	r24, Y+5	; 0x05
    c1fc:	9e 81       	ldd	r25, Y+6	; 0x06
    c1fe:	84 32       	cpi	r24, 0x24	; 36
    c200:	91 05       	cpc	r25, r1
    c202:	44 f2       	brlt	.-112    	; 0xc194 <min_dis+0x32>
        {
            min=dist[i];
            min_index=i;
        }
    }
    return min_index;
    c204:	8b 81       	ldd	r24, Y+3	; 0x03
    c206:	9c 81       	ldd	r25, Y+4	; 0x04
}
    c208:	2a 96       	adiw	r28, 0x0a	; 10
    c20a:	0f b6       	in	r0, 0x3f	; 63
    c20c:	f8 94       	cli
    c20e:	de bf       	out	0x3e, r29	; 62
    c210:	0f be       	out	0x3f, r0	; 63
    c212:	cd bf       	out	0x3d, r28	; 61
    c214:	df 91       	pop	r29
    c216:	cf 91       	pop	r28
    c218:	08 95       	ret

0000c21a <align>:

char align(int turn_count)
{
    c21a:	cf 93       	push	r28
    c21c:	df 93       	push	r29
    c21e:	0f 92       	push	r0
    c220:	0f 92       	push	r0
    c222:	cd b7       	in	r28, 0x3d	; 61
    c224:	de b7       	in	r29, 0x3e	; 62
    c226:	9a 83       	std	Y+2, r25	; 0x02
    c228:	89 83       	std	Y+1, r24	; 0x01
turn_count=turn_count%3;
    c22a:	89 81       	ldd	r24, Y+1	; 0x01
    c22c:	9a 81       	ldd	r25, Y+2	; 0x02
    c22e:	23 e0       	ldi	r18, 0x03	; 3
    c230:	30 e0       	ldi	r19, 0x00	; 0
    c232:	b9 01       	movw	r22, r18
    c234:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c238:	9a 83       	std	Y+2, r25	; 0x02
    c23a:	89 83       	std	Y+1, r24	; 0x01
if(turn_count==2||turn_count==-2)
    c23c:	89 81       	ldd	r24, Y+1	; 0x01
    c23e:	9a 81       	ldd	r25, Y+2	; 0x02
    c240:	82 30       	cpi	r24, 0x02	; 2
    c242:	91 05       	cpc	r25, r1
    c244:	31 f0       	breq	.+12     	; 0xc252 <align+0x38>
    c246:	89 81       	ldd	r24, Y+1	; 0x01
    c248:	9a 81       	ldd	r25, Y+2	; 0x02
    c24a:	2f ef       	ldi	r18, 0xFF	; 255
    c24c:	8e 3f       	cpi	r24, 0xFE	; 254
    c24e:	92 07       	cpc	r25, r18
    c250:	11 f4       	brne	.+4      	; 0xc256 <align+0x3c>
	return 'U';
    c252:	85 e5       	ldi	r24, 0x55	; 85
    c254:	1b c0       	rjmp	.+54     	; 0xc28c <align+0x72>
else if(turn_count==1||turn_count==-3)
    c256:	89 81       	ldd	r24, Y+1	; 0x01
    c258:	9a 81       	ldd	r25, Y+2	; 0x02
    c25a:	81 30       	cpi	r24, 0x01	; 1
    c25c:	91 05       	cpc	r25, r1
    c25e:	31 f0       	breq	.+12     	; 0xc26c <align+0x52>
    c260:	89 81       	ldd	r24, Y+1	; 0x01
    c262:	9a 81       	ldd	r25, Y+2	; 0x02
    c264:	2f ef       	ldi	r18, 0xFF	; 255
    c266:	8d 3f       	cpi	r24, 0xFD	; 253
    c268:	92 07       	cpc	r25, r18
    c26a:	11 f4       	brne	.+4      	; 0xc270 <align+0x56>
	return 'L';
    c26c:	8c e4       	ldi	r24, 0x4C	; 76
    c26e:	0e c0       	rjmp	.+28     	; 0xc28c <align+0x72>
else if(turn_count==-1||turn_count==3)
    c270:	89 81       	ldd	r24, Y+1	; 0x01
    c272:	9a 81       	ldd	r25, Y+2	; 0x02
    c274:	2f ef       	ldi	r18, 0xFF	; 255
    c276:	8f 3f       	cpi	r24, 0xFF	; 255
    c278:	92 07       	cpc	r25, r18
    c27a:	29 f0       	breq	.+10     	; 0xc286 <align+0x6c>
    c27c:	89 81       	ldd	r24, Y+1	; 0x01
    c27e:	9a 81       	ldd	r25, Y+2	; 0x02
    c280:	83 30       	cpi	r24, 0x03	; 3
    c282:	91 05       	cpc	r25, r1
    c284:	11 f4       	brne	.+4      	; 0xc28a <align+0x70>
	return 'R';
    c286:	82 e5       	ldi	r24, 0x52	; 82
    c288:	01 c0       	rjmp	.+2      	; 0xc28c <align+0x72>
else
	return 'N';
    c28a:	8e e4       	ldi	r24, 0x4E	; 78
}
    c28c:	0f 90       	pop	r0
    c28e:	0f 90       	pop	r0
    c290:	df 91       	pop	r29
    c292:	cf 91       	pop	r28
    c294:	08 95       	ret

0000c296 <rotate>:

char rotate(int current,int next,int *turn_count)
{
    c296:	cf 93       	push	r28
    c298:	df 93       	push	r29
    c29a:	cd b7       	in	r28, 0x3d	; 61
    c29c:	de b7       	in	r29, 0x3e	; 62
    c29e:	2a 97       	sbiw	r28, 0x0a	; 10
    c2a0:	0f b6       	in	r0, 0x3f	; 63
    c2a2:	f8 94       	cli
    c2a4:	de bf       	out	0x3e, r29	; 62
    c2a6:	0f be       	out	0x3f, r0	; 63
    c2a8:	cd bf       	out	0x3d, r28	; 61
    c2aa:	9e 83       	std	Y+6, r25	; 0x06
    c2ac:	8d 83       	std	Y+5, r24	; 0x05
    c2ae:	78 87       	std	Y+8, r23	; 0x08
    c2b0:	6f 83       	std	Y+7, r22	; 0x07
    c2b2:	5a 87       	std	Y+10, r21	; 0x0a
    c2b4:	49 87       	std	Y+9, r20	; 0x09
     int dir_x,dir_y;
     dir_x=(current/6)-(next/6);
    c2b6:	8d 81       	ldd	r24, Y+5	; 0x05
    c2b8:	9e 81       	ldd	r25, Y+6	; 0x06
    c2ba:	26 e0       	ldi	r18, 0x06	; 6
    c2bc:	30 e0       	ldi	r19, 0x00	; 0
    c2be:	b9 01       	movw	r22, r18
    c2c0:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c2c4:	9b 01       	movw	r18, r22
    c2c6:	8f 81       	ldd	r24, Y+7	; 0x07
    c2c8:	98 85       	ldd	r25, Y+8	; 0x08
    c2ca:	46 e0       	ldi	r20, 0x06	; 6
    c2cc:	50 e0       	ldi	r21, 0x00	; 0
    c2ce:	ba 01       	movw	r22, r20
    c2d0:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c2d4:	ab 01       	movw	r20, r22
    c2d6:	ca 01       	movw	r24, r20
    c2d8:	a9 01       	movw	r20, r18
    c2da:	48 1b       	sub	r20, r24
    c2dc:	59 0b       	sbc	r21, r25
    c2de:	ca 01       	movw	r24, r20
    c2e0:	9a 83       	std	Y+2, r25	; 0x02
    c2e2:	89 83       	std	Y+1, r24	; 0x01
     dir_y=(current%6)-(next%6);
    c2e4:	8d 81       	ldd	r24, Y+5	; 0x05
    c2e6:	9e 81       	ldd	r25, Y+6	; 0x06
    c2e8:	26 e0       	ldi	r18, 0x06	; 6
    c2ea:	30 e0       	ldi	r19, 0x00	; 0
    c2ec:	b9 01       	movw	r22, r18
    c2ee:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c2f2:	9c 01       	movw	r18, r24
    c2f4:	8f 81       	ldd	r24, Y+7	; 0x07
    c2f6:	98 85       	ldd	r25, Y+8	; 0x08
    c2f8:	46 e0       	ldi	r20, 0x06	; 6
    c2fa:	50 e0       	ldi	r21, 0x00	; 0
    c2fc:	ba 01       	movw	r22, r20
    c2fe:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c302:	f9 01       	movw	r30, r18
    c304:	e8 1b       	sub	r30, r24
    c306:	f9 0b       	sbc	r31, r25
    c308:	cf 01       	movw	r24, r30
    c30a:	9c 83       	std	Y+4, r25	; 0x04
    c30c:	8b 83       	std	Y+3, r24	; 0x03
     if(dir_y==0)
    c30e:	8b 81       	ldd	r24, Y+3	; 0x03
    c310:	9c 81       	ldd	r25, Y+4	; 0x04
    c312:	00 97       	sbiw	r24, 0x00	; 0
    c314:	a9 f4       	brne	.+42     	; 0xc340 <rotate+0xaa>
	 {
        if(dir_x<0)
    c316:	89 81       	ldd	r24, Y+1	; 0x01
    c318:	9a 81       	ldd	r25, Y+2	; 0x02
    c31a:	99 23       	and	r25, r25
    c31c:	7c f4       	brge	.+30     	; 0xc33c <rotate+0xa6>
		{
		// printf("Uturn\n");
			*turn_count+=2;
    c31e:	89 85       	ldd	r24, Y+9	; 0x09
    c320:	9a 85       	ldd	r25, Y+10	; 0x0a
    c322:	fc 01       	movw	r30, r24
    c324:	80 81       	ld	r24, Z
    c326:	91 81       	ldd	r25, Z+1	; 0x01
    c328:	9c 01       	movw	r18, r24
    c32a:	2e 5f       	subi	r18, 0xFE	; 254
    c32c:	3f 4f       	sbci	r19, 0xFF	; 255
    c32e:	89 85       	ldd	r24, Y+9	; 0x09
    c330:	9a 85       	ldd	r25, Y+10	; 0x0a
    c332:	fc 01       	movw	r30, r24
    c334:	31 83       	std	Z+1, r19	; 0x01
    c336:	20 83       	st	Z, r18
			return 'U';
    c338:	85 e5       	ldi	r24, 0x55	; 85
    c33a:	3d c0       	rjmp	.+122    	; 0xc3b6 <rotate+0x120>
			p_ny=0;
        }
        else
        {
        //printf("NC\n");
			return 'N';
    c33c:	8e e4       	ldi	r24, 0x4E	; 78
    c33e:	3b c0       	rjmp	.+118    	; 0xc3b6 <rotate+0x120>
        }
     }
     else if(dir_x==0)
    c340:	89 81       	ldd	r24, Y+1	; 0x01
    c342:	9a 81       	ldd	r25, Y+2	; 0x02
    c344:	00 97       	sbiw	r24, 0x00	; 0
    c346:	b1 f5       	brne	.+108    	; 0xc3b4 <rotate+0x11e>
     {
      if(dir_y<0)
    c348:	8b 81       	ldd	r24, Y+3	; 0x03
    c34a:	9c 81       	ldd	r25, Y+4	; 0x04
    c34c:	99 23       	and	r25, r25
    c34e:	cc f4       	brge	.+50     	; 0xc382 <rotate+0xec>
	  {
      //printf("Right\n");
		*turn_count=*turn_count+1;
    c350:	89 85       	ldd	r24, Y+9	; 0x09
    c352:	9a 85       	ldd	r25, Y+10	; 0x0a
    c354:	fc 01       	movw	r30, r24
    c356:	80 81       	ld	r24, Z
    c358:	91 81       	ldd	r25, Z+1	; 0x01
    c35a:	9c 01       	movw	r18, r24
    c35c:	2f 5f       	subi	r18, 0xFF	; 255
    c35e:	3f 4f       	sbci	r19, 0xFF	; 255
    c360:	89 85       	ldd	r24, Y+9	; 0x09
    c362:	9a 85       	ldd	r25, Y+10	; 0x0a
    c364:	fc 01       	movw	r30, r24
    c366:	31 83       	std	Z+1, r19	; 0x01
    c368:	20 83       	st	Z, r18
		p_nx=0;
    c36a:	10 92 34 04 	sts	0x0434, r1
    c36e:	10 92 33 04 	sts	0x0433, r1
		p_ny=1;
    c372:	81 e0       	ldi	r24, 0x01	; 1
    c374:	90 e0       	ldi	r25, 0x00	; 0
    c376:	90 93 36 04 	sts	0x0436, r25
    c37a:	80 93 35 04 	sts	0x0435, r24
		return 'R';
    c37e:	82 e5       	ldi	r24, 0x52	; 82
    c380:	1a c0       	rjmp	.+52     	; 0xc3b6 <rotate+0x120>
      }
      else
	  {
      //printf("Left\n");
		p_nx=0;
    c382:	10 92 34 04 	sts	0x0434, r1
    c386:	10 92 33 04 	sts	0x0433, r1
		p_ny=-1;
    c38a:	8f ef       	ldi	r24, 0xFF	; 255
    c38c:	9f ef       	ldi	r25, 0xFF	; 255
    c38e:	90 93 36 04 	sts	0x0436, r25
    c392:	80 93 35 04 	sts	0x0435, r24
		*turn_count=*turn_count-1;
    c396:	89 85       	ldd	r24, Y+9	; 0x09
    c398:	9a 85       	ldd	r25, Y+10	; 0x0a
    c39a:	fc 01       	movw	r30, r24
    c39c:	80 81       	ld	r24, Z
    c39e:	91 81       	ldd	r25, Z+1	; 0x01
    c3a0:	9c 01       	movw	r18, r24
    c3a2:	21 50       	subi	r18, 0x01	; 1
    c3a4:	30 40       	sbci	r19, 0x00	; 0
    c3a6:	89 85       	ldd	r24, Y+9	; 0x09
    c3a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    c3aa:	fc 01       	movw	r30, r24
    c3ac:	31 83       	std	Z+1, r19	; 0x01
    c3ae:	20 83       	st	Z, r18
		return 'L';
    c3b0:	8c e4       	ldi	r24, 0x4C	; 76
    c3b2:	01 c0       	rjmp	.+2      	; 0xc3b6 <rotate+0x120>
    c3b4:	00 c0       	rjmp	.+0      	; 0xc3b6 <rotate+0x120>
      }
    }
}
    c3b6:	2a 96       	adiw	r28, 0x0a	; 10
    c3b8:	0f b6       	in	r0, 0x3f	; 63
    c3ba:	f8 94       	cli
    c3bc:	de bf       	out	0x3e, r29	; 62
    c3be:	0f be       	out	0x3f, r0	; 63
    c3c0:	cd bf       	out	0x3d, r28	; 61
    c3c2:	df 91       	pop	r29
    c3c4:	cf 91       	pop	r28
    c3c6:	08 95       	ret

0000c3c8 <direction>:

char direction(int current,int next,int *turn_count)
{
    c3c8:	cf 93       	push	r28
    c3ca:	df 93       	push	r29
    c3cc:	cd b7       	in	r28, 0x3d	; 61
    c3ce:	de b7       	in	r29, 0x3e	; 62
    c3d0:	27 97       	sbiw	r28, 0x07	; 7
    c3d2:	0f b6       	in	r0, 0x3f	; 63
    c3d4:	f8 94       	cli
    c3d6:	de bf       	out	0x3e, r29	; 62
    c3d8:	0f be       	out	0x3f, r0	; 63
    c3da:	cd bf       	out	0x3d, r28	; 61
    c3dc:	9b 83       	std	Y+3, r25	; 0x03
    c3de:	8a 83       	std	Y+2, r24	; 0x02
    c3e0:	7d 83       	std	Y+5, r23	; 0x05
    c3e2:	6c 83       	std	Y+4, r22	; 0x04
    c3e4:	5f 83       	std	Y+7, r21	; 0x07
    c3e6:	4e 83       	std	Y+6, r20	; 0x06
     n_nx=(next/6)-(current/6);
    c3e8:	8c 81       	ldd	r24, Y+4	; 0x04
    c3ea:	9d 81       	ldd	r25, Y+5	; 0x05
    c3ec:	26 e0       	ldi	r18, 0x06	; 6
    c3ee:	30 e0       	ldi	r19, 0x00	; 0
    c3f0:	b9 01       	movw	r22, r18
    c3f2:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c3f6:	9b 01       	movw	r18, r22
    c3f8:	8a 81       	ldd	r24, Y+2	; 0x02
    c3fa:	9b 81       	ldd	r25, Y+3	; 0x03
    c3fc:	46 e0       	ldi	r20, 0x06	; 6
    c3fe:	50 e0       	ldi	r21, 0x00	; 0
    c400:	ba 01       	movw	r22, r20
    c402:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c406:	ab 01       	movw	r20, r22
    c408:	ca 01       	movw	r24, r20
    c40a:	a9 01       	movw	r20, r18
    c40c:	48 1b       	sub	r20, r24
    c40e:	59 0b       	sbc	r21, r25
    c410:	ca 01       	movw	r24, r20
    c412:	90 93 38 04 	sts	0x0438, r25
    c416:	80 93 37 04 	sts	0x0437, r24
     n_ny=(next%6)-(current%6);
    c41a:	8c 81       	ldd	r24, Y+4	; 0x04
    c41c:	9d 81       	ldd	r25, Y+5	; 0x05
    c41e:	26 e0       	ldi	r18, 0x06	; 6
    c420:	30 e0       	ldi	r19, 0x00	; 0
    c422:	b9 01       	movw	r22, r18
    c424:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c428:	9c 01       	movw	r18, r24
    c42a:	8a 81       	ldd	r24, Y+2	; 0x02
    c42c:	9b 81       	ldd	r25, Y+3	; 0x03
    c42e:	46 e0       	ldi	r20, 0x06	; 6
    c430:	50 e0       	ldi	r21, 0x00	; 0
    c432:	ba 01       	movw	r22, r20
    c434:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c438:	f9 01       	movw	r30, r18
    c43a:	e8 1b       	sub	r30, r24
    c43c:	f9 0b       	sbc	r31, r25
    c43e:	cf 01       	movw	r24, r30
    c440:	90 93 3a 04 	sts	0x043A, r25
    c444:	80 93 39 04 	sts	0x0439, r24
     char out='o';
    c448:	8f e6       	ldi	r24, 0x6F	; 111
    c44a:	89 83       	std	Y+1, r24	; 0x01
     if(n_nx==p_nx && n_ny==p_ny)
    c44c:	20 91 37 04 	lds	r18, 0x0437
    c450:	30 91 38 04 	lds	r19, 0x0438
    c454:	80 91 33 04 	lds	r24, 0x0433
    c458:	90 91 34 04 	lds	r25, 0x0434
    c45c:	28 17       	cp	r18, r24
    c45e:	39 07       	cpc	r19, r25
    c460:	71 f4       	brne	.+28     	; 0xc47e <direction+0xb6>
    c462:	20 91 39 04 	lds	r18, 0x0439
    c466:	30 91 3a 04 	lds	r19, 0x043A
    c46a:	80 91 35 04 	lds	r24, 0x0435
    c46e:	90 91 36 04 	lds	r25, 0x0436
    c472:	28 17       	cp	r18, r24
    c474:	39 07       	cpc	r19, r25
    c476:	19 f4       	brne	.+6      	; 0xc47e <direction+0xb6>
	 {
		out='n';
    c478:	8e e6       	ldi	r24, 0x6E	; 110
    c47a:	89 83       	std	Y+1, r24	; 0x01
    c47c:	82 c0       	rjmp	.+260    	; 0xc582 <direction+0x1ba>
     }
     else if(n_nx==(-p_nx) && n_ny==(-p_ny))
    c47e:	80 91 33 04 	lds	r24, 0x0433
    c482:	90 91 34 04 	lds	r25, 0x0434
    c486:	22 27       	eor	r18, r18
    c488:	33 27       	eor	r19, r19
    c48a:	28 1b       	sub	r18, r24
    c48c:	39 0b       	sbc	r19, r25
    c48e:	80 91 37 04 	lds	r24, 0x0437
    c492:	90 91 38 04 	lds	r25, 0x0438
    c496:	28 17       	cp	r18, r24
    c498:	39 07       	cpc	r19, r25
    c49a:	91 f4       	brne	.+36     	; 0xc4c0 <direction+0xf8>
    c49c:	80 91 35 04 	lds	r24, 0x0435
    c4a0:	90 91 36 04 	lds	r25, 0x0436
    c4a4:	22 27       	eor	r18, r18
    c4a6:	33 27       	eor	r19, r19
    c4a8:	28 1b       	sub	r18, r24
    c4aa:	39 0b       	sbc	r19, r25
    c4ac:	80 91 39 04 	lds	r24, 0x0439
    c4b0:	90 91 3a 04 	lds	r25, 0x043A
    c4b4:	28 17       	cp	r18, r24
    c4b6:	39 07       	cpc	r19, r25
    c4b8:	19 f4       	brne	.+6      	; 0xc4c0 <direction+0xf8>
	 {
		//*turn_count+=2;
		out='n';
    c4ba:	8e e6       	ldi	r24, 0x6E	; 110
    c4bc:	89 83       	std	Y+1, r24	; 0x01
    c4be:	61 c0       	rjmp	.+194    	; 0xc582 <direction+0x1ba>
     }
     else if(p_nx!=0)
    c4c0:	80 91 33 04 	lds	r24, 0x0433
    c4c4:	90 91 34 04 	lds	r25, 0x0434
    c4c8:	00 97       	sbiw	r24, 0x00	; 0
    c4ca:	59 f1       	breq	.+86     	; 0xc522 <direction+0x15a>
	 {
		if((p_nx==n_ny ))
    c4cc:	20 91 33 04 	lds	r18, 0x0433
    c4d0:	30 91 34 04 	lds	r19, 0x0434
    c4d4:	80 91 39 04 	lds	r24, 0x0439
    c4d8:	90 91 3a 04 	lds	r25, 0x043A
    c4dc:	28 17       	cp	r18, r24
    c4de:	39 07       	cpc	r19, r25
    c4e0:	81 f4       	brne	.+32     	; 0xc502 <direction+0x13a>
		{
			*turn_count+=-1;
    c4e2:	8e 81       	ldd	r24, Y+6	; 0x06
    c4e4:	9f 81       	ldd	r25, Y+7	; 0x07
    c4e6:	fc 01       	movw	r30, r24
    c4e8:	80 81       	ld	r24, Z
    c4ea:	91 81       	ldd	r25, Z+1	; 0x01
    c4ec:	9c 01       	movw	r18, r24
    c4ee:	21 50       	subi	r18, 0x01	; 1
    c4f0:	30 40       	sbci	r19, 0x00	; 0
    c4f2:	8e 81       	ldd	r24, Y+6	; 0x06
    c4f4:	9f 81       	ldd	r25, Y+7	; 0x07
    c4f6:	fc 01       	movw	r30, r24
    c4f8:	31 83       	std	Z+1, r19	; 0x01
    c4fa:	20 83       	st	Z, r18
			out= 'l';
    c4fc:	8c e6       	ldi	r24, 0x6C	; 108
    c4fe:	89 83       	std	Y+1, r24	; 0x01
    c500:	40 c0       	rjmp	.+128    	; 0xc582 <direction+0x1ba>
		}
		else
		{
			*turn_count+=1;
    c502:	8e 81       	ldd	r24, Y+6	; 0x06
    c504:	9f 81       	ldd	r25, Y+7	; 0x07
    c506:	fc 01       	movw	r30, r24
    c508:	80 81       	ld	r24, Z
    c50a:	91 81       	ldd	r25, Z+1	; 0x01
    c50c:	9c 01       	movw	r18, r24
    c50e:	2f 5f       	subi	r18, 0xFF	; 255
    c510:	3f 4f       	sbci	r19, 0xFF	; 255
    c512:	8e 81       	ldd	r24, Y+6	; 0x06
    c514:	9f 81       	ldd	r25, Y+7	; 0x07
    c516:	fc 01       	movw	r30, r24
    c518:	31 83       	std	Z+1, r19	; 0x01
    c51a:	20 83       	st	Z, r18
			out= 'r';
    c51c:	82 e7       	ldi	r24, 0x72	; 114
    c51e:	89 83       	std	Y+1, r24	; 0x01
    c520:	30 c0       	rjmp	.+96     	; 0xc582 <direction+0x1ba>
		}
    }
    else if(p_ny!=0)
    c522:	80 91 35 04 	lds	r24, 0x0435
    c526:	90 91 36 04 	lds	r25, 0x0436
    c52a:	00 97       	sbiw	r24, 0x00	; 0
    c52c:	51 f1       	breq	.+84     	; 0xc582 <direction+0x1ba>
	{
		if(p_ny==n_nx)
    c52e:	20 91 35 04 	lds	r18, 0x0435
    c532:	30 91 36 04 	lds	r19, 0x0436
    c536:	80 91 37 04 	lds	r24, 0x0437
    c53a:	90 91 38 04 	lds	r25, 0x0438
    c53e:	28 17       	cp	r18, r24
    c540:	39 07       	cpc	r19, r25
    c542:	81 f4       	brne	.+32     	; 0xc564 <direction+0x19c>
		{
			*turn_count+=1;
    c544:	8e 81       	ldd	r24, Y+6	; 0x06
    c546:	9f 81       	ldd	r25, Y+7	; 0x07
    c548:	fc 01       	movw	r30, r24
    c54a:	80 81       	ld	r24, Z
    c54c:	91 81       	ldd	r25, Z+1	; 0x01
    c54e:	9c 01       	movw	r18, r24
    c550:	2f 5f       	subi	r18, 0xFF	; 255
    c552:	3f 4f       	sbci	r19, 0xFF	; 255
    c554:	8e 81       	ldd	r24, Y+6	; 0x06
    c556:	9f 81       	ldd	r25, Y+7	; 0x07
    c558:	fc 01       	movw	r30, r24
    c55a:	31 83       	std	Z+1, r19	; 0x01
    c55c:	20 83       	st	Z, r18
			out= 'r';
    c55e:	82 e7       	ldi	r24, 0x72	; 114
    c560:	89 83       	std	Y+1, r24	; 0x01
    c562:	0f c0       	rjmp	.+30     	; 0xc582 <direction+0x1ba>
		}
		else
		{
		*turn_count-=1;
    c564:	8e 81       	ldd	r24, Y+6	; 0x06
    c566:	9f 81       	ldd	r25, Y+7	; 0x07
    c568:	fc 01       	movw	r30, r24
    c56a:	80 81       	ld	r24, Z
    c56c:	91 81       	ldd	r25, Z+1	; 0x01
    c56e:	9c 01       	movw	r18, r24
    c570:	21 50       	subi	r18, 0x01	; 1
    c572:	30 40       	sbci	r19, 0x00	; 0
    c574:	8e 81       	ldd	r24, Y+6	; 0x06
    c576:	9f 81       	ldd	r25, Y+7	; 0x07
    c578:	fc 01       	movw	r30, r24
    c57a:	31 83       	std	Z+1, r19	; 0x01
    c57c:	20 83       	st	Z, r18
		out= 'l';
    c57e:	8c e6       	ldi	r24, 0x6C	; 108
    c580:	89 83       	std	Y+1, r24	; 0x01
		}
    }
    p_nx=n_nx;
    c582:	80 91 37 04 	lds	r24, 0x0437
    c586:	90 91 38 04 	lds	r25, 0x0438
    c58a:	90 93 34 04 	sts	0x0434, r25
    c58e:	80 93 33 04 	sts	0x0433, r24
    p_ny=n_ny;
    c592:	80 91 39 04 	lds	r24, 0x0439
    c596:	90 91 3a 04 	lds	r25, 0x043A
    c59a:	90 93 36 04 	sts	0x0436, r25
    c59e:	80 93 35 04 	sts	0x0435, r24
    return out;
    c5a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    c5a4:	27 96       	adiw	r28, 0x07	; 7
    c5a6:	0f b6       	in	r0, 0x3f	; 63
    c5a8:	f8 94       	cli
    c5aa:	de bf       	out	0x3e, r29	; 62
    c5ac:	0f be       	out	0x3f, r0	; 63
    c5ae:	cd bf       	out	0x3d, r28	; 61
    c5b0:	df 91       	pop	r29
    c5b2:	cf 91       	pop	r28
    c5b4:	08 95       	ret

0000c5b6 <sh_path>:

char* sh_path(int start, int end,int *count1)
{
    c5b6:	0f 93       	push	r16
    c5b8:	1f 93       	push	r17
    c5ba:	cf 93       	push	r28
    c5bc:	df 93       	push	r29
    c5be:	cd b7       	in	r28, 0x3d	; 61
    c5c0:	de b7       	in	r29, 0x3e	; 62
    c5c2:	c5 50       	subi	r28, 0x05	; 5
    c5c4:	d1 40       	sbci	r29, 0x01	; 1
    c5c6:	0f b6       	in	r0, 0x3f	; 63
    c5c8:	f8 94       	cli
    c5ca:	de bf       	out	0x3e, r29	; 62
    c5cc:	0f be       	out	0x3f, r0	; 63
    c5ce:	cd bf       	out	0x3d, r28	; 61
    c5d0:	9e 01       	movw	r18, r28
    c5d2:	20 50       	subi	r18, 0x00	; 0
    c5d4:	3f 4f       	sbci	r19, 0xFF	; 255
    c5d6:	f9 01       	movw	r30, r18
    c5d8:	91 83       	std	Z+1, r25	; 0x01
    c5da:	80 83       	st	Z, r24
    c5dc:	ce 01       	movw	r24, r28
    c5de:	8e 5f       	subi	r24, 0xFE	; 254
    c5e0:	9e 4f       	sbci	r25, 0xFE	; 254
    c5e2:	fc 01       	movw	r30, r24
    c5e4:	71 83       	std	Z+1, r23	; 0x01
    c5e6:	60 83       	st	Z, r22
    c5e8:	ce 01       	movw	r24, r28
    c5ea:	8c 5f       	subi	r24, 0xFC	; 252
    c5ec:	9e 4f       	sbci	r25, 0xFE	; 254
    c5ee:	fc 01       	movw	r30, r24
    c5f0:	51 83       	std	Z+1, r21	; 0x01
    c5f2:	40 83       	st	Z, r20
    int dist[36],parent[36];
    int count=0,turn_count=0,current=0,length=0,weight=1,u=0,v=0,i=0,j=0;
    c5f4:	1c 86       	std	Y+12, r1	; 0x0c
    c5f6:	1b 86       	std	Y+11, r1	; 0x0b
    c5f8:	ce 01       	movw	r24, r28
    c5fa:	8a 55       	subi	r24, 0x5A	; 90
    c5fc:	9f 4f       	sbci	r25, 0xFF	; 255
    c5fe:	fc 01       	movw	r30, r24
    c600:	11 82       	std	Z+1, r1	; 0x01
    c602:	10 82       	st	Z, r1
    c604:	1a 82       	std	Y+2, r1	; 0x02
    c606:	19 82       	std	Y+1, r1	; 0x01
    c608:	1c 82       	std	Y+4, r1	; 0x04
    c60a:	1b 82       	std	Y+3, r1	; 0x03
    c60c:	81 e0       	ldi	r24, 0x01	; 1
    c60e:	90 e0       	ldi	r25, 0x00	; 0
    c610:	9e 87       	std	Y+14, r25	; 0x0e
    c612:	8d 87       	std	Y+13, r24	; 0x0d
    c614:	18 8a       	std	Y+16, r1	; 0x10
    c616:	1f 86       	std	Y+15, r1	; 0x0f
    c618:	1a 8a       	std	Y+18, r1	; 0x12
    c61a:	19 8a       	std	Y+17, r1	; 0x11
    c61c:	1e 82       	std	Y+6, r1	; 0x06
    c61e:	1d 82       	std	Y+5, r1	; 0x05
    c620:	18 86       	std	Y+8, r1	; 0x08
    c622:	1f 82       	std	Y+7, r1	; 0x07
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    c624:	ce 01       	movw	r24, r28
    c626:	80 51       	subi	r24, 0x10	; 16
    c628:	9f 4f       	sbci	r25, 0xFF	; 255
    c62a:	20 e1       	ldi	r18, 0x10	; 16
    c62c:	fc 01       	movw	r30, r24
    c62e:	32 2f       	mov	r19, r18
    c630:	11 92       	st	Z+, r1
    c632:	3a 95       	dec	r19
    c634:	e9 f7       	brne	.-6      	; 0xc630 <sh_path+0x7a>
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    c636:	10 92 34 04 	sts	0x0434, r1
    c63a:	10 92 33 04 	sts	0x0433, r1
    c63e:	10 92 36 04 	sts	0x0436, r1
    c642:	10 92 35 04 	sts	0x0435, r1
    c646:	10 92 38 04 	sts	0x0438, r1
    c64a:	10 92 37 04 	sts	0x0437, r1
    c64e:	10 92 3a 04 	sts	0x043A, r1
    c652:	10 92 39 04 	sts	0x0439, r1
    for(i=0;i<36;i++)
    c656:	1e 82       	std	Y+6, r1	; 0x06
    c658:	1d 82       	std	Y+5, r1	; 0x05
    c65a:	2e c0       	rjmp	.+92     	; 0xc6b8 <sh_path+0x102>
	{
        dist[i]=INF;
    c65c:	8d 81       	ldd	r24, Y+5	; 0x05
    c65e:	9e 81       	ldd	r25, Y+6	; 0x06
    c660:	88 0f       	add	r24, r24
    c662:	99 1f       	adc	r25, r25
    c664:	9e 01       	movw	r18, r28
    c666:	2f 5f       	subi	r18, 0xFF	; 255
    c668:	3f 4f       	sbci	r19, 0xFF	; 255
    c66a:	82 0f       	add	r24, r18
    c66c:	93 1f       	adc	r25, r19
    c66e:	45 96       	adiw	r24, 0x15	; 21
    c670:	27 ee       	ldi	r18, 0xE7	; 231
    c672:	33 e0       	ldi	r19, 0x03	; 3
    c674:	fc 01       	movw	r30, r24
    c676:	31 83       	std	Z+1, r19	; 0x01
    c678:	20 83       	st	Z, r18
        included[i]=FALSE;
    c67a:	9e 01       	movw	r18, r28
    c67c:	28 55       	subi	r18, 0x58	; 88
    c67e:	3f 4f       	sbci	r19, 0xFF	; 255
    c680:	8d 81       	ldd	r24, Y+5	; 0x05
    c682:	9e 81       	ldd	r25, Y+6	; 0x06
    c684:	88 0f       	add	r24, r24
    c686:	99 1f       	adc	r25, r25
    c688:	82 0f       	add	r24, r18
    c68a:	93 1f       	adc	r25, r19
    c68c:	fc 01       	movw	r30, r24
    c68e:	11 82       	std	Z+1, r1	; 0x01
    c690:	10 82       	st	Z, r1
        parent[i]=INF;
    c692:	9e 01       	movw	r18, r28
    c694:	22 5a       	subi	r18, 0xA2	; 162
    c696:	3f 4f       	sbci	r19, 0xFF	; 255
    c698:	8d 81       	ldd	r24, Y+5	; 0x05
    c69a:	9e 81       	ldd	r25, Y+6	; 0x06
    c69c:	88 0f       	add	r24, r24
    c69e:	99 1f       	adc	r25, r25
    c6a0:	82 0f       	add	r24, r18
    c6a2:	93 1f       	adc	r25, r19
    c6a4:	27 ee       	ldi	r18, 0xE7	; 231
    c6a6:	33 e0       	ldi	r19, 0x03	; 3
    c6a8:	fc 01       	movw	r30, r24
    c6aa:	31 83       	std	Z+1, r19	; 0x01
    c6ac:	20 83       	st	Z, r18
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    for(i=0;i<36;i++)
    c6ae:	8d 81       	ldd	r24, Y+5	; 0x05
    c6b0:	9e 81       	ldd	r25, Y+6	; 0x06
    c6b2:	01 96       	adiw	r24, 0x01	; 1
    c6b4:	9e 83       	std	Y+6, r25	; 0x06
    c6b6:	8d 83       	std	Y+5, r24	; 0x05
    c6b8:	8d 81       	ldd	r24, Y+5	; 0x05
    c6ba:	9e 81       	ldd	r25, Y+6	; 0x06
    c6bc:	84 32       	cpi	r24, 0x24	; 36
    c6be:	91 05       	cpc	r25, r1
    c6c0:	6c f2       	brlt	.-102    	; 0xc65c <sh_path+0xa6>
	{
        dist[i]=INF;
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    c6c2:	ce 01       	movw	r24, r28
    c6c4:	80 50       	subi	r24, 0x00	; 0
    c6c6:	9f 4f       	sbci	r25, 0xFF	; 255
    c6c8:	fc 01       	movw	r30, r24
    c6ca:	80 81       	ld	r24, Z
    c6cc:	91 81       	ldd	r25, Z+1	; 0x01
    c6ce:	88 0f       	add	r24, r24
    c6d0:	99 1f       	adc	r25, r25
    c6d2:	9e 01       	movw	r18, r28
    c6d4:	2f 5f       	subi	r18, 0xFF	; 255
    c6d6:	3f 4f       	sbci	r19, 0xFF	; 255
    c6d8:	82 0f       	add	r24, r18
    c6da:	93 1f       	adc	r25, r19
    c6dc:	45 96       	adiw	r24, 0x15	; 21
    c6de:	fc 01       	movw	r30, r24
    c6e0:	11 82       	std	Z+1, r1	; 0x01
    c6e2:	10 82       	st	Z, r1
    parent[start]=start;
    c6e4:	9e 01       	movw	r18, r28
    c6e6:	22 5a       	subi	r18, 0xA2	; 162
    c6e8:	3f 4f       	sbci	r19, 0xFF	; 255
    c6ea:	ce 01       	movw	r24, r28
    c6ec:	80 50       	subi	r24, 0x00	; 0
    c6ee:	9f 4f       	sbci	r25, 0xFF	; 255
    c6f0:	fc 01       	movw	r30, r24
    c6f2:	80 81       	ld	r24, Z
    c6f4:	91 81       	ldd	r25, Z+1	; 0x01
    c6f6:	88 0f       	add	r24, r24
    c6f8:	99 1f       	adc	r25, r25
    c6fa:	82 0f       	add	r24, r18
    c6fc:	93 1f       	adc	r25, r19
    c6fe:	9e 01       	movw	r18, r28
    c700:	20 50       	subi	r18, 0x00	; 0
    c702:	3f 4f       	sbci	r19, 0xFF	; 255
    c704:	f9 01       	movw	r30, r18
    c706:	20 81       	ld	r18, Z
    c708:	31 81       	ldd	r19, Z+1	; 0x01
    c70a:	fc 01       	movw	r30, r24
    c70c:	31 83       	std	Z+1, r19	; 0x01
    c70e:	20 83       	st	Z, r18
    for(i=0;i<35;i++)
    c710:	1e 82       	std	Y+6, r1	; 0x06
    c712:	1d 82       	std	Y+5, r1	; 0x05
    c714:	01 c1       	rjmp	.+514    	; 0xc918 <sh_path+0x362>
	{
        u=min_dis(dist,included);
    c716:	ce 01       	movw	r24, r28
    c718:	46 96       	adiw	r24, 0x16	; 22
    c71a:	9e 01       	movw	r18, r28
    c71c:	28 55       	subi	r18, 0x58	; 88
    c71e:	3f 4f       	sbci	r19, 0xFF	; 255
    c720:	b9 01       	movw	r22, r18
    c722:	0e 94 b1 60 	call	0xc162	; 0xc162 <min_dis>
    c726:	98 8b       	std	Y+16, r25	; 0x10
    c728:	8f 87       	std	Y+15, r24	; 0x0f
    //    printf("%d\n",u);
        included[u]=TRUE;
    c72a:	9e 01       	movw	r18, r28
    c72c:	28 55       	subi	r18, 0x58	; 88
    c72e:	3f 4f       	sbci	r19, 0xFF	; 255
    c730:	8f 85       	ldd	r24, Y+15	; 0x0f
    c732:	98 89       	ldd	r25, Y+16	; 0x10
    c734:	88 0f       	add	r24, r24
    c736:	99 1f       	adc	r25, r25
    c738:	82 0f       	add	r24, r18
    c73a:	93 1f       	adc	r25, r19
    c73c:	21 e0       	ldi	r18, 0x01	; 1
    c73e:	30 e0       	ldi	r19, 0x00	; 0
    c740:	fc 01       	movw	r30, r24
    c742:	31 83       	std	Z+1, r19	; 0x01
    c744:	20 83       	st	Z, r18
        p_nx=u/6;
    c746:	8f 85       	ldd	r24, Y+15	; 0x0f
    c748:	98 89       	ldd	r25, Y+16	; 0x10
    c74a:	26 e0       	ldi	r18, 0x06	; 6
    c74c:	30 e0       	ldi	r19, 0x00	; 0
    c74e:	b9 01       	movw	r22, r18
    c750:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c754:	9b 01       	movw	r18, r22
    c756:	c9 01       	movw	r24, r18
    c758:	90 93 34 04 	sts	0x0434, r25
    c75c:	80 93 33 04 	sts	0x0433, r24
        p_ny=u%6;
    c760:	8f 85       	ldd	r24, Y+15	; 0x0f
    c762:	98 89       	ldd	r25, Y+16	; 0x10
    c764:	26 e0       	ldi	r18, 0x06	; 6
    c766:	30 e0       	ldi	r19, 0x00	; 0
    c768:	b9 01       	movw	r22, r18
    c76a:	0e 94 3d 6f 	call	0xde7a	; 0xde7a <__divmodhi4>
    c76e:	90 93 36 04 	sts	0x0436, r25
    c772:	80 93 35 04 	sts	0x0435, r24
        adjacent(p_nx,p_ny,adj);
    c776:	80 91 33 04 	lds	r24, 0x0433
    c77a:	90 91 34 04 	lds	r25, 0x0434
    c77e:	40 91 35 04 	lds	r20, 0x0435
    c782:	50 91 36 04 	lds	r21, 0x0436
    c786:	9e 01       	movw	r18, r28
    c788:	20 51       	subi	r18, 0x10	; 16
    c78a:	3f 4f       	sbci	r19, 0xFF	; 255
    c78c:	ba 01       	movw	r22, r20
    c78e:	a9 01       	movw	r20, r18
    c790:	0e 94 f2 5f 	call	0xbfe4	; 0xbfe4 <adjacent>
        for(j=0;j<4;j++)
    c794:	18 86       	std	Y+8, r1	; 0x08
    c796:	1f 82       	std	Y+7, r1	; 0x07
    c798:	b4 c0       	rjmp	.+360    	; 0xc902 <sh_path+0x34c>
		{
            if(adj[j][0]!=-1)
    c79a:	9e 01       	movw	r18, r28
    c79c:	20 51       	subi	r18, 0x10	; 16
    c79e:	3f 4f       	sbci	r19, 0xFF	; 255
    c7a0:	8f 81       	ldd	r24, Y+7	; 0x07
    c7a2:	98 85       	ldd	r25, Y+8	; 0x08
    c7a4:	88 0f       	add	r24, r24
    c7a6:	99 1f       	adc	r25, r25
    c7a8:	88 0f       	add	r24, r24
    c7aa:	99 1f       	adc	r25, r25
    c7ac:	82 0f       	add	r24, r18
    c7ae:	93 1f       	adc	r25, r19
    c7b0:	fc 01       	movw	r30, r24
    c7b2:	80 81       	ld	r24, Z
    c7b4:	91 81       	ldd	r25, Z+1	; 0x01
    c7b6:	ff ef       	ldi	r31, 0xFF	; 255
    c7b8:	8f 3f       	cpi	r24, 0xFF	; 255
    c7ba:	9f 07       	cpc	r25, r31
    c7bc:	09 f4       	brne	.+2      	; 0xc7c0 <sh_path+0x20a>
    c7be:	9c c0       	rjmp	.+312    	; 0xc8f8 <sh_path+0x342>
			{

                n_nx=adj[j][0];
    c7c0:	9e 01       	movw	r18, r28
    c7c2:	20 51       	subi	r18, 0x10	; 16
    c7c4:	3f 4f       	sbci	r19, 0xFF	; 255
    c7c6:	8f 81       	ldd	r24, Y+7	; 0x07
    c7c8:	98 85       	ldd	r25, Y+8	; 0x08
    c7ca:	88 0f       	add	r24, r24
    c7cc:	99 1f       	adc	r25, r25
    c7ce:	88 0f       	add	r24, r24
    c7d0:	99 1f       	adc	r25, r25
    c7d2:	82 0f       	add	r24, r18
    c7d4:	93 1f       	adc	r25, r19
    c7d6:	fc 01       	movw	r30, r24
    c7d8:	80 81       	ld	r24, Z
    c7da:	91 81       	ldd	r25, Z+1	; 0x01
    c7dc:	90 93 38 04 	sts	0x0438, r25
    c7e0:	80 93 37 04 	sts	0x0437, r24
                n_ny=adj[j][1];
    c7e4:	9e 01       	movw	r18, r28
    c7e6:	20 51       	subi	r18, 0x10	; 16
    c7e8:	3f 4f       	sbci	r19, 0xFF	; 255
    c7ea:	8f 81       	ldd	r24, Y+7	; 0x07
    c7ec:	98 85       	ldd	r25, Y+8	; 0x08
    c7ee:	88 0f       	add	r24, r24
    c7f0:	99 1f       	adc	r25, r25
    c7f2:	88 0f       	add	r24, r24
    c7f4:	99 1f       	adc	r25, r25
    c7f6:	82 0f       	add	r24, r18
    c7f8:	93 1f       	adc	r25, r19
    c7fa:	02 96       	adiw	r24, 0x02	; 2
    c7fc:	fc 01       	movw	r30, r24
    c7fe:	80 81       	ld	r24, Z
    c800:	91 81       	ldd	r25, Z+1	; 0x01
    c802:	90 93 3a 04 	sts	0x043A, r25
    c806:	80 93 39 04 	sts	0x0439, r24
                v=grid[n_nx][n_ny]-1;
    c80a:	20 91 37 04 	lds	r18, 0x0437
    c80e:	30 91 38 04 	lds	r19, 0x0438
    c812:	40 91 39 04 	lds	r20, 0x0439
    c816:	50 91 3a 04 	lds	r21, 0x043A
    c81a:	c9 01       	movw	r24, r18
    c81c:	88 0f       	add	r24, r24
    c81e:	99 1f       	adc	r25, r25
    c820:	82 0f       	add	r24, r18
    c822:	93 1f       	adc	r25, r19
    c824:	88 0f       	add	r24, r24
    c826:	99 1f       	adc	r25, r25
    c828:	84 0f       	add	r24, r20
    c82a:	95 1f       	adc	r25, r21
    c82c:	88 0f       	add	r24, r24
    c82e:	99 1f       	adc	r25, r25
    c830:	8e 5f       	subi	r24, 0xFE	; 254
    c832:	9d 4f       	sbci	r25, 0xFD	; 253
    c834:	fc 01       	movw	r30, r24
    c836:	80 81       	ld	r24, Z
    c838:	91 81       	ldd	r25, Z+1	; 0x01
    c83a:	01 97       	sbiw	r24, 0x01	; 1
    c83c:	9a 8b       	std	Y+18, r25	; 0x12
    c83e:	89 8b       	std	Y+17, r24	; 0x11
                //printf("%d  %d\n",n_nx,n_ny);
                if((included[v]==FALSE)&&(dist[v]>(dist[u]+weight)))   // d[u,v] > d[u,i]+d[i,v] here d[i,v] is always 1 for a grid
    c840:	9e 01       	movw	r18, r28
    c842:	28 55       	subi	r18, 0x58	; 88
    c844:	3f 4f       	sbci	r19, 0xFF	; 255
    c846:	89 89       	ldd	r24, Y+17	; 0x11
    c848:	9a 89       	ldd	r25, Y+18	; 0x12
    c84a:	88 0f       	add	r24, r24
    c84c:	99 1f       	adc	r25, r25
    c84e:	82 0f       	add	r24, r18
    c850:	93 1f       	adc	r25, r19
    c852:	fc 01       	movw	r30, r24
    c854:	80 81       	ld	r24, Z
    c856:	91 81       	ldd	r25, Z+1	; 0x01
    c858:	00 97       	sbiw	r24, 0x00	; 0
    c85a:	09 f0       	breq	.+2      	; 0xc85e <sh_path+0x2a8>
    c85c:	4d c0       	rjmp	.+154    	; 0xc8f8 <sh_path+0x342>
    c85e:	89 89       	ldd	r24, Y+17	; 0x11
    c860:	9a 89       	ldd	r25, Y+18	; 0x12
    c862:	88 0f       	add	r24, r24
    c864:	99 1f       	adc	r25, r25
    c866:	9e 01       	movw	r18, r28
    c868:	2f 5f       	subi	r18, 0xFF	; 255
    c86a:	3f 4f       	sbci	r19, 0xFF	; 255
    c86c:	82 0f       	add	r24, r18
    c86e:	93 1f       	adc	r25, r19
    c870:	45 96       	adiw	r24, 0x15	; 21
    c872:	fc 01       	movw	r30, r24
    c874:	20 81       	ld	r18, Z
    c876:	31 81       	ldd	r19, Z+1	; 0x01
    c878:	8f 85       	ldd	r24, Y+15	; 0x0f
    c87a:	98 89       	ldd	r25, Y+16	; 0x10
    c87c:	88 0f       	add	r24, r24
    c87e:	99 1f       	adc	r25, r25
    c880:	ae 01       	movw	r20, r28
    c882:	4f 5f       	subi	r20, 0xFF	; 255
    c884:	5f 4f       	sbci	r21, 0xFF	; 255
    c886:	84 0f       	add	r24, r20
    c888:	95 1f       	adc	r25, r21
    c88a:	45 96       	adiw	r24, 0x15	; 21
    c88c:	fc 01       	movw	r30, r24
    c88e:	40 81       	ld	r20, Z
    c890:	51 81       	ldd	r21, Z+1	; 0x01
    c892:	8d 85       	ldd	r24, Y+13	; 0x0d
    c894:	9e 85       	ldd	r25, Y+14	; 0x0e
    c896:	84 0f       	add	r24, r20
    c898:	95 1f       	adc	r25, r21
    c89a:	82 17       	cp	r24, r18
    c89c:	93 07       	cpc	r25, r19
    c89e:	64 f5       	brge	.+88     	; 0xc8f8 <sh_path+0x342>
                    {
						dist[v]=dist[u]+weight;
    c8a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    c8a2:	98 89       	ldd	r25, Y+16	; 0x10
    c8a4:	88 0f       	add	r24, r24
    c8a6:	99 1f       	adc	r25, r25
    c8a8:	9e 01       	movw	r18, r28
    c8aa:	2f 5f       	subi	r18, 0xFF	; 255
    c8ac:	3f 4f       	sbci	r19, 0xFF	; 255
    c8ae:	82 0f       	add	r24, r18
    c8b0:	93 1f       	adc	r25, r19
    c8b2:	45 96       	adiw	r24, 0x15	; 21
    c8b4:	fc 01       	movw	r30, r24
    c8b6:	20 81       	ld	r18, Z
    c8b8:	31 81       	ldd	r19, Z+1	; 0x01
    c8ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    c8bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    c8be:	28 0f       	add	r18, r24
    c8c0:	39 1f       	adc	r19, r25
    c8c2:	89 89       	ldd	r24, Y+17	; 0x11
    c8c4:	9a 89       	ldd	r25, Y+18	; 0x12
    c8c6:	88 0f       	add	r24, r24
    c8c8:	99 1f       	adc	r25, r25
    c8ca:	ae 01       	movw	r20, r28
    c8cc:	4f 5f       	subi	r20, 0xFF	; 255
    c8ce:	5f 4f       	sbci	r21, 0xFF	; 255
    c8d0:	84 0f       	add	r24, r20
    c8d2:	95 1f       	adc	r25, r21
    c8d4:	45 96       	adiw	r24, 0x15	; 21
    c8d6:	fc 01       	movw	r30, r24
    c8d8:	31 83       	std	Z+1, r19	; 0x01
    c8da:	20 83       	st	Z, r18
						parent[v]=u;
    c8dc:	9e 01       	movw	r18, r28
    c8de:	22 5a       	subi	r18, 0xA2	; 162
    c8e0:	3f 4f       	sbci	r19, 0xFF	; 255
    c8e2:	89 89       	ldd	r24, Y+17	; 0x11
    c8e4:	9a 89       	ldd	r25, Y+18	; 0x12
    c8e6:	88 0f       	add	r24, r24
    c8e8:	99 1f       	adc	r25, r25
    c8ea:	82 0f       	add	r24, r18
    c8ec:	93 1f       	adc	r25, r19
    c8ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    c8f0:	38 89       	ldd	r19, Y+16	; 0x10
    c8f2:	fc 01       	movw	r30, r24
    c8f4:	31 83       	std	Z+1, r19	; 0x01
    c8f6:	20 83       	st	Z, r18
    //    printf("%d\n",u);
        included[u]=TRUE;
        p_nx=u/6;
        p_ny=u%6;
        adjacent(p_nx,p_ny,adj);
        for(j=0;j<4;j++)
    c8f8:	8f 81       	ldd	r24, Y+7	; 0x07
    c8fa:	98 85       	ldd	r25, Y+8	; 0x08
    c8fc:	01 96       	adiw	r24, 0x01	; 1
    c8fe:	98 87       	std	Y+8, r25	; 0x08
    c900:	8f 83       	std	Y+7, r24	; 0x07
    c902:	8f 81       	ldd	r24, Y+7	; 0x07
    c904:	98 85       	ldd	r25, Y+8	; 0x08
    c906:	84 30       	cpi	r24, 0x04	; 4
    c908:	91 05       	cpc	r25, r1
    c90a:	0c f4       	brge	.+2      	; 0xc90e <sh_path+0x358>
    c90c:	46 cf       	rjmp	.-372    	; 0xc79a <sh_path+0x1e4>
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    parent[start]=start;
    for(i=0;i<35;i++)
    c90e:	8d 81       	ldd	r24, Y+5	; 0x05
    c910:	9e 81       	ldd	r25, Y+6	; 0x06
    c912:	01 96       	adiw	r24, 0x01	; 1
    c914:	9e 83       	std	Y+6, r25	; 0x06
    c916:	8d 83       	std	Y+5, r24	; 0x05
    c918:	8d 81       	ldd	r24, Y+5	; 0x05
    c91a:	9e 81       	ldd	r25, Y+6	; 0x06
    c91c:	83 32       	cpi	r24, 0x23	; 35
    c91e:	91 05       	cpc	r25, r1
    c920:	0c f4       	brge	.+2      	; 0xc924 <sh_path+0x36e>
    c922:	f9 ce       	rjmp	.-526    	; 0xc716 <sh_path+0x160>
                    }
            }
        }
    }

    p=(int*)malloc(sizeof(int));
    c924:	82 e0       	ldi	r24, 0x02	; 2
    c926:	90 e0       	ldi	r25, 0x00	; 0
    c928:	0e 94 50 6f 	call	0xdea0	; 0xdea0 <malloc>
    c92c:	9a 87       	std	Y+10, r25	; 0x0a
    c92e:	89 87       	std	Y+9, r24	; 0x09
    current=end;
    c930:	ce 01       	movw	r24, r28
    c932:	8e 5f       	subi	r24, 0xFE	; 254
    c934:	9e 4f       	sbci	r25, 0xFE	; 254
    c936:	fc 01       	movw	r30, r24
    c938:	80 81       	ld	r24, Z
    c93a:	91 81       	ldd	r25, Z+1	; 0x01
    c93c:	9a 83       	std	Y+2, r25	; 0x02
    c93e:	89 83       	std	Y+1, r24	; 0x01
    p[0]=current;
    c940:	89 85       	ldd	r24, Y+9	; 0x09
    c942:	9a 85       	ldd	r25, Y+10	; 0x0a
    c944:	29 81       	ldd	r18, Y+1	; 0x01
    c946:	3a 81       	ldd	r19, Y+2	; 0x02
    c948:	fc 01       	movw	r30, r24
    c94a:	31 83       	std	Z+1, r19	; 0x01
    c94c:	20 83       	st	Z, r18
    while(current!=start)
    c94e:	2d c0       	rjmp	.+90     	; 0xc9aa <sh_path+0x3f4>
	{
		length++;
    c950:	8b 81       	ldd	r24, Y+3	; 0x03
    c952:	9c 81       	ldd	r25, Y+4	; 0x04
    c954:	01 96       	adiw	r24, 0x01	; 1
    c956:	9c 83       	std	Y+4, r25	; 0x04
    c958:	8b 83       	std	Y+3, r24	; 0x03
		current=parent[current];
    c95a:	9e 01       	movw	r18, r28
    c95c:	22 5a       	subi	r18, 0xA2	; 162
    c95e:	3f 4f       	sbci	r19, 0xFF	; 255
    c960:	89 81       	ldd	r24, Y+1	; 0x01
    c962:	9a 81       	ldd	r25, Y+2	; 0x02
    c964:	88 0f       	add	r24, r24
    c966:	99 1f       	adc	r25, r25
    c968:	82 0f       	add	r24, r18
    c96a:	93 1f       	adc	r25, r19
    c96c:	fc 01       	movw	r30, r24
    c96e:	80 81       	ld	r24, Z
    c970:	91 81       	ldd	r25, Z+1	; 0x01
    c972:	9a 83       	std	Y+2, r25	; 0x02
    c974:	89 83       	std	Y+1, r24	; 0x01
		p=(int*)realloc(p,((length+1)*sizeof(int)));
    c976:	8b 81       	ldd	r24, Y+3	; 0x03
    c978:	9c 81       	ldd	r25, Y+4	; 0x04
    c97a:	01 96       	adiw	r24, 0x01	; 1
    c97c:	88 0f       	add	r24, r24
    c97e:	99 1f       	adc	r25, r25
    c980:	9c 01       	movw	r18, r24
    c982:	89 85       	ldd	r24, Y+9	; 0x09
    c984:	9a 85       	ldd	r25, Y+10	; 0x0a
    c986:	b9 01       	movw	r22, r18
    c988:	0e 94 7f 70 	call	0xe0fe	; 0xe0fe <realloc>
    c98c:	9a 87       	std	Y+10, r25	; 0x0a
    c98e:	89 87       	std	Y+9, r24	; 0x09
		p[length]=current;
    c990:	8b 81       	ldd	r24, Y+3	; 0x03
    c992:	9c 81       	ldd	r25, Y+4	; 0x04
    c994:	88 0f       	add	r24, r24
    c996:	99 1f       	adc	r25, r25
    c998:	29 85       	ldd	r18, Y+9	; 0x09
    c99a:	3a 85       	ldd	r19, Y+10	; 0x0a
    c99c:	82 0f       	add	r24, r18
    c99e:	93 1f       	adc	r25, r19
    c9a0:	29 81       	ldd	r18, Y+1	; 0x01
    c9a2:	3a 81       	ldd	r19, Y+2	; 0x02
    c9a4:	fc 01       	movw	r30, r24
    c9a6:	31 83       	std	Z+1, r19	; 0x01
    c9a8:	20 83       	st	Z, r18
    }

    p=(int*)malloc(sizeof(int));
    current=end;
    p[0]=current;
    while(current!=start)
    c9aa:	ce 01       	movw	r24, r28
    c9ac:	80 50       	subi	r24, 0x00	; 0
    c9ae:	9f 4f       	sbci	r25, 0xFF	; 255
    c9b0:	29 81       	ldd	r18, Y+1	; 0x01
    c9b2:	3a 81       	ldd	r19, Y+2	; 0x02
    c9b4:	fc 01       	movw	r30, r24
    c9b6:	80 81       	ld	r24, Z
    c9b8:	91 81       	ldd	r25, Z+1	; 0x01
    c9ba:	28 17       	cp	r18, r24
    c9bc:	39 07       	cpc	r19, r25
    c9be:	41 f6       	brne	.-112    	; 0xc950 <sh_path+0x39a>
		p=(int*)realloc(p,((length+1)*sizeof(int)));
		p[length]=current;
    }


    p_nx=-1,p_ny=0,n_nx=0,n_ny=0;// Starting with facing north
    c9c0:	8f ef       	ldi	r24, 0xFF	; 255
    c9c2:	9f ef       	ldi	r25, 0xFF	; 255
    c9c4:	90 93 34 04 	sts	0x0434, r25
    c9c8:	80 93 33 04 	sts	0x0433, r24
    c9cc:	10 92 36 04 	sts	0x0436, r1
    c9d0:	10 92 35 04 	sts	0x0435, r1
    c9d4:	10 92 38 04 	sts	0x0438, r1
    c9d8:	10 92 37 04 	sts	0x0437, r1
    c9dc:	10 92 3a 04 	sts	0x043A, r1
    c9e0:	10 92 39 04 	sts	0x0439, r1

    dir=rotate(p[length],p[length-1],&turn_count);
    c9e4:	8b 81       	ldd	r24, Y+3	; 0x03
    c9e6:	9c 81       	ldd	r25, Y+4	; 0x04
    c9e8:	88 0f       	add	r24, r24
    c9ea:	99 1f       	adc	r25, r25
    c9ec:	29 85       	ldd	r18, Y+9	; 0x09
    c9ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    c9f0:	82 0f       	add	r24, r18
    c9f2:	93 1f       	adc	r25, r19
    c9f4:	fc 01       	movw	r30, r24
    c9f6:	80 81       	ld	r24, Z
    c9f8:	91 81       	ldd	r25, Z+1	; 0x01
    c9fa:	2b 81       	ldd	r18, Y+3	; 0x03
    c9fc:	3c 81       	ldd	r19, Y+4	; 0x04
    c9fe:	21 50       	subi	r18, 0x01	; 1
    ca00:	30 40       	sbci	r19, 0x00	; 0
    ca02:	22 0f       	add	r18, r18
    ca04:	33 1f       	adc	r19, r19
    ca06:	49 85       	ldd	r20, Y+9	; 0x09
    ca08:	5a 85       	ldd	r21, Y+10	; 0x0a
    ca0a:	24 0f       	add	r18, r20
    ca0c:	35 1f       	adc	r19, r21
    ca0e:	f9 01       	movw	r30, r18
    ca10:	40 81       	ld	r20, Z
    ca12:	51 81       	ldd	r21, Z+1	; 0x01
    ca14:	9e 01       	movw	r18, r28
    ca16:	2a 55       	subi	r18, 0x5A	; 90
    ca18:	3f 4f       	sbci	r19, 0xFF	; 255
    ca1a:	ba 01       	movw	r22, r20
    ca1c:	a9 01       	movw	r20, r18
    ca1e:	0e 94 4b 61 	call	0xc296	; 0xc296 <rotate>
    ca22:	8b 8b       	std	Y+19, r24	; 0x13

    path=(char*)malloc((length+1)*sizeof(char *));
    ca24:	8b 81       	ldd	r24, Y+3	; 0x03
    ca26:	9c 81       	ldd	r25, Y+4	; 0x04
    ca28:	01 96       	adiw	r24, 0x01	; 1
    ca2a:	88 0f       	add	r24, r24
    ca2c:	99 1f       	adc	r25, r25
    ca2e:	0e 94 50 6f 	call	0xdea0	; 0xdea0 <malloc>
    ca32:	9d 8b       	std	Y+21, r25	; 0x15
    ca34:	8c 8b       	std	Y+20, r24	; 0x14
    path[0]=dir;
    ca36:	8c 89       	ldd	r24, Y+20	; 0x14
    ca38:	9d 89       	ldd	r25, Y+21	; 0x15
    ca3a:	2b 89       	ldd	r18, Y+19	; 0x13
    ca3c:	fc 01       	movw	r30, r24
    ca3e:	20 83       	st	Z, r18
    *count1=0;
    ca40:	ce 01       	movw	r24, r28
    ca42:	8c 5f       	subi	r24, 0xFC	; 252
    ca44:	9e 4f       	sbci	r25, 0xFE	; 254
    ca46:	fc 01       	movw	r30, r24
    ca48:	80 81       	ld	r24, Z
    ca4a:	91 81       	ldd	r25, Z+1	; 0x01
    ca4c:	fc 01       	movw	r30, r24
    ca4e:	11 82       	std	Z+1, r1	; 0x01
    ca50:	10 82       	st	Z, r1
    for(i=length-1;i>0;i--)
    ca52:	8b 81       	ldd	r24, Y+3	; 0x03
    ca54:	9c 81       	ldd	r25, Y+4	; 0x04
    ca56:	01 97       	sbiw	r24, 0x01	; 1
    ca58:	9e 83       	std	Y+6, r25	; 0x06
    ca5a:	8d 83       	std	Y+5, r24	; 0x05
    ca5c:	4a c0       	rjmp	.+148    	; 0xcaf2 <sh_path+0x53c>
	{
		*count1+=1;
    ca5e:	ce 01       	movw	r24, r28
    ca60:	8c 5f       	subi	r24, 0xFC	; 252
    ca62:	9e 4f       	sbci	r25, 0xFE	; 254
    ca64:	fc 01       	movw	r30, r24
    ca66:	80 81       	ld	r24, Z
    ca68:	91 81       	ldd	r25, Z+1	; 0x01
    ca6a:	fc 01       	movw	r30, r24
    ca6c:	80 81       	ld	r24, Z
    ca6e:	91 81       	ldd	r25, Z+1	; 0x01
    ca70:	9c 01       	movw	r18, r24
    ca72:	2f 5f       	subi	r18, 0xFF	; 255
    ca74:	3f 4f       	sbci	r19, 0xFF	; 255
    ca76:	ce 01       	movw	r24, r28
    ca78:	8c 5f       	subi	r24, 0xFC	; 252
    ca7a:	9e 4f       	sbci	r25, 0xFE	; 254
    ca7c:	fc 01       	movw	r30, r24
    ca7e:	80 81       	ld	r24, Z
    ca80:	91 81       	ldd	r25, Z+1	; 0x01
    ca82:	fc 01       	movw	r30, r24
    ca84:	31 83       	std	Z+1, r19	; 0x01
    ca86:	20 83       	st	Z, r18
		dir=direction(p[i],p[i-1],&turn_count);
    ca88:	8d 81       	ldd	r24, Y+5	; 0x05
    ca8a:	9e 81       	ldd	r25, Y+6	; 0x06
    ca8c:	88 0f       	add	r24, r24
    ca8e:	99 1f       	adc	r25, r25
    ca90:	29 85       	ldd	r18, Y+9	; 0x09
    ca92:	3a 85       	ldd	r19, Y+10	; 0x0a
    ca94:	82 0f       	add	r24, r18
    ca96:	93 1f       	adc	r25, r19
    ca98:	fc 01       	movw	r30, r24
    ca9a:	80 81       	ld	r24, Z
    ca9c:	91 81       	ldd	r25, Z+1	; 0x01
    ca9e:	2d 81       	ldd	r18, Y+5	; 0x05
    caa0:	3e 81       	ldd	r19, Y+6	; 0x06
    caa2:	21 50       	subi	r18, 0x01	; 1
    caa4:	30 40       	sbci	r19, 0x00	; 0
    caa6:	22 0f       	add	r18, r18
    caa8:	33 1f       	adc	r19, r19
    caaa:	49 85       	ldd	r20, Y+9	; 0x09
    caac:	5a 85       	ldd	r21, Y+10	; 0x0a
    caae:	24 0f       	add	r18, r20
    cab0:	35 1f       	adc	r19, r21
    cab2:	f9 01       	movw	r30, r18
    cab4:	40 81       	ld	r20, Z
    cab6:	51 81       	ldd	r21, Z+1	; 0x01
    cab8:	9e 01       	movw	r18, r28
    caba:	2a 55       	subi	r18, 0x5A	; 90
    cabc:	3f 4f       	sbci	r19, 0xFF	; 255
    cabe:	ba 01       	movw	r22, r20
    cac0:	a9 01       	movw	r20, r18
    cac2:	0e 94 e4 61 	call	0xc3c8	; 0xc3c8 <direction>
    cac6:	8b 8b       	std	Y+19, r24	; 0x13
		path[*count1]=dir;
    cac8:	ce 01       	movw	r24, r28
    caca:	8c 5f       	subi	r24, 0xFC	; 252
    cacc:	9e 4f       	sbci	r25, 0xFE	; 254
    cace:	fc 01       	movw	r30, r24
    cad0:	80 81       	ld	r24, Z
    cad2:	91 81       	ldd	r25, Z+1	; 0x01
    cad4:	fc 01       	movw	r30, r24
    cad6:	80 81       	ld	r24, Z
    cad8:	91 81       	ldd	r25, Z+1	; 0x01
    cada:	2c 89       	ldd	r18, Y+20	; 0x14
    cadc:	3d 89       	ldd	r19, Y+21	; 0x15
    cade:	82 0f       	add	r24, r18
    cae0:	93 1f       	adc	r25, r19
    cae2:	2b 89       	ldd	r18, Y+19	; 0x13
    cae4:	fc 01       	movw	r30, r24
    cae6:	20 83       	st	Z, r18
    dir=rotate(p[length],p[length-1],&turn_count);

    path=(char*)malloc((length+1)*sizeof(char *));
    path[0]=dir;
    *count1=0;
    for(i=length-1;i>0;i--)
    cae8:	8d 81       	ldd	r24, Y+5	; 0x05
    caea:	9e 81       	ldd	r25, Y+6	; 0x06
    caec:	01 97       	sbiw	r24, 0x01	; 1
    caee:	9e 83       	std	Y+6, r25	; 0x06
    caf0:	8d 83       	std	Y+5, r24	; 0x05
    caf2:	8d 81       	ldd	r24, Y+5	; 0x05
    caf4:	9e 81       	ldd	r25, Y+6	; 0x06
    caf6:	18 16       	cp	r1, r24
    caf8:	19 06       	cpc	r1, r25
    cafa:	0c f4       	brge	.+2      	; 0xcafe <sh_path+0x548>
    cafc:	b0 cf       	rjmp	.-160    	; 0xca5e <sh_path+0x4a8>
	{
		*count1+=1;
		dir=direction(p[i],p[i-1],&turn_count);
		path[*count1]=dir;
    }
    *count1+=1;
    cafe:	ce 01       	movw	r24, r28
    cb00:	8c 5f       	subi	r24, 0xFC	; 252
    cb02:	9e 4f       	sbci	r25, 0xFE	; 254
    cb04:	fc 01       	movw	r30, r24
    cb06:	80 81       	ld	r24, Z
    cb08:	91 81       	ldd	r25, Z+1	; 0x01
    cb0a:	fc 01       	movw	r30, r24
    cb0c:	80 81       	ld	r24, Z
    cb0e:	91 81       	ldd	r25, Z+1	; 0x01
    cb10:	9c 01       	movw	r18, r24
    cb12:	2f 5f       	subi	r18, 0xFF	; 255
    cb14:	3f 4f       	sbci	r19, 0xFF	; 255
    cb16:	ce 01       	movw	r24, r28
    cb18:	8c 5f       	subi	r24, 0xFC	; 252
    cb1a:	9e 4f       	sbci	r25, 0xFE	; 254
    cb1c:	fc 01       	movw	r30, r24
    cb1e:	80 81       	ld	r24, Z
    cb20:	91 81       	ldd	r25, Z+1	; 0x01
    cb22:	fc 01       	movw	r30, r24
    cb24:	31 83       	std	Z+1, r19	; 0x01
    cb26:	20 83       	st	Z, r18
    path[*count1]=align(turn_count);
    cb28:	ce 01       	movw	r24, r28
    cb2a:	8c 5f       	subi	r24, 0xFC	; 252
    cb2c:	9e 4f       	sbci	r25, 0xFE	; 254
    cb2e:	fc 01       	movw	r30, r24
    cb30:	80 81       	ld	r24, Z
    cb32:	91 81       	ldd	r25, Z+1	; 0x01
    cb34:	fc 01       	movw	r30, r24
    cb36:	80 81       	ld	r24, Z
    cb38:	91 81       	ldd	r25, Z+1	; 0x01
    cb3a:	2c 89       	ldd	r18, Y+20	; 0x14
    cb3c:	3d 89       	ldd	r19, Y+21	; 0x15
    cb3e:	89 01       	movw	r16, r18
    cb40:	08 0f       	add	r16, r24
    cb42:	19 1f       	adc	r17, r25
    cb44:	ce 01       	movw	r24, r28
    cb46:	8a 55       	subi	r24, 0x5A	; 90
    cb48:	9f 4f       	sbci	r25, 0xFF	; 255
    cb4a:	fc 01       	movw	r30, r24
    cb4c:	80 81       	ld	r24, Z
    cb4e:	91 81       	ldd	r25, Z+1	; 0x01
    cb50:	0e 94 0d 61 	call	0xc21a	; 0xc21a <align>
    cb54:	f8 01       	movw	r30, r16
    cb56:	80 83       	st	Z, r24
	*count1+=1;
    cb58:	ce 01       	movw	r24, r28
    cb5a:	8c 5f       	subi	r24, 0xFC	; 252
    cb5c:	9e 4f       	sbci	r25, 0xFE	; 254
    cb5e:	fc 01       	movw	r30, r24
    cb60:	80 81       	ld	r24, Z
    cb62:	91 81       	ldd	r25, Z+1	; 0x01
    cb64:	fc 01       	movw	r30, r24
    cb66:	80 81       	ld	r24, Z
    cb68:	91 81       	ldd	r25, Z+1	; 0x01
    cb6a:	9c 01       	movw	r18, r24
    cb6c:	2f 5f       	subi	r18, 0xFF	; 255
    cb6e:	3f 4f       	sbci	r19, 0xFF	; 255
    cb70:	ce 01       	movw	r24, r28
    cb72:	8c 5f       	subi	r24, 0xFC	; 252
    cb74:	9e 4f       	sbci	r25, 0xFE	; 254
    cb76:	fc 01       	movw	r30, r24
    cb78:	80 81       	ld	r24, Z
    cb7a:	91 81       	ldd	r25, Z+1	; 0x01
    cb7c:	fc 01       	movw	r30, r24
    cb7e:	31 83       	std	Z+1, r19	; 0x01
    cb80:	20 83       	st	Z, r18
	path[*count1]='\0';
    cb82:	ce 01       	movw	r24, r28
    cb84:	8c 5f       	subi	r24, 0xFC	; 252
    cb86:	9e 4f       	sbci	r25, 0xFE	; 254
    cb88:	fc 01       	movw	r30, r24
    cb8a:	80 81       	ld	r24, Z
    cb8c:	91 81       	ldd	r25, Z+1	; 0x01
    cb8e:	fc 01       	movw	r30, r24
    cb90:	80 81       	ld	r24, Z
    cb92:	91 81       	ldd	r25, Z+1	; 0x01
    cb94:	2c 89       	ldd	r18, Y+20	; 0x14
    cb96:	3d 89       	ldd	r19, Y+21	; 0x15
    cb98:	82 0f       	add	r24, r18
    cb9a:	93 1f       	adc	r25, r19
    cb9c:	fc 01       	movw	r30, r24
    cb9e:	10 82       	st	Z, r1
    free(p);
    cba0:	89 85       	ldd	r24, Y+9	; 0x09
    cba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    cba4:	0e 94 e6 6f 	call	0xdfcc	; 0xdfcc <free>
    return path;
    cba8:	8c 89       	ldd	r24, Y+20	; 0x14
    cbaa:	9d 89       	ldd	r25, Y+21	; 0x15
}
    cbac:	cb 5f       	subi	r28, 0xFB	; 251
    cbae:	de 4f       	sbci	r29, 0xFE	; 254
    cbb0:	0f b6       	in	r0, 0x3f	; 63
    cbb2:	f8 94       	cli
    cbb4:	de bf       	out	0x3e, r29	; 62
    cbb6:	0f be       	out	0x3f, r0	; 63
    cbb8:	cd bf       	out	0x3d, r28	; 61
    cbba:	df 91       	pop	r29
    cbbc:	cf 91       	pop	r28
    cbbe:	1f 91       	pop	r17
    cbc0:	0f 91       	pop	r16
    cbc2:	08 95       	ret

0000cbc4 <dijkstra>:
//printf("%c\n",path[i]);
//return 0;
//}

char* dijkstra(int start,int end,int *count)
{
    cbc4:	cf 93       	push	r28
    cbc6:	df 93       	push	r29
    cbc8:	cd b7       	in	r28, 0x3d	; 61
    cbca:	de b7       	in	r29, 0x3e	; 62
    cbcc:	2e 97       	sbiw	r28, 0x0e	; 14
    cbce:	0f b6       	in	r0, 0x3f	; 63
    cbd0:	f8 94       	cli
    cbd2:	de bf       	out	0x3e, r29	; 62
    cbd4:	0f be       	out	0x3f, r0	; 63
    cbd6:	cd bf       	out	0x3d, r28	; 61
    cbd8:	9a 87       	std	Y+10, r25	; 0x0a
    cbda:	89 87       	std	Y+9, r24	; 0x09
    cbdc:	7c 87       	std	Y+12, r23	; 0x0c
    cbde:	6b 87       	std	Y+11, r22	; 0x0b
    cbe0:	5e 87       	std	Y+14, r21	; 0x0e
    cbe2:	4d 87       	std	Y+13, r20	; 0x0d
	char *path;
	int i=0,j=0,m=31;
    cbe4:	1c 82       	std	Y+4, r1	; 0x04
    cbe6:	1b 82       	std	Y+3, r1	; 0x03
    cbe8:	1e 82       	std	Y+6, r1	; 0x06
    cbea:	1d 82       	std	Y+5, r1	; 0x05
    cbec:	8f e1       	ldi	r24, 0x1F	; 31
    cbee:	90 e0       	ldi	r25, 0x00	; 0
    cbf0:	98 87       	std	Y+8, r25	; 0x08
    cbf2:	8f 83       	std	Y+7, r24	; 0x07
		if(start==end)
    cbf4:	29 85       	ldd	r18, Y+9	; 0x09
    cbf6:	3a 85       	ldd	r19, Y+10	; 0x0a
    cbf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    cbfa:	9c 85       	ldd	r25, Y+12	; 0x0c
    cbfc:	28 17       	cp	r18, r24
    cbfe:	39 07       	cpc	r19, r25
    cc00:	89 f4       	brne	.+34     	; 0xcc24 <dijkstra+0x60>
    {
        path=(char*)malloc(2*sizeof(char));
    cc02:	82 e0       	ldi	r24, 0x02	; 2
    cc04:	90 e0       	ldi	r25, 0x00	; 0
    cc06:	0e 94 50 6f 	call	0xdea0	; 0xdea0 <malloc>
    cc0a:	9a 83       	std	Y+2, r25	; 0x02
    cc0c:	89 83       	std	Y+1, r24	; 0x01
        path[0]='N';
    cc0e:	89 81       	ldd	r24, Y+1	; 0x01
    cc10:	9a 81       	ldd	r25, Y+2	; 0x02
    cc12:	2e e4       	ldi	r18, 0x4E	; 78
    cc14:	fc 01       	movw	r30, r24
    cc16:	20 83       	st	Z, r18
        path[1]='\0';
    cc18:	89 81       	ldd	r24, Y+1	; 0x01
    cc1a:	9a 81       	ldd	r25, Y+2	; 0x02
    cc1c:	01 96       	adiw	r24, 0x01	; 1
    cc1e:	fc 01       	movw	r30, r24
    cc20:	10 82       	st	Z, r1
    cc22:	22 c0       	rjmp	.+68     	; 0xcc68 <dijkstra+0xa4>
    }
    else{
	start=transf[start];
    cc24:	89 85       	ldd	r24, Y+9	; 0x09
    cc26:	9a 85       	ldd	r25, Y+10	; 0x0a
    cc28:	88 0f       	add	r24, r24
    cc2a:	99 1f       	adc	r25, r25
    cc2c:	86 5b       	subi	r24, 0xB6	; 182
    cc2e:	9d 4f       	sbci	r25, 0xFD	; 253
    cc30:	fc 01       	movw	r30, r24
    cc32:	80 81       	ld	r24, Z
    cc34:	91 81       	ldd	r25, Z+1	; 0x01
    cc36:	9a 87       	std	Y+10, r25	; 0x0a
    cc38:	89 87       	std	Y+9, r24	; 0x09
	end=transf[end];
    cc3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    cc3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    cc3e:	88 0f       	add	r24, r24
    cc40:	99 1f       	adc	r25, r25
    cc42:	86 5b       	subi	r24, 0xB6	; 182
    cc44:	9d 4f       	sbci	r25, 0xFD	; 253
    cc46:	fc 01       	movw	r30, r24
    cc48:	80 81       	ld	r24, Z
    cc4a:	91 81       	ldd	r25, Z+1	; 0x01
    cc4c:	9c 87       	std	Y+12, r25	; 0x0c
    cc4e:	8b 87       	std	Y+11, r24	; 0x0b
	path=sh_path(start,end,count);}
    cc50:	89 85       	ldd	r24, Y+9	; 0x09
    cc52:	9a 85       	ldd	r25, Y+10	; 0x0a
    cc54:	4b 85       	ldd	r20, Y+11	; 0x0b
    cc56:	5c 85       	ldd	r21, Y+12	; 0x0c
    cc58:	2d 85       	ldd	r18, Y+13	; 0x0d
    cc5a:	3e 85       	ldd	r19, Y+14	; 0x0e
    cc5c:	ba 01       	movw	r22, r20
    cc5e:	a9 01       	movw	r20, r18
    cc60:	0e 94 db 62 	call	0xc5b6	; 0xc5b6 <sh_path>
    cc64:	9a 83       	std	Y+2, r25	; 0x02
    cc66:	89 83       	std	Y+1, r24	; 0x01
	return path;
    cc68:	89 81       	ldd	r24, Y+1	; 0x01
    cc6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    cc6c:	2e 96       	adiw	r28, 0x0e	; 14
    cc6e:	0f b6       	in	r0, 0x3f	; 63
    cc70:	f8 94       	cli
    cc72:	de bf       	out	0x3e, r29	; 62
    cc74:	0f be       	out	0x3f, r0	; 63
    cc76:	cd bf       	out	0x3d, r28	; 61
    cc78:	df 91       	pop	r29
    cc7a:	cf 91       	pop	r28
    cc7c:	08 95       	ret

0000cc7e <animals>:
{31,32,33,34,35,36}};

	int aniloc[20];
	int habloc[20];

	int animals(char a[2]){
    cc7e:	cf 93       	push	r28
    cc80:	df 93       	push	r29
    cc82:	cd b7       	in	r28, 0x3d	; 61
    cc84:	de b7       	in	r29, 0x3e	; 62
    cc86:	28 97       	sbiw	r28, 0x08	; 8
    cc88:	0f b6       	in	r0, 0x3f	; 63
    cc8a:	f8 94       	cli
    cc8c:	de bf       	out	0x3e, r29	; 62
    cc8e:	0f be       	out	0x3f, r0	; 63
    cc90:	cd bf       	out	0x3d, r28	; 61
    cc92:	98 87       	std	Y+8, r25	; 0x08
    cc94:	8f 83       	std	Y+7, r24	; 0x07
		//printf("-----%s\n",a);
		int animal=0,number=0,letter=0;
    cc96:	1e 82       	std	Y+6, r1	; 0x06
    cc98:	1d 82       	std	Y+5, r1	; 0x05
    cc9a:	1a 82       	std	Y+2, r1	; 0x02
    cc9c:	19 82       	std	Y+1, r1	; 0x01
    cc9e:	1c 82       	std	Y+4, r1	; 0x04
    cca0:	1b 82       	std	Y+3, r1	; 0x03
		if(a[0] >= 'A' && a[0] <= 'F')
    cca2:	8f 81       	ldd	r24, Y+7	; 0x07
    cca4:	98 85       	ldd	r25, Y+8	; 0x08
    cca6:	fc 01       	movw	r30, r24
    cca8:	80 81       	ld	r24, Z
    ccaa:	81 34       	cpi	r24, 0x41	; 65
    ccac:	80 f0       	brcs	.+32     	; 0xccce <animals+0x50>
    ccae:	8f 81       	ldd	r24, Y+7	; 0x07
    ccb0:	98 85       	ldd	r25, Y+8	; 0x08
    ccb2:	fc 01       	movw	r30, r24
    ccb4:	80 81       	ld	r24, Z
    ccb6:	87 34       	cpi	r24, 0x47	; 71
    ccb8:	50 f4       	brcc	.+20     	; 0xccce <animals+0x50>
		letter = a[0]+1 - 'A';
    ccba:	8f 81       	ldd	r24, Y+7	; 0x07
    ccbc:	98 85       	ldd	r25, Y+8	; 0x08
    ccbe:	fc 01       	movw	r30, r24
    ccc0:	80 81       	ld	r24, Z
    ccc2:	88 2f       	mov	r24, r24
    ccc4:	90 e0       	ldi	r25, 0x00	; 0
    ccc6:	80 54       	subi	r24, 0x40	; 64
    ccc8:	90 40       	sbci	r25, 0x00	; 0
    ccca:	9c 83       	std	Y+4, r25	; 0x04
    cccc:	8b 83       	std	Y+3, r24	; 0x03
		if(a[1] >='1' && a[1] <= '6')
    ccce:	8f 81       	ldd	r24, Y+7	; 0x07
    ccd0:	98 85       	ldd	r25, Y+8	; 0x08
    ccd2:	01 96       	adiw	r24, 0x01	; 1
    ccd4:	fc 01       	movw	r30, r24
    ccd6:	80 81       	ld	r24, Z
    ccd8:	81 33       	cpi	r24, 0x31	; 49
    ccda:	88 f0       	brcs	.+34     	; 0xccfe <animals+0x80>
    ccdc:	8f 81       	ldd	r24, Y+7	; 0x07
    ccde:	98 85       	ldd	r25, Y+8	; 0x08
    cce0:	01 96       	adiw	r24, 0x01	; 1
    cce2:	fc 01       	movw	r30, r24
    cce4:	80 81       	ld	r24, Z
    cce6:	87 33       	cpi	r24, 0x37	; 55
    cce8:	50 f4       	brcc	.+20     	; 0xccfe <animals+0x80>
		number = a[1] - '0';
    ccea:	8f 81       	ldd	r24, Y+7	; 0x07
    ccec:	98 85       	ldd	r25, Y+8	; 0x08
    ccee:	01 96       	adiw	r24, 0x01	; 1
    ccf0:	fc 01       	movw	r30, r24
    ccf2:	80 81       	ld	r24, Z
    ccf4:	88 2f       	mov	r24, r24
    ccf6:	90 e0       	ldi	r25, 0x00	; 0
    ccf8:	c0 97       	sbiw	r24, 0x30	; 48
    ccfa:	9a 83       	std	Y+2, r25	; 0x02
    ccfc:	89 83       	std	Y+1, r24	; 0x01

		animal = graph[number-1][letter-1];
    ccfe:	89 81       	ldd	r24, Y+1	; 0x01
    cd00:	9a 81       	ldd	r25, Y+2	; 0x02
    cd02:	9c 01       	movw	r18, r24
    cd04:	21 50       	subi	r18, 0x01	; 1
    cd06:	30 40       	sbci	r19, 0x00	; 0
    cd08:	8b 81       	ldd	r24, Y+3	; 0x03
    cd0a:	9c 81       	ldd	r25, Y+4	; 0x04
    cd0c:	ac 01       	movw	r20, r24
    cd0e:	41 50       	subi	r20, 0x01	; 1
    cd10:	50 40       	sbci	r21, 0x00	; 0
    cd12:	c9 01       	movw	r24, r18
    cd14:	88 0f       	add	r24, r24
    cd16:	99 1f       	adc	r25, r25
    cd18:	82 0f       	add	r24, r18
    cd1a:	93 1f       	adc	r25, r19
    cd1c:	88 0f       	add	r24, r24
    cd1e:	99 1f       	adc	r25, r25
    cd20:	84 0f       	add	r24, r20
    cd22:	95 1f       	adc	r25, r21
    cd24:	88 0f       	add	r24, r24
    cd26:	99 1f       	adc	r25, r25
    cd28:	8c 55       	subi	r24, 0x5C	; 92
    cd2a:	9d 4f       	sbci	r25, 0xFD	; 253
    cd2c:	fc 01       	movw	r30, r24
    cd2e:	80 81       	ld	r24, Z
    cd30:	91 81       	ldd	r25, Z+1	; 0x01
    cd32:	9e 83       	std	Y+6, r25	; 0x06
    cd34:	8d 83       	std	Y+5, r24	; 0x05
		// if(strcmp("A1",a)==0)
		// animal++;
		return animal;
    cd36:	8d 81       	ldd	r24, Y+5	; 0x05
    cd38:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    cd3a:	28 96       	adiw	r28, 0x08	; 8
    cd3c:	0f b6       	in	r0, 0x3f	; 63
    cd3e:	f8 94       	cli
    cd40:	de bf       	out	0x3e, r29	; 62
    cd42:	0f be       	out	0x3f, r0	; 63
    cd44:	cd bf       	out	0x3d, r28	; 61
    cd46:	df 91       	pop	r29
    cd48:	cf 91       	pop	r28
    cd4a:	08 95       	ret

0000cd4c <habitats>:

	int habitats(char h[2]){
    cd4c:	cf 93       	push	r28
    cd4e:	df 93       	push	r29
    cd50:	cd b7       	in	r28, 0x3d	; 61
    cd52:	de b7       	in	r29, 0x3e	; 62
    cd54:	28 97       	sbiw	r28, 0x08	; 8
    cd56:	0f b6       	in	r0, 0x3f	; 63
    cd58:	f8 94       	cli
    cd5a:	de bf       	out	0x3e, r29	; 62
    cd5c:	0f be       	out	0x3f, r0	; 63
    cd5e:	cd bf       	out	0x3d, r28	; 61
    cd60:	98 87       	std	Y+8, r25	; 0x08
    cd62:	8f 83       	std	Y+7, r24	; 0x07
		int i=0,m=0,habitat=0;
    cd64:	1a 82       	std	Y+2, r1	; 0x02
    cd66:	19 82       	std	Y+1, r1	; 0x01
    cd68:	1c 82       	std	Y+4, r1	; 0x04
    cd6a:	1b 82       	std	Y+3, r1	; 0x03
    cd6c:	1e 82       	std	Y+6, r1	; 0x06
    cd6e:	1d 82       	std	Y+5, r1	; 0x05
		for ( i = 0; h[i] != '\0'; i++)
    cd70:	1a 82       	std	Y+2, r1	; 0x02
    cd72:	19 82       	std	Y+1, r1	; 0x01
    cd74:	1f c0       	rjmp	.+62     	; 0xcdb4 <habitats+0x68>
		m = m * 10 + h[i] - '0';
    cd76:	8b 81       	ldd	r24, Y+3	; 0x03
    cd78:	9c 81       	ldd	r25, Y+4	; 0x04
    cd7a:	88 0f       	add	r24, r24
    cd7c:	99 1f       	adc	r25, r25
    cd7e:	9c 01       	movw	r18, r24
    cd80:	22 0f       	add	r18, r18
    cd82:	33 1f       	adc	r19, r19
    cd84:	22 0f       	add	r18, r18
    cd86:	33 1f       	adc	r19, r19
    cd88:	28 0f       	add	r18, r24
    cd8a:	39 1f       	adc	r19, r25
    cd8c:	89 81       	ldd	r24, Y+1	; 0x01
    cd8e:	9a 81       	ldd	r25, Y+2	; 0x02
    cd90:	4f 81       	ldd	r20, Y+7	; 0x07
    cd92:	58 85       	ldd	r21, Y+8	; 0x08
    cd94:	84 0f       	add	r24, r20
    cd96:	95 1f       	adc	r25, r21
    cd98:	fc 01       	movw	r30, r24
    cd9a:	80 81       	ld	r24, Z
    cd9c:	88 2f       	mov	r24, r24
    cd9e:	90 e0       	ldi	r25, 0x00	; 0
    cda0:	82 0f       	add	r24, r18
    cda2:	93 1f       	adc	r25, r19
    cda4:	c0 97       	sbiw	r24, 0x30	; 48
    cda6:	9c 83       	std	Y+4, r25	; 0x04
    cda8:	8b 83       	std	Y+3, r24	; 0x03
		return animal;
	}

	int habitats(char h[2]){
		int i=0,m=0,habitat=0;
		for ( i = 0; h[i] != '\0'; i++)
    cdaa:	89 81       	ldd	r24, Y+1	; 0x01
    cdac:	9a 81       	ldd	r25, Y+2	; 0x02
    cdae:	01 96       	adiw	r24, 0x01	; 1
    cdb0:	9a 83       	std	Y+2, r25	; 0x02
    cdb2:	89 83       	std	Y+1, r24	; 0x01
    cdb4:	89 81       	ldd	r24, Y+1	; 0x01
    cdb6:	9a 81       	ldd	r25, Y+2	; 0x02
    cdb8:	2f 81       	ldd	r18, Y+7	; 0x07
    cdba:	38 85       	ldd	r19, Y+8	; 0x08
    cdbc:	82 0f       	add	r24, r18
    cdbe:	93 1f       	adc	r25, r19
    cdc0:	fc 01       	movw	r30, r24
    cdc2:	80 81       	ld	r24, Z
    cdc4:	88 23       	and	r24, r24
    cdc6:	b9 f6       	brne	.-82     	; 0xcd76 <habitats+0x2a>
		m = m * 10 + h[i] - '0';

		if(m<=5)
    cdc8:	8b 81       	ldd	r24, Y+3	; 0x03
    cdca:	9c 81       	ldd	r25, Y+4	; 0x04
    cdcc:	86 30       	cpi	r24, 0x06	; 6
    cdce:	91 05       	cpc	r25, r1
    cdd0:	2c f4       	brge	.+10     	; 0xcddc <habitats+0x90>
		habitat = 1 + (m-1);
    cdd2:	8b 81       	ldd	r24, Y+3	; 0x03
    cdd4:	9c 81       	ldd	r25, Y+4	; 0x04
    cdd6:	9e 83       	std	Y+6, r25	; 0x06
    cdd8:	8d 83       	std	Y+5, r24	; 0x05
    cdda:	3f c0       	rjmp	.+126    	; 0xce5a <habitats+0x10e>
		else if(m>=6 && m<=10)
    cddc:	8b 81       	ldd	r24, Y+3	; 0x03
    cdde:	9c 81       	ldd	r25, Y+4	; 0x04
    cde0:	86 30       	cpi	r24, 0x06	; 6
    cde2:	91 05       	cpc	r25, r1
    cde4:	5c f0       	brlt	.+22     	; 0xcdfc <habitats+0xb0>
    cde6:	8b 81       	ldd	r24, Y+3	; 0x03
    cde8:	9c 81       	ldd	r25, Y+4	; 0x04
    cdea:	8b 30       	cpi	r24, 0x0B	; 11
    cdec:	91 05       	cpc	r25, r1
    cdee:	34 f4       	brge	.+12     	; 0xcdfc <habitats+0xb0>
		habitat = 2 + (m-1);
    cdf0:	8b 81       	ldd	r24, Y+3	; 0x03
    cdf2:	9c 81       	ldd	r25, Y+4	; 0x04
    cdf4:	01 96       	adiw	r24, 0x01	; 1
    cdf6:	9e 83       	std	Y+6, r25	; 0x06
    cdf8:	8d 83       	std	Y+5, r24	; 0x05
    cdfa:	2f c0       	rjmp	.+94     	; 0xce5a <habitats+0x10e>
		else if(m>=11 && m<=15)
    cdfc:	8b 81       	ldd	r24, Y+3	; 0x03
    cdfe:	9c 81       	ldd	r25, Y+4	; 0x04
    ce00:	8b 30       	cpi	r24, 0x0B	; 11
    ce02:	91 05       	cpc	r25, r1
    ce04:	5c f0       	brlt	.+22     	; 0xce1c <habitats+0xd0>
    ce06:	8b 81       	ldd	r24, Y+3	; 0x03
    ce08:	9c 81       	ldd	r25, Y+4	; 0x04
    ce0a:	80 31       	cpi	r24, 0x10	; 16
    ce0c:	91 05       	cpc	r25, r1
    ce0e:	34 f4       	brge	.+12     	; 0xce1c <habitats+0xd0>
		habitat = 3 + (m-1);
    ce10:	8b 81       	ldd	r24, Y+3	; 0x03
    ce12:	9c 81       	ldd	r25, Y+4	; 0x04
    ce14:	02 96       	adiw	r24, 0x02	; 2
    ce16:	9e 83       	std	Y+6, r25	; 0x06
    ce18:	8d 83       	std	Y+5, r24	; 0x05
    ce1a:	1f c0       	rjmp	.+62     	; 0xce5a <habitats+0x10e>
		else if(m>=16 && m<=20)
    ce1c:	8b 81       	ldd	r24, Y+3	; 0x03
    ce1e:	9c 81       	ldd	r25, Y+4	; 0x04
    ce20:	80 31       	cpi	r24, 0x10	; 16
    ce22:	91 05       	cpc	r25, r1
    ce24:	5c f0       	brlt	.+22     	; 0xce3c <habitats+0xf0>
    ce26:	8b 81       	ldd	r24, Y+3	; 0x03
    ce28:	9c 81       	ldd	r25, Y+4	; 0x04
    ce2a:	85 31       	cpi	r24, 0x15	; 21
    ce2c:	91 05       	cpc	r25, r1
    ce2e:	34 f4       	brge	.+12     	; 0xce3c <habitats+0xf0>
		habitat = 4 + (m-1);
    ce30:	8b 81       	ldd	r24, Y+3	; 0x03
    ce32:	9c 81       	ldd	r25, Y+4	; 0x04
    ce34:	03 96       	adiw	r24, 0x03	; 3
    ce36:	9e 83       	std	Y+6, r25	; 0x06
    ce38:	8d 83       	std	Y+5, r24	; 0x05
    ce3a:	0f c0       	rjmp	.+30     	; 0xce5a <habitats+0x10e>
		else if(m>=21 && m<=25)
    ce3c:	8b 81       	ldd	r24, Y+3	; 0x03
    ce3e:	9c 81       	ldd	r25, Y+4	; 0x04
    ce40:	85 31       	cpi	r24, 0x15	; 21
    ce42:	91 05       	cpc	r25, r1
    ce44:	54 f0       	brlt	.+20     	; 0xce5a <habitats+0x10e>
    ce46:	8b 81       	ldd	r24, Y+3	; 0x03
    ce48:	9c 81       	ldd	r25, Y+4	; 0x04
    ce4a:	8a 31       	cpi	r24, 0x1A	; 26
    ce4c:	91 05       	cpc	r25, r1
    ce4e:	2c f4       	brge	.+10     	; 0xce5a <habitats+0x10e>
		habitat = 5 + (m-1);
    ce50:	8b 81       	ldd	r24, Y+3	; 0x03
    ce52:	9c 81       	ldd	r25, Y+4	; 0x04
    ce54:	04 96       	adiw	r24, 0x04	; 4
    ce56:	9e 83       	std	Y+6, r25	; 0x06
    ce58:	8d 83       	std	Y+5, r24	; 0x05
		return habitat;
    ce5a:	8d 81       	ldd	r24, Y+5	; 0x05
    ce5c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    ce5e:	28 96       	adiw	r28, 0x08	; 8
    ce60:	0f b6       	in	r0, 0x3f	; 63
    ce62:	f8 94       	cli
    ce64:	de bf       	out	0x3e, r29	; 62
    ce66:	0f be       	out	0x3f, r0	; 63
    ce68:	cd bf       	out	0x3d, r28	; 61
    ce6a:	df 91       	pop	r29
    ce6c:	cf 91       	pop	r28
    ce6e:	08 95       	ret

0000ce70 <node_map>:

	void node_map(char *tokenstring,int type, int *len)
	{
    ce70:	cf 93       	push	r28
    ce72:	df 93       	push	r29
    ce74:	cd b7       	in	r28, 0x3d	; 61
    ce76:	de b7       	in	r29, 0x3e	; 62
    ce78:	63 97       	sbiw	r28, 0x13	; 19
    ce7a:	0f b6       	in	r0, 0x3f	; 63
    ce7c:	f8 94       	cli
    ce7e:	de bf       	out	0x3e, r29	; 62
    ce80:	0f be       	out	0x3f, r0	; 63
    ce82:	cd bf       	out	0x3d, r28	; 61
    ce84:	9f 87       	std	Y+15, r25	; 0x0f
    ce86:	8e 87       	std	Y+14, r24	; 0x0e
    ce88:	79 8b       	std	Y+17, r23	; 0x11
    ce8a:	68 8b       	std	Y+16, r22	; 0x10
    ce8c:	5b 8b       	std	Y+19, r21	; 0x13
    ce8e:	4a 8b       	std	Y+18, r20	; 0x12
		char a[2];
		char h[2];
		char seps[] = ", ";
    ce90:	ce 01       	movw	r24, r28
    ce92:	09 96       	adiw	r24, 0x09	; 9
    ce94:	2f ee       	ldi	r18, 0xEF	; 239
    ce96:	32 e0       	ldi	r19, 0x02	; 2
    ce98:	43 e0       	ldi	r20, 0x03	; 3
    ce9a:	f9 01       	movw	r30, r18
    ce9c:	00 80       	ld	r0, Z
    ce9e:	2f 5f       	subi	r18, 0xFF	; 255
    cea0:	3f 4f       	sbci	r19, 0xFF	; 255
    cea2:	fc 01       	movw	r30, r24
    cea4:	00 82       	st	Z, r0
    cea6:	01 96       	adiw	r24, 0x01	; 1
    cea8:	41 50       	subi	r20, 0x01	; 1
    ceaa:	44 23       	and	r20, r20
    ceac:	b1 f7       	brne	.-20     	; 0xce9a <node_map+0x2a>
		char* token;
		int var;
		int i = 0;
    ceae:	1c 82       	std	Y+4, r1	; 0x04
    ceb0:	1b 82       	std	Y+3, r1	; 0x03
		token = strtok (tokenstring, seps);
    ceb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    ceb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    ceb6:	9e 01       	movw	r18, r28
    ceb8:	27 5f       	subi	r18, 0xF7	; 247
    ceba:	3f 4f       	sbci	r19, 0xFF	; 255
    cebc:	b9 01       	movw	r22, r18
    cebe:	0e 94 5f 71 	call	0xe2be	; 0xe2be <strtok>
    cec2:	9a 83       	std	Y+2, r25	; 0x02
    cec4:	89 83       	std	Y+1, r24	; 0x01
		while (token != NULL)
    cec6:	4f c0       	rjmp	.+158    	; 0xcf66 <node_map+0xf6>
		{
			if(type==0)
    cec8:	88 89       	ldd	r24, Y+16	; 0x10
    ceca:	99 89       	ldd	r25, Y+17	; 0x11
    cecc:	00 97       	sbiw	r24, 0x00	; 0
    cece:	79 f4       	brne	.+30     	; 0xceee <node_map+0x7e>
			{//Animal
				aniloc[i]=animals(token);
    ced0:	89 81       	ldd	r24, Y+1	; 0x01
    ced2:	9a 81       	ldd	r25, Y+2	; 0x02
    ced4:	0e 94 3f 66 	call	0xcc7e	; 0xcc7e <animals>
    ced8:	9c 01       	movw	r18, r24
    ceda:	8b 81       	ldd	r24, Y+3	; 0x03
    cedc:	9c 81       	ldd	r25, Y+4	; 0x04
    cede:	88 0f       	add	r24, r24
    cee0:	99 1f       	adc	r25, r25
    cee2:	8a 53       	subi	r24, 0x3A	; 58
    cee4:	9b 4f       	sbci	r25, 0xFB	; 251
    cee6:	fc 01       	movw	r30, r24
    cee8:	31 83       	std	Z+1, r19	; 0x01
    ceea:	20 83       	st	Z, r18
    ceec:	0e c0       	rjmp	.+28     	; 0xcf0a <node_map+0x9a>
			}
			else
			{
				habloc[i]=habitats(token);
    ceee:	89 81       	ldd	r24, Y+1	; 0x01
    cef0:	9a 81       	ldd	r25, Y+2	; 0x02
    cef2:	0e 94 a6 66 	call	0xcd4c	; 0xcd4c <habitats>
    cef6:	9c 01       	movw	r18, r24
    cef8:	8b 81       	ldd	r24, Y+3	; 0x03
    cefa:	9c 81       	ldd	r25, Y+4	; 0x04
    cefc:	88 0f       	add	r24, r24
    cefe:	99 1f       	adc	r25, r25
    cf00:	85 5a       	subi	r24, 0xA5	; 165
    cf02:	9b 4f       	sbci	r25, 0xFB	; 251
    cf04:	fc 01       	movw	r30, r24
    cf06:	31 83       	std	Z+1, r19	; 0x01
    cf08:	20 83       	st	Z, r18
			}
			sscanf (token, "%d", &var);
    cf0a:	00 d0       	rcall	.+0      	; 0xcf0c <node_map+0x9c>
    cf0c:	00 d0       	rcall	.+0      	; 0xcf0e <node_map+0x9e>
    cf0e:	8d b7       	in	r24, 0x3d	; 61
    cf10:	9e b7       	in	r25, 0x3e	; 62
    cf12:	01 96       	adiw	r24, 0x01	; 1
    cf14:	29 81       	ldd	r18, Y+1	; 0x01
    cf16:	3a 81       	ldd	r19, Y+2	; 0x02
    cf18:	fc 01       	movw	r30, r24
    cf1a:	31 83       	std	Z+1, r19	; 0x01
    cf1c:	20 83       	st	Z, r18
    cf1e:	2c ee       	ldi	r18, 0xEC	; 236
    cf20:	32 e0       	ldi	r19, 0x02	; 2
    cf22:	fc 01       	movw	r30, r24
    cf24:	33 83       	std	Z+3, r19	; 0x03
    cf26:	22 83       	std	Z+2, r18	; 0x02
    cf28:	9e 01       	movw	r18, r28
    cf2a:	24 5f       	subi	r18, 0xF4	; 244
    cf2c:	3f 4f       	sbci	r19, 0xFF	; 255
    cf2e:	fc 01       	movw	r30, r24
    cf30:	35 83       	std	Z+5, r19	; 0x05
    cf32:	24 83       	std	Z+4, r18	; 0x04
    cf34:	0e 94 a6 71 	call	0xe34c	; 0xe34c <sscanf>
    cf38:	8d b7       	in	r24, 0x3d	; 61
    cf3a:	9e b7       	in	r25, 0x3e	; 62
    cf3c:	06 96       	adiw	r24, 0x06	; 6
    cf3e:	0f b6       	in	r0, 0x3f	; 63
    cf40:	f8 94       	cli
    cf42:	9e bf       	out	0x3e, r25	; 62
    cf44:	0f be       	out	0x3f, r0	; 63
    cf46:	8d bf       	out	0x3d, r24	; 61
			i++;
    cf48:	8b 81       	ldd	r24, Y+3	; 0x03
    cf4a:	9c 81       	ldd	r25, Y+4	; 0x04
    cf4c:	01 96       	adiw	r24, 0x01	; 1
    cf4e:	9c 83       	std	Y+4, r25	; 0x04
    cf50:	8b 83       	std	Y+3, r24	; 0x03
			token = strtok (NULL, seps);
    cf52:	9e 01       	movw	r18, r28
    cf54:	27 5f       	subi	r18, 0xF7	; 247
    cf56:	3f 4f       	sbci	r19, 0xFF	; 255
    cf58:	80 e0       	ldi	r24, 0x00	; 0
    cf5a:	90 e0       	ldi	r25, 0x00	; 0
    cf5c:	b9 01       	movw	r22, r18
    cf5e:	0e 94 5f 71 	call	0xe2be	; 0xe2be <strtok>
    cf62:	9a 83       	std	Y+2, r25	; 0x02
    cf64:	89 83       	std	Y+1, r24	; 0x01
		char seps[] = ", ";
		char* token;
		int var;
		int i = 0;
		token = strtok (tokenstring, seps);
		while (token != NULL)
    cf66:	89 81       	ldd	r24, Y+1	; 0x01
    cf68:	9a 81       	ldd	r25, Y+2	; 0x02
    cf6a:	00 97       	sbiw	r24, 0x00	; 0
    cf6c:	09 f0       	breq	.+2      	; 0xcf70 <node_map+0x100>
    cf6e:	ac cf       	rjmp	.-168    	; 0xcec8 <node_map+0x58>
			}
			sscanf (token, "%d", &var);
			i++;
			token = strtok (NULL, seps);
		}
		*len=i;
    cf70:	8a 89       	ldd	r24, Y+18	; 0x12
    cf72:	9b 89       	ldd	r25, Y+19	; 0x13
    cf74:	2b 81       	ldd	r18, Y+3	; 0x03
    cf76:	3c 81       	ldd	r19, Y+4	; 0x04
    cf78:	fc 01       	movw	r30, r24
    cf7a:	31 83       	std	Z+1, r19	; 0x01
    cf7c:	20 83       	st	Z, r18
	}
    cf7e:	63 96       	adiw	r28, 0x13	; 19
    cf80:	0f b6       	in	r0, 0x3f	; 63
    cf82:	f8 94       	cli
    cf84:	de bf       	out	0x3e, r29	; 62
    cf86:	0f be       	out	0x3f, r0	; 63
    cf88:	cd bf       	out	0x3d, r28	; 61
    cf8a:	df 91       	pop	r29
    cf8c:	cf 91       	pop	r28
    cf8e:	08 95       	ret

0000cf90 <uart2_init>:

//Function to configure LCD port


void uart2_init(void)
{
    cf90:	cf 93       	push	r28
    cf92:	df 93       	push	r29
    cf94:	cd b7       	in	r28, 0x3d	; 61
    cf96:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
    cf98:	81 ed       	ldi	r24, 0xD1	; 209
    cf9a:	90 e0       	ldi	r25, 0x00	; 0
    cf9c:	fc 01       	movw	r30, r24
    cf9e:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    cfa0:	80 ed       	ldi	r24, 0xD0	; 208
    cfa2:	90 e0       	ldi	r25, 0x00	; 0
    cfa4:	fc 01       	movw	r30, r24
    cfa6:	10 82       	st	Z, r1
	UCSR2C = 0x06;
    cfa8:	82 ed       	ldi	r24, 0xD2	; 210
    cfaa:	90 e0       	ldi	r25, 0x00	; 0
    cfac:	26 e0       	ldi	r18, 0x06	; 6
    cfae:	fc 01       	movw	r30, r24
    cfb0:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
    cfb2:	84 ed       	ldi	r24, 0xD4	; 212
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	2f e5       	ldi	r18, 0x5F	; 95
    cfb8:	fc 01       	movw	r30, r24
    cfba:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
    cfbc:	85 ed       	ldi	r24, 0xD5	; 213
    cfbe:	90 e0       	ldi	r25, 0x00	; 0
    cfc0:	fc 01       	movw	r30, r24
    cfc2:	10 82       	st	Z, r1
	UCSR2B = 0x98;
    cfc4:	81 ed       	ldi	r24, 0xD1	; 209
    cfc6:	90 e0       	ldi	r25, 0x00	; 0
    cfc8:	28 e9       	ldi	r18, 0x98	; 152
    cfca:	fc 01       	movw	r30, r24
    cfcc:	20 83       	st	Z, r18
}
    cfce:	df 91       	pop	r29
    cfd0:	cf 91       	pop	r28
    cfd2:	08 95       	ret

0000cfd4 <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{
    cfd4:	1f 92       	push	r1
    cfd6:	0f 92       	push	r0
    cfd8:	0f b6       	in	r0, 0x3f	; 63
    cfda:	0f 92       	push	r0
    cfdc:	00 90 5b 00 	lds	r0, 0x005B
    cfe0:	0f 92       	push	r0
    cfe2:	11 24       	eor	r1, r1
    cfe4:	2f 93       	push	r18
    cfe6:	3f 93       	push	r19
    cfe8:	4f 93       	push	r20
    cfea:	5f 93       	push	r21
    cfec:	6f 93       	push	r22
    cfee:	7f 93       	push	r23
    cff0:	8f 93       	push	r24
    cff2:	9f 93       	push	r25
    cff4:	af 93       	push	r26
    cff6:	bf 93       	push	r27
    cff8:	ef 93       	push	r30
    cffa:	ff 93       	push	r31
    cffc:	cf 93       	push	r28
    cffe:	df 93       	push	r29
    d000:	cd b7       	in	r28, 0x3d	; 61
    d002:	de b7       	in	r29, 0x3e	; 62
	data= UDR2;
    d004:	86 ed       	ldi	r24, 0xD6	; 214
    d006:	90 e0       	ldi	r25, 0x00	; 0
    d008:	fc 01       	movw	r30, r24
    d00a:	80 81       	ld	r24, Z
    d00c:	80 93 c2 04 	sts	0x04C2, r24
	if(data == 0x0A)
    d010:	80 91 c2 04 	lds	r24, 0x04C2
    d014:	8a 30       	cpi	r24, 0x0A	; 10
    d016:	61 f4       	brne	.+24     	; 0xd030 <__vector_51+0x5c>
	{
		pos = count;
    d018:	80 91 3b 04 	lds	r24, 0x043B
    d01c:	80 93 f2 02 	sts	0x02F2, r24
		count++;
    d020:	80 91 3b 04 	lds	r24, 0x043B
    d024:	8f 5f       	subi	r24, 0xFF	; 255
    d026:	80 93 3b 04 	sts	0x043B, r24
		flag = FALSE;
    d02a:	10 92 f3 02 	sts	0x02F3, r1
    d02e:	52 c0       	rjmp	.+164    	; 0xd0d4 <__vector_51+0x100>
	}
	else if(data == 0x23)
    d030:	80 91 c2 04 	lds	r24, 0x04C2
    d034:	83 32       	cpi	r24, 0x23	; 35
    d036:	91 f4       	brne	.+36     	; 0xd05c <__vector_51+0x88>
	{
		flag = 2;
    d038:	82 e0       	ldi	r24, 0x02	; 2
    d03a:	80 93 f3 02 	sts	0x02F3, r24
		strcpy(hab, tmp1);
    d03e:	87 e8       	ldi	r24, 0x87	; 135
    d040:	94 e0       	ldi	r25, 0x04	; 4
    d042:	22 ef       	ldi	r18, 0xF2	; 242
    d044:	34 e0       	ldi	r19, 0x04	; 4
    d046:	b9 01       	movw	r22, r18
    d048:	0e 94 78 71 	call	0xe2f0	; 0xe2f0 <strcpy>
		strcpy(ani, tmp2);
    d04c:	80 e4       	ldi	r24, 0x40	; 64
    d04e:	94 e0       	ldi	r25, 0x04	; 4
    d050:	22 ea       	ldi	r18, 0xA2	; 162
    d052:	34 e0       	ldi	r19, 0x04	; 4
    d054:	b9 01       	movw	r22, r18
    d056:	0e 94 78 71 	call	0xe2f0	; 0xe2f0 <strcpy>
    d05a:	3c c0       	rjmp	.+120    	; 0xd0d4 <__vector_51+0x100>
	}
	else if(count > pos && flag == FALSE)
    d05c:	90 91 3b 04 	lds	r25, 0x043B
    d060:	80 91 f2 02 	lds	r24, 0x02F2
    d064:	89 17       	cp	r24, r25
    d066:	d8 f4       	brcc	.+54     	; 0xd09e <__vector_51+0xca>
    d068:	80 91 f3 02 	lds	r24, 0x02F3
    d06c:	88 23       	and	r24, r24
    d06e:	b9 f4       	brne	.+46     	; 0xd09e <__vector_51+0xca>
	{
		tmp2[a]=data;
    d070:	80 91 3c 04 	lds	r24, 0x043C
    d074:	88 2f       	mov	r24, r24
    d076:	90 e0       	ldi	r25, 0x00	; 0
    d078:	20 91 c2 04 	lds	r18, 0x04C2
    d07c:	8e 55       	subi	r24, 0x5E	; 94
    d07e:	9b 4f       	sbci	r25, 0xFB	; 251
    d080:	fc 01       	movw	r30, r24
    d082:	20 83       	st	Z, r18
		a++;
    d084:	80 91 3c 04 	lds	r24, 0x043C
    d088:	8f 5f       	subi	r24, 0xFF	; 255
    d08a:	80 93 3c 04 	sts	0x043C, r24
		count++;
    d08e:	80 91 3b 04 	lds	r24, 0x043B
    d092:	8f 5f       	subi	r24, 0xFF	; 255
    d094:	80 93 3b 04 	sts	0x043B, r24
		flag = FALSE;
    d098:	10 92 f3 02 	sts	0x02F3, r1
    d09c:	1b c0       	rjmp	.+54     	; 0xd0d4 <__vector_51+0x100>
	}
	else if(flag==TRUE)
    d09e:	80 91 f3 02 	lds	r24, 0x02F3
    d0a2:	81 30       	cpi	r24, 0x01	; 1
    d0a4:	b9 f4       	brne	.+46     	; 0xd0d4 <__vector_51+0x100>
	{
		tmp1[h]=data;
    d0a6:	80 91 3d 04 	lds	r24, 0x043D
    d0aa:	88 2f       	mov	r24, r24
    d0ac:	90 e0       	ldi	r25, 0x00	; 0
    d0ae:	20 91 c2 04 	lds	r18, 0x04C2
    d0b2:	8e 50       	subi	r24, 0x0E	; 14
    d0b4:	9b 4f       	sbci	r25, 0xFB	; 251
    d0b6:	fc 01       	movw	r30, r24
    d0b8:	20 83       	st	Z, r18
		h++;
    d0ba:	80 91 3d 04 	lds	r24, 0x043D
    d0be:	8f 5f       	subi	r24, 0xFF	; 255
    d0c0:	80 93 3d 04 	sts	0x043D, r24
		count++;
    d0c4:	80 91 3b 04 	lds	r24, 0x043B
    d0c8:	8f 5f       	subi	r24, 0xFF	; 255
    d0ca:	80 93 3b 04 	sts	0x043B, r24
		flag = TRUE;
    d0ce:	81 e0       	ldi	r24, 0x01	; 1
    d0d0:	80 93 f3 02 	sts	0x02F3, r24
	}
}
    d0d4:	df 91       	pop	r29
    d0d6:	cf 91       	pop	r28
    d0d8:	ff 91       	pop	r31
    d0da:	ef 91       	pop	r30
    d0dc:	bf 91       	pop	r27
    d0de:	af 91       	pop	r26
    d0e0:	9f 91       	pop	r25
    d0e2:	8f 91       	pop	r24
    d0e4:	7f 91       	pop	r23
    d0e6:	6f 91       	pop	r22
    d0e8:	5f 91       	pop	r21
    d0ea:	4f 91       	pop	r20
    d0ec:	3f 91       	pop	r19
    d0ee:	2f 91       	pop	r18
    d0f0:	0f 90       	pop	r0
    d0f2:	00 92 5b 00 	sts	0x005B, r0
    d0f6:	0f 90       	pop	r0
    d0f8:	0f be       	out	0x3f, r0	; 63
    d0fa:	0f 90       	pop	r0
    d0fc:	1f 90       	pop	r1
    d0fe:	18 95       	reti

0000d100 <interrupt_switch_config>:
#include "node.c"
#include "uart.c"

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
    d100:	cf 93       	push	r28
    d102:	df 93       	push	r29
    d104:	cd b7       	in	r28, 0x3d	; 61
    d106:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
    d108:	8d e2       	ldi	r24, 0x2D	; 45
    d10a:	90 e0       	ldi	r25, 0x00	; 0
    d10c:	2d e2       	ldi	r18, 0x2D	; 45
    d10e:	30 e0       	ldi	r19, 0x00	; 0
    d110:	f9 01       	movw	r30, r18
    d112:	20 81       	ld	r18, Z
    d114:	2f 77       	andi	r18, 0x7F	; 127
    d116:	fc 01       	movw	r30, r24
    d118:	20 83       	st	Z, r18
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
    d11a:	8e e2       	ldi	r24, 0x2E	; 46
    d11c:	90 e0       	ldi	r25, 0x00	; 0
    d11e:	2e e2       	ldi	r18, 0x2E	; 46
    d120:	30 e0       	ldi	r19, 0x00	; 0
    d122:	f9 01       	movw	r30, r18
    d124:	20 81       	ld	r18, Z
    d126:	20 68       	ori	r18, 0x80	; 128
    d128:	fc 01       	movw	r30, r24
    d12a:	20 83       	st	Z, r18
}
    d12c:	df 91       	pop	r29
    d12e:	cf 91       	pop	r28
    d130:	08 95       	ret

0000d132 <pick_assign>:

void pick_assign(int nxt_node){
    d132:	cf 93       	push	r28
    d134:	df 93       	push	r29
    d136:	cd b7       	in	r28, 0x3d	; 61
    d138:	de b7       	in	r29, 0x3e	; 62
    d13a:	e4 97       	sbiw	r28, 0x34	; 52
    d13c:	0f b6       	in	r0, 0x3f	; 63
    d13e:	f8 94       	cli
    d140:	de bf       	out	0x3e, r29	; 62
    d142:	0f be       	out	0x3f, r0	; 63
    d144:	cd bf       	out	0x3d, r28	; 61
    d146:	9c ab       	sts	0x5c, r25
    d148:	8b ab       	sts	0x5b, r24
int left[6]={7,13,19,25,99,99};
    d14a:	ce 01       	movw	r24, r28
    d14c:	03 96       	adiw	r24, 0x03	; 3
    d14e:	24 ef       	ldi	r18, 0xF4	; 244
    d150:	32 e0       	ldi	r19, 0x02	; 2
    d152:	4c e0       	ldi	r20, 0x0C	; 12
    d154:	f9 01       	movw	r30, r18
    d156:	00 80       	ld	r0, Z
    d158:	2f 5f       	subi	r18, 0xFF	; 255
    d15a:	3f 4f       	sbci	r19, 0xFF	; 255
    d15c:	fc 01       	movw	r30, r24
    d15e:	00 82       	st	Z, r0
    d160:	01 96       	adiw	r24, 0x01	; 1
    d162:	41 50       	subi	r20, 0x01	; 1
    d164:	44 23       	and	r20, r20
    d166:	b1 f7       	brne	.-20     	; 0xd154 <pick_assign+0x22>
int right[6]={12,18,24,30,99,99};
    d168:	ce 01       	movw	r24, r28
    d16a:	0f 96       	adiw	r24, 0x0f	; 15
    d16c:	20 e0       	ldi	r18, 0x00	; 0
    d16e:	33 e0       	ldi	r19, 0x03	; 3
    d170:	4c e0       	ldi	r20, 0x0C	; 12
    d172:	f9 01       	movw	r30, r18
    d174:	00 80       	ld	r0, Z
    d176:	2f 5f       	subi	r18, 0xFF	; 255
    d178:	3f 4f       	sbci	r19, 0xFF	; 255
    d17a:	fc 01       	movw	r30, r24
    d17c:	00 82       	st	Z, r0
    d17e:	01 96       	adiw	r24, 0x01	; 1
    d180:	41 50       	subi	r20, 0x01	; 1
    d182:	44 23       	and	r20, r20
    d184:	b1 f7       	brne	.-20     	; 0xd172 <pick_assign+0x40>
int back[6]={2,3,4,5,99,99};
    d186:	ce 01       	movw	r24, r28
    d188:	4b 96       	adiw	r24, 0x1b	; 27
    d18a:	2c e0       	ldi	r18, 0x0C	; 12
    d18c:	33 e0       	ldi	r19, 0x03	; 3
    d18e:	4c e0       	ldi	r20, 0x0C	; 12
    d190:	f9 01       	movw	r30, r18
    d192:	00 80       	ld	r0, Z
    d194:	2f 5f       	subi	r18, 0xFF	; 255
    d196:	3f 4f       	sbci	r19, 0xFF	; 255
    d198:	fc 01       	movw	r30, r24
    d19a:	00 82       	st	Z, r0
    d19c:	01 96       	adiw	r24, 0x01	; 1
    d19e:	41 50       	subi	r20, 0x01	; 1
    d1a0:	44 23       	and	r20, r20
    d1a2:	b1 f7       	brne	.-20     	; 0xd190 <pick_assign+0x5e>
int front[6]={32,33,34,35,99,99};
    d1a4:	ce 01       	movw	r24, r28
    d1a6:	87 96       	adiw	r24, 0x27	; 39
    d1a8:	28 e1       	ldi	r18, 0x18	; 24
    d1aa:	33 e0       	ldi	r19, 0x03	; 3
    d1ac:	4c e0       	ldi	r20, 0x0C	; 12
    d1ae:	f9 01       	movw	r30, r18
    d1b0:	00 80       	ld	r0, Z
    d1b2:	2f 5f       	subi	r18, 0xFF	; 255
    d1b4:	3f 4f       	sbci	r19, 0xFF	; 255
    d1b6:	fc 01       	movw	r30, r24
    d1b8:	00 82       	st	Z, r0
    d1ba:	01 96       	adiw	r24, 0x01	; 1
    d1bc:	41 50       	subi	r20, 0x01	; 1
    d1be:	44 23       	and	r20, r20
    d1c0:	b1 f7       	brne	.-20     	; 0xd1ae <pick_assign+0x7c>
int temp_var=0;
    d1c2:	1a 82       	std	Y+2, r1	; 0x02
    d1c4:	19 82       	std	Y+1, r1	; 0x01
for(temp_var=0;temp_var<6;temp_var++){
    d1c6:	1a 82       	std	Y+2, r1	; 0x02
    d1c8:	19 82       	std	Y+1, r1	; 0x01
    d1ca:	f9 c0       	rjmp	.+498    	; 0xd3be <pick_assign+0x28c>
    if(left[temp_var]==nxt_node)
    d1cc:	89 81       	ldd	r24, Y+1	; 0x01
    d1ce:	9a 81       	ldd	r25, Y+2	; 0x02
    d1d0:	88 0f       	add	r24, r24
    d1d2:	99 1f       	adc	r25, r25
    d1d4:	9e 01       	movw	r18, r28
    d1d6:	2f 5f       	subi	r18, 0xFF	; 255
    d1d8:	3f 4f       	sbci	r19, 0xFF	; 255
    d1da:	82 0f       	add	r24, r18
    d1dc:	93 1f       	adc	r25, r19
    d1de:	02 96       	adiw	r24, 0x02	; 2
    d1e0:	fc 01       	movw	r30, r24
    d1e2:	20 81       	ld	r18, Z
    d1e4:	31 81       	ldd	r19, Z+1	; 0x01
    d1e6:	8b a9       	sts	0x4b, r24
    d1e8:	9c a9       	sts	0x4c, r25
    d1ea:	28 17       	cp	r18, r24
    d1ec:	39 07       	cpc	r19, r25
    d1ee:	99 f4       	brne	.+38     	; 0xd216 <pick_assign+0xe4>
        {
        strcat(master_path,"1");
    d1f0:	89 e6       	ldi	r24, 0x69	; 105
    d1f2:	93 e0       	ldi	r25, 0x03	; 3
    d1f4:	9c 01       	movw	r18, r24
    d1f6:	f9 01       	movw	r30, r18
    d1f8:	01 90       	ld	r0, Z+
    d1fa:	00 20       	and	r0, r0
    d1fc:	e9 f7       	brne	.-6      	; 0xd1f8 <pick_assign+0xc6>
    d1fe:	cf 01       	movw	r24, r30
    d200:	01 97       	sbiw	r24, 0x01	; 1
    d202:	82 1b       	sub	r24, r18
    d204:	93 0b       	sbc	r25, r19
    d206:	87 59       	subi	r24, 0x97	; 151
    d208:	9c 4f       	sbci	r25, 0xFC	; 252
    d20a:	21 e3       	ldi	r18, 0x31	; 49
    d20c:	30 e0       	ldi	r19, 0x00	; 0
    d20e:	fc 01       	movw	r30, r24
    d210:	31 83       	std	Z+1, r19	; 0x01
    d212:	20 83       	st	Z, r18
        return; }
    d214:	da c0       	rjmp	.+436    	; 0xd3ca <pick_assign+0x298>
    else if(right[temp_var]==nxt_node)
    d216:	89 81       	ldd	r24, Y+1	; 0x01
    d218:	9a 81       	ldd	r25, Y+2	; 0x02
    d21a:	88 0f       	add	r24, r24
    d21c:	99 1f       	adc	r25, r25
    d21e:	9e 01       	movw	r18, r28
    d220:	2f 5f       	subi	r18, 0xFF	; 255
    d222:	3f 4f       	sbci	r19, 0xFF	; 255
    d224:	82 0f       	add	r24, r18
    d226:	93 1f       	adc	r25, r19
    d228:	0e 96       	adiw	r24, 0x0e	; 14
    d22a:	fc 01       	movw	r30, r24
    d22c:	20 81       	ld	r18, Z
    d22e:	31 81       	ldd	r19, Z+1	; 0x01
    d230:	8b a9       	sts	0x4b, r24
    d232:	9c a9       	sts	0x4c, r25
    d234:	28 17       	cp	r18, r24
    d236:	39 07       	cpc	r19, r25
    d238:	99 f4       	brne	.+38     	; 0xd260 <pick_assign+0x12e>
              {
        strcat(master_path,"2");
    d23a:	89 e6       	ldi	r24, 0x69	; 105
    d23c:	93 e0       	ldi	r25, 0x03	; 3
    d23e:	9c 01       	movw	r18, r24
    d240:	f9 01       	movw	r30, r18
    d242:	01 90       	ld	r0, Z+
    d244:	00 20       	and	r0, r0
    d246:	e9 f7       	brne	.-6      	; 0xd242 <pick_assign+0x110>
    d248:	cf 01       	movw	r24, r30
    d24a:	01 97       	sbiw	r24, 0x01	; 1
    d24c:	82 1b       	sub	r24, r18
    d24e:	93 0b       	sbc	r25, r19
    d250:	87 59       	subi	r24, 0x97	; 151
    d252:	9c 4f       	sbci	r25, 0xFC	; 252
    d254:	22 e3       	ldi	r18, 0x32	; 50
    d256:	30 e0       	ldi	r19, 0x00	; 0
    d258:	fc 01       	movw	r30, r24
    d25a:	31 83       	std	Z+1, r19	; 0x01
    d25c:	20 83       	st	Z, r18
        return; }
    d25e:	b5 c0       	rjmp	.+362    	; 0xd3ca <pick_assign+0x298>
    else if(back[temp_var]==nxt_node)
    d260:	89 81       	ldd	r24, Y+1	; 0x01
    d262:	9a 81       	ldd	r25, Y+2	; 0x02
    d264:	88 0f       	add	r24, r24
    d266:	99 1f       	adc	r25, r25
    d268:	9e 01       	movw	r18, r28
    d26a:	2f 5f       	subi	r18, 0xFF	; 255
    d26c:	3f 4f       	sbci	r19, 0xFF	; 255
    d26e:	82 0f       	add	r24, r18
    d270:	93 1f       	adc	r25, r19
    d272:	4a 96       	adiw	r24, 0x1a	; 26
    d274:	fc 01       	movw	r30, r24
    d276:	20 81       	ld	r18, Z
    d278:	31 81       	ldd	r19, Z+1	; 0x01
    d27a:	8b a9       	sts	0x4b, r24
    d27c:	9c a9       	sts	0x4c, r25
    d27e:	28 17       	cp	r18, r24
    d280:	39 07       	cpc	r19, r25
    d282:	99 f4       	brne	.+38     	; 0xd2aa <pick_assign+0x178>
              {
        strcat(master_path,"3");
    d284:	89 e6       	ldi	r24, 0x69	; 105
    d286:	93 e0       	ldi	r25, 0x03	; 3
    d288:	9c 01       	movw	r18, r24
    d28a:	f9 01       	movw	r30, r18
    d28c:	01 90       	ld	r0, Z+
    d28e:	00 20       	and	r0, r0
    d290:	e9 f7       	brne	.-6      	; 0xd28c <pick_assign+0x15a>
    d292:	cf 01       	movw	r24, r30
    d294:	01 97       	sbiw	r24, 0x01	; 1
    d296:	82 1b       	sub	r24, r18
    d298:	93 0b       	sbc	r25, r19
    d29a:	87 59       	subi	r24, 0x97	; 151
    d29c:	9c 4f       	sbci	r25, 0xFC	; 252
    d29e:	23 e3       	ldi	r18, 0x33	; 51
    d2a0:	30 e0       	ldi	r19, 0x00	; 0
    d2a2:	fc 01       	movw	r30, r24
    d2a4:	31 83       	std	Z+1, r19	; 0x01
    d2a6:	20 83       	st	Z, r18
        return; }
    d2a8:	90 c0       	rjmp	.+288    	; 0xd3ca <pick_assign+0x298>
    else if(nxt_node==1)
    d2aa:	8b a9       	sts	0x4b, r24
    d2ac:	9c a9       	sts	0x4c, r25
    d2ae:	81 30       	cpi	r24, 0x01	; 1
    d2b0:	91 05       	cpc	r25, r1
    d2b2:	99 f4       	brne	.+38     	; 0xd2da <pick_assign+0x1a8>
              {
        strcat(master_path,"4");// first node
    d2b4:	89 e6       	ldi	r24, 0x69	; 105
    d2b6:	93 e0       	ldi	r25, 0x03	; 3
    d2b8:	9c 01       	movw	r18, r24
    d2ba:	f9 01       	movw	r30, r18
    d2bc:	01 90       	ld	r0, Z+
    d2be:	00 20       	and	r0, r0
    d2c0:	e9 f7       	brne	.-6      	; 0xd2bc <pick_assign+0x18a>
    d2c2:	cf 01       	movw	r24, r30
    d2c4:	01 97       	sbiw	r24, 0x01	; 1
    d2c6:	82 1b       	sub	r24, r18
    d2c8:	93 0b       	sbc	r25, r19
    d2ca:	87 59       	subi	r24, 0x97	; 151
    d2cc:	9c 4f       	sbci	r25, 0xFC	; 252
    d2ce:	24 e3       	ldi	r18, 0x34	; 52
    d2d0:	30 e0       	ldi	r19, 0x00	; 0
    d2d2:	fc 01       	movw	r30, r24
    d2d4:	31 83       	std	Z+1, r19	; 0x01
    d2d6:	20 83       	st	Z, r18
        return; }
    d2d8:	78 c0       	rjmp	.+240    	; 0xd3ca <pick_assign+0x298>
    else if(nxt_node==6)
    d2da:	8b a9       	sts	0x4b, r24
    d2dc:	9c a9       	sts	0x4c, r25
    d2de:	86 30       	cpi	r24, 0x06	; 6
    d2e0:	91 05       	cpc	r25, r1
    d2e2:	99 f4       	brne	.+38     	; 0xd30a <pick_assign+0x1d8>
              {
        strcat(master_path,"5");// first row last col
    d2e4:	89 e6       	ldi	r24, 0x69	; 105
    d2e6:	93 e0       	ldi	r25, 0x03	; 3
    d2e8:	9c 01       	movw	r18, r24
    d2ea:	f9 01       	movw	r30, r18
    d2ec:	01 90       	ld	r0, Z+
    d2ee:	00 20       	and	r0, r0
    d2f0:	e9 f7       	brne	.-6      	; 0xd2ec <pick_assign+0x1ba>
    d2f2:	cf 01       	movw	r24, r30
    d2f4:	01 97       	sbiw	r24, 0x01	; 1
    d2f6:	82 1b       	sub	r24, r18
    d2f8:	93 0b       	sbc	r25, r19
    d2fa:	87 59       	subi	r24, 0x97	; 151
    d2fc:	9c 4f       	sbci	r25, 0xFC	; 252
    d2fe:	25 e3       	ldi	r18, 0x35	; 53
    d300:	30 e0       	ldi	r19, 0x00	; 0
    d302:	fc 01       	movw	r30, r24
    d304:	31 83       	std	Z+1, r19	; 0x01
    d306:	20 83       	st	Z, r18
        return; }
    d308:	60 c0       	rjmp	.+192    	; 0xd3ca <pick_assign+0x298>
    else if(nxt_node==31)//
    d30a:	8b a9       	sts	0x4b, r24
    d30c:	9c a9       	sts	0x4c, r25
    d30e:	8f 31       	cpi	r24, 0x1F	; 31
    d310:	91 05       	cpc	r25, r1
    d312:	99 f4       	brne	.+38     	; 0xd33a <pick_assign+0x208>
    {
	    strcat(master_path,"6");//last row first col
    d314:	89 e6       	ldi	r24, 0x69	; 105
    d316:	93 e0       	ldi	r25, 0x03	; 3
    d318:	9c 01       	movw	r18, r24
    d31a:	f9 01       	movw	r30, r18
    d31c:	01 90       	ld	r0, Z+
    d31e:	00 20       	and	r0, r0
    d320:	e9 f7       	brne	.-6      	; 0xd31c <pick_assign+0x1ea>
    d322:	cf 01       	movw	r24, r30
    d324:	01 97       	sbiw	r24, 0x01	; 1
    d326:	82 1b       	sub	r24, r18
    d328:	93 0b       	sbc	r25, r19
    d32a:	87 59       	subi	r24, 0x97	; 151
    d32c:	9c 4f       	sbci	r25, 0xFC	; 252
    d32e:	26 e3       	ldi	r18, 0x36	; 54
    d330:	30 e0       	ldi	r19, 0x00	; 0
    d332:	fc 01       	movw	r30, r24
    d334:	31 83       	std	Z+1, r19	; 0x01
    d336:	20 83       	st	Z, r18
	    return;
    d338:	48 c0       	rjmp	.+144    	; 0xd3ca <pick_assign+0x298>
    }
    else if(nxt_node==36)
    d33a:	8b a9       	sts	0x4b, r24
    d33c:	9c a9       	sts	0x4c, r25
    d33e:	84 32       	cpi	r24, 0x24	; 36
    d340:	91 05       	cpc	r25, r1
    d342:	99 f4       	brne	.+38     	; 0xd36a <pick_assign+0x238>
    {
	    strcat(master_path,"7");//last row last col
    d344:	89 e6       	ldi	r24, 0x69	; 105
    d346:	93 e0       	ldi	r25, 0x03	; 3
    d348:	9c 01       	movw	r18, r24
    d34a:	f9 01       	movw	r30, r18
    d34c:	01 90       	ld	r0, Z+
    d34e:	00 20       	and	r0, r0
    d350:	e9 f7       	brne	.-6      	; 0xd34c <pick_assign+0x21a>
    d352:	cf 01       	movw	r24, r30
    d354:	01 97       	sbiw	r24, 0x01	; 1
    d356:	82 1b       	sub	r24, r18
    d358:	93 0b       	sbc	r25, r19
    d35a:	87 59       	subi	r24, 0x97	; 151
    d35c:	9c 4f       	sbci	r25, 0xFC	; 252
    d35e:	27 e3       	ldi	r18, 0x37	; 55
    d360:	30 e0       	ldi	r19, 0x00	; 0
    d362:	fc 01       	movw	r30, r24
    d364:	31 83       	std	Z+1, r19	; 0x01
    d366:	20 83       	st	Z, r18
	    return;
    d368:	30 c0       	rjmp	.+96     	; 0xd3ca <pick_assign+0x298>
    }
    else if(front[temp_var]==nxt_node)
    d36a:	89 81       	ldd	r24, Y+1	; 0x01
    d36c:	9a 81       	ldd	r25, Y+2	; 0x02
    d36e:	88 0f       	add	r24, r24
    d370:	99 1f       	adc	r25, r25
    d372:	9e 01       	movw	r18, r28
    d374:	2f 5f       	subi	r18, 0xFF	; 255
    d376:	3f 4f       	sbci	r19, 0xFF	; 255
    d378:	82 0f       	add	r24, r18
    d37a:	93 1f       	adc	r25, r19
    d37c:	86 96       	adiw	r24, 0x26	; 38
    d37e:	fc 01       	movw	r30, r24
    d380:	20 81       	ld	r18, Z
    d382:	31 81       	ldd	r19, Z+1	; 0x01
    d384:	8b a9       	sts	0x4b, r24
    d386:	9c a9       	sts	0x4c, r25
    d388:	28 17       	cp	r18, r24
    d38a:	39 07       	cpc	r19, r25
    d38c:	99 f4       	brne	.+38     	; 0xd3b4 <pick_assign+0x282>
    {
	    strcat(master_path,"8");
    d38e:	89 e6       	ldi	r24, 0x69	; 105
    d390:	93 e0       	ldi	r25, 0x03	; 3
    d392:	9c 01       	movw	r18, r24
    d394:	f9 01       	movw	r30, r18
    d396:	01 90       	ld	r0, Z+
    d398:	00 20       	and	r0, r0
    d39a:	e9 f7       	brne	.-6      	; 0xd396 <pick_assign+0x264>
    d39c:	cf 01       	movw	r24, r30
    d39e:	01 97       	sbiw	r24, 0x01	; 1
    d3a0:	82 1b       	sub	r24, r18
    d3a2:	93 0b       	sbc	r25, r19
    d3a4:	87 59       	subi	r24, 0x97	; 151
    d3a6:	9c 4f       	sbci	r25, 0xFC	; 252
    d3a8:	28 e3       	ldi	r18, 0x38	; 56
    d3aa:	30 e0       	ldi	r19, 0x00	; 0
    d3ac:	fc 01       	movw	r30, r24
    d3ae:	31 83       	std	Z+1, r19	; 0x01
    d3b0:	20 83       	st	Z, r18
    return; }
    d3b2:	0b c0       	rjmp	.+22     	; 0xd3ca <pick_assign+0x298>
int left[6]={7,13,19,25,99,99};
int right[6]={12,18,24,30,99,99};
int back[6]={2,3,4,5,99,99};
int front[6]={32,33,34,35,99,99};
int temp_var=0;
for(temp_var=0;temp_var<6;temp_var++){
    d3b4:	89 81       	ldd	r24, Y+1	; 0x01
    d3b6:	9a 81       	ldd	r25, Y+2	; 0x02
    d3b8:	01 96       	adiw	r24, 0x01	; 1
    d3ba:	9a 83       	std	Y+2, r25	; 0x02
    d3bc:	89 83       	std	Y+1, r24	; 0x01
    d3be:	89 81       	ldd	r24, Y+1	; 0x01
    d3c0:	9a 81       	ldd	r25, Y+2	; 0x02
    d3c2:	86 30       	cpi	r24, 0x06	; 6
    d3c4:	91 05       	cpc	r25, r1
    d3c6:	0c f4       	brge	.+2      	; 0xd3ca <pick_assign+0x298>
    d3c8:	01 cf       	rjmp	.-510    	; 0xd1cc <pick_assign+0x9a>
    {
	    strcat(master_path,"8");
    return; }
}

}
    d3ca:	e4 96       	adiw	r28, 0x34	; 52
    d3cc:	0f b6       	in	r0, 0x3f	; 63
    d3ce:	f8 94       	cli
    d3d0:	de bf       	out	0x3e, r29	; 62
    d3d2:	0f be       	out	0x3f, r0	; 63
    d3d4:	cd bf       	out	0x3d, r28	; 61
    d3d6:	df 91       	pop	r29
    d3d8:	cf 91       	pop	r28
    d3da:	08 95       	ret

0000d3dc <main>:
int main()
{
    d3dc:	0f 93       	push	r16
    d3de:	1f 93       	push	r17
    d3e0:	cf 93       	push	r28
    d3e2:	df 93       	push	r29
    d3e4:	cd b7       	in	r28, 0x3d	; 61
    d3e6:	de b7       	in	r29, 0x3e	; 62
    d3e8:	cb 55       	subi	r28, 0x5B	; 91
    d3ea:	d0 40       	sbci	r29, 0x00	; 0
    d3ec:	0f b6       	in	r0, 0x3f	; 63
    d3ee:	f8 94       	cli
    d3f0:	de bf       	out	0x3e, r29	; 62
    d3f2:	0f be       	out	0x3f, r0	; 63
    d3f4:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
    d3f6:	0e 94 a5 5d 	call	0xbb4a	; 0xbb4a <lcd_port_config>
	init_devices();
    d3fa:	0e 94 d5 5f 	call	0xbfaa	; 0xbfaa <init_devices>
	lcd_set_4bit();
    d3fe:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_set_4bit>
	lcd_init();
    d402:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_init>
	int lena,lenb,lenp;
	int present_node=0, next_node=0,t_count=0;
    d406:	1a 82       	std	Y+2, r1	; 0x02
    d408:	19 82       	std	Y+1, r1	; 0x01
    d40a:	1c 82       	std	Y+4, r1	; 0x04
    d40c:	1b 82       	std	Y+3, r1	; 0x03
    d40e:	1a 8a       	std	Y+18, r1	; 0x12
    d410:	19 8a       	std	Y+17, r1	; 0x11
	int switch_pressed = 0, mapped=0,size=0,an_count=0,hab_count=0,var=0,complete=0;
    d412:	1e 82       	std	Y+6, r1	; 0x06
    d414:	1d 82       	std	Y+5, r1	; 0x05
    d416:	18 86       	std	Y+8, r1	; 0x08
    d418:	1f 82       	std	Y+7, r1	; 0x07
    d41a:	1c 8a       	std	Y+20, r1	; 0x14
    d41c:	1b 8a       	std	Y+19, r1	; 0x13
    d41e:	1a 86       	std	Y+10, r1	; 0x0a
    d420:	19 86       	std	Y+9, r1	; 0x09
    d422:	1c 86       	std	Y+12, r1	; 0x0c
    d424:	1b 86       	std	Y+11, r1	; 0x0b
    d426:	1e 86       	std	Y+14, r1	; 0x0e
    d428:	1d 86       	std	Y+13, r1	; 0x0d
    d42a:	18 8a       	std	Y+16, r1	; 0x10
    d42c:	1f 86       	std	Y+15, r1	; 0x0f
	char *p;
	char animal[]="D1, D6, A6";
    d42e:	ce 01       	movw	r24, r28
    d430:	89 5b       	subi	r24, 0xB9	; 185
    d432:	9f 4f       	sbci	r25, 0xFF	; 255
    d434:	24 e2       	ldi	r18, 0x24	; 36
    d436:	33 e0       	ldi	r19, 0x03	; 3
    d438:	4b e0       	ldi	r20, 0x0B	; 11
    d43a:	f9 01       	movw	r30, r18
    d43c:	00 80       	ld	r0, Z
    d43e:	2f 5f       	subi	r18, 0xFF	; 255
    d440:	3f 4f       	sbci	r19, 0xFF	; 255
    d442:	fc 01       	movw	r30, r24
    d444:	00 82       	st	Z, r0
    d446:	01 96       	adiw	r24, 0x01	; 1
    d448:	41 50       	subi	r20, 0x01	; 1
    d44a:	44 23       	and	r20, r20
    d44c:	b1 f7       	brne	.-20     	; 0xd43a <main+0x5e>
	char habit[]="20, 4, 20";
    d44e:	ce 01       	movw	r24, r28
    d450:	8e 5a       	subi	r24, 0xAE	; 174
    d452:	9f 4f       	sbci	r25, 0xFF	; 255
    d454:	2f e2       	ldi	r18, 0x2F	; 47
    d456:	33 e0       	ldi	r19, 0x03	; 3
    d458:	4a e0       	ldi	r20, 0x0A	; 10
    d45a:	f9 01       	movw	r30, r18
    d45c:	00 80       	ld	r0, Z
    d45e:	2f 5f       	subi	r18, 0xFF	; 255
    d460:	3f 4f       	sbci	r19, 0xFF	; 255
    d462:	fc 01       	movw	r30, r24
    d464:	00 82       	st	Z, r0
    d466:	01 96       	adiw	r24, 0x01	; 1
    d468:	41 50       	subi	r20, 0x01	; 1
    d46a:	44 23       	and	r20, r20
    d46c:	b1 f7       	brne	.-20     	; 0xd45a <main+0x7e>
	path_fin=0;
    d46e:	10 92 32 04 	sts	0x0432, r1
    d472:	10 92 31 04 	sts	0x0431, r1
	halt=0;
    d476:	10 92 68 03 	sts	0x0368, r1
    d47a:	10 92 67 03 	sts	0x0367, r1
	defaulty();
    d47e:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <defaulty>
	while(!complete)
    d482:	b1 c1       	rjmp	.+866    	; 0xd7e6 <main+0x40a>
	{	
		if((PINE & 0x80) == 0x80) //when BOOT switch is not pressed
    d484:	8c e2       	ldi	r24, 0x2C	; 44
    d486:	90 e0       	ldi	r25, 0x00	; 0
    d488:	fc 01       	movw	r30, r24
    d48a:	80 81       	ld	r24, Z
    d48c:	88 23       	and	r24, r24
    d48e:	0c f0       	brlt	.+2      	; 0xd492 <main+0xb6>
    d490:	96 c1       	rjmp	.+812    	; 0xd7be <main+0x3e2>
		{	
			if(switch_pressed==1)//after press
    d492:	8d 81       	ldd	r24, Y+5	; 0x05
    d494:	9e 81       	ldd	r25, Y+6	; 0x06
    d496:	81 30       	cpi	r24, 0x01	; 1
    d498:	91 05       	cpc	r25, r1
    d49a:	09 f0       	breq	.+2      	; 0xd49e <main+0xc2>
    d49c:	a4 c1       	rjmp	.+840    	; 0xd7e6 <main+0x40a>
			{
				if(!mapped)
    d49e:	8f 81       	ldd	r24, Y+7	; 0x07
    d4a0:	98 85       	ldd	r25, Y+8	; 0x08
    d4a2:	00 97       	sbiw	r24, 0x00	; 0
    d4a4:	09 f0       	breq	.+2      	; 0xd4a8 <main+0xcc>
    d4a6:	ea c0       	rjmp	.+468    	; 0xd67c <main+0x2a0>
				{	mapped=1;
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
    d4aa:	90 e0       	ldi	r25, 0x00	; 0
    d4ac:	98 87       	std	Y+8, r25	; 0x08
    d4ae:	8f 83       	std	Y+7, r24	; 0x07
					node=0;
    d4b0:	10 92 66 03 	sts	0x0366, r1
    d4b4:	10 92 65 03 	sts	0x0365, r1
					node_map(animal,0,&lena);
    d4b8:	ce 01       	movw	r24, r28
    d4ba:	89 5b       	subi	r24, 0xB9	; 185
    d4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d4be:	9e 01       	movw	r18, r28
    d4c0:	2f 5b       	subi	r18, 0xBF	; 191
    d4c2:	3f 4f       	sbci	r19, 0xFF	; 255
    d4c4:	60 e0       	ldi	r22, 0x00	; 0
    d4c6:	70 e0       	ldi	r23, 0x00	; 0
    d4c8:	a9 01       	movw	r20, r18
    d4ca:	0e 94 38 67 	call	0xce70	; 0xce70 <node_map>
					node_map(habit,1,&lenb);
    d4ce:	ce 01       	movw	r24, r28
    d4d0:	8e 5a       	subi	r24, 0xAE	; 174
    d4d2:	9f 4f       	sbci	r25, 0xFF	; 255
    d4d4:	9e 01       	movw	r18, r28
    d4d6:	2d 5b       	subi	r18, 0xBD	; 189
    d4d8:	3f 4f       	sbci	r19, 0xFF	; 255
    d4da:	61 e0       	ldi	r22, 0x01	; 1
    d4dc:	70 e0       	ldi	r23, 0x00	; 0
    d4de:	a9 01       	movw	r20, r18
    d4e0:	0e 94 38 67 	call	0xce70	; 0xce70 <node_map>
					size=lena;
    d4e4:	ce 01       	movw	r24, r28
    d4e6:	8f 5b       	subi	r24, 0xBF	; 191
    d4e8:	9f 4f       	sbci	r25, 0xFF	; 255
    d4ea:	fc 01       	movw	r30, r24
    d4ec:	80 81       	ld	r24, Z
    d4ee:	91 81       	ldd	r25, Z+1	; 0x01
    d4f0:	9c 8b       	std	Y+20, r25	; 0x14
    d4f2:	8b 8b       	std	Y+19, r24	; 0x13
					size=size*2-1;
    d4f4:	8b 89       	ldd	r24, Y+19	; 0x13
    d4f6:	9c 89       	ldd	r25, Y+20	; 0x14
    d4f8:	88 0f       	add	r24, r24
    d4fa:	99 1f       	adc	r25, r25
    d4fc:	01 97       	sbiw	r24, 0x01	; 1
    d4fe:	9c 8b       	std	Y+20, r25	; 0x14
    d500:	8b 8b       	std	Y+19, r24	; 0x13
					    p= dijkstra(1,aniloc[0],&lenp);
    d502:	40 91 c6 04 	lds	r20, 0x04C6
    d506:	50 91 c7 04 	lds	r21, 0x04C7
    d50a:	9e 01       	movw	r18, r28
    d50c:	2b 5b       	subi	r18, 0xBB	; 187
    d50e:	3f 4f       	sbci	r19, 0xFF	; 255
    d510:	81 e0       	ldi	r24, 0x01	; 1
    d512:	90 e0       	ldi	r25, 0x00	; 0
    d514:	ba 01       	movw	r22, r20
    d516:	a9 01       	movw	r20, r18
    d518:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <dijkstra>
    d51c:	9e 8b       	std	Y+22, r25	; 0x16
    d51e:	8d 8b       	std	Y+21, r24	; 0x15
					    strcat(master_path,p);
    d520:	89 e6       	ldi	r24, 0x69	; 105
    d522:	93 e0       	ldi	r25, 0x03	; 3
    d524:	2d 89       	ldd	r18, Y+21	; 0x15
    d526:	3e 89       	ldd	r19, Y+22	; 0x16
    d528:	b9 01       	movw	r22, r18
    d52a:	0e 94 6d 71 	call	0xe2da	; 0xe2da <strcat>
					    pick_assign(aniloc[0]);
    d52e:	80 91 c6 04 	lds	r24, 0x04C6
    d532:	90 91 c7 04 	lds	r25, 0x04C7
    d536:	0e 94 99 68 	call	0xd132	; 0xd132 <pick_assign>
					    free(p);
    d53a:	8d 89       	ldd	r24, Y+21	; 0x15
    d53c:	9e 89       	ldd	r25, Y+22	; 0x16
    d53e:	0e 94 e6 6f 	call	0xdfcc	; 0xdfcc <free>
					    for(var=0;var<size;var++)
    d542:	1e 86       	std	Y+14, r1	; 0x0e
    d544:	1d 86       	std	Y+13, r1	; 0x0d
    d546:	78 c0       	rjmp	.+240    	; 0xd638 <main+0x25c>
					    {
						    if(var%2==0)
    d548:	8d 85       	ldd	r24, Y+13	; 0x0d
    d54a:	9e 85       	ldd	r25, Y+14	; 0x0e
    d54c:	81 70       	andi	r24, 0x01	; 1
    d54e:	90 70       	andi	r25, 0x00	; 0
    d550:	00 97       	sbiw	r24, 0x00	; 0
    d552:	09 f5       	brne	.+66     	; 0xd596 <main+0x1ba>
						    {
							    present_node=aniloc[an_count];
    d554:	89 85       	ldd	r24, Y+9	; 0x09
    d556:	9a 85       	ldd	r25, Y+10	; 0x0a
    d558:	88 0f       	add	r24, r24
    d55a:	99 1f       	adc	r25, r25
    d55c:	8a 53       	subi	r24, 0x3A	; 58
    d55e:	9b 4f       	sbci	r25, 0xFB	; 251
    d560:	fc 01       	movw	r30, r24
    d562:	80 81       	ld	r24, Z
    d564:	91 81       	ldd	r25, Z+1	; 0x01
    d566:	9a 83       	std	Y+2, r25	; 0x02
    d568:	89 83       	std	Y+1, r24	; 0x01
							    next_node=habloc[hab_count];
    d56a:	8b 85       	ldd	r24, Y+11	; 0x0b
    d56c:	9c 85       	ldd	r25, Y+12	; 0x0c
    d56e:	88 0f       	add	r24, r24
    d570:	99 1f       	adc	r25, r25
    d572:	85 5a       	subi	r24, 0xA5	; 165
    d574:	9b 4f       	sbci	r25, 0xFB	; 251
    d576:	fc 01       	movw	r30, r24
    d578:	80 81       	ld	r24, Z
    d57a:	91 81       	ldd	r25, Z+1	; 0x01
    d57c:	9c 83       	std	Y+4, r25	; 0x04
    d57e:	8b 83       	std	Y+3, r24	; 0x03
							    an_count++;
    d580:	89 85       	ldd	r24, Y+9	; 0x09
    d582:	9a 85       	ldd	r25, Y+10	; 0x0a
    d584:	01 96       	adiw	r24, 0x01	; 1
    d586:	9a 87       	std	Y+10, r25	; 0x0a
    d588:	89 87       	std	Y+9, r24	; 0x09
							    hab_count++;
    d58a:	8b 85       	ldd	r24, Y+11	; 0x0b
    d58c:	9c 85       	ldd	r25, Y+12	; 0x0c
    d58e:	01 96       	adiw	r24, 0x01	; 1
    d590:	9c 87       	std	Y+12, r25	; 0x0c
    d592:	8b 87       	std	Y+11, r24	; 0x0b
    d594:	17 c0       	rjmp	.+46     	; 0xd5c4 <main+0x1e8>
						    }
						    else
						    {
							    present_node=habloc[hab_count-1];
    d596:	8b 85       	ldd	r24, Y+11	; 0x0b
    d598:	9c 85       	ldd	r25, Y+12	; 0x0c
    d59a:	01 97       	sbiw	r24, 0x01	; 1
    d59c:	88 0f       	add	r24, r24
    d59e:	99 1f       	adc	r25, r25
    d5a0:	85 5a       	subi	r24, 0xA5	; 165
    d5a2:	9b 4f       	sbci	r25, 0xFB	; 251
    d5a4:	fc 01       	movw	r30, r24
    d5a6:	80 81       	ld	r24, Z
    d5a8:	91 81       	ldd	r25, Z+1	; 0x01
    d5aa:	9a 83       	std	Y+2, r25	; 0x02
    d5ac:	89 83       	std	Y+1, r24	; 0x01
							    next_node=aniloc[an_count];
    d5ae:	89 85       	ldd	r24, Y+9	; 0x09
    d5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    d5b2:	88 0f       	add	r24, r24
    d5b4:	99 1f       	adc	r25, r25
    d5b6:	8a 53       	subi	r24, 0x3A	; 58
    d5b8:	9b 4f       	sbci	r25, 0xFB	; 251
    d5ba:	fc 01       	movw	r30, r24
    d5bc:	80 81       	ld	r24, Z
    d5be:	91 81       	ldd	r25, Z+1	; 0x01
    d5c0:	9c 83       	std	Y+4, r25	; 0x04
    d5c2:	8b 83       	std	Y+3, r24	; 0x03
						    }
						    p=dijkstra(present_node,next_node,&lenp);
    d5c4:	89 81       	ldd	r24, Y+1	; 0x01
    d5c6:	9a 81       	ldd	r25, Y+2	; 0x02
    d5c8:	4b 81       	ldd	r20, Y+3	; 0x03
    d5ca:	5c 81       	ldd	r21, Y+4	; 0x04
    d5cc:	9e 01       	movw	r18, r28
    d5ce:	2b 5b       	subi	r18, 0xBB	; 187
    d5d0:	3f 4f       	sbci	r19, 0xFF	; 255
    d5d2:	ba 01       	movw	r22, r20
    d5d4:	a9 01       	movw	r20, r18
    d5d6:	0e 94 e2 65 	call	0xcbc4	; 0xcbc4 <dijkstra>
    d5da:	9e 8b       	std	Y+22, r25	; 0x16
    d5dc:	8d 8b       	std	Y+21, r24	; 0x15
						    strcat(master_path,p);
    d5de:	89 e6       	ldi	r24, 0x69	; 105
    d5e0:	93 e0       	ldi	r25, 0x03	; 3
    d5e2:	2d 89       	ldd	r18, Y+21	; 0x15
    d5e4:	3e 89       	ldd	r19, Y+22	; 0x16
    d5e6:	b9 01       	movw	r22, r18
    d5e8:	0e 94 6d 71 	call	0xe2da	; 0xe2da <strcat>
						    free(p);
    d5ec:	8d 89       	ldd	r24, Y+21	; 0x15
    d5ee:	9e 89       	ldd	r25, Y+22	; 0x16
    d5f0:	0e 94 e6 6f 	call	0xdfcc	; 0xdfcc <free>
						    if(var%2==0)
    d5f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    d5f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    d5f8:	81 70       	andi	r24, 0x01	; 1
    d5fa:	90 70       	andi	r25, 0x00	; 0
    d5fc:	00 97       	sbiw	r24, 0x00	; 0
    d5fe:	99 f4       	brne	.+38     	; 0xd626 <main+0x24a>
						    strcat(master_path,"D");
    d600:	89 e6       	ldi	r24, 0x69	; 105
    d602:	93 e0       	ldi	r25, 0x03	; 3
    d604:	9c 01       	movw	r18, r24
    d606:	f9 01       	movw	r30, r18
    d608:	01 90       	ld	r0, Z+
    d60a:	00 20       	and	r0, r0
    d60c:	e9 f7       	brne	.-6      	; 0xd608 <main+0x22c>
    d60e:	cf 01       	movw	r24, r30
    d610:	01 97       	sbiw	r24, 0x01	; 1
    d612:	82 1b       	sub	r24, r18
    d614:	93 0b       	sbc	r25, r19
    d616:	87 59       	subi	r24, 0x97	; 151
    d618:	9c 4f       	sbci	r25, 0xFC	; 252
    d61a:	24 e4       	ldi	r18, 0x44	; 68
    d61c:	30 e0       	ldi	r19, 0x00	; 0
    d61e:	fc 01       	movw	r30, r24
    d620:	31 83       	std	Z+1, r19	; 0x01
    d622:	20 83       	st	Z, r18
    d624:	04 c0       	rjmp	.+8      	; 0xd62e <main+0x252>
						    else{
							    pick_assign(next_node);
    d626:	8b 81       	ldd	r24, Y+3	; 0x03
    d628:	9c 81       	ldd	r25, Y+4	; 0x04
    d62a:	0e 94 99 68 	call	0xd132	; 0xd132 <pick_assign>
					size=size*2-1;
					    p= dijkstra(1,aniloc[0],&lenp);
					    strcat(master_path,p);
					    pick_assign(aniloc[0]);
					    free(p);
					    for(var=0;var<size;var++)
    d62e:	8d 85       	ldd	r24, Y+13	; 0x0d
    d630:	9e 85       	ldd	r25, Y+14	; 0x0e
    d632:	01 96       	adiw	r24, 0x01	; 1
    d634:	9e 87       	std	Y+14, r25	; 0x0e
    d636:	8d 87       	std	Y+13, r24	; 0x0d
    d638:	2d 85       	ldd	r18, Y+13	; 0x0d
    d63a:	3e 85       	ldd	r19, Y+14	; 0x0e
    d63c:	8b 89       	ldd	r24, Y+19	; 0x13
    d63e:	9c 89       	ldd	r25, Y+20	; 0x14
    d640:	28 17       	cp	r18, r24
    d642:	39 07       	cpc	r19, r25
    d644:	0c f4       	brge	.+2      	; 0xd648 <main+0x26c>
    d646:	80 cf       	rjmp	.-256    	; 0xd548 <main+0x16c>
						    else{
							    pick_assign(next_node);
						    }

					    }
					    strcat(master_path,"o");
    d648:	89 e6       	ldi	r24, 0x69	; 105
    d64a:	93 e0       	ldi	r25, 0x03	; 3
    d64c:	9c 01       	movw	r18, r24
    d64e:	f9 01       	movw	r30, r18
    d650:	01 90       	ld	r0, Z+
    d652:	00 20       	and	r0, r0
    d654:	e9 f7       	brne	.-6      	; 0xd650 <main+0x274>
    d656:	cf 01       	movw	r24, r30
    d658:	01 97       	sbiw	r24, 0x01	; 1
    d65a:	82 1b       	sub	r24, r18
    d65c:	93 0b       	sbc	r25, r19
    d65e:	87 59       	subi	r24, 0x97	; 151
    d660:	9c 4f       	sbci	r25, 0xFC	; 252
    d662:	2f e6       	ldi	r18, 0x6F	; 111
    d664:	30 e0       	ldi	r19, 0x00	; 0
    d666:	fc 01       	movw	r30, r24
    d668:	31 83       	std	Z+1, r19	; 0x01
    d66a:	20 83       	st	Z, r18
					
				lcd_cursor(1,1);
    d66c:	81 e0       	ldi	r24, 0x01	; 1
    d66e:	61 e0       	ldi	r22, 0x01	; 1
    d670:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
				lcd_wr_char(master_path[18]);
    d674:	80 91 7b 03 	lds	r24, 0x037B
    d678:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>
				}//end of mapping
				travel_path(master_path[0]);
    d67c:	80 91 69 03 	lds	r24, 0x0369
    d680:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <travel_path>
				TIMSK3=1;
    d684:	81 e7       	ldi	r24, 0x71	; 113
    d686:	90 e0       	ldi	r25, 0x00	; 0
    d688:	21 e0       	ldi	r18, 0x01	; 1
    d68a:	fc 01       	movw	r30, r24
    d68c:	20 83       	st	Z, r18
				while(!path_fin){
    d68e:	89 c0       	rjmp	.+274    	; 0xd7a2 <main+0x3c6>
					if(!halt){
    d690:	80 91 67 03 	lds	r24, 0x0367
    d694:	90 91 68 03 	lds	r25, 0x0368
    d698:	00 97       	sbiw	r24, 0x00	; 0
    d69a:	09 f0       	breq	.+2      	; 0xd69e <main+0x2c2>
    d69c:	82 c0       	rjmp	.+260    	; 0xd7a2 <main+0x3c6>
						line_follow();
    d69e:	0e 94 9e 33 	call	0x673c	; 0x673c <line_follow>
    d6a2:	80 e0       	ldi	r24, 0x00	; 0
    d6a4:	90 e0       	ldi	r25, 0x00	; 0
    d6a6:	a8 ec       	ldi	r26, 0xC8	; 200
    d6a8:	b2 e4       	ldi	r27, 0x42	; 66
    d6aa:	8f 8b       	std	Y+23, r24	; 0x17
    d6ac:	98 8f       	std	Y+24, r25	; 0x18
    d6ae:	a9 8f       	std	Y+25, r26	; 0x19
    d6b0:	ba 8f       	std	Y+26, r27	; 0x1a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d6b2:	6f 89       	ldd	r22, Y+23	; 0x17
    d6b4:	78 8d       	ldd	r23, Y+24	; 0x18
    d6b6:	89 8d       	ldd	r24, Y+25	; 0x19
    d6b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d6ba:	26 e6       	ldi	r18, 0x66	; 102
    d6bc:	36 e6       	ldi	r19, 0x66	; 102
    d6be:	46 e6       	ldi	r20, 0x66	; 102
    d6c0:	55 e4       	ldi	r21, 0x45	; 69
    d6c2:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    d6c6:	dc 01       	movw	r26, r24
    d6c8:	cb 01       	movw	r24, r22
    d6ca:	8b 8f       	std	Y+27, r24	; 0x1b
    d6cc:	9c 8f       	std	Y+28, r25	; 0x1c
    d6ce:	ad 8f       	std	Y+29, r26	; 0x1d
    d6d0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    d6d2:	11 e0       	ldi	r17, 0x01	; 1
    d6d4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d6d6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d6d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d6da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d6dc:	20 e0       	ldi	r18, 0x00	; 0
    d6de:	30 e0       	ldi	r19, 0x00	; 0
    d6e0:	40 e8       	ldi	r20, 0x80	; 128
    d6e2:	5f e3       	ldi	r21, 0x3F	; 63
    d6e4:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    d6e8:	88 23       	and	r24, r24
    d6ea:	0c f0       	brlt	.+2      	; 0xd6ee <main+0x312>
    d6ec:	10 e0       	ldi	r17, 0x00	; 0
    d6ee:	11 23       	and	r17, r17
    d6f0:	29 f0       	breq	.+10     	; 0xd6fc <main+0x320>
		__ticks = 1;
    d6f2:	81 e0       	ldi	r24, 0x01	; 1
    d6f4:	90 e0       	ldi	r25, 0x00	; 0
    d6f6:	98 a3       	lds	r25, 0x58
    d6f8:	8f 8f       	std	Y+31, r24	; 0x1f
    d6fa:	46 c0       	rjmp	.+140    	; 0xd788 <main+0x3ac>
	else if (__tmp > 65535)
    d6fc:	11 e0       	ldi	r17, 0x01	; 1
    d6fe:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d700:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d702:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d704:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d706:	20 e0       	ldi	r18, 0x00	; 0
    d708:	3f ef       	ldi	r19, 0xFF	; 255
    d70a:	4f e7       	ldi	r20, 0x7F	; 127
    d70c:	57 e4       	ldi	r21, 0x47	; 71
    d70e:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    d712:	18 16       	cp	r1, r24
    d714:	0c f0       	brlt	.+2      	; 0xd718 <main+0x33c>
    d716:	10 e0       	ldi	r17, 0x00	; 0
    d718:	11 23       	and	r17, r17
    d71a:	61 f1       	breq	.+88     	; 0xd774 <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d71c:	6f 89       	ldd	r22, Y+23	; 0x17
    d71e:	78 8d       	ldd	r23, Y+24	; 0x18
    d720:	89 8d       	ldd	r24, Y+25	; 0x19
    d722:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d724:	20 e0       	ldi	r18, 0x00	; 0
    d726:	30 e0       	ldi	r19, 0x00	; 0
    d728:	40 e2       	ldi	r20, 0x20	; 32
    d72a:	51 e4       	ldi	r21, 0x41	; 65
    d72c:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    d730:	dc 01       	movw	r26, r24
    d732:	cb 01       	movw	r24, r22
    d734:	bc 01       	movw	r22, r24
    d736:	cd 01       	movw	r24, r26
    d738:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    d73c:	dc 01       	movw	r26, r24
    d73e:	cb 01       	movw	r24, r22
    d740:	98 a3       	lds	r25, 0x58
    d742:	8f 8f       	std	Y+31, r24	; 0x1f
    d744:	12 c0       	rjmp	.+36     	; 0xd76a <main+0x38e>
    d746:	80 e7       	ldi	r24, 0x70	; 112
    d748:	91 e0       	ldi	r25, 0x01	; 1
    d74a:	9a a3       	lds	r25, 0x5a
    d74c:	89 a3       	lds	r24, 0x59
    d74e:	89 a1       	lds	r24, 0x49
    d750:	9a a1       	lds	r25, 0x4a
    d752:	8c 01       	movw	r16, r24
    d754:	c8 01       	movw	r24, r16
    d756:	01 97       	sbiw	r24, 0x01	; 1
    d758:	f1 f7       	brne	.-4      	; 0xd756 <main+0x37a>
    d75a:	8c 01       	movw	r16, r24
    d75c:	1a a3       	lds	r17, 0x5a
    d75e:	09 a3       	lds	r16, 0x59
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d762:	98 a1       	lds	r25, 0x48
    d764:	01 97       	sbiw	r24, 0x01	; 1
    d766:	98 a3       	lds	r25, 0x58
    d768:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d76a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d76c:	98 a1       	lds	r25, 0x48
    d76e:	00 97       	sbiw	r24, 0x00	; 0
    d770:	51 f7       	brne	.-44     	; 0xd746 <main+0x36a>
    d772:	17 c0       	rjmp	.+46     	; 0xd7a2 <main+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d774:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d776:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d778:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d77a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d77c:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    d780:	dc 01       	movw	r26, r24
    d782:	cb 01       	movw	r24, r22
    d784:	98 a3       	lds	r25, 0x58
    d786:	8f 8f       	std	Y+31, r24	; 0x1f
    d788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d78a:	98 a1       	lds	r25, 0x48
    d78c:	9c a3       	lds	r25, 0x5c
    d78e:	8b a3       	lds	r24, 0x5b
    d790:	8b a1       	lds	r24, 0x4b
    d792:	9c a1       	lds	r25, 0x4c
    d794:	8c 01       	movw	r16, r24
    d796:	f8 01       	movw	r30, r16
    d798:	31 97       	sbiw	r30, 0x01	; 1
    d79a:	f1 f7       	brne	.-4      	; 0xd798 <main+0x3bc>
    d79c:	8f 01       	movw	r16, r30
    d79e:	1c a3       	lds	r17, 0x5c
    d7a0:	0b a3       	lds	r16, 0x5b
				lcd_cursor(1,1);
				lcd_wr_char(master_path[18]);
				}//end of mapping
				travel_path(master_path[0]);
				TIMSK3=1;
				while(!path_fin){
    d7a2:	80 91 31 04 	lds	r24, 0x0431
    d7a6:	90 91 32 04 	lds	r25, 0x0432
    d7aa:	00 97       	sbiw	r24, 0x00	; 0
    d7ac:	09 f4       	brne	.+2      	; 0xd7b0 <main+0x3d4>
    d7ae:	70 cf       	rjmp	.-288    	; 0xd690 <main+0x2b4>
						line_follow();
					_delay_ms(100);}
					//display_line();
					//_delay_ms(20);
				}
			stop();
    d7b0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			complete=1;
    d7b4:	81 e0       	ldi	r24, 0x01	; 1
    d7b6:	90 e0       	ldi	r25, 0x00	; 0
    d7b8:	98 8b       	std	Y+16, r25	; 0x10
    d7ba:	8f 87       	std	Y+15, r24	; 0x0f
    d7bc:	14 c0       	rjmp	.+40     	; 0xd7e6 <main+0x40a>
			}
		}							  	
		else//BOOT switch is pressed
		{
			lcd_cursor(1,1);
    d7be:	81 e0       	ldi	r24, 0x01	; 1
    d7c0:	61 e0       	ldi	r22, 0x01	; 1
    d7c2:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(ani);
    d7c6:	80 e4       	ldi	r24, 0x40	; 64
    d7c8:	94 e0       	ldi	r25, 0x04	; 4
    d7ca:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			lcd_cursor(2,1);
    d7ce:	82 e0       	ldi	r24, 0x02	; 2
    d7d0:	61 e0       	ldi	r22, 0x01	; 1
    d7d2:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(hab);
    d7d6:	87 e8       	ldi	r24, 0x87	; 135
    d7d8:	94 e0       	ldi	r25, 0x04	; 4
    d7da:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			switch_pressed=1;
    d7de:	81 e0       	ldi	r24, 0x01	; 1
    d7e0:	90 e0       	ldi	r25, 0x00	; 0
    d7e2:	9e 83       	std	Y+6, r25	; 0x06
    d7e4:	8d 83       	std	Y+5, r24	; 0x05
	char animal[]="D1, D6, A6";
	char habit[]="20, 4, 20";
	path_fin=0;
	halt=0;
	defaulty();
	while(!complete)
    d7e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    d7e8:	98 89       	ldd	r25, Y+16	; 0x10
    d7ea:	00 97       	sbiw	r24, 0x00	; 0
    d7ec:	09 f4       	brne	.+2      	; 0xd7f0 <main+0x414>
    d7ee:	4a ce       	rjmp	.-876    	; 0xd484 <main+0xa8>
			lcd_cursor(2,1);
			lcd_string(hab);
			switch_pressed=1;
		}
	}
	buzzer_on();
    d7f0:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <buzzer_on>
    d7f4:	80 e0       	ldi	r24, 0x00	; 0
    d7f6:	90 e0       	ldi	r25, 0x00	; 0
    d7f8:	aa ef       	ldi	r26, 0xFA	; 250
    d7fa:	b4 e4       	ldi	r27, 0x44	; 68
    d7fc:	8d a3       	lds	r24, 0x5d
    d7fe:	9e a3       	lds	r25, 0x5e
    d800:	af a3       	lds	r26, 0x5f
    d802:	b8 a7       	lds	r27, 0x78
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d804:	6d a1       	lds	r22, 0x4d
    d806:	7e a1       	lds	r23, 0x4e
    d808:	8f a1       	lds	r24, 0x4f
    d80a:	98 a5       	lds	r25, 0x68
    d80c:	26 e6       	ldi	r18, 0x66	; 102
    d80e:	36 e6       	ldi	r19, 0x66	; 102
    d810:	46 e6       	ldi	r20, 0x66	; 102
    d812:	55 e4       	ldi	r21, 0x45	; 69
    d814:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    d818:	dc 01       	movw	r26, r24
    d81a:	cb 01       	movw	r24, r22
    d81c:	89 a7       	lds	r24, 0x79
    d81e:	9a a7       	lds	r25, 0x7a
    d820:	ab a7       	lds	r26, 0x7b
    d822:	bc a7       	lds	r27, 0x7c
	if (__tmp < 1.0)
    d824:	11 e0       	ldi	r17, 0x01	; 1
    d826:	69 a5       	lds	r22, 0x69
    d828:	7a a5       	lds	r23, 0x6a
    d82a:	8b a5       	lds	r24, 0x6b
    d82c:	9c a5       	lds	r25, 0x6c
    d82e:	20 e0       	ldi	r18, 0x00	; 0
    d830:	30 e0       	ldi	r19, 0x00	; 0
    d832:	40 e8       	ldi	r20, 0x80	; 128
    d834:	5f e3       	ldi	r21, 0x3F	; 63
    d836:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    d83a:	88 23       	and	r24, r24
    d83c:	0c f0       	brlt	.+2      	; 0xd840 <main+0x464>
    d83e:	10 e0       	ldi	r17, 0x00	; 0
    d840:	11 23       	and	r17, r17
    d842:	29 f0       	breq	.+10     	; 0xd84e <main+0x472>
		__ticks = 1;
    d844:	81 e0       	ldi	r24, 0x01	; 1
    d846:	90 e0       	ldi	r25, 0x00	; 0
    d848:	9e a7       	lds	r25, 0x7e
    d84a:	8d a7       	lds	r24, 0x7d
    d84c:	46 c0       	rjmp	.+140    	; 0xd8da <main+0x4fe>
	else if (__tmp > 65535)
    d84e:	11 e0       	ldi	r17, 0x01	; 1
    d850:	69 a5       	lds	r22, 0x69
    d852:	7a a5       	lds	r23, 0x6a
    d854:	8b a5       	lds	r24, 0x6b
    d856:	9c a5       	lds	r25, 0x6c
    d858:	20 e0       	ldi	r18, 0x00	; 0
    d85a:	3f ef       	ldi	r19, 0xFF	; 255
    d85c:	4f e7       	ldi	r20, 0x7F	; 127
    d85e:	57 e4       	ldi	r21, 0x47	; 71
    d860:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    d864:	18 16       	cp	r1, r24
    d866:	0c f0       	brlt	.+2      	; 0xd86a <main+0x48e>
    d868:	10 e0       	ldi	r17, 0x00	; 0
    d86a:	11 23       	and	r17, r17
    d86c:	61 f1       	breq	.+88     	; 0xd8c6 <main+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d86e:	6d a1       	lds	r22, 0x4d
    d870:	7e a1       	lds	r23, 0x4e
    d872:	8f a1       	lds	r24, 0x4f
    d874:	98 a5       	lds	r25, 0x68
    d876:	20 e0       	ldi	r18, 0x00	; 0
    d878:	30 e0       	ldi	r19, 0x00	; 0
    d87a:	40 e2       	ldi	r20, 0x20	; 32
    d87c:	51 e4       	ldi	r21, 0x41	; 65
    d87e:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    d882:	dc 01       	movw	r26, r24
    d884:	cb 01       	movw	r24, r22
    d886:	bc 01       	movw	r22, r24
    d888:	cd 01       	movw	r24, r26
    d88a:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    d88e:	dc 01       	movw	r26, r24
    d890:	cb 01       	movw	r24, r22
    d892:	9e a7       	lds	r25, 0x7e
    d894:	8d a7       	lds	r24, 0x7d
    d896:	12 c0       	rjmp	.+36     	; 0xd8bc <main+0x4e0>
    d898:	80 e7       	ldi	r24, 0x70	; 112
    d89a:	91 e0       	ldi	r25, 0x01	; 1
    d89c:	98 ab       	sts	0x58, r25
    d89e:	8f a7       	lds	r24, 0x7f
    d8a0:	8f a5       	lds	r24, 0x6f
    d8a2:	98 a9       	sts	0x48, r25
    d8a4:	8c 01       	movw	r16, r24
    d8a6:	c8 01       	movw	r24, r16
    d8a8:	01 97       	sbiw	r24, 0x01	; 1
    d8aa:	f1 f7       	brne	.-4      	; 0xd8a8 <main+0x4cc>
    d8ac:	8c 01       	movw	r16, r24
    d8ae:	18 ab       	sts	0x58, r17
    d8b0:	0f a7       	lds	r16, 0x7f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d8b2:	8d a5       	lds	r24, 0x6d
    d8b4:	9e a5       	lds	r25, 0x6e
    d8b6:	01 97       	sbiw	r24, 0x01	; 1
    d8b8:	9e a7       	lds	r25, 0x7e
    d8ba:	8d a7       	lds	r24, 0x7d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d8bc:	8d a5       	lds	r24, 0x6d
    d8be:	9e a5       	lds	r25, 0x6e
    d8c0:	00 97       	sbiw	r24, 0x00	; 0
    d8c2:	51 f7       	brne	.-44     	; 0xd898 <main+0x4bc>
    d8c4:	17 c0       	rjmp	.+46     	; 0xd8f4 <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d8c6:	69 a5       	lds	r22, 0x69
    d8c8:	7a a5       	lds	r23, 0x6a
    d8ca:	8b a5       	lds	r24, 0x6b
    d8cc:	9c a5       	lds	r25, 0x6c
    d8ce:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    d8d2:	dc 01       	movw	r26, r24
    d8d4:	cb 01       	movw	r24, r22
    d8d6:	9e a7       	lds	r25, 0x7e
    d8d8:	8d a7       	lds	r24, 0x7d
    d8da:	8d a5       	lds	r24, 0x6d
    d8dc:	9e a5       	lds	r25, 0x6e
    d8de:	9a ab       	sts	0x5a, r25
    d8e0:	89 ab       	sts	0x59, r24
    d8e2:	89 a9       	sts	0x49, r24
    d8e4:	9a a9       	sts	0x4a, r25
    d8e6:	8c 01       	movw	r16, r24
    d8e8:	f8 01       	movw	r30, r16
    d8ea:	31 97       	sbiw	r30, 0x01	; 1
    d8ec:	f1 f7       	brne	.-4      	; 0xd8ea <main+0x50e>
    d8ee:	8f 01       	movw	r16, r30
    d8f0:	1a ab       	sts	0x5a, r17
    d8f2:	09 ab       	sts	0x59, r16
	_delay_ms(2000);
	buzzer_off();
    d8f4:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <buzzer_off>
    d8f8:	80 e0       	ldi	r24, 0x00	; 0
    d8fa:	90 e0       	ldi	r25, 0x00	; 0
    d8fc:	aa ef       	ldi	r26, 0xFA	; 250
    d8fe:	b4 e4       	ldi	r27, 0x44	; 68
    d900:	8b ab       	sts	0x5b, r24
    d902:	9c ab       	sts	0x5c, r25
    d904:	ad ab       	sts	0x5d, r26
    d906:	be ab       	sts	0x5e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d908:	6b a9       	sts	0x4b, r22
    d90a:	7c a9       	sts	0x4c, r23
    d90c:	8d a9       	sts	0x4d, r24
    d90e:	9e a9       	sts	0x4e, r25
    d910:	26 e6       	ldi	r18, 0x66	; 102
    d912:	36 e6       	ldi	r19, 0x66	; 102
    d914:	46 e6       	ldi	r20, 0x66	; 102
    d916:	55 e4       	ldi	r21, 0x45	; 69
    d918:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    d91c:	dc 01       	movw	r26, r24
    d91e:	cb 01       	movw	r24, r22
    d920:	8f ab       	sts	0x5f, r24
    d922:	98 af       	sts	0x78, r25
    d924:	a9 af       	sts	0x79, r26
    d926:	ba af       	sts	0x7a, r27
	if (__tmp < 1.0)
    d928:	11 e0       	ldi	r17, 0x01	; 1
    d92a:	6f a9       	sts	0x4f, r22
    d92c:	78 ad       	sts	0x68, r23
    d92e:	89 ad       	sts	0x69, r24
    d930:	9a ad       	sts	0x6a, r25
    d932:	20 e0       	ldi	r18, 0x00	; 0
    d934:	30 e0       	ldi	r19, 0x00	; 0
    d936:	40 e8       	ldi	r20, 0x80	; 128
    d938:	5f e3       	ldi	r21, 0x3F	; 63
    d93a:	0e 94 78 6d 	call	0xdaf0	; 0xdaf0 <__cmpsf2>
    d93e:	88 23       	and	r24, r24
    d940:	0c f0       	brlt	.+2      	; 0xd944 <main+0x568>
    d942:	10 e0       	ldi	r17, 0x00	; 0
    d944:	11 23       	and	r17, r17
    d946:	29 f0       	breq	.+10     	; 0xd952 <main+0x576>
		__ticks = 1;
    d948:	81 e0       	ldi	r24, 0x01	; 1
    d94a:	90 e0       	ldi	r25, 0x00	; 0
    d94c:	9c af       	sts	0x7c, r25
    d94e:	8b af       	sts	0x7b, r24
    d950:	46 c0       	rjmp	.+140    	; 0xd9de <main+0x602>
	else if (__tmp > 65535)
    d952:	11 e0       	ldi	r17, 0x01	; 1
    d954:	6f a9       	sts	0x4f, r22
    d956:	78 ad       	sts	0x68, r23
    d958:	89 ad       	sts	0x69, r24
    d95a:	9a ad       	sts	0x6a, r25
    d95c:	20 e0       	ldi	r18, 0x00	; 0
    d95e:	3f ef       	ldi	r19, 0xFF	; 255
    d960:	4f e7       	ldi	r20, 0x7F	; 127
    d962:	57 e4       	ldi	r21, 0x47	; 71
    d964:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__gesf2>
    d968:	18 16       	cp	r1, r24
    d96a:	0c f0       	brlt	.+2      	; 0xd96e <main+0x592>
    d96c:	10 e0       	ldi	r17, 0x00	; 0
    d96e:	11 23       	and	r17, r17
    d970:	61 f1       	breq	.+88     	; 0xd9ca <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d972:	6b a9       	sts	0x4b, r22
    d974:	7c a9       	sts	0x4c, r23
    d976:	8d a9       	sts	0x4d, r24
    d978:	9e a9       	sts	0x4e, r25
    d97a:	20 e0       	ldi	r18, 0x00	; 0
    d97c:	30 e0       	ldi	r19, 0x00	; 0
    d97e:	40 e2       	ldi	r20, 0x20	; 32
    d980:	51 e4       	ldi	r21, 0x41	; 65
    d982:	0e 94 c6 6e 	call	0xdd8c	; 0xdd8c <__mulsf3>
    d986:	dc 01       	movw	r26, r24
    d988:	cb 01       	movw	r24, r22
    d98a:	bc 01       	movw	r22, r24
    d98c:	cd 01       	movw	r24, r26
    d98e:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    d992:	dc 01       	movw	r26, r24
    d994:	cb 01       	movw	r24, r22
    d996:	9c af       	sts	0x7c, r25
    d998:	8b af       	sts	0x7b, r24
    d99a:	12 c0       	rjmp	.+36     	; 0xd9c0 <main+0x5e4>
    d99c:	80 e7       	ldi	r24, 0x70	; 112
    d99e:	91 e0       	ldi	r25, 0x01	; 1
    d9a0:	9e af       	sts	0x7e, r25
    d9a2:	8d af       	sts	0x7d, r24
    d9a4:	8d ad       	sts	0x6d, r24
    d9a6:	9e ad       	sts	0x6e, r25
    d9a8:	8c 01       	movw	r16, r24
    d9aa:	c8 01       	movw	r24, r16
    d9ac:	01 97       	sbiw	r24, 0x01	; 1
    d9ae:	f1 f7       	brne	.-4      	; 0xd9ac <main+0x5d0>
    d9b0:	8c 01       	movw	r16, r24
    d9b2:	1e af       	sts	0x7e, r17
    d9b4:	0d af       	sts	0x7d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d9b6:	8b ad       	sts	0x6b, r24
    d9b8:	9c ad       	sts	0x6c, r25
    d9ba:	01 97       	sbiw	r24, 0x01	; 1
    d9bc:	9c af       	sts	0x7c, r25
    d9be:	8b af       	sts	0x7b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d9c0:	8b ad       	sts	0x6b, r24
    d9c2:	9c ad       	sts	0x6c, r25
    d9c4:	00 97       	sbiw	r24, 0x00	; 0
    d9c6:	51 f7       	brne	.-44     	; 0xd99c <main+0x5c0>
    d9c8:	20 c0       	rjmp	.+64     	; 0xda0a <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d9ca:	6f a9       	sts	0x4f, r22
    d9cc:	78 ad       	sts	0x68, r23
    d9ce:	89 ad       	sts	0x69, r24
    d9d0:	9a ad       	sts	0x6a, r25
    d9d2:	0e 94 e4 6d 	call	0xdbc8	; 0xdbc8 <__fixunssfsi>
    d9d6:	dc 01       	movw	r26, r24
    d9d8:	cb 01       	movw	r24, r22
    d9da:	9c af       	sts	0x7c, r25
    d9dc:	8b af       	sts	0x7b, r24
    d9de:	2b ad       	sts	0x6b, r18
    d9e0:	3c ad       	sts	0x6c, r19
    d9e2:	ce 01       	movw	r24, r28
    d9e4:	cf 96       	adiw	r24, 0x3f	; 63
    d9e6:	fc 01       	movw	r30, r24
    d9e8:	31 83       	std	Z+1, r19	; 0x01
    d9ea:	20 83       	st	Z, r18
    d9ec:	ce 01       	movw	r24, r28
    d9ee:	cf 96       	adiw	r24, 0x3f	; 63
    d9f0:	fc 01       	movw	r30, r24
    d9f2:	80 81       	ld	r24, Z
    d9f4:	91 81       	ldd	r25, Z+1	; 0x01
    d9f6:	8c 01       	movw	r16, r24
    d9f8:	c8 01       	movw	r24, r16
    d9fa:	01 97       	sbiw	r24, 0x01	; 1
    d9fc:	f1 f7       	brne	.-4      	; 0xd9fa <main+0x61e>
    d9fe:	8c 01       	movw	r16, r24
    da00:	ce 01       	movw	r24, r28
    da02:	cf 96       	adiw	r24, 0x3f	; 63
    da04:	fc 01       	movw	r30, r24
    da06:	11 83       	std	Z+1, r17	; 0x01
    da08:	00 83       	st	Z, r16
    da0a:	80 e0       	ldi	r24, 0x00	; 0
    da0c:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(2000);
	
    da0e:	c5 5a       	subi	r28, 0xA5	; 165
    da10:	df 4f       	sbci	r29, 0xFF	; 255
    da12:	0f b6       	in	r0, 0x3f	; 63
    da14:	f8 94       	cli
    da16:	de bf       	out	0x3e, r29	; 62
    da18:	0f be       	out	0x3f, r0	; 63
    da1a:	cd bf       	out	0x3d, r28	; 61
    da1c:	df 91       	pop	r29
    da1e:	cf 91       	pop	r28
    da20:	1f 91       	pop	r17
    da22:	0f 91       	pop	r16
    da24:	08 95       	ret

0000da26 <__subsf3>:
    da26:	50 58       	subi	r21, 0x80	; 128

0000da28 <__addsf3>:
    da28:	bb 27       	eor	r27, r27
    da2a:	aa 27       	eor	r26, r26
    da2c:	0e d0       	rcall	.+28     	; 0xda4a <__addsf3x>
    da2e:	70 c1       	rjmp	.+736    	; 0xdd10 <__fp_round>
    da30:	61 d1       	rcall	.+706    	; 0xdcf4 <__fp_pscA>
    da32:	30 f0       	brcs	.+12     	; 0xda40 <__addsf3+0x18>
    da34:	66 d1       	rcall	.+716    	; 0xdd02 <__fp_pscB>
    da36:	20 f0       	brcs	.+8      	; 0xda40 <__addsf3+0x18>
    da38:	31 f4       	brne	.+12     	; 0xda46 <__addsf3+0x1e>
    da3a:	9f 3f       	cpi	r25, 0xFF	; 255
    da3c:	11 f4       	brne	.+4      	; 0xda42 <__addsf3+0x1a>
    da3e:	1e f4       	brtc	.+6      	; 0xda46 <__addsf3+0x1e>
    da40:	56 c1       	rjmp	.+684    	; 0xdcee <__fp_nan>
    da42:	0e f4       	brtc	.+2      	; 0xda46 <__addsf3+0x1e>
    da44:	e0 95       	com	r30
    da46:	e7 fb       	bst	r30, 7
    da48:	4c c1       	rjmp	.+664    	; 0xdce2 <__fp_inf>

0000da4a <__addsf3x>:
    da4a:	e9 2f       	mov	r30, r25
    da4c:	72 d1       	rcall	.+740    	; 0xdd32 <__fp_split3>
    da4e:	80 f3       	brcs	.-32     	; 0xda30 <__addsf3+0x8>
    da50:	ba 17       	cp	r27, r26
    da52:	62 07       	cpc	r22, r18
    da54:	73 07       	cpc	r23, r19
    da56:	84 07       	cpc	r24, r20
    da58:	95 07       	cpc	r25, r21
    da5a:	18 f0       	brcs	.+6      	; 0xda62 <__addsf3x+0x18>
    da5c:	71 f4       	brne	.+28     	; 0xda7a <__addsf3x+0x30>
    da5e:	9e f5       	brtc	.+102    	; 0xdac6 <__addsf3x+0x7c>
    da60:	8a c1       	rjmp	.+788    	; 0xdd76 <__fp_zero>
    da62:	0e f4       	brtc	.+2      	; 0xda66 <__addsf3x+0x1c>
    da64:	e0 95       	com	r30
    da66:	0b 2e       	mov	r0, r27
    da68:	ba 2f       	mov	r27, r26
    da6a:	a0 2d       	mov	r26, r0
    da6c:	0b 01       	movw	r0, r22
    da6e:	b9 01       	movw	r22, r18
    da70:	90 01       	movw	r18, r0
    da72:	0c 01       	movw	r0, r24
    da74:	ca 01       	movw	r24, r20
    da76:	a0 01       	movw	r20, r0
    da78:	11 24       	eor	r1, r1
    da7a:	ff 27       	eor	r31, r31
    da7c:	59 1b       	sub	r21, r25
    da7e:	99 f0       	breq	.+38     	; 0xdaa6 <__addsf3x+0x5c>
    da80:	59 3f       	cpi	r21, 0xF9	; 249
    da82:	50 f4       	brcc	.+20     	; 0xda98 <__addsf3x+0x4e>
    da84:	50 3e       	cpi	r21, 0xE0	; 224
    da86:	68 f1       	brcs	.+90     	; 0xdae2 <__addsf3x+0x98>
    da88:	1a 16       	cp	r1, r26
    da8a:	f0 40       	sbci	r31, 0x00	; 0
    da8c:	a2 2f       	mov	r26, r18
    da8e:	23 2f       	mov	r18, r19
    da90:	34 2f       	mov	r19, r20
    da92:	44 27       	eor	r20, r20
    da94:	58 5f       	subi	r21, 0xF8	; 248
    da96:	f3 cf       	rjmp	.-26     	; 0xda7e <__addsf3x+0x34>
    da98:	46 95       	lsr	r20
    da9a:	37 95       	ror	r19
    da9c:	27 95       	ror	r18
    da9e:	a7 95       	ror	r26
    daa0:	f0 40       	sbci	r31, 0x00	; 0
    daa2:	53 95       	inc	r21
    daa4:	c9 f7       	brne	.-14     	; 0xda98 <__addsf3x+0x4e>
    daa6:	7e f4       	brtc	.+30     	; 0xdac6 <__addsf3x+0x7c>
    daa8:	1f 16       	cp	r1, r31
    daaa:	ba 0b       	sbc	r27, r26
    daac:	62 0b       	sbc	r22, r18
    daae:	73 0b       	sbc	r23, r19
    dab0:	84 0b       	sbc	r24, r20
    dab2:	ba f0       	brmi	.+46     	; 0xdae2 <__addsf3x+0x98>
    dab4:	91 50       	subi	r25, 0x01	; 1
    dab6:	a1 f0       	breq	.+40     	; 0xdae0 <__addsf3x+0x96>
    dab8:	ff 0f       	add	r31, r31
    daba:	bb 1f       	adc	r27, r27
    dabc:	66 1f       	adc	r22, r22
    dabe:	77 1f       	adc	r23, r23
    dac0:	88 1f       	adc	r24, r24
    dac2:	c2 f7       	brpl	.-16     	; 0xdab4 <__addsf3x+0x6a>
    dac4:	0e c0       	rjmp	.+28     	; 0xdae2 <__addsf3x+0x98>
    dac6:	ba 0f       	add	r27, r26
    dac8:	62 1f       	adc	r22, r18
    daca:	73 1f       	adc	r23, r19
    dacc:	84 1f       	adc	r24, r20
    dace:	48 f4       	brcc	.+18     	; 0xdae2 <__addsf3x+0x98>
    dad0:	87 95       	ror	r24
    dad2:	77 95       	ror	r23
    dad4:	67 95       	ror	r22
    dad6:	b7 95       	ror	r27
    dad8:	f7 95       	ror	r31
    dada:	9e 3f       	cpi	r25, 0xFE	; 254
    dadc:	08 f0       	brcs	.+2      	; 0xdae0 <__addsf3x+0x96>
    dade:	b3 cf       	rjmp	.-154    	; 0xda46 <__addsf3+0x1e>
    dae0:	93 95       	inc	r25
    dae2:	88 0f       	add	r24, r24
    dae4:	08 f0       	brcs	.+2      	; 0xdae8 <__addsf3x+0x9e>
    dae6:	99 27       	eor	r25, r25
    dae8:	ee 0f       	add	r30, r30
    daea:	97 95       	ror	r25
    daec:	87 95       	ror	r24
    daee:	08 95       	ret

0000daf0 <__cmpsf2>:
    daf0:	d4 d0       	rcall	.+424    	; 0xdc9a <__fp_cmp>
    daf2:	08 f4       	brcc	.+2      	; 0xdaf6 <__cmpsf2+0x6>
    daf4:	81 e0       	ldi	r24, 0x01	; 1
    daf6:	08 95       	ret

0000daf8 <__divsf3>:
    daf8:	0c d0       	rcall	.+24     	; 0xdb12 <__divsf3x>
    dafa:	0a c1       	rjmp	.+532    	; 0xdd10 <__fp_round>
    dafc:	02 d1       	rcall	.+516    	; 0xdd02 <__fp_pscB>
    dafe:	40 f0       	brcs	.+16     	; 0xdb10 <__divsf3+0x18>
    db00:	f9 d0       	rcall	.+498    	; 0xdcf4 <__fp_pscA>
    db02:	30 f0       	brcs	.+12     	; 0xdb10 <__divsf3+0x18>
    db04:	21 f4       	brne	.+8      	; 0xdb0e <__divsf3+0x16>
    db06:	5f 3f       	cpi	r21, 0xFF	; 255
    db08:	19 f0       	breq	.+6      	; 0xdb10 <__divsf3+0x18>
    db0a:	eb c0       	rjmp	.+470    	; 0xdce2 <__fp_inf>
    db0c:	51 11       	cpse	r21, r1
    db0e:	34 c1       	rjmp	.+616    	; 0xdd78 <__fp_szero>
    db10:	ee c0       	rjmp	.+476    	; 0xdcee <__fp_nan>

0000db12 <__divsf3x>:
    db12:	0f d1       	rcall	.+542    	; 0xdd32 <__fp_split3>
    db14:	98 f3       	brcs	.-26     	; 0xdafc <__divsf3+0x4>

0000db16 <__divsf3_pse>:
    db16:	99 23       	and	r25, r25
    db18:	c9 f3       	breq	.-14     	; 0xdb0c <__divsf3+0x14>
    db1a:	55 23       	and	r21, r21
    db1c:	b1 f3       	breq	.-20     	; 0xdb0a <__divsf3+0x12>
    db1e:	95 1b       	sub	r25, r21
    db20:	55 0b       	sbc	r21, r21
    db22:	bb 27       	eor	r27, r27
    db24:	aa 27       	eor	r26, r26
    db26:	62 17       	cp	r22, r18
    db28:	73 07       	cpc	r23, r19
    db2a:	84 07       	cpc	r24, r20
    db2c:	38 f0       	brcs	.+14     	; 0xdb3c <__divsf3_pse+0x26>
    db2e:	9f 5f       	subi	r25, 0xFF	; 255
    db30:	5f 4f       	sbci	r21, 0xFF	; 255
    db32:	22 0f       	add	r18, r18
    db34:	33 1f       	adc	r19, r19
    db36:	44 1f       	adc	r20, r20
    db38:	aa 1f       	adc	r26, r26
    db3a:	a9 f3       	breq	.-22     	; 0xdb26 <__divsf3_pse+0x10>
    db3c:	33 d0       	rcall	.+102    	; 0xdba4 <__divsf3_pse+0x8e>
    db3e:	0e 2e       	mov	r0, r30
    db40:	3a f0       	brmi	.+14     	; 0xdb50 <__divsf3_pse+0x3a>
    db42:	e0 e8       	ldi	r30, 0x80	; 128
    db44:	30 d0       	rcall	.+96     	; 0xdba6 <__divsf3_pse+0x90>
    db46:	91 50       	subi	r25, 0x01	; 1
    db48:	50 40       	sbci	r21, 0x00	; 0
    db4a:	e6 95       	lsr	r30
    db4c:	00 1c       	adc	r0, r0
    db4e:	ca f7       	brpl	.-14     	; 0xdb42 <__divsf3_pse+0x2c>
    db50:	29 d0       	rcall	.+82     	; 0xdba4 <__divsf3_pse+0x8e>
    db52:	fe 2f       	mov	r31, r30
    db54:	27 d0       	rcall	.+78     	; 0xdba4 <__divsf3_pse+0x8e>
    db56:	66 0f       	add	r22, r22
    db58:	77 1f       	adc	r23, r23
    db5a:	88 1f       	adc	r24, r24
    db5c:	bb 1f       	adc	r27, r27
    db5e:	26 17       	cp	r18, r22
    db60:	37 07       	cpc	r19, r23
    db62:	48 07       	cpc	r20, r24
    db64:	ab 07       	cpc	r26, r27
    db66:	b0 e8       	ldi	r27, 0x80	; 128
    db68:	09 f0       	breq	.+2      	; 0xdb6c <__divsf3_pse+0x56>
    db6a:	bb 0b       	sbc	r27, r27
    db6c:	80 2d       	mov	r24, r0
    db6e:	bf 01       	movw	r22, r30
    db70:	ff 27       	eor	r31, r31
    db72:	93 58       	subi	r25, 0x83	; 131
    db74:	5f 4f       	sbci	r21, 0xFF	; 255
    db76:	2a f0       	brmi	.+10     	; 0xdb82 <__divsf3_pse+0x6c>
    db78:	9e 3f       	cpi	r25, 0xFE	; 254
    db7a:	51 05       	cpc	r21, r1
    db7c:	68 f0       	brcs	.+26     	; 0xdb98 <__divsf3_pse+0x82>
    db7e:	b1 c0       	rjmp	.+354    	; 0xdce2 <__fp_inf>
    db80:	fb c0       	rjmp	.+502    	; 0xdd78 <__fp_szero>
    db82:	5f 3f       	cpi	r21, 0xFF	; 255
    db84:	ec f3       	brlt	.-6      	; 0xdb80 <__divsf3_pse+0x6a>
    db86:	98 3e       	cpi	r25, 0xE8	; 232
    db88:	dc f3       	brlt	.-10     	; 0xdb80 <__divsf3_pse+0x6a>
    db8a:	86 95       	lsr	r24
    db8c:	77 95       	ror	r23
    db8e:	67 95       	ror	r22
    db90:	b7 95       	ror	r27
    db92:	f7 95       	ror	r31
    db94:	9f 5f       	subi	r25, 0xFF	; 255
    db96:	c9 f7       	brne	.-14     	; 0xdb8a <__divsf3_pse+0x74>
    db98:	88 0f       	add	r24, r24
    db9a:	91 1d       	adc	r25, r1
    db9c:	96 95       	lsr	r25
    db9e:	87 95       	ror	r24
    dba0:	97 f9       	bld	r25, 7
    dba2:	08 95       	ret
    dba4:	e1 e0       	ldi	r30, 0x01	; 1
    dba6:	66 0f       	add	r22, r22
    dba8:	77 1f       	adc	r23, r23
    dbaa:	88 1f       	adc	r24, r24
    dbac:	bb 1f       	adc	r27, r27
    dbae:	62 17       	cp	r22, r18
    dbb0:	73 07       	cpc	r23, r19
    dbb2:	84 07       	cpc	r24, r20
    dbb4:	ba 07       	cpc	r27, r26
    dbb6:	20 f0       	brcs	.+8      	; 0xdbc0 <__divsf3_pse+0xaa>
    dbb8:	62 1b       	sub	r22, r18
    dbba:	73 0b       	sbc	r23, r19
    dbbc:	84 0b       	sbc	r24, r20
    dbbe:	ba 0b       	sbc	r27, r26
    dbc0:	ee 1f       	adc	r30, r30
    dbc2:	88 f7       	brcc	.-30     	; 0xdba6 <__divsf3_pse+0x90>
    dbc4:	e0 95       	com	r30
    dbc6:	08 95       	ret

0000dbc8 <__fixunssfsi>:
    dbc8:	bc d0       	rcall	.+376    	; 0xdd42 <__fp_splitA>
    dbca:	88 f0       	brcs	.+34     	; 0xdbee <__fixunssfsi+0x26>
    dbcc:	9f 57       	subi	r25, 0x7F	; 127
    dbce:	90 f0       	brcs	.+36     	; 0xdbf4 <__fixunssfsi+0x2c>
    dbd0:	b9 2f       	mov	r27, r25
    dbd2:	99 27       	eor	r25, r25
    dbd4:	b7 51       	subi	r27, 0x17	; 23
    dbd6:	a0 f0       	brcs	.+40     	; 0xdc00 <__fixunssfsi+0x38>
    dbd8:	d1 f0       	breq	.+52     	; 0xdc0e <__fixunssfsi+0x46>
    dbda:	66 0f       	add	r22, r22
    dbdc:	77 1f       	adc	r23, r23
    dbde:	88 1f       	adc	r24, r24
    dbe0:	99 1f       	adc	r25, r25
    dbe2:	1a f0       	brmi	.+6      	; 0xdbea <__fixunssfsi+0x22>
    dbe4:	ba 95       	dec	r27
    dbe6:	c9 f7       	brne	.-14     	; 0xdbda <__fixunssfsi+0x12>
    dbe8:	12 c0       	rjmp	.+36     	; 0xdc0e <__fixunssfsi+0x46>
    dbea:	b1 30       	cpi	r27, 0x01	; 1
    dbec:	81 f0       	breq	.+32     	; 0xdc0e <__fixunssfsi+0x46>
    dbee:	c3 d0       	rcall	.+390    	; 0xdd76 <__fp_zero>
    dbf0:	b1 e0       	ldi	r27, 0x01	; 1
    dbf2:	08 95       	ret
    dbf4:	c0 c0       	rjmp	.+384    	; 0xdd76 <__fp_zero>
    dbf6:	67 2f       	mov	r22, r23
    dbf8:	78 2f       	mov	r23, r24
    dbfa:	88 27       	eor	r24, r24
    dbfc:	b8 5f       	subi	r27, 0xF8	; 248
    dbfe:	39 f0       	breq	.+14     	; 0xdc0e <__fixunssfsi+0x46>
    dc00:	b9 3f       	cpi	r27, 0xF9	; 249
    dc02:	cc f3       	brlt	.-14     	; 0xdbf6 <__fixunssfsi+0x2e>
    dc04:	86 95       	lsr	r24
    dc06:	77 95       	ror	r23
    dc08:	67 95       	ror	r22
    dc0a:	b3 95       	inc	r27
    dc0c:	d9 f7       	brne	.-10     	; 0xdc04 <__fixunssfsi+0x3c>
    dc0e:	3e f4       	brtc	.+14     	; 0xdc1e <__fixunssfsi+0x56>
    dc10:	90 95       	com	r25
    dc12:	80 95       	com	r24
    dc14:	70 95       	com	r23
    dc16:	61 95       	neg	r22
    dc18:	7f 4f       	sbci	r23, 0xFF	; 255
    dc1a:	8f 4f       	sbci	r24, 0xFF	; 255
    dc1c:	9f 4f       	sbci	r25, 0xFF	; 255
    dc1e:	08 95       	ret

0000dc20 <__floatunsisf>:
    dc20:	e8 94       	clt
    dc22:	09 c0       	rjmp	.+18     	; 0xdc36 <__floatsisf+0x12>

0000dc24 <__floatsisf>:
    dc24:	97 fb       	bst	r25, 7
    dc26:	3e f4       	brtc	.+14     	; 0xdc36 <__floatsisf+0x12>
    dc28:	90 95       	com	r25
    dc2a:	80 95       	com	r24
    dc2c:	70 95       	com	r23
    dc2e:	61 95       	neg	r22
    dc30:	7f 4f       	sbci	r23, 0xFF	; 255
    dc32:	8f 4f       	sbci	r24, 0xFF	; 255
    dc34:	9f 4f       	sbci	r25, 0xFF	; 255
    dc36:	99 23       	and	r25, r25
    dc38:	a9 f0       	breq	.+42     	; 0xdc64 <__floatsisf+0x40>
    dc3a:	f9 2f       	mov	r31, r25
    dc3c:	96 e9       	ldi	r25, 0x96	; 150
    dc3e:	bb 27       	eor	r27, r27
    dc40:	93 95       	inc	r25
    dc42:	f6 95       	lsr	r31
    dc44:	87 95       	ror	r24
    dc46:	77 95       	ror	r23
    dc48:	67 95       	ror	r22
    dc4a:	b7 95       	ror	r27
    dc4c:	f1 11       	cpse	r31, r1
    dc4e:	f8 cf       	rjmp	.-16     	; 0xdc40 <__floatsisf+0x1c>
    dc50:	fa f4       	brpl	.+62     	; 0xdc90 <__floatsisf+0x6c>
    dc52:	bb 0f       	add	r27, r27
    dc54:	11 f4       	brne	.+4      	; 0xdc5a <__floatsisf+0x36>
    dc56:	60 ff       	sbrs	r22, 0
    dc58:	1b c0       	rjmp	.+54     	; 0xdc90 <__floatsisf+0x6c>
    dc5a:	6f 5f       	subi	r22, 0xFF	; 255
    dc5c:	7f 4f       	sbci	r23, 0xFF	; 255
    dc5e:	8f 4f       	sbci	r24, 0xFF	; 255
    dc60:	9f 4f       	sbci	r25, 0xFF	; 255
    dc62:	16 c0       	rjmp	.+44     	; 0xdc90 <__floatsisf+0x6c>
    dc64:	88 23       	and	r24, r24
    dc66:	11 f0       	breq	.+4      	; 0xdc6c <__floatsisf+0x48>
    dc68:	96 e9       	ldi	r25, 0x96	; 150
    dc6a:	11 c0       	rjmp	.+34     	; 0xdc8e <__floatsisf+0x6a>
    dc6c:	77 23       	and	r23, r23
    dc6e:	21 f0       	breq	.+8      	; 0xdc78 <__floatsisf+0x54>
    dc70:	9e e8       	ldi	r25, 0x8E	; 142
    dc72:	87 2f       	mov	r24, r23
    dc74:	76 2f       	mov	r23, r22
    dc76:	05 c0       	rjmp	.+10     	; 0xdc82 <__floatsisf+0x5e>
    dc78:	66 23       	and	r22, r22
    dc7a:	71 f0       	breq	.+28     	; 0xdc98 <__floatsisf+0x74>
    dc7c:	96 e8       	ldi	r25, 0x86	; 134
    dc7e:	86 2f       	mov	r24, r22
    dc80:	70 e0       	ldi	r23, 0x00	; 0
    dc82:	60 e0       	ldi	r22, 0x00	; 0
    dc84:	2a f0       	brmi	.+10     	; 0xdc90 <__floatsisf+0x6c>
    dc86:	9a 95       	dec	r25
    dc88:	66 0f       	add	r22, r22
    dc8a:	77 1f       	adc	r23, r23
    dc8c:	88 1f       	adc	r24, r24
    dc8e:	da f7       	brpl	.-10     	; 0xdc86 <__floatsisf+0x62>
    dc90:	88 0f       	add	r24, r24
    dc92:	96 95       	lsr	r25
    dc94:	87 95       	ror	r24
    dc96:	97 f9       	bld	r25, 7
    dc98:	08 95       	ret

0000dc9a <__fp_cmp>:
    dc9a:	99 0f       	add	r25, r25
    dc9c:	00 08       	sbc	r0, r0
    dc9e:	55 0f       	add	r21, r21
    dca0:	aa 0b       	sbc	r26, r26
    dca2:	e0 e8       	ldi	r30, 0x80	; 128
    dca4:	fe ef       	ldi	r31, 0xFE	; 254
    dca6:	16 16       	cp	r1, r22
    dca8:	17 06       	cpc	r1, r23
    dcaa:	e8 07       	cpc	r30, r24
    dcac:	f9 07       	cpc	r31, r25
    dcae:	c0 f0       	brcs	.+48     	; 0xdce0 <__fp_cmp+0x46>
    dcb0:	12 16       	cp	r1, r18
    dcb2:	13 06       	cpc	r1, r19
    dcb4:	e4 07       	cpc	r30, r20
    dcb6:	f5 07       	cpc	r31, r21
    dcb8:	98 f0       	brcs	.+38     	; 0xdce0 <__fp_cmp+0x46>
    dcba:	62 1b       	sub	r22, r18
    dcbc:	73 0b       	sbc	r23, r19
    dcbe:	84 0b       	sbc	r24, r20
    dcc0:	95 0b       	sbc	r25, r21
    dcc2:	39 f4       	brne	.+14     	; 0xdcd2 <__fp_cmp+0x38>
    dcc4:	0a 26       	eor	r0, r26
    dcc6:	61 f0       	breq	.+24     	; 0xdce0 <__fp_cmp+0x46>
    dcc8:	23 2b       	or	r18, r19
    dcca:	24 2b       	or	r18, r20
    dccc:	25 2b       	or	r18, r21
    dcce:	21 f4       	brne	.+8      	; 0xdcd8 <__fp_cmp+0x3e>
    dcd0:	08 95       	ret
    dcd2:	0a 26       	eor	r0, r26
    dcd4:	09 f4       	brne	.+2      	; 0xdcd8 <__fp_cmp+0x3e>
    dcd6:	a1 40       	sbci	r26, 0x01	; 1
    dcd8:	a6 95       	lsr	r26
    dcda:	8f ef       	ldi	r24, 0xFF	; 255
    dcdc:	81 1d       	adc	r24, r1
    dcde:	81 1d       	adc	r24, r1
    dce0:	08 95       	ret

0000dce2 <__fp_inf>:
    dce2:	97 f9       	bld	r25, 7
    dce4:	9f 67       	ori	r25, 0x7F	; 127
    dce6:	80 e8       	ldi	r24, 0x80	; 128
    dce8:	70 e0       	ldi	r23, 0x00	; 0
    dcea:	60 e0       	ldi	r22, 0x00	; 0
    dcec:	08 95       	ret

0000dcee <__fp_nan>:
    dcee:	9f ef       	ldi	r25, 0xFF	; 255
    dcf0:	80 ec       	ldi	r24, 0xC0	; 192
    dcf2:	08 95       	ret

0000dcf4 <__fp_pscA>:
    dcf4:	00 24       	eor	r0, r0
    dcf6:	0a 94       	dec	r0
    dcf8:	16 16       	cp	r1, r22
    dcfa:	17 06       	cpc	r1, r23
    dcfc:	18 06       	cpc	r1, r24
    dcfe:	09 06       	cpc	r0, r25
    dd00:	08 95       	ret

0000dd02 <__fp_pscB>:
    dd02:	00 24       	eor	r0, r0
    dd04:	0a 94       	dec	r0
    dd06:	12 16       	cp	r1, r18
    dd08:	13 06       	cpc	r1, r19
    dd0a:	14 06       	cpc	r1, r20
    dd0c:	05 06       	cpc	r0, r21
    dd0e:	08 95       	ret

0000dd10 <__fp_round>:
    dd10:	09 2e       	mov	r0, r25
    dd12:	03 94       	inc	r0
    dd14:	00 0c       	add	r0, r0
    dd16:	11 f4       	brne	.+4      	; 0xdd1c <__fp_round+0xc>
    dd18:	88 23       	and	r24, r24
    dd1a:	52 f0       	brmi	.+20     	; 0xdd30 <__fp_round+0x20>
    dd1c:	bb 0f       	add	r27, r27
    dd1e:	40 f4       	brcc	.+16     	; 0xdd30 <__fp_round+0x20>
    dd20:	bf 2b       	or	r27, r31
    dd22:	11 f4       	brne	.+4      	; 0xdd28 <__fp_round+0x18>
    dd24:	60 ff       	sbrs	r22, 0
    dd26:	04 c0       	rjmp	.+8      	; 0xdd30 <__fp_round+0x20>
    dd28:	6f 5f       	subi	r22, 0xFF	; 255
    dd2a:	7f 4f       	sbci	r23, 0xFF	; 255
    dd2c:	8f 4f       	sbci	r24, 0xFF	; 255
    dd2e:	9f 4f       	sbci	r25, 0xFF	; 255
    dd30:	08 95       	ret

0000dd32 <__fp_split3>:
    dd32:	57 fd       	sbrc	r21, 7
    dd34:	90 58       	subi	r25, 0x80	; 128
    dd36:	44 0f       	add	r20, r20
    dd38:	55 1f       	adc	r21, r21
    dd3a:	59 f0       	breq	.+22     	; 0xdd52 <__fp_splitA+0x10>
    dd3c:	5f 3f       	cpi	r21, 0xFF	; 255
    dd3e:	71 f0       	breq	.+28     	; 0xdd5c <__fp_splitA+0x1a>
    dd40:	47 95       	ror	r20

0000dd42 <__fp_splitA>:
    dd42:	88 0f       	add	r24, r24
    dd44:	97 fb       	bst	r25, 7
    dd46:	99 1f       	adc	r25, r25
    dd48:	61 f0       	breq	.+24     	; 0xdd62 <__fp_splitA+0x20>
    dd4a:	9f 3f       	cpi	r25, 0xFF	; 255
    dd4c:	79 f0       	breq	.+30     	; 0xdd6c <__fp_splitA+0x2a>
    dd4e:	87 95       	ror	r24
    dd50:	08 95       	ret
    dd52:	12 16       	cp	r1, r18
    dd54:	13 06       	cpc	r1, r19
    dd56:	14 06       	cpc	r1, r20
    dd58:	55 1f       	adc	r21, r21
    dd5a:	f2 cf       	rjmp	.-28     	; 0xdd40 <__fp_split3+0xe>
    dd5c:	46 95       	lsr	r20
    dd5e:	f1 df       	rcall	.-30     	; 0xdd42 <__fp_splitA>
    dd60:	08 c0       	rjmp	.+16     	; 0xdd72 <__fp_splitA+0x30>
    dd62:	16 16       	cp	r1, r22
    dd64:	17 06       	cpc	r1, r23
    dd66:	18 06       	cpc	r1, r24
    dd68:	99 1f       	adc	r25, r25
    dd6a:	f1 cf       	rjmp	.-30     	; 0xdd4e <__fp_splitA+0xc>
    dd6c:	86 95       	lsr	r24
    dd6e:	71 05       	cpc	r23, r1
    dd70:	61 05       	cpc	r22, r1
    dd72:	08 94       	sec
    dd74:	08 95       	ret

0000dd76 <__fp_zero>:
    dd76:	e8 94       	clt

0000dd78 <__fp_szero>:
    dd78:	bb 27       	eor	r27, r27
    dd7a:	66 27       	eor	r22, r22
    dd7c:	77 27       	eor	r23, r23
    dd7e:	cb 01       	movw	r24, r22
    dd80:	97 f9       	bld	r25, 7
    dd82:	08 95       	ret

0000dd84 <__gesf2>:
    dd84:	8a df       	rcall	.-236    	; 0xdc9a <__fp_cmp>
    dd86:	08 f4       	brcc	.+2      	; 0xdd8a <__gesf2+0x6>
    dd88:	8f ef       	ldi	r24, 0xFF	; 255
    dd8a:	08 95       	ret

0000dd8c <__mulsf3>:
    dd8c:	0b d0       	rcall	.+22     	; 0xdda4 <__mulsf3x>
    dd8e:	c0 cf       	rjmp	.-128    	; 0xdd10 <__fp_round>
    dd90:	b1 df       	rcall	.-158    	; 0xdcf4 <__fp_pscA>
    dd92:	28 f0       	brcs	.+10     	; 0xdd9e <__mulsf3+0x12>
    dd94:	b6 df       	rcall	.-148    	; 0xdd02 <__fp_pscB>
    dd96:	18 f0       	brcs	.+6      	; 0xdd9e <__mulsf3+0x12>
    dd98:	95 23       	and	r25, r21
    dd9a:	09 f0       	breq	.+2      	; 0xdd9e <__mulsf3+0x12>
    dd9c:	a2 cf       	rjmp	.-188    	; 0xdce2 <__fp_inf>
    dd9e:	a7 cf       	rjmp	.-178    	; 0xdcee <__fp_nan>
    dda0:	11 24       	eor	r1, r1
    dda2:	ea cf       	rjmp	.-44     	; 0xdd78 <__fp_szero>

0000dda4 <__mulsf3x>:
    dda4:	c6 df       	rcall	.-116    	; 0xdd32 <__fp_split3>
    dda6:	a0 f3       	brcs	.-24     	; 0xdd90 <__mulsf3+0x4>

0000dda8 <__mulsf3_pse>:
    dda8:	95 9f       	mul	r25, r21
    ddaa:	d1 f3       	breq	.-12     	; 0xdda0 <__mulsf3+0x14>
    ddac:	95 0f       	add	r25, r21
    ddae:	50 e0       	ldi	r21, 0x00	; 0
    ddb0:	55 1f       	adc	r21, r21
    ddb2:	62 9f       	mul	r22, r18
    ddb4:	f0 01       	movw	r30, r0
    ddb6:	72 9f       	mul	r23, r18
    ddb8:	bb 27       	eor	r27, r27
    ddba:	f0 0d       	add	r31, r0
    ddbc:	b1 1d       	adc	r27, r1
    ddbe:	63 9f       	mul	r22, r19
    ddc0:	aa 27       	eor	r26, r26
    ddc2:	f0 0d       	add	r31, r0
    ddc4:	b1 1d       	adc	r27, r1
    ddc6:	aa 1f       	adc	r26, r26
    ddc8:	64 9f       	mul	r22, r20
    ddca:	66 27       	eor	r22, r22
    ddcc:	b0 0d       	add	r27, r0
    ddce:	a1 1d       	adc	r26, r1
    ddd0:	66 1f       	adc	r22, r22
    ddd2:	82 9f       	mul	r24, r18
    ddd4:	22 27       	eor	r18, r18
    ddd6:	b0 0d       	add	r27, r0
    ddd8:	a1 1d       	adc	r26, r1
    ddda:	62 1f       	adc	r22, r18
    dddc:	73 9f       	mul	r23, r19
    ddde:	b0 0d       	add	r27, r0
    dde0:	a1 1d       	adc	r26, r1
    dde2:	62 1f       	adc	r22, r18
    dde4:	83 9f       	mul	r24, r19
    dde6:	a0 0d       	add	r26, r0
    dde8:	61 1d       	adc	r22, r1
    ddea:	22 1f       	adc	r18, r18
    ddec:	74 9f       	mul	r23, r20
    ddee:	33 27       	eor	r19, r19
    ddf0:	a0 0d       	add	r26, r0
    ddf2:	61 1d       	adc	r22, r1
    ddf4:	23 1f       	adc	r18, r19
    ddf6:	84 9f       	mul	r24, r20
    ddf8:	60 0d       	add	r22, r0
    ddfa:	21 1d       	adc	r18, r1
    ddfc:	82 2f       	mov	r24, r18
    ddfe:	76 2f       	mov	r23, r22
    de00:	6a 2f       	mov	r22, r26
    de02:	11 24       	eor	r1, r1
    de04:	9f 57       	subi	r25, 0x7F	; 127
    de06:	50 40       	sbci	r21, 0x00	; 0
    de08:	8a f0       	brmi	.+34     	; 0xde2c <__mulsf3_pse+0x84>
    de0a:	e1 f0       	breq	.+56     	; 0xde44 <__mulsf3_pse+0x9c>
    de0c:	88 23       	and	r24, r24
    de0e:	4a f0       	brmi	.+18     	; 0xde22 <__mulsf3_pse+0x7a>
    de10:	ee 0f       	add	r30, r30
    de12:	ff 1f       	adc	r31, r31
    de14:	bb 1f       	adc	r27, r27
    de16:	66 1f       	adc	r22, r22
    de18:	77 1f       	adc	r23, r23
    de1a:	88 1f       	adc	r24, r24
    de1c:	91 50       	subi	r25, 0x01	; 1
    de1e:	50 40       	sbci	r21, 0x00	; 0
    de20:	a9 f7       	brne	.-22     	; 0xde0c <__mulsf3_pse+0x64>
    de22:	9e 3f       	cpi	r25, 0xFE	; 254
    de24:	51 05       	cpc	r21, r1
    de26:	70 f0       	brcs	.+28     	; 0xde44 <__mulsf3_pse+0x9c>
    de28:	5c cf       	rjmp	.-328    	; 0xdce2 <__fp_inf>
    de2a:	a6 cf       	rjmp	.-180    	; 0xdd78 <__fp_szero>
    de2c:	5f 3f       	cpi	r21, 0xFF	; 255
    de2e:	ec f3       	brlt	.-6      	; 0xde2a <__mulsf3_pse+0x82>
    de30:	98 3e       	cpi	r25, 0xE8	; 232
    de32:	dc f3       	brlt	.-10     	; 0xde2a <__mulsf3_pse+0x82>
    de34:	86 95       	lsr	r24
    de36:	77 95       	ror	r23
    de38:	67 95       	ror	r22
    de3a:	b7 95       	ror	r27
    de3c:	f7 95       	ror	r31
    de3e:	e7 95       	ror	r30
    de40:	9f 5f       	subi	r25, 0xFF	; 255
    de42:	c1 f7       	brne	.-16     	; 0xde34 <__mulsf3_pse+0x8c>
    de44:	fe 2b       	or	r31, r30
    de46:	88 0f       	add	r24, r24
    de48:	91 1d       	adc	r25, r1
    de4a:	96 95       	lsr	r25
    de4c:	87 95       	ror	r24
    de4e:	97 f9       	bld	r25, 7
    de50:	08 95       	ret

0000de52 <__udivmodhi4>:
    de52:	aa 1b       	sub	r26, r26
    de54:	bb 1b       	sub	r27, r27
    de56:	51 e1       	ldi	r21, 0x11	; 17
    de58:	07 c0       	rjmp	.+14     	; 0xde68 <__udivmodhi4_ep>

0000de5a <__udivmodhi4_loop>:
    de5a:	aa 1f       	adc	r26, r26
    de5c:	bb 1f       	adc	r27, r27
    de5e:	a6 17       	cp	r26, r22
    de60:	b7 07       	cpc	r27, r23
    de62:	10 f0       	brcs	.+4      	; 0xde68 <__udivmodhi4_ep>
    de64:	a6 1b       	sub	r26, r22
    de66:	b7 0b       	sbc	r27, r23

0000de68 <__udivmodhi4_ep>:
    de68:	88 1f       	adc	r24, r24
    de6a:	99 1f       	adc	r25, r25
    de6c:	5a 95       	dec	r21
    de6e:	a9 f7       	brne	.-22     	; 0xde5a <__udivmodhi4_loop>
    de70:	80 95       	com	r24
    de72:	90 95       	com	r25
    de74:	bc 01       	movw	r22, r24
    de76:	cd 01       	movw	r24, r26
    de78:	08 95       	ret

0000de7a <__divmodhi4>:
    de7a:	97 fb       	bst	r25, 7
    de7c:	09 2e       	mov	r0, r25
    de7e:	07 26       	eor	r0, r23
    de80:	0a d0       	rcall	.+20     	; 0xde96 <__divmodhi4_neg1>
    de82:	77 fd       	sbrc	r23, 7
    de84:	04 d0       	rcall	.+8      	; 0xde8e <__divmodhi4_neg2>
    de86:	e5 df       	rcall	.-54     	; 0xde52 <__udivmodhi4>
    de88:	06 d0       	rcall	.+12     	; 0xde96 <__divmodhi4_neg1>
    de8a:	00 20       	and	r0, r0
    de8c:	1a f4       	brpl	.+6      	; 0xde94 <__divmodhi4_exit>

0000de8e <__divmodhi4_neg2>:
    de8e:	70 95       	com	r23
    de90:	61 95       	neg	r22
    de92:	7f 4f       	sbci	r23, 0xFF	; 255

0000de94 <__divmodhi4_exit>:
    de94:	08 95       	ret

0000de96 <__divmodhi4_neg1>:
    de96:	f6 f7       	brtc	.-4      	; 0xde94 <__divmodhi4_exit>
    de98:	90 95       	com	r25
    de9a:	81 95       	neg	r24
    de9c:	9f 4f       	sbci	r25, 0xFF	; 255
    de9e:	08 95       	ret

0000dea0 <malloc>:
    dea0:	cf 93       	push	r28
    dea2:	df 93       	push	r29
    dea4:	ac 01       	movw	r20, r24
    dea6:	82 30       	cpi	r24, 0x02	; 2
    dea8:	91 05       	cpc	r25, r1
    deaa:	10 f4       	brcc	.+4      	; 0xdeb0 <malloc+0x10>
    deac:	42 e0       	ldi	r20, 0x02	; 2
    deae:	50 e0       	ldi	r21, 0x00	; 0
    deb0:	e0 91 0d 05 	lds	r30, 0x050D
    deb4:	f0 91 0e 05 	lds	r31, 0x050E
    deb8:	20 e0       	ldi	r18, 0x00	; 0
    deba:	30 e0       	ldi	r19, 0x00	; 0
    debc:	a0 e0       	ldi	r26, 0x00	; 0
    debe:	b0 e0       	ldi	r27, 0x00	; 0
    dec0:	24 c0       	rjmp	.+72     	; 0xdf0a <malloc+0x6a>
    dec2:	80 81       	ld	r24, Z
    dec4:	91 81       	ldd	r25, Z+1	; 0x01
    dec6:	84 17       	cp	r24, r20
    dec8:	95 07       	cpc	r25, r21
    deca:	d0 f0       	brcs	.+52     	; 0xdf00 <malloc+0x60>
    decc:	84 17       	cp	r24, r20
    dece:	95 07       	cpc	r25, r21
    ded0:	71 f4       	brne	.+28     	; 0xdeee <malloc+0x4e>
    ded2:	82 81       	ldd	r24, Z+2	; 0x02
    ded4:	93 81       	ldd	r25, Z+3	; 0x03
    ded6:	10 97       	sbiw	r26, 0x00	; 0
    ded8:	29 f0       	breq	.+10     	; 0xdee4 <malloc+0x44>
    deda:	13 96       	adiw	r26, 0x03	; 3
    dedc:	9c 93       	st	X, r25
    dede:	8e 93       	st	-X, r24
    dee0:	12 97       	sbiw	r26, 0x02	; 2
    dee2:	2c c0       	rjmp	.+88     	; 0xdf3c <malloc+0x9c>
    dee4:	90 93 0e 05 	sts	0x050E, r25
    dee8:	80 93 0d 05 	sts	0x050D, r24
    deec:	27 c0       	rjmp	.+78     	; 0xdf3c <malloc+0x9c>
    deee:	21 15       	cp	r18, r1
    def0:	31 05       	cpc	r19, r1
    def2:	19 f0       	breq	.+6      	; 0xdefa <malloc+0x5a>
    def4:	82 17       	cp	r24, r18
    def6:	93 07       	cpc	r25, r19
    def8:	18 f4       	brcc	.+6      	; 0xdf00 <malloc+0x60>
    defa:	9c 01       	movw	r18, r24
    defc:	bd 01       	movw	r22, r26
    defe:	ef 01       	movw	r28, r30
    df00:	92 81       	ldd	r25, Z+2	; 0x02
    df02:	83 81       	ldd	r24, Z+3	; 0x03
    df04:	df 01       	movw	r26, r30
    df06:	e9 2f       	mov	r30, r25
    df08:	f8 2f       	mov	r31, r24
    df0a:	30 97       	sbiw	r30, 0x00	; 0
    df0c:	d1 f6       	brne	.-76     	; 0xdec2 <malloc+0x22>
    df0e:	21 15       	cp	r18, r1
    df10:	31 05       	cpc	r19, r1
    df12:	f9 f0       	breq	.+62     	; 0xdf52 <malloc+0xb2>
    df14:	c9 01       	movw	r24, r18
    df16:	84 1b       	sub	r24, r20
    df18:	95 0b       	sbc	r25, r21
    df1a:	84 30       	cpi	r24, 0x04	; 4
    df1c:	91 05       	cpc	r25, r1
    df1e:	80 f4       	brcc	.+32     	; 0xdf40 <malloc+0xa0>
    df20:	8a 81       	ldd	r24, Y+2	; 0x02
    df22:	9b 81       	ldd	r25, Y+3	; 0x03
    df24:	61 15       	cp	r22, r1
    df26:	71 05       	cpc	r23, r1
    df28:	21 f0       	breq	.+8      	; 0xdf32 <malloc+0x92>
    df2a:	fb 01       	movw	r30, r22
    df2c:	93 83       	std	Z+3, r25	; 0x03
    df2e:	82 83       	std	Z+2, r24	; 0x02
    df30:	04 c0       	rjmp	.+8      	; 0xdf3a <malloc+0x9a>
    df32:	90 93 0e 05 	sts	0x050E, r25
    df36:	80 93 0d 05 	sts	0x050D, r24
    df3a:	fe 01       	movw	r30, r28
    df3c:	32 96       	adiw	r30, 0x02	; 2
    df3e:	42 c0       	rjmp	.+132    	; 0xdfc4 <malloc+0x124>
    df40:	fe 01       	movw	r30, r28
    df42:	e8 0f       	add	r30, r24
    df44:	f9 1f       	adc	r31, r25
    df46:	41 93       	st	Z+, r20
    df48:	51 93       	st	Z+, r21
    df4a:	02 97       	sbiw	r24, 0x02	; 2
    df4c:	99 83       	std	Y+1, r25	; 0x01
    df4e:	88 83       	st	Y, r24
    df50:	39 c0       	rjmp	.+114    	; 0xdfc4 <malloc+0x124>
    df52:	80 91 0b 05 	lds	r24, 0x050B
    df56:	90 91 0c 05 	lds	r25, 0x050C
    df5a:	00 97       	sbiw	r24, 0x00	; 0
    df5c:	41 f4       	brne	.+16     	; 0xdf6e <malloc+0xce>
    df5e:	80 91 3b 03 	lds	r24, 0x033B
    df62:	90 91 3c 03 	lds	r25, 0x033C
    df66:	90 93 0c 05 	sts	0x050C, r25
    df6a:	80 93 0b 05 	sts	0x050B, r24
    df6e:	20 91 39 03 	lds	r18, 0x0339
    df72:	30 91 3a 03 	lds	r19, 0x033A
    df76:	21 15       	cp	r18, r1
    df78:	31 05       	cpc	r19, r1
    df7a:	41 f4       	brne	.+16     	; 0xdf8c <malloc+0xec>
    df7c:	2d b7       	in	r18, 0x3d	; 61
    df7e:	3e b7       	in	r19, 0x3e	; 62
    df80:	80 91 3d 03 	lds	r24, 0x033D
    df84:	90 91 3e 03 	lds	r25, 0x033E
    df88:	28 1b       	sub	r18, r24
    df8a:	39 0b       	sbc	r19, r25
    df8c:	e0 91 0b 05 	lds	r30, 0x050B
    df90:	f0 91 0c 05 	lds	r31, 0x050C
    df94:	e2 17       	cp	r30, r18
    df96:	f3 07       	cpc	r31, r19
    df98:	98 f4       	brcc	.+38     	; 0xdfc0 <malloc+0x120>
    df9a:	2e 1b       	sub	r18, r30
    df9c:	3f 0b       	sbc	r19, r31
    df9e:	24 17       	cp	r18, r20
    dfa0:	35 07       	cpc	r19, r21
    dfa2:	70 f0       	brcs	.+28     	; 0xdfc0 <malloc+0x120>
    dfa4:	ca 01       	movw	r24, r20
    dfa6:	02 96       	adiw	r24, 0x02	; 2
    dfa8:	28 17       	cp	r18, r24
    dfaa:	39 07       	cpc	r19, r25
    dfac:	48 f0       	brcs	.+18     	; 0xdfc0 <malloc+0x120>
    dfae:	8e 0f       	add	r24, r30
    dfb0:	9f 1f       	adc	r25, r31
    dfb2:	90 93 0c 05 	sts	0x050C, r25
    dfb6:	80 93 0b 05 	sts	0x050B, r24
    dfba:	41 93       	st	Z+, r20
    dfbc:	51 93       	st	Z+, r21
    dfbe:	02 c0       	rjmp	.+4      	; 0xdfc4 <malloc+0x124>
    dfc0:	e0 e0       	ldi	r30, 0x00	; 0
    dfc2:	f0 e0       	ldi	r31, 0x00	; 0
    dfc4:	cf 01       	movw	r24, r30
    dfc6:	df 91       	pop	r29
    dfc8:	cf 91       	pop	r28
    dfca:	08 95       	ret

0000dfcc <free>:
    dfcc:	0f 93       	push	r16
    dfce:	1f 93       	push	r17
    dfd0:	cf 93       	push	r28
    dfd2:	df 93       	push	r29
    dfd4:	9c 01       	movw	r18, r24
    dfd6:	00 97       	sbiw	r24, 0x00	; 0
    dfd8:	09 f4       	brne	.+2      	; 0xdfdc <free+0x10>
    dfda:	8c c0       	rjmp	.+280    	; 0xe0f4 <free+0x128>
    dfdc:	dc 01       	movw	r26, r24
    dfde:	12 97       	sbiw	r26, 0x02	; 2
    dfe0:	13 96       	adiw	r26, 0x03	; 3
    dfe2:	1c 92       	st	X, r1
    dfe4:	1e 92       	st	-X, r1
    dfe6:	12 97       	sbiw	r26, 0x02	; 2
    dfe8:	60 91 0d 05 	lds	r22, 0x050D
    dfec:	70 91 0e 05 	lds	r23, 0x050E
    dff0:	61 15       	cp	r22, r1
    dff2:	71 05       	cpc	r23, r1
    dff4:	89 f4       	brne	.+34     	; 0xe018 <free+0x4c>
    dff6:	8d 91       	ld	r24, X+
    dff8:	9c 91       	ld	r25, X
    dffa:	11 97       	sbiw	r26, 0x01	; 1
    dffc:	82 0f       	add	r24, r18
    dffe:	93 1f       	adc	r25, r19
    e000:	20 91 0b 05 	lds	r18, 0x050B
    e004:	30 91 0c 05 	lds	r19, 0x050C
    e008:	28 17       	cp	r18, r24
    e00a:	39 07       	cpc	r19, r25
    e00c:	69 f5       	brne	.+90     	; 0xe068 <free+0x9c>
    e00e:	b0 93 0c 05 	sts	0x050C, r27
    e012:	a0 93 0b 05 	sts	0x050B, r26
    e016:	6e c0       	rjmp	.+220    	; 0xe0f4 <free+0x128>
    e018:	fb 01       	movw	r30, r22
    e01a:	40 e0       	ldi	r20, 0x00	; 0
    e01c:	50 e0       	ldi	r21, 0x00	; 0
    e01e:	01 c0       	rjmp	.+2      	; 0xe022 <free+0x56>
    e020:	fc 01       	movw	r30, r24
    e022:	ea 17       	cp	r30, r26
    e024:	fb 07       	cpc	r31, r27
    e026:	30 f4       	brcc	.+12     	; 0xe034 <free+0x68>
    e028:	82 81       	ldd	r24, Z+2	; 0x02
    e02a:	93 81       	ldd	r25, Z+3	; 0x03
    e02c:	af 01       	movw	r20, r30
    e02e:	00 97       	sbiw	r24, 0x00	; 0
    e030:	b9 f7       	brne	.-18     	; 0xe020 <free+0x54>
    e032:	1f c0       	rjmp	.+62     	; 0xe072 <free+0xa6>
    e034:	e9 01       	movw	r28, r18
    e036:	22 97       	sbiw	r28, 0x02	; 2
    e038:	fb 83       	std	Y+3, r31	; 0x03
    e03a:	ea 83       	std	Y+2, r30	; 0x02
    e03c:	08 81       	ld	r16, Y
    e03e:	19 81       	ldd	r17, Y+1	; 0x01
    e040:	c9 01       	movw	r24, r18
    e042:	80 0f       	add	r24, r16
    e044:	91 1f       	adc	r25, r17
    e046:	8e 17       	cp	r24, r30
    e048:	9f 07       	cpc	r25, r31
    e04a:	59 f4       	brne	.+22     	; 0xe062 <free+0x96>
    e04c:	80 81       	ld	r24, Z
    e04e:	91 81       	ldd	r25, Z+1	; 0x01
    e050:	80 0f       	add	r24, r16
    e052:	91 1f       	adc	r25, r17
    e054:	02 96       	adiw	r24, 0x02	; 2
    e056:	99 83       	std	Y+1, r25	; 0x01
    e058:	88 83       	st	Y, r24
    e05a:	82 81       	ldd	r24, Z+2	; 0x02
    e05c:	93 81       	ldd	r25, Z+3	; 0x03
    e05e:	9b 83       	std	Y+3, r25	; 0x03
    e060:	8a 83       	std	Y+2, r24	; 0x02
    e062:	41 15       	cp	r20, r1
    e064:	51 05       	cpc	r21, r1
    e066:	29 f4       	brne	.+10     	; 0xe072 <free+0xa6>
    e068:	b0 93 0e 05 	sts	0x050E, r27
    e06c:	a0 93 0d 05 	sts	0x050D, r26
    e070:	41 c0       	rjmp	.+130    	; 0xe0f4 <free+0x128>
    e072:	fa 01       	movw	r30, r20
    e074:	b3 83       	std	Z+3, r27	; 0x03
    e076:	a2 83       	std	Z+2, r26	; 0x02
    e078:	c1 91       	ld	r28, Z+
    e07a:	d1 91       	ld	r29, Z+
    e07c:	ec 0f       	add	r30, r28
    e07e:	fd 1f       	adc	r31, r29
    e080:	ae 17       	cp	r26, r30
    e082:	bf 07       	cpc	r27, r31
    e084:	81 f4       	brne	.+32     	; 0xe0a6 <free+0xda>
    e086:	f9 01       	movw	r30, r18
    e088:	92 91       	ld	r25, -Z
    e08a:	82 91       	ld	r24, -Z
    e08c:	8c 0f       	add	r24, r28
    e08e:	9d 1f       	adc	r25, r29
    e090:	02 96       	adiw	r24, 0x02	; 2
    e092:	da 01       	movw	r26, r20
    e094:	11 96       	adiw	r26, 0x01	; 1
    e096:	9c 93       	st	X, r25
    e098:	8e 93       	st	-X, r24
    e09a:	82 81       	ldd	r24, Z+2	; 0x02
    e09c:	93 81       	ldd	r25, Z+3	; 0x03
    e09e:	13 96       	adiw	r26, 0x03	; 3
    e0a0:	9c 93       	st	X, r25
    e0a2:	8e 93       	st	-X, r24
    e0a4:	12 97       	sbiw	r26, 0x02	; 2
    e0a6:	e0 e0       	ldi	r30, 0x00	; 0
    e0a8:	f0 e0       	ldi	r31, 0x00	; 0
    e0aa:	02 c0       	rjmp	.+4      	; 0xe0b0 <free+0xe4>
    e0ac:	fb 01       	movw	r30, r22
    e0ae:	bc 01       	movw	r22, r24
    e0b0:	db 01       	movw	r26, r22
    e0b2:	12 96       	adiw	r26, 0x02	; 2
    e0b4:	8d 91       	ld	r24, X+
    e0b6:	9c 91       	ld	r25, X
    e0b8:	13 97       	sbiw	r26, 0x03	; 3
    e0ba:	00 97       	sbiw	r24, 0x00	; 0
    e0bc:	b9 f7       	brne	.-18     	; 0xe0ac <free+0xe0>
    e0be:	cb 01       	movw	r24, r22
    e0c0:	02 96       	adiw	r24, 0x02	; 2
    e0c2:	2d 91       	ld	r18, X+
    e0c4:	3c 91       	ld	r19, X
    e0c6:	11 97       	sbiw	r26, 0x01	; 1
    e0c8:	82 0f       	add	r24, r18
    e0ca:	93 1f       	adc	r25, r19
    e0cc:	20 91 0b 05 	lds	r18, 0x050B
    e0d0:	30 91 0c 05 	lds	r19, 0x050C
    e0d4:	28 17       	cp	r18, r24
    e0d6:	39 07       	cpc	r19, r25
    e0d8:	69 f4       	brne	.+26     	; 0xe0f4 <free+0x128>
    e0da:	30 97       	sbiw	r30, 0x00	; 0
    e0dc:	29 f4       	brne	.+10     	; 0xe0e8 <free+0x11c>
    e0de:	10 92 0e 05 	sts	0x050E, r1
    e0e2:	10 92 0d 05 	sts	0x050D, r1
    e0e6:	02 c0       	rjmp	.+4      	; 0xe0ec <free+0x120>
    e0e8:	13 82       	std	Z+3, r1	; 0x03
    e0ea:	12 82       	std	Z+2, r1	; 0x02
    e0ec:	70 93 0c 05 	sts	0x050C, r23
    e0f0:	60 93 0b 05 	sts	0x050B, r22
    e0f4:	df 91       	pop	r29
    e0f6:	cf 91       	pop	r28
    e0f8:	1f 91       	pop	r17
    e0fa:	0f 91       	pop	r16
    e0fc:	08 95       	ret

0000e0fe <realloc>:
    e0fe:	8f 92       	push	r8
    e100:	9f 92       	push	r9
    e102:	af 92       	push	r10
    e104:	bf 92       	push	r11
    e106:	cf 92       	push	r12
    e108:	df 92       	push	r13
    e10a:	ef 92       	push	r14
    e10c:	ff 92       	push	r15
    e10e:	0f 93       	push	r16
    e110:	1f 93       	push	r17
    e112:	cf 93       	push	r28
    e114:	df 93       	push	r29
    e116:	0f 92       	push	r0
    e118:	0f 92       	push	r0
    e11a:	cd b7       	in	r28, 0x3d	; 61
    e11c:	de b7       	in	r29, 0x3e	; 62
    e11e:	8c 01       	movw	r16, r24
    e120:	00 97       	sbiw	r24, 0x00	; 0
    e122:	29 f4       	brne	.+10     	; 0xe12e <realloc+0x30>
    e124:	cb 01       	movw	r24, r22
    e126:	0e 94 50 6f 	call	0xdea0	; 0xdea0 <malloc>
    e12a:	8c 01       	movw	r16, r24
    e12c:	b8 c0       	rjmp	.+368    	; 0xe29e <realloc+0x1a0>
    e12e:	dc 01       	movw	r26, r24
    e130:	a6 0f       	add	r26, r22
    e132:	b7 1f       	adc	r27, r23
    e134:	fc 01       	movw	r30, r24
    e136:	32 97       	sbiw	r30, 0x02	; 2
    e138:	ae 17       	cp	r26, r30
    e13a:	bf 07       	cpc	r27, r31
    e13c:	08 f4       	brcc	.+2      	; 0xe140 <realloc+0x42>
    e13e:	ad c0       	rjmp	.+346    	; 0xe29a <realloc+0x19c>
    e140:	20 81       	ld	r18, Z
    e142:	31 81       	ldd	r19, Z+1	; 0x01
    e144:	26 17       	cp	r18, r22
    e146:	37 07       	cpc	r19, r23
    e148:	b0 f0       	brcs	.+44     	; 0xe176 <realloc+0x78>
    e14a:	25 30       	cpi	r18, 0x05	; 5
    e14c:	31 05       	cpc	r19, r1
    e14e:	08 f4       	brcc	.+2      	; 0xe152 <realloc+0x54>
    e150:	a6 c0       	rjmp	.+332    	; 0xe29e <realloc+0x1a0>
    e152:	c9 01       	movw	r24, r18
    e154:	04 97       	sbiw	r24, 0x04	; 4
    e156:	86 17       	cp	r24, r22
    e158:	97 07       	cpc	r25, r23
    e15a:	08 f4       	brcc	.+2      	; 0xe15e <realloc+0x60>
    e15c:	a0 c0       	rjmp	.+320    	; 0xe29e <realloc+0x1a0>
    e15e:	22 50       	subi	r18, 0x02	; 2
    e160:	30 40       	sbci	r19, 0x00	; 0
    e162:	26 1b       	sub	r18, r22
    e164:	37 0b       	sbc	r19, r23
    e166:	2d 93       	st	X+, r18
    e168:	3d 93       	st	X+, r19
    e16a:	cd 01       	movw	r24, r26
    e16c:	71 83       	std	Z+1, r23	; 0x01
    e16e:	60 83       	st	Z, r22
    e170:	0e 94 e6 6f 	call	0xdfcc	; 0xdfcc <free>
    e174:	94 c0       	rjmp	.+296    	; 0xe29e <realloc+0x1a0>
    e176:	6b 01       	movw	r12, r22
    e178:	c2 1a       	sub	r12, r18
    e17a:	d3 0a       	sbc	r13, r19
    e17c:	5c 01       	movw	r10, r24
    e17e:	a2 0e       	add	r10, r18
    e180:	b3 1e       	adc	r11, r19
    e182:	e0 91 0d 05 	lds	r30, 0x050D
    e186:	f0 91 0e 05 	lds	r31, 0x050E
    e18a:	40 e0       	ldi	r20, 0x00	; 0
    e18c:	50 e0       	ldi	r21, 0x00	; 0
    e18e:	88 24       	eor	r8, r8
    e190:	99 24       	eor	r9, r9
    e192:	49 c0       	rjmp	.+146    	; 0xe226 <realloc+0x128>
    e194:	ea 15       	cp	r30, r10
    e196:	fb 05       	cpc	r31, r11
    e198:	e1 f5       	brne	.+120    	; 0xe212 <realloc+0x114>
    e19a:	e0 80       	ld	r14, Z
    e19c:	f1 80       	ldd	r15, Z+1	; 0x01
    e19e:	c7 01       	movw	r24, r14
    e1a0:	02 96       	adiw	r24, 0x02	; 2
    e1a2:	8c 15       	cp	r24, r12
    e1a4:	9d 05       	cpc	r25, r13
    e1a6:	a8 f1       	brcs	.+106    	; 0xe212 <realloc+0x114>
    e1a8:	a7 01       	movw	r20, r14
    e1aa:	4c 19       	sub	r20, r12
    e1ac:	5d 09       	sbc	r21, r13
    e1ae:	ca 01       	movw	r24, r20
    e1b0:	02 96       	adiw	r24, 0x02	; 2
    e1b2:	0f 2e       	mov	r0, r31
    e1b4:	fe ef       	ldi	r31, 0xFE	; 254
    e1b6:	cf 2e       	mov	r12, r31
    e1b8:	ff ef       	ldi	r31, 0xFF	; 255
    e1ba:	df 2e       	mov	r13, r31
    e1bc:	f0 2d       	mov	r31, r0
    e1be:	c0 0e       	add	r12, r16
    e1c0:	d1 1e       	adc	r13, r17
    e1c2:	85 30       	cpi	r24, 0x05	; 5
    e1c4:	91 05       	cpc	r25, r1
    e1c6:	78 f0       	brcs	.+30     	; 0xe1e6 <realloc+0xe8>
    e1c8:	82 81       	ldd	r24, Z+2	; 0x02
    e1ca:	93 81       	ldd	r25, Z+3	; 0x03
    e1cc:	13 96       	adiw	r26, 0x03	; 3
    e1ce:	9c 93       	st	X, r25
    e1d0:	8e 93       	st	-X, r24
    e1d2:	12 97       	sbiw	r26, 0x02	; 2
    e1d4:	11 96       	adiw	r26, 0x01	; 1
    e1d6:	5c 93       	st	X, r21
    e1d8:	4e 93       	st	-X, r20
    e1da:	f6 01       	movw	r30, r12
    e1dc:	71 83       	std	Z+1, r23	; 0x01
    e1de:	60 83       	st	Z, r22
    e1e0:	9a 2f       	mov	r25, r26
    e1e2:	8b 2f       	mov	r24, r27
    e1e4:	0a c0       	rjmp	.+20     	; 0xe1fa <realloc+0xfc>
    e1e6:	c9 01       	movw	r24, r18
    e1e8:	02 96       	adiw	r24, 0x02	; 2
    e1ea:	8e 0d       	add	r24, r14
    e1ec:	9f 1d       	adc	r25, r15
    e1ee:	d6 01       	movw	r26, r12
    e1f0:	11 96       	adiw	r26, 0x01	; 1
    e1f2:	9c 93       	st	X, r25
    e1f4:	8e 93       	st	-X, r24
    e1f6:	92 81       	ldd	r25, Z+2	; 0x02
    e1f8:	83 81       	ldd	r24, Z+3	; 0x03
    e1fa:	81 14       	cp	r8, r1
    e1fc:	91 04       	cpc	r9, r1
    e1fe:	21 f0       	breq	.+8      	; 0xe208 <realloc+0x10a>
    e200:	f4 01       	movw	r30, r8
    e202:	92 83       	std	Z+2, r25	; 0x02
    e204:	83 83       	std	Z+3, r24	; 0x03
    e206:	4b c0       	rjmp	.+150    	; 0xe29e <realloc+0x1a0>
    e208:	90 93 0d 05 	sts	0x050D, r25
    e20c:	80 93 0e 05 	sts	0x050E, r24
    e210:	46 c0       	rjmp	.+140    	; 0xe29e <realloc+0x1a0>
    e212:	80 81       	ld	r24, Z
    e214:	91 81       	ldd	r25, Z+1	; 0x01
    e216:	48 17       	cp	r20, r24
    e218:	59 07       	cpc	r21, r25
    e21a:	08 f4       	brcc	.+2      	; 0xe21e <realloc+0x120>
    e21c:	ac 01       	movw	r20, r24
    e21e:	82 81       	ldd	r24, Z+2	; 0x02
    e220:	93 81       	ldd	r25, Z+3	; 0x03
    e222:	4f 01       	movw	r8, r30
    e224:	fc 01       	movw	r30, r24
    e226:	30 97       	sbiw	r30, 0x00	; 0
    e228:	09 f0       	breq	.+2      	; 0xe22c <realloc+0x12e>
    e22a:	b4 cf       	rjmp	.-152    	; 0xe194 <realloc+0x96>
    e22c:	80 91 0b 05 	lds	r24, 0x050B
    e230:	90 91 0c 05 	lds	r25, 0x050C
    e234:	8a 15       	cp	r24, r10
    e236:	9b 05       	cpc	r25, r11
    e238:	e9 f4       	brne	.+58     	; 0xe274 <realloc+0x176>
    e23a:	46 17       	cp	r20, r22
    e23c:	57 07       	cpc	r21, r23
    e23e:	d0 f4       	brcc	.+52     	; 0xe274 <realloc+0x176>
    e240:	80 91 39 03 	lds	r24, 0x0339
    e244:	90 91 3a 03 	lds	r25, 0x033A
    e248:	00 97       	sbiw	r24, 0x00	; 0
    e24a:	41 f4       	brne	.+16     	; 0xe25c <realloc+0x15e>
    e24c:	8d b7       	in	r24, 0x3d	; 61
    e24e:	9e b7       	in	r25, 0x3e	; 62
    e250:	20 91 3d 03 	lds	r18, 0x033D
    e254:	30 91 3e 03 	lds	r19, 0x033E
    e258:	82 1b       	sub	r24, r18
    e25a:	93 0b       	sbc	r25, r19
    e25c:	a8 17       	cp	r26, r24
    e25e:	b9 07       	cpc	r27, r25
    e260:	e0 f4       	brcc	.+56     	; 0xe29a <realloc+0x19c>
    e262:	b0 93 0c 05 	sts	0x050C, r27
    e266:	a0 93 0b 05 	sts	0x050B, r26
    e26a:	f8 01       	movw	r30, r16
    e26c:	32 97       	sbiw	r30, 0x02	; 2
    e26e:	71 83       	std	Z+1, r23	; 0x01
    e270:	60 83       	st	Z, r22
    e272:	15 c0       	rjmp	.+42     	; 0xe29e <realloc+0x1a0>
    e274:	cb 01       	movw	r24, r22
    e276:	29 83       	std	Y+1, r18	; 0x01
    e278:	3a 83       	std	Y+2, r19	; 0x02
    e27a:	0e 94 50 6f 	call	0xdea0	; 0xdea0 <malloc>
    e27e:	7c 01       	movw	r14, r24
    e280:	29 81       	ldd	r18, Y+1	; 0x01
    e282:	3a 81       	ldd	r19, Y+2	; 0x02
    e284:	00 97       	sbiw	r24, 0x00	; 0
    e286:	49 f0       	breq	.+18     	; 0xe29a <realloc+0x19c>
    e288:	b8 01       	movw	r22, r16
    e28a:	a9 01       	movw	r20, r18
    e28c:	0e 94 64 71 	call	0xe2c8	; 0xe2c8 <memcpy>
    e290:	c8 01       	movw	r24, r16
    e292:	0e 94 e6 6f 	call	0xdfcc	; 0xdfcc <free>
    e296:	87 01       	movw	r16, r14
    e298:	02 c0       	rjmp	.+4      	; 0xe29e <realloc+0x1a0>
    e29a:	00 e0       	ldi	r16, 0x00	; 0
    e29c:	10 e0       	ldi	r17, 0x00	; 0
    e29e:	c8 01       	movw	r24, r16
    e2a0:	0f 90       	pop	r0
    e2a2:	0f 90       	pop	r0
    e2a4:	df 91       	pop	r29
    e2a6:	cf 91       	pop	r28
    e2a8:	1f 91       	pop	r17
    e2aa:	0f 91       	pop	r16
    e2ac:	ff 90       	pop	r15
    e2ae:	ef 90       	pop	r14
    e2b0:	df 90       	pop	r13
    e2b2:	cf 90       	pop	r12
    e2b4:	bf 90       	pop	r11
    e2b6:	af 90       	pop	r10
    e2b8:	9f 90       	pop	r9
    e2ba:	8f 90       	pop	r8
    e2bc:	08 95       	ret

0000e2be <strtok>:
    e2be:	4e e3       	ldi	r20, 0x3E	; 62
    e2c0:	54 e0       	ldi	r21, 0x04	; 4
    e2c2:	0e 94 7f 71 	call	0xe2fe	; 0xe2fe <strtok_r>
    e2c6:	08 95       	ret

0000e2c8 <memcpy>:
    e2c8:	fb 01       	movw	r30, r22
    e2ca:	dc 01       	movw	r26, r24
    e2cc:	02 c0       	rjmp	.+4      	; 0xe2d2 <memcpy+0xa>
    e2ce:	01 90       	ld	r0, Z+
    e2d0:	0d 92       	st	X+, r0
    e2d2:	41 50       	subi	r20, 0x01	; 1
    e2d4:	50 40       	sbci	r21, 0x00	; 0
    e2d6:	d8 f7       	brcc	.-10     	; 0xe2ce <memcpy+0x6>
    e2d8:	08 95       	ret

0000e2da <strcat>:
    e2da:	fb 01       	movw	r30, r22
    e2dc:	dc 01       	movw	r26, r24
    e2de:	0d 90       	ld	r0, X+
    e2e0:	00 20       	and	r0, r0
    e2e2:	e9 f7       	brne	.-6      	; 0xe2de <strcat+0x4>
    e2e4:	11 97       	sbiw	r26, 0x01	; 1
    e2e6:	01 90       	ld	r0, Z+
    e2e8:	0d 92       	st	X+, r0
    e2ea:	00 20       	and	r0, r0
    e2ec:	e1 f7       	brne	.-8      	; 0xe2e6 <strcat+0xc>
    e2ee:	08 95       	ret

0000e2f0 <strcpy>:
    e2f0:	fb 01       	movw	r30, r22
    e2f2:	dc 01       	movw	r26, r24
    e2f4:	01 90       	ld	r0, Z+
    e2f6:	0d 92       	st	X+, r0
    e2f8:	00 20       	and	r0, r0
    e2fa:	e1 f7       	brne	.-8      	; 0xe2f4 <strcpy+0x4>
    e2fc:	08 95       	ret

0000e2fe <strtok_r>:
    e2fe:	fa 01       	movw	r30, r20
    e300:	a1 91       	ld	r26, Z+
    e302:	b0 81       	ld	r27, Z
    e304:	00 97       	sbiw	r24, 0x00	; 0
    e306:	19 f4       	brne	.+6      	; 0xe30e <strtok_r+0x10>
    e308:	10 97       	sbiw	r26, 0x00	; 0
    e30a:	e1 f0       	breq	.+56     	; 0xe344 <strtok_r+0x46>
    e30c:	cd 01       	movw	r24, r26
    e30e:	dc 01       	movw	r26, r24
    e310:	cd 01       	movw	r24, r26
    e312:	0d 90       	ld	r0, X+
    e314:	00 20       	and	r0, r0
    e316:	11 f4       	brne	.+4      	; 0xe31c <strtok_r+0x1e>
    e318:	c0 01       	movw	r24, r0
    e31a:	13 c0       	rjmp	.+38     	; 0xe342 <strtok_r+0x44>
    e31c:	fb 01       	movw	r30, r22
    e31e:	21 91       	ld	r18, Z+
    e320:	22 23       	and	r18, r18
    e322:	19 f0       	breq	.+6      	; 0xe32a <strtok_r+0x2c>
    e324:	20 15       	cp	r18, r0
    e326:	d9 f7       	brne	.-10     	; 0xe31e <strtok_r+0x20>
    e328:	f3 cf       	rjmp	.-26     	; 0xe310 <strtok_r+0x12>
    e32a:	fb 01       	movw	r30, r22
    e32c:	21 91       	ld	r18, Z+
    e32e:	20 15       	cp	r18, r0
    e330:	19 f4       	brne	.+6      	; 0xe338 <strtok_r+0x3a>
    e332:	1e 92       	st	-X, r1
    e334:	11 96       	adiw	r26, 0x01	; 1
    e336:	06 c0       	rjmp	.+12     	; 0xe344 <strtok_r+0x46>
    e338:	22 23       	and	r18, r18
    e33a:	c1 f7       	brne	.-16     	; 0xe32c <strtok_r+0x2e>
    e33c:	0d 90       	ld	r0, X+
    e33e:	00 20       	and	r0, r0
    e340:	a1 f7       	brne	.-24     	; 0xe32a <strtok_r+0x2c>
    e342:	d0 01       	movw	r26, r0
    e344:	fa 01       	movw	r30, r20
    e346:	a1 93       	st	Z+, r26
    e348:	b0 83       	st	Z, r27
    e34a:	08 95       	ret

0000e34c <sscanf>:
    e34c:	cf 93       	push	r28
    e34e:	df 93       	push	r29
    e350:	cd b7       	in	r28, 0x3d	; 61
    e352:	de b7       	in	r29, 0x3e	; 62
    e354:	2e 97       	sbiw	r28, 0x0e	; 14
    e356:	0f b6       	in	r0, 0x3f	; 63
    e358:	f8 94       	cli
    e35a:	de bf       	out	0x3e, r29	; 62
    e35c:	0f be       	out	0x3f, r0	; 63
    e35e:	cd bf       	out	0x3d, r28	; 61
    e360:	85 e0       	ldi	r24, 0x05	; 5
    e362:	8c 83       	std	Y+4, r24	; 0x04
    e364:	8c 89       	ldd	r24, Y+20	; 0x14
    e366:	9d 89       	ldd	r25, Y+21	; 0x15
    e368:	9a 83       	std	Y+2, r25	; 0x02
    e36a:	89 83       	std	Y+1, r24	; 0x01
    e36c:	ae 01       	movw	r20, r28
    e36e:	48 5e       	subi	r20, 0xE8	; 232
    e370:	5f 4f       	sbci	r21, 0xFF	; 255
    e372:	ce 01       	movw	r24, r28
    e374:	01 96       	adiw	r24, 0x01	; 1
    e376:	6e 89       	ldd	r22, Y+22	; 0x16
    e378:	7f 89       	ldd	r23, Y+23	; 0x17
    e37a:	0e 94 6c 73 	call	0xe6d8	; 0xe6d8 <vfscanf>
    e37e:	2e 96       	adiw	r28, 0x0e	; 14
    e380:	0f b6       	in	r0, 0x3f	; 63
    e382:	f8 94       	cli
    e384:	de bf       	out	0x3e, r29	; 62
    e386:	0f be       	out	0x3f, r0	; 63
    e388:	cd bf       	out	0x3d, r28	; 61
    e38a:	df 91       	pop	r29
    e38c:	cf 91       	pop	r28
    e38e:	08 95       	ret

0000e390 <putval>:
    e390:	20 fd       	sbrc	r18, 0
    e392:	09 c0       	rjmp	.+18     	; 0xe3a6 <putval+0x16>
    e394:	fc 01       	movw	r30, r24
    e396:	23 fd       	sbrc	r18, 3
    e398:	05 c0       	rjmp	.+10     	; 0xe3a4 <putval+0x14>
    e39a:	22 ff       	sbrs	r18, 2
    e39c:	02 c0       	rjmp	.+4      	; 0xe3a2 <putval+0x12>
    e39e:	73 83       	std	Z+3, r23	; 0x03
    e3a0:	62 83       	std	Z+2, r22	; 0x02
    e3a2:	51 83       	std	Z+1, r21	; 0x01
    e3a4:	40 83       	st	Z, r20
    e3a6:	08 95       	ret

0000e3a8 <mulacc>:
    e3a8:	cf 92       	push	r12
    e3aa:	df 92       	push	r13
    e3ac:	ef 92       	push	r14
    e3ae:	ff 92       	push	r15
    e3b0:	6b 01       	movw	r12, r22
    e3b2:	7c 01       	movw	r14, r24
    e3b4:	44 fd       	sbrc	r20, 4
    e3b6:	10 c0       	rjmp	.+32     	; 0xe3d8 <mulacc+0x30>
    e3b8:	46 fd       	sbrc	r20, 6
    e3ba:	10 c0       	rjmp	.+32     	; 0xe3dc <mulacc+0x34>
    e3bc:	d6 01       	movw	r26, r12
    e3be:	f7 01       	movw	r30, r14
    e3c0:	aa 0f       	add	r26, r26
    e3c2:	bb 1f       	adc	r27, r27
    e3c4:	ee 1f       	adc	r30, r30
    e3c6:	ff 1f       	adc	r31, r31
    e3c8:	10 94       	com	r1
    e3ca:	d1 f7       	brne	.-12     	; 0xe3c0 <mulacc+0x18>
    e3cc:	ca 0e       	add	r12, r26
    e3ce:	db 1e       	adc	r13, r27
    e3d0:	ee 1e       	adc	r14, r30
    e3d2:	ff 1e       	adc	r15, r31
    e3d4:	81 e0       	ldi	r24, 0x01	; 1
    e3d6:	03 c0       	rjmp	.+6      	; 0xe3de <mulacc+0x36>
    e3d8:	83 e0       	ldi	r24, 0x03	; 3
    e3da:	01 c0       	rjmp	.+2      	; 0xe3de <mulacc+0x36>
    e3dc:	84 e0       	ldi	r24, 0x04	; 4
    e3de:	cc 0c       	add	r12, r12
    e3e0:	dd 1c       	adc	r13, r13
    e3e2:	ee 1c       	adc	r14, r14
    e3e4:	ff 1c       	adc	r15, r15
    e3e6:	81 50       	subi	r24, 0x01	; 1
    e3e8:	d1 f7       	brne	.-12     	; 0xe3de <mulacc+0x36>
    e3ea:	c2 0e       	add	r12, r18
    e3ec:	d1 1c       	adc	r13, r1
    e3ee:	e1 1c       	adc	r14, r1
    e3f0:	f1 1c       	adc	r15, r1
    e3f2:	b6 01       	movw	r22, r12
    e3f4:	c7 01       	movw	r24, r14
    e3f6:	ff 90       	pop	r15
    e3f8:	ef 90       	pop	r14
    e3fa:	df 90       	pop	r13
    e3fc:	cf 90       	pop	r12
    e3fe:	08 95       	ret

0000e400 <skip_spaces>:
    e400:	0f 93       	push	r16
    e402:	1f 93       	push	r17
    e404:	cf 93       	push	r28
    e406:	df 93       	push	r29
    e408:	8c 01       	movw	r16, r24
    e40a:	c8 01       	movw	r24, r16
    e40c:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e410:	ec 01       	movw	r28, r24
    e412:	97 fd       	sbrc	r25, 7
    e414:	08 c0       	rjmp	.+16     	; 0xe426 <skip_spaces+0x26>
    e416:	0e 94 99 74 	call	0xe932	; 0xe932 <isspace>
    e41a:	00 97       	sbiw	r24, 0x00	; 0
    e41c:	b1 f7       	brne	.-20     	; 0xe40a <skip_spaces+0xa>
    e41e:	ce 01       	movw	r24, r28
    e420:	b8 01       	movw	r22, r16
    e422:	0e 94 ec 74 	call	0xe9d8	; 0xe9d8 <ungetc>
    e426:	ce 01       	movw	r24, r28
    e428:	df 91       	pop	r29
    e42a:	cf 91       	pop	r28
    e42c:	1f 91       	pop	r17
    e42e:	0f 91       	pop	r16
    e430:	08 95       	ret

0000e432 <conv_int>:
    e432:	af 92       	push	r10
    e434:	bf 92       	push	r11
    e436:	cf 92       	push	r12
    e438:	df 92       	push	r13
    e43a:	ef 92       	push	r14
    e43c:	ff 92       	push	r15
    e43e:	0f 93       	push	r16
    e440:	1f 93       	push	r17
    e442:	cf 93       	push	r28
    e444:	df 93       	push	r29
    e446:	8c 01       	movw	r16, r24
    e448:	d6 2f       	mov	r29, r22
    e44a:	5a 01       	movw	r10, r20
    e44c:	c2 2f       	mov	r28, r18
    e44e:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e452:	8b 32       	cpi	r24, 0x2B	; 43
    e454:	19 f0       	breq	.+6      	; 0xe45c <conv_int+0x2a>
    e456:	8d 32       	cpi	r24, 0x2D	; 45
    e458:	49 f4       	brne	.+18     	; 0xe46c <conv_int+0x3a>
    e45a:	c0 68       	ori	r28, 0x80	; 128
    e45c:	d1 50       	subi	r29, 0x01	; 1
    e45e:	09 f4       	brne	.+2      	; 0xe462 <conv_int+0x30>
    e460:	61 c0       	rjmp	.+194    	; 0xe524 <conv_int+0xf2>
    e462:	c8 01       	movw	r24, r16
    e464:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e468:	97 fd       	sbrc	r25, 7
    e46a:	5c c0       	rjmp	.+184    	; 0xe524 <conv_int+0xf2>
    e46c:	cd 7f       	andi	r28, 0xFD	; 253
    e46e:	2c 2f       	mov	r18, r28
    e470:	20 73       	andi	r18, 0x30	; 48
    e472:	d1 f4       	brne	.+52     	; 0xe4a8 <conv_int+0x76>
    e474:	80 33       	cpi	r24, 0x30	; 48
    e476:	c1 f4       	brne	.+48     	; 0xe4a8 <conv_int+0x76>
    e478:	d1 50       	subi	r29, 0x01	; 1
    e47a:	09 f4       	brne	.+2      	; 0xe47e <conv_int+0x4c>
    e47c:	3e c0       	rjmp	.+124    	; 0xe4fa <conv_int+0xc8>
    e47e:	c8 01       	movw	r24, r16
    e480:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e484:	97 fd       	sbrc	r25, 7
    e486:	39 c0       	rjmp	.+114    	; 0xe4fa <conv_int+0xc8>
    e488:	c2 60       	ori	r28, 0x02	; 2
    e48a:	88 37       	cpi	r24, 0x78	; 120
    e48c:	11 f0       	breq	.+4      	; 0xe492 <conv_int+0x60>
    e48e:	88 35       	cpi	r24, 0x58	; 88
    e490:	49 f4       	brne	.+18     	; 0xe4a4 <conv_int+0x72>
    e492:	c0 64       	ori	r28, 0x40	; 64
    e494:	d1 50       	subi	r29, 0x01	; 1
    e496:	89 f1       	breq	.+98     	; 0xe4fa <conv_int+0xc8>
    e498:	c8 01       	movw	r24, r16
    e49a:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e49e:	97 ff       	sbrs	r25, 7
    e4a0:	03 c0       	rjmp	.+6      	; 0xe4a8 <conv_int+0x76>
    e4a2:	2b c0       	rjmp	.+86     	; 0xe4fa <conv_int+0xc8>
    e4a4:	c6 ff       	sbrs	r28, 6
    e4a6:	c0 61       	ori	r28, 0x10	; 16
    e4a8:	cc 24       	eor	r12, r12
    e4aa:	dd 24       	eor	r13, r13
    e4ac:	76 01       	movw	r14, r12
    e4ae:	28 2f       	mov	r18, r24
    e4b0:	20 53       	subi	r18, 0x30	; 48
    e4b2:	28 30       	cpi	r18, 0x08	; 8
    e4b4:	80 f0       	brcs	.+32     	; 0xe4d6 <conv_int+0xa4>
    e4b6:	c4 fd       	sbrc	r28, 4
    e4b8:	09 c0       	rjmp	.+18     	; 0xe4cc <conv_int+0x9a>
    e4ba:	2a 30       	cpi	r18, 0x0A	; 10
    e4bc:	60 f0       	brcs	.+24     	; 0xe4d6 <conv_int+0xa4>
    e4be:	c6 ff       	sbrs	r28, 6
    e4c0:	05 c0       	rjmp	.+10     	; 0xe4cc <conv_int+0x9a>
    e4c2:	2f 7d       	andi	r18, 0xDF	; 223
    e4c4:	32 2f       	mov	r19, r18
    e4c6:	31 51       	subi	r19, 0x11	; 17
    e4c8:	36 30       	cpi	r19, 0x06	; 6
    e4ca:	20 f0       	brcs	.+8      	; 0xe4d4 <conv_int+0xa2>
    e4cc:	b8 01       	movw	r22, r16
    e4ce:	0e 94 ec 74 	call	0xe9d8	; 0xe9d8 <ungetc>
    e4d2:	10 c0       	rjmp	.+32     	; 0xe4f4 <conv_int+0xc2>
    e4d4:	27 50       	subi	r18, 0x07	; 7
    e4d6:	c7 01       	movw	r24, r14
    e4d8:	b6 01       	movw	r22, r12
    e4da:	4c 2f       	mov	r20, r28
    e4dc:	0e 94 d4 71 	call	0xe3a8	; 0xe3a8 <mulacc>
    e4e0:	6b 01       	movw	r12, r22
    e4e2:	7c 01       	movw	r14, r24
    e4e4:	c2 60       	ori	r28, 0x02	; 2
    e4e6:	d1 50       	subi	r29, 0x01	; 1
    e4e8:	59 f0       	breq	.+22     	; 0xe500 <conv_int+0xce>
    e4ea:	c8 01       	movw	r24, r16
    e4ec:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e4f0:	97 ff       	sbrs	r25, 7
    e4f2:	dd cf       	rjmp	.-70     	; 0xe4ae <conv_int+0x7c>
    e4f4:	c1 fd       	sbrc	r28, 1
    e4f6:	04 c0       	rjmp	.+8      	; 0xe500 <conv_int+0xce>
    e4f8:	15 c0       	rjmp	.+42     	; 0xe524 <conv_int+0xf2>
    e4fa:	cc 24       	eor	r12, r12
    e4fc:	dd 24       	eor	r13, r13
    e4fe:	76 01       	movw	r14, r12
    e500:	c7 ff       	sbrs	r28, 7
    e502:	08 c0       	rjmp	.+16     	; 0xe514 <conv_int+0xe2>
    e504:	f0 94       	com	r15
    e506:	e0 94       	com	r14
    e508:	d0 94       	com	r13
    e50a:	c0 94       	com	r12
    e50c:	c1 1c       	adc	r12, r1
    e50e:	d1 1c       	adc	r13, r1
    e510:	e1 1c       	adc	r14, r1
    e512:	f1 1c       	adc	r15, r1
    e514:	c5 01       	movw	r24, r10
    e516:	b7 01       	movw	r22, r14
    e518:	a6 01       	movw	r20, r12
    e51a:	2c 2f       	mov	r18, r28
    e51c:	0e 94 c8 71 	call	0xe390	; 0xe390 <putval>
    e520:	81 e0       	ldi	r24, 0x01	; 1
    e522:	01 c0       	rjmp	.+2      	; 0xe526 <conv_int+0xf4>
    e524:	80 e0       	ldi	r24, 0x00	; 0
    e526:	df 91       	pop	r29
    e528:	cf 91       	pop	r28
    e52a:	1f 91       	pop	r17
    e52c:	0f 91       	pop	r16
    e52e:	ff 90       	pop	r15
    e530:	ef 90       	pop	r14
    e532:	df 90       	pop	r13
    e534:	cf 90       	pop	r12
    e536:	bf 90       	pop	r11
    e538:	af 90       	pop	r10
    e53a:	08 95       	ret

0000e53c <conv_brk>:
    e53c:	4f 92       	push	r4
    e53e:	5f 92       	push	r5
    e540:	6f 92       	push	r6
    e542:	7f 92       	push	r7
    e544:	8f 92       	push	r8
    e546:	9f 92       	push	r9
    e548:	af 92       	push	r10
    e54a:	bf 92       	push	r11
    e54c:	cf 92       	push	r12
    e54e:	df 92       	push	r13
    e550:	ef 92       	push	r14
    e552:	ff 92       	push	r15
    e554:	0f 93       	push	r16
    e556:	1f 93       	push	r17
    e558:	cf 93       	push	r28
    e55a:	df 93       	push	r29
    e55c:	cd b7       	in	r28, 0x3d	; 61
    e55e:	de b7       	in	r29, 0x3e	; 62
    e560:	a0 97       	sbiw	r28, 0x20	; 32
    e562:	0f b6       	in	r0, 0x3f	; 63
    e564:	f8 94       	cli
    e566:	de bf       	out	0x3e, r29	; 62
    e568:	0f be       	out	0x3f, r0	; 63
    e56a:	cd bf       	out	0x3d, r28	; 61
    e56c:	5c 01       	movw	r10, r24
    e56e:	06 2f       	mov	r16, r22
    e570:	7a 01       	movw	r14, r20
    e572:	69 01       	movw	r12, r18
    e574:	fe 01       	movw	r30, r28
    e576:	31 96       	adiw	r30, 0x01	; 1
    e578:	80 e2       	ldi	r24, 0x20	; 32
    e57a:	df 01       	movw	r26, r30
    e57c:	1d 92       	st	X+, r1
    e57e:	8a 95       	dec	r24
    e580:	e9 f7       	brne	.-6      	; 0xe57c <conv_brk+0x40>
    e582:	d5 01       	movw	r26, r10
    e584:	13 96       	adiw	r26, 0x03	; 3
    e586:	1c 91       	ld	r17, X
    e588:	13 97       	sbiw	r26, 0x03	; 3
    e58a:	60 e0       	ldi	r22, 0x00	; 0
    e58c:	70 e0       	ldi	r23, 0x00	; 0
    e58e:	20 e0       	ldi	r18, 0x00	; 0
    e590:	40 e0       	ldi	r20, 0x00	; 0
    e592:	30 e0       	ldi	r19, 0x00	; 0
    e594:	4f 01       	movw	r8, r30
    e596:	81 e0       	ldi	r24, 0x01	; 1
    e598:	68 2e       	mov	r6, r24
    e59a:	71 2c       	mov	r7, r1
    e59c:	f6 01       	movw	r30, r12
    e59e:	13 fd       	sbrc	r17, 3
    e5a0:	55 91       	lpm	r21, Z+
    e5a2:	13 ff       	sbrs	r17, 3
    e5a4:	51 91       	ld	r21, Z+
    e5a6:	6f 01       	movw	r12, r30
    e5a8:	55 23       	and	r21, r21
    e5aa:	09 f4       	brne	.+2      	; 0xe5ae <conv_brk+0x72>
    e5ac:	7b c0       	rjmp	.+246    	; 0xe6a4 <conv_brk+0x168>
    e5ae:	5e 35       	cpi	r21, 0x5E	; 94
    e5b0:	19 f4       	brne	.+6      	; 0xe5b8 <conv_brk+0x7c>
    e5b2:	61 15       	cp	r22, r1
    e5b4:	71 05       	cpc	r23, r1
    e5b6:	49 f1       	breq	.+82     	; 0xe60a <conv_brk+0xce>
    e5b8:	83 2f       	mov	r24, r19
    e5ba:	90 e0       	ldi	r25, 0x00	; 0
    e5bc:	86 17       	cp	r24, r22
    e5be:	97 07       	cpc	r25, r23
    e5c0:	3c f4       	brge	.+14     	; 0xe5d0 <conv_brk+0x94>
    e5c2:	5d 35       	cpi	r21, 0x5D	; 93
    e5c4:	51 f1       	breq	.+84     	; 0xe61a <conv_brk+0xde>
    e5c6:	5d 32       	cpi	r21, 0x2D	; 45
    e5c8:	19 f4       	brne	.+6      	; 0xe5d0 <conv_brk+0x94>
    e5ca:	44 23       	and	r20, r20
    e5cc:	01 f1       	breq	.+64     	; 0xe60e <conv_brk+0xd2>
    e5ce:	03 c0       	rjmp	.+6      	; 0xe5d6 <conv_brk+0x9a>
    e5d0:	44 23       	and	r20, r20
    e5d2:	09 f4       	brne	.+2      	; 0xe5d6 <conv_brk+0x9a>
    e5d4:	25 2f       	mov	r18, r21
    e5d6:	85 2f       	mov	r24, r21
    e5d8:	86 95       	lsr	r24
    e5da:	86 95       	lsr	r24
    e5dc:	86 95       	lsr	r24
    e5de:	f4 01       	movw	r30, r8
    e5e0:	e8 0f       	add	r30, r24
    e5e2:	f1 1d       	adc	r31, r1
    e5e4:	85 2f       	mov	r24, r21
    e5e6:	87 70       	andi	r24, 0x07	; 7
    e5e8:	23 01       	movw	r4, r6
    e5ea:	02 c0       	rjmp	.+4      	; 0xe5f0 <conv_brk+0xb4>
    e5ec:	44 0c       	add	r4, r4
    e5ee:	55 1c       	adc	r5, r5
    e5f0:	8a 95       	dec	r24
    e5f2:	e2 f7       	brpl	.-8      	; 0xe5ec <conv_brk+0xb0>
    e5f4:	80 81       	ld	r24, Z
    e5f6:	84 29       	or	r24, r4
    e5f8:	80 83       	st	Z, r24
    e5fa:	52 17       	cp	r21, r18
    e5fc:	51 f0       	breq	.+20     	; 0xe612 <conv_brk+0xd6>
    e5fe:	52 17       	cp	r21, r18
    e600:	10 f4       	brcc	.+4      	; 0xe606 <conv_brk+0xca>
    e602:	5f 5f       	subi	r21, 0xFF	; 255
    e604:	e8 cf       	rjmp	.-48     	; 0xe5d6 <conv_brk+0x9a>
    e606:	51 50       	subi	r21, 0x01	; 1
    e608:	e6 cf       	rjmp	.-52     	; 0xe5d6 <conv_brk+0x9a>
    e60a:	31 e0       	ldi	r19, 0x01	; 1
    e60c:	03 c0       	rjmp	.+6      	; 0xe614 <conv_brk+0xd8>
    e60e:	41 e0       	ldi	r20, 0x01	; 1
    e610:	01 c0       	rjmp	.+2      	; 0xe614 <conv_brk+0xd8>
    e612:	40 e0       	ldi	r20, 0x00	; 0
    e614:	6f 5f       	subi	r22, 0xFF	; 255
    e616:	7f 4f       	sbci	r23, 0xFF	; 255
    e618:	c1 cf       	rjmp	.-126    	; 0xe59c <conv_brk+0x60>
    e61a:	44 23       	and	r20, r20
    e61c:	19 f0       	breq	.+6      	; 0xe624 <conv_brk+0xe8>
    e61e:	8e 81       	ldd	r24, Y+6	; 0x06
    e620:	80 62       	ori	r24, 0x20	; 32
    e622:	8e 83       	std	Y+6, r24	; 0x06
    e624:	33 23       	and	r19, r19
    e626:	51 f0       	breq	.+20     	; 0xe63c <conv_brk+0x100>
    e628:	fe 01       	movw	r30, r28
    e62a:	31 96       	adiw	r30, 0x01	; 1
    e62c:	ce 01       	movw	r24, r28
    e62e:	81 96       	adiw	r24, 0x21	; 33
    e630:	20 81       	ld	r18, Z
    e632:	20 95       	com	r18
    e634:	21 93       	st	Z+, r18
    e636:	e8 17       	cp	r30, r24
    e638:	f9 07       	cpc	r31, r25
    e63a:	d1 f7       	brne	.-12     	; 0xe630 <conv_brk+0xf4>
    e63c:	11 e0       	ldi	r17, 0x01	; 1
    e63e:	01 c0       	rjmp	.+2      	; 0xe642 <conv_brk+0x106>
    e640:	10 e0       	ldi	r17, 0x00	; 0
    e642:	c5 01       	movw	r24, r10
    e644:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e648:	9c 01       	movw	r18, r24
    e64a:	97 fd       	sbrc	r25, 7
    e64c:	23 c0       	rjmp	.+70     	; 0xe694 <conv_brk+0x158>
    e64e:	86 95       	lsr	r24
    e650:	86 95       	lsr	r24
    e652:	86 95       	lsr	r24
    e654:	e1 e0       	ldi	r30, 0x01	; 1
    e656:	f0 e0       	ldi	r31, 0x00	; 0
    e658:	ec 0f       	add	r30, r28
    e65a:	fd 1f       	adc	r31, r29
    e65c:	e8 0f       	add	r30, r24
    e65e:	f1 1d       	adc	r31, r1
    e660:	40 81       	ld	r20, Z
    e662:	50 e0       	ldi	r21, 0x00	; 0
    e664:	c9 01       	movw	r24, r18
    e666:	87 70       	andi	r24, 0x07	; 7
    e668:	90 70       	andi	r25, 0x00	; 0
    e66a:	02 c0       	rjmp	.+4      	; 0xe670 <conv_brk+0x134>
    e66c:	55 95       	asr	r21
    e66e:	47 95       	ror	r20
    e670:	8a 95       	dec	r24
    e672:	e2 f7       	brpl	.-8      	; 0xe66c <conv_brk+0x130>
    e674:	40 fd       	sbrc	r20, 0
    e676:	05 c0       	rjmp	.+10     	; 0xe682 <conv_brk+0x146>
    e678:	c9 01       	movw	r24, r18
    e67a:	b5 01       	movw	r22, r10
    e67c:	0e 94 ec 74 	call	0xe9d8	; 0xe9d8 <ungetc>
    e680:	09 c0       	rjmp	.+18     	; 0xe694 <conv_brk+0x158>
    e682:	e1 14       	cp	r14, r1
    e684:	f1 04       	cpc	r15, r1
    e686:	19 f0       	breq	.+6      	; 0xe68e <conv_brk+0x152>
    e688:	d7 01       	movw	r26, r14
    e68a:	2d 93       	st	X+, r18
    e68c:	7d 01       	movw	r14, r26
    e68e:	01 50       	subi	r16, 0x01	; 1
    e690:	b9 f6       	brne	.-82     	; 0xe640 <conv_brk+0x104>
    e692:	02 c0       	rjmp	.+4      	; 0xe698 <conv_brk+0x15c>
    e694:	11 23       	and	r17, r17
    e696:	31 f4       	brne	.+12     	; 0xe6a4 <conv_brk+0x168>
    e698:	e1 14       	cp	r14, r1
    e69a:	f1 04       	cpc	r15, r1
    e69c:	29 f0       	breq	.+10     	; 0xe6a8 <conv_brk+0x16c>
    e69e:	f7 01       	movw	r30, r14
    e6a0:	10 82       	st	Z, r1
    e6a2:	02 c0       	rjmp	.+4      	; 0xe6a8 <conv_brk+0x16c>
    e6a4:	cc 24       	eor	r12, r12
    e6a6:	dd 24       	eor	r13, r13
    e6a8:	c6 01       	movw	r24, r12
    e6aa:	a0 96       	adiw	r28, 0x20	; 32
    e6ac:	0f b6       	in	r0, 0x3f	; 63
    e6ae:	f8 94       	cli
    e6b0:	de bf       	out	0x3e, r29	; 62
    e6b2:	0f be       	out	0x3f, r0	; 63
    e6b4:	cd bf       	out	0x3d, r28	; 61
    e6b6:	df 91       	pop	r29
    e6b8:	cf 91       	pop	r28
    e6ba:	1f 91       	pop	r17
    e6bc:	0f 91       	pop	r16
    e6be:	ff 90       	pop	r15
    e6c0:	ef 90       	pop	r14
    e6c2:	df 90       	pop	r13
    e6c4:	cf 90       	pop	r12
    e6c6:	bf 90       	pop	r11
    e6c8:	af 90       	pop	r10
    e6ca:	9f 90       	pop	r9
    e6cc:	8f 90       	pop	r8
    e6ce:	7f 90       	pop	r7
    e6d0:	6f 90       	pop	r6
    e6d2:	5f 90       	pop	r5
    e6d4:	4f 90       	pop	r4
    e6d6:	08 95       	ret

0000e6d8 <vfscanf>:
    e6d8:	5f 92       	push	r5
    e6da:	6f 92       	push	r6
    e6dc:	7f 92       	push	r7
    e6de:	8f 92       	push	r8
    e6e0:	9f 92       	push	r9
    e6e2:	af 92       	push	r10
    e6e4:	bf 92       	push	r11
    e6e6:	cf 92       	push	r12
    e6e8:	df 92       	push	r13
    e6ea:	ef 92       	push	r14
    e6ec:	ff 92       	push	r15
    e6ee:	0f 93       	push	r16
    e6f0:	1f 93       	push	r17
    e6f2:	cf 93       	push	r28
    e6f4:	df 93       	push	r29
    e6f6:	0f 92       	push	r0
    e6f8:	cd b7       	in	r28, 0x3d	; 61
    e6fa:	de b7       	in	r29, 0x3e	; 62
    e6fc:	7c 01       	movw	r14, r24
    e6fe:	5b 01       	movw	r10, r22
    e700:	3a 01       	movw	r6, r20
    e702:	fc 01       	movw	r30, r24
    e704:	17 82       	std	Z+7, r1	; 0x07
    e706:	16 82       	std	Z+6, r1	; 0x06
    e708:	99 24       	eor	r9, r9
    e70a:	ef c0       	rjmp	.+478    	; 0xe8ea <vfscanf+0x212>
    e70c:	81 2f       	mov	r24, r17
    e70e:	90 e0       	ldi	r25, 0x00	; 0
    e710:	0e 94 99 74 	call	0xe932	; 0xe932 <isspace>
    e714:	00 97       	sbiw	r24, 0x00	; 0
    e716:	21 f0       	breq	.+8      	; 0xe720 <vfscanf+0x48>
    e718:	c7 01       	movw	r24, r14
    e71a:	0e 94 00 72 	call	0xe400	; 0xe400 <skip_spaces>
    e71e:	e5 c0       	rjmp	.+458    	; 0xe8ea <vfscanf+0x212>
    e720:	15 32       	cpi	r17, 0x25	; 37
    e722:	41 f4       	brne	.+16     	; 0xe734 <vfscanf+0x5c>
    e724:	f5 01       	movw	r30, r10
    e726:	03 fd       	sbrc	r16, 3
    e728:	35 91       	lpm	r19, Z+
    e72a:	03 ff       	sbrs	r16, 3
    e72c:	31 91       	ld	r19, Z+
    e72e:	5f 01       	movw	r10, r30
    e730:	35 32       	cpi	r19, 0x25	; 37
    e732:	61 f4       	brne	.+24     	; 0xe74c <vfscanf+0x74>
    e734:	c7 01       	movw	r24, r14
    e736:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e73a:	97 fd       	sbrc	r25, 7
    e73c:	e2 c0       	rjmp	.+452    	; 0xe902 <vfscanf+0x22a>
    e73e:	18 17       	cp	r17, r24
    e740:	09 f4       	brne	.+2      	; 0xe744 <vfscanf+0x6c>
    e742:	d3 c0       	rjmp	.+422    	; 0xe8ea <vfscanf+0x212>
    e744:	b7 01       	movw	r22, r14
    e746:	0e 94 ec 74 	call	0xe9d8	; 0xe9d8 <ungetc>
    e74a:	dd c0       	rjmp	.+442    	; 0xe906 <vfscanf+0x22e>
    e74c:	3a 32       	cpi	r19, 0x2A	; 42
    e74e:	41 f4       	brne	.+16     	; 0xe760 <vfscanf+0x88>
    e750:	03 fd       	sbrc	r16, 3
    e752:	35 91       	lpm	r19, Z+
    e754:	03 ff       	sbrs	r16, 3
    e756:	31 91       	ld	r19, Z+
    e758:	5f 01       	movw	r10, r30
    e75a:	55 24       	eor	r5, r5
    e75c:	53 94       	inc	r5
    e75e:	01 c0       	rjmp	.+2      	; 0xe762 <vfscanf+0x8a>
    e760:	55 24       	eor	r5, r5
    e762:	88 24       	eor	r8, r8
    e764:	10 c0       	rjmp	.+32     	; 0xe786 <vfscanf+0xae>
    e766:	f2 e0       	ldi	r31, 0x02	; 2
    e768:	5f 2a       	or	r5, r31
    e76a:	68 2d       	mov	r22, r8
    e76c:	70 e0       	ldi	r23, 0x00	; 0
    e76e:	80 e0       	ldi	r24, 0x00	; 0
    e770:	90 e0       	ldi	r25, 0x00	; 0
    e772:	40 e2       	ldi	r20, 0x20	; 32
    e774:	0e 94 d4 71 	call	0xe3a8	; 0xe3a8 <mulacc>
    e778:	86 2e       	mov	r8, r22
    e77a:	f5 01       	movw	r30, r10
    e77c:	03 fd       	sbrc	r16, 3
    e77e:	35 91       	lpm	r19, Z+
    e780:	03 ff       	sbrs	r16, 3
    e782:	31 91       	ld	r19, Z+
    e784:	5f 01       	movw	r10, r30
    e786:	23 2f       	mov	r18, r19
    e788:	20 53       	subi	r18, 0x30	; 48
    e78a:	2a 30       	cpi	r18, 0x0A	; 10
    e78c:	60 f3       	brcs	.-40     	; 0xe766 <vfscanf+0x8e>
    e78e:	51 fe       	sbrs	r5, 1
    e790:	03 c0       	rjmp	.+6      	; 0xe798 <vfscanf+0xc0>
    e792:	88 20       	and	r8, r8
    e794:	19 f4       	brne	.+6      	; 0xe79c <vfscanf+0xc4>
    e796:	b7 c0       	rjmp	.+366    	; 0xe906 <vfscanf+0x22e>
    e798:	88 24       	eor	r8, r8
    e79a:	8a 94       	dec	r8
    e79c:	38 36       	cpi	r19, 0x68	; 104
    e79e:	19 f0       	breq	.+6      	; 0xe7a6 <vfscanf+0xce>
    e7a0:	3c 36       	cpi	r19, 0x6C	; 108
    e7a2:	99 f4       	brne	.+38     	; 0xe7ca <vfscanf+0xf2>
    e7a4:	0a c0       	rjmp	.+20     	; 0xe7ba <vfscanf+0xe2>
    e7a6:	f5 01       	movw	r30, r10
    e7a8:	03 fd       	sbrc	r16, 3
    e7aa:	35 91       	lpm	r19, Z+
    e7ac:	03 ff       	sbrs	r16, 3
    e7ae:	31 91       	ld	r19, Z+
    e7b0:	5f 01       	movw	r10, r30
    e7b2:	38 36       	cpi	r19, 0x68	; 104
    e7b4:	51 f4       	brne	.+20     	; 0xe7ca <vfscanf+0xf2>
    e7b6:	f8 e0       	ldi	r31, 0x08	; 8
    e7b8:	5f 2a       	or	r5, r31
    e7ba:	44 e0       	ldi	r20, 0x04	; 4
    e7bc:	54 2a       	or	r5, r20
    e7be:	f5 01       	movw	r30, r10
    e7c0:	03 fd       	sbrc	r16, 3
    e7c2:	35 91       	lpm	r19, Z+
    e7c4:	03 ff       	sbrs	r16, 3
    e7c6:	31 91       	ld	r19, Z+
    e7c8:	5f 01       	movw	r10, r30
    e7ca:	33 23       	and	r19, r19
    e7cc:	09 f4       	brne	.+2      	; 0xe7d0 <vfscanf+0xf8>
    e7ce:	9b c0       	rjmp	.+310    	; 0xe906 <vfscanf+0x22e>
    e7d0:	84 ee       	ldi	r24, 0xE4	; 228
    e7d2:	90 e0       	ldi	r25, 0x00	; 0
    e7d4:	63 2f       	mov	r22, r19
    e7d6:	70 e0       	ldi	r23, 0x00	; 0
    e7d8:	39 83       	std	Y+1, r19	; 0x01
    e7da:	0e 94 a1 74 	call	0xe942	; 0xe942 <strchr_P>
    e7de:	39 81       	ldd	r19, Y+1	; 0x01
    e7e0:	00 97       	sbiw	r24, 0x00	; 0
    e7e2:	09 f4       	brne	.+2      	; 0xe7e6 <vfscanf+0x10e>
    e7e4:	90 c0       	rjmp	.+288    	; 0xe906 <vfscanf+0x22e>
    e7e6:	85 2d       	mov	r24, r5
    e7e8:	50 fc       	sbrc	r5, 0
    e7ea:	08 c0       	rjmp	.+16     	; 0xe7fc <vfscanf+0x124>
    e7ec:	f3 01       	movw	r30, r6
    e7ee:	00 81       	ld	r16, Z
    e7f0:	11 81       	ldd	r17, Z+1	; 0x01
    e7f2:	42 e0       	ldi	r20, 0x02	; 2
    e7f4:	50 e0       	ldi	r21, 0x00	; 0
    e7f6:	64 0e       	add	r6, r20
    e7f8:	75 1e       	adc	r7, r21
    e7fa:	02 c0       	rjmp	.+4      	; 0xe800 <vfscanf+0x128>
    e7fc:	00 e0       	ldi	r16, 0x00	; 0
    e7fe:	10 e0       	ldi	r17, 0x00	; 0
    e800:	3e 36       	cpi	r19, 0x6E	; 110
    e802:	51 f4       	brne	.+20     	; 0xe818 <vfscanf+0x140>
    e804:	f7 01       	movw	r30, r14
    e806:	46 81       	ldd	r20, Z+6	; 0x06
    e808:	57 81       	ldd	r21, Z+7	; 0x07
    e80a:	60 e0       	ldi	r22, 0x00	; 0
    e80c:	70 e0       	ldi	r23, 0x00	; 0
    e80e:	c8 01       	movw	r24, r16
    e810:	25 2d       	mov	r18, r5
    e812:	0e 94 c8 71 	call	0xe390	; 0xe390 <putval>
    e816:	69 c0       	rjmp	.+210    	; 0xe8ea <vfscanf+0x212>
    e818:	33 36       	cpi	r19, 0x63	; 99
    e81a:	91 f4       	brne	.+36     	; 0xe840 <vfscanf+0x168>
    e81c:	81 fd       	sbrc	r24, 1
    e81e:	02 c0       	rjmp	.+4      	; 0xe824 <vfscanf+0x14c>
    e820:	88 24       	eor	r8, r8
    e822:	83 94       	inc	r8
    e824:	c7 01       	movw	r24, r14
    e826:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e82a:	97 fd       	sbrc	r25, 7
    e82c:	6a c0       	rjmp	.+212    	; 0xe902 <vfscanf+0x22a>
    e82e:	01 15       	cp	r16, r1
    e830:	11 05       	cpc	r17, r1
    e832:	19 f0       	breq	.+6      	; 0xe83a <vfscanf+0x162>
    e834:	f8 01       	movw	r30, r16
    e836:	81 93       	st	Z+, r24
    e838:	8f 01       	movw	r16, r30
    e83a:	8a 94       	dec	r8
    e83c:	99 f7       	brne	.-26     	; 0xe824 <vfscanf+0x14c>
    e83e:	53 c0       	rjmp	.+166    	; 0xe8e6 <vfscanf+0x20e>
    e840:	c7 01       	movw	r24, r14
    e842:	3b 35       	cpi	r19, 0x5B	; 91
    e844:	51 f4       	brne	.+20     	; 0xe85a <vfscanf+0x182>
    e846:	68 2d       	mov	r22, r8
    e848:	a8 01       	movw	r20, r16
    e84a:	95 01       	movw	r18, r10
    e84c:	0e 94 9e 72 	call	0xe53c	; 0xe53c <conv_brk>
    e850:	5c 01       	movw	r10, r24
    e852:	00 97       	sbiw	r24, 0x00	; 0
    e854:	09 f0       	breq	.+2      	; 0xe858 <vfscanf+0x180>
    e856:	47 c0       	rjmp	.+142    	; 0xe8e6 <vfscanf+0x20e>
    e858:	41 c0       	rjmp	.+130    	; 0xe8dc <vfscanf+0x204>
    e85a:	39 83       	std	Y+1, r19	; 0x01
    e85c:	0e 94 00 72 	call	0xe400	; 0xe400 <skip_spaces>
    e860:	39 81       	ldd	r19, Y+1	; 0x01
    e862:	97 fd       	sbrc	r25, 7
    e864:	4e c0       	rjmp	.+156    	; 0xe902 <vfscanf+0x22a>
    e866:	3f 36       	cpi	r19, 0x6F	; 111
    e868:	61 f1       	breq	.+88     	; 0xe8c2 <vfscanf+0x1ea>
    e86a:	30 37       	cpi	r19, 0x70	; 112
    e86c:	28 f4       	brcc	.+10     	; 0xe878 <vfscanf+0x1a0>
    e86e:	34 36       	cpi	r19, 0x64	; 100
    e870:	29 f1       	breq	.+74     	; 0xe8bc <vfscanf+0x1e4>
    e872:	39 36       	cpi	r19, 0x69	; 105
    e874:	49 f5       	brne	.+82     	; 0xe8c8 <vfscanf+0x1f0>
    e876:	2a c0       	rjmp	.+84     	; 0xe8cc <vfscanf+0x1f4>
    e878:	33 37       	cpi	r19, 0x73	; 115
    e87a:	19 f0       	breq	.+6      	; 0xe882 <vfscanf+0x1aa>
    e87c:	35 37       	cpi	r19, 0x75	; 117
    e87e:	21 f5       	brne	.+72     	; 0xe8c8 <vfscanf+0x1f0>
    e880:	1d c0       	rjmp	.+58     	; 0xe8bc <vfscanf+0x1e4>
    e882:	c7 01       	movw	r24, r14
    e884:	0e 94 ac 74 	call	0xe958	; 0xe958 <fgetc>
    e888:	6c 01       	movw	r12, r24
    e88a:	97 fd       	sbrc	r25, 7
    e88c:	11 c0       	rjmp	.+34     	; 0xe8b0 <vfscanf+0x1d8>
    e88e:	0e 94 99 74 	call	0xe932	; 0xe932 <isspace>
    e892:	00 97       	sbiw	r24, 0x00	; 0
    e894:	29 f0       	breq	.+10     	; 0xe8a0 <vfscanf+0x1c8>
    e896:	c6 01       	movw	r24, r12
    e898:	b7 01       	movw	r22, r14
    e89a:	0e 94 ec 74 	call	0xe9d8	; 0xe9d8 <ungetc>
    e89e:	08 c0       	rjmp	.+16     	; 0xe8b0 <vfscanf+0x1d8>
    e8a0:	01 15       	cp	r16, r1
    e8a2:	11 05       	cpc	r17, r1
    e8a4:	19 f0       	breq	.+6      	; 0xe8ac <vfscanf+0x1d4>
    e8a6:	f8 01       	movw	r30, r16
    e8a8:	c1 92       	st	Z+, r12
    e8aa:	8f 01       	movw	r16, r30
    e8ac:	8a 94       	dec	r8
    e8ae:	49 f7       	brne	.-46     	; 0xe882 <vfscanf+0x1aa>
    e8b0:	01 15       	cp	r16, r1
    e8b2:	11 05       	cpc	r17, r1
    e8b4:	c1 f0       	breq	.+48     	; 0xe8e6 <vfscanf+0x20e>
    e8b6:	f8 01       	movw	r30, r16
    e8b8:	10 82       	st	Z, r1
    e8ba:	15 c0       	rjmp	.+42     	; 0xe8e6 <vfscanf+0x20e>
    e8bc:	f0 e2       	ldi	r31, 0x20	; 32
    e8be:	5f 2a       	or	r5, r31
    e8c0:	05 c0       	rjmp	.+10     	; 0xe8cc <vfscanf+0x1f4>
    e8c2:	40 e1       	ldi	r20, 0x10	; 16
    e8c4:	54 2a       	or	r5, r20
    e8c6:	02 c0       	rjmp	.+4      	; 0xe8cc <vfscanf+0x1f4>
    e8c8:	50 e4       	ldi	r21, 0x40	; 64
    e8ca:	55 2a       	or	r5, r21
    e8cc:	c7 01       	movw	r24, r14
    e8ce:	68 2d       	mov	r22, r8
    e8d0:	a8 01       	movw	r20, r16
    e8d2:	25 2d       	mov	r18, r5
    e8d4:	0e 94 19 72 	call	0xe432	; 0xe432 <conv_int>
    e8d8:	88 23       	and	r24, r24
    e8da:	29 f4       	brne	.+10     	; 0xe8e6 <vfscanf+0x20e>
    e8dc:	f7 01       	movw	r30, r14
    e8de:	83 81       	ldd	r24, Z+3	; 0x03
    e8e0:	80 73       	andi	r24, 0x30	; 48
    e8e2:	79 f4       	brne	.+30     	; 0xe902 <vfscanf+0x22a>
    e8e4:	10 c0       	rjmp	.+32     	; 0xe906 <vfscanf+0x22e>
    e8e6:	50 fe       	sbrs	r5, 0
    e8e8:	93 94       	inc	r9
    e8ea:	f7 01       	movw	r30, r14
    e8ec:	03 81       	ldd	r16, Z+3	; 0x03
    e8ee:	f5 01       	movw	r30, r10
    e8f0:	03 fd       	sbrc	r16, 3
    e8f2:	15 91       	lpm	r17, Z+
    e8f4:	03 ff       	sbrs	r16, 3
    e8f6:	11 91       	ld	r17, Z+
    e8f8:	5f 01       	movw	r10, r30
    e8fa:	11 23       	and	r17, r17
    e8fc:	09 f0       	breq	.+2      	; 0xe900 <vfscanf+0x228>
    e8fe:	06 cf       	rjmp	.-500    	; 0xe70c <vfscanf+0x34>
    e900:	02 c0       	rjmp	.+4      	; 0xe906 <vfscanf+0x22e>
    e902:	99 20       	and	r9, r9
    e904:	19 f0       	breq	.+6      	; 0xe90c <vfscanf+0x234>
    e906:	89 2d       	mov	r24, r9
    e908:	90 e0       	ldi	r25, 0x00	; 0
    e90a:	02 c0       	rjmp	.+4      	; 0xe910 <vfscanf+0x238>
    e90c:	8f ef       	ldi	r24, 0xFF	; 255
    e90e:	9f ef       	ldi	r25, 0xFF	; 255
    e910:	0f 90       	pop	r0
    e912:	df 91       	pop	r29
    e914:	cf 91       	pop	r28
    e916:	1f 91       	pop	r17
    e918:	0f 91       	pop	r16
    e91a:	ff 90       	pop	r15
    e91c:	ef 90       	pop	r14
    e91e:	df 90       	pop	r13
    e920:	cf 90       	pop	r12
    e922:	bf 90       	pop	r11
    e924:	af 90       	pop	r10
    e926:	9f 90       	pop	r9
    e928:	8f 90       	pop	r8
    e92a:	7f 90       	pop	r7
    e92c:	6f 90       	pop	r6
    e92e:	5f 90       	pop	r5
    e930:	08 95       	ret

0000e932 <isspace>:
    e932:	91 11       	cpse	r25, r1
    e934:	6e c0       	rjmp	.+220    	; 0xea12 <__ctype_isfalse>
    e936:	80 32       	cpi	r24, 0x20	; 32
    e938:	19 f0       	breq	.+6      	; 0xe940 <isspace+0xe>
    e93a:	89 50       	subi	r24, 0x09	; 9
    e93c:	85 50       	subi	r24, 0x05	; 5
    e93e:	d0 f7       	brcc	.-12     	; 0xe934 <isspace+0x2>
    e940:	08 95       	ret

0000e942 <strchr_P>:
    e942:	fc 01       	movw	r30, r24
    e944:	05 90       	lpm	r0, Z+
    e946:	06 16       	cp	r0, r22
    e948:	21 f0       	breq	.+8      	; 0xe952 <strchr_P+0x10>
    e94a:	00 20       	and	r0, r0
    e94c:	d9 f7       	brne	.-10     	; 0xe944 <strchr_P+0x2>
    e94e:	c0 01       	movw	r24, r0
    e950:	08 95       	ret
    e952:	31 97       	sbiw	r30, 0x01	; 1
    e954:	cf 01       	movw	r24, r30
    e956:	08 95       	ret

0000e958 <fgetc>:
    e958:	cf 93       	push	r28
    e95a:	df 93       	push	r29
    e95c:	ec 01       	movw	r28, r24
    e95e:	2b 81       	ldd	r18, Y+3	; 0x03
    e960:	20 ff       	sbrs	r18, 0
    e962:	35 c0       	rjmp	.+106    	; 0xe9ce <fgetc+0x76>
    e964:	26 ff       	sbrs	r18, 6
    e966:	09 c0       	rjmp	.+18     	; 0xe97a <fgetc+0x22>
    e968:	2f 7b       	andi	r18, 0xBF	; 191
    e96a:	2b 83       	std	Y+3, r18	; 0x03
    e96c:	8e 81       	ldd	r24, Y+6	; 0x06
    e96e:	9f 81       	ldd	r25, Y+7	; 0x07
    e970:	01 96       	adiw	r24, 0x01	; 1
    e972:	9f 83       	std	Y+7, r25	; 0x07
    e974:	8e 83       	std	Y+6, r24	; 0x06
    e976:	8a 81       	ldd	r24, Y+2	; 0x02
    e978:	28 c0       	rjmp	.+80     	; 0xe9ca <fgetc+0x72>
    e97a:	22 ff       	sbrs	r18, 2
    e97c:	0f c0       	rjmp	.+30     	; 0xe99c <fgetc+0x44>
    e97e:	e8 81       	ld	r30, Y
    e980:	f9 81       	ldd	r31, Y+1	; 0x01
    e982:	80 81       	ld	r24, Z
    e984:	99 27       	eor	r25, r25
    e986:	87 fd       	sbrc	r24, 7
    e988:	90 95       	com	r25
    e98a:	00 97       	sbiw	r24, 0x00	; 0
    e98c:	19 f4       	brne	.+6      	; 0xe994 <fgetc+0x3c>
    e98e:	20 62       	ori	r18, 0x20	; 32
    e990:	2b 83       	std	Y+3, r18	; 0x03
    e992:	1d c0       	rjmp	.+58     	; 0xe9ce <fgetc+0x76>
    e994:	31 96       	adiw	r30, 0x01	; 1
    e996:	f9 83       	std	Y+1, r31	; 0x01
    e998:	e8 83       	st	Y, r30
    e99a:	11 c0       	rjmp	.+34     	; 0xe9be <fgetc+0x66>
    e99c:	ea 85       	ldd	r30, Y+10	; 0x0a
    e99e:	fb 85       	ldd	r31, Y+11	; 0x0b
    e9a0:	ce 01       	movw	r24, r28
    e9a2:	19 95       	eicall
    e9a4:	97 ff       	sbrs	r25, 7
    e9a6:	0b c0       	rjmp	.+22     	; 0xe9be <fgetc+0x66>
    e9a8:	2b 81       	ldd	r18, Y+3	; 0x03
    e9aa:	3f ef       	ldi	r19, 0xFF	; 255
    e9ac:	8f 3f       	cpi	r24, 0xFF	; 255
    e9ae:	93 07       	cpc	r25, r19
    e9b0:	11 f4       	brne	.+4      	; 0xe9b6 <fgetc+0x5e>
    e9b2:	80 e1       	ldi	r24, 0x10	; 16
    e9b4:	01 c0       	rjmp	.+2      	; 0xe9b8 <fgetc+0x60>
    e9b6:	80 e2       	ldi	r24, 0x20	; 32
    e9b8:	82 2b       	or	r24, r18
    e9ba:	8b 83       	std	Y+3, r24	; 0x03
    e9bc:	08 c0       	rjmp	.+16     	; 0xe9ce <fgetc+0x76>
    e9be:	2e 81       	ldd	r18, Y+6	; 0x06
    e9c0:	3f 81       	ldd	r19, Y+7	; 0x07
    e9c2:	2f 5f       	subi	r18, 0xFF	; 255
    e9c4:	3f 4f       	sbci	r19, 0xFF	; 255
    e9c6:	3f 83       	std	Y+7, r19	; 0x07
    e9c8:	2e 83       	std	Y+6, r18	; 0x06
    e9ca:	90 e0       	ldi	r25, 0x00	; 0
    e9cc:	02 c0       	rjmp	.+4      	; 0xe9d2 <fgetc+0x7a>
    e9ce:	8f ef       	ldi	r24, 0xFF	; 255
    e9d0:	9f ef       	ldi	r25, 0xFF	; 255
    e9d2:	df 91       	pop	r29
    e9d4:	cf 91       	pop	r28
    e9d6:	08 95       	ret

0000e9d8 <ungetc>:
    e9d8:	fb 01       	movw	r30, r22
    e9da:	23 81       	ldd	r18, Z+3	; 0x03
    e9dc:	20 ff       	sbrs	r18, 0
    e9de:	13 c0       	rjmp	.+38     	; 0xea06 <ungetc+0x2e>
    e9e0:	26 fd       	sbrc	r18, 6
    e9e2:	11 c0       	rjmp	.+34     	; 0xea06 <ungetc+0x2e>
    e9e4:	3f ef       	ldi	r19, 0xFF	; 255
    e9e6:	8f 3f       	cpi	r24, 0xFF	; 255
    e9e8:	93 07       	cpc	r25, r19
    e9ea:	81 f0       	breq	.+32     	; 0xea0c <ungetc+0x34>
    e9ec:	82 83       	std	Z+2, r24	; 0x02
    e9ee:	92 2f       	mov	r25, r18
    e9f0:	90 64       	ori	r25, 0x40	; 64
    e9f2:	9f 7d       	andi	r25, 0xDF	; 223
    e9f4:	93 83       	std	Z+3, r25	; 0x03
    e9f6:	26 81       	ldd	r18, Z+6	; 0x06
    e9f8:	37 81       	ldd	r19, Z+7	; 0x07
    e9fa:	21 50       	subi	r18, 0x01	; 1
    e9fc:	30 40       	sbci	r19, 0x00	; 0
    e9fe:	37 83       	std	Z+7, r19	; 0x07
    ea00:	26 83       	std	Z+6, r18	; 0x06
    ea02:	90 e0       	ldi	r25, 0x00	; 0
    ea04:	08 95       	ret
    ea06:	8f ef       	ldi	r24, 0xFF	; 255
    ea08:	9f ef       	ldi	r25, 0xFF	; 255
    ea0a:	08 95       	ret
    ea0c:	8f ef       	ldi	r24, 0xFF	; 255
    ea0e:	9f ef       	ldi	r25, 0xFF	; 255
    ea10:	08 95       	ret

0000ea12 <__ctype_isfalse>:
    ea12:	99 27       	eor	r25, r25
    ea14:	88 27       	eor	r24, r24

0000ea16 <__ctype_istrue>:
    ea16:	08 95       	ret

0000ea18 <_exit>:
    ea18:	f8 94       	cli

0000ea1a <__stop_program>:
    ea1a:	ff cf       	rjmp	.-2      	; 0xea1a <__stop_program>
