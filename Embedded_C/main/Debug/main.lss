
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  000147ee  00014882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000147ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  0080032a  0080032a  000149ac  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  000149ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009e7  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001d0  00000000  00000000  00017cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000786c  00000000  00000000  00017e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1c  00000000  00000000  0001f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003389  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012c0  00000000  00000000  00023494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cfa  00000000  00000000  00024754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034e1  00000000  00000000  0002544e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0002892f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_5>
      18:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_6>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__vector_35>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_45>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 8c 97 	jmp	0x12f18	; 0x12f18 <__vector_51>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ee ee       	ldi	r30, 0xEE	; 238
     108:	f7 e4       	ldi	r31, 0x47	; 71
     10a:	01 e0       	ldi	r16, 0x01	; 1
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	aa 32       	cpi	r26, 0x2A	; 42
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	14 e0       	ldi	r17, 0x04	; 4
     11c:	aa e2       	ldi	r26, 0x2A	; 42
     11e:	b3 e0       	ldi	r27, 0x03	; 3
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a9 3f       	cpi	r26, 0xF9	; 249
     126:	b1 07       	cpc	r27, r17
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 90 99 	call	0x13320	; 0x13320 <main>
     12e:	0c 94 f5 a3 	jmp	0x147ea	; 0x147ea <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <lcd_set_4bit>:

/*****Function to Reset LCD*****/

void lcd_set_4bit()

{
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	c0 57       	subi	r28, 0x70	; 112
     144:	d0 40       	sbci	r29, 0x00	; 0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e8       	ldi	r26, 0x80	; 128
     156:	bf e3       	ldi	r27, 0x3F	; 63
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	ab 83       	std	Y+3, r26	; 0x03
     15e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	26 e6       	ldi	r18, 0x66	; 102
     16a:	36 e6       	ldi	r19, 0x66	; 102
     16c:	46 e6       	ldi	r20, 0x66	; 102
     16e:	55 e4       	ldi	r21, 0x45	; 69
     170:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	8d 83       	std	Y+5, r24	; 0x05
     17a:	9e 83       	std	Y+6, r25	; 0x06
     17c:	af 83       	std	Y+7, r26	; 0x07
     17e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e8       	ldi	r20, 0x80	; 128
     190:	5f e3       	ldi	r21, 0x3F	; 63
     192:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <lcd_set_4bit+0x66>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	29 f0       	breq	.+10     	; 0x1aa <lcd_set_4bit+0x74>
		__ticks = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	3f ef       	ldi	r19, 0xFF	; 255
     1b8:	4f e7       	ldi	r20, 0x7F	; 127
     1ba:	57 e4       	ldi	r21, 0x47	; 71
     1bc:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     1c0:	18 16       	cp	r1, r24
     1c2:	0c f0       	brlt	.+2      	; 0x1c6 <lcd_set_4bit+0x90>
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	11 23       	and	r17, r17
     1c8:	61 f1       	breq	.+88     	; 0x222 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ca:	69 81       	ldd	r22, Y+1	; 0x01
     1cc:	7a 81       	ldd	r23, Y+2	; 0x02
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	89 87       	std	Y+9, r24	; 0x09
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <lcd_set_4bit+0xe2>
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	8c 01       	movw	r16, r24
     202:	c8 01       	movw	r24, r16
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0xce>
     208:	8c 01       	movw	r16, r24
     20a:	1c 87       	std	Y+12, r17	; 0x0c
     20c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	9a 85       	ldd	r25, Y+10	; 0x0a
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	51 f7       	brne	.-44     	; 0x1f4 <lcd_set_4bit+0xbe>
     220:	17 c0       	rjmp	.+46     	; 0x250 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	6d 81       	ldd	r22, Y+5	; 0x05
     224:	7e 81       	ldd	r23, Y+6	; 0x06
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	9e 87       	std	Y+14, r25	; 0x0e
     23c:	8d 87       	std	Y+13, r24	; 0x0d
     23e:	8d 85       	ldd	r24, Y+13	; 0x0d
     240:	9e 85       	ldd	r25, Y+14	; 0x0e
     242:	8c 01       	movw	r16, r24
     244:	f8 01       	movw	r30, r16
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_set_4bit+0x110>
     24a:	8f 01       	movw	r16, r30
     24c:	1e 87       	std	Y+14, r17	; 0x0e
     24e:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	28 e2       	ldi	r18, 0x28	; 40
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	2e 7f       	andi	r18, 0xFE	; 254
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     262:	88 e2       	ldi	r24, 0x28	; 40
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	28 e2       	ldi	r18, 0x28	; 40
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	2d 7f       	andi	r18, 0xFD	; 253
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	20 e3       	ldi	r18, 0x30	; 48
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 e2       	ldi	r18, 0x28	; 40
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	24 60       	ori	r18, 0x04	; 4
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 ea       	ldi	r26, 0xA0	; 160
     296:	b0 e4       	ldi	r27, 0x40	; 64
     298:	8f 87       	std	Y+15, r24	; 0x0f
     29a:	98 8b       	std	Y+16, r25	; 0x10
     29c:	a9 8b       	std	Y+17, r26	; 0x11
     29e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a2:	78 89       	ldd	r23, Y+16	; 0x10
     2a4:	89 89       	ldd	r24, Y+17	; 0x11
     2a6:	9a 89       	ldd	r25, Y+18	; 0x12
     2a8:	26 e6       	ldi	r18, 0x66	; 102
     2aa:	36 e6       	ldi	r19, 0x66	; 102
     2ac:	46 e6       	ldi	r20, 0x66	; 102
     2ae:	55 e4       	ldi	r21, 0x45	; 69
     2b0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	8b 8b       	std	Y+19, r24	; 0x13
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	ad 8b       	std	Y+21, r26	; 0x15
     2be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	6b 89       	ldd	r22, Y+19	; 0x13
     2c4:	7c 89       	ldd	r23, Y+20	; 0x14
     2c6:	8d 89       	ldd	r24, Y+21	; 0x15
     2c8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	0c f0       	brlt	.+2      	; 0x2dc <lcd_set_4bit+0x1a6>
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	11 23       	and	r17, r17
     2de:	29 f0       	breq	.+10     	; 0x2ea <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	98 8f       	std	Y+24, r25	; 0x18
     2e6:	8f 8b       	std	Y+23, r24	; 0x17
     2e8:	46 c0       	rjmp	.+140    	; 0x376 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2ea:	11 e0       	ldi	r17, 0x01	; 1
     2ec:	6b 89       	ldd	r22, Y+19	; 0x13
     2ee:	7c 89       	ldd	r23, Y+20	; 0x14
     2f0:	8d 89       	ldd	r24, Y+21	; 0x15
     2f2:	9e 89       	ldd	r25, Y+22	; 0x16
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	3f ef       	ldi	r19, 0xFF	; 255
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	57 e4       	ldi	r21, 0x47	; 71
     2fc:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     300:	18 16       	cp	r1, r24
     302:	0c f0       	brlt	.+2      	; 0x306 <lcd_set_4bit+0x1d0>
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	11 23       	and	r17, r17
     308:	61 f1       	breq	.+88     	; 0x362 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     30a:	6f 85       	ldd	r22, Y+15	; 0x0f
     30c:	78 89       	ldd	r23, Y+16	; 0x10
     30e:	89 89       	ldd	r24, Y+17	; 0x11
     310:	9a 89       	ldd	r25, Y+18	; 0x12
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	98 8f       	std	Y+24, r25	; 0x18
     330:	8f 8b       	std	Y+23, r24	; 0x17
     332:	12 c0       	rjmp	.+36     	; 0x358 <lcd_set_4bit+0x222>
     334:	80 e7       	ldi	r24, 0x70	; 112
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	9a 8f       	std	Y+26, r25	; 0x1a
     33a:	89 8f       	std	Y+25, r24	; 0x19
     33c:	89 8d       	ldd	r24, Y+25	; 0x19
     33e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     340:	8c 01       	movw	r16, r24
     342:	c8 01       	movw	r24, r16
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_set_4bit+0x20e>
     348:	8c 01       	movw	r16, r24
     34a:	1a 8f       	std	Y+26, r17	; 0x1a
     34c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34e:	8f 89       	ldd	r24, Y+23	; 0x17
     350:	98 8d       	ldd	r25, Y+24	; 0x18
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	98 8f       	std	Y+24, r25	; 0x18
     356:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     358:	8f 89       	ldd	r24, Y+23	; 0x17
     35a:	98 8d       	ldd	r25, Y+24	; 0x18
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	51 f7       	brne	.-44     	; 0x334 <lcd_set_4bit+0x1fe>
     360:	17 c0       	rjmp	.+46     	; 0x390 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     362:	6b 89       	ldd	r22, Y+19	; 0x13
     364:	7c 89       	ldd	r23, Y+20	; 0x14
     366:	8d 89       	ldd	r24, Y+21	; 0x15
     368:	9e 89       	ldd	r25, Y+22	; 0x16
     36a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	98 8f       	std	Y+24, r25	; 0x18
     374:	8f 8b       	std	Y+23, r24	; 0x17
     376:	8f 89       	ldd	r24, Y+23	; 0x17
     378:	98 8d       	ldd	r25, Y+24	; 0x18
     37a:	9c 8f       	std	Y+28, r25	; 0x1c
     37c:	8b 8f       	std	Y+27, r24	; 0x1b
     37e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     380:	9c 8d       	ldd	r25, Y+28	; 0x1c
     382:	8c 01       	movw	r16, r24
     384:	f8 01       	movw	r30, r16
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_set_4bit+0x250>
     38a:	8f 01       	movw	r16, r30
     38c:	1c 8f       	std	Y+28, r17	; 0x1c
     38e:	0b 8f       	std	Y+27, r16	; 0x1b

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     390:	88 e2       	ldi	r24, 0x28	; 40
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	28 e2       	ldi	r18, 0x28	; 40
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2b 7f       	andi	r18, 0xFB	; 251
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e8       	ldi	r26, 0x80	; 128
     3a8:	bf e3       	ldi	r27, 0x3F	; 63
     3aa:	8d 8f       	std	Y+29, r24	; 0x1d
     3ac:	9e 8f       	std	Y+30, r25	; 0x1e
     3ae:	af 8f       	std	Y+31, r26	; 0x1f
     3b0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3b4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3b8:	98 a1       	lds	r25, 0x48
     3ba:	26 e6       	ldi	r18, 0x66	; 102
     3bc:	36 e6       	ldi	r19, 0x66	; 102
     3be:	46 e6       	ldi	r20, 0x66	; 102
     3c0:	55 e4       	ldi	r21, 0x45	; 69
     3c2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	89 a3       	lds	r24, 0x59
     3cc:	9a a3       	lds	r25, 0x5a
     3ce:	ab a3       	lds	r26, 0x5b
     3d0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 a1       	lds	r22, 0x49
     3d6:	7a a1       	lds	r23, 0x4a
     3d8:	8b a1       	lds	r24, 0x4b
     3da:	9c a1       	lds	r25, 0x4c
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5f e3       	ldi	r21, 0x3F	; 63
     3e4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <lcd_set_4bit+0x2b8>
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	11 23       	and	r17, r17
     3f0:	29 f0       	breq	.+10     	; 0x3fc <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9e a3       	lds	r25, 0x5e
     3f8:	8d a3       	lds	r24, 0x5d
     3fa:	46 c0       	rjmp	.+140    	; 0x488 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3fc:	11 e0       	ldi	r17, 0x01	; 1
     3fe:	69 a1       	lds	r22, 0x49
     400:	7a a1       	lds	r23, 0x4a
     402:	8b a1       	lds	r24, 0x4b
     404:	9c a1       	lds	r25, 0x4c
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	0c f0       	brlt	.+2      	; 0x418 <lcd_set_4bit+0x2e2>
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	11 23       	and	r17, r17
     41a:	61 f1       	breq	.+88     	; 0x474 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     41e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     420:	8f 8d       	ldd	r24, Y+31	; 0x1f
     422:	98 a1       	lds	r25, 0x48
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e2       	ldi	r20, 0x20	; 32
     42a:	51 e4       	ldi	r21, 0x41	; 65
     42c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	9e a3       	lds	r25, 0x5e
     442:	8d a3       	lds	r24, 0x5d
     444:	12 c0       	rjmp	.+36     	; 0x46a <lcd_set_4bit+0x334>
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 a7       	lds	r25, 0x78
     44c:	8f a3       	lds	r24, 0x5f
     44e:	8f a1       	lds	r24, 0x4f
     450:	98 a5       	lds	r25, 0x68
     452:	8c 01       	movw	r16, r24
     454:	c8 01       	movw	r24, r16
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_set_4bit+0x320>
     45a:	8c 01       	movw	r16, r24
     45c:	18 a7       	lds	r17, 0x78
     45e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	8d a1       	lds	r24, 0x4d
     462:	9e a1       	lds	r25, 0x4e
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	9e a3       	lds	r25, 0x5e
     468:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	8d a1       	lds	r24, 0x4d
     46c:	9e a1       	lds	r25, 0x4e
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	51 f7       	brne	.-44     	; 0x446 <lcd_set_4bit+0x310>
     472:	17 c0       	rjmp	.+46     	; 0x4a2 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     474:	69 a1       	lds	r22, 0x49
     476:	7a a1       	lds	r23, 0x4a
     478:	8b a1       	lds	r24, 0x4b
     47a:	9c a1       	lds	r25, 0x4c
     47c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9e a3       	lds	r25, 0x5e
     486:	8d a3       	lds	r24, 0x5d
     488:	8d a1       	lds	r24, 0x4d
     48a:	9e a1       	lds	r25, 0x4e
     48c:	9a a7       	lds	r25, 0x7a
     48e:	89 a7       	lds	r24, 0x79
     490:	89 a5       	lds	r24, 0x69
     492:	9a a5       	lds	r25, 0x6a
     494:	8c 01       	movw	r16, r24
     496:	f8 01       	movw	r30, r16
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_set_4bit+0x362>
     49c:	8f 01       	movw	r16, r30
     49e:	1a a7       	lds	r17, 0x7a
     4a0:	09 a7       	lds	r16, 0x79

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	28 e2       	ldi	r18, 0x28	; 40
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2e 7f       	andi	r18, 0xFE	; 254
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4b4:	88 e2       	ldi	r24, 0x28	; 40
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 e2       	ldi	r18, 0x28	; 40
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2d 7f       	andi	r18, 0xFD	; 253
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	20 e3       	ldi	r18, 0x30	; 48
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     4d0:	88 e2       	ldi	r24, 0x28	; 40
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 e2       	ldi	r18, 0x28	; 40
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	24 60       	ori	r18, 0x04	; 4
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 ea       	ldi	r26, 0xA0	; 160
     4e8:	b0 e4       	ldi	r27, 0x40	; 64
     4ea:	8b a7       	lds	r24, 0x7b
     4ec:	9c a7       	lds	r25, 0x7c
     4ee:	ad a7       	lds	r26, 0x7d
     4f0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f2:	6b a5       	lds	r22, 0x6b
     4f4:	7c a5       	lds	r23, 0x6c
     4f6:	8d a5       	lds	r24, 0x6d
     4f8:	9e a5       	lds	r25, 0x6e
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 e6       	ldi	r20, 0x66	; 102
     500:	55 e4       	ldi	r21, 0x45	; 69
     502:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	8f a7       	lds	r24, 0x7f
     50c:	98 ab       	sts	0x58, r25
     50e:	a9 ab       	sts	0x59, r26
     510:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     512:	11 e0       	ldi	r17, 0x01	; 1
     514:	6f a5       	lds	r22, 0x6f
     516:	78 a9       	sts	0x48, r23
     518:	89 a9       	sts	0x49, r24
     51a:	9a a9       	sts	0x4a, r25
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	0c f0       	brlt	.+2      	; 0x52e <lcd_set_4bit+0x3f8>
     52c:	10 e0       	ldi	r17, 0x00	; 0
     52e:	11 23       	and	r17, r17
     530:	29 f0       	breq	.+10     	; 0x53c <lcd_set_4bit+0x406>
		__ticks = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9c ab       	sts	0x5c, r25
     538:	8b ab       	sts	0x5b, r24
     53a:	46 c0       	rjmp	.+140    	; 0x5c8 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	6f a5       	lds	r22, 0x6f
     540:	78 a9       	sts	0x48, r23
     542:	89 a9       	sts	0x49, r24
     544:	9a a9       	sts	0x4a, r25
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	3f ef       	ldi	r19, 0xFF	; 255
     54a:	4f e7       	ldi	r20, 0x7F	; 127
     54c:	57 e4       	ldi	r21, 0x47	; 71
     54e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <lcd_set_4bit+0x422>
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	11 23       	and	r17, r17
     55a:	61 f1       	breq	.+88     	; 0x5b4 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	6b a5       	lds	r22, 0x6b
     55e:	7c a5       	lds	r23, 0x6c
     560:	8d a5       	lds	r24, 0x6d
     562:	9e a5       	lds	r25, 0x6e
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c ab       	sts	0x5c, r25
     582:	8b ab       	sts	0x5b, r24
     584:	12 c0       	rjmp	.+36     	; 0x5aa <lcd_set_4bit+0x474>
     586:	80 e7       	ldi	r24, 0x70	; 112
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9e ab       	sts	0x5e, r25
     58c:	8d ab       	sts	0x5d, r24
     58e:	8d a9       	sts	0x4d, r24
     590:	9e a9       	sts	0x4e, r25
     592:	8c 01       	movw	r16, r24
     594:	c8 01       	movw	r24, r16
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_set_4bit+0x460>
     59a:	8c 01       	movw	r16, r24
     59c:	1e ab       	sts	0x5e, r17
     59e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	8b a9       	sts	0x4b, r24
     5a2:	9c a9       	sts	0x4c, r25
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9c ab       	sts	0x5c, r25
     5a8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	8b a9       	sts	0x4b, r24
     5ac:	9c a9       	sts	0x4c, r25
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	51 f7       	brne	.-44     	; 0x586 <lcd_set_4bit+0x450>
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6f a5       	lds	r22, 0x6f
     5b6:	78 a9       	sts	0x48, r23
     5b8:	89 a9       	sts	0x49, r24
     5ba:	9a a9       	sts	0x4a, r25
     5bc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9c ab       	sts	0x5c, r25
     5c6:	8b ab       	sts	0x5b, r24
     5c8:	8b a9       	sts	0x4b, r24
     5ca:	9c a9       	sts	0x4c, r25
     5cc:	98 af       	sts	0x78, r25
     5ce:	8f ab       	sts	0x5f, r24
     5d0:	8f a9       	sts	0x4f, r24
     5d2:	98 ad       	sts	0x68, r25
     5d4:	8c 01       	movw	r16, r24
     5d6:	f8 01       	movw	r30, r16
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_set_4bit+0x4a2>
     5dc:	8f 01       	movw	r16, r30
     5de:	18 af       	sts	0x78, r17
     5e0:	0f ab       	sts	0x5f, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	28 e2       	ldi	r18, 0x28	; 40
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	2b 7f       	andi	r18, 0xFB	; 251
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e8       	ldi	r26, 0x80	; 128
     5fa:	bf e3       	ldi	r27, 0x3F	; 63
     5fc:	89 af       	sts	0x79, r24
     5fe:	9a af       	sts	0x7a, r25
     600:	ab af       	sts	0x7b, r26
     602:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     604:	69 ad       	sts	0x69, r22
     606:	7a ad       	sts	0x6a, r23
     608:	8b ad       	sts	0x6b, r24
     60a:	9c ad       	sts	0x6c, r25
     60c:	26 e6       	ldi	r18, 0x66	; 102
     60e:	36 e6       	ldi	r19, 0x66	; 102
     610:	46 e6       	ldi	r20, 0x66	; 102
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	9e 01       	movw	r18, r28
     61e:	23 5c       	subi	r18, 0xC3	; 195
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	cd 96       	adiw	r24, 0x3d	; 61
     632:	fc 01       	movw	r30, r24
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <lcd_set_4bit+0x518>
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 23       	and	r17, r17
     650:	49 f0       	breq	.+18     	; 0x664 <lcd_set_4bit+0x52e>
		__ticks = 1;
     652:	ce 01       	movw	r24, r28
     654:	8f 5b       	subi	r24, 0xBF	; 191
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	31 83       	std	Z+1, r19	; 0x01
     660:	20 83       	st	Z, r18
     662:	6e c0       	rjmp	.+220    	; 0x740 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     664:	11 e0       	ldi	r17, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	cd 96       	adiw	r24, 0x3d	; 61
     66a:	fc 01       	movw	r30, r24
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <lcd_set_4bit+0x550>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	11 23       	and	r17, r17
     688:	09 f4       	brne	.+2      	; 0x68c <lcd_set_4bit+0x556>
     68a:	49 c0       	rjmp	.+146    	; 0x71e <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	69 ad       	sts	0x69, r22
     68e:	7a ad       	sts	0x6a, r23
     690:	8b ad       	sts	0x6b, r24
     692:	9c ad       	sts	0x6c, r25
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e2       	ldi	r20, 0x20	; 32
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	8e 01       	movw	r16, r28
     6a6:	0f 5b       	subi	r16, 0xBF	; 191
     6a8:	1f 4f       	sbci	r17, 0xFF	; 255
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	f8 01       	movw	r30, r16
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
     6bc:	27 c0       	rjmp	.+78     	; 0x70c <lcd_set_4bit+0x5d6>
     6be:	ce 01       	movw	r24, r28
     6c0:	8d 5b       	subi	r24, 0xBD	; 189
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	20 e7       	ldi	r18, 0x70	; 112
     6c6:	31 e0       	ldi	r19, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
     6ce:	ce 01       	movw	r24, r28
     6d0:	8d 5b       	subi	r24, 0xBD	; 189
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	8c 01       	movw	r16, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_set_4bit+0x5a8>
     6e2:	8c 01       	movw	r16, r24
     6e4:	ce 01       	movw	r24, r28
     6e6:	8d 5b       	subi	r24, 0xBD	; 189
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	fc 01       	movw	r30, r24
     6ec:	11 83       	std	Z+1, r17	; 0x01
     6ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	ce 01       	movw	r24, r28
     6f2:	8f 5b       	subi	r24, 0xBF	; 191
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	9e 01       	movw	r18, r28
     6f8:	2f 5b       	subi	r18, 0xBF	; 191
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	31 81       	ldd	r19, Z+1	; 0x01
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	ce 01       	movw	r24, r28
     70e:	8f 5b       	subi	r24, 0xBF	; 191
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	89 f6       	brne	.-94     	; 0x6be <lcd_set_4bit+0x588>
     71c:	2e c0       	rjmp	.+92     	; 0x77a <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71e:	8e 01       	movw	r16, r28
     720:	0f 5b       	subi	r16, 0xBF	; 191
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	ce 01       	movw	r24, r28
     726:	cd 96       	adiw	r24, 0x3d	; 61
     728:	fc 01       	movw	r30, r24
     72a:	60 81       	ld	r22, Z
     72c:	71 81       	ldd	r23, Z+1	; 0x01
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	f8 01       	movw	r30, r16
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	ce 01       	movw	r24, r28
     742:	8b 5b       	subi	r24, 0xBB	; 187
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	9e 01       	movw	r18, r28
     748:	2f 5b       	subi	r18, 0xBF	; 191
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	fc 01       	movw	r30, r24
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	20 83       	st	Z, r18
     758:	ce 01       	movw	r24, r28
     75a:	8b 5b       	subi	r24, 0xBB	; 187
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	8c 01       	movw	r16, r24
     766:	c8 01       	movw	r24, r16
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <lcd_set_4bit+0x632>
     76c:	8c 01       	movw	r16, r24
     76e:	ce 01       	movw	r24, r28
     770:	8b 5b       	subi	r24, 0xBB	; 187
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	fc 01       	movw	r30, r24
     776:	11 83       	std	Z+1, r17	; 0x01
     778:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	28 e2       	ldi	r18, 0x28	; 40
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2e 7f       	andi	r18, 0xFE	; 254
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     78c:	88 e2       	ldi	r24, 0x28	; 40
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	28 e2       	ldi	r18, 0x28	; 40
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2d 7f       	andi	r18, 0xFD	; 253
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18

	lcd_port = 0x30;				//Sending 3
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	20 e3       	ldi	r18, 0x30	; 48
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     7a8:	88 e2       	ldi	r24, 0x28	; 40
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 e2       	ldi	r18, 0x28	; 40
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	24 60       	ori	r18, 0x04	; 4
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
     7ba:	9e 01       	movw	r18, r28
     7bc:	29 5b       	subi	r18, 0xB9	; 185
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 ea       	ldi	r26, 0xA0	; 160
     7c6:	b0 e4       	ldi	r27, 0x40	; 64
     7c8:	f9 01       	movw	r30, r18
     7ca:	80 83       	st	Z, r24
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	a2 83       	std	Z+2, r26	; 0x02
     7d0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	8e 01       	movw	r16, r28
     7d4:	05 5b       	subi	r16, 0xB5	; 181
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	60 81       	ld	r22, Z
     7e2:	71 81       	ldd	r23, Z+1	; 0x01
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	93 81       	ldd	r25, Z+3	; 0x03
     7e8:	26 e6       	ldi	r18, 0x66	; 102
     7ea:	36 e6       	ldi	r19, 0x66	; 102
     7ec:	46 e6       	ldi	r20, 0x66	; 102
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
     800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     802:	ce 01       	movw	r24, r28
     804:	85 5b       	subi	r24, 0xB5	; 181
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <lcd_set_4bit+0x6f0>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	11 23       	and	r17, r17
     828:	49 f0       	breq	.+18     	; 0x83c <lcd_set_4bit+0x706>
		__ticks = 1;
     82a:	ce 01       	movw	r24, r28
     82c:	81 5b       	subi	r24, 0xB1	; 177
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	74 c0       	rjmp	.+232    	; 0x924 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     83c:	ce 01       	movw	r24, r28
     83e:	85 5b       	subi	r24, 0xB5	; 181
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <lcd_set_4bit+0x72a>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	11 23       	and	r17, r17
     862:	09 f4       	brne	.+2      	; 0x866 <lcd_set_4bit+0x730>
     864:	4d c0       	rjmp	.+154    	; 0x900 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	ce 01       	movw	r24, r28
     868:	89 5b       	subi	r24, 0xB9	; 185
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	fc 01       	movw	r30, r24
     86e:	60 81       	ld	r22, Z
     870:	71 81       	ldd	r23, Z+1	; 0x01
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	93 81       	ldd	r25, Z+3	; 0x03
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8e 01       	movw	r16, r28
     888:	01 5b       	subi	r16, 0xB1	; 177
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	f8 01       	movw	r30, r16
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	80 83       	st	Z, r24
     89e:	27 c0       	rjmp	.+78     	; 0x8ee <lcd_set_4bit+0x7b8>
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 5a       	subi	r24, 0xAF	; 175
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	20 e7       	ldi	r18, 0x70	; 112
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	ce 01       	movw	r24, r28
     8b2:	8f 5a       	subi	r24, 0xAF	; 175
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	8c 01       	movw	r16, r24
     8be:	c8 01       	movw	r24, r16
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_set_4bit+0x78a>
     8c4:	8c 01       	movw	r16, r24
     8c6:	ce 01       	movw	r24, r28
     8c8:	8f 5a       	subi	r24, 0xAF	; 175
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 83       	std	Z+1, r17	; 0x01
     8d0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	ce 01       	movw	r24, r28
     8d4:	81 5b       	subi	r24, 0xB1	; 177
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	9e 01       	movw	r18, r28
     8da:	21 5b       	subi	r18, 0xB1	; 177
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	30 40       	sbci	r19, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	ce 01       	movw	r24, r28
     8f0:	81 5b       	subi	r24, 0xB1	; 177
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	89 f6       	brne	.-94     	; 0x8a0 <lcd_set_4bit+0x76a>
     8fe:	2f c0       	rjmp	.+94     	; 0x95e <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     900:	8e 01       	movw	r16, r28
     902:	01 5b       	subi	r16, 0xB1	; 177
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	ce 01       	movw	r24, r28
     908:	85 5b       	subi	r24, 0xB5	; 181
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	ce 01       	movw	r24, r28
     926:	8d 5a       	subi	r24, 0xAD	; 173
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	9e 01       	movw	r18, r28
     92c:	21 5b       	subi	r18, 0xB1	; 177
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	20 83       	st	Z, r18
     93c:	ce 01       	movw	r24, r28
     93e:	8d 5a       	subi	r24, 0xAD	; 173
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	8c 01       	movw	r16, r24
     94a:	c8 01       	movw	r24, r16
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <lcd_set_4bit+0x816>
     950:	8c 01       	movw	r16, r24
     952:	ce 01       	movw	r24, r28
     954:	8d 5a       	subi	r24, 0xAD	; 173
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	fc 01       	movw	r30, r24
     95a:	11 83       	std	Z+1, r17	; 0x01
     95c:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 e2       	ldi	r18, 0x28	; 40
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2b 7f       	andi	r18, 0xFB	; 251
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	9e 01       	movw	r18, r28
     972:	2b 5a       	subi	r18, 0xAB	; 171
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e8       	ldi	r26, 0x80	; 128
     97c:	bf e3       	ldi	r27, 0x3F	; 63
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     988:	8e 01       	movw	r16, r28
     98a:	07 5a       	subi	r16, 0xA7	; 167
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	ce 01       	movw	r24, r28
     990:	8b 5a       	subi	r24, 0xAB	; 171
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 e6       	ldi	r20, 0x66	; 102
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	87 5a       	subi	r24, 0xA7	; 167
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	fc 01       	movw	r30, r24
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     9d6:	88 23       	and	r24, r24
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <lcd_set_4bit+0x8a6>
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	11 23       	and	r17, r17
     9de:	49 f0       	breq	.+18     	; 0x9f2 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9e0:	ce 01       	movw	r24, r28
     9e2:	83 5a       	subi	r24, 0xA3	; 163
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	21 e0       	ldi	r18, 0x01	; 1
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	74 c0       	rjmp	.+232    	; 0xada <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9f2:	ce 01       	movw	r24, r28
     9f4:	87 5a       	subi	r24, 0xA7	; 167
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	11 e0       	ldi	r17, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     a10:	18 16       	cp	r1, r24
     a12:	0c f0       	brlt	.+2      	; 0xa16 <lcd_set_4bit+0x8e0>
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	11 23       	and	r17, r17
     a18:	09 f4       	brne	.+2      	; 0xa1c <lcd_set_4bit+0x8e6>
     a1a:	4d c0       	rjmp	.+154    	; 0xab6 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1c:	ce 01       	movw	r24, r28
     a1e:	8b 5a       	subi	r24, 0xAB	; 171
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	8e 01       	movw	r16, r28
     a3e:	03 5a       	subi	r16, 0xA3	; 163
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	f8 01       	movw	r30, r16
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <lcd_set_4bit+0x96e>
     a56:	ce 01       	movw	r24, r28
     a58:	81 5a       	subi	r24, 0xA1	; 161
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	20 e7       	ldi	r18, 0x70	; 112
     a5e:	31 e0       	ldi	r19, 0x01	; 1
     a60:	fc 01       	movw	r30, r24
     a62:	31 83       	std	Z+1, r19	; 0x01
     a64:	20 83       	st	Z, r18
     a66:	ce 01       	movw	r24, r28
     a68:	81 5a       	subi	r24, 0xA1	; 161
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	8c 01       	movw	r16, r24
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <lcd_set_4bit+0x940>
     a7a:	8c 01       	movw	r16, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	81 5a       	subi	r24, 0xA1	; 161
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	11 83       	std	Z+1, r17	; 0x01
     a86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	ce 01       	movw	r24, r28
     a8a:	83 5a       	subi	r24, 0xA3	; 163
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9e 01       	movw	r18, r28
     a90:	23 5a       	subi	r18, 0xA3	; 163
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa4:	ce 01       	movw	r24, r28
     aa6:	83 5a       	subi	r24, 0xA3	; 163
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	89 f6       	brne	.-94     	; 0xa56 <lcd_set_4bit+0x920>
     ab4:	2f c0       	rjmp	.+94     	; 0xb14 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	8e 01       	movw	r16, r28
     ab8:	03 5a       	subi	r16, 0xA3	; 163
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	87 5a       	subi	r24, 0xA7	; 167
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	93 81       	ldd	r25, Z+3	; 0x03
     acc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	f8 01       	movw	r30, r16
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
     ada:	ce 01       	movw	r24, r28
     adc:	8f 59       	subi	r24, 0x9F	; 159
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	9e 01       	movw	r18, r28
     ae2:	23 5a       	subi	r18, 0xA3	; 163
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	fc 01       	movw	r30, r24
     aee:	31 83       	std	Z+1, r19	; 0x01
     af0:	20 83       	st	Z, r18
     af2:	ce 01       	movw	r24, r28
     af4:	8f 59       	subi	r24, 0x9F	; 159
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	8c 01       	movw	r16, r24
     b00:	c8 01       	movw	r24, r16
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <lcd_set_4bit+0x9cc>
     b06:	8c 01       	movw	r16, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	8f 59       	subi	r24, 0x9F	; 159
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	fc 01       	movw	r30, r24
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16

	_delay_ms(1);



	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b14:	88 e2       	ldi	r24, 0x28	; 40
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	28 e2       	ldi	r18, 0x28	; 40
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	2e 7f       	andi	r18, 0xFE	; 254
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18

	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	28 e2       	ldi	r18, 0x28	; 40
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	20 81       	ld	r18, Z
     b32:	2d 7f       	andi	r18, 0xFD	; 253
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18

	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b38:	88 e2       	ldi	r24, 0x28	; 40
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	20 e2       	ldi	r18, 0x20	; 32
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18

	sbit(lcd_port,EN);				//Set Enable Pin
     b42:	88 e2       	ldi	r24, 0x28	; 40
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	28 e2       	ldi	r18, 0x28	; 40
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	24 60       	ori	r18, 0x04	; 4
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
     b54:	9e 01       	movw	r18, r28
     b56:	2d 59       	subi	r18, 0x9D	; 157
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 ea       	ldi	r26, 0xA0	; 160
     b60:	b0 e4       	ldi	r27, 0x40	; 64
     b62:	f9 01       	movw	r30, r18
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	8e 01       	movw	r16, r28
     b6e:	09 59       	subi	r16, 0x99	; 153
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	ce 01       	movw	r24, r28
     b74:	8d 59       	subi	r24, 0x9D	; 157
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	fc 01       	movw	r30, r24
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	26 e6       	ldi	r18, 0x66	; 102
     b84:	36 e6       	ldi	r19, 0x66	; 102
     b86:	46 e6       	ldi	r20, 0x66	; 102
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	a2 83       	std	Z+2, r26	; 0x02
     b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	89 59       	subi	r24, 0x99	; 153
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     bba:	88 23       	and	r24, r24
     bbc:	0c f0       	brlt	.+2      	; 0xbc0 <lcd_set_4bit+0xa8a>
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	11 23       	and	r17, r17
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 59       	subi	r24, 0x95	; 149
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	74 c0       	rjmp	.+232    	; 0xcbe <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bd6:	ce 01       	movw	r24, r28
     bd8:	89 59       	subi	r24, 0x99	; 153
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	fc 01       	movw	r30, r24
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <lcd_set_4bit+0xac4>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	11 23       	and	r17, r17
     bfc:	09 f4       	brne	.+2      	; 0xc00 <lcd_set_4bit+0xaca>
     bfe:	4d c0       	rjmp	.+154    	; 0xc9a <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	ce 01       	movw	r24, r28
     c02:	8d 59       	subi	r24, 0x9D	; 157
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8e 01       	movw	r16, r28
     c22:	05 59       	subi	r16, 0x95	; 149
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	27 c0       	rjmp	.+78     	; 0xc88 <lcd_set_4bit+0xb52>
     c3a:	ce 01       	movw	r24, r28
     c3c:	83 59       	subi	r24, 0x93	; 147
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	20 e7       	ldi	r18, 0x70	; 112
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	31 83       	std	Z+1, r19	; 0x01
     c48:	20 83       	st	Z, r18
     c4a:	ce 01       	movw	r24, r28
     c4c:	83 59       	subi	r24, 0x93	; 147
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	8c 01       	movw	r16, r24
     c58:	c8 01       	movw	r24, r16
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_set_4bit+0xb24>
     c5e:	8c 01       	movw	r16, r24
     c60:	ce 01       	movw	r24, r28
     c62:	83 59       	subi	r24, 0x93	; 147
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	fc 01       	movw	r30, r24
     c68:	11 83       	std	Z+1, r17	; 0x01
     c6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	ce 01       	movw	r24, r28
     c6e:	85 59       	subi	r24, 0x95	; 149
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	9e 01       	movw	r18, r28
     c74:	25 59       	subi	r18, 0x95	; 149
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	ce 01       	movw	r24, r28
     c8a:	85 59       	subi	r24, 0x95	; 149
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	89 f6       	brne	.-94     	; 0xc3a <lcd_set_4bit+0xb04>
     c98:	2f c0       	rjmp	.+94     	; 0xcf8 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	8e 01       	movw	r16, r28
     c9c:	05 59       	subi	r16, 0x95	; 149
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	89 59       	subi	r24, 0x99	; 153
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	ce 01       	movw	r24, r28
     cc0:	81 59       	subi	r24, 0x91	; 145
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	9e 01       	movw	r18, r28
     cc6:	25 59       	subi	r18, 0x95	; 149
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 83       	std	Z+1, r19	; 0x01
     cd4:	20 83       	st	Z, r18
     cd6:	ce 01       	movw	r24, r28
     cd8:	81 59       	subi	r24, 0x91	; 145
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	8c 01       	movw	r16, r24
     ce4:	c8 01       	movw	r24, r16
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <lcd_set_4bit+0xbb0>
     cea:	8c 01       	movw	r16, r24
     cec:	ce 01       	movw	r24, r28
     cee:	81 59       	subi	r24, 0x91	; 145
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	fc 01       	movw	r30, r24
     cf4:	11 83       	std	Z+1, r17	; 0x01
     cf6:	00 83       	st	Z, r16

	_delay_ms(5);					//Delay

	cbit(lcd_port,EN);				//Clear Enable Pin
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	28 e2       	ldi	r18, 0x28	; 40
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	2b 7f       	andi	r18, 0xFB	; 251
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18



	

}
     d0a:	c0 59       	subi	r28, 0x90	; 144
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <lcd_init>:

/*****Function to Initialize LCD*****/

void lcd_init()

{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	2e 97       	sbiw	r28, 0x0e	; 14
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e8       	ldi	r26, 0x80	; 128
     d40:	bf e3       	ldi	r27, 0x3F	; 63
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	26 e6       	ldi	r18, 0x66	; 102
     d54:	36 e6       	ldi	r19, 0x66	; 102
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	af 83       	std	Y+7, r26	; 0x07
     d68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d6a:	11 e0       	ldi	r17, 0x01	; 1
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	0c f0       	brlt	.+2      	; 0xd86 <lcd_init+0x64>
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	11 23       	and	r17, r17
     d88:	29 f0       	breq	.+10     	; 0xd94 <lcd_init+0x72>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	89 87       	std	Y+9, r24	; 0x09
     d92:	46 c0       	rjmp	.+140    	; 0xe20 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d94:	11 e0       	ldi	r17, 0x01	; 1
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     daa:	18 16       	cp	r1, r24
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <lcd_init+0x8e>
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	11 23       	and	r17, r17
     db2:	61 f1       	breq	.+88     	; 0xe0c <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	7a 81       	ldd	r23, Y+2	; 0x02
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9a 87       	std	Y+10, r25	; 0x0a
     dda:	89 87       	std	Y+9, r24	; 0x09
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <lcd_init+0xe0>
     dde:	80 e7       	ldi	r24, 0x70	; 112
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	8b 85       	ldd	r24, Y+11	; 0x0b
     de8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dea:	8c 01       	movw	r16, r24
     dec:	c8 01       	movw	r24, r16
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <lcd_init+0xcc>
     df2:	8c 01       	movw	r16, r24
     df4:	1c 87       	std	Y+12, r17	; 0x0c
     df6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9a 87       	std	Y+10, r25	; 0x0a
     e00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	51 f7       	brne	.-44     	; 0xdde <lcd_init+0xbc>
     e0a:	17 c0       	rjmp	.+46     	; 0xe3a <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a 87       	std	Y+10, r25	; 0x0a
     e1e:	89 87       	std	Y+9, r24	; 0x09
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	9e 87       	std	Y+14, r25	; 0x0e
     e26:	8d 87       	std	Y+13, r24	; 0x0d
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	8c 01       	movw	r16, r24
     e2e:	c8 01       	movw	r24, r16
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <lcd_init+0x10e>
     e34:	8c 01       	movw	r16, r24
     e36:	1e 87       	std	Y+14, r17	; 0x0e
     e38:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(1);



	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x01);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x06);
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x0E);
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	lcd_wr_command(0x80);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

	

}
     e58:	2e 96       	adiw	r28, 0x0e	; 14
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <lcd_wr_command>:

/*****Function to Write Command on LCD*****/

void lcd_wr_command(unsigned char cmd)

{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	6e 97       	sbiw	r28, 0x1e	; 30
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8e 8f       	std	Y+30, r24	; 0x1e

	unsigned char temp;

	temp = cmd;
     e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e8a:	89 83       	std	Y+1, r24	; 0x01

	temp = temp & 0xF0;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 7f       	andi	r24, 0xF0	; 240
     e90:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
     e92:	88 e2       	ldi	r24, 0x28	; 40
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 e2       	ldi	r18, 0x28	; 40
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 70       	andi	r18, 0x0F	; 15
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 83       	st	Z, r18

	lcd_port |= temp;
     ea4:	88 e2       	ldi	r24, 0x28	; 40
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 e2       	ldi	r18, 0x28	; 40
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	f9 01       	movw	r30, r18
     eae:	30 81       	ld	r19, Z
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	23 2b       	or	r18, r19
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
     eb8:	88 e2       	ldi	r24, 0x28	; 40
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	28 e2       	ldi	r18, 0x28	; 40
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	2e 7f       	andi	r18, 0xFE	; 254
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 e2       	ldi	r18, 0x28	; 40
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	2d 7f       	andi	r18, 0xFD	; 253
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	28 e2       	ldi	r18, 0x28	; 40
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	24 60       	ori	r18, 0x04	; 4
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 ea       	ldi	r26, 0xA0	; 160
     ef4:	b0 e4       	ldi	r27, 0x40	; 64
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	ac 83       	std	Y+4, r26	; 0x04
     efc:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6a 81       	ldd	r22, Y+2	; 0x02
     f00:	7b 81       	ldd	r23, Y+3	; 0x03
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	26 e6       	ldi	r18, 0x66	; 102
     f08:	36 e6       	ldi	r19, 0x66	; 102
     f0a:	46 e6       	ldi	r20, 0x66	; 102
     f0c:	55 e4       	ldi	r21, 0x45	; 69
     f0e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	a8 87       	std	Y+8, r26	; 0x08
     f1c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	6e 81       	ldd	r22, Y+6	; 0x06
     f22:	7f 81       	ldd	r23, Y+7	; 0x07
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
     f34:	88 23       	and	r24, r24
     f36:	0c f0       	brlt	.+2      	; 0xf3a <lcd_wr_command+0xcc>
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	11 23       	and	r17, r17
     f3c:	29 f0       	breq	.+10     	; 0xf48 <lcd_wr_command+0xda>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9b 87       	std	Y+11, r25	; 0x0b
     f44:	8a 87       	std	Y+10, r24	; 0x0a
     f46:	46 c0       	rjmp	.+140    	; 0xfd4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f48:	11 e0       	ldi	r17, 0x01	; 1
     f4a:	6e 81       	ldd	r22, Y+6	; 0x06
     f4c:	7f 81       	ldd	r23, Y+7	; 0x07
     f4e:	88 85       	ldd	r24, Y+8	; 0x08
     f50:	99 85       	ldd	r25, Y+9	; 0x09
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	0c f0       	brlt	.+2      	; 0xf64 <lcd_wr_command+0xf6>
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	11 23       	and	r17, r17
     f66:	61 f1       	breq	.+88     	; 0xfc0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6a 81       	ldd	r22, Y+2	; 0x02
     f6a:	7b 81       	ldd	r23, Y+3	; 0x03
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9b 87       	std	Y+11, r25	; 0x0b
     f8e:	8a 87       	std	Y+10, r24	; 0x0a
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <lcd_wr_command+0x148>
     f92:	80 e7       	ldi	r24, 0x70	; 112
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	9d 87       	std	Y+13, r25	; 0x0d
     f98:	8c 87       	std	Y+12, r24	; 0x0c
     f9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f9c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9e:	8c 01       	movw	r16, r24
     fa0:	c8 01       	movw	r24, r16
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <lcd_wr_command+0x134>
     fa6:	8c 01       	movw	r16, r24
     fa8:	1d 87       	std	Y+13, r17	; 0x0d
     faa:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8a 85       	ldd	r24, Y+10	; 0x0a
     fae:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
     fb4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	51 f7       	brne	.-44     	; 0xf92 <lcd_wr_command+0x124>
     fbe:	17 c0       	rjmp	.+46     	; 0xfee <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6e 81       	ldd	r22, Y+6	; 0x06
     fc2:	7f 81       	ldd	r23, Y+7	; 0x07
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9b 87       	std	Y+11, r25	; 0x0b
     fd2:	8a 87       	std	Y+10, r24	; 0x0a
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd8:	9f 87       	std	Y+15, r25	; 0x0f
     fda:	8e 87       	std	Y+14, r24	; 0x0e
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	8c 01       	movw	r16, r24
     fe2:	f8 01       	movw	r30, r16
     fe4:	31 97       	sbiw	r30, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_wr_command+0x176>
     fe8:	8f 01       	movw	r16, r30
     fea:	1f 87       	std	Y+15, r17	; 0x0f
     fec:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
     fee:	88 e2       	ldi	r24, 0x28	; 40
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e2       	ldi	r18, 0x28	; 40
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	2b 7f       	andi	r18, 0xFB	; 251
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18

	

	cmd = cmd & 0x0F;
    1000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	8e 8f       	std	Y+30, r24	; 0x1e

	cmd = cmd<<4;
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	82 95       	swap	r24
    100a:	80 7f       	andi	r24, 0xF0	; 240
    100c:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	28 e2       	ldi	r18, 0x28	; 40
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	2f 70       	andi	r18, 0x0F	; 15
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18

	lcd_port |= cmd;
    1020:	88 e2       	ldi	r24, 0x28	; 40
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 e2       	ldi	r18, 0x28	; 40
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f9 01       	movw	r30, r18
    102a:	30 81       	ld	r19, Z
    102c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    102e:	23 2b       	or	r18, r19
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18

	cbit(lcd_port,RS);
    1034:	88 e2       	ldi	r24, 0x28	; 40
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	28 e2       	ldi	r18, 0x28	; 40
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2e 7f       	andi	r18, 0xFE	; 254
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	28 e2       	ldi	r18, 0x28	; 40
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	2d 7f       	andi	r18, 0xFD	; 253
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1058:	88 e2       	ldi	r24, 0x28	; 40
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 e2       	ldi	r18, 0x28	; 40
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 ea       	ldi	r26, 0xA0	; 160
    1070:	b0 e4       	ldi	r27, 0x40	; 64
    1072:	88 8b       	std	Y+16, r24	; 0x10
    1074:	99 8b       	std	Y+17, r25	; 0x11
    1076:	aa 8b       	std	Y+18, r26	; 0x12
    1078:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    107a:	68 89       	ldd	r22, Y+16	; 0x10
    107c:	79 89       	ldd	r23, Y+17	; 0x11
    107e:	8a 89       	ldd	r24, Y+18	; 0x12
    1080:	9b 89       	ldd	r25, Y+19	; 0x13
    1082:	26 e6       	ldi	r18, 0x66	; 102
    1084:	36 e6       	ldi	r19, 0x66	; 102
    1086:	46 e6       	ldi	r20, 0x66	; 102
    1088:	55 e4       	ldi	r21, 0x45	; 69
    108a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8c 8b       	std	Y+20, r24	; 0x14
    1094:	9d 8b       	std	Y+21, r25	; 0x15
    1096:	ae 8b       	std	Y+22, r26	; 0x16
    1098:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    109a:	11 e0       	ldi	r17, 0x01	; 1
    109c:	6c 89       	ldd	r22, Y+20	; 0x14
    109e:	7d 89       	ldd	r23, Y+21	; 0x15
    10a0:	8e 89       	ldd	r24, Y+22	; 0x16
    10a2:	9f 89       	ldd	r25, Y+23	; 0x17
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <lcd_wr_command+0x248>
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	11 23       	and	r17, r17
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <lcd_wr_command+0x256>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	99 8f       	std	Y+25, r25	; 0x19
    10c0:	88 8f       	std	Y+24, r24	; 0x18
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	6c 89       	ldd	r22, Y+20	; 0x14
    10c8:	7d 89       	ldd	r23, Y+21	; 0x15
    10ca:	8e 89       	ldd	r24, Y+22	; 0x16
    10cc:	9f 89       	ldd	r25, Y+23	; 0x17
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	0c f0       	brlt	.+2      	; 0x10e0 <lcd_wr_command+0x272>
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	11 23       	and	r17, r17
    10e2:	61 f1       	breq	.+88     	; 0x113c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	68 89       	ldd	r22, Y+16	; 0x10
    10e6:	79 89       	ldd	r23, Y+17	; 0x11
    10e8:	8a 89       	ldd	r24, Y+18	; 0x12
    10ea:	9b 89       	ldd	r25, Y+19	; 0x13
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	99 8f       	std	Y+25, r25	; 0x19
    110a:	88 8f       	std	Y+24, r24	; 0x18
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <lcd_wr_command+0x2c4>
    110e:	80 e7       	ldi	r24, 0x70	; 112
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9b 8f       	std	Y+27, r25	; 0x1b
    1114:	8a 8f       	std	Y+26, r24	; 0x1a
    1116:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    111a:	8c 01       	movw	r16, r24
    111c:	c8 01       	movw	r24, r16
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <lcd_wr_command+0x2b0>
    1122:	8c 01       	movw	r16, r24
    1124:	1b 8f       	std	Y+27, r17	; 0x1b
    1126:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	88 8d       	ldd	r24, Y+24	; 0x18
    112a:	99 8d       	ldd	r25, Y+25	; 0x19
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	99 8f       	std	Y+25, r25	; 0x19
    1130:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	88 8d       	ldd	r24, Y+24	; 0x18
    1134:	99 8d       	ldd	r25, Y+25	; 0x19
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	51 f7       	brne	.-44     	; 0x110e <lcd_wr_command+0x2a0>
    113a:	17 c0       	rjmp	.+46     	; 0x116a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6c 89       	ldd	r22, Y+20	; 0x14
    113e:	7d 89       	ldd	r23, Y+21	; 0x15
    1140:	8e 89       	ldd	r24, Y+22	; 0x16
    1142:	9f 89       	ldd	r25, Y+23	; 0x17
    1144:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	99 8f       	std	Y+25, r25	; 0x19
    114e:	88 8f       	std	Y+24, r24	; 0x18
    1150:	88 8d       	ldd	r24, Y+24	; 0x18
    1152:	99 8d       	ldd	r25, Y+25	; 0x19
    1154:	9d 8f       	std	Y+29, r25	; 0x1d
    1156:	8c 8f       	std	Y+28, r24	; 0x1c
    1158:	8c 8d       	ldd	r24, Y+28	; 0x1c
    115a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    115c:	8c 01       	movw	r16, r24
    115e:	f8 01       	movw	r30, r16
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <lcd_wr_command+0x2f2>
    1164:	8f 01       	movw	r16, r30
    1166:	1d 8f       	std	Y+29, r17	; 0x1d
    1168:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    116a:	88 e2       	ldi	r24, 0x28	; 40
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	28 e2       	ldi	r18, 0x28	; 40
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	2b 7f       	andi	r18, 0xFB	; 251
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18

}
    117c:	6e 96       	adiw	r28, 0x1e	; 30
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/

void lcd_wr_char(char letter)

{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	6e 97       	sbiw	r28, 0x1e	; 30
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8e 8f       	std	Y+30, r24	; 0x1e

	char temp;

	temp = letter;
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	89 83       	std	Y+1, r24	; 0x01

	temp = (temp & 0xF0);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	89 83       	std	Y+1, r24	; 0x01

	lcd_port &= 0x0F;
    11b6:	88 e2       	ldi	r24, 0x28	; 40
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	28 e2       	ldi	r18, 0x28	; 40
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	2f 70       	andi	r18, 0x0F	; 15
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18

	lcd_port |= temp;
    11c8:	88 e2       	ldi	r24, 0x28	; 40
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	28 e2       	ldi	r18, 0x28	; 40
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	30 81       	ld	r19, Z
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	23 2b       	or	r18, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    11dc:	88 e2       	ldi	r24, 0x28	; 40
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	28 e2       	ldi	r18, 0x28	; 40
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	21 60       	ori	r18, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    11ee:	88 e2       	ldi	r24, 0x28	; 40
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	28 e2       	ldi	r18, 0x28	; 40
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	2d 7f       	andi	r18, 0xFD	; 253
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    1200:	88 e2       	ldi	r24, 0x28	; 40
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e2       	ldi	r18, 0x28	; 40
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	24 60       	ori	r18, 0x04	; 4
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 ea       	ldi	r26, 0xA0	; 160
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	ac 83       	std	Y+4, r26	; 0x04
    1220:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	7b 81       	ldd	r23, Y+3	; 0x03
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	26 e6       	ldi	r18, 0x66	; 102
    122c:	36 e6       	ldi	r19, 0x66	; 102
    122e:	46 e6       	ldi	r20, 0x66	; 102
    1230:	55 e4       	ldi	r21, 0x45	; 69
    1232:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8e 83       	std	Y+6, r24	; 0x06
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	a8 87       	std	Y+8, r26	; 0x08
    1240:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1242:	11 e0       	ldi	r17, 0x01	; 1
    1244:	6e 81       	ldd	r22, Y+6	; 0x06
    1246:	7f 81       	ldd	r23, Y+7	; 0x07
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    1258:	88 23       	and	r24, r24
    125a:	0c f0       	brlt	.+2      	; 0x125e <lcd_wr_char+0xcc>
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	11 23       	and	r17, r17
    1260:	29 f0       	breq	.+10     	; 0x126c <lcd_wr_char+0xda>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9b 87       	std	Y+11, r25	; 0x0b
    1268:	8a 87       	std	Y+10, r24	; 0x0a
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    126c:	11 e0       	ldi	r17, 0x01	; 1
    126e:	6e 81       	ldd	r22, Y+6	; 0x06
    1270:	7f 81       	ldd	r23, Y+7	; 0x07
    1272:	88 85       	ldd	r24, Y+8	; 0x08
    1274:	99 85       	ldd	r25, Y+9	; 0x09
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	0c f0       	brlt	.+2      	; 0x1288 <lcd_wr_char+0xf6>
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	11 23       	and	r17, r17
    128a:	61 f1       	breq	.+88     	; 0x12e4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6a 81       	ldd	r22, Y+2	; 0x02
    128e:	7b 81       	ldd	r23, Y+3	; 0x03
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9b 87       	std	Y+11, r25	; 0x0b
    12b2:	8a 87       	std	Y+10, r24	; 0x0a
    12b4:	12 c0       	rjmp	.+36     	; 0x12da <lcd_wr_char+0x148>
    12b6:	80 e7       	ldi	r24, 0x70	; 112
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9d 87       	std	Y+13, r25	; 0x0d
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c2:	8c 01       	movw	r16, r24
    12c4:	c8 01       	movw	r24, r16
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <lcd_wr_char+0x134>
    12ca:	8c 01       	movw	r16, r24
    12cc:	1d 87       	std	Y+13, r17	; 0x0d
    12ce:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9b 87       	std	Y+11, r25	; 0x0b
    12d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	51 f7       	brne	.-44     	; 0x12b6 <lcd_wr_char+0x124>
    12e2:	17 c0       	rjmp	.+46     	; 0x1312 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6e 81       	ldd	r22, Y+6	; 0x06
    12e6:	7f 81       	ldd	r23, Y+7	; 0x07
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	99 85       	ldd	r25, Y+9	; 0x09
    12ec:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9b 87       	std	Y+11, r25	; 0x0b
    12f6:	8a 87       	std	Y+10, r24	; 0x0a
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	9f 87       	std	Y+15, r25	; 0x0f
    12fe:	8e 87       	std	Y+14, r24	; 0x0e
    1300:	8e 85       	ldd	r24, Y+14	; 0x0e
    1302:	9f 85       	ldd	r25, Y+15	; 0x0f
    1304:	8c 01       	movw	r16, r24
    1306:	f8 01       	movw	r30, r16
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <lcd_wr_char+0x176>
    130c:	8f 01       	movw	r16, r30
    130e:	1f 87       	std	Y+15, r17	; 0x0f
    1310:	0e 87       	std	Y+14, r16	; 0x0e

	_delay_ms(5);

	cbit(lcd_port,EN);
    1312:	88 e2       	ldi	r24, 0x28	; 40
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	28 e2       	ldi	r18, 0x28	; 40
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	2b 7f       	andi	r18, 0xFB	; 251
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18



	letter = letter & 0x0F;
    1324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	8e 8f       	std	Y+30, r24	; 0x1e

	letter = letter<<4;
    132a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    132c:	82 95       	swap	r24
    132e:	80 7f       	andi	r24, 0xF0	; 240
    1330:	8e 8f       	std	Y+30, r24	; 0x1e

	lcd_port &= 0x0F;
    1332:	88 e2       	ldi	r24, 0x28	; 40
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	28 e2       	ldi	r18, 0x28	; 40
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	20 81       	ld	r18, Z
    133e:	2f 70       	andi	r18, 0x0F	; 15
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18

	lcd_port |= letter;
    1344:	88 e2       	ldi	r24, 0x28	; 40
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	28 e2       	ldi	r18, 0x28	; 40
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	f9 01       	movw	r30, r18
    134e:	30 81       	ld	r19, Z
    1350:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1352:	23 2b       	or	r18, r19
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18

	sbit(lcd_port,RS);
    1358:	88 e2       	ldi	r24, 0x28	; 40
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	28 e2       	ldi	r18, 0x28	; 40
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	20 81       	ld	r18, Z
    1364:	21 60       	ori	r18, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18

	cbit(lcd_port,RW);
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	28 e2       	ldi	r18, 0x28	; 40
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	2d 7f       	andi	r18, 0xFD	; 253
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18

	sbit(lcd_port,EN);
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	28 e2       	ldi	r18, 0x28	; 40
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	24 60       	ori	r18, 0x04	; 4
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 ea       	ldi	r26, 0xA0	; 160
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	88 8b       	std	Y+16, r24	; 0x10
    1398:	99 8b       	std	Y+17, r25	; 0x11
    139a:	aa 8b       	std	Y+18, r26	; 0x12
    139c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    139e:	68 89       	ldd	r22, Y+16	; 0x10
    13a0:	79 89       	ldd	r23, Y+17	; 0x11
    13a2:	8a 89       	ldd	r24, Y+18	; 0x12
    13a4:	9b 89       	ldd	r25, Y+19	; 0x13
    13a6:	26 e6       	ldi	r18, 0x66	; 102
    13a8:	36 e6       	ldi	r19, 0x66	; 102
    13aa:	46 e6       	ldi	r20, 0x66	; 102
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8c 8b       	std	Y+20, r24	; 0x14
    13b8:	9d 8b       	std	Y+21, r25	; 0x15
    13ba:	ae 8b       	std	Y+22, r26	; 0x16
    13bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13be:	11 e0       	ldi	r17, 0x01	; 1
    13c0:	6c 89       	ldd	r22, Y+20	; 0x14
    13c2:	7d 89       	ldd	r23, Y+21	; 0x15
    13c4:	8e 89       	ldd	r24, Y+22	; 0x16
    13c6:	9f 89       	ldd	r25, Y+23	; 0x17
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	0c f0       	brlt	.+2      	; 0x13da <lcd_wr_char+0x248>
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	11 23       	and	r17, r17
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <lcd_wr_char+0x256>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	99 8f       	std	Y+25, r25	; 0x19
    13e4:	88 8f       	std	Y+24, r24	; 0x18
    13e6:	46 c0       	rjmp	.+140    	; 0x1474 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	6c 89       	ldd	r22, Y+20	; 0x14
    13ec:	7d 89       	ldd	r23, Y+21	; 0x15
    13ee:	8e 89       	ldd	r24, Y+22	; 0x16
    13f0:	9f 89       	ldd	r25, Y+23	; 0x17
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <lcd_wr_char+0x272>
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	11 23       	and	r17, r17
    1406:	61 f1       	breq	.+88     	; 0x1460 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	68 89       	ldd	r22, Y+16	; 0x10
    140a:	79 89       	ldd	r23, Y+17	; 0x11
    140c:	8a 89       	ldd	r24, Y+18	; 0x12
    140e:	9b 89       	ldd	r25, Y+19	; 0x13
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	99 8f       	std	Y+25, r25	; 0x19
    142e:	88 8f       	std	Y+24, r24	; 0x18
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <lcd_wr_char+0x2c4>
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	9b 8f       	std	Y+27, r25	; 0x1b
    1438:	8a 8f       	std	Y+26, r24	; 0x1a
    143a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    143c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    143e:	8c 01       	movw	r16, r24
    1440:	c8 01       	movw	r24, r16
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <lcd_wr_char+0x2b0>
    1446:	8c 01       	movw	r16, r24
    1448:	1b 8f       	std	Y+27, r17	; 0x1b
    144a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	88 8d       	ldd	r24, Y+24	; 0x18
    144e:	99 8d       	ldd	r25, Y+25	; 0x19
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	99 8f       	std	Y+25, r25	; 0x19
    1454:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	88 8d       	ldd	r24, Y+24	; 0x18
    1458:	99 8d       	ldd	r25, Y+25	; 0x19
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	51 f7       	brne	.-44     	; 0x1432 <lcd_wr_char+0x2a0>
    145e:	17 c0       	rjmp	.+46     	; 0x148e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	6c 89       	ldd	r22, Y+20	; 0x14
    1462:	7d 89       	ldd	r23, Y+21	; 0x15
    1464:	8e 89       	ldd	r24, Y+22	; 0x16
    1466:	9f 89       	ldd	r25, Y+23	; 0x17
    1468:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	99 8f       	std	Y+25, r25	; 0x19
    1472:	88 8f       	std	Y+24, r24	; 0x18
    1474:	88 8d       	ldd	r24, Y+24	; 0x18
    1476:	99 8d       	ldd	r25, Y+25	; 0x19
    1478:	9d 8f       	std	Y+29, r25	; 0x1d
    147a:	8c 8f       	std	Y+28, r24	; 0x1c
    147c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    147e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1480:	8c 01       	movw	r16, r24
    1482:	f8 01       	movw	r30, r16
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <lcd_wr_char+0x2f2>
    1488:	8f 01       	movw	r16, r30
    148a:	1d 8f       	std	Y+29, r17	; 0x1d
    148c:	0c 8f       	std	Y+28, r16	; 0x1c

	_delay_ms(5);

	cbit(lcd_port,EN);
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e2       	ldi	r18, 0x28	; 40
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	2b 7f       	andi	r18, 0xFB	; 251
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18

}
    14a0:	6e 96       	adiw	r28, 0x1e	; 30
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <lcd_home>:



void lcd_home()

{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62

	lcd_wr_command(0x80);
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>

}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <lcd_string>:

/*****Function to Print String on LCD*****/

void lcd_string(char *str)

{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	0f 92       	push	r0
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01

	while(*str != '\0')
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <lcd_string+0x28>

	{

		lcd_wr_char(*str);
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	fc 01       	movw	r30, r24
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		str++;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01

void lcd_string(char *str)

{

	while(*str != '\0')
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	79 f7       	brne	.-34     	; 0x14dc <lcd_string+0x12>

		str++;

	}

}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <lcd_cursor>:



void lcd_cursor (char row, char column)

{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	0f 92       	push	r0
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02

	switch (row) {
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	99 f0       	breq	.+38     	; 0x154a <lcd_cursor+0x42>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	24 f4       	brge	.+8      	; 0x1532 <lcd_cursor+0x2a>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	41 f0       	breq	.+16     	; 0x1540 <lcd_cursor+0x38>
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <lcd_cursor+0x60>
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	71 f0       	breq	.+28     	; 0x1554 <lcd_cursor+0x4c>
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <lcd_cursor+0x56>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <lcd_cursor+0x60>

		case 1: lcd_wr_command (0x80 + column - 1); break;
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 58       	subi	r24, 0x81	; 129
    1544:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1548:	10 c0       	rjmp	.+32     	; 0x156a <lcd_cursor+0x62>

		case 2: lcd_wr_command (0xc0 + column - 1); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	81 54       	subi	r24, 0x41	; 65
    154e:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1552:	0b c0       	rjmp	.+22     	; 0x156a <lcd_cursor+0x62>

		case 3: lcd_wr_command (0x94 + column - 1); break;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	8d 56       	subi	r24, 0x6D	; 109
    1558:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    155c:	06 c0       	rjmp	.+12     	; 0x156a <lcd_cursor+0x62>

		case 4: lcd_wr_command (0xd4 + column - 1); break;
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8d 52       	subi	r24, 0x2D	; 45
    1562:	0e 94 37 07 	call	0xe6e	; 0xe6e <lcd_wr_command>
    1566:	01 c0       	rjmp	.+2      	; 0x156a <lcd_cursor+0x62>

		default: break;
    1568:	00 00       	nop

	}

}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/

void lcd_print (char row, char coloumn, unsigned int value, int digits)

{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
    158c:	5d 83       	std	Y+5, r21	; 0x05
    158e:	4c 83       	std	Y+4, r20	; 0x04
    1590:	3f 83       	std	Y+7, r19	; 0x07
    1592:	2e 83       	std	Y+6, r18	; 0x06

	unsigned char flag=0;
    1594:	19 82       	std	Y+1, r1	; 0x01

	if(row==0||coloumn==0)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <lcd_print+0x2e>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 23       	and	r24, r24
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <lcd_print+0x34>

	{

		lcd_home();
    15a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <lcd_home>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <lcd_print+0x3c>

	else

	{

		lcd_cursor(row,coloumn);
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	6b 81       	ldd	r22, Y+3	; 0x03
    15ac:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>

	}

	if(digits==5 || flag==1)
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <lcd_print+0x4c>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	b1 f4       	brne	.+44     	; 0x15ec <lcd_print+0x78>

	{

		million=value/10000+48;
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	20 e1       	ldi	r18, 0x10	; 16
    15c6:	37 e2       	ldi	r19, 0x27	; 39
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    15ce:	9b 01       	movw	r18, r22
    15d0:	c9 01       	movw	r24, r18
    15d2:	c0 96       	adiw	r24, 0x30	; 48
    15d4:	90 93 6e 04 	sts	0x046E, r25
    15d8:	80 93 6d 04 	sts	0x046D, r24

		lcd_wr_char(million);
    15dc:	80 91 6d 04 	lds	r24, 0x046D
    15e0:	90 91 6e 04 	lds	r25, 0x046E
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==4 || flag==1)
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	9f 81       	ldd	r25, Y+7	; 0x07
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <lcd_print+0x88>
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f5       	brne	.+70     	; 0x1642 <lcd_print+0xce>

	{

		temp = value/1000;
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	28 ee       	ldi	r18, 0xE8	; 232
    1602:	33 e0       	ldi	r19, 0x03	; 3
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    160a:	9b 01       	movw	r18, r22
    160c:	c9 01       	movw	r24, r18
    160e:	90 93 8b 04 	sts	0x048B, r25
    1612:	80 93 8a 04 	sts	0x048A, r24

		thousand = temp%10 + 48;
    1616:	80 91 8a 04 	lds	r24, 0x048A
    161a:	90 91 8b 04 	lds	r25, 0x048B
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	b9 01       	movw	r22, r18
    1624:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    1628:	c0 96       	adiw	r24, 0x30	; 48
    162a:	90 93 db 04 	sts	0x04DB, r25
    162e:	80 93 da 04 	sts	0x04DA, r24

		lcd_wr_char(thousand);
    1632:	80 91 da 04 	lds	r24, 0x04DA
    1636:	90 91 db 04 	lds	r25, 0x04DB
    163a:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==3 || flag==1)
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	19 f0       	breq	.+6      	; 0x1652 <lcd_print+0xde>
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	19 f5       	brne	.+70     	; 0x1698 <lcd_print+0x124>

	{

		temp = value/100;
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	24 e6       	ldi	r18, 0x64	; 100
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	b9 01       	movw	r22, r18
    165c:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    1660:	9b 01       	movw	r18, r22
    1662:	c9 01       	movw	r24, r18
    1664:	90 93 8b 04 	sts	0x048B, r25
    1668:	80 93 8a 04 	sts	0x048A, r24

		hundred = temp%10 + 48;
    166c:	80 91 8a 04 	lds	r24, 0x048A
    1670:	90 91 8b 04 	lds	r25, 0x048B
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    167e:	c0 96       	adiw	r24, 0x30	; 48
    1680:	90 93 af 04 	sts	0x04AF, r25
    1684:	80 93 ae 04 	sts	0x04AE, r24

		lcd_wr_char(hundred);
    1688:	80 91 ae 04 	lds	r24, 0x04AE
    168c:	90 91 af 04 	lds	r25, 0x04AF
    1690:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==2 || flag==1)
    1698:	8e 81       	ldd	r24, Y+6	; 0x06
    169a:	9f 81       	ldd	r25, Y+7	; 0x07
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <lcd_print+0x134>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	19 f5       	brne	.+70     	; 0x16ee <lcd_print+0x17a>

	{

		temp = value/10;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    16b6:	9b 01       	movw	r18, r22
    16b8:	c9 01       	movw	r24, r18
    16ba:	90 93 8b 04 	sts	0x048B, r25
    16be:	80 93 8a 04 	sts	0x048A, r24

		tens = temp%10 + 48;
    16c2:	80 91 8a 04 	lds	r24, 0x048A
    16c6:	90 91 8b 04 	lds	r25, 0x048B
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	b9 01       	movw	r22, r18
    16d0:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    16d4:	c0 96       	adiw	r24, 0x30	; 48
    16d6:	90 93 a9 04 	sts	0x04A9, r25
    16da:	80 93 a8 04 	sts	0x04A8, r24

		lcd_wr_char(tens);
    16de:	80 91 a8 04 	lds	r24, 0x04A8
    16e2:	90 91 a9 04 	lds	r25, 0x04A9
    16e6:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

		flag=1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01

	}

	if(digits==1 || flag==1)
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	19 f0       	breq	.+6      	; 0x16fe <lcd_print+0x18a>
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 f4       	brne	.+36     	; 0x1722 <lcd_print+0x1ae>

	{

		unit = value%10 + 48;
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	0e 94 12 9e 	call	0x13c24	; 0x13c24 <__udivmodhi4>
    170c:	c0 96       	adiw	r24, 0x30	; 48
    170e:	90 93 d9 04 	sts	0x04D9, r25
    1712:	80 93 d8 04 	sts	0x04D8, r24

		lcd_wr_char(unit);
    1716:	80 91 d8 04 	lds	r24, 0x04D8
    171a:	90 91 d9 04 	lds	r25, 0x04D9
    171e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}

	if(digits>5)
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	86 30       	cpi	r24, 0x06	; 6
    1728:	91 05       	cpc	r25, r1
    172a:	1c f0       	brlt	.+6      	; 0x1732 <lcd_print+0x1be>

	{

		lcd_wr_char('E');
    172c:	85 e4       	ldi	r24, 0x45	; 69
    172e:	0e 94 c9 08 	call	0x1192	; 0x1192 <lcd_wr_char>

	}
    1732:	27 96       	adiw	r28, 0x07	; 7
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <motion_pin_config>:

*/

void motion_pin_config(void)

 {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62

    DDRA = DDRA | 0x0F;
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	21 e2       	ldi	r18, 0x21	; 33
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 60       	ori	r18, 0x0F	; 15
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18

    PORTA = PORTA & 0xF0;
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	22 e2       	ldi	r18, 0x22	; 34
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	20 7f       	andi	r18, 0xF0	; 240
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18

    DDRL = DDRL | 0x18; //Setting PL3 and PL4 pins as output for PWM generation
    1770:	8a e0       	ldi	r24, 0x0A	; 10
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 61       	ori	r18, 0x18	; 24
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18

    PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1782:	8b e0       	ldi	r24, 0x0B	; 11
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	2b e0       	ldi	r18, 0x0B	; 11
    1788:	31 e0       	ldi	r19, 0x01	; 1
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	28 61       	ori	r18, 0x18	; 24
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <left_encoder_pin_config>:

*/

void left_encoder_pin_config (void)

{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2d e2       	ldi	r18, 0x2D	; 45
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	2f 7e       	andi	r18, 0xEF	; 239
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18

	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17b4:	8e e2       	ldi	r24, 0x2E	; 46
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2e e2       	ldi	r18, 0x2E	; 46
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	20 61       	ori	r18, 0x10	; 16
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18

}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <right_encoder_pin_config>:

*/

void right_encoder_pin_config (void)

{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62

	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    17d4:	8d e2       	ldi	r24, 0x2D	; 45
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2d e2       	ldi	r18, 0x2D	; 45
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	2f 7d       	andi	r18, 0xDF	; 223
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18

	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    17e6:	8e e2       	ldi	r24, 0x2E	; 46
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	2e e2       	ldi	r18, 0x2E	; 46
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	20 62       	ori	r18, 0x20	; 32
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18

}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <velocity>:

*/

void velocity(unsigned char left_motor, unsigned char right_motor) 

{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f 92       	push	r0
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02

    OCR5AL = (unsigned char) left_motor;
    180e:	88 e2       	ldi	r24, 0x28	; 40
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18

    OCR5BL = (unsigned char) right_motor;
    1818:	8a e2       	ldi	r24, 0x2A	; 42
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	2a 81       	ldd	r18, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18

}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <left_position_encoder_interrupt_init>:

*/

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable

{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    1834:	f8 94       	cli

	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1836:	8a e6       	ldi	r24, 0x6A	; 106
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a e6       	ldi	r18, 0x6A	; 106
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	22 60       	ori	r18, 0x02	; 2
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1848:	8d e3       	ldi	r24, 0x3D	; 61
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2d e3       	ldi	r18, 0x3D	; 61
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	20 61       	ori	r18, 0x10	; 16
    1856:	fc 01       	movw	r30, r24
    1858:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    185a:	78 94       	sei

}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <right_position_encoder_interrupt_init>:

*/

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable

{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupt
    186a:	f8 94       	cli

	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    186c:	8a e6       	ldi	r24, 0x6A	; 106
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2a e6       	ldi	r18, 0x6A	; 106
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	f9 01       	movw	r30, r18
    1876:	20 81       	ld	r18, Z
    1878:	28 60       	ori	r18, 0x08	; 8
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18

	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2d e3       	ldi	r18, 0x3D	; 61
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	20 62       	ori	r18, 0x20	; 32
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18

	sei();   // Enables the global interrupt
    1890:	78 94       	sei

}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <__vector_6>:

*/

ISR(INT5_vect)

{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	ShaftCountRight++;  //increment right shaft position count
    18b2:	80 91 2e 03 	lds	r24, 0x032E
    18b6:	90 91 2f 03 	lds	r25, 0x032F
    18ba:	a0 91 30 03 	lds	r26, 0x0330
    18be:	b0 91 31 03 	lds	r27, 0x0331
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	80 93 2e 03 	sts	0x032E, r24
    18cc:	90 93 2f 03 	sts	0x032F, r25
    18d0:	a0 93 30 03 	sts	0x0330, r26
    18d4:	b0 93 31 03 	sts	0x0331, r27

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_5>:

*/

ISR(INT4_vect)

{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62

	ShaftCountLeft++;  //increment left shaft position count
    1908:	80 91 2a 03 	lds	r24, 0x032A
    190c:	90 91 2b 03 	lds	r25, 0x032B
    1910:	a0 91 2c 03 	lds	r26, 0x032C
    1914:	b0 91 2d 03 	lds	r27, 0x032D
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	80 93 2a 03 	sts	0x032A, r24
    1922:	90 93 2b 03 	sts	0x032B, r25
    1926:	a0 93 2c 03 	sts	0x032C, r26
    192a:	b0 93 2d 03 	sts	0x032D, r27

}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <motion_set>:

*/

void motion_set(unsigned char Direction)

 {
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	0f 92       	push	r0
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02

    unsigned char PortARestore = 0;
    1952:	19 82       	std	Y+1, r1	; 0x01



    Direction &= 0x0F; // removing upper nibble for protection
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 70       	andi	r24, 0x0F	; 15
    1958:	8a 83       	std	Y+2, r24	; 0x02

    PortARestore = PORTA; // reading PORTA's original status
    195a:	82 e2       	ldi	r24, 0x22	; 34
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	80 81       	ld	r24, Z
    1962:	89 83       	std	Y+1, r24	; 0x01

    PortARestore &= 0xF0; // making lower direction nibble to 0
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	80 7f       	andi	r24, 0xF0	; 240
    1968:	89 83       	std	Y+1, r24	; 0x01

    PortARestore |= Direction; // adding lower nibble for forward command and restoring PORTA's status
    196a:	99 81       	ldd	r25, Y+1	; 0x01
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	89 2b       	or	r24, r25
    1970:	89 83       	std	Y+1, r24	; 0x01

    PORTA = PortARestore; // executing the command
    1972:	82 e2       	ldi	r24, 0x22	; 34
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	29 81       	ldd	r18, Y+1	; 0x01
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18

}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <forward>:

*/

void forward(void)

 {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

    motion_set(0x06);
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <back>:

*/

void back (void)

{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x09);
    19a2:	89 e0       	ldi	r24, 0x09	; 9
    19a4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <left>:

*/

void left (void)

{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x05);
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <right>:

*/

void right (void)

{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x0A);
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <soft_left>:

*/

void soft_left (void)

{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x04);
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <soft_right>:

*/

void soft_right (void) 

{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x02);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <soft_left_2>:

*/

void soft_left_2 (void) 

{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x01);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <soft_right_2>:

*/

void soft_right_2 (void)

{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x08);
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <stop>:

*/

void stop(void)

{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62

	motion_set(0x00);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 a2 0c 	call	0x1944	; 0x1944 <motion_set>

}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <angle_rotate>:

*/

void angle_rotate(unsigned int Degrees)

{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2a 97       	sbiw	r28, 0x0a	; 10
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	9a 87       	std	Y+10, r25	; 0x0a
    1a50:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	ab 83       	std	Y+3, r26	; 0x03
    1a5e:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1a60:	1d 82       	std	Y+5, r1	; 0x05
    1a62:	1e 82       	std	Y+6, r1	; 0x06
    1a64:	1f 82       	std	Y+7, r1	; 0x07
    1a66:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	cc 01       	movw	r24, r24
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 f9 9c 	call	0x139f2	; 0x139f2 <__floatunsisf>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	28 e4       	ldi	r18, 0x48	; 72
    1a84:	31 ee       	ldi	r19, 0xE1	; 225
    1a86:	42 e8       	ldi	r20, 0x82	; 130
    1a88:	50 e4       	ldi	r21, 0x40	; 64
    1a8a:	0e 94 65 9c 	call	0x138ca	; 0x138ca <__divsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	ab 83       	std	Y+3, r26	; 0x03
    1a98:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	cc 01       	movw	r24, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	af 83       	std	Y+7, r26	; 0x07
    1ab6:	b8 87       	std	Y+8, r27	; 0x08

	ShaftCountRight = 0;
    1ab8:	10 92 2e 03 	sts	0x032E, r1
    1abc:	10 92 2f 03 	sts	0x032F, r1
    1ac0:	10 92 30 03 	sts	0x0330, r1
    1ac4:	10 92 31 03 	sts	0x0331, r1

	ShaftCountLeft = 0;
    1ac8:	10 92 2a 03 	sts	0x032A, r1
    1acc:	10 92 2b 03 	sts	0x032B, r1
    1ad0:	10 92 2c 03 	sts	0x032C, r1
    1ad4:	10 92 2d 03 	sts	0x032D, r1
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <angle_rotate+0xa2>

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))

		break;

	}
    1ada:	00 00       	nop

	while (1)

	{

		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1adc:	20 91 2e 03 	lds	r18, 0x032E
    1ae0:	30 91 2f 03 	lds	r19, 0x032F
    1ae4:	40 91 30 03 	lds	r20, 0x0330
    1ae8:	50 91 31 03 	lds	r21, 0x0331
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	af 81       	ldd	r26, Y+7	; 0x07
    1af4:	b8 85       	ldd	r27, Y+8	; 0x08
    1af6:	28 17       	cp	r18, r24
    1af8:	39 07       	cpc	r19, r25
    1afa:	4a 07       	cpc	r20, r26
    1afc:	5b 07       	cpc	r21, r27
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <angle_rotate+0xc8>
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	20 91 2a 03 	lds	r18, 0x032A
    1b06:	30 91 2b 03 	lds	r19, 0x032B
    1b0a:	40 91 2c 03 	lds	r20, 0x032C
    1b0e:	50 91 2d 03 	lds	r21, 0x032D
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	af 81       	ldd	r26, Y+7	; 0x07
    1b1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <angle_rotate+0xee>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	87 2f       	mov	r24, r23
    1b2a:	86 2b       	or	r24, r22
    1b2c:	88 23       	and	r24, r24
    1b2e:	a9 f2       	breq	.-86     	; 0x1ada <angle_rotate+0xa0>

		break;
    1b30:	00 00       	nop

	}

	stop(); //Stop robot
    1b32:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1b36:	2a 96       	adiw	r28, 0x0a	; 10
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <linear_distance_mm>:

*/

void linear_distance_mm(unsigned int DistanceInMM)

{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09

	float ReqdShaftCount = 0;
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	dc 01       	movw	r26, r24
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	ab 83       	std	Y+3, r26	; 0x03
    1b6c:	bc 83       	std	Y+4, r27	; 0x04

	unsigned long int ReqdShaftCountInt = 0;
    1b6e:	1d 82       	std	Y+5, r1	; 0x05
    1b70:	1e 82       	std	Y+6, r1	; 0x06
    1b72:	1f 82       	std	Y+7, r1	; 0x07
    1b74:	18 86       	std	Y+8, r1	; 0x08



	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	cc 01       	movw	r24, r24
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 f9 9c 	call	0x139f2	; 0x139f2 <__floatunsisf>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	25 ee       	ldi	r18, 0xE5	; 229
    1b92:	30 ed       	ldi	r19, 0xD0	; 208
    1b94:	4a ea       	ldi	r20, 0xAA	; 170
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 65 9c 	call	0x138ca	; 0x138ca <__divsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	ab 83       	std	Y+3, r26	; 0x03
    1ba6:	bc 83       	std	Y+4, r27	; 0x04

	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08

	

	ShaftCountRight = 0;
    1bc0:	10 92 2e 03 	sts	0x032E, r1
    1bc4:	10 92 2f 03 	sts	0x032F, r1
    1bc8:	10 92 30 03 	sts	0x0330, r1
    1bcc:	10 92 31 03 	sts	0x0331, r1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <linear_distance_mm+0x8c>

			break;

		}

	}
    1bd2:	00 00       	nop

	while(1)

	{

		if(ShaftCountRight > ReqdShaftCountInt)
    1bd4:	20 91 2e 03 	lds	r18, 0x032E
    1bd8:	30 91 2f 03 	lds	r19, 0x032F
    1bdc:	40 91 30 03 	lds	r20, 0x0330
    1be0:	50 91 31 03 	lds	r21, 0x0331
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	af 81       	ldd	r26, Y+7	; 0x07
    1bea:	b8 85       	ldd	r27, Y+8	; 0x08
    1bec:	82 17       	cp	r24, r18
    1bee:	93 07       	cpc	r25, r19
    1bf0:	a4 07       	cpc	r26, r20
    1bf2:	b5 07       	cpc	r27, r21
    1bf4:	70 f7       	brcc	.-36     	; 0x1bd2 <linear_distance_mm+0x8a>

		{

			break;
    1bf6:	00 00       	nop

		}

	}

	stop(); //Stop robot
    1bf8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>

}
    1bfc:	2a 96       	adiw	r28, 0x0a	; 10
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <forward_mm>:

*/

void forward_mm(unsigned int DistanceInMM)

{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	0f 92       	push	r0
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01

	forward();
    1c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

	linear_distance_mm(DistanceInMM);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <back_mm>:

*/

void back_mm(unsigned int DistanceInMM)

{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	0f 92       	push	r0
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01

	back();
    1c44:	0e 94 cd 0c 	call	0x199a	; 0x199a <back>

	linear_distance_mm(DistanceInMM);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <linear_distance_mm>

}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <left_degrees>:

*/

void left_degrees(unsigned int Degrees)

{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	0f 92       	push	r0
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	left(); //Turn left
    1c6a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>

	angle_rotate(Degrees);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <right_degrees>:

*/

void right_degrees(unsigned int Degrees)

{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	0f 92       	push	r0
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01

	// 88 pulses for 360 degrees rotation 4.090 degrees per count

	right(); //Turn right
    1c90:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>

	angle_rotate(Degrees);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	08 95       	ret

00001ca6 <soft_left_degrees>:

*/

void soft_left_degrees(unsigned int Degrees)

{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	0f 92       	push	r0
    1cac:	0f 92       	push	r0
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left(); //Turn soft left
    1cb6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>

	Degrees=Degrees*2;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <soft_right_degrees>:

*/

void soft_right_degrees(unsigned int Degrees)

{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	0f 92       	push	r0
    1cde:	0f 92       	push	r0
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right();  //Turn soft right
    1ce8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>

	Degrees=Degrees*2;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <soft_left_2_degrees>:

*/

void soft_left_2_degrees(unsigned int Degrees)

{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	0f 92       	push	r0
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_left_2(); //Turn reverse soft left
    1d1a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>

	Degrees=Degrees*2;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <soft_right_2_degrees>:

*/

void soft_right_2_degrees(unsigned int Degrees)

{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	0f 92       	push	r0
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01

	// 176 pulses for 360 degrees rotation 2.045 degrees per count

	soft_right_2();  //Turn reverse soft right
    1d4c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>

	Degrees=Degrees*2;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	angle_rotate(Degrees);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <angle_rotate>

}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <correct_right>:


*/

void correct_right()
{   
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6c 97       	sbiw	r28, 0x1c	; 28
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
	stop();
    1d86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d90:	b1 e4       	ldi	r27, 0x41	; 65
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	26 e6       	ldi	r18, 0x66	; 102
    1da4:	36 e6       	ldi	r19, 0x66	; 102
    1da6:	46 e6       	ldi	r20, 0x66	; 102
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	af 83       	std	Y+7, r26	; 0x07
    1db8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1dba:	11 e0       	ldi	r17, 0x01	; 1
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <correct_right+0x68>
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	11 23       	and	r17, r17
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <correct_right+0x76>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9a 87       	std	Y+10, r25	; 0x0a
    1de0:	89 87       	std	Y+9, r24	; 0x09
    1de2:	46 c0       	rjmp	.+140    	; 0x1e70 <correct_right+0x102>
	else if (__tmp > 65535)
    1de4:	11 e0       	ldi	r17, 0x01	; 1
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <correct_right+0x92>
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	11 23       	and	r17, r17
    1e02:	61 f1       	breq	.+88     	; 0x1e5c <correct_right+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	69 81       	ldd	r22, Y+1	; 0x01
    1e06:	7a 81       	ldd	r23, Y+2	; 0x02
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9a 87       	std	Y+10, r25	; 0x0a
    1e2a:	89 87       	std	Y+9, r24	; 0x09
    1e2c:	12 c0       	rjmp	.+36     	; 0x1e52 <correct_right+0xe4>
    1e2e:	80 e7       	ldi	r24, 0x70	; 112
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	9c 87       	std	Y+12, r25	; 0x0c
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <correct_right+0xd0>
    1e42:	8c 01       	movw	r16, r24
    1e44:	1c 87       	std	Y+12, r17	; 0x0c
    1e46:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a 87       	std	Y+10, r25	; 0x0a
    1e50:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	51 f7       	brne	.-44     	; 0x1e2e <correct_right+0xc0>
    1e5a:	17 c0       	rjmp	.+46     	; 0x1e8a <correct_right+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a 87       	std	Y+10, r25	; 0x0a
    1e6e:	89 87       	std	Y+9, r24	; 0x09
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	9e 87       	std	Y+14, r25	; 0x0e
    1e76:	8d 87       	std	Y+13, r24	; 0x0d
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	c8 01       	movw	r24, r16
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <correct_right+0x112>
    1e84:	8c 01       	movw	r16, r24
    1e86:	1e 87       	std	Y+14, r17	; 0x0e
    1e88:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_degrees(35);
    1e8a:	83 e2       	ldi	r24, 0x23	; 35
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <soft_right_degrees>
	soft_right();
    1e92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <soft_right>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <correct_right+0x12c>
		{   
			stop();
			_delay_ms(50);
			break;
		}
	}
    1e98:	00 00       	nop
	_delay_ms(20);
	soft_right_degrees(35);
	soft_right();
	while(1)
	{
		read_line();    
    1e9a:	87 e9       	ldi	r24, 0x97	; 151
    1e9c:	9c e2       	ldi	r25, 0x2C	; 44
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	19 95       	eicall
		if((Center_white_line > 14 && Left_white_line > 14)||(Center_white_line>70))
    1ea2:	80 91 33 03 	lds	r24, 0x0333
    1ea6:	8f 30       	cpi	r24, 0x0F	; 15
    1ea8:	20 f0       	brcs	.+8      	; 0x1eb2 <correct_right+0x144>
    1eaa:	80 91 32 03 	lds	r24, 0x0332
    1eae:	8f 30       	cpi	r24, 0x0F	; 15
    1eb0:	20 f4       	brcc	.+8      	; 0x1eba <correct_right+0x14c>
    1eb2:	80 91 33 03 	lds	r24, 0x0333
    1eb6:	87 34       	cpi	r24, 0x47	; 71
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <correct_right+0x12a>
		{   
			stop();
    1eba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a8 e4       	ldi	r26, 0x48	; 72
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	a9 8b       	std	Y+17, r26	; 0x11
    1ecc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ed0:	78 89       	ldd	r23, Y+16	; 0x10
    1ed2:	89 89       	ldd	r24, Y+17	; 0x11
    1ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed6:	26 e6       	ldi	r18, 0x66	; 102
    1ed8:	36 e6       	ldi	r19, 0x66	; 102
    1eda:	46 e6       	ldi	r20, 0x66	; 102
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	ad 8b       	std	Y+21, r26	; 0x15
    1eec:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1eee:	11 e0       	ldi	r17, 0x01	; 1
    1ef0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ef2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ef4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ef6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <correct_right+0x19c>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	11 23       	and	r17, r17
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <correct_right+0x1aa>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 8f       	std	Y+24, r25	; 0x18
    1f14:	8f 8b       	std	Y+23, r24	; 0x17
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <correct_right+0x236>
	else if (__tmp > 65535)
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	6b 89       	ldd	r22, Y+19	; 0x13
    1f1c:	7c 89       	ldd	r23, Y+20	; 0x14
    1f1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <correct_right+0x1c6>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	11 23       	and	r17, r17
    1f36:	61 f1       	breq	.+88     	; 0x1f90 <correct_right+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f3a:	78 89       	ldd	r23, Y+16	; 0x10
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 8f       	std	Y+24, r25	; 0x18
    1f5e:	8f 8b       	std	Y+23, r24	; 0x17
    1f60:	12 c0       	rjmp	.+36     	; 0x1f86 <correct_right+0x218>
    1f62:	80 e7       	ldi	r24, 0x70	; 112
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9a 8f       	std	Y+26, r25	; 0x1a
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f6e:	8c 01       	movw	r16, r24
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <correct_right+0x204>
    1f76:	8c 01       	movw	r16, r24
    1f78:	1a 8f       	std	Y+26, r17	; 0x1a
    1f7a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	98 8f       	std	Y+24, r25	; 0x18
    1f84:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	51 f7       	brne	.-44     	; 0x1f62 <correct_right+0x1f4>
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <correct_right+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6b 89       	ldd	r22, Y+19	; 0x13
    1f92:	7c 89       	ldd	r23, Y+20	; 0x14
    1f94:	8d 89       	ldd	r24, Y+21	; 0x15
    1f96:	9e 89       	ldd	r25, Y+22	; 0x16
    1f98:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	98 8f       	std	Y+24, r25	; 0x18
    1fa2:	8f 8b       	std	Y+23, r24	; 0x17
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <correct_right+0x246>
    1fb8:	8c 01       	movw	r16, r24
    1fba:	1c 8f       	std	Y+28, r17	; 0x1c
    1fbc:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <correct_right+0x254>
    1fc0:	00 00       	nop
		}
	}
}
    1fc2:	6c 96       	adiw	r28, 0x1c	; 28
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <correct_right2>:
* Logic:			Keep rotating left till center sensor see line
					Rotate by moving left wheel forward and right wheel in the backward direction
* Example Call:		correct_right2();
*/
void correct_right2()
{   
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6c 97       	sbiw	r28, 0x1c	; 28
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
	stop();
    1ff0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2004:	69 81       	ldd	r22, Y+1	; 0x01
    2006:	7a 81       	ldd	r23, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	26 e6       	ldi	r18, 0x66	; 102
    200e:	36 e6       	ldi	r19, 0x66	; 102
    2010:	46 e6       	ldi	r20, 0x66	; 102
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	af 83       	std	Y+7, r26	; 0x07
    2022:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2024:	11 e0       	ldi	r17, 0x01	; 1
    2026:	6d 81       	ldd	r22, Y+5	; 0x05
    2028:	7e 81       	ldd	r23, Y+6	; 0x06
    202a:	8f 81       	ldd	r24, Y+7	; 0x07
    202c:	98 85       	ldd	r25, Y+8	; 0x08
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    203a:	88 23       	and	r24, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <correct_right2+0x68>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	11 23       	and	r17, r17
    2042:	29 f0       	breq	.+10     	; 0x204e <correct_right2+0x76>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9a 87       	std	Y+10, r25	; 0x0a
    204a:	89 87       	std	Y+9, r24	; 0x09
    204c:	46 c0       	rjmp	.+140    	; 0x20da <correct_right2+0x102>
	else if (__tmp > 65535)
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	6d 81       	ldd	r22, Y+5	; 0x05
    2052:	7e 81       	ldd	r23, Y+6	; 0x06
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <correct_right2+0x92>
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	11 23       	and	r17, r17
    206c:	61 f1       	breq	.+88     	; 0x20c6 <correct_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	69 81       	ldd	r22, Y+1	; 0x01
    2070:	7a 81       	ldd	r23, Y+2	; 0x02
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a 87       	std	Y+10, r25	; 0x0a
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <correct_right2+0xe4>
    2098:	80 e7       	ldi	r24, 0x70	; 112
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a4:	8c 01       	movw	r16, r24
    20a6:	c8 01       	movw	r24, r16
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <correct_right2+0xd0>
    20ac:	8c 01       	movw	r16, r24
    20ae:	1c 87       	std	Y+12, r17	; 0x0c
    20b0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9a 87       	std	Y+10, r25	; 0x0a
    20ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	51 f7       	brne	.-44     	; 0x2098 <correct_right2+0xc0>
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <correct_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6d 81       	ldd	r22, Y+5	; 0x05
    20c8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9a 87       	std	Y+10, r25	; 0x0a
    20d8:	89 87       	std	Y+9, r24	; 0x09
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	9e 87       	std	Y+14, r25	; 0x0e
    20e0:	8d 87       	std	Y+13, r24	; 0x0d
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	8c 01       	movw	r16, r24
    20e8:	c8 01       	movw	r24, r16
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <correct_right2+0x112>
    20ee:	8c 01       	movw	r16, r24
    20f0:	1e 87       	std	Y+14, r17	; 0x0e
    20f2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	right_degrees(35);
    20f4:	83 e2       	ldi	r24, 0x23	; 35
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    20fc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <correct_right2+0x12c>
		{
			stop();
			_delay_ms(50);
			break;
		}
	}
    2102:	00 00       	nop
	_delay_ms(50);
	right_degrees(35);
	right();
	while(1)
	{
		read_line();
    2104:	87 e9       	ldi	r24, 0x97	; 151
    2106:	9c e2       	ldi	r25, 0x2C	; 44
    2108:	fc 01       	movw	r30, r24
    210a:	19 95       	eicall
		if(Center_white_line > 25)
    210c:	80 91 33 03 	lds	r24, 0x0333
    2110:	8a 31       	cpi	r24, 0x1A	; 26
    2112:	b8 f3       	brcs	.-18     	; 0x2102 <correct_right2+0x12a>
		{
			stop();
    2114:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a8 e4       	ldi	r26, 0x48	; 72
    211e:	b2 e4       	ldi	r27, 0x42	; 66
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	a9 8b       	std	Y+17, r26	; 0x11
    2126:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6f 85       	ldd	r22, Y+15	; 0x0f
    212a:	78 89       	ldd	r23, Y+16	; 0x10
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	26 e6       	ldi	r18, 0x66	; 102
    2132:	36 e6       	ldi	r19, 0x66	; 102
    2134:	46 e6       	ldi	r20, 0x66	; 102
    2136:	55 e4       	ldi	r21, 0x45	; 69
    2138:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	ad 8b       	std	Y+21, r26	; 0x15
    2146:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2148:	11 e0       	ldi	r17, 0x01	; 1
    214a:	6b 89       	ldd	r22, Y+19	; 0x13
    214c:	7c 89       	ldd	r23, Y+20	; 0x14
    214e:	8d 89       	ldd	r24, Y+21	; 0x15
    2150:	9e 89       	ldd	r25, Y+22	; 0x16
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <correct_right2+0x18c>
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	11 23       	and	r17, r17
    2166:	29 f0       	breq	.+10     	; 0x2172 <correct_right2+0x19a>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 8f       	std	Y+24, r25	; 0x18
    216e:	8f 8b       	std	Y+23, r24	; 0x17
    2170:	46 c0       	rjmp	.+140    	; 0x21fe <correct_right2+0x226>
	else if (__tmp > 65535)
    2172:	11 e0       	ldi	r17, 0x01	; 1
    2174:	6b 89       	ldd	r22, Y+19	; 0x13
    2176:	7c 89       	ldd	r23, Y+20	; 0x14
    2178:	8d 89       	ldd	r24, Y+21	; 0x15
    217a:	9e 89       	ldd	r25, Y+22	; 0x16
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <correct_right2+0x1b6>
    218c:	10 e0       	ldi	r17, 0x00	; 0
    218e:	11 23       	and	r17, r17
    2190:	61 f1       	breq	.+88     	; 0x21ea <correct_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6f 85       	ldd	r22, Y+15	; 0x0f
    2194:	78 89       	ldd	r23, Y+16	; 0x10
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	98 8f       	std	Y+24, r25	; 0x18
    21b8:	8f 8b       	std	Y+23, r24	; 0x17
    21ba:	12 c0       	rjmp	.+36     	; 0x21e0 <correct_right2+0x208>
    21bc:	80 e7       	ldi	r24, 0x70	; 112
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	89 8f       	std	Y+25, r24	; 0x19
    21c4:	89 8d       	ldd	r24, Y+25	; 0x19
    21c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21c8:	8c 01       	movw	r16, r24
    21ca:	c8 01       	movw	r24, r16
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <correct_right2+0x1f4>
    21d0:	8c 01       	movw	r16, r24
    21d2:	1a 8f       	std	Y+26, r17	; 0x1a
    21d4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 8f       	std	Y+24, r25	; 0x18
    21de:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	51 f7       	brne	.-44     	; 0x21bc <correct_right2+0x1e4>
    21e8:	18 c0       	rjmp	.+48     	; 0x221a <__stack+0x1b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6b 89       	ldd	r22, Y+19	; 0x13
    21ec:	7c 89       	ldd	r23, Y+20	; 0x14
    21ee:	8d 89       	ldd	r24, Y+21	; 0x15
    21f0:	9e 89       	ldd	r25, Y+22	; 0x16
    21f2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 8f       	std	Y+24, r25	; 0x18
    21fc:	8f 8b       	std	Y+23, r24	; 0x17
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	9c 8f       	std	Y+28, r25	; 0x1c
    2204:	8b 8f       	std	Y+27, r24	; 0x1b
    2206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220a:	8c 01       	movw	r16, r24
    220c:	c8 01       	movw	r24, r16
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <__stack+0xf>
    2212:	8c 01       	movw	r16, r24
    2214:	1c 8f       	std	Y+28, r17	; 0x1c
    2216:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	00 00       	nop
		}
	}
}
    221c:	6c 96       	adiw	r28, 0x1c	; 28
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <correct_left>:
* Logic:			Keep rotating left till center sensor sees line
* Example Call:		correct_left();
*/

void correct_left()
{   
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	6c 97       	sbiw	r28, 0x1c	; 28
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
	stop();
    224a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ea       	ldi	r26, 0xA0	; 160
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	ab 83       	std	Y+3, r26	; 0x03
    225c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    225e:	69 81       	ldd	r22, Y+1	; 0x01
    2260:	7a 81       	ldd	r23, Y+2	; 0x02
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	26 e6       	ldi	r18, 0x66	; 102
    2268:	36 e6       	ldi	r19, 0x66	; 102
    226a:	46 e6       	ldi	r20, 0x66	; 102
    226c:	55 e4       	ldi	r21, 0x45	; 69
    226e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	af 83       	std	Y+7, r26	; 0x07
    227c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    227e:	11 e0       	ldi	r17, 0x01	; 1
    2280:	6d 81       	ldd	r22, Y+5	; 0x05
    2282:	7e 81       	ldd	r23, Y+6	; 0x06
    2284:	8f 81       	ldd	r24, Y+7	; 0x07
    2286:	98 85       	ldd	r25, Y+8	; 0x08
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2294:	88 23       	and	r24, r24
    2296:	0c f0       	brlt	.+2      	; 0x229a <correct_left+0x68>
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	11 23       	and	r17, r17
    229c:	29 f0       	breq	.+10     	; 0x22a8 <correct_left+0x76>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a 87       	std	Y+10, r25	; 0x0a
    22a4:	89 87       	std	Y+9, r24	; 0x09
    22a6:	46 c0       	rjmp	.+140    	; 0x2334 <correct_left+0x102>
	else if (__tmp > 65535)
    22a8:	11 e0       	ldi	r17, 0x01	; 1
    22aa:	6d 81       	ldd	r22, Y+5	; 0x05
    22ac:	7e 81       	ldd	r23, Y+6	; 0x06
    22ae:	8f 81       	ldd	r24, Y+7	; 0x07
    22b0:	98 85       	ldd	r25, Y+8	; 0x08
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    22be:	18 16       	cp	r1, r24
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <correct_left+0x92>
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	11 23       	and	r17, r17
    22c6:	61 f1       	breq	.+88     	; 0x2320 <correct_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9a 87       	std	Y+10, r25	; 0x0a
    22ee:	89 87       	std	Y+9, r24	; 0x09
    22f0:	12 c0       	rjmp	.+36     	; 0x2316 <correct_left+0xe4>
    22f2:	80 e7       	ldi	r24, 0x70	; 112
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fe:	8c 01       	movw	r16, r24
    2300:	c8 01       	movw	r24, r16
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <correct_left+0xd0>
    2306:	8c 01       	movw	r16, r24
    2308:	1c 87       	std	Y+12, r17	; 0x0c
    230a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9a 87       	std	Y+10, r25	; 0x0a
    2314:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	51 f7       	brne	.-44     	; 0x22f2 <correct_left+0xc0>
    231e:	17 c0       	rjmp	.+46     	; 0x234e <correct_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 81       	ldd	r22, Y+5	; 0x05
    2322:	7e 81       	ldd	r23, Y+6	; 0x06
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
    2326:	98 85       	ldd	r25, Y+8	; 0x08
    2328:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9a 87       	std	Y+10, r25	; 0x0a
    2332:	89 87       	std	Y+9, r24	; 0x09
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	8d 87       	std	Y+13, r24	; 0x0d
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	8c 01       	movw	r16, r24
    2342:	c8 01       	movw	r24, r16
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <correct_left+0x112>
    2348:	8c 01       	movw	r16, r24
    234a:	1e 87       	std	Y+14, r17	; 0x0e
    234c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_degrees(35);
    234e:	83 e2       	ldi	r24, 0x23	; 35
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <soft_left_degrees>
	soft_left();
    2356:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <soft_left>
    235a:	01 c0       	rjmp	.+2      	; 0x235e <correct_left+0x12c>
		{
			stop();
			_delay_ms(50);
			break;
		}
	}
    235c:	00 00       	nop
	_delay_ms(20);
	soft_left_degrees(35);
	soft_left();
	while(1)
	{
		read_line();
    235e:	87 e9       	ldi	r24, 0x97	; 151
    2360:	9c e2       	ldi	r25, 0x2C	; 44
    2362:	fc 01       	movw	r30, r24
    2364:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 80))
    2366:	80 91 33 03 	lds	r24, 0x0333
    236a:	8f 30       	cpi	r24, 0x0F	; 15
    236c:	20 f0       	brcs	.+8      	; 0x2376 <correct_left+0x144>
    236e:	80 91 34 03 	lds	r24, 0x0334
    2372:	8f 30       	cpi	r24, 0x0F	; 15
    2374:	20 f4       	brcc	.+8      	; 0x237e <correct_left+0x14c>
    2376:	80 91 33 03 	lds	r24, 0x0333
    237a:	81 35       	cpi	r24, 0x51	; 81
    237c:	78 f3       	brcs	.-34     	; 0x235c <correct_left+0x12a>
		{
			stop();
    237e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 e4       	ldi	r26, 0x48	; 72
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	a9 8b       	std	Y+17, r26	; 0x11
    2390:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6f 85       	ldd	r22, Y+15	; 0x0f
    2394:	78 89       	ldd	r23, Y+16	; 0x10
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	26 e6       	ldi	r18, 0x66	; 102
    239c:	36 e6       	ldi	r19, 0x66	; 102
    239e:	46 e6       	ldi	r20, 0x66	; 102
    23a0:	55 e4       	ldi	r21, 0x45	; 69
    23a2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	ad 8b       	std	Y+21, r26	; 0x15
    23b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23b2:	11 e0       	ldi	r17, 0x01	; 1
    23b4:	6b 89       	ldd	r22, Y+19	; 0x13
    23b6:	7c 89       	ldd	r23, Y+20	; 0x14
    23b8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ba:	9e 89       	ldd	r25, Y+22	; 0x16
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	0c f0       	brlt	.+2      	; 0x23ce <correct_left+0x19c>
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	11 23       	and	r17, r17
    23d0:	29 f0       	breq	.+10     	; 0x23dc <correct_left+0x1aa>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	98 8f       	std	Y+24, r25	; 0x18
    23d8:	8f 8b       	std	Y+23, r24	; 0x17
    23da:	46 c0       	rjmp	.+140    	; 0x2468 <correct_left+0x236>
	else if (__tmp > 65535)
    23dc:	11 e0       	ldi	r17, 0x01	; 1
    23de:	6b 89       	ldd	r22, Y+19	; 0x13
    23e0:	7c 89       	ldd	r23, Y+20	; 0x14
    23e2:	8d 89       	ldd	r24, Y+21	; 0x15
    23e4:	9e 89       	ldd	r25, Y+22	; 0x16
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <correct_left+0x1c6>
    23f6:	10 e0       	ldi	r17, 0x00	; 0
    23f8:	11 23       	and	r17, r17
    23fa:	61 f1       	breq	.+88     	; 0x2454 <correct_left+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    23fe:	78 89       	ldd	r23, Y+16	; 0x10
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 8f       	std	Y+24, r25	; 0x18
    2422:	8f 8b       	std	Y+23, r24	; 0x17
    2424:	12 c0       	rjmp	.+36     	; 0x244a <correct_left+0x218>
    2426:	80 e7       	ldi	r24, 0x70	; 112
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	9a 8f       	std	Y+26, r25	; 0x1a
    242c:	89 8f       	std	Y+25, r24	; 0x19
    242e:	89 8d       	ldd	r24, Y+25	; 0x19
    2430:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2432:	8c 01       	movw	r16, r24
    2434:	c8 01       	movw	r24, r16
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <correct_left+0x204>
    243a:	8c 01       	movw	r16, r24
    243c:	1a 8f       	std	Y+26, r17	; 0x1a
    243e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	98 8f       	std	Y+24, r25	; 0x18
    2448:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	51 f7       	brne	.-44     	; 0x2426 <correct_left+0x1f4>
    2452:	18 c0       	rjmp	.+48     	; 0x2484 <correct_left+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	6b 89       	ldd	r22, Y+19	; 0x13
    2456:	7c 89       	ldd	r23, Y+20	; 0x14
    2458:	8d 89       	ldd	r24, Y+21	; 0x15
    245a:	9e 89       	ldd	r25, Y+22	; 0x16
    245c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	98 8f       	std	Y+24, r25	; 0x18
    2466:	8f 8b       	std	Y+23, r24	; 0x17
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	9c 8f       	std	Y+28, r25	; 0x1c
    246e:	8b 8f       	std	Y+27, r24	; 0x1b
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	8c 01       	movw	r16, r24
    2476:	c8 01       	movw	r24, r16
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <correct_left+0x246>
    247c:	8c 01       	movw	r16, r24
    247e:	1c 8f       	std	Y+28, r17	; 0x1c
    2480:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <correct_left+0x254>
    2484:	00 00       	nop
		}
	}
}
    2486:	6c 96       	adiw	r28, 0x1c	; 28
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <spl_left>:

void spl_left()
{
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	aa 97       	sbiw	r28, 0x2a	; 42
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
	stop();
    24b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 ea       	ldi	r26, 0xA0	; 160
    24be:	b1 e4       	ldi	r27, 0x41	; 65
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	69 81       	ldd	r22, Y+1	; 0x01
    24ca:	7a 81       	ldd	r23, Y+2	; 0x02
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	26 e6       	ldi	r18, 0x66	; 102
    24d2:	36 e6       	ldi	r19, 0x66	; 102
    24d4:	46 e6       	ldi	r20, 0x66	; 102
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	af 83       	std	Y+7, r26	; 0x07
    24e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24e8:	11 e0       	ldi	r17, 0x01	; 1
    24ea:	6d 81       	ldd	r22, Y+5	; 0x05
    24ec:	7e 81       	ldd	r23, Y+6	; 0x06
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	98 85       	ldd	r25, Y+8	; 0x08
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    24fe:	88 23       	and	r24, r24
    2500:	0c f0       	brlt	.+2      	; 0x2504 <spl_left+0x68>
    2502:	10 e0       	ldi	r17, 0x00	; 0
    2504:	11 23       	and	r17, r17
    2506:	29 f0       	breq	.+10     	; 0x2512 <spl_left+0x76>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9a 87       	std	Y+10, r25	; 0x0a
    250e:	89 87       	std	Y+9, r24	; 0x09
    2510:	46 c0       	rjmp	.+140    	; 0x259e <spl_left+0x102>
	else if (__tmp > 65535)
    2512:	11 e0       	ldi	r17, 0x01	; 1
    2514:	6d 81       	ldd	r22, Y+5	; 0x05
    2516:	7e 81       	ldd	r23, Y+6	; 0x06
    2518:	8f 81       	ldd	r24, Y+7	; 0x07
    251a:	98 85       	ldd	r25, Y+8	; 0x08
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2528:	18 16       	cp	r1, r24
    252a:	0c f0       	brlt	.+2      	; 0x252e <spl_left+0x92>
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	11 23       	and	r17, r17
    2530:	61 f1       	breq	.+88     	; 0x258a <spl_left+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	69 81       	ldd	r22, Y+1	; 0x01
    2534:	7a 81       	ldd	r23, Y+2	; 0x02
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9a 87       	std	Y+10, r25	; 0x0a
    2558:	89 87       	std	Y+9, r24	; 0x09
    255a:	12 c0       	rjmp	.+36     	; 0x2580 <spl_left+0xe4>
    255c:	80 e7       	ldi	r24, 0x70	; 112
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c 87       	std	Y+12, r25	; 0x0c
    2562:	8b 87       	std	Y+11, r24	; 0x0b
    2564:	8b 85       	ldd	r24, Y+11	; 0x0b
    2566:	9c 85       	ldd	r25, Y+12	; 0x0c
    2568:	8c 01       	movw	r16, r24
    256a:	c8 01       	movw	r24, r16
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <spl_left+0xd0>
    2570:	8c 01       	movw	r16, r24
    2572:	1c 87       	std	Y+12, r17	; 0x0c
    2574:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9a 87       	std	Y+10, r25	; 0x0a
    257e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	51 f7       	brne	.-44     	; 0x255c <spl_left+0xc0>
    2588:	17 c0       	rjmp	.+46     	; 0x25b8 <spl_left+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6d 81       	ldd	r22, Y+5	; 0x05
    258c:	7e 81       	ldd	r23, Y+6	; 0x06
    258e:	8f 81       	ldd	r24, Y+7	; 0x07
    2590:	98 85       	ldd	r25, Y+8	; 0x08
    2592:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a 87       	std	Y+10, r25	; 0x0a
    259c:	89 87       	std	Y+9, r24	; 0x09
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	9e 87       	std	Y+14, r25	; 0x0e
    25a4:	8d 87       	std	Y+13, r24	; 0x0d
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	8c 01       	movw	r16, r24
    25ac:	c8 01       	movw	r24, r16
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <spl_left+0x112>
    25b2:	8c 01       	movw	r16, r24
    25b4:	1e 87       	std	Y+14, r17	; 0x0e
    25b6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(35);
    25b8:	83 e2       	ldi	r24, 0x23	; 35
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    25c0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <spl_left+0x12c>
		{
		stop();
		_delay_ms(20);
		break;	
		}
	}
    25c6:	00 00       	nop
	_delay_ms(20);
	left_degrees(35);
	left();
	while(1)
	{
		read_line();
    25c8:	87 e9       	ldi	r24, 0x97	; 151
    25ca:	9c e2       	ldi	r25, 0x2C	; 44
    25cc:	fc 01       	movw	r30, r24
    25ce:	19 95       	eicall
		if(Center_white_line>=25)
    25d0:	80 91 33 03 	lds	r24, 0x0333
    25d4:	89 31       	cpi	r24, 0x19	; 25
    25d6:	b8 f3       	brcs	.-18     	; 0x25c6 <spl_left+0x12a>
		{
		stop();
    25d8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 ea       	ldi	r26, 0xA0	; 160
    25e2:	b1 e4       	ldi	r27, 0x41	; 65
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
    25e6:	98 8b       	std	Y+16, r25	; 0x10
    25e8:	a9 8b       	std	Y+17, r26	; 0x11
    25ea:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    25ee:	78 89       	ldd	r23, Y+16	; 0x10
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	26 e6       	ldi	r18, 0x66	; 102
    25f6:	36 e6       	ldi	r19, 0x66	; 102
    25f8:	46 e6       	ldi	r20, 0x66	; 102
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	ad 8b       	std	Y+21, r26	; 0x15
    260a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    260c:	11 e0       	ldi	r17, 0x01	; 1
    260e:	6b 89       	ldd	r22, Y+19	; 0x13
    2610:	7c 89       	ldd	r23, Y+20	; 0x14
    2612:	8d 89       	ldd	r24, Y+21	; 0x15
    2614:	9e 89       	ldd	r25, Y+22	; 0x16
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2622:	88 23       	and	r24, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <spl_left+0x18c>
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	11 23       	and	r17, r17
    262a:	29 f0       	breq	.+10     	; 0x2636 <spl_left+0x19a>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 8f       	std	Y+24, r25	; 0x18
    2632:	8f 8b       	std	Y+23, r24	; 0x17
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <spl_left+0x226>
	else if (__tmp > 65535)
    2636:	11 e0       	ldi	r17, 0x01	; 1
    2638:	6b 89       	ldd	r22, Y+19	; 0x13
    263a:	7c 89       	ldd	r23, Y+20	; 0x14
    263c:	8d 89       	ldd	r24, Y+21	; 0x15
    263e:	9e 89       	ldd	r25, Y+22	; 0x16
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    264c:	18 16       	cp	r1, r24
    264e:	0c f0       	brlt	.+2      	; 0x2652 <spl_left+0x1b6>
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	11 23       	and	r17, r17
    2654:	61 f1       	breq	.+88     	; 0x26ae <spl_left+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6f 85       	ldd	r22, Y+15	; 0x0f
    2658:	78 89       	ldd	r23, Y+16	; 0x10
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	98 8f       	std	Y+24, r25	; 0x18
    267c:	8f 8b       	std	Y+23, r24	; 0x17
    267e:	12 c0       	rjmp	.+36     	; 0x26a4 <spl_left+0x208>
    2680:	80 e7       	ldi	r24, 0x70	; 112
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	8c 01       	movw	r16, r24
    268e:	c8 01       	movw	r24, r16
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <spl_left+0x1f4>
    2694:	8c 01       	movw	r16, r24
    2696:	1a 8f       	std	Y+26, r17	; 0x1a
    2698:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	98 8f       	std	Y+24, r25	; 0x18
    26a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8f 89       	ldd	r24, Y+23	; 0x17
    26a6:	98 8d       	ldd	r25, Y+24	; 0x18
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	51 f7       	brne	.-44     	; 0x2680 <spl_left+0x1e4>
    26ac:	18 c0       	rjmp	.+48     	; 0x26de <spl_left+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6b 89       	ldd	r22, Y+19	; 0x13
    26b0:	7c 89       	ldd	r23, Y+20	; 0x14
    26b2:	8d 89       	ldd	r24, Y+21	; 0x15
    26b4:	9e 89       	ldd	r25, Y+22	; 0x16
    26b6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	98 8f       	std	Y+24, r25	; 0x18
    26c0:	8f 8b       	std	Y+23, r24	; 0x17
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	9c 8f       	std	Y+28, r25	; 0x1c
    26c8:	8b 8f       	std	Y+27, r24	; 0x1b
    26ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ce:	8c 01       	movw	r16, r24
    26d0:	c8 01       	movw	r24, r16
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <spl_left+0x236>
    26d6:	8c 01       	movw	r16, r24
    26d8:	1c 8f       	std	Y+28, r17	; 0x1c
    26da:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(20);
		break;	
    26dc:	00 c0       	rjmp	.+0      	; 0x26de <spl_left+0x242>
    26de:	00 00       	nop
		}
	}
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 ea       	ldi	r26, 0xA0	; 160
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ea:	9e 8f       	std	Y+30, r25	; 0x1e
    26ec:	af 8f       	std	Y+31, r26	; 0x1f
    26ee:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	lds	r25, 0x48
    26f8:	26 e6       	ldi	r18, 0x66	; 102
    26fa:	36 e6       	ldi	r19, 0x66	; 102
    26fc:	46 e6       	ldi	r20, 0x66	; 102
    26fe:	55 e4       	ldi	r21, 0x45	; 69
    2700:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	89 a3       	lds	r24, 0x59
    270a:	9a a3       	lds	r25, 0x5a
    270c:	ab a3       	lds	r26, 0x5b
    270e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    2710:	11 e0       	ldi	r17, 0x01	; 1
    2712:	69 a1       	lds	r22, 0x49
    2714:	7a a1       	lds	r23, 0x4a
    2716:	8b a1       	lds	r24, 0x4b
    2718:	9c a1       	lds	r25, 0x4c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2726:	88 23       	and	r24, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <spl_left+0x290>
    272a:	10 e0       	ldi	r17, 0x00	; 0
    272c:	11 23       	and	r17, r17
    272e:	29 f0       	breq	.+10     	; 0x273a <spl_left+0x29e>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9e a3       	lds	r25, 0x5e
    2736:	8d a3       	lds	r24, 0x5d
    2738:	46 c0       	rjmp	.+140    	; 0x27c6 <spl_left+0x32a>
	else if (__tmp > 65535)
    273a:	11 e0       	ldi	r17, 0x01	; 1
    273c:	69 a1       	lds	r22, 0x49
    273e:	7a a1       	lds	r23, 0x4a
    2740:	8b a1       	lds	r24, 0x4b
    2742:	9c a1       	lds	r25, 0x4c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2750:	18 16       	cp	r1, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <spl_left+0x2ba>
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	11 23       	and	r17, r17
    2758:	61 f1       	breq	.+88     	; 0x27b2 <spl_left+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    275c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    275e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2760:	98 a1       	lds	r25, 0x48
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e a3       	lds	r25, 0x5e
    2780:	8d a3       	lds	r24, 0x5d
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <spl_left+0x30c>
    2784:	80 e7       	ldi	r24, 0x70	; 112
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	98 a7       	lds	r25, 0x78
    278a:	8f a3       	lds	r24, 0x5f
    278c:	8f a1       	lds	r24, 0x4f
    278e:	98 a5       	lds	r25, 0x68
    2790:	8c 01       	movw	r16, r24
    2792:	c8 01       	movw	r24, r16
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <spl_left+0x2f8>
    2798:	8c 01       	movw	r16, r24
    279a:	18 a7       	lds	r17, 0x78
    279c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d a1       	lds	r24, 0x4d
    27a0:	9e a1       	lds	r25, 0x4e
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e a3       	lds	r25, 0x5e
    27a6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d a1       	lds	r24, 0x4d
    27aa:	9e a1       	lds	r25, 0x4e
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	51 f7       	brne	.-44     	; 0x2784 <spl_left+0x2e8>
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <spl_left+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a1       	lds	r22, 0x49
    27b4:	7a a1       	lds	r23, 0x4a
    27b6:	8b a1       	lds	r24, 0x4b
    27b8:	9c a1       	lds	r25, 0x4c
    27ba:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e a3       	lds	r25, 0x5e
    27c4:	8d a3       	lds	r24, 0x5d
    27c6:	8d a1       	lds	r24, 0x4d
    27c8:	9e a1       	lds	r25, 0x4e
    27ca:	9a a7       	lds	r25, 0x7a
    27cc:	89 a7       	lds	r24, 0x79
    27ce:	89 a5       	lds	r24, 0x69
    27d0:	9a a5       	lds	r25, 0x6a
    27d2:	8c 01       	movw	r16, r24
    27d4:	c8 01       	movw	r24, r16
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <spl_left+0x33a>
    27da:	8c 01       	movw	r16, r24
    27dc:	1a a7       	lds	r17, 0x7a
    27de:	09 a7       	lds	r16, 0x79
	_delay_ms(20);
}
    27e0:	aa 96       	adiw	r28, 0x2a	; 42
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <spl_right>:

void spl_right()
{
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	6c 97       	sbiw	r28, 0x1c	; 28
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
	right_degrees(25);
    280e:	89 e1       	ldi	r24, 0x19	; 25
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    2816:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    281a:	01 c0       	rjmp	.+2      	; 0x281e <spl_right+0x28>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    281c:	00 00       	nop
{
	right_degrees(25);
	right();
	while(1)
	{
		read_line();
    281e:	87 e9       	ldi	r24, 0x97	; 151
    2820:	9c e2       	ldi	r25, 0x2C	; 44
    2822:	fc 01       	movw	r30, r24
    2824:	19 95       	eicall
		if(Center_white_line>=25)
    2826:	80 91 33 03 	lds	r24, 0x0333
    282a:	89 31       	cpi	r24, 0x19	; 25
    282c:	b8 f3       	brcs	.-18     	; 0x281c <spl_right+0x26>
		{
			stop();
    282e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 ea       	ldi	r26, 0xA0	; 160
    2838:	b1 e4       	ldi	r27, 0x41	; 65
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	ab 83       	std	Y+3, r26	; 0x03
    2840:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2842:	69 81       	ldd	r22, Y+1	; 0x01
    2844:	7a 81       	ldd	r23, Y+2	; 0x02
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	26 e6       	ldi	r18, 0x66	; 102
    284c:	36 e6       	ldi	r19, 0x66	; 102
    284e:	46 e6       	ldi	r20, 0x66	; 102
    2850:	55 e4       	ldi	r21, 0x45	; 69
    2852:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	af 83       	std	Y+7, r26	; 0x07
    2860:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2862:	11 e0       	ldi	r17, 0x01	; 1
    2864:	6d 81       	ldd	r22, Y+5	; 0x05
    2866:	7e 81       	ldd	r23, Y+6	; 0x06
    2868:	8f 81       	ldd	r24, Y+7	; 0x07
    286a:	98 85       	ldd	r25, Y+8	; 0x08
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2878:	88 23       	and	r24, r24
    287a:	0c f0       	brlt	.+2      	; 0x287e <spl_right+0x88>
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	11 23       	and	r17, r17
    2880:	29 f0       	breq	.+10     	; 0x288c <spl_right+0x96>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 87       	std	Y+10, r25	; 0x0a
    2888:	89 87       	std	Y+9, r24	; 0x09
    288a:	46 c0       	rjmp	.+140    	; 0x2918 <spl_right+0x122>
	else if (__tmp > 65535)
    288c:	11 e0       	ldi	r17, 0x01	; 1
    288e:	6d 81       	ldd	r22, Y+5	; 0x05
    2890:	7e 81       	ldd	r23, Y+6	; 0x06
    2892:	8f 81       	ldd	r24, Y+7	; 0x07
    2894:	98 85       	ldd	r25, Y+8	; 0x08
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <spl_right+0xb2>
    28a6:	10 e0       	ldi	r17, 0x00	; 0
    28a8:	11 23       	and	r17, r17
    28aa:	61 f1       	breq	.+88     	; 0x2904 <spl_right+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	69 81       	ldd	r22, Y+1	; 0x01
    28ae:	7a 81       	ldd	r23, Y+2	; 0x02
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a 87       	std	Y+10, r25	; 0x0a
    28d2:	89 87       	std	Y+9, r24	; 0x09
    28d4:	12 c0       	rjmp	.+36     	; 0x28fa <spl_right+0x104>
    28d6:	80 e7       	ldi	r24, 0x70	; 112
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	9c 87       	std	Y+12, r25	; 0x0c
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e2:	8c 01       	movw	r16, r24
    28e4:	c8 01       	movw	r24, r16
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <spl_right+0xf0>
    28ea:	8c 01       	movw	r16, r24
    28ec:	1c 87       	std	Y+12, r17	; 0x0c
    28ee:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9a 87       	std	Y+10, r25	; 0x0a
    28f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	51 f7       	brne	.-44     	; 0x28d6 <spl_right+0xe0>
    2902:	18 c0       	rjmp	.+48     	; 0x2934 <spl_right+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6d 81       	ldd	r22, Y+5	; 0x05
    2906:	7e 81       	ldd	r23, Y+6	; 0x06
    2908:	8f 81       	ldd	r24, Y+7	; 0x07
    290a:	98 85       	ldd	r25, Y+8	; 0x08
    290c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9a 87       	std	Y+10, r25	; 0x0a
    2916:	89 87       	std	Y+9, r24	; 0x09
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	9e 87       	std	Y+14, r25	; 0x0e
    291e:	8d 87       	std	Y+13, r24	; 0x0d
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	8c 01       	movw	r16, r24
    2926:	c8 01       	movw	r24, r16
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <spl_right+0x132>
    292c:	8c 01       	movw	r16, r24
    292e:	1e 87       	std	Y+14, r17	; 0x0e
    2930:	0d 87       	std	Y+13, r16	; 0x0d
			_delay_ms(20);
			break;
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <spl_right+0x13e>
    2934:	00 00       	nop
		}
	}
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 ea       	ldi	r26, 0xA0	; 160
    293c:	b1 e4       	ldi	r27, 0x41	; 65
    293e:	8f 87       	std	Y+15, r24	; 0x0f
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	a9 8b       	std	Y+17, r26	; 0x11
    2944:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6f 85       	ldd	r22, Y+15	; 0x0f
    2948:	78 89       	ldd	r23, Y+16	; 0x10
    294a:	89 89       	ldd	r24, Y+17	; 0x11
    294c:	9a 89       	ldd	r25, Y+18	; 0x12
    294e:	26 e6       	ldi	r18, 0x66	; 102
    2950:	36 e6       	ldi	r19, 0x66	; 102
    2952:	46 e6       	ldi	r20, 0x66	; 102
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	ad 8b       	std	Y+21, r26	; 0x15
    2964:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2966:	11 e0       	ldi	r17, 0x01	; 1
    2968:	6b 89       	ldd	r22, Y+19	; 0x13
    296a:	7c 89       	ldd	r23, Y+20	; 0x14
    296c:	8d 89       	ldd	r24, Y+21	; 0x15
    296e:	9e 89       	ldd	r25, Y+22	; 0x16
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    297c:	88 23       	and	r24, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <spl_right+0x18c>
    2980:	10 e0       	ldi	r17, 0x00	; 0
    2982:	11 23       	and	r17, r17
    2984:	29 f0       	breq	.+10     	; 0x2990 <spl_right+0x19a>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	98 8f       	std	Y+24, r25	; 0x18
    298c:	8f 8b       	std	Y+23, r24	; 0x17
    298e:	46 c0       	rjmp	.+140    	; 0x2a1c <spl_right+0x226>
	else if (__tmp > 65535)
    2990:	11 e0       	ldi	r17, 0x01	; 1
    2992:	6b 89       	ldd	r22, Y+19	; 0x13
    2994:	7c 89       	ldd	r23, Y+20	; 0x14
    2996:	8d 89       	ldd	r24, Y+21	; 0x15
    2998:	9e 89       	ldd	r25, Y+22	; 0x16
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	0c f0       	brlt	.+2      	; 0x29ac <spl_right+0x1b6>
    29aa:	10 e0       	ldi	r17, 0x00	; 0
    29ac:	11 23       	and	r17, r17
    29ae:	61 f1       	breq	.+88     	; 0x2a08 <spl_right+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    29b2:	78 89       	ldd	r23, Y+16	; 0x10
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	9a 89       	ldd	r25, Y+18	; 0x12
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	98 8f       	std	Y+24, r25	; 0x18
    29d6:	8f 8b       	std	Y+23, r24	; 0x17
    29d8:	12 c0       	rjmp	.+36     	; 0x29fe <spl_right+0x208>
    29da:	80 e7       	ldi	r24, 0x70	; 112
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	9a 8f       	std	Y+26, r25	; 0x1a
    29e0:	89 8f       	std	Y+25, r24	; 0x19
    29e2:	89 8d       	ldd	r24, Y+25	; 0x19
    29e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29e6:	8c 01       	movw	r16, r24
    29e8:	c8 01       	movw	r24, r16
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <spl_right+0x1f4>
    29ee:	8c 01       	movw	r16, r24
    29f0:	1a 8f       	std	Y+26, r17	; 0x1a
    29f2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	98 8f       	std	Y+24, r25	; 0x18
    29fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	51 f7       	brne	.-44     	; 0x29da <spl_right+0x1e4>
    2a06:	17 c0       	rjmp	.+46     	; 0x2a36 <spl_right+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6b 89       	ldd	r22, Y+19	; 0x13
    2a0a:	7c 89       	ldd	r23, Y+20	; 0x14
    2a0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a0e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a10:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	98 8f       	std	Y+24, r25	; 0x18
    2a1a:	8f 8b       	std	Y+23, r24	; 0x17
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	9c 8f       	std	Y+28, r25	; 0x1c
    2a22:	8b 8f       	std	Y+27, r24	; 0x1b
    2a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a28:	8c 01       	movw	r16, r24
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <spl_right+0x236>
    2a30:	8c 01       	movw	r16, r24
    2a32:	1c 8f       	std	Y+28, r17	; 0x1c
    2a34:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(20);
}
    2a36:	6c 96       	adiw	r28, 0x1c	; 28
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <spl_left2>:
* Logic:			Keep rotating left till center sensor see line
					Rotate by keeping right wheel stationary and moving left wheel in the backward direction
* Example Call:		spl_left2();
*/
void spl_left2()
{// FOR FRONT PICK FROM LEFT DIRECTION
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	6c 97       	sbiw	r28, 0x1c	; 28
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
	stop();
    2a64:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a6e:	b1 e4       	ldi	r27, 0x41	; 65
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	ab 83       	std	Y+3, r26	; 0x03
    2a76:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	69 81       	ldd	r22, Y+1	; 0x01
    2a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	26 e6       	ldi	r18, 0x66	; 102
    2a82:	36 e6       	ldi	r19, 0x66	; 102
    2a84:	46 e6       	ldi	r20, 0x66	; 102
    2a86:	55 e4       	ldi	r21, 0x45	; 69
    2a88:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	af 83       	std	Y+7, r26	; 0x07
    2a96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a98:	11 e0       	ldi	r17, 0x01	; 1
    2a9a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a9c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	98 85       	ldd	r25, Y+8	; 0x08
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	0c f0       	brlt	.+2      	; 0x2ab4 <spl_left2+0x68>
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	11 23       	and	r17, r17
    2ab6:	29 f0       	breq	.+10     	; 0x2ac2 <spl_left2+0x76>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a 87       	std	Y+10, r25	; 0x0a
    2abe:	89 87       	std	Y+9, r24	; 0x09
    2ac0:	46 c0       	rjmp	.+140    	; 0x2b4e <spl_left2+0x102>
	else if (__tmp > 65535)
    2ac2:	11 e0       	ldi	r17, 0x01	; 1
    2ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    2aca:	98 85       	ldd	r25, Y+8	; 0x08
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <spl_left2+0x92>
    2adc:	10 e0       	ldi	r17, 0x00	; 0
    2ade:	11 23       	and	r17, r17
    2ae0:	61 f1       	breq	.+88     	; 0x2b3a <spl_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	69 81       	ldd	r22, Y+1	; 0x01
    2ae4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a 87       	std	Y+10, r25	; 0x0a
    2b08:	89 87       	std	Y+9, r24	; 0x09
    2b0a:	12 c0       	rjmp	.+36     	; 0x2b30 <spl_left2+0xe4>
    2b0c:	80 e7       	ldi	r24, 0x70	; 112
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
    2b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b18:	8c 01       	movw	r16, r24
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <spl_left2+0xd0>
    2b20:	8c 01       	movw	r16, r24
    2b22:	1c 87       	std	Y+12, r17	; 0x0c
    2b24:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9a 87       	std	Y+10, r25	; 0x0a
    2b2e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	51 f7       	brne	.-44     	; 0x2b0c <spl_left2+0xc0>
    2b38:	17 c0       	rjmp	.+46     	; 0x2b68 <spl_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b3c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9a 87       	std	Y+10, r25	; 0x0a
    2b4c:	89 87       	std	Y+9, r24	; 0x09
    2b4e:	89 85       	ldd	r24, Y+9	; 0x09
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	9e 87       	std	Y+14, r25	; 0x0e
    2b54:	8d 87       	std	Y+13, r24	; 0x0d
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	8c 01       	movw	r16, r24
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <spl_left2+0x112>
    2b62:	8c 01       	movw	r16, r24
    2b64:	1e 87       	std	Y+14, r17	; 0x0e
    2b66:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_left_2_degrees(30);
    2b68:	8e e1       	ldi	r24, 0x1E	; 30
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <soft_left_2_degrees>
	soft_left_2();
    2b70:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <soft_left_2>
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <spl_left2+0x12c>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    2b76:	00 00       	nop
	_delay_ms(20);
	soft_left_2_degrees(30);
	soft_left_2();
	while(1)
	{
		read_line();
    2b78:	87 e9       	ldi	r24, 0x97	; 151
    2b7a:	9c e2       	ldi	r25, 0x2C	; 44
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	19 95       	eicall
		if(Center_white_line>25)
    2b80:	80 91 33 03 	lds	r24, 0x0333
    2b84:	8a 31       	cpi	r24, 0x1A	; 26
    2b86:	b8 f3       	brcs	.-18     	; 0x2b76 <spl_left2+0x12a>
		{
			stop();
    2b88:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 ea       	ldi	r26, 0xA0	; 160
    2b92:	b1 e4       	ldi	r27, 0x41	; 65
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
    2b96:	98 8b       	std	Y+16, r25	; 0x10
    2b98:	a9 8b       	std	Y+17, r26	; 0x11
    2b9a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b9e:	78 89       	ldd	r23, Y+16	; 0x10
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	26 e6       	ldi	r18, 0x66	; 102
    2ba6:	36 e6       	ldi	r19, 0x66	; 102
    2ba8:	46 e6       	ldi	r20, 0x66	; 102
    2baa:	55 e4       	ldi	r21, 0x45	; 69
    2bac:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	ad 8b       	std	Y+21, r26	; 0x15
    2bba:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2bbc:	11 e0       	ldi	r17, 0x01	; 1
    2bbe:	6b 89       	ldd	r22, Y+19	; 0x13
    2bc0:	7c 89       	ldd	r23, Y+20	; 0x14
    2bc2:	8d 89       	ldd	r24, Y+21	; 0x15
    2bc4:	9e 89       	ldd	r25, Y+22	; 0x16
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	0c f0       	brlt	.+2      	; 0x2bd8 <spl_left2+0x18c>
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	11 23       	and	r17, r17
    2bda:	29 f0       	breq	.+10     	; 0x2be6 <spl_left2+0x19a>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	98 8f       	std	Y+24, r25	; 0x18
    2be2:	8f 8b       	std	Y+23, r24	; 0x17
    2be4:	46 c0       	rjmp	.+140    	; 0x2c72 <spl_left2+0x226>
	else if (__tmp > 65535)
    2be6:	11 e0       	ldi	r17, 0x01	; 1
    2be8:	6b 89       	ldd	r22, Y+19	; 0x13
    2bea:	7c 89       	ldd	r23, Y+20	; 0x14
    2bec:	8d 89       	ldd	r24, Y+21	; 0x15
    2bee:	9e 89       	ldd	r25, Y+22	; 0x16
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	3f ef       	ldi	r19, 0xFF	; 255
    2bf4:	4f e7       	ldi	r20, 0x7F	; 127
    2bf6:	57 e4       	ldi	r21, 0x47	; 71
    2bf8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2bfc:	18 16       	cp	r1, r24
    2bfe:	0c f0       	brlt	.+2      	; 0x2c02 <spl_left2+0x1b6>
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	11 23       	and	r17, r17
    2c04:	61 f1       	breq	.+88     	; 0x2c5e <spl_left2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c08:	78 89       	ldd	r23, Y+16	; 0x10
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e2       	ldi	r20, 0x20	; 32
    2c14:	51 e4       	ldi	r21, 0x41	; 65
    2c16:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	98 8f       	std	Y+24, r25	; 0x18
    2c2c:	8f 8b       	std	Y+23, r24	; 0x17
    2c2e:	12 c0       	rjmp	.+36     	; 0x2c54 <spl_left2+0x208>
    2c30:	80 e7       	ldi	r24, 0x70	; 112
    2c32:	91 e0       	ldi	r25, 0x01	; 1
    2c34:	9a 8f       	std	Y+26, r25	; 0x1a
    2c36:	89 8f       	std	Y+25, r24	; 0x19
    2c38:	89 8d       	ldd	r24, Y+25	; 0x19
    2c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3c:	8c 01       	movw	r16, r24
    2c3e:	c8 01       	movw	r24, r16
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <spl_left2+0x1f4>
    2c44:	8c 01       	movw	r16, r24
    2c46:	1a 8f       	std	Y+26, r17	; 0x1a
    2c48:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	98 8f       	std	Y+24, r25	; 0x18
    2c52:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	51 f7       	brne	.-44     	; 0x2c30 <spl_left2+0x1e4>
    2c5c:	18 c0       	rjmp	.+48     	; 0x2c8e <spl_left2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6b 89       	ldd	r22, Y+19	; 0x13
    2c60:	7c 89       	ldd	r23, Y+20	; 0x14
    2c62:	8d 89       	ldd	r24, Y+21	; 0x15
    2c64:	9e 89       	ldd	r25, Y+22	; 0x16
    2c66:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	98 8f       	std	Y+24, r25	; 0x18
    2c70:	8f 8b       	std	Y+23, r24	; 0x17
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	9c 8f       	std	Y+28, r25	; 0x1c
    2c78:	8b 8f       	std	Y+27, r24	; 0x1b
    2c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7e:	8c 01       	movw	r16, r24
    2c80:	c8 01       	movw	r24, r16
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <spl_left2+0x236>
    2c86:	8c 01       	movw	r16, r24
    2c88:	1c 8f       	std	Y+28, r17	; 0x1c
    2c8a:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <spl_left2+0x244>
    2c8e:	00 00       	nop
		}
	}
}
    2c90:	6c 96       	adiw	r28, 0x1c	; 28
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <spl_right2>:
					Rotate by keeping left wheel stationary and moving right wheel in the backward direction
* Example Call:		spl_right2();
*/

void spl_right2()
{//FOR FRONT WHEN BOT IS COMING FROM RIGHT
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	6c 97       	sbiw	r28, 0x1c	; 28
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
	stop();
    2cbe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cc8:	b1 e4       	ldi	r27, 0x41	; 65
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	ab 83       	std	Y+3, r26	; 0x03
    2cd0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	69 81       	ldd	r22, Y+1	; 0x01
    2cd4:	7a 81       	ldd	r23, Y+2	; 0x02
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	26 e6       	ldi	r18, 0x66	; 102
    2cdc:	36 e6       	ldi	r19, 0x66	; 102
    2cde:	46 e6       	ldi	r20, 0x66	; 102
    2ce0:	55 e4       	ldi	r21, 0x45	; 69
    2ce2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	af 83       	std	Y+7, r26	; 0x07
    2cf0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2cf2:	11 e0       	ldi	r17, 0x01	; 1
    2cf4:	6d 81       	ldd	r22, Y+5	; 0x05
    2cf6:	7e 81       	ldd	r23, Y+6	; 0x06
    2cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfa:	98 85       	ldd	r25, Y+8	; 0x08
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <spl_right2+0x68>
    2d0c:	10 e0       	ldi	r17, 0x00	; 0
    2d0e:	11 23       	and	r17, r17
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <spl_right2+0x76>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9a 87       	std	Y+10, r25	; 0x0a
    2d18:	89 87       	std	Y+9, r24	; 0x09
    2d1a:	46 c0       	rjmp	.+140    	; 0x2da8 <spl_right2+0x102>
	else if (__tmp > 65535)
    2d1c:	11 e0       	ldi	r17, 0x01	; 1
    2d1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d20:	7e 81       	ldd	r23, Y+6	; 0x06
    2d22:	8f 81       	ldd	r24, Y+7	; 0x07
    2d24:	98 85       	ldd	r25, Y+8	; 0x08
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <spl_right2+0x92>
    2d36:	10 e0       	ldi	r17, 0x00	; 0
    2d38:	11 23       	and	r17, r17
    2d3a:	61 f1       	breq	.+88     	; 0x2d94 <spl_right2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	69 81       	ldd	r22, Y+1	; 0x01
    2d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a 87       	std	Y+10, r25	; 0x0a
    2d62:	89 87       	std	Y+9, r24	; 0x09
    2d64:	12 c0       	rjmp	.+36     	; 0x2d8a <spl_right2+0xe4>
    2d66:	80 e7       	ldi	r24, 0x70	; 112
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	9c 87       	std	Y+12, r25	; 0x0c
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d72:	8c 01       	movw	r16, r24
    2d74:	c8 01       	movw	r24, r16
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <spl_right2+0xd0>
    2d7a:	8c 01       	movw	r16, r24
    2d7c:	1c 87       	std	Y+12, r17	; 0x0c
    2d7e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9a 87       	std	Y+10, r25	; 0x0a
    2d88:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	51 f7       	brne	.-44     	; 0x2d66 <spl_right2+0xc0>
    2d92:	17 c0       	rjmp	.+46     	; 0x2dc2 <spl_right2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6d 81       	ldd	r22, Y+5	; 0x05
    2d96:	7e 81       	ldd	r23, Y+6	; 0x06
    2d98:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9a:	98 85       	ldd	r25, Y+8	; 0x08
    2d9c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9a 87       	std	Y+10, r25	; 0x0a
    2da6:	89 87       	std	Y+9, r24	; 0x09
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	9e 87       	std	Y+14, r25	; 0x0e
    2dae:	8d 87       	std	Y+13, r24	; 0x0d
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	8c 01       	movw	r16, r24
    2db6:	c8 01       	movw	r24, r16
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <spl_right2+0x112>
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	1e 87       	std	Y+14, r17	; 0x0e
    2dc0:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	soft_right_2_degrees(30);
    2dc2:	8e e1       	ldi	r24, 0x1E	; 30
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <soft_right_2_degrees>
	soft_right_2();
    2dca:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <soft_right_2>
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <spl_right2+0x12c>
		{
			stop();
			_delay_ms(20);
			break;
		}
	}
    2dd0:	00 00       	nop
	_delay_ms(20);
	soft_right_2_degrees(30);
	soft_right_2();
	while(1)
	{
		read_line();
    2dd2:	87 e9       	ldi	r24, 0x97	; 151
    2dd4:	9c e2       	ldi	r25, 0x2C	; 44
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	19 95       	eicall
		if(Center_white_line>25)
    2dda:	80 91 33 03 	lds	r24, 0x0333
    2dde:	8a 31       	cpi	r24, 0x1A	; 26
    2de0:	b8 f3       	brcs	.-18     	; 0x2dd0 <spl_right2+0x12a>
		{
			stop();
    2de2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	a0 ea       	ldi	r26, 0xA0	; 160
    2dec:	b1 e4       	ldi	r27, 0x41	; 65
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    2df0:	98 8b       	std	Y+16, r25	; 0x10
    2df2:	a9 8b       	std	Y+17, r26	; 0x11
    2df4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2df8:	78 89       	ldd	r23, Y+16	; 0x10
    2dfa:	89 89       	ldd	r24, Y+17	; 0x11
    2dfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dfe:	26 e6       	ldi	r18, 0x66	; 102
    2e00:	36 e6       	ldi	r19, 0x66	; 102
    2e02:	46 e6       	ldi	r20, 0x66	; 102
    2e04:	55 e4       	ldi	r21, 0x45	; 69
    2e06:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8b 8b       	std	Y+19, r24	; 0x13
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	ad 8b       	std	Y+21, r26	; 0x15
    2e14:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2e16:	11 e0       	ldi	r17, 0x01	; 1
    2e18:	6b 89       	ldd	r22, Y+19	; 0x13
    2e1a:	7c 89       	ldd	r23, Y+20	; 0x14
    2e1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2e1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	0c f0       	brlt	.+2      	; 0x2e32 <spl_right2+0x18c>
    2e30:	10 e0       	ldi	r17, 0x00	; 0
    2e32:	11 23       	and	r17, r17
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <spl_right2+0x19a>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	98 8f       	std	Y+24, r25	; 0x18
    2e3c:	8f 8b       	std	Y+23, r24	; 0x17
    2e3e:	46 c0       	rjmp	.+140    	; 0x2ecc <spl_right2+0x226>
	else if (__tmp > 65535)
    2e40:	11 e0       	ldi	r17, 0x01	; 1
    2e42:	6b 89       	ldd	r22, Y+19	; 0x13
    2e44:	7c 89       	ldd	r23, Y+20	; 0x14
    2e46:	8d 89       	ldd	r24, Y+21	; 0x15
    2e48:	9e 89       	ldd	r25, Y+22	; 0x16
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <spl_right2+0x1b6>
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    2e5c:	11 23       	and	r17, r17
    2e5e:	61 f1       	breq	.+88     	; 0x2eb8 <spl_right2+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e62:	78 89       	ldd	r23, Y+16	; 0x10
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	98 8f       	std	Y+24, r25	; 0x18
    2e86:	8f 8b       	std	Y+23, r24	; 0x17
    2e88:	12 c0       	rjmp	.+36     	; 0x2eae <spl_right2+0x208>
    2e8a:	80 e7       	ldi	r24, 0x70	; 112
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e90:	89 8f       	std	Y+25, r24	; 0x19
    2e92:	89 8d       	ldd	r24, Y+25	; 0x19
    2e94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e96:	8c 01       	movw	r16, r24
    2e98:	c8 01       	movw	r24, r16
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <spl_right2+0x1f4>
    2e9e:	8c 01       	movw	r16, r24
    2ea0:	1a 8f       	std	Y+26, r17	; 0x1a
    2ea2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	98 8f       	std	Y+24, r25	; 0x18
    2eac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	51 f7       	brne	.-44     	; 0x2e8a <spl_right2+0x1e4>
    2eb6:	18 c0       	rjmp	.+48     	; 0x2ee8 <spl_right2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb8:	6b 89       	ldd	r22, Y+19	; 0x13
    2eba:	7c 89       	ldd	r23, Y+20	; 0x14
    2ebc:	8d 89       	ldd	r24, Y+21	; 0x15
    2ebe:	9e 89       	ldd	r25, Y+22	; 0x16
    2ec0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	98 8f       	std	Y+24, r25	; 0x18
    2eca:	8f 8b       	std	Y+23, r24	; 0x17
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	9c 8f       	std	Y+28, r25	; 0x1c
    2ed2:	8b 8f       	std	Y+27, r24	; 0x1b
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	8c 01       	movw	r16, r24
    2eda:	c8 01       	movw	r24, r16
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <spl_right2+0x236>
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	1c 8f       	std	Y+28, r17	; 0x1c
    2ee4:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(20);
			break;
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <spl_right2+0x244>
    2ee8:	00 00       	nop
		}
	}
}
    2eea:	6c 96       	adiw	r28, 0x1c	; 28
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <correct_left2>:
* Logic:			Keep rotating left till center sensor see line
					Rotate by moving right wheel forward and left wheel in the backward direction
* Example Call:		correct_left2();
*/
void correct_left2()
{   
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	6c 97       	sbiw	r28, 0x1c	; 28
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    stop();
    2f18:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a8 e4       	ldi	r26, 0x48	; 72
    2f22:	b2 e4       	ldi	r27, 0x42	; 66
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	ab 83       	std	Y+3, r26	; 0x03
    2f2a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	69 81       	ldd	r22, Y+1	; 0x01
    2f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	26 e6       	ldi	r18, 0x66	; 102
    2f36:	36 e6       	ldi	r19, 0x66	; 102
    2f38:	46 e6       	ldi	r20, 0x66	; 102
    2f3a:	55 e4       	ldi	r21, 0x45	; 69
    2f3c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	af 83       	std	Y+7, r26	; 0x07
    2f4a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f4c:	11 e0       	ldi	r17, 0x01	; 1
    2f4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f50:	7e 81       	ldd	r23, Y+6	; 0x06
    2f52:	8f 81       	ldd	r24, Y+7	; 0x07
    2f54:	98 85       	ldd	r25, Y+8	; 0x08
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <correct_left2+0x68>
    2f66:	10 e0       	ldi	r17, 0x00	; 0
    2f68:	11 23       	and	r17, r17
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <correct_left2+0x76>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9a 87       	std	Y+10, r25	; 0x0a
    2f72:	89 87       	std	Y+9, r24	; 0x09
    2f74:	46 c0       	rjmp	.+140    	; 0x3002 <correct_left2+0x102>
	else if (__tmp > 65535)
    2f76:	11 e0       	ldi	r17, 0x01	; 1
    2f78:	6d 81       	ldd	r22, Y+5	; 0x05
    2f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7e:	98 85       	ldd	r25, Y+8	; 0x08
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <correct_left2+0x92>
    2f90:	10 e0       	ldi	r17, 0x00	; 0
    2f92:	11 23       	and	r17, r17
    2f94:	61 f1       	breq	.+88     	; 0x2fee <correct_left2+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	69 81       	ldd	r22, Y+1	; 0x01
    2f98:	7a 81       	ldd	r23, Y+2	; 0x02
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9a 87       	std	Y+10, r25	; 0x0a
    2fbc:	89 87       	std	Y+9, r24	; 0x09
    2fbe:	12 c0       	rjmp	.+36     	; 0x2fe4 <correct_left2+0xe4>
    2fc0:	80 e7       	ldi	r24, 0x70	; 112
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fcc:	8c 01       	movw	r16, r24
    2fce:	c8 01       	movw	r24, r16
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <correct_left2+0xd0>
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	1c 87       	std	Y+12, r17	; 0x0c
    2fd8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9a 87       	std	Y+10, r25	; 0x0a
    2fe2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	51 f7       	brne	.-44     	; 0x2fc0 <correct_left2+0xc0>
    2fec:	17 c0       	rjmp	.+46     	; 0x301c <correct_left2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6d 81       	ldd	r22, Y+5	; 0x05
    2ff0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	98 85       	ldd	r25, Y+8	; 0x08
    2ff6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9a 87       	std	Y+10, r25	; 0x0a
    3000:	89 87       	std	Y+9, r24	; 0x09
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	9e 87       	std	Y+14, r25	; 0x0e
    3008:	8d 87       	std	Y+13, r24	; 0x0d
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	8c 01       	movw	r16, r24
    3010:	c8 01       	movw	r24, r16
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <correct_left2+0x112>
    3016:	8c 01       	movw	r16, r24
    3018:	1e 87       	std	Y+14, r17	; 0x0e
    301a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	left_degrees(35);
    301c:	83 e2       	ldi	r24, 0x23	; 35
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    3024:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    3028:	01 c0       	rjmp	.+2      	; 0x302c <correct_left2+0x12c>
		{
			stop();
			_delay_ms(50);
			break;
		}
	}
    302a:	00 00       	nop
	_delay_ms(50);
	left_degrees(35);
	left();
	while(1)
	{   
		read_line();
    302c:	87 e9       	ldi	r24, 0x97	; 151
    302e:	9c e2       	ldi	r25, 0x2C	; 44
    3030:	fc 01       	movw	r30, r24
    3032:	19 95       	eicall
		if((Center_white_line > 14 && Right_white_line > 14)||(Center_white_line > 70))
    3034:	80 91 33 03 	lds	r24, 0x0333
    3038:	8f 30       	cpi	r24, 0x0F	; 15
    303a:	20 f0       	brcs	.+8      	; 0x3044 <correct_left2+0x144>
    303c:	80 91 34 03 	lds	r24, 0x0334
    3040:	8f 30       	cpi	r24, 0x0F	; 15
    3042:	20 f4       	brcc	.+8      	; 0x304c <correct_left2+0x14c>
    3044:	80 91 33 03 	lds	r24, 0x0333
    3048:	87 34       	cpi	r24, 0x47	; 71
    304a:	78 f3       	brcs	.-34     	; 0x302a <correct_left2+0x12a>
		{
			stop();
    304c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a8 e4       	ldi	r26, 0x48	; 72
    3056:	b2 e4       	ldi	r27, 0x42	; 66
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	98 8b       	std	Y+16, r25	; 0x10
    305c:	a9 8b       	std	Y+17, r26	; 0x11
    305e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3060:	6f 85       	ldd	r22, Y+15	; 0x0f
    3062:	78 89       	ldd	r23, Y+16	; 0x10
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	26 e6       	ldi	r18, 0x66	; 102
    306a:	36 e6       	ldi	r19, 0x66	; 102
    306c:	46 e6       	ldi	r20, 0x66	; 102
    306e:	55 e4       	ldi	r21, 0x45	; 69
    3070:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8b 8b       	std	Y+19, r24	; 0x13
    307a:	9c 8b       	std	Y+20, r25	; 0x14
    307c:	ad 8b       	std	Y+21, r26	; 0x15
    307e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3080:	11 e0       	ldi	r17, 0x01	; 1
    3082:	6b 89       	ldd	r22, Y+19	; 0x13
    3084:	7c 89       	ldd	r23, Y+20	; 0x14
    3086:	8d 89       	ldd	r24, Y+21	; 0x15
    3088:	9e 89       	ldd	r25, Y+22	; 0x16
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    3096:	88 23       	and	r24, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <correct_left2+0x19c>
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	11 23       	and	r17, r17
    309e:	29 f0       	breq	.+10     	; 0x30aa <correct_left2+0x1aa>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	98 8f       	std	Y+24, r25	; 0x18
    30a6:	8f 8b       	std	Y+23, r24	; 0x17
    30a8:	46 c0       	rjmp	.+140    	; 0x3136 <correct_left2+0x236>
	else if (__tmp > 65535)
    30aa:	11 e0       	ldi	r17, 0x01	; 1
    30ac:	6b 89       	ldd	r22, Y+19	; 0x13
    30ae:	7c 89       	ldd	r23, Y+20	; 0x14
    30b0:	8d 89       	ldd	r24, Y+21	; 0x15
    30b2:	9e 89       	ldd	r25, Y+22	; 0x16
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <correct_left2+0x1c6>
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	11 23       	and	r17, r17
    30c8:	61 f1       	breq	.+88     	; 0x3122 <correct_left2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    30cc:	78 89       	ldd	r23, Y+16	; 0x10
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	9a 89       	ldd	r25, Y+18	; 0x12
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	98 8f       	std	Y+24, r25	; 0x18
    30f0:	8f 8b       	std	Y+23, r24	; 0x17
    30f2:	12 c0       	rjmp	.+36     	; 0x3118 <correct_left2+0x218>
    30f4:	80 e7       	ldi	r24, 0x70	; 112
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	9a 8f       	std	Y+26, r25	; 0x1a
    30fa:	89 8f       	std	Y+25, r24	; 0x19
    30fc:	89 8d       	ldd	r24, Y+25	; 0x19
    30fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3100:	8c 01       	movw	r16, r24
    3102:	c8 01       	movw	r24, r16
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <correct_left2+0x204>
    3108:	8c 01       	movw	r16, r24
    310a:	1a 8f       	std	Y+26, r17	; 0x1a
    310c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	98 8f       	std	Y+24, r25	; 0x18
    3116:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3118:	8f 89       	ldd	r24, Y+23	; 0x17
    311a:	98 8d       	ldd	r25, Y+24	; 0x18
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	51 f7       	brne	.-44     	; 0x30f4 <correct_left2+0x1f4>
    3120:	18 c0       	rjmp	.+48     	; 0x3152 <correct_left2+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3122:	6b 89       	ldd	r22, Y+19	; 0x13
    3124:	7c 89       	ldd	r23, Y+20	; 0x14
    3126:	8d 89       	ldd	r24, Y+21	; 0x15
    3128:	9e 89       	ldd	r25, Y+22	; 0x16
    312a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	98 8f       	std	Y+24, r25	; 0x18
    3134:	8f 8b       	std	Y+23, r24	; 0x17
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	9c 8f       	std	Y+28, r25	; 0x1c
    313c:	8b 8f       	std	Y+27, r24	; 0x1b
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	8c 01       	movw	r16, r24
    3144:	c8 01       	movw	r24, r16
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <correct_left2+0x246>
    314a:	8c 01       	movw	r16, r24
    314c:	1c 8f       	std	Y+28, r17	; 0x1c
    314e:	0b 8f       	std	Y+27, r16	; 0x1b
			_delay_ms(50);
			break;
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <correct_left2+0x254>
    3152:	00 00       	nop
		}
	}
}
    3154:	6c 96       	adiw	r28, 0x1c	; 28
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	08 95       	ret

0000316a <correct_right3>:
					Rotate 180 degrees in the clockwise direction
* Example Call:		correct_right3();
*/

void correct_right3()
{   
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	6c 97       	sbiw	r28, 0x1c	; 28
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
	stop();
    3182:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 ea       	ldi	r26, 0xA0	; 160
    318c:	b1 e4       	ldi	r27, 0x41	; 65
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	ab 83       	std	Y+3, r26	; 0x03
    3194:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3196:	69 81       	ldd	r22, Y+1	; 0x01
    3198:	7a 81       	ldd	r23, Y+2	; 0x02
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	26 e6       	ldi	r18, 0x66	; 102
    31a0:	36 e6       	ldi	r19, 0x66	; 102
    31a2:	46 e6       	ldi	r20, 0x66	; 102
    31a4:	55 e4       	ldi	r21, 0x45	; 69
    31a6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	af 83       	std	Y+7, r26	; 0x07
    31b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    31b6:	11 e0       	ldi	r17, 0x01	; 1
    31b8:	6d 81       	ldd	r22, Y+5	; 0x05
    31ba:	7e 81       	ldd	r23, Y+6	; 0x06
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <correct_right3+0x68>
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	11 23       	and	r17, r17
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <correct_right3+0x76>
		__ticks = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9a 87       	std	Y+10, r25	; 0x0a
    31dc:	89 87       	std	Y+9, r24	; 0x09
    31de:	46 c0       	rjmp	.+140    	; 0x326c <correct_right3+0x102>
	else if (__tmp > 65535)
    31e0:	11 e0       	ldi	r17, 0x01	; 1
    31e2:	6d 81       	ldd	r22, Y+5	; 0x05
    31e4:	7e 81       	ldd	r23, Y+6	; 0x06
    31e6:	8f 81       	ldd	r24, Y+7	; 0x07
    31e8:	98 85       	ldd	r25, Y+8	; 0x08
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <correct_right3+0x92>
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	11 23       	and	r17, r17
    31fe:	61 f1       	breq	.+88     	; 0x3258 <correct_right3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3200:	69 81       	ldd	r22, Y+1	; 0x01
    3202:	7a 81       	ldd	r23, Y+2	; 0x02
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	9c 81       	ldd	r25, Y+4	; 0x04
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e2       	ldi	r20, 0x20	; 32
    320e:	51 e4       	ldi	r21, 0x41	; 65
    3210:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a 87       	std	Y+10, r25	; 0x0a
    3226:	89 87       	std	Y+9, r24	; 0x09
    3228:	12 c0       	rjmp	.+36     	; 0x324e <correct_right3+0xe4>
    322a:	80 e7       	ldi	r24, 0x70	; 112
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	9c 87       	std	Y+12, r25	; 0x0c
    3230:	8b 87       	std	Y+11, r24	; 0x0b
    3232:	8b 85       	ldd	r24, Y+11	; 0x0b
    3234:	9c 85       	ldd	r25, Y+12	; 0x0c
    3236:	8c 01       	movw	r16, r24
    3238:	c8 01       	movw	r24, r16
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <correct_right3+0xd0>
    323e:	8c 01       	movw	r16, r24
    3240:	1c 87       	std	Y+12, r17	; 0x0c
    3242:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9a 87       	std	Y+10, r25	; 0x0a
    324c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	51 f7       	brne	.-44     	; 0x322a <correct_right3+0xc0>
    3256:	17 c0       	rjmp	.+46     	; 0x3286 <correct_right3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 81       	ldd	r22, Y+5	; 0x05
    325a:	7e 81       	ldd	r23, Y+6	; 0x06
    325c:	8f 81       	ldd	r24, Y+7	; 0x07
    325e:	98 85       	ldd	r25, Y+8	; 0x08
    3260:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9a 87       	std	Y+10, r25	; 0x0a
    326a:	89 87       	std	Y+9, r24	; 0x09
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	9e 87       	std	Y+14, r25	; 0x0e
    3272:	8d 87       	std	Y+13, r24	; 0x0d
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	8c 01       	movw	r16, r24
    327a:	c8 01       	movw	r24, r16
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <correct_right3+0x112>
    3280:	8c 01       	movw	r16, r24
    3282:	1e 87       	std	Y+14, r17	; 0x0e
    3284:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	right_degrees(160);
    3286:	80 ea       	ldi	r24, 0xA0	; 160
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
	right();
    328e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <right>
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <correct_right3+0x12c>
		if(Center_white_line>25)
		{
			stop();
			break;
		}
	}
    3294:	00 00       	nop
	_delay_ms(20);
	right_degrees(160);
	right();
	while(1)
	{
		read_line();
    3296:	87 e9       	ldi	r24, 0x97	; 151
    3298:	9c e2       	ldi	r25, 0x2C	; 44
    329a:	fc 01       	movw	r30, r24
    329c:	19 95       	eicall
		if(Center_white_line>25)
    329e:	80 91 33 03 	lds	r24, 0x0333
    32a2:	8a 31       	cpi	r24, 0x1A	; 26
    32a4:	b8 f3       	brcs	.-18     	; 0x3294 <correct_right3+0x12a>
		{
			stop();
    32a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			break;
    32aa:	00 00       	nop
		}
	}
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 e2       	ldi	r26, 0x20	; 32
    32b2:	b2 e4       	ldi	r27, 0x42	; 66
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
    32b6:	98 8b       	std	Y+16, r25	; 0x10
    32b8:	a9 8b       	std	Y+17, r26	; 0x11
    32ba:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    32be:	78 89       	ldd	r23, Y+16	; 0x10
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	9a 89       	ldd	r25, Y+18	; 0x12
    32c4:	26 e6       	ldi	r18, 0x66	; 102
    32c6:	36 e6       	ldi	r19, 0x66	; 102
    32c8:	46 e6       	ldi	r20, 0x66	; 102
    32ca:	55 e4       	ldi	r21, 0x45	; 69
    32cc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	9c 8b       	std	Y+20, r25	; 0x14
    32d8:	ad 8b       	std	Y+21, r26	; 0x15
    32da:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    32dc:	11 e0       	ldi	r17, 0x01	; 1
    32de:	6b 89       	ldd	r22, Y+19	; 0x13
    32e0:	7c 89       	ldd	r23, Y+20	; 0x14
    32e2:	8d 89       	ldd	r24, Y+21	; 0x15
    32e4:	9e 89       	ldd	r25, Y+22	; 0x16
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    32f2:	88 23       	and	r24, r24
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <correct_right3+0x18e>
    32f6:	10 e0       	ldi	r17, 0x00	; 0
    32f8:	11 23       	and	r17, r17
    32fa:	29 f0       	breq	.+10     	; 0x3306 <correct_right3+0x19c>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	98 8f       	std	Y+24, r25	; 0x18
    3302:	8f 8b       	std	Y+23, r24	; 0x17
    3304:	46 c0       	rjmp	.+140    	; 0x3392 <correct_right3+0x228>
	else if (__tmp > 65535)
    3306:	11 e0       	ldi	r17, 0x01	; 1
    3308:	6b 89       	ldd	r22, Y+19	; 0x13
    330a:	7c 89       	ldd	r23, Y+20	; 0x14
    330c:	8d 89       	ldd	r24, Y+21	; 0x15
    330e:	9e 89       	ldd	r25, Y+22	; 0x16
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    331c:	18 16       	cp	r1, r24
    331e:	0c f0       	brlt	.+2      	; 0x3322 <correct_right3+0x1b8>
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	11 23       	and	r17, r17
    3324:	61 f1       	breq	.+88     	; 0x337e <correct_right3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	6f 85       	ldd	r22, Y+15	; 0x0f
    3328:	78 89       	ldd	r23, Y+16	; 0x10
    332a:	89 89       	ldd	r24, Y+17	; 0x11
    332c:	9a 89       	ldd	r25, Y+18	; 0x12
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	98 8f       	std	Y+24, r25	; 0x18
    334c:	8f 8b       	std	Y+23, r24	; 0x17
    334e:	12 c0       	rjmp	.+36     	; 0x3374 <correct_right3+0x20a>
    3350:	80 e7       	ldi	r24, 0x70	; 112
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	9a 8f       	std	Y+26, r25	; 0x1a
    3356:	89 8f       	std	Y+25, r24	; 0x19
    3358:	89 8d       	ldd	r24, Y+25	; 0x19
    335a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    335c:	8c 01       	movw	r16, r24
    335e:	c8 01       	movw	r24, r16
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <correct_right3+0x1f6>
    3364:	8c 01       	movw	r16, r24
    3366:	1a 8f       	std	Y+26, r17	; 0x1a
    3368:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	98 8f       	std	Y+24, r25	; 0x18
    3372:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	51 f7       	brne	.-44     	; 0x3350 <correct_right3+0x1e6>
    337c:	17 c0       	rjmp	.+46     	; 0x33ac <correct_right3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	6b 89       	ldd	r22, Y+19	; 0x13
    3380:	7c 89       	ldd	r23, Y+20	; 0x14
    3382:	8d 89       	ldd	r24, Y+21	; 0x15
    3384:	9e 89       	ldd	r25, Y+22	; 0x16
    3386:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	98 8f       	std	Y+24, r25	; 0x18
    3390:	8f 8b       	std	Y+23, r24	; 0x17
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	9c 8f       	std	Y+28, r25	; 0x1c
    3398:	8b 8f       	std	Y+27, r24	; 0x1b
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	8c 01       	movw	r16, r24
    33a0:	c8 01       	movw	r24, r16
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <correct_right3+0x238>
    33a6:	8c 01       	movw	r16, r24
    33a8:	1c 8f       	std	Y+28, r17	; 0x1c
    33aa:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    33ac:	88 e2       	ldi	r24, 0x28	; 40
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    33b4:	6c 96       	adiw	r28, 0x1c	; 28
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <correct_left3>:
					Rotate 180 degrees in the counter-clockwise direction
* Example Call:		correct_left3();
*/

void correct_left3()
{   
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	6c 97       	sbiw	r28, 0x1c	; 28
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
	stop();
    33e2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 ea       	ldi	r26, 0xA0	; 160
    33ec:	b1 e4       	ldi	r27, 0x41	; 65
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	ab 83       	std	Y+3, r26	; 0x03
    33f4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	69 81       	ldd	r22, Y+1	; 0x01
    33f8:	7a 81       	ldd	r23, Y+2	; 0x02
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	26 e6       	ldi	r18, 0x66	; 102
    3400:	36 e6       	ldi	r19, 0x66	; 102
    3402:	46 e6       	ldi	r20, 0x66	; 102
    3404:	55 e4       	ldi	r21, 0x45	; 69
    3406:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	af 83       	std	Y+7, r26	; 0x07
    3414:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3416:	11 e0       	ldi	r17, 0x01	; 1
    3418:	6d 81       	ldd	r22, Y+5	; 0x05
    341a:	7e 81       	ldd	r23, Y+6	; 0x06
    341c:	8f 81       	ldd	r24, Y+7	; 0x07
    341e:	98 85       	ldd	r25, Y+8	; 0x08
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e8       	ldi	r20, 0x80	; 128
    3426:	5f e3       	ldi	r21, 0x3F	; 63
    3428:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    342c:	88 23       	and	r24, r24
    342e:	0c f0       	brlt	.+2      	; 0x3432 <correct_left3+0x68>
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	11 23       	and	r17, r17
    3434:	29 f0       	breq	.+10     	; 0x3440 <correct_left3+0x76>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9a 87       	std	Y+10, r25	; 0x0a
    343c:	89 87       	std	Y+9, r24	; 0x09
    343e:	46 c0       	rjmp	.+140    	; 0x34cc <correct_left3+0x102>
	else if (__tmp > 65535)
    3440:	11 e0       	ldi	r17, 0x01	; 1
    3442:	6d 81       	ldd	r22, Y+5	; 0x05
    3444:	7e 81       	ldd	r23, Y+6	; 0x06
    3446:	8f 81       	ldd	r24, Y+7	; 0x07
    3448:	98 85       	ldd	r25, Y+8	; 0x08
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    3456:	18 16       	cp	r1, r24
    3458:	0c f0       	brlt	.+2      	; 0x345c <correct_left3+0x92>
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	11 23       	and	r17, r17
    345e:	61 f1       	breq	.+88     	; 0x34b8 <correct_left3+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	69 81       	ldd	r22, Y+1	; 0x01
    3462:	7a 81       	ldd	r23, Y+2	; 0x02
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9a 87       	std	Y+10, r25	; 0x0a
    3486:	89 87       	std	Y+9, r24	; 0x09
    3488:	12 c0       	rjmp	.+36     	; 0x34ae <correct_left3+0xe4>
    348a:	80 e7       	ldi	r24, 0x70	; 112
    348c:	91 e0       	ldi	r25, 0x01	; 1
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	8b 87       	std	Y+11, r24	; 0x0b
    3492:	8b 85       	ldd	r24, Y+11	; 0x0b
    3494:	9c 85       	ldd	r25, Y+12	; 0x0c
    3496:	8c 01       	movw	r16, r24
    3498:	c8 01       	movw	r24, r16
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <correct_left3+0xd0>
    349e:	8c 01       	movw	r16, r24
    34a0:	1c 87       	std	Y+12, r17	; 0x0c
    34a2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9a 87       	std	Y+10, r25	; 0x0a
    34ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	51 f7       	brne	.-44     	; 0x348a <correct_left3+0xc0>
    34b6:	17 c0       	rjmp	.+46     	; 0x34e6 <correct_left3+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6d 81       	ldd	r22, Y+5	; 0x05
    34ba:	7e 81       	ldd	r23, Y+6	; 0x06
    34bc:	8f 81       	ldd	r24, Y+7	; 0x07
    34be:	98 85       	ldd	r25, Y+8	; 0x08
    34c0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a 87       	std	Y+10, r25	; 0x0a
    34ca:	89 87       	std	Y+9, r24	; 0x09
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	9e 87       	std	Y+14, r25	; 0x0e
    34d2:	8d 87       	std	Y+13, r24	; 0x0d
    34d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d8:	8c 01       	movw	r16, r24
    34da:	c8 01       	movw	r24, r16
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <correct_left3+0x112>
    34e0:	8c 01       	movw	r16, r24
    34e2:	1e 87       	std	Y+14, r17	; 0x0e
    34e4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	left_degrees(160);
    34e6:	80 ea       	ldi	r24, 0xA0	; 160
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
	left();
    34ee:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <left>
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <correct_left3+0x12c>
		if(Center_white_line>25)
		{
			stop();
			break;
		}
	}
    34f4:	00 00       	nop
	_delay_ms(20);
	left_degrees(160);
	left();
	while(1)
	{
		read_line();
    34f6:	87 e9       	ldi	r24, 0x97	; 151
    34f8:	9c e2       	ldi	r25, 0x2C	; 44
    34fa:	fc 01       	movw	r30, r24
    34fc:	19 95       	eicall
		if(Center_white_line>25)
    34fe:	80 91 33 03 	lds	r24, 0x0333
    3502:	8a 31       	cpi	r24, 0x1A	; 26
    3504:	b8 f3       	brcs	.-18     	; 0x34f4 <correct_left3+0x12a>
		{
			stop();
    3506:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			break;
    350a:	00 00       	nop
		}
	}
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	a0 e2       	ldi	r26, 0x20	; 32
    3512:	b2 e4       	ldi	r27, 0x42	; 66
    3514:	8f 87       	std	Y+15, r24	; 0x0f
    3516:	98 8b       	std	Y+16, r25	; 0x10
    3518:	a9 8b       	std	Y+17, r26	; 0x11
    351a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    351c:	6f 85       	ldd	r22, Y+15	; 0x0f
    351e:	78 89       	ldd	r23, Y+16	; 0x10
    3520:	89 89       	ldd	r24, Y+17	; 0x11
    3522:	9a 89       	ldd	r25, Y+18	; 0x12
    3524:	26 e6       	ldi	r18, 0x66	; 102
    3526:	36 e6       	ldi	r19, 0x66	; 102
    3528:	46 e6       	ldi	r20, 0x66	; 102
    352a:	55 e4       	ldi	r21, 0x45	; 69
    352c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	8b 8b       	std	Y+19, r24	; 0x13
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	ad 8b       	std	Y+21, r26	; 0x15
    353a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    353c:	11 e0       	ldi	r17, 0x01	; 1
    353e:	6b 89       	ldd	r22, Y+19	; 0x13
    3540:	7c 89       	ldd	r23, Y+20	; 0x14
    3542:	8d 89       	ldd	r24, Y+21	; 0x15
    3544:	9e 89       	ldd	r25, Y+22	; 0x16
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    3552:	88 23       	and	r24, r24
    3554:	0c f0       	brlt	.+2      	; 0x3558 <correct_left3+0x18e>
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	11 23       	and	r17, r17
    355a:	29 f0       	breq	.+10     	; 0x3566 <correct_left3+0x19c>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	98 8f       	std	Y+24, r25	; 0x18
    3562:	8f 8b       	std	Y+23, r24	; 0x17
    3564:	46 c0       	rjmp	.+140    	; 0x35f2 <correct_left3+0x228>
	else if (__tmp > 65535)
    3566:	11 e0       	ldi	r17, 0x01	; 1
    3568:	6b 89       	ldd	r22, Y+19	; 0x13
    356a:	7c 89       	ldd	r23, Y+20	; 0x14
    356c:	8d 89       	ldd	r24, Y+21	; 0x15
    356e:	9e 89       	ldd	r25, Y+22	; 0x16
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    357c:	18 16       	cp	r1, r24
    357e:	0c f0       	brlt	.+2      	; 0x3582 <correct_left3+0x1b8>
    3580:	10 e0       	ldi	r17, 0x00	; 0
    3582:	11 23       	and	r17, r17
    3584:	61 f1       	breq	.+88     	; 0x35de <correct_left3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3586:	6f 85       	ldd	r22, Y+15	; 0x0f
    3588:	78 89       	ldd	r23, Y+16	; 0x10
    358a:	89 89       	ldd	r24, Y+17	; 0x11
    358c:	9a 89       	ldd	r25, Y+18	; 0x12
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	98 8f       	std	Y+24, r25	; 0x18
    35ac:	8f 8b       	std	Y+23, r24	; 0x17
    35ae:	12 c0       	rjmp	.+36     	; 0x35d4 <correct_left3+0x20a>
    35b0:	80 e7       	ldi	r24, 0x70	; 112
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	9a 8f       	std	Y+26, r25	; 0x1a
    35b6:	89 8f       	std	Y+25, r24	; 0x19
    35b8:	89 8d       	ldd	r24, Y+25	; 0x19
    35ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35bc:	8c 01       	movw	r16, r24
    35be:	c8 01       	movw	r24, r16
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <correct_left3+0x1f6>
    35c4:	8c 01       	movw	r16, r24
    35c6:	1a 8f       	std	Y+26, r17	; 0x1a
    35c8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ca:	8f 89       	ldd	r24, Y+23	; 0x17
    35cc:	98 8d       	ldd	r25, Y+24	; 0x18
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	98 8f       	std	Y+24, r25	; 0x18
    35d2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d4:	8f 89       	ldd	r24, Y+23	; 0x17
    35d6:	98 8d       	ldd	r25, Y+24	; 0x18
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	51 f7       	brne	.-44     	; 0x35b0 <correct_left3+0x1e6>
    35dc:	17 c0       	rjmp	.+46     	; 0x360c <correct_left3+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35de:	6b 89       	ldd	r22, Y+19	; 0x13
    35e0:	7c 89       	ldd	r23, Y+20	; 0x14
    35e2:	8d 89       	ldd	r24, Y+21	; 0x15
    35e4:	9e 89       	ldd	r25, Y+22	; 0x16
    35e6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	98 8f       	std	Y+24, r25	; 0x18
    35f0:	8f 8b       	std	Y+23, r24	; 0x17
    35f2:	8f 89       	ldd	r24, Y+23	; 0x17
    35f4:	98 8d       	ldd	r25, Y+24	; 0x18
    35f6:	9c 8f       	std	Y+28, r25	; 0x1c
    35f8:	8b 8f       	std	Y+27, r24	; 0x1b
    35fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fe:	8c 01       	movw	r16, r24
    3600:	c8 01       	movw	r24, r16
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <correct_left3+0x238>
    3606:	8c 01       	movw	r16, r24
    3608:	1c 8f       	std	Y+28, r17	; 0x1c
    360a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(40);
	back_mm(40);
    360c:	88 e2       	ldi	r24, 0x28	; 40
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
}
    3614:	6c 96       	adiw	r28, 0x1c	; 28
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	08 95       	ret

0000362a <adc_pin_config>:

*/

void adc_pin_config(void)

{
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62

    DDRF = 0x00;
    3632:	80 e3       	ldi	r24, 0x30	; 48
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	fc 01       	movw	r30, r24
    3638:	10 82       	st	Z, r1

    PORTF = 0x00;
    363a:	81 e3       	ldi	r24, 0x31	; 49
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	fc 01       	movw	r30, r24
    3640:	10 82       	st	Z, r1

    DDRK = 0x00;
    3642:	87 e0       	ldi	r24, 0x07	; 7
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	fc 01       	movw	r30, r24
    3648:	10 82       	st	Z, r1

    PORTK = 0x00;
    364a:	88 e0       	ldi	r24, 0x08	; 8
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	fc 01       	movw	r30, r24
    3650:	10 82       	st	Z, r1

}
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	08 95       	ret

00003658 <adc_init>:

*/

void adc_init() 

{
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0x00;
    3660:	8a e7       	ldi	r24, 0x7A	; 122
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	fc 01       	movw	r30, r24
    3666:	10 82       	st	Z, r1

	ADCSRB = 0x00; //MUX5 = 0
    3668:	8b e7       	ldi	r24, 0x7B	; 123
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	fc 01       	movw	r30, r24
    366e:	10 82       	st	Z, r1

	ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    3670:	8c e7       	ldi	r24, 0x7C	; 124
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	20 e2       	ldi	r18, 0x20	; 32
    3676:	fc 01       	movw	r30, r24
    3678:	20 83       	st	Z, r18

	ACSR = 0x80;
    367a:	80 e5       	ldi	r24, 0x50	; 80
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	20 e8       	ldi	r18, 0x80	; 128
    3680:	fc 01       	movw	r30, r24
    3682:	20 83       	st	Z, r18

	ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    3684:	8a e7       	ldi	r24, 0x7A	; 122
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	26 e8       	ldi	r18, 0x86	; 134
    368a:	fc 01       	movw	r30, r24
    368c:	20 83       	st	Z, r18

}
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	08 95       	ret

00003694 <ADC_Conversion>:

*/

unsigned char ADC_Conversion(unsigned char Ch) 

{
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	0f 92       	push	r0
    369a:	0f 92       	push	r0
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	8a 83       	std	Y+2, r24	; 0x02

	unsigned char a;

	if (Ch > 7)
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	88 30       	cpi	r24, 0x08	; 8
    36a6:	28 f0       	brcs	.+10     	; 0x36b2 <ADC_Conversion+0x1e>

	{

		ADCSRB = 0x08;
    36a8:	8b e7       	ldi	r24, 0x7B	; 123
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	28 e0       	ldi	r18, 0x08	; 8
    36ae:	fc 01       	movw	r30, r24
    36b0:	20 83       	st	Z, r18

	}

	Ch = Ch & 0x07;
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	87 70       	andi	r24, 0x07	; 7
    36b6:	8a 83       	std	Y+2, r24	; 0x02

	ADMUX = 0x20 | Ch;
    36b8:	8c e7       	ldi	r24, 0x7C	; 124
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	2a 81       	ldd	r18, Y+2	; 0x02
    36be:	20 62       	ori	r18, 0x20	; 32
    36c0:	fc 01       	movw	r30, r24
    36c2:	20 83       	st	Z, r18

	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
    36c4:	8a e7       	ldi	r24, 0x7A	; 122
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	2a e7       	ldi	r18, 0x7A	; 122
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	f9 01       	movw	r30, r18
    36ce:	20 81       	ld	r18, Z
    36d0:	20 64       	ori	r18, 0x40	; 64
    36d2:	fc 01       	movw	r30, r24
    36d4:	20 83       	st	Z, r18

	while ((ADCSRA & 0x10) == 0); //Wait for conversion to complete
    36d6:	00 00       	nop
    36d8:	8a e7       	ldi	r24, 0x7A	; 122
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	80 81       	ld	r24, Z
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	80 71       	andi	r24, 0x10	; 16
    36e6:	90 70       	andi	r25, 0x00	; 0
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	b1 f3       	breq	.-20     	; 0x36d8 <ADC_Conversion+0x44>

	a = ADCH;
    36ec:	89 e7       	ldi	r24, 0x79	; 121
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	fc 01       	movw	r30, r24
    36f2:	80 81       	ld	r24, Z
    36f4:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA = ADCSRA | 0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    36f6:	8a e7       	ldi	r24, 0x7A	; 122
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	2a e7       	ldi	r18, 0x7A	; 122
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	f9 01       	movw	r30, r18
    3700:	20 81       	ld	r18, Z
    3702:	20 61       	ori	r18, 0x10	; 16
    3704:	fc 01       	movw	r30, r24
    3706:	20 83       	st	Z, r18

	ADCSRB = 0x00;
    3708:	8b e7       	ldi	r24, 0x7B	; 123
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	fc 01       	movw	r30, r24
    370e:	10 82       	st	Z, r1

	return a;
    3710:	89 81       	ldd	r24, Y+1	; 0x01

}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <print_sensor>:

*/

void print_sensor(char row, char coloumn, unsigned char channel)

 {
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	00 d0       	rcall	.+0      	; 0x3722 <print_sensor+0x6>
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	6a 83       	std	Y+2, r22	; 0x02
    372a:	4b 83       	std	Y+3, r20	; 0x03



	ADC_Value = ADC_Conversion(channel);
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    3732:	80 93 a5 04 	sts	0x04A5, r24

	lcd_print(row, coloumn, ADC_Value, 3);
    3736:	80 91 a5 04 	lds	r24, 0x04A5
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	6a 81       	ldd	r22, Y+2	; 0x02
    3742:	a9 01       	movw	r20, r18
    3744:	23 e0       	ldi	r18, 0x03	; 3
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <__vector_35>:

*/

ISR(TIMER3_OVF_vect)

{
    3758:	1f 92       	push	r1
    375a:	0f 92       	push	r0
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	0f 92       	push	r0
    3760:	00 90 5b 00 	lds	r0, 0x005B
    3764:	0f 92       	push	r0
    3766:	11 24       	eor	r1, r1
    3768:	2f 93       	push	r18
    376a:	3f 93       	push	r19
    376c:	4f 93       	push	r20
    376e:	5f 93       	push	r21
    3770:	6f 93       	push	r22
    3772:	7f 93       	push	r23
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	af 93       	push	r26
    377a:	bf 93       	push	r27
    377c:	ef 93       	push	r30
    377e:	ff 93       	push	r31
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62

    read_line();
    3788:	87 e9       	ldi	r24, 0x97	; 151
    378a:	9c e2       	ldi	r25, 0x2C	; 44
    378c:	fc 01       	movw	r30, r24
    378e:	19 95       	eicall

    line_conditions();
    3790:	8f e1       	ldi	r24, 0x1F	; 31
    3792:	9d e2       	ldi	r25, 0x2D	; 45
    3794:	fc 01       	movw	r30, r24
    3796:	19 95       	eicall

    TCNT3 = 0xFDC0;
    3798:	84 e9       	ldi	r24, 0x94	; 148
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	20 ec       	ldi	r18, 0xC0	; 192
    379e:	3d ef       	ldi	r19, 0xFD	; 253
    37a0:	fc 01       	movw	r30, r24
    37a2:	31 83       	std	Z+1, r19	; 0x01
    37a4:	20 83       	st	Z, r18

}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	ff 91       	pop	r31
    37ac:	ef 91       	pop	r30
    37ae:	bf 91       	pop	r27
    37b0:	af 91       	pop	r26
    37b2:	9f 91       	pop	r25
    37b4:	8f 91       	pop	r24
    37b6:	7f 91       	pop	r23
    37b8:	6f 91       	pop	r22
    37ba:	5f 91       	pop	r21
    37bc:	4f 91       	pop	r20
    37be:	3f 91       	pop	r19
    37c0:	2f 91       	pop	r18
    37c2:	0f 90       	pop	r0
    37c4:	00 92 5b 00 	sts	0x005B, r0
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_45>:

*/

ISR(TIMER4_OVF_vect)

{
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	00 90 5b 00 	lds	r0, 0x005B
    37de:	0f 92       	push	r0
    37e0:	11 24       	eor	r1, r1
    37e2:	2f 93       	push	r18
    37e4:	3f 93       	push	r19
    37e6:	4f 93       	push	r20
    37e8:	5f 93       	push	r21
    37ea:	6f 93       	push	r22
    37ec:	7f 93       	push	r23
    37ee:	8f 93       	push	r24
    37f0:	9f 93       	push	r25
    37f2:	af 93       	push	r26
    37f4:	bf 93       	push	r27
    37f6:	ef 93       	push	r30
    37f8:	ff 93       	push	r31
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62

    TCNT4 = 0xE980;
    3802:	84 ea       	ldi	r24, 0xA4	; 164
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	20 e8       	ldi	r18, 0x80	; 128
    3808:	39 ee       	ldi	r19, 0xE9	; 233
    380a:	fc 01       	movw	r30, r24
    380c:	31 83       	std	Z+1, r19	; 0x01
    380e:	20 83       	st	Z, r18

    t4_sec++; //Increment every 0.1 sec
    3810:	80 91 35 03 	lds	r24, 0x0335
    3814:	90 91 36 03 	lds	r25, 0x0336
    3818:	01 96       	adiw	r24, 0x01	; 1
    381a:	90 93 36 03 	sts	0x0336, r25
    381e:	80 93 35 03 	sts	0x0335, r24



    if (t4_sec == t4_count && t4_flag == 1)
    3822:	20 91 35 03 	lds	r18, 0x0335
    3826:	30 91 36 03 	lds	r19, 0x0336
    382a:	80 91 aa 04 	lds	r24, 0x04AA
    382e:	90 91 ab 04 	lds	r25, 0x04AB
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	59 f4       	brne	.+22     	; 0x384e <__vector_45+0x7c>
    3838:	80 91 37 03 	lds	r24, 0x0337
    383c:	90 91 38 03 	lds	r25, 0x0338
    3840:	81 30       	cpi	r24, 0x01	; 1
    3842:	91 05       	cpc	r25, r1
    3844:	21 f4       	brne	.+8      	; 0x384e <__vector_45+0x7c>

        stop_timer4();
    3846:	80 e6       	ldi	r24, 0x60	; 96
    3848:	9c e1       	ldi	r25, 0x1C	; 28
    384a:	fc 01       	movw	r30, r24
    384c:	19 95       	eicall

}
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	ff 91       	pop	r31
    3854:	ef 91       	pop	r30
    3856:	bf 91       	pop	r27
    3858:	af 91       	pop	r26
    385a:	9f 91       	pop	r25
    385c:	8f 91       	pop	r24
    385e:	7f 91       	pop	r23
    3860:	6f 91       	pop	r22
    3862:	5f 91       	pop	r21
    3864:	4f 91       	pop	r20
    3866:	3f 91       	pop	r19
    3868:	2f 91       	pop	r18
    386a:	0f 90       	pop	r0
    386c:	00 92 5b 00 	sts	0x005B, r0
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <start_timer4>:

*/

void start_timer4(int count)

{
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	0f 92       	push	r0
    3880:	0f 92       	push	r0
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01

    t4_flag = 1; //Indicate timer 4 is enabled
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	90 93 38 03 	sts	0x0338, r25
    3892:	80 93 37 03 	sts	0x0337, r24

    t4_sec = 0;
    3896:	10 92 36 03 	sts	0x0336, r1
    389a:	10 92 35 03 	sts	0x0335, r1

    t4_count = count + 1;
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	90 93 ab 04 	sts	0x04AB, r25
    38a8:	80 93 aa 04 	sts	0x04AA, r24

    TIMSK4 = 0x01; //Timer 4 overflow interrupt enable
    38ac:	82 e7       	ldi	r24, 0x72	; 114
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	21 e0       	ldi	r18, 0x01	; 1
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 83       	st	Z, r18

}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <stop_timer4>:

*/

void stop_timer4()

{
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62

	t4_flag = 0;
    38c8:	10 92 38 03 	sts	0x0338, r1
    38cc:	10 92 37 03 	sts	0x0337, r1

	t4_sec = 0;
    38d0:	10 92 36 03 	sts	0x0336, r1
    38d4:	10 92 35 03 	sts	0x0335, r1

	TIMSK4 = 0x00; //Timer4 overflow interrupt disable
    38d8:	82 e7       	ldi	r24, 0x72	; 114
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	fc 01       	movw	r30, r24
    38de:	10 82       	st	Z, r1

}
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <servo1_pin_config>:
* Output: 			None
* Logic: 			Configure PORTB 5 pin for servo motor 1 operation
* Example Call:		servo1_pin_config();
*/
void servo1_pin_config (void)
{
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    38ee:	84 e2       	ldi	r24, 0x24	; 36
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	24 e2       	ldi	r18, 0x24	; 36
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	f9 01       	movw	r30, r18
    38f8:	20 81       	ld	r18, Z
    38fa:	20 62       	ori	r18, 0x20	; 32
    38fc:	fc 01       	movw	r30, r24
    38fe:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    3900:	85 e2       	ldi	r24, 0x25	; 37
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	25 e2       	ldi	r18, 0x25	; 37
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	f9 01       	movw	r30, r18
    390a:	20 81       	ld	r18, Z
    390c:	20 62       	ori	r18, 0x20	; 32
    390e:	fc 01       	movw	r30, r24
    3910:	20 83       	st	Z, r18
}
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	08 95       	ret

00003918 <servo2_pin_config>:
* Output: 			None
* Logic: 			Configure PORTB 6 pin for servo motor 2 operation
* Example Call:		servo2_pin_config();
*/
void servo2_pin_config (void)
{
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    3920:	84 e2       	ldi	r24, 0x24	; 36
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	24 e2       	ldi	r18, 0x24	; 36
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	f9 01       	movw	r30, r18
    392a:	20 81       	ld	r18, Z
    392c:	20 64       	ori	r18, 0x40	; 64
    392e:	fc 01       	movw	r30, r24
    3930:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    3932:	85 e2       	ldi	r24, 0x25	; 37
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	25 e2       	ldi	r18, 0x25	; 37
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	f9 01       	movw	r30, r18
    393c:	20 81       	ld	r18, Z
    393e:	20 64       	ori	r18, 0x40	; 64
    3940:	fc 01       	movw	r30, r24
    3942:	20 83       	st	Z, r18
}
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	08 95       	ret

0000394a <servo3_pin_config>:
* Output: 			None
* Logic: 			Configure PORTB 7 pin for servo motor 3 operation
* Example Call:		servo3_pin_config();
*/
void servo3_pin_config (void)
{
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    3952:	84 e2       	ldi	r24, 0x24	; 36
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	24 e2       	ldi	r18, 0x24	; 36
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	f9 01       	movw	r30, r18
    395c:	20 81       	ld	r18, Z
    395e:	20 68       	ori	r18, 0x80	; 128
    3960:	fc 01       	movw	r30, r24
    3962:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    3964:	85 e2       	ldi	r24, 0x25	; 37
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	25 e2       	ldi	r18, 0x25	; 37
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	f9 01       	movw	r30, r18
    396e:	20 81       	ld	r18, Z
    3970:	20 68       	ori	r18, 0x80	; 128
    3972:	fc 01       	movw	r30, r24
    3974:	20 83       	st	Z, r18
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	08 95       	ret

0000397c <servo_1>:
* Output: 			None
* Logic: 			Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
* Example Call:		servo_1(60);
*/
void servo_1(unsigned char degrees)  
{
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	00 d0       	rcall	.+0      	; 0x3986 <servo_1+0xa>
    3986:	0f 92       	push	r0
    3988:	0f 92       	push	r0
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	dc 01       	movw	r26, r24
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	9a 83       	std	Y+2, r25	; 0x02
    399a:	ab 83       	std	Y+3, r26	; 0x03
    399c:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees * 0.512) + 34.56;
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	a0 e0       	ldi	r26, 0x00	; 0
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 f9 9c 	call	0x139f2	; 0x139f2 <__floatunsisf>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	2f e6       	ldi	r18, 0x6F	; 111
    39ba:	32 e1       	ldi	r19, 0x12	; 18
    39bc:	43 e0       	ldi	r20, 0x03	; 3
    39be:	5f e3       	ldi	r21, 0x3F	; 63
    39c0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	21 e7       	ldi	r18, 0x71	; 113
    39ce:	3d e3       	ldi	r19, 0x3D	; 61
    39d0:	4a e0       	ldi	r20, 0x0A	; 10
    39d2:	52 e4       	ldi	r21, 0x42	; 66
    39d4:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <__addsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	ab 83       	std	Y+3, r26	; 0x03
    39e2:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    39e4:	89 e8       	ldi	r24, 0x89	; 137
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	fc 01       	movw	r30, r24
    39ea:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    39ec:	08 e8       	ldi	r16, 0x88	; 136
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	69 81       	ldd	r22, Y+1	; 0x01
    39f2:	7a 81       	ldd	r23, Y+2	; 0x02
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	9c 81       	ldd	r25, Y+4	; 0x04
    39f8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	f8 01       	movw	r30, r16
    3a02:	80 83       	st	Z, r24
}
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <servo_2>:
* Output: 			None
* Logic: 			Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
* Example Call:		servo_2(100);
*/
void servo_2(unsigned char degrees)
{
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <servo_2+0xa>
    3a22:	0f 92       	push	r0
    3a24:	0f 92       	push	r0
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	dc 01       	movw	r26, r24
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	ab 83       	std	Y+3, r26	; 0x03
    3a38:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees * 0.512) + 34.56;
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 f9 9c 	call	0x139f2	; 0x139f2 <__floatunsisf>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	2f e6       	ldi	r18, 0x6F	; 111
    3a56:	32 e1       	ldi	r19, 0x12	; 18
    3a58:	43 e0       	ldi	r20, 0x03	; 3
    3a5a:	5f e3       	ldi	r21, 0x3F	; 63
    3a5c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	21 e7       	ldi	r18, 0x71	; 113
    3a6a:	3d e3       	ldi	r19, 0x3D	; 61
    3a6c:	4a e0       	ldi	r20, 0x0A	; 10
    3a6e:	52 e4       	ldi	r21, 0x42	; 66
    3a70:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <__addsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	ab 83       	std	Y+3, r26	; 0x03
    3a7e:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    3a80:	8b e8       	ldi	r24, 0x8B	; 139
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	fc 01       	movw	r30, r24
    3a86:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    3a88:	0a e8       	ldi	r16, 0x8A	; 138
    3a8a:	10 e0       	ldi	r17, 0x00	; 0
    3a8c:	69 81       	ldd	r22, Y+1	; 0x01
    3a8e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	80 83       	st	Z, r24
}
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	08 95       	ret

00003ab4 <servo_3>:
* Output: 			None
* Logic: 			Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
* Example Call:		servo_3(160);
*/
void servo_3(unsigned char degrees)
{
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <servo_3+0xa>
    3abe:	0f 92       	push	r0
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	dc 01       	movw	r26, r24
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	ab 83       	std	Y+3, r26	; 0x03
    3ad4:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees * 0.512) + 34.56;
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	a0 e0       	ldi	r26, 0x00	; 0
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 f9 9c 	call	0x139f2	; 0x139f2 <__floatunsisf>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	2f e6       	ldi	r18, 0x6F	; 111
    3af2:	32 e1       	ldi	r19, 0x12	; 18
    3af4:	43 e0       	ldi	r20, 0x03	; 3
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	bc 01       	movw	r22, r24
    3b02:	cd 01       	movw	r24, r26
    3b04:	21 e7       	ldi	r18, 0x71	; 113
    3b06:	3d e3       	ldi	r19, 0x3D	; 61
    3b08:	4a e0       	ldi	r20, 0x0A	; 10
    3b0a:	52 e4       	ldi	r21, 0x42	; 66
    3b0c:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <__addsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	ab 83       	std	Y+3, r26	; 0x03
    3b1a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    3b1c:	8d e8       	ldi	r24, 0x8D	; 141
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	fc 01       	movw	r30, r24
    3b22:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    3b24:	0c e8       	ldi	r16, 0x8C	; 140
    3b26:	10 e0       	ldi	r17, 0x00	; 0
    3b28:	69 81       	ldd	r22, Y+1	; 0x01
    3b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
}
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	08 95       	ret

00003b50 <servo_1_free>:
* Output: 			None
* Logic: 			Makes servo 1 free rotating
* Example Call:		servo_1_free():
*/
void servo_1_free (void) //makes servo 1 free rotating
{
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    3b58:	89 e8       	ldi	r24, 0x89	; 137
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	23 e0       	ldi	r18, 0x03	; 3
    3b5e:	fc 01       	movw	r30, r24
    3b60:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    3b62:	88 e8       	ldi	r24, 0x88	; 136
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	2f ef       	ldi	r18, 0xFF	; 255
    3b68:	fc 01       	movw	r30, r24
    3b6a:	20 83       	st	Z, r18
}
    3b6c:	df 91       	pop	r29
    3b6e:	cf 91       	pop	r28
    3b70:	08 95       	ret

00003b72 <servo_2_free>:
* Output: 			None
* Logic: 			Makes servo 2 free rotating
* Example Call:		servo_2_free();
*/
void servo_2_free (void) //makes servo 2 free rotating
{
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    3b7a:	8b e8       	ldi	r24, 0x8B	; 139
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	23 e0       	ldi	r18, 0x03	; 3
    3b80:	fc 01       	movw	r30, r24
    3b82:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    3b84:	8a e8       	ldi	r24, 0x8A	; 138
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	2f ef       	ldi	r18, 0xFF	; 255
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	20 83       	st	Z, r18
}
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <servo_3_free>:
* Output: 			None
* Logic: 			Makes servo 3 free rotating
* Example Call:		servo_3_free();
*/
void servo_3_free (void) //makes servo 3 free rotating
{
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    3b9c:	8d e8       	ldi	r24, 0x8D	; 141
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	23 e0       	ldi	r18, 0x03	; 3
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    3ba6:	8c e8       	ldi	r24, 0x8C	; 140
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	2f ef       	ldi	r18, 0xFF	; 255
    3bac:	fc 01       	movw	r30, r24
    3bae:	20 83       	st	Z, r18
} 
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <gripper_open>:
*Output:             None
*Logic:              To open the gripper 
*Example Call:       gripper_open();
*/
void gripper_open()
{
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	6c 97       	sbiw	r28, 0x1c	; 28
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
	for(jj=10;jj<55;jj++)
    3bce:	8a e0       	ldi	r24, 0x0A	; 10
    3bd0:	80 93 3a 03 	sts	0x033A, r24
    3bd4:	89 c0       	rjmp	.+274    	; 0x3ce8 <gripper_open+0x132>
	{
		servo_3(jj);
    3bd6:	80 91 3a 03 	lds	r24, 0x033A
    3bda:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	a0 e2       	ldi	r26, 0x20	; 32
    3be4:	b1 e4       	ldi	r27, 0x41	; 65
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	ab 83       	std	Y+3, r26	; 0x03
    3bec:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bee:	69 81       	ldd	r22, Y+1	; 0x01
    3bf0:	7a 81       	ldd	r23, Y+2	; 0x02
    3bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf6:	26 e6       	ldi	r18, 0x66	; 102
    3bf8:	36 e6       	ldi	r19, 0x66	; 102
    3bfa:	46 e6       	ldi	r20, 0x66	; 102
    3bfc:	55 e4       	ldi	r21, 0x45	; 69
    3bfe:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	8d 83       	std	Y+5, r24	; 0x05
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	af 83       	std	Y+7, r26	; 0x07
    3c0c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3c0e:	11 e0       	ldi	r17, 0x01	; 1
    3c10:	6d 81       	ldd	r22, Y+5	; 0x05
    3c12:	7e 81       	ldd	r23, Y+6	; 0x06
    3c14:	8f 81       	ldd	r24, Y+7	; 0x07
    3c16:	98 85       	ldd	r25, Y+8	; 0x08
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e8       	ldi	r20, 0x80	; 128
    3c1e:	5f e3       	ldi	r21, 0x3F	; 63
    3c20:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    3c24:	88 23       	and	r24, r24
    3c26:	0c f0       	brlt	.+2      	; 0x3c2a <gripper_open+0x74>
    3c28:	10 e0       	ldi	r17, 0x00	; 0
    3c2a:	11 23       	and	r17, r17
    3c2c:	29 f0       	breq	.+10     	; 0x3c38 <gripper_open+0x82>
		__ticks = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9a 87       	std	Y+10, r25	; 0x0a
    3c34:	89 87       	std	Y+9, r24	; 0x09
    3c36:	46 c0       	rjmp	.+140    	; 0x3cc4 <gripper_open+0x10e>
	else if (__tmp > 65535)
    3c38:	11 e0       	ldi	r17, 0x01	; 1
    3c3a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c3c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c40:	98 85       	ldd	r25, Y+8	; 0x08
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	3f ef       	ldi	r19, 0xFF	; 255
    3c46:	4f e7       	ldi	r20, 0x7F	; 127
    3c48:	57 e4       	ldi	r21, 0x47	; 71
    3c4a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    3c4e:	18 16       	cp	r1, r24
    3c50:	0c f0       	brlt	.+2      	; 0x3c54 <gripper_open+0x9e>
    3c52:	10 e0       	ldi	r17, 0x00	; 0
    3c54:	11 23       	and	r17, r17
    3c56:	61 f1       	breq	.+88     	; 0x3cb0 <gripper_open+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c58:	69 81       	ldd	r22, Y+1	; 0x01
    3c5a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e2       	ldi	r20, 0x20	; 32
    3c66:	51 e4       	ldi	r21, 0x41	; 65
    3c68:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9a 87       	std	Y+10, r25	; 0x0a
    3c7e:	89 87       	std	Y+9, r24	; 0x09
    3c80:	12 c0       	rjmp	.+36     	; 0x3ca6 <gripper_open+0xf0>
    3c82:	80 e7       	ldi	r24, 0x70	; 112
    3c84:	91 e0       	ldi	r25, 0x01	; 1
    3c86:	9c 87       	std	Y+12, r25	; 0x0c
    3c88:	8b 87       	std	Y+11, r24	; 0x0b
    3c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8e:	8c 01       	movw	r16, r24
    3c90:	c8 01       	movw	r24, r16
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <gripper_open+0xdc>
    3c96:	8c 01       	movw	r16, r24
    3c98:	1c 87       	std	Y+12, r17	; 0x0c
    3c9a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9c:	89 85       	ldd	r24, Y+9	; 0x09
    3c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	9a 87       	std	Y+10, r25	; 0x0a
    3ca4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	51 f7       	brne	.-44     	; 0x3c82 <gripper_open+0xcc>
    3cae:	17 c0       	rjmp	.+46     	; 0x3cde <gripper_open+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	6d 81       	ldd	r22, Y+5	; 0x05
    3cb2:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb6:	98 85       	ldd	r25, Y+8	; 0x08
    3cb8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9a 87       	std	Y+10, r25	; 0x0a
    3cc2:	89 87       	std	Y+9, r24	; 0x09
    3cc4:	89 85       	ldd	r24, Y+9	; 0x09
    3cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc8:	9e 87       	std	Y+14, r25	; 0x0e
    3cca:	8d 87       	std	Y+13, r24	; 0x0d
    3ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd0:	8c 01       	movw	r16, r24
    3cd2:	c8 01       	movw	r24, r16
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <gripper_open+0x11e>
    3cd8:	8c 01       	movw	r16, r24
    3cda:	1e 87       	std	Y+14, r17	; 0x0e
    3cdc:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To open the gripper 
*Example Call:       gripper_open();
*/
void gripper_open()
{
	for(jj=10;jj<55;jj++)
    3cde:	80 91 3a 03 	lds	r24, 0x033A
    3ce2:	8f 5f       	subi	r24, 0xFF	; 255
    3ce4:	80 93 3a 03 	sts	0x033A, r24
    3ce8:	80 91 3a 03 	lds	r24, 0x033A
    3cec:	87 33       	cpi	r24, 0x37	; 55
    3cee:	0c f4       	brge	.+2      	; 0x3cf2 <gripper_open+0x13c>
    3cf0:	72 cf       	rjmp	.-284    	; 0x3bd6 <gripper_open+0x20>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	a8 e4       	ldi	r26, 0x48	; 72
    3cf8:	b3 e4       	ldi	r27, 0x43	; 67
    3cfa:	8f 87       	std	Y+15, r24	; 0x0f
    3cfc:	98 8b       	std	Y+16, r25	; 0x10
    3cfe:	a9 8b       	std	Y+17, r26	; 0x11
    3d00:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d04:	78 89       	ldd	r23, Y+16	; 0x10
    3d06:	89 89       	ldd	r24, Y+17	; 0x11
    3d08:	9a 89       	ldd	r25, Y+18	; 0x12
    3d0a:	26 e6       	ldi	r18, 0x66	; 102
    3d0c:	36 e6       	ldi	r19, 0x66	; 102
    3d0e:	46 e6       	ldi	r20, 0x66	; 102
    3d10:	55 e4       	ldi	r21, 0x45	; 69
    3d12:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8b 8b       	std	Y+19, r24	; 0x13
    3d1c:	9c 8b       	std	Y+20, r25	; 0x14
    3d1e:	ad 8b       	std	Y+21, r26	; 0x15
    3d20:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3d22:	11 e0       	ldi	r17, 0x01	; 1
    3d24:	6b 89       	ldd	r22, Y+19	; 0x13
    3d26:	7c 89       	ldd	r23, Y+20	; 0x14
    3d28:	8d 89       	ldd	r24, Y+21	; 0x15
    3d2a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	40 e8       	ldi	r20, 0x80	; 128
    3d32:	5f e3       	ldi	r21, 0x3F	; 63
    3d34:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    3d38:	88 23       	and	r24, r24
    3d3a:	0c f0       	brlt	.+2      	; 0x3d3e <gripper_open+0x188>
    3d3c:	10 e0       	ldi	r17, 0x00	; 0
    3d3e:	11 23       	and	r17, r17
    3d40:	29 f0       	breq	.+10     	; 0x3d4c <gripper_open+0x196>
		__ticks = 1;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	98 8f       	std	Y+24, r25	; 0x18
    3d48:	8f 8b       	std	Y+23, r24	; 0x17
    3d4a:	46 c0       	rjmp	.+140    	; 0x3dd8 <gripper_open+0x222>
	else if (__tmp > 65535)
    3d4c:	11 e0       	ldi	r17, 0x01	; 1
    3d4e:	6b 89       	ldd	r22, Y+19	; 0x13
    3d50:	7c 89       	ldd	r23, Y+20	; 0x14
    3d52:	8d 89       	ldd	r24, Y+21	; 0x15
    3d54:	9e 89       	ldd	r25, Y+22	; 0x16
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	3f ef       	ldi	r19, 0xFF	; 255
    3d5a:	4f e7       	ldi	r20, 0x7F	; 127
    3d5c:	57 e4       	ldi	r21, 0x47	; 71
    3d5e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    3d62:	18 16       	cp	r1, r24
    3d64:	0c f0       	brlt	.+2      	; 0x3d68 <gripper_open+0x1b2>
    3d66:	10 e0       	ldi	r17, 0x00	; 0
    3d68:	11 23       	and	r17, r17
    3d6a:	61 f1       	breq	.+88     	; 0x3dc4 <gripper_open+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6c:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d6e:	78 89       	ldd	r23, Y+16	; 0x10
    3d70:	89 89       	ldd	r24, Y+17	; 0x11
    3d72:	9a 89       	ldd	r25, Y+18	; 0x12
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e2       	ldi	r20, 0x20	; 32
    3d7a:	51 e4       	ldi	r21, 0x41	; 65
    3d7c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	98 8f       	std	Y+24, r25	; 0x18
    3d92:	8f 8b       	std	Y+23, r24	; 0x17
    3d94:	12 c0       	rjmp	.+36     	; 0x3dba <gripper_open+0x204>
    3d96:	80 e7       	ldi	r24, 0x70	; 112
    3d98:	91 e0       	ldi	r25, 0x01	; 1
    3d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d9c:	89 8f       	std	Y+25, r24	; 0x19
    3d9e:	89 8d       	ldd	r24, Y+25	; 0x19
    3da0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3da2:	8c 01       	movw	r16, r24
    3da4:	c8 01       	movw	r24, r16
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <gripper_open+0x1f0>
    3daa:	8c 01       	movw	r16, r24
    3dac:	1a 8f       	std	Y+26, r17	; 0x1a
    3dae:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db0:	8f 89       	ldd	r24, Y+23	; 0x17
    3db2:	98 8d       	ldd	r25, Y+24	; 0x18
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	98 8f       	std	Y+24, r25	; 0x18
    3db8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dba:	8f 89       	ldd	r24, Y+23	; 0x17
    3dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	51 f7       	brne	.-44     	; 0x3d96 <gripper_open+0x1e0>
    3dc2:	17 c0       	rjmp	.+46     	; 0x3df2 <gripper_open+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc4:	6b 89       	ldd	r22, Y+19	; 0x13
    3dc6:	7c 89       	ldd	r23, Y+20	; 0x14
    3dc8:	8d 89       	ldd	r24, Y+21	; 0x15
    3dca:	9e 89       	ldd	r25, Y+22	; 0x16
    3dcc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	98 8f       	std	Y+24, r25	; 0x18
    3dd6:	8f 8b       	std	Y+23, r24	; 0x17
    3dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dda:	98 8d       	ldd	r25, Y+24	; 0x18
    3ddc:	9c 8f       	std	Y+28, r25	; 0x1c
    3dde:	8b 8f       	std	Y+27, r24	; 0x1b
    3de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3de4:	8c 01       	movw	r16, r24
    3de6:	c8 01       	movw	r24, r16
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <gripper_open+0x232>
    3dec:	8c 01       	movw	r16, r24
    3dee:	1c 8f       	std	Y+28, r17	; 0x1c
    3df0:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_3(jj);
		_delay_ms(10);
	}
	_delay_ms(200);
}
    3df2:	6c 96       	adiw	r28, 0x1c	; 28
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	df 91       	pop	r29
    3e00:	cf 91       	pop	r28
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	08 95       	ret

00003e08 <gripper_close>:
*Output:             None
*Logic:              To close the gripper 
*Example Call:       gripper_close();
*/
void gripper_close()
{
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	6c 97       	sbiw	r28, 0x1c	; 28
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
	for(ii=55;ii>10;ii--)
    3e20:	87 e3       	ldi	r24, 0x37	; 55
    3e22:	80 93 39 03 	sts	0x0339, r24
    3e26:	89 c0       	rjmp	.+274    	; 0x3f3a <gripper_close+0x132>
	{
		servo_3(ii);
    3e28:	80 91 39 03 	lds	r24, 0x0339
    3e2c:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <servo_3>
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	a0 e2       	ldi	r26, 0x20	; 32
    3e36:	b1 e4       	ldi	r27, 0x41	; 65
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	9a 83       	std	Y+2, r25	; 0x02
    3e3c:	ab 83       	std	Y+3, r26	; 0x03
    3e3e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e40:	69 81       	ldd	r22, Y+1	; 0x01
    3e42:	7a 81       	ldd	r23, Y+2	; 0x02
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	9c 81       	ldd	r25, Y+4	; 0x04
    3e48:	26 e6       	ldi	r18, 0x66	; 102
    3e4a:	36 e6       	ldi	r19, 0x66	; 102
    3e4c:	46 e6       	ldi	r20, 0x66	; 102
    3e4e:	55 e4       	ldi	r21, 0x45	; 69
    3e50:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	af 83       	std	Y+7, r26	; 0x07
    3e5e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3e60:	11 e0       	ldi	r17, 0x01	; 1
    3e62:	6d 81       	ldd	r22, Y+5	; 0x05
    3e64:	7e 81       	ldd	r23, Y+6	; 0x06
    3e66:	8f 81       	ldd	r24, Y+7	; 0x07
    3e68:	98 85       	ldd	r25, Y+8	; 0x08
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e8       	ldi	r20, 0x80	; 128
    3e70:	5f e3       	ldi	r21, 0x3F	; 63
    3e72:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    3e76:	88 23       	and	r24, r24
    3e78:	0c f0       	brlt	.+2      	; 0x3e7c <gripper_close+0x74>
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
    3e7c:	11 23       	and	r17, r17
    3e7e:	29 f0       	breq	.+10     	; 0x3e8a <gripper_close+0x82>
		__ticks = 1;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	9a 87       	std	Y+10, r25	; 0x0a
    3e86:	89 87       	std	Y+9, r24	; 0x09
    3e88:	46 c0       	rjmp	.+140    	; 0x3f16 <gripper_close+0x10e>
	else if (__tmp > 65535)
    3e8a:	11 e0       	ldi	r17, 0x01	; 1
    3e8c:	6d 81       	ldd	r22, Y+5	; 0x05
    3e8e:	7e 81       	ldd	r23, Y+6	; 0x06
    3e90:	8f 81       	ldd	r24, Y+7	; 0x07
    3e92:	98 85       	ldd	r25, Y+8	; 0x08
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	3f ef       	ldi	r19, 0xFF	; 255
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	57 e4       	ldi	r21, 0x47	; 71
    3e9c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	0c f0       	brlt	.+2      	; 0x3ea6 <gripper_close+0x9e>
    3ea4:	10 e0       	ldi	r17, 0x00	; 0
    3ea6:	11 23       	and	r17, r17
    3ea8:	61 f1       	breq	.+88     	; 0x3f02 <gripper_close+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eaa:	69 81       	ldd	r22, Y+1	; 0x01
    3eac:	7a 81       	ldd	r23, Y+2	; 0x02
    3eae:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	40 e2       	ldi	r20, 0x20	; 32
    3eb8:	51 e4       	ldi	r21, 0x41	; 65
    3eba:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	bc 01       	movw	r22, r24
    3ec4:	cd 01       	movw	r24, r26
    3ec6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	9a 87       	std	Y+10, r25	; 0x0a
    3ed0:	89 87       	std	Y+9, r24	; 0x09
    3ed2:	12 c0       	rjmp	.+36     	; 0x3ef8 <gripper_close+0xf0>
    3ed4:	80 e7       	ldi	r24, 0x70	; 112
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	9c 87       	std	Y+12, r25	; 0x0c
    3eda:	8b 87       	std	Y+11, r24	; 0x0b
    3edc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ede:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ee0:	8c 01       	movw	r16, r24
    3ee2:	c8 01       	movw	r24, r16
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <gripper_close+0xdc>
    3ee8:	8c 01       	movw	r16, r24
    3eea:	1c 87       	std	Y+12, r17	; 0x0c
    3eec:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	89 85       	ldd	r24, Y+9	; 0x09
    3ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	9a 87       	std	Y+10, r25	; 0x0a
    3ef6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	89 85       	ldd	r24, Y+9	; 0x09
    3efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	51 f7       	brne	.-44     	; 0x3ed4 <gripper_close+0xcc>
    3f00:	17 c0       	rjmp	.+46     	; 0x3f30 <gripper_close+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	6d 81       	ldd	r22, Y+5	; 0x05
    3f04:	7e 81       	ldd	r23, Y+6	; 0x06
    3f06:	8f 81       	ldd	r24, Y+7	; 0x07
    3f08:	98 85       	ldd	r25, Y+8	; 0x08
    3f0a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	9a 87       	std	Y+10, r25	; 0x0a
    3f14:	89 87       	std	Y+9, r24	; 0x09
    3f16:	89 85       	ldd	r24, Y+9	; 0x09
    3f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1a:	9e 87       	std	Y+14, r25	; 0x0e
    3f1c:	8d 87       	std	Y+13, r24	; 0x0d
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	8c 01       	movw	r16, r24
    3f24:	c8 01       	movw	r24, r16
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <gripper_close+0x11e>
    3f2a:	8c 01       	movw	r16, r24
    3f2c:	1e 87       	std	Y+14, r17	; 0x0e
    3f2e:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To close the gripper 
*Example Call:       gripper_close();
*/
void gripper_close()
{
	for(ii=55;ii>10;ii--)
    3f30:	80 91 39 03 	lds	r24, 0x0339
    3f34:	81 50       	subi	r24, 0x01	; 1
    3f36:	80 93 39 03 	sts	0x0339, r24
    3f3a:	80 91 39 03 	lds	r24, 0x0339
    3f3e:	8b 30       	cpi	r24, 0x0B	; 11
    3f40:	08 f0       	brcs	.+2      	; 0x3f44 <gripper_close+0x13c>
    3f42:	72 cf       	rjmp	.-284    	; 0x3e28 <gripper_close+0x20>
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	a8 e4       	ldi	r26, 0x48	; 72
    3f4a:	b3 e4       	ldi	r27, 0x43	; 67
    3f4c:	8f 87       	std	Y+15, r24	; 0x0f
    3f4e:	98 8b       	std	Y+16, r25	; 0x10
    3f50:	a9 8b       	std	Y+17, r26	; 0x11
    3f52:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f54:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f56:	78 89       	ldd	r23, Y+16	; 0x10
    3f58:	89 89       	ldd	r24, Y+17	; 0x11
    3f5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f5c:	26 e6       	ldi	r18, 0x66	; 102
    3f5e:	36 e6       	ldi	r19, 0x66	; 102
    3f60:	46 e6       	ldi	r20, 0x66	; 102
    3f62:	55 e4       	ldi	r21, 0x45	; 69
    3f64:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	8b 8b       	std	Y+19, r24	; 0x13
    3f6e:	9c 8b       	std	Y+20, r25	; 0x14
    3f70:	ad 8b       	std	Y+21, r26	; 0x15
    3f72:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3f74:	11 e0       	ldi	r17, 0x01	; 1
    3f76:	6b 89       	ldd	r22, Y+19	; 0x13
    3f78:	7c 89       	ldd	r23, Y+20	; 0x14
    3f7a:	8d 89       	ldd	r24, Y+21	; 0x15
    3f7c:	9e 89       	ldd	r25, Y+22	; 0x16
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e8       	ldi	r20, 0x80	; 128
    3f84:	5f e3       	ldi	r21, 0x3F	; 63
    3f86:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	0c f0       	brlt	.+2      	; 0x3f90 <gripper_close+0x188>
    3f8e:	10 e0       	ldi	r17, 0x00	; 0
    3f90:	11 23       	and	r17, r17
    3f92:	29 f0       	breq	.+10     	; 0x3f9e <gripper_close+0x196>
		__ticks = 1;
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	98 8f       	std	Y+24, r25	; 0x18
    3f9a:	8f 8b       	std	Y+23, r24	; 0x17
    3f9c:	46 c0       	rjmp	.+140    	; 0x402a <gripper_close+0x222>
	else if (__tmp > 65535)
    3f9e:	11 e0       	ldi	r17, 0x01	; 1
    3fa0:	6b 89       	ldd	r22, Y+19	; 0x13
    3fa2:	7c 89       	ldd	r23, Y+20	; 0x14
    3fa4:	8d 89       	ldd	r24, Y+21	; 0x15
    3fa6:	9e 89       	ldd	r25, Y+22	; 0x16
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	3f ef       	ldi	r19, 0xFF	; 255
    3fac:	4f e7       	ldi	r20, 0x7F	; 127
    3fae:	57 e4       	ldi	r21, 0x47	; 71
    3fb0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    3fb4:	18 16       	cp	r1, r24
    3fb6:	0c f0       	brlt	.+2      	; 0x3fba <gripper_close+0x1b2>
    3fb8:	10 e0       	ldi	r17, 0x00	; 0
    3fba:	11 23       	and	r17, r17
    3fbc:	61 f1       	breq	.+88     	; 0x4016 <gripper_close+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    3fc0:	78 89       	ldd	r23, Y+16	; 0x10
    3fc2:	89 89       	ldd	r24, Y+17	; 0x11
    3fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	51 e4       	ldi	r21, 0x41	; 65
    3fce:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	98 8f       	std	Y+24, r25	; 0x18
    3fe4:	8f 8b       	std	Y+23, r24	; 0x17
    3fe6:	12 c0       	rjmp	.+36     	; 0x400c <gripper_close+0x204>
    3fe8:	80 e7       	ldi	r24, 0x70	; 112
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	9a 8f       	std	Y+26, r25	; 0x1a
    3fee:	89 8f       	std	Y+25, r24	; 0x19
    3ff0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ff2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ff4:	8c 01       	movw	r16, r24
    3ff6:	c8 01       	movw	r24, r16
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <gripper_close+0x1f0>
    3ffc:	8c 01       	movw	r16, r24
    3ffe:	1a 8f       	std	Y+26, r17	; 0x1a
    4000:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4002:	8f 89       	ldd	r24, Y+23	; 0x17
    4004:	98 8d       	ldd	r25, Y+24	; 0x18
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	98 8f       	std	Y+24, r25	; 0x18
    400a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400c:	8f 89       	ldd	r24, Y+23	; 0x17
    400e:	98 8d       	ldd	r25, Y+24	; 0x18
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	51 f7       	brne	.-44     	; 0x3fe8 <gripper_close+0x1e0>
    4014:	17 c0       	rjmp	.+46     	; 0x4044 <gripper_close+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	6b 89       	ldd	r22, Y+19	; 0x13
    4018:	7c 89       	ldd	r23, Y+20	; 0x14
    401a:	8d 89       	ldd	r24, Y+21	; 0x15
    401c:	9e 89       	ldd	r25, Y+22	; 0x16
    401e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	98 8f       	std	Y+24, r25	; 0x18
    4028:	8f 8b       	std	Y+23, r24	; 0x17
    402a:	8f 89       	ldd	r24, Y+23	; 0x17
    402c:	98 8d       	ldd	r25, Y+24	; 0x18
    402e:	9c 8f       	std	Y+28, r25	; 0x1c
    4030:	8b 8f       	std	Y+27, r24	; 0x1b
    4032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4036:	8c 01       	movw	r16, r24
    4038:	c8 01       	movw	r24, r16
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	f1 f7       	brne	.-4      	; 0x403a <gripper_close+0x232>
    403e:	8c 01       	movw	r16, r24
    4040:	1c 8f       	std	Y+28, r17	; 0x1c
    4042:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_3(ii);
		_delay_ms(10);
	}
	
	_delay_ms(200);
}
    4044:	6c 96       	adiw	r28, 0x1c	; 28
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	1f 91       	pop	r17
    4056:	0f 91       	pop	r16
    4058:	08 95       	ret

0000405a <arm_rotate_left>:
*Output:             None
*Logic:              To rotate the arm towards left
*Example Call:       arm_rotate_left();
*/
void arm_rotate_left()
{
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	6c 97       	sbiw	r28, 0x1c	; 28
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	f8 94       	cli
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	cd bf       	out	0x3d, r28	; 61
	for(ii=93;ii>0;ii--)
    4072:	8d e5       	ldi	r24, 0x5D	; 93
    4074:	80 93 39 03 	sts	0x0339, r24
    4078:	89 c0       	rjmp	.+274    	; 0x418c <arm_rotate_left+0x132>
	{
		servo_1(ii);
    407a:	80 91 39 03 	lds	r24, 0x0339
    407e:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 e2       	ldi	r26, 0x20	; 32
    4088:	b1 e4       	ldi	r27, 0x41	; 65
    408a:	89 83       	std	Y+1, r24	; 0x01
    408c:	9a 83       	std	Y+2, r25	; 0x02
    408e:	ab 83       	std	Y+3, r26	; 0x03
    4090:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4092:	69 81       	ldd	r22, Y+1	; 0x01
    4094:	7a 81       	ldd	r23, Y+2	; 0x02
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	26 e6       	ldi	r18, 0x66	; 102
    409c:	36 e6       	ldi	r19, 0x66	; 102
    409e:	46 e6       	ldi	r20, 0x66	; 102
    40a0:	55 e4       	ldi	r21, 0x45	; 69
    40a2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	8d 83       	std	Y+5, r24	; 0x05
    40ac:	9e 83       	std	Y+6, r25	; 0x06
    40ae:	af 83       	std	Y+7, r26	; 0x07
    40b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    40b2:	11 e0       	ldi	r17, 0x01	; 1
    40b4:	6d 81       	ldd	r22, Y+5	; 0x05
    40b6:	7e 81       	ldd	r23, Y+6	; 0x06
    40b8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ba:	98 85       	ldd	r25, Y+8	; 0x08
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e8       	ldi	r20, 0x80	; 128
    40c2:	5f e3       	ldi	r21, 0x3F	; 63
    40c4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    40c8:	88 23       	and	r24, r24
    40ca:	0c f0       	brlt	.+2      	; 0x40ce <arm_rotate_left+0x74>
    40cc:	10 e0       	ldi	r17, 0x00	; 0
    40ce:	11 23       	and	r17, r17
    40d0:	29 f0       	breq	.+10     	; 0x40dc <arm_rotate_left+0x82>
		__ticks = 1;
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	9a 87       	std	Y+10, r25	; 0x0a
    40d8:	89 87       	std	Y+9, r24	; 0x09
    40da:	46 c0       	rjmp	.+140    	; 0x4168 <arm_rotate_left+0x10e>
	else if (__tmp > 65535)
    40dc:	11 e0       	ldi	r17, 0x01	; 1
    40de:	6d 81       	ldd	r22, Y+5	; 0x05
    40e0:	7e 81       	ldd	r23, Y+6	; 0x06
    40e2:	8f 81       	ldd	r24, Y+7	; 0x07
    40e4:	98 85       	ldd	r25, Y+8	; 0x08
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	3f ef       	ldi	r19, 0xFF	; 255
    40ea:	4f e7       	ldi	r20, 0x7F	; 127
    40ec:	57 e4       	ldi	r21, 0x47	; 71
    40ee:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    40f2:	18 16       	cp	r1, r24
    40f4:	0c f0       	brlt	.+2      	; 0x40f8 <arm_rotate_left+0x9e>
    40f6:	10 e0       	ldi	r17, 0x00	; 0
    40f8:	11 23       	and	r17, r17
    40fa:	61 f1       	breq	.+88     	; 0x4154 <arm_rotate_left+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40fc:	69 81       	ldd	r22, Y+1	; 0x01
    40fe:	7a 81       	ldd	r23, Y+2	; 0x02
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e2       	ldi	r20, 0x20	; 32
    410a:	51 e4       	ldi	r21, 0x41	; 65
    410c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	bc 01       	movw	r22, r24
    4116:	cd 01       	movw	r24, r26
    4118:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	9a 87       	std	Y+10, r25	; 0x0a
    4122:	89 87       	std	Y+9, r24	; 0x09
    4124:	12 c0       	rjmp	.+36     	; 0x414a <arm_rotate_left+0xf0>
    4126:	80 e7       	ldi	r24, 0x70	; 112
    4128:	91 e0       	ldi	r25, 0x01	; 1
    412a:	9c 87       	std	Y+12, r25	; 0x0c
    412c:	8b 87       	std	Y+11, r24	; 0x0b
    412e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4130:	9c 85       	ldd	r25, Y+12	; 0x0c
    4132:	8c 01       	movw	r16, r24
    4134:	c8 01       	movw	r24, r16
    4136:	01 97       	sbiw	r24, 0x01	; 1
    4138:	f1 f7       	brne	.-4      	; 0x4136 <arm_rotate_left+0xdc>
    413a:	8c 01       	movw	r16, r24
    413c:	1c 87       	std	Y+12, r17	; 0x0c
    413e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	89 85       	ldd	r24, Y+9	; 0x09
    4142:	9a 85       	ldd	r25, Y+10	; 0x0a
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	9a 87       	std	Y+10, r25	; 0x0a
    4148:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	89 85       	ldd	r24, Y+9	; 0x09
    414c:	9a 85       	ldd	r25, Y+10	; 0x0a
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	51 f7       	brne	.-44     	; 0x4126 <arm_rotate_left+0xcc>
    4152:	17 c0       	rjmp	.+46     	; 0x4182 <arm_rotate_left+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	6d 81       	ldd	r22, Y+5	; 0x05
    4156:	7e 81       	ldd	r23, Y+6	; 0x06
    4158:	8f 81       	ldd	r24, Y+7	; 0x07
    415a:	98 85       	ldd	r25, Y+8	; 0x08
    415c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9a 87       	std	Y+10, r25	; 0x0a
    4166:	89 87       	std	Y+9, r24	; 0x09
    4168:	89 85       	ldd	r24, Y+9	; 0x09
    416a:	9a 85       	ldd	r25, Y+10	; 0x0a
    416c:	9e 87       	std	Y+14, r25	; 0x0e
    416e:	8d 87       	std	Y+13, r24	; 0x0d
    4170:	8d 85       	ldd	r24, Y+13	; 0x0d
    4172:	9e 85       	ldd	r25, Y+14	; 0x0e
    4174:	8c 01       	movw	r16, r24
    4176:	c8 01       	movw	r24, r16
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	f1 f7       	brne	.-4      	; 0x4178 <arm_rotate_left+0x11e>
    417c:	8c 01       	movw	r16, r24
    417e:	1e 87       	std	Y+14, r17	; 0x0e
    4180:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To rotate the arm towards left
*Example Call:       arm_rotate_left();
*/
void arm_rotate_left()
{
	for(ii=93;ii>0;ii--)
    4182:	80 91 39 03 	lds	r24, 0x0339
    4186:	81 50       	subi	r24, 0x01	; 1
    4188:	80 93 39 03 	sts	0x0339, r24
    418c:	80 91 39 03 	lds	r24, 0x0339
    4190:	88 23       	and	r24, r24
    4192:	09 f0       	breq	.+2      	; 0x4196 <arm_rotate_left+0x13c>
    4194:	72 cf       	rjmp	.-284    	; 0x407a <arm_rotate_left+0x20>
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	a6 e9       	ldi	r26, 0x96	; 150
    419c:	b3 e4       	ldi	r27, 0x43	; 67
    419e:	8f 87       	std	Y+15, r24	; 0x0f
    41a0:	98 8b       	std	Y+16, r25	; 0x10
    41a2:	a9 8b       	std	Y+17, r26	; 0x11
    41a4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    41a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    41a8:	78 89       	ldd	r23, Y+16	; 0x10
    41aa:	89 89       	ldd	r24, Y+17	; 0x11
    41ac:	9a 89       	ldd	r25, Y+18	; 0x12
    41ae:	26 e6       	ldi	r18, 0x66	; 102
    41b0:	36 e6       	ldi	r19, 0x66	; 102
    41b2:	46 e6       	ldi	r20, 0x66	; 102
    41b4:	55 e4       	ldi	r21, 0x45	; 69
    41b6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	8b 8b       	std	Y+19, r24	; 0x13
    41c0:	9c 8b       	std	Y+20, r25	; 0x14
    41c2:	ad 8b       	std	Y+21, r26	; 0x15
    41c4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    41c6:	11 e0       	ldi	r17, 0x01	; 1
    41c8:	6b 89       	ldd	r22, Y+19	; 0x13
    41ca:	7c 89       	ldd	r23, Y+20	; 0x14
    41cc:	8d 89       	ldd	r24, Y+21	; 0x15
    41ce:	9e 89       	ldd	r25, Y+22	; 0x16
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	40 e8       	ldi	r20, 0x80	; 128
    41d6:	5f e3       	ldi	r21, 0x3F	; 63
    41d8:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    41dc:	88 23       	and	r24, r24
    41de:	0c f0       	brlt	.+2      	; 0x41e2 <arm_rotate_left+0x188>
    41e0:	10 e0       	ldi	r17, 0x00	; 0
    41e2:	11 23       	and	r17, r17
    41e4:	29 f0       	breq	.+10     	; 0x41f0 <arm_rotate_left+0x196>
		__ticks = 1;
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	98 8f       	std	Y+24, r25	; 0x18
    41ec:	8f 8b       	std	Y+23, r24	; 0x17
    41ee:	46 c0       	rjmp	.+140    	; 0x427c <arm_rotate_left+0x222>
	else if (__tmp > 65535)
    41f0:	11 e0       	ldi	r17, 0x01	; 1
    41f2:	6b 89       	ldd	r22, Y+19	; 0x13
    41f4:	7c 89       	ldd	r23, Y+20	; 0x14
    41f6:	8d 89       	ldd	r24, Y+21	; 0x15
    41f8:	9e 89       	ldd	r25, Y+22	; 0x16
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	3f ef       	ldi	r19, 0xFF	; 255
    41fe:	4f e7       	ldi	r20, 0x7F	; 127
    4200:	57 e4       	ldi	r21, 0x47	; 71
    4202:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4206:	18 16       	cp	r1, r24
    4208:	0c f0       	brlt	.+2      	; 0x420c <arm_rotate_left+0x1b2>
    420a:	10 e0       	ldi	r17, 0x00	; 0
    420c:	11 23       	and	r17, r17
    420e:	61 f1       	breq	.+88     	; 0x4268 <arm_rotate_left+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4210:	6f 85       	ldd	r22, Y+15	; 0x0f
    4212:	78 89       	ldd	r23, Y+16	; 0x10
    4214:	89 89       	ldd	r24, Y+17	; 0x11
    4216:	9a 89       	ldd	r25, Y+18	; 0x12
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 e2       	ldi	r20, 0x20	; 32
    421e:	51 e4       	ldi	r21, 0x41	; 65
    4220:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	bc 01       	movw	r22, r24
    422a:	cd 01       	movw	r24, r26
    422c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	98 8f       	std	Y+24, r25	; 0x18
    4236:	8f 8b       	std	Y+23, r24	; 0x17
    4238:	12 c0       	rjmp	.+36     	; 0x425e <arm_rotate_left+0x204>
    423a:	80 e7       	ldi	r24, 0x70	; 112
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	9a 8f       	std	Y+26, r25	; 0x1a
    4240:	89 8f       	std	Y+25, r24	; 0x19
    4242:	89 8d       	ldd	r24, Y+25	; 0x19
    4244:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4246:	8c 01       	movw	r16, r24
    4248:	c8 01       	movw	r24, r16
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <arm_rotate_left+0x1f0>
    424e:	8c 01       	movw	r16, r24
    4250:	1a 8f       	std	Y+26, r17	; 0x1a
    4252:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	98 8f       	std	Y+24, r25	; 0x18
    425c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425e:	8f 89       	ldd	r24, Y+23	; 0x17
    4260:	98 8d       	ldd	r25, Y+24	; 0x18
    4262:	00 97       	sbiw	r24, 0x00	; 0
    4264:	51 f7       	brne	.-44     	; 0x423a <arm_rotate_left+0x1e0>
    4266:	17 c0       	rjmp	.+46     	; 0x4296 <arm_rotate_left+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4268:	6b 89       	ldd	r22, Y+19	; 0x13
    426a:	7c 89       	ldd	r23, Y+20	; 0x14
    426c:	8d 89       	ldd	r24, Y+21	; 0x15
    426e:	9e 89       	ldd	r25, Y+22	; 0x16
    4270:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	98 8f       	std	Y+24, r25	; 0x18
    427a:	8f 8b       	std	Y+23, r24	; 0x17
    427c:	8f 89       	ldd	r24, Y+23	; 0x17
    427e:	98 8d       	ldd	r25, Y+24	; 0x18
    4280:	9c 8f       	std	Y+28, r25	; 0x1c
    4282:	8b 8f       	std	Y+27, r24	; 0x1b
    4284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4288:	8c 01       	movw	r16, r24
    428a:	c8 01       	movw	r24, r16
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <arm_rotate_left+0x232>
    4290:	8c 01       	movw	r16, r24
    4292:	1c 8f       	std	Y+28, r17	; 0x1c
    4294:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4296:	6c 96       	adiw	r28, 0x1c	; 28
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	df 91       	pop	r29
    42a4:	cf 91       	pop	r28
    42a6:	1f 91       	pop	r17
    42a8:	0f 91       	pop	r16
    42aa:	08 95       	ret

000042ac <arm_rotate_right>:
*Output:             None
*Logic:              To rotate the arm towards right
*Example Call:       arm_rotate_right();
*/
void arm_rotate_right()
{
    42ac:	0f 93       	push	r16
    42ae:	1f 93       	push	r17
    42b0:	cf 93       	push	r28
    42b2:	df 93       	push	r29
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
    42b8:	6c 97       	sbiw	r28, 0x1c	; 28
    42ba:	0f b6       	in	r0, 0x3f	; 63
    42bc:	f8 94       	cli
    42be:	de bf       	out	0x3e, r29	; 62
    42c0:	0f be       	out	0x3f, r0	; 63
    42c2:	cd bf       	out	0x3d, r28	; 61
	for(ii=95;ii<180;ii++)
    42c4:	8f e5       	ldi	r24, 0x5F	; 95
    42c6:	80 93 39 03 	sts	0x0339, r24
    42ca:	89 c0       	rjmp	.+274    	; 0x43de <arm_rotate_right+0x132>
	{
		servo_1(ii);
    42cc:	80 91 39 03 	lds	r24, 0x0339
    42d0:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	a0 e2       	ldi	r26, 0x20	; 32
    42da:	b1 e4       	ldi	r27, 0x41	; 65
    42dc:	89 83       	std	Y+1, r24	; 0x01
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	ab 83       	std	Y+3, r26	; 0x03
    42e2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42e4:	69 81       	ldd	r22, Y+1	; 0x01
    42e6:	7a 81       	ldd	r23, Y+2	; 0x02
    42e8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ea:	9c 81       	ldd	r25, Y+4	; 0x04
    42ec:	26 e6       	ldi	r18, 0x66	; 102
    42ee:	36 e6       	ldi	r19, 0x66	; 102
    42f0:	46 e6       	ldi	r20, 0x66	; 102
    42f2:	55 e4       	ldi	r21, 0x45	; 69
    42f4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	8d 83       	std	Y+5, r24	; 0x05
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	af 83       	std	Y+7, r26	; 0x07
    4302:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4304:	11 e0       	ldi	r17, 0x01	; 1
    4306:	6d 81       	ldd	r22, Y+5	; 0x05
    4308:	7e 81       	ldd	r23, Y+6	; 0x06
    430a:	8f 81       	ldd	r24, Y+7	; 0x07
    430c:	98 85       	ldd	r25, Y+8	; 0x08
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e8       	ldi	r20, 0x80	; 128
    4314:	5f e3       	ldi	r21, 0x3F	; 63
    4316:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    431a:	88 23       	and	r24, r24
    431c:	0c f0       	brlt	.+2      	; 0x4320 <arm_rotate_right+0x74>
    431e:	10 e0       	ldi	r17, 0x00	; 0
    4320:	11 23       	and	r17, r17
    4322:	29 f0       	breq	.+10     	; 0x432e <arm_rotate_right+0x82>
		__ticks = 1;
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	9a 87       	std	Y+10, r25	; 0x0a
    432a:	89 87       	std	Y+9, r24	; 0x09
    432c:	46 c0       	rjmp	.+140    	; 0x43ba <arm_rotate_right+0x10e>
	else if (__tmp > 65535)
    432e:	11 e0       	ldi	r17, 0x01	; 1
    4330:	6d 81       	ldd	r22, Y+5	; 0x05
    4332:	7e 81       	ldd	r23, Y+6	; 0x06
    4334:	8f 81       	ldd	r24, Y+7	; 0x07
    4336:	98 85       	ldd	r25, Y+8	; 0x08
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	3f ef       	ldi	r19, 0xFF	; 255
    433c:	4f e7       	ldi	r20, 0x7F	; 127
    433e:	57 e4       	ldi	r21, 0x47	; 71
    4340:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4344:	18 16       	cp	r1, r24
    4346:	0c f0       	brlt	.+2      	; 0x434a <arm_rotate_right+0x9e>
    4348:	10 e0       	ldi	r17, 0x00	; 0
    434a:	11 23       	and	r17, r17
    434c:	61 f1       	breq	.+88     	; 0x43a6 <arm_rotate_right+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434e:	69 81       	ldd	r22, Y+1	; 0x01
    4350:	7a 81       	ldd	r23, Y+2	; 0x02
    4352:	8b 81       	ldd	r24, Y+3	; 0x03
    4354:	9c 81       	ldd	r25, Y+4	; 0x04
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e2       	ldi	r20, 0x20	; 32
    435c:	51 e4       	ldi	r21, 0x41	; 65
    435e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	bc 01       	movw	r22, r24
    4368:	cd 01       	movw	r24, r26
    436a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	9a 87       	std	Y+10, r25	; 0x0a
    4374:	89 87       	std	Y+9, r24	; 0x09
    4376:	12 c0       	rjmp	.+36     	; 0x439c <arm_rotate_right+0xf0>
    4378:	80 e7       	ldi	r24, 0x70	; 112
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	9c 87       	std	Y+12, r25	; 0x0c
    437e:	8b 87       	std	Y+11, r24	; 0x0b
    4380:	8b 85       	ldd	r24, Y+11	; 0x0b
    4382:	9c 85       	ldd	r25, Y+12	; 0x0c
    4384:	8c 01       	movw	r16, r24
    4386:	c8 01       	movw	r24, r16
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	f1 f7       	brne	.-4      	; 0x4388 <arm_rotate_right+0xdc>
    438c:	8c 01       	movw	r16, r24
    438e:	1c 87       	std	Y+12, r17	; 0x0c
    4390:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4392:	89 85       	ldd	r24, Y+9	; 0x09
    4394:	9a 85       	ldd	r25, Y+10	; 0x0a
    4396:	01 97       	sbiw	r24, 0x01	; 1
    4398:	9a 87       	std	Y+10, r25	; 0x0a
    439a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439c:	89 85       	ldd	r24, Y+9	; 0x09
    439e:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	51 f7       	brne	.-44     	; 0x4378 <arm_rotate_right+0xcc>
    43a4:	17 c0       	rjmp	.+46     	; 0x43d4 <arm_rotate_right+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a6:	6d 81       	ldd	r22, Y+5	; 0x05
    43a8:	7e 81       	ldd	r23, Y+6	; 0x06
    43aa:	8f 81       	ldd	r24, Y+7	; 0x07
    43ac:	98 85       	ldd	r25, Y+8	; 0x08
    43ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	9a 87       	std	Y+10, r25	; 0x0a
    43b8:	89 87       	std	Y+9, r24	; 0x09
    43ba:	89 85       	ldd	r24, Y+9	; 0x09
    43bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43be:	9e 87       	std	Y+14, r25	; 0x0e
    43c0:	8d 87       	std	Y+13, r24	; 0x0d
    43c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c6:	8c 01       	movw	r16, r24
    43c8:	c8 01       	movw	r24, r16
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <arm_rotate_right+0x11e>
    43ce:	8c 01       	movw	r16, r24
    43d0:	1e 87       	std	Y+14, r17	; 0x0e
    43d2:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To rotate the arm towards right
*Example Call:       arm_rotate_right();
*/
void arm_rotate_right()
{
	for(ii=95;ii<180;ii++)
    43d4:	80 91 39 03 	lds	r24, 0x0339
    43d8:	8f 5f       	subi	r24, 0xFF	; 255
    43da:	80 93 39 03 	sts	0x0339, r24
    43de:	80 91 39 03 	lds	r24, 0x0339
    43e2:	84 3b       	cpi	r24, 0xB4	; 180
    43e4:	08 f4       	brcc	.+2      	; 0x43e8 <arm_rotate_right+0x13c>
    43e6:	72 cf       	rjmp	.-284    	; 0x42cc <arm_rotate_right+0x20>
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	a6 e9       	ldi	r26, 0x96	; 150
    43ee:	b3 e4       	ldi	r27, 0x43	; 67
    43f0:	8f 87       	std	Y+15, r24	; 0x0f
    43f2:	98 8b       	std	Y+16, r25	; 0x10
    43f4:	a9 8b       	std	Y+17, r26	; 0x11
    43f6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    43f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    43fa:	78 89       	ldd	r23, Y+16	; 0x10
    43fc:	89 89       	ldd	r24, Y+17	; 0x11
    43fe:	9a 89       	ldd	r25, Y+18	; 0x12
    4400:	26 e6       	ldi	r18, 0x66	; 102
    4402:	36 e6       	ldi	r19, 0x66	; 102
    4404:	46 e6       	ldi	r20, 0x66	; 102
    4406:	55 e4       	ldi	r21, 0x45	; 69
    4408:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    440c:	dc 01       	movw	r26, r24
    440e:	cb 01       	movw	r24, r22
    4410:	8b 8b       	std	Y+19, r24	; 0x13
    4412:	9c 8b       	std	Y+20, r25	; 0x14
    4414:	ad 8b       	std	Y+21, r26	; 0x15
    4416:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4418:	11 e0       	ldi	r17, 0x01	; 1
    441a:	6b 89       	ldd	r22, Y+19	; 0x13
    441c:	7c 89       	ldd	r23, Y+20	; 0x14
    441e:	8d 89       	ldd	r24, Y+21	; 0x15
    4420:	9e 89       	ldd	r25, Y+22	; 0x16
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e8       	ldi	r20, 0x80	; 128
    4428:	5f e3       	ldi	r21, 0x3F	; 63
    442a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    442e:	88 23       	and	r24, r24
    4430:	0c f0       	brlt	.+2      	; 0x4434 <arm_rotate_right+0x188>
    4432:	10 e0       	ldi	r17, 0x00	; 0
    4434:	11 23       	and	r17, r17
    4436:	29 f0       	breq	.+10     	; 0x4442 <arm_rotate_right+0x196>
		__ticks = 1;
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	98 8f       	std	Y+24, r25	; 0x18
    443e:	8f 8b       	std	Y+23, r24	; 0x17
    4440:	46 c0       	rjmp	.+140    	; 0x44ce <arm_rotate_right+0x222>
	else if (__tmp > 65535)
    4442:	11 e0       	ldi	r17, 0x01	; 1
    4444:	6b 89       	ldd	r22, Y+19	; 0x13
    4446:	7c 89       	ldd	r23, Y+20	; 0x14
    4448:	8d 89       	ldd	r24, Y+21	; 0x15
    444a:	9e 89       	ldd	r25, Y+22	; 0x16
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	3f ef       	ldi	r19, 0xFF	; 255
    4450:	4f e7       	ldi	r20, 0x7F	; 127
    4452:	57 e4       	ldi	r21, 0x47	; 71
    4454:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4458:	18 16       	cp	r1, r24
    445a:	0c f0       	brlt	.+2      	; 0x445e <arm_rotate_right+0x1b2>
    445c:	10 e0       	ldi	r17, 0x00	; 0
    445e:	11 23       	and	r17, r17
    4460:	61 f1       	breq	.+88     	; 0x44ba <arm_rotate_right+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4462:	6f 85       	ldd	r22, Y+15	; 0x0f
    4464:	78 89       	ldd	r23, Y+16	; 0x10
    4466:	89 89       	ldd	r24, Y+17	; 0x11
    4468:	9a 89       	ldd	r25, Y+18	; 0x12
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e2       	ldi	r20, 0x20	; 32
    4470:	51 e4       	ldi	r21, 0x41	; 65
    4472:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	bc 01       	movw	r22, r24
    447c:	cd 01       	movw	r24, r26
    447e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	98 8f       	std	Y+24, r25	; 0x18
    4488:	8f 8b       	std	Y+23, r24	; 0x17
    448a:	12 c0       	rjmp	.+36     	; 0x44b0 <arm_rotate_right+0x204>
    448c:	80 e7       	ldi	r24, 0x70	; 112
    448e:	91 e0       	ldi	r25, 0x01	; 1
    4490:	9a 8f       	std	Y+26, r25	; 0x1a
    4492:	89 8f       	std	Y+25, r24	; 0x19
    4494:	89 8d       	ldd	r24, Y+25	; 0x19
    4496:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4498:	8c 01       	movw	r16, r24
    449a:	c8 01       	movw	r24, r16
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	f1 f7       	brne	.-4      	; 0x449c <arm_rotate_right+0x1f0>
    44a0:	8c 01       	movw	r16, r24
    44a2:	1a 8f       	std	Y+26, r17	; 0x1a
    44a4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a6:	8f 89       	ldd	r24, Y+23	; 0x17
    44a8:	98 8d       	ldd	r25, Y+24	; 0x18
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	98 8f       	std	Y+24, r25	; 0x18
    44ae:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b0:	8f 89       	ldd	r24, Y+23	; 0x17
    44b2:	98 8d       	ldd	r25, Y+24	; 0x18
    44b4:	00 97       	sbiw	r24, 0x00	; 0
    44b6:	51 f7       	brne	.-44     	; 0x448c <arm_rotate_right+0x1e0>
    44b8:	17 c0       	rjmp	.+46     	; 0x44e8 <arm_rotate_right+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ba:	6b 89       	ldd	r22, Y+19	; 0x13
    44bc:	7c 89       	ldd	r23, Y+20	; 0x14
    44be:	8d 89       	ldd	r24, Y+21	; 0x15
    44c0:	9e 89       	ldd	r25, Y+22	; 0x16
    44c2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	98 8f       	std	Y+24, r25	; 0x18
    44cc:	8f 8b       	std	Y+23, r24	; 0x17
    44ce:	8f 89       	ldd	r24, Y+23	; 0x17
    44d0:	98 8d       	ldd	r25, Y+24	; 0x18
    44d2:	9c 8f       	std	Y+28, r25	; 0x1c
    44d4:	8b 8f       	std	Y+27, r24	; 0x1b
    44d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44da:	8c 01       	movw	r16, r24
    44dc:	c8 01       	movw	r24, r16
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	f1 f7       	brne	.-4      	; 0x44de <arm_rotate_right+0x232>
    44e2:	8c 01       	movw	r16, r24
    44e4:	1c 8f       	std	Y+28, r17	; 0x1c
    44e6:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    44e8:	6c 96       	adiw	r28, 0x1c	; 28
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	f8 94       	cli
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	cd bf       	out	0x3d, r28	; 61
    44f4:	df 91       	pop	r29
    44f6:	cf 91       	pop	r28
    44f8:	1f 91       	pop	r17
    44fa:	0f 91       	pop	r16
    44fc:	08 95       	ret

000044fe <arm_straight>:
*Output:             None
*Logic:              Make sure the arm remains upright
*Example Call:       arm_straight();
*/
void arm_straight()
{
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
    4502:	cf 93       	push	r28
    4504:	df 93       	push	r29
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	6c 97       	sbiw	r28, 0x1c	; 28
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<95;ii++)
    4516:	10 92 39 03 	sts	0x0339, r1
    451a:	89 c0       	rjmp	.+274    	; 0x462e <arm_straight+0x130>
	{
		servo_1(ii);
    451c:	80 91 39 03 	lds	r24, 0x0339
    4520:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	a0 e2       	ldi	r26, 0x20	; 32
    452a:	b1 e4       	ldi	r27, 0x41	; 65
    452c:	89 83       	std	Y+1, r24	; 0x01
    452e:	9a 83       	std	Y+2, r25	; 0x02
    4530:	ab 83       	std	Y+3, r26	; 0x03
    4532:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4534:	69 81       	ldd	r22, Y+1	; 0x01
    4536:	7a 81       	ldd	r23, Y+2	; 0x02
    4538:	8b 81       	ldd	r24, Y+3	; 0x03
    453a:	9c 81       	ldd	r25, Y+4	; 0x04
    453c:	26 e6       	ldi	r18, 0x66	; 102
    453e:	36 e6       	ldi	r19, 0x66	; 102
    4540:	46 e6       	ldi	r20, 0x66	; 102
    4542:	55 e4       	ldi	r21, 0x45	; 69
    4544:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	9e 83       	std	Y+6, r25	; 0x06
    4550:	af 83       	std	Y+7, r26	; 0x07
    4552:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4554:	11 e0       	ldi	r17, 0x01	; 1
    4556:	6d 81       	ldd	r22, Y+5	; 0x05
    4558:	7e 81       	ldd	r23, Y+6	; 0x06
    455a:	8f 81       	ldd	r24, Y+7	; 0x07
    455c:	98 85       	ldd	r25, Y+8	; 0x08
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e8       	ldi	r20, 0x80	; 128
    4564:	5f e3       	ldi	r21, 0x3F	; 63
    4566:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    456a:	88 23       	and	r24, r24
    456c:	0c f0       	brlt	.+2      	; 0x4570 <arm_straight+0x72>
    456e:	10 e0       	ldi	r17, 0x00	; 0
    4570:	11 23       	and	r17, r17
    4572:	29 f0       	breq	.+10     	; 0x457e <arm_straight+0x80>
		__ticks = 1;
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	9a 87       	std	Y+10, r25	; 0x0a
    457a:	89 87       	std	Y+9, r24	; 0x09
    457c:	46 c0       	rjmp	.+140    	; 0x460a <arm_straight+0x10c>
	else if (__tmp > 65535)
    457e:	11 e0       	ldi	r17, 0x01	; 1
    4580:	6d 81       	ldd	r22, Y+5	; 0x05
    4582:	7e 81       	ldd	r23, Y+6	; 0x06
    4584:	8f 81       	ldd	r24, Y+7	; 0x07
    4586:	98 85       	ldd	r25, Y+8	; 0x08
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	3f ef       	ldi	r19, 0xFF	; 255
    458c:	4f e7       	ldi	r20, 0x7F	; 127
    458e:	57 e4       	ldi	r21, 0x47	; 71
    4590:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4594:	18 16       	cp	r1, r24
    4596:	0c f0       	brlt	.+2      	; 0x459a <arm_straight+0x9c>
    4598:	10 e0       	ldi	r17, 0x00	; 0
    459a:	11 23       	and	r17, r17
    459c:	61 f1       	breq	.+88     	; 0x45f6 <arm_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459e:	69 81       	ldd	r22, Y+1	; 0x01
    45a0:	7a 81       	ldd	r23, Y+2	; 0x02
    45a2:	8b 81       	ldd	r24, Y+3	; 0x03
    45a4:	9c 81       	ldd	r25, Y+4	; 0x04
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	40 e2       	ldi	r20, 0x20	; 32
    45ac:	51 e4       	ldi	r21, 0x41	; 65
    45ae:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    45b2:	dc 01       	movw	r26, r24
    45b4:	cb 01       	movw	r24, r22
    45b6:	bc 01       	movw	r22, r24
    45b8:	cd 01       	movw	r24, r26
    45ba:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    45be:	dc 01       	movw	r26, r24
    45c0:	cb 01       	movw	r24, r22
    45c2:	9a 87       	std	Y+10, r25	; 0x0a
    45c4:	89 87       	std	Y+9, r24	; 0x09
    45c6:	12 c0       	rjmp	.+36     	; 0x45ec <arm_straight+0xee>
    45c8:	80 e7       	ldi	r24, 0x70	; 112
    45ca:	91 e0       	ldi	r25, 0x01	; 1
    45cc:	9c 87       	std	Y+12, r25	; 0x0c
    45ce:	8b 87       	std	Y+11, r24	; 0x0b
    45d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    45d4:	8c 01       	movw	r16, r24
    45d6:	c8 01       	movw	r24, r16
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <arm_straight+0xda>
    45dc:	8c 01       	movw	r16, r24
    45de:	1c 87       	std	Y+12, r17	; 0x0c
    45e0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e2:	89 85       	ldd	r24, Y+9	; 0x09
    45e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	9a 87       	std	Y+10, r25	; 0x0a
    45ea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ec:	89 85       	ldd	r24, Y+9	; 0x09
    45ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f0:	00 97       	sbiw	r24, 0x00	; 0
    45f2:	51 f7       	brne	.-44     	; 0x45c8 <arm_straight+0xca>
    45f4:	17 c0       	rjmp	.+46     	; 0x4624 <arm_straight+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f6:	6d 81       	ldd	r22, Y+5	; 0x05
    45f8:	7e 81       	ldd	r23, Y+6	; 0x06
    45fa:	8f 81       	ldd	r24, Y+7	; 0x07
    45fc:	98 85       	ldd	r25, Y+8	; 0x08
    45fe:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4602:	dc 01       	movw	r26, r24
    4604:	cb 01       	movw	r24, r22
    4606:	9a 87       	std	Y+10, r25	; 0x0a
    4608:	89 87       	std	Y+9, r24	; 0x09
    460a:	89 85       	ldd	r24, Y+9	; 0x09
    460c:	9a 85       	ldd	r25, Y+10	; 0x0a
    460e:	9e 87       	std	Y+14, r25	; 0x0e
    4610:	8d 87       	std	Y+13, r24	; 0x0d
    4612:	8d 85       	ldd	r24, Y+13	; 0x0d
    4614:	9e 85       	ldd	r25, Y+14	; 0x0e
    4616:	8c 01       	movw	r16, r24
    4618:	c8 01       	movw	r24, r16
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <arm_straight+0x11c>
    461e:	8c 01       	movw	r16, r24
    4620:	1e 87       	std	Y+14, r17	; 0x0e
    4622:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              Make sure the arm remains upright
*Example Call:       arm_straight();
*/
void arm_straight()
{
	for(ii=0;ii<95;ii++)
    4624:	80 91 39 03 	lds	r24, 0x0339
    4628:	8f 5f       	subi	r24, 0xFF	; 255
    462a:	80 93 39 03 	sts	0x0339, r24
    462e:	80 91 39 03 	lds	r24, 0x0339
    4632:	8f 35       	cpi	r24, 0x5F	; 95
    4634:	08 f4       	brcc	.+2      	; 0x4638 <arm_straight+0x13a>
    4636:	72 cf       	rjmp	.-284    	; 0x451c <arm_straight+0x1e>
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	a6 e9       	ldi	r26, 0x96	; 150
    463e:	b3 e4       	ldi	r27, 0x43	; 67
    4640:	8f 87       	std	Y+15, r24	; 0x0f
    4642:	98 8b       	std	Y+16, r25	; 0x10
    4644:	a9 8b       	std	Y+17, r26	; 0x11
    4646:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4648:	6f 85       	ldd	r22, Y+15	; 0x0f
    464a:	78 89       	ldd	r23, Y+16	; 0x10
    464c:	89 89       	ldd	r24, Y+17	; 0x11
    464e:	9a 89       	ldd	r25, Y+18	; 0x12
    4650:	26 e6       	ldi	r18, 0x66	; 102
    4652:	36 e6       	ldi	r19, 0x66	; 102
    4654:	46 e6       	ldi	r20, 0x66	; 102
    4656:	55 e4       	ldi	r21, 0x45	; 69
    4658:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	8b 8b       	std	Y+19, r24	; 0x13
    4662:	9c 8b       	std	Y+20, r25	; 0x14
    4664:	ad 8b       	std	Y+21, r26	; 0x15
    4666:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4668:	11 e0       	ldi	r17, 0x01	; 1
    466a:	6b 89       	ldd	r22, Y+19	; 0x13
    466c:	7c 89       	ldd	r23, Y+20	; 0x14
    466e:	8d 89       	ldd	r24, Y+21	; 0x15
    4670:	9e 89       	ldd	r25, Y+22	; 0x16
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	40 e8       	ldi	r20, 0x80	; 128
    4678:	5f e3       	ldi	r21, 0x3F	; 63
    467a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    467e:	88 23       	and	r24, r24
    4680:	0c f0       	brlt	.+2      	; 0x4684 <arm_straight+0x186>
    4682:	10 e0       	ldi	r17, 0x00	; 0
    4684:	11 23       	and	r17, r17
    4686:	29 f0       	breq	.+10     	; 0x4692 <arm_straight+0x194>
		__ticks = 1;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	98 8f       	std	Y+24, r25	; 0x18
    468e:	8f 8b       	std	Y+23, r24	; 0x17
    4690:	46 c0       	rjmp	.+140    	; 0x471e <arm_straight+0x220>
	else if (__tmp > 65535)
    4692:	11 e0       	ldi	r17, 0x01	; 1
    4694:	6b 89       	ldd	r22, Y+19	; 0x13
    4696:	7c 89       	ldd	r23, Y+20	; 0x14
    4698:	8d 89       	ldd	r24, Y+21	; 0x15
    469a:	9e 89       	ldd	r25, Y+22	; 0x16
    469c:	20 e0       	ldi	r18, 0x00	; 0
    469e:	3f ef       	ldi	r19, 0xFF	; 255
    46a0:	4f e7       	ldi	r20, 0x7F	; 127
    46a2:	57 e4       	ldi	r21, 0x47	; 71
    46a4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    46a8:	18 16       	cp	r1, r24
    46aa:	0c f0       	brlt	.+2      	; 0x46ae <arm_straight+0x1b0>
    46ac:	10 e0       	ldi	r17, 0x00	; 0
    46ae:	11 23       	and	r17, r17
    46b0:	61 f1       	breq	.+88     	; 0x470a <arm_straight+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    46b4:	78 89       	ldd	r23, Y+16	; 0x10
    46b6:	89 89       	ldd	r24, Y+17	; 0x11
    46b8:	9a 89       	ldd	r25, Y+18	; 0x12
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	40 e2       	ldi	r20, 0x20	; 32
    46c0:	51 e4       	ldi	r21, 0x41	; 65
    46c2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	bc 01       	movw	r22, r24
    46cc:	cd 01       	movw	r24, r26
    46ce:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	98 8f       	std	Y+24, r25	; 0x18
    46d8:	8f 8b       	std	Y+23, r24	; 0x17
    46da:	12 c0       	rjmp	.+36     	; 0x4700 <arm_straight+0x202>
    46dc:	80 e7       	ldi	r24, 0x70	; 112
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	9a 8f       	std	Y+26, r25	; 0x1a
    46e2:	89 8f       	std	Y+25, r24	; 0x19
    46e4:	89 8d       	ldd	r24, Y+25	; 0x19
    46e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46e8:	8c 01       	movw	r16, r24
    46ea:	c8 01       	movw	r24, r16
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	f1 f7       	brne	.-4      	; 0x46ec <arm_straight+0x1ee>
    46f0:	8c 01       	movw	r16, r24
    46f2:	1a 8f       	std	Y+26, r17	; 0x1a
    46f4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f6:	8f 89       	ldd	r24, Y+23	; 0x17
    46f8:	98 8d       	ldd	r25, Y+24	; 0x18
    46fa:	01 97       	sbiw	r24, 0x01	; 1
    46fc:	98 8f       	std	Y+24, r25	; 0x18
    46fe:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4700:	8f 89       	ldd	r24, Y+23	; 0x17
    4702:	98 8d       	ldd	r25, Y+24	; 0x18
    4704:	00 97       	sbiw	r24, 0x00	; 0
    4706:	51 f7       	brne	.-44     	; 0x46dc <arm_straight+0x1de>
    4708:	17 c0       	rjmp	.+46     	; 0x4738 <arm_straight+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    470a:	6b 89       	ldd	r22, Y+19	; 0x13
    470c:	7c 89       	ldd	r23, Y+20	; 0x14
    470e:	8d 89       	ldd	r24, Y+21	; 0x15
    4710:	9e 89       	ldd	r25, Y+22	; 0x16
    4712:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	98 8f       	std	Y+24, r25	; 0x18
    471c:	8f 8b       	std	Y+23, r24	; 0x17
    471e:	8f 89       	ldd	r24, Y+23	; 0x17
    4720:	98 8d       	ldd	r25, Y+24	; 0x18
    4722:	9c 8f       	std	Y+28, r25	; 0x1c
    4724:	8b 8f       	std	Y+27, r24	; 0x1b
    4726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    472a:	8c 01       	movw	r16, r24
    472c:	c8 01       	movw	r24, r16
    472e:	01 97       	sbiw	r24, 0x01	; 1
    4730:	f1 f7       	brne	.-4      	; 0x472e <arm_straight+0x230>
    4732:	8c 01       	movw	r16, r24
    4734:	1c 8f       	std	Y+28, r17	; 0x1c
    4736:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
}
    4738:	6c 96       	adiw	r28, 0x1c	; 28
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	08 95       	ret

0000474e <arm_forward>:
*Output:             None
*Logic:              To bend the arm in the forward direction
*Example Call:       arm_forward();
*/
void arm_forward()
{
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	6c 97       	sbiw	r28, 0x1c	; 28
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
	for(ii=0;ii<55;ii++)
    4766:	10 92 39 03 	sts	0x0339, r1
    476a:	89 c0       	rjmp	.+274    	; 0x487e <arm_forward+0x130>
	{
		servo_2(ii);
    476c:	80 91 39 03 	lds	r24, 0x0339
    4770:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	a0 e2       	ldi	r26, 0x20	; 32
    477a:	b1 e4       	ldi	r27, 0x41	; 65
    477c:	89 83       	std	Y+1, r24	; 0x01
    477e:	9a 83       	std	Y+2, r25	; 0x02
    4780:	ab 83       	std	Y+3, r26	; 0x03
    4782:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4784:	69 81       	ldd	r22, Y+1	; 0x01
    4786:	7a 81       	ldd	r23, Y+2	; 0x02
    4788:	8b 81       	ldd	r24, Y+3	; 0x03
    478a:	9c 81       	ldd	r25, Y+4	; 0x04
    478c:	26 e6       	ldi	r18, 0x66	; 102
    478e:	36 e6       	ldi	r19, 0x66	; 102
    4790:	46 e6       	ldi	r20, 0x66	; 102
    4792:	55 e4       	ldi	r21, 0x45	; 69
    4794:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	8d 83       	std	Y+5, r24	; 0x05
    479e:	9e 83       	std	Y+6, r25	; 0x06
    47a0:	af 83       	std	Y+7, r26	; 0x07
    47a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    47a4:	11 e0       	ldi	r17, 0x01	; 1
    47a6:	6d 81       	ldd	r22, Y+5	; 0x05
    47a8:	7e 81       	ldd	r23, Y+6	; 0x06
    47aa:	8f 81       	ldd	r24, Y+7	; 0x07
    47ac:	98 85       	ldd	r25, Y+8	; 0x08
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	40 e8       	ldi	r20, 0x80	; 128
    47b4:	5f e3       	ldi	r21, 0x3F	; 63
    47b6:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    47ba:	88 23       	and	r24, r24
    47bc:	0c f0       	brlt	.+2      	; 0x47c0 <arm_forward+0x72>
    47be:	10 e0       	ldi	r17, 0x00	; 0
    47c0:	11 23       	and	r17, r17
    47c2:	29 f0       	breq	.+10     	; 0x47ce <arm_forward+0x80>
		__ticks = 1;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	9a 87       	std	Y+10, r25	; 0x0a
    47ca:	89 87       	std	Y+9, r24	; 0x09
    47cc:	46 c0       	rjmp	.+140    	; 0x485a <arm_forward+0x10c>
	else if (__tmp > 65535)
    47ce:	11 e0       	ldi	r17, 0x01	; 1
    47d0:	6d 81       	ldd	r22, Y+5	; 0x05
    47d2:	7e 81       	ldd	r23, Y+6	; 0x06
    47d4:	8f 81       	ldd	r24, Y+7	; 0x07
    47d6:	98 85       	ldd	r25, Y+8	; 0x08
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	4f e7       	ldi	r20, 0x7F	; 127
    47de:	57 e4       	ldi	r21, 0x47	; 71
    47e0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	0c f0       	brlt	.+2      	; 0x47ea <arm_forward+0x9c>
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	11 23       	and	r17, r17
    47ec:	61 f1       	breq	.+88     	; 0x4846 <arm_forward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ee:	69 81       	ldd	r22, Y+1	; 0x01
    47f0:	7a 81       	ldd	r23, Y+2	; 0x02
    47f2:	8b 81       	ldd	r24, Y+3	; 0x03
    47f4:	9c 81       	ldd	r25, Y+4	; 0x04
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	40 e2       	ldi	r20, 0x20	; 32
    47fc:	51 e4       	ldi	r21, 0x41	; 65
    47fe:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4802:	dc 01       	movw	r26, r24
    4804:	cb 01       	movw	r24, r22
    4806:	bc 01       	movw	r22, r24
    4808:	cd 01       	movw	r24, r26
    480a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    480e:	dc 01       	movw	r26, r24
    4810:	cb 01       	movw	r24, r22
    4812:	9a 87       	std	Y+10, r25	; 0x0a
    4814:	89 87       	std	Y+9, r24	; 0x09
    4816:	12 c0       	rjmp	.+36     	; 0x483c <arm_forward+0xee>
    4818:	80 e7       	ldi	r24, 0x70	; 112
    481a:	91 e0       	ldi	r25, 0x01	; 1
    481c:	9c 87       	std	Y+12, r25	; 0x0c
    481e:	8b 87       	std	Y+11, r24	; 0x0b
    4820:	8b 85       	ldd	r24, Y+11	; 0x0b
    4822:	9c 85       	ldd	r25, Y+12	; 0x0c
    4824:	8c 01       	movw	r16, r24
    4826:	c8 01       	movw	r24, r16
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <arm_forward+0xda>
    482c:	8c 01       	movw	r16, r24
    482e:	1c 87       	std	Y+12, r17	; 0x0c
    4830:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4832:	89 85       	ldd	r24, Y+9	; 0x09
    4834:	9a 85       	ldd	r25, Y+10	; 0x0a
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	9a 87       	std	Y+10, r25	; 0x0a
    483a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483c:	89 85       	ldd	r24, Y+9	; 0x09
    483e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	51 f7       	brne	.-44     	; 0x4818 <arm_forward+0xca>
    4844:	17 c0       	rjmp	.+46     	; 0x4874 <arm_forward+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4846:	6d 81       	ldd	r22, Y+5	; 0x05
    4848:	7e 81       	ldd	r23, Y+6	; 0x06
    484a:	8f 81       	ldd	r24, Y+7	; 0x07
    484c:	98 85       	ldd	r25, Y+8	; 0x08
    484e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9a 87       	std	Y+10, r25	; 0x0a
    4858:	89 87       	std	Y+9, r24	; 0x09
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	9e 87       	std	Y+14, r25	; 0x0e
    4860:	8d 87       	std	Y+13, r24	; 0x0d
    4862:	8d 85       	ldd	r24, Y+13	; 0x0d
    4864:	9e 85       	ldd	r25, Y+14	; 0x0e
    4866:	8c 01       	movw	r16, r24
    4868:	c8 01       	movw	r24, r16
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	f1 f7       	brne	.-4      	; 0x486a <arm_forward+0x11c>
    486e:	8c 01       	movw	r16, r24
    4870:	1e 87       	std	Y+14, r17	; 0x0e
    4872:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To bend the arm in the forward direction
*Example Call:       arm_forward();
*/
void arm_forward()
{
	for(ii=0;ii<55;ii++)
    4874:	80 91 39 03 	lds	r24, 0x0339
    4878:	8f 5f       	subi	r24, 0xFF	; 255
    487a:	80 93 39 03 	sts	0x0339, r24
    487e:	80 91 39 03 	lds	r24, 0x0339
    4882:	87 33       	cpi	r24, 0x37	; 55
    4884:	08 f4       	brcc	.+2      	; 0x4888 <arm_forward+0x13a>
    4886:	72 cf       	rjmp	.-284    	; 0x476c <arm_forward+0x1e>
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	a6 e9       	ldi	r26, 0x96	; 150
    488e:	b3 e4       	ldi	r27, 0x43	; 67
    4890:	8f 87       	std	Y+15, r24	; 0x0f
    4892:	98 8b       	std	Y+16, r25	; 0x10
    4894:	a9 8b       	std	Y+17, r26	; 0x11
    4896:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4898:	6f 85       	ldd	r22, Y+15	; 0x0f
    489a:	78 89       	ldd	r23, Y+16	; 0x10
    489c:	89 89       	ldd	r24, Y+17	; 0x11
    489e:	9a 89       	ldd	r25, Y+18	; 0x12
    48a0:	26 e6       	ldi	r18, 0x66	; 102
    48a2:	36 e6       	ldi	r19, 0x66	; 102
    48a4:	46 e6       	ldi	r20, 0x66	; 102
    48a6:	55 e4       	ldi	r21, 0x45	; 69
    48a8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    48ac:	dc 01       	movw	r26, r24
    48ae:	cb 01       	movw	r24, r22
    48b0:	8b 8b       	std	Y+19, r24	; 0x13
    48b2:	9c 8b       	std	Y+20, r25	; 0x14
    48b4:	ad 8b       	std	Y+21, r26	; 0x15
    48b6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    48b8:	11 e0       	ldi	r17, 0x01	; 1
    48ba:	6b 89       	ldd	r22, Y+19	; 0x13
    48bc:	7c 89       	ldd	r23, Y+20	; 0x14
    48be:	8d 89       	ldd	r24, Y+21	; 0x15
    48c0:	9e 89       	ldd	r25, Y+22	; 0x16
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e8       	ldi	r20, 0x80	; 128
    48c8:	5f e3       	ldi	r21, 0x3F	; 63
    48ca:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    48ce:	88 23       	and	r24, r24
    48d0:	0c f0       	brlt	.+2      	; 0x48d4 <arm_forward+0x186>
    48d2:	10 e0       	ldi	r17, 0x00	; 0
    48d4:	11 23       	and	r17, r17
    48d6:	29 f0       	breq	.+10     	; 0x48e2 <arm_forward+0x194>
		__ticks = 1;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	98 8f       	std	Y+24, r25	; 0x18
    48de:	8f 8b       	std	Y+23, r24	; 0x17
    48e0:	46 c0       	rjmp	.+140    	; 0x496e <arm_forward+0x220>
	else if (__tmp > 65535)
    48e2:	11 e0       	ldi	r17, 0x01	; 1
    48e4:	6b 89       	ldd	r22, Y+19	; 0x13
    48e6:	7c 89       	ldd	r23, Y+20	; 0x14
    48e8:	8d 89       	ldd	r24, Y+21	; 0x15
    48ea:	9e 89       	ldd	r25, Y+22	; 0x16
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	3f ef       	ldi	r19, 0xFF	; 255
    48f0:	4f e7       	ldi	r20, 0x7F	; 127
    48f2:	57 e4       	ldi	r21, 0x47	; 71
    48f4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    48f8:	18 16       	cp	r1, r24
    48fa:	0c f0       	brlt	.+2      	; 0x48fe <arm_forward+0x1b0>
    48fc:	10 e0       	ldi	r17, 0x00	; 0
    48fe:	11 23       	and	r17, r17
    4900:	61 f1       	breq	.+88     	; 0x495a <arm_forward+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4902:	6f 85       	ldd	r22, Y+15	; 0x0f
    4904:	78 89       	ldd	r23, Y+16	; 0x10
    4906:	89 89       	ldd	r24, Y+17	; 0x11
    4908:	9a 89       	ldd	r25, Y+18	; 0x12
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	40 e2       	ldi	r20, 0x20	; 32
    4910:	51 e4       	ldi	r21, 0x41	; 65
    4912:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	bc 01       	movw	r22, r24
    491c:	cd 01       	movw	r24, r26
    491e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	98 8f       	std	Y+24, r25	; 0x18
    4928:	8f 8b       	std	Y+23, r24	; 0x17
    492a:	12 c0       	rjmp	.+36     	; 0x4950 <arm_forward+0x202>
    492c:	80 e7       	ldi	r24, 0x70	; 112
    492e:	91 e0       	ldi	r25, 0x01	; 1
    4930:	9a 8f       	std	Y+26, r25	; 0x1a
    4932:	89 8f       	std	Y+25, r24	; 0x19
    4934:	89 8d       	ldd	r24, Y+25	; 0x19
    4936:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4938:	8c 01       	movw	r16, r24
    493a:	c8 01       	movw	r24, r16
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	f1 f7       	brne	.-4      	; 0x493c <arm_forward+0x1ee>
    4940:	8c 01       	movw	r16, r24
    4942:	1a 8f       	std	Y+26, r17	; 0x1a
    4944:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4946:	8f 89       	ldd	r24, Y+23	; 0x17
    4948:	98 8d       	ldd	r25, Y+24	; 0x18
    494a:	01 97       	sbiw	r24, 0x01	; 1
    494c:	98 8f       	std	Y+24, r25	; 0x18
    494e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4950:	8f 89       	ldd	r24, Y+23	; 0x17
    4952:	98 8d       	ldd	r25, Y+24	; 0x18
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	51 f7       	brne	.-44     	; 0x492c <arm_forward+0x1de>
    4958:	17 c0       	rjmp	.+46     	; 0x4988 <arm_forward+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    495a:	6b 89       	ldd	r22, Y+19	; 0x13
    495c:	7c 89       	ldd	r23, Y+20	; 0x14
    495e:	8d 89       	ldd	r24, Y+21	; 0x15
    4960:	9e 89       	ldd	r25, Y+22	; 0x16
    4962:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	98 8f       	std	Y+24, r25	; 0x18
    496c:	8f 8b       	std	Y+23, r24	; 0x17
    496e:	8f 89       	ldd	r24, Y+23	; 0x17
    4970:	98 8d       	ldd	r25, Y+24	; 0x18
    4972:	9c 8f       	std	Y+28, r25	; 0x1c
    4974:	8b 8f       	std	Y+27, r24	; 0x1b
    4976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    497a:	8c 01       	movw	r16, r24
    497c:	c8 01       	movw	r24, r16
    497e:	01 97       	sbiw	r24, 0x01	; 1
    4980:	f1 f7       	brne	.-4      	; 0x497e <arm_forward+0x230>
    4982:	8c 01       	movw	r16, r24
    4984:	1c 8f       	std	Y+28, r17	; 0x1c
    4986:	0b 8f       	std	Y+27, r16	; 0x1b
		servo_2(ii);
		_delay_ms(10);
	}
	_delay_ms(300);
	
}
    4988:	6c 96       	adiw	r28, 0x1c	; 28
    498a:	0f b6       	in	r0, 0x3f	; 63
    498c:	f8 94       	cli
    498e:	de bf       	out	0x3e, r29	; 62
    4990:	0f be       	out	0x3f, r0	; 63
    4992:	cd bf       	out	0x3d, r28	; 61
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	1f 91       	pop	r17
    499a:	0f 91       	pop	r16
    499c:	08 95       	ret

0000499e <arm_backward>:
*Output:             None
*Logic:              To bend the arm backward
*Example Call:       arm_backward();
*/
void arm_backward()
{
    499e:	0f 93       	push	r16
    49a0:	1f 93       	push	r17
    49a2:	cf 93       	push	r28
    49a4:	df 93       	push	r29
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	2e 97       	sbiw	r28, 0x0e	; 14
    49ac:	0f b6       	in	r0, 0x3f	; 63
    49ae:	f8 94       	cli
    49b0:	de bf       	out	0x3e, r29	; 62
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	cd bf       	out	0x3d, r28	; 61
	for(ii=60;ii>0;ii--)
    49b6:	8c e3       	ldi	r24, 0x3C	; 60
    49b8:	80 93 39 03 	sts	0x0339, r24
    49bc:	89 c0       	rjmp	.+274    	; 0x4ad0 <arm_backward+0x132>
	{
		servo_2(ii);
    49be:	80 91 39 03 	lds	r24, 0x0339
    49c2:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	a0 e2       	ldi	r26, 0x20	; 32
    49cc:	b1 e4       	ldi	r27, 0x41	; 65
    49ce:	89 83       	std	Y+1, r24	; 0x01
    49d0:	9a 83       	std	Y+2, r25	; 0x02
    49d2:	ab 83       	std	Y+3, r26	; 0x03
    49d4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49d6:	69 81       	ldd	r22, Y+1	; 0x01
    49d8:	7a 81       	ldd	r23, Y+2	; 0x02
    49da:	8b 81       	ldd	r24, Y+3	; 0x03
    49dc:	9c 81       	ldd	r25, Y+4	; 0x04
    49de:	26 e6       	ldi	r18, 0x66	; 102
    49e0:	36 e6       	ldi	r19, 0x66	; 102
    49e2:	46 e6       	ldi	r20, 0x66	; 102
    49e4:	55 e4       	ldi	r21, 0x45	; 69
    49e6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    49ea:	dc 01       	movw	r26, r24
    49ec:	cb 01       	movw	r24, r22
    49ee:	8d 83       	std	Y+5, r24	; 0x05
    49f0:	9e 83       	std	Y+6, r25	; 0x06
    49f2:	af 83       	std	Y+7, r26	; 0x07
    49f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    49f6:	11 e0       	ldi	r17, 0x01	; 1
    49f8:	6d 81       	ldd	r22, Y+5	; 0x05
    49fa:	7e 81       	ldd	r23, Y+6	; 0x06
    49fc:	8f 81       	ldd	r24, Y+7	; 0x07
    49fe:	98 85       	ldd	r25, Y+8	; 0x08
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	40 e8       	ldi	r20, 0x80	; 128
    4a06:	5f e3       	ldi	r21, 0x3F	; 63
    4a08:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    4a0c:	88 23       	and	r24, r24
    4a0e:	0c f0       	brlt	.+2      	; 0x4a12 <arm_backward+0x74>
    4a10:	10 e0       	ldi	r17, 0x00	; 0
    4a12:	11 23       	and	r17, r17
    4a14:	29 f0       	breq	.+10     	; 0x4a20 <arm_backward+0x82>
		__ticks = 1;
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	9a 87       	std	Y+10, r25	; 0x0a
    4a1c:	89 87       	std	Y+9, r24	; 0x09
    4a1e:	46 c0       	rjmp	.+140    	; 0x4aac <arm_backward+0x10e>
	else if (__tmp > 65535)
    4a20:	11 e0       	ldi	r17, 0x01	; 1
    4a22:	6d 81       	ldd	r22, Y+5	; 0x05
    4a24:	7e 81       	ldd	r23, Y+6	; 0x06
    4a26:	8f 81       	ldd	r24, Y+7	; 0x07
    4a28:	98 85       	ldd	r25, Y+8	; 0x08
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	3f ef       	ldi	r19, 0xFF	; 255
    4a2e:	4f e7       	ldi	r20, 0x7F	; 127
    4a30:	57 e4       	ldi	r21, 0x47	; 71
    4a32:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4a36:	18 16       	cp	r1, r24
    4a38:	0c f0       	brlt	.+2      	; 0x4a3c <arm_backward+0x9e>
    4a3a:	10 e0       	ldi	r17, 0x00	; 0
    4a3c:	11 23       	and	r17, r17
    4a3e:	61 f1       	breq	.+88     	; 0x4a98 <arm_backward+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a40:	69 81       	ldd	r22, Y+1	; 0x01
    4a42:	7a 81       	ldd	r23, Y+2	; 0x02
    4a44:	8b 81       	ldd	r24, Y+3	; 0x03
    4a46:	9c 81       	ldd	r25, Y+4	; 0x04
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	40 e2       	ldi	r20, 0x20	; 32
    4a4e:	51 e4       	ldi	r21, 0x41	; 65
    4a50:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	bc 01       	movw	r22, r24
    4a5a:	cd 01       	movw	r24, r26
    4a5c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	9a 87       	std	Y+10, r25	; 0x0a
    4a66:	89 87       	std	Y+9, r24	; 0x09
    4a68:	12 c0       	rjmp	.+36     	; 0x4a8e <arm_backward+0xf0>
    4a6a:	80 e7       	ldi	r24, 0x70	; 112
    4a6c:	91 e0       	ldi	r25, 0x01	; 1
    4a6e:	9c 87       	std	Y+12, r25	; 0x0c
    4a70:	8b 87       	std	Y+11, r24	; 0x0b
    4a72:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a74:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a76:	8c 01       	movw	r16, r24
    4a78:	c8 01       	movw	r24, r16
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	f1 f7       	brne	.-4      	; 0x4a7a <arm_backward+0xdc>
    4a7e:	8c 01       	movw	r16, r24
    4a80:	1c 87       	std	Y+12, r17	; 0x0c
    4a82:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a84:	89 85       	ldd	r24, Y+9	; 0x09
    4a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a88:	01 97       	sbiw	r24, 0x01	; 1
    4a8a:	9a 87       	std	Y+10, r25	; 0x0a
    4a8c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8e:	89 85       	ldd	r24, Y+9	; 0x09
    4a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    4a94:	51 f7       	brne	.-44     	; 0x4a6a <arm_backward+0xcc>
    4a96:	17 c0       	rjmp	.+46     	; 0x4ac6 <arm_backward+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a98:	6d 81       	ldd	r22, Y+5	; 0x05
    4a9a:	7e 81       	ldd	r23, Y+6	; 0x06
    4a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a9e:	98 85       	ldd	r25, Y+8	; 0x08
    4aa0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	9a 87       	std	Y+10, r25	; 0x0a
    4aaa:	89 87       	std	Y+9, r24	; 0x09
    4aac:	89 85       	ldd	r24, Y+9	; 0x09
    4aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab0:	9e 87       	std	Y+14, r25	; 0x0e
    4ab2:	8d 87       	std	Y+13, r24	; 0x0d
    4ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab8:	8c 01       	movw	r16, r24
    4aba:	c8 01       	movw	r24, r16
    4abc:	01 97       	sbiw	r24, 0x01	; 1
    4abe:	f1 f7       	brne	.-4      	; 0x4abc <arm_backward+0x11e>
    4ac0:	8c 01       	movw	r16, r24
    4ac2:	1e 87       	std	Y+14, r17	; 0x0e
    4ac4:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To bend the arm backward
*Example Call:       arm_backward();
*/
void arm_backward()
{
	for(ii=60;ii>0;ii--)
    4ac6:	80 91 39 03 	lds	r24, 0x0339
    4aca:	81 50       	subi	r24, 0x01	; 1
    4acc:	80 93 39 03 	sts	0x0339, r24
    4ad0:	80 91 39 03 	lds	r24, 0x0339
    4ad4:	88 23       	and	r24, r24
    4ad6:	09 f0       	breq	.+2      	; 0x4ada <arm_backward+0x13c>
    4ad8:	72 cf       	rjmp	.-284    	; 0x49be <arm_backward+0x20>
	{
		servo_2(ii);
		_delay_ms(10);
	}
	
}
    4ada:	2e 96       	adiw	r28, 0x0e	; 14
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	1f 91       	pop	r17
    4aec:	0f 91       	pop	r16
    4aee:	08 95       	ret

00004af0 <reset1>:
*Output:             None
*Logic:              To free all the servo motors used in the arm
*Example Call:       reset1();
*/
void reset1()
{
    4af0:	cf 93       	push	r28
    4af2:	df 93       	push	r29
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
	servo_1_free();
    4af8:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <servo_1_free>
	servo_2_free();
    4afc:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <servo_2_free>
	servo_3_free();
    4b00:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <servo_3_free>
}
    4b04:	df 91       	pop	r29
    4b06:	cf 91       	pop	r28
    4b08:	08 95       	ret

00004b0a <defaulty>:
*Output:             None
*Logic:              To bring the arm to its default position
*Example Call:       defaulty();
*/
void defaulty()
{
    4b0a:	0f 93       	push	r16
    4b0c:	1f 93       	push	r17
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
    4b12:	cd b7       	in	r28, 0x3d	; 61
    4b14:	de b7       	in	r29, 0x3e	; 62
    4b16:	6c 97       	sbiw	r28, 0x1c	; 28
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	0f be       	out	0x3f, r0	; 63
    4b20:	cd bf       	out	0x3d, r28	; 61
	servo_1(95);
    4b22:	8f e5       	ldi	r24, 0x5F	; 95
    4b24:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	a6 e9       	ldi	r26, 0x96	; 150
    4b2e:	b3 e4       	ldi	r27, 0x43	; 67
    4b30:	89 83       	std	Y+1, r24	; 0x01
    4b32:	9a 83       	std	Y+2, r25	; 0x02
    4b34:	ab 83       	std	Y+3, r26	; 0x03
    4b36:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4b38:	69 81       	ldd	r22, Y+1	; 0x01
    4b3a:	7a 81       	ldd	r23, Y+2	; 0x02
    4b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b40:	26 e6       	ldi	r18, 0x66	; 102
    4b42:	36 e6       	ldi	r19, 0x66	; 102
    4b44:	46 e6       	ldi	r20, 0x66	; 102
    4b46:	55 e4       	ldi	r21, 0x45	; 69
    4b48:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	8d 83       	std	Y+5, r24	; 0x05
    4b52:	9e 83       	std	Y+6, r25	; 0x06
    4b54:	af 83       	std	Y+7, r26	; 0x07
    4b56:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4b58:	11 e0       	ldi	r17, 0x01	; 1
    4b5a:	6d 81       	ldd	r22, Y+5	; 0x05
    4b5c:	7e 81       	ldd	r23, Y+6	; 0x06
    4b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    4b60:	98 85       	ldd	r25, Y+8	; 0x08
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e8       	ldi	r20, 0x80	; 128
    4b68:	5f e3       	ldi	r21, 0x3F	; 63
    4b6a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    4b6e:	88 23       	and	r24, r24
    4b70:	0c f0       	brlt	.+2      	; 0x4b74 <defaulty+0x6a>
    4b72:	10 e0       	ldi	r17, 0x00	; 0
    4b74:	11 23       	and	r17, r17
    4b76:	29 f0       	breq	.+10     	; 0x4b82 <defaulty+0x78>
		__ticks = 1;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	9a 87       	std	Y+10, r25	; 0x0a
    4b7e:	89 87       	std	Y+9, r24	; 0x09
    4b80:	46 c0       	rjmp	.+140    	; 0x4c0e <defaulty+0x104>
	else if (__tmp > 65535)
    4b82:	11 e0       	ldi	r17, 0x01	; 1
    4b84:	6d 81       	ldd	r22, Y+5	; 0x05
    4b86:	7e 81       	ldd	r23, Y+6	; 0x06
    4b88:	8f 81       	ldd	r24, Y+7	; 0x07
    4b8a:	98 85       	ldd	r25, Y+8	; 0x08
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	3f ef       	ldi	r19, 0xFF	; 255
    4b90:	4f e7       	ldi	r20, 0x7F	; 127
    4b92:	57 e4       	ldi	r21, 0x47	; 71
    4b94:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4b98:	18 16       	cp	r1, r24
    4b9a:	0c f0       	brlt	.+2      	; 0x4b9e <defaulty+0x94>
    4b9c:	10 e0       	ldi	r17, 0x00	; 0
    4b9e:	11 23       	and	r17, r17
    4ba0:	61 f1       	breq	.+88     	; 0x4bfa <defaulty+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ba2:	69 81       	ldd	r22, Y+1	; 0x01
    4ba4:	7a 81       	ldd	r23, Y+2	; 0x02
    4ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	40 e2       	ldi	r20, 0x20	; 32
    4bb0:	51 e4       	ldi	r21, 0x41	; 65
    4bb2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4bb6:	dc 01       	movw	r26, r24
    4bb8:	cb 01       	movw	r24, r22
    4bba:	bc 01       	movw	r22, r24
    4bbc:	cd 01       	movw	r24, r26
    4bbe:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	9a 87       	std	Y+10, r25	; 0x0a
    4bc8:	89 87       	std	Y+9, r24	; 0x09
    4bca:	12 c0       	rjmp	.+36     	; 0x4bf0 <defaulty+0xe6>
    4bcc:	80 e7       	ldi	r24, 0x70	; 112
    4bce:	91 e0       	ldi	r25, 0x01	; 1
    4bd0:	9c 87       	std	Y+12, r25	; 0x0c
    4bd2:	8b 87       	std	Y+11, r24	; 0x0b
    4bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bd8:	8c 01       	movw	r16, r24
    4bda:	c8 01       	movw	r24, r16
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	f1 f7       	brne	.-4      	; 0x4bdc <defaulty+0xd2>
    4be0:	8c 01       	movw	r16, r24
    4be2:	1c 87       	std	Y+12, r17	; 0x0c
    4be4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be6:	89 85       	ldd	r24, Y+9	; 0x09
    4be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	9a 87       	std	Y+10, r25	; 0x0a
    4bee:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf0:	89 85       	ldd	r24, Y+9	; 0x09
    4bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf4:	00 97       	sbiw	r24, 0x00	; 0
    4bf6:	51 f7       	brne	.-44     	; 0x4bcc <defaulty+0xc2>
    4bf8:	17 c0       	rjmp	.+46     	; 0x4c28 <defaulty+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bfa:	6d 81       	ldd	r22, Y+5	; 0x05
    4bfc:	7e 81       	ldd	r23, Y+6	; 0x06
    4bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    4c00:	98 85       	ldd	r25, Y+8	; 0x08
    4c02:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	9a 87       	std	Y+10, r25	; 0x0a
    4c0c:	89 87       	std	Y+9, r24	; 0x09
    4c0e:	89 85       	ldd	r24, Y+9	; 0x09
    4c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c12:	9e 87       	std	Y+14, r25	; 0x0e
    4c14:	8d 87       	std	Y+13, r24	; 0x0d
    4c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c1a:	8c 01       	movw	r16, r24
    4c1c:	c8 01       	movw	r24, r16
    4c1e:	01 97       	sbiw	r24, 0x01	; 1
    4c20:	f1 f7       	brne	.-4      	; 0x4c1e <defaulty+0x114>
    4c22:	8c 01       	movw	r16, r24
    4c24:	1e 87       	std	Y+14, r17	; 0x0e
    4c26:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	servo_2(0);
    4c28:	80 e0       	ldi	r24, 0x00	; 0
    4c2a:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a6 e9       	ldi	r26, 0x96	; 150
    4c34:	b3 e4       	ldi	r27, 0x43	; 67
    4c36:	8f 87       	std	Y+15, r24	; 0x0f
    4c38:	98 8b       	std	Y+16, r25	; 0x10
    4c3a:	a9 8b       	std	Y+17, r26	; 0x11
    4c3c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c3e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c40:	78 89       	ldd	r23, Y+16	; 0x10
    4c42:	89 89       	ldd	r24, Y+17	; 0x11
    4c44:	9a 89       	ldd	r25, Y+18	; 0x12
    4c46:	26 e6       	ldi	r18, 0x66	; 102
    4c48:	36 e6       	ldi	r19, 0x66	; 102
    4c4a:	46 e6       	ldi	r20, 0x66	; 102
    4c4c:	55 e4       	ldi	r21, 0x45	; 69
    4c4e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	8b 8b       	std	Y+19, r24	; 0x13
    4c58:	9c 8b       	std	Y+20, r25	; 0x14
    4c5a:	ad 8b       	std	Y+21, r26	; 0x15
    4c5c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4c5e:	11 e0       	ldi	r17, 0x01	; 1
    4c60:	6b 89       	ldd	r22, Y+19	; 0x13
    4c62:	7c 89       	ldd	r23, Y+20	; 0x14
    4c64:	8d 89       	ldd	r24, Y+21	; 0x15
    4c66:	9e 89       	ldd	r25, Y+22	; 0x16
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	40 e8       	ldi	r20, 0x80	; 128
    4c6e:	5f e3       	ldi	r21, 0x3F	; 63
    4c70:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    4c74:	88 23       	and	r24, r24
    4c76:	0c f0       	brlt	.+2      	; 0x4c7a <defaulty+0x170>
    4c78:	10 e0       	ldi	r17, 0x00	; 0
    4c7a:	11 23       	and	r17, r17
    4c7c:	29 f0       	breq	.+10     	; 0x4c88 <defaulty+0x17e>
		__ticks = 1;
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	98 8f       	std	Y+24, r25	; 0x18
    4c84:	8f 8b       	std	Y+23, r24	; 0x17
    4c86:	46 c0       	rjmp	.+140    	; 0x4d14 <defaulty+0x20a>
	else if (__tmp > 65535)
    4c88:	11 e0       	ldi	r17, 0x01	; 1
    4c8a:	6b 89       	ldd	r22, Y+19	; 0x13
    4c8c:	7c 89       	ldd	r23, Y+20	; 0x14
    4c8e:	8d 89       	ldd	r24, Y+21	; 0x15
    4c90:	9e 89       	ldd	r25, Y+22	; 0x16
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	3f ef       	ldi	r19, 0xFF	; 255
    4c96:	4f e7       	ldi	r20, 0x7F	; 127
    4c98:	57 e4       	ldi	r21, 0x47	; 71
    4c9a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4c9e:	18 16       	cp	r1, r24
    4ca0:	0c f0       	brlt	.+2      	; 0x4ca4 <defaulty+0x19a>
    4ca2:	10 e0       	ldi	r17, 0x00	; 0
    4ca4:	11 23       	and	r17, r17
    4ca6:	61 f1       	breq	.+88     	; 0x4d00 <defaulty+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ca8:	6f 85       	ldd	r22, Y+15	; 0x0f
    4caa:	78 89       	ldd	r23, Y+16	; 0x10
    4cac:	89 89       	ldd	r24, Y+17	; 0x11
    4cae:	9a 89       	ldd	r25, Y+18	; 0x12
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	40 e2       	ldi	r20, 0x20	; 32
    4cb6:	51 e4       	ldi	r21, 0x41	; 65
    4cb8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	bc 01       	movw	r22, r24
    4cc2:	cd 01       	movw	r24, r26
    4cc4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	98 8f       	std	Y+24, r25	; 0x18
    4cce:	8f 8b       	std	Y+23, r24	; 0x17
    4cd0:	12 c0       	rjmp	.+36     	; 0x4cf6 <defaulty+0x1ec>
    4cd2:	80 e7       	ldi	r24, 0x70	; 112
    4cd4:	91 e0       	ldi	r25, 0x01	; 1
    4cd6:	9a 8f       	std	Y+26, r25	; 0x1a
    4cd8:	89 8f       	std	Y+25, r24	; 0x19
    4cda:	89 8d       	ldd	r24, Y+25	; 0x19
    4cdc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4cde:	8c 01       	movw	r16, r24
    4ce0:	c8 01       	movw	r24, r16
    4ce2:	01 97       	sbiw	r24, 0x01	; 1
    4ce4:	f1 f7       	brne	.-4      	; 0x4ce2 <defaulty+0x1d8>
    4ce6:	8c 01       	movw	r16, r24
    4ce8:	1a 8f       	std	Y+26, r17	; 0x1a
    4cea:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cec:	8f 89       	ldd	r24, Y+23	; 0x17
    4cee:	98 8d       	ldd	r25, Y+24	; 0x18
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	98 8f       	std	Y+24, r25	; 0x18
    4cf4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    4cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    4cfa:	00 97       	sbiw	r24, 0x00	; 0
    4cfc:	51 f7       	brne	.-44     	; 0x4cd2 <defaulty+0x1c8>
    4cfe:	17 c0       	rjmp	.+46     	; 0x4d2e <defaulty+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d00:	6b 89       	ldd	r22, Y+19	; 0x13
    4d02:	7c 89       	ldd	r23, Y+20	; 0x14
    4d04:	8d 89       	ldd	r24, Y+21	; 0x15
    4d06:	9e 89       	ldd	r25, Y+22	; 0x16
    4d08:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4d0c:	dc 01       	movw	r26, r24
    4d0e:	cb 01       	movw	r24, r22
    4d10:	98 8f       	std	Y+24, r25	; 0x18
    4d12:	8f 8b       	std	Y+23, r24	; 0x17
    4d14:	8f 89       	ldd	r24, Y+23	; 0x17
    4d16:	98 8d       	ldd	r25, Y+24	; 0x18
    4d18:	9c 8f       	std	Y+28, r25	; 0x1c
    4d1a:	8b 8f       	std	Y+27, r24	; 0x1b
    4d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d20:	8c 01       	movw	r16, r24
    4d22:	c8 01       	movw	r24, r16
    4d24:	01 97       	sbiw	r24, 0x01	; 1
    4d26:	f1 f7       	brne	.-4      	; 0x4d24 <defaulty+0x21a>
    4d28:	8c 01       	movw	r16, r24
    4d2a:	1c 8f       	std	Y+28, r17	; 0x1c
    4d2c:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
}
    4d2e:	6c 96       	adiw	r28, 0x1c	; 28
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	f8 94       	cli
    4d34:	de bf       	out	0x3e, r29	; 62
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	cd bf       	out	0x3d, r28	; 61
    4d3a:	df 91       	pop	r29
    4d3c:	cf 91       	pop	r28
    4d3e:	1f 91       	pop	r17
    4d40:	0f 91       	pop	r16
    4d42:	08 95       	ret

00004d44 <drop>:
*Output:             None
*Logic:              To place the animals in their respective habitats
*Example Call:       drop();
*/
void drop()
{   
    4d44:	0f 93       	push	r16
    4d46:	1f 93       	push	r17
    4d48:	cf 93       	push	r28
    4d4a:	df 93       	push	r29
    4d4c:	cd b7       	in	r28, 0x3d	; 61
    4d4e:	de b7       	in	r29, 0x3e	; 62
    4d50:	c4 55       	subi	r28, 0x54	; 84
    4d52:	d0 40       	sbci	r29, 0x00	; 0
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	f8 94       	cli
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	cd bf       	out	0x3d, r28	; 61
	for(ii=95;ii<165;ii++)
    4d5e:	8f e5       	ldi	r24, 0x5F	; 95
    4d60:	80 93 39 03 	sts	0x0339, r24
    4d64:	89 c0       	rjmp	.+274    	; 0x4e78 <drop+0x134>
	{
		servo_1(ii);
    4d66:	80 91 39 03 	lds	r24, 0x0339
    4d6a:	0e 94 be 1c 	call	0x397c	; 0x397c <servo_1>
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	a0 e2       	ldi	r26, 0x20	; 32
    4d74:	b1 e4       	ldi	r27, 0x41	; 65
    4d76:	89 83       	std	Y+1, r24	; 0x01
    4d78:	9a 83       	std	Y+2, r25	; 0x02
    4d7a:	ab 83       	std	Y+3, r26	; 0x03
    4d7c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d7e:	69 81       	ldd	r22, Y+1	; 0x01
    4d80:	7a 81       	ldd	r23, Y+2	; 0x02
    4d82:	8b 81       	ldd	r24, Y+3	; 0x03
    4d84:	9c 81       	ldd	r25, Y+4	; 0x04
    4d86:	26 e6       	ldi	r18, 0x66	; 102
    4d88:	36 e6       	ldi	r19, 0x66	; 102
    4d8a:	46 e6       	ldi	r20, 0x66	; 102
    4d8c:	55 e4       	ldi	r21, 0x45	; 69
    4d8e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	8d 83       	std	Y+5, r24	; 0x05
    4d98:	9e 83       	std	Y+6, r25	; 0x06
    4d9a:	af 83       	std	Y+7, r26	; 0x07
    4d9c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4d9e:	11 e0       	ldi	r17, 0x01	; 1
    4da0:	6d 81       	ldd	r22, Y+5	; 0x05
    4da2:	7e 81       	ldd	r23, Y+6	; 0x06
    4da4:	8f 81       	ldd	r24, Y+7	; 0x07
    4da6:	98 85       	ldd	r25, Y+8	; 0x08
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	40 e8       	ldi	r20, 0x80	; 128
    4dae:	5f e3       	ldi	r21, 0x3F	; 63
    4db0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    4db4:	88 23       	and	r24, r24
    4db6:	0c f0       	brlt	.+2      	; 0x4dba <drop+0x76>
    4db8:	10 e0       	ldi	r17, 0x00	; 0
    4dba:	11 23       	and	r17, r17
    4dbc:	29 f0       	breq	.+10     	; 0x4dc8 <drop+0x84>
		__ticks = 1;
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	9a 87       	std	Y+10, r25	; 0x0a
    4dc4:	89 87       	std	Y+9, r24	; 0x09
    4dc6:	46 c0       	rjmp	.+140    	; 0x4e54 <drop+0x110>
	else if (__tmp > 65535)
    4dc8:	11 e0       	ldi	r17, 0x01	; 1
    4dca:	6d 81       	ldd	r22, Y+5	; 0x05
    4dcc:	7e 81       	ldd	r23, Y+6	; 0x06
    4dce:	8f 81       	ldd	r24, Y+7	; 0x07
    4dd0:	98 85       	ldd	r25, Y+8	; 0x08
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	3f ef       	ldi	r19, 0xFF	; 255
    4dd6:	4f e7       	ldi	r20, 0x7F	; 127
    4dd8:	57 e4       	ldi	r21, 0x47	; 71
    4dda:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4dde:	18 16       	cp	r1, r24
    4de0:	0c f0       	brlt	.+2      	; 0x4de4 <drop+0xa0>
    4de2:	10 e0       	ldi	r17, 0x00	; 0
    4de4:	11 23       	and	r17, r17
    4de6:	61 f1       	breq	.+88     	; 0x4e40 <drop+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de8:	69 81       	ldd	r22, Y+1	; 0x01
    4dea:	7a 81       	ldd	r23, Y+2	; 0x02
    4dec:	8b 81       	ldd	r24, Y+3	; 0x03
    4dee:	9c 81       	ldd	r25, Y+4	; 0x04
    4df0:	20 e0       	ldi	r18, 0x00	; 0
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	40 e2       	ldi	r20, 0x20	; 32
    4df6:	51 e4       	ldi	r21, 0x41	; 65
    4df8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4dfc:	dc 01       	movw	r26, r24
    4dfe:	cb 01       	movw	r24, r22
    4e00:	bc 01       	movw	r22, r24
    4e02:	cd 01       	movw	r24, r26
    4e04:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4e08:	dc 01       	movw	r26, r24
    4e0a:	cb 01       	movw	r24, r22
    4e0c:	9a 87       	std	Y+10, r25	; 0x0a
    4e0e:	89 87       	std	Y+9, r24	; 0x09
    4e10:	12 c0       	rjmp	.+36     	; 0x4e36 <drop+0xf2>
    4e12:	80 e7       	ldi	r24, 0x70	; 112
    4e14:	91 e0       	ldi	r25, 0x01	; 1
    4e16:	9c 87       	std	Y+12, r25	; 0x0c
    4e18:	8b 87       	std	Y+11, r24	; 0x0b
    4e1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e1e:	8c 01       	movw	r16, r24
    4e20:	c8 01       	movw	r24, r16
    4e22:	01 97       	sbiw	r24, 0x01	; 1
    4e24:	f1 f7       	brne	.-4      	; 0x4e22 <drop+0xde>
    4e26:	8c 01       	movw	r16, r24
    4e28:	1c 87       	std	Y+12, r17	; 0x0c
    4e2a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e2c:	89 85       	ldd	r24, Y+9	; 0x09
    4e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	9a 87       	std	Y+10, r25	; 0x0a
    4e34:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e36:	89 85       	ldd	r24, Y+9	; 0x09
    4e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	51 f7       	brne	.-44     	; 0x4e12 <drop+0xce>
    4e3e:	17 c0       	rjmp	.+46     	; 0x4e6e <drop+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e40:	6d 81       	ldd	r22, Y+5	; 0x05
    4e42:	7e 81       	ldd	r23, Y+6	; 0x06
    4e44:	8f 81       	ldd	r24, Y+7	; 0x07
    4e46:	98 85       	ldd	r25, Y+8	; 0x08
    4e48:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	9a 87       	std	Y+10, r25	; 0x0a
    4e52:	89 87       	std	Y+9, r24	; 0x09
    4e54:	89 85       	ldd	r24, Y+9	; 0x09
    4e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e58:	9e 87       	std	Y+14, r25	; 0x0e
    4e5a:	8d 87       	std	Y+13, r24	; 0x0d
    4e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e60:	8c 01       	movw	r16, r24
    4e62:	f8 01       	movw	r30, r16
    4e64:	31 97       	sbiw	r30, 0x01	; 1
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <drop+0x120>
    4e68:	8f 01       	movw	r16, r30
    4e6a:	1e 87       	std	Y+14, r17	; 0x0e
    4e6c:	0d 87       	std	Y+13, r16	; 0x0d
*Logic:              To place the animals in their respective habitats
*Example Call:       drop();
*/
void drop()
{   
	for(ii=95;ii<165;ii++)
    4e6e:	80 91 39 03 	lds	r24, 0x0339
    4e72:	8f 5f       	subi	r24, 0xFF	; 255
    4e74:	80 93 39 03 	sts	0x0339, r24
    4e78:	80 91 39 03 	lds	r24, 0x0339
    4e7c:	85 3a       	cpi	r24, 0xA5	; 165
    4e7e:	08 f4       	brcc	.+2      	; 0x4e82 <drop+0x13e>
    4e80:	72 cf       	rjmp	.-284    	; 0x4d66 <drop+0x22>
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	aa ef       	ldi	r26, 0xFA	; 250
    4e88:	b3 e4       	ldi	r27, 0x43	; 67
    4e8a:	8f 87       	std	Y+15, r24	; 0x0f
    4e8c:	98 8b       	std	Y+16, r25	; 0x10
    4e8e:	a9 8b       	std	Y+17, r26	; 0x11
    4e90:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4e92:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e94:	78 89       	ldd	r23, Y+16	; 0x10
    4e96:	89 89       	ldd	r24, Y+17	; 0x11
    4e98:	9a 89       	ldd	r25, Y+18	; 0x12
    4e9a:	26 e6       	ldi	r18, 0x66	; 102
    4e9c:	36 e6       	ldi	r19, 0x66	; 102
    4e9e:	46 e6       	ldi	r20, 0x66	; 102
    4ea0:	55 e4       	ldi	r21, 0x45	; 69
    4ea2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	8b 8b       	std	Y+19, r24	; 0x13
    4eac:	9c 8b       	std	Y+20, r25	; 0x14
    4eae:	ad 8b       	std	Y+21, r26	; 0x15
    4eb0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4eb2:	11 e0       	ldi	r17, 0x01	; 1
    4eb4:	6b 89       	ldd	r22, Y+19	; 0x13
    4eb6:	7c 89       	ldd	r23, Y+20	; 0x14
    4eb8:	8d 89       	ldd	r24, Y+21	; 0x15
    4eba:	9e 89       	ldd	r25, Y+22	; 0x16
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e8       	ldi	r20, 0x80	; 128
    4ec2:	5f e3       	ldi	r21, 0x3F	; 63
    4ec4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    4ec8:	88 23       	and	r24, r24
    4eca:	0c f0       	brlt	.+2      	; 0x4ece <drop+0x18a>
    4ecc:	10 e0       	ldi	r17, 0x00	; 0
    4ece:	11 23       	and	r17, r17
    4ed0:	29 f0       	breq	.+10     	; 0x4edc <drop+0x198>
		__ticks = 1;
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	98 8f       	std	Y+24, r25	; 0x18
    4ed8:	8f 8b       	std	Y+23, r24	; 0x17
    4eda:	46 c0       	rjmp	.+140    	; 0x4f68 <drop+0x224>
	else if (__tmp > 65535)
    4edc:	11 e0       	ldi	r17, 0x01	; 1
    4ede:	6b 89       	ldd	r22, Y+19	; 0x13
    4ee0:	7c 89       	ldd	r23, Y+20	; 0x14
    4ee2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ee4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	3f ef       	ldi	r19, 0xFF	; 255
    4eea:	4f e7       	ldi	r20, 0x7F	; 127
    4eec:	57 e4       	ldi	r21, 0x47	; 71
    4eee:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    4ef2:	18 16       	cp	r1, r24
    4ef4:	0c f0       	brlt	.+2      	; 0x4ef8 <drop+0x1b4>
    4ef6:	10 e0       	ldi	r17, 0x00	; 0
    4ef8:	11 23       	and	r17, r17
    4efa:	61 f1       	breq	.+88     	; 0x4f54 <drop+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4efc:	6f 85       	ldd	r22, Y+15	; 0x0f
    4efe:	78 89       	ldd	r23, Y+16	; 0x10
    4f00:	89 89       	ldd	r24, Y+17	; 0x11
    4f02:	9a 89       	ldd	r25, Y+18	; 0x12
    4f04:	20 e0       	ldi	r18, 0x00	; 0
    4f06:	30 e0       	ldi	r19, 0x00	; 0
    4f08:	40 e2       	ldi	r20, 0x20	; 32
    4f0a:	51 e4       	ldi	r21, 0x41	; 65
    4f0c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	bc 01       	movw	r22, r24
    4f16:	cd 01       	movw	r24, r26
    4f18:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4f1c:	dc 01       	movw	r26, r24
    4f1e:	cb 01       	movw	r24, r22
    4f20:	98 8f       	std	Y+24, r25	; 0x18
    4f22:	8f 8b       	std	Y+23, r24	; 0x17
    4f24:	12 c0       	rjmp	.+36     	; 0x4f4a <drop+0x206>
    4f26:	80 e7       	ldi	r24, 0x70	; 112
    4f28:	91 e0       	ldi	r25, 0x01	; 1
    4f2a:	9a 8f       	std	Y+26, r25	; 0x1a
    4f2c:	89 8f       	std	Y+25, r24	; 0x19
    4f2e:	89 8d       	ldd	r24, Y+25	; 0x19
    4f30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f32:	8c 01       	movw	r16, r24
    4f34:	c8 01       	movw	r24, r16
    4f36:	01 97       	sbiw	r24, 0x01	; 1
    4f38:	f1 f7       	brne	.-4      	; 0x4f36 <drop+0x1f2>
    4f3a:	8c 01       	movw	r16, r24
    4f3c:	1a 8f       	std	Y+26, r17	; 0x1a
    4f3e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f40:	8f 89       	ldd	r24, Y+23	; 0x17
    4f42:	98 8d       	ldd	r25, Y+24	; 0x18
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	98 8f       	std	Y+24, r25	; 0x18
    4f48:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f4e:	00 97       	sbiw	r24, 0x00	; 0
    4f50:	51 f7       	brne	.-44     	; 0x4f26 <drop+0x1e2>
    4f52:	17 c0       	rjmp	.+46     	; 0x4f82 <drop+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f54:	6b 89       	ldd	r22, Y+19	; 0x13
    4f56:	7c 89       	ldd	r23, Y+20	; 0x14
    4f58:	8d 89       	ldd	r24, Y+21	; 0x15
    4f5a:	9e 89       	ldd	r25, Y+22	; 0x16
    4f5c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	98 8f       	std	Y+24, r25	; 0x18
    4f66:	8f 8b       	std	Y+23, r24	; 0x17
    4f68:	8f 89       	ldd	r24, Y+23	; 0x17
    4f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4f6c:	9c 8f       	std	Y+28, r25	; 0x1c
    4f6e:	8b 8f       	std	Y+27, r24	; 0x1b
    4f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f74:	8c 01       	movw	r16, r24
    4f76:	f8 01       	movw	r30, r16
    4f78:	31 97       	sbiw	r30, 0x01	; 1
    4f7a:	f1 f7       	brne	.-4      	; 0x4f78 <drop+0x234>
    4f7c:	8f 01       	movw	r16, r30
    4f7e:	1c 8f       	std	Y+28, r17	; 0x1c
    4f80:	0b 8f       	std	Y+27, r16	; 0x1b
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(500);
	for(ii=0;ii<40;ii++)
    4f82:	10 92 39 03 	sts	0x0339, r1
    4f86:	89 c0       	rjmp	.+274    	; 0x509a <drop+0x356>
	{
		servo_2(ii);
    4f88:	80 91 39 03 	lds	r24, 0x0339
    4f8c:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    4f90:	80 e0       	ldi	r24, 0x00	; 0
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	a0 e2       	ldi	r26, 0x20	; 32
    4f96:	b1 e4       	ldi	r27, 0x41	; 65
    4f98:	8d 8f       	std	Y+29, r24	; 0x1d
    4f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    4f9c:	af 8f       	std	Y+31, r26	; 0x1f
    4f9e:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4fa0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4fa2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fa6:	98 a1       	lds	r25, 0x48
    4fa8:	26 e6       	ldi	r18, 0x66	; 102
    4faa:	36 e6       	ldi	r19, 0x66	; 102
    4fac:	46 e6       	ldi	r20, 0x66	; 102
    4fae:	55 e4       	ldi	r21, 0x45	; 69
    4fb0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    4fb4:	dc 01       	movw	r26, r24
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	89 a3       	lds	r24, 0x59
    4fba:	9a a3       	lds	r25, 0x5a
    4fbc:	ab a3       	lds	r26, 0x5b
    4fbe:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    4fc0:	11 e0       	ldi	r17, 0x01	; 1
    4fc2:	69 a1       	lds	r22, 0x49
    4fc4:	7a a1       	lds	r23, 0x4a
    4fc6:	8b a1       	lds	r24, 0x4b
    4fc8:	9c a1       	lds	r25, 0x4c
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e8       	ldi	r20, 0x80	; 128
    4fd0:	5f e3       	ldi	r21, 0x3F	; 63
    4fd2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    4fd6:	88 23       	and	r24, r24
    4fd8:	0c f0       	brlt	.+2      	; 0x4fdc <drop+0x298>
    4fda:	10 e0       	ldi	r17, 0x00	; 0
    4fdc:	11 23       	and	r17, r17
    4fde:	29 f0       	breq	.+10     	; 0x4fea <drop+0x2a6>
		__ticks = 1;
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	9e a3       	lds	r25, 0x5e
    4fe6:	8d a3       	lds	r24, 0x5d
    4fe8:	46 c0       	rjmp	.+140    	; 0x5076 <drop+0x332>
	else if (__tmp > 65535)
    4fea:	11 e0       	ldi	r17, 0x01	; 1
    4fec:	69 a1       	lds	r22, 0x49
    4fee:	7a a1       	lds	r23, 0x4a
    4ff0:	8b a1       	lds	r24, 0x4b
    4ff2:	9c a1       	lds	r25, 0x4c
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	3f ef       	ldi	r19, 0xFF	; 255
    4ff8:	4f e7       	ldi	r20, 0x7F	; 127
    4ffa:	57 e4       	ldi	r21, 0x47	; 71
    4ffc:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5000:	18 16       	cp	r1, r24
    5002:	0c f0       	brlt	.+2      	; 0x5006 <drop+0x2c2>
    5004:	10 e0       	ldi	r17, 0x00	; 0
    5006:	11 23       	and	r17, r17
    5008:	61 f1       	breq	.+88     	; 0x5062 <drop+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    500a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    500c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    500e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5010:	98 a1       	lds	r25, 0x48
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	40 e2       	ldi	r20, 0x20	; 32
    5018:	51 e4       	ldi	r21, 0x41	; 65
    501a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	bc 01       	movw	r22, r24
    5024:	cd 01       	movw	r24, r26
    5026:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	9e a3       	lds	r25, 0x5e
    5030:	8d a3       	lds	r24, 0x5d
    5032:	12 c0       	rjmp	.+36     	; 0x5058 <drop+0x314>
    5034:	80 e7       	ldi	r24, 0x70	; 112
    5036:	91 e0       	ldi	r25, 0x01	; 1
    5038:	98 a7       	lds	r25, 0x78
    503a:	8f a3       	lds	r24, 0x5f
    503c:	8f a1       	lds	r24, 0x4f
    503e:	98 a5       	lds	r25, 0x68
    5040:	8c 01       	movw	r16, r24
    5042:	c8 01       	movw	r24, r16
    5044:	01 97       	sbiw	r24, 0x01	; 1
    5046:	f1 f7       	brne	.-4      	; 0x5044 <drop+0x300>
    5048:	8c 01       	movw	r16, r24
    504a:	18 a7       	lds	r17, 0x78
    504c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    504e:	8d a1       	lds	r24, 0x4d
    5050:	9e a1       	lds	r25, 0x4e
    5052:	01 97       	sbiw	r24, 0x01	; 1
    5054:	9e a3       	lds	r25, 0x5e
    5056:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5058:	8d a1       	lds	r24, 0x4d
    505a:	9e a1       	lds	r25, 0x4e
    505c:	00 97       	sbiw	r24, 0x00	; 0
    505e:	51 f7       	brne	.-44     	; 0x5034 <drop+0x2f0>
    5060:	17 c0       	rjmp	.+46     	; 0x5090 <drop+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5062:	69 a1       	lds	r22, 0x49
    5064:	7a a1       	lds	r23, 0x4a
    5066:	8b a1       	lds	r24, 0x4b
    5068:	9c a1       	lds	r25, 0x4c
    506a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    506e:	dc 01       	movw	r26, r24
    5070:	cb 01       	movw	r24, r22
    5072:	9e a3       	lds	r25, 0x5e
    5074:	8d a3       	lds	r24, 0x5d
    5076:	8d a1       	lds	r24, 0x4d
    5078:	9e a1       	lds	r25, 0x4e
    507a:	9a a7       	lds	r25, 0x7a
    507c:	89 a7       	lds	r24, 0x79
    507e:	89 a5       	lds	r24, 0x69
    5080:	9a a5       	lds	r25, 0x6a
    5082:	8c 01       	movw	r16, r24
    5084:	f8 01       	movw	r30, r16
    5086:	31 97       	sbiw	r30, 0x01	; 1
    5088:	f1 f7       	brne	.-4      	; 0x5086 <drop+0x342>
    508a:	8f 01       	movw	r16, r30
    508c:	1a a7       	lds	r17, 0x7a
    508e:	09 a7       	lds	r16, 0x79
	{
		servo_1(ii);
		_delay_ms(10);
	}
	_delay_ms(500);
	for(ii=0;ii<40;ii++)
    5090:	80 91 39 03 	lds	r24, 0x0339
    5094:	8f 5f       	subi	r24, 0xFF	; 255
    5096:	80 93 39 03 	sts	0x0339, r24
    509a:	80 91 39 03 	lds	r24, 0x0339
    509e:	88 32       	cpi	r24, 0x28	; 40
    50a0:	08 f4       	brcc	.+2      	; 0x50a4 <drop+0x360>
    50a2:	72 cf       	rjmp	.-284    	; 0x4f88 <drop+0x244>
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	aa ef       	ldi	r26, 0xFA	; 250
    50aa:	b3 e4       	ldi	r27, 0x43	; 67
    50ac:	8b a7       	lds	r24, 0x7b
    50ae:	9c a7       	lds	r25, 0x7c
    50b0:	ad a7       	lds	r26, 0x7d
    50b2:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    50b4:	6b a5       	lds	r22, 0x6b
    50b6:	7c a5       	lds	r23, 0x6c
    50b8:	8d a5       	lds	r24, 0x6d
    50ba:	9e a5       	lds	r25, 0x6e
    50bc:	26 e6       	ldi	r18, 0x66	; 102
    50be:	36 e6       	ldi	r19, 0x66	; 102
    50c0:	46 e6       	ldi	r20, 0x66	; 102
    50c2:	55 e4       	ldi	r21, 0x45	; 69
    50c4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    50c8:	dc 01       	movw	r26, r24
    50ca:	cb 01       	movw	r24, r22
    50cc:	8f a7       	lds	r24, 0x7f
    50ce:	98 ab       	sts	0x58, r25
    50d0:	a9 ab       	sts	0x59, r26
    50d2:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    50d4:	11 e0       	ldi	r17, 0x01	; 1
    50d6:	6f a5       	lds	r22, 0x6f
    50d8:	78 a9       	sts	0x48, r23
    50da:	89 a9       	sts	0x49, r24
    50dc:	9a a9       	sts	0x4a, r25
    50de:	20 e0       	ldi	r18, 0x00	; 0
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	40 e8       	ldi	r20, 0x80	; 128
    50e4:	5f e3       	ldi	r21, 0x3F	; 63
    50e6:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    50ea:	88 23       	and	r24, r24
    50ec:	0c f0       	brlt	.+2      	; 0x50f0 <drop+0x3ac>
    50ee:	10 e0       	ldi	r17, 0x00	; 0
    50f0:	11 23       	and	r17, r17
    50f2:	29 f0       	breq	.+10     	; 0x50fe <drop+0x3ba>
		__ticks = 1;
    50f4:	81 e0       	ldi	r24, 0x01	; 1
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	9c ab       	sts	0x5c, r25
    50fa:	8b ab       	sts	0x5b, r24
    50fc:	46 c0       	rjmp	.+140    	; 0x518a <drop+0x446>
	else if (__tmp > 65535)
    50fe:	11 e0       	ldi	r17, 0x01	; 1
    5100:	6f a5       	lds	r22, 0x6f
    5102:	78 a9       	sts	0x48, r23
    5104:	89 a9       	sts	0x49, r24
    5106:	9a a9       	sts	0x4a, r25
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	3f ef       	ldi	r19, 0xFF	; 255
    510c:	4f e7       	ldi	r20, 0x7F	; 127
    510e:	57 e4       	ldi	r21, 0x47	; 71
    5110:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5114:	18 16       	cp	r1, r24
    5116:	0c f0       	brlt	.+2      	; 0x511a <drop+0x3d6>
    5118:	10 e0       	ldi	r17, 0x00	; 0
    511a:	11 23       	and	r17, r17
    511c:	61 f1       	breq	.+88     	; 0x5176 <drop+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    511e:	6b a5       	lds	r22, 0x6b
    5120:	7c a5       	lds	r23, 0x6c
    5122:	8d a5       	lds	r24, 0x6d
    5124:	9e a5       	lds	r25, 0x6e
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	40 e2       	ldi	r20, 0x20	; 32
    512c:	51 e4       	ldi	r21, 0x41	; 65
    512e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	bc 01       	movw	r22, r24
    5138:	cd 01       	movw	r24, r26
    513a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	9c ab       	sts	0x5c, r25
    5144:	8b ab       	sts	0x5b, r24
    5146:	12 c0       	rjmp	.+36     	; 0x516c <drop+0x428>
    5148:	80 e7       	ldi	r24, 0x70	; 112
    514a:	91 e0       	ldi	r25, 0x01	; 1
    514c:	9e ab       	sts	0x5e, r25
    514e:	8d ab       	sts	0x5d, r24
    5150:	8d a9       	sts	0x4d, r24
    5152:	9e a9       	sts	0x4e, r25
    5154:	8c 01       	movw	r16, r24
    5156:	c8 01       	movw	r24, r16
    5158:	01 97       	sbiw	r24, 0x01	; 1
    515a:	f1 f7       	brne	.-4      	; 0x5158 <drop+0x414>
    515c:	8c 01       	movw	r16, r24
    515e:	1e ab       	sts	0x5e, r17
    5160:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5162:	8b a9       	sts	0x4b, r24
    5164:	9c a9       	sts	0x4c, r25
    5166:	01 97       	sbiw	r24, 0x01	; 1
    5168:	9c ab       	sts	0x5c, r25
    516a:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    516c:	8b a9       	sts	0x4b, r24
    516e:	9c a9       	sts	0x4c, r25
    5170:	00 97       	sbiw	r24, 0x00	; 0
    5172:	51 f7       	brne	.-44     	; 0x5148 <drop+0x404>
    5174:	17 c0       	rjmp	.+46     	; 0x51a4 <drop+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5176:	6f a5       	lds	r22, 0x6f
    5178:	78 a9       	sts	0x48, r23
    517a:	89 a9       	sts	0x49, r24
    517c:	9a a9       	sts	0x4a, r25
    517e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5182:	dc 01       	movw	r26, r24
    5184:	cb 01       	movw	r24, r22
    5186:	9c ab       	sts	0x5c, r25
    5188:	8b ab       	sts	0x5b, r24
    518a:	8b a9       	sts	0x4b, r24
    518c:	9c a9       	sts	0x4c, r25
    518e:	98 af       	sts	0x78, r25
    5190:	8f ab       	sts	0x5f, r24
    5192:	8f a9       	sts	0x4f, r24
    5194:	98 ad       	sts	0x68, r25
    5196:	8c 01       	movw	r16, r24
    5198:	f8 01       	movw	r30, r16
    519a:	31 97       	sbiw	r30, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <drop+0x456>
    519e:	8f 01       	movw	r16, r30
    51a0:	18 af       	sts	0x78, r17
    51a2:	0f ab       	sts	0x5f, r16
	{
		servo_2(ii);
		_delay_ms(10);
	}
	_delay_ms(500);
	gripper_open();
    51a4:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	aa ef       	ldi	r26, 0xFA	; 250
    51ae:	b3 e4       	ldi	r27, 0x43	; 67
    51b0:	89 af       	sts	0x79, r24
    51b2:	9a af       	sts	0x7a, r25
    51b4:	ab af       	sts	0x7b, r26
    51b6:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    51b8:	69 ad       	sts	0x69, r22
    51ba:	7a ad       	sts	0x6a, r23
    51bc:	8b ad       	sts	0x6b, r24
    51be:	9c ad       	sts	0x6c, r25
    51c0:	26 e6       	ldi	r18, 0x66	; 102
    51c2:	36 e6       	ldi	r19, 0x66	; 102
    51c4:	46 e6       	ldi	r20, 0x66	; 102
    51c6:	55 e4       	ldi	r21, 0x45	; 69
    51c8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	9e 01       	movw	r18, r28
    51d2:	23 5c       	subi	r18, 0xC3	; 195
    51d4:	3f 4f       	sbci	r19, 0xFF	; 255
    51d6:	f9 01       	movw	r30, r18
    51d8:	80 83       	st	Z, r24
    51da:	91 83       	std	Z+1, r25	; 0x01
    51dc:	a2 83       	std	Z+2, r26	; 0x02
    51de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51e0:	11 e0       	ldi	r17, 0x01	; 1
    51e2:	ce 01       	movw	r24, r28
    51e4:	cd 96       	adiw	r24, 0x3d	; 61
    51e6:	fc 01       	movw	r30, r24
    51e8:	60 81       	ld	r22, Z
    51ea:	71 81       	ldd	r23, Z+1	; 0x01
    51ec:	82 81       	ldd	r24, Z+2	; 0x02
    51ee:	93 81       	ldd	r25, Z+3	; 0x03
    51f0:	20 e0       	ldi	r18, 0x00	; 0
    51f2:	30 e0       	ldi	r19, 0x00	; 0
    51f4:	40 e8       	ldi	r20, 0x80	; 128
    51f6:	5f e3       	ldi	r21, 0x3F	; 63
    51f8:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    51fc:	88 23       	and	r24, r24
    51fe:	0c f0       	brlt	.+2      	; 0x5202 <drop+0x4be>
    5200:	10 e0       	ldi	r17, 0x00	; 0
    5202:	11 23       	and	r17, r17
    5204:	49 f0       	breq	.+18     	; 0x5218 <drop+0x4d4>
		__ticks = 1;
    5206:	ce 01       	movw	r24, r28
    5208:	8f 5b       	subi	r24, 0xBF	; 191
    520a:	9f 4f       	sbci	r25, 0xFF	; 255
    520c:	21 e0       	ldi	r18, 0x01	; 1
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	fc 01       	movw	r30, r24
    5212:	31 83       	std	Z+1, r19	; 0x01
    5214:	20 83       	st	Z, r18
    5216:	6e c0       	rjmp	.+220    	; 0x52f4 <drop+0x5b0>
	else if (__tmp > 65535)
    5218:	11 e0       	ldi	r17, 0x01	; 1
    521a:	ce 01       	movw	r24, r28
    521c:	cd 96       	adiw	r24, 0x3d	; 61
    521e:	fc 01       	movw	r30, r24
    5220:	60 81       	ld	r22, Z
    5222:	71 81       	ldd	r23, Z+1	; 0x01
    5224:	82 81       	ldd	r24, Z+2	; 0x02
    5226:	93 81       	ldd	r25, Z+3	; 0x03
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	3f ef       	ldi	r19, 0xFF	; 255
    522c:	4f e7       	ldi	r20, 0x7F	; 127
    522e:	57 e4       	ldi	r21, 0x47	; 71
    5230:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5234:	18 16       	cp	r1, r24
    5236:	0c f0       	brlt	.+2      	; 0x523a <drop+0x4f6>
    5238:	10 e0       	ldi	r17, 0x00	; 0
    523a:	11 23       	and	r17, r17
    523c:	09 f4       	brne	.+2      	; 0x5240 <drop+0x4fc>
    523e:	49 c0       	rjmp	.+146    	; 0x52d2 <drop+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5240:	69 ad       	sts	0x69, r22
    5242:	7a ad       	sts	0x6a, r23
    5244:	8b ad       	sts	0x6b, r24
    5246:	9c ad       	sts	0x6c, r25
    5248:	20 e0       	ldi	r18, 0x00	; 0
    524a:	30 e0       	ldi	r19, 0x00	; 0
    524c:	40 e2       	ldi	r20, 0x20	; 32
    524e:	51 e4       	ldi	r21, 0x41	; 65
    5250:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5254:	dc 01       	movw	r26, r24
    5256:	cb 01       	movw	r24, r22
    5258:	8e 01       	movw	r16, r28
    525a:	0f 5b       	subi	r16, 0xBF	; 191
    525c:	1f 4f       	sbci	r17, 0xFF	; 255
    525e:	bc 01       	movw	r22, r24
    5260:	cd 01       	movw	r24, r26
    5262:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5266:	dc 01       	movw	r26, r24
    5268:	cb 01       	movw	r24, r22
    526a:	f8 01       	movw	r30, r16
    526c:	91 83       	std	Z+1, r25	; 0x01
    526e:	80 83       	st	Z, r24
    5270:	27 c0       	rjmp	.+78     	; 0x52c0 <drop+0x57c>
    5272:	ce 01       	movw	r24, r28
    5274:	8d 5b       	subi	r24, 0xBD	; 189
    5276:	9f 4f       	sbci	r25, 0xFF	; 255
    5278:	20 e7       	ldi	r18, 0x70	; 112
    527a:	31 e0       	ldi	r19, 0x01	; 1
    527c:	fc 01       	movw	r30, r24
    527e:	31 83       	std	Z+1, r19	; 0x01
    5280:	20 83       	st	Z, r18
    5282:	ce 01       	movw	r24, r28
    5284:	8d 5b       	subi	r24, 0xBD	; 189
    5286:	9f 4f       	sbci	r25, 0xFF	; 255
    5288:	fc 01       	movw	r30, r24
    528a:	80 81       	ld	r24, Z
    528c:	91 81       	ldd	r25, Z+1	; 0x01
    528e:	8c 01       	movw	r16, r24
    5290:	c8 01       	movw	r24, r16
    5292:	01 97       	sbiw	r24, 0x01	; 1
    5294:	f1 f7       	brne	.-4      	; 0x5292 <drop+0x54e>
    5296:	8c 01       	movw	r16, r24
    5298:	ce 01       	movw	r24, r28
    529a:	8d 5b       	subi	r24, 0xBD	; 189
    529c:	9f 4f       	sbci	r25, 0xFF	; 255
    529e:	fc 01       	movw	r30, r24
    52a0:	11 83       	std	Z+1, r17	; 0x01
    52a2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52a4:	ce 01       	movw	r24, r28
    52a6:	8f 5b       	subi	r24, 0xBF	; 191
    52a8:	9f 4f       	sbci	r25, 0xFF	; 255
    52aa:	9e 01       	movw	r18, r28
    52ac:	2f 5b       	subi	r18, 0xBF	; 191
    52ae:	3f 4f       	sbci	r19, 0xFF	; 255
    52b0:	f9 01       	movw	r30, r18
    52b2:	20 81       	ld	r18, Z
    52b4:	31 81       	ldd	r19, Z+1	; 0x01
    52b6:	21 50       	subi	r18, 0x01	; 1
    52b8:	30 40       	sbci	r19, 0x00	; 0
    52ba:	fc 01       	movw	r30, r24
    52bc:	31 83       	std	Z+1, r19	; 0x01
    52be:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c0:	ce 01       	movw	r24, r28
    52c2:	8f 5b       	subi	r24, 0xBF	; 191
    52c4:	9f 4f       	sbci	r25, 0xFF	; 255
    52c6:	fc 01       	movw	r30, r24
    52c8:	80 81       	ld	r24, Z
    52ca:	91 81       	ldd	r25, Z+1	; 0x01
    52cc:	00 97       	sbiw	r24, 0x00	; 0
    52ce:	89 f6       	brne	.-94     	; 0x5272 <drop+0x52e>
    52d0:	2e c0       	rjmp	.+92     	; 0x532e <drop+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d2:	8e 01       	movw	r16, r28
    52d4:	0f 5b       	subi	r16, 0xBF	; 191
    52d6:	1f 4f       	sbci	r17, 0xFF	; 255
    52d8:	ce 01       	movw	r24, r28
    52da:	cd 96       	adiw	r24, 0x3d	; 61
    52dc:	fc 01       	movw	r30, r24
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	93 81       	ldd	r25, Z+3	; 0x03
    52e6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    52ea:	dc 01       	movw	r26, r24
    52ec:	cb 01       	movw	r24, r22
    52ee:	f8 01       	movw	r30, r16
    52f0:	91 83       	std	Z+1, r25	; 0x01
    52f2:	80 83       	st	Z, r24
    52f4:	ce 01       	movw	r24, r28
    52f6:	8b 5b       	subi	r24, 0xBB	; 187
    52f8:	9f 4f       	sbci	r25, 0xFF	; 255
    52fa:	9e 01       	movw	r18, r28
    52fc:	2f 5b       	subi	r18, 0xBF	; 191
    52fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5300:	f9 01       	movw	r30, r18
    5302:	20 81       	ld	r18, Z
    5304:	31 81       	ldd	r19, Z+1	; 0x01
    5306:	fc 01       	movw	r30, r24
    5308:	31 83       	std	Z+1, r19	; 0x01
    530a:	20 83       	st	Z, r18
    530c:	ce 01       	movw	r24, r28
    530e:	8b 5b       	subi	r24, 0xBB	; 187
    5310:	9f 4f       	sbci	r25, 0xFF	; 255
    5312:	fc 01       	movw	r30, r24
    5314:	80 81       	ld	r24, Z
    5316:	91 81       	ldd	r25, Z+1	; 0x01
    5318:	8c 01       	movw	r16, r24
    531a:	c8 01       	movw	r24, r16
    531c:	01 97       	sbiw	r24, 0x01	; 1
    531e:	f1 f7       	brne	.-4      	; 0x531c <drop+0x5d8>
    5320:	8c 01       	movw	r16, r24
    5322:	ce 01       	movw	r24, r28
    5324:	8b 5b       	subi	r24, 0xBB	; 187
    5326:	9f 4f       	sbci	r25, 0xFF	; 255
    5328:	fc 01       	movw	r30, r24
    532a:	11 83       	std	Z+1, r17	; 0x01
    532c:	00 83       	st	Z, r16
	_delay_ms(500);
	servo_2(0);
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <servo_2>
    5334:	9e 01       	movw	r18, r28
    5336:	29 5b       	subi	r18, 0xB9	; 185
    5338:	3f 4f       	sbci	r19, 0xFF	; 255
    533a:	80 e0       	ldi	r24, 0x00	; 0
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	aa ef       	ldi	r26, 0xFA	; 250
    5340:	b3 e4       	ldi	r27, 0x43	; 67
    5342:	f9 01       	movw	r30, r18
    5344:	80 83       	st	Z, r24
    5346:	91 83       	std	Z+1, r25	; 0x01
    5348:	a2 83       	std	Z+2, r26	; 0x02
    534a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    534c:	8e 01       	movw	r16, r28
    534e:	05 5b       	subi	r16, 0xB5	; 181
    5350:	1f 4f       	sbci	r17, 0xFF	; 255
    5352:	ce 01       	movw	r24, r28
    5354:	89 5b       	subi	r24, 0xB9	; 185
    5356:	9f 4f       	sbci	r25, 0xFF	; 255
    5358:	fc 01       	movw	r30, r24
    535a:	60 81       	ld	r22, Z
    535c:	71 81       	ldd	r23, Z+1	; 0x01
    535e:	82 81       	ldd	r24, Z+2	; 0x02
    5360:	93 81       	ldd	r25, Z+3	; 0x03
    5362:	26 e6       	ldi	r18, 0x66	; 102
    5364:	36 e6       	ldi	r19, 0x66	; 102
    5366:	46 e6       	ldi	r20, 0x66	; 102
    5368:	55 e4       	ldi	r21, 0x45	; 69
    536a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    536e:	dc 01       	movw	r26, r24
    5370:	cb 01       	movw	r24, r22
    5372:	f8 01       	movw	r30, r16
    5374:	80 83       	st	Z, r24
    5376:	91 83       	std	Z+1, r25	; 0x01
    5378:	a2 83       	std	Z+2, r26	; 0x02
    537a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    537c:	ce 01       	movw	r24, r28
    537e:	85 5b       	subi	r24, 0xB5	; 181
    5380:	9f 4f       	sbci	r25, 0xFF	; 255
    5382:	11 e0       	ldi	r17, 0x01	; 1
    5384:	fc 01       	movw	r30, r24
    5386:	60 81       	ld	r22, Z
    5388:	71 81       	ldd	r23, Z+1	; 0x01
    538a:	82 81       	ldd	r24, Z+2	; 0x02
    538c:	93 81       	ldd	r25, Z+3	; 0x03
    538e:	20 e0       	ldi	r18, 0x00	; 0
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	40 e8       	ldi	r20, 0x80	; 128
    5394:	5f e3       	ldi	r21, 0x3F	; 63
    5396:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    539a:	88 23       	and	r24, r24
    539c:	0c f0       	brlt	.+2      	; 0x53a0 <drop+0x65c>
    539e:	10 e0       	ldi	r17, 0x00	; 0
    53a0:	11 23       	and	r17, r17
    53a2:	49 f0       	breq	.+18     	; 0x53b6 <drop+0x672>
		__ticks = 1;
    53a4:	ce 01       	movw	r24, r28
    53a6:	81 5b       	subi	r24, 0xB1	; 177
    53a8:	9f 4f       	sbci	r25, 0xFF	; 255
    53aa:	21 e0       	ldi	r18, 0x01	; 1
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	fc 01       	movw	r30, r24
    53b0:	31 83       	std	Z+1, r19	; 0x01
    53b2:	20 83       	st	Z, r18
    53b4:	74 c0       	rjmp	.+232    	; 0x549e <drop+0x75a>
	else if (__tmp > 65535)
    53b6:	ce 01       	movw	r24, r28
    53b8:	85 5b       	subi	r24, 0xB5	; 181
    53ba:	9f 4f       	sbci	r25, 0xFF	; 255
    53bc:	11 e0       	ldi	r17, 0x01	; 1
    53be:	fc 01       	movw	r30, r24
    53c0:	60 81       	ld	r22, Z
    53c2:	71 81       	ldd	r23, Z+1	; 0x01
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	3f ef       	ldi	r19, 0xFF	; 255
    53cc:	4f e7       	ldi	r20, 0x7F	; 127
    53ce:	57 e4       	ldi	r21, 0x47	; 71
    53d0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    53d4:	18 16       	cp	r1, r24
    53d6:	0c f0       	brlt	.+2      	; 0x53da <drop+0x696>
    53d8:	10 e0       	ldi	r17, 0x00	; 0
    53da:	11 23       	and	r17, r17
    53dc:	09 f4       	brne	.+2      	; 0x53e0 <drop+0x69c>
    53de:	4d c0       	rjmp	.+154    	; 0x547a <drop+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53e0:	ce 01       	movw	r24, r28
    53e2:	89 5b       	subi	r24, 0xB9	; 185
    53e4:	9f 4f       	sbci	r25, 0xFF	; 255
    53e6:	fc 01       	movw	r30, r24
    53e8:	60 81       	ld	r22, Z
    53ea:	71 81       	ldd	r23, Z+1	; 0x01
    53ec:	82 81       	ldd	r24, Z+2	; 0x02
    53ee:	93 81       	ldd	r25, Z+3	; 0x03
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	40 e2       	ldi	r20, 0x20	; 32
    53f6:	51 e4       	ldi	r21, 0x41	; 65
    53f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	8e 01       	movw	r16, r28
    5402:	01 5b       	subi	r16, 0xB1	; 177
    5404:	1f 4f       	sbci	r17, 0xFF	; 255
    5406:	bc 01       	movw	r22, r24
    5408:	cd 01       	movw	r24, r26
    540a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	f8 01       	movw	r30, r16
    5414:	91 83       	std	Z+1, r25	; 0x01
    5416:	80 83       	st	Z, r24
    5418:	27 c0       	rjmp	.+78     	; 0x5468 <drop+0x724>
    541a:	ce 01       	movw	r24, r28
    541c:	8f 5a       	subi	r24, 0xAF	; 175
    541e:	9f 4f       	sbci	r25, 0xFF	; 255
    5420:	20 e7       	ldi	r18, 0x70	; 112
    5422:	31 e0       	ldi	r19, 0x01	; 1
    5424:	fc 01       	movw	r30, r24
    5426:	31 83       	std	Z+1, r19	; 0x01
    5428:	20 83       	st	Z, r18
    542a:	ce 01       	movw	r24, r28
    542c:	8f 5a       	subi	r24, 0xAF	; 175
    542e:	9f 4f       	sbci	r25, 0xFF	; 255
    5430:	fc 01       	movw	r30, r24
    5432:	80 81       	ld	r24, Z
    5434:	91 81       	ldd	r25, Z+1	; 0x01
    5436:	8c 01       	movw	r16, r24
    5438:	c8 01       	movw	r24, r16
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <drop+0x6f6>
    543e:	8c 01       	movw	r16, r24
    5440:	ce 01       	movw	r24, r28
    5442:	8f 5a       	subi	r24, 0xAF	; 175
    5444:	9f 4f       	sbci	r25, 0xFF	; 255
    5446:	fc 01       	movw	r30, r24
    5448:	11 83       	std	Z+1, r17	; 0x01
    544a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    544c:	ce 01       	movw	r24, r28
    544e:	81 5b       	subi	r24, 0xB1	; 177
    5450:	9f 4f       	sbci	r25, 0xFF	; 255
    5452:	9e 01       	movw	r18, r28
    5454:	21 5b       	subi	r18, 0xB1	; 177
    5456:	3f 4f       	sbci	r19, 0xFF	; 255
    5458:	f9 01       	movw	r30, r18
    545a:	20 81       	ld	r18, Z
    545c:	31 81       	ldd	r19, Z+1	; 0x01
    545e:	21 50       	subi	r18, 0x01	; 1
    5460:	30 40       	sbci	r19, 0x00	; 0
    5462:	fc 01       	movw	r30, r24
    5464:	31 83       	std	Z+1, r19	; 0x01
    5466:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5468:	ce 01       	movw	r24, r28
    546a:	81 5b       	subi	r24, 0xB1	; 177
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	fc 01       	movw	r30, r24
    5470:	80 81       	ld	r24, Z
    5472:	91 81       	ldd	r25, Z+1	; 0x01
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	89 f6       	brne	.-94     	; 0x541a <drop+0x6d6>
    5478:	2f c0       	rjmp	.+94     	; 0x54d8 <drop+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547a:	8e 01       	movw	r16, r28
    547c:	01 5b       	subi	r16, 0xB1	; 177
    547e:	1f 4f       	sbci	r17, 0xFF	; 255
    5480:	ce 01       	movw	r24, r28
    5482:	85 5b       	subi	r24, 0xB5	; 181
    5484:	9f 4f       	sbci	r25, 0xFF	; 255
    5486:	fc 01       	movw	r30, r24
    5488:	60 81       	ld	r22, Z
    548a:	71 81       	ldd	r23, Z+1	; 0x01
    548c:	82 81       	ldd	r24, Z+2	; 0x02
    548e:	93 81       	ldd	r25, Z+3	; 0x03
    5490:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	f8 01       	movw	r30, r16
    549a:	91 83       	std	Z+1, r25	; 0x01
    549c:	80 83       	st	Z, r24
    549e:	ce 01       	movw	r24, r28
    54a0:	8d 5a       	subi	r24, 0xAD	; 173
    54a2:	9f 4f       	sbci	r25, 0xFF	; 255
    54a4:	9e 01       	movw	r18, r28
    54a6:	21 5b       	subi	r18, 0xB1	; 177
    54a8:	3f 4f       	sbci	r19, 0xFF	; 255
    54aa:	f9 01       	movw	r30, r18
    54ac:	20 81       	ld	r18, Z
    54ae:	31 81       	ldd	r19, Z+1	; 0x01
    54b0:	fc 01       	movw	r30, r24
    54b2:	31 83       	std	Z+1, r19	; 0x01
    54b4:	20 83       	st	Z, r18
    54b6:	ce 01       	movw	r24, r28
    54b8:	8d 5a       	subi	r24, 0xAD	; 173
    54ba:	9f 4f       	sbci	r25, 0xFF	; 255
    54bc:	fc 01       	movw	r30, r24
    54be:	80 81       	ld	r24, Z
    54c0:	91 81       	ldd	r25, Z+1	; 0x01
    54c2:	8c 01       	movw	r16, r24
    54c4:	c8 01       	movw	r24, r16
    54c6:	01 97       	sbiw	r24, 0x01	; 1
    54c8:	f1 f7       	brne	.-4      	; 0x54c6 <drop+0x782>
    54ca:	8c 01       	movw	r16, r24
    54cc:	ce 01       	movw	r24, r28
    54ce:	8d 5a       	subi	r24, 0xAD	; 173
    54d0:	9f 4f       	sbci	r25, 0xFF	; 255
    54d2:	fc 01       	movw	r30, r24
    54d4:	11 83       	std	Z+1, r17	; 0x01
    54d6:	00 83       	st	Z, r16
	_delay_ms(500);
	
}
    54d8:	cc 5a       	subi	r28, 0xAC	; 172
    54da:	df 4f       	sbci	r29, 0xFF	; 255
    54dc:	0f b6       	in	r0, 0x3f	; 63
    54de:	f8 94       	cli
    54e0:	de bf       	out	0x3e, r29	; 62
    54e2:	0f be       	out	0x3f, r0	; 63
    54e4:	cd bf       	out	0x3d, r28	; 61
    54e6:	df 91       	pop	r29
    54e8:	cf 91       	pop	r28
    54ea:	1f 91       	pop	r17
    54ec:	0f 91       	pop	r16
    54ee:	08 95       	ret

000054f0 <front>:
*Output:             None
*Logic:              To pick the animals
*Example Call:       front();
*/
void front()
{
    54f0:	0f 93       	push	r16
    54f2:	1f 93       	push	r17
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	cd b7       	in	r28, 0x3d	; 61
    54fa:	de b7       	in	r29, 0x3e	; 62
    54fc:	e8 97       	sbiw	r28, 0x38	; 56
    54fe:	0f b6       	in	r0, 0x3f	; 63
    5500:	f8 94       	cli
    5502:	de bf       	out	0x3e, r29	; 62
    5504:	0f be       	out	0x3f, r0	; 63
    5506:	cd bf       	out	0x3d, r28	; 61
	gripper_open();
    5508:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <gripper_open>
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	a6 e9       	ldi	r26, 0x96	; 150
    5512:	b3 e4       	ldi	r27, 0x43	; 67
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	9a 83       	std	Y+2, r25	; 0x02
    5518:	ab 83       	std	Y+3, r26	; 0x03
    551a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    551c:	69 81       	ldd	r22, Y+1	; 0x01
    551e:	7a 81       	ldd	r23, Y+2	; 0x02
    5520:	8b 81       	ldd	r24, Y+3	; 0x03
    5522:	9c 81       	ldd	r25, Y+4	; 0x04
    5524:	26 e6       	ldi	r18, 0x66	; 102
    5526:	36 e6       	ldi	r19, 0x66	; 102
    5528:	46 e6       	ldi	r20, 0x66	; 102
    552a:	55 e4       	ldi	r21, 0x45	; 69
    552c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	8d 83       	std	Y+5, r24	; 0x05
    5536:	9e 83       	std	Y+6, r25	; 0x06
    5538:	af 83       	std	Y+7, r26	; 0x07
    553a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    553c:	11 e0       	ldi	r17, 0x01	; 1
    553e:	6d 81       	ldd	r22, Y+5	; 0x05
    5540:	7e 81       	ldd	r23, Y+6	; 0x06
    5542:	8f 81       	ldd	r24, Y+7	; 0x07
    5544:	98 85       	ldd	r25, Y+8	; 0x08
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 e8       	ldi	r20, 0x80	; 128
    554c:	5f e3       	ldi	r21, 0x3F	; 63
    554e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    5552:	88 23       	and	r24, r24
    5554:	0c f0       	brlt	.+2      	; 0x5558 <front+0x68>
    5556:	10 e0       	ldi	r17, 0x00	; 0
    5558:	11 23       	and	r17, r17
    555a:	29 f0       	breq	.+10     	; 0x5566 <front+0x76>
		__ticks = 1;
    555c:	81 e0       	ldi	r24, 0x01	; 1
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	9a 87       	std	Y+10, r25	; 0x0a
    5562:	89 87       	std	Y+9, r24	; 0x09
    5564:	46 c0       	rjmp	.+140    	; 0x55f2 <front+0x102>
	else if (__tmp > 65535)
    5566:	11 e0       	ldi	r17, 0x01	; 1
    5568:	6d 81       	ldd	r22, Y+5	; 0x05
    556a:	7e 81       	ldd	r23, Y+6	; 0x06
    556c:	8f 81       	ldd	r24, Y+7	; 0x07
    556e:	98 85       	ldd	r25, Y+8	; 0x08
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	3f ef       	ldi	r19, 0xFF	; 255
    5574:	4f e7       	ldi	r20, 0x7F	; 127
    5576:	57 e4       	ldi	r21, 0x47	; 71
    5578:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    557c:	18 16       	cp	r1, r24
    557e:	0c f0       	brlt	.+2      	; 0x5582 <front+0x92>
    5580:	10 e0       	ldi	r17, 0x00	; 0
    5582:	11 23       	and	r17, r17
    5584:	61 f1       	breq	.+88     	; 0x55de <front+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5586:	69 81       	ldd	r22, Y+1	; 0x01
    5588:	7a 81       	ldd	r23, Y+2	; 0x02
    558a:	8b 81       	ldd	r24, Y+3	; 0x03
    558c:	9c 81       	ldd	r25, Y+4	; 0x04
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e2       	ldi	r20, 0x20	; 32
    5594:	51 e4       	ldi	r21, 0x41	; 65
    5596:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	bc 01       	movw	r22, r24
    55a0:	cd 01       	movw	r24, r26
    55a2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    55a6:	dc 01       	movw	r26, r24
    55a8:	cb 01       	movw	r24, r22
    55aa:	9a 87       	std	Y+10, r25	; 0x0a
    55ac:	89 87       	std	Y+9, r24	; 0x09
    55ae:	12 c0       	rjmp	.+36     	; 0x55d4 <front+0xe4>
    55b0:	80 e7       	ldi	r24, 0x70	; 112
    55b2:	91 e0       	ldi	r25, 0x01	; 1
    55b4:	9c 87       	std	Y+12, r25	; 0x0c
    55b6:	8b 87       	std	Y+11, r24	; 0x0b
    55b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    55bc:	8c 01       	movw	r16, r24
    55be:	c8 01       	movw	r24, r16
    55c0:	01 97       	sbiw	r24, 0x01	; 1
    55c2:	f1 f7       	brne	.-4      	; 0x55c0 <front+0xd0>
    55c4:	8c 01       	movw	r16, r24
    55c6:	1c 87       	std	Y+12, r17	; 0x0c
    55c8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ca:	89 85       	ldd	r24, Y+9	; 0x09
    55cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ce:	01 97       	sbiw	r24, 0x01	; 1
    55d0:	9a 87       	std	Y+10, r25	; 0x0a
    55d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55d4:	89 85       	ldd	r24, Y+9	; 0x09
    55d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55d8:	00 97       	sbiw	r24, 0x00	; 0
    55da:	51 f7       	brne	.-44     	; 0x55b0 <front+0xc0>
    55dc:	17 c0       	rjmp	.+46     	; 0x560c <front+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55de:	6d 81       	ldd	r22, Y+5	; 0x05
    55e0:	7e 81       	ldd	r23, Y+6	; 0x06
    55e2:	8f 81       	ldd	r24, Y+7	; 0x07
    55e4:	98 85       	ldd	r25, Y+8	; 0x08
    55e6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	9a 87       	std	Y+10, r25	; 0x0a
    55f0:	89 87       	std	Y+9, r24	; 0x09
    55f2:	89 85       	ldd	r24, Y+9	; 0x09
    55f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f6:	9e 87       	std	Y+14, r25	; 0x0e
    55f8:	8d 87       	std	Y+13, r24	; 0x0d
    55fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    55fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    55fe:	8c 01       	movw	r16, r24
    5600:	c8 01       	movw	r24, r16
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	f1 f7       	brne	.-4      	; 0x5602 <front+0x112>
    5606:	8c 01       	movw	r16, r24
    5608:	1e 87       	std	Y+14, r17	; 0x0e
    560a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(300);
	arm_forward();
    560c:	0e 94 a7 23 	call	0x474e	; 0x474e <arm_forward>
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	a6 e9       	ldi	r26, 0x96	; 150
    5616:	b3 e4       	ldi	r27, 0x43	; 67
    5618:	8f 87       	std	Y+15, r24	; 0x0f
    561a:	98 8b       	std	Y+16, r25	; 0x10
    561c:	a9 8b       	std	Y+17, r26	; 0x11
    561e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5620:	6f 85       	ldd	r22, Y+15	; 0x0f
    5622:	78 89       	ldd	r23, Y+16	; 0x10
    5624:	89 89       	ldd	r24, Y+17	; 0x11
    5626:	9a 89       	ldd	r25, Y+18	; 0x12
    5628:	26 e6       	ldi	r18, 0x66	; 102
    562a:	36 e6       	ldi	r19, 0x66	; 102
    562c:	46 e6       	ldi	r20, 0x66	; 102
    562e:	55 e4       	ldi	r21, 0x45	; 69
    5630:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	8b 8b       	std	Y+19, r24	; 0x13
    563a:	9c 8b       	std	Y+20, r25	; 0x14
    563c:	ad 8b       	std	Y+21, r26	; 0x15
    563e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5640:	11 e0       	ldi	r17, 0x01	; 1
    5642:	6b 89       	ldd	r22, Y+19	; 0x13
    5644:	7c 89       	ldd	r23, Y+20	; 0x14
    5646:	8d 89       	ldd	r24, Y+21	; 0x15
    5648:	9e 89       	ldd	r25, Y+22	; 0x16
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e8       	ldi	r20, 0x80	; 128
    5650:	5f e3       	ldi	r21, 0x3F	; 63
    5652:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    5656:	88 23       	and	r24, r24
    5658:	0c f0       	brlt	.+2      	; 0x565c <front+0x16c>
    565a:	10 e0       	ldi	r17, 0x00	; 0
    565c:	11 23       	and	r17, r17
    565e:	29 f0       	breq	.+10     	; 0x566a <front+0x17a>
		__ticks = 1;
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	98 8f       	std	Y+24, r25	; 0x18
    5666:	8f 8b       	std	Y+23, r24	; 0x17
    5668:	46 c0       	rjmp	.+140    	; 0x56f6 <front+0x206>
	else if (__tmp > 65535)
    566a:	11 e0       	ldi	r17, 0x01	; 1
    566c:	6b 89       	ldd	r22, Y+19	; 0x13
    566e:	7c 89       	ldd	r23, Y+20	; 0x14
    5670:	8d 89       	ldd	r24, Y+21	; 0x15
    5672:	9e 89       	ldd	r25, Y+22	; 0x16
    5674:	20 e0       	ldi	r18, 0x00	; 0
    5676:	3f ef       	ldi	r19, 0xFF	; 255
    5678:	4f e7       	ldi	r20, 0x7F	; 127
    567a:	57 e4       	ldi	r21, 0x47	; 71
    567c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5680:	18 16       	cp	r1, r24
    5682:	0c f0       	brlt	.+2      	; 0x5686 <front+0x196>
    5684:	10 e0       	ldi	r17, 0x00	; 0
    5686:	11 23       	and	r17, r17
    5688:	61 f1       	breq	.+88     	; 0x56e2 <front+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    568a:	6f 85       	ldd	r22, Y+15	; 0x0f
    568c:	78 89       	ldd	r23, Y+16	; 0x10
    568e:	89 89       	ldd	r24, Y+17	; 0x11
    5690:	9a 89       	ldd	r25, Y+18	; 0x12
    5692:	20 e0       	ldi	r18, 0x00	; 0
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	40 e2       	ldi	r20, 0x20	; 32
    5698:	51 e4       	ldi	r21, 0x41	; 65
    569a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    569e:	dc 01       	movw	r26, r24
    56a0:	cb 01       	movw	r24, r22
    56a2:	bc 01       	movw	r22, r24
    56a4:	cd 01       	movw	r24, r26
    56a6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    56aa:	dc 01       	movw	r26, r24
    56ac:	cb 01       	movw	r24, r22
    56ae:	98 8f       	std	Y+24, r25	; 0x18
    56b0:	8f 8b       	std	Y+23, r24	; 0x17
    56b2:	12 c0       	rjmp	.+36     	; 0x56d8 <front+0x1e8>
    56b4:	80 e7       	ldi	r24, 0x70	; 112
    56b6:	91 e0       	ldi	r25, 0x01	; 1
    56b8:	9a 8f       	std	Y+26, r25	; 0x1a
    56ba:	89 8f       	std	Y+25, r24	; 0x19
    56bc:	89 8d       	ldd	r24, Y+25	; 0x19
    56be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56c0:	8c 01       	movw	r16, r24
    56c2:	c8 01       	movw	r24, r16
    56c4:	01 97       	sbiw	r24, 0x01	; 1
    56c6:	f1 f7       	brne	.-4      	; 0x56c4 <front+0x1d4>
    56c8:	8c 01       	movw	r16, r24
    56ca:	1a 8f       	std	Y+26, r17	; 0x1a
    56cc:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ce:	8f 89       	ldd	r24, Y+23	; 0x17
    56d0:	98 8d       	ldd	r25, Y+24	; 0x18
    56d2:	01 97       	sbiw	r24, 0x01	; 1
    56d4:	98 8f       	std	Y+24, r25	; 0x18
    56d6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56d8:	8f 89       	ldd	r24, Y+23	; 0x17
    56da:	98 8d       	ldd	r25, Y+24	; 0x18
    56dc:	00 97       	sbiw	r24, 0x00	; 0
    56de:	51 f7       	brne	.-44     	; 0x56b4 <front+0x1c4>
    56e0:	17 c0       	rjmp	.+46     	; 0x5710 <front+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56e2:	6b 89       	ldd	r22, Y+19	; 0x13
    56e4:	7c 89       	ldd	r23, Y+20	; 0x14
    56e6:	8d 89       	ldd	r24, Y+21	; 0x15
    56e8:	9e 89       	ldd	r25, Y+22	; 0x16
    56ea:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    56ee:	dc 01       	movw	r26, r24
    56f0:	cb 01       	movw	r24, r22
    56f2:	98 8f       	std	Y+24, r25	; 0x18
    56f4:	8f 8b       	std	Y+23, r24	; 0x17
    56f6:	8f 89       	ldd	r24, Y+23	; 0x17
    56f8:	98 8d       	ldd	r25, Y+24	; 0x18
    56fa:	9c 8f       	std	Y+28, r25	; 0x1c
    56fc:	8b 8f       	std	Y+27, r24	; 0x1b
    56fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5702:	8c 01       	movw	r16, r24
    5704:	c8 01       	movw	r24, r16
    5706:	01 97       	sbiw	r24, 0x01	; 1
    5708:	f1 f7       	brne	.-4      	; 0x5706 <front+0x216>
    570a:	8c 01       	movw	r16, r24
    570c:	1c 8f       	std	Y+28, r17	; 0x1c
    570e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	gripper_close();
    5710:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <gripper_close>
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	a6 e9       	ldi	r26, 0x96	; 150
    571a:	b3 e4       	ldi	r27, 0x43	; 67
    571c:	8d 8f       	std	Y+29, r24	; 0x1d
    571e:	9e 8f       	std	Y+30, r25	; 0x1e
    5720:	af 8f       	std	Y+31, r26	; 0x1f
    5722:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5724:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5726:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5728:	8f 8d       	ldd	r24, Y+31	; 0x1f
    572a:	98 a1       	lds	r25, 0x48
    572c:	26 e6       	ldi	r18, 0x66	; 102
    572e:	36 e6       	ldi	r19, 0x66	; 102
    5730:	46 e6       	ldi	r20, 0x66	; 102
    5732:	55 e4       	ldi	r21, 0x45	; 69
    5734:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	89 a3       	lds	r24, 0x59
    573e:	9a a3       	lds	r25, 0x5a
    5740:	ab a3       	lds	r26, 0x5b
    5742:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5744:	11 e0       	ldi	r17, 0x01	; 1
    5746:	69 a1       	lds	r22, 0x49
    5748:	7a a1       	lds	r23, 0x4a
    574a:	8b a1       	lds	r24, 0x4b
    574c:	9c a1       	lds	r25, 0x4c
    574e:	20 e0       	ldi	r18, 0x00	; 0
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	40 e8       	ldi	r20, 0x80	; 128
    5754:	5f e3       	ldi	r21, 0x3F	; 63
    5756:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    575a:	88 23       	and	r24, r24
    575c:	0c f0       	brlt	.+2      	; 0x5760 <front+0x270>
    575e:	10 e0       	ldi	r17, 0x00	; 0
    5760:	11 23       	and	r17, r17
    5762:	29 f0       	breq	.+10     	; 0x576e <front+0x27e>
		__ticks = 1;
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	9e a3       	lds	r25, 0x5e
    576a:	8d a3       	lds	r24, 0x5d
    576c:	46 c0       	rjmp	.+140    	; 0x57fa <front+0x30a>
	else if (__tmp > 65535)
    576e:	11 e0       	ldi	r17, 0x01	; 1
    5770:	69 a1       	lds	r22, 0x49
    5772:	7a a1       	lds	r23, 0x4a
    5774:	8b a1       	lds	r24, 0x4b
    5776:	9c a1       	lds	r25, 0x4c
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	3f ef       	ldi	r19, 0xFF	; 255
    577c:	4f e7       	ldi	r20, 0x7F	; 127
    577e:	57 e4       	ldi	r21, 0x47	; 71
    5780:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5784:	18 16       	cp	r1, r24
    5786:	0c f0       	brlt	.+2      	; 0x578a <front+0x29a>
    5788:	10 e0       	ldi	r17, 0x00	; 0
    578a:	11 23       	and	r17, r17
    578c:	61 f1       	breq	.+88     	; 0x57e6 <front+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    578e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5790:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5792:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5794:	98 a1       	lds	r25, 0x48
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	40 e2       	ldi	r20, 0x20	; 32
    579c:	51 e4       	ldi	r21, 0x41	; 65
    579e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    57a2:	dc 01       	movw	r26, r24
    57a4:	cb 01       	movw	r24, r22
    57a6:	bc 01       	movw	r22, r24
    57a8:	cd 01       	movw	r24, r26
    57aa:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	9e a3       	lds	r25, 0x5e
    57b4:	8d a3       	lds	r24, 0x5d
    57b6:	12 c0       	rjmp	.+36     	; 0x57dc <front+0x2ec>
    57b8:	80 e7       	ldi	r24, 0x70	; 112
    57ba:	91 e0       	ldi	r25, 0x01	; 1
    57bc:	98 a7       	lds	r25, 0x78
    57be:	8f a3       	lds	r24, 0x5f
    57c0:	8f a1       	lds	r24, 0x4f
    57c2:	98 a5       	lds	r25, 0x68
    57c4:	8c 01       	movw	r16, r24
    57c6:	c8 01       	movw	r24, r16
    57c8:	01 97       	sbiw	r24, 0x01	; 1
    57ca:	f1 f7       	brne	.-4      	; 0x57c8 <front+0x2d8>
    57cc:	8c 01       	movw	r16, r24
    57ce:	18 a7       	lds	r17, 0x78
    57d0:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d2:	8d a1       	lds	r24, 0x4d
    57d4:	9e a1       	lds	r25, 0x4e
    57d6:	01 97       	sbiw	r24, 0x01	; 1
    57d8:	9e a3       	lds	r25, 0x5e
    57da:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57dc:	8d a1       	lds	r24, 0x4d
    57de:	9e a1       	lds	r25, 0x4e
    57e0:	00 97       	sbiw	r24, 0x00	; 0
    57e2:	51 f7       	brne	.-44     	; 0x57b8 <front+0x2c8>
    57e4:	17 c0       	rjmp	.+46     	; 0x5814 <front+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e6:	69 a1       	lds	r22, 0x49
    57e8:	7a a1       	lds	r23, 0x4a
    57ea:	8b a1       	lds	r24, 0x4b
    57ec:	9c a1       	lds	r25, 0x4c
    57ee:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    57f2:	dc 01       	movw	r26, r24
    57f4:	cb 01       	movw	r24, r22
    57f6:	9e a3       	lds	r25, 0x5e
    57f8:	8d a3       	lds	r24, 0x5d
    57fa:	8d a1       	lds	r24, 0x4d
    57fc:	9e a1       	lds	r25, 0x4e
    57fe:	9a a7       	lds	r25, 0x7a
    5800:	89 a7       	lds	r24, 0x79
    5802:	89 a5       	lds	r24, 0x69
    5804:	9a a5       	lds	r25, 0x6a
    5806:	8c 01       	movw	r16, r24
    5808:	c8 01       	movw	r24, r16
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <front+0x31a>
    580e:	8c 01       	movw	r16, r24
    5810:	1a a7       	lds	r17, 0x7a
    5812:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	arm_backward();
    5814:	0e 94 cf 24 	call	0x499e	; 0x499e <arm_backward>
    5818:	80 e0       	ldi	r24, 0x00	; 0
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	a6 e9       	ldi	r26, 0x96	; 150
    581e:	b3 e4       	ldi	r27, 0x43	; 67
    5820:	8b a7       	lds	r24, 0x7b
    5822:	9c a7       	lds	r25, 0x7c
    5824:	ad a7       	lds	r26, 0x7d
    5826:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5828:	6b a5       	lds	r22, 0x6b
    582a:	7c a5       	lds	r23, 0x6c
    582c:	8d a5       	lds	r24, 0x6d
    582e:	9e a5       	lds	r25, 0x6e
    5830:	26 e6       	ldi	r18, 0x66	; 102
    5832:	36 e6       	ldi	r19, 0x66	; 102
    5834:	46 e6       	ldi	r20, 0x66	; 102
    5836:	55 e4       	ldi	r21, 0x45	; 69
    5838:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	8f a7       	lds	r24, 0x7f
    5842:	98 ab       	sts	0x58, r25
    5844:	a9 ab       	sts	0x59, r26
    5846:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5848:	11 e0       	ldi	r17, 0x01	; 1
    584a:	6f a5       	lds	r22, 0x6f
    584c:	78 a9       	sts	0x48, r23
    584e:	89 a9       	sts	0x49, r24
    5850:	9a a9       	sts	0x4a, r25
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	40 e8       	ldi	r20, 0x80	; 128
    5858:	5f e3       	ldi	r21, 0x3F	; 63
    585a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    585e:	88 23       	and	r24, r24
    5860:	0c f0       	brlt	.+2      	; 0x5864 <front+0x374>
    5862:	10 e0       	ldi	r17, 0x00	; 0
    5864:	11 23       	and	r17, r17
    5866:	29 f0       	breq	.+10     	; 0x5872 <front+0x382>
		__ticks = 1;
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	90 e0       	ldi	r25, 0x00	; 0
    586c:	9c ab       	sts	0x5c, r25
    586e:	8b ab       	sts	0x5b, r24
    5870:	46 c0       	rjmp	.+140    	; 0x58fe <front+0x40e>
	else if (__tmp > 65535)
    5872:	11 e0       	ldi	r17, 0x01	; 1
    5874:	6f a5       	lds	r22, 0x6f
    5876:	78 a9       	sts	0x48, r23
    5878:	89 a9       	sts	0x49, r24
    587a:	9a a9       	sts	0x4a, r25
    587c:	20 e0       	ldi	r18, 0x00	; 0
    587e:	3f ef       	ldi	r19, 0xFF	; 255
    5880:	4f e7       	ldi	r20, 0x7F	; 127
    5882:	57 e4       	ldi	r21, 0x47	; 71
    5884:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5888:	18 16       	cp	r1, r24
    588a:	0c f0       	brlt	.+2      	; 0x588e <front+0x39e>
    588c:	10 e0       	ldi	r17, 0x00	; 0
    588e:	11 23       	and	r17, r17
    5890:	61 f1       	breq	.+88     	; 0x58ea <front+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5892:	6b a5       	lds	r22, 0x6b
    5894:	7c a5       	lds	r23, 0x6c
    5896:	8d a5       	lds	r24, 0x6d
    5898:	9e a5       	lds	r25, 0x6e
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	40 e2       	ldi	r20, 0x20	; 32
    58a0:	51 e4       	ldi	r21, 0x41	; 65
    58a2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	bc 01       	movw	r22, r24
    58ac:	cd 01       	movw	r24, r26
    58ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	9c ab       	sts	0x5c, r25
    58b8:	8b ab       	sts	0x5b, r24
    58ba:	12 c0       	rjmp	.+36     	; 0x58e0 <front+0x3f0>
    58bc:	80 e7       	ldi	r24, 0x70	; 112
    58be:	91 e0       	ldi	r25, 0x01	; 1
    58c0:	9e ab       	sts	0x5e, r25
    58c2:	8d ab       	sts	0x5d, r24
    58c4:	8d a9       	sts	0x4d, r24
    58c6:	9e a9       	sts	0x4e, r25
    58c8:	8c 01       	movw	r16, r24
    58ca:	c8 01       	movw	r24, r16
    58cc:	01 97       	sbiw	r24, 0x01	; 1
    58ce:	f1 f7       	brne	.-4      	; 0x58cc <front+0x3dc>
    58d0:	8c 01       	movw	r16, r24
    58d2:	1e ab       	sts	0x5e, r17
    58d4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d6:	8b a9       	sts	0x4b, r24
    58d8:	9c a9       	sts	0x4c, r25
    58da:	01 97       	sbiw	r24, 0x01	; 1
    58dc:	9c ab       	sts	0x5c, r25
    58de:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e0:	8b a9       	sts	0x4b, r24
    58e2:	9c a9       	sts	0x4c, r25
    58e4:	00 97       	sbiw	r24, 0x00	; 0
    58e6:	51 f7       	brne	.-44     	; 0x58bc <front+0x3cc>
    58e8:	17 c0       	rjmp	.+46     	; 0x5918 <front+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ea:	6f a5       	lds	r22, 0x6f
    58ec:	78 a9       	sts	0x48, r23
    58ee:	89 a9       	sts	0x49, r24
    58f0:	9a a9       	sts	0x4a, r25
    58f2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	9c ab       	sts	0x5c, r25
    58fc:	8b ab       	sts	0x5b, r24
    58fe:	8b a9       	sts	0x4b, r24
    5900:	9c a9       	sts	0x4c, r25
    5902:	98 af       	sts	0x78, r25
    5904:	8f ab       	sts	0x5f, r24
    5906:	8f a9       	sts	0x4f, r24
    5908:	98 ad       	sts	0x68, r25
    590a:	8c 01       	movw	r16, r24
    590c:	c8 01       	movw	r24, r16
    590e:	01 97       	sbiw	r24, 0x01	; 1
    5910:	f1 f7       	brne	.-4      	; 0x590e <front+0x41e>
    5912:	8c 01       	movw	r16, r24
    5914:	18 af       	sts	0x78, r17
    5916:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
    5918:	e8 96       	adiw	r28, 0x38	; 56
    591a:	0f b6       	in	r0, 0x3f	; 63
    591c:	f8 94       	cli
    591e:	de bf       	out	0x3e, r29	; 62
    5920:	0f be       	out	0x3f, r0	; 63
    5922:	cd bf       	out	0x3d, r28	; 61
    5924:	df 91       	pop	r29
    5926:	cf 91       	pop	r28
    5928:	1f 91       	pop	r17
    592a:	0f 91       	pop	r16
    592c:	08 95       	ret

0000592e <read_line>:

*/

void read_line()

{
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	cd b7       	in	r28, 0x3d	; 61
    5934:	de b7       	in	r29, 0x3e	; 62

    Left_white_line = (int) ADC_Conversion(3); //Getting data of Left WL Sensor
    5936:	83 e0       	ldi	r24, 0x03	; 3
    5938:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    593c:	80 93 32 03 	sts	0x0332, r24

    Center_white_line = (int) ADC_Conversion(2); //Getting data of Center WL Sensor
    5940:	82 e0       	ldi	r24, 0x02	; 2
    5942:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    5946:	80 93 33 03 	sts	0x0333, r24

    Right_white_line = (int) ADC_Conversion(1); //Getting data of Right WL Sensor
    594a:	81 e0       	ldi	r24, 0x01	; 1
    594c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ADC_Conversion>
    5950:	80 93 34 03 	sts	0x0334, r24

}
    5954:	df 91       	pop	r29
    5956:	cf 91       	pop	r28
    5958:	08 95       	ret

0000595a <display_line>:

*/

void display_line()

 {
    595a:	cf 93       	push	r28
    595c:	df 93       	push	r29
    595e:	cd b7       	in	r28, 0x3d	; 61
    5960:	de b7       	in	r29, 0x3e	; 62

    lcd_print(1,1,Left_white_line,3);
    5962:	80 91 32 03 	lds	r24, 0x0332
    5966:	28 2f       	mov	r18, r24
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	61 e0       	ldi	r22, 0x01	; 1
    596e:	a9 01       	movw	r20, r18
    5970:	23 e0       	ldi	r18, 0x03	; 3
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,5,Center_white_line,3);
    5978:	80 91 33 03 	lds	r24, 0x0333
    597c:	28 2f       	mov	r18, r24
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	65 e0       	ldi	r22, 0x05	; 5
    5984:	a9 01       	movw	r20, r18
    5986:	23 e0       	ldi	r18, 0x03	; 3
    5988:	30 e0       	ldi	r19, 0x00	; 0
    598a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,9,Right_white_line,3);
    598e:	80 91 34 03 	lds	r24, 0x0334
    5992:	28 2f       	mov	r18, r24
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	81 e0       	ldi	r24, 0x01	; 1
    5998:	69 e0       	ldi	r22, 0x09	; 9
    599a:	a9 01       	movw	r20, r18
    599c:	23 e0       	ldi	r18, 0x03	; 3
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

    lcd_print(1,1,line_cond,1);
    59a4:	80 91 3b 03 	lds	r24, 0x033B
    59a8:	90 91 3c 03 	lds	r25, 0x033C
    59ac:	9c 01       	movw	r18, r24
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	61 e0       	ldi	r22, 0x01	; 1
    59b2:	a9 01       	movw	r20, r18
    59b4:	21 e0       	ldi	r18, 0x01	; 1
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <lcd_print>

}
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	08 95       	ret

000059c2 <clear_count>:

*/

void clear_count()

{
    59c2:	cf 93       	push	r28
    59c4:	df 93       	push	r29
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62

    node = 0;
    59ca:	10 92 50 03 	sts	0x0350, r1
    59ce:	10 92 4f 03 	sts	0x034F, r1

    node_flag = 0;
    59d2:	10 92 70 04 	sts	0x0470, r1
    59d6:	10 92 6f 04 	sts	0x046F, r1

    left_flag = 0;
    59da:	10 92 42 03 	sts	0x0342, r1
    59de:	10 92 41 03 	sts	0x0341, r1

    right_flag = 0;
    59e2:	10 92 44 03 	sts	0x0344, r1
    59e6:	10 92 43 03 	sts	0x0343, r1

}
    59ea:	df 91       	pop	r29
    59ec:	cf 91       	pop	r28
    59ee:	08 95       	ret

000059f0 <enable_flags>:

*/

void enable_flags(int l_flag, int n_flag, int r_flag)

{
    59f0:	cf 93       	push	r28
    59f2:	df 93       	push	r29
    59f4:	00 d0       	rcall	.+0      	; 0x59f6 <enable_flags+0x6>
    59f6:	00 d0       	rcall	.+0      	; 0x59f8 <enable_flags+0x8>
    59f8:	cd b7       	in	r28, 0x3d	; 61
    59fa:	de b7       	in	r29, 0x3e	; 62
    59fc:	9a 83       	std	Y+2, r25	; 0x02
    59fe:	89 83       	std	Y+1, r24	; 0x01
    5a00:	7c 83       	std	Y+4, r23	; 0x04
    5a02:	6b 83       	std	Y+3, r22	; 0x03
    5a04:	5e 83       	std	Y+6, r21	; 0x06
    5a06:	4d 83       	std	Y+5, r20	; 0x05

    en_left = l_flag;
    5a08:	89 81       	ldd	r24, Y+1	; 0x01
    5a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0c:	90 93 3e 03 	sts	0x033E, r25
    5a10:	80 93 3d 03 	sts	0x033D, r24

    en_right = r_flag;
    5a14:	8d 81       	ldd	r24, Y+5	; 0x05
    5a16:	9e 81       	ldd	r25, Y+6	; 0x06
    5a18:	90 93 40 03 	sts	0x0340, r25
    5a1c:	80 93 3f 03 	sts	0x033F, r24

    en_node = n_flag;
    5a20:	8b 81       	ldd	r24, Y+3	; 0x03
    5a22:	9c 81       	ldd	r25, Y+4	; 0x04
    5a24:	90 93 01 02 	sts	0x0201, r25
    5a28:	80 93 00 02 	sts	0x0200, r24

}
    5a2c:	26 96       	adiw	r28, 0x06	; 6
    5a2e:	0f b6       	in	r0, 0x3f	; 63
    5a30:	f8 94       	cli
    5a32:	de bf       	out	0x3e, r29	; 62
    5a34:	0f be       	out	0x3f, r0	; 63
    5a36:	cd bf       	out	0x3d, r28	; 61
    5a38:	df 91       	pop	r29
    5a3a:	cf 91       	pop	r28
    5a3c:	08 95       	ret

00005a3e <line_conditions>:


*/

void line_conditions()
{
    5a3e:	cf 93       	push	r28
    5a40:	df 93       	push	r29
    5a42:	cd b7       	in	r28, 0x3d	; 61
    5a44:	de b7       	in	r29, 0x3e	; 62
	// Nodes Condition
	if (Center_white_line >= 115 || Left_white_line >= 120 || Right_white_line >= 115 || (Center_white_line >=120 && (Left_white_line >= 110 || Right_white_line >= 110))) // 1 1 1
    5a46:	80 91 33 03 	lds	r24, 0x0333
    5a4a:	83 37       	cpi	r24, 0x73	; 115
    5a4c:	a0 f4       	brcc	.+40     	; 0x5a76 <line_conditions+0x38>
    5a4e:	80 91 32 03 	lds	r24, 0x0332
    5a52:	88 37       	cpi	r24, 0x78	; 120
    5a54:	80 f4       	brcc	.+32     	; 0x5a76 <line_conditions+0x38>
    5a56:	80 91 34 03 	lds	r24, 0x0334
    5a5a:	83 37       	cpi	r24, 0x73	; 115
    5a5c:	60 f4       	brcc	.+24     	; 0x5a76 <line_conditions+0x38>
    5a5e:	80 91 33 03 	lds	r24, 0x0333
    5a62:	88 37       	cpi	r24, 0x78	; 120
    5a64:	a8 f0       	brcs	.+42     	; 0x5a90 <line_conditions+0x52>
    5a66:	80 91 32 03 	lds	r24, 0x0332
    5a6a:	8e 36       	cpi	r24, 0x6E	; 110
    5a6c:	20 f4       	brcc	.+8      	; 0x5a76 <line_conditions+0x38>
    5a6e:	80 91 34 03 	lds	r24, 0x0334
    5a72:	8e 36       	cpi	r24, 0x6E	; 110
    5a74:	68 f0       	brcs	.+26     	; 0x5a90 <line_conditions+0x52>
	{
		line_cond = 1;
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	90 93 3c 03 	sts	0x033C, r25
    5a7e:	80 93 3b 03 	sts	0x033B, r24
		node_flag = 1;
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	90 93 70 04 	sts	0x0470, r25
    5a8a:	80 93 6f 04 	sts	0x046F, r24
    5a8e:	71 c0       	rjmp	.+226    	; 0x5b72 <line_conditions+0x134>
	}
	
	//Straight Line Condition
	else if (Left_white_line < 11  && Center_white_line >= 14 && Right_white_line < 11) // 0 1 0
    5a90:	80 91 32 03 	lds	r24, 0x0332
    5a94:	8b 30       	cpi	r24, 0x0B	; 11
    5a96:	78 f4       	brcc	.+30     	; 0x5ab6 <line_conditions+0x78>
    5a98:	80 91 33 03 	lds	r24, 0x0333
    5a9c:	8e 30       	cpi	r24, 0x0E	; 14
    5a9e:	58 f0       	brcs	.+22     	; 0x5ab6 <line_conditions+0x78>
    5aa0:	80 91 34 03 	lds	r24, 0x0334
    5aa4:	8b 30       	cpi	r24, 0x0B	; 11
    5aa6:	38 f4       	brcc	.+14     	; 0x5ab6 <line_conditions+0x78>
	{
		line_cond = 2;
    5aa8:	82 e0       	ldi	r24, 0x02	; 2
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	90 93 3c 03 	sts	0x033C, r25
    5ab0:	80 93 3b 03 	sts	0x033B, r24
    5ab4:	5e c0       	rjmp	.+188    	; 0x5b72 <line_conditions+0x134>
	}
	
	//Straight Line Condition (Robot moved towards right)
	else if (Left_white_line > 20 && Center_white_line < 11 && Right_white_line < 11) // 1 0 0
    5ab6:	80 91 32 03 	lds	r24, 0x0332
    5aba:	85 31       	cpi	r24, 0x15	; 21
    5abc:	78 f0       	brcs	.+30     	; 0x5adc <line_conditions+0x9e>
    5abe:	80 91 33 03 	lds	r24, 0x0333
    5ac2:	8b 30       	cpi	r24, 0x0B	; 11
    5ac4:	58 f4       	brcc	.+22     	; 0x5adc <line_conditions+0x9e>
    5ac6:	80 91 34 03 	lds	r24, 0x0334
    5aca:	8b 30       	cpi	r24, 0x0B	; 11
    5acc:	38 f4       	brcc	.+14     	; 0x5adc <line_conditions+0x9e>
	{
		line_cond = 3;
    5ace:	83 e0       	ldi	r24, 0x03	; 3
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	90 93 3c 03 	sts	0x033C, r25
    5ad6:	80 93 3b 03 	sts	0x033B, r24
    5ada:	4b c0       	rjmp	.+150    	; 0x5b72 <line_conditions+0x134>
	}
     	//Straight Line Condition (Robot moved slightly towards right)
        else if (Left_white_line >= 10 && Center_white_line >= 10 && Right_white_line < 11) // 1 1 0
    5adc:	80 91 32 03 	lds	r24, 0x0332
    5ae0:	8a 30       	cpi	r24, 0x0A	; 10
    5ae2:	78 f0       	brcs	.+30     	; 0x5b02 <line_conditions+0xc4>
    5ae4:	80 91 33 03 	lds	r24, 0x0333
    5ae8:	8a 30       	cpi	r24, 0x0A	; 10
    5aea:	58 f0       	brcs	.+22     	; 0x5b02 <line_conditions+0xc4>
    5aec:	80 91 34 03 	lds	r24, 0x0334
    5af0:	8b 30       	cpi	r24, 0x0B	; 11
    5af2:	38 f4       	brcc	.+14     	; 0x5b02 <line_conditions+0xc4>
	{
		line_cond = 6;
    5af4:	86 e0       	ldi	r24, 0x06	; 6
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	90 93 3c 03 	sts	0x033C, r25
    5afc:	80 93 3b 03 	sts	0x033B, r24
    5b00:	38 c0       	rjmp	.+112    	; 0x5b72 <line_conditions+0x134>
	}

        
	//Straight Line Condition (Robot moved towards left)
	else if (Left_white_line < 11 && Center_white_line < 11 && Right_white_line > 20) // 0 0 1
    5b02:	80 91 32 03 	lds	r24, 0x0332
    5b06:	8b 30       	cpi	r24, 0x0B	; 11
    5b08:	78 f4       	brcc	.+30     	; 0x5b28 <line_conditions+0xea>
    5b0a:	80 91 33 03 	lds	r24, 0x0333
    5b0e:	8b 30       	cpi	r24, 0x0B	; 11
    5b10:	58 f4       	brcc	.+22     	; 0x5b28 <line_conditions+0xea>
    5b12:	80 91 34 03 	lds	r24, 0x0334
    5b16:	85 31       	cpi	r24, 0x15	; 21
    5b18:	38 f0       	brcs	.+14     	; 0x5b28 <line_conditions+0xea>
	{
		line_cond = 4;
    5b1a:	84 e0       	ldi	r24, 0x04	; 4
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	90 93 3c 03 	sts	0x033C, r25
    5b22:	80 93 3b 03 	sts	0x033B, r24
    5b26:	25 c0       	rjmp	.+74     	; 0x5b72 <line_conditions+0x134>
	}
	
	
     //Straight Line Condition (Robot moved slightly towards left)
        else if (Left_white_line < 11 && Center_white_line >= 10 && Right_white_line >= 10) // 0 1 1
    5b28:	80 91 32 03 	lds	r24, 0x0332
    5b2c:	8b 30       	cpi	r24, 0x0B	; 11
    5b2e:	78 f4       	brcc	.+30     	; 0x5b4e <line_conditions+0x110>
    5b30:	80 91 33 03 	lds	r24, 0x0333
    5b34:	8a 30       	cpi	r24, 0x0A	; 10
    5b36:	58 f0       	brcs	.+22     	; 0x5b4e <line_conditions+0x110>
    5b38:	80 91 34 03 	lds	r24, 0x0334
    5b3c:	8a 30       	cpi	r24, 0x0A	; 10
    5b3e:	38 f0       	brcs	.+14     	; 0x5b4e <line_conditions+0x110>
	{
		line_cond = 7;//slighty_R
    5b40:	87 e0       	ldi	r24, 0x07	; 7
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	90 93 3c 03 	sts	0x033C, r25
    5b48:	80 93 3b 03 	sts	0x033B, r24
    5b4c:	12 c0       	rjmp	.+36     	; 0x5b72 <line_conditions+0x134>
	}

	//No Line Condition
	else if (Left_white_line < 10 && Center_white_line < 10 && Right_white_line < 10) // 0 0 0
    5b4e:	80 91 32 03 	lds	r24, 0x0332
    5b52:	8a 30       	cpi	r24, 0x0A	; 10
    5b54:	70 f4       	brcc	.+28     	; 0x5b72 <line_conditions+0x134>
    5b56:	80 91 33 03 	lds	r24, 0x0333
    5b5a:	8a 30       	cpi	r24, 0x0A	; 10
    5b5c:	50 f4       	brcc	.+20     	; 0x5b72 <line_conditions+0x134>
    5b5e:	80 91 34 03 	lds	r24, 0x0334
    5b62:	8a 30       	cpi	r24, 0x0A	; 10
    5b64:	30 f4       	brcc	.+12     	; 0x5b72 <line_conditions+0x134>
	{
		line_cond = 5;
    5b66:	85 e0       	ldi	r24, 0x05	; 5
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	90 93 3c 03 	sts	0x033C, r25
    5b6e:	80 93 3b 03 	sts	0x033B, r24
	}

}
    5b72:	df 91       	pop	r29
    5b74:	cf 91       	pop	r28
    5b76:	08 95       	ret

00005b78 <line_follow>:

*/

void line_follow() 

{
    5b78:	0f 93       	push	r16
    5b7a:	1f 93       	push	r17
    5b7c:	cf 93       	push	r28
    5b7e:	df 93       	push	r29
    5b80:	cd b7       	in	r28, 0x3d	; 61
    5b82:	de b7       	in	r29, 0x3e	; 62
    5b84:	e8 97       	sbiw	r28, 0x38	; 56
    5b86:	0f b6       	in	r0, 0x3f	; 63
    5b88:	f8 94       	cli
    5b8a:	de bf       	out	0x3e, r29	; 62
    5b8c:	0f be       	out	0x3f, r0	; 63
    5b8e:	cd bf       	out	0x3d, r28	; 61

    if (t4_flag == 1) 
    5b90:	80 91 37 03 	lds	r24, 0x0337
    5b94:	90 91 38 03 	lds	r25, 0x0338
    5b98:	81 30       	cpi	r24, 0x01	; 1
    5b9a:	91 05       	cpc	r25, r1
    5b9c:	61 f4       	brne	.+24     	; 0x5bb6 <line_follow+0x3e>

	{

        node_flag = 0;
    5b9e:	10 92 70 04 	sts	0x0470, r1
    5ba2:	10 92 6f 04 	sts	0x046F, r1

        left_flag = 0;
    5ba6:	10 92 42 03 	sts	0x0342, r1
    5baa:	10 92 41 03 	sts	0x0341, r1

        right_flag = 0;
    5bae:	10 92 44 03 	sts	0x0344, r1
    5bb2:	10 92 43 03 	sts	0x0343, r1

    }


    // Node Condition
    if (node_flag == 1)
    5bb6:	80 91 6f 04 	lds	r24, 0x046F
    5bba:	90 91 70 04 	lds	r25, 0x0470
    5bbe:	81 30       	cpi	r24, 0x01	; 1
    5bc0:	91 05       	cpc	r25, r1
    5bc2:	31 f5       	brne	.+76     	; 0x5c10 <line_follow+0x98>

	 {
        // Starting Timer4 to prevent to multiple node detection
        start_timer4(10);
    5bc4:	8a e0       	ldi	r24, 0x0A	; 10
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
    5bc8:	0e 94 3d 1c 	call	0x387a	; 0x387a <start_timer4>

		//buzz(50);

		node++;		// Incrementing Node
    5bcc:	80 91 4f 03 	lds	r24, 0x034F
    5bd0:	90 91 50 03 	lds	r25, 0x0350
    5bd4:	01 96       	adiw	r24, 0x01	; 1
    5bd6:	90 93 50 03 	sts	0x0350, r25
    5bda:	80 93 4f 03 	sts	0x034F, r24

		forward();
    5bde:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

		velocity(253,255);
    5be2:	8d ef       	ldi	r24, 0xFD	; 253
    5be4:	6f ef       	ldi	r22, 0xFF	; 255
    5be6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>

        node_flag = 0;
    5bea:	10 92 70 04 	sts	0x0470, r1
    5bee:	10 92 6f 04 	sts	0x046F, r1
        // Performing required direction alignment based on the master_path obtained from main.py
		travel_path(master_path[node]);
    5bf2:	21 e8       	ldi	r18, 0x81	; 129
    5bf4:	3d e6       	ldi	r19, 0x6D	; 109
    5bf6:	80 91 4f 03 	lds	r24, 0x034F
    5bfa:	90 91 50 03 	lds	r25, 0x0350
    5bfe:	8d 5a       	subi	r24, 0xAD	; 173
    5c00:	9c 4f       	sbci	r25, 0xFC	; 252
    5c02:	fc 01       	movw	r30, r24
    5c04:	80 81       	ld	r24, Z
    5c06:	88 2f       	mov	r24, r24
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	f9 01       	movw	r30, r18
    5c0c:	19 95       	eicall
    5c0e:	66 c2       	rjmp	.+1228   	; 0x60dc <line_follow+0x564>

	 }



    else if (line_cond == 2)// Correct Alignment with black line
    5c10:	80 91 3b 03 	lds	r24, 0x033B
    5c14:	90 91 3c 03 	lds	r25, 0x033C
    5c18:	82 30       	cpi	r24, 0x02	; 2
    5c1a:	91 05       	cpc	r25, r1
    5c1c:	39 f4       	brne	.+14     	; 0x5c2c <line_follow+0xb4>

	{

        forward();
    5c1e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(253, 255);
    5c22:	8d ef       	ldi	r24, 0xFD	; 253
    5c24:	6f ef       	ldi	r22, 0xFF	; 255
    5c26:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    5c2a:	58 c2       	rjmp	.+1200   	; 0x60dc <line_follow+0x564>

    } 
	
   // Rest below are to align the bot to follow the line correctly
	else if (line_cond == 3)
    5c2c:	80 91 3b 03 	lds	r24, 0x033B
    5c30:	90 91 3c 03 	lds	r25, 0x033C
    5c34:	83 30       	cpi	r24, 0x03	; 3
    5c36:	91 05       	cpc	r25, r1
    5c38:	09 f0       	breq	.+2      	; 0x5c3c <line_follow+0xc4>
    5c3a:	89 c0       	rjmp	.+274    	; 0x5d4e <line_follow+0x1d6>

	{

        stop();
    5c3c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    5c40:	80 e0       	ldi	r24, 0x00	; 0
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	a0 e2       	ldi	r26, 0x20	; 32
    5c46:	b1 e4       	ldi	r27, 0x41	; 65
    5c48:	89 83       	std	Y+1, r24	; 0x01
    5c4a:	9a 83       	std	Y+2, r25	; 0x02
    5c4c:	ab 83       	std	Y+3, r26	; 0x03
    5c4e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5c50:	69 81       	ldd	r22, Y+1	; 0x01
    5c52:	7a 81       	ldd	r23, Y+2	; 0x02
    5c54:	8b 81       	ldd	r24, Y+3	; 0x03
    5c56:	9c 81       	ldd	r25, Y+4	; 0x04
    5c58:	26 e6       	ldi	r18, 0x66	; 102
    5c5a:	36 e6       	ldi	r19, 0x66	; 102
    5c5c:	46 e6       	ldi	r20, 0x66	; 102
    5c5e:	55 e4       	ldi	r21, 0x45	; 69
    5c60:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5c64:	dc 01       	movw	r26, r24
    5c66:	cb 01       	movw	r24, r22
    5c68:	8d 83       	std	Y+5, r24	; 0x05
    5c6a:	9e 83       	std	Y+6, r25	; 0x06
    5c6c:	af 83       	std	Y+7, r26	; 0x07
    5c6e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5c70:	11 e0       	ldi	r17, 0x01	; 1
    5c72:	6d 81       	ldd	r22, Y+5	; 0x05
    5c74:	7e 81       	ldd	r23, Y+6	; 0x06
    5c76:	8f 81       	ldd	r24, Y+7	; 0x07
    5c78:	98 85       	ldd	r25, Y+8	; 0x08
    5c7a:	20 e0       	ldi	r18, 0x00	; 0
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	40 e8       	ldi	r20, 0x80	; 128
    5c80:	5f e3       	ldi	r21, 0x3F	; 63
    5c82:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    5c86:	88 23       	and	r24, r24
    5c88:	0c f0       	brlt	.+2      	; 0x5c8c <line_follow+0x114>
    5c8a:	10 e0       	ldi	r17, 0x00	; 0
    5c8c:	11 23       	and	r17, r17
    5c8e:	29 f0       	breq	.+10     	; 0x5c9a <line_follow+0x122>
		__ticks = 1;
    5c90:	81 e0       	ldi	r24, 0x01	; 1
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	9a 87       	std	Y+10, r25	; 0x0a
    5c96:	89 87       	std	Y+9, r24	; 0x09
    5c98:	46 c0       	rjmp	.+140    	; 0x5d26 <line_follow+0x1ae>
	else if (__tmp > 65535)
    5c9a:	11 e0       	ldi	r17, 0x01	; 1
    5c9c:	6d 81       	ldd	r22, Y+5	; 0x05
    5c9e:	7e 81       	ldd	r23, Y+6	; 0x06
    5ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ca2:	98 85       	ldd	r25, Y+8	; 0x08
    5ca4:	20 e0       	ldi	r18, 0x00	; 0
    5ca6:	3f ef       	ldi	r19, 0xFF	; 255
    5ca8:	4f e7       	ldi	r20, 0x7F	; 127
    5caa:	57 e4       	ldi	r21, 0x47	; 71
    5cac:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5cb0:	18 16       	cp	r1, r24
    5cb2:	0c f0       	brlt	.+2      	; 0x5cb6 <line_follow+0x13e>
    5cb4:	10 e0       	ldi	r17, 0x00	; 0
    5cb6:	11 23       	and	r17, r17
    5cb8:	61 f1       	breq	.+88     	; 0x5d12 <line_follow+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cba:	69 81       	ldd	r22, Y+1	; 0x01
    5cbc:	7a 81       	ldd	r23, Y+2	; 0x02
    5cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    5cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	30 e0       	ldi	r19, 0x00	; 0
    5cc6:	40 e2       	ldi	r20, 0x20	; 32
    5cc8:	51 e4       	ldi	r21, 0x41	; 65
    5cca:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	bc 01       	movw	r22, r24
    5cd4:	cd 01       	movw	r24, r26
    5cd6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	9a 87       	std	Y+10, r25	; 0x0a
    5ce0:	89 87       	std	Y+9, r24	; 0x09
    5ce2:	12 c0       	rjmp	.+36     	; 0x5d08 <line_follow+0x190>
    5ce4:	80 e7       	ldi	r24, 0x70	; 112
    5ce6:	91 e0       	ldi	r25, 0x01	; 1
    5ce8:	9c 87       	std	Y+12, r25	; 0x0c
    5cea:	8b 87       	std	Y+11, r24	; 0x0b
    5cec:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cee:	9c 85       	ldd	r25, Y+12	; 0x0c
    5cf0:	8c 01       	movw	r16, r24
    5cf2:	c8 01       	movw	r24, r16
    5cf4:	01 97       	sbiw	r24, 0x01	; 1
    5cf6:	f1 f7       	brne	.-4      	; 0x5cf4 <line_follow+0x17c>
    5cf8:	8c 01       	movw	r16, r24
    5cfa:	1c 87       	std	Y+12, r17	; 0x0c
    5cfc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cfe:	89 85       	ldd	r24, Y+9	; 0x09
    5d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d02:	01 97       	sbiw	r24, 0x01	; 1
    5d04:	9a 87       	std	Y+10, r25	; 0x0a
    5d06:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d08:	89 85       	ldd	r24, Y+9	; 0x09
    5d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d0c:	00 97       	sbiw	r24, 0x00	; 0
    5d0e:	51 f7       	brne	.-44     	; 0x5ce4 <line_follow+0x16c>
    5d10:	17 c0       	rjmp	.+46     	; 0x5d40 <line_follow+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d12:	6d 81       	ldd	r22, Y+5	; 0x05
    5d14:	7e 81       	ldd	r23, Y+6	; 0x06
    5d16:	8f 81       	ldd	r24, Y+7	; 0x07
    5d18:	98 85       	ldd	r25, Y+8	; 0x08
    5d1a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5d1e:	dc 01       	movw	r26, r24
    5d20:	cb 01       	movw	r24, r22
    5d22:	9a 87       	std	Y+10, r25	; 0x0a
    5d24:	89 87       	std	Y+9, r24	; 0x09
    5d26:	89 85       	ldd	r24, Y+9	; 0x09
    5d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d2a:	9e 87       	std	Y+14, r25	; 0x0e
    5d2c:	8d 87       	std	Y+13, r24	; 0x0d
    5d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d32:	8c 01       	movw	r16, r24
    5d34:	f8 01       	movw	r30, r16
    5d36:	31 97       	sbiw	r30, 0x01	; 1
    5d38:	f1 f7       	brne	.-4      	; 0x5d36 <line_follow+0x1be>
    5d3a:	8f 01       	movw	r16, r30
    5d3c:	1e 87       	std	Y+14, r17	; 0x0e
    5d3e:	0d 87       	std	Y+13, r16	; 0x0d

        _delay_ms(10);

        forward();
    5d40:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(180, 255);
    5d44:	84 eb       	ldi	r24, 0xB4	; 180
    5d46:	6f ef       	ldi	r22, 0xFF	; 255
    5d48:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    5d4c:	c7 c1       	rjmp	.+910    	; 0x60dc <line_follow+0x564>

    } 

	else if (line_cond == 4)
    5d4e:	80 91 3b 03 	lds	r24, 0x033B
    5d52:	90 91 3c 03 	lds	r25, 0x033C
    5d56:	84 30       	cpi	r24, 0x04	; 4
    5d58:	91 05       	cpc	r25, r1
    5d5a:	09 f0       	breq	.+2      	; 0x5d5e <line_follow+0x1e6>
    5d5c:	89 c0       	rjmp	.+274    	; 0x5e70 <line_follow+0x2f8>

	{

        stop();
    5d5e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    5d62:	80 e0       	ldi	r24, 0x00	; 0
    5d64:	90 e0       	ldi	r25, 0x00	; 0
    5d66:	a0 e2       	ldi	r26, 0x20	; 32
    5d68:	b1 e4       	ldi	r27, 0x41	; 65
    5d6a:	8f 87       	std	Y+15, r24	; 0x0f
    5d6c:	98 8b       	std	Y+16, r25	; 0x10
    5d6e:	a9 8b       	std	Y+17, r26	; 0x11
    5d70:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d72:	6f 85       	ldd	r22, Y+15	; 0x0f
    5d74:	78 89       	ldd	r23, Y+16	; 0x10
    5d76:	89 89       	ldd	r24, Y+17	; 0x11
    5d78:	9a 89       	ldd	r25, Y+18	; 0x12
    5d7a:	26 e6       	ldi	r18, 0x66	; 102
    5d7c:	36 e6       	ldi	r19, 0x66	; 102
    5d7e:	46 e6       	ldi	r20, 0x66	; 102
    5d80:	55 e4       	ldi	r21, 0x45	; 69
    5d82:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5d86:	dc 01       	movw	r26, r24
    5d88:	cb 01       	movw	r24, r22
    5d8a:	8b 8b       	std	Y+19, r24	; 0x13
    5d8c:	9c 8b       	std	Y+20, r25	; 0x14
    5d8e:	ad 8b       	std	Y+21, r26	; 0x15
    5d90:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5d92:	11 e0       	ldi	r17, 0x01	; 1
    5d94:	6b 89       	ldd	r22, Y+19	; 0x13
    5d96:	7c 89       	ldd	r23, Y+20	; 0x14
    5d98:	8d 89       	ldd	r24, Y+21	; 0x15
    5d9a:	9e 89       	ldd	r25, Y+22	; 0x16
    5d9c:	20 e0       	ldi	r18, 0x00	; 0
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	40 e8       	ldi	r20, 0x80	; 128
    5da2:	5f e3       	ldi	r21, 0x3F	; 63
    5da4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    5da8:	88 23       	and	r24, r24
    5daa:	0c f0       	brlt	.+2      	; 0x5dae <line_follow+0x236>
    5dac:	10 e0       	ldi	r17, 0x00	; 0
    5dae:	11 23       	and	r17, r17
    5db0:	29 f0       	breq	.+10     	; 0x5dbc <line_follow+0x244>
		__ticks = 1;
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	98 8f       	std	Y+24, r25	; 0x18
    5db8:	8f 8b       	std	Y+23, r24	; 0x17
    5dba:	46 c0       	rjmp	.+140    	; 0x5e48 <line_follow+0x2d0>
	else if (__tmp > 65535)
    5dbc:	11 e0       	ldi	r17, 0x01	; 1
    5dbe:	6b 89       	ldd	r22, Y+19	; 0x13
    5dc0:	7c 89       	ldd	r23, Y+20	; 0x14
    5dc2:	8d 89       	ldd	r24, Y+21	; 0x15
    5dc4:	9e 89       	ldd	r25, Y+22	; 0x16
    5dc6:	20 e0       	ldi	r18, 0x00	; 0
    5dc8:	3f ef       	ldi	r19, 0xFF	; 255
    5dca:	4f e7       	ldi	r20, 0x7F	; 127
    5dcc:	57 e4       	ldi	r21, 0x47	; 71
    5dce:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5dd2:	18 16       	cp	r1, r24
    5dd4:	0c f0       	brlt	.+2      	; 0x5dd8 <line_follow+0x260>
    5dd6:	10 e0       	ldi	r17, 0x00	; 0
    5dd8:	11 23       	and	r17, r17
    5dda:	61 f1       	breq	.+88     	; 0x5e34 <line_follow+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ddc:	6f 85       	ldd	r22, Y+15	; 0x0f
    5dde:	78 89       	ldd	r23, Y+16	; 0x10
    5de0:	89 89       	ldd	r24, Y+17	; 0x11
    5de2:	9a 89       	ldd	r25, Y+18	; 0x12
    5de4:	20 e0       	ldi	r18, 0x00	; 0
    5de6:	30 e0       	ldi	r19, 0x00	; 0
    5de8:	40 e2       	ldi	r20, 0x20	; 32
    5dea:	51 e4       	ldi	r21, 0x41	; 65
    5dec:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5df0:	dc 01       	movw	r26, r24
    5df2:	cb 01       	movw	r24, r22
    5df4:	bc 01       	movw	r22, r24
    5df6:	cd 01       	movw	r24, r26
    5df8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5dfc:	dc 01       	movw	r26, r24
    5dfe:	cb 01       	movw	r24, r22
    5e00:	98 8f       	std	Y+24, r25	; 0x18
    5e02:	8f 8b       	std	Y+23, r24	; 0x17
    5e04:	12 c0       	rjmp	.+36     	; 0x5e2a <line_follow+0x2b2>
    5e06:	80 e7       	ldi	r24, 0x70	; 112
    5e08:	91 e0       	ldi	r25, 0x01	; 1
    5e0a:	9a 8f       	std	Y+26, r25	; 0x1a
    5e0c:	89 8f       	std	Y+25, r24	; 0x19
    5e0e:	89 8d       	ldd	r24, Y+25	; 0x19
    5e10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e12:	8c 01       	movw	r16, r24
    5e14:	c8 01       	movw	r24, r16
    5e16:	01 97       	sbiw	r24, 0x01	; 1
    5e18:	f1 f7       	brne	.-4      	; 0x5e16 <line_follow+0x29e>
    5e1a:	8c 01       	movw	r16, r24
    5e1c:	1a 8f       	std	Y+26, r17	; 0x1a
    5e1e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e20:	8f 89       	ldd	r24, Y+23	; 0x17
    5e22:	98 8d       	ldd	r25, Y+24	; 0x18
    5e24:	01 97       	sbiw	r24, 0x01	; 1
    5e26:	98 8f       	std	Y+24, r25	; 0x18
    5e28:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    5e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    5e2e:	00 97       	sbiw	r24, 0x00	; 0
    5e30:	51 f7       	brne	.-44     	; 0x5e06 <line_follow+0x28e>
    5e32:	17 c0       	rjmp	.+46     	; 0x5e62 <line_follow+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e34:	6b 89       	ldd	r22, Y+19	; 0x13
    5e36:	7c 89       	ldd	r23, Y+20	; 0x14
    5e38:	8d 89       	ldd	r24, Y+21	; 0x15
    5e3a:	9e 89       	ldd	r25, Y+22	; 0x16
    5e3c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5e40:	dc 01       	movw	r26, r24
    5e42:	cb 01       	movw	r24, r22
    5e44:	98 8f       	std	Y+24, r25	; 0x18
    5e46:	8f 8b       	std	Y+23, r24	; 0x17
    5e48:	8f 89       	ldd	r24, Y+23	; 0x17
    5e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    5e4c:	9c 8f       	std	Y+28, r25	; 0x1c
    5e4e:	8b 8f       	std	Y+27, r24	; 0x1b
    5e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e54:	8c 01       	movw	r16, r24
    5e56:	f8 01       	movw	r30, r16
    5e58:	31 97       	sbiw	r30, 0x01	; 1
    5e5a:	f1 f7       	brne	.-4      	; 0x5e58 <line_follow+0x2e0>
    5e5c:	8f 01       	movw	r16, r30
    5e5e:	1c 8f       	std	Y+28, r17	; 0x1c
    5e60:	0b 8f       	std	Y+27, r16	; 0x1b

        _delay_ms(10);

        forward();
    5e62:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(254, 180);
    5e66:	8e ef       	ldi	r24, 0xFE	; 254
    5e68:	64 eb       	ldi	r22, 0xB4	; 180
    5e6a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    5e6e:	36 c1       	rjmp	.+620    	; 0x60dc <line_follow+0x564>

    } 

	else if (line_cond == 5)
    5e70:	80 91 3b 03 	lds	r24, 0x033B
    5e74:	90 91 3c 03 	lds	r25, 0x033C
    5e78:	85 30       	cpi	r24, 0x05	; 5
    5e7a:	91 05       	cpc	r25, r1
    5e7c:	39 f4       	brne	.+14     	; 0x5e8c <line_follow+0x314>

	{

        forward();
    5e7e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(253, 255);
    5e82:	8d ef       	ldi	r24, 0xFD	; 253
    5e84:	6f ef       	ldi	r22, 0xFF	; 255
    5e86:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    5e8a:	28 c1       	rjmp	.+592    	; 0x60dc <line_follow+0x564>

        }

       else if (line_cond == 6)
    5e8c:	80 91 3b 03 	lds	r24, 0x033B
    5e90:	90 91 3c 03 	lds	r25, 0x033C
    5e94:	86 30       	cpi	r24, 0x06	; 6
    5e96:	91 05       	cpc	r25, r1
    5e98:	09 f0       	breq	.+2      	; 0x5e9c <line_follow+0x324>
    5e9a:	89 c0       	rjmp	.+274    	; 0x5fae <line_follow+0x436>

	{
        stop();_delay_ms(10);
    5e9c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    5ea0:	80 e0       	ldi	r24, 0x00	; 0
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	a0 e2       	ldi	r26, 0x20	; 32
    5ea6:	b1 e4       	ldi	r27, 0x41	; 65
    5ea8:	8d 8f       	std	Y+29, r24	; 0x1d
    5eaa:	9e 8f       	std	Y+30, r25	; 0x1e
    5eac:	af 8f       	std	Y+31, r26	; 0x1f
    5eae:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5eb0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5eb2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5eb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5eb6:	98 a1       	lds	r25, 0x48
    5eb8:	26 e6       	ldi	r18, 0x66	; 102
    5eba:	36 e6       	ldi	r19, 0x66	; 102
    5ebc:	46 e6       	ldi	r20, 0x66	; 102
    5ebe:	55 e4       	ldi	r21, 0x45	; 69
    5ec0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5ec4:	dc 01       	movw	r26, r24
    5ec6:	cb 01       	movw	r24, r22
    5ec8:	89 a3       	lds	r24, 0x59
    5eca:	9a a3       	lds	r25, 0x5a
    5ecc:	ab a3       	lds	r26, 0x5b
    5ece:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5ed0:	11 e0       	ldi	r17, 0x01	; 1
    5ed2:	69 a1       	lds	r22, 0x49
    5ed4:	7a a1       	lds	r23, 0x4a
    5ed6:	8b a1       	lds	r24, 0x4b
    5ed8:	9c a1       	lds	r25, 0x4c
    5eda:	20 e0       	ldi	r18, 0x00	; 0
    5edc:	30 e0       	ldi	r19, 0x00	; 0
    5ede:	40 e8       	ldi	r20, 0x80	; 128
    5ee0:	5f e3       	ldi	r21, 0x3F	; 63
    5ee2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    5ee6:	88 23       	and	r24, r24
    5ee8:	0c f0       	brlt	.+2      	; 0x5eec <line_follow+0x374>
    5eea:	10 e0       	ldi	r17, 0x00	; 0
    5eec:	11 23       	and	r17, r17
    5eee:	29 f0       	breq	.+10     	; 0x5efa <line_follow+0x382>
		__ticks = 1;
    5ef0:	81 e0       	ldi	r24, 0x01	; 1
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	9e a3       	lds	r25, 0x5e
    5ef6:	8d a3       	lds	r24, 0x5d
    5ef8:	46 c0       	rjmp	.+140    	; 0x5f86 <line_follow+0x40e>
	else if (__tmp > 65535)
    5efa:	11 e0       	ldi	r17, 0x01	; 1
    5efc:	69 a1       	lds	r22, 0x49
    5efe:	7a a1       	lds	r23, 0x4a
    5f00:	8b a1       	lds	r24, 0x4b
    5f02:	9c a1       	lds	r25, 0x4c
    5f04:	20 e0       	ldi	r18, 0x00	; 0
    5f06:	3f ef       	ldi	r19, 0xFF	; 255
    5f08:	4f e7       	ldi	r20, 0x7F	; 127
    5f0a:	57 e4       	ldi	r21, 0x47	; 71
    5f0c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    5f10:	18 16       	cp	r1, r24
    5f12:	0c f0       	brlt	.+2      	; 0x5f16 <line_follow+0x39e>
    5f14:	10 e0       	ldi	r17, 0x00	; 0
    5f16:	11 23       	and	r17, r17
    5f18:	61 f1       	breq	.+88     	; 0x5f72 <line_follow+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f1a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f1c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5f1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f20:	98 a1       	lds	r25, 0x48
    5f22:	20 e0       	ldi	r18, 0x00	; 0
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	40 e2       	ldi	r20, 0x20	; 32
    5f28:	51 e4       	ldi	r21, 0x41	; 65
    5f2a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5f2e:	dc 01       	movw	r26, r24
    5f30:	cb 01       	movw	r24, r22
    5f32:	bc 01       	movw	r22, r24
    5f34:	cd 01       	movw	r24, r26
    5f36:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	cb 01       	movw	r24, r22
    5f3e:	9e a3       	lds	r25, 0x5e
    5f40:	8d a3       	lds	r24, 0x5d
    5f42:	12 c0       	rjmp	.+36     	; 0x5f68 <line_follow+0x3f0>
    5f44:	80 e7       	ldi	r24, 0x70	; 112
    5f46:	91 e0       	ldi	r25, 0x01	; 1
    5f48:	98 a7       	lds	r25, 0x78
    5f4a:	8f a3       	lds	r24, 0x5f
    5f4c:	8f a1       	lds	r24, 0x4f
    5f4e:	98 a5       	lds	r25, 0x68
    5f50:	8c 01       	movw	r16, r24
    5f52:	c8 01       	movw	r24, r16
    5f54:	01 97       	sbiw	r24, 0x01	; 1
    5f56:	f1 f7       	brne	.-4      	; 0x5f54 <line_follow+0x3dc>
    5f58:	8c 01       	movw	r16, r24
    5f5a:	18 a7       	lds	r17, 0x78
    5f5c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f5e:	8d a1       	lds	r24, 0x4d
    5f60:	9e a1       	lds	r25, 0x4e
    5f62:	01 97       	sbiw	r24, 0x01	; 1
    5f64:	9e a3       	lds	r25, 0x5e
    5f66:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f68:	8d a1       	lds	r24, 0x4d
    5f6a:	9e a1       	lds	r25, 0x4e
    5f6c:	00 97       	sbiw	r24, 0x00	; 0
    5f6e:	51 f7       	brne	.-44     	; 0x5f44 <line_follow+0x3cc>
    5f70:	17 c0       	rjmp	.+46     	; 0x5fa0 <line_follow+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f72:	69 a1       	lds	r22, 0x49
    5f74:	7a a1       	lds	r23, 0x4a
    5f76:	8b a1       	lds	r24, 0x4b
    5f78:	9c a1       	lds	r25, 0x4c
    5f7a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    5f7e:	dc 01       	movw	r26, r24
    5f80:	cb 01       	movw	r24, r22
    5f82:	9e a3       	lds	r25, 0x5e
    5f84:	8d a3       	lds	r24, 0x5d
    5f86:	8d a1       	lds	r24, 0x4d
    5f88:	9e a1       	lds	r25, 0x4e
    5f8a:	9a a7       	lds	r25, 0x7a
    5f8c:	89 a7       	lds	r24, 0x79
    5f8e:	89 a5       	lds	r24, 0x69
    5f90:	9a a5       	lds	r25, 0x6a
    5f92:	8c 01       	movw	r16, r24
    5f94:	f8 01       	movw	r30, r16
    5f96:	31 97       	sbiw	r30, 0x01	; 1
    5f98:	f1 f7       	brne	.-4      	; 0x5f96 <line_follow+0x41e>
    5f9a:	8f 01       	movw	r16, r30
    5f9c:	1a a7       	lds	r17, 0x7a
    5f9e:	09 a7       	lds	r16, 0x79

        forward();
    5fa0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(252, 255);
    5fa4:	8c ef       	ldi	r24, 0xFC	; 252
    5fa6:	6f ef       	ldi	r22, 0xFF	; 255
    5fa8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    5fac:	97 c0       	rjmp	.+302    	; 0x60dc <line_follow+0x564>

        }

        else if (line_cond == 7)
    5fae:	80 91 3b 03 	lds	r24, 0x033B
    5fb2:	90 91 3c 03 	lds	r25, 0x033C
    5fb6:	87 30       	cpi	r24, 0x07	; 7
    5fb8:	91 05       	cpc	r25, r1
    5fba:	09 f0       	breq	.+2      	; 0x5fbe <line_follow+0x446>
    5fbc:	89 c0       	rjmp	.+274    	; 0x60d0 <line_follow+0x558>

	{
        stop();
    5fbe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    5fc2:	80 e0       	ldi	r24, 0x00	; 0
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	a0 e2       	ldi	r26, 0x20	; 32
    5fc8:	b1 e4       	ldi	r27, 0x41	; 65
    5fca:	8b a7       	lds	r24, 0x7b
    5fcc:	9c a7       	lds	r25, 0x7c
    5fce:	ad a7       	lds	r26, 0x7d
    5fd0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5fd2:	6b a5       	lds	r22, 0x6b
    5fd4:	7c a5       	lds	r23, 0x6c
    5fd6:	8d a5       	lds	r24, 0x6d
    5fd8:	9e a5       	lds	r25, 0x6e
    5fda:	26 e6       	ldi	r18, 0x66	; 102
    5fdc:	36 e6       	ldi	r19, 0x66	; 102
    5fde:	46 e6       	ldi	r20, 0x66	; 102
    5fe0:	55 e4       	ldi	r21, 0x45	; 69
    5fe2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    5fe6:	dc 01       	movw	r26, r24
    5fe8:	cb 01       	movw	r24, r22
    5fea:	8f a7       	lds	r24, 0x7f
    5fec:	98 ab       	sts	0x58, r25
    5fee:	a9 ab       	sts	0x59, r26
    5ff0:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5ff2:	11 e0       	ldi	r17, 0x01	; 1
    5ff4:	6f a5       	lds	r22, 0x6f
    5ff6:	78 a9       	sts	0x48, r23
    5ff8:	89 a9       	sts	0x49, r24
    5ffa:	9a a9       	sts	0x4a, r25
    5ffc:	20 e0       	ldi	r18, 0x00	; 0
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	40 e8       	ldi	r20, 0x80	; 128
    6002:	5f e3       	ldi	r21, 0x3F	; 63
    6004:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6008:	88 23       	and	r24, r24
    600a:	0c f0       	brlt	.+2      	; 0x600e <line_follow+0x496>
    600c:	10 e0       	ldi	r17, 0x00	; 0
    600e:	11 23       	and	r17, r17
    6010:	29 f0       	breq	.+10     	; 0x601c <line_follow+0x4a4>
		__ticks = 1;
    6012:	81 e0       	ldi	r24, 0x01	; 1
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	9c ab       	sts	0x5c, r25
    6018:	8b ab       	sts	0x5b, r24
    601a:	46 c0       	rjmp	.+140    	; 0x60a8 <line_follow+0x530>
	else if (__tmp > 65535)
    601c:	11 e0       	ldi	r17, 0x01	; 1
    601e:	6f a5       	lds	r22, 0x6f
    6020:	78 a9       	sts	0x48, r23
    6022:	89 a9       	sts	0x49, r24
    6024:	9a a9       	sts	0x4a, r25
    6026:	20 e0       	ldi	r18, 0x00	; 0
    6028:	3f ef       	ldi	r19, 0xFF	; 255
    602a:	4f e7       	ldi	r20, 0x7F	; 127
    602c:	57 e4       	ldi	r21, 0x47	; 71
    602e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6032:	18 16       	cp	r1, r24
    6034:	0c f0       	brlt	.+2      	; 0x6038 <line_follow+0x4c0>
    6036:	10 e0       	ldi	r17, 0x00	; 0
    6038:	11 23       	and	r17, r17
    603a:	61 f1       	breq	.+88     	; 0x6094 <line_follow+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    603c:	6b a5       	lds	r22, 0x6b
    603e:	7c a5       	lds	r23, 0x6c
    6040:	8d a5       	lds	r24, 0x6d
    6042:	9e a5       	lds	r25, 0x6e
    6044:	20 e0       	ldi	r18, 0x00	; 0
    6046:	30 e0       	ldi	r19, 0x00	; 0
    6048:	40 e2       	ldi	r20, 0x20	; 32
    604a:	51 e4       	ldi	r21, 0x41	; 65
    604c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6050:	dc 01       	movw	r26, r24
    6052:	cb 01       	movw	r24, r22
    6054:	bc 01       	movw	r22, r24
    6056:	cd 01       	movw	r24, r26
    6058:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    605c:	dc 01       	movw	r26, r24
    605e:	cb 01       	movw	r24, r22
    6060:	9c ab       	sts	0x5c, r25
    6062:	8b ab       	sts	0x5b, r24
    6064:	12 c0       	rjmp	.+36     	; 0x608a <line_follow+0x512>
    6066:	80 e7       	ldi	r24, 0x70	; 112
    6068:	91 e0       	ldi	r25, 0x01	; 1
    606a:	9e ab       	sts	0x5e, r25
    606c:	8d ab       	sts	0x5d, r24
    606e:	8d a9       	sts	0x4d, r24
    6070:	9e a9       	sts	0x4e, r25
    6072:	8c 01       	movw	r16, r24
    6074:	c8 01       	movw	r24, r16
    6076:	01 97       	sbiw	r24, 0x01	; 1
    6078:	f1 f7       	brne	.-4      	; 0x6076 <line_follow+0x4fe>
    607a:	8c 01       	movw	r16, r24
    607c:	1e ab       	sts	0x5e, r17
    607e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6080:	8b a9       	sts	0x4b, r24
    6082:	9c a9       	sts	0x4c, r25
    6084:	01 97       	sbiw	r24, 0x01	; 1
    6086:	9c ab       	sts	0x5c, r25
    6088:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    608a:	8b a9       	sts	0x4b, r24
    608c:	9c a9       	sts	0x4c, r25
    608e:	00 97       	sbiw	r24, 0x00	; 0
    6090:	51 f7       	brne	.-44     	; 0x6066 <line_follow+0x4ee>
    6092:	17 c0       	rjmp	.+46     	; 0x60c2 <line_follow+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6094:	6f a5       	lds	r22, 0x6f
    6096:	78 a9       	sts	0x48, r23
    6098:	89 a9       	sts	0x49, r24
    609a:	9a a9       	sts	0x4a, r25
    609c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	9c ab       	sts	0x5c, r25
    60a6:	8b ab       	sts	0x5b, r24
    60a8:	8b a9       	sts	0x4b, r24
    60aa:	9c a9       	sts	0x4c, r25
    60ac:	98 af       	sts	0x78, r25
    60ae:	8f ab       	sts	0x5f, r24
    60b0:	8f a9       	sts	0x4f, r24
    60b2:	98 ad       	sts	0x68, r25
    60b4:	8c 01       	movw	r16, r24
    60b6:	f8 01       	movw	r30, r16
    60b8:	31 97       	sbiw	r30, 0x01	; 1
    60ba:	f1 f7       	brne	.-4      	; 0x60b8 <line_follow+0x540>
    60bc:	8f 01       	movw	r16, r30
    60be:	18 af       	sts	0x78, r17
    60c0:	0f ab       	sts	0x5f, r16
		_delay_ms(10);

        forward();
    60c2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>

        velocity(254, 252);
    60c6:	8e ef       	ldi	r24, 0xFE	; 254
    60c8:	6c ef       	ldi	r22, 0xFC	; 252
    60ca:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
    60ce:	06 c0       	rjmp	.+12     	; 0x60dc <line_follow+0x564>

        }
	else
	{
		forward();
    60d0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
		velocity(254,255);
    60d4:	8e ef       	ldi	r24, 0xFE	; 254
    60d6:	6f ef       	ldi	r22, 0xFF	; 255
    60d8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <velocity>
	}
}
    60dc:	e8 96       	adiw	r28, 0x38	; 56
    60de:	0f b6       	in	r0, 0x3f	; 63
    60e0:	f8 94       	cli
    60e2:	de bf       	out	0x3e, r29	; 62
    60e4:	0f be       	out	0x3f, r0	; 63
    60e6:	cd bf       	out	0x3d, r28	; 61
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	08 95       	ret

000060f2 <pick_drop>:
/* This function is takes care of the necessary logic required to carry out the pick and drop 
   actions for different node locations, this is possible because of the identifiers specified in 
   main.c                                                                      */
/************************************************************************/
void pick_drop(char pd)
{
    60f2:	0f 93       	push	r16
    60f4:	1f 93       	push	r17
    60f6:	cf 93       	push	r28
    60f8:	df 93       	push	r29
    60fa:	cd b7       	in	r28, 0x3d	; 61
    60fc:	de b7       	in	r29, 0x3e	; 62
    60fe:	c1 50       	subi	r28, 0x01	; 1
    6100:	d4 40       	sbci	r29, 0x04	; 4
    6102:	0f b6       	in	r0, 0x3f	; 63
    6104:	f8 94       	cli
    6106:	de bf       	out	0x3e, r29	; 62
    6108:	0f be       	out	0x3f, r0	; 63
    610a:	cd bf       	out	0x3d, r28	; 61
    610c:	9e 01       	movw	r18, r28
    610e:	2f 5f       	subi	r18, 0xFF	; 255
    6110:	3b 4f       	sbci	r19, 0xFB	; 251
    6112:	f9 01       	movw	r30, r18
    6114:	80 83       	st	Z, r24
	int pdback=125; // Constant back mm required
    6116:	8d e7       	ldi	r24, 0x7D	; 125
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	9a 83       	std	Y+2, r25	; 0x02
    611c:	89 83       	std	Y+1, r24	; 0x01
	defaulty();// Setting Servos to initial state
    611e:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <defaulty>
	stop();
    6122:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    6126:	80 e0       	ldi	r24, 0x00	; 0
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	a0 ea       	ldi	r26, 0xA0	; 160
    612c:	b1 e4       	ldi	r27, 0x41	; 65
    612e:	8b 83       	std	Y+3, r24	; 0x03
    6130:	9c 83       	std	Y+4, r25	; 0x04
    6132:	ad 83       	std	Y+5, r26	; 0x05
    6134:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6136:	6b 81       	ldd	r22, Y+3	; 0x03
    6138:	7c 81       	ldd	r23, Y+4	; 0x04
    613a:	8d 81       	ldd	r24, Y+5	; 0x05
    613c:	9e 81       	ldd	r25, Y+6	; 0x06
    613e:	26 e6       	ldi	r18, 0x66	; 102
    6140:	36 e6       	ldi	r19, 0x66	; 102
    6142:	46 e6       	ldi	r20, 0x66	; 102
    6144:	55 e4       	ldi	r21, 0x45	; 69
    6146:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    614a:	dc 01       	movw	r26, r24
    614c:	cb 01       	movw	r24, r22
    614e:	8f 83       	std	Y+7, r24	; 0x07
    6150:	98 87       	std	Y+8, r25	; 0x08
    6152:	a9 87       	std	Y+9, r26	; 0x09
    6154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6156:	11 e0       	ldi	r17, 0x01	; 1
    6158:	6f 81       	ldd	r22, Y+7	; 0x07
    615a:	78 85       	ldd	r23, Y+8	; 0x08
    615c:	89 85       	ldd	r24, Y+9	; 0x09
    615e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6160:	20 e0       	ldi	r18, 0x00	; 0
    6162:	30 e0       	ldi	r19, 0x00	; 0
    6164:	40 e8       	ldi	r20, 0x80	; 128
    6166:	5f e3       	ldi	r21, 0x3F	; 63
    6168:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    616c:	88 23       	and	r24, r24
    616e:	0c f0       	brlt	.+2      	; 0x6172 <pick_drop+0x80>
    6170:	10 e0       	ldi	r17, 0x00	; 0
    6172:	11 23       	and	r17, r17
    6174:	29 f0       	breq	.+10     	; 0x6180 <pick_drop+0x8e>
		__ticks = 1;
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	9c 87       	std	Y+12, r25	; 0x0c
    617c:	8b 87       	std	Y+11, r24	; 0x0b
    617e:	46 c0       	rjmp	.+140    	; 0x620c <pick_drop+0x11a>
	else if (__tmp > 65535)
    6180:	11 e0       	ldi	r17, 0x01	; 1
    6182:	6f 81       	ldd	r22, Y+7	; 0x07
    6184:	78 85       	ldd	r23, Y+8	; 0x08
    6186:	89 85       	ldd	r24, Y+9	; 0x09
    6188:	9a 85       	ldd	r25, Y+10	; 0x0a
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	3f ef       	ldi	r19, 0xFF	; 255
    618e:	4f e7       	ldi	r20, 0x7F	; 127
    6190:	57 e4       	ldi	r21, 0x47	; 71
    6192:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6196:	18 16       	cp	r1, r24
    6198:	0c f0       	brlt	.+2      	; 0x619c <pick_drop+0xaa>
    619a:	10 e0       	ldi	r17, 0x00	; 0
    619c:	11 23       	and	r17, r17
    619e:	61 f1       	breq	.+88     	; 0x61f8 <pick_drop+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61a0:	6b 81       	ldd	r22, Y+3	; 0x03
    61a2:	7c 81       	ldd	r23, Y+4	; 0x04
    61a4:	8d 81       	ldd	r24, Y+5	; 0x05
    61a6:	9e 81       	ldd	r25, Y+6	; 0x06
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	40 e2       	ldi	r20, 0x20	; 32
    61ae:	51 e4       	ldi	r21, 0x41	; 65
    61b0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    61b4:	dc 01       	movw	r26, r24
    61b6:	cb 01       	movw	r24, r22
    61b8:	bc 01       	movw	r22, r24
    61ba:	cd 01       	movw	r24, r26
    61bc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    61c0:	dc 01       	movw	r26, r24
    61c2:	cb 01       	movw	r24, r22
    61c4:	9c 87       	std	Y+12, r25	; 0x0c
    61c6:	8b 87       	std	Y+11, r24	; 0x0b
    61c8:	12 c0       	rjmp	.+36     	; 0x61ee <pick_drop+0xfc>
    61ca:	80 e7       	ldi	r24, 0x70	; 112
    61cc:	91 e0       	ldi	r25, 0x01	; 1
    61ce:	9e 87       	std	Y+14, r25	; 0x0e
    61d0:	8d 87       	std	Y+13, r24	; 0x0d
    61d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    61d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    61d6:	8c 01       	movw	r16, r24
    61d8:	c8 01       	movw	r24, r16
    61da:	01 97       	sbiw	r24, 0x01	; 1
    61dc:	f1 f7       	brne	.-4      	; 0x61da <pick_drop+0xe8>
    61de:	8c 01       	movw	r16, r24
    61e0:	1e 87       	std	Y+14, r17	; 0x0e
    61e2:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    61e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    61e8:	01 97       	sbiw	r24, 0x01	; 1
    61ea:	9c 87       	std	Y+12, r25	; 0x0c
    61ec:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    61f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    61f2:	00 97       	sbiw	r24, 0x00	; 0
    61f4:	51 f7       	brne	.-44     	; 0x61ca <pick_drop+0xd8>
    61f6:	17 c0       	rjmp	.+46     	; 0x6226 <pick_drop+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61f8:	6f 81       	ldd	r22, Y+7	; 0x07
    61fa:	78 85       	ldd	r23, Y+8	; 0x08
    61fc:	89 85       	ldd	r24, Y+9	; 0x09
    61fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6200:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6204:	dc 01       	movw	r26, r24
    6206:	cb 01       	movw	r24, r22
    6208:	9c 87       	std	Y+12, r25	; 0x0c
    620a:	8b 87       	std	Y+11, r24	; 0x0b
    620c:	8b 85       	ldd	r24, Y+11	; 0x0b
    620e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6210:	98 8b       	std	Y+16, r25	; 0x10
    6212:	8f 87       	std	Y+15, r24	; 0x0f
    6214:	8f 85       	ldd	r24, Y+15	; 0x0f
    6216:	98 89       	ldd	r25, Y+16	; 0x10
    6218:	8c 01       	movw	r16, r24
    621a:	f8 01       	movw	r30, r16
    621c:	31 97       	sbiw	r30, 0x01	; 1
    621e:	f1 f7       	brne	.-4      	; 0x621c <pick_drop+0x12a>
    6220:	8f 01       	movw	r16, r30
    6222:	18 8b       	std	Y+16, r17	; 0x10
    6224:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(20);
	if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    6226:	80 91 4f 03 	lds	r24, 0x034F
    622a:	90 91 50 03 	lds	r25, 0x0350
    622e:	01 97       	sbiw	r24, 0x01	; 1
    6230:	8d 5a       	subi	r24, 0xAD	; 173
    6232:	9c 4f       	sbci	r25, 0xFC	; 252
    6234:	fc 01       	movw	r30, r24
    6236:	80 81       	ld	r24, Z
    6238:	8c 34       	cpi	r24, 0x4C	; 76
    623a:	b9 f0       	breq	.+46     	; 0x626a <pick_drop+0x178>
    623c:	80 91 4f 03 	lds	r24, 0x034F
    6240:	90 91 50 03 	lds	r25, 0x0350
    6244:	01 97       	sbiw	r24, 0x01	; 1
    6246:	8d 5a       	subi	r24, 0xAD	; 173
    6248:	9c 4f       	sbci	r25, 0xFC	; 252
    624a:	fc 01       	movw	r30, r24
    624c:	80 81       	ld	r24, Z
    624e:	82 35       	cpi	r24, 0x52	; 82
    6250:	61 f0       	breq	.+24     	; 0x626a <pick_drop+0x178>
    6252:	80 91 4f 03 	lds	r24, 0x034F
    6256:	90 91 50 03 	lds	r25, 0x0350
    625a:	01 97       	sbiw	r24, 0x01	; 1
    625c:	8d 5a       	subi	r24, 0xAD	; 173
    625e:	9c 4f       	sbci	r25, 0xFC	; 252
    6260:	fc 01       	movw	r30, r24
    6262:	80 81       	ld	r24, Z
    6264:	85 35       	cpi	r24, 0x55	; 85
    6266:	09 f0       	breq	.+2      	; 0x626a <pick_drop+0x178>
    6268:	93 c0       	rjmp	.+294    	; 0x6390 <pick_drop+0x29e>
	{
	if(pd=='7'||pd=='6') // back_mm for 6x1 and 6X6 node pick case
    626a:	ce 01       	movw	r24, r28
    626c:	8f 5f       	subi	r24, 0xFF	; 255
    626e:	9b 4f       	sbci	r25, 0xFB	; 251
    6270:	fc 01       	movw	r30, r24
    6272:	80 81       	ld	r24, Z
    6274:	87 33       	cpi	r24, 0x37	; 55
    6276:	41 f0       	breq	.+16     	; 0x6288 <pick_drop+0x196>
    6278:	ce 01       	movw	r24, r28
    627a:	8f 5f       	subi	r24, 0xFF	; 255
    627c:	9b 4f       	sbci	r25, 0xFB	; 251
    627e:	fc 01       	movw	r30, r24
    6280:	80 81       	ld	r24, Z
    6282:	86 33       	cpi	r24, 0x36	; 54
    6284:	09 f0       	breq	.+2      	; 0x6288 <pick_drop+0x196>
    6286:	84 c0       	rjmp	.+264    	; 0x6390 <pick_drop+0x29e>
	{
		back_mm(30);//mod
    6288:	8e e1       	ldi	r24, 0x1E	; 30
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    6290:	80 e0       	ldi	r24, 0x00	; 0
    6292:	90 e0       	ldi	r25, 0x00	; 0
    6294:	a0 ea       	ldi	r26, 0xA0	; 160
    6296:	b1 e4       	ldi	r27, 0x41	; 65
    6298:	89 8b       	std	Y+17, r24	; 0x11
    629a:	9a 8b       	std	Y+18, r25	; 0x12
    629c:	ab 8b       	std	Y+19, r26	; 0x13
    629e:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    62a0:	69 89       	ldd	r22, Y+17	; 0x11
    62a2:	7a 89       	ldd	r23, Y+18	; 0x12
    62a4:	8b 89       	ldd	r24, Y+19	; 0x13
    62a6:	9c 89       	ldd	r25, Y+20	; 0x14
    62a8:	26 e6       	ldi	r18, 0x66	; 102
    62aa:	36 e6       	ldi	r19, 0x66	; 102
    62ac:	46 e6       	ldi	r20, 0x66	; 102
    62ae:	55 e4       	ldi	r21, 0x45	; 69
    62b0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    62b4:	dc 01       	movw	r26, r24
    62b6:	cb 01       	movw	r24, r22
    62b8:	8d 8b       	std	Y+21, r24	; 0x15
    62ba:	9e 8b       	std	Y+22, r25	; 0x16
    62bc:	af 8b       	std	Y+23, r26	; 0x17
    62be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    62c0:	11 e0       	ldi	r17, 0x01	; 1
    62c2:	6d 89       	ldd	r22, Y+21	; 0x15
    62c4:	7e 89       	ldd	r23, Y+22	; 0x16
    62c6:	8f 89       	ldd	r24, Y+23	; 0x17
    62c8:	98 8d       	ldd	r25, Y+24	; 0x18
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	40 e8       	ldi	r20, 0x80	; 128
    62d0:	5f e3       	ldi	r21, 0x3F	; 63
    62d2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    62d6:	88 23       	and	r24, r24
    62d8:	0c f0       	brlt	.+2      	; 0x62dc <pick_drop+0x1ea>
    62da:	10 e0       	ldi	r17, 0x00	; 0
    62dc:	11 23       	and	r17, r17
    62de:	29 f0       	breq	.+10     	; 0x62ea <pick_drop+0x1f8>
		__ticks = 1;
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	9a 8f       	std	Y+26, r25	; 0x1a
    62e6:	89 8f       	std	Y+25, r24	; 0x19
    62e8:	46 c0       	rjmp	.+140    	; 0x6376 <pick_drop+0x284>
	else if (__tmp > 65535)
    62ea:	11 e0       	ldi	r17, 0x01	; 1
    62ec:	6d 89       	ldd	r22, Y+21	; 0x15
    62ee:	7e 89       	ldd	r23, Y+22	; 0x16
    62f0:	8f 89       	ldd	r24, Y+23	; 0x17
    62f2:	98 8d       	ldd	r25, Y+24	; 0x18
    62f4:	20 e0       	ldi	r18, 0x00	; 0
    62f6:	3f ef       	ldi	r19, 0xFF	; 255
    62f8:	4f e7       	ldi	r20, 0x7F	; 127
    62fa:	57 e4       	ldi	r21, 0x47	; 71
    62fc:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6300:	18 16       	cp	r1, r24
    6302:	0c f0       	brlt	.+2      	; 0x6306 <pick_drop+0x214>
    6304:	10 e0       	ldi	r17, 0x00	; 0
    6306:	11 23       	and	r17, r17
    6308:	61 f1       	breq	.+88     	; 0x6362 <pick_drop+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    630a:	69 89       	ldd	r22, Y+17	; 0x11
    630c:	7a 89       	ldd	r23, Y+18	; 0x12
    630e:	8b 89       	ldd	r24, Y+19	; 0x13
    6310:	9c 89       	ldd	r25, Y+20	; 0x14
    6312:	20 e0       	ldi	r18, 0x00	; 0
    6314:	30 e0       	ldi	r19, 0x00	; 0
    6316:	40 e2       	ldi	r20, 0x20	; 32
    6318:	51 e4       	ldi	r21, 0x41	; 65
    631a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    631e:	dc 01       	movw	r26, r24
    6320:	cb 01       	movw	r24, r22
    6322:	bc 01       	movw	r22, r24
    6324:	cd 01       	movw	r24, r26
    6326:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    632a:	dc 01       	movw	r26, r24
    632c:	cb 01       	movw	r24, r22
    632e:	9a 8f       	std	Y+26, r25	; 0x1a
    6330:	89 8f       	std	Y+25, r24	; 0x19
    6332:	12 c0       	rjmp	.+36     	; 0x6358 <pick_drop+0x266>
    6334:	80 e7       	ldi	r24, 0x70	; 112
    6336:	91 e0       	ldi	r25, 0x01	; 1
    6338:	9c 8f       	std	Y+28, r25	; 0x1c
    633a:	8b 8f       	std	Y+27, r24	; 0x1b
    633c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    633e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6340:	8c 01       	movw	r16, r24
    6342:	c8 01       	movw	r24, r16
    6344:	01 97       	sbiw	r24, 0x01	; 1
    6346:	f1 f7       	brne	.-4      	; 0x6344 <pick_drop+0x252>
    6348:	8c 01       	movw	r16, r24
    634a:	1c 8f       	std	Y+28, r17	; 0x1c
    634c:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    634e:	89 8d       	ldd	r24, Y+25	; 0x19
    6350:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6352:	01 97       	sbiw	r24, 0x01	; 1
    6354:	9a 8f       	std	Y+26, r25	; 0x1a
    6356:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6358:	89 8d       	ldd	r24, Y+25	; 0x19
    635a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    635c:	00 97       	sbiw	r24, 0x00	; 0
    635e:	51 f7       	brne	.-44     	; 0x6334 <pick_drop+0x242>
    6360:	17 c0       	rjmp	.+46     	; 0x6390 <pick_drop+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6362:	6d 89       	ldd	r22, Y+21	; 0x15
    6364:	7e 89       	ldd	r23, Y+22	; 0x16
    6366:	8f 89       	ldd	r24, Y+23	; 0x17
    6368:	98 8d       	ldd	r25, Y+24	; 0x18
    636a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    636e:	dc 01       	movw	r26, r24
    6370:	cb 01       	movw	r24, r22
    6372:	9a 8f       	std	Y+26, r25	; 0x1a
    6374:	89 8f       	std	Y+25, r24	; 0x19
    6376:	89 8d       	ldd	r24, Y+25	; 0x19
    6378:	9a 8d       	ldd	r25, Y+26	; 0x1a
    637a:	9e 8f       	std	Y+30, r25	; 0x1e
    637c:	8d 8f       	std	Y+29, r24	; 0x1d
    637e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6382:	8c 01       	movw	r16, r24
    6384:	f8 01       	movw	r30, r16
    6386:	31 97       	sbiw	r30, 0x01	; 1
    6388:	f1 f7       	brne	.-4      	; 0x6386 <pick_drop+0x294>
    638a:	8f 01       	movw	r16, r30
    638c:	1e 8f       	std	Y+30, r17	; 0x1e
    638e:	0d 8f       	std	Y+29, r16	; 0x1d
		_delay_ms(20);//mod
	}
	}
	
	if(pd=='D'){ // D refers to drop
    6390:	ce 01       	movw	r24, r28
    6392:	8f 5f       	subi	r24, 0xFF	; 255
    6394:	9b 4f       	sbci	r25, 0xFB	; 251
    6396:	fc 01       	movw	r30, r24
    6398:	80 81       	ld	r24, Z
    639a:	84 34       	cpi	r24, 0x44	; 68
    639c:	09 f0       	breq	.+2      	; 0x63a0 <pick_drop+0x2ae>
    639e:	e0 c1       	rjmp	.+960    	; 0x6760 <pick_drop+0x66e>
		if(master_path[node-1]!='N'){
    63a0:	80 91 4f 03 	lds	r24, 0x034F
    63a4:	90 91 50 03 	lds	r25, 0x0350
    63a8:	01 97       	sbiw	r24, 0x01	; 1
    63aa:	8d 5a       	subi	r24, 0xAD	; 173
    63ac:	9c 4f       	sbci	r25, 0xFC	; 252
    63ae:	fc 01       	movw	r30, r24
    63b0:	80 81       	ld	r24, Z
    63b2:	8e 34       	cpi	r24, 0x4E	; 78
    63b4:	09 f4       	brne	.+2      	; 0x63b8 <pick_drop+0x2c6>
    63b6:	87 c0       	rjmp	.+270    	; 0x64c6 <pick_drop+0x3d4>
		drop();
    63b8:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <drop>
    63bc:	80 e0       	ldi	r24, 0x00	; 0
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	a8 ec       	ldi	r26, 0xC8	; 200
    63c2:	b2 e4       	ldi	r27, 0x42	; 66
    63c4:	8f 8f       	std	Y+31, r24	; 0x1f
    63c6:	98 a3       	lds	r25, 0x58
    63c8:	a9 a3       	lds	r26, 0x59
    63ca:	ba a3       	lds	r27, 0x5a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    63cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    63ce:	78 a1       	lds	r23, 0x48
    63d0:	89 a1       	lds	r24, 0x49
    63d2:	9a a1       	lds	r25, 0x4a
    63d4:	26 e6       	ldi	r18, 0x66	; 102
    63d6:	36 e6       	ldi	r19, 0x66	; 102
    63d8:	46 e6       	ldi	r20, 0x66	; 102
    63da:	55 e4       	ldi	r21, 0x45	; 69
    63dc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    63e0:	dc 01       	movw	r26, r24
    63e2:	cb 01       	movw	r24, r22
    63e4:	8b a3       	lds	r24, 0x5b
    63e6:	9c a3       	lds	r25, 0x5c
    63e8:	ad a3       	lds	r26, 0x5d
    63ea:	be a3       	lds	r27, 0x5e
	if (__tmp < 1.0)
    63ec:	11 e0       	ldi	r17, 0x01	; 1
    63ee:	6b a1       	lds	r22, 0x4b
    63f0:	7c a1       	lds	r23, 0x4c
    63f2:	8d a1       	lds	r24, 0x4d
    63f4:	9e a1       	lds	r25, 0x4e
    63f6:	20 e0       	ldi	r18, 0x00	; 0
    63f8:	30 e0       	ldi	r19, 0x00	; 0
    63fa:	40 e8       	ldi	r20, 0x80	; 128
    63fc:	5f e3       	ldi	r21, 0x3F	; 63
    63fe:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6402:	88 23       	and	r24, r24
    6404:	0c f0       	brlt	.+2      	; 0x6408 <pick_drop+0x316>
    6406:	10 e0       	ldi	r17, 0x00	; 0
    6408:	11 23       	and	r17, r17
    640a:	29 f0       	breq	.+10     	; 0x6416 <pick_drop+0x324>
		__ticks = 1;
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	98 a7       	lds	r25, 0x78
    6412:	8f a3       	lds	r24, 0x5f
    6414:	46 c0       	rjmp	.+140    	; 0x64a2 <pick_drop+0x3b0>
	else if (__tmp > 65535)
    6416:	11 e0       	ldi	r17, 0x01	; 1
    6418:	6b a1       	lds	r22, 0x4b
    641a:	7c a1       	lds	r23, 0x4c
    641c:	8d a1       	lds	r24, 0x4d
    641e:	9e a1       	lds	r25, 0x4e
    6420:	20 e0       	ldi	r18, 0x00	; 0
    6422:	3f ef       	ldi	r19, 0xFF	; 255
    6424:	4f e7       	ldi	r20, 0x7F	; 127
    6426:	57 e4       	ldi	r21, 0x47	; 71
    6428:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    642c:	18 16       	cp	r1, r24
    642e:	0c f0       	brlt	.+2      	; 0x6432 <pick_drop+0x340>
    6430:	10 e0       	ldi	r17, 0x00	; 0
    6432:	11 23       	and	r17, r17
    6434:	61 f1       	breq	.+88     	; 0x648e <pick_drop+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6436:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6438:	78 a1       	lds	r23, 0x48
    643a:	89 a1       	lds	r24, 0x49
    643c:	9a a1       	lds	r25, 0x4a
    643e:	20 e0       	ldi	r18, 0x00	; 0
    6440:	30 e0       	ldi	r19, 0x00	; 0
    6442:	40 e2       	ldi	r20, 0x20	; 32
    6444:	51 e4       	ldi	r21, 0x41	; 65
    6446:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    644a:	dc 01       	movw	r26, r24
    644c:	cb 01       	movw	r24, r22
    644e:	bc 01       	movw	r22, r24
    6450:	cd 01       	movw	r24, r26
    6452:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6456:	dc 01       	movw	r26, r24
    6458:	cb 01       	movw	r24, r22
    645a:	98 a7       	lds	r25, 0x78
    645c:	8f a3       	lds	r24, 0x5f
    645e:	12 c0       	rjmp	.+36     	; 0x6484 <pick_drop+0x392>
    6460:	80 e7       	ldi	r24, 0x70	; 112
    6462:	91 e0       	ldi	r25, 0x01	; 1
    6464:	9a a7       	lds	r25, 0x7a
    6466:	89 a7       	lds	r24, 0x79
    6468:	89 a5       	lds	r24, 0x69
    646a:	9a a5       	lds	r25, 0x6a
    646c:	8c 01       	movw	r16, r24
    646e:	c8 01       	movw	r24, r16
    6470:	01 97       	sbiw	r24, 0x01	; 1
    6472:	f1 f7       	brne	.-4      	; 0x6470 <pick_drop+0x37e>
    6474:	8c 01       	movw	r16, r24
    6476:	1a a7       	lds	r17, 0x7a
    6478:	09 a7       	lds	r16, 0x79
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    647a:	8f a1       	lds	r24, 0x4f
    647c:	98 a5       	lds	r25, 0x68
    647e:	01 97       	sbiw	r24, 0x01	; 1
    6480:	98 a7       	lds	r25, 0x78
    6482:	8f a3       	lds	r24, 0x5f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6484:	8f a1       	lds	r24, 0x4f
    6486:	98 a5       	lds	r25, 0x68
    6488:	00 97       	sbiw	r24, 0x00	; 0
    648a:	51 f7       	brne	.-44     	; 0x6460 <pick_drop+0x36e>
    648c:	17 c0       	rjmp	.+46     	; 0x64bc <pick_drop+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    648e:	6b a1       	lds	r22, 0x4b
    6490:	7c a1       	lds	r23, 0x4c
    6492:	8d a1       	lds	r24, 0x4d
    6494:	9e a1       	lds	r25, 0x4e
    6496:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    649a:	dc 01       	movw	r26, r24
    649c:	cb 01       	movw	r24, r22
    649e:	98 a7       	lds	r25, 0x78
    64a0:	8f a3       	lds	r24, 0x5f
    64a2:	8f a1       	lds	r24, 0x4f
    64a4:	98 a5       	lds	r25, 0x68
    64a6:	9c a7       	lds	r25, 0x7c
    64a8:	8b a7       	lds	r24, 0x7b
    64aa:	8b a5       	lds	r24, 0x6b
    64ac:	9c a5       	lds	r25, 0x6c
    64ae:	8c 01       	movw	r16, r24
    64b0:	f8 01       	movw	r30, r16
    64b2:	31 97       	sbiw	r30, 0x01	; 1
    64b4:	f1 f7       	brne	.-4      	; 0x64b2 <pick_drop+0x3c0>
    64b6:	8f 01       	movw	r16, r30
    64b8:	1c a7       	lds	r17, 0x7c
    64ba:	0b a7       	lds	r16, 0x7b
		_delay_ms(100);
		back_mm(70);
    64bc:	86 e4       	ldi	r24, 0x46	; 70
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    64c4:	4d c1       	rjmp	.+666    	; 0x6760 <pick_drop+0x66e>
		}
		else
		{
			forward_mm(50);
    64c6:	82 e3       	ldi	r24, 0x32	; 50
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    64ce:	80 e0       	ldi	r24, 0x00	; 0
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	a0 ea       	ldi	r26, 0xA0	; 160
    64d4:	b1 e4       	ldi	r27, 0x41	; 65
    64d6:	8d a7       	lds	r24, 0x7d
    64d8:	9e a7       	lds	r25, 0x7e
    64da:	af a7       	lds	r26, 0x7f
    64dc:	b8 ab       	sts	0x58, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    64de:	6d a5       	lds	r22, 0x6d
    64e0:	7e a5       	lds	r23, 0x6e
    64e2:	8f a5       	lds	r24, 0x6f
    64e4:	98 a9       	sts	0x48, r25
    64e6:	26 e6       	ldi	r18, 0x66	; 102
    64e8:	36 e6       	ldi	r19, 0x66	; 102
    64ea:	46 e6       	ldi	r20, 0x66	; 102
    64ec:	55 e4       	ldi	r21, 0x45	; 69
    64ee:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    64f2:	dc 01       	movw	r26, r24
    64f4:	cb 01       	movw	r24, r22
    64f6:	89 ab       	sts	0x59, r24
    64f8:	9a ab       	sts	0x5a, r25
    64fa:	ab ab       	sts	0x5b, r26
    64fc:	bc ab       	sts	0x5c, r27
	if (__tmp < 1.0)
    64fe:	11 e0       	ldi	r17, 0x01	; 1
    6500:	69 a9       	sts	0x49, r22
    6502:	7a a9       	sts	0x4a, r23
    6504:	8b a9       	sts	0x4b, r24
    6506:	9c a9       	sts	0x4c, r25
    6508:	20 e0       	ldi	r18, 0x00	; 0
    650a:	30 e0       	ldi	r19, 0x00	; 0
    650c:	40 e8       	ldi	r20, 0x80	; 128
    650e:	5f e3       	ldi	r21, 0x3F	; 63
    6510:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6514:	88 23       	and	r24, r24
    6516:	0c f0       	brlt	.+2      	; 0x651a <pick_drop+0x428>
    6518:	10 e0       	ldi	r17, 0x00	; 0
    651a:	11 23       	and	r17, r17
    651c:	29 f0       	breq	.+10     	; 0x6528 <pick_drop+0x436>
		__ticks = 1;
    651e:	81 e0       	ldi	r24, 0x01	; 1
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	9e ab       	sts	0x5e, r25
    6524:	8d ab       	sts	0x5d, r24
    6526:	46 c0       	rjmp	.+140    	; 0x65b4 <pick_drop+0x4c2>
	else if (__tmp > 65535)
    6528:	11 e0       	ldi	r17, 0x01	; 1
    652a:	69 a9       	sts	0x49, r22
    652c:	7a a9       	sts	0x4a, r23
    652e:	8b a9       	sts	0x4b, r24
    6530:	9c a9       	sts	0x4c, r25
    6532:	20 e0       	ldi	r18, 0x00	; 0
    6534:	3f ef       	ldi	r19, 0xFF	; 255
    6536:	4f e7       	ldi	r20, 0x7F	; 127
    6538:	57 e4       	ldi	r21, 0x47	; 71
    653a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    653e:	18 16       	cp	r1, r24
    6540:	0c f0       	brlt	.+2      	; 0x6544 <pick_drop+0x452>
    6542:	10 e0       	ldi	r17, 0x00	; 0
    6544:	11 23       	and	r17, r17
    6546:	61 f1       	breq	.+88     	; 0x65a0 <pick_drop+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6548:	6d a5       	lds	r22, 0x6d
    654a:	7e a5       	lds	r23, 0x6e
    654c:	8f a5       	lds	r24, 0x6f
    654e:	98 a9       	sts	0x48, r25
    6550:	20 e0       	ldi	r18, 0x00	; 0
    6552:	30 e0       	ldi	r19, 0x00	; 0
    6554:	40 e2       	ldi	r20, 0x20	; 32
    6556:	51 e4       	ldi	r21, 0x41	; 65
    6558:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    655c:	dc 01       	movw	r26, r24
    655e:	cb 01       	movw	r24, r22
    6560:	bc 01       	movw	r22, r24
    6562:	cd 01       	movw	r24, r26
    6564:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	9e ab       	sts	0x5e, r25
    656e:	8d ab       	sts	0x5d, r24
    6570:	12 c0       	rjmp	.+36     	; 0x6596 <pick_drop+0x4a4>
    6572:	80 e7       	ldi	r24, 0x70	; 112
    6574:	91 e0       	ldi	r25, 0x01	; 1
    6576:	98 af       	sts	0x78, r25
    6578:	8f ab       	sts	0x5f, r24
    657a:	8f a9       	sts	0x4f, r24
    657c:	98 ad       	sts	0x68, r25
    657e:	8c 01       	movw	r16, r24
    6580:	c8 01       	movw	r24, r16
    6582:	01 97       	sbiw	r24, 0x01	; 1
    6584:	f1 f7       	brne	.-4      	; 0x6582 <pick_drop+0x490>
    6586:	8c 01       	movw	r16, r24
    6588:	18 af       	sts	0x78, r17
    658a:	0f ab       	sts	0x5f, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    658c:	8d a9       	sts	0x4d, r24
    658e:	9e a9       	sts	0x4e, r25
    6590:	01 97       	sbiw	r24, 0x01	; 1
    6592:	9e ab       	sts	0x5e, r25
    6594:	8d ab       	sts	0x5d, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6596:	8d a9       	sts	0x4d, r24
    6598:	9e a9       	sts	0x4e, r25
    659a:	00 97       	sbiw	r24, 0x00	; 0
    659c:	51 f7       	brne	.-44     	; 0x6572 <pick_drop+0x480>
    659e:	17 c0       	rjmp	.+46     	; 0x65ce <pick_drop+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65a0:	69 a9       	sts	0x49, r22
    65a2:	7a a9       	sts	0x4a, r23
    65a4:	8b a9       	sts	0x4b, r24
    65a6:	9c a9       	sts	0x4c, r25
    65a8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    65ac:	dc 01       	movw	r26, r24
    65ae:	cb 01       	movw	r24, r22
    65b0:	9e ab       	sts	0x5e, r25
    65b2:	8d ab       	sts	0x5d, r24
    65b4:	8d a9       	sts	0x4d, r24
    65b6:	9e a9       	sts	0x4e, r25
    65b8:	9a af       	sts	0x7a, r25
    65ba:	89 af       	sts	0x79, r24
    65bc:	89 ad       	sts	0x69, r24
    65be:	9a ad       	sts	0x6a, r25
    65c0:	8c 01       	movw	r16, r24
    65c2:	f8 01       	movw	r30, r16
    65c4:	31 97       	sbiw	r30, 0x01	; 1
    65c6:	f1 f7       	brne	.-4      	; 0x65c4 <pick_drop+0x4d2>
    65c8:	8f 01       	movw	r16, r30
    65ca:	1a af       	sts	0x7a, r17
    65cc:	09 af       	sts	0x79, r16
			_delay_ms(20);
			drop();
    65ce:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <drop>
    65d2:	80 e0       	ldi	r24, 0x00	; 0
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	a8 ec       	ldi	r26, 0xC8	; 200
    65d8:	b2 e4       	ldi	r27, 0x42	; 66
    65da:	8b af       	sts	0x7b, r24
    65dc:	9c af       	sts	0x7c, r25
    65de:	ad af       	sts	0x7d, r26
    65e0:	be af       	sts	0x7e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    65e2:	8e 01       	movw	r16, r28
    65e4:	01 5c       	subi	r16, 0xC1	; 193
    65e6:	1f 4f       	sbci	r17, 0xFF	; 255
    65e8:	6b ad       	sts	0x6b, r22
    65ea:	7c ad       	sts	0x6c, r23
    65ec:	8d ad       	sts	0x6d, r24
    65ee:	9e ad       	sts	0x6e, r25
    65f0:	26 e6       	ldi	r18, 0x66	; 102
    65f2:	36 e6       	ldi	r19, 0x66	; 102
    65f4:	46 e6       	ldi	r20, 0x66	; 102
    65f6:	55 e4       	ldi	r21, 0x45	; 69
    65f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    65fc:	dc 01       	movw	r26, r24
    65fe:	cb 01       	movw	r24, r22
    6600:	f8 01       	movw	r30, r16
    6602:	80 83       	st	Z, r24
    6604:	91 83       	std	Z+1, r25	; 0x01
    6606:	a2 83       	std	Z+2, r26	; 0x02
    6608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    660a:	ce 01       	movw	r24, r28
    660c:	cf 96       	adiw	r24, 0x3f	; 63
    660e:	11 e0       	ldi	r17, 0x01	; 1
    6610:	fc 01       	movw	r30, r24
    6612:	60 81       	ld	r22, Z
    6614:	71 81       	ldd	r23, Z+1	; 0x01
    6616:	82 81       	ldd	r24, Z+2	; 0x02
    6618:	93 81       	ldd	r25, Z+3	; 0x03
    661a:	20 e0       	ldi	r18, 0x00	; 0
    661c:	30 e0       	ldi	r19, 0x00	; 0
    661e:	40 e8       	ldi	r20, 0x80	; 128
    6620:	5f e3       	ldi	r21, 0x3F	; 63
    6622:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6626:	88 23       	and	r24, r24
    6628:	0c f0       	brlt	.+2      	; 0x662c <pick_drop+0x53a>
    662a:	10 e0       	ldi	r17, 0x00	; 0
    662c:	11 23       	and	r17, r17
    662e:	49 f0       	breq	.+18     	; 0x6642 <pick_drop+0x550>
		__ticks = 1;
    6630:	ce 01       	movw	r24, r28
    6632:	8d 5b       	subi	r24, 0xBD	; 189
    6634:	9f 4f       	sbci	r25, 0xFF	; 255
    6636:	21 e0       	ldi	r18, 0x01	; 1
    6638:	30 e0       	ldi	r19, 0x00	; 0
    663a:	fc 01       	movw	r30, r24
    663c:	31 83       	std	Z+1, r19	; 0x01
    663e:	20 83       	st	Z, r18
    6640:	6e c0       	rjmp	.+220    	; 0x671e <pick_drop+0x62c>
	else if (__tmp > 65535)
    6642:	ce 01       	movw	r24, r28
    6644:	cf 96       	adiw	r24, 0x3f	; 63
    6646:	11 e0       	ldi	r17, 0x01	; 1
    6648:	fc 01       	movw	r30, r24
    664a:	60 81       	ld	r22, Z
    664c:	71 81       	ldd	r23, Z+1	; 0x01
    664e:	82 81       	ldd	r24, Z+2	; 0x02
    6650:	93 81       	ldd	r25, Z+3	; 0x03
    6652:	20 e0       	ldi	r18, 0x00	; 0
    6654:	3f ef       	ldi	r19, 0xFF	; 255
    6656:	4f e7       	ldi	r20, 0x7F	; 127
    6658:	57 e4       	ldi	r21, 0x47	; 71
    665a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    665e:	18 16       	cp	r1, r24
    6660:	0c f0       	brlt	.+2      	; 0x6664 <pick_drop+0x572>
    6662:	10 e0       	ldi	r17, 0x00	; 0
    6664:	11 23       	and	r17, r17
    6666:	09 f4       	brne	.+2      	; 0x666a <pick_drop+0x578>
    6668:	49 c0       	rjmp	.+146    	; 0x66fc <pick_drop+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    666a:	6b ad       	sts	0x6b, r22
    666c:	7c ad       	sts	0x6c, r23
    666e:	8d ad       	sts	0x6d, r24
    6670:	9e ad       	sts	0x6e, r25
    6672:	20 e0       	ldi	r18, 0x00	; 0
    6674:	30 e0       	ldi	r19, 0x00	; 0
    6676:	40 e2       	ldi	r20, 0x20	; 32
    6678:	51 e4       	ldi	r21, 0x41	; 65
    667a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    667e:	dc 01       	movw	r26, r24
    6680:	cb 01       	movw	r24, r22
    6682:	8e 01       	movw	r16, r28
    6684:	0d 5b       	subi	r16, 0xBD	; 189
    6686:	1f 4f       	sbci	r17, 0xFF	; 255
    6688:	bc 01       	movw	r22, r24
    668a:	cd 01       	movw	r24, r26
    668c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6690:	dc 01       	movw	r26, r24
    6692:	cb 01       	movw	r24, r22
    6694:	f8 01       	movw	r30, r16
    6696:	91 83       	std	Z+1, r25	; 0x01
    6698:	80 83       	st	Z, r24
    669a:	27 c0       	rjmp	.+78     	; 0x66ea <pick_drop+0x5f8>
    669c:	ce 01       	movw	r24, r28
    669e:	8b 5b       	subi	r24, 0xBB	; 187
    66a0:	9f 4f       	sbci	r25, 0xFF	; 255
    66a2:	20 e7       	ldi	r18, 0x70	; 112
    66a4:	31 e0       	ldi	r19, 0x01	; 1
    66a6:	fc 01       	movw	r30, r24
    66a8:	31 83       	std	Z+1, r19	; 0x01
    66aa:	20 83       	st	Z, r18
    66ac:	ce 01       	movw	r24, r28
    66ae:	8b 5b       	subi	r24, 0xBB	; 187
    66b0:	9f 4f       	sbci	r25, 0xFF	; 255
    66b2:	fc 01       	movw	r30, r24
    66b4:	80 81       	ld	r24, Z
    66b6:	91 81       	ldd	r25, Z+1	; 0x01
    66b8:	8c 01       	movw	r16, r24
    66ba:	c8 01       	movw	r24, r16
    66bc:	01 97       	sbiw	r24, 0x01	; 1
    66be:	f1 f7       	brne	.-4      	; 0x66bc <pick_drop+0x5ca>
    66c0:	8c 01       	movw	r16, r24
    66c2:	ce 01       	movw	r24, r28
    66c4:	8b 5b       	subi	r24, 0xBB	; 187
    66c6:	9f 4f       	sbci	r25, 0xFF	; 255
    66c8:	fc 01       	movw	r30, r24
    66ca:	11 83       	std	Z+1, r17	; 0x01
    66cc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ce:	ce 01       	movw	r24, r28
    66d0:	8d 5b       	subi	r24, 0xBD	; 189
    66d2:	9f 4f       	sbci	r25, 0xFF	; 255
    66d4:	9e 01       	movw	r18, r28
    66d6:	2d 5b       	subi	r18, 0xBD	; 189
    66d8:	3f 4f       	sbci	r19, 0xFF	; 255
    66da:	f9 01       	movw	r30, r18
    66dc:	20 81       	ld	r18, Z
    66de:	31 81       	ldd	r19, Z+1	; 0x01
    66e0:	21 50       	subi	r18, 0x01	; 1
    66e2:	30 40       	sbci	r19, 0x00	; 0
    66e4:	fc 01       	movw	r30, r24
    66e6:	31 83       	std	Z+1, r19	; 0x01
    66e8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66ea:	ce 01       	movw	r24, r28
    66ec:	8d 5b       	subi	r24, 0xBD	; 189
    66ee:	9f 4f       	sbci	r25, 0xFF	; 255
    66f0:	fc 01       	movw	r30, r24
    66f2:	80 81       	ld	r24, Z
    66f4:	91 81       	ldd	r25, Z+1	; 0x01
    66f6:	00 97       	sbiw	r24, 0x00	; 0
    66f8:	89 f6       	brne	.-94     	; 0x669c <pick_drop+0x5aa>
    66fa:	2e c0       	rjmp	.+92     	; 0x6758 <pick_drop+0x666>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66fc:	8e 01       	movw	r16, r28
    66fe:	0d 5b       	subi	r16, 0xBD	; 189
    6700:	1f 4f       	sbci	r17, 0xFF	; 255
    6702:	ce 01       	movw	r24, r28
    6704:	cf 96       	adiw	r24, 0x3f	; 63
    6706:	fc 01       	movw	r30, r24
    6708:	60 81       	ld	r22, Z
    670a:	71 81       	ldd	r23, Z+1	; 0x01
    670c:	82 81       	ldd	r24, Z+2	; 0x02
    670e:	93 81       	ldd	r25, Z+3	; 0x03
    6710:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6714:	dc 01       	movw	r26, r24
    6716:	cb 01       	movw	r24, r22
    6718:	f8 01       	movw	r30, r16
    671a:	91 83       	std	Z+1, r25	; 0x01
    671c:	80 83       	st	Z, r24
    671e:	ce 01       	movw	r24, r28
    6720:	89 5b       	subi	r24, 0xB9	; 185
    6722:	9f 4f       	sbci	r25, 0xFF	; 255
    6724:	9e 01       	movw	r18, r28
    6726:	2d 5b       	subi	r18, 0xBD	; 189
    6728:	3f 4f       	sbci	r19, 0xFF	; 255
    672a:	f9 01       	movw	r30, r18
    672c:	20 81       	ld	r18, Z
    672e:	31 81       	ldd	r19, Z+1	; 0x01
    6730:	fc 01       	movw	r30, r24
    6732:	31 83       	std	Z+1, r19	; 0x01
    6734:	20 83       	st	Z, r18
    6736:	ce 01       	movw	r24, r28
    6738:	89 5b       	subi	r24, 0xB9	; 185
    673a:	9f 4f       	sbci	r25, 0xFF	; 255
    673c:	fc 01       	movw	r30, r24
    673e:	80 81       	ld	r24, Z
    6740:	91 81       	ldd	r25, Z+1	; 0x01
    6742:	8c 01       	movw	r16, r24
    6744:	c8 01       	movw	r24, r16
    6746:	01 97       	sbiw	r24, 0x01	; 1
    6748:	f1 f7       	brne	.-4      	; 0x6746 <pick_drop+0x654>
    674a:	8c 01       	movw	r16, r24
    674c:	ce 01       	movw	r24, r28
    674e:	89 5b       	subi	r24, 0xB9	; 185
    6750:	9f 4f       	sbci	r25, 0xFF	; 255
    6752:	fc 01       	movw	r30, r24
    6754:	11 83       	std	Z+1, r17	; 0x01
    6756:	00 83       	st	Z, r16
			_delay_ms(100);
			back_mm(50);
    6758:	82 e3       	ldi	r24, 0x32	; 50
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
		}		
	}
		if(pd == '1' )// Picking left animals based on the previous orientation of the bot
    6760:	ce 01       	movw	r24, r28
    6762:	8f 5f       	subi	r24, 0xFF	; 255
    6764:	9b 4f       	sbci	r25, 0xFB	; 251
    6766:	fc 01       	movw	r30, r24
    6768:	80 81       	ld	r24, Z
    676a:	81 33       	cpi	r24, 0x31	; 49
    676c:	11 f0       	breq	.+4      	; 0x6772 <pick_drop+0x680>
    676e:	0c 94 b9 3e 	jmp	0x7d72	; 0x7d72 <pick_drop+0x1c80>
		{
			if(master_path[node-1]=='U'){
    6772:	80 91 4f 03 	lds	r24, 0x034F
    6776:	90 91 50 03 	lds	r25, 0x0350
    677a:	01 97       	sbiw	r24, 0x01	; 1
    677c:	8d 5a       	subi	r24, 0xAD	; 173
    677e:	9c 4f       	sbci	r25, 0xFC	; 252
    6780:	fc 01       	movw	r30, r24
    6782:	80 81       	ld	r24, Z
    6784:	85 35       	cpi	r24, 0x55	; 85
    6786:	09 f0       	breq	.+2      	; 0x678a <pick_drop+0x698>
    6788:	2d c4       	rjmp	.+2138   	; 0x6fe4 <pick_drop+0xef2>
			forward_mm(40);
    678a:	88 e2       	ldi	r24, 0x28	; 40
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    6792:	9e 01       	movw	r18, r28
    6794:	27 5b       	subi	r18, 0xB7	; 183
    6796:	3f 4f       	sbci	r19, 0xFF	; 255
    6798:	80 e0       	ldi	r24, 0x00	; 0
    679a:	90 e0       	ldi	r25, 0x00	; 0
    679c:	a0 ea       	ldi	r26, 0xA0	; 160
    679e:	b1 e4       	ldi	r27, 0x41	; 65
    67a0:	f9 01       	movw	r30, r18
    67a2:	80 83       	st	Z, r24
    67a4:	91 83       	std	Z+1, r25	; 0x01
    67a6:	a2 83       	std	Z+2, r26	; 0x02
    67a8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    67aa:	8e 01       	movw	r16, r28
    67ac:	03 5b       	subi	r16, 0xB3	; 179
    67ae:	1f 4f       	sbci	r17, 0xFF	; 255
    67b0:	ce 01       	movw	r24, r28
    67b2:	87 5b       	subi	r24, 0xB7	; 183
    67b4:	9f 4f       	sbci	r25, 0xFF	; 255
    67b6:	fc 01       	movw	r30, r24
    67b8:	60 81       	ld	r22, Z
    67ba:	71 81       	ldd	r23, Z+1	; 0x01
    67bc:	82 81       	ldd	r24, Z+2	; 0x02
    67be:	93 81       	ldd	r25, Z+3	; 0x03
    67c0:	26 e6       	ldi	r18, 0x66	; 102
    67c2:	36 e6       	ldi	r19, 0x66	; 102
    67c4:	46 e6       	ldi	r20, 0x66	; 102
    67c6:	55 e4       	ldi	r21, 0x45	; 69
    67c8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    67cc:	dc 01       	movw	r26, r24
    67ce:	cb 01       	movw	r24, r22
    67d0:	f8 01       	movw	r30, r16
    67d2:	80 83       	st	Z, r24
    67d4:	91 83       	std	Z+1, r25	; 0x01
    67d6:	a2 83       	std	Z+2, r26	; 0x02
    67d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67da:	ce 01       	movw	r24, r28
    67dc:	83 5b       	subi	r24, 0xB3	; 179
    67de:	9f 4f       	sbci	r25, 0xFF	; 255
    67e0:	11 e0       	ldi	r17, 0x01	; 1
    67e2:	fc 01       	movw	r30, r24
    67e4:	60 81       	ld	r22, Z
    67e6:	71 81       	ldd	r23, Z+1	; 0x01
    67e8:	82 81       	ldd	r24, Z+2	; 0x02
    67ea:	93 81       	ldd	r25, Z+3	; 0x03
    67ec:	20 e0       	ldi	r18, 0x00	; 0
    67ee:	30 e0       	ldi	r19, 0x00	; 0
    67f0:	40 e8       	ldi	r20, 0x80	; 128
    67f2:	5f e3       	ldi	r21, 0x3F	; 63
    67f4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    67f8:	88 23       	and	r24, r24
    67fa:	0c f0       	brlt	.+2      	; 0x67fe <pick_drop+0x70c>
    67fc:	10 e0       	ldi	r17, 0x00	; 0
    67fe:	11 23       	and	r17, r17
    6800:	49 f0       	breq	.+18     	; 0x6814 <pick_drop+0x722>
		__ticks = 1;
    6802:	ce 01       	movw	r24, r28
    6804:	8f 5a       	subi	r24, 0xAF	; 175
    6806:	9f 4f       	sbci	r25, 0xFF	; 255
    6808:	21 e0       	ldi	r18, 0x01	; 1
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	fc 01       	movw	r30, r24
    680e:	31 83       	std	Z+1, r19	; 0x01
    6810:	20 83       	st	Z, r18
    6812:	74 c0       	rjmp	.+232    	; 0x68fc <pick_drop+0x80a>
	else if (__tmp > 65535)
    6814:	ce 01       	movw	r24, r28
    6816:	83 5b       	subi	r24, 0xB3	; 179
    6818:	9f 4f       	sbci	r25, 0xFF	; 255
    681a:	11 e0       	ldi	r17, 0x01	; 1
    681c:	fc 01       	movw	r30, r24
    681e:	60 81       	ld	r22, Z
    6820:	71 81       	ldd	r23, Z+1	; 0x01
    6822:	82 81       	ldd	r24, Z+2	; 0x02
    6824:	93 81       	ldd	r25, Z+3	; 0x03
    6826:	20 e0       	ldi	r18, 0x00	; 0
    6828:	3f ef       	ldi	r19, 0xFF	; 255
    682a:	4f e7       	ldi	r20, 0x7F	; 127
    682c:	57 e4       	ldi	r21, 0x47	; 71
    682e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6832:	18 16       	cp	r1, r24
    6834:	0c f0       	brlt	.+2      	; 0x6838 <pick_drop+0x746>
    6836:	10 e0       	ldi	r17, 0x00	; 0
    6838:	11 23       	and	r17, r17
    683a:	09 f4       	brne	.+2      	; 0x683e <pick_drop+0x74c>
    683c:	4d c0       	rjmp	.+154    	; 0x68d8 <pick_drop+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    683e:	ce 01       	movw	r24, r28
    6840:	87 5b       	subi	r24, 0xB7	; 183
    6842:	9f 4f       	sbci	r25, 0xFF	; 255
    6844:	fc 01       	movw	r30, r24
    6846:	60 81       	ld	r22, Z
    6848:	71 81       	ldd	r23, Z+1	; 0x01
    684a:	82 81       	ldd	r24, Z+2	; 0x02
    684c:	93 81       	ldd	r25, Z+3	; 0x03
    684e:	20 e0       	ldi	r18, 0x00	; 0
    6850:	30 e0       	ldi	r19, 0x00	; 0
    6852:	40 e2       	ldi	r20, 0x20	; 32
    6854:	51 e4       	ldi	r21, 0x41	; 65
    6856:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    685a:	dc 01       	movw	r26, r24
    685c:	cb 01       	movw	r24, r22
    685e:	8e 01       	movw	r16, r28
    6860:	0f 5a       	subi	r16, 0xAF	; 175
    6862:	1f 4f       	sbci	r17, 0xFF	; 255
    6864:	bc 01       	movw	r22, r24
    6866:	cd 01       	movw	r24, r26
    6868:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    686c:	dc 01       	movw	r26, r24
    686e:	cb 01       	movw	r24, r22
    6870:	f8 01       	movw	r30, r16
    6872:	91 83       	std	Z+1, r25	; 0x01
    6874:	80 83       	st	Z, r24
    6876:	27 c0       	rjmp	.+78     	; 0x68c6 <pick_drop+0x7d4>
    6878:	ce 01       	movw	r24, r28
    687a:	8d 5a       	subi	r24, 0xAD	; 173
    687c:	9f 4f       	sbci	r25, 0xFF	; 255
    687e:	20 e7       	ldi	r18, 0x70	; 112
    6880:	31 e0       	ldi	r19, 0x01	; 1
    6882:	fc 01       	movw	r30, r24
    6884:	31 83       	std	Z+1, r19	; 0x01
    6886:	20 83       	st	Z, r18
    6888:	ce 01       	movw	r24, r28
    688a:	8d 5a       	subi	r24, 0xAD	; 173
    688c:	9f 4f       	sbci	r25, 0xFF	; 255
    688e:	fc 01       	movw	r30, r24
    6890:	80 81       	ld	r24, Z
    6892:	91 81       	ldd	r25, Z+1	; 0x01
    6894:	8c 01       	movw	r16, r24
    6896:	c8 01       	movw	r24, r16
    6898:	01 97       	sbiw	r24, 0x01	; 1
    689a:	f1 f7       	brne	.-4      	; 0x6898 <pick_drop+0x7a6>
    689c:	8c 01       	movw	r16, r24
    689e:	ce 01       	movw	r24, r28
    68a0:	8d 5a       	subi	r24, 0xAD	; 173
    68a2:	9f 4f       	sbci	r25, 0xFF	; 255
    68a4:	fc 01       	movw	r30, r24
    68a6:	11 83       	std	Z+1, r17	; 0x01
    68a8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68aa:	ce 01       	movw	r24, r28
    68ac:	8f 5a       	subi	r24, 0xAF	; 175
    68ae:	9f 4f       	sbci	r25, 0xFF	; 255
    68b0:	9e 01       	movw	r18, r28
    68b2:	2f 5a       	subi	r18, 0xAF	; 175
    68b4:	3f 4f       	sbci	r19, 0xFF	; 255
    68b6:	f9 01       	movw	r30, r18
    68b8:	20 81       	ld	r18, Z
    68ba:	31 81       	ldd	r19, Z+1	; 0x01
    68bc:	21 50       	subi	r18, 0x01	; 1
    68be:	30 40       	sbci	r19, 0x00	; 0
    68c0:	fc 01       	movw	r30, r24
    68c2:	31 83       	std	Z+1, r19	; 0x01
    68c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68c6:	ce 01       	movw	r24, r28
    68c8:	8f 5a       	subi	r24, 0xAF	; 175
    68ca:	9f 4f       	sbci	r25, 0xFF	; 255
    68cc:	fc 01       	movw	r30, r24
    68ce:	80 81       	ld	r24, Z
    68d0:	91 81       	ldd	r25, Z+1	; 0x01
    68d2:	00 97       	sbiw	r24, 0x00	; 0
    68d4:	89 f6       	brne	.-94     	; 0x6878 <pick_drop+0x786>
    68d6:	2f c0       	rjmp	.+94     	; 0x6936 <pick_drop+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68d8:	8e 01       	movw	r16, r28
    68da:	0f 5a       	subi	r16, 0xAF	; 175
    68dc:	1f 4f       	sbci	r17, 0xFF	; 255
    68de:	ce 01       	movw	r24, r28
    68e0:	83 5b       	subi	r24, 0xB3	; 179
    68e2:	9f 4f       	sbci	r25, 0xFF	; 255
    68e4:	fc 01       	movw	r30, r24
    68e6:	60 81       	ld	r22, Z
    68e8:	71 81       	ldd	r23, Z+1	; 0x01
    68ea:	82 81       	ldd	r24, Z+2	; 0x02
    68ec:	93 81       	ldd	r25, Z+3	; 0x03
    68ee:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    68f2:	dc 01       	movw	r26, r24
    68f4:	cb 01       	movw	r24, r22
    68f6:	f8 01       	movw	r30, r16
    68f8:	91 83       	std	Z+1, r25	; 0x01
    68fa:	80 83       	st	Z, r24
    68fc:	ce 01       	movw	r24, r28
    68fe:	8b 5a       	subi	r24, 0xAB	; 171
    6900:	9f 4f       	sbci	r25, 0xFF	; 255
    6902:	9e 01       	movw	r18, r28
    6904:	2f 5a       	subi	r18, 0xAF	; 175
    6906:	3f 4f       	sbci	r19, 0xFF	; 255
    6908:	f9 01       	movw	r30, r18
    690a:	20 81       	ld	r18, Z
    690c:	31 81       	ldd	r19, Z+1	; 0x01
    690e:	fc 01       	movw	r30, r24
    6910:	31 83       	std	Z+1, r19	; 0x01
    6912:	20 83       	st	Z, r18
    6914:	ce 01       	movw	r24, r28
    6916:	8b 5a       	subi	r24, 0xAB	; 171
    6918:	9f 4f       	sbci	r25, 0xFF	; 255
    691a:	fc 01       	movw	r30, r24
    691c:	80 81       	ld	r24, Z
    691e:	91 81       	ldd	r25, Z+1	; 0x01
    6920:	8c 01       	movw	r16, r24
    6922:	c8 01       	movw	r24, r16
    6924:	01 97       	sbiw	r24, 0x01	; 1
    6926:	f1 f7       	brne	.-4      	; 0x6924 <pick_drop+0x832>
    6928:	8c 01       	movw	r16, r24
    692a:	ce 01       	movw	r24, r28
    692c:	8b 5a       	subi	r24, 0xAB	; 171
    692e:	9f 4f       	sbci	r25, 0xFF	; 255
    6930:	fc 01       	movw	r30, r24
    6932:	11 83       	std	Z+1, r17	; 0x01
    6934:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left2();
    6936:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    693a:	9e 01       	movw	r18, r28
    693c:	29 5a       	subi	r18, 0xA9	; 169
    693e:	3f 4f       	sbci	r19, 0xFF	; 255
    6940:	80 e0       	ldi	r24, 0x00	; 0
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	a8 e4       	ldi	r26, 0x48	; 72
    6946:	b2 e4       	ldi	r27, 0x42	; 66
    6948:	f9 01       	movw	r30, r18
    694a:	80 83       	st	Z, r24
    694c:	91 83       	std	Z+1, r25	; 0x01
    694e:	a2 83       	std	Z+2, r26	; 0x02
    6950:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6952:	8e 01       	movw	r16, r28
    6954:	05 5a       	subi	r16, 0xA5	; 165
    6956:	1f 4f       	sbci	r17, 0xFF	; 255
    6958:	ce 01       	movw	r24, r28
    695a:	89 5a       	subi	r24, 0xA9	; 169
    695c:	9f 4f       	sbci	r25, 0xFF	; 255
    695e:	fc 01       	movw	r30, r24
    6960:	60 81       	ld	r22, Z
    6962:	71 81       	ldd	r23, Z+1	; 0x01
    6964:	82 81       	ldd	r24, Z+2	; 0x02
    6966:	93 81       	ldd	r25, Z+3	; 0x03
    6968:	26 e6       	ldi	r18, 0x66	; 102
    696a:	36 e6       	ldi	r19, 0x66	; 102
    696c:	46 e6       	ldi	r20, 0x66	; 102
    696e:	55 e4       	ldi	r21, 0x45	; 69
    6970:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6974:	dc 01       	movw	r26, r24
    6976:	cb 01       	movw	r24, r22
    6978:	f8 01       	movw	r30, r16
    697a:	80 83       	st	Z, r24
    697c:	91 83       	std	Z+1, r25	; 0x01
    697e:	a2 83       	std	Z+2, r26	; 0x02
    6980:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6982:	ce 01       	movw	r24, r28
    6984:	85 5a       	subi	r24, 0xA5	; 165
    6986:	9f 4f       	sbci	r25, 0xFF	; 255
    6988:	11 e0       	ldi	r17, 0x01	; 1
    698a:	fc 01       	movw	r30, r24
    698c:	60 81       	ld	r22, Z
    698e:	71 81       	ldd	r23, Z+1	; 0x01
    6990:	82 81       	ldd	r24, Z+2	; 0x02
    6992:	93 81       	ldd	r25, Z+3	; 0x03
    6994:	20 e0       	ldi	r18, 0x00	; 0
    6996:	30 e0       	ldi	r19, 0x00	; 0
    6998:	40 e8       	ldi	r20, 0x80	; 128
    699a:	5f e3       	ldi	r21, 0x3F	; 63
    699c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    69a0:	88 23       	and	r24, r24
    69a2:	0c f0       	brlt	.+2      	; 0x69a6 <pick_drop+0x8b4>
    69a4:	10 e0       	ldi	r17, 0x00	; 0
    69a6:	11 23       	and	r17, r17
    69a8:	49 f0       	breq	.+18     	; 0x69bc <pick_drop+0x8ca>
		__ticks = 1;
    69aa:	ce 01       	movw	r24, r28
    69ac:	81 5a       	subi	r24, 0xA1	; 161
    69ae:	9f 4f       	sbci	r25, 0xFF	; 255
    69b0:	21 e0       	ldi	r18, 0x01	; 1
    69b2:	30 e0       	ldi	r19, 0x00	; 0
    69b4:	fc 01       	movw	r30, r24
    69b6:	31 83       	std	Z+1, r19	; 0x01
    69b8:	20 83       	st	Z, r18
    69ba:	74 c0       	rjmp	.+232    	; 0x6aa4 <pick_drop+0x9b2>
	else if (__tmp > 65535)
    69bc:	ce 01       	movw	r24, r28
    69be:	85 5a       	subi	r24, 0xA5	; 165
    69c0:	9f 4f       	sbci	r25, 0xFF	; 255
    69c2:	11 e0       	ldi	r17, 0x01	; 1
    69c4:	fc 01       	movw	r30, r24
    69c6:	60 81       	ld	r22, Z
    69c8:	71 81       	ldd	r23, Z+1	; 0x01
    69ca:	82 81       	ldd	r24, Z+2	; 0x02
    69cc:	93 81       	ldd	r25, Z+3	; 0x03
    69ce:	20 e0       	ldi	r18, 0x00	; 0
    69d0:	3f ef       	ldi	r19, 0xFF	; 255
    69d2:	4f e7       	ldi	r20, 0x7F	; 127
    69d4:	57 e4       	ldi	r21, 0x47	; 71
    69d6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    69da:	18 16       	cp	r1, r24
    69dc:	0c f0       	brlt	.+2      	; 0x69e0 <pick_drop+0x8ee>
    69de:	10 e0       	ldi	r17, 0x00	; 0
    69e0:	11 23       	and	r17, r17
    69e2:	09 f4       	brne	.+2      	; 0x69e6 <pick_drop+0x8f4>
    69e4:	4d c0       	rjmp	.+154    	; 0x6a80 <pick_drop+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69e6:	ce 01       	movw	r24, r28
    69e8:	89 5a       	subi	r24, 0xA9	; 169
    69ea:	9f 4f       	sbci	r25, 0xFF	; 255
    69ec:	fc 01       	movw	r30, r24
    69ee:	60 81       	ld	r22, Z
    69f0:	71 81       	ldd	r23, Z+1	; 0x01
    69f2:	82 81       	ldd	r24, Z+2	; 0x02
    69f4:	93 81       	ldd	r25, Z+3	; 0x03
    69f6:	20 e0       	ldi	r18, 0x00	; 0
    69f8:	30 e0       	ldi	r19, 0x00	; 0
    69fa:	40 e2       	ldi	r20, 0x20	; 32
    69fc:	51 e4       	ldi	r21, 0x41	; 65
    69fe:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6a02:	dc 01       	movw	r26, r24
    6a04:	cb 01       	movw	r24, r22
    6a06:	8e 01       	movw	r16, r28
    6a08:	01 5a       	subi	r16, 0xA1	; 161
    6a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    6a0c:	bc 01       	movw	r22, r24
    6a0e:	cd 01       	movw	r24, r26
    6a10:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6a14:	dc 01       	movw	r26, r24
    6a16:	cb 01       	movw	r24, r22
    6a18:	f8 01       	movw	r30, r16
    6a1a:	91 83       	std	Z+1, r25	; 0x01
    6a1c:	80 83       	st	Z, r24
    6a1e:	27 c0       	rjmp	.+78     	; 0x6a6e <pick_drop+0x97c>
    6a20:	ce 01       	movw	r24, r28
    6a22:	8f 59       	subi	r24, 0x9F	; 159
    6a24:	9f 4f       	sbci	r25, 0xFF	; 255
    6a26:	20 e7       	ldi	r18, 0x70	; 112
    6a28:	31 e0       	ldi	r19, 0x01	; 1
    6a2a:	fc 01       	movw	r30, r24
    6a2c:	31 83       	std	Z+1, r19	; 0x01
    6a2e:	20 83       	st	Z, r18
    6a30:	ce 01       	movw	r24, r28
    6a32:	8f 59       	subi	r24, 0x9F	; 159
    6a34:	9f 4f       	sbci	r25, 0xFF	; 255
    6a36:	fc 01       	movw	r30, r24
    6a38:	80 81       	ld	r24, Z
    6a3a:	91 81       	ldd	r25, Z+1	; 0x01
    6a3c:	8c 01       	movw	r16, r24
    6a3e:	c8 01       	movw	r24, r16
    6a40:	01 97       	sbiw	r24, 0x01	; 1
    6a42:	f1 f7       	brne	.-4      	; 0x6a40 <pick_drop+0x94e>
    6a44:	8c 01       	movw	r16, r24
    6a46:	ce 01       	movw	r24, r28
    6a48:	8f 59       	subi	r24, 0x9F	; 159
    6a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a4c:	fc 01       	movw	r30, r24
    6a4e:	11 83       	std	Z+1, r17	; 0x01
    6a50:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a52:	ce 01       	movw	r24, r28
    6a54:	81 5a       	subi	r24, 0xA1	; 161
    6a56:	9f 4f       	sbci	r25, 0xFF	; 255
    6a58:	9e 01       	movw	r18, r28
    6a5a:	21 5a       	subi	r18, 0xA1	; 161
    6a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a5e:	f9 01       	movw	r30, r18
    6a60:	20 81       	ld	r18, Z
    6a62:	31 81       	ldd	r19, Z+1	; 0x01
    6a64:	21 50       	subi	r18, 0x01	; 1
    6a66:	30 40       	sbci	r19, 0x00	; 0
    6a68:	fc 01       	movw	r30, r24
    6a6a:	31 83       	std	Z+1, r19	; 0x01
    6a6c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a6e:	ce 01       	movw	r24, r28
    6a70:	81 5a       	subi	r24, 0xA1	; 161
    6a72:	9f 4f       	sbci	r25, 0xFF	; 255
    6a74:	fc 01       	movw	r30, r24
    6a76:	80 81       	ld	r24, Z
    6a78:	91 81       	ldd	r25, Z+1	; 0x01
    6a7a:	00 97       	sbiw	r24, 0x00	; 0
    6a7c:	89 f6       	brne	.-94     	; 0x6a20 <pick_drop+0x92e>
    6a7e:	2f c0       	rjmp	.+94     	; 0x6ade <pick_drop+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a80:	8e 01       	movw	r16, r28
    6a82:	01 5a       	subi	r16, 0xA1	; 161
    6a84:	1f 4f       	sbci	r17, 0xFF	; 255
    6a86:	ce 01       	movw	r24, r28
    6a88:	85 5a       	subi	r24, 0xA5	; 165
    6a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a8c:	fc 01       	movw	r30, r24
    6a8e:	60 81       	ld	r22, Z
    6a90:	71 81       	ldd	r23, Z+1	; 0x01
    6a92:	82 81       	ldd	r24, Z+2	; 0x02
    6a94:	93 81       	ldd	r25, Z+3	; 0x03
    6a96:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6a9a:	dc 01       	movw	r26, r24
    6a9c:	cb 01       	movw	r24, r22
    6a9e:	f8 01       	movw	r30, r16
    6aa0:	91 83       	std	Z+1, r25	; 0x01
    6aa2:	80 83       	st	Z, r24
    6aa4:	ce 01       	movw	r24, r28
    6aa6:	8d 59       	subi	r24, 0x9D	; 157
    6aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    6aaa:	9e 01       	movw	r18, r28
    6aac:	21 5a       	subi	r18, 0xA1	; 161
    6aae:	3f 4f       	sbci	r19, 0xFF	; 255
    6ab0:	f9 01       	movw	r30, r18
    6ab2:	20 81       	ld	r18, Z
    6ab4:	31 81       	ldd	r19, Z+1	; 0x01
    6ab6:	fc 01       	movw	r30, r24
    6ab8:	31 83       	std	Z+1, r19	; 0x01
    6aba:	20 83       	st	Z, r18
    6abc:	ce 01       	movw	r24, r28
    6abe:	8d 59       	subi	r24, 0x9D	; 157
    6ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac2:	fc 01       	movw	r30, r24
    6ac4:	80 81       	ld	r24, Z
    6ac6:	91 81       	ldd	r25, Z+1	; 0x01
    6ac8:	8c 01       	movw	r16, r24
    6aca:	c8 01       	movw	r24, r16
    6acc:	01 97       	sbiw	r24, 0x01	; 1
    6ace:	f1 f7       	brne	.-4      	; 0x6acc <pick_drop+0x9da>
    6ad0:	8c 01       	movw	r16, r24
    6ad2:	ce 01       	movw	r24, r28
    6ad4:	8d 59       	subi	r24, 0x9D	; 157
    6ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad8:	fc 01       	movw	r30, r24
    6ada:	11 83       	std	Z+1, r17	; 0x01
    6adc:	00 83       	st	Z, r16
			_delay_ms(50);
			forward_mm(10);
    6ade:	8a e0       	ldi	r24, 0x0A	; 10
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    6ae6:	9e 01       	movw	r18, r28
    6ae8:	2b 59       	subi	r18, 0x9B	; 155
    6aea:	3f 4f       	sbci	r19, 0xFF	; 255
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	90 e0       	ldi	r25, 0x00	; 0
    6af0:	a0 e2       	ldi	r26, 0x20	; 32
    6af2:	b1 e4       	ldi	r27, 0x41	; 65
    6af4:	f9 01       	movw	r30, r18
    6af6:	80 83       	st	Z, r24
    6af8:	91 83       	std	Z+1, r25	; 0x01
    6afa:	a2 83       	std	Z+2, r26	; 0x02
    6afc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6afe:	8e 01       	movw	r16, r28
    6b00:	07 59       	subi	r16, 0x97	; 151
    6b02:	1f 4f       	sbci	r17, 0xFF	; 255
    6b04:	ce 01       	movw	r24, r28
    6b06:	8b 59       	subi	r24, 0x9B	; 155
    6b08:	9f 4f       	sbci	r25, 0xFF	; 255
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	60 81       	ld	r22, Z
    6b0e:	71 81       	ldd	r23, Z+1	; 0x01
    6b10:	82 81       	ldd	r24, Z+2	; 0x02
    6b12:	93 81       	ldd	r25, Z+3	; 0x03
    6b14:	26 e6       	ldi	r18, 0x66	; 102
    6b16:	36 e6       	ldi	r19, 0x66	; 102
    6b18:	46 e6       	ldi	r20, 0x66	; 102
    6b1a:	55 e4       	ldi	r21, 0x45	; 69
    6b1c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6b20:	dc 01       	movw	r26, r24
    6b22:	cb 01       	movw	r24, r22
    6b24:	f8 01       	movw	r30, r16
    6b26:	80 83       	st	Z, r24
    6b28:	91 83       	std	Z+1, r25	; 0x01
    6b2a:	a2 83       	std	Z+2, r26	; 0x02
    6b2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6b2e:	ce 01       	movw	r24, r28
    6b30:	87 59       	subi	r24, 0x97	; 151
    6b32:	9f 4f       	sbci	r25, 0xFF	; 255
    6b34:	11 e0       	ldi	r17, 0x01	; 1
    6b36:	fc 01       	movw	r30, r24
    6b38:	60 81       	ld	r22, Z
    6b3a:	71 81       	ldd	r23, Z+1	; 0x01
    6b3c:	82 81       	ldd	r24, Z+2	; 0x02
    6b3e:	93 81       	ldd	r25, Z+3	; 0x03
    6b40:	20 e0       	ldi	r18, 0x00	; 0
    6b42:	30 e0       	ldi	r19, 0x00	; 0
    6b44:	40 e8       	ldi	r20, 0x80	; 128
    6b46:	5f e3       	ldi	r21, 0x3F	; 63
    6b48:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6b4c:	88 23       	and	r24, r24
    6b4e:	0c f0       	brlt	.+2      	; 0x6b52 <pick_drop+0xa60>
    6b50:	10 e0       	ldi	r17, 0x00	; 0
    6b52:	11 23       	and	r17, r17
    6b54:	49 f0       	breq	.+18     	; 0x6b68 <pick_drop+0xa76>
		__ticks = 1;
    6b56:	ce 01       	movw	r24, r28
    6b58:	83 59       	subi	r24, 0x93	; 147
    6b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b5c:	21 e0       	ldi	r18, 0x01	; 1
    6b5e:	30 e0       	ldi	r19, 0x00	; 0
    6b60:	fc 01       	movw	r30, r24
    6b62:	31 83       	std	Z+1, r19	; 0x01
    6b64:	20 83       	st	Z, r18
    6b66:	74 c0       	rjmp	.+232    	; 0x6c50 <pick_drop+0xb5e>
	else if (__tmp > 65535)
    6b68:	ce 01       	movw	r24, r28
    6b6a:	87 59       	subi	r24, 0x97	; 151
    6b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b6e:	11 e0       	ldi	r17, 0x01	; 1
    6b70:	fc 01       	movw	r30, r24
    6b72:	60 81       	ld	r22, Z
    6b74:	71 81       	ldd	r23, Z+1	; 0x01
    6b76:	82 81       	ldd	r24, Z+2	; 0x02
    6b78:	93 81       	ldd	r25, Z+3	; 0x03
    6b7a:	20 e0       	ldi	r18, 0x00	; 0
    6b7c:	3f ef       	ldi	r19, 0xFF	; 255
    6b7e:	4f e7       	ldi	r20, 0x7F	; 127
    6b80:	57 e4       	ldi	r21, 0x47	; 71
    6b82:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6b86:	18 16       	cp	r1, r24
    6b88:	0c f0       	brlt	.+2      	; 0x6b8c <pick_drop+0xa9a>
    6b8a:	10 e0       	ldi	r17, 0x00	; 0
    6b8c:	11 23       	and	r17, r17
    6b8e:	09 f4       	brne	.+2      	; 0x6b92 <pick_drop+0xaa0>
    6b90:	4d c0       	rjmp	.+154    	; 0x6c2c <pick_drop+0xb3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b92:	ce 01       	movw	r24, r28
    6b94:	8b 59       	subi	r24, 0x9B	; 155
    6b96:	9f 4f       	sbci	r25, 0xFF	; 255
    6b98:	fc 01       	movw	r30, r24
    6b9a:	60 81       	ld	r22, Z
    6b9c:	71 81       	ldd	r23, Z+1	; 0x01
    6b9e:	82 81       	ldd	r24, Z+2	; 0x02
    6ba0:	93 81       	ldd	r25, Z+3	; 0x03
    6ba2:	20 e0       	ldi	r18, 0x00	; 0
    6ba4:	30 e0       	ldi	r19, 0x00	; 0
    6ba6:	40 e2       	ldi	r20, 0x20	; 32
    6ba8:	51 e4       	ldi	r21, 0x41	; 65
    6baa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6bae:	dc 01       	movw	r26, r24
    6bb0:	cb 01       	movw	r24, r22
    6bb2:	8e 01       	movw	r16, r28
    6bb4:	03 59       	subi	r16, 0x93	; 147
    6bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb8:	bc 01       	movw	r22, r24
    6bba:	cd 01       	movw	r24, r26
    6bbc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6bc0:	dc 01       	movw	r26, r24
    6bc2:	cb 01       	movw	r24, r22
    6bc4:	f8 01       	movw	r30, r16
    6bc6:	91 83       	std	Z+1, r25	; 0x01
    6bc8:	80 83       	st	Z, r24
    6bca:	27 c0       	rjmp	.+78     	; 0x6c1a <pick_drop+0xb28>
    6bcc:	ce 01       	movw	r24, r28
    6bce:	81 59       	subi	r24, 0x91	; 145
    6bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    6bd2:	20 e7       	ldi	r18, 0x70	; 112
    6bd4:	31 e0       	ldi	r19, 0x01	; 1
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	31 83       	std	Z+1, r19	; 0x01
    6bda:	20 83       	st	Z, r18
    6bdc:	ce 01       	movw	r24, r28
    6bde:	81 59       	subi	r24, 0x91	; 145
    6be0:	9f 4f       	sbci	r25, 0xFF	; 255
    6be2:	fc 01       	movw	r30, r24
    6be4:	80 81       	ld	r24, Z
    6be6:	91 81       	ldd	r25, Z+1	; 0x01
    6be8:	8c 01       	movw	r16, r24
    6bea:	c8 01       	movw	r24, r16
    6bec:	01 97       	sbiw	r24, 0x01	; 1
    6bee:	f1 f7       	brne	.-4      	; 0x6bec <pick_drop+0xafa>
    6bf0:	8c 01       	movw	r16, r24
    6bf2:	ce 01       	movw	r24, r28
    6bf4:	81 59       	subi	r24, 0x91	; 145
    6bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf8:	fc 01       	movw	r30, r24
    6bfa:	11 83       	std	Z+1, r17	; 0x01
    6bfc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bfe:	ce 01       	movw	r24, r28
    6c00:	83 59       	subi	r24, 0x93	; 147
    6c02:	9f 4f       	sbci	r25, 0xFF	; 255
    6c04:	9e 01       	movw	r18, r28
    6c06:	23 59       	subi	r18, 0x93	; 147
    6c08:	3f 4f       	sbci	r19, 0xFF	; 255
    6c0a:	f9 01       	movw	r30, r18
    6c0c:	20 81       	ld	r18, Z
    6c0e:	31 81       	ldd	r19, Z+1	; 0x01
    6c10:	21 50       	subi	r18, 0x01	; 1
    6c12:	30 40       	sbci	r19, 0x00	; 0
    6c14:	fc 01       	movw	r30, r24
    6c16:	31 83       	std	Z+1, r19	; 0x01
    6c18:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c1a:	ce 01       	movw	r24, r28
    6c1c:	83 59       	subi	r24, 0x93	; 147
    6c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c20:	fc 01       	movw	r30, r24
    6c22:	80 81       	ld	r24, Z
    6c24:	91 81       	ldd	r25, Z+1	; 0x01
    6c26:	00 97       	sbiw	r24, 0x00	; 0
    6c28:	89 f6       	brne	.-94     	; 0x6bcc <pick_drop+0xada>
    6c2a:	2f c0       	rjmp	.+94     	; 0x6c8a <pick_drop+0xb98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c2c:	8e 01       	movw	r16, r28
    6c2e:	03 59       	subi	r16, 0x93	; 147
    6c30:	1f 4f       	sbci	r17, 0xFF	; 255
    6c32:	ce 01       	movw	r24, r28
    6c34:	87 59       	subi	r24, 0x97	; 151
    6c36:	9f 4f       	sbci	r25, 0xFF	; 255
    6c38:	fc 01       	movw	r30, r24
    6c3a:	60 81       	ld	r22, Z
    6c3c:	71 81       	ldd	r23, Z+1	; 0x01
    6c3e:	82 81       	ldd	r24, Z+2	; 0x02
    6c40:	93 81       	ldd	r25, Z+3	; 0x03
    6c42:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6c46:	dc 01       	movw	r26, r24
    6c48:	cb 01       	movw	r24, r22
    6c4a:	f8 01       	movw	r30, r16
    6c4c:	91 83       	std	Z+1, r25	; 0x01
    6c4e:	80 83       	st	Z, r24
    6c50:	ce 01       	movw	r24, r28
    6c52:	8f 58       	subi	r24, 0x8F	; 143
    6c54:	9f 4f       	sbci	r25, 0xFF	; 255
    6c56:	9e 01       	movw	r18, r28
    6c58:	23 59       	subi	r18, 0x93	; 147
    6c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c5c:	f9 01       	movw	r30, r18
    6c5e:	20 81       	ld	r18, Z
    6c60:	31 81       	ldd	r19, Z+1	; 0x01
    6c62:	fc 01       	movw	r30, r24
    6c64:	31 83       	std	Z+1, r19	; 0x01
    6c66:	20 83       	st	Z, r18
    6c68:	ce 01       	movw	r24, r28
    6c6a:	8f 58       	subi	r24, 0x8F	; 143
    6c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c6e:	fc 01       	movw	r30, r24
    6c70:	80 81       	ld	r24, Z
    6c72:	91 81       	ldd	r25, Z+1	; 0x01
    6c74:	8c 01       	movw	r16, r24
    6c76:	c8 01       	movw	r24, r16
    6c78:	01 97       	sbiw	r24, 0x01	; 1
    6c7a:	f1 f7       	brne	.-4      	; 0x6c78 <pick_drop+0xb86>
    6c7c:	8c 01       	movw	r16, r24
    6c7e:	ce 01       	movw	r24, r28
    6c80:	8f 58       	subi	r24, 0x8F	; 143
    6c82:	9f 4f       	sbci	r25, 0xFF	; 255
    6c84:	fc 01       	movw	r30, r24
    6c86:	11 83       	std	Z+1, r17	; 0x01
    6c88:	00 83       	st	Z, r16
			_delay_ms(10);
			front();
    6c8a:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    6c8e:	9e 01       	movw	r18, r28
    6c90:	2d 58       	subi	r18, 0x8D	; 141
    6c92:	3f 4f       	sbci	r19, 0xFF	; 255
    6c94:	80 e0       	ldi	r24, 0x00	; 0
    6c96:	90 e0       	ldi	r25, 0x00	; 0
    6c98:	a8 ec       	ldi	r26, 0xC8	; 200
    6c9a:	b2 e4       	ldi	r27, 0x42	; 66
    6c9c:	f9 01       	movw	r30, r18
    6c9e:	80 83       	st	Z, r24
    6ca0:	91 83       	std	Z+1, r25	; 0x01
    6ca2:	a2 83       	std	Z+2, r26	; 0x02
    6ca4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6ca6:	8e 01       	movw	r16, r28
    6ca8:	09 58       	subi	r16, 0x89	; 137
    6caa:	1f 4f       	sbci	r17, 0xFF	; 255
    6cac:	ce 01       	movw	r24, r28
    6cae:	8d 58       	subi	r24, 0x8D	; 141
    6cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    6cb2:	fc 01       	movw	r30, r24
    6cb4:	60 81       	ld	r22, Z
    6cb6:	71 81       	ldd	r23, Z+1	; 0x01
    6cb8:	82 81       	ldd	r24, Z+2	; 0x02
    6cba:	93 81       	ldd	r25, Z+3	; 0x03
    6cbc:	26 e6       	ldi	r18, 0x66	; 102
    6cbe:	36 e6       	ldi	r19, 0x66	; 102
    6cc0:	46 e6       	ldi	r20, 0x66	; 102
    6cc2:	55 e4       	ldi	r21, 0x45	; 69
    6cc4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6cc8:	dc 01       	movw	r26, r24
    6cca:	cb 01       	movw	r24, r22
    6ccc:	f8 01       	movw	r30, r16
    6cce:	80 83       	st	Z, r24
    6cd0:	91 83       	std	Z+1, r25	; 0x01
    6cd2:	a2 83       	std	Z+2, r26	; 0x02
    6cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6cd6:	ce 01       	movw	r24, r28
    6cd8:	89 58       	subi	r24, 0x89	; 137
    6cda:	9f 4f       	sbci	r25, 0xFF	; 255
    6cdc:	11 e0       	ldi	r17, 0x01	; 1
    6cde:	fc 01       	movw	r30, r24
    6ce0:	60 81       	ld	r22, Z
    6ce2:	71 81       	ldd	r23, Z+1	; 0x01
    6ce4:	82 81       	ldd	r24, Z+2	; 0x02
    6ce6:	93 81       	ldd	r25, Z+3	; 0x03
    6ce8:	20 e0       	ldi	r18, 0x00	; 0
    6cea:	30 e0       	ldi	r19, 0x00	; 0
    6cec:	40 e8       	ldi	r20, 0x80	; 128
    6cee:	5f e3       	ldi	r21, 0x3F	; 63
    6cf0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6cf4:	88 23       	and	r24, r24
    6cf6:	0c f0       	brlt	.+2      	; 0x6cfa <pick_drop+0xc08>
    6cf8:	10 e0       	ldi	r17, 0x00	; 0
    6cfa:	11 23       	and	r17, r17
    6cfc:	49 f0       	breq	.+18     	; 0x6d10 <pick_drop+0xc1e>
		__ticks = 1;
    6cfe:	ce 01       	movw	r24, r28
    6d00:	85 58       	subi	r24, 0x85	; 133
    6d02:	9f 4f       	sbci	r25, 0xFF	; 255
    6d04:	21 e0       	ldi	r18, 0x01	; 1
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	fc 01       	movw	r30, r24
    6d0a:	31 83       	std	Z+1, r19	; 0x01
    6d0c:	20 83       	st	Z, r18
    6d0e:	74 c0       	rjmp	.+232    	; 0x6df8 <pick_drop+0xd06>
	else if (__tmp > 65535)
    6d10:	ce 01       	movw	r24, r28
    6d12:	89 58       	subi	r24, 0x89	; 137
    6d14:	9f 4f       	sbci	r25, 0xFF	; 255
    6d16:	11 e0       	ldi	r17, 0x01	; 1
    6d18:	fc 01       	movw	r30, r24
    6d1a:	60 81       	ld	r22, Z
    6d1c:	71 81       	ldd	r23, Z+1	; 0x01
    6d1e:	82 81       	ldd	r24, Z+2	; 0x02
    6d20:	93 81       	ldd	r25, Z+3	; 0x03
    6d22:	20 e0       	ldi	r18, 0x00	; 0
    6d24:	3f ef       	ldi	r19, 0xFF	; 255
    6d26:	4f e7       	ldi	r20, 0x7F	; 127
    6d28:	57 e4       	ldi	r21, 0x47	; 71
    6d2a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6d2e:	18 16       	cp	r1, r24
    6d30:	0c f0       	brlt	.+2      	; 0x6d34 <pick_drop+0xc42>
    6d32:	10 e0       	ldi	r17, 0x00	; 0
    6d34:	11 23       	and	r17, r17
    6d36:	09 f4       	brne	.+2      	; 0x6d3a <pick_drop+0xc48>
    6d38:	4d c0       	rjmp	.+154    	; 0x6dd4 <pick_drop+0xce2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d3a:	ce 01       	movw	r24, r28
    6d3c:	8d 58       	subi	r24, 0x8D	; 141
    6d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d40:	fc 01       	movw	r30, r24
    6d42:	60 81       	ld	r22, Z
    6d44:	71 81       	ldd	r23, Z+1	; 0x01
    6d46:	82 81       	ldd	r24, Z+2	; 0x02
    6d48:	93 81       	ldd	r25, Z+3	; 0x03
    6d4a:	20 e0       	ldi	r18, 0x00	; 0
    6d4c:	30 e0       	ldi	r19, 0x00	; 0
    6d4e:	40 e2       	ldi	r20, 0x20	; 32
    6d50:	51 e4       	ldi	r21, 0x41	; 65
    6d52:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6d56:	dc 01       	movw	r26, r24
    6d58:	cb 01       	movw	r24, r22
    6d5a:	8e 01       	movw	r16, r28
    6d5c:	05 58       	subi	r16, 0x85	; 133
    6d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6d60:	bc 01       	movw	r22, r24
    6d62:	cd 01       	movw	r24, r26
    6d64:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6d68:	dc 01       	movw	r26, r24
    6d6a:	cb 01       	movw	r24, r22
    6d6c:	f8 01       	movw	r30, r16
    6d6e:	91 83       	std	Z+1, r25	; 0x01
    6d70:	80 83       	st	Z, r24
    6d72:	27 c0       	rjmp	.+78     	; 0x6dc2 <pick_drop+0xcd0>
    6d74:	ce 01       	movw	r24, r28
    6d76:	83 58       	subi	r24, 0x83	; 131
    6d78:	9f 4f       	sbci	r25, 0xFF	; 255
    6d7a:	20 e7       	ldi	r18, 0x70	; 112
    6d7c:	31 e0       	ldi	r19, 0x01	; 1
    6d7e:	fc 01       	movw	r30, r24
    6d80:	31 83       	std	Z+1, r19	; 0x01
    6d82:	20 83       	st	Z, r18
    6d84:	ce 01       	movw	r24, r28
    6d86:	83 58       	subi	r24, 0x83	; 131
    6d88:	9f 4f       	sbci	r25, 0xFF	; 255
    6d8a:	fc 01       	movw	r30, r24
    6d8c:	80 81       	ld	r24, Z
    6d8e:	91 81       	ldd	r25, Z+1	; 0x01
    6d90:	8c 01       	movw	r16, r24
    6d92:	c8 01       	movw	r24, r16
    6d94:	01 97       	sbiw	r24, 0x01	; 1
    6d96:	f1 f7       	brne	.-4      	; 0x6d94 <pick_drop+0xca2>
    6d98:	8c 01       	movw	r16, r24
    6d9a:	ce 01       	movw	r24, r28
    6d9c:	83 58       	subi	r24, 0x83	; 131
    6d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    6da0:	fc 01       	movw	r30, r24
    6da2:	11 83       	std	Z+1, r17	; 0x01
    6da4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6da6:	ce 01       	movw	r24, r28
    6da8:	85 58       	subi	r24, 0x85	; 133
    6daa:	9f 4f       	sbci	r25, 0xFF	; 255
    6dac:	9e 01       	movw	r18, r28
    6dae:	25 58       	subi	r18, 0x85	; 133
    6db0:	3f 4f       	sbci	r19, 0xFF	; 255
    6db2:	f9 01       	movw	r30, r18
    6db4:	20 81       	ld	r18, Z
    6db6:	31 81       	ldd	r19, Z+1	; 0x01
    6db8:	21 50       	subi	r18, 0x01	; 1
    6dba:	30 40       	sbci	r19, 0x00	; 0
    6dbc:	fc 01       	movw	r30, r24
    6dbe:	31 83       	std	Z+1, r19	; 0x01
    6dc0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dc2:	ce 01       	movw	r24, r28
    6dc4:	85 58       	subi	r24, 0x85	; 133
    6dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    6dc8:	fc 01       	movw	r30, r24
    6dca:	80 81       	ld	r24, Z
    6dcc:	91 81       	ldd	r25, Z+1	; 0x01
    6dce:	00 97       	sbiw	r24, 0x00	; 0
    6dd0:	89 f6       	brne	.-94     	; 0x6d74 <pick_drop+0xc82>
    6dd2:	2f c0       	rjmp	.+94     	; 0x6e32 <pick_drop+0xd40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dd4:	8e 01       	movw	r16, r28
    6dd6:	05 58       	subi	r16, 0x85	; 133
    6dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dda:	ce 01       	movw	r24, r28
    6ddc:	89 58       	subi	r24, 0x89	; 137
    6dde:	9f 4f       	sbci	r25, 0xFF	; 255
    6de0:	fc 01       	movw	r30, r24
    6de2:	60 81       	ld	r22, Z
    6de4:	71 81       	ldd	r23, Z+1	; 0x01
    6de6:	82 81       	ldd	r24, Z+2	; 0x02
    6de8:	93 81       	ldd	r25, Z+3	; 0x03
    6dea:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6dee:	dc 01       	movw	r26, r24
    6df0:	cb 01       	movw	r24, r22
    6df2:	f8 01       	movw	r30, r16
    6df4:	91 83       	std	Z+1, r25	; 0x01
    6df6:	80 83       	st	Z, r24
    6df8:	ce 01       	movw	r24, r28
    6dfa:	81 58       	subi	r24, 0x81	; 129
    6dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    6dfe:	9e 01       	movw	r18, r28
    6e00:	25 58       	subi	r18, 0x85	; 133
    6e02:	3f 4f       	sbci	r19, 0xFF	; 255
    6e04:	f9 01       	movw	r30, r18
    6e06:	20 81       	ld	r18, Z
    6e08:	31 81       	ldd	r19, Z+1	; 0x01
    6e0a:	fc 01       	movw	r30, r24
    6e0c:	31 83       	std	Z+1, r19	; 0x01
    6e0e:	20 83       	st	Z, r18
    6e10:	ce 01       	movw	r24, r28
    6e12:	81 58       	subi	r24, 0x81	; 129
    6e14:	9f 4f       	sbci	r25, 0xFF	; 255
    6e16:	fc 01       	movw	r30, r24
    6e18:	80 81       	ld	r24, Z
    6e1a:	91 81       	ldd	r25, Z+1	; 0x01
    6e1c:	8c 01       	movw	r16, r24
    6e1e:	c8 01       	movw	r24, r16
    6e20:	01 97       	sbiw	r24, 0x01	; 1
    6e22:	f1 f7       	brne	.-4      	; 0x6e20 <pick_drop+0xd2e>
    6e24:	8c 01       	movw	r16, r24
    6e26:	ce 01       	movw	r24, r28
    6e28:	81 58       	subi	r24, 0x81	; 129
    6e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e2c:	fc 01       	movw	r30, r24
    6e2e:	11 83       	std	Z+1, r17	; 0x01
    6e30:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_right();
    6e32:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			back_mm(pdback);
    6e36:	89 81       	ldd	r24, Y+1	; 0x01
    6e38:	9a 81       	ldd	r25, Y+2	; 0x02
    6e3a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    6e3e:	9e 01       	movw	r18, r28
    6e40:	2f 57       	subi	r18, 0x7F	; 127
    6e42:	3f 4f       	sbci	r19, 0xFF	; 255
    6e44:	80 e0       	ldi	r24, 0x00	; 0
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	a0 ea       	ldi	r26, 0xA0	; 160
    6e4a:	b1 e4       	ldi	r27, 0x41	; 65
    6e4c:	f9 01       	movw	r30, r18
    6e4e:	80 83       	st	Z, r24
    6e50:	91 83       	std	Z+1, r25	; 0x01
    6e52:	a2 83       	std	Z+2, r26	; 0x02
    6e54:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6e56:	8e 01       	movw	r16, r28
    6e58:	0b 57       	subi	r16, 0x7B	; 123
    6e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    6e5c:	ce 01       	movw	r24, r28
    6e5e:	8f 57       	subi	r24, 0x7F	; 127
    6e60:	9f 4f       	sbci	r25, 0xFF	; 255
    6e62:	fc 01       	movw	r30, r24
    6e64:	60 81       	ld	r22, Z
    6e66:	71 81       	ldd	r23, Z+1	; 0x01
    6e68:	82 81       	ldd	r24, Z+2	; 0x02
    6e6a:	93 81       	ldd	r25, Z+3	; 0x03
    6e6c:	26 e6       	ldi	r18, 0x66	; 102
    6e6e:	36 e6       	ldi	r19, 0x66	; 102
    6e70:	46 e6       	ldi	r20, 0x66	; 102
    6e72:	55 e4       	ldi	r21, 0x45	; 69
    6e74:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6e78:	dc 01       	movw	r26, r24
    6e7a:	cb 01       	movw	r24, r22
    6e7c:	f8 01       	movw	r30, r16
    6e7e:	80 83       	st	Z, r24
    6e80:	91 83       	std	Z+1, r25	; 0x01
    6e82:	a2 83       	std	Z+2, r26	; 0x02
    6e84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6e86:	ce 01       	movw	r24, r28
    6e88:	8b 57       	subi	r24, 0x7B	; 123
    6e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e8c:	11 e0       	ldi	r17, 0x01	; 1
    6e8e:	fc 01       	movw	r30, r24
    6e90:	60 81       	ld	r22, Z
    6e92:	71 81       	ldd	r23, Z+1	; 0x01
    6e94:	82 81       	ldd	r24, Z+2	; 0x02
    6e96:	93 81       	ldd	r25, Z+3	; 0x03
    6e98:	20 e0       	ldi	r18, 0x00	; 0
    6e9a:	30 e0       	ldi	r19, 0x00	; 0
    6e9c:	40 e8       	ldi	r20, 0x80	; 128
    6e9e:	5f e3       	ldi	r21, 0x3F	; 63
    6ea0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    6ea4:	88 23       	and	r24, r24
    6ea6:	0c f0       	brlt	.+2      	; 0x6eaa <pick_drop+0xdb8>
    6ea8:	10 e0       	ldi	r17, 0x00	; 0
    6eaa:	11 23       	and	r17, r17
    6eac:	49 f0       	breq	.+18     	; 0x6ec0 <pick_drop+0xdce>
		__ticks = 1;
    6eae:	ce 01       	movw	r24, r28
    6eb0:	87 57       	subi	r24, 0x77	; 119
    6eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    6eb4:	21 e0       	ldi	r18, 0x01	; 1
    6eb6:	30 e0       	ldi	r19, 0x00	; 0
    6eb8:	fc 01       	movw	r30, r24
    6eba:	31 83       	std	Z+1, r19	; 0x01
    6ebc:	20 83       	st	Z, r18
    6ebe:	74 c0       	rjmp	.+232    	; 0x6fa8 <pick_drop+0xeb6>
	else if (__tmp > 65535)
    6ec0:	ce 01       	movw	r24, r28
    6ec2:	8b 57       	subi	r24, 0x7B	; 123
    6ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec6:	11 e0       	ldi	r17, 0x01	; 1
    6ec8:	fc 01       	movw	r30, r24
    6eca:	60 81       	ld	r22, Z
    6ecc:	71 81       	ldd	r23, Z+1	; 0x01
    6ece:	82 81       	ldd	r24, Z+2	; 0x02
    6ed0:	93 81       	ldd	r25, Z+3	; 0x03
    6ed2:	20 e0       	ldi	r18, 0x00	; 0
    6ed4:	3f ef       	ldi	r19, 0xFF	; 255
    6ed6:	4f e7       	ldi	r20, 0x7F	; 127
    6ed8:	57 e4       	ldi	r21, 0x47	; 71
    6eda:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    6ede:	18 16       	cp	r1, r24
    6ee0:	0c f0       	brlt	.+2      	; 0x6ee4 <pick_drop+0xdf2>
    6ee2:	10 e0       	ldi	r17, 0x00	; 0
    6ee4:	11 23       	and	r17, r17
    6ee6:	09 f4       	brne	.+2      	; 0x6eea <pick_drop+0xdf8>
    6ee8:	4d c0       	rjmp	.+154    	; 0x6f84 <pick_drop+0xe92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6eea:	ce 01       	movw	r24, r28
    6eec:	8f 57       	subi	r24, 0x7F	; 127
    6eee:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	60 81       	ld	r22, Z
    6ef4:	71 81       	ldd	r23, Z+1	; 0x01
    6ef6:	82 81       	ldd	r24, Z+2	; 0x02
    6ef8:	93 81       	ldd	r25, Z+3	; 0x03
    6efa:	20 e0       	ldi	r18, 0x00	; 0
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	40 e2       	ldi	r20, 0x20	; 32
    6f00:	51 e4       	ldi	r21, 0x41	; 65
    6f02:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    6f06:	dc 01       	movw	r26, r24
    6f08:	cb 01       	movw	r24, r22
    6f0a:	8e 01       	movw	r16, r28
    6f0c:	07 57       	subi	r16, 0x77	; 119
    6f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f10:	bc 01       	movw	r22, r24
    6f12:	cd 01       	movw	r24, r26
    6f14:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6f18:	dc 01       	movw	r26, r24
    6f1a:	cb 01       	movw	r24, r22
    6f1c:	f8 01       	movw	r30, r16
    6f1e:	91 83       	std	Z+1, r25	; 0x01
    6f20:	80 83       	st	Z, r24
    6f22:	27 c0       	rjmp	.+78     	; 0x6f72 <pick_drop+0xe80>
    6f24:	ce 01       	movw	r24, r28
    6f26:	85 57       	subi	r24, 0x75	; 117
    6f28:	9f 4f       	sbci	r25, 0xFF	; 255
    6f2a:	20 e7       	ldi	r18, 0x70	; 112
    6f2c:	31 e0       	ldi	r19, 0x01	; 1
    6f2e:	fc 01       	movw	r30, r24
    6f30:	31 83       	std	Z+1, r19	; 0x01
    6f32:	20 83       	st	Z, r18
    6f34:	ce 01       	movw	r24, r28
    6f36:	85 57       	subi	r24, 0x75	; 117
    6f38:	9f 4f       	sbci	r25, 0xFF	; 255
    6f3a:	fc 01       	movw	r30, r24
    6f3c:	80 81       	ld	r24, Z
    6f3e:	91 81       	ldd	r25, Z+1	; 0x01
    6f40:	8c 01       	movw	r16, r24
    6f42:	c8 01       	movw	r24, r16
    6f44:	01 97       	sbiw	r24, 0x01	; 1
    6f46:	f1 f7       	brne	.-4      	; 0x6f44 <pick_drop+0xe52>
    6f48:	8c 01       	movw	r16, r24
    6f4a:	ce 01       	movw	r24, r28
    6f4c:	85 57       	subi	r24, 0x75	; 117
    6f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f50:	fc 01       	movw	r30, r24
    6f52:	11 83       	std	Z+1, r17	; 0x01
    6f54:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f56:	ce 01       	movw	r24, r28
    6f58:	87 57       	subi	r24, 0x77	; 119
    6f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f5c:	9e 01       	movw	r18, r28
    6f5e:	27 57       	subi	r18, 0x77	; 119
    6f60:	3f 4f       	sbci	r19, 0xFF	; 255
    6f62:	f9 01       	movw	r30, r18
    6f64:	20 81       	ld	r18, Z
    6f66:	31 81       	ldd	r19, Z+1	; 0x01
    6f68:	21 50       	subi	r18, 0x01	; 1
    6f6a:	30 40       	sbci	r19, 0x00	; 0
    6f6c:	fc 01       	movw	r30, r24
    6f6e:	31 83       	std	Z+1, r19	; 0x01
    6f70:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f72:	ce 01       	movw	r24, r28
    6f74:	87 57       	subi	r24, 0x77	; 119
    6f76:	9f 4f       	sbci	r25, 0xFF	; 255
    6f78:	fc 01       	movw	r30, r24
    6f7a:	80 81       	ld	r24, Z
    6f7c:	91 81       	ldd	r25, Z+1	; 0x01
    6f7e:	00 97       	sbiw	r24, 0x00	; 0
    6f80:	89 f6       	brne	.-94     	; 0x6f24 <pick_drop+0xe32>
    6f82:	f7 c6       	rjmp	.+3566   	; 0x7d72 <pick_drop+0x1c80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f84:	8e 01       	movw	r16, r28
    6f86:	07 57       	subi	r16, 0x77	; 119
    6f88:	1f 4f       	sbci	r17, 0xFF	; 255
    6f8a:	ce 01       	movw	r24, r28
    6f8c:	8b 57       	subi	r24, 0x7B	; 123
    6f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f90:	fc 01       	movw	r30, r24
    6f92:	60 81       	ld	r22, Z
    6f94:	71 81       	ldd	r23, Z+1	; 0x01
    6f96:	82 81       	ldd	r24, Z+2	; 0x02
    6f98:	93 81       	ldd	r25, Z+3	; 0x03
    6f9a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    6f9e:	dc 01       	movw	r26, r24
    6fa0:	cb 01       	movw	r24, r22
    6fa2:	f8 01       	movw	r30, r16
    6fa4:	91 83       	std	Z+1, r25	; 0x01
    6fa6:	80 83       	st	Z, r24
    6fa8:	ce 01       	movw	r24, r28
    6faa:	83 57       	subi	r24, 0x73	; 115
    6fac:	9f 4f       	sbci	r25, 0xFF	; 255
    6fae:	9e 01       	movw	r18, r28
    6fb0:	27 57       	subi	r18, 0x77	; 119
    6fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fb4:	f9 01       	movw	r30, r18
    6fb6:	20 81       	ld	r18, Z
    6fb8:	31 81       	ldd	r19, Z+1	; 0x01
    6fba:	fc 01       	movw	r30, r24
    6fbc:	31 83       	std	Z+1, r19	; 0x01
    6fbe:	20 83       	st	Z, r18
    6fc0:	ce 01       	movw	r24, r28
    6fc2:	83 57       	subi	r24, 0x73	; 115
    6fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc6:	fc 01       	movw	r30, r24
    6fc8:	80 81       	ld	r24, Z
    6fca:	91 81       	ldd	r25, Z+1	; 0x01
    6fcc:	8c 01       	movw	r16, r24
    6fce:	c8 01       	movw	r24, r16
    6fd0:	01 97       	sbiw	r24, 0x01	; 1
    6fd2:	f1 f7       	brne	.-4      	; 0x6fd0 <pick_drop+0xede>
    6fd4:	8c 01       	movw	r16, r24
    6fd6:	ce 01       	movw	r24, r28
    6fd8:	83 57       	subi	r24, 0x73	; 115
    6fda:	9f 4f       	sbci	r25, 0xFF	; 255
    6fdc:	fc 01       	movw	r30, r24
    6fde:	11 83       	std	Z+1, r17	; 0x01
    6fe0:	00 83       	st	Z, r16
    6fe2:	c7 c6       	rjmp	.+3470   	; 0x7d72 <pick_drop+0x1c80>
			_delay_ms(20);
			}
			else if(master_path[node-1] == 'N')
    6fe4:	80 91 4f 03 	lds	r24, 0x034F
    6fe8:	90 91 50 03 	lds	r25, 0x0350
    6fec:	01 97       	sbiw	r24, 0x01	; 1
    6fee:	8d 5a       	subi	r24, 0xAD	; 173
    6ff0:	9c 4f       	sbci	r25, 0xFC	; 252
    6ff2:	fc 01       	movw	r30, r24
    6ff4:	80 81       	ld	r24, Z
    6ff6:	8e 34       	cpi	r24, 0x4E	; 78
    6ff8:	09 f0       	breq	.+2      	; 0x6ffc <pick_drop+0xf0a>
    6ffa:	2d c4       	rjmp	.+2138   	; 0x7856 <pick_drop+0x1764>
			{
					//left_cycle();
					forward_mm(140);
    6ffc:	8c e8       	ldi	r24, 0x8C	; 140
    6ffe:	90 e0       	ldi	r25, 0x00	; 0
    7000:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7004:	9e 01       	movw	r18, r28
    7006:	21 57       	subi	r18, 0x71	; 113
    7008:	3f 4f       	sbci	r19, 0xFF	; 255
    700a:	80 e0       	ldi	r24, 0x00	; 0
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	a0 ea       	ldi	r26, 0xA0	; 160
    7010:	b1 e4       	ldi	r27, 0x41	; 65
    7012:	f9 01       	movw	r30, r18
    7014:	80 83       	st	Z, r24
    7016:	91 83       	std	Z+1, r25	; 0x01
    7018:	a2 83       	std	Z+2, r26	; 0x02
    701a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    701c:	8e 01       	movw	r16, r28
    701e:	0d 56       	subi	r16, 0x6D	; 109
    7020:	1f 4f       	sbci	r17, 0xFF	; 255
    7022:	ce 01       	movw	r24, r28
    7024:	81 57       	subi	r24, 0x71	; 113
    7026:	9f 4f       	sbci	r25, 0xFF	; 255
    7028:	fc 01       	movw	r30, r24
    702a:	60 81       	ld	r22, Z
    702c:	71 81       	ldd	r23, Z+1	; 0x01
    702e:	82 81       	ldd	r24, Z+2	; 0x02
    7030:	93 81       	ldd	r25, Z+3	; 0x03
    7032:	26 e6       	ldi	r18, 0x66	; 102
    7034:	36 e6       	ldi	r19, 0x66	; 102
    7036:	46 e6       	ldi	r20, 0x66	; 102
    7038:	55 e4       	ldi	r21, 0x45	; 69
    703a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    703e:	dc 01       	movw	r26, r24
    7040:	cb 01       	movw	r24, r22
    7042:	f8 01       	movw	r30, r16
    7044:	80 83       	st	Z, r24
    7046:	91 83       	std	Z+1, r25	; 0x01
    7048:	a2 83       	std	Z+2, r26	; 0x02
    704a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    704c:	ce 01       	movw	r24, r28
    704e:	8d 56       	subi	r24, 0x6D	; 109
    7050:	9f 4f       	sbci	r25, 0xFF	; 255
    7052:	11 e0       	ldi	r17, 0x01	; 1
    7054:	fc 01       	movw	r30, r24
    7056:	60 81       	ld	r22, Z
    7058:	71 81       	ldd	r23, Z+1	; 0x01
    705a:	82 81       	ldd	r24, Z+2	; 0x02
    705c:	93 81       	ldd	r25, Z+3	; 0x03
    705e:	20 e0       	ldi	r18, 0x00	; 0
    7060:	30 e0       	ldi	r19, 0x00	; 0
    7062:	40 e8       	ldi	r20, 0x80	; 128
    7064:	5f e3       	ldi	r21, 0x3F	; 63
    7066:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    706a:	88 23       	and	r24, r24
    706c:	0c f0       	brlt	.+2      	; 0x7070 <pick_drop+0xf7e>
    706e:	10 e0       	ldi	r17, 0x00	; 0
    7070:	11 23       	and	r17, r17
    7072:	49 f0       	breq	.+18     	; 0x7086 <pick_drop+0xf94>
		__ticks = 1;
    7074:	ce 01       	movw	r24, r28
    7076:	89 56       	subi	r24, 0x69	; 105
    7078:	9f 4f       	sbci	r25, 0xFF	; 255
    707a:	21 e0       	ldi	r18, 0x01	; 1
    707c:	30 e0       	ldi	r19, 0x00	; 0
    707e:	fc 01       	movw	r30, r24
    7080:	31 83       	std	Z+1, r19	; 0x01
    7082:	20 83       	st	Z, r18
    7084:	74 c0       	rjmp	.+232    	; 0x716e <pick_drop+0x107c>
	else if (__tmp > 65535)
    7086:	ce 01       	movw	r24, r28
    7088:	8d 56       	subi	r24, 0x6D	; 109
    708a:	9f 4f       	sbci	r25, 0xFF	; 255
    708c:	11 e0       	ldi	r17, 0x01	; 1
    708e:	fc 01       	movw	r30, r24
    7090:	60 81       	ld	r22, Z
    7092:	71 81       	ldd	r23, Z+1	; 0x01
    7094:	82 81       	ldd	r24, Z+2	; 0x02
    7096:	93 81       	ldd	r25, Z+3	; 0x03
    7098:	20 e0       	ldi	r18, 0x00	; 0
    709a:	3f ef       	ldi	r19, 0xFF	; 255
    709c:	4f e7       	ldi	r20, 0x7F	; 127
    709e:	57 e4       	ldi	r21, 0x47	; 71
    70a0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    70a4:	18 16       	cp	r1, r24
    70a6:	0c f0       	brlt	.+2      	; 0x70aa <pick_drop+0xfb8>
    70a8:	10 e0       	ldi	r17, 0x00	; 0
    70aa:	11 23       	and	r17, r17
    70ac:	09 f4       	brne	.+2      	; 0x70b0 <pick_drop+0xfbe>
    70ae:	4d c0       	rjmp	.+154    	; 0x714a <pick_drop+0x1058>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70b0:	ce 01       	movw	r24, r28
    70b2:	81 57       	subi	r24, 0x71	; 113
    70b4:	9f 4f       	sbci	r25, 0xFF	; 255
    70b6:	fc 01       	movw	r30, r24
    70b8:	60 81       	ld	r22, Z
    70ba:	71 81       	ldd	r23, Z+1	; 0x01
    70bc:	82 81       	ldd	r24, Z+2	; 0x02
    70be:	93 81       	ldd	r25, Z+3	; 0x03
    70c0:	20 e0       	ldi	r18, 0x00	; 0
    70c2:	30 e0       	ldi	r19, 0x00	; 0
    70c4:	40 e2       	ldi	r20, 0x20	; 32
    70c6:	51 e4       	ldi	r21, 0x41	; 65
    70c8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    70cc:	dc 01       	movw	r26, r24
    70ce:	cb 01       	movw	r24, r22
    70d0:	8e 01       	movw	r16, r28
    70d2:	09 56       	subi	r16, 0x69	; 105
    70d4:	1f 4f       	sbci	r17, 0xFF	; 255
    70d6:	bc 01       	movw	r22, r24
    70d8:	cd 01       	movw	r24, r26
    70da:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    70de:	dc 01       	movw	r26, r24
    70e0:	cb 01       	movw	r24, r22
    70e2:	f8 01       	movw	r30, r16
    70e4:	91 83       	std	Z+1, r25	; 0x01
    70e6:	80 83       	st	Z, r24
    70e8:	27 c0       	rjmp	.+78     	; 0x7138 <pick_drop+0x1046>
    70ea:	ce 01       	movw	r24, r28
    70ec:	87 56       	subi	r24, 0x67	; 103
    70ee:	9f 4f       	sbci	r25, 0xFF	; 255
    70f0:	20 e7       	ldi	r18, 0x70	; 112
    70f2:	31 e0       	ldi	r19, 0x01	; 1
    70f4:	fc 01       	movw	r30, r24
    70f6:	31 83       	std	Z+1, r19	; 0x01
    70f8:	20 83       	st	Z, r18
    70fa:	ce 01       	movw	r24, r28
    70fc:	87 56       	subi	r24, 0x67	; 103
    70fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7100:	fc 01       	movw	r30, r24
    7102:	80 81       	ld	r24, Z
    7104:	91 81       	ldd	r25, Z+1	; 0x01
    7106:	8c 01       	movw	r16, r24
    7108:	c8 01       	movw	r24, r16
    710a:	01 97       	sbiw	r24, 0x01	; 1
    710c:	f1 f7       	brne	.-4      	; 0x710a <pick_drop+0x1018>
    710e:	8c 01       	movw	r16, r24
    7110:	ce 01       	movw	r24, r28
    7112:	87 56       	subi	r24, 0x67	; 103
    7114:	9f 4f       	sbci	r25, 0xFF	; 255
    7116:	fc 01       	movw	r30, r24
    7118:	11 83       	std	Z+1, r17	; 0x01
    711a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    711c:	ce 01       	movw	r24, r28
    711e:	89 56       	subi	r24, 0x69	; 105
    7120:	9f 4f       	sbci	r25, 0xFF	; 255
    7122:	9e 01       	movw	r18, r28
    7124:	29 56       	subi	r18, 0x69	; 105
    7126:	3f 4f       	sbci	r19, 0xFF	; 255
    7128:	f9 01       	movw	r30, r18
    712a:	20 81       	ld	r18, Z
    712c:	31 81       	ldd	r19, Z+1	; 0x01
    712e:	21 50       	subi	r18, 0x01	; 1
    7130:	30 40       	sbci	r19, 0x00	; 0
    7132:	fc 01       	movw	r30, r24
    7134:	31 83       	std	Z+1, r19	; 0x01
    7136:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7138:	ce 01       	movw	r24, r28
    713a:	89 56       	subi	r24, 0x69	; 105
    713c:	9f 4f       	sbci	r25, 0xFF	; 255
    713e:	fc 01       	movw	r30, r24
    7140:	80 81       	ld	r24, Z
    7142:	91 81       	ldd	r25, Z+1	; 0x01
    7144:	00 97       	sbiw	r24, 0x00	; 0
    7146:	89 f6       	brne	.-94     	; 0x70ea <pick_drop+0xff8>
    7148:	2f c0       	rjmp	.+94     	; 0x71a8 <pick_drop+0x10b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    714a:	8e 01       	movw	r16, r28
    714c:	09 56       	subi	r16, 0x69	; 105
    714e:	1f 4f       	sbci	r17, 0xFF	; 255
    7150:	ce 01       	movw	r24, r28
    7152:	8d 56       	subi	r24, 0x6D	; 109
    7154:	9f 4f       	sbci	r25, 0xFF	; 255
    7156:	fc 01       	movw	r30, r24
    7158:	60 81       	ld	r22, Z
    715a:	71 81       	ldd	r23, Z+1	; 0x01
    715c:	82 81       	ldd	r24, Z+2	; 0x02
    715e:	93 81       	ldd	r25, Z+3	; 0x03
    7160:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7164:	dc 01       	movw	r26, r24
    7166:	cb 01       	movw	r24, r22
    7168:	f8 01       	movw	r30, r16
    716a:	91 83       	std	Z+1, r25	; 0x01
    716c:	80 83       	st	Z, r24
    716e:	ce 01       	movw	r24, r28
    7170:	85 56       	subi	r24, 0x65	; 101
    7172:	9f 4f       	sbci	r25, 0xFF	; 255
    7174:	9e 01       	movw	r18, r28
    7176:	29 56       	subi	r18, 0x69	; 105
    7178:	3f 4f       	sbci	r19, 0xFF	; 255
    717a:	f9 01       	movw	r30, r18
    717c:	20 81       	ld	r18, Z
    717e:	31 81       	ldd	r19, Z+1	; 0x01
    7180:	fc 01       	movw	r30, r24
    7182:	31 83       	std	Z+1, r19	; 0x01
    7184:	20 83       	st	Z, r18
    7186:	ce 01       	movw	r24, r28
    7188:	85 56       	subi	r24, 0x65	; 101
    718a:	9f 4f       	sbci	r25, 0xFF	; 255
    718c:	fc 01       	movw	r30, r24
    718e:	80 81       	ld	r24, Z
    7190:	91 81       	ldd	r25, Z+1	; 0x01
    7192:	8c 01       	movw	r16, r24
    7194:	c8 01       	movw	r24, r16
    7196:	01 97       	sbiw	r24, 0x01	; 1
    7198:	f1 f7       	brne	.-4      	; 0x7196 <pick_drop+0x10a4>
    719a:	8c 01       	movw	r16, r24
    719c:	ce 01       	movw	r24, r28
    719e:	85 56       	subi	r24, 0x65	; 101
    71a0:	9f 4f       	sbci	r25, 0xFF	; 255
    71a2:	fc 01       	movw	r30, r24
    71a4:	11 83       	std	Z+1, r17	; 0x01
    71a6:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_left2();
    71a8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    71ac:	9e 01       	movw	r18, r28
    71ae:	23 56       	subi	r18, 0x63	; 99
    71b0:	3f 4f       	sbci	r19, 0xFF	; 255
    71b2:	80 e0       	ldi	r24, 0x00	; 0
    71b4:	90 e0       	ldi	r25, 0x00	; 0
    71b6:	a8 e4       	ldi	r26, 0x48	; 72
    71b8:	b2 e4       	ldi	r27, 0x42	; 66
    71ba:	f9 01       	movw	r30, r18
    71bc:	80 83       	st	Z, r24
    71be:	91 83       	std	Z+1, r25	; 0x01
    71c0:	a2 83       	std	Z+2, r26	; 0x02
    71c2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    71c4:	8e 01       	movw	r16, r28
    71c6:	0f 55       	subi	r16, 0x5F	; 95
    71c8:	1f 4f       	sbci	r17, 0xFF	; 255
    71ca:	ce 01       	movw	r24, r28
    71cc:	83 56       	subi	r24, 0x63	; 99
    71ce:	9f 4f       	sbci	r25, 0xFF	; 255
    71d0:	fc 01       	movw	r30, r24
    71d2:	60 81       	ld	r22, Z
    71d4:	71 81       	ldd	r23, Z+1	; 0x01
    71d6:	82 81       	ldd	r24, Z+2	; 0x02
    71d8:	93 81       	ldd	r25, Z+3	; 0x03
    71da:	26 e6       	ldi	r18, 0x66	; 102
    71dc:	36 e6       	ldi	r19, 0x66	; 102
    71de:	46 e6       	ldi	r20, 0x66	; 102
    71e0:	55 e4       	ldi	r21, 0x45	; 69
    71e2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    71e6:	dc 01       	movw	r26, r24
    71e8:	cb 01       	movw	r24, r22
    71ea:	f8 01       	movw	r30, r16
    71ec:	80 83       	st	Z, r24
    71ee:	91 83       	std	Z+1, r25	; 0x01
    71f0:	a2 83       	std	Z+2, r26	; 0x02
    71f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    71f4:	ce 01       	movw	r24, r28
    71f6:	8f 55       	subi	r24, 0x5F	; 95
    71f8:	9f 4f       	sbci	r25, 0xFF	; 255
    71fa:	11 e0       	ldi	r17, 0x01	; 1
    71fc:	fc 01       	movw	r30, r24
    71fe:	60 81       	ld	r22, Z
    7200:	71 81       	ldd	r23, Z+1	; 0x01
    7202:	82 81       	ldd	r24, Z+2	; 0x02
    7204:	93 81       	ldd	r25, Z+3	; 0x03
    7206:	20 e0       	ldi	r18, 0x00	; 0
    7208:	30 e0       	ldi	r19, 0x00	; 0
    720a:	40 e8       	ldi	r20, 0x80	; 128
    720c:	5f e3       	ldi	r21, 0x3F	; 63
    720e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7212:	88 23       	and	r24, r24
    7214:	0c f0       	brlt	.+2      	; 0x7218 <pick_drop+0x1126>
    7216:	10 e0       	ldi	r17, 0x00	; 0
    7218:	11 23       	and	r17, r17
    721a:	49 f0       	breq	.+18     	; 0x722e <pick_drop+0x113c>
		__ticks = 1;
    721c:	ce 01       	movw	r24, r28
    721e:	8b 55       	subi	r24, 0x5B	; 91
    7220:	9f 4f       	sbci	r25, 0xFF	; 255
    7222:	21 e0       	ldi	r18, 0x01	; 1
    7224:	30 e0       	ldi	r19, 0x00	; 0
    7226:	fc 01       	movw	r30, r24
    7228:	31 83       	std	Z+1, r19	; 0x01
    722a:	20 83       	st	Z, r18
    722c:	74 c0       	rjmp	.+232    	; 0x7316 <pick_drop+0x1224>
	else if (__tmp > 65535)
    722e:	ce 01       	movw	r24, r28
    7230:	8f 55       	subi	r24, 0x5F	; 95
    7232:	9f 4f       	sbci	r25, 0xFF	; 255
    7234:	11 e0       	ldi	r17, 0x01	; 1
    7236:	fc 01       	movw	r30, r24
    7238:	60 81       	ld	r22, Z
    723a:	71 81       	ldd	r23, Z+1	; 0x01
    723c:	82 81       	ldd	r24, Z+2	; 0x02
    723e:	93 81       	ldd	r25, Z+3	; 0x03
    7240:	20 e0       	ldi	r18, 0x00	; 0
    7242:	3f ef       	ldi	r19, 0xFF	; 255
    7244:	4f e7       	ldi	r20, 0x7F	; 127
    7246:	57 e4       	ldi	r21, 0x47	; 71
    7248:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    724c:	18 16       	cp	r1, r24
    724e:	0c f0       	brlt	.+2      	; 0x7252 <pick_drop+0x1160>
    7250:	10 e0       	ldi	r17, 0x00	; 0
    7252:	11 23       	and	r17, r17
    7254:	09 f4       	brne	.+2      	; 0x7258 <pick_drop+0x1166>
    7256:	4d c0       	rjmp	.+154    	; 0x72f2 <pick_drop+0x1200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7258:	ce 01       	movw	r24, r28
    725a:	83 56       	subi	r24, 0x63	; 99
    725c:	9f 4f       	sbci	r25, 0xFF	; 255
    725e:	fc 01       	movw	r30, r24
    7260:	60 81       	ld	r22, Z
    7262:	71 81       	ldd	r23, Z+1	; 0x01
    7264:	82 81       	ldd	r24, Z+2	; 0x02
    7266:	93 81       	ldd	r25, Z+3	; 0x03
    7268:	20 e0       	ldi	r18, 0x00	; 0
    726a:	30 e0       	ldi	r19, 0x00	; 0
    726c:	40 e2       	ldi	r20, 0x20	; 32
    726e:	51 e4       	ldi	r21, 0x41	; 65
    7270:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7274:	dc 01       	movw	r26, r24
    7276:	cb 01       	movw	r24, r22
    7278:	8e 01       	movw	r16, r28
    727a:	0b 55       	subi	r16, 0x5B	; 91
    727c:	1f 4f       	sbci	r17, 0xFF	; 255
    727e:	bc 01       	movw	r22, r24
    7280:	cd 01       	movw	r24, r26
    7282:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7286:	dc 01       	movw	r26, r24
    7288:	cb 01       	movw	r24, r22
    728a:	f8 01       	movw	r30, r16
    728c:	91 83       	std	Z+1, r25	; 0x01
    728e:	80 83       	st	Z, r24
    7290:	27 c0       	rjmp	.+78     	; 0x72e0 <pick_drop+0x11ee>
    7292:	ce 01       	movw	r24, r28
    7294:	89 55       	subi	r24, 0x59	; 89
    7296:	9f 4f       	sbci	r25, 0xFF	; 255
    7298:	20 e7       	ldi	r18, 0x70	; 112
    729a:	31 e0       	ldi	r19, 0x01	; 1
    729c:	fc 01       	movw	r30, r24
    729e:	31 83       	std	Z+1, r19	; 0x01
    72a0:	20 83       	st	Z, r18
    72a2:	ce 01       	movw	r24, r28
    72a4:	89 55       	subi	r24, 0x59	; 89
    72a6:	9f 4f       	sbci	r25, 0xFF	; 255
    72a8:	fc 01       	movw	r30, r24
    72aa:	80 81       	ld	r24, Z
    72ac:	91 81       	ldd	r25, Z+1	; 0x01
    72ae:	8c 01       	movw	r16, r24
    72b0:	c8 01       	movw	r24, r16
    72b2:	01 97       	sbiw	r24, 0x01	; 1
    72b4:	f1 f7       	brne	.-4      	; 0x72b2 <pick_drop+0x11c0>
    72b6:	8c 01       	movw	r16, r24
    72b8:	ce 01       	movw	r24, r28
    72ba:	89 55       	subi	r24, 0x59	; 89
    72bc:	9f 4f       	sbci	r25, 0xFF	; 255
    72be:	fc 01       	movw	r30, r24
    72c0:	11 83       	std	Z+1, r17	; 0x01
    72c2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72c4:	ce 01       	movw	r24, r28
    72c6:	8b 55       	subi	r24, 0x5B	; 91
    72c8:	9f 4f       	sbci	r25, 0xFF	; 255
    72ca:	9e 01       	movw	r18, r28
    72cc:	2b 55       	subi	r18, 0x5B	; 91
    72ce:	3f 4f       	sbci	r19, 0xFF	; 255
    72d0:	f9 01       	movw	r30, r18
    72d2:	20 81       	ld	r18, Z
    72d4:	31 81       	ldd	r19, Z+1	; 0x01
    72d6:	21 50       	subi	r18, 0x01	; 1
    72d8:	30 40       	sbci	r19, 0x00	; 0
    72da:	fc 01       	movw	r30, r24
    72dc:	31 83       	std	Z+1, r19	; 0x01
    72de:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72e0:	ce 01       	movw	r24, r28
    72e2:	8b 55       	subi	r24, 0x5B	; 91
    72e4:	9f 4f       	sbci	r25, 0xFF	; 255
    72e6:	fc 01       	movw	r30, r24
    72e8:	80 81       	ld	r24, Z
    72ea:	91 81       	ldd	r25, Z+1	; 0x01
    72ec:	00 97       	sbiw	r24, 0x00	; 0
    72ee:	89 f6       	brne	.-94     	; 0x7292 <pick_drop+0x11a0>
    72f0:	2f c0       	rjmp	.+94     	; 0x7350 <pick_drop+0x125e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72f2:	8e 01       	movw	r16, r28
    72f4:	0b 55       	subi	r16, 0x5B	; 91
    72f6:	1f 4f       	sbci	r17, 0xFF	; 255
    72f8:	ce 01       	movw	r24, r28
    72fa:	8f 55       	subi	r24, 0x5F	; 95
    72fc:	9f 4f       	sbci	r25, 0xFF	; 255
    72fe:	fc 01       	movw	r30, r24
    7300:	60 81       	ld	r22, Z
    7302:	71 81       	ldd	r23, Z+1	; 0x01
    7304:	82 81       	ldd	r24, Z+2	; 0x02
    7306:	93 81       	ldd	r25, Z+3	; 0x03
    7308:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    730c:	dc 01       	movw	r26, r24
    730e:	cb 01       	movw	r24, r22
    7310:	f8 01       	movw	r30, r16
    7312:	91 83       	std	Z+1, r25	; 0x01
    7314:	80 83       	st	Z, r24
    7316:	ce 01       	movw	r24, r28
    7318:	87 55       	subi	r24, 0x57	; 87
    731a:	9f 4f       	sbci	r25, 0xFF	; 255
    731c:	9e 01       	movw	r18, r28
    731e:	2b 55       	subi	r18, 0x5B	; 91
    7320:	3f 4f       	sbci	r19, 0xFF	; 255
    7322:	f9 01       	movw	r30, r18
    7324:	20 81       	ld	r18, Z
    7326:	31 81       	ldd	r19, Z+1	; 0x01
    7328:	fc 01       	movw	r30, r24
    732a:	31 83       	std	Z+1, r19	; 0x01
    732c:	20 83       	st	Z, r18
    732e:	ce 01       	movw	r24, r28
    7330:	87 55       	subi	r24, 0x57	; 87
    7332:	9f 4f       	sbci	r25, 0xFF	; 255
    7334:	fc 01       	movw	r30, r24
    7336:	80 81       	ld	r24, Z
    7338:	91 81       	ldd	r25, Z+1	; 0x01
    733a:	8c 01       	movw	r16, r24
    733c:	c8 01       	movw	r24, r16
    733e:	01 97       	sbiw	r24, 0x01	; 1
    7340:	f1 f7       	brne	.-4      	; 0x733e <pick_drop+0x124c>
    7342:	8c 01       	movw	r16, r24
    7344:	ce 01       	movw	r24, r28
    7346:	87 55       	subi	r24, 0x57	; 87
    7348:	9f 4f       	sbci	r25, 0xFF	; 255
    734a:	fc 01       	movw	r30, r24
    734c:	11 83       	std	Z+1, r17	; 0x01
    734e:	00 83       	st	Z, r16
					_delay_ms(50);
					forward_mm(15);
    7350:	8f e0       	ldi	r24, 0x0F	; 15
    7352:	90 e0       	ldi	r25, 0x00	; 0
    7354:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7358:	9e 01       	movw	r18, r28
    735a:	25 55       	subi	r18, 0x55	; 85
    735c:	3f 4f       	sbci	r19, 0xFF	; 255
    735e:	80 e0       	ldi	r24, 0x00	; 0
    7360:	90 e0       	ldi	r25, 0x00	; 0
    7362:	a0 ea       	ldi	r26, 0xA0	; 160
    7364:	b1 e4       	ldi	r27, 0x41	; 65
    7366:	f9 01       	movw	r30, r18
    7368:	80 83       	st	Z, r24
    736a:	91 83       	std	Z+1, r25	; 0x01
    736c:	a2 83       	std	Z+2, r26	; 0x02
    736e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7370:	8e 01       	movw	r16, r28
    7372:	01 55       	subi	r16, 0x51	; 81
    7374:	1f 4f       	sbci	r17, 0xFF	; 255
    7376:	ce 01       	movw	r24, r28
    7378:	85 55       	subi	r24, 0x55	; 85
    737a:	9f 4f       	sbci	r25, 0xFF	; 255
    737c:	fc 01       	movw	r30, r24
    737e:	60 81       	ld	r22, Z
    7380:	71 81       	ldd	r23, Z+1	; 0x01
    7382:	82 81       	ldd	r24, Z+2	; 0x02
    7384:	93 81       	ldd	r25, Z+3	; 0x03
    7386:	26 e6       	ldi	r18, 0x66	; 102
    7388:	36 e6       	ldi	r19, 0x66	; 102
    738a:	46 e6       	ldi	r20, 0x66	; 102
    738c:	55 e4       	ldi	r21, 0x45	; 69
    738e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	f8 01       	movw	r30, r16
    7398:	80 83       	st	Z, r24
    739a:	91 83       	std	Z+1, r25	; 0x01
    739c:	a2 83       	std	Z+2, r26	; 0x02
    739e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    73a0:	ce 01       	movw	r24, r28
    73a2:	81 55       	subi	r24, 0x51	; 81
    73a4:	9f 4f       	sbci	r25, 0xFF	; 255
    73a6:	11 e0       	ldi	r17, 0x01	; 1
    73a8:	fc 01       	movw	r30, r24
    73aa:	60 81       	ld	r22, Z
    73ac:	71 81       	ldd	r23, Z+1	; 0x01
    73ae:	82 81       	ldd	r24, Z+2	; 0x02
    73b0:	93 81       	ldd	r25, Z+3	; 0x03
    73b2:	20 e0       	ldi	r18, 0x00	; 0
    73b4:	30 e0       	ldi	r19, 0x00	; 0
    73b6:	40 e8       	ldi	r20, 0x80	; 128
    73b8:	5f e3       	ldi	r21, 0x3F	; 63
    73ba:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    73be:	88 23       	and	r24, r24
    73c0:	0c f0       	brlt	.+2      	; 0x73c4 <pick_drop+0x12d2>
    73c2:	10 e0       	ldi	r17, 0x00	; 0
    73c4:	11 23       	and	r17, r17
    73c6:	49 f0       	breq	.+18     	; 0x73da <pick_drop+0x12e8>
		__ticks = 1;
    73c8:	ce 01       	movw	r24, r28
    73ca:	8d 54       	subi	r24, 0x4D	; 77
    73cc:	9f 4f       	sbci	r25, 0xFF	; 255
    73ce:	21 e0       	ldi	r18, 0x01	; 1
    73d0:	30 e0       	ldi	r19, 0x00	; 0
    73d2:	fc 01       	movw	r30, r24
    73d4:	31 83       	std	Z+1, r19	; 0x01
    73d6:	20 83       	st	Z, r18
    73d8:	74 c0       	rjmp	.+232    	; 0x74c2 <pick_drop+0x13d0>
	else if (__tmp > 65535)
    73da:	ce 01       	movw	r24, r28
    73dc:	81 55       	subi	r24, 0x51	; 81
    73de:	9f 4f       	sbci	r25, 0xFF	; 255
    73e0:	11 e0       	ldi	r17, 0x01	; 1
    73e2:	fc 01       	movw	r30, r24
    73e4:	60 81       	ld	r22, Z
    73e6:	71 81       	ldd	r23, Z+1	; 0x01
    73e8:	82 81       	ldd	r24, Z+2	; 0x02
    73ea:	93 81       	ldd	r25, Z+3	; 0x03
    73ec:	20 e0       	ldi	r18, 0x00	; 0
    73ee:	3f ef       	ldi	r19, 0xFF	; 255
    73f0:	4f e7       	ldi	r20, 0x7F	; 127
    73f2:	57 e4       	ldi	r21, 0x47	; 71
    73f4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    73f8:	18 16       	cp	r1, r24
    73fa:	0c f0       	brlt	.+2      	; 0x73fe <pick_drop+0x130c>
    73fc:	10 e0       	ldi	r17, 0x00	; 0
    73fe:	11 23       	and	r17, r17
    7400:	09 f4       	brne	.+2      	; 0x7404 <pick_drop+0x1312>
    7402:	4d c0       	rjmp	.+154    	; 0x749e <pick_drop+0x13ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7404:	ce 01       	movw	r24, r28
    7406:	85 55       	subi	r24, 0x55	; 85
    7408:	9f 4f       	sbci	r25, 0xFF	; 255
    740a:	fc 01       	movw	r30, r24
    740c:	60 81       	ld	r22, Z
    740e:	71 81       	ldd	r23, Z+1	; 0x01
    7410:	82 81       	ldd	r24, Z+2	; 0x02
    7412:	93 81       	ldd	r25, Z+3	; 0x03
    7414:	20 e0       	ldi	r18, 0x00	; 0
    7416:	30 e0       	ldi	r19, 0x00	; 0
    7418:	40 e2       	ldi	r20, 0x20	; 32
    741a:	51 e4       	ldi	r21, 0x41	; 65
    741c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7420:	dc 01       	movw	r26, r24
    7422:	cb 01       	movw	r24, r22
    7424:	8e 01       	movw	r16, r28
    7426:	0d 54       	subi	r16, 0x4D	; 77
    7428:	1f 4f       	sbci	r17, 0xFF	; 255
    742a:	bc 01       	movw	r22, r24
    742c:	cd 01       	movw	r24, r26
    742e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7432:	dc 01       	movw	r26, r24
    7434:	cb 01       	movw	r24, r22
    7436:	f8 01       	movw	r30, r16
    7438:	91 83       	std	Z+1, r25	; 0x01
    743a:	80 83       	st	Z, r24
    743c:	27 c0       	rjmp	.+78     	; 0x748c <pick_drop+0x139a>
    743e:	ce 01       	movw	r24, r28
    7440:	8b 54       	subi	r24, 0x4B	; 75
    7442:	9f 4f       	sbci	r25, 0xFF	; 255
    7444:	20 e7       	ldi	r18, 0x70	; 112
    7446:	31 e0       	ldi	r19, 0x01	; 1
    7448:	fc 01       	movw	r30, r24
    744a:	31 83       	std	Z+1, r19	; 0x01
    744c:	20 83       	st	Z, r18
    744e:	ce 01       	movw	r24, r28
    7450:	8b 54       	subi	r24, 0x4B	; 75
    7452:	9f 4f       	sbci	r25, 0xFF	; 255
    7454:	fc 01       	movw	r30, r24
    7456:	80 81       	ld	r24, Z
    7458:	91 81       	ldd	r25, Z+1	; 0x01
    745a:	8c 01       	movw	r16, r24
    745c:	c8 01       	movw	r24, r16
    745e:	01 97       	sbiw	r24, 0x01	; 1
    7460:	f1 f7       	brne	.-4      	; 0x745e <pick_drop+0x136c>
    7462:	8c 01       	movw	r16, r24
    7464:	ce 01       	movw	r24, r28
    7466:	8b 54       	subi	r24, 0x4B	; 75
    7468:	9f 4f       	sbci	r25, 0xFF	; 255
    746a:	fc 01       	movw	r30, r24
    746c:	11 83       	std	Z+1, r17	; 0x01
    746e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7470:	ce 01       	movw	r24, r28
    7472:	8d 54       	subi	r24, 0x4D	; 77
    7474:	9f 4f       	sbci	r25, 0xFF	; 255
    7476:	9e 01       	movw	r18, r28
    7478:	2d 54       	subi	r18, 0x4D	; 77
    747a:	3f 4f       	sbci	r19, 0xFF	; 255
    747c:	f9 01       	movw	r30, r18
    747e:	20 81       	ld	r18, Z
    7480:	31 81       	ldd	r19, Z+1	; 0x01
    7482:	21 50       	subi	r18, 0x01	; 1
    7484:	30 40       	sbci	r19, 0x00	; 0
    7486:	fc 01       	movw	r30, r24
    7488:	31 83       	std	Z+1, r19	; 0x01
    748a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    748c:	ce 01       	movw	r24, r28
    748e:	8d 54       	subi	r24, 0x4D	; 77
    7490:	9f 4f       	sbci	r25, 0xFF	; 255
    7492:	fc 01       	movw	r30, r24
    7494:	80 81       	ld	r24, Z
    7496:	91 81       	ldd	r25, Z+1	; 0x01
    7498:	00 97       	sbiw	r24, 0x00	; 0
    749a:	89 f6       	brne	.-94     	; 0x743e <pick_drop+0x134c>
    749c:	2f c0       	rjmp	.+94     	; 0x74fc <pick_drop+0x140a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    749e:	8e 01       	movw	r16, r28
    74a0:	0d 54       	subi	r16, 0x4D	; 77
    74a2:	1f 4f       	sbci	r17, 0xFF	; 255
    74a4:	ce 01       	movw	r24, r28
    74a6:	81 55       	subi	r24, 0x51	; 81
    74a8:	9f 4f       	sbci	r25, 0xFF	; 255
    74aa:	fc 01       	movw	r30, r24
    74ac:	60 81       	ld	r22, Z
    74ae:	71 81       	ldd	r23, Z+1	; 0x01
    74b0:	82 81       	ldd	r24, Z+2	; 0x02
    74b2:	93 81       	ldd	r25, Z+3	; 0x03
    74b4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    74b8:	dc 01       	movw	r26, r24
    74ba:	cb 01       	movw	r24, r22
    74bc:	f8 01       	movw	r30, r16
    74be:	91 83       	std	Z+1, r25	; 0x01
    74c0:	80 83       	st	Z, r24
    74c2:	ce 01       	movw	r24, r28
    74c4:	89 54       	subi	r24, 0x49	; 73
    74c6:	9f 4f       	sbci	r25, 0xFF	; 255
    74c8:	9e 01       	movw	r18, r28
    74ca:	2d 54       	subi	r18, 0x4D	; 77
    74cc:	3f 4f       	sbci	r19, 0xFF	; 255
    74ce:	f9 01       	movw	r30, r18
    74d0:	20 81       	ld	r18, Z
    74d2:	31 81       	ldd	r19, Z+1	; 0x01
    74d4:	fc 01       	movw	r30, r24
    74d6:	31 83       	std	Z+1, r19	; 0x01
    74d8:	20 83       	st	Z, r18
    74da:	ce 01       	movw	r24, r28
    74dc:	89 54       	subi	r24, 0x49	; 73
    74de:	9f 4f       	sbci	r25, 0xFF	; 255
    74e0:	fc 01       	movw	r30, r24
    74e2:	80 81       	ld	r24, Z
    74e4:	91 81       	ldd	r25, Z+1	; 0x01
    74e6:	8c 01       	movw	r16, r24
    74e8:	c8 01       	movw	r24, r16
    74ea:	01 97       	sbiw	r24, 0x01	; 1
    74ec:	f1 f7       	brne	.-4      	; 0x74ea <pick_drop+0x13f8>
    74ee:	8c 01       	movw	r16, r24
    74f0:	ce 01       	movw	r24, r28
    74f2:	89 54       	subi	r24, 0x49	; 73
    74f4:	9f 4f       	sbci	r25, 0xFF	; 255
    74f6:	fc 01       	movw	r30, r24
    74f8:	11 83       	std	Z+1, r17	; 0x01
    74fa:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    74fc:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    7500:	9e 01       	movw	r18, r28
    7502:	27 54       	subi	r18, 0x47	; 71
    7504:	3f 4f       	sbci	r19, 0xFF	; 255
    7506:	80 e0       	ldi	r24, 0x00	; 0
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	a8 ec       	ldi	r26, 0xC8	; 200
    750c:	b2 e4       	ldi	r27, 0x42	; 66
    750e:	f9 01       	movw	r30, r18
    7510:	80 83       	st	Z, r24
    7512:	91 83       	std	Z+1, r25	; 0x01
    7514:	a2 83       	std	Z+2, r26	; 0x02
    7516:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7518:	8e 01       	movw	r16, r28
    751a:	03 54       	subi	r16, 0x43	; 67
    751c:	1f 4f       	sbci	r17, 0xFF	; 255
    751e:	ce 01       	movw	r24, r28
    7520:	87 54       	subi	r24, 0x47	; 71
    7522:	9f 4f       	sbci	r25, 0xFF	; 255
    7524:	fc 01       	movw	r30, r24
    7526:	60 81       	ld	r22, Z
    7528:	71 81       	ldd	r23, Z+1	; 0x01
    752a:	82 81       	ldd	r24, Z+2	; 0x02
    752c:	93 81       	ldd	r25, Z+3	; 0x03
    752e:	26 e6       	ldi	r18, 0x66	; 102
    7530:	36 e6       	ldi	r19, 0x66	; 102
    7532:	46 e6       	ldi	r20, 0x66	; 102
    7534:	55 e4       	ldi	r21, 0x45	; 69
    7536:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    753a:	dc 01       	movw	r26, r24
    753c:	cb 01       	movw	r24, r22
    753e:	f8 01       	movw	r30, r16
    7540:	80 83       	st	Z, r24
    7542:	91 83       	std	Z+1, r25	; 0x01
    7544:	a2 83       	std	Z+2, r26	; 0x02
    7546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7548:	ce 01       	movw	r24, r28
    754a:	83 54       	subi	r24, 0x43	; 67
    754c:	9f 4f       	sbci	r25, 0xFF	; 255
    754e:	11 e0       	ldi	r17, 0x01	; 1
    7550:	fc 01       	movw	r30, r24
    7552:	60 81       	ld	r22, Z
    7554:	71 81       	ldd	r23, Z+1	; 0x01
    7556:	82 81       	ldd	r24, Z+2	; 0x02
    7558:	93 81       	ldd	r25, Z+3	; 0x03
    755a:	20 e0       	ldi	r18, 0x00	; 0
    755c:	30 e0       	ldi	r19, 0x00	; 0
    755e:	40 e8       	ldi	r20, 0x80	; 128
    7560:	5f e3       	ldi	r21, 0x3F	; 63
    7562:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7566:	88 23       	and	r24, r24
    7568:	0c f0       	brlt	.+2      	; 0x756c <pick_drop+0x147a>
    756a:	10 e0       	ldi	r17, 0x00	; 0
    756c:	11 23       	and	r17, r17
    756e:	49 f0       	breq	.+18     	; 0x7582 <pick_drop+0x1490>
		__ticks = 1;
    7570:	ce 01       	movw	r24, r28
    7572:	8f 53       	subi	r24, 0x3F	; 63
    7574:	9f 4f       	sbci	r25, 0xFF	; 255
    7576:	21 e0       	ldi	r18, 0x01	; 1
    7578:	30 e0       	ldi	r19, 0x00	; 0
    757a:	fc 01       	movw	r30, r24
    757c:	31 83       	std	Z+1, r19	; 0x01
    757e:	20 83       	st	Z, r18
    7580:	74 c0       	rjmp	.+232    	; 0x766a <pick_drop+0x1578>
	else if (__tmp > 65535)
    7582:	ce 01       	movw	r24, r28
    7584:	83 54       	subi	r24, 0x43	; 67
    7586:	9f 4f       	sbci	r25, 0xFF	; 255
    7588:	11 e0       	ldi	r17, 0x01	; 1
    758a:	fc 01       	movw	r30, r24
    758c:	60 81       	ld	r22, Z
    758e:	71 81       	ldd	r23, Z+1	; 0x01
    7590:	82 81       	ldd	r24, Z+2	; 0x02
    7592:	93 81       	ldd	r25, Z+3	; 0x03
    7594:	20 e0       	ldi	r18, 0x00	; 0
    7596:	3f ef       	ldi	r19, 0xFF	; 255
    7598:	4f e7       	ldi	r20, 0x7F	; 127
    759a:	57 e4       	ldi	r21, 0x47	; 71
    759c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    75a0:	18 16       	cp	r1, r24
    75a2:	0c f0       	brlt	.+2      	; 0x75a6 <pick_drop+0x14b4>
    75a4:	10 e0       	ldi	r17, 0x00	; 0
    75a6:	11 23       	and	r17, r17
    75a8:	09 f4       	brne	.+2      	; 0x75ac <pick_drop+0x14ba>
    75aa:	4d c0       	rjmp	.+154    	; 0x7646 <pick_drop+0x1554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75ac:	ce 01       	movw	r24, r28
    75ae:	87 54       	subi	r24, 0x47	; 71
    75b0:	9f 4f       	sbci	r25, 0xFF	; 255
    75b2:	fc 01       	movw	r30, r24
    75b4:	60 81       	ld	r22, Z
    75b6:	71 81       	ldd	r23, Z+1	; 0x01
    75b8:	82 81       	ldd	r24, Z+2	; 0x02
    75ba:	93 81       	ldd	r25, Z+3	; 0x03
    75bc:	20 e0       	ldi	r18, 0x00	; 0
    75be:	30 e0       	ldi	r19, 0x00	; 0
    75c0:	40 e2       	ldi	r20, 0x20	; 32
    75c2:	51 e4       	ldi	r21, 0x41	; 65
    75c4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    75c8:	dc 01       	movw	r26, r24
    75ca:	cb 01       	movw	r24, r22
    75cc:	8e 01       	movw	r16, r28
    75ce:	0f 53       	subi	r16, 0x3F	; 63
    75d0:	1f 4f       	sbci	r17, 0xFF	; 255
    75d2:	bc 01       	movw	r22, r24
    75d4:	cd 01       	movw	r24, r26
    75d6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    75da:	dc 01       	movw	r26, r24
    75dc:	cb 01       	movw	r24, r22
    75de:	f8 01       	movw	r30, r16
    75e0:	91 83       	std	Z+1, r25	; 0x01
    75e2:	80 83       	st	Z, r24
    75e4:	27 c0       	rjmp	.+78     	; 0x7634 <pick_drop+0x1542>
    75e6:	ce 01       	movw	r24, r28
    75e8:	8d 53       	subi	r24, 0x3D	; 61
    75ea:	9f 4f       	sbci	r25, 0xFF	; 255
    75ec:	20 e7       	ldi	r18, 0x70	; 112
    75ee:	31 e0       	ldi	r19, 0x01	; 1
    75f0:	fc 01       	movw	r30, r24
    75f2:	31 83       	std	Z+1, r19	; 0x01
    75f4:	20 83       	st	Z, r18
    75f6:	ce 01       	movw	r24, r28
    75f8:	8d 53       	subi	r24, 0x3D	; 61
    75fa:	9f 4f       	sbci	r25, 0xFF	; 255
    75fc:	fc 01       	movw	r30, r24
    75fe:	80 81       	ld	r24, Z
    7600:	91 81       	ldd	r25, Z+1	; 0x01
    7602:	8c 01       	movw	r16, r24
    7604:	c8 01       	movw	r24, r16
    7606:	01 97       	sbiw	r24, 0x01	; 1
    7608:	f1 f7       	brne	.-4      	; 0x7606 <pick_drop+0x1514>
    760a:	8c 01       	movw	r16, r24
    760c:	ce 01       	movw	r24, r28
    760e:	8d 53       	subi	r24, 0x3D	; 61
    7610:	9f 4f       	sbci	r25, 0xFF	; 255
    7612:	fc 01       	movw	r30, r24
    7614:	11 83       	std	Z+1, r17	; 0x01
    7616:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7618:	ce 01       	movw	r24, r28
    761a:	8f 53       	subi	r24, 0x3F	; 63
    761c:	9f 4f       	sbci	r25, 0xFF	; 255
    761e:	9e 01       	movw	r18, r28
    7620:	2f 53       	subi	r18, 0x3F	; 63
    7622:	3f 4f       	sbci	r19, 0xFF	; 255
    7624:	f9 01       	movw	r30, r18
    7626:	20 81       	ld	r18, Z
    7628:	31 81       	ldd	r19, Z+1	; 0x01
    762a:	21 50       	subi	r18, 0x01	; 1
    762c:	30 40       	sbci	r19, 0x00	; 0
    762e:	fc 01       	movw	r30, r24
    7630:	31 83       	std	Z+1, r19	; 0x01
    7632:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7634:	ce 01       	movw	r24, r28
    7636:	8f 53       	subi	r24, 0x3F	; 63
    7638:	9f 4f       	sbci	r25, 0xFF	; 255
    763a:	fc 01       	movw	r30, r24
    763c:	80 81       	ld	r24, Z
    763e:	91 81       	ldd	r25, Z+1	; 0x01
    7640:	00 97       	sbiw	r24, 0x00	; 0
    7642:	89 f6       	brne	.-94     	; 0x75e6 <pick_drop+0x14f4>
    7644:	2f c0       	rjmp	.+94     	; 0x76a4 <pick_drop+0x15b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7646:	8e 01       	movw	r16, r28
    7648:	0f 53       	subi	r16, 0x3F	; 63
    764a:	1f 4f       	sbci	r17, 0xFF	; 255
    764c:	ce 01       	movw	r24, r28
    764e:	83 54       	subi	r24, 0x43	; 67
    7650:	9f 4f       	sbci	r25, 0xFF	; 255
    7652:	fc 01       	movw	r30, r24
    7654:	60 81       	ld	r22, Z
    7656:	71 81       	ldd	r23, Z+1	; 0x01
    7658:	82 81       	ldd	r24, Z+2	; 0x02
    765a:	93 81       	ldd	r25, Z+3	; 0x03
    765c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7660:	dc 01       	movw	r26, r24
    7662:	cb 01       	movw	r24, r22
    7664:	f8 01       	movw	r30, r16
    7666:	91 83       	std	Z+1, r25	; 0x01
    7668:	80 83       	st	Z, r24
    766a:	ce 01       	movw	r24, r28
    766c:	8b 53       	subi	r24, 0x3B	; 59
    766e:	9f 4f       	sbci	r25, 0xFF	; 255
    7670:	9e 01       	movw	r18, r28
    7672:	2f 53       	subi	r18, 0x3F	; 63
    7674:	3f 4f       	sbci	r19, 0xFF	; 255
    7676:	f9 01       	movw	r30, r18
    7678:	20 81       	ld	r18, Z
    767a:	31 81       	ldd	r19, Z+1	; 0x01
    767c:	fc 01       	movw	r30, r24
    767e:	31 83       	std	Z+1, r19	; 0x01
    7680:	20 83       	st	Z, r18
    7682:	ce 01       	movw	r24, r28
    7684:	8b 53       	subi	r24, 0x3B	; 59
    7686:	9f 4f       	sbci	r25, 0xFF	; 255
    7688:	fc 01       	movw	r30, r24
    768a:	80 81       	ld	r24, Z
    768c:	91 81       	ldd	r25, Z+1	; 0x01
    768e:	8c 01       	movw	r16, r24
    7690:	c8 01       	movw	r24, r16
    7692:	01 97       	sbiw	r24, 0x01	; 1
    7694:	f1 f7       	brne	.-4      	; 0x7692 <pick_drop+0x15a0>
    7696:	8c 01       	movw	r16, r24
    7698:	ce 01       	movw	r24, r28
    769a:	8b 53       	subi	r24, 0x3B	; 59
    769c:	9f 4f       	sbci	r25, 0xFF	; 255
    769e:	fc 01       	movw	r30, r24
    76a0:	11 83       	std	Z+1, r17	; 0x01
    76a2:	00 83       	st	Z, r16
					_delay_ms(100);
					correct_right();
    76a4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
					back_mm(pdback);
    76a8:	89 81       	ldd	r24, Y+1	; 0x01
    76aa:	9a 81       	ldd	r25, Y+2	; 0x02
    76ac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    76b0:	9e 01       	movw	r18, r28
    76b2:	29 53       	subi	r18, 0x39	; 57
    76b4:	3f 4f       	sbci	r19, 0xFF	; 255
    76b6:	80 e0       	ldi	r24, 0x00	; 0
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	a0 ea       	ldi	r26, 0xA0	; 160
    76bc:	b1 e4       	ldi	r27, 0x41	; 65
    76be:	f9 01       	movw	r30, r18
    76c0:	80 83       	st	Z, r24
    76c2:	91 83       	std	Z+1, r25	; 0x01
    76c4:	a2 83       	std	Z+2, r26	; 0x02
    76c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    76c8:	8e 01       	movw	r16, r28
    76ca:	05 53       	subi	r16, 0x35	; 53
    76cc:	1f 4f       	sbci	r17, 0xFF	; 255
    76ce:	ce 01       	movw	r24, r28
    76d0:	89 53       	subi	r24, 0x39	; 57
    76d2:	9f 4f       	sbci	r25, 0xFF	; 255
    76d4:	fc 01       	movw	r30, r24
    76d6:	60 81       	ld	r22, Z
    76d8:	71 81       	ldd	r23, Z+1	; 0x01
    76da:	82 81       	ldd	r24, Z+2	; 0x02
    76dc:	93 81       	ldd	r25, Z+3	; 0x03
    76de:	26 e6       	ldi	r18, 0x66	; 102
    76e0:	36 e6       	ldi	r19, 0x66	; 102
    76e2:	46 e6       	ldi	r20, 0x66	; 102
    76e4:	55 e4       	ldi	r21, 0x45	; 69
    76e6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    76ea:	dc 01       	movw	r26, r24
    76ec:	cb 01       	movw	r24, r22
    76ee:	f8 01       	movw	r30, r16
    76f0:	80 83       	st	Z, r24
    76f2:	91 83       	std	Z+1, r25	; 0x01
    76f4:	a2 83       	std	Z+2, r26	; 0x02
    76f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    76f8:	ce 01       	movw	r24, r28
    76fa:	85 53       	subi	r24, 0x35	; 53
    76fc:	9f 4f       	sbci	r25, 0xFF	; 255
    76fe:	11 e0       	ldi	r17, 0x01	; 1
    7700:	fc 01       	movw	r30, r24
    7702:	60 81       	ld	r22, Z
    7704:	71 81       	ldd	r23, Z+1	; 0x01
    7706:	82 81       	ldd	r24, Z+2	; 0x02
    7708:	93 81       	ldd	r25, Z+3	; 0x03
    770a:	20 e0       	ldi	r18, 0x00	; 0
    770c:	30 e0       	ldi	r19, 0x00	; 0
    770e:	40 e8       	ldi	r20, 0x80	; 128
    7710:	5f e3       	ldi	r21, 0x3F	; 63
    7712:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7716:	88 23       	and	r24, r24
    7718:	0c f0       	brlt	.+2      	; 0x771c <pick_drop+0x162a>
    771a:	10 e0       	ldi	r17, 0x00	; 0
    771c:	11 23       	and	r17, r17
    771e:	49 f0       	breq	.+18     	; 0x7732 <pick_drop+0x1640>
		__ticks = 1;
    7720:	ce 01       	movw	r24, r28
    7722:	81 53       	subi	r24, 0x31	; 49
    7724:	9f 4f       	sbci	r25, 0xFF	; 255
    7726:	21 e0       	ldi	r18, 0x01	; 1
    7728:	30 e0       	ldi	r19, 0x00	; 0
    772a:	fc 01       	movw	r30, r24
    772c:	31 83       	std	Z+1, r19	; 0x01
    772e:	20 83       	st	Z, r18
    7730:	74 c0       	rjmp	.+232    	; 0x781a <pick_drop+0x1728>
	else if (__tmp > 65535)
    7732:	ce 01       	movw	r24, r28
    7734:	85 53       	subi	r24, 0x35	; 53
    7736:	9f 4f       	sbci	r25, 0xFF	; 255
    7738:	11 e0       	ldi	r17, 0x01	; 1
    773a:	fc 01       	movw	r30, r24
    773c:	60 81       	ld	r22, Z
    773e:	71 81       	ldd	r23, Z+1	; 0x01
    7740:	82 81       	ldd	r24, Z+2	; 0x02
    7742:	93 81       	ldd	r25, Z+3	; 0x03
    7744:	20 e0       	ldi	r18, 0x00	; 0
    7746:	3f ef       	ldi	r19, 0xFF	; 255
    7748:	4f e7       	ldi	r20, 0x7F	; 127
    774a:	57 e4       	ldi	r21, 0x47	; 71
    774c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    7750:	18 16       	cp	r1, r24
    7752:	0c f0       	brlt	.+2      	; 0x7756 <pick_drop+0x1664>
    7754:	10 e0       	ldi	r17, 0x00	; 0
    7756:	11 23       	and	r17, r17
    7758:	09 f4       	brne	.+2      	; 0x775c <pick_drop+0x166a>
    775a:	4d c0       	rjmp	.+154    	; 0x77f6 <pick_drop+0x1704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    775c:	ce 01       	movw	r24, r28
    775e:	89 53       	subi	r24, 0x39	; 57
    7760:	9f 4f       	sbci	r25, 0xFF	; 255
    7762:	fc 01       	movw	r30, r24
    7764:	60 81       	ld	r22, Z
    7766:	71 81       	ldd	r23, Z+1	; 0x01
    7768:	82 81       	ldd	r24, Z+2	; 0x02
    776a:	93 81       	ldd	r25, Z+3	; 0x03
    776c:	20 e0       	ldi	r18, 0x00	; 0
    776e:	30 e0       	ldi	r19, 0x00	; 0
    7770:	40 e2       	ldi	r20, 0x20	; 32
    7772:	51 e4       	ldi	r21, 0x41	; 65
    7774:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7778:	dc 01       	movw	r26, r24
    777a:	cb 01       	movw	r24, r22
    777c:	8e 01       	movw	r16, r28
    777e:	01 53       	subi	r16, 0x31	; 49
    7780:	1f 4f       	sbci	r17, 0xFF	; 255
    7782:	bc 01       	movw	r22, r24
    7784:	cd 01       	movw	r24, r26
    7786:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    778a:	dc 01       	movw	r26, r24
    778c:	cb 01       	movw	r24, r22
    778e:	f8 01       	movw	r30, r16
    7790:	91 83       	std	Z+1, r25	; 0x01
    7792:	80 83       	st	Z, r24
    7794:	27 c0       	rjmp	.+78     	; 0x77e4 <pick_drop+0x16f2>
    7796:	ce 01       	movw	r24, r28
    7798:	8f 52       	subi	r24, 0x2F	; 47
    779a:	9f 4f       	sbci	r25, 0xFF	; 255
    779c:	20 e7       	ldi	r18, 0x70	; 112
    779e:	31 e0       	ldi	r19, 0x01	; 1
    77a0:	fc 01       	movw	r30, r24
    77a2:	31 83       	std	Z+1, r19	; 0x01
    77a4:	20 83       	st	Z, r18
    77a6:	ce 01       	movw	r24, r28
    77a8:	8f 52       	subi	r24, 0x2F	; 47
    77aa:	9f 4f       	sbci	r25, 0xFF	; 255
    77ac:	fc 01       	movw	r30, r24
    77ae:	80 81       	ld	r24, Z
    77b0:	91 81       	ldd	r25, Z+1	; 0x01
    77b2:	8c 01       	movw	r16, r24
    77b4:	c8 01       	movw	r24, r16
    77b6:	01 97       	sbiw	r24, 0x01	; 1
    77b8:	f1 f7       	brne	.-4      	; 0x77b6 <pick_drop+0x16c4>
    77ba:	8c 01       	movw	r16, r24
    77bc:	ce 01       	movw	r24, r28
    77be:	8f 52       	subi	r24, 0x2F	; 47
    77c0:	9f 4f       	sbci	r25, 0xFF	; 255
    77c2:	fc 01       	movw	r30, r24
    77c4:	11 83       	std	Z+1, r17	; 0x01
    77c6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77c8:	ce 01       	movw	r24, r28
    77ca:	81 53       	subi	r24, 0x31	; 49
    77cc:	9f 4f       	sbci	r25, 0xFF	; 255
    77ce:	9e 01       	movw	r18, r28
    77d0:	21 53       	subi	r18, 0x31	; 49
    77d2:	3f 4f       	sbci	r19, 0xFF	; 255
    77d4:	f9 01       	movw	r30, r18
    77d6:	20 81       	ld	r18, Z
    77d8:	31 81       	ldd	r19, Z+1	; 0x01
    77da:	21 50       	subi	r18, 0x01	; 1
    77dc:	30 40       	sbci	r19, 0x00	; 0
    77de:	fc 01       	movw	r30, r24
    77e0:	31 83       	std	Z+1, r19	; 0x01
    77e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77e4:	ce 01       	movw	r24, r28
    77e6:	81 53       	subi	r24, 0x31	; 49
    77e8:	9f 4f       	sbci	r25, 0xFF	; 255
    77ea:	fc 01       	movw	r30, r24
    77ec:	80 81       	ld	r24, Z
    77ee:	91 81       	ldd	r25, Z+1	; 0x01
    77f0:	00 97       	sbiw	r24, 0x00	; 0
    77f2:	89 f6       	brne	.-94     	; 0x7796 <pick_drop+0x16a4>
    77f4:	be c2       	rjmp	.+1404   	; 0x7d72 <pick_drop+0x1c80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77f6:	8e 01       	movw	r16, r28
    77f8:	01 53       	subi	r16, 0x31	; 49
    77fa:	1f 4f       	sbci	r17, 0xFF	; 255
    77fc:	ce 01       	movw	r24, r28
    77fe:	85 53       	subi	r24, 0x35	; 53
    7800:	9f 4f       	sbci	r25, 0xFF	; 255
    7802:	fc 01       	movw	r30, r24
    7804:	60 81       	ld	r22, Z
    7806:	71 81       	ldd	r23, Z+1	; 0x01
    7808:	82 81       	ldd	r24, Z+2	; 0x02
    780a:	93 81       	ldd	r25, Z+3	; 0x03
    780c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7810:	dc 01       	movw	r26, r24
    7812:	cb 01       	movw	r24, r22
    7814:	f8 01       	movw	r30, r16
    7816:	91 83       	std	Z+1, r25	; 0x01
    7818:	80 83       	st	Z, r24
    781a:	ce 01       	movw	r24, r28
    781c:	8d 52       	subi	r24, 0x2D	; 45
    781e:	9f 4f       	sbci	r25, 0xFF	; 255
    7820:	9e 01       	movw	r18, r28
    7822:	21 53       	subi	r18, 0x31	; 49
    7824:	3f 4f       	sbci	r19, 0xFF	; 255
    7826:	f9 01       	movw	r30, r18
    7828:	20 81       	ld	r18, Z
    782a:	31 81       	ldd	r19, Z+1	; 0x01
    782c:	fc 01       	movw	r30, r24
    782e:	31 83       	std	Z+1, r19	; 0x01
    7830:	20 83       	st	Z, r18
    7832:	ce 01       	movw	r24, r28
    7834:	8d 52       	subi	r24, 0x2D	; 45
    7836:	9f 4f       	sbci	r25, 0xFF	; 255
    7838:	fc 01       	movw	r30, r24
    783a:	80 81       	ld	r24, Z
    783c:	91 81       	ldd	r25, Z+1	; 0x01
    783e:	8c 01       	movw	r16, r24
    7840:	c8 01       	movw	r24, r16
    7842:	01 97       	sbiw	r24, 0x01	; 1
    7844:	f1 f7       	brne	.-4      	; 0x7842 <pick_drop+0x1750>
    7846:	8c 01       	movw	r16, r24
    7848:	ce 01       	movw	r24, r28
    784a:	8d 52       	subi	r24, 0x2D	; 45
    784c:	9f 4f       	sbci	r25, 0xFF	; 255
    784e:	fc 01       	movw	r30, r24
    7850:	11 83       	std	Z+1, r17	; 0x01
    7852:	00 83       	st	Z, r16
    7854:	8e c2       	rjmp	.+1308   	; 0x7d72 <pick_drop+0x1c80>
					_delay_ms(20);
				}
				else if(master_path[node-1] == 'R')
    7856:	80 91 4f 03 	lds	r24, 0x034F
    785a:	90 91 50 03 	lds	r25, 0x0350
    785e:	01 97       	sbiw	r24, 0x01	; 1
    7860:	8d 5a       	subi	r24, 0xAD	; 173
    7862:	9c 4f       	sbci	r25, 0xFC	; 252
    7864:	fc 01       	movw	r30, r24
    7866:	80 81       	ld	r24, Z
    7868:	82 35       	cpi	r24, 0x52	; 82
    786a:	09 f0       	breq	.+2      	; 0x786e <pick_drop+0x177c>
    786c:	82 c2       	rjmp	.+1284   	; 0x7d72 <pick_drop+0x1c80>
				{
					forward_mm(10);
    786e:	8a e0       	ldi	r24, 0x0A	; 10
    7870:	90 e0       	ldi	r25, 0x00	; 0
    7872:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7876:	9e 01       	movw	r18, r28
    7878:	2b 52       	subi	r18, 0x2B	; 43
    787a:	3f 4f       	sbci	r19, 0xFF	; 255
    787c:	80 e0       	ldi	r24, 0x00	; 0
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	a0 ea       	ldi	r26, 0xA0	; 160
    7882:	b1 e4       	ldi	r27, 0x41	; 65
    7884:	f9 01       	movw	r30, r18
    7886:	80 83       	st	Z, r24
    7888:	91 83       	std	Z+1, r25	; 0x01
    788a:	a2 83       	std	Z+2, r26	; 0x02
    788c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    788e:	8e 01       	movw	r16, r28
    7890:	07 52       	subi	r16, 0x27	; 39
    7892:	1f 4f       	sbci	r17, 0xFF	; 255
    7894:	ce 01       	movw	r24, r28
    7896:	8b 52       	subi	r24, 0x2B	; 43
    7898:	9f 4f       	sbci	r25, 0xFF	; 255
    789a:	fc 01       	movw	r30, r24
    789c:	60 81       	ld	r22, Z
    789e:	71 81       	ldd	r23, Z+1	; 0x01
    78a0:	82 81       	ldd	r24, Z+2	; 0x02
    78a2:	93 81       	ldd	r25, Z+3	; 0x03
    78a4:	26 e6       	ldi	r18, 0x66	; 102
    78a6:	36 e6       	ldi	r19, 0x66	; 102
    78a8:	46 e6       	ldi	r20, 0x66	; 102
    78aa:	55 e4       	ldi	r21, 0x45	; 69
    78ac:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    78b0:	dc 01       	movw	r26, r24
    78b2:	cb 01       	movw	r24, r22
    78b4:	f8 01       	movw	r30, r16
    78b6:	80 83       	st	Z, r24
    78b8:	91 83       	std	Z+1, r25	; 0x01
    78ba:	a2 83       	std	Z+2, r26	; 0x02
    78bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    78be:	ce 01       	movw	r24, r28
    78c0:	87 52       	subi	r24, 0x27	; 39
    78c2:	9f 4f       	sbci	r25, 0xFF	; 255
    78c4:	11 e0       	ldi	r17, 0x01	; 1
    78c6:	fc 01       	movw	r30, r24
    78c8:	60 81       	ld	r22, Z
    78ca:	71 81       	ldd	r23, Z+1	; 0x01
    78cc:	82 81       	ldd	r24, Z+2	; 0x02
    78ce:	93 81       	ldd	r25, Z+3	; 0x03
    78d0:	20 e0       	ldi	r18, 0x00	; 0
    78d2:	30 e0       	ldi	r19, 0x00	; 0
    78d4:	40 e8       	ldi	r20, 0x80	; 128
    78d6:	5f e3       	ldi	r21, 0x3F	; 63
    78d8:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    78dc:	88 23       	and	r24, r24
    78de:	0c f0       	brlt	.+2      	; 0x78e2 <pick_drop+0x17f0>
    78e0:	10 e0       	ldi	r17, 0x00	; 0
    78e2:	11 23       	and	r17, r17
    78e4:	49 f0       	breq	.+18     	; 0x78f8 <pick_drop+0x1806>
		__ticks = 1;
    78e6:	ce 01       	movw	r24, r28
    78e8:	83 52       	subi	r24, 0x23	; 35
    78ea:	9f 4f       	sbci	r25, 0xFF	; 255
    78ec:	21 e0       	ldi	r18, 0x01	; 1
    78ee:	30 e0       	ldi	r19, 0x00	; 0
    78f0:	fc 01       	movw	r30, r24
    78f2:	31 83       	std	Z+1, r19	; 0x01
    78f4:	20 83       	st	Z, r18
    78f6:	74 c0       	rjmp	.+232    	; 0x79e0 <pick_drop+0x18ee>
	else if (__tmp > 65535)
    78f8:	ce 01       	movw	r24, r28
    78fa:	87 52       	subi	r24, 0x27	; 39
    78fc:	9f 4f       	sbci	r25, 0xFF	; 255
    78fe:	11 e0       	ldi	r17, 0x01	; 1
    7900:	fc 01       	movw	r30, r24
    7902:	60 81       	ld	r22, Z
    7904:	71 81       	ldd	r23, Z+1	; 0x01
    7906:	82 81       	ldd	r24, Z+2	; 0x02
    7908:	93 81       	ldd	r25, Z+3	; 0x03
    790a:	20 e0       	ldi	r18, 0x00	; 0
    790c:	3f ef       	ldi	r19, 0xFF	; 255
    790e:	4f e7       	ldi	r20, 0x7F	; 127
    7910:	57 e4       	ldi	r21, 0x47	; 71
    7912:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    7916:	18 16       	cp	r1, r24
    7918:	0c f0       	brlt	.+2      	; 0x791c <pick_drop+0x182a>
    791a:	10 e0       	ldi	r17, 0x00	; 0
    791c:	11 23       	and	r17, r17
    791e:	09 f4       	brne	.+2      	; 0x7922 <pick_drop+0x1830>
    7920:	4d c0       	rjmp	.+154    	; 0x79bc <pick_drop+0x18ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7922:	ce 01       	movw	r24, r28
    7924:	8b 52       	subi	r24, 0x2B	; 43
    7926:	9f 4f       	sbci	r25, 0xFF	; 255
    7928:	fc 01       	movw	r30, r24
    792a:	60 81       	ld	r22, Z
    792c:	71 81       	ldd	r23, Z+1	; 0x01
    792e:	82 81       	ldd	r24, Z+2	; 0x02
    7930:	93 81       	ldd	r25, Z+3	; 0x03
    7932:	20 e0       	ldi	r18, 0x00	; 0
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	40 e2       	ldi	r20, 0x20	; 32
    7938:	51 e4       	ldi	r21, 0x41	; 65
    793a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    793e:	dc 01       	movw	r26, r24
    7940:	cb 01       	movw	r24, r22
    7942:	8e 01       	movw	r16, r28
    7944:	03 52       	subi	r16, 0x23	; 35
    7946:	1f 4f       	sbci	r17, 0xFF	; 255
    7948:	bc 01       	movw	r22, r24
    794a:	cd 01       	movw	r24, r26
    794c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7950:	dc 01       	movw	r26, r24
    7952:	cb 01       	movw	r24, r22
    7954:	f8 01       	movw	r30, r16
    7956:	91 83       	std	Z+1, r25	; 0x01
    7958:	80 83       	st	Z, r24
    795a:	27 c0       	rjmp	.+78     	; 0x79aa <pick_drop+0x18b8>
    795c:	ce 01       	movw	r24, r28
    795e:	81 52       	subi	r24, 0x21	; 33
    7960:	9f 4f       	sbci	r25, 0xFF	; 255
    7962:	20 e7       	ldi	r18, 0x70	; 112
    7964:	31 e0       	ldi	r19, 0x01	; 1
    7966:	fc 01       	movw	r30, r24
    7968:	31 83       	std	Z+1, r19	; 0x01
    796a:	20 83       	st	Z, r18
    796c:	ce 01       	movw	r24, r28
    796e:	81 52       	subi	r24, 0x21	; 33
    7970:	9f 4f       	sbci	r25, 0xFF	; 255
    7972:	fc 01       	movw	r30, r24
    7974:	80 81       	ld	r24, Z
    7976:	91 81       	ldd	r25, Z+1	; 0x01
    7978:	8c 01       	movw	r16, r24
    797a:	c8 01       	movw	r24, r16
    797c:	01 97       	sbiw	r24, 0x01	; 1
    797e:	f1 f7       	brne	.-4      	; 0x797c <pick_drop+0x188a>
    7980:	8c 01       	movw	r16, r24
    7982:	ce 01       	movw	r24, r28
    7984:	81 52       	subi	r24, 0x21	; 33
    7986:	9f 4f       	sbci	r25, 0xFF	; 255
    7988:	fc 01       	movw	r30, r24
    798a:	11 83       	std	Z+1, r17	; 0x01
    798c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    798e:	ce 01       	movw	r24, r28
    7990:	83 52       	subi	r24, 0x23	; 35
    7992:	9f 4f       	sbci	r25, 0xFF	; 255
    7994:	9e 01       	movw	r18, r28
    7996:	23 52       	subi	r18, 0x23	; 35
    7998:	3f 4f       	sbci	r19, 0xFF	; 255
    799a:	f9 01       	movw	r30, r18
    799c:	20 81       	ld	r18, Z
    799e:	31 81       	ldd	r19, Z+1	; 0x01
    79a0:	21 50       	subi	r18, 0x01	; 1
    79a2:	30 40       	sbci	r19, 0x00	; 0
    79a4:	fc 01       	movw	r30, r24
    79a6:	31 83       	std	Z+1, r19	; 0x01
    79a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79aa:	ce 01       	movw	r24, r28
    79ac:	83 52       	subi	r24, 0x23	; 35
    79ae:	9f 4f       	sbci	r25, 0xFF	; 255
    79b0:	fc 01       	movw	r30, r24
    79b2:	80 81       	ld	r24, Z
    79b4:	91 81       	ldd	r25, Z+1	; 0x01
    79b6:	00 97       	sbiw	r24, 0x00	; 0
    79b8:	89 f6       	brne	.-94     	; 0x795c <pick_drop+0x186a>
    79ba:	2f c0       	rjmp	.+94     	; 0x7a1a <pick_drop+0x1928>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    79bc:	8e 01       	movw	r16, r28
    79be:	03 52       	subi	r16, 0x23	; 35
    79c0:	1f 4f       	sbci	r17, 0xFF	; 255
    79c2:	ce 01       	movw	r24, r28
    79c4:	87 52       	subi	r24, 0x27	; 39
    79c6:	9f 4f       	sbci	r25, 0xFF	; 255
    79c8:	fc 01       	movw	r30, r24
    79ca:	60 81       	ld	r22, Z
    79cc:	71 81       	ldd	r23, Z+1	; 0x01
    79ce:	82 81       	ldd	r24, Z+2	; 0x02
    79d0:	93 81       	ldd	r25, Z+3	; 0x03
    79d2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    79d6:	dc 01       	movw	r26, r24
    79d8:	cb 01       	movw	r24, r22
    79da:	f8 01       	movw	r30, r16
    79dc:	91 83       	std	Z+1, r25	; 0x01
    79de:	80 83       	st	Z, r24
    79e0:	ce 01       	movw	r24, r28
    79e2:	8f 51       	subi	r24, 0x1F	; 31
    79e4:	9f 4f       	sbci	r25, 0xFF	; 255
    79e6:	9e 01       	movw	r18, r28
    79e8:	23 52       	subi	r18, 0x23	; 35
    79ea:	3f 4f       	sbci	r19, 0xFF	; 255
    79ec:	f9 01       	movw	r30, r18
    79ee:	20 81       	ld	r18, Z
    79f0:	31 81       	ldd	r19, Z+1	; 0x01
    79f2:	fc 01       	movw	r30, r24
    79f4:	31 83       	std	Z+1, r19	; 0x01
    79f6:	20 83       	st	Z, r18
    79f8:	ce 01       	movw	r24, r28
    79fa:	8f 51       	subi	r24, 0x1F	; 31
    79fc:	9f 4f       	sbci	r25, 0xFF	; 255
    79fe:	fc 01       	movw	r30, r24
    7a00:	80 81       	ld	r24, Z
    7a02:	91 81       	ldd	r25, Z+1	; 0x01
    7a04:	8c 01       	movw	r16, r24
    7a06:	c8 01       	movw	r24, r16
    7a08:	01 97       	sbiw	r24, 0x01	; 1
    7a0a:	f1 f7       	brne	.-4      	; 0x7a08 <pick_drop+0x1916>
    7a0c:	8c 01       	movw	r16, r24
    7a0e:	ce 01       	movw	r24, r28
    7a10:	8f 51       	subi	r24, 0x1F	; 31
    7a12:	9f 4f       	sbci	r25, 0xFF	; 255
    7a14:	fc 01       	movw	r30, r24
    7a16:	11 83       	std	Z+1, r17	; 0x01
    7a18:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    7a1a:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    7a1e:	9e 01       	movw	r18, r28
    7a20:	2d 51       	subi	r18, 0x1D	; 29
    7a22:	3f 4f       	sbci	r19, 0xFF	; 255
    7a24:	80 e0       	ldi	r24, 0x00	; 0
    7a26:	90 e0       	ldi	r25, 0x00	; 0
    7a28:	a8 ec       	ldi	r26, 0xC8	; 200
    7a2a:	b2 e4       	ldi	r27, 0x42	; 66
    7a2c:	f9 01       	movw	r30, r18
    7a2e:	80 83       	st	Z, r24
    7a30:	91 83       	std	Z+1, r25	; 0x01
    7a32:	a2 83       	std	Z+2, r26	; 0x02
    7a34:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7a36:	8e 01       	movw	r16, r28
    7a38:	09 51       	subi	r16, 0x19	; 25
    7a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a3c:	ce 01       	movw	r24, r28
    7a3e:	8d 51       	subi	r24, 0x1D	; 29
    7a40:	9f 4f       	sbci	r25, 0xFF	; 255
    7a42:	fc 01       	movw	r30, r24
    7a44:	60 81       	ld	r22, Z
    7a46:	71 81       	ldd	r23, Z+1	; 0x01
    7a48:	82 81       	ldd	r24, Z+2	; 0x02
    7a4a:	93 81       	ldd	r25, Z+3	; 0x03
    7a4c:	26 e6       	ldi	r18, 0x66	; 102
    7a4e:	36 e6       	ldi	r19, 0x66	; 102
    7a50:	46 e6       	ldi	r20, 0x66	; 102
    7a52:	55 e4       	ldi	r21, 0x45	; 69
    7a54:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7a58:	dc 01       	movw	r26, r24
    7a5a:	cb 01       	movw	r24, r22
    7a5c:	f8 01       	movw	r30, r16
    7a5e:	80 83       	st	Z, r24
    7a60:	91 83       	std	Z+1, r25	; 0x01
    7a62:	a2 83       	std	Z+2, r26	; 0x02
    7a64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7a66:	ce 01       	movw	r24, r28
    7a68:	89 51       	subi	r24, 0x19	; 25
    7a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a6c:	11 e0       	ldi	r17, 0x01	; 1
    7a6e:	fc 01       	movw	r30, r24
    7a70:	60 81       	ld	r22, Z
    7a72:	71 81       	ldd	r23, Z+1	; 0x01
    7a74:	82 81       	ldd	r24, Z+2	; 0x02
    7a76:	93 81       	ldd	r25, Z+3	; 0x03
    7a78:	20 e0       	ldi	r18, 0x00	; 0
    7a7a:	30 e0       	ldi	r19, 0x00	; 0
    7a7c:	40 e8       	ldi	r20, 0x80	; 128
    7a7e:	5f e3       	ldi	r21, 0x3F	; 63
    7a80:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7a84:	88 23       	and	r24, r24
    7a86:	0c f0       	brlt	.+2      	; 0x7a8a <pick_drop+0x1998>
    7a88:	10 e0       	ldi	r17, 0x00	; 0
    7a8a:	11 23       	and	r17, r17
    7a8c:	49 f0       	breq	.+18     	; 0x7aa0 <pick_drop+0x19ae>
		__ticks = 1;
    7a8e:	ce 01       	movw	r24, r28
    7a90:	85 51       	subi	r24, 0x15	; 21
    7a92:	9f 4f       	sbci	r25, 0xFF	; 255
    7a94:	21 e0       	ldi	r18, 0x01	; 1
    7a96:	30 e0       	ldi	r19, 0x00	; 0
    7a98:	fc 01       	movw	r30, r24
    7a9a:	31 83       	std	Z+1, r19	; 0x01
    7a9c:	20 83       	st	Z, r18
    7a9e:	74 c0       	rjmp	.+232    	; 0x7b88 <pick_drop+0x1a96>
	else if (__tmp > 65535)
    7aa0:	ce 01       	movw	r24, r28
    7aa2:	89 51       	subi	r24, 0x19	; 25
    7aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    7aa6:	11 e0       	ldi	r17, 0x01	; 1
    7aa8:	fc 01       	movw	r30, r24
    7aaa:	60 81       	ld	r22, Z
    7aac:	71 81       	ldd	r23, Z+1	; 0x01
    7aae:	82 81       	ldd	r24, Z+2	; 0x02
    7ab0:	93 81       	ldd	r25, Z+3	; 0x03
    7ab2:	20 e0       	ldi	r18, 0x00	; 0
    7ab4:	3f ef       	ldi	r19, 0xFF	; 255
    7ab6:	4f e7       	ldi	r20, 0x7F	; 127
    7ab8:	57 e4       	ldi	r21, 0x47	; 71
    7aba:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    7abe:	18 16       	cp	r1, r24
    7ac0:	0c f0       	brlt	.+2      	; 0x7ac4 <pick_drop+0x19d2>
    7ac2:	10 e0       	ldi	r17, 0x00	; 0
    7ac4:	11 23       	and	r17, r17
    7ac6:	09 f4       	brne	.+2      	; 0x7aca <pick_drop+0x19d8>
    7ac8:	4d c0       	rjmp	.+154    	; 0x7b64 <pick_drop+0x1a72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7aca:	ce 01       	movw	r24, r28
    7acc:	8d 51       	subi	r24, 0x1D	; 29
    7ace:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad0:	fc 01       	movw	r30, r24
    7ad2:	60 81       	ld	r22, Z
    7ad4:	71 81       	ldd	r23, Z+1	; 0x01
    7ad6:	82 81       	ldd	r24, Z+2	; 0x02
    7ad8:	93 81       	ldd	r25, Z+3	; 0x03
    7ada:	20 e0       	ldi	r18, 0x00	; 0
    7adc:	30 e0       	ldi	r19, 0x00	; 0
    7ade:	40 e2       	ldi	r20, 0x20	; 32
    7ae0:	51 e4       	ldi	r21, 0x41	; 65
    7ae2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7ae6:	dc 01       	movw	r26, r24
    7ae8:	cb 01       	movw	r24, r22
    7aea:	8e 01       	movw	r16, r28
    7aec:	05 51       	subi	r16, 0x15	; 21
    7aee:	1f 4f       	sbci	r17, 0xFF	; 255
    7af0:	bc 01       	movw	r22, r24
    7af2:	cd 01       	movw	r24, r26
    7af4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7af8:	dc 01       	movw	r26, r24
    7afa:	cb 01       	movw	r24, r22
    7afc:	f8 01       	movw	r30, r16
    7afe:	91 83       	std	Z+1, r25	; 0x01
    7b00:	80 83       	st	Z, r24
    7b02:	27 c0       	rjmp	.+78     	; 0x7b52 <pick_drop+0x1a60>
    7b04:	ce 01       	movw	r24, r28
    7b06:	83 51       	subi	r24, 0x13	; 19
    7b08:	9f 4f       	sbci	r25, 0xFF	; 255
    7b0a:	20 e7       	ldi	r18, 0x70	; 112
    7b0c:	31 e0       	ldi	r19, 0x01	; 1
    7b0e:	fc 01       	movw	r30, r24
    7b10:	31 83       	std	Z+1, r19	; 0x01
    7b12:	20 83       	st	Z, r18
    7b14:	ce 01       	movw	r24, r28
    7b16:	83 51       	subi	r24, 0x13	; 19
    7b18:	9f 4f       	sbci	r25, 0xFF	; 255
    7b1a:	fc 01       	movw	r30, r24
    7b1c:	80 81       	ld	r24, Z
    7b1e:	91 81       	ldd	r25, Z+1	; 0x01
    7b20:	8c 01       	movw	r16, r24
    7b22:	c8 01       	movw	r24, r16
    7b24:	01 97       	sbiw	r24, 0x01	; 1
    7b26:	f1 f7       	brne	.-4      	; 0x7b24 <pick_drop+0x1a32>
    7b28:	8c 01       	movw	r16, r24
    7b2a:	ce 01       	movw	r24, r28
    7b2c:	83 51       	subi	r24, 0x13	; 19
    7b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b30:	fc 01       	movw	r30, r24
    7b32:	11 83       	std	Z+1, r17	; 0x01
    7b34:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b36:	ce 01       	movw	r24, r28
    7b38:	85 51       	subi	r24, 0x15	; 21
    7b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b3c:	9e 01       	movw	r18, r28
    7b3e:	25 51       	subi	r18, 0x15	; 21
    7b40:	3f 4f       	sbci	r19, 0xFF	; 255
    7b42:	f9 01       	movw	r30, r18
    7b44:	20 81       	ld	r18, Z
    7b46:	31 81       	ldd	r19, Z+1	; 0x01
    7b48:	21 50       	subi	r18, 0x01	; 1
    7b4a:	30 40       	sbci	r19, 0x00	; 0
    7b4c:	fc 01       	movw	r30, r24
    7b4e:	31 83       	std	Z+1, r19	; 0x01
    7b50:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b52:	ce 01       	movw	r24, r28
    7b54:	85 51       	subi	r24, 0x15	; 21
    7b56:	9f 4f       	sbci	r25, 0xFF	; 255
    7b58:	fc 01       	movw	r30, r24
    7b5a:	80 81       	ld	r24, Z
    7b5c:	91 81       	ldd	r25, Z+1	; 0x01
    7b5e:	00 97       	sbiw	r24, 0x00	; 0
    7b60:	89 f6       	brne	.-94     	; 0x7b04 <pick_drop+0x1a12>
    7b62:	2f c0       	rjmp	.+94     	; 0x7bc2 <pick_drop+0x1ad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b64:	8e 01       	movw	r16, r28
    7b66:	05 51       	subi	r16, 0x15	; 21
    7b68:	1f 4f       	sbci	r17, 0xFF	; 255
    7b6a:	ce 01       	movw	r24, r28
    7b6c:	89 51       	subi	r24, 0x19	; 25
    7b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b70:	fc 01       	movw	r30, r24
    7b72:	60 81       	ld	r22, Z
    7b74:	71 81       	ldd	r23, Z+1	; 0x01
    7b76:	82 81       	ldd	r24, Z+2	; 0x02
    7b78:	93 81       	ldd	r25, Z+3	; 0x03
    7b7a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7b7e:	dc 01       	movw	r26, r24
    7b80:	cb 01       	movw	r24, r22
    7b82:	f8 01       	movw	r30, r16
    7b84:	91 83       	std	Z+1, r25	; 0x01
    7b86:	80 83       	st	Z, r24
    7b88:	ce 01       	movw	r24, r28
    7b8a:	81 51       	subi	r24, 0x11	; 17
    7b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    7b8e:	9e 01       	movw	r18, r28
    7b90:	25 51       	subi	r18, 0x15	; 21
    7b92:	3f 4f       	sbci	r19, 0xFF	; 255
    7b94:	f9 01       	movw	r30, r18
    7b96:	20 81       	ld	r18, Z
    7b98:	31 81       	ldd	r19, Z+1	; 0x01
    7b9a:	fc 01       	movw	r30, r24
    7b9c:	31 83       	std	Z+1, r19	; 0x01
    7b9e:	20 83       	st	Z, r18
    7ba0:	ce 01       	movw	r24, r28
    7ba2:	81 51       	subi	r24, 0x11	; 17
    7ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba6:	fc 01       	movw	r30, r24
    7ba8:	80 81       	ld	r24, Z
    7baa:	91 81       	ldd	r25, Z+1	; 0x01
    7bac:	8c 01       	movw	r16, r24
    7bae:	c8 01       	movw	r24, r16
    7bb0:	01 97       	sbiw	r24, 0x01	; 1
    7bb2:	f1 f7       	brne	.-4      	; 0x7bb0 <pick_drop+0x1abe>
    7bb4:	8c 01       	movw	r16, r24
    7bb6:	ce 01       	movw	r24, r28
    7bb8:	81 51       	subi	r24, 0x11	; 17
    7bba:	9f 4f       	sbci	r25, 0xFF	; 255
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	11 83       	std	Z+1, r17	; 0x01
    7bc0:	00 83       	st	Z, r16
					_delay_ms(100);
					correct_right();
    7bc2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
					back_mm(70);
    7bc6:	86 e4       	ldi	r24, 0x46	; 70
    7bc8:	90 e0       	ldi	r25, 0x00	; 0
    7bca:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    7bce:	9e 01       	movw	r18, r28
    7bd0:	2f 50       	subi	r18, 0x0F	; 15
    7bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    7bd4:	80 e0       	ldi	r24, 0x00	; 0
    7bd6:	90 e0       	ldi	r25, 0x00	; 0
    7bd8:	a0 ea       	ldi	r26, 0xA0	; 160
    7bda:	b1 e4       	ldi	r27, 0x41	; 65
    7bdc:	f9 01       	movw	r30, r18
    7bde:	80 83       	st	Z, r24
    7be0:	91 83       	std	Z+1, r25	; 0x01
    7be2:	a2 83       	std	Z+2, r26	; 0x02
    7be4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7be6:	8e 01       	movw	r16, r28
    7be8:	0b 50       	subi	r16, 0x0B	; 11
    7bea:	1f 4f       	sbci	r17, 0xFF	; 255
    7bec:	ce 01       	movw	r24, r28
    7bee:	8f 50       	subi	r24, 0x0F	; 15
    7bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    7bf2:	fc 01       	movw	r30, r24
    7bf4:	60 81       	ld	r22, Z
    7bf6:	71 81       	ldd	r23, Z+1	; 0x01
    7bf8:	82 81       	ldd	r24, Z+2	; 0x02
    7bfa:	93 81       	ldd	r25, Z+3	; 0x03
    7bfc:	26 e6       	ldi	r18, 0x66	; 102
    7bfe:	36 e6       	ldi	r19, 0x66	; 102
    7c00:	46 e6       	ldi	r20, 0x66	; 102
    7c02:	55 e4       	ldi	r21, 0x45	; 69
    7c04:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7c08:	dc 01       	movw	r26, r24
    7c0a:	cb 01       	movw	r24, r22
    7c0c:	f8 01       	movw	r30, r16
    7c0e:	80 83       	st	Z, r24
    7c10:	91 83       	std	Z+1, r25	; 0x01
    7c12:	a2 83       	std	Z+2, r26	; 0x02
    7c14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7c16:	ce 01       	movw	r24, r28
    7c18:	8b 50       	subi	r24, 0x0B	; 11
    7c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c1c:	11 e0       	ldi	r17, 0x01	; 1
    7c1e:	fc 01       	movw	r30, r24
    7c20:	60 81       	ld	r22, Z
    7c22:	71 81       	ldd	r23, Z+1	; 0x01
    7c24:	82 81       	ldd	r24, Z+2	; 0x02
    7c26:	93 81       	ldd	r25, Z+3	; 0x03
    7c28:	20 e0       	ldi	r18, 0x00	; 0
    7c2a:	30 e0       	ldi	r19, 0x00	; 0
    7c2c:	40 e8       	ldi	r20, 0x80	; 128
    7c2e:	5f e3       	ldi	r21, 0x3F	; 63
    7c30:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7c34:	88 23       	and	r24, r24
    7c36:	0c f0       	brlt	.+2      	; 0x7c3a <pick_drop+0x1b48>
    7c38:	10 e0       	ldi	r17, 0x00	; 0
    7c3a:	11 23       	and	r17, r17
    7c3c:	49 f0       	breq	.+18     	; 0x7c50 <pick_drop+0x1b5e>
		__ticks = 1;
    7c3e:	ce 01       	movw	r24, r28
    7c40:	87 50       	subi	r24, 0x07	; 7
    7c42:	9f 4f       	sbci	r25, 0xFF	; 255
    7c44:	21 e0       	ldi	r18, 0x01	; 1
    7c46:	30 e0       	ldi	r19, 0x00	; 0
    7c48:	fc 01       	movw	r30, r24
    7c4a:	31 83       	std	Z+1, r19	; 0x01
    7c4c:	20 83       	st	Z, r18
    7c4e:	74 c0       	rjmp	.+232    	; 0x7d38 <pick_drop+0x1c46>
	else if (__tmp > 65535)
    7c50:	ce 01       	movw	r24, r28
    7c52:	8b 50       	subi	r24, 0x0B	; 11
    7c54:	9f 4f       	sbci	r25, 0xFF	; 255
    7c56:	11 e0       	ldi	r17, 0x01	; 1
    7c58:	fc 01       	movw	r30, r24
    7c5a:	60 81       	ld	r22, Z
    7c5c:	71 81       	ldd	r23, Z+1	; 0x01
    7c5e:	82 81       	ldd	r24, Z+2	; 0x02
    7c60:	93 81       	ldd	r25, Z+3	; 0x03
    7c62:	20 e0       	ldi	r18, 0x00	; 0
    7c64:	3f ef       	ldi	r19, 0xFF	; 255
    7c66:	4f e7       	ldi	r20, 0x7F	; 127
    7c68:	57 e4       	ldi	r21, 0x47	; 71
    7c6a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    7c6e:	18 16       	cp	r1, r24
    7c70:	0c f0       	brlt	.+2      	; 0x7c74 <pick_drop+0x1b82>
    7c72:	10 e0       	ldi	r17, 0x00	; 0
    7c74:	11 23       	and	r17, r17
    7c76:	09 f4       	brne	.+2      	; 0x7c7a <pick_drop+0x1b88>
    7c78:	4d c0       	rjmp	.+154    	; 0x7d14 <pick_drop+0x1c22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7c7a:	ce 01       	movw	r24, r28
    7c7c:	8f 50       	subi	r24, 0x0F	; 15
    7c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c80:	fc 01       	movw	r30, r24
    7c82:	60 81       	ld	r22, Z
    7c84:	71 81       	ldd	r23, Z+1	; 0x01
    7c86:	82 81       	ldd	r24, Z+2	; 0x02
    7c88:	93 81       	ldd	r25, Z+3	; 0x03
    7c8a:	20 e0       	ldi	r18, 0x00	; 0
    7c8c:	30 e0       	ldi	r19, 0x00	; 0
    7c8e:	40 e2       	ldi	r20, 0x20	; 32
    7c90:	51 e4       	ldi	r21, 0x41	; 65
    7c92:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7c96:	dc 01       	movw	r26, r24
    7c98:	cb 01       	movw	r24, r22
    7c9a:	8e 01       	movw	r16, r28
    7c9c:	07 50       	subi	r16, 0x07	; 7
    7c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    7ca0:	bc 01       	movw	r22, r24
    7ca2:	cd 01       	movw	r24, r26
    7ca4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7ca8:	dc 01       	movw	r26, r24
    7caa:	cb 01       	movw	r24, r22
    7cac:	f8 01       	movw	r30, r16
    7cae:	91 83       	std	Z+1, r25	; 0x01
    7cb0:	80 83       	st	Z, r24
    7cb2:	27 c0       	rjmp	.+78     	; 0x7d02 <pick_drop+0x1c10>
    7cb4:	ce 01       	movw	r24, r28
    7cb6:	85 50       	subi	r24, 0x05	; 5
    7cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    7cba:	20 e7       	ldi	r18, 0x70	; 112
    7cbc:	31 e0       	ldi	r19, 0x01	; 1
    7cbe:	fc 01       	movw	r30, r24
    7cc0:	31 83       	std	Z+1, r19	; 0x01
    7cc2:	20 83       	st	Z, r18
    7cc4:	ce 01       	movw	r24, r28
    7cc6:	85 50       	subi	r24, 0x05	; 5
    7cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    7cca:	fc 01       	movw	r30, r24
    7ccc:	80 81       	ld	r24, Z
    7cce:	91 81       	ldd	r25, Z+1	; 0x01
    7cd0:	8c 01       	movw	r16, r24
    7cd2:	c8 01       	movw	r24, r16
    7cd4:	01 97       	sbiw	r24, 0x01	; 1
    7cd6:	f1 f7       	brne	.-4      	; 0x7cd4 <pick_drop+0x1be2>
    7cd8:	8c 01       	movw	r16, r24
    7cda:	ce 01       	movw	r24, r28
    7cdc:	85 50       	subi	r24, 0x05	; 5
    7cde:	9f 4f       	sbci	r25, 0xFF	; 255
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	11 83       	std	Z+1, r17	; 0x01
    7ce4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7ce6:	ce 01       	movw	r24, r28
    7ce8:	87 50       	subi	r24, 0x07	; 7
    7cea:	9f 4f       	sbci	r25, 0xFF	; 255
    7cec:	9e 01       	movw	r18, r28
    7cee:	27 50       	subi	r18, 0x07	; 7
    7cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    7cf2:	f9 01       	movw	r30, r18
    7cf4:	20 81       	ld	r18, Z
    7cf6:	31 81       	ldd	r19, Z+1	; 0x01
    7cf8:	21 50       	subi	r18, 0x01	; 1
    7cfa:	30 40       	sbci	r19, 0x00	; 0
    7cfc:	fc 01       	movw	r30, r24
    7cfe:	31 83       	std	Z+1, r19	; 0x01
    7d00:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d02:	ce 01       	movw	r24, r28
    7d04:	87 50       	subi	r24, 0x07	; 7
    7d06:	9f 4f       	sbci	r25, 0xFF	; 255
    7d08:	fc 01       	movw	r30, r24
    7d0a:	80 81       	ld	r24, Z
    7d0c:	91 81       	ldd	r25, Z+1	; 0x01
    7d0e:	00 97       	sbiw	r24, 0x00	; 0
    7d10:	89 f6       	brne	.-94     	; 0x7cb4 <pick_drop+0x1bc2>
    7d12:	2f c0       	rjmp	.+94     	; 0x7d72 <pick_drop+0x1c80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d14:	8e 01       	movw	r16, r28
    7d16:	07 50       	subi	r16, 0x07	; 7
    7d18:	1f 4f       	sbci	r17, 0xFF	; 255
    7d1a:	ce 01       	movw	r24, r28
    7d1c:	8b 50       	subi	r24, 0x0B	; 11
    7d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d20:	fc 01       	movw	r30, r24
    7d22:	60 81       	ld	r22, Z
    7d24:	71 81       	ldd	r23, Z+1	; 0x01
    7d26:	82 81       	ldd	r24, Z+2	; 0x02
    7d28:	93 81       	ldd	r25, Z+3	; 0x03
    7d2a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7d2e:	dc 01       	movw	r26, r24
    7d30:	cb 01       	movw	r24, r22
    7d32:	f8 01       	movw	r30, r16
    7d34:	91 83       	std	Z+1, r25	; 0x01
    7d36:	80 83       	st	Z, r24
    7d38:	ce 01       	movw	r24, r28
    7d3a:	83 50       	subi	r24, 0x03	; 3
    7d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d3e:	9e 01       	movw	r18, r28
    7d40:	27 50       	subi	r18, 0x07	; 7
    7d42:	3f 4f       	sbci	r19, 0xFF	; 255
    7d44:	f9 01       	movw	r30, r18
    7d46:	20 81       	ld	r18, Z
    7d48:	31 81       	ldd	r19, Z+1	; 0x01
    7d4a:	fc 01       	movw	r30, r24
    7d4c:	31 83       	std	Z+1, r19	; 0x01
    7d4e:	20 83       	st	Z, r18
    7d50:	ce 01       	movw	r24, r28
    7d52:	83 50       	subi	r24, 0x03	; 3
    7d54:	9f 4f       	sbci	r25, 0xFF	; 255
    7d56:	fc 01       	movw	r30, r24
    7d58:	80 81       	ld	r24, Z
    7d5a:	91 81       	ldd	r25, Z+1	; 0x01
    7d5c:	8c 01       	movw	r16, r24
    7d5e:	c8 01       	movw	r24, r16
    7d60:	01 97       	sbiw	r24, 0x01	; 1
    7d62:	f1 f7       	brne	.-4      	; 0x7d60 <pick_drop+0x1c6e>
    7d64:	8c 01       	movw	r16, r24
    7d66:	ce 01       	movw	r24, r28
    7d68:	83 50       	subi	r24, 0x03	; 3
    7d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6c:	fc 01       	movw	r30, r24
    7d6e:	11 83       	std	Z+1, r17	; 0x01
    7d70:	00 83       	st	Z, r16
					_delay_ms(20);
				}
		}
		if(pd == '2')//// Picking left animals based on the previous orientation of the bot
    7d72:	ce 01       	movw	r24, r28
    7d74:	8f 5f       	subi	r24, 0xFF	; 255
    7d76:	9b 4f       	sbci	r25, 0xFB	; 251
    7d78:	fc 01       	movw	r30, r24
    7d7a:	80 81       	ld	r24, Z
    7d7c:	82 33       	cpi	r24, 0x32	; 50
    7d7e:	11 f0       	breq	.+4      	; 0x7d84 <pick_drop+0x1c92>
    7d80:	0c 94 f4 48 	jmp	0x91e8	; 0x91e8 <pick_drop+0x30f6>
		{
			if(master_path[node-1]=='U')
    7d84:	80 91 4f 03 	lds	r24, 0x034F
    7d88:	90 91 50 03 	lds	r25, 0x0350
    7d8c:	01 97       	sbiw	r24, 0x01	; 1
    7d8e:	8d 5a       	subi	r24, 0xAD	; 173
    7d90:	9c 4f       	sbci	r25, 0xFC	; 252
    7d92:	fc 01       	movw	r30, r24
    7d94:	80 81       	ld	r24, Z
    7d96:	85 35       	cpi	r24, 0x55	; 85
    7d98:	09 f0       	breq	.+2      	; 0x7d9c <pick_drop+0x1caa>
    7d9a:	2f c4       	rjmp	.+2142   	; 0x85fa <pick_drop+0x2508>
			{
			forward_mm(40);
    7d9c:	88 e2       	ldi	r24, 0x28	; 40
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    7da4:	9e 01       	movw	r18, r28
    7da6:	21 50       	subi	r18, 0x01	; 1
    7da8:	3f 4f       	sbci	r19, 0xFF	; 255
    7daa:	80 e0       	ldi	r24, 0x00	; 0
    7dac:	90 e0       	ldi	r25, 0x00	; 0
    7dae:	a0 ea       	ldi	r26, 0xA0	; 160
    7db0:	b1 e4       	ldi	r27, 0x41	; 65
    7db2:	f9 01       	movw	r30, r18
    7db4:	80 83       	st	Z, r24
    7db6:	91 83       	std	Z+1, r25	; 0x01
    7db8:	a2 83       	std	Z+2, r26	; 0x02
    7dba:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7dbc:	8e 01       	movw	r16, r28
    7dbe:	0d 5f       	subi	r16, 0xFD	; 253
    7dc0:	1e 4f       	sbci	r17, 0xFE	; 254
    7dc2:	ce 01       	movw	r24, r28
    7dc4:	81 50       	subi	r24, 0x01	; 1
    7dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc8:	fc 01       	movw	r30, r24
    7dca:	60 81       	ld	r22, Z
    7dcc:	71 81       	ldd	r23, Z+1	; 0x01
    7dce:	82 81       	ldd	r24, Z+2	; 0x02
    7dd0:	93 81       	ldd	r25, Z+3	; 0x03
    7dd2:	26 e6       	ldi	r18, 0x66	; 102
    7dd4:	36 e6       	ldi	r19, 0x66	; 102
    7dd6:	46 e6       	ldi	r20, 0x66	; 102
    7dd8:	55 e4       	ldi	r21, 0x45	; 69
    7dda:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7dde:	dc 01       	movw	r26, r24
    7de0:	cb 01       	movw	r24, r22
    7de2:	f8 01       	movw	r30, r16
    7de4:	80 83       	st	Z, r24
    7de6:	91 83       	std	Z+1, r25	; 0x01
    7de8:	a2 83       	std	Z+2, r26	; 0x02
    7dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7dec:	ce 01       	movw	r24, r28
    7dee:	8d 5f       	subi	r24, 0xFD	; 253
    7df0:	9e 4f       	sbci	r25, 0xFE	; 254
    7df2:	11 e0       	ldi	r17, 0x01	; 1
    7df4:	fc 01       	movw	r30, r24
    7df6:	60 81       	ld	r22, Z
    7df8:	71 81       	ldd	r23, Z+1	; 0x01
    7dfa:	82 81       	ldd	r24, Z+2	; 0x02
    7dfc:	93 81       	ldd	r25, Z+3	; 0x03
    7dfe:	20 e0       	ldi	r18, 0x00	; 0
    7e00:	30 e0       	ldi	r19, 0x00	; 0
    7e02:	40 e8       	ldi	r20, 0x80	; 128
    7e04:	5f e3       	ldi	r21, 0x3F	; 63
    7e06:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7e0a:	88 23       	and	r24, r24
    7e0c:	0c f0       	brlt	.+2      	; 0x7e10 <pick_drop+0x1d1e>
    7e0e:	10 e0       	ldi	r17, 0x00	; 0
    7e10:	11 23       	and	r17, r17
    7e12:	49 f0       	breq	.+18     	; 0x7e26 <pick_drop+0x1d34>
		__ticks = 1;
    7e14:	ce 01       	movw	r24, r28
    7e16:	89 5f       	subi	r24, 0xF9	; 249
    7e18:	9e 4f       	sbci	r25, 0xFE	; 254
    7e1a:	21 e0       	ldi	r18, 0x01	; 1
    7e1c:	30 e0       	ldi	r19, 0x00	; 0
    7e1e:	fc 01       	movw	r30, r24
    7e20:	31 83       	std	Z+1, r19	; 0x01
    7e22:	20 83       	st	Z, r18
    7e24:	74 c0       	rjmp	.+232    	; 0x7f0e <pick_drop+0x1e1c>
	else if (__tmp > 65535)
    7e26:	ce 01       	movw	r24, r28
    7e28:	8d 5f       	subi	r24, 0xFD	; 253
    7e2a:	9e 4f       	sbci	r25, 0xFE	; 254
    7e2c:	11 e0       	ldi	r17, 0x01	; 1
    7e2e:	fc 01       	movw	r30, r24
    7e30:	60 81       	ld	r22, Z
    7e32:	71 81       	ldd	r23, Z+1	; 0x01
    7e34:	82 81       	ldd	r24, Z+2	; 0x02
    7e36:	93 81       	ldd	r25, Z+3	; 0x03
    7e38:	20 e0       	ldi	r18, 0x00	; 0
    7e3a:	3f ef       	ldi	r19, 0xFF	; 255
    7e3c:	4f e7       	ldi	r20, 0x7F	; 127
    7e3e:	57 e4       	ldi	r21, 0x47	; 71
    7e40:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    7e44:	18 16       	cp	r1, r24
    7e46:	0c f0       	brlt	.+2      	; 0x7e4a <pick_drop+0x1d58>
    7e48:	10 e0       	ldi	r17, 0x00	; 0
    7e4a:	11 23       	and	r17, r17
    7e4c:	09 f4       	brne	.+2      	; 0x7e50 <pick_drop+0x1d5e>
    7e4e:	4d c0       	rjmp	.+154    	; 0x7eea <pick_drop+0x1df8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e50:	ce 01       	movw	r24, r28
    7e52:	81 50       	subi	r24, 0x01	; 1
    7e54:	9f 4f       	sbci	r25, 0xFF	; 255
    7e56:	fc 01       	movw	r30, r24
    7e58:	60 81       	ld	r22, Z
    7e5a:	71 81       	ldd	r23, Z+1	; 0x01
    7e5c:	82 81       	ldd	r24, Z+2	; 0x02
    7e5e:	93 81       	ldd	r25, Z+3	; 0x03
    7e60:	20 e0       	ldi	r18, 0x00	; 0
    7e62:	30 e0       	ldi	r19, 0x00	; 0
    7e64:	40 e2       	ldi	r20, 0x20	; 32
    7e66:	51 e4       	ldi	r21, 0x41	; 65
    7e68:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7e6c:	dc 01       	movw	r26, r24
    7e6e:	cb 01       	movw	r24, r22
    7e70:	8e 01       	movw	r16, r28
    7e72:	09 5f       	subi	r16, 0xF9	; 249
    7e74:	1e 4f       	sbci	r17, 0xFE	; 254
    7e76:	bc 01       	movw	r22, r24
    7e78:	cd 01       	movw	r24, r26
    7e7a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7e7e:	dc 01       	movw	r26, r24
    7e80:	cb 01       	movw	r24, r22
    7e82:	f8 01       	movw	r30, r16
    7e84:	91 83       	std	Z+1, r25	; 0x01
    7e86:	80 83       	st	Z, r24
    7e88:	27 c0       	rjmp	.+78     	; 0x7ed8 <pick_drop+0x1de6>
    7e8a:	ce 01       	movw	r24, r28
    7e8c:	87 5f       	subi	r24, 0xF7	; 247
    7e8e:	9e 4f       	sbci	r25, 0xFE	; 254
    7e90:	20 e7       	ldi	r18, 0x70	; 112
    7e92:	31 e0       	ldi	r19, 0x01	; 1
    7e94:	fc 01       	movw	r30, r24
    7e96:	31 83       	std	Z+1, r19	; 0x01
    7e98:	20 83       	st	Z, r18
    7e9a:	ce 01       	movw	r24, r28
    7e9c:	87 5f       	subi	r24, 0xF7	; 247
    7e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    7ea0:	fc 01       	movw	r30, r24
    7ea2:	80 81       	ld	r24, Z
    7ea4:	91 81       	ldd	r25, Z+1	; 0x01
    7ea6:	8c 01       	movw	r16, r24
    7ea8:	c8 01       	movw	r24, r16
    7eaa:	01 97       	sbiw	r24, 0x01	; 1
    7eac:	f1 f7       	brne	.-4      	; 0x7eaa <pick_drop+0x1db8>
    7eae:	8c 01       	movw	r16, r24
    7eb0:	ce 01       	movw	r24, r28
    7eb2:	87 5f       	subi	r24, 0xF7	; 247
    7eb4:	9e 4f       	sbci	r25, 0xFE	; 254
    7eb6:	fc 01       	movw	r30, r24
    7eb8:	11 83       	std	Z+1, r17	; 0x01
    7eba:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7ebc:	ce 01       	movw	r24, r28
    7ebe:	89 5f       	subi	r24, 0xF9	; 249
    7ec0:	9e 4f       	sbci	r25, 0xFE	; 254
    7ec2:	9e 01       	movw	r18, r28
    7ec4:	29 5f       	subi	r18, 0xF9	; 249
    7ec6:	3e 4f       	sbci	r19, 0xFE	; 254
    7ec8:	f9 01       	movw	r30, r18
    7eca:	20 81       	ld	r18, Z
    7ecc:	31 81       	ldd	r19, Z+1	; 0x01
    7ece:	21 50       	subi	r18, 0x01	; 1
    7ed0:	30 40       	sbci	r19, 0x00	; 0
    7ed2:	fc 01       	movw	r30, r24
    7ed4:	31 83       	std	Z+1, r19	; 0x01
    7ed6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ed8:	ce 01       	movw	r24, r28
    7eda:	89 5f       	subi	r24, 0xF9	; 249
    7edc:	9e 4f       	sbci	r25, 0xFE	; 254
    7ede:	fc 01       	movw	r30, r24
    7ee0:	80 81       	ld	r24, Z
    7ee2:	91 81       	ldd	r25, Z+1	; 0x01
    7ee4:	00 97       	sbiw	r24, 0x00	; 0
    7ee6:	89 f6       	brne	.-94     	; 0x7e8a <pick_drop+0x1d98>
    7ee8:	2f c0       	rjmp	.+94     	; 0x7f48 <pick_drop+0x1e56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7eea:	8e 01       	movw	r16, r28
    7eec:	09 5f       	subi	r16, 0xF9	; 249
    7eee:	1e 4f       	sbci	r17, 0xFE	; 254
    7ef0:	ce 01       	movw	r24, r28
    7ef2:	8d 5f       	subi	r24, 0xFD	; 253
    7ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    7ef6:	fc 01       	movw	r30, r24
    7ef8:	60 81       	ld	r22, Z
    7efa:	71 81       	ldd	r23, Z+1	; 0x01
    7efc:	82 81       	ldd	r24, Z+2	; 0x02
    7efe:	93 81       	ldd	r25, Z+3	; 0x03
    7f00:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    7f04:	dc 01       	movw	r26, r24
    7f06:	cb 01       	movw	r24, r22
    7f08:	f8 01       	movw	r30, r16
    7f0a:	91 83       	std	Z+1, r25	; 0x01
    7f0c:	80 83       	st	Z, r24
    7f0e:	ce 01       	movw	r24, r28
    7f10:	85 5f       	subi	r24, 0xF5	; 245
    7f12:	9e 4f       	sbci	r25, 0xFE	; 254
    7f14:	9e 01       	movw	r18, r28
    7f16:	29 5f       	subi	r18, 0xF9	; 249
    7f18:	3e 4f       	sbci	r19, 0xFE	; 254
    7f1a:	f9 01       	movw	r30, r18
    7f1c:	20 81       	ld	r18, Z
    7f1e:	31 81       	ldd	r19, Z+1	; 0x01
    7f20:	fc 01       	movw	r30, r24
    7f22:	31 83       	std	Z+1, r19	; 0x01
    7f24:	20 83       	st	Z, r18
    7f26:	ce 01       	movw	r24, r28
    7f28:	85 5f       	subi	r24, 0xF5	; 245
    7f2a:	9e 4f       	sbci	r25, 0xFE	; 254
    7f2c:	fc 01       	movw	r30, r24
    7f2e:	80 81       	ld	r24, Z
    7f30:	91 81       	ldd	r25, Z+1	; 0x01
    7f32:	8c 01       	movw	r16, r24
    7f34:	c8 01       	movw	r24, r16
    7f36:	01 97       	sbiw	r24, 0x01	; 1
    7f38:	f1 f7       	brne	.-4      	; 0x7f36 <pick_drop+0x1e44>
    7f3a:	8c 01       	movw	r16, r24
    7f3c:	ce 01       	movw	r24, r28
    7f3e:	85 5f       	subi	r24, 0xF5	; 245
    7f40:	9e 4f       	sbci	r25, 0xFE	; 254
    7f42:	fc 01       	movw	r30, r24
    7f44:	11 83       	std	Z+1, r17	; 0x01
    7f46:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right2();
    7f48:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    7f4c:	9e 01       	movw	r18, r28
    7f4e:	23 5f       	subi	r18, 0xF3	; 243
    7f50:	3e 4f       	sbci	r19, 0xFE	; 254
    7f52:	80 e0       	ldi	r24, 0x00	; 0
    7f54:	90 e0       	ldi	r25, 0x00	; 0
    7f56:	a8 e4       	ldi	r26, 0x48	; 72
    7f58:	b2 e4       	ldi	r27, 0x42	; 66
    7f5a:	f9 01       	movw	r30, r18
    7f5c:	80 83       	st	Z, r24
    7f5e:	91 83       	std	Z+1, r25	; 0x01
    7f60:	a2 83       	std	Z+2, r26	; 0x02
    7f62:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7f64:	8e 01       	movw	r16, r28
    7f66:	0f 5e       	subi	r16, 0xEF	; 239
    7f68:	1e 4f       	sbci	r17, 0xFE	; 254
    7f6a:	ce 01       	movw	r24, r28
    7f6c:	83 5f       	subi	r24, 0xF3	; 243
    7f6e:	9e 4f       	sbci	r25, 0xFE	; 254
    7f70:	fc 01       	movw	r30, r24
    7f72:	60 81       	ld	r22, Z
    7f74:	71 81       	ldd	r23, Z+1	; 0x01
    7f76:	82 81       	ldd	r24, Z+2	; 0x02
    7f78:	93 81       	ldd	r25, Z+3	; 0x03
    7f7a:	26 e6       	ldi	r18, 0x66	; 102
    7f7c:	36 e6       	ldi	r19, 0x66	; 102
    7f7e:	46 e6       	ldi	r20, 0x66	; 102
    7f80:	55 e4       	ldi	r21, 0x45	; 69
    7f82:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    7f86:	dc 01       	movw	r26, r24
    7f88:	cb 01       	movw	r24, r22
    7f8a:	f8 01       	movw	r30, r16
    7f8c:	80 83       	st	Z, r24
    7f8e:	91 83       	std	Z+1, r25	; 0x01
    7f90:	a2 83       	std	Z+2, r26	; 0x02
    7f92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7f94:	ce 01       	movw	r24, r28
    7f96:	8f 5e       	subi	r24, 0xEF	; 239
    7f98:	9e 4f       	sbci	r25, 0xFE	; 254
    7f9a:	11 e0       	ldi	r17, 0x01	; 1
    7f9c:	fc 01       	movw	r30, r24
    7f9e:	60 81       	ld	r22, Z
    7fa0:	71 81       	ldd	r23, Z+1	; 0x01
    7fa2:	82 81       	ldd	r24, Z+2	; 0x02
    7fa4:	93 81       	ldd	r25, Z+3	; 0x03
    7fa6:	20 e0       	ldi	r18, 0x00	; 0
    7fa8:	30 e0       	ldi	r19, 0x00	; 0
    7faa:	40 e8       	ldi	r20, 0x80	; 128
    7fac:	5f e3       	ldi	r21, 0x3F	; 63
    7fae:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    7fb2:	88 23       	and	r24, r24
    7fb4:	0c f0       	brlt	.+2      	; 0x7fb8 <pick_drop+0x1ec6>
    7fb6:	10 e0       	ldi	r17, 0x00	; 0
    7fb8:	11 23       	and	r17, r17
    7fba:	49 f0       	breq	.+18     	; 0x7fce <pick_drop+0x1edc>
		__ticks = 1;
    7fbc:	ce 01       	movw	r24, r28
    7fbe:	8b 5e       	subi	r24, 0xEB	; 235
    7fc0:	9e 4f       	sbci	r25, 0xFE	; 254
    7fc2:	21 e0       	ldi	r18, 0x01	; 1
    7fc4:	30 e0       	ldi	r19, 0x00	; 0
    7fc6:	fc 01       	movw	r30, r24
    7fc8:	31 83       	std	Z+1, r19	; 0x01
    7fca:	20 83       	st	Z, r18
    7fcc:	74 c0       	rjmp	.+232    	; 0x80b6 <pick_drop+0x1fc4>
	else if (__tmp > 65535)
    7fce:	ce 01       	movw	r24, r28
    7fd0:	8f 5e       	subi	r24, 0xEF	; 239
    7fd2:	9e 4f       	sbci	r25, 0xFE	; 254
    7fd4:	11 e0       	ldi	r17, 0x01	; 1
    7fd6:	fc 01       	movw	r30, r24
    7fd8:	60 81       	ld	r22, Z
    7fda:	71 81       	ldd	r23, Z+1	; 0x01
    7fdc:	82 81       	ldd	r24, Z+2	; 0x02
    7fde:	93 81       	ldd	r25, Z+3	; 0x03
    7fe0:	20 e0       	ldi	r18, 0x00	; 0
    7fe2:	3f ef       	ldi	r19, 0xFF	; 255
    7fe4:	4f e7       	ldi	r20, 0x7F	; 127
    7fe6:	57 e4       	ldi	r21, 0x47	; 71
    7fe8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    7fec:	18 16       	cp	r1, r24
    7fee:	0c f0       	brlt	.+2      	; 0x7ff2 <pick_drop+0x1f00>
    7ff0:	10 e0       	ldi	r17, 0x00	; 0
    7ff2:	11 23       	and	r17, r17
    7ff4:	09 f4       	brne	.+2      	; 0x7ff8 <pick_drop+0x1f06>
    7ff6:	4d c0       	rjmp	.+154    	; 0x8092 <pick_drop+0x1fa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7ff8:	ce 01       	movw	r24, r28
    7ffa:	83 5f       	subi	r24, 0xF3	; 243
    7ffc:	9e 4f       	sbci	r25, 0xFE	; 254
    7ffe:	fc 01       	movw	r30, r24
    8000:	60 81       	ld	r22, Z
    8002:	71 81       	ldd	r23, Z+1	; 0x01
    8004:	82 81       	ldd	r24, Z+2	; 0x02
    8006:	93 81       	ldd	r25, Z+3	; 0x03
    8008:	20 e0       	ldi	r18, 0x00	; 0
    800a:	30 e0       	ldi	r19, 0x00	; 0
    800c:	40 e2       	ldi	r20, 0x20	; 32
    800e:	51 e4       	ldi	r21, 0x41	; 65
    8010:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8014:	dc 01       	movw	r26, r24
    8016:	cb 01       	movw	r24, r22
    8018:	8e 01       	movw	r16, r28
    801a:	0b 5e       	subi	r16, 0xEB	; 235
    801c:	1e 4f       	sbci	r17, 0xFE	; 254
    801e:	bc 01       	movw	r22, r24
    8020:	cd 01       	movw	r24, r26
    8022:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8026:	dc 01       	movw	r26, r24
    8028:	cb 01       	movw	r24, r22
    802a:	f8 01       	movw	r30, r16
    802c:	91 83       	std	Z+1, r25	; 0x01
    802e:	80 83       	st	Z, r24
    8030:	27 c0       	rjmp	.+78     	; 0x8080 <pick_drop+0x1f8e>
    8032:	ce 01       	movw	r24, r28
    8034:	89 5e       	subi	r24, 0xE9	; 233
    8036:	9e 4f       	sbci	r25, 0xFE	; 254
    8038:	20 e7       	ldi	r18, 0x70	; 112
    803a:	31 e0       	ldi	r19, 0x01	; 1
    803c:	fc 01       	movw	r30, r24
    803e:	31 83       	std	Z+1, r19	; 0x01
    8040:	20 83       	st	Z, r18
    8042:	ce 01       	movw	r24, r28
    8044:	89 5e       	subi	r24, 0xE9	; 233
    8046:	9e 4f       	sbci	r25, 0xFE	; 254
    8048:	fc 01       	movw	r30, r24
    804a:	80 81       	ld	r24, Z
    804c:	91 81       	ldd	r25, Z+1	; 0x01
    804e:	8c 01       	movw	r16, r24
    8050:	c8 01       	movw	r24, r16
    8052:	01 97       	sbiw	r24, 0x01	; 1
    8054:	f1 f7       	brne	.-4      	; 0x8052 <pick_drop+0x1f60>
    8056:	8c 01       	movw	r16, r24
    8058:	ce 01       	movw	r24, r28
    805a:	89 5e       	subi	r24, 0xE9	; 233
    805c:	9e 4f       	sbci	r25, 0xFE	; 254
    805e:	fc 01       	movw	r30, r24
    8060:	11 83       	std	Z+1, r17	; 0x01
    8062:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8064:	ce 01       	movw	r24, r28
    8066:	8b 5e       	subi	r24, 0xEB	; 235
    8068:	9e 4f       	sbci	r25, 0xFE	; 254
    806a:	9e 01       	movw	r18, r28
    806c:	2b 5e       	subi	r18, 0xEB	; 235
    806e:	3e 4f       	sbci	r19, 0xFE	; 254
    8070:	f9 01       	movw	r30, r18
    8072:	20 81       	ld	r18, Z
    8074:	31 81       	ldd	r19, Z+1	; 0x01
    8076:	21 50       	subi	r18, 0x01	; 1
    8078:	30 40       	sbci	r19, 0x00	; 0
    807a:	fc 01       	movw	r30, r24
    807c:	31 83       	std	Z+1, r19	; 0x01
    807e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8080:	ce 01       	movw	r24, r28
    8082:	8b 5e       	subi	r24, 0xEB	; 235
    8084:	9e 4f       	sbci	r25, 0xFE	; 254
    8086:	fc 01       	movw	r30, r24
    8088:	80 81       	ld	r24, Z
    808a:	91 81       	ldd	r25, Z+1	; 0x01
    808c:	00 97       	sbiw	r24, 0x00	; 0
    808e:	89 f6       	brne	.-94     	; 0x8032 <pick_drop+0x1f40>
    8090:	2f c0       	rjmp	.+94     	; 0x80f0 <pick_drop+0x1ffe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8092:	8e 01       	movw	r16, r28
    8094:	0b 5e       	subi	r16, 0xEB	; 235
    8096:	1e 4f       	sbci	r17, 0xFE	; 254
    8098:	ce 01       	movw	r24, r28
    809a:	8f 5e       	subi	r24, 0xEF	; 239
    809c:	9e 4f       	sbci	r25, 0xFE	; 254
    809e:	fc 01       	movw	r30, r24
    80a0:	60 81       	ld	r22, Z
    80a2:	71 81       	ldd	r23, Z+1	; 0x01
    80a4:	82 81       	ldd	r24, Z+2	; 0x02
    80a6:	93 81       	ldd	r25, Z+3	; 0x03
    80a8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    80ac:	dc 01       	movw	r26, r24
    80ae:	cb 01       	movw	r24, r22
    80b0:	f8 01       	movw	r30, r16
    80b2:	91 83       	std	Z+1, r25	; 0x01
    80b4:	80 83       	st	Z, r24
    80b6:	ce 01       	movw	r24, r28
    80b8:	87 5e       	subi	r24, 0xE7	; 231
    80ba:	9e 4f       	sbci	r25, 0xFE	; 254
    80bc:	9e 01       	movw	r18, r28
    80be:	2b 5e       	subi	r18, 0xEB	; 235
    80c0:	3e 4f       	sbci	r19, 0xFE	; 254
    80c2:	f9 01       	movw	r30, r18
    80c4:	20 81       	ld	r18, Z
    80c6:	31 81       	ldd	r19, Z+1	; 0x01
    80c8:	fc 01       	movw	r30, r24
    80ca:	31 83       	std	Z+1, r19	; 0x01
    80cc:	20 83       	st	Z, r18
    80ce:	ce 01       	movw	r24, r28
    80d0:	87 5e       	subi	r24, 0xE7	; 231
    80d2:	9e 4f       	sbci	r25, 0xFE	; 254
    80d4:	fc 01       	movw	r30, r24
    80d6:	80 81       	ld	r24, Z
    80d8:	91 81       	ldd	r25, Z+1	; 0x01
    80da:	8c 01       	movw	r16, r24
    80dc:	c8 01       	movw	r24, r16
    80de:	01 97       	sbiw	r24, 0x01	; 1
    80e0:	f1 f7       	brne	.-4      	; 0x80de <pick_drop+0x1fec>
    80e2:	8c 01       	movw	r16, r24
    80e4:	ce 01       	movw	r24, r28
    80e6:	87 5e       	subi	r24, 0xE7	; 231
    80e8:	9e 4f       	sbci	r25, 0xFE	; 254
    80ea:	fc 01       	movw	r30, r24
    80ec:	11 83       	std	Z+1, r17	; 0x01
    80ee:	00 83       	st	Z, r16
			_delay_ms(50);
			forward_mm(10);
    80f0:	8a e0       	ldi	r24, 0x0A	; 10
    80f2:	90 e0       	ldi	r25, 0x00	; 0
    80f4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    80f8:	9e 01       	movw	r18, r28
    80fa:	25 5e       	subi	r18, 0xE5	; 229
    80fc:	3e 4f       	sbci	r19, 0xFE	; 254
    80fe:	80 e0       	ldi	r24, 0x00	; 0
    8100:	90 e0       	ldi	r25, 0x00	; 0
    8102:	a0 ea       	ldi	r26, 0xA0	; 160
    8104:	b1 e4       	ldi	r27, 0x41	; 65
    8106:	f9 01       	movw	r30, r18
    8108:	80 83       	st	Z, r24
    810a:	91 83       	std	Z+1, r25	; 0x01
    810c:	a2 83       	std	Z+2, r26	; 0x02
    810e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8110:	8e 01       	movw	r16, r28
    8112:	01 5e       	subi	r16, 0xE1	; 225
    8114:	1e 4f       	sbci	r17, 0xFE	; 254
    8116:	ce 01       	movw	r24, r28
    8118:	85 5e       	subi	r24, 0xE5	; 229
    811a:	9e 4f       	sbci	r25, 0xFE	; 254
    811c:	fc 01       	movw	r30, r24
    811e:	60 81       	ld	r22, Z
    8120:	71 81       	ldd	r23, Z+1	; 0x01
    8122:	82 81       	ldd	r24, Z+2	; 0x02
    8124:	93 81       	ldd	r25, Z+3	; 0x03
    8126:	26 e6       	ldi	r18, 0x66	; 102
    8128:	36 e6       	ldi	r19, 0x66	; 102
    812a:	46 e6       	ldi	r20, 0x66	; 102
    812c:	55 e4       	ldi	r21, 0x45	; 69
    812e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8132:	dc 01       	movw	r26, r24
    8134:	cb 01       	movw	r24, r22
    8136:	f8 01       	movw	r30, r16
    8138:	80 83       	st	Z, r24
    813a:	91 83       	std	Z+1, r25	; 0x01
    813c:	a2 83       	std	Z+2, r26	; 0x02
    813e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8140:	ce 01       	movw	r24, r28
    8142:	81 5e       	subi	r24, 0xE1	; 225
    8144:	9e 4f       	sbci	r25, 0xFE	; 254
    8146:	11 e0       	ldi	r17, 0x01	; 1
    8148:	fc 01       	movw	r30, r24
    814a:	60 81       	ld	r22, Z
    814c:	71 81       	ldd	r23, Z+1	; 0x01
    814e:	82 81       	ldd	r24, Z+2	; 0x02
    8150:	93 81       	ldd	r25, Z+3	; 0x03
    8152:	20 e0       	ldi	r18, 0x00	; 0
    8154:	30 e0       	ldi	r19, 0x00	; 0
    8156:	40 e8       	ldi	r20, 0x80	; 128
    8158:	5f e3       	ldi	r21, 0x3F	; 63
    815a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    815e:	88 23       	and	r24, r24
    8160:	0c f0       	brlt	.+2      	; 0x8164 <pick_drop+0x2072>
    8162:	10 e0       	ldi	r17, 0x00	; 0
    8164:	11 23       	and	r17, r17
    8166:	49 f0       	breq	.+18     	; 0x817a <pick_drop+0x2088>
		__ticks = 1;
    8168:	ce 01       	movw	r24, r28
    816a:	8d 5d       	subi	r24, 0xDD	; 221
    816c:	9e 4f       	sbci	r25, 0xFE	; 254
    816e:	21 e0       	ldi	r18, 0x01	; 1
    8170:	30 e0       	ldi	r19, 0x00	; 0
    8172:	fc 01       	movw	r30, r24
    8174:	31 83       	std	Z+1, r19	; 0x01
    8176:	20 83       	st	Z, r18
    8178:	74 c0       	rjmp	.+232    	; 0x8262 <pick_drop+0x2170>
	else if (__tmp > 65535)
    817a:	ce 01       	movw	r24, r28
    817c:	81 5e       	subi	r24, 0xE1	; 225
    817e:	9e 4f       	sbci	r25, 0xFE	; 254
    8180:	11 e0       	ldi	r17, 0x01	; 1
    8182:	fc 01       	movw	r30, r24
    8184:	60 81       	ld	r22, Z
    8186:	71 81       	ldd	r23, Z+1	; 0x01
    8188:	82 81       	ldd	r24, Z+2	; 0x02
    818a:	93 81       	ldd	r25, Z+3	; 0x03
    818c:	20 e0       	ldi	r18, 0x00	; 0
    818e:	3f ef       	ldi	r19, 0xFF	; 255
    8190:	4f e7       	ldi	r20, 0x7F	; 127
    8192:	57 e4       	ldi	r21, 0x47	; 71
    8194:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8198:	18 16       	cp	r1, r24
    819a:	0c f0       	brlt	.+2      	; 0x819e <pick_drop+0x20ac>
    819c:	10 e0       	ldi	r17, 0x00	; 0
    819e:	11 23       	and	r17, r17
    81a0:	09 f4       	brne	.+2      	; 0x81a4 <pick_drop+0x20b2>
    81a2:	4d c0       	rjmp	.+154    	; 0x823e <pick_drop+0x214c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    81a4:	ce 01       	movw	r24, r28
    81a6:	85 5e       	subi	r24, 0xE5	; 229
    81a8:	9e 4f       	sbci	r25, 0xFE	; 254
    81aa:	fc 01       	movw	r30, r24
    81ac:	60 81       	ld	r22, Z
    81ae:	71 81       	ldd	r23, Z+1	; 0x01
    81b0:	82 81       	ldd	r24, Z+2	; 0x02
    81b2:	93 81       	ldd	r25, Z+3	; 0x03
    81b4:	20 e0       	ldi	r18, 0x00	; 0
    81b6:	30 e0       	ldi	r19, 0x00	; 0
    81b8:	40 e2       	ldi	r20, 0x20	; 32
    81ba:	51 e4       	ldi	r21, 0x41	; 65
    81bc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    81c0:	dc 01       	movw	r26, r24
    81c2:	cb 01       	movw	r24, r22
    81c4:	8e 01       	movw	r16, r28
    81c6:	0d 5d       	subi	r16, 0xDD	; 221
    81c8:	1e 4f       	sbci	r17, 0xFE	; 254
    81ca:	bc 01       	movw	r22, r24
    81cc:	cd 01       	movw	r24, r26
    81ce:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    81d2:	dc 01       	movw	r26, r24
    81d4:	cb 01       	movw	r24, r22
    81d6:	f8 01       	movw	r30, r16
    81d8:	91 83       	std	Z+1, r25	; 0x01
    81da:	80 83       	st	Z, r24
    81dc:	27 c0       	rjmp	.+78     	; 0x822c <pick_drop+0x213a>
    81de:	ce 01       	movw	r24, r28
    81e0:	8b 5d       	subi	r24, 0xDB	; 219
    81e2:	9e 4f       	sbci	r25, 0xFE	; 254
    81e4:	20 e7       	ldi	r18, 0x70	; 112
    81e6:	31 e0       	ldi	r19, 0x01	; 1
    81e8:	fc 01       	movw	r30, r24
    81ea:	31 83       	std	Z+1, r19	; 0x01
    81ec:	20 83       	st	Z, r18
    81ee:	ce 01       	movw	r24, r28
    81f0:	8b 5d       	subi	r24, 0xDB	; 219
    81f2:	9e 4f       	sbci	r25, 0xFE	; 254
    81f4:	fc 01       	movw	r30, r24
    81f6:	80 81       	ld	r24, Z
    81f8:	91 81       	ldd	r25, Z+1	; 0x01
    81fa:	8c 01       	movw	r16, r24
    81fc:	c8 01       	movw	r24, r16
    81fe:	01 97       	sbiw	r24, 0x01	; 1
    8200:	f1 f7       	brne	.-4      	; 0x81fe <pick_drop+0x210c>
    8202:	8c 01       	movw	r16, r24
    8204:	ce 01       	movw	r24, r28
    8206:	8b 5d       	subi	r24, 0xDB	; 219
    8208:	9e 4f       	sbci	r25, 0xFE	; 254
    820a:	fc 01       	movw	r30, r24
    820c:	11 83       	std	Z+1, r17	; 0x01
    820e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8210:	ce 01       	movw	r24, r28
    8212:	8d 5d       	subi	r24, 0xDD	; 221
    8214:	9e 4f       	sbci	r25, 0xFE	; 254
    8216:	9e 01       	movw	r18, r28
    8218:	2d 5d       	subi	r18, 0xDD	; 221
    821a:	3e 4f       	sbci	r19, 0xFE	; 254
    821c:	f9 01       	movw	r30, r18
    821e:	20 81       	ld	r18, Z
    8220:	31 81       	ldd	r19, Z+1	; 0x01
    8222:	21 50       	subi	r18, 0x01	; 1
    8224:	30 40       	sbci	r19, 0x00	; 0
    8226:	fc 01       	movw	r30, r24
    8228:	31 83       	std	Z+1, r19	; 0x01
    822a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    822c:	ce 01       	movw	r24, r28
    822e:	8d 5d       	subi	r24, 0xDD	; 221
    8230:	9e 4f       	sbci	r25, 0xFE	; 254
    8232:	fc 01       	movw	r30, r24
    8234:	80 81       	ld	r24, Z
    8236:	91 81       	ldd	r25, Z+1	; 0x01
    8238:	00 97       	sbiw	r24, 0x00	; 0
    823a:	89 f6       	brne	.-94     	; 0x81de <pick_drop+0x20ec>
    823c:	2f c0       	rjmp	.+94     	; 0x829c <pick_drop+0x21aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    823e:	8e 01       	movw	r16, r28
    8240:	0d 5d       	subi	r16, 0xDD	; 221
    8242:	1e 4f       	sbci	r17, 0xFE	; 254
    8244:	ce 01       	movw	r24, r28
    8246:	81 5e       	subi	r24, 0xE1	; 225
    8248:	9e 4f       	sbci	r25, 0xFE	; 254
    824a:	fc 01       	movw	r30, r24
    824c:	60 81       	ld	r22, Z
    824e:	71 81       	ldd	r23, Z+1	; 0x01
    8250:	82 81       	ldd	r24, Z+2	; 0x02
    8252:	93 81       	ldd	r25, Z+3	; 0x03
    8254:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8258:	dc 01       	movw	r26, r24
    825a:	cb 01       	movw	r24, r22
    825c:	f8 01       	movw	r30, r16
    825e:	91 83       	std	Z+1, r25	; 0x01
    8260:	80 83       	st	Z, r24
    8262:	ce 01       	movw	r24, r28
    8264:	89 5d       	subi	r24, 0xD9	; 217
    8266:	9e 4f       	sbci	r25, 0xFE	; 254
    8268:	9e 01       	movw	r18, r28
    826a:	2d 5d       	subi	r18, 0xDD	; 221
    826c:	3e 4f       	sbci	r19, 0xFE	; 254
    826e:	f9 01       	movw	r30, r18
    8270:	20 81       	ld	r18, Z
    8272:	31 81       	ldd	r19, Z+1	; 0x01
    8274:	fc 01       	movw	r30, r24
    8276:	31 83       	std	Z+1, r19	; 0x01
    8278:	20 83       	st	Z, r18
    827a:	ce 01       	movw	r24, r28
    827c:	89 5d       	subi	r24, 0xD9	; 217
    827e:	9e 4f       	sbci	r25, 0xFE	; 254
    8280:	fc 01       	movw	r30, r24
    8282:	80 81       	ld	r24, Z
    8284:	91 81       	ldd	r25, Z+1	; 0x01
    8286:	8c 01       	movw	r16, r24
    8288:	c8 01       	movw	r24, r16
    828a:	01 97       	sbiw	r24, 0x01	; 1
    828c:	f1 f7       	brne	.-4      	; 0x828a <pick_drop+0x2198>
    828e:	8c 01       	movw	r16, r24
    8290:	ce 01       	movw	r24, r28
    8292:	89 5d       	subi	r24, 0xD9	; 217
    8294:	9e 4f       	sbci	r25, 0xFE	; 254
    8296:	fc 01       	movw	r30, r24
    8298:	11 83       	std	Z+1, r17	; 0x01
    829a:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    829c:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    82a0:	9e 01       	movw	r18, r28
    82a2:	27 5d       	subi	r18, 0xD7	; 215
    82a4:	3e 4f       	sbci	r19, 0xFE	; 254
    82a6:	80 e0       	ldi	r24, 0x00	; 0
    82a8:	90 e0       	ldi	r25, 0x00	; 0
    82aa:	a8 ec       	ldi	r26, 0xC8	; 200
    82ac:	b2 e4       	ldi	r27, 0x42	; 66
    82ae:	f9 01       	movw	r30, r18
    82b0:	80 83       	st	Z, r24
    82b2:	91 83       	std	Z+1, r25	; 0x01
    82b4:	a2 83       	std	Z+2, r26	; 0x02
    82b6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    82b8:	8e 01       	movw	r16, r28
    82ba:	03 5d       	subi	r16, 0xD3	; 211
    82bc:	1e 4f       	sbci	r17, 0xFE	; 254
    82be:	ce 01       	movw	r24, r28
    82c0:	87 5d       	subi	r24, 0xD7	; 215
    82c2:	9e 4f       	sbci	r25, 0xFE	; 254
    82c4:	fc 01       	movw	r30, r24
    82c6:	60 81       	ld	r22, Z
    82c8:	71 81       	ldd	r23, Z+1	; 0x01
    82ca:	82 81       	ldd	r24, Z+2	; 0x02
    82cc:	93 81       	ldd	r25, Z+3	; 0x03
    82ce:	26 e6       	ldi	r18, 0x66	; 102
    82d0:	36 e6       	ldi	r19, 0x66	; 102
    82d2:	46 e6       	ldi	r20, 0x66	; 102
    82d4:	55 e4       	ldi	r21, 0x45	; 69
    82d6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    82da:	dc 01       	movw	r26, r24
    82dc:	cb 01       	movw	r24, r22
    82de:	f8 01       	movw	r30, r16
    82e0:	80 83       	st	Z, r24
    82e2:	91 83       	std	Z+1, r25	; 0x01
    82e4:	a2 83       	std	Z+2, r26	; 0x02
    82e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    82e8:	ce 01       	movw	r24, r28
    82ea:	83 5d       	subi	r24, 0xD3	; 211
    82ec:	9e 4f       	sbci	r25, 0xFE	; 254
    82ee:	11 e0       	ldi	r17, 0x01	; 1
    82f0:	fc 01       	movw	r30, r24
    82f2:	60 81       	ld	r22, Z
    82f4:	71 81       	ldd	r23, Z+1	; 0x01
    82f6:	82 81       	ldd	r24, Z+2	; 0x02
    82f8:	93 81       	ldd	r25, Z+3	; 0x03
    82fa:	20 e0       	ldi	r18, 0x00	; 0
    82fc:	30 e0       	ldi	r19, 0x00	; 0
    82fe:	40 e8       	ldi	r20, 0x80	; 128
    8300:	5f e3       	ldi	r21, 0x3F	; 63
    8302:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    8306:	88 23       	and	r24, r24
    8308:	0c f0       	brlt	.+2      	; 0x830c <pick_drop+0x221a>
    830a:	10 e0       	ldi	r17, 0x00	; 0
    830c:	11 23       	and	r17, r17
    830e:	49 f0       	breq	.+18     	; 0x8322 <pick_drop+0x2230>
		__ticks = 1;
    8310:	ce 01       	movw	r24, r28
    8312:	8f 5c       	subi	r24, 0xCF	; 207
    8314:	9e 4f       	sbci	r25, 0xFE	; 254
    8316:	21 e0       	ldi	r18, 0x01	; 1
    8318:	30 e0       	ldi	r19, 0x00	; 0
    831a:	fc 01       	movw	r30, r24
    831c:	31 83       	std	Z+1, r19	; 0x01
    831e:	20 83       	st	Z, r18
    8320:	74 c0       	rjmp	.+232    	; 0x840a <pick_drop+0x2318>
	else if (__tmp > 65535)
    8322:	ce 01       	movw	r24, r28
    8324:	83 5d       	subi	r24, 0xD3	; 211
    8326:	9e 4f       	sbci	r25, 0xFE	; 254
    8328:	11 e0       	ldi	r17, 0x01	; 1
    832a:	fc 01       	movw	r30, r24
    832c:	60 81       	ld	r22, Z
    832e:	71 81       	ldd	r23, Z+1	; 0x01
    8330:	82 81       	ldd	r24, Z+2	; 0x02
    8332:	93 81       	ldd	r25, Z+3	; 0x03
    8334:	20 e0       	ldi	r18, 0x00	; 0
    8336:	3f ef       	ldi	r19, 0xFF	; 255
    8338:	4f e7       	ldi	r20, 0x7F	; 127
    833a:	57 e4       	ldi	r21, 0x47	; 71
    833c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8340:	18 16       	cp	r1, r24
    8342:	0c f0       	brlt	.+2      	; 0x8346 <pick_drop+0x2254>
    8344:	10 e0       	ldi	r17, 0x00	; 0
    8346:	11 23       	and	r17, r17
    8348:	09 f4       	brne	.+2      	; 0x834c <pick_drop+0x225a>
    834a:	4d c0       	rjmp	.+154    	; 0x83e6 <pick_drop+0x22f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    834c:	ce 01       	movw	r24, r28
    834e:	87 5d       	subi	r24, 0xD7	; 215
    8350:	9e 4f       	sbci	r25, 0xFE	; 254
    8352:	fc 01       	movw	r30, r24
    8354:	60 81       	ld	r22, Z
    8356:	71 81       	ldd	r23, Z+1	; 0x01
    8358:	82 81       	ldd	r24, Z+2	; 0x02
    835a:	93 81       	ldd	r25, Z+3	; 0x03
    835c:	20 e0       	ldi	r18, 0x00	; 0
    835e:	30 e0       	ldi	r19, 0x00	; 0
    8360:	40 e2       	ldi	r20, 0x20	; 32
    8362:	51 e4       	ldi	r21, 0x41	; 65
    8364:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8368:	dc 01       	movw	r26, r24
    836a:	cb 01       	movw	r24, r22
    836c:	8e 01       	movw	r16, r28
    836e:	0f 5c       	subi	r16, 0xCF	; 207
    8370:	1e 4f       	sbci	r17, 0xFE	; 254
    8372:	bc 01       	movw	r22, r24
    8374:	cd 01       	movw	r24, r26
    8376:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    837a:	dc 01       	movw	r26, r24
    837c:	cb 01       	movw	r24, r22
    837e:	f8 01       	movw	r30, r16
    8380:	91 83       	std	Z+1, r25	; 0x01
    8382:	80 83       	st	Z, r24
    8384:	27 c0       	rjmp	.+78     	; 0x83d4 <pick_drop+0x22e2>
    8386:	ce 01       	movw	r24, r28
    8388:	8d 5c       	subi	r24, 0xCD	; 205
    838a:	9e 4f       	sbci	r25, 0xFE	; 254
    838c:	20 e7       	ldi	r18, 0x70	; 112
    838e:	31 e0       	ldi	r19, 0x01	; 1
    8390:	fc 01       	movw	r30, r24
    8392:	31 83       	std	Z+1, r19	; 0x01
    8394:	20 83       	st	Z, r18
    8396:	ce 01       	movw	r24, r28
    8398:	8d 5c       	subi	r24, 0xCD	; 205
    839a:	9e 4f       	sbci	r25, 0xFE	; 254
    839c:	fc 01       	movw	r30, r24
    839e:	80 81       	ld	r24, Z
    83a0:	91 81       	ldd	r25, Z+1	; 0x01
    83a2:	8c 01       	movw	r16, r24
    83a4:	c8 01       	movw	r24, r16
    83a6:	01 97       	sbiw	r24, 0x01	; 1
    83a8:	f1 f7       	brne	.-4      	; 0x83a6 <pick_drop+0x22b4>
    83aa:	8c 01       	movw	r16, r24
    83ac:	ce 01       	movw	r24, r28
    83ae:	8d 5c       	subi	r24, 0xCD	; 205
    83b0:	9e 4f       	sbci	r25, 0xFE	; 254
    83b2:	fc 01       	movw	r30, r24
    83b4:	11 83       	std	Z+1, r17	; 0x01
    83b6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83b8:	ce 01       	movw	r24, r28
    83ba:	8f 5c       	subi	r24, 0xCF	; 207
    83bc:	9e 4f       	sbci	r25, 0xFE	; 254
    83be:	9e 01       	movw	r18, r28
    83c0:	2f 5c       	subi	r18, 0xCF	; 207
    83c2:	3e 4f       	sbci	r19, 0xFE	; 254
    83c4:	f9 01       	movw	r30, r18
    83c6:	20 81       	ld	r18, Z
    83c8:	31 81       	ldd	r19, Z+1	; 0x01
    83ca:	21 50       	subi	r18, 0x01	; 1
    83cc:	30 40       	sbci	r19, 0x00	; 0
    83ce:	fc 01       	movw	r30, r24
    83d0:	31 83       	std	Z+1, r19	; 0x01
    83d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83d4:	ce 01       	movw	r24, r28
    83d6:	8f 5c       	subi	r24, 0xCF	; 207
    83d8:	9e 4f       	sbci	r25, 0xFE	; 254
    83da:	fc 01       	movw	r30, r24
    83dc:	80 81       	ld	r24, Z
    83de:	91 81       	ldd	r25, Z+1	; 0x01
    83e0:	00 97       	sbiw	r24, 0x00	; 0
    83e2:	89 f6       	brne	.-94     	; 0x8386 <pick_drop+0x2294>
    83e4:	2f c0       	rjmp	.+94     	; 0x8444 <pick_drop+0x2352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    83e6:	8e 01       	movw	r16, r28
    83e8:	0f 5c       	subi	r16, 0xCF	; 207
    83ea:	1e 4f       	sbci	r17, 0xFE	; 254
    83ec:	ce 01       	movw	r24, r28
    83ee:	83 5d       	subi	r24, 0xD3	; 211
    83f0:	9e 4f       	sbci	r25, 0xFE	; 254
    83f2:	fc 01       	movw	r30, r24
    83f4:	60 81       	ld	r22, Z
    83f6:	71 81       	ldd	r23, Z+1	; 0x01
    83f8:	82 81       	ldd	r24, Z+2	; 0x02
    83fa:	93 81       	ldd	r25, Z+3	; 0x03
    83fc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8400:	dc 01       	movw	r26, r24
    8402:	cb 01       	movw	r24, r22
    8404:	f8 01       	movw	r30, r16
    8406:	91 83       	std	Z+1, r25	; 0x01
    8408:	80 83       	st	Z, r24
    840a:	ce 01       	movw	r24, r28
    840c:	8b 5c       	subi	r24, 0xCB	; 203
    840e:	9e 4f       	sbci	r25, 0xFE	; 254
    8410:	9e 01       	movw	r18, r28
    8412:	2f 5c       	subi	r18, 0xCF	; 207
    8414:	3e 4f       	sbci	r19, 0xFE	; 254
    8416:	f9 01       	movw	r30, r18
    8418:	20 81       	ld	r18, Z
    841a:	31 81       	ldd	r19, Z+1	; 0x01
    841c:	fc 01       	movw	r30, r24
    841e:	31 83       	std	Z+1, r19	; 0x01
    8420:	20 83       	st	Z, r18
    8422:	ce 01       	movw	r24, r28
    8424:	8b 5c       	subi	r24, 0xCB	; 203
    8426:	9e 4f       	sbci	r25, 0xFE	; 254
    8428:	fc 01       	movw	r30, r24
    842a:	80 81       	ld	r24, Z
    842c:	91 81       	ldd	r25, Z+1	; 0x01
    842e:	8c 01       	movw	r16, r24
    8430:	c8 01       	movw	r24, r16
    8432:	01 97       	sbiw	r24, 0x01	; 1
    8434:	f1 f7       	brne	.-4      	; 0x8432 <pick_drop+0x2340>
    8436:	8c 01       	movw	r16, r24
    8438:	ce 01       	movw	r24, r28
    843a:	8b 5c       	subi	r24, 0xCB	; 203
    843c:	9e 4f       	sbci	r25, 0xFE	; 254
    843e:	fc 01       	movw	r30, r24
    8440:	11 83       	std	Z+1, r17	; 0x01
    8442:	00 83       	st	Z, r16
			_delay_ms(100);
			correct_left();
    8444:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
			back_mm(pdback);
    8448:	89 81       	ldd	r24, Y+1	; 0x01
    844a:	9a 81       	ldd	r25, Y+2	; 0x02
    844c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8450:	9e 01       	movw	r18, r28
    8452:	29 5c       	subi	r18, 0xC9	; 201
    8454:	3e 4f       	sbci	r19, 0xFE	; 254
    8456:	80 e0       	ldi	r24, 0x00	; 0
    8458:	90 e0       	ldi	r25, 0x00	; 0
    845a:	a0 ea       	ldi	r26, 0xA0	; 160
    845c:	b1 e4       	ldi	r27, 0x41	; 65
    845e:	f9 01       	movw	r30, r18
    8460:	80 83       	st	Z, r24
    8462:	91 83       	std	Z+1, r25	; 0x01
    8464:	a2 83       	std	Z+2, r26	; 0x02
    8466:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8468:	8e 01       	movw	r16, r28
    846a:	05 5c       	subi	r16, 0xC5	; 197
    846c:	1e 4f       	sbci	r17, 0xFE	; 254
    846e:	ce 01       	movw	r24, r28
    8470:	89 5c       	subi	r24, 0xC9	; 201
    8472:	9e 4f       	sbci	r25, 0xFE	; 254
    8474:	fc 01       	movw	r30, r24
    8476:	60 81       	ld	r22, Z
    8478:	71 81       	ldd	r23, Z+1	; 0x01
    847a:	82 81       	ldd	r24, Z+2	; 0x02
    847c:	93 81       	ldd	r25, Z+3	; 0x03
    847e:	26 e6       	ldi	r18, 0x66	; 102
    8480:	36 e6       	ldi	r19, 0x66	; 102
    8482:	46 e6       	ldi	r20, 0x66	; 102
    8484:	55 e4       	ldi	r21, 0x45	; 69
    8486:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    848a:	dc 01       	movw	r26, r24
    848c:	cb 01       	movw	r24, r22
    848e:	f8 01       	movw	r30, r16
    8490:	80 83       	st	Z, r24
    8492:	91 83       	std	Z+1, r25	; 0x01
    8494:	a2 83       	std	Z+2, r26	; 0x02
    8496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8498:	ce 01       	movw	r24, r28
    849a:	85 5c       	subi	r24, 0xC5	; 197
    849c:	9e 4f       	sbci	r25, 0xFE	; 254
    849e:	11 e0       	ldi	r17, 0x01	; 1
    84a0:	fc 01       	movw	r30, r24
    84a2:	60 81       	ld	r22, Z
    84a4:	71 81       	ldd	r23, Z+1	; 0x01
    84a6:	82 81       	ldd	r24, Z+2	; 0x02
    84a8:	93 81       	ldd	r25, Z+3	; 0x03
    84aa:	20 e0       	ldi	r18, 0x00	; 0
    84ac:	30 e0       	ldi	r19, 0x00	; 0
    84ae:	40 e8       	ldi	r20, 0x80	; 128
    84b0:	5f e3       	ldi	r21, 0x3F	; 63
    84b2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    84b6:	88 23       	and	r24, r24
    84b8:	0c f0       	brlt	.+2      	; 0x84bc <pick_drop+0x23ca>
    84ba:	10 e0       	ldi	r17, 0x00	; 0
    84bc:	11 23       	and	r17, r17
    84be:	49 f0       	breq	.+18     	; 0x84d2 <pick_drop+0x23e0>
		__ticks = 1;
    84c0:	ce 01       	movw	r24, r28
    84c2:	81 5c       	subi	r24, 0xC1	; 193
    84c4:	9e 4f       	sbci	r25, 0xFE	; 254
    84c6:	21 e0       	ldi	r18, 0x01	; 1
    84c8:	30 e0       	ldi	r19, 0x00	; 0
    84ca:	fc 01       	movw	r30, r24
    84cc:	31 83       	std	Z+1, r19	; 0x01
    84ce:	20 83       	st	Z, r18
    84d0:	75 c0       	rjmp	.+234    	; 0x85bc <pick_drop+0x24ca>
	else if (__tmp > 65535)
    84d2:	ce 01       	movw	r24, r28
    84d4:	85 5c       	subi	r24, 0xC5	; 197
    84d6:	9e 4f       	sbci	r25, 0xFE	; 254
    84d8:	11 e0       	ldi	r17, 0x01	; 1
    84da:	fc 01       	movw	r30, r24
    84dc:	60 81       	ld	r22, Z
    84de:	71 81       	ldd	r23, Z+1	; 0x01
    84e0:	82 81       	ldd	r24, Z+2	; 0x02
    84e2:	93 81       	ldd	r25, Z+3	; 0x03
    84e4:	20 e0       	ldi	r18, 0x00	; 0
    84e6:	3f ef       	ldi	r19, 0xFF	; 255
    84e8:	4f e7       	ldi	r20, 0x7F	; 127
    84ea:	57 e4       	ldi	r21, 0x47	; 71
    84ec:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    84f0:	18 16       	cp	r1, r24
    84f2:	0c f0       	brlt	.+2      	; 0x84f6 <pick_drop+0x2404>
    84f4:	10 e0       	ldi	r17, 0x00	; 0
    84f6:	11 23       	and	r17, r17
    84f8:	09 f4       	brne	.+2      	; 0x84fc <pick_drop+0x240a>
    84fa:	4e c0       	rjmp	.+156    	; 0x8598 <pick_drop+0x24a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    84fc:	ce 01       	movw	r24, r28
    84fe:	89 5c       	subi	r24, 0xC9	; 201
    8500:	9e 4f       	sbci	r25, 0xFE	; 254
    8502:	fc 01       	movw	r30, r24
    8504:	60 81       	ld	r22, Z
    8506:	71 81       	ldd	r23, Z+1	; 0x01
    8508:	82 81       	ldd	r24, Z+2	; 0x02
    850a:	93 81       	ldd	r25, Z+3	; 0x03
    850c:	20 e0       	ldi	r18, 0x00	; 0
    850e:	30 e0       	ldi	r19, 0x00	; 0
    8510:	40 e2       	ldi	r20, 0x20	; 32
    8512:	51 e4       	ldi	r21, 0x41	; 65
    8514:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8518:	dc 01       	movw	r26, r24
    851a:	cb 01       	movw	r24, r22
    851c:	8e 01       	movw	r16, r28
    851e:	01 5c       	subi	r16, 0xC1	; 193
    8520:	1e 4f       	sbci	r17, 0xFE	; 254
    8522:	bc 01       	movw	r22, r24
    8524:	cd 01       	movw	r24, r26
    8526:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    852a:	dc 01       	movw	r26, r24
    852c:	cb 01       	movw	r24, r22
    852e:	f8 01       	movw	r30, r16
    8530:	91 83       	std	Z+1, r25	; 0x01
    8532:	80 83       	st	Z, r24
    8534:	27 c0       	rjmp	.+78     	; 0x8584 <pick_drop+0x2492>
    8536:	ce 01       	movw	r24, r28
    8538:	8f 5b       	subi	r24, 0xBF	; 191
    853a:	9e 4f       	sbci	r25, 0xFE	; 254
    853c:	20 e7       	ldi	r18, 0x70	; 112
    853e:	31 e0       	ldi	r19, 0x01	; 1
    8540:	fc 01       	movw	r30, r24
    8542:	31 83       	std	Z+1, r19	; 0x01
    8544:	20 83       	st	Z, r18
    8546:	ce 01       	movw	r24, r28
    8548:	8f 5b       	subi	r24, 0xBF	; 191
    854a:	9e 4f       	sbci	r25, 0xFE	; 254
    854c:	fc 01       	movw	r30, r24
    854e:	80 81       	ld	r24, Z
    8550:	91 81       	ldd	r25, Z+1	; 0x01
    8552:	8c 01       	movw	r16, r24
    8554:	c8 01       	movw	r24, r16
    8556:	01 97       	sbiw	r24, 0x01	; 1
    8558:	f1 f7       	brne	.-4      	; 0x8556 <pick_drop+0x2464>
    855a:	8c 01       	movw	r16, r24
    855c:	ce 01       	movw	r24, r28
    855e:	8f 5b       	subi	r24, 0xBF	; 191
    8560:	9e 4f       	sbci	r25, 0xFE	; 254
    8562:	fc 01       	movw	r30, r24
    8564:	11 83       	std	Z+1, r17	; 0x01
    8566:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8568:	ce 01       	movw	r24, r28
    856a:	81 5c       	subi	r24, 0xC1	; 193
    856c:	9e 4f       	sbci	r25, 0xFE	; 254
    856e:	9e 01       	movw	r18, r28
    8570:	21 5c       	subi	r18, 0xC1	; 193
    8572:	3e 4f       	sbci	r19, 0xFE	; 254
    8574:	f9 01       	movw	r30, r18
    8576:	20 81       	ld	r18, Z
    8578:	31 81       	ldd	r19, Z+1	; 0x01
    857a:	21 50       	subi	r18, 0x01	; 1
    857c:	30 40       	sbci	r19, 0x00	; 0
    857e:	fc 01       	movw	r30, r24
    8580:	31 83       	std	Z+1, r19	; 0x01
    8582:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8584:	ce 01       	movw	r24, r28
    8586:	81 5c       	subi	r24, 0xC1	; 193
    8588:	9e 4f       	sbci	r25, 0xFE	; 254
    858a:	fc 01       	movw	r30, r24
    858c:	80 81       	ld	r24, Z
    858e:	91 81       	ldd	r25, Z+1	; 0x01
    8590:	00 97       	sbiw	r24, 0x00	; 0
    8592:	89 f6       	brne	.-94     	; 0x8536 <pick_drop+0x2444>
    8594:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8598:	8e 01       	movw	r16, r28
    859a:	01 5c       	subi	r16, 0xC1	; 193
    859c:	1e 4f       	sbci	r17, 0xFE	; 254
    859e:	ce 01       	movw	r24, r28
    85a0:	85 5c       	subi	r24, 0xC5	; 197
    85a2:	9e 4f       	sbci	r25, 0xFE	; 254
    85a4:	fc 01       	movw	r30, r24
    85a6:	60 81       	ld	r22, Z
    85a8:	71 81       	ldd	r23, Z+1	; 0x01
    85aa:	82 81       	ldd	r24, Z+2	; 0x02
    85ac:	93 81       	ldd	r25, Z+3	; 0x03
    85ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    85b2:	dc 01       	movw	r26, r24
    85b4:	cb 01       	movw	r24, r22
    85b6:	f8 01       	movw	r30, r16
    85b8:	91 83       	std	Z+1, r25	; 0x01
    85ba:	80 83       	st	Z, r24
    85bc:	ce 01       	movw	r24, r28
    85be:	8d 5b       	subi	r24, 0xBD	; 189
    85c0:	9e 4f       	sbci	r25, 0xFE	; 254
    85c2:	9e 01       	movw	r18, r28
    85c4:	21 5c       	subi	r18, 0xC1	; 193
    85c6:	3e 4f       	sbci	r19, 0xFE	; 254
    85c8:	f9 01       	movw	r30, r18
    85ca:	20 81       	ld	r18, Z
    85cc:	31 81       	ldd	r19, Z+1	; 0x01
    85ce:	fc 01       	movw	r30, r24
    85d0:	31 83       	std	Z+1, r19	; 0x01
    85d2:	20 83       	st	Z, r18
    85d4:	ce 01       	movw	r24, r28
    85d6:	8d 5b       	subi	r24, 0xBD	; 189
    85d8:	9e 4f       	sbci	r25, 0xFE	; 254
    85da:	fc 01       	movw	r30, r24
    85dc:	80 81       	ld	r24, Z
    85de:	91 81       	ldd	r25, Z+1	; 0x01
    85e0:	8c 01       	movw	r16, r24
    85e2:	c8 01       	movw	r24, r16
    85e4:	01 97       	sbiw	r24, 0x01	; 1
    85e6:	f1 f7       	brne	.-4      	; 0x85e4 <pick_drop+0x24f2>
    85e8:	8c 01       	movw	r16, r24
    85ea:	ce 01       	movw	r24, r28
    85ec:	8d 5b       	subi	r24, 0xBD	; 189
    85ee:	9e 4f       	sbci	r25, 0xFE	; 254
    85f0:	fc 01       	movw	r30, r24
    85f2:	11 83       	std	Z+1, r17	; 0x01
    85f4:	00 83       	st	Z, r16
    85f6:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			_delay_ms(20);
			}
			else if(master_path[node-1] == 'N')
    85fa:	80 91 4f 03 	lds	r24, 0x034F
    85fe:	90 91 50 03 	lds	r25, 0x0350
    8602:	01 97       	sbiw	r24, 0x01	; 1
    8604:	8d 5a       	subi	r24, 0xAD	; 173
    8606:	9c 4f       	sbci	r25, 0xFC	; 252
    8608:	fc 01       	movw	r30, r24
    860a:	80 81       	ld	r24, Z
    860c:	8e 34       	cpi	r24, 0x4E	; 78
    860e:	09 f0       	breq	.+2      	; 0x8612 <pick_drop+0x2520>
    8610:	59 c3       	rjmp	.+1714   	; 0x8cc4 <pick_drop+0x2bd2>
			{
				forward_mm(140);
    8612:	8c e8       	ldi	r24, 0x8C	; 140
    8614:	90 e0       	ldi	r25, 0x00	; 0
    8616:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    861a:	9e 01       	movw	r18, r28
    861c:	2b 5b       	subi	r18, 0xBB	; 187
    861e:	3e 4f       	sbci	r19, 0xFE	; 254
    8620:	80 e0       	ldi	r24, 0x00	; 0
    8622:	90 e0       	ldi	r25, 0x00	; 0
    8624:	a0 ea       	ldi	r26, 0xA0	; 160
    8626:	b1 e4       	ldi	r27, 0x41	; 65
    8628:	f9 01       	movw	r30, r18
    862a:	80 83       	st	Z, r24
    862c:	91 83       	std	Z+1, r25	; 0x01
    862e:	a2 83       	std	Z+2, r26	; 0x02
    8630:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8632:	8e 01       	movw	r16, r28
    8634:	07 5b       	subi	r16, 0xB7	; 183
    8636:	1e 4f       	sbci	r17, 0xFE	; 254
    8638:	ce 01       	movw	r24, r28
    863a:	8b 5b       	subi	r24, 0xBB	; 187
    863c:	9e 4f       	sbci	r25, 0xFE	; 254
    863e:	fc 01       	movw	r30, r24
    8640:	60 81       	ld	r22, Z
    8642:	71 81       	ldd	r23, Z+1	; 0x01
    8644:	82 81       	ldd	r24, Z+2	; 0x02
    8646:	93 81       	ldd	r25, Z+3	; 0x03
    8648:	26 e6       	ldi	r18, 0x66	; 102
    864a:	36 e6       	ldi	r19, 0x66	; 102
    864c:	46 e6       	ldi	r20, 0x66	; 102
    864e:	55 e4       	ldi	r21, 0x45	; 69
    8650:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8654:	dc 01       	movw	r26, r24
    8656:	cb 01       	movw	r24, r22
    8658:	f8 01       	movw	r30, r16
    865a:	80 83       	st	Z, r24
    865c:	91 83       	std	Z+1, r25	; 0x01
    865e:	a2 83       	std	Z+2, r26	; 0x02
    8660:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8662:	ce 01       	movw	r24, r28
    8664:	87 5b       	subi	r24, 0xB7	; 183
    8666:	9e 4f       	sbci	r25, 0xFE	; 254
    8668:	11 e0       	ldi	r17, 0x01	; 1
    866a:	fc 01       	movw	r30, r24
    866c:	60 81       	ld	r22, Z
    866e:	71 81       	ldd	r23, Z+1	; 0x01
    8670:	82 81       	ldd	r24, Z+2	; 0x02
    8672:	93 81       	ldd	r25, Z+3	; 0x03
    8674:	20 e0       	ldi	r18, 0x00	; 0
    8676:	30 e0       	ldi	r19, 0x00	; 0
    8678:	40 e8       	ldi	r20, 0x80	; 128
    867a:	5f e3       	ldi	r21, 0x3F	; 63
    867c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    8680:	88 23       	and	r24, r24
    8682:	0c f0       	brlt	.+2      	; 0x8686 <pick_drop+0x2594>
    8684:	10 e0       	ldi	r17, 0x00	; 0
    8686:	11 23       	and	r17, r17
    8688:	49 f0       	breq	.+18     	; 0x869c <pick_drop+0x25aa>
		__ticks = 1;
    868a:	ce 01       	movw	r24, r28
    868c:	83 5b       	subi	r24, 0xB3	; 179
    868e:	9e 4f       	sbci	r25, 0xFE	; 254
    8690:	21 e0       	ldi	r18, 0x01	; 1
    8692:	30 e0       	ldi	r19, 0x00	; 0
    8694:	fc 01       	movw	r30, r24
    8696:	31 83       	std	Z+1, r19	; 0x01
    8698:	20 83       	st	Z, r18
    869a:	74 c0       	rjmp	.+232    	; 0x8784 <pick_drop+0x2692>
	else if (__tmp > 65535)
    869c:	ce 01       	movw	r24, r28
    869e:	87 5b       	subi	r24, 0xB7	; 183
    86a0:	9e 4f       	sbci	r25, 0xFE	; 254
    86a2:	11 e0       	ldi	r17, 0x01	; 1
    86a4:	fc 01       	movw	r30, r24
    86a6:	60 81       	ld	r22, Z
    86a8:	71 81       	ldd	r23, Z+1	; 0x01
    86aa:	82 81       	ldd	r24, Z+2	; 0x02
    86ac:	93 81       	ldd	r25, Z+3	; 0x03
    86ae:	20 e0       	ldi	r18, 0x00	; 0
    86b0:	3f ef       	ldi	r19, 0xFF	; 255
    86b2:	4f e7       	ldi	r20, 0x7F	; 127
    86b4:	57 e4       	ldi	r21, 0x47	; 71
    86b6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    86ba:	18 16       	cp	r1, r24
    86bc:	0c f0       	brlt	.+2      	; 0x86c0 <pick_drop+0x25ce>
    86be:	10 e0       	ldi	r17, 0x00	; 0
    86c0:	11 23       	and	r17, r17
    86c2:	09 f4       	brne	.+2      	; 0x86c6 <pick_drop+0x25d4>
    86c4:	4d c0       	rjmp	.+154    	; 0x8760 <pick_drop+0x266e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    86c6:	ce 01       	movw	r24, r28
    86c8:	8b 5b       	subi	r24, 0xBB	; 187
    86ca:	9e 4f       	sbci	r25, 0xFE	; 254
    86cc:	fc 01       	movw	r30, r24
    86ce:	60 81       	ld	r22, Z
    86d0:	71 81       	ldd	r23, Z+1	; 0x01
    86d2:	82 81       	ldd	r24, Z+2	; 0x02
    86d4:	93 81       	ldd	r25, Z+3	; 0x03
    86d6:	20 e0       	ldi	r18, 0x00	; 0
    86d8:	30 e0       	ldi	r19, 0x00	; 0
    86da:	40 e2       	ldi	r20, 0x20	; 32
    86dc:	51 e4       	ldi	r21, 0x41	; 65
    86de:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    86e2:	dc 01       	movw	r26, r24
    86e4:	cb 01       	movw	r24, r22
    86e6:	8e 01       	movw	r16, r28
    86e8:	03 5b       	subi	r16, 0xB3	; 179
    86ea:	1e 4f       	sbci	r17, 0xFE	; 254
    86ec:	bc 01       	movw	r22, r24
    86ee:	cd 01       	movw	r24, r26
    86f0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    86f4:	dc 01       	movw	r26, r24
    86f6:	cb 01       	movw	r24, r22
    86f8:	f8 01       	movw	r30, r16
    86fa:	91 83       	std	Z+1, r25	; 0x01
    86fc:	80 83       	st	Z, r24
    86fe:	27 c0       	rjmp	.+78     	; 0x874e <pick_drop+0x265c>
    8700:	ce 01       	movw	r24, r28
    8702:	81 5b       	subi	r24, 0xB1	; 177
    8704:	9e 4f       	sbci	r25, 0xFE	; 254
    8706:	20 e7       	ldi	r18, 0x70	; 112
    8708:	31 e0       	ldi	r19, 0x01	; 1
    870a:	fc 01       	movw	r30, r24
    870c:	31 83       	std	Z+1, r19	; 0x01
    870e:	20 83       	st	Z, r18
    8710:	ce 01       	movw	r24, r28
    8712:	81 5b       	subi	r24, 0xB1	; 177
    8714:	9e 4f       	sbci	r25, 0xFE	; 254
    8716:	fc 01       	movw	r30, r24
    8718:	80 81       	ld	r24, Z
    871a:	91 81       	ldd	r25, Z+1	; 0x01
    871c:	8c 01       	movw	r16, r24
    871e:	c8 01       	movw	r24, r16
    8720:	01 97       	sbiw	r24, 0x01	; 1
    8722:	f1 f7       	brne	.-4      	; 0x8720 <pick_drop+0x262e>
    8724:	8c 01       	movw	r16, r24
    8726:	ce 01       	movw	r24, r28
    8728:	81 5b       	subi	r24, 0xB1	; 177
    872a:	9e 4f       	sbci	r25, 0xFE	; 254
    872c:	fc 01       	movw	r30, r24
    872e:	11 83       	std	Z+1, r17	; 0x01
    8730:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8732:	ce 01       	movw	r24, r28
    8734:	83 5b       	subi	r24, 0xB3	; 179
    8736:	9e 4f       	sbci	r25, 0xFE	; 254
    8738:	9e 01       	movw	r18, r28
    873a:	23 5b       	subi	r18, 0xB3	; 179
    873c:	3e 4f       	sbci	r19, 0xFE	; 254
    873e:	f9 01       	movw	r30, r18
    8740:	20 81       	ld	r18, Z
    8742:	31 81       	ldd	r19, Z+1	; 0x01
    8744:	21 50       	subi	r18, 0x01	; 1
    8746:	30 40       	sbci	r19, 0x00	; 0
    8748:	fc 01       	movw	r30, r24
    874a:	31 83       	std	Z+1, r19	; 0x01
    874c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    874e:	ce 01       	movw	r24, r28
    8750:	83 5b       	subi	r24, 0xB3	; 179
    8752:	9e 4f       	sbci	r25, 0xFE	; 254
    8754:	fc 01       	movw	r30, r24
    8756:	80 81       	ld	r24, Z
    8758:	91 81       	ldd	r25, Z+1	; 0x01
    875a:	00 97       	sbiw	r24, 0x00	; 0
    875c:	89 f6       	brne	.-94     	; 0x8700 <pick_drop+0x260e>
    875e:	2f c0       	rjmp	.+94     	; 0x87be <pick_drop+0x26cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8760:	8e 01       	movw	r16, r28
    8762:	03 5b       	subi	r16, 0xB3	; 179
    8764:	1e 4f       	sbci	r17, 0xFE	; 254
    8766:	ce 01       	movw	r24, r28
    8768:	87 5b       	subi	r24, 0xB7	; 183
    876a:	9e 4f       	sbci	r25, 0xFE	; 254
    876c:	fc 01       	movw	r30, r24
    876e:	60 81       	ld	r22, Z
    8770:	71 81       	ldd	r23, Z+1	; 0x01
    8772:	82 81       	ldd	r24, Z+2	; 0x02
    8774:	93 81       	ldd	r25, Z+3	; 0x03
    8776:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    877a:	dc 01       	movw	r26, r24
    877c:	cb 01       	movw	r24, r22
    877e:	f8 01       	movw	r30, r16
    8780:	91 83       	std	Z+1, r25	; 0x01
    8782:	80 83       	st	Z, r24
    8784:	ce 01       	movw	r24, r28
    8786:	8f 5a       	subi	r24, 0xAF	; 175
    8788:	9e 4f       	sbci	r25, 0xFE	; 254
    878a:	9e 01       	movw	r18, r28
    878c:	23 5b       	subi	r18, 0xB3	; 179
    878e:	3e 4f       	sbci	r19, 0xFE	; 254
    8790:	f9 01       	movw	r30, r18
    8792:	20 81       	ld	r18, Z
    8794:	31 81       	ldd	r19, Z+1	; 0x01
    8796:	fc 01       	movw	r30, r24
    8798:	31 83       	std	Z+1, r19	; 0x01
    879a:	20 83       	st	Z, r18
    879c:	ce 01       	movw	r24, r28
    879e:	8f 5a       	subi	r24, 0xAF	; 175
    87a0:	9e 4f       	sbci	r25, 0xFE	; 254
    87a2:	fc 01       	movw	r30, r24
    87a4:	80 81       	ld	r24, Z
    87a6:	91 81       	ldd	r25, Z+1	; 0x01
    87a8:	8c 01       	movw	r16, r24
    87aa:	c8 01       	movw	r24, r16
    87ac:	01 97       	sbiw	r24, 0x01	; 1
    87ae:	f1 f7       	brne	.-4      	; 0x87ac <pick_drop+0x26ba>
    87b0:	8c 01       	movw	r16, r24
    87b2:	ce 01       	movw	r24, r28
    87b4:	8f 5a       	subi	r24, 0xAF	; 175
    87b6:	9e 4f       	sbci	r25, 0xFE	; 254
    87b8:	fc 01       	movw	r30, r24
    87ba:	11 83       	std	Z+1, r17	; 0x01
    87bc:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_right2();
    87be:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    87c2:	9e 01       	movw	r18, r28
    87c4:	2d 5a       	subi	r18, 0xAD	; 173
    87c6:	3e 4f       	sbci	r19, 0xFE	; 254
    87c8:	80 e0       	ldi	r24, 0x00	; 0
    87ca:	90 e0       	ldi	r25, 0x00	; 0
    87cc:	a8 e4       	ldi	r26, 0x48	; 72
    87ce:	b2 e4       	ldi	r27, 0x42	; 66
    87d0:	f9 01       	movw	r30, r18
    87d2:	80 83       	st	Z, r24
    87d4:	91 83       	std	Z+1, r25	; 0x01
    87d6:	a2 83       	std	Z+2, r26	; 0x02
    87d8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    87da:	8e 01       	movw	r16, r28
    87dc:	09 5a       	subi	r16, 0xA9	; 169
    87de:	1e 4f       	sbci	r17, 0xFE	; 254
    87e0:	ce 01       	movw	r24, r28
    87e2:	8d 5a       	subi	r24, 0xAD	; 173
    87e4:	9e 4f       	sbci	r25, 0xFE	; 254
    87e6:	fc 01       	movw	r30, r24
    87e8:	60 81       	ld	r22, Z
    87ea:	71 81       	ldd	r23, Z+1	; 0x01
    87ec:	82 81       	ldd	r24, Z+2	; 0x02
    87ee:	93 81       	ldd	r25, Z+3	; 0x03
    87f0:	26 e6       	ldi	r18, 0x66	; 102
    87f2:	36 e6       	ldi	r19, 0x66	; 102
    87f4:	46 e6       	ldi	r20, 0x66	; 102
    87f6:	55 e4       	ldi	r21, 0x45	; 69
    87f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    87fc:	dc 01       	movw	r26, r24
    87fe:	cb 01       	movw	r24, r22
    8800:	f8 01       	movw	r30, r16
    8802:	80 83       	st	Z, r24
    8804:	91 83       	std	Z+1, r25	; 0x01
    8806:	a2 83       	std	Z+2, r26	; 0x02
    8808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    880a:	ce 01       	movw	r24, r28
    880c:	89 5a       	subi	r24, 0xA9	; 169
    880e:	9e 4f       	sbci	r25, 0xFE	; 254
    8810:	11 e0       	ldi	r17, 0x01	; 1
    8812:	fc 01       	movw	r30, r24
    8814:	60 81       	ld	r22, Z
    8816:	71 81       	ldd	r23, Z+1	; 0x01
    8818:	82 81       	ldd	r24, Z+2	; 0x02
    881a:	93 81       	ldd	r25, Z+3	; 0x03
    881c:	20 e0       	ldi	r18, 0x00	; 0
    881e:	30 e0       	ldi	r19, 0x00	; 0
    8820:	40 e8       	ldi	r20, 0x80	; 128
    8822:	5f e3       	ldi	r21, 0x3F	; 63
    8824:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    8828:	88 23       	and	r24, r24
    882a:	0c f0       	brlt	.+2      	; 0x882e <pick_drop+0x273c>
    882c:	10 e0       	ldi	r17, 0x00	; 0
    882e:	11 23       	and	r17, r17
    8830:	49 f0       	breq	.+18     	; 0x8844 <pick_drop+0x2752>
		__ticks = 1;
    8832:	ce 01       	movw	r24, r28
    8834:	85 5a       	subi	r24, 0xA5	; 165
    8836:	9e 4f       	sbci	r25, 0xFE	; 254
    8838:	21 e0       	ldi	r18, 0x01	; 1
    883a:	30 e0       	ldi	r19, 0x00	; 0
    883c:	fc 01       	movw	r30, r24
    883e:	31 83       	std	Z+1, r19	; 0x01
    8840:	20 83       	st	Z, r18
    8842:	74 c0       	rjmp	.+232    	; 0x892c <pick_drop+0x283a>
	else if (__tmp > 65535)
    8844:	ce 01       	movw	r24, r28
    8846:	89 5a       	subi	r24, 0xA9	; 169
    8848:	9e 4f       	sbci	r25, 0xFE	; 254
    884a:	11 e0       	ldi	r17, 0x01	; 1
    884c:	fc 01       	movw	r30, r24
    884e:	60 81       	ld	r22, Z
    8850:	71 81       	ldd	r23, Z+1	; 0x01
    8852:	82 81       	ldd	r24, Z+2	; 0x02
    8854:	93 81       	ldd	r25, Z+3	; 0x03
    8856:	20 e0       	ldi	r18, 0x00	; 0
    8858:	3f ef       	ldi	r19, 0xFF	; 255
    885a:	4f e7       	ldi	r20, 0x7F	; 127
    885c:	57 e4       	ldi	r21, 0x47	; 71
    885e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8862:	18 16       	cp	r1, r24
    8864:	0c f0       	brlt	.+2      	; 0x8868 <pick_drop+0x2776>
    8866:	10 e0       	ldi	r17, 0x00	; 0
    8868:	11 23       	and	r17, r17
    886a:	09 f4       	brne	.+2      	; 0x886e <pick_drop+0x277c>
    886c:	4d c0       	rjmp	.+154    	; 0x8908 <pick_drop+0x2816>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    886e:	ce 01       	movw	r24, r28
    8870:	8d 5a       	subi	r24, 0xAD	; 173
    8872:	9e 4f       	sbci	r25, 0xFE	; 254
    8874:	fc 01       	movw	r30, r24
    8876:	60 81       	ld	r22, Z
    8878:	71 81       	ldd	r23, Z+1	; 0x01
    887a:	82 81       	ldd	r24, Z+2	; 0x02
    887c:	93 81       	ldd	r25, Z+3	; 0x03
    887e:	20 e0       	ldi	r18, 0x00	; 0
    8880:	30 e0       	ldi	r19, 0x00	; 0
    8882:	40 e2       	ldi	r20, 0x20	; 32
    8884:	51 e4       	ldi	r21, 0x41	; 65
    8886:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    888a:	dc 01       	movw	r26, r24
    888c:	cb 01       	movw	r24, r22
    888e:	8e 01       	movw	r16, r28
    8890:	05 5a       	subi	r16, 0xA5	; 165
    8892:	1e 4f       	sbci	r17, 0xFE	; 254
    8894:	bc 01       	movw	r22, r24
    8896:	cd 01       	movw	r24, r26
    8898:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    889c:	dc 01       	movw	r26, r24
    889e:	cb 01       	movw	r24, r22
    88a0:	f8 01       	movw	r30, r16
    88a2:	91 83       	std	Z+1, r25	; 0x01
    88a4:	80 83       	st	Z, r24
    88a6:	27 c0       	rjmp	.+78     	; 0x88f6 <pick_drop+0x2804>
    88a8:	ce 01       	movw	r24, r28
    88aa:	83 5a       	subi	r24, 0xA3	; 163
    88ac:	9e 4f       	sbci	r25, 0xFE	; 254
    88ae:	20 e7       	ldi	r18, 0x70	; 112
    88b0:	31 e0       	ldi	r19, 0x01	; 1
    88b2:	fc 01       	movw	r30, r24
    88b4:	31 83       	std	Z+1, r19	; 0x01
    88b6:	20 83       	st	Z, r18
    88b8:	ce 01       	movw	r24, r28
    88ba:	83 5a       	subi	r24, 0xA3	; 163
    88bc:	9e 4f       	sbci	r25, 0xFE	; 254
    88be:	fc 01       	movw	r30, r24
    88c0:	80 81       	ld	r24, Z
    88c2:	91 81       	ldd	r25, Z+1	; 0x01
    88c4:	8c 01       	movw	r16, r24
    88c6:	c8 01       	movw	r24, r16
    88c8:	01 97       	sbiw	r24, 0x01	; 1
    88ca:	f1 f7       	brne	.-4      	; 0x88c8 <pick_drop+0x27d6>
    88cc:	8c 01       	movw	r16, r24
    88ce:	ce 01       	movw	r24, r28
    88d0:	83 5a       	subi	r24, 0xA3	; 163
    88d2:	9e 4f       	sbci	r25, 0xFE	; 254
    88d4:	fc 01       	movw	r30, r24
    88d6:	11 83       	std	Z+1, r17	; 0x01
    88d8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    88da:	ce 01       	movw	r24, r28
    88dc:	85 5a       	subi	r24, 0xA5	; 165
    88de:	9e 4f       	sbci	r25, 0xFE	; 254
    88e0:	9e 01       	movw	r18, r28
    88e2:	25 5a       	subi	r18, 0xA5	; 165
    88e4:	3e 4f       	sbci	r19, 0xFE	; 254
    88e6:	f9 01       	movw	r30, r18
    88e8:	20 81       	ld	r18, Z
    88ea:	31 81       	ldd	r19, Z+1	; 0x01
    88ec:	21 50       	subi	r18, 0x01	; 1
    88ee:	30 40       	sbci	r19, 0x00	; 0
    88f0:	fc 01       	movw	r30, r24
    88f2:	31 83       	std	Z+1, r19	; 0x01
    88f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    88f6:	ce 01       	movw	r24, r28
    88f8:	85 5a       	subi	r24, 0xA5	; 165
    88fa:	9e 4f       	sbci	r25, 0xFE	; 254
    88fc:	fc 01       	movw	r30, r24
    88fe:	80 81       	ld	r24, Z
    8900:	91 81       	ldd	r25, Z+1	; 0x01
    8902:	00 97       	sbiw	r24, 0x00	; 0
    8904:	89 f6       	brne	.-94     	; 0x88a8 <pick_drop+0x27b6>
    8906:	2f c0       	rjmp	.+94     	; 0x8966 <pick_drop+0x2874>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8908:	8e 01       	movw	r16, r28
    890a:	05 5a       	subi	r16, 0xA5	; 165
    890c:	1e 4f       	sbci	r17, 0xFE	; 254
    890e:	ce 01       	movw	r24, r28
    8910:	89 5a       	subi	r24, 0xA9	; 169
    8912:	9e 4f       	sbci	r25, 0xFE	; 254
    8914:	fc 01       	movw	r30, r24
    8916:	60 81       	ld	r22, Z
    8918:	71 81       	ldd	r23, Z+1	; 0x01
    891a:	82 81       	ldd	r24, Z+2	; 0x02
    891c:	93 81       	ldd	r25, Z+3	; 0x03
    891e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8922:	dc 01       	movw	r26, r24
    8924:	cb 01       	movw	r24, r22
    8926:	f8 01       	movw	r30, r16
    8928:	91 83       	std	Z+1, r25	; 0x01
    892a:	80 83       	st	Z, r24
    892c:	ce 01       	movw	r24, r28
    892e:	81 5a       	subi	r24, 0xA1	; 161
    8930:	9e 4f       	sbci	r25, 0xFE	; 254
    8932:	9e 01       	movw	r18, r28
    8934:	25 5a       	subi	r18, 0xA5	; 165
    8936:	3e 4f       	sbci	r19, 0xFE	; 254
    8938:	f9 01       	movw	r30, r18
    893a:	20 81       	ld	r18, Z
    893c:	31 81       	ldd	r19, Z+1	; 0x01
    893e:	fc 01       	movw	r30, r24
    8940:	31 83       	std	Z+1, r19	; 0x01
    8942:	20 83       	st	Z, r18
    8944:	ce 01       	movw	r24, r28
    8946:	81 5a       	subi	r24, 0xA1	; 161
    8948:	9e 4f       	sbci	r25, 0xFE	; 254
    894a:	fc 01       	movw	r30, r24
    894c:	80 81       	ld	r24, Z
    894e:	91 81       	ldd	r25, Z+1	; 0x01
    8950:	8c 01       	movw	r16, r24
    8952:	c8 01       	movw	r24, r16
    8954:	01 97       	sbiw	r24, 0x01	; 1
    8956:	f1 f7       	brne	.-4      	; 0x8954 <pick_drop+0x2862>
    8958:	8c 01       	movw	r16, r24
    895a:	ce 01       	movw	r24, r28
    895c:	81 5a       	subi	r24, 0xA1	; 161
    895e:	9e 4f       	sbci	r25, 0xFE	; 254
    8960:	fc 01       	movw	r30, r24
    8962:	11 83       	std	Z+1, r17	; 0x01
    8964:	00 83       	st	Z, r16
				_delay_ms(50);
				front();
    8966:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    896a:	9e 01       	movw	r18, r28
    896c:	2f 59       	subi	r18, 0x9F	; 159
    896e:	3e 4f       	sbci	r19, 0xFE	; 254
    8970:	80 e0       	ldi	r24, 0x00	; 0
    8972:	90 e0       	ldi	r25, 0x00	; 0
    8974:	a8 ec       	ldi	r26, 0xC8	; 200
    8976:	b2 e4       	ldi	r27, 0x42	; 66
    8978:	f9 01       	movw	r30, r18
    897a:	80 83       	st	Z, r24
    897c:	91 83       	std	Z+1, r25	; 0x01
    897e:	a2 83       	std	Z+2, r26	; 0x02
    8980:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8982:	8e 01       	movw	r16, r28
    8984:	0b 59       	subi	r16, 0x9B	; 155
    8986:	1e 4f       	sbci	r17, 0xFE	; 254
    8988:	ce 01       	movw	r24, r28
    898a:	8f 59       	subi	r24, 0x9F	; 159
    898c:	9e 4f       	sbci	r25, 0xFE	; 254
    898e:	fc 01       	movw	r30, r24
    8990:	60 81       	ld	r22, Z
    8992:	71 81       	ldd	r23, Z+1	; 0x01
    8994:	82 81       	ldd	r24, Z+2	; 0x02
    8996:	93 81       	ldd	r25, Z+3	; 0x03
    8998:	26 e6       	ldi	r18, 0x66	; 102
    899a:	36 e6       	ldi	r19, 0x66	; 102
    899c:	46 e6       	ldi	r20, 0x66	; 102
    899e:	55 e4       	ldi	r21, 0x45	; 69
    89a0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    89a4:	dc 01       	movw	r26, r24
    89a6:	cb 01       	movw	r24, r22
    89a8:	f8 01       	movw	r30, r16
    89aa:	80 83       	st	Z, r24
    89ac:	91 83       	std	Z+1, r25	; 0x01
    89ae:	a2 83       	std	Z+2, r26	; 0x02
    89b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    89b2:	ce 01       	movw	r24, r28
    89b4:	8b 59       	subi	r24, 0x9B	; 155
    89b6:	9e 4f       	sbci	r25, 0xFE	; 254
    89b8:	11 e0       	ldi	r17, 0x01	; 1
    89ba:	fc 01       	movw	r30, r24
    89bc:	60 81       	ld	r22, Z
    89be:	71 81       	ldd	r23, Z+1	; 0x01
    89c0:	82 81       	ldd	r24, Z+2	; 0x02
    89c2:	93 81       	ldd	r25, Z+3	; 0x03
    89c4:	20 e0       	ldi	r18, 0x00	; 0
    89c6:	30 e0       	ldi	r19, 0x00	; 0
    89c8:	40 e8       	ldi	r20, 0x80	; 128
    89ca:	5f e3       	ldi	r21, 0x3F	; 63
    89cc:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    89d0:	88 23       	and	r24, r24
    89d2:	0c f0       	brlt	.+2      	; 0x89d6 <pick_drop+0x28e4>
    89d4:	10 e0       	ldi	r17, 0x00	; 0
    89d6:	11 23       	and	r17, r17
    89d8:	49 f0       	breq	.+18     	; 0x89ec <pick_drop+0x28fa>
		__ticks = 1;
    89da:	ce 01       	movw	r24, r28
    89dc:	87 59       	subi	r24, 0x97	; 151
    89de:	9e 4f       	sbci	r25, 0xFE	; 254
    89e0:	21 e0       	ldi	r18, 0x01	; 1
    89e2:	30 e0       	ldi	r19, 0x00	; 0
    89e4:	fc 01       	movw	r30, r24
    89e6:	31 83       	std	Z+1, r19	; 0x01
    89e8:	20 83       	st	Z, r18
    89ea:	74 c0       	rjmp	.+232    	; 0x8ad4 <pick_drop+0x29e2>
	else if (__tmp > 65535)
    89ec:	ce 01       	movw	r24, r28
    89ee:	8b 59       	subi	r24, 0x9B	; 155
    89f0:	9e 4f       	sbci	r25, 0xFE	; 254
    89f2:	11 e0       	ldi	r17, 0x01	; 1
    89f4:	fc 01       	movw	r30, r24
    89f6:	60 81       	ld	r22, Z
    89f8:	71 81       	ldd	r23, Z+1	; 0x01
    89fa:	82 81       	ldd	r24, Z+2	; 0x02
    89fc:	93 81       	ldd	r25, Z+3	; 0x03
    89fe:	20 e0       	ldi	r18, 0x00	; 0
    8a00:	3f ef       	ldi	r19, 0xFF	; 255
    8a02:	4f e7       	ldi	r20, 0x7F	; 127
    8a04:	57 e4       	ldi	r21, 0x47	; 71
    8a06:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8a0a:	18 16       	cp	r1, r24
    8a0c:	0c f0       	brlt	.+2      	; 0x8a10 <pick_drop+0x291e>
    8a0e:	10 e0       	ldi	r17, 0x00	; 0
    8a10:	11 23       	and	r17, r17
    8a12:	09 f4       	brne	.+2      	; 0x8a16 <pick_drop+0x2924>
    8a14:	4d c0       	rjmp	.+154    	; 0x8ab0 <pick_drop+0x29be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8a16:	ce 01       	movw	r24, r28
    8a18:	8f 59       	subi	r24, 0x9F	; 159
    8a1a:	9e 4f       	sbci	r25, 0xFE	; 254
    8a1c:	fc 01       	movw	r30, r24
    8a1e:	60 81       	ld	r22, Z
    8a20:	71 81       	ldd	r23, Z+1	; 0x01
    8a22:	82 81       	ldd	r24, Z+2	; 0x02
    8a24:	93 81       	ldd	r25, Z+3	; 0x03
    8a26:	20 e0       	ldi	r18, 0x00	; 0
    8a28:	30 e0       	ldi	r19, 0x00	; 0
    8a2a:	40 e2       	ldi	r20, 0x20	; 32
    8a2c:	51 e4       	ldi	r21, 0x41	; 65
    8a2e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8a32:	dc 01       	movw	r26, r24
    8a34:	cb 01       	movw	r24, r22
    8a36:	8e 01       	movw	r16, r28
    8a38:	07 59       	subi	r16, 0x97	; 151
    8a3a:	1e 4f       	sbci	r17, 0xFE	; 254
    8a3c:	bc 01       	movw	r22, r24
    8a3e:	cd 01       	movw	r24, r26
    8a40:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8a44:	dc 01       	movw	r26, r24
    8a46:	cb 01       	movw	r24, r22
    8a48:	f8 01       	movw	r30, r16
    8a4a:	91 83       	std	Z+1, r25	; 0x01
    8a4c:	80 83       	st	Z, r24
    8a4e:	27 c0       	rjmp	.+78     	; 0x8a9e <pick_drop+0x29ac>
    8a50:	ce 01       	movw	r24, r28
    8a52:	85 59       	subi	r24, 0x95	; 149
    8a54:	9e 4f       	sbci	r25, 0xFE	; 254
    8a56:	20 e7       	ldi	r18, 0x70	; 112
    8a58:	31 e0       	ldi	r19, 0x01	; 1
    8a5a:	fc 01       	movw	r30, r24
    8a5c:	31 83       	std	Z+1, r19	; 0x01
    8a5e:	20 83       	st	Z, r18
    8a60:	ce 01       	movw	r24, r28
    8a62:	85 59       	subi	r24, 0x95	; 149
    8a64:	9e 4f       	sbci	r25, 0xFE	; 254
    8a66:	fc 01       	movw	r30, r24
    8a68:	80 81       	ld	r24, Z
    8a6a:	91 81       	ldd	r25, Z+1	; 0x01
    8a6c:	8c 01       	movw	r16, r24
    8a6e:	c8 01       	movw	r24, r16
    8a70:	01 97       	sbiw	r24, 0x01	; 1
    8a72:	f1 f7       	brne	.-4      	; 0x8a70 <pick_drop+0x297e>
    8a74:	8c 01       	movw	r16, r24
    8a76:	ce 01       	movw	r24, r28
    8a78:	85 59       	subi	r24, 0x95	; 149
    8a7a:	9e 4f       	sbci	r25, 0xFE	; 254
    8a7c:	fc 01       	movw	r30, r24
    8a7e:	11 83       	std	Z+1, r17	; 0x01
    8a80:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8a82:	ce 01       	movw	r24, r28
    8a84:	87 59       	subi	r24, 0x97	; 151
    8a86:	9e 4f       	sbci	r25, 0xFE	; 254
    8a88:	9e 01       	movw	r18, r28
    8a8a:	27 59       	subi	r18, 0x97	; 151
    8a8c:	3e 4f       	sbci	r19, 0xFE	; 254
    8a8e:	f9 01       	movw	r30, r18
    8a90:	20 81       	ld	r18, Z
    8a92:	31 81       	ldd	r19, Z+1	; 0x01
    8a94:	21 50       	subi	r18, 0x01	; 1
    8a96:	30 40       	sbci	r19, 0x00	; 0
    8a98:	fc 01       	movw	r30, r24
    8a9a:	31 83       	std	Z+1, r19	; 0x01
    8a9c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8a9e:	ce 01       	movw	r24, r28
    8aa0:	87 59       	subi	r24, 0x97	; 151
    8aa2:	9e 4f       	sbci	r25, 0xFE	; 254
    8aa4:	fc 01       	movw	r30, r24
    8aa6:	80 81       	ld	r24, Z
    8aa8:	91 81       	ldd	r25, Z+1	; 0x01
    8aaa:	00 97       	sbiw	r24, 0x00	; 0
    8aac:	89 f6       	brne	.-94     	; 0x8a50 <pick_drop+0x295e>
    8aae:	2f c0       	rjmp	.+94     	; 0x8b0e <pick_drop+0x2a1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8ab0:	8e 01       	movw	r16, r28
    8ab2:	07 59       	subi	r16, 0x97	; 151
    8ab4:	1e 4f       	sbci	r17, 0xFE	; 254
    8ab6:	ce 01       	movw	r24, r28
    8ab8:	8b 59       	subi	r24, 0x9B	; 155
    8aba:	9e 4f       	sbci	r25, 0xFE	; 254
    8abc:	fc 01       	movw	r30, r24
    8abe:	60 81       	ld	r22, Z
    8ac0:	71 81       	ldd	r23, Z+1	; 0x01
    8ac2:	82 81       	ldd	r24, Z+2	; 0x02
    8ac4:	93 81       	ldd	r25, Z+3	; 0x03
    8ac6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8aca:	dc 01       	movw	r26, r24
    8acc:	cb 01       	movw	r24, r22
    8ace:	f8 01       	movw	r30, r16
    8ad0:	91 83       	std	Z+1, r25	; 0x01
    8ad2:	80 83       	st	Z, r24
    8ad4:	ce 01       	movw	r24, r28
    8ad6:	83 59       	subi	r24, 0x93	; 147
    8ad8:	9e 4f       	sbci	r25, 0xFE	; 254
    8ada:	9e 01       	movw	r18, r28
    8adc:	27 59       	subi	r18, 0x97	; 151
    8ade:	3e 4f       	sbci	r19, 0xFE	; 254
    8ae0:	f9 01       	movw	r30, r18
    8ae2:	20 81       	ld	r18, Z
    8ae4:	31 81       	ldd	r19, Z+1	; 0x01
    8ae6:	fc 01       	movw	r30, r24
    8ae8:	31 83       	std	Z+1, r19	; 0x01
    8aea:	20 83       	st	Z, r18
    8aec:	ce 01       	movw	r24, r28
    8aee:	83 59       	subi	r24, 0x93	; 147
    8af0:	9e 4f       	sbci	r25, 0xFE	; 254
    8af2:	fc 01       	movw	r30, r24
    8af4:	80 81       	ld	r24, Z
    8af6:	91 81       	ldd	r25, Z+1	; 0x01
    8af8:	8c 01       	movw	r16, r24
    8afa:	c8 01       	movw	r24, r16
    8afc:	01 97       	sbiw	r24, 0x01	; 1
    8afe:	f1 f7       	brne	.-4      	; 0x8afc <pick_drop+0x2a0a>
    8b00:	8c 01       	movw	r16, r24
    8b02:	ce 01       	movw	r24, r28
    8b04:	83 59       	subi	r24, 0x93	; 147
    8b06:	9e 4f       	sbci	r25, 0xFE	; 254
    8b08:	fc 01       	movw	r30, r24
    8b0a:	11 83       	std	Z+1, r17	; 0x01
    8b0c:	00 83       	st	Z, r16
				_delay_ms(100);
				correct_left();
    8b0e:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				back_mm(pdback);
    8b12:	89 81       	ldd	r24, Y+1	; 0x01
    8b14:	9a 81       	ldd	r25, Y+2	; 0x02
    8b16:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    8b1a:	9e 01       	movw	r18, r28
    8b1c:	21 59       	subi	r18, 0x91	; 145
    8b1e:	3e 4f       	sbci	r19, 0xFE	; 254
    8b20:	80 e0       	ldi	r24, 0x00	; 0
    8b22:	90 e0       	ldi	r25, 0x00	; 0
    8b24:	a0 ea       	ldi	r26, 0xA0	; 160
    8b26:	b1 e4       	ldi	r27, 0x41	; 65
    8b28:	f9 01       	movw	r30, r18
    8b2a:	80 83       	st	Z, r24
    8b2c:	91 83       	std	Z+1, r25	; 0x01
    8b2e:	a2 83       	std	Z+2, r26	; 0x02
    8b30:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8b32:	8e 01       	movw	r16, r28
    8b34:	0d 58       	subi	r16, 0x8D	; 141
    8b36:	1e 4f       	sbci	r17, 0xFE	; 254
    8b38:	ce 01       	movw	r24, r28
    8b3a:	81 59       	subi	r24, 0x91	; 145
    8b3c:	9e 4f       	sbci	r25, 0xFE	; 254
    8b3e:	fc 01       	movw	r30, r24
    8b40:	60 81       	ld	r22, Z
    8b42:	71 81       	ldd	r23, Z+1	; 0x01
    8b44:	82 81       	ldd	r24, Z+2	; 0x02
    8b46:	93 81       	ldd	r25, Z+3	; 0x03
    8b48:	26 e6       	ldi	r18, 0x66	; 102
    8b4a:	36 e6       	ldi	r19, 0x66	; 102
    8b4c:	46 e6       	ldi	r20, 0x66	; 102
    8b4e:	55 e4       	ldi	r21, 0x45	; 69
    8b50:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8b54:	dc 01       	movw	r26, r24
    8b56:	cb 01       	movw	r24, r22
    8b58:	f8 01       	movw	r30, r16
    8b5a:	80 83       	st	Z, r24
    8b5c:	91 83       	std	Z+1, r25	; 0x01
    8b5e:	a2 83       	std	Z+2, r26	; 0x02
    8b60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8b62:	ce 01       	movw	r24, r28
    8b64:	8d 58       	subi	r24, 0x8D	; 141
    8b66:	9e 4f       	sbci	r25, 0xFE	; 254
    8b68:	11 e0       	ldi	r17, 0x01	; 1
    8b6a:	fc 01       	movw	r30, r24
    8b6c:	60 81       	ld	r22, Z
    8b6e:	71 81       	ldd	r23, Z+1	; 0x01
    8b70:	82 81       	ldd	r24, Z+2	; 0x02
    8b72:	93 81       	ldd	r25, Z+3	; 0x03
    8b74:	20 e0       	ldi	r18, 0x00	; 0
    8b76:	30 e0       	ldi	r19, 0x00	; 0
    8b78:	40 e8       	ldi	r20, 0x80	; 128
    8b7a:	5f e3       	ldi	r21, 0x3F	; 63
    8b7c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    8b80:	88 23       	and	r24, r24
    8b82:	0c f0       	brlt	.+2      	; 0x8b86 <pick_drop+0x2a94>
    8b84:	10 e0       	ldi	r17, 0x00	; 0
    8b86:	11 23       	and	r17, r17
    8b88:	49 f0       	breq	.+18     	; 0x8b9c <pick_drop+0x2aaa>
		__ticks = 1;
    8b8a:	ce 01       	movw	r24, r28
    8b8c:	89 58       	subi	r24, 0x89	; 137
    8b8e:	9e 4f       	sbci	r25, 0xFE	; 254
    8b90:	21 e0       	ldi	r18, 0x01	; 1
    8b92:	30 e0       	ldi	r19, 0x00	; 0
    8b94:	fc 01       	movw	r30, r24
    8b96:	31 83       	std	Z+1, r19	; 0x01
    8b98:	20 83       	st	Z, r18
    8b9a:	75 c0       	rjmp	.+234    	; 0x8c86 <pick_drop+0x2b94>
	else if (__tmp > 65535)
    8b9c:	ce 01       	movw	r24, r28
    8b9e:	8d 58       	subi	r24, 0x8D	; 141
    8ba0:	9e 4f       	sbci	r25, 0xFE	; 254
    8ba2:	11 e0       	ldi	r17, 0x01	; 1
    8ba4:	fc 01       	movw	r30, r24
    8ba6:	60 81       	ld	r22, Z
    8ba8:	71 81       	ldd	r23, Z+1	; 0x01
    8baa:	82 81       	ldd	r24, Z+2	; 0x02
    8bac:	93 81       	ldd	r25, Z+3	; 0x03
    8bae:	20 e0       	ldi	r18, 0x00	; 0
    8bb0:	3f ef       	ldi	r19, 0xFF	; 255
    8bb2:	4f e7       	ldi	r20, 0x7F	; 127
    8bb4:	57 e4       	ldi	r21, 0x47	; 71
    8bb6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8bba:	18 16       	cp	r1, r24
    8bbc:	0c f0       	brlt	.+2      	; 0x8bc0 <pick_drop+0x2ace>
    8bbe:	10 e0       	ldi	r17, 0x00	; 0
    8bc0:	11 23       	and	r17, r17
    8bc2:	09 f4       	brne	.+2      	; 0x8bc6 <pick_drop+0x2ad4>
    8bc4:	4e c0       	rjmp	.+156    	; 0x8c62 <pick_drop+0x2b70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8bc6:	ce 01       	movw	r24, r28
    8bc8:	81 59       	subi	r24, 0x91	; 145
    8bca:	9e 4f       	sbci	r25, 0xFE	; 254
    8bcc:	fc 01       	movw	r30, r24
    8bce:	60 81       	ld	r22, Z
    8bd0:	71 81       	ldd	r23, Z+1	; 0x01
    8bd2:	82 81       	ldd	r24, Z+2	; 0x02
    8bd4:	93 81       	ldd	r25, Z+3	; 0x03
    8bd6:	20 e0       	ldi	r18, 0x00	; 0
    8bd8:	30 e0       	ldi	r19, 0x00	; 0
    8bda:	40 e2       	ldi	r20, 0x20	; 32
    8bdc:	51 e4       	ldi	r21, 0x41	; 65
    8bde:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8be2:	dc 01       	movw	r26, r24
    8be4:	cb 01       	movw	r24, r22
    8be6:	8e 01       	movw	r16, r28
    8be8:	09 58       	subi	r16, 0x89	; 137
    8bea:	1e 4f       	sbci	r17, 0xFE	; 254
    8bec:	bc 01       	movw	r22, r24
    8bee:	cd 01       	movw	r24, r26
    8bf0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8bf4:	dc 01       	movw	r26, r24
    8bf6:	cb 01       	movw	r24, r22
    8bf8:	f8 01       	movw	r30, r16
    8bfa:	91 83       	std	Z+1, r25	; 0x01
    8bfc:	80 83       	st	Z, r24
    8bfe:	27 c0       	rjmp	.+78     	; 0x8c4e <pick_drop+0x2b5c>
    8c00:	ce 01       	movw	r24, r28
    8c02:	87 58       	subi	r24, 0x87	; 135
    8c04:	9e 4f       	sbci	r25, 0xFE	; 254
    8c06:	20 e7       	ldi	r18, 0x70	; 112
    8c08:	31 e0       	ldi	r19, 0x01	; 1
    8c0a:	fc 01       	movw	r30, r24
    8c0c:	31 83       	std	Z+1, r19	; 0x01
    8c0e:	20 83       	st	Z, r18
    8c10:	ce 01       	movw	r24, r28
    8c12:	87 58       	subi	r24, 0x87	; 135
    8c14:	9e 4f       	sbci	r25, 0xFE	; 254
    8c16:	fc 01       	movw	r30, r24
    8c18:	80 81       	ld	r24, Z
    8c1a:	91 81       	ldd	r25, Z+1	; 0x01
    8c1c:	8c 01       	movw	r16, r24
    8c1e:	c8 01       	movw	r24, r16
    8c20:	01 97       	sbiw	r24, 0x01	; 1
    8c22:	f1 f7       	brne	.-4      	; 0x8c20 <pick_drop+0x2b2e>
    8c24:	8c 01       	movw	r16, r24
    8c26:	ce 01       	movw	r24, r28
    8c28:	87 58       	subi	r24, 0x87	; 135
    8c2a:	9e 4f       	sbci	r25, 0xFE	; 254
    8c2c:	fc 01       	movw	r30, r24
    8c2e:	11 83       	std	Z+1, r17	; 0x01
    8c30:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8c32:	ce 01       	movw	r24, r28
    8c34:	89 58       	subi	r24, 0x89	; 137
    8c36:	9e 4f       	sbci	r25, 0xFE	; 254
    8c38:	9e 01       	movw	r18, r28
    8c3a:	29 58       	subi	r18, 0x89	; 137
    8c3c:	3e 4f       	sbci	r19, 0xFE	; 254
    8c3e:	f9 01       	movw	r30, r18
    8c40:	20 81       	ld	r18, Z
    8c42:	31 81       	ldd	r19, Z+1	; 0x01
    8c44:	21 50       	subi	r18, 0x01	; 1
    8c46:	30 40       	sbci	r19, 0x00	; 0
    8c48:	fc 01       	movw	r30, r24
    8c4a:	31 83       	std	Z+1, r19	; 0x01
    8c4c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8c4e:	ce 01       	movw	r24, r28
    8c50:	89 58       	subi	r24, 0x89	; 137
    8c52:	9e 4f       	sbci	r25, 0xFE	; 254
    8c54:	fc 01       	movw	r30, r24
    8c56:	80 81       	ld	r24, Z
    8c58:	91 81       	ldd	r25, Z+1	; 0x01
    8c5a:	00 97       	sbiw	r24, 0x00	; 0
    8c5c:	89 f6       	brne	.-94     	; 0x8c00 <pick_drop+0x2b0e>
    8c5e:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8c62:	8e 01       	movw	r16, r28
    8c64:	09 58       	subi	r16, 0x89	; 137
    8c66:	1e 4f       	sbci	r17, 0xFE	; 254
    8c68:	ce 01       	movw	r24, r28
    8c6a:	8d 58       	subi	r24, 0x8D	; 141
    8c6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8c6e:	fc 01       	movw	r30, r24
    8c70:	60 81       	ld	r22, Z
    8c72:	71 81       	ldd	r23, Z+1	; 0x01
    8c74:	82 81       	ldd	r24, Z+2	; 0x02
    8c76:	93 81       	ldd	r25, Z+3	; 0x03
    8c78:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8c7c:	dc 01       	movw	r26, r24
    8c7e:	cb 01       	movw	r24, r22
    8c80:	f8 01       	movw	r30, r16
    8c82:	91 83       	std	Z+1, r25	; 0x01
    8c84:	80 83       	st	Z, r24
    8c86:	ce 01       	movw	r24, r28
    8c88:	85 58       	subi	r24, 0x85	; 133
    8c8a:	9e 4f       	sbci	r25, 0xFE	; 254
    8c8c:	9e 01       	movw	r18, r28
    8c8e:	29 58       	subi	r18, 0x89	; 137
    8c90:	3e 4f       	sbci	r19, 0xFE	; 254
    8c92:	f9 01       	movw	r30, r18
    8c94:	20 81       	ld	r18, Z
    8c96:	31 81       	ldd	r19, Z+1	; 0x01
    8c98:	fc 01       	movw	r30, r24
    8c9a:	31 83       	std	Z+1, r19	; 0x01
    8c9c:	20 83       	st	Z, r18
    8c9e:	ce 01       	movw	r24, r28
    8ca0:	85 58       	subi	r24, 0x85	; 133
    8ca2:	9e 4f       	sbci	r25, 0xFE	; 254
    8ca4:	fc 01       	movw	r30, r24
    8ca6:	80 81       	ld	r24, Z
    8ca8:	91 81       	ldd	r25, Z+1	; 0x01
    8caa:	8c 01       	movw	r16, r24
    8cac:	c8 01       	movw	r24, r16
    8cae:	01 97       	sbiw	r24, 0x01	; 1
    8cb0:	f1 f7       	brne	.-4      	; 0x8cae <pick_drop+0x2bbc>
    8cb2:	8c 01       	movw	r16, r24
    8cb4:	ce 01       	movw	r24, r28
    8cb6:	85 58       	subi	r24, 0x85	; 133
    8cb8:	9e 4f       	sbci	r25, 0xFE	; 254
    8cba:	fc 01       	movw	r30, r24
    8cbc:	11 83       	std	Z+1, r17	; 0x01
    8cbe:	00 83       	st	Z, r16
    8cc0:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
				_delay_ms(20);
			}
			
			else if(master_path[node-1] == 'L')
    8cc4:	80 91 4f 03 	lds	r24, 0x034F
    8cc8:	90 91 50 03 	lds	r25, 0x0350
    8ccc:	01 97       	sbiw	r24, 0x01	; 1
    8cce:	8d 5a       	subi	r24, 0xAD	; 173
    8cd0:	9c 4f       	sbci	r25, 0xFC	; 252
    8cd2:	fc 01       	movw	r30, r24
    8cd4:	80 81       	ld	r24, Z
    8cd6:	8c 34       	cpi	r24, 0x4C	; 76
    8cd8:	11 f0       	breq	.+4      	; 0x8cde <pick_drop+0x2bec>
    8cda:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			{
				forward_mm(15);
    8cde:	8f e0       	ldi	r24, 0x0F	; 15
    8ce0:	90 e0       	ldi	r25, 0x00	; 0
    8ce2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    8ce6:	9e 01       	movw	r18, r28
    8ce8:	23 58       	subi	r18, 0x83	; 131
    8cea:	3e 4f       	sbci	r19, 0xFE	; 254
    8cec:	80 e0       	ldi	r24, 0x00	; 0
    8cee:	90 e0       	ldi	r25, 0x00	; 0
    8cf0:	a0 ea       	ldi	r26, 0xA0	; 160
    8cf2:	b1 e4       	ldi	r27, 0x41	; 65
    8cf4:	f9 01       	movw	r30, r18
    8cf6:	80 83       	st	Z, r24
    8cf8:	91 83       	std	Z+1, r25	; 0x01
    8cfa:	a2 83       	std	Z+2, r26	; 0x02
    8cfc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8cfe:	8e 01       	movw	r16, r28
    8d00:	0f 57       	subi	r16, 0x7F	; 127
    8d02:	1e 4f       	sbci	r17, 0xFE	; 254
    8d04:	ce 01       	movw	r24, r28
    8d06:	83 58       	subi	r24, 0x83	; 131
    8d08:	9e 4f       	sbci	r25, 0xFE	; 254
    8d0a:	fc 01       	movw	r30, r24
    8d0c:	60 81       	ld	r22, Z
    8d0e:	71 81       	ldd	r23, Z+1	; 0x01
    8d10:	82 81       	ldd	r24, Z+2	; 0x02
    8d12:	93 81       	ldd	r25, Z+3	; 0x03
    8d14:	26 e6       	ldi	r18, 0x66	; 102
    8d16:	36 e6       	ldi	r19, 0x66	; 102
    8d18:	46 e6       	ldi	r20, 0x66	; 102
    8d1a:	55 e4       	ldi	r21, 0x45	; 69
    8d1c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8d20:	dc 01       	movw	r26, r24
    8d22:	cb 01       	movw	r24, r22
    8d24:	f8 01       	movw	r30, r16
    8d26:	80 83       	st	Z, r24
    8d28:	91 83       	std	Z+1, r25	; 0x01
    8d2a:	a2 83       	std	Z+2, r26	; 0x02
    8d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8d2e:	ce 01       	movw	r24, r28
    8d30:	8f 57       	subi	r24, 0x7F	; 127
    8d32:	9e 4f       	sbci	r25, 0xFE	; 254
    8d34:	11 e0       	ldi	r17, 0x01	; 1
    8d36:	fc 01       	movw	r30, r24
    8d38:	60 81       	ld	r22, Z
    8d3a:	71 81       	ldd	r23, Z+1	; 0x01
    8d3c:	82 81       	ldd	r24, Z+2	; 0x02
    8d3e:	93 81       	ldd	r25, Z+3	; 0x03
    8d40:	20 e0       	ldi	r18, 0x00	; 0
    8d42:	30 e0       	ldi	r19, 0x00	; 0
    8d44:	40 e8       	ldi	r20, 0x80	; 128
    8d46:	5f e3       	ldi	r21, 0x3F	; 63
    8d48:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    8d4c:	88 23       	and	r24, r24
    8d4e:	0c f0       	brlt	.+2      	; 0x8d52 <pick_drop+0x2c60>
    8d50:	10 e0       	ldi	r17, 0x00	; 0
    8d52:	11 23       	and	r17, r17
    8d54:	49 f0       	breq	.+18     	; 0x8d68 <pick_drop+0x2c76>
		__ticks = 1;
    8d56:	ce 01       	movw	r24, r28
    8d58:	8b 57       	subi	r24, 0x7B	; 123
    8d5a:	9e 4f       	sbci	r25, 0xFE	; 254
    8d5c:	21 e0       	ldi	r18, 0x01	; 1
    8d5e:	30 e0       	ldi	r19, 0x00	; 0
    8d60:	fc 01       	movw	r30, r24
    8d62:	31 83       	std	Z+1, r19	; 0x01
    8d64:	20 83       	st	Z, r18
    8d66:	74 c0       	rjmp	.+232    	; 0x8e50 <pick_drop+0x2d5e>
	else if (__tmp > 65535)
    8d68:	ce 01       	movw	r24, r28
    8d6a:	8f 57       	subi	r24, 0x7F	; 127
    8d6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8d6e:	11 e0       	ldi	r17, 0x01	; 1
    8d70:	fc 01       	movw	r30, r24
    8d72:	60 81       	ld	r22, Z
    8d74:	71 81       	ldd	r23, Z+1	; 0x01
    8d76:	82 81       	ldd	r24, Z+2	; 0x02
    8d78:	93 81       	ldd	r25, Z+3	; 0x03
    8d7a:	20 e0       	ldi	r18, 0x00	; 0
    8d7c:	3f ef       	ldi	r19, 0xFF	; 255
    8d7e:	4f e7       	ldi	r20, 0x7F	; 127
    8d80:	57 e4       	ldi	r21, 0x47	; 71
    8d82:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8d86:	18 16       	cp	r1, r24
    8d88:	0c f0       	brlt	.+2      	; 0x8d8c <pick_drop+0x2c9a>
    8d8a:	10 e0       	ldi	r17, 0x00	; 0
    8d8c:	11 23       	and	r17, r17
    8d8e:	09 f4       	brne	.+2      	; 0x8d92 <pick_drop+0x2ca0>
    8d90:	4d c0       	rjmp	.+154    	; 0x8e2c <pick_drop+0x2d3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8d92:	ce 01       	movw	r24, r28
    8d94:	83 58       	subi	r24, 0x83	; 131
    8d96:	9e 4f       	sbci	r25, 0xFE	; 254
    8d98:	fc 01       	movw	r30, r24
    8d9a:	60 81       	ld	r22, Z
    8d9c:	71 81       	ldd	r23, Z+1	; 0x01
    8d9e:	82 81       	ldd	r24, Z+2	; 0x02
    8da0:	93 81       	ldd	r25, Z+3	; 0x03
    8da2:	20 e0       	ldi	r18, 0x00	; 0
    8da4:	30 e0       	ldi	r19, 0x00	; 0
    8da6:	40 e2       	ldi	r20, 0x20	; 32
    8da8:	51 e4       	ldi	r21, 0x41	; 65
    8daa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8dae:	dc 01       	movw	r26, r24
    8db0:	cb 01       	movw	r24, r22
    8db2:	8e 01       	movw	r16, r28
    8db4:	0b 57       	subi	r16, 0x7B	; 123
    8db6:	1e 4f       	sbci	r17, 0xFE	; 254
    8db8:	bc 01       	movw	r22, r24
    8dba:	cd 01       	movw	r24, r26
    8dbc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8dc0:	dc 01       	movw	r26, r24
    8dc2:	cb 01       	movw	r24, r22
    8dc4:	f8 01       	movw	r30, r16
    8dc6:	91 83       	std	Z+1, r25	; 0x01
    8dc8:	80 83       	st	Z, r24
    8dca:	27 c0       	rjmp	.+78     	; 0x8e1a <pick_drop+0x2d28>
    8dcc:	ce 01       	movw	r24, r28
    8dce:	89 57       	subi	r24, 0x79	; 121
    8dd0:	9e 4f       	sbci	r25, 0xFE	; 254
    8dd2:	20 e7       	ldi	r18, 0x70	; 112
    8dd4:	31 e0       	ldi	r19, 0x01	; 1
    8dd6:	fc 01       	movw	r30, r24
    8dd8:	31 83       	std	Z+1, r19	; 0x01
    8dda:	20 83       	st	Z, r18
    8ddc:	ce 01       	movw	r24, r28
    8dde:	89 57       	subi	r24, 0x79	; 121
    8de0:	9e 4f       	sbci	r25, 0xFE	; 254
    8de2:	fc 01       	movw	r30, r24
    8de4:	80 81       	ld	r24, Z
    8de6:	91 81       	ldd	r25, Z+1	; 0x01
    8de8:	8c 01       	movw	r16, r24
    8dea:	c8 01       	movw	r24, r16
    8dec:	01 97       	sbiw	r24, 0x01	; 1
    8dee:	f1 f7       	brne	.-4      	; 0x8dec <pick_drop+0x2cfa>
    8df0:	8c 01       	movw	r16, r24
    8df2:	ce 01       	movw	r24, r28
    8df4:	89 57       	subi	r24, 0x79	; 121
    8df6:	9e 4f       	sbci	r25, 0xFE	; 254
    8df8:	fc 01       	movw	r30, r24
    8dfa:	11 83       	std	Z+1, r17	; 0x01
    8dfc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8dfe:	ce 01       	movw	r24, r28
    8e00:	8b 57       	subi	r24, 0x7B	; 123
    8e02:	9e 4f       	sbci	r25, 0xFE	; 254
    8e04:	9e 01       	movw	r18, r28
    8e06:	2b 57       	subi	r18, 0x7B	; 123
    8e08:	3e 4f       	sbci	r19, 0xFE	; 254
    8e0a:	f9 01       	movw	r30, r18
    8e0c:	20 81       	ld	r18, Z
    8e0e:	31 81       	ldd	r19, Z+1	; 0x01
    8e10:	21 50       	subi	r18, 0x01	; 1
    8e12:	30 40       	sbci	r19, 0x00	; 0
    8e14:	fc 01       	movw	r30, r24
    8e16:	31 83       	std	Z+1, r19	; 0x01
    8e18:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8e1a:	ce 01       	movw	r24, r28
    8e1c:	8b 57       	subi	r24, 0x7B	; 123
    8e1e:	9e 4f       	sbci	r25, 0xFE	; 254
    8e20:	fc 01       	movw	r30, r24
    8e22:	80 81       	ld	r24, Z
    8e24:	91 81       	ldd	r25, Z+1	; 0x01
    8e26:	00 97       	sbiw	r24, 0x00	; 0
    8e28:	89 f6       	brne	.-94     	; 0x8dcc <pick_drop+0x2cda>
    8e2a:	2f c0       	rjmp	.+94     	; 0x8e8a <pick_drop+0x2d98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8e2c:	8e 01       	movw	r16, r28
    8e2e:	0b 57       	subi	r16, 0x7B	; 123
    8e30:	1e 4f       	sbci	r17, 0xFE	; 254
    8e32:	ce 01       	movw	r24, r28
    8e34:	8f 57       	subi	r24, 0x7F	; 127
    8e36:	9e 4f       	sbci	r25, 0xFE	; 254
    8e38:	fc 01       	movw	r30, r24
    8e3a:	60 81       	ld	r22, Z
    8e3c:	71 81       	ldd	r23, Z+1	; 0x01
    8e3e:	82 81       	ldd	r24, Z+2	; 0x02
    8e40:	93 81       	ldd	r25, Z+3	; 0x03
    8e42:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8e46:	dc 01       	movw	r26, r24
    8e48:	cb 01       	movw	r24, r22
    8e4a:	f8 01       	movw	r30, r16
    8e4c:	91 83       	std	Z+1, r25	; 0x01
    8e4e:	80 83       	st	Z, r24
    8e50:	ce 01       	movw	r24, r28
    8e52:	87 57       	subi	r24, 0x77	; 119
    8e54:	9e 4f       	sbci	r25, 0xFE	; 254
    8e56:	9e 01       	movw	r18, r28
    8e58:	2b 57       	subi	r18, 0x7B	; 123
    8e5a:	3e 4f       	sbci	r19, 0xFE	; 254
    8e5c:	f9 01       	movw	r30, r18
    8e5e:	20 81       	ld	r18, Z
    8e60:	31 81       	ldd	r19, Z+1	; 0x01
    8e62:	fc 01       	movw	r30, r24
    8e64:	31 83       	std	Z+1, r19	; 0x01
    8e66:	20 83       	st	Z, r18
    8e68:	ce 01       	movw	r24, r28
    8e6a:	87 57       	subi	r24, 0x77	; 119
    8e6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8e6e:	fc 01       	movw	r30, r24
    8e70:	80 81       	ld	r24, Z
    8e72:	91 81       	ldd	r25, Z+1	; 0x01
    8e74:	8c 01       	movw	r16, r24
    8e76:	c8 01       	movw	r24, r16
    8e78:	01 97       	sbiw	r24, 0x01	; 1
    8e7a:	f1 f7       	brne	.-4      	; 0x8e78 <pick_drop+0x2d86>
    8e7c:	8c 01       	movw	r16, r24
    8e7e:	ce 01       	movw	r24, r28
    8e80:	87 57       	subi	r24, 0x77	; 119
    8e82:	9e 4f       	sbci	r25, 0xFE	; 254
    8e84:	fc 01       	movw	r30, r24
    8e86:	11 83       	std	Z+1, r17	; 0x01
    8e88:	00 83       	st	Z, r16
				_delay_ms(20);
				front();
    8e8a:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    8e8e:	9e 01       	movw	r18, r28
    8e90:	25 57       	subi	r18, 0x75	; 117
    8e92:	3e 4f       	sbci	r19, 0xFE	; 254
    8e94:	80 e0       	ldi	r24, 0x00	; 0
    8e96:	90 e0       	ldi	r25, 0x00	; 0
    8e98:	a8 ec       	ldi	r26, 0xC8	; 200
    8e9a:	b2 e4       	ldi	r27, 0x42	; 66
    8e9c:	f9 01       	movw	r30, r18
    8e9e:	80 83       	st	Z, r24
    8ea0:	91 83       	std	Z+1, r25	; 0x01
    8ea2:	a2 83       	std	Z+2, r26	; 0x02
    8ea4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8ea6:	8e 01       	movw	r16, r28
    8ea8:	01 57       	subi	r16, 0x71	; 113
    8eaa:	1e 4f       	sbci	r17, 0xFE	; 254
    8eac:	ce 01       	movw	r24, r28
    8eae:	85 57       	subi	r24, 0x75	; 117
    8eb0:	9e 4f       	sbci	r25, 0xFE	; 254
    8eb2:	fc 01       	movw	r30, r24
    8eb4:	60 81       	ld	r22, Z
    8eb6:	71 81       	ldd	r23, Z+1	; 0x01
    8eb8:	82 81       	ldd	r24, Z+2	; 0x02
    8eba:	93 81       	ldd	r25, Z+3	; 0x03
    8ebc:	26 e6       	ldi	r18, 0x66	; 102
    8ebe:	36 e6       	ldi	r19, 0x66	; 102
    8ec0:	46 e6       	ldi	r20, 0x66	; 102
    8ec2:	55 e4       	ldi	r21, 0x45	; 69
    8ec4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8ec8:	dc 01       	movw	r26, r24
    8eca:	cb 01       	movw	r24, r22
    8ecc:	f8 01       	movw	r30, r16
    8ece:	80 83       	st	Z, r24
    8ed0:	91 83       	std	Z+1, r25	; 0x01
    8ed2:	a2 83       	std	Z+2, r26	; 0x02
    8ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8ed6:	ce 01       	movw	r24, r28
    8ed8:	81 57       	subi	r24, 0x71	; 113
    8eda:	9e 4f       	sbci	r25, 0xFE	; 254
    8edc:	11 e0       	ldi	r17, 0x01	; 1
    8ede:	fc 01       	movw	r30, r24
    8ee0:	60 81       	ld	r22, Z
    8ee2:	71 81       	ldd	r23, Z+1	; 0x01
    8ee4:	82 81       	ldd	r24, Z+2	; 0x02
    8ee6:	93 81       	ldd	r25, Z+3	; 0x03
    8ee8:	20 e0       	ldi	r18, 0x00	; 0
    8eea:	30 e0       	ldi	r19, 0x00	; 0
    8eec:	40 e8       	ldi	r20, 0x80	; 128
    8eee:	5f e3       	ldi	r21, 0x3F	; 63
    8ef0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    8ef4:	88 23       	and	r24, r24
    8ef6:	0c f0       	brlt	.+2      	; 0x8efa <pick_drop+0x2e08>
    8ef8:	10 e0       	ldi	r17, 0x00	; 0
    8efa:	11 23       	and	r17, r17
    8efc:	49 f0       	breq	.+18     	; 0x8f10 <pick_drop+0x2e1e>
		__ticks = 1;
    8efe:	ce 01       	movw	r24, r28
    8f00:	8d 56       	subi	r24, 0x6D	; 109
    8f02:	9e 4f       	sbci	r25, 0xFE	; 254
    8f04:	21 e0       	ldi	r18, 0x01	; 1
    8f06:	30 e0       	ldi	r19, 0x00	; 0
    8f08:	fc 01       	movw	r30, r24
    8f0a:	31 83       	std	Z+1, r19	; 0x01
    8f0c:	20 83       	st	Z, r18
    8f0e:	74 c0       	rjmp	.+232    	; 0x8ff8 <pick_drop+0x2f06>
	else if (__tmp > 65535)
    8f10:	ce 01       	movw	r24, r28
    8f12:	81 57       	subi	r24, 0x71	; 113
    8f14:	9e 4f       	sbci	r25, 0xFE	; 254
    8f16:	11 e0       	ldi	r17, 0x01	; 1
    8f18:	fc 01       	movw	r30, r24
    8f1a:	60 81       	ld	r22, Z
    8f1c:	71 81       	ldd	r23, Z+1	; 0x01
    8f1e:	82 81       	ldd	r24, Z+2	; 0x02
    8f20:	93 81       	ldd	r25, Z+3	; 0x03
    8f22:	20 e0       	ldi	r18, 0x00	; 0
    8f24:	3f ef       	ldi	r19, 0xFF	; 255
    8f26:	4f e7       	ldi	r20, 0x7F	; 127
    8f28:	57 e4       	ldi	r21, 0x47	; 71
    8f2a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    8f2e:	18 16       	cp	r1, r24
    8f30:	0c f0       	brlt	.+2      	; 0x8f34 <pick_drop+0x2e42>
    8f32:	10 e0       	ldi	r17, 0x00	; 0
    8f34:	11 23       	and	r17, r17
    8f36:	09 f4       	brne	.+2      	; 0x8f3a <pick_drop+0x2e48>
    8f38:	4d c0       	rjmp	.+154    	; 0x8fd4 <pick_drop+0x2ee2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8f3a:	ce 01       	movw	r24, r28
    8f3c:	85 57       	subi	r24, 0x75	; 117
    8f3e:	9e 4f       	sbci	r25, 0xFE	; 254
    8f40:	fc 01       	movw	r30, r24
    8f42:	60 81       	ld	r22, Z
    8f44:	71 81       	ldd	r23, Z+1	; 0x01
    8f46:	82 81       	ldd	r24, Z+2	; 0x02
    8f48:	93 81       	ldd	r25, Z+3	; 0x03
    8f4a:	20 e0       	ldi	r18, 0x00	; 0
    8f4c:	30 e0       	ldi	r19, 0x00	; 0
    8f4e:	40 e2       	ldi	r20, 0x20	; 32
    8f50:	51 e4       	ldi	r21, 0x41	; 65
    8f52:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    8f56:	dc 01       	movw	r26, r24
    8f58:	cb 01       	movw	r24, r22
    8f5a:	8e 01       	movw	r16, r28
    8f5c:	0d 56       	subi	r16, 0x6D	; 109
    8f5e:	1e 4f       	sbci	r17, 0xFE	; 254
    8f60:	bc 01       	movw	r22, r24
    8f62:	cd 01       	movw	r24, r26
    8f64:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8f68:	dc 01       	movw	r26, r24
    8f6a:	cb 01       	movw	r24, r22
    8f6c:	f8 01       	movw	r30, r16
    8f6e:	91 83       	std	Z+1, r25	; 0x01
    8f70:	80 83       	st	Z, r24
    8f72:	27 c0       	rjmp	.+78     	; 0x8fc2 <pick_drop+0x2ed0>
    8f74:	ce 01       	movw	r24, r28
    8f76:	8b 56       	subi	r24, 0x6B	; 107
    8f78:	9e 4f       	sbci	r25, 0xFE	; 254
    8f7a:	20 e7       	ldi	r18, 0x70	; 112
    8f7c:	31 e0       	ldi	r19, 0x01	; 1
    8f7e:	fc 01       	movw	r30, r24
    8f80:	31 83       	std	Z+1, r19	; 0x01
    8f82:	20 83       	st	Z, r18
    8f84:	ce 01       	movw	r24, r28
    8f86:	8b 56       	subi	r24, 0x6B	; 107
    8f88:	9e 4f       	sbci	r25, 0xFE	; 254
    8f8a:	fc 01       	movw	r30, r24
    8f8c:	80 81       	ld	r24, Z
    8f8e:	91 81       	ldd	r25, Z+1	; 0x01
    8f90:	8c 01       	movw	r16, r24
    8f92:	c8 01       	movw	r24, r16
    8f94:	01 97       	sbiw	r24, 0x01	; 1
    8f96:	f1 f7       	brne	.-4      	; 0x8f94 <pick_drop+0x2ea2>
    8f98:	8c 01       	movw	r16, r24
    8f9a:	ce 01       	movw	r24, r28
    8f9c:	8b 56       	subi	r24, 0x6B	; 107
    8f9e:	9e 4f       	sbci	r25, 0xFE	; 254
    8fa0:	fc 01       	movw	r30, r24
    8fa2:	11 83       	std	Z+1, r17	; 0x01
    8fa4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8fa6:	ce 01       	movw	r24, r28
    8fa8:	8d 56       	subi	r24, 0x6D	; 109
    8faa:	9e 4f       	sbci	r25, 0xFE	; 254
    8fac:	9e 01       	movw	r18, r28
    8fae:	2d 56       	subi	r18, 0x6D	; 109
    8fb0:	3e 4f       	sbci	r19, 0xFE	; 254
    8fb2:	f9 01       	movw	r30, r18
    8fb4:	20 81       	ld	r18, Z
    8fb6:	31 81       	ldd	r19, Z+1	; 0x01
    8fb8:	21 50       	subi	r18, 0x01	; 1
    8fba:	30 40       	sbci	r19, 0x00	; 0
    8fbc:	fc 01       	movw	r30, r24
    8fbe:	31 83       	std	Z+1, r19	; 0x01
    8fc0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8fc2:	ce 01       	movw	r24, r28
    8fc4:	8d 56       	subi	r24, 0x6D	; 109
    8fc6:	9e 4f       	sbci	r25, 0xFE	; 254
    8fc8:	fc 01       	movw	r30, r24
    8fca:	80 81       	ld	r24, Z
    8fcc:	91 81       	ldd	r25, Z+1	; 0x01
    8fce:	00 97       	sbiw	r24, 0x00	; 0
    8fd0:	89 f6       	brne	.-94     	; 0x8f74 <pick_drop+0x2e82>
    8fd2:	2f c0       	rjmp	.+94     	; 0x9032 <pick_drop+0x2f40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8fd4:	8e 01       	movw	r16, r28
    8fd6:	0d 56       	subi	r16, 0x6D	; 109
    8fd8:	1e 4f       	sbci	r17, 0xFE	; 254
    8fda:	ce 01       	movw	r24, r28
    8fdc:	81 57       	subi	r24, 0x71	; 113
    8fde:	9e 4f       	sbci	r25, 0xFE	; 254
    8fe0:	fc 01       	movw	r30, r24
    8fe2:	60 81       	ld	r22, Z
    8fe4:	71 81       	ldd	r23, Z+1	; 0x01
    8fe6:	82 81       	ldd	r24, Z+2	; 0x02
    8fe8:	93 81       	ldd	r25, Z+3	; 0x03
    8fea:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    8fee:	dc 01       	movw	r26, r24
    8ff0:	cb 01       	movw	r24, r22
    8ff2:	f8 01       	movw	r30, r16
    8ff4:	91 83       	std	Z+1, r25	; 0x01
    8ff6:	80 83       	st	Z, r24
    8ff8:	ce 01       	movw	r24, r28
    8ffa:	89 56       	subi	r24, 0x69	; 105
    8ffc:	9e 4f       	sbci	r25, 0xFE	; 254
    8ffe:	9e 01       	movw	r18, r28
    9000:	2d 56       	subi	r18, 0x6D	; 109
    9002:	3e 4f       	sbci	r19, 0xFE	; 254
    9004:	f9 01       	movw	r30, r18
    9006:	20 81       	ld	r18, Z
    9008:	31 81       	ldd	r19, Z+1	; 0x01
    900a:	fc 01       	movw	r30, r24
    900c:	31 83       	std	Z+1, r19	; 0x01
    900e:	20 83       	st	Z, r18
    9010:	ce 01       	movw	r24, r28
    9012:	89 56       	subi	r24, 0x69	; 105
    9014:	9e 4f       	sbci	r25, 0xFE	; 254
    9016:	fc 01       	movw	r30, r24
    9018:	80 81       	ld	r24, Z
    901a:	91 81       	ldd	r25, Z+1	; 0x01
    901c:	8c 01       	movw	r16, r24
    901e:	c8 01       	movw	r24, r16
    9020:	01 97       	sbiw	r24, 0x01	; 1
    9022:	f1 f7       	brne	.-4      	; 0x9020 <pick_drop+0x2f2e>
    9024:	8c 01       	movw	r16, r24
    9026:	ce 01       	movw	r24, r28
    9028:	89 56       	subi	r24, 0x69	; 105
    902a:	9e 4f       	sbci	r25, 0xFE	; 254
    902c:	fc 01       	movw	r30, r24
    902e:	11 83       	std	Z+1, r17	; 0x01
    9030:	00 83       	st	Z, r16
				_delay_ms(100);
				correct_left();
    9032:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				back_mm(70);
    9036:	86 e4       	ldi	r24, 0x46	; 70
    9038:	90 e0       	ldi	r25, 0x00	; 0
    903a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    903e:	9e 01       	movw	r18, r28
    9040:	27 56       	subi	r18, 0x67	; 103
    9042:	3e 4f       	sbci	r19, 0xFE	; 254
    9044:	80 e0       	ldi	r24, 0x00	; 0
    9046:	90 e0       	ldi	r25, 0x00	; 0
    9048:	a0 ea       	ldi	r26, 0xA0	; 160
    904a:	b1 e4       	ldi	r27, 0x41	; 65
    904c:	f9 01       	movw	r30, r18
    904e:	80 83       	st	Z, r24
    9050:	91 83       	std	Z+1, r25	; 0x01
    9052:	a2 83       	std	Z+2, r26	; 0x02
    9054:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9056:	8e 01       	movw	r16, r28
    9058:	03 56       	subi	r16, 0x63	; 99
    905a:	1e 4f       	sbci	r17, 0xFE	; 254
    905c:	ce 01       	movw	r24, r28
    905e:	87 56       	subi	r24, 0x67	; 103
    9060:	9e 4f       	sbci	r25, 0xFE	; 254
    9062:	fc 01       	movw	r30, r24
    9064:	60 81       	ld	r22, Z
    9066:	71 81       	ldd	r23, Z+1	; 0x01
    9068:	82 81       	ldd	r24, Z+2	; 0x02
    906a:	93 81       	ldd	r25, Z+3	; 0x03
    906c:	26 e6       	ldi	r18, 0x66	; 102
    906e:	36 e6       	ldi	r19, 0x66	; 102
    9070:	46 e6       	ldi	r20, 0x66	; 102
    9072:	55 e4       	ldi	r21, 0x45	; 69
    9074:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9078:	dc 01       	movw	r26, r24
    907a:	cb 01       	movw	r24, r22
    907c:	f8 01       	movw	r30, r16
    907e:	80 83       	st	Z, r24
    9080:	91 83       	std	Z+1, r25	; 0x01
    9082:	a2 83       	std	Z+2, r26	; 0x02
    9084:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9086:	ce 01       	movw	r24, r28
    9088:	83 56       	subi	r24, 0x63	; 99
    908a:	9e 4f       	sbci	r25, 0xFE	; 254
    908c:	11 e0       	ldi	r17, 0x01	; 1
    908e:	fc 01       	movw	r30, r24
    9090:	60 81       	ld	r22, Z
    9092:	71 81       	ldd	r23, Z+1	; 0x01
    9094:	82 81       	ldd	r24, Z+2	; 0x02
    9096:	93 81       	ldd	r25, Z+3	; 0x03
    9098:	20 e0       	ldi	r18, 0x00	; 0
    909a:	30 e0       	ldi	r19, 0x00	; 0
    909c:	40 e8       	ldi	r20, 0x80	; 128
    909e:	5f e3       	ldi	r21, 0x3F	; 63
    90a0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    90a4:	88 23       	and	r24, r24
    90a6:	0c f0       	brlt	.+2      	; 0x90aa <pick_drop+0x2fb8>
    90a8:	10 e0       	ldi	r17, 0x00	; 0
    90aa:	11 23       	and	r17, r17
    90ac:	49 f0       	breq	.+18     	; 0x90c0 <pick_drop+0x2fce>
		__ticks = 1;
    90ae:	ce 01       	movw	r24, r28
    90b0:	8f 55       	subi	r24, 0x5F	; 95
    90b2:	9e 4f       	sbci	r25, 0xFE	; 254
    90b4:	21 e0       	ldi	r18, 0x01	; 1
    90b6:	30 e0       	ldi	r19, 0x00	; 0
    90b8:	fc 01       	movw	r30, r24
    90ba:	31 83       	std	Z+1, r19	; 0x01
    90bc:	20 83       	st	Z, r18
    90be:	75 c0       	rjmp	.+234    	; 0x91aa <pick_drop+0x30b8>
	else if (__tmp > 65535)
    90c0:	ce 01       	movw	r24, r28
    90c2:	83 56       	subi	r24, 0x63	; 99
    90c4:	9e 4f       	sbci	r25, 0xFE	; 254
    90c6:	11 e0       	ldi	r17, 0x01	; 1
    90c8:	fc 01       	movw	r30, r24
    90ca:	60 81       	ld	r22, Z
    90cc:	71 81       	ldd	r23, Z+1	; 0x01
    90ce:	82 81       	ldd	r24, Z+2	; 0x02
    90d0:	93 81       	ldd	r25, Z+3	; 0x03
    90d2:	20 e0       	ldi	r18, 0x00	; 0
    90d4:	3f ef       	ldi	r19, 0xFF	; 255
    90d6:	4f e7       	ldi	r20, 0x7F	; 127
    90d8:	57 e4       	ldi	r21, 0x47	; 71
    90da:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    90de:	18 16       	cp	r1, r24
    90e0:	0c f0       	brlt	.+2      	; 0x90e4 <pick_drop+0x2ff2>
    90e2:	10 e0       	ldi	r17, 0x00	; 0
    90e4:	11 23       	and	r17, r17
    90e6:	09 f4       	brne	.+2      	; 0x90ea <pick_drop+0x2ff8>
    90e8:	4e c0       	rjmp	.+156    	; 0x9186 <pick_drop+0x3094>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    90ea:	ce 01       	movw	r24, r28
    90ec:	87 56       	subi	r24, 0x67	; 103
    90ee:	9e 4f       	sbci	r25, 0xFE	; 254
    90f0:	fc 01       	movw	r30, r24
    90f2:	60 81       	ld	r22, Z
    90f4:	71 81       	ldd	r23, Z+1	; 0x01
    90f6:	82 81       	ldd	r24, Z+2	; 0x02
    90f8:	93 81       	ldd	r25, Z+3	; 0x03
    90fa:	20 e0       	ldi	r18, 0x00	; 0
    90fc:	30 e0       	ldi	r19, 0x00	; 0
    90fe:	40 e2       	ldi	r20, 0x20	; 32
    9100:	51 e4       	ldi	r21, 0x41	; 65
    9102:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9106:	dc 01       	movw	r26, r24
    9108:	cb 01       	movw	r24, r22
    910a:	8e 01       	movw	r16, r28
    910c:	0f 55       	subi	r16, 0x5F	; 95
    910e:	1e 4f       	sbci	r17, 0xFE	; 254
    9110:	bc 01       	movw	r22, r24
    9112:	cd 01       	movw	r24, r26
    9114:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9118:	dc 01       	movw	r26, r24
    911a:	cb 01       	movw	r24, r22
    911c:	f8 01       	movw	r30, r16
    911e:	91 83       	std	Z+1, r25	; 0x01
    9120:	80 83       	st	Z, r24
    9122:	27 c0       	rjmp	.+78     	; 0x9172 <pick_drop+0x3080>
    9124:	ce 01       	movw	r24, r28
    9126:	8d 55       	subi	r24, 0x5D	; 93
    9128:	9e 4f       	sbci	r25, 0xFE	; 254
    912a:	20 e7       	ldi	r18, 0x70	; 112
    912c:	31 e0       	ldi	r19, 0x01	; 1
    912e:	fc 01       	movw	r30, r24
    9130:	31 83       	std	Z+1, r19	; 0x01
    9132:	20 83       	st	Z, r18
    9134:	ce 01       	movw	r24, r28
    9136:	8d 55       	subi	r24, 0x5D	; 93
    9138:	9e 4f       	sbci	r25, 0xFE	; 254
    913a:	fc 01       	movw	r30, r24
    913c:	80 81       	ld	r24, Z
    913e:	91 81       	ldd	r25, Z+1	; 0x01
    9140:	8c 01       	movw	r16, r24
    9142:	c8 01       	movw	r24, r16
    9144:	01 97       	sbiw	r24, 0x01	; 1
    9146:	f1 f7       	brne	.-4      	; 0x9144 <pick_drop+0x3052>
    9148:	8c 01       	movw	r16, r24
    914a:	ce 01       	movw	r24, r28
    914c:	8d 55       	subi	r24, 0x5D	; 93
    914e:	9e 4f       	sbci	r25, 0xFE	; 254
    9150:	fc 01       	movw	r30, r24
    9152:	11 83       	std	Z+1, r17	; 0x01
    9154:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9156:	ce 01       	movw	r24, r28
    9158:	8f 55       	subi	r24, 0x5F	; 95
    915a:	9e 4f       	sbci	r25, 0xFE	; 254
    915c:	9e 01       	movw	r18, r28
    915e:	2f 55       	subi	r18, 0x5F	; 95
    9160:	3e 4f       	sbci	r19, 0xFE	; 254
    9162:	f9 01       	movw	r30, r18
    9164:	20 81       	ld	r18, Z
    9166:	31 81       	ldd	r19, Z+1	; 0x01
    9168:	21 50       	subi	r18, 0x01	; 1
    916a:	30 40       	sbci	r19, 0x00	; 0
    916c:	fc 01       	movw	r30, r24
    916e:	31 83       	std	Z+1, r19	; 0x01
    9170:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9172:	ce 01       	movw	r24, r28
    9174:	8f 55       	subi	r24, 0x5F	; 95
    9176:	9e 4f       	sbci	r25, 0xFE	; 254
    9178:	fc 01       	movw	r30, r24
    917a:	80 81       	ld	r24, Z
    917c:	91 81       	ldd	r25, Z+1	; 0x01
    917e:	00 97       	sbiw	r24, 0x00	; 0
    9180:	89 f6       	brne	.-94     	; 0x9124 <pick_drop+0x3032>
    9182:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9186:	8e 01       	movw	r16, r28
    9188:	0f 55       	subi	r16, 0x5F	; 95
    918a:	1e 4f       	sbci	r17, 0xFE	; 254
    918c:	ce 01       	movw	r24, r28
    918e:	83 56       	subi	r24, 0x63	; 99
    9190:	9e 4f       	sbci	r25, 0xFE	; 254
    9192:	fc 01       	movw	r30, r24
    9194:	60 81       	ld	r22, Z
    9196:	71 81       	ldd	r23, Z+1	; 0x01
    9198:	82 81       	ldd	r24, Z+2	; 0x02
    919a:	93 81       	ldd	r25, Z+3	; 0x03
    919c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    91a0:	dc 01       	movw	r26, r24
    91a2:	cb 01       	movw	r24, r22
    91a4:	f8 01       	movw	r30, r16
    91a6:	91 83       	std	Z+1, r25	; 0x01
    91a8:	80 83       	st	Z, r24
    91aa:	ce 01       	movw	r24, r28
    91ac:	8b 55       	subi	r24, 0x5B	; 91
    91ae:	9e 4f       	sbci	r25, 0xFE	; 254
    91b0:	9e 01       	movw	r18, r28
    91b2:	2f 55       	subi	r18, 0x5F	; 95
    91b4:	3e 4f       	sbci	r19, 0xFE	; 254
    91b6:	f9 01       	movw	r30, r18
    91b8:	20 81       	ld	r18, Z
    91ba:	31 81       	ldd	r19, Z+1	; 0x01
    91bc:	fc 01       	movw	r30, r24
    91be:	31 83       	std	Z+1, r19	; 0x01
    91c0:	20 83       	st	Z, r18
    91c2:	ce 01       	movw	r24, r28
    91c4:	8b 55       	subi	r24, 0x5B	; 91
    91c6:	9e 4f       	sbci	r25, 0xFE	; 254
    91c8:	fc 01       	movw	r30, r24
    91ca:	80 81       	ld	r24, Z
    91cc:	91 81       	ldd	r25, Z+1	; 0x01
    91ce:	8c 01       	movw	r16, r24
    91d0:	c8 01       	movw	r24, r16
    91d2:	01 97       	sbiw	r24, 0x01	; 1
    91d4:	f1 f7       	brne	.-4      	; 0x91d2 <pick_drop+0x30e0>
    91d6:	8c 01       	movw	r16, r24
    91d8:	ce 01       	movw	r24, r28
    91da:	8b 55       	subi	r24, 0x5B	; 91
    91dc:	9e 4f       	sbci	r25, 0xFE	; 254
    91de:	fc 01       	movw	r30, r24
    91e0:	11 83       	std	Z+1, r17	; 0x01
    91e2:	00 83       	st	Z, r16
    91e4:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
				_delay_ms(20);
			}
		}
					
	else if(pd=='3')
    91e8:	ce 01       	movw	r24, r28
    91ea:	8f 5f       	subi	r24, 0xFF	; 255
    91ec:	9b 4f       	sbci	r25, 0xFB	; 251
    91ee:	fc 01       	movw	r30, r24
    91f0:	80 81       	ld	r24, Z
    91f2:	83 33       	cpi	r24, 0x33	; 51
    91f4:	11 f0       	breq	.+4      	; 0x91fa <pick_drop+0x3108>
    91f6:	0c 94 0b 53 	jmp	0xa616	; 0xa616 <pick_drop+0x4524>
	{
		if(master_path[node-1]=='U')
    91fa:	80 91 4f 03 	lds	r24, 0x034F
    91fe:	90 91 50 03 	lds	r25, 0x0350
    9202:	01 97       	sbiw	r24, 0x01	; 1
    9204:	8d 5a       	subi	r24, 0xAD	; 173
    9206:	9c 4f       	sbci	r25, 0xFC	; 252
    9208:	fc 01       	movw	r30, r24
    920a:	80 81       	ld	r24, Z
    920c:	85 35       	cpi	r24, 0x55	; 85
    920e:	09 f0       	breq	.+2      	; 0x9212 <pick_drop+0x3120>
    9210:	2d c4       	rjmp	.+2138   	; 0x9a6c <pick_drop+0x397a>
		{
			forward_mm(10);
    9212:	8a e0       	ldi	r24, 0x0A	; 10
    9214:	90 e0       	ldi	r25, 0x00	; 0
    9216:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    921a:	9e 01       	movw	r18, r28
    921c:	29 55       	subi	r18, 0x59	; 89
    921e:	3e 4f       	sbci	r19, 0xFE	; 254
    9220:	80 e0       	ldi	r24, 0x00	; 0
    9222:	90 e0       	ldi	r25, 0x00	; 0
    9224:	a0 ea       	ldi	r26, 0xA0	; 160
    9226:	b1 e4       	ldi	r27, 0x41	; 65
    9228:	f9 01       	movw	r30, r18
    922a:	80 83       	st	Z, r24
    922c:	91 83       	std	Z+1, r25	; 0x01
    922e:	a2 83       	std	Z+2, r26	; 0x02
    9230:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9232:	8e 01       	movw	r16, r28
    9234:	05 55       	subi	r16, 0x55	; 85
    9236:	1e 4f       	sbci	r17, 0xFE	; 254
    9238:	ce 01       	movw	r24, r28
    923a:	89 55       	subi	r24, 0x59	; 89
    923c:	9e 4f       	sbci	r25, 0xFE	; 254
    923e:	fc 01       	movw	r30, r24
    9240:	60 81       	ld	r22, Z
    9242:	71 81       	ldd	r23, Z+1	; 0x01
    9244:	82 81       	ldd	r24, Z+2	; 0x02
    9246:	93 81       	ldd	r25, Z+3	; 0x03
    9248:	26 e6       	ldi	r18, 0x66	; 102
    924a:	36 e6       	ldi	r19, 0x66	; 102
    924c:	46 e6       	ldi	r20, 0x66	; 102
    924e:	55 e4       	ldi	r21, 0x45	; 69
    9250:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9254:	dc 01       	movw	r26, r24
    9256:	cb 01       	movw	r24, r22
    9258:	f8 01       	movw	r30, r16
    925a:	80 83       	st	Z, r24
    925c:	91 83       	std	Z+1, r25	; 0x01
    925e:	a2 83       	std	Z+2, r26	; 0x02
    9260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9262:	ce 01       	movw	r24, r28
    9264:	85 55       	subi	r24, 0x55	; 85
    9266:	9e 4f       	sbci	r25, 0xFE	; 254
    9268:	11 e0       	ldi	r17, 0x01	; 1
    926a:	fc 01       	movw	r30, r24
    926c:	60 81       	ld	r22, Z
    926e:	71 81       	ldd	r23, Z+1	; 0x01
    9270:	82 81       	ldd	r24, Z+2	; 0x02
    9272:	93 81       	ldd	r25, Z+3	; 0x03
    9274:	20 e0       	ldi	r18, 0x00	; 0
    9276:	30 e0       	ldi	r19, 0x00	; 0
    9278:	40 e8       	ldi	r20, 0x80	; 128
    927a:	5f e3       	ldi	r21, 0x3F	; 63
    927c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9280:	88 23       	and	r24, r24
    9282:	0c f0       	brlt	.+2      	; 0x9286 <pick_drop+0x3194>
    9284:	10 e0       	ldi	r17, 0x00	; 0
    9286:	11 23       	and	r17, r17
    9288:	49 f0       	breq	.+18     	; 0x929c <pick_drop+0x31aa>
		__ticks = 1;
    928a:	ce 01       	movw	r24, r28
    928c:	81 55       	subi	r24, 0x51	; 81
    928e:	9e 4f       	sbci	r25, 0xFE	; 254
    9290:	21 e0       	ldi	r18, 0x01	; 1
    9292:	30 e0       	ldi	r19, 0x00	; 0
    9294:	fc 01       	movw	r30, r24
    9296:	31 83       	std	Z+1, r19	; 0x01
    9298:	20 83       	st	Z, r18
    929a:	74 c0       	rjmp	.+232    	; 0x9384 <pick_drop+0x3292>
	else if (__tmp > 65535)
    929c:	ce 01       	movw	r24, r28
    929e:	85 55       	subi	r24, 0x55	; 85
    92a0:	9e 4f       	sbci	r25, 0xFE	; 254
    92a2:	11 e0       	ldi	r17, 0x01	; 1
    92a4:	fc 01       	movw	r30, r24
    92a6:	60 81       	ld	r22, Z
    92a8:	71 81       	ldd	r23, Z+1	; 0x01
    92aa:	82 81       	ldd	r24, Z+2	; 0x02
    92ac:	93 81       	ldd	r25, Z+3	; 0x03
    92ae:	20 e0       	ldi	r18, 0x00	; 0
    92b0:	3f ef       	ldi	r19, 0xFF	; 255
    92b2:	4f e7       	ldi	r20, 0x7F	; 127
    92b4:	57 e4       	ldi	r21, 0x47	; 71
    92b6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    92ba:	18 16       	cp	r1, r24
    92bc:	0c f0       	brlt	.+2      	; 0x92c0 <pick_drop+0x31ce>
    92be:	10 e0       	ldi	r17, 0x00	; 0
    92c0:	11 23       	and	r17, r17
    92c2:	09 f4       	brne	.+2      	; 0x92c6 <pick_drop+0x31d4>
    92c4:	4d c0       	rjmp	.+154    	; 0x9360 <pick_drop+0x326e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    92c6:	ce 01       	movw	r24, r28
    92c8:	89 55       	subi	r24, 0x59	; 89
    92ca:	9e 4f       	sbci	r25, 0xFE	; 254
    92cc:	fc 01       	movw	r30, r24
    92ce:	60 81       	ld	r22, Z
    92d0:	71 81       	ldd	r23, Z+1	; 0x01
    92d2:	82 81       	ldd	r24, Z+2	; 0x02
    92d4:	93 81       	ldd	r25, Z+3	; 0x03
    92d6:	20 e0       	ldi	r18, 0x00	; 0
    92d8:	30 e0       	ldi	r19, 0x00	; 0
    92da:	40 e2       	ldi	r20, 0x20	; 32
    92dc:	51 e4       	ldi	r21, 0x41	; 65
    92de:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    92e2:	dc 01       	movw	r26, r24
    92e4:	cb 01       	movw	r24, r22
    92e6:	8e 01       	movw	r16, r28
    92e8:	01 55       	subi	r16, 0x51	; 81
    92ea:	1e 4f       	sbci	r17, 0xFE	; 254
    92ec:	bc 01       	movw	r22, r24
    92ee:	cd 01       	movw	r24, r26
    92f0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    92f4:	dc 01       	movw	r26, r24
    92f6:	cb 01       	movw	r24, r22
    92f8:	f8 01       	movw	r30, r16
    92fa:	91 83       	std	Z+1, r25	; 0x01
    92fc:	80 83       	st	Z, r24
    92fe:	27 c0       	rjmp	.+78     	; 0x934e <pick_drop+0x325c>
    9300:	ce 01       	movw	r24, r28
    9302:	8f 54       	subi	r24, 0x4F	; 79
    9304:	9e 4f       	sbci	r25, 0xFE	; 254
    9306:	20 e7       	ldi	r18, 0x70	; 112
    9308:	31 e0       	ldi	r19, 0x01	; 1
    930a:	fc 01       	movw	r30, r24
    930c:	31 83       	std	Z+1, r19	; 0x01
    930e:	20 83       	st	Z, r18
    9310:	ce 01       	movw	r24, r28
    9312:	8f 54       	subi	r24, 0x4F	; 79
    9314:	9e 4f       	sbci	r25, 0xFE	; 254
    9316:	fc 01       	movw	r30, r24
    9318:	80 81       	ld	r24, Z
    931a:	91 81       	ldd	r25, Z+1	; 0x01
    931c:	8c 01       	movw	r16, r24
    931e:	c8 01       	movw	r24, r16
    9320:	01 97       	sbiw	r24, 0x01	; 1
    9322:	f1 f7       	brne	.-4      	; 0x9320 <pick_drop+0x322e>
    9324:	8c 01       	movw	r16, r24
    9326:	ce 01       	movw	r24, r28
    9328:	8f 54       	subi	r24, 0x4F	; 79
    932a:	9e 4f       	sbci	r25, 0xFE	; 254
    932c:	fc 01       	movw	r30, r24
    932e:	11 83       	std	Z+1, r17	; 0x01
    9330:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9332:	ce 01       	movw	r24, r28
    9334:	81 55       	subi	r24, 0x51	; 81
    9336:	9e 4f       	sbci	r25, 0xFE	; 254
    9338:	9e 01       	movw	r18, r28
    933a:	21 55       	subi	r18, 0x51	; 81
    933c:	3e 4f       	sbci	r19, 0xFE	; 254
    933e:	f9 01       	movw	r30, r18
    9340:	20 81       	ld	r18, Z
    9342:	31 81       	ldd	r19, Z+1	; 0x01
    9344:	21 50       	subi	r18, 0x01	; 1
    9346:	30 40       	sbci	r19, 0x00	; 0
    9348:	fc 01       	movw	r30, r24
    934a:	31 83       	std	Z+1, r19	; 0x01
    934c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    934e:	ce 01       	movw	r24, r28
    9350:	81 55       	subi	r24, 0x51	; 81
    9352:	9e 4f       	sbci	r25, 0xFE	; 254
    9354:	fc 01       	movw	r30, r24
    9356:	80 81       	ld	r24, Z
    9358:	91 81       	ldd	r25, Z+1	; 0x01
    935a:	00 97       	sbiw	r24, 0x00	; 0
    935c:	89 f6       	brne	.-94     	; 0x9300 <pick_drop+0x320e>
    935e:	2f c0       	rjmp	.+94     	; 0x93be <pick_drop+0x32cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9360:	8e 01       	movw	r16, r28
    9362:	01 55       	subi	r16, 0x51	; 81
    9364:	1e 4f       	sbci	r17, 0xFE	; 254
    9366:	ce 01       	movw	r24, r28
    9368:	85 55       	subi	r24, 0x55	; 85
    936a:	9e 4f       	sbci	r25, 0xFE	; 254
    936c:	fc 01       	movw	r30, r24
    936e:	60 81       	ld	r22, Z
    9370:	71 81       	ldd	r23, Z+1	; 0x01
    9372:	82 81       	ldd	r24, Z+2	; 0x02
    9374:	93 81       	ldd	r25, Z+3	; 0x03
    9376:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    937a:	dc 01       	movw	r26, r24
    937c:	cb 01       	movw	r24, r22
    937e:	f8 01       	movw	r30, r16
    9380:	91 83       	std	Z+1, r25	; 0x01
    9382:	80 83       	st	Z, r24
    9384:	ce 01       	movw	r24, r28
    9386:	8d 54       	subi	r24, 0x4D	; 77
    9388:	9e 4f       	sbci	r25, 0xFE	; 254
    938a:	9e 01       	movw	r18, r28
    938c:	21 55       	subi	r18, 0x51	; 81
    938e:	3e 4f       	sbci	r19, 0xFE	; 254
    9390:	f9 01       	movw	r30, r18
    9392:	20 81       	ld	r18, Z
    9394:	31 81       	ldd	r19, Z+1	; 0x01
    9396:	fc 01       	movw	r30, r24
    9398:	31 83       	std	Z+1, r19	; 0x01
    939a:	20 83       	st	Z, r18
    939c:	ce 01       	movw	r24, r28
    939e:	8d 54       	subi	r24, 0x4D	; 77
    93a0:	9e 4f       	sbci	r25, 0xFE	; 254
    93a2:	fc 01       	movw	r30, r24
    93a4:	80 81       	ld	r24, Z
    93a6:	91 81       	ldd	r25, Z+1	; 0x01
    93a8:	8c 01       	movw	r16, r24
    93aa:	c8 01       	movw	r24, r16
    93ac:	01 97       	sbiw	r24, 0x01	; 1
    93ae:	f1 f7       	brne	.-4      	; 0x93ac <pick_drop+0x32ba>
    93b0:	8c 01       	movw	r16, r24
    93b2:	ce 01       	movw	r24, r28
    93b4:	8d 54       	subi	r24, 0x4D	; 77
    93b6:	9e 4f       	sbci	r25, 0xFE	; 254
    93b8:	fc 01       	movw	r30, r24
    93ba:	11 83       	std	Z+1, r17	; 0x01
    93bc:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    93be:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    93c2:	9e 01       	movw	r18, r28
    93c4:	2b 54       	subi	r18, 0x4B	; 75
    93c6:	3e 4f       	sbci	r19, 0xFE	; 254
    93c8:	80 e0       	ldi	r24, 0x00	; 0
    93ca:	90 e0       	ldi	r25, 0x00	; 0
    93cc:	a8 ec       	ldi	r26, 0xC8	; 200
    93ce:	b2 e4       	ldi	r27, 0x42	; 66
    93d0:	f9 01       	movw	r30, r18
    93d2:	80 83       	st	Z, r24
    93d4:	91 83       	std	Z+1, r25	; 0x01
    93d6:	a2 83       	std	Z+2, r26	; 0x02
    93d8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    93da:	8e 01       	movw	r16, r28
    93dc:	07 54       	subi	r16, 0x47	; 71
    93de:	1e 4f       	sbci	r17, 0xFE	; 254
    93e0:	ce 01       	movw	r24, r28
    93e2:	8b 54       	subi	r24, 0x4B	; 75
    93e4:	9e 4f       	sbci	r25, 0xFE	; 254
    93e6:	fc 01       	movw	r30, r24
    93e8:	60 81       	ld	r22, Z
    93ea:	71 81       	ldd	r23, Z+1	; 0x01
    93ec:	82 81       	ldd	r24, Z+2	; 0x02
    93ee:	93 81       	ldd	r25, Z+3	; 0x03
    93f0:	26 e6       	ldi	r18, 0x66	; 102
    93f2:	36 e6       	ldi	r19, 0x66	; 102
    93f4:	46 e6       	ldi	r20, 0x66	; 102
    93f6:	55 e4       	ldi	r21, 0x45	; 69
    93f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    93fc:	dc 01       	movw	r26, r24
    93fe:	cb 01       	movw	r24, r22
    9400:	f8 01       	movw	r30, r16
    9402:	80 83       	st	Z, r24
    9404:	91 83       	std	Z+1, r25	; 0x01
    9406:	a2 83       	std	Z+2, r26	; 0x02
    9408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    940a:	ce 01       	movw	r24, r28
    940c:	87 54       	subi	r24, 0x47	; 71
    940e:	9e 4f       	sbci	r25, 0xFE	; 254
    9410:	11 e0       	ldi	r17, 0x01	; 1
    9412:	fc 01       	movw	r30, r24
    9414:	60 81       	ld	r22, Z
    9416:	71 81       	ldd	r23, Z+1	; 0x01
    9418:	82 81       	ldd	r24, Z+2	; 0x02
    941a:	93 81       	ldd	r25, Z+3	; 0x03
    941c:	20 e0       	ldi	r18, 0x00	; 0
    941e:	30 e0       	ldi	r19, 0x00	; 0
    9420:	40 e8       	ldi	r20, 0x80	; 128
    9422:	5f e3       	ldi	r21, 0x3F	; 63
    9424:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9428:	88 23       	and	r24, r24
    942a:	0c f0       	brlt	.+2      	; 0x942e <pick_drop+0x333c>
    942c:	10 e0       	ldi	r17, 0x00	; 0
    942e:	11 23       	and	r17, r17
    9430:	49 f0       	breq	.+18     	; 0x9444 <pick_drop+0x3352>
		__ticks = 1;
    9432:	ce 01       	movw	r24, r28
    9434:	83 54       	subi	r24, 0x43	; 67
    9436:	9e 4f       	sbci	r25, 0xFE	; 254
    9438:	21 e0       	ldi	r18, 0x01	; 1
    943a:	30 e0       	ldi	r19, 0x00	; 0
    943c:	fc 01       	movw	r30, r24
    943e:	31 83       	std	Z+1, r19	; 0x01
    9440:	20 83       	st	Z, r18
    9442:	74 c0       	rjmp	.+232    	; 0x952c <pick_drop+0x343a>
	else if (__tmp > 65535)
    9444:	ce 01       	movw	r24, r28
    9446:	87 54       	subi	r24, 0x47	; 71
    9448:	9e 4f       	sbci	r25, 0xFE	; 254
    944a:	11 e0       	ldi	r17, 0x01	; 1
    944c:	fc 01       	movw	r30, r24
    944e:	60 81       	ld	r22, Z
    9450:	71 81       	ldd	r23, Z+1	; 0x01
    9452:	82 81       	ldd	r24, Z+2	; 0x02
    9454:	93 81       	ldd	r25, Z+3	; 0x03
    9456:	20 e0       	ldi	r18, 0x00	; 0
    9458:	3f ef       	ldi	r19, 0xFF	; 255
    945a:	4f e7       	ldi	r20, 0x7F	; 127
    945c:	57 e4       	ldi	r21, 0x47	; 71
    945e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    9462:	18 16       	cp	r1, r24
    9464:	0c f0       	brlt	.+2      	; 0x9468 <pick_drop+0x3376>
    9466:	10 e0       	ldi	r17, 0x00	; 0
    9468:	11 23       	and	r17, r17
    946a:	09 f4       	brne	.+2      	; 0x946e <pick_drop+0x337c>
    946c:	4d c0       	rjmp	.+154    	; 0x9508 <pick_drop+0x3416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    946e:	ce 01       	movw	r24, r28
    9470:	8b 54       	subi	r24, 0x4B	; 75
    9472:	9e 4f       	sbci	r25, 0xFE	; 254
    9474:	fc 01       	movw	r30, r24
    9476:	60 81       	ld	r22, Z
    9478:	71 81       	ldd	r23, Z+1	; 0x01
    947a:	82 81       	ldd	r24, Z+2	; 0x02
    947c:	93 81       	ldd	r25, Z+3	; 0x03
    947e:	20 e0       	ldi	r18, 0x00	; 0
    9480:	30 e0       	ldi	r19, 0x00	; 0
    9482:	40 e2       	ldi	r20, 0x20	; 32
    9484:	51 e4       	ldi	r21, 0x41	; 65
    9486:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    948a:	dc 01       	movw	r26, r24
    948c:	cb 01       	movw	r24, r22
    948e:	8e 01       	movw	r16, r28
    9490:	03 54       	subi	r16, 0x43	; 67
    9492:	1e 4f       	sbci	r17, 0xFE	; 254
    9494:	bc 01       	movw	r22, r24
    9496:	cd 01       	movw	r24, r26
    9498:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    949c:	dc 01       	movw	r26, r24
    949e:	cb 01       	movw	r24, r22
    94a0:	f8 01       	movw	r30, r16
    94a2:	91 83       	std	Z+1, r25	; 0x01
    94a4:	80 83       	st	Z, r24
    94a6:	27 c0       	rjmp	.+78     	; 0x94f6 <pick_drop+0x3404>
    94a8:	ce 01       	movw	r24, r28
    94aa:	81 54       	subi	r24, 0x41	; 65
    94ac:	9e 4f       	sbci	r25, 0xFE	; 254
    94ae:	20 e7       	ldi	r18, 0x70	; 112
    94b0:	31 e0       	ldi	r19, 0x01	; 1
    94b2:	fc 01       	movw	r30, r24
    94b4:	31 83       	std	Z+1, r19	; 0x01
    94b6:	20 83       	st	Z, r18
    94b8:	ce 01       	movw	r24, r28
    94ba:	81 54       	subi	r24, 0x41	; 65
    94bc:	9e 4f       	sbci	r25, 0xFE	; 254
    94be:	fc 01       	movw	r30, r24
    94c0:	80 81       	ld	r24, Z
    94c2:	91 81       	ldd	r25, Z+1	; 0x01
    94c4:	8c 01       	movw	r16, r24
    94c6:	c8 01       	movw	r24, r16
    94c8:	01 97       	sbiw	r24, 0x01	; 1
    94ca:	f1 f7       	brne	.-4      	; 0x94c8 <pick_drop+0x33d6>
    94cc:	8c 01       	movw	r16, r24
    94ce:	ce 01       	movw	r24, r28
    94d0:	81 54       	subi	r24, 0x41	; 65
    94d2:	9e 4f       	sbci	r25, 0xFE	; 254
    94d4:	fc 01       	movw	r30, r24
    94d6:	11 83       	std	Z+1, r17	; 0x01
    94d8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    94da:	ce 01       	movw	r24, r28
    94dc:	83 54       	subi	r24, 0x43	; 67
    94de:	9e 4f       	sbci	r25, 0xFE	; 254
    94e0:	9e 01       	movw	r18, r28
    94e2:	23 54       	subi	r18, 0x43	; 67
    94e4:	3e 4f       	sbci	r19, 0xFE	; 254
    94e6:	f9 01       	movw	r30, r18
    94e8:	20 81       	ld	r18, Z
    94ea:	31 81       	ldd	r19, Z+1	; 0x01
    94ec:	21 50       	subi	r18, 0x01	; 1
    94ee:	30 40       	sbci	r19, 0x00	; 0
    94f0:	fc 01       	movw	r30, r24
    94f2:	31 83       	std	Z+1, r19	; 0x01
    94f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    94f6:	ce 01       	movw	r24, r28
    94f8:	83 54       	subi	r24, 0x43	; 67
    94fa:	9e 4f       	sbci	r25, 0xFE	; 254
    94fc:	fc 01       	movw	r30, r24
    94fe:	80 81       	ld	r24, Z
    9500:	91 81       	ldd	r25, Z+1	; 0x01
    9502:	00 97       	sbiw	r24, 0x00	; 0
    9504:	89 f6       	brne	.-94     	; 0x94a8 <pick_drop+0x33b6>
    9506:	2f c0       	rjmp	.+94     	; 0x9566 <pick_drop+0x3474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9508:	8e 01       	movw	r16, r28
    950a:	03 54       	subi	r16, 0x43	; 67
    950c:	1e 4f       	sbci	r17, 0xFE	; 254
    950e:	ce 01       	movw	r24, r28
    9510:	87 54       	subi	r24, 0x47	; 71
    9512:	9e 4f       	sbci	r25, 0xFE	; 254
    9514:	fc 01       	movw	r30, r24
    9516:	60 81       	ld	r22, Z
    9518:	71 81       	ldd	r23, Z+1	; 0x01
    951a:	82 81       	ldd	r24, Z+2	; 0x02
    951c:	93 81       	ldd	r25, Z+3	; 0x03
    951e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9522:	dc 01       	movw	r26, r24
    9524:	cb 01       	movw	r24, r22
    9526:	f8 01       	movw	r30, r16
    9528:	91 83       	std	Z+1, r25	; 0x01
    952a:	80 83       	st	Z, r24
    952c:	ce 01       	movw	r24, r28
    952e:	8f 53       	subi	r24, 0x3F	; 63
    9530:	9e 4f       	sbci	r25, 0xFE	; 254
    9532:	9e 01       	movw	r18, r28
    9534:	23 54       	subi	r18, 0x43	; 67
    9536:	3e 4f       	sbci	r19, 0xFE	; 254
    9538:	f9 01       	movw	r30, r18
    953a:	20 81       	ld	r18, Z
    953c:	31 81       	ldd	r19, Z+1	; 0x01
    953e:	fc 01       	movw	r30, r24
    9540:	31 83       	std	Z+1, r19	; 0x01
    9542:	20 83       	st	Z, r18
    9544:	ce 01       	movw	r24, r28
    9546:	8f 53       	subi	r24, 0x3F	; 63
    9548:	9e 4f       	sbci	r25, 0xFE	; 254
    954a:	fc 01       	movw	r30, r24
    954c:	80 81       	ld	r24, Z
    954e:	91 81       	ldd	r25, Z+1	; 0x01
    9550:	8c 01       	movw	r16, r24
    9552:	c8 01       	movw	r24, r16
    9554:	01 97       	sbiw	r24, 0x01	; 1
    9556:	f1 f7       	brne	.-4      	; 0x9554 <pick_drop+0x3462>
    9558:	8c 01       	movw	r16, r24
    955a:	ce 01       	movw	r24, r28
    955c:	8f 53       	subi	r24, 0x3F	; 63
    955e:	9e 4f       	sbci	r25, 0xFE	; 254
    9560:	fc 01       	movw	r30, r24
    9562:	11 83       	std	Z+1, r17	; 0x01
    9564:	00 83       	st	Z, r16
			_delay_ms(100);
			back_mm(10);
    9566:	8a e0       	ldi	r24, 0x0A	; 10
    9568:	90 e0       	ldi	r25, 0x00	; 0
    956a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    956e:	9e 01       	movw	r18, r28
    9570:	2d 53       	subi	r18, 0x3D	; 61
    9572:	3e 4f       	sbci	r19, 0xFE	; 254
    9574:	80 e0       	ldi	r24, 0x00	; 0
    9576:	90 e0       	ldi	r25, 0x00	; 0
    9578:	a0 ea       	ldi	r26, 0xA0	; 160
    957a:	b1 e4       	ldi	r27, 0x41	; 65
    957c:	f9 01       	movw	r30, r18
    957e:	80 83       	st	Z, r24
    9580:	91 83       	std	Z+1, r25	; 0x01
    9582:	a2 83       	std	Z+2, r26	; 0x02
    9584:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9586:	8e 01       	movw	r16, r28
    9588:	09 53       	subi	r16, 0x39	; 57
    958a:	1e 4f       	sbci	r17, 0xFE	; 254
    958c:	ce 01       	movw	r24, r28
    958e:	8d 53       	subi	r24, 0x3D	; 61
    9590:	9e 4f       	sbci	r25, 0xFE	; 254
    9592:	fc 01       	movw	r30, r24
    9594:	60 81       	ld	r22, Z
    9596:	71 81       	ldd	r23, Z+1	; 0x01
    9598:	82 81       	ldd	r24, Z+2	; 0x02
    959a:	93 81       	ldd	r25, Z+3	; 0x03
    959c:	26 e6       	ldi	r18, 0x66	; 102
    959e:	36 e6       	ldi	r19, 0x66	; 102
    95a0:	46 e6       	ldi	r20, 0x66	; 102
    95a2:	55 e4       	ldi	r21, 0x45	; 69
    95a4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    95a8:	dc 01       	movw	r26, r24
    95aa:	cb 01       	movw	r24, r22
    95ac:	f8 01       	movw	r30, r16
    95ae:	80 83       	st	Z, r24
    95b0:	91 83       	std	Z+1, r25	; 0x01
    95b2:	a2 83       	std	Z+2, r26	; 0x02
    95b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    95b6:	ce 01       	movw	r24, r28
    95b8:	89 53       	subi	r24, 0x39	; 57
    95ba:	9e 4f       	sbci	r25, 0xFE	; 254
    95bc:	11 e0       	ldi	r17, 0x01	; 1
    95be:	fc 01       	movw	r30, r24
    95c0:	60 81       	ld	r22, Z
    95c2:	71 81       	ldd	r23, Z+1	; 0x01
    95c4:	82 81       	ldd	r24, Z+2	; 0x02
    95c6:	93 81       	ldd	r25, Z+3	; 0x03
    95c8:	20 e0       	ldi	r18, 0x00	; 0
    95ca:	30 e0       	ldi	r19, 0x00	; 0
    95cc:	40 e8       	ldi	r20, 0x80	; 128
    95ce:	5f e3       	ldi	r21, 0x3F	; 63
    95d0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    95d4:	88 23       	and	r24, r24
    95d6:	0c f0       	brlt	.+2      	; 0x95da <pick_drop+0x34e8>
    95d8:	10 e0       	ldi	r17, 0x00	; 0
    95da:	11 23       	and	r17, r17
    95dc:	49 f0       	breq	.+18     	; 0x95f0 <pick_drop+0x34fe>
		__ticks = 1;
    95de:	ce 01       	movw	r24, r28
    95e0:	85 53       	subi	r24, 0x35	; 53
    95e2:	9e 4f       	sbci	r25, 0xFE	; 254
    95e4:	21 e0       	ldi	r18, 0x01	; 1
    95e6:	30 e0       	ldi	r19, 0x00	; 0
    95e8:	fc 01       	movw	r30, r24
    95ea:	31 83       	std	Z+1, r19	; 0x01
    95ec:	20 83       	st	Z, r18
    95ee:	74 c0       	rjmp	.+232    	; 0x96d8 <pick_drop+0x35e6>
	else if (__tmp > 65535)
    95f0:	ce 01       	movw	r24, r28
    95f2:	89 53       	subi	r24, 0x39	; 57
    95f4:	9e 4f       	sbci	r25, 0xFE	; 254
    95f6:	11 e0       	ldi	r17, 0x01	; 1
    95f8:	fc 01       	movw	r30, r24
    95fa:	60 81       	ld	r22, Z
    95fc:	71 81       	ldd	r23, Z+1	; 0x01
    95fe:	82 81       	ldd	r24, Z+2	; 0x02
    9600:	93 81       	ldd	r25, Z+3	; 0x03
    9602:	20 e0       	ldi	r18, 0x00	; 0
    9604:	3f ef       	ldi	r19, 0xFF	; 255
    9606:	4f e7       	ldi	r20, 0x7F	; 127
    9608:	57 e4       	ldi	r21, 0x47	; 71
    960a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    960e:	18 16       	cp	r1, r24
    9610:	0c f0       	brlt	.+2      	; 0x9614 <pick_drop+0x3522>
    9612:	10 e0       	ldi	r17, 0x00	; 0
    9614:	11 23       	and	r17, r17
    9616:	09 f4       	brne	.+2      	; 0x961a <pick_drop+0x3528>
    9618:	4d c0       	rjmp	.+154    	; 0x96b4 <pick_drop+0x35c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    961a:	ce 01       	movw	r24, r28
    961c:	8d 53       	subi	r24, 0x3D	; 61
    961e:	9e 4f       	sbci	r25, 0xFE	; 254
    9620:	fc 01       	movw	r30, r24
    9622:	60 81       	ld	r22, Z
    9624:	71 81       	ldd	r23, Z+1	; 0x01
    9626:	82 81       	ldd	r24, Z+2	; 0x02
    9628:	93 81       	ldd	r25, Z+3	; 0x03
    962a:	20 e0       	ldi	r18, 0x00	; 0
    962c:	30 e0       	ldi	r19, 0x00	; 0
    962e:	40 e2       	ldi	r20, 0x20	; 32
    9630:	51 e4       	ldi	r21, 0x41	; 65
    9632:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9636:	dc 01       	movw	r26, r24
    9638:	cb 01       	movw	r24, r22
    963a:	8e 01       	movw	r16, r28
    963c:	05 53       	subi	r16, 0x35	; 53
    963e:	1e 4f       	sbci	r17, 0xFE	; 254
    9640:	bc 01       	movw	r22, r24
    9642:	cd 01       	movw	r24, r26
    9644:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9648:	dc 01       	movw	r26, r24
    964a:	cb 01       	movw	r24, r22
    964c:	f8 01       	movw	r30, r16
    964e:	91 83       	std	Z+1, r25	; 0x01
    9650:	80 83       	st	Z, r24
    9652:	27 c0       	rjmp	.+78     	; 0x96a2 <pick_drop+0x35b0>
    9654:	ce 01       	movw	r24, r28
    9656:	83 53       	subi	r24, 0x33	; 51
    9658:	9e 4f       	sbci	r25, 0xFE	; 254
    965a:	20 e7       	ldi	r18, 0x70	; 112
    965c:	31 e0       	ldi	r19, 0x01	; 1
    965e:	fc 01       	movw	r30, r24
    9660:	31 83       	std	Z+1, r19	; 0x01
    9662:	20 83       	st	Z, r18
    9664:	ce 01       	movw	r24, r28
    9666:	83 53       	subi	r24, 0x33	; 51
    9668:	9e 4f       	sbci	r25, 0xFE	; 254
    966a:	fc 01       	movw	r30, r24
    966c:	80 81       	ld	r24, Z
    966e:	91 81       	ldd	r25, Z+1	; 0x01
    9670:	8c 01       	movw	r16, r24
    9672:	c8 01       	movw	r24, r16
    9674:	01 97       	sbiw	r24, 0x01	; 1
    9676:	f1 f7       	brne	.-4      	; 0x9674 <pick_drop+0x3582>
    9678:	8c 01       	movw	r16, r24
    967a:	ce 01       	movw	r24, r28
    967c:	83 53       	subi	r24, 0x33	; 51
    967e:	9e 4f       	sbci	r25, 0xFE	; 254
    9680:	fc 01       	movw	r30, r24
    9682:	11 83       	std	Z+1, r17	; 0x01
    9684:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9686:	ce 01       	movw	r24, r28
    9688:	85 53       	subi	r24, 0x35	; 53
    968a:	9e 4f       	sbci	r25, 0xFE	; 254
    968c:	9e 01       	movw	r18, r28
    968e:	25 53       	subi	r18, 0x35	; 53
    9690:	3e 4f       	sbci	r19, 0xFE	; 254
    9692:	f9 01       	movw	r30, r18
    9694:	20 81       	ld	r18, Z
    9696:	31 81       	ldd	r19, Z+1	; 0x01
    9698:	21 50       	subi	r18, 0x01	; 1
    969a:	30 40       	sbci	r19, 0x00	; 0
    969c:	fc 01       	movw	r30, r24
    969e:	31 83       	std	Z+1, r19	; 0x01
    96a0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    96a2:	ce 01       	movw	r24, r28
    96a4:	85 53       	subi	r24, 0x35	; 53
    96a6:	9e 4f       	sbci	r25, 0xFE	; 254
    96a8:	fc 01       	movw	r30, r24
    96aa:	80 81       	ld	r24, Z
    96ac:	91 81       	ldd	r25, Z+1	; 0x01
    96ae:	00 97       	sbiw	r24, 0x00	; 0
    96b0:	89 f6       	brne	.-94     	; 0x9654 <pick_drop+0x3562>
    96b2:	2f c0       	rjmp	.+94     	; 0x9712 <pick_drop+0x3620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    96b4:	8e 01       	movw	r16, r28
    96b6:	05 53       	subi	r16, 0x35	; 53
    96b8:	1e 4f       	sbci	r17, 0xFE	; 254
    96ba:	ce 01       	movw	r24, r28
    96bc:	89 53       	subi	r24, 0x39	; 57
    96be:	9e 4f       	sbci	r25, 0xFE	; 254
    96c0:	fc 01       	movw	r30, r24
    96c2:	60 81       	ld	r22, Z
    96c4:	71 81       	ldd	r23, Z+1	; 0x01
    96c6:	82 81       	ldd	r24, Z+2	; 0x02
    96c8:	93 81       	ldd	r25, Z+3	; 0x03
    96ca:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    96ce:	dc 01       	movw	r26, r24
    96d0:	cb 01       	movw	r24, r22
    96d2:	f8 01       	movw	r30, r16
    96d4:	91 83       	std	Z+1, r25	; 0x01
    96d6:	80 83       	st	Z, r24
    96d8:	ce 01       	movw	r24, r28
    96da:	81 53       	subi	r24, 0x31	; 49
    96dc:	9e 4f       	sbci	r25, 0xFE	; 254
    96de:	9e 01       	movw	r18, r28
    96e0:	25 53       	subi	r18, 0x35	; 53
    96e2:	3e 4f       	sbci	r19, 0xFE	; 254
    96e4:	f9 01       	movw	r30, r18
    96e6:	20 81       	ld	r18, Z
    96e8:	31 81       	ldd	r19, Z+1	; 0x01
    96ea:	fc 01       	movw	r30, r24
    96ec:	31 83       	std	Z+1, r19	; 0x01
    96ee:	20 83       	st	Z, r18
    96f0:	ce 01       	movw	r24, r28
    96f2:	81 53       	subi	r24, 0x31	; 49
    96f4:	9e 4f       	sbci	r25, 0xFE	; 254
    96f6:	fc 01       	movw	r30, r24
    96f8:	80 81       	ld	r24, Z
    96fa:	91 81       	ldd	r25, Z+1	; 0x01
    96fc:	8c 01       	movw	r16, r24
    96fe:	c8 01       	movw	r24, r16
    9700:	01 97       	sbiw	r24, 0x01	; 1
    9702:	f1 f7       	brne	.-4      	; 0x9700 <pick_drop+0x360e>
    9704:	8c 01       	movw	r16, r24
    9706:	ce 01       	movw	r24, r28
    9708:	81 53       	subi	r24, 0x31	; 49
    970a:	9e 4f       	sbci	r25, 0xFE	; 254
    970c:	fc 01       	movw	r30, r24
    970e:	11 83       	std	Z+1, r17	; 0x01
    9710:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
    9712:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    9716:	9e 01       	movw	r18, r28
    9718:	2f 52       	subi	r18, 0x2F	; 47
    971a:	3e 4f       	sbci	r19, 0xFE	; 254
    971c:	80 e0       	ldi	r24, 0x00	; 0
    971e:	90 e0       	ldi	r25, 0x00	; 0
    9720:	a0 ea       	ldi	r26, 0xA0	; 160
    9722:	b1 e4       	ldi	r27, 0x41	; 65
    9724:	f9 01       	movw	r30, r18
    9726:	80 83       	st	Z, r24
    9728:	91 83       	std	Z+1, r25	; 0x01
    972a:	a2 83       	std	Z+2, r26	; 0x02
    972c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    972e:	8e 01       	movw	r16, r28
    9730:	0b 52       	subi	r16, 0x2B	; 43
    9732:	1e 4f       	sbci	r17, 0xFE	; 254
    9734:	ce 01       	movw	r24, r28
    9736:	8f 52       	subi	r24, 0x2F	; 47
    9738:	9e 4f       	sbci	r25, 0xFE	; 254
    973a:	fc 01       	movw	r30, r24
    973c:	60 81       	ld	r22, Z
    973e:	71 81       	ldd	r23, Z+1	; 0x01
    9740:	82 81       	ldd	r24, Z+2	; 0x02
    9742:	93 81       	ldd	r25, Z+3	; 0x03
    9744:	26 e6       	ldi	r18, 0x66	; 102
    9746:	36 e6       	ldi	r19, 0x66	; 102
    9748:	46 e6       	ldi	r20, 0x66	; 102
    974a:	55 e4       	ldi	r21, 0x45	; 69
    974c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9750:	dc 01       	movw	r26, r24
    9752:	cb 01       	movw	r24, r22
    9754:	f8 01       	movw	r30, r16
    9756:	80 83       	st	Z, r24
    9758:	91 83       	std	Z+1, r25	; 0x01
    975a:	a2 83       	std	Z+2, r26	; 0x02
    975c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    975e:	ce 01       	movw	r24, r28
    9760:	8b 52       	subi	r24, 0x2B	; 43
    9762:	9e 4f       	sbci	r25, 0xFE	; 254
    9764:	11 e0       	ldi	r17, 0x01	; 1
    9766:	fc 01       	movw	r30, r24
    9768:	60 81       	ld	r22, Z
    976a:	71 81       	ldd	r23, Z+1	; 0x01
    976c:	82 81       	ldd	r24, Z+2	; 0x02
    976e:	93 81       	ldd	r25, Z+3	; 0x03
    9770:	20 e0       	ldi	r18, 0x00	; 0
    9772:	30 e0       	ldi	r19, 0x00	; 0
    9774:	40 e8       	ldi	r20, 0x80	; 128
    9776:	5f e3       	ldi	r21, 0x3F	; 63
    9778:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    977c:	88 23       	and	r24, r24
    977e:	0c f0       	brlt	.+2      	; 0x9782 <pick_drop+0x3690>
    9780:	10 e0       	ldi	r17, 0x00	; 0
    9782:	11 23       	and	r17, r17
    9784:	49 f0       	breq	.+18     	; 0x9798 <pick_drop+0x36a6>
		__ticks = 1;
    9786:	ce 01       	movw	r24, r28
    9788:	87 52       	subi	r24, 0x27	; 39
    978a:	9e 4f       	sbci	r25, 0xFE	; 254
    978c:	21 e0       	ldi	r18, 0x01	; 1
    978e:	30 e0       	ldi	r19, 0x00	; 0
    9790:	fc 01       	movw	r30, r24
    9792:	31 83       	std	Z+1, r19	; 0x01
    9794:	20 83       	st	Z, r18
    9796:	74 c0       	rjmp	.+232    	; 0x9880 <pick_drop+0x378e>
	else if (__tmp > 65535)
    9798:	ce 01       	movw	r24, r28
    979a:	8b 52       	subi	r24, 0x2B	; 43
    979c:	9e 4f       	sbci	r25, 0xFE	; 254
    979e:	11 e0       	ldi	r17, 0x01	; 1
    97a0:	fc 01       	movw	r30, r24
    97a2:	60 81       	ld	r22, Z
    97a4:	71 81       	ldd	r23, Z+1	; 0x01
    97a6:	82 81       	ldd	r24, Z+2	; 0x02
    97a8:	93 81       	ldd	r25, Z+3	; 0x03
    97aa:	20 e0       	ldi	r18, 0x00	; 0
    97ac:	3f ef       	ldi	r19, 0xFF	; 255
    97ae:	4f e7       	ldi	r20, 0x7F	; 127
    97b0:	57 e4       	ldi	r21, 0x47	; 71
    97b2:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    97b6:	18 16       	cp	r1, r24
    97b8:	0c f0       	brlt	.+2      	; 0x97bc <pick_drop+0x36ca>
    97ba:	10 e0       	ldi	r17, 0x00	; 0
    97bc:	11 23       	and	r17, r17
    97be:	09 f4       	brne	.+2      	; 0x97c2 <pick_drop+0x36d0>
    97c0:	4d c0       	rjmp	.+154    	; 0x985c <pick_drop+0x376a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    97c2:	ce 01       	movw	r24, r28
    97c4:	8f 52       	subi	r24, 0x2F	; 47
    97c6:	9e 4f       	sbci	r25, 0xFE	; 254
    97c8:	fc 01       	movw	r30, r24
    97ca:	60 81       	ld	r22, Z
    97cc:	71 81       	ldd	r23, Z+1	; 0x01
    97ce:	82 81       	ldd	r24, Z+2	; 0x02
    97d0:	93 81       	ldd	r25, Z+3	; 0x03
    97d2:	20 e0       	ldi	r18, 0x00	; 0
    97d4:	30 e0       	ldi	r19, 0x00	; 0
    97d6:	40 e2       	ldi	r20, 0x20	; 32
    97d8:	51 e4       	ldi	r21, 0x41	; 65
    97da:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    97de:	dc 01       	movw	r26, r24
    97e0:	cb 01       	movw	r24, r22
    97e2:	8e 01       	movw	r16, r28
    97e4:	07 52       	subi	r16, 0x27	; 39
    97e6:	1e 4f       	sbci	r17, 0xFE	; 254
    97e8:	bc 01       	movw	r22, r24
    97ea:	cd 01       	movw	r24, r26
    97ec:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    97f0:	dc 01       	movw	r26, r24
    97f2:	cb 01       	movw	r24, r22
    97f4:	f8 01       	movw	r30, r16
    97f6:	91 83       	std	Z+1, r25	; 0x01
    97f8:	80 83       	st	Z, r24
    97fa:	27 c0       	rjmp	.+78     	; 0x984a <pick_drop+0x3758>
    97fc:	ce 01       	movw	r24, r28
    97fe:	85 52       	subi	r24, 0x25	; 37
    9800:	9e 4f       	sbci	r25, 0xFE	; 254
    9802:	20 e7       	ldi	r18, 0x70	; 112
    9804:	31 e0       	ldi	r19, 0x01	; 1
    9806:	fc 01       	movw	r30, r24
    9808:	31 83       	std	Z+1, r19	; 0x01
    980a:	20 83       	st	Z, r18
    980c:	ce 01       	movw	r24, r28
    980e:	85 52       	subi	r24, 0x25	; 37
    9810:	9e 4f       	sbci	r25, 0xFE	; 254
    9812:	fc 01       	movw	r30, r24
    9814:	80 81       	ld	r24, Z
    9816:	91 81       	ldd	r25, Z+1	; 0x01
    9818:	8c 01       	movw	r16, r24
    981a:	c8 01       	movw	r24, r16
    981c:	01 97       	sbiw	r24, 0x01	; 1
    981e:	f1 f7       	brne	.-4      	; 0x981c <pick_drop+0x372a>
    9820:	8c 01       	movw	r16, r24
    9822:	ce 01       	movw	r24, r28
    9824:	85 52       	subi	r24, 0x25	; 37
    9826:	9e 4f       	sbci	r25, 0xFE	; 254
    9828:	fc 01       	movw	r30, r24
    982a:	11 83       	std	Z+1, r17	; 0x01
    982c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    982e:	ce 01       	movw	r24, r28
    9830:	87 52       	subi	r24, 0x27	; 39
    9832:	9e 4f       	sbci	r25, 0xFE	; 254
    9834:	9e 01       	movw	r18, r28
    9836:	27 52       	subi	r18, 0x27	; 39
    9838:	3e 4f       	sbci	r19, 0xFE	; 254
    983a:	f9 01       	movw	r30, r18
    983c:	20 81       	ld	r18, Z
    983e:	31 81       	ldd	r19, Z+1	; 0x01
    9840:	21 50       	subi	r18, 0x01	; 1
    9842:	30 40       	sbci	r19, 0x00	; 0
    9844:	fc 01       	movw	r30, r24
    9846:	31 83       	std	Z+1, r19	; 0x01
    9848:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    984a:	ce 01       	movw	r24, r28
    984c:	87 52       	subi	r24, 0x27	; 39
    984e:	9e 4f       	sbci	r25, 0xFE	; 254
    9850:	fc 01       	movw	r30, r24
    9852:	80 81       	ld	r24, Z
    9854:	91 81       	ldd	r25, Z+1	; 0x01
    9856:	00 97       	sbiw	r24, 0x00	; 0
    9858:	89 f6       	brne	.-94     	; 0x97fc <pick_drop+0x370a>
    985a:	2f c0       	rjmp	.+94     	; 0x98ba <pick_drop+0x37c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    985c:	8e 01       	movw	r16, r28
    985e:	07 52       	subi	r16, 0x27	; 39
    9860:	1e 4f       	sbci	r17, 0xFE	; 254
    9862:	ce 01       	movw	r24, r28
    9864:	8b 52       	subi	r24, 0x2B	; 43
    9866:	9e 4f       	sbci	r25, 0xFE	; 254
    9868:	fc 01       	movw	r30, r24
    986a:	60 81       	ld	r22, Z
    986c:	71 81       	ldd	r23, Z+1	; 0x01
    986e:	82 81       	ldd	r24, Z+2	; 0x02
    9870:	93 81       	ldd	r25, Z+3	; 0x03
    9872:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9876:	dc 01       	movw	r26, r24
    9878:	cb 01       	movw	r24, r22
    987a:	f8 01       	movw	r30, r16
    987c:	91 83       	std	Z+1, r25	; 0x01
    987e:	80 83       	st	Z, r24
    9880:	ce 01       	movw	r24, r28
    9882:	83 52       	subi	r24, 0x23	; 35
    9884:	9e 4f       	sbci	r25, 0xFE	; 254
    9886:	9e 01       	movw	r18, r28
    9888:	27 52       	subi	r18, 0x27	; 39
    988a:	3e 4f       	sbci	r19, 0xFE	; 254
    988c:	f9 01       	movw	r30, r18
    988e:	20 81       	ld	r18, Z
    9890:	31 81       	ldd	r19, Z+1	; 0x01
    9892:	fc 01       	movw	r30, r24
    9894:	31 83       	std	Z+1, r19	; 0x01
    9896:	20 83       	st	Z, r18
    9898:	ce 01       	movw	r24, r28
    989a:	83 52       	subi	r24, 0x23	; 35
    989c:	9e 4f       	sbci	r25, 0xFE	; 254
    989e:	fc 01       	movw	r30, r24
    98a0:	80 81       	ld	r24, Z
    98a2:	91 81       	ldd	r25, Z+1	; 0x01
    98a4:	8c 01       	movw	r16, r24
    98a6:	c8 01       	movw	r24, r16
    98a8:	01 97       	sbiw	r24, 0x01	; 1
    98aa:	f1 f7       	brne	.-4      	; 0x98a8 <pick_drop+0x37b6>
    98ac:	8c 01       	movw	r16, r24
    98ae:	ce 01       	movw	r24, r28
    98b0:	83 52       	subi	r24, 0x23	; 35
    98b2:	9e 4f       	sbci	r25, 0xFE	; 254
    98b4:	fc 01       	movw	r30, r24
    98b6:	11 83       	std	Z+1, r17	; 0x01
    98b8:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(25);
    98ba:	89 e1       	ldi	r24, 0x19	; 25
    98bc:	90 e0       	ldi	r25, 0x00	; 0
    98be:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    98c2:	9e 01       	movw	r18, r28
    98c4:	21 52       	subi	r18, 0x21	; 33
    98c6:	3e 4f       	sbci	r19, 0xFE	; 254
    98c8:	80 e0       	ldi	r24, 0x00	; 0
    98ca:	90 e0       	ldi	r25, 0x00	; 0
    98cc:	a0 ea       	ldi	r26, 0xA0	; 160
    98ce:	b1 e4       	ldi	r27, 0x41	; 65
    98d0:	f9 01       	movw	r30, r18
    98d2:	80 83       	st	Z, r24
    98d4:	91 83       	std	Z+1, r25	; 0x01
    98d6:	a2 83       	std	Z+2, r26	; 0x02
    98d8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    98da:	8e 01       	movw	r16, r28
    98dc:	0d 51       	subi	r16, 0x1D	; 29
    98de:	1e 4f       	sbci	r17, 0xFE	; 254
    98e0:	ce 01       	movw	r24, r28
    98e2:	81 52       	subi	r24, 0x21	; 33
    98e4:	9e 4f       	sbci	r25, 0xFE	; 254
    98e6:	fc 01       	movw	r30, r24
    98e8:	60 81       	ld	r22, Z
    98ea:	71 81       	ldd	r23, Z+1	; 0x01
    98ec:	82 81       	ldd	r24, Z+2	; 0x02
    98ee:	93 81       	ldd	r25, Z+3	; 0x03
    98f0:	26 e6       	ldi	r18, 0x66	; 102
    98f2:	36 e6       	ldi	r19, 0x66	; 102
    98f4:	46 e6       	ldi	r20, 0x66	; 102
    98f6:	55 e4       	ldi	r21, 0x45	; 69
    98f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    98fc:	dc 01       	movw	r26, r24
    98fe:	cb 01       	movw	r24, r22
    9900:	f8 01       	movw	r30, r16
    9902:	80 83       	st	Z, r24
    9904:	91 83       	std	Z+1, r25	; 0x01
    9906:	a2 83       	std	Z+2, r26	; 0x02
    9908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    990a:	ce 01       	movw	r24, r28
    990c:	8d 51       	subi	r24, 0x1D	; 29
    990e:	9e 4f       	sbci	r25, 0xFE	; 254
    9910:	11 e0       	ldi	r17, 0x01	; 1
    9912:	fc 01       	movw	r30, r24
    9914:	60 81       	ld	r22, Z
    9916:	71 81       	ldd	r23, Z+1	; 0x01
    9918:	82 81       	ldd	r24, Z+2	; 0x02
    991a:	93 81       	ldd	r25, Z+3	; 0x03
    991c:	20 e0       	ldi	r18, 0x00	; 0
    991e:	30 e0       	ldi	r19, 0x00	; 0
    9920:	40 e8       	ldi	r20, 0x80	; 128
    9922:	5f e3       	ldi	r21, 0x3F	; 63
    9924:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9928:	88 23       	and	r24, r24
    992a:	0c f0       	brlt	.+2      	; 0x992e <pick_drop+0x383c>
    992c:	10 e0       	ldi	r17, 0x00	; 0
    992e:	11 23       	and	r17, r17
    9930:	49 f0       	breq	.+18     	; 0x9944 <pick_drop+0x3852>
		__ticks = 1;
    9932:	ce 01       	movw	r24, r28
    9934:	89 51       	subi	r24, 0x19	; 25
    9936:	9e 4f       	sbci	r25, 0xFE	; 254
    9938:	21 e0       	ldi	r18, 0x01	; 1
    993a:	30 e0       	ldi	r19, 0x00	; 0
    993c:	fc 01       	movw	r30, r24
    993e:	31 83       	std	Z+1, r19	; 0x01
    9940:	20 83       	st	Z, r18
    9942:	75 c0       	rjmp	.+234    	; 0x9a2e <pick_drop+0x393c>
	else if (__tmp > 65535)
    9944:	ce 01       	movw	r24, r28
    9946:	8d 51       	subi	r24, 0x1D	; 29
    9948:	9e 4f       	sbci	r25, 0xFE	; 254
    994a:	11 e0       	ldi	r17, 0x01	; 1
    994c:	fc 01       	movw	r30, r24
    994e:	60 81       	ld	r22, Z
    9950:	71 81       	ldd	r23, Z+1	; 0x01
    9952:	82 81       	ldd	r24, Z+2	; 0x02
    9954:	93 81       	ldd	r25, Z+3	; 0x03
    9956:	20 e0       	ldi	r18, 0x00	; 0
    9958:	3f ef       	ldi	r19, 0xFF	; 255
    995a:	4f e7       	ldi	r20, 0x7F	; 127
    995c:	57 e4       	ldi	r21, 0x47	; 71
    995e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    9962:	18 16       	cp	r1, r24
    9964:	0c f0       	brlt	.+2      	; 0x9968 <pick_drop+0x3876>
    9966:	10 e0       	ldi	r17, 0x00	; 0
    9968:	11 23       	and	r17, r17
    996a:	09 f4       	brne	.+2      	; 0x996e <pick_drop+0x387c>
    996c:	4e c0       	rjmp	.+156    	; 0x9a0a <pick_drop+0x3918>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    996e:	ce 01       	movw	r24, r28
    9970:	81 52       	subi	r24, 0x21	; 33
    9972:	9e 4f       	sbci	r25, 0xFE	; 254
    9974:	fc 01       	movw	r30, r24
    9976:	60 81       	ld	r22, Z
    9978:	71 81       	ldd	r23, Z+1	; 0x01
    997a:	82 81       	ldd	r24, Z+2	; 0x02
    997c:	93 81       	ldd	r25, Z+3	; 0x03
    997e:	20 e0       	ldi	r18, 0x00	; 0
    9980:	30 e0       	ldi	r19, 0x00	; 0
    9982:	40 e2       	ldi	r20, 0x20	; 32
    9984:	51 e4       	ldi	r21, 0x41	; 65
    9986:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    998a:	dc 01       	movw	r26, r24
    998c:	cb 01       	movw	r24, r22
    998e:	8e 01       	movw	r16, r28
    9990:	09 51       	subi	r16, 0x19	; 25
    9992:	1e 4f       	sbci	r17, 0xFE	; 254
    9994:	bc 01       	movw	r22, r24
    9996:	cd 01       	movw	r24, r26
    9998:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    999c:	dc 01       	movw	r26, r24
    999e:	cb 01       	movw	r24, r22
    99a0:	f8 01       	movw	r30, r16
    99a2:	91 83       	std	Z+1, r25	; 0x01
    99a4:	80 83       	st	Z, r24
    99a6:	27 c0       	rjmp	.+78     	; 0x99f6 <pick_drop+0x3904>
    99a8:	ce 01       	movw	r24, r28
    99aa:	87 51       	subi	r24, 0x17	; 23
    99ac:	9e 4f       	sbci	r25, 0xFE	; 254
    99ae:	20 e7       	ldi	r18, 0x70	; 112
    99b0:	31 e0       	ldi	r19, 0x01	; 1
    99b2:	fc 01       	movw	r30, r24
    99b4:	31 83       	std	Z+1, r19	; 0x01
    99b6:	20 83       	st	Z, r18
    99b8:	ce 01       	movw	r24, r28
    99ba:	87 51       	subi	r24, 0x17	; 23
    99bc:	9e 4f       	sbci	r25, 0xFE	; 254
    99be:	fc 01       	movw	r30, r24
    99c0:	80 81       	ld	r24, Z
    99c2:	91 81       	ldd	r25, Z+1	; 0x01
    99c4:	8c 01       	movw	r16, r24
    99c6:	c8 01       	movw	r24, r16
    99c8:	01 97       	sbiw	r24, 0x01	; 1
    99ca:	f1 f7       	brne	.-4      	; 0x99c8 <pick_drop+0x38d6>
    99cc:	8c 01       	movw	r16, r24
    99ce:	ce 01       	movw	r24, r28
    99d0:	87 51       	subi	r24, 0x17	; 23
    99d2:	9e 4f       	sbci	r25, 0xFE	; 254
    99d4:	fc 01       	movw	r30, r24
    99d6:	11 83       	std	Z+1, r17	; 0x01
    99d8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    99da:	ce 01       	movw	r24, r28
    99dc:	89 51       	subi	r24, 0x19	; 25
    99de:	9e 4f       	sbci	r25, 0xFE	; 254
    99e0:	9e 01       	movw	r18, r28
    99e2:	29 51       	subi	r18, 0x19	; 25
    99e4:	3e 4f       	sbci	r19, 0xFE	; 254
    99e6:	f9 01       	movw	r30, r18
    99e8:	20 81       	ld	r18, Z
    99ea:	31 81       	ldd	r19, Z+1	; 0x01
    99ec:	21 50       	subi	r18, 0x01	; 1
    99ee:	30 40       	sbci	r19, 0x00	; 0
    99f0:	fc 01       	movw	r30, r24
    99f2:	31 83       	std	Z+1, r19	; 0x01
    99f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    99f6:	ce 01       	movw	r24, r28
    99f8:	89 51       	subi	r24, 0x19	; 25
    99fa:	9e 4f       	sbci	r25, 0xFE	; 254
    99fc:	fc 01       	movw	r30, r24
    99fe:	80 81       	ld	r24, Z
    9a00:	91 81       	ldd	r25, Z+1	; 0x01
    9a02:	00 97       	sbiw	r24, 0x00	; 0
    9a04:	89 f6       	brne	.-94     	; 0x99a8 <pick_drop+0x38b6>
    9a06:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a0a:	8e 01       	movw	r16, r28
    9a0c:	09 51       	subi	r16, 0x19	; 25
    9a0e:	1e 4f       	sbci	r17, 0xFE	; 254
    9a10:	ce 01       	movw	r24, r28
    9a12:	8d 51       	subi	r24, 0x1D	; 29
    9a14:	9e 4f       	sbci	r25, 0xFE	; 254
    9a16:	fc 01       	movw	r30, r24
    9a18:	60 81       	ld	r22, Z
    9a1a:	71 81       	ldd	r23, Z+1	; 0x01
    9a1c:	82 81       	ldd	r24, Z+2	; 0x02
    9a1e:	93 81       	ldd	r25, Z+3	; 0x03
    9a20:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9a24:	dc 01       	movw	r26, r24
    9a26:	cb 01       	movw	r24, r22
    9a28:	f8 01       	movw	r30, r16
    9a2a:	91 83       	std	Z+1, r25	; 0x01
    9a2c:	80 83       	st	Z, r24
    9a2e:	ce 01       	movw	r24, r28
    9a30:	85 51       	subi	r24, 0x15	; 21
    9a32:	9e 4f       	sbci	r25, 0xFE	; 254
    9a34:	9e 01       	movw	r18, r28
    9a36:	29 51       	subi	r18, 0x19	; 25
    9a38:	3e 4f       	sbci	r19, 0xFE	; 254
    9a3a:	f9 01       	movw	r30, r18
    9a3c:	20 81       	ld	r18, Z
    9a3e:	31 81       	ldd	r19, Z+1	; 0x01
    9a40:	fc 01       	movw	r30, r24
    9a42:	31 83       	std	Z+1, r19	; 0x01
    9a44:	20 83       	st	Z, r18
    9a46:	ce 01       	movw	r24, r28
    9a48:	85 51       	subi	r24, 0x15	; 21
    9a4a:	9e 4f       	sbci	r25, 0xFE	; 254
    9a4c:	fc 01       	movw	r30, r24
    9a4e:	80 81       	ld	r24, Z
    9a50:	91 81       	ldd	r25, Z+1	; 0x01
    9a52:	8c 01       	movw	r16, r24
    9a54:	c8 01       	movw	r24, r16
    9a56:	01 97       	sbiw	r24, 0x01	; 1
    9a58:	f1 f7       	brne	.-4      	; 0x9a56 <pick_drop+0x3964>
    9a5a:	8c 01       	movw	r16, r24
    9a5c:	ce 01       	movw	r24, r28
    9a5e:	85 51       	subi	r24, 0x15	; 21
    9a60:	9e 4f       	sbci	r25, 0xFE	; 254
    9a62:	fc 01       	movw	r30, r24
    9a64:	11 83       	std	Z+1, r17	; 0x01
    9a66:	00 83       	st	Z, r16
    9a68:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			_delay_ms(20);
		}
		else
		{
		stop();
    9a6c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    9a70:	9e 01       	movw	r18, r28
    9a72:	23 51       	subi	r18, 0x13	; 19
    9a74:	3e 4f       	sbci	r19, 0xFE	; 254
    9a76:	80 e0       	ldi	r24, 0x00	; 0
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	a0 ea       	ldi	r26, 0xA0	; 160
    9a7c:	b1 e4       	ldi	r27, 0x41	; 65
    9a7e:	f9 01       	movw	r30, r18
    9a80:	80 83       	st	Z, r24
    9a82:	91 83       	std	Z+1, r25	; 0x01
    9a84:	a2 83       	std	Z+2, r26	; 0x02
    9a86:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9a88:	8e 01       	movw	r16, r28
    9a8a:	0f 50       	subi	r16, 0x0F	; 15
    9a8c:	1e 4f       	sbci	r17, 0xFE	; 254
    9a8e:	ce 01       	movw	r24, r28
    9a90:	83 51       	subi	r24, 0x13	; 19
    9a92:	9e 4f       	sbci	r25, 0xFE	; 254
    9a94:	fc 01       	movw	r30, r24
    9a96:	60 81       	ld	r22, Z
    9a98:	71 81       	ldd	r23, Z+1	; 0x01
    9a9a:	82 81       	ldd	r24, Z+2	; 0x02
    9a9c:	93 81       	ldd	r25, Z+3	; 0x03
    9a9e:	26 e6       	ldi	r18, 0x66	; 102
    9aa0:	36 e6       	ldi	r19, 0x66	; 102
    9aa2:	46 e6       	ldi	r20, 0x66	; 102
    9aa4:	55 e4       	ldi	r21, 0x45	; 69
    9aa6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9aaa:	dc 01       	movw	r26, r24
    9aac:	cb 01       	movw	r24, r22
    9aae:	f8 01       	movw	r30, r16
    9ab0:	80 83       	st	Z, r24
    9ab2:	91 83       	std	Z+1, r25	; 0x01
    9ab4:	a2 83       	std	Z+2, r26	; 0x02
    9ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9ab8:	ce 01       	movw	r24, r28
    9aba:	8f 50       	subi	r24, 0x0F	; 15
    9abc:	9e 4f       	sbci	r25, 0xFE	; 254
    9abe:	11 e0       	ldi	r17, 0x01	; 1
    9ac0:	fc 01       	movw	r30, r24
    9ac2:	60 81       	ld	r22, Z
    9ac4:	71 81       	ldd	r23, Z+1	; 0x01
    9ac6:	82 81       	ldd	r24, Z+2	; 0x02
    9ac8:	93 81       	ldd	r25, Z+3	; 0x03
    9aca:	20 e0       	ldi	r18, 0x00	; 0
    9acc:	30 e0       	ldi	r19, 0x00	; 0
    9ace:	40 e8       	ldi	r20, 0x80	; 128
    9ad0:	5f e3       	ldi	r21, 0x3F	; 63
    9ad2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9ad6:	88 23       	and	r24, r24
    9ad8:	0c f0       	brlt	.+2      	; 0x9adc <pick_drop+0x39ea>
    9ada:	10 e0       	ldi	r17, 0x00	; 0
    9adc:	11 23       	and	r17, r17
    9ade:	49 f0       	breq	.+18     	; 0x9af2 <pick_drop+0x3a00>
		__ticks = 1;
    9ae0:	ce 01       	movw	r24, r28
    9ae2:	8b 50       	subi	r24, 0x0B	; 11
    9ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    9ae6:	21 e0       	ldi	r18, 0x01	; 1
    9ae8:	30 e0       	ldi	r19, 0x00	; 0
    9aea:	fc 01       	movw	r30, r24
    9aec:	31 83       	std	Z+1, r19	; 0x01
    9aee:	20 83       	st	Z, r18
    9af0:	74 c0       	rjmp	.+232    	; 0x9bda <pick_drop+0x3ae8>
	else if (__tmp > 65535)
    9af2:	ce 01       	movw	r24, r28
    9af4:	8f 50       	subi	r24, 0x0F	; 15
    9af6:	9e 4f       	sbci	r25, 0xFE	; 254
    9af8:	11 e0       	ldi	r17, 0x01	; 1
    9afa:	fc 01       	movw	r30, r24
    9afc:	60 81       	ld	r22, Z
    9afe:	71 81       	ldd	r23, Z+1	; 0x01
    9b00:	82 81       	ldd	r24, Z+2	; 0x02
    9b02:	93 81       	ldd	r25, Z+3	; 0x03
    9b04:	20 e0       	ldi	r18, 0x00	; 0
    9b06:	3f ef       	ldi	r19, 0xFF	; 255
    9b08:	4f e7       	ldi	r20, 0x7F	; 127
    9b0a:	57 e4       	ldi	r21, 0x47	; 71
    9b0c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    9b10:	18 16       	cp	r1, r24
    9b12:	0c f0       	brlt	.+2      	; 0x9b16 <pick_drop+0x3a24>
    9b14:	10 e0       	ldi	r17, 0x00	; 0
    9b16:	11 23       	and	r17, r17
    9b18:	09 f4       	brne	.+2      	; 0x9b1c <pick_drop+0x3a2a>
    9b1a:	4d c0       	rjmp	.+154    	; 0x9bb6 <pick_drop+0x3ac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9b1c:	ce 01       	movw	r24, r28
    9b1e:	83 51       	subi	r24, 0x13	; 19
    9b20:	9e 4f       	sbci	r25, 0xFE	; 254
    9b22:	fc 01       	movw	r30, r24
    9b24:	60 81       	ld	r22, Z
    9b26:	71 81       	ldd	r23, Z+1	; 0x01
    9b28:	82 81       	ldd	r24, Z+2	; 0x02
    9b2a:	93 81       	ldd	r25, Z+3	; 0x03
    9b2c:	20 e0       	ldi	r18, 0x00	; 0
    9b2e:	30 e0       	ldi	r19, 0x00	; 0
    9b30:	40 e2       	ldi	r20, 0x20	; 32
    9b32:	51 e4       	ldi	r21, 0x41	; 65
    9b34:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9b38:	dc 01       	movw	r26, r24
    9b3a:	cb 01       	movw	r24, r22
    9b3c:	8e 01       	movw	r16, r28
    9b3e:	0b 50       	subi	r16, 0x0B	; 11
    9b40:	1e 4f       	sbci	r17, 0xFE	; 254
    9b42:	bc 01       	movw	r22, r24
    9b44:	cd 01       	movw	r24, r26
    9b46:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9b4a:	dc 01       	movw	r26, r24
    9b4c:	cb 01       	movw	r24, r22
    9b4e:	f8 01       	movw	r30, r16
    9b50:	91 83       	std	Z+1, r25	; 0x01
    9b52:	80 83       	st	Z, r24
    9b54:	27 c0       	rjmp	.+78     	; 0x9ba4 <pick_drop+0x3ab2>
    9b56:	ce 01       	movw	r24, r28
    9b58:	89 50       	subi	r24, 0x09	; 9
    9b5a:	9e 4f       	sbci	r25, 0xFE	; 254
    9b5c:	20 e7       	ldi	r18, 0x70	; 112
    9b5e:	31 e0       	ldi	r19, 0x01	; 1
    9b60:	fc 01       	movw	r30, r24
    9b62:	31 83       	std	Z+1, r19	; 0x01
    9b64:	20 83       	st	Z, r18
    9b66:	ce 01       	movw	r24, r28
    9b68:	89 50       	subi	r24, 0x09	; 9
    9b6a:	9e 4f       	sbci	r25, 0xFE	; 254
    9b6c:	fc 01       	movw	r30, r24
    9b6e:	80 81       	ld	r24, Z
    9b70:	91 81       	ldd	r25, Z+1	; 0x01
    9b72:	8c 01       	movw	r16, r24
    9b74:	c8 01       	movw	r24, r16
    9b76:	01 97       	sbiw	r24, 0x01	; 1
    9b78:	f1 f7       	brne	.-4      	; 0x9b76 <pick_drop+0x3a84>
    9b7a:	8c 01       	movw	r16, r24
    9b7c:	ce 01       	movw	r24, r28
    9b7e:	89 50       	subi	r24, 0x09	; 9
    9b80:	9e 4f       	sbci	r25, 0xFE	; 254
    9b82:	fc 01       	movw	r30, r24
    9b84:	11 83       	std	Z+1, r17	; 0x01
    9b86:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9b88:	ce 01       	movw	r24, r28
    9b8a:	8b 50       	subi	r24, 0x0B	; 11
    9b8c:	9e 4f       	sbci	r25, 0xFE	; 254
    9b8e:	9e 01       	movw	r18, r28
    9b90:	2b 50       	subi	r18, 0x0B	; 11
    9b92:	3e 4f       	sbci	r19, 0xFE	; 254
    9b94:	f9 01       	movw	r30, r18
    9b96:	20 81       	ld	r18, Z
    9b98:	31 81       	ldd	r19, Z+1	; 0x01
    9b9a:	21 50       	subi	r18, 0x01	; 1
    9b9c:	30 40       	sbci	r19, 0x00	; 0
    9b9e:	fc 01       	movw	r30, r24
    9ba0:	31 83       	std	Z+1, r19	; 0x01
    9ba2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9ba4:	ce 01       	movw	r24, r28
    9ba6:	8b 50       	subi	r24, 0x0B	; 11
    9ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    9baa:	fc 01       	movw	r30, r24
    9bac:	80 81       	ld	r24, Z
    9bae:	91 81       	ldd	r25, Z+1	; 0x01
    9bb0:	00 97       	sbiw	r24, 0x00	; 0
    9bb2:	89 f6       	brne	.-94     	; 0x9b56 <pick_drop+0x3a64>
    9bb4:	2f c0       	rjmp	.+94     	; 0x9c14 <pick_drop+0x3b22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9bb6:	8e 01       	movw	r16, r28
    9bb8:	0b 50       	subi	r16, 0x0B	; 11
    9bba:	1e 4f       	sbci	r17, 0xFE	; 254
    9bbc:	ce 01       	movw	r24, r28
    9bbe:	8f 50       	subi	r24, 0x0F	; 15
    9bc0:	9e 4f       	sbci	r25, 0xFE	; 254
    9bc2:	fc 01       	movw	r30, r24
    9bc4:	60 81       	ld	r22, Z
    9bc6:	71 81       	ldd	r23, Z+1	; 0x01
    9bc8:	82 81       	ldd	r24, Z+2	; 0x02
    9bca:	93 81       	ldd	r25, Z+3	; 0x03
    9bcc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9bd0:	dc 01       	movw	r26, r24
    9bd2:	cb 01       	movw	r24, r22
    9bd4:	f8 01       	movw	r30, r16
    9bd6:	91 83       	std	Z+1, r25	; 0x01
    9bd8:	80 83       	st	Z, r24
    9bda:	ce 01       	movw	r24, r28
    9bdc:	87 50       	subi	r24, 0x07	; 7
    9bde:	9e 4f       	sbci	r25, 0xFE	; 254
    9be0:	9e 01       	movw	r18, r28
    9be2:	2b 50       	subi	r18, 0x0B	; 11
    9be4:	3e 4f       	sbci	r19, 0xFE	; 254
    9be6:	f9 01       	movw	r30, r18
    9be8:	20 81       	ld	r18, Z
    9bea:	31 81       	ldd	r19, Z+1	; 0x01
    9bec:	fc 01       	movw	r30, r24
    9bee:	31 83       	std	Z+1, r19	; 0x01
    9bf0:	20 83       	st	Z, r18
    9bf2:	ce 01       	movw	r24, r28
    9bf4:	87 50       	subi	r24, 0x07	; 7
    9bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    9bf8:	fc 01       	movw	r30, r24
    9bfa:	80 81       	ld	r24, Z
    9bfc:	91 81       	ldd	r25, Z+1	; 0x01
    9bfe:	8c 01       	movw	r16, r24
    9c00:	c8 01       	movw	r24, r16
    9c02:	01 97       	sbiw	r24, 0x01	; 1
    9c04:	f1 f7       	brne	.-4      	; 0x9c02 <pick_drop+0x3b10>
    9c06:	8c 01       	movw	r16, r24
    9c08:	ce 01       	movw	r24, r28
    9c0a:	87 50       	subi	r24, 0x07	; 7
    9c0c:	9e 4f       	sbci	r25, 0xFE	; 254
    9c0e:	fc 01       	movw	r30, r24
    9c10:	11 83       	std	Z+1, r17	; 0x01
    9c12:	00 83       	st	Z, r16
		_delay_ms(20);
		forward_mm(10);
    9c14:	8a e0       	ldi	r24, 0x0A	; 10
    9c16:	90 e0       	ldi	r25, 0x00	; 0
    9c18:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    9c1c:	9e 01       	movw	r18, r28
    9c1e:	25 50       	subi	r18, 0x05	; 5
    9c20:	3e 4f       	sbci	r19, 0xFE	; 254
    9c22:	80 e0       	ldi	r24, 0x00	; 0
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	a0 ea       	ldi	r26, 0xA0	; 160
    9c28:	b1 e4       	ldi	r27, 0x41	; 65
    9c2a:	f9 01       	movw	r30, r18
    9c2c:	80 83       	st	Z, r24
    9c2e:	91 83       	std	Z+1, r25	; 0x01
    9c30:	a2 83       	std	Z+2, r26	; 0x02
    9c32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9c34:	8e 01       	movw	r16, r28
    9c36:	01 50       	subi	r16, 0x01	; 1
    9c38:	1e 4f       	sbci	r17, 0xFE	; 254
    9c3a:	ce 01       	movw	r24, r28
    9c3c:	85 50       	subi	r24, 0x05	; 5
    9c3e:	9e 4f       	sbci	r25, 0xFE	; 254
    9c40:	fc 01       	movw	r30, r24
    9c42:	60 81       	ld	r22, Z
    9c44:	71 81       	ldd	r23, Z+1	; 0x01
    9c46:	82 81       	ldd	r24, Z+2	; 0x02
    9c48:	93 81       	ldd	r25, Z+3	; 0x03
    9c4a:	26 e6       	ldi	r18, 0x66	; 102
    9c4c:	36 e6       	ldi	r19, 0x66	; 102
    9c4e:	46 e6       	ldi	r20, 0x66	; 102
    9c50:	55 e4       	ldi	r21, 0x45	; 69
    9c52:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9c56:	dc 01       	movw	r26, r24
    9c58:	cb 01       	movw	r24, r22
    9c5a:	f8 01       	movw	r30, r16
    9c5c:	80 83       	st	Z, r24
    9c5e:	91 83       	std	Z+1, r25	; 0x01
    9c60:	a2 83       	std	Z+2, r26	; 0x02
    9c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9c64:	ce 01       	movw	r24, r28
    9c66:	81 50       	subi	r24, 0x01	; 1
    9c68:	9e 4f       	sbci	r25, 0xFE	; 254
    9c6a:	11 e0       	ldi	r17, 0x01	; 1
    9c6c:	fc 01       	movw	r30, r24
    9c6e:	60 81       	ld	r22, Z
    9c70:	71 81       	ldd	r23, Z+1	; 0x01
    9c72:	82 81       	ldd	r24, Z+2	; 0x02
    9c74:	93 81       	ldd	r25, Z+3	; 0x03
    9c76:	20 e0       	ldi	r18, 0x00	; 0
    9c78:	30 e0       	ldi	r19, 0x00	; 0
    9c7a:	40 e8       	ldi	r20, 0x80	; 128
    9c7c:	5f e3       	ldi	r21, 0x3F	; 63
    9c7e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9c82:	88 23       	and	r24, r24
    9c84:	0c f0       	brlt	.+2      	; 0x9c88 <pick_drop+0x3b96>
    9c86:	10 e0       	ldi	r17, 0x00	; 0
    9c88:	11 23       	and	r17, r17
    9c8a:	49 f0       	breq	.+18     	; 0x9c9e <pick_drop+0x3bac>
		__ticks = 1;
    9c8c:	ce 01       	movw	r24, r28
    9c8e:	8d 5f       	subi	r24, 0xFD	; 253
    9c90:	9d 4f       	sbci	r25, 0xFD	; 253
    9c92:	21 e0       	ldi	r18, 0x01	; 1
    9c94:	30 e0       	ldi	r19, 0x00	; 0
    9c96:	fc 01       	movw	r30, r24
    9c98:	31 83       	std	Z+1, r19	; 0x01
    9c9a:	20 83       	st	Z, r18
    9c9c:	74 c0       	rjmp	.+232    	; 0x9d86 <pick_drop+0x3c94>
	else if (__tmp > 65535)
    9c9e:	ce 01       	movw	r24, r28
    9ca0:	81 50       	subi	r24, 0x01	; 1
    9ca2:	9e 4f       	sbci	r25, 0xFE	; 254
    9ca4:	11 e0       	ldi	r17, 0x01	; 1
    9ca6:	fc 01       	movw	r30, r24
    9ca8:	60 81       	ld	r22, Z
    9caa:	71 81       	ldd	r23, Z+1	; 0x01
    9cac:	82 81       	ldd	r24, Z+2	; 0x02
    9cae:	93 81       	ldd	r25, Z+3	; 0x03
    9cb0:	20 e0       	ldi	r18, 0x00	; 0
    9cb2:	3f ef       	ldi	r19, 0xFF	; 255
    9cb4:	4f e7       	ldi	r20, 0x7F	; 127
    9cb6:	57 e4       	ldi	r21, 0x47	; 71
    9cb8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    9cbc:	18 16       	cp	r1, r24
    9cbe:	0c f0       	brlt	.+2      	; 0x9cc2 <pick_drop+0x3bd0>
    9cc0:	10 e0       	ldi	r17, 0x00	; 0
    9cc2:	11 23       	and	r17, r17
    9cc4:	09 f4       	brne	.+2      	; 0x9cc8 <pick_drop+0x3bd6>
    9cc6:	4d c0       	rjmp	.+154    	; 0x9d62 <pick_drop+0x3c70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9cc8:	ce 01       	movw	r24, r28
    9cca:	85 50       	subi	r24, 0x05	; 5
    9ccc:	9e 4f       	sbci	r25, 0xFE	; 254
    9cce:	fc 01       	movw	r30, r24
    9cd0:	60 81       	ld	r22, Z
    9cd2:	71 81       	ldd	r23, Z+1	; 0x01
    9cd4:	82 81       	ldd	r24, Z+2	; 0x02
    9cd6:	93 81       	ldd	r25, Z+3	; 0x03
    9cd8:	20 e0       	ldi	r18, 0x00	; 0
    9cda:	30 e0       	ldi	r19, 0x00	; 0
    9cdc:	40 e2       	ldi	r20, 0x20	; 32
    9cde:	51 e4       	ldi	r21, 0x41	; 65
    9ce0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9ce4:	dc 01       	movw	r26, r24
    9ce6:	cb 01       	movw	r24, r22
    9ce8:	8e 01       	movw	r16, r28
    9cea:	0d 5f       	subi	r16, 0xFD	; 253
    9cec:	1d 4f       	sbci	r17, 0xFD	; 253
    9cee:	bc 01       	movw	r22, r24
    9cf0:	cd 01       	movw	r24, r26
    9cf2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9cf6:	dc 01       	movw	r26, r24
    9cf8:	cb 01       	movw	r24, r22
    9cfa:	f8 01       	movw	r30, r16
    9cfc:	91 83       	std	Z+1, r25	; 0x01
    9cfe:	80 83       	st	Z, r24
    9d00:	27 c0       	rjmp	.+78     	; 0x9d50 <pick_drop+0x3c5e>
    9d02:	ce 01       	movw	r24, r28
    9d04:	8b 5f       	subi	r24, 0xFB	; 251
    9d06:	9d 4f       	sbci	r25, 0xFD	; 253
    9d08:	20 e7       	ldi	r18, 0x70	; 112
    9d0a:	31 e0       	ldi	r19, 0x01	; 1
    9d0c:	fc 01       	movw	r30, r24
    9d0e:	31 83       	std	Z+1, r19	; 0x01
    9d10:	20 83       	st	Z, r18
    9d12:	ce 01       	movw	r24, r28
    9d14:	8b 5f       	subi	r24, 0xFB	; 251
    9d16:	9d 4f       	sbci	r25, 0xFD	; 253
    9d18:	fc 01       	movw	r30, r24
    9d1a:	80 81       	ld	r24, Z
    9d1c:	91 81       	ldd	r25, Z+1	; 0x01
    9d1e:	8c 01       	movw	r16, r24
    9d20:	c8 01       	movw	r24, r16
    9d22:	01 97       	sbiw	r24, 0x01	; 1
    9d24:	f1 f7       	brne	.-4      	; 0x9d22 <pick_drop+0x3c30>
    9d26:	8c 01       	movw	r16, r24
    9d28:	ce 01       	movw	r24, r28
    9d2a:	8b 5f       	subi	r24, 0xFB	; 251
    9d2c:	9d 4f       	sbci	r25, 0xFD	; 253
    9d2e:	fc 01       	movw	r30, r24
    9d30:	11 83       	std	Z+1, r17	; 0x01
    9d32:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d34:	ce 01       	movw	r24, r28
    9d36:	8d 5f       	subi	r24, 0xFD	; 253
    9d38:	9d 4f       	sbci	r25, 0xFD	; 253
    9d3a:	9e 01       	movw	r18, r28
    9d3c:	2d 5f       	subi	r18, 0xFD	; 253
    9d3e:	3d 4f       	sbci	r19, 0xFD	; 253
    9d40:	f9 01       	movw	r30, r18
    9d42:	20 81       	ld	r18, Z
    9d44:	31 81       	ldd	r19, Z+1	; 0x01
    9d46:	21 50       	subi	r18, 0x01	; 1
    9d48:	30 40       	sbci	r19, 0x00	; 0
    9d4a:	fc 01       	movw	r30, r24
    9d4c:	31 83       	std	Z+1, r19	; 0x01
    9d4e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d50:	ce 01       	movw	r24, r28
    9d52:	8d 5f       	subi	r24, 0xFD	; 253
    9d54:	9d 4f       	sbci	r25, 0xFD	; 253
    9d56:	fc 01       	movw	r30, r24
    9d58:	80 81       	ld	r24, Z
    9d5a:	91 81       	ldd	r25, Z+1	; 0x01
    9d5c:	00 97       	sbiw	r24, 0x00	; 0
    9d5e:	89 f6       	brne	.-94     	; 0x9d02 <pick_drop+0x3c10>
    9d60:	2f c0       	rjmp	.+94     	; 0x9dc0 <pick_drop+0x3cce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9d62:	8e 01       	movw	r16, r28
    9d64:	0d 5f       	subi	r16, 0xFD	; 253
    9d66:	1d 4f       	sbci	r17, 0xFD	; 253
    9d68:	ce 01       	movw	r24, r28
    9d6a:	81 50       	subi	r24, 0x01	; 1
    9d6c:	9e 4f       	sbci	r25, 0xFE	; 254
    9d6e:	fc 01       	movw	r30, r24
    9d70:	60 81       	ld	r22, Z
    9d72:	71 81       	ldd	r23, Z+1	; 0x01
    9d74:	82 81       	ldd	r24, Z+2	; 0x02
    9d76:	93 81       	ldd	r25, Z+3	; 0x03
    9d78:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9d7c:	dc 01       	movw	r26, r24
    9d7e:	cb 01       	movw	r24, r22
    9d80:	f8 01       	movw	r30, r16
    9d82:	91 83       	std	Z+1, r25	; 0x01
    9d84:	80 83       	st	Z, r24
    9d86:	ce 01       	movw	r24, r28
    9d88:	89 5f       	subi	r24, 0xF9	; 249
    9d8a:	9d 4f       	sbci	r25, 0xFD	; 253
    9d8c:	9e 01       	movw	r18, r28
    9d8e:	2d 5f       	subi	r18, 0xFD	; 253
    9d90:	3d 4f       	sbci	r19, 0xFD	; 253
    9d92:	f9 01       	movw	r30, r18
    9d94:	20 81       	ld	r18, Z
    9d96:	31 81       	ldd	r19, Z+1	; 0x01
    9d98:	fc 01       	movw	r30, r24
    9d9a:	31 83       	std	Z+1, r19	; 0x01
    9d9c:	20 83       	st	Z, r18
    9d9e:	ce 01       	movw	r24, r28
    9da0:	89 5f       	subi	r24, 0xF9	; 249
    9da2:	9d 4f       	sbci	r25, 0xFD	; 253
    9da4:	fc 01       	movw	r30, r24
    9da6:	80 81       	ld	r24, Z
    9da8:	91 81       	ldd	r25, Z+1	; 0x01
    9daa:	8c 01       	movw	r16, r24
    9dac:	c8 01       	movw	r24, r16
    9dae:	01 97       	sbiw	r24, 0x01	; 1
    9db0:	f1 f7       	brne	.-4      	; 0x9dae <pick_drop+0x3cbc>
    9db2:	8c 01       	movw	r16, r24
    9db4:	ce 01       	movw	r24, r28
    9db6:	89 5f       	subi	r24, 0xF9	; 249
    9db8:	9d 4f       	sbci	r25, 0xFD	; 253
    9dba:	fc 01       	movw	r30, r24
    9dbc:	11 83       	std	Z+1, r17	; 0x01
    9dbe:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    9dc0:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    9dc4:	9e 01       	movw	r18, r28
    9dc6:	27 5f       	subi	r18, 0xF7	; 247
    9dc8:	3d 4f       	sbci	r19, 0xFD	; 253
    9dca:	80 e0       	ldi	r24, 0x00	; 0
    9dcc:	90 e0       	ldi	r25, 0x00	; 0
    9dce:	a8 ec       	ldi	r26, 0xC8	; 200
    9dd0:	b2 e4       	ldi	r27, 0x42	; 66
    9dd2:	f9 01       	movw	r30, r18
    9dd4:	80 83       	st	Z, r24
    9dd6:	91 83       	std	Z+1, r25	; 0x01
    9dd8:	a2 83       	std	Z+2, r26	; 0x02
    9dda:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9ddc:	8e 01       	movw	r16, r28
    9dde:	03 5f       	subi	r16, 0xF3	; 243
    9de0:	1d 4f       	sbci	r17, 0xFD	; 253
    9de2:	ce 01       	movw	r24, r28
    9de4:	87 5f       	subi	r24, 0xF7	; 247
    9de6:	9d 4f       	sbci	r25, 0xFD	; 253
    9de8:	fc 01       	movw	r30, r24
    9dea:	60 81       	ld	r22, Z
    9dec:	71 81       	ldd	r23, Z+1	; 0x01
    9dee:	82 81       	ldd	r24, Z+2	; 0x02
    9df0:	93 81       	ldd	r25, Z+3	; 0x03
    9df2:	26 e6       	ldi	r18, 0x66	; 102
    9df4:	36 e6       	ldi	r19, 0x66	; 102
    9df6:	46 e6       	ldi	r20, 0x66	; 102
    9df8:	55 e4       	ldi	r21, 0x45	; 69
    9dfa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9dfe:	dc 01       	movw	r26, r24
    9e00:	cb 01       	movw	r24, r22
    9e02:	f8 01       	movw	r30, r16
    9e04:	80 83       	st	Z, r24
    9e06:	91 83       	std	Z+1, r25	; 0x01
    9e08:	a2 83       	std	Z+2, r26	; 0x02
    9e0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9e0c:	ce 01       	movw	r24, r28
    9e0e:	83 5f       	subi	r24, 0xF3	; 243
    9e10:	9d 4f       	sbci	r25, 0xFD	; 253
    9e12:	11 e0       	ldi	r17, 0x01	; 1
    9e14:	fc 01       	movw	r30, r24
    9e16:	60 81       	ld	r22, Z
    9e18:	71 81       	ldd	r23, Z+1	; 0x01
    9e1a:	82 81       	ldd	r24, Z+2	; 0x02
    9e1c:	93 81       	ldd	r25, Z+3	; 0x03
    9e1e:	20 e0       	ldi	r18, 0x00	; 0
    9e20:	30 e0       	ldi	r19, 0x00	; 0
    9e22:	40 e8       	ldi	r20, 0x80	; 128
    9e24:	5f e3       	ldi	r21, 0x3F	; 63
    9e26:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9e2a:	88 23       	and	r24, r24
    9e2c:	0c f0       	brlt	.+2      	; 0x9e30 <pick_drop+0x3d3e>
    9e2e:	10 e0       	ldi	r17, 0x00	; 0
    9e30:	11 23       	and	r17, r17
    9e32:	49 f0       	breq	.+18     	; 0x9e46 <pick_drop+0x3d54>
		__ticks = 1;
    9e34:	ce 01       	movw	r24, r28
    9e36:	8f 5e       	subi	r24, 0xEF	; 239
    9e38:	9d 4f       	sbci	r25, 0xFD	; 253
    9e3a:	21 e0       	ldi	r18, 0x01	; 1
    9e3c:	30 e0       	ldi	r19, 0x00	; 0
    9e3e:	fc 01       	movw	r30, r24
    9e40:	31 83       	std	Z+1, r19	; 0x01
    9e42:	20 83       	st	Z, r18
    9e44:	74 c0       	rjmp	.+232    	; 0x9f2e <pick_drop+0x3e3c>
	else if (__tmp > 65535)
    9e46:	ce 01       	movw	r24, r28
    9e48:	83 5f       	subi	r24, 0xF3	; 243
    9e4a:	9d 4f       	sbci	r25, 0xFD	; 253
    9e4c:	11 e0       	ldi	r17, 0x01	; 1
    9e4e:	fc 01       	movw	r30, r24
    9e50:	60 81       	ld	r22, Z
    9e52:	71 81       	ldd	r23, Z+1	; 0x01
    9e54:	82 81       	ldd	r24, Z+2	; 0x02
    9e56:	93 81       	ldd	r25, Z+3	; 0x03
    9e58:	20 e0       	ldi	r18, 0x00	; 0
    9e5a:	3f ef       	ldi	r19, 0xFF	; 255
    9e5c:	4f e7       	ldi	r20, 0x7F	; 127
    9e5e:	57 e4       	ldi	r21, 0x47	; 71
    9e60:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    9e64:	18 16       	cp	r1, r24
    9e66:	0c f0       	brlt	.+2      	; 0x9e6a <pick_drop+0x3d78>
    9e68:	10 e0       	ldi	r17, 0x00	; 0
    9e6a:	11 23       	and	r17, r17
    9e6c:	09 f4       	brne	.+2      	; 0x9e70 <pick_drop+0x3d7e>
    9e6e:	4d c0       	rjmp	.+154    	; 0x9f0a <pick_drop+0x3e18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9e70:	ce 01       	movw	r24, r28
    9e72:	87 5f       	subi	r24, 0xF7	; 247
    9e74:	9d 4f       	sbci	r25, 0xFD	; 253
    9e76:	fc 01       	movw	r30, r24
    9e78:	60 81       	ld	r22, Z
    9e7a:	71 81       	ldd	r23, Z+1	; 0x01
    9e7c:	82 81       	ldd	r24, Z+2	; 0x02
    9e7e:	93 81       	ldd	r25, Z+3	; 0x03
    9e80:	20 e0       	ldi	r18, 0x00	; 0
    9e82:	30 e0       	ldi	r19, 0x00	; 0
    9e84:	40 e2       	ldi	r20, 0x20	; 32
    9e86:	51 e4       	ldi	r21, 0x41	; 65
    9e88:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9e8c:	dc 01       	movw	r26, r24
    9e8e:	cb 01       	movw	r24, r22
    9e90:	8e 01       	movw	r16, r28
    9e92:	0f 5e       	subi	r16, 0xEF	; 239
    9e94:	1d 4f       	sbci	r17, 0xFD	; 253
    9e96:	bc 01       	movw	r22, r24
    9e98:	cd 01       	movw	r24, r26
    9e9a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9e9e:	dc 01       	movw	r26, r24
    9ea0:	cb 01       	movw	r24, r22
    9ea2:	f8 01       	movw	r30, r16
    9ea4:	91 83       	std	Z+1, r25	; 0x01
    9ea6:	80 83       	st	Z, r24
    9ea8:	27 c0       	rjmp	.+78     	; 0x9ef8 <pick_drop+0x3e06>
    9eaa:	ce 01       	movw	r24, r28
    9eac:	8d 5e       	subi	r24, 0xED	; 237
    9eae:	9d 4f       	sbci	r25, 0xFD	; 253
    9eb0:	20 e7       	ldi	r18, 0x70	; 112
    9eb2:	31 e0       	ldi	r19, 0x01	; 1
    9eb4:	fc 01       	movw	r30, r24
    9eb6:	31 83       	std	Z+1, r19	; 0x01
    9eb8:	20 83       	st	Z, r18
    9eba:	ce 01       	movw	r24, r28
    9ebc:	8d 5e       	subi	r24, 0xED	; 237
    9ebe:	9d 4f       	sbci	r25, 0xFD	; 253
    9ec0:	fc 01       	movw	r30, r24
    9ec2:	80 81       	ld	r24, Z
    9ec4:	91 81       	ldd	r25, Z+1	; 0x01
    9ec6:	8c 01       	movw	r16, r24
    9ec8:	c8 01       	movw	r24, r16
    9eca:	01 97       	sbiw	r24, 0x01	; 1
    9ecc:	f1 f7       	brne	.-4      	; 0x9eca <pick_drop+0x3dd8>
    9ece:	8c 01       	movw	r16, r24
    9ed0:	ce 01       	movw	r24, r28
    9ed2:	8d 5e       	subi	r24, 0xED	; 237
    9ed4:	9d 4f       	sbci	r25, 0xFD	; 253
    9ed6:	fc 01       	movw	r30, r24
    9ed8:	11 83       	std	Z+1, r17	; 0x01
    9eda:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9edc:	ce 01       	movw	r24, r28
    9ede:	8f 5e       	subi	r24, 0xEF	; 239
    9ee0:	9d 4f       	sbci	r25, 0xFD	; 253
    9ee2:	9e 01       	movw	r18, r28
    9ee4:	2f 5e       	subi	r18, 0xEF	; 239
    9ee6:	3d 4f       	sbci	r19, 0xFD	; 253
    9ee8:	f9 01       	movw	r30, r18
    9eea:	20 81       	ld	r18, Z
    9eec:	31 81       	ldd	r19, Z+1	; 0x01
    9eee:	21 50       	subi	r18, 0x01	; 1
    9ef0:	30 40       	sbci	r19, 0x00	; 0
    9ef2:	fc 01       	movw	r30, r24
    9ef4:	31 83       	std	Z+1, r19	; 0x01
    9ef6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9ef8:	ce 01       	movw	r24, r28
    9efa:	8f 5e       	subi	r24, 0xEF	; 239
    9efc:	9d 4f       	sbci	r25, 0xFD	; 253
    9efe:	fc 01       	movw	r30, r24
    9f00:	80 81       	ld	r24, Z
    9f02:	91 81       	ldd	r25, Z+1	; 0x01
    9f04:	00 97       	sbiw	r24, 0x00	; 0
    9f06:	89 f6       	brne	.-94     	; 0x9eaa <pick_drop+0x3db8>
    9f08:	2f c0       	rjmp	.+94     	; 0x9f68 <pick_drop+0x3e76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9f0a:	8e 01       	movw	r16, r28
    9f0c:	0f 5e       	subi	r16, 0xEF	; 239
    9f0e:	1d 4f       	sbci	r17, 0xFD	; 253
    9f10:	ce 01       	movw	r24, r28
    9f12:	83 5f       	subi	r24, 0xF3	; 243
    9f14:	9d 4f       	sbci	r25, 0xFD	; 253
    9f16:	fc 01       	movw	r30, r24
    9f18:	60 81       	ld	r22, Z
    9f1a:	71 81       	ldd	r23, Z+1	; 0x01
    9f1c:	82 81       	ldd	r24, Z+2	; 0x02
    9f1e:	93 81       	ldd	r25, Z+3	; 0x03
    9f20:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    9f24:	dc 01       	movw	r26, r24
    9f26:	cb 01       	movw	r24, r22
    9f28:	f8 01       	movw	r30, r16
    9f2a:	91 83       	std	Z+1, r25	; 0x01
    9f2c:	80 83       	st	Z, r24
    9f2e:	ce 01       	movw	r24, r28
    9f30:	8b 5e       	subi	r24, 0xEB	; 235
    9f32:	9d 4f       	sbci	r25, 0xFD	; 253
    9f34:	9e 01       	movw	r18, r28
    9f36:	2f 5e       	subi	r18, 0xEF	; 239
    9f38:	3d 4f       	sbci	r19, 0xFD	; 253
    9f3a:	f9 01       	movw	r30, r18
    9f3c:	20 81       	ld	r18, Z
    9f3e:	31 81       	ldd	r19, Z+1	; 0x01
    9f40:	fc 01       	movw	r30, r24
    9f42:	31 83       	std	Z+1, r19	; 0x01
    9f44:	20 83       	st	Z, r18
    9f46:	ce 01       	movw	r24, r28
    9f48:	8b 5e       	subi	r24, 0xEB	; 235
    9f4a:	9d 4f       	sbci	r25, 0xFD	; 253
    9f4c:	fc 01       	movw	r30, r24
    9f4e:	80 81       	ld	r24, Z
    9f50:	91 81       	ldd	r25, Z+1	; 0x01
    9f52:	8c 01       	movw	r16, r24
    9f54:	c8 01       	movw	r24, r16
    9f56:	01 97       	sbiw	r24, 0x01	; 1
    9f58:	f1 f7       	brne	.-4      	; 0x9f56 <pick_drop+0x3e64>
    9f5a:	8c 01       	movw	r16, r24
    9f5c:	ce 01       	movw	r24, r28
    9f5e:	8b 5e       	subi	r24, 0xEB	; 235
    9f60:	9d 4f       	sbci	r25, 0xFD	; 253
    9f62:	fc 01       	movw	r30, r24
    9f64:	11 83       	std	Z+1, r17	; 0x01
    9f66:	00 83       	st	Z, r16
		_delay_ms(100);
		forward_mm(50);
    9f68:	82 e3       	ldi	r24, 0x32	; 50
    9f6a:	90 e0       	ldi	r25, 0x00	; 0
    9f6c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    9f70:	9e 01       	movw	r18, r28
    9f72:	29 5e       	subi	r18, 0xE9	; 233
    9f74:	3d 4f       	sbci	r19, 0xFD	; 253
    9f76:	80 e0       	ldi	r24, 0x00	; 0
    9f78:	90 e0       	ldi	r25, 0x00	; 0
    9f7a:	a0 ea       	ldi	r26, 0xA0	; 160
    9f7c:	b1 e4       	ldi	r27, 0x41	; 65
    9f7e:	f9 01       	movw	r30, r18
    9f80:	80 83       	st	Z, r24
    9f82:	91 83       	std	Z+1, r25	; 0x01
    9f84:	a2 83       	std	Z+2, r26	; 0x02
    9f86:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    9f88:	8e 01       	movw	r16, r28
    9f8a:	05 5e       	subi	r16, 0xE5	; 229
    9f8c:	1d 4f       	sbci	r17, 0xFD	; 253
    9f8e:	ce 01       	movw	r24, r28
    9f90:	89 5e       	subi	r24, 0xE9	; 233
    9f92:	9d 4f       	sbci	r25, 0xFD	; 253
    9f94:	fc 01       	movw	r30, r24
    9f96:	60 81       	ld	r22, Z
    9f98:	71 81       	ldd	r23, Z+1	; 0x01
    9f9a:	82 81       	ldd	r24, Z+2	; 0x02
    9f9c:	93 81       	ldd	r25, Z+3	; 0x03
    9f9e:	26 e6       	ldi	r18, 0x66	; 102
    9fa0:	36 e6       	ldi	r19, 0x66	; 102
    9fa2:	46 e6       	ldi	r20, 0x66	; 102
    9fa4:	55 e4       	ldi	r21, 0x45	; 69
    9fa6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    9faa:	dc 01       	movw	r26, r24
    9fac:	cb 01       	movw	r24, r22
    9fae:	f8 01       	movw	r30, r16
    9fb0:	80 83       	st	Z, r24
    9fb2:	91 83       	std	Z+1, r25	; 0x01
    9fb4:	a2 83       	std	Z+2, r26	; 0x02
    9fb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9fb8:	ce 01       	movw	r24, r28
    9fba:	85 5e       	subi	r24, 0xE5	; 229
    9fbc:	9d 4f       	sbci	r25, 0xFD	; 253
    9fbe:	11 e0       	ldi	r17, 0x01	; 1
    9fc0:	fc 01       	movw	r30, r24
    9fc2:	60 81       	ld	r22, Z
    9fc4:	71 81       	ldd	r23, Z+1	; 0x01
    9fc6:	82 81       	ldd	r24, Z+2	; 0x02
    9fc8:	93 81       	ldd	r25, Z+3	; 0x03
    9fca:	20 e0       	ldi	r18, 0x00	; 0
    9fcc:	30 e0       	ldi	r19, 0x00	; 0
    9fce:	40 e8       	ldi	r20, 0x80	; 128
    9fd0:	5f e3       	ldi	r21, 0x3F	; 63
    9fd2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    9fd6:	88 23       	and	r24, r24
    9fd8:	0c f0       	brlt	.+2      	; 0x9fdc <pick_drop+0x3eea>
    9fda:	10 e0       	ldi	r17, 0x00	; 0
    9fdc:	11 23       	and	r17, r17
    9fde:	49 f0       	breq	.+18     	; 0x9ff2 <pick_drop+0x3f00>
		__ticks = 1;
    9fe0:	ce 01       	movw	r24, r28
    9fe2:	81 5e       	subi	r24, 0xE1	; 225
    9fe4:	9d 4f       	sbci	r25, 0xFD	; 253
    9fe6:	21 e0       	ldi	r18, 0x01	; 1
    9fe8:	30 e0       	ldi	r19, 0x00	; 0
    9fea:	fc 01       	movw	r30, r24
    9fec:	31 83       	std	Z+1, r19	; 0x01
    9fee:	20 83       	st	Z, r18
    9ff0:	74 c0       	rjmp	.+232    	; 0xa0da <pick_drop+0x3fe8>
	else if (__tmp > 65535)
    9ff2:	ce 01       	movw	r24, r28
    9ff4:	85 5e       	subi	r24, 0xE5	; 229
    9ff6:	9d 4f       	sbci	r25, 0xFD	; 253
    9ff8:	11 e0       	ldi	r17, 0x01	; 1
    9ffa:	fc 01       	movw	r30, r24
    9ffc:	60 81       	ld	r22, Z
    9ffe:	71 81       	ldd	r23, Z+1	; 0x01
    a000:	82 81       	ldd	r24, Z+2	; 0x02
    a002:	93 81       	ldd	r25, Z+3	; 0x03
    a004:	20 e0       	ldi	r18, 0x00	; 0
    a006:	3f ef       	ldi	r19, 0xFF	; 255
    a008:	4f e7       	ldi	r20, 0x7F	; 127
    a00a:	57 e4       	ldi	r21, 0x47	; 71
    a00c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    a010:	18 16       	cp	r1, r24
    a012:	0c f0       	brlt	.+2      	; 0xa016 <pick_drop+0x3f24>
    a014:	10 e0       	ldi	r17, 0x00	; 0
    a016:	11 23       	and	r17, r17
    a018:	09 f4       	brne	.+2      	; 0xa01c <pick_drop+0x3f2a>
    a01a:	4d c0       	rjmp	.+154    	; 0xa0b6 <pick_drop+0x3fc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a01c:	ce 01       	movw	r24, r28
    a01e:	89 5e       	subi	r24, 0xE9	; 233
    a020:	9d 4f       	sbci	r25, 0xFD	; 253
    a022:	fc 01       	movw	r30, r24
    a024:	60 81       	ld	r22, Z
    a026:	71 81       	ldd	r23, Z+1	; 0x01
    a028:	82 81       	ldd	r24, Z+2	; 0x02
    a02a:	93 81       	ldd	r25, Z+3	; 0x03
    a02c:	20 e0       	ldi	r18, 0x00	; 0
    a02e:	30 e0       	ldi	r19, 0x00	; 0
    a030:	40 e2       	ldi	r20, 0x20	; 32
    a032:	51 e4       	ldi	r21, 0x41	; 65
    a034:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a038:	dc 01       	movw	r26, r24
    a03a:	cb 01       	movw	r24, r22
    a03c:	8e 01       	movw	r16, r28
    a03e:	01 5e       	subi	r16, 0xE1	; 225
    a040:	1d 4f       	sbci	r17, 0xFD	; 253
    a042:	bc 01       	movw	r22, r24
    a044:	cd 01       	movw	r24, r26
    a046:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a04a:	dc 01       	movw	r26, r24
    a04c:	cb 01       	movw	r24, r22
    a04e:	f8 01       	movw	r30, r16
    a050:	91 83       	std	Z+1, r25	; 0x01
    a052:	80 83       	st	Z, r24
    a054:	27 c0       	rjmp	.+78     	; 0xa0a4 <pick_drop+0x3fb2>
    a056:	ce 01       	movw	r24, r28
    a058:	8f 5d       	subi	r24, 0xDF	; 223
    a05a:	9d 4f       	sbci	r25, 0xFD	; 253
    a05c:	20 e7       	ldi	r18, 0x70	; 112
    a05e:	31 e0       	ldi	r19, 0x01	; 1
    a060:	fc 01       	movw	r30, r24
    a062:	31 83       	std	Z+1, r19	; 0x01
    a064:	20 83       	st	Z, r18
    a066:	ce 01       	movw	r24, r28
    a068:	8f 5d       	subi	r24, 0xDF	; 223
    a06a:	9d 4f       	sbci	r25, 0xFD	; 253
    a06c:	fc 01       	movw	r30, r24
    a06e:	80 81       	ld	r24, Z
    a070:	91 81       	ldd	r25, Z+1	; 0x01
    a072:	8c 01       	movw	r16, r24
    a074:	c8 01       	movw	r24, r16
    a076:	01 97       	sbiw	r24, 0x01	; 1
    a078:	f1 f7       	brne	.-4      	; 0xa076 <pick_drop+0x3f84>
    a07a:	8c 01       	movw	r16, r24
    a07c:	ce 01       	movw	r24, r28
    a07e:	8f 5d       	subi	r24, 0xDF	; 223
    a080:	9d 4f       	sbci	r25, 0xFD	; 253
    a082:	fc 01       	movw	r30, r24
    a084:	11 83       	std	Z+1, r17	; 0x01
    a086:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a088:	ce 01       	movw	r24, r28
    a08a:	81 5e       	subi	r24, 0xE1	; 225
    a08c:	9d 4f       	sbci	r25, 0xFD	; 253
    a08e:	9e 01       	movw	r18, r28
    a090:	21 5e       	subi	r18, 0xE1	; 225
    a092:	3d 4f       	sbci	r19, 0xFD	; 253
    a094:	f9 01       	movw	r30, r18
    a096:	20 81       	ld	r18, Z
    a098:	31 81       	ldd	r19, Z+1	; 0x01
    a09a:	21 50       	subi	r18, 0x01	; 1
    a09c:	30 40       	sbci	r19, 0x00	; 0
    a09e:	fc 01       	movw	r30, r24
    a0a0:	31 83       	std	Z+1, r19	; 0x01
    a0a2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a0a4:	ce 01       	movw	r24, r28
    a0a6:	81 5e       	subi	r24, 0xE1	; 225
    a0a8:	9d 4f       	sbci	r25, 0xFD	; 253
    a0aa:	fc 01       	movw	r30, r24
    a0ac:	80 81       	ld	r24, Z
    a0ae:	91 81       	ldd	r25, Z+1	; 0x01
    a0b0:	00 97       	sbiw	r24, 0x00	; 0
    a0b2:	89 f6       	brne	.-94     	; 0xa056 <pick_drop+0x3f64>
    a0b4:	2f c0       	rjmp	.+94     	; 0xa114 <pick_drop+0x4022>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a0b6:	8e 01       	movw	r16, r28
    a0b8:	01 5e       	subi	r16, 0xE1	; 225
    a0ba:	1d 4f       	sbci	r17, 0xFD	; 253
    a0bc:	ce 01       	movw	r24, r28
    a0be:	85 5e       	subi	r24, 0xE5	; 229
    a0c0:	9d 4f       	sbci	r25, 0xFD	; 253
    a0c2:	fc 01       	movw	r30, r24
    a0c4:	60 81       	ld	r22, Z
    a0c6:	71 81       	ldd	r23, Z+1	; 0x01
    a0c8:	82 81       	ldd	r24, Z+2	; 0x02
    a0ca:	93 81       	ldd	r25, Z+3	; 0x03
    a0cc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a0d0:	dc 01       	movw	r26, r24
    a0d2:	cb 01       	movw	r24, r22
    a0d4:	f8 01       	movw	r30, r16
    a0d6:	91 83       	std	Z+1, r25	; 0x01
    a0d8:	80 83       	st	Z, r24
    a0da:	ce 01       	movw	r24, r28
    a0dc:	8d 5d       	subi	r24, 0xDD	; 221
    a0de:	9d 4f       	sbci	r25, 0xFD	; 253
    a0e0:	9e 01       	movw	r18, r28
    a0e2:	21 5e       	subi	r18, 0xE1	; 225
    a0e4:	3d 4f       	sbci	r19, 0xFD	; 253
    a0e6:	f9 01       	movw	r30, r18
    a0e8:	20 81       	ld	r18, Z
    a0ea:	31 81       	ldd	r19, Z+1	; 0x01
    a0ec:	fc 01       	movw	r30, r24
    a0ee:	31 83       	std	Z+1, r19	; 0x01
    a0f0:	20 83       	st	Z, r18
    a0f2:	ce 01       	movw	r24, r28
    a0f4:	8d 5d       	subi	r24, 0xDD	; 221
    a0f6:	9d 4f       	sbci	r25, 0xFD	; 253
    a0f8:	fc 01       	movw	r30, r24
    a0fa:	80 81       	ld	r24, Z
    a0fc:	91 81       	ldd	r25, Z+1	; 0x01
    a0fe:	8c 01       	movw	r16, r24
    a100:	c8 01       	movw	r24, r16
    a102:	01 97       	sbiw	r24, 0x01	; 1
    a104:	f1 f7       	brne	.-4      	; 0xa102 <pick_drop+0x4010>
    a106:	8c 01       	movw	r16, r24
    a108:	ce 01       	movw	r24, r28
    a10a:	8d 5d       	subi	r24, 0xDD	; 221
    a10c:	9d 4f       	sbci	r25, 0xFD	; 253
    a10e:	fc 01       	movw	r30, r24
    a110:	11 83       	std	Z+1, r17	; 0x01
    a112:	00 83       	st	Z, r16
		_delay_ms(20);
		correct_right3();
    a114:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
    a118:	9e 01       	movw	r18, r28
    a11a:	2b 5d       	subi	r18, 0xDB	; 219
    a11c:	3d 4f       	sbci	r19, 0xFD	; 253
    a11e:	80 e0       	ldi	r24, 0x00	; 0
    a120:	90 e0       	ldi	r25, 0x00	; 0
    a122:	a0 ea       	ldi	r26, 0xA0	; 160
    a124:	b1 e4       	ldi	r27, 0x41	; 65
    a126:	f9 01       	movw	r30, r18
    a128:	80 83       	st	Z, r24
    a12a:	91 83       	std	Z+1, r25	; 0x01
    a12c:	a2 83       	std	Z+2, r26	; 0x02
    a12e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a130:	8e 01       	movw	r16, r28
    a132:	07 5d       	subi	r16, 0xD7	; 215
    a134:	1d 4f       	sbci	r17, 0xFD	; 253
    a136:	ce 01       	movw	r24, r28
    a138:	8b 5d       	subi	r24, 0xDB	; 219
    a13a:	9d 4f       	sbci	r25, 0xFD	; 253
    a13c:	fc 01       	movw	r30, r24
    a13e:	60 81       	ld	r22, Z
    a140:	71 81       	ldd	r23, Z+1	; 0x01
    a142:	82 81       	ldd	r24, Z+2	; 0x02
    a144:	93 81       	ldd	r25, Z+3	; 0x03
    a146:	26 e6       	ldi	r18, 0x66	; 102
    a148:	36 e6       	ldi	r19, 0x66	; 102
    a14a:	46 e6       	ldi	r20, 0x66	; 102
    a14c:	55 e4       	ldi	r21, 0x45	; 69
    a14e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a152:	dc 01       	movw	r26, r24
    a154:	cb 01       	movw	r24, r22
    a156:	f8 01       	movw	r30, r16
    a158:	80 83       	st	Z, r24
    a15a:	91 83       	std	Z+1, r25	; 0x01
    a15c:	a2 83       	std	Z+2, r26	; 0x02
    a15e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a160:	ce 01       	movw	r24, r28
    a162:	87 5d       	subi	r24, 0xD7	; 215
    a164:	9d 4f       	sbci	r25, 0xFD	; 253
    a166:	11 e0       	ldi	r17, 0x01	; 1
    a168:	fc 01       	movw	r30, r24
    a16a:	60 81       	ld	r22, Z
    a16c:	71 81       	ldd	r23, Z+1	; 0x01
    a16e:	82 81       	ldd	r24, Z+2	; 0x02
    a170:	93 81       	ldd	r25, Z+3	; 0x03
    a172:	20 e0       	ldi	r18, 0x00	; 0
    a174:	30 e0       	ldi	r19, 0x00	; 0
    a176:	40 e8       	ldi	r20, 0x80	; 128
    a178:	5f e3       	ldi	r21, 0x3F	; 63
    a17a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    a17e:	88 23       	and	r24, r24
    a180:	0c f0       	brlt	.+2      	; 0xa184 <pick_drop+0x4092>
    a182:	10 e0       	ldi	r17, 0x00	; 0
    a184:	11 23       	and	r17, r17
    a186:	49 f0       	breq	.+18     	; 0xa19a <pick_drop+0x40a8>
		__ticks = 1;
    a188:	ce 01       	movw	r24, r28
    a18a:	83 5d       	subi	r24, 0xD3	; 211
    a18c:	9d 4f       	sbci	r25, 0xFD	; 253
    a18e:	21 e0       	ldi	r18, 0x01	; 1
    a190:	30 e0       	ldi	r19, 0x00	; 0
    a192:	fc 01       	movw	r30, r24
    a194:	31 83       	std	Z+1, r19	; 0x01
    a196:	20 83       	st	Z, r18
    a198:	74 c0       	rjmp	.+232    	; 0xa282 <pick_drop+0x4190>
	else if (__tmp > 65535)
    a19a:	ce 01       	movw	r24, r28
    a19c:	87 5d       	subi	r24, 0xD7	; 215
    a19e:	9d 4f       	sbci	r25, 0xFD	; 253
    a1a0:	11 e0       	ldi	r17, 0x01	; 1
    a1a2:	fc 01       	movw	r30, r24
    a1a4:	60 81       	ld	r22, Z
    a1a6:	71 81       	ldd	r23, Z+1	; 0x01
    a1a8:	82 81       	ldd	r24, Z+2	; 0x02
    a1aa:	93 81       	ldd	r25, Z+3	; 0x03
    a1ac:	20 e0       	ldi	r18, 0x00	; 0
    a1ae:	3f ef       	ldi	r19, 0xFF	; 255
    a1b0:	4f e7       	ldi	r20, 0x7F	; 127
    a1b2:	57 e4       	ldi	r21, 0x47	; 71
    a1b4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    a1b8:	18 16       	cp	r1, r24
    a1ba:	0c f0       	brlt	.+2      	; 0xa1be <pick_drop+0x40cc>
    a1bc:	10 e0       	ldi	r17, 0x00	; 0
    a1be:	11 23       	and	r17, r17
    a1c0:	09 f4       	brne	.+2      	; 0xa1c4 <pick_drop+0x40d2>
    a1c2:	4d c0       	rjmp	.+154    	; 0xa25e <pick_drop+0x416c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a1c4:	ce 01       	movw	r24, r28
    a1c6:	8b 5d       	subi	r24, 0xDB	; 219
    a1c8:	9d 4f       	sbci	r25, 0xFD	; 253
    a1ca:	fc 01       	movw	r30, r24
    a1cc:	60 81       	ld	r22, Z
    a1ce:	71 81       	ldd	r23, Z+1	; 0x01
    a1d0:	82 81       	ldd	r24, Z+2	; 0x02
    a1d2:	93 81       	ldd	r25, Z+3	; 0x03
    a1d4:	20 e0       	ldi	r18, 0x00	; 0
    a1d6:	30 e0       	ldi	r19, 0x00	; 0
    a1d8:	40 e2       	ldi	r20, 0x20	; 32
    a1da:	51 e4       	ldi	r21, 0x41	; 65
    a1dc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a1e0:	dc 01       	movw	r26, r24
    a1e2:	cb 01       	movw	r24, r22
    a1e4:	8e 01       	movw	r16, r28
    a1e6:	03 5d       	subi	r16, 0xD3	; 211
    a1e8:	1d 4f       	sbci	r17, 0xFD	; 253
    a1ea:	bc 01       	movw	r22, r24
    a1ec:	cd 01       	movw	r24, r26
    a1ee:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a1f2:	dc 01       	movw	r26, r24
    a1f4:	cb 01       	movw	r24, r22
    a1f6:	f8 01       	movw	r30, r16
    a1f8:	91 83       	std	Z+1, r25	; 0x01
    a1fa:	80 83       	st	Z, r24
    a1fc:	27 c0       	rjmp	.+78     	; 0xa24c <pick_drop+0x415a>
    a1fe:	ce 01       	movw	r24, r28
    a200:	81 5d       	subi	r24, 0xD1	; 209
    a202:	9d 4f       	sbci	r25, 0xFD	; 253
    a204:	20 e7       	ldi	r18, 0x70	; 112
    a206:	31 e0       	ldi	r19, 0x01	; 1
    a208:	fc 01       	movw	r30, r24
    a20a:	31 83       	std	Z+1, r19	; 0x01
    a20c:	20 83       	st	Z, r18
    a20e:	ce 01       	movw	r24, r28
    a210:	81 5d       	subi	r24, 0xD1	; 209
    a212:	9d 4f       	sbci	r25, 0xFD	; 253
    a214:	fc 01       	movw	r30, r24
    a216:	80 81       	ld	r24, Z
    a218:	91 81       	ldd	r25, Z+1	; 0x01
    a21a:	8c 01       	movw	r16, r24
    a21c:	c8 01       	movw	r24, r16
    a21e:	01 97       	sbiw	r24, 0x01	; 1
    a220:	f1 f7       	brne	.-4      	; 0xa21e <pick_drop+0x412c>
    a222:	8c 01       	movw	r16, r24
    a224:	ce 01       	movw	r24, r28
    a226:	81 5d       	subi	r24, 0xD1	; 209
    a228:	9d 4f       	sbci	r25, 0xFD	; 253
    a22a:	fc 01       	movw	r30, r24
    a22c:	11 83       	std	Z+1, r17	; 0x01
    a22e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a230:	ce 01       	movw	r24, r28
    a232:	83 5d       	subi	r24, 0xD3	; 211
    a234:	9d 4f       	sbci	r25, 0xFD	; 253
    a236:	9e 01       	movw	r18, r28
    a238:	23 5d       	subi	r18, 0xD3	; 211
    a23a:	3d 4f       	sbci	r19, 0xFD	; 253
    a23c:	f9 01       	movw	r30, r18
    a23e:	20 81       	ld	r18, Z
    a240:	31 81       	ldd	r19, Z+1	; 0x01
    a242:	21 50       	subi	r18, 0x01	; 1
    a244:	30 40       	sbci	r19, 0x00	; 0
    a246:	fc 01       	movw	r30, r24
    a248:	31 83       	std	Z+1, r19	; 0x01
    a24a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a24c:	ce 01       	movw	r24, r28
    a24e:	83 5d       	subi	r24, 0xD3	; 211
    a250:	9d 4f       	sbci	r25, 0xFD	; 253
    a252:	fc 01       	movw	r30, r24
    a254:	80 81       	ld	r24, Z
    a256:	91 81       	ldd	r25, Z+1	; 0x01
    a258:	00 97       	sbiw	r24, 0x00	; 0
    a25a:	89 f6       	brne	.-94     	; 0xa1fe <pick_drop+0x410c>
    a25c:	2f c0       	rjmp	.+94     	; 0xa2bc <pick_drop+0x41ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a25e:	8e 01       	movw	r16, r28
    a260:	03 5d       	subi	r16, 0xD3	; 211
    a262:	1d 4f       	sbci	r17, 0xFD	; 253
    a264:	ce 01       	movw	r24, r28
    a266:	87 5d       	subi	r24, 0xD7	; 215
    a268:	9d 4f       	sbci	r25, 0xFD	; 253
    a26a:	fc 01       	movw	r30, r24
    a26c:	60 81       	ld	r22, Z
    a26e:	71 81       	ldd	r23, Z+1	; 0x01
    a270:	82 81       	ldd	r24, Z+2	; 0x02
    a272:	93 81       	ldd	r25, Z+3	; 0x03
    a274:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a278:	dc 01       	movw	r26, r24
    a27a:	cb 01       	movw	r24, r22
    a27c:	f8 01       	movw	r30, r16
    a27e:	91 83       	std	Z+1, r25	; 0x01
    a280:	80 83       	st	Z, r24
    a282:	ce 01       	movw	r24, r28
    a284:	8f 5c       	subi	r24, 0xCF	; 207
    a286:	9d 4f       	sbci	r25, 0xFD	; 253
    a288:	9e 01       	movw	r18, r28
    a28a:	23 5d       	subi	r18, 0xD3	; 211
    a28c:	3d 4f       	sbci	r19, 0xFD	; 253
    a28e:	f9 01       	movw	r30, r18
    a290:	20 81       	ld	r18, Z
    a292:	31 81       	ldd	r19, Z+1	; 0x01
    a294:	fc 01       	movw	r30, r24
    a296:	31 83       	std	Z+1, r19	; 0x01
    a298:	20 83       	st	Z, r18
    a29a:	ce 01       	movw	r24, r28
    a29c:	8f 5c       	subi	r24, 0xCF	; 207
    a29e:	9d 4f       	sbci	r25, 0xFD	; 253
    a2a0:	fc 01       	movw	r30, r24
    a2a2:	80 81       	ld	r24, Z
    a2a4:	91 81       	ldd	r25, Z+1	; 0x01
    a2a6:	8c 01       	movw	r16, r24
    a2a8:	c8 01       	movw	r24, r16
    a2aa:	01 97       	sbiw	r24, 0x01	; 1
    a2ac:	f1 f7       	brne	.-4      	; 0xa2aa <pick_drop+0x41b8>
    a2ae:	8c 01       	movw	r16, r24
    a2b0:	ce 01       	movw	r24, r28
    a2b2:	8f 5c       	subi	r24, 0xCF	; 207
    a2b4:	9d 4f       	sbci	r25, 0xFD	; 253
    a2b6:	fc 01       	movw	r30, r24
    a2b8:	11 83       	std	Z+1, r17	; 0x01
    a2ba:	00 83       	st	Z, r16
		_delay_ms(20);
		stop();
    a2bc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    a2c0:	9e 01       	movw	r18, r28
    a2c2:	2d 5c       	subi	r18, 0xCD	; 205
    a2c4:	3d 4f       	sbci	r19, 0xFD	; 253
    a2c6:	80 e0       	ldi	r24, 0x00	; 0
    a2c8:	90 e0       	ldi	r25, 0x00	; 0
    a2ca:	a0 ea       	ldi	r26, 0xA0	; 160
    a2cc:	b1 e4       	ldi	r27, 0x41	; 65
    a2ce:	f9 01       	movw	r30, r18
    a2d0:	80 83       	st	Z, r24
    a2d2:	91 83       	std	Z+1, r25	; 0x01
    a2d4:	a2 83       	std	Z+2, r26	; 0x02
    a2d6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a2d8:	8e 01       	movw	r16, r28
    a2da:	09 5c       	subi	r16, 0xC9	; 201
    a2dc:	1d 4f       	sbci	r17, 0xFD	; 253
    a2de:	ce 01       	movw	r24, r28
    a2e0:	8d 5c       	subi	r24, 0xCD	; 205
    a2e2:	9d 4f       	sbci	r25, 0xFD	; 253
    a2e4:	fc 01       	movw	r30, r24
    a2e6:	60 81       	ld	r22, Z
    a2e8:	71 81       	ldd	r23, Z+1	; 0x01
    a2ea:	82 81       	ldd	r24, Z+2	; 0x02
    a2ec:	93 81       	ldd	r25, Z+3	; 0x03
    a2ee:	26 e6       	ldi	r18, 0x66	; 102
    a2f0:	36 e6       	ldi	r19, 0x66	; 102
    a2f2:	46 e6       	ldi	r20, 0x66	; 102
    a2f4:	55 e4       	ldi	r21, 0x45	; 69
    a2f6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a2fa:	dc 01       	movw	r26, r24
    a2fc:	cb 01       	movw	r24, r22
    a2fe:	f8 01       	movw	r30, r16
    a300:	80 83       	st	Z, r24
    a302:	91 83       	std	Z+1, r25	; 0x01
    a304:	a2 83       	std	Z+2, r26	; 0x02
    a306:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a308:	ce 01       	movw	r24, r28
    a30a:	89 5c       	subi	r24, 0xC9	; 201
    a30c:	9d 4f       	sbci	r25, 0xFD	; 253
    a30e:	11 e0       	ldi	r17, 0x01	; 1
    a310:	fc 01       	movw	r30, r24
    a312:	60 81       	ld	r22, Z
    a314:	71 81       	ldd	r23, Z+1	; 0x01
    a316:	82 81       	ldd	r24, Z+2	; 0x02
    a318:	93 81       	ldd	r25, Z+3	; 0x03
    a31a:	20 e0       	ldi	r18, 0x00	; 0
    a31c:	30 e0       	ldi	r19, 0x00	; 0
    a31e:	40 e8       	ldi	r20, 0x80	; 128
    a320:	5f e3       	ldi	r21, 0x3F	; 63
    a322:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    a326:	88 23       	and	r24, r24
    a328:	0c f0       	brlt	.+2      	; 0xa32c <pick_drop+0x423a>
    a32a:	10 e0       	ldi	r17, 0x00	; 0
    a32c:	11 23       	and	r17, r17
    a32e:	49 f0       	breq	.+18     	; 0xa342 <pick_drop+0x4250>
		__ticks = 1;
    a330:	ce 01       	movw	r24, r28
    a332:	85 5c       	subi	r24, 0xC5	; 197
    a334:	9d 4f       	sbci	r25, 0xFD	; 253
    a336:	21 e0       	ldi	r18, 0x01	; 1
    a338:	30 e0       	ldi	r19, 0x00	; 0
    a33a:	fc 01       	movw	r30, r24
    a33c:	31 83       	std	Z+1, r19	; 0x01
    a33e:	20 83       	st	Z, r18
    a340:	74 c0       	rjmp	.+232    	; 0xa42a <pick_drop+0x4338>
	else if (__tmp > 65535)
    a342:	ce 01       	movw	r24, r28
    a344:	89 5c       	subi	r24, 0xC9	; 201
    a346:	9d 4f       	sbci	r25, 0xFD	; 253
    a348:	11 e0       	ldi	r17, 0x01	; 1
    a34a:	fc 01       	movw	r30, r24
    a34c:	60 81       	ld	r22, Z
    a34e:	71 81       	ldd	r23, Z+1	; 0x01
    a350:	82 81       	ldd	r24, Z+2	; 0x02
    a352:	93 81       	ldd	r25, Z+3	; 0x03
    a354:	20 e0       	ldi	r18, 0x00	; 0
    a356:	3f ef       	ldi	r19, 0xFF	; 255
    a358:	4f e7       	ldi	r20, 0x7F	; 127
    a35a:	57 e4       	ldi	r21, 0x47	; 71
    a35c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    a360:	18 16       	cp	r1, r24
    a362:	0c f0       	brlt	.+2      	; 0xa366 <pick_drop+0x4274>
    a364:	10 e0       	ldi	r17, 0x00	; 0
    a366:	11 23       	and	r17, r17
    a368:	09 f4       	brne	.+2      	; 0xa36c <pick_drop+0x427a>
    a36a:	4d c0       	rjmp	.+154    	; 0xa406 <pick_drop+0x4314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a36c:	ce 01       	movw	r24, r28
    a36e:	8d 5c       	subi	r24, 0xCD	; 205
    a370:	9d 4f       	sbci	r25, 0xFD	; 253
    a372:	fc 01       	movw	r30, r24
    a374:	60 81       	ld	r22, Z
    a376:	71 81       	ldd	r23, Z+1	; 0x01
    a378:	82 81       	ldd	r24, Z+2	; 0x02
    a37a:	93 81       	ldd	r25, Z+3	; 0x03
    a37c:	20 e0       	ldi	r18, 0x00	; 0
    a37e:	30 e0       	ldi	r19, 0x00	; 0
    a380:	40 e2       	ldi	r20, 0x20	; 32
    a382:	51 e4       	ldi	r21, 0x41	; 65
    a384:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a388:	dc 01       	movw	r26, r24
    a38a:	cb 01       	movw	r24, r22
    a38c:	8e 01       	movw	r16, r28
    a38e:	05 5c       	subi	r16, 0xC5	; 197
    a390:	1d 4f       	sbci	r17, 0xFD	; 253
    a392:	bc 01       	movw	r22, r24
    a394:	cd 01       	movw	r24, r26
    a396:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a39a:	dc 01       	movw	r26, r24
    a39c:	cb 01       	movw	r24, r22
    a39e:	f8 01       	movw	r30, r16
    a3a0:	91 83       	std	Z+1, r25	; 0x01
    a3a2:	80 83       	st	Z, r24
    a3a4:	27 c0       	rjmp	.+78     	; 0xa3f4 <pick_drop+0x4302>
    a3a6:	ce 01       	movw	r24, r28
    a3a8:	83 5c       	subi	r24, 0xC3	; 195
    a3aa:	9d 4f       	sbci	r25, 0xFD	; 253
    a3ac:	20 e7       	ldi	r18, 0x70	; 112
    a3ae:	31 e0       	ldi	r19, 0x01	; 1
    a3b0:	fc 01       	movw	r30, r24
    a3b2:	31 83       	std	Z+1, r19	; 0x01
    a3b4:	20 83       	st	Z, r18
    a3b6:	ce 01       	movw	r24, r28
    a3b8:	83 5c       	subi	r24, 0xC3	; 195
    a3ba:	9d 4f       	sbci	r25, 0xFD	; 253
    a3bc:	fc 01       	movw	r30, r24
    a3be:	80 81       	ld	r24, Z
    a3c0:	91 81       	ldd	r25, Z+1	; 0x01
    a3c2:	8c 01       	movw	r16, r24
    a3c4:	c8 01       	movw	r24, r16
    a3c6:	01 97       	sbiw	r24, 0x01	; 1
    a3c8:	f1 f7       	brne	.-4      	; 0xa3c6 <pick_drop+0x42d4>
    a3ca:	8c 01       	movw	r16, r24
    a3cc:	ce 01       	movw	r24, r28
    a3ce:	83 5c       	subi	r24, 0xC3	; 195
    a3d0:	9d 4f       	sbci	r25, 0xFD	; 253
    a3d2:	fc 01       	movw	r30, r24
    a3d4:	11 83       	std	Z+1, r17	; 0x01
    a3d6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3d8:	ce 01       	movw	r24, r28
    a3da:	85 5c       	subi	r24, 0xC5	; 197
    a3dc:	9d 4f       	sbci	r25, 0xFD	; 253
    a3de:	9e 01       	movw	r18, r28
    a3e0:	25 5c       	subi	r18, 0xC5	; 197
    a3e2:	3d 4f       	sbci	r19, 0xFD	; 253
    a3e4:	f9 01       	movw	r30, r18
    a3e6:	20 81       	ld	r18, Z
    a3e8:	31 81       	ldd	r19, Z+1	; 0x01
    a3ea:	21 50       	subi	r18, 0x01	; 1
    a3ec:	30 40       	sbci	r19, 0x00	; 0
    a3ee:	fc 01       	movw	r30, r24
    a3f0:	31 83       	std	Z+1, r19	; 0x01
    a3f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a3f4:	ce 01       	movw	r24, r28
    a3f6:	85 5c       	subi	r24, 0xC5	; 197
    a3f8:	9d 4f       	sbci	r25, 0xFD	; 253
    a3fa:	fc 01       	movw	r30, r24
    a3fc:	80 81       	ld	r24, Z
    a3fe:	91 81       	ldd	r25, Z+1	; 0x01
    a400:	00 97       	sbiw	r24, 0x00	; 0
    a402:	89 f6       	brne	.-94     	; 0xa3a6 <pick_drop+0x42b4>
    a404:	2f c0       	rjmp	.+94     	; 0xa464 <pick_drop+0x4372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a406:	8e 01       	movw	r16, r28
    a408:	05 5c       	subi	r16, 0xC5	; 197
    a40a:	1d 4f       	sbci	r17, 0xFD	; 253
    a40c:	ce 01       	movw	r24, r28
    a40e:	89 5c       	subi	r24, 0xC9	; 201
    a410:	9d 4f       	sbci	r25, 0xFD	; 253
    a412:	fc 01       	movw	r30, r24
    a414:	60 81       	ld	r22, Z
    a416:	71 81       	ldd	r23, Z+1	; 0x01
    a418:	82 81       	ldd	r24, Z+2	; 0x02
    a41a:	93 81       	ldd	r25, Z+3	; 0x03
    a41c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a420:	dc 01       	movw	r26, r24
    a422:	cb 01       	movw	r24, r22
    a424:	f8 01       	movw	r30, r16
    a426:	91 83       	std	Z+1, r25	; 0x01
    a428:	80 83       	st	Z, r24
    a42a:	ce 01       	movw	r24, r28
    a42c:	81 5c       	subi	r24, 0xC1	; 193
    a42e:	9d 4f       	sbci	r25, 0xFD	; 253
    a430:	9e 01       	movw	r18, r28
    a432:	25 5c       	subi	r18, 0xC5	; 197
    a434:	3d 4f       	sbci	r19, 0xFD	; 253
    a436:	f9 01       	movw	r30, r18
    a438:	20 81       	ld	r18, Z
    a43a:	31 81       	ldd	r19, Z+1	; 0x01
    a43c:	fc 01       	movw	r30, r24
    a43e:	31 83       	std	Z+1, r19	; 0x01
    a440:	20 83       	st	Z, r18
    a442:	ce 01       	movw	r24, r28
    a444:	81 5c       	subi	r24, 0xC1	; 193
    a446:	9d 4f       	sbci	r25, 0xFD	; 253
    a448:	fc 01       	movw	r30, r24
    a44a:	80 81       	ld	r24, Z
    a44c:	91 81       	ldd	r25, Z+1	; 0x01
    a44e:	8c 01       	movw	r16, r24
    a450:	c8 01       	movw	r24, r16
    a452:	01 97       	sbiw	r24, 0x01	; 1
    a454:	f1 f7       	brne	.-4      	; 0xa452 <pick_drop+0x4360>
    a456:	8c 01       	movw	r16, r24
    a458:	ce 01       	movw	r24, r28
    a45a:	81 5c       	subi	r24, 0xC1	; 193
    a45c:	9d 4f       	sbci	r25, 0xFD	; 253
    a45e:	fc 01       	movw	r30, r24
    a460:	11 83       	std	Z+1, r17	; 0x01
    a462:	00 83       	st	Z, r16
		_delay_ms(20);
		forward_mm(20);
    a464:	84 e1       	ldi	r24, 0x14	; 20
    a466:	90 e0       	ldi	r25, 0x00	; 0
    a468:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a46c:	9e 01       	movw	r18, r28
    a46e:	2f 5b       	subi	r18, 0xBF	; 191
    a470:	3d 4f       	sbci	r19, 0xFD	; 253
    a472:	80 e0       	ldi	r24, 0x00	; 0
    a474:	90 e0       	ldi	r25, 0x00	; 0
    a476:	a0 ea       	ldi	r26, 0xA0	; 160
    a478:	b1 e4       	ldi	r27, 0x41	; 65
    a47a:	f9 01       	movw	r30, r18
    a47c:	80 83       	st	Z, r24
    a47e:	91 83       	std	Z+1, r25	; 0x01
    a480:	a2 83       	std	Z+2, r26	; 0x02
    a482:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a484:	8e 01       	movw	r16, r28
    a486:	0b 5b       	subi	r16, 0xBB	; 187
    a488:	1d 4f       	sbci	r17, 0xFD	; 253
    a48a:	ce 01       	movw	r24, r28
    a48c:	8f 5b       	subi	r24, 0xBF	; 191
    a48e:	9d 4f       	sbci	r25, 0xFD	; 253
    a490:	fc 01       	movw	r30, r24
    a492:	60 81       	ld	r22, Z
    a494:	71 81       	ldd	r23, Z+1	; 0x01
    a496:	82 81       	ldd	r24, Z+2	; 0x02
    a498:	93 81       	ldd	r25, Z+3	; 0x03
    a49a:	26 e6       	ldi	r18, 0x66	; 102
    a49c:	36 e6       	ldi	r19, 0x66	; 102
    a49e:	46 e6       	ldi	r20, 0x66	; 102
    a4a0:	55 e4       	ldi	r21, 0x45	; 69
    a4a2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a4a6:	dc 01       	movw	r26, r24
    a4a8:	cb 01       	movw	r24, r22
    a4aa:	f8 01       	movw	r30, r16
    a4ac:	80 83       	st	Z, r24
    a4ae:	91 83       	std	Z+1, r25	; 0x01
    a4b0:	a2 83       	std	Z+2, r26	; 0x02
    a4b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a4b4:	ce 01       	movw	r24, r28
    a4b6:	8b 5b       	subi	r24, 0xBB	; 187
    a4b8:	9d 4f       	sbci	r25, 0xFD	; 253
    a4ba:	11 e0       	ldi	r17, 0x01	; 1
    a4bc:	fc 01       	movw	r30, r24
    a4be:	60 81       	ld	r22, Z
    a4c0:	71 81       	ldd	r23, Z+1	; 0x01
    a4c2:	82 81       	ldd	r24, Z+2	; 0x02
    a4c4:	93 81       	ldd	r25, Z+3	; 0x03
    a4c6:	20 e0       	ldi	r18, 0x00	; 0
    a4c8:	30 e0       	ldi	r19, 0x00	; 0
    a4ca:	40 e8       	ldi	r20, 0x80	; 128
    a4cc:	5f e3       	ldi	r21, 0x3F	; 63
    a4ce:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    a4d2:	88 23       	and	r24, r24
    a4d4:	0c f0       	brlt	.+2      	; 0xa4d8 <pick_drop+0x43e6>
    a4d6:	10 e0       	ldi	r17, 0x00	; 0
    a4d8:	11 23       	and	r17, r17
    a4da:	49 f0       	breq	.+18     	; 0xa4ee <pick_drop+0x43fc>
		__ticks = 1;
    a4dc:	ce 01       	movw	r24, r28
    a4de:	87 5b       	subi	r24, 0xB7	; 183
    a4e0:	9d 4f       	sbci	r25, 0xFD	; 253
    a4e2:	21 e0       	ldi	r18, 0x01	; 1
    a4e4:	30 e0       	ldi	r19, 0x00	; 0
    a4e6:	fc 01       	movw	r30, r24
    a4e8:	31 83       	std	Z+1, r19	; 0x01
    a4ea:	20 83       	st	Z, r18
    a4ec:	75 c0       	rjmp	.+234    	; 0xa5d8 <pick_drop+0x44e6>
	else if (__tmp > 65535)
    a4ee:	ce 01       	movw	r24, r28
    a4f0:	8b 5b       	subi	r24, 0xBB	; 187
    a4f2:	9d 4f       	sbci	r25, 0xFD	; 253
    a4f4:	11 e0       	ldi	r17, 0x01	; 1
    a4f6:	fc 01       	movw	r30, r24
    a4f8:	60 81       	ld	r22, Z
    a4fa:	71 81       	ldd	r23, Z+1	; 0x01
    a4fc:	82 81       	ldd	r24, Z+2	; 0x02
    a4fe:	93 81       	ldd	r25, Z+3	; 0x03
    a500:	20 e0       	ldi	r18, 0x00	; 0
    a502:	3f ef       	ldi	r19, 0xFF	; 255
    a504:	4f e7       	ldi	r20, 0x7F	; 127
    a506:	57 e4       	ldi	r21, 0x47	; 71
    a508:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    a50c:	18 16       	cp	r1, r24
    a50e:	0c f0       	brlt	.+2      	; 0xa512 <pick_drop+0x4420>
    a510:	10 e0       	ldi	r17, 0x00	; 0
    a512:	11 23       	and	r17, r17
    a514:	09 f4       	brne	.+2      	; 0xa518 <pick_drop+0x4426>
    a516:	4e c0       	rjmp	.+156    	; 0xa5b4 <pick_drop+0x44c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a518:	ce 01       	movw	r24, r28
    a51a:	8f 5b       	subi	r24, 0xBF	; 191
    a51c:	9d 4f       	sbci	r25, 0xFD	; 253
    a51e:	fc 01       	movw	r30, r24
    a520:	60 81       	ld	r22, Z
    a522:	71 81       	ldd	r23, Z+1	; 0x01
    a524:	82 81       	ldd	r24, Z+2	; 0x02
    a526:	93 81       	ldd	r25, Z+3	; 0x03
    a528:	20 e0       	ldi	r18, 0x00	; 0
    a52a:	30 e0       	ldi	r19, 0x00	; 0
    a52c:	40 e2       	ldi	r20, 0x20	; 32
    a52e:	51 e4       	ldi	r21, 0x41	; 65
    a530:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a534:	dc 01       	movw	r26, r24
    a536:	cb 01       	movw	r24, r22
    a538:	8e 01       	movw	r16, r28
    a53a:	07 5b       	subi	r16, 0xB7	; 183
    a53c:	1d 4f       	sbci	r17, 0xFD	; 253
    a53e:	bc 01       	movw	r22, r24
    a540:	cd 01       	movw	r24, r26
    a542:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a546:	dc 01       	movw	r26, r24
    a548:	cb 01       	movw	r24, r22
    a54a:	f8 01       	movw	r30, r16
    a54c:	91 83       	std	Z+1, r25	; 0x01
    a54e:	80 83       	st	Z, r24
    a550:	27 c0       	rjmp	.+78     	; 0xa5a0 <pick_drop+0x44ae>
    a552:	ce 01       	movw	r24, r28
    a554:	85 5b       	subi	r24, 0xB5	; 181
    a556:	9d 4f       	sbci	r25, 0xFD	; 253
    a558:	20 e7       	ldi	r18, 0x70	; 112
    a55a:	31 e0       	ldi	r19, 0x01	; 1
    a55c:	fc 01       	movw	r30, r24
    a55e:	31 83       	std	Z+1, r19	; 0x01
    a560:	20 83       	st	Z, r18
    a562:	ce 01       	movw	r24, r28
    a564:	85 5b       	subi	r24, 0xB5	; 181
    a566:	9d 4f       	sbci	r25, 0xFD	; 253
    a568:	fc 01       	movw	r30, r24
    a56a:	80 81       	ld	r24, Z
    a56c:	91 81       	ldd	r25, Z+1	; 0x01
    a56e:	8c 01       	movw	r16, r24
    a570:	c8 01       	movw	r24, r16
    a572:	01 97       	sbiw	r24, 0x01	; 1
    a574:	f1 f7       	brne	.-4      	; 0xa572 <pick_drop+0x4480>
    a576:	8c 01       	movw	r16, r24
    a578:	ce 01       	movw	r24, r28
    a57a:	85 5b       	subi	r24, 0xB5	; 181
    a57c:	9d 4f       	sbci	r25, 0xFD	; 253
    a57e:	fc 01       	movw	r30, r24
    a580:	11 83       	std	Z+1, r17	; 0x01
    a582:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a584:	ce 01       	movw	r24, r28
    a586:	87 5b       	subi	r24, 0xB7	; 183
    a588:	9d 4f       	sbci	r25, 0xFD	; 253
    a58a:	9e 01       	movw	r18, r28
    a58c:	27 5b       	subi	r18, 0xB7	; 183
    a58e:	3d 4f       	sbci	r19, 0xFD	; 253
    a590:	f9 01       	movw	r30, r18
    a592:	20 81       	ld	r18, Z
    a594:	31 81       	ldd	r19, Z+1	; 0x01
    a596:	21 50       	subi	r18, 0x01	; 1
    a598:	30 40       	sbci	r19, 0x00	; 0
    a59a:	fc 01       	movw	r30, r24
    a59c:	31 83       	std	Z+1, r19	; 0x01
    a59e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a5a0:	ce 01       	movw	r24, r28
    a5a2:	87 5b       	subi	r24, 0xB7	; 183
    a5a4:	9d 4f       	sbci	r25, 0xFD	; 253
    a5a6:	fc 01       	movw	r30, r24
    a5a8:	80 81       	ld	r24, Z
    a5aa:	91 81       	ldd	r25, Z+1	; 0x01
    a5ac:	00 97       	sbiw	r24, 0x00	; 0
    a5ae:	89 f6       	brne	.-94     	; 0xa552 <pick_drop+0x4460>
    a5b0:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a5b4:	8e 01       	movw	r16, r28
    a5b6:	07 5b       	subi	r16, 0xB7	; 183
    a5b8:	1d 4f       	sbci	r17, 0xFD	; 253
    a5ba:	ce 01       	movw	r24, r28
    a5bc:	8b 5b       	subi	r24, 0xBB	; 187
    a5be:	9d 4f       	sbci	r25, 0xFD	; 253
    a5c0:	fc 01       	movw	r30, r24
    a5c2:	60 81       	ld	r22, Z
    a5c4:	71 81       	ldd	r23, Z+1	; 0x01
    a5c6:	82 81       	ldd	r24, Z+2	; 0x02
    a5c8:	93 81       	ldd	r25, Z+3	; 0x03
    a5ca:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a5ce:	dc 01       	movw	r26, r24
    a5d0:	cb 01       	movw	r24, r22
    a5d2:	f8 01       	movw	r30, r16
    a5d4:	91 83       	std	Z+1, r25	; 0x01
    a5d6:	80 83       	st	Z, r24
    a5d8:	ce 01       	movw	r24, r28
    a5da:	83 5b       	subi	r24, 0xB3	; 179
    a5dc:	9d 4f       	sbci	r25, 0xFD	; 253
    a5de:	9e 01       	movw	r18, r28
    a5e0:	27 5b       	subi	r18, 0xB7	; 183
    a5e2:	3d 4f       	sbci	r19, 0xFD	; 253
    a5e4:	f9 01       	movw	r30, r18
    a5e6:	20 81       	ld	r18, Z
    a5e8:	31 81       	ldd	r19, Z+1	; 0x01
    a5ea:	fc 01       	movw	r30, r24
    a5ec:	31 83       	std	Z+1, r19	; 0x01
    a5ee:	20 83       	st	Z, r18
    a5f0:	ce 01       	movw	r24, r28
    a5f2:	83 5b       	subi	r24, 0xB3	; 179
    a5f4:	9d 4f       	sbci	r25, 0xFD	; 253
    a5f6:	fc 01       	movw	r30, r24
    a5f8:	80 81       	ld	r24, Z
    a5fa:	91 81       	ldd	r25, Z+1	; 0x01
    a5fc:	8c 01       	movw	r16, r24
    a5fe:	c8 01       	movw	r24, r16
    a600:	01 97       	sbiw	r24, 0x01	; 1
    a602:	f1 f7       	brne	.-4      	; 0xa600 <pick_drop+0x450e>
    a604:	8c 01       	movw	r16, r24
    a606:	ce 01       	movw	r24, r28
    a608:	83 5b       	subi	r24, 0xB3	; 179
    a60a:	9d 4f       	sbci	r25, 0xFD	; 253
    a60c:	fc 01       	movw	r30, r24
    a60e:	11 83       	std	Z+1, r17	; 0x01
    a610:	00 83       	st	Z, r16
    a612:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
		_delay_ms(20);
		}		
	}
	else if(pd=='4')
    a616:	ce 01       	movw	r24, r28
    a618:	8f 5f       	subi	r24, 0xFF	; 255
    a61a:	9b 4f       	sbci	r25, 0xFB	; 251
    a61c:	fc 01       	movw	r30, r24
    a61e:	80 81       	ld	r24, Z
    a620:	84 33       	cpi	r24, 0x34	; 52
    a622:	09 f0       	breq	.+2      	; 0xa626 <pick_drop+0x4534>
    a624:	40 c4       	rjmp	.+2176   	; 0xaea6 <pick_drop+0x4db4>
	{	// first node
		if(master_path[node-1]=='N'){
    a626:	80 91 4f 03 	lds	r24, 0x034F
    a62a:	90 91 50 03 	lds	r25, 0x0350
    a62e:	01 97       	sbiw	r24, 0x01	; 1
    a630:	8d 5a       	subi	r24, 0xAD	; 173
    a632:	9c 4f       	sbci	r25, 0xFC	; 252
    a634:	fc 01       	movw	r30, r24
    a636:	80 81       	ld	r24, Z
    a638:	8e 34       	cpi	r24, 0x4E	; 78
    a63a:	11 f0       	breq	.+4      	; 0xa640 <pick_drop+0x454e>
    a63c:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
		forward_mm(35);
    a640:	83 e2       	ldi	r24, 0x23	; 35
    a642:	90 e0       	ldi	r25, 0x00	; 0
    a644:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
		spl_left();
    a648:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    a64c:	9e 01       	movw	r18, r28
    a64e:	21 5b       	subi	r18, 0xB1	; 177
    a650:	3d 4f       	sbci	r19, 0xFD	; 253
    a652:	80 e0       	ldi	r24, 0x00	; 0
    a654:	90 e0       	ldi	r25, 0x00	; 0
    a656:	a0 ea       	ldi	r26, 0xA0	; 160
    a658:	b1 e4       	ldi	r27, 0x41	; 65
    a65a:	f9 01       	movw	r30, r18
    a65c:	80 83       	st	Z, r24
    a65e:	91 83       	std	Z+1, r25	; 0x01
    a660:	a2 83       	std	Z+2, r26	; 0x02
    a662:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a664:	8e 01       	movw	r16, r28
    a666:	0d 5a       	subi	r16, 0xAD	; 173
    a668:	1d 4f       	sbci	r17, 0xFD	; 253
    a66a:	ce 01       	movw	r24, r28
    a66c:	81 5b       	subi	r24, 0xB1	; 177
    a66e:	9d 4f       	sbci	r25, 0xFD	; 253
    a670:	fc 01       	movw	r30, r24
    a672:	60 81       	ld	r22, Z
    a674:	71 81       	ldd	r23, Z+1	; 0x01
    a676:	82 81       	ldd	r24, Z+2	; 0x02
    a678:	93 81       	ldd	r25, Z+3	; 0x03
    a67a:	26 e6       	ldi	r18, 0x66	; 102
    a67c:	36 e6       	ldi	r19, 0x66	; 102
    a67e:	46 e6       	ldi	r20, 0x66	; 102
    a680:	55 e4       	ldi	r21, 0x45	; 69
    a682:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a686:	dc 01       	movw	r26, r24
    a688:	cb 01       	movw	r24, r22
    a68a:	f8 01       	movw	r30, r16
    a68c:	80 83       	st	Z, r24
    a68e:	91 83       	std	Z+1, r25	; 0x01
    a690:	a2 83       	std	Z+2, r26	; 0x02
    a692:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a694:	ce 01       	movw	r24, r28
    a696:	8d 5a       	subi	r24, 0xAD	; 173
    a698:	9d 4f       	sbci	r25, 0xFD	; 253
    a69a:	11 e0       	ldi	r17, 0x01	; 1
    a69c:	fc 01       	movw	r30, r24
    a69e:	60 81       	ld	r22, Z
    a6a0:	71 81       	ldd	r23, Z+1	; 0x01
    a6a2:	82 81       	ldd	r24, Z+2	; 0x02
    a6a4:	93 81       	ldd	r25, Z+3	; 0x03
    a6a6:	20 e0       	ldi	r18, 0x00	; 0
    a6a8:	30 e0       	ldi	r19, 0x00	; 0
    a6aa:	40 e8       	ldi	r20, 0x80	; 128
    a6ac:	5f e3       	ldi	r21, 0x3F	; 63
    a6ae:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    a6b2:	88 23       	and	r24, r24
    a6b4:	0c f0       	brlt	.+2      	; 0xa6b8 <pick_drop+0x45c6>
    a6b6:	10 e0       	ldi	r17, 0x00	; 0
    a6b8:	11 23       	and	r17, r17
    a6ba:	49 f0       	breq	.+18     	; 0xa6ce <pick_drop+0x45dc>
		__ticks = 1;
    a6bc:	ce 01       	movw	r24, r28
    a6be:	89 5a       	subi	r24, 0xA9	; 169
    a6c0:	9d 4f       	sbci	r25, 0xFD	; 253
    a6c2:	21 e0       	ldi	r18, 0x01	; 1
    a6c4:	30 e0       	ldi	r19, 0x00	; 0
    a6c6:	fc 01       	movw	r30, r24
    a6c8:	31 83       	std	Z+1, r19	; 0x01
    a6ca:	20 83       	st	Z, r18
    a6cc:	74 c0       	rjmp	.+232    	; 0xa7b6 <pick_drop+0x46c4>
	else if (__tmp > 65535)
    a6ce:	ce 01       	movw	r24, r28
    a6d0:	8d 5a       	subi	r24, 0xAD	; 173
    a6d2:	9d 4f       	sbci	r25, 0xFD	; 253
    a6d4:	11 e0       	ldi	r17, 0x01	; 1
    a6d6:	fc 01       	movw	r30, r24
    a6d8:	60 81       	ld	r22, Z
    a6da:	71 81       	ldd	r23, Z+1	; 0x01
    a6dc:	82 81       	ldd	r24, Z+2	; 0x02
    a6de:	93 81       	ldd	r25, Z+3	; 0x03
    a6e0:	20 e0       	ldi	r18, 0x00	; 0
    a6e2:	3f ef       	ldi	r19, 0xFF	; 255
    a6e4:	4f e7       	ldi	r20, 0x7F	; 127
    a6e6:	57 e4       	ldi	r21, 0x47	; 71
    a6e8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    a6ec:	18 16       	cp	r1, r24
    a6ee:	0c f0       	brlt	.+2      	; 0xa6f2 <pick_drop+0x4600>
    a6f0:	10 e0       	ldi	r17, 0x00	; 0
    a6f2:	11 23       	and	r17, r17
    a6f4:	09 f4       	brne	.+2      	; 0xa6f8 <pick_drop+0x4606>
    a6f6:	4d c0       	rjmp	.+154    	; 0xa792 <pick_drop+0x46a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a6f8:	ce 01       	movw	r24, r28
    a6fa:	81 5b       	subi	r24, 0xB1	; 177
    a6fc:	9d 4f       	sbci	r25, 0xFD	; 253
    a6fe:	fc 01       	movw	r30, r24
    a700:	60 81       	ld	r22, Z
    a702:	71 81       	ldd	r23, Z+1	; 0x01
    a704:	82 81       	ldd	r24, Z+2	; 0x02
    a706:	93 81       	ldd	r25, Z+3	; 0x03
    a708:	20 e0       	ldi	r18, 0x00	; 0
    a70a:	30 e0       	ldi	r19, 0x00	; 0
    a70c:	40 e2       	ldi	r20, 0x20	; 32
    a70e:	51 e4       	ldi	r21, 0x41	; 65
    a710:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a714:	dc 01       	movw	r26, r24
    a716:	cb 01       	movw	r24, r22
    a718:	8e 01       	movw	r16, r28
    a71a:	09 5a       	subi	r16, 0xA9	; 169
    a71c:	1d 4f       	sbci	r17, 0xFD	; 253
    a71e:	bc 01       	movw	r22, r24
    a720:	cd 01       	movw	r24, r26
    a722:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a726:	dc 01       	movw	r26, r24
    a728:	cb 01       	movw	r24, r22
    a72a:	f8 01       	movw	r30, r16
    a72c:	91 83       	std	Z+1, r25	; 0x01
    a72e:	80 83       	st	Z, r24
    a730:	27 c0       	rjmp	.+78     	; 0xa780 <pick_drop+0x468e>
    a732:	ce 01       	movw	r24, r28
    a734:	87 5a       	subi	r24, 0xA7	; 167
    a736:	9d 4f       	sbci	r25, 0xFD	; 253
    a738:	20 e7       	ldi	r18, 0x70	; 112
    a73a:	31 e0       	ldi	r19, 0x01	; 1
    a73c:	fc 01       	movw	r30, r24
    a73e:	31 83       	std	Z+1, r19	; 0x01
    a740:	20 83       	st	Z, r18
    a742:	ce 01       	movw	r24, r28
    a744:	87 5a       	subi	r24, 0xA7	; 167
    a746:	9d 4f       	sbci	r25, 0xFD	; 253
    a748:	fc 01       	movw	r30, r24
    a74a:	80 81       	ld	r24, Z
    a74c:	91 81       	ldd	r25, Z+1	; 0x01
    a74e:	8c 01       	movw	r16, r24
    a750:	c8 01       	movw	r24, r16
    a752:	01 97       	sbiw	r24, 0x01	; 1
    a754:	f1 f7       	brne	.-4      	; 0xa752 <pick_drop+0x4660>
    a756:	8c 01       	movw	r16, r24
    a758:	ce 01       	movw	r24, r28
    a75a:	87 5a       	subi	r24, 0xA7	; 167
    a75c:	9d 4f       	sbci	r25, 0xFD	; 253
    a75e:	fc 01       	movw	r30, r24
    a760:	11 83       	std	Z+1, r17	; 0x01
    a762:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a764:	ce 01       	movw	r24, r28
    a766:	89 5a       	subi	r24, 0xA9	; 169
    a768:	9d 4f       	sbci	r25, 0xFD	; 253
    a76a:	9e 01       	movw	r18, r28
    a76c:	29 5a       	subi	r18, 0xA9	; 169
    a76e:	3d 4f       	sbci	r19, 0xFD	; 253
    a770:	f9 01       	movw	r30, r18
    a772:	20 81       	ld	r18, Z
    a774:	31 81       	ldd	r19, Z+1	; 0x01
    a776:	21 50       	subi	r18, 0x01	; 1
    a778:	30 40       	sbci	r19, 0x00	; 0
    a77a:	fc 01       	movw	r30, r24
    a77c:	31 83       	std	Z+1, r19	; 0x01
    a77e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a780:	ce 01       	movw	r24, r28
    a782:	89 5a       	subi	r24, 0xA9	; 169
    a784:	9d 4f       	sbci	r25, 0xFD	; 253
    a786:	fc 01       	movw	r30, r24
    a788:	80 81       	ld	r24, Z
    a78a:	91 81       	ldd	r25, Z+1	; 0x01
    a78c:	00 97       	sbiw	r24, 0x00	; 0
    a78e:	89 f6       	brne	.-94     	; 0xa732 <pick_drop+0x4640>
    a790:	2f c0       	rjmp	.+94     	; 0xa7f0 <pick_drop+0x46fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a792:	8e 01       	movw	r16, r28
    a794:	09 5a       	subi	r16, 0xA9	; 169
    a796:	1d 4f       	sbci	r17, 0xFD	; 253
    a798:	ce 01       	movw	r24, r28
    a79a:	8d 5a       	subi	r24, 0xAD	; 173
    a79c:	9d 4f       	sbci	r25, 0xFD	; 253
    a79e:	fc 01       	movw	r30, r24
    a7a0:	60 81       	ld	r22, Z
    a7a2:	71 81       	ldd	r23, Z+1	; 0x01
    a7a4:	82 81       	ldd	r24, Z+2	; 0x02
    a7a6:	93 81       	ldd	r25, Z+3	; 0x03
    a7a8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a7ac:	dc 01       	movw	r26, r24
    a7ae:	cb 01       	movw	r24, r22
    a7b0:	f8 01       	movw	r30, r16
    a7b2:	91 83       	std	Z+1, r25	; 0x01
    a7b4:	80 83       	st	Z, r24
    a7b6:	ce 01       	movw	r24, r28
    a7b8:	85 5a       	subi	r24, 0xA5	; 165
    a7ba:	9d 4f       	sbci	r25, 0xFD	; 253
    a7bc:	9e 01       	movw	r18, r28
    a7be:	29 5a       	subi	r18, 0xA9	; 169
    a7c0:	3d 4f       	sbci	r19, 0xFD	; 253
    a7c2:	f9 01       	movw	r30, r18
    a7c4:	20 81       	ld	r18, Z
    a7c6:	31 81       	ldd	r19, Z+1	; 0x01
    a7c8:	fc 01       	movw	r30, r24
    a7ca:	31 83       	std	Z+1, r19	; 0x01
    a7cc:	20 83       	st	Z, r18
    a7ce:	ce 01       	movw	r24, r28
    a7d0:	85 5a       	subi	r24, 0xA5	; 165
    a7d2:	9d 4f       	sbci	r25, 0xFD	; 253
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	80 81       	ld	r24, Z
    a7d8:	91 81       	ldd	r25, Z+1	; 0x01
    a7da:	8c 01       	movw	r16, r24
    a7dc:	c8 01       	movw	r24, r16
    a7de:	01 97       	sbiw	r24, 0x01	; 1
    a7e0:	f1 f7       	brne	.-4      	; 0xa7de <pick_drop+0x46ec>
    a7e2:	8c 01       	movw	r16, r24
    a7e4:	ce 01       	movw	r24, r28
    a7e6:	85 5a       	subi	r24, 0xA5	; 165
    a7e8:	9d 4f       	sbci	r25, 0xFD	; 253
    a7ea:	fc 01       	movw	r30, r24
    a7ec:	11 83       	std	Z+1, r17	; 0x01
    a7ee:	00 83       	st	Z, r16
		_delay_ms(20);
		back_mm(20);
    a7f0:	84 e1       	ldi	r24, 0x14	; 20
    a7f2:	90 e0       	ldi	r25, 0x00	; 0
    a7f4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    a7f8:	9e 01       	movw	r18, r28
    a7fa:	23 5a       	subi	r18, 0xA3	; 163
    a7fc:	3d 4f       	sbci	r19, 0xFD	; 253
    a7fe:	80 e0       	ldi	r24, 0x00	; 0
    a800:	90 e0       	ldi	r25, 0x00	; 0
    a802:	a0 ea       	ldi	r26, 0xA0	; 160
    a804:	b1 e4       	ldi	r27, 0x41	; 65
    a806:	f9 01       	movw	r30, r18
    a808:	80 83       	st	Z, r24
    a80a:	91 83       	std	Z+1, r25	; 0x01
    a80c:	a2 83       	std	Z+2, r26	; 0x02
    a80e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a810:	8e 01       	movw	r16, r28
    a812:	0f 59       	subi	r16, 0x9F	; 159
    a814:	1d 4f       	sbci	r17, 0xFD	; 253
    a816:	ce 01       	movw	r24, r28
    a818:	83 5a       	subi	r24, 0xA3	; 163
    a81a:	9d 4f       	sbci	r25, 0xFD	; 253
    a81c:	fc 01       	movw	r30, r24
    a81e:	60 81       	ld	r22, Z
    a820:	71 81       	ldd	r23, Z+1	; 0x01
    a822:	82 81       	ldd	r24, Z+2	; 0x02
    a824:	93 81       	ldd	r25, Z+3	; 0x03
    a826:	26 e6       	ldi	r18, 0x66	; 102
    a828:	36 e6       	ldi	r19, 0x66	; 102
    a82a:	46 e6       	ldi	r20, 0x66	; 102
    a82c:	55 e4       	ldi	r21, 0x45	; 69
    a82e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a832:	dc 01       	movw	r26, r24
    a834:	cb 01       	movw	r24, r22
    a836:	f8 01       	movw	r30, r16
    a838:	80 83       	st	Z, r24
    a83a:	91 83       	std	Z+1, r25	; 0x01
    a83c:	a2 83       	std	Z+2, r26	; 0x02
    a83e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a840:	ce 01       	movw	r24, r28
    a842:	8f 59       	subi	r24, 0x9F	; 159
    a844:	9d 4f       	sbci	r25, 0xFD	; 253
    a846:	11 e0       	ldi	r17, 0x01	; 1
    a848:	fc 01       	movw	r30, r24
    a84a:	60 81       	ld	r22, Z
    a84c:	71 81       	ldd	r23, Z+1	; 0x01
    a84e:	82 81       	ldd	r24, Z+2	; 0x02
    a850:	93 81       	ldd	r25, Z+3	; 0x03
    a852:	20 e0       	ldi	r18, 0x00	; 0
    a854:	30 e0       	ldi	r19, 0x00	; 0
    a856:	40 e8       	ldi	r20, 0x80	; 128
    a858:	5f e3       	ldi	r21, 0x3F	; 63
    a85a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    a85e:	88 23       	and	r24, r24
    a860:	0c f0       	brlt	.+2      	; 0xa864 <pick_drop+0x4772>
    a862:	10 e0       	ldi	r17, 0x00	; 0
    a864:	11 23       	and	r17, r17
    a866:	49 f0       	breq	.+18     	; 0xa87a <pick_drop+0x4788>
		__ticks = 1;
    a868:	ce 01       	movw	r24, r28
    a86a:	8b 59       	subi	r24, 0x9B	; 155
    a86c:	9d 4f       	sbci	r25, 0xFD	; 253
    a86e:	21 e0       	ldi	r18, 0x01	; 1
    a870:	30 e0       	ldi	r19, 0x00	; 0
    a872:	fc 01       	movw	r30, r24
    a874:	31 83       	std	Z+1, r19	; 0x01
    a876:	20 83       	st	Z, r18
    a878:	74 c0       	rjmp	.+232    	; 0xa962 <pick_drop+0x4870>
	else if (__tmp > 65535)
    a87a:	ce 01       	movw	r24, r28
    a87c:	8f 59       	subi	r24, 0x9F	; 159
    a87e:	9d 4f       	sbci	r25, 0xFD	; 253
    a880:	11 e0       	ldi	r17, 0x01	; 1
    a882:	fc 01       	movw	r30, r24
    a884:	60 81       	ld	r22, Z
    a886:	71 81       	ldd	r23, Z+1	; 0x01
    a888:	82 81       	ldd	r24, Z+2	; 0x02
    a88a:	93 81       	ldd	r25, Z+3	; 0x03
    a88c:	20 e0       	ldi	r18, 0x00	; 0
    a88e:	3f ef       	ldi	r19, 0xFF	; 255
    a890:	4f e7       	ldi	r20, 0x7F	; 127
    a892:	57 e4       	ldi	r21, 0x47	; 71
    a894:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    a898:	18 16       	cp	r1, r24
    a89a:	0c f0       	brlt	.+2      	; 0xa89e <pick_drop+0x47ac>
    a89c:	10 e0       	ldi	r17, 0x00	; 0
    a89e:	11 23       	and	r17, r17
    a8a0:	09 f4       	brne	.+2      	; 0xa8a4 <pick_drop+0x47b2>
    a8a2:	4d c0       	rjmp	.+154    	; 0xa93e <pick_drop+0x484c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a8a4:	ce 01       	movw	r24, r28
    a8a6:	83 5a       	subi	r24, 0xA3	; 163
    a8a8:	9d 4f       	sbci	r25, 0xFD	; 253
    a8aa:	fc 01       	movw	r30, r24
    a8ac:	60 81       	ld	r22, Z
    a8ae:	71 81       	ldd	r23, Z+1	; 0x01
    a8b0:	82 81       	ldd	r24, Z+2	; 0x02
    a8b2:	93 81       	ldd	r25, Z+3	; 0x03
    a8b4:	20 e0       	ldi	r18, 0x00	; 0
    a8b6:	30 e0       	ldi	r19, 0x00	; 0
    a8b8:	40 e2       	ldi	r20, 0x20	; 32
    a8ba:	51 e4       	ldi	r21, 0x41	; 65
    a8bc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a8c0:	dc 01       	movw	r26, r24
    a8c2:	cb 01       	movw	r24, r22
    a8c4:	8e 01       	movw	r16, r28
    a8c6:	0b 59       	subi	r16, 0x9B	; 155
    a8c8:	1d 4f       	sbci	r17, 0xFD	; 253
    a8ca:	bc 01       	movw	r22, r24
    a8cc:	cd 01       	movw	r24, r26
    a8ce:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a8d2:	dc 01       	movw	r26, r24
    a8d4:	cb 01       	movw	r24, r22
    a8d6:	f8 01       	movw	r30, r16
    a8d8:	91 83       	std	Z+1, r25	; 0x01
    a8da:	80 83       	st	Z, r24
    a8dc:	27 c0       	rjmp	.+78     	; 0xa92c <pick_drop+0x483a>
    a8de:	ce 01       	movw	r24, r28
    a8e0:	89 59       	subi	r24, 0x99	; 153
    a8e2:	9d 4f       	sbci	r25, 0xFD	; 253
    a8e4:	20 e7       	ldi	r18, 0x70	; 112
    a8e6:	31 e0       	ldi	r19, 0x01	; 1
    a8e8:	fc 01       	movw	r30, r24
    a8ea:	31 83       	std	Z+1, r19	; 0x01
    a8ec:	20 83       	st	Z, r18
    a8ee:	ce 01       	movw	r24, r28
    a8f0:	89 59       	subi	r24, 0x99	; 153
    a8f2:	9d 4f       	sbci	r25, 0xFD	; 253
    a8f4:	fc 01       	movw	r30, r24
    a8f6:	80 81       	ld	r24, Z
    a8f8:	91 81       	ldd	r25, Z+1	; 0x01
    a8fa:	8c 01       	movw	r16, r24
    a8fc:	c8 01       	movw	r24, r16
    a8fe:	01 97       	sbiw	r24, 0x01	; 1
    a900:	f1 f7       	brne	.-4      	; 0xa8fe <pick_drop+0x480c>
    a902:	8c 01       	movw	r16, r24
    a904:	ce 01       	movw	r24, r28
    a906:	89 59       	subi	r24, 0x99	; 153
    a908:	9d 4f       	sbci	r25, 0xFD	; 253
    a90a:	fc 01       	movw	r30, r24
    a90c:	11 83       	std	Z+1, r17	; 0x01
    a90e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a910:	ce 01       	movw	r24, r28
    a912:	8b 59       	subi	r24, 0x9B	; 155
    a914:	9d 4f       	sbci	r25, 0xFD	; 253
    a916:	9e 01       	movw	r18, r28
    a918:	2b 59       	subi	r18, 0x9B	; 155
    a91a:	3d 4f       	sbci	r19, 0xFD	; 253
    a91c:	f9 01       	movw	r30, r18
    a91e:	20 81       	ld	r18, Z
    a920:	31 81       	ldd	r19, Z+1	; 0x01
    a922:	21 50       	subi	r18, 0x01	; 1
    a924:	30 40       	sbci	r19, 0x00	; 0
    a926:	fc 01       	movw	r30, r24
    a928:	31 83       	std	Z+1, r19	; 0x01
    a92a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a92c:	ce 01       	movw	r24, r28
    a92e:	8b 59       	subi	r24, 0x9B	; 155
    a930:	9d 4f       	sbci	r25, 0xFD	; 253
    a932:	fc 01       	movw	r30, r24
    a934:	80 81       	ld	r24, Z
    a936:	91 81       	ldd	r25, Z+1	; 0x01
    a938:	00 97       	sbiw	r24, 0x00	; 0
    a93a:	89 f6       	brne	.-94     	; 0xa8de <pick_drop+0x47ec>
    a93c:	2f c0       	rjmp	.+94     	; 0xa99c <pick_drop+0x48aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a93e:	8e 01       	movw	r16, r28
    a940:	0b 59       	subi	r16, 0x9B	; 155
    a942:	1d 4f       	sbci	r17, 0xFD	; 253
    a944:	ce 01       	movw	r24, r28
    a946:	8f 59       	subi	r24, 0x9F	; 159
    a948:	9d 4f       	sbci	r25, 0xFD	; 253
    a94a:	fc 01       	movw	r30, r24
    a94c:	60 81       	ld	r22, Z
    a94e:	71 81       	ldd	r23, Z+1	; 0x01
    a950:	82 81       	ldd	r24, Z+2	; 0x02
    a952:	93 81       	ldd	r25, Z+3	; 0x03
    a954:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    a958:	dc 01       	movw	r26, r24
    a95a:	cb 01       	movw	r24, r22
    a95c:	f8 01       	movw	r30, r16
    a95e:	91 83       	std	Z+1, r25	; 0x01
    a960:	80 83       	st	Z, r24
    a962:	ce 01       	movw	r24, r28
    a964:	87 59       	subi	r24, 0x97	; 151
    a966:	9d 4f       	sbci	r25, 0xFD	; 253
    a968:	9e 01       	movw	r18, r28
    a96a:	2b 59       	subi	r18, 0x9B	; 155
    a96c:	3d 4f       	sbci	r19, 0xFD	; 253
    a96e:	f9 01       	movw	r30, r18
    a970:	20 81       	ld	r18, Z
    a972:	31 81       	ldd	r19, Z+1	; 0x01
    a974:	fc 01       	movw	r30, r24
    a976:	31 83       	std	Z+1, r19	; 0x01
    a978:	20 83       	st	Z, r18
    a97a:	ce 01       	movw	r24, r28
    a97c:	87 59       	subi	r24, 0x97	; 151
    a97e:	9d 4f       	sbci	r25, 0xFD	; 253
    a980:	fc 01       	movw	r30, r24
    a982:	80 81       	ld	r24, Z
    a984:	91 81       	ldd	r25, Z+1	; 0x01
    a986:	8c 01       	movw	r16, r24
    a988:	c8 01       	movw	r24, r16
    a98a:	01 97       	sbiw	r24, 0x01	; 1
    a98c:	f1 f7       	brne	.-4      	; 0xa98a <pick_drop+0x4898>
    a98e:	8c 01       	movw	r16, r24
    a990:	ce 01       	movw	r24, r28
    a992:	87 59       	subi	r24, 0x97	; 151
    a994:	9d 4f       	sbci	r25, 0xFD	; 253
    a996:	fc 01       	movw	r30, r24
    a998:	11 83       	std	Z+1, r17	; 0x01
    a99a:	00 83       	st	Z, r16
		_delay_ms(20);
		front();
    a99c:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
		forward_mm(30);
    a9a0:	8e e1       	ldi	r24, 0x1E	; 30
    a9a2:	90 e0       	ldi	r25, 0x00	; 0
    a9a4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    a9a8:	9e 01       	movw	r18, r28
    a9aa:	25 59       	subi	r18, 0x95	; 149
    a9ac:	3d 4f       	sbci	r19, 0xFD	; 253
    a9ae:	80 e0       	ldi	r24, 0x00	; 0
    a9b0:	90 e0       	ldi	r25, 0x00	; 0
    a9b2:	a0 ea       	ldi	r26, 0xA0	; 160
    a9b4:	b1 e4       	ldi	r27, 0x41	; 65
    a9b6:	f9 01       	movw	r30, r18
    a9b8:	80 83       	st	Z, r24
    a9ba:	91 83       	std	Z+1, r25	; 0x01
    a9bc:	a2 83       	std	Z+2, r26	; 0x02
    a9be:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    a9c0:	8e 01       	movw	r16, r28
    a9c2:	01 59       	subi	r16, 0x91	; 145
    a9c4:	1d 4f       	sbci	r17, 0xFD	; 253
    a9c6:	ce 01       	movw	r24, r28
    a9c8:	85 59       	subi	r24, 0x95	; 149
    a9ca:	9d 4f       	sbci	r25, 0xFD	; 253
    a9cc:	fc 01       	movw	r30, r24
    a9ce:	60 81       	ld	r22, Z
    a9d0:	71 81       	ldd	r23, Z+1	; 0x01
    a9d2:	82 81       	ldd	r24, Z+2	; 0x02
    a9d4:	93 81       	ldd	r25, Z+3	; 0x03
    a9d6:	26 e6       	ldi	r18, 0x66	; 102
    a9d8:	36 e6       	ldi	r19, 0x66	; 102
    a9da:	46 e6       	ldi	r20, 0x66	; 102
    a9dc:	55 e4       	ldi	r21, 0x45	; 69
    a9de:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    a9e2:	dc 01       	movw	r26, r24
    a9e4:	cb 01       	movw	r24, r22
    a9e6:	f8 01       	movw	r30, r16
    a9e8:	80 83       	st	Z, r24
    a9ea:	91 83       	std	Z+1, r25	; 0x01
    a9ec:	a2 83       	std	Z+2, r26	; 0x02
    a9ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a9f0:	ce 01       	movw	r24, r28
    a9f2:	81 59       	subi	r24, 0x91	; 145
    a9f4:	9d 4f       	sbci	r25, 0xFD	; 253
    a9f6:	11 e0       	ldi	r17, 0x01	; 1
    a9f8:	fc 01       	movw	r30, r24
    a9fa:	60 81       	ld	r22, Z
    a9fc:	71 81       	ldd	r23, Z+1	; 0x01
    a9fe:	82 81       	ldd	r24, Z+2	; 0x02
    aa00:	93 81       	ldd	r25, Z+3	; 0x03
    aa02:	20 e0       	ldi	r18, 0x00	; 0
    aa04:	30 e0       	ldi	r19, 0x00	; 0
    aa06:	40 e8       	ldi	r20, 0x80	; 128
    aa08:	5f e3       	ldi	r21, 0x3F	; 63
    aa0a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    aa0e:	88 23       	and	r24, r24
    aa10:	0c f0       	brlt	.+2      	; 0xaa14 <pick_drop+0x4922>
    aa12:	10 e0       	ldi	r17, 0x00	; 0
    aa14:	11 23       	and	r17, r17
    aa16:	49 f0       	breq	.+18     	; 0xaa2a <pick_drop+0x4938>
		__ticks = 1;
    aa18:	ce 01       	movw	r24, r28
    aa1a:	8d 58       	subi	r24, 0x8D	; 141
    aa1c:	9d 4f       	sbci	r25, 0xFD	; 253
    aa1e:	21 e0       	ldi	r18, 0x01	; 1
    aa20:	30 e0       	ldi	r19, 0x00	; 0
    aa22:	fc 01       	movw	r30, r24
    aa24:	31 83       	std	Z+1, r19	; 0x01
    aa26:	20 83       	st	Z, r18
    aa28:	74 c0       	rjmp	.+232    	; 0xab12 <pick_drop+0x4a20>
	else if (__tmp > 65535)
    aa2a:	ce 01       	movw	r24, r28
    aa2c:	81 59       	subi	r24, 0x91	; 145
    aa2e:	9d 4f       	sbci	r25, 0xFD	; 253
    aa30:	11 e0       	ldi	r17, 0x01	; 1
    aa32:	fc 01       	movw	r30, r24
    aa34:	60 81       	ld	r22, Z
    aa36:	71 81       	ldd	r23, Z+1	; 0x01
    aa38:	82 81       	ldd	r24, Z+2	; 0x02
    aa3a:	93 81       	ldd	r25, Z+3	; 0x03
    aa3c:	20 e0       	ldi	r18, 0x00	; 0
    aa3e:	3f ef       	ldi	r19, 0xFF	; 255
    aa40:	4f e7       	ldi	r20, 0x7F	; 127
    aa42:	57 e4       	ldi	r21, 0x47	; 71
    aa44:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    aa48:	18 16       	cp	r1, r24
    aa4a:	0c f0       	brlt	.+2      	; 0xaa4e <pick_drop+0x495c>
    aa4c:	10 e0       	ldi	r17, 0x00	; 0
    aa4e:	11 23       	and	r17, r17
    aa50:	09 f4       	brne	.+2      	; 0xaa54 <pick_drop+0x4962>
    aa52:	4d c0       	rjmp	.+154    	; 0xaaee <pick_drop+0x49fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aa54:	ce 01       	movw	r24, r28
    aa56:	85 59       	subi	r24, 0x95	; 149
    aa58:	9d 4f       	sbci	r25, 0xFD	; 253
    aa5a:	fc 01       	movw	r30, r24
    aa5c:	60 81       	ld	r22, Z
    aa5e:	71 81       	ldd	r23, Z+1	; 0x01
    aa60:	82 81       	ldd	r24, Z+2	; 0x02
    aa62:	93 81       	ldd	r25, Z+3	; 0x03
    aa64:	20 e0       	ldi	r18, 0x00	; 0
    aa66:	30 e0       	ldi	r19, 0x00	; 0
    aa68:	40 e2       	ldi	r20, 0x20	; 32
    aa6a:	51 e4       	ldi	r21, 0x41	; 65
    aa6c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    aa70:	dc 01       	movw	r26, r24
    aa72:	cb 01       	movw	r24, r22
    aa74:	8e 01       	movw	r16, r28
    aa76:	0d 58       	subi	r16, 0x8D	; 141
    aa78:	1d 4f       	sbci	r17, 0xFD	; 253
    aa7a:	bc 01       	movw	r22, r24
    aa7c:	cd 01       	movw	r24, r26
    aa7e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    aa82:	dc 01       	movw	r26, r24
    aa84:	cb 01       	movw	r24, r22
    aa86:	f8 01       	movw	r30, r16
    aa88:	91 83       	std	Z+1, r25	; 0x01
    aa8a:	80 83       	st	Z, r24
    aa8c:	27 c0       	rjmp	.+78     	; 0xaadc <pick_drop+0x49ea>
    aa8e:	ce 01       	movw	r24, r28
    aa90:	8b 58       	subi	r24, 0x8B	; 139
    aa92:	9d 4f       	sbci	r25, 0xFD	; 253
    aa94:	20 e7       	ldi	r18, 0x70	; 112
    aa96:	31 e0       	ldi	r19, 0x01	; 1
    aa98:	fc 01       	movw	r30, r24
    aa9a:	31 83       	std	Z+1, r19	; 0x01
    aa9c:	20 83       	st	Z, r18
    aa9e:	ce 01       	movw	r24, r28
    aaa0:	8b 58       	subi	r24, 0x8B	; 139
    aaa2:	9d 4f       	sbci	r25, 0xFD	; 253
    aaa4:	fc 01       	movw	r30, r24
    aaa6:	80 81       	ld	r24, Z
    aaa8:	91 81       	ldd	r25, Z+1	; 0x01
    aaaa:	8c 01       	movw	r16, r24
    aaac:	c8 01       	movw	r24, r16
    aaae:	01 97       	sbiw	r24, 0x01	; 1
    aab0:	f1 f7       	brne	.-4      	; 0xaaae <pick_drop+0x49bc>
    aab2:	8c 01       	movw	r16, r24
    aab4:	ce 01       	movw	r24, r28
    aab6:	8b 58       	subi	r24, 0x8B	; 139
    aab8:	9d 4f       	sbci	r25, 0xFD	; 253
    aaba:	fc 01       	movw	r30, r24
    aabc:	11 83       	std	Z+1, r17	; 0x01
    aabe:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aac0:	ce 01       	movw	r24, r28
    aac2:	8d 58       	subi	r24, 0x8D	; 141
    aac4:	9d 4f       	sbci	r25, 0xFD	; 253
    aac6:	9e 01       	movw	r18, r28
    aac8:	2d 58       	subi	r18, 0x8D	; 141
    aaca:	3d 4f       	sbci	r19, 0xFD	; 253
    aacc:	f9 01       	movw	r30, r18
    aace:	20 81       	ld	r18, Z
    aad0:	31 81       	ldd	r19, Z+1	; 0x01
    aad2:	21 50       	subi	r18, 0x01	; 1
    aad4:	30 40       	sbci	r19, 0x00	; 0
    aad6:	fc 01       	movw	r30, r24
    aad8:	31 83       	std	Z+1, r19	; 0x01
    aada:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aadc:	ce 01       	movw	r24, r28
    aade:	8d 58       	subi	r24, 0x8D	; 141
    aae0:	9d 4f       	sbci	r25, 0xFD	; 253
    aae2:	fc 01       	movw	r30, r24
    aae4:	80 81       	ld	r24, Z
    aae6:	91 81       	ldd	r25, Z+1	; 0x01
    aae8:	00 97       	sbiw	r24, 0x00	; 0
    aaea:	89 f6       	brne	.-94     	; 0xaa8e <pick_drop+0x499c>
    aaec:	2f c0       	rjmp	.+94     	; 0xab4c <pick_drop+0x4a5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aaee:	8e 01       	movw	r16, r28
    aaf0:	0d 58       	subi	r16, 0x8D	; 141
    aaf2:	1d 4f       	sbci	r17, 0xFD	; 253
    aaf4:	ce 01       	movw	r24, r28
    aaf6:	81 59       	subi	r24, 0x91	; 145
    aaf8:	9d 4f       	sbci	r25, 0xFD	; 253
    aafa:	fc 01       	movw	r30, r24
    aafc:	60 81       	ld	r22, Z
    aafe:	71 81       	ldd	r23, Z+1	; 0x01
    ab00:	82 81       	ldd	r24, Z+2	; 0x02
    ab02:	93 81       	ldd	r25, Z+3	; 0x03
    ab04:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ab08:	dc 01       	movw	r26, r24
    ab0a:	cb 01       	movw	r24, r22
    ab0c:	f8 01       	movw	r30, r16
    ab0e:	91 83       	std	Z+1, r25	; 0x01
    ab10:	80 83       	st	Z, r24
    ab12:	ce 01       	movw	r24, r28
    ab14:	89 58       	subi	r24, 0x89	; 137
    ab16:	9d 4f       	sbci	r25, 0xFD	; 253
    ab18:	9e 01       	movw	r18, r28
    ab1a:	2d 58       	subi	r18, 0x8D	; 141
    ab1c:	3d 4f       	sbci	r19, 0xFD	; 253
    ab1e:	f9 01       	movw	r30, r18
    ab20:	20 81       	ld	r18, Z
    ab22:	31 81       	ldd	r19, Z+1	; 0x01
    ab24:	fc 01       	movw	r30, r24
    ab26:	31 83       	std	Z+1, r19	; 0x01
    ab28:	20 83       	st	Z, r18
    ab2a:	ce 01       	movw	r24, r28
    ab2c:	89 58       	subi	r24, 0x89	; 137
    ab2e:	9d 4f       	sbci	r25, 0xFD	; 253
    ab30:	fc 01       	movw	r30, r24
    ab32:	80 81       	ld	r24, Z
    ab34:	91 81       	ldd	r25, Z+1	; 0x01
    ab36:	8c 01       	movw	r16, r24
    ab38:	c8 01       	movw	r24, r16
    ab3a:	01 97       	sbiw	r24, 0x01	; 1
    ab3c:	f1 f7       	brne	.-4      	; 0xab3a <pick_drop+0x4a48>
    ab3e:	8c 01       	movw	r16, r24
    ab40:	ce 01       	movw	r24, r28
    ab42:	89 58       	subi	r24, 0x89	; 137
    ab44:	9d 4f       	sbci	r25, 0xFD	; 253
    ab46:	fc 01       	movw	r30, r24
    ab48:	11 83       	std	Z+1, r17	; 0x01
    ab4a:	00 83       	st	Z, r16
		_delay_ms(20);
		spl_right();
    ab4c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
    ab50:	9e 01       	movw	r18, r28
    ab52:	27 58       	subi	r18, 0x87	; 135
    ab54:	3d 4f       	sbci	r19, 0xFD	; 253
    ab56:	80 e0       	ldi	r24, 0x00	; 0
    ab58:	90 e0       	ldi	r25, 0x00	; 0
    ab5a:	a0 ea       	ldi	r26, 0xA0	; 160
    ab5c:	b1 e4       	ldi	r27, 0x41	; 65
    ab5e:	f9 01       	movw	r30, r18
    ab60:	80 83       	st	Z, r24
    ab62:	91 83       	std	Z+1, r25	; 0x01
    ab64:	a2 83       	std	Z+2, r26	; 0x02
    ab66:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ab68:	8e 01       	movw	r16, r28
    ab6a:	03 58       	subi	r16, 0x83	; 131
    ab6c:	1d 4f       	sbci	r17, 0xFD	; 253
    ab6e:	ce 01       	movw	r24, r28
    ab70:	87 58       	subi	r24, 0x87	; 135
    ab72:	9d 4f       	sbci	r25, 0xFD	; 253
    ab74:	fc 01       	movw	r30, r24
    ab76:	60 81       	ld	r22, Z
    ab78:	71 81       	ldd	r23, Z+1	; 0x01
    ab7a:	82 81       	ldd	r24, Z+2	; 0x02
    ab7c:	93 81       	ldd	r25, Z+3	; 0x03
    ab7e:	26 e6       	ldi	r18, 0x66	; 102
    ab80:	36 e6       	ldi	r19, 0x66	; 102
    ab82:	46 e6       	ldi	r20, 0x66	; 102
    ab84:	55 e4       	ldi	r21, 0x45	; 69
    ab86:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ab8a:	dc 01       	movw	r26, r24
    ab8c:	cb 01       	movw	r24, r22
    ab8e:	f8 01       	movw	r30, r16
    ab90:	80 83       	st	Z, r24
    ab92:	91 83       	std	Z+1, r25	; 0x01
    ab94:	a2 83       	std	Z+2, r26	; 0x02
    ab96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ab98:	ce 01       	movw	r24, r28
    ab9a:	83 58       	subi	r24, 0x83	; 131
    ab9c:	9d 4f       	sbci	r25, 0xFD	; 253
    ab9e:	11 e0       	ldi	r17, 0x01	; 1
    aba0:	fc 01       	movw	r30, r24
    aba2:	60 81       	ld	r22, Z
    aba4:	71 81       	ldd	r23, Z+1	; 0x01
    aba6:	82 81       	ldd	r24, Z+2	; 0x02
    aba8:	93 81       	ldd	r25, Z+3	; 0x03
    abaa:	20 e0       	ldi	r18, 0x00	; 0
    abac:	30 e0       	ldi	r19, 0x00	; 0
    abae:	40 e8       	ldi	r20, 0x80	; 128
    abb0:	5f e3       	ldi	r21, 0x3F	; 63
    abb2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    abb6:	88 23       	and	r24, r24
    abb8:	0c f0       	brlt	.+2      	; 0xabbc <pick_drop+0x4aca>
    abba:	10 e0       	ldi	r17, 0x00	; 0
    abbc:	11 23       	and	r17, r17
    abbe:	49 f0       	breq	.+18     	; 0xabd2 <pick_drop+0x4ae0>
		__ticks = 1;
    abc0:	ce 01       	movw	r24, r28
    abc2:	8f 57       	subi	r24, 0x7F	; 127
    abc4:	9d 4f       	sbci	r25, 0xFD	; 253
    abc6:	21 e0       	ldi	r18, 0x01	; 1
    abc8:	30 e0       	ldi	r19, 0x00	; 0
    abca:	fc 01       	movw	r30, r24
    abcc:	31 83       	std	Z+1, r19	; 0x01
    abce:	20 83       	st	Z, r18
    abd0:	74 c0       	rjmp	.+232    	; 0xacba <pick_drop+0x4bc8>
	else if (__tmp > 65535)
    abd2:	ce 01       	movw	r24, r28
    abd4:	83 58       	subi	r24, 0x83	; 131
    abd6:	9d 4f       	sbci	r25, 0xFD	; 253
    abd8:	11 e0       	ldi	r17, 0x01	; 1
    abda:	fc 01       	movw	r30, r24
    abdc:	60 81       	ld	r22, Z
    abde:	71 81       	ldd	r23, Z+1	; 0x01
    abe0:	82 81       	ldd	r24, Z+2	; 0x02
    abe2:	93 81       	ldd	r25, Z+3	; 0x03
    abe4:	20 e0       	ldi	r18, 0x00	; 0
    abe6:	3f ef       	ldi	r19, 0xFF	; 255
    abe8:	4f e7       	ldi	r20, 0x7F	; 127
    abea:	57 e4       	ldi	r21, 0x47	; 71
    abec:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    abf0:	18 16       	cp	r1, r24
    abf2:	0c f0       	brlt	.+2      	; 0xabf6 <pick_drop+0x4b04>
    abf4:	10 e0       	ldi	r17, 0x00	; 0
    abf6:	11 23       	and	r17, r17
    abf8:	09 f4       	brne	.+2      	; 0xabfc <pick_drop+0x4b0a>
    abfa:	4d c0       	rjmp	.+154    	; 0xac96 <pick_drop+0x4ba4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    abfc:	ce 01       	movw	r24, r28
    abfe:	87 58       	subi	r24, 0x87	; 135
    ac00:	9d 4f       	sbci	r25, 0xFD	; 253
    ac02:	fc 01       	movw	r30, r24
    ac04:	60 81       	ld	r22, Z
    ac06:	71 81       	ldd	r23, Z+1	; 0x01
    ac08:	82 81       	ldd	r24, Z+2	; 0x02
    ac0a:	93 81       	ldd	r25, Z+3	; 0x03
    ac0c:	20 e0       	ldi	r18, 0x00	; 0
    ac0e:	30 e0       	ldi	r19, 0x00	; 0
    ac10:	40 e2       	ldi	r20, 0x20	; 32
    ac12:	51 e4       	ldi	r21, 0x41	; 65
    ac14:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ac18:	dc 01       	movw	r26, r24
    ac1a:	cb 01       	movw	r24, r22
    ac1c:	8e 01       	movw	r16, r28
    ac1e:	0f 57       	subi	r16, 0x7F	; 127
    ac20:	1d 4f       	sbci	r17, 0xFD	; 253
    ac22:	bc 01       	movw	r22, r24
    ac24:	cd 01       	movw	r24, r26
    ac26:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ac2a:	dc 01       	movw	r26, r24
    ac2c:	cb 01       	movw	r24, r22
    ac2e:	f8 01       	movw	r30, r16
    ac30:	91 83       	std	Z+1, r25	; 0x01
    ac32:	80 83       	st	Z, r24
    ac34:	27 c0       	rjmp	.+78     	; 0xac84 <pick_drop+0x4b92>
    ac36:	ce 01       	movw	r24, r28
    ac38:	8d 57       	subi	r24, 0x7D	; 125
    ac3a:	9d 4f       	sbci	r25, 0xFD	; 253
    ac3c:	20 e7       	ldi	r18, 0x70	; 112
    ac3e:	31 e0       	ldi	r19, 0x01	; 1
    ac40:	fc 01       	movw	r30, r24
    ac42:	31 83       	std	Z+1, r19	; 0x01
    ac44:	20 83       	st	Z, r18
    ac46:	ce 01       	movw	r24, r28
    ac48:	8d 57       	subi	r24, 0x7D	; 125
    ac4a:	9d 4f       	sbci	r25, 0xFD	; 253
    ac4c:	fc 01       	movw	r30, r24
    ac4e:	80 81       	ld	r24, Z
    ac50:	91 81       	ldd	r25, Z+1	; 0x01
    ac52:	8c 01       	movw	r16, r24
    ac54:	c8 01       	movw	r24, r16
    ac56:	01 97       	sbiw	r24, 0x01	; 1
    ac58:	f1 f7       	brne	.-4      	; 0xac56 <pick_drop+0x4b64>
    ac5a:	8c 01       	movw	r16, r24
    ac5c:	ce 01       	movw	r24, r28
    ac5e:	8d 57       	subi	r24, 0x7D	; 125
    ac60:	9d 4f       	sbci	r25, 0xFD	; 253
    ac62:	fc 01       	movw	r30, r24
    ac64:	11 83       	std	Z+1, r17	; 0x01
    ac66:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac68:	ce 01       	movw	r24, r28
    ac6a:	8f 57       	subi	r24, 0x7F	; 127
    ac6c:	9d 4f       	sbci	r25, 0xFD	; 253
    ac6e:	9e 01       	movw	r18, r28
    ac70:	2f 57       	subi	r18, 0x7F	; 127
    ac72:	3d 4f       	sbci	r19, 0xFD	; 253
    ac74:	f9 01       	movw	r30, r18
    ac76:	20 81       	ld	r18, Z
    ac78:	31 81       	ldd	r19, Z+1	; 0x01
    ac7a:	21 50       	subi	r18, 0x01	; 1
    ac7c:	30 40       	sbci	r19, 0x00	; 0
    ac7e:	fc 01       	movw	r30, r24
    ac80:	31 83       	std	Z+1, r19	; 0x01
    ac82:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac84:	ce 01       	movw	r24, r28
    ac86:	8f 57       	subi	r24, 0x7F	; 127
    ac88:	9d 4f       	sbci	r25, 0xFD	; 253
    ac8a:	fc 01       	movw	r30, r24
    ac8c:	80 81       	ld	r24, Z
    ac8e:	91 81       	ldd	r25, Z+1	; 0x01
    ac90:	00 97       	sbiw	r24, 0x00	; 0
    ac92:	89 f6       	brne	.-94     	; 0xac36 <pick_drop+0x4b44>
    ac94:	2f c0       	rjmp	.+94     	; 0xacf4 <pick_drop+0x4c02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ac96:	8e 01       	movw	r16, r28
    ac98:	0f 57       	subi	r16, 0x7F	; 127
    ac9a:	1d 4f       	sbci	r17, 0xFD	; 253
    ac9c:	ce 01       	movw	r24, r28
    ac9e:	83 58       	subi	r24, 0x83	; 131
    aca0:	9d 4f       	sbci	r25, 0xFD	; 253
    aca2:	fc 01       	movw	r30, r24
    aca4:	60 81       	ld	r22, Z
    aca6:	71 81       	ldd	r23, Z+1	; 0x01
    aca8:	82 81       	ldd	r24, Z+2	; 0x02
    acaa:	93 81       	ldd	r25, Z+3	; 0x03
    acac:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    acb0:	dc 01       	movw	r26, r24
    acb2:	cb 01       	movw	r24, r22
    acb4:	f8 01       	movw	r30, r16
    acb6:	91 83       	std	Z+1, r25	; 0x01
    acb8:	80 83       	st	Z, r24
    acba:	ce 01       	movw	r24, r28
    acbc:	8b 57       	subi	r24, 0x7B	; 123
    acbe:	9d 4f       	sbci	r25, 0xFD	; 253
    acc0:	9e 01       	movw	r18, r28
    acc2:	2f 57       	subi	r18, 0x7F	; 127
    acc4:	3d 4f       	sbci	r19, 0xFD	; 253
    acc6:	f9 01       	movw	r30, r18
    acc8:	20 81       	ld	r18, Z
    acca:	31 81       	ldd	r19, Z+1	; 0x01
    accc:	fc 01       	movw	r30, r24
    acce:	31 83       	std	Z+1, r19	; 0x01
    acd0:	20 83       	st	Z, r18
    acd2:	ce 01       	movw	r24, r28
    acd4:	8b 57       	subi	r24, 0x7B	; 123
    acd6:	9d 4f       	sbci	r25, 0xFD	; 253
    acd8:	fc 01       	movw	r30, r24
    acda:	80 81       	ld	r24, Z
    acdc:	91 81       	ldd	r25, Z+1	; 0x01
    acde:	8c 01       	movw	r16, r24
    ace0:	c8 01       	movw	r24, r16
    ace2:	01 97       	sbiw	r24, 0x01	; 1
    ace4:	f1 f7       	brne	.-4      	; 0xace2 <pick_drop+0x4bf0>
    ace6:	8c 01       	movw	r16, r24
    ace8:	ce 01       	movw	r24, r28
    acea:	8b 57       	subi	r24, 0x7B	; 123
    acec:	9d 4f       	sbci	r25, 0xFD	; 253
    acee:	fc 01       	movw	r30, r24
    acf0:	11 83       	std	Z+1, r17	; 0x01
    acf2:	00 83       	st	Z, r16
		_delay_ms(20);
		back_mm(35);
    acf4:	83 e2       	ldi	r24, 0x23	; 35
    acf6:	90 e0       	ldi	r25, 0x00	; 0
    acf8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    acfc:	9e 01       	movw	r18, r28
    acfe:	29 57       	subi	r18, 0x79	; 121
    ad00:	3d 4f       	sbci	r19, 0xFD	; 253
    ad02:	80 e0       	ldi	r24, 0x00	; 0
    ad04:	90 e0       	ldi	r25, 0x00	; 0
    ad06:	a0 ea       	ldi	r26, 0xA0	; 160
    ad08:	b1 e4       	ldi	r27, 0x41	; 65
    ad0a:	f9 01       	movw	r30, r18
    ad0c:	80 83       	st	Z, r24
    ad0e:	91 83       	std	Z+1, r25	; 0x01
    ad10:	a2 83       	std	Z+2, r26	; 0x02
    ad12:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ad14:	8e 01       	movw	r16, r28
    ad16:	05 57       	subi	r16, 0x75	; 117
    ad18:	1d 4f       	sbci	r17, 0xFD	; 253
    ad1a:	ce 01       	movw	r24, r28
    ad1c:	89 57       	subi	r24, 0x79	; 121
    ad1e:	9d 4f       	sbci	r25, 0xFD	; 253
    ad20:	fc 01       	movw	r30, r24
    ad22:	60 81       	ld	r22, Z
    ad24:	71 81       	ldd	r23, Z+1	; 0x01
    ad26:	82 81       	ldd	r24, Z+2	; 0x02
    ad28:	93 81       	ldd	r25, Z+3	; 0x03
    ad2a:	26 e6       	ldi	r18, 0x66	; 102
    ad2c:	36 e6       	ldi	r19, 0x66	; 102
    ad2e:	46 e6       	ldi	r20, 0x66	; 102
    ad30:	55 e4       	ldi	r21, 0x45	; 69
    ad32:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ad36:	dc 01       	movw	r26, r24
    ad38:	cb 01       	movw	r24, r22
    ad3a:	f8 01       	movw	r30, r16
    ad3c:	80 83       	st	Z, r24
    ad3e:	91 83       	std	Z+1, r25	; 0x01
    ad40:	a2 83       	std	Z+2, r26	; 0x02
    ad42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ad44:	ce 01       	movw	r24, r28
    ad46:	85 57       	subi	r24, 0x75	; 117
    ad48:	9d 4f       	sbci	r25, 0xFD	; 253
    ad4a:	11 e0       	ldi	r17, 0x01	; 1
    ad4c:	fc 01       	movw	r30, r24
    ad4e:	60 81       	ld	r22, Z
    ad50:	71 81       	ldd	r23, Z+1	; 0x01
    ad52:	82 81       	ldd	r24, Z+2	; 0x02
    ad54:	93 81       	ldd	r25, Z+3	; 0x03
    ad56:	20 e0       	ldi	r18, 0x00	; 0
    ad58:	30 e0       	ldi	r19, 0x00	; 0
    ad5a:	40 e8       	ldi	r20, 0x80	; 128
    ad5c:	5f e3       	ldi	r21, 0x3F	; 63
    ad5e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    ad62:	88 23       	and	r24, r24
    ad64:	0c f0       	brlt	.+2      	; 0xad68 <pick_drop+0x4c76>
    ad66:	10 e0       	ldi	r17, 0x00	; 0
    ad68:	11 23       	and	r17, r17
    ad6a:	49 f0       	breq	.+18     	; 0xad7e <pick_drop+0x4c8c>
		__ticks = 1;
    ad6c:	ce 01       	movw	r24, r28
    ad6e:	81 57       	subi	r24, 0x71	; 113
    ad70:	9d 4f       	sbci	r25, 0xFD	; 253
    ad72:	21 e0       	ldi	r18, 0x01	; 1
    ad74:	30 e0       	ldi	r19, 0x00	; 0
    ad76:	fc 01       	movw	r30, r24
    ad78:	31 83       	std	Z+1, r19	; 0x01
    ad7a:	20 83       	st	Z, r18
    ad7c:	75 c0       	rjmp	.+234    	; 0xae68 <pick_drop+0x4d76>
	else if (__tmp > 65535)
    ad7e:	ce 01       	movw	r24, r28
    ad80:	85 57       	subi	r24, 0x75	; 117
    ad82:	9d 4f       	sbci	r25, 0xFD	; 253
    ad84:	11 e0       	ldi	r17, 0x01	; 1
    ad86:	fc 01       	movw	r30, r24
    ad88:	60 81       	ld	r22, Z
    ad8a:	71 81       	ldd	r23, Z+1	; 0x01
    ad8c:	82 81       	ldd	r24, Z+2	; 0x02
    ad8e:	93 81       	ldd	r25, Z+3	; 0x03
    ad90:	20 e0       	ldi	r18, 0x00	; 0
    ad92:	3f ef       	ldi	r19, 0xFF	; 255
    ad94:	4f e7       	ldi	r20, 0x7F	; 127
    ad96:	57 e4       	ldi	r21, 0x47	; 71
    ad98:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    ad9c:	18 16       	cp	r1, r24
    ad9e:	0c f0       	brlt	.+2      	; 0xada2 <pick_drop+0x4cb0>
    ada0:	10 e0       	ldi	r17, 0x00	; 0
    ada2:	11 23       	and	r17, r17
    ada4:	09 f4       	brne	.+2      	; 0xada8 <pick_drop+0x4cb6>
    ada6:	4e c0       	rjmp	.+156    	; 0xae44 <pick_drop+0x4d52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ada8:	ce 01       	movw	r24, r28
    adaa:	89 57       	subi	r24, 0x79	; 121
    adac:	9d 4f       	sbci	r25, 0xFD	; 253
    adae:	fc 01       	movw	r30, r24
    adb0:	60 81       	ld	r22, Z
    adb2:	71 81       	ldd	r23, Z+1	; 0x01
    adb4:	82 81       	ldd	r24, Z+2	; 0x02
    adb6:	93 81       	ldd	r25, Z+3	; 0x03
    adb8:	20 e0       	ldi	r18, 0x00	; 0
    adba:	30 e0       	ldi	r19, 0x00	; 0
    adbc:	40 e2       	ldi	r20, 0x20	; 32
    adbe:	51 e4       	ldi	r21, 0x41	; 65
    adc0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    adc4:	dc 01       	movw	r26, r24
    adc6:	cb 01       	movw	r24, r22
    adc8:	8e 01       	movw	r16, r28
    adca:	01 57       	subi	r16, 0x71	; 113
    adcc:	1d 4f       	sbci	r17, 0xFD	; 253
    adce:	bc 01       	movw	r22, r24
    add0:	cd 01       	movw	r24, r26
    add2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    add6:	dc 01       	movw	r26, r24
    add8:	cb 01       	movw	r24, r22
    adda:	f8 01       	movw	r30, r16
    addc:	91 83       	std	Z+1, r25	; 0x01
    adde:	80 83       	st	Z, r24
    ade0:	27 c0       	rjmp	.+78     	; 0xae30 <pick_drop+0x4d3e>
    ade2:	ce 01       	movw	r24, r28
    ade4:	8f 56       	subi	r24, 0x6F	; 111
    ade6:	9d 4f       	sbci	r25, 0xFD	; 253
    ade8:	20 e7       	ldi	r18, 0x70	; 112
    adea:	31 e0       	ldi	r19, 0x01	; 1
    adec:	fc 01       	movw	r30, r24
    adee:	31 83       	std	Z+1, r19	; 0x01
    adf0:	20 83       	st	Z, r18
    adf2:	ce 01       	movw	r24, r28
    adf4:	8f 56       	subi	r24, 0x6F	; 111
    adf6:	9d 4f       	sbci	r25, 0xFD	; 253
    adf8:	fc 01       	movw	r30, r24
    adfa:	80 81       	ld	r24, Z
    adfc:	91 81       	ldd	r25, Z+1	; 0x01
    adfe:	8c 01       	movw	r16, r24
    ae00:	c8 01       	movw	r24, r16
    ae02:	01 97       	sbiw	r24, 0x01	; 1
    ae04:	f1 f7       	brne	.-4      	; 0xae02 <pick_drop+0x4d10>
    ae06:	8c 01       	movw	r16, r24
    ae08:	ce 01       	movw	r24, r28
    ae0a:	8f 56       	subi	r24, 0x6F	; 111
    ae0c:	9d 4f       	sbci	r25, 0xFD	; 253
    ae0e:	fc 01       	movw	r30, r24
    ae10:	11 83       	std	Z+1, r17	; 0x01
    ae12:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae14:	ce 01       	movw	r24, r28
    ae16:	81 57       	subi	r24, 0x71	; 113
    ae18:	9d 4f       	sbci	r25, 0xFD	; 253
    ae1a:	9e 01       	movw	r18, r28
    ae1c:	21 57       	subi	r18, 0x71	; 113
    ae1e:	3d 4f       	sbci	r19, 0xFD	; 253
    ae20:	f9 01       	movw	r30, r18
    ae22:	20 81       	ld	r18, Z
    ae24:	31 81       	ldd	r19, Z+1	; 0x01
    ae26:	21 50       	subi	r18, 0x01	; 1
    ae28:	30 40       	sbci	r19, 0x00	; 0
    ae2a:	fc 01       	movw	r30, r24
    ae2c:	31 83       	std	Z+1, r19	; 0x01
    ae2e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae30:	ce 01       	movw	r24, r28
    ae32:	81 57       	subi	r24, 0x71	; 113
    ae34:	9d 4f       	sbci	r25, 0xFD	; 253
    ae36:	fc 01       	movw	r30, r24
    ae38:	80 81       	ld	r24, Z
    ae3a:	91 81       	ldd	r25, Z+1	; 0x01
    ae3c:	00 97       	sbiw	r24, 0x00	; 0
    ae3e:	89 f6       	brne	.-94     	; 0xade2 <pick_drop+0x4cf0>
    ae40:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ae44:	8e 01       	movw	r16, r28
    ae46:	01 57       	subi	r16, 0x71	; 113
    ae48:	1d 4f       	sbci	r17, 0xFD	; 253
    ae4a:	ce 01       	movw	r24, r28
    ae4c:	85 57       	subi	r24, 0x75	; 117
    ae4e:	9d 4f       	sbci	r25, 0xFD	; 253
    ae50:	fc 01       	movw	r30, r24
    ae52:	60 81       	ld	r22, Z
    ae54:	71 81       	ldd	r23, Z+1	; 0x01
    ae56:	82 81       	ldd	r24, Z+2	; 0x02
    ae58:	93 81       	ldd	r25, Z+3	; 0x03
    ae5a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ae5e:	dc 01       	movw	r26, r24
    ae60:	cb 01       	movw	r24, r22
    ae62:	f8 01       	movw	r30, r16
    ae64:	91 83       	std	Z+1, r25	; 0x01
    ae66:	80 83       	st	Z, r24
    ae68:	ce 01       	movw	r24, r28
    ae6a:	8d 56       	subi	r24, 0x6D	; 109
    ae6c:	9d 4f       	sbci	r25, 0xFD	; 253
    ae6e:	9e 01       	movw	r18, r28
    ae70:	21 57       	subi	r18, 0x71	; 113
    ae72:	3d 4f       	sbci	r19, 0xFD	; 253
    ae74:	f9 01       	movw	r30, r18
    ae76:	20 81       	ld	r18, Z
    ae78:	31 81       	ldd	r19, Z+1	; 0x01
    ae7a:	fc 01       	movw	r30, r24
    ae7c:	31 83       	std	Z+1, r19	; 0x01
    ae7e:	20 83       	st	Z, r18
    ae80:	ce 01       	movw	r24, r28
    ae82:	8d 56       	subi	r24, 0x6D	; 109
    ae84:	9d 4f       	sbci	r25, 0xFD	; 253
    ae86:	fc 01       	movw	r30, r24
    ae88:	80 81       	ld	r24, Z
    ae8a:	91 81       	ldd	r25, Z+1	; 0x01
    ae8c:	8c 01       	movw	r16, r24
    ae8e:	c8 01       	movw	r24, r16
    ae90:	01 97       	sbiw	r24, 0x01	; 1
    ae92:	f1 f7       	brne	.-4      	; 0xae90 <pick_drop+0x4d9e>
    ae94:	8c 01       	movw	r16, r24
    ae96:	ce 01       	movw	r24, r28
    ae98:	8d 56       	subi	r24, 0x6D	; 109
    ae9a:	9d 4f       	sbci	r25, 0xFD	; 253
    ae9c:	fc 01       	movw	r30, r24
    ae9e:	11 83       	std	Z+1, r17	; 0x01
    aea0:	00 83       	st	Z, r16
    aea2:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
		_delay_ms(20);
		}		
	}
	else if(pd=='5')//F1
    aea6:	ce 01       	movw	r24, r28
    aea8:	8f 5f       	subi	r24, 0xFF	; 255
    aeaa:	9b 4f       	sbci	r25, 0xFB	; 251
    aeac:	fc 01       	movw	r30, r24
    aeae:	80 81       	ld	r24, Z
    aeb0:	85 33       	cpi	r24, 0x35	; 53
    aeb2:	11 f0       	breq	.+4      	; 0xaeb8 <pick_drop+0x4dc6>
    aeb4:	0c 94 9d 60 	jmp	0xc13a	; 0xc13a <pick_drop+0x6048>
	{// 1X6 
			if(master_path[node-1]=='U')
    aeb8:	80 91 4f 03 	lds	r24, 0x034F
    aebc:	90 91 50 03 	lds	r25, 0x0350
    aec0:	01 97       	sbiw	r24, 0x01	; 1
    aec2:	8d 5a       	subi	r24, 0xAD	; 173
    aec4:	9c 4f       	sbci	r25, 0xFC	; 252
    aec6:	fc 01       	movw	r30, r24
    aec8:	80 81       	ld	r24, Z
    aeca:	85 35       	cpi	r24, 0x55	; 85
    aecc:	09 f0       	breq	.+2      	; 0xaed0 <pick_drop+0x4dde>
    aece:	07 c5       	rjmp	.+2574   	; 0xb8de <pick_drop+0x57ec>
			{
			back_mm(20);
    aed0:	84 e1       	ldi	r24, 0x14	; 20
    aed2:	90 e0       	ldi	r25, 0x00	; 0
    aed4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    aed8:	9e 01       	movw	r18, r28
    aeda:	2b 56       	subi	r18, 0x6B	; 107
    aedc:	3d 4f       	sbci	r19, 0xFD	; 253
    aede:	80 e0       	ldi	r24, 0x00	; 0
    aee0:	90 e0       	ldi	r25, 0x00	; 0
    aee2:	a0 ea       	ldi	r26, 0xA0	; 160
    aee4:	b1 e4       	ldi	r27, 0x41	; 65
    aee6:	f9 01       	movw	r30, r18
    aee8:	80 83       	st	Z, r24
    aeea:	91 83       	std	Z+1, r25	; 0x01
    aeec:	a2 83       	std	Z+2, r26	; 0x02
    aeee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    aef0:	8e 01       	movw	r16, r28
    aef2:	07 56       	subi	r16, 0x67	; 103
    aef4:	1d 4f       	sbci	r17, 0xFD	; 253
    aef6:	ce 01       	movw	r24, r28
    aef8:	8b 56       	subi	r24, 0x6B	; 107
    aefa:	9d 4f       	sbci	r25, 0xFD	; 253
    aefc:	fc 01       	movw	r30, r24
    aefe:	60 81       	ld	r22, Z
    af00:	71 81       	ldd	r23, Z+1	; 0x01
    af02:	82 81       	ldd	r24, Z+2	; 0x02
    af04:	93 81       	ldd	r25, Z+3	; 0x03
    af06:	26 e6       	ldi	r18, 0x66	; 102
    af08:	36 e6       	ldi	r19, 0x66	; 102
    af0a:	46 e6       	ldi	r20, 0x66	; 102
    af0c:	55 e4       	ldi	r21, 0x45	; 69
    af0e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    af12:	dc 01       	movw	r26, r24
    af14:	cb 01       	movw	r24, r22
    af16:	f8 01       	movw	r30, r16
    af18:	80 83       	st	Z, r24
    af1a:	91 83       	std	Z+1, r25	; 0x01
    af1c:	a2 83       	std	Z+2, r26	; 0x02
    af1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    af20:	ce 01       	movw	r24, r28
    af22:	87 56       	subi	r24, 0x67	; 103
    af24:	9d 4f       	sbci	r25, 0xFD	; 253
    af26:	11 e0       	ldi	r17, 0x01	; 1
    af28:	fc 01       	movw	r30, r24
    af2a:	60 81       	ld	r22, Z
    af2c:	71 81       	ldd	r23, Z+1	; 0x01
    af2e:	82 81       	ldd	r24, Z+2	; 0x02
    af30:	93 81       	ldd	r25, Z+3	; 0x03
    af32:	20 e0       	ldi	r18, 0x00	; 0
    af34:	30 e0       	ldi	r19, 0x00	; 0
    af36:	40 e8       	ldi	r20, 0x80	; 128
    af38:	5f e3       	ldi	r21, 0x3F	; 63
    af3a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    af3e:	88 23       	and	r24, r24
    af40:	0c f0       	brlt	.+2      	; 0xaf44 <pick_drop+0x4e52>
    af42:	10 e0       	ldi	r17, 0x00	; 0
    af44:	11 23       	and	r17, r17
    af46:	49 f0       	breq	.+18     	; 0xaf5a <pick_drop+0x4e68>
		__ticks = 1;
    af48:	ce 01       	movw	r24, r28
    af4a:	83 56       	subi	r24, 0x63	; 99
    af4c:	9d 4f       	sbci	r25, 0xFD	; 253
    af4e:	21 e0       	ldi	r18, 0x01	; 1
    af50:	30 e0       	ldi	r19, 0x00	; 0
    af52:	fc 01       	movw	r30, r24
    af54:	31 83       	std	Z+1, r19	; 0x01
    af56:	20 83       	st	Z, r18
    af58:	74 c0       	rjmp	.+232    	; 0xb042 <pick_drop+0x4f50>
	else if (__tmp > 65535)
    af5a:	ce 01       	movw	r24, r28
    af5c:	87 56       	subi	r24, 0x67	; 103
    af5e:	9d 4f       	sbci	r25, 0xFD	; 253
    af60:	11 e0       	ldi	r17, 0x01	; 1
    af62:	fc 01       	movw	r30, r24
    af64:	60 81       	ld	r22, Z
    af66:	71 81       	ldd	r23, Z+1	; 0x01
    af68:	82 81       	ldd	r24, Z+2	; 0x02
    af6a:	93 81       	ldd	r25, Z+3	; 0x03
    af6c:	20 e0       	ldi	r18, 0x00	; 0
    af6e:	3f ef       	ldi	r19, 0xFF	; 255
    af70:	4f e7       	ldi	r20, 0x7F	; 127
    af72:	57 e4       	ldi	r21, 0x47	; 71
    af74:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    af78:	18 16       	cp	r1, r24
    af7a:	0c f0       	brlt	.+2      	; 0xaf7e <pick_drop+0x4e8c>
    af7c:	10 e0       	ldi	r17, 0x00	; 0
    af7e:	11 23       	and	r17, r17
    af80:	09 f4       	brne	.+2      	; 0xaf84 <pick_drop+0x4e92>
    af82:	4d c0       	rjmp	.+154    	; 0xb01e <pick_drop+0x4f2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    af84:	ce 01       	movw	r24, r28
    af86:	8b 56       	subi	r24, 0x6B	; 107
    af88:	9d 4f       	sbci	r25, 0xFD	; 253
    af8a:	fc 01       	movw	r30, r24
    af8c:	60 81       	ld	r22, Z
    af8e:	71 81       	ldd	r23, Z+1	; 0x01
    af90:	82 81       	ldd	r24, Z+2	; 0x02
    af92:	93 81       	ldd	r25, Z+3	; 0x03
    af94:	20 e0       	ldi	r18, 0x00	; 0
    af96:	30 e0       	ldi	r19, 0x00	; 0
    af98:	40 e2       	ldi	r20, 0x20	; 32
    af9a:	51 e4       	ldi	r21, 0x41	; 65
    af9c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    afa0:	dc 01       	movw	r26, r24
    afa2:	cb 01       	movw	r24, r22
    afa4:	8e 01       	movw	r16, r28
    afa6:	03 56       	subi	r16, 0x63	; 99
    afa8:	1d 4f       	sbci	r17, 0xFD	; 253
    afaa:	bc 01       	movw	r22, r24
    afac:	cd 01       	movw	r24, r26
    afae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    afb2:	dc 01       	movw	r26, r24
    afb4:	cb 01       	movw	r24, r22
    afb6:	f8 01       	movw	r30, r16
    afb8:	91 83       	std	Z+1, r25	; 0x01
    afba:	80 83       	st	Z, r24
    afbc:	27 c0       	rjmp	.+78     	; 0xb00c <pick_drop+0x4f1a>
    afbe:	ce 01       	movw	r24, r28
    afc0:	81 56       	subi	r24, 0x61	; 97
    afc2:	9d 4f       	sbci	r25, 0xFD	; 253
    afc4:	20 e7       	ldi	r18, 0x70	; 112
    afc6:	31 e0       	ldi	r19, 0x01	; 1
    afc8:	fc 01       	movw	r30, r24
    afca:	31 83       	std	Z+1, r19	; 0x01
    afcc:	20 83       	st	Z, r18
    afce:	ce 01       	movw	r24, r28
    afd0:	81 56       	subi	r24, 0x61	; 97
    afd2:	9d 4f       	sbci	r25, 0xFD	; 253
    afd4:	fc 01       	movw	r30, r24
    afd6:	80 81       	ld	r24, Z
    afd8:	91 81       	ldd	r25, Z+1	; 0x01
    afda:	8c 01       	movw	r16, r24
    afdc:	c8 01       	movw	r24, r16
    afde:	01 97       	sbiw	r24, 0x01	; 1
    afe0:	f1 f7       	brne	.-4      	; 0xafde <pick_drop+0x4eec>
    afe2:	8c 01       	movw	r16, r24
    afe4:	ce 01       	movw	r24, r28
    afe6:	81 56       	subi	r24, 0x61	; 97
    afe8:	9d 4f       	sbci	r25, 0xFD	; 253
    afea:	fc 01       	movw	r30, r24
    afec:	11 83       	std	Z+1, r17	; 0x01
    afee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aff0:	ce 01       	movw	r24, r28
    aff2:	83 56       	subi	r24, 0x63	; 99
    aff4:	9d 4f       	sbci	r25, 0xFD	; 253
    aff6:	9e 01       	movw	r18, r28
    aff8:	23 56       	subi	r18, 0x63	; 99
    affa:	3d 4f       	sbci	r19, 0xFD	; 253
    affc:	f9 01       	movw	r30, r18
    affe:	20 81       	ld	r18, Z
    b000:	31 81       	ldd	r19, Z+1	; 0x01
    b002:	21 50       	subi	r18, 0x01	; 1
    b004:	30 40       	sbci	r19, 0x00	; 0
    b006:	fc 01       	movw	r30, r24
    b008:	31 83       	std	Z+1, r19	; 0x01
    b00a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b00c:	ce 01       	movw	r24, r28
    b00e:	83 56       	subi	r24, 0x63	; 99
    b010:	9d 4f       	sbci	r25, 0xFD	; 253
    b012:	fc 01       	movw	r30, r24
    b014:	80 81       	ld	r24, Z
    b016:	91 81       	ldd	r25, Z+1	; 0x01
    b018:	00 97       	sbiw	r24, 0x00	; 0
    b01a:	89 f6       	brne	.-94     	; 0xafbe <pick_drop+0x4ecc>
    b01c:	2f c0       	rjmp	.+94     	; 0xb07c <pick_drop+0x4f8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b01e:	8e 01       	movw	r16, r28
    b020:	03 56       	subi	r16, 0x63	; 99
    b022:	1d 4f       	sbci	r17, 0xFD	; 253
    b024:	ce 01       	movw	r24, r28
    b026:	87 56       	subi	r24, 0x67	; 103
    b028:	9d 4f       	sbci	r25, 0xFD	; 253
    b02a:	fc 01       	movw	r30, r24
    b02c:	60 81       	ld	r22, Z
    b02e:	71 81       	ldd	r23, Z+1	; 0x01
    b030:	82 81       	ldd	r24, Z+2	; 0x02
    b032:	93 81       	ldd	r25, Z+3	; 0x03
    b034:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b038:	dc 01       	movw	r26, r24
    b03a:	cb 01       	movw	r24, r22
    b03c:	f8 01       	movw	r30, r16
    b03e:	91 83       	std	Z+1, r25	; 0x01
    b040:	80 83       	st	Z, r24
    b042:	ce 01       	movw	r24, r28
    b044:	8f 55       	subi	r24, 0x5F	; 95
    b046:	9d 4f       	sbci	r25, 0xFD	; 253
    b048:	9e 01       	movw	r18, r28
    b04a:	23 56       	subi	r18, 0x63	; 99
    b04c:	3d 4f       	sbci	r19, 0xFD	; 253
    b04e:	f9 01       	movw	r30, r18
    b050:	20 81       	ld	r18, Z
    b052:	31 81       	ldd	r19, Z+1	; 0x01
    b054:	fc 01       	movw	r30, r24
    b056:	31 83       	std	Z+1, r19	; 0x01
    b058:	20 83       	st	Z, r18
    b05a:	ce 01       	movw	r24, r28
    b05c:	8f 55       	subi	r24, 0x5F	; 95
    b05e:	9d 4f       	sbci	r25, 0xFD	; 253
    b060:	fc 01       	movw	r30, r24
    b062:	80 81       	ld	r24, Z
    b064:	91 81       	ldd	r25, Z+1	; 0x01
    b066:	8c 01       	movw	r16, r24
    b068:	c8 01       	movw	r24, r16
    b06a:	01 97       	sbiw	r24, 0x01	; 1
    b06c:	f1 f7       	brne	.-4      	; 0xb06a <pick_drop+0x4f78>
    b06e:	8c 01       	movw	r16, r24
    b070:	ce 01       	movw	r24, r28
    b072:	8f 55       	subi	r24, 0x5F	; 95
    b074:	9d 4f       	sbci	r25, 0xFD	; 253
    b076:	fc 01       	movw	r30, r24
    b078:	11 83       	std	Z+1, r17	; 0x01
    b07a:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_right();
    b07c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
			stop();
    b080:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    b084:	9e 01       	movw	r18, r28
    b086:	2d 55       	subi	r18, 0x5D	; 93
    b088:	3d 4f       	sbci	r19, 0xFD	; 253
    b08a:	80 e0       	ldi	r24, 0x00	; 0
    b08c:	90 e0       	ldi	r25, 0x00	; 0
    b08e:	a0 ea       	ldi	r26, 0xA0	; 160
    b090:	b1 e4       	ldi	r27, 0x41	; 65
    b092:	f9 01       	movw	r30, r18
    b094:	80 83       	st	Z, r24
    b096:	91 83       	std	Z+1, r25	; 0x01
    b098:	a2 83       	std	Z+2, r26	; 0x02
    b09a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b09c:	8e 01       	movw	r16, r28
    b09e:	09 55       	subi	r16, 0x59	; 89
    b0a0:	1d 4f       	sbci	r17, 0xFD	; 253
    b0a2:	ce 01       	movw	r24, r28
    b0a4:	8d 55       	subi	r24, 0x5D	; 93
    b0a6:	9d 4f       	sbci	r25, 0xFD	; 253
    b0a8:	fc 01       	movw	r30, r24
    b0aa:	60 81       	ld	r22, Z
    b0ac:	71 81       	ldd	r23, Z+1	; 0x01
    b0ae:	82 81       	ldd	r24, Z+2	; 0x02
    b0b0:	93 81       	ldd	r25, Z+3	; 0x03
    b0b2:	26 e6       	ldi	r18, 0x66	; 102
    b0b4:	36 e6       	ldi	r19, 0x66	; 102
    b0b6:	46 e6       	ldi	r20, 0x66	; 102
    b0b8:	55 e4       	ldi	r21, 0x45	; 69
    b0ba:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b0be:	dc 01       	movw	r26, r24
    b0c0:	cb 01       	movw	r24, r22
    b0c2:	f8 01       	movw	r30, r16
    b0c4:	80 83       	st	Z, r24
    b0c6:	91 83       	std	Z+1, r25	; 0x01
    b0c8:	a2 83       	std	Z+2, r26	; 0x02
    b0ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b0cc:	ce 01       	movw	r24, r28
    b0ce:	89 55       	subi	r24, 0x59	; 89
    b0d0:	9d 4f       	sbci	r25, 0xFD	; 253
    b0d2:	11 e0       	ldi	r17, 0x01	; 1
    b0d4:	fc 01       	movw	r30, r24
    b0d6:	60 81       	ld	r22, Z
    b0d8:	71 81       	ldd	r23, Z+1	; 0x01
    b0da:	82 81       	ldd	r24, Z+2	; 0x02
    b0dc:	93 81       	ldd	r25, Z+3	; 0x03
    b0de:	20 e0       	ldi	r18, 0x00	; 0
    b0e0:	30 e0       	ldi	r19, 0x00	; 0
    b0e2:	40 e8       	ldi	r20, 0x80	; 128
    b0e4:	5f e3       	ldi	r21, 0x3F	; 63
    b0e6:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    b0ea:	88 23       	and	r24, r24
    b0ec:	0c f0       	brlt	.+2      	; 0xb0f0 <pick_drop+0x4ffe>
    b0ee:	10 e0       	ldi	r17, 0x00	; 0
    b0f0:	11 23       	and	r17, r17
    b0f2:	49 f0       	breq	.+18     	; 0xb106 <pick_drop+0x5014>
		__ticks = 1;
    b0f4:	ce 01       	movw	r24, r28
    b0f6:	85 55       	subi	r24, 0x55	; 85
    b0f8:	9d 4f       	sbci	r25, 0xFD	; 253
    b0fa:	21 e0       	ldi	r18, 0x01	; 1
    b0fc:	30 e0       	ldi	r19, 0x00	; 0
    b0fe:	fc 01       	movw	r30, r24
    b100:	31 83       	std	Z+1, r19	; 0x01
    b102:	20 83       	st	Z, r18
    b104:	74 c0       	rjmp	.+232    	; 0xb1ee <pick_drop+0x50fc>
	else if (__tmp > 65535)
    b106:	ce 01       	movw	r24, r28
    b108:	89 55       	subi	r24, 0x59	; 89
    b10a:	9d 4f       	sbci	r25, 0xFD	; 253
    b10c:	11 e0       	ldi	r17, 0x01	; 1
    b10e:	fc 01       	movw	r30, r24
    b110:	60 81       	ld	r22, Z
    b112:	71 81       	ldd	r23, Z+1	; 0x01
    b114:	82 81       	ldd	r24, Z+2	; 0x02
    b116:	93 81       	ldd	r25, Z+3	; 0x03
    b118:	20 e0       	ldi	r18, 0x00	; 0
    b11a:	3f ef       	ldi	r19, 0xFF	; 255
    b11c:	4f e7       	ldi	r20, 0x7F	; 127
    b11e:	57 e4       	ldi	r21, 0x47	; 71
    b120:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    b124:	18 16       	cp	r1, r24
    b126:	0c f0       	brlt	.+2      	; 0xb12a <pick_drop+0x5038>
    b128:	10 e0       	ldi	r17, 0x00	; 0
    b12a:	11 23       	and	r17, r17
    b12c:	09 f4       	brne	.+2      	; 0xb130 <pick_drop+0x503e>
    b12e:	4d c0       	rjmp	.+154    	; 0xb1ca <pick_drop+0x50d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b130:	ce 01       	movw	r24, r28
    b132:	8d 55       	subi	r24, 0x5D	; 93
    b134:	9d 4f       	sbci	r25, 0xFD	; 253
    b136:	fc 01       	movw	r30, r24
    b138:	60 81       	ld	r22, Z
    b13a:	71 81       	ldd	r23, Z+1	; 0x01
    b13c:	82 81       	ldd	r24, Z+2	; 0x02
    b13e:	93 81       	ldd	r25, Z+3	; 0x03
    b140:	20 e0       	ldi	r18, 0x00	; 0
    b142:	30 e0       	ldi	r19, 0x00	; 0
    b144:	40 e2       	ldi	r20, 0x20	; 32
    b146:	51 e4       	ldi	r21, 0x41	; 65
    b148:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b14c:	dc 01       	movw	r26, r24
    b14e:	cb 01       	movw	r24, r22
    b150:	8e 01       	movw	r16, r28
    b152:	05 55       	subi	r16, 0x55	; 85
    b154:	1d 4f       	sbci	r17, 0xFD	; 253
    b156:	bc 01       	movw	r22, r24
    b158:	cd 01       	movw	r24, r26
    b15a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b15e:	dc 01       	movw	r26, r24
    b160:	cb 01       	movw	r24, r22
    b162:	f8 01       	movw	r30, r16
    b164:	91 83       	std	Z+1, r25	; 0x01
    b166:	80 83       	st	Z, r24
    b168:	27 c0       	rjmp	.+78     	; 0xb1b8 <pick_drop+0x50c6>
    b16a:	ce 01       	movw	r24, r28
    b16c:	83 55       	subi	r24, 0x53	; 83
    b16e:	9d 4f       	sbci	r25, 0xFD	; 253
    b170:	20 e7       	ldi	r18, 0x70	; 112
    b172:	31 e0       	ldi	r19, 0x01	; 1
    b174:	fc 01       	movw	r30, r24
    b176:	31 83       	std	Z+1, r19	; 0x01
    b178:	20 83       	st	Z, r18
    b17a:	ce 01       	movw	r24, r28
    b17c:	83 55       	subi	r24, 0x53	; 83
    b17e:	9d 4f       	sbci	r25, 0xFD	; 253
    b180:	fc 01       	movw	r30, r24
    b182:	80 81       	ld	r24, Z
    b184:	91 81       	ldd	r25, Z+1	; 0x01
    b186:	8c 01       	movw	r16, r24
    b188:	c8 01       	movw	r24, r16
    b18a:	01 97       	sbiw	r24, 0x01	; 1
    b18c:	f1 f7       	brne	.-4      	; 0xb18a <pick_drop+0x5098>
    b18e:	8c 01       	movw	r16, r24
    b190:	ce 01       	movw	r24, r28
    b192:	83 55       	subi	r24, 0x53	; 83
    b194:	9d 4f       	sbci	r25, 0xFD	; 253
    b196:	fc 01       	movw	r30, r24
    b198:	11 83       	std	Z+1, r17	; 0x01
    b19a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b19c:	ce 01       	movw	r24, r28
    b19e:	85 55       	subi	r24, 0x55	; 85
    b1a0:	9d 4f       	sbci	r25, 0xFD	; 253
    b1a2:	9e 01       	movw	r18, r28
    b1a4:	25 55       	subi	r18, 0x55	; 85
    b1a6:	3d 4f       	sbci	r19, 0xFD	; 253
    b1a8:	f9 01       	movw	r30, r18
    b1aa:	20 81       	ld	r18, Z
    b1ac:	31 81       	ldd	r19, Z+1	; 0x01
    b1ae:	21 50       	subi	r18, 0x01	; 1
    b1b0:	30 40       	sbci	r19, 0x00	; 0
    b1b2:	fc 01       	movw	r30, r24
    b1b4:	31 83       	std	Z+1, r19	; 0x01
    b1b6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b1b8:	ce 01       	movw	r24, r28
    b1ba:	85 55       	subi	r24, 0x55	; 85
    b1bc:	9d 4f       	sbci	r25, 0xFD	; 253
    b1be:	fc 01       	movw	r30, r24
    b1c0:	80 81       	ld	r24, Z
    b1c2:	91 81       	ldd	r25, Z+1	; 0x01
    b1c4:	00 97       	sbiw	r24, 0x00	; 0
    b1c6:	89 f6       	brne	.-94     	; 0xb16a <pick_drop+0x5078>
    b1c8:	2f c0       	rjmp	.+94     	; 0xb228 <pick_drop+0x5136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b1ca:	8e 01       	movw	r16, r28
    b1cc:	05 55       	subi	r16, 0x55	; 85
    b1ce:	1d 4f       	sbci	r17, 0xFD	; 253
    b1d0:	ce 01       	movw	r24, r28
    b1d2:	89 55       	subi	r24, 0x59	; 89
    b1d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b1d6:	fc 01       	movw	r30, r24
    b1d8:	60 81       	ld	r22, Z
    b1da:	71 81       	ldd	r23, Z+1	; 0x01
    b1dc:	82 81       	ldd	r24, Z+2	; 0x02
    b1de:	93 81       	ldd	r25, Z+3	; 0x03
    b1e0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b1e4:	dc 01       	movw	r26, r24
    b1e6:	cb 01       	movw	r24, r22
    b1e8:	f8 01       	movw	r30, r16
    b1ea:	91 83       	std	Z+1, r25	; 0x01
    b1ec:	80 83       	st	Z, r24
    b1ee:	ce 01       	movw	r24, r28
    b1f0:	81 55       	subi	r24, 0x51	; 81
    b1f2:	9d 4f       	sbci	r25, 0xFD	; 253
    b1f4:	9e 01       	movw	r18, r28
    b1f6:	25 55       	subi	r18, 0x55	; 85
    b1f8:	3d 4f       	sbci	r19, 0xFD	; 253
    b1fa:	f9 01       	movw	r30, r18
    b1fc:	20 81       	ld	r18, Z
    b1fe:	31 81       	ldd	r19, Z+1	; 0x01
    b200:	fc 01       	movw	r30, r24
    b202:	31 83       	std	Z+1, r19	; 0x01
    b204:	20 83       	st	Z, r18
    b206:	ce 01       	movw	r24, r28
    b208:	81 55       	subi	r24, 0x51	; 81
    b20a:	9d 4f       	sbci	r25, 0xFD	; 253
    b20c:	fc 01       	movw	r30, r24
    b20e:	80 81       	ld	r24, Z
    b210:	91 81       	ldd	r25, Z+1	; 0x01
    b212:	8c 01       	movw	r16, r24
    b214:	c8 01       	movw	r24, r16
    b216:	01 97       	sbiw	r24, 0x01	; 1
    b218:	f1 f7       	brne	.-4      	; 0xb216 <pick_drop+0x5124>
    b21a:	8c 01       	movw	r16, r24
    b21c:	ce 01       	movw	r24, r28
    b21e:	81 55       	subi	r24, 0x51	; 81
    b220:	9d 4f       	sbci	r25, 0xFD	; 253
    b222:	fc 01       	movw	r30, r24
    b224:	11 83       	std	Z+1, r17	; 0x01
    b226:	00 83       	st	Z, r16
			_delay_ms(20);
			forward_mm(10);
    b228:	8a e0       	ldi	r24, 0x0A	; 10
    b22a:	90 e0       	ldi	r25, 0x00	; 0
    b22c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
			front();
    b230:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    b234:	9e 01       	movw	r18, r28
    b236:	2f 54       	subi	r18, 0x4F	; 79
    b238:	3d 4f       	sbci	r19, 0xFD	; 253
    b23a:	80 e0       	ldi	r24, 0x00	; 0
    b23c:	90 e0       	ldi	r25, 0x00	; 0
    b23e:	a8 ec       	ldi	r26, 0xC8	; 200
    b240:	b2 e4       	ldi	r27, 0x42	; 66
    b242:	f9 01       	movw	r30, r18
    b244:	80 83       	st	Z, r24
    b246:	91 83       	std	Z+1, r25	; 0x01
    b248:	a2 83       	std	Z+2, r26	; 0x02
    b24a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b24c:	8e 01       	movw	r16, r28
    b24e:	0b 54       	subi	r16, 0x4B	; 75
    b250:	1d 4f       	sbci	r17, 0xFD	; 253
    b252:	ce 01       	movw	r24, r28
    b254:	8f 54       	subi	r24, 0x4F	; 79
    b256:	9d 4f       	sbci	r25, 0xFD	; 253
    b258:	fc 01       	movw	r30, r24
    b25a:	60 81       	ld	r22, Z
    b25c:	71 81       	ldd	r23, Z+1	; 0x01
    b25e:	82 81       	ldd	r24, Z+2	; 0x02
    b260:	93 81       	ldd	r25, Z+3	; 0x03
    b262:	26 e6       	ldi	r18, 0x66	; 102
    b264:	36 e6       	ldi	r19, 0x66	; 102
    b266:	46 e6       	ldi	r20, 0x66	; 102
    b268:	55 e4       	ldi	r21, 0x45	; 69
    b26a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b26e:	dc 01       	movw	r26, r24
    b270:	cb 01       	movw	r24, r22
    b272:	f8 01       	movw	r30, r16
    b274:	80 83       	st	Z, r24
    b276:	91 83       	std	Z+1, r25	; 0x01
    b278:	a2 83       	std	Z+2, r26	; 0x02
    b27a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b27c:	ce 01       	movw	r24, r28
    b27e:	8b 54       	subi	r24, 0x4B	; 75
    b280:	9d 4f       	sbci	r25, 0xFD	; 253
    b282:	11 e0       	ldi	r17, 0x01	; 1
    b284:	fc 01       	movw	r30, r24
    b286:	60 81       	ld	r22, Z
    b288:	71 81       	ldd	r23, Z+1	; 0x01
    b28a:	82 81       	ldd	r24, Z+2	; 0x02
    b28c:	93 81       	ldd	r25, Z+3	; 0x03
    b28e:	20 e0       	ldi	r18, 0x00	; 0
    b290:	30 e0       	ldi	r19, 0x00	; 0
    b292:	40 e8       	ldi	r20, 0x80	; 128
    b294:	5f e3       	ldi	r21, 0x3F	; 63
    b296:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    b29a:	88 23       	and	r24, r24
    b29c:	0c f0       	brlt	.+2      	; 0xb2a0 <pick_drop+0x51ae>
    b29e:	10 e0       	ldi	r17, 0x00	; 0
    b2a0:	11 23       	and	r17, r17
    b2a2:	49 f0       	breq	.+18     	; 0xb2b6 <pick_drop+0x51c4>
		__ticks = 1;
    b2a4:	ce 01       	movw	r24, r28
    b2a6:	87 54       	subi	r24, 0x47	; 71
    b2a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b2aa:	21 e0       	ldi	r18, 0x01	; 1
    b2ac:	30 e0       	ldi	r19, 0x00	; 0
    b2ae:	fc 01       	movw	r30, r24
    b2b0:	31 83       	std	Z+1, r19	; 0x01
    b2b2:	20 83       	st	Z, r18
    b2b4:	74 c0       	rjmp	.+232    	; 0xb39e <pick_drop+0x52ac>
	else if (__tmp > 65535)
    b2b6:	ce 01       	movw	r24, r28
    b2b8:	8b 54       	subi	r24, 0x4B	; 75
    b2ba:	9d 4f       	sbci	r25, 0xFD	; 253
    b2bc:	11 e0       	ldi	r17, 0x01	; 1
    b2be:	fc 01       	movw	r30, r24
    b2c0:	60 81       	ld	r22, Z
    b2c2:	71 81       	ldd	r23, Z+1	; 0x01
    b2c4:	82 81       	ldd	r24, Z+2	; 0x02
    b2c6:	93 81       	ldd	r25, Z+3	; 0x03
    b2c8:	20 e0       	ldi	r18, 0x00	; 0
    b2ca:	3f ef       	ldi	r19, 0xFF	; 255
    b2cc:	4f e7       	ldi	r20, 0x7F	; 127
    b2ce:	57 e4       	ldi	r21, 0x47	; 71
    b2d0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    b2d4:	18 16       	cp	r1, r24
    b2d6:	0c f0       	brlt	.+2      	; 0xb2da <pick_drop+0x51e8>
    b2d8:	10 e0       	ldi	r17, 0x00	; 0
    b2da:	11 23       	and	r17, r17
    b2dc:	09 f4       	brne	.+2      	; 0xb2e0 <pick_drop+0x51ee>
    b2de:	4d c0       	rjmp	.+154    	; 0xb37a <pick_drop+0x5288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b2e0:	ce 01       	movw	r24, r28
    b2e2:	8f 54       	subi	r24, 0x4F	; 79
    b2e4:	9d 4f       	sbci	r25, 0xFD	; 253
    b2e6:	fc 01       	movw	r30, r24
    b2e8:	60 81       	ld	r22, Z
    b2ea:	71 81       	ldd	r23, Z+1	; 0x01
    b2ec:	82 81       	ldd	r24, Z+2	; 0x02
    b2ee:	93 81       	ldd	r25, Z+3	; 0x03
    b2f0:	20 e0       	ldi	r18, 0x00	; 0
    b2f2:	30 e0       	ldi	r19, 0x00	; 0
    b2f4:	40 e2       	ldi	r20, 0x20	; 32
    b2f6:	51 e4       	ldi	r21, 0x41	; 65
    b2f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b2fc:	dc 01       	movw	r26, r24
    b2fe:	cb 01       	movw	r24, r22
    b300:	8e 01       	movw	r16, r28
    b302:	07 54       	subi	r16, 0x47	; 71
    b304:	1d 4f       	sbci	r17, 0xFD	; 253
    b306:	bc 01       	movw	r22, r24
    b308:	cd 01       	movw	r24, r26
    b30a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b30e:	dc 01       	movw	r26, r24
    b310:	cb 01       	movw	r24, r22
    b312:	f8 01       	movw	r30, r16
    b314:	91 83       	std	Z+1, r25	; 0x01
    b316:	80 83       	st	Z, r24
    b318:	27 c0       	rjmp	.+78     	; 0xb368 <pick_drop+0x5276>
    b31a:	ce 01       	movw	r24, r28
    b31c:	85 54       	subi	r24, 0x45	; 69
    b31e:	9d 4f       	sbci	r25, 0xFD	; 253
    b320:	20 e7       	ldi	r18, 0x70	; 112
    b322:	31 e0       	ldi	r19, 0x01	; 1
    b324:	fc 01       	movw	r30, r24
    b326:	31 83       	std	Z+1, r19	; 0x01
    b328:	20 83       	st	Z, r18
    b32a:	ce 01       	movw	r24, r28
    b32c:	85 54       	subi	r24, 0x45	; 69
    b32e:	9d 4f       	sbci	r25, 0xFD	; 253
    b330:	fc 01       	movw	r30, r24
    b332:	80 81       	ld	r24, Z
    b334:	91 81       	ldd	r25, Z+1	; 0x01
    b336:	8c 01       	movw	r16, r24
    b338:	c8 01       	movw	r24, r16
    b33a:	01 97       	sbiw	r24, 0x01	; 1
    b33c:	f1 f7       	brne	.-4      	; 0xb33a <pick_drop+0x5248>
    b33e:	8c 01       	movw	r16, r24
    b340:	ce 01       	movw	r24, r28
    b342:	85 54       	subi	r24, 0x45	; 69
    b344:	9d 4f       	sbci	r25, 0xFD	; 253
    b346:	fc 01       	movw	r30, r24
    b348:	11 83       	std	Z+1, r17	; 0x01
    b34a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b34c:	ce 01       	movw	r24, r28
    b34e:	87 54       	subi	r24, 0x47	; 71
    b350:	9d 4f       	sbci	r25, 0xFD	; 253
    b352:	9e 01       	movw	r18, r28
    b354:	27 54       	subi	r18, 0x47	; 71
    b356:	3d 4f       	sbci	r19, 0xFD	; 253
    b358:	f9 01       	movw	r30, r18
    b35a:	20 81       	ld	r18, Z
    b35c:	31 81       	ldd	r19, Z+1	; 0x01
    b35e:	21 50       	subi	r18, 0x01	; 1
    b360:	30 40       	sbci	r19, 0x00	; 0
    b362:	fc 01       	movw	r30, r24
    b364:	31 83       	std	Z+1, r19	; 0x01
    b366:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b368:	ce 01       	movw	r24, r28
    b36a:	87 54       	subi	r24, 0x47	; 71
    b36c:	9d 4f       	sbci	r25, 0xFD	; 253
    b36e:	fc 01       	movw	r30, r24
    b370:	80 81       	ld	r24, Z
    b372:	91 81       	ldd	r25, Z+1	; 0x01
    b374:	00 97       	sbiw	r24, 0x00	; 0
    b376:	89 f6       	brne	.-94     	; 0xb31a <pick_drop+0x5228>
    b378:	2f c0       	rjmp	.+94     	; 0xb3d8 <pick_drop+0x52e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b37a:	8e 01       	movw	r16, r28
    b37c:	07 54       	subi	r16, 0x47	; 71
    b37e:	1d 4f       	sbci	r17, 0xFD	; 253
    b380:	ce 01       	movw	r24, r28
    b382:	8b 54       	subi	r24, 0x4B	; 75
    b384:	9d 4f       	sbci	r25, 0xFD	; 253
    b386:	fc 01       	movw	r30, r24
    b388:	60 81       	ld	r22, Z
    b38a:	71 81       	ldd	r23, Z+1	; 0x01
    b38c:	82 81       	ldd	r24, Z+2	; 0x02
    b38e:	93 81       	ldd	r25, Z+3	; 0x03
    b390:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b394:	dc 01       	movw	r26, r24
    b396:	cb 01       	movw	r24, r22
    b398:	f8 01       	movw	r30, r16
    b39a:	91 83       	std	Z+1, r25	; 0x01
    b39c:	80 83       	st	Z, r24
    b39e:	ce 01       	movw	r24, r28
    b3a0:	83 54       	subi	r24, 0x43	; 67
    b3a2:	9d 4f       	sbci	r25, 0xFD	; 253
    b3a4:	9e 01       	movw	r18, r28
    b3a6:	27 54       	subi	r18, 0x47	; 71
    b3a8:	3d 4f       	sbci	r19, 0xFD	; 253
    b3aa:	f9 01       	movw	r30, r18
    b3ac:	20 81       	ld	r18, Z
    b3ae:	31 81       	ldd	r19, Z+1	; 0x01
    b3b0:	fc 01       	movw	r30, r24
    b3b2:	31 83       	std	Z+1, r19	; 0x01
    b3b4:	20 83       	st	Z, r18
    b3b6:	ce 01       	movw	r24, r28
    b3b8:	83 54       	subi	r24, 0x43	; 67
    b3ba:	9d 4f       	sbci	r25, 0xFD	; 253
    b3bc:	fc 01       	movw	r30, r24
    b3be:	80 81       	ld	r24, Z
    b3c0:	91 81       	ldd	r25, Z+1	; 0x01
    b3c2:	8c 01       	movw	r16, r24
    b3c4:	c8 01       	movw	r24, r16
    b3c6:	01 97       	sbiw	r24, 0x01	; 1
    b3c8:	f1 f7       	brne	.-4      	; 0xb3c6 <pick_drop+0x52d4>
    b3ca:	8c 01       	movw	r16, r24
    b3cc:	ce 01       	movw	r24, r28
    b3ce:	83 54       	subi	r24, 0x43	; 67
    b3d0:	9d 4f       	sbci	r25, 0xFD	; 253
    b3d2:	fc 01       	movw	r30, r24
    b3d4:	11 83       	std	Z+1, r17	; 0x01
    b3d6:	00 83       	st	Z, r16
			_delay_ms(100);
			forward_mm(15);
    b3d8:	8f e0       	ldi	r24, 0x0F	; 15
    b3da:	90 e0       	ldi	r25, 0x00	; 0
    b3dc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    b3e0:	9e 01       	movw	r18, r28
    b3e2:	21 54       	subi	r18, 0x41	; 65
    b3e4:	3d 4f       	sbci	r19, 0xFD	; 253
    b3e6:	80 e0       	ldi	r24, 0x00	; 0
    b3e8:	90 e0       	ldi	r25, 0x00	; 0
    b3ea:	a0 ea       	ldi	r26, 0xA0	; 160
    b3ec:	b1 e4       	ldi	r27, 0x41	; 65
    b3ee:	f9 01       	movw	r30, r18
    b3f0:	80 83       	st	Z, r24
    b3f2:	91 83       	std	Z+1, r25	; 0x01
    b3f4:	a2 83       	std	Z+2, r26	; 0x02
    b3f6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b3f8:	8e 01       	movw	r16, r28
    b3fa:	0d 53       	subi	r16, 0x3D	; 61
    b3fc:	1d 4f       	sbci	r17, 0xFD	; 253
    b3fe:	ce 01       	movw	r24, r28
    b400:	81 54       	subi	r24, 0x41	; 65
    b402:	9d 4f       	sbci	r25, 0xFD	; 253
    b404:	fc 01       	movw	r30, r24
    b406:	60 81       	ld	r22, Z
    b408:	71 81       	ldd	r23, Z+1	; 0x01
    b40a:	82 81       	ldd	r24, Z+2	; 0x02
    b40c:	93 81       	ldd	r25, Z+3	; 0x03
    b40e:	26 e6       	ldi	r18, 0x66	; 102
    b410:	36 e6       	ldi	r19, 0x66	; 102
    b412:	46 e6       	ldi	r20, 0x66	; 102
    b414:	55 e4       	ldi	r21, 0x45	; 69
    b416:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b41a:	dc 01       	movw	r26, r24
    b41c:	cb 01       	movw	r24, r22
    b41e:	f8 01       	movw	r30, r16
    b420:	80 83       	st	Z, r24
    b422:	91 83       	std	Z+1, r25	; 0x01
    b424:	a2 83       	std	Z+2, r26	; 0x02
    b426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b428:	ce 01       	movw	r24, r28
    b42a:	8d 53       	subi	r24, 0x3D	; 61
    b42c:	9d 4f       	sbci	r25, 0xFD	; 253
    b42e:	11 e0       	ldi	r17, 0x01	; 1
    b430:	fc 01       	movw	r30, r24
    b432:	60 81       	ld	r22, Z
    b434:	71 81       	ldd	r23, Z+1	; 0x01
    b436:	82 81       	ldd	r24, Z+2	; 0x02
    b438:	93 81       	ldd	r25, Z+3	; 0x03
    b43a:	20 e0       	ldi	r18, 0x00	; 0
    b43c:	30 e0       	ldi	r19, 0x00	; 0
    b43e:	40 e8       	ldi	r20, 0x80	; 128
    b440:	5f e3       	ldi	r21, 0x3F	; 63
    b442:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    b446:	88 23       	and	r24, r24
    b448:	0c f0       	brlt	.+2      	; 0xb44c <pick_drop+0x535a>
    b44a:	10 e0       	ldi	r17, 0x00	; 0
    b44c:	11 23       	and	r17, r17
    b44e:	49 f0       	breq	.+18     	; 0xb462 <pick_drop+0x5370>
		__ticks = 1;
    b450:	ce 01       	movw	r24, r28
    b452:	89 53       	subi	r24, 0x39	; 57
    b454:	9d 4f       	sbci	r25, 0xFD	; 253
    b456:	21 e0       	ldi	r18, 0x01	; 1
    b458:	30 e0       	ldi	r19, 0x00	; 0
    b45a:	fc 01       	movw	r30, r24
    b45c:	31 83       	std	Z+1, r19	; 0x01
    b45e:	20 83       	st	Z, r18
    b460:	74 c0       	rjmp	.+232    	; 0xb54a <pick_drop+0x5458>
	else if (__tmp > 65535)
    b462:	ce 01       	movw	r24, r28
    b464:	8d 53       	subi	r24, 0x3D	; 61
    b466:	9d 4f       	sbci	r25, 0xFD	; 253
    b468:	11 e0       	ldi	r17, 0x01	; 1
    b46a:	fc 01       	movw	r30, r24
    b46c:	60 81       	ld	r22, Z
    b46e:	71 81       	ldd	r23, Z+1	; 0x01
    b470:	82 81       	ldd	r24, Z+2	; 0x02
    b472:	93 81       	ldd	r25, Z+3	; 0x03
    b474:	20 e0       	ldi	r18, 0x00	; 0
    b476:	3f ef       	ldi	r19, 0xFF	; 255
    b478:	4f e7       	ldi	r20, 0x7F	; 127
    b47a:	57 e4       	ldi	r21, 0x47	; 71
    b47c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    b480:	18 16       	cp	r1, r24
    b482:	0c f0       	brlt	.+2      	; 0xb486 <pick_drop+0x5394>
    b484:	10 e0       	ldi	r17, 0x00	; 0
    b486:	11 23       	and	r17, r17
    b488:	09 f4       	brne	.+2      	; 0xb48c <pick_drop+0x539a>
    b48a:	4d c0       	rjmp	.+154    	; 0xb526 <pick_drop+0x5434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b48c:	ce 01       	movw	r24, r28
    b48e:	81 54       	subi	r24, 0x41	; 65
    b490:	9d 4f       	sbci	r25, 0xFD	; 253
    b492:	fc 01       	movw	r30, r24
    b494:	60 81       	ld	r22, Z
    b496:	71 81       	ldd	r23, Z+1	; 0x01
    b498:	82 81       	ldd	r24, Z+2	; 0x02
    b49a:	93 81       	ldd	r25, Z+3	; 0x03
    b49c:	20 e0       	ldi	r18, 0x00	; 0
    b49e:	30 e0       	ldi	r19, 0x00	; 0
    b4a0:	40 e2       	ldi	r20, 0x20	; 32
    b4a2:	51 e4       	ldi	r21, 0x41	; 65
    b4a4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b4a8:	dc 01       	movw	r26, r24
    b4aa:	cb 01       	movw	r24, r22
    b4ac:	8e 01       	movw	r16, r28
    b4ae:	09 53       	subi	r16, 0x39	; 57
    b4b0:	1d 4f       	sbci	r17, 0xFD	; 253
    b4b2:	bc 01       	movw	r22, r24
    b4b4:	cd 01       	movw	r24, r26
    b4b6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b4ba:	dc 01       	movw	r26, r24
    b4bc:	cb 01       	movw	r24, r22
    b4be:	f8 01       	movw	r30, r16
    b4c0:	91 83       	std	Z+1, r25	; 0x01
    b4c2:	80 83       	st	Z, r24
    b4c4:	27 c0       	rjmp	.+78     	; 0xb514 <pick_drop+0x5422>
    b4c6:	ce 01       	movw	r24, r28
    b4c8:	87 53       	subi	r24, 0x37	; 55
    b4ca:	9d 4f       	sbci	r25, 0xFD	; 253
    b4cc:	20 e7       	ldi	r18, 0x70	; 112
    b4ce:	31 e0       	ldi	r19, 0x01	; 1
    b4d0:	fc 01       	movw	r30, r24
    b4d2:	31 83       	std	Z+1, r19	; 0x01
    b4d4:	20 83       	st	Z, r18
    b4d6:	ce 01       	movw	r24, r28
    b4d8:	87 53       	subi	r24, 0x37	; 55
    b4da:	9d 4f       	sbci	r25, 0xFD	; 253
    b4dc:	fc 01       	movw	r30, r24
    b4de:	80 81       	ld	r24, Z
    b4e0:	91 81       	ldd	r25, Z+1	; 0x01
    b4e2:	8c 01       	movw	r16, r24
    b4e4:	c8 01       	movw	r24, r16
    b4e6:	01 97       	sbiw	r24, 0x01	; 1
    b4e8:	f1 f7       	brne	.-4      	; 0xb4e6 <pick_drop+0x53f4>
    b4ea:	8c 01       	movw	r16, r24
    b4ec:	ce 01       	movw	r24, r28
    b4ee:	87 53       	subi	r24, 0x37	; 55
    b4f0:	9d 4f       	sbci	r25, 0xFD	; 253
    b4f2:	fc 01       	movw	r30, r24
    b4f4:	11 83       	std	Z+1, r17	; 0x01
    b4f6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b4f8:	ce 01       	movw	r24, r28
    b4fa:	89 53       	subi	r24, 0x39	; 57
    b4fc:	9d 4f       	sbci	r25, 0xFD	; 253
    b4fe:	9e 01       	movw	r18, r28
    b500:	29 53       	subi	r18, 0x39	; 57
    b502:	3d 4f       	sbci	r19, 0xFD	; 253
    b504:	f9 01       	movw	r30, r18
    b506:	20 81       	ld	r18, Z
    b508:	31 81       	ldd	r19, Z+1	; 0x01
    b50a:	21 50       	subi	r18, 0x01	; 1
    b50c:	30 40       	sbci	r19, 0x00	; 0
    b50e:	fc 01       	movw	r30, r24
    b510:	31 83       	std	Z+1, r19	; 0x01
    b512:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b514:	ce 01       	movw	r24, r28
    b516:	89 53       	subi	r24, 0x39	; 57
    b518:	9d 4f       	sbci	r25, 0xFD	; 253
    b51a:	fc 01       	movw	r30, r24
    b51c:	80 81       	ld	r24, Z
    b51e:	91 81       	ldd	r25, Z+1	; 0x01
    b520:	00 97       	sbiw	r24, 0x00	; 0
    b522:	89 f6       	brne	.-94     	; 0xb4c6 <pick_drop+0x53d4>
    b524:	2f c0       	rjmp	.+94     	; 0xb584 <pick_drop+0x5492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b526:	8e 01       	movw	r16, r28
    b528:	09 53       	subi	r16, 0x39	; 57
    b52a:	1d 4f       	sbci	r17, 0xFD	; 253
    b52c:	ce 01       	movw	r24, r28
    b52e:	8d 53       	subi	r24, 0x3D	; 61
    b530:	9d 4f       	sbci	r25, 0xFD	; 253
    b532:	fc 01       	movw	r30, r24
    b534:	60 81       	ld	r22, Z
    b536:	71 81       	ldd	r23, Z+1	; 0x01
    b538:	82 81       	ldd	r24, Z+2	; 0x02
    b53a:	93 81       	ldd	r25, Z+3	; 0x03
    b53c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b540:	dc 01       	movw	r26, r24
    b542:	cb 01       	movw	r24, r22
    b544:	f8 01       	movw	r30, r16
    b546:	91 83       	std	Z+1, r25	; 0x01
    b548:	80 83       	st	Z, r24
    b54a:	ce 01       	movw	r24, r28
    b54c:	85 53       	subi	r24, 0x35	; 53
    b54e:	9d 4f       	sbci	r25, 0xFD	; 253
    b550:	9e 01       	movw	r18, r28
    b552:	29 53       	subi	r18, 0x39	; 57
    b554:	3d 4f       	sbci	r19, 0xFD	; 253
    b556:	f9 01       	movw	r30, r18
    b558:	20 81       	ld	r18, Z
    b55a:	31 81       	ldd	r19, Z+1	; 0x01
    b55c:	fc 01       	movw	r30, r24
    b55e:	31 83       	std	Z+1, r19	; 0x01
    b560:	20 83       	st	Z, r18
    b562:	ce 01       	movw	r24, r28
    b564:	85 53       	subi	r24, 0x35	; 53
    b566:	9d 4f       	sbci	r25, 0xFD	; 253
    b568:	fc 01       	movw	r30, r24
    b56a:	80 81       	ld	r24, Z
    b56c:	91 81       	ldd	r25, Z+1	; 0x01
    b56e:	8c 01       	movw	r16, r24
    b570:	c8 01       	movw	r24, r16
    b572:	01 97       	sbiw	r24, 0x01	; 1
    b574:	f1 f7       	brne	.-4      	; 0xb572 <pick_drop+0x5480>
    b576:	8c 01       	movw	r16, r24
    b578:	ce 01       	movw	r24, r28
    b57a:	85 53       	subi	r24, 0x35	; 53
    b57c:	9d 4f       	sbci	r25, 0xFD	; 253
    b57e:	fc 01       	movw	r30, r24
    b580:	11 83       	std	Z+1, r17	; 0x01
    b582:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    b584:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    b588:	9e 01       	movw	r18, r28
    b58a:	23 53       	subi	r18, 0x33	; 51
    b58c:	3d 4f       	sbci	r19, 0xFD	; 253
    b58e:	80 e0       	ldi	r24, 0x00	; 0
    b590:	90 e0       	ldi	r25, 0x00	; 0
    b592:	a0 ea       	ldi	r26, 0xA0	; 160
    b594:	b1 e4       	ldi	r27, 0x41	; 65
    b596:	f9 01       	movw	r30, r18
    b598:	80 83       	st	Z, r24
    b59a:	91 83       	std	Z+1, r25	; 0x01
    b59c:	a2 83       	std	Z+2, r26	; 0x02
    b59e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b5a0:	8e 01       	movw	r16, r28
    b5a2:	0f 52       	subi	r16, 0x2F	; 47
    b5a4:	1d 4f       	sbci	r17, 0xFD	; 253
    b5a6:	ce 01       	movw	r24, r28
    b5a8:	83 53       	subi	r24, 0x33	; 51
    b5aa:	9d 4f       	sbci	r25, 0xFD	; 253
    b5ac:	fc 01       	movw	r30, r24
    b5ae:	60 81       	ld	r22, Z
    b5b0:	71 81       	ldd	r23, Z+1	; 0x01
    b5b2:	82 81       	ldd	r24, Z+2	; 0x02
    b5b4:	93 81       	ldd	r25, Z+3	; 0x03
    b5b6:	26 e6       	ldi	r18, 0x66	; 102
    b5b8:	36 e6       	ldi	r19, 0x66	; 102
    b5ba:	46 e6       	ldi	r20, 0x66	; 102
    b5bc:	55 e4       	ldi	r21, 0x45	; 69
    b5be:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b5c2:	dc 01       	movw	r26, r24
    b5c4:	cb 01       	movw	r24, r22
    b5c6:	f8 01       	movw	r30, r16
    b5c8:	80 83       	st	Z, r24
    b5ca:	91 83       	std	Z+1, r25	; 0x01
    b5cc:	a2 83       	std	Z+2, r26	; 0x02
    b5ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b5d0:	ce 01       	movw	r24, r28
    b5d2:	8f 52       	subi	r24, 0x2F	; 47
    b5d4:	9d 4f       	sbci	r25, 0xFD	; 253
    b5d6:	11 e0       	ldi	r17, 0x01	; 1
    b5d8:	fc 01       	movw	r30, r24
    b5da:	60 81       	ld	r22, Z
    b5dc:	71 81       	ldd	r23, Z+1	; 0x01
    b5de:	82 81       	ldd	r24, Z+2	; 0x02
    b5e0:	93 81       	ldd	r25, Z+3	; 0x03
    b5e2:	20 e0       	ldi	r18, 0x00	; 0
    b5e4:	30 e0       	ldi	r19, 0x00	; 0
    b5e6:	40 e8       	ldi	r20, 0x80	; 128
    b5e8:	5f e3       	ldi	r21, 0x3F	; 63
    b5ea:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    b5ee:	88 23       	and	r24, r24
    b5f0:	0c f0       	brlt	.+2      	; 0xb5f4 <pick_drop+0x5502>
    b5f2:	10 e0       	ldi	r17, 0x00	; 0
    b5f4:	11 23       	and	r17, r17
    b5f6:	49 f0       	breq	.+18     	; 0xb60a <pick_drop+0x5518>
		__ticks = 1;
    b5f8:	ce 01       	movw	r24, r28
    b5fa:	8b 52       	subi	r24, 0x2B	; 43
    b5fc:	9d 4f       	sbci	r25, 0xFD	; 253
    b5fe:	21 e0       	ldi	r18, 0x01	; 1
    b600:	30 e0       	ldi	r19, 0x00	; 0
    b602:	fc 01       	movw	r30, r24
    b604:	31 83       	std	Z+1, r19	; 0x01
    b606:	20 83       	st	Z, r18
    b608:	74 c0       	rjmp	.+232    	; 0xb6f2 <pick_drop+0x5600>
	else if (__tmp > 65535)
    b60a:	ce 01       	movw	r24, r28
    b60c:	8f 52       	subi	r24, 0x2F	; 47
    b60e:	9d 4f       	sbci	r25, 0xFD	; 253
    b610:	11 e0       	ldi	r17, 0x01	; 1
    b612:	fc 01       	movw	r30, r24
    b614:	60 81       	ld	r22, Z
    b616:	71 81       	ldd	r23, Z+1	; 0x01
    b618:	82 81       	ldd	r24, Z+2	; 0x02
    b61a:	93 81       	ldd	r25, Z+3	; 0x03
    b61c:	20 e0       	ldi	r18, 0x00	; 0
    b61e:	3f ef       	ldi	r19, 0xFF	; 255
    b620:	4f e7       	ldi	r20, 0x7F	; 127
    b622:	57 e4       	ldi	r21, 0x47	; 71
    b624:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    b628:	18 16       	cp	r1, r24
    b62a:	0c f0       	brlt	.+2      	; 0xb62e <pick_drop+0x553c>
    b62c:	10 e0       	ldi	r17, 0x00	; 0
    b62e:	11 23       	and	r17, r17
    b630:	09 f4       	brne	.+2      	; 0xb634 <pick_drop+0x5542>
    b632:	4d c0       	rjmp	.+154    	; 0xb6ce <pick_drop+0x55dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b634:	ce 01       	movw	r24, r28
    b636:	83 53       	subi	r24, 0x33	; 51
    b638:	9d 4f       	sbci	r25, 0xFD	; 253
    b63a:	fc 01       	movw	r30, r24
    b63c:	60 81       	ld	r22, Z
    b63e:	71 81       	ldd	r23, Z+1	; 0x01
    b640:	82 81       	ldd	r24, Z+2	; 0x02
    b642:	93 81       	ldd	r25, Z+3	; 0x03
    b644:	20 e0       	ldi	r18, 0x00	; 0
    b646:	30 e0       	ldi	r19, 0x00	; 0
    b648:	40 e2       	ldi	r20, 0x20	; 32
    b64a:	51 e4       	ldi	r21, 0x41	; 65
    b64c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b650:	dc 01       	movw	r26, r24
    b652:	cb 01       	movw	r24, r22
    b654:	8e 01       	movw	r16, r28
    b656:	0b 52       	subi	r16, 0x2B	; 43
    b658:	1d 4f       	sbci	r17, 0xFD	; 253
    b65a:	bc 01       	movw	r22, r24
    b65c:	cd 01       	movw	r24, r26
    b65e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b662:	dc 01       	movw	r26, r24
    b664:	cb 01       	movw	r24, r22
    b666:	f8 01       	movw	r30, r16
    b668:	91 83       	std	Z+1, r25	; 0x01
    b66a:	80 83       	st	Z, r24
    b66c:	27 c0       	rjmp	.+78     	; 0xb6bc <pick_drop+0x55ca>
    b66e:	ce 01       	movw	r24, r28
    b670:	89 52       	subi	r24, 0x29	; 41
    b672:	9d 4f       	sbci	r25, 0xFD	; 253
    b674:	20 e7       	ldi	r18, 0x70	; 112
    b676:	31 e0       	ldi	r19, 0x01	; 1
    b678:	fc 01       	movw	r30, r24
    b67a:	31 83       	std	Z+1, r19	; 0x01
    b67c:	20 83       	st	Z, r18
    b67e:	ce 01       	movw	r24, r28
    b680:	89 52       	subi	r24, 0x29	; 41
    b682:	9d 4f       	sbci	r25, 0xFD	; 253
    b684:	fc 01       	movw	r30, r24
    b686:	80 81       	ld	r24, Z
    b688:	91 81       	ldd	r25, Z+1	; 0x01
    b68a:	8c 01       	movw	r16, r24
    b68c:	c8 01       	movw	r24, r16
    b68e:	01 97       	sbiw	r24, 0x01	; 1
    b690:	f1 f7       	brne	.-4      	; 0xb68e <pick_drop+0x559c>
    b692:	8c 01       	movw	r16, r24
    b694:	ce 01       	movw	r24, r28
    b696:	89 52       	subi	r24, 0x29	; 41
    b698:	9d 4f       	sbci	r25, 0xFD	; 253
    b69a:	fc 01       	movw	r30, r24
    b69c:	11 83       	std	Z+1, r17	; 0x01
    b69e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b6a0:	ce 01       	movw	r24, r28
    b6a2:	8b 52       	subi	r24, 0x2B	; 43
    b6a4:	9d 4f       	sbci	r25, 0xFD	; 253
    b6a6:	9e 01       	movw	r18, r28
    b6a8:	2b 52       	subi	r18, 0x2B	; 43
    b6aa:	3d 4f       	sbci	r19, 0xFD	; 253
    b6ac:	f9 01       	movw	r30, r18
    b6ae:	20 81       	ld	r18, Z
    b6b0:	31 81       	ldd	r19, Z+1	; 0x01
    b6b2:	21 50       	subi	r18, 0x01	; 1
    b6b4:	30 40       	sbci	r19, 0x00	; 0
    b6b6:	fc 01       	movw	r30, r24
    b6b8:	31 83       	std	Z+1, r19	; 0x01
    b6ba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b6bc:	ce 01       	movw	r24, r28
    b6be:	8b 52       	subi	r24, 0x2B	; 43
    b6c0:	9d 4f       	sbci	r25, 0xFD	; 253
    b6c2:	fc 01       	movw	r30, r24
    b6c4:	80 81       	ld	r24, Z
    b6c6:	91 81       	ldd	r25, Z+1	; 0x01
    b6c8:	00 97       	sbiw	r24, 0x00	; 0
    b6ca:	89 f6       	brne	.-94     	; 0xb66e <pick_drop+0x557c>
    b6cc:	2f c0       	rjmp	.+94     	; 0xb72c <pick_drop+0x563a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b6ce:	8e 01       	movw	r16, r28
    b6d0:	0b 52       	subi	r16, 0x2B	; 43
    b6d2:	1d 4f       	sbci	r17, 0xFD	; 253
    b6d4:	ce 01       	movw	r24, r28
    b6d6:	8f 52       	subi	r24, 0x2F	; 47
    b6d8:	9d 4f       	sbci	r25, 0xFD	; 253
    b6da:	fc 01       	movw	r30, r24
    b6dc:	60 81       	ld	r22, Z
    b6de:	71 81       	ldd	r23, Z+1	; 0x01
    b6e0:	82 81       	ldd	r24, Z+2	; 0x02
    b6e2:	93 81       	ldd	r25, Z+3	; 0x03
    b6e4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b6e8:	dc 01       	movw	r26, r24
    b6ea:	cb 01       	movw	r24, r22
    b6ec:	f8 01       	movw	r30, r16
    b6ee:	91 83       	std	Z+1, r25	; 0x01
    b6f0:	80 83       	st	Z, r24
    b6f2:	ce 01       	movw	r24, r28
    b6f4:	87 52       	subi	r24, 0x27	; 39
    b6f6:	9d 4f       	sbci	r25, 0xFD	; 253
    b6f8:	9e 01       	movw	r18, r28
    b6fa:	2b 52       	subi	r18, 0x2B	; 43
    b6fc:	3d 4f       	sbci	r19, 0xFD	; 253
    b6fe:	f9 01       	movw	r30, r18
    b700:	20 81       	ld	r18, Z
    b702:	31 81       	ldd	r19, Z+1	; 0x01
    b704:	fc 01       	movw	r30, r24
    b706:	31 83       	std	Z+1, r19	; 0x01
    b708:	20 83       	st	Z, r18
    b70a:	ce 01       	movw	r24, r28
    b70c:	87 52       	subi	r24, 0x27	; 39
    b70e:	9d 4f       	sbci	r25, 0xFD	; 253
    b710:	fc 01       	movw	r30, r24
    b712:	80 81       	ld	r24, Z
    b714:	91 81       	ldd	r25, Z+1	; 0x01
    b716:	8c 01       	movw	r16, r24
    b718:	c8 01       	movw	r24, r16
    b71a:	01 97       	sbiw	r24, 0x01	; 1
    b71c:	f1 f7       	brne	.-4      	; 0xb71a <pick_drop+0x5628>
    b71e:	8c 01       	movw	r16, r24
    b720:	ce 01       	movw	r24, r28
    b722:	87 52       	subi	r24, 0x27	; 39
    b724:	9d 4f       	sbci	r25, 0xFD	; 253
    b726:	fc 01       	movw	r30, r24
    b728:	11 83       	std	Z+1, r17	; 0x01
    b72a:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(30);
    b72c:	8e e1       	ldi	r24, 0x1E	; 30
    b72e:	90 e0       	ldi	r25, 0x00	; 0
    b730:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    b734:	9e 01       	movw	r18, r28
    b736:	25 52       	subi	r18, 0x25	; 37
    b738:	3d 4f       	sbci	r19, 0xFD	; 253
    b73a:	80 e0       	ldi	r24, 0x00	; 0
    b73c:	90 e0       	ldi	r25, 0x00	; 0
    b73e:	a0 ea       	ldi	r26, 0xA0	; 160
    b740:	b1 e4       	ldi	r27, 0x41	; 65
    b742:	f9 01       	movw	r30, r18
    b744:	80 83       	st	Z, r24
    b746:	91 83       	std	Z+1, r25	; 0x01
    b748:	a2 83       	std	Z+2, r26	; 0x02
    b74a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b74c:	8e 01       	movw	r16, r28
    b74e:	01 52       	subi	r16, 0x21	; 33
    b750:	1d 4f       	sbci	r17, 0xFD	; 253
    b752:	ce 01       	movw	r24, r28
    b754:	85 52       	subi	r24, 0x25	; 37
    b756:	9d 4f       	sbci	r25, 0xFD	; 253
    b758:	fc 01       	movw	r30, r24
    b75a:	60 81       	ld	r22, Z
    b75c:	71 81       	ldd	r23, Z+1	; 0x01
    b75e:	82 81       	ldd	r24, Z+2	; 0x02
    b760:	93 81       	ldd	r25, Z+3	; 0x03
    b762:	26 e6       	ldi	r18, 0x66	; 102
    b764:	36 e6       	ldi	r19, 0x66	; 102
    b766:	46 e6       	ldi	r20, 0x66	; 102
    b768:	55 e4       	ldi	r21, 0x45	; 69
    b76a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b76e:	dc 01       	movw	r26, r24
    b770:	cb 01       	movw	r24, r22
    b772:	f8 01       	movw	r30, r16
    b774:	80 83       	st	Z, r24
    b776:	91 83       	std	Z+1, r25	; 0x01
    b778:	a2 83       	std	Z+2, r26	; 0x02
    b77a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b77c:	ce 01       	movw	r24, r28
    b77e:	81 52       	subi	r24, 0x21	; 33
    b780:	9d 4f       	sbci	r25, 0xFD	; 253
    b782:	11 e0       	ldi	r17, 0x01	; 1
    b784:	fc 01       	movw	r30, r24
    b786:	60 81       	ld	r22, Z
    b788:	71 81       	ldd	r23, Z+1	; 0x01
    b78a:	82 81       	ldd	r24, Z+2	; 0x02
    b78c:	93 81       	ldd	r25, Z+3	; 0x03
    b78e:	20 e0       	ldi	r18, 0x00	; 0
    b790:	30 e0       	ldi	r19, 0x00	; 0
    b792:	40 e8       	ldi	r20, 0x80	; 128
    b794:	5f e3       	ldi	r21, 0x3F	; 63
    b796:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    b79a:	88 23       	and	r24, r24
    b79c:	0c f0       	brlt	.+2      	; 0xb7a0 <pick_drop+0x56ae>
    b79e:	10 e0       	ldi	r17, 0x00	; 0
    b7a0:	11 23       	and	r17, r17
    b7a2:	49 f0       	breq	.+18     	; 0xb7b6 <pick_drop+0x56c4>
		__ticks = 1;
    b7a4:	ce 01       	movw	r24, r28
    b7a6:	8d 51       	subi	r24, 0x1D	; 29
    b7a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b7aa:	21 e0       	ldi	r18, 0x01	; 1
    b7ac:	30 e0       	ldi	r19, 0x00	; 0
    b7ae:	fc 01       	movw	r30, r24
    b7b0:	31 83       	std	Z+1, r19	; 0x01
    b7b2:	20 83       	st	Z, r18
    b7b4:	75 c0       	rjmp	.+234    	; 0xb8a0 <pick_drop+0x57ae>
	else if (__tmp > 65535)
    b7b6:	ce 01       	movw	r24, r28
    b7b8:	81 52       	subi	r24, 0x21	; 33
    b7ba:	9d 4f       	sbci	r25, 0xFD	; 253
    b7bc:	11 e0       	ldi	r17, 0x01	; 1
    b7be:	fc 01       	movw	r30, r24
    b7c0:	60 81       	ld	r22, Z
    b7c2:	71 81       	ldd	r23, Z+1	; 0x01
    b7c4:	82 81       	ldd	r24, Z+2	; 0x02
    b7c6:	93 81       	ldd	r25, Z+3	; 0x03
    b7c8:	20 e0       	ldi	r18, 0x00	; 0
    b7ca:	3f ef       	ldi	r19, 0xFF	; 255
    b7cc:	4f e7       	ldi	r20, 0x7F	; 127
    b7ce:	57 e4       	ldi	r21, 0x47	; 71
    b7d0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    b7d4:	18 16       	cp	r1, r24
    b7d6:	0c f0       	brlt	.+2      	; 0xb7da <pick_drop+0x56e8>
    b7d8:	10 e0       	ldi	r17, 0x00	; 0
    b7da:	11 23       	and	r17, r17
    b7dc:	09 f4       	brne	.+2      	; 0xb7e0 <pick_drop+0x56ee>
    b7de:	4e c0       	rjmp	.+156    	; 0xb87c <pick_drop+0x578a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b7e0:	ce 01       	movw	r24, r28
    b7e2:	85 52       	subi	r24, 0x25	; 37
    b7e4:	9d 4f       	sbci	r25, 0xFD	; 253
    b7e6:	fc 01       	movw	r30, r24
    b7e8:	60 81       	ld	r22, Z
    b7ea:	71 81       	ldd	r23, Z+1	; 0x01
    b7ec:	82 81       	ldd	r24, Z+2	; 0x02
    b7ee:	93 81       	ldd	r25, Z+3	; 0x03
    b7f0:	20 e0       	ldi	r18, 0x00	; 0
    b7f2:	30 e0       	ldi	r19, 0x00	; 0
    b7f4:	40 e2       	ldi	r20, 0x20	; 32
    b7f6:	51 e4       	ldi	r21, 0x41	; 65
    b7f8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b7fc:	dc 01       	movw	r26, r24
    b7fe:	cb 01       	movw	r24, r22
    b800:	8e 01       	movw	r16, r28
    b802:	0d 51       	subi	r16, 0x1D	; 29
    b804:	1d 4f       	sbci	r17, 0xFD	; 253
    b806:	bc 01       	movw	r22, r24
    b808:	cd 01       	movw	r24, r26
    b80a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b80e:	dc 01       	movw	r26, r24
    b810:	cb 01       	movw	r24, r22
    b812:	f8 01       	movw	r30, r16
    b814:	91 83       	std	Z+1, r25	; 0x01
    b816:	80 83       	st	Z, r24
    b818:	27 c0       	rjmp	.+78     	; 0xb868 <pick_drop+0x5776>
    b81a:	ce 01       	movw	r24, r28
    b81c:	8b 51       	subi	r24, 0x1B	; 27
    b81e:	9d 4f       	sbci	r25, 0xFD	; 253
    b820:	20 e7       	ldi	r18, 0x70	; 112
    b822:	31 e0       	ldi	r19, 0x01	; 1
    b824:	fc 01       	movw	r30, r24
    b826:	31 83       	std	Z+1, r19	; 0x01
    b828:	20 83       	st	Z, r18
    b82a:	ce 01       	movw	r24, r28
    b82c:	8b 51       	subi	r24, 0x1B	; 27
    b82e:	9d 4f       	sbci	r25, 0xFD	; 253
    b830:	fc 01       	movw	r30, r24
    b832:	80 81       	ld	r24, Z
    b834:	91 81       	ldd	r25, Z+1	; 0x01
    b836:	8c 01       	movw	r16, r24
    b838:	c8 01       	movw	r24, r16
    b83a:	01 97       	sbiw	r24, 0x01	; 1
    b83c:	f1 f7       	brne	.-4      	; 0xb83a <pick_drop+0x5748>
    b83e:	8c 01       	movw	r16, r24
    b840:	ce 01       	movw	r24, r28
    b842:	8b 51       	subi	r24, 0x1B	; 27
    b844:	9d 4f       	sbci	r25, 0xFD	; 253
    b846:	fc 01       	movw	r30, r24
    b848:	11 83       	std	Z+1, r17	; 0x01
    b84a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b84c:	ce 01       	movw	r24, r28
    b84e:	8d 51       	subi	r24, 0x1D	; 29
    b850:	9d 4f       	sbci	r25, 0xFD	; 253
    b852:	9e 01       	movw	r18, r28
    b854:	2d 51       	subi	r18, 0x1D	; 29
    b856:	3d 4f       	sbci	r19, 0xFD	; 253
    b858:	f9 01       	movw	r30, r18
    b85a:	20 81       	ld	r18, Z
    b85c:	31 81       	ldd	r19, Z+1	; 0x01
    b85e:	21 50       	subi	r18, 0x01	; 1
    b860:	30 40       	sbci	r19, 0x00	; 0
    b862:	fc 01       	movw	r30, r24
    b864:	31 83       	std	Z+1, r19	; 0x01
    b866:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b868:	ce 01       	movw	r24, r28
    b86a:	8d 51       	subi	r24, 0x1D	; 29
    b86c:	9d 4f       	sbci	r25, 0xFD	; 253
    b86e:	fc 01       	movw	r30, r24
    b870:	80 81       	ld	r24, Z
    b872:	91 81       	ldd	r25, Z+1	; 0x01
    b874:	00 97       	sbiw	r24, 0x00	; 0
    b876:	89 f6       	brne	.-94     	; 0xb81a <pick_drop+0x5728>
    b878:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b87c:	8e 01       	movw	r16, r28
    b87e:	0d 51       	subi	r16, 0x1D	; 29
    b880:	1d 4f       	sbci	r17, 0xFD	; 253
    b882:	ce 01       	movw	r24, r28
    b884:	81 52       	subi	r24, 0x21	; 33
    b886:	9d 4f       	sbci	r25, 0xFD	; 253
    b888:	fc 01       	movw	r30, r24
    b88a:	60 81       	ld	r22, Z
    b88c:	71 81       	ldd	r23, Z+1	; 0x01
    b88e:	82 81       	ldd	r24, Z+2	; 0x02
    b890:	93 81       	ldd	r25, Z+3	; 0x03
    b892:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b896:	dc 01       	movw	r26, r24
    b898:	cb 01       	movw	r24, r22
    b89a:	f8 01       	movw	r30, r16
    b89c:	91 83       	std	Z+1, r25	; 0x01
    b89e:	80 83       	st	Z, r24
    b8a0:	ce 01       	movw	r24, r28
    b8a2:	89 51       	subi	r24, 0x19	; 25
    b8a4:	9d 4f       	sbci	r25, 0xFD	; 253
    b8a6:	9e 01       	movw	r18, r28
    b8a8:	2d 51       	subi	r18, 0x1D	; 29
    b8aa:	3d 4f       	sbci	r19, 0xFD	; 253
    b8ac:	f9 01       	movw	r30, r18
    b8ae:	20 81       	ld	r18, Z
    b8b0:	31 81       	ldd	r19, Z+1	; 0x01
    b8b2:	fc 01       	movw	r30, r24
    b8b4:	31 83       	std	Z+1, r19	; 0x01
    b8b6:	20 83       	st	Z, r18
    b8b8:	ce 01       	movw	r24, r28
    b8ba:	89 51       	subi	r24, 0x19	; 25
    b8bc:	9d 4f       	sbci	r25, 0xFD	; 253
    b8be:	fc 01       	movw	r30, r24
    b8c0:	80 81       	ld	r24, Z
    b8c2:	91 81       	ldd	r25, Z+1	; 0x01
    b8c4:	8c 01       	movw	r16, r24
    b8c6:	c8 01       	movw	r24, r16
    b8c8:	01 97       	sbiw	r24, 0x01	; 1
    b8ca:	f1 f7       	brne	.-4      	; 0xb8c8 <pick_drop+0x57d6>
    b8cc:	8c 01       	movw	r16, r24
    b8ce:	ce 01       	movw	r24, r28
    b8d0:	89 51       	subi	r24, 0x19	; 25
    b8d2:	9d 4f       	sbci	r25, 0xFD	; 253
    b8d4:	fc 01       	movw	r30, r24
    b8d6:	11 83       	std	Z+1, r17	; 0x01
    b8d8:	00 83       	st	Z, r16
    b8da:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
    b8de:	9e 01       	movw	r18, r28
    b8e0:	27 51       	subi	r18, 0x17	; 23
    b8e2:	3d 4f       	sbci	r19, 0xFD	; 253
    b8e4:	80 e0       	ldi	r24, 0x00	; 0
    b8e6:	90 e0       	ldi	r25, 0x00	; 0
    b8e8:	a0 ea       	ldi	r26, 0xA0	; 160
    b8ea:	b1 e4       	ldi	r27, 0x41	; 65
    b8ec:	f9 01       	movw	r30, r18
    b8ee:	80 83       	st	Z, r24
    b8f0:	91 83       	std	Z+1, r25	; 0x01
    b8f2:	a2 83       	std	Z+2, r26	; 0x02
    b8f4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    b8f6:	8e 01       	movw	r16, r28
    b8f8:	03 51       	subi	r16, 0x13	; 19
    b8fa:	1d 4f       	sbci	r17, 0xFD	; 253
    b8fc:	ce 01       	movw	r24, r28
    b8fe:	87 51       	subi	r24, 0x17	; 23
    b900:	9d 4f       	sbci	r25, 0xFD	; 253
    b902:	fc 01       	movw	r30, r24
    b904:	60 81       	ld	r22, Z
    b906:	71 81       	ldd	r23, Z+1	; 0x01
    b908:	82 81       	ldd	r24, Z+2	; 0x02
    b90a:	93 81       	ldd	r25, Z+3	; 0x03
    b90c:	26 e6       	ldi	r18, 0x66	; 102
    b90e:	36 e6       	ldi	r19, 0x66	; 102
    b910:	46 e6       	ldi	r20, 0x66	; 102
    b912:	55 e4       	ldi	r21, 0x45	; 69
    b914:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b918:	dc 01       	movw	r26, r24
    b91a:	cb 01       	movw	r24, r22
    b91c:	f8 01       	movw	r30, r16
    b91e:	80 83       	st	Z, r24
    b920:	91 83       	std	Z+1, r25	; 0x01
    b922:	a2 83       	std	Z+2, r26	; 0x02
    b924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    b926:	ce 01       	movw	r24, r28
    b928:	83 51       	subi	r24, 0x13	; 19
    b92a:	9d 4f       	sbci	r25, 0xFD	; 253
    b92c:	11 e0       	ldi	r17, 0x01	; 1
    b92e:	fc 01       	movw	r30, r24
    b930:	60 81       	ld	r22, Z
    b932:	71 81       	ldd	r23, Z+1	; 0x01
    b934:	82 81       	ldd	r24, Z+2	; 0x02
    b936:	93 81       	ldd	r25, Z+3	; 0x03
    b938:	20 e0       	ldi	r18, 0x00	; 0
    b93a:	30 e0       	ldi	r19, 0x00	; 0
    b93c:	40 e8       	ldi	r20, 0x80	; 128
    b93e:	5f e3       	ldi	r21, 0x3F	; 63
    b940:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    b944:	88 23       	and	r24, r24
    b946:	0c f0       	brlt	.+2      	; 0xb94a <pick_drop+0x5858>
    b948:	10 e0       	ldi	r17, 0x00	; 0
    b94a:	11 23       	and	r17, r17
    b94c:	49 f0       	breq	.+18     	; 0xb960 <pick_drop+0x586e>
		__ticks = 1;
    b94e:	ce 01       	movw	r24, r28
    b950:	8f 50       	subi	r24, 0x0F	; 15
    b952:	9d 4f       	sbci	r25, 0xFD	; 253
    b954:	21 e0       	ldi	r18, 0x01	; 1
    b956:	30 e0       	ldi	r19, 0x00	; 0
    b958:	fc 01       	movw	r30, r24
    b95a:	31 83       	std	Z+1, r19	; 0x01
    b95c:	20 83       	st	Z, r18
    b95e:	74 c0       	rjmp	.+232    	; 0xba48 <pick_drop+0x5956>
	else if (__tmp > 65535)
    b960:	ce 01       	movw	r24, r28
    b962:	83 51       	subi	r24, 0x13	; 19
    b964:	9d 4f       	sbci	r25, 0xFD	; 253
    b966:	11 e0       	ldi	r17, 0x01	; 1
    b968:	fc 01       	movw	r30, r24
    b96a:	60 81       	ld	r22, Z
    b96c:	71 81       	ldd	r23, Z+1	; 0x01
    b96e:	82 81       	ldd	r24, Z+2	; 0x02
    b970:	93 81       	ldd	r25, Z+3	; 0x03
    b972:	20 e0       	ldi	r18, 0x00	; 0
    b974:	3f ef       	ldi	r19, 0xFF	; 255
    b976:	4f e7       	ldi	r20, 0x7F	; 127
    b978:	57 e4       	ldi	r21, 0x47	; 71
    b97a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    b97e:	18 16       	cp	r1, r24
    b980:	0c f0       	brlt	.+2      	; 0xb984 <pick_drop+0x5892>
    b982:	10 e0       	ldi	r17, 0x00	; 0
    b984:	11 23       	and	r17, r17
    b986:	09 f4       	brne	.+2      	; 0xb98a <pick_drop+0x5898>
    b988:	4d c0       	rjmp	.+154    	; 0xba24 <pick_drop+0x5932>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b98a:	ce 01       	movw	r24, r28
    b98c:	87 51       	subi	r24, 0x17	; 23
    b98e:	9d 4f       	sbci	r25, 0xFD	; 253
    b990:	fc 01       	movw	r30, r24
    b992:	60 81       	ld	r22, Z
    b994:	71 81       	ldd	r23, Z+1	; 0x01
    b996:	82 81       	ldd	r24, Z+2	; 0x02
    b998:	93 81       	ldd	r25, Z+3	; 0x03
    b99a:	20 e0       	ldi	r18, 0x00	; 0
    b99c:	30 e0       	ldi	r19, 0x00	; 0
    b99e:	40 e2       	ldi	r20, 0x20	; 32
    b9a0:	51 e4       	ldi	r21, 0x41	; 65
    b9a2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    b9a6:	dc 01       	movw	r26, r24
    b9a8:	cb 01       	movw	r24, r22
    b9aa:	8e 01       	movw	r16, r28
    b9ac:	0f 50       	subi	r16, 0x0F	; 15
    b9ae:	1d 4f       	sbci	r17, 0xFD	; 253
    b9b0:	bc 01       	movw	r22, r24
    b9b2:	cd 01       	movw	r24, r26
    b9b4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    b9b8:	dc 01       	movw	r26, r24
    b9ba:	cb 01       	movw	r24, r22
    b9bc:	f8 01       	movw	r30, r16
    b9be:	91 83       	std	Z+1, r25	; 0x01
    b9c0:	80 83       	st	Z, r24
    b9c2:	27 c0       	rjmp	.+78     	; 0xba12 <pick_drop+0x5920>
    b9c4:	ce 01       	movw	r24, r28
    b9c6:	8d 50       	subi	r24, 0x0D	; 13
    b9c8:	9d 4f       	sbci	r25, 0xFD	; 253
    b9ca:	20 e7       	ldi	r18, 0x70	; 112
    b9cc:	31 e0       	ldi	r19, 0x01	; 1
    b9ce:	fc 01       	movw	r30, r24
    b9d0:	31 83       	std	Z+1, r19	; 0x01
    b9d2:	20 83       	st	Z, r18
    b9d4:	ce 01       	movw	r24, r28
    b9d6:	8d 50       	subi	r24, 0x0D	; 13
    b9d8:	9d 4f       	sbci	r25, 0xFD	; 253
    b9da:	fc 01       	movw	r30, r24
    b9dc:	80 81       	ld	r24, Z
    b9de:	91 81       	ldd	r25, Z+1	; 0x01
    b9e0:	8c 01       	movw	r16, r24
    b9e2:	c8 01       	movw	r24, r16
    b9e4:	01 97       	sbiw	r24, 0x01	; 1
    b9e6:	f1 f7       	brne	.-4      	; 0xb9e4 <pick_drop+0x58f2>
    b9e8:	8c 01       	movw	r16, r24
    b9ea:	ce 01       	movw	r24, r28
    b9ec:	8d 50       	subi	r24, 0x0D	; 13
    b9ee:	9d 4f       	sbci	r25, 0xFD	; 253
    b9f0:	fc 01       	movw	r30, r24
    b9f2:	11 83       	std	Z+1, r17	; 0x01
    b9f4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b9f6:	ce 01       	movw	r24, r28
    b9f8:	8f 50       	subi	r24, 0x0F	; 15
    b9fa:	9d 4f       	sbci	r25, 0xFD	; 253
    b9fc:	9e 01       	movw	r18, r28
    b9fe:	2f 50       	subi	r18, 0x0F	; 15
    ba00:	3d 4f       	sbci	r19, 0xFD	; 253
    ba02:	f9 01       	movw	r30, r18
    ba04:	20 81       	ld	r18, Z
    ba06:	31 81       	ldd	r19, Z+1	; 0x01
    ba08:	21 50       	subi	r18, 0x01	; 1
    ba0a:	30 40       	sbci	r19, 0x00	; 0
    ba0c:	fc 01       	movw	r30, r24
    ba0e:	31 83       	std	Z+1, r19	; 0x01
    ba10:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ba12:	ce 01       	movw	r24, r28
    ba14:	8f 50       	subi	r24, 0x0F	; 15
    ba16:	9d 4f       	sbci	r25, 0xFD	; 253
    ba18:	fc 01       	movw	r30, r24
    ba1a:	80 81       	ld	r24, Z
    ba1c:	91 81       	ldd	r25, Z+1	; 0x01
    ba1e:	00 97       	sbiw	r24, 0x00	; 0
    ba20:	89 f6       	brne	.-94     	; 0xb9c4 <pick_drop+0x58d2>
    ba22:	2f c0       	rjmp	.+94     	; 0xba82 <pick_drop+0x5990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ba24:	8e 01       	movw	r16, r28
    ba26:	0f 50       	subi	r16, 0x0F	; 15
    ba28:	1d 4f       	sbci	r17, 0xFD	; 253
    ba2a:	ce 01       	movw	r24, r28
    ba2c:	83 51       	subi	r24, 0x13	; 19
    ba2e:	9d 4f       	sbci	r25, 0xFD	; 253
    ba30:	fc 01       	movw	r30, r24
    ba32:	60 81       	ld	r22, Z
    ba34:	71 81       	ldd	r23, Z+1	; 0x01
    ba36:	82 81       	ldd	r24, Z+2	; 0x02
    ba38:	93 81       	ldd	r25, Z+3	; 0x03
    ba3a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ba3e:	dc 01       	movw	r26, r24
    ba40:	cb 01       	movw	r24, r22
    ba42:	f8 01       	movw	r30, r16
    ba44:	91 83       	std	Z+1, r25	; 0x01
    ba46:	80 83       	st	Z, r24
    ba48:	ce 01       	movw	r24, r28
    ba4a:	8b 50       	subi	r24, 0x0B	; 11
    ba4c:	9d 4f       	sbci	r25, 0xFD	; 253
    ba4e:	9e 01       	movw	r18, r28
    ba50:	2f 50       	subi	r18, 0x0F	; 15
    ba52:	3d 4f       	sbci	r19, 0xFD	; 253
    ba54:	f9 01       	movw	r30, r18
    ba56:	20 81       	ld	r18, Z
    ba58:	31 81       	ldd	r19, Z+1	; 0x01
    ba5a:	fc 01       	movw	r30, r24
    ba5c:	31 83       	std	Z+1, r19	; 0x01
    ba5e:	20 83       	st	Z, r18
    ba60:	ce 01       	movw	r24, r28
    ba62:	8b 50       	subi	r24, 0x0B	; 11
    ba64:	9d 4f       	sbci	r25, 0xFD	; 253
    ba66:	fc 01       	movw	r30, r24
    ba68:	80 81       	ld	r24, Z
    ba6a:	91 81       	ldd	r25, Z+1	; 0x01
    ba6c:	8c 01       	movw	r16, r24
    ba6e:	c8 01       	movw	r24, r16
    ba70:	01 97       	sbiw	r24, 0x01	; 1
    ba72:	f1 f7       	brne	.-4      	; 0xba70 <pick_drop+0x597e>
    ba74:	8c 01       	movw	r16, r24
    ba76:	ce 01       	movw	r24, r28
    ba78:	8b 50       	subi	r24, 0x0B	; 11
    ba7a:	9d 4f       	sbci	r25, 0xFD	; 253
    ba7c:	fc 01       	movw	r30, r24
    ba7e:	11 83       	std	Z+1, r17	; 0x01
    ba80:	00 83       	st	Z, r16
			_delay_ms(20);
			}
			else
			{
				_delay_ms(20);
				forward_mm(65);
    ba82:	81 e4       	ldi	r24, 0x41	; 65
    ba84:	90 e0       	ldi	r25, 0x00	; 0
    ba86:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    ba8a:	9e 01       	movw	r18, r28
    ba8c:	29 50       	subi	r18, 0x09	; 9
    ba8e:	3d 4f       	sbci	r19, 0xFD	; 253
    ba90:	80 e0       	ldi	r24, 0x00	; 0
    ba92:	90 e0       	ldi	r25, 0x00	; 0
    ba94:	a0 ea       	ldi	r26, 0xA0	; 160
    ba96:	b1 e4       	ldi	r27, 0x41	; 65
    ba98:	f9 01       	movw	r30, r18
    ba9a:	80 83       	st	Z, r24
    ba9c:	91 83       	std	Z+1, r25	; 0x01
    ba9e:	a2 83       	std	Z+2, r26	; 0x02
    baa0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    baa2:	8e 01       	movw	r16, r28
    baa4:	05 50       	subi	r16, 0x05	; 5
    baa6:	1d 4f       	sbci	r17, 0xFD	; 253
    baa8:	ce 01       	movw	r24, r28
    baaa:	89 50       	subi	r24, 0x09	; 9
    baac:	9d 4f       	sbci	r25, 0xFD	; 253
    baae:	fc 01       	movw	r30, r24
    bab0:	60 81       	ld	r22, Z
    bab2:	71 81       	ldd	r23, Z+1	; 0x01
    bab4:	82 81       	ldd	r24, Z+2	; 0x02
    bab6:	93 81       	ldd	r25, Z+3	; 0x03
    bab8:	26 e6       	ldi	r18, 0x66	; 102
    baba:	36 e6       	ldi	r19, 0x66	; 102
    babc:	46 e6       	ldi	r20, 0x66	; 102
    babe:	55 e4       	ldi	r21, 0x45	; 69
    bac0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    bac4:	dc 01       	movw	r26, r24
    bac6:	cb 01       	movw	r24, r22
    bac8:	f8 01       	movw	r30, r16
    baca:	80 83       	st	Z, r24
    bacc:	91 83       	std	Z+1, r25	; 0x01
    bace:	a2 83       	std	Z+2, r26	; 0x02
    bad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bad2:	ce 01       	movw	r24, r28
    bad4:	85 50       	subi	r24, 0x05	; 5
    bad6:	9d 4f       	sbci	r25, 0xFD	; 253
    bad8:	11 e0       	ldi	r17, 0x01	; 1
    bada:	fc 01       	movw	r30, r24
    badc:	60 81       	ld	r22, Z
    bade:	71 81       	ldd	r23, Z+1	; 0x01
    bae0:	82 81       	ldd	r24, Z+2	; 0x02
    bae2:	93 81       	ldd	r25, Z+3	; 0x03
    bae4:	20 e0       	ldi	r18, 0x00	; 0
    bae6:	30 e0       	ldi	r19, 0x00	; 0
    bae8:	40 e8       	ldi	r20, 0x80	; 128
    baea:	5f e3       	ldi	r21, 0x3F	; 63
    baec:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    baf0:	88 23       	and	r24, r24
    baf2:	0c f0       	brlt	.+2      	; 0xbaf6 <pick_drop+0x5a04>
    baf4:	10 e0       	ldi	r17, 0x00	; 0
    baf6:	11 23       	and	r17, r17
    baf8:	49 f0       	breq	.+18     	; 0xbb0c <pick_drop+0x5a1a>
		__ticks = 1;
    bafa:	ce 01       	movw	r24, r28
    bafc:	81 50       	subi	r24, 0x01	; 1
    bafe:	9d 4f       	sbci	r25, 0xFD	; 253
    bb00:	21 e0       	ldi	r18, 0x01	; 1
    bb02:	30 e0       	ldi	r19, 0x00	; 0
    bb04:	fc 01       	movw	r30, r24
    bb06:	31 83       	std	Z+1, r19	; 0x01
    bb08:	20 83       	st	Z, r18
    bb0a:	74 c0       	rjmp	.+232    	; 0xbbf4 <pick_drop+0x5b02>
	else if (__tmp > 65535)
    bb0c:	ce 01       	movw	r24, r28
    bb0e:	85 50       	subi	r24, 0x05	; 5
    bb10:	9d 4f       	sbci	r25, 0xFD	; 253
    bb12:	11 e0       	ldi	r17, 0x01	; 1
    bb14:	fc 01       	movw	r30, r24
    bb16:	60 81       	ld	r22, Z
    bb18:	71 81       	ldd	r23, Z+1	; 0x01
    bb1a:	82 81       	ldd	r24, Z+2	; 0x02
    bb1c:	93 81       	ldd	r25, Z+3	; 0x03
    bb1e:	20 e0       	ldi	r18, 0x00	; 0
    bb20:	3f ef       	ldi	r19, 0xFF	; 255
    bb22:	4f e7       	ldi	r20, 0x7F	; 127
    bb24:	57 e4       	ldi	r21, 0x47	; 71
    bb26:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    bb2a:	18 16       	cp	r1, r24
    bb2c:	0c f0       	brlt	.+2      	; 0xbb30 <pick_drop+0x5a3e>
    bb2e:	10 e0       	ldi	r17, 0x00	; 0
    bb30:	11 23       	and	r17, r17
    bb32:	09 f4       	brne	.+2      	; 0xbb36 <pick_drop+0x5a44>
    bb34:	4d c0       	rjmp	.+154    	; 0xbbd0 <pick_drop+0x5ade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bb36:	ce 01       	movw	r24, r28
    bb38:	89 50       	subi	r24, 0x09	; 9
    bb3a:	9d 4f       	sbci	r25, 0xFD	; 253
    bb3c:	fc 01       	movw	r30, r24
    bb3e:	60 81       	ld	r22, Z
    bb40:	71 81       	ldd	r23, Z+1	; 0x01
    bb42:	82 81       	ldd	r24, Z+2	; 0x02
    bb44:	93 81       	ldd	r25, Z+3	; 0x03
    bb46:	20 e0       	ldi	r18, 0x00	; 0
    bb48:	30 e0       	ldi	r19, 0x00	; 0
    bb4a:	40 e2       	ldi	r20, 0x20	; 32
    bb4c:	51 e4       	ldi	r21, 0x41	; 65
    bb4e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    bb52:	dc 01       	movw	r26, r24
    bb54:	cb 01       	movw	r24, r22
    bb56:	8e 01       	movw	r16, r28
    bb58:	01 50       	subi	r16, 0x01	; 1
    bb5a:	1d 4f       	sbci	r17, 0xFD	; 253
    bb5c:	bc 01       	movw	r22, r24
    bb5e:	cd 01       	movw	r24, r26
    bb60:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    bb64:	dc 01       	movw	r26, r24
    bb66:	cb 01       	movw	r24, r22
    bb68:	f8 01       	movw	r30, r16
    bb6a:	91 83       	std	Z+1, r25	; 0x01
    bb6c:	80 83       	st	Z, r24
    bb6e:	27 c0       	rjmp	.+78     	; 0xbbbe <pick_drop+0x5acc>
    bb70:	ce 01       	movw	r24, r28
    bb72:	8f 5f       	subi	r24, 0xFF	; 255
    bb74:	9c 4f       	sbci	r25, 0xFC	; 252
    bb76:	20 e7       	ldi	r18, 0x70	; 112
    bb78:	31 e0       	ldi	r19, 0x01	; 1
    bb7a:	fc 01       	movw	r30, r24
    bb7c:	31 83       	std	Z+1, r19	; 0x01
    bb7e:	20 83       	st	Z, r18
    bb80:	ce 01       	movw	r24, r28
    bb82:	8f 5f       	subi	r24, 0xFF	; 255
    bb84:	9c 4f       	sbci	r25, 0xFC	; 252
    bb86:	fc 01       	movw	r30, r24
    bb88:	80 81       	ld	r24, Z
    bb8a:	91 81       	ldd	r25, Z+1	; 0x01
    bb8c:	8c 01       	movw	r16, r24
    bb8e:	c8 01       	movw	r24, r16
    bb90:	01 97       	sbiw	r24, 0x01	; 1
    bb92:	f1 f7       	brne	.-4      	; 0xbb90 <pick_drop+0x5a9e>
    bb94:	8c 01       	movw	r16, r24
    bb96:	ce 01       	movw	r24, r28
    bb98:	8f 5f       	subi	r24, 0xFF	; 255
    bb9a:	9c 4f       	sbci	r25, 0xFC	; 252
    bb9c:	fc 01       	movw	r30, r24
    bb9e:	11 83       	std	Z+1, r17	; 0x01
    bba0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bba2:	ce 01       	movw	r24, r28
    bba4:	81 50       	subi	r24, 0x01	; 1
    bba6:	9d 4f       	sbci	r25, 0xFD	; 253
    bba8:	9e 01       	movw	r18, r28
    bbaa:	21 50       	subi	r18, 0x01	; 1
    bbac:	3d 4f       	sbci	r19, 0xFD	; 253
    bbae:	f9 01       	movw	r30, r18
    bbb0:	20 81       	ld	r18, Z
    bbb2:	31 81       	ldd	r19, Z+1	; 0x01
    bbb4:	21 50       	subi	r18, 0x01	; 1
    bbb6:	30 40       	sbci	r19, 0x00	; 0
    bbb8:	fc 01       	movw	r30, r24
    bbba:	31 83       	std	Z+1, r19	; 0x01
    bbbc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bbbe:	ce 01       	movw	r24, r28
    bbc0:	81 50       	subi	r24, 0x01	; 1
    bbc2:	9d 4f       	sbci	r25, 0xFD	; 253
    bbc4:	fc 01       	movw	r30, r24
    bbc6:	80 81       	ld	r24, Z
    bbc8:	91 81       	ldd	r25, Z+1	; 0x01
    bbca:	00 97       	sbiw	r24, 0x00	; 0
    bbcc:	89 f6       	brne	.-94     	; 0xbb70 <pick_drop+0x5a7e>
    bbce:	2f c0       	rjmp	.+94     	; 0xbc2e <pick_drop+0x5b3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bbd0:	8e 01       	movw	r16, r28
    bbd2:	01 50       	subi	r16, 0x01	; 1
    bbd4:	1d 4f       	sbci	r17, 0xFD	; 253
    bbd6:	ce 01       	movw	r24, r28
    bbd8:	85 50       	subi	r24, 0x05	; 5
    bbda:	9d 4f       	sbci	r25, 0xFD	; 253
    bbdc:	fc 01       	movw	r30, r24
    bbde:	60 81       	ld	r22, Z
    bbe0:	71 81       	ldd	r23, Z+1	; 0x01
    bbe2:	82 81       	ldd	r24, Z+2	; 0x02
    bbe4:	93 81       	ldd	r25, Z+3	; 0x03
    bbe6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    bbea:	dc 01       	movw	r26, r24
    bbec:	cb 01       	movw	r24, r22
    bbee:	f8 01       	movw	r30, r16
    bbf0:	91 83       	std	Z+1, r25	; 0x01
    bbf2:	80 83       	st	Z, r24
    bbf4:	ce 01       	movw	r24, r28
    bbf6:	8d 5f       	subi	r24, 0xFD	; 253
    bbf8:	9c 4f       	sbci	r25, 0xFC	; 252
    bbfa:	9e 01       	movw	r18, r28
    bbfc:	21 50       	subi	r18, 0x01	; 1
    bbfe:	3d 4f       	sbci	r19, 0xFD	; 253
    bc00:	f9 01       	movw	r30, r18
    bc02:	20 81       	ld	r18, Z
    bc04:	31 81       	ldd	r19, Z+1	; 0x01
    bc06:	fc 01       	movw	r30, r24
    bc08:	31 83       	std	Z+1, r19	; 0x01
    bc0a:	20 83       	st	Z, r18
    bc0c:	ce 01       	movw	r24, r28
    bc0e:	8d 5f       	subi	r24, 0xFD	; 253
    bc10:	9c 4f       	sbci	r25, 0xFC	; 252
    bc12:	fc 01       	movw	r30, r24
    bc14:	80 81       	ld	r24, Z
    bc16:	91 81       	ldd	r25, Z+1	; 0x01
    bc18:	8c 01       	movw	r16, r24
    bc1a:	c8 01       	movw	r24, r16
    bc1c:	01 97       	sbiw	r24, 0x01	; 1
    bc1e:	f1 f7       	brne	.-4      	; 0xbc1c <pick_drop+0x5b2a>
    bc20:	8c 01       	movw	r16, r24
    bc22:	ce 01       	movw	r24, r28
    bc24:	8d 5f       	subi	r24, 0xFD	; 253
    bc26:	9c 4f       	sbci	r25, 0xFC	; 252
    bc28:	fc 01       	movw	r30, r24
    bc2a:	11 83       	std	Z+1, r17	; 0x01
    bc2c:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_right();
    bc2e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
    bc32:	9e 01       	movw	r18, r28
    bc34:	2b 5f       	subi	r18, 0xFB	; 251
    bc36:	3c 4f       	sbci	r19, 0xFC	; 252
    bc38:	80 e0       	ldi	r24, 0x00	; 0
    bc3a:	90 e0       	ldi	r25, 0x00	; 0
    bc3c:	a0 ea       	ldi	r26, 0xA0	; 160
    bc3e:	b1 e4       	ldi	r27, 0x41	; 65
    bc40:	f9 01       	movw	r30, r18
    bc42:	80 83       	st	Z, r24
    bc44:	91 83       	std	Z+1, r25	; 0x01
    bc46:	a2 83       	std	Z+2, r26	; 0x02
    bc48:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bc4a:	8e 01       	movw	r16, r28
    bc4c:	07 5f       	subi	r16, 0xF7	; 247
    bc4e:	1c 4f       	sbci	r17, 0xFC	; 252
    bc50:	ce 01       	movw	r24, r28
    bc52:	8b 5f       	subi	r24, 0xFB	; 251
    bc54:	9c 4f       	sbci	r25, 0xFC	; 252
    bc56:	fc 01       	movw	r30, r24
    bc58:	60 81       	ld	r22, Z
    bc5a:	71 81       	ldd	r23, Z+1	; 0x01
    bc5c:	82 81       	ldd	r24, Z+2	; 0x02
    bc5e:	93 81       	ldd	r25, Z+3	; 0x03
    bc60:	26 e6       	ldi	r18, 0x66	; 102
    bc62:	36 e6       	ldi	r19, 0x66	; 102
    bc64:	46 e6       	ldi	r20, 0x66	; 102
    bc66:	55 e4       	ldi	r21, 0x45	; 69
    bc68:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    bc6c:	dc 01       	movw	r26, r24
    bc6e:	cb 01       	movw	r24, r22
    bc70:	f8 01       	movw	r30, r16
    bc72:	80 83       	st	Z, r24
    bc74:	91 83       	std	Z+1, r25	; 0x01
    bc76:	a2 83       	std	Z+2, r26	; 0x02
    bc78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bc7a:	ce 01       	movw	r24, r28
    bc7c:	87 5f       	subi	r24, 0xF7	; 247
    bc7e:	9c 4f       	sbci	r25, 0xFC	; 252
    bc80:	11 e0       	ldi	r17, 0x01	; 1
    bc82:	fc 01       	movw	r30, r24
    bc84:	60 81       	ld	r22, Z
    bc86:	71 81       	ldd	r23, Z+1	; 0x01
    bc88:	82 81       	ldd	r24, Z+2	; 0x02
    bc8a:	93 81       	ldd	r25, Z+3	; 0x03
    bc8c:	20 e0       	ldi	r18, 0x00	; 0
    bc8e:	30 e0       	ldi	r19, 0x00	; 0
    bc90:	40 e8       	ldi	r20, 0x80	; 128
    bc92:	5f e3       	ldi	r21, 0x3F	; 63
    bc94:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    bc98:	88 23       	and	r24, r24
    bc9a:	0c f0       	brlt	.+2      	; 0xbc9e <pick_drop+0x5bac>
    bc9c:	10 e0       	ldi	r17, 0x00	; 0
    bc9e:	11 23       	and	r17, r17
    bca0:	49 f0       	breq	.+18     	; 0xbcb4 <pick_drop+0x5bc2>
		__ticks = 1;
    bca2:	ce 01       	movw	r24, r28
    bca4:	83 5f       	subi	r24, 0xF3	; 243
    bca6:	9c 4f       	sbci	r25, 0xFC	; 252
    bca8:	21 e0       	ldi	r18, 0x01	; 1
    bcaa:	30 e0       	ldi	r19, 0x00	; 0
    bcac:	fc 01       	movw	r30, r24
    bcae:	31 83       	std	Z+1, r19	; 0x01
    bcb0:	20 83       	st	Z, r18
    bcb2:	74 c0       	rjmp	.+232    	; 0xbd9c <pick_drop+0x5caa>
	else if (__tmp > 65535)
    bcb4:	ce 01       	movw	r24, r28
    bcb6:	87 5f       	subi	r24, 0xF7	; 247
    bcb8:	9c 4f       	sbci	r25, 0xFC	; 252
    bcba:	11 e0       	ldi	r17, 0x01	; 1
    bcbc:	fc 01       	movw	r30, r24
    bcbe:	60 81       	ld	r22, Z
    bcc0:	71 81       	ldd	r23, Z+1	; 0x01
    bcc2:	82 81       	ldd	r24, Z+2	; 0x02
    bcc4:	93 81       	ldd	r25, Z+3	; 0x03
    bcc6:	20 e0       	ldi	r18, 0x00	; 0
    bcc8:	3f ef       	ldi	r19, 0xFF	; 255
    bcca:	4f e7       	ldi	r20, 0x7F	; 127
    bccc:	57 e4       	ldi	r21, 0x47	; 71
    bcce:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    bcd2:	18 16       	cp	r1, r24
    bcd4:	0c f0       	brlt	.+2      	; 0xbcd8 <pick_drop+0x5be6>
    bcd6:	10 e0       	ldi	r17, 0x00	; 0
    bcd8:	11 23       	and	r17, r17
    bcda:	09 f4       	brne	.+2      	; 0xbcde <pick_drop+0x5bec>
    bcdc:	4d c0       	rjmp	.+154    	; 0xbd78 <pick_drop+0x5c86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    bcde:	ce 01       	movw	r24, r28
    bce0:	8b 5f       	subi	r24, 0xFB	; 251
    bce2:	9c 4f       	sbci	r25, 0xFC	; 252
    bce4:	fc 01       	movw	r30, r24
    bce6:	60 81       	ld	r22, Z
    bce8:	71 81       	ldd	r23, Z+1	; 0x01
    bcea:	82 81       	ldd	r24, Z+2	; 0x02
    bcec:	93 81       	ldd	r25, Z+3	; 0x03
    bcee:	20 e0       	ldi	r18, 0x00	; 0
    bcf0:	30 e0       	ldi	r19, 0x00	; 0
    bcf2:	40 e2       	ldi	r20, 0x20	; 32
    bcf4:	51 e4       	ldi	r21, 0x41	; 65
    bcf6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    bcfa:	dc 01       	movw	r26, r24
    bcfc:	cb 01       	movw	r24, r22
    bcfe:	8e 01       	movw	r16, r28
    bd00:	03 5f       	subi	r16, 0xF3	; 243
    bd02:	1c 4f       	sbci	r17, 0xFC	; 252
    bd04:	bc 01       	movw	r22, r24
    bd06:	cd 01       	movw	r24, r26
    bd08:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    bd0c:	dc 01       	movw	r26, r24
    bd0e:	cb 01       	movw	r24, r22
    bd10:	f8 01       	movw	r30, r16
    bd12:	91 83       	std	Z+1, r25	; 0x01
    bd14:	80 83       	st	Z, r24
    bd16:	27 c0       	rjmp	.+78     	; 0xbd66 <pick_drop+0x5c74>
    bd18:	ce 01       	movw	r24, r28
    bd1a:	81 5f       	subi	r24, 0xF1	; 241
    bd1c:	9c 4f       	sbci	r25, 0xFC	; 252
    bd1e:	20 e7       	ldi	r18, 0x70	; 112
    bd20:	31 e0       	ldi	r19, 0x01	; 1
    bd22:	fc 01       	movw	r30, r24
    bd24:	31 83       	std	Z+1, r19	; 0x01
    bd26:	20 83       	st	Z, r18
    bd28:	ce 01       	movw	r24, r28
    bd2a:	81 5f       	subi	r24, 0xF1	; 241
    bd2c:	9c 4f       	sbci	r25, 0xFC	; 252
    bd2e:	fc 01       	movw	r30, r24
    bd30:	80 81       	ld	r24, Z
    bd32:	91 81       	ldd	r25, Z+1	; 0x01
    bd34:	8c 01       	movw	r16, r24
    bd36:	c8 01       	movw	r24, r16
    bd38:	01 97       	sbiw	r24, 0x01	; 1
    bd3a:	f1 f7       	brne	.-4      	; 0xbd38 <pick_drop+0x5c46>
    bd3c:	8c 01       	movw	r16, r24
    bd3e:	ce 01       	movw	r24, r28
    bd40:	81 5f       	subi	r24, 0xF1	; 241
    bd42:	9c 4f       	sbci	r25, 0xFC	; 252
    bd44:	fc 01       	movw	r30, r24
    bd46:	11 83       	std	Z+1, r17	; 0x01
    bd48:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bd4a:	ce 01       	movw	r24, r28
    bd4c:	83 5f       	subi	r24, 0xF3	; 243
    bd4e:	9c 4f       	sbci	r25, 0xFC	; 252
    bd50:	9e 01       	movw	r18, r28
    bd52:	23 5f       	subi	r18, 0xF3	; 243
    bd54:	3c 4f       	sbci	r19, 0xFC	; 252
    bd56:	f9 01       	movw	r30, r18
    bd58:	20 81       	ld	r18, Z
    bd5a:	31 81       	ldd	r19, Z+1	; 0x01
    bd5c:	21 50       	subi	r18, 0x01	; 1
    bd5e:	30 40       	sbci	r19, 0x00	; 0
    bd60:	fc 01       	movw	r30, r24
    bd62:	31 83       	std	Z+1, r19	; 0x01
    bd64:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bd66:	ce 01       	movw	r24, r28
    bd68:	83 5f       	subi	r24, 0xF3	; 243
    bd6a:	9c 4f       	sbci	r25, 0xFC	; 252
    bd6c:	fc 01       	movw	r30, r24
    bd6e:	80 81       	ld	r24, Z
    bd70:	91 81       	ldd	r25, Z+1	; 0x01
    bd72:	00 97       	sbiw	r24, 0x00	; 0
    bd74:	89 f6       	brne	.-94     	; 0xbd18 <pick_drop+0x5c26>
    bd76:	2f c0       	rjmp	.+94     	; 0xbdd6 <pick_drop+0x5ce4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bd78:	8e 01       	movw	r16, r28
    bd7a:	03 5f       	subi	r16, 0xF3	; 243
    bd7c:	1c 4f       	sbci	r17, 0xFC	; 252
    bd7e:	ce 01       	movw	r24, r28
    bd80:	87 5f       	subi	r24, 0xF7	; 247
    bd82:	9c 4f       	sbci	r25, 0xFC	; 252
    bd84:	fc 01       	movw	r30, r24
    bd86:	60 81       	ld	r22, Z
    bd88:	71 81       	ldd	r23, Z+1	; 0x01
    bd8a:	82 81       	ldd	r24, Z+2	; 0x02
    bd8c:	93 81       	ldd	r25, Z+3	; 0x03
    bd8e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    bd92:	dc 01       	movw	r26, r24
    bd94:	cb 01       	movw	r24, r22
    bd96:	f8 01       	movw	r30, r16
    bd98:	91 83       	std	Z+1, r25	; 0x01
    bd9a:	80 83       	st	Z, r24
    bd9c:	ce 01       	movw	r24, r28
    bd9e:	8f 5e       	subi	r24, 0xEF	; 239
    bda0:	9c 4f       	sbci	r25, 0xFC	; 252
    bda2:	9e 01       	movw	r18, r28
    bda4:	23 5f       	subi	r18, 0xF3	; 243
    bda6:	3c 4f       	sbci	r19, 0xFC	; 252
    bda8:	f9 01       	movw	r30, r18
    bdaa:	20 81       	ld	r18, Z
    bdac:	31 81       	ldd	r19, Z+1	; 0x01
    bdae:	fc 01       	movw	r30, r24
    bdb0:	31 83       	std	Z+1, r19	; 0x01
    bdb2:	20 83       	st	Z, r18
    bdb4:	ce 01       	movw	r24, r28
    bdb6:	8f 5e       	subi	r24, 0xEF	; 239
    bdb8:	9c 4f       	sbci	r25, 0xFC	; 252
    bdba:	fc 01       	movw	r30, r24
    bdbc:	80 81       	ld	r24, Z
    bdbe:	91 81       	ldd	r25, Z+1	; 0x01
    bdc0:	8c 01       	movw	r16, r24
    bdc2:	c8 01       	movw	r24, r16
    bdc4:	01 97       	sbiw	r24, 0x01	; 1
    bdc6:	f1 f7       	brne	.-4      	; 0xbdc4 <pick_drop+0x5cd2>
    bdc8:	8c 01       	movw	r16, r24
    bdca:	ce 01       	movw	r24, r28
    bdcc:	8f 5e       	subi	r24, 0xEF	; 239
    bdce:	9c 4f       	sbci	r25, 0xFC	; 252
    bdd0:	fc 01       	movw	r30, r24
    bdd2:	11 83       	std	Z+1, r17	; 0x01
    bdd4:	00 83       	st	Z, r16
				_delay_ms(20);
				front();
    bdd6:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    bdda:	9e 01       	movw	r18, r28
    bddc:	2d 5e       	subi	r18, 0xED	; 237
    bdde:	3c 4f       	sbci	r19, 0xFC	; 252
    bde0:	80 e0       	ldi	r24, 0x00	; 0
    bde2:	90 e0       	ldi	r25, 0x00	; 0
    bde4:	a8 ec       	ldi	r26, 0xC8	; 200
    bde6:	b2 e4       	ldi	r27, 0x42	; 66
    bde8:	f9 01       	movw	r30, r18
    bdea:	80 83       	st	Z, r24
    bdec:	91 83       	std	Z+1, r25	; 0x01
    bdee:	a2 83       	std	Z+2, r26	; 0x02
    bdf0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bdf2:	8e 01       	movw	r16, r28
    bdf4:	09 5e       	subi	r16, 0xE9	; 233
    bdf6:	1c 4f       	sbci	r17, 0xFC	; 252
    bdf8:	ce 01       	movw	r24, r28
    bdfa:	8d 5e       	subi	r24, 0xED	; 237
    bdfc:	9c 4f       	sbci	r25, 0xFC	; 252
    bdfe:	fc 01       	movw	r30, r24
    be00:	60 81       	ld	r22, Z
    be02:	71 81       	ldd	r23, Z+1	; 0x01
    be04:	82 81       	ldd	r24, Z+2	; 0x02
    be06:	93 81       	ldd	r25, Z+3	; 0x03
    be08:	26 e6       	ldi	r18, 0x66	; 102
    be0a:	36 e6       	ldi	r19, 0x66	; 102
    be0c:	46 e6       	ldi	r20, 0x66	; 102
    be0e:	55 e4       	ldi	r21, 0x45	; 69
    be10:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    be14:	dc 01       	movw	r26, r24
    be16:	cb 01       	movw	r24, r22
    be18:	f8 01       	movw	r30, r16
    be1a:	80 83       	st	Z, r24
    be1c:	91 83       	std	Z+1, r25	; 0x01
    be1e:	a2 83       	std	Z+2, r26	; 0x02
    be20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    be22:	ce 01       	movw	r24, r28
    be24:	89 5e       	subi	r24, 0xE9	; 233
    be26:	9c 4f       	sbci	r25, 0xFC	; 252
    be28:	11 e0       	ldi	r17, 0x01	; 1
    be2a:	fc 01       	movw	r30, r24
    be2c:	60 81       	ld	r22, Z
    be2e:	71 81       	ldd	r23, Z+1	; 0x01
    be30:	82 81       	ldd	r24, Z+2	; 0x02
    be32:	93 81       	ldd	r25, Z+3	; 0x03
    be34:	20 e0       	ldi	r18, 0x00	; 0
    be36:	30 e0       	ldi	r19, 0x00	; 0
    be38:	40 e8       	ldi	r20, 0x80	; 128
    be3a:	5f e3       	ldi	r21, 0x3F	; 63
    be3c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    be40:	88 23       	and	r24, r24
    be42:	0c f0       	brlt	.+2      	; 0xbe46 <pick_drop+0x5d54>
    be44:	10 e0       	ldi	r17, 0x00	; 0
    be46:	11 23       	and	r17, r17
    be48:	49 f0       	breq	.+18     	; 0xbe5c <pick_drop+0x5d6a>
		__ticks = 1;
    be4a:	ce 01       	movw	r24, r28
    be4c:	85 5e       	subi	r24, 0xE5	; 229
    be4e:	9c 4f       	sbci	r25, 0xFC	; 252
    be50:	21 e0       	ldi	r18, 0x01	; 1
    be52:	30 e0       	ldi	r19, 0x00	; 0
    be54:	fc 01       	movw	r30, r24
    be56:	31 83       	std	Z+1, r19	; 0x01
    be58:	20 83       	st	Z, r18
    be5a:	74 c0       	rjmp	.+232    	; 0xbf44 <pick_drop+0x5e52>
	else if (__tmp > 65535)
    be5c:	ce 01       	movw	r24, r28
    be5e:	89 5e       	subi	r24, 0xE9	; 233
    be60:	9c 4f       	sbci	r25, 0xFC	; 252
    be62:	11 e0       	ldi	r17, 0x01	; 1
    be64:	fc 01       	movw	r30, r24
    be66:	60 81       	ld	r22, Z
    be68:	71 81       	ldd	r23, Z+1	; 0x01
    be6a:	82 81       	ldd	r24, Z+2	; 0x02
    be6c:	93 81       	ldd	r25, Z+3	; 0x03
    be6e:	20 e0       	ldi	r18, 0x00	; 0
    be70:	3f ef       	ldi	r19, 0xFF	; 255
    be72:	4f e7       	ldi	r20, 0x7F	; 127
    be74:	57 e4       	ldi	r21, 0x47	; 71
    be76:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    be7a:	18 16       	cp	r1, r24
    be7c:	0c f0       	brlt	.+2      	; 0xbe80 <pick_drop+0x5d8e>
    be7e:	10 e0       	ldi	r17, 0x00	; 0
    be80:	11 23       	and	r17, r17
    be82:	09 f4       	brne	.+2      	; 0xbe86 <pick_drop+0x5d94>
    be84:	4d c0       	rjmp	.+154    	; 0xbf20 <pick_drop+0x5e2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    be86:	ce 01       	movw	r24, r28
    be88:	8d 5e       	subi	r24, 0xED	; 237
    be8a:	9c 4f       	sbci	r25, 0xFC	; 252
    be8c:	fc 01       	movw	r30, r24
    be8e:	60 81       	ld	r22, Z
    be90:	71 81       	ldd	r23, Z+1	; 0x01
    be92:	82 81       	ldd	r24, Z+2	; 0x02
    be94:	93 81       	ldd	r25, Z+3	; 0x03
    be96:	20 e0       	ldi	r18, 0x00	; 0
    be98:	30 e0       	ldi	r19, 0x00	; 0
    be9a:	40 e2       	ldi	r20, 0x20	; 32
    be9c:	51 e4       	ldi	r21, 0x41	; 65
    be9e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    bea2:	dc 01       	movw	r26, r24
    bea4:	cb 01       	movw	r24, r22
    bea6:	8e 01       	movw	r16, r28
    bea8:	05 5e       	subi	r16, 0xE5	; 229
    beaa:	1c 4f       	sbci	r17, 0xFC	; 252
    beac:	bc 01       	movw	r22, r24
    beae:	cd 01       	movw	r24, r26
    beb0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    beb4:	dc 01       	movw	r26, r24
    beb6:	cb 01       	movw	r24, r22
    beb8:	f8 01       	movw	r30, r16
    beba:	91 83       	std	Z+1, r25	; 0x01
    bebc:	80 83       	st	Z, r24
    bebe:	27 c0       	rjmp	.+78     	; 0xbf0e <pick_drop+0x5e1c>
    bec0:	ce 01       	movw	r24, r28
    bec2:	83 5e       	subi	r24, 0xE3	; 227
    bec4:	9c 4f       	sbci	r25, 0xFC	; 252
    bec6:	20 e7       	ldi	r18, 0x70	; 112
    bec8:	31 e0       	ldi	r19, 0x01	; 1
    beca:	fc 01       	movw	r30, r24
    becc:	31 83       	std	Z+1, r19	; 0x01
    bece:	20 83       	st	Z, r18
    bed0:	ce 01       	movw	r24, r28
    bed2:	83 5e       	subi	r24, 0xE3	; 227
    bed4:	9c 4f       	sbci	r25, 0xFC	; 252
    bed6:	fc 01       	movw	r30, r24
    bed8:	80 81       	ld	r24, Z
    beda:	91 81       	ldd	r25, Z+1	; 0x01
    bedc:	8c 01       	movw	r16, r24
    bede:	c8 01       	movw	r24, r16
    bee0:	01 97       	sbiw	r24, 0x01	; 1
    bee2:	f1 f7       	brne	.-4      	; 0xbee0 <pick_drop+0x5dee>
    bee4:	8c 01       	movw	r16, r24
    bee6:	ce 01       	movw	r24, r28
    bee8:	83 5e       	subi	r24, 0xE3	; 227
    beea:	9c 4f       	sbci	r25, 0xFC	; 252
    beec:	fc 01       	movw	r30, r24
    beee:	11 83       	std	Z+1, r17	; 0x01
    bef0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    bef2:	ce 01       	movw	r24, r28
    bef4:	85 5e       	subi	r24, 0xE5	; 229
    bef6:	9c 4f       	sbci	r25, 0xFC	; 252
    bef8:	9e 01       	movw	r18, r28
    befa:	25 5e       	subi	r18, 0xE5	; 229
    befc:	3c 4f       	sbci	r19, 0xFC	; 252
    befe:	f9 01       	movw	r30, r18
    bf00:	20 81       	ld	r18, Z
    bf02:	31 81       	ldd	r19, Z+1	; 0x01
    bf04:	21 50       	subi	r18, 0x01	; 1
    bf06:	30 40       	sbci	r19, 0x00	; 0
    bf08:	fc 01       	movw	r30, r24
    bf0a:	31 83       	std	Z+1, r19	; 0x01
    bf0c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    bf0e:	ce 01       	movw	r24, r28
    bf10:	85 5e       	subi	r24, 0xE5	; 229
    bf12:	9c 4f       	sbci	r25, 0xFC	; 252
    bf14:	fc 01       	movw	r30, r24
    bf16:	80 81       	ld	r24, Z
    bf18:	91 81       	ldd	r25, Z+1	; 0x01
    bf1a:	00 97       	sbiw	r24, 0x00	; 0
    bf1c:	89 f6       	brne	.-94     	; 0xbec0 <pick_drop+0x5dce>
    bf1e:	2f c0       	rjmp	.+94     	; 0xbf7e <pick_drop+0x5e8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    bf20:	8e 01       	movw	r16, r28
    bf22:	05 5e       	subi	r16, 0xE5	; 229
    bf24:	1c 4f       	sbci	r17, 0xFC	; 252
    bf26:	ce 01       	movw	r24, r28
    bf28:	89 5e       	subi	r24, 0xE9	; 233
    bf2a:	9c 4f       	sbci	r25, 0xFC	; 252
    bf2c:	fc 01       	movw	r30, r24
    bf2e:	60 81       	ld	r22, Z
    bf30:	71 81       	ldd	r23, Z+1	; 0x01
    bf32:	82 81       	ldd	r24, Z+2	; 0x02
    bf34:	93 81       	ldd	r25, Z+3	; 0x03
    bf36:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    bf3a:	dc 01       	movw	r26, r24
    bf3c:	cb 01       	movw	r24, r22
    bf3e:	f8 01       	movw	r30, r16
    bf40:	91 83       	std	Z+1, r25	; 0x01
    bf42:	80 83       	st	Z, r24
    bf44:	ce 01       	movw	r24, r28
    bf46:	81 5e       	subi	r24, 0xE1	; 225
    bf48:	9c 4f       	sbci	r25, 0xFC	; 252
    bf4a:	9e 01       	movw	r18, r28
    bf4c:	25 5e       	subi	r18, 0xE5	; 229
    bf4e:	3c 4f       	sbci	r19, 0xFC	; 252
    bf50:	f9 01       	movw	r30, r18
    bf52:	20 81       	ld	r18, Z
    bf54:	31 81       	ldd	r19, Z+1	; 0x01
    bf56:	fc 01       	movw	r30, r24
    bf58:	31 83       	std	Z+1, r19	; 0x01
    bf5a:	20 83       	st	Z, r18
    bf5c:	ce 01       	movw	r24, r28
    bf5e:	81 5e       	subi	r24, 0xE1	; 225
    bf60:	9c 4f       	sbci	r25, 0xFC	; 252
    bf62:	fc 01       	movw	r30, r24
    bf64:	80 81       	ld	r24, Z
    bf66:	91 81       	ldd	r25, Z+1	; 0x01
    bf68:	8c 01       	movw	r16, r24
    bf6a:	c8 01       	movw	r24, r16
    bf6c:	01 97       	sbiw	r24, 0x01	; 1
    bf6e:	f1 f7       	brne	.-4      	; 0xbf6c <pick_drop+0x5e7a>
    bf70:	8c 01       	movw	r16, r24
    bf72:	ce 01       	movw	r24, r28
    bf74:	81 5e       	subi	r24, 0xE1	; 225
    bf76:	9c 4f       	sbci	r25, 0xFC	; 252
    bf78:	fc 01       	movw	r30, r24
    bf7a:	11 83       	std	Z+1, r17	; 0x01
    bf7c:	00 83       	st	Z, r16
				_delay_ms(100);
				back_mm(25);
    bf7e:	89 e1       	ldi	r24, 0x19	; 25
    bf80:	90 e0       	ldi	r25, 0x00	; 0
    bf82:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    bf86:	9e 01       	movw	r18, r28
    bf88:	2f 5d       	subi	r18, 0xDF	; 223
    bf8a:	3c 4f       	sbci	r19, 0xFC	; 252
    bf8c:	80 e0       	ldi	r24, 0x00	; 0
    bf8e:	90 e0       	ldi	r25, 0x00	; 0
    bf90:	a0 ea       	ldi	r26, 0xA0	; 160
    bf92:	b1 e4       	ldi	r27, 0x41	; 65
    bf94:	f9 01       	movw	r30, r18
    bf96:	80 83       	st	Z, r24
    bf98:	91 83       	std	Z+1, r25	; 0x01
    bf9a:	a2 83       	std	Z+2, r26	; 0x02
    bf9c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    bf9e:	8e 01       	movw	r16, r28
    bfa0:	0b 5d       	subi	r16, 0xDB	; 219
    bfa2:	1c 4f       	sbci	r17, 0xFC	; 252
    bfa4:	ce 01       	movw	r24, r28
    bfa6:	8f 5d       	subi	r24, 0xDF	; 223
    bfa8:	9c 4f       	sbci	r25, 0xFC	; 252
    bfaa:	fc 01       	movw	r30, r24
    bfac:	60 81       	ld	r22, Z
    bfae:	71 81       	ldd	r23, Z+1	; 0x01
    bfb0:	82 81       	ldd	r24, Z+2	; 0x02
    bfb2:	93 81       	ldd	r25, Z+3	; 0x03
    bfb4:	26 e6       	ldi	r18, 0x66	; 102
    bfb6:	36 e6       	ldi	r19, 0x66	; 102
    bfb8:	46 e6       	ldi	r20, 0x66	; 102
    bfba:	55 e4       	ldi	r21, 0x45	; 69
    bfbc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    bfc0:	dc 01       	movw	r26, r24
    bfc2:	cb 01       	movw	r24, r22
    bfc4:	f8 01       	movw	r30, r16
    bfc6:	80 83       	st	Z, r24
    bfc8:	91 83       	std	Z+1, r25	; 0x01
    bfca:	a2 83       	std	Z+2, r26	; 0x02
    bfcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    bfce:	ce 01       	movw	r24, r28
    bfd0:	8b 5d       	subi	r24, 0xDB	; 219
    bfd2:	9c 4f       	sbci	r25, 0xFC	; 252
    bfd4:	11 e0       	ldi	r17, 0x01	; 1
    bfd6:	fc 01       	movw	r30, r24
    bfd8:	60 81       	ld	r22, Z
    bfda:	71 81       	ldd	r23, Z+1	; 0x01
    bfdc:	82 81       	ldd	r24, Z+2	; 0x02
    bfde:	93 81       	ldd	r25, Z+3	; 0x03
    bfe0:	20 e0       	ldi	r18, 0x00	; 0
    bfe2:	30 e0       	ldi	r19, 0x00	; 0
    bfe4:	40 e8       	ldi	r20, 0x80	; 128
    bfe6:	5f e3       	ldi	r21, 0x3F	; 63
    bfe8:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    bfec:	88 23       	and	r24, r24
    bfee:	0c f0       	brlt	.+2      	; 0xbff2 <pick_drop+0x5f00>
    bff0:	10 e0       	ldi	r17, 0x00	; 0
    bff2:	11 23       	and	r17, r17
    bff4:	49 f0       	breq	.+18     	; 0xc008 <pick_drop+0x5f16>
		__ticks = 1;
    bff6:	ce 01       	movw	r24, r28
    bff8:	87 5d       	subi	r24, 0xD7	; 215
    bffa:	9c 4f       	sbci	r25, 0xFC	; 252
    bffc:	21 e0       	ldi	r18, 0x01	; 1
    bffe:	30 e0       	ldi	r19, 0x00	; 0
    c000:	fc 01       	movw	r30, r24
    c002:	31 83       	std	Z+1, r19	; 0x01
    c004:	20 83       	st	Z, r18
    c006:	74 c0       	rjmp	.+232    	; 0xc0f0 <pick_drop+0x5ffe>
	else if (__tmp > 65535)
    c008:	ce 01       	movw	r24, r28
    c00a:	8b 5d       	subi	r24, 0xDB	; 219
    c00c:	9c 4f       	sbci	r25, 0xFC	; 252
    c00e:	11 e0       	ldi	r17, 0x01	; 1
    c010:	fc 01       	movw	r30, r24
    c012:	60 81       	ld	r22, Z
    c014:	71 81       	ldd	r23, Z+1	; 0x01
    c016:	82 81       	ldd	r24, Z+2	; 0x02
    c018:	93 81       	ldd	r25, Z+3	; 0x03
    c01a:	20 e0       	ldi	r18, 0x00	; 0
    c01c:	3f ef       	ldi	r19, 0xFF	; 255
    c01e:	4f e7       	ldi	r20, 0x7F	; 127
    c020:	57 e4       	ldi	r21, 0x47	; 71
    c022:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    c026:	18 16       	cp	r1, r24
    c028:	0c f0       	brlt	.+2      	; 0xc02c <pick_drop+0x5f3a>
    c02a:	10 e0       	ldi	r17, 0x00	; 0
    c02c:	11 23       	and	r17, r17
    c02e:	09 f4       	brne	.+2      	; 0xc032 <pick_drop+0x5f40>
    c030:	4d c0       	rjmp	.+154    	; 0xc0cc <pick_drop+0x5fda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c032:	ce 01       	movw	r24, r28
    c034:	8f 5d       	subi	r24, 0xDF	; 223
    c036:	9c 4f       	sbci	r25, 0xFC	; 252
    c038:	fc 01       	movw	r30, r24
    c03a:	60 81       	ld	r22, Z
    c03c:	71 81       	ldd	r23, Z+1	; 0x01
    c03e:	82 81       	ldd	r24, Z+2	; 0x02
    c040:	93 81       	ldd	r25, Z+3	; 0x03
    c042:	20 e0       	ldi	r18, 0x00	; 0
    c044:	30 e0       	ldi	r19, 0x00	; 0
    c046:	40 e2       	ldi	r20, 0x20	; 32
    c048:	51 e4       	ldi	r21, 0x41	; 65
    c04a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c04e:	dc 01       	movw	r26, r24
    c050:	cb 01       	movw	r24, r22
    c052:	8e 01       	movw	r16, r28
    c054:	07 5d       	subi	r16, 0xD7	; 215
    c056:	1c 4f       	sbci	r17, 0xFC	; 252
    c058:	bc 01       	movw	r22, r24
    c05a:	cd 01       	movw	r24, r26
    c05c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c060:	dc 01       	movw	r26, r24
    c062:	cb 01       	movw	r24, r22
    c064:	f8 01       	movw	r30, r16
    c066:	91 83       	std	Z+1, r25	; 0x01
    c068:	80 83       	st	Z, r24
    c06a:	27 c0       	rjmp	.+78     	; 0xc0ba <pick_drop+0x5fc8>
    c06c:	ce 01       	movw	r24, r28
    c06e:	85 5d       	subi	r24, 0xD5	; 213
    c070:	9c 4f       	sbci	r25, 0xFC	; 252
    c072:	20 e7       	ldi	r18, 0x70	; 112
    c074:	31 e0       	ldi	r19, 0x01	; 1
    c076:	fc 01       	movw	r30, r24
    c078:	31 83       	std	Z+1, r19	; 0x01
    c07a:	20 83       	st	Z, r18
    c07c:	ce 01       	movw	r24, r28
    c07e:	85 5d       	subi	r24, 0xD5	; 213
    c080:	9c 4f       	sbci	r25, 0xFC	; 252
    c082:	fc 01       	movw	r30, r24
    c084:	80 81       	ld	r24, Z
    c086:	91 81       	ldd	r25, Z+1	; 0x01
    c088:	8c 01       	movw	r16, r24
    c08a:	c8 01       	movw	r24, r16
    c08c:	01 97       	sbiw	r24, 0x01	; 1
    c08e:	f1 f7       	brne	.-4      	; 0xc08c <pick_drop+0x5f9a>
    c090:	8c 01       	movw	r16, r24
    c092:	ce 01       	movw	r24, r28
    c094:	85 5d       	subi	r24, 0xD5	; 213
    c096:	9c 4f       	sbci	r25, 0xFC	; 252
    c098:	fc 01       	movw	r30, r24
    c09a:	11 83       	std	Z+1, r17	; 0x01
    c09c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c09e:	ce 01       	movw	r24, r28
    c0a0:	87 5d       	subi	r24, 0xD7	; 215
    c0a2:	9c 4f       	sbci	r25, 0xFC	; 252
    c0a4:	9e 01       	movw	r18, r28
    c0a6:	27 5d       	subi	r18, 0xD7	; 215
    c0a8:	3c 4f       	sbci	r19, 0xFC	; 252
    c0aa:	f9 01       	movw	r30, r18
    c0ac:	20 81       	ld	r18, Z
    c0ae:	31 81       	ldd	r19, Z+1	; 0x01
    c0b0:	21 50       	subi	r18, 0x01	; 1
    c0b2:	30 40       	sbci	r19, 0x00	; 0
    c0b4:	fc 01       	movw	r30, r24
    c0b6:	31 83       	std	Z+1, r19	; 0x01
    c0b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c0ba:	ce 01       	movw	r24, r28
    c0bc:	87 5d       	subi	r24, 0xD7	; 215
    c0be:	9c 4f       	sbci	r25, 0xFC	; 252
    c0c0:	fc 01       	movw	r30, r24
    c0c2:	80 81       	ld	r24, Z
    c0c4:	91 81       	ldd	r25, Z+1	; 0x01
    c0c6:	00 97       	sbiw	r24, 0x00	; 0
    c0c8:	89 f6       	brne	.-94     	; 0xc06c <pick_drop+0x5f7a>
    c0ca:	2f c0       	rjmp	.+94     	; 0xc12a <pick_drop+0x6038>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c0cc:	8e 01       	movw	r16, r28
    c0ce:	07 5d       	subi	r16, 0xD7	; 215
    c0d0:	1c 4f       	sbci	r17, 0xFC	; 252
    c0d2:	ce 01       	movw	r24, r28
    c0d4:	8b 5d       	subi	r24, 0xDB	; 219
    c0d6:	9c 4f       	sbci	r25, 0xFC	; 252
    c0d8:	fc 01       	movw	r30, r24
    c0da:	60 81       	ld	r22, Z
    c0dc:	71 81       	ldd	r23, Z+1	; 0x01
    c0de:	82 81       	ldd	r24, Z+2	; 0x02
    c0e0:	93 81       	ldd	r25, Z+3	; 0x03
    c0e2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c0e6:	dc 01       	movw	r26, r24
    c0e8:	cb 01       	movw	r24, r22
    c0ea:	f8 01       	movw	r30, r16
    c0ec:	91 83       	std	Z+1, r25	; 0x01
    c0ee:	80 83       	st	Z, r24
    c0f0:	ce 01       	movw	r24, r28
    c0f2:	83 5d       	subi	r24, 0xD3	; 211
    c0f4:	9c 4f       	sbci	r25, 0xFC	; 252
    c0f6:	9e 01       	movw	r18, r28
    c0f8:	27 5d       	subi	r18, 0xD7	; 215
    c0fa:	3c 4f       	sbci	r19, 0xFC	; 252
    c0fc:	f9 01       	movw	r30, r18
    c0fe:	20 81       	ld	r18, Z
    c100:	31 81       	ldd	r19, Z+1	; 0x01
    c102:	fc 01       	movw	r30, r24
    c104:	31 83       	std	Z+1, r19	; 0x01
    c106:	20 83       	st	Z, r18
    c108:	ce 01       	movw	r24, r28
    c10a:	83 5d       	subi	r24, 0xD3	; 211
    c10c:	9c 4f       	sbci	r25, 0xFC	; 252
    c10e:	fc 01       	movw	r30, r24
    c110:	80 81       	ld	r24, Z
    c112:	91 81       	ldd	r25, Z+1	; 0x01
    c114:	8c 01       	movw	r16, r24
    c116:	c8 01       	movw	r24, r16
    c118:	01 97       	sbiw	r24, 0x01	; 1
    c11a:	f1 f7       	brne	.-4      	; 0xc118 <pick_drop+0x6026>
    c11c:	8c 01       	movw	r16, r24
    c11e:	ce 01       	movw	r24, r28
    c120:	83 5d       	subi	r24, 0xD3	; 211
    c122:	9c 4f       	sbci	r25, 0xFC	; 252
    c124:	fc 01       	movw	r30, r24
    c126:	11 83       	std	Z+1, r17	; 0x01
    c128:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_left();
    c12a:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
				back_mm(30);
    c12e:	8e e1       	ldi	r24, 0x1E	; 30
    c130:	90 e0       	ldi	r25, 0x00	; 0
    c132:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    c136:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			}			
	}
	else if(pd=='6'){// 6X1 A6
    c13a:	ce 01       	movw	r24, r28
    c13c:	8f 5f       	subi	r24, 0xFF	; 255
    c13e:	9b 4f       	sbci	r25, 0xFB	; 251
    c140:	fc 01       	movw	r30, r24
    c142:	80 81       	ld	r24, Z
    c144:	86 33       	cpi	r24, 0x36	; 54
    c146:	09 f0       	breq	.+2      	; 0xc14a <pick_drop+0x6058>
    c148:	1c c5       	rjmp	.+2616   	; 0xcb82 <pick_drop+0x6a90>
		if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    c14a:	80 91 4f 03 	lds	r24, 0x034F
    c14e:	90 91 50 03 	lds	r25, 0x0350
    c152:	01 97       	sbiw	r24, 0x01	; 1
    c154:	8d 5a       	subi	r24, 0xAD	; 173
    c156:	9c 4f       	sbci	r25, 0xFC	; 252
    c158:	fc 01       	movw	r30, r24
    c15a:	80 81       	ld	r24, Z
    c15c:	8c 34       	cpi	r24, 0x4C	; 76
    c15e:	61 f0       	breq	.+24     	; 0xc178 <pick_drop+0x6086>
    c160:	80 91 4f 03 	lds	r24, 0x034F
    c164:	90 91 50 03 	lds	r25, 0x0350
    c168:	01 97       	sbiw	r24, 0x01	; 1
    c16a:	8d 5a       	subi	r24, 0xAD	; 173
    c16c:	9c 4f       	sbci	r25, 0xFC	; 252
    c16e:	fc 01       	movw	r30, r24
    c170:	80 81       	ld	r24, Z
    c172:	82 35       	cpi	r24, 0x52	; 82
    c174:	09 f0       	breq	.+2      	; 0xc178 <pick_drop+0x6086>
    c176:	d8 c0       	rjmp	.+432    	; 0xc328 <pick_drop+0x6236>
			front();
    c178:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    c17c:	9e 01       	movw	r18, r28
    c17e:	21 5d       	subi	r18, 0xD1	; 209
    c180:	3c 4f       	sbci	r19, 0xFC	; 252
    c182:	80 e0       	ldi	r24, 0x00	; 0
    c184:	90 e0       	ldi	r25, 0x00	; 0
    c186:	a0 e2       	ldi	r26, 0x20	; 32
    c188:	b1 e4       	ldi	r27, 0x41	; 65
    c18a:	f9 01       	movw	r30, r18
    c18c:	80 83       	st	Z, r24
    c18e:	91 83       	std	Z+1, r25	; 0x01
    c190:	a2 83       	std	Z+2, r26	; 0x02
    c192:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c194:	8e 01       	movw	r16, r28
    c196:	0d 5c       	subi	r16, 0xCD	; 205
    c198:	1c 4f       	sbci	r17, 0xFC	; 252
    c19a:	ce 01       	movw	r24, r28
    c19c:	81 5d       	subi	r24, 0xD1	; 209
    c19e:	9c 4f       	sbci	r25, 0xFC	; 252
    c1a0:	fc 01       	movw	r30, r24
    c1a2:	60 81       	ld	r22, Z
    c1a4:	71 81       	ldd	r23, Z+1	; 0x01
    c1a6:	82 81       	ldd	r24, Z+2	; 0x02
    c1a8:	93 81       	ldd	r25, Z+3	; 0x03
    c1aa:	26 e6       	ldi	r18, 0x66	; 102
    c1ac:	36 e6       	ldi	r19, 0x66	; 102
    c1ae:	46 e6       	ldi	r20, 0x66	; 102
    c1b0:	55 e4       	ldi	r21, 0x45	; 69
    c1b2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c1b6:	dc 01       	movw	r26, r24
    c1b8:	cb 01       	movw	r24, r22
    c1ba:	f8 01       	movw	r30, r16
    c1bc:	80 83       	st	Z, r24
    c1be:	91 83       	std	Z+1, r25	; 0x01
    c1c0:	a2 83       	std	Z+2, r26	; 0x02
    c1c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c1c4:	ce 01       	movw	r24, r28
    c1c6:	8d 5c       	subi	r24, 0xCD	; 205
    c1c8:	9c 4f       	sbci	r25, 0xFC	; 252
    c1ca:	11 e0       	ldi	r17, 0x01	; 1
    c1cc:	fc 01       	movw	r30, r24
    c1ce:	60 81       	ld	r22, Z
    c1d0:	71 81       	ldd	r23, Z+1	; 0x01
    c1d2:	82 81       	ldd	r24, Z+2	; 0x02
    c1d4:	93 81       	ldd	r25, Z+3	; 0x03
    c1d6:	20 e0       	ldi	r18, 0x00	; 0
    c1d8:	30 e0       	ldi	r19, 0x00	; 0
    c1da:	40 e8       	ldi	r20, 0x80	; 128
    c1dc:	5f e3       	ldi	r21, 0x3F	; 63
    c1de:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    c1e2:	88 23       	and	r24, r24
    c1e4:	0c f0       	brlt	.+2      	; 0xc1e8 <pick_drop+0x60f6>
    c1e6:	10 e0       	ldi	r17, 0x00	; 0
    c1e8:	11 23       	and	r17, r17
    c1ea:	49 f0       	breq	.+18     	; 0xc1fe <pick_drop+0x610c>
		__ticks = 1;
    c1ec:	ce 01       	movw	r24, r28
    c1ee:	89 5c       	subi	r24, 0xC9	; 201
    c1f0:	9c 4f       	sbci	r25, 0xFC	; 252
    c1f2:	21 e0       	ldi	r18, 0x01	; 1
    c1f4:	30 e0       	ldi	r19, 0x00	; 0
    c1f6:	fc 01       	movw	r30, r24
    c1f8:	31 83       	std	Z+1, r19	; 0x01
    c1fa:	20 83       	st	Z, r18
    c1fc:	74 c0       	rjmp	.+232    	; 0xc2e6 <pick_drop+0x61f4>
	else if (__tmp > 65535)
    c1fe:	ce 01       	movw	r24, r28
    c200:	8d 5c       	subi	r24, 0xCD	; 205
    c202:	9c 4f       	sbci	r25, 0xFC	; 252
    c204:	11 e0       	ldi	r17, 0x01	; 1
    c206:	fc 01       	movw	r30, r24
    c208:	60 81       	ld	r22, Z
    c20a:	71 81       	ldd	r23, Z+1	; 0x01
    c20c:	82 81       	ldd	r24, Z+2	; 0x02
    c20e:	93 81       	ldd	r25, Z+3	; 0x03
    c210:	20 e0       	ldi	r18, 0x00	; 0
    c212:	3f ef       	ldi	r19, 0xFF	; 255
    c214:	4f e7       	ldi	r20, 0x7F	; 127
    c216:	57 e4       	ldi	r21, 0x47	; 71
    c218:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    c21c:	18 16       	cp	r1, r24
    c21e:	0c f0       	brlt	.+2      	; 0xc222 <pick_drop+0x6130>
    c220:	10 e0       	ldi	r17, 0x00	; 0
    c222:	11 23       	and	r17, r17
    c224:	09 f4       	brne	.+2      	; 0xc228 <pick_drop+0x6136>
    c226:	4d c0       	rjmp	.+154    	; 0xc2c2 <pick_drop+0x61d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c228:	ce 01       	movw	r24, r28
    c22a:	81 5d       	subi	r24, 0xD1	; 209
    c22c:	9c 4f       	sbci	r25, 0xFC	; 252
    c22e:	fc 01       	movw	r30, r24
    c230:	60 81       	ld	r22, Z
    c232:	71 81       	ldd	r23, Z+1	; 0x01
    c234:	82 81       	ldd	r24, Z+2	; 0x02
    c236:	93 81       	ldd	r25, Z+3	; 0x03
    c238:	20 e0       	ldi	r18, 0x00	; 0
    c23a:	30 e0       	ldi	r19, 0x00	; 0
    c23c:	40 e2       	ldi	r20, 0x20	; 32
    c23e:	51 e4       	ldi	r21, 0x41	; 65
    c240:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c244:	dc 01       	movw	r26, r24
    c246:	cb 01       	movw	r24, r22
    c248:	8e 01       	movw	r16, r28
    c24a:	09 5c       	subi	r16, 0xC9	; 201
    c24c:	1c 4f       	sbci	r17, 0xFC	; 252
    c24e:	bc 01       	movw	r22, r24
    c250:	cd 01       	movw	r24, r26
    c252:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c256:	dc 01       	movw	r26, r24
    c258:	cb 01       	movw	r24, r22
    c25a:	f8 01       	movw	r30, r16
    c25c:	91 83       	std	Z+1, r25	; 0x01
    c25e:	80 83       	st	Z, r24
    c260:	27 c0       	rjmp	.+78     	; 0xc2b0 <pick_drop+0x61be>
    c262:	ce 01       	movw	r24, r28
    c264:	87 5c       	subi	r24, 0xC7	; 199
    c266:	9c 4f       	sbci	r25, 0xFC	; 252
    c268:	20 e7       	ldi	r18, 0x70	; 112
    c26a:	31 e0       	ldi	r19, 0x01	; 1
    c26c:	fc 01       	movw	r30, r24
    c26e:	31 83       	std	Z+1, r19	; 0x01
    c270:	20 83       	st	Z, r18
    c272:	ce 01       	movw	r24, r28
    c274:	87 5c       	subi	r24, 0xC7	; 199
    c276:	9c 4f       	sbci	r25, 0xFC	; 252
    c278:	fc 01       	movw	r30, r24
    c27a:	80 81       	ld	r24, Z
    c27c:	91 81       	ldd	r25, Z+1	; 0x01
    c27e:	8c 01       	movw	r16, r24
    c280:	c8 01       	movw	r24, r16
    c282:	01 97       	sbiw	r24, 0x01	; 1
    c284:	f1 f7       	brne	.-4      	; 0xc282 <pick_drop+0x6190>
    c286:	8c 01       	movw	r16, r24
    c288:	ce 01       	movw	r24, r28
    c28a:	87 5c       	subi	r24, 0xC7	; 199
    c28c:	9c 4f       	sbci	r25, 0xFC	; 252
    c28e:	fc 01       	movw	r30, r24
    c290:	11 83       	std	Z+1, r17	; 0x01
    c292:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c294:	ce 01       	movw	r24, r28
    c296:	89 5c       	subi	r24, 0xC9	; 201
    c298:	9c 4f       	sbci	r25, 0xFC	; 252
    c29a:	9e 01       	movw	r18, r28
    c29c:	29 5c       	subi	r18, 0xC9	; 201
    c29e:	3c 4f       	sbci	r19, 0xFC	; 252
    c2a0:	f9 01       	movw	r30, r18
    c2a2:	20 81       	ld	r18, Z
    c2a4:	31 81       	ldd	r19, Z+1	; 0x01
    c2a6:	21 50       	subi	r18, 0x01	; 1
    c2a8:	30 40       	sbci	r19, 0x00	; 0
    c2aa:	fc 01       	movw	r30, r24
    c2ac:	31 83       	std	Z+1, r19	; 0x01
    c2ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c2b0:	ce 01       	movw	r24, r28
    c2b2:	89 5c       	subi	r24, 0xC9	; 201
    c2b4:	9c 4f       	sbci	r25, 0xFC	; 252
    c2b6:	fc 01       	movw	r30, r24
    c2b8:	80 81       	ld	r24, Z
    c2ba:	91 81       	ldd	r25, Z+1	; 0x01
    c2bc:	00 97       	sbiw	r24, 0x00	; 0
    c2be:	89 f6       	brne	.-94     	; 0xc262 <pick_drop+0x6170>
    c2c0:	31 c0       	rjmp	.+98     	; 0xc324 <pick_drop+0x6232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c2c2:	8e 01       	movw	r16, r28
    c2c4:	09 5c       	subi	r16, 0xC9	; 201
    c2c6:	1c 4f       	sbci	r17, 0xFC	; 252
    c2c8:	ce 01       	movw	r24, r28
    c2ca:	8d 5c       	subi	r24, 0xCD	; 205
    c2cc:	9c 4f       	sbci	r25, 0xFC	; 252
    c2ce:	fc 01       	movw	r30, r24
    c2d0:	60 81       	ld	r22, Z
    c2d2:	71 81       	ldd	r23, Z+1	; 0x01
    c2d4:	82 81       	ldd	r24, Z+2	; 0x02
    c2d6:	93 81       	ldd	r25, Z+3	; 0x03
    c2d8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c2dc:	dc 01       	movw	r26, r24
    c2de:	cb 01       	movw	r24, r22
    c2e0:	f8 01       	movw	r30, r16
    c2e2:	91 83       	std	Z+1, r25	; 0x01
    c2e4:	80 83       	st	Z, r24
    c2e6:	ce 01       	movw	r24, r28
    c2e8:	85 5c       	subi	r24, 0xC5	; 197
    c2ea:	9c 4f       	sbci	r25, 0xFC	; 252
    c2ec:	9e 01       	movw	r18, r28
    c2ee:	29 5c       	subi	r18, 0xC9	; 201
    c2f0:	3c 4f       	sbci	r19, 0xFC	; 252
    c2f2:	f9 01       	movw	r30, r18
    c2f4:	20 81       	ld	r18, Z
    c2f6:	31 81       	ldd	r19, Z+1	; 0x01
    c2f8:	fc 01       	movw	r30, r24
    c2fa:	31 83       	std	Z+1, r19	; 0x01
    c2fc:	20 83       	st	Z, r18
    c2fe:	ce 01       	movw	r24, r28
    c300:	85 5c       	subi	r24, 0xC5	; 197
    c302:	9c 4f       	sbci	r25, 0xFC	; 252
    c304:	fc 01       	movw	r30, r24
    c306:	80 81       	ld	r24, Z
    c308:	91 81       	ldd	r25, Z+1	; 0x01
    c30a:	8c 01       	movw	r16, r24
    c30c:	c8 01       	movw	r24, r16
    c30e:	01 97       	sbiw	r24, 0x01	; 1
    c310:	f1 f7       	brne	.-4      	; 0xc30e <pick_drop+0x621c>
    c312:	8c 01       	movw	r16, r24
    c314:	ce 01       	movw	r24, r28
    c316:	85 5c       	subi	r24, 0xC5	; 197
    c318:	9c 4f       	sbci	r25, 0xFC	; 252
    c31a:	fc 01       	movw	r30, r24
    c31c:	11 83       	std	Z+1, r17	; 0x01
    c31e:	00 83       	st	Z, r16
			_delay_ms(10);
    c320:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
    c324:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
		} 
		else{
			forward_mm(35);
    c328:	83 e2       	ldi	r24, 0x23	; 35
    c32a:	90 e0       	ldi	r25, 0x00	; 0
    c32c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    c330:	9e 01       	movw	r18, r28
    c332:	23 5c       	subi	r18, 0xC3	; 195
    c334:	3c 4f       	sbci	r19, 0xFC	; 252
    c336:	80 e0       	ldi	r24, 0x00	; 0
    c338:	90 e0       	ldi	r25, 0x00	; 0
    c33a:	a0 ea       	ldi	r26, 0xA0	; 160
    c33c:	b1 e4       	ldi	r27, 0x41	; 65
    c33e:	f9 01       	movw	r30, r18
    c340:	80 83       	st	Z, r24
    c342:	91 83       	std	Z+1, r25	; 0x01
    c344:	a2 83       	std	Z+2, r26	; 0x02
    c346:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c348:	8e 01       	movw	r16, r28
    c34a:	0f 5b       	subi	r16, 0xBF	; 191
    c34c:	1c 4f       	sbci	r17, 0xFC	; 252
    c34e:	ce 01       	movw	r24, r28
    c350:	83 5c       	subi	r24, 0xC3	; 195
    c352:	9c 4f       	sbci	r25, 0xFC	; 252
    c354:	fc 01       	movw	r30, r24
    c356:	60 81       	ld	r22, Z
    c358:	71 81       	ldd	r23, Z+1	; 0x01
    c35a:	82 81       	ldd	r24, Z+2	; 0x02
    c35c:	93 81       	ldd	r25, Z+3	; 0x03
    c35e:	26 e6       	ldi	r18, 0x66	; 102
    c360:	36 e6       	ldi	r19, 0x66	; 102
    c362:	46 e6       	ldi	r20, 0x66	; 102
    c364:	55 e4       	ldi	r21, 0x45	; 69
    c366:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c36a:	dc 01       	movw	r26, r24
    c36c:	cb 01       	movw	r24, r22
    c36e:	f8 01       	movw	r30, r16
    c370:	80 83       	st	Z, r24
    c372:	91 83       	std	Z+1, r25	; 0x01
    c374:	a2 83       	std	Z+2, r26	; 0x02
    c376:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c378:	ce 01       	movw	r24, r28
    c37a:	8f 5b       	subi	r24, 0xBF	; 191
    c37c:	9c 4f       	sbci	r25, 0xFC	; 252
    c37e:	11 e0       	ldi	r17, 0x01	; 1
    c380:	fc 01       	movw	r30, r24
    c382:	60 81       	ld	r22, Z
    c384:	71 81       	ldd	r23, Z+1	; 0x01
    c386:	82 81       	ldd	r24, Z+2	; 0x02
    c388:	93 81       	ldd	r25, Z+3	; 0x03
    c38a:	20 e0       	ldi	r18, 0x00	; 0
    c38c:	30 e0       	ldi	r19, 0x00	; 0
    c38e:	40 e8       	ldi	r20, 0x80	; 128
    c390:	5f e3       	ldi	r21, 0x3F	; 63
    c392:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    c396:	88 23       	and	r24, r24
    c398:	0c f0       	brlt	.+2      	; 0xc39c <pick_drop+0x62aa>
    c39a:	10 e0       	ldi	r17, 0x00	; 0
    c39c:	11 23       	and	r17, r17
    c39e:	49 f0       	breq	.+18     	; 0xc3b2 <pick_drop+0x62c0>
		__ticks = 1;
    c3a0:	ce 01       	movw	r24, r28
    c3a2:	8b 5b       	subi	r24, 0xBB	; 187
    c3a4:	9c 4f       	sbci	r25, 0xFC	; 252
    c3a6:	21 e0       	ldi	r18, 0x01	; 1
    c3a8:	30 e0       	ldi	r19, 0x00	; 0
    c3aa:	fc 01       	movw	r30, r24
    c3ac:	31 83       	std	Z+1, r19	; 0x01
    c3ae:	20 83       	st	Z, r18
    c3b0:	74 c0       	rjmp	.+232    	; 0xc49a <pick_drop+0x63a8>
	else if (__tmp > 65535)
    c3b2:	ce 01       	movw	r24, r28
    c3b4:	8f 5b       	subi	r24, 0xBF	; 191
    c3b6:	9c 4f       	sbci	r25, 0xFC	; 252
    c3b8:	11 e0       	ldi	r17, 0x01	; 1
    c3ba:	fc 01       	movw	r30, r24
    c3bc:	60 81       	ld	r22, Z
    c3be:	71 81       	ldd	r23, Z+1	; 0x01
    c3c0:	82 81       	ldd	r24, Z+2	; 0x02
    c3c2:	93 81       	ldd	r25, Z+3	; 0x03
    c3c4:	20 e0       	ldi	r18, 0x00	; 0
    c3c6:	3f ef       	ldi	r19, 0xFF	; 255
    c3c8:	4f e7       	ldi	r20, 0x7F	; 127
    c3ca:	57 e4       	ldi	r21, 0x47	; 71
    c3cc:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    c3d0:	18 16       	cp	r1, r24
    c3d2:	0c f0       	brlt	.+2      	; 0xc3d6 <pick_drop+0x62e4>
    c3d4:	10 e0       	ldi	r17, 0x00	; 0
    c3d6:	11 23       	and	r17, r17
    c3d8:	09 f4       	brne	.+2      	; 0xc3dc <pick_drop+0x62ea>
    c3da:	4d c0       	rjmp	.+154    	; 0xc476 <pick_drop+0x6384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c3dc:	ce 01       	movw	r24, r28
    c3de:	83 5c       	subi	r24, 0xC3	; 195
    c3e0:	9c 4f       	sbci	r25, 0xFC	; 252
    c3e2:	fc 01       	movw	r30, r24
    c3e4:	60 81       	ld	r22, Z
    c3e6:	71 81       	ldd	r23, Z+1	; 0x01
    c3e8:	82 81       	ldd	r24, Z+2	; 0x02
    c3ea:	93 81       	ldd	r25, Z+3	; 0x03
    c3ec:	20 e0       	ldi	r18, 0x00	; 0
    c3ee:	30 e0       	ldi	r19, 0x00	; 0
    c3f0:	40 e2       	ldi	r20, 0x20	; 32
    c3f2:	51 e4       	ldi	r21, 0x41	; 65
    c3f4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c3f8:	dc 01       	movw	r26, r24
    c3fa:	cb 01       	movw	r24, r22
    c3fc:	8e 01       	movw	r16, r28
    c3fe:	0b 5b       	subi	r16, 0xBB	; 187
    c400:	1c 4f       	sbci	r17, 0xFC	; 252
    c402:	bc 01       	movw	r22, r24
    c404:	cd 01       	movw	r24, r26
    c406:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c40a:	dc 01       	movw	r26, r24
    c40c:	cb 01       	movw	r24, r22
    c40e:	f8 01       	movw	r30, r16
    c410:	91 83       	std	Z+1, r25	; 0x01
    c412:	80 83       	st	Z, r24
    c414:	27 c0       	rjmp	.+78     	; 0xc464 <pick_drop+0x6372>
    c416:	ce 01       	movw	r24, r28
    c418:	89 5b       	subi	r24, 0xB9	; 185
    c41a:	9c 4f       	sbci	r25, 0xFC	; 252
    c41c:	20 e7       	ldi	r18, 0x70	; 112
    c41e:	31 e0       	ldi	r19, 0x01	; 1
    c420:	fc 01       	movw	r30, r24
    c422:	31 83       	std	Z+1, r19	; 0x01
    c424:	20 83       	st	Z, r18
    c426:	ce 01       	movw	r24, r28
    c428:	89 5b       	subi	r24, 0xB9	; 185
    c42a:	9c 4f       	sbci	r25, 0xFC	; 252
    c42c:	fc 01       	movw	r30, r24
    c42e:	80 81       	ld	r24, Z
    c430:	91 81       	ldd	r25, Z+1	; 0x01
    c432:	8c 01       	movw	r16, r24
    c434:	c8 01       	movw	r24, r16
    c436:	01 97       	sbiw	r24, 0x01	; 1
    c438:	f1 f7       	brne	.-4      	; 0xc436 <pick_drop+0x6344>
    c43a:	8c 01       	movw	r16, r24
    c43c:	ce 01       	movw	r24, r28
    c43e:	89 5b       	subi	r24, 0xB9	; 185
    c440:	9c 4f       	sbci	r25, 0xFC	; 252
    c442:	fc 01       	movw	r30, r24
    c444:	11 83       	std	Z+1, r17	; 0x01
    c446:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c448:	ce 01       	movw	r24, r28
    c44a:	8b 5b       	subi	r24, 0xBB	; 187
    c44c:	9c 4f       	sbci	r25, 0xFC	; 252
    c44e:	9e 01       	movw	r18, r28
    c450:	2b 5b       	subi	r18, 0xBB	; 187
    c452:	3c 4f       	sbci	r19, 0xFC	; 252
    c454:	f9 01       	movw	r30, r18
    c456:	20 81       	ld	r18, Z
    c458:	31 81       	ldd	r19, Z+1	; 0x01
    c45a:	21 50       	subi	r18, 0x01	; 1
    c45c:	30 40       	sbci	r19, 0x00	; 0
    c45e:	fc 01       	movw	r30, r24
    c460:	31 83       	std	Z+1, r19	; 0x01
    c462:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c464:	ce 01       	movw	r24, r28
    c466:	8b 5b       	subi	r24, 0xBB	; 187
    c468:	9c 4f       	sbci	r25, 0xFC	; 252
    c46a:	fc 01       	movw	r30, r24
    c46c:	80 81       	ld	r24, Z
    c46e:	91 81       	ldd	r25, Z+1	; 0x01
    c470:	00 97       	sbiw	r24, 0x00	; 0
    c472:	89 f6       	brne	.-94     	; 0xc416 <pick_drop+0x6324>
    c474:	2f c0       	rjmp	.+94     	; 0xc4d4 <pick_drop+0x63e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c476:	8e 01       	movw	r16, r28
    c478:	0b 5b       	subi	r16, 0xBB	; 187
    c47a:	1c 4f       	sbci	r17, 0xFC	; 252
    c47c:	ce 01       	movw	r24, r28
    c47e:	8f 5b       	subi	r24, 0xBF	; 191
    c480:	9c 4f       	sbci	r25, 0xFC	; 252
    c482:	fc 01       	movw	r30, r24
    c484:	60 81       	ld	r22, Z
    c486:	71 81       	ldd	r23, Z+1	; 0x01
    c488:	82 81       	ldd	r24, Z+2	; 0x02
    c48a:	93 81       	ldd	r25, Z+3	; 0x03
    c48c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c490:	dc 01       	movw	r26, r24
    c492:	cb 01       	movw	r24, r22
    c494:	f8 01       	movw	r30, r16
    c496:	91 83       	std	Z+1, r25	; 0x01
    c498:	80 83       	st	Z, r24
    c49a:	ce 01       	movw	r24, r28
    c49c:	87 5b       	subi	r24, 0xB7	; 183
    c49e:	9c 4f       	sbci	r25, 0xFC	; 252
    c4a0:	9e 01       	movw	r18, r28
    c4a2:	2b 5b       	subi	r18, 0xBB	; 187
    c4a4:	3c 4f       	sbci	r19, 0xFC	; 252
    c4a6:	f9 01       	movw	r30, r18
    c4a8:	20 81       	ld	r18, Z
    c4aa:	31 81       	ldd	r19, Z+1	; 0x01
    c4ac:	fc 01       	movw	r30, r24
    c4ae:	31 83       	std	Z+1, r19	; 0x01
    c4b0:	20 83       	st	Z, r18
    c4b2:	ce 01       	movw	r24, r28
    c4b4:	87 5b       	subi	r24, 0xB7	; 183
    c4b6:	9c 4f       	sbci	r25, 0xFC	; 252
    c4b8:	fc 01       	movw	r30, r24
    c4ba:	80 81       	ld	r24, Z
    c4bc:	91 81       	ldd	r25, Z+1	; 0x01
    c4be:	8c 01       	movw	r16, r24
    c4c0:	c8 01       	movw	r24, r16
    c4c2:	01 97       	sbiw	r24, 0x01	; 1
    c4c4:	f1 f7       	brne	.-4      	; 0xc4c2 <pick_drop+0x63d0>
    c4c6:	8c 01       	movw	r16, r24
    c4c8:	ce 01       	movw	r24, r28
    c4ca:	87 5b       	subi	r24, 0xB7	; 183
    c4cc:	9c 4f       	sbci	r25, 0xFC	; 252
    c4ce:	fc 01       	movw	r30, r24
    c4d0:	11 83       	std	Z+1, r17	; 0x01
    c4d2:	00 83       	st	Z, r16
			_delay_ms(20);
			spl_left();
    c4d4:	0e 94 4e 12 	call	0x249c	; 0x249c <spl_left>
    c4d8:	9e 01       	movw	r18, r28
    c4da:	25 5b       	subi	r18, 0xB5	; 181
    c4dc:	3c 4f       	sbci	r19, 0xFC	; 252
    c4de:	80 e0       	ldi	r24, 0x00	; 0
    c4e0:	90 e0       	ldi	r25, 0x00	; 0
    c4e2:	a0 ea       	ldi	r26, 0xA0	; 160
    c4e4:	b1 e4       	ldi	r27, 0x41	; 65
    c4e6:	f9 01       	movw	r30, r18
    c4e8:	80 83       	st	Z, r24
    c4ea:	91 83       	std	Z+1, r25	; 0x01
    c4ec:	a2 83       	std	Z+2, r26	; 0x02
    c4ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c4f0:	8e 01       	movw	r16, r28
    c4f2:	01 5b       	subi	r16, 0xB1	; 177
    c4f4:	1c 4f       	sbci	r17, 0xFC	; 252
    c4f6:	ce 01       	movw	r24, r28
    c4f8:	85 5b       	subi	r24, 0xB5	; 181
    c4fa:	9c 4f       	sbci	r25, 0xFC	; 252
    c4fc:	fc 01       	movw	r30, r24
    c4fe:	60 81       	ld	r22, Z
    c500:	71 81       	ldd	r23, Z+1	; 0x01
    c502:	82 81       	ldd	r24, Z+2	; 0x02
    c504:	93 81       	ldd	r25, Z+3	; 0x03
    c506:	26 e6       	ldi	r18, 0x66	; 102
    c508:	36 e6       	ldi	r19, 0x66	; 102
    c50a:	46 e6       	ldi	r20, 0x66	; 102
    c50c:	55 e4       	ldi	r21, 0x45	; 69
    c50e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c512:	dc 01       	movw	r26, r24
    c514:	cb 01       	movw	r24, r22
    c516:	f8 01       	movw	r30, r16
    c518:	80 83       	st	Z, r24
    c51a:	91 83       	std	Z+1, r25	; 0x01
    c51c:	a2 83       	std	Z+2, r26	; 0x02
    c51e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c520:	ce 01       	movw	r24, r28
    c522:	81 5b       	subi	r24, 0xB1	; 177
    c524:	9c 4f       	sbci	r25, 0xFC	; 252
    c526:	11 e0       	ldi	r17, 0x01	; 1
    c528:	fc 01       	movw	r30, r24
    c52a:	60 81       	ld	r22, Z
    c52c:	71 81       	ldd	r23, Z+1	; 0x01
    c52e:	82 81       	ldd	r24, Z+2	; 0x02
    c530:	93 81       	ldd	r25, Z+3	; 0x03
    c532:	20 e0       	ldi	r18, 0x00	; 0
    c534:	30 e0       	ldi	r19, 0x00	; 0
    c536:	40 e8       	ldi	r20, 0x80	; 128
    c538:	5f e3       	ldi	r21, 0x3F	; 63
    c53a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    c53e:	88 23       	and	r24, r24
    c540:	0c f0       	brlt	.+2      	; 0xc544 <pick_drop+0x6452>
    c542:	10 e0       	ldi	r17, 0x00	; 0
    c544:	11 23       	and	r17, r17
    c546:	49 f0       	breq	.+18     	; 0xc55a <pick_drop+0x6468>
		__ticks = 1;
    c548:	ce 01       	movw	r24, r28
    c54a:	8d 5a       	subi	r24, 0xAD	; 173
    c54c:	9c 4f       	sbci	r25, 0xFC	; 252
    c54e:	21 e0       	ldi	r18, 0x01	; 1
    c550:	30 e0       	ldi	r19, 0x00	; 0
    c552:	fc 01       	movw	r30, r24
    c554:	31 83       	std	Z+1, r19	; 0x01
    c556:	20 83       	st	Z, r18
    c558:	74 c0       	rjmp	.+232    	; 0xc642 <pick_drop+0x6550>
	else if (__tmp > 65535)
    c55a:	ce 01       	movw	r24, r28
    c55c:	81 5b       	subi	r24, 0xB1	; 177
    c55e:	9c 4f       	sbci	r25, 0xFC	; 252
    c560:	11 e0       	ldi	r17, 0x01	; 1
    c562:	fc 01       	movw	r30, r24
    c564:	60 81       	ld	r22, Z
    c566:	71 81       	ldd	r23, Z+1	; 0x01
    c568:	82 81       	ldd	r24, Z+2	; 0x02
    c56a:	93 81       	ldd	r25, Z+3	; 0x03
    c56c:	20 e0       	ldi	r18, 0x00	; 0
    c56e:	3f ef       	ldi	r19, 0xFF	; 255
    c570:	4f e7       	ldi	r20, 0x7F	; 127
    c572:	57 e4       	ldi	r21, 0x47	; 71
    c574:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    c578:	18 16       	cp	r1, r24
    c57a:	0c f0       	brlt	.+2      	; 0xc57e <pick_drop+0x648c>
    c57c:	10 e0       	ldi	r17, 0x00	; 0
    c57e:	11 23       	and	r17, r17
    c580:	09 f4       	brne	.+2      	; 0xc584 <pick_drop+0x6492>
    c582:	4d c0       	rjmp	.+154    	; 0xc61e <pick_drop+0x652c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c584:	ce 01       	movw	r24, r28
    c586:	85 5b       	subi	r24, 0xB5	; 181
    c588:	9c 4f       	sbci	r25, 0xFC	; 252
    c58a:	fc 01       	movw	r30, r24
    c58c:	60 81       	ld	r22, Z
    c58e:	71 81       	ldd	r23, Z+1	; 0x01
    c590:	82 81       	ldd	r24, Z+2	; 0x02
    c592:	93 81       	ldd	r25, Z+3	; 0x03
    c594:	20 e0       	ldi	r18, 0x00	; 0
    c596:	30 e0       	ldi	r19, 0x00	; 0
    c598:	40 e2       	ldi	r20, 0x20	; 32
    c59a:	51 e4       	ldi	r21, 0x41	; 65
    c59c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c5a0:	dc 01       	movw	r26, r24
    c5a2:	cb 01       	movw	r24, r22
    c5a4:	8e 01       	movw	r16, r28
    c5a6:	0d 5a       	subi	r16, 0xAD	; 173
    c5a8:	1c 4f       	sbci	r17, 0xFC	; 252
    c5aa:	bc 01       	movw	r22, r24
    c5ac:	cd 01       	movw	r24, r26
    c5ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c5b2:	dc 01       	movw	r26, r24
    c5b4:	cb 01       	movw	r24, r22
    c5b6:	f8 01       	movw	r30, r16
    c5b8:	91 83       	std	Z+1, r25	; 0x01
    c5ba:	80 83       	st	Z, r24
    c5bc:	27 c0       	rjmp	.+78     	; 0xc60c <pick_drop+0x651a>
    c5be:	ce 01       	movw	r24, r28
    c5c0:	8b 5a       	subi	r24, 0xAB	; 171
    c5c2:	9c 4f       	sbci	r25, 0xFC	; 252
    c5c4:	20 e7       	ldi	r18, 0x70	; 112
    c5c6:	31 e0       	ldi	r19, 0x01	; 1
    c5c8:	fc 01       	movw	r30, r24
    c5ca:	31 83       	std	Z+1, r19	; 0x01
    c5cc:	20 83       	st	Z, r18
    c5ce:	ce 01       	movw	r24, r28
    c5d0:	8b 5a       	subi	r24, 0xAB	; 171
    c5d2:	9c 4f       	sbci	r25, 0xFC	; 252
    c5d4:	fc 01       	movw	r30, r24
    c5d6:	80 81       	ld	r24, Z
    c5d8:	91 81       	ldd	r25, Z+1	; 0x01
    c5da:	8c 01       	movw	r16, r24
    c5dc:	c8 01       	movw	r24, r16
    c5de:	01 97       	sbiw	r24, 0x01	; 1
    c5e0:	f1 f7       	brne	.-4      	; 0xc5de <pick_drop+0x64ec>
    c5e2:	8c 01       	movw	r16, r24
    c5e4:	ce 01       	movw	r24, r28
    c5e6:	8b 5a       	subi	r24, 0xAB	; 171
    c5e8:	9c 4f       	sbci	r25, 0xFC	; 252
    c5ea:	fc 01       	movw	r30, r24
    c5ec:	11 83       	std	Z+1, r17	; 0x01
    c5ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c5f0:	ce 01       	movw	r24, r28
    c5f2:	8d 5a       	subi	r24, 0xAD	; 173
    c5f4:	9c 4f       	sbci	r25, 0xFC	; 252
    c5f6:	9e 01       	movw	r18, r28
    c5f8:	2d 5a       	subi	r18, 0xAD	; 173
    c5fa:	3c 4f       	sbci	r19, 0xFC	; 252
    c5fc:	f9 01       	movw	r30, r18
    c5fe:	20 81       	ld	r18, Z
    c600:	31 81       	ldd	r19, Z+1	; 0x01
    c602:	21 50       	subi	r18, 0x01	; 1
    c604:	30 40       	sbci	r19, 0x00	; 0
    c606:	fc 01       	movw	r30, r24
    c608:	31 83       	std	Z+1, r19	; 0x01
    c60a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c60c:	ce 01       	movw	r24, r28
    c60e:	8d 5a       	subi	r24, 0xAD	; 173
    c610:	9c 4f       	sbci	r25, 0xFC	; 252
    c612:	fc 01       	movw	r30, r24
    c614:	80 81       	ld	r24, Z
    c616:	91 81       	ldd	r25, Z+1	; 0x01
    c618:	00 97       	sbiw	r24, 0x00	; 0
    c61a:	89 f6       	brne	.-94     	; 0xc5be <pick_drop+0x64cc>
    c61c:	2f c0       	rjmp	.+94     	; 0xc67c <pick_drop+0x658a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c61e:	8e 01       	movw	r16, r28
    c620:	0d 5a       	subi	r16, 0xAD	; 173
    c622:	1c 4f       	sbci	r17, 0xFC	; 252
    c624:	ce 01       	movw	r24, r28
    c626:	81 5b       	subi	r24, 0xB1	; 177
    c628:	9c 4f       	sbci	r25, 0xFC	; 252
    c62a:	fc 01       	movw	r30, r24
    c62c:	60 81       	ld	r22, Z
    c62e:	71 81       	ldd	r23, Z+1	; 0x01
    c630:	82 81       	ldd	r24, Z+2	; 0x02
    c632:	93 81       	ldd	r25, Z+3	; 0x03
    c634:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c638:	dc 01       	movw	r26, r24
    c63a:	cb 01       	movw	r24, r22
    c63c:	f8 01       	movw	r30, r16
    c63e:	91 83       	std	Z+1, r25	; 0x01
    c640:	80 83       	st	Z, r24
    c642:	ce 01       	movw	r24, r28
    c644:	89 5a       	subi	r24, 0xA9	; 169
    c646:	9c 4f       	sbci	r25, 0xFC	; 252
    c648:	9e 01       	movw	r18, r28
    c64a:	2d 5a       	subi	r18, 0xAD	; 173
    c64c:	3c 4f       	sbci	r19, 0xFC	; 252
    c64e:	f9 01       	movw	r30, r18
    c650:	20 81       	ld	r18, Z
    c652:	31 81       	ldd	r19, Z+1	; 0x01
    c654:	fc 01       	movw	r30, r24
    c656:	31 83       	std	Z+1, r19	; 0x01
    c658:	20 83       	st	Z, r18
    c65a:	ce 01       	movw	r24, r28
    c65c:	89 5a       	subi	r24, 0xA9	; 169
    c65e:	9c 4f       	sbci	r25, 0xFC	; 252
    c660:	fc 01       	movw	r30, r24
    c662:	80 81       	ld	r24, Z
    c664:	91 81       	ldd	r25, Z+1	; 0x01
    c666:	8c 01       	movw	r16, r24
    c668:	c8 01       	movw	r24, r16
    c66a:	01 97       	sbiw	r24, 0x01	; 1
    c66c:	f1 f7       	brne	.-4      	; 0xc66a <pick_drop+0x6578>
    c66e:	8c 01       	movw	r16, r24
    c670:	ce 01       	movw	r24, r28
    c672:	89 5a       	subi	r24, 0xA9	; 169
    c674:	9c 4f       	sbci	r25, 0xFC	; 252
    c676:	fc 01       	movw	r30, r24
    c678:	11 83       	std	Z+1, r17	; 0x01
    c67a:	00 83       	st	Z, r16
			_delay_ms(20);
			front();
    c67c:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    c680:	9e 01       	movw	r18, r28
    c682:	27 5a       	subi	r18, 0xA7	; 167
    c684:	3c 4f       	sbci	r19, 0xFC	; 252
    c686:	80 e0       	ldi	r24, 0x00	; 0
    c688:	90 e0       	ldi	r25, 0x00	; 0
    c68a:	a8 ec       	ldi	r26, 0xC8	; 200
    c68c:	b2 e4       	ldi	r27, 0x42	; 66
    c68e:	f9 01       	movw	r30, r18
    c690:	80 83       	st	Z, r24
    c692:	91 83       	std	Z+1, r25	; 0x01
    c694:	a2 83       	std	Z+2, r26	; 0x02
    c696:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c698:	8e 01       	movw	r16, r28
    c69a:	03 5a       	subi	r16, 0xA3	; 163
    c69c:	1c 4f       	sbci	r17, 0xFC	; 252
    c69e:	ce 01       	movw	r24, r28
    c6a0:	87 5a       	subi	r24, 0xA7	; 167
    c6a2:	9c 4f       	sbci	r25, 0xFC	; 252
    c6a4:	fc 01       	movw	r30, r24
    c6a6:	60 81       	ld	r22, Z
    c6a8:	71 81       	ldd	r23, Z+1	; 0x01
    c6aa:	82 81       	ldd	r24, Z+2	; 0x02
    c6ac:	93 81       	ldd	r25, Z+3	; 0x03
    c6ae:	26 e6       	ldi	r18, 0x66	; 102
    c6b0:	36 e6       	ldi	r19, 0x66	; 102
    c6b2:	46 e6       	ldi	r20, 0x66	; 102
    c6b4:	55 e4       	ldi	r21, 0x45	; 69
    c6b6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c6ba:	dc 01       	movw	r26, r24
    c6bc:	cb 01       	movw	r24, r22
    c6be:	f8 01       	movw	r30, r16
    c6c0:	80 83       	st	Z, r24
    c6c2:	91 83       	std	Z+1, r25	; 0x01
    c6c4:	a2 83       	std	Z+2, r26	; 0x02
    c6c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c6c8:	ce 01       	movw	r24, r28
    c6ca:	83 5a       	subi	r24, 0xA3	; 163
    c6cc:	9c 4f       	sbci	r25, 0xFC	; 252
    c6ce:	11 e0       	ldi	r17, 0x01	; 1
    c6d0:	fc 01       	movw	r30, r24
    c6d2:	60 81       	ld	r22, Z
    c6d4:	71 81       	ldd	r23, Z+1	; 0x01
    c6d6:	82 81       	ldd	r24, Z+2	; 0x02
    c6d8:	93 81       	ldd	r25, Z+3	; 0x03
    c6da:	20 e0       	ldi	r18, 0x00	; 0
    c6dc:	30 e0       	ldi	r19, 0x00	; 0
    c6de:	40 e8       	ldi	r20, 0x80	; 128
    c6e0:	5f e3       	ldi	r21, 0x3F	; 63
    c6e2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    c6e6:	88 23       	and	r24, r24
    c6e8:	0c f0       	brlt	.+2      	; 0xc6ec <pick_drop+0x65fa>
    c6ea:	10 e0       	ldi	r17, 0x00	; 0
    c6ec:	11 23       	and	r17, r17
    c6ee:	49 f0       	breq	.+18     	; 0xc702 <pick_drop+0x6610>
		__ticks = 1;
    c6f0:	ce 01       	movw	r24, r28
    c6f2:	8f 59       	subi	r24, 0x9F	; 159
    c6f4:	9c 4f       	sbci	r25, 0xFC	; 252
    c6f6:	21 e0       	ldi	r18, 0x01	; 1
    c6f8:	30 e0       	ldi	r19, 0x00	; 0
    c6fa:	fc 01       	movw	r30, r24
    c6fc:	31 83       	std	Z+1, r19	; 0x01
    c6fe:	20 83       	st	Z, r18
    c700:	74 c0       	rjmp	.+232    	; 0xc7ea <pick_drop+0x66f8>
	else if (__tmp > 65535)
    c702:	ce 01       	movw	r24, r28
    c704:	83 5a       	subi	r24, 0xA3	; 163
    c706:	9c 4f       	sbci	r25, 0xFC	; 252
    c708:	11 e0       	ldi	r17, 0x01	; 1
    c70a:	fc 01       	movw	r30, r24
    c70c:	60 81       	ld	r22, Z
    c70e:	71 81       	ldd	r23, Z+1	; 0x01
    c710:	82 81       	ldd	r24, Z+2	; 0x02
    c712:	93 81       	ldd	r25, Z+3	; 0x03
    c714:	20 e0       	ldi	r18, 0x00	; 0
    c716:	3f ef       	ldi	r19, 0xFF	; 255
    c718:	4f e7       	ldi	r20, 0x7F	; 127
    c71a:	57 e4       	ldi	r21, 0x47	; 71
    c71c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    c720:	18 16       	cp	r1, r24
    c722:	0c f0       	brlt	.+2      	; 0xc726 <pick_drop+0x6634>
    c724:	10 e0       	ldi	r17, 0x00	; 0
    c726:	11 23       	and	r17, r17
    c728:	09 f4       	brne	.+2      	; 0xc72c <pick_drop+0x663a>
    c72a:	4d c0       	rjmp	.+154    	; 0xc7c6 <pick_drop+0x66d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c72c:	ce 01       	movw	r24, r28
    c72e:	87 5a       	subi	r24, 0xA7	; 167
    c730:	9c 4f       	sbci	r25, 0xFC	; 252
    c732:	fc 01       	movw	r30, r24
    c734:	60 81       	ld	r22, Z
    c736:	71 81       	ldd	r23, Z+1	; 0x01
    c738:	82 81       	ldd	r24, Z+2	; 0x02
    c73a:	93 81       	ldd	r25, Z+3	; 0x03
    c73c:	20 e0       	ldi	r18, 0x00	; 0
    c73e:	30 e0       	ldi	r19, 0x00	; 0
    c740:	40 e2       	ldi	r20, 0x20	; 32
    c742:	51 e4       	ldi	r21, 0x41	; 65
    c744:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c748:	dc 01       	movw	r26, r24
    c74a:	cb 01       	movw	r24, r22
    c74c:	8e 01       	movw	r16, r28
    c74e:	0f 59       	subi	r16, 0x9F	; 159
    c750:	1c 4f       	sbci	r17, 0xFC	; 252
    c752:	bc 01       	movw	r22, r24
    c754:	cd 01       	movw	r24, r26
    c756:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c75a:	dc 01       	movw	r26, r24
    c75c:	cb 01       	movw	r24, r22
    c75e:	f8 01       	movw	r30, r16
    c760:	91 83       	std	Z+1, r25	; 0x01
    c762:	80 83       	st	Z, r24
    c764:	27 c0       	rjmp	.+78     	; 0xc7b4 <pick_drop+0x66c2>
    c766:	ce 01       	movw	r24, r28
    c768:	8d 59       	subi	r24, 0x9D	; 157
    c76a:	9c 4f       	sbci	r25, 0xFC	; 252
    c76c:	20 e7       	ldi	r18, 0x70	; 112
    c76e:	31 e0       	ldi	r19, 0x01	; 1
    c770:	fc 01       	movw	r30, r24
    c772:	31 83       	std	Z+1, r19	; 0x01
    c774:	20 83       	st	Z, r18
    c776:	ce 01       	movw	r24, r28
    c778:	8d 59       	subi	r24, 0x9D	; 157
    c77a:	9c 4f       	sbci	r25, 0xFC	; 252
    c77c:	fc 01       	movw	r30, r24
    c77e:	80 81       	ld	r24, Z
    c780:	91 81       	ldd	r25, Z+1	; 0x01
    c782:	8c 01       	movw	r16, r24
    c784:	c8 01       	movw	r24, r16
    c786:	01 97       	sbiw	r24, 0x01	; 1
    c788:	f1 f7       	brne	.-4      	; 0xc786 <pick_drop+0x6694>
    c78a:	8c 01       	movw	r16, r24
    c78c:	ce 01       	movw	r24, r28
    c78e:	8d 59       	subi	r24, 0x9D	; 157
    c790:	9c 4f       	sbci	r25, 0xFC	; 252
    c792:	fc 01       	movw	r30, r24
    c794:	11 83       	std	Z+1, r17	; 0x01
    c796:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c798:	ce 01       	movw	r24, r28
    c79a:	8f 59       	subi	r24, 0x9F	; 159
    c79c:	9c 4f       	sbci	r25, 0xFC	; 252
    c79e:	9e 01       	movw	r18, r28
    c7a0:	2f 59       	subi	r18, 0x9F	; 159
    c7a2:	3c 4f       	sbci	r19, 0xFC	; 252
    c7a4:	f9 01       	movw	r30, r18
    c7a6:	20 81       	ld	r18, Z
    c7a8:	31 81       	ldd	r19, Z+1	; 0x01
    c7aa:	21 50       	subi	r18, 0x01	; 1
    c7ac:	30 40       	sbci	r19, 0x00	; 0
    c7ae:	fc 01       	movw	r30, r24
    c7b0:	31 83       	std	Z+1, r19	; 0x01
    c7b2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c7b4:	ce 01       	movw	r24, r28
    c7b6:	8f 59       	subi	r24, 0x9F	; 159
    c7b8:	9c 4f       	sbci	r25, 0xFC	; 252
    c7ba:	fc 01       	movw	r30, r24
    c7bc:	80 81       	ld	r24, Z
    c7be:	91 81       	ldd	r25, Z+1	; 0x01
    c7c0:	00 97       	sbiw	r24, 0x00	; 0
    c7c2:	89 f6       	brne	.-94     	; 0xc766 <pick_drop+0x6674>
    c7c4:	2f c0       	rjmp	.+94     	; 0xc824 <pick_drop+0x6732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c7c6:	8e 01       	movw	r16, r28
    c7c8:	0f 59       	subi	r16, 0x9F	; 159
    c7ca:	1c 4f       	sbci	r17, 0xFC	; 252
    c7cc:	ce 01       	movw	r24, r28
    c7ce:	83 5a       	subi	r24, 0xA3	; 163
    c7d0:	9c 4f       	sbci	r25, 0xFC	; 252
    c7d2:	fc 01       	movw	r30, r24
    c7d4:	60 81       	ld	r22, Z
    c7d6:	71 81       	ldd	r23, Z+1	; 0x01
    c7d8:	82 81       	ldd	r24, Z+2	; 0x02
    c7da:	93 81       	ldd	r25, Z+3	; 0x03
    c7dc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c7e0:	dc 01       	movw	r26, r24
    c7e2:	cb 01       	movw	r24, r22
    c7e4:	f8 01       	movw	r30, r16
    c7e6:	91 83       	std	Z+1, r25	; 0x01
    c7e8:	80 83       	st	Z, r24
    c7ea:	ce 01       	movw	r24, r28
    c7ec:	8b 59       	subi	r24, 0x9B	; 155
    c7ee:	9c 4f       	sbci	r25, 0xFC	; 252
    c7f0:	9e 01       	movw	r18, r28
    c7f2:	2f 59       	subi	r18, 0x9F	; 159
    c7f4:	3c 4f       	sbci	r19, 0xFC	; 252
    c7f6:	f9 01       	movw	r30, r18
    c7f8:	20 81       	ld	r18, Z
    c7fa:	31 81       	ldd	r19, Z+1	; 0x01
    c7fc:	fc 01       	movw	r30, r24
    c7fe:	31 83       	std	Z+1, r19	; 0x01
    c800:	20 83       	st	Z, r18
    c802:	ce 01       	movw	r24, r28
    c804:	8b 59       	subi	r24, 0x9B	; 155
    c806:	9c 4f       	sbci	r25, 0xFC	; 252
    c808:	fc 01       	movw	r30, r24
    c80a:	80 81       	ld	r24, Z
    c80c:	91 81       	ldd	r25, Z+1	; 0x01
    c80e:	8c 01       	movw	r16, r24
    c810:	c8 01       	movw	r24, r16
    c812:	01 97       	sbiw	r24, 0x01	; 1
    c814:	f1 f7       	brne	.-4      	; 0xc812 <pick_drop+0x6720>
    c816:	8c 01       	movw	r16, r24
    c818:	ce 01       	movw	r24, r28
    c81a:	8b 59       	subi	r24, 0x9B	; 155
    c81c:	9c 4f       	sbci	r25, 0xFC	; 252
    c81e:	fc 01       	movw	r30, r24
    c820:	11 83       	std	Z+1, r17	; 0x01
    c822:	00 83       	st	Z, r16
			_delay_ms(100);
			right_degrees(50);
    c824:	82 e3       	ldi	r24, 0x32	; 50
    c826:	90 e0       	ldi	r25, 0x00	; 0
    c828:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <right_degrees>
    c82c:	9e 01       	movw	r18, r28
    c82e:	29 59       	subi	r18, 0x99	; 153
    c830:	3c 4f       	sbci	r19, 0xFC	; 252
    c832:	80 e0       	ldi	r24, 0x00	; 0
    c834:	90 e0       	ldi	r25, 0x00	; 0
    c836:	a0 ea       	ldi	r26, 0xA0	; 160
    c838:	b1 e4       	ldi	r27, 0x41	; 65
    c83a:	f9 01       	movw	r30, r18
    c83c:	80 83       	st	Z, r24
    c83e:	91 83       	std	Z+1, r25	; 0x01
    c840:	a2 83       	std	Z+2, r26	; 0x02
    c842:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c844:	8e 01       	movw	r16, r28
    c846:	05 59       	subi	r16, 0x95	; 149
    c848:	1c 4f       	sbci	r17, 0xFC	; 252
    c84a:	ce 01       	movw	r24, r28
    c84c:	89 59       	subi	r24, 0x99	; 153
    c84e:	9c 4f       	sbci	r25, 0xFC	; 252
    c850:	fc 01       	movw	r30, r24
    c852:	60 81       	ld	r22, Z
    c854:	71 81       	ldd	r23, Z+1	; 0x01
    c856:	82 81       	ldd	r24, Z+2	; 0x02
    c858:	93 81       	ldd	r25, Z+3	; 0x03
    c85a:	26 e6       	ldi	r18, 0x66	; 102
    c85c:	36 e6       	ldi	r19, 0x66	; 102
    c85e:	46 e6       	ldi	r20, 0x66	; 102
    c860:	55 e4       	ldi	r21, 0x45	; 69
    c862:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c866:	dc 01       	movw	r26, r24
    c868:	cb 01       	movw	r24, r22
    c86a:	f8 01       	movw	r30, r16
    c86c:	80 83       	st	Z, r24
    c86e:	91 83       	std	Z+1, r25	; 0x01
    c870:	a2 83       	std	Z+2, r26	; 0x02
    c872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    c874:	ce 01       	movw	r24, r28
    c876:	85 59       	subi	r24, 0x95	; 149
    c878:	9c 4f       	sbci	r25, 0xFC	; 252
    c87a:	11 e0       	ldi	r17, 0x01	; 1
    c87c:	fc 01       	movw	r30, r24
    c87e:	60 81       	ld	r22, Z
    c880:	71 81       	ldd	r23, Z+1	; 0x01
    c882:	82 81       	ldd	r24, Z+2	; 0x02
    c884:	93 81       	ldd	r25, Z+3	; 0x03
    c886:	20 e0       	ldi	r18, 0x00	; 0
    c888:	30 e0       	ldi	r19, 0x00	; 0
    c88a:	40 e8       	ldi	r20, 0x80	; 128
    c88c:	5f e3       	ldi	r21, 0x3F	; 63
    c88e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    c892:	88 23       	and	r24, r24
    c894:	0c f0       	brlt	.+2      	; 0xc898 <pick_drop+0x67a6>
    c896:	10 e0       	ldi	r17, 0x00	; 0
    c898:	11 23       	and	r17, r17
    c89a:	49 f0       	breq	.+18     	; 0xc8ae <pick_drop+0x67bc>
		__ticks = 1;
    c89c:	ce 01       	movw	r24, r28
    c89e:	81 59       	subi	r24, 0x91	; 145
    c8a0:	9c 4f       	sbci	r25, 0xFC	; 252
    c8a2:	21 e0       	ldi	r18, 0x01	; 1
    c8a4:	30 e0       	ldi	r19, 0x00	; 0
    c8a6:	fc 01       	movw	r30, r24
    c8a8:	31 83       	std	Z+1, r19	; 0x01
    c8aa:	20 83       	st	Z, r18
    c8ac:	74 c0       	rjmp	.+232    	; 0xc996 <pick_drop+0x68a4>
	else if (__tmp > 65535)
    c8ae:	ce 01       	movw	r24, r28
    c8b0:	85 59       	subi	r24, 0x95	; 149
    c8b2:	9c 4f       	sbci	r25, 0xFC	; 252
    c8b4:	11 e0       	ldi	r17, 0x01	; 1
    c8b6:	fc 01       	movw	r30, r24
    c8b8:	60 81       	ld	r22, Z
    c8ba:	71 81       	ldd	r23, Z+1	; 0x01
    c8bc:	82 81       	ldd	r24, Z+2	; 0x02
    c8be:	93 81       	ldd	r25, Z+3	; 0x03
    c8c0:	20 e0       	ldi	r18, 0x00	; 0
    c8c2:	3f ef       	ldi	r19, 0xFF	; 255
    c8c4:	4f e7       	ldi	r20, 0x7F	; 127
    c8c6:	57 e4       	ldi	r21, 0x47	; 71
    c8c8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    c8cc:	18 16       	cp	r1, r24
    c8ce:	0c f0       	brlt	.+2      	; 0xc8d2 <pick_drop+0x67e0>
    c8d0:	10 e0       	ldi	r17, 0x00	; 0
    c8d2:	11 23       	and	r17, r17
    c8d4:	09 f4       	brne	.+2      	; 0xc8d8 <pick_drop+0x67e6>
    c8d6:	4d c0       	rjmp	.+154    	; 0xc972 <pick_drop+0x6880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c8d8:	ce 01       	movw	r24, r28
    c8da:	89 59       	subi	r24, 0x99	; 153
    c8dc:	9c 4f       	sbci	r25, 0xFC	; 252
    c8de:	fc 01       	movw	r30, r24
    c8e0:	60 81       	ld	r22, Z
    c8e2:	71 81       	ldd	r23, Z+1	; 0x01
    c8e4:	82 81       	ldd	r24, Z+2	; 0x02
    c8e6:	93 81       	ldd	r25, Z+3	; 0x03
    c8e8:	20 e0       	ldi	r18, 0x00	; 0
    c8ea:	30 e0       	ldi	r19, 0x00	; 0
    c8ec:	40 e2       	ldi	r20, 0x20	; 32
    c8ee:	51 e4       	ldi	r21, 0x41	; 65
    c8f0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    c8f4:	dc 01       	movw	r26, r24
    c8f6:	cb 01       	movw	r24, r22
    c8f8:	8e 01       	movw	r16, r28
    c8fa:	01 59       	subi	r16, 0x91	; 145
    c8fc:	1c 4f       	sbci	r17, 0xFC	; 252
    c8fe:	bc 01       	movw	r22, r24
    c900:	cd 01       	movw	r24, r26
    c902:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c906:	dc 01       	movw	r26, r24
    c908:	cb 01       	movw	r24, r22
    c90a:	f8 01       	movw	r30, r16
    c90c:	91 83       	std	Z+1, r25	; 0x01
    c90e:	80 83       	st	Z, r24
    c910:	27 c0       	rjmp	.+78     	; 0xc960 <pick_drop+0x686e>
    c912:	ce 01       	movw	r24, r28
    c914:	8f 58       	subi	r24, 0x8F	; 143
    c916:	9c 4f       	sbci	r25, 0xFC	; 252
    c918:	20 e7       	ldi	r18, 0x70	; 112
    c91a:	31 e0       	ldi	r19, 0x01	; 1
    c91c:	fc 01       	movw	r30, r24
    c91e:	31 83       	std	Z+1, r19	; 0x01
    c920:	20 83       	st	Z, r18
    c922:	ce 01       	movw	r24, r28
    c924:	8f 58       	subi	r24, 0x8F	; 143
    c926:	9c 4f       	sbci	r25, 0xFC	; 252
    c928:	fc 01       	movw	r30, r24
    c92a:	80 81       	ld	r24, Z
    c92c:	91 81       	ldd	r25, Z+1	; 0x01
    c92e:	8c 01       	movw	r16, r24
    c930:	c8 01       	movw	r24, r16
    c932:	01 97       	sbiw	r24, 0x01	; 1
    c934:	f1 f7       	brne	.-4      	; 0xc932 <pick_drop+0x6840>
    c936:	8c 01       	movw	r16, r24
    c938:	ce 01       	movw	r24, r28
    c93a:	8f 58       	subi	r24, 0x8F	; 143
    c93c:	9c 4f       	sbci	r25, 0xFC	; 252
    c93e:	fc 01       	movw	r30, r24
    c940:	11 83       	std	Z+1, r17	; 0x01
    c942:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c944:	ce 01       	movw	r24, r28
    c946:	81 59       	subi	r24, 0x91	; 145
    c948:	9c 4f       	sbci	r25, 0xFC	; 252
    c94a:	9e 01       	movw	r18, r28
    c94c:	21 59       	subi	r18, 0x91	; 145
    c94e:	3c 4f       	sbci	r19, 0xFC	; 252
    c950:	f9 01       	movw	r30, r18
    c952:	20 81       	ld	r18, Z
    c954:	31 81       	ldd	r19, Z+1	; 0x01
    c956:	21 50       	subi	r18, 0x01	; 1
    c958:	30 40       	sbci	r19, 0x00	; 0
    c95a:	fc 01       	movw	r30, r24
    c95c:	31 83       	std	Z+1, r19	; 0x01
    c95e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c960:	ce 01       	movw	r24, r28
    c962:	81 59       	subi	r24, 0x91	; 145
    c964:	9c 4f       	sbci	r25, 0xFC	; 252
    c966:	fc 01       	movw	r30, r24
    c968:	80 81       	ld	r24, Z
    c96a:	91 81       	ldd	r25, Z+1	; 0x01
    c96c:	00 97       	sbiw	r24, 0x00	; 0
    c96e:	89 f6       	brne	.-94     	; 0xc912 <pick_drop+0x6820>
    c970:	2f c0       	rjmp	.+94     	; 0xc9d0 <pick_drop+0x68de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c972:	8e 01       	movw	r16, r28
    c974:	01 59       	subi	r16, 0x91	; 145
    c976:	1c 4f       	sbci	r17, 0xFC	; 252
    c978:	ce 01       	movw	r24, r28
    c97a:	85 59       	subi	r24, 0x95	; 149
    c97c:	9c 4f       	sbci	r25, 0xFC	; 252
    c97e:	fc 01       	movw	r30, r24
    c980:	60 81       	ld	r22, Z
    c982:	71 81       	ldd	r23, Z+1	; 0x01
    c984:	82 81       	ldd	r24, Z+2	; 0x02
    c986:	93 81       	ldd	r25, Z+3	; 0x03
    c988:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    c98c:	dc 01       	movw	r26, r24
    c98e:	cb 01       	movw	r24, r22
    c990:	f8 01       	movw	r30, r16
    c992:	91 83       	std	Z+1, r25	; 0x01
    c994:	80 83       	st	Z, r24
    c996:	ce 01       	movw	r24, r28
    c998:	8d 58       	subi	r24, 0x8D	; 141
    c99a:	9c 4f       	sbci	r25, 0xFC	; 252
    c99c:	9e 01       	movw	r18, r28
    c99e:	21 59       	subi	r18, 0x91	; 145
    c9a0:	3c 4f       	sbci	r19, 0xFC	; 252
    c9a2:	f9 01       	movw	r30, r18
    c9a4:	20 81       	ld	r18, Z
    c9a6:	31 81       	ldd	r19, Z+1	; 0x01
    c9a8:	fc 01       	movw	r30, r24
    c9aa:	31 83       	std	Z+1, r19	; 0x01
    c9ac:	20 83       	st	Z, r18
    c9ae:	ce 01       	movw	r24, r28
    c9b0:	8d 58       	subi	r24, 0x8D	; 141
    c9b2:	9c 4f       	sbci	r25, 0xFC	; 252
    c9b4:	fc 01       	movw	r30, r24
    c9b6:	80 81       	ld	r24, Z
    c9b8:	91 81       	ldd	r25, Z+1	; 0x01
    c9ba:	8c 01       	movw	r16, r24
    c9bc:	c8 01       	movw	r24, r16
    c9be:	01 97       	sbiw	r24, 0x01	; 1
    c9c0:	f1 f7       	brne	.-4      	; 0xc9be <pick_drop+0x68cc>
    c9c2:	8c 01       	movw	r16, r24
    c9c4:	ce 01       	movw	r24, r28
    c9c6:	8d 58       	subi	r24, 0x8D	; 141
    c9c8:	9c 4f       	sbci	r25, 0xFC	; 252
    c9ca:	fc 01       	movw	r30, r24
    c9cc:	11 83       	std	Z+1, r17	; 0x01
    c9ce:	00 83       	st	Z, r16
			_delay_ms(20);
			back_mm(55);
    c9d0:	87 e3       	ldi	r24, 0x37	; 55
    c9d2:	90 e0       	ldi	r25, 0x00	; 0
    c9d4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    c9d8:	9e 01       	movw	r18, r28
    c9da:	2b 58       	subi	r18, 0x8B	; 139
    c9dc:	3c 4f       	sbci	r19, 0xFC	; 252
    c9de:	80 e0       	ldi	r24, 0x00	; 0
    c9e0:	90 e0       	ldi	r25, 0x00	; 0
    c9e2:	a0 ea       	ldi	r26, 0xA0	; 160
    c9e4:	b1 e4       	ldi	r27, 0x41	; 65
    c9e6:	f9 01       	movw	r30, r18
    c9e8:	80 83       	st	Z, r24
    c9ea:	91 83       	std	Z+1, r25	; 0x01
    c9ec:	a2 83       	std	Z+2, r26	; 0x02
    c9ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    c9f0:	8e 01       	movw	r16, r28
    c9f2:	07 58       	subi	r16, 0x87	; 135
    c9f4:	1c 4f       	sbci	r17, 0xFC	; 252
    c9f6:	ce 01       	movw	r24, r28
    c9f8:	8b 58       	subi	r24, 0x8B	; 139
    c9fa:	9c 4f       	sbci	r25, 0xFC	; 252
    c9fc:	fc 01       	movw	r30, r24
    c9fe:	60 81       	ld	r22, Z
    ca00:	71 81       	ldd	r23, Z+1	; 0x01
    ca02:	82 81       	ldd	r24, Z+2	; 0x02
    ca04:	93 81       	ldd	r25, Z+3	; 0x03
    ca06:	26 e6       	ldi	r18, 0x66	; 102
    ca08:	36 e6       	ldi	r19, 0x66	; 102
    ca0a:	46 e6       	ldi	r20, 0x66	; 102
    ca0c:	55 e4       	ldi	r21, 0x45	; 69
    ca0e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ca12:	dc 01       	movw	r26, r24
    ca14:	cb 01       	movw	r24, r22
    ca16:	f8 01       	movw	r30, r16
    ca18:	80 83       	st	Z, r24
    ca1a:	91 83       	std	Z+1, r25	; 0x01
    ca1c:	a2 83       	std	Z+2, r26	; 0x02
    ca1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ca20:	ce 01       	movw	r24, r28
    ca22:	87 58       	subi	r24, 0x87	; 135
    ca24:	9c 4f       	sbci	r25, 0xFC	; 252
    ca26:	11 e0       	ldi	r17, 0x01	; 1
    ca28:	fc 01       	movw	r30, r24
    ca2a:	60 81       	ld	r22, Z
    ca2c:	71 81       	ldd	r23, Z+1	; 0x01
    ca2e:	82 81       	ldd	r24, Z+2	; 0x02
    ca30:	93 81       	ldd	r25, Z+3	; 0x03
    ca32:	20 e0       	ldi	r18, 0x00	; 0
    ca34:	30 e0       	ldi	r19, 0x00	; 0
    ca36:	40 e8       	ldi	r20, 0x80	; 128
    ca38:	5f e3       	ldi	r21, 0x3F	; 63
    ca3a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    ca3e:	88 23       	and	r24, r24
    ca40:	0c f0       	brlt	.+2      	; 0xca44 <pick_drop+0x6952>
    ca42:	10 e0       	ldi	r17, 0x00	; 0
    ca44:	11 23       	and	r17, r17
    ca46:	49 f0       	breq	.+18     	; 0xca5a <pick_drop+0x6968>
		__ticks = 1;
    ca48:	ce 01       	movw	r24, r28
    ca4a:	83 58       	subi	r24, 0x83	; 131
    ca4c:	9c 4f       	sbci	r25, 0xFC	; 252
    ca4e:	21 e0       	ldi	r18, 0x01	; 1
    ca50:	30 e0       	ldi	r19, 0x00	; 0
    ca52:	fc 01       	movw	r30, r24
    ca54:	31 83       	std	Z+1, r19	; 0x01
    ca56:	20 83       	st	Z, r18
    ca58:	75 c0       	rjmp	.+234    	; 0xcb44 <pick_drop+0x6a52>
	else if (__tmp > 65535)
    ca5a:	ce 01       	movw	r24, r28
    ca5c:	87 58       	subi	r24, 0x87	; 135
    ca5e:	9c 4f       	sbci	r25, 0xFC	; 252
    ca60:	11 e0       	ldi	r17, 0x01	; 1
    ca62:	fc 01       	movw	r30, r24
    ca64:	60 81       	ld	r22, Z
    ca66:	71 81       	ldd	r23, Z+1	; 0x01
    ca68:	82 81       	ldd	r24, Z+2	; 0x02
    ca6a:	93 81       	ldd	r25, Z+3	; 0x03
    ca6c:	20 e0       	ldi	r18, 0x00	; 0
    ca6e:	3f ef       	ldi	r19, 0xFF	; 255
    ca70:	4f e7       	ldi	r20, 0x7F	; 127
    ca72:	57 e4       	ldi	r21, 0x47	; 71
    ca74:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    ca78:	18 16       	cp	r1, r24
    ca7a:	0c f0       	brlt	.+2      	; 0xca7e <pick_drop+0x698c>
    ca7c:	10 e0       	ldi	r17, 0x00	; 0
    ca7e:	11 23       	and	r17, r17
    ca80:	09 f4       	brne	.+2      	; 0xca84 <pick_drop+0x6992>
    ca82:	4e c0       	rjmp	.+156    	; 0xcb20 <pick_drop+0x6a2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ca84:	ce 01       	movw	r24, r28
    ca86:	8b 58       	subi	r24, 0x8B	; 139
    ca88:	9c 4f       	sbci	r25, 0xFC	; 252
    ca8a:	fc 01       	movw	r30, r24
    ca8c:	60 81       	ld	r22, Z
    ca8e:	71 81       	ldd	r23, Z+1	; 0x01
    ca90:	82 81       	ldd	r24, Z+2	; 0x02
    ca92:	93 81       	ldd	r25, Z+3	; 0x03
    ca94:	20 e0       	ldi	r18, 0x00	; 0
    ca96:	30 e0       	ldi	r19, 0x00	; 0
    ca98:	40 e2       	ldi	r20, 0x20	; 32
    ca9a:	51 e4       	ldi	r21, 0x41	; 65
    ca9c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    caa0:	dc 01       	movw	r26, r24
    caa2:	cb 01       	movw	r24, r22
    caa4:	8e 01       	movw	r16, r28
    caa6:	03 58       	subi	r16, 0x83	; 131
    caa8:	1c 4f       	sbci	r17, 0xFC	; 252
    caaa:	bc 01       	movw	r22, r24
    caac:	cd 01       	movw	r24, r26
    caae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    cab2:	dc 01       	movw	r26, r24
    cab4:	cb 01       	movw	r24, r22
    cab6:	f8 01       	movw	r30, r16
    cab8:	91 83       	std	Z+1, r25	; 0x01
    caba:	80 83       	st	Z, r24
    cabc:	27 c0       	rjmp	.+78     	; 0xcb0c <pick_drop+0x6a1a>
    cabe:	ce 01       	movw	r24, r28
    cac0:	81 58       	subi	r24, 0x81	; 129
    cac2:	9c 4f       	sbci	r25, 0xFC	; 252
    cac4:	20 e7       	ldi	r18, 0x70	; 112
    cac6:	31 e0       	ldi	r19, 0x01	; 1
    cac8:	fc 01       	movw	r30, r24
    caca:	31 83       	std	Z+1, r19	; 0x01
    cacc:	20 83       	st	Z, r18
    cace:	ce 01       	movw	r24, r28
    cad0:	81 58       	subi	r24, 0x81	; 129
    cad2:	9c 4f       	sbci	r25, 0xFC	; 252
    cad4:	fc 01       	movw	r30, r24
    cad6:	80 81       	ld	r24, Z
    cad8:	91 81       	ldd	r25, Z+1	; 0x01
    cada:	8c 01       	movw	r16, r24
    cadc:	c8 01       	movw	r24, r16
    cade:	01 97       	sbiw	r24, 0x01	; 1
    cae0:	f1 f7       	brne	.-4      	; 0xcade <pick_drop+0x69ec>
    cae2:	8c 01       	movw	r16, r24
    cae4:	ce 01       	movw	r24, r28
    cae6:	81 58       	subi	r24, 0x81	; 129
    cae8:	9c 4f       	sbci	r25, 0xFC	; 252
    caea:	fc 01       	movw	r30, r24
    caec:	11 83       	std	Z+1, r17	; 0x01
    caee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    caf0:	ce 01       	movw	r24, r28
    caf2:	83 58       	subi	r24, 0x83	; 131
    caf4:	9c 4f       	sbci	r25, 0xFC	; 252
    caf6:	9e 01       	movw	r18, r28
    caf8:	23 58       	subi	r18, 0x83	; 131
    cafa:	3c 4f       	sbci	r19, 0xFC	; 252
    cafc:	f9 01       	movw	r30, r18
    cafe:	20 81       	ld	r18, Z
    cb00:	31 81       	ldd	r19, Z+1	; 0x01
    cb02:	21 50       	subi	r18, 0x01	; 1
    cb04:	30 40       	sbci	r19, 0x00	; 0
    cb06:	fc 01       	movw	r30, r24
    cb08:	31 83       	std	Z+1, r19	; 0x01
    cb0a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cb0c:	ce 01       	movw	r24, r28
    cb0e:	83 58       	subi	r24, 0x83	; 131
    cb10:	9c 4f       	sbci	r25, 0xFC	; 252
    cb12:	fc 01       	movw	r30, r24
    cb14:	80 81       	ld	r24, Z
    cb16:	91 81       	ldd	r25, Z+1	; 0x01
    cb18:	00 97       	sbiw	r24, 0x00	; 0
    cb1a:	89 f6       	brne	.-94     	; 0xcabe <pick_drop+0x69cc>
    cb1c:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cb20:	8e 01       	movw	r16, r28
    cb22:	03 58       	subi	r16, 0x83	; 131
    cb24:	1c 4f       	sbci	r17, 0xFC	; 252
    cb26:	ce 01       	movw	r24, r28
    cb28:	87 58       	subi	r24, 0x87	; 135
    cb2a:	9c 4f       	sbci	r25, 0xFC	; 252
    cb2c:	fc 01       	movw	r30, r24
    cb2e:	60 81       	ld	r22, Z
    cb30:	71 81       	ldd	r23, Z+1	; 0x01
    cb32:	82 81       	ldd	r24, Z+2	; 0x02
    cb34:	93 81       	ldd	r25, Z+3	; 0x03
    cb36:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    cb3a:	dc 01       	movw	r26, r24
    cb3c:	cb 01       	movw	r24, r22
    cb3e:	f8 01       	movw	r30, r16
    cb40:	91 83       	std	Z+1, r25	; 0x01
    cb42:	80 83       	st	Z, r24
    cb44:	ce 01       	movw	r24, r28
    cb46:	8f 57       	subi	r24, 0x7F	; 127
    cb48:	9c 4f       	sbci	r25, 0xFC	; 252
    cb4a:	9e 01       	movw	r18, r28
    cb4c:	23 58       	subi	r18, 0x83	; 131
    cb4e:	3c 4f       	sbci	r19, 0xFC	; 252
    cb50:	f9 01       	movw	r30, r18
    cb52:	20 81       	ld	r18, Z
    cb54:	31 81       	ldd	r19, Z+1	; 0x01
    cb56:	fc 01       	movw	r30, r24
    cb58:	31 83       	std	Z+1, r19	; 0x01
    cb5a:	20 83       	st	Z, r18
    cb5c:	ce 01       	movw	r24, r28
    cb5e:	8f 57       	subi	r24, 0x7F	; 127
    cb60:	9c 4f       	sbci	r25, 0xFC	; 252
    cb62:	fc 01       	movw	r30, r24
    cb64:	80 81       	ld	r24, Z
    cb66:	91 81       	ldd	r25, Z+1	; 0x01
    cb68:	8c 01       	movw	r16, r24
    cb6a:	c8 01       	movw	r24, r16
    cb6c:	01 97       	sbiw	r24, 0x01	; 1
    cb6e:	f1 f7       	brne	.-4      	; 0xcb6c <pick_drop+0x6a7a>
    cb70:	8c 01       	movw	r16, r24
    cb72:	ce 01       	movw	r24, r28
    cb74:	8f 57       	subi	r24, 0x7F	; 127
    cb76:	9c 4f       	sbci	r25, 0xFC	; 252
    cb78:	fc 01       	movw	r30, r24
    cb7a:	11 83       	std	Z+1, r17	; 0x01
    cb7c:	00 83       	st	Z, r16
    cb7e:	0c 94 73 6d 	jmp	0xdae6	; 0xdae6 <pick_drop+0x79f4>
			_delay_ms(20);
		}       
	}
		else if(pd=='7'){//6X6 F6
    cb82:	ce 01       	movw	r24, r28
    cb84:	8f 5f       	subi	r24, 0xFF	; 255
    cb86:	9b 4f       	sbci	r25, 0xFB	; 251
    cb88:	fc 01       	movw	r30, r24
    cb8a:	80 81       	ld	r24, Z
    cb8c:	87 33       	cpi	r24, 0x37	; 55
    cb8e:	09 f0       	breq	.+2      	; 0xcb92 <pick_drop+0x6aa0>
    cb90:	f4 c5       	rjmp	.+3048   	; 0xd77a <pick_drop+0x7688>
				if(master_path[node-1]=='L'||master_path[node-1]=='R'){
    cb92:	80 91 4f 03 	lds	r24, 0x034F
    cb96:	90 91 50 03 	lds	r25, 0x0350
    cb9a:	01 97       	sbiw	r24, 0x01	; 1
    cb9c:	8d 5a       	subi	r24, 0xAD	; 173
    cb9e:	9c 4f       	sbci	r25, 0xFC	; 252
    cba0:	fc 01       	movw	r30, r24
    cba2:	80 81       	ld	r24, Z
    cba4:	8c 34       	cpi	r24, 0x4C	; 76
    cba6:	61 f0       	breq	.+24     	; 0xcbc0 <pick_drop+0x6ace>
    cba8:	80 91 4f 03 	lds	r24, 0x034F
    cbac:	90 91 50 03 	lds	r25, 0x0350
    cbb0:	01 97       	sbiw	r24, 0x01	; 1
    cbb2:	8d 5a       	subi	r24, 0xAD	; 173
    cbb4:	9c 4f       	sbci	r25, 0xFC	; 252
    cbb6:	fc 01       	movw	r30, r24
    cbb8:	80 81       	ld	r24, Z
    cbba:	82 35       	cpi	r24, 0x52	; 82
    cbbc:	09 f0       	breq	.+2      	; 0xcbc0 <pick_drop+0x6ace>
    cbbe:	aa c1       	rjmp	.+852    	; 0xcf14 <pick_drop+0x6e22>
					stop();
    cbc0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    cbc4:	9e 01       	movw	r18, r28
    cbc6:	2d 57       	subi	r18, 0x7D	; 125
    cbc8:	3c 4f       	sbci	r19, 0xFC	; 252
    cbca:	80 e0       	ldi	r24, 0x00	; 0
    cbcc:	90 e0       	ldi	r25, 0x00	; 0
    cbce:	a0 ea       	ldi	r26, 0xA0	; 160
    cbd0:	b1 e4       	ldi	r27, 0x41	; 65
    cbd2:	f9 01       	movw	r30, r18
    cbd4:	80 83       	st	Z, r24
    cbd6:	91 83       	std	Z+1, r25	; 0x01
    cbd8:	a2 83       	std	Z+2, r26	; 0x02
    cbda:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cbdc:	8e 01       	movw	r16, r28
    cbde:	09 57       	subi	r16, 0x79	; 121
    cbe0:	1c 4f       	sbci	r17, 0xFC	; 252
    cbe2:	ce 01       	movw	r24, r28
    cbe4:	8d 57       	subi	r24, 0x7D	; 125
    cbe6:	9c 4f       	sbci	r25, 0xFC	; 252
    cbe8:	fc 01       	movw	r30, r24
    cbea:	60 81       	ld	r22, Z
    cbec:	71 81       	ldd	r23, Z+1	; 0x01
    cbee:	82 81       	ldd	r24, Z+2	; 0x02
    cbf0:	93 81       	ldd	r25, Z+3	; 0x03
    cbf2:	26 e6       	ldi	r18, 0x66	; 102
    cbf4:	36 e6       	ldi	r19, 0x66	; 102
    cbf6:	46 e6       	ldi	r20, 0x66	; 102
    cbf8:	55 e4       	ldi	r21, 0x45	; 69
    cbfa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    cbfe:	dc 01       	movw	r26, r24
    cc00:	cb 01       	movw	r24, r22
    cc02:	f8 01       	movw	r30, r16
    cc04:	80 83       	st	Z, r24
    cc06:	91 83       	std	Z+1, r25	; 0x01
    cc08:	a2 83       	std	Z+2, r26	; 0x02
    cc0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cc0c:	ce 01       	movw	r24, r28
    cc0e:	89 57       	subi	r24, 0x79	; 121
    cc10:	9c 4f       	sbci	r25, 0xFC	; 252
    cc12:	11 e0       	ldi	r17, 0x01	; 1
    cc14:	fc 01       	movw	r30, r24
    cc16:	60 81       	ld	r22, Z
    cc18:	71 81       	ldd	r23, Z+1	; 0x01
    cc1a:	82 81       	ldd	r24, Z+2	; 0x02
    cc1c:	93 81       	ldd	r25, Z+3	; 0x03
    cc1e:	20 e0       	ldi	r18, 0x00	; 0
    cc20:	30 e0       	ldi	r19, 0x00	; 0
    cc22:	40 e8       	ldi	r20, 0x80	; 128
    cc24:	5f e3       	ldi	r21, 0x3F	; 63
    cc26:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    cc2a:	88 23       	and	r24, r24
    cc2c:	0c f0       	brlt	.+2      	; 0xcc30 <pick_drop+0x6b3e>
    cc2e:	10 e0       	ldi	r17, 0x00	; 0
    cc30:	11 23       	and	r17, r17
    cc32:	49 f0       	breq	.+18     	; 0xcc46 <pick_drop+0x6b54>
		__ticks = 1;
    cc34:	ce 01       	movw	r24, r28
    cc36:	85 57       	subi	r24, 0x75	; 117
    cc38:	9c 4f       	sbci	r25, 0xFC	; 252
    cc3a:	21 e0       	ldi	r18, 0x01	; 1
    cc3c:	30 e0       	ldi	r19, 0x00	; 0
    cc3e:	fc 01       	movw	r30, r24
    cc40:	31 83       	std	Z+1, r19	; 0x01
    cc42:	20 83       	st	Z, r18
    cc44:	74 c0       	rjmp	.+232    	; 0xcd2e <pick_drop+0x6c3c>
	else if (__tmp > 65535)
    cc46:	ce 01       	movw	r24, r28
    cc48:	89 57       	subi	r24, 0x79	; 121
    cc4a:	9c 4f       	sbci	r25, 0xFC	; 252
    cc4c:	11 e0       	ldi	r17, 0x01	; 1
    cc4e:	fc 01       	movw	r30, r24
    cc50:	60 81       	ld	r22, Z
    cc52:	71 81       	ldd	r23, Z+1	; 0x01
    cc54:	82 81       	ldd	r24, Z+2	; 0x02
    cc56:	93 81       	ldd	r25, Z+3	; 0x03
    cc58:	20 e0       	ldi	r18, 0x00	; 0
    cc5a:	3f ef       	ldi	r19, 0xFF	; 255
    cc5c:	4f e7       	ldi	r20, 0x7F	; 127
    cc5e:	57 e4       	ldi	r21, 0x47	; 71
    cc60:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    cc64:	18 16       	cp	r1, r24
    cc66:	0c f0       	brlt	.+2      	; 0xcc6a <pick_drop+0x6b78>
    cc68:	10 e0       	ldi	r17, 0x00	; 0
    cc6a:	11 23       	and	r17, r17
    cc6c:	09 f4       	brne	.+2      	; 0xcc70 <pick_drop+0x6b7e>
    cc6e:	4d c0       	rjmp	.+154    	; 0xcd0a <pick_drop+0x6c18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cc70:	ce 01       	movw	r24, r28
    cc72:	8d 57       	subi	r24, 0x7D	; 125
    cc74:	9c 4f       	sbci	r25, 0xFC	; 252
    cc76:	fc 01       	movw	r30, r24
    cc78:	60 81       	ld	r22, Z
    cc7a:	71 81       	ldd	r23, Z+1	; 0x01
    cc7c:	82 81       	ldd	r24, Z+2	; 0x02
    cc7e:	93 81       	ldd	r25, Z+3	; 0x03
    cc80:	20 e0       	ldi	r18, 0x00	; 0
    cc82:	30 e0       	ldi	r19, 0x00	; 0
    cc84:	40 e2       	ldi	r20, 0x20	; 32
    cc86:	51 e4       	ldi	r21, 0x41	; 65
    cc88:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    cc8c:	dc 01       	movw	r26, r24
    cc8e:	cb 01       	movw	r24, r22
    cc90:	8e 01       	movw	r16, r28
    cc92:	05 57       	subi	r16, 0x75	; 117
    cc94:	1c 4f       	sbci	r17, 0xFC	; 252
    cc96:	bc 01       	movw	r22, r24
    cc98:	cd 01       	movw	r24, r26
    cc9a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    cc9e:	dc 01       	movw	r26, r24
    cca0:	cb 01       	movw	r24, r22
    cca2:	f8 01       	movw	r30, r16
    cca4:	91 83       	std	Z+1, r25	; 0x01
    cca6:	80 83       	st	Z, r24
    cca8:	27 c0       	rjmp	.+78     	; 0xccf8 <pick_drop+0x6c06>
    ccaa:	ce 01       	movw	r24, r28
    ccac:	83 57       	subi	r24, 0x73	; 115
    ccae:	9c 4f       	sbci	r25, 0xFC	; 252
    ccb0:	20 e7       	ldi	r18, 0x70	; 112
    ccb2:	31 e0       	ldi	r19, 0x01	; 1
    ccb4:	fc 01       	movw	r30, r24
    ccb6:	31 83       	std	Z+1, r19	; 0x01
    ccb8:	20 83       	st	Z, r18
    ccba:	ce 01       	movw	r24, r28
    ccbc:	83 57       	subi	r24, 0x73	; 115
    ccbe:	9c 4f       	sbci	r25, 0xFC	; 252
    ccc0:	fc 01       	movw	r30, r24
    ccc2:	80 81       	ld	r24, Z
    ccc4:	91 81       	ldd	r25, Z+1	; 0x01
    ccc6:	8c 01       	movw	r16, r24
    ccc8:	c8 01       	movw	r24, r16
    ccca:	01 97       	sbiw	r24, 0x01	; 1
    cccc:	f1 f7       	brne	.-4      	; 0xccca <pick_drop+0x6bd8>
    ccce:	8c 01       	movw	r16, r24
    ccd0:	ce 01       	movw	r24, r28
    ccd2:	83 57       	subi	r24, 0x73	; 115
    ccd4:	9c 4f       	sbci	r25, 0xFC	; 252
    ccd6:	fc 01       	movw	r30, r24
    ccd8:	11 83       	std	Z+1, r17	; 0x01
    ccda:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ccdc:	ce 01       	movw	r24, r28
    ccde:	85 57       	subi	r24, 0x75	; 117
    cce0:	9c 4f       	sbci	r25, 0xFC	; 252
    cce2:	9e 01       	movw	r18, r28
    cce4:	25 57       	subi	r18, 0x75	; 117
    cce6:	3c 4f       	sbci	r19, 0xFC	; 252
    cce8:	f9 01       	movw	r30, r18
    ccea:	20 81       	ld	r18, Z
    ccec:	31 81       	ldd	r19, Z+1	; 0x01
    ccee:	21 50       	subi	r18, 0x01	; 1
    ccf0:	30 40       	sbci	r19, 0x00	; 0
    ccf2:	fc 01       	movw	r30, r24
    ccf4:	31 83       	std	Z+1, r19	; 0x01
    ccf6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ccf8:	ce 01       	movw	r24, r28
    ccfa:	85 57       	subi	r24, 0x75	; 117
    ccfc:	9c 4f       	sbci	r25, 0xFC	; 252
    ccfe:	fc 01       	movw	r30, r24
    cd00:	80 81       	ld	r24, Z
    cd02:	91 81       	ldd	r25, Z+1	; 0x01
    cd04:	00 97       	sbiw	r24, 0x00	; 0
    cd06:	89 f6       	brne	.-94     	; 0xccaa <pick_drop+0x6bb8>
    cd08:	2f c0       	rjmp	.+94     	; 0xcd68 <pick_drop+0x6c76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    cd0a:	8e 01       	movw	r16, r28
    cd0c:	05 57       	subi	r16, 0x75	; 117
    cd0e:	1c 4f       	sbci	r17, 0xFC	; 252
    cd10:	ce 01       	movw	r24, r28
    cd12:	89 57       	subi	r24, 0x79	; 121
    cd14:	9c 4f       	sbci	r25, 0xFC	; 252
    cd16:	fc 01       	movw	r30, r24
    cd18:	60 81       	ld	r22, Z
    cd1a:	71 81       	ldd	r23, Z+1	; 0x01
    cd1c:	82 81       	ldd	r24, Z+2	; 0x02
    cd1e:	93 81       	ldd	r25, Z+3	; 0x03
    cd20:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    cd24:	dc 01       	movw	r26, r24
    cd26:	cb 01       	movw	r24, r22
    cd28:	f8 01       	movw	r30, r16
    cd2a:	91 83       	std	Z+1, r25	; 0x01
    cd2c:	80 83       	st	Z, r24
    cd2e:	ce 01       	movw	r24, r28
    cd30:	81 57       	subi	r24, 0x71	; 113
    cd32:	9c 4f       	sbci	r25, 0xFC	; 252
    cd34:	9e 01       	movw	r18, r28
    cd36:	25 57       	subi	r18, 0x75	; 117
    cd38:	3c 4f       	sbci	r19, 0xFC	; 252
    cd3a:	f9 01       	movw	r30, r18
    cd3c:	20 81       	ld	r18, Z
    cd3e:	31 81       	ldd	r19, Z+1	; 0x01
    cd40:	fc 01       	movw	r30, r24
    cd42:	31 83       	std	Z+1, r19	; 0x01
    cd44:	20 83       	st	Z, r18
    cd46:	ce 01       	movw	r24, r28
    cd48:	81 57       	subi	r24, 0x71	; 113
    cd4a:	9c 4f       	sbci	r25, 0xFC	; 252
    cd4c:	fc 01       	movw	r30, r24
    cd4e:	80 81       	ld	r24, Z
    cd50:	91 81       	ldd	r25, Z+1	; 0x01
    cd52:	8c 01       	movw	r16, r24
    cd54:	c8 01       	movw	r24, r16
    cd56:	01 97       	sbiw	r24, 0x01	; 1
    cd58:	f1 f7       	brne	.-4      	; 0xcd56 <pick_drop+0x6c64>
    cd5a:	8c 01       	movw	r16, r24
    cd5c:	ce 01       	movw	r24, r28
    cd5e:	81 57       	subi	r24, 0x71	; 113
    cd60:	9c 4f       	sbci	r25, 0xFC	; 252
    cd62:	fc 01       	movw	r30, r24
    cd64:	11 83       	std	Z+1, r17	; 0x01
    cd66:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    cd68:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    cd6c:	9e 01       	movw	r18, r28
    cd6e:	2f 56       	subi	r18, 0x6F	; 111
    cd70:	3c 4f       	sbci	r19, 0xFC	; 252
    cd72:	80 e0       	ldi	r24, 0x00	; 0
    cd74:	90 e0       	ldi	r25, 0x00	; 0
    cd76:	a8 ec       	ldi	r26, 0xC8	; 200
    cd78:	b2 e4       	ldi	r27, 0x42	; 66
    cd7a:	f9 01       	movw	r30, r18
    cd7c:	80 83       	st	Z, r24
    cd7e:	91 83       	std	Z+1, r25	; 0x01
    cd80:	a2 83       	std	Z+2, r26	; 0x02
    cd82:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cd84:	8e 01       	movw	r16, r28
    cd86:	0b 56       	subi	r16, 0x6B	; 107
    cd88:	1c 4f       	sbci	r17, 0xFC	; 252
    cd8a:	ce 01       	movw	r24, r28
    cd8c:	8f 56       	subi	r24, 0x6F	; 111
    cd8e:	9c 4f       	sbci	r25, 0xFC	; 252
    cd90:	fc 01       	movw	r30, r24
    cd92:	60 81       	ld	r22, Z
    cd94:	71 81       	ldd	r23, Z+1	; 0x01
    cd96:	82 81       	ldd	r24, Z+2	; 0x02
    cd98:	93 81       	ldd	r25, Z+3	; 0x03
    cd9a:	26 e6       	ldi	r18, 0x66	; 102
    cd9c:	36 e6       	ldi	r19, 0x66	; 102
    cd9e:	46 e6       	ldi	r20, 0x66	; 102
    cda0:	55 e4       	ldi	r21, 0x45	; 69
    cda2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    cda6:	dc 01       	movw	r26, r24
    cda8:	cb 01       	movw	r24, r22
    cdaa:	f8 01       	movw	r30, r16
    cdac:	80 83       	st	Z, r24
    cdae:	91 83       	std	Z+1, r25	; 0x01
    cdb0:	a2 83       	std	Z+2, r26	; 0x02
    cdb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cdb4:	ce 01       	movw	r24, r28
    cdb6:	8b 56       	subi	r24, 0x6B	; 107
    cdb8:	9c 4f       	sbci	r25, 0xFC	; 252
    cdba:	11 e0       	ldi	r17, 0x01	; 1
    cdbc:	fc 01       	movw	r30, r24
    cdbe:	60 81       	ld	r22, Z
    cdc0:	71 81       	ldd	r23, Z+1	; 0x01
    cdc2:	82 81       	ldd	r24, Z+2	; 0x02
    cdc4:	93 81       	ldd	r25, Z+3	; 0x03
    cdc6:	20 e0       	ldi	r18, 0x00	; 0
    cdc8:	30 e0       	ldi	r19, 0x00	; 0
    cdca:	40 e8       	ldi	r20, 0x80	; 128
    cdcc:	5f e3       	ldi	r21, 0x3F	; 63
    cdce:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    cdd2:	88 23       	and	r24, r24
    cdd4:	0c f0       	brlt	.+2      	; 0xcdd8 <pick_drop+0x6ce6>
    cdd6:	10 e0       	ldi	r17, 0x00	; 0
    cdd8:	11 23       	and	r17, r17
    cdda:	49 f0       	breq	.+18     	; 0xcdee <pick_drop+0x6cfc>
		__ticks = 1;
    cddc:	ce 01       	movw	r24, r28
    cdde:	87 56       	subi	r24, 0x67	; 103
    cde0:	9c 4f       	sbci	r25, 0xFC	; 252
    cde2:	21 e0       	ldi	r18, 0x01	; 1
    cde4:	30 e0       	ldi	r19, 0x00	; 0
    cde6:	fc 01       	movw	r30, r24
    cde8:	31 83       	std	Z+1, r19	; 0x01
    cdea:	20 83       	st	Z, r18
    cdec:	74 c0       	rjmp	.+232    	; 0xced6 <pick_drop+0x6de4>
	else if (__tmp > 65535)
    cdee:	ce 01       	movw	r24, r28
    cdf0:	8b 56       	subi	r24, 0x6B	; 107
    cdf2:	9c 4f       	sbci	r25, 0xFC	; 252
    cdf4:	11 e0       	ldi	r17, 0x01	; 1
    cdf6:	fc 01       	movw	r30, r24
    cdf8:	60 81       	ld	r22, Z
    cdfa:	71 81       	ldd	r23, Z+1	; 0x01
    cdfc:	82 81       	ldd	r24, Z+2	; 0x02
    cdfe:	93 81       	ldd	r25, Z+3	; 0x03
    ce00:	20 e0       	ldi	r18, 0x00	; 0
    ce02:	3f ef       	ldi	r19, 0xFF	; 255
    ce04:	4f e7       	ldi	r20, 0x7F	; 127
    ce06:	57 e4       	ldi	r21, 0x47	; 71
    ce08:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    ce0c:	18 16       	cp	r1, r24
    ce0e:	0c f0       	brlt	.+2      	; 0xce12 <pick_drop+0x6d20>
    ce10:	10 e0       	ldi	r17, 0x00	; 0
    ce12:	11 23       	and	r17, r17
    ce14:	09 f4       	brne	.+2      	; 0xce18 <pick_drop+0x6d26>
    ce16:	4d c0       	rjmp	.+154    	; 0xceb2 <pick_drop+0x6dc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ce18:	ce 01       	movw	r24, r28
    ce1a:	8f 56       	subi	r24, 0x6F	; 111
    ce1c:	9c 4f       	sbci	r25, 0xFC	; 252
    ce1e:	fc 01       	movw	r30, r24
    ce20:	60 81       	ld	r22, Z
    ce22:	71 81       	ldd	r23, Z+1	; 0x01
    ce24:	82 81       	ldd	r24, Z+2	; 0x02
    ce26:	93 81       	ldd	r25, Z+3	; 0x03
    ce28:	20 e0       	ldi	r18, 0x00	; 0
    ce2a:	30 e0       	ldi	r19, 0x00	; 0
    ce2c:	40 e2       	ldi	r20, 0x20	; 32
    ce2e:	51 e4       	ldi	r21, 0x41	; 65
    ce30:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ce34:	dc 01       	movw	r26, r24
    ce36:	cb 01       	movw	r24, r22
    ce38:	8e 01       	movw	r16, r28
    ce3a:	07 56       	subi	r16, 0x67	; 103
    ce3c:	1c 4f       	sbci	r17, 0xFC	; 252
    ce3e:	bc 01       	movw	r22, r24
    ce40:	cd 01       	movw	r24, r26
    ce42:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ce46:	dc 01       	movw	r26, r24
    ce48:	cb 01       	movw	r24, r22
    ce4a:	f8 01       	movw	r30, r16
    ce4c:	91 83       	std	Z+1, r25	; 0x01
    ce4e:	80 83       	st	Z, r24
    ce50:	27 c0       	rjmp	.+78     	; 0xcea0 <pick_drop+0x6dae>
    ce52:	ce 01       	movw	r24, r28
    ce54:	85 56       	subi	r24, 0x65	; 101
    ce56:	9c 4f       	sbci	r25, 0xFC	; 252
    ce58:	20 e7       	ldi	r18, 0x70	; 112
    ce5a:	31 e0       	ldi	r19, 0x01	; 1
    ce5c:	fc 01       	movw	r30, r24
    ce5e:	31 83       	std	Z+1, r19	; 0x01
    ce60:	20 83       	st	Z, r18
    ce62:	ce 01       	movw	r24, r28
    ce64:	85 56       	subi	r24, 0x65	; 101
    ce66:	9c 4f       	sbci	r25, 0xFC	; 252
    ce68:	fc 01       	movw	r30, r24
    ce6a:	80 81       	ld	r24, Z
    ce6c:	91 81       	ldd	r25, Z+1	; 0x01
    ce6e:	8c 01       	movw	r16, r24
    ce70:	c8 01       	movw	r24, r16
    ce72:	01 97       	sbiw	r24, 0x01	; 1
    ce74:	f1 f7       	brne	.-4      	; 0xce72 <pick_drop+0x6d80>
    ce76:	8c 01       	movw	r16, r24
    ce78:	ce 01       	movw	r24, r28
    ce7a:	85 56       	subi	r24, 0x65	; 101
    ce7c:	9c 4f       	sbci	r25, 0xFC	; 252
    ce7e:	fc 01       	movw	r30, r24
    ce80:	11 83       	std	Z+1, r17	; 0x01
    ce82:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ce84:	ce 01       	movw	r24, r28
    ce86:	87 56       	subi	r24, 0x67	; 103
    ce88:	9c 4f       	sbci	r25, 0xFC	; 252
    ce8a:	9e 01       	movw	r18, r28
    ce8c:	27 56       	subi	r18, 0x67	; 103
    ce8e:	3c 4f       	sbci	r19, 0xFC	; 252
    ce90:	f9 01       	movw	r30, r18
    ce92:	20 81       	ld	r18, Z
    ce94:	31 81       	ldd	r19, Z+1	; 0x01
    ce96:	21 50       	subi	r18, 0x01	; 1
    ce98:	30 40       	sbci	r19, 0x00	; 0
    ce9a:	fc 01       	movw	r30, r24
    ce9c:	31 83       	std	Z+1, r19	; 0x01
    ce9e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    cea0:	ce 01       	movw	r24, r28
    cea2:	87 56       	subi	r24, 0x67	; 103
    cea4:	9c 4f       	sbci	r25, 0xFC	; 252
    cea6:	fc 01       	movw	r30, r24
    cea8:	80 81       	ld	r24, Z
    ceaa:	91 81       	ldd	r25, Z+1	; 0x01
    ceac:	00 97       	sbiw	r24, 0x00	; 0
    ceae:	89 f6       	brne	.-94     	; 0xce52 <pick_drop+0x6d60>
    ceb0:	30 c0       	rjmp	.+96     	; 0xcf12 <pick_drop+0x6e20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ceb2:	8e 01       	movw	r16, r28
    ceb4:	07 56       	subi	r16, 0x67	; 103
    ceb6:	1c 4f       	sbci	r17, 0xFC	; 252
    ceb8:	ce 01       	movw	r24, r28
    ceba:	8b 56       	subi	r24, 0x6B	; 107
    cebc:	9c 4f       	sbci	r25, 0xFC	; 252
    cebe:	fc 01       	movw	r30, r24
    cec0:	60 81       	ld	r22, Z
    cec2:	71 81       	ldd	r23, Z+1	; 0x01
    cec4:	82 81       	ldd	r24, Z+2	; 0x02
    cec6:	93 81       	ldd	r25, Z+3	; 0x03
    cec8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    cecc:	dc 01       	movw	r26, r24
    cece:	cb 01       	movw	r24, r22
    ced0:	f8 01       	movw	r30, r16
    ced2:	91 83       	std	Z+1, r25	; 0x01
    ced4:	80 83       	st	Z, r24
    ced6:	ce 01       	movw	r24, r28
    ced8:	83 56       	subi	r24, 0x63	; 99
    ceda:	9c 4f       	sbci	r25, 0xFC	; 252
    cedc:	9e 01       	movw	r18, r28
    cede:	27 56       	subi	r18, 0x67	; 103
    cee0:	3c 4f       	sbci	r19, 0xFC	; 252
    cee2:	f9 01       	movw	r30, r18
    cee4:	20 81       	ld	r18, Z
    cee6:	31 81       	ldd	r19, Z+1	; 0x01
    cee8:	fc 01       	movw	r30, r24
    ceea:	31 83       	std	Z+1, r19	; 0x01
    ceec:	20 83       	st	Z, r18
    ceee:	ce 01       	movw	r24, r28
    cef0:	83 56       	subi	r24, 0x63	; 99
    cef2:	9c 4f       	sbci	r25, 0xFC	; 252
    cef4:	fc 01       	movw	r30, r24
    cef6:	80 81       	ld	r24, Z
    cef8:	91 81       	ldd	r25, Z+1	; 0x01
    cefa:	8c 01       	movw	r16, r24
    cefc:	c8 01       	movw	r24, r16
    cefe:	01 97       	sbiw	r24, 0x01	; 1
    cf00:	f1 f7       	brne	.-4      	; 0xcefe <pick_drop+0x6e0c>
    cf02:	8c 01       	movw	r16, r24
    cf04:	ce 01       	movw	r24, r28
    cf06:	83 56       	subi	r24, 0x63	; 99
    cf08:	9c 4f       	sbci	r25, 0xFC	; 252
    cf0a:	fc 01       	movw	r30, r24
    cf0c:	11 83       	std	Z+1, r17	; 0x01
    cf0e:	00 83       	st	Z, r16
					_delay_ms(100);
    cf10:	ea c5       	rjmp	.+3028   	; 0xdae6 <pick_drop+0x79f4>
    cf12:	e9 c5       	rjmp	.+3026   	; 0xdae6 <pick_drop+0x79f4>
				}
				else{
					forward_mm(35);
    cf14:	83 e2       	ldi	r24, 0x23	; 35
    cf16:	90 e0       	ldi	r25, 0x00	; 0
    cf18:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    cf1c:	9e 01       	movw	r18, r28
    cf1e:	21 56       	subi	r18, 0x61	; 97
    cf20:	3c 4f       	sbci	r19, 0xFC	; 252
    cf22:	80 e0       	ldi	r24, 0x00	; 0
    cf24:	90 e0       	ldi	r25, 0x00	; 0
    cf26:	a0 ea       	ldi	r26, 0xA0	; 160
    cf28:	b1 e4       	ldi	r27, 0x41	; 65
    cf2a:	f9 01       	movw	r30, r18
    cf2c:	80 83       	st	Z, r24
    cf2e:	91 83       	std	Z+1, r25	; 0x01
    cf30:	a2 83       	std	Z+2, r26	; 0x02
    cf32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    cf34:	8e 01       	movw	r16, r28
    cf36:	0d 55       	subi	r16, 0x5D	; 93
    cf38:	1c 4f       	sbci	r17, 0xFC	; 252
    cf3a:	ce 01       	movw	r24, r28
    cf3c:	81 56       	subi	r24, 0x61	; 97
    cf3e:	9c 4f       	sbci	r25, 0xFC	; 252
    cf40:	fc 01       	movw	r30, r24
    cf42:	60 81       	ld	r22, Z
    cf44:	71 81       	ldd	r23, Z+1	; 0x01
    cf46:	82 81       	ldd	r24, Z+2	; 0x02
    cf48:	93 81       	ldd	r25, Z+3	; 0x03
    cf4a:	26 e6       	ldi	r18, 0x66	; 102
    cf4c:	36 e6       	ldi	r19, 0x66	; 102
    cf4e:	46 e6       	ldi	r20, 0x66	; 102
    cf50:	55 e4       	ldi	r21, 0x45	; 69
    cf52:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    cf56:	dc 01       	movw	r26, r24
    cf58:	cb 01       	movw	r24, r22
    cf5a:	f8 01       	movw	r30, r16
    cf5c:	80 83       	st	Z, r24
    cf5e:	91 83       	std	Z+1, r25	; 0x01
    cf60:	a2 83       	std	Z+2, r26	; 0x02
    cf62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    cf64:	ce 01       	movw	r24, r28
    cf66:	8d 55       	subi	r24, 0x5D	; 93
    cf68:	9c 4f       	sbci	r25, 0xFC	; 252
    cf6a:	11 e0       	ldi	r17, 0x01	; 1
    cf6c:	fc 01       	movw	r30, r24
    cf6e:	60 81       	ld	r22, Z
    cf70:	71 81       	ldd	r23, Z+1	; 0x01
    cf72:	82 81       	ldd	r24, Z+2	; 0x02
    cf74:	93 81       	ldd	r25, Z+3	; 0x03
    cf76:	20 e0       	ldi	r18, 0x00	; 0
    cf78:	30 e0       	ldi	r19, 0x00	; 0
    cf7a:	40 e8       	ldi	r20, 0x80	; 128
    cf7c:	5f e3       	ldi	r21, 0x3F	; 63
    cf7e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    cf82:	88 23       	and	r24, r24
    cf84:	0c f0       	brlt	.+2      	; 0xcf88 <pick_drop+0x6e96>
    cf86:	10 e0       	ldi	r17, 0x00	; 0
    cf88:	11 23       	and	r17, r17
    cf8a:	49 f0       	breq	.+18     	; 0xcf9e <pick_drop+0x6eac>
		__ticks = 1;
    cf8c:	ce 01       	movw	r24, r28
    cf8e:	89 55       	subi	r24, 0x59	; 89
    cf90:	9c 4f       	sbci	r25, 0xFC	; 252
    cf92:	21 e0       	ldi	r18, 0x01	; 1
    cf94:	30 e0       	ldi	r19, 0x00	; 0
    cf96:	fc 01       	movw	r30, r24
    cf98:	31 83       	std	Z+1, r19	; 0x01
    cf9a:	20 83       	st	Z, r18
    cf9c:	74 c0       	rjmp	.+232    	; 0xd086 <pick_drop+0x6f94>
	else if (__tmp > 65535)
    cf9e:	ce 01       	movw	r24, r28
    cfa0:	8d 55       	subi	r24, 0x5D	; 93
    cfa2:	9c 4f       	sbci	r25, 0xFC	; 252
    cfa4:	11 e0       	ldi	r17, 0x01	; 1
    cfa6:	fc 01       	movw	r30, r24
    cfa8:	60 81       	ld	r22, Z
    cfaa:	71 81       	ldd	r23, Z+1	; 0x01
    cfac:	82 81       	ldd	r24, Z+2	; 0x02
    cfae:	93 81       	ldd	r25, Z+3	; 0x03
    cfb0:	20 e0       	ldi	r18, 0x00	; 0
    cfb2:	3f ef       	ldi	r19, 0xFF	; 255
    cfb4:	4f e7       	ldi	r20, 0x7F	; 127
    cfb6:	57 e4       	ldi	r21, 0x47	; 71
    cfb8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    cfbc:	18 16       	cp	r1, r24
    cfbe:	0c f0       	brlt	.+2      	; 0xcfc2 <pick_drop+0x6ed0>
    cfc0:	10 e0       	ldi	r17, 0x00	; 0
    cfc2:	11 23       	and	r17, r17
    cfc4:	09 f4       	brne	.+2      	; 0xcfc8 <pick_drop+0x6ed6>
    cfc6:	4d c0       	rjmp	.+154    	; 0xd062 <pick_drop+0x6f70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    cfc8:	ce 01       	movw	r24, r28
    cfca:	81 56       	subi	r24, 0x61	; 97
    cfcc:	9c 4f       	sbci	r25, 0xFC	; 252
    cfce:	fc 01       	movw	r30, r24
    cfd0:	60 81       	ld	r22, Z
    cfd2:	71 81       	ldd	r23, Z+1	; 0x01
    cfd4:	82 81       	ldd	r24, Z+2	; 0x02
    cfd6:	93 81       	ldd	r25, Z+3	; 0x03
    cfd8:	20 e0       	ldi	r18, 0x00	; 0
    cfda:	30 e0       	ldi	r19, 0x00	; 0
    cfdc:	40 e2       	ldi	r20, 0x20	; 32
    cfde:	51 e4       	ldi	r21, 0x41	; 65
    cfe0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    cfe4:	dc 01       	movw	r26, r24
    cfe6:	cb 01       	movw	r24, r22
    cfe8:	8e 01       	movw	r16, r28
    cfea:	09 55       	subi	r16, 0x59	; 89
    cfec:	1c 4f       	sbci	r17, 0xFC	; 252
    cfee:	bc 01       	movw	r22, r24
    cff0:	cd 01       	movw	r24, r26
    cff2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    cff6:	dc 01       	movw	r26, r24
    cff8:	cb 01       	movw	r24, r22
    cffa:	f8 01       	movw	r30, r16
    cffc:	91 83       	std	Z+1, r25	; 0x01
    cffe:	80 83       	st	Z, r24
    d000:	27 c0       	rjmp	.+78     	; 0xd050 <pick_drop+0x6f5e>
    d002:	ce 01       	movw	r24, r28
    d004:	87 55       	subi	r24, 0x57	; 87
    d006:	9c 4f       	sbci	r25, 0xFC	; 252
    d008:	20 e7       	ldi	r18, 0x70	; 112
    d00a:	31 e0       	ldi	r19, 0x01	; 1
    d00c:	fc 01       	movw	r30, r24
    d00e:	31 83       	std	Z+1, r19	; 0x01
    d010:	20 83       	st	Z, r18
    d012:	ce 01       	movw	r24, r28
    d014:	87 55       	subi	r24, 0x57	; 87
    d016:	9c 4f       	sbci	r25, 0xFC	; 252
    d018:	fc 01       	movw	r30, r24
    d01a:	80 81       	ld	r24, Z
    d01c:	91 81       	ldd	r25, Z+1	; 0x01
    d01e:	8c 01       	movw	r16, r24
    d020:	c8 01       	movw	r24, r16
    d022:	01 97       	sbiw	r24, 0x01	; 1
    d024:	f1 f7       	brne	.-4      	; 0xd022 <pick_drop+0x6f30>
    d026:	8c 01       	movw	r16, r24
    d028:	ce 01       	movw	r24, r28
    d02a:	87 55       	subi	r24, 0x57	; 87
    d02c:	9c 4f       	sbci	r25, 0xFC	; 252
    d02e:	fc 01       	movw	r30, r24
    d030:	11 83       	std	Z+1, r17	; 0x01
    d032:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d034:	ce 01       	movw	r24, r28
    d036:	89 55       	subi	r24, 0x59	; 89
    d038:	9c 4f       	sbci	r25, 0xFC	; 252
    d03a:	9e 01       	movw	r18, r28
    d03c:	29 55       	subi	r18, 0x59	; 89
    d03e:	3c 4f       	sbci	r19, 0xFC	; 252
    d040:	f9 01       	movw	r30, r18
    d042:	20 81       	ld	r18, Z
    d044:	31 81       	ldd	r19, Z+1	; 0x01
    d046:	21 50       	subi	r18, 0x01	; 1
    d048:	30 40       	sbci	r19, 0x00	; 0
    d04a:	fc 01       	movw	r30, r24
    d04c:	31 83       	std	Z+1, r19	; 0x01
    d04e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d050:	ce 01       	movw	r24, r28
    d052:	89 55       	subi	r24, 0x59	; 89
    d054:	9c 4f       	sbci	r25, 0xFC	; 252
    d056:	fc 01       	movw	r30, r24
    d058:	80 81       	ld	r24, Z
    d05a:	91 81       	ldd	r25, Z+1	; 0x01
    d05c:	00 97       	sbiw	r24, 0x00	; 0
    d05e:	89 f6       	brne	.-94     	; 0xd002 <pick_drop+0x6f10>
    d060:	2f c0       	rjmp	.+94     	; 0xd0c0 <pick_drop+0x6fce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d062:	8e 01       	movw	r16, r28
    d064:	09 55       	subi	r16, 0x59	; 89
    d066:	1c 4f       	sbci	r17, 0xFC	; 252
    d068:	ce 01       	movw	r24, r28
    d06a:	8d 55       	subi	r24, 0x5D	; 93
    d06c:	9c 4f       	sbci	r25, 0xFC	; 252
    d06e:	fc 01       	movw	r30, r24
    d070:	60 81       	ld	r22, Z
    d072:	71 81       	ldd	r23, Z+1	; 0x01
    d074:	82 81       	ldd	r24, Z+2	; 0x02
    d076:	93 81       	ldd	r25, Z+3	; 0x03
    d078:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d07c:	dc 01       	movw	r26, r24
    d07e:	cb 01       	movw	r24, r22
    d080:	f8 01       	movw	r30, r16
    d082:	91 83       	std	Z+1, r25	; 0x01
    d084:	80 83       	st	Z, r24
    d086:	ce 01       	movw	r24, r28
    d088:	85 55       	subi	r24, 0x55	; 85
    d08a:	9c 4f       	sbci	r25, 0xFC	; 252
    d08c:	9e 01       	movw	r18, r28
    d08e:	29 55       	subi	r18, 0x59	; 89
    d090:	3c 4f       	sbci	r19, 0xFC	; 252
    d092:	f9 01       	movw	r30, r18
    d094:	20 81       	ld	r18, Z
    d096:	31 81       	ldd	r19, Z+1	; 0x01
    d098:	fc 01       	movw	r30, r24
    d09a:	31 83       	std	Z+1, r19	; 0x01
    d09c:	20 83       	st	Z, r18
    d09e:	ce 01       	movw	r24, r28
    d0a0:	85 55       	subi	r24, 0x55	; 85
    d0a2:	9c 4f       	sbci	r25, 0xFC	; 252
    d0a4:	fc 01       	movw	r30, r24
    d0a6:	80 81       	ld	r24, Z
    d0a8:	91 81       	ldd	r25, Z+1	; 0x01
    d0aa:	8c 01       	movw	r16, r24
    d0ac:	c8 01       	movw	r24, r16
    d0ae:	01 97       	sbiw	r24, 0x01	; 1
    d0b0:	f1 f7       	brne	.-4      	; 0xd0ae <pick_drop+0x6fbc>
    d0b2:	8c 01       	movw	r16, r24
    d0b4:	ce 01       	movw	r24, r28
    d0b6:	85 55       	subi	r24, 0x55	; 85
    d0b8:	9c 4f       	sbci	r25, 0xFC	; 252
    d0ba:	fc 01       	movw	r30, r24
    d0bc:	11 83       	std	Z+1, r17	; 0x01
    d0be:	00 83       	st	Z, r16
					_delay_ms(20);
					spl_right();
    d0c0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <spl_right>
					forward_mm(20);
    d0c4:	84 e1       	ldi	r24, 0x14	; 20
    d0c6:	90 e0       	ldi	r25, 0x00	; 0
    d0c8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d0cc:	9e 01       	movw	r18, r28
    d0ce:	23 55       	subi	r18, 0x53	; 83
    d0d0:	3c 4f       	sbci	r19, 0xFC	; 252
    d0d2:	80 e0       	ldi	r24, 0x00	; 0
    d0d4:	90 e0       	ldi	r25, 0x00	; 0
    d0d6:	a0 ea       	ldi	r26, 0xA0	; 160
    d0d8:	b1 e4       	ldi	r27, 0x41	; 65
    d0da:	f9 01       	movw	r30, r18
    d0dc:	80 83       	st	Z, r24
    d0de:	91 83       	std	Z+1, r25	; 0x01
    d0e0:	a2 83       	std	Z+2, r26	; 0x02
    d0e2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d0e4:	8e 01       	movw	r16, r28
    d0e6:	0f 54       	subi	r16, 0x4F	; 79
    d0e8:	1c 4f       	sbci	r17, 0xFC	; 252
    d0ea:	ce 01       	movw	r24, r28
    d0ec:	83 55       	subi	r24, 0x53	; 83
    d0ee:	9c 4f       	sbci	r25, 0xFC	; 252
    d0f0:	fc 01       	movw	r30, r24
    d0f2:	60 81       	ld	r22, Z
    d0f4:	71 81       	ldd	r23, Z+1	; 0x01
    d0f6:	82 81       	ldd	r24, Z+2	; 0x02
    d0f8:	93 81       	ldd	r25, Z+3	; 0x03
    d0fa:	26 e6       	ldi	r18, 0x66	; 102
    d0fc:	36 e6       	ldi	r19, 0x66	; 102
    d0fe:	46 e6       	ldi	r20, 0x66	; 102
    d100:	55 e4       	ldi	r21, 0x45	; 69
    d102:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d106:	dc 01       	movw	r26, r24
    d108:	cb 01       	movw	r24, r22
    d10a:	f8 01       	movw	r30, r16
    d10c:	80 83       	st	Z, r24
    d10e:	91 83       	std	Z+1, r25	; 0x01
    d110:	a2 83       	std	Z+2, r26	; 0x02
    d112:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d114:	ce 01       	movw	r24, r28
    d116:	8f 54       	subi	r24, 0x4F	; 79
    d118:	9c 4f       	sbci	r25, 0xFC	; 252
    d11a:	11 e0       	ldi	r17, 0x01	; 1
    d11c:	fc 01       	movw	r30, r24
    d11e:	60 81       	ld	r22, Z
    d120:	71 81       	ldd	r23, Z+1	; 0x01
    d122:	82 81       	ldd	r24, Z+2	; 0x02
    d124:	93 81       	ldd	r25, Z+3	; 0x03
    d126:	20 e0       	ldi	r18, 0x00	; 0
    d128:	30 e0       	ldi	r19, 0x00	; 0
    d12a:	40 e8       	ldi	r20, 0x80	; 128
    d12c:	5f e3       	ldi	r21, 0x3F	; 63
    d12e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    d132:	88 23       	and	r24, r24
    d134:	0c f0       	brlt	.+2      	; 0xd138 <pick_drop+0x7046>
    d136:	10 e0       	ldi	r17, 0x00	; 0
    d138:	11 23       	and	r17, r17
    d13a:	49 f0       	breq	.+18     	; 0xd14e <pick_drop+0x705c>
		__ticks = 1;
    d13c:	ce 01       	movw	r24, r28
    d13e:	8b 54       	subi	r24, 0x4B	; 75
    d140:	9c 4f       	sbci	r25, 0xFC	; 252
    d142:	21 e0       	ldi	r18, 0x01	; 1
    d144:	30 e0       	ldi	r19, 0x00	; 0
    d146:	fc 01       	movw	r30, r24
    d148:	31 83       	std	Z+1, r19	; 0x01
    d14a:	20 83       	st	Z, r18
    d14c:	74 c0       	rjmp	.+232    	; 0xd236 <pick_drop+0x7144>
	else if (__tmp > 65535)
    d14e:	ce 01       	movw	r24, r28
    d150:	8f 54       	subi	r24, 0x4F	; 79
    d152:	9c 4f       	sbci	r25, 0xFC	; 252
    d154:	11 e0       	ldi	r17, 0x01	; 1
    d156:	fc 01       	movw	r30, r24
    d158:	60 81       	ld	r22, Z
    d15a:	71 81       	ldd	r23, Z+1	; 0x01
    d15c:	82 81       	ldd	r24, Z+2	; 0x02
    d15e:	93 81       	ldd	r25, Z+3	; 0x03
    d160:	20 e0       	ldi	r18, 0x00	; 0
    d162:	3f ef       	ldi	r19, 0xFF	; 255
    d164:	4f e7       	ldi	r20, 0x7F	; 127
    d166:	57 e4       	ldi	r21, 0x47	; 71
    d168:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    d16c:	18 16       	cp	r1, r24
    d16e:	0c f0       	brlt	.+2      	; 0xd172 <pick_drop+0x7080>
    d170:	10 e0       	ldi	r17, 0x00	; 0
    d172:	11 23       	and	r17, r17
    d174:	09 f4       	brne	.+2      	; 0xd178 <pick_drop+0x7086>
    d176:	4d c0       	rjmp	.+154    	; 0xd212 <pick_drop+0x7120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d178:	ce 01       	movw	r24, r28
    d17a:	83 55       	subi	r24, 0x53	; 83
    d17c:	9c 4f       	sbci	r25, 0xFC	; 252
    d17e:	fc 01       	movw	r30, r24
    d180:	60 81       	ld	r22, Z
    d182:	71 81       	ldd	r23, Z+1	; 0x01
    d184:	82 81       	ldd	r24, Z+2	; 0x02
    d186:	93 81       	ldd	r25, Z+3	; 0x03
    d188:	20 e0       	ldi	r18, 0x00	; 0
    d18a:	30 e0       	ldi	r19, 0x00	; 0
    d18c:	40 e2       	ldi	r20, 0x20	; 32
    d18e:	51 e4       	ldi	r21, 0x41	; 65
    d190:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d194:	dc 01       	movw	r26, r24
    d196:	cb 01       	movw	r24, r22
    d198:	8e 01       	movw	r16, r28
    d19a:	0b 54       	subi	r16, 0x4B	; 75
    d19c:	1c 4f       	sbci	r17, 0xFC	; 252
    d19e:	bc 01       	movw	r22, r24
    d1a0:	cd 01       	movw	r24, r26
    d1a2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d1a6:	dc 01       	movw	r26, r24
    d1a8:	cb 01       	movw	r24, r22
    d1aa:	f8 01       	movw	r30, r16
    d1ac:	91 83       	std	Z+1, r25	; 0x01
    d1ae:	80 83       	st	Z, r24
    d1b0:	27 c0       	rjmp	.+78     	; 0xd200 <pick_drop+0x710e>
    d1b2:	ce 01       	movw	r24, r28
    d1b4:	89 54       	subi	r24, 0x49	; 73
    d1b6:	9c 4f       	sbci	r25, 0xFC	; 252
    d1b8:	20 e7       	ldi	r18, 0x70	; 112
    d1ba:	31 e0       	ldi	r19, 0x01	; 1
    d1bc:	fc 01       	movw	r30, r24
    d1be:	31 83       	std	Z+1, r19	; 0x01
    d1c0:	20 83       	st	Z, r18
    d1c2:	ce 01       	movw	r24, r28
    d1c4:	89 54       	subi	r24, 0x49	; 73
    d1c6:	9c 4f       	sbci	r25, 0xFC	; 252
    d1c8:	fc 01       	movw	r30, r24
    d1ca:	80 81       	ld	r24, Z
    d1cc:	91 81       	ldd	r25, Z+1	; 0x01
    d1ce:	8c 01       	movw	r16, r24
    d1d0:	c8 01       	movw	r24, r16
    d1d2:	01 97       	sbiw	r24, 0x01	; 1
    d1d4:	f1 f7       	brne	.-4      	; 0xd1d2 <pick_drop+0x70e0>
    d1d6:	8c 01       	movw	r16, r24
    d1d8:	ce 01       	movw	r24, r28
    d1da:	89 54       	subi	r24, 0x49	; 73
    d1dc:	9c 4f       	sbci	r25, 0xFC	; 252
    d1de:	fc 01       	movw	r30, r24
    d1e0:	11 83       	std	Z+1, r17	; 0x01
    d1e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d1e4:	ce 01       	movw	r24, r28
    d1e6:	8b 54       	subi	r24, 0x4B	; 75
    d1e8:	9c 4f       	sbci	r25, 0xFC	; 252
    d1ea:	9e 01       	movw	r18, r28
    d1ec:	2b 54       	subi	r18, 0x4B	; 75
    d1ee:	3c 4f       	sbci	r19, 0xFC	; 252
    d1f0:	f9 01       	movw	r30, r18
    d1f2:	20 81       	ld	r18, Z
    d1f4:	31 81       	ldd	r19, Z+1	; 0x01
    d1f6:	21 50       	subi	r18, 0x01	; 1
    d1f8:	30 40       	sbci	r19, 0x00	; 0
    d1fa:	fc 01       	movw	r30, r24
    d1fc:	31 83       	std	Z+1, r19	; 0x01
    d1fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d200:	ce 01       	movw	r24, r28
    d202:	8b 54       	subi	r24, 0x4B	; 75
    d204:	9c 4f       	sbci	r25, 0xFC	; 252
    d206:	fc 01       	movw	r30, r24
    d208:	80 81       	ld	r24, Z
    d20a:	91 81       	ldd	r25, Z+1	; 0x01
    d20c:	00 97       	sbiw	r24, 0x00	; 0
    d20e:	89 f6       	brne	.-94     	; 0xd1b2 <pick_drop+0x70c0>
    d210:	2f c0       	rjmp	.+94     	; 0xd270 <pick_drop+0x717e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d212:	8e 01       	movw	r16, r28
    d214:	0b 54       	subi	r16, 0x4B	; 75
    d216:	1c 4f       	sbci	r17, 0xFC	; 252
    d218:	ce 01       	movw	r24, r28
    d21a:	8f 54       	subi	r24, 0x4F	; 79
    d21c:	9c 4f       	sbci	r25, 0xFC	; 252
    d21e:	fc 01       	movw	r30, r24
    d220:	60 81       	ld	r22, Z
    d222:	71 81       	ldd	r23, Z+1	; 0x01
    d224:	82 81       	ldd	r24, Z+2	; 0x02
    d226:	93 81       	ldd	r25, Z+3	; 0x03
    d228:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d22c:	dc 01       	movw	r26, r24
    d22e:	cb 01       	movw	r24, r22
    d230:	f8 01       	movw	r30, r16
    d232:	91 83       	std	Z+1, r25	; 0x01
    d234:	80 83       	st	Z, r24
    d236:	ce 01       	movw	r24, r28
    d238:	87 54       	subi	r24, 0x47	; 71
    d23a:	9c 4f       	sbci	r25, 0xFC	; 252
    d23c:	9e 01       	movw	r18, r28
    d23e:	2b 54       	subi	r18, 0x4B	; 75
    d240:	3c 4f       	sbci	r19, 0xFC	; 252
    d242:	f9 01       	movw	r30, r18
    d244:	20 81       	ld	r18, Z
    d246:	31 81       	ldd	r19, Z+1	; 0x01
    d248:	fc 01       	movw	r30, r24
    d24a:	31 83       	std	Z+1, r19	; 0x01
    d24c:	20 83       	st	Z, r18
    d24e:	ce 01       	movw	r24, r28
    d250:	87 54       	subi	r24, 0x47	; 71
    d252:	9c 4f       	sbci	r25, 0xFC	; 252
    d254:	fc 01       	movw	r30, r24
    d256:	80 81       	ld	r24, Z
    d258:	91 81       	ldd	r25, Z+1	; 0x01
    d25a:	8c 01       	movw	r16, r24
    d25c:	c8 01       	movw	r24, r16
    d25e:	01 97       	sbiw	r24, 0x01	; 1
    d260:	f1 f7       	brne	.-4      	; 0xd25e <pick_drop+0x716c>
    d262:	8c 01       	movw	r16, r24
    d264:	ce 01       	movw	r24, r28
    d266:	87 54       	subi	r24, 0x47	; 71
    d268:	9c 4f       	sbci	r25, 0xFC	; 252
    d26a:	fc 01       	movw	r30, r24
    d26c:	11 83       	std	Z+1, r17	; 0x01
    d26e:	00 83       	st	Z, r16
					_delay_ms(20);
					front();
    d270:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    d274:	9e 01       	movw	r18, r28
    d276:	25 54       	subi	r18, 0x45	; 69
    d278:	3c 4f       	sbci	r19, 0xFC	; 252
    d27a:	80 e0       	ldi	r24, 0x00	; 0
    d27c:	90 e0       	ldi	r25, 0x00	; 0
    d27e:	a0 ea       	ldi	r26, 0xA0	; 160
    d280:	b1 e4       	ldi	r27, 0x41	; 65
    d282:	f9 01       	movw	r30, r18
    d284:	80 83       	st	Z, r24
    d286:	91 83       	std	Z+1, r25	; 0x01
    d288:	a2 83       	std	Z+2, r26	; 0x02
    d28a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d28c:	8e 01       	movw	r16, r28
    d28e:	01 54       	subi	r16, 0x41	; 65
    d290:	1c 4f       	sbci	r17, 0xFC	; 252
    d292:	ce 01       	movw	r24, r28
    d294:	85 54       	subi	r24, 0x45	; 69
    d296:	9c 4f       	sbci	r25, 0xFC	; 252
    d298:	fc 01       	movw	r30, r24
    d29a:	60 81       	ld	r22, Z
    d29c:	71 81       	ldd	r23, Z+1	; 0x01
    d29e:	82 81       	ldd	r24, Z+2	; 0x02
    d2a0:	93 81       	ldd	r25, Z+3	; 0x03
    d2a2:	26 e6       	ldi	r18, 0x66	; 102
    d2a4:	36 e6       	ldi	r19, 0x66	; 102
    d2a6:	46 e6       	ldi	r20, 0x66	; 102
    d2a8:	55 e4       	ldi	r21, 0x45	; 69
    d2aa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d2ae:	dc 01       	movw	r26, r24
    d2b0:	cb 01       	movw	r24, r22
    d2b2:	f8 01       	movw	r30, r16
    d2b4:	80 83       	st	Z, r24
    d2b6:	91 83       	std	Z+1, r25	; 0x01
    d2b8:	a2 83       	std	Z+2, r26	; 0x02
    d2ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d2bc:	ce 01       	movw	r24, r28
    d2be:	81 54       	subi	r24, 0x41	; 65
    d2c0:	9c 4f       	sbci	r25, 0xFC	; 252
    d2c2:	11 e0       	ldi	r17, 0x01	; 1
    d2c4:	fc 01       	movw	r30, r24
    d2c6:	60 81       	ld	r22, Z
    d2c8:	71 81       	ldd	r23, Z+1	; 0x01
    d2ca:	82 81       	ldd	r24, Z+2	; 0x02
    d2cc:	93 81       	ldd	r25, Z+3	; 0x03
    d2ce:	20 e0       	ldi	r18, 0x00	; 0
    d2d0:	30 e0       	ldi	r19, 0x00	; 0
    d2d2:	40 e8       	ldi	r20, 0x80	; 128
    d2d4:	5f e3       	ldi	r21, 0x3F	; 63
    d2d6:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    d2da:	88 23       	and	r24, r24
    d2dc:	0c f0       	brlt	.+2      	; 0xd2e0 <pick_drop+0x71ee>
    d2de:	10 e0       	ldi	r17, 0x00	; 0
    d2e0:	11 23       	and	r17, r17
    d2e2:	49 f0       	breq	.+18     	; 0xd2f6 <pick_drop+0x7204>
		__ticks = 1;
    d2e4:	ce 01       	movw	r24, r28
    d2e6:	8d 53       	subi	r24, 0x3D	; 61
    d2e8:	9c 4f       	sbci	r25, 0xFC	; 252
    d2ea:	21 e0       	ldi	r18, 0x01	; 1
    d2ec:	30 e0       	ldi	r19, 0x00	; 0
    d2ee:	fc 01       	movw	r30, r24
    d2f0:	31 83       	std	Z+1, r19	; 0x01
    d2f2:	20 83       	st	Z, r18
    d2f4:	74 c0       	rjmp	.+232    	; 0xd3de <pick_drop+0x72ec>
	else if (__tmp > 65535)
    d2f6:	ce 01       	movw	r24, r28
    d2f8:	81 54       	subi	r24, 0x41	; 65
    d2fa:	9c 4f       	sbci	r25, 0xFC	; 252
    d2fc:	11 e0       	ldi	r17, 0x01	; 1
    d2fe:	fc 01       	movw	r30, r24
    d300:	60 81       	ld	r22, Z
    d302:	71 81       	ldd	r23, Z+1	; 0x01
    d304:	82 81       	ldd	r24, Z+2	; 0x02
    d306:	93 81       	ldd	r25, Z+3	; 0x03
    d308:	20 e0       	ldi	r18, 0x00	; 0
    d30a:	3f ef       	ldi	r19, 0xFF	; 255
    d30c:	4f e7       	ldi	r20, 0x7F	; 127
    d30e:	57 e4       	ldi	r21, 0x47	; 71
    d310:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    d314:	18 16       	cp	r1, r24
    d316:	0c f0       	brlt	.+2      	; 0xd31a <pick_drop+0x7228>
    d318:	10 e0       	ldi	r17, 0x00	; 0
    d31a:	11 23       	and	r17, r17
    d31c:	09 f4       	brne	.+2      	; 0xd320 <pick_drop+0x722e>
    d31e:	4d c0       	rjmp	.+154    	; 0xd3ba <pick_drop+0x72c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d320:	ce 01       	movw	r24, r28
    d322:	85 54       	subi	r24, 0x45	; 69
    d324:	9c 4f       	sbci	r25, 0xFC	; 252
    d326:	fc 01       	movw	r30, r24
    d328:	60 81       	ld	r22, Z
    d32a:	71 81       	ldd	r23, Z+1	; 0x01
    d32c:	82 81       	ldd	r24, Z+2	; 0x02
    d32e:	93 81       	ldd	r25, Z+3	; 0x03
    d330:	20 e0       	ldi	r18, 0x00	; 0
    d332:	30 e0       	ldi	r19, 0x00	; 0
    d334:	40 e2       	ldi	r20, 0x20	; 32
    d336:	51 e4       	ldi	r21, 0x41	; 65
    d338:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d33c:	dc 01       	movw	r26, r24
    d33e:	cb 01       	movw	r24, r22
    d340:	8e 01       	movw	r16, r28
    d342:	0d 53       	subi	r16, 0x3D	; 61
    d344:	1c 4f       	sbci	r17, 0xFC	; 252
    d346:	bc 01       	movw	r22, r24
    d348:	cd 01       	movw	r24, r26
    d34a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d34e:	dc 01       	movw	r26, r24
    d350:	cb 01       	movw	r24, r22
    d352:	f8 01       	movw	r30, r16
    d354:	91 83       	std	Z+1, r25	; 0x01
    d356:	80 83       	st	Z, r24
    d358:	27 c0       	rjmp	.+78     	; 0xd3a8 <pick_drop+0x72b6>
    d35a:	ce 01       	movw	r24, r28
    d35c:	8b 53       	subi	r24, 0x3B	; 59
    d35e:	9c 4f       	sbci	r25, 0xFC	; 252
    d360:	20 e7       	ldi	r18, 0x70	; 112
    d362:	31 e0       	ldi	r19, 0x01	; 1
    d364:	fc 01       	movw	r30, r24
    d366:	31 83       	std	Z+1, r19	; 0x01
    d368:	20 83       	st	Z, r18
    d36a:	ce 01       	movw	r24, r28
    d36c:	8b 53       	subi	r24, 0x3B	; 59
    d36e:	9c 4f       	sbci	r25, 0xFC	; 252
    d370:	fc 01       	movw	r30, r24
    d372:	80 81       	ld	r24, Z
    d374:	91 81       	ldd	r25, Z+1	; 0x01
    d376:	8c 01       	movw	r16, r24
    d378:	c8 01       	movw	r24, r16
    d37a:	01 97       	sbiw	r24, 0x01	; 1
    d37c:	f1 f7       	brne	.-4      	; 0xd37a <pick_drop+0x7288>
    d37e:	8c 01       	movw	r16, r24
    d380:	ce 01       	movw	r24, r28
    d382:	8b 53       	subi	r24, 0x3B	; 59
    d384:	9c 4f       	sbci	r25, 0xFC	; 252
    d386:	fc 01       	movw	r30, r24
    d388:	11 83       	std	Z+1, r17	; 0x01
    d38a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d38c:	ce 01       	movw	r24, r28
    d38e:	8d 53       	subi	r24, 0x3D	; 61
    d390:	9c 4f       	sbci	r25, 0xFC	; 252
    d392:	9e 01       	movw	r18, r28
    d394:	2d 53       	subi	r18, 0x3D	; 61
    d396:	3c 4f       	sbci	r19, 0xFC	; 252
    d398:	f9 01       	movw	r30, r18
    d39a:	20 81       	ld	r18, Z
    d39c:	31 81       	ldd	r19, Z+1	; 0x01
    d39e:	21 50       	subi	r18, 0x01	; 1
    d3a0:	30 40       	sbci	r19, 0x00	; 0
    d3a2:	fc 01       	movw	r30, r24
    d3a4:	31 83       	std	Z+1, r19	; 0x01
    d3a6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d3a8:	ce 01       	movw	r24, r28
    d3aa:	8d 53       	subi	r24, 0x3D	; 61
    d3ac:	9c 4f       	sbci	r25, 0xFC	; 252
    d3ae:	fc 01       	movw	r30, r24
    d3b0:	80 81       	ld	r24, Z
    d3b2:	91 81       	ldd	r25, Z+1	; 0x01
    d3b4:	00 97       	sbiw	r24, 0x00	; 0
    d3b6:	89 f6       	brne	.-94     	; 0xd35a <pick_drop+0x7268>
    d3b8:	2f c0       	rjmp	.+94     	; 0xd418 <pick_drop+0x7326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d3ba:	8e 01       	movw	r16, r28
    d3bc:	0d 53       	subi	r16, 0x3D	; 61
    d3be:	1c 4f       	sbci	r17, 0xFC	; 252
    d3c0:	ce 01       	movw	r24, r28
    d3c2:	81 54       	subi	r24, 0x41	; 65
    d3c4:	9c 4f       	sbci	r25, 0xFC	; 252
    d3c6:	fc 01       	movw	r30, r24
    d3c8:	60 81       	ld	r22, Z
    d3ca:	71 81       	ldd	r23, Z+1	; 0x01
    d3cc:	82 81       	ldd	r24, Z+2	; 0x02
    d3ce:	93 81       	ldd	r25, Z+3	; 0x03
    d3d0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d3d4:	dc 01       	movw	r26, r24
    d3d6:	cb 01       	movw	r24, r22
    d3d8:	f8 01       	movw	r30, r16
    d3da:	91 83       	std	Z+1, r25	; 0x01
    d3dc:	80 83       	st	Z, r24
    d3de:	ce 01       	movw	r24, r28
    d3e0:	89 53       	subi	r24, 0x39	; 57
    d3e2:	9c 4f       	sbci	r25, 0xFC	; 252
    d3e4:	9e 01       	movw	r18, r28
    d3e6:	2d 53       	subi	r18, 0x3D	; 61
    d3e8:	3c 4f       	sbci	r19, 0xFC	; 252
    d3ea:	f9 01       	movw	r30, r18
    d3ec:	20 81       	ld	r18, Z
    d3ee:	31 81       	ldd	r19, Z+1	; 0x01
    d3f0:	fc 01       	movw	r30, r24
    d3f2:	31 83       	std	Z+1, r19	; 0x01
    d3f4:	20 83       	st	Z, r18
    d3f6:	ce 01       	movw	r24, r28
    d3f8:	89 53       	subi	r24, 0x39	; 57
    d3fa:	9c 4f       	sbci	r25, 0xFC	; 252
    d3fc:	fc 01       	movw	r30, r24
    d3fe:	80 81       	ld	r24, Z
    d400:	91 81       	ldd	r25, Z+1	; 0x01
    d402:	8c 01       	movw	r16, r24
    d404:	c8 01       	movw	r24, r16
    d406:	01 97       	sbiw	r24, 0x01	; 1
    d408:	f1 f7       	brne	.-4      	; 0xd406 <pick_drop+0x7314>
    d40a:	8c 01       	movw	r16, r24
    d40c:	ce 01       	movw	r24, r28
    d40e:	89 53       	subi	r24, 0x39	; 57
    d410:	9c 4f       	sbci	r25, 0xFC	; 252
    d412:	fc 01       	movw	r30, r24
    d414:	11 83       	std	Z+1, r17	; 0x01
    d416:	00 83       	st	Z, r16
					_delay_ms(20);
					back_mm(20);
    d418:	84 e1       	ldi	r24, 0x14	; 20
    d41a:	90 e0       	ldi	r25, 0x00	; 0
    d41c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
					left_degrees(50);
    d420:	82 e3       	ldi	r24, 0x32	; 50
    d422:	90 e0       	ldi	r25, 0x00	; 0
    d424:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <left_degrees>
    d428:	9e 01       	movw	r18, r28
    d42a:	27 53       	subi	r18, 0x37	; 55
    d42c:	3c 4f       	sbci	r19, 0xFC	; 252
    d42e:	80 e0       	ldi	r24, 0x00	; 0
    d430:	90 e0       	ldi	r25, 0x00	; 0
    d432:	a0 ea       	ldi	r26, 0xA0	; 160
    d434:	b1 e4       	ldi	r27, 0x41	; 65
    d436:	f9 01       	movw	r30, r18
    d438:	80 83       	st	Z, r24
    d43a:	91 83       	std	Z+1, r25	; 0x01
    d43c:	a2 83       	std	Z+2, r26	; 0x02
    d43e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d440:	8e 01       	movw	r16, r28
    d442:	03 53       	subi	r16, 0x33	; 51
    d444:	1c 4f       	sbci	r17, 0xFC	; 252
    d446:	ce 01       	movw	r24, r28
    d448:	87 53       	subi	r24, 0x37	; 55
    d44a:	9c 4f       	sbci	r25, 0xFC	; 252
    d44c:	fc 01       	movw	r30, r24
    d44e:	60 81       	ld	r22, Z
    d450:	71 81       	ldd	r23, Z+1	; 0x01
    d452:	82 81       	ldd	r24, Z+2	; 0x02
    d454:	93 81       	ldd	r25, Z+3	; 0x03
    d456:	26 e6       	ldi	r18, 0x66	; 102
    d458:	36 e6       	ldi	r19, 0x66	; 102
    d45a:	46 e6       	ldi	r20, 0x66	; 102
    d45c:	55 e4       	ldi	r21, 0x45	; 69
    d45e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d462:	dc 01       	movw	r26, r24
    d464:	cb 01       	movw	r24, r22
    d466:	f8 01       	movw	r30, r16
    d468:	80 83       	st	Z, r24
    d46a:	91 83       	std	Z+1, r25	; 0x01
    d46c:	a2 83       	std	Z+2, r26	; 0x02
    d46e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d470:	ce 01       	movw	r24, r28
    d472:	83 53       	subi	r24, 0x33	; 51
    d474:	9c 4f       	sbci	r25, 0xFC	; 252
    d476:	11 e0       	ldi	r17, 0x01	; 1
    d478:	fc 01       	movw	r30, r24
    d47a:	60 81       	ld	r22, Z
    d47c:	71 81       	ldd	r23, Z+1	; 0x01
    d47e:	82 81       	ldd	r24, Z+2	; 0x02
    d480:	93 81       	ldd	r25, Z+3	; 0x03
    d482:	20 e0       	ldi	r18, 0x00	; 0
    d484:	30 e0       	ldi	r19, 0x00	; 0
    d486:	40 e8       	ldi	r20, 0x80	; 128
    d488:	5f e3       	ldi	r21, 0x3F	; 63
    d48a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    d48e:	88 23       	and	r24, r24
    d490:	0c f0       	brlt	.+2      	; 0xd494 <pick_drop+0x73a2>
    d492:	10 e0       	ldi	r17, 0x00	; 0
    d494:	11 23       	and	r17, r17
    d496:	49 f0       	breq	.+18     	; 0xd4aa <pick_drop+0x73b8>
		__ticks = 1;
    d498:	ce 01       	movw	r24, r28
    d49a:	8f 52       	subi	r24, 0x2F	; 47
    d49c:	9c 4f       	sbci	r25, 0xFC	; 252
    d49e:	21 e0       	ldi	r18, 0x01	; 1
    d4a0:	30 e0       	ldi	r19, 0x00	; 0
    d4a2:	fc 01       	movw	r30, r24
    d4a4:	31 83       	std	Z+1, r19	; 0x01
    d4a6:	20 83       	st	Z, r18
    d4a8:	74 c0       	rjmp	.+232    	; 0xd592 <pick_drop+0x74a0>
	else if (__tmp > 65535)
    d4aa:	ce 01       	movw	r24, r28
    d4ac:	83 53       	subi	r24, 0x33	; 51
    d4ae:	9c 4f       	sbci	r25, 0xFC	; 252
    d4b0:	11 e0       	ldi	r17, 0x01	; 1
    d4b2:	fc 01       	movw	r30, r24
    d4b4:	60 81       	ld	r22, Z
    d4b6:	71 81       	ldd	r23, Z+1	; 0x01
    d4b8:	82 81       	ldd	r24, Z+2	; 0x02
    d4ba:	93 81       	ldd	r25, Z+3	; 0x03
    d4bc:	20 e0       	ldi	r18, 0x00	; 0
    d4be:	3f ef       	ldi	r19, 0xFF	; 255
    d4c0:	4f e7       	ldi	r20, 0x7F	; 127
    d4c2:	57 e4       	ldi	r21, 0x47	; 71
    d4c4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    d4c8:	18 16       	cp	r1, r24
    d4ca:	0c f0       	brlt	.+2      	; 0xd4ce <pick_drop+0x73dc>
    d4cc:	10 e0       	ldi	r17, 0x00	; 0
    d4ce:	11 23       	and	r17, r17
    d4d0:	09 f4       	brne	.+2      	; 0xd4d4 <pick_drop+0x73e2>
    d4d2:	4d c0       	rjmp	.+154    	; 0xd56e <pick_drop+0x747c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d4d4:	ce 01       	movw	r24, r28
    d4d6:	87 53       	subi	r24, 0x37	; 55
    d4d8:	9c 4f       	sbci	r25, 0xFC	; 252
    d4da:	fc 01       	movw	r30, r24
    d4dc:	60 81       	ld	r22, Z
    d4de:	71 81       	ldd	r23, Z+1	; 0x01
    d4e0:	82 81       	ldd	r24, Z+2	; 0x02
    d4e2:	93 81       	ldd	r25, Z+3	; 0x03
    d4e4:	20 e0       	ldi	r18, 0x00	; 0
    d4e6:	30 e0       	ldi	r19, 0x00	; 0
    d4e8:	40 e2       	ldi	r20, 0x20	; 32
    d4ea:	51 e4       	ldi	r21, 0x41	; 65
    d4ec:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d4f0:	dc 01       	movw	r26, r24
    d4f2:	cb 01       	movw	r24, r22
    d4f4:	8e 01       	movw	r16, r28
    d4f6:	0f 52       	subi	r16, 0x2F	; 47
    d4f8:	1c 4f       	sbci	r17, 0xFC	; 252
    d4fa:	bc 01       	movw	r22, r24
    d4fc:	cd 01       	movw	r24, r26
    d4fe:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d502:	dc 01       	movw	r26, r24
    d504:	cb 01       	movw	r24, r22
    d506:	f8 01       	movw	r30, r16
    d508:	91 83       	std	Z+1, r25	; 0x01
    d50a:	80 83       	st	Z, r24
    d50c:	27 c0       	rjmp	.+78     	; 0xd55c <pick_drop+0x746a>
    d50e:	ce 01       	movw	r24, r28
    d510:	8d 52       	subi	r24, 0x2D	; 45
    d512:	9c 4f       	sbci	r25, 0xFC	; 252
    d514:	20 e7       	ldi	r18, 0x70	; 112
    d516:	31 e0       	ldi	r19, 0x01	; 1
    d518:	fc 01       	movw	r30, r24
    d51a:	31 83       	std	Z+1, r19	; 0x01
    d51c:	20 83       	st	Z, r18
    d51e:	ce 01       	movw	r24, r28
    d520:	8d 52       	subi	r24, 0x2D	; 45
    d522:	9c 4f       	sbci	r25, 0xFC	; 252
    d524:	fc 01       	movw	r30, r24
    d526:	80 81       	ld	r24, Z
    d528:	91 81       	ldd	r25, Z+1	; 0x01
    d52a:	8c 01       	movw	r16, r24
    d52c:	c8 01       	movw	r24, r16
    d52e:	01 97       	sbiw	r24, 0x01	; 1
    d530:	f1 f7       	brne	.-4      	; 0xd52e <pick_drop+0x743c>
    d532:	8c 01       	movw	r16, r24
    d534:	ce 01       	movw	r24, r28
    d536:	8d 52       	subi	r24, 0x2D	; 45
    d538:	9c 4f       	sbci	r25, 0xFC	; 252
    d53a:	fc 01       	movw	r30, r24
    d53c:	11 83       	std	Z+1, r17	; 0x01
    d53e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d540:	ce 01       	movw	r24, r28
    d542:	8f 52       	subi	r24, 0x2F	; 47
    d544:	9c 4f       	sbci	r25, 0xFC	; 252
    d546:	9e 01       	movw	r18, r28
    d548:	2f 52       	subi	r18, 0x2F	; 47
    d54a:	3c 4f       	sbci	r19, 0xFC	; 252
    d54c:	f9 01       	movw	r30, r18
    d54e:	20 81       	ld	r18, Z
    d550:	31 81       	ldd	r19, Z+1	; 0x01
    d552:	21 50       	subi	r18, 0x01	; 1
    d554:	30 40       	sbci	r19, 0x00	; 0
    d556:	fc 01       	movw	r30, r24
    d558:	31 83       	std	Z+1, r19	; 0x01
    d55a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d55c:	ce 01       	movw	r24, r28
    d55e:	8f 52       	subi	r24, 0x2F	; 47
    d560:	9c 4f       	sbci	r25, 0xFC	; 252
    d562:	fc 01       	movw	r30, r24
    d564:	80 81       	ld	r24, Z
    d566:	91 81       	ldd	r25, Z+1	; 0x01
    d568:	00 97       	sbiw	r24, 0x00	; 0
    d56a:	89 f6       	brne	.-94     	; 0xd50e <pick_drop+0x741c>
    d56c:	2f c0       	rjmp	.+94     	; 0xd5cc <pick_drop+0x74da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d56e:	8e 01       	movw	r16, r28
    d570:	0f 52       	subi	r16, 0x2F	; 47
    d572:	1c 4f       	sbci	r17, 0xFC	; 252
    d574:	ce 01       	movw	r24, r28
    d576:	83 53       	subi	r24, 0x33	; 51
    d578:	9c 4f       	sbci	r25, 0xFC	; 252
    d57a:	fc 01       	movw	r30, r24
    d57c:	60 81       	ld	r22, Z
    d57e:	71 81       	ldd	r23, Z+1	; 0x01
    d580:	82 81       	ldd	r24, Z+2	; 0x02
    d582:	93 81       	ldd	r25, Z+3	; 0x03
    d584:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d588:	dc 01       	movw	r26, r24
    d58a:	cb 01       	movw	r24, r22
    d58c:	f8 01       	movw	r30, r16
    d58e:	91 83       	std	Z+1, r25	; 0x01
    d590:	80 83       	st	Z, r24
    d592:	ce 01       	movw	r24, r28
    d594:	8b 52       	subi	r24, 0x2B	; 43
    d596:	9c 4f       	sbci	r25, 0xFC	; 252
    d598:	9e 01       	movw	r18, r28
    d59a:	2f 52       	subi	r18, 0x2F	; 47
    d59c:	3c 4f       	sbci	r19, 0xFC	; 252
    d59e:	f9 01       	movw	r30, r18
    d5a0:	20 81       	ld	r18, Z
    d5a2:	31 81       	ldd	r19, Z+1	; 0x01
    d5a4:	fc 01       	movw	r30, r24
    d5a6:	31 83       	std	Z+1, r19	; 0x01
    d5a8:	20 83       	st	Z, r18
    d5aa:	ce 01       	movw	r24, r28
    d5ac:	8b 52       	subi	r24, 0x2B	; 43
    d5ae:	9c 4f       	sbci	r25, 0xFC	; 252
    d5b0:	fc 01       	movw	r30, r24
    d5b2:	80 81       	ld	r24, Z
    d5b4:	91 81       	ldd	r25, Z+1	; 0x01
    d5b6:	8c 01       	movw	r16, r24
    d5b8:	c8 01       	movw	r24, r16
    d5ba:	01 97       	sbiw	r24, 0x01	; 1
    d5bc:	f1 f7       	brne	.-4      	; 0xd5ba <pick_drop+0x74c8>
    d5be:	8c 01       	movw	r16, r24
    d5c0:	ce 01       	movw	r24, r28
    d5c2:	8b 52       	subi	r24, 0x2B	; 43
    d5c4:	9c 4f       	sbci	r25, 0xFC	; 252
    d5c6:	fc 01       	movw	r30, r24
    d5c8:	11 83       	std	Z+1, r17	; 0x01
    d5ca:	00 83       	st	Z, r16
					_delay_ms(20);
					back_mm(55);
    d5cc:	87 e3       	ldi	r24, 0x37	; 55
    d5ce:	90 e0       	ldi	r25, 0x00	; 0
    d5d0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <back_mm>
    d5d4:	9e 01       	movw	r18, r28
    d5d6:	29 52       	subi	r18, 0x29	; 41
    d5d8:	3c 4f       	sbci	r19, 0xFC	; 252
    d5da:	80 e0       	ldi	r24, 0x00	; 0
    d5dc:	90 e0       	ldi	r25, 0x00	; 0
    d5de:	a0 ea       	ldi	r26, 0xA0	; 160
    d5e0:	b1 e4       	ldi	r27, 0x41	; 65
    d5e2:	f9 01       	movw	r30, r18
    d5e4:	80 83       	st	Z, r24
    d5e6:	91 83       	std	Z+1, r25	; 0x01
    d5e8:	a2 83       	std	Z+2, r26	; 0x02
    d5ea:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d5ec:	8e 01       	movw	r16, r28
    d5ee:	05 52       	subi	r16, 0x25	; 37
    d5f0:	1c 4f       	sbci	r17, 0xFC	; 252
    d5f2:	ce 01       	movw	r24, r28
    d5f4:	89 52       	subi	r24, 0x29	; 41
    d5f6:	9c 4f       	sbci	r25, 0xFC	; 252
    d5f8:	fc 01       	movw	r30, r24
    d5fa:	60 81       	ld	r22, Z
    d5fc:	71 81       	ldd	r23, Z+1	; 0x01
    d5fe:	82 81       	ldd	r24, Z+2	; 0x02
    d600:	93 81       	ldd	r25, Z+3	; 0x03
    d602:	26 e6       	ldi	r18, 0x66	; 102
    d604:	36 e6       	ldi	r19, 0x66	; 102
    d606:	46 e6       	ldi	r20, 0x66	; 102
    d608:	55 e4       	ldi	r21, 0x45	; 69
    d60a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d60e:	dc 01       	movw	r26, r24
    d610:	cb 01       	movw	r24, r22
    d612:	f8 01       	movw	r30, r16
    d614:	80 83       	st	Z, r24
    d616:	91 83       	std	Z+1, r25	; 0x01
    d618:	a2 83       	std	Z+2, r26	; 0x02
    d61a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d61c:	ce 01       	movw	r24, r28
    d61e:	85 52       	subi	r24, 0x25	; 37
    d620:	9c 4f       	sbci	r25, 0xFC	; 252
    d622:	11 e0       	ldi	r17, 0x01	; 1
    d624:	fc 01       	movw	r30, r24
    d626:	60 81       	ld	r22, Z
    d628:	71 81       	ldd	r23, Z+1	; 0x01
    d62a:	82 81       	ldd	r24, Z+2	; 0x02
    d62c:	93 81       	ldd	r25, Z+3	; 0x03
    d62e:	20 e0       	ldi	r18, 0x00	; 0
    d630:	30 e0       	ldi	r19, 0x00	; 0
    d632:	40 e8       	ldi	r20, 0x80	; 128
    d634:	5f e3       	ldi	r21, 0x3F	; 63
    d636:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    d63a:	88 23       	and	r24, r24
    d63c:	0c f0       	brlt	.+2      	; 0xd640 <pick_drop+0x754e>
    d63e:	10 e0       	ldi	r17, 0x00	; 0
    d640:	11 23       	and	r17, r17
    d642:	49 f0       	breq	.+18     	; 0xd656 <pick_drop+0x7564>
		__ticks = 1;
    d644:	ce 01       	movw	r24, r28
    d646:	81 52       	subi	r24, 0x21	; 33
    d648:	9c 4f       	sbci	r25, 0xFC	; 252
    d64a:	21 e0       	ldi	r18, 0x01	; 1
    d64c:	30 e0       	ldi	r19, 0x00	; 0
    d64e:	fc 01       	movw	r30, r24
    d650:	31 83       	std	Z+1, r19	; 0x01
    d652:	20 83       	st	Z, r18
    d654:	74 c0       	rjmp	.+232    	; 0xd73e <pick_drop+0x764c>
	else if (__tmp > 65535)
    d656:	ce 01       	movw	r24, r28
    d658:	85 52       	subi	r24, 0x25	; 37
    d65a:	9c 4f       	sbci	r25, 0xFC	; 252
    d65c:	11 e0       	ldi	r17, 0x01	; 1
    d65e:	fc 01       	movw	r30, r24
    d660:	60 81       	ld	r22, Z
    d662:	71 81       	ldd	r23, Z+1	; 0x01
    d664:	82 81       	ldd	r24, Z+2	; 0x02
    d666:	93 81       	ldd	r25, Z+3	; 0x03
    d668:	20 e0       	ldi	r18, 0x00	; 0
    d66a:	3f ef       	ldi	r19, 0xFF	; 255
    d66c:	4f e7       	ldi	r20, 0x7F	; 127
    d66e:	57 e4       	ldi	r21, 0x47	; 71
    d670:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    d674:	18 16       	cp	r1, r24
    d676:	0c f0       	brlt	.+2      	; 0xd67a <pick_drop+0x7588>
    d678:	10 e0       	ldi	r17, 0x00	; 0
    d67a:	11 23       	and	r17, r17
    d67c:	09 f4       	brne	.+2      	; 0xd680 <pick_drop+0x758e>
    d67e:	4d c0       	rjmp	.+154    	; 0xd71a <pick_drop+0x7628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d680:	ce 01       	movw	r24, r28
    d682:	89 52       	subi	r24, 0x29	; 41
    d684:	9c 4f       	sbci	r25, 0xFC	; 252
    d686:	fc 01       	movw	r30, r24
    d688:	60 81       	ld	r22, Z
    d68a:	71 81       	ldd	r23, Z+1	; 0x01
    d68c:	82 81       	ldd	r24, Z+2	; 0x02
    d68e:	93 81       	ldd	r25, Z+3	; 0x03
    d690:	20 e0       	ldi	r18, 0x00	; 0
    d692:	30 e0       	ldi	r19, 0x00	; 0
    d694:	40 e2       	ldi	r20, 0x20	; 32
    d696:	51 e4       	ldi	r21, 0x41	; 65
    d698:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d69c:	dc 01       	movw	r26, r24
    d69e:	cb 01       	movw	r24, r22
    d6a0:	8e 01       	movw	r16, r28
    d6a2:	01 52       	subi	r16, 0x21	; 33
    d6a4:	1c 4f       	sbci	r17, 0xFC	; 252
    d6a6:	bc 01       	movw	r22, r24
    d6a8:	cd 01       	movw	r24, r26
    d6aa:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d6ae:	dc 01       	movw	r26, r24
    d6b0:	cb 01       	movw	r24, r22
    d6b2:	f8 01       	movw	r30, r16
    d6b4:	91 83       	std	Z+1, r25	; 0x01
    d6b6:	80 83       	st	Z, r24
    d6b8:	27 c0       	rjmp	.+78     	; 0xd708 <pick_drop+0x7616>
    d6ba:	ce 01       	movw	r24, r28
    d6bc:	8f 51       	subi	r24, 0x1F	; 31
    d6be:	9c 4f       	sbci	r25, 0xFC	; 252
    d6c0:	20 e7       	ldi	r18, 0x70	; 112
    d6c2:	31 e0       	ldi	r19, 0x01	; 1
    d6c4:	fc 01       	movw	r30, r24
    d6c6:	31 83       	std	Z+1, r19	; 0x01
    d6c8:	20 83       	st	Z, r18
    d6ca:	ce 01       	movw	r24, r28
    d6cc:	8f 51       	subi	r24, 0x1F	; 31
    d6ce:	9c 4f       	sbci	r25, 0xFC	; 252
    d6d0:	fc 01       	movw	r30, r24
    d6d2:	80 81       	ld	r24, Z
    d6d4:	91 81       	ldd	r25, Z+1	; 0x01
    d6d6:	8c 01       	movw	r16, r24
    d6d8:	c8 01       	movw	r24, r16
    d6da:	01 97       	sbiw	r24, 0x01	; 1
    d6dc:	f1 f7       	brne	.-4      	; 0xd6da <pick_drop+0x75e8>
    d6de:	8c 01       	movw	r16, r24
    d6e0:	ce 01       	movw	r24, r28
    d6e2:	8f 51       	subi	r24, 0x1F	; 31
    d6e4:	9c 4f       	sbci	r25, 0xFC	; 252
    d6e6:	fc 01       	movw	r30, r24
    d6e8:	11 83       	std	Z+1, r17	; 0x01
    d6ea:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d6ec:	ce 01       	movw	r24, r28
    d6ee:	81 52       	subi	r24, 0x21	; 33
    d6f0:	9c 4f       	sbci	r25, 0xFC	; 252
    d6f2:	9e 01       	movw	r18, r28
    d6f4:	21 52       	subi	r18, 0x21	; 33
    d6f6:	3c 4f       	sbci	r19, 0xFC	; 252
    d6f8:	f9 01       	movw	r30, r18
    d6fa:	20 81       	ld	r18, Z
    d6fc:	31 81       	ldd	r19, Z+1	; 0x01
    d6fe:	21 50       	subi	r18, 0x01	; 1
    d700:	30 40       	sbci	r19, 0x00	; 0
    d702:	fc 01       	movw	r30, r24
    d704:	31 83       	std	Z+1, r19	; 0x01
    d706:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d708:	ce 01       	movw	r24, r28
    d70a:	81 52       	subi	r24, 0x21	; 33
    d70c:	9c 4f       	sbci	r25, 0xFC	; 252
    d70e:	fc 01       	movw	r30, r24
    d710:	80 81       	ld	r24, Z
    d712:	91 81       	ldd	r25, Z+1	; 0x01
    d714:	00 97       	sbiw	r24, 0x00	; 0
    d716:	89 f6       	brne	.-94     	; 0xd6ba <pick_drop+0x75c8>
    d718:	e6 c1       	rjmp	.+972    	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d71a:	8e 01       	movw	r16, r28
    d71c:	01 52       	subi	r16, 0x21	; 33
    d71e:	1c 4f       	sbci	r17, 0xFC	; 252
    d720:	ce 01       	movw	r24, r28
    d722:	85 52       	subi	r24, 0x25	; 37
    d724:	9c 4f       	sbci	r25, 0xFC	; 252
    d726:	fc 01       	movw	r30, r24
    d728:	60 81       	ld	r22, Z
    d72a:	71 81       	ldd	r23, Z+1	; 0x01
    d72c:	82 81       	ldd	r24, Z+2	; 0x02
    d72e:	93 81       	ldd	r25, Z+3	; 0x03
    d730:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d734:	dc 01       	movw	r26, r24
    d736:	cb 01       	movw	r24, r22
    d738:	f8 01       	movw	r30, r16
    d73a:	91 83       	std	Z+1, r25	; 0x01
    d73c:	80 83       	st	Z, r24
    d73e:	ce 01       	movw	r24, r28
    d740:	8d 51       	subi	r24, 0x1D	; 29
    d742:	9c 4f       	sbci	r25, 0xFC	; 252
    d744:	9e 01       	movw	r18, r28
    d746:	21 52       	subi	r18, 0x21	; 33
    d748:	3c 4f       	sbci	r19, 0xFC	; 252
    d74a:	f9 01       	movw	r30, r18
    d74c:	20 81       	ld	r18, Z
    d74e:	31 81       	ldd	r19, Z+1	; 0x01
    d750:	fc 01       	movw	r30, r24
    d752:	31 83       	std	Z+1, r19	; 0x01
    d754:	20 83       	st	Z, r18
    d756:	ce 01       	movw	r24, r28
    d758:	8d 51       	subi	r24, 0x1D	; 29
    d75a:	9c 4f       	sbci	r25, 0xFC	; 252
    d75c:	fc 01       	movw	r30, r24
    d75e:	80 81       	ld	r24, Z
    d760:	91 81       	ldd	r25, Z+1	; 0x01
    d762:	8c 01       	movw	r16, r24
    d764:	c8 01       	movw	r24, r16
    d766:	01 97       	sbiw	r24, 0x01	; 1
    d768:	f1 f7       	brne	.-4      	; 0xd766 <pick_drop+0x7674>
    d76a:	8c 01       	movw	r16, r24
    d76c:	ce 01       	movw	r24, r28
    d76e:	8d 51       	subi	r24, 0x1D	; 29
    d770:	9c 4f       	sbci	r25, 0xFC	; 252
    d772:	fc 01       	movw	r30, r24
    d774:	11 83       	std	Z+1, r17	; 0x01
    d776:	00 83       	st	Z, r16
    d778:	b6 c1       	rjmp	.+876    	; 0xdae6 <pick_drop+0x79f4>
					_delay_ms(20);
				}
		}
			else if(pd=='8'){
    d77a:	ce 01       	movw	r24, r28
    d77c:	8f 5f       	subi	r24, 0xFF	; 255
    d77e:	9b 4f       	sbci	r25, 0xFB	; 251
    d780:	fc 01       	movw	r30, r24
    d782:	80 81       	ld	r24, Z
    d784:	88 33       	cpi	r24, 0x38	; 56
    d786:	09 f0       	breq	.+2      	; 0xd78a <pick_drop+0x7698>
    d788:	ae c1       	rjmp	.+860    	; 0xdae6 <pick_drop+0x79f4>
				forward_mm(10);
    d78a:	8a e0       	ldi	r24, 0x0A	; 10
    d78c:	90 e0       	ldi	r25, 0x00	; 0
    d78e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
				front();
    d792:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <front>
    d796:	9e 01       	movw	r18, r28
    d798:	2b 51       	subi	r18, 0x1B	; 27
    d79a:	3c 4f       	sbci	r19, 0xFC	; 252
    d79c:	80 e0       	ldi	r24, 0x00	; 0
    d79e:	90 e0       	ldi	r25, 0x00	; 0
    d7a0:	a8 ec       	ldi	r26, 0xC8	; 200
    d7a2:	b2 e4       	ldi	r27, 0x42	; 66
    d7a4:	f9 01       	movw	r30, r18
    d7a6:	80 83       	st	Z, r24
    d7a8:	91 83       	std	Z+1, r25	; 0x01
    d7aa:	a2 83       	std	Z+2, r26	; 0x02
    d7ac:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d7ae:	8e 01       	movw	r16, r28
    d7b0:	07 51       	subi	r16, 0x17	; 23
    d7b2:	1c 4f       	sbci	r17, 0xFC	; 252
    d7b4:	ce 01       	movw	r24, r28
    d7b6:	8b 51       	subi	r24, 0x1B	; 27
    d7b8:	9c 4f       	sbci	r25, 0xFC	; 252
    d7ba:	fc 01       	movw	r30, r24
    d7bc:	60 81       	ld	r22, Z
    d7be:	71 81       	ldd	r23, Z+1	; 0x01
    d7c0:	82 81       	ldd	r24, Z+2	; 0x02
    d7c2:	93 81       	ldd	r25, Z+3	; 0x03
    d7c4:	26 e6       	ldi	r18, 0x66	; 102
    d7c6:	36 e6       	ldi	r19, 0x66	; 102
    d7c8:	46 e6       	ldi	r20, 0x66	; 102
    d7ca:	55 e4       	ldi	r21, 0x45	; 69
    d7cc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d7d0:	dc 01       	movw	r26, r24
    d7d2:	cb 01       	movw	r24, r22
    d7d4:	f8 01       	movw	r30, r16
    d7d6:	80 83       	st	Z, r24
    d7d8:	91 83       	std	Z+1, r25	; 0x01
    d7da:	a2 83       	std	Z+2, r26	; 0x02
    d7dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d7de:	ce 01       	movw	r24, r28
    d7e0:	87 51       	subi	r24, 0x17	; 23
    d7e2:	9c 4f       	sbci	r25, 0xFC	; 252
    d7e4:	11 e0       	ldi	r17, 0x01	; 1
    d7e6:	fc 01       	movw	r30, r24
    d7e8:	60 81       	ld	r22, Z
    d7ea:	71 81       	ldd	r23, Z+1	; 0x01
    d7ec:	82 81       	ldd	r24, Z+2	; 0x02
    d7ee:	93 81       	ldd	r25, Z+3	; 0x03
    d7f0:	20 e0       	ldi	r18, 0x00	; 0
    d7f2:	30 e0       	ldi	r19, 0x00	; 0
    d7f4:	40 e8       	ldi	r20, 0x80	; 128
    d7f6:	5f e3       	ldi	r21, 0x3F	; 63
    d7f8:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    d7fc:	88 23       	and	r24, r24
    d7fe:	0c f0       	brlt	.+2      	; 0xd802 <pick_drop+0x7710>
    d800:	10 e0       	ldi	r17, 0x00	; 0
    d802:	11 23       	and	r17, r17
    d804:	49 f0       	breq	.+18     	; 0xd818 <pick_drop+0x7726>
		__ticks = 1;
    d806:	ce 01       	movw	r24, r28
    d808:	83 51       	subi	r24, 0x13	; 19
    d80a:	9c 4f       	sbci	r25, 0xFC	; 252
    d80c:	21 e0       	ldi	r18, 0x01	; 1
    d80e:	30 e0       	ldi	r19, 0x00	; 0
    d810:	fc 01       	movw	r30, r24
    d812:	31 83       	std	Z+1, r19	; 0x01
    d814:	20 83       	st	Z, r18
    d816:	74 c0       	rjmp	.+232    	; 0xd900 <pick_drop+0x780e>
	else if (__tmp > 65535)
    d818:	ce 01       	movw	r24, r28
    d81a:	87 51       	subi	r24, 0x17	; 23
    d81c:	9c 4f       	sbci	r25, 0xFC	; 252
    d81e:	11 e0       	ldi	r17, 0x01	; 1
    d820:	fc 01       	movw	r30, r24
    d822:	60 81       	ld	r22, Z
    d824:	71 81       	ldd	r23, Z+1	; 0x01
    d826:	82 81       	ldd	r24, Z+2	; 0x02
    d828:	93 81       	ldd	r25, Z+3	; 0x03
    d82a:	20 e0       	ldi	r18, 0x00	; 0
    d82c:	3f ef       	ldi	r19, 0xFF	; 255
    d82e:	4f e7       	ldi	r20, 0x7F	; 127
    d830:	57 e4       	ldi	r21, 0x47	; 71
    d832:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    d836:	18 16       	cp	r1, r24
    d838:	0c f0       	brlt	.+2      	; 0xd83c <pick_drop+0x774a>
    d83a:	10 e0       	ldi	r17, 0x00	; 0
    d83c:	11 23       	and	r17, r17
    d83e:	09 f4       	brne	.+2      	; 0xd842 <pick_drop+0x7750>
    d840:	4d c0       	rjmp	.+154    	; 0xd8dc <pick_drop+0x77ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d842:	ce 01       	movw	r24, r28
    d844:	8b 51       	subi	r24, 0x1B	; 27
    d846:	9c 4f       	sbci	r25, 0xFC	; 252
    d848:	fc 01       	movw	r30, r24
    d84a:	60 81       	ld	r22, Z
    d84c:	71 81       	ldd	r23, Z+1	; 0x01
    d84e:	82 81       	ldd	r24, Z+2	; 0x02
    d850:	93 81       	ldd	r25, Z+3	; 0x03
    d852:	20 e0       	ldi	r18, 0x00	; 0
    d854:	30 e0       	ldi	r19, 0x00	; 0
    d856:	40 e2       	ldi	r20, 0x20	; 32
    d858:	51 e4       	ldi	r21, 0x41	; 65
    d85a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d85e:	dc 01       	movw	r26, r24
    d860:	cb 01       	movw	r24, r22
    d862:	8e 01       	movw	r16, r28
    d864:	03 51       	subi	r16, 0x13	; 19
    d866:	1c 4f       	sbci	r17, 0xFC	; 252
    d868:	bc 01       	movw	r22, r24
    d86a:	cd 01       	movw	r24, r26
    d86c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d870:	dc 01       	movw	r26, r24
    d872:	cb 01       	movw	r24, r22
    d874:	f8 01       	movw	r30, r16
    d876:	91 83       	std	Z+1, r25	; 0x01
    d878:	80 83       	st	Z, r24
    d87a:	27 c0       	rjmp	.+78     	; 0xd8ca <pick_drop+0x77d8>
    d87c:	ce 01       	movw	r24, r28
    d87e:	81 51       	subi	r24, 0x11	; 17
    d880:	9c 4f       	sbci	r25, 0xFC	; 252
    d882:	20 e7       	ldi	r18, 0x70	; 112
    d884:	31 e0       	ldi	r19, 0x01	; 1
    d886:	fc 01       	movw	r30, r24
    d888:	31 83       	std	Z+1, r19	; 0x01
    d88a:	20 83       	st	Z, r18
    d88c:	ce 01       	movw	r24, r28
    d88e:	81 51       	subi	r24, 0x11	; 17
    d890:	9c 4f       	sbci	r25, 0xFC	; 252
    d892:	fc 01       	movw	r30, r24
    d894:	80 81       	ld	r24, Z
    d896:	91 81       	ldd	r25, Z+1	; 0x01
    d898:	8c 01       	movw	r16, r24
    d89a:	c8 01       	movw	r24, r16
    d89c:	01 97       	sbiw	r24, 0x01	; 1
    d89e:	f1 f7       	brne	.-4      	; 0xd89c <pick_drop+0x77aa>
    d8a0:	8c 01       	movw	r16, r24
    d8a2:	ce 01       	movw	r24, r28
    d8a4:	81 51       	subi	r24, 0x11	; 17
    d8a6:	9c 4f       	sbci	r25, 0xFC	; 252
    d8a8:	fc 01       	movw	r30, r24
    d8aa:	11 83       	std	Z+1, r17	; 0x01
    d8ac:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    d8ae:	ce 01       	movw	r24, r28
    d8b0:	83 51       	subi	r24, 0x13	; 19
    d8b2:	9c 4f       	sbci	r25, 0xFC	; 252
    d8b4:	9e 01       	movw	r18, r28
    d8b6:	23 51       	subi	r18, 0x13	; 19
    d8b8:	3c 4f       	sbci	r19, 0xFC	; 252
    d8ba:	f9 01       	movw	r30, r18
    d8bc:	20 81       	ld	r18, Z
    d8be:	31 81       	ldd	r19, Z+1	; 0x01
    d8c0:	21 50       	subi	r18, 0x01	; 1
    d8c2:	30 40       	sbci	r19, 0x00	; 0
    d8c4:	fc 01       	movw	r30, r24
    d8c6:	31 83       	std	Z+1, r19	; 0x01
    d8c8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    d8ca:	ce 01       	movw	r24, r28
    d8cc:	83 51       	subi	r24, 0x13	; 19
    d8ce:	9c 4f       	sbci	r25, 0xFC	; 252
    d8d0:	fc 01       	movw	r30, r24
    d8d2:	80 81       	ld	r24, Z
    d8d4:	91 81       	ldd	r25, Z+1	; 0x01
    d8d6:	00 97       	sbiw	r24, 0x00	; 0
    d8d8:	89 f6       	brne	.-94     	; 0xd87c <pick_drop+0x778a>
    d8da:	2f c0       	rjmp	.+94     	; 0xd93a <pick_drop+0x7848>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    d8dc:	8e 01       	movw	r16, r28
    d8de:	03 51       	subi	r16, 0x13	; 19
    d8e0:	1c 4f       	sbci	r17, 0xFC	; 252
    d8e2:	ce 01       	movw	r24, r28
    d8e4:	87 51       	subi	r24, 0x17	; 23
    d8e6:	9c 4f       	sbci	r25, 0xFC	; 252
    d8e8:	fc 01       	movw	r30, r24
    d8ea:	60 81       	ld	r22, Z
    d8ec:	71 81       	ldd	r23, Z+1	; 0x01
    d8ee:	82 81       	ldd	r24, Z+2	; 0x02
    d8f0:	93 81       	ldd	r25, Z+3	; 0x03
    d8f2:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    d8f6:	dc 01       	movw	r26, r24
    d8f8:	cb 01       	movw	r24, r22
    d8fa:	f8 01       	movw	r30, r16
    d8fc:	91 83       	std	Z+1, r25	; 0x01
    d8fe:	80 83       	st	Z, r24
    d900:	ce 01       	movw	r24, r28
    d902:	8f 50       	subi	r24, 0x0F	; 15
    d904:	9c 4f       	sbci	r25, 0xFC	; 252
    d906:	9e 01       	movw	r18, r28
    d908:	23 51       	subi	r18, 0x13	; 19
    d90a:	3c 4f       	sbci	r19, 0xFC	; 252
    d90c:	f9 01       	movw	r30, r18
    d90e:	20 81       	ld	r18, Z
    d910:	31 81       	ldd	r19, Z+1	; 0x01
    d912:	fc 01       	movw	r30, r24
    d914:	31 83       	std	Z+1, r19	; 0x01
    d916:	20 83       	st	Z, r18
    d918:	ce 01       	movw	r24, r28
    d91a:	8f 50       	subi	r24, 0x0F	; 15
    d91c:	9c 4f       	sbci	r25, 0xFC	; 252
    d91e:	fc 01       	movw	r30, r24
    d920:	80 81       	ld	r24, Z
    d922:	91 81       	ldd	r25, Z+1	; 0x01
    d924:	8c 01       	movw	r16, r24
    d926:	c8 01       	movw	r24, r16
    d928:	01 97       	sbiw	r24, 0x01	; 1
    d92a:	f1 f7       	brne	.-4      	; 0xd928 <pick_drop+0x7836>
    d92c:	8c 01       	movw	r16, r24
    d92e:	ce 01       	movw	r24, r28
    d930:	8f 50       	subi	r24, 0x0F	; 15
    d932:	9c 4f       	sbci	r25, 0xFC	; 252
    d934:	fc 01       	movw	r30, r24
    d936:	11 83       	std	Z+1, r17	; 0x01
    d938:	00 83       	st	Z, r16
				_delay_ms(100);
				forward_mm(50);
    d93a:	82 e3       	ldi	r24, 0x32	; 50
    d93c:	90 e0       	ldi	r25, 0x00	; 0
    d93e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    d942:	9e 01       	movw	r18, r28
    d944:	2d 50       	subi	r18, 0x0D	; 13
    d946:	3c 4f       	sbci	r19, 0xFC	; 252
    d948:	80 e0       	ldi	r24, 0x00	; 0
    d94a:	90 e0       	ldi	r25, 0x00	; 0
    d94c:	a0 ea       	ldi	r26, 0xA0	; 160
    d94e:	b1 e4       	ldi	r27, 0x41	; 65
    d950:	f9 01       	movw	r30, r18
    d952:	80 83       	st	Z, r24
    d954:	91 83       	std	Z+1, r25	; 0x01
    d956:	a2 83       	std	Z+2, r26	; 0x02
    d958:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    d95a:	8e 01       	movw	r16, r28
    d95c:	09 50       	subi	r16, 0x09	; 9
    d95e:	1c 4f       	sbci	r17, 0xFC	; 252
    d960:	ce 01       	movw	r24, r28
    d962:	8d 50       	subi	r24, 0x0D	; 13
    d964:	9c 4f       	sbci	r25, 0xFC	; 252
    d966:	fc 01       	movw	r30, r24
    d968:	60 81       	ld	r22, Z
    d96a:	71 81       	ldd	r23, Z+1	; 0x01
    d96c:	82 81       	ldd	r24, Z+2	; 0x02
    d96e:	93 81       	ldd	r25, Z+3	; 0x03
    d970:	26 e6       	ldi	r18, 0x66	; 102
    d972:	36 e6       	ldi	r19, 0x66	; 102
    d974:	46 e6       	ldi	r20, 0x66	; 102
    d976:	55 e4       	ldi	r21, 0x45	; 69
    d978:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    d97c:	dc 01       	movw	r26, r24
    d97e:	cb 01       	movw	r24, r22
    d980:	f8 01       	movw	r30, r16
    d982:	80 83       	st	Z, r24
    d984:	91 83       	std	Z+1, r25	; 0x01
    d986:	a2 83       	std	Z+2, r26	; 0x02
    d988:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    d98a:	ce 01       	movw	r24, r28
    d98c:	89 50       	subi	r24, 0x09	; 9
    d98e:	9c 4f       	sbci	r25, 0xFC	; 252
    d990:	11 e0       	ldi	r17, 0x01	; 1
    d992:	fc 01       	movw	r30, r24
    d994:	60 81       	ld	r22, Z
    d996:	71 81       	ldd	r23, Z+1	; 0x01
    d998:	82 81       	ldd	r24, Z+2	; 0x02
    d99a:	93 81       	ldd	r25, Z+3	; 0x03
    d99c:	20 e0       	ldi	r18, 0x00	; 0
    d99e:	30 e0       	ldi	r19, 0x00	; 0
    d9a0:	40 e8       	ldi	r20, 0x80	; 128
    d9a2:	5f e3       	ldi	r21, 0x3F	; 63
    d9a4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    d9a8:	88 23       	and	r24, r24
    d9aa:	0c f0       	brlt	.+2      	; 0xd9ae <pick_drop+0x78bc>
    d9ac:	10 e0       	ldi	r17, 0x00	; 0
    d9ae:	11 23       	and	r17, r17
    d9b0:	49 f0       	breq	.+18     	; 0xd9c4 <pick_drop+0x78d2>
		__ticks = 1;
    d9b2:	ce 01       	movw	r24, r28
    d9b4:	85 50       	subi	r24, 0x05	; 5
    d9b6:	9c 4f       	sbci	r25, 0xFC	; 252
    d9b8:	21 e0       	ldi	r18, 0x01	; 1
    d9ba:	30 e0       	ldi	r19, 0x00	; 0
    d9bc:	fc 01       	movw	r30, r24
    d9be:	31 83       	std	Z+1, r19	; 0x01
    d9c0:	20 83       	st	Z, r18
    d9c2:	74 c0       	rjmp	.+232    	; 0xdaac <pick_drop+0x79ba>
	else if (__tmp > 65535)
    d9c4:	ce 01       	movw	r24, r28
    d9c6:	89 50       	subi	r24, 0x09	; 9
    d9c8:	9c 4f       	sbci	r25, 0xFC	; 252
    d9ca:	11 e0       	ldi	r17, 0x01	; 1
    d9cc:	fc 01       	movw	r30, r24
    d9ce:	60 81       	ld	r22, Z
    d9d0:	71 81       	ldd	r23, Z+1	; 0x01
    d9d2:	82 81       	ldd	r24, Z+2	; 0x02
    d9d4:	93 81       	ldd	r25, Z+3	; 0x03
    d9d6:	20 e0       	ldi	r18, 0x00	; 0
    d9d8:	3f ef       	ldi	r19, 0xFF	; 255
    d9da:	4f e7       	ldi	r20, 0x7F	; 127
    d9dc:	57 e4       	ldi	r21, 0x47	; 71
    d9de:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    d9e2:	18 16       	cp	r1, r24
    d9e4:	0c f0       	brlt	.+2      	; 0xd9e8 <pick_drop+0x78f6>
    d9e6:	10 e0       	ldi	r17, 0x00	; 0
    d9e8:	11 23       	and	r17, r17
    d9ea:	09 f4       	brne	.+2      	; 0xd9ee <pick_drop+0x78fc>
    d9ec:	4d c0       	rjmp	.+154    	; 0xda88 <pick_drop+0x7996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    d9ee:	ce 01       	movw	r24, r28
    d9f0:	8d 50       	subi	r24, 0x0D	; 13
    d9f2:	9c 4f       	sbci	r25, 0xFC	; 252
    d9f4:	fc 01       	movw	r30, r24
    d9f6:	60 81       	ld	r22, Z
    d9f8:	71 81       	ldd	r23, Z+1	; 0x01
    d9fa:	82 81       	ldd	r24, Z+2	; 0x02
    d9fc:	93 81       	ldd	r25, Z+3	; 0x03
    d9fe:	20 e0       	ldi	r18, 0x00	; 0
    da00:	30 e0       	ldi	r19, 0x00	; 0
    da02:	40 e2       	ldi	r20, 0x20	; 32
    da04:	51 e4       	ldi	r21, 0x41	; 65
    da06:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    da0a:	dc 01       	movw	r26, r24
    da0c:	cb 01       	movw	r24, r22
    da0e:	8e 01       	movw	r16, r28
    da10:	05 50       	subi	r16, 0x05	; 5
    da12:	1c 4f       	sbci	r17, 0xFC	; 252
    da14:	bc 01       	movw	r22, r24
    da16:	cd 01       	movw	r24, r26
    da18:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    da1c:	dc 01       	movw	r26, r24
    da1e:	cb 01       	movw	r24, r22
    da20:	f8 01       	movw	r30, r16
    da22:	91 83       	std	Z+1, r25	; 0x01
    da24:	80 83       	st	Z, r24
    da26:	27 c0       	rjmp	.+78     	; 0xda76 <pick_drop+0x7984>
    da28:	ce 01       	movw	r24, r28
    da2a:	83 50       	subi	r24, 0x03	; 3
    da2c:	9c 4f       	sbci	r25, 0xFC	; 252
    da2e:	20 e7       	ldi	r18, 0x70	; 112
    da30:	31 e0       	ldi	r19, 0x01	; 1
    da32:	fc 01       	movw	r30, r24
    da34:	31 83       	std	Z+1, r19	; 0x01
    da36:	20 83       	st	Z, r18
    da38:	ce 01       	movw	r24, r28
    da3a:	83 50       	subi	r24, 0x03	; 3
    da3c:	9c 4f       	sbci	r25, 0xFC	; 252
    da3e:	fc 01       	movw	r30, r24
    da40:	80 81       	ld	r24, Z
    da42:	91 81       	ldd	r25, Z+1	; 0x01
    da44:	8c 01       	movw	r16, r24
    da46:	c8 01       	movw	r24, r16
    da48:	01 97       	sbiw	r24, 0x01	; 1
    da4a:	f1 f7       	brne	.-4      	; 0xda48 <pick_drop+0x7956>
    da4c:	8c 01       	movw	r16, r24
    da4e:	ce 01       	movw	r24, r28
    da50:	83 50       	subi	r24, 0x03	; 3
    da52:	9c 4f       	sbci	r25, 0xFC	; 252
    da54:	fc 01       	movw	r30, r24
    da56:	11 83       	std	Z+1, r17	; 0x01
    da58:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    da5a:	ce 01       	movw	r24, r28
    da5c:	85 50       	subi	r24, 0x05	; 5
    da5e:	9c 4f       	sbci	r25, 0xFC	; 252
    da60:	9e 01       	movw	r18, r28
    da62:	25 50       	subi	r18, 0x05	; 5
    da64:	3c 4f       	sbci	r19, 0xFC	; 252
    da66:	f9 01       	movw	r30, r18
    da68:	20 81       	ld	r18, Z
    da6a:	31 81       	ldd	r19, Z+1	; 0x01
    da6c:	21 50       	subi	r18, 0x01	; 1
    da6e:	30 40       	sbci	r19, 0x00	; 0
    da70:	fc 01       	movw	r30, r24
    da72:	31 83       	std	Z+1, r19	; 0x01
    da74:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    da76:	ce 01       	movw	r24, r28
    da78:	85 50       	subi	r24, 0x05	; 5
    da7a:	9c 4f       	sbci	r25, 0xFC	; 252
    da7c:	fc 01       	movw	r30, r24
    da7e:	80 81       	ld	r24, Z
    da80:	91 81       	ldd	r25, Z+1	; 0x01
    da82:	00 97       	sbiw	r24, 0x00	; 0
    da84:	89 f6       	brne	.-94     	; 0xda28 <pick_drop+0x7936>
    da86:	2f c0       	rjmp	.+94     	; 0xdae6 <pick_drop+0x79f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    da88:	8e 01       	movw	r16, r28
    da8a:	05 50       	subi	r16, 0x05	; 5
    da8c:	1c 4f       	sbci	r17, 0xFC	; 252
    da8e:	ce 01       	movw	r24, r28
    da90:	89 50       	subi	r24, 0x09	; 9
    da92:	9c 4f       	sbci	r25, 0xFC	; 252
    da94:	fc 01       	movw	r30, r24
    da96:	60 81       	ld	r22, Z
    da98:	71 81       	ldd	r23, Z+1	; 0x01
    da9a:	82 81       	ldd	r24, Z+2	; 0x02
    da9c:	93 81       	ldd	r25, Z+3	; 0x03
    da9e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    daa2:	dc 01       	movw	r26, r24
    daa4:	cb 01       	movw	r24, r22
    daa6:	f8 01       	movw	r30, r16
    daa8:	91 83       	std	Z+1, r25	; 0x01
    daaa:	80 83       	st	Z, r24
    daac:	ce 01       	movw	r24, r28
    daae:	81 50       	subi	r24, 0x01	; 1
    dab0:	9c 4f       	sbci	r25, 0xFC	; 252
    dab2:	9e 01       	movw	r18, r28
    dab4:	25 50       	subi	r18, 0x05	; 5
    dab6:	3c 4f       	sbci	r19, 0xFC	; 252
    dab8:	f9 01       	movw	r30, r18
    daba:	20 81       	ld	r18, Z
    dabc:	31 81       	ldd	r19, Z+1	; 0x01
    dabe:	fc 01       	movw	r30, r24
    dac0:	31 83       	std	Z+1, r19	; 0x01
    dac2:	20 83       	st	Z, r18
    dac4:	ce 01       	movw	r24, r28
    dac6:	81 50       	subi	r24, 0x01	; 1
    dac8:	9c 4f       	sbci	r25, 0xFC	; 252
    daca:	fc 01       	movw	r30, r24
    dacc:	80 81       	ld	r24, Z
    dace:	91 81       	ldd	r25, Z+1	; 0x01
    dad0:	8c 01       	movw	r16, r24
    dad2:	c8 01       	movw	r24, r16
    dad4:	01 97       	sbiw	r24, 0x01	; 1
    dad6:	f1 f7       	brne	.-4      	; 0xdad4 <pick_drop+0x79e2>
    dad8:	8c 01       	movw	r16, r24
    dada:	ce 01       	movw	r24, r28
    dadc:	81 50       	subi	r24, 0x01	; 1
    dade:	9c 4f       	sbci	r25, 0xFC	; 252
    dae0:	fc 01       	movw	r30, r24
    dae2:	11 83       	std	Z+1, r17	; 0x01
    dae4:	00 83       	st	Z, r16
				_delay_ms(20);
			}
defaulty();
    dae6:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <defaulty>
}
    daea:	cf 5f       	subi	r28, 0xFF	; 255
    daec:	db 4f       	sbci	r29, 0xFB	; 251
    daee:	0f b6       	in	r0, 0x3f	; 63
    daf0:	f8 94       	cli
    daf2:	de bf       	out	0x3e, r29	; 62
    daf4:	0f be       	out	0x3f, r0	; 63
    daf6:	cd bf       	out	0x3d, r28	; 61
    daf8:	df 91       	pop	r29
    dafa:	cf 91       	pop	r28
    dafc:	1f 91       	pop	r17
    dafe:	0f 91       	pop	r16
    db00:	08 95       	ret

0000db02 <travel_path>:

/************************************************************************/
/* Core function handling the motion of the bot based on the identifier from the master_path.                                                                     */
/************************************************************************/
void travel_path(char pos_val)
{   TIMSK3=0;
    db02:	0f 93       	push	r16
    db04:	1f 93       	push	r17
    db06:	cf 93       	push	r28
    db08:	df 93       	push	r29
    db0a:	cd b7       	in	r28, 0x3d	; 61
    db0c:	de b7       	in	r29, 0x3e	; 62
    db0e:	cf 5c       	subi	r28, 0xCF	; 207
    db10:	d1 40       	sbci	r29, 0x01	; 1
    db12:	0f b6       	in	r0, 0x3f	; 63
    db14:	f8 94       	cli
    db16:	de bf       	out	0x3e, r29	; 62
    db18:	0f be       	out	0x3f, r0	; 63
    db1a:	cd bf       	out	0x3d, r28	; 61
    db1c:	9e 01       	movw	r18, r28
    db1e:	21 53       	subi	r18, 0x31	; 49
    db20:	3e 4f       	sbci	r19, 0xFE	; 254
    db22:	f9 01       	movw	r30, r18
    db24:	80 83       	st	Z, r24
    db26:	81 e7       	ldi	r24, 0x71	; 113
    db28:	90 e0       	ldi	r25, 0x00	; 0
    db2a:	fc 01       	movw	r30, r24
    db2c:	10 82       	st	Z, r1
	halt=1;
    db2e:	81 e0       	ldi	r24, 0x01	; 1
    db30:	90 e0       	ldi	r25, 0x00	; 0
    db32:	90 93 52 03 	sts	0x0352, r25
    db36:	80 93 51 03 	sts	0x0351, r24
	stop();
    db3a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    db3e:	80 e0       	ldi	r24, 0x00	; 0
    db40:	90 e0       	ldi	r25, 0x00	; 0
    db42:	a0 ea       	ldi	r26, 0xA0	; 160
    db44:	b1 e4       	ldi	r27, 0x41	; 65
    db46:	89 83       	std	Y+1, r24	; 0x01
    db48:	9a 83       	std	Y+2, r25	; 0x02
    db4a:	ab 83       	std	Y+3, r26	; 0x03
    db4c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    db4e:	69 81       	ldd	r22, Y+1	; 0x01
    db50:	7a 81       	ldd	r23, Y+2	; 0x02
    db52:	8b 81       	ldd	r24, Y+3	; 0x03
    db54:	9c 81       	ldd	r25, Y+4	; 0x04
    db56:	26 e6       	ldi	r18, 0x66	; 102
    db58:	36 e6       	ldi	r19, 0x66	; 102
    db5a:	46 e6       	ldi	r20, 0x66	; 102
    db5c:	55 e4       	ldi	r21, 0x45	; 69
    db5e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    db62:	dc 01       	movw	r26, r24
    db64:	cb 01       	movw	r24, r22
    db66:	8d 83       	std	Y+5, r24	; 0x05
    db68:	9e 83       	std	Y+6, r25	; 0x06
    db6a:	af 83       	std	Y+7, r26	; 0x07
    db6c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    db6e:	11 e0       	ldi	r17, 0x01	; 1
    db70:	6d 81       	ldd	r22, Y+5	; 0x05
    db72:	7e 81       	ldd	r23, Y+6	; 0x06
    db74:	8f 81       	ldd	r24, Y+7	; 0x07
    db76:	98 85       	ldd	r25, Y+8	; 0x08
    db78:	20 e0       	ldi	r18, 0x00	; 0
    db7a:	30 e0       	ldi	r19, 0x00	; 0
    db7c:	40 e8       	ldi	r20, 0x80	; 128
    db7e:	5f e3       	ldi	r21, 0x3F	; 63
    db80:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    db84:	88 23       	and	r24, r24
    db86:	0c f0       	brlt	.+2      	; 0xdb8a <travel_path+0x88>
    db88:	10 e0       	ldi	r17, 0x00	; 0
    db8a:	11 23       	and	r17, r17
    db8c:	29 f0       	breq	.+10     	; 0xdb98 <travel_path+0x96>
		__ticks = 1;
    db8e:	81 e0       	ldi	r24, 0x01	; 1
    db90:	90 e0       	ldi	r25, 0x00	; 0
    db92:	9a 87       	std	Y+10, r25	; 0x0a
    db94:	89 87       	std	Y+9, r24	; 0x09
    db96:	46 c0       	rjmp	.+140    	; 0xdc24 <travel_path+0x122>
	else if (__tmp > 65535)
    db98:	11 e0       	ldi	r17, 0x01	; 1
    db9a:	6d 81       	ldd	r22, Y+5	; 0x05
    db9c:	7e 81       	ldd	r23, Y+6	; 0x06
    db9e:	8f 81       	ldd	r24, Y+7	; 0x07
    dba0:	98 85       	ldd	r25, Y+8	; 0x08
    dba2:	20 e0       	ldi	r18, 0x00	; 0
    dba4:	3f ef       	ldi	r19, 0xFF	; 255
    dba6:	4f e7       	ldi	r20, 0x7F	; 127
    dba8:	57 e4       	ldi	r21, 0x47	; 71
    dbaa:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    dbae:	18 16       	cp	r1, r24
    dbb0:	0c f0       	brlt	.+2      	; 0xdbb4 <travel_path+0xb2>
    dbb2:	10 e0       	ldi	r17, 0x00	; 0
    dbb4:	11 23       	and	r17, r17
    dbb6:	61 f1       	breq	.+88     	; 0xdc10 <travel_path+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    dbb8:	69 81       	ldd	r22, Y+1	; 0x01
    dbba:	7a 81       	ldd	r23, Y+2	; 0x02
    dbbc:	8b 81       	ldd	r24, Y+3	; 0x03
    dbbe:	9c 81       	ldd	r25, Y+4	; 0x04
    dbc0:	20 e0       	ldi	r18, 0x00	; 0
    dbc2:	30 e0       	ldi	r19, 0x00	; 0
    dbc4:	40 e2       	ldi	r20, 0x20	; 32
    dbc6:	51 e4       	ldi	r21, 0x41	; 65
    dbc8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    dbcc:	dc 01       	movw	r26, r24
    dbce:	cb 01       	movw	r24, r22
    dbd0:	bc 01       	movw	r22, r24
    dbd2:	cd 01       	movw	r24, r26
    dbd4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    dbd8:	dc 01       	movw	r26, r24
    dbda:	cb 01       	movw	r24, r22
    dbdc:	9a 87       	std	Y+10, r25	; 0x0a
    dbde:	89 87       	std	Y+9, r24	; 0x09
    dbe0:	12 c0       	rjmp	.+36     	; 0xdc06 <travel_path+0x104>
    dbe2:	80 e7       	ldi	r24, 0x70	; 112
    dbe4:	91 e0       	ldi	r25, 0x01	; 1
    dbe6:	9c 87       	std	Y+12, r25	; 0x0c
    dbe8:	8b 87       	std	Y+11, r24	; 0x0b
    dbea:	8b 85       	ldd	r24, Y+11	; 0x0b
    dbec:	9c 85       	ldd	r25, Y+12	; 0x0c
    dbee:	8c 01       	movw	r16, r24
    dbf0:	c8 01       	movw	r24, r16
    dbf2:	01 97       	sbiw	r24, 0x01	; 1
    dbf4:	f1 f7       	brne	.-4      	; 0xdbf2 <travel_path+0xf0>
    dbf6:	8c 01       	movw	r16, r24
    dbf8:	1c 87       	std	Y+12, r17	; 0x0c
    dbfa:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    dbfc:	89 85       	ldd	r24, Y+9	; 0x09
    dbfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    dc00:	01 97       	sbiw	r24, 0x01	; 1
    dc02:	9a 87       	std	Y+10, r25	; 0x0a
    dc04:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dc06:	89 85       	ldd	r24, Y+9	; 0x09
    dc08:	9a 85       	ldd	r25, Y+10	; 0x0a
    dc0a:	00 97       	sbiw	r24, 0x00	; 0
    dc0c:	51 f7       	brne	.-44     	; 0xdbe2 <travel_path+0xe0>
    dc0e:	17 c0       	rjmp	.+46     	; 0xdc3e <travel_path+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dc10:	6d 81       	ldd	r22, Y+5	; 0x05
    dc12:	7e 81       	ldd	r23, Y+6	; 0x06
    dc14:	8f 81       	ldd	r24, Y+7	; 0x07
    dc16:	98 85       	ldd	r25, Y+8	; 0x08
    dc18:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    dc1c:	dc 01       	movw	r26, r24
    dc1e:	cb 01       	movw	r24, r22
    dc20:	9a 87       	std	Y+10, r25	; 0x0a
    dc22:	89 87       	std	Y+9, r24	; 0x09
    dc24:	89 85       	ldd	r24, Y+9	; 0x09
    dc26:	9a 85       	ldd	r25, Y+10	; 0x0a
    dc28:	9e 87       	std	Y+14, r25	; 0x0e
    dc2a:	8d 87       	std	Y+13, r24	; 0x0d
    dc2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    dc2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    dc30:	8c 01       	movw	r16, r24
    dc32:	f8 01       	movw	r30, r16
    dc34:	31 97       	sbiw	r30, 0x01	; 1
    dc36:	f1 f7       	brne	.-4      	; 0xdc34 <travel_path+0x132>
    dc38:	8f 01       	movw	r16, r30
    dc3a:	1e 87       	std	Y+14, r17	; 0x0e
    dc3c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);
	if(pos_val=='n'){
    dc3e:	ce 01       	movw	r24, r28
    dc40:	81 53       	subi	r24, 0x31	; 49
    dc42:	9e 4f       	sbci	r25, 0xFE	; 254
    dc44:	fc 01       	movw	r30, r24
    dc46:	80 81       	ld	r24, Z
    dc48:	8e 36       	cpi	r24, 0x6E	; 110
    dc4a:	21 f4       	brne	.+8      	; 0xdc54 <travel_path+0x152>
	forward();
    dc4c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
    dc50:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
	}
	else if(pos_val=='r'){
    dc54:	ce 01       	movw	r24, r28
    dc56:	81 53       	subi	r24, 0x31	; 49
    dc58:	9e 4f       	sbci	r25, 0xFE	; 254
    dc5a:	fc 01       	movw	r30, r24
    dc5c:	80 81       	ld	r24, Z
    dc5e:	82 37       	cpi	r24, 0x72	; 114
    dc60:	09 f0       	breq	.+2      	; 0xdc64 <travel_path+0x162>
    dc62:	88 c0       	rjmp	.+272    	; 0xdd74 <travel_path+0x272>
	forward_mm(20);
    dc64:	84 e1       	ldi	r24, 0x14	; 20
    dc66:	90 e0       	ldi	r25, 0x00	; 0
    dc68:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    dc6c:	80 e0       	ldi	r24, 0x00	; 0
    dc6e:	90 e0       	ldi	r25, 0x00	; 0
    dc70:	a0 ea       	ldi	r26, 0xA0	; 160
    dc72:	b1 e4       	ldi	r27, 0x41	; 65
    dc74:	8f 87       	std	Y+15, r24	; 0x0f
    dc76:	98 8b       	std	Y+16, r25	; 0x10
    dc78:	a9 8b       	std	Y+17, r26	; 0x11
    dc7a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    dc7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    dc7e:	78 89       	ldd	r23, Y+16	; 0x10
    dc80:	89 89       	ldd	r24, Y+17	; 0x11
    dc82:	9a 89       	ldd	r25, Y+18	; 0x12
    dc84:	26 e6       	ldi	r18, 0x66	; 102
    dc86:	36 e6       	ldi	r19, 0x66	; 102
    dc88:	46 e6       	ldi	r20, 0x66	; 102
    dc8a:	55 e4       	ldi	r21, 0x45	; 69
    dc8c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    dc90:	dc 01       	movw	r26, r24
    dc92:	cb 01       	movw	r24, r22
    dc94:	8b 8b       	std	Y+19, r24	; 0x13
    dc96:	9c 8b       	std	Y+20, r25	; 0x14
    dc98:	ad 8b       	std	Y+21, r26	; 0x15
    dc9a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    dc9c:	11 e0       	ldi	r17, 0x01	; 1
    dc9e:	6b 89       	ldd	r22, Y+19	; 0x13
    dca0:	7c 89       	ldd	r23, Y+20	; 0x14
    dca2:	8d 89       	ldd	r24, Y+21	; 0x15
    dca4:	9e 89       	ldd	r25, Y+22	; 0x16
    dca6:	20 e0       	ldi	r18, 0x00	; 0
    dca8:	30 e0       	ldi	r19, 0x00	; 0
    dcaa:	40 e8       	ldi	r20, 0x80	; 128
    dcac:	5f e3       	ldi	r21, 0x3F	; 63
    dcae:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    dcb2:	88 23       	and	r24, r24
    dcb4:	0c f0       	brlt	.+2      	; 0xdcb8 <travel_path+0x1b6>
    dcb6:	10 e0       	ldi	r17, 0x00	; 0
    dcb8:	11 23       	and	r17, r17
    dcba:	29 f0       	breq	.+10     	; 0xdcc6 <travel_path+0x1c4>
		__ticks = 1;
    dcbc:	81 e0       	ldi	r24, 0x01	; 1
    dcbe:	90 e0       	ldi	r25, 0x00	; 0
    dcc0:	98 8f       	std	Y+24, r25	; 0x18
    dcc2:	8f 8b       	std	Y+23, r24	; 0x17
    dcc4:	46 c0       	rjmp	.+140    	; 0xdd52 <travel_path+0x250>
	else if (__tmp > 65535)
    dcc6:	11 e0       	ldi	r17, 0x01	; 1
    dcc8:	6b 89       	ldd	r22, Y+19	; 0x13
    dcca:	7c 89       	ldd	r23, Y+20	; 0x14
    dccc:	8d 89       	ldd	r24, Y+21	; 0x15
    dcce:	9e 89       	ldd	r25, Y+22	; 0x16
    dcd0:	20 e0       	ldi	r18, 0x00	; 0
    dcd2:	3f ef       	ldi	r19, 0xFF	; 255
    dcd4:	4f e7       	ldi	r20, 0x7F	; 127
    dcd6:	57 e4       	ldi	r21, 0x47	; 71
    dcd8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    dcdc:	18 16       	cp	r1, r24
    dcde:	0c f0       	brlt	.+2      	; 0xdce2 <travel_path+0x1e0>
    dce0:	10 e0       	ldi	r17, 0x00	; 0
    dce2:	11 23       	and	r17, r17
    dce4:	61 f1       	breq	.+88     	; 0xdd3e <travel_path+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    dce6:	6f 85       	ldd	r22, Y+15	; 0x0f
    dce8:	78 89       	ldd	r23, Y+16	; 0x10
    dcea:	89 89       	ldd	r24, Y+17	; 0x11
    dcec:	9a 89       	ldd	r25, Y+18	; 0x12
    dcee:	20 e0       	ldi	r18, 0x00	; 0
    dcf0:	30 e0       	ldi	r19, 0x00	; 0
    dcf2:	40 e2       	ldi	r20, 0x20	; 32
    dcf4:	51 e4       	ldi	r21, 0x41	; 65
    dcf6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    dcfa:	dc 01       	movw	r26, r24
    dcfc:	cb 01       	movw	r24, r22
    dcfe:	bc 01       	movw	r22, r24
    dd00:	cd 01       	movw	r24, r26
    dd02:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    dd06:	dc 01       	movw	r26, r24
    dd08:	cb 01       	movw	r24, r22
    dd0a:	98 8f       	std	Y+24, r25	; 0x18
    dd0c:	8f 8b       	std	Y+23, r24	; 0x17
    dd0e:	12 c0       	rjmp	.+36     	; 0xdd34 <travel_path+0x232>
    dd10:	80 e7       	ldi	r24, 0x70	; 112
    dd12:	91 e0       	ldi	r25, 0x01	; 1
    dd14:	9a 8f       	std	Y+26, r25	; 0x1a
    dd16:	89 8f       	std	Y+25, r24	; 0x19
    dd18:	89 8d       	ldd	r24, Y+25	; 0x19
    dd1a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    dd1c:	8c 01       	movw	r16, r24
    dd1e:	c8 01       	movw	r24, r16
    dd20:	01 97       	sbiw	r24, 0x01	; 1
    dd22:	f1 f7       	brne	.-4      	; 0xdd20 <travel_path+0x21e>
    dd24:	8c 01       	movw	r16, r24
    dd26:	1a 8f       	std	Y+26, r17	; 0x1a
    dd28:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    dd2a:	8f 89       	ldd	r24, Y+23	; 0x17
    dd2c:	98 8d       	ldd	r25, Y+24	; 0x18
    dd2e:	01 97       	sbiw	r24, 0x01	; 1
    dd30:	98 8f       	std	Y+24, r25	; 0x18
    dd32:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    dd34:	8f 89       	ldd	r24, Y+23	; 0x17
    dd36:	98 8d       	ldd	r25, Y+24	; 0x18
    dd38:	00 97       	sbiw	r24, 0x00	; 0
    dd3a:	51 f7       	brne	.-44     	; 0xdd10 <travel_path+0x20e>
    dd3c:	17 c0       	rjmp	.+46     	; 0xdd6c <travel_path+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    dd3e:	6b 89       	ldd	r22, Y+19	; 0x13
    dd40:	7c 89       	ldd	r23, Y+20	; 0x14
    dd42:	8d 89       	ldd	r24, Y+21	; 0x15
    dd44:	9e 89       	ldd	r25, Y+22	; 0x16
    dd46:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    dd4a:	dc 01       	movw	r26, r24
    dd4c:	cb 01       	movw	r24, r22
    dd4e:	98 8f       	std	Y+24, r25	; 0x18
    dd50:	8f 8b       	std	Y+23, r24	; 0x17
    dd52:	8f 89       	ldd	r24, Y+23	; 0x17
    dd54:	98 8d       	ldd	r25, Y+24	; 0x18
    dd56:	9c 8f       	std	Y+28, r25	; 0x1c
    dd58:	8b 8f       	std	Y+27, r24	; 0x1b
    dd5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dd5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    dd5e:	8c 01       	movw	r16, r24
    dd60:	f8 01       	movw	r30, r16
    dd62:	31 97       	sbiw	r30, 0x01	; 1
    dd64:	f1 f7       	brne	.-4      	; 0xdd62 <travel_path+0x260>
    dd66:	8f 01       	movw	r16, r30
    dd68:	1c 8f       	std	Y+28, r17	; 0x1c
    dd6a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(20);
	correct_right();
    dd6c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    dd70:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
	}	
	else if(pos_val=='l')
    dd74:	ce 01       	movw	r24, r28
    dd76:	81 53       	subi	r24, 0x31	; 49
    dd78:	9e 4f       	sbci	r25, 0xFE	; 254
    dd7a:	fc 01       	movw	r30, r24
    dd7c:	80 81       	ld	r24, Z
    dd7e:	8c 36       	cpi	r24, 0x6C	; 108
    dd80:	09 f0       	breq	.+2      	; 0xdd84 <travel_path+0x282>
    dd82:	88 c0       	rjmp	.+272    	; 0xde94 <travel_path+0x392>
	{
	forward_mm(20);
    dd84:	84 e1       	ldi	r24, 0x14	; 20
    dd86:	90 e0       	ldi	r25, 0x00	; 0
    dd88:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    dd8c:	80 e0       	ldi	r24, 0x00	; 0
    dd8e:	90 e0       	ldi	r25, 0x00	; 0
    dd90:	a0 ea       	ldi	r26, 0xA0	; 160
    dd92:	b1 e4       	ldi	r27, 0x41	; 65
    dd94:	8d 8f       	std	Y+29, r24	; 0x1d
    dd96:	9e 8f       	std	Y+30, r25	; 0x1e
    dd98:	af 8f       	std	Y+31, r26	; 0x1f
    dd9a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    dd9c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    dd9e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    dda0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    dda2:	98 a1       	lds	r25, 0x48
    dda4:	26 e6       	ldi	r18, 0x66	; 102
    dda6:	36 e6       	ldi	r19, 0x66	; 102
    dda8:	46 e6       	ldi	r20, 0x66	; 102
    ddaa:	55 e4       	ldi	r21, 0x45	; 69
    ddac:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ddb0:	dc 01       	movw	r26, r24
    ddb2:	cb 01       	movw	r24, r22
    ddb4:	89 a3       	lds	r24, 0x59
    ddb6:	9a a3       	lds	r25, 0x5a
    ddb8:	ab a3       	lds	r26, 0x5b
    ddba:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    ddbc:	11 e0       	ldi	r17, 0x01	; 1
    ddbe:	69 a1       	lds	r22, 0x49
    ddc0:	7a a1       	lds	r23, 0x4a
    ddc2:	8b a1       	lds	r24, 0x4b
    ddc4:	9c a1       	lds	r25, 0x4c
    ddc6:	20 e0       	ldi	r18, 0x00	; 0
    ddc8:	30 e0       	ldi	r19, 0x00	; 0
    ddca:	40 e8       	ldi	r20, 0x80	; 128
    ddcc:	5f e3       	ldi	r21, 0x3F	; 63
    ddce:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    ddd2:	88 23       	and	r24, r24
    ddd4:	0c f0       	brlt	.+2      	; 0xddd8 <travel_path+0x2d6>
    ddd6:	10 e0       	ldi	r17, 0x00	; 0
    ddd8:	11 23       	and	r17, r17
    ddda:	29 f0       	breq	.+10     	; 0xdde6 <travel_path+0x2e4>
		__ticks = 1;
    dddc:	81 e0       	ldi	r24, 0x01	; 1
    ddde:	90 e0       	ldi	r25, 0x00	; 0
    dde0:	9e a3       	lds	r25, 0x5e
    dde2:	8d a3       	lds	r24, 0x5d
    dde4:	46 c0       	rjmp	.+140    	; 0xde72 <travel_path+0x370>
	else if (__tmp > 65535)
    dde6:	11 e0       	ldi	r17, 0x01	; 1
    dde8:	69 a1       	lds	r22, 0x49
    ddea:	7a a1       	lds	r23, 0x4a
    ddec:	8b a1       	lds	r24, 0x4b
    ddee:	9c a1       	lds	r25, 0x4c
    ddf0:	20 e0       	ldi	r18, 0x00	; 0
    ddf2:	3f ef       	ldi	r19, 0xFF	; 255
    ddf4:	4f e7       	ldi	r20, 0x7F	; 127
    ddf6:	57 e4       	ldi	r21, 0x47	; 71
    ddf8:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    ddfc:	18 16       	cp	r1, r24
    ddfe:	0c f0       	brlt	.+2      	; 0xde02 <travel_path+0x300>
    de00:	10 e0       	ldi	r17, 0x00	; 0
    de02:	11 23       	and	r17, r17
    de04:	61 f1       	breq	.+88     	; 0xde5e <travel_path+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    de06:	6d 8d       	ldd	r22, Y+29	; 0x1d
    de08:	7e 8d       	ldd	r23, Y+30	; 0x1e
    de0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    de0c:	98 a1       	lds	r25, 0x48
    de0e:	20 e0       	ldi	r18, 0x00	; 0
    de10:	30 e0       	ldi	r19, 0x00	; 0
    de12:	40 e2       	ldi	r20, 0x20	; 32
    de14:	51 e4       	ldi	r21, 0x41	; 65
    de16:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    de1a:	dc 01       	movw	r26, r24
    de1c:	cb 01       	movw	r24, r22
    de1e:	bc 01       	movw	r22, r24
    de20:	cd 01       	movw	r24, r26
    de22:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    de26:	dc 01       	movw	r26, r24
    de28:	cb 01       	movw	r24, r22
    de2a:	9e a3       	lds	r25, 0x5e
    de2c:	8d a3       	lds	r24, 0x5d
    de2e:	12 c0       	rjmp	.+36     	; 0xde54 <travel_path+0x352>
    de30:	80 e7       	ldi	r24, 0x70	; 112
    de32:	91 e0       	ldi	r25, 0x01	; 1
    de34:	98 a7       	lds	r25, 0x78
    de36:	8f a3       	lds	r24, 0x5f
    de38:	8f a1       	lds	r24, 0x4f
    de3a:	98 a5       	lds	r25, 0x68
    de3c:	8c 01       	movw	r16, r24
    de3e:	c8 01       	movw	r24, r16
    de40:	01 97       	sbiw	r24, 0x01	; 1
    de42:	f1 f7       	brne	.-4      	; 0xde40 <travel_path+0x33e>
    de44:	8c 01       	movw	r16, r24
    de46:	18 a7       	lds	r17, 0x78
    de48:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    de4a:	8d a1       	lds	r24, 0x4d
    de4c:	9e a1       	lds	r25, 0x4e
    de4e:	01 97       	sbiw	r24, 0x01	; 1
    de50:	9e a3       	lds	r25, 0x5e
    de52:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    de54:	8d a1       	lds	r24, 0x4d
    de56:	9e a1       	lds	r25, 0x4e
    de58:	00 97       	sbiw	r24, 0x00	; 0
    de5a:	51 f7       	brne	.-44     	; 0xde30 <travel_path+0x32e>
    de5c:	17 c0       	rjmp	.+46     	; 0xde8c <travel_path+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    de5e:	69 a1       	lds	r22, 0x49
    de60:	7a a1       	lds	r23, 0x4a
    de62:	8b a1       	lds	r24, 0x4b
    de64:	9c a1       	lds	r25, 0x4c
    de66:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    de6a:	dc 01       	movw	r26, r24
    de6c:	cb 01       	movw	r24, r22
    de6e:	9e a3       	lds	r25, 0x5e
    de70:	8d a3       	lds	r24, 0x5d
    de72:	8d a1       	lds	r24, 0x4d
    de74:	9e a1       	lds	r25, 0x4e
    de76:	9a a7       	lds	r25, 0x7a
    de78:	89 a7       	lds	r24, 0x79
    de7a:	89 a5       	lds	r24, 0x69
    de7c:	9a a5       	lds	r25, 0x6a
    de7e:	8c 01       	movw	r16, r24
    de80:	f8 01       	movw	r30, r16
    de82:	31 97       	sbiw	r30, 0x01	; 1
    de84:	f1 f7       	brne	.-4      	; 0xde82 <travel_path+0x380>
    de86:	8f 01       	movw	r16, r30
    de88:	1a a7       	lds	r17, 0x7a
    de8a:	09 a7       	lds	r16, 0x79
	_delay_ms(20);
	correct_left();
    de8c:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    de90:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
	}	
	else if(pos_val=='R')
    de94:	ce 01       	movw	r24, r28
    de96:	81 53       	subi	r24, 0x31	; 49
    de98:	9e 4f       	sbci	r25, 0xFE	; 254
    de9a:	fc 01       	movw	r30, r24
    de9c:	80 81       	ld	r24, Z
    de9e:	82 35       	cpi	r24, 0x52	; 82
    dea0:	11 f0       	breq	.+4      	; 0xdea6 <travel_path+0x3a4>
    dea2:	0c 94 73 78 	jmp	0xf0e6	; 0xf0e6 <travel_path+0x15e4>
	{
		if(node==0)
    dea6:	80 91 4f 03 	lds	r24, 0x034F
    deaa:	90 91 50 03 	lds	r25, 0x0350
    deae:	00 97       	sbiw	r24, 0x00	; 0
    deb0:	21 f4       	brne	.+8      	; 0xdeba <travel_path+0x3b8>
		correct_right();
    deb2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    deb6:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
	}	
	else if(pos_val=='R')
	{
		if(node==0)
		correct_right();
		else if(master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    deba:	80 91 4f 03 	lds	r24, 0x034F
    debe:	90 91 50 03 	lds	r25, 0x0350
    dec2:	01 96       	adiw	r24, 0x01	; 1
    dec4:	8d 5a       	subi	r24, 0xAD	; 173
    dec6:	9c 4f       	sbci	r25, 0xFC	; 252
    dec8:	fc 01       	movw	r30, r24
    deca:	80 81       	ld	r24, Z
    decc:	81 33       	cpi	r24, 0x31	; 49
    dece:	09 f4       	brne	.+2      	; 0xded2 <travel_path+0x3d0>
    ded0:	4f c0       	rjmp	.+158    	; 0xdf70 <travel_path+0x46e>
    ded2:	80 91 4f 03 	lds	r24, 0x034F
    ded6:	90 91 50 03 	lds	r25, 0x0350
    deda:	01 96       	adiw	r24, 0x01	; 1
    dedc:	8d 5a       	subi	r24, 0xAD	; 173
    dede:	9c 4f       	sbci	r25, 0xFC	; 252
    dee0:	fc 01       	movw	r30, r24
    dee2:	80 81       	ld	r24, Z
    dee4:	82 33       	cpi	r24, 0x32	; 50
    dee6:	09 f4       	brne	.+2      	; 0xdeea <travel_path+0x3e8>
    dee8:	43 c0       	rjmp	.+134    	; 0xdf70 <travel_path+0x46e>
    deea:	80 91 4f 03 	lds	r24, 0x034F
    deee:	90 91 50 03 	lds	r25, 0x0350
    def2:	01 96       	adiw	r24, 0x01	; 1
    def4:	8d 5a       	subi	r24, 0xAD	; 173
    def6:	9c 4f       	sbci	r25, 0xFC	; 252
    def8:	fc 01       	movw	r30, r24
    defa:	80 81       	ld	r24, Z
    defc:	83 33       	cpi	r24, 0x33	; 51
    defe:	c1 f1       	breq	.+112    	; 0xdf70 <travel_path+0x46e>
    df00:	80 91 4f 03 	lds	r24, 0x034F
    df04:	90 91 50 03 	lds	r25, 0x0350
    df08:	01 96       	adiw	r24, 0x01	; 1
    df0a:	8d 5a       	subi	r24, 0xAD	; 173
    df0c:	9c 4f       	sbci	r25, 0xFC	; 252
    df0e:	fc 01       	movw	r30, r24
    df10:	80 81       	ld	r24, Z
    df12:	84 33       	cpi	r24, 0x34	; 52
    df14:	69 f1       	breq	.+90     	; 0xdf70 <travel_path+0x46e>
    df16:	80 91 4f 03 	lds	r24, 0x034F
    df1a:	90 91 50 03 	lds	r25, 0x0350
    df1e:	01 96       	adiw	r24, 0x01	; 1
    df20:	8d 5a       	subi	r24, 0xAD	; 173
    df22:	9c 4f       	sbci	r25, 0xFC	; 252
    df24:	fc 01       	movw	r30, r24
    df26:	80 81       	ld	r24, Z
    df28:	85 33       	cpi	r24, 0x35	; 53
    df2a:	11 f1       	breq	.+68     	; 0xdf70 <travel_path+0x46e>
    df2c:	80 91 4f 03 	lds	r24, 0x034F
    df30:	90 91 50 03 	lds	r25, 0x0350
    df34:	01 96       	adiw	r24, 0x01	; 1
    df36:	8d 5a       	subi	r24, 0xAD	; 173
    df38:	9c 4f       	sbci	r25, 0xFC	; 252
    df3a:	fc 01       	movw	r30, r24
    df3c:	80 81       	ld	r24, Z
    df3e:	86 33       	cpi	r24, 0x36	; 54
    df40:	b9 f0       	breq	.+46     	; 0xdf70 <travel_path+0x46e>
    df42:	80 91 4f 03 	lds	r24, 0x034F
    df46:	90 91 50 03 	lds	r25, 0x0350
    df4a:	01 96       	adiw	r24, 0x01	; 1
    df4c:	8d 5a       	subi	r24, 0xAD	; 173
    df4e:	9c 4f       	sbci	r25, 0xFC	; 252
    df50:	fc 01       	movw	r30, r24
    df52:	80 81       	ld	r24, Z
    df54:	87 33       	cpi	r24, 0x37	; 55
    df56:	61 f0       	breq	.+24     	; 0xdf70 <travel_path+0x46e>
    df58:	80 91 4f 03 	lds	r24, 0x034F
    df5c:	90 91 50 03 	lds	r25, 0x0350
    df60:	01 96       	adiw	r24, 0x01	; 1
    df62:	8d 5a       	subi	r24, 0xAD	; 173
    df64:	9c 4f       	sbci	r25, 0xFC	; 252
    df66:	fc 01       	movw	r30, r24
    df68:	80 81       	ld	r24, Z
    df6a:	88 33       	cpi	r24, 0x38	; 56
    df6c:	09 f0       	breq	.+2      	; 0xdf70 <travel_path+0x46e>
    df6e:	a3 c6       	rjmp	.+3398   	; 0xecb6 <travel_path+0x11b4>
		{
			stop();
    df70:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			if(master_path[node+1]=='7'||master_path[node+1]=='6')// TO ALIGN TO NORTH SLANT LINE ONLY
    df74:	80 91 4f 03 	lds	r24, 0x034F
    df78:	90 91 50 03 	lds	r25, 0x0350
    df7c:	01 96       	adiw	r24, 0x01	; 1
    df7e:	8d 5a       	subi	r24, 0xAD	; 173
    df80:	9c 4f       	sbci	r25, 0xFC	; 252
    df82:	fc 01       	movw	r30, r24
    df84:	80 81       	ld	r24, Z
    df86:	87 33       	cpi	r24, 0x37	; 55
    df88:	61 f0       	breq	.+24     	; 0xdfa2 <travel_path+0x4a0>
    df8a:	80 91 4f 03 	lds	r24, 0x034F
    df8e:	90 91 50 03 	lds	r25, 0x0350
    df92:	01 96       	adiw	r24, 0x01	; 1
    df94:	8d 5a       	subi	r24, 0xAD	; 173
    df96:	9c 4f       	sbci	r25, 0xFC	; 252
    df98:	fc 01       	movw	r30, r24
    df9a:	80 81       	ld	r24, Z
    df9c:	86 33       	cpi	r24, 0x36	; 54
    df9e:	09 f0       	breq	.+2      	; 0xdfa2 <travel_path+0x4a0>
    dfa0:	87 c0       	rjmp	.+270    	; 0xe0b0 <travel_path+0x5ae>
			{
				forward_mm(65);
    dfa2:	81 e4       	ldi	r24, 0x41	; 65
    dfa4:	90 e0       	ldi	r25, 0x00	; 0
    dfa6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    dfaa:	80 e0       	ldi	r24, 0x00	; 0
    dfac:	90 e0       	ldi	r25, 0x00	; 0
    dfae:	a0 ea       	ldi	r26, 0xA0	; 160
    dfb0:	b1 e4       	ldi	r27, 0x41	; 65
    dfb2:	8b a7       	lds	r24, 0x7b
    dfb4:	9c a7       	lds	r25, 0x7c
    dfb6:	ad a7       	lds	r26, 0x7d
    dfb8:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    dfba:	6b a5       	lds	r22, 0x6b
    dfbc:	7c a5       	lds	r23, 0x6c
    dfbe:	8d a5       	lds	r24, 0x6d
    dfc0:	9e a5       	lds	r25, 0x6e
    dfc2:	26 e6       	ldi	r18, 0x66	; 102
    dfc4:	36 e6       	ldi	r19, 0x66	; 102
    dfc6:	46 e6       	ldi	r20, 0x66	; 102
    dfc8:	55 e4       	ldi	r21, 0x45	; 69
    dfca:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    dfce:	dc 01       	movw	r26, r24
    dfd0:	cb 01       	movw	r24, r22
    dfd2:	8f a7       	lds	r24, 0x7f
    dfd4:	98 ab       	sts	0x58, r25
    dfd6:	a9 ab       	sts	0x59, r26
    dfd8:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    dfda:	11 e0       	ldi	r17, 0x01	; 1
    dfdc:	6f a5       	lds	r22, 0x6f
    dfde:	78 a9       	sts	0x48, r23
    dfe0:	89 a9       	sts	0x49, r24
    dfe2:	9a a9       	sts	0x4a, r25
    dfe4:	20 e0       	ldi	r18, 0x00	; 0
    dfe6:	30 e0       	ldi	r19, 0x00	; 0
    dfe8:	40 e8       	ldi	r20, 0x80	; 128
    dfea:	5f e3       	ldi	r21, 0x3F	; 63
    dfec:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    dff0:	88 23       	and	r24, r24
    dff2:	0c f0       	brlt	.+2      	; 0xdff6 <travel_path+0x4f4>
    dff4:	10 e0       	ldi	r17, 0x00	; 0
    dff6:	11 23       	and	r17, r17
    dff8:	29 f0       	breq	.+10     	; 0xe004 <travel_path+0x502>
		__ticks = 1;
    dffa:	81 e0       	ldi	r24, 0x01	; 1
    dffc:	90 e0       	ldi	r25, 0x00	; 0
    dffe:	9c ab       	sts	0x5c, r25
    e000:	8b ab       	sts	0x5b, r24
    e002:	46 c0       	rjmp	.+140    	; 0xe090 <travel_path+0x58e>
	else if (__tmp > 65535)
    e004:	11 e0       	ldi	r17, 0x01	; 1
    e006:	6f a5       	lds	r22, 0x6f
    e008:	78 a9       	sts	0x48, r23
    e00a:	89 a9       	sts	0x49, r24
    e00c:	9a a9       	sts	0x4a, r25
    e00e:	20 e0       	ldi	r18, 0x00	; 0
    e010:	3f ef       	ldi	r19, 0xFF	; 255
    e012:	4f e7       	ldi	r20, 0x7F	; 127
    e014:	57 e4       	ldi	r21, 0x47	; 71
    e016:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e01a:	18 16       	cp	r1, r24
    e01c:	0c f0       	brlt	.+2      	; 0xe020 <travel_path+0x51e>
    e01e:	10 e0       	ldi	r17, 0x00	; 0
    e020:	11 23       	and	r17, r17
    e022:	61 f1       	breq	.+88     	; 0xe07c <travel_path+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e024:	6b a5       	lds	r22, 0x6b
    e026:	7c a5       	lds	r23, 0x6c
    e028:	8d a5       	lds	r24, 0x6d
    e02a:	9e a5       	lds	r25, 0x6e
    e02c:	20 e0       	ldi	r18, 0x00	; 0
    e02e:	30 e0       	ldi	r19, 0x00	; 0
    e030:	40 e2       	ldi	r20, 0x20	; 32
    e032:	51 e4       	ldi	r21, 0x41	; 65
    e034:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e038:	dc 01       	movw	r26, r24
    e03a:	cb 01       	movw	r24, r22
    e03c:	bc 01       	movw	r22, r24
    e03e:	cd 01       	movw	r24, r26
    e040:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e044:	dc 01       	movw	r26, r24
    e046:	cb 01       	movw	r24, r22
    e048:	9c ab       	sts	0x5c, r25
    e04a:	8b ab       	sts	0x5b, r24
    e04c:	12 c0       	rjmp	.+36     	; 0xe072 <travel_path+0x570>
    e04e:	80 e7       	ldi	r24, 0x70	; 112
    e050:	91 e0       	ldi	r25, 0x01	; 1
    e052:	9e ab       	sts	0x5e, r25
    e054:	8d ab       	sts	0x5d, r24
    e056:	8d a9       	sts	0x4d, r24
    e058:	9e a9       	sts	0x4e, r25
    e05a:	8c 01       	movw	r16, r24
    e05c:	c8 01       	movw	r24, r16
    e05e:	01 97       	sbiw	r24, 0x01	; 1
    e060:	f1 f7       	brne	.-4      	; 0xe05e <travel_path+0x55c>
    e062:	8c 01       	movw	r16, r24
    e064:	1e ab       	sts	0x5e, r17
    e066:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e068:	8b a9       	sts	0x4b, r24
    e06a:	9c a9       	sts	0x4c, r25
    e06c:	01 97       	sbiw	r24, 0x01	; 1
    e06e:	9c ab       	sts	0x5c, r25
    e070:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e072:	8b a9       	sts	0x4b, r24
    e074:	9c a9       	sts	0x4c, r25
    e076:	00 97       	sbiw	r24, 0x00	; 0
    e078:	51 f7       	brne	.-44     	; 0xe04e <travel_path+0x54c>
    e07a:	17 c0       	rjmp	.+46     	; 0xe0aa <travel_path+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e07c:	6f a5       	lds	r22, 0x6f
    e07e:	78 a9       	sts	0x48, r23
    e080:	89 a9       	sts	0x49, r24
    e082:	9a a9       	sts	0x4a, r25
    e084:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e088:	dc 01       	movw	r26, r24
    e08a:	cb 01       	movw	r24, r22
    e08c:	9c ab       	sts	0x5c, r25
    e08e:	8b ab       	sts	0x5b, r24
    e090:	8b a9       	sts	0x4b, r24
    e092:	9c a9       	sts	0x4c, r25
    e094:	98 af       	sts	0x78, r25
    e096:	8f ab       	sts	0x5f, r24
    e098:	8f a9       	sts	0x4f, r24
    e09a:	98 ad       	sts	0x68, r25
    e09c:	8c 01       	movw	r16, r24
    e09e:	f8 01       	movw	r30, r16
    e0a0:	31 97       	sbiw	r30, 0x01	; 1
    e0a2:	f1 f7       	brne	.-4      	; 0xe0a0 <travel_path+0x59e>
    e0a4:	8f 01       	movw	r16, r30
    e0a6:	18 af       	sts	0x78, r17
    e0a8:	0f ab       	sts	0x5f, r16
				_delay_ms(20);
				correct_right();
    e0aa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    e0ae:	db c5       	rjmp	.+2998   	; 0xec66 <travel_path+0x1164>
			}
			else if(master_path[node+1]=='8'){//if bot comes from right
    e0b0:	80 91 4f 03 	lds	r24, 0x034F
    e0b4:	90 91 50 03 	lds	r25, 0x0350
    e0b8:	01 96       	adiw	r24, 0x01	; 1
    e0ba:	8d 5a       	subi	r24, 0xAD	; 173
    e0bc:	9c 4f       	sbci	r25, 0xFC	; 252
    e0be:	fc 01       	movw	r30, r24
    e0c0:	80 81       	ld	r24, Z
    e0c2:	88 33       	cpi	r24, 0x38	; 56
    e0c4:	09 f0       	breq	.+2      	; 0xe0c8 <travel_path+0x5c6>
    e0c6:	70 c2       	rjmp	.+1248   	; 0xe5a8 <travel_path+0xaa6>
				stop();
    e0c8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    e0cc:	80 e0       	ldi	r24, 0x00	; 0
    e0ce:	90 e0       	ldi	r25, 0x00	; 0
    e0d0:	a0 ea       	ldi	r26, 0xA0	; 160
    e0d2:	b1 e4       	ldi	r27, 0x41	; 65
    e0d4:	89 af       	sts	0x79, r24
    e0d6:	9a af       	sts	0x7a, r25
    e0d8:	ab af       	sts	0x7b, r26
    e0da:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e0dc:	69 ad       	sts	0x69, r22
    e0de:	7a ad       	sts	0x6a, r23
    e0e0:	8b ad       	sts	0x6b, r24
    e0e2:	9c ad       	sts	0x6c, r25
    e0e4:	26 e6       	ldi	r18, 0x66	; 102
    e0e6:	36 e6       	ldi	r19, 0x66	; 102
    e0e8:	46 e6       	ldi	r20, 0x66	; 102
    e0ea:	55 e4       	ldi	r21, 0x45	; 69
    e0ec:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e0f0:	dc 01       	movw	r26, r24
    e0f2:	cb 01       	movw	r24, r22
    e0f4:	9e 01       	movw	r18, r28
    e0f6:	23 5c       	subi	r18, 0xC3	; 195
    e0f8:	3f 4f       	sbci	r19, 0xFF	; 255
    e0fa:	f9 01       	movw	r30, r18
    e0fc:	80 83       	st	Z, r24
    e0fe:	91 83       	std	Z+1, r25	; 0x01
    e100:	a2 83       	std	Z+2, r26	; 0x02
    e102:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e104:	11 e0       	ldi	r17, 0x01	; 1
    e106:	ce 01       	movw	r24, r28
    e108:	cd 96       	adiw	r24, 0x3d	; 61
    e10a:	fc 01       	movw	r30, r24
    e10c:	60 81       	ld	r22, Z
    e10e:	71 81       	ldd	r23, Z+1	; 0x01
    e110:	82 81       	ldd	r24, Z+2	; 0x02
    e112:	93 81       	ldd	r25, Z+3	; 0x03
    e114:	20 e0       	ldi	r18, 0x00	; 0
    e116:	30 e0       	ldi	r19, 0x00	; 0
    e118:	40 e8       	ldi	r20, 0x80	; 128
    e11a:	5f e3       	ldi	r21, 0x3F	; 63
    e11c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    e120:	88 23       	and	r24, r24
    e122:	0c f0       	brlt	.+2      	; 0xe126 <travel_path+0x624>
    e124:	10 e0       	ldi	r17, 0x00	; 0
    e126:	11 23       	and	r17, r17
    e128:	49 f0       	breq	.+18     	; 0xe13c <travel_path+0x63a>
		__ticks = 1;
    e12a:	ce 01       	movw	r24, r28
    e12c:	8f 5b       	subi	r24, 0xBF	; 191
    e12e:	9f 4f       	sbci	r25, 0xFF	; 255
    e130:	21 e0       	ldi	r18, 0x01	; 1
    e132:	30 e0       	ldi	r19, 0x00	; 0
    e134:	fc 01       	movw	r30, r24
    e136:	31 83       	std	Z+1, r19	; 0x01
    e138:	20 83       	st	Z, r18
    e13a:	6e c0       	rjmp	.+220    	; 0xe218 <travel_path+0x716>
	else if (__tmp > 65535)
    e13c:	11 e0       	ldi	r17, 0x01	; 1
    e13e:	ce 01       	movw	r24, r28
    e140:	cd 96       	adiw	r24, 0x3d	; 61
    e142:	fc 01       	movw	r30, r24
    e144:	60 81       	ld	r22, Z
    e146:	71 81       	ldd	r23, Z+1	; 0x01
    e148:	82 81       	ldd	r24, Z+2	; 0x02
    e14a:	93 81       	ldd	r25, Z+3	; 0x03
    e14c:	20 e0       	ldi	r18, 0x00	; 0
    e14e:	3f ef       	ldi	r19, 0xFF	; 255
    e150:	4f e7       	ldi	r20, 0x7F	; 127
    e152:	57 e4       	ldi	r21, 0x47	; 71
    e154:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e158:	18 16       	cp	r1, r24
    e15a:	0c f0       	brlt	.+2      	; 0xe15e <travel_path+0x65c>
    e15c:	10 e0       	ldi	r17, 0x00	; 0
    e15e:	11 23       	and	r17, r17
    e160:	09 f4       	brne	.+2      	; 0xe164 <travel_path+0x662>
    e162:	49 c0       	rjmp	.+146    	; 0xe1f6 <travel_path+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e164:	69 ad       	sts	0x69, r22
    e166:	7a ad       	sts	0x6a, r23
    e168:	8b ad       	sts	0x6b, r24
    e16a:	9c ad       	sts	0x6c, r25
    e16c:	20 e0       	ldi	r18, 0x00	; 0
    e16e:	30 e0       	ldi	r19, 0x00	; 0
    e170:	40 e2       	ldi	r20, 0x20	; 32
    e172:	51 e4       	ldi	r21, 0x41	; 65
    e174:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e178:	dc 01       	movw	r26, r24
    e17a:	cb 01       	movw	r24, r22
    e17c:	8e 01       	movw	r16, r28
    e17e:	0f 5b       	subi	r16, 0xBF	; 191
    e180:	1f 4f       	sbci	r17, 0xFF	; 255
    e182:	bc 01       	movw	r22, r24
    e184:	cd 01       	movw	r24, r26
    e186:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e18a:	dc 01       	movw	r26, r24
    e18c:	cb 01       	movw	r24, r22
    e18e:	f8 01       	movw	r30, r16
    e190:	91 83       	std	Z+1, r25	; 0x01
    e192:	80 83       	st	Z, r24
    e194:	27 c0       	rjmp	.+78     	; 0xe1e4 <travel_path+0x6e2>
    e196:	ce 01       	movw	r24, r28
    e198:	8d 5b       	subi	r24, 0xBD	; 189
    e19a:	9f 4f       	sbci	r25, 0xFF	; 255
    e19c:	20 e7       	ldi	r18, 0x70	; 112
    e19e:	31 e0       	ldi	r19, 0x01	; 1
    e1a0:	fc 01       	movw	r30, r24
    e1a2:	31 83       	std	Z+1, r19	; 0x01
    e1a4:	20 83       	st	Z, r18
    e1a6:	ce 01       	movw	r24, r28
    e1a8:	8d 5b       	subi	r24, 0xBD	; 189
    e1aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e1ac:	fc 01       	movw	r30, r24
    e1ae:	80 81       	ld	r24, Z
    e1b0:	91 81       	ldd	r25, Z+1	; 0x01
    e1b2:	8c 01       	movw	r16, r24
    e1b4:	c8 01       	movw	r24, r16
    e1b6:	01 97       	sbiw	r24, 0x01	; 1
    e1b8:	f1 f7       	brne	.-4      	; 0xe1b6 <travel_path+0x6b4>
    e1ba:	8c 01       	movw	r16, r24
    e1bc:	ce 01       	movw	r24, r28
    e1be:	8d 5b       	subi	r24, 0xBD	; 189
    e1c0:	9f 4f       	sbci	r25, 0xFF	; 255
    e1c2:	fc 01       	movw	r30, r24
    e1c4:	11 83       	std	Z+1, r17	; 0x01
    e1c6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e1c8:	ce 01       	movw	r24, r28
    e1ca:	8f 5b       	subi	r24, 0xBF	; 191
    e1cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e1ce:	9e 01       	movw	r18, r28
    e1d0:	2f 5b       	subi	r18, 0xBF	; 191
    e1d2:	3f 4f       	sbci	r19, 0xFF	; 255
    e1d4:	f9 01       	movw	r30, r18
    e1d6:	20 81       	ld	r18, Z
    e1d8:	31 81       	ldd	r19, Z+1	; 0x01
    e1da:	21 50       	subi	r18, 0x01	; 1
    e1dc:	30 40       	sbci	r19, 0x00	; 0
    e1de:	fc 01       	movw	r30, r24
    e1e0:	31 83       	std	Z+1, r19	; 0x01
    e1e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e1e4:	ce 01       	movw	r24, r28
    e1e6:	8f 5b       	subi	r24, 0xBF	; 191
    e1e8:	9f 4f       	sbci	r25, 0xFF	; 255
    e1ea:	fc 01       	movw	r30, r24
    e1ec:	80 81       	ld	r24, Z
    e1ee:	91 81       	ldd	r25, Z+1	; 0x01
    e1f0:	00 97       	sbiw	r24, 0x00	; 0
    e1f2:	89 f6       	brne	.-94     	; 0xe196 <travel_path+0x694>
    e1f4:	2e c0       	rjmp	.+92     	; 0xe252 <travel_path+0x750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e1f6:	8e 01       	movw	r16, r28
    e1f8:	0f 5b       	subi	r16, 0xBF	; 191
    e1fa:	1f 4f       	sbci	r17, 0xFF	; 255
    e1fc:	ce 01       	movw	r24, r28
    e1fe:	cd 96       	adiw	r24, 0x3d	; 61
    e200:	fc 01       	movw	r30, r24
    e202:	60 81       	ld	r22, Z
    e204:	71 81       	ldd	r23, Z+1	; 0x01
    e206:	82 81       	ldd	r24, Z+2	; 0x02
    e208:	93 81       	ldd	r25, Z+3	; 0x03
    e20a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e20e:	dc 01       	movw	r26, r24
    e210:	cb 01       	movw	r24, r22
    e212:	f8 01       	movw	r30, r16
    e214:	91 83       	std	Z+1, r25	; 0x01
    e216:	80 83       	st	Z, r24
    e218:	ce 01       	movw	r24, r28
    e21a:	8b 5b       	subi	r24, 0xBB	; 187
    e21c:	9f 4f       	sbci	r25, 0xFF	; 255
    e21e:	9e 01       	movw	r18, r28
    e220:	2f 5b       	subi	r18, 0xBF	; 191
    e222:	3f 4f       	sbci	r19, 0xFF	; 255
    e224:	f9 01       	movw	r30, r18
    e226:	20 81       	ld	r18, Z
    e228:	31 81       	ldd	r19, Z+1	; 0x01
    e22a:	fc 01       	movw	r30, r24
    e22c:	31 83       	std	Z+1, r19	; 0x01
    e22e:	20 83       	st	Z, r18
    e230:	ce 01       	movw	r24, r28
    e232:	8b 5b       	subi	r24, 0xBB	; 187
    e234:	9f 4f       	sbci	r25, 0xFF	; 255
    e236:	fc 01       	movw	r30, r24
    e238:	80 81       	ld	r24, Z
    e23a:	91 81       	ldd	r25, Z+1	; 0x01
    e23c:	8c 01       	movw	r16, r24
    e23e:	c8 01       	movw	r24, r16
    e240:	01 97       	sbiw	r24, 0x01	; 1
    e242:	f1 f7       	brne	.-4      	; 0xe240 <travel_path+0x73e>
    e244:	8c 01       	movw	r16, r24
    e246:	ce 01       	movw	r24, r28
    e248:	8b 5b       	subi	r24, 0xBB	; 187
    e24a:	9f 4f       	sbci	r25, 0xFF	; 255
    e24c:	fc 01       	movw	r30, r24
    e24e:	11 83       	std	Z+1, r17	; 0x01
    e250:	00 83       	st	Z, r16
				_delay_ms(20);
				forward_mm(160);
    e252:	80 ea       	ldi	r24, 0xA0	; 160
    e254:	90 e0       	ldi	r25, 0x00	; 0
    e256:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    e25a:	9e 01       	movw	r18, r28
    e25c:	29 5b       	subi	r18, 0xB9	; 185
    e25e:	3f 4f       	sbci	r19, 0xFF	; 255
    e260:	80 e0       	ldi	r24, 0x00	; 0
    e262:	90 e0       	ldi	r25, 0x00	; 0
    e264:	a0 ea       	ldi	r26, 0xA0	; 160
    e266:	b1 e4       	ldi	r27, 0x41	; 65
    e268:	f9 01       	movw	r30, r18
    e26a:	80 83       	st	Z, r24
    e26c:	91 83       	std	Z+1, r25	; 0x01
    e26e:	a2 83       	std	Z+2, r26	; 0x02
    e270:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e272:	8e 01       	movw	r16, r28
    e274:	05 5b       	subi	r16, 0xB5	; 181
    e276:	1f 4f       	sbci	r17, 0xFF	; 255
    e278:	ce 01       	movw	r24, r28
    e27a:	89 5b       	subi	r24, 0xB9	; 185
    e27c:	9f 4f       	sbci	r25, 0xFF	; 255
    e27e:	fc 01       	movw	r30, r24
    e280:	60 81       	ld	r22, Z
    e282:	71 81       	ldd	r23, Z+1	; 0x01
    e284:	82 81       	ldd	r24, Z+2	; 0x02
    e286:	93 81       	ldd	r25, Z+3	; 0x03
    e288:	26 e6       	ldi	r18, 0x66	; 102
    e28a:	36 e6       	ldi	r19, 0x66	; 102
    e28c:	46 e6       	ldi	r20, 0x66	; 102
    e28e:	55 e4       	ldi	r21, 0x45	; 69
    e290:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e294:	dc 01       	movw	r26, r24
    e296:	cb 01       	movw	r24, r22
    e298:	f8 01       	movw	r30, r16
    e29a:	80 83       	st	Z, r24
    e29c:	91 83       	std	Z+1, r25	; 0x01
    e29e:	a2 83       	std	Z+2, r26	; 0x02
    e2a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e2a2:	ce 01       	movw	r24, r28
    e2a4:	85 5b       	subi	r24, 0xB5	; 181
    e2a6:	9f 4f       	sbci	r25, 0xFF	; 255
    e2a8:	11 e0       	ldi	r17, 0x01	; 1
    e2aa:	fc 01       	movw	r30, r24
    e2ac:	60 81       	ld	r22, Z
    e2ae:	71 81       	ldd	r23, Z+1	; 0x01
    e2b0:	82 81       	ldd	r24, Z+2	; 0x02
    e2b2:	93 81       	ldd	r25, Z+3	; 0x03
    e2b4:	20 e0       	ldi	r18, 0x00	; 0
    e2b6:	30 e0       	ldi	r19, 0x00	; 0
    e2b8:	40 e8       	ldi	r20, 0x80	; 128
    e2ba:	5f e3       	ldi	r21, 0x3F	; 63
    e2bc:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    e2c0:	88 23       	and	r24, r24
    e2c2:	0c f0       	brlt	.+2      	; 0xe2c6 <travel_path+0x7c4>
    e2c4:	10 e0       	ldi	r17, 0x00	; 0
    e2c6:	11 23       	and	r17, r17
    e2c8:	49 f0       	breq	.+18     	; 0xe2dc <travel_path+0x7da>
		__ticks = 1;
    e2ca:	ce 01       	movw	r24, r28
    e2cc:	81 5b       	subi	r24, 0xB1	; 177
    e2ce:	9f 4f       	sbci	r25, 0xFF	; 255
    e2d0:	21 e0       	ldi	r18, 0x01	; 1
    e2d2:	30 e0       	ldi	r19, 0x00	; 0
    e2d4:	fc 01       	movw	r30, r24
    e2d6:	31 83       	std	Z+1, r19	; 0x01
    e2d8:	20 83       	st	Z, r18
    e2da:	74 c0       	rjmp	.+232    	; 0xe3c4 <travel_path+0x8c2>
	else if (__tmp > 65535)
    e2dc:	ce 01       	movw	r24, r28
    e2de:	85 5b       	subi	r24, 0xB5	; 181
    e2e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e2e2:	11 e0       	ldi	r17, 0x01	; 1
    e2e4:	fc 01       	movw	r30, r24
    e2e6:	60 81       	ld	r22, Z
    e2e8:	71 81       	ldd	r23, Z+1	; 0x01
    e2ea:	82 81       	ldd	r24, Z+2	; 0x02
    e2ec:	93 81       	ldd	r25, Z+3	; 0x03
    e2ee:	20 e0       	ldi	r18, 0x00	; 0
    e2f0:	3f ef       	ldi	r19, 0xFF	; 255
    e2f2:	4f e7       	ldi	r20, 0x7F	; 127
    e2f4:	57 e4       	ldi	r21, 0x47	; 71
    e2f6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e2fa:	18 16       	cp	r1, r24
    e2fc:	0c f0       	brlt	.+2      	; 0xe300 <travel_path+0x7fe>
    e2fe:	10 e0       	ldi	r17, 0x00	; 0
    e300:	11 23       	and	r17, r17
    e302:	09 f4       	brne	.+2      	; 0xe306 <travel_path+0x804>
    e304:	4d c0       	rjmp	.+154    	; 0xe3a0 <travel_path+0x89e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e306:	ce 01       	movw	r24, r28
    e308:	89 5b       	subi	r24, 0xB9	; 185
    e30a:	9f 4f       	sbci	r25, 0xFF	; 255
    e30c:	fc 01       	movw	r30, r24
    e30e:	60 81       	ld	r22, Z
    e310:	71 81       	ldd	r23, Z+1	; 0x01
    e312:	82 81       	ldd	r24, Z+2	; 0x02
    e314:	93 81       	ldd	r25, Z+3	; 0x03
    e316:	20 e0       	ldi	r18, 0x00	; 0
    e318:	30 e0       	ldi	r19, 0x00	; 0
    e31a:	40 e2       	ldi	r20, 0x20	; 32
    e31c:	51 e4       	ldi	r21, 0x41	; 65
    e31e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e322:	dc 01       	movw	r26, r24
    e324:	cb 01       	movw	r24, r22
    e326:	8e 01       	movw	r16, r28
    e328:	01 5b       	subi	r16, 0xB1	; 177
    e32a:	1f 4f       	sbci	r17, 0xFF	; 255
    e32c:	bc 01       	movw	r22, r24
    e32e:	cd 01       	movw	r24, r26
    e330:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e334:	dc 01       	movw	r26, r24
    e336:	cb 01       	movw	r24, r22
    e338:	f8 01       	movw	r30, r16
    e33a:	91 83       	std	Z+1, r25	; 0x01
    e33c:	80 83       	st	Z, r24
    e33e:	27 c0       	rjmp	.+78     	; 0xe38e <travel_path+0x88c>
    e340:	ce 01       	movw	r24, r28
    e342:	8f 5a       	subi	r24, 0xAF	; 175
    e344:	9f 4f       	sbci	r25, 0xFF	; 255
    e346:	20 e7       	ldi	r18, 0x70	; 112
    e348:	31 e0       	ldi	r19, 0x01	; 1
    e34a:	fc 01       	movw	r30, r24
    e34c:	31 83       	std	Z+1, r19	; 0x01
    e34e:	20 83       	st	Z, r18
    e350:	ce 01       	movw	r24, r28
    e352:	8f 5a       	subi	r24, 0xAF	; 175
    e354:	9f 4f       	sbci	r25, 0xFF	; 255
    e356:	fc 01       	movw	r30, r24
    e358:	80 81       	ld	r24, Z
    e35a:	91 81       	ldd	r25, Z+1	; 0x01
    e35c:	8c 01       	movw	r16, r24
    e35e:	c8 01       	movw	r24, r16
    e360:	01 97       	sbiw	r24, 0x01	; 1
    e362:	f1 f7       	brne	.-4      	; 0xe360 <travel_path+0x85e>
    e364:	8c 01       	movw	r16, r24
    e366:	ce 01       	movw	r24, r28
    e368:	8f 5a       	subi	r24, 0xAF	; 175
    e36a:	9f 4f       	sbci	r25, 0xFF	; 255
    e36c:	fc 01       	movw	r30, r24
    e36e:	11 83       	std	Z+1, r17	; 0x01
    e370:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e372:	ce 01       	movw	r24, r28
    e374:	81 5b       	subi	r24, 0xB1	; 177
    e376:	9f 4f       	sbci	r25, 0xFF	; 255
    e378:	9e 01       	movw	r18, r28
    e37a:	21 5b       	subi	r18, 0xB1	; 177
    e37c:	3f 4f       	sbci	r19, 0xFF	; 255
    e37e:	f9 01       	movw	r30, r18
    e380:	20 81       	ld	r18, Z
    e382:	31 81       	ldd	r19, Z+1	; 0x01
    e384:	21 50       	subi	r18, 0x01	; 1
    e386:	30 40       	sbci	r19, 0x00	; 0
    e388:	fc 01       	movw	r30, r24
    e38a:	31 83       	std	Z+1, r19	; 0x01
    e38c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e38e:	ce 01       	movw	r24, r28
    e390:	81 5b       	subi	r24, 0xB1	; 177
    e392:	9f 4f       	sbci	r25, 0xFF	; 255
    e394:	fc 01       	movw	r30, r24
    e396:	80 81       	ld	r24, Z
    e398:	91 81       	ldd	r25, Z+1	; 0x01
    e39a:	00 97       	sbiw	r24, 0x00	; 0
    e39c:	89 f6       	brne	.-94     	; 0xe340 <travel_path+0x83e>
    e39e:	2f c0       	rjmp	.+94     	; 0xe3fe <travel_path+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e3a0:	8e 01       	movw	r16, r28
    e3a2:	01 5b       	subi	r16, 0xB1	; 177
    e3a4:	1f 4f       	sbci	r17, 0xFF	; 255
    e3a6:	ce 01       	movw	r24, r28
    e3a8:	85 5b       	subi	r24, 0xB5	; 181
    e3aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e3ac:	fc 01       	movw	r30, r24
    e3ae:	60 81       	ld	r22, Z
    e3b0:	71 81       	ldd	r23, Z+1	; 0x01
    e3b2:	82 81       	ldd	r24, Z+2	; 0x02
    e3b4:	93 81       	ldd	r25, Z+3	; 0x03
    e3b6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e3ba:	dc 01       	movw	r26, r24
    e3bc:	cb 01       	movw	r24, r22
    e3be:	f8 01       	movw	r30, r16
    e3c0:	91 83       	std	Z+1, r25	; 0x01
    e3c2:	80 83       	st	Z, r24
    e3c4:	ce 01       	movw	r24, r28
    e3c6:	8d 5a       	subi	r24, 0xAD	; 173
    e3c8:	9f 4f       	sbci	r25, 0xFF	; 255
    e3ca:	9e 01       	movw	r18, r28
    e3cc:	21 5b       	subi	r18, 0xB1	; 177
    e3ce:	3f 4f       	sbci	r19, 0xFF	; 255
    e3d0:	f9 01       	movw	r30, r18
    e3d2:	20 81       	ld	r18, Z
    e3d4:	31 81       	ldd	r19, Z+1	; 0x01
    e3d6:	fc 01       	movw	r30, r24
    e3d8:	31 83       	std	Z+1, r19	; 0x01
    e3da:	20 83       	st	Z, r18
    e3dc:	ce 01       	movw	r24, r28
    e3de:	8d 5a       	subi	r24, 0xAD	; 173
    e3e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e3e2:	fc 01       	movw	r30, r24
    e3e4:	80 81       	ld	r24, Z
    e3e6:	91 81       	ldd	r25, Z+1	; 0x01
    e3e8:	8c 01       	movw	r16, r24
    e3ea:	c8 01       	movw	r24, r16
    e3ec:	01 97       	sbiw	r24, 0x01	; 1
    e3ee:	f1 f7       	brne	.-4      	; 0xe3ec <travel_path+0x8ea>
    e3f0:	8c 01       	movw	r16, r24
    e3f2:	ce 01       	movw	r24, r28
    e3f4:	8d 5a       	subi	r24, 0xAD	; 173
    e3f6:	9f 4f       	sbci	r25, 0xFF	; 255
    e3f8:	fc 01       	movw	r30, r24
    e3fa:	11 83       	std	Z+1, r17	; 0x01
    e3fc:	00 83       	st	Z, r16
				_delay_ms(20);
				 spl_right2();
    e3fe:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    e402:	9e 01       	movw	r18, r28
    e404:	2b 5a       	subi	r18, 0xAB	; 171
    e406:	3f 4f       	sbci	r19, 0xFF	; 255
    e408:	80 e0       	ldi	r24, 0x00	; 0
    e40a:	90 e0       	ldi	r25, 0x00	; 0
    e40c:	a0 ea       	ldi	r26, 0xA0	; 160
    e40e:	b1 e4       	ldi	r27, 0x41	; 65
    e410:	f9 01       	movw	r30, r18
    e412:	80 83       	st	Z, r24
    e414:	91 83       	std	Z+1, r25	; 0x01
    e416:	a2 83       	std	Z+2, r26	; 0x02
    e418:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e41a:	8e 01       	movw	r16, r28
    e41c:	07 5a       	subi	r16, 0xA7	; 167
    e41e:	1f 4f       	sbci	r17, 0xFF	; 255
    e420:	ce 01       	movw	r24, r28
    e422:	8b 5a       	subi	r24, 0xAB	; 171
    e424:	9f 4f       	sbci	r25, 0xFF	; 255
    e426:	fc 01       	movw	r30, r24
    e428:	60 81       	ld	r22, Z
    e42a:	71 81       	ldd	r23, Z+1	; 0x01
    e42c:	82 81       	ldd	r24, Z+2	; 0x02
    e42e:	93 81       	ldd	r25, Z+3	; 0x03
    e430:	26 e6       	ldi	r18, 0x66	; 102
    e432:	36 e6       	ldi	r19, 0x66	; 102
    e434:	46 e6       	ldi	r20, 0x66	; 102
    e436:	55 e4       	ldi	r21, 0x45	; 69
    e438:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e43c:	dc 01       	movw	r26, r24
    e43e:	cb 01       	movw	r24, r22
    e440:	f8 01       	movw	r30, r16
    e442:	80 83       	st	Z, r24
    e444:	91 83       	std	Z+1, r25	; 0x01
    e446:	a2 83       	std	Z+2, r26	; 0x02
    e448:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e44a:	ce 01       	movw	r24, r28
    e44c:	87 5a       	subi	r24, 0xA7	; 167
    e44e:	9f 4f       	sbci	r25, 0xFF	; 255
    e450:	11 e0       	ldi	r17, 0x01	; 1
    e452:	fc 01       	movw	r30, r24
    e454:	60 81       	ld	r22, Z
    e456:	71 81       	ldd	r23, Z+1	; 0x01
    e458:	82 81       	ldd	r24, Z+2	; 0x02
    e45a:	93 81       	ldd	r25, Z+3	; 0x03
    e45c:	20 e0       	ldi	r18, 0x00	; 0
    e45e:	30 e0       	ldi	r19, 0x00	; 0
    e460:	40 e8       	ldi	r20, 0x80	; 128
    e462:	5f e3       	ldi	r21, 0x3F	; 63
    e464:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    e468:	88 23       	and	r24, r24
    e46a:	0c f0       	brlt	.+2      	; 0xe46e <travel_path+0x96c>
    e46c:	10 e0       	ldi	r17, 0x00	; 0
    e46e:	11 23       	and	r17, r17
    e470:	49 f0       	breq	.+18     	; 0xe484 <travel_path+0x982>
		__ticks = 1;
    e472:	ce 01       	movw	r24, r28
    e474:	83 5a       	subi	r24, 0xA3	; 163
    e476:	9f 4f       	sbci	r25, 0xFF	; 255
    e478:	21 e0       	ldi	r18, 0x01	; 1
    e47a:	30 e0       	ldi	r19, 0x00	; 0
    e47c:	fc 01       	movw	r30, r24
    e47e:	31 83       	std	Z+1, r19	; 0x01
    e480:	20 83       	st	Z, r18
    e482:	74 c0       	rjmp	.+232    	; 0xe56c <travel_path+0xa6a>
	else if (__tmp > 65535)
    e484:	ce 01       	movw	r24, r28
    e486:	87 5a       	subi	r24, 0xA7	; 167
    e488:	9f 4f       	sbci	r25, 0xFF	; 255
    e48a:	11 e0       	ldi	r17, 0x01	; 1
    e48c:	fc 01       	movw	r30, r24
    e48e:	60 81       	ld	r22, Z
    e490:	71 81       	ldd	r23, Z+1	; 0x01
    e492:	82 81       	ldd	r24, Z+2	; 0x02
    e494:	93 81       	ldd	r25, Z+3	; 0x03
    e496:	20 e0       	ldi	r18, 0x00	; 0
    e498:	3f ef       	ldi	r19, 0xFF	; 255
    e49a:	4f e7       	ldi	r20, 0x7F	; 127
    e49c:	57 e4       	ldi	r21, 0x47	; 71
    e49e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e4a2:	18 16       	cp	r1, r24
    e4a4:	0c f0       	brlt	.+2      	; 0xe4a8 <travel_path+0x9a6>
    e4a6:	10 e0       	ldi	r17, 0x00	; 0
    e4a8:	11 23       	and	r17, r17
    e4aa:	09 f4       	brne	.+2      	; 0xe4ae <travel_path+0x9ac>
    e4ac:	4d c0       	rjmp	.+154    	; 0xe548 <travel_path+0xa46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e4ae:	ce 01       	movw	r24, r28
    e4b0:	8b 5a       	subi	r24, 0xAB	; 171
    e4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    e4b4:	fc 01       	movw	r30, r24
    e4b6:	60 81       	ld	r22, Z
    e4b8:	71 81       	ldd	r23, Z+1	; 0x01
    e4ba:	82 81       	ldd	r24, Z+2	; 0x02
    e4bc:	93 81       	ldd	r25, Z+3	; 0x03
    e4be:	20 e0       	ldi	r18, 0x00	; 0
    e4c0:	30 e0       	ldi	r19, 0x00	; 0
    e4c2:	40 e2       	ldi	r20, 0x20	; 32
    e4c4:	51 e4       	ldi	r21, 0x41	; 65
    e4c6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e4ca:	dc 01       	movw	r26, r24
    e4cc:	cb 01       	movw	r24, r22
    e4ce:	8e 01       	movw	r16, r28
    e4d0:	03 5a       	subi	r16, 0xA3	; 163
    e4d2:	1f 4f       	sbci	r17, 0xFF	; 255
    e4d4:	bc 01       	movw	r22, r24
    e4d6:	cd 01       	movw	r24, r26
    e4d8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e4dc:	dc 01       	movw	r26, r24
    e4de:	cb 01       	movw	r24, r22
    e4e0:	f8 01       	movw	r30, r16
    e4e2:	91 83       	std	Z+1, r25	; 0x01
    e4e4:	80 83       	st	Z, r24
    e4e6:	27 c0       	rjmp	.+78     	; 0xe536 <travel_path+0xa34>
    e4e8:	ce 01       	movw	r24, r28
    e4ea:	81 5a       	subi	r24, 0xA1	; 161
    e4ec:	9f 4f       	sbci	r25, 0xFF	; 255
    e4ee:	20 e7       	ldi	r18, 0x70	; 112
    e4f0:	31 e0       	ldi	r19, 0x01	; 1
    e4f2:	fc 01       	movw	r30, r24
    e4f4:	31 83       	std	Z+1, r19	; 0x01
    e4f6:	20 83       	st	Z, r18
    e4f8:	ce 01       	movw	r24, r28
    e4fa:	81 5a       	subi	r24, 0xA1	; 161
    e4fc:	9f 4f       	sbci	r25, 0xFF	; 255
    e4fe:	fc 01       	movw	r30, r24
    e500:	80 81       	ld	r24, Z
    e502:	91 81       	ldd	r25, Z+1	; 0x01
    e504:	8c 01       	movw	r16, r24
    e506:	c8 01       	movw	r24, r16
    e508:	01 97       	sbiw	r24, 0x01	; 1
    e50a:	f1 f7       	brne	.-4      	; 0xe508 <travel_path+0xa06>
    e50c:	8c 01       	movw	r16, r24
    e50e:	ce 01       	movw	r24, r28
    e510:	81 5a       	subi	r24, 0xA1	; 161
    e512:	9f 4f       	sbci	r25, 0xFF	; 255
    e514:	fc 01       	movw	r30, r24
    e516:	11 83       	std	Z+1, r17	; 0x01
    e518:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e51a:	ce 01       	movw	r24, r28
    e51c:	83 5a       	subi	r24, 0xA3	; 163
    e51e:	9f 4f       	sbci	r25, 0xFF	; 255
    e520:	9e 01       	movw	r18, r28
    e522:	23 5a       	subi	r18, 0xA3	; 163
    e524:	3f 4f       	sbci	r19, 0xFF	; 255
    e526:	f9 01       	movw	r30, r18
    e528:	20 81       	ld	r18, Z
    e52a:	31 81       	ldd	r19, Z+1	; 0x01
    e52c:	21 50       	subi	r18, 0x01	; 1
    e52e:	30 40       	sbci	r19, 0x00	; 0
    e530:	fc 01       	movw	r30, r24
    e532:	31 83       	std	Z+1, r19	; 0x01
    e534:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e536:	ce 01       	movw	r24, r28
    e538:	83 5a       	subi	r24, 0xA3	; 163
    e53a:	9f 4f       	sbci	r25, 0xFF	; 255
    e53c:	fc 01       	movw	r30, r24
    e53e:	80 81       	ld	r24, Z
    e540:	91 81       	ldd	r25, Z+1	; 0x01
    e542:	00 97       	sbiw	r24, 0x00	; 0
    e544:	89 f6       	brne	.-94     	; 0xe4e8 <travel_path+0x9e6>
    e546:	8f c3       	rjmp	.+1822   	; 0xec66 <travel_path+0x1164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e548:	8e 01       	movw	r16, r28
    e54a:	03 5a       	subi	r16, 0xA3	; 163
    e54c:	1f 4f       	sbci	r17, 0xFF	; 255
    e54e:	ce 01       	movw	r24, r28
    e550:	87 5a       	subi	r24, 0xA7	; 167
    e552:	9f 4f       	sbci	r25, 0xFF	; 255
    e554:	fc 01       	movw	r30, r24
    e556:	60 81       	ld	r22, Z
    e558:	71 81       	ldd	r23, Z+1	; 0x01
    e55a:	82 81       	ldd	r24, Z+2	; 0x02
    e55c:	93 81       	ldd	r25, Z+3	; 0x03
    e55e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e562:	dc 01       	movw	r26, r24
    e564:	cb 01       	movw	r24, r22
    e566:	f8 01       	movw	r30, r16
    e568:	91 83       	std	Z+1, r25	; 0x01
    e56a:	80 83       	st	Z, r24
    e56c:	ce 01       	movw	r24, r28
    e56e:	8f 59       	subi	r24, 0x9F	; 159
    e570:	9f 4f       	sbci	r25, 0xFF	; 255
    e572:	9e 01       	movw	r18, r28
    e574:	23 5a       	subi	r18, 0xA3	; 163
    e576:	3f 4f       	sbci	r19, 0xFF	; 255
    e578:	f9 01       	movw	r30, r18
    e57a:	20 81       	ld	r18, Z
    e57c:	31 81       	ldd	r19, Z+1	; 0x01
    e57e:	fc 01       	movw	r30, r24
    e580:	31 83       	std	Z+1, r19	; 0x01
    e582:	20 83       	st	Z, r18
    e584:	ce 01       	movw	r24, r28
    e586:	8f 59       	subi	r24, 0x9F	; 159
    e588:	9f 4f       	sbci	r25, 0xFF	; 255
    e58a:	fc 01       	movw	r30, r24
    e58c:	80 81       	ld	r24, Z
    e58e:	91 81       	ldd	r25, Z+1	; 0x01
    e590:	8c 01       	movw	r16, r24
    e592:	c8 01       	movw	r24, r16
    e594:	01 97       	sbiw	r24, 0x01	; 1
    e596:	f1 f7       	brne	.-4      	; 0xe594 <travel_path+0xa92>
    e598:	8c 01       	movw	r16, r24
    e59a:	ce 01       	movw	r24, r28
    e59c:	8f 59       	subi	r24, 0x9F	; 159
    e59e:	9f 4f       	sbci	r25, 0xFF	; 255
    e5a0:	fc 01       	movw	r30, r24
    e5a2:	11 83       	std	Z+1, r17	; 0x01
    e5a4:	00 83       	st	Z, r16
    e5a6:	5f c3       	rjmp	.+1726   	; 0xec66 <travel_path+0x1164>
				_delay_ms(20);
			}
			else if(master_path[node+1] == '3')
    e5a8:	80 91 4f 03 	lds	r24, 0x034F
    e5ac:	90 91 50 03 	lds	r25, 0x0350
    e5b0:	01 96       	adiw	r24, 0x01	; 1
    e5b2:	8d 5a       	subi	r24, 0xAD	; 173
    e5b4:	9c 4f       	sbci	r25, 0xFC	; 252
    e5b6:	fc 01       	movw	r30, r24
    e5b8:	80 81       	ld	r24, Z
    e5ba:	83 33       	cpi	r24, 0x33	; 51
    e5bc:	09 f0       	breq	.+2      	; 0xe5c0 <travel_path+0xabe>
    e5be:	7f c2       	rjmp	.+1278   	; 0xeabe <travel_path+0xfbc>
			{
				stop();
    e5c0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    e5c4:	9e 01       	movw	r18, r28
    e5c6:	2d 59       	subi	r18, 0x9D	; 157
    e5c8:	3f 4f       	sbci	r19, 0xFF	; 255
    e5ca:	80 e0       	ldi	r24, 0x00	; 0
    e5cc:	90 e0       	ldi	r25, 0x00	; 0
    e5ce:	a0 ea       	ldi	r26, 0xA0	; 160
    e5d0:	b1 e4       	ldi	r27, 0x41	; 65
    e5d2:	f9 01       	movw	r30, r18
    e5d4:	80 83       	st	Z, r24
    e5d6:	91 83       	std	Z+1, r25	; 0x01
    e5d8:	a2 83       	std	Z+2, r26	; 0x02
    e5da:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e5dc:	8e 01       	movw	r16, r28
    e5de:	09 59       	subi	r16, 0x99	; 153
    e5e0:	1f 4f       	sbci	r17, 0xFF	; 255
    e5e2:	ce 01       	movw	r24, r28
    e5e4:	8d 59       	subi	r24, 0x9D	; 157
    e5e6:	9f 4f       	sbci	r25, 0xFF	; 255
    e5e8:	fc 01       	movw	r30, r24
    e5ea:	60 81       	ld	r22, Z
    e5ec:	71 81       	ldd	r23, Z+1	; 0x01
    e5ee:	82 81       	ldd	r24, Z+2	; 0x02
    e5f0:	93 81       	ldd	r25, Z+3	; 0x03
    e5f2:	26 e6       	ldi	r18, 0x66	; 102
    e5f4:	36 e6       	ldi	r19, 0x66	; 102
    e5f6:	46 e6       	ldi	r20, 0x66	; 102
    e5f8:	55 e4       	ldi	r21, 0x45	; 69
    e5fa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e5fe:	dc 01       	movw	r26, r24
    e600:	cb 01       	movw	r24, r22
    e602:	f8 01       	movw	r30, r16
    e604:	80 83       	st	Z, r24
    e606:	91 83       	std	Z+1, r25	; 0x01
    e608:	a2 83       	std	Z+2, r26	; 0x02
    e60a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e60c:	ce 01       	movw	r24, r28
    e60e:	89 59       	subi	r24, 0x99	; 153
    e610:	9f 4f       	sbci	r25, 0xFF	; 255
    e612:	11 e0       	ldi	r17, 0x01	; 1
    e614:	fc 01       	movw	r30, r24
    e616:	60 81       	ld	r22, Z
    e618:	71 81       	ldd	r23, Z+1	; 0x01
    e61a:	82 81       	ldd	r24, Z+2	; 0x02
    e61c:	93 81       	ldd	r25, Z+3	; 0x03
    e61e:	20 e0       	ldi	r18, 0x00	; 0
    e620:	30 e0       	ldi	r19, 0x00	; 0
    e622:	40 e8       	ldi	r20, 0x80	; 128
    e624:	5f e3       	ldi	r21, 0x3F	; 63
    e626:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    e62a:	88 23       	and	r24, r24
    e62c:	0c f0       	brlt	.+2      	; 0xe630 <travel_path+0xb2e>
    e62e:	10 e0       	ldi	r17, 0x00	; 0
    e630:	11 23       	and	r17, r17
    e632:	49 f0       	breq	.+18     	; 0xe646 <travel_path+0xb44>
		__ticks = 1;
    e634:	ce 01       	movw	r24, r28
    e636:	85 59       	subi	r24, 0x95	; 149
    e638:	9f 4f       	sbci	r25, 0xFF	; 255
    e63a:	21 e0       	ldi	r18, 0x01	; 1
    e63c:	30 e0       	ldi	r19, 0x00	; 0
    e63e:	fc 01       	movw	r30, r24
    e640:	31 83       	std	Z+1, r19	; 0x01
    e642:	20 83       	st	Z, r18
    e644:	74 c0       	rjmp	.+232    	; 0xe72e <travel_path+0xc2c>
	else if (__tmp > 65535)
    e646:	ce 01       	movw	r24, r28
    e648:	89 59       	subi	r24, 0x99	; 153
    e64a:	9f 4f       	sbci	r25, 0xFF	; 255
    e64c:	11 e0       	ldi	r17, 0x01	; 1
    e64e:	fc 01       	movw	r30, r24
    e650:	60 81       	ld	r22, Z
    e652:	71 81       	ldd	r23, Z+1	; 0x01
    e654:	82 81       	ldd	r24, Z+2	; 0x02
    e656:	93 81       	ldd	r25, Z+3	; 0x03
    e658:	20 e0       	ldi	r18, 0x00	; 0
    e65a:	3f ef       	ldi	r19, 0xFF	; 255
    e65c:	4f e7       	ldi	r20, 0x7F	; 127
    e65e:	57 e4       	ldi	r21, 0x47	; 71
    e660:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e664:	18 16       	cp	r1, r24
    e666:	0c f0       	brlt	.+2      	; 0xe66a <travel_path+0xb68>
    e668:	10 e0       	ldi	r17, 0x00	; 0
    e66a:	11 23       	and	r17, r17
    e66c:	09 f4       	brne	.+2      	; 0xe670 <travel_path+0xb6e>
    e66e:	4d c0       	rjmp	.+154    	; 0xe70a <travel_path+0xc08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e670:	ce 01       	movw	r24, r28
    e672:	8d 59       	subi	r24, 0x9D	; 157
    e674:	9f 4f       	sbci	r25, 0xFF	; 255
    e676:	fc 01       	movw	r30, r24
    e678:	60 81       	ld	r22, Z
    e67a:	71 81       	ldd	r23, Z+1	; 0x01
    e67c:	82 81       	ldd	r24, Z+2	; 0x02
    e67e:	93 81       	ldd	r25, Z+3	; 0x03
    e680:	20 e0       	ldi	r18, 0x00	; 0
    e682:	30 e0       	ldi	r19, 0x00	; 0
    e684:	40 e2       	ldi	r20, 0x20	; 32
    e686:	51 e4       	ldi	r21, 0x41	; 65
    e688:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e68c:	dc 01       	movw	r26, r24
    e68e:	cb 01       	movw	r24, r22
    e690:	8e 01       	movw	r16, r28
    e692:	05 59       	subi	r16, 0x95	; 149
    e694:	1f 4f       	sbci	r17, 0xFF	; 255
    e696:	bc 01       	movw	r22, r24
    e698:	cd 01       	movw	r24, r26
    e69a:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e69e:	dc 01       	movw	r26, r24
    e6a0:	cb 01       	movw	r24, r22
    e6a2:	f8 01       	movw	r30, r16
    e6a4:	91 83       	std	Z+1, r25	; 0x01
    e6a6:	80 83       	st	Z, r24
    e6a8:	27 c0       	rjmp	.+78     	; 0xe6f8 <travel_path+0xbf6>
    e6aa:	ce 01       	movw	r24, r28
    e6ac:	83 59       	subi	r24, 0x93	; 147
    e6ae:	9f 4f       	sbci	r25, 0xFF	; 255
    e6b0:	20 e7       	ldi	r18, 0x70	; 112
    e6b2:	31 e0       	ldi	r19, 0x01	; 1
    e6b4:	fc 01       	movw	r30, r24
    e6b6:	31 83       	std	Z+1, r19	; 0x01
    e6b8:	20 83       	st	Z, r18
    e6ba:	ce 01       	movw	r24, r28
    e6bc:	83 59       	subi	r24, 0x93	; 147
    e6be:	9f 4f       	sbci	r25, 0xFF	; 255
    e6c0:	fc 01       	movw	r30, r24
    e6c2:	80 81       	ld	r24, Z
    e6c4:	91 81       	ldd	r25, Z+1	; 0x01
    e6c6:	8c 01       	movw	r16, r24
    e6c8:	c8 01       	movw	r24, r16
    e6ca:	01 97       	sbiw	r24, 0x01	; 1
    e6cc:	f1 f7       	brne	.-4      	; 0xe6ca <travel_path+0xbc8>
    e6ce:	8c 01       	movw	r16, r24
    e6d0:	ce 01       	movw	r24, r28
    e6d2:	83 59       	subi	r24, 0x93	; 147
    e6d4:	9f 4f       	sbci	r25, 0xFF	; 255
    e6d6:	fc 01       	movw	r30, r24
    e6d8:	11 83       	std	Z+1, r17	; 0x01
    e6da:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e6dc:	ce 01       	movw	r24, r28
    e6de:	85 59       	subi	r24, 0x95	; 149
    e6e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e6e2:	9e 01       	movw	r18, r28
    e6e4:	25 59       	subi	r18, 0x95	; 149
    e6e6:	3f 4f       	sbci	r19, 0xFF	; 255
    e6e8:	f9 01       	movw	r30, r18
    e6ea:	20 81       	ld	r18, Z
    e6ec:	31 81       	ldd	r19, Z+1	; 0x01
    e6ee:	21 50       	subi	r18, 0x01	; 1
    e6f0:	30 40       	sbci	r19, 0x00	; 0
    e6f2:	fc 01       	movw	r30, r24
    e6f4:	31 83       	std	Z+1, r19	; 0x01
    e6f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e6f8:	ce 01       	movw	r24, r28
    e6fa:	85 59       	subi	r24, 0x95	; 149
    e6fc:	9f 4f       	sbci	r25, 0xFF	; 255
    e6fe:	fc 01       	movw	r30, r24
    e700:	80 81       	ld	r24, Z
    e702:	91 81       	ldd	r25, Z+1	; 0x01
    e704:	00 97       	sbiw	r24, 0x00	; 0
    e706:	89 f6       	brne	.-94     	; 0xe6aa <travel_path+0xba8>
    e708:	2f c0       	rjmp	.+94     	; 0xe768 <travel_path+0xc66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e70a:	8e 01       	movw	r16, r28
    e70c:	05 59       	subi	r16, 0x95	; 149
    e70e:	1f 4f       	sbci	r17, 0xFF	; 255
    e710:	ce 01       	movw	r24, r28
    e712:	89 59       	subi	r24, 0x99	; 153
    e714:	9f 4f       	sbci	r25, 0xFF	; 255
    e716:	fc 01       	movw	r30, r24
    e718:	60 81       	ld	r22, Z
    e71a:	71 81       	ldd	r23, Z+1	; 0x01
    e71c:	82 81       	ldd	r24, Z+2	; 0x02
    e71e:	93 81       	ldd	r25, Z+3	; 0x03
    e720:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e724:	dc 01       	movw	r26, r24
    e726:	cb 01       	movw	r24, r22
    e728:	f8 01       	movw	r30, r16
    e72a:	91 83       	std	Z+1, r25	; 0x01
    e72c:	80 83       	st	Z, r24
    e72e:	ce 01       	movw	r24, r28
    e730:	81 59       	subi	r24, 0x91	; 145
    e732:	9f 4f       	sbci	r25, 0xFF	; 255
    e734:	9e 01       	movw	r18, r28
    e736:	25 59       	subi	r18, 0x95	; 149
    e738:	3f 4f       	sbci	r19, 0xFF	; 255
    e73a:	f9 01       	movw	r30, r18
    e73c:	20 81       	ld	r18, Z
    e73e:	31 81       	ldd	r19, Z+1	; 0x01
    e740:	fc 01       	movw	r30, r24
    e742:	31 83       	std	Z+1, r19	; 0x01
    e744:	20 83       	st	Z, r18
    e746:	ce 01       	movw	r24, r28
    e748:	81 59       	subi	r24, 0x91	; 145
    e74a:	9f 4f       	sbci	r25, 0xFF	; 255
    e74c:	fc 01       	movw	r30, r24
    e74e:	80 81       	ld	r24, Z
    e750:	91 81       	ldd	r25, Z+1	; 0x01
    e752:	8c 01       	movw	r16, r24
    e754:	c8 01       	movw	r24, r16
    e756:	01 97       	sbiw	r24, 0x01	; 1
    e758:	f1 f7       	brne	.-4      	; 0xe756 <travel_path+0xc54>
    e75a:	8c 01       	movw	r16, r24
    e75c:	ce 01       	movw	r24, r28
    e75e:	81 59       	subi	r24, 0x91	; 145
    e760:	9f 4f       	sbci	r25, 0xFF	; 255
    e762:	fc 01       	movw	r30, r24
    e764:	11 83       	std	Z+1, r17	; 0x01
    e766:	00 83       	st	Z, r16
				_delay_ms(20);
				forward_mm(160);
    e768:	80 ea       	ldi	r24, 0xA0	; 160
    e76a:	90 e0       	ldi	r25, 0x00	; 0
    e76c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    e770:	9e 01       	movw	r18, r28
    e772:	2f 58       	subi	r18, 0x8F	; 143
    e774:	3f 4f       	sbci	r19, 0xFF	; 255
    e776:	80 e0       	ldi	r24, 0x00	; 0
    e778:	90 e0       	ldi	r25, 0x00	; 0
    e77a:	a0 ea       	ldi	r26, 0xA0	; 160
    e77c:	b1 e4       	ldi	r27, 0x41	; 65
    e77e:	f9 01       	movw	r30, r18
    e780:	80 83       	st	Z, r24
    e782:	91 83       	std	Z+1, r25	; 0x01
    e784:	a2 83       	std	Z+2, r26	; 0x02
    e786:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e788:	8e 01       	movw	r16, r28
    e78a:	0b 58       	subi	r16, 0x8B	; 139
    e78c:	1f 4f       	sbci	r17, 0xFF	; 255
    e78e:	ce 01       	movw	r24, r28
    e790:	8f 58       	subi	r24, 0x8F	; 143
    e792:	9f 4f       	sbci	r25, 0xFF	; 255
    e794:	fc 01       	movw	r30, r24
    e796:	60 81       	ld	r22, Z
    e798:	71 81       	ldd	r23, Z+1	; 0x01
    e79a:	82 81       	ldd	r24, Z+2	; 0x02
    e79c:	93 81       	ldd	r25, Z+3	; 0x03
    e79e:	26 e6       	ldi	r18, 0x66	; 102
    e7a0:	36 e6       	ldi	r19, 0x66	; 102
    e7a2:	46 e6       	ldi	r20, 0x66	; 102
    e7a4:	55 e4       	ldi	r21, 0x45	; 69
    e7a6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e7aa:	dc 01       	movw	r26, r24
    e7ac:	cb 01       	movw	r24, r22
    e7ae:	f8 01       	movw	r30, r16
    e7b0:	80 83       	st	Z, r24
    e7b2:	91 83       	std	Z+1, r25	; 0x01
    e7b4:	a2 83       	std	Z+2, r26	; 0x02
    e7b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e7b8:	ce 01       	movw	r24, r28
    e7ba:	8b 58       	subi	r24, 0x8B	; 139
    e7bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e7be:	11 e0       	ldi	r17, 0x01	; 1
    e7c0:	fc 01       	movw	r30, r24
    e7c2:	60 81       	ld	r22, Z
    e7c4:	71 81       	ldd	r23, Z+1	; 0x01
    e7c6:	82 81       	ldd	r24, Z+2	; 0x02
    e7c8:	93 81       	ldd	r25, Z+3	; 0x03
    e7ca:	20 e0       	ldi	r18, 0x00	; 0
    e7cc:	30 e0       	ldi	r19, 0x00	; 0
    e7ce:	40 e8       	ldi	r20, 0x80	; 128
    e7d0:	5f e3       	ldi	r21, 0x3F	; 63
    e7d2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    e7d6:	88 23       	and	r24, r24
    e7d8:	0c f0       	brlt	.+2      	; 0xe7dc <travel_path+0xcda>
    e7da:	10 e0       	ldi	r17, 0x00	; 0
    e7dc:	11 23       	and	r17, r17
    e7de:	49 f0       	breq	.+18     	; 0xe7f2 <travel_path+0xcf0>
		__ticks = 1;
    e7e0:	ce 01       	movw	r24, r28
    e7e2:	87 58       	subi	r24, 0x87	; 135
    e7e4:	9f 4f       	sbci	r25, 0xFF	; 255
    e7e6:	21 e0       	ldi	r18, 0x01	; 1
    e7e8:	30 e0       	ldi	r19, 0x00	; 0
    e7ea:	fc 01       	movw	r30, r24
    e7ec:	31 83       	std	Z+1, r19	; 0x01
    e7ee:	20 83       	st	Z, r18
    e7f0:	74 c0       	rjmp	.+232    	; 0xe8da <travel_path+0xdd8>
	else if (__tmp > 65535)
    e7f2:	ce 01       	movw	r24, r28
    e7f4:	8b 58       	subi	r24, 0x8B	; 139
    e7f6:	9f 4f       	sbci	r25, 0xFF	; 255
    e7f8:	11 e0       	ldi	r17, 0x01	; 1
    e7fa:	fc 01       	movw	r30, r24
    e7fc:	60 81       	ld	r22, Z
    e7fe:	71 81       	ldd	r23, Z+1	; 0x01
    e800:	82 81       	ldd	r24, Z+2	; 0x02
    e802:	93 81       	ldd	r25, Z+3	; 0x03
    e804:	20 e0       	ldi	r18, 0x00	; 0
    e806:	3f ef       	ldi	r19, 0xFF	; 255
    e808:	4f e7       	ldi	r20, 0x7F	; 127
    e80a:	57 e4       	ldi	r21, 0x47	; 71
    e80c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e810:	18 16       	cp	r1, r24
    e812:	0c f0       	brlt	.+2      	; 0xe816 <travel_path+0xd14>
    e814:	10 e0       	ldi	r17, 0x00	; 0
    e816:	11 23       	and	r17, r17
    e818:	09 f4       	brne	.+2      	; 0xe81c <travel_path+0xd1a>
    e81a:	4d c0       	rjmp	.+154    	; 0xe8b6 <travel_path+0xdb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e81c:	ce 01       	movw	r24, r28
    e81e:	8f 58       	subi	r24, 0x8F	; 143
    e820:	9f 4f       	sbci	r25, 0xFF	; 255
    e822:	fc 01       	movw	r30, r24
    e824:	60 81       	ld	r22, Z
    e826:	71 81       	ldd	r23, Z+1	; 0x01
    e828:	82 81       	ldd	r24, Z+2	; 0x02
    e82a:	93 81       	ldd	r25, Z+3	; 0x03
    e82c:	20 e0       	ldi	r18, 0x00	; 0
    e82e:	30 e0       	ldi	r19, 0x00	; 0
    e830:	40 e2       	ldi	r20, 0x20	; 32
    e832:	51 e4       	ldi	r21, 0x41	; 65
    e834:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e838:	dc 01       	movw	r26, r24
    e83a:	cb 01       	movw	r24, r22
    e83c:	8e 01       	movw	r16, r28
    e83e:	07 58       	subi	r16, 0x87	; 135
    e840:	1f 4f       	sbci	r17, 0xFF	; 255
    e842:	bc 01       	movw	r22, r24
    e844:	cd 01       	movw	r24, r26
    e846:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e84a:	dc 01       	movw	r26, r24
    e84c:	cb 01       	movw	r24, r22
    e84e:	f8 01       	movw	r30, r16
    e850:	91 83       	std	Z+1, r25	; 0x01
    e852:	80 83       	st	Z, r24
    e854:	27 c0       	rjmp	.+78     	; 0xe8a4 <travel_path+0xda2>
    e856:	ce 01       	movw	r24, r28
    e858:	85 58       	subi	r24, 0x85	; 133
    e85a:	9f 4f       	sbci	r25, 0xFF	; 255
    e85c:	20 e7       	ldi	r18, 0x70	; 112
    e85e:	31 e0       	ldi	r19, 0x01	; 1
    e860:	fc 01       	movw	r30, r24
    e862:	31 83       	std	Z+1, r19	; 0x01
    e864:	20 83       	st	Z, r18
    e866:	ce 01       	movw	r24, r28
    e868:	85 58       	subi	r24, 0x85	; 133
    e86a:	9f 4f       	sbci	r25, 0xFF	; 255
    e86c:	fc 01       	movw	r30, r24
    e86e:	80 81       	ld	r24, Z
    e870:	91 81       	ldd	r25, Z+1	; 0x01
    e872:	8c 01       	movw	r16, r24
    e874:	c8 01       	movw	r24, r16
    e876:	01 97       	sbiw	r24, 0x01	; 1
    e878:	f1 f7       	brne	.-4      	; 0xe876 <travel_path+0xd74>
    e87a:	8c 01       	movw	r16, r24
    e87c:	ce 01       	movw	r24, r28
    e87e:	85 58       	subi	r24, 0x85	; 133
    e880:	9f 4f       	sbci	r25, 0xFF	; 255
    e882:	fc 01       	movw	r30, r24
    e884:	11 83       	std	Z+1, r17	; 0x01
    e886:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e888:	ce 01       	movw	r24, r28
    e88a:	87 58       	subi	r24, 0x87	; 135
    e88c:	9f 4f       	sbci	r25, 0xFF	; 255
    e88e:	9e 01       	movw	r18, r28
    e890:	27 58       	subi	r18, 0x87	; 135
    e892:	3f 4f       	sbci	r19, 0xFF	; 255
    e894:	f9 01       	movw	r30, r18
    e896:	20 81       	ld	r18, Z
    e898:	31 81       	ldd	r19, Z+1	; 0x01
    e89a:	21 50       	subi	r18, 0x01	; 1
    e89c:	30 40       	sbci	r19, 0x00	; 0
    e89e:	fc 01       	movw	r30, r24
    e8a0:	31 83       	std	Z+1, r19	; 0x01
    e8a2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e8a4:	ce 01       	movw	r24, r28
    e8a6:	87 58       	subi	r24, 0x87	; 135
    e8a8:	9f 4f       	sbci	r25, 0xFF	; 255
    e8aa:	fc 01       	movw	r30, r24
    e8ac:	80 81       	ld	r24, Z
    e8ae:	91 81       	ldd	r25, Z+1	; 0x01
    e8b0:	00 97       	sbiw	r24, 0x00	; 0
    e8b2:	89 f6       	brne	.-94     	; 0xe856 <travel_path+0xd54>
    e8b4:	2f c0       	rjmp	.+94     	; 0xe914 <travel_path+0xe12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    e8b6:	8e 01       	movw	r16, r28
    e8b8:	07 58       	subi	r16, 0x87	; 135
    e8ba:	1f 4f       	sbci	r17, 0xFF	; 255
    e8bc:	ce 01       	movw	r24, r28
    e8be:	8b 58       	subi	r24, 0x8B	; 139
    e8c0:	9f 4f       	sbci	r25, 0xFF	; 255
    e8c2:	fc 01       	movw	r30, r24
    e8c4:	60 81       	ld	r22, Z
    e8c6:	71 81       	ldd	r23, Z+1	; 0x01
    e8c8:	82 81       	ldd	r24, Z+2	; 0x02
    e8ca:	93 81       	ldd	r25, Z+3	; 0x03
    e8cc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e8d0:	dc 01       	movw	r26, r24
    e8d2:	cb 01       	movw	r24, r22
    e8d4:	f8 01       	movw	r30, r16
    e8d6:	91 83       	std	Z+1, r25	; 0x01
    e8d8:	80 83       	st	Z, r24
    e8da:	ce 01       	movw	r24, r28
    e8dc:	83 58       	subi	r24, 0x83	; 131
    e8de:	9f 4f       	sbci	r25, 0xFF	; 255
    e8e0:	9e 01       	movw	r18, r28
    e8e2:	27 58       	subi	r18, 0x87	; 135
    e8e4:	3f 4f       	sbci	r19, 0xFF	; 255
    e8e6:	f9 01       	movw	r30, r18
    e8e8:	20 81       	ld	r18, Z
    e8ea:	31 81       	ldd	r19, Z+1	; 0x01
    e8ec:	fc 01       	movw	r30, r24
    e8ee:	31 83       	std	Z+1, r19	; 0x01
    e8f0:	20 83       	st	Z, r18
    e8f2:	ce 01       	movw	r24, r28
    e8f4:	83 58       	subi	r24, 0x83	; 131
    e8f6:	9f 4f       	sbci	r25, 0xFF	; 255
    e8f8:	fc 01       	movw	r30, r24
    e8fa:	80 81       	ld	r24, Z
    e8fc:	91 81       	ldd	r25, Z+1	; 0x01
    e8fe:	8c 01       	movw	r16, r24
    e900:	c8 01       	movw	r24, r16
    e902:	01 97       	sbiw	r24, 0x01	; 1
    e904:	f1 f7       	brne	.-4      	; 0xe902 <travel_path+0xe00>
    e906:	8c 01       	movw	r16, r24
    e908:	ce 01       	movw	r24, r28
    e90a:	83 58       	subi	r24, 0x83	; 131
    e90c:	9f 4f       	sbci	r25, 0xFF	; 255
    e90e:	fc 01       	movw	r30, r24
    e910:	11 83       	std	Z+1, r17	; 0x01
    e912:	00 83       	st	Z, r16
				_delay_ms(20);
				spl_left2();
    e914:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    e918:	9e 01       	movw	r18, r28
    e91a:	21 58       	subi	r18, 0x81	; 129
    e91c:	3f 4f       	sbci	r19, 0xFF	; 255
    e91e:	80 e0       	ldi	r24, 0x00	; 0
    e920:	90 e0       	ldi	r25, 0x00	; 0
    e922:	a0 ea       	ldi	r26, 0xA0	; 160
    e924:	b1 e4       	ldi	r27, 0x41	; 65
    e926:	f9 01       	movw	r30, r18
    e928:	80 83       	st	Z, r24
    e92a:	91 83       	std	Z+1, r25	; 0x01
    e92c:	a2 83       	std	Z+2, r26	; 0x02
    e92e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    e930:	8e 01       	movw	r16, r28
    e932:	0d 57       	subi	r16, 0x7D	; 125
    e934:	1f 4f       	sbci	r17, 0xFF	; 255
    e936:	ce 01       	movw	r24, r28
    e938:	81 58       	subi	r24, 0x81	; 129
    e93a:	9f 4f       	sbci	r25, 0xFF	; 255
    e93c:	fc 01       	movw	r30, r24
    e93e:	60 81       	ld	r22, Z
    e940:	71 81       	ldd	r23, Z+1	; 0x01
    e942:	82 81       	ldd	r24, Z+2	; 0x02
    e944:	93 81       	ldd	r25, Z+3	; 0x03
    e946:	26 e6       	ldi	r18, 0x66	; 102
    e948:	36 e6       	ldi	r19, 0x66	; 102
    e94a:	46 e6       	ldi	r20, 0x66	; 102
    e94c:	55 e4       	ldi	r21, 0x45	; 69
    e94e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e952:	dc 01       	movw	r26, r24
    e954:	cb 01       	movw	r24, r22
    e956:	f8 01       	movw	r30, r16
    e958:	80 83       	st	Z, r24
    e95a:	91 83       	std	Z+1, r25	; 0x01
    e95c:	a2 83       	std	Z+2, r26	; 0x02
    e95e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    e960:	ce 01       	movw	r24, r28
    e962:	8d 57       	subi	r24, 0x7D	; 125
    e964:	9f 4f       	sbci	r25, 0xFF	; 255
    e966:	11 e0       	ldi	r17, 0x01	; 1
    e968:	fc 01       	movw	r30, r24
    e96a:	60 81       	ld	r22, Z
    e96c:	71 81       	ldd	r23, Z+1	; 0x01
    e96e:	82 81       	ldd	r24, Z+2	; 0x02
    e970:	93 81       	ldd	r25, Z+3	; 0x03
    e972:	20 e0       	ldi	r18, 0x00	; 0
    e974:	30 e0       	ldi	r19, 0x00	; 0
    e976:	40 e8       	ldi	r20, 0x80	; 128
    e978:	5f e3       	ldi	r21, 0x3F	; 63
    e97a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    e97e:	88 23       	and	r24, r24
    e980:	0c f0       	brlt	.+2      	; 0xe984 <travel_path+0xe82>
    e982:	10 e0       	ldi	r17, 0x00	; 0
    e984:	11 23       	and	r17, r17
    e986:	49 f0       	breq	.+18     	; 0xe99a <travel_path+0xe98>
		__ticks = 1;
    e988:	ce 01       	movw	r24, r28
    e98a:	89 57       	subi	r24, 0x79	; 121
    e98c:	9f 4f       	sbci	r25, 0xFF	; 255
    e98e:	21 e0       	ldi	r18, 0x01	; 1
    e990:	30 e0       	ldi	r19, 0x00	; 0
    e992:	fc 01       	movw	r30, r24
    e994:	31 83       	std	Z+1, r19	; 0x01
    e996:	20 83       	st	Z, r18
    e998:	74 c0       	rjmp	.+232    	; 0xea82 <travel_path+0xf80>
	else if (__tmp > 65535)
    e99a:	ce 01       	movw	r24, r28
    e99c:	8d 57       	subi	r24, 0x7D	; 125
    e99e:	9f 4f       	sbci	r25, 0xFF	; 255
    e9a0:	11 e0       	ldi	r17, 0x01	; 1
    e9a2:	fc 01       	movw	r30, r24
    e9a4:	60 81       	ld	r22, Z
    e9a6:	71 81       	ldd	r23, Z+1	; 0x01
    e9a8:	82 81       	ldd	r24, Z+2	; 0x02
    e9aa:	93 81       	ldd	r25, Z+3	; 0x03
    e9ac:	20 e0       	ldi	r18, 0x00	; 0
    e9ae:	3f ef       	ldi	r19, 0xFF	; 255
    e9b0:	4f e7       	ldi	r20, 0x7F	; 127
    e9b2:	57 e4       	ldi	r21, 0x47	; 71
    e9b4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    e9b8:	18 16       	cp	r1, r24
    e9ba:	0c f0       	brlt	.+2      	; 0xe9be <travel_path+0xebc>
    e9bc:	10 e0       	ldi	r17, 0x00	; 0
    e9be:	11 23       	and	r17, r17
    e9c0:	09 f4       	brne	.+2      	; 0xe9c4 <travel_path+0xec2>
    e9c2:	4d c0       	rjmp	.+154    	; 0xea5e <travel_path+0xf5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    e9c4:	ce 01       	movw	r24, r28
    e9c6:	81 58       	subi	r24, 0x81	; 129
    e9c8:	9f 4f       	sbci	r25, 0xFF	; 255
    e9ca:	fc 01       	movw	r30, r24
    e9cc:	60 81       	ld	r22, Z
    e9ce:	71 81       	ldd	r23, Z+1	; 0x01
    e9d0:	82 81       	ldd	r24, Z+2	; 0x02
    e9d2:	93 81       	ldd	r25, Z+3	; 0x03
    e9d4:	20 e0       	ldi	r18, 0x00	; 0
    e9d6:	30 e0       	ldi	r19, 0x00	; 0
    e9d8:	40 e2       	ldi	r20, 0x20	; 32
    e9da:	51 e4       	ldi	r21, 0x41	; 65
    e9dc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    e9e0:	dc 01       	movw	r26, r24
    e9e2:	cb 01       	movw	r24, r22
    e9e4:	8e 01       	movw	r16, r28
    e9e6:	09 57       	subi	r16, 0x79	; 121
    e9e8:	1f 4f       	sbci	r17, 0xFF	; 255
    e9ea:	bc 01       	movw	r22, r24
    e9ec:	cd 01       	movw	r24, r26
    e9ee:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    e9f2:	dc 01       	movw	r26, r24
    e9f4:	cb 01       	movw	r24, r22
    e9f6:	f8 01       	movw	r30, r16
    e9f8:	91 83       	std	Z+1, r25	; 0x01
    e9fa:	80 83       	st	Z, r24
    e9fc:	27 c0       	rjmp	.+78     	; 0xea4c <travel_path+0xf4a>
    e9fe:	ce 01       	movw	r24, r28
    ea00:	87 57       	subi	r24, 0x77	; 119
    ea02:	9f 4f       	sbci	r25, 0xFF	; 255
    ea04:	20 e7       	ldi	r18, 0x70	; 112
    ea06:	31 e0       	ldi	r19, 0x01	; 1
    ea08:	fc 01       	movw	r30, r24
    ea0a:	31 83       	std	Z+1, r19	; 0x01
    ea0c:	20 83       	st	Z, r18
    ea0e:	ce 01       	movw	r24, r28
    ea10:	87 57       	subi	r24, 0x77	; 119
    ea12:	9f 4f       	sbci	r25, 0xFF	; 255
    ea14:	fc 01       	movw	r30, r24
    ea16:	80 81       	ld	r24, Z
    ea18:	91 81       	ldd	r25, Z+1	; 0x01
    ea1a:	8c 01       	movw	r16, r24
    ea1c:	c8 01       	movw	r24, r16
    ea1e:	01 97       	sbiw	r24, 0x01	; 1
    ea20:	f1 f7       	brne	.-4      	; 0xea1e <travel_path+0xf1c>
    ea22:	8c 01       	movw	r16, r24
    ea24:	ce 01       	movw	r24, r28
    ea26:	87 57       	subi	r24, 0x77	; 119
    ea28:	9f 4f       	sbci	r25, 0xFF	; 255
    ea2a:	fc 01       	movw	r30, r24
    ea2c:	11 83       	std	Z+1, r17	; 0x01
    ea2e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ea30:	ce 01       	movw	r24, r28
    ea32:	89 57       	subi	r24, 0x79	; 121
    ea34:	9f 4f       	sbci	r25, 0xFF	; 255
    ea36:	9e 01       	movw	r18, r28
    ea38:	29 57       	subi	r18, 0x79	; 121
    ea3a:	3f 4f       	sbci	r19, 0xFF	; 255
    ea3c:	f9 01       	movw	r30, r18
    ea3e:	20 81       	ld	r18, Z
    ea40:	31 81       	ldd	r19, Z+1	; 0x01
    ea42:	21 50       	subi	r18, 0x01	; 1
    ea44:	30 40       	sbci	r19, 0x00	; 0
    ea46:	fc 01       	movw	r30, r24
    ea48:	31 83       	std	Z+1, r19	; 0x01
    ea4a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ea4c:	ce 01       	movw	r24, r28
    ea4e:	89 57       	subi	r24, 0x79	; 121
    ea50:	9f 4f       	sbci	r25, 0xFF	; 255
    ea52:	fc 01       	movw	r30, r24
    ea54:	80 81       	ld	r24, Z
    ea56:	91 81       	ldd	r25, Z+1	; 0x01
    ea58:	00 97       	sbiw	r24, 0x00	; 0
    ea5a:	89 f6       	brne	.-94     	; 0xe9fe <travel_path+0xefc>
    ea5c:	04 c1       	rjmp	.+520    	; 0xec66 <travel_path+0x1164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ea5e:	8e 01       	movw	r16, r28
    ea60:	09 57       	subi	r16, 0x79	; 121
    ea62:	1f 4f       	sbci	r17, 0xFF	; 255
    ea64:	ce 01       	movw	r24, r28
    ea66:	8d 57       	subi	r24, 0x7D	; 125
    ea68:	9f 4f       	sbci	r25, 0xFF	; 255
    ea6a:	fc 01       	movw	r30, r24
    ea6c:	60 81       	ld	r22, Z
    ea6e:	71 81       	ldd	r23, Z+1	; 0x01
    ea70:	82 81       	ldd	r24, Z+2	; 0x02
    ea72:	93 81       	ldd	r25, Z+3	; 0x03
    ea74:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ea78:	dc 01       	movw	r26, r24
    ea7a:	cb 01       	movw	r24, r22
    ea7c:	f8 01       	movw	r30, r16
    ea7e:	91 83       	std	Z+1, r25	; 0x01
    ea80:	80 83       	st	Z, r24
    ea82:	ce 01       	movw	r24, r28
    ea84:	85 57       	subi	r24, 0x75	; 117
    ea86:	9f 4f       	sbci	r25, 0xFF	; 255
    ea88:	9e 01       	movw	r18, r28
    ea8a:	29 57       	subi	r18, 0x79	; 121
    ea8c:	3f 4f       	sbci	r19, 0xFF	; 255
    ea8e:	f9 01       	movw	r30, r18
    ea90:	20 81       	ld	r18, Z
    ea92:	31 81       	ldd	r19, Z+1	; 0x01
    ea94:	fc 01       	movw	r30, r24
    ea96:	31 83       	std	Z+1, r19	; 0x01
    ea98:	20 83       	st	Z, r18
    ea9a:	ce 01       	movw	r24, r28
    ea9c:	85 57       	subi	r24, 0x75	; 117
    ea9e:	9f 4f       	sbci	r25, 0xFF	; 255
    eaa0:	fc 01       	movw	r30, r24
    eaa2:	80 81       	ld	r24, Z
    eaa4:	91 81       	ldd	r25, Z+1	; 0x01
    eaa6:	8c 01       	movw	r16, r24
    eaa8:	c8 01       	movw	r24, r16
    eaaa:	01 97       	sbiw	r24, 0x01	; 1
    eaac:	f1 f7       	brne	.-4      	; 0xeaaa <travel_path+0xfa8>
    eaae:	8c 01       	movw	r16, r24
    eab0:	ce 01       	movw	r24, r28
    eab2:	85 57       	subi	r24, 0x75	; 117
    eab4:	9f 4f       	sbci	r25, 0xFF	; 255
    eab6:	fc 01       	movw	r30, r24
    eab8:	11 83       	std	Z+1, r17	; 0x01
    eaba:	00 83       	st	Z, r16
    eabc:	d4 c0       	rjmp	.+424    	; 0xec66 <travel_path+0x1164>
				_delay_ms(20);
			}

			else
			{
				stop();
    eabe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    eac2:	9e 01       	movw	r18, r28
    eac4:	23 57       	subi	r18, 0x73	; 115
    eac6:	3f 4f       	sbci	r19, 0xFF	; 255
    eac8:	80 e0       	ldi	r24, 0x00	; 0
    eaca:	90 e0       	ldi	r25, 0x00	; 0
    eacc:	a0 ea       	ldi	r26, 0xA0	; 160
    eace:	b1 e4       	ldi	r27, 0x41	; 65
    ead0:	f9 01       	movw	r30, r18
    ead2:	80 83       	st	Z, r24
    ead4:	91 83       	std	Z+1, r25	; 0x01
    ead6:	a2 83       	std	Z+2, r26	; 0x02
    ead8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    eada:	8e 01       	movw	r16, r28
    eadc:	0f 56       	subi	r16, 0x6F	; 111
    eade:	1f 4f       	sbci	r17, 0xFF	; 255
    eae0:	ce 01       	movw	r24, r28
    eae2:	83 57       	subi	r24, 0x73	; 115
    eae4:	9f 4f       	sbci	r25, 0xFF	; 255
    eae6:	fc 01       	movw	r30, r24
    eae8:	60 81       	ld	r22, Z
    eaea:	71 81       	ldd	r23, Z+1	; 0x01
    eaec:	82 81       	ldd	r24, Z+2	; 0x02
    eaee:	93 81       	ldd	r25, Z+3	; 0x03
    eaf0:	26 e6       	ldi	r18, 0x66	; 102
    eaf2:	36 e6       	ldi	r19, 0x66	; 102
    eaf4:	46 e6       	ldi	r20, 0x66	; 102
    eaf6:	55 e4       	ldi	r21, 0x45	; 69
    eaf8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    eafc:	dc 01       	movw	r26, r24
    eafe:	cb 01       	movw	r24, r22
    eb00:	f8 01       	movw	r30, r16
    eb02:	80 83       	st	Z, r24
    eb04:	91 83       	std	Z+1, r25	; 0x01
    eb06:	a2 83       	std	Z+2, r26	; 0x02
    eb08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    eb0a:	ce 01       	movw	r24, r28
    eb0c:	8f 56       	subi	r24, 0x6F	; 111
    eb0e:	9f 4f       	sbci	r25, 0xFF	; 255
    eb10:	11 e0       	ldi	r17, 0x01	; 1
    eb12:	fc 01       	movw	r30, r24
    eb14:	60 81       	ld	r22, Z
    eb16:	71 81       	ldd	r23, Z+1	; 0x01
    eb18:	82 81       	ldd	r24, Z+2	; 0x02
    eb1a:	93 81       	ldd	r25, Z+3	; 0x03
    eb1c:	20 e0       	ldi	r18, 0x00	; 0
    eb1e:	30 e0       	ldi	r19, 0x00	; 0
    eb20:	40 e8       	ldi	r20, 0x80	; 128
    eb22:	5f e3       	ldi	r21, 0x3F	; 63
    eb24:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    eb28:	88 23       	and	r24, r24
    eb2a:	0c f0       	brlt	.+2      	; 0xeb2e <travel_path+0x102c>
    eb2c:	10 e0       	ldi	r17, 0x00	; 0
    eb2e:	11 23       	and	r17, r17
    eb30:	49 f0       	breq	.+18     	; 0xeb44 <travel_path+0x1042>
		__ticks = 1;
    eb32:	ce 01       	movw	r24, r28
    eb34:	8b 56       	subi	r24, 0x6B	; 107
    eb36:	9f 4f       	sbci	r25, 0xFF	; 255
    eb38:	21 e0       	ldi	r18, 0x01	; 1
    eb3a:	30 e0       	ldi	r19, 0x00	; 0
    eb3c:	fc 01       	movw	r30, r24
    eb3e:	31 83       	std	Z+1, r19	; 0x01
    eb40:	20 83       	st	Z, r18
    eb42:	74 c0       	rjmp	.+232    	; 0xec2c <travel_path+0x112a>
	else if (__tmp > 65535)
    eb44:	ce 01       	movw	r24, r28
    eb46:	8f 56       	subi	r24, 0x6F	; 111
    eb48:	9f 4f       	sbci	r25, 0xFF	; 255
    eb4a:	11 e0       	ldi	r17, 0x01	; 1
    eb4c:	fc 01       	movw	r30, r24
    eb4e:	60 81       	ld	r22, Z
    eb50:	71 81       	ldd	r23, Z+1	; 0x01
    eb52:	82 81       	ldd	r24, Z+2	; 0x02
    eb54:	93 81       	ldd	r25, Z+3	; 0x03
    eb56:	20 e0       	ldi	r18, 0x00	; 0
    eb58:	3f ef       	ldi	r19, 0xFF	; 255
    eb5a:	4f e7       	ldi	r20, 0x7F	; 127
    eb5c:	57 e4       	ldi	r21, 0x47	; 71
    eb5e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    eb62:	18 16       	cp	r1, r24
    eb64:	0c f0       	brlt	.+2      	; 0xeb68 <travel_path+0x1066>
    eb66:	10 e0       	ldi	r17, 0x00	; 0
    eb68:	11 23       	and	r17, r17
    eb6a:	09 f4       	brne	.+2      	; 0xeb6e <travel_path+0x106c>
    eb6c:	4d c0       	rjmp	.+154    	; 0xec08 <travel_path+0x1106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    eb6e:	ce 01       	movw	r24, r28
    eb70:	83 57       	subi	r24, 0x73	; 115
    eb72:	9f 4f       	sbci	r25, 0xFF	; 255
    eb74:	fc 01       	movw	r30, r24
    eb76:	60 81       	ld	r22, Z
    eb78:	71 81       	ldd	r23, Z+1	; 0x01
    eb7a:	82 81       	ldd	r24, Z+2	; 0x02
    eb7c:	93 81       	ldd	r25, Z+3	; 0x03
    eb7e:	20 e0       	ldi	r18, 0x00	; 0
    eb80:	30 e0       	ldi	r19, 0x00	; 0
    eb82:	40 e2       	ldi	r20, 0x20	; 32
    eb84:	51 e4       	ldi	r21, 0x41	; 65
    eb86:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    eb8a:	dc 01       	movw	r26, r24
    eb8c:	cb 01       	movw	r24, r22
    eb8e:	8e 01       	movw	r16, r28
    eb90:	0b 56       	subi	r16, 0x6B	; 107
    eb92:	1f 4f       	sbci	r17, 0xFF	; 255
    eb94:	bc 01       	movw	r22, r24
    eb96:	cd 01       	movw	r24, r26
    eb98:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    eb9c:	dc 01       	movw	r26, r24
    eb9e:	cb 01       	movw	r24, r22
    eba0:	f8 01       	movw	r30, r16
    eba2:	91 83       	std	Z+1, r25	; 0x01
    eba4:	80 83       	st	Z, r24
    eba6:	27 c0       	rjmp	.+78     	; 0xebf6 <travel_path+0x10f4>
    eba8:	ce 01       	movw	r24, r28
    ebaa:	89 56       	subi	r24, 0x69	; 105
    ebac:	9f 4f       	sbci	r25, 0xFF	; 255
    ebae:	20 e7       	ldi	r18, 0x70	; 112
    ebb0:	31 e0       	ldi	r19, 0x01	; 1
    ebb2:	fc 01       	movw	r30, r24
    ebb4:	31 83       	std	Z+1, r19	; 0x01
    ebb6:	20 83       	st	Z, r18
    ebb8:	ce 01       	movw	r24, r28
    ebba:	89 56       	subi	r24, 0x69	; 105
    ebbc:	9f 4f       	sbci	r25, 0xFF	; 255
    ebbe:	fc 01       	movw	r30, r24
    ebc0:	80 81       	ld	r24, Z
    ebc2:	91 81       	ldd	r25, Z+1	; 0x01
    ebc4:	8c 01       	movw	r16, r24
    ebc6:	c8 01       	movw	r24, r16
    ebc8:	01 97       	sbiw	r24, 0x01	; 1
    ebca:	f1 f7       	brne	.-4      	; 0xebc8 <travel_path+0x10c6>
    ebcc:	8c 01       	movw	r16, r24
    ebce:	ce 01       	movw	r24, r28
    ebd0:	89 56       	subi	r24, 0x69	; 105
    ebd2:	9f 4f       	sbci	r25, 0xFF	; 255
    ebd4:	fc 01       	movw	r30, r24
    ebd6:	11 83       	std	Z+1, r17	; 0x01
    ebd8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ebda:	ce 01       	movw	r24, r28
    ebdc:	8b 56       	subi	r24, 0x6B	; 107
    ebde:	9f 4f       	sbci	r25, 0xFF	; 255
    ebe0:	9e 01       	movw	r18, r28
    ebe2:	2b 56       	subi	r18, 0x6B	; 107
    ebe4:	3f 4f       	sbci	r19, 0xFF	; 255
    ebe6:	f9 01       	movw	r30, r18
    ebe8:	20 81       	ld	r18, Z
    ebea:	31 81       	ldd	r19, Z+1	; 0x01
    ebec:	21 50       	subi	r18, 0x01	; 1
    ebee:	30 40       	sbci	r19, 0x00	; 0
    ebf0:	fc 01       	movw	r30, r24
    ebf2:	31 83       	std	Z+1, r19	; 0x01
    ebf4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ebf6:	ce 01       	movw	r24, r28
    ebf8:	8b 56       	subi	r24, 0x6B	; 107
    ebfa:	9f 4f       	sbci	r25, 0xFF	; 255
    ebfc:	fc 01       	movw	r30, r24
    ebfe:	80 81       	ld	r24, Z
    ec00:	91 81       	ldd	r25, Z+1	; 0x01
    ec02:	00 97       	sbiw	r24, 0x00	; 0
    ec04:	89 f6       	brne	.-94     	; 0xeba8 <travel_path+0x10a6>
    ec06:	2f c0       	rjmp	.+94     	; 0xec66 <travel_path+0x1164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ec08:	8e 01       	movw	r16, r28
    ec0a:	0b 56       	subi	r16, 0x6B	; 107
    ec0c:	1f 4f       	sbci	r17, 0xFF	; 255
    ec0e:	ce 01       	movw	r24, r28
    ec10:	8f 56       	subi	r24, 0x6F	; 111
    ec12:	9f 4f       	sbci	r25, 0xFF	; 255
    ec14:	fc 01       	movw	r30, r24
    ec16:	60 81       	ld	r22, Z
    ec18:	71 81       	ldd	r23, Z+1	; 0x01
    ec1a:	82 81       	ldd	r24, Z+2	; 0x02
    ec1c:	93 81       	ldd	r25, Z+3	; 0x03
    ec1e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ec22:	dc 01       	movw	r26, r24
    ec24:	cb 01       	movw	r24, r22
    ec26:	f8 01       	movw	r30, r16
    ec28:	91 83       	std	Z+1, r25	; 0x01
    ec2a:	80 83       	st	Z, r24
    ec2c:	ce 01       	movw	r24, r28
    ec2e:	87 56       	subi	r24, 0x67	; 103
    ec30:	9f 4f       	sbci	r25, 0xFF	; 255
    ec32:	9e 01       	movw	r18, r28
    ec34:	2b 56       	subi	r18, 0x6B	; 107
    ec36:	3f 4f       	sbci	r19, 0xFF	; 255
    ec38:	f9 01       	movw	r30, r18
    ec3a:	20 81       	ld	r18, Z
    ec3c:	31 81       	ldd	r19, Z+1	; 0x01
    ec3e:	fc 01       	movw	r30, r24
    ec40:	31 83       	std	Z+1, r19	; 0x01
    ec42:	20 83       	st	Z, r18
    ec44:	ce 01       	movw	r24, r28
    ec46:	87 56       	subi	r24, 0x67	; 103
    ec48:	9f 4f       	sbci	r25, 0xFF	; 255
    ec4a:	fc 01       	movw	r30, r24
    ec4c:	80 81       	ld	r24, Z
    ec4e:	91 81       	ldd	r25, Z+1	; 0x01
    ec50:	8c 01       	movw	r16, r24
    ec52:	c8 01       	movw	r24, r16
    ec54:	01 97       	sbiw	r24, 0x01	; 1
    ec56:	f1 f7       	brne	.-4      	; 0xec54 <travel_path+0x1152>
    ec58:	8c 01       	movw	r16, r24
    ec5a:	ce 01       	movw	r24, r28
    ec5c:	87 56       	subi	r24, 0x67	; 103
    ec5e:	9f 4f       	sbci	r25, 0xFF	; 255
    ec60:	fc 01       	movw	r30, r24
    ec62:	11 83       	std	Z+1, r17	; 0x01
    ec64:	00 83       	st	Z, r16
				_delay_ms(20);
			}
			node++;
    ec66:	80 91 4f 03 	lds	r24, 0x034F
    ec6a:	90 91 50 03 	lds	r25, 0x0350
    ec6e:	01 96       	adiw	r24, 0x01	; 1
    ec70:	90 93 50 03 	sts	0x0350, r25
    ec74:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
    ec78:	80 91 4f 03 	lds	r24, 0x034F
    ec7c:	90 91 50 03 	lds	r25, 0x0350
    ec80:	8d 5a       	subi	r24, 0xAD	; 173
    ec82:	9c 4f       	sbci	r25, 0xFC	; 252
    ec84:	fc 01       	movw	r30, r24
    ec86:	80 81       	ld	r24, Z
    ec88:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
    ec8c:	80 91 4f 03 	lds	r24, 0x034F
    ec90:	90 91 50 03 	lds	r25, 0x0350
    ec94:	01 96       	adiw	r24, 0x01	; 1
    ec96:	90 93 50 03 	sts	0x0350, r25
    ec9a:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
    ec9e:	80 91 4f 03 	lds	r24, 0x034F
    eca2:	90 91 50 03 	lds	r25, 0x0350
    eca6:	8d 5a       	subi	r24, 0xAD	; 173
    eca8:	9c 4f       	sbci	r25, 0xFC	; 252
    ecaa:	fc 01       	movw	r30, r24
    ecac:	80 81       	ld	r24, Z
    ecae:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
    ecb2:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
		}
		else if(master_path[node+1]=='D')//mod
    ecb6:	80 91 4f 03 	lds	r24, 0x034F
    ecba:	90 91 50 03 	lds	r25, 0x0350
    ecbe:	01 96       	adiw	r24, 0x01	; 1
    ecc0:	8d 5a       	subi	r24, 0xAD	; 173
    ecc2:	9c 4f       	sbci	r25, 0xFC	; 252
    ecc4:	fc 01       	movw	r30, r24
    ecc6:	80 81       	ld	r24, Z
    ecc8:	84 34       	cpi	r24, 0x44	; 68
    ecca:	09 f0       	breq	.+2      	; 0xecce <travel_path+0x11cc>
    eccc:	d2 c1       	rjmp	.+932    	; 0xf072 <travel_path+0x1570>
		{
			forward_mm(20);
    ecce:	84 e1       	ldi	r24, 0x14	; 20
    ecd0:	90 e0       	ldi	r25, 0x00	; 0
    ecd2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    ecd6:	9e 01       	movw	r18, r28
    ecd8:	25 56       	subi	r18, 0x65	; 101
    ecda:	3f 4f       	sbci	r19, 0xFF	; 255
    ecdc:	80 e0       	ldi	r24, 0x00	; 0
    ecde:	90 e0       	ldi	r25, 0x00	; 0
    ece0:	a0 ea       	ldi	r26, 0xA0	; 160
    ece2:	b1 e4       	ldi	r27, 0x41	; 65
    ece4:	f9 01       	movw	r30, r18
    ece6:	80 83       	st	Z, r24
    ece8:	91 83       	std	Z+1, r25	; 0x01
    ecea:	a2 83       	std	Z+2, r26	; 0x02
    ecec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ecee:	8e 01       	movw	r16, r28
    ecf0:	01 56       	subi	r16, 0x61	; 97
    ecf2:	1f 4f       	sbci	r17, 0xFF	; 255
    ecf4:	ce 01       	movw	r24, r28
    ecf6:	85 56       	subi	r24, 0x65	; 101
    ecf8:	9f 4f       	sbci	r25, 0xFF	; 255
    ecfa:	fc 01       	movw	r30, r24
    ecfc:	60 81       	ld	r22, Z
    ecfe:	71 81       	ldd	r23, Z+1	; 0x01
    ed00:	82 81       	ldd	r24, Z+2	; 0x02
    ed02:	93 81       	ldd	r25, Z+3	; 0x03
    ed04:	26 e6       	ldi	r18, 0x66	; 102
    ed06:	36 e6       	ldi	r19, 0x66	; 102
    ed08:	46 e6       	ldi	r20, 0x66	; 102
    ed0a:	55 e4       	ldi	r21, 0x45	; 69
    ed0c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ed10:	dc 01       	movw	r26, r24
    ed12:	cb 01       	movw	r24, r22
    ed14:	f8 01       	movw	r30, r16
    ed16:	80 83       	st	Z, r24
    ed18:	91 83       	std	Z+1, r25	; 0x01
    ed1a:	a2 83       	std	Z+2, r26	; 0x02
    ed1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ed1e:	ce 01       	movw	r24, r28
    ed20:	81 56       	subi	r24, 0x61	; 97
    ed22:	9f 4f       	sbci	r25, 0xFF	; 255
    ed24:	11 e0       	ldi	r17, 0x01	; 1
    ed26:	fc 01       	movw	r30, r24
    ed28:	60 81       	ld	r22, Z
    ed2a:	71 81       	ldd	r23, Z+1	; 0x01
    ed2c:	82 81       	ldd	r24, Z+2	; 0x02
    ed2e:	93 81       	ldd	r25, Z+3	; 0x03
    ed30:	20 e0       	ldi	r18, 0x00	; 0
    ed32:	30 e0       	ldi	r19, 0x00	; 0
    ed34:	40 e8       	ldi	r20, 0x80	; 128
    ed36:	5f e3       	ldi	r21, 0x3F	; 63
    ed38:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    ed3c:	88 23       	and	r24, r24
    ed3e:	0c f0       	brlt	.+2      	; 0xed42 <travel_path+0x1240>
    ed40:	10 e0       	ldi	r17, 0x00	; 0
    ed42:	11 23       	and	r17, r17
    ed44:	49 f0       	breq	.+18     	; 0xed58 <travel_path+0x1256>
		__ticks = 1;
    ed46:	ce 01       	movw	r24, r28
    ed48:	8d 55       	subi	r24, 0x5D	; 93
    ed4a:	9f 4f       	sbci	r25, 0xFF	; 255
    ed4c:	21 e0       	ldi	r18, 0x01	; 1
    ed4e:	30 e0       	ldi	r19, 0x00	; 0
    ed50:	fc 01       	movw	r30, r24
    ed52:	31 83       	std	Z+1, r19	; 0x01
    ed54:	20 83       	st	Z, r18
    ed56:	74 c0       	rjmp	.+232    	; 0xee40 <travel_path+0x133e>
	else if (__tmp > 65535)
    ed58:	ce 01       	movw	r24, r28
    ed5a:	81 56       	subi	r24, 0x61	; 97
    ed5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ed5e:	11 e0       	ldi	r17, 0x01	; 1
    ed60:	fc 01       	movw	r30, r24
    ed62:	60 81       	ld	r22, Z
    ed64:	71 81       	ldd	r23, Z+1	; 0x01
    ed66:	82 81       	ldd	r24, Z+2	; 0x02
    ed68:	93 81       	ldd	r25, Z+3	; 0x03
    ed6a:	20 e0       	ldi	r18, 0x00	; 0
    ed6c:	3f ef       	ldi	r19, 0xFF	; 255
    ed6e:	4f e7       	ldi	r20, 0x7F	; 127
    ed70:	57 e4       	ldi	r21, 0x47	; 71
    ed72:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    ed76:	18 16       	cp	r1, r24
    ed78:	0c f0       	brlt	.+2      	; 0xed7c <travel_path+0x127a>
    ed7a:	10 e0       	ldi	r17, 0x00	; 0
    ed7c:	11 23       	and	r17, r17
    ed7e:	09 f4       	brne	.+2      	; 0xed82 <travel_path+0x1280>
    ed80:	4d c0       	rjmp	.+154    	; 0xee1c <travel_path+0x131a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ed82:	ce 01       	movw	r24, r28
    ed84:	85 56       	subi	r24, 0x65	; 101
    ed86:	9f 4f       	sbci	r25, 0xFF	; 255
    ed88:	fc 01       	movw	r30, r24
    ed8a:	60 81       	ld	r22, Z
    ed8c:	71 81       	ldd	r23, Z+1	; 0x01
    ed8e:	82 81       	ldd	r24, Z+2	; 0x02
    ed90:	93 81       	ldd	r25, Z+3	; 0x03
    ed92:	20 e0       	ldi	r18, 0x00	; 0
    ed94:	30 e0       	ldi	r19, 0x00	; 0
    ed96:	40 e2       	ldi	r20, 0x20	; 32
    ed98:	51 e4       	ldi	r21, 0x41	; 65
    ed9a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ed9e:	dc 01       	movw	r26, r24
    eda0:	cb 01       	movw	r24, r22
    eda2:	8e 01       	movw	r16, r28
    eda4:	0d 55       	subi	r16, 0x5D	; 93
    eda6:	1f 4f       	sbci	r17, 0xFF	; 255
    eda8:	bc 01       	movw	r22, r24
    edaa:	cd 01       	movw	r24, r26
    edac:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    edb0:	dc 01       	movw	r26, r24
    edb2:	cb 01       	movw	r24, r22
    edb4:	f8 01       	movw	r30, r16
    edb6:	91 83       	std	Z+1, r25	; 0x01
    edb8:	80 83       	st	Z, r24
    edba:	27 c0       	rjmp	.+78     	; 0xee0a <travel_path+0x1308>
    edbc:	ce 01       	movw	r24, r28
    edbe:	8b 55       	subi	r24, 0x5B	; 91
    edc0:	9f 4f       	sbci	r25, 0xFF	; 255
    edc2:	20 e7       	ldi	r18, 0x70	; 112
    edc4:	31 e0       	ldi	r19, 0x01	; 1
    edc6:	fc 01       	movw	r30, r24
    edc8:	31 83       	std	Z+1, r19	; 0x01
    edca:	20 83       	st	Z, r18
    edcc:	ce 01       	movw	r24, r28
    edce:	8b 55       	subi	r24, 0x5B	; 91
    edd0:	9f 4f       	sbci	r25, 0xFF	; 255
    edd2:	fc 01       	movw	r30, r24
    edd4:	80 81       	ld	r24, Z
    edd6:	91 81       	ldd	r25, Z+1	; 0x01
    edd8:	8c 01       	movw	r16, r24
    edda:	c8 01       	movw	r24, r16
    eddc:	01 97       	sbiw	r24, 0x01	; 1
    edde:	f1 f7       	brne	.-4      	; 0xeddc <travel_path+0x12da>
    ede0:	8c 01       	movw	r16, r24
    ede2:	ce 01       	movw	r24, r28
    ede4:	8b 55       	subi	r24, 0x5B	; 91
    ede6:	9f 4f       	sbci	r25, 0xFF	; 255
    ede8:	fc 01       	movw	r30, r24
    edea:	11 83       	std	Z+1, r17	; 0x01
    edec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    edee:	ce 01       	movw	r24, r28
    edf0:	8d 55       	subi	r24, 0x5D	; 93
    edf2:	9f 4f       	sbci	r25, 0xFF	; 255
    edf4:	9e 01       	movw	r18, r28
    edf6:	2d 55       	subi	r18, 0x5D	; 93
    edf8:	3f 4f       	sbci	r19, 0xFF	; 255
    edfa:	f9 01       	movw	r30, r18
    edfc:	20 81       	ld	r18, Z
    edfe:	31 81       	ldd	r19, Z+1	; 0x01
    ee00:	21 50       	subi	r18, 0x01	; 1
    ee02:	30 40       	sbci	r19, 0x00	; 0
    ee04:	fc 01       	movw	r30, r24
    ee06:	31 83       	std	Z+1, r19	; 0x01
    ee08:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ee0a:	ce 01       	movw	r24, r28
    ee0c:	8d 55       	subi	r24, 0x5D	; 93
    ee0e:	9f 4f       	sbci	r25, 0xFF	; 255
    ee10:	fc 01       	movw	r30, r24
    ee12:	80 81       	ld	r24, Z
    ee14:	91 81       	ldd	r25, Z+1	; 0x01
    ee16:	00 97       	sbiw	r24, 0x00	; 0
    ee18:	89 f6       	brne	.-94     	; 0xedbc <travel_path+0x12ba>
    ee1a:	2f c0       	rjmp	.+94     	; 0xee7a <travel_path+0x1378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ee1c:	8e 01       	movw	r16, r28
    ee1e:	0d 55       	subi	r16, 0x5D	; 93
    ee20:	1f 4f       	sbci	r17, 0xFF	; 255
    ee22:	ce 01       	movw	r24, r28
    ee24:	81 56       	subi	r24, 0x61	; 97
    ee26:	9f 4f       	sbci	r25, 0xFF	; 255
    ee28:	fc 01       	movw	r30, r24
    ee2a:	60 81       	ld	r22, Z
    ee2c:	71 81       	ldd	r23, Z+1	; 0x01
    ee2e:	82 81       	ldd	r24, Z+2	; 0x02
    ee30:	93 81       	ldd	r25, Z+3	; 0x03
    ee32:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ee36:	dc 01       	movw	r26, r24
    ee38:	cb 01       	movw	r24, r22
    ee3a:	f8 01       	movw	r30, r16
    ee3c:	91 83       	std	Z+1, r25	; 0x01
    ee3e:	80 83       	st	Z, r24
    ee40:	ce 01       	movw	r24, r28
    ee42:	89 55       	subi	r24, 0x59	; 89
    ee44:	9f 4f       	sbci	r25, 0xFF	; 255
    ee46:	9e 01       	movw	r18, r28
    ee48:	2d 55       	subi	r18, 0x5D	; 93
    ee4a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee4c:	f9 01       	movw	r30, r18
    ee4e:	20 81       	ld	r18, Z
    ee50:	31 81       	ldd	r19, Z+1	; 0x01
    ee52:	fc 01       	movw	r30, r24
    ee54:	31 83       	std	Z+1, r19	; 0x01
    ee56:	20 83       	st	Z, r18
    ee58:	ce 01       	movw	r24, r28
    ee5a:	89 55       	subi	r24, 0x59	; 89
    ee5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ee5e:	fc 01       	movw	r30, r24
    ee60:	80 81       	ld	r24, Z
    ee62:	91 81       	ldd	r25, Z+1	; 0x01
    ee64:	8c 01       	movw	r16, r24
    ee66:	c8 01       	movw	r24, r16
    ee68:	01 97       	sbiw	r24, 0x01	; 1
    ee6a:	f1 f7       	brne	.-4      	; 0xee68 <travel_path+0x1366>
    ee6c:	8c 01       	movw	r16, r24
    ee6e:	ce 01       	movw	r24, r28
    ee70:	89 55       	subi	r24, 0x59	; 89
    ee72:	9f 4f       	sbci	r25, 0xFF	; 255
    ee74:	fc 01       	movw	r30, r24
    ee76:	11 83       	std	Z+1, r17	; 0x01
    ee78:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right();
    ee7a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
    ee7e:	9e 01       	movw	r18, r28
    ee80:	27 55       	subi	r18, 0x57	; 87
    ee82:	3f 4f       	sbci	r19, 0xFF	; 255
    ee84:	80 e0       	ldi	r24, 0x00	; 0
    ee86:	90 e0       	ldi	r25, 0x00	; 0
    ee88:	a0 ea       	ldi	r26, 0xA0	; 160
    ee8a:	b1 e4       	ldi	r27, 0x41	; 65
    ee8c:	f9 01       	movw	r30, r18
    ee8e:	80 83       	st	Z, r24
    ee90:	91 83       	std	Z+1, r25	; 0x01
    ee92:	a2 83       	std	Z+2, r26	; 0x02
    ee94:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ee96:	8e 01       	movw	r16, r28
    ee98:	03 55       	subi	r16, 0x53	; 83
    ee9a:	1f 4f       	sbci	r17, 0xFF	; 255
    ee9c:	ce 01       	movw	r24, r28
    ee9e:	87 55       	subi	r24, 0x57	; 87
    eea0:	9f 4f       	sbci	r25, 0xFF	; 255
    eea2:	fc 01       	movw	r30, r24
    eea4:	60 81       	ld	r22, Z
    eea6:	71 81       	ldd	r23, Z+1	; 0x01
    eea8:	82 81       	ldd	r24, Z+2	; 0x02
    eeaa:	93 81       	ldd	r25, Z+3	; 0x03
    eeac:	26 e6       	ldi	r18, 0x66	; 102
    eeae:	36 e6       	ldi	r19, 0x66	; 102
    eeb0:	46 e6       	ldi	r20, 0x66	; 102
    eeb2:	55 e4       	ldi	r21, 0x45	; 69
    eeb4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    eeb8:	dc 01       	movw	r26, r24
    eeba:	cb 01       	movw	r24, r22
    eebc:	f8 01       	movw	r30, r16
    eebe:	80 83       	st	Z, r24
    eec0:	91 83       	std	Z+1, r25	; 0x01
    eec2:	a2 83       	std	Z+2, r26	; 0x02
    eec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    eec6:	ce 01       	movw	r24, r28
    eec8:	83 55       	subi	r24, 0x53	; 83
    eeca:	9f 4f       	sbci	r25, 0xFF	; 255
    eecc:	11 e0       	ldi	r17, 0x01	; 1
    eece:	fc 01       	movw	r30, r24
    eed0:	60 81       	ld	r22, Z
    eed2:	71 81       	ldd	r23, Z+1	; 0x01
    eed4:	82 81       	ldd	r24, Z+2	; 0x02
    eed6:	93 81       	ldd	r25, Z+3	; 0x03
    eed8:	20 e0       	ldi	r18, 0x00	; 0
    eeda:	30 e0       	ldi	r19, 0x00	; 0
    eedc:	40 e8       	ldi	r20, 0x80	; 128
    eede:	5f e3       	ldi	r21, 0x3F	; 63
    eee0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    eee4:	88 23       	and	r24, r24
    eee6:	0c f0       	brlt	.+2      	; 0xeeea <travel_path+0x13e8>
    eee8:	10 e0       	ldi	r17, 0x00	; 0
    eeea:	11 23       	and	r17, r17
    eeec:	49 f0       	breq	.+18     	; 0xef00 <travel_path+0x13fe>
		__ticks = 1;
    eeee:	ce 01       	movw	r24, r28
    eef0:	8f 54       	subi	r24, 0x4F	; 79
    eef2:	9f 4f       	sbci	r25, 0xFF	; 255
    eef4:	21 e0       	ldi	r18, 0x01	; 1
    eef6:	30 e0       	ldi	r19, 0x00	; 0
    eef8:	fc 01       	movw	r30, r24
    eefa:	31 83       	std	Z+1, r19	; 0x01
    eefc:	20 83       	st	Z, r18
    eefe:	74 c0       	rjmp	.+232    	; 0xefe8 <travel_path+0x14e6>
	else if (__tmp > 65535)
    ef00:	ce 01       	movw	r24, r28
    ef02:	83 55       	subi	r24, 0x53	; 83
    ef04:	9f 4f       	sbci	r25, 0xFF	; 255
    ef06:	11 e0       	ldi	r17, 0x01	; 1
    ef08:	fc 01       	movw	r30, r24
    ef0a:	60 81       	ld	r22, Z
    ef0c:	71 81       	ldd	r23, Z+1	; 0x01
    ef0e:	82 81       	ldd	r24, Z+2	; 0x02
    ef10:	93 81       	ldd	r25, Z+3	; 0x03
    ef12:	20 e0       	ldi	r18, 0x00	; 0
    ef14:	3f ef       	ldi	r19, 0xFF	; 255
    ef16:	4f e7       	ldi	r20, 0x7F	; 127
    ef18:	57 e4       	ldi	r21, 0x47	; 71
    ef1a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    ef1e:	18 16       	cp	r1, r24
    ef20:	0c f0       	brlt	.+2      	; 0xef24 <travel_path+0x1422>
    ef22:	10 e0       	ldi	r17, 0x00	; 0
    ef24:	11 23       	and	r17, r17
    ef26:	09 f4       	brne	.+2      	; 0xef2a <travel_path+0x1428>
    ef28:	4d c0       	rjmp	.+154    	; 0xefc4 <travel_path+0x14c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ef2a:	ce 01       	movw	r24, r28
    ef2c:	87 55       	subi	r24, 0x57	; 87
    ef2e:	9f 4f       	sbci	r25, 0xFF	; 255
    ef30:	fc 01       	movw	r30, r24
    ef32:	60 81       	ld	r22, Z
    ef34:	71 81       	ldd	r23, Z+1	; 0x01
    ef36:	82 81       	ldd	r24, Z+2	; 0x02
    ef38:	93 81       	ldd	r25, Z+3	; 0x03
    ef3a:	20 e0       	ldi	r18, 0x00	; 0
    ef3c:	30 e0       	ldi	r19, 0x00	; 0
    ef3e:	40 e2       	ldi	r20, 0x20	; 32
    ef40:	51 e4       	ldi	r21, 0x41	; 65
    ef42:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ef46:	dc 01       	movw	r26, r24
    ef48:	cb 01       	movw	r24, r22
    ef4a:	8e 01       	movw	r16, r28
    ef4c:	0f 54       	subi	r16, 0x4F	; 79
    ef4e:	1f 4f       	sbci	r17, 0xFF	; 255
    ef50:	bc 01       	movw	r22, r24
    ef52:	cd 01       	movw	r24, r26
    ef54:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ef58:	dc 01       	movw	r26, r24
    ef5a:	cb 01       	movw	r24, r22
    ef5c:	f8 01       	movw	r30, r16
    ef5e:	91 83       	std	Z+1, r25	; 0x01
    ef60:	80 83       	st	Z, r24
    ef62:	27 c0       	rjmp	.+78     	; 0xefb2 <travel_path+0x14b0>
    ef64:	ce 01       	movw	r24, r28
    ef66:	8d 54       	subi	r24, 0x4D	; 77
    ef68:	9f 4f       	sbci	r25, 0xFF	; 255
    ef6a:	20 e7       	ldi	r18, 0x70	; 112
    ef6c:	31 e0       	ldi	r19, 0x01	; 1
    ef6e:	fc 01       	movw	r30, r24
    ef70:	31 83       	std	Z+1, r19	; 0x01
    ef72:	20 83       	st	Z, r18
    ef74:	ce 01       	movw	r24, r28
    ef76:	8d 54       	subi	r24, 0x4D	; 77
    ef78:	9f 4f       	sbci	r25, 0xFF	; 255
    ef7a:	fc 01       	movw	r30, r24
    ef7c:	80 81       	ld	r24, Z
    ef7e:	91 81       	ldd	r25, Z+1	; 0x01
    ef80:	8c 01       	movw	r16, r24
    ef82:	c8 01       	movw	r24, r16
    ef84:	01 97       	sbiw	r24, 0x01	; 1
    ef86:	f1 f7       	brne	.-4      	; 0xef84 <travel_path+0x1482>
    ef88:	8c 01       	movw	r16, r24
    ef8a:	ce 01       	movw	r24, r28
    ef8c:	8d 54       	subi	r24, 0x4D	; 77
    ef8e:	9f 4f       	sbci	r25, 0xFF	; 255
    ef90:	fc 01       	movw	r30, r24
    ef92:	11 83       	std	Z+1, r17	; 0x01
    ef94:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ef96:	ce 01       	movw	r24, r28
    ef98:	8f 54       	subi	r24, 0x4F	; 79
    ef9a:	9f 4f       	sbci	r25, 0xFF	; 255
    ef9c:	9e 01       	movw	r18, r28
    ef9e:	2f 54       	subi	r18, 0x4F	; 79
    efa0:	3f 4f       	sbci	r19, 0xFF	; 255
    efa2:	f9 01       	movw	r30, r18
    efa4:	20 81       	ld	r18, Z
    efa6:	31 81       	ldd	r19, Z+1	; 0x01
    efa8:	21 50       	subi	r18, 0x01	; 1
    efaa:	30 40       	sbci	r19, 0x00	; 0
    efac:	fc 01       	movw	r30, r24
    efae:	31 83       	std	Z+1, r19	; 0x01
    efb0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    efb2:	ce 01       	movw	r24, r28
    efb4:	8f 54       	subi	r24, 0x4F	; 79
    efb6:	9f 4f       	sbci	r25, 0xFF	; 255
    efb8:	fc 01       	movw	r30, r24
    efba:	80 81       	ld	r24, Z
    efbc:	91 81       	ldd	r25, Z+1	; 0x01
    efbe:	00 97       	sbiw	r24, 0x00	; 0
    efc0:	89 f6       	brne	.-94     	; 0xef64 <travel_path+0x1462>
    efc2:	2f c0       	rjmp	.+94     	; 0xf022 <travel_path+0x1520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    efc4:	8e 01       	movw	r16, r28
    efc6:	0f 54       	subi	r16, 0x4F	; 79
    efc8:	1f 4f       	sbci	r17, 0xFF	; 255
    efca:	ce 01       	movw	r24, r28
    efcc:	83 55       	subi	r24, 0x53	; 83
    efce:	9f 4f       	sbci	r25, 0xFF	; 255
    efd0:	fc 01       	movw	r30, r24
    efd2:	60 81       	ld	r22, Z
    efd4:	71 81       	ldd	r23, Z+1	; 0x01
    efd6:	82 81       	ldd	r24, Z+2	; 0x02
    efd8:	93 81       	ldd	r25, Z+3	; 0x03
    efda:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    efde:	dc 01       	movw	r26, r24
    efe0:	cb 01       	movw	r24, r22
    efe2:	f8 01       	movw	r30, r16
    efe4:	91 83       	std	Z+1, r25	; 0x01
    efe6:	80 83       	st	Z, r24
    efe8:	ce 01       	movw	r24, r28
    efea:	8b 54       	subi	r24, 0x4B	; 75
    efec:	9f 4f       	sbci	r25, 0xFF	; 255
    efee:	9e 01       	movw	r18, r28
    eff0:	2f 54       	subi	r18, 0x4F	; 79
    eff2:	3f 4f       	sbci	r19, 0xFF	; 255
    eff4:	f9 01       	movw	r30, r18
    eff6:	20 81       	ld	r18, Z
    eff8:	31 81       	ldd	r19, Z+1	; 0x01
    effa:	fc 01       	movw	r30, r24
    effc:	31 83       	std	Z+1, r19	; 0x01
    effe:	20 83       	st	Z, r18
    f000:	ce 01       	movw	r24, r28
    f002:	8b 54       	subi	r24, 0x4B	; 75
    f004:	9f 4f       	sbci	r25, 0xFF	; 255
    f006:	fc 01       	movw	r30, r24
    f008:	80 81       	ld	r24, Z
    f00a:	91 81       	ldd	r25, Z+1	; 0x01
    f00c:	8c 01       	movw	r16, r24
    f00e:	c8 01       	movw	r24, r16
    f010:	01 97       	sbiw	r24, 0x01	; 1
    f012:	f1 f7       	brne	.-4      	; 0xf010 <travel_path+0x150e>
    f014:	8c 01       	movw	r16, r24
    f016:	ce 01       	movw	r24, r28
    f018:	8b 54       	subi	r24, 0x4B	; 75
    f01a:	9f 4f       	sbci	r25, 0xFF	; 255
    f01c:	fc 01       	movw	r30, r24
    f01e:	11 83       	std	Z+1, r17	; 0x01
    f020:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
    f022:	80 91 4f 03 	lds	r24, 0x034F
    f026:	90 91 50 03 	lds	r25, 0x0350
    f02a:	01 96       	adiw	r24, 0x01	; 1
    f02c:	90 93 50 03 	sts	0x0350, r25
    f030:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
    f034:	80 91 4f 03 	lds	r24, 0x034F
    f038:	90 91 50 03 	lds	r25, 0x0350
    f03c:	8d 5a       	subi	r24, 0xAD	; 173
    f03e:	9c 4f       	sbci	r25, 0xFC	; 252
    f040:	fc 01       	movw	r30, r24
    f042:	80 81       	ld	r24, Z
    f044:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
    f048:	80 91 4f 03 	lds	r24, 0x034F
    f04c:	90 91 50 03 	lds	r25, 0x0350
    f050:	01 96       	adiw	r24, 0x01	; 1
    f052:	90 93 50 03 	sts	0x0350, r25
    f056:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
    f05a:	80 91 4f 03 	lds	r24, 0x034F
    f05e:	90 91 50 03 	lds	r25, 0x0350
    f062:	8d 5a       	subi	r24, 0xAD	; 173
    f064:	9c 4f       	sbci	r25, 0xFC	; 252
    f066:	fc 01       	movw	r30, r24
    f068:	80 81       	ld	r24, Z
    f06a:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
			node--;
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
			correct_right2();
			else 
			correct_right();
			node++;		
    f06e:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
			node++;
			travel_path(master_path[node]);
		}

		else{
			node--;
    f072:	80 91 4f 03 	lds	r24, 0x034F
    f076:	90 91 50 03 	lds	r25, 0x0350
    f07a:	01 97       	sbiw	r24, 0x01	; 1
    f07c:	90 93 50 03 	sts	0x0350, r25
    f080:	80 93 4f 03 	sts	0x034F, r24
			if(master_path[node-1]=='L'||master_path[node-1]=='R'||master_path[node-1]=='U')
    f084:	80 91 4f 03 	lds	r24, 0x034F
    f088:	90 91 50 03 	lds	r25, 0x0350
    f08c:	01 97       	sbiw	r24, 0x01	; 1
    f08e:	8d 5a       	subi	r24, 0xAD	; 173
    f090:	9c 4f       	sbci	r25, 0xFC	; 252
    f092:	fc 01       	movw	r30, r24
    f094:	80 81       	ld	r24, Z
    f096:	8c 34       	cpi	r24, 0x4C	; 76
    f098:	b1 f0       	breq	.+44     	; 0xf0c6 <travel_path+0x15c4>
    f09a:	80 91 4f 03 	lds	r24, 0x034F
    f09e:	90 91 50 03 	lds	r25, 0x0350
    f0a2:	01 97       	sbiw	r24, 0x01	; 1
    f0a4:	8d 5a       	subi	r24, 0xAD	; 173
    f0a6:	9c 4f       	sbci	r25, 0xFC	; 252
    f0a8:	fc 01       	movw	r30, r24
    f0aa:	80 81       	ld	r24, Z
    f0ac:	82 35       	cpi	r24, 0x52	; 82
    f0ae:	59 f0       	breq	.+22     	; 0xf0c6 <travel_path+0x15c4>
    f0b0:	80 91 4f 03 	lds	r24, 0x034F
    f0b4:	90 91 50 03 	lds	r25, 0x0350
    f0b8:	01 97       	sbiw	r24, 0x01	; 1
    f0ba:	8d 5a       	subi	r24, 0xAD	; 173
    f0bc:	9c 4f       	sbci	r25, 0xFC	; 252
    f0be:	fc 01       	movw	r30, r24
    f0c0:	80 81       	ld	r24, Z
    f0c2:	85 35       	cpi	r24, 0x55	; 85
    f0c4:	19 f4       	brne	.+6      	; 0xf0cc <travel_path+0x15ca>
			correct_right2();
    f0c6:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <correct_right2>
    f0ca:	02 c0       	rjmp	.+4      	; 0xf0d0 <travel_path+0x15ce>
			else 
			correct_right();
    f0cc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <correct_right>
			node++;		
    f0d0:	80 91 4f 03 	lds	r24, 0x034F
    f0d4:	90 91 50 03 	lds	r25, 0x0350
    f0d8:	01 96       	adiw	r24, 0x01	; 1
    f0da:	90 93 50 03 	sts	0x0350, r25
    f0de:	80 93 4f 03 	sts	0x034F, r24
    f0e2:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
		}
	}
		else if(pos_val=='L')
    f0e6:	ce 01       	movw	r24, r28
    f0e8:	81 53       	subi	r24, 0x31	; 49
    f0ea:	9e 4f       	sbci	r25, 0xFE	; 254
    f0ec:	fc 01       	movw	r30, r24
    f0ee:	80 81       	ld	r24, Z
    f0f0:	8c 34       	cpi	r24, 0x4C	; 76
    f0f2:	11 f0       	breq	.+4      	; 0xf0f8 <travel_path+0x15f6>
    f0f4:	0c 94 cd 82 	jmp	0x1059a	; 0x1059a <travel_path+0x2a98>
		{
			if(node==0)
    f0f8:	80 91 4f 03 	lds	r24, 0x034F
    f0fc:	90 91 50 03 	lds	r25, 0x0350
    f100:	00 97       	sbiw	r24, 0x00	; 0
    f102:	21 f4       	brne	.+8      	; 0xf10c <travel_path+0x160a>
			correct_left();
    f104:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
    f108:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
	}
		else if(pos_val=='L')
		{
			if(node==0)
			correct_left();
			else if(master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
    f10c:	80 91 4f 03 	lds	r24, 0x034F
    f110:	90 91 50 03 	lds	r25, 0x0350
    f114:	01 96       	adiw	r24, 0x01	; 1
    f116:	8d 5a       	subi	r24, 0xAD	; 173
    f118:	9c 4f       	sbci	r25, 0xFC	; 252
    f11a:	fc 01       	movw	r30, r24
    f11c:	80 81       	ld	r24, Z
    f11e:	81 33       	cpi	r24, 0x31	; 49
    f120:	09 f4       	brne	.+2      	; 0xf124 <travel_path+0x1622>
    f122:	50 c0       	rjmp	.+160    	; 0xf1c4 <travel_path+0x16c2>
    f124:	80 91 4f 03 	lds	r24, 0x034F
    f128:	90 91 50 03 	lds	r25, 0x0350
    f12c:	01 96       	adiw	r24, 0x01	; 1
    f12e:	8d 5a       	subi	r24, 0xAD	; 173
    f130:	9c 4f       	sbci	r25, 0xFC	; 252
    f132:	fc 01       	movw	r30, r24
    f134:	80 81       	ld	r24, Z
    f136:	82 33       	cpi	r24, 0x32	; 50
    f138:	09 f4       	brne	.+2      	; 0xf13c <travel_path+0x163a>
    f13a:	44 c0       	rjmp	.+136    	; 0xf1c4 <travel_path+0x16c2>
    f13c:	80 91 4f 03 	lds	r24, 0x034F
    f140:	90 91 50 03 	lds	r25, 0x0350
    f144:	01 96       	adiw	r24, 0x01	; 1
    f146:	8d 5a       	subi	r24, 0xAD	; 173
    f148:	9c 4f       	sbci	r25, 0xFC	; 252
    f14a:	fc 01       	movw	r30, r24
    f14c:	80 81       	ld	r24, Z
    f14e:	83 33       	cpi	r24, 0x33	; 51
    f150:	c9 f1       	breq	.+114    	; 0xf1c4 <travel_path+0x16c2>
    f152:	80 91 4f 03 	lds	r24, 0x034F
    f156:	90 91 50 03 	lds	r25, 0x0350
    f15a:	01 96       	adiw	r24, 0x01	; 1
    f15c:	8d 5a       	subi	r24, 0xAD	; 173
    f15e:	9c 4f       	sbci	r25, 0xFC	; 252
    f160:	fc 01       	movw	r30, r24
    f162:	80 81       	ld	r24, Z
    f164:	84 33       	cpi	r24, 0x34	; 52
    f166:	71 f1       	breq	.+92     	; 0xf1c4 <travel_path+0x16c2>
    f168:	80 91 4f 03 	lds	r24, 0x034F
    f16c:	90 91 50 03 	lds	r25, 0x0350
    f170:	01 96       	adiw	r24, 0x01	; 1
    f172:	8d 5a       	subi	r24, 0xAD	; 173
    f174:	9c 4f       	sbci	r25, 0xFC	; 252
    f176:	fc 01       	movw	r30, r24
    f178:	80 81       	ld	r24, Z
    f17a:	85 33       	cpi	r24, 0x35	; 53
    f17c:	19 f1       	breq	.+70     	; 0xf1c4 <travel_path+0x16c2>
    f17e:	80 91 4f 03 	lds	r24, 0x034F
    f182:	90 91 50 03 	lds	r25, 0x0350
    f186:	01 96       	adiw	r24, 0x01	; 1
    f188:	8d 5a       	subi	r24, 0xAD	; 173
    f18a:	9c 4f       	sbci	r25, 0xFC	; 252
    f18c:	fc 01       	movw	r30, r24
    f18e:	80 81       	ld	r24, Z
    f190:	86 33       	cpi	r24, 0x36	; 54
    f192:	c1 f0       	breq	.+48     	; 0xf1c4 <travel_path+0x16c2>
    f194:	80 91 4f 03 	lds	r24, 0x034F
    f198:	90 91 50 03 	lds	r25, 0x0350
    f19c:	01 96       	adiw	r24, 0x01	; 1
    f19e:	8d 5a       	subi	r24, 0xAD	; 173
    f1a0:	9c 4f       	sbci	r25, 0xFC	; 252
    f1a2:	fc 01       	movw	r30, r24
    f1a4:	80 81       	ld	r24, Z
    f1a6:	87 33       	cpi	r24, 0x37	; 55
    f1a8:	69 f0       	breq	.+26     	; 0xf1c4 <travel_path+0x16c2>
    f1aa:	80 91 4f 03 	lds	r24, 0x034F
    f1ae:	90 91 50 03 	lds	r25, 0x0350
    f1b2:	01 96       	adiw	r24, 0x01	; 1
    f1b4:	8d 5a       	subi	r24, 0xAD	; 173
    f1b6:	9c 4f       	sbci	r25, 0xFC	; 252
    f1b8:	fc 01       	movw	r30, r24
    f1ba:	80 81       	ld	r24, Z
    f1bc:	88 33       	cpi	r24, 0x38	; 56
    f1be:	11 f0       	breq	.+4      	; 0xf1c4 <travel_path+0x16c2>
    f1c0:	0c 94 b8 80 	jmp	0x10170	; 0x10170 <travel_path+0x266e>
			{
				if(master_path[node+1]=='7'||master_path[node+1]=='6')
    f1c4:	80 91 4f 03 	lds	r24, 0x034F
    f1c8:	90 91 50 03 	lds	r25, 0x0350
    f1cc:	01 96       	adiw	r24, 0x01	; 1
    f1ce:	8d 5a       	subi	r24, 0xAD	; 173
    f1d0:	9c 4f       	sbci	r25, 0xFC	; 252
    f1d2:	fc 01       	movw	r30, r24
    f1d4:	80 81       	ld	r24, Z
    f1d6:	87 33       	cpi	r24, 0x37	; 55
    f1d8:	61 f0       	breq	.+24     	; 0xf1f2 <travel_path+0x16f0>
    f1da:	80 91 4f 03 	lds	r24, 0x034F
    f1de:	90 91 50 03 	lds	r25, 0x0350
    f1e2:	01 96       	adiw	r24, 0x01	; 1
    f1e4:	8d 5a       	subi	r24, 0xAD	; 173
    f1e6:	9c 4f       	sbci	r25, 0xFC	; 252
    f1e8:	fc 01       	movw	r30, r24
    f1ea:	80 81       	ld	r24, Z
    f1ec:	86 33       	cpi	r24, 0x36	; 54
    f1ee:	09 f0       	breq	.+2      	; 0xf1f2 <travel_path+0x16f0>
    f1f0:	ad c1       	rjmp	.+858    	; 0xf54c <travel_path+0x1a4a>
				{
					forward_mm(25);
    f1f2:	89 e1       	ldi	r24, 0x19	; 25
    f1f4:	90 e0       	ldi	r25, 0x00	; 0
    f1f6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    f1fa:	9e 01       	movw	r18, r28
    f1fc:	29 54       	subi	r18, 0x49	; 73
    f1fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f200:	80 e0       	ldi	r24, 0x00	; 0
    f202:	90 e0       	ldi	r25, 0x00	; 0
    f204:	a0 ea       	ldi	r26, 0xA0	; 160
    f206:	b1 e4       	ldi	r27, 0x41	; 65
    f208:	f9 01       	movw	r30, r18
    f20a:	80 83       	st	Z, r24
    f20c:	91 83       	std	Z+1, r25	; 0x01
    f20e:	a2 83       	std	Z+2, r26	; 0x02
    f210:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f212:	8e 01       	movw	r16, r28
    f214:	05 54       	subi	r16, 0x45	; 69
    f216:	1f 4f       	sbci	r17, 0xFF	; 255
    f218:	ce 01       	movw	r24, r28
    f21a:	89 54       	subi	r24, 0x49	; 73
    f21c:	9f 4f       	sbci	r25, 0xFF	; 255
    f21e:	fc 01       	movw	r30, r24
    f220:	60 81       	ld	r22, Z
    f222:	71 81       	ldd	r23, Z+1	; 0x01
    f224:	82 81       	ldd	r24, Z+2	; 0x02
    f226:	93 81       	ldd	r25, Z+3	; 0x03
    f228:	26 e6       	ldi	r18, 0x66	; 102
    f22a:	36 e6       	ldi	r19, 0x66	; 102
    f22c:	46 e6       	ldi	r20, 0x66	; 102
    f22e:	55 e4       	ldi	r21, 0x45	; 69
    f230:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f234:	dc 01       	movw	r26, r24
    f236:	cb 01       	movw	r24, r22
    f238:	f8 01       	movw	r30, r16
    f23a:	80 83       	st	Z, r24
    f23c:	91 83       	std	Z+1, r25	; 0x01
    f23e:	a2 83       	std	Z+2, r26	; 0x02
    f240:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f242:	ce 01       	movw	r24, r28
    f244:	85 54       	subi	r24, 0x45	; 69
    f246:	9f 4f       	sbci	r25, 0xFF	; 255
    f248:	11 e0       	ldi	r17, 0x01	; 1
    f24a:	fc 01       	movw	r30, r24
    f24c:	60 81       	ld	r22, Z
    f24e:	71 81       	ldd	r23, Z+1	; 0x01
    f250:	82 81       	ldd	r24, Z+2	; 0x02
    f252:	93 81       	ldd	r25, Z+3	; 0x03
    f254:	20 e0       	ldi	r18, 0x00	; 0
    f256:	30 e0       	ldi	r19, 0x00	; 0
    f258:	40 e8       	ldi	r20, 0x80	; 128
    f25a:	5f e3       	ldi	r21, 0x3F	; 63
    f25c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    f260:	88 23       	and	r24, r24
    f262:	0c f0       	brlt	.+2      	; 0xf266 <travel_path+0x1764>
    f264:	10 e0       	ldi	r17, 0x00	; 0
    f266:	11 23       	and	r17, r17
    f268:	49 f0       	breq	.+18     	; 0xf27c <travel_path+0x177a>
		__ticks = 1;
    f26a:	ce 01       	movw	r24, r28
    f26c:	81 54       	subi	r24, 0x41	; 65
    f26e:	9f 4f       	sbci	r25, 0xFF	; 255
    f270:	21 e0       	ldi	r18, 0x01	; 1
    f272:	30 e0       	ldi	r19, 0x00	; 0
    f274:	fc 01       	movw	r30, r24
    f276:	31 83       	std	Z+1, r19	; 0x01
    f278:	20 83       	st	Z, r18
    f27a:	74 c0       	rjmp	.+232    	; 0xf364 <travel_path+0x1862>
	else if (__tmp > 65535)
    f27c:	ce 01       	movw	r24, r28
    f27e:	85 54       	subi	r24, 0x45	; 69
    f280:	9f 4f       	sbci	r25, 0xFF	; 255
    f282:	11 e0       	ldi	r17, 0x01	; 1
    f284:	fc 01       	movw	r30, r24
    f286:	60 81       	ld	r22, Z
    f288:	71 81       	ldd	r23, Z+1	; 0x01
    f28a:	82 81       	ldd	r24, Z+2	; 0x02
    f28c:	93 81       	ldd	r25, Z+3	; 0x03
    f28e:	20 e0       	ldi	r18, 0x00	; 0
    f290:	3f ef       	ldi	r19, 0xFF	; 255
    f292:	4f e7       	ldi	r20, 0x7F	; 127
    f294:	57 e4       	ldi	r21, 0x47	; 71
    f296:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    f29a:	18 16       	cp	r1, r24
    f29c:	0c f0       	brlt	.+2      	; 0xf2a0 <travel_path+0x179e>
    f29e:	10 e0       	ldi	r17, 0x00	; 0
    f2a0:	11 23       	and	r17, r17
    f2a2:	09 f4       	brne	.+2      	; 0xf2a6 <travel_path+0x17a4>
    f2a4:	4d c0       	rjmp	.+154    	; 0xf340 <travel_path+0x183e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f2a6:	ce 01       	movw	r24, r28
    f2a8:	89 54       	subi	r24, 0x49	; 73
    f2aa:	9f 4f       	sbci	r25, 0xFF	; 255
    f2ac:	fc 01       	movw	r30, r24
    f2ae:	60 81       	ld	r22, Z
    f2b0:	71 81       	ldd	r23, Z+1	; 0x01
    f2b2:	82 81       	ldd	r24, Z+2	; 0x02
    f2b4:	93 81       	ldd	r25, Z+3	; 0x03
    f2b6:	20 e0       	ldi	r18, 0x00	; 0
    f2b8:	30 e0       	ldi	r19, 0x00	; 0
    f2ba:	40 e2       	ldi	r20, 0x20	; 32
    f2bc:	51 e4       	ldi	r21, 0x41	; 65
    f2be:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f2c2:	dc 01       	movw	r26, r24
    f2c4:	cb 01       	movw	r24, r22
    f2c6:	8e 01       	movw	r16, r28
    f2c8:	01 54       	subi	r16, 0x41	; 65
    f2ca:	1f 4f       	sbci	r17, 0xFF	; 255
    f2cc:	bc 01       	movw	r22, r24
    f2ce:	cd 01       	movw	r24, r26
    f2d0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f2d4:	dc 01       	movw	r26, r24
    f2d6:	cb 01       	movw	r24, r22
    f2d8:	f8 01       	movw	r30, r16
    f2da:	91 83       	std	Z+1, r25	; 0x01
    f2dc:	80 83       	st	Z, r24
    f2de:	27 c0       	rjmp	.+78     	; 0xf32e <travel_path+0x182c>
    f2e0:	ce 01       	movw	r24, r28
    f2e2:	8f 53       	subi	r24, 0x3F	; 63
    f2e4:	9f 4f       	sbci	r25, 0xFF	; 255
    f2e6:	20 e7       	ldi	r18, 0x70	; 112
    f2e8:	31 e0       	ldi	r19, 0x01	; 1
    f2ea:	fc 01       	movw	r30, r24
    f2ec:	31 83       	std	Z+1, r19	; 0x01
    f2ee:	20 83       	st	Z, r18
    f2f0:	ce 01       	movw	r24, r28
    f2f2:	8f 53       	subi	r24, 0x3F	; 63
    f2f4:	9f 4f       	sbci	r25, 0xFF	; 255
    f2f6:	fc 01       	movw	r30, r24
    f2f8:	80 81       	ld	r24, Z
    f2fa:	91 81       	ldd	r25, Z+1	; 0x01
    f2fc:	8c 01       	movw	r16, r24
    f2fe:	c8 01       	movw	r24, r16
    f300:	01 97       	sbiw	r24, 0x01	; 1
    f302:	f1 f7       	brne	.-4      	; 0xf300 <travel_path+0x17fe>
    f304:	8c 01       	movw	r16, r24
    f306:	ce 01       	movw	r24, r28
    f308:	8f 53       	subi	r24, 0x3F	; 63
    f30a:	9f 4f       	sbci	r25, 0xFF	; 255
    f30c:	fc 01       	movw	r30, r24
    f30e:	11 83       	std	Z+1, r17	; 0x01
    f310:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f312:	ce 01       	movw	r24, r28
    f314:	81 54       	subi	r24, 0x41	; 65
    f316:	9f 4f       	sbci	r25, 0xFF	; 255
    f318:	9e 01       	movw	r18, r28
    f31a:	21 54       	subi	r18, 0x41	; 65
    f31c:	3f 4f       	sbci	r19, 0xFF	; 255
    f31e:	f9 01       	movw	r30, r18
    f320:	20 81       	ld	r18, Z
    f322:	31 81       	ldd	r19, Z+1	; 0x01
    f324:	21 50       	subi	r18, 0x01	; 1
    f326:	30 40       	sbci	r19, 0x00	; 0
    f328:	fc 01       	movw	r30, r24
    f32a:	31 83       	std	Z+1, r19	; 0x01
    f32c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f32e:	ce 01       	movw	r24, r28
    f330:	81 54       	subi	r24, 0x41	; 65
    f332:	9f 4f       	sbci	r25, 0xFF	; 255
    f334:	fc 01       	movw	r30, r24
    f336:	80 81       	ld	r24, Z
    f338:	91 81       	ldd	r25, Z+1	; 0x01
    f33a:	00 97       	sbiw	r24, 0x00	; 0
    f33c:	89 f6       	brne	.-94     	; 0xf2e0 <travel_path+0x17de>
    f33e:	2f c0       	rjmp	.+94     	; 0xf39e <travel_path+0x189c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f340:	8e 01       	movw	r16, r28
    f342:	01 54       	subi	r16, 0x41	; 65
    f344:	1f 4f       	sbci	r17, 0xFF	; 255
    f346:	ce 01       	movw	r24, r28
    f348:	85 54       	subi	r24, 0x45	; 69
    f34a:	9f 4f       	sbci	r25, 0xFF	; 255
    f34c:	fc 01       	movw	r30, r24
    f34e:	60 81       	ld	r22, Z
    f350:	71 81       	ldd	r23, Z+1	; 0x01
    f352:	82 81       	ldd	r24, Z+2	; 0x02
    f354:	93 81       	ldd	r25, Z+3	; 0x03
    f356:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f35a:	dc 01       	movw	r26, r24
    f35c:	cb 01       	movw	r24, r22
    f35e:	f8 01       	movw	r30, r16
    f360:	91 83       	std	Z+1, r25	; 0x01
    f362:	80 83       	st	Z, r24
    f364:	ce 01       	movw	r24, r28
    f366:	8d 53       	subi	r24, 0x3D	; 61
    f368:	9f 4f       	sbci	r25, 0xFF	; 255
    f36a:	9e 01       	movw	r18, r28
    f36c:	21 54       	subi	r18, 0x41	; 65
    f36e:	3f 4f       	sbci	r19, 0xFF	; 255
    f370:	f9 01       	movw	r30, r18
    f372:	20 81       	ld	r18, Z
    f374:	31 81       	ldd	r19, Z+1	; 0x01
    f376:	fc 01       	movw	r30, r24
    f378:	31 83       	std	Z+1, r19	; 0x01
    f37a:	20 83       	st	Z, r18
    f37c:	ce 01       	movw	r24, r28
    f37e:	8d 53       	subi	r24, 0x3D	; 61
    f380:	9f 4f       	sbci	r25, 0xFF	; 255
    f382:	fc 01       	movw	r30, r24
    f384:	80 81       	ld	r24, Z
    f386:	91 81       	ldd	r25, Z+1	; 0x01
    f388:	8c 01       	movw	r16, r24
    f38a:	c8 01       	movw	r24, r16
    f38c:	01 97       	sbiw	r24, 0x01	; 1
    f38e:	f1 f7       	brne	.-4      	; 0xf38c <travel_path+0x188a>
    f390:	8c 01       	movw	r16, r24
    f392:	ce 01       	movw	r24, r28
    f394:	8d 53       	subi	r24, 0x3D	; 61
    f396:	9f 4f       	sbci	r25, 0xFF	; 255
    f398:	fc 01       	movw	r30, r24
    f39a:	11 83       	std	Z+1, r17	; 0x01
    f39c:	00 83       	st	Z, r16
					_delay_ms(20);
					stop();
    f39e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f3a2:	9e 01       	movw	r18, r28
    f3a4:	2b 53       	subi	r18, 0x3B	; 59
    f3a6:	3f 4f       	sbci	r19, 0xFF	; 255
    f3a8:	80 e0       	ldi	r24, 0x00	; 0
    f3aa:	90 e0       	ldi	r25, 0x00	; 0
    f3ac:	a8 ec       	ldi	r26, 0xC8	; 200
    f3ae:	b1 e4       	ldi	r27, 0x41	; 65
    f3b0:	f9 01       	movw	r30, r18
    f3b2:	80 83       	st	Z, r24
    f3b4:	91 83       	std	Z+1, r25	; 0x01
    f3b6:	a2 83       	std	Z+2, r26	; 0x02
    f3b8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f3ba:	8e 01       	movw	r16, r28
    f3bc:	07 53       	subi	r16, 0x37	; 55
    f3be:	1f 4f       	sbci	r17, 0xFF	; 255
    f3c0:	ce 01       	movw	r24, r28
    f3c2:	8b 53       	subi	r24, 0x3B	; 59
    f3c4:	9f 4f       	sbci	r25, 0xFF	; 255
    f3c6:	fc 01       	movw	r30, r24
    f3c8:	60 81       	ld	r22, Z
    f3ca:	71 81       	ldd	r23, Z+1	; 0x01
    f3cc:	82 81       	ldd	r24, Z+2	; 0x02
    f3ce:	93 81       	ldd	r25, Z+3	; 0x03
    f3d0:	26 e6       	ldi	r18, 0x66	; 102
    f3d2:	36 e6       	ldi	r19, 0x66	; 102
    f3d4:	46 e6       	ldi	r20, 0x66	; 102
    f3d6:	55 e4       	ldi	r21, 0x45	; 69
    f3d8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f3dc:	dc 01       	movw	r26, r24
    f3de:	cb 01       	movw	r24, r22
    f3e0:	f8 01       	movw	r30, r16
    f3e2:	80 83       	st	Z, r24
    f3e4:	91 83       	std	Z+1, r25	; 0x01
    f3e6:	a2 83       	std	Z+2, r26	; 0x02
    f3e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f3ea:	ce 01       	movw	r24, r28
    f3ec:	87 53       	subi	r24, 0x37	; 55
    f3ee:	9f 4f       	sbci	r25, 0xFF	; 255
    f3f0:	11 e0       	ldi	r17, 0x01	; 1
    f3f2:	fc 01       	movw	r30, r24
    f3f4:	60 81       	ld	r22, Z
    f3f6:	71 81       	ldd	r23, Z+1	; 0x01
    f3f8:	82 81       	ldd	r24, Z+2	; 0x02
    f3fa:	93 81       	ldd	r25, Z+3	; 0x03
    f3fc:	20 e0       	ldi	r18, 0x00	; 0
    f3fe:	30 e0       	ldi	r19, 0x00	; 0
    f400:	40 e8       	ldi	r20, 0x80	; 128
    f402:	5f e3       	ldi	r21, 0x3F	; 63
    f404:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    f408:	88 23       	and	r24, r24
    f40a:	0c f0       	brlt	.+2      	; 0xf40e <travel_path+0x190c>
    f40c:	10 e0       	ldi	r17, 0x00	; 0
    f40e:	11 23       	and	r17, r17
    f410:	49 f0       	breq	.+18     	; 0xf424 <travel_path+0x1922>
		__ticks = 1;
    f412:	ce 01       	movw	r24, r28
    f414:	83 53       	subi	r24, 0x33	; 51
    f416:	9f 4f       	sbci	r25, 0xFF	; 255
    f418:	21 e0       	ldi	r18, 0x01	; 1
    f41a:	30 e0       	ldi	r19, 0x00	; 0
    f41c:	fc 01       	movw	r30, r24
    f41e:	31 83       	std	Z+1, r19	; 0x01
    f420:	20 83       	st	Z, r18
    f422:	74 c0       	rjmp	.+232    	; 0xf50c <travel_path+0x1a0a>
	else if (__tmp > 65535)
    f424:	ce 01       	movw	r24, r28
    f426:	87 53       	subi	r24, 0x37	; 55
    f428:	9f 4f       	sbci	r25, 0xFF	; 255
    f42a:	11 e0       	ldi	r17, 0x01	; 1
    f42c:	fc 01       	movw	r30, r24
    f42e:	60 81       	ld	r22, Z
    f430:	71 81       	ldd	r23, Z+1	; 0x01
    f432:	82 81       	ldd	r24, Z+2	; 0x02
    f434:	93 81       	ldd	r25, Z+3	; 0x03
    f436:	20 e0       	ldi	r18, 0x00	; 0
    f438:	3f ef       	ldi	r19, 0xFF	; 255
    f43a:	4f e7       	ldi	r20, 0x7F	; 127
    f43c:	57 e4       	ldi	r21, 0x47	; 71
    f43e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    f442:	18 16       	cp	r1, r24
    f444:	0c f0       	brlt	.+2      	; 0xf448 <travel_path+0x1946>
    f446:	10 e0       	ldi	r17, 0x00	; 0
    f448:	11 23       	and	r17, r17
    f44a:	09 f4       	brne	.+2      	; 0xf44e <travel_path+0x194c>
    f44c:	4d c0       	rjmp	.+154    	; 0xf4e8 <travel_path+0x19e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f44e:	ce 01       	movw	r24, r28
    f450:	8b 53       	subi	r24, 0x3B	; 59
    f452:	9f 4f       	sbci	r25, 0xFF	; 255
    f454:	fc 01       	movw	r30, r24
    f456:	60 81       	ld	r22, Z
    f458:	71 81       	ldd	r23, Z+1	; 0x01
    f45a:	82 81       	ldd	r24, Z+2	; 0x02
    f45c:	93 81       	ldd	r25, Z+3	; 0x03
    f45e:	20 e0       	ldi	r18, 0x00	; 0
    f460:	30 e0       	ldi	r19, 0x00	; 0
    f462:	40 e2       	ldi	r20, 0x20	; 32
    f464:	51 e4       	ldi	r21, 0x41	; 65
    f466:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f46a:	dc 01       	movw	r26, r24
    f46c:	cb 01       	movw	r24, r22
    f46e:	8e 01       	movw	r16, r28
    f470:	03 53       	subi	r16, 0x33	; 51
    f472:	1f 4f       	sbci	r17, 0xFF	; 255
    f474:	bc 01       	movw	r22, r24
    f476:	cd 01       	movw	r24, r26
    f478:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f47c:	dc 01       	movw	r26, r24
    f47e:	cb 01       	movw	r24, r22
    f480:	f8 01       	movw	r30, r16
    f482:	91 83       	std	Z+1, r25	; 0x01
    f484:	80 83       	st	Z, r24
    f486:	27 c0       	rjmp	.+78     	; 0xf4d6 <travel_path+0x19d4>
    f488:	ce 01       	movw	r24, r28
    f48a:	81 53       	subi	r24, 0x31	; 49
    f48c:	9f 4f       	sbci	r25, 0xFF	; 255
    f48e:	20 e7       	ldi	r18, 0x70	; 112
    f490:	31 e0       	ldi	r19, 0x01	; 1
    f492:	fc 01       	movw	r30, r24
    f494:	31 83       	std	Z+1, r19	; 0x01
    f496:	20 83       	st	Z, r18
    f498:	ce 01       	movw	r24, r28
    f49a:	81 53       	subi	r24, 0x31	; 49
    f49c:	9f 4f       	sbci	r25, 0xFF	; 255
    f49e:	fc 01       	movw	r30, r24
    f4a0:	80 81       	ld	r24, Z
    f4a2:	91 81       	ldd	r25, Z+1	; 0x01
    f4a4:	8c 01       	movw	r16, r24
    f4a6:	c8 01       	movw	r24, r16
    f4a8:	01 97       	sbiw	r24, 0x01	; 1
    f4aa:	f1 f7       	brne	.-4      	; 0xf4a8 <travel_path+0x19a6>
    f4ac:	8c 01       	movw	r16, r24
    f4ae:	ce 01       	movw	r24, r28
    f4b0:	81 53       	subi	r24, 0x31	; 49
    f4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    f4b4:	fc 01       	movw	r30, r24
    f4b6:	11 83       	std	Z+1, r17	; 0x01
    f4b8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f4ba:	ce 01       	movw	r24, r28
    f4bc:	83 53       	subi	r24, 0x33	; 51
    f4be:	9f 4f       	sbci	r25, 0xFF	; 255
    f4c0:	9e 01       	movw	r18, r28
    f4c2:	23 53       	subi	r18, 0x33	; 51
    f4c4:	3f 4f       	sbci	r19, 0xFF	; 255
    f4c6:	f9 01       	movw	r30, r18
    f4c8:	20 81       	ld	r18, Z
    f4ca:	31 81       	ldd	r19, Z+1	; 0x01
    f4cc:	21 50       	subi	r18, 0x01	; 1
    f4ce:	30 40       	sbci	r19, 0x00	; 0
    f4d0:	fc 01       	movw	r30, r24
    f4d2:	31 83       	std	Z+1, r19	; 0x01
    f4d4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f4d6:	ce 01       	movw	r24, r28
    f4d8:	83 53       	subi	r24, 0x33	; 51
    f4da:	9f 4f       	sbci	r25, 0xFF	; 255
    f4dc:	fc 01       	movw	r30, r24
    f4de:	80 81       	ld	r24, Z
    f4e0:	91 81       	ldd	r25, Z+1	; 0x01
    f4e2:	00 97       	sbiw	r24, 0x00	; 0
    f4e4:	89 f6       	brne	.-94     	; 0xf488 <travel_path+0x1986>
    f4e6:	2f c0       	rjmp	.+94     	; 0xf546 <travel_path+0x1a44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f4e8:	8e 01       	movw	r16, r28
    f4ea:	03 53       	subi	r16, 0x33	; 51
    f4ec:	1f 4f       	sbci	r17, 0xFF	; 255
    f4ee:	ce 01       	movw	r24, r28
    f4f0:	87 53       	subi	r24, 0x37	; 55
    f4f2:	9f 4f       	sbci	r25, 0xFF	; 255
    f4f4:	fc 01       	movw	r30, r24
    f4f6:	60 81       	ld	r22, Z
    f4f8:	71 81       	ldd	r23, Z+1	; 0x01
    f4fa:	82 81       	ldd	r24, Z+2	; 0x02
    f4fc:	93 81       	ldd	r25, Z+3	; 0x03
    f4fe:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f502:	dc 01       	movw	r26, r24
    f504:	cb 01       	movw	r24, r22
    f506:	f8 01       	movw	r30, r16
    f508:	91 83       	std	Z+1, r25	; 0x01
    f50a:	80 83       	st	Z, r24
    f50c:	ce 01       	movw	r24, r28
    f50e:	8f 52       	subi	r24, 0x2F	; 47
    f510:	9f 4f       	sbci	r25, 0xFF	; 255
    f512:	9e 01       	movw	r18, r28
    f514:	23 53       	subi	r18, 0x33	; 51
    f516:	3f 4f       	sbci	r19, 0xFF	; 255
    f518:	f9 01       	movw	r30, r18
    f51a:	20 81       	ld	r18, Z
    f51c:	31 81       	ldd	r19, Z+1	; 0x01
    f51e:	fc 01       	movw	r30, r24
    f520:	31 83       	std	Z+1, r19	; 0x01
    f522:	20 83       	st	Z, r18
    f524:	ce 01       	movw	r24, r28
    f526:	8f 52       	subi	r24, 0x2F	; 47
    f528:	9f 4f       	sbci	r25, 0xFF	; 255
    f52a:	fc 01       	movw	r30, r24
    f52c:	80 81       	ld	r24, Z
    f52e:	91 81       	ldd	r25, Z+1	; 0x01
    f530:	8c 01       	movw	r16, r24
    f532:	c8 01       	movw	r24, r16
    f534:	01 97       	sbiw	r24, 0x01	; 1
    f536:	f1 f7       	brne	.-4      	; 0xf534 <travel_path+0x1a32>
    f538:	8c 01       	movw	r16, r24
    f53a:	ce 01       	movw	r24, r28
    f53c:	8f 52       	subi	r24, 0x2F	; 47
    f53e:	9f 4f       	sbci	r25, 0xFF	; 255
    f540:	fc 01       	movw	r30, r24
    f542:	11 83       	std	Z+1, r17	; 0x01
    f544:	00 83       	st	Z, r16
					_delay_ms(25);
					correct_left();
    f546:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
    f54a:	ea c5       	rjmp	.+3028   	; 0x10120 <travel_path+0x261e>
				}
						else if(master_path[node+1]=='8'){
    f54c:	80 91 4f 03 	lds	r24, 0x034F
    f550:	90 91 50 03 	lds	r25, 0x0350
    f554:	01 96       	adiw	r24, 0x01	; 1
    f556:	8d 5a       	subi	r24, 0xAD	; 173
    f558:	9c 4f       	sbci	r25, 0xFC	; 252
    f55a:	fc 01       	movw	r30, r24
    f55c:	80 81       	ld	r24, Z
    f55e:	88 33       	cpi	r24, 0x38	; 56
    f560:	09 f0       	breq	.+2      	; 0xf564 <travel_path+0x1a62>
    f562:	7f c2       	rjmp	.+1278   	; 0xfa62 <travel_path+0x1f60>
							stop();
    f564:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    f568:	9e 01       	movw	r18, r28
    f56a:	2d 52       	subi	r18, 0x2D	; 45
    f56c:	3f 4f       	sbci	r19, 0xFF	; 255
    f56e:	80 e0       	ldi	r24, 0x00	; 0
    f570:	90 e0       	ldi	r25, 0x00	; 0
    f572:	a0 ea       	ldi	r26, 0xA0	; 160
    f574:	b1 e4       	ldi	r27, 0x41	; 65
    f576:	f9 01       	movw	r30, r18
    f578:	80 83       	st	Z, r24
    f57a:	91 83       	std	Z+1, r25	; 0x01
    f57c:	a2 83       	std	Z+2, r26	; 0x02
    f57e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f580:	8e 01       	movw	r16, r28
    f582:	09 52       	subi	r16, 0x29	; 41
    f584:	1f 4f       	sbci	r17, 0xFF	; 255
    f586:	ce 01       	movw	r24, r28
    f588:	8d 52       	subi	r24, 0x2D	; 45
    f58a:	9f 4f       	sbci	r25, 0xFF	; 255
    f58c:	fc 01       	movw	r30, r24
    f58e:	60 81       	ld	r22, Z
    f590:	71 81       	ldd	r23, Z+1	; 0x01
    f592:	82 81       	ldd	r24, Z+2	; 0x02
    f594:	93 81       	ldd	r25, Z+3	; 0x03
    f596:	26 e6       	ldi	r18, 0x66	; 102
    f598:	36 e6       	ldi	r19, 0x66	; 102
    f59a:	46 e6       	ldi	r20, 0x66	; 102
    f59c:	55 e4       	ldi	r21, 0x45	; 69
    f59e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f5a2:	dc 01       	movw	r26, r24
    f5a4:	cb 01       	movw	r24, r22
    f5a6:	f8 01       	movw	r30, r16
    f5a8:	80 83       	st	Z, r24
    f5aa:	91 83       	std	Z+1, r25	; 0x01
    f5ac:	a2 83       	std	Z+2, r26	; 0x02
    f5ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f5b0:	ce 01       	movw	r24, r28
    f5b2:	89 52       	subi	r24, 0x29	; 41
    f5b4:	9f 4f       	sbci	r25, 0xFF	; 255
    f5b6:	11 e0       	ldi	r17, 0x01	; 1
    f5b8:	fc 01       	movw	r30, r24
    f5ba:	60 81       	ld	r22, Z
    f5bc:	71 81       	ldd	r23, Z+1	; 0x01
    f5be:	82 81       	ldd	r24, Z+2	; 0x02
    f5c0:	93 81       	ldd	r25, Z+3	; 0x03
    f5c2:	20 e0       	ldi	r18, 0x00	; 0
    f5c4:	30 e0       	ldi	r19, 0x00	; 0
    f5c6:	40 e8       	ldi	r20, 0x80	; 128
    f5c8:	5f e3       	ldi	r21, 0x3F	; 63
    f5ca:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    f5ce:	88 23       	and	r24, r24
    f5d0:	0c f0       	brlt	.+2      	; 0xf5d4 <travel_path+0x1ad2>
    f5d2:	10 e0       	ldi	r17, 0x00	; 0
    f5d4:	11 23       	and	r17, r17
    f5d6:	49 f0       	breq	.+18     	; 0xf5ea <travel_path+0x1ae8>
		__ticks = 1;
    f5d8:	ce 01       	movw	r24, r28
    f5da:	85 52       	subi	r24, 0x25	; 37
    f5dc:	9f 4f       	sbci	r25, 0xFF	; 255
    f5de:	21 e0       	ldi	r18, 0x01	; 1
    f5e0:	30 e0       	ldi	r19, 0x00	; 0
    f5e2:	fc 01       	movw	r30, r24
    f5e4:	31 83       	std	Z+1, r19	; 0x01
    f5e6:	20 83       	st	Z, r18
    f5e8:	74 c0       	rjmp	.+232    	; 0xf6d2 <travel_path+0x1bd0>
	else if (__tmp > 65535)
    f5ea:	ce 01       	movw	r24, r28
    f5ec:	89 52       	subi	r24, 0x29	; 41
    f5ee:	9f 4f       	sbci	r25, 0xFF	; 255
    f5f0:	11 e0       	ldi	r17, 0x01	; 1
    f5f2:	fc 01       	movw	r30, r24
    f5f4:	60 81       	ld	r22, Z
    f5f6:	71 81       	ldd	r23, Z+1	; 0x01
    f5f8:	82 81       	ldd	r24, Z+2	; 0x02
    f5fa:	93 81       	ldd	r25, Z+3	; 0x03
    f5fc:	20 e0       	ldi	r18, 0x00	; 0
    f5fe:	3f ef       	ldi	r19, 0xFF	; 255
    f600:	4f e7       	ldi	r20, 0x7F	; 127
    f602:	57 e4       	ldi	r21, 0x47	; 71
    f604:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    f608:	18 16       	cp	r1, r24
    f60a:	0c f0       	brlt	.+2      	; 0xf60e <travel_path+0x1b0c>
    f60c:	10 e0       	ldi	r17, 0x00	; 0
    f60e:	11 23       	and	r17, r17
    f610:	09 f4       	brne	.+2      	; 0xf614 <travel_path+0x1b12>
    f612:	4d c0       	rjmp	.+154    	; 0xf6ae <travel_path+0x1bac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f614:	ce 01       	movw	r24, r28
    f616:	8d 52       	subi	r24, 0x2D	; 45
    f618:	9f 4f       	sbci	r25, 0xFF	; 255
    f61a:	fc 01       	movw	r30, r24
    f61c:	60 81       	ld	r22, Z
    f61e:	71 81       	ldd	r23, Z+1	; 0x01
    f620:	82 81       	ldd	r24, Z+2	; 0x02
    f622:	93 81       	ldd	r25, Z+3	; 0x03
    f624:	20 e0       	ldi	r18, 0x00	; 0
    f626:	30 e0       	ldi	r19, 0x00	; 0
    f628:	40 e2       	ldi	r20, 0x20	; 32
    f62a:	51 e4       	ldi	r21, 0x41	; 65
    f62c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f630:	dc 01       	movw	r26, r24
    f632:	cb 01       	movw	r24, r22
    f634:	8e 01       	movw	r16, r28
    f636:	05 52       	subi	r16, 0x25	; 37
    f638:	1f 4f       	sbci	r17, 0xFF	; 255
    f63a:	bc 01       	movw	r22, r24
    f63c:	cd 01       	movw	r24, r26
    f63e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f642:	dc 01       	movw	r26, r24
    f644:	cb 01       	movw	r24, r22
    f646:	f8 01       	movw	r30, r16
    f648:	91 83       	std	Z+1, r25	; 0x01
    f64a:	80 83       	st	Z, r24
    f64c:	27 c0       	rjmp	.+78     	; 0xf69c <travel_path+0x1b9a>
    f64e:	ce 01       	movw	r24, r28
    f650:	83 52       	subi	r24, 0x23	; 35
    f652:	9f 4f       	sbci	r25, 0xFF	; 255
    f654:	20 e7       	ldi	r18, 0x70	; 112
    f656:	31 e0       	ldi	r19, 0x01	; 1
    f658:	fc 01       	movw	r30, r24
    f65a:	31 83       	std	Z+1, r19	; 0x01
    f65c:	20 83       	st	Z, r18
    f65e:	ce 01       	movw	r24, r28
    f660:	83 52       	subi	r24, 0x23	; 35
    f662:	9f 4f       	sbci	r25, 0xFF	; 255
    f664:	fc 01       	movw	r30, r24
    f666:	80 81       	ld	r24, Z
    f668:	91 81       	ldd	r25, Z+1	; 0x01
    f66a:	8c 01       	movw	r16, r24
    f66c:	c8 01       	movw	r24, r16
    f66e:	01 97       	sbiw	r24, 0x01	; 1
    f670:	f1 f7       	brne	.-4      	; 0xf66e <travel_path+0x1b6c>
    f672:	8c 01       	movw	r16, r24
    f674:	ce 01       	movw	r24, r28
    f676:	83 52       	subi	r24, 0x23	; 35
    f678:	9f 4f       	sbci	r25, 0xFF	; 255
    f67a:	fc 01       	movw	r30, r24
    f67c:	11 83       	std	Z+1, r17	; 0x01
    f67e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f680:	ce 01       	movw	r24, r28
    f682:	85 52       	subi	r24, 0x25	; 37
    f684:	9f 4f       	sbci	r25, 0xFF	; 255
    f686:	9e 01       	movw	r18, r28
    f688:	25 52       	subi	r18, 0x25	; 37
    f68a:	3f 4f       	sbci	r19, 0xFF	; 255
    f68c:	f9 01       	movw	r30, r18
    f68e:	20 81       	ld	r18, Z
    f690:	31 81       	ldd	r19, Z+1	; 0x01
    f692:	21 50       	subi	r18, 0x01	; 1
    f694:	30 40       	sbci	r19, 0x00	; 0
    f696:	fc 01       	movw	r30, r24
    f698:	31 83       	std	Z+1, r19	; 0x01
    f69a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f69c:	ce 01       	movw	r24, r28
    f69e:	85 52       	subi	r24, 0x25	; 37
    f6a0:	9f 4f       	sbci	r25, 0xFF	; 255
    f6a2:	fc 01       	movw	r30, r24
    f6a4:	80 81       	ld	r24, Z
    f6a6:	91 81       	ldd	r25, Z+1	; 0x01
    f6a8:	00 97       	sbiw	r24, 0x00	; 0
    f6aa:	89 f6       	brne	.-94     	; 0xf64e <travel_path+0x1b4c>
    f6ac:	2f c0       	rjmp	.+94     	; 0xf70c <travel_path+0x1c0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f6ae:	8e 01       	movw	r16, r28
    f6b0:	05 52       	subi	r16, 0x25	; 37
    f6b2:	1f 4f       	sbci	r17, 0xFF	; 255
    f6b4:	ce 01       	movw	r24, r28
    f6b6:	89 52       	subi	r24, 0x29	; 41
    f6b8:	9f 4f       	sbci	r25, 0xFF	; 255
    f6ba:	fc 01       	movw	r30, r24
    f6bc:	60 81       	ld	r22, Z
    f6be:	71 81       	ldd	r23, Z+1	; 0x01
    f6c0:	82 81       	ldd	r24, Z+2	; 0x02
    f6c2:	93 81       	ldd	r25, Z+3	; 0x03
    f6c4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f6c8:	dc 01       	movw	r26, r24
    f6ca:	cb 01       	movw	r24, r22
    f6cc:	f8 01       	movw	r30, r16
    f6ce:	91 83       	std	Z+1, r25	; 0x01
    f6d0:	80 83       	st	Z, r24
    f6d2:	ce 01       	movw	r24, r28
    f6d4:	81 52       	subi	r24, 0x21	; 33
    f6d6:	9f 4f       	sbci	r25, 0xFF	; 255
    f6d8:	9e 01       	movw	r18, r28
    f6da:	25 52       	subi	r18, 0x25	; 37
    f6dc:	3f 4f       	sbci	r19, 0xFF	; 255
    f6de:	f9 01       	movw	r30, r18
    f6e0:	20 81       	ld	r18, Z
    f6e2:	31 81       	ldd	r19, Z+1	; 0x01
    f6e4:	fc 01       	movw	r30, r24
    f6e6:	31 83       	std	Z+1, r19	; 0x01
    f6e8:	20 83       	st	Z, r18
    f6ea:	ce 01       	movw	r24, r28
    f6ec:	81 52       	subi	r24, 0x21	; 33
    f6ee:	9f 4f       	sbci	r25, 0xFF	; 255
    f6f0:	fc 01       	movw	r30, r24
    f6f2:	80 81       	ld	r24, Z
    f6f4:	91 81       	ldd	r25, Z+1	; 0x01
    f6f6:	8c 01       	movw	r16, r24
    f6f8:	c8 01       	movw	r24, r16
    f6fa:	01 97       	sbiw	r24, 0x01	; 1
    f6fc:	f1 f7       	brne	.-4      	; 0xf6fa <travel_path+0x1bf8>
    f6fe:	8c 01       	movw	r16, r24
    f700:	ce 01       	movw	r24, r28
    f702:	81 52       	subi	r24, 0x21	; 33
    f704:	9f 4f       	sbci	r25, 0xFF	; 255
    f706:	fc 01       	movw	r30, r24
    f708:	11 83       	std	Z+1, r17	; 0x01
    f70a:	00 83       	st	Z, r16
							_delay_ms(20);
							forward_mm(160);
    f70c:	80 ea       	ldi	r24, 0xA0	; 160
    f70e:	90 e0       	ldi	r25, 0x00	; 0
    f710:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    f714:	9e 01       	movw	r18, r28
    f716:	2f 51       	subi	r18, 0x1F	; 31
    f718:	3f 4f       	sbci	r19, 0xFF	; 255
    f71a:	80 e0       	ldi	r24, 0x00	; 0
    f71c:	90 e0       	ldi	r25, 0x00	; 0
    f71e:	a0 ea       	ldi	r26, 0xA0	; 160
    f720:	b1 e4       	ldi	r27, 0x41	; 65
    f722:	f9 01       	movw	r30, r18
    f724:	80 83       	st	Z, r24
    f726:	91 83       	std	Z+1, r25	; 0x01
    f728:	a2 83       	std	Z+2, r26	; 0x02
    f72a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f72c:	8e 01       	movw	r16, r28
    f72e:	0b 51       	subi	r16, 0x1B	; 27
    f730:	1f 4f       	sbci	r17, 0xFF	; 255
    f732:	ce 01       	movw	r24, r28
    f734:	8f 51       	subi	r24, 0x1F	; 31
    f736:	9f 4f       	sbci	r25, 0xFF	; 255
    f738:	fc 01       	movw	r30, r24
    f73a:	60 81       	ld	r22, Z
    f73c:	71 81       	ldd	r23, Z+1	; 0x01
    f73e:	82 81       	ldd	r24, Z+2	; 0x02
    f740:	93 81       	ldd	r25, Z+3	; 0x03
    f742:	26 e6       	ldi	r18, 0x66	; 102
    f744:	36 e6       	ldi	r19, 0x66	; 102
    f746:	46 e6       	ldi	r20, 0x66	; 102
    f748:	55 e4       	ldi	r21, 0x45	; 69
    f74a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f74e:	dc 01       	movw	r26, r24
    f750:	cb 01       	movw	r24, r22
    f752:	f8 01       	movw	r30, r16
    f754:	80 83       	st	Z, r24
    f756:	91 83       	std	Z+1, r25	; 0x01
    f758:	a2 83       	std	Z+2, r26	; 0x02
    f75a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f75c:	ce 01       	movw	r24, r28
    f75e:	8b 51       	subi	r24, 0x1B	; 27
    f760:	9f 4f       	sbci	r25, 0xFF	; 255
    f762:	11 e0       	ldi	r17, 0x01	; 1
    f764:	fc 01       	movw	r30, r24
    f766:	60 81       	ld	r22, Z
    f768:	71 81       	ldd	r23, Z+1	; 0x01
    f76a:	82 81       	ldd	r24, Z+2	; 0x02
    f76c:	93 81       	ldd	r25, Z+3	; 0x03
    f76e:	20 e0       	ldi	r18, 0x00	; 0
    f770:	30 e0       	ldi	r19, 0x00	; 0
    f772:	40 e8       	ldi	r20, 0x80	; 128
    f774:	5f e3       	ldi	r21, 0x3F	; 63
    f776:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    f77a:	88 23       	and	r24, r24
    f77c:	0c f0       	brlt	.+2      	; 0xf780 <travel_path+0x1c7e>
    f77e:	10 e0       	ldi	r17, 0x00	; 0
    f780:	11 23       	and	r17, r17
    f782:	49 f0       	breq	.+18     	; 0xf796 <travel_path+0x1c94>
		__ticks = 1;
    f784:	ce 01       	movw	r24, r28
    f786:	87 51       	subi	r24, 0x17	; 23
    f788:	9f 4f       	sbci	r25, 0xFF	; 255
    f78a:	21 e0       	ldi	r18, 0x01	; 1
    f78c:	30 e0       	ldi	r19, 0x00	; 0
    f78e:	fc 01       	movw	r30, r24
    f790:	31 83       	std	Z+1, r19	; 0x01
    f792:	20 83       	st	Z, r18
    f794:	74 c0       	rjmp	.+232    	; 0xf87e <travel_path+0x1d7c>
	else if (__tmp > 65535)
    f796:	ce 01       	movw	r24, r28
    f798:	8b 51       	subi	r24, 0x1B	; 27
    f79a:	9f 4f       	sbci	r25, 0xFF	; 255
    f79c:	11 e0       	ldi	r17, 0x01	; 1
    f79e:	fc 01       	movw	r30, r24
    f7a0:	60 81       	ld	r22, Z
    f7a2:	71 81       	ldd	r23, Z+1	; 0x01
    f7a4:	82 81       	ldd	r24, Z+2	; 0x02
    f7a6:	93 81       	ldd	r25, Z+3	; 0x03
    f7a8:	20 e0       	ldi	r18, 0x00	; 0
    f7aa:	3f ef       	ldi	r19, 0xFF	; 255
    f7ac:	4f e7       	ldi	r20, 0x7F	; 127
    f7ae:	57 e4       	ldi	r21, 0x47	; 71
    f7b0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    f7b4:	18 16       	cp	r1, r24
    f7b6:	0c f0       	brlt	.+2      	; 0xf7ba <travel_path+0x1cb8>
    f7b8:	10 e0       	ldi	r17, 0x00	; 0
    f7ba:	11 23       	and	r17, r17
    f7bc:	09 f4       	brne	.+2      	; 0xf7c0 <travel_path+0x1cbe>
    f7be:	4d c0       	rjmp	.+154    	; 0xf85a <travel_path+0x1d58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f7c0:	ce 01       	movw	r24, r28
    f7c2:	8f 51       	subi	r24, 0x1F	; 31
    f7c4:	9f 4f       	sbci	r25, 0xFF	; 255
    f7c6:	fc 01       	movw	r30, r24
    f7c8:	60 81       	ld	r22, Z
    f7ca:	71 81       	ldd	r23, Z+1	; 0x01
    f7cc:	82 81       	ldd	r24, Z+2	; 0x02
    f7ce:	93 81       	ldd	r25, Z+3	; 0x03
    f7d0:	20 e0       	ldi	r18, 0x00	; 0
    f7d2:	30 e0       	ldi	r19, 0x00	; 0
    f7d4:	40 e2       	ldi	r20, 0x20	; 32
    f7d6:	51 e4       	ldi	r21, 0x41	; 65
    f7d8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f7dc:	dc 01       	movw	r26, r24
    f7de:	cb 01       	movw	r24, r22
    f7e0:	8e 01       	movw	r16, r28
    f7e2:	07 51       	subi	r16, 0x17	; 23
    f7e4:	1f 4f       	sbci	r17, 0xFF	; 255
    f7e6:	bc 01       	movw	r22, r24
    f7e8:	cd 01       	movw	r24, r26
    f7ea:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f7ee:	dc 01       	movw	r26, r24
    f7f0:	cb 01       	movw	r24, r22
    f7f2:	f8 01       	movw	r30, r16
    f7f4:	91 83       	std	Z+1, r25	; 0x01
    f7f6:	80 83       	st	Z, r24
    f7f8:	27 c0       	rjmp	.+78     	; 0xf848 <travel_path+0x1d46>
    f7fa:	ce 01       	movw	r24, r28
    f7fc:	85 51       	subi	r24, 0x15	; 21
    f7fe:	9f 4f       	sbci	r25, 0xFF	; 255
    f800:	20 e7       	ldi	r18, 0x70	; 112
    f802:	31 e0       	ldi	r19, 0x01	; 1
    f804:	fc 01       	movw	r30, r24
    f806:	31 83       	std	Z+1, r19	; 0x01
    f808:	20 83       	st	Z, r18
    f80a:	ce 01       	movw	r24, r28
    f80c:	85 51       	subi	r24, 0x15	; 21
    f80e:	9f 4f       	sbci	r25, 0xFF	; 255
    f810:	fc 01       	movw	r30, r24
    f812:	80 81       	ld	r24, Z
    f814:	91 81       	ldd	r25, Z+1	; 0x01
    f816:	8c 01       	movw	r16, r24
    f818:	c8 01       	movw	r24, r16
    f81a:	01 97       	sbiw	r24, 0x01	; 1
    f81c:	f1 f7       	brne	.-4      	; 0xf81a <travel_path+0x1d18>
    f81e:	8c 01       	movw	r16, r24
    f820:	ce 01       	movw	r24, r28
    f822:	85 51       	subi	r24, 0x15	; 21
    f824:	9f 4f       	sbci	r25, 0xFF	; 255
    f826:	fc 01       	movw	r30, r24
    f828:	11 83       	std	Z+1, r17	; 0x01
    f82a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f82c:	ce 01       	movw	r24, r28
    f82e:	87 51       	subi	r24, 0x17	; 23
    f830:	9f 4f       	sbci	r25, 0xFF	; 255
    f832:	9e 01       	movw	r18, r28
    f834:	27 51       	subi	r18, 0x17	; 23
    f836:	3f 4f       	sbci	r19, 0xFF	; 255
    f838:	f9 01       	movw	r30, r18
    f83a:	20 81       	ld	r18, Z
    f83c:	31 81       	ldd	r19, Z+1	; 0x01
    f83e:	21 50       	subi	r18, 0x01	; 1
    f840:	30 40       	sbci	r19, 0x00	; 0
    f842:	fc 01       	movw	r30, r24
    f844:	31 83       	std	Z+1, r19	; 0x01
    f846:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f848:	ce 01       	movw	r24, r28
    f84a:	87 51       	subi	r24, 0x17	; 23
    f84c:	9f 4f       	sbci	r25, 0xFF	; 255
    f84e:	fc 01       	movw	r30, r24
    f850:	80 81       	ld	r24, Z
    f852:	91 81       	ldd	r25, Z+1	; 0x01
    f854:	00 97       	sbiw	r24, 0x00	; 0
    f856:	89 f6       	brne	.-94     	; 0xf7fa <travel_path+0x1cf8>
    f858:	2f c0       	rjmp	.+94     	; 0xf8b8 <travel_path+0x1db6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    f85a:	8e 01       	movw	r16, r28
    f85c:	07 51       	subi	r16, 0x17	; 23
    f85e:	1f 4f       	sbci	r17, 0xFF	; 255
    f860:	ce 01       	movw	r24, r28
    f862:	8b 51       	subi	r24, 0x1B	; 27
    f864:	9f 4f       	sbci	r25, 0xFF	; 255
    f866:	fc 01       	movw	r30, r24
    f868:	60 81       	ld	r22, Z
    f86a:	71 81       	ldd	r23, Z+1	; 0x01
    f86c:	82 81       	ldd	r24, Z+2	; 0x02
    f86e:	93 81       	ldd	r25, Z+3	; 0x03
    f870:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f874:	dc 01       	movw	r26, r24
    f876:	cb 01       	movw	r24, r22
    f878:	f8 01       	movw	r30, r16
    f87a:	91 83       	std	Z+1, r25	; 0x01
    f87c:	80 83       	st	Z, r24
    f87e:	ce 01       	movw	r24, r28
    f880:	83 51       	subi	r24, 0x13	; 19
    f882:	9f 4f       	sbci	r25, 0xFF	; 255
    f884:	9e 01       	movw	r18, r28
    f886:	27 51       	subi	r18, 0x17	; 23
    f888:	3f 4f       	sbci	r19, 0xFF	; 255
    f88a:	f9 01       	movw	r30, r18
    f88c:	20 81       	ld	r18, Z
    f88e:	31 81       	ldd	r19, Z+1	; 0x01
    f890:	fc 01       	movw	r30, r24
    f892:	31 83       	std	Z+1, r19	; 0x01
    f894:	20 83       	st	Z, r18
    f896:	ce 01       	movw	r24, r28
    f898:	83 51       	subi	r24, 0x13	; 19
    f89a:	9f 4f       	sbci	r25, 0xFF	; 255
    f89c:	fc 01       	movw	r30, r24
    f89e:	80 81       	ld	r24, Z
    f8a0:	91 81       	ldd	r25, Z+1	; 0x01
    f8a2:	8c 01       	movw	r16, r24
    f8a4:	c8 01       	movw	r24, r16
    f8a6:	01 97       	sbiw	r24, 0x01	; 1
    f8a8:	f1 f7       	brne	.-4      	; 0xf8a6 <travel_path+0x1da4>
    f8aa:	8c 01       	movw	r16, r24
    f8ac:	ce 01       	movw	r24, r28
    f8ae:	83 51       	subi	r24, 0x13	; 19
    f8b0:	9f 4f       	sbci	r25, 0xFF	; 255
    f8b2:	fc 01       	movw	r30, r24
    f8b4:	11 83       	std	Z+1, r17	; 0x01
    f8b6:	00 83       	st	Z, r16
							_delay_ms(20);
							spl_left2();
    f8b8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <spl_left2>
    f8bc:	9e 01       	movw	r18, r28
    f8be:	21 51       	subi	r18, 0x11	; 17
    f8c0:	3f 4f       	sbci	r19, 0xFF	; 255
    f8c2:	80 e0       	ldi	r24, 0x00	; 0
    f8c4:	90 e0       	ldi	r25, 0x00	; 0
    f8c6:	a0 ea       	ldi	r26, 0xA0	; 160
    f8c8:	b1 e4       	ldi	r27, 0x41	; 65
    f8ca:	f9 01       	movw	r30, r18
    f8cc:	80 83       	st	Z, r24
    f8ce:	91 83       	std	Z+1, r25	; 0x01
    f8d0:	a2 83       	std	Z+2, r26	; 0x02
    f8d2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    f8d4:	8e 01       	movw	r16, r28
    f8d6:	0d 50       	subi	r16, 0x0D	; 13
    f8d8:	1f 4f       	sbci	r17, 0xFF	; 255
    f8da:	ce 01       	movw	r24, r28
    f8dc:	81 51       	subi	r24, 0x11	; 17
    f8de:	9f 4f       	sbci	r25, 0xFF	; 255
    f8e0:	fc 01       	movw	r30, r24
    f8e2:	60 81       	ld	r22, Z
    f8e4:	71 81       	ldd	r23, Z+1	; 0x01
    f8e6:	82 81       	ldd	r24, Z+2	; 0x02
    f8e8:	93 81       	ldd	r25, Z+3	; 0x03
    f8ea:	26 e6       	ldi	r18, 0x66	; 102
    f8ec:	36 e6       	ldi	r19, 0x66	; 102
    f8ee:	46 e6       	ldi	r20, 0x66	; 102
    f8f0:	55 e4       	ldi	r21, 0x45	; 69
    f8f2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f8f6:	dc 01       	movw	r26, r24
    f8f8:	cb 01       	movw	r24, r22
    f8fa:	f8 01       	movw	r30, r16
    f8fc:	80 83       	st	Z, r24
    f8fe:	91 83       	std	Z+1, r25	; 0x01
    f900:	a2 83       	std	Z+2, r26	; 0x02
    f902:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    f904:	ce 01       	movw	r24, r28
    f906:	8d 50       	subi	r24, 0x0D	; 13
    f908:	9f 4f       	sbci	r25, 0xFF	; 255
    f90a:	11 e0       	ldi	r17, 0x01	; 1
    f90c:	fc 01       	movw	r30, r24
    f90e:	60 81       	ld	r22, Z
    f910:	71 81       	ldd	r23, Z+1	; 0x01
    f912:	82 81       	ldd	r24, Z+2	; 0x02
    f914:	93 81       	ldd	r25, Z+3	; 0x03
    f916:	20 e0       	ldi	r18, 0x00	; 0
    f918:	30 e0       	ldi	r19, 0x00	; 0
    f91a:	40 e8       	ldi	r20, 0x80	; 128
    f91c:	5f e3       	ldi	r21, 0x3F	; 63
    f91e:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    f922:	88 23       	and	r24, r24
    f924:	0c f0       	brlt	.+2      	; 0xf928 <travel_path+0x1e26>
    f926:	10 e0       	ldi	r17, 0x00	; 0
    f928:	11 23       	and	r17, r17
    f92a:	49 f0       	breq	.+18     	; 0xf93e <travel_path+0x1e3c>
		__ticks = 1;
    f92c:	ce 01       	movw	r24, r28
    f92e:	89 50       	subi	r24, 0x09	; 9
    f930:	9f 4f       	sbci	r25, 0xFF	; 255
    f932:	21 e0       	ldi	r18, 0x01	; 1
    f934:	30 e0       	ldi	r19, 0x00	; 0
    f936:	fc 01       	movw	r30, r24
    f938:	31 83       	std	Z+1, r19	; 0x01
    f93a:	20 83       	st	Z, r18
    f93c:	74 c0       	rjmp	.+232    	; 0xfa26 <travel_path+0x1f24>
	else if (__tmp > 65535)
    f93e:	ce 01       	movw	r24, r28
    f940:	8d 50       	subi	r24, 0x0D	; 13
    f942:	9f 4f       	sbci	r25, 0xFF	; 255
    f944:	11 e0       	ldi	r17, 0x01	; 1
    f946:	fc 01       	movw	r30, r24
    f948:	60 81       	ld	r22, Z
    f94a:	71 81       	ldd	r23, Z+1	; 0x01
    f94c:	82 81       	ldd	r24, Z+2	; 0x02
    f94e:	93 81       	ldd	r25, Z+3	; 0x03
    f950:	20 e0       	ldi	r18, 0x00	; 0
    f952:	3f ef       	ldi	r19, 0xFF	; 255
    f954:	4f e7       	ldi	r20, 0x7F	; 127
    f956:	57 e4       	ldi	r21, 0x47	; 71
    f958:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    f95c:	18 16       	cp	r1, r24
    f95e:	0c f0       	brlt	.+2      	; 0xf962 <travel_path+0x1e60>
    f960:	10 e0       	ldi	r17, 0x00	; 0
    f962:	11 23       	and	r17, r17
    f964:	09 f4       	brne	.+2      	; 0xf968 <travel_path+0x1e66>
    f966:	4d c0       	rjmp	.+154    	; 0xfa02 <travel_path+0x1f00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    f968:	ce 01       	movw	r24, r28
    f96a:	81 51       	subi	r24, 0x11	; 17
    f96c:	9f 4f       	sbci	r25, 0xFF	; 255
    f96e:	fc 01       	movw	r30, r24
    f970:	60 81       	ld	r22, Z
    f972:	71 81       	ldd	r23, Z+1	; 0x01
    f974:	82 81       	ldd	r24, Z+2	; 0x02
    f976:	93 81       	ldd	r25, Z+3	; 0x03
    f978:	20 e0       	ldi	r18, 0x00	; 0
    f97a:	30 e0       	ldi	r19, 0x00	; 0
    f97c:	40 e2       	ldi	r20, 0x20	; 32
    f97e:	51 e4       	ldi	r21, 0x41	; 65
    f980:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    f984:	dc 01       	movw	r26, r24
    f986:	cb 01       	movw	r24, r22
    f988:	8e 01       	movw	r16, r28
    f98a:	09 50       	subi	r16, 0x09	; 9
    f98c:	1f 4f       	sbci	r17, 0xFF	; 255
    f98e:	bc 01       	movw	r22, r24
    f990:	cd 01       	movw	r24, r26
    f992:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    f996:	dc 01       	movw	r26, r24
    f998:	cb 01       	movw	r24, r22
    f99a:	f8 01       	movw	r30, r16
    f99c:	91 83       	std	Z+1, r25	; 0x01
    f99e:	80 83       	st	Z, r24
    f9a0:	27 c0       	rjmp	.+78     	; 0xf9f0 <travel_path+0x1eee>
    f9a2:	ce 01       	movw	r24, r28
    f9a4:	87 50       	subi	r24, 0x07	; 7
    f9a6:	9f 4f       	sbci	r25, 0xFF	; 255
    f9a8:	20 e7       	ldi	r18, 0x70	; 112
    f9aa:	31 e0       	ldi	r19, 0x01	; 1
    f9ac:	fc 01       	movw	r30, r24
    f9ae:	31 83       	std	Z+1, r19	; 0x01
    f9b0:	20 83       	st	Z, r18
    f9b2:	ce 01       	movw	r24, r28
    f9b4:	87 50       	subi	r24, 0x07	; 7
    f9b6:	9f 4f       	sbci	r25, 0xFF	; 255
    f9b8:	fc 01       	movw	r30, r24
    f9ba:	80 81       	ld	r24, Z
    f9bc:	91 81       	ldd	r25, Z+1	; 0x01
    f9be:	8c 01       	movw	r16, r24
    f9c0:	c8 01       	movw	r24, r16
    f9c2:	01 97       	sbiw	r24, 0x01	; 1
    f9c4:	f1 f7       	brne	.-4      	; 0xf9c2 <travel_path+0x1ec0>
    f9c6:	8c 01       	movw	r16, r24
    f9c8:	ce 01       	movw	r24, r28
    f9ca:	87 50       	subi	r24, 0x07	; 7
    f9cc:	9f 4f       	sbci	r25, 0xFF	; 255
    f9ce:	fc 01       	movw	r30, r24
    f9d0:	11 83       	std	Z+1, r17	; 0x01
    f9d2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    f9d4:	ce 01       	movw	r24, r28
    f9d6:	89 50       	subi	r24, 0x09	; 9
    f9d8:	9f 4f       	sbci	r25, 0xFF	; 255
    f9da:	9e 01       	movw	r18, r28
    f9dc:	29 50       	subi	r18, 0x09	; 9
    f9de:	3f 4f       	sbci	r19, 0xFF	; 255
    f9e0:	f9 01       	movw	r30, r18
    f9e2:	20 81       	ld	r18, Z
    f9e4:	31 81       	ldd	r19, Z+1	; 0x01
    f9e6:	21 50       	subi	r18, 0x01	; 1
    f9e8:	30 40       	sbci	r19, 0x00	; 0
    f9ea:	fc 01       	movw	r30, r24
    f9ec:	31 83       	std	Z+1, r19	; 0x01
    f9ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    f9f0:	ce 01       	movw	r24, r28
    f9f2:	89 50       	subi	r24, 0x09	; 9
    f9f4:	9f 4f       	sbci	r25, 0xFF	; 255
    f9f6:	fc 01       	movw	r30, r24
    f9f8:	80 81       	ld	r24, Z
    f9fa:	91 81       	ldd	r25, Z+1	; 0x01
    f9fc:	00 97       	sbiw	r24, 0x00	; 0
    f9fe:	89 f6       	brne	.-94     	; 0xf9a2 <travel_path+0x1ea0>
    fa00:	8f c3       	rjmp	.+1822   	; 0x10120 <travel_path+0x261e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fa02:	8e 01       	movw	r16, r28
    fa04:	09 50       	subi	r16, 0x09	; 9
    fa06:	1f 4f       	sbci	r17, 0xFF	; 255
    fa08:	ce 01       	movw	r24, r28
    fa0a:	8d 50       	subi	r24, 0x0D	; 13
    fa0c:	9f 4f       	sbci	r25, 0xFF	; 255
    fa0e:	fc 01       	movw	r30, r24
    fa10:	60 81       	ld	r22, Z
    fa12:	71 81       	ldd	r23, Z+1	; 0x01
    fa14:	82 81       	ldd	r24, Z+2	; 0x02
    fa16:	93 81       	ldd	r25, Z+3	; 0x03
    fa18:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    fa1c:	dc 01       	movw	r26, r24
    fa1e:	cb 01       	movw	r24, r22
    fa20:	f8 01       	movw	r30, r16
    fa22:	91 83       	std	Z+1, r25	; 0x01
    fa24:	80 83       	st	Z, r24
    fa26:	ce 01       	movw	r24, r28
    fa28:	85 50       	subi	r24, 0x05	; 5
    fa2a:	9f 4f       	sbci	r25, 0xFF	; 255
    fa2c:	9e 01       	movw	r18, r28
    fa2e:	29 50       	subi	r18, 0x09	; 9
    fa30:	3f 4f       	sbci	r19, 0xFF	; 255
    fa32:	f9 01       	movw	r30, r18
    fa34:	20 81       	ld	r18, Z
    fa36:	31 81       	ldd	r19, Z+1	; 0x01
    fa38:	fc 01       	movw	r30, r24
    fa3a:	31 83       	std	Z+1, r19	; 0x01
    fa3c:	20 83       	st	Z, r18
    fa3e:	ce 01       	movw	r24, r28
    fa40:	85 50       	subi	r24, 0x05	; 5
    fa42:	9f 4f       	sbci	r25, 0xFF	; 255
    fa44:	fc 01       	movw	r30, r24
    fa46:	80 81       	ld	r24, Z
    fa48:	91 81       	ldd	r25, Z+1	; 0x01
    fa4a:	8c 01       	movw	r16, r24
    fa4c:	c8 01       	movw	r24, r16
    fa4e:	01 97       	sbiw	r24, 0x01	; 1
    fa50:	f1 f7       	brne	.-4      	; 0xfa4e <travel_path+0x1f4c>
    fa52:	8c 01       	movw	r16, r24
    fa54:	ce 01       	movw	r24, r28
    fa56:	85 50       	subi	r24, 0x05	; 5
    fa58:	9f 4f       	sbci	r25, 0xFF	; 255
    fa5a:	fc 01       	movw	r30, r24
    fa5c:	11 83       	std	Z+1, r17	; 0x01
    fa5e:	00 83       	st	Z, r16
    fa60:	5f c3       	rjmp	.+1726   	; 0x10120 <travel_path+0x261e>
							_delay_ms(20);
						}
						else if(master_path[node+1]=='3')
    fa62:	80 91 4f 03 	lds	r24, 0x034F
    fa66:	90 91 50 03 	lds	r25, 0x0350
    fa6a:	01 96       	adiw	r24, 0x01	; 1
    fa6c:	8d 5a       	subi	r24, 0xAD	; 173
    fa6e:	9c 4f       	sbci	r25, 0xFC	; 252
    fa70:	fc 01       	movw	r30, r24
    fa72:	80 81       	ld	r24, Z
    fa74:	83 33       	cpi	r24, 0x33	; 51
    fa76:	09 f0       	breq	.+2      	; 0xfa7a <travel_path+0x1f78>
    fa78:	7f c2       	rjmp	.+1278   	; 0xff78 <travel_path+0x2476>
						{
						stop();
    fa7a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    fa7e:	9e 01       	movw	r18, r28
    fa80:	23 50       	subi	r18, 0x03	; 3
    fa82:	3f 4f       	sbci	r19, 0xFF	; 255
    fa84:	80 e0       	ldi	r24, 0x00	; 0
    fa86:	90 e0       	ldi	r25, 0x00	; 0
    fa88:	a0 ea       	ldi	r26, 0xA0	; 160
    fa8a:	b1 e4       	ldi	r27, 0x41	; 65
    fa8c:	f9 01       	movw	r30, r18
    fa8e:	80 83       	st	Z, r24
    fa90:	91 83       	std	Z+1, r25	; 0x01
    fa92:	a2 83       	std	Z+2, r26	; 0x02
    fa94:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fa96:	8e 01       	movw	r16, r28
    fa98:	0f 5f       	subi	r16, 0xFF	; 255
    fa9a:	1e 4f       	sbci	r17, 0xFE	; 254
    fa9c:	ce 01       	movw	r24, r28
    fa9e:	83 50       	subi	r24, 0x03	; 3
    faa0:	9f 4f       	sbci	r25, 0xFF	; 255
    faa2:	fc 01       	movw	r30, r24
    faa4:	60 81       	ld	r22, Z
    faa6:	71 81       	ldd	r23, Z+1	; 0x01
    faa8:	82 81       	ldd	r24, Z+2	; 0x02
    faaa:	93 81       	ldd	r25, Z+3	; 0x03
    faac:	26 e6       	ldi	r18, 0x66	; 102
    faae:	36 e6       	ldi	r19, 0x66	; 102
    fab0:	46 e6       	ldi	r20, 0x66	; 102
    fab2:	55 e4       	ldi	r21, 0x45	; 69
    fab4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    fab8:	dc 01       	movw	r26, r24
    faba:	cb 01       	movw	r24, r22
    fabc:	f8 01       	movw	r30, r16
    fabe:	80 83       	st	Z, r24
    fac0:	91 83       	std	Z+1, r25	; 0x01
    fac2:	a2 83       	std	Z+2, r26	; 0x02
    fac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    fac6:	ce 01       	movw	r24, r28
    fac8:	8f 5f       	subi	r24, 0xFF	; 255
    faca:	9e 4f       	sbci	r25, 0xFE	; 254
    facc:	11 e0       	ldi	r17, 0x01	; 1
    face:	fc 01       	movw	r30, r24
    fad0:	60 81       	ld	r22, Z
    fad2:	71 81       	ldd	r23, Z+1	; 0x01
    fad4:	82 81       	ldd	r24, Z+2	; 0x02
    fad6:	93 81       	ldd	r25, Z+3	; 0x03
    fad8:	20 e0       	ldi	r18, 0x00	; 0
    fada:	30 e0       	ldi	r19, 0x00	; 0
    fadc:	40 e8       	ldi	r20, 0x80	; 128
    fade:	5f e3       	ldi	r21, 0x3F	; 63
    fae0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    fae4:	88 23       	and	r24, r24
    fae6:	0c f0       	brlt	.+2      	; 0xfaea <travel_path+0x1fe8>
    fae8:	10 e0       	ldi	r17, 0x00	; 0
    faea:	11 23       	and	r17, r17
    faec:	49 f0       	breq	.+18     	; 0xfb00 <travel_path+0x1ffe>
		__ticks = 1;
    faee:	ce 01       	movw	r24, r28
    faf0:	8b 5f       	subi	r24, 0xFB	; 251
    faf2:	9e 4f       	sbci	r25, 0xFE	; 254
    faf4:	21 e0       	ldi	r18, 0x01	; 1
    faf6:	30 e0       	ldi	r19, 0x00	; 0
    faf8:	fc 01       	movw	r30, r24
    fafa:	31 83       	std	Z+1, r19	; 0x01
    fafc:	20 83       	st	Z, r18
    fafe:	74 c0       	rjmp	.+232    	; 0xfbe8 <travel_path+0x20e6>
	else if (__tmp > 65535)
    fb00:	ce 01       	movw	r24, r28
    fb02:	8f 5f       	subi	r24, 0xFF	; 255
    fb04:	9e 4f       	sbci	r25, 0xFE	; 254
    fb06:	11 e0       	ldi	r17, 0x01	; 1
    fb08:	fc 01       	movw	r30, r24
    fb0a:	60 81       	ld	r22, Z
    fb0c:	71 81       	ldd	r23, Z+1	; 0x01
    fb0e:	82 81       	ldd	r24, Z+2	; 0x02
    fb10:	93 81       	ldd	r25, Z+3	; 0x03
    fb12:	20 e0       	ldi	r18, 0x00	; 0
    fb14:	3f ef       	ldi	r19, 0xFF	; 255
    fb16:	4f e7       	ldi	r20, 0x7F	; 127
    fb18:	57 e4       	ldi	r21, 0x47	; 71
    fb1a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    fb1e:	18 16       	cp	r1, r24
    fb20:	0c f0       	brlt	.+2      	; 0xfb24 <travel_path+0x2022>
    fb22:	10 e0       	ldi	r17, 0x00	; 0
    fb24:	11 23       	and	r17, r17
    fb26:	09 f4       	brne	.+2      	; 0xfb2a <travel_path+0x2028>
    fb28:	4d c0       	rjmp	.+154    	; 0xfbc4 <travel_path+0x20c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fb2a:	ce 01       	movw	r24, r28
    fb2c:	83 50       	subi	r24, 0x03	; 3
    fb2e:	9f 4f       	sbci	r25, 0xFF	; 255
    fb30:	fc 01       	movw	r30, r24
    fb32:	60 81       	ld	r22, Z
    fb34:	71 81       	ldd	r23, Z+1	; 0x01
    fb36:	82 81       	ldd	r24, Z+2	; 0x02
    fb38:	93 81       	ldd	r25, Z+3	; 0x03
    fb3a:	20 e0       	ldi	r18, 0x00	; 0
    fb3c:	30 e0       	ldi	r19, 0x00	; 0
    fb3e:	40 e2       	ldi	r20, 0x20	; 32
    fb40:	51 e4       	ldi	r21, 0x41	; 65
    fb42:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    fb46:	dc 01       	movw	r26, r24
    fb48:	cb 01       	movw	r24, r22
    fb4a:	8e 01       	movw	r16, r28
    fb4c:	0b 5f       	subi	r16, 0xFB	; 251
    fb4e:	1e 4f       	sbci	r17, 0xFE	; 254
    fb50:	bc 01       	movw	r22, r24
    fb52:	cd 01       	movw	r24, r26
    fb54:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    fb58:	dc 01       	movw	r26, r24
    fb5a:	cb 01       	movw	r24, r22
    fb5c:	f8 01       	movw	r30, r16
    fb5e:	91 83       	std	Z+1, r25	; 0x01
    fb60:	80 83       	st	Z, r24
    fb62:	27 c0       	rjmp	.+78     	; 0xfbb2 <travel_path+0x20b0>
    fb64:	ce 01       	movw	r24, r28
    fb66:	89 5f       	subi	r24, 0xF9	; 249
    fb68:	9e 4f       	sbci	r25, 0xFE	; 254
    fb6a:	20 e7       	ldi	r18, 0x70	; 112
    fb6c:	31 e0       	ldi	r19, 0x01	; 1
    fb6e:	fc 01       	movw	r30, r24
    fb70:	31 83       	std	Z+1, r19	; 0x01
    fb72:	20 83       	st	Z, r18
    fb74:	ce 01       	movw	r24, r28
    fb76:	89 5f       	subi	r24, 0xF9	; 249
    fb78:	9e 4f       	sbci	r25, 0xFE	; 254
    fb7a:	fc 01       	movw	r30, r24
    fb7c:	80 81       	ld	r24, Z
    fb7e:	91 81       	ldd	r25, Z+1	; 0x01
    fb80:	8c 01       	movw	r16, r24
    fb82:	c8 01       	movw	r24, r16
    fb84:	01 97       	sbiw	r24, 0x01	; 1
    fb86:	f1 f7       	brne	.-4      	; 0xfb84 <travel_path+0x2082>
    fb88:	8c 01       	movw	r16, r24
    fb8a:	ce 01       	movw	r24, r28
    fb8c:	89 5f       	subi	r24, 0xF9	; 249
    fb8e:	9e 4f       	sbci	r25, 0xFE	; 254
    fb90:	fc 01       	movw	r30, r24
    fb92:	11 83       	std	Z+1, r17	; 0x01
    fb94:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fb96:	ce 01       	movw	r24, r28
    fb98:	8b 5f       	subi	r24, 0xFB	; 251
    fb9a:	9e 4f       	sbci	r25, 0xFE	; 254
    fb9c:	9e 01       	movw	r18, r28
    fb9e:	2b 5f       	subi	r18, 0xFB	; 251
    fba0:	3e 4f       	sbci	r19, 0xFE	; 254
    fba2:	f9 01       	movw	r30, r18
    fba4:	20 81       	ld	r18, Z
    fba6:	31 81       	ldd	r19, Z+1	; 0x01
    fba8:	21 50       	subi	r18, 0x01	; 1
    fbaa:	30 40       	sbci	r19, 0x00	; 0
    fbac:	fc 01       	movw	r30, r24
    fbae:	31 83       	std	Z+1, r19	; 0x01
    fbb0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fbb2:	ce 01       	movw	r24, r28
    fbb4:	8b 5f       	subi	r24, 0xFB	; 251
    fbb6:	9e 4f       	sbci	r25, 0xFE	; 254
    fbb8:	fc 01       	movw	r30, r24
    fbba:	80 81       	ld	r24, Z
    fbbc:	91 81       	ldd	r25, Z+1	; 0x01
    fbbe:	00 97       	sbiw	r24, 0x00	; 0
    fbc0:	89 f6       	brne	.-94     	; 0xfb64 <travel_path+0x2062>
    fbc2:	2f c0       	rjmp	.+94     	; 0xfc22 <travel_path+0x2120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fbc4:	8e 01       	movw	r16, r28
    fbc6:	0b 5f       	subi	r16, 0xFB	; 251
    fbc8:	1e 4f       	sbci	r17, 0xFE	; 254
    fbca:	ce 01       	movw	r24, r28
    fbcc:	8f 5f       	subi	r24, 0xFF	; 255
    fbce:	9e 4f       	sbci	r25, 0xFE	; 254
    fbd0:	fc 01       	movw	r30, r24
    fbd2:	60 81       	ld	r22, Z
    fbd4:	71 81       	ldd	r23, Z+1	; 0x01
    fbd6:	82 81       	ldd	r24, Z+2	; 0x02
    fbd8:	93 81       	ldd	r25, Z+3	; 0x03
    fbda:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    fbde:	dc 01       	movw	r26, r24
    fbe0:	cb 01       	movw	r24, r22
    fbe2:	f8 01       	movw	r30, r16
    fbe4:	91 83       	std	Z+1, r25	; 0x01
    fbe6:	80 83       	st	Z, r24
    fbe8:	ce 01       	movw	r24, r28
    fbea:	87 5f       	subi	r24, 0xF7	; 247
    fbec:	9e 4f       	sbci	r25, 0xFE	; 254
    fbee:	9e 01       	movw	r18, r28
    fbf0:	2b 5f       	subi	r18, 0xFB	; 251
    fbf2:	3e 4f       	sbci	r19, 0xFE	; 254
    fbf4:	f9 01       	movw	r30, r18
    fbf6:	20 81       	ld	r18, Z
    fbf8:	31 81       	ldd	r19, Z+1	; 0x01
    fbfa:	fc 01       	movw	r30, r24
    fbfc:	31 83       	std	Z+1, r19	; 0x01
    fbfe:	20 83       	st	Z, r18
    fc00:	ce 01       	movw	r24, r28
    fc02:	87 5f       	subi	r24, 0xF7	; 247
    fc04:	9e 4f       	sbci	r25, 0xFE	; 254
    fc06:	fc 01       	movw	r30, r24
    fc08:	80 81       	ld	r24, Z
    fc0a:	91 81       	ldd	r25, Z+1	; 0x01
    fc0c:	8c 01       	movw	r16, r24
    fc0e:	c8 01       	movw	r24, r16
    fc10:	01 97       	sbiw	r24, 0x01	; 1
    fc12:	f1 f7       	brne	.-4      	; 0xfc10 <travel_path+0x210e>
    fc14:	8c 01       	movw	r16, r24
    fc16:	ce 01       	movw	r24, r28
    fc18:	87 5f       	subi	r24, 0xF7	; 247
    fc1a:	9e 4f       	sbci	r25, 0xFE	; 254
    fc1c:	fc 01       	movw	r30, r24
    fc1e:	11 83       	std	Z+1, r17	; 0x01
    fc20:	00 83       	st	Z, r16
						_delay_ms(20);
						forward_mm(160);
    fc22:	80 ea       	ldi	r24, 0xA0	; 160
    fc24:	90 e0       	ldi	r25, 0x00	; 0
    fc26:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
    fc2a:	9e 01       	movw	r18, r28
    fc2c:	25 5f       	subi	r18, 0xF5	; 245
    fc2e:	3e 4f       	sbci	r19, 0xFE	; 254
    fc30:	80 e0       	ldi	r24, 0x00	; 0
    fc32:	90 e0       	ldi	r25, 0x00	; 0
    fc34:	a0 ea       	ldi	r26, 0xA0	; 160
    fc36:	b1 e4       	ldi	r27, 0x41	; 65
    fc38:	f9 01       	movw	r30, r18
    fc3a:	80 83       	st	Z, r24
    fc3c:	91 83       	std	Z+1, r25	; 0x01
    fc3e:	a2 83       	std	Z+2, r26	; 0x02
    fc40:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fc42:	8e 01       	movw	r16, r28
    fc44:	01 5f       	subi	r16, 0xF1	; 241
    fc46:	1e 4f       	sbci	r17, 0xFE	; 254
    fc48:	ce 01       	movw	r24, r28
    fc4a:	85 5f       	subi	r24, 0xF5	; 245
    fc4c:	9e 4f       	sbci	r25, 0xFE	; 254
    fc4e:	fc 01       	movw	r30, r24
    fc50:	60 81       	ld	r22, Z
    fc52:	71 81       	ldd	r23, Z+1	; 0x01
    fc54:	82 81       	ldd	r24, Z+2	; 0x02
    fc56:	93 81       	ldd	r25, Z+3	; 0x03
    fc58:	26 e6       	ldi	r18, 0x66	; 102
    fc5a:	36 e6       	ldi	r19, 0x66	; 102
    fc5c:	46 e6       	ldi	r20, 0x66	; 102
    fc5e:	55 e4       	ldi	r21, 0x45	; 69
    fc60:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    fc64:	dc 01       	movw	r26, r24
    fc66:	cb 01       	movw	r24, r22
    fc68:	f8 01       	movw	r30, r16
    fc6a:	80 83       	st	Z, r24
    fc6c:	91 83       	std	Z+1, r25	; 0x01
    fc6e:	a2 83       	std	Z+2, r26	; 0x02
    fc70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    fc72:	ce 01       	movw	r24, r28
    fc74:	81 5f       	subi	r24, 0xF1	; 241
    fc76:	9e 4f       	sbci	r25, 0xFE	; 254
    fc78:	11 e0       	ldi	r17, 0x01	; 1
    fc7a:	fc 01       	movw	r30, r24
    fc7c:	60 81       	ld	r22, Z
    fc7e:	71 81       	ldd	r23, Z+1	; 0x01
    fc80:	82 81       	ldd	r24, Z+2	; 0x02
    fc82:	93 81       	ldd	r25, Z+3	; 0x03
    fc84:	20 e0       	ldi	r18, 0x00	; 0
    fc86:	30 e0       	ldi	r19, 0x00	; 0
    fc88:	40 e8       	ldi	r20, 0x80	; 128
    fc8a:	5f e3       	ldi	r21, 0x3F	; 63
    fc8c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    fc90:	88 23       	and	r24, r24
    fc92:	0c f0       	brlt	.+2      	; 0xfc96 <travel_path+0x2194>
    fc94:	10 e0       	ldi	r17, 0x00	; 0
    fc96:	11 23       	and	r17, r17
    fc98:	49 f0       	breq	.+18     	; 0xfcac <travel_path+0x21aa>
		__ticks = 1;
    fc9a:	ce 01       	movw	r24, r28
    fc9c:	8d 5e       	subi	r24, 0xED	; 237
    fc9e:	9e 4f       	sbci	r25, 0xFE	; 254
    fca0:	21 e0       	ldi	r18, 0x01	; 1
    fca2:	30 e0       	ldi	r19, 0x00	; 0
    fca4:	fc 01       	movw	r30, r24
    fca6:	31 83       	std	Z+1, r19	; 0x01
    fca8:	20 83       	st	Z, r18
    fcaa:	74 c0       	rjmp	.+232    	; 0xfd94 <travel_path+0x2292>
	else if (__tmp > 65535)
    fcac:	ce 01       	movw	r24, r28
    fcae:	81 5f       	subi	r24, 0xF1	; 241
    fcb0:	9e 4f       	sbci	r25, 0xFE	; 254
    fcb2:	11 e0       	ldi	r17, 0x01	; 1
    fcb4:	fc 01       	movw	r30, r24
    fcb6:	60 81       	ld	r22, Z
    fcb8:	71 81       	ldd	r23, Z+1	; 0x01
    fcba:	82 81       	ldd	r24, Z+2	; 0x02
    fcbc:	93 81       	ldd	r25, Z+3	; 0x03
    fcbe:	20 e0       	ldi	r18, 0x00	; 0
    fcc0:	3f ef       	ldi	r19, 0xFF	; 255
    fcc2:	4f e7       	ldi	r20, 0x7F	; 127
    fcc4:	57 e4       	ldi	r21, 0x47	; 71
    fcc6:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    fcca:	18 16       	cp	r1, r24
    fccc:	0c f0       	brlt	.+2      	; 0xfcd0 <travel_path+0x21ce>
    fcce:	10 e0       	ldi	r17, 0x00	; 0
    fcd0:	11 23       	and	r17, r17
    fcd2:	09 f4       	brne	.+2      	; 0xfcd6 <travel_path+0x21d4>
    fcd4:	4d c0       	rjmp	.+154    	; 0xfd70 <travel_path+0x226e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fcd6:	ce 01       	movw	r24, r28
    fcd8:	85 5f       	subi	r24, 0xF5	; 245
    fcda:	9e 4f       	sbci	r25, 0xFE	; 254
    fcdc:	fc 01       	movw	r30, r24
    fcde:	60 81       	ld	r22, Z
    fce0:	71 81       	ldd	r23, Z+1	; 0x01
    fce2:	82 81       	ldd	r24, Z+2	; 0x02
    fce4:	93 81       	ldd	r25, Z+3	; 0x03
    fce6:	20 e0       	ldi	r18, 0x00	; 0
    fce8:	30 e0       	ldi	r19, 0x00	; 0
    fcea:	40 e2       	ldi	r20, 0x20	; 32
    fcec:	51 e4       	ldi	r21, 0x41	; 65
    fcee:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    fcf2:	dc 01       	movw	r26, r24
    fcf4:	cb 01       	movw	r24, r22
    fcf6:	8e 01       	movw	r16, r28
    fcf8:	0d 5e       	subi	r16, 0xED	; 237
    fcfa:	1e 4f       	sbci	r17, 0xFE	; 254
    fcfc:	bc 01       	movw	r22, r24
    fcfe:	cd 01       	movw	r24, r26
    fd00:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    fd04:	dc 01       	movw	r26, r24
    fd06:	cb 01       	movw	r24, r22
    fd08:	f8 01       	movw	r30, r16
    fd0a:	91 83       	std	Z+1, r25	; 0x01
    fd0c:	80 83       	st	Z, r24
    fd0e:	27 c0       	rjmp	.+78     	; 0xfd5e <travel_path+0x225c>
    fd10:	ce 01       	movw	r24, r28
    fd12:	8b 5e       	subi	r24, 0xEB	; 235
    fd14:	9e 4f       	sbci	r25, 0xFE	; 254
    fd16:	20 e7       	ldi	r18, 0x70	; 112
    fd18:	31 e0       	ldi	r19, 0x01	; 1
    fd1a:	fc 01       	movw	r30, r24
    fd1c:	31 83       	std	Z+1, r19	; 0x01
    fd1e:	20 83       	st	Z, r18
    fd20:	ce 01       	movw	r24, r28
    fd22:	8b 5e       	subi	r24, 0xEB	; 235
    fd24:	9e 4f       	sbci	r25, 0xFE	; 254
    fd26:	fc 01       	movw	r30, r24
    fd28:	80 81       	ld	r24, Z
    fd2a:	91 81       	ldd	r25, Z+1	; 0x01
    fd2c:	8c 01       	movw	r16, r24
    fd2e:	c8 01       	movw	r24, r16
    fd30:	01 97       	sbiw	r24, 0x01	; 1
    fd32:	f1 f7       	brne	.-4      	; 0xfd30 <travel_path+0x222e>
    fd34:	8c 01       	movw	r16, r24
    fd36:	ce 01       	movw	r24, r28
    fd38:	8b 5e       	subi	r24, 0xEB	; 235
    fd3a:	9e 4f       	sbci	r25, 0xFE	; 254
    fd3c:	fc 01       	movw	r30, r24
    fd3e:	11 83       	std	Z+1, r17	; 0x01
    fd40:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fd42:	ce 01       	movw	r24, r28
    fd44:	8d 5e       	subi	r24, 0xED	; 237
    fd46:	9e 4f       	sbci	r25, 0xFE	; 254
    fd48:	9e 01       	movw	r18, r28
    fd4a:	2d 5e       	subi	r18, 0xED	; 237
    fd4c:	3e 4f       	sbci	r19, 0xFE	; 254
    fd4e:	f9 01       	movw	r30, r18
    fd50:	20 81       	ld	r18, Z
    fd52:	31 81       	ldd	r19, Z+1	; 0x01
    fd54:	21 50       	subi	r18, 0x01	; 1
    fd56:	30 40       	sbci	r19, 0x00	; 0
    fd58:	fc 01       	movw	r30, r24
    fd5a:	31 83       	std	Z+1, r19	; 0x01
    fd5c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fd5e:	ce 01       	movw	r24, r28
    fd60:	8d 5e       	subi	r24, 0xED	; 237
    fd62:	9e 4f       	sbci	r25, 0xFE	; 254
    fd64:	fc 01       	movw	r30, r24
    fd66:	80 81       	ld	r24, Z
    fd68:	91 81       	ldd	r25, Z+1	; 0x01
    fd6a:	00 97       	sbiw	r24, 0x00	; 0
    fd6c:	89 f6       	brne	.-94     	; 0xfd10 <travel_path+0x220e>
    fd6e:	2f c0       	rjmp	.+94     	; 0xfdce <travel_path+0x22cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    fd70:	8e 01       	movw	r16, r28
    fd72:	0d 5e       	subi	r16, 0xED	; 237
    fd74:	1e 4f       	sbci	r17, 0xFE	; 254
    fd76:	ce 01       	movw	r24, r28
    fd78:	81 5f       	subi	r24, 0xF1	; 241
    fd7a:	9e 4f       	sbci	r25, 0xFE	; 254
    fd7c:	fc 01       	movw	r30, r24
    fd7e:	60 81       	ld	r22, Z
    fd80:	71 81       	ldd	r23, Z+1	; 0x01
    fd82:	82 81       	ldd	r24, Z+2	; 0x02
    fd84:	93 81       	ldd	r25, Z+3	; 0x03
    fd86:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    fd8a:	dc 01       	movw	r26, r24
    fd8c:	cb 01       	movw	r24, r22
    fd8e:	f8 01       	movw	r30, r16
    fd90:	91 83       	std	Z+1, r25	; 0x01
    fd92:	80 83       	st	Z, r24
    fd94:	ce 01       	movw	r24, r28
    fd96:	89 5e       	subi	r24, 0xE9	; 233
    fd98:	9e 4f       	sbci	r25, 0xFE	; 254
    fd9a:	9e 01       	movw	r18, r28
    fd9c:	2d 5e       	subi	r18, 0xED	; 237
    fd9e:	3e 4f       	sbci	r19, 0xFE	; 254
    fda0:	f9 01       	movw	r30, r18
    fda2:	20 81       	ld	r18, Z
    fda4:	31 81       	ldd	r19, Z+1	; 0x01
    fda6:	fc 01       	movw	r30, r24
    fda8:	31 83       	std	Z+1, r19	; 0x01
    fdaa:	20 83       	st	Z, r18
    fdac:	ce 01       	movw	r24, r28
    fdae:	89 5e       	subi	r24, 0xE9	; 233
    fdb0:	9e 4f       	sbci	r25, 0xFE	; 254
    fdb2:	fc 01       	movw	r30, r24
    fdb4:	80 81       	ld	r24, Z
    fdb6:	91 81       	ldd	r25, Z+1	; 0x01
    fdb8:	8c 01       	movw	r16, r24
    fdba:	c8 01       	movw	r24, r16
    fdbc:	01 97       	sbiw	r24, 0x01	; 1
    fdbe:	f1 f7       	brne	.-4      	; 0xfdbc <travel_path+0x22ba>
    fdc0:	8c 01       	movw	r16, r24
    fdc2:	ce 01       	movw	r24, r28
    fdc4:	89 5e       	subi	r24, 0xE9	; 233
    fdc6:	9e 4f       	sbci	r25, 0xFE	; 254
    fdc8:	fc 01       	movw	r30, r24
    fdca:	11 83       	std	Z+1, r17	; 0x01
    fdcc:	00 83       	st	Z, r16
						_delay_ms(20);
						spl_right2();
    fdce:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <spl_right2>
    fdd2:	9e 01       	movw	r18, r28
    fdd4:	27 5e       	subi	r18, 0xE7	; 231
    fdd6:	3e 4f       	sbci	r19, 0xFE	; 254
    fdd8:	80 e0       	ldi	r24, 0x00	; 0
    fdda:	90 e0       	ldi	r25, 0x00	; 0
    fddc:	a0 ea       	ldi	r26, 0xA0	; 160
    fdde:	b1 e4       	ldi	r27, 0x41	; 65
    fde0:	f9 01       	movw	r30, r18
    fde2:	80 83       	st	Z, r24
    fde4:	91 83       	std	Z+1, r25	; 0x01
    fde6:	a2 83       	std	Z+2, r26	; 0x02
    fde8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    fdea:	8e 01       	movw	r16, r28
    fdec:	03 5e       	subi	r16, 0xE3	; 227
    fdee:	1e 4f       	sbci	r17, 0xFE	; 254
    fdf0:	ce 01       	movw	r24, r28
    fdf2:	87 5e       	subi	r24, 0xE7	; 231
    fdf4:	9e 4f       	sbci	r25, 0xFE	; 254
    fdf6:	fc 01       	movw	r30, r24
    fdf8:	60 81       	ld	r22, Z
    fdfa:	71 81       	ldd	r23, Z+1	; 0x01
    fdfc:	82 81       	ldd	r24, Z+2	; 0x02
    fdfe:	93 81       	ldd	r25, Z+3	; 0x03
    fe00:	26 e6       	ldi	r18, 0x66	; 102
    fe02:	36 e6       	ldi	r19, 0x66	; 102
    fe04:	46 e6       	ldi	r20, 0x66	; 102
    fe06:	55 e4       	ldi	r21, 0x45	; 69
    fe08:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    fe0c:	dc 01       	movw	r26, r24
    fe0e:	cb 01       	movw	r24, r22
    fe10:	f8 01       	movw	r30, r16
    fe12:	80 83       	st	Z, r24
    fe14:	91 83       	std	Z+1, r25	; 0x01
    fe16:	a2 83       	std	Z+2, r26	; 0x02
    fe18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    fe1a:	ce 01       	movw	r24, r28
    fe1c:	83 5e       	subi	r24, 0xE3	; 227
    fe1e:	9e 4f       	sbci	r25, 0xFE	; 254
    fe20:	11 e0       	ldi	r17, 0x01	; 1
    fe22:	fc 01       	movw	r30, r24
    fe24:	60 81       	ld	r22, Z
    fe26:	71 81       	ldd	r23, Z+1	; 0x01
    fe28:	82 81       	ldd	r24, Z+2	; 0x02
    fe2a:	93 81       	ldd	r25, Z+3	; 0x03
    fe2c:	20 e0       	ldi	r18, 0x00	; 0
    fe2e:	30 e0       	ldi	r19, 0x00	; 0
    fe30:	40 e8       	ldi	r20, 0x80	; 128
    fe32:	5f e3       	ldi	r21, 0x3F	; 63
    fe34:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    fe38:	88 23       	and	r24, r24
    fe3a:	0c f0       	brlt	.+2      	; 0xfe3e <travel_path+0x233c>
    fe3c:	10 e0       	ldi	r17, 0x00	; 0
    fe3e:	11 23       	and	r17, r17
    fe40:	49 f0       	breq	.+18     	; 0xfe54 <travel_path+0x2352>
		__ticks = 1;
    fe42:	ce 01       	movw	r24, r28
    fe44:	8f 5d       	subi	r24, 0xDF	; 223
    fe46:	9e 4f       	sbci	r25, 0xFE	; 254
    fe48:	21 e0       	ldi	r18, 0x01	; 1
    fe4a:	30 e0       	ldi	r19, 0x00	; 0
    fe4c:	fc 01       	movw	r30, r24
    fe4e:	31 83       	std	Z+1, r19	; 0x01
    fe50:	20 83       	st	Z, r18
    fe52:	74 c0       	rjmp	.+232    	; 0xff3c <travel_path+0x243a>
	else if (__tmp > 65535)
    fe54:	ce 01       	movw	r24, r28
    fe56:	83 5e       	subi	r24, 0xE3	; 227
    fe58:	9e 4f       	sbci	r25, 0xFE	; 254
    fe5a:	11 e0       	ldi	r17, 0x01	; 1
    fe5c:	fc 01       	movw	r30, r24
    fe5e:	60 81       	ld	r22, Z
    fe60:	71 81       	ldd	r23, Z+1	; 0x01
    fe62:	82 81       	ldd	r24, Z+2	; 0x02
    fe64:	93 81       	ldd	r25, Z+3	; 0x03
    fe66:	20 e0       	ldi	r18, 0x00	; 0
    fe68:	3f ef       	ldi	r19, 0xFF	; 255
    fe6a:	4f e7       	ldi	r20, 0x7F	; 127
    fe6c:	57 e4       	ldi	r21, 0x47	; 71
    fe6e:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
    fe72:	18 16       	cp	r1, r24
    fe74:	0c f0       	brlt	.+2      	; 0xfe78 <travel_path+0x2376>
    fe76:	10 e0       	ldi	r17, 0x00	; 0
    fe78:	11 23       	and	r17, r17
    fe7a:	09 f4       	brne	.+2      	; 0xfe7e <travel_path+0x237c>
    fe7c:	4d c0       	rjmp	.+154    	; 0xff18 <travel_path+0x2416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    fe7e:	ce 01       	movw	r24, r28
    fe80:	87 5e       	subi	r24, 0xE7	; 231
    fe82:	9e 4f       	sbci	r25, 0xFE	; 254
    fe84:	fc 01       	movw	r30, r24
    fe86:	60 81       	ld	r22, Z
    fe88:	71 81       	ldd	r23, Z+1	; 0x01
    fe8a:	82 81       	ldd	r24, Z+2	; 0x02
    fe8c:	93 81       	ldd	r25, Z+3	; 0x03
    fe8e:	20 e0       	ldi	r18, 0x00	; 0
    fe90:	30 e0       	ldi	r19, 0x00	; 0
    fe92:	40 e2       	ldi	r20, 0x20	; 32
    fe94:	51 e4       	ldi	r21, 0x41	; 65
    fe96:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    fe9a:	dc 01       	movw	r26, r24
    fe9c:	cb 01       	movw	r24, r22
    fe9e:	8e 01       	movw	r16, r28
    fea0:	0f 5d       	subi	r16, 0xDF	; 223
    fea2:	1e 4f       	sbci	r17, 0xFE	; 254
    fea4:	bc 01       	movw	r22, r24
    fea6:	cd 01       	movw	r24, r26
    fea8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    feac:	dc 01       	movw	r26, r24
    feae:	cb 01       	movw	r24, r22
    feb0:	f8 01       	movw	r30, r16
    feb2:	91 83       	std	Z+1, r25	; 0x01
    feb4:	80 83       	st	Z, r24
    feb6:	27 c0       	rjmp	.+78     	; 0xff06 <travel_path+0x2404>
    feb8:	ce 01       	movw	r24, r28
    feba:	8d 5d       	subi	r24, 0xDD	; 221
    febc:	9e 4f       	sbci	r25, 0xFE	; 254
    febe:	20 e7       	ldi	r18, 0x70	; 112
    fec0:	31 e0       	ldi	r19, 0x01	; 1
    fec2:	fc 01       	movw	r30, r24
    fec4:	31 83       	std	Z+1, r19	; 0x01
    fec6:	20 83       	st	Z, r18
    fec8:	ce 01       	movw	r24, r28
    feca:	8d 5d       	subi	r24, 0xDD	; 221
    fecc:	9e 4f       	sbci	r25, 0xFE	; 254
    fece:	fc 01       	movw	r30, r24
    fed0:	80 81       	ld	r24, Z
    fed2:	91 81       	ldd	r25, Z+1	; 0x01
    fed4:	8c 01       	movw	r16, r24
    fed6:	c8 01       	movw	r24, r16
    fed8:	01 97       	sbiw	r24, 0x01	; 1
    feda:	f1 f7       	brne	.-4      	; 0xfed8 <travel_path+0x23d6>
    fedc:	8c 01       	movw	r16, r24
    fede:	ce 01       	movw	r24, r28
    fee0:	8d 5d       	subi	r24, 0xDD	; 221
    fee2:	9e 4f       	sbci	r25, 0xFE	; 254
    fee4:	fc 01       	movw	r30, r24
    fee6:	11 83       	std	Z+1, r17	; 0x01
    fee8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    feea:	ce 01       	movw	r24, r28
    feec:	8f 5d       	subi	r24, 0xDF	; 223
    feee:	9e 4f       	sbci	r25, 0xFE	; 254
    fef0:	9e 01       	movw	r18, r28
    fef2:	2f 5d       	subi	r18, 0xDF	; 223
    fef4:	3e 4f       	sbci	r19, 0xFE	; 254
    fef6:	f9 01       	movw	r30, r18
    fef8:	20 81       	ld	r18, Z
    fefa:	31 81       	ldd	r19, Z+1	; 0x01
    fefc:	21 50       	subi	r18, 0x01	; 1
    fefe:	30 40       	sbci	r19, 0x00	; 0
    ff00:	fc 01       	movw	r30, r24
    ff02:	31 83       	std	Z+1, r19	; 0x01
    ff04:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ff06:	ce 01       	movw	r24, r28
    ff08:	8f 5d       	subi	r24, 0xDF	; 223
    ff0a:	9e 4f       	sbci	r25, 0xFE	; 254
    ff0c:	fc 01       	movw	r30, r24
    ff0e:	80 81       	ld	r24, Z
    ff10:	91 81       	ldd	r25, Z+1	; 0x01
    ff12:	00 97       	sbiw	r24, 0x00	; 0
    ff14:	89 f6       	brne	.-94     	; 0xfeb8 <travel_path+0x23b6>
    ff16:	04 c1       	rjmp	.+520    	; 0x10120 <travel_path+0x261e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ff18:	8e 01       	movw	r16, r28
    ff1a:	0f 5d       	subi	r16, 0xDF	; 223
    ff1c:	1e 4f       	sbci	r17, 0xFE	; 254
    ff1e:	ce 01       	movw	r24, r28
    ff20:	83 5e       	subi	r24, 0xE3	; 227
    ff22:	9e 4f       	sbci	r25, 0xFE	; 254
    ff24:	fc 01       	movw	r30, r24
    ff26:	60 81       	ld	r22, Z
    ff28:	71 81       	ldd	r23, Z+1	; 0x01
    ff2a:	82 81       	ldd	r24, Z+2	; 0x02
    ff2c:	93 81       	ldd	r25, Z+3	; 0x03
    ff2e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
    ff32:	dc 01       	movw	r26, r24
    ff34:	cb 01       	movw	r24, r22
    ff36:	f8 01       	movw	r30, r16
    ff38:	91 83       	std	Z+1, r25	; 0x01
    ff3a:	80 83       	st	Z, r24
    ff3c:	ce 01       	movw	r24, r28
    ff3e:	8b 5d       	subi	r24, 0xDB	; 219
    ff40:	9e 4f       	sbci	r25, 0xFE	; 254
    ff42:	9e 01       	movw	r18, r28
    ff44:	2f 5d       	subi	r18, 0xDF	; 223
    ff46:	3e 4f       	sbci	r19, 0xFE	; 254
    ff48:	f9 01       	movw	r30, r18
    ff4a:	20 81       	ld	r18, Z
    ff4c:	31 81       	ldd	r19, Z+1	; 0x01
    ff4e:	fc 01       	movw	r30, r24
    ff50:	31 83       	std	Z+1, r19	; 0x01
    ff52:	20 83       	st	Z, r18
    ff54:	ce 01       	movw	r24, r28
    ff56:	8b 5d       	subi	r24, 0xDB	; 219
    ff58:	9e 4f       	sbci	r25, 0xFE	; 254
    ff5a:	fc 01       	movw	r30, r24
    ff5c:	80 81       	ld	r24, Z
    ff5e:	91 81       	ldd	r25, Z+1	; 0x01
    ff60:	8c 01       	movw	r16, r24
    ff62:	c8 01       	movw	r24, r16
    ff64:	01 97       	sbiw	r24, 0x01	; 1
    ff66:	f1 f7       	brne	.-4      	; 0xff64 <travel_path+0x2462>
    ff68:	8c 01       	movw	r16, r24
    ff6a:	ce 01       	movw	r24, r28
    ff6c:	8b 5d       	subi	r24, 0xDB	; 219
    ff6e:	9e 4f       	sbci	r25, 0xFE	; 254
    ff70:	fc 01       	movw	r30, r24
    ff72:	11 83       	std	Z+1, r17	; 0x01
    ff74:	00 83       	st	Z, r16
    ff76:	d4 c0       	rjmp	.+424    	; 0x10120 <travel_path+0x261e>
						_delay_ms(20);
						}						
				else
				{
					stop();
    ff78:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
    ff7c:	9e 01       	movw	r18, r28
    ff7e:	29 5d       	subi	r18, 0xD9	; 217
    ff80:	3e 4f       	sbci	r19, 0xFE	; 254
    ff82:	80 e0       	ldi	r24, 0x00	; 0
    ff84:	90 e0       	ldi	r25, 0x00	; 0
    ff86:	a0 ea       	ldi	r26, 0xA0	; 160
    ff88:	b1 e4       	ldi	r27, 0x41	; 65
    ff8a:	f9 01       	movw	r30, r18
    ff8c:	80 83       	st	Z, r24
    ff8e:	91 83       	std	Z+1, r25	; 0x01
    ff90:	a2 83       	std	Z+2, r26	; 0x02
    ff92:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    ff94:	8e 01       	movw	r16, r28
    ff96:	05 5d       	subi	r16, 0xD5	; 213
    ff98:	1e 4f       	sbci	r17, 0xFE	; 254
    ff9a:	ce 01       	movw	r24, r28
    ff9c:	89 5d       	subi	r24, 0xD9	; 217
    ff9e:	9e 4f       	sbci	r25, 0xFE	; 254
    ffa0:	fc 01       	movw	r30, r24
    ffa2:	60 81       	ld	r22, Z
    ffa4:	71 81       	ldd	r23, Z+1	; 0x01
    ffa6:	82 81       	ldd	r24, Z+2	; 0x02
    ffa8:	93 81       	ldd	r25, Z+3	; 0x03
    ffaa:	26 e6       	ldi	r18, 0x66	; 102
    ffac:	36 e6       	ldi	r19, 0x66	; 102
    ffae:	46 e6       	ldi	r20, 0x66	; 102
    ffb0:	55 e4       	ldi	r21, 0x45	; 69
    ffb2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
    ffb6:	dc 01       	movw	r26, r24
    ffb8:	cb 01       	movw	r24, r22
    ffba:	f8 01       	movw	r30, r16
    ffbc:	80 83       	st	Z, r24
    ffbe:	91 83       	std	Z+1, r25	; 0x01
    ffc0:	a2 83       	std	Z+2, r26	; 0x02
    ffc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    ffc4:	ce 01       	movw	r24, r28
    ffc6:	85 5d       	subi	r24, 0xD5	; 213
    ffc8:	9e 4f       	sbci	r25, 0xFE	; 254
    ffca:	11 e0       	ldi	r17, 0x01	; 1
    ffcc:	fc 01       	movw	r30, r24
    ffce:	60 81       	ld	r22, Z
    ffd0:	71 81       	ldd	r23, Z+1	; 0x01
    ffd2:	82 81       	ldd	r24, Z+2	; 0x02
    ffd4:	93 81       	ldd	r25, Z+3	; 0x03
    ffd6:	20 e0       	ldi	r18, 0x00	; 0
    ffd8:	30 e0       	ldi	r19, 0x00	; 0
    ffda:	40 e8       	ldi	r20, 0x80	; 128
    ffdc:	5f e3       	ldi	r21, 0x3F	; 63
    ffde:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
    ffe2:	88 23       	and	r24, r24
    ffe4:	0c f0       	brlt	.+2      	; 0xffe8 <travel_path+0x24e6>
    ffe6:	10 e0       	ldi	r17, 0x00	; 0
    ffe8:	11 23       	and	r17, r17
    ffea:	49 f0       	breq	.+18     	; 0xfffe <travel_path+0x24fc>
		__ticks = 1;
    ffec:	ce 01       	movw	r24, r28
    ffee:	81 5d       	subi	r24, 0xD1	; 209
    fff0:	9e 4f       	sbci	r25, 0xFE	; 254
    fff2:	21 e0       	ldi	r18, 0x01	; 1
    fff4:	30 e0       	ldi	r19, 0x00	; 0
    fff6:	fc 01       	movw	r30, r24
    fff8:	31 83       	std	Z+1, r19	; 0x01
    fffa:	20 83       	st	Z, r18
    fffc:	74 c0       	rjmp	.+232    	; 0x100e6 <travel_path+0x25e4>
	else if (__tmp > 65535)
    fffe:	ce 01       	movw	r24, r28
   10000:	85 5d       	subi	r24, 0xD5	; 213
   10002:	9e 4f       	sbci	r25, 0xFE	; 254
   10004:	11 e0       	ldi	r17, 0x01	; 1
   10006:	fc 01       	movw	r30, r24
   10008:	60 81       	ld	r22, Z
   1000a:	71 81       	ldd	r23, Z+1	; 0x01
   1000c:	82 81       	ldd	r24, Z+2	; 0x02
   1000e:	93 81       	ldd	r25, Z+3	; 0x03
   10010:	20 e0       	ldi	r18, 0x00	; 0
   10012:	3f ef       	ldi	r19, 0xFF	; 255
   10014:	4f e7       	ldi	r20, 0x7F	; 127
   10016:	57 e4       	ldi	r21, 0x47	; 71
   10018:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   1001c:	18 16       	cp	r1, r24
   1001e:	0c f0       	brlt	.+2      	; 0x10022 <travel_path+0x2520>
   10020:	10 e0       	ldi	r17, 0x00	; 0
   10022:	11 23       	and	r17, r17
   10024:	09 f4       	brne	.+2      	; 0x10028 <travel_path+0x2526>
   10026:	4d c0       	rjmp	.+154    	; 0x100c2 <travel_path+0x25c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10028:	ce 01       	movw	r24, r28
   1002a:	89 5d       	subi	r24, 0xD9	; 217
   1002c:	9e 4f       	sbci	r25, 0xFE	; 254
   1002e:	fc 01       	movw	r30, r24
   10030:	60 81       	ld	r22, Z
   10032:	71 81       	ldd	r23, Z+1	; 0x01
   10034:	82 81       	ldd	r24, Z+2	; 0x02
   10036:	93 81       	ldd	r25, Z+3	; 0x03
   10038:	20 e0       	ldi	r18, 0x00	; 0
   1003a:	30 e0       	ldi	r19, 0x00	; 0
   1003c:	40 e2       	ldi	r20, 0x20	; 32
   1003e:	51 e4       	ldi	r21, 0x41	; 65
   10040:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10044:	dc 01       	movw	r26, r24
   10046:	cb 01       	movw	r24, r22
   10048:	8e 01       	movw	r16, r28
   1004a:	01 5d       	subi	r16, 0xD1	; 209
   1004c:	1e 4f       	sbci	r17, 0xFE	; 254
   1004e:	bc 01       	movw	r22, r24
   10050:	cd 01       	movw	r24, r26
   10052:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10056:	dc 01       	movw	r26, r24
   10058:	cb 01       	movw	r24, r22
   1005a:	f8 01       	movw	r30, r16
   1005c:	91 83       	std	Z+1, r25	; 0x01
   1005e:	80 83       	st	Z, r24
   10060:	27 c0       	rjmp	.+78     	; 0x100b0 <travel_path+0x25ae>
   10062:	ce 01       	movw	r24, r28
   10064:	8f 5c       	subi	r24, 0xCF	; 207
   10066:	9e 4f       	sbci	r25, 0xFE	; 254
   10068:	20 e7       	ldi	r18, 0x70	; 112
   1006a:	31 e0       	ldi	r19, 0x01	; 1
   1006c:	fc 01       	movw	r30, r24
   1006e:	31 83       	std	Z+1, r19	; 0x01
   10070:	20 83       	st	Z, r18
   10072:	ce 01       	movw	r24, r28
   10074:	8f 5c       	subi	r24, 0xCF	; 207
   10076:	9e 4f       	sbci	r25, 0xFE	; 254
   10078:	fc 01       	movw	r30, r24
   1007a:	80 81       	ld	r24, Z
   1007c:	91 81       	ldd	r25, Z+1	; 0x01
   1007e:	8c 01       	movw	r16, r24
   10080:	c8 01       	movw	r24, r16
   10082:	01 97       	sbiw	r24, 0x01	; 1
   10084:	f1 f7       	brne	.-4      	; 0x10082 <travel_path+0x2580>
   10086:	8c 01       	movw	r16, r24
   10088:	ce 01       	movw	r24, r28
   1008a:	8f 5c       	subi	r24, 0xCF	; 207
   1008c:	9e 4f       	sbci	r25, 0xFE	; 254
   1008e:	fc 01       	movw	r30, r24
   10090:	11 83       	std	Z+1, r17	; 0x01
   10092:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10094:	ce 01       	movw	r24, r28
   10096:	81 5d       	subi	r24, 0xD1	; 209
   10098:	9e 4f       	sbci	r25, 0xFE	; 254
   1009a:	9e 01       	movw	r18, r28
   1009c:	21 5d       	subi	r18, 0xD1	; 209
   1009e:	3e 4f       	sbci	r19, 0xFE	; 254
   100a0:	f9 01       	movw	r30, r18
   100a2:	20 81       	ld	r18, Z
   100a4:	31 81       	ldd	r19, Z+1	; 0x01
   100a6:	21 50       	subi	r18, 0x01	; 1
   100a8:	30 40       	sbci	r19, 0x00	; 0
   100aa:	fc 01       	movw	r30, r24
   100ac:	31 83       	std	Z+1, r19	; 0x01
   100ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   100b0:	ce 01       	movw	r24, r28
   100b2:	81 5d       	subi	r24, 0xD1	; 209
   100b4:	9e 4f       	sbci	r25, 0xFE	; 254
   100b6:	fc 01       	movw	r30, r24
   100b8:	80 81       	ld	r24, Z
   100ba:	91 81       	ldd	r25, Z+1	; 0x01
   100bc:	00 97       	sbiw	r24, 0x00	; 0
   100be:	89 f6       	brne	.-94     	; 0x10062 <travel_path+0x2560>
   100c0:	2f c0       	rjmp	.+94     	; 0x10120 <travel_path+0x261e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   100c2:	8e 01       	movw	r16, r28
   100c4:	01 5d       	subi	r16, 0xD1	; 209
   100c6:	1e 4f       	sbci	r17, 0xFE	; 254
   100c8:	ce 01       	movw	r24, r28
   100ca:	85 5d       	subi	r24, 0xD5	; 213
   100cc:	9e 4f       	sbci	r25, 0xFE	; 254
   100ce:	fc 01       	movw	r30, r24
   100d0:	60 81       	ld	r22, Z
   100d2:	71 81       	ldd	r23, Z+1	; 0x01
   100d4:	82 81       	ldd	r24, Z+2	; 0x02
   100d6:	93 81       	ldd	r25, Z+3	; 0x03
   100d8:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   100dc:	dc 01       	movw	r26, r24
   100de:	cb 01       	movw	r24, r22
   100e0:	f8 01       	movw	r30, r16
   100e2:	91 83       	std	Z+1, r25	; 0x01
   100e4:	80 83       	st	Z, r24
   100e6:	ce 01       	movw	r24, r28
   100e8:	8d 5c       	subi	r24, 0xCD	; 205
   100ea:	9e 4f       	sbci	r25, 0xFE	; 254
   100ec:	9e 01       	movw	r18, r28
   100ee:	21 5d       	subi	r18, 0xD1	; 209
   100f0:	3e 4f       	sbci	r19, 0xFE	; 254
   100f2:	f9 01       	movw	r30, r18
   100f4:	20 81       	ld	r18, Z
   100f6:	31 81       	ldd	r19, Z+1	; 0x01
   100f8:	fc 01       	movw	r30, r24
   100fa:	31 83       	std	Z+1, r19	; 0x01
   100fc:	20 83       	st	Z, r18
   100fe:	ce 01       	movw	r24, r28
   10100:	8d 5c       	subi	r24, 0xCD	; 205
   10102:	9e 4f       	sbci	r25, 0xFE	; 254
   10104:	fc 01       	movw	r30, r24
   10106:	80 81       	ld	r24, Z
   10108:	91 81       	ldd	r25, Z+1	; 0x01
   1010a:	8c 01       	movw	r16, r24
   1010c:	c8 01       	movw	r24, r16
   1010e:	01 97       	sbiw	r24, 0x01	; 1
   10110:	f1 f7       	brne	.-4      	; 0x1010e <travel_path+0x260c>
   10112:	8c 01       	movw	r16, r24
   10114:	ce 01       	movw	r24, r28
   10116:	8d 5c       	subi	r24, 0xCD	; 205
   10118:	9e 4f       	sbci	r25, 0xFE	; 254
   1011a:	fc 01       	movw	r30, r24
   1011c:	11 83       	std	Z+1, r17	; 0x01
   1011e:	00 83       	st	Z, r16
					_delay_ms(20);
				}					
				node++;
   10120:	80 91 4f 03 	lds	r24, 0x034F
   10124:	90 91 50 03 	lds	r25, 0x0350
   10128:	01 96       	adiw	r24, 0x01	; 1
   1012a:	90 93 50 03 	sts	0x0350, r25
   1012e:	80 93 4f 03 	sts	0x034F, r24
				pick_drop(master_path[node]);
   10132:	80 91 4f 03 	lds	r24, 0x034F
   10136:	90 91 50 03 	lds	r25, 0x0350
   1013a:	8d 5a       	subi	r24, 0xAD	; 173
   1013c:	9c 4f       	sbci	r25, 0xFC	; 252
   1013e:	fc 01       	movw	r30, r24
   10140:	80 81       	ld	r24, Z
   10142:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
				node++;
   10146:	80 91 4f 03 	lds	r24, 0x034F
   1014a:	90 91 50 03 	lds	r25, 0x0350
   1014e:	01 96       	adiw	r24, 0x01	; 1
   10150:	90 93 50 03 	sts	0x0350, r25
   10154:	80 93 4f 03 	sts	0x034F, r24
				travel_path(master_path[node]);
   10158:	80 91 4f 03 	lds	r24, 0x034F
   1015c:	90 91 50 03 	lds	r25, 0x0350
   10160:	8d 5a       	subi	r24, 0xAD	; 173
   10162:	9c 4f       	sbci	r25, 0xFC	; 252
   10164:	fc 01       	movw	r30, r24
   10166:	80 81       	ld	r24, Z
   10168:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
   1016c:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
			}
			else if(master_path[node+1]=='D')//mod
   10170:	80 91 4f 03 	lds	r24, 0x034F
   10174:	90 91 50 03 	lds	r25, 0x0350
   10178:	01 96       	adiw	r24, 0x01	; 1
   1017a:	8d 5a       	subi	r24, 0xAD	; 173
   1017c:	9c 4f       	sbci	r25, 0xFC	; 252
   1017e:	fc 01       	movw	r30, r24
   10180:	80 81       	ld	r24, Z
   10182:	84 34       	cpi	r24, 0x44	; 68
   10184:	09 f0       	breq	.+2      	; 0x10188 <travel_path+0x2686>
   10186:	d2 c1       	rjmp	.+932    	; 0x1052c <travel_path+0x2a2a>
			{
				forward_mm(20);
   10188:	84 e1       	ldi	r24, 0x14	; 20
   1018a:	90 e0       	ldi	r25, 0x00	; 0
   1018c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
   10190:	9e 01       	movw	r18, r28
   10192:	2b 5c       	subi	r18, 0xCB	; 203
   10194:	3e 4f       	sbci	r19, 0xFE	; 254
   10196:	80 e0       	ldi	r24, 0x00	; 0
   10198:	90 e0       	ldi	r25, 0x00	; 0
   1019a:	a0 ea       	ldi	r26, 0xA0	; 160
   1019c:	b1 e4       	ldi	r27, 0x41	; 65
   1019e:	f9 01       	movw	r30, r18
   101a0:	80 83       	st	Z, r24
   101a2:	91 83       	std	Z+1, r25	; 0x01
   101a4:	a2 83       	std	Z+2, r26	; 0x02
   101a6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   101a8:	8e 01       	movw	r16, r28
   101aa:	07 5c       	subi	r16, 0xC7	; 199
   101ac:	1e 4f       	sbci	r17, 0xFE	; 254
   101ae:	ce 01       	movw	r24, r28
   101b0:	8b 5c       	subi	r24, 0xCB	; 203
   101b2:	9e 4f       	sbci	r25, 0xFE	; 254
   101b4:	fc 01       	movw	r30, r24
   101b6:	60 81       	ld	r22, Z
   101b8:	71 81       	ldd	r23, Z+1	; 0x01
   101ba:	82 81       	ldd	r24, Z+2	; 0x02
   101bc:	93 81       	ldd	r25, Z+3	; 0x03
   101be:	26 e6       	ldi	r18, 0x66	; 102
   101c0:	36 e6       	ldi	r19, 0x66	; 102
   101c2:	46 e6       	ldi	r20, 0x66	; 102
   101c4:	55 e4       	ldi	r21, 0x45	; 69
   101c6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   101ca:	dc 01       	movw	r26, r24
   101cc:	cb 01       	movw	r24, r22
   101ce:	f8 01       	movw	r30, r16
   101d0:	80 83       	st	Z, r24
   101d2:	91 83       	std	Z+1, r25	; 0x01
   101d4:	a2 83       	std	Z+2, r26	; 0x02
   101d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   101d8:	ce 01       	movw	r24, r28
   101da:	87 5c       	subi	r24, 0xC7	; 199
   101dc:	9e 4f       	sbci	r25, 0xFE	; 254
   101de:	11 e0       	ldi	r17, 0x01	; 1
   101e0:	fc 01       	movw	r30, r24
   101e2:	60 81       	ld	r22, Z
   101e4:	71 81       	ldd	r23, Z+1	; 0x01
   101e6:	82 81       	ldd	r24, Z+2	; 0x02
   101e8:	93 81       	ldd	r25, Z+3	; 0x03
   101ea:	20 e0       	ldi	r18, 0x00	; 0
   101ec:	30 e0       	ldi	r19, 0x00	; 0
   101ee:	40 e8       	ldi	r20, 0x80	; 128
   101f0:	5f e3       	ldi	r21, 0x3F	; 63
   101f2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   101f6:	88 23       	and	r24, r24
   101f8:	0c f0       	brlt	.+2      	; 0x101fc <travel_path+0x26fa>
   101fa:	10 e0       	ldi	r17, 0x00	; 0
   101fc:	11 23       	and	r17, r17
   101fe:	49 f0       	breq	.+18     	; 0x10212 <travel_path+0x2710>
		__ticks = 1;
   10200:	ce 01       	movw	r24, r28
   10202:	83 5c       	subi	r24, 0xC3	; 195
   10204:	9e 4f       	sbci	r25, 0xFE	; 254
   10206:	21 e0       	ldi	r18, 0x01	; 1
   10208:	30 e0       	ldi	r19, 0x00	; 0
   1020a:	fc 01       	movw	r30, r24
   1020c:	31 83       	std	Z+1, r19	; 0x01
   1020e:	20 83       	st	Z, r18
   10210:	74 c0       	rjmp	.+232    	; 0x102fa <travel_path+0x27f8>
	else if (__tmp > 65535)
   10212:	ce 01       	movw	r24, r28
   10214:	87 5c       	subi	r24, 0xC7	; 199
   10216:	9e 4f       	sbci	r25, 0xFE	; 254
   10218:	11 e0       	ldi	r17, 0x01	; 1
   1021a:	fc 01       	movw	r30, r24
   1021c:	60 81       	ld	r22, Z
   1021e:	71 81       	ldd	r23, Z+1	; 0x01
   10220:	82 81       	ldd	r24, Z+2	; 0x02
   10222:	93 81       	ldd	r25, Z+3	; 0x03
   10224:	20 e0       	ldi	r18, 0x00	; 0
   10226:	3f ef       	ldi	r19, 0xFF	; 255
   10228:	4f e7       	ldi	r20, 0x7F	; 127
   1022a:	57 e4       	ldi	r21, 0x47	; 71
   1022c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   10230:	18 16       	cp	r1, r24
   10232:	0c f0       	brlt	.+2      	; 0x10236 <travel_path+0x2734>
   10234:	10 e0       	ldi	r17, 0x00	; 0
   10236:	11 23       	and	r17, r17
   10238:	09 f4       	brne	.+2      	; 0x1023c <travel_path+0x273a>
   1023a:	4d c0       	rjmp	.+154    	; 0x102d6 <travel_path+0x27d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   1023c:	ce 01       	movw	r24, r28
   1023e:	8b 5c       	subi	r24, 0xCB	; 203
   10240:	9e 4f       	sbci	r25, 0xFE	; 254
   10242:	fc 01       	movw	r30, r24
   10244:	60 81       	ld	r22, Z
   10246:	71 81       	ldd	r23, Z+1	; 0x01
   10248:	82 81       	ldd	r24, Z+2	; 0x02
   1024a:	93 81       	ldd	r25, Z+3	; 0x03
   1024c:	20 e0       	ldi	r18, 0x00	; 0
   1024e:	30 e0       	ldi	r19, 0x00	; 0
   10250:	40 e2       	ldi	r20, 0x20	; 32
   10252:	51 e4       	ldi	r21, 0x41	; 65
   10254:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10258:	dc 01       	movw	r26, r24
   1025a:	cb 01       	movw	r24, r22
   1025c:	8e 01       	movw	r16, r28
   1025e:	03 5c       	subi	r16, 0xC3	; 195
   10260:	1e 4f       	sbci	r17, 0xFE	; 254
   10262:	bc 01       	movw	r22, r24
   10264:	cd 01       	movw	r24, r26
   10266:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   1026a:	dc 01       	movw	r26, r24
   1026c:	cb 01       	movw	r24, r22
   1026e:	f8 01       	movw	r30, r16
   10270:	91 83       	std	Z+1, r25	; 0x01
   10272:	80 83       	st	Z, r24
   10274:	27 c0       	rjmp	.+78     	; 0x102c4 <travel_path+0x27c2>
   10276:	ce 01       	movw	r24, r28
   10278:	81 5c       	subi	r24, 0xC1	; 193
   1027a:	9e 4f       	sbci	r25, 0xFE	; 254
   1027c:	20 e7       	ldi	r18, 0x70	; 112
   1027e:	31 e0       	ldi	r19, 0x01	; 1
   10280:	fc 01       	movw	r30, r24
   10282:	31 83       	std	Z+1, r19	; 0x01
   10284:	20 83       	st	Z, r18
   10286:	ce 01       	movw	r24, r28
   10288:	81 5c       	subi	r24, 0xC1	; 193
   1028a:	9e 4f       	sbci	r25, 0xFE	; 254
   1028c:	fc 01       	movw	r30, r24
   1028e:	80 81       	ld	r24, Z
   10290:	91 81       	ldd	r25, Z+1	; 0x01
   10292:	8c 01       	movw	r16, r24
   10294:	c8 01       	movw	r24, r16
   10296:	01 97       	sbiw	r24, 0x01	; 1
   10298:	f1 f7       	brne	.-4      	; 0x10296 <travel_path+0x2794>
   1029a:	8c 01       	movw	r16, r24
   1029c:	ce 01       	movw	r24, r28
   1029e:	81 5c       	subi	r24, 0xC1	; 193
   102a0:	9e 4f       	sbci	r25, 0xFE	; 254
   102a2:	fc 01       	movw	r30, r24
   102a4:	11 83       	std	Z+1, r17	; 0x01
   102a6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   102a8:	ce 01       	movw	r24, r28
   102aa:	83 5c       	subi	r24, 0xC3	; 195
   102ac:	9e 4f       	sbci	r25, 0xFE	; 254
   102ae:	9e 01       	movw	r18, r28
   102b0:	23 5c       	subi	r18, 0xC3	; 195
   102b2:	3e 4f       	sbci	r19, 0xFE	; 254
   102b4:	f9 01       	movw	r30, r18
   102b6:	20 81       	ld	r18, Z
   102b8:	31 81       	ldd	r19, Z+1	; 0x01
   102ba:	21 50       	subi	r18, 0x01	; 1
   102bc:	30 40       	sbci	r19, 0x00	; 0
   102be:	fc 01       	movw	r30, r24
   102c0:	31 83       	std	Z+1, r19	; 0x01
   102c2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   102c4:	ce 01       	movw	r24, r28
   102c6:	83 5c       	subi	r24, 0xC3	; 195
   102c8:	9e 4f       	sbci	r25, 0xFE	; 254
   102ca:	fc 01       	movw	r30, r24
   102cc:	80 81       	ld	r24, Z
   102ce:	91 81       	ldd	r25, Z+1	; 0x01
   102d0:	00 97       	sbiw	r24, 0x00	; 0
   102d2:	89 f6       	brne	.-94     	; 0x10276 <travel_path+0x2774>
   102d4:	2f c0       	rjmp	.+94     	; 0x10334 <travel_path+0x2832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   102d6:	8e 01       	movw	r16, r28
   102d8:	03 5c       	subi	r16, 0xC3	; 195
   102da:	1e 4f       	sbci	r17, 0xFE	; 254
   102dc:	ce 01       	movw	r24, r28
   102de:	87 5c       	subi	r24, 0xC7	; 199
   102e0:	9e 4f       	sbci	r25, 0xFE	; 254
   102e2:	fc 01       	movw	r30, r24
   102e4:	60 81       	ld	r22, Z
   102e6:	71 81       	ldd	r23, Z+1	; 0x01
   102e8:	82 81       	ldd	r24, Z+2	; 0x02
   102ea:	93 81       	ldd	r25, Z+3	; 0x03
   102ec:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   102f0:	dc 01       	movw	r26, r24
   102f2:	cb 01       	movw	r24, r22
   102f4:	f8 01       	movw	r30, r16
   102f6:	91 83       	std	Z+1, r25	; 0x01
   102f8:	80 83       	st	Z, r24
   102fa:	ce 01       	movw	r24, r28
   102fc:	8f 5b       	subi	r24, 0xBF	; 191
   102fe:	9e 4f       	sbci	r25, 0xFE	; 254
   10300:	9e 01       	movw	r18, r28
   10302:	23 5c       	subi	r18, 0xC3	; 195
   10304:	3e 4f       	sbci	r19, 0xFE	; 254
   10306:	f9 01       	movw	r30, r18
   10308:	20 81       	ld	r18, Z
   1030a:	31 81       	ldd	r19, Z+1	; 0x01
   1030c:	fc 01       	movw	r30, r24
   1030e:	31 83       	std	Z+1, r19	; 0x01
   10310:	20 83       	st	Z, r18
   10312:	ce 01       	movw	r24, r28
   10314:	8f 5b       	subi	r24, 0xBF	; 191
   10316:	9e 4f       	sbci	r25, 0xFE	; 254
   10318:	fc 01       	movw	r30, r24
   1031a:	80 81       	ld	r24, Z
   1031c:	91 81       	ldd	r25, Z+1	; 0x01
   1031e:	8c 01       	movw	r16, r24
   10320:	c8 01       	movw	r24, r16
   10322:	01 97       	sbiw	r24, 0x01	; 1
   10324:	f1 f7       	brne	.-4      	; 0x10322 <travel_path+0x2820>
   10326:	8c 01       	movw	r16, r24
   10328:	ce 01       	movw	r24, r28
   1032a:	8f 5b       	subi	r24, 0xBF	; 191
   1032c:	9e 4f       	sbci	r25, 0xFE	; 254
   1032e:	fc 01       	movw	r30, r24
   10330:	11 83       	std	Z+1, r17	; 0x01
   10332:	00 83       	st	Z, r16
				_delay_ms(20);
				correct_left();
   10334:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
   10338:	9e 01       	movw	r18, r28
   1033a:	2d 5b       	subi	r18, 0xBD	; 189
   1033c:	3e 4f       	sbci	r19, 0xFE	; 254
   1033e:	80 e0       	ldi	r24, 0x00	; 0
   10340:	90 e0       	ldi	r25, 0x00	; 0
   10342:	a0 ea       	ldi	r26, 0xA0	; 160
   10344:	b1 e4       	ldi	r27, 0x41	; 65
   10346:	f9 01       	movw	r30, r18
   10348:	80 83       	st	Z, r24
   1034a:	91 83       	std	Z+1, r25	; 0x01
   1034c:	a2 83       	std	Z+2, r26	; 0x02
   1034e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10350:	8e 01       	movw	r16, r28
   10352:	09 5b       	subi	r16, 0xB9	; 185
   10354:	1e 4f       	sbci	r17, 0xFE	; 254
   10356:	ce 01       	movw	r24, r28
   10358:	8d 5b       	subi	r24, 0xBD	; 189
   1035a:	9e 4f       	sbci	r25, 0xFE	; 254
   1035c:	fc 01       	movw	r30, r24
   1035e:	60 81       	ld	r22, Z
   10360:	71 81       	ldd	r23, Z+1	; 0x01
   10362:	82 81       	ldd	r24, Z+2	; 0x02
   10364:	93 81       	ldd	r25, Z+3	; 0x03
   10366:	26 e6       	ldi	r18, 0x66	; 102
   10368:	36 e6       	ldi	r19, 0x66	; 102
   1036a:	46 e6       	ldi	r20, 0x66	; 102
   1036c:	55 e4       	ldi	r21, 0x45	; 69
   1036e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10372:	dc 01       	movw	r26, r24
   10374:	cb 01       	movw	r24, r22
   10376:	f8 01       	movw	r30, r16
   10378:	80 83       	st	Z, r24
   1037a:	91 83       	std	Z+1, r25	; 0x01
   1037c:	a2 83       	std	Z+2, r26	; 0x02
   1037e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10380:	ce 01       	movw	r24, r28
   10382:	89 5b       	subi	r24, 0xB9	; 185
   10384:	9e 4f       	sbci	r25, 0xFE	; 254
   10386:	11 e0       	ldi	r17, 0x01	; 1
   10388:	fc 01       	movw	r30, r24
   1038a:	60 81       	ld	r22, Z
   1038c:	71 81       	ldd	r23, Z+1	; 0x01
   1038e:	82 81       	ldd	r24, Z+2	; 0x02
   10390:	93 81       	ldd	r25, Z+3	; 0x03
   10392:	20 e0       	ldi	r18, 0x00	; 0
   10394:	30 e0       	ldi	r19, 0x00	; 0
   10396:	40 e8       	ldi	r20, 0x80	; 128
   10398:	5f e3       	ldi	r21, 0x3F	; 63
   1039a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   1039e:	88 23       	and	r24, r24
   103a0:	0c f0       	brlt	.+2      	; 0x103a4 <travel_path+0x28a2>
   103a2:	10 e0       	ldi	r17, 0x00	; 0
   103a4:	11 23       	and	r17, r17
   103a6:	49 f0       	breq	.+18     	; 0x103ba <travel_path+0x28b8>
		__ticks = 1;
   103a8:	ce 01       	movw	r24, r28
   103aa:	85 5b       	subi	r24, 0xB5	; 181
   103ac:	9e 4f       	sbci	r25, 0xFE	; 254
   103ae:	21 e0       	ldi	r18, 0x01	; 1
   103b0:	30 e0       	ldi	r19, 0x00	; 0
   103b2:	fc 01       	movw	r30, r24
   103b4:	31 83       	std	Z+1, r19	; 0x01
   103b6:	20 83       	st	Z, r18
   103b8:	74 c0       	rjmp	.+232    	; 0x104a2 <travel_path+0x29a0>
	else if (__tmp > 65535)
   103ba:	ce 01       	movw	r24, r28
   103bc:	89 5b       	subi	r24, 0xB9	; 185
   103be:	9e 4f       	sbci	r25, 0xFE	; 254
   103c0:	11 e0       	ldi	r17, 0x01	; 1
   103c2:	fc 01       	movw	r30, r24
   103c4:	60 81       	ld	r22, Z
   103c6:	71 81       	ldd	r23, Z+1	; 0x01
   103c8:	82 81       	ldd	r24, Z+2	; 0x02
   103ca:	93 81       	ldd	r25, Z+3	; 0x03
   103cc:	20 e0       	ldi	r18, 0x00	; 0
   103ce:	3f ef       	ldi	r19, 0xFF	; 255
   103d0:	4f e7       	ldi	r20, 0x7F	; 127
   103d2:	57 e4       	ldi	r21, 0x47	; 71
   103d4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   103d8:	18 16       	cp	r1, r24
   103da:	0c f0       	brlt	.+2      	; 0x103de <travel_path+0x28dc>
   103dc:	10 e0       	ldi	r17, 0x00	; 0
   103de:	11 23       	and	r17, r17
   103e0:	09 f4       	brne	.+2      	; 0x103e4 <travel_path+0x28e2>
   103e2:	4d c0       	rjmp	.+154    	; 0x1047e <travel_path+0x297c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   103e4:	ce 01       	movw	r24, r28
   103e6:	8d 5b       	subi	r24, 0xBD	; 189
   103e8:	9e 4f       	sbci	r25, 0xFE	; 254
   103ea:	fc 01       	movw	r30, r24
   103ec:	60 81       	ld	r22, Z
   103ee:	71 81       	ldd	r23, Z+1	; 0x01
   103f0:	82 81       	ldd	r24, Z+2	; 0x02
   103f2:	93 81       	ldd	r25, Z+3	; 0x03
   103f4:	20 e0       	ldi	r18, 0x00	; 0
   103f6:	30 e0       	ldi	r19, 0x00	; 0
   103f8:	40 e2       	ldi	r20, 0x20	; 32
   103fa:	51 e4       	ldi	r21, 0x41	; 65
   103fc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10400:	dc 01       	movw	r26, r24
   10402:	cb 01       	movw	r24, r22
   10404:	8e 01       	movw	r16, r28
   10406:	05 5b       	subi	r16, 0xB5	; 181
   10408:	1e 4f       	sbci	r17, 0xFE	; 254
   1040a:	bc 01       	movw	r22, r24
   1040c:	cd 01       	movw	r24, r26
   1040e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10412:	dc 01       	movw	r26, r24
   10414:	cb 01       	movw	r24, r22
   10416:	f8 01       	movw	r30, r16
   10418:	91 83       	std	Z+1, r25	; 0x01
   1041a:	80 83       	st	Z, r24
   1041c:	27 c0       	rjmp	.+78     	; 0x1046c <travel_path+0x296a>
   1041e:	ce 01       	movw	r24, r28
   10420:	83 5b       	subi	r24, 0xB3	; 179
   10422:	9e 4f       	sbci	r25, 0xFE	; 254
   10424:	20 e7       	ldi	r18, 0x70	; 112
   10426:	31 e0       	ldi	r19, 0x01	; 1
   10428:	fc 01       	movw	r30, r24
   1042a:	31 83       	std	Z+1, r19	; 0x01
   1042c:	20 83       	st	Z, r18
   1042e:	ce 01       	movw	r24, r28
   10430:	83 5b       	subi	r24, 0xB3	; 179
   10432:	9e 4f       	sbci	r25, 0xFE	; 254
   10434:	fc 01       	movw	r30, r24
   10436:	80 81       	ld	r24, Z
   10438:	91 81       	ldd	r25, Z+1	; 0x01
   1043a:	8c 01       	movw	r16, r24
   1043c:	c8 01       	movw	r24, r16
   1043e:	01 97       	sbiw	r24, 0x01	; 1
   10440:	f1 f7       	brne	.-4      	; 0x1043e <travel_path+0x293c>
   10442:	8c 01       	movw	r16, r24
   10444:	ce 01       	movw	r24, r28
   10446:	83 5b       	subi	r24, 0xB3	; 179
   10448:	9e 4f       	sbci	r25, 0xFE	; 254
   1044a:	fc 01       	movw	r30, r24
   1044c:	11 83       	std	Z+1, r17	; 0x01
   1044e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10450:	ce 01       	movw	r24, r28
   10452:	85 5b       	subi	r24, 0xB5	; 181
   10454:	9e 4f       	sbci	r25, 0xFE	; 254
   10456:	9e 01       	movw	r18, r28
   10458:	25 5b       	subi	r18, 0xB5	; 181
   1045a:	3e 4f       	sbci	r19, 0xFE	; 254
   1045c:	f9 01       	movw	r30, r18
   1045e:	20 81       	ld	r18, Z
   10460:	31 81       	ldd	r19, Z+1	; 0x01
   10462:	21 50       	subi	r18, 0x01	; 1
   10464:	30 40       	sbci	r19, 0x00	; 0
   10466:	fc 01       	movw	r30, r24
   10468:	31 83       	std	Z+1, r19	; 0x01
   1046a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1046c:	ce 01       	movw	r24, r28
   1046e:	85 5b       	subi	r24, 0xB5	; 181
   10470:	9e 4f       	sbci	r25, 0xFE	; 254
   10472:	fc 01       	movw	r30, r24
   10474:	80 81       	ld	r24, Z
   10476:	91 81       	ldd	r25, Z+1	; 0x01
   10478:	00 97       	sbiw	r24, 0x00	; 0
   1047a:	89 f6       	brne	.-94     	; 0x1041e <travel_path+0x291c>
   1047c:	2f c0       	rjmp	.+94     	; 0x104dc <travel_path+0x29da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1047e:	8e 01       	movw	r16, r28
   10480:	05 5b       	subi	r16, 0xB5	; 181
   10482:	1e 4f       	sbci	r17, 0xFE	; 254
   10484:	ce 01       	movw	r24, r28
   10486:	89 5b       	subi	r24, 0xB9	; 185
   10488:	9e 4f       	sbci	r25, 0xFE	; 254
   1048a:	fc 01       	movw	r30, r24
   1048c:	60 81       	ld	r22, Z
   1048e:	71 81       	ldd	r23, Z+1	; 0x01
   10490:	82 81       	ldd	r24, Z+2	; 0x02
   10492:	93 81       	ldd	r25, Z+3	; 0x03
   10494:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10498:	dc 01       	movw	r26, r24
   1049a:	cb 01       	movw	r24, r22
   1049c:	f8 01       	movw	r30, r16
   1049e:	91 83       	std	Z+1, r25	; 0x01
   104a0:	80 83       	st	Z, r24
   104a2:	ce 01       	movw	r24, r28
   104a4:	81 5b       	subi	r24, 0xB1	; 177
   104a6:	9e 4f       	sbci	r25, 0xFE	; 254
   104a8:	9e 01       	movw	r18, r28
   104aa:	25 5b       	subi	r18, 0xB5	; 181
   104ac:	3e 4f       	sbci	r19, 0xFE	; 254
   104ae:	f9 01       	movw	r30, r18
   104b0:	20 81       	ld	r18, Z
   104b2:	31 81       	ldd	r19, Z+1	; 0x01
   104b4:	fc 01       	movw	r30, r24
   104b6:	31 83       	std	Z+1, r19	; 0x01
   104b8:	20 83       	st	Z, r18
   104ba:	ce 01       	movw	r24, r28
   104bc:	81 5b       	subi	r24, 0xB1	; 177
   104be:	9e 4f       	sbci	r25, 0xFE	; 254
   104c0:	fc 01       	movw	r30, r24
   104c2:	80 81       	ld	r24, Z
   104c4:	91 81       	ldd	r25, Z+1	; 0x01
   104c6:	8c 01       	movw	r16, r24
   104c8:	c8 01       	movw	r24, r16
   104ca:	01 97       	sbiw	r24, 0x01	; 1
   104cc:	f1 f7       	brne	.-4      	; 0x104ca <travel_path+0x29c8>
   104ce:	8c 01       	movw	r16, r24
   104d0:	ce 01       	movw	r24, r28
   104d2:	81 5b       	subi	r24, 0xB1	; 177
   104d4:	9e 4f       	sbci	r25, 0xFE	; 254
   104d6:	fc 01       	movw	r30, r24
   104d8:	11 83       	std	Z+1, r17	; 0x01
   104da:	00 83       	st	Z, r16
				_delay_ms(20);
				node++;
   104dc:	80 91 4f 03 	lds	r24, 0x034F
   104e0:	90 91 50 03 	lds	r25, 0x0350
   104e4:	01 96       	adiw	r24, 0x01	; 1
   104e6:	90 93 50 03 	sts	0x0350, r25
   104ea:	80 93 4f 03 	sts	0x034F, r24
				pick_drop(master_path[node]);
   104ee:	80 91 4f 03 	lds	r24, 0x034F
   104f2:	90 91 50 03 	lds	r25, 0x0350
   104f6:	8d 5a       	subi	r24, 0xAD	; 173
   104f8:	9c 4f       	sbci	r25, 0xFC	; 252
   104fa:	fc 01       	movw	r30, r24
   104fc:	80 81       	ld	r24, Z
   104fe:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
				node++;
   10502:	80 91 4f 03 	lds	r24, 0x034F
   10506:	90 91 50 03 	lds	r25, 0x0350
   1050a:	01 96       	adiw	r24, 0x01	; 1
   1050c:	90 93 50 03 	sts	0x0350, r25
   10510:	80 93 4f 03 	sts	0x034F, r24
				travel_path(master_path[node]);
   10514:	80 91 4f 03 	lds	r24, 0x034F
   10518:	90 91 50 03 	lds	r25, 0x0350
   1051c:	8d 5a       	subi	r24, 0xAD	; 173
   1051e:	9c 4f       	sbci	r25, 0xFC	; 252
   10520:	fc 01       	movw	r30, r24
   10522:	80 81       	ld	r24, Z
   10524:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
				node=node-2;
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
				correct_left2();
				else
				correct_left();
				node=node+2;
   10528:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
				pick_drop(master_path[node]);
				node++;
				travel_path(master_path[node]);
			}
			else{
				node=node-2;
   1052c:	80 91 4f 03 	lds	r24, 0x034F
   10530:	90 91 50 03 	lds	r25, 0x0350
   10534:	02 97       	sbiw	r24, 0x02	; 2
   10536:	90 93 50 03 	sts	0x0350, r25
   1053a:	80 93 4f 03 	sts	0x034F, r24
				if(master_path[node]=='R'||master_path[node]=='L'||master_path[node]=='U')
   1053e:	80 91 4f 03 	lds	r24, 0x034F
   10542:	90 91 50 03 	lds	r25, 0x0350
   10546:	8d 5a       	subi	r24, 0xAD	; 173
   10548:	9c 4f       	sbci	r25, 0xFC	; 252
   1054a:	fc 01       	movw	r30, r24
   1054c:	80 81       	ld	r24, Z
   1054e:	82 35       	cpi	r24, 0x52	; 82
   10550:	a1 f0       	breq	.+40     	; 0x1057a <travel_path+0x2a78>
   10552:	80 91 4f 03 	lds	r24, 0x034F
   10556:	90 91 50 03 	lds	r25, 0x0350
   1055a:	8d 5a       	subi	r24, 0xAD	; 173
   1055c:	9c 4f       	sbci	r25, 0xFC	; 252
   1055e:	fc 01       	movw	r30, r24
   10560:	80 81       	ld	r24, Z
   10562:	8c 34       	cpi	r24, 0x4C	; 76
   10564:	51 f0       	breq	.+20     	; 0x1057a <travel_path+0x2a78>
   10566:	80 91 4f 03 	lds	r24, 0x034F
   1056a:	90 91 50 03 	lds	r25, 0x0350
   1056e:	8d 5a       	subi	r24, 0xAD	; 173
   10570:	9c 4f       	sbci	r25, 0xFC	; 252
   10572:	fc 01       	movw	r30, r24
   10574:	80 81       	ld	r24, Z
   10576:	85 35       	cpi	r24, 0x55	; 85
   10578:	19 f4       	brne	.+6      	; 0x10580 <travel_path+0x2a7e>
				correct_left2();
   1057a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <correct_left2>
   1057e:	02 c0       	rjmp	.+4      	; 0x10584 <travel_path+0x2a82>
				else
				correct_left();
   10580:	0e 94 19 11 	call	0x2232	; 0x2232 <correct_left>
				node=node+2;
   10584:	80 91 4f 03 	lds	r24, 0x034F
   10588:	90 91 50 03 	lds	r25, 0x0350
   1058c:	02 96       	adiw	r24, 0x02	; 2
   1058e:	90 93 50 03 	sts	0x0350, r25
   10592:	80 93 4f 03 	sts	0x034F, r24
   10596:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
			}
		}
		else if(pos_val=='N'){
   1059a:	ce 01       	movw	r24, r28
   1059c:	81 53       	subi	r24, 0x31	; 49
   1059e:	9e 4f       	sbci	r25, 0xFE	; 254
   105a0:	fc 01       	movw	r30, r24
   105a2:	80 81       	ld	r24, Z
   105a4:	8e 34       	cpi	r24, 0x4E	; 78
   105a6:	09 f0       	breq	.+2      	; 0x105aa <travel_path+0x2aa8>
   105a8:	3a c4       	rjmp	.+2164   	; 0x10e1e <travel_path+0x331c>
		if(node==0){
   105aa:	80 91 4f 03 	lds	r24, 0x034F
   105ae:	90 91 50 03 	lds	r25, 0x0350
   105b2:	00 97       	sbiw	r24, 0x00	; 0
   105b4:	09 f0       	breq	.+2      	; 0x105b8 <travel_path+0x2ab6>
   105b6:	67 c1       	rjmp	.+718    	; 0x10886 <travel_path+0x2d84>
		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   105b8:	80 91 4f 03 	lds	r24, 0x034F
   105bc:	90 91 50 03 	lds	r25, 0x0350
   105c0:	01 96       	adiw	r24, 0x01	; 1
   105c2:	8d 5a       	subi	r24, 0xAD	; 173
   105c4:	9c 4f       	sbci	r25, 0xFC	; 252
   105c6:	fc 01       	movw	r30, r24
   105c8:	80 81       	ld	r24, Z
   105ca:	84 34       	cpi	r24, 0x44	; 68
   105cc:	09 f4       	brne	.+2      	; 0x105d0 <travel_path+0x2ace>
   105ce:	5b c0       	rjmp	.+182    	; 0x10686 <travel_path+0x2b84>
   105d0:	80 91 4f 03 	lds	r24, 0x034F
   105d4:	90 91 50 03 	lds	r25, 0x0350
   105d8:	01 96       	adiw	r24, 0x01	; 1
   105da:	8d 5a       	subi	r24, 0xAD	; 173
   105dc:	9c 4f       	sbci	r25, 0xFC	; 252
   105de:	fc 01       	movw	r30, r24
   105e0:	80 81       	ld	r24, Z
   105e2:	81 33       	cpi	r24, 0x31	; 49
   105e4:	09 f4       	brne	.+2      	; 0x105e8 <travel_path+0x2ae6>
   105e6:	4f c0       	rjmp	.+158    	; 0x10686 <travel_path+0x2b84>
   105e8:	80 91 4f 03 	lds	r24, 0x034F
   105ec:	90 91 50 03 	lds	r25, 0x0350
   105f0:	01 96       	adiw	r24, 0x01	; 1
   105f2:	8d 5a       	subi	r24, 0xAD	; 173
   105f4:	9c 4f       	sbci	r25, 0xFC	; 252
   105f6:	fc 01       	movw	r30, r24
   105f8:	80 81       	ld	r24, Z
   105fa:	82 33       	cpi	r24, 0x32	; 50
   105fc:	09 f4       	brne	.+2      	; 0x10600 <travel_path+0x2afe>
   105fe:	43 c0       	rjmp	.+134    	; 0x10686 <travel_path+0x2b84>
   10600:	80 91 4f 03 	lds	r24, 0x034F
   10604:	90 91 50 03 	lds	r25, 0x0350
   10608:	01 96       	adiw	r24, 0x01	; 1
   1060a:	8d 5a       	subi	r24, 0xAD	; 173
   1060c:	9c 4f       	sbci	r25, 0xFC	; 252
   1060e:	fc 01       	movw	r30, r24
   10610:	80 81       	ld	r24, Z
   10612:	83 33       	cpi	r24, 0x33	; 51
   10614:	c1 f1       	breq	.+112    	; 0x10686 <travel_path+0x2b84>
   10616:	80 91 4f 03 	lds	r24, 0x034F
   1061a:	90 91 50 03 	lds	r25, 0x0350
   1061e:	01 96       	adiw	r24, 0x01	; 1
   10620:	8d 5a       	subi	r24, 0xAD	; 173
   10622:	9c 4f       	sbci	r25, 0xFC	; 252
   10624:	fc 01       	movw	r30, r24
   10626:	80 81       	ld	r24, Z
   10628:	84 33       	cpi	r24, 0x34	; 52
   1062a:	69 f1       	breq	.+90     	; 0x10686 <travel_path+0x2b84>
   1062c:	80 91 4f 03 	lds	r24, 0x034F
   10630:	90 91 50 03 	lds	r25, 0x0350
   10634:	01 96       	adiw	r24, 0x01	; 1
   10636:	8d 5a       	subi	r24, 0xAD	; 173
   10638:	9c 4f       	sbci	r25, 0xFC	; 252
   1063a:	fc 01       	movw	r30, r24
   1063c:	80 81       	ld	r24, Z
   1063e:	85 33       	cpi	r24, 0x35	; 53
   10640:	11 f1       	breq	.+68     	; 0x10686 <travel_path+0x2b84>
   10642:	80 91 4f 03 	lds	r24, 0x034F
   10646:	90 91 50 03 	lds	r25, 0x0350
   1064a:	01 96       	adiw	r24, 0x01	; 1
   1064c:	8d 5a       	subi	r24, 0xAD	; 173
   1064e:	9c 4f       	sbci	r25, 0xFC	; 252
   10650:	fc 01       	movw	r30, r24
   10652:	80 81       	ld	r24, Z
   10654:	86 33       	cpi	r24, 0x36	; 54
   10656:	b9 f0       	breq	.+46     	; 0x10686 <travel_path+0x2b84>
   10658:	80 91 4f 03 	lds	r24, 0x034F
   1065c:	90 91 50 03 	lds	r25, 0x0350
   10660:	01 96       	adiw	r24, 0x01	; 1
   10662:	8d 5a       	subi	r24, 0xAD	; 173
   10664:	9c 4f       	sbci	r25, 0xFC	; 252
   10666:	fc 01       	movw	r30, r24
   10668:	80 81       	ld	r24, Z
   1066a:	87 33       	cpi	r24, 0x37	; 55
   1066c:	61 f0       	breq	.+24     	; 0x10686 <travel_path+0x2b84>
   1066e:	80 91 4f 03 	lds	r24, 0x034F
   10672:	90 91 50 03 	lds	r25, 0x0350
   10676:	01 96       	adiw	r24, 0x01	; 1
   10678:	8d 5a       	subi	r24, 0xAD	; 173
   1067a:	9c 4f       	sbci	r25, 0xFC	; 252
   1067c:	fc 01       	movw	r30, r24
   1067e:	80 81       	ld	r24, Z
   10680:	88 33       	cpi	r24, 0x38	; 56
   10682:	09 f0       	breq	.+2      	; 0x10686 <travel_path+0x2b84>
   10684:	fc c0       	rjmp	.+504    	; 0x1087e <travel_path+0x2d7c>
		{
						stop();
   10686:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   1068a:	9e 01       	movw	r18, r28
   1068c:	2f 5a       	subi	r18, 0xAF	; 175
   1068e:	3e 4f       	sbci	r19, 0xFE	; 254
   10690:	80 e0       	ldi	r24, 0x00	; 0
   10692:	90 e0       	ldi	r25, 0x00	; 0
   10694:	a0 ea       	ldi	r26, 0xA0	; 160
   10696:	b1 e4       	ldi	r27, 0x41	; 65
   10698:	f9 01       	movw	r30, r18
   1069a:	80 83       	st	Z, r24
   1069c:	91 83       	std	Z+1, r25	; 0x01
   1069e:	a2 83       	std	Z+2, r26	; 0x02
   106a0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   106a2:	8e 01       	movw	r16, r28
   106a4:	0b 5a       	subi	r16, 0xAB	; 171
   106a6:	1e 4f       	sbci	r17, 0xFE	; 254
   106a8:	ce 01       	movw	r24, r28
   106aa:	8f 5a       	subi	r24, 0xAF	; 175
   106ac:	9e 4f       	sbci	r25, 0xFE	; 254
   106ae:	fc 01       	movw	r30, r24
   106b0:	60 81       	ld	r22, Z
   106b2:	71 81       	ldd	r23, Z+1	; 0x01
   106b4:	82 81       	ldd	r24, Z+2	; 0x02
   106b6:	93 81       	ldd	r25, Z+3	; 0x03
   106b8:	26 e6       	ldi	r18, 0x66	; 102
   106ba:	36 e6       	ldi	r19, 0x66	; 102
   106bc:	46 e6       	ldi	r20, 0x66	; 102
   106be:	55 e4       	ldi	r21, 0x45	; 69
   106c0:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   106c4:	dc 01       	movw	r26, r24
   106c6:	cb 01       	movw	r24, r22
   106c8:	f8 01       	movw	r30, r16
   106ca:	80 83       	st	Z, r24
   106cc:	91 83       	std	Z+1, r25	; 0x01
   106ce:	a2 83       	std	Z+2, r26	; 0x02
   106d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   106d2:	ce 01       	movw	r24, r28
   106d4:	8b 5a       	subi	r24, 0xAB	; 171
   106d6:	9e 4f       	sbci	r25, 0xFE	; 254
   106d8:	11 e0       	ldi	r17, 0x01	; 1
   106da:	fc 01       	movw	r30, r24
   106dc:	60 81       	ld	r22, Z
   106de:	71 81       	ldd	r23, Z+1	; 0x01
   106e0:	82 81       	ldd	r24, Z+2	; 0x02
   106e2:	93 81       	ldd	r25, Z+3	; 0x03
   106e4:	20 e0       	ldi	r18, 0x00	; 0
   106e6:	30 e0       	ldi	r19, 0x00	; 0
   106e8:	40 e8       	ldi	r20, 0x80	; 128
   106ea:	5f e3       	ldi	r21, 0x3F	; 63
   106ec:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   106f0:	88 23       	and	r24, r24
   106f2:	0c f0       	brlt	.+2      	; 0x106f6 <travel_path+0x2bf4>
   106f4:	10 e0       	ldi	r17, 0x00	; 0
   106f6:	11 23       	and	r17, r17
   106f8:	49 f0       	breq	.+18     	; 0x1070c <travel_path+0x2c0a>
		__ticks = 1;
   106fa:	ce 01       	movw	r24, r28
   106fc:	87 5a       	subi	r24, 0xA7	; 167
   106fe:	9e 4f       	sbci	r25, 0xFE	; 254
   10700:	21 e0       	ldi	r18, 0x01	; 1
   10702:	30 e0       	ldi	r19, 0x00	; 0
   10704:	fc 01       	movw	r30, r24
   10706:	31 83       	std	Z+1, r19	; 0x01
   10708:	20 83       	st	Z, r18
   1070a:	74 c0       	rjmp	.+232    	; 0x107f4 <travel_path+0x2cf2>
	else if (__tmp > 65535)
   1070c:	ce 01       	movw	r24, r28
   1070e:	8b 5a       	subi	r24, 0xAB	; 171
   10710:	9e 4f       	sbci	r25, 0xFE	; 254
   10712:	11 e0       	ldi	r17, 0x01	; 1
   10714:	fc 01       	movw	r30, r24
   10716:	60 81       	ld	r22, Z
   10718:	71 81       	ldd	r23, Z+1	; 0x01
   1071a:	82 81       	ldd	r24, Z+2	; 0x02
   1071c:	93 81       	ldd	r25, Z+3	; 0x03
   1071e:	20 e0       	ldi	r18, 0x00	; 0
   10720:	3f ef       	ldi	r19, 0xFF	; 255
   10722:	4f e7       	ldi	r20, 0x7F	; 127
   10724:	57 e4       	ldi	r21, 0x47	; 71
   10726:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   1072a:	18 16       	cp	r1, r24
   1072c:	0c f0       	brlt	.+2      	; 0x10730 <travel_path+0x2c2e>
   1072e:	10 e0       	ldi	r17, 0x00	; 0
   10730:	11 23       	and	r17, r17
   10732:	09 f4       	brne	.+2      	; 0x10736 <travel_path+0x2c34>
   10734:	4d c0       	rjmp	.+154    	; 0x107d0 <travel_path+0x2cce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10736:	ce 01       	movw	r24, r28
   10738:	8f 5a       	subi	r24, 0xAF	; 175
   1073a:	9e 4f       	sbci	r25, 0xFE	; 254
   1073c:	fc 01       	movw	r30, r24
   1073e:	60 81       	ld	r22, Z
   10740:	71 81       	ldd	r23, Z+1	; 0x01
   10742:	82 81       	ldd	r24, Z+2	; 0x02
   10744:	93 81       	ldd	r25, Z+3	; 0x03
   10746:	20 e0       	ldi	r18, 0x00	; 0
   10748:	30 e0       	ldi	r19, 0x00	; 0
   1074a:	40 e2       	ldi	r20, 0x20	; 32
   1074c:	51 e4       	ldi	r21, 0x41	; 65
   1074e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10752:	dc 01       	movw	r26, r24
   10754:	cb 01       	movw	r24, r22
   10756:	8e 01       	movw	r16, r28
   10758:	07 5a       	subi	r16, 0xA7	; 167
   1075a:	1e 4f       	sbci	r17, 0xFE	; 254
   1075c:	bc 01       	movw	r22, r24
   1075e:	cd 01       	movw	r24, r26
   10760:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10764:	dc 01       	movw	r26, r24
   10766:	cb 01       	movw	r24, r22
   10768:	f8 01       	movw	r30, r16
   1076a:	91 83       	std	Z+1, r25	; 0x01
   1076c:	80 83       	st	Z, r24
   1076e:	27 c0       	rjmp	.+78     	; 0x107be <travel_path+0x2cbc>
   10770:	ce 01       	movw	r24, r28
   10772:	85 5a       	subi	r24, 0xA5	; 165
   10774:	9e 4f       	sbci	r25, 0xFE	; 254
   10776:	20 e7       	ldi	r18, 0x70	; 112
   10778:	31 e0       	ldi	r19, 0x01	; 1
   1077a:	fc 01       	movw	r30, r24
   1077c:	31 83       	std	Z+1, r19	; 0x01
   1077e:	20 83       	st	Z, r18
   10780:	ce 01       	movw	r24, r28
   10782:	85 5a       	subi	r24, 0xA5	; 165
   10784:	9e 4f       	sbci	r25, 0xFE	; 254
   10786:	fc 01       	movw	r30, r24
   10788:	80 81       	ld	r24, Z
   1078a:	91 81       	ldd	r25, Z+1	; 0x01
   1078c:	8c 01       	movw	r16, r24
   1078e:	c8 01       	movw	r24, r16
   10790:	01 97       	sbiw	r24, 0x01	; 1
   10792:	f1 f7       	brne	.-4      	; 0x10790 <travel_path+0x2c8e>
   10794:	8c 01       	movw	r16, r24
   10796:	ce 01       	movw	r24, r28
   10798:	85 5a       	subi	r24, 0xA5	; 165
   1079a:	9e 4f       	sbci	r25, 0xFE	; 254
   1079c:	fc 01       	movw	r30, r24
   1079e:	11 83       	std	Z+1, r17	; 0x01
   107a0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   107a2:	ce 01       	movw	r24, r28
   107a4:	87 5a       	subi	r24, 0xA7	; 167
   107a6:	9e 4f       	sbci	r25, 0xFE	; 254
   107a8:	9e 01       	movw	r18, r28
   107aa:	27 5a       	subi	r18, 0xA7	; 167
   107ac:	3e 4f       	sbci	r19, 0xFE	; 254
   107ae:	f9 01       	movw	r30, r18
   107b0:	20 81       	ld	r18, Z
   107b2:	31 81       	ldd	r19, Z+1	; 0x01
   107b4:	21 50       	subi	r18, 0x01	; 1
   107b6:	30 40       	sbci	r19, 0x00	; 0
   107b8:	fc 01       	movw	r30, r24
   107ba:	31 83       	std	Z+1, r19	; 0x01
   107bc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   107be:	ce 01       	movw	r24, r28
   107c0:	87 5a       	subi	r24, 0xA7	; 167
   107c2:	9e 4f       	sbci	r25, 0xFE	; 254
   107c4:	fc 01       	movw	r30, r24
   107c6:	80 81       	ld	r24, Z
   107c8:	91 81       	ldd	r25, Z+1	; 0x01
   107ca:	00 97       	sbiw	r24, 0x00	; 0
   107cc:	89 f6       	brne	.-94     	; 0x10770 <travel_path+0x2c6e>
   107ce:	2f c0       	rjmp	.+94     	; 0x1082e <travel_path+0x2d2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   107d0:	8e 01       	movw	r16, r28
   107d2:	07 5a       	subi	r16, 0xA7	; 167
   107d4:	1e 4f       	sbci	r17, 0xFE	; 254
   107d6:	ce 01       	movw	r24, r28
   107d8:	8b 5a       	subi	r24, 0xAB	; 171
   107da:	9e 4f       	sbci	r25, 0xFE	; 254
   107dc:	fc 01       	movw	r30, r24
   107de:	60 81       	ld	r22, Z
   107e0:	71 81       	ldd	r23, Z+1	; 0x01
   107e2:	82 81       	ldd	r24, Z+2	; 0x02
   107e4:	93 81       	ldd	r25, Z+3	; 0x03
   107e6:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   107ea:	dc 01       	movw	r26, r24
   107ec:	cb 01       	movw	r24, r22
   107ee:	f8 01       	movw	r30, r16
   107f0:	91 83       	std	Z+1, r25	; 0x01
   107f2:	80 83       	st	Z, r24
   107f4:	ce 01       	movw	r24, r28
   107f6:	83 5a       	subi	r24, 0xA3	; 163
   107f8:	9e 4f       	sbci	r25, 0xFE	; 254
   107fa:	9e 01       	movw	r18, r28
   107fc:	27 5a       	subi	r18, 0xA7	; 167
   107fe:	3e 4f       	sbci	r19, 0xFE	; 254
   10800:	f9 01       	movw	r30, r18
   10802:	20 81       	ld	r18, Z
   10804:	31 81       	ldd	r19, Z+1	; 0x01
   10806:	fc 01       	movw	r30, r24
   10808:	31 83       	std	Z+1, r19	; 0x01
   1080a:	20 83       	st	Z, r18
   1080c:	ce 01       	movw	r24, r28
   1080e:	83 5a       	subi	r24, 0xA3	; 163
   10810:	9e 4f       	sbci	r25, 0xFE	; 254
   10812:	fc 01       	movw	r30, r24
   10814:	80 81       	ld	r24, Z
   10816:	91 81       	ldd	r25, Z+1	; 0x01
   10818:	8c 01       	movw	r16, r24
   1081a:	c8 01       	movw	r24, r16
   1081c:	01 97       	sbiw	r24, 0x01	; 1
   1081e:	f1 f7       	brne	.-4      	; 0x1081c <travel_path+0x2d1a>
   10820:	8c 01       	movw	r16, r24
   10822:	ce 01       	movw	r24, r28
   10824:	83 5a       	subi	r24, 0xA3	; 163
   10826:	9e 4f       	sbci	r25, 0xFE	; 254
   10828:	fc 01       	movw	r30, r24
   1082a:	11 83       	std	Z+1, r17	; 0x01
   1082c:	00 83       	st	Z, r16
						_delay_ms(20);
						node++;
   1082e:	80 91 4f 03 	lds	r24, 0x034F
   10832:	90 91 50 03 	lds	r25, 0x0350
   10836:	01 96       	adiw	r24, 0x01	; 1
   10838:	90 93 50 03 	sts	0x0350, r25
   1083c:	80 93 4f 03 	sts	0x034F, r24
						pick_drop(master_path[node]);
   10840:	80 91 4f 03 	lds	r24, 0x034F
   10844:	90 91 50 03 	lds	r25, 0x0350
   10848:	8d 5a       	subi	r24, 0xAD	; 173
   1084a:	9c 4f       	sbci	r25, 0xFC	; 252
   1084c:	fc 01       	movw	r30, r24
   1084e:	80 81       	ld	r24, Z
   10850:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
						node++;
   10854:	80 91 4f 03 	lds	r24, 0x034F
   10858:	90 91 50 03 	lds	r25, 0x0350
   1085c:	01 96       	adiw	r24, 0x01	; 1
   1085e:	90 93 50 03 	sts	0x0350, r25
   10862:	80 93 4f 03 	sts	0x034F, r24
						travel_path(master_path[node]);
   10866:	80 91 4f 03 	lds	r24, 0x034F
   1086a:	90 91 50 03 	lds	r25, 0x0350
   1086e:	8d 5a       	subi	r24, 0xAD	; 173
   10870:	9c 4f       	sbci	r25, 0xFC	; 252
   10872:	fc 01       	movw	r30, r24
   10874:	80 81       	ld	r24, Z
   10876:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
			_delay_ms(20);
			forward_mm(30);
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
   1087a:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
						pick_drop(master_path[node]);
						node++;
						travel_path(master_path[node]);
		}
		else
		forward();
   1087e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
   10882:	0c 94 26 8d 	jmp	0x11a4c	; 0x11a4c <travel_path+0x3f4a>
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
   10886:	80 91 4f 03 	lds	r24, 0x034F
   1088a:	90 91 50 03 	lds	r25, 0x0350
   1088e:	01 97       	sbiw	r24, 0x01	; 1
   10890:	8d 5a       	subi	r24, 0xAD	; 173
   10892:	9c 4f       	sbci	r25, 0xFC	; 252
   10894:	fc 01       	movw	r30, r24
   10896:	80 81       	ld	r24, Z
   10898:	84 34       	cpi	r24, 0x44	; 68
   1089a:	09 f4       	brne	.+2      	; 0x1089e <travel_path+0x2d9c>
   1089c:	5b c0       	rjmp	.+182    	; 0x10954 <travel_path+0x2e52>
   1089e:	80 91 4f 03 	lds	r24, 0x034F
   108a2:	90 91 50 03 	lds	r25, 0x0350
   108a6:	01 97       	sbiw	r24, 0x01	; 1
   108a8:	8d 5a       	subi	r24, 0xAD	; 173
   108aa:	9c 4f       	sbci	r25, 0xFC	; 252
   108ac:	fc 01       	movw	r30, r24
   108ae:	80 81       	ld	r24, Z
   108b0:	81 33       	cpi	r24, 0x31	; 49
   108b2:	09 f4       	brne	.+2      	; 0x108b6 <travel_path+0x2db4>
   108b4:	4f c0       	rjmp	.+158    	; 0x10954 <travel_path+0x2e52>
   108b6:	80 91 4f 03 	lds	r24, 0x034F
   108ba:	90 91 50 03 	lds	r25, 0x0350
   108be:	01 97       	sbiw	r24, 0x01	; 1
   108c0:	8d 5a       	subi	r24, 0xAD	; 173
   108c2:	9c 4f       	sbci	r25, 0xFC	; 252
   108c4:	fc 01       	movw	r30, r24
   108c6:	80 81       	ld	r24, Z
   108c8:	82 33       	cpi	r24, 0x32	; 50
   108ca:	09 f4       	brne	.+2      	; 0x108ce <travel_path+0x2dcc>
   108cc:	43 c0       	rjmp	.+134    	; 0x10954 <travel_path+0x2e52>
   108ce:	80 91 4f 03 	lds	r24, 0x034F
   108d2:	90 91 50 03 	lds	r25, 0x0350
   108d6:	01 97       	sbiw	r24, 0x01	; 1
   108d8:	8d 5a       	subi	r24, 0xAD	; 173
   108da:	9c 4f       	sbci	r25, 0xFC	; 252
   108dc:	fc 01       	movw	r30, r24
   108de:	80 81       	ld	r24, Z
   108e0:	83 33       	cpi	r24, 0x33	; 51
   108e2:	c1 f1       	breq	.+112    	; 0x10954 <travel_path+0x2e52>
   108e4:	80 91 4f 03 	lds	r24, 0x034F
   108e8:	90 91 50 03 	lds	r25, 0x0350
   108ec:	01 97       	sbiw	r24, 0x01	; 1
   108ee:	8d 5a       	subi	r24, 0xAD	; 173
   108f0:	9c 4f       	sbci	r25, 0xFC	; 252
   108f2:	fc 01       	movw	r30, r24
   108f4:	80 81       	ld	r24, Z
   108f6:	84 33       	cpi	r24, 0x34	; 52
   108f8:	69 f1       	breq	.+90     	; 0x10954 <travel_path+0x2e52>
   108fa:	80 91 4f 03 	lds	r24, 0x034F
   108fe:	90 91 50 03 	lds	r25, 0x0350
   10902:	01 97       	sbiw	r24, 0x01	; 1
   10904:	8d 5a       	subi	r24, 0xAD	; 173
   10906:	9c 4f       	sbci	r25, 0xFC	; 252
   10908:	fc 01       	movw	r30, r24
   1090a:	80 81       	ld	r24, Z
   1090c:	85 33       	cpi	r24, 0x35	; 53
   1090e:	11 f1       	breq	.+68     	; 0x10954 <travel_path+0x2e52>
   10910:	80 91 4f 03 	lds	r24, 0x034F
   10914:	90 91 50 03 	lds	r25, 0x0350
   10918:	01 97       	sbiw	r24, 0x01	; 1
   1091a:	8d 5a       	subi	r24, 0xAD	; 173
   1091c:	9c 4f       	sbci	r25, 0xFC	; 252
   1091e:	fc 01       	movw	r30, r24
   10920:	80 81       	ld	r24, Z
   10922:	86 33       	cpi	r24, 0x36	; 54
   10924:	b9 f0       	breq	.+46     	; 0x10954 <travel_path+0x2e52>
   10926:	80 91 4f 03 	lds	r24, 0x034F
   1092a:	90 91 50 03 	lds	r25, 0x0350
   1092e:	01 97       	sbiw	r24, 0x01	; 1
   10930:	8d 5a       	subi	r24, 0xAD	; 173
   10932:	9c 4f       	sbci	r25, 0xFC	; 252
   10934:	fc 01       	movw	r30, r24
   10936:	80 81       	ld	r24, Z
   10938:	87 33       	cpi	r24, 0x37	; 55
   1093a:	61 f0       	breq	.+24     	; 0x10954 <travel_path+0x2e52>
   1093c:	80 91 4f 03 	lds	r24, 0x034F
   10940:	90 91 50 03 	lds	r25, 0x0350
   10944:	01 97       	sbiw	r24, 0x01	; 1
   10946:	8d 5a       	subi	r24, 0xAD	; 173
   10948:	9c 4f       	sbci	r25, 0xFC	; 252
   1094a:	fc 01       	movw	r30, r24
   1094c:	80 81       	ld	r24, Z
   1094e:	88 33       	cpi	r24, 0x38	; 56
   10950:	09 f0       	breq	.+2      	; 0x10954 <travel_path+0x2e52>
   10952:	66 c1       	rjmp	.+716    	; 0x10c20 <travel_path+0x311e>
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   10954:	80 91 4f 03 	lds	r24, 0x034F
   10958:	90 91 50 03 	lds	r25, 0x0350
   1095c:	01 96       	adiw	r24, 0x01	; 1
   1095e:	8d 5a       	subi	r24, 0xAD	; 173
   10960:	9c 4f       	sbci	r25, 0xFC	; 252
   10962:	fc 01       	movw	r30, r24
   10964:	80 81       	ld	r24, Z
   10966:	84 34       	cpi	r24, 0x44	; 68
   10968:	09 f4       	brne	.+2      	; 0x1096c <travel_path+0x2e6a>
   1096a:	5b c0       	rjmp	.+182    	; 0x10a22 <travel_path+0x2f20>
   1096c:	80 91 4f 03 	lds	r24, 0x034F
   10970:	90 91 50 03 	lds	r25, 0x0350
   10974:	01 96       	adiw	r24, 0x01	; 1
   10976:	8d 5a       	subi	r24, 0xAD	; 173
   10978:	9c 4f       	sbci	r25, 0xFC	; 252
   1097a:	fc 01       	movw	r30, r24
   1097c:	80 81       	ld	r24, Z
   1097e:	81 33       	cpi	r24, 0x31	; 49
   10980:	09 f4       	brne	.+2      	; 0x10984 <travel_path+0x2e82>
   10982:	4f c0       	rjmp	.+158    	; 0x10a22 <travel_path+0x2f20>
   10984:	80 91 4f 03 	lds	r24, 0x034F
   10988:	90 91 50 03 	lds	r25, 0x0350
   1098c:	01 96       	adiw	r24, 0x01	; 1
   1098e:	8d 5a       	subi	r24, 0xAD	; 173
   10990:	9c 4f       	sbci	r25, 0xFC	; 252
   10992:	fc 01       	movw	r30, r24
   10994:	80 81       	ld	r24, Z
   10996:	82 33       	cpi	r24, 0x32	; 50
   10998:	09 f4       	brne	.+2      	; 0x1099c <travel_path+0x2e9a>
   1099a:	43 c0       	rjmp	.+134    	; 0x10a22 <travel_path+0x2f20>
   1099c:	80 91 4f 03 	lds	r24, 0x034F
   109a0:	90 91 50 03 	lds	r25, 0x0350
   109a4:	01 96       	adiw	r24, 0x01	; 1
   109a6:	8d 5a       	subi	r24, 0xAD	; 173
   109a8:	9c 4f       	sbci	r25, 0xFC	; 252
   109aa:	fc 01       	movw	r30, r24
   109ac:	80 81       	ld	r24, Z
   109ae:	83 33       	cpi	r24, 0x33	; 51
   109b0:	c1 f1       	breq	.+112    	; 0x10a22 <travel_path+0x2f20>
   109b2:	80 91 4f 03 	lds	r24, 0x034F
   109b6:	90 91 50 03 	lds	r25, 0x0350
   109ba:	01 96       	adiw	r24, 0x01	; 1
   109bc:	8d 5a       	subi	r24, 0xAD	; 173
   109be:	9c 4f       	sbci	r25, 0xFC	; 252
   109c0:	fc 01       	movw	r30, r24
   109c2:	80 81       	ld	r24, Z
   109c4:	84 33       	cpi	r24, 0x34	; 52
   109c6:	69 f1       	breq	.+90     	; 0x10a22 <travel_path+0x2f20>
   109c8:	80 91 4f 03 	lds	r24, 0x034F
   109cc:	90 91 50 03 	lds	r25, 0x0350
   109d0:	01 96       	adiw	r24, 0x01	; 1
   109d2:	8d 5a       	subi	r24, 0xAD	; 173
   109d4:	9c 4f       	sbci	r25, 0xFC	; 252
   109d6:	fc 01       	movw	r30, r24
   109d8:	80 81       	ld	r24, Z
   109da:	85 33       	cpi	r24, 0x35	; 53
   109dc:	11 f1       	breq	.+68     	; 0x10a22 <travel_path+0x2f20>
   109de:	80 91 4f 03 	lds	r24, 0x034F
   109e2:	90 91 50 03 	lds	r25, 0x0350
   109e6:	01 96       	adiw	r24, 0x01	; 1
   109e8:	8d 5a       	subi	r24, 0xAD	; 173
   109ea:	9c 4f       	sbci	r25, 0xFC	; 252
   109ec:	fc 01       	movw	r30, r24
   109ee:	80 81       	ld	r24, Z
   109f0:	86 33       	cpi	r24, 0x36	; 54
   109f2:	b9 f0       	breq	.+46     	; 0x10a22 <travel_path+0x2f20>
   109f4:	80 91 4f 03 	lds	r24, 0x034F
   109f8:	90 91 50 03 	lds	r25, 0x0350
   109fc:	01 96       	adiw	r24, 0x01	; 1
   109fe:	8d 5a       	subi	r24, 0xAD	; 173
   10a00:	9c 4f       	sbci	r25, 0xFC	; 252
   10a02:	fc 01       	movw	r30, r24
   10a04:	80 81       	ld	r24, Z
   10a06:	87 33       	cpi	r24, 0x37	; 55
   10a08:	61 f0       	breq	.+24     	; 0x10a22 <travel_path+0x2f20>
   10a0a:	80 91 4f 03 	lds	r24, 0x034F
   10a0e:	90 91 50 03 	lds	r25, 0x0350
   10a12:	01 96       	adiw	r24, 0x01	; 1
   10a14:	8d 5a       	subi	r24, 0xAD	; 173
   10a16:	9c 4f       	sbci	r25, 0xFC	; 252
   10a18:	fc 01       	movw	r30, r24
   10a1a:	80 81       	ld	r24, Z
   10a1c:	88 33       	cpi	r24, 0x38	; 56
   10a1e:	09 f0       	breq	.+2      	; 0x10a22 <travel_path+0x2f20>
   10a20:	fb c0       	rjmp	.+502    	; 0x10c18 <travel_path+0x3116>
			{
				stop();
   10a22:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   10a26:	9e 01       	movw	r18, r28
   10a28:	21 5a       	subi	r18, 0xA1	; 161
   10a2a:	3e 4f       	sbci	r19, 0xFE	; 254
   10a2c:	80 e0       	ldi	r24, 0x00	; 0
   10a2e:	90 e0       	ldi	r25, 0x00	; 0
   10a30:	a0 ea       	ldi	r26, 0xA0	; 160
   10a32:	b1 e4       	ldi	r27, 0x41	; 65
   10a34:	f9 01       	movw	r30, r18
   10a36:	80 83       	st	Z, r24
   10a38:	91 83       	std	Z+1, r25	; 0x01
   10a3a:	a2 83       	std	Z+2, r26	; 0x02
   10a3c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10a3e:	8e 01       	movw	r16, r28
   10a40:	0d 59       	subi	r16, 0x9D	; 157
   10a42:	1e 4f       	sbci	r17, 0xFE	; 254
   10a44:	ce 01       	movw	r24, r28
   10a46:	81 5a       	subi	r24, 0xA1	; 161
   10a48:	9e 4f       	sbci	r25, 0xFE	; 254
   10a4a:	fc 01       	movw	r30, r24
   10a4c:	60 81       	ld	r22, Z
   10a4e:	71 81       	ldd	r23, Z+1	; 0x01
   10a50:	82 81       	ldd	r24, Z+2	; 0x02
   10a52:	93 81       	ldd	r25, Z+3	; 0x03
   10a54:	26 e6       	ldi	r18, 0x66	; 102
   10a56:	36 e6       	ldi	r19, 0x66	; 102
   10a58:	46 e6       	ldi	r20, 0x66	; 102
   10a5a:	55 e4       	ldi	r21, 0x45	; 69
   10a5c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10a60:	dc 01       	movw	r26, r24
   10a62:	cb 01       	movw	r24, r22
   10a64:	f8 01       	movw	r30, r16
   10a66:	80 83       	st	Z, r24
   10a68:	91 83       	std	Z+1, r25	; 0x01
   10a6a:	a2 83       	std	Z+2, r26	; 0x02
   10a6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10a6e:	ce 01       	movw	r24, r28
   10a70:	8d 59       	subi	r24, 0x9D	; 157
   10a72:	9e 4f       	sbci	r25, 0xFE	; 254
   10a74:	11 e0       	ldi	r17, 0x01	; 1
   10a76:	fc 01       	movw	r30, r24
   10a78:	60 81       	ld	r22, Z
   10a7a:	71 81       	ldd	r23, Z+1	; 0x01
   10a7c:	82 81       	ldd	r24, Z+2	; 0x02
   10a7e:	93 81       	ldd	r25, Z+3	; 0x03
   10a80:	20 e0       	ldi	r18, 0x00	; 0
   10a82:	30 e0       	ldi	r19, 0x00	; 0
   10a84:	40 e8       	ldi	r20, 0x80	; 128
   10a86:	5f e3       	ldi	r21, 0x3F	; 63
   10a88:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   10a8c:	88 23       	and	r24, r24
   10a8e:	0c f0       	brlt	.+2      	; 0x10a92 <travel_path+0x2f90>
   10a90:	10 e0       	ldi	r17, 0x00	; 0
   10a92:	11 23       	and	r17, r17
   10a94:	49 f0       	breq	.+18     	; 0x10aa8 <travel_path+0x2fa6>
		__ticks = 1;
   10a96:	ce 01       	movw	r24, r28
   10a98:	89 59       	subi	r24, 0x99	; 153
   10a9a:	9e 4f       	sbci	r25, 0xFE	; 254
   10a9c:	21 e0       	ldi	r18, 0x01	; 1
   10a9e:	30 e0       	ldi	r19, 0x00	; 0
   10aa0:	fc 01       	movw	r30, r24
   10aa2:	31 83       	std	Z+1, r19	; 0x01
   10aa4:	20 83       	st	Z, r18
   10aa6:	74 c0       	rjmp	.+232    	; 0x10b90 <travel_path+0x308e>
	else if (__tmp > 65535)
   10aa8:	ce 01       	movw	r24, r28
   10aaa:	8d 59       	subi	r24, 0x9D	; 157
   10aac:	9e 4f       	sbci	r25, 0xFE	; 254
   10aae:	11 e0       	ldi	r17, 0x01	; 1
   10ab0:	fc 01       	movw	r30, r24
   10ab2:	60 81       	ld	r22, Z
   10ab4:	71 81       	ldd	r23, Z+1	; 0x01
   10ab6:	82 81       	ldd	r24, Z+2	; 0x02
   10ab8:	93 81       	ldd	r25, Z+3	; 0x03
   10aba:	20 e0       	ldi	r18, 0x00	; 0
   10abc:	3f ef       	ldi	r19, 0xFF	; 255
   10abe:	4f e7       	ldi	r20, 0x7F	; 127
   10ac0:	57 e4       	ldi	r21, 0x47	; 71
   10ac2:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   10ac6:	18 16       	cp	r1, r24
   10ac8:	0c f0       	brlt	.+2      	; 0x10acc <travel_path+0x2fca>
   10aca:	10 e0       	ldi	r17, 0x00	; 0
   10acc:	11 23       	and	r17, r17
   10ace:	09 f4       	brne	.+2      	; 0x10ad2 <travel_path+0x2fd0>
   10ad0:	4d c0       	rjmp	.+154    	; 0x10b6c <travel_path+0x306a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10ad2:	ce 01       	movw	r24, r28
   10ad4:	81 5a       	subi	r24, 0xA1	; 161
   10ad6:	9e 4f       	sbci	r25, 0xFE	; 254
   10ad8:	fc 01       	movw	r30, r24
   10ada:	60 81       	ld	r22, Z
   10adc:	71 81       	ldd	r23, Z+1	; 0x01
   10ade:	82 81       	ldd	r24, Z+2	; 0x02
   10ae0:	93 81       	ldd	r25, Z+3	; 0x03
   10ae2:	20 e0       	ldi	r18, 0x00	; 0
   10ae4:	30 e0       	ldi	r19, 0x00	; 0
   10ae6:	40 e2       	ldi	r20, 0x20	; 32
   10ae8:	51 e4       	ldi	r21, 0x41	; 65
   10aea:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10aee:	dc 01       	movw	r26, r24
   10af0:	cb 01       	movw	r24, r22
   10af2:	8e 01       	movw	r16, r28
   10af4:	09 59       	subi	r16, 0x99	; 153
   10af6:	1e 4f       	sbci	r17, 0xFE	; 254
   10af8:	bc 01       	movw	r22, r24
   10afa:	cd 01       	movw	r24, r26
   10afc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10b00:	dc 01       	movw	r26, r24
   10b02:	cb 01       	movw	r24, r22
   10b04:	f8 01       	movw	r30, r16
   10b06:	91 83       	std	Z+1, r25	; 0x01
   10b08:	80 83       	st	Z, r24
   10b0a:	27 c0       	rjmp	.+78     	; 0x10b5a <travel_path+0x3058>
   10b0c:	ce 01       	movw	r24, r28
   10b0e:	87 59       	subi	r24, 0x97	; 151
   10b10:	9e 4f       	sbci	r25, 0xFE	; 254
   10b12:	20 e7       	ldi	r18, 0x70	; 112
   10b14:	31 e0       	ldi	r19, 0x01	; 1
   10b16:	fc 01       	movw	r30, r24
   10b18:	31 83       	std	Z+1, r19	; 0x01
   10b1a:	20 83       	st	Z, r18
   10b1c:	ce 01       	movw	r24, r28
   10b1e:	87 59       	subi	r24, 0x97	; 151
   10b20:	9e 4f       	sbci	r25, 0xFE	; 254
   10b22:	fc 01       	movw	r30, r24
   10b24:	80 81       	ld	r24, Z
   10b26:	91 81       	ldd	r25, Z+1	; 0x01
   10b28:	8c 01       	movw	r16, r24
   10b2a:	c8 01       	movw	r24, r16
   10b2c:	01 97       	sbiw	r24, 0x01	; 1
   10b2e:	f1 f7       	brne	.-4      	; 0x10b2c <travel_path+0x302a>
   10b30:	8c 01       	movw	r16, r24
   10b32:	ce 01       	movw	r24, r28
   10b34:	87 59       	subi	r24, 0x97	; 151
   10b36:	9e 4f       	sbci	r25, 0xFE	; 254
   10b38:	fc 01       	movw	r30, r24
   10b3a:	11 83       	std	Z+1, r17	; 0x01
   10b3c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10b3e:	ce 01       	movw	r24, r28
   10b40:	89 59       	subi	r24, 0x99	; 153
   10b42:	9e 4f       	sbci	r25, 0xFE	; 254
   10b44:	9e 01       	movw	r18, r28
   10b46:	29 59       	subi	r18, 0x99	; 153
   10b48:	3e 4f       	sbci	r19, 0xFE	; 254
   10b4a:	f9 01       	movw	r30, r18
   10b4c:	20 81       	ld	r18, Z
   10b4e:	31 81       	ldd	r19, Z+1	; 0x01
   10b50:	21 50       	subi	r18, 0x01	; 1
   10b52:	30 40       	sbci	r19, 0x00	; 0
   10b54:	fc 01       	movw	r30, r24
   10b56:	31 83       	std	Z+1, r19	; 0x01
   10b58:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10b5a:	ce 01       	movw	r24, r28
   10b5c:	89 59       	subi	r24, 0x99	; 153
   10b5e:	9e 4f       	sbci	r25, 0xFE	; 254
   10b60:	fc 01       	movw	r30, r24
   10b62:	80 81       	ld	r24, Z
   10b64:	91 81       	ldd	r25, Z+1	; 0x01
   10b66:	00 97       	sbiw	r24, 0x00	; 0
   10b68:	89 f6       	brne	.-94     	; 0x10b0c <travel_path+0x300a>
   10b6a:	2f c0       	rjmp	.+94     	; 0x10bca <travel_path+0x30c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10b6c:	8e 01       	movw	r16, r28
   10b6e:	09 59       	subi	r16, 0x99	; 153
   10b70:	1e 4f       	sbci	r17, 0xFE	; 254
   10b72:	ce 01       	movw	r24, r28
   10b74:	8d 59       	subi	r24, 0x9D	; 157
   10b76:	9e 4f       	sbci	r25, 0xFE	; 254
   10b78:	fc 01       	movw	r30, r24
   10b7a:	60 81       	ld	r22, Z
   10b7c:	71 81       	ldd	r23, Z+1	; 0x01
   10b7e:	82 81       	ldd	r24, Z+2	; 0x02
   10b80:	93 81       	ldd	r25, Z+3	; 0x03
   10b82:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10b86:	dc 01       	movw	r26, r24
   10b88:	cb 01       	movw	r24, r22
   10b8a:	f8 01       	movw	r30, r16
   10b8c:	91 83       	std	Z+1, r25	; 0x01
   10b8e:	80 83       	st	Z, r24
   10b90:	ce 01       	movw	r24, r28
   10b92:	85 59       	subi	r24, 0x95	; 149
   10b94:	9e 4f       	sbci	r25, 0xFE	; 254
   10b96:	9e 01       	movw	r18, r28
   10b98:	29 59       	subi	r18, 0x99	; 153
   10b9a:	3e 4f       	sbci	r19, 0xFE	; 254
   10b9c:	f9 01       	movw	r30, r18
   10b9e:	20 81       	ld	r18, Z
   10ba0:	31 81       	ldd	r19, Z+1	; 0x01
   10ba2:	fc 01       	movw	r30, r24
   10ba4:	31 83       	std	Z+1, r19	; 0x01
   10ba6:	20 83       	st	Z, r18
   10ba8:	ce 01       	movw	r24, r28
   10baa:	85 59       	subi	r24, 0x95	; 149
   10bac:	9e 4f       	sbci	r25, 0xFE	; 254
   10bae:	fc 01       	movw	r30, r24
   10bb0:	80 81       	ld	r24, Z
   10bb2:	91 81       	ldd	r25, Z+1	; 0x01
   10bb4:	8c 01       	movw	r16, r24
   10bb6:	c8 01       	movw	r24, r16
   10bb8:	01 97       	sbiw	r24, 0x01	; 1
   10bba:	f1 f7       	brne	.-4      	; 0x10bb8 <travel_path+0x30b6>
   10bbc:	8c 01       	movw	r16, r24
   10bbe:	ce 01       	movw	r24, r28
   10bc0:	85 59       	subi	r24, 0x95	; 149
   10bc2:	9e 4f       	sbci	r25, 0xFE	; 254
   10bc4:	fc 01       	movw	r30, r24
   10bc6:	11 83       	std	Z+1, r17	; 0x01
   10bc8:	00 83       	st	Z, r16
				_delay_ms(20);
				node++;
   10bca:	80 91 4f 03 	lds	r24, 0x034F
   10bce:	90 91 50 03 	lds	r25, 0x0350
   10bd2:	01 96       	adiw	r24, 0x01	; 1
   10bd4:	90 93 50 03 	sts	0x0350, r25
   10bd8:	80 93 4f 03 	sts	0x034F, r24
				pick_drop(master_path[node]);
   10bdc:	80 91 4f 03 	lds	r24, 0x034F
   10be0:	90 91 50 03 	lds	r25, 0x0350
   10be4:	8d 5a       	subi	r24, 0xAD	; 173
   10be6:	9c 4f       	sbci	r25, 0xFC	; 252
   10be8:	fc 01       	movw	r30, r24
   10bea:	80 81       	ld	r24, Z
   10bec:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
				node++;
   10bf0:	80 91 4f 03 	lds	r24, 0x034F
   10bf4:	90 91 50 03 	lds	r25, 0x0350
   10bf8:	01 96       	adiw	r24, 0x01	; 1
   10bfa:	90 93 50 03 	sts	0x0350, r25
   10bfe:	80 93 4f 03 	sts	0x034F, r24
				travel_path(master_path[node]);
   10c02:	80 91 4f 03 	lds	r24, 0x034F
   10c06:	90 91 50 03 	lds	r25, 0x0350
   10c0a:	8d 5a       	subi	r24, 0xAD	; 173
   10c0c:	9c 4f       	sbci	r25, 0xFC	; 252
   10c0e:	fc 01       	movw	r30, r24
   10c10:	80 81       	ld	r24, Z
   10c12:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
		}
		else
		forward();
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   10c16:	1a c7       	rjmp	.+3636   	; 0x11a4c <travel_path+0x3f4a>
				pick_drop(master_path[node]);
				node++;
				travel_path(master_path[node]);
			}
			else
			 forward();
   10c18:	0e 94 c3 0c 	call	0x1986	; 0x1986 <forward>
		}
		else
		forward();
		}
		else if(master_path[node-1]=='D'||master_path[node-1]=='1'||master_path[node-1]=='2'||master_path[node-1]=='3'||master_path[node-1]=='4'||master_path[node-1]=='5'||master_path[node-1]=='6'||master_path[node-1]=='7'||master_path[node-1]=='8')
		{  		if(master_path[node+1]=='D'||master_path[node+1]=='1'||master_path[node+1]=='2'||master_path[node+1]=='3'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   10c1c:	00 00       	nop
   10c1e:	16 c7       	rjmp	.+3628   	; 0x11a4c <travel_path+0x3f4a>
			else
			 forward();
		}
		else
		{
			stop();
   10c20:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   10c24:	9e 01       	movw	r18, r28
   10c26:	23 59       	subi	r18, 0x93	; 147
   10c28:	3e 4f       	sbci	r19, 0xFE	; 254
   10c2a:	80 e0       	ldi	r24, 0x00	; 0
   10c2c:	90 e0       	ldi	r25, 0x00	; 0
   10c2e:	a0 ea       	ldi	r26, 0xA0	; 160
   10c30:	b1 e4       	ldi	r27, 0x41	; 65
   10c32:	f9 01       	movw	r30, r18
   10c34:	80 83       	st	Z, r24
   10c36:	91 83       	std	Z+1, r25	; 0x01
   10c38:	a2 83       	std	Z+2, r26	; 0x02
   10c3a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10c3c:	8e 01       	movw	r16, r28
   10c3e:	0f 58       	subi	r16, 0x8F	; 143
   10c40:	1e 4f       	sbci	r17, 0xFE	; 254
   10c42:	ce 01       	movw	r24, r28
   10c44:	83 59       	subi	r24, 0x93	; 147
   10c46:	9e 4f       	sbci	r25, 0xFE	; 254
   10c48:	fc 01       	movw	r30, r24
   10c4a:	60 81       	ld	r22, Z
   10c4c:	71 81       	ldd	r23, Z+1	; 0x01
   10c4e:	82 81       	ldd	r24, Z+2	; 0x02
   10c50:	93 81       	ldd	r25, Z+3	; 0x03
   10c52:	26 e6       	ldi	r18, 0x66	; 102
   10c54:	36 e6       	ldi	r19, 0x66	; 102
   10c56:	46 e6       	ldi	r20, 0x66	; 102
   10c58:	55 e4       	ldi	r21, 0x45	; 69
   10c5a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10c5e:	dc 01       	movw	r26, r24
   10c60:	cb 01       	movw	r24, r22
   10c62:	f8 01       	movw	r30, r16
   10c64:	80 83       	st	Z, r24
   10c66:	91 83       	std	Z+1, r25	; 0x01
   10c68:	a2 83       	std	Z+2, r26	; 0x02
   10c6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10c6c:	ce 01       	movw	r24, r28
   10c6e:	8f 58       	subi	r24, 0x8F	; 143
   10c70:	9e 4f       	sbci	r25, 0xFE	; 254
   10c72:	11 e0       	ldi	r17, 0x01	; 1
   10c74:	fc 01       	movw	r30, r24
   10c76:	60 81       	ld	r22, Z
   10c78:	71 81       	ldd	r23, Z+1	; 0x01
   10c7a:	82 81       	ldd	r24, Z+2	; 0x02
   10c7c:	93 81       	ldd	r25, Z+3	; 0x03
   10c7e:	20 e0       	ldi	r18, 0x00	; 0
   10c80:	30 e0       	ldi	r19, 0x00	; 0
   10c82:	40 e8       	ldi	r20, 0x80	; 128
   10c84:	5f e3       	ldi	r21, 0x3F	; 63
   10c86:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   10c8a:	88 23       	and	r24, r24
   10c8c:	0c f0       	brlt	.+2      	; 0x10c90 <travel_path+0x318e>
   10c8e:	10 e0       	ldi	r17, 0x00	; 0
   10c90:	11 23       	and	r17, r17
   10c92:	49 f0       	breq	.+18     	; 0x10ca6 <travel_path+0x31a4>
		__ticks = 1;
   10c94:	ce 01       	movw	r24, r28
   10c96:	8b 58       	subi	r24, 0x8B	; 139
   10c98:	9e 4f       	sbci	r25, 0xFE	; 254
   10c9a:	21 e0       	ldi	r18, 0x01	; 1
   10c9c:	30 e0       	ldi	r19, 0x00	; 0
   10c9e:	fc 01       	movw	r30, r24
   10ca0:	31 83       	std	Z+1, r19	; 0x01
   10ca2:	20 83       	st	Z, r18
   10ca4:	74 c0       	rjmp	.+232    	; 0x10d8e <travel_path+0x328c>
	else if (__tmp > 65535)
   10ca6:	ce 01       	movw	r24, r28
   10ca8:	8f 58       	subi	r24, 0x8F	; 143
   10caa:	9e 4f       	sbci	r25, 0xFE	; 254
   10cac:	11 e0       	ldi	r17, 0x01	; 1
   10cae:	fc 01       	movw	r30, r24
   10cb0:	60 81       	ld	r22, Z
   10cb2:	71 81       	ldd	r23, Z+1	; 0x01
   10cb4:	82 81       	ldd	r24, Z+2	; 0x02
   10cb6:	93 81       	ldd	r25, Z+3	; 0x03
   10cb8:	20 e0       	ldi	r18, 0x00	; 0
   10cba:	3f ef       	ldi	r19, 0xFF	; 255
   10cbc:	4f e7       	ldi	r20, 0x7F	; 127
   10cbe:	57 e4       	ldi	r21, 0x47	; 71
   10cc0:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   10cc4:	18 16       	cp	r1, r24
   10cc6:	0c f0       	brlt	.+2      	; 0x10cca <travel_path+0x31c8>
   10cc8:	10 e0       	ldi	r17, 0x00	; 0
   10cca:	11 23       	and	r17, r17
   10ccc:	09 f4       	brne	.+2      	; 0x10cd0 <travel_path+0x31ce>
   10cce:	4d c0       	rjmp	.+154    	; 0x10d6a <travel_path+0x3268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10cd0:	ce 01       	movw	r24, r28
   10cd2:	83 59       	subi	r24, 0x93	; 147
   10cd4:	9e 4f       	sbci	r25, 0xFE	; 254
   10cd6:	fc 01       	movw	r30, r24
   10cd8:	60 81       	ld	r22, Z
   10cda:	71 81       	ldd	r23, Z+1	; 0x01
   10cdc:	82 81       	ldd	r24, Z+2	; 0x02
   10cde:	93 81       	ldd	r25, Z+3	; 0x03
   10ce0:	20 e0       	ldi	r18, 0x00	; 0
   10ce2:	30 e0       	ldi	r19, 0x00	; 0
   10ce4:	40 e2       	ldi	r20, 0x20	; 32
   10ce6:	51 e4       	ldi	r21, 0x41	; 65
   10ce8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10cec:	dc 01       	movw	r26, r24
   10cee:	cb 01       	movw	r24, r22
   10cf0:	8e 01       	movw	r16, r28
   10cf2:	0b 58       	subi	r16, 0x8B	; 139
   10cf4:	1e 4f       	sbci	r17, 0xFE	; 254
   10cf6:	bc 01       	movw	r22, r24
   10cf8:	cd 01       	movw	r24, r26
   10cfa:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10cfe:	dc 01       	movw	r26, r24
   10d00:	cb 01       	movw	r24, r22
   10d02:	f8 01       	movw	r30, r16
   10d04:	91 83       	std	Z+1, r25	; 0x01
   10d06:	80 83       	st	Z, r24
   10d08:	27 c0       	rjmp	.+78     	; 0x10d58 <travel_path+0x3256>
   10d0a:	ce 01       	movw	r24, r28
   10d0c:	89 58       	subi	r24, 0x89	; 137
   10d0e:	9e 4f       	sbci	r25, 0xFE	; 254
   10d10:	20 e7       	ldi	r18, 0x70	; 112
   10d12:	31 e0       	ldi	r19, 0x01	; 1
   10d14:	fc 01       	movw	r30, r24
   10d16:	31 83       	std	Z+1, r19	; 0x01
   10d18:	20 83       	st	Z, r18
   10d1a:	ce 01       	movw	r24, r28
   10d1c:	89 58       	subi	r24, 0x89	; 137
   10d1e:	9e 4f       	sbci	r25, 0xFE	; 254
   10d20:	fc 01       	movw	r30, r24
   10d22:	80 81       	ld	r24, Z
   10d24:	91 81       	ldd	r25, Z+1	; 0x01
   10d26:	8c 01       	movw	r16, r24
   10d28:	c8 01       	movw	r24, r16
   10d2a:	01 97       	sbiw	r24, 0x01	; 1
   10d2c:	f1 f7       	brne	.-4      	; 0x10d2a <travel_path+0x3228>
   10d2e:	8c 01       	movw	r16, r24
   10d30:	ce 01       	movw	r24, r28
   10d32:	89 58       	subi	r24, 0x89	; 137
   10d34:	9e 4f       	sbci	r25, 0xFE	; 254
   10d36:	fc 01       	movw	r30, r24
   10d38:	11 83       	std	Z+1, r17	; 0x01
   10d3a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10d3c:	ce 01       	movw	r24, r28
   10d3e:	8b 58       	subi	r24, 0x8B	; 139
   10d40:	9e 4f       	sbci	r25, 0xFE	; 254
   10d42:	9e 01       	movw	r18, r28
   10d44:	2b 58       	subi	r18, 0x8B	; 139
   10d46:	3e 4f       	sbci	r19, 0xFE	; 254
   10d48:	f9 01       	movw	r30, r18
   10d4a:	20 81       	ld	r18, Z
   10d4c:	31 81       	ldd	r19, Z+1	; 0x01
   10d4e:	21 50       	subi	r18, 0x01	; 1
   10d50:	30 40       	sbci	r19, 0x00	; 0
   10d52:	fc 01       	movw	r30, r24
   10d54:	31 83       	std	Z+1, r19	; 0x01
   10d56:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10d58:	ce 01       	movw	r24, r28
   10d5a:	8b 58       	subi	r24, 0x8B	; 139
   10d5c:	9e 4f       	sbci	r25, 0xFE	; 254
   10d5e:	fc 01       	movw	r30, r24
   10d60:	80 81       	ld	r24, Z
   10d62:	91 81       	ldd	r25, Z+1	; 0x01
   10d64:	00 97       	sbiw	r24, 0x00	; 0
   10d66:	89 f6       	brne	.-94     	; 0x10d0a <travel_path+0x3208>
   10d68:	2f c0       	rjmp	.+94     	; 0x10dc8 <travel_path+0x32c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10d6a:	8e 01       	movw	r16, r28
   10d6c:	0b 58       	subi	r16, 0x8B	; 139
   10d6e:	1e 4f       	sbci	r17, 0xFE	; 254
   10d70:	ce 01       	movw	r24, r28
   10d72:	8f 58       	subi	r24, 0x8F	; 143
   10d74:	9e 4f       	sbci	r25, 0xFE	; 254
   10d76:	fc 01       	movw	r30, r24
   10d78:	60 81       	ld	r22, Z
   10d7a:	71 81       	ldd	r23, Z+1	; 0x01
   10d7c:	82 81       	ldd	r24, Z+2	; 0x02
   10d7e:	93 81       	ldd	r25, Z+3	; 0x03
   10d80:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10d84:	dc 01       	movw	r26, r24
   10d86:	cb 01       	movw	r24, r22
   10d88:	f8 01       	movw	r30, r16
   10d8a:	91 83       	std	Z+1, r25	; 0x01
   10d8c:	80 83       	st	Z, r24
   10d8e:	ce 01       	movw	r24, r28
   10d90:	87 58       	subi	r24, 0x87	; 135
   10d92:	9e 4f       	sbci	r25, 0xFE	; 254
   10d94:	9e 01       	movw	r18, r28
   10d96:	2b 58       	subi	r18, 0x8B	; 139
   10d98:	3e 4f       	sbci	r19, 0xFE	; 254
   10d9a:	f9 01       	movw	r30, r18
   10d9c:	20 81       	ld	r18, Z
   10d9e:	31 81       	ldd	r19, Z+1	; 0x01
   10da0:	fc 01       	movw	r30, r24
   10da2:	31 83       	std	Z+1, r19	; 0x01
   10da4:	20 83       	st	Z, r18
   10da6:	ce 01       	movw	r24, r28
   10da8:	87 58       	subi	r24, 0x87	; 135
   10daa:	9e 4f       	sbci	r25, 0xFE	; 254
   10dac:	fc 01       	movw	r30, r24
   10dae:	80 81       	ld	r24, Z
   10db0:	91 81       	ldd	r25, Z+1	; 0x01
   10db2:	8c 01       	movw	r16, r24
   10db4:	c8 01       	movw	r24, r16
   10db6:	01 97       	sbiw	r24, 0x01	; 1
   10db8:	f1 f7       	brne	.-4      	; 0x10db6 <travel_path+0x32b4>
   10dba:	8c 01       	movw	r16, r24
   10dbc:	ce 01       	movw	r24, r28
   10dbe:	87 58       	subi	r24, 0x87	; 135
   10dc0:	9e 4f       	sbci	r25, 0xFE	; 254
   10dc2:	fc 01       	movw	r30, r24
   10dc4:	11 83       	std	Z+1, r17	; 0x01
   10dc6:	00 83       	st	Z, r16
			_delay_ms(20);
			forward_mm(30);
   10dc8:	8e e1       	ldi	r24, 0x1E	; 30
   10dca:	90 e0       	ldi	r25, 0x00	; 0
   10dcc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <forward_mm>
			node++;
   10dd0:	80 91 4f 03 	lds	r24, 0x034F
   10dd4:	90 91 50 03 	lds	r25, 0x0350
   10dd8:	01 96       	adiw	r24, 0x01	; 1
   10dda:	90 93 50 03 	sts	0x0350, r25
   10dde:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
   10de2:	80 91 4f 03 	lds	r24, 0x034F
   10de6:	90 91 50 03 	lds	r25, 0x0350
   10dea:	8d 5a       	subi	r24, 0xAD	; 173
   10dec:	9c 4f       	sbci	r25, 0xFC	; 252
   10dee:	fc 01       	movw	r30, r24
   10df0:	80 81       	ld	r24, Z
   10df2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
   10df6:	80 91 4f 03 	lds	r24, 0x034F
   10dfa:	90 91 50 03 	lds	r25, 0x0350
   10dfe:	01 96       	adiw	r24, 0x01	; 1
   10e00:	90 93 50 03 	sts	0x0350, r25
   10e04:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
   10e08:	80 91 4f 03 	lds	r24, 0x034F
   10e0c:	90 91 50 03 	lds	r25, 0x0350
   10e10:	8d 5a       	subi	r24, 0xAD	; 173
   10e12:	9c 4f       	sbci	r25, 0xFC	; 252
   10e14:	fc 01       	movw	r30, r24
   10e16:	80 81       	ld	r24, Z
   10e18:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
   10e1c:	17 c6       	rjmp	.+3118   	; 0x11a4c <travel_path+0x3f4a>
		}
		}
	else if(pos_val=='U'){
   10e1e:	ce 01       	movw	r24, r28
   10e20:	81 53       	subi	r24, 0x31	; 49
   10e22:	9e 4f       	sbci	r25, 0xFE	; 254
   10e24:	fc 01       	movw	r30, r24
   10e26:	80 81       	ld	r24, Z
   10e28:	85 35       	cpi	r24, 0x55	; 85
   10e2a:	09 f0       	breq	.+2      	; 0x10e2e <travel_path+0x332c>
   10e2c:	00 c6       	rjmp	.+3072   	; 0x11a2e <travel_path+0x3f2c>
		if(master_path[node+1]=='D'||master_path[node+1]=='4'||master_path[node+1]=='5'||master_path[node+1]=='6'||master_path[node+1]=='7'||master_path[node+1]=='8')
   10e2e:	80 91 4f 03 	lds	r24, 0x034F
   10e32:	90 91 50 03 	lds	r25, 0x0350
   10e36:	01 96       	adiw	r24, 0x01	; 1
   10e38:	8d 5a       	subi	r24, 0xAD	; 173
   10e3a:	9c 4f       	sbci	r25, 0xFC	; 252
   10e3c:	fc 01       	movw	r30, r24
   10e3e:	80 81       	ld	r24, Z
   10e40:	84 34       	cpi	r24, 0x44	; 68
   10e42:	c1 f1       	breq	.+112    	; 0x10eb4 <travel_path+0x33b2>
   10e44:	80 91 4f 03 	lds	r24, 0x034F
   10e48:	90 91 50 03 	lds	r25, 0x0350
   10e4c:	01 96       	adiw	r24, 0x01	; 1
   10e4e:	8d 5a       	subi	r24, 0xAD	; 173
   10e50:	9c 4f       	sbci	r25, 0xFC	; 252
   10e52:	fc 01       	movw	r30, r24
   10e54:	80 81       	ld	r24, Z
   10e56:	84 33       	cpi	r24, 0x34	; 52
   10e58:	69 f1       	breq	.+90     	; 0x10eb4 <travel_path+0x33b2>
   10e5a:	80 91 4f 03 	lds	r24, 0x034F
   10e5e:	90 91 50 03 	lds	r25, 0x0350
   10e62:	01 96       	adiw	r24, 0x01	; 1
   10e64:	8d 5a       	subi	r24, 0xAD	; 173
   10e66:	9c 4f       	sbci	r25, 0xFC	; 252
   10e68:	fc 01       	movw	r30, r24
   10e6a:	80 81       	ld	r24, Z
   10e6c:	85 33       	cpi	r24, 0x35	; 53
   10e6e:	11 f1       	breq	.+68     	; 0x10eb4 <travel_path+0x33b2>
   10e70:	80 91 4f 03 	lds	r24, 0x034F
   10e74:	90 91 50 03 	lds	r25, 0x0350
   10e78:	01 96       	adiw	r24, 0x01	; 1
   10e7a:	8d 5a       	subi	r24, 0xAD	; 173
   10e7c:	9c 4f       	sbci	r25, 0xFC	; 252
   10e7e:	fc 01       	movw	r30, r24
   10e80:	80 81       	ld	r24, Z
   10e82:	86 33       	cpi	r24, 0x36	; 54
   10e84:	b9 f0       	breq	.+46     	; 0x10eb4 <travel_path+0x33b2>
   10e86:	80 91 4f 03 	lds	r24, 0x034F
   10e8a:	90 91 50 03 	lds	r25, 0x0350
   10e8e:	01 96       	adiw	r24, 0x01	; 1
   10e90:	8d 5a       	subi	r24, 0xAD	; 173
   10e92:	9c 4f       	sbci	r25, 0xFC	; 252
   10e94:	fc 01       	movw	r30, r24
   10e96:	80 81       	ld	r24, Z
   10e98:	87 33       	cpi	r24, 0x37	; 55
   10e9a:	61 f0       	breq	.+24     	; 0x10eb4 <travel_path+0x33b2>
   10e9c:	80 91 4f 03 	lds	r24, 0x034F
   10ea0:	90 91 50 03 	lds	r25, 0x0350
   10ea4:	01 96       	adiw	r24, 0x01	; 1
   10ea6:	8d 5a       	subi	r24, 0xAD	; 173
   10ea8:	9c 4f       	sbci	r25, 0xFC	; 252
   10eaa:	fc 01       	movw	r30, r24
   10eac:	80 81       	ld	r24, Z
   10eae:	88 33       	cpi	r24, 0x38	; 56
   10eb0:	09 f0       	breq	.+2      	; 0x10eb4 <travel_path+0x33b2>
   10eb2:	fd c0       	rjmp	.+506    	; 0x110ae <travel_path+0x35ac>
		{
			stop();
   10eb4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   10eb8:	9e 01       	movw	r18, r28
   10eba:	25 58       	subi	r18, 0x85	; 133
   10ebc:	3e 4f       	sbci	r19, 0xFE	; 254
   10ebe:	80 e0       	ldi	r24, 0x00	; 0
   10ec0:	90 e0       	ldi	r25, 0x00	; 0
   10ec2:	a0 ea       	ldi	r26, 0xA0	; 160
   10ec4:	b1 e4       	ldi	r27, 0x41	; 65
   10ec6:	f9 01       	movw	r30, r18
   10ec8:	80 83       	st	Z, r24
   10eca:	91 83       	std	Z+1, r25	; 0x01
   10ecc:	a2 83       	std	Z+2, r26	; 0x02
   10ece:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   10ed0:	8e 01       	movw	r16, r28
   10ed2:	01 58       	subi	r16, 0x81	; 129
   10ed4:	1e 4f       	sbci	r17, 0xFE	; 254
   10ed6:	ce 01       	movw	r24, r28
   10ed8:	85 58       	subi	r24, 0x85	; 133
   10eda:	9e 4f       	sbci	r25, 0xFE	; 254
   10edc:	fc 01       	movw	r30, r24
   10ede:	60 81       	ld	r22, Z
   10ee0:	71 81       	ldd	r23, Z+1	; 0x01
   10ee2:	82 81       	ldd	r24, Z+2	; 0x02
   10ee4:	93 81       	ldd	r25, Z+3	; 0x03
   10ee6:	26 e6       	ldi	r18, 0x66	; 102
   10ee8:	36 e6       	ldi	r19, 0x66	; 102
   10eea:	46 e6       	ldi	r20, 0x66	; 102
   10eec:	55 e4       	ldi	r21, 0x45	; 69
   10eee:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10ef2:	dc 01       	movw	r26, r24
   10ef4:	cb 01       	movw	r24, r22
   10ef6:	f8 01       	movw	r30, r16
   10ef8:	80 83       	st	Z, r24
   10efa:	91 83       	std	Z+1, r25	; 0x01
   10efc:	a2 83       	std	Z+2, r26	; 0x02
   10efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   10f00:	ce 01       	movw	r24, r28
   10f02:	81 58       	subi	r24, 0x81	; 129
   10f04:	9e 4f       	sbci	r25, 0xFE	; 254
   10f06:	11 e0       	ldi	r17, 0x01	; 1
   10f08:	fc 01       	movw	r30, r24
   10f0a:	60 81       	ld	r22, Z
   10f0c:	71 81       	ldd	r23, Z+1	; 0x01
   10f0e:	82 81       	ldd	r24, Z+2	; 0x02
   10f10:	93 81       	ldd	r25, Z+3	; 0x03
   10f12:	20 e0       	ldi	r18, 0x00	; 0
   10f14:	30 e0       	ldi	r19, 0x00	; 0
   10f16:	40 e8       	ldi	r20, 0x80	; 128
   10f18:	5f e3       	ldi	r21, 0x3F	; 63
   10f1a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   10f1e:	88 23       	and	r24, r24
   10f20:	0c f0       	brlt	.+2      	; 0x10f24 <travel_path+0x3422>
   10f22:	10 e0       	ldi	r17, 0x00	; 0
   10f24:	11 23       	and	r17, r17
   10f26:	49 f0       	breq	.+18     	; 0x10f3a <travel_path+0x3438>
		__ticks = 1;
   10f28:	ce 01       	movw	r24, r28
   10f2a:	8d 57       	subi	r24, 0x7D	; 125
   10f2c:	9e 4f       	sbci	r25, 0xFE	; 254
   10f2e:	21 e0       	ldi	r18, 0x01	; 1
   10f30:	30 e0       	ldi	r19, 0x00	; 0
   10f32:	fc 01       	movw	r30, r24
   10f34:	31 83       	std	Z+1, r19	; 0x01
   10f36:	20 83       	st	Z, r18
   10f38:	74 c0       	rjmp	.+232    	; 0x11022 <travel_path+0x3520>
	else if (__tmp > 65535)
   10f3a:	ce 01       	movw	r24, r28
   10f3c:	81 58       	subi	r24, 0x81	; 129
   10f3e:	9e 4f       	sbci	r25, 0xFE	; 254
   10f40:	11 e0       	ldi	r17, 0x01	; 1
   10f42:	fc 01       	movw	r30, r24
   10f44:	60 81       	ld	r22, Z
   10f46:	71 81       	ldd	r23, Z+1	; 0x01
   10f48:	82 81       	ldd	r24, Z+2	; 0x02
   10f4a:	93 81       	ldd	r25, Z+3	; 0x03
   10f4c:	20 e0       	ldi	r18, 0x00	; 0
   10f4e:	3f ef       	ldi	r19, 0xFF	; 255
   10f50:	4f e7       	ldi	r20, 0x7F	; 127
   10f52:	57 e4       	ldi	r21, 0x47	; 71
   10f54:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   10f58:	18 16       	cp	r1, r24
   10f5a:	0c f0       	brlt	.+2      	; 0x10f5e <travel_path+0x345c>
   10f5c:	10 e0       	ldi	r17, 0x00	; 0
   10f5e:	11 23       	and	r17, r17
   10f60:	09 f4       	brne	.+2      	; 0x10f64 <travel_path+0x3462>
   10f62:	4d c0       	rjmp	.+154    	; 0x10ffe <travel_path+0x34fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   10f64:	ce 01       	movw	r24, r28
   10f66:	85 58       	subi	r24, 0x85	; 133
   10f68:	9e 4f       	sbci	r25, 0xFE	; 254
   10f6a:	fc 01       	movw	r30, r24
   10f6c:	60 81       	ld	r22, Z
   10f6e:	71 81       	ldd	r23, Z+1	; 0x01
   10f70:	82 81       	ldd	r24, Z+2	; 0x02
   10f72:	93 81       	ldd	r25, Z+3	; 0x03
   10f74:	20 e0       	ldi	r18, 0x00	; 0
   10f76:	30 e0       	ldi	r19, 0x00	; 0
   10f78:	40 e2       	ldi	r20, 0x20	; 32
   10f7a:	51 e4       	ldi	r21, 0x41	; 65
   10f7c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   10f80:	dc 01       	movw	r26, r24
   10f82:	cb 01       	movw	r24, r22
   10f84:	8e 01       	movw	r16, r28
   10f86:	0d 57       	subi	r16, 0x7D	; 125
   10f88:	1e 4f       	sbci	r17, 0xFE	; 254
   10f8a:	bc 01       	movw	r22, r24
   10f8c:	cd 01       	movw	r24, r26
   10f8e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   10f92:	dc 01       	movw	r26, r24
   10f94:	cb 01       	movw	r24, r22
   10f96:	f8 01       	movw	r30, r16
   10f98:	91 83       	std	Z+1, r25	; 0x01
   10f9a:	80 83       	st	Z, r24
   10f9c:	27 c0       	rjmp	.+78     	; 0x10fec <travel_path+0x34ea>
   10f9e:	ce 01       	movw	r24, r28
   10fa0:	8b 57       	subi	r24, 0x7B	; 123
   10fa2:	9e 4f       	sbci	r25, 0xFE	; 254
   10fa4:	20 e7       	ldi	r18, 0x70	; 112
   10fa6:	31 e0       	ldi	r19, 0x01	; 1
   10fa8:	fc 01       	movw	r30, r24
   10faa:	31 83       	std	Z+1, r19	; 0x01
   10fac:	20 83       	st	Z, r18
   10fae:	ce 01       	movw	r24, r28
   10fb0:	8b 57       	subi	r24, 0x7B	; 123
   10fb2:	9e 4f       	sbci	r25, 0xFE	; 254
   10fb4:	fc 01       	movw	r30, r24
   10fb6:	80 81       	ld	r24, Z
   10fb8:	91 81       	ldd	r25, Z+1	; 0x01
   10fba:	8c 01       	movw	r16, r24
   10fbc:	c8 01       	movw	r24, r16
   10fbe:	01 97       	sbiw	r24, 0x01	; 1
   10fc0:	f1 f7       	brne	.-4      	; 0x10fbe <travel_path+0x34bc>
   10fc2:	8c 01       	movw	r16, r24
   10fc4:	ce 01       	movw	r24, r28
   10fc6:	8b 57       	subi	r24, 0x7B	; 123
   10fc8:	9e 4f       	sbci	r25, 0xFE	; 254
   10fca:	fc 01       	movw	r30, r24
   10fcc:	11 83       	std	Z+1, r17	; 0x01
   10fce:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   10fd0:	ce 01       	movw	r24, r28
   10fd2:	8d 57       	subi	r24, 0x7D	; 125
   10fd4:	9e 4f       	sbci	r25, 0xFE	; 254
   10fd6:	9e 01       	movw	r18, r28
   10fd8:	2d 57       	subi	r18, 0x7D	; 125
   10fda:	3e 4f       	sbci	r19, 0xFE	; 254
   10fdc:	f9 01       	movw	r30, r18
   10fde:	20 81       	ld	r18, Z
   10fe0:	31 81       	ldd	r19, Z+1	; 0x01
   10fe2:	21 50       	subi	r18, 0x01	; 1
   10fe4:	30 40       	sbci	r19, 0x00	; 0
   10fe6:	fc 01       	movw	r30, r24
   10fe8:	31 83       	std	Z+1, r19	; 0x01
   10fea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   10fec:	ce 01       	movw	r24, r28
   10fee:	8d 57       	subi	r24, 0x7D	; 125
   10ff0:	9e 4f       	sbci	r25, 0xFE	; 254
   10ff2:	fc 01       	movw	r30, r24
   10ff4:	80 81       	ld	r24, Z
   10ff6:	91 81       	ldd	r25, Z+1	; 0x01
   10ff8:	00 97       	sbiw	r24, 0x00	; 0
   10ffa:	89 f6       	brne	.-94     	; 0x10f9e <travel_path+0x349c>
   10ffc:	2f c0       	rjmp	.+94     	; 0x1105c <travel_path+0x355a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   10ffe:	8e 01       	movw	r16, r28
   11000:	0d 57       	subi	r16, 0x7D	; 125
   11002:	1e 4f       	sbci	r17, 0xFE	; 254
   11004:	ce 01       	movw	r24, r28
   11006:	81 58       	subi	r24, 0x81	; 129
   11008:	9e 4f       	sbci	r25, 0xFE	; 254
   1100a:	fc 01       	movw	r30, r24
   1100c:	60 81       	ld	r22, Z
   1100e:	71 81       	ldd	r23, Z+1	; 0x01
   11010:	82 81       	ldd	r24, Z+2	; 0x02
   11012:	93 81       	ldd	r25, Z+3	; 0x03
   11014:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11018:	dc 01       	movw	r26, r24
   1101a:	cb 01       	movw	r24, r22
   1101c:	f8 01       	movw	r30, r16
   1101e:	91 83       	std	Z+1, r25	; 0x01
   11020:	80 83       	st	Z, r24
   11022:	ce 01       	movw	r24, r28
   11024:	89 57       	subi	r24, 0x79	; 121
   11026:	9e 4f       	sbci	r25, 0xFE	; 254
   11028:	9e 01       	movw	r18, r28
   1102a:	2d 57       	subi	r18, 0x7D	; 125
   1102c:	3e 4f       	sbci	r19, 0xFE	; 254
   1102e:	f9 01       	movw	r30, r18
   11030:	20 81       	ld	r18, Z
   11032:	31 81       	ldd	r19, Z+1	; 0x01
   11034:	fc 01       	movw	r30, r24
   11036:	31 83       	std	Z+1, r19	; 0x01
   11038:	20 83       	st	Z, r18
   1103a:	ce 01       	movw	r24, r28
   1103c:	89 57       	subi	r24, 0x79	; 121
   1103e:	9e 4f       	sbci	r25, 0xFE	; 254
   11040:	fc 01       	movw	r30, r24
   11042:	80 81       	ld	r24, Z
   11044:	91 81       	ldd	r25, Z+1	; 0x01
   11046:	8c 01       	movw	r16, r24
   11048:	c8 01       	movw	r24, r16
   1104a:	01 97       	sbiw	r24, 0x01	; 1
   1104c:	f1 f7       	brne	.-4      	; 0x1104a <travel_path+0x3548>
   1104e:	8c 01       	movw	r16, r24
   11050:	ce 01       	movw	r24, r28
   11052:	89 57       	subi	r24, 0x79	; 121
   11054:	9e 4f       	sbci	r25, 0xFE	; 254
   11056:	fc 01       	movw	r30, r24
   11058:	11 83       	std	Z+1, r17	; 0x01
   1105a:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
   1105c:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
			node++;
   11060:	80 91 4f 03 	lds	r24, 0x034F
   11064:	90 91 50 03 	lds	r25, 0x0350
   11068:	01 96       	adiw	r24, 0x01	; 1
   1106a:	90 93 50 03 	sts	0x0350, r25
   1106e:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
   11072:	80 91 4f 03 	lds	r24, 0x034F
   11076:	90 91 50 03 	lds	r25, 0x0350
   1107a:	8d 5a       	subi	r24, 0xAD	; 173
   1107c:	9c 4f       	sbci	r25, 0xFC	; 252
   1107e:	fc 01       	movw	r30, r24
   11080:	80 81       	ld	r24, Z
   11082:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
   11086:	80 91 4f 03 	lds	r24, 0x034F
   1108a:	90 91 50 03 	lds	r25, 0x0350
   1108e:	01 96       	adiw	r24, 0x01	; 1
   11090:	90 93 50 03 	sts	0x0350, r25
   11094:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
   11098:	80 91 4f 03 	lds	r24, 0x034F
   1109c:	90 91 50 03 	lds	r25, 0x0350
   110a0:	8d 5a       	subi	r24, 0xAD	; 173
   110a2:	9c 4f       	sbci	r25, 0xFC	; 252
   110a4:	fc 01       	movw	r30, r24
   110a6:	80 81       	ld	r24, Z
   110a8:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
   110ac:	cf c4       	rjmp	.+2462   	; 0x11a4c <travel_path+0x3f4a>
		}
		else if(master_path[node+1]=='3')
   110ae:	80 91 4f 03 	lds	r24, 0x034F
   110b2:	90 91 50 03 	lds	r25, 0x0350
   110b6:	01 96       	adiw	r24, 0x01	; 1
   110b8:	8d 5a       	subi	r24, 0xAD	; 173
   110ba:	9c 4f       	sbci	r25, 0xFC	; 252
   110bc:	fc 01       	movw	r30, r24
   110be:	80 81       	ld	r24, Z
   110c0:	83 33       	cpi	r24, 0x33	; 51
   110c2:	09 f0       	breq	.+2      	; 0x110c6 <travel_path+0x35c4>
   110c4:	fb c0       	rjmp	.+502    	; 0x112bc <travel_path+0x37ba>
		{
			stop();
   110c6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   110ca:	9e 01       	movw	r18, r28
   110cc:	27 57       	subi	r18, 0x77	; 119
   110ce:	3e 4f       	sbci	r19, 0xFE	; 254
   110d0:	80 e0       	ldi	r24, 0x00	; 0
   110d2:	90 e0       	ldi	r25, 0x00	; 0
   110d4:	a0 ea       	ldi	r26, 0xA0	; 160
   110d6:	b1 e4       	ldi	r27, 0x41	; 65
   110d8:	f9 01       	movw	r30, r18
   110da:	80 83       	st	Z, r24
   110dc:	91 83       	std	Z+1, r25	; 0x01
   110de:	a2 83       	std	Z+2, r26	; 0x02
   110e0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   110e2:	8e 01       	movw	r16, r28
   110e4:	03 57       	subi	r16, 0x73	; 115
   110e6:	1e 4f       	sbci	r17, 0xFE	; 254
   110e8:	ce 01       	movw	r24, r28
   110ea:	87 57       	subi	r24, 0x77	; 119
   110ec:	9e 4f       	sbci	r25, 0xFE	; 254
   110ee:	fc 01       	movw	r30, r24
   110f0:	60 81       	ld	r22, Z
   110f2:	71 81       	ldd	r23, Z+1	; 0x01
   110f4:	82 81       	ldd	r24, Z+2	; 0x02
   110f6:	93 81       	ldd	r25, Z+3	; 0x03
   110f8:	26 e6       	ldi	r18, 0x66	; 102
   110fa:	36 e6       	ldi	r19, 0x66	; 102
   110fc:	46 e6       	ldi	r20, 0x66	; 102
   110fe:	55 e4       	ldi	r21, 0x45	; 69
   11100:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11104:	dc 01       	movw	r26, r24
   11106:	cb 01       	movw	r24, r22
   11108:	f8 01       	movw	r30, r16
   1110a:	80 83       	st	Z, r24
   1110c:	91 83       	std	Z+1, r25	; 0x01
   1110e:	a2 83       	std	Z+2, r26	; 0x02
   11110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   11112:	ce 01       	movw	r24, r28
   11114:	83 57       	subi	r24, 0x73	; 115
   11116:	9e 4f       	sbci	r25, 0xFE	; 254
   11118:	11 e0       	ldi	r17, 0x01	; 1
   1111a:	fc 01       	movw	r30, r24
   1111c:	60 81       	ld	r22, Z
   1111e:	71 81       	ldd	r23, Z+1	; 0x01
   11120:	82 81       	ldd	r24, Z+2	; 0x02
   11122:	93 81       	ldd	r25, Z+3	; 0x03
   11124:	20 e0       	ldi	r18, 0x00	; 0
   11126:	30 e0       	ldi	r19, 0x00	; 0
   11128:	40 e8       	ldi	r20, 0x80	; 128
   1112a:	5f e3       	ldi	r21, 0x3F	; 63
   1112c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   11130:	88 23       	and	r24, r24
   11132:	0c f0       	brlt	.+2      	; 0x11136 <travel_path+0x3634>
   11134:	10 e0       	ldi	r17, 0x00	; 0
   11136:	11 23       	and	r17, r17
   11138:	49 f0       	breq	.+18     	; 0x1114c <travel_path+0x364a>
		__ticks = 1;
   1113a:	ce 01       	movw	r24, r28
   1113c:	8f 56       	subi	r24, 0x6F	; 111
   1113e:	9e 4f       	sbci	r25, 0xFE	; 254
   11140:	21 e0       	ldi	r18, 0x01	; 1
   11142:	30 e0       	ldi	r19, 0x00	; 0
   11144:	fc 01       	movw	r30, r24
   11146:	31 83       	std	Z+1, r19	; 0x01
   11148:	20 83       	st	Z, r18
   1114a:	74 c0       	rjmp	.+232    	; 0x11234 <travel_path+0x3732>
	else if (__tmp > 65535)
   1114c:	ce 01       	movw	r24, r28
   1114e:	83 57       	subi	r24, 0x73	; 115
   11150:	9e 4f       	sbci	r25, 0xFE	; 254
   11152:	11 e0       	ldi	r17, 0x01	; 1
   11154:	fc 01       	movw	r30, r24
   11156:	60 81       	ld	r22, Z
   11158:	71 81       	ldd	r23, Z+1	; 0x01
   1115a:	82 81       	ldd	r24, Z+2	; 0x02
   1115c:	93 81       	ldd	r25, Z+3	; 0x03
   1115e:	20 e0       	ldi	r18, 0x00	; 0
   11160:	3f ef       	ldi	r19, 0xFF	; 255
   11162:	4f e7       	ldi	r20, 0x7F	; 127
   11164:	57 e4       	ldi	r21, 0x47	; 71
   11166:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   1116a:	18 16       	cp	r1, r24
   1116c:	0c f0       	brlt	.+2      	; 0x11170 <travel_path+0x366e>
   1116e:	10 e0       	ldi	r17, 0x00	; 0
   11170:	11 23       	and	r17, r17
   11172:	09 f4       	brne	.+2      	; 0x11176 <travel_path+0x3674>
   11174:	4d c0       	rjmp	.+154    	; 0x11210 <travel_path+0x370e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   11176:	ce 01       	movw	r24, r28
   11178:	87 57       	subi	r24, 0x77	; 119
   1117a:	9e 4f       	sbci	r25, 0xFE	; 254
   1117c:	fc 01       	movw	r30, r24
   1117e:	60 81       	ld	r22, Z
   11180:	71 81       	ldd	r23, Z+1	; 0x01
   11182:	82 81       	ldd	r24, Z+2	; 0x02
   11184:	93 81       	ldd	r25, Z+3	; 0x03
   11186:	20 e0       	ldi	r18, 0x00	; 0
   11188:	30 e0       	ldi	r19, 0x00	; 0
   1118a:	40 e2       	ldi	r20, 0x20	; 32
   1118c:	51 e4       	ldi	r21, 0x41	; 65
   1118e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11192:	dc 01       	movw	r26, r24
   11194:	cb 01       	movw	r24, r22
   11196:	8e 01       	movw	r16, r28
   11198:	0f 56       	subi	r16, 0x6F	; 111
   1119a:	1e 4f       	sbci	r17, 0xFE	; 254
   1119c:	bc 01       	movw	r22, r24
   1119e:	cd 01       	movw	r24, r26
   111a0:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   111a4:	dc 01       	movw	r26, r24
   111a6:	cb 01       	movw	r24, r22
   111a8:	f8 01       	movw	r30, r16
   111aa:	91 83       	std	Z+1, r25	; 0x01
   111ac:	80 83       	st	Z, r24
   111ae:	27 c0       	rjmp	.+78     	; 0x111fe <travel_path+0x36fc>
   111b0:	ce 01       	movw	r24, r28
   111b2:	8d 56       	subi	r24, 0x6D	; 109
   111b4:	9e 4f       	sbci	r25, 0xFE	; 254
   111b6:	20 e7       	ldi	r18, 0x70	; 112
   111b8:	31 e0       	ldi	r19, 0x01	; 1
   111ba:	fc 01       	movw	r30, r24
   111bc:	31 83       	std	Z+1, r19	; 0x01
   111be:	20 83       	st	Z, r18
   111c0:	ce 01       	movw	r24, r28
   111c2:	8d 56       	subi	r24, 0x6D	; 109
   111c4:	9e 4f       	sbci	r25, 0xFE	; 254
   111c6:	fc 01       	movw	r30, r24
   111c8:	80 81       	ld	r24, Z
   111ca:	91 81       	ldd	r25, Z+1	; 0x01
   111cc:	8c 01       	movw	r16, r24
   111ce:	c8 01       	movw	r24, r16
   111d0:	01 97       	sbiw	r24, 0x01	; 1
   111d2:	f1 f7       	brne	.-4      	; 0x111d0 <travel_path+0x36ce>
   111d4:	8c 01       	movw	r16, r24
   111d6:	ce 01       	movw	r24, r28
   111d8:	8d 56       	subi	r24, 0x6D	; 109
   111da:	9e 4f       	sbci	r25, 0xFE	; 254
   111dc:	fc 01       	movw	r30, r24
   111de:	11 83       	std	Z+1, r17	; 0x01
   111e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   111e2:	ce 01       	movw	r24, r28
   111e4:	8f 56       	subi	r24, 0x6F	; 111
   111e6:	9e 4f       	sbci	r25, 0xFE	; 254
   111e8:	9e 01       	movw	r18, r28
   111ea:	2f 56       	subi	r18, 0x6F	; 111
   111ec:	3e 4f       	sbci	r19, 0xFE	; 254
   111ee:	f9 01       	movw	r30, r18
   111f0:	20 81       	ld	r18, Z
   111f2:	31 81       	ldd	r19, Z+1	; 0x01
   111f4:	21 50       	subi	r18, 0x01	; 1
   111f6:	30 40       	sbci	r19, 0x00	; 0
   111f8:	fc 01       	movw	r30, r24
   111fa:	31 83       	std	Z+1, r19	; 0x01
   111fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   111fe:	ce 01       	movw	r24, r28
   11200:	8f 56       	subi	r24, 0x6F	; 111
   11202:	9e 4f       	sbci	r25, 0xFE	; 254
   11204:	fc 01       	movw	r30, r24
   11206:	80 81       	ld	r24, Z
   11208:	91 81       	ldd	r25, Z+1	; 0x01
   1120a:	00 97       	sbiw	r24, 0x00	; 0
   1120c:	89 f6       	brne	.-94     	; 0x111b0 <travel_path+0x36ae>
   1120e:	2f c0       	rjmp	.+94     	; 0x1126e <travel_path+0x376c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   11210:	8e 01       	movw	r16, r28
   11212:	0f 56       	subi	r16, 0x6F	; 111
   11214:	1e 4f       	sbci	r17, 0xFE	; 254
   11216:	ce 01       	movw	r24, r28
   11218:	83 57       	subi	r24, 0x73	; 115
   1121a:	9e 4f       	sbci	r25, 0xFE	; 254
   1121c:	fc 01       	movw	r30, r24
   1121e:	60 81       	ld	r22, Z
   11220:	71 81       	ldd	r23, Z+1	; 0x01
   11222:	82 81       	ldd	r24, Z+2	; 0x02
   11224:	93 81       	ldd	r25, Z+3	; 0x03
   11226:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   1122a:	dc 01       	movw	r26, r24
   1122c:	cb 01       	movw	r24, r22
   1122e:	f8 01       	movw	r30, r16
   11230:	91 83       	std	Z+1, r25	; 0x01
   11232:	80 83       	st	Z, r24
   11234:	ce 01       	movw	r24, r28
   11236:	8b 56       	subi	r24, 0x6B	; 107
   11238:	9e 4f       	sbci	r25, 0xFE	; 254
   1123a:	9e 01       	movw	r18, r28
   1123c:	2f 56       	subi	r18, 0x6F	; 111
   1123e:	3e 4f       	sbci	r19, 0xFE	; 254
   11240:	f9 01       	movw	r30, r18
   11242:	20 81       	ld	r18, Z
   11244:	31 81       	ldd	r19, Z+1	; 0x01
   11246:	fc 01       	movw	r30, r24
   11248:	31 83       	std	Z+1, r19	; 0x01
   1124a:	20 83       	st	Z, r18
   1124c:	ce 01       	movw	r24, r28
   1124e:	8b 56       	subi	r24, 0x6B	; 107
   11250:	9e 4f       	sbci	r25, 0xFE	; 254
   11252:	fc 01       	movw	r30, r24
   11254:	80 81       	ld	r24, Z
   11256:	91 81       	ldd	r25, Z+1	; 0x01
   11258:	8c 01       	movw	r16, r24
   1125a:	c8 01       	movw	r24, r16
   1125c:	01 97       	sbiw	r24, 0x01	; 1
   1125e:	f1 f7       	brne	.-4      	; 0x1125c <travel_path+0x375a>
   11260:	8c 01       	movw	r16, r24
   11262:	ce 01       	movw	r24, r28
   11264:	8b 56       	subi	r24, 0x6B	; 107
   11266:	9e 4f       	sbci	r25, 0xFE	; 254
   11268:	fc 01       	movw	r30, r24
   1126a:	11 83       	std	Z+1, r17	; 0x01
   1126c:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
   1126e:	80 91 4f 03 	lds	r24, 0x034F
   11272:	90 91 50 03 	lds	r25, 0x0350
   11276:	01 96       	adiw	r24, 0x01	; 1
   11278:	90 93 50 03 	sts	0x0350, r25
   1127c:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
   11280:	80 91 4f 03 	lds	r24, 0x034F
   11284:	90 91 50 03 	lds	r25, 0x0350
   11288:	8d 5a       	subi	r24, 0xAD	; 173
   1128a:	9c 4f       	sbci	r25, 0xFC	; 252
   1128c:	fc 01       	movw	r30, r24
   1128e:	80 81       	ld	r24, Z
   11290:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
   11294:	80 91 4f 03 	lds	r24, 0x034F
   11298:	90 91 50 03 	lds	r25, 0x0350
   1129c:	01 96       	adiw	r24, 0x01	; 1
   1129e:	90 93 50 03 	sts	0x0350, r25
   112a2:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
   112a6:	80 91 4f 03 	lds	r24, 0x034F
   112aa:	90 91 50 03 	lds	r25, 0x0350
   112ae:	8d 5a       	subi	r24, 0xAD	; 173
   112b0:	9c 4f       	sbci	r25, 0xFC	; 252
   112b2:	fc 01       	movw	r30, r24
   112b4:	80 81       	ld	r24, Z
   112b6:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else
		correct_right3();
   112ba:	c8 c3       	rjmp	.+1936   	; 0x11a4c <travel_path+0x3f4a>
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else if(master_path[node+1]=='1')
   112bc:	80 91 4f 03 	lds	r24, 0x034F
   112c0:	90 91 50 03 	lds	r25, 0x0350
   112c4:	01 96       	adiw	r24, 0x01	; 1
   112c6:	8d 5a       	subi	r24, 0xAD	; 173
   112c8:	9c 4f       	sbci	r25, 0xFC	; 252
   112ca:	fc 01       	movw	r30, r24
   112cc:	80 81       	ld	r24, Z
   112ce:	81 33       	cpi	r24, 0x31	; 49
   112d0:	09 f0       	breq	.+2      	; 0x112d4 <travel_path+0x37d2>
   112d2:	cf c1       	rjmp	.+926    	; 0x11672 <travel_path+0x3b70>
		{
			stop();
   112d4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   112d8:	9e 01       	movw	r18, r28
   112da:	29 56       	subi	r18, 0x69	; 105
   112dc:	3e 4f       	sbci	r19, 0xFE	; 254
   112de:	80 e0       	ldi	r24, 0x00	; 0
   112e0:	90 e0       	ldi	r25, 0x00	; 0
   112e2:	a0 ea       	ldi	r26, 0xA0	; 160
   112e4:	b1 e4       	ldi	r27, 0x41	; 65
   112e6:	f9 01       	movw	r30, r18
   112e8:	80 83       	st	Z, r24
   112ea:	91 83       	std	Z+1, r25	; 0x01
   112ec:	a2 83       	std	Z+2, r26	; 0x02
   112ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   112f0:	8e 01       	movw	r16, r28
   112f2:	05 56       	subi	r16, 0x65	; 101
   112f4:	1e 4f       	sbci	r17, 0xFE	; 254
   112f6:	ce 01       	movw	r24, r28
   112f8:	89 56       	subi	r24, 0x69	; 105
   112fa:	9e 4f       	sbci	r25, 0xFE	; 254
   112fc:	fc 01       	movw	r30, r24
   112fe:	60 81       	ld	r22, Z
   11300:	71 81       	ldd	r23, Z+1	; 0x01
   11302:	82 81       	ldd	r24, Z+2	; 0x02
   11304:	93 81       	ldd	r25, Z+3	; 0x03
   11306:	26 e6       	ldi	r18, 0x66	; 102
   11308:	36 e6       	ldi	r19, 0x66	; 102
   1130a:	46 e6       	ldi	r20, 0x66	; 102
   1130c:	55 e4       	ldi	r21, 0x45	; 69
   1130e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11312:	dc 01       	movw	r26, r24
   11314:	cb 01       	movw	r24, r22
   11316:	f8 01       	movw	r30, r16
   11318:	80 83       	st	Z, r24
   1131a:	91 83       	std	Z+1, r25	; 0x01
   1131c:	a2 83       	std	Z+2, r26	; 0x02
   1131e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   11320:	ce 01       	movw	r24, r28
   11322:	85 56       	subi	r24, 0x65	; 101
   11324:	9e 4f       	sbci	r25, 0xFE	; 254
   11326:	11 e0       	ldi	r17, 0x01	; 1
   11328:	fc 01       	movw	r30, r24
   1132a:	60 81       	ld	r22, Z
   1132c:	71 81       	ldd	r23, Z+1	; 0x01
   1132e:	82 81       	ldd	r24, Z+2	; 0x02
   11330:	93 81       	ldd	r25, Z+3	; 0x03
   11332:	20 e0       	ldi	r18, 0x00	; 0
   11334:	30 e0       	ldi	r19, 0x00	; 0
   11336:	40 e8       	ldi	r20, 0x80	; 128
   11338:	5f e3       	ldi	r21, 0x3F	; 63
   1133a:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   1133e:	88 23       	and	r24, r24
   11340:	0c f0       	brlt	.+2      	; 0x11344 <travel_path+0x3842>
   11342:	10 e0       	ldi	r17, 0x00	; 0
   11344:	11 23       	and	r17, r17
   11346:	49 f0       	breq	.+18     	; 0x1135a <travel_path+0x3858>
		__ticks = 1;
   11348:	ce 01       	movw	r24, r28
   1134a:	81 56       	subi	r24, 0x61	; 97
   1134c:	9e 4f       	sbci	r25, 0xFE	; 254
   1134e:	21 e0       	ldi	r18, 0x01	; 1
   11350:	30 e0       	ldi	r19, 0x00	; 0
   11352:	fc 01       	movw	r30, r24
   11354:	31 83       	std	Z+1, r19	; 0x01
   11356:	20 83       	st	Z, r18
   11358:	74 c0       	rjmp	.+232    	; 0x11442 <travel_path+0x3940>
	else if (__tmp > 65535)
   1135a:	ce 01       	movw	r24, r28
   1135c:	85 56       	subi	r24, 0x65	; 101
   1135e:	9e 4f       	sbci	r25, 0xFE	; 254
   11360:	11 e0       	ldi	r17, 0x01	; 1
   11362:	fc 01       	movw	r30, r24
   11364:	60 81       	ld	r22, Z
   11366:	71 81       	ldd	r23, Z+1	; 0x01
   11368:	82 81       	ldd	r24, Z+2	; 0x02
   1136a:	93 81       	ldd	r25, Z+3	; 0x03
   1136c:	20 e0       	ldi	r18, 0x00	; 0
   1136e:	3f ef       	ldi	r19, 0xFF	; 255
   11370:	4f e7       	ldi	r20, 0x7F	; 127
   11372:	57 e4       	ldi	r21, 0x47	; 71
   11374:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   11378:	18 16       	cp	r1, r24
   1137a:	0c f0       	brlt	.+2      	; 0x1137e <travel_path+0x387c>
   1137c:	10 e0       	ldi	r17, 0x00	; 0
   1137e:	11 23       	and	r17, r17
   11380:	09 f4       	brne	.+2      	; 0x11384 <travel_path+0x3882>
   11382:	4d c0       	rjmp	.+154    	; 0x1141e <travel_path+0x391c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   11384:	ce 01       	movw	r24, r28
   11386:	89 56       	subi	r24, 0x69	; 105
   11388:	9e 4f       	sbci	r25, 0xFE	; 254
   1138a:	fc 01       	movw	r30, r24
   1138c:	60 81       	ld	r22, Z
   1138e:	71 81       	ldd	r23, Z+1	; 0x01
   11390:	82 81       	ldd	r24, Z+2	; 0x02
   11392:	93 81       	ldd	r25, Z+3	; 0x03
   11394:	20 e0       	ldi	r18, 0x00	; 0
   11396:	30 e0       	ldi	r19, 0x00	; 0
   11398:	40 e2       	ldi	r20, 0x20	; 32
   1139a:	51 e4       	ldi	r21, 0x41	; 65
   1139c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   113a0:	dc 01       	movw	r26, r24
   113a2:	cb 01       	movw	r24, r22
   113a4:	8e 01       	movw	r16, r28
   113a6:	01 56       	subi	r16, 0x61	; 97
   113a8:	1e 4f       	sbci	r17, 0xFE	; 254
   113aa:	bc 01       	movw	r22, r24
   113ac:	cd 01       	movw	r24, r26
   113ae:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   113b2:	dc 01       	movw	r26, r24
   113b4:	cb 01       	movw	r24, r22
   113b6:	f8 01       	movw	r30, r16
   113b8:	91 83       	std	Z+1, r25	; 0x01
   113ba:	80 83       	st	Z, r24
   113bc:	27 c0       	rjmp	.+78     	; 0x1140c <travel_path+0x390a>
   113be:	ce 01       	movw	r24, r28
   113c0:	8f 55       	subi	r24, 0x5F	; 95
   113c2:	9e 4f       	sbci	r25, 0xFE	; 254
   113c4:	20 e7       	ldi	r18, 0x70	; 112
   113c6:	31 e0       	ldi	r19, 0x01	; 1
   113c8:	fc 01       	movw	r30, r24
   113ca:	31 83       	std	Z+1, r19	; 0x01
   113cc:	20 83       	st	Z, r18
   113ce:	ce 01       	movw	r24, r28
   113d0:	8f 55       	subi	r24, 0x5F	; 95
   113d2:	9e 4f       	sbci	r25, 0xFE	; 254
   113d4:	fc 01       	movw	r30, r24
   113d6:	80 81       	ld	r24, Z
   113d8:	91 81       	ldd	r25, Z+1	; 0x01
   113da:	8c 01       	movw	r16, r24
   113dc:	c8 01       	movw	r24, r16
   113de:	01 97       	sbiw	r24, 0x01	; 1
   113e0:	f1 f7       	brne	.-4      	; 0x113de <travel_path+0x38dc>
   113e2:	8c 01       	movw	r16, r24
   113e4:	ce 01       	movw	r24, r28
   113e6:	8f 55       	subi	r24, 0x5F	; 95
   113e8:	9e 4f       	sbci	r25, 0xFE	; 254
   113ea:	fc 01       	movw	r30, r24
   113ec:	11 83       	std	Z+1, r17	; 0x01
   113ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   113f0:	ce 01       	movw	r24, r28
   113f2:	81 56       	subi	r24, 0x61	; 97
   113f4:	9e 4f       	sbci	r25, 0xFE	; 254
   113f6:	9e 01       	movw	r18, r28
   113f8:	21 56       	subi	r18, 0x61	; 97
   113fa:	3e 4f       	sbci	r19, 0xFE	; 254
   113fc:	f9 01       	movw	r30, r18
   113fe:	20 81       	ld	r18, Z
   11400:	31 81       	ldd	r19, Z+1	; 0x01
   11402:	21 50       	subi	r18, 0x01	; 1
   11404:	30 40       	sbci	r19, 0x00	; 0
   11406:	fc 01       	movw	r30, r24
   11408:	31 83       	std	Z+1, r19	; 0x01
   1140a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1140c:	ce 01       	movw	r24, r28
   1140e:	81 56       	subi	r24, 0x61	; 97
   11410:	9e 4f       	sbci	r25, 0xFE	; 254
   11412:	fc 01       	movw	r30, r24
   11414:	80 81       	ld	r24, Z
   11416:	91 81       	ldd	r25, Z+1	; 0x01
   11418:	00 97       	sbiw	r24, 0x00	; 0
   1141a:	89 f6       	brne	.-94     	; 0x113be <travel_path+0x38bc>
   1141c:	2f c0       	rjmp	.+94     	; 0x1147c <travel_path+0x397a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1141e:	8e 01       	movw	r16, r28
   11420:	01 56       	subi	r16, 0x61	; 97
   11422:	1e 4f       	sbci	r17, 0xFE	; 254
   11424:	ce 01       	movw	r24, r28
   11426:	85 56       	subi	r24, 0x65	; 101
   11428:	9e 4f       	sbci	r25, 0xFE	; 254
   1142a:	fc 01       	movw	r30, r24
   1142c:	60 81       	ld	r22, Z
   1142e:	71 81       	ldd	r23, Z+1	; 0x01
   11430:	82 81       	ldd	r24, Z+2	; 0x02
   11432:	93 81       	ldd	r25, Z+3	; 0x03
   11434:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11438:	dc 01       	movw	r26, r24
   1143a:	cb 01       	movw	r24, r22
   1143c:	f8 01       	movw	r30, r16
   1143e:	91 83       	std	Z+1, r25	; 0x01
   11440:	80 83       	st	Z, r24
   11442:	ce 01       	movw	r24, r28
   11444:	8d 55       	subi	r24, 0x5D	; 93
   11446:	9e 4f       	sbci	r25, 0xFE	; 254
   11448:	9e 01       	movw	r18, r28
   1144a:	21 56       	subi	r18, 0x61	; 97
   1144c:	3e 4f       	sbci	r19, 0xFE	; 254
   1144e:	f9 01       	movw	r30, r18
   11450:	20 81       	ld	r18, Z
   11452:	31 81       	ldd	r19, Z+1	; 0x01
   11454:	fc 01       	movw	r30, r24
   11456:	31 83       	std	Z+1, r19	; 0x01
   11458:	20 83       	st	Z, r18
   1145a:	ce 01       	movw	r24, r28
   1145c:	8d 55       	subi	r24, 0x5D	; 93
   1145e:	9e 4f       	sbci	r25, 0xFE	; 254
   11460:	fc 01       	movw	r30, r24
   11462:	80 81       	ld	r24, Z
   11464:	91 81       	ldd	r25, Z+1	; 0x01
   11466:	8c 01       	movw	r16, r24
   11468:	c8 01       	movw	r24, r16
   1146a:	01 97       	sbiw	r24, 0x01	; 1
   1146c:	f1 f7       	brne	.-4      	; 0x1146a <travel_path+0x3968>
   1146e:	8c 01       	movw	r16, r24
   11470:	ce 01       	movw	r24, r28
   11472:	8d 55       	subi	r24, 0x5D	; 93
   11474:	9e 4f       	sbci	r25, 0xFE	; 254
   11476:	fc 01       	movw	r30, r24
   11478:	11 83       	std	Z+1, r17	; 0x01
   1147a:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_left3();
   1147c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <correct_left3>
   11480:	9e 01       	movw	r18, r28
   11482:	2b 55       	subi	r18, 0x5B	; 91
   11484:	3e 4f       	sbci	r19, 0xFE	; 254
   11486:	80 e0       	ldi	r24, 0x00	; 0
   11488:	90 e0       	ldi	r25, 0x00	; 0
   1148a:	a0 ea       	ldi	r26, 0xA0	; 160
   1148c:	b1 e4       	ldi	r27, 0x41	; 65
   1148e:	f9 01       	movw	r30, r18
   11490:	80 83       	st	Z, r24
   11492:	91 83       	std	Z+1, r25	; 0x01
   11494:	a2 83       	std	Z+2, r26	; 0x02
   11496:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   11498:	8e 01       	movw	r16, r28
   1149a:	07 55       	subi	r16, 0x57	; 87
   1149c:	1e 4f       	sbci	r17, 0xFE	; 254
   1149e:	ce 01       	movw	r24, r28
   114a0:	8b 55       	subi	r24, 0x5B	; 91
   114a2:	9e 4f       	sbci	r25, 0xFE	; 254
   114a4:	fc 01       	movw	r30, r24
   114a6:	60 81       	ld	r22, Z
   114a8:	71 81       	ldd	r23, Z+1	; 0x01
   114aa:	82 81       	ldd	r24, Z+2	; 0x02
   114ac:	93 81       	ldd	r25, Z+3	; 0x03
   114ae:	26 e6       	ldi	r18, 0x66	; 102
   114b0:	36 e6       	ldi	r19, 0x66	; 102
   114b2:	46 e6       	ldi	r20, 0x66	; 102
   114b4:	55 e4       	ldi	r21, 0x45	; 69
   114b6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   114ba:	dc 01       	movw	r26, r24
   114bc:	cb 01       	movw	r24, r22
   114be:	f8 01       	movw	r30, r16
   114c0:	80 83       	st	Z, r24
   114c2:	91 83       	std	Z+1, r25	; 0x01
   114c4:	a2 83       	std	Z+2, r26	; 0x02
   114c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   114c8:	ce 01       	movw	r24, r28
   114ca:	87 55       	subi	r24, 0x57	; 87
   114cc:	9e 4f       	sbci	r25, 0xFE	; 254
   114ce:	11 e0       	ldi	r17, 0x01	; 1
   114d0:	fc 01       	movw	r30, r24
   114d2:	60 81       	ld	r22, Z
   114d4:	71 81       	ldd	r23, Z+1	; 0x01
   114d6:	82 81       	ldd	r24, Z+2	; 0x02
   114d8:	93 81       	ldd	r25, Z+3	; 0x03
   114da:	20 e0       	ldi	r18, 0x00	; 0
   114dc:	30 e0       	ldi	r19, 0x00	; 0
   114de:	40 e8       	ldi	r20, 0x80	; 128
   114e0:	5f e3       	ldi	r21, 0x3F	; 63
   114e2:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   114e6:	88 23       	and	r24, r24
   114e8:	0c f0       	brlt	.+2      	; 0x114ec <travel_path+0x39ea>
   114ea:	10 e0       	ldi	r17, 0x00	; 0
   114ec:	11 23       	and	r17, r17
   114ee:	49 f0       	breq	.+18     	; 0x11502 <travel_path+0x3a00>
		__ticks = 1;
   114f0:	ce 01       	movw	r24, r28
   114f2:	83 55       	subi	r24, 0x53	; 83
   114f4:	9e 4f       	sbci	r25, 0xFE	; 254
   114f6:	21 e0       	ldi	r18, 0x01	; 1
   114f8:	30 e0       	ldi	r19, 0x00	; 0
   114fa:	fc 01       	movw	r30, r24
   114fc:	31 83       	std	Z+1, r19	; 0x01
   114fe:	20 83       	st	Z, r18
   11500:	74 c0       	rjmp	.+232    	; 0x115ea <travel_path+0x3ae8>
	else if (__tmp > 65535)
   11502:	ce 01       	movw	r24, r28
   11504:	87 55       	subi	r24, 0x57	; 87
   11506:	9e 4f       	sbci	r25, 0xFE	; 254
   11508:	11 e0       	ldi	r17, 0x01	; 1
   1150a:	fc 01       	movw	r30, r24
   1150c:	60 81       	ld	r22, Z
   1150e:	71 81       	ldd	r23, Z+1	; 0x01
   11510:	82 81       	ldd	r24, Z+2	; 0x02
   11512:	93 81       	ldd	r25, Z+3	; 0x03
   11514:	20 e0       	ldi	r18, 0x00	; 0
   11516:	3f ef       	ldi	r19, 0xFF	; 255
   11518:	4f e7       	ldi	r20, 0x7F	; 127
   1151a:	57 e4       	ldi	r21, 0x47	; 71
   1151c:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   11520:	18 16       	cp	r1, r24
   11522:	0c f0       	brlt	.+2      	; 0x11526 <travel_path+0x3a24>
   11524:	10 e0       	ldi	r17, 0x00	; 0
   11526:	11 23       	and	r17, r17
   11528:	09 f4       	brne	.+2      	; 0x1152c <travel_path+0x3a2a>
   1152a:	4d c0       	rjmp	.+154    	; 0x115c6 <travel_path+0x3ac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   1152c:	ce 01       	movw	r24, r28
   1152e:	8b 55       	subi	r24, 0x5B	; 91
   11530:	9e 4f       	sbci	r25, 0xFE	; 254
   11532:	fc 01       	movw	r30, r24
   11534:	60 81       	ld	r22, Z
   11536:	71 81       	ldd	r23, Z+1	; 0x01
   11538:	82 81       	ldd	r24, Z+2	; 0x02
   1153a:	93 81       	ldd	r25, Z+3	; 0x03
   1153c:	20 e0       	ldi	r18, 0x00	; 0
   1153e:	30 e0       	ldi	r19, 0x00	; 0
   11540:	40 e2       	ldi	r20, 0x20	; 32
   11542:	51 e4       	ldi	r21, 0x41	; 65
   11544:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11548:	dc 01       	movw	r26, r24
   1154a:	cb 01       	movw	r24, r22
   1154c:	8e 01       	movw	r16, r28
   1154e:	03 55       	subi	r16, 0x53	; 83
   11550:	1e 4f       	sbci	r17, 0xFE	; 254
   11552:	bc 01       	movw	r22, r24
   11554:	cd 01       	movw	r24, r26
   11556:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   1155a:	dc 01       	movw	r26, r24
   1155c:	cb 01       	movw	r24, r22
   1155e:	f8 01       	movw	r30, r16
   11560:	91 83       	std	Z+1, r25	; 0x01
   11562:	80 83       	st	Z, r24
   11564:	27 c0       	rjmp	.+78     	; 0x115b4 <travel_path+0x3ab2>
   11566:	ce 01       	movw	r24, r28
   11568:	81 55       	subi	r24, 0x51	; 81
   1156a:	9e 4f       	sbci	r25, 0xFE	; 254
   1156c:	20 e7       	ldi	r18, 0x70	; 112
   1156e:	31 e0       	ldi	r19, 0x01	; 1
   11570:	fc 01       	movw	r30, r24
   11572:	31 83       	std	Z+1, r19	; 0x01
   11574:	20 83       	st	Z, r18
   11576:	ce 01       	movw	r24, r28
   11578:	81 55       	subi	r24, 0x51	; 81
   1157a:	9e 4f       	sbci	r25, 0xFE	; 254
   1157c:	fc 01       	movw	r30, r24
   1157e:	80 81       	ld	r24, Z
   11580:	91 81       	ldd	r25, Z+1	; 0x01
   11582:	8c 01       	movw	r16, r24
   11584:	c8 01       	movw	r24, r16
   11586:	01 97       	sbiw	r24, 0x01	; 1
   11588:	f1 f7       	brne	.-4      	; 0x11586 <travel_path+0x3a84>
   1158a:	8c 01       	movw	r16, r24
   1158c:	ce 01       	movw	r24, r28
   1158e:	81 55       	subi	r24, 0x51	; 81
   11590:	9e 4f       	sbci	r25, 0xFE	; 254
   11592:	fc 01       	movw	r30, r24
   11594:	11 83       	std	Z+1, r17	; 0x01
   11596:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   11598:	ce 01       	movw	r24, r28
   1159a:	83 55       	subi	r24, 0x53	; 83
   1159c:	9e 4f       	sbci	r25, 0xFE	; 254
   1159e:	9e 01       	movw	r18, r28
   115a0:	23 55       	subi	r18, 0x53	; 83
   115a2:	3e 4f       	sbci	r19, 0xFE	; 254
   115a4:	f9 01       	movw	r30, r18
   115a6:	20 81       	ld	r18, Z
   115a8:	31 81       	ldd	r19, Z+1	; 0x01
   115aa:	21 50       	subi	r18, 0x01	; 1
   115ac:	30 40       	sbci	r19, 0x00	; 0
   115ae:	fc 01       	movw	r30, r24
   115b0:	31 83       	std	Z+1, r19	; 0x01
   115b2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   115b4:	ce 01       	movw	r24, r28
   115b6:	83 55       	subi	r24, 0x53	; 83
   115b8:	9e 4f       	sbci	r25, 0xFE	; 254
   115ba:	fc 01       	movw	r30, r24
   115bc:	80 81       	ld	r24, Z
   115be:	91 81       	ldd	r25, Z+1	; 0x01
   115c0:	00 97       	sbiw	r24, 0x00	; 0
   115c2:	89 f6       	brne	.-94     	; 0x11566 <travel_path+0x3a64>
   115c4:	2f c0       	rjmp	.+94     	; 0x11624 <travel_path+0x3b22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   115c6:	8e 01       	movw	r16, r28
   115c8:	03 55       	subi	r16, 0x53	; 83
   115ca:	1e 4f       	sbci	r17, 0xFE	; 254
   115cc:	ce 01       	movw	r24, r28
   115ce:	87 55       	subi	r24, 0x57	; 87
   115d0:	9e 4f       	sbci	r25, 0xFE	; 254
   115d2:	fc 01       	movw	r30, r24
   115d4:	60 81       	ld	r22, Z
   115d6:	71 81       	ldd	r23, Z+1	; 0x01
   115d8:	82 81       	ldd	r24, Z+2	; 0x02
   115da:	93 81       	ldd	r25, Z+3	; 0x03
   115dc:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   115e0:	dc 01       	movw	r26, r24
   115e2:	cb 01       	movw	r24, r22
   115e4:	f8 01       	movw	r30, r16
   115e6:	91 83       	std	Z+1, r25	; 0x01
   115e8:	80 83       	st	Z, r24
   115ea:	ce 01       	movw	r24, r28
   115ec:	8f 54       	subi	r24, 0x4F	; 79
   115ee:	9e 4f       	sbci	r25, 0xFE	; 254
   115f0:	9e 01       	movw	r18, r28
   115f2:	23 55       	subi	r18, 0x53	; 83
   115f4:	3e 4f       	sbci	r19, 0xFE	; 254
   115f6:	f9 01       	movw	r30, r18
   115f8:	20 81       	ld	r18, Z
   115fa:	31 81       	ldd	r19, Z+1	; 0x01
   115fc:	fc 01       	movw	r30, r24
   115fe:	31 83       	std	Z+1, r19	; 0x01
   11600:	20 83       	st	Z, r18
   11602:	ce 01       	movw	r24, r28
   11604:	8f 54       	subi	r24, 0x4F	; 79
   11606:	9e 4f       	sbci	r25, 0xFE	; 254
   11608:	fc 01       	movw	r30, r24
   1160a:	80 81       	ld	r24, Z
   1160c:	91 81       	ldd	r25, Z+1	; 0x01
   1160e:	8c 01       	movw	r16, r24
   11610:	c8 01       	movw	r24, r16
   11612:	01 97       	sbiw	r24, 0x01	; 1
   11614:	f1 f7       	brne	.-4      	; 0x11612 <travel_path+0x3b10>
   11616:	8c 01       	movw	r16, r24
   11618:	ce 01       	movw	r24, r28
   1161a:	8f 54       	subi	r24, 0x4F	; 79
   1161c:	9e 4f       	sbci	r25, 0xFE	; 254
   1161e:	fc 01       	movw	r30, r24
   11620:	11 83       	std	Z+1, r17	; 0x01
   11622:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
   11624:	80 91 4f 03 	lds	r24, 0x034F
   11628:	90 91 50 03 	lds	r25, 0x0350
   1162c:	01 96       	adiw	r24, 0x01	; 1
   1162e:	90 93 50 03 	sts	0x0350, r25
   11632:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
   11636:	80 91 4f 03 	lds	r24, 0x034F
   1163a:	90 91 50 03 	lds	r25, 0x0350
   1163e:	8d 5a       	subi	r24, 0xAD	; 173
   11640:	9c 4f       	sbci	r25, 0xFC	; 252
   11642:	fc 01       	movw	r30, r24
   11644:	80 81       	ld	r24, Z
   11646:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
   1164a:	80 91 4f 03 	lds	r24, 0x034F
   1164e:	90 91 50 03 	lds	r25, 0x0350
   11652:	01 96       	adiw	r24, 0x01	; 1
   11654:	90 93 50 03 	sts	0x0350, r25
   11658:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
   1165c:	80 91 4f 03 	lds	r24, 0x034F
   11660:	90 91 50 03 	lds	r25, 0x0350
   11664:	8d 5a       	subi	r24, 0xAD	; 173
   11666:	9c 4f       	sbci	r25, 0xFC	; 252
   11668:	fc 01       	movw	r30, r24
   1166a:	80 81       	ld	r24, Z
   1166c:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else
		correct_right3();
   11670:	ed c1       	rjmp	.+986    	; 0x11a4c <travel_path+0x3f4a>
			node++;
			pick_drop(master_path[node]);
			node++;
			travel_path(master_path[node]);
		}
		else if(master_path[node+1]=='2')
   11672:	80 91 4f 03 	lds	r24, 0x034F
   11676:	90 91 50 03 	lds	r25, 0x0350
   1167a:	01 96       	adiw	r24, 0x01	; 1
   1167c:	8d 5a       	subi	r24, 0xAD	; 173
   1167e:	9c 4f       	sbci	r25, 0xFC	; 252
   11680:	fc 01       	movw	r30, r24
   11682:	80 81       	ld	r24, Z
   11684:	82 33       	cpi	r24, 0x32	; 50
   11686:	09 f0       	breq	.+2      	; 0x1168a <travel_path+0x3b88>
   11688:	cf c1       	rjmp	.+926    	; 0x11a28 <travel_path+0x3f26>
		{
			stop();
   1168a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
   1168e:	9e 01       	movw	r18, r28
   11690:	2d 54       	subi	r18, 0x4D	; 77
   11692:	3e 4f       	sbci	r19, 0xFE	; 254
   11694:	80 e0       	ldi	r24, 0x00	; 0
   11696:	90 e0       	ldi	r25, 0x00	; 0
   11698:	a0 ea       	ldi	r26, 0xA0	; 160
   1169a:	b1 e4       	ldi	r27, 0x41	; 65
   1169c:	f9 01       	movw	r30, r18
   1169e:	80 83       	st	Z, r24
   116a0:	91 83       	std	Z+1, r25	; 0x01
   116a2:	a2 83       	std	Z+2, r26	; 0x02
   116a4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   116a6:	8e 01       	movw	r16, r28
   116a8:	09 54       	subi	r16, 0x49	; 73
   116aa:	1e 4f       	sbci	r17, 0xFE	; 254
   116ac:	ce 01       	movw	r24, r28
   116ae:	8d 54       	subi	r24, 0x4D	; 77
   116b0:	9e 4f       	sbci	r25, 0xFE	; 254
   116b2:	fc 01       	movw	r30, r24
   116b4:	60 81       	ld	r22, Z
   116b6:	71 81       	ldd	r23, Z+1	; 0x01
   116b8:	82 81       	ldd	r24, Z+2	; 0x02
   116ba:	93 81       	ldd	r25, Z+3	; 0x03
   116bc:	26 e6       	ldi	r18, 0x66	; 102
   116be:	36 e6       	ldi	r19, 0x66	; 102
   116c0:	46 e6       	ldi	r20, 0x66	; 102
   116c2:	55 e4       	ldi	r21, 0x45	; 69
   116c4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   116c8:	dc 01       	movw	r26, r24
   116ca:	cb 01       	movw	r24, r22
   116cc:	f8 01       	movw	r30, r16
   116ce:	80 83       	st	Z, r24
   116d0:	91 83       	std	Z+1, r25	; 0x01
   116d2:	a2 83       	std	Z+2, r26	; 0x02
   116d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   116d6:	ce 01       	movw	r24, r28
   116d8:	89 54       	subi	r24, 0x49	; 73
   116da:	9e 4f       	sbci	r25, 0xFE	; 254
   116dc:	11 e0       	ldi	r17, 0x01	; 1
   116de:	fc 01       	movw	r30, r24
   116e0:	60 81       	ld	r22, Z
   116e2:	71 81       	ldd	r23, Z+1	; 0x01
   116e4:	82 81       	ldd	r24, Z+2	; 0x02
   116e6:	93 81       	ldd	r25, Z+3	; 0x03
   116e8:	20 e0       	ldi	r18, 0x00	; 0
   116ea:	30 e0       	ldi	r19, 0x00	; 0
   116ec:	40 e8       	ldi	r20, 0x80	; 128
   116ee:	5f e3       	ldi	r21, 0x3F	; 63
   116f0:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   116f4:	88 23       	and	r24, r24
   116f6:	0c f0       	brlt	.+2      	; 0x116fa <travel_path+0x3bf8>
   116f8:	10 e0       	ldi	r17, 0x00	; 0
   116fa:	11 23       	and	r17, r17
   116fc:	49 f0       	breq	.+18     	; 0x11710 <travel_path+0x3c0e>
		__ticks = 1;
   116fe:	ce 01       	movw	r24, r28
   11700:	85 54       	subi	r24, 0x45	; 69
   11702:	9e 4f       	sbci	r25, 0xFE	; 254
   11704:	21 e0       	ldi	r18, 0x01	; 1
   11706:	30 e0       	ldi	r19, 0x00	; 0
   11708:	fc 01       	movw	r30, r24
   1170a:	31 83       	std	Z+1, r19	; 0x01
   1170c:	20 83       	st	Z, r18
   1170e:	74 c0       	rjmp	.+232    	; 0x117f8 <travel_path+0x3cf6>
	else if (__tmp > 65535)
   11710:	ce 01       	movw	r24, r28
   11712:	89 54       	subi	r24, 0x49	; 73
   11714:	9e 4f       	sbci	r25, 0xFE	; 254
   11716:	11 e0       	ldi	r17, 0x01	; 1
   11718:	fc 01       	movw	r30, r24
   1171a:	60 81       	ld	r22, Z
   1171c:	71 81       	ldd	r23, Z+1	; 0x01
   1171e:	82 81       	ldd	r24, Z+2	; 0x02
   11720:	93 81       	ldd	r25, Z+3	; 0x03
   11722:	20 e0       	ldi	r18, 0x00	; 0
   11724:	3f ef       	ldi	r19, 0xFF	; 255
   11726:	4f e7       	ldi	r20, 0x7F	; 127
   11728:	57 e4       	ldi	r21, 0x47	; 71
   1172a:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   1172e:	18 16       	cp	r1, r24
   11730:	0c f0       	brlt	.+2      	; 0x11734 <travel_path+0x3c32>
   11732:	10 e0       	ldi	r17, 0x00	; 0
   11734:	11 23       	and	r17, r17
   11736:	09 f4       	brne	.+2      	; 0x1173a <travel_path+0x3c38>
   11738:	4d c0       	rjmp	.+154    	; 0x117d4 <travel_path+0x3cd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   1173a:	ce 01       	movw	r24, r28
   1173c:	8d 54       	subi	r24, 0x4D	; 77
   1173e:	9e 4f       	sbci	r25, 0xFE	; 254
   11740:	fc 01       	movw	r30, r24
   11742:	60 81       	ld	r22, Z
   11744:	71 81       	ldd	r23, Z+1	; 0x01
   11746:	82 81       	ldd	r24, Z+2	; 0x02
   11748:	93 81       	ldd	r25, Z+3	; 0x03
   1174a:	20 e0       	ldi	r18, 0x00	; 0
   1174c:	30 e0       	ldi	r19, 0x00	; 0
   1174e:	40 e2       	ldi	r20, 0x20	; 32
   11750:	51 e4       	ldi	r21, 0x41	; 65
   11752:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11756:	dc 01       	movw	r26, r24
   11758:	cb 01       	movw	r24, r22
   1175a:	8e 01       	movw	r16, r28
   1175c:	05 54       	subi	r16, 0x45	; 69
   1175e:	1e 4f       	sbci	r17, 0xFE	; 254
   11760:	bc 01       	movw	r22, r24
   11762:	cd 01       	movw	r24, r26
   11764:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11768:	dc 01       	movw	r26, r24
   1176a:	cb 01       	movw	r24, r22
   1176c:	f8 01       	movw	r30, r16
   1176e:	91 83       	std	Z+1, r25	; 0x01
   11770:	80 83       	st	Z, r24
   11772:	27 c0       	rjmp	.+78     	; 0x117c2 <travel_path+0x3cc0>
   11774:	ce 01       	movw	r24, r28
   11776:	83 54       	subi	r24, 0x43	; 67
   11778:	9e 4f       	sbci	r25, 0xFE	; 254
   1177a:	20 e7       	ldi	r18, 0x70	; 112
   1177c:	31 e0       	ldi	r19, 0x01	; 1
   1177e:	fc 01       	movw	r30, r24
   11780:	31 83       	std	Z+1, r19	; 0x01
   11782:	20 83       	st	Z, r18
   11784:	ce 01       	movw	r24, r28
   11786:	83 54       	subi	r24, 0x43	; 67
   11788:	9e 4f       	sbci	r25, 0xFE	; 254
   1178a:	fc 01       	movw	r30, r24
   1178c:	80 81       	ld	r24, Z
   1178e:	91 81       	ldd	r25, Z+1	; 0x01
   11790:	8c 01       	movw	r16, r24
   11792:	c8 01       	movw	r24, r16
   11794:	01 97       	sbiw	r24, 0x01	; 1
   11796:	f1 f7       	brne	.-4      	; 0x11794 <travel_path+0x3c92>
   11798:	8c 01       	movw	r16, r24
   1179a:	ce 01       	movw	r24, r28
   1179c:	83 54       	subi	r24, 0x43	; 67
   1179e:	9e 4f       	sbci	r25, 0xFE	; 254
   117a0:	fc 01       	movw	r30, r24
   117a2:	11 83       	std	Z+1, r17	; 0x01
   117a4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   117a6:	ce 01       	movw	r24, r28
   117a8:	85 54       	subi	r24, 0x45	; 69
   117aa:	9e 4f       	sbci	r25, 0xFE	; 254
   117ac:	9e 01       	movw	r18, r28
   117ae:	25 54       	subi	r18, 0x45	; 69
   117b0:	3e 4f       	sbci	r19, 0xFE	; 254
   117b2:	f9 01       	movw	r30, r18
   117b4:	20 81       	ld	r18, Z
   117b6:	31 81       	ldd	r19, Z+1	; 0x01
   117b8:	21 50       	subi	r18, 0x01	; 1
   117ba:	30 40       	sbci	r19, 0x00	; 0
   117bc:	fc 01       	movw	r30, r24
   117be:	31 83       	std	Z+1, r19	; 0x01
   117c0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   117c2:	ce 01       	movw	r24, r28
   117c4:	85 54       	subi	r24, 0x45	; 69
   117c6:	9e 4f       	sbci	r25, 0xFE	; 254
   117c8:	fc 01       	movw	r30, r24
   117ca:	80 81       	ld	r24, Z
   117cc:	91 81       	ldd	r25, Z+1	; 0x01
   117ce:	00 97       	sbiw	r24, 0x00	; 0
   117d0:	89 f6       	brne	.-94     	; 0x11774 <travel_path+0x3c72>
   117d2:	2f c0       	rjmp	.+94     	; 0x11832 <travel_path+0x3d30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   117d4:	8e 01       	movw	r16, r28
   117d6:	05 54       	subi	r16, 0x45	; 69
   117d8:	1e 4f       	sbci	r17, 0xFE	; 254
   117da:	ce 01       	movw	r24, r28
   117dc:	89 54       	subi	r24, 0x49	; 73
   117de:	9e 4f       	sbci	r25, 0xFE	; 254
   117e0:	fc 01       	movw	r30, r24
   117e2:	60 81       	ld	r22, Z
   117e4:	71 81       	ldd	r23, Z+1	; 0x01
   117e6:	82 81       	ldd	r24, Z+2	; 0x02
   117e8:	93 81       	ldd	r25, Z+3	; 0x03
   117ea:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   117ee:	dc 01       	movw	r26, r24
   117f0:	cb 01       	movw	r24, r22
   117f2:	f8 01       	movw	r30, r16
   117f4:	91 83       	std	Z+1, r25	; 0x01
   117f6:	80 83       	st	Z, r24
   117f8:	ce 01       	movw	r24, r28
   117fa:	81 54       	subi	r24, 0x41	; 65
   117fc:	9e 4f       	sbci	r25, 0xFE	; 254
   117fe:	9e 01       	movw	r18, r28
   11800:	25 54       	subi	r18, 0x45	; 69
   11802:	3e 4f       	sbci	r19, 0xFE	; 254
   11804:	f9 01       	movw	r30, r18
   11806:	20 81       	ld	r18, Z
   11808:	31 81       	ldd	r19, Z+1	; 0x01
   1180a:	fc 01       	movw	r30, r24
   1180c:	31 83       	std	Z+1, r19	; 0x01
   1180e:	20 83       	st	Z, r18
   11810:	ce 01       	movw	r24, r28
   11812:	81 54       	subi	r24, 0x41	; 65
   11814:	9e 4f       	sbci	r25, 0xFE	; 254
   11816:	fc 01       	movw	r30, r24
   11818:	80 81       	ld	r24, Z
   1181a:	91 81       	ldd	r25, Z+1	; 0x01
   1181c:	8c 01       	movw	r16, r24
   1181e:	c8 01       	movw	r24, r16
   11820:	01 97       	sbiw	r24, 0x01	; 1
   11822:	f1 f7       	brne	.-4      	; 0x11820 <travel_path+0x3d1e>
   11824:	8c 01       	movw	r16, r24
   11826:	ce 01       	movw	r24, r28
   11828:	81 54       	subi	r24, 0x41	; 65
   1182a:	9e 4f       	sbci	r25, 0xFE	; 254
   1182c:	fc 01       	movw	r30, r24
   1182e:	11 83       	std	Z+1, r17	; 0x01
   11830:	00 83       	st	Z, r16
			_delay_ms(20);
			correct_right3();
   11832:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
   11836:	9e 01       	movw	r18, r28
   11838:	2f 53       	subi	r18, 0x3F	; 63
   1183a:	3e 4f       	sbci	r19, 0xFE	; 254
   1183c:	80 e0       	ldi	r24, 0x00	; 0
   1183e:	90 e0       	ldi	r25, 0x00	; 0
   11840:	a0 ea       	ldi	r26, 0xA0	; 160
   11842:	b1 e4       	ldi	r27, 0x41	; 65
   11844:	f9 01       	movw	r30, r18
   11846:	80 83       	st	Z, r24
   11848:	91 83       	std	Z+1, r25	; 0x01
   1184a:	a2 83       	std	Z+2, r26	; 0x02
   1184c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   1184e:	8e 01       	movw	r16, r28
   11850:	0b 53       	subi	r16, 0x3B	; 59
   11852:	1e 4f       	sbci	r17, 0xFE	; 254
   11854:	ce 01       	movw	r24, r28
   11856:	8f 53       	subi	r24, 0x3F	; 63
   11858:	9e 4f       	sbci	r25, 0xFE	; 254
   1185a:	fc 01       	movw	r30, r24
   1185c:	60 81       	ld	r22, Z
   1185e:	71 81       	ldd	r23, Z+1	; 0x01
   11860:	82 81       	ldd	r24, Z+2	; 0x02
   11862:	93 81       	ldd	r25, Z+3	; 0x03
   11864:	26 e6       	ldi	r18, 0x66	; 102
   11866:	36 e6       	ldi	r19, 0x66	; 102
   11868:	46 e6       	ldi	r20, 0x66	; 102
   1186a:	55 e4       	ldi	r21, 0x45	; 69
   1186c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11870:	dc 01       	movw	r26, r24
   11872:	cb 01       	movw	r24, r22
   11874:	f8 01       	movw	r30, r16
   11876:	80 83       	st	Z, r24
   11878:	91 83       	std	Z+1, r25	; 0x01
   1187a:	a2 83       	std	Z+2, r26	; 0x02
   1187c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
   1187e:	ce 01       	movw	r24, r28
   11880:	8b 53       	subi	r24, 0x3B	; 59
   11882:	9e 4f       	sbci	r25, 0xFE	; 254
   11884:	11 e0       	ldi	r17, 0x01	; 1
   11886:	fc 01       	movw	r30, r24
   11888:	60 81       	ld	r22, Z
   1188a:	71 81       	ldd	r23, Z+1	; 0x01
   1188c:	82 81       	ldd	r24, Z+2	; 0x02
   1188e:	93 81       	ldd	r25, Z+3	; 0x03
   11890:	20 e0       	ldi	r18, 0x00	; 0
   11892:	30 e0       	ldi	r19, 0x00	; 0
   11894:	40 e8       	ldi	r20, 0x80	; 128
   11896:	5f e3       	ldi	r21, 0x3F	; 63
   11898:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   1189c:	88 23       	and	r24, r24
   1189e:	0c f0       	brlt	.+2      	; 0x118a2 <travel_path+0x3da0>
   118a0:	10 e0       	ldi	r17, 0x00	; 0
   118a2:	11 23       	and	r17, r17
   118a4:	49 f0       	breq	.+18     	; 0x118b8 <travel_path+0x3db6>
		__ticks = 1;
   118a6:	ce 01       	movw	r24, r28
   118a8:	87 53       	subi	r24, 0x37	; 55
   118aa:	9e 4f       	sbci	r25, 0xFE	; 254
   118ac:	21 e0       	ldi	r18, 0x01	; 1
   118ae:	30 e0       	ldi	r19, 0x00	; 0
   118b0:	fc 01       	movw	r30, r24
   118b2:	31 83       	std	Z+1, r19	; 0x01
   118b4:	20 83       	st	Z, r18
   118b6:	74 c0       	rjmp	.+232    	; 0x119a0 <travel_path+0x3e9e>
	else if (__tmp > 65535)
   118b8:	ce 01       	movw	r24, r28
   118ba:	8b 53       	subi	r24, 0x3B	; 59
   118bc:	9e 4f       	sbci	r25, 0xFE	; 254
   118be:	11 e0       	ldi	r17, 0x01	; 1
   118c0:	fc 01       	movw	r30, r24
   118c2:	60 81       	ld	r22, Z
   118c4:	71 81       	ldd	r23, Z+1	; 0x01
   118c6:	82 81       	ldd	r24, Z+2	; 0x02
   118c8:	93 81       	ldd	r25, Z+3	; 0x03
   118ca:	20 e0       	ldi	r18, 0x00	; 0
   118cc:	3f ef       	ldi	r19, 0xFF	; 255
   118ce:	4f e7       	ldi	r20, 0x7F	; 127
   118d0:	57 e4       	ldi	r21, 0x47	; 71
   118d2:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   118d6:	18 16       	cp	r1, r24
   118d8:	0c f0       	brlt	.+2      	; 0x118dc <travel_path+0x3dda>
   118da:	10 e0       	ldi	r17, 0x00	; 0
   118dc:	11 23       	and	r17, r17
   118de:	09 f4       	brne	.+2      	; 0x118e2 <travel_path+0x3de0>
   118e0:	4d c0       	rjmp	.+154    	; 0x1197c <travel_path+0x3e7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   118e2:	ce 01       	movw	r24, r28
   118e4:	8f 53       	subi	r24, 0x3F	; 63
   118e6:	9e 4f       	sbci	r25, 0xFE	; 254
   118e8:	fc 01       	movw	r30, r24
   118ea:	60 81       	ld	r22, Z
   118ec:	71 81       	ldd	r23, Z+1	; 0x01
   118ee:	82 81       	ldd	r24, Z+2	; 0x02
   118f0:	93 81       	ldd	r25, Z+3	; 0x03
   118f2:	20 e0       	ldi	r18, 0x00	; 0
   118f4:	30 e0       	ldi	r19, 0x00	; 0
   118f6:	40 e2       	ldi	r20, 0x20	; 32
   118f8:	51 e4       	ldi	r21, 0x41	; 65
   118fa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   118fe:	dc 01       	movw	r26, r24
   11900:	cb 01       	movw	r24, r22
   11902:	8e 01       	movw	r16, r28
   11904:	07 53       	subi	r16, 0x37	; 55
   11906:	1e 4f       	sbci	r17, 0xFE	; 254
   11908:	bc 01       	movw	r22, r24
   1190a:	cd 01       	movw	r24, r26
   1190c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11910:	dc 01       	movw	r26, r24
   11912:	cb 01       	movw	r24, r22
   11914:	f8 01       	movw	r30, r16
   11916:	91 83       	std	Z+1, r25	; 0x01
   11918:	80 83       	st	Z, r24
   1191a:	27 c0       	rjmp	.+78     	; 0x1196a <travel_path+0x3e68>
   1191c:	ce 01       	movw	r24, r28
   1191e:	85 53       	subi	r24, 0x35	; 53
   11920:	9e 4f       	sbci	r25, 0xFE	; 254
   11922:	20 e7       	ldi	r18, 0x70	; 112
   11924:	31 e0       	ldi	r19, 0x01	; 1
   11926:	fc 01       	movw	r30, r24
   11928:	31 83       	std	Z+1, r19	; 0x01
   1192a:	20 83       	st	Z, r18
   1192c:	ce 01       	movw	r24, r28
   1192e:	85 53       	subi	r24, 0x35	; 53
   11930:	9e 4f       	sbci	r25, 0xFE	; 254
   11932:	fc 01       	movw	r30, r24
   11934:	80 81       	ld	r24, Z
   11936:	91 81       	ldd	r25, Z+1	; 0x01
   11938:	8c 01       	movw	r16, r24
   1193a:	c8 01       	movw	r24, r16
   1193c:	01 97       	sbiw	r24, 0x01	; 1
   1193e:	f1 f7       	brne	.-4      	; 0x1193c <travel_path+0x3e3a>
   11940:	8c 01       	movw	r16, r24
   11942:	ce 01       	movw	r24, r28
   11944:	85 53       	subi	r24, 0x35	; 53
   11946:	9e 4f       	sbci	r25, 0xFE	; 254
   11948:	fc 01       	movw	r30, r24
   1194a:	11 83       	std	Z+1, r17	; 0x01
   1194c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1194e:	ce 01       	movw	r24, r28
   11950:	87 53       	subi	r24, 0x37	; 55
   11952:	9e 4f       	sbci	r25, 0xFE	; 254
   11954:	9e 01       	movw	r18, r28
   11956:	27 53       	subi	r18, 0x37	; 55
   11958:	3e 4f       	sbci	r19, 0xFE	; 254
   1195a:	f9 01       	movw	r30, r18
   1195c:	20 81       	ld	r18, Z
   1195e:	31 81       	ldd	r19, Z+1	; 0x01
   11960:	21 50       	subi	r18, 0x01	; 1
   11962:	30 40       	sbci	r19, 0x00	; 0
   11964:	fc 01       	movw	r30, r24
   11966:	31 83       	std	Z+1, r19	; 0x01
   11968:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1196a:	ce 01       	movw	r24, r28
   1196c:	87 53       	subi	r24, 0x37	; 55
   1196e:	9e 4f       	sbci	r25, 0xFE	; 254
   11970:	fc 01       	movw	r30, r24
   11972:	80 81       	ld	r24, Z
   11974:	91 81       	ldd	r25, Z+1	; 0x01
   11976:	00 97       	sbiw	r24, 0x00	; 0
   11978:	89 f6       	brne	.-94     	; 0x1191c <travel_path+0x3e1a>
   1197a:	2f c0       	rjmp	.+94     	; 0x119da <travel_path+0x3ed8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1197c:	8e 01       	movw	r16, r28
   1197e:	07 53       	subi	r16, 0x37	; 55
   11980:	1e 4f       	sbci	r17, 0xFE	; 254
   11982:	ce 01       	movw	r24, r28
   11984:	8b 53       	subi	r24, 0x3B	; 59
   11986:	9e 4f       	sbci	r25, 0xFE	; 254
   11988:	fc 01       	movw	r30, r24
   1198a:	60 81       	ld	r22, Z
   1198c:	71 81       	ldd	r23, Z+1	; 0x01
   1198e:	82 81       	ldd	r24, Z+2	; 0x02
   11990:	93 81       	ldd	r25, Z+3	; 0x03
   11992:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11996:	dc 01       	movw	r26, r24
   11998:	cb 01       	movw	r24, r22
   1199a:	f8 01       	movw	r30, r16
   1199c:	91 83       	std	Z+1, r25	; 0x01
   1199e:	80 83       	st	Z, r24
   119a0:	ce 01       	movw	r24, r28
   119a2:	83 53       	subi	r24, 0x33	; 51
   119a4:	9e 4f       	sbci	r25, 0xFE	; 254
   119a6:	9e 01       	movw	r18, r28
   119a8:	27 53       	subi	r18, 0x37	; 55
   119aa:	3e 4f       	sbci	r19, 0xFE	; 254
   119ac:	f9 01       	movw	r30, r18
   119ae:	20 81       	ld	r18, Z
   119b0:	31 81       	ldd	r19, Z+1	; 0x01
   119b2:	fc 01       	movw	r30, r24
   119b4:	31 83       	std	Z+1, r19	; 0x01
   119b6:	20 83       	st	Z, r18
   119b8:	ce 01       	movw	r24, r28
   119ba:	83 53       	subi	r24, 0x33	; 51
   119bc:	9e 4f       	sbci	r25, 0xFE	; 254
   119be:	fc 01       	movw	r30, r24
   119c0:	80 81       	ld	r24, Z
   119c2:	91 81       	ldd	r25, Z+1	; 0x01
   119c4:	8c 01       	movw	r16, r24
   119c6:	c8 01       	movw	r24, r16
   119c8:	01 97       	sbiw	r24, 0x01	; 1
   119ca:	f1 f7       	brne	.-4      	; 0x119c8 <travel_path+0x3ec6>
   119cc:	8c 01       	movw	r16, r24
   119ce:	ce 01       	movw	r24, r28
   119d0:	83 53       	subi	r24, 0x33	; 51
   119d2:	9e 4f       	sbci	r25, 0xFE	; 254
   119d4:	fc 01       	movw	r30, r24
   119d6:	11 83       	std	Z+1, r17	; 0x01
   119d8:	00 83       	st	Z, r16
			_delay_ms(20);
			node++;
   119da:	80 91 4f 03 	lds	r24, 0x034F
   119de:	90 91 50 03 	lds	r25, 0x0350
   119e2:	01 96       	adiw	r24, 0x01	; 1
   119e4:	90 93 50 03 	sts	0x0350, r25
   119e8:	80 93 4f 03 	sts	0x034F, r24
			pick_drop(master_path[node]);
   119ec:	80 91 4f 03 	lds	r24, 0x034F
   119f0:	90 91 50 03 	lds	r25, 0x0350
   119f4:	8d 5a       	subi	r24, 0xAD	; 173
   119f6:	9c 4f       	sbci	r25, 0xFC	; 252
   119f8:	fc 01       	movw	r30, r24
   119fa:	80 81       	ld	r24, Z
   119fc:	0e 94 79 30 	call	0x60f2	; 0x60f2 <pick_drop>
			node++;
   11a00:	80 91 4f 03 	lds	r24, 0x034F
   11a04:	90 91 50 03 	lds	r25, 0x0350
   11a08:	01 96       	adiw	r24, 0x01	; 1
   11a0a:	90 93 50 03 	sts	0x0350, r25
   11a0e:	80 93 4f 03 	sts	0x034F, r24
			travel_path(master_path[node]);
   11a12:	80 91 4f 03 	lds	r24, 0x034F
   11a16:	90 91 50 03 	lds	r25, 0x0350
   11a1a:	8d 5a       	subi	r24, 0xAD	; 173
   11a1c:	9c 4f       	sbci	r25, 0xFC	; 252
   11a1e:	fc 01       	movw	r30, r24
   11a20:	80 81       	ld	r24, Z
   11a22:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
		}
		else
		correct_right3();
   11a26:	12 c0       	rjmp	.+36     	; 0x11a4c <travel_path+0x3f4a>
   11a28:	0e 94 b5 18 	call	0x316a	; 0x316a <correct_right3>
   11a2c:	0f c0       	rjmp	.+30     	; 0x11a4c <travel_path+0x3f4a>
	}
	else if(pos_val=='o')
   11a2e:	ce 01       	movw	r24, r28
   11a30:	81 53       	subi	r24, 0x31	; 49
   11a32:	9e 4f       	sbci	r25, 0xFE	; 254
   11a34:	fc 01       	movw	r30, r24
   11a36:	80 81       	ld	r24, Z
   11a38:	8f 36       	cpi	r24, 0x6F	; 111
   11a3a:	41 f4       	brne	.+16     	; 0x11a4c <travel_path+0x3f4a>
	{
		stop();
   11a3c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
		path_fin=1;
   11a40:	81 e0       	ldi	r24, 0x01	; 1
   11a42:	90 e0       	ldi	r25, 0x00	; 0
   11a44:	90 93 1c 04 	sts	0x041C, r25
   11a48:	80 93 1b 04 	sts	0x041B, r24
	}
halt=0;	
   11a4c:	10 92 52 03 	sts	0x0352, r1
   11a50:	10 92 51 03 	sts	0x0351, r1
TIMSK3=1;
   11a54:	81 e7       	ldi	r24, 0x71	; 113
   11a56:	90 e0       	ldi	r25, 0x00	; 0
   11a58:	21 e0       	ldi	r18, 0x01	; 1
   11a5a:	fc 01       	movw	r30, r24
   11a5c:	20 83       	st	Z, r18
}
   11a5e:	c1 53       	subi	r28, 0x31	; 49
   11a60:	de 4f       	sbci	r29, 0xFE	; 254
   11a62:	0f b6       	in	r0, 0x3f	; 63
   11a64:	f8 94       	cli
   11a66:	de bf       	out	0x3e, r29	; 62
   11a68:	0f be       	out	0x3f, r0	; 63
   11a6a:	cd bf       	out	0x3d, r28	; 61
   11a6c:	df 91       	pop	r29
   11a6e:	cf 91       	pop	r28
   11a70:	1f 91       	pop	r17
   11a72:	0f 91       	pop	r16
   11a74:	08 95       	ret

00011a76 <line_following>:
* Example Call:		line_following();
*/

void line_following()

{
   11a76:	cf 93       	push	r28
   11a78:	df 93       	push	r29
   11a7a:	cd b7       	in	r28, 0x3d	; 61
   11a7c:	de b7       	in	r29, 0x3e	; 62

	TIMSK3 = 0x01;
   11a7e:	81 e7       	ldi	r24, 0x71	; 113
   11a80:	90 e0       	ldi	r25, 0x00	; 0
   11a82:	21 e0       	ldi	r18, 0x01	; 1
   11a84:	fc 01       	movw	r30, r24
   11a86:	20 83       	st	Z, r18

}
   11a88:	df 91       	pop	r29
   11a8a:	cf 91       	pop	r28
   11a8c:	08 95       	ret

00011a8e <lcd_port_config>:

*/

void lcd_port_config(void)

{
   11a8e:	cf 93       	push	r28
   11a90:	df 93       	push	r29
   11a92:	cd b7       	in	r28, 0x3d	; 61
   11a94:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
   11a96:	87 e2       	ldi	r24, 0x27	; 39
   11a98:	90 e0       	ldi	r25, 0x00	; 0
   11a9a:	27 e2       	ldi	r18, 0x27	; 39
   11a9c:	30 e0       	ldi	r19, 0x00	; 0
   11a9e:	f9 01       	movw	r30, r18
   11aa0:	20 81       	ld	r18, Z
   11aa2:	27 6f       	ori	r18, 0xF7	; 247
   11aa4:	fc 01       	movw	r30, r24
   11aa6:	20 83       	st	Z, r18

	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
   11aa8:	88 e2       	ldi	r24, 0x28	; 40
   11aaa:	90 e0       	ldi	r25, 0x00	; 0
   11aac:	28 e2       	ldi	r18, 0x28	; 40
   11aae:	30 e0       	ldi	r19, 0x00	; 0
   11ab0:	f9 01       	movw	r30, r18
   11ab2:	20 81       	ld	r18, Z
   11ab4:	20 78       	andi	r18, 0x80	; 128
   11ab6:	fc 01       	movw	r30, r24
   11ab8:	20 83       	st	Z, r18

}
   11aba:	df 91       	pop	r29
   11abc:	cf 91       	pop	r28
   11abe:	08 95       	ret

00011ac0 <buzzer_pin_config>:

*/

void buzzer_pin_config(void)

{
   11ac0:	cf 93       	push	r28
   11ac2:	df 93       	push	r29
   11ac4:	cd b7       	in	r28, 0x3d	; 61
   11ac6:	de b7       	in	r29, 0x3e	; 62

	DDRC = DDRC | 0x08; //Setting PORTC 3 as output
   11ac8:	87 e2       	ldi	r24, 0x27	; 39
   11aca:	90 e0       	ldi	r25, 0x00	; 0
   11acc:	27 e2       	ldi	r18, 0x27	; 39
   11ace:	30 e0       	ldi	r19, 0x00	; 0
   11ad0:	f9 01       	movw	r30, r18
   11ad2:	20 81       	ld	r18, Z
   11ad4:	28 60       	ori	r18, 0x08	; 8
   11ad6:	fc 01       	movw	r30, r24
   11ad8:	20 83       	st	Z, r18

	PORTC = PORTC & 0xF7; //Setting PORTC 3 logic low to turnoff buzzer
   11ada:	88 e2       	ldi	r24, 0x28	; 40
   11adc:	90 e0       	ldi	r25, 0x00	; 0
   11ade:	28 e2       	ldi	r18, 0x28	; 40
   11ae0:	30 e0       	ldi	r19, 0x00	; 0
   11ae2:	f9 01       	movw	r30, r18
   11ae4:	20 81       	ld	r18, Z
   11ae6:	27 7f       	andi	r18, 0xF7	; 247
   11ae8:	fc 01       	movw	r30, r24
   11aea:	20 83       	st	Z, r18

}
   11aec:	df 91       	pop	r29
   11aee:	cf 91       	pop	r28
   11af0:	08 95       	ret

00011af2 <buzzer_on>:

*/

void buzzer_on(void)

{
   11af2:	cf 93       	push	r28
   11af4:	df 93       	push	r29
   11af6:	0f 92       	push	r0
   11af8:	cd b7       	in	r28, 0x3d	; 61
   11afa:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
   11afc:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
   11afe:	86 e2       	ldi	r24, 0x26	; 38
   11b00:	90 e0       	ldi	r25, 0x00	; 0
   11b02:	fc 01       	movw	r30, r24
   11b04:	80 81       	ld	r24, Z
   11b06:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore | 0x08;
   11b08:	89 81       	ldd	r24, Y+1	; 0x01
   11b0a:	88 60       	ori	r24, 0x08	; 8
   11b0c:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
   11b0e:	88 e2       	ldi	r24, 0x28	; 40
   11b10:	90 e0       	ldi	r25, 0x00	; 0
   11b12:	29 81       	ldd	r18, Y+1	; 0x01
   11b14:	fc 01       	movw	r30, r24
   11b16:	20 83       	st	Z, r18

}
   11b18:	0f 90       	pop	r0
   11b1a:	df 91       	pop	r29
   11b1c:	cf 91       	pop	r28
   11b1e:	08 95       	ret

00011b20 <buzzer_off>:

*/

void buzzer_off(void)

{
   11b20:	cf 93       	push	r28
   11b22:	df 93       	push	r29
   11b24:	0f 92       	push	r0
   11b26:	cd b7       	in	r28, 0x3d	; 61
   11b28:	de b7       	in	r29, 0x3e	; 62

	unsigned char port_restore = 0;
   11b2a:	19 82       	std	Y+1, r1	; 0x01

	port_restore = PINC;
   11b2c:	86 e2       	ldi	r24, 0x26	; 38
   11b2e:	90 e0       	ldi	r25, 0x00	; 0
   11b30:	fc 01       	movw	r30, r24
   11b32:	80 81       	ld	r24, Z
   11b34:	89 83       	std	Y+1, r24	; 0x01

	port_restore = port_restore & 0xF7;
   11b36:	89 81       	ldd	r24, Y+1	; 0x01
   11b38:	87 7f       	andi	r24, 0xF7	; 247
   11b3a:	89 83       	std	Y+1, r24	; 0x01

	PORTC = port_restore;
   11b3c:	88 e2       	ldi	r24, 0x28	; 40
   11b3e:	90 e0       	ldi	r25, 0x00	; 0
   11b40:	29 81       	ldd	r18, Y+1	; 0x01
   11b42:	fc 01       	movw	r30, r24
   11b44:	20 83       	st	Z, r18

}
   11b46:	0f 90       	pop	r0
   11b48:	df 91       	pop	r29
   11b4a:	cf 91       	pop	r28
   11b4c:	08 95       	ret

00011b4e <buzz>:

*/

void buzz(unsigned long mst)

{
   11b4e:	0f 93       	push	r16
   11b50:	1f 93       	push	r17
   11b52:	cf 93       	push	r28
   11b54:	df 93       	push	r29
   11b56:	cd b7       	in	r28, 0x3d	; 61
   11b58:	de b7       	in	r29, 0x3e	; 62
   11b5a:	62 97       	sbiw	r28, 0x12	; 18
   11b5c:	0f b6       	in	r0, 0x3f	; 63
   11b5e:	f8 94       	cli
   11b60:	de bf       	out	0x3e, r29	; 62
   11b62:	0f be       	out	0x3f, r0	; 63
   11b64:	cd bf       	out	0x3d, r28	; 61
   11b66:	6f 87       	std	Y+15, r22	; 0x0f
   11b68:	78 8b       	std	Y+16, r23	; 0x10
   11b6a:	89 8b       	std	Y+17, r24	; 0x11
   11b6c:	9a 8b       	std	Y+18, r25	; 0x12

	buzzer_on();
   11b6e:	0e 94 79 8d 	call	0x11af2	; 0x11af2 <buzzer_on>
   11b72:	80 e0       	ldi	r24, 0x00	; 0
   11b74:	90 e0       	ldi	r25, 0x00	; 0
   11b76:	a8 e4       	ldi	r26, 0x48	; 72
   11b78:	b2 e4       	ldi	r27, 0x42	; 66
   11b7a:	89 83       	std	Y+1, r24	; 0x01
   11b7c:	9a 83       	std	Y+2, r25	; 0x02
   11b7e:	ab 83       	std	Y+3, r26	; 0x03
   11b80:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   11b82:	69 81       	ldd	r22, Y+1	; 0x01
   11b84:	7a 81       	ldd	r23, Y+2	; 0x02
   11b86:	8b 81       	ldd	r24, Y+3	; 0x03
   11b88:	9c 81       	ldd	r25, Y+4	; 0x04
   11b8a:	26 e6       	ldi	r18, 0x66	; 102
   11b8c:	36 e6       	ldi	r19, 0x66	; 102
   11b8e:	46 e6       	ldi	r20, 0x66	; 102
   11b90:	55 e4       	ldi	r21, 0x45	; 69
   11b92:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11b96:	dc 01       	movw	r26, r24
   11b98:	cb 01       	movw	r24, r22
   11b9a:	8d 83       	std	Y+5, r24	; 0x05
   11b9c:	9e 83       	std	Y+6, r25	; 0x06
   11b9e:	af 83       	std	Y+7, r26	; 0x07
   11ba0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
   11ba2:	11 e0       	ldi	r17, 0x01	; 1
   11ba4:	6d 81       	ldd	r22, Y+5	; 0x05
   11ba6:	7e 81       	ldd	r23, Y+6	; 0x06
   11ba8:	8f 81       	ldd	r24, Y+7	; 0x07
   11baa:	98 85       	ldd	r25, Y+8	; 0x08
   11bac:	20 e0       	ldi	r18, 0x00	; 0
   11bae:	30 e0       	ldi	r19, 0x00	; 0
   11bb0:	40 e8       	ldi	r20, 0x80	; 128
   11bb2:	5f e3       	ldi	r21, 0x3F	; 63
   11bb4:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   11bb8:	88 23       	and	r24, r24
   11bba:	0c f0       	brlt	.+2      	; 0x11bbe <buzz+0x70>
   11bbc:	10 e0       	ldi	r17, 0x00	; 0
   11bbe:	11 23       	and	r17, r17
   11bc0:	29 f0       	breq	.+10     	; 0x11bcc <buzz+0x7e>
		__ticks = 1;
   11bc2:	81 e0       	ldi	r24, 0x01	; 1
   11bc4:	90 e0       	ldi	r25, 0x00	; 0
   11bc6:	9a 87       	std	Y+10, r25	; 0x0a
   11bc8:	89 87       	std	Y+9, r24	; 0x09
   11bca:	46 c0       	rjmp	.+140    	; 0x11c58 <buzz+0x10a>
	else if (__tmp > 65535)
   11bcc:	11 e0       	ldi	r17, 0x01	; 1
   11bce:	6d 81       	ldd	r22, Y+5	; 0x05
   11bd0:	7e 81       	ldd	r23, Y+6	; 0x06
   11bd2:	8f 81       	ldd	r24, Y+7	; 0x07
   11bd4:	98 85       	ldd	r25, Y+8	; 0x08
   11bd6:	20 e0       	ldi	r18, 0x00	; 0
   11bd8:	3f ef       	ldi	r19, 0xFF	; 255
   11bda:	4f e7       	ldi	r20, 0x7F	; 127
   11bdc:	57 e4       	ldi	r21, 0x47	; 71
   11bde:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   11be2:	18 16       	cp	r1, r24
   11be4:	0c f0       	brlt	.+2      	; 0x11be8 <buzz+0x9a>
   11be6:	10 e0       	ldi	r17, 0x00	; 0
   11be8:	11 23       	and	r17, r17
   11bea:	61 f1       	breq	.+88     	; 0x11c44 <buzz+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   11bec:	69 81       	ldd	r22, Y+1	; 0x01
   11bee:	7a 81       	ldd	r23, Y+2	; 0x02
   11bf0:	8b 81       	ldd	r24, Y+3	; 0x03
   11bf2:	9c 81       	ldd	r25, Y+4	; 0x04
   11bf4:	20 e0       	ldi	r18, 0x00	; 0
   11bf6:	30 e0       	ldi	r19, 0x00	; 0
   11bf8:	40 e2       	ldi	r20, 0x20	; 32
   11bfa:	51 e4       	ldi	r21, 0x41	; 65
   11bfc:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   11c00:	dc 01       	movw	r26, r24
   11c02:	cb 01       	movw	r24, r22
   11c04:	bc 01       	movw	r22, r24
   11c06:	cd 01       	movw	r24, r26
   11c08:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11c0c:	dc 01       	movw	r26, r24
   11c0e:	cb 01       	movw	r24, r22
   11c10:	9a 87       	std	Y+10, r25	; 0x0a
   11c12:	89 87       	std	Y+9, r24	; 0x09
   11c14:	12 c0       	rjmp	.+36     	; 0x11c3a <buzz+0xec>
   11c16:	80 e7       	ldi	r24, 0x70	; 112
   11c18:	91 e0       	ldi	r25, 0x01	; 1
   11c1a:	9c 87       	std	Y+12, r25	; 0x0c
   11c1c:	8b 87       	std	Y+11, r24	; 0x0b
   11c1e:	8b 85       	ldd	r24, Y+11	; 0x0b
   11c20:	9c 85       	ldd	r25, Y+12	; 0x0c
   11c22:	8c 01       	movw	r16, r24
   11c24:	c8 01       	movw	r24, r16
   11c26:	01 97       	sbiw	r24, 0x01	; 1
   11c28:	f1 f7       	brne	.-4      	; 0x11c26 <buzz+0xd8>
   11c2a:	8c 01       	movw	r16, r24
   11c2c:	1c 87       	std	Y+12, r17	; 0x0c
   11c2e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   11c30:	89 85       	ldd	r24, Y+9	; 0x09
   11c32:	9a 85       	ldd	r25, Y+10	; 0x0a
   11c34:	01 97       	sbiw	r24, 0x01	; 1
   11c36:	9a 87       	std	Y+10, r25	; 0x0a
   11c38:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   11c3a:	89 85       	ldd	r24, Y+9	; 0x09
   11c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
   11c3e:	00 97       	sbiw	r24, 0x00	; 0
   11c40:	51 f7       	brne	.-44     	; 0x11c16 <buzz+0xc8>
   11c42:	17 c0       	rjmp	.+46     	; 0x11c72 <buzz+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   11c44:	6d 81       	ldd	r22, Y+5	; 0x05
   11c46:	7e 81       	ldd	r23, Y+6	; 0x06
   11c48:	8f 81       	ldd	r24, Y+7	; 0x07
   11c4a:	98 85       	ldd	r25, Y+8	; 0x08
   11c4c:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   11c50:	dc 01       	movw	r26, r24
   11c52:	cb 01       	movw	r24, r22
   11c54:	9a 87       	std	Y+10, r25	; 0x0a
   11c56:	89 87       	std	Y+9, r24	; 0x09
   11c58:	89 85       	ldd	r24, Y+9	; 0x09
   11c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
   11c5c:	9e 87       	std	Y+14, r25	; 0x0e
   11c5e:	8d 87       	std	Y+13, r24	; 0x0d
   11c60:	8d 85       	ldd	r24, Y+13	; 0x0d
   11c62:	9e 85       	ldd	r25, Y+14	; 0x0e
   11c64:	8c 01       	movw	r16, r24
   11c66:	c8 01       	movw	r24, r16
   11c68:	01 97       	sbiw	r24, 0x01	; 1
   11c6a:	f1 f7       	brne	.-4      	; 0x11c68 <buzz+0x11a>
   11c6c:	8c 01       	movw	r16, r24
   11c6e:	1e 87       	std	Y+14, r17	; 0x0e
   11c70:	0d 87       	std	Y+13, r16	; 0x0d

	_delay_ms(50);

	buzzer_off();
   11c72:	0e 94 90 8d 	call	0x11b20	; 0x11b20 <buzzer_off>

}
   11c76:	62 96       	adiw	r28, 0x12	; 18
   11c78:	0f b6       	in	r0, 0x3f	; 63
   11c7a:	f8 94       	cli
   11c7c:	de bf       	out	0x3e, r29	; 62
   11c7e:	0f be       	out	0x3f, r0	; 63
   11c80:	cd bf       	out	0x3d, r28	; 61
   11c82:	df 91       	pop	r29
   11c84:	cf 91       	pop	r28
   11c86:	1f 91       	pop	r17
   11c88:	0f 91       	pop	r16
   11c8a:	08 95       	ret

00011c8c <timer1_init>:

*/

void timer1_init()

{
   11c8c:	cf 93       	push	r28
   11c8e:	df 93       	push	r29
   11c90:	cd b7       	in	r28, 0x3d	; 61
   11c92:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0X00;
   11c94:	80 e8       	ldi	r24, 0x80	; 128
   11c96:	90 e0       	ldi	r25, 0x00	; 0
   11c98:	fc 01       	movw	r30, r24
   11c9a:	10 82       	st	Z, r1

	ICR1 = 1023;
   11c9c:	86 e8       	ldi	r24, 0x86	; 134
   11c9e:	90 e0       	ldi	r25, 0x00	; 0
   11ca0:	2f ef       	ldi	r18, 0xFF	; 255
   11ca2:	33 e0       	ldi	r19, 0x03	; 3
   11ca4:	fc 01       	movw	r30, r24
   11ca6:	31 83       	std	Z+1, r19	; 0x01
   11ca8:	20 83       	st	Z, r18

	TCNT1H = 0XFC;
   11caa:	85 e8       	ldi	r24, 0x85	; 133
   11cac:	90 e0       	ldi	r25, 0x00	; 0
   11cae:	2c ef       	ldi	r18, 0xFC	; 252
   11cb0:	fc 01       	movw	r30, r24
   11cb2:	20 83       	st	Z, r18

	TCNT1L = 0X01;
   11cb4:	84 e8       	ldi	r24, 0x84	; 132
   11cb6:	90 e0       	ldi	r25, 0x00	; 0
   11cb8:	21 e0       	ldi	r18, 0x01	; 1
   11cba:	fc 01       	movw	r30, r24
   11cbc:	20 83       	st	Z, r18

	OCR1AH = 0x03;	//Output compare Register high value for servo 1
   11cbe:	89 e8       	ldi	r24, 0x89	; 137
   11cc0:	90 e0       	ldi	r25, 0x00	; 0
   11cc2:	23 e0       	ldi	r18, 0x03	; 3
   11cc4:	fc 01       	movw	r30, r24
   11cc6:	20 83       	st	Z, r18

	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
   11cc8:	88 e8       	ldi	r24, 0x88	; 136
   11cca:	90 e0       	ldi	r25, 0x00	; 0
   11ccc:	2f ef       	ldi	r18, 0xFF	; 255
   11cce:	fc 01       	movw	r30, r24
   11cd0:	20 83       	st	Z, r18

	OCR1BH = 0x03;	//Output compare Register high value for servo 2
   11cd2:	8b e8       	ldi	r24, 0x8B	; 139
   11cd4:	90 e0       	ldi	r25, 0x00	; 0
   11cd6:	23 e0       	ldi	r18, 0x03	; 3
   11cd8:	fc 01       	movw	r30, r24
   11cda:	20 83       	st	Z, r18

	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
   11cdc:	8a e8       	ldi	r24, 0x8A	; 138
   11cde:	90 e0       	ldi	r25, 0x00	; 0
   11ce0:	2f ef       	ldi	r18, 0xFF	; 255
   11ce2:	fc 01       	movw	r30, r24
   11ce4:	20 83       	st	Z, r18

	OCR1CH = 0x03;	//Output compare Register high value for servo 3
   11ce6:	8d e8       	ldi	r24, 0x8D	; 141
   11ce8:	90 e0       	ldi	r25, 0x00	; 0
   11cea:	23 e0       	ldi	r18, 0x03	; 3
   11cec:	fc 01       	movw	r30, r24
   11cee:	20 83       	st	Z, r18

	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
   11cf0:	8c e8       	ldi	r24, 0x8C	; 140
   11cf2:	90 e0       	ldi	r25, 0x00	; 0
   11cf4:	2f ef       	ldi	r18, 0xFF	; 255
   11cf6:	fc 01       	movw	r30, r24
   11cf8:	20 83       	st	Z, r18

	ICR1H  = 0x03;
   11cfa:	87 e8       	ldi	r24, 0x87	; 135
   11cfc:	90 e0       	ldi	r25, 0x00	; 0
   11cfe:	23 e0       	ldi	r18, 0x03	; 3
   11d00:	fc 01       	movw	r30, r24
   11d02:	20 83       	st	Z, r18

	ICR1L  = 0xFF;
   11d04:	86 e8       	ldi	r24, 0x86	; 134
   11d06:	90 e0       	ldi	r25, 0x00	; 0
   11d08:	2f ef       	ldi	r18, 0xFF	; 255
   11d0a:	fc 01       	movw	r30, r24
   11d0c:	20 83       	st	Z, r18

	TCCR1A = 0XAB;
   11d0e:	80 e8       	ldi	r24, 0x80	; 128
   11d10:	90 e0       	ldi	r25, 0x00	; 0
   11d12:	2b ea       	ldi	r18, 0xAB	; 171
   11d14:	fc 01       	movw	r30, r24
   11d16:	20 83       	st	Z, r18

	TCCR1B = 0X0C;
   11d18:	81 e8       	ldi	r24, 0x81	; 129
   11d1a:	90 e0       	ldi	r25, 0x00	; 0
   11d1c:	2c e0       	ldi	r18, 0x0C	; 12
   11d1e:	fc 01       	movw	r30, r24
   11d20:	20 83       	st	Z, r18

	TCCR1C = 0x00;
   11d22:	82 e8       	ldi	r24, 0x82	; 130
   11d24:	90 e0       	ldi	r25, 0x00	; 0
   11d26:	fc 01       	movw	r30, r24
   11d28:	10 82       	st	Z, r1

}
   11d2a:	df 91       	pop	r29
   11d2c:	cf 91       	pop	r28
   11d2e:	08 95       	ret

00011d30 <timer3_init>:

*/

void timer3_init(void)

{
   11d30:	cf 93       	push	r28
   11d32:	df 93       	push	r29
   11d34:	cd b7       	in	r28, 0x3d	; 61
   11d36:	de b7       	in	r29, 0x3e	; 62

	TCCR3B = 0x00; //stop
   11d38:	81 e9       	ldi	r24, 0x91	; 145
   11d3a:	90 e0       	ldi	r25, 0x00	; 0
   11d3c:	fc 01       	movw	r30, r24
   11d3e:	10 82       	st	Z, r1

	TCNT3 = 0xFDC0; // 0.01s
   11d40:	84 e9       	ldi	r24, 0x94	; 148
   11d42:	90 e0       	ldi	r25, 0x00	; 0
   11d44:	20 ec       	ldi	r18, 0xC0	; 192
   11d46:	3d ef       	ldi	r19, 0xFD	; 253
   11d48:	fc 01       	movw	r30, r24
   11d4a:	31 83       	std	Z+1, r19	; 0x01
   11d4c:	20 83       	st	Z, r18

	OCR3AH = 0x00; //Output Compare Register (OCR)- Not used
   11d4e:	89 e9       	ldi	r24, 0x99	; 153
   11d50:	90 e0       	ldi	r25, 0x00	; 0
   11d52:	fc 01       	movw	r30, r24
   11d54:	10 82       	st	Z, r1

	OCR3AL = 0x00; //Output Compare Register (OCR)- Not used
   11d56:	88 e9       	ldi	r24, 0x98	; 152
   11d58:	90 e0       	ldi	r25, 0x00	; 0
   11d5a:	fc 01       	movw	r30, r24
   11d5c:	10 82       	st	Z, r1

	OCR3BH = 0x00; //Output Compare Register (OCR)- Not used
   11d5e:	8b e9       	ldi	r24, 0x9B	; 155
   11d60:	90 e0       	ldi	r25, 0x00	; 0
   11d62:	fc 01       	movw	r30, r24
   11d64:	10 82       	st	Z, r1

	OCR3BL = 0x00; //Output Compare Register (OCR)- Not used
   11d66:	8a e9       	ldi	r24, 0x9A	; 154
   11d68:	90 e0       	ldi	r25, 0x00	; 0
   11d6a:	fc 01       	movw	r30, r24
   11d6c:	10 82       	st	Z, r1

	OCR3CH = 0x00; //Output Compare Register (OCR)- Not used
   11d6e:	8d e9       	ldi	r24, 0x9D	; 157
   11d70:	90 e0       	ldi	r25, 0x00	; 0
   11d72:	fc 01       	movw	r30, r24
   11d74:	10 82       	st	Z, r1

	OCR3CL = 0x00; //Output Compare Register (OCR)- Not used
   11d76:	8c e9       	ldi	r24, 0x9C	; 156
   11d78:	90 e0       	ldi	r25, 0x00	; 0
   11d7a:	fc 01       	movw	r30, r24
   11d7c:	10 82       	st	Z, r1

	ICR3H = 0x00; //Input Capture Register (ICR)- Not used
   11d7e:	87 e9       	ldi	r24, 0x97	; 151
   11d80:	90 e0       	ldi	r25, 0x00	; 0
   11d82:	fc 01       	movw	r30, r24
   11d84:	10 82       	st	Z, r1

	ICR3L = 0x00; //Input Capture Register (ICR)- Not used
   11d86:	86 e9       	ldi	r24, 0x96	; 150
   11d88:	90 e0       	ldi	r25, 0x00	; 0
   11d8a:	fc 01       	movw	r30, r24
   11d8c:	10 82       	st	Z, r1

	TCCR3A = 0x00;
   11d8e:	80 e9       	ldi	r24, 0x90	; 144
   11d90:	90 e0       	ldi	r25, 0x00	; 0
   11d92:	fc 01       	movw	r30, r24
   11d94:	10 82       	st	Z, r1

	TCCR3C = 0x00;
   11d96:	82 e9       	ldi	r24, 0x92	; 146
   11d98:	90 e0       	ldi	r25, 0x00	; 0
   11d9a:	fc 01       	movw	r30, r24
   11d9c:	10 82       	st	Z, r1

	TCCR3B = 0x04; //Pre-scaler 256 1-0-0
   11d9e:	81 e9       	ldi	r24, 0x91	; 145
   11da0:	90 e0       	ldi	r25, 0x00	; 0
   11da2:	24 e0       	ldi	r18, 0x04	; 4
   11da4:	fc 01       	movw	r30, r24
   11da6:	20 83       	st	Z, r18

}
   11da8:	df 91       	pop	r29
   11daa:	cf 91       	pop	r28
   11dac:	08 95       	ret

00011dae <timer4_init>:

*/

void timer4_init(void) 

{
   11dae:	cf 93       	push	r28
   11db0:	df 93       	push	r29
   11db2:	cd b7       	in	r28, 0x3d	; 61
   11db4:	de b7       	in	r29, 0x3e	; 62

	TCCR4B = 0x00; //stop
   11db6:	81 ea       	ldi	r24, 0xA1	; 161
   11db8:	90 e0       	ldi	r25, 0x00	; 0
   11dba:	fc 01       	movw	r30, r24
   11dbc:	10 82       	st	Z, r1

	TCNT4 = 0xE980; // 0.1s
   11dbe:	84 ea       	ldi	r24, 0xA4	; 164
   11dc0:	90 e0       	ldi	r25, 0x00	; 0
   11dc2:	20 e8       	ldi	r18, 0x80	; 128
   11dc4:	39 ee       	ldi	r19, 0xE9	; 233
   11dc6:	fc 01       	movw	r30, r24
   11dc8:	31 83       	std	Z+1, r19	; 0x01
   11dca:	20 83       	st	Z, r18

	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
   11dcc:	89 ea       	ldi	r24, 0xA9	; 169
   11dce:	90 e0       	ldi	r25, 0x00	; 0
   11dd0:	fc 01       	movw	r30, r24
   11dd2:	10 82       	st	Z, r1

	OCR4AL = 0x00; //Output Compare Register (OCR)- Not used
   11dd4:	88 ea       	ldi	r24, 0xA8	; 168
   11dd6:	90 e0       	ldi	r25, 0x00	; 0
   11dd8:	fc 01       	movw	r30, r24
   11dda:	10 82       	st	Z, r1

	OCR4BH = 0x00; //Output Compare Register (OCR)- Not used
   11ddc:	8b ea       	ldi	r24, 0xAB	; 171
   11dde:	90 e0       	ldi	r25, 0x00	; 0
   11de0:	fc 01       	movw	r30, r24
   11de2:	10 82       	st	Z, r1

	OCR4BL = 0x00; //Output Compare Register (OCR)- Not used
   11de4:	8a ea       	ldi	r24, 0xAA	; 170
   11de6:	90 e0       	ldi	r25, 0x00	; 0
   11de8:	fc 01       	movw	r30, r24
   11dea:	10 82       	st	Z, r1

	OCR4CH = 0x00; //Output Compare Register (OCR)- Not used
   11dec:	8d ea       	ldi	r24, 0xAD	; 173
   11dee:	90 e0       	ldi	r25, 0x00	; 0
   11df0:	fc 01       	movw	r30, r24
   11df2:	10 82       	st	Z, r1

	OCR4CL = 0x00; //Output Compare Register (OCR)- Not used
   11df4:	8c ea       	ldi	r24, 0xAC	; 172
   11df6:	90 e0       	ldi	r25, 0x00	; 0
   11df8:	fc 01       	movw	r30, r24
   11dfa:	10 82       	st	Z, r1

	ICR4H = 0x00; //Input Capture Register (ICR)- Not used
   11dfc:	87 ea       	ldi	r24, 0xA7	; 167
   11dfe:	90 e0       	ldi	r25, 0x00	; 0
   11e00:	fc 01       	movw	r30, r24
   11e02:	10 82       	st	Z, r1

	ICR4L = 0x00; //Input Capture Register (ICR)- Not used
   11e04:	86 ea       	ldi	r24, 0xA6	; 166
   11e06:	90 e0       	ldi	r25, 0x00	; 0
   11e08:	fc 01       	movw	r30, r24
   11e0a:	10 82       	st	Z, r1

	TCCR4A = 0x00;
   11e0c:	80 ea       	ldi	r24, 0xA0	; 160
   11e0e:	90 e0       	ldi	r25, 0x00	; 0
   11e10:	fc 01       	movw	r30, r24
   11e12:	10 82       	st	Z, r1

	TCCR4C = 0x00;
   11e14:	82 ea       	ldi	r24, 0xA2	; 162
   11e16:	90 e0       	ldi	r25, 0x00	; 0
   11e18:	fc 01       	movw	r30, r24
   11e1a:	10 82       	st	Z, r1

	TCCR4B = 0x04; //Pre-scaler 256 1-0-0
   11e1c:	81 ea       	ldi	r24, 0xA1	; 161
   11e1e:	90 e0       	ldi	r25, 0x00	; 0
   11e20:	24 e0       	ldi	r18, 0x04	; 4
   11e22:	fc 01       	movw	r30, r24
   11e24:	20 83       	st	Z, r18

}
   11e26:	df 91       	pop	r29
   11e28:	cf 91       	pop	r28
   11e2a:	08 95       	ret

00011e2c <timer5_init>:

*/

void timer5_init()

{
   11e2c:	cf 93       	push	r28
   11e2e:	df 93       	push	r29
   11e30:	cd b7       	in	r28, 0x3d	; 61
   11e32:	de b7       	in	r29, 0x3e	; 62

    TCCR5B = 0x00; //Stop
   11e34:	81 e2       	ldi	r24, 0x21	; 33
   11e36:	91 e0       	ldi	r25, 0x01	; 1
   11e38:	fc 01       	movw	r30, r24
   11e3a:	10 82       	st	Z, r1

    TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
   11e3c:	85 e2       	ldi	r24, 0x25	; 37
   11e3e:	91 e0       	ldi	r25, 0x01	; 1
   11e40:	2f ef       	ldi	r18, 0xFF	; 255
   11e42:	fc 01       	movw	r30, r24
   11e44:	20 83       	st	Z, r18

    TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
   11e46:	84 e2       	ldi	r24, 0x24	; 36
   11e48:	91 e0       	ldi	r25, 0x01	; 1
   11e4a:	21 e0       	ldi	r18, 0x01	; 1
   11e4c:	fc 01       	movw	r30, r24
   11e4e:	20 83       	st	Z, r18

    OCR5AH = 0x00; //Output compare register high value for Left Motor
   11e50:	89 e2       	ldi	r24, 0x29	; 41
   11e52:	91 e0       	ldi	r25, 0x01	; 1
   11e54:	fc 01       	movw	r30, r24
   11e56:	10 82       	st	Z, r1

    OCR5AL = 0xFF; //Output compare register low value for Left Motor
   11e58:	88 e2       	ldi	r24, 0x28	; 40
   11e5a:	91 e0       	ldi	r25, 0x01	; 1
   11e5c:	2f ef       	ldi	r18, 0xFF	; 255
   11e5e:	fc 01       	movw	r30, r24
   11e60:	20 83       	st	Z, r18

    OCR5BH = 0x00; //Output compare register high value for Right Motor
   11e62:	8b e2       	ldi	r24, 0x2B	; 43
   11e64:	91 e0       	ldi	r25, 0x01	; 1
   11e66:	fc 01       	movw	r30, r24
   11e68:	10 82       	st	Z, r1

    OCR5BL = 0xFF; //Output compare register low value for Right Motor
   11e6a:	8a e2       	ldi	r24, 0x2A	; 42
   11e6c:	91 e0       	ldi	r25, 0x01	; 1
   11e6e:	2f ef       	ldi	r18, 0xFF	; 255
   11e70:	fc 01       	movw	r30, r24
   11e72:	20 83       	st	Z, r18

    OCR5CH = 0x00; //Output compare register high value for Motor C1
   11e74:	8d e2       	ldi	r24, 0x2D	; 45
   11e76:	91 e0       	ldi	r25, 0x01	; 1
   11e78:	fc 01       	movw	r30, r24
   11e7a:	10 82       	st	Z, r1

    OCR5CL = 0xFF; //Output compare register low value for Motor C1
   11e7c:	8c e2       	ldi	r24, 0x2C	; 44
   11e7e:	91 e0       	ldi	r25, 0x01	; 1
   11e80:	2f ef       	ldi	r18, 0xFF	; 255
   11e82:	fc 01       	movw	r30, r24
   11e84:	20 83       	st	Z, r18

    TCCR5A = 0xA9;
   11e86:	80 e2       	ldi	r24, 0x20	; 32
   11e88:	91 e0       	ldi	r25, 0x01	; 1
   11e8a:	29 ea       	ldi	r18, 0xA9	; 169
   11e8c:	fc 01       	movw	r30, r24
   11e8e:	20 83       	st	Z, r18

				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/



    TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
   11e90:	81 e2       	ldi	r24, 0x21	; 33
   11e92:	91 e0       	ldi	r25, 0x01	; 1
   11e94:	2b e0       	ldi	r18, 0x0B	; 11
   11e96:	fc 01       	movw	r30, r24
   11e98:	20 83       	st	Z, r18

}
   11e9a:	df 91       	pop	r29
   11e9c:	cf 91       	pop	r28
   11e9e:	08 95       	ret

00011ea0 <port_init>:

*/

void port_init()

{   DDRJ= DDRJ | 0xF7;
   11ea0:	cf 93       	push	r28
   11ea2:	df 93       	push	r29
   11ea4:	cd b7       	in	r28, 0x3d	; 61
   11ea6:	de b7       	in	r29, 0x3e	; 62
   11ea8:	84 e0       	ldi	r24, 0x04	; 4
   11eaa:	91 e0       	ldi	r25, 0x01	; 1
   11eac:	24 e0       	ldi	r18, 0x04	; 4
   11eae:	31 e0       	ldi	r19, 0x01	; 1
   11eb0:	f9 01       	movw	r30, r18
   11eb2:	20 81       	ld	r18, Z
   11eb4:	27 6f       	ori	r18, 0xF7	; 247
   11eb6:	fc 01       	movw	r30, r24
   11eb8:	20 83       	st	Z, r18

	PORTJ=0xFF;
   11eba:	85 e0       	ldi	r24, 0x05	; 5
   11ebc:	91 e0       	ldi	r25, 0x01	; 1
   11ebe:	2f ef       	ldi	r18, 0xFF	; 255
   11ec0:	fc 01       	movw	r30, r24
   11ec2:	20 83       	st	Z, r18

	buzzer_pin_config(); //Buzzer pin configuration
   11ec4:	0e 94 60 8d 	call	0x11ac0	; 0x11ac0 <buzzer_pin_config>

	lcd_port_config();  //LCD pin configuration
   11ec8:	0e 94 47 8d 	call	0x11a8e	; 0x11a8e <lcd_port_config>

	

	adc_pin_config();  //ADC pin configuration
   11ecc:	0e 94 15 1b 	call	0x362a	; 0x362a <adc_pin_config>

	motion_pin_config(); //Motion pin configuration
   11ed0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <motion_pin_config>

	left_encoder_pin_config(); //Left Encoder pin configuration
   11ed4:	0e 94 cd 0b 	call	0x179a	; 0x179a <left_encoder_pin_config>

	right_encoder_pin_config(); //Right Encoder pin configuration
   11ed8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <right_encoder_pin_config>
	
	servo1_pin_config(); //Servo 1 pin configuration
   11edc:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <servo1_pin_config>
	
	servo2_pin_config(); //Servo 2 pin configuration
   11ee0:	0e 94 8c 1c 	call	0x3918	; 0x3918 <servo2_pin_config>
	
	servo3_pin_config(); //Servo 3 pin configuration
   11ee4:	0e 94 a5 1c 	call	0x394a	; 0x394a <servo3_pin_config>

}
   11ee8:	df 91       	pop	r29
   11eea:	cf 91       	pop	r28
   11eec:	08 95       	ret

00011eee <init_devices>:

*/

void init_devices(void)

{
   11eee:	cf 93       	push	r28
   11ef0:	df 93       	push	r29
   11ef2:	cd b7       	in	r28, 0x3d	; 61
   11ef4:	de b7       	in	r29, 0x3e	; 62

	cli(); //Clears the global interrupts
   11ef6:	f8 94       	cli

	

	port_init(); //Initiate all ports
   11ef8:	0e 94 50 8f 	call	0x11ea0	; 0x11ea0 <port_init>

	adc_init(); //Initiate ADC registers
   11efc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <adc_init>
	
	uart2_init();
   11f00:	8a e6       	ldi	r24, 0x6A	; 106
   11f02:	97 e9       	ldi	r25, 0x97	; 151
   11f04:	fc 01       	movw	r30, r24
   11f06:	19 95       	eicall


	//Initiate timers

	timer1_init(); //Initiate Timer 1
   11f08:	0e 94 46 8e 	call	0x11c8c	; 0x11c8c <timer1_init>

	timer5_init(); //Initiate Timer 5
   11f0c:	0e 94 16 8f 	call	0x11e2c	; 0x11e2c <timer5_init>

	timer3_init(); //Initiate Timer 3
   11f10:	0e 94 98 8e 	call	0x11d30	; 0x11d30 <timer3_init>

	timer4_init(); //Initiate Timer 4
   11f14:	0e 94 d7 8e 	call	0x11dae	; 0x11dae <timer4_init>

	

	//Initiate position encoder interrupts

	left_position_encoder_interrupt_init();
   11f18:	0e 94 16 0c 	call	0x182c	; 0x182c <left_position_encoder_interrupt_init>

	right_position_encoder_interrupt_init();
   11f1c:	0e 94 31 0c 	call	0x1862	; 0x1862 <right_position_encoder_interrupt_init>

	

	sei(); //Enables the global interrupts
   11f20:	78 94       	sei

}
   11f22:	df 91       	pop	r29
   11f24:	cf 91       	pop	r28
   11f26:	08 95       	ret

00011f28 <adjacent>:
   7 8 9
   
   adjacent of 5 (1,1)  in above matrix will give indices of 2,6,8,4 
**/
void adjacent(int x1,int y1,int adj[4][2])
{
   11f28:	cf 93       	push	r28
   11f2a:	df 93       	push	r29
   11f2c:	cd b7       	in	r28, 0x3d	; 61
   11f2e:	de b7       	in	r29, 0x3e	; 62
   11f30:	6c 97       	sbiw	r28, 0x1c	; 28
   11f32:	0f b6       	in	r0, 0x3f	; 63
   11f34:	f8 94       	cli
   11f36:	de bf       	out	0x3e, r29	; 62
   11f38:	0f be       	out	0x3f, r0	; 63
   11f3a:	cd bf       	out	0x3d, r28	; 61
   11f3c:	98 8f       	std	Y+24, r25	; 0x18
   11f3e:	8f 8b       	std	Y+23, r24	; 0x17
   11f40:	7a 8f       	std	Y+26, r23	; 0x1a
   11f42:	69 8f       	std	Y+25, r22	; 0x19
   11f44:	5c 8f       	std	Y+28, r21	; 0x1c
   11f46:	4b 8f       	std	Y+27, r20	; 0x1b
    int i=0,x=0,y=0;
   11f48:	1a 82       	std	Y+2, r1	; 0x02
   11f4a:	19 82       	std	Y+1, r1	; 0x01
   11f4c:	1c 82       	std	Y+4, r1	; 0x04
   11f4e:	1b 82       	std	Y+3, r1	; 0x03
   11f50:	1e 82       	std	Y+6, r1	; 0x06
   11f52:	1d 82       	std	Y+5, r1	; 0x05
    int key_x[4]={-1,0,1,0};//N E S W 
   11f54:	ce 01       	movw	r24, r28
   11f56:	07 96       	adiw	r24, 0x07	; 7
   11f58:	24 e9       	ldi	r18, 0x94	; 148
   11f5a:	32 e0       	ldi	r19, 0x02	; 2
   11f5c:	48 e0       	ldi	r20, 0x08	; 8
   11f5e:	f9 01       	movw	r30, r18
   11f60:	00 80       	ld	r0, Z
   11f62:	2f 5f       	subi	r18, 0xFF	; 255
   11f64:	3f 4f       	sbci	r19, 0xFF	; 255
   11f66:	fc 01       	movw	r30, r24
   11f68:	00 82       	st	Z, r0
   11f6a:	01 96       	adiw	r24, 0x01	; 1
   11f6c:	41 50       	subi	r20, 0x01	; 1
   11f6e:	44 23       	and	r20, r20
   11f70:	b1 f7       	brne	.-20     	; 0x11f5e <adjacent+0x36>
    int key_y[4]={0,1,0,-1};
   11f72:	ce 01       	movw	r24, r28
   11f74:	0f 96       	adiw	r24, 0x0f	; 15
   11f76:	2c e9       	ldi	r18, 0x9C	; 156
   11f78:	32 e0       	ldi	r19, 0x02	; 2
   11f7a:	48 e0       	ldi	r20, 0x08	; 8
   11f7c:	f9 01       	movw	r30, r18
   11f7e:	00 80       	ld	r0, Z
   11f80:	2f 5f       	subi	r18, 0xFF	; 255
   11f82:	3f 4f       	sbci	r19, 0xFF	; 255
   11f84:	fc 01       	movw	r30, r24
   11f86:	00 82       	st	Z, r0
   11f88:	01 96       	adiw	r24, 0x01	; 1
   11f8a:	41 50       	subi	r20, 0x01	; 1
   11f8c:	44 23       	and	r20, r20
   11f8e:	b1 f7       	brne	.-20     	; 0x11f7c <adjacent+0x54>
    for(i=0;i<4;i++)
   11f90:	1a 82       	std	Y+2, r1	; 0x02
   11f92:	19 82       	std	Y+1, r1	; 0x01
   11f94:	79 c0       	rjmp	.+242    	; 0x12088 <adjacent+0x160>
	{
        adj[i][0]=-1;
   11f96:	89 81       	ldd	r24, Y+1	; 0x01
   11f98:	9a 81       	ldd	r25, Y+2	; 0x02
   11f9a:	88 0f       	add	r24, r24
   11f9c:	99 1f       	adc	r25, r25
   11f9e:	88 0f       	add	r24, r24
   11fa0:	99 1f       	adc	r25, r25
   11fa2:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11fa4:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11fa6:	82 0f       	add	r24, r18
   11fa8:	93 1f       	adc	r25, r19
   11faa:	2f ef       	ldi	r18, 0xFF	; 255
   11fac:	3f ef       	ldi	r19, 0xFF	; 255
   11fae:	fc 01       	movw	r30, r24
   11fb0:	31 83       	std	Z+1, r19	; 0x01
   11fb2:	20 83       	st	Z, r18
        adj[i][1]=-1;
   11fb4:	89 81       	ldd	r24, Y+1	; 0x01
   11fb6:	9a 81       	ldd	r25, Y+2	; 0x02
   11fb8:	88 0f       	add	r24, r24
   11fba:	99 1f       	adc	r25, r25
   11fbc:	88 0f       	add	r24, r24
   11fbe:	99 1f       	adc	r25, r25
   11fc0:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11fc2:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11fc4:	82 0f       	add	r24, r18
   11fc6:	93 1f       	adc	r25, r19
   11fc8:	2f ef       	ldi	r18, 0xFF	; 255
   11fca:	3f ef       	ldi	r19, 0xFF	; 255
   11fcc:	fc 01       	movw	r30, r24
   11fce:	33 83       	std	Z+3, r19	; 0x03
   11fd0:	22 83       	std	Z+2, r18	; 0x02
        x=x1+key_x[i];
   11fd2:	89 81       	ldd	r24, Y+1	; 0x01
   11fd4:	9a 81       	ldd	r25, Y+2	; 0x02
   11fd6:	88 0f       	add	r24, r24
   11fd8:	99 1f       	adc	r25, r25
   11fda:	9e 01       	movw	r18, r28
   11fdc:	2f 5f       	subi	r18, 0xFF	; 255
   11fde:	3f 4f       	sbci	r19, 0xFF	; 255
   11fe0:	82 0f       	add	r24, r18
   11fe2:	93 1f       	adc	r25, r19
   11fe4:	06 96       	adiw	r24, 0x06	; 6
   11fe6:	fc 01       	movw	r30, r24
   11fe8:	20 81       	ld	r18, Z
   11fea:	31 81       	ldd	r19, Z+1	; 0x01
   11fec:	8f 89       	ldd	r24, Y+23	; 0x17
   11fee:	98 8d       	ldd	r25, Y+24	; 0x18
   11ff0:	82 0f       	add	r24, r18
   11ff2:	93 1f       	adc	r25, r19
   11ff4:	9c 83       	std	Y+4, r25	; 0x04
   11ff6:	8b 83       	std	Y+3, r24	; 0x03
        y=y1+key_y[i];
   11ff8:	89 81       	ldd	r24, Y+1	; 0x01
   11ffa:	9a 81       	ldd	r25, Y+2	; 0x02
   11ffc:	88 0f       	add	r24, r24
   11ffe:	99 1f       	adc	r25, r25
   12000:	9e 01       	movw	r18, r28
   12002:	2f 5f       	subi	r18, 0xFF	; 255
   12004:	3f 4f       	sbci	r19, 0xFF	; 255
   12006:	82 0f       	add	r24, r18
   12008:	93 1f       	adc	r25, r19
   1200a:	0e 96       	adiw	r24, 0x0e	; 14
   1200c:	fc 01       	movw	r30, r24
   1200e:	20 81       	ld	r18, Z
   12010:	31 81       	ldd	r19, Z+1	; 0x01
   12012:	89 8d       	ldd	r24, Y+25	; 0x19
   12014:	9a 8d       	ldd	r25, Y+26	; 0x1a
   12016:	82 0f       	add	r24, r18
   12018:	93 1f       	adc	r25, r19
   1201a:	9e 83       	std	Y+6, r25	; 0x06
   1201c:	8d 83       	std	Y+5, r24	; 0x05
        if(x>-1 && y>-1 && x<6 && y<6)
   1201e:	8b 81       	ldd	r24, Y+3	; 0x03
   12020:	9c 81       	ldd	r25, Y+4	; 0x04
   12022:	99 23       	and	r25, r25
   12024:	64 f1       	brlt	.+88     	; 0x1207e <adjacent+0x156>
   12026:	8d 81       	ldd	r24, Y+5	; 0x05
   12028:	9e 81       	ldd	r25, Y+6	; 0x06
   1202a:	99 23       	and	r25, r25
   1202c:	44 f1       	brlt	.+80     	; 0x1207e <adjacent+0x156>
   1202e:	8b 81       	ldd	r24, Y+3	; 0x03
   12030:	9c 81       	ldd	r25, Y+4	; 0x04
   12032:	86 30       	cpi	r24, 0x06	; 6
   12034:	91 05       	cpc	r25, r1
   12036:	1c f5       	brge	.+70     	; 0x1207e <adjacent+0x156>
   12038:	8d 81       	ldd	r24, Y+5	; 0x05
   1203a:	9e 81       	ldd	r25, Y+6	; 0x06
   1203c:	86 30       	cpi	r24, 0x06	; 6
   1203e:	91 05       	cpc	r25, r1
   12040:	f4 f4       	brge	.+60     	; 0x1207e <adjacent+0x156>
		{
            adj[i][0]=x;
   12042:	89 81       	ldd	r24, Y+1	; 0x01
   12044:	9a 81       	ldd	r25, Y+2	; 0x02
   12046:	88 0f       	add	r24, r24
   12048:	99 1f       	adc	r25, r25
   1204a:	88 0f       	add	r24, r24
   1204c:	99 1f       	adc	r25, r25
   1204e:	2b 8d       	ldd	r18, Y+27	; 0x1b
   12050:	3c 8d       	ldd	r19, Y+28	; 0x1c
   12052:	82 0f       	add	r24, r18
   12054:	93 1f       	adc	r25, r19
   12056:	2b 81       	ldd	r18, Y+3	; 0x03
   12058:	3c 81       	ldd	r19, Y+4	; 0x04
   1205a:	fc 01       	movw	r30, r24
   1205c:	31 83       	std	Z+1, r19	; 0x01
   1205e:	20 83       	st	Z, r18
            adj[i][1]=y;
   12060:	89 81       	ldd	r24, Y+1	; 0x01
   12062:	9a 81       	ldd	r25, Y+2	; 0x02
   12064:	88 0f       	add	r24, r24
   12066:	99 1f       	adc	r25, r25
   12068:	88 0f       	add	r24, r24
   1206a:	99 1f       	adc	r25, r25
   1206c:	2b 8d       	ldd	r18, Y+27	; 0x1b
   1206e:	3c 8d       	ldd	r19, Y+28	; 0x1c
   12070:	82 0f       	add	r24, r18
   12072:	93 1f       	adc	r25, r19
   12074:	2d 81       	ldd	r18, Y+5	; 0x05
   12076:	3e 81       	ldd	r19, Y+6	; 0x06
   12078:	fc 01       	movw	r30, r24
   1207a:	33 83       	std	Z+3, r19	; 0x03
   1207c:	22 83       	std	Z+2, r18	; 0x02
void adjacent(int x1,int y1,int adj[4][2])
{
    int i=0,x=0,y=0;
    int key_x[4]={-1,0,1,0};//N E S W 
    int key_y[4]={0,1,0,-1};
    for(i=0;i<4;i++)
   1207e:	89 81       	ldd	r24, Y+1	; 0x01
   12080:	9a 81       	ldd	r25, Y+2	; 0x02
   12082:	01 96       	adiw	r24, 0x01	; 1
   12084:	9a 83       	std	Y+2, r25	; 0x02
   12086:	89 83       	std	Y+1, r24	; 0x01
   12088:	89 81       	ldd	r24, Y+1	; 0x01
   1208a:	9a 81       	ldd	r25, Y+2	; 0x02
   1208c:	84 30       	cpi	r24, 0x04	; 4
   1208e:	91 05       	cpc	r25, r1
   12090:	0c f4       	brge	.+2      	; 0x12094 <adjacent+0x16c>
   12092:	81 cf       	rjmp	.-254    	; 0x11f96 <adjacent+0x6e>
		{
            adj[i][0]=x;
            adj[i][1]=y;
        }
    }
}
   12094:	6c 96       	adiw	r28, 0x1c	; 28
   12096:	0f b6       	in	r0, 0x3f	; 63
   12098:	f8 94       	cli
   1209a:	de bf       	out	0x3e, r29	; 62
   1209c:	0f be       	out	0x3f, r0	; 63
   1209e:	cd bf       	out	0x3d, r28	; 61
   120a0:	df 91       	pop	r29
   120a2:	cf 91       	pop	r28
   120a4:	08 95       	ret

000120a6 <min_dis>:

If the selected node is not in the 'included' array that is the, completed intermediate array then min is updated and correspoding index is recorded.
**/

int min_dis(int dist[], int included[])
{
   120a6:	cf 93       	push	r28
   120a8:	df 93       	push	r29
   120aa:	cd b7       	in	r28, 0x3d	; 61
   120ac:	de b7       	in	r29, 0x3e	; 62
   120ae:	2a 97       	sbiw	r28, 0x0a	; 10
   120b0:	0f b6       	in	r0, 0x3f	; 63
   120b2:	f8 94       	cli
   120b4:	de bf       	out	0x3e, r29	; 62
   120b6:	0f be       	out	0x3f, r0	; 63
   120b8:	cd bf       	out	0x3d, r28	; 61
   120ba:	98 87       	std	Y+8, r25	; 0x08
   120bc:	8f 83       	std	Y+7, r24	; 0x07
   120be:	7a 87       	std	Y+10, r23	; 0x0a
   120c0:	69 87       	std	Y+9, r22	; 0x09
    int min=INF,min_index=0,i=0;
   120c2:	87 ee       	ldi	r24, 0xE7	; 231
   120c4:	93 e0       	ldi	r25, 0x03	; 3
   120c6:	9a 83       	std	Y+2, r25	; 0x02
   120c8:	89 83       	std	Y+1, r24	; 0x01
   120ca:	1c 82       	std	Y+4, r1	; 0x04
   120cc:	1b 82       	std	Y+3, r1	; 0x03
   120ce:	1e 82       	std	Y+6, r1	; 0x06
   120d0:	1d 82       	std	Y+5, r1	; 0x05
	// Starting min with Infinites
    for(i=0;i<36;i++)
   120d2:	1e 82       	std	Y+6, r1	; 0x06
   120d4:	1d 82       	std	Y+5, r1	; 0x05
   120d6:	33 c0       	rjmp	.+102    	; 0x1213e <min_dis+0x98>
    {
        if((included[i]==FALSE)&&dist[i]<min)
   120d8:	8d 81       	ldd	r24, Y+5	; 0x05
   120da:	9e 81       	ldd	r25, Y+6	; 0x06
   120dc:	88 0f       	add	r24, r24
   120de:	99 1f       	adc	r25, r25
   120e0:	29 85       	ldd	r18, Y+9	; 0x09
   120e2:	3a 85       	ldd	r19, Y+10	; 0x0a
   120e4:	82 0f       	add	r24, r18
   120e6:	93 1f       	adc	r25, r19
   120e8:	fc 01       	movw	r30, r24
   120ea:	80 81       	ld	r24, Z
   120ec:	91 81       	ldd	r25, Z+1	; 0x01
   120ee:	00 97       	sbiw	r24, 0x00	; 0
   120f0:	09 f5       	brne	.+66     	; 0x12134 <min_dis+0x8e>
   120f2:	8d 81       	ldd	r24, Y+5	; 0x05
   120f4:	9e 81       	ldd	r25, Y+6	; 0x06
   120f6:	88 0f       	add	r24, r24
   120f8:	99 1f       	adc	r25, r25
   120fa:	2f 81       	ldd	r18, Y+7	; 0x07
   120fc:	38 85       	ldd	r19, Y+8	; 0x08
   120fe:	82 0f       	add	r24, r18
   12100:	93 1f       	adc	r25, r19
   12102:	fc 01       	movw	r30, r24
   12104:	20 81       	ld	r18, Z
   12106:	31 81       	ldd	r19, Z+1	; 0x01
   12108:	89 81       	ldd	r24, Y+1	; 0x01
   1210a:	9a 81       	ldd	r25, Y+2	; 0x02
   1210c:	28 17       	cp	r18, r24
   1210e:	39 07       	cpc	r19, r25
   12110:	8c f4       	brge	.+34     	; 0x12134 <min_dis+0x8e>
        {
            min=dist[i];
   12112:	8d 81       	ldd	r24, Y+5	; 0x05
   12114:	9e 81       	ldd	r25, Y+6	; 0x06
   12116:	88 0f       	add	r24, r24
   12118:	99 1f       	adc	r25, r25
   1211a:	2f 81       	ldd	r18, Y+7	; 0x07
   1211c:	38 85       	ldd	r19, Y+8	; 0x08
   1211e:	82 0f       	add	r24, r18
   12120:	93 1f       	adc	r25, r19
   12122:	fc 01       	movw	r30, r24
   12124:	80 81       	ld	r24, Z
   12126:	91 81       	ldd	r25, Z+1	; 0x01
   12128:	9a 83       	std	Y+2, r25	; 0x02
   1212a:	89 83       	std	Y+1, r24	; 0x01
            min_index=i;
   1212c:	8d 81       	ldd	r24, Y+5	; 0x05
   1212e:	9e 81       	ldd	r25, Y+6	; 0x06
   12130:	9c 83       	std	Y+4, r25	; 0x04
   12132:	8b 83       	std	Y+3, r24	; 0x03

int min_dis(int dist[], int included[])
{
    int min=INF,min_index=0,i=0;
	// Starting min with Infinites
    for(i=0;i<36;i++)
   12134:	8d 81       	ldd	r24, Y+5	; 0x05
   12136:	9e 81       	ldd	r25, Y+6	; 0x06
   12138:	01 96       	adiw	r24, 0x01	; 1
   1213a:	9e 83       	std	Y+6, r25	; 0x06
   1213c:	8d 83       	std	Y+5, r24	; 0x05
   1213e:	8d 81       	ldd	r24, Y+5	; 0x05
   12140:	9e 81       	ldd	r25, Y+6	; 0x06
   12142:	84 32       	cpi	r24, 0x24	; 36
   12144:	91 05       	cpc	r25, r1
   12146:	44 f2       	brlt	.-112    	; 0x120d8 <min_dis+0x32>
        {
            min=dist[i];
            min_index=i;
        }
    }
    return min_index;
   12148:	8b 81       	ldd	r24, Y+3	; 0x03
   1214a:	9c 81       	ldd	r25, Y+4	; 0x04
}
   1214c:	2a 96       	adiw	r28, 0x0a	; 10
   1214e:	0f b6       	in	r0, 0x3f	; 63
   12150:	f8 94       	cli
   12152:	de bf       	out	0x3e, r29	; 62
   12154:	0f be       	out	0x3f, r0	; 63
   12156:	cd bf       	out	0x3d, r28	; 61
   12158:	df 91       	pop	r29
   1215a:	cf 91       	pop	r28
   1215c:	08 95       	ret

0001215e <align>:
		  
		  The turn count is mod( 3 ) to make sure the turn count is kept between 0 and 3                                                               */
/************************************************************************/

char align(int turn_count)
{
   1215e:	cf 93       	push	r28
   12160:	df 93       	push	r29
   12162:	0f 92       	push	r0
   12164:	0f 92       	push	r0
   12166:	cd b7       	in	r28, 0x3d	; 61
   12168:	de b7       	in	r29, 0x3e	; 62
   1216a:	9a 83       	std	Y+2, r25	; 0x02
   1216c:	89 83       	std	Y+1, r24	; 0x01
turn_count=turn_count%3;
   1216e:	89 81       	ldd	r24, Y+1	; 0x01
   12170:	9a 81       	ldd	r25, Y+2	; 0x02
   12172:	23 e0       	ldi	r18, 0x03	; 3
   12174:	30 e0       	ldi	r19, 0x00	; 0
   12176:	b9 01       	movw	r22, r18
   12178:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   1217c:	9a 83       	std	Y+2, r25	; 0x02
   1217e:	89 83       	std	Y+1, r24	; 0x01
if(turn_count==2||turn_count==-2)
   12180:	89 81       	ldd	r24, Y+1	; 0x01
   12182:	9a 81       	ldd	r25, Y+2	; 0x02
   12184:	82 30       	cpi	r24, 0x02	; 2
   12186:	91 05       	cpc	r25, r1
   12188:	31 f0       	breq	.+12     	; 0x12196 <align+0x38>
   1218a:	89 81       	ldd	r24, Y+1	; 0x01
   1218c:	9a 81       	ldd	r25, Y+2	; 0x02
   1218e:	2f ef       	ldi	r18, 0xFF	; 255
   12190:	8e 3f       	cpi	r24, 0xFE	; 254
   12192:	92 07       	cpc	r25, r18
   12194:	11 f4       	brne	.+4      	; 0x1219a <align+0x3c>
	return 'U';
   12196:	85 e5       	ldi	r24, 0x55	; 85
   12198:	1b c0       	rjmp	.+54     	; 0x121d0 <align+0x72>
else if(turn_count==1||turn_count==-3)
   1219a:	89 81       	ldd	r24, Y+1	; 0x01
   1219c:	9a 81       	ldd	r25, Y+2	; 0x02
   1219e:	81 30       	cpi	r24, 0x01	; 1
   121a0:	91 05       	cpc	r25, r1
   121a2:	31 f0       	breq	.+12     	; 0x121b0 <align+0x52>
   121a4:	89 81       	ldd	r24, Y+1	; 0x01
   121a6:	9a 81       	ldd	r25, Y+2	; 0x02
   121a8:	2f ef       	ldi	r18, 0xFF	; 255
   121aa:	8d 3f       	cpi	r24, 0xFD	; 253
   121ac:	92 07       	cpc	r25, r18
   121ae:	11 f4       	brne	.+4      	; 0x121b4 <align+0x56>
	return 'L';
   121b0:	8c e4       	ldi	r24, 0x4C	; 76
   121b2:	0e c0       	rjmp	.+28     	; 0x121d0 <align+0x72>
else if(turn_count==-1||turn_count==3)
   121b4:	89 81       	ldd	r24, Y+1	; 0x01
   121b6:	9a 81       	ldd	r25, Y+2	; 0x02
   121b8:	2f ef       	ldi	r18, 0xFF	; 255
   121ba:	8f 3f       	cpi	r24, 0xFF	; 255
   121bc:	92 07       	cpc	r25, r18
   121be:	29 f0       	breq	.+10     	; 0x121ca <align+0x6c>
   121c0:	89 81       	ldd	r24, Y+1	; 0x01
   121c2:	9a 81       	ldd	r25, Y+2	; 0x02
   121c4:	83 30       	cpi	r24, 0x03	; 3
   121c6:	91 05       	cpc	r25, r1
   121c8:	11 f4       	brne	.+4      	; 0x121ce <align+0x70>
	return 'R';
   121ca:	82 e5       	ldi	r24, 0x52	; 82
   121cc:	01 c0       	rjmp	.+2      	; 0x121d0 <align+0x72>
else
	return 'N';
   121ce:	8e e4       	ldi	r24, 0x4E	; 78
}
   121d0:	0f 90       	pop	r0
   121d2:	0f 90       	pop	r0
   121d4:	df 91       	pop	r29
   121d6:	cf 91       	pop	r28
   121d8:	08 95       	ret

000121da <rotate>:
  KEY NOTE :
  DIVIDING NODE NUMBER WITH MAX COLUMN GIVES X coordinate.
  MOD of NODE NUMBER WITH MAX ROW NUMBER GIVES Y coordinate.                                                                    */
/************************************************************************/
char rotate(int current,int next,int *turn_count)
{
   121da:	cf 93       	push	r28
   121dc:	df 93       	push	r29
   121de:	cd b7       	in	r28, 0x3d	; 61
   121e0:	de b7       	in	r29, 0x3e	; 62
   121e2:	2a 97       	sbiw	r28, 0x0a	; 10
   121e4:	0f b6       	in	r0, 0x3f	; 63
   121e6:	f8 94       	cli
   121e8:	de bf       	out	0x3e, r29	; 62
   121ea:	0f be       	out	0x3f, r0	; 63
   121ec:	cd bf       	out	0x3d, r28	; 61
   121ee:	9e 83       	std	Y+6, r25	; 0x06
   121f0:	8d 83       	std	Y+5, r24	; 0x05
   121f2:	78 87       	std	Y+8, r23	; 0x08
   121f4:	6f 83       	std	Y+7, r22	; 0x07
   121f6:	5a 87       	std	Y+10, r21	; 0x0a
   121f8:	49 87       	std	Y+9, r20	; 0x09
     int dir_x,dir_y;
     dir_x=(current/6)-(next/6);
   121fa:	8d 81       	ldd	r24, Y+5	; 0x05
   121fc:	9e 81       	ldd	r25, Y+6	; 0x06
   121fe:	26 e0       	ldi	r18, 0x06	; 6
   12200:	30 e0       	ldi	r19, 0x00	; 0
   12202:	b9 01       	movw	r22, r18
   12204:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   12208:	9b 01       	movw	r18, r22
   1220a:	8f 81       	ldd	r24, Y+7	; 0x07
   1220c:	98 85       	ldd	r25, Y+8	; 0x08
   1220e:	46 e0       	ldi	r20, 0x06	; 6
   12210:	50 e0       	ldi	r21, 0x00	; 0
   12212:	ba 01       	movw	r22, r20
   12214:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   12218:	ab 01       	movw	r20, r22
   1221a:	ca 01       	movw	r24, r20
   1221c:	a9 01       	movw	r20, r18
   1221e:	48 1b       	sub	r20, r24
   12220:	59 0b       	sbc	r21, r25
   12222:	ca 01       	movw	r24, r20
   12224:	9a 83       	std	Y+2, r25	; 0x02
   12226:	89 83       	std	Y+1, r24	; 0x01
     dir_y=(current%6)-(next%6);
   12228:	8d 81       	ldd	r24, Y+5	; 0x05
   1222a:	9e 81       	ldd	r25, Y+6	; 0x06
   1222c:	26 e0       	ldi	r18, 0x06	; 6
   1222e:	30 e0       	ldi	r19, 0x00	; 0
   12230:	b9 01       	movw	r22, r18
   12232:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   12236:	9c 01       	movw	r18, r24
   12238:	8f 81       	ldd	r24, Y+7	; 0x07
   1223a:	98 85       	ldd	r25, Y+8	; 0x08
   1223c:	46 e0       	ldi	r20, 0x06	; 6
   1223e:	50 e0       	ldi	r21, 0x00	; 0
   12240:	ba 01       	movw	r22, r20
   12242:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   12246:	f9 01       	movw	r30, r18
   12248:	e8 1b       	sub	r30, r24
   1224a:	f9 0b       	sbc	r31, r25
   1224c:	cf 01       	movw	r24, r30
   1224e:	9c 83       	std	Y+4, r25	; 0x04
   12250:	8b 83       	std	Y+3, r24	; 0x03
     if(dir_y==0)
   12252:	8b 81       	ldd	r24, Y+3	; 0x03
   12254:	9c 81       	ldd	r25, Y+4	; 0x04
   12256:	00 97       	sbiw	r24, 0x00	; 0
   12258:	a9 f4       	brne	.+42     	; 0x12284 <rotate+0xaa>
	 {
        if(dir_x<0)
   1225a:	89 81       	ldd	r24, Y+1	; 0x01
   1225c:	9a 81       	ldd	r25, Y+2	; 0x02
   1225e:	99 23       	and	r25, r25
   12260:	7c f4       	brge	.+30     	; 0x12280 <rotate+0xa6>
		{
		// printf("Uturn\n");
			*turn_count+=2;
   12262:	89 85       	ldd	r24, Y+9	; 0x09
   12264:	9a 85       	ldd	r25, Y+10	; 0x0a
   12266:	fc 01       	movw	r30, r24
   12268:	80 81       	ld	r24, Z
   1226a:	91 81       	ldd	r25, Z+1	; 0x01
   1226c:	9c 01       	movw	r18, r24
   1226e:	2e 5f       	subi	r18, 0xFE	; 254
   12270:	3f 4f       	sbci	r19, 0xFF	; 255
   12272:	89 85       	ldd	r24, Y+9	; 0x09
   12274:	9a 85       	ldd	r25, Y+10	; 0x0a
   12276:	fc 01       	movw	r30, r24
   12278:	31 83       	std	Z+1, r19	; 0x01
   1227a:	20 83       	st	Z, r18
			return 'U';
   1227c:	85 e5       	ldi	r24, 0x55	; 85
   1227e:	3d c0       	rjmp	.+122    	; 0x122fa <rotate+0x120>
			p_ny=0;
        }
        else
        {
        //printf("NC\n");
			return 'N';
   12280:	8e e4       	ldi	r24, 0x4E	; 78
   12282:	3b c0       	rjmp	.+118    	; 0x122fa <rotate+0x120>
        }
     }
     else if(dir_x==0)
   12284:	89 81       	ldd	r24, Y+1	; 0x01
   12286:	9a 81       	ldd	r25, Y+2	; 0x02
   12288:	00 97       	sbiw	r24, 0x00	; 0
   1228a:	b1 f5       	brne	.+108    	; 0x122f8 <rotate+0x11e>
     {
      if(dir_y<0)
   1228c:	8b 81       	ldd	r24, Y+3	; 0x03
   1228e:	9c 81       	ldd	r25, Y+4	; 0x04
   12290:	99 23       	and	r25, r25
   12292:	cc f4       	brge	.+50     	; 0x122c6 <rotate+0xec>
	  {
      //printf("Right\n");
		*turn_count=*turn_count+1;
   12294:	89 85       	ldd	r24, Y+9	; 0x09
   12296:	9a 85       	ldd	r25, Y+10	; 0x0a
   12298:	fc 01       	movw	r30, r24
   1229a:	80 81       	ld	r24, Z
   1229c:	91 81       	ldd	r25, Z+1	; 0x01
   1229e:	9c 01       	movw	r18, r24
   122a0:	2f 5f       	subi	r18, 0xFF	; 255
   122a2:	3f 4f       	sbci	r19, 0xFF	; 255
   122a4:	89 85       	ldd	r24, Y+9	; 0x09
   122a6:	9a 85       	ldd	r25, Y+10	; 0x0a
   122a8:	fc 01       	movw	r30, r24
   122aa:	31 83       	std	Z+1, r19	; 0x01
   122ac:	20 83       	st	Z, r18
		p_nx=0;
   122ae:	10 92 1e 04 	sts	0x041E, r1
   122b2:	10 92 1d 04 	sts	0x041D, r1
		p_ny=1;
   122b6:	81 e0       	ldi	r24, 0x01	; 1
   122b8:	90 e0       	ldi	r25, 0x00	; 0
   122ba:	90 93 20 04 	sts	0x0420, r25
   122be:	80 93 1f 04 	sts	0x041F, r24
		return 'R';
   122c2:	82 e5       	ldi	r24, 0x52	; 82
   122c4:	1a c0       	rjmp	.+52     	; 0x122fa <rotate+0x120>
      }
      else
	  {
      //printf("Left\n");
		p_nx=0;
   122c6:	10 92 1e 04 	sts	0x041E, r1
   122ca:	10 92 1d 04 	sts	0x041D, r1
		p_ny=-1;
   122ce:	8f ef       	ldi	r24, 0xFF	; 255
   122d0:	9f ef       	ldi	r25, 0xFF	; 255
   122d2:	90 93 20 04 	sts	0x0420, r25
   122d6:	80 93 1f 04 	sts	0x041F, r24
		*turn_count=*turn_count-1;
   122da:	89 85       	ldd	r24, Y+9	; 0x09
   122dc:	9a 85       	ldd	r25, Y+10	; 0x0a
   122de:	fc 01       	movw	r30, r24
   122e0:	80 81       	ld	r24, Z
   122e2:	91 81       	ldd	r25, Z+1	; 0x01
   122e4:	9c 01       	movw	r18, r24
   122e6:	21 50       	subi	r18, 0x01	; 1
   122e8:	30 40       	sbci	r19, 0x00	; 0
   122ea:	89 85       	ldd	r24, Y+9	; 0x09
   122ec:	9a 85       	ldd	r25, Y+10	; 0x0a
   122ee:	fc 01       	movw	r30, r24
   122f0:	31 83       	std	Z+1, r19	; 0x01
   122f2:	20 83       	st	Z, r18
		return 'L';
   122f4:	8c e4       	ldi	r24, 0x4C	; 76
   122f6:	01 c0       	rjmp	.+2      	; 0x122fa <rotate+0x120>
   122f8:	00 c0       	rjmp	.+0      	; 0x122fa <rotate+0x120>
      }
    }
}
   122fa:	2a 96       	adiw	r28, 0x0a	; 10
   122fc:	0f b6       	in	r0, 0x3f	; 63
   122fe:	f8 94       	cli
   12300:	de bf       	out	0x3e, r29	; 62
   12302:	0f be       	out	0x3f, r0	; 63
   12304:	cd bf       	out	0x3d, r28	; 61
   12306:	df 91       	pop	r29
   12308:	cf 91       	pop	r28
   1230a:	08 95       	ret

0001230c <direction>:

// Figuring out what direction to take at each node using the node numbers obtained from the Dijkstras Algo.
// Eg: 1 2 3 4 5
//     R n n n L
char direction(int current,int next,int *turn_count)
{
   1230c:	cf 93       	push	r28
   1230e:	df 93       	push	r29
   12310:	cd b7       	in	r28, 0x3d	; 61
   12312:	de b7       	in	r29, 0x3e	; 62
   12314:	27 97       	sbiw	r28, 0x07	; 7
   12316:	0f b6       	in	r0, 0x3f	; 63
   12318:	f8 94       	cli
   1231a:	de bf       	out	0x3e, r29	; 62
   1231c:	0f be       	out	0x3f, r0	; 63
   1231e:	cd bf       	out	0x3d, r28	; 61
   12320:	9b 83       	std	Y+3, r25	; 0x03
   12322:	8a 83       	std	Y+2, r24	; 0x02
   12324:	7d 83       	std	Y+5, r23	; 0x05
   12326:	6c 83       	std	Y+4, r22	; 0x04
   12328:	5f 83       	std	Y+7, r21	; 0x07
   1232a:	4e 83       	std	Y+6, r20	; 0x06
     n_nx=(next/6)-(current/6);
   1232c:	8c 81       	ldd	r24, Y+4	; 0x04
   1232e:	9d 81       	ldd	r25, Y+5	; 0x05
   12330:	26 e0       	ldi	r18, 0x06	; 6
   12332:	30 e0       	ldi	r19, 0x00	; 0
   12334:	b9 01       	movw	r22, r18
   12336:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   1233a:	9b 01       	movw	r18, r22
   1233c:	8a 81       	ldd	r24, Y+2	; 0x02
   1233e:	9b 81       	ldd	r25, Y+3	; 0x03
   12340:	46 e0       	ldi	r20, 0x06	; 6
   12342:	50 e0       	ldi	r21, 0x00	; 0
   12344:	ba 01       	movw	r22, r20
   12346:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   1234a:	ab 01       	movw	r20, r22
   1234c:	ca 01       	movw	r24, r20
   1234e:	a9 01       	movw	r20, r18
   12350:	48 1b       	sub	r20, r24
   12352:	59 0b       	sbc	r21, r25
   12354:	ca 01       	movw	r24, r20
   12356:	90 93 22 04 	sts	0x0422, r25
   1235a:	80 93 21 04 	sts	0x0421, r24
     n_ny=(next%6)-(current%6);
   1235e:	8c 81       	ldd	r24, Y+4	; 0x04
   12360:	9d 81       	ldd	r25, Y+5	; 0x05
   12362:	26 e0       	ldi	r18, 0x06	; 6
   12364:	30 e0       	ldi	r19, 0x00	; 0
   12366:	b9 01       	movw	r22, r18
   12368:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   1236c:	9c 01       	movw	r18, r24
   1236e:	8a 81       	ldd	r24, Y+2	; 0x02
   12370:	9b 81       	ldd	r25, Y+3	; 0x03
   12372:	46 e0       	ldi	r20, 0x06	; 6
   12374:	50 e0       	ldi	r21, 0x00	; 0
   12376:	ba 01       	movw	r22, r20
   12378:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   1237c:	f9 01       	movw	r30, r18
   1237e:	e8 1b       	sub	r30, r24
   12380:	f9 0b       	sbc	r31, r25
   12382:	cf 01       	movw	r24, r30
   12384:	90 93 24 04 	sts	0x0424, r25
   12388:	80 93 23 04 	sts	0x0423, r24
     char out='o';
   1238c:	8f e6       	ldi	r24, 0x6F	; 111
   1238e:	89 83       	std	Y+1, r24	; 0x01
	 
     if(n_nx==p_nx && n_ny==p_ny)
   12390:	20 91 21 04 	lds	r18, 0x0421
   12394:	30 91 22 04 	lds	r19, 0x0422
   12398:	80 91 1d 04 	lds	r24, 0x041D
   1239c:	90 91 1e 04 	lds	r25, 0x041E
   123a0:	28 17       	cp	r18, r24
   123a2:	39 07       	cpc	r19, r25
   123a4:	71 f4       	brne	.+28     	; 0x123c2 <direction+0xb6>
   123a6:	20 91 23 04 	lds	r18, 0x0423
   123aa:	30 91 24 04 	lds	r19, 0x0424
   123ae:	80 91 1f 04 	lds	r24, 0x041F
   123b2:	90 91 20 04 	lds	r25, 0x0420
   123b6:	28 17       	cp	r18, r24
   123b8:	39 07       	cpc	r19, r25
   123ba:	19 f4       	brne	.+6      	; 0x123c2 <direction+0xb6>
	 {
		out='n';
   123bc:	8e e6       	ldi	r24, 0x6E	; 110
   123be:	89 83       	std	Y+1, r24	; 0x01
   123c0:	82 c0       	rjmp	.+260    	; 0x124c6 <direction+0x1ba>
     }
     else if(n_nx==(-p_nx) && n_ny==(-p_ny))
   123c2:	80 91 1d 04 	lds	r24, 0x041D
   123c6:	90 91 1e 04 	lds	r25, 0x041E
   123ca:	22 27       	eor	r18, r18
   123cc:	33 27       	eor	r19, r19
   123ce:	28 1b       	sub	r18, r24
   123d0:	39 0b       	sbc	r19, r25
   123d2:	80 91 21 04 	lds	r24, 0x0421
   123d6:	90 91 22 04 	lds	r25, 0x0422
   123da:	28 17       	cp	r18, r24
   123dc:	39 07       	cpc	r19, r25
   123de:	91 f4       	brne	.+36     	; 0x12404 <direction+0xf8>
   123e0:	80 91 1f 04 	lds	r24, 0x041F
   123e4:	90 91 20 04 	lds	r25, 0x0420
   123e8:	22 27       	eor	r18, r18
   123ea:	33 27       	eor	r19, r19
   123ec:	28 1b       	sub	r18, r24
   123ee:	39 0b       	sbc	r19, r25
   123f0:	80 91 23 04 	lds	r24, 0x0423
   123f4:	90 91 24 04 	lds	r25, 0x0424
   123f8:	28 17       	cp	r18, r24
   123fa:	39 07       	cpc	r19, r25
   123fc:	19 f4       	brne	.+6      	; 0x12404 <direction+0xf8>
	 {
		//*turn_count+=2;
		out='n';
   123fe:	8e e6       	ldi	r24, 0x6E	; 110
   12400:	89 83       	std	Y+1, r24	; 0x01
   12402:	61 c0       	rjmp	.+194    	; 0x124c6 <direction+0x1ba>
     }
     else if(p_nx!=0)
   12404:	80 91 1d 04 	lds	r24, 0x041D
   12408:	90 91 1e 04 	lds	r25, 0x041E
   1240c:	00 97       	sbiw	r24, 0x00	; 0
   1240e:	59 f1       	breq	.+86     	; 0x12466 <direction+0x15a>
	 {
		if((p_nx==n_ny ))
   12410:	20 91 1d 04 	lds	r18, 0x041D
   12414:	30 91 1e 04 	lds	r19, 0x041E
   12418:	80 91 23 04 	lds	r24, 0x0423
   1241c:	90 91 24 04 	lds	r25, 0x0424
   12420:	28 17       	cp	r18, r24
   12422:	39 07       	cpc	r19, r25
   12424:	81 f4       	brne	.+32     	; 0x12446 <direction+0x13a>
		{
			*turn_count+=-1;
   12426:	8e 81       	ldd	r24, Y+6	; 0x06
   12428:	9f 81       	ldd	r25, Y+7	; 0x07
   1242a:	fc 01       	movw	r30, r24
   1242c:	80 81       	ld	r24, Z
   1242e:	91 81       	ldd	r25, Z+1	; 0x01
   12430:	9c 01       	movw	r18, r24
   12432:	21 50       	subi	r18, 0x01	; 1
   12434:	30 40       	sbci	r19, 0x00	; 0
   12436:	8e 81       	ldd	r24, Y+6	; 0x06
   12438:	9f 81       	ldd	r25, Y+7	; 0x07
   1243a:	fc 01       	movw	r30, r24
   1243c:	31 83       	std	Z+1, r19	; 0x01
   1243e:	20 83       	st	Z, r18
			out= 'l';
   12440:	8c e6       	ldi	r24, 0x6C	; 108
   12442:	89 83       	std	Y+1, r24	; 0x01
   12444:	40 c0       	rjmp	.+128    	; 0x124c6 <direction+0x1ba>
		}
		else
		{
			*turn_count+=1;
   12446:	8e 81       	ldd	r24, Y+6	; 0x06
   12448:	9f 81       	ldd	r25, Y+7	; 0x07
   1244a:	fc 01       	movw	r30, r24
   1244c:	80 81       	ld	r24, Z
   1244e:	91 81       	ldd	r25, Z+1	; 0x01
   12450:	9c 01       	movw	r18, r24
   12452:	2f 5f       	subi	r18, 0xFF	; 255
   12454:	3f 4f       	sbci	r19, 0xFF	; 255
   12456:	8e 81       	ldd	r24, Y+6	; 0x06
   12458:	9f 81       	ldd	r25, Y+7	; 0x07
   1245a:	fc 01       	movw	r30, r24
   1245c:	31 83       	std	Z+1, r19	; 0x01
   1245e:	20 83       	st	Z, r18
			out= 'r';
   12460:	82 e7       	ldi	r24, 0x72	; 114
   12462:	89 83       	std	Y+1, r24	; 0x01
   12464:	30 c0       	rjmp	.+96     	; 0x124c6 <direction+0x1ba>
		}
    }
    else if(p_ny!=0)
   12466:	80 91 1f 04 	lds	r24, 0x041F
   1246a:	90 91 20 04 	lds	r25, 0x0420
   1246e:	00 97       	sbiw	r24, 0x00	; 0
   12470:	51 f1       	breq	.+84     	; 0x124c6 <direction+0x1ba>
	{
		if(p_ny==n_nx)
   12472:	20 91 1f 04 	lds	r18, 0x041F
   12476:	30 91 20 04 	lds	r19, 0x0420
   1247a:	80 91 21 04 	lds	r24, 0x0421
   1247e:	90 91 22 04 	lds	r25, 0x0422
   12482:	28 17       	cp	r18, r24
   12484:	39 07       	cpc	r19, r25
   12486:	81 f4       	brne	.+32     	; 0x124a8 <direction+0x19c>
		{
			*turn_count+=1;
   12488:	8e 81       	ldd	r24, Y+6	; 0x06
   1248a:	9f 81       	ldd	r25, Y+7	; 0x07
   1248c:	fc 01       	movw	r30, r24
   1248e:	80 81       	ld	r24, Z
   12490:	91 81       	ldd	r25, Z+1	; 0x01
   12492:	9c 01       	movw	r18, r24
   12494:	2f 5f       	subi	r18, 0xFF	; 255
   12496:	3f 4f       	sbci	r19, 0xFF	; 255
   12498:	8e 81       	ldd	r24, Y+6	; 0x06
   1249a:	9f 81       	ldd	r25, Y+7	; 0x07
   1249c:	fc 01       	movw	r30, r24
   1249e:	31 83       	std	Z+1, r19	; 0x01
   124a0:	20 83       	st	Z, r18
			out= 'r';
   124a2:	82 e7       	ldi	r24, 0x72	; 114
   124a4:	89 83       	std	Y+1, r24	; 0x01
   124a6:	0f c0       	rjmp	.+30     	; 0x124c6 <direction+0x1ba>
		}
		else
		{
		*turn_count-=1;
   124a8:	8e 81       	ldd	r24, Y+6	; 0x06
   124aa:	9f 81       	ldd	r25, Y+7	; 0x07
   124ac:	fc 01       	movw	r30, r24
   124ae:	80 81       	ld	r24, Z
   124b0:	91 81       	ldd	r25, Z+1	; 0x01
   124b2:	9c 01       	movw	r18, r24
   124b4:	21 50       	subi	r18, 0x01	; 1
   124b6:	30 40       	sbci	r19, 0x00	; 0
   124b8:	8e 81       	ldd	r24, Y+6	; 0x06
   124ba:	9f 81       	ldd	r25, Y+7	; 0x07
   124bc:	fc 01       	movw	r30, r24
   124be:	31 83       	std	Z+1, r19	; 0x01
   124c0:	20 83       	st	Z, r18
		out= 'l';
   124c2:	8c e6       	ldi	r24, 0x6C	; 108
   124c4:	89 83       	std	Y+1, r24	; 0x01
		}
    }
    p_nx=n_nx;
   124c6:	80 91 21 04 	lds	r24, 0x0421
   124ca:	90 91 22 04 	lds	r25, 0x0422
   124ce:	90 93 1e 04 	sts	0x041E, r25
   124d2:	80 93 1d 04 	sts	0x041D, r24
    p_ny=n_ny;
   124d6:	80 91 23 04 	lds	r24, 0x0423
   124da:	90 91 24 04 	lds	r25, 0x0424
   124de:	90 93 20 04 	sts	0x0420, r25
   124e2:	80 93 1f 04 	sts	0x041F, r24
    return out;
   124e6:	89 81       	ldd	r24, Y+1	; 0x01
}
   124e8:	27 96       	adiw	r28, 0x07	; 7
   124ea:	0f b6       	in	r0, 0x3f	; 63
   124ec:	f8 94       	cli
   124ee:	de bf       	out	0x3e, r29	; 62
   124f0:	0f be       	out	0x3f, r0	; 63
   124f2:	cd bf       	out	0x3d, r28	; 61
   124f4:	df 91       	pop	r29
   124f6:	cf 91       	pop	r28
   124f8:	08 95       	ret

000124fa <sh_path>:
	Distance : Maintains distance from start node to all nodes.
	Included : Maintains nodes which are completed i.e solved with shortest distance
	Parent   : Maintains parent node of each node in a the final path                                                                     */
/************************************************************************/
char* sh_path(int start, int end,int *count1)
{
   124fa:	0f 93       	push	r16
   124fc:	1f 93       	push	r17
   124fe:	cf 93       	push	r28
   12500:	df 93       	push	r29
   12502:	cd b7       	in	r28, 0x3d	; 61
   12504:	de b7       	in	r29, 0x3e	; 62
   12506:	c5 50       	subi	r28, 0x05	; 5
   12508:	d1 40       	sbci	r29, 0x01	; 1
   1250a:	0f b6       	in	r0, 0x3f	; 63
   1250c:	f8 94       	cli
   1250e:	de bf       	out	0x3e, r29	; 62
   12510:	0f be       	out	0x3f, r0	; 63
   12512:	cd bf       	out	0x3d, r28	; 61
   12514:	9e 01       	movw	r18, r28
   12516:	20 50       	subi	r18, 0x00	; 0
   12518:	3f 4f       	sbci	r19, 0xFF	; 255
   1251a:	f9 01       	movw	r30, r18
   1251c:	91 83       	std	Z+1, r25	; 0x01
   1251e:	80 83       	st	Z, r24
   12520:	ce 01       	movw	r24, r28
   12522:	8e 5f       	subi	r24, 0xFE	; 254
   12524:	9e 4f       	sbci	r25, 0xFE	; 254
   12526:	fc 01       	movw	r30, r24
   12528:	71 83       	std	Z+1, r23	; 0x01
   1252a:	60 83       	st	Z, r22
   1252c:	ce 01       	movw	r24, r28
   1252e:	8c 5f       	subi	r24, 0xFC	; 252
   12530:	9e 4f       	sbci	r25, 0xFE	; 254
   12532:	fc 01       	movw	r30, r24
   12534:	51 83       	std	Z+1, r21	; 0x01
   12536:	40 83       	st	Z, r20
    int dist[36],parent[36];
    int count=0,turn_count=0,current=0,length=0,weight=1,u=0,v=0,i=0,j=0;
   12538:	1c 86       	std	Y+12, r1	; 0x0c
   1253a:	1b 86       	std	Y+11, r1	; 0x0b
   1253c:	ce 01       	movw	r24, r28
   1253e:	8a 55       	subi	r24, 0x5A	; 90
   12540:	9f 4f       	sbci	r25, 0xFF	; 255
   12542:	fc 01       	movw	r30, r24
   12544:	11 82       	std	Z+1, r1	; 0x01
   12546:	10 82       	st	Z, r1
   12548:	1a 82       	std	Y+2, r1	; 0x02
   1254a:	19 82       	std	Y+1, r1	; 0x01
   1254c:	1c 82       	std	Y+4, r1	; 0x04
   1254e:	1b 82       	std	Y+3, r1	; 0x03
   12550:	81 e0       	ldi	r24, 0x01	; 1
   12552:	90 e0       	ldi	r25, 0x00	; 0
   12554:	9e 87       	std	Y+14, r25	; 0x0e
   12556:	8d 87       	std	Y+13, r24	; 0x0d
   12558:	18 8a       	std	Y+16, r1	; 0x10
   1255a:	1f 86       	std	Y+15, r1	; 0x0f
   1255c:	1a 8a       	std	Y+18, r1	; 0x12
   1255e:	19 8a       	std	Y+17, r1	; 0x11
   12560:	1e 82       	std	Y+6, r1	; 0x06
   12562:	1d 82       	std	Y+5, r1	; 0x05
   12564:	18 86       	std	Y+8, r1	; 0x08
   12566:	1f 82       	std	Y+7, r1	; 0x07
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
   12568:	ce 01       	movw	r24, r28
   1256a:	80 51       	subi	r24, 0x10	; 16
   1256c:	9f 4f       	sbci	r25, 0xFF	; 255
   1256e:	20 e1       	ldi	r18, 0x10	; 16
   12570:	fc 01       	movw	r30, r24
   12572:	32 2f       	mov	r19, r18
   12574:	11 92       	st	Z+, r1
   12576:	3a 95       	dec	r19
   12578:	e9 f7       	brne	.-6      	; 0x12574 <sh_path+0x7a>
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
   1257a:	10 92 1e 04 	sts	0x041E, r1
   1257e:	10 92 1d 04 	sts	0x041D, r1
   12582:	10 92 20 04 	sts	0x0420, r1
   12586:	10 92 1f 04 	sts	0x041F, r1
   1258a:	10 92 22 04 	sts	0x0422, r1
   1258e:	10 92 21 04 	sts	0x0421, r1
   12592:	10 92 24 04 	sts	0x0424, r1
   12596:	10 92 23 04 	sts	0x0423, r1
    for(i=0;i<36;i++)
   1259a:	1e 82       	std	Y+6, r1	; 0x06
   1259c:	1d 82       	std	Y+5, r1	; 0x05
   1259e:	2e c0       	rjmp	.+92     	; 0x125fc <sh_path+0x102>
	{
        dist[i]=INF;
   125a0:	8d 81       	ldd	r24, Y+5	; 0x05
   125a2:	9e 81       	ldd	r25, Y+6	; 0x06
   125a4:	88 0f       	add	r24, r24
   125a6:	99 1f       	adc	r25, r25
   125a8:	9e 01       	movw	r18, r28
   125aa:	2f 5f       	subi	r18, 0xFF	; 255
   125ac:	3f 4f       	sbci	r19, 0xFF	; 255
   125ae:	82 0f       	add	r24, r18
   125b0:	93 1f       	adc	r25, r19
   125b2:	45 96       	adiw	r24, 0x15	; 21
   125b4:	27 ee       	ldi	r18, 0xE7	; 231
   125b6:	33 e0       	ldi	r19, 0x03	; 3
   125b8:	fc 01       	movw	r30, r24
   125ba:	31 83       	std	Z+1, r19	; 0x01
   125bc:	20 83       	st	Z, r18
        included[i]=FALSE;
   125be:	9e 01       	movw	r18, r28
   125c0:	28 55       	subi	r18, 0x58	; 88
   125c2:	3f 4f       	sbci	r19, 0xFF	; 255
   125c4:	8d 81       	ldd	r24, Y+5	; 0x05
   125c6:	9e 81       	ldd	r25, Y+6	; 0x06
   125c8:	88 0f       	add	r24, r24
   125ca:	99 1f       	adc	r25, r25
   125cc:	82 0f       	add	r24, r18
   125ce:	93 1f       	adc	r25, r19
   125d0:	fc 01       	movw	r30, r24
   125d2:	11 82       	std	Z+1, r1	; 0x01
   125d4:	10 82       	st	Z, r1
        parent[i]=INF;
   125d6:	9e 01       	movw	r18, r28
   125d8:	22 5a       	subi	r18, 0xA2	; 162
   125da:	3f 4f       	sbci	r19, 0xFF	; 255
   125dc:	8d 81       	ldd	r24, Y+5	; 0x05
   125de:	9e 81       	ldd	r25, Y+6	; 0x06
   125e0:	88 0f       	add	r24, r24
   125e2:	99 1f       	adc	r25, r25
   125e4:	82 0f       	add	r24, r18
   125e6:	93 1f       	adc	r25, r19
   125e8:	27 ee       	ldi	r18, 0xE7	; 231
   125ea:	33 e0       	ldi	r19, 0x03	; 3
   125ec:	fc 01       	movw	r30, r24
   125ee:	31 83       	std	Z+1, r19	; 0x01
   125f0:	20 83       	st	Z, r18
    int included[36];
    int *p;
    int adj[4][2]={{0,0},{0,0},{0,0},{0,0}};
    char dir,*path;
    p_nx=0,p_ny=0,n_nx=0,n_ny=0;
    for(i=0;i<36;i++)
   125f2:	8d 81       	ldd	r24, Y+5	; 0x05
   125f4:	9e 81       	ldd	r25, Y+6	; 0x06
   125f6:	01 96       	adiw	r24, 0x01	; 1
   125f8:	9e 83       	std	Y+6, r25	; 0x06
   125fa:	8d 83       	std	Y+5, r24	; 0x05
   125fc:	8d 81       	ldd	r24, Y+5	; 0x05
   125fe:	9e 81       	ldd	r25, Y+6	; 0x06
   12600:	84 32       	cpi	r24, 0x24	; 36
   12602:	91 05       	cpc	r25, r1
   12604:	6c f2       	brlt	.-102    	; 0x125a0 <sh_path+0xa6>
	{
        dist[i]=INF;
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
   12606:	ce 01       	movw	r24, r28
   12608:	80 50       	subi	r24, 0x00	; 0
   1260a:	9f 4f       	sbci	r25, 0xFF	; 255
   1260c:	fc 01       	movw	r30, r24
   1260e:	80 81       	ld	r24, Z
   12610:	91 81       	ldd	r25, Z+1	; 0x01
   12612:	88 0f       	add	r24, r24
   12614:	99 1f       	adc	r25, r25
   12616:	9e 01       	movw	r18, r28
   12618:	2f 5f       	subi	r18, 0xFF	; 255
   1261a:	3f 4f       	sbci	r19, 0xFF	; 255
   1261c:	82 0f       	add	r24, r18
   1261e:	93 1f       	adc	r25, r19
   12620:	45 96       	adiw	r24, 0x15	; 21
   12622:	fc 01       	movw	r30, r24
   12624:	11 82       	std	Z+1, r1	; 0x01
   12626:	10 82       	st	Z, r1
    parent[start]=start;
   12628:	9e 01       	movw	r18, r28
   1262a:	22 5a       	subi	r18, 0xA2	; 162
   1262c:	3f 4f       	sbci	r19, 0xFF	; 255
   1262e:	ce 01       	movw	r24, r28
   12630:	80 50       	subi	r24, 0x00	; 0
   12632:	9f 4f       	sbci	r25, 0xFF	; 255
   12634:	fc 01       	movw	r30, r24
   12636:	80 81       	ld	r24, Z
   12638:	91 81       	ldd	r25, Z+1	; 0x01
   1263a:	88 0f       	add	r24, r24
   1263c:	99 1f       	adc	r25, r25
   1263e:	82 0f       	add	r24, r18
   12640:	93 1f       	adc	r25, r19
   12642:	9e 01       	movw	r18, r28
   12644:	20 50       	subi	r18, 0x00	; 0
   12646:	3f 4f       	sbci	r19, 0xFF	; 255
   12648:	f9 01       	movw	r30, r18
   1264a:	20 81       	ld	r18, Z
   1264c:	31 81       	ldd	r19, Z+1	; 0x01
   1264e:	fc 01       	movw	r30, r24
   12650:	31 83       	std	Z+1, r19	; 0x01
   12652:	20 83       	st	Z, r18
    for(i=0;i<35;i++)
   12654:	1e 82       	std	Y+6, r1	; 0x06
   12656:	1d 82       	std	Y+5, r1	; 0x05
   12658:	01 c1       	rjmp	.+514    	; 0x1285c <sh_path+0x362>
	{
        u=min_dis(dist,included);
   1265a:	ce 01       	movw	r24, r28
   1265c:	46 96       	adiw	r24, 0x16	; 22
   1265e:	9e 01       	movw	r18, r28
   12660:	28 55       	subi	r18, 0x58	; 88
   12662:	3f 4f       	sbci	r19, 0xFF	; 255
   12664:	b9 01       	movw	r22, r18
   12666:	0e 94 53 90 	call	0x120a6	; 0x120a6 <min_dis>
   1266a:	98 8b       	std	Y+16, r25	; 0x10
   1266c:	8f 87       	std	Y+15, r24	; 0x0f
        included[u]=TRUE;
   1266e:	9e 01       	movw	r18, r28
   12670:	28 55       	subi	r18, 0x58	; 88
   12672:	3f 4f       	sbci	r19, 0xFF	; 255
   12674:	8f 85       	ldd	r24, Y+15	; 0x0f
   12676:	98 89       	ldd	r25, Y+16	; 0x10
   12678:	88 0f       	add	r24, r24
   1267a:	99 1f       	adc	r25, r25
   1267c:	82 0f       	add	r24, r18
   1267e:	93 1f       	adc	r25, r19
   12680:	21 e0       	ldi	r18, 0x01	; 1
   12682:	30 e0       	ldi	r19, 0x00	; 0
   12684:	fc 01       	movw	r30, r24
   12686:	31 83       	std	Z+1, r19	; 0x01
   12688:	20 83       	st	Z, r18
        p_nx=u/6;
   1268a:	8f 85       	ldd	r24, Y+15	; 0x0f
   1268c:	98 89       	ldd	r25, Y+16	; 0x10
   1268e:	26 e0       	ldi	r18, 0x06	; 6
   12690:	30 e0       	ldi	r19, 0x00	; 0
   12692:	b9 01       	movw	r22, r18
   12694:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   12698:	9b 01       	movw	r18, r22
   1269a:	c9 01       	movw	r24, r18
   1269c:	90 93 1e 04 	sts	0x041E, r25
   126a0:	80 93 1d 04 	sts	0x041D, r24
        p_ny=u%6;
   126a4:	8f 85       	ldd	r24, Y+15	; 0x0f
   126a6:	98 89       	ldd	r25, Y+16	; 0x10
   126a8:	26 e0       	ldi	r18, 0x06	; 6
   126aa:	30 e0       	ldi	r19, 0x00	; 0
   126ac:	b9 01       	movw	r22, r18
   126ae:	0e 94 26 9e 	call	0x13c4c	; 0x13c4c <__divmodhi4>
   126b2:	90 93 20 04 	sts	0x0420, r25
   126b6:	80 93 1f 04 	sts	0x041F, r24
        adjacent(p_nx,p_ny,adj);
   126ba:	80 91 1d 04 	lds	r24, 0x041D
   126be:	90 91 1e 04 	lds	r25, 0x041E
   126c2:	40 91 1f 04 	lds	r20, 0x041F
   126c6:	50 91 20 04 	lds	r21, 0x0420
   126ca:	9e 01       	movw	r18, r28
   126cc:	20 51       	subi	r18, 0x10	; 16
   126ce:	3f 4f       	sbci	r19, 0xFF	; 255
   126d0:	ba 01       	movw	r22, r20
   126d2:	a9 01       	movw	r20, r18
   126d4:	0e 94 94 8f 	call	0x11f28	; 0x11f28 <adjacent>
        for(j=0;j<4;j++)
   126d8:	18 86       	std	Y+8, r1	; 0x08
   126da:	1f 82       	std	Y+7, r1	; 0x07
   126dc:	b4 c0       	rjmp	.+360    	; 0x12846 <sh_path+0x34c>
		{
            if(adj[j][0]!=-1)
   126de:	9e 01       	movw	r18, r28
   126e0:	20 51       	subi	r18, 0x10	; 16
   126e2:	3f 4f       	sbci	r19, 0xFF	; 255
   126e4:	8f 81       	ldd	r24, Y+7	; 0x07
   126e6:	98 85       	ldd	r25, Y+8	; 0x08
   126e8:	88 0f       	add	r24, r24
   126ea:	99 1f       	adc	r25, r25
   126ec:	88 0f       	add	r24, r24
   126ee:	99 1f       	adc	r25, r25
   126f0:	82 0f       	add	r24, r18
   126f2:	93 1f       	adc	r25, r19
   126f4:	fc 01       	movw	r30, r24
   126f6:	80 81       	ld	r24, Z
   126f8:	91 81       	ldd	r25, Z+1	; 0x01
   126fa:	ff ef       	ldi	r31, 0xFF	; 255
   126fc:	8f 3f       	cpi	r24, 0xFF	; 255
   126fe:	9f 07       	cpc	r25, r31
   12700:	09 f4       	brne	.+2      	; 0x12704 <sh_path+0x20a>
   12702:	9c c0       	rjmp	.+312    	; 0x1283c <sh_path+0x342>
			{

                n_nx=adj[j][0];
   12704:	9e 01       	movw	r18, r28
   12706:	20 51       	subi	r18, 0x10	; 16
   12708:	3f 4f       	sbci	r19, 0xFF	; 255
   1270a:	8f 81       	ldd	r24, Y+7	; 0x07
   1270c:	98 85       	ldd	r25, Y+8	; 0x08
   1270e:	88 0f       	add	r24, r24
   12710:	99 1f       	adc	r25, r25
   12712:	88 0f       	add	r24, r24
   12714:	99 1f       	adc	r25, r25
   12716:	82 0f       	add	r24, r18
   12718:	93 1f       	adc	r25, r19
   1271a:	fc 01       	movw	r30, r24
   1271c:	80 81       	ld	r24, Z
   1271e:	91 81       	ldd	r25, Z+1	; 0x01
   12720:	90 93 22 04 	sts	0x0422, r25
   12724:	80 93 21 04 	sts	0x0421, r24
                n_ny=adj[j][1];
   12728:	9e 01       	movw	r18, r28
   1272a:	20 51       	subi	r18, 0x10	; 16
   1272c:	3f 4f       	sbci	r19, 0xFF	; 255
   1272e:	8f 81       	ldd	r24, Y+7	; 0x07
   12730:	98 85       	ldd	r25, Y+8	; 0x08
   12732:	88 0f       	add	r24, r24
   12734:	99 1f       	adc	r25, r25
   12736:	88 0f       	add	r24, r24
   12738:	99 1f       	adc	r25, r25
   1273a:	82 0f       	add	r24, r18
   1273c:	93 1f       	adc	r25, r19
   1273e:	02 96       	adiw	r24, 0x02	; 2
   12740:	fc 01       	movw	r30, r24
   12742:	80 81       	ld	r24, Z
   12744:	91 81       	ldd	r25, Z+1	; 0x01
   12746:	90 93 24 04 	sts	0x0424, r25
   1274a:	80 93 23 04 	sts	0x0423, r24
                v=grid[n_nx][n_ny]-1;
   1274e:	20 91 21 04 	lds	r18, 0x0421
   12752:	30 91 22 04 	lds	r19, 0x0422
   12756:	40 91 23 04 	lds	r20, 0x0423
   1275a:	50 91 24 04 	lds	r21, 0x0424
   1275e:	c9 01       	movw	r24, r18
   12760:	88 0f       	add	r24, r24
   12762:	99 1f       	adc	r25, r25
   12764:	82 0f       	add	r24, r18
   12766:	93 1f       	adc	r25, r19
   12768:	88 0f       	add	r24, r24
   1276a:	99 1f       	adc	r25, r25
   1276c:	84 0f       	add	r24, r20
   1276e:	95 1f       	adc	r25, r21
   12770:	88 0f       	add	r24, r24
   12772:	99 1f       	adc	r25, r25
   12774:	8e 5f       	subi	r24, 0xFE	; 254
   12776:	9d 4f       	sbci	r25, 0xFD	; 253
   12778:	fc 01       	movw	r30, r24
   1277a:	80 81       	ld	r24, Z
   1277c:	91 81       	ldd	r25, Z+1	; 0x01
   1277e:	01 97       	sbiw	r24, 0x01	; 1
   12780:	9a 8b       	std	Y+18, r25	; 0x12
   12782:	89 8b       	std	Y+17, r24	; 0x11
                //printf("%d  %d\n",n_nx,n_ny);
                if((included[v]==FALSE)&&(dist[v]>(dist[u]+weight)))   // d[u,v] > d[u,i]+d[i,v] here d[i,v] is always 1 for a grid
   12784:	9e 01       	movw	r18, r28
   12786:	28 55       	subi	r18, 0x58	; 88
   12788:	3f 4f       	sbci	r19, 0xFF	; 255
   1278a:	89 89       	ldd	r24, Y+17	; 0x11
   1278c:	9a 89       	ldd	r25, Y+18	; 0x12
   1278e:	88 0f       	add	r24, r24
   12790:	99 1f       	adc	r25, r25
   12792:	82 0f       	add	r24, r18
   12794:	93 1f       	adc	r25, r19
   12796:	fc 01       	movw	r30, r24
   12798:	80 81       	ld	r24, Z
   1279a:	91 81       	ldd	r25, Z+1	; 0x01
   1279c:	00 97       	sbiw	r24, 0x00	; 0
   1279e:	09 f0       	breq	.+2      	; 0x127a2 <sh_path+0x2a8>
   127a0:	4d c0       	rjmp	.+154    	; 0x1283c <sh_path+0x342>
   127a2:	89 89       	ldd	r24, Y+17	; 0x11
   127a4:	9a 89       	ldd	r25, Y+18	; 0x12
   127a6:	88 0f       	add	r24, r24
   127a8:	99 1f       	adc	r25, r25
   127aa:	9e 01       	movw	r18, r28
   127ac:	2f 5f       	subi	r18, 0xFF	; 255
   127ae:	3f 4f       	sbci	r19, 0xFF	; 255
   127b0:	82 0f       	add	r24, r18
   127b2:	93 1f       	adc	r25, r19
   127b4:	45 96       	adiw	r24, 0x15	; 21
   127b6:	fc 01       	movw	r30, r24
   127b8:	20 81       	ld	r18, Z
   127ba:	31 81       	ldd	r19, Z+1	; 0x01
   127bc:	8f 85       	ldd	r24, Y+15	; 0x0f
   127be:	98 89       	ldd	r25, Y+16	; 0x10
   127c0:	88 0f       	add	r24, r24
   127c2:	99 1f       	adc	r25, r25
   127c4:	ae 01       	movw	r20, r28
   127c6:	4f 5f       	subi	r20, 0xFF	; 255
   127c8:	5f 4f       	sbci	r21, 0xFF	; 255
   127ca:	84 0f       	add	r24, r20
   127cc:	95 1f       	adc	r25, r21
   127ce:	45 96       	adiw	r24, 0x15	; 21
   127d0:	fc 01       	movw	r30, r24
   127d2:	40 81       	ld	r20, Z
   127d4:	51 81       	ldd	r21, Z+1	; 0x01
   127d6:	8d 85       	ldd	r24, Y+13	; 0x0d
   127d8:	9e 85       	ldd	r25, Y+14	; 0x0e
   127da:	84 0f       	add	r24, r20
   127dc:	95 1f       	adc	r25, r21
   127de:	82 17       	cp	r24, r18
   127e0:	93 07       	cpc	r25, r19
   127e2:	64 f5       	brge	.+88     	; 0x1283c <sh_path+0x342>
                    {
						dist[v]=dist[u]+weight;
   127e4:	8f 85       	ldd	r24, Y+15	; 0x0f
   127e6:	98 89       	ldd	r25, Y+16	; 0x10
   127e8:	88 0f       	add	r24, r24
   127ea:	99 1f       	adc	r25, r25
   127ec:	9e 01       	movw	r18, r28
   127ee:	2f 5f       	subi	r18, 0xFF	; 255
   127f0:	3f 4f       	sbci	r19, 0xFF	; 255
   127f2:	82 0f       	add	r24, r18
   127f4:	93 1f       	adc	r25, r19
   127f6:	45 96       	adiw	r24, 0x15	; 21
   127f8:	fc 01       	movw	r30, r24
   127fa:	20 81       	ld	r18, Z
   127fc:	31 81       	ldd	r19, Z+1	; 0x01
   127fe:	8d 85       	ldd	r24, Y+13	; 0x0d
   12800:	9e 85       	ldd	r25, Y+14	; 0x0e
   12802:	28 0f       	add	r18, r24
   12804:	39 1f       	adc	r19, r25
   12806:	89 89       	ldd	r24, Y+17	; 0x11
   12808:	9a 89       	ldd	r25, Y+18	; 0x12
   1280a:	88 0f       	add	r24, r24
   1280c:	99 1f       	adc	r25, r25
   1280e:	ae 01       	movw	r20, r28
   12810:	4f 5f       	subi	r20, 0xFF	; 255
   12812:	5f 4f       	sbci	r21, 0xFF	; 255
   12814:	84 0f       	add	r24, r20
   12816:	95 1f       	adc	r25, r21
   12818:	45 96       	adiw	r24, 0x15	; 21
   1281a:	fc 01       	movw	r30, r24
   1281c:	31 83       	std	Z+1, r19	; 0x01
   1281e:	20 83       	st	Z, r18
						parent[v]=u;
   12820:	9e 01       	movw	r18, r28
   12822:	22 5a       	subi	r18, 0xA2	; 162
   12824:	3f 4f       	sbci	r19, 0xFF	; 255
   12826:	89 89       	ldd	r24, Y+17	; 0x11
   12828:	9a 89       	ldd	r25, Y+18	; 0x12
   1282a:	88 0f       	add	r24, r24
   1282c:	99 1f       	adc	r25, r25
   1282e:	82 0f       	add	r24, r18
   12830:	93 1f       	adc	r25, r19
   12832:	2f 85       	ldd	r18, Y+15	; 0x0f
   12834:	38 89       	ldd	r19, Y+16	; 0x10
   12836:	fc 01       	movw	r30, r24
   12838:	31 83       	std	Z+1, r19	; 0x01
   1283a:	20 83       	st	Z, r18
        u=min_dis(dist,included);
        included[u]=TRUE;
        p_nx=u/6;
        p_ny=u%6;
        adjacent(p_nx,p_ny,adj);
        for(j=0;j<4;j++)
   1283c:	8f 81       	ldd	r24, Y+7	; 0x07
   1283e:	98 85       	ldd	r25, Y+8	; 0x08
   12840:	01 96       	adiw	r24, 0x01	; 1
   12842:	98 87       	std	Y+8, r25	; 0x08
   12844:	8f 83       	std	Y+7, r24	; 0x07
   12846:	8f 81       	ldd	r24, Y+7	; 0x07
   12848:	98 85       	ldd	r25, Y+8	; 0x08
   1284a:	84 30       	cpi	r24, 0x04	; 4
   1284c:	91 05       	cpc	r25, r1
   1284e:	0c f4       	brge	.+2      	; 0x12852 <sh_path+0x358>
   12850:	46 cf       	rjmp	.-372    	; 0x126de <sh_path+0x1e4>
        included[i]=FALSE;
        parent[i]=INF;
    }
    dist[start]=0;
    parent[start]=start;
    for(i=0;i<35;i++)
   12852:	8d 81       	ldd	r24, Y+5	; 0x05
   12854:	9e 81       	ldd	r25, Y+6	; 0x06
   12856:	01 96       	adiw	r24, 0x01	; 1
   12858:	9e 83       	std	Y+6, r25	; 0x06
   1285a:	8d 83       	std	Y+5, r24	; 0x05
   1285c:	8d 81       	ldd	r24, Y+5	; 0x05
   1285e:	9e 81       	ldd	r25, Y+6	; 0x06
   12860:	83 32       	cpi	r24, 0x23	; 35
   12862:	91 05       	cpc	r25, r1
   12864:	0c f4       	brge	.+2      	; 0x12868 <sh_path+0x36e>
   12866:	f9 ce       	rjmp	.-526    	; 0x1265a <sh_path+0x160>
            }
        }
    }
    
	// DYNAMIC ALLOCATION USED TO PREVENT WASTAGE OF SPACE 
    p=(int*)malloc(sizeof(int));
   12868:	82 e0       	ldi	r24, 0x02	; 2
   1286a:	90 e0       	ldi	r25, 0x00	; 0
   1286c:	0e 94 39 9e 	call	0x13c72	; 0x13c72 <malloc>
   12870:	9a 87       	std	Y+10, r25	; 0x0a
   12872:	89 87       	std	Y+9, r24	; 0x09
    current=end;
   12874:	ce 01       	movw	r24, r28
   12876:	8e 5f       	subi	r24, 0xFE	; 254
   12878:	9e 4f       	sbci	r25, 0xFE	; 254
   1287a:	fc 01       	movw	r30, r24
   1287c:	80 81       	ld	r24, Z
   1287e:	91 81       	ldd	r25, Z+1	; 0x01
   12880:	9a 83       	std	Y+2, r25	; 0x02
   12882:	89 83       	std	Y+1, r24	; 0x01
    p[0]=current;
   12884:	89 85       	ldd	r24, Y+9	; 0x09
   12886:	9a 85       	ldd	r25, Y+10	; 0x0a
   12888:	29 81       	ldd	r18, Y+1	; 0x01
   1288a:	3a 81       	ldd	r19, Y+2	; 0x02
   1288c:	fc 01       	movw	r30, r24
   1288e:	31 83       	std	Z+1, r19	; 0x01
   12890:	20 83       	st	Z, r18
    while(current!=start)
   12892:	2d c0       	rjmp	.+90     	; 0x128ee <sh_path+0x3f4>
	{
		length++;
   12894:	8b 81       	ldd	r24, Y+3	; 0x03
   12896:	9c 81       	ldd	r25, Y+4	; 0x04
   12898:	01 96       	adiw	r24, 0x01	; 1
   1289a:	9c 83       	std	Y+4, r25	; 0x04
   1289c:	8b 83       	std	Y+3, r24	; 0x03
		current=parent[current];
   1289e:	9e 01       	movw	r18, r28
   128a0:	22 5a       	subi	r18, 0xA2	; 162
   128a2:	3f 4f       	sbci	r19, 0xFF	; 255
   128a4:	89 81       	ldd	r24, Y+1	; 0x01
   128a6:	9a 81       	ldd	r25, Y+2	; 0x02
   128a8:	88 0f       	add	r24, r24
   128aa:	99 1f       	adc	r25, r25
   128ac:	82 0f       	add	r24, r18
   128ae:	93 1f       	adc	r25, r19
   128b0:	fc 01       	movw	r30, r24
   128b2:	80 81       	ld	r24, Z
   128b4:	91 81       	ldd	r25, Z+1	; 0x01
   128b6:	9a 83       	std	Y+2, r25	; 0x02
   128b8:	89 83       	std	Y+1, r24	; 0x01
		p=(int*)realloc(p,((length+1)*sizeof(int)));
   128ba:	8b 81       	ldd	r24, Y+3	; 0x03
   128bc:	9c 81       	ldd	r25, Y+4	; 0x04
   128be:	01 96       	adiw	r24, 0x01	; 1
   128c0:	88 0f       	add	r24, r24
   128c2:	99 1f       	adc	r25, r25
   128c4:	9c 01       	movw	r18, r24
   128c6:	89 85       	ldd	r24, Y+9	; 0x09
   128c8:	9a 85       	ldd	r25, Y+10	; 0x0a
   128ca:	b9 01       	movw	r22, r18
   128cc:	0e 94 68 9f 	call	0x13ed0	; 0x13ed0 <realloc>
   128d0:	9a 87       	std	Y+10, r25	; 0x0a
   128d2:	89 87       	std	Y+9, r24	; 0x09
		p[length]=current;
   128d4:	8b 81       	ldd	r24, Y+3	; 0x03
   128d6:	9c 81       	ldd	r25, Y+4	; 0x04
   128d8:	88 0f       	add	r24, r24
   128da:	99 1f       	adc	r25, r25
   128dc:	29 85       	ldd	r18, Y+9	; 0x09
   128de:	3a 85       	ldd	r19, Y+10	; 0x0a
   128e0:	82 0f       	add	r24, r18
   128e2:	93 1f       	adc	r25, r19
   128e4:	29 81       	ldd	r18, Y+1	; 0x01
   128e6:	3a 81       	ldd	r19, Y+2	; 0x02
   128e8:	fc 01       	movw	r30, r24
   128ea:	31 83       	std	Z+1, r19	; 0x01
   128ec:	20 83       	st	Z, r18
    
	// DYNAMIC ALLOCATION USED TO PREVENT WASTAGE OF SPACE 
    p=(int*)malloc(sizeof(int));
    current=end;
    p[0]=current;
    while(current!=start)
   128ee:	ce 01       	movw	r24, r28
   128f0:	80 50       	subi	r24, 0x00	; 0
   128f2:	9f 4f       	sbci	r25, 0xFF	; 255
   128f4:	29 81       	ldd	r18, Y+1	; 0x01
   128f6:	3a 81       	ldd	r19, Y+2	; 0x02
   128f8:	fc 01       	movw	r30, r24
   128fa:	80 81       	ld	r24, Z
   128fc:	91 81       	ldd	r25, Z+1	; 0x01
   128fe:	28 17       	cp	r18, r24
   12900:	39 07       	cpc	r19, r25
   12902:	41 f6       	brne	.-112    	; 0x12894 <sh_path+0x39a>
		p=(int*)realloc(p,((length+1)*sizeof(int)));
		p[length]=current;
    }


    p_nx=-1,p_ny=0,n_nx=0,n_ny=0;// Starting with facing north
   12904:	8f ef       	ldi	r24, 0xFF	; 255
   12906:	9f ef       	ldi	r25, 0xFF	; 255
   12908:	90 93 1e 04 	sts	0x041E, r25
   1290c:	80 93 1d 04 	sts	0x041D, r24
   12910:	10 92 20 04 	sts	0x0420, r1
   12914:	10 92 1f 04 	sts	0x041F, r1
   12918:	10 92 22 04 	sts	0x0422, r1
   1291c:	10 92 21 04 	sts	0x0421, r1
   12920:	10 92 24 04 	sts	0x0424, r1
   12924:	10 92 23 04 	sts	0x0423, r1
	
	
	
    // Turning the bot to face the next node
    dir=rotate(p[length],p[length-1],&turn_count);
   12928:	8b 81       	ldd	r24, Y+3	; 0x03
   1292a:	9c 81       	ldd	r25, Y+4	; 0x04
   1292c:	88 0f       	add	r24, r24
   1292e:	99 1f       	adc	r25, r25
   12930:	29 85       	ldd	r18, Y+9	; 0x09
   12932:	3a 85       	ldd	r19, Y+10	; 0x0a
   12934:	82 0f       	add	r24, r18
   12936:	93 1f       	adc	r25, r19
   12938:	fc 01       	movw	r30, r24
   1293a:	80 81       	ld	r24, Z
   1293c:	91 81       	ldd	r25, Z+1	; 0x01
   1293e:	2b 81       	ldd	r18, Y+3	; 0x03
   12940:	3c 81       	ldd	r19, Y+4	; 0x04
   12942:	21 50       	subi	r18, 0x01	; 1
   12944:	30 40       	sbci	r19, 0x00	; 0
   12946:	22 0f       	add	r18, r18
   12948:	33 1f       	adc	r19, r19
   1294a:	49 85       	ldd	r20, Y+9	; 0x09
   1294c:	5a 85       	ldd	r21, Y+10	; 0x0a
   1294e:	24 0f       	add	r18, r20
   12950:	35 1f       	adc	r19, r21
   12952:	f9 01       	movw	r30, r18
   12954:	40 81       	ld	r20, Z
   12956:	51 81       	ldd	r21, Z+1	; 0x01
   12958:	9e 01       	movw	r18, r28
   1295a:	2a 55       	subi	r18, 0x5A	; 90
   1295c:	3f 4f       	sbci	r19, 0xFF	; 255
   1295e:	ba 01       	movw	r22, r20
   12960:	a9 01       	movw	r20, r18
   12962:	0e 94 ed 90 	call	0x121da	; 0x121da <rotate>
   12966:	8b 8b       	std	Y+19, r24	; 0x13

    path=(char*)malloc((length+1)*sizeof(char *));
   12968:	8b 81       	ldd	r24, Y+3	; 0x03
   1296a:	9c 81       	ldd	r25, Y+4	; 0x04
   1296c:	01 96       	adiw	r24, 0x01	; 1
   1296e:	88 0f       	add	r24, r24
   12970:	99 1f       	adc	r25, r25
   12972:	0e 94 39 9e 	call	0x13c72	; 0x13c72 <malloc>
   12976:	9d 8b       	std	Y+21, r25	; 0x15
   12978:	8c 8b       	std	Y+20, r24	; 0x14
    path[0]=dir;
   1297a:	8c 89       	ldd	r24, Y+20	; 0x14
   1297c:	9d 89       	ldd	r25, Y+21	; 0x15
   1297e:	2b 89       	ldd	r18, Y+19	; 0x13
   12980:	fc 01       	movw	r30, r24
   12982:	20 83       	st	Z, r18
    *count1=0;
   12984:	ce 01       	movw	r24, r28
   12986:	8c 5f       	subi	r24, 0xFC	; 252
   12988:	9e 4f       	sbci	r25, 0xFE	; 254
   1298a:	fc 01       	movw	r30, r24
   1298c:	80 81       	ld	r24, Z
   1298e:	91 81       	ldd	r25, Z+1	; 0x01
   12990:	fc 01       	movw	r30, r24
   12992:	11 82       	std	Z+1, r1	; 0x01
   12994:	10 82       	st	Z, r1
    for(i=length-1;i>0;i--)
   12996:	8b 81       	ldd	r24, Y+3	; 0x03
   12998:	9c 81       	ldd	r25, Y+4	; 0x04
   1299a:	01 97       	sbiw	r24, 0x01	; 1
   1299c:	9e 83       	std	Y+6, r25	; 0x06
   1299e:	8d 83       	std	Y+5, r24	; 0x05
   129a0:	4a c0       	rjmp	.+148    	; 0x12a36 <sh_path+0x53c>
	{
		*count1+=1;
   129a2:	ce 01       	movw	r24, r28
   129a4:	8c 5f       	subi	r24, 0xFC	; 252
   129a6:	9e 4f       	sbci	r25, 0xFE	; 254
   129a8:	fc 01       	movw	r30, r24
   129aa:	80 81       	ld	r24, Z
   129ac:	91 81       	ldd	r25, Z+1	; 0x01
   129ae:	fc 01       	movw	r30, r24
   129b0:	80 81       	ld	r24, Z
   129b2:	91 81       	ldd	r25, Z+1	; 0x01
   129b4:	9c 01       	movw	r18, r24
   129b6:	2f 5f       	subi	r18, 0xFF	; 255
   129b8:	3f 4f       	sbci	r19, 0xFF	; 255
   129ba:	ce 01       	movw	r24, r28
   129bc:	8c 5f       	subi	r24, 0xFC	; 252
   129be:	9e 4f       	sbci	r25, 0xFE	; 254
   129c0:	fc 01       	movw	r30, r24
   129c2:	80 81       	ld	r24, Z
   129c4:	91 81       	ldd	r25, Z+1	; 0x01
   129c6:	fc 01       	movw	r30, r24
   129c8:	31 83       	std	Z+1, r19	; 0x01
   129ca:	20 83       	st	Z, r18
		dir=direction(p[i],p[i-1],&turn_count);
   129cc:	8d 81       	ldd	r24, Y+5	; 0x05
   129ce:	9e 81       	ldd	r25, Y+6	; 0x06
   129d0:	88 0f       	add	r24, r24
   129d2:	99 1f       	adc	r25, r25
   129d4:	29 85       	ldd	r18, Y+9	; 0x09
   129d6:	3a 85       	ldd	r19, Y+10	; 0x0a
   129d8:	82 0f       	add	r24, r18
   129da:	93 1f       	adc	r25, r19
   129dc:	fc 01       	movw	r30, r24
   129de:	80 81       	ld	r24, Z
   129e0:	91 81       	ldd	r25, Z+1	; 0x01
   129e2:	2d 81       	ldd	r18, Y+5	; 0x05
   129e4:	3e 81       	ldd	r19, Y+6	; 0x06
   129e6:	21 50       	subi	r18, 0x01	; 1
   129e8:	30 40       	sbci	r19, 0x00	; 0
   129ea:	22 0f       	add	r18, r18
   129ec:	33 1f       	adc	r19, r19
   129ee:	49 85       	ldd	r20, Y+9	; 0x09
   129f0:	5a 85       	ldd	r21, Y+10	; 0x0a
   129f2:	24 0f       	add	r18, r20
   129f4:	35 1f       	adc	r19, r21
   129f6:	f9 01       	movw	r30, r18
   129f8:	40 81       	ld	r20, Z
   129fa:	51 81       	ldd	r21, Z+1	; 0x01
   129fc:	9e 01       	movw	r18, r28
   129fe:	2a 55       	subi	r18, 0x5A	; 90
   12a00:	3f 4f       	sbci	r19, 0xFF	; 255
   12a02:	ba 01       	movw	r22, r20
   12a04:	a9 01       	movw	r20, r18
   12a06:	0e 94 86 91 	call	0x1230c	; 0x1230c <direction>
   12a0a:	8b 8b       	std	Y+19, r24	; 0x13
		path[*count1]=dir;
   12a0c:	ce 01       	movw	r24, r28
   12a0e:	8c 5f       	subi	r24, 0xFC	; 252
   12a10:	9e 4f       	sbci	r25, 0xFE	; 254
   12a12:	fc 01       	movw	r30, r24
   12a14:	80 81       	ld	r24, Z
   12a16:	91 81       	ldd	r25, Z+1	; 0x01
   12a18:	fc 01       	movw	r30, r24
   12a1a:	80 81       	ld	r24, Z
   12a1c:	91 81       	ldd	r25, Z+1	; 0x01
   12a1e:	2c 89       	ldd	r18, Y+20	; 0x14
   12a20:	3d 89       	ldd	r19, Y+21	; 0x15
   12a22:	82 0f       	add	r24, r18
   12a24:	93 1f       	adc	r25, r19
   12a26:	2b 89       	ldd	r18, Y+19	; 0x13
   12a28:	fc 01       	movw	r30, r24
   12a2a:	20 83       	st	Z, r18
    dir=rotate(p[length],p[length-1],&turn_count);

    path=(char*)malloc((length+1)*sizeof(char *));
    path[0]=dir;
    *count1=0;
    for(i=length-1;i>0;i--)
   12a2c:	8d 81       	ldd	r24, Y+5	; 0x05
   12a2e:	9e 81       	ldd	r25, Y+6	; 0x06
   12a30:	01 97       	sbiw	r24, 0x01	; 1
   12a32:	9e 83       	std	Y+6, r25	; 0x06
   12a34:	8d 83       	std	Y+5, r24	; 0x05
   12a36:	8d 81       	ldd	r24, Y+5	; 0x05
   12a38:	9e 81       	ldd	r25, Y+6	; 0x06
   12a3a:	18 16       	cp	r1, r24
   12a3c:	19 06       	cpc	r1, r25
   12a3e:	0c f4       	brge	.+2      	; 0x12a42 <sh_path+0x548>
   12a40:	b0 cf       	rjmp	.-160    	; 0x129a2 <sh_path+0x4a8>
	{
		*count1+=1;
		dir=direction(p[i],p[i-1],&turn_count);
		path[*count1]=dir;
    }
    *count1+=1;
   12a42:	ce 01       	movw	r24, r28
   12a44:	8c 5f       	subi	r24, 0xFC	; 252
   12a46:	9e 4f       	sbci	r25, 0xFE	; 254
   12a48:	fc 01       	movw	r30, r24
   12a4a:	80 81       	ld	r24, Z
   12a4c:	91 81       	ldd	r25, Z+1	; 0x01
   12a4e:	fc 01       	movw	r30, r24
   12a50:	80 81       	ld	r24, Z
   12a52:	91 81       	ldd	r25, Z+1	; 0x01
   12a54:	9c 01       	movw	r18, r24
   12a56:	2f 5f       	subi	r18, 0xFF	; 255
   12a58:	3f 4f       	sbci	r19, 0xFF	; 255
   12a5a:	ce 01       	movw	r24, r28
   12a5c:	8c 5f       	subi	r24, 0xFC	; 252
   12a5e:	9e 4f       	sbci	r25, 0xFE	; 254
   12a60:	fc 01       	movw	r30, r24
   12a62:	80 81       	ld	r24, Z
   12a64:	91 81       	ldd	r25, Z+1	; 0x01
   12a66:	fc 01       	movw	r30, r24
   12a68:	31 83       	std	Z+1, r19	; 0x01
   12a6a:	20 83       	st	Z, r18
	
	// Turning bot to NORTH
	
    path[*count1]=align(turn_count);
   12a6c:	ce 01       	movw	r24, r28
   12a6e:	8c 5f       	subi	r24, 0xFC	; 252
   12a70:	9e 4f       	sbci	r25, 0xFE	; 254
   12a72:	fc 01       	movw	r30, r24
   12a74:	80 81       	ld	r24, Z
   12a76:	91 81       	ldd	r25, Z+1	; 0x01
   12a78:	fc 01       	movw	r30, r24
   12a7a:	80 81       	ld	r24, Z
   12a7c:	91 81       	ldd	r25, Z+1	; 0x01
   12a7e:	2c 89       	ldd	r18, Y+20	; 0x14
   12a80:	3d 89       	ldd	r19, Y+21	; 0x15
   12a82:	89 01       	movw	r16, r18
   12a84:	08 0f       	add	r16, r24
   12a86:	19 1f       	adc	r17, r25
   12a88:	ce 01       	movw	r24, r28
   12a8a:	8a 55       	subi	r24, 0x5A	; 90
   12a8c:	9f 4f       	sbci	r25, 0xFF	; 255
   12a8e:	fc 01       	movw	r30, r24
   12a90:	80 81       	ld	r24, Z
   12a92:	91 81       	ldd	r25, Z+1	; 0x01
   12a94:	0e 94 af 90 	call	0x1215e	; 0x1215e <align>
   12a98:	f8 01       	movw	r30, r16
   12a9a:	80 83       	st	Z, r24
	*count1+=1;
   12a9c:	ce 01       	movw	r24, r28
   12a9e:	8c 5f       	subi	r24, 0xFC	; 252
   12aa0:	9e 4f       	sbci	r25, 0xFE	; 254
   12aa2:	fc 01       	movw	r30, r24
   12aa4:	80 81       	ld	r24, Z
   12aa6:	91 81       	ldd	r25, Z+1	; 0x01
   12aa8:	fc 01       	movw	r30, r24
   12aaa:	80 81       	ld	r24, Z
   12aac:	91 81       	ldd	r25, Z+1	; 0x01
   12aae:	9c 01       	movw	r18, r24
   12ab0:	2f 5f       	subi	r18, 0xFF	; 255
   12ab2:	3f 4f       	sbci	r19, 0xFF	; 255
   12ab4:	ce 01       	movw	r24, r28
   12ab6:	8c 5f       	subi	r24, 0xFC	; 252
   12ab8:	9e 4f       	sbci	r25, 0xFE	; 254
   12aba:	fc 01       	movw	r30, r24
   12abc:	80 81       	ld	r24, Z
   12abe:	91 81       	ldd	r25, Z+1	; 0x01
   12ac0:	fc 01       	movw	r30, r24
   12ac2:	31 83       	std	Z+1, r19	; 0x01
   12ac4:	20 83       	st	Z, r18
	path[*count1]='\0';
   12ac6:	ce 01       	movw	r24, r28
   12ac8:	8c 5f       	subi	r24, 0xFC	; 252
   12aca:	9e 4f       	sbci	r25, 0xFE	; 254
   12acc:	fc 01       	movw	r30, r24
   12ace:	80 81       	ld	r24, Z
   12ad0:	91 81       	ldd	r25, Z+1	; 0x01
   12ad2:	fc 01       	movw	r30, r24
   12ad4:	80 81       	ld	r24, Z
   12ad6:	91 81       	ldd	r25, Z+1	; 0x01
   12ad8:	2c 89       	ldd	r18, Y+20	; 0x14
   12ada:	3d 89       	ldd	r19, Y+21	; 0x15
   12adc:	82 0f       	add	r24, r18
   12ade:	93 1f       	adc	r25, r19
   12ae0:	fc 01       	movw	r30, r24
   12ae2:	10 82       	st	Z, r1
    free(p);
   12ae4:	89 85       	ldd	r24, Y+9	; 0x09
   12ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
   12ae8:	0e 94 cf 9e 	call	0x13d9e	; 0x13d9e <free>
    return path;
   12aec:	8c 89       	ldd	r24, Y+20	; 0x14
   12aee:	9d 89       	ldd	r25, Y+21	; 0x15
}
   12af0:	cb 5f       	subi	r28, 0xFB	; 251
   12af2:	de 4f       	sbci	r29, 0xFE	; 254
   12af4:	0f b6       	in	r0, 0x3f	; 63
   12af6:	f8 94       	cli
   12af8:	de bf       	out	0x3e, r29	; 62
   12afa:	0f be       	out	0x3f, r0	; 63
   12afc:	cd bf       	out	0x3d, r28	; 61
   12afe:	df 91       	pop	r29
   12b00:	cf 91       	pop	r28
   12b02:	1f 91       	pop	r17
   12b04:	0f 91       	pop	r16
   12b06:	08 95       	ret

00012b08 <dijkstra>:
/************************************************************************/
/*  FUNCTION ACTING AS FUNCTION FOR EXTERNAL PROGRAMS
                                                                     */
/************************************************************************/
char* dijkstra(int start,int end,int *count)
{   
   12b08:	cf 93       	push	r28
   12b0a:	df 93       	push	r29
   12b0c:	cd b7       	in	r28, 0x3d	; 61
   12b0e:	de b7       	in	r29, 0x3e	; 62
   12b10:	2e 97       	sbiw	r28, 0x0e	; 14
   12b12:	0f b6       	in	r0, 0x3f	; 63
   12b14:	f8 94       	cli
   12b16:	de bf       	out	0x3e, r29	; 62
   12b18:	0f be       	out	0x3f, r0	; 63
   12b1a:	cd bf       	out	0x3d, r28	; 61
   12b1c:	9a 87       	std	Y+10, r25	; 0x0a
   12b1e:	89 87       	std	Y+9, r24	; 0x09
   12b20:	7c 87       	std	Y+12, r23	; 0x0c
   12b22:	6b 87       	std	Y+11, r22	; 0x0b
   12b24:	5e 87       	std	Y+14, r21	; 0x0e
   12b26:	4d 87       	std	Y+13, r20	; 0x0d
	char *path;
	int i=0,j=0,m=31;
   12b28:	1c 82       	std	Y+4, r1	; 0x04
   12b2a:	1b 82       	std	Y+3, r1	; 0x03
   12b2c:	1e 82       	std	Y+6, r1	; 0x06
   12b2e:	1d 82       	std	Y+5, r1	; 0x05
   12b30:	8f e1       	ldi	r24, 0x1F	; 31
   12b32:	90 e0       	ldi	r25, 0x00	; 0
   12b34:	98 87       	std	Y+8, r25	; 0x08
   12b36:	8f 83       	std	Y+7, r24	; 0x07
	
	// If start node and end node is same the resultant path is No Change 
		if(start==end)
   12b38:	29 85       	ldd	r18, Y+9	; 0x09
   12b3a:	3a 85       	ldd	r19, Y+10	; 0x0a
   12b3c:	8b 85       	ldd	r24, Y+11	; 0x0b
   12b3e:	9c 85       	ldd	r25, Y+12	; 0x0c
   12b40:	28 17       	cp	r18, r24
   12b42:	39 07       	cpc	r19, r25
   12b44:	89 f4       	brne	.+34     	; 0x12b68 <dijkstra+0x60>
    {
        path=(char*)malloc(2*sizeof(char));
   12b46:	82 e0       	ldi	r24, 0x02	; 2
   12b48:	90 e0       	ldi	r25, 0x00	; 0
   12b4a:	0e 94 39 9e 	call	0x13c72	; 0x13c72 <malloc>
   12b4e:	9a 83       	std	Y+2, r25	; 0x02
   12b50:	89 83       	std	Y+1, r24	; 0x01
        path[0]='N';
   12b52:	89 81       	ldd	r24, Y+1	; 0x01
   12b54:	9a 81       	ldd	r25, Y+2	; 0x02
   12b56:	2e e4       	ldi	r18, 0x4E	; 78
   12b58:	fc 01       	movw	r30, r24
   12b5a:	20 83       	st	Z, r18
        path[1]='\0';
   12b5c:	89 81       	ldd	r24, Y+1	; 0x01
   12b5e:	9a 81       	ldd	r25, Y+2	; 0x02
   12b60:	01 96       	adiw	r24, 0x01	; 1
   12b62:	fc 01       	movw	r30, r24
   12b64:	10 82       	st	Z, r1
   12b66:	22 c0       	rjmp	.+68     	; 0x12bac <dijkstra+0xa4>
    }
    else{
	start=transf[start];
   12b68:	89 85       	ldd	r24, Y+9	; 0x09
   12b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
   12b6c:	88 0f       	add	r24, r24
   12b6e:	99 1f       	adc	r25, r25
   12b70:	86 5b       	subi	r24, 0xB6	; 182
   12b72:	9d 4f       	sbci	r25, 0xFD	; 253
   12b74:	fc 01       	movw	r30, r24
   12b76:	80 81       	ld	r24, Z
   12b78:	91 81       	ldd	r25, Z+1	; 0x01
   12b7a:	9a 87       	std	Y+10, r25	; 0x0a
   12b7c:	89 87       	std	Y+9, r24	; 0x09
	end=transf[end];
   12b7e:	8b 85       	ldd	r24, Y+11	; 0x0b
   12b80:	9c 85       	ldd	r25, Y+12	; 0x0c
   12b82:	88 0f       	add	r24, r24
   12b84:	99 1f       	adc	r25, r25
   12b86:	86 5b       	subi	r24, 0xB6	; 182
   12b88:	9d 4f       	sbci	r25, 0xFD	; 253
   12b8a:	fc 01       	movw	r30, r24
   12b8c:	80 81       	ld	r24, Z
   12b8e:	91 81       	ldd	r25, Z+1	; 0x01
   12b90:	9c 87       	std	Y+12, r25	; 0x0c
   12b92:	8b 87       	std	Y+11, r24	; 0x0b
	path=sh_path(start,end,count);}
   12b94:	89 85       	ldd	r24, Y+9	; 0x09
   12b96:	9a 85       	ldd	r25, Y+10	; 0x0a
   12b98:	4b 85       	ldd	r20, Y+11	; 0x0b
   12b9a:	5c 85       	ldd	r21, Y+12	; 0x0c
   12b9c:	2d 85       	ldd	r18, Y+13	; 0x0d
   12b9e:	3e 85       	ldd	r19, Y+14	; 0x0e
   12ba0:	ba 01       	movw	r22, r20
   12ba2:	a9 01       	movw	r20, r18
   12ba4:	0e 94 7d 92 	call	0x124fa	; 0x124fa <sh_path>
   12ba8:	9a 83       	std	Y+2, r25	; 0x02
   12baa:	89 83       	std	Y+1, r24	; 0x01
	return path;
   12bac:	89 81       	ldd	r24, Y+1	; 0x01
   12bae:	9a 81       	ldd	r25, Y+2	; 0x02
}
   12bb0:	2e 96       	adiw	r28, 0x0e	; 14
   12bb2:	0f b6       	in	r0, 0x3f	; 63
   12bb4:	f8 94       	cli
   12bb6:	de bf       	out	0x3e, r29	; 62
   12bb8:	0f be       	out	0x3f, r0	; 63
   12bba:	cd bf       	out	0x3d, r28	; 61
   12bbc:	df 91       	pop	r29
   12bbe:	cf 91       	pop	r28
   12bc0:	08 95       	ret

00012bc2 <animals>:
{31,32,33,34,35,36}};

	int aniloc[20];
	int habloc[20];

	int animals(char a[2]){
   12bc2:	cf 93       	push	r28
   12bc4:	df 93       	push	r29
   12bc6:	cd b7       	in	r28, 0x3d	; 61
   12bc8:	de b7       	in	r29, 0x3e	; 62
   12bca:	28 97       	sbiw	r28, 0x08	; 8
   12bcc:	0f b6       	in	r0, 0x3f	; 63
   12bce:	f8 94       	cli
   12bd0:	de bf       	out	0x3e, r29	; 62
   12bd2:	0f be       	out	0x3f, r0	; 63
   12bd4:	cd bf       	out	0x3d, r28	; 61
   12bd6:	98 87       	std	Y+8, r25	; 0x08
   12bd8:	8f 83       	std	Y+7, r24	; 0x07
		//printf("-----%s\n",a);
		int animal=0,number=0,letter=0;
   12bda:	1e 82       	std	Y+6, r1	; 0x06
   12bdc:	1d 82       	std	Y+5, r1	; 0x05
   12bde:	1a 82       	std	Y+2, r1	; 0x02
   12be0:	19 82       	std	Y+1, r1	; 0x01
   12be2:	1c 82       	std	Y+4, r1	; 0x04
   12be4:	1b 82       	std	Y+3, r1	; 0x03
		if(a[0] >= 'A' && a[0] <= 'F')
   12be6:	8f 81       	ldd	r24, Y+7	; 0x07
   12be8:	98 85       	ldd	r25, Y+8	; 0x08
   12bea:	fc 01       	movw	r30, r24
   12bec:	80 81       	ld	r24, Z
   12bee:	81 34       	cpi	r24, 0x41	; 65
   12bf0:	80 f0       	brcs	.+32     	; 0x12c12 <animals+0x50>
   12bf2:	8f 81       	ldd	r24, Y+7	; 0x07
   12bf4:	98 85       	ldd	r25, Y+8	; 0x08
   12bf6:	fc 01       	movw	r30, r24
   12bf8:	80 81       	ld	r24, Z
   12bfa:	87 34       	cpi	r24, 0x47	; 71
   12bfc:	50 f4       	brcc	.+20     	; 0x12c12 <animals+0x50>
		letter = a[0]+1 - 'A';
   12bfe:	8f 81       	ldd	r24, Y+7	; 0x07
   12c00:	98 85       	ldd	r25, Y+8	; 0x08
   12c02:	fc 01       	movw	r30, r24
   12c04:	80 81       	ld	r24, Z
   12c06:	88 2f       	mov	r24, r24
   12c08:	90 e0       	ldi	r25, 0x00	; 0
   12c0a:	80 54       	subi	r24, 0x40	; 64
   12c0c:	90 40       	sbci	r25, 0x00	; 0
   12c0e:	9c 83       	std	Y+4, r25	; 0x04
   12c10:	8b 83       	std	Y+3, r24	; 0x03
		if(a[1] >='1' && a[1] <= '6')
   12c12:	8f 81       	ldd	r24, Y+7	; 0x07
   12c14:	98 85       	ldd	r25, Y+8	; 0x08
   12c16:	01 96       	adiw	r24, 0x01	; 1
   12c18:	fc 01       	movw	r30, r24
   12c1a:	80 81       	ld	r24, Z
   12c1c:	81 33       	cpi	r24, 0x31	; 49
   12c1e:	88 f0       	brcs	.+34     	; 0x12c42 <animals+0x80>
   12c20:	8f 81       	ldd	r24, Y+7	; 0x07
   12c22:	98 85       	ldd	r25, Y+8	; 0x08
   12c24:	01 96       	adiw	r24, 0x01	; 1
   12c26:	fc 01       	movw	r30, r24
   12c28:	80 81       	ld	r24, Z
   12c2a:	87 33       	cpi	r24, 0x37	; 55
   12c2c:	50 f4       	brcc	.+20     	; 0x12c42 <animals+0x80>
		number = a[1] - '0';
   12c2e:	8f 81       	ldd	r24, Y+7	; 0x07
   12c30:	98 85       	ldd	r25, Y+8	; 0x08
   12c32:	01 96       	adiw	r24, 0x01	; 1
   12c34:	fc 01       	movw	r30, r24
   12c36:	80 81       	ld	r24, Z
   12c38:	88 2f       	mov	r24, r24
   12c3a:	90 e0       	ldi	r25, 0x00	; 0
   12c3c:	c0 97       	sbiw	r24, 0x30	; 48
   12c3e:	9a 83       	std	Y+2, r25	; 0x02
   12c40:	89 83       	std	Y+1, r24	; 0x01

		animal = graph[number-1][letter-1];
   12c42:	89 81       	ldd	r24, Y+1	; 0x01
   12c44:	9a 81       	ldd	r25, Y+2	; 0x02
   12c46:	9c 01       	movw	r18, r24
   12c48:	21 50       	subi	r18, 0x01	; 1
   12c4a:	30 40       	sbci	r19, 0x00	; 0
   12c4c:	8b 81       	ldd	r24, Y+3	; 0x03
   12c4e:	9c 81       	ldd	r25, Y+4	; 0x04
   12c50:	ac 01       	movw	r20, r24
   12c52:	41 50       	subi	r20, 0x01	; 1
   12c54:	50 40       	sbci	r21, 0x00	; 0
   12c56:	c9 01       	movw	r24, r18
   12c58:	88 0f       	add	r24, r24
   12c5a:	99 1f       	adc	r25, r25
   12c5c:	82 0f       	add	r24, r18
   12c5e:	93 1f       	adc	r25, r19
   12c60:	88 0f       	add	r24, r24
   12c62:	99 1f       	adc	r25, r25
   12c64:	84 0f       	add	r24, r20
   12c66:	95 1f       	adc	r25, r21
   12c68:	88 0f       	add	r24, r24
   12c6a:	99 1f       	adc	r25, r25
   12c6c:	8c 55       	subi	r24, 0x5C	; 92
   12c6e:	9d 4f       	sbci	r25, 0xFD	; 253
   12c70:	fc 01       	movw	r30, r24
   12c72:	80 81       	ld	r24, Z
   12c74:	91 81       	ldd	r25, Z+1	; 0x01
   12c76:	9e 83       	std	Y+6, r25	; 0x06
   12c78:	8d 83       	std	Y+5, r24	; 0x05
		// if(strcmp("A1",a)==0)
		// animal++;
		return animal;
   12c7a:	8d 81       	ldd	r24, Y+5	; 0x05
   12c7c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
   12c7e:	28 96       	adiw	r28, 0x08	; 8
   12c80:	0f b6       	in	r0, 0x3f	; 63
   12c82:	f8 94       	cli
   12c84:	de bf       	out	0x3e, r29	; 62
   12c86:	0f be       	out	0x3f, r0	; 63
   12c88:	cd bf       	out	0x3d, r28	; 61
   12c8a:	df 91       	pop	r29
   12c8c:	cf 91       	pop	r28
   12c8e:	08 95       	ret

00012c90 <habitats>:

	int habitats(char h[2]){
   12c90:	cf 93       	push	r28
   12c92:	df 93       	push	r29
   12c94:	cd b7       	in	r28, 0x3d	; 61
   12c96:	de b7       	in	r29, 0x3e	; 62
   12c98:	28 97       	sbiw	r28, 0x08	; 8
   12c9a:	0f b6       	in	r0, 0x3f	; 63
   12c9c:	f8 94       	cli
   12c9e:	de bf       	out	0x3e, r29	; 62
   12ca0:	0f be       	out	0x3f, r0	; 63
   12ca2:	cd bf       	out	0x3d, r28	; 61
   12ca4:	98 87       	std	Y+8, r25	; 0x08
   12ca6:	8f 83       	std	Y+7, r24	; 0x07
		int i=0,m=0,habitat=0;
   12ca8:	1a 82       	std	Y+2, r1	; 0x02
   12caa:	19 82       	std	Y+1, r1	; 0x01
   12cac:	1c 82       	std	Y+4, r1	; 0x04
   12cae:	1b 82       	std	Y+3, r1	; 0x03
   12cb0:	1e 82       	std	Y+6, r1	; 0x06
   12cb2:	1d 82       	std	Y+5, r1	; 0x05
		for ( i = 0; h[i] != '\0'; i++)
   12cb4:	1a 82       	std	Y+2, r1	; 0x02
   12cb6:	19 82       	std	Y+1, r1	; 0x01
   12cb8:	1f c0       	rjmp	.+62     	; 0x12cf8 <habitats+0x68>
		m = m * 10 + h[i] - '0';
   12cba:	8b 81       	ldd	r24, Y+3	; 0x03
   12cbc:	9c 81       	ldd	r25, Y+4	; 0x04
   12cbe:	88 0f       	add	r24, r24
   12cc0:	99 1f       	adc	r25, r25
   12cc2:	9c 01       	movw	r18, r24
   12cc4:	22 0f       	add	r18, r18
   12cc6:	33 1f       	adc	r19, r19
   12cc8:	22 0f       	add	r18, r18
   12cca:	33 1f       	adc	r19, r19
   12ccc:	28 0f       	add	r18, r24
   12cce:	39 1f       	adc	r19, r25
   12cd0:	89 81       	ldd	r24, Y+1	; 0x01
   12cd2:	9a 81       	ldd	r25, Y+2	; 0x02
   12cd4:	4f 81       	ldd	r20, Y+7	; 0x07
   12cd6:	58 85       	ldd	r21, Y+8	; 0x08
   12cd8:	84 0f       	add	r24, r20
   12cda:	95 1f       	adc	r25, r21
   12cdc:	fc 01       	movw	r30, r24
   12cde:	80 81       	ld	r24, Z
   12ce0:	88 2f       	mov	r24, r24
   12ce2:	90 e0       	ldi	r25, 0x00	; 0
   12ce4:	82 0f       	add	r24, r18
   12ce6:	93 1f       	adc	r25, r19
   12ce8:	c0 97       	sbiw	r24, 0x30	; 48
   12cea:	9c 83       	std	Y+4, r25	; 0x04
   12cec:	8b 83       	std	Y+3, r24	; 0x03
		return animal;
	}

	int habitats(char h[2]){
		int i=0,m=0,habitat=0;
		for ( i = 0; h[i] != '\0'; i++)
   12cee:	89 81       	ldd	r24, Y+1	; 0x01
   12cf0:	9a 81       	ldd	r25, Y+2	; 0x02
   12cf2:	01 96       	adiw	r24, 0x01	; 1
   12cf4:	9a 83       	std	Y+2, r25	; 0x02
   12cf6:	89 83       	std	Y+1, r24	; 0x01
   12cf8:	89 81       	ldd	r24, Y+1	; 0x01
   12cfa:	9a 81       	ldd	r25, Y+2	; 0x02
   12cfc:	2f 81       	ldd	r18, Y+7	; 0x07
   12cfe:	38 85       	ldd	r19, Y+8	; 0x08
   12d00:	82 0f       	add	r24, r18
   12d02:	93 1f       	adc	r25, r19
   12d04:	fc 01       	movw	r30, r24
   12d06:	80 81       	ld	r24, Z
   12d08:	88 23       	and	r24, r24
   12d0a:	b9 f6       	brne	.-82     	; 0x12cba <habitats+0x2a>
		m = m * 10 + h[i] - '0';

		if(m<=5)
   12d0c:	8b 81       	ldd	r24, Y+3	; 0x03
   12d0e:	9c 81       	ldd	r25, Y+4	; 0x04
   12d10:	86 30       	cpi	r24, 0x06	; 6
   12d12:	91 05       	cpc	r25, r1
   12d14:	2c f4       	brge	.+10     	; 0x12d20 <habitats+0x90>
		habitat = 1 + (m-1);
   12d16:	8b 81       	ldd	r24, Y+3	; 0x03
   12d18:	9c 81       	ldd	r25, Y+4	; 0x04
   12d1a:	9e 83       	std	Y+6, r25	; 0x06
   12d1c:	8d 83       	std	Y+5, r24	; 0x05
   12d1e:	3f c0       	rjmp	.+126    	; 0x12d9e <habitats+0x10e>
		else if(m>=6 && m<=10)
   12d20:	8b 81       	ldd	r24, Y+3	; 0x03
   12d22:	9c 81       	ldd	r25, Y+4	; 0x04
   12d24:	86 30       	cpi	r24, 0x06	; 6
   12d26:	91 05       	cpc	r25, r1
   12d28:	5c f0       	brlt	.+22     	; 0x12d40 <habitats+0xb0>
   12d2a:	8b 81       	ldd	r24, Y+3	; 0x03
   12d2c:	9c 81       	ldd	r25, Y+4	; 0x04
   12d2e:	8b 30       	cpi	r24, 0x0B	; 11
   12d30:	91 05       	cpc	r25, r1
   12d32:	34 f4       	brge	.+12     	; 0x12d40 <habitats+0xb0>
		habitat = 2 + (m-1);
   12d34:	8b 81       	ldd	r24, Y+3	; 0x03
   12d36:	9c 81       	ldd	r25, Y+4	; 0x04
   12d38:	01 96       	adiw	r24, 0x01	; 1
   12d3a:	9e 83       	std	Y+6, r25	; 0x06
   12d3c:	8d 83       	std	Y+5, r24	; 0x05
   12d3e:	2f c0       	rjmp	.+94     	; 0x12d9e <habitats+0x10e>
		else if(m>=11 && m<=15)
   12d40:	8b 81       	ldd	r24, Y+3	; 0x03
   12d42:	9c 81       	ldd	r25, Y+4	; 0x04
   12d44:	8b 30       	cpi	r24, 0x0B	; 11
   12d46:	91 05       	cpc	r25, r1
   12d48:	5c f0       	brlt	.+22     	; 0x12d60 <habitats+0xd0>
   12d4a:	8b 81       	ldd	r24, Y+3	; 0x03
   12d4c:	9c 81       	ldd	r25, Y+4	; 0x04
   12d4e:	80 31       	cpi	r24, 0x10	; 16
   12d50:	91 05       	cpc	r25, r1
   12d52:	34 f4       	brge	.+12     	; 0x12d60 <habitats+0xd0>
		habitat = 3 + (m-1);
   12d54:	8b 81       	ldd	r24, Y+3	; 0x03
   12d56:	9c 81       	ldd	r25, Y+4	; 0x04
   12d58:	02 96       	adiw	r24, 0x02	; 2
   12d5a:	9e 83       	std	Y+6, r25	; 0x06
   12d5c:	8d 83       	std	Y+5, r24	; 0x05
   12d5e:	1f c0       	rjmp	.+62     	; 0x12d9e <habitats+0x10e>
		else if(m>=16 && m<=20)
   12d60:	8b 81       	ldd	r24, Y+3	; 0x03
   12d62:	9c 81       	ldd	r25, Y+4	; 0x04
   12d64:	80 31       	cpi	r24, 0x10	; 16
   12d66:	91 05       	cpc	r25, r1
   12d68:	5c f0       	brlt	.+22     	; 0x12d80 <habitats+0xf0>
   12d6a:	8b 81       	ldd	r24, Y+3	; 0x03
   12d6c:	9c 81       	ldd	r25, Y+4	; 0x04
   12d6e:	85 31       	cpi	r24, 0x15	; 21
   12d70:	91 05       	cpc	r25, r1
   12d72:	34 f4       	brge	.+12     	; 0x12d80 <habitats+0xf0>
		habitat = 4 + (m-1);
   12d74:	8b 81       	ldd	r24, Y+3	; 0x03
   12d76:	9c 81       	ldd	r25, Y+4	; 0x04
   12d78:	03 96       	adiw	r24, 0x03	; 3
   12d7a:	9e 83       	std	Y+6, r25	; 0x06
   12d7c:	8d 83       	std	Y+5, r24	; 0x05
   12d7e:	0f c0       	rjmp	.+30     	; 0x12d9e <habitats+0x10e>
		else if(m>=21 && m<=25)
   12d80:	8b 81       	ldd	r24, Y+3	; 0x03
   12d82:	9c 81       	ldd	r25, Y+4	; 0x04
   12d84:	85 31       	cpi	r24, 0x15	; 21
   12d86:	91 05       	cpc	r25, r1
   12d88:	54 f0       	brlt	.+20     	; 0x12d9e <habitats+0x10e>
   12d8a:	8b 81       	ldd	r24, Y+3	; 0x03
   12d8c:	9c 81       	ldd	r25, Y+4	; 0x04
   12d8e:	8a 31       	cpi	r24, 0x1A	; 26
   12d90:	91 05       	cpc	r25, r1
   12d92:	2c f4       	brge	.+10     	; 0x12d9e <habitats+0x10e>
		habitat = 5 + (m-1);
   12d94:	8b 81       	ldd	r24, Y+3	; 0x03
   12d96:	9c 81       	ldd	r25, Y+4	; 0x04
   12d98:	04 96       	adiw	r24, 0x04	; 4
   12d9a:	9e 83       	std	Y+6, r25	; 0x06
   12d9c:	8d 83       	std	Y+5, r24	; 0x05
		return habitat;
   12d9e:	8d 81       	ldd	r24, Y+5	; 0x05
   12da0:	9e 81       	ldd	r25, Y+6	; 0x06
	}
   12da2:	28 96       	adiw	r28, 0x08	; 8
   12da4:	0f b6       	in	r0, 0x3f	; 63
   12da6:	f8 94       	cli
   12da8:	de bf       	out	0x3e, r29	; 62
   12daa:	0f be       	out	0x3f, r0	; 63
   12dac:	cd bf       	out	0x3d, r28	; 61
   12dae:	df 91       	pop	r29
   12db0:	cf 91       	pop	r28
   12db2:	08 95       	ret

00012db4 <node_map>:

	void node_map(char *tokenstring,int type, int *len)
	{
   12db4:	cf 93       	push	r28
   12db6:	df 93       	push	r29
   12db8:	cd b7       	in	r28, 0x3d	; 61
   12dba:	de b7       	in	r29, 0x3e	; 62
   12dbc:	63 97       	sbiw	r28, 0x13	; 19
   12dbe:	0f b6       	in	r0, 0x3f	; 63
   12dc0:	f8 94       	cli
   12dc2:	de bf       	out	0x3e, r29	; 62
   12dc4:	0f be       	out	0x3f, r0	; 63
   12dc6:	cd bf       	out	0x3d, r28	; 61
   12dc8:	9f 87       	std	Y+15, r25	; 0x0f
   12dca:	8e 87       	std	Y+14, r24	; 0x0e
   12dcc:	79 8b       	std	Y+17, r23	; 0x11
   12dce:	68 8b       	std	Y+16, r22	; 0x10
   12dd0:	5b 8b       	std	Y+19, r21	; 0x13
   12dd2:	4a 8b       	std	Y+18, r20	; 0x12
		char a[2];
		char h[2];
		char seps[] = ", ";
   12dd4:	ce 01       	movw	r24, r28
   12dd6:	09 96       	adiw	r24, 0x09	; 9
   12dd8:	2f ee       	ldi	r18, 0xEF	; 239
   12dda:	32 e0       	ldi	r19, 0x02	; 2
   12ddc:	43 e0       	ldi	r20, 0x03	; 3
   12dde:	f9 01       	movw	r30, r18
   12de0:	00 80       	ld	r0, Z
   12de2:	2f 5f       	subi	r18, 0xFF	; 255
   12de4:	3f 4f       	sbci	r19, 0xFF	; 255
   12de6:	fc 01       	movw	r30, r24
   12de8:	00 82       	st	Z, r0
   12dea:	01 96       	adiw	r24, 0x01	; 1
   12dec:	41 50       	subi	r20, 0x01	; 1
   12dee:	44 23       	and	r20, r20
   12df0:	b1 f7       	brne	.-20     	; 0x12dde <node_map+0x2a>
		char* token;
		int var;
		int i = 0;
   12df2:	1c 82       	std	Y+4, r1	; 0x04
   12df4:	1b 82       	std	Y+3, r1	; 0x03
		token = strtok (tokenstring, seps);
   12df6:	8e 85       	ldd	r24, Y+14	; 0x0e
   12df8:	9f 85       	ldd	r25, Y+15	; 0x0f
   12dfa:	9e 01       	movw	r18, r28
   12dfc:	27 5f       	subi	r18, 0xF7	; 247
   12dfe:	3f 4f       	sbci	r19, 0xFF	; 255
   12e00:	b9 01       	movw	r22, r18
   12e02:	0e 94 48 a0 	call	0x14090	; 0x14090 <strtok>
   12e06:	9a 83       	std	Y+2, r25	; 0x02
   12e08:	89 83       	std	Y+1, r24	; 0x01
		while (token != NULL)
   12e0a:	4f c0       	rjmp	.+158    	; 0x12eaa <node_map+0xf6>
		{
			if(type==0)
   12e0c:	88 89       	ldd	r24, Y+16	; 0x10
   12e0e:	99 89       	ldd	r25, Y+17	; 0x11
   12e10:	00 97       	sbiw	r24, 0x00	; 0
   12e12:	79 f4       	brne	.+30     	; 0x12e32 <node_map+0x7e>
			{//Animal
				aniloc[i]=animals(token);
   12e14:	89 81       	ldd	r24, Y+1	; 0x01
   12e16:	9a 81       	ldd	r25, Y+2	; 0x02
   12e18:	0e 94 e1 95 	call	0x12bc2	; 0x12bc2 <animals>
   12e1c:	9c 01       	movw	r18, r24
   12e1e:	8b 81       	ldd	r24, Y+3	; 0x03
   12e20:	9c 81       	ldd	r25, Y+4	; 0x04
   12e22:	88 0f       	add	r24, r24
   12e24:	99 1f       	adc	r25, r25
   12e26:	80 55       	subi	r24, 0x50	; 80
   12e28:	9b 4f       	sbci	r25, 0xFB	; 251
   12e2a:	fc 01       	movw	r30, r24
   12e2c:	31 83       	std	Z+1, r19	; 0x01
   12e2e:	20 83       	st	Z, r18
   12e30:	0e c0       	rjmp	.+28     	; 0x12e4e <node_map+0x9a>
			}
			else
			{
				habloc[i]=habitats(token);
   12e32:	89 81       	ldd	r24, Y+1	; 0x01
   12e34:	9a 81       	ldd	r25, Y+2	; 0x02
   12e36:	0e 94 48 96 	call	0x12c90	; 0x12c90 <habitats>
   12e3a:	9c 01       	movw	r18, r24
   12e3c:	8b 81       	ldd	r24, Y+3	; 0x03
   12e3e:	9c 81       	ldd	r25, Y+4	; 0x04
   12e40:	88 0f       	add	r24, r24
   12e42:	99 1f       	adc	r25, r25
   12e44:	8b 5b       	subi	r24, 0xBB	; 187
   12e46:	9b 4f       	sbci	r25, 0xFB	; 251
   12e48:	fc 01       	movw	r30, r24
   12e4a:	31 83       	std	Z+1, r19	; 0x01
   12e4c:	20 83       	st	Z, r18
			}
			sscanf (token, "%d", &var);
   12e4e:	00 d0       	rcall	.+0      	; 0x12e50 <node_map+0x9c>
   12e50:	00 d0       	rcall	.+0      	; 0x12e52 <node_map+0x9e>
   12e52:	8d b7       	in	r24, 0x3d	; 61
   12e54:	9e b7       	in	r25, 0x3e	; 62
   12e56:	01 96       	adiw	r24, 0x01	; 1
   12e58:	29 81       	ldd	r18, Y+1	; 0x01
   12e5a:	3a 81       	ldd	r19, Y+2	; 0x02
   12e5c:	fc 01       	movw	r30, r24
   12e5e:	31 83       	std	Z+1, r19	; 0x01
   12e60:	20 83       	st	Z, r18
   12e62:	2c ee       	ldi	r18, 0xEC	; 236
   12e64:	32 e0       	ldi	r19, 0x02	; 2
   12e66:	fc 01       	movw	r30, r24
   12e68:	33 83       	std	Z+3, r19	; 0x03
   12e6a:	22 83       	std	Z+2, r18	; 0x02
   12e6c:	9e 01       	movw	r18, r28
   12e6e:	24 5f       	subi	r18, 0xF4	; 244
   12e70:	3f 4f       	sbci	r19, 0xFF	; 255
   12e72:	fc 01       	movw	r30, r24
   12e74:	35 83       	std	Z+5, r19	; 0x05
   12e76:	24 83       	std	Z+4, r18	; 0x04
   12e78:	0e 94 8f a0 	call	0x1411e	; 0x1411e <sscanf>
   12e7c:	8d b7       	in	r24, 0x3d	; 61
   12e7e:	9e b7       	in	r25, 0x3e	; 62
   12e80:	06 96       	adiw	r24, 0x06	; 6
   12e82:	0f b6       	in	r0, 0x3f	; 63
   12e84:	f8 94       	cli
   12e86:	9e bf       	out	0x3e, r25	; 62
   12e88:	0f be       	out	0x3f, r0	; 63
   12e8a:	8d bf       	out	0x3d, r24	; 61
			i++;
   12e8c:	8b 81       	ldd	r24, Y+3	; 0x03
   12e8e:	9c 81       	ldd	r25, Y+4	; 0x04
   12e90:	01 96       	adiw	r24, 0x01	; 1
   12e92:	9c 83       	std	Y+4, r25	; 0x04
   12e94:	8b 83       	std	Y+3, r24	; 0x03
			token = strtok (NULL, seps);
   12e96:	9e 01       	movw	r18, r28
   12e98:	27 5f       	subi	r18, 0xF7	; 247
   12e9a:	3f 4f       	sbci	r19, 0xFF	; 255
   12e9c:	80 e0       	ldi	r24, 0x00	; 0
   12e9e:	90 e0       	ldi	r25, 0x00	; 0
   12ea0:	b9 01       	movw	r22, r18
   12ea2:	0e 94 48 a0 	call	0x14090	; 0x14090 <strtok>
   12ea6:	9a 83       	std	Y+2, r25	; 0x02
   12ea8:	89 83       	std	Y+1, r24	; 0x01
		char seps[] = ", ";
		char* token;
		int var;
		int i = 0;
		token = strtok (tokenstring, seps);
		while (token != NULL)
   12eaa:	89 81       	ldd	r24, Y+1	; 0x01
   12eac:	9a 81       	ldd	r25, Y+2	; 0x02
   12eae:	00 97       	sbiw	r24, 0x00	; 0
   12eb0:	09 f0       	breq	.+2      	; 0x12eb4 <node_map+0x100>
   12eb2:	ac cf       	rjmp	.-168    	; 0x12e0c <node_map+0x58>
			}
			sscanf (token, "%d", &var);
			i++;
			token = strtok (NULL, seps);
		}
		*len=i;
   12eb4:	8a 89       	ldd	r24, Y+18	; 0x12
   12eb6:	9b 89       	ldd	r25, Y+19	; 0x13
   12eb8:	2b 81       	ldd	r18, Y+3	; 0x03
   12eba:	3c 81       	ldd	r19, Y+4	; 0x04
   12ebc:	fc 01       	movw	r30, r24
   12ebe:	31 83       	std	Z+1, r19	; 0x01
   12ec0:	20 83       	st	Z, r18
	}
   12ec2:	63 96       	adiw	r28, 0x13	; 19
   12ec4:	0f b6       	in	r0, 0x3f	; 63
   12ec6:	f8 94       	cli
   12ec8:	de bf       	out	0x3e, r29	; 62
   12eca:	0f be       	out	0x3f, r0	; 63
   12ecc:	cd bf       	out	0x3d, r28	; 61
   12ece:	df 91       	pop	r29
   12ed0:	cf 91       	pop	r28
   12ed2:	08 95       	ret

00012ed4 <uart2_init>:

unsigned char a = 0;
unsigned char h = 0;

void uart2_init(void)
{
   12ed4:	cf 93       	push	r28
   12ed6:	df 93       	push	r29
   12ed8:	cd b7       	in	r28, 0x3d	; 61
   12eda:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
   12edc:	81 ed       	ldi	r24, 0xD1	; 209
   12ede:	90 e0       	ldi	r25, 0x00	; 0
   12ee0:	fc 01       	movw	r30, r24
   12ee2:	10 82       	st	Z, r1
	UCSR2A = 0x00;
   12ee4:	80 ed       	ldi	r24, 0xD0	; 208
   12ee6:	90 e0       	ldi	r25, 0x00	; 0
   12ee8:	fc 01       	movw	r30, r24
   12eea:	10 82       	st	Z, r1
	UCSR2C = 0x06;
   12eec:	82 ed       	ldi	r24, 0xD2	; 210
   12eee:	90 e0       	ldi	r25, 0x00	; 0
   12ef0:	26 e0       	ldi	r18, 0x06	; 6
   12ef2:	fc 01       	movw	r30, r24
   12ef4:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
   12ef6:	84 ed       	ldi	r24, 0xD4	; 212
   12ef8:	90 e0       	ldi	r25, 0x00	; 0
   12efa:	2f e5       	ldi	r18, 0x5F	; 95
   12efc:	fc 01       	movw	r30, r24
   12efe:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
   12f00:	85 ed       	ldi	r24, 0xD5	; 213
   12f02:	90 e0       	ldi	r25, 0x00	; 0
   12f04:	fc 01       	movw	r30, r24
   12f06:	10 82       	st	Z, r1
	UCSR2B = 0x98;
   12f08:	81 ed       	ldi	r24, 0xD1	; 209
   12f0a:	90 e0       	ldi	r25, 0x00	; 0
   12f0c:	28 e9       	ldi	r18, 0x98	; 152
   12f0e:	fc 01       	movw	r30, r24
   12f10:	20 83       	st	Z, r18
}
   12f12:	df 91       	pop	r29
   12f14:	cf 91       	pop	r28
   12f16:	08 95       	ret

00012f18 <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{
   12f18:	1f 92       	push	r1
   12f1a:	0f 92       	push	r0
   12f1c:	0f b6       	in	r0, 0x3f	; 63
   12f1e:	0f 92       	push	r0
   12f20:	00 90 5b 00 	lds	r0, 0x005B
   12f24:	0f 92       	push	r0
   12f26:	11 24       	eor	r1, r1
   12f28:	2f 93       	push	r18
   12f2a:	3f 93       	push	r19
   12f2c:	4f 93       	push	r20
   12f2e:	5f 93       	push	r21
   12f30:	6f 93       	push	r22
   12f32:	7f 93       	push	r23
   12f34:	8f 93       	push	r24
   12f36:	9f 93       	push	r25
   12f38:	af 93       	push	r26
   12f3a:	bf 93       	push	r27
   12f3c:	ef 93       	push	r30
   12f3e:	ff 93       	push	r31
   12f40:	cf 93       	push	r28
   12f42:	df 93       	push	r29
   12f44:	cd b7       	in	r28, 0x3d	; 61
   12f46:	de b7       	in	r29, 0x3e	; 62
	data= UDR2;
   12f48:	86 ed       	ldi	r24, 0xD6	; 214
   12f4a:	90 e0       	ldi	r25, 0x00	; 0
   12f4c:	fc 01       	movw	r30, r24
   12f4e:	80 81       	ld	r24, Z
   12f50:	80 93 ac 04 	sts	0x04AC, r24
	if(data == 0x0A)
   12f54:	80 91 ac 04 	lds	r24, 0x04AC
   12f58:	8a 30       	cpi	r24, 0x0A	; 10
   12f5a:	61 f4       	brne	.+24     	; 0x12f74 <__vector_51+0x5c>
	{
		pos = count;
   12f5c:	80 91 25 04 	lds	r24, 0x0425
   12f60:	80 93 f2 02 	sts	0x02F2, r24
		count++;
   12f64:	80 91 25 04 	lds	r24, 0x0425
   12f68:	8f 5f       	subi	r24, 0xFF	; 255
   12f6a:	80 93 25 04 	sts	0x0425, r24
		flag = FALSE;
   12f6e:	10 92 f3 02 	sts	0x02F3, r1
   12f72:	52 c0       	rjmp	.+164    	; 0x13018 <__vector_51+0x100>
	}
	else if(data == 0x23)
   12f74:	80 91 ac 04 	lds	r24, 0x04AC
   12f78:	83 32       	cpi	r24, 0x23	; 35
   12f7a:	91 f4       	brne	.+36     	; 0x12fa0 <__vector_51+0x88>
	{
		flag = 2;
   12f7c:	82 e0       	ldi	r24, 0x02	; 2
   12f7e:	80 93 f3 02 	sts	0x02F3, r24
		strcpy(hab, tmp1);
   12f82:	81 e7       	ldi	r24, 0x71	; 113
   12f84:	94 e0       	ldi	r25, 0x04	; 4
   12f86:	2c ed       	ldi	r18, 0xDC	; 220
   12f88:	34 e0       	ldi	r19, 0x04	; 4
   12f8a:	b9 01       	movw	r22, r18
   12f8c:	0e 94 61 a0 	call	0x140c2	; 0x140c2 <strcpy>
		strcpy(ani, tmp2);
   12f90:	8a e2       	ldi	r24, 0x2A	; 42
   12f92:	94 e0       	ldi	r25, 0x04	; 4
   12f94:	2c e8       	ldi	r18, 0x8C	; 140
   12f96:	34 e0       	ldi	r19, 0x04	; 4
   12f98:	b9 01       	movw	r22, r18
   12f9a:	0e 94 61 a0 	call	0x140c2	; 0x140c2 <strcpy>
   12f9e:	3c c0       	rjmp	.+120    	; 0x13018 <__vector_51+0x100>
	}
	else if(count > pos && flag == FALSE)
   12fa0:	90 91 25 04 	lds	r25, 0x0425
   12fa4:	80 91 f2 02 	lds	r24, 0x02F2
   12fa8:	89 17       	cp	r24, r25
   12faa:	d8 f4       	brcc	.+54     	; 0x12fe2 <__vector_51+0xca>
   12fac:	80 91 f3 02 	lds	r24, 0x02F3
   12fb0:	88 23       	and	r24, r24
   12fb2:	b9 f4       	brne	.+46     	; 0x12fe2 <__vector_51+0xca>
	{
		tmp2[a]=data;
   12fb4:	80 91 26 04 	lds	r24, 0x0426
   12fb8:	88 2f       	mov	r24, r24
   12fba:	90 e0       	ldi	r25, 0x00	; 0
   12fbc:	20 91 ac 04 	lds	r18, 0x04AC
   12fc0:	84 57       	subi	r24, 0x74	; 116
   12fc2:	9b 4f       	sbci	r25, 0xFB	; 251
   12fc4:	fc 01       	movw	r30, r24
   12fc6:	20 83       	st	Z, r18
		a++;
   12fc8:	80 91 26 04 	lds	r24, 0x0426
   12fcc:	8f 5f       	subi	r24, 0xFF	; 255
   12fce:	80 93 26 04 	sts	0x0426, r24
		count++;
   12fd2:	80 91 25 04 	lds	r24, 0x0425
   12fd6:	8f 5f       	subi	r24, 0xFF	; 255
   12fd8:	80 93 25 04 	sts	0x0425, r24
		flag = FALSE;
   12fdc:	10 92 f3 02 	sts	0x02F3, r1
   12fe0:	1b c0       	rjmp	.+54     	; 0x13018 <__vector_51+0x100>
	}
	else if(flag==TRUE)
   12fe2:	80 91 f3 02 	lds	r24, 0x02F3
   12fe6:	81 30       	cpi	r24, 0x01	; 1
   12fe8:	b9 f4       	brne	.+46     	; 0x13018 <__vector_51+0x100>
	{
		tmp1[h]=data;
   12fea:	80 91 27 04 	lds	r24, 0x0427
   12fee:	88 2f       	mov	r24, r24
   12ff0:	90 e0       	ldi	r25, 0x00	; 0
   12ff2:	20 91 ac 04 	lds	r18, 0x04AC
   12ff6:	84 52       	subi	r24, 0x24	; 36
   12ff8:	9b 4f       	sbci	r25, 0xFB	; 251
   12ffa:	fc 01       	movw	r30, r24
   12ffc:	20 83       	st	Z, r18
		h++;
   12ffe:	80 91 27 04 	lds	r24, 0x0427
   13002:	8f 5f       	subi	r24, 0xFF	; 255
   13004:	80 93 27 04 	sts	0x0427, r24
		count++;
   13008:	80 91 25 04 	lds	r24, 0x0425
   1300c:	8f 5f       	subi	r24, 0xFF	; 255
   1300e:	80 93 25 04 	sts	0x0425, r24
		flag = TRUE;
   13012:	81 e0       	ldi	r24, 0x01	; 1
   13014:	80 93 f3 02 	sts	0x02F3, r24
	}
}
   13018:	df 91       	pop	r29
   1301a:	cf 91       	pop	r28
   1301c:	ff 91       	pop	r31
   1301e:	ef 91       	pop	r30
   13020:	bf 91       	pop	r27
   13022:	af 91       	pop	r26
   13024:	9f 91       	pop	r25
   13026:	8f 91       	pop	r24
   13028:	7f 91       	pop	r23
   1302a:	6f 91       	pop	r22
   1302c:	5f 91       	pop	r21
   1302e:	4f 91       	pop	r20
   13030:	3f 91       	pop	r19
   13032:	2f 91       	pop	r18
   13034:	0f 90       	pop	r0
   13036:	00 92 5b 00 	sts	0x005B, r0
   1303a:	0f 90       	pop	r0
   1303c:	0f be       	out	0x3f, r0	; 63
   1303e:	0f 90       	pop	r0
   13040:	1f 90       	pop	r1
   13042:	18 95       	reti

00013044 <interrupt_switch_config>:
#include "node.c"
#include "uart.c"

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
   13044:	cf 93       	push	r28
   13046:	df 93       	push	r29
   13048:	cd b7       	in	r28, 0x3d	; 61
   1304a:	de b7       	in	r29, 0x3e	; 62
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
   1304c:	8d e2       	ldi	r24, 0x2D	; 45
   1304e:	90 e0       	ldi	r25, 0x00	; 0
   13050:	2d e2       	ldi	r18, 0x2D	; 45
   13052:	30 e0       	ldi	r19, 0x00	; 0
   13054:	f9 01       	movw	r30, r18
   13056:	20 81       	ld	r18, Z
   13058:	2f 77       	andi	r18, 0x7F	; 127
   1305a:	fc 01       	movw	r30, r24
   1305c:	20 83       	st	Z, r18
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
   1305e:	8e e2       	ldi	r24, 0x2E	; 46
   13060:	90 e0       	ldi	r25, 0x00	; 0
   13062:	2e e2       	ldi	r18, 0x2E	; 46
   13064:	30 e0       	ldi	r19, 0x00	; 0
   13066:	f9 01       	movw	r30, r18
   13068:	20 81       	ld	r18, Z
   1306a:	20 68       	ori	r18, 0x80	; 128
   1306c:	fc 01       	movw	r30, r24
   1306e:	20 83       	st	Z, r18
}
   13070:	df 91       	pop	r29
   13072:	cf 91       	pop	r28
   13074:	08 95       	ret

00013076 <pick_assign>:
   various identifiers are used for different cases throughout the run.
   
                                                                        */
/************************************************************************/
void pick_assign(int nxt_node)
{
   13076:	cf 93       	push	r28
   13078:	df 93       	push	r29
   1307a:	cd b7       	in	r28, 0x3d	; 61
   1307c:	de b7       	in	r29, 0x3e	; 62
   1307e:	e4 97       	sbiw	r28, 0x34	; 52
   13080:	0f b6       	in	r0, 0x3f	; 63
   13082:	f8 94       	cli
   13084:	de bf       	out	0x3e, r29	; 62
   13086:	0f be       	out	0x3f, r0	; 63
   13088:	cd bf       	out	0x3d, r28	; 61
   1308a:	9c ab       	sts	0x5c, r25
   1308c:	8b ab       	sts	0x5b, r24
	int left[6]={7,13,19,25,99,99}; // Left Pick
   1308e:	ce 01       	movw	r24, r28
   13090:	03 96       	adiw	r24, 0x03	; 3
   13092:	24 ef       	ldi	r18, 0xF4	; 244
   13094:	32 e0       	ldi	r19, 0x02	; 2
   13096:	4c e0       	ldi	r20, 0x0C	; 12
   13098:	f9 01       	movw	r30, r18
   1309a:	00 80       	ld	r0, Z
   1309c:	2f 5f       	subi	r18, 0xFF	; 255
   1309e:	3f 4f       	sbci	r19, 0xFF	; 255
   130a0:	fc 01       	movw	r30, r24
   130a2:	00 82       	st	Z, r0
   130a4:	01 96       	adiw	r24, 0x01	; 1
   130a6:	41 50       	subi	r20, 0x01	; 1
   130a8:	44 23       	and	r20, r20
   130aa:	b1 f7       	brne	.-20     	; 0x13098 <pick_assign+0x22>
	int right[6]={12,18,24,30,99,99}; // Right Pick
   130ac:	ce 01       	movw	r24, r28
   130ae:	0f 96       	adiw	r24, 0x0f	; 15
   130b0:	20 e0       	ldi	r18, 0x00	; 0
   130b2:	33 e0       	ldi	r19, 0x03	; 3
   130b4:	4c e0       	ldi	r20, 0x0C	; 12
   130b6:	f9 01       	movw	r30, r18
   130b8:	00 80       	ld	r0, Z
   130ba:	2f 5f       	subi	r18, 0xFF	; 255
   130bc:	3f 4f       	sbci	r19, 0xFF	; 255
   130be:	fc 01       	movw	r30, r24
   130c0:	00 82       	st	Z, r0
   130c2:	01 96       	adiw	r24, 0x01	; 1
   130c4:	41 50       	subi	r20, 0x01	; 1
   130c6:	44 23       	and	r20, r20
   130c8:	b1 f7       	brne	.-20     	; 0x130b6 <pick_assign+0x40>
	int back[6]={2,3,4,5,99,99};  // Back Pick
   130ca:	ce 01       	movw	r24, r28
   130cc:	4b 96       	adiw	r24, 0x1b	; 27
   130ce:	2c e0       	ldi	r18, 0x0C	; 12
   130d0:	33 e0       	ldi	r19, 0x03	; 3
   130d2:	4c e0       	ldi	r20, 0x0C	; 12
   130d4:	f9 01       	movw	r30, r18
   130d6:	00 80       	ld	r0, Z
   130d8:	2f 5f       	subi	r18, 0xFF	; 255
   130da:	3f 4f       	sbci	r19, 0xFF	; 255
   130dc:	fc 01       	movw	r30, r24
   130de:	00 82       	st	Z, r0
   130e0:	01 96       	adiw	r24, 0x01	; 1
   130e2:	41 50       	subi	r20, 0x01	; 1
   130e4:	44 23       	and	r20, r20
   130e6:	b1 f7       	brne	.-20     	; 0x130d4 <pick_assign+0x5e>
	int front[6]={32,33,34,35,99,99}; // Front Pick
   130e8:	ce 01       	movw	r24, r28
   130ea:	87 96       	adiw	r24, 0x27	; 39
   130ec:	28 e1       	ldi	r18, 0x18	; 24
   130ee:	33 e0       	ldi	r19, 0x03	; 3
   130f0:	4c e0       	ldi	r20, 0x0C	; 12
   130f2:	f9 01       	movw	r30, r18
   130f4:	00 80       	ld	r0, Z
   130f6:	2f 5f       	subi	r18, 0xFF	; 255
   130f8:	3f 4f       	sbci	r19, 0xFF	; 255
   130fa:	fc 01       	movw	r30, r24
   130fc:	00 82       	st	Z, r0
   130fe:	01 96       	adiw	r24, 0x01	; 1
   13100:	41 50       	subi	r20, 0x01	; 1
   13102:	44 23       	and	r20, r20
   13104:	b1 f7       	brne	.-20     	; 0x130f2 <pick_assign+0x7c>
	int temp_var=0;
   13106:	1a 82       	std	Y+2, r1	; 0x02
   13108:	19 82       	std	Y+1, r1	; 0x01
	for(temp_var=0;temp_var<6;temp_var++)
   1310a:	1a 82       	std	Y+2, r1	; 0x02
   1310c:	19 82       	std	Y+1, r1	; 0x01
   1310e:	f9 c0       	rjmp	.+498    	; 0x13302 <pick_assign+0x28c>
	{
		if(left[temp_var]==nxt_node)
   13110:	89 81       	ldd	r24, Y+1	; 0x01
   13112:	9a 81       	ldd	r25, Y+2	; 0x02
   13114:	88 0f       	add	r24, r24
   13116:	99 1f       	adc	r25, r25
   13118:	9e 01       	movw	r18, r28
   1311a:	2f 5f       	subi	r18, 0xFF	; 255
   1311c:	3f 4f       	sbci	r19, 0xFF	; 255
   1311e:	82 0f       	add	r24, r18
   13120:	93 1f       	adc	r25, r19
   13122:	02 96       	adiw	r24, 0x02	; 2
   13124:	fc 01       	movw	r30, r24
   13126:	20 81       	ld	r18, Z
   13128:	31 81       	ldd	r19, Z+1	; 0x01
   1312a:	8b a9       	sts	0x4b, r24
   1312c:	9c a9       	sts	0x4c, r25
   1312e:	28 17       	cp	r18, r24
   13130:	39 07       	cpc	r19, r25
   13132:	99 f4       	brne	.+38     	; 0x1315a <pick_assign+0xe4>
        {
			strcat(master_path,"1");
   13134:	83 e5       	ldi	r24, 0x53	; 83
   13136:	93 e0       	ldi	r25, 0x03	; 3
   13138:	9c 01       	movw	r18, r24
   1313a:	f9 01       	movw	r30, r18
   1313c:	01 90       	ld	r0, Z+
   1313e:	00 20       	and	r0, r0
   13140:	e9 f7       	brne	.-6      	; 0x1313c <pick_assign+0xc6>
   13142:	cf 01       	movw	r24, r30
   13144:	01 97       	sbiw	r24, 0x01	; 1
   13146:	82 1b       	sub	r24, r18
   13148:	93 0b       	sbc	r25, r19
   1314a:	8d 5a       	subi	r24, 0xAD	; 173
   1314c:	9c 4f       	sbci	r25, 0xFC	; 252
   1314e:	21 e3       	ldi	r18, 0x31	; 49
   13150:	30 e0       	ldi	r19, 0x00	; 0
   13152:	fc 01       	movw	r30, r24
   13154:	31 83       	std	Z+1, r19	; 0x01
   13156:	20 83       	st	Z, r18
			return;
   13158:	da c0       	rjmp	.+436    	; 0x1330e <pick_assign+0x298>
		}
		else if(right[temp_var]==nxt_node)
   1315a:	89 81       	ldd	r24, Y+1	; 0x01
   1315c:	9a 81       	ldd	r25, Y+2	; 0x02
   1315e:	88 0f       	add	r24, r24
   13160:	99 1f       	adc	r25, r25
   13162:	9e 01       	movw	r18, r28
   13164:	2f 5f       	subi	r18, 0xFF	; 255
   13166:	3f 4f       	sbci	r19, 0xFF	; 255
   13168:	82 0f       	add	r24, r18
   1316a:	93 1f       	adc	r25, r19
   1316c:	0e 96       	adiw	r24, 0x0e	; 14
   1316e:	fc 01       	movw	r30, r24
   13170:	20 81       	ld	r18, Z
   13172:	31 81       	ldd	r19, Z+1	; 0x01
   13174:	8b a9       	sts	0x4b, r24
   13176:	9c a9       	sts	0x4c, r25
   13178:	28 17       	cp	r18, r24
   1317a:	39 07       	cpc	r19, r25
   1317c:	99 f4       	brne	.+38     	; 0x131a4 <pick_assign+0x12e>
       {
			strcat(master_path,"2");
   1317e:	83 e5       	ldi	r24, 0x53	; 83
   13180:	93 e0       	ldi	r25, 0x03	; 3
   13182:	9c 01       	movw	r18, r24
   13184:	f9 01       	movw	r30, r18
   13186:	01 90       	ld	r0, Z+
   13188:	00 20       	and	r0, r0
   1318a:	e9 f7       	brne	.-6      	; 0x13186 <pick_assign+0x110>
   1318c:	cf 01       	movw	r24, r30
   1318e:	01 97       	sbiw	r24, 0x01	; 1
   13190:	82 1b       	sub	r24, r18
   13192:	93 0b       	sbc	r25, r19
   13194:	8d 5a       	subi	r24, 0xAD	; 173
   13196:	9c 4f       	sbci	r25, 0xFC	; 252
   13198:	22 e3       	ldi	r18, 0x32	; 50
   1319a:	30 e0       	ldi	r19, 0x00	; 0
   1319c:	fc 01       	movw	r30, r24
   1319e:	31 83       	std	Z+1, r19	; 0x01
   131a0:	20 83       	st	Z, r18
			return;
   131a2:	b5 c0       	rjmp	.+362    	; 0x1330e <pick_assign+0x298>
	   }
		else if(back[temp_var]==nxt_node)
   131a4:	89 81       	ldd	r24, Y+1	; 0x01
   131a6:	9a 81       	ldd	r25, Y+2	; 0x02
   131a8:	88 0f       	add	r24, r24
   131aa:	99 1f       	adc	r25, r25
   131ac:	9e 01       	movw	r18, r28
   131ae:	2f 5f       	subi	r18, 0xFF	; 255
   131b0:	3f 4f       	sbci	r19, 0xFF	; 255
   131b2:	82 0f       	add	r24, r18
   131b4:	93 1f       	adc	r25, r19
   131b6:	4a 96       	adiw	r24, 0x1a	; 26
   131b8:	fc 01       	movw	r30, r24
   131ba:	20 81       	ld	r18, Z
   131bc:	31 81       	ldd	r19, Z+1	; 0x01
   131be:	8b a9       	sts	0x4b, r24
   131c0:	9c a9       	sts	0x4c, r25
   131c2:	28 17       	cp	r18, r24
   131c4:	39 07       	cpc	r19, r25
   131c6:	99 f4       	brne	.+38     	; 0x131ee <pick_assign+0x178>
       {
			strcat(master_path,"3");
   131c8:	83 e5       	ldi	r24, 0x53	; 83
   131ca:	93 e0       	ldi	r25, 0x03	; 3
   131cc:	9c 01       	movw	r18, r24
   131ce:	f9 01       	movw	r30, r18
   131d0:	01 90       	ld	r0, Z+
   131d2:	00 20       	and	r0, r0
   131d4:	e9 f7       	brne	.-6      	; 0x131d0 <pick_assign+0x15a>
   131d6:	cf 01       	movw	r24, r30
   131d8:	01 97       	sbiw	r24, 0x01	; 1
   131da:	82 1b       	sub	r24, r18
   131dc:	93 0b       	sbc	r25, r19
   131de:	8d 5a       	subi	r24, 0xAD	; 173
   131e0:	9c 4f       	sbci	r25, 0xFC	; 252
   131e2:	23 e3       	ldi	r18, 0x33	; 51
   131e4:	30 e0       	ldi	r19, 0x00	; 0
   131e6:	fc 01       	movw	r30, r24
   131e8:	31 83       	std	Z+1, r19	; 0x01
   131ea:	20 83       	st	Z, r18
			return;
   131ec:	90 c0       	rjmp	.+288    	; 0x1330e <pick_assign+0x298>
	   }
		else if(nxt_node==1)
   131ee:	8b a9       	sts	0x4b, r24
   131f0:	9c a9       	sts	0x4c, r25
   131f2:	81 30       	cpi	r24, 0x01	; 1
   131f4:	91 05       	cpc	r25, r1
   131f6:	99 f4       	brne	.+38     	; 0x1321e <pick_assign+0x1a8>
        {
			strcat(master_path,"4");// first node
   131f8:	83 e5       	ldi	r24, 0x53	; 83
   131fa:	93 e0       	ldi	r25, 0x03	; 3
   131fc:	9c 01       	movw	r18, r24
   131fe:	f9 01       	movw	r30, r18
   13200:	01 90       	ld	r0, Z+
   13202:	00 20       	and	r0, r0
   13204:	e9 f7       	brne	.-6      	; 0x13200 <pick_assign+0x18a>
   13206:	cf 01       	movw	r24, r30
   13208:	01 97       	sbiw	r24, 0x01	; 1
   1320a:	82 1b       	sub	r24, r18
   1320c:	93 0b       	sbc	r25, r19
   1320e:	8d 5a       	subi	r24, 0xAD	; 173
   13210:	9c 4f       	sbci	r25, 0xFC	; 252
   13212:	24 e3       	ldi	r18, 0x34	; 52
   13214:	30 e0       	ldi	r19, 0x00	; 0
   13216:	fc 01       	movw	r30, r24
   13218:	31 83       	std	Z+1, r19	; 0x01
   1321a:	20 83       	st	Z, r18
			return;
   1321c:	78 c0       	rjmp	.+240    	; 0x1330e <pick_assign+0x298>
		}
		else if(nxt_node==6)
   1321e:	8b a9       	sts	0x4b, r24
   13220:	9c a9       	sts	0x4c, r25
   13222:	86 30       	cpi	r24, 0x06	; 6
   13224:	91 05       	cpc	r25, r1
   13226:	99 f4       	brne	.+38     	; 0x1324e <pick_assign+0x1d8>
        {
			strcat(master_path,"5");// first row last col
   13228:	83 e5       	ldi	r24, 0x53	; 83
   1322a:	93 e0       	ldi	r25, 0x03	; 3
   1322c:	9c 01       	movw	r18, r24
   1322e:	f9 01       	movw	r30, r18
   13230:	01 90       	ld	r0, Z+
   13232:	00 20       	and	r0, r0
   13234:	e9 f7       	brne	.-6      	; 0x13230 <pick_assign+0x1ba>
   13236:	cf 01       	movw	r24, r30
   13238:	01 97       	sbiw	r24, 0x01	; 1
   1323a:	82 1b       	sub	r24, r18
   1323c:	93 0b       	sbc	r25, r19
   1323e:	8d 5a       	subi	r24, 0xAD	; 173
   13240:	9c 4f       	sbci	r25, 0xFC	; 252
   13242:	25 e3       	ldi	r18, 0x35	; 53
   13244:	30 e0       	ldi	r19, 0x00	; 0
   13246:	fc 01       	movw	r30, r24
   13248:	31 83       	std	Z+1, r19	; 0x01
   1324a:	20 83       	st	Z, r18
			return;
   1324c:	60 c0       	rjmp	.+192    	; 0x1330e <pick_assign+0x298>
		}
		else if(nxt_node==31)//
   1324e:	8b a9       	sts	0x4b, r24
   13250:	9c a9       	sts	0x4c, r25
   13252:	8f 31       	cpi	r24, 0x1F	; 31
   13254:	91 05       	cpc	r25, r1
   13256:	99 f4       	brne	.+38     	; 0x1327e <pick_assign+0x208>
		{
			strcat(master_path,"6");//last row first col
   13258:	83 e5       	ldi	r24, 0x53	; 83
   1325a:	93 e0       	ldi	r25, 0x03	; 3
   1325c:	9c 01       	movw	r18, r24
   1325e:	f9 01       	movw	r30, r18
   13260:	01 90       	ld	r0, Z+
   13262:	00 20       	and	r0, r0
   13264:	e9 f7       	brne	.-6      	; 0x13260 <pick_assign+0x1ea>
   13266:	cf 01       	movw	r24, r30
   13268:	01 97       	sbiw	r24, 0x01	; 1
   1326a:	82 1b       	sub	r24, r18
   1326c:	93 0b       	sbc	r25, r19
   1326e:	8d 5a       	subi	r24, 0xAD	; 173
   13270:	9c 4f       	sbci	r25, 0xFC	; 252
   13272:	26 e3       	ldi	r18, 0x36	; 54
   13274:	30 e0       	ldi	r19, 0x00	; 0
   13276:	fc 01       	movw	r30, r24
   13278:	31 83       	std	Z+1, r19	; 0x01
   1327a:	20 83       	st	Z, r18
			return;
   1327c:	48 c0       	rjmp	.+144    	; 0x1330e <pick_assign+0x298>
		}
		else if(nxt_node==36)
   1327e:	8b a9       	sts	0x4b, r24
   13280:	9c a9       	sts	0x4c, r25
   13282:	84 32       	cpi	r24, 0x24	; 36
   13284:	91 05       	cpc	r25, r1
   13286:	99 f4       	brne	.+38     	; 0x132ae <pick_assign+0x238>
		{
			strcat(master_path,"7");//last row last col
   13288:	83 e5       	ldi	r24, 0x53	; 83
   1328a:	93 e0       	ldi	r25, 0x03	; 3
   1328c:	9c 01       	movw	r18, r24
   1328e:	f9 01       	movw	r30, r18
   13290:	01 90       	ld	r0, Z+
   13292:	00 20       	and	r0, r0
   13294:	e9 f7       	brne	.-6      	; 0x13290 <pick_assign+0x21a>
   13296:	cf 01       	movw	r24, r30
   13298:	01 97       	sbiw	r24, 0x01	; 1
   1329a:	82 1b       	sub	r24, r18
   1329c:	93 0b       	sbc	r25, r19
   1329e:	8d 5a       	subi	r24, 0xAD	; 173
   132a0:	9c 4f       	sbci	r25, 0xFC	; 252
   132a2:	27 e3       	ldi	r18, 0x37	; 55
   132a4:	30 e0       	ldi	r19, 0x00	; 0
   132a6:	fc 01       	movw	r30, r24
   132a8:	31 83       	std	Z+1, r19	; 0x01
   132aa:	20 83       	st	Z, r18
			return;
   132ac:	30 c0       	rjmp	.+96     	; 0x1330e <pick_assign+0x298>
		}
		else if(front[temp_var]==nxt_node)
   132ae:	89 81       	ldd	r24, Y+1	; 0x01
   132b0:	9a 81       	ldd	r25, Y+2	; 0x02
   132b2:	88 0f       	add	r24, r24
   132b4:	99 1f       	adc	r25, r25
   132b6:	9e 01       	movw	r18, r28
   132b8:	2f 5f       	subi	r18, 0xFF	; 255
   132ba:	3f 4f       	sbci	r19, 0xFF	; 255
   132bc:	82 0f       	add	r24, r18
   132be:	93 1f       	adc	r25, r19
   132c0:	86 96       	adiw	r24, 0x26	; 38
   132c2:	fc 01       	movw	r30, r24
   132c4:	20 81       	ld	r18, Z
   132c6:	31 81       	ldd	r19, Z+1	; 0x01
   132c8:	8b a9       	sts	0x4b, r24
   132ca:	9c a9       	sts	0x4c, r25
   132cc:	28 17       	cp	r18, r24
   132ce:	39 07       	cpc	r19, r25
   132d0:	99 f4       	brne	.+38     	; 0x132f8 <pick_assign+0x282>
		{
			strcat(master_path,"8");
   132d2:	83 e5       	ldi	r24, 0x53	; 83
   132d4:	93 e0       	ldi	r25, 0x03	; 3
   132d6:	9c 01       	movw	r18, r24
   132d8:	f9 01       	movw	r30, r18
   132da:	01 90       	ld	r0, Z+
   132dc:	00 20       	and	r0, r0
   132de:	e9 f7       	brne	.-6      	; 0x132da <pick_assign+0x264>
   132e0:	cf 01       	movw	r24, r30
   132e2:	01 97       	sbiw	r24, 0x01	; 1
   132e4:	82 1b       	sub	r24, r18
   132e6:	93 0b       	sbc	r25, r19
   132e8:	8d 5a       	subi	r24, 0xAD	; 173
   132ea:	9c 4f       	sbci	r25, 0xFC	; 252
   132ec:	28 e3       	ldi	r18, 0x38	; 56
   132ee:	30 e0       	ldi	r19, 0x00	; 0
   132f0:	fc 01       	movw	r30, r24
   132f2:	31 83       	std	Z+1, r19	; 0x01
   132f4:	20 83       	st	Z, r18
			return;
   132f6:	0b c0       	rjmp	.+22     	; 0x1330e <pick_assign+0x298>
	int left[6]={7,13,19,25,99,99}; // Left Pick
	int right[6]={12,18,24,30,99,99}; // Right Pick
	int back[6]={2,3,4,5,99,99};  // Back Pick
	int front[6]={32,33,34,35,99,99}; // Front Pick
	int temp_var=0;
	for(temp_var=0;temp_var<6;temp_var++)
   132f8:	89 81       	ldd	r24, Y+1	; 0x01
   132fa:	9a 81       	ldd	r25, Y+2	; 0x02
   132fc:	01 96       	adiw	r24, 0x01	; 1
   132fe:	9a 83       	std	Y+2, r25	; 0x02
   13300:	89 83       	std	Y+1, r24	; 0x01
   13302:	89 81       	ldd	r24, Y+1	; 0x01
   13304:	9a 81       	ldd	r25, Y+2	; 0x02
   13306:	86 30       	cpi	r24, 0x06	; 6
   13308:	91 05       	cpc	r25, r1
   1330a:	0c f4       	brge	.+2      	; 0x1330e <pick_assign+0x298>
   1330c:	01 cf       	rjmp	.-510    	; 0x13110 <pick_assign+0x9a>
		{
			strcat(master_path,"8");
			return;
		}
	}
}
   1330e:	e4 96       	adiw	r28, 0x34	; 52
   13310:	0f b6       	in	r0, 0x3f	; 63
   13312:	f8 94       	cli
   13314:	de bf       	out	0x3e, r29	; 62
   13316:	0f be       	out	0x3f, r0	; 63
   13318:	cd bf       	out	0x3d, r28	; 61
   1331a:	df 91       	pop	r29
   1331c:	cf 91       	pop	r28
   1331e:	08 95       	ret

00013320 <main>:
/************************************************************************/
/* This Program initializes all init devices and port configures throughout the program and
   integrates everything together.                                                                     */
/************************************************************************/
int main()
{
   13320:	0f 93       	push	r16
   13322:	1f 93       	push	r17
   13324:	cf 93       	push	r28
   13326:	df 93       	push	r29
   13328:	cd b7       	in	r28, 0x3d	; 61
   1332a:	de b7       	in	r29, 0x3e	; 62
   1332c:	e8 97       	sbiw	r28, 0x38	; 56
   1332e:	0f b6       	in	r0, 0x3f	; 63
   13330:	f8 94       	cli
   13332:	de bf       	out	0x3e, r29	; 62
   13334:	0f be       	out	0x3f, r0	; 63
   13336:	cd bf       	out	0x3d, r28	; 61
	lcd_port_config();
   13338:	0e 94 47 8d 	call	0x11a8e	; 0x11a8e <lcd_port_config>
	init_devices();
   1333c:	0e 94 77 8f 	call	0x11eee	; 0x11eee <init_devices>
	lcd_set_4bit();
   13340:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_set_4bit>
	lcd_init();
   13344:	0e 94 91 06 	call	0xd22	; 0xd22 <lcd_init>
	int lena,lenb,lenp;
	int present_node=0, next_node=0,t_count=0;
   13348:	1a 82       	std	Y+2, r1	; 0x02
   1334a:	19 82       	std	Y+1, r1	; 0x01
   1334c:	1c 82       	std	Y+4, r1	; 0x04
   1334e:	1b 82       	std	Y+3, r1	; 0x03
   13350:	1a 8a       	std	Y+18, r1	; 0x12
   13352:	19 8a       	std	Y+17, r1	; 0x11
	int switch_pressed = 0, mapped=0,size=0,an_count=0,hab_count=0,var=0,complete=0;
   13354:	1e 82       	std	Y+6, r1	; 0x06
   13356:	1d 82       	std	Y+5, r1	; 0x05
   13358:	18 86       	std	Y+8, r1	; 0x08
   1335a:	1f 82       	std	Y+7, r1	; 0x07
   1335c:	1c 8a       	std	Y+20, r1	; 0x14
   1335e:	1b 8a       	std	Y+19, r1	; 0x13
   13360:	1a 86       	std	Y+10, r1	; 0x0a
   13362:	19 86       	std	Y+9, r1	; 0x09
   13364:	1c 86       	std	Y+12, r1	; 0x0c
   13366:	1b 86       	std	Y+11, r1	; 0x0b
   13368:	1e 86       	std	Y+14, r1	; 0x0e
   1336a:	1d 86       	std	Y+13, r1	; 0x0d
   1336c:	18 8a       	std	Y+16, r1	; 0x10
   1336e:	1f 86       	std	Y+15, r1	; 0x0f
	char *p;
	path_fin=0;
   13370:	10 92 1c 04 	sts	0x041C, r1
   13374:	10 92 1b 04 	sts	0x041B, r1
	halt=0;
   13378:	10 92 52 03 	sts	0x0352, r1
   1337c:	10 92 51 03 	sts	0x0351, r1
	// Setting Servos to initial positions
	defaulty();
   13380:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <defaulty>
	while(!complete)// Checking for complete flag
   13384:	a3 c1       	rjmp	.+838    	; 0x136cc <main+0x3ac>
	{	
		if((PINE & 0x80) == 0x80) //when BOOT switch is not pressed
   13386:	8c e2       	ldi	r24, 0x2C	; 44
   13388:	90 e0       	ldi	r25, 0x00	; 0
   1338a:	fc 01       	movw	r30, r24
   1338c:	80 81       	ld	r24, Z
   1338e:	88 23       	and	r24, r24
   13390:	0c f0       	brlt	.+2      	; 0x13394 <main+0x74>
   13392:	88 c1       	rjmp	.+784    	; 0x136a4 <main+0x384>
		{	
			if(switch_pressed==1)//after press
   13394:	8d 81       	ldd	r24, Y+5	; 0x05
   13396:	9e 81       	ldd	r25, Y+6	; 0x06
   13398:	81 30       	cpi	r24, 0x01	; 1
   1339a:	91 05       	cpc	r25, r1
   1339c:	09 f0       	breq	.+2      	; 0x133a0 <main+0x80>
   1339e:	96 c1       	rjmp	.+812    	; 0x136cc <main+0x3ac>
			{
				if(!mapped) // To generate path only once during the lifetime of the run.
   133a0:	8f 81       	ldd	r24, Y+7	; 0x07
   133a2:	98 85       	ldd	r25, Y+8	; 0x08
   133a4:	00 97       	sbiw	r24, 0x00	; 0
   133a6:	09 f0       	breq	.+2      	; 0x133aa <main+0x8a>
   133a8:	dc c0       	rjmp	.+440    	; 0x13562 <main+0x242>
				{	
					mapped=1;
   133aa:	81 e0       	ldi	r24, 0x01	; 1
   133ac:	90 e0       	ldi	r25, 0x00	; 0
   133ae:	98 87       	std	Y+8, r25	; 0x08
   133b0:	8f 83       	std	Y+7, r24	; 0x07
					node=0;
   133b2:	10 92 50 03 	sts	0x0350, r1
   133b6:	10 92 4f 03 	sts	0x034F, r1
					// Calling mapping functions to convert locations from the Serial data to node numbers for the Dijkstra Algorithm 
					node_map(ani,0,&lena);
   133ba:	8a e2       	ldi	r24, 0x2A	; 42
   133bc:	94 e0       	ldi	r25, 0x04	; 4
   133be:	9e 01       	movw	r18, r28
   133c0:	2d 5c       	subi	r18, 0xCD	; 205
   133c2:	3f 4f       	sbci	r19, 0xFF	; 255
   133c4:	60 e0       	ldi	r22, 0x00	; 0
   133c6:	70 e0       	ldi	r23, 0x00	; 0
   133c8:	a9 01       	movw	r20, r18
   133ca:	0e 94 da 96 	call	0x12db4	; 0x12db4 <node_map>
					node_map(hab,1,&lenb);
   133ce:	81 e7       	ldi	r24, 0x71	; 113
   133d0:	94 e0       	ldi	r25, 0x04	; 4
   133d2:	9e 01       	movw	r18, r28
   133d4:	2b 5c       	subi	r18, 0xCB	; 203
   133d6:	3f 4f       	sbci	r19, 0xFF	; 255
   133d8:	61 e0       	ldi	r22, 0x01	; 1
   133da:	70 e0       	ldi	r23, 0x00	; 0
   133dc:	a9 01       	movw	r20, r18
   133de:	0e 94 da 96 	call	0x12db4	; 0x12db4 <node_map>
					//Setting size to iterate to generate all paths required
					size=lena;
   133e2:	8b a9       	sts	0x4b, r24
   133e4:	9c a9       	sts	0x4c, r25
   133e6:	9c 8b       	std	Y+20, r25	; 0x14
   133e8:	8b 8b       	std	Y+19, r24	; 0x13
					size=size*2-1;
   133ea:	8b 89       	ldd	r24, Y+19	; 0x13
   133ec:	9c 89       	ldd	r25, Y+20	; 0x14
   133ee:	88 0f       	add	r24, r24
   133f0:	99 1f       	adc	r25, r25
   133f2:	01 97       	sbiw	r24, 0x01	; 1
   133f4:	9c 8b       	std	Y+20, r25	; 0x14
   133f6:	8b 8b       	std	Y+19, r24	; 0x13
					//p holds temp path for each cycle
					p= dijkstra(1,aniloc[0],&lenp);
   133f8:	40 91 b0 04 	lds	r20, 0x04B0
   133fc:	50 91 b1 04 	lds	r21, 0x04B1
   13400:	9e 01       	movw	r18, r28
   13402:	29 5c       	subi	r18, 0xC9	; 201
   13404:	3f 4f       	sbci	r19, 0xFF	; 255
   13406:	81 e0       	ldi	r24, 0x01	; 1
   13408:	90 e0       	ldi	r25, 0x00	; 0
   1340a:	ba 01       	movw	r22, r20
   1340c:	a9 01       	movw	r20, r18
   1340e:	0e 94 84 95 	call	0x12b08	; 0x12b08 <dijkstra>
   13412:	9e 8b       	std	Y+22, r25	; 0x16
   13414:	8d 8b       	std	Y+21, r24	; 0x15
					strcat(master_path,p);
   13416:	83 e5       	ldi	r24, 0x53	; 83
   13418:	93 e0       	ldi	r25, 0x03	; 3
   1341a:	2d 89       	ldd	r18, Y+21	; 0x15
   1341c:	3e 89       	ldd	r19, Y+22	; 0x16
   1341e:	b9 01       	movw	r22, r18
   13420:	0e 94 56 a0 	call	0x140ac	; 0x140ac <strcat>
					//To align the bot to initial direction
					pick_assign(aniloc[0]);
   13424:	80 91 b0 04 	lds	r24, 0x04B0
   13428:	90 91 b1 04 	lds	r25, 0x04B1
   1342c:	0e 94 3b 98 	call	0x13076	; 0x13076 <pick_assign>
					//Freeing data to prevent OUT_OF_MEMORY
					free(p);
   13430:	8d 89       	ldd	r24, Y+21	; 0x15
   13432:	9e 89       	ldd	r25, Y+22	; 0x16
   13434:	0e 94 cf 9e 	call	0x13d9e	; 0x13d9e <free>
					//Generating path
					for(var=0;var<size;var++)
   13438:	1e 86       	std	Y+14, r1	; 0x0e
   1343a:	1d 86       	std	Y+13, r1	; 0x0d
   1343c:	78 c0       	rjmp	.+240    	; 0x1352e <main+0x20e>
					{
						if(var%2==0)
   1343e:	8d 85       	ldd	r24, Y+13	; 0x0d
   13440:	9e 85       	ldd	r25, Y+14	; 0x0e
   13442:	81 70       	andi	r24, 0x01	; 1
   13444:	90 70       	andi	r25, 0x00	; 0
   13446:	00 97       	sbiw	r24, 0x00	; 0
   13448:	09 f5       	brne	.+66     	; 0x1348c <main+0x16c>
						{
							present_node=aniloc[an_count];
   1344a:	89 85       	ldd	r24, Y+9	; 0x09
   1344c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1344e:	88 0f       	add	r24, r24
   13450:	99 1f       	adc	r25, r25
   13452:	80 55       	subi	r24, 0x50	; 80
   13454:	9b 4f       	sbci	r25, 0xFB	; 251
   13456:	fc 01       	movw	r30, r24
   13458:	80 81       	ld	r24, Z
   1345a:	91 81       	ldd	r25, Z+1	; 0x01
   1345c:	9a 83       	std	Y+2, r25	; 0x02
   1345e:	89 83       	std	Y+1, r24	; 0x01
							next_node=habloc[hab_count];
   13460:	8b 85       	ldd	r24, Y+11	; 0x0b
   13462:	9c 85       	ldd	r25, Y+12	; 0x0c
   13464:	88 0f       	add	r24, r24
   13466:	99 1f       	adc	r25, r25
   13468:	8b 5b       	subi	r24, 0xBB	; 187
   1346a:	9b 4f       	sbci	r25, 0xFB	; 251
   1346c:	fc 01       	movw	r30, r24
   1346e:	80 81       	ld	r24, Z
   13470:	91 81       	ldd	r25, Z+1	; 0x01
   13472:	9c 83       	std	Y+4, r25	; 0x04
   13474:	8b 83       	std	Y+3, r24	; 0x03
							an_count++;
   13476:	89 85       	ldd	r24, Y+9	; 0x09
   13478:	9a 85       	ldd	r25, Y+10	; 0x0a
   1347a:	01 96       	adiw	r24, 0x01	; 1
   1347c:	9a 87       	std	Y+10, r25	; 0x0a
   1347e:	89 87       	std	Y+9, r24	; 0x09
							hab_count++;
   13480:	8b 85       	ldd	r24, Y+11	; 0x0b
   13482:	9c 85       	ldd	r25, Y+12	; 0x0c
   13484:	01 96       	adiw	r24, 0x01	; 1
   13486:	9c 87       	std	Y+12, r25	; 0x0c
   13488:	8b 87       	std	Y+11, r24	; 0x0b
   1348a:	17 c0       	rjmp	.+46     	; 0x134ba <main+0x19a>
						}
						else
						{
							present_node=habloc[hab_count-1];
   1348c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1348e:	9c 85       	ldd	r25, Y+12	; 0x0c
   13490:	01 97       	sbiw	r24, 0x01	; 1
   13492:	88 0f       	add	r24, r24
   13494:	99 1f       	adc	r25, r25
   13496:	8b 5b       	subi	r24, 0xBB	; 187
   13498:	9b 4f       	sbci	r25, 0xFB	; 251
   1349a:	fc 01       	movw	r30, r24
   1349c:	80 81       	ld	r24, Z
   1349e:	91 81       	ldd	r25, Z+1	; 0x01
   134a0:	9a 83       	std	Y+2, r25	; 0x02
   134a2:	89 83       	std	Y+1, r24	; 0x01
							next_node=aniloc[an_count];
   134a4:	89 85       	ldd	r24, Y+9	; 0x09
   134a6:	9a 85       	ldd	r25, Y+10	; 0x0a
   134a8:	88 0f       	add	r24, r24
   134aa:	99 1f       	adc	r25, r25
   134ac:	80 55       	subi	r24, 0x50	; 80
   134ae:	9b 4f       	sbci	r25, 0xFB	; 251
   134b0:	fc 01       	movw	r30, r24
   134b2:	80 81       	ld	r24, Z
   134b4:	91 81       	ldd	r25, Z+1	; 0x01
   134b6:	9c 83       	std	Y+4, r25	; 0x04
   134b8:	8b 83       	std	Y+3, r24	; 0x03
						}
						p=dijkstra(present_node,next_node,&lenp);
   134ba:	89 81       	ldd	r24, Y+1	; 0x01
   134bc:	9a 81       	ldd	r25, Y+2	; 0x02
   134be:	4b 81       	ldd	r20, Y+3	; 0x03
   134c0:	5c 81       	ldd	r21, Y+4	; 0x04
   134c2:	9e 01       	movw	r18, r28
   134c4:	29 5c       	subi	r18, 0xC9	; 201
   134c6:	3f 4f       	sbci	r19, 0xFF	; 255
   134c8:	ba 01       	movw	r22, r20
   134ca:	a9 01       	movw	r20, r18
   134cc:	0e 94 84 95 	call	0x12b08	; 0x12b08 <dijkstra>
   134d0:	9e 8b       	std	Y+22, r25	; 0x16
   134d2:	8d 8b       	std	Y+21, r24	; 0x15
						// Appending to master_path array
						strcat(master_path,p);
   134d4:	83 e5       	ldi	r24, 0x53	; 83
   134d6:	93 e0       	ldi	r25, 0x03	; 3
   134d8:	2d 89       	ldd	r18, Y+21	; 0x15
   134da:	3e 89       	ldd	r19, Y+22	; 0x16
   134dc:	b9 01       	movw	r22, r18
   134de:	0e 94 56 a0 	call	0x140ac	; 0x140ac <strcat>
						free(p);
   134e2:	8d 89       	ldd	r24, Y+21	; 0x15
   134e4:	9e 89       	ldd	r25, Y+22	; 0x16
   134e6:	0e 94 cf 9e 	call	0x13d9e	; 0x13d9e <free>
						if(var%2==0)
   134ea:	8d 85       	ldd	r24, Y+13	; 0x0d
   134ec:	9e 85       	ldd	r25, Y+14	; 0x0e
   134ee:	81 70       	andi	r24, 0x01	; 1
   134f0:	90 70       	andi	r25, 0x00	; 0
   134f2:	00 97       	sbiw	r24, 0x00	; 0
   134f4:	99 f4       	brne	.+38     	; 0x1351c <main+0x1fc>
						strcat(master_path,"D");
   134f6:	83 e5       	ldi	r24, 0x53	; 83
   134f8:	93 e0       	ldi	r25, 0x03	; 3
   134fa:	9c 01       	movw	r18, r24
   134fc:	f9 01       	movw	r30, r18
   134fe:	01 90       	ld	r0, Z+
   13500:	00 20       	and	r0, r0
   13502:	e9 f7       	brne	.-6      	; 0x134fe <main+0x1de>
   13504:	cf 01       	movw	r24, r30
   13506:	01 97       	sbiw	r24, 0x01	; 1
   13508:	82 1b       	sub	r24, r18
   1350a:	93 0b       	sbc	r25, r19
   1350c:	8d 5a       	subi	r24, 0xAD	; 173
   1350e:	9c 4f       	sbci	r25, 0xFC	; 252
   13510:	24 e4       	ldi	r18, 0x44	; 68
   13512:	30 e0       	ldi	r19, 0x00	; 0
   13514:	fc 01       	movw	r30, r24
   13516:	31 83       	std	Z+1, r19	; 0x01
   13518:	20 83       	st	Z, r18
   1351a:	04 c0       	rjmp	.+8      	; 0x13524 <main+0x204>
						else
						{
							pick_assign(next_node);
   1351c:	8b 81       	ldd	r24, Y+3	; 0x03
   1351e:	9c 81       	ldd	r25, Y+4	; 0x04
   13520:	0e 94 3b 98 	call	0x13076	; 0x13076 <pick_assign>
					//To align the bot to initial direction
					pick_assign(aniloc[0]);
					//Freeing data to prevent OUT_OF_MEMORY
					free(p);
					//Generating path
					for(var=0;var<size;var++)
   13524:	8d 85       	ldd	r24, Y+13	; 0x0d
   13526:	9e 85       	ldd	r25, Y+14	; 0x0e
   13528:	01 96       	adiw	r24, 0x01	; 1
   1352a:	9e 87       	std	Y+14, r25	; 0x0e
   1352c:	8d 87       	std	Y+13, r24	; 0x0d
   1352e:	2d 85       	ldd	r18, Y+13	; 0x0d
   13530:	3e 85       	ldd	r19, Y+14	; 0x0e
   13532:	8b 89       	ldd	r24, Y+19	; 0x13
   13534:	9c 89       	ldd	r25, Y+20	; 0x14
   13536:	28 17       	cp	r18, r24
   13538:	39 07       	cpc	r19, r25
   1353a:	0c f4       	brge	.+2      	; 0x1353e <main+0x21e>
   1353c:	80 cf       	rjmp	.-256    	; 0x1343e <main+0x11e>
						{
							pick_assign(next_node);
						}
					}
					// appending o to indicate END of Program
					strcat(master_path,"o");
   1353e:	83 e5       	ldi	r24, 0x53	; 83
   13540:	93 e0       	ldi	r25, 0x03	; 3
   13542:	9c 01       	movw	r18, r24
   13544:	f9 01       	movw	r30, r18
   13546:	01 90       	ld	r0, Z+
   13548:	00 20       	and	r0, r0
   1354a:	e9 f7       	brne	.-6      	; 0x13546 <main+0x226>
   1354c:	cf 01       	movw	r24, r30
   1354e:	01 97       	sbiw	r24, 0x01	; 1
   13550:	82 1b       	sub	r24, r18
   13552:	93 0b       	sbc	r25, r19
   13554:	8d 5a       	subi	r24, 0xAD	; 173
   13556:	9c 4f       	sbci	r25, 0xFC	; 252
   13558:	2f e6       	ldi	r18, 0x6F	; 111
   1355a:	30 e0       	ldi	r19, 0x00	; 0
   1355c:	fc 01       	movw	r30, r24
   1355e:	31 83       	std	Z+1, r19	; 0x01
   13560:	20 83       	st	Z, r18
				}//end of mapping
				
				travel_path(master_path[0]);
   13562:	80 91 53 03 	lds	r24, 0x0353
   13566:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <travel_path>
				// To Initialize Timer to read Line sensing ADC sensors at equal intervals
				TIMSK3=1;
   1356a:	81 e7       	ldi	r24, 0x71	; 113
   1356c:	90 e0       	ldi	r25, 0x00	; 0
   1356e:	21 e0       	ldi	r18, 0x01	; 1
   13570:	fc 01       	movw	r30, r24
   13572:	20 83       	st	Z, r18
				while(!path_fin)// Checking if END has arrived
   13574:	89 c0       	rjmp	.+274    	; 0x13688 <main+0x368>
				{
					if(!halt)// If bot is not halted to travel
   13576:	80 91 51 03 	lds	r24, 0x0351
   1357a:	90 91 52 03 	lds	r25, 0x0352
   1357e:	00 97       	sbiw	r24, 0x00	; 0
   13580:	09 f0       	breq	.+2      	; 0x13584 <main+0x264>
   13582:	82 c0       	rjmp	.+260    	; 0x13688 <main+0x368>
					{
						line_follow();// This calls line conditions which sets the line following motion of the bot and calls travel path during encountering a node.
   13584:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <line_follow>
   13588:	80 e0       	ldi	r24, 0x00	; 0
   1358a:	90 e0       	ldi	r25, 0x00	; 0
   1358c:	a8 e4       	ldi	r26, 0x48	; 72
   1358e:	b2 e4       	ldi	r27, 0x42	; 66
   13590:	8f 8b       	std	Y+23, r24	; 0x17
   13592:	98 8f       	std	Y+24, r25	; 0x18
   13594:	a9 8f       	std	Y+25, r26	; 0x19
   13596:	ba 8f       	std	Y+26, r27	; 0x1a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   13598:	6f 89       	ldd	r22, Y+23	; 0x17
   1359a:	78 8d       	ldd	r23, Y+24	; 0x18
   1359c:	89 8d       	ldd	r24, Y+25	; 0x19
   1359e:	9a 8d       	ldd	r25, Y+26	; 0x1a
   135a0:	26 e6       	ldi	r18, 0x66	; 102
   135a2:	36 e6       	ldi	r19, 0x66	; 102
   135a4:	46 e6       	ldi	r20, 0x66	; 102
   135a6:	55 e4       	ldi	r21, 0x45	; 69
   135a8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   135ac:	dc 01       	movw	r26, r24
   135ae:	cb 01       	movw	r24, r22
   135b0:	8b 8f       	std	Y+27, r24	; 0x1b
   135b2:	9c 8f       	std	Y+28, r25	; 0x1c
   135b4:	ad 8f       	std	Y+29, r26	; 0x1d
   135b6:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
   135b8:	11 e0       	ldi	r17, 0x01	; 1
   135ba:	6b 8d       	ldd	r22, Y+27	; 0x1b
   135bc:	7c 8d       	ldd	r23, Y+28	; 0x1c
   135be:	8d 8d       	ldd	r24, Y+29	; 0x1d
   135c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
   135c2:	20 e0       	ldi	r18, 0x00	; 0
   135c4:	30 e0       	ldi	r19, 0x00	; 0
   135c6:	40 e8       	ldi	r20, 0x80	; 128
   135c8:	5f e3       	ldi	r21, 0x3F	; 63
   135ca:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   135ce:	88 23       	and	r24, r24
   135d0:	0c f0       	brlt	.+2      	; 0x135d4 <main+0x2b4>
   135d2:	10 e0       	ldi	r17, 0x00	; 0
   135d4:	11 23       	and	r17, r17
   135d6:	29 f0       	breq	.+10     	; 0x135e2 <main+0x2c2>
		__ticks = 1;
   135d8:	81 e0       	ldi	r24, 0x01	; 1
   135da:	90 e0       	ldi	r25, 0x00	; 0
   135dc:	98 a3       	lds	r25, 0x58
   135de:	8f 8f       	std	Y+31, r24	; 0x1f
   135e0:	46 c0       	rjmp	.+140    	; 0x1366e <main+0x34e>
	else if (__tmp > 65535)
   135e2:	11 e0       	ldi	r17, 0x01	; 1
   135e4:	6b 8d       	ldd	r22, Y+27	; 0x1b
   135e6:	7c 8d       	ldd	r23, Y+28	; 0x1c
   135e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
   135ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
   135ec:	20 e0       	ldi	r18, 0x00	; 0
   135ee:	3f ef       	ldi	r19, 0xFF	; 255
   135f0:	4f e7       	ldi	r20, 0x7F	; 127
   135f2:	57 e4       	ldi	r21, 0x47	; 71
   135f4:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   135f8:	18 16       	cp	r1, r24
   135fa:	0c f0       	brlt	.+2      	; 0x135fe <main+0x2de>
   135fc:	10 e0       	ldi	r17, 0x00	; 0
   135fe:	11 23       	and	r17, r17
   13600:	61 f1       	breq	.+88     	; 0x1365a <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   13602:	6f 89       	ldd	r22, Y+23	; 0x17
   13604:	78 8d       	ldd	r23, Y+24	; 0x18
   13606:	89 8d       	ldd	r24, Y+25	; 0x19
   13608:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1360a:	20 e0       	ldi	r18, 0x00	; 0
   1360c:	30 e0       	ldi	r19, 0x00	; 0
   1360e:	40 e2       	ldi	r20, 0x20	; 32
   13610:	51 e4       	ldi	r21, 0x41	; 65
   13612:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   13616:	dc 01       	movw	r26, r24
   13618:	cb 01       	movw	r24, r22
   1361a:	bc 01       	movw	r22, r24
   1361c:	cd 01       	movw	r24, r26
   1361e:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   13622:	dc 01       	movw	r26, r24
   13624:	cb 01       	movw	r24, r22
   13626:	98 a3       	lds	r25, 0x58
   13628:	8f 8f       	std	Y+31, r24	; 0x1f
   1362a:	12 c0       	rjmp	.+36     	; 0x13650 <main+0x330>
   1362c:	80 e7       	ldi	r24, 0x70	; 112
   1362e:	91 e0       	ldi	r25, 0x01	; 1
   13630:	9a a3       	lds	r25, 0x5a
   13632:	89 a3       	lds	r24, 0x59
   13634:	89 a1       	lds	r24, 0x49
   13636:	9a a1       	lds	r25, 0x4a
   13638:	8c 01       	movw	r16, r24
   1363a:	c8 01       	movw	r24, r16
   1363c:	01 97       	sbiw	r24, 0x01	; 1
   1363e:	f1 f7       	brne	.-4      	; 0x1363c <main+0x31c>
   13640:	8c 01       	movw	r16, r24
   13642:	1a a3       	lds	r17, 0x5a
   13644:	09 a3       	lds	r16, 0x59
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   13646:	8f 8d       	ldd	r24, Y+31	; 0x1f
   13648:	98 a1       	lds	r25, 0x48
   1364a:	01 97       	sbiw	r24, 0x01	; 1
   1364c:	98 a3       	lds	r25, 0x58
   1364e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   13650:	8f 8d       	ldd	r24, Y+31	; 0x1f
   13652:	98 a1       	lds	r25, 0x48
   13654:	00 97       	sbiw	r24, 0x00	; 0
   13656:	51 f7       	brne	.-44     	; 0x1362c <main+0x30c>
   13658:	17 c0       	rjmp	.+46     	; 0x13688 <main+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   1365a:	6b 8d       	ldd	r22, Y+27	; 0x1b
   1365c:	7c 8d       	ldd	r23, Y+28	; 0x1c
   1365e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   13660:	9e 8d       	ldd	r25, Y+30	; 0x1e
   13662:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   13666:	dc 01       	movw	r26, r24
   13668:	cb 01       	movw	r24, r22
   1366a:	98 a3       	lds	r25, 0x58
   1366c:	8f 8f       	std	Y+31, r24	; 0x1f
   1366e:	8f 8d       	ldd	r24, Y+31	; 0x1f
   13670:	98 a1       	lds	r25, 0x48
   13672:	9c a3       	lds	r25, 0x5c
   13674:	8b a3       	lds	r24, 0x5b
   13676:	8b a1       	lds	r24, 0x4b
   13678:	9c a1       	lds	r25, 0x4c
   1367a:	8c 01       	movw	r16, r24
   1367c:	f8 01       	movw	r30, r16
   1367e:	31 97       	sbiw	r30, 0x01	; 1
   13680:	f1 f7       	brne	.-4      	; 0x1367e <main+0x35e>
   13682:	8f 01       	movw	r16, r30
   13684:	1c a3       	lds	r17, 0x5c
   13686:	0b a3       	lds	r16, 0x5b
				}//end of mapping
				
				travel_path(master_path[0]);
				// To Initialize Timer to read Line sensing ADC sensors at equal intervals
				TIMSK3=1;
				while(!path_fin)// Checking if END has arrived
   13688:	80 91 1b 04 	lds	r24, 0x041B
   1368c:	90 91 1c 04 	lds	r25, 0x041C
   13690:	00 97       	sbiw	r24, 0x00	; 0
   13692:	09 f4       	brne	.+2      	; 0x13696 <main+0x376>
   13694:	70 cf       	rjmp	.-288    	; 0x13576 <main+0x256>
					{
						line_follow();// This calls line conditions which sets the line following motion of the bot and calls travel path during encountering a node.
						_delay_ms(50);
					}
				}
			stop();
   13696:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <stop>
			complete=1;
   1369a:	81 e0       	ldi	r24, 0x01	; 1
   1369c:	90 e0       	ldi	r25, 0x00	; 0
   1369e:	98 8b       	std	Y+16, r25	; 0x10
   136a0:	8f 87       	std	Y+15, r24	; 0x0f
   136a2:	14 c0       	rjmp	.+40     	; 0x136cc <main+0x3ac>
			}
		}							  	
		else//BOOT switch is pressed
		{
			lcd_cursor(1,1);
   136a4:	81 e0       	ldi	r24, 0x01	; 1
   136a6:	61 e0       	ldi	r22, 0x01	; 1
   136a8:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(ani);
   136ac:	8a e2       	ldi	r24, 0x2A	; 42
   136ae:	94 e0       	ldi	r25, 0x04	; 4
   136b0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			lcd_cursor(2,1);
   136b4:	82 e0       	ldi	r24, 0x02	; 2
   136b6:	61 e0       	ldi	r22, 0x01	; 1
   136b8:	0e 94 84 0a 	call	0x1508	; 0x1508 <lcd_cursor>
			lcd_string(hab);
   136bc:	81 e7       	ldi	r24, 0x71	; 113
   136be:	94 e0       	ldi	r25, 0x04	; 4
   136c0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <lcd_string>
			switch_pressed=1;
   136c4:	81 e0       	ldi	r24, 0x01	; 1
   136c6:	90 e0       	ldi	r25, 0x00	; 0
   136c8:	9e 83       	std	Y+6, r25	; 0x06
   136ca:	8d 83       	std	Y+5, r24	; 0x05
	char *p;
	path_fin=0;
	halt=0;
	// Setting Servos to initial positions
	defaulty();
	while(!complete)// Checking for complete flag
   136cc:	8f 85       	ldd	r24, Y+15	; 0x0f
   136ce:	98 89       	ldd	r25, Y+16	; 0x10
   136d0:	00 97       	sbiw	r24, 0x00	; 0
   136d2:	09 f4       	brne	.+2      	; 0x136d6 <main+0x3b6>
   136d4:	58 ce       	rjmp	.-848    	; 0x13386 <main+0x66>
			lcd_cursor(2,1);
			lcd_string(hab);
			switch_pressed=1;
		}
	}
	buzzer_on();
   136d6:	0e 94 79 8d 	call	0x11af2	; 0x11af2 <buzzer_on>
   136da:	80 e0       	ldi	r24, 0x00	; 0
   136dc:	90 e4       	ldi	r25, 0x40	; 64
   136de:	ac e9       	ldi	r26, 0x9C	; 156
   136e0:	b5 e4       	ldi	r27, 0x45	; 69
   136e2:	8d a3       	lds	r24, 0x5d
   136e4:	9e a3       	lds	r25, 0x5e
   136e6:	af a3       	lds	r26, 0x5f
   136e8:	b8 a7       	lds	r27, 0x78
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
   136ea:	6d a1       	lds	r22, 0x4d
   136ec:	7e a1       	lds	r23, 0x4e
   136ee:	8f a1       	lds	r24, 0x4f
   136f0:	98 a5       	lds	r25, 0x68
   136f2:	26 e6       	ldi	r18, 0x66	; 102
   136f4:	36 e6       	ldi	r19, 0x66	; 102
   136f6:	46 e6       	ldi	r20, 0x66	; 102
   136f8:	55 e4       	ldi	r21, 0x45	; 69
   136fa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   136fe:	dc 01       	movw	r26, r24
   13700:	cb 01       	movw	r24, r22
   13702:	89 a7       	lds	r24, 0x79
   13704:	9a a7       	lds	r25, 0x7a
   13706:	ab a7       	lds	r26, 0x7b
   13708:	bc a7       	lds	r27, 0x7c
	if (__tmp < 1.0)
   1370a:	11 e0       	ldi	r17, 0x01	; 1
   1370c:	69 a5       	lds	r22, 0x69
   1370e:	7a a5       	lds	r23, 0x6a
   13710:	8b a5       	lds	r24, 0x6b
   13712:	9c a5       	lds	r25, 0x6c
   13714:	20 e0       	ldi	r18, 0x00	; 0
   13716:	30 e0       	ldi	r19, 0x00	; 0
   13718:	40 e8       	ldi	r20, 0x80	; 128
   1371a:	5f e3       	ldi	r21, 0x3F	; 63
   1371c:	0e 94 61 9c 	call	0x138c2	; 0x138c2 <__cmpsf2>
   13720:	88 23       	and	r24, r24
   13722:	0c f0       	brlt	.+2      	; 0x13726 <main+0x406>
   13724:	10 e0       	ldi	r17, 0x00	; 0
   13726:	11 23       	and	r17, r17
   13728:	29 f0       	breq	.+10     	; 0x13734 <main+0x414>
		__ticks = 1;
   1372a:	81 e0       	ldi	r24, 0x01	; 1
   1372c:	90 e0       	ldi	r25, 0x00	; 0
   1372e:	9e a7       	lds	r25, 0x7e
   13730:	8d a7       	lds	r24, 0x7d
   13732:	46 c0       	rjmp	.+140    	; 0x137c0 <main+0x4a0>
	else if (__tmp > 65535)
   13734:	11 e0       	ldi	r17, 0x01	; 1
   13736:	69 a5       	lds	r22, 0x69
   13738:	7a a5       	lds	r23, 0x6a
   1373a:	8b a5       	lds	r24, 0x6b
   1373c:	9c a5       	lds	r25, 0x6c
   1373e:	20 e0       	ldi	r18, 0x00	; 0
   13740:	3f ef       	ldi	r19, 0xFF	; 255
   13742:	4f e7       	ldi	r20, 0x7F	; 127
   13744:	57 e4       	ldi	r21, 0x47	; 71
   13746:	0e 94 ab 9d 	call	0x13b56	; 0x13b56 <__gesf2>
   1374a:	18 16       	cp	r1, r24
   1374c:	0c f0       	brlt	.+2      	; 0x13750 <main+0x430>
   1374e:	10 e0       	ldi	r17, 0x00	; 0
   13750:	11 23       	and	r17, r17
   13752:	61 f1       	breq	.+88     	; 0x137ac <main+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
   13754:	6d a1       	lds	r22, 0x4d
   13756:	7e a1       	lds	r23, 0x4e
   13758:	8f a1       	lds	r24, 0x4f
   1375a:	98 a5       	lds	r25, 0x68
   1375c:	20 e0       	ldi	r18, 0x00	; 0
   1375e:	30 e0       	ldi	r19, 0x00	; 0
   13760:	40 e2       	ldi	r20, 0x20	; 32
   13762:	51 e4       	ldi	r21, 0x41	; 65
   13764:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <__mulsf3>
   13768:	dc 01       	movw	r26, r24
   1376a:	cb 01       	movw	r24, r22
   1376c:	bc 01       	movw	r22, r24
   1376e:	cd 01       	movw	r24, r26
   13770:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   13774:	dc 01       	movw	r26, r24
   13776:	cb 01       	movw	r24, r22
   13778:	9e a7       	lds	r25, 0x7e
   1377a:	8d a7       	lds	r24, 0x7d
   1377c:	12 c0       	rjmp	.+36     	; 0x137a2 <main+0x482>
   1377e:	80 e7       	ldi	r24, 0x70	; 112
   13780:	91 e0       	ldi	r25, 0x01	; 1
   13782:	98 ab       	sts	0x58, r25
   13784:	8f a7       	lds	r24, 0x7f
   13786:	8f a5       	lds	r24, 0x6f
   13788:	98 a9       	sts	0x48, r25
   1378a:	8c 01       	movw	r16, r24
   1378c:	c8 01       	movw	r24, r16
   1378e:	01 97       	sbiw	r24, 0x01	; 1
   13790:	f1 f7       	brne	.-4      	; 0x1378e <main+0x46e>
   13792:	8c 01       	movw	r16, r24
   13794:	18 ab       	sts	0x58, r17
   13796:	0f a7       	lds	r16, 0x7f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   13798:	8d a5       	lds	r24, 0x6d
   1379a:	9e a5       	lds	r25, 0x6e
   1379c:	01 97       	sbiw	r24, 0x01	; 1
   1379e:	9e a7       	lds	r25, 0x7e
   137a0:	8d a7       	lds	r24, 0x7d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   137a2:	8d a5       	lds	r24, 0x6d
   137a4:	9e a5       	lds	r25, 0x6e
   137a6:	00 97       	sbiw	r24, 0x00	; 0
   137a8:	51 f7       	brne	.-44     	; 0x1377e <main+0x45e>
   137aa:	17 c0       	rjmp	.+46     	; 0x137da <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
   137ac:	69 a5       	lds	r22, 0x69
   137ae:	7a a5       	lds	r23, 0x6a
   137b0:	8b a5       	lds	r24, 0x6b
   137b2:	9c a5       	lds	r25, 0x6c
   137b4:	0e 94 cd 9c 	call	0x1399a	; 0x1399a <__fixunssfsi>
   137b8:	dc 01       	movw	r26, r24
   137ba:	cb 01       	movw	r24, r22
   137bc:	9e a7       	lds	r25, 0x7e
   137be:	8d a7       	lds	r24, 0x7d
   137c0:	8d a5       	lds	r24, 0x6d
   137c2:	9e a5       	lds	r25, 0x6e
   137c4:	9a ab       	sts	0x5a, r25
   137c6:	89 ab       	sts	0x59, r24
   137c8:	89 a9       	sts	0x49, r24
   137ca:	9a a9       	sts	0x4a, r25
   137cc:	8c 01       	movw	r16, r24
   137ce:	f8 01       	movw	r30, r16
   137d0:	31 97       	sbiw	r30, 0x01	; 1
   137d2:	f1 f7       	brne	.-4      	; 0x137d0 <main+0x4b0>
   137d4:	8f 01       	movw	r16, r30
   137d6:	1a ab       	sts	0x5a, r17
   137d8:	09 ab       	sts	0x59, r16
	_delay_ms(5000);
	buzzer_off();
   137da:	0e 94 90 8d 	call	0x11b20	; 0x11b20 <buzzer_off>
   137de:	80 e0       	ldi	r24, 0x00	; 0
   137e0:	90 e0       	ldi	r25, 0x00	; 0
   137e2:	e8 96       	adiw	r28, 0x38	; 56
   137e4:	0f b6       	in	r0, 0x3f	; 63
   137e6:	f8 94       	cli
   137e8:	de bf       	out	0x3e, r29	; 62
   137ea:	0f be       	out	0x3f, r0	; 63
   137ec:	cd bf       	out	0x3d, r28	; 61
   137ee:	df 91       	pop	r29
   137f0:	cf 91       	pop	r28
   137f2:	1f 91       	pop	r17
   137f4:	0f 91       	pop	r16
   137f6:	08 95       	ret

000137f8 <__subsf3>:
   137f8:	50 58       	subi	r21, 0x80	; 128

000137fa <__addsf3>:
   137fa:	bb 27       	eor	r27, r27
   137fc:	aa 27       	eor	r26, r26
   137fe:	0e d0       	rcall	.+28     	; 0x1381c <__addsf3x>
   13800:	70 c1       	rjmp	.+736    	; 0x13ae2 <__fp_round>
   13802:	61 d1       	rcall	.+706    	; 0x13ac6 <__fp_pscA>
   13804:	30 f0       	brcs	.+12     	; 0x13812 <__addsf3+0x18>
   13806:	66 d1       	rcall	.+716    	; 0x13ad4 <__fp_pscB>
   13808:	20 f0       	brcs	.+8      	; 0x13812 <__addsf3+0x18>
   1380a:	31 f4       	brne	.+12     	; 0x13818 <__addsf3+0x1e>
   1380c:	9f 3f       	cpi	r25, 0xFF	; 255
   1380e:	11 f4       	brne	.+4      	; 0x13814 <__addsf3+0x1a>
   13810:	1e f4       	brtc	.+6      	; 0x13818 <__addsf3+0x1e>
   13812:	56 c1       	rjmp	.+684    	; 0x13ac0 <__fp_nan>
   13814:	0e f4       	brtc	.+2      	; 0x13818 <__addsf3+0x1e>
   13816:	e0 95       	com	r30
   13818:	e7 fb       	bst	r30, 7
   1381a:	4c c1       	rjmp	.+664    	; 0x13ab4 <__fp_inf>

0001381c <__addsf3x>:
   1381c:	e9 2f       	mov	r30, r25
   1381e:	72 d1       	rcall	.+740    	; 0x13b04 <__fp_split3>
   13820:	80 f3       	brcs	.-32     	; 0x13802 <__addsf3+0x8>
   13822:	ba 17       	cp	r27, r26
   13824:	62 07       	cpc	r22, r18
   13826:	73 07       	cpc	r23, r19
   13828:	84 07       	cpc	r24, r20
   1382a:	95 07       	cpc	r25, r21
   1382c:	18 f0       	brcs	.+6      	; 0x13834 <__addsf3x+0x18>
   1382e:	71 f4       	brne	.+28     	; 0x1384c <__addsf3x+0x30>
   13830:	9e f5       	brtc	.+102    	; 0x13898 <__addsf3x+0x7c>
   13832:	8a c1       	rjmp	.+788    	; 0x13b48 <__fp_zero>
   13834:	0e f4       	brtc	.+2      	; 0x13838 <__addsf3x+0x1c>
   13836:	e0 95       	com	r30
   13838:	0b 2e       	mov	r0, r27
   1383a:	ba 2f       	mov	r27, r26
   1383c:	a0 2d       	mov	r26, r0
   1383e:	0b 01       	movw	r0, r22
   13840:	b9 01       	movw	r22, r18
   13842:	90 01       	movw	r18, r0
   13844:	0c 01       	movw	r0, r24
   13846:	ca 01       	movw	r24, r20
   13848:	a0 01       	movw	r20, r0
   1384a:	11 24       	eor	r1, r1
   1384c:	ff 27       	eor	r31, r31
   1384e:	59 1b       	sub	r21, r25
   13850:	99 f0       	breq	.+38     	; 0x13878 <__addsf3x+0x5c>
   13852:	59 3f       	cpi	r21, 0xF9	; 249
   13854:	50 f4       	brcc	.+20     	; 0x1386a <__addsf3x+0x4e>
   13856:	50 3e       	cpi	r21, 0xE0	; 224
   13858:	68 f1       	brcs	.+90     	; 0x138b4 <__addsf3x+0x98>
   1385a:	1a 16       	cp	r1, r26
   1385c:	f0 40       	sbci	r31, 0x00	; 0
   1385e:	a2 2f       	mov	r26, r18
   13860:	23 2f       	mov	r18, r19
   13862:	34 2f       	mov	r19, r20
   13864:	44 27       	eor	r20, r20
   13866:	58 5f       	subi	r21, 0xF8	; 248
   13868:	f3 cf       	rjmp	.-26     	; 0x13850 <__addsf3x+0x34>
   1386a:	46 95       	lsr	r20
   1386c:	37 95       	ror	r19
   1386e:	27 95       	ror	r18
   13870:	a7 95       	ror	r26
   13872:	f0 40       	sbci	r31, 0x00	; 0
   13874:	53 95       	inc	r21
   13876:	c9 f7       	brne	.-14     	; 0x1386a <__addsf3x+0x4e>
   13878:	7e f4       	brtc	.+30     	; 0x13898 <__addsf3x+0x7c>
   1387a:	1f 16       	cp	r1, r31
   1387c:	ba 0b       	sbc	r27, r26
   1387e:	62 0b       	sbc	r22, r18
   13880:	73 0b       	sbc	r23, r19
   13882:	84 0b       	sbc	r24, r20
   13884:	ba f0       	brmi	.+46     	; 0x138b4 <__addsf3x+0x98>
   13886:	91 50       	subi	r25, 0x01	; 1
   13888:	a1 f0       	breq	.+40     	; 0x138b2 <__addsf3x+0x96>
   1388a:	ff 0f       	add	r31, r31
   1388c:	bb 1f       	adc	r27, r27
   1388e:	66 1f       	adc	r22, r22
   13890:	77 1f       	adc	r23, r23
   13892:	88 1f       	adc	r24, r24
   13894:	c2 f7       	brpl	.-16     	; 0x13886 <__addsf3x+0x6a>
   13896:	0e c0       	rjmp	.+28     	; 0x138b4 <__addsf3x+0x98>
   13898:	ba 0f       	add	r27, r26
   1389a:	62 1f       	adc	r22, r18
   1389c:	73 1f       	adc	r23, r19
   1389e:	84 1f       	adc	r24, r20
   138a0:	48 f4       	brcc	.+18     	; 0x138b4 <__addsf3x+0x98>
   138a2:	87 95       	ror	r24
   138a4:	77 95       	ror	r23
   138a6:	67 95       	ror	r22
   138a8:	b7 95       	ror	r27
   138aa:	f7 95       	ror	r31
   138ac:	9e 3f       	cpi	r25, 0xFE	; 254
   138ae:	08 f0       	brcs	.+2      	; 0x138b2 <__addsf3x+0x96>
   138b0:	b3 cf       	rjmp	.-154    	; 0x13818 <__addsf3+0x1e>
   138b2:	93 95       	inc	r25
   138b4:	88 0f       	add	r24, r24
   138b6:	08 f0       	brcs	.+2      	; 0x138ba <__addsf3x+0x9e>
   138b8:	99 27       	eor	r25, r25
   138ba:	ee 0f       	add	r30, r30
   138bc:	97 95       	ror	r25
   138be:	87 95       	ror	r24
   138c0:	08 95       	ret

000138c2 <__cmpsf2>:
   138c2:	d4 d0       	rcall	.+424    	; 0x13a6c <__fp_cmp>
   138c4:	08 f4       	brcc	.+2      	; 0x138c8 <__cmpsf2+0x6>
   138c6:	81 e0       	ldi	r24, 0x01	; 1
   138c8:	08 95       	ret

000138ca <__divsf3>:
   138ca:	0c d0       	rcall	.+24     	; 0x138e4 <__divsf3x>
   138cc:	0a c1       	rjmp	.+532    	; 0x13ae2 <__fp_round>
   138ce:	02 d1       	rcall	.+516    	; 0x13ad4 <__fp_pscB>
   138d0:	40 f0       	brcs	.+16     	; 0x138e2 <__divsf3+0x18>
   138d2:	f9 d0       	rcall	.+498    	; 0x13ac6 <__fp_pscA>
   138d4:	30 f0       	brcs	.+12     	; 0x138e2 <__divsf3+0x18>
   138d6:	21 f4       	brne	.+8      	; 0x138e0 <__divsf3+0x16>
   138d8:	5f 3f       	cpi	r21, 0xFF	; 255
   138da:	19 f0       	breq	.+6      	; 0x138e2 <__divsf3+0x18>
   138dc:	eb c0       	rjmp	.+470    	; 0x13ab4 <__fp_inf>
   138de:	51 11       	cpse	r21, r1
   138e0:	34 c1       	rjmp	.+616    	; 0x13b4a <__fp_szero>
   138e2:	ee c0       	rjmp	.+476    	; 0x13ac0 <__fp_nan>

000138e4 <__divsf3x>:
   138e4:	0f d1       	rcall	.+542    	; 0x13b04 <__fp_split3>
   138e6:	98 f3       	brcs	.-26     	; 0x138ce <__divsf3+0x4>

000138e8 <__divsf3_pse>:
   138e8:	99 23       	and	r25, r25
   138ea:	c9 f3       	breq	.-14     	; 0x138de <__divsf3+0x14>
   138ec:	55 23       	and	r21, r21
   138ee:	b1 f3       	breq	.-20     	; 0x138dc <__divsf3+0x12>
   138f0:	95 1b       	sub	r25, r21
   138f2:	55 0b       	sbc	r21, r21
   138f4:	bb 27       	eor	r27, r27
   138f6:	aa 27       	eor	r26, r26
   138f8:	62 17       	cp	r22, r18
   138fa:	73 07       	cpc	r23, r19
   138fc:	84 07       	cpc	r24, r20
   138fe:	38 f0       	brcs	.+14     	; 0x1390e <__divsf3_pse+0x26>
   13900:	9f 5f       	subi	r25, 0xFF	; 255
   13902:	5f 4f       	sbci	r21, 0xFF	; 255
   13904:	22 0f       	add	r18, r18
   13906:	33 1f       	adc	r19, r19
   13908:	44 1f       	adc	r20, r20
   1390a:	aa 1f       	adc	r26, r26
   1390c:	a9 f3       	breq	.-22     	; 0x138f8 <__divsf3_pse+0x10>
   1390e:	33 d0       	rcall	.+102    	; 0x13976 <__divsf3_pse+0x8e>
   13910:	0e 2e       	mov	r0, r30
   13912:	3a f0       	brmi	.+14     	; 0x13922 <__divsf3_pse+0x3a>
   13914:	e0 e8       	ldi	r30, 0x80	; 128
   13916:	30 d0       	rcall	.+96     	; 0x13978 <__divsf3_pse+0x90>
   13918:	91 50       	subi	r25, 0x01	; 1
   1391a:	50 40       	sbci	r21, 0x00	; 0
   1391c:	e6 95       	lsr	r30
   1391e:	00 1c       	adc	r0, r0
   13920:	ca f7       	brpl	.-14     	; 0x13914 <__divsf3_pse+0x2c>
   13922:	29 d0       	rcall	.+82     	; 0x13976 <__divsf3_pse+0x8e>
   13924:	fe 2f       	mov	r31, r30
   13926:	27 d0       	rcall	.+78     	; 0x13976 <__divsf3_pse+0x8e>
   13928:	66 0f       	add	r22, r22
   1392a:	77 1f       	adc	r23, r23
   1392c:	88 1f       	adc	r24, r24
   1392e:	bb 1f       	adc	r27, r27
   13930:	26 17       	cp	r18, r22
   13932:	37 07       	cpc	r19, r23
   13934:	48 07       	cpc	r20, r24
   13936:	ab 07       	cpc	r26, r27
   13938:	b0 e8       	ldi	r27, 0x80	; 128
   1393a:	09 f0       	breq	.+2      	; 0x1393e <__divsf3_pse+0x56>
   1393c:	bb 0b       	sbc	r27, r27
   1393e:	80 2d       	mov	r24, r0
   13940:	bf 01       	movw	r22, r30
   13942:	ff 27       	eor	r31, r31
   13944:	93 58       	subi	r25, 0x83	; 131
   13946:	5f 4f       	sbci	r21, 0xFF	; 255
   13948:	2a f0       	brmi	.+10     	; 0x13954 <__divsf3_pse+0x6c>
   1394a:	9e 3f       	cpi	r25, 0xFE	; 254
   1394c:	51 05       	cpc	r21, r1
   1394e:	68 f0       	brcs	.+26     	; 0x1396a <__divsf3_pse+0x82>
   13950:	b1 c0       	rjmp	.+354    	; 0x13ab4 <__fp_inf>
   13952:	fb c0       	rjmp	.+502    	; 0x13b4a <__fp_szero>
   13954:	5f 3f       	cpi	r21, 0xFF	; 255
   13956:	ec f3       	brlt	.-6      	; 0x13952 <__divsf3_pse+0x6a>
   13958:	98 3e       	cpi	r25, 0xE8	; 232
   1395a:	dc f3       	brlt	.-10     	; 0x13952 <__divsf3_pse+0x6a>
   1395c:	86 95       	lsr	r24
   1395e:	77 95       	ror	r23
   13960:	67 95       	ror	r22
   13962:	b7 95       	ror	r27
   13964:	f7 95       	ror	r31
   13966:	9f 5f       	subi	r25, 0xFF	; 255
   13968:	c9 f7       	brne	.-14     	; 0x1395c <__divsf3_pse+0x74>
   1396a:	88 0f       	add	r24, r24
   1396c:	91 1d       	adc	r25, r1
   1396e:	96 95       	lsr	r25
   13970:	87 95       	ror	r24
   13972:	97 f9       	bld	r25, 7
   13974:	08 95       	ret
   13976:	e1 e0       	ldi	r30, 0x01	; 1
   13978:	66 0f       	add	r22, r22
   1397a:	77 1f       	adc	r23, r23
   1397c:	88 1f       	adc	r24, r24
   1397e:	bb 1f       	adc	r27, r27
   13980:	62 17       	cp	r22, r18
   13982:	73 07       	cpc	r23, r19
   13984:	84 07       	cpc	r24, r20
   13986:	ba 07       	cpc	r27, r26
   13988:	20 f0       	brcs	.+8      	; 0x13992 <__divsf3_pse+0xaa>
   1398a:	62 1b       	sub	r22, r18
   1398c:	73 0b       	sbc	r23, r19
   1398e:	84 0b       	sbc	r24, r20
   13990:	ba 0b       	sbc	r27, r26
   13992:	ee 1f       	adc	r30, r30
   13994:	88 f7       	brcc	.-30     	; 0x13978 <__divsf3_pse+0x90>
   13996:	e0 95       	com	r30
   13998:	08 95       	ret

0001399a <__fixunssfsi>:
   1399a:	bc d0       	rcall	.+376    	; 0x13b14 <__fp_splitA>
   1399c:	88 f0       	brcs	.+34     	; 0x139c0 <__fixunssfsi+0x26>
   1399e:	9f 57       	subi	r25, 0x7F	; 127
   139a0:	90 f0       	brcs	.+36     	; 0x139c6 <__fixunssfsi+0x2c>
   139a2:	b9 2f       	mov	r27, r25
   139a4:	99 27       	eor	r25, r25
   139a6:	b7 51       	subi	r27, 0x17	; 23
   139a8:	a0 f0       	brcs	.+40     	; 0x139d2 <__fixunssfsi+0x38>
   139aa:	d1 f0       	breq	.+52     	; 0x139e0 <__fixunssfsi+0x46>
   139ac:	66 0f       	add	r22, r22
   139ae:	77 1f       	adc	r23, r23
   139b0:	88 1f       	adc	r24, r24
   139b2:	99 1f       	adc	r25, r25
   139b4:	1a f0       	brmi	.+6      	; 0x139bc <__fixunssfsi+0x22>
   139b6:	ba 95       	dec	r27
   139b8:	c9 f7       	brne	.-14     	; 0x139ac <__fixunssfsi+0x12>
   139ba:	12 c0       	rjmp	.+36     	; 0x139e0 <__fixunssfsi+0x46>
   139bc:	b1 30       	cpi	r27, 0x01	; 1
   139be:	81 f0       	breq	.+32     	; 0x139e0 <__fixunssfsi+0x46>
   139c0:	c3 d0       	rcall	.+390    	; 0x13b48 <__fp_zero>
   139c2:	b1 e0       	ldi	r27, 0x01	; 1
   139c4:	08 95       	ret
   139c6:	c0 c0       	rjmp	.+384    	; 0x13b48 <__fp_zero>
   139c8:	67 2f       	mov	r22, r23
   139ca:	78 2f       	mov	r23, r24
   139cc:	88 27       	eor	r24, r24
   139ce:	b8 5f       	subi	r27, 0xF8	; 248
   139d0:	39 f0       	breq	.+14     	; 0x139e0 <__fixunssfsi+0x46>
   139d2:	b9 3f       	cpi	r27, 0xF9	; 249
   139d4:	cc f3       	brlt	.-14     	; 0x139c8 <__fixunssfsi+0x2e>
   139d6:	86 95       	lsr	r24
   139d8:	77 95       	ror	r23
   139da:	67 95       	ror	r22
   139dc:	b3 95       	inc	r27
   139de:	d9 f7       	brne	.-10     	; 0x139d6 <__fixunssfsi+0x3c>
   139e0:	3e f4       	brtc	.+14     	; 0x139f0 <__fixunssfsi+0x56>
   139e2:	90 95       	com	r25
   139e4:	80 95       	com	r24
   139e6:	70 95       	com	r23
   139e8:	61 95       	neg	r22
   139ea:	7f 4f       	sbci	r23, 0xFF	; 255
   139ec:	8f 4f       	sbci	r24, 0xFF	; 255
   139ee:	9f 4f       	sbci	r25, 0xFF	; 255
   139f0:	08 95       	ret

000139f2 <__floatunsisf>:
   139f2:	e8 94       	clt
   139f4:	09 c0       	rjmp	.+18     	; 0x13a08 <__floatsisf+0x12>

000139f6 <__floatsisf>:
   139f6:	97 fb       	bst	r25, 7
   139f8:	3e f4       	brtc	.+14     	; 0x13a08 <__floatsisf+0x12>
   139fa:	90 95       	com	r25
   139fc:	80 95       	com	r24
   139fe:	70 95       	com	r23
   13a00:	61 95       	neg	r22
   13a02:	7f 4f       	sbci	r23, 0xFF	; 255
   13a04:	8f 4f       	sbci	r24, 0xFF	; 255
   13a06:	9f 4f       	sbci	r25, 0xFF	; 255
   13a08:	99 23       	and	r25, r25
   13a0a:	a9 f0       	breq	.+42     	; 0x13a36 <__floatsisf+0x40>
   13a0c:	f9 2f       	mov	r31, r25
   13a0e:	96 e9       	ldi	r25, 0x96	; 150
   13a10:	bb 27       	eor	r27, r27
   13a12:	93 95       	inc	r25
   13a14:	f6 95       	lsr	r31
   13a16:	87 95       	ror	r24
   13a18:	77 95       	ror	r23
   13a1a:	67 95       	ror	r22
   13a1c:	b7 95       	ror	r27
   13a1e:	f1 11       	cpse	r31, r1
   13a20:	f8 cf       	rjmp	.-16     	; 0x13a12 <__floatsisf+0x1c>
   13a22:	fa f4       	brpl	.+62     	; 0x13a62 <__floatsisf+0x6c>
   13a24:	bb 0f       	add	r27, r27
   13a26:	11 f4       	brne	.+4      	; 0x13a2c <__floatsisf+0x36>
   13a28:	60 ff       	sbrs	r22, 0
   13a2a:	1b c0       	rjmp	.+54     	; 0x13a62 <__floatsisf+0x6c>
   13a2c:	6f 5f       	subi	r22, 0xFF	; 255
   13a2e:	7f 4f       	sbci	r23, 0xFF	; 255
   13a30:	8f 4f       	sbci	r24, 0xFF	; 255
   13a32:	9f 4f       	sbci	r25, 0xFF	; 255
   13a34:	16 c0       	rjmp	.+44     	; 0x13a62 <__floatsisf+0x6c>
   13a36:	88 23       	and	r24, r24
   13a38:	11 f0       	breq	.+4      	; 0x13a3e <__floatsisf+0x48>
   13a3a:	96 e9       	ldi	r25, 0x96	; 150
   13a3c:	11 c0       	rjmp	.+34     	; 0x13a60 <__floatsisf+0x6a>
   13a3e:	77 23       	and	r23, r23
   13a40:	21 f0       	breq	.+8      	; 0x13a4a <__floatsisf+0x54>
   13a42:	9e e8       	ldi	r25, 0x8E	; 142
   13a44:	87 2f       	mov	r24, r23
   13a46:	76 2f       	mov	r23, r22
   13a48:	05 c0       	rjmp	.+10     	; 0x13a54 <__floatsisf+0x5e>
   13a4a:	66 23       	and	r22, r22
   13a4c:	71 f0       	breq	.+28     	; 0x13a6a <__floatsisf+0x74>
   13a4e:	96 e8       	ldi	r25, 0x86	; 134
   13a50:	86 2f       	mov	r24, r22
   13a52:	70 e0       	ldi	r23, 0x00	; 0
   13a54:	60 e0       	ldi	r22, 0x00	; 0
   13a56:	2a f0       	brmi	.+10     	; 0x13a62 <__floatsisf+0x6c>
   13a58:	9a 95       	dec	r25
   13a5a:	66 0f       	add	r22, r22
   13a5c:	77 1f       	adc	r23, r23
   13a5e:	88 1f       	adc	r24, r24
   13a60:	da f7       	brpl	.-10     	; 0x13a58 <__floatsisf+0x62>
   13a62:	88 0f       	add	r24, r24
   13a64:	96 95       	lsr	r25
   13a66:	87 95       	ror	r24
   13a68:	97 f9       	bld	r25, 7
   13a6a:	08 95       	ret

00013a6c <__fp_cmp>:
   13a6c:	99 0f       	add	r25, r25
   13a6e:	00 08       	sbc	r0, r0
   13a70:	55 0f       	add	r21, r21
   13a72:	aa 0b       	sbc	r26, r26
   13a74:	e0 e8       	ldi	r30, 0x80	; 128
   13a76:	fe ef       	ldi	r31, 0xFE	; 254
   13a78:	16 16       	cp	r1, r22
   13a7a:	17 06       	cpc	r1, r23
   13a7c:	e8 07       	cpc	r30, r24
   13a7e:	f9 07       	cpc	r31, r25
   13a80:	c0 f0       	brcs	.+48     	; 0x13ab2 <__fp_cmp+0x46>
   13a82:	12 16       	cp	r1, r18
   13a84:	13 06       	cpc	r1, r19
   13a86:	e4 07       	cpc	r30, r20
   13a88:	f5 07       	cpc	r31, r21
   13a8a:	98 f0       	brcs	.+38     	; 0x13ab2 <__fp_cmp+0x46>
   13a8c:	62 1b       	sub	r22, r18
   13a8e:	73 0b       	sbc	r23, r19
   13a90:	84 0b       	sbc	r24, r20
   13a92:	95 0b       	sbc	r25, r21
   13a94:	39 f4       	brne	.+14     	; 0x13aa4 <__fp_cmp+0x38>
   13a96:	0a 26       	eor	r0, r26
   13a98:	61 f0       	breq	.+24     	; 0x13ab2 <__fp_cmp+0x46>
   13a9a:	23 2b       	or	r18, r19
   13a9c:	24 2b       	or	r18, r20
   13a9e:	25 2b       	or	r18, r21
   13aa0:	21 f4       	brne	.+8      	; 0x13aaa <__fp_cmp+0x3e>
   13aa2:	08 95       	ret
   13aa4:	0a 26       	eor	r0, r26
   13aa6:	09 f4       	brne	.+2      	; 0x13aaa <__fp_cmp+0x3e>
   13aa8:	a1 40       	sbci	r26, 0x01	; 1
   13aaa:	a6 95       	lsr	r26
   13aac:	8f ef       	ldi	r24, 0xFF	; 255
   13aae:	81 1d       	adc	r24, r1
   13ab0:	81 1d       	adc	r24, r1
   13ab2:	08 95       	ret

00013ab4 <__fp_inf>:
   13ab4:	97 f9       	bld	r25, 7
   13ab6:	9f 67       	ori	r25, 0x7F	; 127
   13ab8:	80 e8       	ldi	r24, 0x80	; 128
   13aba:	70 e0       	ldi	r23, 0x00	; 0
   13abc:	60 e0       	ldi	r22, 0x00	; 0
   13abe:	08 95       	ret

00013ac0 <__fp_nan>:
   13ac0:	9f ef       	ldi	r25, 0xFF	; 255
   13ac2:	80 ec       	ldi	r24, 0xC0	; 192
   13ac4:	08 95       	ret

00013ac6 <__fp_pscA>:
   13ac6:	00 24       	eor	r0, r0
   13ac8:	0a 94       	dec	r0
   13aca:	16 16       	cp	r1, r22
   13acc:	17 06       	cpc	r1, r23
   13ace:	18 06       	cpc	r1, r24
   13ad0:	09 06       	cpc	r0, r25
   13ad2:	08 95       	ret

00013ad4 <__fp_pscB>:
   13ad4:	00 24       	eor	r0, r0
   13ad6:	0a 94       	dec	r0
   13ad8:	12 16       	cp	r1, r18
   13ada:	13 06       	cpc	r1, r19
   13adc:	14 06       	cpc	r1, r20
   13ade:	05 06       	cpc	r0, r21
   13ae0:	08 95       	ret

00013ae2 <__fp_round>:
   13ae2:	09 2e       	mov	r0, r25
   13ae4:	03 94       	inc	r0
   13ae6:	00 0c       	add	r0, r0
   13ae8:	11 f4       	brne	.+4      	; 0x13aee <__fp_round+0xc>
   13aea:	88 23       	and	r24, r24
   13aec:	52 f0       	brmi	.+20     	; 0x13b02 <__fp_round+0x20>
   13aee:	bb 0f       	add	r27, r27
   13af0:	40 f4       	brcc	.+16     	; 0x13b02 <__fp_round+0x20>
   13af2:	bf 2b       	or	r27, r31
   13af4:	11 f4       	brne	.+4      	; 0x13afa <__fp_round+0x18>
   13af6:	60 ff       	sbrs	r22, 0
   13af8:	04 c0       	rjmp	.+8      	; 0x13b02 <__fp_round+0x20>
   13afa:	6f 5f       	subi	r22, 0xFF	; 255
   13afc:	7f 4f       	sbci	r23, 0xFF	; 255
   13afe:	8f 4f       	sbci	r24, 0xFF	; 255
   13b00:	9f 4f       	sbci	r25, 0xFF	; 255
   13b02:	08 95       	ret

00013b04 <__fp_split3>:
   13b04:	57 fd       	sbrc	r21, 7
   13b06:	90 58       	subi	r25, 0x80	; 128
   13b08:	44 0f       	add	r20, r20
   13b0a:	55 1f       	adc	r21, r21
   13b0c:	59 f0       	breq	.+22     	; 0x13b24 <__fp_splitA+0x10>
   13b0e:	5f 3f       	cpi	r21, 0xFF	; 255
   13b10:	71 f0       	breq	.+28     	; 0x13b2e <__fp_splitA+0x1a>
   13b12:	47 95       	ror	r20

00013b14 <__fp_splitA>:
   13b14:	88 0f       	add	r24, r24
   13b16:	97 fb       	bst	r25, 7
   13b18:	99 1f       	adc	r25, r25
   13b1a:	61 f0       	breq	.+24     	; 0x13b34 <__fp_splitA+0x20>
   13b1c:	9f 3f       	cpi	r25, 0xFF	; 255
   13b1e:	79 f0       	breq	.+30     	; 0x13b3e <__fp_splitA+0x2a>
   13b20:	87 95       	ror	r24
   13b22:	08 95       	ret
   13b24:	12 16       	cp	r1, r18
   13b26:	13 06       	cpc	r1, r19
   13b28:	14 06       	cpc	r1, r20
   13b2a:	55 1f       	adc	r21, r21
   13b2c:	f2 cf       	rjmp	.-28     	; 0x13b12 <__fp_split3+0xe>
   13b2e:	46 95       	lsr	r20
   13b30:	f1 df       	rcall	.-30     	; 0x13b14 <__fp_splitA>
   13b32:	08 c0       	rjmp	.+16     	; 0x13b44 <__fp_splitA+0x30>
   13b34:	16 16       	cp	r1, r22
   13b36:	17 06       	cpc	r1, r23
   13b38:	18 06       	cpc	r1, r24
   13b3a:	99 1f       	adc	r25, r25
   13b3c:	f1 cf       	rjmp	.-30     	; 0x13b20 <__fp_splitA+0xc>
   13b3e:	86 95       	lsr	r24
   13b40:	71 05       	cpc	r23, r1
   13b42:	61 05       	cpc	r22, r1
   13b44:	08 94       	sec
   13b46:	08 95       	ret

00013b48 <__fp_zero>:
   13b48:	e8 94       	clt

00013b4a <__fp_szero>:
   13b4a:	bb 27       	eor	r27, r27
   13b4c:	66 27       	eor	r22, r22
   13b4e:	77 27       	eor	r23, r23
   13b50:	cb 01       	movw	r24, r22
   13b52:	97 f9       	bld	r25, 7
   13b54:	08 95       	ret

00013b56 <__gesf2>:
   13b56:	8a df       	rcall	.-236    	; 0x13a6c <__fp_cmp>
   13b58:	08 f4       	brcc	.+2      	; 0x13b5c <__gesf2+0x6>
   13b5a:	8f ef       	ldi	r24, 0xFF	; 255
   13b5c:	08 95       	ret

00013b5e <__mulsf3>:
   13b5e:	0b d0       	rcall	.+22     	; 0x13b76 <__mulsf3x>
   13b60:	c0 cf       	rjmp	.-128    	; 0x13ae2 <__fp_round>
   13b62:	b1 df       	rcall	.-158    	; 0x13ac6 <__fp_pscA>
   13b64:	28 f0       	brcs	.+10     	; 0x13b70 <__mulsf3+0x12>
   13b66:	b6 df       	rcall	.-148    	; 0x13ad4 <__fp_pscB>
   13b68:	18 f0       	brcs	.+6      	; 0x13b70 <__mulsf3+0x12>
   13b6a:	95 23       	and	r25, r21
   13b6c:	09 f0       	breq	.+2      	; 0x13b70 <__mulsf3+0x12>
   13b6e:	a2 cf       	rjmp	.-188    	; 0x13ab4 <__fp_inf>
   13b70:	a7 cf       	rjmp	.-178    	; 0x13ac0 <__fp_nan>
   13b72:	11 24       	eor	r1, r1
   13b74:	ea cf       	rjmp	.-44     	; 0x13b4a <__fp_szero>

00013b76 <__mulsf3x>:
   13b76:	c6 df       	rcall	.-116    	; 0x13b04 <__fp_split3>
   13b78:	a0 f3       	brcs	.-24     	; 0x13b62 <__mulsf3+0x4>

00013b7a <__mulsf3_pse>:
   13b7a:	95 9f       	mul	r25, r21
   13b7c:	d1 f3       	breq	.-12     	; 0x13b72 <__mulsf3+0x14>
   13b7e:	95 0f       	add	r25, r21
   13b80:	50 e0       	ldi	r21, 0x00	; 0
   13b82:	55 1f       	adc	r21, r21
   13b84:	62 9f       	mul	r22, r18
   13b86:	f0 01       	movw	r30, r0
   13b88:	72 9f       	mul	r23, r18
   13b8a:	bb 27       	eor	r27, r27
   13b8c:	f0 0d       	add	r31, r0
   13b8e:	b1 1d       	adc	r27, r1
   13b90:	63 9f       	mul	r22, r19
   13b92:	aa 27       	eor	r26, r26
   13b94:	f0 0d       	add	r31, r0
   13b96:	b1 1d       	adc	r27, r1
   13b98:	aa 1f       	adc	r26, r26
   13b9a:	64 9f       	mul	r22, r20
   13b9c:	66 27       	eor	r22, r22
   13b9e:	b0 0d       	add	r27, r0
   13ba0:	a1 1d       	adc	r26, r1
   13ba2:	66 1f       	adc	r22, r22
   13ba4:	82 9f       	mul	r24, r18
   13ba6:	22 27       	eor	r18, r18
   13ba8:	b0 0d       	add	r27, r0
   13baa:	a1 1d       	adc	r26, r1
   13bac:	62 1f       	adc	r22, r18
   13bae:	73 9f       	mul	r23, r19
   13bb0:	b0 0d       	add	r27, r0
   13bb2:	a1 1d       	adc	r26, r1
   13bb4:	62 1f       	adc	r22, r18
   13bb6:	83 9f       	mul	r24, r19
   13bb8:	a0 0d       	add	r26, r0
   13bba:	61 1d       	adc	r22, r1
   13bbc:	22 1f       	adc	r18, r18
   13bbe:	74 9f       	mul	r23, r20
   13bc0:	33 27       	eor	r19, r19
   13bc2:	a0 0d       	add	r26, r0
   13bc4:	61 1d       	adc	r22, r1
   13bc6:	23 1f       	adc	r18, r19
   13bc8:	84 9f       	mul	r24, r20
   13bca:	60 0d       	add	r22, r0
   13bcc:	21 1d       	adc	r18, r1
   13bce:	82 2f       	mov	r24, r18
   13bd0:	76 2f       	mov	r23, r22
   13bd2:	6a 2f       	mov	r22, r26
   13bd4:	11 24       	eor	r1, r1
   13bd6:	9f 57       	subi	r25, 0x7F	; 127
   13bd8:	50 40       	sbci	r21, 0x00	; 0
   13bda:	8a f0       	brmi	.+34     	; 0x13bfe <__mulsf3_pse+0x84>
   13bdc:	e1 f0       	breq	.+56     	; 0x13c16 <__mulsf3_pse+0x9c>
   13bde:	88 23       	and	r24, r24
   13be0:	4a f0       	brmi	.+18     	; 0x13bf4 <__mulsf3_pse+0x7a>
   13be2:	ee 0f       	add	r30, r30
   13be4:	ff 1f       	adc	r31, r31
   13be6:	bb 1f       	adc	r27, r27
   13be8:	66 1f       	adc	r22, r22
   13bea:	77 1f       	adc	r23, r23
   13bec:	88 1f       	adc	r24, r24
   13bee:	91 50       	subi	r25, 0x01	; 1
   13bf0:	50 40       	sbci	r21, 0x00	; 0
   13bf2:	a9 f7       	brne	.-22     	; 0x13bde <__mulsf3_pse+0x64>
   13bf4:	9e 3f       	cpi	r25, 0xFE	; 254
   13bf6:	51 05       	cpc	r21, r1
   13bf8:	70 f0       	brcs	.+28     	; 0x13c16 <__mulsf3_pse+0x9c>
   13bfa:	5c cf       	rjmp	.-328    	; 0x13ab4 <__fp_inf>
   13bfc:	a6 cf       	rjmp	.-180    	; 0x13b4a <__fp_szero>
   13bfe:	5f 3f       	cpi	r21, 0xFF	; 255
   13c00:	ec f3       	brlt	.-6      	; 0x13bfc <__mulsf3_pse+0x82>
   13c02:	98 3e       	cpi	r25, 0xE8	; 232
   13c04:	dc f3       	brlt	.-10     	; 0x13bfc <__mulsf3_pse+0x82>
   13c06:	86 95       	lsr	r24
   13c08:	77 95       	ror	r23
   13c0a:	67 95       	ror	r22
   13c0c:	b7 95       	ror	r27
   13c0e:	f7 95       	ror	r31
   13c10:	e7 95       	ror	r30
   13c12:	9f 5f       	subi	r25, 0xFF	; 255
   13c14:	c1 f7       	brne	.-16     	; 0x13c06 <__mulsf3_pse+0x8c>
   13c16:	fe 2b       	or	r31, r30
   13c18:	88 0f       	add	r24, r24
   13c1a:	91 1d       	adc	r25, r1
   13c1c:	96 95       	lsr	r25
   13c1e:	87 95       	ror	r24
   13c20:	97 f9       	bld	r25, 7
   13c22:	08 95       	ret

00013c24 <__udivmodhi4>:
   13c24:	aa 1b       	sub	r26, r26
   13c26:	bb 1b       	sub	r27, r27
   13c28:	51 e1       	ldi	r21, 0x11	; 17
   13c2a:	07 c0       	rjmp	.+14     	; 0x13c3a <__udivmodhi4_ep>

00013c2c <__udivmodhi4_loop>:
   13c2c:	aa 1f       	adc	r26, r26
   13c2e:	bb 1f       	adc	r27, r27
   13c30:	a6 17       	cp	r26, r22
   13c32:	b7 07       	cpc	r27, r23
   13c34:	10 f0       	brcs	.+4      	; 0x13c3a <__udivmodhi4_ep>
   13c36:	a6 1b       	sub	r26, r22
   13c38:	b7 0b       	sbc	r27, r23

00013c3a <__udivmodhi4_ep>:
   13c3a:	88 1f       	adc	r24, r24
   13c3c:	99 1f       	adc	r25, r25
   13c3e:	5a 95       	dec	r21
   13c40:	a9 f7       	brne	.-22     	; 0x13c2c <__udivmodhi4_loop>
   13c42:	80 95       	com	r24
   13c44:	90 95       	com	r25
   13c46:	bc 01       	movw	r22, r24
   13c48:	cd 01       	movw	r24, r26
   13c4a:	08 95       	ret

00013c4c <__divmodhi4>:
   13c4c:	97 fb       	bst	r25, 7
   13c4e:	09 2e       	mov	r0, r25
   13c50:	07 26       	eor	r0, r23
   13c52:	0a d0       	rcall	.+20     	; 0x13c68 <__divmodhi4_neg1>
   13c54:	77 fd       	sbrc	r23, 7
   13c56:	04 d0       	rcall	.+8      	; 0x13c60 <__divmodhi4_neg2>
   13c58:	e5 df       	rcall	.-54     	; 0x13c24 <__udivmodhi4>
   13c5a:	06 d0       	rcall	.+12     	; 0x13c68 <__divmodhi4_neg1>
   13c5c:	00 20       	and	r0, r0
   13c5e:	1a f4       	brpl	.+6      	; 0x13c66 <__divmodhi4_exit>

00013c60 <__divmodhi4_neg2>:
   13c60:	70 95       	com	r23
   13c62:	61 95       	neg	r22
   13c64:	7f 4f       	sbci	r23, 0xFF	; 255

00013c66 <__divmodhi4_exit>:
   13c66:	08 95       	ret

00013c68 <__divmodhi4_neg1>:
   13c68:	f6 f7       	brtc	.-4      	; 0x13c66 <__divmodhi4_exit>
   13c6a:	90 95       	com	r25
   13c6c:	81 95       	neg	r24
   13c6e:	9f 4f       	sbci	r25, 0xFF	; 255
   13c70:	08 95       	ret

00013c72 <malloc>:
   13c72:	cf 93       	push	r28
   13c74:	df 93       	push	r29
   13c76:	ac 01       	movw	r20, r24
   13c78:	82 30       	cpi	r24, 0x02	; 2
   13c7a:	91 05       	cpc	r25, r1
   13c7c:	10 f4       	brcc	.+4      	; 0x13c82 <malloc+0x10>
   13c7e:	42 e0       	ldi	r20, 0x02	; 2
   13c80:	50 e0       	ldi	r21, 0x00	; 0
   13c82:	e0 91 f7 04 	lds	r30, 0x04F7
   13c86:	f0 91 f8 04 	lds	r31, 0x04F8
   13c8a:	20 e0       	ldi	r18, 0x00	; 0
   13c8c:	30 e0       	ldi	r19, 0x00	; 0
   13c8e:	a0 e0       	ldi	r26, 0x00	; 0
   13c90:	b0 e0       	ldi	r27, 0x00	; 0
   13c92:	24 c0       	rjmp	.+72     	; 0x13cdc <malloc+0x6a>
   13c94:	80 81       	ld	r24, Z
   13c96:	91 81       	ldd	r25, Z+1	; 0x01
   13c98:	84 17       	cp	r24, r20
   13c9a:	95 07       	cpc	r25, r21
   13c9c:	d0 f0       	brcs	.+52     	; 0x13cd2 <malloc+0x60>
   13c9e:	84 17       	cp	r24, r20
   13ca0:	95 07       	cpc	r25, r21
   13ca2:	71 f4       	brne	.+28     	; 0x13cc0 <malloc+0x4e>
   13ca4:	82 81       	ldd	r24, Z+2	; 0x02
   13ca6:	93 81       	ldd	r25, Z+3	; 0x03
   13ca8:	10 97       	sbiw	r26, 0x00	; 0
   13caa:	29 f0       	breq	.+10     	; 0x13cb6 <malloc+0x44>
   13cac:	13 96       	adiw	r26, 0x03	; 3
   13cae:	9c 93       	st	X, r25
   13cb0:	8e 93       	st	-X, r24
   13cb2:	12 97       	sbiw	r26, 0x02	; 2
   13cb4:	2c c0       	rjmp	.+88     	; 0x13d0e <malloc+0x9c>
   13cb6:	90 93 f8 04 	sts	0x04F8, r25
   13cba:	80 93 f7 04 	sts	0x04F7, r24
   13cbe:	27 c0       	rjmp	.+78     	; 0x13d0e <malloc+0x9c>
   13cc0:	21 15       	cp	r18, r1
   13cc2:	31 05       	cpc	r19, r1
   13cc4:	19 f0       	breq	.+6      	; 0x13ccc <malloc+0x5a>
   13cc6:	82 17       	cp	r24, r18
   13cc8:	93 07       	cpc	r25, r19
   13cca:	18 f4       	brcc	.+6      	; 0x13cd2 <malloc+0x60>
   13ccc:	9c 01       	movw	r18, r24
   13cce:	bd 01       	movw	r22, r26
   13cd0:	ef 01       	movw	r28, r30
   13cd2:	92 81       	ldd	r25, Z+2	; 0x02
   13cd4:	83 81       	ldd	r24, Z+3	; 0x03
   13cd6:	df 01       	movw	r26, r30
   13cd8:	e9 2f       	mov	r30, r25
   13cda:	f8 2f       	mov	r31, r24
   13cdc:	30 97       	sbiw	r30, 0x00	; 0
   13cde:	d1 f6       	brne	.-76     	; 0x13c94 <malloc+0x22>
   13ce0:	21 15       	cp	r18, r1
   13ce2:	31 05       	cpc	r19, r1
   13ce4:	f9 f0       	breq	.+62     	; 0x13d24 <malloc+0xb2>
   13ce6:	c9 01       	movw	r24, r18
   13ce8:	84 1b       	sub	r24, r20
   13cea:	95 0b       	sbc	r25, r21
   13cec:	84 30       	cpi	r24, 0x04	; 4
   13cee:	91 05       	cpc	r25, r1
   13cf0:	80 f4       	brcc	.+32     	; 0x13d12 <malloc+0xa0>
   13cf2:	8a 81       	ldd	r24, Y+2	; 0x02
   13cf4:	9b 81       	ldd	r25, Y+3	; 0x03
   13cf6:	61 15       	cp	r22, r1
   13cf8:	71 05       	cpc	r23, r1
   13cfa:	21 f0       	breq	.+8      	; 0x13d04 <malloc+0x92>
   13cfc:	fb 01       	movw	r30, r22
   13cfe:	93 83       	std	Z+3, r25	; 0x03
   13d00:	82 83       	std	Z+2, r24	; 0x02
   13d02:	04 c0       	rjmp	.+8      	; 0x13d0c <malloc+0x9a>
   13d04:	90 93 f8 04 	sts	0x04F8, r25
   13d08:	80 93 f7 04 	sts	0x04F7, r24
   13d0c:	fe 01       	movw	r30, r28
   13d0e:	32 96       	adiw	r30, 0x02	; 2
   13d10:	42 c0       	rjmp	.+132    	; 0x13d96 <malloc+0x124>
   13d12:	fe 01       	movw	r30, r28
   13d14:	e8 0f       	add	r30, r24
   13d16:	f9 1f       	adc	r31, r25
   13d18:	41 93       	st	Z+, r20
   13d1a:	51 93       	st	Z+, r21
   13d1c:	02 97       	sbiw	r24, 0x02	; 2
   13d1e:	99 83       	std	Y+1, r25	; 0x01
   13d20:	88 83       	st	Y, r24
   13d22:	39 c0       	rjmp	.+114    	; 0x13d96 <malloc+0x124>
   13d24:	80 91 f5 04 	lds	r24, 0x04F5
   13d28:	90 91 f6 04 	lds	r25, 0x04F6
   13d2c:	00 97       	sbiw	r24, 0x00	; 0
   13d2e:	41 f4       	brne	.+16     	; 0x13d40 <malloc+0xce>
   13d30:	80 91 26 03 	lds	r24, 0x0326
   13d34:	90 91 27 03 	lds	r25, 0x0327
   13d38:	90 93 f6 04 	sts	0x04F6, r25
   13d3c:	80 93 f5 04 	sts	0x04F5, r24
   13d40:	20 91 24 03 	lds	r18, 0x0324
   13d44:	30 91 25 03 	lds	r19, 0x0325
   13d48:	21 15       	cp	r18, r1
   13d4a:	31 05       	cpc	r19, r1
   13d4c:	41 f4       	brne	.+16     	; 0x13d5e <malloc+0xec>
   13d4e:	2d b7       	in	r18, 0x3d	; 61
   13d50:	3e b7       	in	r19, 0x3e	; 62
   13d52:	80 91 28 03 	lds	r24, 0x0328
   13d56:	90 91 29 03 	lds	r25, 0x0329
   13d5a:	28 1b       	sub	r18, r24
   13d5c:	39 0b       	sbc	r19, r25
   13d5e:	e0 91 f5 04 	lds	r30, 0x04F5
   13d62:	f0 91 f6 04 	lds	r31, 0x04F6
   13d66:	e2 17       	cp	r30, r18
   13d68:	f3 07       	cpc	r31, r19
   13d6a:	98 f4       	brcc	.+38     	; 0x13d92 <malloc+0x120>
   13d6c:	2e 1b       	sub	r18, r30
   13d6e:	3f 0b       	sbc	r19, r31
   13d70:	24 17       	cp	r18, r20
   13d72:	35 07       	cpc	r19, r21
   13d74:	70 f0       	brcs	.+28     	; 0x13d92 <malloc+0x120>
   13d76:	ca 01       	movw	r24, r20
   13d78:	02 96       	adiw	r24, 0x02	; 2
   13d7a:	28 17       	cp	r18, r24
   13d7c:	39 07       	cpc	r19, r25
   13d7e:	48 f0       	brcs	.+18     	; 0x13d92 <malloc+0x120>
   13d80:	8e 0f       	add	r24, r30
   13d82:	9f 1f       	adc	r25, r31
   13d84:	90 93 f6 04 	sts	0x04F6, r25
   13d88:	80 93 f5 04 	sts	0x04F5, r24
   13d8c:	41 93       	st	Z+, r20
   13d8e:	51 93       	st	Z+, r21
   13d90:	02 c0       	rjmp	.+4      	; 0x13d96 <malloc+0x124>
   13d92:	e0 e0       	ldi	r30, 0x00	; 0
   13d94:	f0 e0       	ldi	r31, 0x00	; 0
   13d96:	cf 01       	movw	r24, r30
   13d98:	df 91       	pop	r29
   13d9a:	cf 91       	pop	r28
   13d9c:	08 95       	ret

00013d9e <free>:
   13d9e:	0f 93       	push	r16
   13da0:	1f 93       	push	r17
   13da2:	cf 93       	push	r28
   13da4:	df 93       	push	r29
   13da6:	9c 01       	movw	r18, r24
   13da8:	00 97       	sbiw	r24, 0x00	; 0
   13daa:	09 f4       	brne	.+2      	; 0x13dae <free+0x10>
   13dac:	8c c0       	rjmp	.+280    	; 0x13ec6 <free+0x128>
   13dae:	dc 01       	movw	r26, r24
   13db0:	12 97       	sbiw	r26, 0x02	; 2
   13db2:	13 96       	adiw	r26, 0x03	; 3
   13db4:	1c 92       	st	X, r1
   13db6:	1e 92       	st	-X, r1
   13db8:	12 97       	sbiw	r26, 0x02	; 2
   13dba:	60 91 f7 04 	lds	r22, 0x04F7
   13dbe:	70 91 f8 04 	lds	r23, 0x04F8
   13dc2:	61 15       	cp	r22, r1
   13dc4:	71 05       	cpc	r23, r1
   13dc6:	89 f4       	brne	.+34     	; 0x13dea <free+0x4c>
   13dc8:	8d 91       	ld	r24, X+
   13dca:	9c 91       	ld	r25, X
   13dcc:	11 97       	sbiw	r26, 0x01	; 1
   13dce:	82 0f       	add	r24, r18
   13dd0:	93 1f       	adc	r25, r19
   13dd2:	20 91 f5 04 	lds	r18, 0x04F5
   13dd6:	30 91 f6 04 	lds	r19, 0x04F6
   13dda:	28 17       	cp	r18, r24
   13ddc:	39 07       	cpc	r19, r25
   13dde:	69 f5       	brne	.+90     	; 0x13e3a <free+0x9c>
   13de0:	b0 93 f6 04 	sts	0x04F6, r27
   13de4:	a0 93 f5 04 	sts	0x04F5, r26
   13de8:	6e c0       	rjmp	.+220    	; 0x13ec6 <free+0x128>
   13dea:	fb 01       	movw	r30, r22
   13dec:	40 e0       	ldi	r20, 0x00	; 0
   13dee:	50 e0       	ldi	r21, 0x00	; 0
   13df0:	01 c0       	rjmp	.+2      	; 0x13df4 <free+0x56>
   13df2:	fc 01       	movw	r30, r24
   13df4:	ea 17       	cp	r30, r26
   13df6:	fb 07       	cpc	r31, r27
   13df8:	30 f4       	brcc	.+12     	; 0x13e06 <free+0x68>
   13dfa:	82 81       	ldd	r24, Z+2	; 0x02
   13dfc:	93 81       	ldd	r25, Z+3	; 0x03
   13dfe:	af 01       	movw	r20, r30
   13e00:	00 97       	sbiw	r24, 0x00	; 0
   13e02:	b9 f7       	brne	.-18     	; 0x13df2 <free+0x54>
   13e04:	1f c0       	rjmp	.+62     	; 0x13e44 <free+0xa6>
   13e06:	e9 01       	movw	r28, r18
   13e08:	22 97       	sbiw	r28, 0x02	; 2
   13e0a:	fb 83       	std	Y+3, r31	; 0x03
   13e0c:	ea 83       	std	Y+2, r30	; 0x02
   13e0e:	08 81       	ld	r16, Y
   13e10:	19 81       	ldd	r17, Y+1	; 0x01
   13e12:	c9 01       	movw	r24, r18
   13e14:	80 0f       	add	r24, r16
   13e16:	91 1f       	adc	r25, r17
   13e18:	8e 17       	cp	r24, r30
   13e1a:	9f 07       	cpc	r25, r31
   13e1c:	59 f4       	brne	.+22     	; 0x13e34 <free+0x96>
   13e1e:	80 81       	ld	r24, Z
   13e20:	91 81       	ldd	r25, Z+1	; 0x01
   13e22:	80 0f       	add	r24, r16
   13e24:	91 1f       	adc	r25, r17
   13e26:	02 96       	adiw	r24, 0x02	; 2
   13e28:	99 83       	std	Y+1, r25	; 0x01
   13e2a:	88 83       	st	Y, r24
   13e2c:	82 81       	ldd	r24, Z+2	; 0x02
   13e2e:	93 81       	ldd	r25, Z+3	; 0x03
   13e30:	9b 83       	std	Y+3, r25	; 0x03
   13e32:	8a 83       	std	Y+2, r24	; 0x02
   13e34:	41 15       	cp	r20, r1
   13e36:	51 05       	cpc	r21, r1
   13e38:	29 f4       	brne	.+10     	; 0x13e44 <free+0xa6>
   13e3a:	b0 93 f8 04 	sts	0x04F8, r27
   13e3e:	a0 93 f7 04 	sts	0x04F7, r26
   13e42:	41 c0       	rjmp	.+130    	; 0x13ec6 <free+0x128>
   13e44:	fa 01       	movw	r30, r20
   13e46:	b3 83       	std	Z+3, r27	; 0x03
   13e48:	a2 83       	std	Z+2, r26	; 0x02
   13e4a:	c1 91       	ld	r28, Z+
   13e4c:	d1 91       	ld	r29, Z+
   13e4e:	ec 0f       	add	r30, r28
   13e50:	fd 1f       	adc	r31, r29
   13e52:	ae 17       	cp	r26, r30
   13e54:	bf 07       	cpc	r27, r31
   13e56:	81 f4       	brne	.+32     	; 0x13e78 <free+0xda>
   13e58:	f9 01       	movw	r30, r18
   13e5a:	92 91       	ld	r25, -Z
   13e5c:	82 91       	ld	r24, -Z
   13e5e:	8c 0f       	add	r24, r28
   13e60:	9d 1f       	adc	r25, r29
   13e62:	02 96       	adiw	r24, 0x02	; 2
   13e64:	da 01       	movw	r26, r20
   13e66:	11 96       	adiw	r26, 0x01	; 1
   13e68:	9c 93       	st	X, r25
   13e6a:	8e 93       	st	-X, r24
   13e6c:	82 81       	ldd	r24, Z+2	; 0x02
   13e6e:	93 81       	ldd	r25, Z+3	; 0x03
   13e70:	13 96       	adiw	r26, 0x03	; 3
   13e72:	9c 93       	st	X, r25
   13e74:	8e 93       	st	-X, r24
   13e76:	12 97       	sbiw	r26, 0x02	; 2
   13e78:	e0 e0       	ldi	r30, 0x00	; 0
   13e7a:	f0 e0       	ldi	r31, 0x00	; 0
   13e7c:	02 c0       	rjmp	.+4      	; 0x13e82 <free+0xe4>
   13e7e:	fb 01       	movw	r30, r22
   13e80:	bc 01       	movw	r22, r24
   13e82:	db 01       	movw	r26, r22
   13e84:	12 96       	adiw	r26, 0x02	; 2
   13e86:	8d 91       	ld	r24, X+
   13e88:	9c 91       	ld	r25, X
   13e8a:	13 97       	sbiw	r26, 0x03	; 3
   13e8c:	00 97       	sbiw	r24, 0x00	; 0
   13e8e:	b9 f7       	brne	.-18     	; 0x13e7e <free+0xe0>
   13e90:	cb 01       	movw	r24, r22
   13e92:	02 96       	adiw	r24, 0x02	; 2
   13e94:	2d 91       	ld	r18, X+
   13e96:	3c 91       	ld	r19, X
   13e98:	11 97       	sbiw	r26, 0x01	; 1
   13e9a:	82 0f       	add	r24, r18
   13e9c:	93 1f       	adc	r25, r19
   13e9e:	20 91 f5 04 	lds	r18, 0x04F5
   13ea2:	30 91 f6 04 	lds	r19, 0x04F6
   13ea6:	28 17       	cp	r18, r24
   13ea8:	39 07       	cpc	r19, r25
   13eaa:	69 f4       	brne	.+26     	; 0x13ec6 <free+0x128>
   13eac:	30 97       	sbiw	r30, 0x00	; 0
   13eae:	29 f4       	brne	.+10     	; 0x13eba <free+0x11c>
   13eb0:	10 92 f8 04 	sts	0x04F8, r1
   13eb4:	10 92 f7 04 	sts	0x04F7, r1
   13eb8:	02 c0       	rjmp	.+4      	; 0x13ebe <free+0x120>
   13eba:	13 82       	std	Z+3, r1	; 0x03
   13ebc:	12 82       	std	Z+2, r1	; 0x02
   13ebe:	70 93 f6 04 	sts	0x04F6, r23
   13ec2:	60 93 f5 04 	sts	0x04F5, r22
   13ec6:	df 91       	pop	r29
   13ec8:	cf 91       	pop	r28
   13eca:	1f 91       	pop	r17
   13ecc:	0f 91       	pop	r16
   13ece:	08 95       	ret

00013ed0 <realloc>:
   13ed0:	8f 92       	push	r8
   13ed2:	9f 92       	push	r9
   13ed4:	af 92       	push	r10
   13ed6:	bf 92       	push	r11
   13ed8:	cf 92       	push	r12
   13eda:	df 92       	push	r13
   13edc:	ef 92       	push	r14
   13ede:	ff 92       	push	r15
   13ee0:	0f 93       	push	r16
   13ee2:	1f 93       	push	r17
   13ee4:	cf 93       	push	r28
   13ee6:	df 93       	push	r29
   13ee8:	0f 92       	push	r0
   13eea:	0f 92       	push	r0
   13eec:	cd b7       	in	r28, 0x3d	; 61
   13eee:	de b7       	in	r29, 0x3e	; 62
   13ef0:	8c 01       	movw	r16, r24
   13ef2:	00 97       	sbiw	r24, 0x00	; 0
   13ef4:	29 f4       	brne	.+10     	; 0x13f00 <realloc+0x30>
   13ef6:	cb 01       	movw	r24, r22
   13ef8:	0e 94 39 9e 	call	0x13c72	; 0x13c72 <malloc>
   13efc:	8c 01       	movw	r16, r24
   13efe:	b8 c0       	rjmp	.+368    	; 0x14070 <realloc+0x1a0>
   13f00:	dc 01       	movw	r26, r24
   13f02:	a6 0f       	add	r26, r22
   13f04:	b7 1f       	adc	r27, r23
   13f06:	fc 01       	movw	r30, r24
   13f08:	32 97       	sbiw	r30, 0x02	; 2
   13f0a:	ae 17       	cp	r26, r30
   13f0c:	bf 07       	cpc	r27, r31
   13f0e:	08 f4       	brcc	.+2      	; 0x13f12 <realloc+0x42>
   13f10:	ad c0       	rjmp	.+346    	; 0x1406c <realloc+0x19c>
   13f12:	20 81       	ld	r18, Z
   13f14:	31 81       	ldd	r19, Z+1	; 0x01
   13f16:	26 17       	cp	r18, r22
   13f18:	37 07       	cpc	r19, r23
   13f1a:	b0 f0       	brcs	.+44     	; 0x13f48 <realloc+0x78>
   13f1c:	25 30       	cpi	r18, 0x05	; 5
   13f1e:	31 05       	cpc	r19, r1
   13f20:	08 f4       	brcc	.+2      	; 0x13f24 <realloc+0x54>
   13f22:	a6 c0       	rjmp	.+332    	; 0x14070 <realloc+0x1a0>
   13f24:	c9 01       	movw	r24, r18
   13f26:	04 97       	sbiw	r24, 0x04	; 4
   13f28:	86 17       	cp	r24, r22
   13f2a:	97 07       	cpc	r25, r23
   13f2c:	08 f4       	brcc	.+2      	; 0x13f30 <realloc+0x60>
   13f2e:	a0 c0       	rjmp	.+320    	; 0x14070 <realloc+0x1a0>
   13f30:	22 50       	subi	r18, 0x02	; 2
   13f32:	30 40       	sbci	r19, 0x00	; 0
   13f34:	26 1b       	sub	r18, r22
   13f36:	37 0b       	sbc	r19, r23
   13f38:	2d 93       	st	X+, r18
   13f3a:	3d 93       	st	X+, r19
   13f3c:	cd 01       	movw	r24, r26
   13f3e:	71 83       	std	Z+1, r23	; 0x01
   13f40:	60 83       	st	Z, r22
   13f42:	0e 94 cf 9e 	call	0x13d9e	; 0x13d9e <free>
   13f46:	94 c0       	rjmp	.+296    	; 0x14070 <realloc+0x1a0>
   13f48:	6b 01       	movw	r12, r22
   13f4a:	c2 1a       	sub	r12, r18
   13f4c:	d3 0a       	sbc	r13, r19
   13f4e:	5c 01       	movw	r10, r24
   13f50:	a2 0e       	add	r10, r18
   13f52:	b3 1e       	adc	r11, r19
   13f54:	e0 91 f7 04 	lds	r30, 0x04F7
   13f58:	f0 91 f8 04 	lds	r31, 0x04F8
   13f5c:	40 e0       	ldi	r20, 0x00	; 0
   13f5e:	50 e0       	ldi	r21, 0x00	; 0
   13f60:	88 24       	eor	r8, r8
   13f62:	99 24       	eor	r9, r9
   13f64:	49 c0       	rjmp	.+146    	; 0x13ff8 <realloc+0x128>
   13f66:	ea 15       	cp	r30, r10
   13f68:	fb 05       	cpc	r31, r11
   13f6a:	e1 f5       	brne	.+120    	; 0x13fe4 <realloc+0x114>
   13f6c:	e0 80       	ld	r14, Z
   13f6e:	f1 80       	ldd	r15, Z+1	; 0x01
   13f70:	c7 01       	movw	r24, r14
   13f72:	02 96       	adiw	r24, 0x02	; 2
   13f74:	8c 15       	cp	r24, r12
   13f76:	9d 05       	cpc	r25, r13
   13f78:	a8 f1       	brcs	.+106    	; 0x13fe4 <realloc+0x114>
   13f7a:	a7 01       	movw	r20, r14
   13f7c:	4c 19       	sub	r20, r12
   13f7e:	5d 09       	sbc	r21, r13
   13f80:	ca 01       	movw	r24, r20
   13f82:	02 96       	adiw	r24, 0x02	; 2
   13f84:	0f 2e       	mov	r0, r31
   13f86:	fe ef       	ldi	r31, 0xFE	; 254
   13f88:	cf 2e       	mov	r12, r31
   13f8a:	ff ef       	ldi	r31, 0xFF	; 255
   13f8c:	df 2e       	mov	r13, r31
   13f8e:	f0 2d       	mov	r31, r0
   13f90:	c0 0e       	add	r12, r16
   13f92:	d1 1e       	adc	r13, r17
   13f94:	85 30       	cpi	r24, 0x05	; 5
   13f96:	91 05       	cpc	r25, r1
   13f98:	78 f0       	brcs	.+30     	; 0x13fb8 <realloc+0xe8>
   13f9a:	82 81       	ldd	r24, Z+2	; 0x02
   13f9c:	93 81       	ldd	r25, Z+3	; 0x03
   13f9e:	13 96       	adiw	r26, 0x03	; 3
   13fa0:	9c 93       	st	X, r25
   13fa2:	8e 93       	st	-X, r24
   13fa4:	12 97       	sbiw	r26, 0x02	; 2
   13fa6:	11 96       	adiw	r26, 0x01	; 1
   13fa8:	5c 93       	st	X, r21
   13faa:	4e 93       	st	-X, r20
   13fac:	f6 01       	movw	r30, r12
   13fae:	71 83       	std	Z+1, r23	; 0x01
   13fb0:	60 83       	st	Z, r22
   13fb2:	9a 2f       	mov	r25, r26
   13fb4:	8b 2f       	mov	r24, r27
   13fb6:	0a c0       	rjmp	.+20     	; 0x13fcc <realloc+0xfc>
   13fb8:	c9 01       	movw	r24, r18
   13fba:	02 96       	adiw	r24, 0x02	; 2
   13fbc:	8e 0d       	add	r24, r14
   13fbe:	9f 1d       	adc	r25, r15
   13fc0:	d6 01       	movw	r26, r12
   13fc2:	11 96       	adiw	r26, 0x01	; 1
   13fc4:	9c 93       	st	X, r25
   13fc6:	8e 93       	st	-X, r24
   13fc8:	92 81       	ldd	r25, Z+2	; 0x02
   13fca:	83 81       	ldd	r24, Z+3	; 0x03
   13fcc:	81 14       	cp	r8, r1
   13fce:	91 04       	cpc	r9, r1
   13fd0:	21 f0       	breq	.+8      	; 0x13fda <realloc+0x10a>
   13fd2:	f4 01       	movw	r30, r8
   13fd4:	92 83       	std	Z+2, r25	; 0x02
   13fd6:	83 83       	std	Z+3, r24	; 0x03
   13fd8:	4b c0       	rjmp	.+150    	; 0x14070 <realloc+0x1a0>
   13fda:	90 93 f7 04 	sts	0x04F7, r25
   13fde:	80 93 f8 04 	sts	0x04F8, r24
   13fe2:	46 c0       	rjmp	.+140    	; 0x14070 <realloc+0x1a0>
   13fe4:	80 81       	ld	r24, Z
   13fe6:	91 81       	ldd	r25, Z+1	; 0x01
   13fe8:	48 17       	cp	r20, r24
   13fea:	59 07       	cpc	r21, r25
   13fec:	08 f4       	brcc	.+2      	; 0x13ff0 <realloc+0x120>
   13fee:	ac 01       	movw	r20, r24
   13ff0:	82 81       	ldd	r24, Z+2	; 0x02
   13ff2:	93 81       	ldd	r25, Z+3	; 0x03
   13ff4:	4f 01       	movw	r8, r30
   13ff6:	fc 01       	movw	r30, r24
   13ff8:	30 97       	sbiw	r30, 0x00	; 0
   13ffa:	09 f0       	breq	.+2      	; 0x13ffe <realloc+0x12e>
   13ffc:	b4 cf       	rjmp	.-152    	; 0x13f66 <realloc+0x96>
   13ffe:	80 91 f5 04 	lds	r24, 0x04F5
   14002:	90 91 f6 04 	lds	r25, 0x04F6
   14006:	8a 15       	cp	r24, r10
   14008:	9b 05       	cpc	r25, r11
   1400a:	e9 f4       	brne	.+58     	; 0x14046 <realloc+0x176>
   1400c:	46 17       	cp	r20, r22
   1400e:	57 07       	cpc	r21, r23
   14010:	d0 f4       	brcc	.+52     	; 0x14046 <realloc+0x176>
   14012:	80 91 24 03 	lds	r24, 0x0324
   14016:	90 91 25 03 	lds	r25, 0x0325
   1401a:	00 97       	sbiw	r24, 0x00	; 0
   1401c:	41 f4       	brne	.+16     	; 0x1402e <realloc+0x15e>
   1401e:	8d b7       	in	r24, 0x3d	; 61
   14020:	9e b7       	in	r25, 0x3e	; 62
   14022:	20 91 28 03 	lds	r18, 0x0328
   14026:	30 91 29 03 	lds	r19, 0x0329
   1402a:	82 1b       	sub	r24, r18
   1402c:	93 0b       	sbc	r25, r19
   1402e:	a8 17       	cp	r26, r24
   14030:	b9 07       	cpc	r27, r25
   14032:	e0 f4       	brcc	.+56     	; 0x1406c <realloc+0x19c>
   14034:	b0 93 f6 04 	sts	0x04F6, r27
   14038:	a0 93 f5 04 	sts	0x04F5, r26
   1403c:	f8 01       	movw	r30, r16
   1403e:	32 97       	sbiw	r30, 0x02	; 2
   14040:	71 83       	std	Z+1, r23	; 0x01
   14042:	60 83       	st	Z, r22
   14044:	15 c0       	rjmp	.+42     	; 0x14070 <realloc+0x1a0>
   14046:	cb 01       	movw	r24, r22
   14048:	29 83       	std	Y+1, r18	; 0x01
   1404a:	3a 83       	std	Y+2, r19	; 0x02
   1404c:	0e 94 39 9e 	call	0x13c72	; 0x13c72 <malloc>
   14050:	7c 01       	movw	r14, r24
   14052:	29 81       	ldd	r18, Y+1	; 0x01
   14054:	3a 81       	ldd	r19, Y+2	; 0x02
   14056:	00 97       	sbiw	r24, 0x00	; 0
   14058:	49 f0       	breq	.+18     	; 0x1406c <realloc+0x19c>
   1405a:	b8 01       	movw	r22, r16
   1405c:	a9 01       	movw	r20, r18
   1405e:	0e 94 4d a0 	call	0x1409a	; 0x1409a <memcpy>
   14062:	c8 01       	movw	r24, r16
   14064:	0e 94 cf 9e 	call	0x13d9e	; 0x13d9e <free>
   14068:	87 01       	movw	r16, r14
   1406a:	02 c0       	rjmp	.+4      	; 0x14070 <realloc+0x1a0>
   1406c:	00 e0       	ldi	r16, 0x00	; 0
   1406e:	10 e0       	ldi	r17, 0x00	; 0
   14070:	c8 01       	movw	r24, r16
   14072:	0f 90       	pop	r0
   14074:	0f 90       	pop	r0
   14076:	df 91       	pop	r29
   14078:	cf 91       	pop	r28
   1407a:	1f 91       	pop	r17
   1407c:	0f 91       	pop	r16
   1407e:	ff 90       	pop	r15
   14080:	ef 90       	pop	r14
   14082:	df 90       	pop	r13
   14084:	cf 90       	pop	r12
   14086:	bf 90       	pop	r11
   14088:	af 90       	pop	r10
   1408a:	9f 90       	pop	r9
   1408c:	8f 90       	pop	r8
   1408e:	08 95       	ret

00014090 <strtok>:
   14090:	48 e2       	ldi	r20, 0x28	; 40
   14092:	54 e0       	ldi	r21, 0x04	; 4
   14094:	0e 94 68 a0 	call	0x140d0	; 0x140d0 <strtok_r>
   14098:	08 95       	ret

0001409a <memcpy>:
   1409a:	fb 01       	movw	r30, r22
   1409c:	dc 01       	movw	r26, r24
   1409e:	02 c0       	rjmp	.+4      	; 0x140a4 <memcpy+0xa>
   140a0:	01 90       	ld	r0, Z+
   140a2:	0d 92       	st	X+, r0
   140a4:	41 50       	subi	r20, 0x01	; 1
   140a6:	50 40       	sbci	r21, 0x00	; 0
   140a8:	d8 f7       	brcc	.-10     	; 0x140a0 <memcpy+0x6>
   140aa:	08 95       	ret

000140ac <strcat>:
   140ac:	fb 01       	movw	r30, r22
   140ae:	dc 01       	movw	r26, r24
   140b0:	0d 90       	ld	r0, X+
   140b2:	00 20       	and	r0, r0
   140b4:	e9 f7       	brne	.-6      	; 0x140b0 <strcat+0x4>
   140b6:	11 97       	sbiw	r26, 0x01	; 1
   140b8:	01 90       	ld	r0, Z+
   140ba:	0d 92       	st	X+, r0
   140bc:	00 20       	and	r0, r0
   140be:	e1 f7       	brne	.-8      	; 0x140b8 <strcat+0xc>
   140c0:	08 95       	ret

000140c2 <strcpy>:
   140c2:	fb 01       	movw	r30, r22
   140c4:	dc 01       	movw	r26, r24
   140c6:	01 90       	ld	r0, Z+
   140c8:	0d 92       	st	X+, r0
   140ca:	00 20       	and	r0, r0
   140cc:	e1 f7       	brne	.-8      	; 0x140c6 <strcpy+0x4>
   140ce:	08 95       	ret

000140d0 <strtok_r>:
   140d0:	fa 01       	movw	r30, r20
   140d2:	a1 91       	ld	r26, Z+
   140d4:	b0 81       	ld	r27, Z
   140d6:	00 97       	sbiw	r24, 0x00	; 0
   140d8:	19 f4       	brne	.+6      	; 0x140e0 <strtok_r+0x10>
   140da:	10 97       	sbiw	r26, 0x00	; 0
   140dc:	e1 f0       	breq	.+56     	; 0x14116 <strtok_r+0x46>
   140de:	cd 01       	movw	r24, r26
   140e0:	dc 01       	movw	r26, r24
   140e2:	cd 01       	movw	r24, r26
   140e4:	0d 90       	ld	r0, X+
   140e6:	00 20       	and	r0, r0
   140e8:	11 f4       	brne	.+4      	; 0x140ee <strtok_r+0x1e>
   140ea:	c0 01       	movw	r24, r0
   140ec:	13 c0       	rjmp	.+38     	; 0x14114 <strtok_r+0x44>
   140ee:	fb 01       	movw	r30, r22
   140f0:	21 91       	ld	r18, Z+
   140f2:	22 23       	and	r18, r18
   140f4:	19 f0       	breq	.+6      	; 0x140fc <strtok_r+0x2c>
   140f6:	20 15       	cp	r18, r0
   140f8:	d9 f7       	brne	.-10     	; 0x140f0 <strtok_r+0x20>
   140fa:	f3 cf       	rjmp	.-26     	; 0x140e2 <strtok_r+0x12>
   140fc:	fb 01       	movw	r30, r22
   140fe:	21 91       	ld	r18, Z+
   14100:	20 15       	cp	r18, r0
   14102:	19 f4       	brne	.+6      	; 0x1410a <strtok_r+0x3a>
   14104:	1e 92       	st	-X, r1
   14106:	11 96       	adiw	r26, 0x01	; 1
   14108:	06 c0       	rjmp	.+12     	; 0x14116 <strtok_r+0x46>
   1410a:	22 23       	and	r18, r18
   1410c:	c1 f7       	brne	.-16     	; 0x140fe <strtok_r+0x2e>
   1410e:	0d 90       	ld	r0, X+
   14110:	00 20       	and	r0, r0
   14112:	a1 f7       	brne	.-24     	; 0x140fc <strtok_r+0x2c>
   14114:	d0 01       	movw	r26, r0
   14116:	fa 01       	movw	r30, r20
   14118:	a1 93       	st	Z+, r26
   1411a:	b0 83       	st	Z, r27
   1411c:	08 95       	ret

0001411e <sscanf>:
   1411e:	cf 93       	push	r28
   14120:	df 93       	push	r29
   14122:	cd b7       	in	r28, 0x3d	; 61
   14124:	de b7       	in	r29, 0x3e	; 62
   14126:	2e 97       	sbiw	r28, 0x0e	; 14
   14128:	0f b6       	in	r0, 0x3f	; 63
   1412a:	f8 94       	cli
   1412c:	de bf       	out	0x3e, r29	; 62
   1412e:	0f be       	out	0x3f, r0	; 63
   14130:	cd bf       	out	0x3d, r28	; 61
   14132:	85 e0       	ldi	r24, 0x05	; 5
   14134:	8c 83       	std	Y+4, r24	; 0x04
   14136:	8c 89       	ldd	r24, Y+20	; 0x14
   14138:	9d 89       	ldd	r25, Y+21	; 0x15
   1413a:	9a 83       	std	Y+2, r25	; 0x02
   1413c:	89 83       	std	Y+1, r24	; 0x01
   1413e:	ae 01       	movw	r20, r28
   14140:	48 5e       	subi	r20, 0xE8	; 232
   14142:	5f 4f       	sbci	r21, 0xFF	; 255
   14144:	ce 01       	movw	r24, r28
   14146:	01 96       	adiw	r24, 0x01	; 1
   14148:	6e 89       	ldd	r22, Y+22	; 0x16
   1414a:	7f 89       	ldd	r23, Y+23	; 0x17
   1414c:	0e 94 55 a2 	call	0x144aa	; 0x144aa <vfscanf>
   14150:	2e 96       	adiw	r28, 0x0e	; 14
   14152:	0f b6       	in	r0, 0x3f	; 63
   14154:	f8 94       	cli
   14156:	de bf       	out	0x3e, r29	; 62
   14158:	0f be       	out	0x3f, r0	; 63
   1415a:	cd bf       	out	0x3d, r28	; 61
   1415c:	df 91       	pop	r29
   1415e:	cf 91       	pop	r28
   14160:	08 95       	ret

00014162 <putval>:
   14162:	20 fd       	sbrc	r18, 0
   14164:	09 c0       	rjmp	.+18     	; 0x14178 <putval+0x16>
   14166:	fc 01       	movw	r30, r24
   14168:	23 fd       	sbrc	r18, 3
   1416a:	05 c0       	rjmp	.+10     	; 0x14176 <putval+0x14>
   1416c:	22 ff       	sbrs	r18, 2
   1416e:	02 c0       	rjmp	.+4      	; 0x14174 <putval+0x12>
   14170:	73 83       	std	Z+3, r23	; 0x03
   14172:	62 83       	std	Z+2, r22	; 0x02
   14174:	51 83       	std	Z+1, r21	; 0x01
   14176:	40 83       	st	Z, r20
   14178:	08 95       	ret

0001417a <mulacc>:
   1417a:	cf 92       	push	r12
   1417c:	df 92       	push	r13
   1417e:	ef 92       	push	r14
   14180:	ff 92       	push	r15
   14182:	6b 01       	movw	r12, r22
   14184:	7c 01       	movw	r14, r24
   14186:	44 fd       	sbrc	r20, 4
   14188:	10 c0       	rjmp	.+32     	; 0x141aa <mulacc+0x30>
   1418a:	46 fd       	sbrc	r20, 6
   1418c:	10 c0       	rjmp	.+32     	; 0x141ae <mulacc+0x34>
   1418e:	d6 01       	movw	r26, r12
   14190:	f7 01       	movw	r30, r14
   14192:	aa 0f       	add	r26, r26
   14194:	bb 1f       	adc	r27, r27
   14196:	ee 1f       	adc	r30, r30
   14198:	ff 1f       	adc	r31, r31
   1419a:	10 94       	com	r1
   1419c:	d1 f7       	brne	.-12     	; 0x14192 <mulacc+0x18>
   1419e:	ca 0e       	add	r12, r26
   141a0:	db 1e       	adc	r13, r27
   141a2:	ee 1e       	adc	r14, r30
   141a4:	ff 1e       	adc	r15, r31
   141a6:	81 e0       	ldi	r24, 0x01	; 1
   141a8:	03 c0       	rjmp	.+6      	; 0x141b0 <mulacc+0x36>
   141aa:	83 e0       	ldi	r24, 0x03	; 3
   141ac:	01 c0       	rjmp	.+2      	; 0x141b0 <mulacc+0x36>
   141ae:	84 e0       	ldi	r24, 0x04	; 4
   141b0:	cc 0c       	add	r12, r12
   141b2:	dd 1c       	adc	r13, r13
   141b4:	ee 1c       	adc	r14, r14
   141b6:	ff 1c       	adc	r15, r15
   141b8:	81 50       	subi	r24, 0x01	; 1
   141ba:	d1 f7       	brne	.-12     	; 0x141b0 <mulacc+0x36>
   141bc:	c2 0e       	add	r12, r18
   141be:	d1 1c       	adc	r13, r1
   141c0:	e1 1c       	adc	r14, r1
   141c2:	f1 1c       	adc	r15, r1
   141c4:	b6 01       	movw	r22, r12
   141c6:	c7 01       	movw	r24, r14
   141c8:	ff 90       	pop	r15
   141ca:	ef 90       	pop	r14
   141cc:	df 90       	pop	r13
   141ce:	cf 90       	pop	r12
   141d0:	08 95       	ret

000141d2 <skip_spaces>:
   141d2:	0f 93       	push	r16
   141d4:	1f 93       	push	r17
   141d6:	cf 93       	push	r28
   141d8:	df 93       	push	r29
   141da:	8c 01       	movw	r16, r24
   141dc:	c8 01       	movw	r24, r16
   141de:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   141e2:	ec 01       	movw	r28, r24
   141e4:	97 fd       	sbrc	r25, 7
   141e6:	08 c0       	rjmp	.+16     	; 0x141f8 <skip_spaces+0x26>
   141e8:	0e 94 82 a3 	call	0x14704	; 0x14704 <isspace>
   141ec:	00 97       	sbiw	r24, 0x00	; 0
   141ee:	b1 f7       	brne	.-20     	; 0x141dc <skip_spaces+0xa>
   141f0:	ce 01       	movw	r24, r28
   141f2:	b8 01       	movw	r22, r16
   141f4:	0e 94 d5 a3 	call	0x147aa	; 0x147aa <ungetc>
   141f8:	ce 01       	movw	r24, r28
   141fa:	df 91       	pop	r29
   141fc:	cf 91       	pop	r28
   141fe:	1f 91       	pop	r17
   14200:	0f 91       	pop	r16
   14202:	08 95       	ret

00014204 <conv_int>:
   14204:	af 92       	push	r10
   14206:	bf 92       	push	r11
   14208:	cf 92       	push	r12
   1420a:	df 92       	push	r13
   1420c:	ef 92       	push	r14
   1420e:	ff 92       	push	r15
   14210:	0f 93       	push	r16
   14212:	1f 93       	push	r17
   14214:	cf 93       	push	r28
   14216:	df 93       	push	r29
   14218:	8c 01       	movw	r16, r24
   1421a:	d6 2f       	mov	r29, r22
   1421c:	5a 01       	movw	r10, r20
   1421e:	c2 2f       	mov	r28, r18
   14220:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   14224:	8b 32       	cpi	r24, 0x2B	; 43
   14226:	19 f0       	breq	.+6      	; 0x1422e <conv_int+0x2a>
   14228:	8d 32       	cpi	r24, 0x2D	; 45
   1422a:	49 f4       	brne	.+18     	; 0x1423e <conv_int+0x3a>
   1422c:	c0 68       	ori	r28, 0x80	; 128
   1422e:	d1 50       	subi	r29, 0x01	; 1
   14230:	09 f4       	brne	.+2      	; 0x14234 <conv_int+0x30>
   14232:	61 c0       	rjmp	.+194    	; 0x142f6 <conv_int+0xf2>
   14234:	c8 01       	movw	r24, r16
   14236:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   1423a:	97 fd       	sbrc	r25, 7
   1423c:	5c c0       	rjmp	.+184    	; 0x142f6 <conv_int+0xf2>
   1423e:	cd 7f       	andi	r28, 0xFD	; 253
   14240:	2c 2f       	mov	r18, r28
   14242:	20 73       	andi	r18, 0x30	; 48
   14244:	d1 f4       	brne	.+52     	; 0x1427a <conv_int+0x76>
   14246:	80 33       	cpi	r24, 0x30	; 48
   14248:	c1 f4       	brne	.+48     	; 0x1427a <conv_int+0x76>
   1424a:	d1 50       	subi	r29, 0x01	; 1
   1424c:	09 f4       	brne	.+2      	; 0x14250 <conv_int+0x4c>
   1424e:	3e c0       	rjmp	.+124    	; 0x142cc <conv_int+0xc8>
   14250:	c8 01       	movw	r24, r16
   14252:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   14256:	97 fd       	sbrc	r25, 7
   14258:	39 c0       	rjmp	.+114    	; 0x142cc <conv_int+0xc8>
   1425a:	c2 60       	ori	r28, 0x02	; 2
   1425c:	88 37       	cpi	r24, 0x78	; 120
   1425e:	11 f0       	breq	.+4      	; 0x14264 <conv_int+0x60>
   14260:	88 35       	cpi	r24, 0x58	; 88
   14262:	49 f4       	brne	.+18     	; 0x14276 <conv_int+0x72>
   14264:	c0 64       	ori	r28, 0x40	; 64
   14266:	d1 50       	subi	r29, 0x01	; 1
   14268:	89 f1       	breq	.+98     	; 0x142cc <conv_int+0xc8>
   1426a:	c8 01       	movw	r24, r16
   1426c:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   14270:	97 ff       	sbrs	r25, 7
   14272:	03 c0       	rjmp	.+6      	; 0x1427a <conv_int+0x76>
   14274:	2b c0       	rjmp	.+86     	; 0x142cc <conv_int+0xc8>
   14276:	c6 ff       	sbrs	r28, 6
   14278:	c0 61       	ori	r28, 0x10	; 16
   1427a:	cc 24       	eor	r12, r12
   1427c:	dd 24       	eor	r13, r13
   1427e:	76 01       	movw	r14, r12
   14280:	28 2f       	mov	r18, r24
   14282:	20 53       	subi	r18, 0x30	; 48
   14284:	28 30       	cpi	r18, 0x08	; 8
   14286:	80 f0       	brcs	.+32     	; 0x142a8 <conv_int+0xa4>
   14288:	c4 fd       	sbrc	r28, 4
   1428a:	09 c0       	rjmp	.+18     	; 0x1429e <conv_int+0x9a>
   1428c:	2a 30       	cpi	r18, 0x0A	; 10
   1428e:	60 f0       	brcs	.+24     	; 0x142a8 <conv_int+0xa4>
   14290:	c6 ff       	sbrs	r28, 6
   14292:	05 c0       	rjmp	.+10     	; 0x1429e <conv_int+0x9a>
   14294:	2f 7d       	andi	r18, 0xDF	; 223
   14296:	32 2f       	mov	r19, r18
   14298:	31 51       	subi	r19, 0x11	; 17
   1429a:	36 30       	cpi	r19, 0x06	; 6
   1429c:	20 f0       	brcs	.+8      	; 0x142a6 <conv_int+0xa2>
   1429e:	b8 01       	movw	r22, r16
   142a0:	0e 94 d5 a3 	call	0x147aa	; 0x147aa <ungetc>
   142a4:	10 c0       	rjmp	.+32     	; 0x142c6 <conv_int+0xc2>
   142a6:	27 50       	subi	r18, 0x07	; 7
   142a8:	c7 01       	movw	r24, r14
   142aa:	b6 01       	movw	r22, r12
   142ac:	4c 2f       	mov	r20, r28
   142ae:	0e 94 bd a0 	call	0x1417a	; 0x1417a <mulacc>
   142b2:	6b 01       	movw	r12, r22
   142b4:	7c 01       	movw	r14, r24
   142b6:	c2 60       	ori	r28, 0x02	; 2
   142b8:	d1 50       	subi	r29, 0x01	; 1
   142ba:	59 f0       	breq	.+22     	; 0x142d2 <conv_int+0xce>
   142bc:	c8 01       	movw	r24, r16
   142be:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   142c2:	97 ff       	sbrs	r25, 7
   142c4:	dd cf       	rjmp	.-70     	; 0x14280 <conv_int+0x7c>
   142c6:	c1 fd       	sbrc	r28, 1
   142c8:	04 c0       	rjmp	.+8      	; 0x142d2 <conv_int+0xce>
   142ca:	15 c0       	rjmp	.+42     	; 0x142f6 <conv_int+0xf2>
   142cc:	cc 24       	eor	r12, r12
   142ce:	dd 24       	eor	r13, r13
   142d0:	76 01       	movw	r14, r12
   142d2:	c7 ff       	sbrs	r28, 7
   142d4:	08 c0       	rjmp	.+16     	; 0x142e6 <conv_int+0xe2>
   142d6:	f0 94       	com	r15
   142d8:	e0 94       	com	r14
   142da:	d0 94       	com	r13
   142dc:	c0 94       	com	r12
   142de:	c1 1c       	adc	r12, r1
   142e0:	d1 1c       	adc	r13, r1
   142e2:	e1 1c       	adc	r14, r1
   142e4:	f1 1c       	adc	r15, r1
   142e6:	c5 01       	movw	r24, r10
   142e8:	b7 01       	movw	r22, r14
   142ea:	a6 01       	movw	r20, r12
   142ec:	2c 2f       	mov	r18, r28
   142ee:	0e 94 b1 a0 	call	0x14162	; 0x14162 <putval>
   142f2:	81 e0       	ldi	r24, 0x01	; 1
   142f4:	01 c0       	rjmp	.+2      	; 0x142f8 <conv_int+0xf4>
   142f6:	80 e0       	ldi	r24, 0x00	; 0
   142f8:	df 91       	pop	r29
   142fa:	cf 91       	pop	r28
   142fc:	1f 91       	pop	r17
   142fe:	0f 91       	pop	r16
   14300:	ff 90       	pop	r15
   14302:	ef 90       	pop	r14
   14304:	df 90       	pop	r13
   14306:	cf 90       	pop	r12
   14308:	bf 90       	pop	r11
   1430a:	af 90       	pop	r10
   1430c:	08 95       	ret

0001430e <conv_brk>:
   1430e:	4f 92       	push	r4
   14310:	5f 92       	push	r5
   14312:	6f 92       	push	r6
   14314:	7f 92       	push	r7
   14316:	8f 92       	push	r8
   14318:	9f 92       	push	r9
   1431a:	af 92       	push	r10
   1431c:	bf 92       	push	r11
   1431e:	cf 92       	push	r12
   14320:	df 92       	push	r13
   14322:	ef 92       	push	r14
   14324:	ff 92       	push	r15
   14326:	0f 93       	push	r16
   14328:	1f 93       	push	r17
   1432a:	cf 93       	push	r28
   1432c:	df 93       	push	r29
   1432e:	cd b7       	in	r28, 0x3d	; 61
   14330:	de b7       	in	r29, 0x3e	; 62
   14332:	a0 97       	sbiw	r28, 0x20	; 32
   14334:	0f b6       	in	r0, 0x3f	; 63
   14336:	f8 94       	cli
   14338:	de bf       	out	0x3e, r29	; 62
   1433a:	0f be       	out	0x3f, r0	; 63
   1433c:	cd bf       	out	0x3d, r28	; 61
   1433e:	5c 01       	movw	r10, r24
   14340:	06 2f       	mov	r16, r22
   14342:	7a 01       	movw	r14, r20
   14344:	69 01       	movw	r12, r18
   14346:	fe 01       	movw	r30, r28
   14348:	31 96       	adiw	r30, 0x01	; 1
   1434a:	80 e2       	ldi	r24, 0x20	; 32
   1434c:	df 01       	movw	r26, r30
   1434e:	1d 92       	st	X+, r1
   14350:	8a 95       	dec	r24
   14352:	e9 f7       	brne	.-6      	; 0x1434e <conv_brk+0x40>
   14354:	d5 01       	movw	r26, r10
   14356:	13 96       	adiw	r26, 0x03	; 3
   14358:	1c 91       	ld	r17, X
   1435a:	13 97       	sbiw	r26, 0x03	; 3
   1435c:	60 e0       	ldi	r22, 0x00	; 0
   1435e:	70 e0       	ldi	r23, 0x00	; 0
   14360:	20 e0       	ldi	r18, 0x00	; 0
   14362:	40 e0       	ldi	r20, 0x00	; 0
   14364:	30 e0       	ldi	r19, 0x00	; 0
   14366:	4f 01       	movw	r8, r30
   14368:	81 e0       	ldi	r24, 0x01	; 1
   1436a:	68 2e       	mov	r6, r24
   1436c:	71 2c       	mov	r7, r1
   1436e:	f6 01       	movw	r30, r12
   14370:	13 fd       	sbrc	r17, 3
   14372:	55 91       	lpm	r21, Z+
   14374:	13 ff       	sbrs	r17, 3
   14376:	51 91       	ld	r21, Z+
   14378:	6f 01       	movw	r12, r30
   1437a:	55 23       	and	r21, r21
   1437c:	09 f4       	brne	.+2      	; 0x14380 <conv_brk+0x72>
   1437e:	7b c0       	rjmp	.+246    	; 0x14476 <conv_brk+0x168>
   14380:	5e 35       	cpi	r21, 0x5E	; 94
   14382:	19 f4       	brne	.+6      	; 0x1438a <conv_brk+0x7c>
   14384:	61 15       	cp	r22, r1
   14386:	71 05       	cpc	r23, r1
   14388:	49 f1       	breq	.+82     	; 0x143dc <conv_brk+0xce>
   1438a:	83 2f       	mov	r24, r19
   1438c:	90 e0       	ldi	r25, 0x00	; 0
   1438e:	86 17       	cp	r24, r22
   14390:	97 07       	cpc	r25, r23
   14392:	3c f4       	brge	.+14     	; 0x143a2 <conv_brk+0x94>
   14394:	5d 35       	cpi	r21, 0x5D	; 93
   14396:	51 f1       	breq	.+84     	; 0x143ec <conv_brk+0xde>
   14398:	5d 32       	cpi	r21, 0x2D	; 45
   1439a:	19 f4       	brne	.+6      	; 0x143a2 <conv_brk+0x94>
   1439c:	44 23       	and	r20, r20
   1439e:	01 f1       	breq	.+64     	; 0x143e0 <conv_brk+0xd2>
   143a0:	03 c0       	rjmp	.+6      	; 0x143a8 <conv_brk+0x9a>
   143a2:	44 23       	and	r20, r20
   143a4:	09 f4       	brne	.+2      	; 0x143a8 <conv_brk+0x9a>
   143a6:	25 2f       	mov	r18, r21
   143a8:	85 2f       	mov	r24, r21
   143aa:	86 95       	lsr	r24
   143ac:	86 95       	lsr	r24
   143ae:	86 95       	lsr	r24
   143b0:	f4 01       	movw	r30, r8
   143b2:	e8 0f       	add	r30, r24
   143b4:	f1 1d       	adc	r31, r1
   143b6:	85 2f       	mov	r24, r21
   143b8:	87 70       	andi	r24, 0x07	; 7
   143ba:	23 01       	movw	r4, r6
   143bc:	02 c0       	rjmp	.+4      	; 0x143c2 <conv_brk+0xb4>
   143be:	44 0c       	add	r4, r4
   143c0:	55 1c       	adc	r5, r5
   143c2:	8a 95       	dec	r24
   143c4:	e2 f7       	brpl	.-8      	; 0x143be <conv_brk+0xb0>
   143c6:	80 81       	ld	r24, Z
   143c8:	84 29       	or	r24, r4
   143ca:	80 83       	st	Z, r24
   143cc:	52 17       	cp	r21, r18
   143ce:	51 f0       	breq	.+20     	; 0x143e4 <conv_brk+0xd6>
   143d0:	52 17       	cp	r21, r18
   143d2:	10 f4       	brcc	.+4      	; 0x143d8 <conv_brk+0xca>
   143d4:	5f 5f       	subi	r21, 0xFF	; 255
   143d6:	e8 cf       	rjmp	.-48     	; 0x143a8 <conv_brk+0x9a>
   143d8:	51 50       	subi	r21, 0x01	; 1
   143da:	e6 cf       	rjmp	.-52     	; 0x143a8 <conv_brk+0x9a>
   143dc:	31 e0       	ldi	r19, 0x01	; 1
   143de:	03 c0       	rjmp	.+6      	; 0x143e6 <conv_brk+0xd8>
   143e0:	41 e0       	ldi	r20, 0x01	; 1
   143e2:	01 c0       	rjmp	.+2      	; 0x143e6 <conv_brk+0xd8>
   143e4:	40 e0       	ldi	r20, 0x00	; 0
   143e6:	6f 5f       	subi	r22, 0xFF	; 255
   143e8:	7f 4f       	sbci	r23, 0xFF	; 255
   143ea:	c1 cf       	rjmp	.-126    	; 0x1436e <conv_brk+0x60>
   143ec:	44 23       	and	r20, r20
   143ee:	19 f0       	breq	.+6      	; 0x143f6 <conv_brk+0xe8>
   143f0:	8e 81       	ldd	r24, Y+6	; 0x06
   143f2:	80 62       	ori	r24, 0x20	; 32
   143f4:	8e 83       	std	Y+6, r24	; 0x06
   143f6:	33 23       	and	r19, r19
   143f8:	51 f0       	breq	.+20     	; 0x1440e <conv_brk+0x100>
   143fa:	fe 01       	movw	r30, r28
   143fc:	31 96       	adiw	r30, 0x01	; 1
   143fe:	ce 01       	movw	r24, r28
   14400:	81 96       	adiw	r24, 0x21	; 33
   14402:	20 81       	ld	r18, Z
   14404:	20 95       	com	r18
   14406:	21 93       	st	Z+, r18
   14408:	e8 17       	cp	r30, r24
   1440a:	f9 07       	cpc	r31, r25
   1440c:	d1 f7       	brne	.-12     	; 0x14402 <conv_brk+0xf4>
   1440e:	11 e0       	ldi	r17, 0x01	; 1
   14410:	01 c0       	rjmp	.+2      	; 0x14414 <conv_brk+0x106>
   14412:	10 e0       	ldi	r17, 0x00	; 0
   14414:	c5 01       	movw	r24, r10
   14416:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   1441a:	9c 01       	movw	r18, r24
   1441c:	97 fd       	sbrc	r25, 7
   1441e:	23 c0       	rjmp	.+70     	; 0x14466 <conv_brk+0x158>
   14420:	86 95       	lsr	r24
   14422:	86 95       	lsr	r24
   14424:	86 95       	lsr	r24
   14426:	e1 e0       	ldi	r30, 0x01	; 1
   14428:	f0 e0       	ldi	r31, 0x00	; 0
   1442a:	ec 0f       	add	r30, r28
   1442c:	fd 1f       	adc	r31, r29
   1442e:	e8 0f       	add	r30, r24
   14430:	f1 1d       	adc	r31, r1
   14432:	40 81       	ld	r20, Z
   14434:	50 e0       	ldi	r21, 0x00	; 0
   14436:	c9 01       	movw	r24, r18
   14438:	87 70       	andi	r24, 0x07	; 7
   1443a:	90 70       	andi	r25, 0x00	; 0
   1443c:	02 c0       	rjmp	.+4      	; 0x14442 <conv_brk+0x134>
   1443e:	55 95       	asr	r21
   14440:	47 95       	ror	r20
   14442:	8a 95       	dec	r24
   14444:	e2 f7       	brpl	.-8      	; 0x1443e <conv_brk+0x130>
   14446:	40 fd       	sbrc	r20, 0
   14448:	05 c0       	rjmp	.+10     	; 0x14454 <conv_brk+0x146>
   1444a:	c9 01       	movw	r24, r18
   1444c:	b5 01       	movw	r22, r10
   1444e:	0e 94 d5 a3 	call	0x147aa	; 0x147aa <ungetc>
   14452:	09 c0       	rjmp	.+18     	; 0x14466 <conv_brk+0x158>
   14454:	e1 14       	cp	r14, r1
   14456:	f1 04       	cpc	r15, r1
   14458:	19 f0       	breq	.+6      	; 0x14460 <conv_brk+0x152>
   1445a:	d7 01       	movw	r26, r14
   1445c:	2d 93       	st	X+, r18
   1445e:	7d 01       	movw	r14, r26
   14460:	01 50       	subi	r16, 0x01	; 1
   14462:	b9 f6       	brne	.-82     	; 0x14412 <conv_brk+0x104>
   14464:	02 c0       	rjmp	.+4      	; 0x1446a <conv_brk+0x15c>
   14466:	11 23       	and	r17, r17
   14468:	31 f4       	brne	.+12     	; 0x14476 <conv_brk+0x168>
   1446a:	e1 14       	cp	r14, r1
   1446c:	f1 04       	cpc	r15, r1
   1446e:	29 f0       	breq	.+10     	; 0x1447a <conv_brk+0x16c>
   14470:	f7 01       	movw	r30, r14
   14472:	10 82       	st	Z, r1
   14474:	02 c0       	rjmp	.+4      	; 0x1447a <conv_brk+0x16c>
   14476:	cc 24       	eor	r12, r12
   14478:	dd 24       	eor	r13, r13
   1447a:	c6 01       	movw	r24, r12
   1447c:	a0 96       	adiw	r28, 0x20	; 32
   1447e:	0f b6       	in	r0, 0x3f	; 63
   14480:	f8 94       	cli
   14482:	de bf       	out	0x3e, r29	; 62
   14484:	0f be       	out	0x3f, r0	; 63
   14486:	cd bf       	out	0x3d, r28	; 61
   14488:	df 91       	pop	r29
   1448a:	cf 91       	pop	r28
   1448c:	1f 91       	pop	r17
   1448e:	0f 91       	pop	r16
   14490:	ff 90       	pop	r15
   14492:	ef 90       	pop	r14
   14494:	df 90       	pop	r13
   14496:	cf 90       	pop	r12
   14498:	bf 90       	pop	r11
   1449a:	af 90       	pop	r10
   1449c:	9f 90       	pop	r9
   1449e:	8f 90       	pop	r8
   144a0:	7f 90       	pop	r7
   144a2:	6f 90       	pop	r6
   144a4:	5f 90       	pop	r5
   144a6:	4f 90       	pop	r4
   144a8:	08 95       	ret

000144aa <vfscanf>:
   144aa:	5f 92       	push	r5
   144ac:	6f 92       	push	r6
   144ae:	7f 92       	push	r7
   144b0:	8f 92       	push	r8
   144b2:	9f 92       	push	r9
   144b4:	af 92       	push	r10
   144b6:	bf 92       	push	r11
   144b8:	cf 92       	push	r12
   144ba:	df 92       	push	r13
   144bc:	ef 92       	push	r14
   144be:	ff 92       	push	r15
   144c0:	0f 93       	push	r16
   144c2:	1f 93       	push	r17
   144c4:	cf 93       	push	r28
   144c6:	df 93       	push	r29
   144c8:	0f 92       	push	r0
   144ca:	cd b7       	in	r28, 0x3d	; 61
   144cc:	de b7       	in	r29, 0x3e	; 62
   144ce:	7c 01       	movw	r14, r24
   144d0:	5b 01       	movw	r10, r22
   144d2:	3a 01       	movw	r6, r20
   144d4:	fc 01       	movw	r30, r24
   144d6:	17 82       	std	Z+7, r1	; 0x07
   144d8:	16 82       	std	Z+6, r1	; 0x06
   144da:	99 24       	eor	r9, r9
   144dc:	ef c0       	rjmp	.+478    	; 0x146bc <vfscanf+0x212>
   144de:	81 2f       	mov	r24, r17
   144e0:	90 e0       	ldi	r25, 0x00	; 0
   144e2:	0e 94 82 a3 	call	0x14704	; 0x14704 <isspace>
   144e6:	00 97       	sbiw	r24, 0x00	; 0
   144e8:	21 f0       	breq	.+8      	; 0x144f2 <vfscanf+0x48>
   144ea:	c7 01       	movw	r24, r14
   144ec:	0e 94 e9 a0 	call	0x141d2	; 0x141d2 <skip_spaces>
   144f0:	e5 c0       	rjmp	.+458    	; 0x146bc <vfscanf+0x212>
   144f2:	15 32       	cpi	r17, 0x25	; 37
   144f4:	41 f4       	brne	.+16     	; 0x14506 <vfscanf+0x5c>
   144f6:	f5 01       	movw	r30, r10
   144f8:	03 fd       	sbrc	r16, 3
   144fa:	35 91       	lpm	r19, Z+
   144fc:	03 ff       	sbrs	r16, 3
   144fe:	31 91       	ld	r19, Z+
   14500:	5f 01       	movw	r10, r30
   14502:	35 32       	cpi	r19, 0x25	; 37
   14504:	61 f4       	brne	.+24     	; 0x1451e <vfscanf+0x74>
   14506:	c7 01       	movw	r24, r14
   14508:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   1450c:	97 fd       	sbrc	r25, 7
   1450e:	e2 c0       	rjmp	.+452    	; 0x146d4 <vfscanf+0x22a>
   14510:	18 17       	cp	r17, r24
   14512:	09 f4       	brne	.+2      	; 0x14516 <vfscanf+0x6c>
   14514:	d3 c0       	rjmp	.+422    	; 0x146bc <vfscanf+0x212>
   14516:	b7 01       	movw	r22, r14
   14518:	0e 94 d5 a3 	call	0x147aa	; 0x147aa <ungetc>
   1451c:	dd c0       	rjmp	.+442    	; 0x146d8 <vfscanf+0x22e>
   1451e:	3a 32       	cpi	r19, 0x2A	; 42
   14520:	41 f4       	brne	.+16     	; 0x14532 <vfscanf+0x88>
   14522:	03 fd       	sbrc	r16, 3
   14524:	35 91       	lpm	r19, Z+
   14526:	03 ff       	sbrs	r16, 3
   14528:	31 91       	ld	r19, Z+
   1452a:	5f 01       	movw	r10, r30
   1452c:	55 24       	eor	r5, r5
   1452e:	53 94       	inc	r5
   14530:	01 c0       	rjmp	.+2      	; 0x14534 <vfscanf+0x8a>
   14532:	55 24       	eor	r5, r5
   14534:	88 24       	eor	r8, r8
   14536:	10 c0       	rjmp	.+32     	; 0x14558 <vfscanf+0xae>
   14538:	f2 e0       	ldi	r31, 0x02	; 2
   1453a:	5f 2a       	or	r5, r31
   1453c:	68 2d       	mov	r22, r8
   1453e:	70 e0       	ldi	r23, 0x00	; 0
   14540:	80 e0       	ldi	r24, 0x00	; 0
   14542:	90 e0       	ldi	r25, 0x00	; 0
   14544:	40 e2       	ldi	r20, 0x20	; 32
   14546:	0e 94 bd a0 	call	0x1417a	; 0x1417a <mulacc>
   1454a:	86 2e       	mov	r8, r22
   1454c:	f5 01       	movw	r30, r10
   1454e:	03 fd       	sbrc	r16, 3
   14550:	35 91       	lpm	r19, Z+
   14552:	03 ff       	sbrs	r16, 3
   14554:	31 91       	ld	r19, Z+
   14556:	5f 01       	movw	r10, r30
   14558:	23 2f       	mov	r18, r19
   1455a:	20 53       	subi	r18, 0x30	; 48
   1455c:	2a 30       	cpi	r18, 0x0A	; 10
   1455e:	60 f3       	brcs	.-40     	; 0x14538 <vfscanf+0x8e>
   14560:	51 fe       	sbrs	r5, 1
   14562:	03 c0       	rjmp	.+6      	; 0x1456a <vfscanf+0xc0>
   14564:	88 20       	and	r8, r8
   14566:	19 f4       	brne	.+6      	; 0x1456e <vfscanf+0xc4>
   14568:	b7 c0       	rjmp	.+366    	; 0x146d8 <vfscanf+0x22e>
   1456a:	88 24       	eor	r8, r8
   1456c:	8a 94       	dec	r8
   1456e:	38 36       	cpi	r19, 0x68	; 104
   14570:	19 f0       	breq	.+6      	; 0x14578 <vfscanf+0xce>
   14572:	3c 36       	cpi	r19, 0x6C	; 108
   14574:	99 f4       	brne	.+38     	; 0x1459c <vfscanf+0xf2>
   14576:	0a c0       	rjmp	.+20     	; 0x1458c <vfscanf+0xe2>
   14578:	f5 01       	movw	r30, r10
   1457a:	03 fd       	sbrc	r16, 3
   1457c:	35 91       	lpm	r19, Z+
   1457e:	03 ff       	sbrs	r16, 3
   14580:	31 91       	ld	r19, Z+
   14582:	5f 01       	movw	r10, r30
   14584:	38 36       	cpi	r19, 0x68	; 104
   14586:	51 f4       	brne	.+20     	; 0x1459c <vfscanf+0xf2>
   14588:	f8 e0       	ldi	r31, 0x08	; 8
   1458a:	5f 2a       	or	r5, r31
   1458c:	44 e0       	ldi	r20, 0x04	; 4
   1458e:	54 2a       	or	r5, r20
   14590:	f5 01       	movw	r30, r10
   14592:	03 fd       	sbrc	r16, 3
   14594:	35 91       	lpm	r19, Z+
   14596:	03 ff       	sbrs	r16, 3
   14598:	31 91       	ld	r19, Z+
   1459a:	5f 01       	movw	r10, r30
   1459c:	33 23       	and	r19, r19
   1459e:	09 f4       	brne	.+2      	; 0x145a2 <vfscanf+0xf8>
   145a0:	9b c0       	rjmp	.+310    	; 0x146d8 <vfscanf+0x22e>
   145a2:	84 ee       	ldi	r24, 0xE4	; 228
   145a4:	90 e0       	ldi	r25, 0x00	; 0
   145a6:	63 2f       	mov	r22, r19
   145a8:	70 e0       	ldi	r23, 0x00	; 0
   145aa:	39 83       	std	Y+1, r19	; 0x01
   145ac:	0e 94 8a a3 	call	0x14714	; 0x14714 <strchr_P>
   145b0:	39 81       	ldd	r19, Y+1	; 0x01
   145b2:	00 97       	sbiw	r24, 0x00	; 0
   145b4:	09 f4       	brne	.+2      	; 0x145b8 <vfscanf+0x10e>
   145b6:	90 c0       	rjmp	.+288    	; 0x146d8 <vfscanf+0x22e>
   145b8:	85 2d       	mov	r24, r5
   145ba:	50 fc       	sbrc	r5, 0
   145bc:	08 c0       	rjmp	.+16     	; 0x145ce <vfscanf+0x124>
   145be:	f3 01       	movw	r30, r6
   145c0:	00 81       	ld	r16, Z
   145c2:	11 81       	ldd	r17, Z+1	; 0x01
   145c4:	42 e0       	ldi	r20, 0x02	; 2
   145c6:	50 e0       	ldi	r21, 0x00	; 0
   145c8:	64 0e       	add	r6, r20
   145ca:	75 1e       	adc	r7, r21
   145cc:	02 c0       	rjmp	.+4      	; 0x145d2 <vfscanf+0x128>
   145ce:	00 e0       	ldi	r16, 0x00	; 0
   145d0:	10 e0       	ldi	r17, 0x00	; 0
   145d2:	3e 36       	cpi	r19, 0x6E	; 110
   145d4:	51 f4       	brne	.+20     	; 0x145ea <vfscanf+0x140>
   145d6:	f7 01       	movw	r30, r14
   145d8:	46 81       	ldd	r20, Z+6	; 0x06
   145da:	57 81       	ldd	r21, Z+7	; 0x07
   145dc:	60 e0       	ldi	r22, 0x00	; 0
   145de:	70 e0       	ldi	r23, 0x00	; 0
   145e0:	c8 01       	movw	r24, r16
   145e2:	25 2d       	mov	r18, r5
   145e4:	0e 94 b1 a0 	call	0x14162	; 0x14162 <putval>
   145e8:	69 c0       	rjmp	.+210    	; 0x146bc <vfscanf+0x212>
   145ea:	33 36       	cpi	r19, 0x63	; 99
   145ec:	91 f4       	brne	.+36     	; 0x14612 <vfscanf+0x168>
   145ee:	81 fd       	sbrc	r24, 1
   145f0:	02 c0       	rjmp	.+4      	; 0x145f6 <vfscanf+0x14c>
   145f2:	88 24       	eor	r8, r8
   145f4:	83 94       	inc	r8
   145f6:	c7 01       	movw	r24, r14
   145f8:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   145fc:	97 fd       	sbrc	r25, 7
   145fe:	6a c0       	rjmp	.+212    	; 0x146d4 <vfscanf+0x22a>
   14600:	01 15       	cp	r16, r1
   14602:	11 05       	cpc	r17, r1
   14604:	19 f0       	breq	.+6      	; 0x1460c <vfscanf+0x162>
   14606:	f8 01       	movw	r30, r16
   14608:	81 93       	st	Z+, r24
   1460a:	8f 01       	movw	r16, r30
   1460c:	8a 94       	dec	r8
   1460e:	99 f7       	brne	.-26     	; 0x145f6 <vfscanf+0x14c>
   14610:	53 c0       	rjmp	.+166    	; 0x146b8 <vfscanf+0x20e>
   14612:	c7 01       	movw	r24, r14
   14614:	3b 35       	cpi	r19, 0x5B	; 91
   14616:	51 f4       	brne	.+20     	; 0x1462c <vfscanf+0x182>
   14618:	68 2d       	mov	r22, r8
   1461a:	a8 01       	movw	r20, r16
   1461c:	95 01       	movw	r18, r10
   1461e:	0e 94 87 a1 	call	0x1430e	; 0x1430e <conv_brk>
   14622:	5c 01       	movw	r10, r24
   14624:	00 97       	sbiw	r24, 0x00	; 0
   14626:	09 f0       	breq	.+2      	; 0x1462a <vfscanf+0x180>
   14628:	47 c0       	rjmp	.+142    	; 0x146b8 <vfscanf+0x20e>
   1462a:	41 c0       	rjmp	.+130    	; 0x146ae <vfscanf+0x204>
   1462c:	39 83       	std	Y+1, r19	; 0x01
   1462e:	0e 94 e9 a0 	call	0x141d2	; 0x141d2 <skip_spaces>
   14632:	39 81       	ldd	r19, Y+1	; 0x01
   14634:	97 fd       	sbrc	r25, 7
   14636:	4e c0       	rjmp	.+156    	; 0x146d4 <vfscanf+0x22a>
   14638:	3f 36       	cpi	r19, 0x6F	; 111
   1463a:	61 f1       	breq	.+88     	; 0x14694 <vfscanf+0x1ea>
   1463c:	30 37       	cpi	r19, 0x70	; 112
   1463e:	28 f4       	brcc	.+10     	; 0x1464a <vfscanf+0x1a0>
   14640:	34 36       	cpi	r19, 0x64	; 100
   14642:	29 f1       	breq	.+74     	; 0x1468e <vfscanf+0x1e4>
   14644:	39 36       	cpi	r19, 0x69	; 105
   14646:	49 f5       	brne	.+82     	; 0x1469a <vfscanf+0x1f0>
   14648:	2a c0       	rjmp	.+84     	; 0x1469e <vfscanf+0x1f4>
   1464a:	33 37       	cpi	r19, 0x73	; 115
   1464c:	19 f0       	breq	.+6      	; 0x14654 <vfscanf+0x1aa>
   1464e:	35 37       	cpi	r19, 0x75	; 117
   14650:	21 f5       	brne	.+72     	; 0x1469a <vfscanf+0x1f0>
   14652:	1d c0       	rjmp	.+58     	; 0x1468e <vfscanf+0x1e4>
   14654:	c7 01       	movw	r24, r14
   14656:	0e 94 95 a3 	call	0x1472a	; 0x1472a <fgetc>
   1465a:	6c 01       	movw	r12, r24
   1465c:	97 fd       	sbrc	r25, 7
   1465e:	11 c0       	rjmp	.+34     	; 0x14682 <vfscanf+0x1d8>
   14660:	0e 94 82 a3 	call	0x14704	; 0x14704 <isspace>
   14664:	00 97       	sbiw	r24, 0x00	; 0
   14666:	29 f0       	breq	.+10     	; 0x14672 <vfscanf+0x1c8>
   14668:	c6 01       	movw	r24, r12
   1466a:	b7 01       	movw	r22, r14
   1466c:	0e 94 d5 a3 	call	0x147aa	; 0x147aa <ungetc>
   14670:	08 c0       	rjmp	.+16     	; 0x14682 <vfscanf+0x1d8>
   14672:	01 15       	cp	r16, r1
   14674:	11 05       	cpc	r17, r1
   14676:	19 f0       	breq	.+6      	; 0x1467e <vfscanf+0x1d4>
   14678:	f8 01       	movw	r30, r16
   1467a:	c1 92       	st	Z+, r12
   1467c:	8f 01       	movw	r16, r30
   1467e:	8a 94       	dec	r8
   14680:	49 f7       	brne	.-46     	; 0x14654 <vfscanf+0x1aa>
   14682:	01 15       	cp	r16, r1
   14684:	11 05       	cpc	r17, r1
   14686:	c1 f0       	breq	.+48     	; 0x146b8 <vfscanf+0x20e>
   14688:	f8 01       	movw	r30, r16
   1468a:	10 82       	st	Z, r1
   1468c:	15 c0       	rjmp	.+42     	; 0x146b8 <vfscanf+0x20e>
   1468e:	f0 e2       	ldi	r31, 0x20	; 32
   14690:	5f 2a       	or	r5, r31
   14692:	05 c0       	rjmp	.+10     	; 0x1469e <vfscanf+0x1f4>
   14694:	40 e1       	ldi	r20, 0x10	; 16
   14696:	54 2a       	or	r5, r20
   14698:	02 c0       	rjmp	.+4      	; 0x1469e <vfscanf+0x1f4>
   1469a:	50 e4       	ldi	r21, 0x40	; 64
   1469c:	55 2a       	or	r5, r21
   1469e:	c7 01       	movw	r24, r14
   146a0:	68 2d       	mov	r22, r8
   146a2:	a8 01       	movw	r20, r16
   146a4:	25 2d       	mov	r18, r5
   146a6:	0e 94 02 a1 	call	0x14204	; 0x14204 <conv_int>
   146aa:	88 23       	and	r24, r24
   146ac:	29 f4       	brne	.+10     	; 0x146b8 <vfscanf+0x20e>
   146ae:	f7 01       	movw	r30, r14
   146b0:	83 81       	ldd	r24, Z+3	; 0x03
   146b2:	80 73       	andi	r24, 0x30	; 48
   146b4:	79 f4       	brne	.+30     	; 0x146d4 <vfscanf+0x22a>
   146b6:	10 c0       	rjmp	.+32     	; 0x146d8 <vfscanf+0x22e>
   146b8:	50 fe       	sbrs	r5, 0
   146ba:	93 94       	inc	r9
   146bc:	f7 01       	movw	r30, r14
   146be:	03 81       	ldd	r16, Z+3	; 0x03
   146c0:	f5 01       	movw	r30, r10
   146c2:	03 fd       	sbrc	r16, 3
   146c4:	15 91       	lpm	r17, Z+
   146c6:	03 ff       	sbrs	r16, 3
   146c8:	11 91       	ld	r17, Z+
   146ca:	5f 01       	movw	r10, r30
   146cc:	11 23       	and	r17, r17
   146ce:	09 f0       	breq	.+2      	; 0x146d2 <vfscanf+0x228>
   146d0:	06 cf       	rjmp	.-500    	; 0x144de <vfscanf+0x34>
   146d2:	02 c0       	rjmp	.+4      	; 0x146d8 <vfscanf+0x22e>
   146d4:	99 20       	and	r9, r9
   146d6:	19 f0       	breq	.+6      	; 0x146de <vfscanf+0x234>
   146d8:	89 2d       	mov	r24, r9
   146da:	90 e0       	ldi	r25, 0x00	; 0
   146dc:	02 c0       	rjmp	.+4      	; 0x146e2 <vfscanf+0x238>
   146de:	8f ef       	ldi	r24, 0xFF	; 255
   146e0:	9f ef       	ldi	r25, 0xFF	; 255
   146e2:	0f 90       	pop	r0
   146e4:	df 91       	pop	r29
   146e6:	cf 91       	pop	r28
   146e8:	1f 91       	pop	r17
   146ea:	0f 91       	pop	r16
   146ec:	ff 90       	pop	r15
   146ee:	ef 90       	pop	r14
   146f0:	df 90       	pop	r13
   146f2:	cf 90       	pop	r12
   146f4:	bf 90       	pop	r11
   146f6:	af 90       	pop	r10
   146f8:	9f 90       	pop	r9
   146fa:	8f 90       	pop	r8
   146fc:	7f 90       	pop	r7
   146fe:	6f 90       	pop	r6
   14700:	5f 90       	pop	r5
   14702:	08 95       	ret

00014704 <isspace>:
   14704:	91 11       	cpse	r25, r1
   14706:	6e c0       	rjmp	.+220    	; 0x147e4 <__ctype_isfalse>
   14708:	80 32       	cpi	r24, 0x20	; 32
   1470a:	19 f0       	breq	.+6      	; 0x14712 <isspace+0xe>
   1470c:	89 50       	subi	r24, 0x09	; 9
   1470e:	85 50       	subi	r24, 0x05	; 5
   14710:	d0 f7       	brcc	.-12     	; 0x14706 <isspace+0x2>
   14712:	08 95       	ret

00014714 <strchr_P>:
   14714:	fc 01       	movw	r30, r24
   14716:	05 90       	lpm	r0, Z+
   14718:	06 16       	cp	r0, r22
   1471a:	21 f0       	breq	.+8      	; 0x14724 <strchr_P+0x10>
   1471c:	00 20       	and	r0, r0
   1471e:	d9 f7       	brne	.-10     	; 0x14716 <strchr_P+0x2>
   14720:	c0 01       	movw	r24, r0
   14722:	08 95       	ret
   14724:	31 97       	sbiw	r30, 0x01	; 1
   14726:	cf 01       	movw	r24, r30
   14728:	08 95       	ret

0001472a <fgetc>:
   1472a:	cf 93       	push	r28
   1472c:	df 93       	push	r29
   1472e:	ec 01       	movw	r28, r24
   14730:	2b 81       	ldd	r18, Y+3	; 0x03
   14732:	20 ff       	sbrs	r18, 0
   14734:	35 c0       	rjmp	.+106    	; 0x147a0 <fgetc+0x76>
   14736:	26 ff       	sbrs	r18, 6
   14738:	09 c0       	rjmp	.+18     	; 0x1474c <fgetc+0x22>
   1473a:	2f 7b       	andi	r18, 0xBF	; 191
   1473c:	2b 83       	std	Y+3, r18	; 0x03
   1473e:	8e 81       	ldd	r24, Y+6	; 0x06
   14740:	9f 81       	ldd	r25, Y+7	; 0x07
   14742:	01 96       	adiw	r24, 0x01	; 1
   14744:	9f 83       	std	Y+7, r25	; 0x07
   14746:	8e 83       	std	Y+6, r24	; 0x06
   14748:	8a 81       	ldd	r24, Y+2	; 0x02
   1474a:	28 c0       	rjmp	.+80     	; 0x1479c <fgetc+0x72>
   1474c:	22 ff       	sbrs	r18, 2
   1474e:	0f c0       	rjmp	.+30     	; 0x1476e <fgetc+0x44>
   14750:	e8 81       	ld	r30, Y
   14752:	f9 81       	ldd	r31, Y+1	; 0x01
   14754:	80 81       	ld	r24, Z
   14756:	99 27       	eor	r25, r25
   14758:	87 fd       	sbrc	r24, 7
   1475a:	90 95       	com	r25
   1475c:	00 97       	sbiw	r24, 0x00	; 0
   1475e:	19 f4       	brne	.+6      	; 0x14766 <fgetc+0x3c>
   14760:	20 62       	ori	r18, 0x20	; 32
   14762:	2b 83       	std	Y+3, r18	; 0x03
   14764:	1d c0       	rjmp	.+58     	; 0x147a0 <fgetc+0x76>
   14766:	31 96       	adiw	r30, 0x01	; 1
   14768:	f9 83       	std	Y+1, r31	; 0x01
   1476a:	e8 83       	st	Y, r30
   1476c:	11 c0       	rjmp	.+34     	; 0x14790 <fgetc+0x66>
   1476e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14770:	fb 85       	ldd	r31, Y+11	; 0x0b
   14772:	ce 01       	movw	r24, r28
   14774:	19 95       	eicall
   14776:	97 ff       	sbrs	r25, 7
   14778:	0b c0       	rjmp	.+22     	; 0x14790 <fgetc+0x66>
   1477a:	2b 81       	ldd	r18, Y+3	; 0x03
   1477c:	3f ef       	ldi	r19, 0xFF	; 255
   1477e:	8f 3f       	cpi	r24, 0xFF	; 255
   14780:	93 07       	cpc	r25, r19
   14782:	11 f4       	brne	.+4      	; 0x14788 <fgetc+0x5e>
   14784:	80 e1       	ldi	r24, 0x10	; 16
   14786:	01 c0       	rjmp	.+2      	; 0x1478a <fgetc+0x60>
   14788:	80 e2       	ldi	r24, 0x20	; 32
   1478a:	82 2b       	or	r24, r18
   1478c:	8b 83       	std	Y+3, r24	; 0x03
   1478e:	08 c0       	rjmp	.+16     	; 0x147a0 <fgetc+0x76>
   14790:	2e 81       	ldd	r18, Y+6	; 0x06
   14792:	3f 81       	ldd	r19, Y+7	; 0x07
   14794:	2f 5f       	subi	r18, 0xFF	; 255
   14796:	3f 4f       	sbci	r19, 0xFF	; 255
   14798:	3f 83       	std	Y+7, r19	; 0x07
   1479a:	2e 83       	std	Y+6, r18	; 0x06
   1479c:	90 e0       	ldi	r25, 0x00	; 0
   1479e:	02 c0       	rjmp	.+4      	; 0x147a4 <fgetc+0x7a>
   147a0:	8f ef       	ldi	r24, 0xFF	; 255
   147a2:	9f ef       	ldi	r25, 0xFF	; 255
   147a4:	df 91       	pop	r29
   147a6:	cf 91       	pop	r28
   147a8:	08 95       	ret

000147aa <ungetc>:
   147aa:	fb 01       	movw	r30, r22
   147ac:	23 81       	ldd	r18, Z+3	; 0x03
   147ae:	20 ff       	sbrs	r18, 0
   147b0:	13 c0       	rjmp	.+38     	; 0x147d8 <ungetc+0x2e>
   147b2:	26 fd       	sbrc	r18, 6
   147b4:	11 c0       	rjmp	.+34     	; 0x147d8 <ungetc+0x2e>
   147b6:	3f ef       	ldi	r19, 0xFF	; 255
   147b8:	8f 3f       	cpi	r24, 0xFF	; 255
   147ba:	93 07       	cpc	r25, r19
   147bc:	81 f0       	breq	.+32     	; 0x147de <ungetc+0x34>
   147be:	82 83       	std	Z+2, r24	; 0x02
   147c0:	92 2f       	mov	r25, r18
   147c2:	90 64       	ori	r25, 0x40	; 64
   147c4:	9f 7d       	andi	r25, 0xDF	; 223
   147c6:	93 83       	std	Z+3, r25	; 0x03
   147c8:	26 81       	ldd	r18, Z+6	; 0x06
   147ca:	37 81       	ldd	r19, Z+7	; 0x07
   147cc:	21 50       	subi	r18, 0x01	; 1
   147ce:	30 40       	sbci	r19, 0x00	; 0
   147d0:	37 83       	std	Z+7, r19	; 0x07
   147d2:	26 83       	std	Z+6, r18	; 0x06
   147d4:	90 e0       	ldi	r25, 0x00	; 0
   147d6:	08 95       	ret
   147d8:	8f ef       	ldi	r24, 0xFF	; 255
   147da:	9f ef       	ldi	r25, 0xFF	; 255
   147dc:	08 95       	ret
   147de:	8f ef       	ldi	r24, 0xFF	; 255
   147e0:	9f ef       	ldi	r25, 0xFF	; 255
   147e2:	08 95       	ret

000147e4 <__ctype_isfalse>:
   147e4:	99 27       	eor	r25, r25
   147e6:	88 27       	eor	r24, r24

000147e8 <__ctype_istrue>:
   147e8:	08 95       	ret

000147ea <_exit>:
   147ea:	f8 94       	cli

000147ec <__stop_program>:
   147ec:	ff cf       	rjmp	.-2      	; 0x147ec <__stop_program>
